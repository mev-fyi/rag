00:00:00.800 - 00:00:19.090, Speaker A: Alright. Hello, everyone. Welcome back. This is a somewhat more informal stream. This is not gonna, we're not gonna tackle as any particularly super hard technical topics. This is really just me building something interesting, maybe, I don't know, in rust. And you get to just see some non super technical coding for once.
00:00:19.090 - 00:00:58.310, Speaker A: The basic idea, and I've had this for a little while, is I want to, I wanted to have a way for people to give opinions on what topics to cover in upcoming streams. And there are a bunch of sites out there to like, let people do votes. And traditionally what I've done is use just the Twitter polls and that works fine. But it's a little bit annoying that we keep having to go through the same sort of vote options. And so I've been sort of in the back of my head thinking about how we might want to do this. And there's been a lot of discussion about, like, how voting works in the US. And one of the sort of proposed solutions that have come up is this idea of ranked voting.
00:00:58.310 - 00:01:15.030, Speaker A: And I have a drawing pad now. I'm very excited. So for the Tokyo stream that we're doing this Saturday, because it's more of a conceptual stream, I figured it'd be useful to be able to draw things. I'm going to. Ooh, that's very bright. I don't know if I can do anything about that. Oh, maybe I can, actually.
00:01:15.030 - 00:01:48.646, Speaker A: How about this? How about we fill this with black and we draw with white? Like, ooh, what? Oh, really? This one? Fill with that one. Why can't I? There we go. And then in theory, let's see if this works. In theory, I can draw here now. Great. All right. So is that legible, roughly? Oh, this is just, this is just gimp.
00:01:48.646 - 00:02:17.885, Speaker A: There's nothing particularly interesting, but I've got one of these. It's like a little, little drawing pad and a pen. I'm not going to write text here because my handwriting is terrible. But what I wanted to do was basically give you an idea of how this works. So the idea in ranked choice voting is everyone fills out, everyone is given like a form where you are told to rank your candidates. So imagine here that we have five ballots. Wow.
00:02:17.885 - 00:02:52.082, Speaker A: Drawing like this is really hard. Okay, so we're going to be voting on, say, choices a, b, C and D, right? So everyone is going to rank their, the choices that they would like to see, and they're going to rank them basically in order. Oh, legible. Okay, good. So the idea is, let's say that this is, I'm not going to name them because that's annoying. But this voter votes for a, then b, then c, then d. This person votes for a and just a, so you don't have to do exhaustive listing.
00:02:52.082 - 00:03:20.430, Speaker A: Think of these as. So these could be like candidates for an election. In my case, these would be ids for streams, right? So this is a streaming id, a, streaming id, b, streaming id, c and streaming id dinner. So the first person voted for all of them in sort of alphabetical order. This person voted just for a and for nothing else. This person, let's say, votes for b and then a is the secondary. This person votes for b and then c and then d.
00:03:20.430 - 00:03:50.506, Speaker A: And then this person votes for c and then a. Okay, so the idea of ranked choice voting is that you want to get some candidate. There are many versions of this. I'm going to explain a very straightforward one. I recommend you look this up and we could read if you're interested. The basic idea is that you're going to look at all of like everyone's first choice and you're going to see if anyone has a majority of the votes. So in this case, both of these have a, both of these have b, and this guy has c.
00:03:50.506 - 00:04:11.524, Speaker A: Right. And so no one has a majority. No one has more than half the votes. And then what you're going to do is you're going to eliminate the candidate that got the fewest votes. So in this case, I guess you eliminate d. I actually don't know whether you eliminate d in this case, but let's say that you eliminate d. So you eliminate the candidate who got the fewest votes and then you do it again.
00:04:11.524 - 00:04:29.268, Speaker A: Right. So now we check whether it has a majority. Obviously no one does. So then we eliminate candidate c. And then what you do is you always look at whoever now is the primary candidate for each ballot. So in this case, this person is still voting for a, this person is still voting for a because a is still in the race. These people are both voting for b.
00:04:29.268 - 00:04:57.264, Speaker A: This person, they cannot vote for c, so their vote is now for a. So now a has three out of five, and therefore a wins the election. Right. So this in and of itself is an interesting voting strategy. But the reason specifically why I wanted to use this for stream ideas is what you can do now is imagine that we now I do stream a, and so a is no longer an option. Right. A has gone away.
00:04:57.264 - 00:05:20.670, Speaker A: What you can do now is without anyone doing any more votes, I can rerun the election with a removed. I remove a from everyone's votes. So I pretend like a is not there. Right. C is now back here, right? So this now does say c again. This now does say d, and this now does say d, but a is gone. And so now I just.
00:05:20.670 - 00:05:47.510, Speaker A: People can still vote if they want and, like, change orders. I could maybe add alternatives, but in general, all the old votes are still there. So I still roughly know people's preferences. And so what's now going to happen is I rerun the election and this time b wins, right? Because this vote is now for b, this vote is now for b, and this vote is now for b. And so now I know that I should do stream b. So then I get rid of b, and then I run the election again with b removed. And.
00:05:47.510 - 00:06:15.434, Speaker A: And this time c wins. So now I do see, of course, in this. It's kind of stupid in this particular example, like, they happen to be in order, but that does not necessarily be the case. Right? So if this was b instead of a, then B would have won the first election. So the basic. The basic reason I want to do this is because I can. I can have people not have to vote every time on the same options they've been given before, but instead just say, rank these candidates and pick which, whichever ones you care about, and then the appropriate streams will happen.
00:06:15.434 - 00:06:38.550, Speaker A: There's no, like, voting strategy or anything. And then, of course, I can extend this with adding new options so people can add them to the list of things that they want to vote for. So I think this is pretty cool. So that's basically what I'm going to build. Is there a question here a little bit like the australian election voting system? Yeah, maybe. I don't know what they use in Australia. I know that this is something that a couple of us states have started doing this now.
00:06:38.550 - 00:07:04.360, Speaker A: And so I wonder what happens if I do this. Ah, no, no. Switching between pen and mouse is weird. Okay, so basically the interface I want. I want this to be super simple, right? So we're gonna probably, let's say we have three views. We might not even have three views from Russia. Cool.
00:07:04.360 - 00:07:39.836, Speaker A: Yeah. It's a really interesting voting system. There's a great YouTube video by someone called CP Gray. If you just search for something gray, if you search for, like, gray ranked choice voting, there's a really good video that explains the principles behind this better than I can in this video, but so let's. Okay, so this is not entirely straight lines, but imagine that these are sort of the three different pages that are going to be in this application the first page, because I don't, I don't care about security here. I don't think people are gonna impersonate one another. And if they do, I don't really care.
00:07:39.836 - 00:08:31.860, Speaker A: So the basic premise I want is something like, maybe you don't even want that. But I was imagining something like the first screen is just a text field where you can input a unique, unique identifier and it shows you maybe the set of upcoming stream ids ordered by the current winners. Or maybe it just shows you the current winner. I don't know yet. We could look at that when we get there. The idea is that if you give some unique id, then what you're going to be presented with is a list of all the stream options, probably in random order, not terribly important. And the idea is that all of these are draggable, right? And so what you do is you just sort of drag them into the order you want to vote for these dream ids in.
00:08:31.860 - 00:09:32.368, Speaker A: And then whatever order you have at the end is the, like it's just going to save all the time and basically continuously run the election. And so there might not be a third screen, in fact. And if you later come back and you want to change your votes or new things have been added, you just go back to the page, you fill in the same unique identifier, you get the same list you reorder, because you should be allowed in rank voice voting to say like I don't care about these options, like I don't want to vote for them. We might need to have something like sort of a barrier saying I don't care about anything below and anything that's underneath that in the list will automatically be considered. You're not voting for this one, right? So you can, you could imagine that this is also draggable, right? You could drag this further up and then any choice below that is basically just going to go away. So I don't think there's a third view, actually. Now of course this is all sorts of broken from a security perspective because like people can just manufacture new ids and all that stuff.
00:09:32.368 - 00:09:55.600, Speaker A: But the goal of this is not to build an election system. It's just, I just want some way for people who are watching to like be able to say what they care about. If someone like screws with it, I will probably do something to make it better. But let's just start out with something super simple. Wherever there just needs to be a possibility to have multiple users. Right? Okay, so that's the basic idea. Does the basic idea make sense.
00:09:55.600 - 00:10:37.080, Speaker A: I don't think it's particularly complicated, but it's useful to just sort of do a double check. I'm going to put this aside now. If I have to draw more, then I will draw more. And as we go, like, I haven't implemented this before. There's gonna be a bunch of web programming. So like who knows whether it'll be interesting, but we'll see the, ooh, right, we're gonna be using rocket for, this is the idea. So rocket is this.
00:10:37.080 - 00:11:20.990, Speaker A: It's a web framework for rust that was written a little while ago and it has this peculiar design decision that they want to always target nightly so they can give like the most flexible API. So it's not intended to be stable, but I don't really care. I just want something that's easy to, easy to write with and they have a bunch of really good examples. So I'm actually just going to go here, examples. And they have one that's like, I think they have one that's basically a database type stuff. Actually use the to do list. To do lists are great as a starting point because they usually have a database of some kind and they usually have like sessions of some kind.
00:11:20.990 - 00:12:08.574, Speaker A: Why not actics web acts? Web is actually, you need to write more code than you do in rocket because you basically need, everything needs to be written as a service and I don't care enough to write everything as a service here probably could, I don't, I don't particularly care. Are you using rocket zero four or three six? Oh, probably zero four. Why not? Let's, let's be bleeding edge, shall we? So we'll probably use this for database. I think my guess is this example uses diesel too. We're going to be using diesel for the database backend. So diesel is this really handy crate for interacting with databases. It has really nice APIs.
00:12:08.574 - 00:12:37.042, Speaker A: You can write structured queries. In some sense we're going to need very little of this because the database here is really stupid. Right. It's just like a user's table, a stream ids table and a vote table. But we'll see what it is. Where it gets really interesting is someone wrote this crate that they actually asked me to review for the, for the open source contribution stream, which is rank choice instant runoff library. So rank choice is the thing we looked at.
00:12:37.042 - 00:13:00.588, Speaker A: Instant runoff. The idea, if I remember correctly, is basically that you do the revote immediately. So we're going to basically use this crate. If I remember correctly, the API for this is super simple. There's a runelection method. You give an iterator of iterators. So the outer iterator is each person.
00:13:00.588 - 00:13:28.570, Speaker A: Basically every ballot yields a ballot. These should probably be named better. So each of the items from the inner, the first, the outer iterator gives you a ballot. And then each ballot is an iterator over the votes. And then it gives you back who won the vote. And for the drag and drop stuff, there's this really handy library called sortable that basically has no dependencies and it gives you a drag and drop list. So that's the plan.
00:13:28.570 - 00:13:54.072, Speaker A: Tower is also a new crate for the web. So tower. Tower is interesting. I've been playing around with tower a bunch and towers. You can think of it more as sort of higher level abstractions for writing clients and servers. It is not really a web framework yet, but I think the idea is to try to get there. There's also tide, which is being developed by Aaron Turin.
00:13:54.072 - 00:14:23.494, Speaker A: And so that might have some promise too, but I don't know that it's in a state where we can really use it. The reason I chose rocket is really because I just want something that works in some sense. The purpose of this is not to dive deep into rust technical issues, but rather go. We're going to build something that just uses a very straightforward, well maintained library that has good documentation, is easy to get up and running with quickly. Glad to see another stream. Yeah, so am I. It's been a while.
00:14:23.494 - 00:14:42.240, Speaker A: It's been a lot of stuff going on, but now we get two very quickly after one another. Alright, so we're gonna use sortable. I guess what we'll have to do is start out with a rocket project. I think we're just gonna start out with this to do example. Let's just look at what this is looks like before we copy it all in. Let's see. Successive.
00:14:42.240 - 00:15:04.880, Speaker A: Yeah. Okay, so this does use diesel, which is basically what we want. Diesel has this notion of migration. So the idea of a migration is you can specify whenever your database schema changes, you do a migration that can be reverted so that you can downgrade your database if you want to. We'll probably use it the. In some sense. The less I have to change from this example, the better.
00:15:04.880 - 00:15:43.222, Speaker A: And then there's this notion in rocket that you can annotate things. So every function here is a request or a route. So in this case if you go to where's get slash here. Okay, so this is if you just get the, where you're running the server slash and you do get request. This method is going to be invoked. And one of the ways in which rocket is neat is it looks at the arguments to that function to determine what its dependencies are. So the way to read this is index rendering.
00:15:43.222 - 00:16:29.960, Speaker A: The index is going to require that you have an, you have an optional flash message, you may or may not have a flash message thing and you have a DBCon. And Rocket will do the necessary thing to essentially acquire those resources. So in RK and then it returns basically something that is renderable. And so that might just be a template rendering, which is probably what we'll use, although our templates are also going to be very straightforward. So get slab right. So all of these have access to the database through this con object. And we will do something similar where we're going to use con to both extract the current vote results and to insert new votes and new users.
00:16:29.960 - 00:17:08.240, Speaker A: Okay, so this seems like a decent starting point. I sort of want to extract just this. Can I just like download it? Do I actually have to clone it? Probably clone this out and then let's actually make. No, what are we gonna call this? Voters. That's funny. Sure. Voters.
00:17:08.240 - 00:17:36.269, Speaker A: Voters it is probably terrible name. And then we're copy all of the stuff from rocket examples to do to here. Oh, there's no Gitignore. That's interesting. I guess we can just do this. This probably has a bunch of stuff we don't care about maybe. Sure.
00:17:36.269 - 00:17:52.196, Speaker A: Get rid of this. Don't need this. And from the cargo check just to see if this actually works. Probably doesn't because we need one. We're not going to publish. That's fine. We don't have a workspace.
00:17:52.196 - 00:18:19.550, Speaker A: We depend on rocket. Is rocket zero four up? Yeah, great. Zero four. You probably depend on diesel. I don't know if I care about these migrations. Can I use diesel without migrations? That would be my guess, but ooh, diesel Cli. Some sense.
00:18:19.550 - 00:18:44.910, Speaker A: I don't really want a diesel Cli. Oh, I see. So you don't actually need the ClI. It just generates some stuff for you. Interesting. Wanted to not do any of these things, but I guess we could probably do it. Fine.
00:18:44.910 - 00:19:33.170, Speaker A: So let's do here cargo install diesel Cli. Seems kind of have that run in the background. Right. So we're basically going to get rid of the migration stuff because I don't think it's important. We don't need log, don't need any of the dev dependencies. I don't know if we'll need rocket contribute question, what is rocket contribution? Okay, quick start. That's unhelpful.
00:19:33.170 - 00:19:56.660, Speaker A: Sure, we can list that. That seems fine. Doesn't look like this really needs contrib. So I guess let's get rid of that. Ooh. But it has things like templates so that's probably why. Hmm.
00:19:56.660 - 00:20:20.980, Speaker A: I don't know where that comes from. Rocket. Aha. How weird. Well, we want that. In fact, we probably want it here. But we want the version to be that version.
00:20:20.980 - 00:21:03.026, Speaker A: And sure we'll have those dependencies. Whatever the to do application is using is probably what we want as well. Let's see. Back to diesel to this install finish. Ooh, do I need a thing? Apparently. Well, actually I want clients. I guess I don't care about the server actually.
00:21:03.026 - 00:21:29.980, Speaker A: Sure. I just want lib Mariadb client. So it was complaining that it couldn't find l Mysql client. Right. So the library MySQl client, which we do want now let's see what that gives us. Try that again. Back to this.
00:21:29.980 - 00:22:16.500, Speaker A: There's probably a bunch of stuff here we don't need would be my guess. We're just going to keep it in there for now. All right, so now we have Diesel is here. We'll go into voters as well. This is all using postgres, which in some sense I don't want stew diesel setup and see what that gives us is we can remove migrations, we can remove this dB directory and we're going to do DSel setup. Sure. Database URL.
00:22:16.500 - 00:23:16.296, Speaker A: It's going to be sqlite, maybe db SQL. I guess not. Skew light three, huh, diesel. So I don't actually want to run a database because it's annoying. So the question is what do I have to do to do setup with that? Ooh, you need co gente. I feel like that's not true. The alternative is that we sort of scrap the migrations entirely and we just manually create the database.
00:23:16.296 - 00:23:45.590, Speaker A: That seems just as fine. So I have the sqlite there. So let's just do Tomljenne. Maybe this will help us. Uh huh, uh huh. I feel like this is far more stuff than I need for this. So we're gonna scrap that.
00:23:45.590 - 00:24:08.380, Speaker A: Maybe we'll add it back later. For now, this like we're not expecting this database to grow much. It's gonna be a very small application. What is bootstrap? Nope. Get rid of that. Let's get rid of the readme because we're not going to need it. Rocket toml sure.
00:24:08.380 - 00:24:48.038, Speaker A: So that says something about where the database lives. Okay, so this is the file we're going to have to make, right? So we're going to do something like this. And in particular, what we want is, I guess here schema, Dot SQL and have the simplest schema anyone has ever seen. In particular, we're gonna have a table called users. And in users, what are we gonna have? We're gonna have something like id, which is gonna be a text field. It's also gonna be primary key. No, no.
00:24:48.038 - 00:25:18.200, Speaker A: Id is going to be auto increment. Integer auto increment. Maybe it's like this in sqlite, I don't remember. And then we're going to have something like a username, which is this like unique identifier. The user does. Eventually we'll probably get out of password here, but it's going to be a text, not null, unique. Those are all the things that are going to be in users.
00:25:18.200 - 00:25:51.182, Speaker A: We're going to have something like items. Sure. They're going to be the things that you can vote on. That's also going to be have an id. And in addition it's going to have something like a title, probably, and it's going to have a body. And then we're going to have votes. So remember that in rank choice voting, every user can vote for multiple things.
00:25:51.182 - 00:26:32.718, Speaker A: So what we actually need to store is user id, which is going to be an integer, not null. It's going to be an item id, which is going to be integer, not null. And it's going to be something like an order, which I probably can't escape it, but ordinal. So the idea is that these are all the things that the user chose to vote for. And ordinal gives the order that they gave for those things. We do want, though. Unique.
00:26:32.718 - 00:27:01.550, Speaker A: I don't know how you do this. In sequelae, we want a unique index on user id item id. Right. So a given user cannot place the same item id multiple times on their ballot. Sure. Maybe there may be there. Sure.
00:27:01.550 - 00:27:39.830, Speaker A: No, that seems like not what we want. Can I make this be a unique index, I wonder? Unique index, because we're gonna do, I guess we're not really gonna do lookups on this. So it probably doesn't matter. Constraint is probably fine. Unique constraint. And we're going to do this going to be user id, item id. Now in order to check that.
00:27:39.830 - 00:28:08.380, Speaker A: In order to check that, it might actually need to, we might have to do an index. Otherwise it's going to be super slow. But let's just punt that problem as well. Don't you need to ref to reference to user id as in foreign key. So sqlite actually doesn't enforce foreign keys. Also keep in mind foreign key is really just a constraint. The database places saying that actually may, might support that.
00:28:08.380 - 00:28:42.550, Speaker A: Last time I checked it not. But sequel like foreign key, a foreign key is really just a constraint. Saying that for any value you put in this field, a value must exist in this other field which gives you useful things like if you delete a user, you can also say to delete all of their boats. But in general, Sqlite has had pretty poor foreign key support that might have changed. Yeah, amp forces exists. So let's see. Sure.
00:28:42.550 - 00:29:30.880, Speaker A: Foreign key, user id, references. Users id seems fine. Can I declare multiple ones? Do I need commas between them? I dont know. Items? Is that what you meant ghost? I think those are basically the things we care about. Oh I guess this should be no dupe votes and I don't know if unique will let me do that. I guess we're about to find out. So we're going to do this and then we're going to import schema dot SQL.
00:29:30.880 - 00:30:15.090, Speaker A: Not like that. My guess is that it requires something like this there. This may be not happy about those ah, drop table users. As you can tell, this is a very sophisticated application setup. Great. So now if we try to open this database tables, you'll notice that there is nothing in any of them. But they do have the right columns, at least in theory.
00:30:15.090 - 00:30:50.340, Speaker A: Yeah, that's what you meant. Okay, great. So now we have a table set up and if I remember correctly, diesel basically wants you to have a programmatic representation of your tables. I don't know exactly how it does that. Yeah, the schema and models, which is basically we're gonna have to transcribe our screen schema into rust. All right, so we're gonna go to main. What? There are some other files in source that I don't want to be there.
00:30:50.340 - 00:31:07.600, Speaker A: Source tests, not gonna have any tests. Might add tests eventually. I don't know. We're also probably not gonna have a what's in this tasks table. Right. So this has the diesel schema in our case. The diesel schema of course is going to be very different.
00:31:07.600 - 00:31:59.350, Speaker A: So we're going to move source tasks to be source schema rs, right. Ooh, why does it have schema and models? Oh I see here they're really just all put into one, which is probably all we need. So we're gonna have a mod schema and we don't have tasks, we have users. Right? So this is where the other schema file comes in handy. We have users. They have an id, which is an integer and they have a username text. I think you can declare multiple of these.
00:31:59.350 - 00:32:44.502, Speaker A: So we're going to have table votes, I guess do them in order. Items has title and body. And finally we have votes, which has a user id, item id, and ordinary, all of which are integers. In school we have class about how to structure the database. Yeah, I mean, so if you think about it, we have really structured the database the correct way. It's more. You're sort of supposed to do this in the style of diesel will manage bringing up and down your schema and sort of auto generating these types.
00:32:44.502 - 00:33:01.738, Speaker A: And I just decided to do it manually in part because it's not important for this application. This application is not going to grow. And if it does, it should be rewritten. It's more. I just want something that is up and running because this is a very straightforward application. Right. I'm hoping.
00:33:01.738 - 00:33:25.810, Speaker A: Ooh, what's this thing? It's probably a primary key of some kind. Uh huh. Interesting. Okay, so my guess would be that whatever goes in here is like a primary key. So we have a primary key. That's great. I don't know what we do for this.
00:33:25.810 - 00:33:48.170, Speaker A: The table macro. Aha. Yeah, that's fine. That's fine. We don't particularly care about that. I guess we declared all these to be text, didn't we? So let's just keep them as text. That seems fine.
00:33:48.170 - 00:34:04.090, Speaker A: You may specify a primary key if it's other than id. Okay, great. So it just assumes that id is the primary key. That's not true. Here, list all the columns in the primary key. Great. User id, item id.
00:34:04.090 - 00:34:27.590, Speaker A: But this example is like basically the same as ours. No, that's all fine. So we could add some documentation. I don't think it's important. SQL name. That's fine. All right, so what that gives us is this module called import users.
00:34:27.590 - 00:35:18.240, Speaker A: I don't know what this other import is. What I'm basically doing here is just taking the example and rewriting it into what we're doing. Right. So we have users items and votes. And then I think the, the idea in diesel is that you have sort of your schema representation and then you have models which are your rust sort of representation of what's in the database. So if you look, if we look at the diesel configure not this one, but this one. Right? So post here, for example, is the rust representation of what's in the database, typically the schema.
00:35:18.240 - 00:35:46.360, Speaker A: Right. So normally diesel setup will generate this files for us. We just happen to have written manually and I guess let's also write this model. So we're gonna have item and be queryable. Sure. And remember, item really just has title and body. We could have published.
00:35:46.360 - 00:36:22.640, Speaker A: We should have finished or done. Maybe. That's a good point. So for any item, we need to be able to record the fact that. We need to be able to record the fact that a given stream is finished so that we don't count it anymore. Right in here. Arguably there should be an index on done because we're generally just going to query for items that are not done, but we're going to ignore that too.
00:36:22.640 - 00:36:46.688, Speaker A: Okay. Item id is going to be I 32. That seems fine. Title, buddy, and done. And I guess we also have user, which is just id and username. And we finally have votes. So that's going to be a vote.
00:36:46.688 - 00:37:23.418, Speaker A: That's gonna have a user id, it's gonna have an item id and it's gonna have an ordinal. We probably here want to do something like implement ordering for vote and order by ordinal. Okay, that's fine. So I think that's all the types we need. And then it says okay, do some stuff to establish the database connection. We probably here want this to be insertable. Probably.
00:37:23.418 - 00:37:45.284, Speaker A: Also things like debug and clone are handy. Don't know why it has to be serialized. Items. I think we only want to be queryable from the application. That probably should be debugged though. I don't think we ever need it to be cloned. Vote should be queryable, insertable, debug, probably not clone.
00:37:45.284 - 00:38:13.952, Speaker A: Not important. Eh? It might be important actually. Right. Because we're going to add new, we're going to add new votes as we go. I don't know what this DSL completed and tasks. Oh, I see what they did here. So where's the example from rocket? If you look at main here, sorry.
00:38:13.952 - 00:38:59.700, Speaker A: If you look at task, notice that has a field called completed, I think what this macro generates is this DSL sub module and it generates one function that is called the same name as the table, which gives you all the things. And for any given field, that generates a function that lets you fetch by that field. Right. So that's why this all calls this all tasks. Right. Where's completed used, I wonder. See completed being used anywhere here? Yeah, I don't think that's being used.
00:38:59.700 - 00:39:29.834, Speaker A: All right. But that does mean that what we probably want out of this is we want the ability to get all boats. Right? All boats. That's probably the only one we need. Actually we don't. Oh, we do. Probably because we singularized.
00:39:29.834 - 00:40:01.230, Speaker A: This is now going to be, the table is called votes, not vote. This table is called items, not item. And this is called users. This in rust just looks so nice. Yeah, I know, it looks pretty neat, right? It was in an argument. What was in an argument? Sorry? Oh, was it was task, was this in an argument somewhere? Oh yeah, you're right. Set, task completed.
00:40:01.230 - 00:40:34.276, Speaker A: Oh, this is naming that column. If you only want to update one field. I don't think we ever want to do that though. So I don't think we actually need that. We never need to be able to change just one value of a given field because I think for votes we're probably just going to clear all the users votes and then add them again. For item we're only going to read them. And for user we're only ever going to insert and lookup.
00:40:34.276 - 00:40:58.540, Speaker A: I think, I think we'll probably want something like an index on username. Fine, fine, fine fine. There are some indices we just vary obviously need here. Oh hey, look at that. Create unique index. Fantastic. Give me this.
00:40:58.540 - 00:41:42.052, Speaker A: So for users we're going to want create unique index you name on users username. Can I also delete index? Actually it's fine here. There's already going to be one I think on the primary key, just always primary key. Do I really? I feel like this is not the website I want to use for this. I want the real sqlite reference. Here we go. Table of contents.
00:41:42.052 - 00:42:08.350, Speaker A: This is JavaScript too. Why does everything need in like JavaScript these days? Very disappointing. Fine. Documentation programming? No. Overview. No. Also not really what I wanted to features.
00:42:08.350 - 00:43:02.320, Speaker A: Features auto increment. It is usually not needed in sqlite. A column of the type integer parameter key is an alias for the row id. Oh. I mean I don't think we really care if they're reuse. So it sounds like what you're telling me is this should be integer primary key instead of auto increment. That's fine.
00:43:02.320 - 00:43:48.120, Speaker A: And I guess row id, there's always an index on. Okay, that seems fine. We don't, that's not important what we do care about. Why is this setup of the site so stupid? I guess indexes references account. Mm hmm. Right. That's fine.
00:43:48.120 - 00:44:25.850, Speaker A: Okay, so ids are basically automatically indexed. I think for items we only care about ids. So that's fine. For votes we probably want a unique index on, onvotes, user id, item id. So the reason we want this index is so that this constraint can be easily checked. I don't know if we need both, actually. The index might be sufficient.
00:44:25.850 - 00:45:03.408, Speaker A: So that's fine. And then we also probably want an index on. So this is going to be something like ballot on votes by user id and ordinal. Right. So remember when we're, when we're running the election, what we really want is for every user step through all of their votes, which is basically doing a select order by user id, ordinal and then sort of subdividing it by user. We're grouping by user. Might end up using iter tools for this, actually.
00:45:03.408 - 00:45:31.242, Speaker A: It has a nice group by function. And so having this index allows us to basically efficiently do that walk. At least I think depends a little bit on what create index does use. Create index, great. Didn't get sort order. Right. So I think we want something like user id ascending, ordinal.
00:45:31.242 - 00:45:54.660, Speaker A: Ascending, descending. Yes. Great. Right. So this is going to let us efficiently do that query. Although at this, at the same time it might not matter. We're just going to query.
00:45:54.660 - 00:46:22.220, Speaker A: We're basically going to extract all the votes for anything that is not done. So I guess the ordering is handy in that sense. Regardless, fine. Okay. So we have a new schema, but we didn't really change anything apart from add done here as a bool. Right. Apart from that, everything else is the same going back to diesel.
00:46:22.220 - 00:47:03.322, Speaker A: Okay. What else does this hub? Is there anything here we might want? This is from form business, which I guess is. Ooh, what is to do in this example? To do is not something they have in a table. Oh, I see. Right. So this is going to be something like new user, which is just going to have a username. So this is, you're going to have a form that just gives a new user.
00:47:03.322 - 00:47:40.480, Speaker A: And similarly we're also going to have something like new vote. I don't think we're going to have new vote, actually. We're going to add all of those manually and then these are some convenience things. And for us, I don't, I think the only convenience things we really want is vote run election. And what that's going to do is it's going to do all the tasks. Order. Well, not all tasks, all votes.
00:47:40.480 - 00:47:56.830, Speaker A: Order by. Hmm. I guess here we're going to have to resort to figuring out what diesel actually does under the hood because we want to do a double order by. Right. We want to order. Bye. Both the user id and ordinal.
00:47:56.830 - 00:48:27.380, Speaker A: And we want to do a join with item to make sure that we're only checking votes for things that are not done. That's awkward. Fine. Diesel docs, API docs. So for I guess DSL is what we're going to get back. Maybe not. Query builder.
00:48:27.380 - 00:48:54.800, Speaker A: See this is the problem with deciding to just sort of ad hoc it from something existing. So I have no idea what any, I think it's like a query builder. No. Query. Where can I find order please? What? That's false. Try that again. Aha.
00:48:54.800 - 00:49:38.460, Speaker A: Query DSL methods. Right. So my guess is whatever we get back. Yeah, exactly. So this is what we're going to get. And I guess what we want is we want an inner join against what's the right hand side here? What is that? That looks awful. Ooh, joinable.
00:49:38.460 - 00:50:02.700, Speaker A: Interesting. So there's clearly some stuff in this that we might want to actually figure out who. I don't think we care about the overhead of that. That's fine. I just want to get back to where it lets us. Where can I define relationships more guides, schema in depth. Perfect.
00:50:02.700 - 00:50:37.060, Speaker A: Okay, that's fine, that's fine, that's fine. Don't care about any of these things for now. Specifically what I want to be able to declare is the relationships between these tables. Composing. Fine. We're gonna do about it the other way, which is diesel. What is a joinable please? Joinable.
00:50:37.060 - 00:51:25.060, Speaker A: Aha. Interesting. Okay, so we're gonna say, does this go inside schema? No. Okay, so we're gonna say that you can join votes with items. Uh huh. Parent table is the table with the primary key. Child table is the table with a foreign key.
00:51:25.060 - 00:51:48.986, Speaker A: The foreign key would be post dot user id. Right. But how does it, oh, I see. It just assumes that the other one is id. Okay, so in this case that is going to be item id. And then we're going to have the same for votes to users using user id. Great.
00:51:48.986 - 00:52:21.410, Speaker A: I think what that means is that we can now for a run election for inner join. Remember we saw here you can pass that table directly. Okay. So I think what that means is here we can just pass items and then what we want. Right. So that's not important. It's gonna give us the with implicit on clause.
00:52:21.410 - 00:52:54.132, Speaker A: Right. So just in a joint points. Right. So this is exactly the same thing we do. What is that? What is this monster allowed to appear in same query? Sure. I don't know why this is necessary, but I believe it. We're allowing users items and books.
00:52:54.132 - 00:53:36.994, Speaker A: Does it give a warning for why you shouldn't do this. Okay, fine. Great. So it's saying then we can just do inner join, that I guess we will probably want to select at some point what is name and title here? Oh, they're the column references from the schema module. That's fine. We sort of want to wear here though somewhere, I guess filter. Right, right.
00:53:36.994 - 00:54:14.750, Speaker A: Because we want to filter out things that are done. So we're going to do, I guess this is where we'll do something like where is this? Right. So we want votes as all votes we want. Oh, actually that's fine. And we want items. What's the column of item done as item done. And then we want something down here along the lines of filter by item done is equal to false.
00:54:14.750 - 00:55:05.590, Speaker A: And then the question is for this order by, if I want to order by multiple things, what do I do? Oh, I just give it a tuple. Great. And I guess here, I guess we'll want votes. This we'll want user id and item and ordinal because now we'll do something like we'll order by user id ascending and ordinal ascending sending. I don't know what this load is going to do. Oh, that's just going to give us. Right.
00:55:05.590 - 00:55:43.350, Speaker A: We want to load these as vote. Great. I have no idea if that's going to work. What does load do? That's another good question. What did all of these give us back? Something that we can eventually call load on. Right. So what does load do? I don't really care about limit, run query DSL.
00:55:43.350 - 00:56:09.500, Speaker A: Right, right. So this is going to collect into a vector, which is not really what I want to, but it might be the only way to, oh, that's a little sad. Really have to collect into a vector. Fine. I guess we can survive. So we wanted to collect all of the votes. This is going to give us a vector of vote.
00:56:09.500 - 00:56:28.280, Speaker A: Right. And then we're going to run the election on this. But in order to run the election we need to group by user. Right. We want to count each user's thing separately. Each user's ballot separately. So we'll use itertools.
00:56:28.280 - 00:56:56.656, Speaker A: So iter tools is just a really handy crate for operating on iterators and doing fancy things. So we'll do something like itertools is equal to 0.7 main. This we're not gonna need. This we're not gonna need, I don't know why. Sortie. Oh sure.
00:56:56.656 - 00:57:22.840, Speaker A: D is here. So you can send Jason back and forth. Sure. That might be, oh, that's why it's serialized, I guess. This, we do want to be serialized so that we can send it to the client to show what the current items are. That's true. This is going to be mod schema, which is silly, but we're going to have schema, schema.
00:57:22.840 - 00:58:00.390, Speaker A: And I guess this, we want to include schema, user, item vote, and new user. I guess we'll probably do something like we're gonna want these other like inserts and deletes. I guess this is gonna be something like save ballot. It's gonna take some kind of iterator or something. We'll have to figure that out later. So back to itertools. We're gonna add here an external for that.
00:58:00.390 - 00:58:54.910, Speaker A: Notice that we're just like cannibalizing the existing to do example, right. Writing this, a lot of the code that's below here is probably just going to go away. Use iter tools. So what this gives us is this trait super. Ooh, straight functions. No, I don't think any of those are helpful. Specifically what we want here is group by group by consecutive elements that map to the same key are assigned to the same group.
00:58:54.910 - 00:59:43.180, Speaker A: The groups are consumed in order, then group by uses, no allocations. So we've already assured that that's going to be the case. Remember how we sort by user id and then by ordinal? So we know that the collection we provide to iter tools is already ordered by the group by columns. It needs allocations only if several group iterators are alive at the same time, which will not be the case. This type implements into iterators not. Okay, that's fine. So what we have down here, so these are the votes we're going to do.
00:59:43.180 - 01:00:06.390, Speaker A: Votes dot it, er, dot group. Bye. And we're going to group by for each vote. We're going to group by the votes user id. Right. I don't know how you get fields. It's probably down here somewhere.
01:00:06.390 - 01:00:40.330, Speaker A: Oh, it's just dot. That's handy, right? Looks like that's all that's needed. Great. So we're just going to do, I guess, v dot ordinary on a group by. So that gives us back something that is an iterator. And if everything goes according to plan, then all we need to invoke now is RCI. No way all of this is going to work initially, but hey, we'll see what happens.
01:00:40.330 - 01:01:28.450, Speaker A: Extern, create RCIR. And up here, I guess we're going to use RCIR, run an election, actually use RCIR. And this is going to return an RCIR, is it electionresult of vote and this is going to do RCAR run election. There are probably types are not going to work out here. This is going to have to take some type. Who knows what it's going to do. Let's just have this be true for now or have it return nothing for now.
01:01:28.450 - 01:02:05.180, Speaker A: All of this we don't know what we're going to do with yet. So we're just going to comment it out back here. A bunch of these things I don't know what are migrations we know are going to go away. The SQL lite database connection is still going to be there. Context, I don't know what context is going to be. Oh, I see. And we'll figure out what context is later.
01:02:05.180 - 01:02:46.640, Speaker A: All of these routes we don't need in the beginning. Let's just start by focusing on we want slash to work. There aren't going to be flash messages in our application. It's very straightforward. Rendering the index is going to be a matter of rendering the index. Oh, context would you provide to the template? And for that, I guess the context is really just going to be, can this be like, this can probably be an enum. It does not need to be.
01:02:46.640 - 01:03:37.610, Speaker A: Let's just not do references and use strings everywhere. It's fine. The context is going to be something like election winner, which is going to be RCR vote, result vote and a, what else is there going to be? Oh, I guess streams or items. Right. Which is going to be item. Oh, I guess we will need something like impl item, pubfn all. It's going to take Sqlite connection and give you back a vec item.
01:03:37.610 - 01:04:12.300, Speaker A: And this is really just going to be all items. Items as all items. And so this is going to be all items dot. I guess we don't even really care about the order of the items. So we're just going to load item. It's very sophisticated code this here. There aren't really going to be errors for our context.
01:04:12.300 - 01:04:46.368, Speaker A: Nope, it's gonna be none of that. It's gonna be new. All you're gonna be able to do is construct a new context and the things it's gonna give you is a winner, which is gonna be vote run election. So notice that this reruns the election for every user. So this is highly inefficient. We might want to do some caching to avoid that. In fact, we can probably do that pretty easily, right? Because this is just running a single process server.
01:04:46.368 - 01:05:28.210, Speaker A: So we could totally just like keep an arc mutex of the current election results seems fine. And items are going to be item all great. This is now just going to be context new given the congeste and that's all you need. We're not going to do any database migrations, so that's fine. It means that flash message goes away. I guess we might want things like Flash for if the username is already. Oh, we don't username already taken, just logs you in.
01:05:28.210 - 01:06:01.946, Speaker A: Great, fantastic. Okay, so we're going to attach this db connection that has to be a. So rocket has this notion of fairings which are basically resources that you can pass in as these kind of arguments to functions and they will be auto created. So we want to say that database connections want just thing. We want to use slash to serve static files from the static directory. CSS and images might not even have any of those. Slash is just going to have the index route.
01:06:01.946 - 01:06:29.546, Speaker A: We don't have any of these other ones yet. And we want the template fairing so that we can run the templates. No idea what that's going to be because we're about to find out. Sure, run this. It's probably not going to compile, but we're about to find out. Ooh, panicked. Oh, I guess rest up.
01:06:29.546 - 01:08:03.660, Speaker A: Overrides nightly. Does the basic idea or does the basic application setup seem somewhat reasonable? I mean, it's terrible in all sorts of ways, but does it roughly make sense? Weird. Oh, ooh, I did something weird. Schema 987. Uh, what did I do? Oh, that's a tuple. How about now? 30 this, because that's the start. Schema 46 this.
01:08:03.660 - 01:09:00.530, Speaker A: Well, that's weird. We just copied over the main from the example. So why is this okay here but it's not okay in r code? Seems dubious, but sure, who knows? Do that as well. Sure. Complaints about a lot of things. Interesting. So we've done something weird with this join business, which is perhaps not terribly surprising.
01:09:00.530 - 01:10:28.680, Speaker A: Posts table. Oh, interesting. Okay, so for this business down here, the inner join is going to be with self schema items table maybe. Yep, apparently. Oh, this isn't vote result, this is election results. What else are we broken? So RCR is a little bit annoying in that if you look at the interface for run election, it always operates on references, which is not really what we want because it's pretty annoying to work with, I guess, because in our case all of the items are owned that we give it. Well, sort of.
01:10:28.680 - 01:11:01.650, Speaker A: I don't know. What does it require for the type it runs the election on that. It was ekin hash. Okay. That's also something we're gonna have to deal with. Oh wait. This group should be by user id.
01:11:01.650 - 01:11:47.070, Speaker A: And then I guess we're also going to do something like we sort of want to map this group by. Yeah, we're going to have to do something weird here. I'm not entirely sure what yet. Basically, so the run election is over an iterator of. Iterators of basically things that are votes that get compared. And so we need to map out just the item id of every vote because that's really what the ballot is. It's also a little bit annoying that all of this has to operate on references.
01:11:47.070 - 01:12:21.784, Speaker A: Would have liked for that not to be the case. So here's one thing we could do. We could just copy this code. It's not very long, but I sort of don't really want to do that. I wonder if we could say that these are static. No, I can't do that either. Okay, fine.
01:12:21.784 - 01:12:51.370, Speaker A: Let's just say that the winner is a vote. Sorry, the winner is an item. It's not a vote. What am I talking about? The winner is an item. Yeah, some stream id wins and then I guess here. Oh, I see. So this is really going to give something like say that it makes an item.
01:12:51.370 - 01:13:46.050, Speaker A: So what we're going to do is we're going to match on this. And that is either going to give us an election result winner, which is going to be something weird like a reference to a reference to an item id, or we're going to get an election result tie which is going to give us item ids. And then we're going to have to figure out how to break the tie. Let's see if it's any happier about this. What are all these things at the top? It's got a lot of stuff it's unhappy with. This about names and parent modules are not accessible without explicit support. Huh.
01:13:46.050 - 01:14:40.660, Speaker A: Seems like something it's going to be unhappy about later. Oh well, I suspect what's happening is we're not like this procedural macro. Depends on some stuff that's inside the schema module that we generated above. It seems that Diesel used to return an iterator result, but a change into returning a Vec for reasons 132 on GitHub. Diesel. Really? Diesel? Where's the. Here, give me the guidon issues.
01:14:40.660 - 01:15:15.580, Speaker A: You said 132? Uh huh. Yeah. That's a little sad. I don't know what. I don't know what to say about this. It's fine. I mean, in this particular application we don't really care all that much because like performance is just not critical.
01:15:15.580 - 01:16:00.630, Speaker A: I can definitely see that being annoying, though. If I could post URL's. I think you can. I won't be able to open them because the chat is on a different machine than the one I'm coding on. But I can see the URL. What is it complaining about here? Queryable is not implemented for I 32. What? But vote is queryable.
01:16:00.630 - 01:16:55.070, Speaker A: Why can't I load? Oh, it's because of the join. Can I? I guess I have to select out just the vote fields. Fine. So for vote we're going to have, I guess, user id and item id and we're going to select out just. And they have to be same order, I'm guessing too. User id, item id and ordinal. We're going to load that as a vote.
01:16:55.070 - 01:17:27.840, Speaker A: Yep. 87. Right. So here is where we get into these weird expected reference. Sure, I can give you a reference. Right. So this is where, so what group by gives you back is it gives you an iterator where every item of the iterator is a tuple of the group and the iterator for the group.
01:17:27.840 - 01:18:01.460, Speaker A: So here, this is what I meant by map. The map. We need this for every group by we're going to get the group identifier, which we don't care about is the user id and like the ballot. And then we're going to replace that with ballot. But we want to for ballot map out the vote to just be the item id of the vote. See what it thinks about that. No method map found for that intuitter.
01:18:01.460 - 01:18:58.390, Speaker A: No method map found for hmm. Oh, I guess into it or mismatch types. Why does it expect a reference? Does run election take like a, it takes a reference to the iterator. I don't like this API. I mean, I agree it should all be iterators. It's really sad that it all has to be over references. I guess it's so that it can give back the appropriate reference here, but seems unfortunate is not an iterator.
01:18:58.390 - 01:20:05.310, Speaker A: What do you mean? This is totally an iterator. So it's saying that the error message you get are weird too. I think it's complaining about the sub it or so the, the thing that it gets back from this map is an iterator, but it's saying that the things inside of it are not themselves iterators, even though that is clearly not true. Oh, reference to the subiterator. Oh, that's awful. But I don't think we can do that. Who knows how this is gonna work out.
01:20:05.310 - 01:21:09.480, Speaker A: Yeah, I didn't think so. So I mean, there's a stupid way to do this which is just to collect all the things, right? Like we could just do intuitor group by intuitor map valid in the dot, collect and then say that this is going to be a vec of item ids. Right? I mean, we could do that and then run this on votes, I guess. I think that's the intention. It's pretty weird, but doable. Also means we're doing this extra collection, but might be fine. No method iter found for group.
01:21:09.480 - 01:21:39.156, Speaker A: Right. This has to be intuitor. Good night. Yeah, it is getting late in Norway. I believe it expected VEc found map. Oh, I mean, this is definitely pretty silly. There's a lot of extra collection here.
01:21:39.156 - 01:22:16.640, Speaker A: Basically we're just like collecting all the votes into the appropriate groupings and then we're passing a reference that to the run election. I wish run election would take a better time. So we did not have to do this. But the extra collections here are sad. Okay, so expected result can give you an election error. What do these mean? Oh, balls. Let's see what these mean.
01:22:16.640 - 01:23:04.320, Speaker A: Overflow is if there are too many votes for something. Okay, that seems relatively unlikely. Empty vote collection is if there were no voters, and voters no votes is if you reached a round in which there were no more votes. Okay, sure. So I guess this is if we get okay in this, then do this. If we get okay in this, then do that. So really this is going to return an option item, right, because there might not be a winner.
01:23:04.320 - 01:23:38.170, Speaker A: RCIR election error. So overflow seems like something where we're just going to give up. This shouldn't happen, but we're just gonna give nothing. Off topic, annoying question. Your interface looks really slick. Which interface, the editor or the browser? I did a stream actually on my programming setup. If you look back on earlier YouTube videos, this is so bright.
01:23:38.170 - 01:24:26.280, Speaker A: Empty vote collection and voters no votes. Well, okay, this is stupid. So this is really just going to be dot okay question mark, which is really just saying turn all errors into none and then question mark is going to, because question mark works for option. It's going to return none. Right. And if there's a winner, then we're just going to return the, the item with that winner. So I guess see if there's a.
01:24:26.280 - 01:25:19.850, Speaker A: Yeah, that's going to be not all tasks but all items not find item id getresult item. Who knows what that's going to do. Unwrap. Why not this? If there's a tie, I feel like if there's a tie, I want the one that's been on the list the longest. I'm gonna go with we're just gonna take the zero to do, maybe pick the oldest one because, remember, because this is not a real election. Right. We, we can bias this selection.
01:25:19.850 - 01:26:23.698, Speaker A: We can go, oh, I really wanted to pick the, the one I prefer to do. If there's a tie among the users, like if they can't decide, I get to break those right once. Never. What does that mean? All items find item id. What does that mean? So what does, I guess I should actually look up what getresult gives you a get result, gives you a query result, you. That should not be optional. No, not found.
01:26:23.698 - 01:26:57.590, Speaker A: Should not be possible because we got an election result and we have the foreign key. So that shouldn't be possible. But why, why is it, why can't I do that? Users find. This is update business. I don't insert into users. That's weird. That's not what I want.
01:26:57.590 - 01:27:30.460, Speaker A: Why are these all based on inserts and updates? Why is it not just a read? That's fine. It's 38. What? Oh, 38. That's going to be right. So winner is going to be an option item. That's fine. And what else is it complaining about here? 96.
01:27:30.460 - 01:28:24.460, Speaker A: Oh, item id zero. Is that maybe what it was complaining about? The type was wrong. Expected I 32 find. Oh, this is a particular type. How do I cast from a DSL type, I wonder as I 32. Sure. Or maybe it already is item.
01:28:24.460 - 01:29:07.942, Speaker A: Oh, I can't use that as a iid. Iid I ids. How about that? Hey, at the top left of something. Oh yeah, you're right. I should just do that. Is it Alta? I should also do it here. And reload this.
01:29:07.942 - 01:29:33.180, Speaker A: And reload this. This. Good call. I normally like the light theme later, but it's late at night and the editor is very dark. All right, localhost 8000. What are we going to get? Let's do curl that address. Whoa.
01:29:33.180 - 01:30:13.190, Speaker A: How come? Failure. No such column items. Dot done. So it's saying that online. 79 here. All votes, no such column item done. Oh, I probably just didn't.
01:30:13.190 - 01:30:41.320, Speaker A: We changed this but I didn't reload the schema. Try that. Great. It errored with something because it failed to render the template. That's fine. It's probably because this template is, does not have what it should have. This is going to be the ultim no, it's going to be rust live stream voting.
01:30:41.320 - 01:31:27.660, Speaker A: Vote for the next rust live coding stream topic author is me. We're gonna do this for all of you. All of this is probably gonna go away. Just ignore that for now. All of this though. There's a bunch of fancy stuff here that I don't want right now. Instead, what I want is just the stuff that's down there I want here.
01:31:27.660 - 01:32:14.150, Speaker A: I guess we can keep this one. That's fine. And then here we're going to do four item and items. We did call it items, right? Items and winner friedemannitems. If not item done, then we're gonna just, I guess yay. I know it'll be better title now I just want to see that the data is there. I'm not doing any styling at all.
01:32:14.150 - 01:32:56.590, Speaker A: I didn't know body. We probably want the body to like have markdown or something. Great. It's initially that's still pretty great. Why not great? Okay, so now it's currently empty. I guess we cd into voters again. And now we're going to do this and we're going to do something like insert into items title, body values.
01:32:56.590 - 01:33:50.300, Speaker A: I guess I need to find my own old where's the last time I did a poll? I think it's a while ago. And search for poll. Really? Come on. Twitter. Usually it notifies you when there's a poll, but apparently nothing. This one maybe. Is there a poll here somewhere? No, this is for the rust open source contribution stream.
01:33:50.300 - 01:34:26.140, Speaker A: Right. So the question is, is there an earlier Twitter thread? No. Maybe it just doesn't go far enough back for where I had these. I don't know how much stuff I've done since finding poles is hard. Here we go. This is some stuff. So that's the open source contribution stream.
01:34:26.140 - 01:35:23.780, Speaker A: Where is the older poll? I just want to populate it with some like somewhat reasonable data from how far back is this? You get to see a view of my Twitter stream. There's that. Where on earth is the last poll? I feel like it should not be this long ago. We could do an informal poll right now for people to, could try to just remember what these things were. Maybe that's easier. Although I should be so close now. Fine, fine, fine, fine.
01:35:23.780 - 01:36:25.560, Speaker A: We'll do it. Ah, well, how about that? That's a while ago. All right, fine. So we're going to do something like title, I guess. Async ssh part two is going to be something like finish our implementation of async sshdeh so that you can write to Stidian. So that's one. What's another? I guess there is Tokyo zookeeper testing flesh out tests and the Tokyo zookeeper completion flesh out tests and massage up the Tokyo zookeeper implementation and API.
01:36:25.560 - 01:37:03.210, Speaker A: I guess the one I'm doing the Saturday might as well be listed. So we'll do Tokyo extra. No, I guess futures extravaganza. No. There we go. Full overview of futures Tokyo async await and all the other async stuff. You've always wandered about.
01:37:03.210 - 01:37:24.410, Speaker A: Great, we have some things now. What happens if I code this? Great. Okay, so we have basic database interaction. That's awesome. We're like basically done right. It clearly does the right thing. I guess the other thing we want is something like if a winner.
01:37:24.410 - 01:38:12.106, Speaker A: This also means it actually did run the election, which is interesting. I mean, there are currently no votes. But what happens if I do this terra template option? It's gonna be terrible, isn't it? Where's the rocket documentation for terra? Actually, maybe it's just docs rs terra. Great. Yeah. So context is the thing that we want. That's fine, but in rendering.
01:38:12.106 - 01:38:40.980, Speaker A: Aha. See the site, get started. Data structures, variables. That's fine. Dot notation, still all fine. How do I access something that's inside of an option? Maybe I can't even filter, actually. Maybe, maybe I just use it as a, as a loop.
01:38:40.980 - 01:39:37.750, Speaker A: Because you can iterate over an option. It's a little bit stupid, but that might be actually the way we do it. Fine, so we're gonna do for winner in winner, which if it's none, this can iterate no times. And if it is some, it will iterate once. Then we're going to echo out something like current winner title, I guess. Great curl that. Okay, so initially there's no winner and then I guess we're going to do something like insert into users username values, Bob, because Bob is always the one voting insert into votes, user id, item id ordinal.
01:39:37.750 - 01:40:19.170, Speaker A: And we're going to insert, I guess, one, one, one. So Bob votes for async ssh part two. Now there should be a current winner. There is not though. Why? Why is there not a current winner? I guess we're going to have to do some debugging. Schema. Show me all the votes.
01:40:19.170 - 01:40:49.400, Speaker A: That seems handy. Run the thing. Oh, oh, you it. That's why it doesn't pick up the new. It actually parses the templates on compile. So that's why. So we need to restart the server.
01:40:49.400 - 01:41:05.856, Speaker A: All right, so now internal server error. Try to iterate on container winner. That is unsupported. Okay, so that my little trick did not work. Options are apparently not iterable. Yeah, you're right. End for instead of endif.
01:41:05.856 - 01:42:21.120, Speaker A: But. Oh, hey, Brian. But how can I use terra to display an option here? Someone must have asked about this. There we go. That's fine. That's also pretty unhelpful. Okay, so this doesn't, you can't actually get to the thing that's inside is really what you're telling me? That's pretty annoying.
01:42:21.120 - 01:42:56.600, Speaker A: I guess we can. I don't know how to. Well, okay. The stupid way to do this. That's awful. Why did they make me do this? It's gonna be a Vec and we're gonna do run election into iter dot collect. Really? The argument here is that Terra should allow you to write a four over anything that is into iterator as opposed to defining its own collections.
01:42:56.600 - 01:43:46.930, Speaker A: But I guess it doesn't do that then option would just have worked because it implements into iterator still doesn't show a winner though, because apparently there are no votes. That's what it's claiming. So why is it claiming that if I do say give me allvotes, load vote con un. So this is like the most straightforward. Give me all, then I assume I get what I want. I assume I get the vote there. Okay, so that does give me the vote.
01:43:46.930 - 01:44:32.900, Speaker A: And then you're really just telling me that this thing is somehow losing. Oh, that's probably because I. My guess for id is wrong. All from items? No, no, it really is one and Bob really is one. So the join should be fine and done. This falls for all of them. Well, I guess let's, we do need to select.
01:44:32.900 - 01:45:10.648, Speaker A: So let's see what that gives us. So this is with the join but without the filter. That still gives us the load. And with the order. With the order still. Wait, so this filter is wrong? Oh, this is filter. All the things were done as false, whereas I want the opposite.
01:45:10.648 - 01:46:20.390, Speaker A: Why, why do they also have where they've just chosen to invert the meaning from sequel? No, what? Like if I, if I filter by true, is that gonna give me all the votes? That's so strange. No, that, so it's just the filter is broken somehow. Can I just do this? Like, will that give. Will diesel print my query if I do this? Because that would be great. From join. Okay, so joins on item id is equal to id. Okay, that's fine.
01:46:20.390 - 01:47:10.760, Speaker A: Where clause or done is true. Okay, so filter. So it really should be false, right? That is the correct expression. Good morning. Wow, you're in a very different time zone than we are. It's impressive. So I guess the question is why is this filter filtering out the one vote that we have? Because apart from that, this looks entirely right.
01:47:10.760 - 01:48:33.680, Speaker A: It's an inner join where we're done is false and that gives no rows. Can I make diesel print the SQL query, I wonder? Not really. Huh. Diesel debug query. Thanks. Alright, so I should be able to do something like easel debug query and then give it just this, I guess. I mean that'd be awesome if that works.
01:48:33.680 - 01:49:23.160, Speaker A: Nope, expected reference. I can give you a reference. Nope, that's not what I wanted. All right, that seems good. Select okay from votes, join items. Why does it put the join inside these brackets? I don't think sqlite is going to let you do that actually. So specifically I think this where this is false.
01:49:23.160 - 01:50:49.350, Speaker A: No, it gives you a row. So why on earth does this load vote con unwrap? Why does this then give me no votes when executing the same thing in sqlite does give me results. Unless like the representation for false that diesel uses is wrong. Is this stream about what? Well, so this stream is a relatively informal one where I'm just writing a simple voting site. Oh, it's snowing outside. So it's not really about anything in particular apart from building this thing. We're doing a stream on Saturday though, which is going to be about Tokyo, which I think is going to be interesting.
01:50:49.350 - 01:51:19.560, Speaker A: Why on earth does this give me no results? What's the difference between load and get results? Maybe that's a place to start. Load. Uh huh. And get results. Alias for load. Fine, get results. I like that better than load anyway.
01:51:19.560 - 01:53:07.160, Speaker A: Okay, well what if I do this? Maybe it's just the way that, what? I feel like diesel is just like giving the wrong query. It's like encoding like false incorrectly or something. That's so weird because if I run the same query as diesel is telling me that it's running with false there, it does the right thing. So why, why, why? And done up here is a boolean. I feel like, I feel like this is just broken. This is wrong. Probably won't help but debug query generic over a backend.
01:53:07.160 - 01:53:28.334, Speaker A: Give it diesel esculate. Esculate. Just make sure you're printing this. Oh, interesting. That's a good point. So you're saying debug query. Oh, I see what you mean.
01:53:28.334 - 01:54:27.760, Speaker A: Yeah, yeah, yeah. Diesel backend or something like that. Sure. No, apparently not. What did you say it has to be given? Diesel? Sqlite. Sqlite? Yeah. I mean that looks basically the same, right? So if I run this and then for the prepared statement parameter, I give it f for false, then I get the right thing.
01:54:27.760 - 01:55:16.450, Speaker A: False. Is sqlite not typing these correctly? Oh, I bet you. So this string representation here is actually what is used by other databases, but perhaps sqlite is just not strict about it. Okay, so maybe this is our fault. Default. False. And then we're going to do, we're going to recreate the schema and then we're going to reinsert the things that we had.
01:55:16.450 - 01:55:43.202, Speaker A: So like this and this and this. Where's the user? And this. And now false gives one. Okay, well how about now? Okay, great. Now we do get a vote. Okay. Yeah.
01:55:43.202 - 01:56:18.396, Speaker A: And it identifies the current winner. Okay, that's stupid. But yeah, we're building, okay, so the basic idea is to build a voting mechanism for voting streams, voting for new ideas for streams using, for those who have joined later, using rank choice voting where voters can basically choose multiple candidates and the order in which they prefer them. And then the election takes all people's preferences into account. And this lets people vote on multiple streams at the same time. And then that will be taken into account going forward. Okay, well, this seems to work.
01:56:18.396 - 01:56:38.740, Speaker A: Okay. So it does give us a current winner now. So we're like, it's going along. It's going along. Okay. So that now all works. I guess the thing we would now try is something like we insert Alice and Alice as user id.
01:56:38.740 - 01:57:16.926, Speaker A: Two is going to vote for two and Bob is going to vote for two in second place. Right. So what this looks like what we basically set up here is, let's go to this again. That's not what I wanted. I want you to fill with the background color. So what we now have is basically, so we have Bob's votes and we have Alice's votes. Right.
01:57:16.926 - 01:57:43.042, Speaker A: And wow, that's a terrible square or rectangle. So Bob has currently voted for story one and for story two. Alice has just voted for story two and nothing else. Right. And so in theory that it's going to, should start out by looking at the first preference of each user. It's going to recognize it as a tie. It's going to eliminate, oh, maybe it eliminates both candidates.
01:57:43.042 - 01:57:58.790, Speaker A: I don't actually know what it does in this case. In theory it should eliminate just this. Right. And then place two and then realize two will work. I don't know what it's going to do in this case, it might just declare a tie. I guess we're about to find out. So in theory, there's like something sort of like a tie here.
01:57:58.790 - 01:58:33.386, Speaker A: It now says zookeeper completion. Okay, so it is going to a number two. And then let's say that Eve is here too. And Eve votes. What does Eve vote for? Eve votes for one in first position. So now there are two votes for one in first position, one vote for two in first position, and one vote for two in second position, which I think should mean that option one wins. Great.
01:58:33.386 - 01:59:06.470, Speaker A: Okay, so the election stuff seems to now work out. The question now is if we now update items to set done is true, where id is one. So now item one is no longer an option then now it should fall to the second one. Great. Okay, so this is basically what we want right now. The same votes are still present and we didn't have, like everyone didn't have to vote again, but you still maintain the preferences that are in the system. Fantastic.
01:59:06.470 - 01:59:33.180, Speaker A: Okay, this seems pretty good. This seems like we're getting close to what we want. But of course, currently users can't vote except through this stupid mechanism. So we're going to have to have some kind of interface that they can actually use. So that gets us to this. We're going to show winner. I guess we're going to do this, though.
01:59:33.180 - 02:00:16.000, Speaker A: The question is, do we even show the candidates here? I think we just show the winner. And then what we're going to do is something along the lines of, I guess I should find out how the, how we extend these from multiple pages. Show me the docs for terra introduction. Don't care about any of that. That's not what I want. I want inheritance. Great.
02:00:16.000 - 02:01:17.530, Speaker A: I probably only care about that part. Okay, so we declare a block block, and we do end block content. And then my guess is there's going to be something like. Also remember this is still stupid, right? This runs the election on every page rendering, which is probably not. We want what we want long term. So we're going to move static index to be static, I guess, base HTML terra, and then we're gonna, ooh, that's kind of stupid of me. Oh, well.
02:01:17.530 - 02:01:46.460, Speaker A: And then we're gonna edit and now we're gonna have an index HTML terra. And my guess is that there's something like extends. Yeah. So that extends base. And for the block content index is going to do all of the stuff we did before. I mean, it won't actually, but for now we're just going to have it do that. It's also going to do was the other thing we did for winner in winner.
02:01:46.460 - 02:02:19.906, Speaker A: I guess this is going to be in block here. It's going to do p strong again. We're going to fix up all the syntax and stuff later for the styling current. Winner is winner dot title. Let's see what that thinks. Great. So that just seemed to sort of work.
02:02:19.906 - 02:03:10.300, Speaker A: Oh, apparently not. Oh, does this have to say static slash or something? Huh? So there's something I have to do here to set where it's gonna render. Right, so this is render index. Is this in like rocket Tommy or something? Template are static. This should render index and index tries to extend base. Oh, why does it say base HTML instead of base dot HTML dot terra. Oh, maybe it's just base.
02:03:10.300 - 02:03:46.980, Speaker A: Maybe, apparently. Great. Okay, so now we have that. Oh, I see. You can either give the full path or I guess you can just remit the extensions. How are you linking Terra for templating? Oh, I'm just using whatever rocket gives me. So rocket has this feature called terra templates in rocket contrib that just does the right thing again with all of this.
02:03:46.980 - 02:04:17.536, Speaker A: I'm not really trying to implement this in sort of the best way. I'm trying to implement this in the most straightforward way I can because I, this is not going to be a large site, it's not going to be sort of a production site. It's just, I want it there for voting. Yeah, it's like very straightforward. Okay, so now we have an index page and I guess really what we want here is something along the lines of a. We want like a. And I guess we can do here whatever here.
02:04:17.536 - 02:05:08.338, Speaker A: What do they do for the form? Examples todo static index. So they have a form of some kind here and we're going to have a form on the front page and that form. I guess we can do this or something. Or actually we can do even better. Oh, it did not like that. Why does this not file set file type? What I really want here is like slash, I get, I guess, login. I mean, it isn't really a login, right.
02:05:08.338 - 02:05:34.990, Speaker A: But don't want any of this fancy styling stuff. I really just wanted to have a single thing that is placeholder. Enter a unique name. The name is going to be username, guess the value. Autofocus. Yes indeed. Seems great.
02:05:34.990 - 02:06:07.696, Speaker A: There are going to be no messages in this form. Forms are so great when you don't have to do any kind of validation on them. Submit and the value is going to be let me vote. And then what we're going to do here is something along the lines of having a vote HTML page. And on that page we're going to show all of the options. So that's no longer going to have that. It is going to show the current winner.
02:06:07.696 - 02:06:55.960, Speaker A: It's going to show all of the items, whereas the index page is not going to show all the items this posts to login. So I guess main we're now going to have to have something along the lines of post to login. Right. So this is going to post a login and it is going to have a to do form. I guess here they have something in source main maybe. Where is this form type to do? Oh, that's the from form business that they had. So they have from form for that.
02:06:55.960 - 02:07:26.410, Speaker A: And we have a form too. It's not a very fancy one, but we have a form too. We have a, I guess then a new user form because we have new user. Right. So this is going to be a new user form that maybe. So it's going to be a form user. It's going to give a redirect, I guess user is f dot into inner.
02:07:26.410 - 02:08:04.428, Speaker A: If f username is empty we're just going to set it to be required and we're just going to ignore the user if they try to do something stupid. So here I guess we'll do required. If it's empty then we're just gonna render the same page again. I guess it's just gonna be this. Ooh, that's gonna, it's gonna come back to bite us. No, no, that's fine. It's gonna be even stupider.
02:08:04.428 - 02:09:10.160, Speaker A: It's gonna be redirect to slash. I in fact, I guess we're just setting right. I think we're just going to do, it's really just going to be if user add. It's not going to be an is if it's going to be let you is user. I almost want something like ensure but it's really user login and that's really just going to be user. And then I guess this is going to have to set some kind of session, right that we're going to rely on later and then we're going to redirect the slash again. And then we're going to render a different slash depending on whether you're logged in or not.
02:09:10.160 - 02:09:58.780, Speaker A: Okay, so user login, huh? So implement pubfen login. It's going to take a connection. It's going to give you back a user. I suppose this is going to take a username. This is going to take a username which is a string and it's going to make you a user. And so that's going to be similar to what they did for like task create. Whereas I guess for us it's like a find or insert.
02:09:58.780 - 02:11:11.660, Speaker A: I don't know how that's gonna, I think we want this users and this is gonna be insertable and then user is not going to be insertable. And now this is going to give me just the new user object. So this will be a new user. Maybe this is just a new user and this is make, this is going to be user login and gives you a user. And then we're going to do something along the lines of we sort of want to do a lookup. Wonder how we're going to do this. Oh, that's the other thing I've forgotten to make, right.
02:11:11.660 - 02:11:50.720, Speaker A: Oh no, we have a unique index on you name. Okay, so really what we're going to do here is insert into is going to be so stupid. But self schema users table and we're going to insert in self execute. Right. So this is where it gets stupid. This insert into is gonna either fail or succeed. And actually we don't, we're gonna not even care whether it succeeds or fails.
02:11:50.720 - 02:12:55.998, Speaker A: Ensure that the user exists and then we're just gonna select it out. So these will have a good, just like just want to do a quick and dirty. I guess I can do a find. Does it have a straightforward way to do that? I don't have to think see select. I guess it would just be select users table and then I would do something along the lines of dot find cell username maybe and then get results. And this will be a user unwrap maybe. Apparently not.
02:12:55.998 - 02:13:37.370, Speaker A: Unknown dynamic. Oh, this is probably the, it probably does not turn like camel case into snake case for you. Oh, it needs to be called the same new user form. New user form. I wonder if I can just make that fd selectable expression. Maybe I can just do this instead. Users.
02:13:37.370 - 02:14:31.188, Speaker A: Users as all users. It seems annoying to have to do that all the time. But I guess I am also not putting in the effort to learn diesel. So there are probably easier ways to do most of these things. Expression is not all right. This has to do something like what do I have to do? Id as aPk. And this is going to be right, the filter here is really, or the find is really a user id.
02:14:31.188 - 02:14:49.860, Speaker A: Oh, sorry. This is not an id is not what we want. We want username. And then here we're going to do username. Eek. Self username. That's really what we're trying to find.
02:14:49.860 - 02:15:41.650, Speaker A: Expected bool. Found integer. What? Oh, find is by primary key. I see. So it really is filter. Great. I guess this is going to be as users email, otherwise you have an import and a field that have the same name which is probably going to complain about.
02:15:41.650 - 02:16:08.820, Speaker A: Alright, let's see what that gives us. So we now have this awesome page like lo and behold this page. Current winner. I'm going to put in John. No, I'm going to put in Alice. Let me vote. Ooh, did not like that.
02:16:08.820 - 02:17:39.058, Speaker A: No matching routes for post slash login. Really? Is that so? So I guess what that means is it's really, it's claiming that what I'm giving it is not one of these forms because remember how all of these, why does it say new login? I think might not matter, but I don't think the name of the root model matters. But yeah, okay. I didn't think so. I think what that means is, remember how rocket takes the, the arguments to the function is basically like a filter of what does this particular request require in order to be executed? What we're saying is, requires a new user form. And so the real question is how does it know whether we're providing that? And if we look at index, how would it know? So name username is apparently not sufficient. Why is that not sufficient though? What does, what does this do? That's different.
02:17:39.058 - 02:19:16.040, Speaker A: So this also does from forum it's just called description. And in main when they depend on it, I don't seem to really do anything different. So it's got to be in the template somehow. Name description, there's nothing else there really. So why, why, oh why is this not being satisfied? Huh. At least in theory, I think this should match the form that we're posting post slash login. Is there a way to get rocket to be more verbose with logging, I wonder? A rocket routing, that's an alpha dynamic path forward increase request.
02:19:16.040 - 02:19:48.632, Speaker A: Also this is stuff we're going to need for sessions. But here body data. Oh, okay. So those names just have to, we can just call this input and then this can be called input. That's easier here, right? So there has to be some t that implements from data. And we know that new user implements from form. So the question is why is it not, right.
02:19:48.632 - 02:20:49.920, Speaker A: So here there's like a derived from form and then you can take form of that type, which is the same thing we have the data that arrives isn't of the correct content type. The request is forwarded. If the data doesn't parse, you get something else. But we get a 404. A forward or failure can be caught by using the option type lenient form. I mean, I guess let's see what option gives us first just to see whether it now at least gets called. Far too many tabs open now.
02:20:49.920 - 02:21:19.240, Speaker A: Yeah, it doesn't even seem to get called. Pretty odd. Oh, is it because we don't even mount it? Yeah, that's why. That's, we want index and login to be mounted at Slashenheid. We don't want this to be an option anymore. We don't want this to be unwrapped. We just want it to do the right thing.
02:21:19.240 - 02:21:40.016, Speaker A: Great. And now refresh. Beautiful. It didn't do the right thing, but it tried. Oh no, it did the right thing. Okay, so it's because we don't set the session. So now presumably, what did I give us the username here.
02:21:40.016 - 02:22:03.960, Speaker A: Okay, so if I need to give John now and push, let me vote then. If I now check the database and do select all from users, there's a john. Okay, great. So now it does, it creates the user if they don't exist. And if they do exist, they don't create it again, which is exactly what we want. Now we just wanted to set the session for the appropriate user, which we're going to do very straightforwardly. Bye.
02:22:03.960 - 02:22:29.680, Speaker A: That's a good question. How does rocket set sessions? Okay, so this basically doesn't have any logins. So let's find an example that has sessions, session. Great. Hello, Main. They have fancy login cookies. Cookies.
02:22:29.680 - 02:23:05.340, Speaker A: So we're going to also depend on rocket cookies and we're going to do cookie. So this, so see here how this is now saying that login depends on this additional resource. Now, namely it needs to have access to cookies. And for us we're going to do is in this case cookies. Dot I don't know if it's going to be add private. It might just be ad, we don't care that it's private. So we basically, we don't care if the user gets to see the contents of this cookie.
02:23:05.340 - 02:23:34.386, Speaker A: Basically that's going to be plaintext as opposed to, as opposed to being encrypted in some fashion. So instead we're just going to store user id. And you do. Great. Now what do they use here? User. Right. So here you can see the, the way in which these requests end up being used in rocket.
02:23:34.386 - 02:24:09.412, Speaker A: So notice that all of these are for get slash login. One of them is sort of preferred and the other is rank two and one. The rank one has a requirement that you are a particular user, right? Whereas this one does not have that requirement. And so this one, if you had a user. So I guess this declares a where does user come from? Right? So here, this is how it checks that there is a user in some sense. I don't really want to, I wish there was a nicer way to do that. I mean, I guess this is the nice way to do it.
02:24:09.412 - 02:24:49.728, Speaker A: I wish there was a fast way to do it. But fine, we're gonna have a user. All the user really is, is an I 32 and it's just going to parse out. It's going to get user id. And I guess so this is a little bit stupid because you could totally imagine that there's some user out there who's just going to like enumerate all user ids and make all the votes, but it's not going to be secure anyway. It's fine. So user id, it's just going to create a user for that user id.
02:24:49.728 - 02:25:43.426, Speaker A: So this is a way of saying given a request, is there or is there not a user there? Right? And so once we have this, we can now declare this, this prefix or this additional request modifier. So we're now going to say that this is rank is two. This sort of index with no user associated with it is going to be the fallback. And here if you have a user, then we're going to in render vote. Right. Arguably the context might actually need to know whether you're logged in or not to know whether to show the options. In fact, what we could even do is say that we could only load, basically we could only run or load items if, if the user is not logged in.
02:25:43.426 - 02:26:52.250, Speaker A: But let's just ignore all of that for now. Not great. So this is going to be vote votes, I guess, because we're also going to have to have a vote endpoint for submitting the votes. Alright, so in this case you're gonna be able to vote once you're logged in, that is. Oh, did I miss something? Is rank like different somehow? Oh, it's inside. See, rocket really likes using nightly for all the things, I guess I need request and from request and some things, these things and that thing. Gimme gimme gimme.
02:26:52.250 - 02:27:35.770, Speaker A: I probably have a duplicate import now somewhere. Also use fine and form is double imported. That's fine. But user, I can't use because there's already a user type, so this is going to be authentic because off it seems funny. Good luck. Oh, have a nice day. Thank you.
02:27:35.770 - 02:27:56.040, Speaker A: I mean, I did tell you this was mostly going to be me hacking on a very straightforward website. All right, so now I think in theory we should be able to go here and go. John. Hey. And it shows me the items. Perfect. And now I guess there's no way for me to log out.
02:27:56.040 - 02:28:26.100, Speaker A: So we'll bring up this and storage and delete this. And then I'm logged out again. Great. I guess I also sort of want the ability for this login to be long term. I don't know if there's a. Basically, I don't know what happens if I close my session and start it again. John expires on session.
02:28:26.100 - 02:28:59.546, Speaker A: What's the expiry date on this expire session? Yeah, it's probably fine. Doesn't seem terribly important. Again, this site is not intended to be secure. Okay, so we're getting pretty close now. I mean, there's a lot of styling that has to happen, but now we have this list, and now the user needs to be able to move that list around in order to change their votes. We're getting pretty close to that. Right.
02:28:59.546 - 02:29:36.124, Speaker A: So for vote Terra, we're now going to use this sortable business. Just get rid of some of these because they're not terribly, I guess that we can probably keep. Don't need any of these. So now for the sortable business, I think if I remember correctly, there's like a CDN part here for how you load it without having to do anything. Wait, seems perfect. CDN, great. That thing, that's what I want here.
02:29:36.124 - 02:30:05.642, Speaker A: Specifically, I want this. So now we have sortable. And then how do I make one? Ooh, sure. I'll bring in bootstrap. That seems fine. You know, given that we are not terribly, you don't find it terribly important that everything. This is very straightforward, right? All we want here is something like this.
02:30:05.642 - 02:30:53.460, Speaker A: It seems fine. I don't think this id is important, I guess valid. And then you're saying these should be class list, group item. Do we think all this is going to magically look great now? And then this, and it's going to be document dot getelement, my id ballot. No options. We don't need options where we're going now. If I go here, hey, I can drag and drop them.
02:30:53.460 - 02:31:18.580, Speaker A: Fantastic. Beautiful is what it is. And then we're gonna have to make it save. It's probably gonna be harder. Also, keep in mind, we're gonna need this. If you remember the ability to, in this kind of voting, you are able to not vote for certain things too. You don't have to.
02:31:18.580 - 02:32:17.530, Speaker A: In rank choice, you don't have to rank all the choices. And so we're going to need to have some kind of barrier that you can move around and say, everything below this I don't care about. So we're going to add this sort of group item, I guess, which is going to be canceller. Don't have a better name for it yet. And what we're going to say is that it's abusing things a little bit, but we're going to say that a canceller, anything that. So a canceler and anything that follows a canceler, any list item that follows a canceler is going to be background gray or something. Right? So the canceler, if I move it to here, that becomes gray.
02:32:17.530 - 02:32:37.780, Speaker A: And if I move it down, it's no longer gray. And so this has, this gives me a mechanism for saying anything below this, I don't care about. Again, the styling is terrible. We'll deal with that. And now really, the last thing we want is the ability to say, to have this list be saved. Right. So currently it's not saved at all.
02:32:37.780 - 02:33:18.180, Speaker A: It turns out that sortable has this neat feature called store here, where you can say, hey, where's the. You can say whenever you want to render the thing. I don't think I need. Do I need to implement get. I don't think so. So specifically, this is like whenever the order changes, this function gets called. So currently we're just going to set it to basically do nothing.
02:33:18.180 - 02:33:36.330, Speaker A: Interesting. Give me back my console. Do I actually need to implement it? That's kind of awkward. I don't think I need to implement it. Maybe I don't need store because I don't. We're not gonna dynamically load anything. So maybe there's just like an on.
02:33:36.330 - 02:33:55.752, Speaker A: Ah. On update. Sweet. Let's do that instead. Onupdate and what? Give me. Same as on end. Okay.
02:33:55.752 - 02:34:25.960, Speaker A: So that gives me an event and two target list. Sure. Always want the target list. There's only one list, so let's see what that gives us. So now drag this. Ooh, currently nothing. Oh, that gives me that.
02:34:25.960 - 02:34:55.310, Speaker A: Whereas what I really want is I want the whole sortable. Is there no way for me to get that in these? Oh, maybe. Maybe this is even simpler. Lars, sortable is this. Can I now just use sortable? Maybe. We're about to find out. Great.
02:34:55.310 - 02:35:40.506, Speaker A: I don't know what these ids are. Oh, does this need some kind of like, I guess, data id or something? That's gonna be item id. Is that gonna make it happy? Yeah. Great. So now they're no longer auto generated and then this, I guess, has to have something like data id is, what does it say if you, what's the word for if you're choosing to not put something on a ballot? You are, I guess, void. I don't think it's important. So we're gonna say we basically.
02:35:40.506 - 02:36:38.940, Speaker A: So order is going to give us the full order. Right? So in this case this is two is the top one, then void, then three. Why is one, oh, one has been completed, that's why. So what we want to do here is we want to get a list that is only the things that have not been voided. So in this case we just want to, and I think that's a good question, what is, why is, I guess so we can say var votes is an empty list. And for, oh, in order we're gonna, if o is equal to void, I'm too used to rust code now, then break, otherwise votes push. Oh, append, and now give me votes.
02:36:38.940 - 02:37:25.196, Speaker A: What does this look like? Ooh, missing small rust code. All right, so it is push. Yeah. Zero, one, two. That's not what I expected. 40 in order log. Oh, does this just give, is JavaScript being stupid? This gives me the indices, doesn't it? So var o is order.
02:37:25.196 - 02:37:59.550, Speaker A: Okay, so now it just gives me two. So now it's given me the prefix that is before sort of the voider, and that is what I want to store. Like this is the set of votes that I actually want to store. And so now I need to send that to the server somehow and we're going to send that to server in the most sophisticated way possible, using fetch. Even though fetch also lets you send stuff. A little bit of a weird name. There's a using fetch.
02:37:59.550 - 02:38:40.078, Speaker A: That's what I want. And what I really want is a fetch. Right? That's what I want. So what I'm going to do is I'm going to fetch, I guess this is going to be slash vote with a post. Don't care about the mode, don't care about the cache, don't care about the credentials. It is going to be application JSON. This is not rust.
02:38:40.078 - 02:39:22.020, Speaker A: Well, that's true, but when you're writing like a web server, when you're writing a website, you also sometimes need to write stuff that's not rust, sadly. I promise I do have rust code here. It's just we're mostly done. Well, we're going to come back to it a little bit. There should be no redirects. I don't care about refer and the body is just going to be votes. And I guess actually what I want this to be is what's the way to turn strings and integers and just int? I think it might just be int and don't care about that, just want to do that.
02:39:22.020 - 02:39:55.780, Speaker A: Great. Let's see what happens. So if I go here now, I reorder this. Int is not defined. What's the JavaScript? Convert string to integer. Is it just int or number? Because of course it's number. All right, like, so array two, did that send a network request, post a vote with the contents.
02:39:55.780 - 02:40:29.650, Speaker A: So it included the cookie, I assume cookie, yep. User id is four and included just the two. Perfect. So sent an array and that makes us happy. So now the only thing we really have left to do here is there's going to be a post to slash vote. It's going to vote. I guess we're going to make sure that vote gets included here so we don't run into the same trouble as we had before.
02:40:29.650 - 02:41:30.270, Speaker A: Vote is going to require that you have a user which is off and a con which is that. And it's going to give you back I guess a template, although it basically tells you nothing. And what that's going to do is just user vote. I guess it also gives you a form, sort of. How are you supposed to get Jason data, I wonder? Huh? I guess it's almost like we want to deserialize. Yeah, I think what we're gonna want to do here is actually say that this is votes. So this is like an object now and then in schema we're going to have another sort of from form.
02:41:30.270 - 02:42:13.880, Speaker A: Actually it's not going to be from form, it's just going to be deserialize. It's going to be ballot and that's just going to have votes, which is going to be a vec. And then the question is, is there a way for me to put this just here, I wonder. Maybe the rocket thing has that if I just want to parse Jason. Aha. Derived, serialize perfect data is task and it's Jason. Fantastic.
02:42:13.880 - 02:43:14.020, Speaker A: Alright, so probably wherever this is from, it's also Jason. And we're just going to say here, what was it? Data is input or I guess ballot. This also takes a ballot, which is a JSON ballot. So this now solve a validity and then we're going to say user dot vote and we're going to give the ballot dot in. I guess we're going to can this be string? I feel like that can probably just be string voted. And now what we need of course is, oh, that's awkward. I think it has to be user vote and then it's going to be user zero which is the UId.
02:43:14.020 - 02:44:19.480, Speaker A: And then in here on user. I guess it could be on vote to vote. Save ballot. And what save ballot is going to do? I guess it also needs the con like so is it's going to take a user id, it's going to take a ballot, it's going to take that connection, it's just going to clear all of the users current votes and then it's going to add all the new ones. What are the main crates you're using? So this is using rocket for sort of the web stuff. It's using diesel for the database stuff. And then it's using the RCI crate for, for the ranked choice voting and I guess terra for templates which sort of ships with rust.
02:44:19.480 - 02:45:03.430, Speaker A: Okay, so save ballot is going to be really stupid. It's going to do all votes filter where user ID equals uid. How do I delete? Is there like a diesel delete? Great. Execute con, unwrap. Maybe not unwrapped is okay. Sure. Unwrapped.
02:45:03.430 - 02:45:57.888, Speaker A: So we're deleting all the users old votes and then we're going to do. Is there a nice way for me to do like insert many, maybe under diesel. Insert into for this? It just needs. I see. So insertable is probably the, okay, so it is just single insert. That seems fine. So what we're gonna do is for like ordinal, I guess I and IId.
02:45:57.888 - 02:46:34.220, Speaker A: So this is the ordinal number and the item Id in ballot. Dot votes. That is all there is in ballot. Right. Then diesel insert into. And I guess here we're going to insert into self schema votes table dot values. And then this is going to be.
02:46:34.220 - 02:47:30.718, Speaker A: What are we inserting? We're inserting, I sort of want this to really not be that. Can I make this be vote uid? Item Id is iid and ordinal is I unra. I don't know if it's gonna be happy about that. Probably not expected. Item 191. What? Oh, here on anyone sure. We don't have delete.
02:47:30.718 - 02:47:58.856, Speaker A: That's not a thing that we do. We don't delete things. This has to be intuitor enumerate. So we need enumerate so that we can get the ordinal number right. Because remember we need to store the order of the votes and this is I 32. That's true. No.
02:47:58.856 - 02:48:28.370, Speaker A: Jason in request. Then where is Jason requests. Oh, from rocket contrib. Sure. I guess it's not considered core to rocket. I guess that makes sense. Now what, uh, what am I, blind? Rocket contrib.
02:48:28.370 - 02:48:58.940, Speaker A: Jason. Jason. Jason. Jason Whydeh. Oh, is there like a feature? Oh, it's because we said default features. None we really mean. We also want Jason.
02:48:58.940 - 02:49:16.470, Speaker A: How many of these? Oh, because Tara is not on by default. I see. Why does it, why has it been set? Default feature. Just don't do that. I want serve also by default. Don't disable the default. That's silly.
02:49:16.470 - 02:49:44.468, Speaker A: All right, so select all from those. Right. Let's see. So who am I currently logged in as? That's a good question. I'm logged in as four. So what we want is here where user id is for. So user id four.
02:49:44.468 - 02:50:05.000, Speaker A: So that's John has made no votes so far. And then we do this. Did not like that at all. Right. Descending. Oh, why does that? Empty. That should not have sent empty list.
02:50:05.000 - 02:51:02.850, Speaker A: Also we don't need the static CSS directory. That's not necessary. Neither is images. That is a little bit disturbing though. Why is it not storing that? What do we get in our console? We get an empty array. So why is the request that's being sent out? Content length two, it should be an empty. Why is it not sending the votes? Key is what I'm wondering.
02:51:02.850 - 02:51:41.332, Speaker A: Right. Like why this is what I wanted to give, like votes. Nothing. That's really what this should return, but it's apparently not what it does return. So if I do this, what now it works. Okay. Also now there should still be no votes for user four.
02:51:41.332 - 02:52:13.046, Speaker A: If I, so this is two and this is three. So if I move this to here, now, this sends that, I have now voted for two. So if I now do this, there's a vote for two in ordinal position zero. If I do this should now be votes for two and three. Votes for two and three with two coming first. If I reorder these two, should now send three and two, which means that here it's now three and two. Okay, great.
02:52:13.046 - 02:53:27.554, Speaker A: So now we have like the whole setup in theory. Now we could do a bunch of votes if we now refresh. I guess this should maintain my order, shouldn't it? That's awkward. It doesn't need to retain my current ballot. I guess we can do this with a left join. So the idea here is that if you go back to look at your ballot, you should see your own ballot, which we can do by context here for user. This is going to be not just all, so if we go to schema here, if we're given a user, then what we really want to do is going to be user zero for user.
02:53:27.554 - 02:54:33.290, Speaker A: Then we just, we don't want to load all of them. We want to left join. Yeah, no, we want to, we want to left join with votes, which is a little weird but doable because we need to declare this is joinable already. Is joinabol. We're about to find out. So we're going to do a left join with what's the join key in schema votes table. So we're going to left join with that and we're going to order by I guess ordinal dot ascending.
02:54:33.290 - 02:55:17.140, Speaker A: So the idea would be that the nulls are ordered after. So therefore you first get your own and then you get the others. This I guess we need to select out, ooh, it's true. I do sort of just want to select item, but I don't know that that's gonna work. Yeah, exactly. This has to select out the things of item that we care about, which is really quite weird. I wonder if there's a convenient way to just sort of select all the fields of a given thing.
02:55:17.140 - 02:56:37.380, Speaker A: So for here the DSL we end up with here, no, query DSl. So for this, is there a convenient way for me to just like say all the things of a table name name here? Oh, I see. I think I can do something like schema items. Like all might not be all. Probably called something else. In particular the thing it generates methods. No, DSL probably generate some kind of like star because it certainly generates one thing for every field.
02:56:37.380 - 02:57:18.240, Speaker A: I sort of, I just don't want to name all the fields of items. Right. Expression. No, actually I guess the real way to do this is just look at the table. This, what does it generate? Uh huh, uh huh. All columns. Ah, so close.
02:57:18.240 - 02:58:15.450, Speaker A: So close. Great. It does mean that we lose the information about whether or not the user has voted for something. So I wonder whether I can do like item comma option I 32 maybe and then say I want that and also ordinal. Oh, now the types are not going to match for context. Also it did not like that. Why did it not like that? Expect to never found once.
02:58:15.450 - 02:58:50.250, Speaker A: Oh, right. There was a point about this for left joins. Hmm. Oh, dot nullable. I guess is what I need. Right. And then I guess we also need this to return the same.
02:58:50.250 - 02:59:46.230, Speaker A: So this is going to be option I 32, except no, we never need all. We got rid of that. Right. So context, I think is really just going to be an option of items because. Or it can just be not used if not logged in. And now if we go back to, if we go back to our index page, sorry, our vote page, this is now, in theory at least, going to sort by sort by the, the votes the user has already given in the past, I guess. Did I not change this type? Yeah.
02:59:46.230 - 03:00:42.230, Speaker A: Which means that the order should be preserved. And the only thing we need to make sure is we insert the sort of didn't vote item in the right place now. Ooh. Oh, right. This is now item zero title. Because one is the ordinal. No, really? That is a very good question.
03:00:42.230 - 03:01:50.250, Speaker A: Why does this not give? I guess I can just try to print item, see where that gets us. But that doesn't really seem like it does much. Right. So this still, huh? Apparently it doesn't really like that. Instead of being given a tuple here, can I print, like item one? Is that a thing that I'm able to do? It doesn't seem to print those. I mean, it could be. That's necessary.
03:01:50.250 - 03:03:15.350, Speaker A: Shouldn't think so, huh? I guess we look at Terra and looks at data structures, math comparisons. What about tuples? Really not talk about that. Built in tests maybe is defined. So I guess if item dot one is defined and. Hello. Although I wouldn't expect that to make a difference. I mean, I guess we could just for own sanity's sake, check that it actually has things in it because we could totally have screwed that up.
03:03:15.350 - 03:04:11.550, Speaker A: Right? What? Something ain't right here. Oh, this is from user. User? That's so silly. Let's try all of that again from username. Oh, one user. It should be four user. See how that works out.
03:04:11.550 - 03:04:59.480, Speaker A: Ooh. Well, that's certainly too many things. How did that happen? From items. There are not that many items. Ah. What? Why are there this many? Oh, I bet you the join is now wrong. It's like joining by.
03:04:59.480 - 03:05:49.270, Speaker A: Joining by user id or something, maybe. Ah, that's very interesting. So the other thing we want here, of course, is something like if item dot one is defined. It's a little awkward that this has to work this way, but I think we might actually have to duplicate it. Like, we want this void in between. Right. Is undefined.
03:05:49.270 - 03:06:31.170, Speaker A: Right. So that should give them to us sort of in between that should put the separator in the right place. I think it is not matching the root. Yeah, it's just, yeah, I guess you saw the fix, right? So now the void is still not happening in the right place. It sort of seems to think the user voted for all of these. So let's do like a sanity check of what comes back from here. Let's make that reverse.
03:06:31.170 - 03:07:04.460, Speaker A: My guess is the join is doing something weird. Yeah, see here, like this is what the join gets back. Just clearly wrong. Ordinal. Oh, it's, that's so stupid. It's. I know why here we're not filtering by user.
03:07:04.460 - 03:07:28.114, Speaker A: Filter. User id dot e uid. That's so stupid. So stupid. So we were just like looking at everyone's words. Great. So now if I reorder these and then refresh, then it stays.
03:07:28.114 - 03:08:14.660, Speaker A: If I move this up, refresh does not show the things that are underneath, which is not what I wanted it to do, but, you know, is not defined. Ha. Something happened. Not quite what I wanted to happen. Let's keep that in for a sec longer. Oh, I guess is on the time then. Fine.
03:08:14.660 - 03:08:39.670, Speaker A: So what is it doing? It's now only getting one thing. Clearly it should still be getting. Oh no, that's right, it shouldn't. No, it should be getting both. This whole point of the left join. Right. That this should give us all items.
03:08:39.670 - 03:09:18.320, Speaker A: Oh no, it needs to be a part of the left. So, okay, this is now joining and then selecting where user id is equal to something. But if the left join, if we don't have a match for anything, the left join isn't going to match. So the user id is going to be null. So this is like user id is equal to that or null. Or we put it as a part of the left join conditional. So I guess where's our left join? I mean that doesn't, that's fine.
03:09:18.320 - 03:09:59.380, Speaker A: See, inner join, that's fine. Can I add conditions to the join clause, is what I want to know. Right, posts here. Oh, right. Dot on. And I hear, wonder if this is going to get rid of the normal join condition. It probably is, isn't it? Yeah, I think I'd rather, I think it's clearer to do this.
03:09:59.380 - 03:10:31.230, Speaker A: Or what's the filter? What is or filter. Right, so, or filter. So either the user id is this or user id. Eek. Yes. Where does Eek come from? Is the other question. Because we sort of want to, we want to allow it to be null.
03:10:31.230 - 03:11:08.760, Speaker A: Is null. Yeah. Right. So either, either we join, either we join, either we join and there's a vote and we filter on that user's vote, or the user, or the user didn't vote, in which case we still want the item. I think. I think that ends up being right. Great.
03:11:08.760 - 03:11:51.590, Speaker A: So I put this here and refresh. No. Why? If I move this up now, I get a nothing. Remove this here. I do get that. I just don't get the other one. What? That's so strange.
03:11:51.590 - 03:13:27.680, Speaker A: Okay, what if I delete all the votes for that user? Then I still only get one. Like now I get only the ones I didn't vote for. Fine. I guess we will have to do it this way then. And it's going to be something like, I guess user id equals uidden and, and I don't know, probably. And like, I guess item id equals cell schema items id. Like, is that what it wants compiled? It's not quite what I was expecting, apparently.
03:13:27.680 - 03:13:49.990, Speaker A: That's right. But I currently have no votes. I haven't voted for anything. So this line should be up top and I am getting none. Oh, I guess I might as well filter this on. Done. Anyway.
03:13:49.990 - 03:14:36.410, Speaker A: So this is. What are we filtering on? Done. Equal to false, right? Oh, schema items. Right. So if I now request this, both of these have none. And so I would have thought that they would end up down here. But apparently defined is true for none.
03:14:36.410 - 03:15:54.520, Speaker A: Is that the takeaway from this? What was the. Let's see, I guess what was it? This thread said about options and testing for option? Well, that clearly doesn't work because they end up above. So if I here do, like, I print out item one, my guess would be that it prints. Apparently that's not a thing that I can do. That didn't print anything helpful at all. So the server is certainly saying that the ordinal number is none for both of these, which is because we haven't voted for it. So that seems fine.
03:15:54.520 - 03:17:02.200, Speaker A: But then why is item dot one defined? Is if I can negate it, if that helps. But I don't feel like that should help. That just does not work. I mean, I guess it just feels weird because I think that means ordinal number zero would be. Yeah. So if I now do this, this ends up underneath because it's ordinal number zero. The ordering is also wrong.
03:17:02.200 - 03:17:42.342, Speaker A: Notice the sums come after the nulls. That's pretty awkward. So I, so this means that in ascending ordering, nulls come first. So I think what that means is we need to order by something that is none descending first. So something like user id and then ordinals, it should fix that problem. Right. So now at least that comes first.
03:17:42.342 - 03:18:20.660, Speaker A: The sum zero comes first. The problem now is sum zero is falsey, and so therefore this one, it's awful and is defined. Does not work. Right. That's because that's what I wanted to do, but. Oh, now it works or does not work. Oh, there's already an opt there.
03:18:20.660 - 03:18:54.920, Speaker A: Okay. Did I actually vote for all of them? No, I did not vote for both. It's false. This is just returning true for both some and none. I guess I could map it to a boolean, maybe. That's awful. I don't want to have to do that.
03:18:54.920 - 03:19:49.368, Speaker A: Well, so we're gonna have to do something stupid here. Like, I guess the thing to do is, like into iter map. This is awful. This is terrible. And then map that into I and then, or unwrap or false is map true? So we're mapping any value to true and none to false. Seems like such a stupid workaround. But now at least this will just be boolean, which might make it happier.
03:19:49.368 - 03:20:23.402, Speaker A: And this is now bool. That's so silly. That is so silly. Oh, we need to collect again. All right, how about now? Great. So now if I move this down refresh. Move this up refresh.
03:20:23.402 - 03:20:39.330, Speaker A: Move this up refresh. Move this up refresh. Right. The things underneath are ordered basically randomly, which is fine. Like, we don't really care about how things are, how things you didn't select or ordered. That's fine. We can deal with that.
03:20:39.330 - 03:21:17.460, Speaker A: Okay, so now we have all of that in place, and now all that's really left is styling. And I guess we should fix all of these errors or warnings. Find type table. Maybe this has to go in here. Like, not entirely outrageous. It can't be all of it, though. He's complaining about insertable, inquiriable.
03:21:17.460 - 03:21:52.940, Speaker A: I think it just wants us to take all of these and move them into here. And then it would be happy. And then we'll do use cell schema, user item vote. Probably a pub in there. What's your window manager? My window manager is xmonad, although I don't particularly care about my window manager. I just want something that's tiling. And this happens to be a decent one.
03:21:52.940 - 03:22:46.360, Speaker A: Cannot find type table in the scope. Oh, I don't think that's it at all. I think what this really is is it's telling me that if I go back to the to do, like, missing a use of some kind source task, this probably. No, I have that. What is it complaining about? Because presumably this compiles just fine. I would assume the query id is something with djdehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehehe. Huh.
03:22:46.360 - 03:23:31.270, Speaker A: Okay, do you think that applies to this, to insertable inquiriable as well? I guess possibly. I mean it seems to work so I guess I'll just leave it that way. 50. It's a generated file. Yeah, it's some kind of stuff like that. What else is there that's sort of like relevant for us? 18 that can go away. Flash message can go away, user can go away.
03:23:31.270 - 03:24:29.160, Speaker A: It's saying unused attribute on 39 and 46. Really? I guess maybe it's only used for inserts or something. The insertable you can use. No, what I mean is the, that's not the error I'm getting, right, insertable I'm getting a similar kind of thing. Well actually it's query no, here, this is the same names from parent modules are not accessible. But maybe. And you're saying this is like I need this and those are not in the prelude.
03:24:29.160 - 03:25:14.020, Speaker A: No, that's, I get the same error. So it's not that apparently I don't use users no items. Okay. Using explicitly did not get rid of the error though. Alright, so we're getting pretty close. I guess the thing now is going to be making this look decent. So we're going to do something stupid with bootstrap.
03:25:14.020 - 03:25:47.980, Speaker A: Get started. I think that's what I already have, but I could be wrong. Base oh four. It's awfully fancy. Look at that, huh? It's got. Why, why does my browser not let me do the full copy? Okay. Don't want any of the JavaScript starter template.
03:25:47.980 - 03:26:28.810, Speaker A: Sure, I'll take a starter template. It seems fine. This, I probably want that too. After all. It seems fine for this to be, for this to be to like work with mobile. Something that I'm happy with that goes away, that goes away. Body and then I guess that's fine.
03:26:28.810 - 03:27:24.220, Speaker A: And then for index. Okay, that's fine, that's fine. Sure. Give me like the most theming, no layout. Sure me now I'm really just fiddling with layout. Okay, this indenting is not what I want. See in rust table and I just want this to not what's the, I can never remember.
03:27:24.220 - 03:28:02.408, Speaker A: Dot local MRC tab stop is two, shift width is to what's the last one. Soft tab stop. This. Soft tab stop is two. This. No. Great.
03:28:02.408 - 03:28:43.410, Speaker A: It's not if I cross code. So that's what I wanted. And then now if I go to base, I do this. Okay, fine. I. That's totally wrong. What is it doing with this loop? It's not doing the right thing, that's for sure.
03:28:43.410 - 03:29:11.460, Speaker A: All right, that's better. An index. I guess we also set the file, type this. That's fine. All right, base here. I guess we want Div. What's the thing? Class is container.
03:29:11.460 - 03:29:57.716, Speaker A: I think I need to recompile, but I guess storage. Let's pretend that we are not currently logged in. Great. Sure. Whatever the defaults are is exactly what I want. Grid. Don't really need grid for any of this.
03:29:57.716 - 03:30:27.610, Speaker A: Which is also kind of interesting because everything is a single column content. I don't think I need to do anything with this. I have no code. I have no images. I have no tables. I have no figures. Forms.
03:30:27.610 - 03:30:55.380, Speaker A: Great. How do I do that? Because there's a login form right there. It's very important that it looks nice. This form. Form div. Class is form group. I guess don't really want a label.
03:30:55.380 - 03:31:28.170, Speaker A: I guess I can have a label. It's necessary. Aha. I just want that. I want that to be class. Form control. Beautiful.
03:31:28.170 - 03:32:21.470, Speaker A: Is there a way where I can get the button at the end of the form? Like I want an integrated button into my input. No, no, it's not gonna knock there. I want that, but I want it with a submit button in line. No, that's not what I want. No, no. Does not look like it wants me to do that. That's fine.
03:32:21.470 - 03:33:14.030, Speaker A: That's fine. I guess we'll just do, we'll just have it be that and then some. Says I don't even want to support submit button, but I guess I can do it. Let me vote. Look how glorious it looks. All right. Alerts badge, no button group.
03:33:14.030 - 03:33:47.006, Speaker A: Ooh, can I use that for. Okay, so I guess what I want to show. Ignore the warnings. Yeah, that sounds about right. So this page is really. The core piece is really this part sort of. Right.
03:33:47.006 - 03:34:07.650, Speaker A: And so I almost want like a big jumbotron. That's not bad. Could be a jumbotron. Certainly has a cool name. Progress cross. No card. Card.
03:34:07.650 - 03:34:59.700, Speaker A: Card is interesting. It might be what we want for sure. Sure. That seems fine. So this is gonna be h one current winner. And this is going to be one of these card title is going to be winner adult card subtitle we're not going to have and there's not going to be any. How does that look? Sure, let's make it not set it with great.
03:34:59.700 - 03:35:38.870, Speaker A: Not do that. Why is there no spacing between things? I feel like there ought to be spacing between things. Aha. Card header, next stream. Unless you vote. Unless you vote. Courage people to vote.
03:35:38.870 - 03:37:21.970, Speaker A: Why is there no padding on things here? Like what's the. How do I lay out content? How do I make things nothing be stuck together? Because currently it's all kind of stuck together and I don't want that. I guess I do want this form thing to be layout. Can I make them more like that? Maybe this. Give class, row. Give classes. Can I have an empty call? That looks weird.
03:37:21.970 - 03:38:59.610, Speaker A: Perfect. Much better. Now, how do I add spacing between this? Why is there no spacing? Oh, we probably also want something to sort of show that you're currently logged in on the, actually, it's not going to matter. But how do I Twitter bootstrap margin between things? That's not, that's more what I want. So that was the discussion from 2014. That's pretty unhelpful from 2012. Really? Well, I feel like this is probably not, not really happening.
03:38:59.610 - 03:40:46.564, Speaker A: So unhelpful. I feel like the right thing is not to just like add a bunch of spacing myself. I mean, maybe the solution is that I add rows, but like, that just like feels wrong, you know what I mean? I don't know if these rows even have. No, it's definitely not right. But how is the argument that I just like, shouldn't have that? Maybe contents, no, layout. Don't think there's anything about this here. They seem to encourage just like adding rows directly.
03:40:46.564 - 03:42:25.730, Speaker A: But won't everything then just be sort of stuck to the top? Like, what's the vertical alignment? Suppose I could just put everything in one row. Seems like a little bit of abuse, but center? What? No. So you're saying I can't have rows? Oh, am I like not terminating something here? No, this, this all looks right. So I'm really not supposed to do this. It's like what, what this is telling me because these are now suddenly columns. I guess I need to add a single div. That's like a column like equal width like that.
03:42:25.730 - 03:42:57.820, Speaker A: Okay, well, that didn't help at all. Didn't even center things vertically. That was the whole point. I'm so glad I'm not doing web development anymore, but I mean, I know how to override this manually. I just feel like I shouldn't have to do that. But like, there's all the trivial solution here. Is this right? Hey, it's exactly what I wanted.
03:42:57.820 - 03:43:40.828, Speaker A: Hey, awesome. All right, register me to vote. This is a little trickier because here. Nope, here, when you're logged in, that's still going to be there. So that's fine. And then this, I have to figure out what to do with this. So it could be that these are really just rows, but I feel like really their lists.
03:43:40.828 - 03:44:03.350, Speaker A: So component. There's probably a list. List group. There we go. Right. So dot disabled. Really what I want to want, but I don't have disabled that I want disabled.
03:44:03.350 - 03:44:56.460, Speaker A: And I sort of want to say that everything that follows something that is disabled is disabled. But that's probably going to be annoying to do. Oh, I guess this is something like I do not want to vote for. Doesn't really need to have a p. So that's already pretty decent. But it would be great if I had a. What does this look like? So dot disabled really just does.
03:44:56.460 - 03:45:53.720, Speaker A: Just changes the color. See, that's not really what I want voided. Let's make this be voided and then say that what it really does is something like background, like relatively bright. Yeah, that seems good. And dot voided itself should have font weight boldenhouse. Actually that should probably have a more gray background like this. Awesome.
03:45:53.720 - 03:46:16.806, Speaker A: And then apart from that, this looks pretty good. Now, is there a way for me to like really style the things that are in there? Don't want flush. Ooh, no, probably not. Probably not. Custom content. That's more like it. Right.
03:46:16.806 - 03:46:54.586, Speaker A: So there are these like titles, which is basically what I want. Oh, so it doesn't even have to really be a ultimate. I guess this can just be a div instead. And then these are, I think I want them to be a. Because they're not really links and then to be list, group item. Don't really want action, but I want maybe those. I don't know.
03:46:54.586 - 03:47:44.062, Speaker A: I don't know what action it's supposed to represent here. Okay. And this is gonna be something. How does that even look? Okay, that seems fine. And this is class. I don't know what MB one does, but I guess maybe that's what I want. Oh, just changing the padding.
03:47:44.062 - 03:48:35.120, Speaker A: Okay, that seems fine. So this goes here. These are the same. Oh, I see. I also sort of want these to be not quite that wide. I want like ballot. Is that a thing I can do? Yeah, except call six seems fine.
03:48:35.120 - 03:49:07.300, Speaker A: What if I just do code and then I also define another one that is empty. Seems like a. Nope. That seems pretty decent. Seems pretty decent indeed. So now you can do like this. Do this.
03:49:07.300 - 03:50:05.870, Speaker A: I guess those right. These would not be good. Why is this not styled by that? The real question. Oh, this has to be div as well now. I guess it can be, could be like danger, I guess. Info. Sure.
03:50:05.870 - 03:51:04.386, Speaker A: Info. And then this is now list group item info. Why is this no longer applying? Am I missing something? This is a subsequent sibling of that now. Oh, that's what I was missing. So now you can do this. You can do this. You can pull there.
03:51:04.386 - 03:51:47.700, Speaker A: Great. And I guess if I do this, I can't actually affect the vote because there aren't enough people voting. Okay, I guess the following. I'm sure there are all kind of ways in which we would like to make this nicer, but we will not. Instead, I think I'm happy with it now. Doesn't look amazing, but it looks fine and it does what it's supposed to do. More importantly, particular, let's look at Bob who put in his first vote a while ago.
03:51:47.700 - 03:52:57.390, Speaker A: Bob is now also going to vote for that and that probably changes the election. Great. Okay. That last bit was not particularly rusty, but it had to be done. Is there anything at all here that is interesting? I guess DB gitignore, DBSQ. Like is there anything in static? I guess that is really templates. So how about we move, get reset, move static to templates and then I guess source maintained.
03:52:57.390 - 03:53:32.522, Speaker A: Not going to serve any static files. We don't have any of those. So I'll cdn from here now. I guess there are some like eprint lines in here that we don't need. And what was the last thing? Oh, right. We don't need static files anymore. Git add dog.
03:53:32.522 - 03:54:03.500, Speaker A: Git reset works. So what we now have to do is just put it somewhere. So I'm going to stick it up on a server. I'm going to tweet out the URL to it. I'll add the possible streaming topics to it and then, and then tweet out a URL to it. And you can vote for things. I think that basically means that we have what we wanted.
03:54:03.500 - 03:55:03.880, Speaker A: I guess I should create a repo for it somewhere new. Repo, sure. Website for doing multi round rank choice voting. Simple website so that no one gets any ideas about how to do this. Oh, I guess fine. Start here. This don't really care about most of this, but I do have that one of these.
03:55:03.880 - 03:55:50.800, Speaker A: Oh yeah. The intention here was very much to add as few dependencies as possible. Like I just want something that works. I also, for JavaScript development these days I just want to use only things that are in the browser. Ideally I wouldn't even use bootstrap, but then I would have to write more css myself. So like. But fetch is fantastic.
03:55:50.800 - 03:56:06.006, Speaker A: Fetch is really easy to use and that makes me happy. Okay, let's see. So this now I guess there should be a readme. That'd be awesome. But I, I haven't written one yet. Ideally there should be a file explaining how you run this. I might write that up at some point.
03:56:06.006 - 03:57:06.670, Speaker A: I guess the thing to do would be where can I put this easily here maybe? Sure, why not put it up straight away. Sqlite three db dbsqlite schema SQL what? Oh that's fine. This is just the drop table statements. And then I guess actually let's do something like really? I don't have screen installed in this machine. Oh, I'm on the wrong machine. Weird. Okay, run it in release mode.
03:57:06.670 - 03:57:43.980, Speaker A: Seems great. And then I guess we have to do something like I want to forward this to. I don't think this other one is running anymore. So I think this is fine. This is going to be slash five coding. Sure. Live coding.
03:57:43.980 - 03:58:36.492, Speaker A: Well that's not a great sign. Oh, it's just doing stuff. Arguably there's no reason for me to build this as release, but it seems that's fine. I guess I should figure out what I'm gonna put in there. So delete from users, delete from items, delete from this. I guess I need to actually think through what streams we might do now. This might be an interesting thought exercise.
03:58:36.492 - 04:00:08.560, Speaker A: So title and body, let's see. So there's definitely async ssh part two. Could have just reused what I wrote earlier here. I guess another would be polish Tokyo zookeeper keyboard API. So that's definitely one future six against that we're already doing. That's the one we're doing on Saturday. What other things have we had? I guess open source contribution stream take two.
04:00:08.560 - 04:01:50.656, Speaker A: Another do another rust open source distribution stream where we explore and contribute to suggested open source rest projects. What else have I thought of doing? Trying to like backtrack through my head now. Oh, port flame graph. This is the one I really want to do myself, but let's see if anyone else want to do it. Port random Greg, Brendan Greg what else do we have that could be interesting? Really need to sort of dig back here. Other things I wanted to do. I guess we could just look at stuff we have from the past.
04:01:50.656 - 04:03:11.178, Speaker A: Huh? Like things we've built in past streams. This is from the open source contribution stream. Toki I o pool is kind of cool, but not really suited for a stream. Oh, there's like finishing making tsunami asynchronous, but that probably requires that we finish async ssh first. But tsunami is certainly a good candidate for something that we will want to do more stuff with. I guess if any of you have suggestions for streams that either you've heard me discuss in the past or you would like to see, now would be a good time. Yeah, I can't think of anything sort of off the top of my head that I've also wanted to do beyond these.
04:03:11.178 - 04:03:50.160, Speaker A: So I guess let's leave it at those for now and before any of you get any ideas. So insecure. But it's fine. That's not even true. It is slash Db. That's where I want to copy that. No, I guess we're still no stop override set nightly.
04:03:50.160 - 04:04:58.580, Speaker A: Just run some other stuff too. So I guess I'll pin it to today's nightly and in theory we'll be able to vote on things. The one thing I'm worried about this it's not so much that people like vote as other people because I don't think that matters, but you might accidentally use the same username as someone else, and if you do that you're really just modifying their vote as opposed to submitting your own. So there's like some argument for we should have that not be the case. Only four out of 166. Yeah, this server is not the most powerful one out there. I guess we could write a readme for this while we wait.
04:04:58.580 - 04:06:11.300, Speaker A: Uses ranked choice voting. Oh ooh, there's a website for it. That does not seem like what I want. I sort of want something that explains what it is, not where it is. Sure, that seems fine. This is ranked choice voting to allow users to vote on no, it's not what I want. This next rust live coding stream why is this HTTP? That's not right.
04:06:11.300 - 04:08:48.470, Speaker A: Nessrust live coding string. Though it is not specific to this particular voting topic beyond some labels here and there. Basic idea is that users rank the candidates stream ideas according to which they would rather watch. And I guess we should link to RCR and an election is run at stream time to determine is run before each stream to determine the topic of the stream. Since rank choice voting lets users specify multiple preferences, this process can then be repeated for the next stream where it will go to each user's second preferred and et cetera squared uses rank choice voting to allow users to vote on the next rust live coding stream. It is not specific to this particular voting topic beyond some labels here and there. Basically this implementation is not written to be secure or efficient.
04:08:48.470 - 04:10:31.590, Speaker A: Quite to the contrary, users identify with a self chosen username and all that is required to change their ballot in the future. Need to add news to add votes for newstreams newstream ideas is saying username. This means that any user can change any other user's palette simply by giving their username. Don't use this for anything serious to deploy. Run I guess sqlite three dbsqlite in schema, SQL cargo run. The web interface will now be available on court 8000. And I guess we should also tell them about how inserts work.
04:10:31.590 - 04:12:21.910, Speaker A: So to add new candidates for voting use and issue insert statements of the following form. Insert into items title body migrate idea here's why it's great. Mark candidate as no longer available because this stream has already been produced for it. Just mark it as done with update item said done is true. Where id equals is the Id of the candidate which you can find with select title from. Id title from beautiful, beautiful. Readme.
04:12:21.910 - 04:12:54.890, Speaker A: Readme pushed. Still compiling. Oh, I guess I forgot to link to this. I guess this we don't really need anymore. These can go away. This can go away. We are getting pretty close.
04:12:54.890 - 04:13:22.464, Speaker A: I guess I should start and watch this. Who's gonna be the first to vote though? It might be me. I don't know if there's even anyone left at this point. It's pretty late in most places. But hey, we finished. Now I just need this to finish. So I guess I can tell you all what it's going to be.
04:13:22.464 - 04:13:50.100, Speaker A: It's going to be on the squareplant.com livecoding. I think. I think that's where I put it. It's getting too late. It is going to be in live coding. Yes indeed.
04:13:50.100 - 04:14:26.990, Speaker A: So there you will be able to vote and just like pick a unique username, like pick your GitHub username or something stupid, right? That way you know it's unique and then you should be able to just vote for the ideas that we just added. We're just waiting for this to finish up. And if you have ideas for things, ways to improve this, like feel free to send pull requests. I am not at all committed to any part of this website. Whether it's like the way it looks or the way you authenticate or anything. Feel free. I would only be excited for that to be the case.
04:14:26.990 - 04:15:06.840, Speaker A: Pest generator. This brings in a lot of stuff. I guess this is probably rocket maybe, or diesel maybe. Actually, I wonder if we can tell from. Oh, it's running the screen all right, well, it'll be there. This is just sort of uninteresting to watch, so I think we're gonna end the stream there. I guess.
04:15:06.840 - 04:15:43.378, Speaker A: We have this beautiful image. Throw it away. If you have ideas for upcoming streams, then by all means, let me know. I'm on Twitter, of course, and I'm now on Mastodon as well. If you don't want to use Twitter as a closed platform, that's fine too. I had to shut my Patreon down, which is kind of sad because of annoying issues with the us tax regulations, given that I'm an international student, so I can't really refer to that anymore. But I will keep people posted both on Mastodon and Twitter if you want to hear about upcoming streams.
04:15:43.378 - 04:16:26.448, Speaker A: And now, of course, you can use this website to see ideas for upcoming streams and potentially also vote for them. Readme should mention something about Arrow's impossibility theorem to be pretentious. Submit a pr and I'll consider it. But it is kind of funny when these things are pretentious in that way. I do think it's interesting, though, because random, random choice voting, ranked choice voting, just happens to fit this particular use case really well because you have the ability to just vote once for many ideas, right? As opposed to these constant Twitter polls. Yeah. Okay.
04:16:26.448 - 04:16:50.366, Speaker A: I think we'll end things there. Reach out if you have ideas, go to this URL in like 1015 minutes. Or if you're watching this later, probably straight away, and like vote for the ideas and what you would like to see. And send me a suggestion if you have other things, and I will happily add it to there. I guess we're gonna. I guess we're gonna end it there. Thanks.
04:16:50.366 - 04:17:21.460, Speaker A: For those of you who sort of came up with this sort of weird hour to watch, the Saturday stream on Tokyo is going to be at the normal time of noon eastern standard time. It'll also be much less programming. So the idea is just to go through the design of Tokyo and of futures, how they execute. Look at async await. Do a lot more of just like, more explanatory stuff. Hopefully it'll be interesting. And I guess I'll see you all there.
04:17:21.460 - 04:17:25.840, Speaker A: Happy Thursday, so to speak. Bye.
