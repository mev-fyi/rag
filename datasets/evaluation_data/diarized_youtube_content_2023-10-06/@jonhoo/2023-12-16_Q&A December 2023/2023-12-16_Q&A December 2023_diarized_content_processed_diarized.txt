00:00:01.480 - 00:00:14.105, Speaker A: Hi everyone. Welcome back to another stream. This time it's a Q and A. We've done some of these before. I'd end up doing them maybe, you know, a couple of times a year. Whenever there's enough new stuff to talk about. There's a.
00:00:14.105 - 00:01:02.885, Speaker A: I guess if you're watching this after the fact, you can't now ask questions. But hopefully you've asked questions before the recording of this video. But otherwise, if you're watching it live, I'll put the URL where you can ask and vote on questions into the chat here. If I can figure out how my keyboard works like, so you can ask questions in there if you have any, or you can vote on questions that other people have asked. In general, I'm going to go through the questions that are asked here top to bottom by most voted and then going down, we'll see how far we get. There are way more questions that I have time to answer. We'll do it by interest and I might skip some if I find that like, okay, this one we've kind of answered already.
00:01:02.885 - 00:02:02.671, Speaker A: I recommend that you sort of start from the bottom, right? Like, look at the questions that haven't gotten that many votes and then go, you know, vote them up so that we can then, you know, get some of the newer questions to also get enough votes to be answered. So don't just look at the top ones because they're already at the top. So let's go ahead and start with the first one and then people will slowly but surely move through. How is work at Helsing? Yeah, so I joined a new company, for those who aren't aware, I joined a new company starting August 1st and that company is named Helsing and they essentially build software for the defense of democracies in Europe. Is the very, very brief way of sort of the, the company tagline, if you will. I. So I've been working there since August 1st and so far I really enjoy it.
00:02:02.671 - 00:03:25.971, Speaker A: I think it is, you know, it's a kind of unique job because the, the constraints that we have to work under are just very different from what you have in a lot of other companies. Right. Like, you don't really have the cloud. That's not a thing you can use because if you're working on stuff that's going to like run, you know, let's say in Ukraine or like, let's just pick a random, you know, active, active area, then you, you can't really just build software, like assuming that everything is always connected, assuming you have high performance tcp assuming that you can just like spin up more hosts, that you have lots of CPUs, and that that makes for some really interesting challenges in terms of developing systems on top of it. And in addition, you have interesting questions around how do you do deployment? How do you exchange data, given that you're operating in situations where there might be classified data, There might be multiple levels of access secrecy that go beyond just normal access control and you might have input data that is classified. And so now you need to think about, well, you know, the input is classified, but the software is not. But what do we do about the output? Where is that allowed to go? Who's allowed to see it? It's just a fascinating set of questions that I hadn't really considered before.
00:03:25.971 - 00:04:01.769, Speaker A: And I think it's really interesting to be exposed to them. Beyond the technical, I think, you know, Helsing is a relatively young company. I think this started in 2021. And yet I think there are like 250 employees now, about half of whom are engineers. And so that means that the company has grown fairly quickly and, but, but still like it's large, but it's young. And that comes with some challenges. But it comes with some nice things too, such as, you know, the culture is still growing and I get to be a part of essentially shaping that culture.
00:04:01.769 - 00:05:37.255, Speaker A: And when I say culture, I mean both the social aspect of it, but also things like how should we do, you know, evaluation of engineers, how should we do hiring, how should we do engineering reviews of big and small proposals, how do we make sure that people have a chance to sort of grow their skill sets over time? What kind of infrastructure should we have? A lot of those kinds of questions that tend to be kind of settled in larger companies and it's really fun to get to be a part of figuring that stuff out. So overall I've really enjoyed my time at Helsing so far and I'm planning to continue. So ask me again, I guess in six months or so. Um, well, what I'll do by the way, is when I answer a question, I'll sort of check with chat whether there are any sort of follow up questions just to that question and answer those. If you have completely new lines of inquiry, then then ask a question in the sort of tool so that we keep track of them. So I'll just do small follow ups if there are any. Is Helsing hiring? Yes, I think there, there should be a bunch of job postings on the Hellsing website there, there are a couple of restrictions or Constraints, if you will, when it comes to location, because of the kind of work that we do and the, you know, we work with, you know, the militaries of multiple countries and as a result, like you, like, if you work remote from Asia, for example, would not really be feasible.
00:05:37.255 - 00:06:24.115, Speaker A: So. So keep that in mind when you read through, like it says so in the job postings too. But it's not like a global remote kind of company. But in general, like, especially if you're located in Europe, then we have job openings. Let's see, did you have any moral hangups about working for a defense company? I think there's another question a little bit like that further down. And I also addressed this a little bit in the previous Q and A when I sort of just had announced that I joined Helsing. It was a difficult decision actually to decide to join a company that works in defense.
00:06:24.115 - 00:08:06.165, Speaker A: But ultimately I think I convinced myself that it's actually a good thing. And when I say convince myself, I don't mean like I had to find a way to make peace with it, but rather that I spend a lot of time thinking about this question of do I want to both be associated with, but also contribute to this kind of company in this kind of space? And the reason I came to the conclusion that yes, I do is because first of all, someone has to do it. If Europe did not have any kind of defensive technology being developed, like if either, if we leased everything from somewhere else, like that is a problem in and of itself, right? You lose sovereignty. But B, if we didn't lease it and didn't build it ourselves, then now you're at a significant disadvantage. And in particular you don't really have means of deterrence or the goal here is that you shouldn't need to use any of this technology in the first place, but you need to have the capabilities. Otherwise, you know, the other parts of the world that might want to sort of, I don't know, disrupt your way of life don't have a reason not to try because they in some sense know they can crush you. And if it is the case that this kind of stuff has to be built, then I would rather be part of figuring out how it should be built and how we can do so safely, morally and sort of be a part of that decision making process and also the technical process to make sure it gets built well and in a way that I in some sense agree with.
00:08:06.165 - 00:09:12.205, Speaker A: So the alternative would be to sit on the sidelines and just sort of condemn everything, all the decisions that all the people who do have to do this stuff, all the decisions that they make. But that feels unhelpful, right? Like I would rather be a part of the process, just observing it and criticizing it from the outside. Do they offer visas to help with location and stuff and do they offer relocation? I think the answer is yes to both. I think they do both. Visas and relocation depending a little bit on like I think there are some like details about, you know, who and where and when. But like I think they in the general answer is yes to both. Let's see, what languages are you using at Helsing? Helsing is a lot of Rust and a decent amount of Python for AI parts of the stack.
00:09:12.205 - 00:09:43.575, Speaker A: Okay. I think that's basically all the hellsing questions. I'm going to mark that as answered and muon. Okay. Neovim, Hyperlend, Arch, Alacrity, Firefox Dev Edition, Neomut, Anything new? Feed us with the geek stuff. Let's see, do I have anything new beyond that list? Yeah. So I'm using neovim, I'm using Hyperland as my Wayland desktop environment.
00:09:43.575 - 00:10:39.961, Speaker A: I'm still using Arch, I'm still using Alacrity for my terminal with TMUX inside of that and Fish as my actual shell. Still using the Firefox Dev Edition with my custom user Chrome to put the address bar at the bottom. I'm still using Neomut for email. Have I started using anything else that is like tech choices in that sense? No, I think that pretty much still sums up my stack. Like I haven't really added any new neovim plugins either. I'm still using Rust Analyzer for the Rust side of things. I trying to think if there are any new like geeky apps.
00:10:39.961 - 00:11:26.145, Speaker A: For my phone. I've started using. I have started using Obsidian for notes and I've actually quite enjoyed that. It turned out that I had a lot of just like random text files around on my computer and in, you know, notes on my phone and in alarms as some of you might know that like those are all now in Obsidian and that's kind of nice. And I've also started using Todoist for, you know, keeping track of to dos, both shorter and longer term ones. I think I like to do this but I'm still, I still don't know whether it's better than my alarm system. Mostly because I find that it's easier to ignore things if there's just a notification that says, you know, do this thing than if there's an alarm that goes off But I think it's probably on balance better.
00:11:26.145 - 00:11:53.083, Speaker A: I have not started using nix yet. I keep being poked at to like go try nix, go try nix. And Hellsing has some nix stuff internally as well. I just haven't had the need. But maybe I'll take a look at it and then be reformed and see the light. But as of yet I have not started digging into Nyx. Not using new shell, still using base 16 for styling.
00:11:53.083 - 00:12:55.225, Speaker A: So I'm still using the Groov box, dark card theme, color theme for basically everything. Like I have that in my TMUX terminal, Neomut and Alacrity and my console shell and those I think are the places where I apply it. I don't think Obsidian takes a theme file, but if so I would make obsidian use my base 16 as well. I have tried Emacs that's many years ago and I did not like it. I don't see why you would use an OS instead of an editor. Do you use Linux for work? Well, it depends on your interpretation of for work. So my work laptop is macOS and then I run basically the same set of software there.
00:12:55.225 - 00:13:35.315, Speaker A: I have to use like I use Outlook for email because that syncs with all the, you know, contacts and calendars and everything. I'm not going to try to do that through mutt, but I still use Alacrity tmux Fish neovim Rust Analyzer on that macOS box. So it feels kind of similar. And then, you know, I'm a little bit sad that I don't have a better window manager, but I end up using Rectangle, which works okay because I mostly work with one one application per desktop anyway. Sometimes too. Like sometimes side by side browser and terminal, but. So it generally works okay.
00:13:35.315 - 00:14:25.061, Speaker A: But it does make me sad and part of this is like I think I could use Linux at work now. I think there's been sort of a group of people trying to get that to work, but it's still higher friction than just using a sort of well supported setup. And I'm like, it doesn't matter that much to me what OS I work in for work have not tried Helix. I really like my VIM bindings to be accurate though. So I think basically any other editor it would need to have full modal editing, which I don't think Helix has. I think it just kind of emulates VIM bindings. Still not using any kind of AI for coding? Nope, nope, have not used that.
00:14:25.061 - 00:14:52.185, Speaker A: Part of that is also like I. I can probably hook it into neovim in some way, but I just. I just have had zero need. Okay, great. What Helix has. Okay, Helix has modal editing, but it's not Vim. Modal editing.
00:14:52.185 - 00:15:14.797, Speaker A: That sounds awful. My hands are too used to Vim once. Okay, let's move to the next one. What do you think about Zig? I still have not tried Ziggy. Uh, this is another one of those. Like, people keep telling me to try it and I just haven't had any reason to. Um, and maybe that's just, you know, I should just do it and then I will realize why I should try it.
00:15:14.797 - 00:15:52.775, Speaker A: But. But again, like, I just don't have a use case for it. I don't see what the compelling bit is. Like, I keep seeing articles here and there that come up and then someone's like, oh, look, I can do this thing in Zig that I. That was annoying to do with Rust, or I had to use unsafe and that's fine. But I'm also less scared of unsafe and Rust and less compelled that the approach the Zig takes is better because I want safe Rust most of the time and I don't want to have to use a different language for the unsafe parts. I think that is a higher cost thing than the marginal added safety you get for unsafety in Zig.
00:15:52.775 - 00:16:25.855, Speaker A: So, yeah, that's. That's the extent to which I have an answer about Zig really is that I. I can't really make a compelling review of it because I haven't tried it myself. So. So it's all based on hearsay. Okay, what's the pathway to becoming a contributor to the Rust language? This one I get a decent amount, actually. I think almost every stream someone asks a variant of this question.
00:16:25.855 - 00:16:53.609, Speaker A: And the interesting part here is that there's not really a. There's not really a pathway. You just kind of do it right. Like you can rock up to the rust repo on GitHub and just submit a PR that does something right and then you're a contributor to the language. Realistically, you know, there's a. There are a couple of paths that you could choose to take. One of them is to contribute to the standard library.
00:16:53.609 - 00:17:30.011, Speaker A: First, the standard library is just Rust. Like, it does use some nightly features and stuff, but it's mostly just Rust. And so there you could either try to improve documentation as an obvious start first place, or improving testing, but you could also pick some annoying thing you've really wanted in Rust for a while and then try to implement it and file a pr. You might then get Told no, we actually don't want to add this to the standard library. That does happen. There might be a bunch of bike shedding to move things on, but that's sort of the lowest friction entry point. Another one is to contribute to the tooling rather than Rust itself.
00:17:30.011 - 00:18:10.195, Speaker A: So this would be things like Rust Up Cargo, Rust Dock Clippy. These often have maybe more straightforward paths to contributions. They always have the need for more hands. It might be less obvious what to contribute there, depending a little bit on what exposure you have to Rust as a project already. But they're like, you can almost certainly find issues to tackle that you can then go contribute to. It might not feel like Rust the language, right? But it very much is Rust the ecosystem and the core tooling. And I think that is a good way to start down this path.
00:18:10.195 - 00:18:55.407, Speaker A: And then the third, which is sort of actually contributing to Rust, the language which would be contributing to the compiler or, you know, to some extent the language spec, that one is a little trickier. But at the same time, the Rust compiler is just a Rust program. So, like, if you know Rust decently well, you can understand decent parts of the Rust compiler, because again, it is just Rust. So. And I know that there's always a bunch of stuff that just needs to be done in the compiler and someone needs to do the work, and that might require, you know, understanding a bunch of code, but that's the case for contributing to any project. Like the. You shouldn't really think about the compiler as being special, even though we tend to hold the compiler in this, like, mystical light, because it.
00:18:55.407 - 00:19:36.261, Speaker A: It is the thing that compiles the language we write in. But the reality is it's just a big program. So I think this is one of those, like, just dive in and do it. The. The. There's the Rust seed dev guide. If you Google it, you'll find it pretty easily, which talks you through a little bit of the contribution process for Rust itself, as well as an overview of the sort of modules of the compiler and the, you know, the different commands that you might want to run, where different pieces of code and tests live, what kind of data structures are being used, what information is stored, where what compiler passes.
00:19:36.261 - 00:20:31.425, Speaker A: There are. So that's a good place to start if you just want to learn or if you think you want to go down the path of contributing to the compiler. That's a good thing to read first, because otherwise you're just going to have to learn those things through the code, which for some people that's the preferable Path, but it might save you a bunch of time. Let's see, error message translation and improvements is another good one, which is sort of falls a little bit under the compiler. Right? Like improving the error messages of the compiler is a compiler contribution, but it's fairly well scoped and there's also sort of a team that's essentially dedicated to that task. They're pretty good about helping people contribute in that regard and it just meaningfully makes a lot of people's lives easier. So that's a, that's a really good suggestion.
00:20:31.425 - 00:21:16.117, Speaker A: There seems to be quite a high boundary for entry for contributing to the compiler. No, I mean, not really. Again, it's like any open source project and if you make a good contribution, then that's all it takes. There's not really a. There's a perceived higher barrier, but I don't think it's actually a real higher barrier. Yeah, there are a bunch of issues that are marked specifically as like easy or mentoring. Those are also good places to start, although they also get snatched up pretty quickly because a bunch of people look for those and you know, the trick is after you've done your first one of those to then try something more challenging, which will take you more time.
00:21:16.117 - 00:21:48.593, Speaker A: But that's the way you become sort of longer term contributor. Right. Stabilization PRs. Yep. That's another good example. Right. Of, you know, it's just these are usually just fairly formulaic changes where when there's been a decision to stabilize a particular feature, you really just need to go through all the places where that feature has like the unstable attribute on them and then change that to stable and set the right version and then file a pr.
00:21:48.593 - 00:22:29.271, Speaker A: So it's fairly straightforward. Sometimes you move some documentation around and such as well. But stabilization PRs tend to be a good idea as well because they're a good place to start. Yeah. So Chad is talking about the Linux kernel too, has a similar kind of flavor where there are some things that are weird about the kernel, but there's also a lot of stuff that's not weird about the kernel where it's really just up program. Right. Like people, I think, hesitate a lot before they consider making a contribution because they're like, oh, this is this super complex piece of software that's used everywhere, but in reality it's a software project and you should just dive in and look at the code and contribute the code.
00:22:29.271 - 00:23:06.235, Speaker A: You don't need to understand the entire thing in order to contribute. And I think that's where people get wrong is that whether that's the compiler or the Linux kernel, they go, I need to understand all this stuff in order to contribute. When in reality, for any large code base, that's not true. You have to understand the things that are needed to make your change. And then it's sort of the maintainer's job to be like, to keep the entire context in their head of being like, well, but the change you made here also actually sort of makes shockwaves over here. So you need to change this thing as well. But that shouldn't be on you as a contributor, certainly not in the beginning.
00:23:06.235 - 00:24:04.381, Speaker A: So just like, just contribute, just dive in. And the Zulip community for Rust, especially on the compiler side, is also really good. And so chances are if you dive in there and ask some questions, people are happy to help you along. Let's see. Okay, let's move on to the next one. Before you started to code in Rust, what language were you using? So my programming journey started with, well, arguably with batch. So not bash batch, like the Windows command script, which I used to make a virus when I was fairly young.
00:24:04.381 - 00:24:42.207, Speaker A: And the virus was a sequence of commands that would open and close your CD drive three times and then shut down your computer just by running, like the four commands that do that. And then I put it on people's desktops and I would rename it to like game or something and I put a little dolphin as the icon. And then I would. I would snicker when someone clicked it. So that, you know, arguably is programming the. After that, I think the next thing I played around with was Visual Basic, Visual Basic.net I don't know if it was dotnet.
00:24:42.207 - 00:25:20.469, Speaker A: It might just have been Visual Basic where I built. I built a little calculator and then I built Minesweeper, I think. I think Minesweeper was like the second thing I built in Visual Basic.net and that was a lot of fun. And then I started doing php. So I did PHP for quite a long time and built a lot of just, you know, websites of various kinds, small and large, some of which I still maintain to this day, which, you know, makes me sad. But alas, not so much PHP anymore.
00:25:20.469 - 00:26:01.605, Speaker A: I think the last PHP program website is now gone. I wrote one or two in Ruby on Rails and one of those I still maintain, maintain. And then, yes, a bit of Ruby on Rails. Tried Python for a while and didn't really like it, although that was for web programming. These days I mostly use Python for plotting. Plotting for papers, which I don't do that much anymore for standard Plotting I just use R. And then I had a period where I did some Java that was mostly during university days where like Java was the thing you needed to use for assignments anyway, but that never made me happy.
00:26:01.605 - 00:26:53.981, Speaker A: And then I did a research project back in 2014 that was in C and some OpenCL code and then I did go for a while in my first year or two at mit and that's when I switched to Rust in order to write Noria. And then I've basically been using Rust since. And then Bash has sort of been a constant throughout this Bash and Perl actually again Perl mostly for like text processing and scripts. I don't use it that much for that anymore. These days I just write a Rust script for it. But I've sort of been all around when it comes to languages, Excel programming. I mean there's some really impressive Excel program out there, but I have not written any of them.
00:26:53.981 - 00:27:32.185, Speaker A: Like I guess. Okay, so I guess arguably I've written a bunch of JavaScript too in my sort of web development days, but not that much in terms of something like no JS and certainly very little Typescript. Loves and hates from that language list. Oh, I quite liked Go, I think now that I know Rust well, I don't miss it. I. If I went back to Go now, I would miss typing too much. Like not as in typing on the keyboard, but types.
00:27:32.185 - 00:28:05.215, Speaker A: I still have a weird like for Bash. Like Bash just makes me happy and sad at the same time. And there's something just like it just feels very real to write Bash and try to get it right. But that's maybe a just weird weirdness in me. I don't dislike Ruby, but also I've mostly used it in the context of Rails and so I don't know if that really counts. Did not like C. I was.
00:28:05.215 - 00:28:40.609, Speaker A: That was a mess. PHP too. I, you know, it was, it was handy at the time, but it's not a thing I would really say that I liked. Yeah, Java was like Java was weird because I don't know that I hated Java. I just felt like it was so unnecessary. Like everything felt unnecessary and maybe that's sort of the sort of enterprise enos of it, but everything was just very verbose. There were a lot of rules about where files had to go.
00:28:40.609 - 00:28:57.975, Speaker A: There were a lot of like implicit things about class loading paths. Setting it up was annoying. Everything was very long. All the names were very long. Everything was nested very deep. It was just like, it just felt unnecessary. It felt bureaucratic in a way.
00:28:57.975 - 00:29:30.295, Speaker A: And Maybe those were the projects that I was exposed to and the ways in which I was taught to use Java, but I just did. Not really. That didn't really jive with me. But I don't know that I hated it. I was just like mildly annoyed the entire time. Like, it never really made me happy. Okay, let's move on.
00:29:30.295 - 00:30:04.835, Speaker A: If, if you have questions, by the way, please send them in. If you have like new questions that are not related to the thing I'm currently answering, send them in the, the actual like question asking website. I'll send the link in here too, just because otherwise you just scroll past in chat and I don't really get to them. So if you have new questions, ask them in there. Oh yeah, and Pearl, I do like Pearl. Like, I don't know why. It's, it's a, it's a ugly language in a lot of ways, but I just like Pearl.
00:30:04.835 - 00:31:00.717, Speaker A: And like, I don't know if you have seen the, the masterful stuff that happens in what's the name of Pearl six is called like Roku Raku. Okay, so I want, I'll send you the link in chat here, but in Raku. So this is the, the name that was given to Pearl 6 instead of having it be Pearl 6. There is an operator, it's really an operator prefix, which is the unicode atom symbol that you can put in front of something like a plus plus and that means atomic increment. I shit you not. Like, you can write unicode symbol atom + + and it means atomic increment. And that is just awful, but also so fun.
00:31:00.717 - 00:31:35.495, Speaker A: And this is why I think, you know, Pearl is. It's, it's, it's, it's awful in the best kind of way. So, yeah, I, I just, I can't. I, I just, I just, I just can't. It's so good. All right, next one. How did you learn Rust and how were you able to have such a good, deep understanding of the language? I think the answer to this is partially that, you know, I started Rust quite early.
00:31:35.495 - 00:32:06.315, Speaker A: I started using rust in early 2016, late 2015. It's like shortly after the 1.0 release. And I used it full time. Like I used it for the research prototype that I was building, which means that I was writing Rust all day, every day since then pretty much. And then you kind of inevitably get good at something if you just do it that much. And, you know, there's a separation here between being good at it and knowing it really well.
00:32:06.315 - 00:32:54.793, Speaker A: Like, I know it really well because I've used it a lot. And I think, I think I'm kind of good at Rust. And I think part of the reason for that is because I've been doing all these streams, writing the book, and that forces me to be able to explain things to others about how Rust works, and that improves my own understanding of those things. So sort of by being forced to come up with good ways to explain it that other people understand, I'm forcing myself to have a better understanding of them as well. So I don't think there's any, like, shortcut here or that this is like me being special in some way. I think it genuinely is just exposure and having spent a lot of time teaching it, I think that combination is just unbeatable. You know, I also have built a lot of different things with Rust.
00:32:54.793 - 00:33:39.891, Speaker A: Right. I started out building this database from scratch, and databases inherently include a lot of different, other kinds of programming problems. There's concurrency, there's obviously database access, there's networking, there's asynchrony, there's parsing, there's persistence and file system access, there's memory layout, there's serialization. And so that forces you into learning all these different bits. And then after that, I've done some cloud work, I've done build system work at Amazon. I'm doing sort of distributed systems implementations now at Hellsing. And so I've just used Rust in a lot of settings as well.
00:33:39.891 - 00:34:13.525, Speaker A: And that adds to this feeling of sort of learning just all the bits, basically by necessity. So, yeah, I think that's the name of. This is actually the Feynman learning technique. Yeah, the Feynman method. Like you, you teach in order to learn. Okay, how's life now back in Norway? I don't really know what to say. Like, I like Norway.
00:34:13.525 - 00:34:32.805, Speaker A: I mean, I'm in Oslo, which helps. Right. It's a. It's the biggest city in Norway. And so it's, you know, it's not like it's a small town somewhere. I like that there's people around, that it's a city, that there are things around. There are some things where I notice that Norway and Oslo are on the smaller side.
00:34:32.805 - 00:35:01.725, Speaker A: I miss having access to Amazon. Like, there are a lot of bad things one can say about Amazon, both as a company and as a store. But it is extremely convenient. And that's been a little annoying to get used to. And I think part of it is actually just finding things. Like sometimes the struggle is that I know the thing that I want to buy, but I just have no idea what store might have it. Right.
00:35:01.725 - 00:35:45.175, Speaker A: Like the other day I needed to get this little adapter between a microphone arm which has a thread that's like, I don't know, yay with. And then I had a thing I wanted to mount on the microphone arm that had a slightly larger thread. And so I needed to get an adapter and I'm like, okay, on Amazon I could just search for adapter and then the thread sizes. But here I don't know where I would go. I needed to like, okay, a hardware store maybe, but this is like AV equipment. But if I go to an EV store, they're not really going to have this kind of thing. And so I just spent ages trying to figure out where to get it from.
00:35:45.175 - 00:36:25.247, Speaker A: And there's obviously also just like generally smaller selection. Right. There are fewer sellers here, so you can buy things internationally and get them shipped, but then you have to pay sales tax and customs as it gets through. So it gets pretty expensive. So that was the thing to get used to. It's now, what, middle of December, and it's quite cold and dark, right? So the sun rises around 9, 9:30 and sets around 3pm so there's not a lot of sunlight right now. And it's quite cold, right? It's.
00:36:25.247 - 00:36:53.293, Speaker A: I mean, how cold is it right now? Let's find out. It's minus 5 Celsius outside right now and it's only going to get colder. So minus five is what, like 30 Fahrenheit? 25. So it's like pretty chilly and will only get colder. It's like snow and icy outside. And on the one hand I've missed that. Like, I like seasons, I like that it's cold and I kind of like the darkness.
00:36:53.293 - 00:37:23.983, Speaker A: On the other, it does make it harder to like live your life because there's more friction to going outside, going places, meeting people and same thing. Like if you can't order things online, then now you need to go to stores to get them. So. So that's been a little bit of a, like, I don't know, that's been a little bit annoying, I think. But. But I think those are my two main complaints. And then there are a lot of things that I like that, you know, I've talked about in the past too, about living in Norway.
00:37:23.983 - 00:38:08.367, Speaker A: Apart from, you know, having family and friends close and being close to the rest of Europe and being able to travel more, those I think are really nice. And also living in a country where I more closely align with the politics of the country So I would say on the whole it's good. I'm still evaluating whether I think it is professionally interesting enough. For example, I really want the Rust community in Oslo to become more active so that I can participate in it. And arguably that's something I could go and do something about. But I would rather someone else do it because I don't really have the time and that makes me sad. I really like living in a city.
00:38:08.367 - 00:38:37.827, Speaker A: I don't want to live in suburbs or rural area. I want to be able to walk places. And that's the other thing. Another thing that I like really quite a lot about European countries in general, but Norway in particular, and Oslo in particular, is that it's very walkable. Like, not only is the public transport good, but like I can actually walk to most places in the city. Like, sure, some of them might be an hour walk away, but like it's an interesting hour walk and most things are much, much closer. And I've missed walking so much.
00:38:37.827 - 00:39:16.175, Speaker A: I don't want to ever have to own a car or use a car. Okay. I'm seeing more and more tooling around WASM in Rust and also other languages. Do you think that WASM has a real future? Do you think WASM can be used outside the web realm, like for OS development as a sandboxing? I think WASM is really interesting. I think it can grow outside of web, especially for some. For things like sandboxing. I think it's a decent fit.
00:39:16.175 - 00:39:47.171, Speaker A: Same thing with cross language interoperability, right? Rather than having to go through the C abi, you might be able to go through WASM instead. And maybe that makes things nicer. I don't know. Right. Like, I still worry that there are some pretty big questions that are annoying to deal with when it comes to wasm. Things like if you want zero copy. Right? Like that's kind of hard to achieve with the way the WASM is currently set up.
00:39:47.171 - 00:40:33.829, Speaker A: It's not impossible, but. But it's kind of annoying. I also worry that with wasm, because you require a runtime, like the sandboxing now becomes the implementation of the runtime, which means you still have to implement sandboxing, which is the case elsewhere as well. But maybe it's easier because, you know, you have the, the sort of bitcode or you know, the actual webassembly that you interpret. I, I In general, I'm bullish on, on wasm, but I, I don't know that I have the hopes that it's going to take over everywhere. I think to some, some extent, it's like a, you know, we have a hammer, so everything looks like a nail, and I think a bunch of things are nails. And WASM will be a good fit, but I think we're probably overusing it, which I think is actually necessary.
00:40:33.829 - 00:41:07.471, Speaker A: Right. Like it might be. The WASM works for a bunch of things that we wouldn't have thought that they would be good for. So we gotta experiment with a bunch of things, find a bunch of things where it doesn't work, but then maybe find some really good places where it does. Okay. I've been working with Rust for about two years now, six months in my own startup, and my code still looks way too simple. I don't make much use of boxed in and other fancy stuff.
00:41:07.471 - 00:42:07.095, Speaker A: What am I doing wrong? I don't think you're doing anything wrong. I think if your code looks simple, then that's arguably the thing you want to go after. Usually the reason why boxed in comes up is and fancy stuff, as you say, right? Like it depends on what you define as fancy. What's fancy is sort of in the eye of the beholder here. But in general it tends to come up when you have to build systems that need multiple backends. And when I say backends here, I mean like, you know, you want to be interoperate across multiple types of databases, multiple types of asynchronous runtimes, multiple types of image formats, multiple types of network interfaces, like that kind of stuff. And in particular in cases where generics won't do it.
00:42:07.095 - 00:42:40.091, Speaker A: And I think that's actually kind of rare. There are a couple of places when it comes to like, futures because you don't have async in traits where you need like boxed in future. But in general, I don't use box DIN all that often myself either. I tend to just make things generic instead. But you could also argue that generics are fancy. I think ultimately the answer to this is like, you're not doing anything wrong. Like if you write code and it does the thing you want it to do, it sort of satisfies the use cases and the code is, you know, readable to others.
00:42:40.091 - 00:43:46.075, Speaker A: It's it. You don't find that it's holding you back, that the structure of the code is too hard to make changes to, then I think you're doing a fine job. I believe you previously stated that you don't want to use AI code tools like GitHub, Copilot. Have you changed your mind in any way about this? Do you not Worry that you're missing a major productivity boost? No, let me answer this in the right order. I still don't really use AI code tools. I have not really changed my mind about it and I don't worry that I'm missing out on major productivity boosts. And to dig into that a little bit more, I heard an anecdotal number from another engineer who's a fairly good engineer that experimented with, I think it was GitHub copilot for like a month or so and they found about a 20% performance or like efficiency improvement on coding tasks.
00:43:46.075 - 00:44:57.475, Speaker A: And on the overall scale of the kind of work that I do, that wouldn't really make that much of a difference, right? Like the bottleneck usually when I build things isn't my typing speed and it's usually not even like looking up interfaces and figuring out how to use them. Sometimes it is, but then it's usually for really obscure things. Like I think if you wrote a lot of code that interacts with, let's say the AWS SDK, then this might indeed save you a bunch of time because there are lots of examples of people using that API and therefore chances are the AI is going to be good at generating code that interfaces with that correctly. But like for example, I had to write some code today that uses the tree sitter language parser for Python in Rust to do some stuff to parse out comments and I might have been the first person to ever write that code. That's not a brag, it's just like I just. It was fairly under documented. It doesn't seem like it's been used all that much.
00:44:57.475 - 00:46:12.181, Speaker A: The code seems to have been kind of auto generated and for that I don't think the AI could have helped me. Maybe I should try it and see, but I don't know that it would generate something useful because it can't imitate, right? It can't draw from knowledge from elsewhere, which is sort of what AI is particularly good at, because there is no such knowledge elsewhere. And it can't really reason about the AI, about the interface, about the API, because that's not really what it does. So yeah, for the kind of things that I build, which tend to be either new developments or interactions with things that are not commonly used, I don't know that it makes that much of a difference. And obviously for a lot of the work that I do that is not coding related, like for example, doing reviews of other people's misters or PRs or your R of choice there, having copilot wouldn't help me at all. For those of you asking questions in chat, if you can put them on the question asking site, that makes it more likely that I will actually answer. Yeah.
00:46:12.181 - 00:47:03.569, Speaker A: So again, like, if it's, if it's, you know, plus 20% or 25%, but it's 25% or 20% of coding time. And again, this engineer works on different things than I do. So let's say, let's say, like if I'm going to be optimistic, let's say it got 10% faster on coding tasks. Right. And coding is, let's say, a quarter of what I do, a fifth, A quarter like actually writing code myself, then that's not that big of an improvement. And you could argue okay, but there's not really a downside. And I don't know that that's true either because the moment you start relying on tools like this, you still have to double check the things that it produces.
00:47:03.569 - 00:48:03.825, Speaker A: And this is where I'm still unsure about the benefits of this because the cost of verifying that the code it generated is correct is proportional to the amount of code that it generated, which again is proportional to how valuable it is. So the more valuable it is to you, the more time you have to spend checking that it's right. So. And I worry that if you don't check that it's right, it's going to just sneak in subtle bugs in your code that's going to, they're going to come back to bite you later, you know. Okay. And actually, I do want to point out one thing here, which is I have used other AI tools. Like for example, the other day there was, I was observing some really weird behavior with FFmpeg where I was trying to re encode some video files and I needed to, I had like an audio delay in the file that I needed to compensate for, but the standard flag I was using didn't quite.
00:48:03.825 - 00:49:00.443, Speaker A: Or I was using two flags and they interacted in a weird way. And so I asked, I think it was chatgpt I was using at the time, like, how do these flags interact? And are there any particularly weird Corner cases? And ChatGPT actually gave me like helpful pointers in terms of like, oh yeah, there's this known weird interaction between these two. So I do use these tools, but I use them for things where it's likely that other people have had similar kinds of questions or prompts. So it's actually likely that it has a useful answer for me. But for generating code, I'm much more hesitant let's see. Okay, Mark has answered. Compare Rust's concurrency model with other languages you've worked with.
00:49:00.443 - 00:49:47.581, Speaker A: What do you appreciate about Rust in this context? So it depends on what you mean by concurrency model. So there are two interpretations that come to mind. One of them is concurrency model in the sense of Async Await. Threads are spawned with closures, you know, having executors like Tokyo. And the other interpretation is like send sync, linear types, mutexes holding their inner value. Like the more type system things. I think the part of Rust that I appreciate the most when it comes to concurrency is that you can represent thread safety in the type system.
00:49:47.581 - 00:50:19.229, Speaker A: Like this basically means the send and sync traits. And just by having that, that enables you to do so many things plus linear typing. Like at most one exclusive reference at a time. That combination of things just has this. There's like an emerging emergent behavior almost where that ends up causing a lot of things to be safer. When you build in a concurrent. In a concurrent fashion.
00:50:19.229 - 00:50:44.895, Speaker A: Like, that's the reason why something like Rayon works. That you can actually take an Iterator, just call like par iter on it and now it's run in parallel. And that's wild. It's really cool. And you can only do that because thread safety is encoded in the type system. So I really like that. In terms of things like Async Await, I don't know that Rust has a particularly compelling story there compared to other ones.
00:50:44.895 - 00:51:24.241, Speaker A: Right. Like it has one that works. I don't have too many issues with it, but I don't know that it's significantly more compelling in Rust, like that part of the concurrency model. Can we do a video on embedded programming? I mean, it would be fun. I just don't really know what to build. I would also want to have an actual device that I can program. Maybe one thing that'd be fun is to get like, I don't know, like a tiny.
00:51:24.241 - 00:51:52.975, Speaker A: I'm thinking like either something that can be controlled by a Raspberry PI arguably doesn't count as embedded. You get an Arduino. But I don't know what I would hook it up to. I could get a little like, like a, you know, palm size, like remote control drone and try to get it to do something interesting. But. But I feel like I'm. I'm missing like the, the compelling use case, you know, the compelling thing to actually build.
00:51:52.975 - 00:52:16.465, Speaker A: Mmm. Yeah. If you have good ideas, then I'm willing to listen. Yeah. I saw someone actually who built a. They built a binary keyboard it's really fun. So they set up, I think it was an Arduino where they hooked up two buttons, and when you click the left one, it makes a zero, and you click the right one, it makes a one.
00:52:16.465 - 00:52:43.047, Speaker A: And the way that you type on it is you type in the binary ASCII code for the character you want to type. So when you've typed. I think they used. I think they used a byte rather than seven bits. So when you type eight binary digits, it would output a character which would be that key code. And then people complained that, oh, it's so inefficient. And so then they, they wrote a.
00:52:43.047 - 00:53:14.929, Speaker A: They. They hooked a little arm up to each button and then they had a second Arduino that was hooked up to those arms, and then they had a keyboard hooked up to that Arduino. So now you could type. If you put a key code in, if you typed a key on the actual keyboard, it would send messages to the arms to press the 0 and ones corresponding to the key code of the key you just pressed. And then that would send the key code symbol to your computer. So, like, you click a thing and it goes. And then the thing appears in your screen.
00:53:14.929 - 00:53:33.101, Speaker A: It's fantastic. Entirely useless. Entirely useless, but very fun. If I had. If I had thought of that idea, I would probably have built it. But since someone already did, then it's now less fun. Oh yeah, no latency issues at all, but I think it's really fun.
00:53:33.101 - 00:53:52.095, Speaker A: Yeah, an ESP32 would be a good place to start here too. I just, again, I don't really know what to build. CO2 sensor could be fun, but, like, I already have one. I don't need one. And maybe I should just not try to look for something I need. Train system for embedded. I don't even know what that would look like.
00:53:52.095 - 00:54:09.965, Speaker A: An E Ink screen might be cool. A live light for outside my room. That's not a bad idea. Like when I click Start streaming. Although I think. I think everyone in the house realizes, but I'm streaming anyway. Okay.
00:54:09.965 - 00:54:22.045, Speaker A: SQL functions for all application logic. No, absolutely not. Definitely don't. Do not do that. That's a terrible, terrible idea. Don't do it. Marcus answered.
00:54:22.045 - 00:54:51.305, Speaker A: Async, Iterator, Poll, Next and Generator syntax. Or just Next. I'm pretty firmly here in the camp of Poll Next and Generator syntax. I think the. That without Boat's article on this topic and the argument for why we should go with the Polnex and generator approach is very compelling. I read it and went like, yes, I agree. I think there's a lot of value.
00:54:51.305 - 00:55:30.017, Speaker A: This is similar to the Future trait. It's similar to Iterator, where I think you want the lower level, I think you want the interface to be lower level to allow more flexible implementations. And then you put sugar on top to make it nice to use. Because if you make the primitive inflexible, if you will, then now you're restricting all possible uses of them to be the ergonomic ones, which means you can't use an. You can't. There's certain things you can't do because they don't have an ergonomic expression. They require you to like manually implement a state machine.
00:55:30.017 - 00:56:43.235, Speaker A: This is what we see for the Future trait two, where, you know, sometimes you actually need to implement future yourself and write a state machine because you can't really express the thing you want to express with Async Await syntax so very much in the poll next camp. Oh yeah, the keyboard video is called I automated my bad keyboard on Reddit. Okay. How do you test concurrency bugs? Oh, I mean, this is an eternally hard problem. I, I think, you know, I have, let's say, four ways to do it. The first one is to use loom. So loom is a rust library that provides types that are named after what you have in the standard library, like atomic, usize, arc, commutex, et cetera.
00:56:43.235 - 00:57:54.553, Speaker A: But if you write your code using the loom types instead of the standard library types, then you can run tests that will test every possible concurrent interleaving of all concurrent operations using those types. It's a great way to exhaustively test your program. The downside being running it takes forever because it tries every possible execution. But it is a fantastic tool for if you have a relatively well contained set of functionality where there are not too many concurrent interactions that you want to test. The second one is a library called Shuttle, which I think was built at aws, which is sort of like loom, except it does, it sort of does fuss testing for execution traces. So rather than try every possible permutation of all the every possible interleaving of the concurrent operations, it just sort of tests a random execution and then tests another random execution and tests another random execution. What this means is that you can run tests that are much larger, but you don't get a guarantee that you've exhaustively tested them.
00:57:54.553 - 00:58:24.403, Speaker A: So it's a good way to sort of like, you can kind of like shake the tree and see if things fall down. And if nothing falls down, that doesn't mean that there are no bad apples in this metaphor in the tree. It just means that none fell down. And the harder you shake or the longer you shake, the more likely it is that you've caught the apples that were up there. But you kind of just need to like keep going for as long as you're willing to tolerate it and then stop. And then that gives you some more confidence, but not all the confidence. The third is Miri.
00:58:24.403 - 00:59:29.219, Speaker A: Now people don't normally think of Miri as a concurrency testing tool and it isn't, but Miri does have at least these days you can run multiple threads in Miri. And what Miri will effectively do is sort of run a random one. So think kind of Shuttle like, except it's not as fine grained. But the nice thing about Miri, unlike LUM and Shuttle, is that it will tell you if you did something bad. Well, what both Shuttle and Loom will do is it'll tell you if you hit any assertions, like any actual assertion or unwrap or you know, a panic and unreachable or out of bounds access and debug mode. Like anything that causes a panic, those will catch, but they will not catch if you, let's say dereferenced a pointer that didn't point to something or the pointed to like something that's been deallocated like those kinds of problems. Miri on the other end will catch those, but it will try fewer different executions.
00:59:29.219 - 01:00:00.375, Speaker A: Like each time you run Miri, it will only try one possible execution, but it does test for more things. And so running Miri is often still a good idea. Even if it doesn't shake the tree right, it's still going through it very carefully. Loom will also catch data races on unsafe cell. Yes, that's true. So it does catch a little bit more than just panics. But even so it can't check quite as many things as Miri does.
01:00:00.375 - 01:01:01.695, Speaker A: And so that's why usually you kind of want to use both. Like you might even use all three because they, they are able to test relatively different things. And then the fourth is the sort of traditional path of using thread sanitizer and address sanitizer. So these you build your program, normally you just compile your, your either your test or your binary and then you run them through the address or thread sanitizer. And what that will do is it will keep track of all of the memory accesses that happen in your program and look for things that are bad access patterns. Like if you have threads, racing taxes of value if you have. I forget all the checks in these in T, SAN and asan, but it's like if you deallocate something and then try to access the thing you deallocated.
01:01:01.695 - 01:01:44.775, Speaker A: If two threads both write to a memory location without having read it or have a barrier in between, it basically looks for like common concurrency mistakes that can be detected through access patterns of memory. So that's also a good thing to just you run your test suite through it and it might not catch everything, but it might, but it will catch something. There's also the leak sanitizer which can be sometimes helpful for this specifically to detect whether you're correctly deallocating all the memory in a concurrent setting. But that one is only useful for that. Still a good thing to catch though. Yeah. So address sanitizer and thread sanitizer.
01:01:44.775 - 01:02:26.505, Speaker A: Someone points out in chat is tricky when you have external dependencies like non rust dependencies because you have to sort of. You have to build your entire dependency tree using with something that supports Asantisan. And so if it's like built from source within one of your dependencies or something, then that can be a little annoying. So it's not a panacea, but it is useful. What social platform do you get the most value out of? That's a good question. So I did a. Actually let me pull up this document if I can find where it is.
01:02:26.505 - 01:03:47.715, Speaker A: So the other day I ran a, I ran a poll on, let me see here. I was like, I was going to give a talk and I was running a poll asking whether people would prefer to hear a talk about synchronization primitives in std, synchronization primitives in Tokyo or both or neither. And you know, ignoring what the actual answers were to the poll, I asked this poll on YouTube, Twitter, LinkedIn and Mastodon. And, and then I after the poll ended, so I give the same amount of time on each platform and after the poll ended, I looked at how many responses I got on each one and I got, let's see, 49% of the poll answers. So almost 1500 answers on YouTube. And then I got 27% on Twitter, 15% on LinkedIn and 8% on Mastodon. I didn't discount duplicates and everything, right? But the numbers are 49% YouTube, 27% Twitter, 15% LinkedIn and 8% Mastodon.
01:03:47.715 - 01:04:44.141, Speaker A: So in terms of audience interaction, being able to interact with people who watch my streams or, you know, otherwise, you know, consume the content that I make. YouTube is by far the biggest one I Don't think I can ask a poll on Twitch without streaming, so it's hard to take that into account. But like Twitter is still pretty big. LinkedIn is bigger than Mastodon is and Mastodon is actually fairly small overall, right. It's less than 10%. So in terms of interactions on that level, I think the platforms that I get the most out of our YouTube and Twitter and increasingly LinkedIn. Actually LinkedIn has been growing and Twitter has been shrinking in terms of value to me personally, I basically don't use Facebook anymore.
01:04:44.141 - 01:05:25.002, Speaker A: Facebook is still used for events mostly, right? Like if someone wants to invite a bunch of people to something, they often use Facebook for event invites. And same with messenger is still like I still use that quite a lot for communicating with, with friends and family. I also use like signal and WhatsApp but. But messenger is used a lot and then I. These days I use Twitter mostly in read only mode and even then that's. That's dropped significantly. Same thing with LinkedIn.
01:05:25.002 - 01:05:57.925, Speaker A: I've actually, I read more LinkedIn now than I did before, sort of. Twitter has gone down, LinkedIn has gone up, but not by as much as Twitter has gone down. And Mastodon. I mostly watch for like notifications when someone mentions me rather than actively reading. I also have Blue sky, but I don't post or read on there. And part of the problem now is that like there are too many things to check and so I end up just checking none of them. And I wish that wasn't the case, but it's just.
01:05:57.925 - 01:06:37.951, Speaker A: I don't know, there's nothing quite like what Twitter was and new Twitter is not what old Twitter was. And maybe that's just old Grumpy John, but it makes me sad. There was co host was the thing I used for a while, but I'm not really using that anymore. There just weren't enough people there to make it worthwhile. I think the one I have the most hope for maybe is Blue sky, but it's still too far away from critical Mass, I think. And then I use Discord for everything that has to do with particular groups. Like you know, whether that's locations near me, right.
01:06:37.951 - 01:07:20.815, Speaker A: Like there's a board game cafe not too far away. Like I'm in their Discord, obviously. The Rust Discord the, the Rustation Station Discord, the Discord for Tokyo, the Discord for like a couple of things I support on Patreon. Discords for like there's a board game that, that I help run quite often. So that has a Discord and I really like disc discord for those kinds of things for sort of group togetherness. So that one I would say I get a decent amount of value of and then, and then TikTok. Like I, I consume a decent amount of TikTok now when I'm just like idle for whatever reason.
01:07:20.815 - 01:07:56.175, Speaker A: And I get pretty good stuff on TikTok. Like it's a combination of things that are entertaining and things that are interesting. Not very much tech stuff, but like, I don't know, interesting things that people have done. Facts, history, cooking, home improvement, like all of that kind of stuff. So I've enjoyed that too. I still, I haven't now posted rust videos on TikTok for a while. Same thing with YouTube shorts, but those were fun to make and I might make some more ones.
01:07:56.175 - 01:08:31.004, Speaker A: But I also don't know whether I would call it a social platform in the same sense that the others are right because you don't really interact with people. I have a TikTok channel where people can ask me questions like a Q and A section, but I don't think anyone ever has. And so therefore I haven't posted any answer TikToks to those questions because there aren't any. So yeah, sort of all across the board. And that is part of the problem. I, I wish there were fewer, but at the same time there are big problems with there being fewer social platforms too. That's a very long winded answer.
01:08:31.004 - 01:08:59.795, Speaker A: But that's where I'm at. They use Tumblr or MySpace in their respective heydays. No, Tumblr was. I think Tumblr was more of a us thing. Like I wasn't really in the US at the time with Tumblr was big and I don't know what I used instead. Oh, Reddit I guess, is the other sort of arguably social thing that I use. I don't know why I never ended up on Tumblr.
01:08:59.795 - 01:09:43.325, Speaker A: That just wasn't really. I was really late to join Facebook as well, actually. I was a long, long holdout. And MySpace, I think I had a MySpace, but I think by the time I was interested in joining anything that looks like a. Looked like a social network at that point, Facebook had already overtaken MySpace, so there was not very much of a reason. Have you considered making your own Discord server? I have. I'm actually thinking of starting a patreon GitHub sponsors/tbd that would also have an associated Discord.
01:09:43.325 - 01:10:27.525, Speaker A: At the same time, I'm trying to find the right way to do it because I don't want to just create like an open chat forum. Like, I think there are enough of those on the Internet. And I also worried that I wouldn't engage there all that much. So I need it to be a little bit more structured and I want to figure out what that structure looks like. And if I were to start some kind of sponsorship mechanism, I would also want to think pretty carefully about both what the tiers are and who I would want to contribute to them. Like, I'm not really in a position in life where I need, like, students to send me a dollar a month like that. That's just not, not the right outcome.
01:10:27.525 - 01:10:55.877, Speaker A: But at the same time, I also don't think that I would offer, like, ongoing rewards. That doesn't really make sense given the way that I do work. Like, for example, I wouldn't want to make my educational videos be only accessible to people who support me. I want them to be publicly available. But if I do that, then the incentive to support me is also lower. And so how to straddle that boundary, I don't really know yet. But it is something that I think is probably going to happen pretty soon.
01:10:55.877 - 01:11:31.485, Speaker A: I just don't know exactly how and when yet. Okay, answered. What are your thoughts on the Rust foundation developing an official training and certification program? I think it's really cool. I think this is something that I hear a lot from both individuals and companies that they don't know how to ramp people up on Rust. There's not like an officially or not even officially. There's not. There's not a well vetted and well trodden path for teaching people Rust.
01:11:31.485 - 01:12:03.239, Speaker A: And I think that having like an official training program and a certification program does get you a little bit in that direction. Certification I'm less sure about. Like, I have. I think I struggle sometimes to see the value in certification because I think it's tends to reward memorization more so than anything else. And memorization does not make you good at the thing that you got certified in. But training I see is pretty valuable. The.
01:12:03.239 - 01:12:45.417, Speaker A: The thing I would be hesitant about is that, like, if the foundation ends up with like a. The only way to get trained with Rust is through our program. I don't think they're going that way. I think they're just saying, like, here is one that we have vetted and we think is good, but that seems pretty valuable. I think there's a lot of desire to have something like that and in particular to have something like that, that sort of scales as the world adopts Rust. There are some companies that offer Rust training, but they're fairly small and limited in capacity. So the problem becomes, as the world adopts Rust more, you can't lean on two companies in Europe or whatever.
01:12:45.417 - 01:13:27.885, Speaker A: It ends up being, um, that has like, I don't know, like, who. Which of these companies? Like Integer32 and Ferris Systems, I think both do training, but I think they have like 10 employees each. Maybe. I'm guessing here, but, like, that obviously doesn't scale to training the whole world. Um, and so I'd be curious to see how the foundation tackles that. Like, how do you. How do you grow this in a way where you don't have to hire thousands of people to do training, but you still manage to scale according to the demand? Yeah.
01:13:27.885 - 01:13:50.403, Speaker A: Like, certification certainly feels a lot like sort of corporate gatekeeping. I think, I think. I agree with that. I think some of them can have some value, but I would need to be convinced individually for each certification. But at the same time, you know, if that's a. If that's a way, like, the flip side of this, right. Is if that is a way to channel money from companies into Rust.
01:13:50.403 - 01:14:08.375, Speaker A: The language is to offer certification. Sure. I mean, let's. Let's play the business game. Right. I think one of the things that I think Rust has struggled with both the foundation, but also Rust as a community, is how to get money. Right.
01:14:08.375 - 01:14:35.327, Speaker A: Like these. Like a programming language does not thrive on, like, well wishes and happiness. Right. Like, that money needs to come from somewhere, and companies are hesitant to give up money for nothing. And so the question is, what do you give them in return? And it might be that certifications is one answer to that. So even if we collectively kind of agree that they don't matter that much if companies value them, or maybe even they don't value them, but they. It's.
01:14:35.327 - 01:14:59.119, Speaker A: It's a valid excuse for giving money to the language. Then I'm all for it. Corporations got to corporate. Yeah, that's true. What do you think about the state of the Rust Foundation? It seems there's some really bad influences. You know, I. I feel like I get this question too, almost every stream, which is like, oh, the Rust foundation, the Rust Foundation, Rust Foundation.
01:14:59.119 - 01:15:52.069, Speaker A: I'm actually pretty happy with the Rust Foundation. Like, they've had a couple of missteps here and there, but none that I actually see as that fundamental. I think it's more that the community is trying to hold them to. A bar that doesn't exist is part of it, and the community doesn't all agree on what they want. And I'm interpreting community here pretty broadly, not just vocal people on Reddit, but if you take into account maintainers of projects, both small and large communities on different platforms. That includes like Zulip, Reddit, the Rust users forum, the Rust discord people on, you know, the various social platforms, but also like the small and large businesses that are using Rust. All of them make up the Rust community and then all of the engineers just used Rust.
01:15:52.069 - 01:16:36.657, Speaker A: And, and if you look at it at that scale, I don't think the foundation has actually done that many things that are bad for that community. But what they're trying to do is satisfy an absolutely impossible union of demands. There's just no way you can satisfy all of those people with anything that you do. And so my impression is that they're kind of doing the best that they can and I think what they're doing is pretty good. So that's my, that's my take there. Okay, answered. Why don't you use a MacBook? Is Linux actually that good? Can you do a set up your neovim livestream? Your previous one was old, my previous one is old.
01:16:36.657 - 01:16:55.741, Speaker A: I promises every stream that I'm going to do one and I will. I just. Yeah, I know, I just need to do it one of these days. There'll be a new stream about my setup. All my configs are online on GitHub though. It's like GitHub.com John who configs and yeah, I think Linux is that good.
01:16:55.741 - 01:17:46.657, Speaker A: It does require more work to get it to the place where you want it to go or the way that you want it to behave and look. Certainly it's like much less plug in. You can get a plug and play experience with Linux too, but the plug and play experience I think is worse, but the customized experience is much closer to the ideal. Whereas with macOS for example, the plug and play experience is pretty good, but you can't really customize it to get it close to your ideal. I think that is the difference. So the question is just whether you're willing to spend the time and effort to learn and configure and make mistakes to get closer to your ideal. Speculation in chat about how old I am.
01:17:46.657 - 01:18:08.667, Speaker A: I am 34. I turn. I turned 34 on December 7th. Am I roughly 40? I feel like that's a, that's an overstatement. I'm not roughly 40. That's excessive. I We definitely need Rust to be qualified for space avionics.
01:18:08.667 - 01:18:57.015, Speaker A: Is ferrocene the right starting point. So Ferrocene is the new certified Rust compiler that came out of Ferrous systems and I think Ferocine is targeting an important but very particular use case. It's not as though you need to use Ferrosene in order to do space slash avionics things with Rust. It's more that if you need to build systems that are certified, then you might need to have a compiler that has been certified. And Ferrocene is a Rust compiler that has been certified. It is to my knowledge, basically just an older version of Rust that has more testing done to it and has actually gotten through the certification process. Right.
01:18:57.015 - 01:19:50.425, Speaker A: Like they've written up all the documents, they've written up the spec, they've, you know, gone through it with a fine tooth comb and it's basically going to lag behind Rust a little bit because the work to certify incremental changes to the compiler is a bunch of work. I also forget, but I think, I don't think the standard library is certified. I forget exactly. There's some caveats to this but, but ultimately the answer is should be that you can use Rust for space nevionics. Like you can use it for like, let's call it sensitive domains or critical domains. So, so the, the need for a certified compiler is only really if you need certification and if that certification requires your compiler to be certified. And those two ifs are pretty important and a lot of cases will not require both.
01:19:50.425 - 01:20:32.691, Speaker A: So I'm very happy that we have a certified compiler. I do, I do think it unlocks real use cases, like real places where you couldn't use Rust because it didn't have a certified compiler. But there are fewer such cases than you might think. And there are ways, like there are cases where you can get certain kinds of certifications without needing your compiler to be certified, basically that you need the like. Some certifications only require that the output is certified. Like the binary you produce is certified. They do not necessarily require that the means to get to that output is certified.
01:20:32.691 - 01:21:10.345, Speaker A: So I. E. The compiler, the send library, the beard is plus 60 years. That's funny. Let's see, they're trying to compete with ADA and aerospace certification. I don't know that they're trying to compete necessarily. So if anything, I seem to remember that there was actually a, like a sort of a collaboration setup or partnership of some kind between Fair Systems and ada.
01:21:10.345 - 01:21:47.839, Speaker A: I feel like I remember something about a blog post in that regard. So I don't think it's actually competing as much as it's saying now you can use a different language as well. And I think there's value in that. What exactly is an ISO certification? Who depends on the ISO standard? There are a lot of certifications that all mean wildly different things. There's not really such a thing as certified. Like that word on its own does not mean anything. It's always certified to a particular standard.
01:21:47.839 - 01:22:22.535, Speaker A: And what the different standards require is that they're all over the place in terms of the actual requirements. Yeah, that, that, that matches what I, what I remember. The Fair scene is a collaboration between ADA and Fair systems. That sounds about right. And often times you like if you, if you have the inputs to your system be certified, it's easier to certify the output. But you can often, often not always certify just the output without having to have certified inputs. This is a matter of making this easier.
01:22:22.535 - 01:23:05.175, Speaker A: Okay, Mark's answered. How is your experience of the culture, work life balance and leadership style there? Oh, the Glassdoor reviews of Hellsing are really concerning. So I remember I looked at the Glassdoor reviews of Hellsing before I first joined. Let me go see here. Glassdoor Helsing reviews. Let's go look. Sort by lowest rating.
01:23:05.175 - 01:23:39.685, Speaker A: Just the summary isn't too bad. 80% approved of CEO 4.1. I'm curious what they're talking about. Okay, sort by worst Leadership by fear not inspiration. Oh, I guess I can, I can share my screen maybe try this. See, I knew this Wayland is being unhelpful with me today. I have to do this for it to realize that I want to share my screen.
01:23:39.685 - 01:24:14.521, Speaker A: Okay, so I'm on the Helsing Glassdoor page. This is again reminder sorted by lowest rating. Leadership by fear, not by inspiration and motivation. I mean I can't say I've experienced this myself. Okay, so this is like basically work life balance. The cost of health and social life. Okay, so this is basically a complaint about work life balance.
01:24:14.521 - 01:24:57.923, Speaker A: I'm just trying to get like a sense of what the good and bad ones are. Extreme pressure, very tight deadlines. Okay, so a lot of work positive reviews are not true. Okay, I think I already disagree with that because I think my review would be positive and would be genuine high pressure and feasible deadlines. Okay, so this seems to be a general positive of talent and commitment and compensation. But work life balance seems to be the main complaint for the sort of one stars here. Yeah, curiosity and awareness of other projects and teams than your own is seen as a bad thing.
01:24:57.923 - 01:25:20.217, Speaker A: I. I've actually experienced the opposite but. But that's something that's changed I think recently. Yeah. So this is a former employee. I suppose so Hellsing was very much in sort of demo mode right. Where they were trying to, you know, figure out what things are most needed, what things most to build.
01:25:20.217 - 01:26:05.837, Speaker A: And that caused everyone to sort of building a demo with their own team. But I think that's changing now that Helsing has started, you know, landing bigger contracts and stuff. Is that now there is more cross pollination, cooperation between teams because that's what you need in order to build large scale systems that interoperate well. So this I think is a past thing over time work hours constantly firing people without giving them a chance to improve first. I mean this I don't have any insight into in transparent management. Don't receive feedback in this is also a former employee. Okay.
01:26:05.837 - 01:26:15.485, Speaker A: Curious how long. Okay. It's in January. Okay. So it sounds like it's mainly work, life balance and leadership. Yeah. Because now.
01:26:15.485 - 01:26:56.479, Speaker A: Okay, so now we go from we were once, then we have 1, 3 and then we have fours. So getting back to the question, the question being how's your experience about culture, work, life balance and leadership? Okay, so those are the things that sort of get brought up. Not so much culture, but work life balance and leadership. So I mean I can only really speak to my experience here in terms of work life balance. I haven't really experienced it being. I haven't experienced there being a lot of actual pressure. I think the pressure that there is is mostly self inflicted maybe.
01:26:56.479 - 01:27:20.939, Speaker A: So to give a little bit of context, Helsing grew fairly quickly. But it is a startup. It started two years ago or so. And so as a result there's just a lot to build. When you're a relatively young company that means that a lot of the technology that you, that lies in your future, you have yet to build. So there's just a lot of things to build everywhere. There's a lot of things to improve everywhere.
01:27:20.939 - 01:27:53.569, Speaker A: And that can often result in a feeling of there's so much to do, I have to go do all of it. And I think that second part of like I have to work really hard to get all the things done is unhealthy. Unhealthy, but also I think often internal. So there are two ways in which this can manifest. Right. One of them is your manager tells you you have to do this by this weekend or you know, if you don't do things by the time that they expect and they set very tight deadlines, if you don't do it. By that time you get sort of scolded for it.
01:27:53.569 - 01:28:23.723, Speaker A: I haven't experienced that at all. Like I work, you know, basically nine to five every every weekday and then I sign off and that's okay. I haven't, I haven't had any pressure back on that. Again, my experience, I can't really speak to others, but I haven't felt any sort of condemnation for not working more. I totally feel that there's a bunch more stuff I could do. Like I could work 247 and still not get through all the things that I have to do. There's a.
01:28:23.723 - 01:28:56.549, Speaker A: There's a lot of things on my to do list and so I could see how one might feel that there's a lot of work and feel that there's pressure. But I don't think that pressure is actually manifested in like external pressure. I think it's more internal pressure. But. But I also haven't worked in every team with every manager. So it's hard for me to say. It is true though that Hellsing is very ambitious and is a company that, you know, builds ambitious technology that requires a lot of work.
01:28:56.549 - 01:29:50.485, Speaker A: But, but I think the way to handle that is if you get unreasonable deadlines, push back and say that is unreasonable. To essentially give back pressure to the system to say you can't just squeeze your people more, you need to hire more people. And whenever I push back, if I feel like a deadline is too tight, I feel that the response is usually understanding and not criticism, which to me is a good indicator here. But of course that does mean that if you don't push back, maybe because you don't feel comfortable pushing back or it's not really in your personality to do so, then obviously that would manifest as you just keep taking on more and more work. It's a very easy thing to default to. And it does require a little bit of like resistance internally in yourself to say no. And then that gets easier when you discover that saying no is actually okay.
01:29:50.485 - 01:30:34.721, Speaker A: That doesn't release a company or a manager from all responsibility. Right. Like you should still make sure that it's an environment where people feel, feel safe saying no, this is unreasonable or I'm working too much or pick it up proactively if someone is working too much and I've seen some of that at Hellsing already where people are pretty good about picking those things up. But again, a lot of these things end up being in one to one interactions which I don't have insight into. Other people's one on one interactions Right. But again, this is not a pattern that I recognize in my interactions at Helsing. And then there were a couple here just about like in transparent leadership.
01:30:34.721 - 01:30:54.539, Speaker A: I haven't found them to be in transparent at all. Like we have all hands once a month where all of the sort of senior leadership at the company is present. You can ask questions. There are relatively few questions. I think maybe people are hesitant to ask questions such an open forum. So maybe that is a. I think that could be addressed.
01:30:54.539 - 01:31:32.525, Speaker A: But in general I've, I've found that when I raise things they get answered. Questions I ask get answered. I can ask candid questions to get candid answers. So, so I don't think I've, I've experienced really in transparency there. There's a caveat to this which is, you know, housing does work on some things that are confidential. So there are some things that you don't get to know about or you don't get to know about until they become public. But, but even there, I don't think I've come across anything, at least in my time there that's been like concerning when it came out.
01:31:32.525 - 01:32:11.895, Speaker A: So hard to say. But, but ultimately I think none of these are none of the sort of couple of one star things. Here are things that I have experienced or seen and to be clear, if I did see them I would call them out and be like this is a problem. But, but I can't say that I really have. Is it considered a small or mid sized business? I don't know. I don't know what the, the thresholds are there. We're, I think Helsing is now like 250 people.
01:32:11.895 - 01:32:35.151, Speaker A: So I guess that's maybe mid size. Right. It's arguably not small anymore. Do you work 100% remote? Kind of. So I work fully remote from Norway, but I go to one of the Helsing offices once a month maybe particular to London and Munich. So that could be part of this too. Right.
01:32:35.151 - 01:33:44.755, Speaker A: Like I'm not in the offices regularly so maybe I don't see some of this, but I don't know. I don't know that being there in person would change my visibility into things like this. My work has recently transitioned from small to midsize. Coming with that has been more HR involvement and a ton more policy work agreements to sign. No performance reviews yet, but I'm sure they'll be coming. So I think this is something that Helsing did right from fairly early on is that there is a process for performance reviews and has been for a While there is a people department, like an HR department, that deal with a lot of the sort of making sure that people are treated well, that we have processes in place for if people aren't treated well, and that there's, you know, transparency into how roles are assigned, performance reviews are done, all of that sort of stuff. So we've had that certainly since I joined and I don't think it was new when I joined.
01:33:44.755 - 01:34:34.555, Speaker A: So. So in that sense, I guess based on your earlier question that it is mid size or, or more mature maybe micromanagement and managers disappear, which is it? Yeah, I saw that, that there was one of them was micromanagement. I haven't really seen that much micromanagement either. Although Hellsing has a little bit of an odd setup where we have the tech leads. So the people who lead a team are also themselves technical contributors. We don't have managers in quite the traditional sense of the word. And that does mean that the people who lead a team who have sort of leadership response, technical leadership responsibilities, are also engineers and will, you know, dive into the code with you.
01:34:34.555 - 01:35:19.635, Speaker A: And that might feel like micromanaging, but. But I haven't really experienced like what I would actually call micromanaging, which is like telling you exactly how to do everything. Okay, let me see if I can now go back to this one. Should now see my face again. Amazing update to your setup. Yeah, I know, I know, I know, I know, I know, I know. The role of principal engineer, how deep are you involved in specifics and projects? Is there nothing about project management like budget resourcing at all? Sounds like a dream.
01:35:19.635 - 01:36:27.291, Speaker A: So what principal engineer means varies from company to company and from person to person. I don't think all principal engineers do the same thing across companies or even within a company. That said, it is a role that I really enjoy because it tends to include both technical work on right code level, but also technical work on the sort of strategy side. Like are we building the right thing? Are we building it at the right time? Are we building the right thing for the future? Like those kinds of more strategical questions. Also technical architecture, right? Like is this how these set of programs should be interacting or should be built but then also factoring more into the sort of human aspect of engineering. Right. Of do we have the right process for people to figure out how they're performing, how we evaluate their performance, how we promote people, for example, how we hire people.
01:36:27.291 - 01:37:20.645, Speaker A: And I don't mean that in the sense of all the HR processes, but more like as a principal engineer, I have A little bit more leeway to look at like one step higher. Right. If we look at, I don't know, hiring, for example, at Amazon, if I thought hiring was being done wrong, like, I don't think we should be hiring by asking these types of questions. The chance of me having an impact on that is basically zero. At Helsing, as a principal engineer, I have a lot of leeway to sort of start conversations there and try to actually make a difference and make changes. And that's partially a result of the company being smaller, partially a result of it being smaller, and partially a result of being a principal engineer, which allows me to sort of float around. The other thing that I really like about it is I get to observe a bunch of teams and sometimes I come with advice to them and whatnot.
01:37:20.645 - 01:39:07.347, Speaker A: But more importantly, I get to observe things that don't work in multiple teams or that work well in multiple teams but aren't really shared. And then I can go and do a thing on my own to help all those teams at once. I can try to identify opportunities like cross team or cross organization opportunities, and then try to implement solutions for them, whether those are technical or process wise. If I discover that lots of teams are making strategic errors about how to make long term planning, maybe I can come up with a better way to sort of a rubric for how you calculate what things you should be working on next. If I observe that lots of teams are getting high incoming support load on Slack, maybe I can look into, can we build some tools to better handle support requests so that they don't all just like ping individual engineers on Slack, but also technical ones? Like, you know, if I find the teams are not very good about documenting the reasoning behind technical decisions that they make, especially larger technical decisions that they make, can I build technical tools that make it easier for them to document those things, review those things and observe them over time, in retrospect on them? If I observe that lots of teams are having too many meetings, can I do something about that? If I observe that at the company we're writing comments wrong or people are commenting their code suboptimally, you know, I could write an internal blog post talking about how I write comments. And so I think being a principal engineer gives you a lot of that ability to go where the pain is greatest or where the potential impact is the highest. And yeah, I mean, I, I enjoy that a lot.
01:39:07.347 - 01:39:38.425, Speaker A: I enjoy that flexibility a lot. Okay. Neovim Vanilla for Rust? No. Astro Vim or Space Vim or Helix? No, I'm just using vanilla neovim and then a couple of plugins again. My. My config is on GitHub but it's mostly I use. It's called airline, like that bar at the bottom.
01:39:38.425 - 01:40:17.805, Speaker A: I use Control P, although I don't know if it's actually Control P. It's some variant of it that gives you like the quick open, which to me is tied to. Tied to. What is that called? The little tool that gives you fuzzy finding. Fcf. I think it's fcf. Yeah, fcf.
01:40:17.805 - 01:40:54.253, Speaker A: So I use that as sort of a quick opener with a couple of like a little bit of logic around it to give me better autocomplete. And then I have. I use the native neovim LSP to give me syntax highlighting and auto completion stuff with Rust analyzer. That's all I really use. Like I don't use lots of plugins for it. And then I have like I have a config file where I've configured everything the way that I want it to be. Someone said check the comments.
01:40:54.253 - 01:41:14.577, Speaker A: People are telling you FCF. The problem is the comments are delayed by like 10 to 15 seconds. So I didn't. Those didn't come up in chat until I'd already said what it was. But yeah, so I haven't really needed a. Any of the sort of bigger. Here's a full configuration things.
01:41:14.577 - 01:41:41.771, Speaker A: I'm pretty happy with the one I have. Will Rust 2.0 be just another release or will it be different? I don't know that we'll ever see a Rust 2.0. I think we might actually only ever see one. X versions. I think if we see a 2.0 it would have to be like some dramatic new compute paradigm.
01:41:41.771 - 01:42:07.645, Speaker A: Like maybe Rust 2.0 supports quantum computers. In order to do that, like the whole language has to change or like something fundamental in the language has to change. That can change on an addition boundary. But I don't really see a path to Rust 2.0 in any, you know, short term, medium term, even long term. I have my reservations.
01:42:07.645 - 01:42:47.351, Speaker A: I'm in the web industry and use Rust in my work. But for my future career I would like to work around the Rust ecosystem, not in a web services company. Do you have any advice on such. How to get such a job? It's pretty hard to work full time on a part of the Rust ecosystem. Like even at companies that invest pretty heavily in the ecosystem. Like let's think of like Embark Studios for example, the game studio. Like they maintain Cargo Deny.
01:42:47.351 - 01:43:43.327, Speaker A: And I think that they have a couple of like, you know, David Peterson is, is who works at Embark, is also the maintainer of Axum and obviously does a lot of work there as part of his, his work. But even there, you know, he's sort of an exception, not the rule. Like, generally a company is not willing to have most of their engineer time be spent on the ecosystem because ultimately they're selling some kind of product. And most of the people, most of the investment needs to be spent on that. So I think if you want to work full time on things in the ecosystem, there are fairly few places you could go or you would need to find a place where the company relies pretty heavily on something in the ecosystem. And you can make an argument that you should be the person to help maintain that dependency for the company. And those are hard arguments to make for all but larger companies.
01:43:43.327 - 01:44:40.095, Speaker A: Or if it's a small company, it has to have a very heavy reliance on some part of the ecosystem. I think the more realistic path to take here is, you know, look for a company that has reasonably tight integration with something in the ecosystem. Finding that out from the outside can be hard, but. But if you find somewhere where they both have a relatively positive attitude to open source, ideally, like, you see other people contributing two things in open source from that community, like two things in the rust ecosystem specifically, that's a good indicator. And then when you come in, try to find ways where you can deliver value for the company by doing something in the ecosystem. I don't really know of places where you would get to just work in the ecosystem. At least not off the top of my head.
01:44:40.095 - 01:45:31.399, Speaker A: If I remember correctly, you mentioned that Helsing utilizes nyx, which you haven't done before. What do you think of nix now? Okay, so I've already answered this one. Why so few rust jobs? I don't actually think there are few rust jobs. I think I've gotten this question a few times too. And I think the reality of the situation is that there are. There are a lot of relatively junior, let's call them non senior engineers looking for rust jobs. And there are more non senior rust people looking for rust jobs than there are rust jobs.
01:45:31.399 - 01:45:58.619, Speaker A: I think in general. So. So some of the trickiness here is that, you know, if you, if you talk to companies, they say, oh, we struggle to hire rust people. If you talk to the community, they go, oh, it's so hard to find rust jobs. And I think it's actually a mismatch of seniority. I think what companies are saying is it's hard to find senior Rust people. And I think what people in the community are saying is as a non senior person, it's hard for me to find Rust jobs.
01:45:58.619 - 01:46:10.003, Speaker A: And so both of those are kind of true. Like they can be true at the same time because they're different pools of people. This is speculation on my part. Like it's not. I don't know that this is true. I don't have the data. But.
01:46:10.003 - 01:47:05.525, Speaker A: But this is the general pattern I've seen. And I think the answer for companies is to look for, to be willing to hire people who are senior engineers but not necessarily senior in rust or people who are senior in rust but not necessarily senior engineers. The latter is actually a riskier bet. Like it's. It's riskier to hire someone who has lots of Rust experience but very little sort of senior engineer experience. It's probably better for the health of the company to hire someone who is a. Hire someone who is a experienced engineer, like a senior engineer with that kind of experience and expertise and then have them just learn Rust on the job than the other way around.
01:47:05.525 - 01:48:14.535, Speaker A: At the same time they also need to be more willing to hire less senior people who will be less experienced and will be less good at what they do from the get go and then be willing to train them. So I would. I think part of the problem here is on the company side of things and then I think the on the people side of things there's not really a great answer to this, right? Like if companies aren't willing to hire non senior people, then if you are a non senior person, it's going to be hard. In reality, I think the path here is more one of be willing to apply a little bit above what your experience indicates, right? Like be willing to stretch yourself a little bit in terms of what you apply for. You might be rejected more often, but it is probably the right thing to do. Like you might need to apply for things that look a little more senior than you are and then, you know, stretch and sometimes fail. But I might be the need.
01:48:14.535 - 01:49:03.005, Speaker A: It is true. Like there's a real risk that if someone is a senior engineer from another language and then they try to just learn Rust, that they're going to like just transfer the knowledge they have from other programming languages and just use those patterns in Rust too. Like object oriented programming being a good example of this. That does happen and it is a risk, but it's a risk that you should keep in mind and still be willing to tolerate and then counter if it comes up. Let's see. How do you know if someone's senior? That's a great question. I don't have an answer to that.
01:49:03.005 - 01:50:00.685, Speaker A: Let's see. Okay, I see people cheating on the votes, so I'm going to hide some questions. Mark is answered continue already be assumed without being earned. Cross language. It's tough, like it's really, really tough to figure out whether someone who is senior in one language is likely to be seen or be well suited to be a senior in a different language. There's no clear answer to that one. I think my general answer to this one is if someone isn't able to transfer to transfer their expertise across languages, they're probably not senior in the first place.
01:50:00.685 - 01:50:31.539, Speaker A: Not that that's helpful in hiring, but I think it is true. Let's see. Favorite book. Ooh, it really depends though because like I have favorite books in a lot of different categories. Like, you know, my favorite book, my favorite fiction book is very different from my favorite non fiction book and I wouldn't want to pick between them. I think my favorite books of fiction is. I really like the Wheel of Time series.
01:50:31.539 - 01:51:18.955, Speaker A: The, the books are great. I've read them now like three times. In terms of non fiction, I really liked. What was it called? It's a book called the Code Book by Simon Singh and it's about cryptography, but like the beginnings of cryptography. And it's a very, it's a book that's written to like teach you, not like public key crypto and stuff, but more like substitution ciphers, like the origins of cryptography. And it's a fascinating sort of exploration of that world that shows you how, how it works and how to break it. I thought that was a really interesting read.
01:51:18.955 - 01:52:06.399, Speaker A: There's also a book by Nicholas Epley called Mind Wise. It's sort of a pop psychology book, but I thought it was really interesting. Look at, you know, the, the ways in which we see other people, the ways in which we try and fail to infer things about what other people think and feel. And then it like presents a bunch of interesting results from research studies and stuff that I thought was interesting. I think those are like the, the first few that come to mind. Yeah, let's. Those are.
01:52:06.399 - 01:52:31.839, Speaker A: That's a good sampling. Is Wheel of Time actually any good or does it take too much time to get into? I, I think it's actually good. I. There's. So there are a couple of books in the middle that people tend to say are kind of slow. I enjoy them, but I, I think it's a little like the, the series is long enough that it goes through like, different type of book. Almost like the middle ones are more like political intrigue.
01:52:31.839 - 01:53:05.965, Speaker A: The early ones are more like, you know, journey Away from Home, Discovering magic, that kind of stuff. And then the last ones are like epic fantasy. And so they read very differently. I happen to enjoy all three. And then the book is also like, it starts very small and local and the middle ones are like, very broad in terms of, like, what geographical setting they're set in. Like, the, the world sort of opens up and then towards the end it like closes in again and everything gets brought back together. I, I think they're great.
01:53:05.965 - 01:53:33.635, Speaker A: And I. Unlike, for example, some of the, like Stormlight Archive by Brandon Sanderson, which I think is pretty decent, but that one took me ages to actually get into. Like, I felt like it just took forever to get started. Whereas with Wheel of Time, I did not have that experience. I sort of enjoyed it from the early, from the early beginnings. There are other Sanderson books that I really like, though. Like Mistborn, for example, I thought was pretty good.
01:53:33.635 - 01:54:41.695, Speaker A: There's also one by what's. Victoria Schwab wrote a book called A Darker Shade of Magic that is also really good. All sorts of cool fantasy books. Okay. What is the biggest cultural difference of working in the EU versus the US in terms of working culture? I don't know that I see that much of a difference. Well, one often stated difference is that Europeans, and this is very broadly speaking, but Europeans tend to be more willing to work less or more eager to work less and to keep a sort of more healthy work life balance. Maybe, but at the same time, I don't know that that's something where I've particularly.
01:54:41.695 - 01:55:37.805, Speaker A: I, I don't think I've really gotten that impression both because I feel like when I was working at Amazon, there were people in the US who worked what I would say conservatively. Right. Like, they worked the sort of normal hours and didn't really struggle to keep work life balance. And there were also people in Europe, again with Amazon, who I would consider us working too much. And same thing now at Helsing. Like, I think there's a, there's like a variety of, let's say, leanings when it comes to work life balance, whether, you know, some people work less, some people work more. And I, I don't really see a big difference there.
01:55:37.805 - 01:56:17.845, Speaker A: I. I think one thing I've maybe noticed is that, you know, employee protections are better in Europe. This depends on the country, but certainly in In Norway, Germany, France, the like, your contract is like less adversarial. You have more rights as an employee. You have things like notice periods and those things make a difference. There's like more things that you and the company have to do in order to, you know, safeguard your, your rights as an employee. And I like that.
01:56:17.845 - 01:57:07.681, Speaker A: I, I don't know that it really affects the experience of working though, like in the day to day it doesn't make that much of a difference. Yeah, and I guess this feeds into the next question, which is what did you like about Amazon? Dislike compared to Hellsing? So Amazon, Amazon is very large. Like very, very large. Even AWS very large. Hellsing is much smaller. I get Hellsing. I don't want to claim that I know everyone at Helsinki, but I know a good proportion of the people who work there.
01:57:07.681 - 01:57:52.265, Speaker A: I have a fairly short path to the people who are the leadership at the company. At aws, that was obviously not true. There was what, six people between me and like the CEO. Right? Like that's pretty far. If you think about just the sizes of the trees involved here, it means that it's much harder to have to affect meaningful change across the company. It also means that everything, especially anything that involves other teams is much more work. It's much more of a heavy lift, it's much more of a long term commitment.
01:57:52.265 - 01:58:27.435, Speaker A: And so I'm, I'm, I enjoy much more being in a company where I feel like I can make more of a difference at the same time. One thing that was nice about Amazon was that you have so many people working there that in general, if you need an expert on anything, you can find them internally and that means you can reach out to them. That's not as true at Helsing. Right. Like it's a smaller company. There aren't like world experts on everything. Like I'm among the most senior people at the company sort of engineering wise.
01:58:27.435 - 01:59:05.195, Speaker A: And you know, it's nice to be able to reach out to, you know, people who've been into the industry in like 30 for 30 years. Not always, but sometimes that can be nice. Amazon has a lot more process for things as well. Helsing has much less. And that's partially, partially because of age, partially because of size. So that might change over time, but I'm glad to be rid of some of that at least as well. One thing I actually quite like about Amazon is the leadership principles.
01:59:05.195 - 01:59:35.235, Speaker A: I think there's a bunch of stuff I don't like about them and in particular about how they're applied or how they are selectively applied. Like sometimes people hold you to it and then other parts of the company or other higher parts in the company are not held to them. And that bothers me. But, but in. I like the principle of them and I like the phrasing of many of them. I think they, they're, they're. Many of them are right.
01:59:35.235 - 02:00:12.895, Speaker A: Somehow they resonate with me. Helsing doesn't quite have something comparable like Helsing does have a set of like value company values, but, but they don't have the same, I don't know, weight and anchoring effect as they did at Amazon. They're not as much part of like the institutional muscle. And I would like to see more of that at Helsinki. And obviously like the stuff that I work at or work on at the two companies is quite different. Right. At Amazon there's a lot of build systems, whereas at Helsing it's more like distributed systems.
02:00:12.895 - 02:00:47.145, Speaker A: So that's obviously different. But you know, I could have worked on distributed systems at Amazon. I could have worked at Bill Systems at Helsing. Does Helsing have a no vampire policy? No, no, no, no. Vampires are welcome. What do you do while waiting for Rust to compile on a big code base? You know, this is not a problem I have very often because usually my compilers are incremental. Incremental compiles are fast.
02:00:47.145 - 02:01:41.055, Speaker A: If I do build something that actually takes a while to build, like I'll just switch to my browser and I have like, I'm not exaggerating, like probably 250 tabs open that are all collectively sort of my work to do list. And so I will go do something else in the meantime or you know, check one of the bajillion slacks or something like it. But it is not normally a problem that I have. How do you feel about mathematics and computer science? I like mathematics. I like being able to express things in symbols and formulas. I actually had a problem a month or two ago at work that I ended up solving using set theory. Like it was a.
02:01:41.055 - 02:02:48.495, Speaker A: The details aren't terribly important, but I had to optimize some code that affect like the code didn't know that it was doing set operations, but it was. And so it could be expressed as a set computation problem. And so I could apply some basically the set equivalent of de Morgan's laws to do transformations to allow us to cache a part of the computation more efficiently and therefore get the overall operation to be like order of the difference rather than order of the size of the, of the biggest set. And so that was really. I like that kind of work where you can just like, use something from maths to make computers better. Comes up fairly rarely, but I enjoy it when it happens. When it comes to more like the things like runtime complexity analysis, which also arguably is maths, you know, I, I think there's value in having a general sense of how something scales with size.
02:02:48.495 - 02:03:48.969, Speaker A: I'm not one of those where, like, you need to be able to like, tell me offhand what the runtime and storage complexity of all of your data structures and algorithms are. I don't think that's terribly important. But having a general framework for it and a general understanding, I think useful. If you had kids, would you want them to grow up in the US or in Nordic countries? Nordic countries, not even a shadow of a doubt. I would not want to raise kids in the US There's a whole bunch of reasons for that, ranging from healthcare to walkability of the city to public transport to safety in communities to gun control to abortion access to like, I don't even. Employee rights. I.
02:03:48.969 - 02:04:50.169, Speaker A: There's just not even a question in my mind that I would much rather raise them in a Nordic country. I think raising kids in the US is a. I'm not going to go so far as to say it's immoral because that's just blatantly false and. Hyperbole, hyperbole, hyperbole. I just, like, I don't envy anyone who raises their kids in the US And I don't envy the kids being raised in the US that's not for me. And, and I think it's hard, it's hard to, like, I can list a bunch of things, but it's like, hard to really appreciate until you've not lived in the US to see how different it is. But like, I, I just, yeah, the, the, the, the thought of raising kids in the US just has me, I has me.
02:04:50.169 - 02:05:01.937, Speaker A: Has my skin crawling. Oh yeah, student debt. That's another one. Yeah. Like, for example, I did my. So I did a year of my bachelor's degree in Oslo. I did not pay anything.
02:05:01.937 - 02:05:38.915, Speaker A: And then I did a bachelor's degree in Australia which the Norwegian government paid for. And I ended up with like a, it's like a student loan to the government that like, covered my entire education. And part of it is a stipend and part of it is a loan. And the part that's a loan is like the lowest possible interest rate. And also you don't have to pay it if you don't work. So it's just like the most ideal loan you can get. And that enabled me to like, study elsewhere.
02:05:38.915 - 02:06:01.585, Speaker A: Right. It enabled me to broaden my horizons and enabled me to. If I had stayed in Norway, my education would actually just be free. I would have no loans. It was only because I chose to go internationally that I accumulated a little bit of debt or sort of a student loan there. But just the fact that everyone can get an education in the country, that alone is worth it. Right.
02:06:01.585 - 02:06:47.225, Speaker A: And to be clear, I'm not claiming that the US is worse than everywhere else on the planet, except, like, there are places where it's worth worse to raise your kids than the US too. I'm sure it's more that, like, there's just not no comparison between the US and the Nordic countries. And in terms of raising kids, at least as far as I'm concerned. Okay. Will you do some advent of code in Rust? Probably not. I think advent of code is great, but it's not for me. I like to build, like, bigger things.
02:06:47.225 - 02:07:16.361, Speaker A: I like to build things that are more real or useful. The sort of coding challenge type things. So when I say coding challenge, I don't mean like the coding challenges we did, like implementing the distributed system thing or the BitTorrent protocol stuff we did. Those kind of coding challenges I enjoy. But the sort of here are some small coding tasks is just not for me. I don't think it's that interesting. I know a lot of people do, and I'm not saying it's not a good idea.
02:07:16.361 - 02:07:39.285, Speaker A: It's just like that. That's not my preferred way of working. I like to build larger, more complex things. So I will probably not do advent of code in Rust or any other language. Maybe in css. What's a project you would like to start but haven't had the time to. Okay, see here, let me open my Obsidian.
02:07:39.285 - 02:08:13.675, Speaker A: Okay, so I have. I have a document called Random Ideas. Where is it Here? And on this I have. I want to start a new podcast. It's a podcast called Forgotten Tech. And it's. I don't know if that's actually going to be the name, but it's basically a.
02:08:13.675 - 02:09:28.405, Speaker A: I want to start a podcast where I talk to the people who build technologies that we kind of have forgotten because they just fade into the backgrounds of our lives. Like, who programs the. The like baggage claim belt, like the machine that brings out your luggage at airports and that has like a laser system that detects when bags are coming and then decides when to release the next one? Like who releases that? Who built that? Who builds like the. Who programs the systems for inflight entertainment on airplanes? Who programs traffic lights? Who programs the thing that injects ads into podcasts that depend on the country you are in when you downloaded the episode? Who programs elevators? Who programs cheap children's toys? Who programs the machine that you talk to if you drive through a McDonald's? Right. Like I want to talk to those people and make a podcast out of it. So that is one of my ideas. See what else I can dig up here.
02:09:28.405 - 02:10:25.759, Speaker A: I want to start a sort of heart side chat on technology topics. Like basically, I want to basically do a Rust not talk show, but like I want to pick just random people in the Rust community and then sit down and talk to them for 30 minutes, probably on stream. I don't know yet. But I want to start to do something like that that's more about, you know, let's talk about language and its future and your experience with it and maybe less of an interview style and more of a conversational style. I think that would be really interesting. What else do we have here? I want to write a simulator for that can run. I want to basically program the last battle in the Wheel of Time series.
02:10:25.759 - 02:11:02.475, Speaker A: So the. The Wheel of Time book series has a giant last battle with like there's like lots of different armies with different like intentions with different leaders and particular events that happen in different technologies. And I want to try to program a simulator for that battle and then try to display it in something like unreal so that you could see the battle unfolding and then play through the entire last battle. Be really cool. Don't have the time, but I would love to. I want to program a GPS receiver from scratch. Don't know what I'm going to do that.
02:11:02.475 - 02:11:49.211, Speaker A: I have a bunch of new crates I want to make. Like for example, I want to build a crate for making open loop benchmarks. I have. Where's the other one I had. I want to do director's commentary video series about REST for stations. I want to do a course that is more of a intro to Rust, but I specifically want it to be Learning Rust by doing so. I want to do a Learn Rust by.
02:11:49.211 - 02:12:43.955, Speaker A: Let's dive into this giant code base and understand what everything in this file does. So yeah, I have a lot of projects I would like to start but don't have the time to. Those were only some of them. I'm glad these resonate with people, but unfortunately I don't know that I have the time to do any of them anytime soon, but the answer to the question is yes, I have a bunch. Okay, we're at the, what, 2 hour and 15 minute mark. So what I'm going to do is I'm going to do my little speed run at the end to get through a couple more questions and then I think we're going to call it a day. So before I do the speedrun, here's what I want people to do.
02:12:43.955 - 02:13:21.693, Speaker A: Would you mind if people stole those ideas? Go for it. Absolutely do it. If someone else does it, that means I don't have to. So please do what I want to do before I do my speed run of questions. Everyone take like two or three minutes to go in and first ask a single question if you have one. Let's not spam it with a million questions, but like ask a single question if you have one and then go through the list and vote for the ones that you would like me to answer. And then when I do my speedrun, I'll probably answer, let's say the top 10 or 15.
02:13:21.693 - 02:14:00.019, Speaker A: And don't cheat. I know that it's possible to cheat on this voting site. That's on purpose because it's really annoying to build it otherwise. But don't cheat. I will ignore questions that cheat. So let's take like two or three, two or three minutes to ask and vote on questions and then I'll do my quick pass. Yeah, the idea would be something like learn by project instead of learn by example.
02:14:00.019 - 02:14:40.525, Speaker A: That's the idea. Like take. I don't know what I would take, like maybe the rip grep code base or maybe Tokyo actually, or Axum. Like I would take something that is like, has a bit of meat to it, does a couple of different things. Maybe after the rewrite of Fish to Rust happens, maybe I would do that. Like, I want a real meaty code base and then I want to pick some decently good chunk of it. And the goal would be for us to understand everything that's in that file by the end of the course.
02:14:40.525 - 02:15:08.547, Speaker A: I've not read the Dresden files. No. Do you believe the Rust Foundation's goal are impossible? Oh, to be clear, it's not that I believe their goals are impossible. It's more that it's impossible to please everyone. But I don't think they should be trying. I don't think they are. I think they're trying to further Rust the language, rather than pleasing everyone.
02:15:08.547 - 02:15:39.461, Speaker A: And I think that is the right goal. And it's achievable it just means that you'll always end up with some people unhappy about the way that you did it. Oh yeah. I would love to do podcasts with people who are not Rust people. Like, I want to talk to people from other language communities too. I think that's something that we as Rustaceans do don't do enough of. Okay, time to do the speed run.
02:15:39.461 - 02:16:07.255, Speaker A: Are we ready? Here goes. What are your thoughts on Capture the Flag ctfs? Have you ever played them? I played some hacking ones a long time ago, but nothing really since. They were fun though. How are you so cool? I don't think I'm particularly cool. I think that's a lie. I just talk a lot. How is R the cat s adjusting to the move? The cats are adjusting really well.
02:16:07.255 - 02:16:23.217, Speaker A: They think this is home now. And you know, we've put up like furniture on the walls for them to run around on. They really like the fact that we have a heated floor in the bathroom room. So they're there like 90% of the time now. They're adjusting just fine. They've seen snow now. That was exciting.
02:16:23.217 - 02:16:41.217, Speaker A: There are birds at the window who came. Like we hung up a little bird feeder. They're very excited about it. They're. They're happy. How are you doing? I'm doing pretty well. I think the biggest frustration I have at the moment is I wish I had more time to work on all of these ideas that I have.
02:16:41.217 - 02:17:27.194, Speaker A: And I think I've come to the conclusion that it's probably not doable with a full time job. So I think medium to long term my goal would be to move to part time work so that I could do more of this if I can find a way to sort of supplement the fact that I'd be working less with something like a Patreon or something. And the reason I give this answer as part of how are you doing? Is because I'm finding that it affects my happiness a lot that there are all these things that I want to or arguably should do. Like there are more open source projects that I should be doing better maintenance of. And it bothers me that I don't have the time to. And if I did do it, I would have no time to spend with my family, my friends, my girlfriend, my cats. And so that that tension is hard to navigate.
02:17:27.194 - 02:18:14.357, Speaker A: Any ideas to make profiling of rust programs better? I don't think profiling rust programs is that much of a problem. Except for the Async context program. Profiling Async rust programs is pretty painful. You can kind of do some of it with flame graphs and Perf, but it's not ideal. Tokyo console helps here and I'm hoping that we can get further in that direction. What I would love to see is like a Tokyo enabled version of Perf kind of, but I don't have any good ways for how we can achieve that. How do you use properly NPSC receivers inside of for loops on separate threads? So NPSC is multi producer single consumer, which means that they are just fundamentally not multi consumer.
02:18:14.357 - 02:18:56.478, Speaker A: You can stick them in a mutex but then you sort of lose a lot of benefit. Instead I would use some like a channel that is specifically built to be MPMCs, a multi producer multi consumer. So that means the receiver is going to be cloned, which means you can give it to multiple threads. Do you use a debugger print or both? Almost exclusively Print debugging I rarely pull out GDB or lldb. I do sometimes, especially if I end up with wacky pointers or a seg fault of some kind, but it's pretty rare. Usually I just print rerun that gets me far enough rather than try to find the breakpoint and then print it out. I know how to use GDB fairly well.
02:18:56.478 - 02:19:18.509, Speaker A: I just. I don't know. Print debugging just comes more naturally to me. What's your Rust 2.0 wish list? I want PIN to be part of the drop trait. I want PIN to be part of the iterator trait. I think those are the two main things that I would break can't immediately think of.
02:19:18.509 - 02:20:04.183, Speaker A: Oh, I would probably change the name of Mute because I don't want it to imply mutability. I want it to imply exclusive access. And Mute feels like it should be mutable, but it might not be even if you have exclusive access. So I want that to change. What do you think about certifications in general? Like certified professionals for software or anything? Is it all overrated? Scam bubble? Did you do some trainings of this kind? I have not done any training of this kind. I don't have any certifications and I think I'm a pretty good programmer and pretty good software professional. I don't think they're entirely just scam like I think to some extent they are a valuable way to get companies to pay money for other things like soft skills.
02:20:04.183 - 02:20:21.685, Speaker A: And that is valuable. I don't know that it matters a lot that someone has one. Why do you look so old by some young guy? I don't know. I'm. I am old, I guess Like I have aged a bunch since I started streaming. I am now 34. You know, hair is thinning.
02:20:21.685 - 02:21:00.715, Speaker A: It's like I'm getting, getting, getting older. I don't think I look so old. I think that seems excessive. Any tips on how to increase my salary as an Argentinian developer? I'm at US$500 monthly. Learning Rust Is it worth it in Latin America? I don't know what the rust community is like in Latin America. The salary you're quoting sounds like you might be better off trying to look for a remote position that is likely to pay more. Usually salaries are low for local businesses and if you look at companies that have to compete globally, you're more likely to get better offers.
02:21:00.715 - 02:21:43.333, Speaker A: But there's also more competition for them, so it's harder to get those jobs. Apart from that, increasing your salary is really hard within a company. Usually moving companies is the easiest way to do it and even then it's not guaranteed. Oftentimes it requires that you like know your own worth and is willing to stand up and say, no, this is not good enough. What is your ideal team look like? Ooh, I don't think I have an ideal team. I have an ideal team size which is some somewhere around six people, five or six people. Once you start going beyond that, people start to lose track of what each other is doing.
02:21:43.333 - 02:22:38.349, Speaker A: You lose some of that social cohesion and the feelingness of like we're together in this. And so I wouldn't want it much larger than five or six. But in terms of composition, I like to have, I like that one person is responsible for interactions with stakeholders like think like some of the project management things because I think it steals, it saps a lot of time and energy from engineers and they're often not very good at it. But the PM can usually be shared with other teams. There doesn't necessarily need to be one dedicated for each five or six person team. Oh, and in terms of seniors and juniors, I, I think it's okay to have one senior person. I think it's better if you have two on a team because otherwise you end up with one person with too much of a overriding power.
02:22:38.349 - 02:23:32.439, Speaker A: It's useful to have some, you know, checks and balances at the top, if you will. So maybe two senior, at least one, maybe two who are learning and then some people who are sort of have been part of that journey and so that, that's how you get to six. Is there any issue or topic that you're too busy to do but would love if Someone did basically all of the ones that I listed so far. Like in the previous question of like things I don't have the time to do. I would, I would love for people to pick those up. Apart from that, there are some, there are some open source projects I have that I basically realize that I don't have the time to maintain well and so I would love for someone to come along and basically take over as a maintainer. This has already sort of happened with the OpenSSH OpenSSH crate, which makes me really happy.
02:23:32.439 - 02:24:04.851, Speaker A: Like that's one of the ones where I built it originally and someone came and just did a bunch of really good contributions and is now basically owning the crate and that makes me happy. I think technically I'm still a maintainer, which is fine, but. But I'm glad to have been able to give that one away. I think there are three others I have where I would love something similar to happen. One of them is Fantoni, which is this fundamental library for browser orchestration. Basically implements the WebDriver protocol. I don't use it anymore myself and so I feel like I'm a bottleneck for it progressing.
02:24:04.851 - 02:24:50.111, Speaker A: So I would love someone to help take over there Factory, which is a crate for interacting with Factory, which is a re implementation or a better implementation of a queuing system like Sidekick by the same developer. Never used Factory myself. I just wanted to build the binding, so I did. I'd love for someone to take over that who actually uses it and the IMAP crate which I've owned now for a long time, I sort of accidentally became a maintainer of it and I think there's so much good stuff that could be done to that crate. It could arguably be rewritten almost from scratch, but I just don't have the time. I would love someone to take that one over. I'm a backend dev with two years of experience currently learning Rust and distributed systems.
02:24:50.111 - 02:25:37.219, Speaker A: Could you suggest some beginner friendly open source Rust projects I can contribute to? Preferably ones which also hire remotely? There's no answer to this question. So like in general open source projects are not going to be places that hire you. That's relatively rare. There are some exceptions, but usually open source projects that are run by companies are usually not run very well as actual open source projects. Usually they end up being sort of a mostly one way directional publishing. There are some companies that do better that actually maintain open source projects, respond to PRs, respond to issues, take contributions, but that's relatively rare. There are some companies that, you know, open Source something and then it sort of gets left there to rot or not to rot.
02:25:37.219 - 02:26:20.425, Speaker A: It's just like not an active. There's no one actively working on it from the inside of the company. It can be a way to get into a company if you really become an expert on the thing that they put open that might give them a. Give you a path into their hiring pipeline. But it's pretty rare. Are there jobs for Junior Rust developers? Yes, but there's much more contention for the junior positions because a lot of people are picking up rust, especially junior engineers, because it's a language that seems exciting and people decide to learn it for that reason. But that means that there's a lot more of them and I think we have fewer companies that are in a position where they're able to take on Junior Rust people.
02:26:20.425 - 02:27:12.265, Speaker A: So there are some. There's just a lot of competition, sadly. You previously mentioned in a video that one needs good letters of recommendation to get into grad school. Could you provide more information on your statement of purpose and your letters of recommendation? How do you approach professors to secure admission to mit? I got into MIT on my fourth try, so I originally applied for the bachelor's program straight out of high school in Norway. My letters of recommendation were written by Norwegian high school teachers who are not used to writing letters of recommendation. And in Norway, people aren't really comfortable ranking people. So when the forum asked in what percentile of the class is this person the professor or my teacher was like, I can't answer that question.
02:27:12.265 - 02:28:04.645, Speaker A: That's not a thing that we track. That obviously did not go very well. And then I applied again after a year doing a bachelor's degree in Oslo at the University of Oslo. And I got letters of recommendation then partially from those same teachers and partially from professors at the University of Oslo that did not get me in. Then I went to Australia, I did my bachelor's there and I applied again then with letters of recommendation from Australian professors at that university, did not get in. And it was only after I did my master's degree and then some research at UCL in London that I ultimately and then got recommendation letters from the professors there that I then got in. I think a big part of letters of recommendation is whether the people reading them recognize the people writing them, especially at the very high end institutions.
02:28:04.645 - 02:28:55.341, Speaker A: Because if you get letters of recommendation from relatively unknown people, people. And I don't mean no personally but no professionally or, you know, I've read papers by if you get a letter of recommendation from a person that you have no professional association with, then they could write the most glowing letter. But you don't know what their point of reference is. You don't know whether they're reliable and can be trusted. You don't know if they're real. And so I think, you know, you need to have letters of recommendation from people who have some amount of weight in the community. And I don't mean like they're super senior, well known professors, but just like they should be googleable, they should be ideally have some papers written or some, you know, be well accredited such that the person reading it is more likely to put some stock in that recommendation.
02:28:55.341 - 02:29:28.877, Speaker A: In terms of statement of purpose, that one's harder writing a statement of purpose like I wrote mine, basically saying I am interested in the. I forget what I even did, like the intersection of two fields. But I was very open, like I don't know exactly what I want to work on. I think these things are interesting. Here are some of the things that I've done in the past that make me think those are interesting and that I might be good at it. But I don't know that I have any, any great answers for that one. All right, last two.
02:29:28.877 - 02:30:35.697, Speaker A: What do you think of Rust of the Rust 2024 roadmap and how do you like the focus towards embedded and do you think that area needs improvement? Because I haven't done a lot of embedded programming myself, it's hard for me to say. The last time I looked at embedded stuff I think was when I was writing Rust Forestations in a little bit Sins and my memory was that it was still very much fledgling like both the libraries and the especially the documentation, especially end to end documentation was lacking. And so I think it's a good idea to focus on making that better because I think Russ is really well positioned to do well in that area. But I don't know that I can say more about like the specifics of what I think Rust should get better at. I don't know that I've seen the sort of official 2024 roadmap. Has it been posted somewhere? Ah, Rust lang roadmap for 2024 scaling empowerment, flattening. Okay, so flattening the learning curve.
02:30:35.697 - 02:31:01.045, Speaker A: Yes, I agree. I think doing so in practice is really hard, but I think it's valuable. Help Rust users help each other, help library authors so they can in turn empower their users. This one I've seen some effects of already, like the ability for. For library authors to make use of more of the techniques that standard library uses. I think it's a great thing to do and helping the project scale I think is one of the problems that the Rust project has and so addressing it is good. In general, this seems pretty good for me.
02:31:01.045 - 02:31:47.615, Speaker A: It also sort of jives with the fact that I think most of what we need now is not the language to improve, but the experience of getting started and growing the community and growing the scalability of the language. Okay, last question. Before I take the last question, I'll let everyone go through and like do some voting so that we'll see which one is the top one now that we're at the last question and then I'll check chat in the meantime. I read that like Joey from Friends. How you doing? It'd be awesome if you posted sometimes ideas what to implement so others can do it. If you don't have the time finding good practice to implement something meaningful that would be used. That's true.
02:31:47.615 - 02:32:34.015, Speaker A: I have thought about posting some of these for someone else to implement, but often they're like vague ideas where like I have some thoughts in my head about how maybe I could do it and so it's not clear how I would summarize it enough to give other people the ability to. To implement them. John looks handsome and presentable. Thanks. I'll take it. How badly you're waiting for generators in Rust. I.
02:32:34.015 - 02:33:11.685, Speaker A: I think I find myself wanting generators maybe once a month. I have your book and it's hard for me to read. Russ, Ferrustations is not a beginner's book. It's also not really a book to read front to back. It's one you should use more as a reference when there's something in particular that you want to look up. It's also non trivial in terms of like the language. Like it is an advanced book and so some of the struggle might also be if you're a non English native speaker.
02:33:11.685 - 02:33:58.135, Speaker A: But as you work more with Rust, you should find more of it be approachable. Okay, which question is at the top? Okay. How do you get excited to build stuff and improve without getting burnt out? Um, it. It's hard to answer this question because like I, I did get burnt out. Like when I did my research for my PhD, you know, I was very, very burnt out from that code base. And, and that was in part because like I had been doing nothing else, thinking about nothing else for almost six years. And so of course that burns you out.
02:33:58.135 - 02:34:49.449, Speaker A: And so this is one of the reasons why, you know, I Co founded ReadySet, which is this company that is taking Noria, that research database, and turning it into a production piece of software. But I did not join the startup like, I helped found it, but I did not join it to work on it because I was too burned out. I realized that if I were to sit and try to lead that code base or contribute to that code base, I was. My speed was going down and down and down because every time I was going to sit down and work on it, I could just feel my brain being like, no, not again. And honestly, that was in what end of 2020. And still to this day, I have some of that feeling remaining of. I don't.
02:34:49.449 - 02:35:22.385, Speaker A: I can't think about databases. It's certainly not that code base without like some of that feeling of dread coming back. So the burnout is very real. I think I've felt less of it in the things that I've worked on since then, partially because I've been moving between projects, right. Like I was at Amazon for 3ish years, 2 and a half. And over the course of that, you know, I built a new thing from scratch there, like a new tool for the rust build system internally. And so that was refreshing to build something new in a new space.
02:35:22.385 - 02:36:10.258, Speaker A: And then I moved away from there before I really had the time to burn out on it. And at Hellsing, as the principal engineers too, I get to move around a fair bit. And I have the hope that that is going to allow me to stave off the burnout. Because one of the ways that you avoid burnout is to not dig too deep on one thing or spend too much time just driving yourself to insanity on one project. I think the other piece of advice I would give here is force yourself to take breaks. Like, you know, sometimes I work on something that I think is so interesting that I just want to keep doing it. Like, I don't want to leave work at 5.
02:36:10.258 - 02:36:51.465, Speaker A: I want to keep programming it until 9 or 10, until I like have to go to sleep. And then I want to start again in the morning or start again on the weekend because it's super interesting. But that's dangerous. Like, it's great if you enjoy your work that much, but it does lead to burnout. And so what, what I will do now is like forcibly leave a piece of work that I think is interesting and then be like, okay, I'll be excited to return to it tomorrow, or I'll be excited to return to it on Monday, but it is actually important that I stop. Even though I'm excited. There are some times when I don't manage to hold myself to the standard where I'm like, no, this is just like burning a hole in my brain and I need to get it into code to see if it works.
02:36:51.465 - 02:37:19.499, Speaker A: But I try to resist that urge as much as I can. Okay, I think. I think we're at the end there. Are there any follow up questions on Burnout? I'll take those before I. Before I sign up or sign off. Sign up. I'm surprised there's no Q and A burnout in this stream.
02:37:19.499 - 02:37:44.869, Speaker A: It has been a long Q and A, but for some reason, like Q and A is I just, I can go for a long time now. It's mostly because I need to eat dinner. Like, I can feel my stomach is not happy with the Q and A, but my brain is okay. All right, no more questions about Burnout. That's good. You've all been. Do you like Burnout Paradise? I played Burnout Paradise.
02:37:44.869 - 02:38:01.551, Speaker A: It was decently fun. All right, well, in that case, I think it's time. Everyone, thank you for joining. Thanks for watching. Thanks for asking all the questions. I hope this was useful. As always, the video is going to come out out on Video on Demand and I'll tag all the questions there as well.
02:38:01.551 - 02:38:15.015, Speaker A: So if you join the stream late or if you're watching this after the fact, by now you already know that there are chapters in the video, but down in the video description there'll be little links to every question that you can go back and watch this later. So thanks everyone and I'll see you next time.
