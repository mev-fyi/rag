00:00:00.680 - 00:00:13.913, Speaker A: It should start recording and I'm going to go to OBS and see that that's actually true. It did start recording. Fantastic. And I'll cut this out before I upload the video. All right. Hello, everyone. Welcome back to another stream.
00:00:13.913 - 00:00:29.183, Speaker A: It's been a long time since last time because I have been moving. As you can see, the room is completely different now. My chair is different. The picture is the same. I brought that. So this stream is not going to be Rust specific stream. It's not going to be a coding stream.
00:00:29.183 - 00:00:55.175, Speaker A: Instead, it's just going to be a Q and A stream. There are enough things that have changed in my life since last time that I figured a Q and A is a good thing to do. Just because people probably have questions. Things have changed in the world, too. If you have submitted questions in advance, then you can watch them being answered. Now you can also ask questions. If you're watching this live, you can ask questions during the stream.
00:00:55.175 - 00:01:28.655, Speaker A: The link to where you can ask questions and vote on questions is in the video description, or someone also just posted it in chat. They're both the same. They both work. What I'll do is I'll go through the list of questions that have come in by how much they've been voted up, and I'll skip any ones that I don't care about. I don't think I'll skip very many and I'll just go down the list and we'll see how far we get. There are a lot of questions, so, you know, this is a good place to start. Okay, question number one.
00:01:28.655 - 00:02:24.315, Speaker A: First question in Norway. First question on a stream in Norway. How did you find your new position or did they find you? So for a little bit of context, I recently left AWS as part of my move and I joined a company called Helsing and that moved. There's all sorts of things buried in that move. But in terms of the specific questions of how I find my new position, what happened was when I decided that I was probably going to be leaving AWS, I posted to Twitter, to Mastodon and to LinkedIn saying I'm likely going to be leaving my position at aws. I am moving to Norway, I am looking for work. Here are the sort of not criteria, but rather, here's what I know, here's what I'm good at, here's what I'm looking for.
00:02:24.315 - 00:02:58.635, Speaker A: And I'm in a slightly privileged position here, right? Because normally when you apply to jobs, you can't really just state your requirements. In my case, I had the luxury of being able to do that, which was really nice. And so I said things like, I don't want to work on anything that's bitcoin related, for example, which is just. That's my preference here. And, you know, these are industries I might be interested in. And I got a bunch of emails in Response, and Twitter, DMs and whatnot. Hellsing was not one of those initially.
00:02:58.635 - 00:03:38.235, Speaker A: Or rather what happened was, I think a few weeks later I got an email from someone who had been watching my streams for a while being like, oh, I noticed you're looking for work. I work at this company. Would you be interested in talking to them? And I was like, sure, that sounds interesting. Why not? You know, it looks like a company that does interesting things in a domain that I'm not used to. And so I set up a call with one of the hiring managers there and then it sort of ran from there. So in a sense it was kind of both. But mostly they found me through this person who'd been watching my videos.
00:03:38.235 - 00:04:03.453, Speaker A: Okay, next question. Let's see if there are any follow ups to that. Nope, no follow ups. So this is a sensitive question. I believe salaries in the EU are not aligned with North America and especially the us. Is there a big gap between your new and old one? It's not a sensitive question. Or rather, I think decent chunks of the world think that it's a sensitive question.
00:04:03.453 - 00:04:54.991, Speaker A: I don't think it should be. I think salary is one of those things that it's extremely important to be pretty transparent about, because otherwise you. You end up with immense pay gaps, both between regions, between people, between companies. And I think it benefits all of us to be relatively transparent with our salaries. Some of that is complicated, depending on the company and depending on the country you work in and the contract you've signed. But what I'll say is that so at Amazon, and I've said this before, my salary sort of total compensation, including stocks and the like, was around $450,000 a year towards the end. But in reality it was actually a fair bit lower because of the drop in Amazon stock price.
00:04:54.991 - 00:05:37.582, Speaker A: It was almost closer to 350 by the end, which is pretty crazy. That's abnormal, right? Normally they pay a decent amount more. And I was also on the sort of promotion track to principal engineer, which would have bumped that pay by some amount as well. But so I was exiting, let's say, around $400,000 a year. I didn't end up with an actual offer from Amazon in Europe, but My understanding is that the offer would be significantly lower in Europe than it would be in the US that also varies by company. So at Meta, for example, this is only based on my understanding. The pay in Europe is lower than the U.S.
00:05:37.582 - 00:06:08.299, Speaker A: but not by that much. It's like 10 to 20%. And Amazon, I think the pay cut is about 50%, maybe even more. So it's pretty significant. Helsinki pays pretty competitively. The challenge that any company that's not on the stock market yet has is that when they pay you in stocks, those stocks aren't worth anything. Or rather they have an estimated worth, like they can estimate, estimate the value of the company based on valuations and seed rounds and the like.
00:06:08.299 - 00:06:38.825, Speaker A: But they're not liquid. Like you can't sell them and get money. So it is a little bit of a bet. And so it depends on whether you consider those, if you're given stocks, whether you consider them being worth anything. So the cash compensation that I'm getting from Helsing is competitive with what I got at Amazon. So it's about â‚¬250,000 a year. And then there's stocks on top of that which are worth amount of dollars.
00:06:38.825 - 00:07:30.803, Speaker A: I think the target was that the total comp would be about the same given the current valuation of the company, with the expectation that the valuation of the company might go up over time. But that's roughly where we're at in that sense. There's not actually a big pay gap between my old position and my new position, which is pretty impressive given that I'm in Europe. This is one of the things that I've gotten the impression that Helsing is doing pretty intentionally is that they understand that this is a place where it's important to attract very good engineers. And that means that you have to pay competitive salaries. And that's certainly what I got. You know, it depends also what you compare with, right? If you compare with like a, I don't know, a high frequency trading firm in the US Then no, they're not competitive.
00:07:30.803 - 00:08:07.389, Speaker A: But, but you're comparing very different industries as well. Follow up questions. Not any follow up questions yet. All right, I'll try to take follow up questions before I move on to the next one. Just because although looping back is annoying, especially for the people watching like Video on Demand afterwards. Because then I put, I put like chapter headlines for each question and then it becomes a new chapter headline that refers to your previous question and it just gets annoying. Did you consider the stock value at what price when evaluating the offer? Yes, I did.
00:08:07.389 - 00:08:44.469, Speaker A: So the offer that I got from Helsing included some number of stocks and the sort of estimation of the current value of the company. And I certainly took that into account. The tricky part, right, is that it's not about what the company is currently worth, which you can estimate pretty well based on seed seed rounds. You have to guess what they're going to be worth by the time the stocks are liquid, and that's much harder. You, you can sort of guess based on the growth of the company and what kind of contracts they're landing and stuff. But, but it's a very, it's, it's a gamble. But, but I did take that into account.
00:08:44.469 - 00:09:20.575, Speaker A: Yes. When you ask questions, please ask them in that special Q and A link that's in chat and in the video description. Next question. What's your take on the whole Rust foundation conundrum? Okay, I knew this question was going to come. Arguably I should have prepared better for it. But here's the deal. This is the debate around the Rust foundation and the the Rust trademark policy.
00:09:20.575 - 00:10:27.455, Speaker A: So my take here is that the Rust community wants to have their cake and eat it too. The Rust community both wants the foundation to be fully transparent about everything it does and sort of show all of their work the entirety of the way and include the community every step of the process. But at the same time, they expect everything that comes out of the foundation to be perfect the first time around. Or rather, if it's not perfect, if there's anything at all wrong, then the amount of not scrutiny, because scrutiny is not problematic, but the amount of criticism is get is immense. And that's unfortunate because you end up in a position where the foundation can't win. There's not the foundation can't like. Either way they go, they're going to get severely criticized and that is going to demoralize any effort that goes into it and everyone who's involved in that process.
00:10:27.455 - 00:11:42.485, Speaker A: And I think the community is doing itself a disservice here. I think it is very important as a community that we are diligent about making sure that what the foundation does is aligned with what we believe that Russell's community needs and should have and the direction that we should go. But at the same time we should also recognize that it takes work and like actual people being paid work hours and insight and iteration to get to something that's really good. And that means you're going to see things that aren't perfect from the beginning. That all said, I do think that the way that this Rolled out from the foundation of the communication around. It could have been better to avoid the kind of, I don't know, misreading is maybe wrong, but that the misunderstanding that happened, if you will. I think the communication there could have been better, but ultimately I think this is actually a problem with how the community looks at the foundation and thinks of the foundation.
00:11:42.485 - 00:12:41.173, Speaker A: I see someone is gaming the system, so I'm going to hide their question. Okay, follow up questions on the Rust Foundation. I'll also add that I do think that that trademark policy was problematic in a number of ways as has been described. I'm not questioning that at all. It's more that this was clearly a draft that was expected to be iterated on and I think we should give the foundation some leeway to propose things that aren't perfect. Okay, next question. What could possibly be a reasonable application of AI in the military? Helsing's website is not remotely clear about what they actually do and AI for military applications seems like a gigantic min field of serious concerns.
00:12:41.173 - 00:14:11.275, Speaker A: A computer cannot be held accountable, therefore a computer must never make management slash military decisions. I don't love the phrasing of this question but, but I think the core of it is a good one which is like why would you want AI in the military or near anything that is as serious and potentially deadly as what military military involvement entails? And the the answer here is that, and this is personal opinion just to be clear, my take here is that it's actually critical to get AI into these situations because there is such an overload of information. It's a fire hose of information once you start connecting all these different systems. And so it's not about using AI to make decisions. I agree with you there that if you take the human out of the loop here, then you run into really problematic territory. But that's also not Hellsing's goal as far as I've deduced or that I understand from talking to the people there. Instead the goal is to use AI to make the humans decision making process and the humans insight into what happens in a war zone or on a battlefield to give them better insight, better understanding, better overview so that they can make better decisions.
00:14:11.275 - 00:14:59.965, Speaker A: And there I think it is hugely valuable because there's a limit to how we as humans can scale up our information processing capabilities. We need a hierarchy of information. We need things to be summarized at different levels and be brought up to us in a way in a format that we can make decisions on. If you are watching over a battlefield and you just get all of the information about all of the assets that are there, friend or foe, then you're going to be overwhelmed. You're not going to be able to take intelligent decisions because you're not going to see the patterns. And the hope is that by using AI here, you can try to distill the things that are important, surface those better, and then the human can make decisions based on that. So.
00:14:59.965 - 00:15:37.309, Speaker A: So it's not about making AI make decisions. It is about making AI Let humans make better decisions. Okay, follow up questions. There is no best choice. There is no best choice. I don't know what that's in reference to, but I actually think that there. It's true that there's no right choice very often in any conflict, really, but certainly in war.
00:15:37.309 - 00:16:14.633, Speaker A: But I do think that there are better and worse decisions. And the goal here is to allow the humans to make better decisions. And I don't think we want AI to be making decisions. There might be some exceptions, right? There might be cases where it's not tenable for a human to make decision because, like, I don't know, you get a. I can't think of an example off the top of my head, but. But I know that there are some. But the goal shouldn't be to have the AI make decisions.
00:16:14.633 - 00:17:14.895, Speaker A: And I think any time where there's a potential for the AI to make make a decision, you have to be extremely rigorous about why are we allowing this to be the case? What are the options? Is this actually something we want to do? I'm worried it's one step away from making AI make decisions. I mean, that's true, kind of. Right? So there's a big difference to whether you're using AI for information gathering and summarization than if you're using AI to send decisions down. Those are two very different pathways. And I don't think that having AI in one makes it easier to do AI in the other. Maybe there's a question of having technology built in here at all, but I think they're actually pretty disconnected. So I'm not too worried about a slippery slope here.
00:17:14.895 - 00:17:56.184, Speaker A: Lazy humans, though, is a problem. And this is something that I know Hellsing is thinking pretty actively about as well, that you want to make sure that the systems that you build that surface information don't try to like, make a suggested decision that the human then clicks okay on. You want to make sure that it's actually a human in the loop, that the human in a loop is not just a yes button clicker, and that goes through the entire process, right? That depends on how you design your UIs. It's an entire UX issue. It's like it's almost psychology, if you will. And so point very much taken. The lazy humans is something you need to worry about.
00:17:56.184 - 00:18:58.767, Speaker A: But at the same time I think that is a problem you have to worry about regardless of how you set up these systems. Okay, I'm going to move on to the next question. Does the tech stack used for AI? Oh, is the tech stack used for AI in Rust as well? We'd love to know more on where Rust helps in the AI space and the products built. So one fun part here is I don't yet have access to the Helsing code base because I don't actually start until August. So I can't tell you anything about the actual code, but I can tell you about sort of roughly what I know about the structure of the, or the architecture, if you will, and the design of the software stack. A lot of the AI stuff is in Python. The hope is that we can use Rust to make those parts better and maybe over time we end up like moving a lot of that to Rust, or at least what makes sense.
00:18:58.767 - 00:19:52.581, Speaker A: At the same time, I don't think the goal should be Rust everywhere. I think, for example, when you have AI researchers working interactively on a problem, I don't think you want that to be in Rust. I think you want the higher turnaround, the shorter build debug run cycles for that which Python gives you and then maybe you want to translate the things that are actually going to go into production into Rust. So I don't think the goal is to remove Python altogether. I think that is a. I think that's the wrong goal to have in mind. Instead the question is, where can we use Rust to make this overall system better? Now, as for where, well, if Helsing does AI, then where is the Rust? And the answer is the AI is really mostly present in the sort of information collation space.
00:19:52.581 - 00:20:43.675, Speaker A: That's where the AI shines. But there are all these underlying systems that are used to disseminate information, gather information, coordinate between different units, essentially building the communication system. And that's basically all in Rust. I think, you know, the network stack, you need to talk through some really weird, like hardware and military equipment. A lot of this stuff is very low level things. You have really intermittent network connectivity because that plane isn't near that radar anymore, right? So links come and go, they're really unreliable, they're really low bandwidth, they're very high latency maybe all of the above. And so you need to build a solid tech stack for even just exchanging information in that kind of severely distributed system.
00:20:43.675 - 00:21:27.569, Speaker A: And those bits are all in Rust. Same things with everything that then gathers the information and brings it back to where it can be analyzed. Anything that sends control operations back, essentially everything except for the AI, which turns out to be a fairly substantial bit of distributed systems engineering. So there isn't too much rust in the AI part of the stack. But I'm hoping we can get there more and more specifically, because you really want low latency for anything that's being displayed to humans. And there Python doesn't really shine anymore. You end up with pretty high turnaround times.
00:21:27.569 - 00:22:18.213, Speaker A: So once you have encoded the algorithm, having an easy way to then turn that into the sort of lower latency, higher throughput rust, front end bits as well would be beneficial. Does rust make sense here? ML nowadays is mostly glue, and I don't think Rust can be Python at that. Yes. So that's sort of the discussion. Right, which is. I think you're right that for the glue code, Python is pretty great for anything that's changing rapidly, like for anything that's, you know, AI researchers, anything that is essentially prototyping. But once you've sort of solidified that this is how this thing is going to work now, I think it makes a lot more sense to have it be in rust, because even though it's glue, it ends up being on the critical path for a lot of things.
00:22:18.213 - 00:22:53.465, Speaker A: And so making it be in Rust is probably a worthwhile investment. Oh yeah. Securing information at rest, all of the storage systems for things like the AI models, getting that data, exchanging it to where the models need to be run, between where it needs to be trained and where it needs to be stored. All of that is also in Rust. Okay, next question. What is your skincare routine? Women youtubers are always asked this, so men should get to answer too. It's a great question.
00:22:53.465 - 00:23:28.103, Speaker A: I was also told by my partner that I have to answer it, which I was planning to anyway. My skincare routine, I think, as my girlfriend would say, is suboptimal. There's a bunch more things that I probably should be doing. I get pretty dry hands, so I need to use like moisturizer a bunch, and I don't use it as much as I should. Uh, and then I get, you know, very coarse hands and stuff. It's not, not great. Um, I don't do anything super special otherwise.
00:23:28.103 - 00:23:48.793, Speaker A: What I do do is as you, as you may have Seen sometimes. Sometimes I fully shave. Uh, and everyone thinks it's really weird, but it's just nice. Sometimes just, like, let my skin breathe. And then I put on, like, moisturizers, like, phase. See, I didn't even know that there were special moisturizers for faces, but there are. And so when I shave, I put those on, and everything gets.
00:23:48.793 - 00:24:11.085, Speaker A: Gets. Gets nice. And then because it gets. It can get pretty. The skin under the beard can get pretty dry over time. I think that's really about it, which is. I wish I had more to share on this point because I feel like it would be interesting, but I don't really, which just means that I'm underperforming in this area.
00:24:11.085 - 00:24:39.471, Speaker A: Oh, beard oil. I used beard oil for a little bit, but it didn't really work well for me because I think my skin. What my skin needs isn't oil. It's whatever the opposite of oil is. Like, there's a. There's, like, two things, and you don't want to use one if you have skin that needs the other. But, yeah, I tried using it for a while, and that just didn't really do it for me and just left my skin kind of greasy.
00:24:39.471 - 00:25:15.265, Speaker A: So I wasn't. Wasn't a huge fan, But I tried. It didn't make it meaningfully softer either. Okay, next question. Did your notoriety make. Make interviewing a breeze? The size of the company have an impact on that? I'm thinking big companies are more rigid, so it really varies by company. And, you know, the fact that I have a lot of.
00:25:15.265 - 00:25:59.539, Speaker A: Not just that I'm known that carries some weight, but also the fact that I've done a lot of live coding, so people have seen me program. Right. Like, it becomes a little weird to do something like a coding question in an interview when they've seen me program live. Right? Because it feels like that's already kind of covered. But that said, some companies are a lot more rigid than others, and it's actually not clear that it directly correlates with the size of the company. I had some decently large companies for whom the interview process for me was different. That didn't mean I got to skip a lot of steps.
00:25:59.539 - 00:26:30.939, Speaker A: It just meant that I went in a slightly different bucket where I talk to different people and about different kinds of things, and maybe that's more. That ended up being maybe a more senior hiring path or something. That's hard for me to gauge from the outside. The. In terms of the. In terms of the smaller companies, some of them were just like, we want to hire you, that there was no interviewing really, except they reached out and were like, we want to hire you. And that's nice.
00:26:30.939 - 00:27:15.113, Speaker A: But at the same time, I do think it's worthwhile to interview people because even if you just have like one conversation with them, I guess if your company is like two people, then then sure, it doesn't matter. But if you're like 20 people, it's worth talking to them a little bit more to get a, a bit more of an insight into what they're like as a person. Because, you know, when you see me on stream, I think that's pretty close to how I behave normally. But that's different to if you're having a direct conversation with me. Like, the streams aren't back and forth, they're sort of thought streams or dumps from my brain. And that's not normally how you would interact with a coworker. So I do think it's worthwhile having some of those interview conversations.
00:27:15.113 - 00:28:13.645, Speaker A: Maybe you skip the technical interview, but like, so in reality, the answer here is that being known meant that most of the companies I talked to came in with the either the expectation that the coding part was a formality or just with a we're not even going to do coding. And then for some of them it went all the way to we just want to hire you. And in some sense that's kind of a red flag for me. Like I want to make sure that they have a conversation with me because otherwise it means that they're not sort of, to use some Amazon phrasing here, diving deep on the candidates. They're getting in to figure out whether they are actually someone they want to work with and not just someone they think is a good engineer. In terms of the companies that are sort of mid sized, it varied a lot. For some of them.
00:28:13.645 - 00:29:09.783, Speaker A: I went through a completely normal interview loop, but all of it with a weird air of yes, we apologize for the inconvenience, which I don't mind. I understand why you have to follow a process and it's fair that way. So don't apologize to some companies that were just like, okay, we're not going to do the standard process because it doesn't really make sense for you, but we do want to have these conversations and to figure out whether you fit with the company. And ultimately, like for Helsing, for example, that's what I went through. So I didn't go through like a normal coding interview, for example, but I did talk to a bunch of senior people and have those conversations of like, what do I think about software engineering? How do we interact when we have a discussion? And so I think that ended up being a nice middle ground. So I don't know that it makes interviewing a breeze, but it makes it different. It also depends what you're looking for.
00:29:09.783 - 00:29:48.131, Speaker A: Like, if I was just looking for a job, then yes, it makes it a breeze because I could just pick one of the companies that just wanted to hire me. But in terms of the other companies, for the ones that have the standard process, those are also, you know, there's no difference. There's no breeze or no breeze. Both of the ones where you go through, like a special path. It's. I don't want to say intimidating, but it is. It's harder to prepare for because at that point you're just having conversations with people, which it isn't necessarily good or bad, but it's just, it's not a.
00:29:48.131 - 00:30:45.417, Speaker A: It doesn't feel like a formal interview setting. And so it's always a little hard to figure out how you should present, like, what voice you should use, if that makes sense. So it just, it made interviewing weird and different. Was there a correlation between company size and compensation? A little bit. The smaller companies can't offer quite as much usually, but the biggest difference is actually whether they are a publicly traded company or not. So if the stock grants they give you have actual liquid value or not, because what a lot of the startups tend to do is that because they can't pay you as much, they pay you the sort of gap in stocks based on their guesstimated value of those stocks. But that's not super helpful.
00:30:45.417 - 00:31:33.891, Speaker A: That's not real compensation. It's not money I can take to buy food with. And so in that sense, the pays are correlated in the sense that the bigger companies are more likely to be public, and so therefore you have more liquid money coming out of it. But at the same time, if you take the startups at face value in terms of their valuations and what the stocks are actually worth, then you get to a point where actually they're decently competitive. It also depends on the level. So the other thing I found was that the smaller companies tend to cap out sooner. It's rare that they're looking for a principal engineer because they don't really need one if they have five people, or they might want one, but it's going to be harder for them to attract one.
00:31:33.891 - 00:32:10.989, Speaker A: So if you're coming as like a principal engineer or a senior principal engineer from one of the big tech companies into a startup, your pay is going to drop because those companies just have a sort of ceiling around like the senior engineer, senior staff, like somewhere around there. That's sort of where they top off. Unless you then become like the head of engineering or VP of engineering or CTO or something. And there are some very well funded startups. That's also true. And some of them. The other thing that's interesting is some companies pay because of the industry they're on or the reputation they have.
00:32:10.989 - 00:33:01.141, Speaker A: So if they have a worse reputation or they're in a more controversial industry, then they pay more because they have to in order to attract candidates. What's your current title at Helsing? My title currently is a software engineer. We're still basically working out what the ladder looks like, so to speak. So I'm guessing that's going to change in probably not too long. For anyone who's asking questions, please ask them in the question page. So there's one in the video description and someone can please post it in the chat. Chat as well, where you can go and ask questions, vote on questions, use that instead because the chat disappears so quickly.
00:33:01.141 - 00:33:29.487, Speaker A: Thank you. Wow, that's a lot of copies of the same thing. Yeah, and then there are a lot of like Bitcoin, Web3 companies that try to pay you in crypto and I'm just not interested in that. I don't believe it has value. Okay, next question. Does the lack of sun in Northern Europe affect your mood compared to la? Yes, but positively. I like darkness currently because we're in the middle of summer.
00:33:29.487 - 00:33:58.487, Speaker A: There's actually more sun here than there is in la. But in winter, of course, there's less sun. But now the sun only turned, I want to say, a month ago or something. So we've had the sun sets at what, like 1 2am and then gets up at like 5 or 6. Like it's a lot of sun. But then in winter, of course it's. You have in Oslo, what, five hours of sun? Four.
00:33:58.487 - 00:34:16.831, Speaker A: Four, five. No, I think about five hours of sunlight. So, you know, the, the difference is pretty stark. And I, I like the variation and generally I like darkness. So I like the winter a lot. And I don't really miss LA in any way, really. But.
00:34:16.831 - 00:34:48.761, Speaker A: But especially when it comes to the sun. My big problem with LA was not the amount of hours of sun, but the fact that the sun is so strong. Like going outside when it's really sunny, you just like, you burn, you feel very hot. It's just not very nice so generally the, the lack of sun in northern Europe makes me happy. But also there's not currently a lack of sun in northern Europe. Yeah, I love the seasons in Norway too. Okay, new question.
00:34:48.761 - 00:35:32.219, Speaker A: Is a PhD worth considering if you don't imagine remaining in academia after getting the PhD? I get this question fairly frequently. And the question, as with so many things that have to do with the PhD is it depends. A PhD like the document that you get the certification I don't think matters, especially if you're not going to remain in academia. And if you're going to remain in academia, then it's sort of a necessity. But outside of academia, the PhD is the PhD like title is very few companies know what to do with it. It doesn't qualify you for any positions. It doesn't really change your pay.
00:35:32.219 - 00:36:13.719, Speaker A: It's just sort of there. There are some companies for which that's not true. Like if you go into more of like a research lab like Google Research or Microsoft Research, and I know that there are some positions at Google, for example, that sort of require a PhD. So there are exceptions to this, but by and large a PhD is excessive as far as the title goes. That said, the value that I got of my out of my PhD was not the title. It was the six years that I got to spend doing things I thought were interesting and learning things and branching out. That's the real value, right.
00:36:13.719 - 00:36:50.271, Speaker A: If I had worked for those six years, I'd be sort of constrained to what my employer wanted me to do or was willing to pay me to do. And maybe I do some personal development on the side there. But during the PhD I had a lot of autonomy over, you know, which directions I wanted to pursue. That's how I got into Rust, that's how I got into Tokyo. That's how I got into distributed systems. You know, built Noria, got into a lot of the low level concurrency stuff, like so much of the things that, how I started streaming, how I had time to write the book, right. So much of that came out of being in a PhD program.
00:36:50.271 - 00:37:42.565, Speaker A: Not to mention that you have, you know, very talented people guiding you through the process. You're working with other people who have similar interests to you and also have similar sort of freedom. So I really enjoyed the process. I don't think the end result in terms of certification is worth it, but the process was worth it for me. It also depends on what you mean by worth it, right? So if you attend a place where it's covered by a stipend or like a Research assistantship or a teaching assistantship, then I think it's at least for me pretty clearly worth it because I enjoy that kind of work. If you don't like teaching, don't really like research, and have to pay out of pocket for it, then no, it's probably not worth it. So it's, it's hard to really give a, an answer that applies to everyone here.
00:37:42.565 - 00:38:36.405, Speaker A: Is a Master's better in that sense? That depends on what country you take your Masters in. So what? The difference between a master's and a PhD and what they both entail varies a lot by continent, but also by country. So ultimately, what was valuable to me was the relatively unconstrained research time. And if you get that as part of a Master's, that sounds great. That may be fewer years where you get to do that, but that might be a worthwhile trade off for you. But for example, there are Master's programs that are maybe three or four years, but you have to take classes the whole time, so you lose a lot of that ability to budget or spend your time as you wish. There's also the opportunity cost.
00:38:36.405 - 00:38:58.775, Speaker A: Like there's a very real opportunity cost. Even if you don't have to pay out of pocket, then you're also not earning a programmer salary during that time. Right. Which is a pretty severe cost. And so worth it is very hard to answer. It's not the destination, it's the journey. Yeah, exactly.
00:38:58.775 - 00:39:33.835, Speaker A: Right. What's your PhD in? My PhD is in distributed systems and databases, I guess. Okay, next question. What is your partner's opinion of Norway? I would, I would have to ask her. It's. It's weird because we moved here June. We got to Norway June 3rd, and we moved into this apartment June 18th, 15th, 18th, somewhere around there.
00:39:33.835 - 00:40:31.195, Speaker A: And so there's been a lot of moving, like the past two weeks as well have really just been still moving, even though we moved in now a month ago, because it's like you have to get computer parts, you have to get furniture, furniture has to be delivered, then you realize you need other furniture. And it's just like there's an endless cycle of just like constructing a home. Even though, like, we're renting, so we didn't have to like buy a kitchen, but even so, you have to fill a kitchen. So I think everything is felt very temporary, very in motion, very in flux. And so I think now it's finally starting to settle down and we actually feel like we live here now. And so I think our opinion is very colored by that by the fact that we don't really have that. We haven't really gotten to experience it the way that it will be when we live here.
00:40:31.195 - 00:40:55.375, Speaker A: That said, I think. And also there's a heatwave in Norway, or was until very recently. So we moved here in the middle of summer. So, like, the sun was out for, like, most of the hours of the day, plus there was a heatwave, so it was extremely warm. So we moved here and she was like, you told me it was cold and dark. And it is the opposite of that. Like, to the point where it's, like, sweltering.
00:40:55.375 - 00:41:22.809, Speaker A: And in Norway, because, you know, we don't really get heat to the same extent as the rest of the world. People don't really have air conditioning. That's not a thing here. But of course, in the US Everyone has air conditioning. And so we came to a place where it was, like, it was swelteringly hot some of these days. So we came to a place where it was swelteringly hot and no ac, and it was bright all the time. So I think that made it a little.
00:41:22.809 - 00:41:51.745, Speaker A: I don't want to say miserable, but. But it put things off a little on the wrong foot. But I think now we're starting to settle in. I think, you know, we went to dinner at a restaurant yesterday, which is, like, the first time we've done something fairly normal. We now have most of the things in the house. We're not waiting for any major pieces of furniture anymore except a TV bench, but we're getting there. So I guess the answer is, ask me again in, like, two months and then we'll see.
00:41:51.745 - 00:42:11.213, Speaker A: Let's see. Yeah, I know It's. It's also only going to get darker and darker and colder and colder over the next few months. So hence again, ask me in two months and we'll see. But. But I think, you know, in some sense, I think she's prepared for this. Like, she.
00:42:11.213 - 00:42:33.325, Speaker A: She knows that that's what Norway's like and will. We'll just have to see whether that ends up being okay or not. And for what it's worth, like, I don't know if I'm settled on Norway yet either. There's a reason I moved away, like, I guess 15 years ago now. Wow. There's a reason I moved away in the first place. And it wasn't just to, like, explore the world.
00:42:33.325 - 00:42:54.345, Speaker A: And so it could be that a year from now, now my partner is like, yeah, let's stay. And I go, nope, I need to leave. That could Very much be the case. I genuinely don't know. But at the same time, you know, I really like Norwegian winter. I think it's nice, it's pretty, it's different, it's cozy. And the question is whether I can make that rub off.
00:42:54.345 - 00:43:58.501, Speaker A: Okay, next question. What's your recommendation for practicing Rust? I've read a bunch of books, but I still feel like I'm not sure what I'm doing. Do you have some interesting project ideas that could touch on some important Rust topics? The best way to practice Rust is to build things that you need. And I think I've stated this a bunch of times, but like, there's just no substitute for just building things, like building real things. And if you're going to be building real things, build things that you use or build things that you need. So either find a program or tool that you're already using and you want to make better and start contributing to it, or ideally start fixing, you know, bugs you found in it, features you want in it, or if there's some tool that you feel like is missing, then go build that and do it in Rust. That's the by far the best way to get experience, is to do that hands on and to be driven by something you're interested in.
00:43:58.501 - 00:44:38.083, Speaker A: If, like, what's interesting to me is not necessarily going to be interesting to you, so it needs to be driven by your interests. And when I say something you need, there's a slightly variation of that, which is something you want to build, right? So if you're like, man, I've really wanted to learn how databases work or how SQL works, then go build a database. Like, the docs for SQLite are really good. The code base is pretty readable. Go build a database. It might not be something that you're going to use for anything, but it'll be really interesting. And as long as you feel as though you're learning something, you feel like it's interesting, you feel like you're, you're driven to do more about it, then that's great.
00:44:38.083 - 00:45:01.828, Speaker A: That's also learning. But, but ultimately you have to build something real. The, the reading the books is. It's a useful step ladder, if you will, but. But it's not going to get you all the way. Okay, next question. AI relies a lot on GPUs.
00:45:01.828 - 00:45:38.403, Speaker A: What is your take on rust for GP? GPUs ignoring all the web GPU stuff that focuses more on shaders and graphics. Should the Rustline team work on proper hardware accelerator support at the language level? I Don't have too much to say on this topic yet. I haven't done a lot of Rust GPU programming. I've done some GPU programming in C and it was. Honestly, it was kind of fine. I wrote some OpenCL code and I think it is nice when the language is the language you use for programming the GPU is similar to the language that you use otherwise. And I think Rust could mimic that.
00:45:38.403 - 00:46:32.955, Speaker A: I don't know that you want just like GPU hardware acceleration for the language that feels like something that might actually be hard to pull off and have it not be full of leaky abstractions. I think what we might want is like a GPU version of the Rust language that then gets compiled to GPUs. That said, you know, it might be that you can totally do this through just library APIs and make that be pretty nice. But I don't know. I don't have a great answer for this, but I think there's a space for, although it is a lot of work, a space for a sort of Rust like language that targets OpenCL and CUDA. I think that would be pretty neat and it might already exist. Okay, next question.
00:46:32.955 - 00:47:11.381, Speaker A: Where in Norway will you be working from? Do you plan to be active in the local Rust community? So I moved to Oslo, which is the capital of Norway. It's like in the southeast corner of Norway. And I'll be working from home. Like this space right here is also going to be my office space. If you remember from my streams in Los Angeles, I had two separate desks, one for work and one for my home computer and streams and stuff, which I really like. I like having them separate so that I go into a physically different location to be at work or not at work. It just helps mentally a little bit.
00:47:11.381 - 00:47:53.447, Speaker A: Here I don't really have the space to do that. So I'm just trying to make this room as nice as it can and then try to find other ways to make it clear what is home and what is work stuff. But I'll just be using this one room as my office for all the streams and home projects and stuff as well as work. And yeah, I mean, my plan is to become active in the local Rust community. There hasn't been a Rust meetup arranged in Oslo for a little bit, but the next time one is arranged, I'll definitely be coming. My plan is just start to come to them regularly. Los Angeles, I think used to have Rust meetups, but then they sort of ended for a while and they were remote for a bit.
00:47:53.447 - 00:48:19.257, Speaker A: Which doesn't interest me as much. And also in Los Angeles everything is far and you have to drive, which is really annoying. Whereas here, basically wherever it gets arranged, I can just either walk or take public transport, which is really nice. So it makes it a lot easier to be be active. I might also end up being active in the sort of adjacent Rust communities. So the. The Copenhagen Rust meetup, for example, I think I'll probably go to.
00:48:19.257 - 00:48:38.797, Speaker A: Not super regularly, but every now and again maybe I'll give a talk there. That would be pretty fun. My brother also lives in Copenhagen at the moment, so I have a good excuse to come there for. For both. And same thing with. With Gothenburg or Stockholm, you know, I. That sounds like fun to go visit to.
00:48:38.797 - 00:49:20.725, Speaker A: Helsing also has companies in Berlin, Munich, London and Paris. And so chances are I'll be going to those places somewhat frequently as well. And if there are rust meetups happening at the same time, I'll go there. And the other thing that's nice about being in Europe now is it's a lot easier to go to most of the rust conferences, except for Ruskonf. Rustconf is more annoying to get to now because especially with a new location, the only flight is a two stop flight. But so like Rust Fest, Rust Lab, Eurorust. I'm sure there are others I'll be aiming to go to, which I'm really excited for.
00:49:20.725 - 00:49:55.325, Speaker A: Oh yeah, isn't my shirt great? I'm very happy with the shirt. That's great. Follow up question to the office. What chair is that? Oh, this chair. What's it called? It's called like the. It is called the Arazi Vernazza. Very, very fancy name.
00:49:55.325 - 00:50:16.141, Speaker A: It's a. It's pretty comfy. I kind of like it. It is this. I put it in chat. How do you stay productive when working remotely and how to stay disciplined. That's tough.
00:50:16.141 - 00:50:39.703, Speaker A: Like when I work from home, I don't actually. It's not a problem when I have a separate physical space because I can just go over there and basically track my hours. I have no problem being remote because that's how I work in open source too. It's all remote. That doesn't bother me. I don't need to be around people to stay motivated to work. I also try to choose jobs and this is also a privilege.
00:50:39.703 - 00:51:09.035, Speaker A: But I choose jobs where I enjoy what I do. And so staying motivated is usually not that hard because I'm working on interesting problems. Quite to the contrary. I need to make sure I don't work Too much because the problems are so interesting. But, but I, I am interested in seeing what it's going to be like now where my home space and my workspace are one and the same. I, I worry that that's going to make. It's going to start to blur the lines and it's going to be harder to focus at work because the home things are so nearby.
00:51:09.035 - 00:51:46.505, Speaker A: And it's going to be harder to focus on home stuff because the work stuff is so. Will so easily distract me. Um, I, I genuinely don't know how that's going to work yet. And, and I haven't yet figured out what my sort of tools are going to be for. For separating the two. Have you ever thought about moving to VS Code or IDE instead of neovim? No. I have basically no interest in having a non terminal editor.
00:51:46.505 - 00:52:07.445, Speaker A: There are a bunch of reasons for that. I just, I have no. There's nothing I miss. Or rather there's nothing I wish I had any of him just at all. I'm very happy with my setup. So I don't really see why I would switch because there's nothing I would switch for. Like there has to be something that pulls me to the other thing and there just isn't at the moment.
00:52:07.445 - 00:52:41.645, Speaker A: And so, you know, I've thought about it but there's just nothing pulling me in that direction. And then I need to like have a separate like GUI window open. And like one of the things that I do a lot, and you'll see this when you watch me do streams and stuff, is that I will actually exit my editor and then run cargo commands because I enjoy having. I enjoy being able to customize the commands. I enjoy being able to do it all by the keyboard. I enjoy being able to see the full Cargo output. I don't want it all to just be like buttons and pop ups in my gui.
00:52:41.645 - 00:54:01.935, Speaker A: Yeah, I mean Helix too seems like an interesting enough editor, but at the same time I, I don't really feel like I have anything missing from neovim at the moment and that might change, you know, Like I did switch from Vim to Neo Vim and there could be some day in the future where Helix is good enough that I want to switch. But at the moment, not really. Have you tried Copilot in VS code? No, I haven't tried Copilot anywhere because I don't really want AI to write code for me. Maybe that's just me being old and grumpy and old school and that I'm going to eventually get to a point where I see it being useful, but at the moment, at least, that's not really a pull for me either. My bottleneck is not my writing speed, and I recognize that Copilot can help you things like not have to look up API docs and such and Point well taken, but it's not compelling to me at the moment. And no, I haven't tried Helix. I really like Vim key bindings, and so anytime I try a new editor, my experience is well, but the key bindings don't quite work like nvim and that makes me sad.
00:54:01.935 - 00:55:55.285, Speaker A: Okay, since you're going to be working for a company in the defense sector, were you able to find out if the company is not involved in evil projects, for example Palantir? If yes, then how so the mandate of Hellsing is a little different than companies like Palantir. One of the things that I spent a lot of time thinking about before joining Helsinki was exactly this kind of questions of like, how do I know that I'm not getting into a space that I wouldn't be comfortable saying that I work in, right? Like, I need to be able to live with myself working for this company. I need to feel like the work that I'm doing is not just like valuable or important, but it's also like good, or at least not evil. And ultimately I managed to convince myself that that is the case for Helsing, at least for the time being. And a lot of there are a lot of complex, essentially mental analytics that go into that decision. And so I don't know that I'll be able to fully articulate it. But part of it came from talking to several of the sort of senior people at the company about how do you make sure that this company isn't evil? How do you think about the fact that the bar, the line that you might cross is so tricky, and also the recognition that, like, it's impossible to guarantee things in this space like defense and war are unpredictable beasts.
00:55:55.285 - 00:57:27.809, Speaker A: And so for example, it would be infeasible for a company to build technology and say this only works for defense, because realistically, defense is also offense. And very often the technology is sort of isomorphic, like it sort of works in reverse as well. So the question becomes not so much which technologies do you build? It does to Sometimes there are some technologies that are purely offensive, although you could argue, well, maybe they could be used for defense too. That's true, but there's like things like internal surveillance in a country, for example, that is much more borderline for me, much more gray that I'm not super comfortable with, but also not something Hellsing does. And I think the calculus for me came down to the fact that Hellsing isn't trying to say we would never build anything that could be used offensively, but rather we try to choose who we work with and try to choose to work with like you know, European democracies to meet a high bar for moral decision making, democracy, responsible use of technology and defense. And that's not perfect either but. But realistically I think that's sort of as close as you can get.
00:57:27.809 - 00:58:11.207, Speaker A: I think you have to choose your partners, you have to choose who you are giving the capabilities you're developing to. I think it is a losing battle to try to say I only build things that work defensively. The link to Helsing is Helsing AI. That excludes the uk. We sell far too much to the Saudis. Well, what's interesting is also that this isn't weapons export. Like Helsing doesn't build hardware, they build software.
00:58:11.207 - 00:58:59.949, Speaker A: And so if, if Helsing builds something for the UK military, for example, it's not something that the military can then sell on to another country, at least not. That's not really how it works. I don't have the insight into the company for like how lending equipment and such works for example, I can't really speak to that. But the goal here is very much to try to choose responsible partners. You said you won't use AI, but the company screams AI. What do you do over there? Yeah, so the company does a lot of AI, but I'm not doing the AI parts. I'm not doing like model tuning or working in Pytorch or anything like it.
00:58:59.949 - 00:59:51.713, Speaker A: Quite to the contrary, I'm working on the Rust stack and on expanding the Rust stack and I'm finding ways to take the stuff that's currently Python and moving it more into Rust where it makes sense. And so this is much more like Rust infrastructure, distributed systems than it is AI. My role that is at the company. So the company, one of the big things that does is sort of AI enabled technology but there's a lot of technology that surrounds and underpins the AI parts and it's that technology that I work on. And yeah, I mean Defense does have a reputation to be a bit slow tech wise. That certainly true. And I think that's one of the things that's really interesting about Helsing is that they're essentially trying to change that game, right? They're trying to Say the current way of thinking about software in defense is broken.
00:59:51.713 - 01:00:26.595, Speaker A: It does not work. And if you look at, you know, nations across the world that we're more concerned about, they're not making the same mistake. They're making heavy investments in software over hardware, and we need to do the same. If you look at, like the war in Ukraine too, one of the things that the Ukrainians have, have had a lot of success with is using technology. It's not by building fancier hardware. If anything, it's taking less fancy hardware and doing smarter things with it. And the way that you do that is you lean into the software engineering of everything you build.
01:00:26.595 - 01:01:13.529, Speaker A: Ways to like, do rapid deploys, software engineering at scale, feature improvement, like things don't take years, they take weeks, that kind of timescale. And then the question becomes, well, how do you square that with moving deliberately and without making potentially extremely costly mistakes so it's not obvious. Okay, next question. Again, if you have questions in chat, please put them in the, the Q and A page. Because chat disappears so quickly and it's hard to, it's. It's hard to keep up with it on the side. So post it there and then other people can vote on the questions too.
01:01:13.529 - 01:01:53.015, Speaker A: If you are in here and you're just curious about questions, go to the Q and A page and like scroll to the bottom and look for new questions people have asked that you think are also interesting and vote them up. So that way we actually get questions bubbling to the top that are interesting that are not just the ones that have been there the longest. So scroll down the page a little bit and look for questions that you might want to vote for. How are your cats? The cats are good. The cats have been on quite the journey. I mean, we brought them with us from Los Angeles to here. And so the first part of that was making sure that they had all the, like, paperwork they needed, which was a whole logistics nightmare of bureaucracy everywhere.
01:01:53.015 - 01:02:25.917, Speaker A: And the only thing they really needed was a rabies vaccine, which they've already had. But we needed another one to like, make sure the paperwork was right. But then there was just so much paperwork that needs to be signed and countersigned to be brought in the, sent in the mail. And it has to be like physically embossed pieces of paper that you have to bring with you. And it's a whole thing. And then, you know, we gave them some sedatives before the flight, and then we put them each in their own little soft cage. We brought them on the plane in the cabin and then they go under the seat in front of us.
01:02:25.917 - 01:02:52.715, Speaker A: So they were in the cabin with us. And it worked pretty well. They were a bit restless in the days leading up to the move because we were just packing everything down. So the house was just, there was no furniture. Everything was just disappearing around them, which freaked them out. And then we brought them to the airport and that was pretty stressful because there's lots of people, lots of sounds, lots of smells. But then the sort of sedatives were starting to, to work and so they sort of managed that decently well.
01:02:52.715 - 01:03:35.115, Speaker A: And we covered their little carriers and blankets to pad the sound and give them some darkness and feel like they were in a safe space. And then, you know, the flight is very long. The flight was 12 hours from LAX to Copenhagen and then we had two hours in Copenhagen, like a stop, like a layover. And then we had a 50 minute flight from Copenhagen to Oslo. And I think that Copenhagen to Oslo flight was actually the worst one because by then the sedatives were worn off. So the cats were like pretty unhappy and we were really tired. And that plane wasn't as nice, right? The, the long distance planes are generally, the long haul flights are better than the short haul flights.
01:03:35.115 - 01:04:14.997, Speaker A: And so that was just a lot that, that last flight was pretty rough. But you know, we, we got them all the way through and without any incident. Like, you know, we had a lot of pee pads in their little carriers and stuff. They didn't need those. You know, they didn't really eat or drink because they were nervous, but also sleepy. So they just sort of lay in there and we would, you know, pet them and soothe them whenever they woke up and got worried about where they were and what was going on. And then when we got to Oslo, we then have to take them on a train from the airport and into the city and then a car from where we got to the house.
01:04:14.997 - 01:04:36.929, Speaker A: So we were staying at my, my dad's old place just while we were waiting for the apartment. And so then they got brought to this completely new house and let out there. And then, you know, they had to explore that space. And over the next two weeks they got used to his house. But then we had to pick them up and move them again to here. And this was just an empty apartment. So now everything was stressful again.
01:04:36.929 - 01:05:04.335, Speaker A: But now finally they're starting to settle up. They've found little spaces, they've started playing again, which is the thing that they hadn't really done since a few weeks before, before we Moved from LA because they'd been so stressed. So now they're finally in like a playing mood again. They're starting to get cuddly again. So they're, they're getting better. They're like picking their favorite window sills to sit on. I don't currently none of them are in here.
01:05:04.335 - 01:05:22.315, Speaker A: I'm trying to get them to. I'm trying to get them to make my office their base. But we'll see whether I succeed. Let's see. Oh, shows the cats. Miso. Miso.
01:05:22.315 - 01:05:51.965, Speaker A: Miso. Do you want to come here, Chai? No, I think they're sleeping. It's the sleeping time of the day. They sleep until usually around like 8:30 and then they want to play and eat. So they're currently all sleepy. Yeah. Chai is called Chai because her coloring looks like milk in black tea.
01:05:51.965 - 01:06:17.915, Speaker A: And Miso is named Miso because. I don't know, I like Miso, but also because she's like white, yellow and black. I don't think you can get black Miso, but you can get white Miso and yellow Miso. So that's close enough. It's also just a cute name. Let's see. How do you navigate the stress of relocating and interviewing at the same time? That was pretty rough.
01:06:17.915 - 01:07:08.935, Speaker A: Not gonna lie that because especially because the interviewing was happening like the same week that all the packing was happening. We were packing everything down into boxes. But also we couldn't pack everything because I needed things for interviewing, like my computer set up and stuff. And so progressively my interviews were done with worse and worse hardware all the way down to like the laptop on my lap. And so that was stressful. And I think it was stressful for my partner as well, because, you know, it meant that I wasn't around to help with as much of the logistics and packing because I had to be, you know, emailing people and looking at, doing interviews and following up on LinkedIn requests and whatnot. So that was a lot of time, which was unfortunate.
01:07:08.935 - 01:07:35.637, Speaker A: Like, I wish in some sense, I wish I'd started that earlier. The reason I didn't start it earlier was because it didn't really. It didn't really work with my departure from aws, which I also. I didn't know that I was leaving until a little bit later. So it was hard. Oh, Miso paste can be dark or black. True.
01:07:35.637 - 01:08:10.115, Speaker A: Yeah. Misa is great. Okay, next question. What is your daily routine? Let's see. So my daily routine is about this. I'm expecting it to be about the same Here eventually, as it was in LA, which is I usually get up around like 8, 8:30 and then I aim to start work around 9ish. I'm normally more of an evening person but for whatever reason I've started waking up earlier and I don't love it.
01:08:10.115 - 01:08:28.885, Speaker A: Maybe I'll shift my whole day. There's this thing called the. It's a Danish thing. The Bee people society. Yeah, the bee society. Right. So here, let me send you this.
01:08:28.885 - 01:09:01.425, Speaker A: It's great. So there are A people and B people. A type people get up early, B type people get up late. And I'm definitely a B type person. But the whole observation from the society is that our entire society, especially in western culture is based around eight type people schedules. So like people expect you to be at work at 8 or 9. People expect to have dinners at certain time and nothing is open late at night.
01:09:01.425 - 01:09:36.894, Speaker A: You know, if you have kids and bring them to kindergarten, like that closes on like a people schedules. And so this observation was like, that's unfair to like the significant portion of the population which are B people. They just don't align with that. So they live their lives sort of offset from their optimal routine. And their claim, at least this was their claim a few years ago, was that honestly the way to do this is we have to split society. We have to like have A people work and B people work. We have to have A people kindergartens and B people kindergartens, A people schools, B people schools.
01:09:36.894 - 01:10:09.425, Speaker A: And it's extremely costly and probably never going to happen. But that's one of the reasons why I've ended up becoming earlier in addition to I think the sun and getting older is that I think I've now just accepted the fact that society operates on an earlier schedule. And so I'm at a disadvantage if I don't follow the same schedule. And it sucks. I like sitting up like late at night when it's dark and quiet. It's great mornings, not a big fan, but I've sort of ended up there. So I get up around 8, 8:30.
01:10:09.425 - 01:10:47.885, Speaker A: I have breakfast which is usually just granola, muesli, yogurt and blueberries or strawberries and some honey. Very good mix as breakfast. And then I work from 9ish until like 5:30ish. I usually take about an hour for lunch. Somewhere in there. I try to make. The way that I try to work is I work when I'm productive and if I feel like I'm just not productive right now, then I go do something else and then I make up the time elsewhere because there's just no point in me sitting at a desk not being productive.
01:10:47.885 - 01:11:29.075, Speaker A: That doesn't help anyone. It doesn't help the company I work for. Arguably I shouldn't even need to make up that time. But that depends on the company, how forgiving they are with that. I don't know how Helsing is here yet, but I'm certainly of the opinion that requiring people to sit at their desk if they're at that time not productive, as long as they're generally getting their work done, is probably counterproductive. And so I try to identify when I'm sitting there and just slogging through and at that point take a break and do something else, Go play with the cats, go outside, you know, touch grass. So I do that lunch.
01:11:29.075 - 01:11:43.135, Speaker A: I bake sourdough because that's the thing that I do now. I'm that kind of person. Apparently. I'm very sad about my sourdough here. I didn't have a chance to bring my latest batch so I had to use an earlier one. I've dried and it's just not as good. It doesn't rise as well.
01:11:43.135 - 01:12:27.937, Speaker A: I need to like revivify my. My sourdough yeast. I tried to bake it the other day and did not work well. So I have some sourdough for lunch with like, usually like avocado, which is harder to get here, and caviar cheese because caviar is tasty and cheap in Norway. And then work more and then end around 5:30 and then dinner maybe around 6:30 or something. Usually we make it at home and then play with the cats and feed them. I do that in the morning and do that in the evening and you know, then whatever I want to do in the evening, really watch tv, open source stuff.
01:12:27.937 - 01:13:19.769, Speaker A: And then usually on weekends, you know, that's sort of what I consider my free time. But of course, or do streams is all the things I do in the evenings and then during the weekends I do things that I want to do, which often includes just like doing things with my partner. Open source stuff. My personal email, which takes a lot of time, so much time just goes to like open source things. Like things that I've given my time away to. And then Monday is back to work again. One of the things that I really liked about my position at AWS and I think I'll probably end up doing something similar at Helsing, is to have my educational rust streams be essentially a part of my work.
01:13:19.769 - 01:13:45.505, Speaker A: So I would take, you know, a Friday every few weeks to do or half a Friday or something to do a crust of Rust Stream or some other Rust Stream. And that would just be. It wouldn't be on behalf of Amazon. Like Amazon wasn't sponsoring them. There's no Amazon branding or anything. They didn't have any say. But it was more like I was allowed to take personal time to do the streams during work hours kind of arrangement and that worked really well.
01:13:45.505 - 01:15:00.073, Speaker A: And after having spoken to a bunch of the people at Helsing, I think I'll be able to do something similar there after a little bit of time. I just need to get oriented a little bit first and some contract things need to be figured out. But that really helps with the daily routine because if, if I can't do streams on work time, it means I have to do them on weekends, which then steals away basically a day of my weekend whenever I do them, which isn't ideal. And as I mean especially for the longer streams, like if I do a seven hour stream, that's my Saturday gone, right? Oh, the A person, B person concept is not specific to Denmark, but the Bee Society I think started in Denmark. Let's see. Okay, next question. Can you talk a bit about the state of the Amazon build system and Rust? What kind of impact on its usage of the company did you feel you personally had? Personally had is hard to answer, but I.
01:15:00.073 - 01:15:33.563, Speaker A: So Amazon has this internal build system called Brazil. Think Buck Basil. This is a similar kind of ordeal. It's a little different, but you get the idea. It's like an overarching larger build system and then you write sort of integrations between that larger build system and how you want to build any given package. And then we have sort of standard integrations for many of the supported languages like Rust. And I built the integration between Brazil and Rust, or rather one existed that was community built before I joined Amazon and that was pretty good.
01:15:33.563 - 01:16:39.705, Speaker A: It was in a better state than many of the other language integrations. But one of the big things that I did was I rewrote that integration to be much more cargo centric. So it was focused on you can just use cargo the way you're used to outside of the company, inside of the company. So when you were using Rusted Amazon with this new system, what you would write as your sort of build system rules is really just a CI script that just runs a bunch of cargo commands and there's a cargo sub command called Cargo Brazil that will then deal with anything that needs to go across the boundary to Brazil things, things like pulling dependencies from Brazil into your cargo build, or publishing things out of your cargo build into Brazil as sort of output artifacts, things like binaries, shared libraries, that sort of stuff. And so I built that integration and I think by the time I left it was about 50% of usage had moved without any really forcing function to make people move. It was more like announcing that you can do this now. And then people got pretty excited and started moving.
01:16:39.705 - 01:17:55.267, Speaker A: And I think that made the experience a lot better. I did a decent amount of work on security integrations, which I can't talk too much about the details there, but on security integrations of the build system and stuff, as well as things like provenance tracking and auditability of dependencies, that kind of stuff. And then I did a lot of just sort of guidance. So other teams that were building things in Rust, whether in service teams at Amazon or in other build teams, just helping them with making decisions, solving the Rust problems, debugging the Rust builds, you know, dealing with future proofing or upcoming breaking changes in Rust that might break them, like the. When Rust changed which version of the Android NDK they built against, that had some repercussions internally that I dealt with. So it was a lot of really just sort of glue, like holding together all the different parts of the internal Rust ecosystem, which was really fun, but also pretty exhausting, mostly because I think we were a team that needed a lot of people. And I think this applies to every language ecosystem internally.
01:17:55.267 - 01:18:58.955, Speaker A: Like, if you're going to own the language experience, that's a pretty hefty task if you want to do it properly. And I think our team ended up in a place where we didn't quite have the amount of investment and support from our leadership that we think we needed to truly excel at the tasks we've been given. Oh yeah, the name Brazil comes from Brazil. The Amazon River. Going through Brazil. Okay, next question. How often do you exercise and does it help you write better code? I don't really exercise and I should and it would probably make me write better code.
01:18:58.955 - 01:19:30.513, Speaker A: Realistically, the answer here is I. I used to rock climb a decent amount. Now I haven't done it in ages and it makes me sad. I want to get back to that. Hopefully that'll be easier here because I can actually walk to places rather than having to drive there. Again, I hate having to drive places and especially when it ends up being far. But also I started jogging back in la and I started jogging like almost every day, which is maybe an aggressive place to start, but I started jogging maybe a month or so before we moved.
01:19:30.513 - 01:20:23.661, Speaker A: And so that of course, then got completely interrupted by the move. So I'm hoping I'll get back to that here, but I haven't picked that back up. It does mean that my body is pretty tight, so need to like stretch and stuff and get massages and things to like, help with the fact that I sit a lot. And that's unfortunate. And, you know, exercise is one of the things that helps with that as well. Okay, next question. What's your take on the whole AI replacing engineers hype? And if you believe in it, do you think there are any areas in the software industry, apart from arml, that might be insulated from it? I don't think AI is replacing engineers, at least not for quite some time.
01:20:23.661 - 01:21:25.369, Speaker A: I think what AI does is it changes the way that you build software in some cases. In other cases, it changes the role of the engineer to being more of a debugger and guider than it is a programmer. At the same time, AI just isn't good enough yet to write code. One of the problems, and I've had this conversation with a bunch of people now, that at least my perception here is that AI, the AI, is really good at pretending to get things right. And it does really well in spaces where the delta between almost correct and correct is imperceptible to humans or close to it. The problem with engineering is that the delta between almost correct and correct is like a chasm. If you have an almost correct program, then it is wrong, and if it crashes, then that's great.
01:21:25.369 - 01:22:06.535, Speaker A: But if it doesn't crash, you're in a really tricky spot. And I think that the problem we're going to run into or the problem you run into when you try to use AI to say write Microsoft Word is that it's just not capable of that level of systems design, writing that level of code. That's all correct. Engineers aren't perfect either. That is totally true, but I think there's an order of magnitude difference there somewhere. That's not to say that AI won't get there, but I'm not really seeing it replace engineers at the moment. And I think it'll take some time to get it there because getting from 99% right to 100% right is pretty far.
01:22:06.535 - 01:22:45.275, Speaker A: And that that correctness, like there's just very little room for error. At the same time, it's a constrained domain, like you have a compiler that can help you. More strict languages might help here, might let the AI like iterate by checking things and proposing something and it doesn't compile, then trying again. But I think realistically maybe over time we'll see engineers move more into a debugging, guiding QA kind of role. But I'm not worried about that happening anytime particularly soon. But it's hard to say. It's an area to speculate in.
01:22:45.275 - 01:23:49.863, Speaker A: I also think that there's going to be a need for engineers to do like the larger systems thinking for quite some time. Like I feel like a lot of the engineering I do is like gluing together different systems that have very little documentation. No one knows how they really work. And it's partially like figuring out how to how they work. Pretty interactive, like not quite reverse engineering. But there's a lot of like trial and error in a way where it's not as though they're just facts from elsewhere that get injected into the program and then it's ready. I think engineering that does work like that, like if you're doing web design for example, that there you might get into more trouble because the precision isn't quite as necessary there as well as I don't want to say formulaic, but it is more of the stuff that goes into the output.
01:23:49.863 - 01:24:32.559, Speaker A: There are examples of elsewhere that the AI can have learned from which is less the case in like low level stuff interacting with hardware that area. LLVMs are amazing predictive text engines. Yeah. I mean they're very good at generating realistic sounding text. But that's different from generating correctly syntaxed and semantically correct code. Oh yeah. Not to mention making someone pointed out to chat, making changes or extending AI generated code is a nightmare.
01:24:32.559 - 01:25:14.675, Speaker A: And I believe that because one of the things that as engineers we get really good at is not generating code for a given task, but figuring out how do we write this code in such a way that it works with all the other stuff. It's not writing code in isolation. Let's see, generating things like tests is a great use of current ML tools. I believe that. And that's partially because that space is fuzzy. It's not as though you're targeting something correct, you're targeting a bunch of different things where many things are a correct test you might like really realistically there are almost an infinite number of tests. Right.
01:25:14.675 - 01:26:00.221, Speaker A: Software engineers will bog towards more formal specification and let the AI extend compilers handed automated reasoning code gen and simulation. Yeah, that's the other potential path forward here. Right. Is that engineers end up doing a lot of the specification of what does correct even mean in the Space. Maybe AI does code generation or even proof generation guided by humans, but ultimately like rewrite the definition of what they are the inputs, what are the outputs, and what does correct mean. And then the AI just sort of generates everything that goes below. And then you have like, you know, use formal verification methods to check that what it generates actually matches the specification.
01:26:00.221 - 01:26:42.615, Speaker A: That could also be a path. I think that's even further along. Getting the AI to generate both getting good enough proof assistance and getting the AI to generate reasonable proofs and in such a way that even if it gets the proof almost right, you can get it to be right and getting it to generate the code that matches the proofs. Like, I think that's a long, long journey. So again, not particularly worried about that. I'm not sure I trust an LLM to generate tests that cover all the edge cases I care about. I don't think that's the right way to think about it.
01:26:42.615 - 01:27:27.975, Speaker A: I don't think you want the LLM to generate all of your tests. I'm saying you could add this to your testing arsenal. So in addition to writing the tests that you know you have to write, in addition to things like, you know, you might use tools like Prop Test or Quick Check or something like it that does property based testing or fuzz testing, those are valuable too, but they just randomly walk the space. And those are also valuable. And you could imagine that AI becomes another tool like this where you describe, I have a function that takes these kinds of inputs and produce produce these type of outputs, generate some challenging test cases for this and it might generate something that's somewhat reasonable. And now you have more test cases. So I think that's a totally reasonable way to try to try to do this or try to use it as a tool.
01:27:27.975 - 01:28:16.239, Speaker A: Have you seen some of the recent developments with 1 billion token transformers? That would mean the AI could have exponentially more context than it currently lacks. One of the challenges is that the context here isn't context that's available at training time. It is context of the problem space that I'm giving it a prompt in, right? Like the context is in the prompt, it's not in the training data. And that's where you run into challenges like I need to tell it about all of the code in which I am trying to write this function. For example, we need to turn coding into math. I mean, that's what formal methods do. It's good to write in tests before you write your code.
01:28:16.239 - 01:28:41.753, Speaker A: But if you provided with code and say, test this nine out of ten times or write tests that will pass 100% of the time. Yeah, I believe that. So it's essentially like test driven development. Right. And I. I totally believe that it works better in that kind of setting. All right, let me.
01:28:41.753 - 01:29:05.067, Speaker A: I'll be right back. Let me see what this phone call is. I'm back. It was a delivery I was waiting for, so I needed to pick up the phone. So they don't just leave. Um, all right, next question. I assume you can now see me and hear me.
01:29:05.067 - 01:29:24.335, Speaker A: I guess one way to find out is to go look at this. Yes, fantastic. Okay, Mark has answered. Let's see. Next question. The job offers of Helsing aren't remote only. Aren't remote only as far as I can see.
01:29:24.335 - 01:30:05.681, Speaker A: Will you work in Berlin, Munich, Paris or London at least part time. So this one's a little tricky. So because of the domain that Hellsing works in, there are a bunch of things that just have to happen in person or have to happen on location. And so as a result, Helsing is at least in part, a sort of company that is pretty focused on location, location based work. But that said, there's a lot of work that has to happen, you know, across countries, across locations. And so. And it's not as though you can't work from home.
01:30:05.681 - 01:30:24.985, Speaker A: It's not as though you can't work remotely. It's more that it's a little trickier than for companies that are in different. In different areas. And so as a result. Sorry, don't panic. Don't panic. All right, come back.
01:30:24.985 - 01:30:58.663, Speaker A: Let's see. So the. Yeah, so. So the, the positions that they have are. All the ones that are listed are at location because many of them require that you are near a location. So that for the work that requires you to be in a particular location, you're actually near that location. But in general, what I would recommend is that if you are interested in any of the jobs that Helsing has, you should get in touch anyway, even if you're not near one of those locations.
01:30:58.663 - 01:31:50.365, Speaker A: And we can see what we might be able to figure out. But the company is like, there are some things that will require you to be on location. In my case, what will probably happen is that I'll be working remotely from here, but I will probably be traveling to the other offices, not necessarily frequently, but with some regularity. And part of that is because the work that I'll be doing isn't going to be tied to a specific location all that often. I won't be working on A team that works specifically with the German military. Instead, I'll be working on more infrastructure, distributed systems kind of stuff. And so as a result, I'll be working with many different teams that are in turn working on location.
01:31:50.365 - 01:32:37.255, Speaker A: And what that means is I have more flexibility both to work remotely, but also to work across these locations. Which is all to say, if you're interested in this kind of work, get in touch. And there might be similar kinds of roles with similar kind of flexibility that might fit you. Same thing with, like, if you live near some of these places, then it's not like you have to come into the office every day. And so they're pretty flexible in terms of arranging for you to work from home, for example. Okay, favorite purchase of the last six months. Of the last six months.
01:32:37.255 - 01:33:54.393, Speaker A: Oh, that's tough. I was going to say, like, I've bought a bunch of furniture, but I don't know if any of them would be my favorite purchase. Okay, I'm going to give a slightly boring answer, which is, when we traveled from LA to Oslo, I decided to buy, not coach, like, not economy tickets, but buy like the plus class, not they don't allow cats in business. Otherwise I would have bought business tickets, but I bought like the economy plus kind of thing. And that I think was one of my favorite decisions to have done because trying to travel with two cats and the two of us and we had 10 checked bags, trying to do all of that in like in coach I think would have sucked. And so I'm very happy with that purchase. But it's not a purchase of a thing.
01:33:54.393 - 01:35:07.875, Speaker A: It's a purchase of like, luxury upgrade. But I think it qualifies. See, is reducing your job pool to remote only something that made you miss out on great opportunities elsewhere? That's very hard to say, right? Like, I don't have the counterfactual here. I don't know whether I don't know whether there are interesting job opportunities that I did not get because I announced that I would only work remotely. But at the same time I don't really care. Right? Like, for me it is so important to be able to choose where I live and to be able to work from home and to be able to like be around my girlfriend, be around my cats, have lunch at home. Like that all matters so much to me that if there was a really interesting job that requires me to go into the office all the time, that trade off isn't worth it to me.
01:35:07.875 - 01:36:08.509, Speaker A: Which is all to say, like, it may very well be that I've missed great opportunities elsewhere, but I'm okay with that. If that is indeed the trade off that I had to make, then that's okay. Okay, next question. In the long term, do you plan on being an individual contributor throughout your career? Yeah, I mean, I have no desire really to go into the managerial track. I think, you know, as you become more of a senior engineer, you end up taking on more sort of technical leadership tasks. So they're not necessarily management, but they're more like strategy, direction, mentoring, which maybe sounds kind of managerial, but it feels different. But yeah, I'm not really planning to go away from an IC role.
01:36:08.509 - 01:36:49.983, Speaker A: The closest would be if I end up in a sort of CTO kind of role, then maybe that would be the closest. Alternatively, you know, I've been thinking of going into sort of consultancy and essentially do Rust consultancy. And that would also be a little different from being an individual contributor. Right. It would be more sort of come into companies where my. Where I might be able to make a difference for them, but that's not necessarily writing code for them. That might be, you know, coming in and helping them with strategy decisions about how to adopt Rust.
01:36:49.983 - 01:37:28.151, Speaker A: It might be coming in to do teaching, which is also not really an IC kind of job function, if you will. Which is all to say, like, I really like writing code and I think I will be an individual contributor for the rest of my life in some capacity. But it might be mixed with some other things, like education, for example. Okay. Any reasons for leaving Amazon other than better opportunities and location? So my departure from Amazon is. Is a little bit complicated, but. But not super complicated.
01:37:28.151 - 01:37:49.445, Speaker A: Essentially it was a combination of. I didn't feel like they. I feel like they were leaning in. They were leaning away from remote work. And I think the world is moving towards remote work, and I certainly am. And so the company is moving the opposite direction of what I am. And that just inevitably leads to friction down the line.
01:37:49.445 - 01:38:21.971, Speaker A: In addition, I was expecting that the compensation they would offer me in Europe would just not be compelling. And part of the reason for that was I went through a promotion cycle where I did not get promoted to principal and basically got told, try again next time and then you'll probably succeed. Which is a little demotivating. Right? Like, it doesn't. It feels weird. But that also correlated with me not getting the compensation with the mood that I was sort of hoping for. So those are two of the parts.
01:38:21.971 - 01:39:29.021, Speaker A: And then the third part is that I think the company wasn't making these strategic investments in the sort of build system space for Rust that I was hoping they would, or rather, you know, they started making that investment and then sort of tried to hedge their bets. And I felt that, like, we didn't quite get enough people that we wanted. And also they were hesitant about the people that we didn't manage to get. Not in terms of the quality of them, but just like, are we spending too much resources on Russia? We spending more on other languages that are used internally? And it made it a little bit of a frustrating environment to work in where you feel like your leadership chain isn't all in on what you think is really important, no matter how much you're articulating the value and the importance of it. And so that was pretty frustrating. And so altogether I sort of felt as though I did really good work at Amazon. I feel like it was interesting, I feel like it was important.
01:39:29.021 - 01:39:53.715, Speaker A: I think I enabled a lot of cool projects as well internally, but I also felt like it was time with the move to be like, okay, I'm going to go elsewhere and see what else there is to do. Miso, come here. Do you want to say hi? Hi. Miso, come here. Yeah, come here. Well, you're gonna be difficult. Come here.
01:39:53.715 - 01:40:17.105, Speaker A: Hi. Did you wake up? Did you wake and you didn't find anyone? Yeah. Did you wake up and you didn't find anyone? Hi. You're very cute. Do you want to go say hi to the camera? Look in there, in there. There's a lot of people sitting right in there. I know you really want to get.
01:40:17.105 - 01:40:22.245, Speaker A: I get it. Okay. Okay. Okay. I'll put you down here. Here you go. Okay, bye.
01:40:22.245 - 01:40:52.395, Speaker A: Primogen is in chat. Nice. Okay, next question. What is your take on Rust for data engineering tools? Yes, I think Rust is great for data engineering tools. I don't. That's my take. I don't think it's a particularly hot take.
01:40:52.395 - 01:41:30.239, Speaker A: I think it's just right. I think, you know, people tend. I think what the questionnaire is asking is like, well, for a lot of this data exploration stuff, Python is great because you can iterate quickly, you can get to something working quickly. That's all true. If you're just building a throwaway tool, if it's something you're just going to iterate on for a little bit and then you have something that works and then you're going to run it once and throw it away, that's fine. The problem is it's very rarely true in practice. You're going to iterate a bunch in the beginning and then it's really nice to have Python or something that's actually interactive, but then you're going to end up using it for longer than you thought.
01:41:30.239 - 01:41:53.579, Speaker A: You're going to come back and visit it later and then have to understand what the code is doing and why. You're going to have to refactor it later. Other people might try to contribute to it later. You might have to integrate with more tools over time. The logic is just going to keep growing and getting more convoluted. You need to extend it over time. And at that point it's no longer a throwaway prototype, it is an actual piece of software engineering.
01:41:53.579 - 01:42:49.851, Speaker A: And then it is nice to write it in a program proper language. That and proper language is perhaps too strong here, but write in a language that lends itself to doing things well and not in a throwaway fashion. And I think that is more true of Rust than it is on Python. And so even though the iteration speed for your initial prototypes might be slower in Rust, I think long term it is often the right decision and then you need to use some amount of discretion to figure out sometimes Python is the right answer. Yeah. Or you end up throwing it together and then it runs longer than you think, it ends up being too slow or it ends up having to scale to more machines or it has to scale the larger data sets and so you need to rewrite it anyway. And like essentially I think you just, just do it in Rust from the beginning.
01:42:49.851 - 01:43:24.565, Speaker A: Like it's just very rare that you write true throwaway one time prototypes that don't matter. Certainly not in a corporate setting. Are you available for mentorship? So the answer to this is no. And the reason why is I just do not have the time. The slightly more nuanced answer is that I do mentorship at the companies I work for. So at Amazon I had a few mentees. Some of them I'm going to follow up with after, you know, once I've settled into my new role as well.
01:43:24.565 - 01:44:24.825, Speaker A: And I'm guessing I'm going to end up with some mentees at Helsing too. But realistically I just don't have enough spare time to devote to mentorship. I wish I did, but I think I'm more impactful at sort of larger scale, one to many communication like this that I am at mentorship, even though I really enjoy mentorship and I think it's important, it's just not where I end up spending my time at the moment. How do you organize your to do's? You're incredibly successful. Some tips and tricks would help. Well, I'm terrible at organizing my to do's, so here's the, here's the rough progression. I started using some kind of to do list app Microsoft to do or something and I completely failed to keep up with it and forgot everything that was in there, forgot to add things there.
01:44:24.825 - 01:45:12.865, Speaker A: It was a mess. And then I started using phone alarms. So on my phone I set an alarm for some time in the future, like not a calendar event, but an actual like alarm. And I set it for like one of the days of the week, repeat on that day at this time when, and I pick a time and day where I think I might be able to accomplish that task. And then in the description of the alarm I put what I'm supposed to do, what my to do item is. And that works surprisingly well because it will actually make you do those things or at least alert you to the fact that you should be doing them. But it also doesn't scale to very many tasks or to particularly complex tasks or anything where they're not really a thing that you want an alarm for every week.
01:45:12.865 - 01:46:09.789, Speaker A: Like I've had some alarms that are recurring for like a year every week, but they were like things I'm not going to do for a few years. And that clearly doesn't work. And then I started having a in my shell script that runs when you open a shell, I would print out in different colors my to do list ordered by sort of rank of importance. And I wrote it so that the higher the so things would be displayed randomly, whether an item would be displayed or not would be random. But the more important it is, the higher a likelihood there would be that it would be displayed. So high priority items would be displayed all of the time. Low priority items would be displayed like 1 in 20 shells I open or something that worked okay, but it doesn't really synchronize across devices.
01:46:09.789 - 01:46:45.971, Speaker A: It's annoying if I think of something to add to my to do list on my phone, but then I want it to be on my computer for like persistence. It doesn't really work across computers very well. I don't really want to check it into my public git configs. So that was decent but didn't really work super well. Then I started just having a giant todo MD file in my home directory that my shell would just print out every time I started my shell. And so it got to the point where when I start a shell, I got a screen full of text before I got my prompt. Clearly also doesn't really work.
01:46:45.971 - 01:47:35.315, Speaker A: It's just worse than the other one. Now I use Obsidian and it's pretty good, but it doesn't really work as a to do list because it doesn't remind me of anything. But it does sync. So I think where I've now landed is I use my alarm technique for anything that warrants an alarm and anything else goes into Obsidian. And I still haven't figured out how to remember to check Obsidian, but that is a second order problem. But the alarm trick works honestly really well. Okay, next question.
01:47:35.315 - 01:48:38.135, Speaker A: Which aspect of Norway in general if any disappointed or annoyed you upon your return after so many years abroad? Honestly, the lack of Amazon having Amazon is just so useful. Like I've had to now just find so many stores that sell the things I care about and a bunch of the things aren't sold here and or I have to find some obscure site that sells it. So now I suddenly have accounts on 30 different online stores to buy all the sorts of different things and just the ability to order it all on one site, have my order history all in one place. It is a next day delivery for everything. It is just so convenient. Second thing is, it's frustrating that there aren't really it's. I have an inclination for whenever I want to buy something I try to find the best version of that thing.
01:48:38.135 - 01:49:06.655, Speaker A: So I do a decent amount of research and digging into what is the best X before I buy a X. And that works really well in the U.S. because the U.S. has so many people. So there are always people reviewing things. You have stuff like Wirecutter which is fantastic. Norway is a much smaller market but even so European just doesn't really have the same kind of review.
01:49:06.655 - 01:49:41.171, Speaker A: Places that do like in depth reviews like Tom's Hardware or PC Gamer or PC World or Wire Cutter or Spruce or Good Housekeeping, like there's so many of these in the US and Europe doesn't really have them. And I think partially that's because there's so many languages spoken throughout Europe. So they're not. You don't get that effect of having lots of people speak English. So there's an English speaking site that does it for Europe. You get it a little bit for the UK only but different products are available in different subsets of Europe. And so that.
01:49:41.171 - 01:50:16.425, Speaker A: That's a little bit frustrating. And I think the third thing is deliveries here are a little bit of a mess still. Um, and I think they are in the US too to some extent. But like the fact that in general I have to be home if I want something delivered home and there's, they don't have like keys to get into the apartment building or anything. There's no code. It's just like you need to have the key and only a few people have the key. There are a bunch of different delivery companies and some of them are just really bad.
01:50:16.425 - 01:51:11.069, Speaker A: So the delivery experience is a little frustrating like mail wise. But that might also be because we now live in an apartment building where there's no code on the door. Okay, let's see. Do you think it's due to the social aspect? Are you in more of a less consumerism area now? Maybe, but like people have to buy stuff in Europe as well. And you know, it's not, it's not as though we don't buy things. Maybe it's more of a, it doesn't matter, everything is kind of the same. But that's just blatantly false, right? Like if I want to buy, one of the things that I'm now going to buy is nas, like a network accessible storage thing.
01:51:11.069 - 01:52:02.401, Speaker A: And the ones that are available here aren't quite the same ones that are available in the US So I can look up reviews in the US but not all of the candidates that are going to be available here. And I'm struggling to find good like reviews of NASA's that are available in Europe. I have now found one. So I don't need lots of recommendations but like it's just, it's like what do other Europeans do in this case? Like where do you go to find which one is the good one? Because if you just go to a random electronic store and buy the first one you see, it'll probably work. But like I want to put the bar a little higher than that. There are drop off boxes, like delivery boxes, but that doesn't really help for larger deliveries. I have a post office that's really close to here which is very handy.
01:52:02.401 - 01:52:27.475, Speaker A: So I can get things delivered there and then go pick them up, but they have limited opening hours. There's like a drop off box somewhere near there that is a little bit better. But for anything that's larger that doesn't really work. Like if I order, you know, cat sand for example, that's pretty heavy. I don't really want to carry giant box of cat sand from the post office to home. I want it to be dropped off outside of my door like Amazon would. And I don't really get that here.
01:52:27.475 - 01:53:14.879, Speaker A: Yeah, the Q and A is going to be available on YouTube later. Yeah, Amazon is available in some parts of Europe. But Amazon Europe is also fairly different from Amazon us. It's not as unified in a sense. The selection isn't quite as good, the prices aren't quite as good, the delivery options aren't quite as good. They're also not in Norway at the moment, which is partially because Norway isn't even in the eu, which means we're sufficiently different. And it's partially, I think, because of the high sales tax, and it's partially because it's just a very small market.
01:53:14.879 - 01:54:02.145, Speaker A: The incentive to go here is smaller, but I'm hoping they'll eventually come here and that would be handy. Okay, I don't see any streaming libraries for Rust. Is it difficult to implement one with all combinators in Rust where there's no garbage collector? Referring to streaming libraries like aka streams, FS2 Zeostreams. I don't know anything about this question. I think they're. I don't know what those types of streams are, but there are certainly libraries out there for doing data streams in Rust. I don't know whether they're anything like the streams that you talk about, but I'm going to skip this question because I don't have anything meaningful to say.
01:54:02.145 - 01:54:57.555, Speaker A: Did you ever think of starting your own company? I already have. Ready Set is a company that I co founded, which is basically the company to commercialize Noria. So Noria is the database I built for my PhD, and that research project was then essentially fostered into a company called Ready Set, which now build that as a commercial product that I don't think they sell a product you can buy at the moment. The reason I say, I think, is because during my time in the U.S. i basically was not allowed to interact with the company because for visa reasons I'm not allowed to have a second employer which interacting with the company would count as in an advisory capacity. And my Amazon contract wouldn't let me, so I was like doubly barred. So hopefully now in Europe I'll be more able to interface with the company and sort of help them along.
01:54:57.555 - 01:55:59.943, Speaker A: But it's pretty cool. They have some really talented people working on it and I'm pretty excited to see it become like Nora become a real thing in terms of this question more broadly of starting my own company. I think if I start a company it will probably be around sort of Rust consulting work, and I don't know exactly what nature that's going to take yet, but I'm not going to start like a big company. That seems unlikely. Okay, what do you think about all of the Rust Conf scandal. I mean this, this topic has been debated to death on the interwebs, but I think it was pretty appalling the. So the way in which and the decision to retract this, the keynote speakership I think is not okay.
01:55:59.943 - 01:56:35.935, Speaker A: I think it's really bad. It sucks. And not just it sucks, but it's. Offensive is the wrong word, but it's pretty close. I think it is real unfortunate that the way it happened was through sort of shadowy behind the scenes conversations. At the same time, I don't think it is as nefarious or malicious as it originally came out as. And I think that's been backed up by what's come out since.
01:56:35.935 - 01:57:36.071, Speaker A: You know, I think to an extent this is humans are complicated and to an extent it is communication is hard and to an extent it is Rust governance was a mess. Let's hope that the. The sort of reform RFC is makes that better and those things together ended up in this shitty outcome. So you know, I, I don't hold this as like Rust Conf is doomed or everyone who runs Rust Conf is bad. Like I don't think that's the way to look at this. I do think that it was a, an awful outcome, but I think everyone involved recognizes that that is true. It shouldn't have been necessary for it to get to this point for people to recognize like this should have been caught earlier and not have happened in the first place.
01:57:36.071 - 01:58:17.795, Speaker A: But now that it has, I think there's a broad acknowledgement and agreement that things went wrong and that there are. That things need to get better, need to be improved. Yeah, so. So Chad is basically agreeing with me with other words, which is humans are flawed, communication channels broke down and it's the consequences of unstable leadership. I totally agree, but, but I don't want that to overshadow the fact that this was a horrible outcome of those three factors. Like those things are. All three of those things are true, but the outcome was still horrible.
01:58:17.795 - 01:59:21.065, Speaker A: And I want us to do not just to try to rectify this, which is probably impossible, but to do better in the future. It's important that things like this don't happen and that we have mechanisms and people in place to ensure it doesn't. But yes, the point is it can be bad without being malicious and I think that's the case here. Do you plan on a community discord or something along those lines? This is a good question and I'll answer it a little bit more broadly. So I've spoken about this in the past too, that I really want now that I moved away from the US and I'm under fewer sort of restrictions. I really want to start a little, like GitHub sponsorships, Patreon, something. I don't know exactly what format is going to take.
01:59:21.065 - 02:00:29.299, Speaker A: So one of the reasons why there it doesn't exist yet is because I haven't decided what the structure should be, what platform it should be, if there should be more than one, and what it should be for, like, you know, it'd be pretty easy to just start a Patreon, hook it up to a discord and just say, give me money. But that's not really what I want to do. And there are a bunch of things that I don't really love about Patreon. I don't know if I like that model for myself or for other people. So I've been doing a lot of thinking about how I think it should work. The part of the problem is what I really want would require me to build my own thing, and I don't really have the energy or time or desire really to build my own thing, but it might be what's necessary. What I've thought about is in the interim to essentially open up a bunch of different channels for people to support me.
02:00:29.299 - 02:01:40.017, Speaker A: So essentially something like GitHub sponsorships, Patreon, maybe Nebula and something like Libre Pay or, or KO Fi or something, and then build a website that will hook into all those websites and tell you how much have you contributed to me in total, and then give rewards based on that. And one of the reasons I want to do this is because the different platforms offer different payment structures, for example. So for Patreon, I think it's something like every dollar you give someone, they get about 80 cents, which is pretty severe. But like, I. I want people to recognize that there are differences between the platforms. I want it to be easy to move between the platforms if you're not happy with one, or if I'm not happy with one. And I also wanted to make sure that if you contribute over time, even if you contribute a small amount, if you've been with me for a long time, there's some recognition of that too.
02:01:40.017 - 02:02:31.325, Speaker A: It's not just how much cash are you giving per month? That feels too crude. But. But again, like, I just have a lot of loose thoughts about how I want this to work. I've also thought about things like, you know, Nebula, I think is an interesting idea of saying all my videos would still be on YouTube, but maybe there are Additional videos or deeper in depth common commentary or deeper dives or something that goes there. And then you're like paying per month, but you're also getting other things that are not just me. I don't know, I've also thought about something like offering like a Rust course that would be really interesting or do like a narrated version of Rust for Restation. That'd be really interesting, but that would need to be some other forum.
02:02:31.325 - 02:03:28.215, Speaker A: And in that one I would want it to count towards the same pool of like, this is all the stuff you've contributed and you get rewards based on that. But what are those rewards? I don't really know. You know, something like mentorship might be a way, but at the same time letting people buy time with me is also problematic for other reasons. But then I start thinking, well, what even are reasonable rewards? I'm not entirely sure. I don't. It's not like I have art that I can give people, for example, right? So if you've, I don't know, if you've sent me like $1,000, what do you get back from that? In some sense? Right. The, the weird thing about what I do is that I, the, the thing that I would get money for is the stuff that I've already done or I'm already already doing anyway.
02:03:28.215 - 02:04:13.579, Speaker A: Things like the, you know, crust for Rust or the other Rust videos or the Rustation Station podcast or the open source work that I do or the missing semester course or you know, follow up work on Rust forestations. Like all of that stuff I'm going to be doing regardless. But the, there's no individual reward and there's not really a. The more you give, the more reward you get. So there's just something weird about the model here that I don't quite know how to match with the real world. So I don't know what that is all going to look like. Which then gets back to the question of do you plan on a community discord? Which is yes, but I don't know how I want to do that yet either.
02:04:13.579 - 02:04:49.115, Speaker A: And I think it's going to tie into this somehow. So for example, I might start one where there are like let's say four tiers of channels where one of them I have notifications turned on. One of them I promise I will check once a day. One of them I promise I will check once a week and one of them I'll just do whenever I have spare time. And the more you've contributed the sort of higher tier channel you get to be part of maybe, I don't know. But I also don't want to start something prematurely and then change it significantly later. That also feels weird.
02:04:49.115 - 02:05:25.005, Speaker A: So I don't know. But, but but I have it is something I think would be fun. It would be fun to have a discord specifically for the sort of community around my streams or my content. I just don't know the right way to do it. So that's my take there. Next question. What are we at time wise eight okay, we have some time.
02:05:25.005 - 02:06:24.885, Speaker A: Remember to go down to the questions near the bottom and vote on some of those because we have a bunch of questions down there that have been asked recently that have very few votes. And then the ones at the top are the ones that have been there the longest. So go down every now and again and vote for things you think are interesting or I guess really go to the middle because those are the ones that people have other people have voted on, but not enough to get it to the top. What are your thoughts on compiler backends, Crane Lift and Zig's new ambitious plans to remove depending dependency on LLVM and Clang? I think it is good that people work on additional compiler backends, stuff like Crane Lift. Very cool. Some of the Zig proposal to get rid of LVM seems ambitious, but cool at the same time. I don't know how much it matters.
02:06:24.885 - 02:07:30.605, Speaker A: I also worry that it is it's essentially diluting impact, right? It means that out of the relatively small set of people who are good at working at like compiler internals and low level like generating machine code and stuff, that talent gets diluted across many different projects rather than being focused on a few. One of the things that LLVM and Clang really succeeded at was bringing together the community of the people who care about and know those things. And by splitting that again I feel like we're going backwards. I acknowledge that there are some there's some value in having more custom more. I don't want to say more. Less over engineered. That's maybe the take from the people building these, but like I think it's useful to have frameworks here rather than just custom building everything for the language you build on top.
02:07:30.605 - 02:08:22.175, Speaker A: But at the same time I think it's valuable for compilers to support multiple compiler backends. I don't know that building a new one for yourself is the way to do that. I would really like to see a Rust version of LLVM and Clang, but that's also a much longer pull and that I think is valuable only if you don't end up being like the N&1 project. But instead if you actually manage to capture a bunch of the talent that's currently in LVM and clang and bring them over so that you. Again, so that you don't dilute the value here. Okay. What would be the salary of a principal engineer in the eu? I've already talked about this.
02:08:22.175 - 02:08:59.535, Speaker A: Have you finally moved to Wayland? If so, what has been your experience? Yes. So with this new computer, I for the first time installed Wayland and set everything up on Wayland. And it was a. It was a mixed experience. Some things work just straight out of the box, which was really nice. Some things were just weird concept wise. Like the fact that the window manager and the compositor and the desktop environment are all the same thing was confusing and I had to rack my brain a little.
02:08:59.535 - 02:09:37.541, Speaker A: But at the same time it's pretty convenient. Some things around how inputs are handled are pretty weird. Things like global shortcuts and obs not working has been annoying. And other kinds of integrations. Like I have a status bar at the bottom of the screen and I want it to show all of my workspaces. But Hyperland's definition of what workspaces are, it doesn't expose those in a way that the bar can pick up. And there's doesn't seem to be really a standard for how to do that through Wayland.
02:09:37.541 - 02:10:22.875, Speaker A: And so as a result I just have to build a custom integration because no one's really built it before. And that's annoying. There's a bunch of things like I found a bunch of different bugs and different pieces of software that don't work quite right with Wayland, like button handling on my drawing tablet, numpad keys for shortcuts. What else did I run into? Yeah, this bar that doesn't work quite right. My drawing program will sometimes randomly hang its color picker, but only under Wayland. SDDM just gives me a black screen on Wayland. So there's like it's clearly the less battle tested.
02:10:22.875 - 02:10:57.259, Speaker A: I don't know what you call Wayland or X11 Windows Server. It's clearly less battle tested than X11 is. But at the same time, you know, I do think it's a future. I don't think we're going to stick on X11 forever either. Which is one of the reasons I moved was like the only way to make the move nicer is to do the move and then figure out what doesn't work and file issues so I've filed a bunch of bugs over the past week or so with things that doesn't work. But yeah, so I'm doing. I'm.
02:10:57.259 - 02:11:37.605, Speaker A: I mean, this is obs now is doing screen sharing, is doing the webcam and everything. Just do Waylon, and it's working just fine. What are the plans on more crust of rust? There will be more crust of rust. I don't have any concrete plans. The the challenge with crust of rust is finding the right topic. So crust of rust is not just like, let's talk about random rust things. Rather, crust of rust is trying to find what are core pieces of rust knowledge that need to be disseminated more broadly or discussed more broadly.
02:11:37.605 - 02:12:12.659, Speaker A: And I don't have a very long list of those topics anymore. I feel like I've done most of the crust of rust that I wanted to do. There are probably more. I just, I'm still working my way through what those should be. Which is all to say, like, there will be more, but I don't know when and I don't know what they'll. What they'll be on what rust RFCs. Are you excited about this one? I'm actually going to skip, and the reason is because given all the moving and everything, I'm not really in the loop on what RFCs are currently ongoing.
02:12:12.659 - 02:13:21.865, Speaker A: There are none that I'm monitoring particularly closely, and I feel like I'm out of the loop on which ones have actually made meaningful progress, so I'm going to skip that one. What is your setup now? I'll mention it briefly. I think I'll probably do a new setup video, which I know I've been promising now for four years. But now that I've moved to Wayland, I feel like I really should because my setup is pretty different. But very briefly, my setup now is Hyperland as the desktop environment and Window manager Yambar as my bar. ROFI is my launcher, Firefox is my browser still Alacrity as my terminal, running TMUX with neovim, Neomut as my mail client, still using Rust Analyzer with neovim still using the Grubbox Dark hard theme and the Noto Sans font. I think those are like the main bits of setup.
02:13:21.865 - 02:14:21.197, Speaker A: Yeah, I think those are the main components of setup, at least. Oh, and 1Password for password management, which I think is also a change from last time. Yeah, and that's it. Okay. How can someone with three plus years of experience but no formal computer science background effectively actively begin learning or working in distributed systems just apply to jobs. The formal computer science background shouldn't matter if you have three years experience. Again, I think these companies often, nowadays at least the requirements that are listed on job postings is usually bachelor's degree or equivalent, where the equivalent can be years of experience.
02:14:21.197 - 02:15:16.605, Speaker A: So usually like when you see requirements listings for jobs, think of them as guidelines, not as requirements. Unless it's something very specific, but very often it's much looser than that. Reach out and like, worst case you don't hear back. But like, if you have three plus years of experience, then that is a good way for you to get into something and you should be a good candidate for four jobs. I don't think you need the formal computer science background. Do you think Rust jobs will increase in the coming years? Yes, by a lot. I think Rust is significantly on the rise and has been for a while and will continue to be for a while.
02:15:16.605 - 02:15:37.005, Speaker A: And I think that it is a booming job market. Rust is. That is so very much so. Whose voice is it? In the intro to Crust of Rust when it says omnum, that's mine. I leaned really, really close to the microphone. I went omnum. So that's me.
02:15:37.005 - 02:16:34.185, Speaker A: I'm just going through these somewhat more quickly now to try to make sure I get through more of them. Besides Rust, what other programming languages will you use in this new job? Well, so I don't fully know yet because I haven't looked too closely at their tech stack. But I know, you know, there's Rust, there's obviously Python, there's obviously Bash, because there always is in any real system. They use Nix for some things and I think they want to use it for more. So I'm probably going to have to learn Nick slang, which I'm a little sad about, but it's okay. I don't know that there really be any others. In anything that's large like this, and especially when you have to interface with other systems, there is basically always some C or C somewhere in there.
02:16:34.185 - 02:17:44.149, Speaker A: And so if there is, I'm going to end up interfacing with that, but not that I know of. So a relatively small set and maybe some OpenCL or CUDA if it really gets down to it, but I'm hoping to avoid that as much as I can. What are the requirements to be a principal engineer? Let me send you here. There's a really good article by Ilya Grigorik called the Principal Engineer's Handbook, and this one is I think a. So Ilya is a principal engineer and the technical advisor to the CEO Chop and it's a really good just like overview of what does it mean to be a principal. And you know, it varies by different companies, it varies by the size of the company. So there's no one size fits all definition.
02:17:44.149 - 02:19:59.355, Speaker A: But the way that I think about a principal engineer is as someone who is relatively self directed, is sort of a searcher that looks for where problems should be solved, where are the highest impact, highest priority issues and goes seeks them out and either works on them themselves or escalates them or interfaces with the team to bring things forward. There's sort of a, a person who surveys reports and attacks as necessary. So you do both sort of broad and deep. It also does, you know, in terms of requirements it requires that you're decently good I think at working with people, not in a people management capacity but just in the sense of you're going to have to want to, or you're going to want to and have to talk to a bunch of different teams, a bunch of different engineers about what works for them, what doesn't, what is, what are barriers for them, what's friction, where have they seen big wins that might be able to take elsewhere. You have to like dig and learn and understand and figure out what matters and what doesn't, what identify what thing generalizes which ones don't. There's a decent amount of requirement for just expertise and like hard won wisdom of you know that these kinds of things work, you know that these kinds of things don't, you know the rough shape of a bunch of different problems and how to generally attack them. I think there's a lot of judgment too like, and I mean judgment in the sense of like you're faced with trade offs and you have to make trade offs and you have to make them in an intelligent way based on data, based on past experience, based on sometimes guesstimation but, but you get put into positions of difficult non obvious trade offs more often and you need to be comfortable and willing to navigate that space.
02:19:59.355 - 02:21:30.431, Speaker A: And yeah, apart from that, you know, I think read Ilya's handbook. It's, it's a really good intro to roughly what do you do, but also what's required. Do you think Rust is going to be a prominent language used to build AI systems in the coming future? Taking over Python? We've talked about this earlier. Popular autograd libraries like PyTorch and TensorFlow use C for hardware kernels. What do you think needs to be done to get Rust to be the default choice? Do you think this is a Good domain for Rust. I think this would be a great domain for Rust to sort of replace the C parts of PyTorch and TensorFlow. I think part of the challenge there is the tight integration with like OpenCL and CUDA, with which are both pretty hefty C things from, from the vendors and so it's going to be hard to bring Rust in there without some buy in from the vendors of like Cuda in particular like Nvidia needs to get on board with Rust for I think for Rust to really succeed here and I, I think it's not unrealistic that they will, but I do think Rust would be a great thing to get in here and I want C to disappear from that space to the extent that we can.
02:21:30.431 - 02:22:16.829, Speaker A: But it's going to be a long slog, I think. Have you considered making a video on Ghost Cell, qcell or similar libraries? I've thought about it. They're a little bit niche still. Like they use some pretty cool tricks, but in practice their applicability is a little less than you might think. There are some places they work really well, but they're not broadly applicable. Even though I really wish they were, some of them are, but in practice you just don't need them all that often. That's not to say that it's not worth going through them.
02:22:16.829 - 02:23:04.581, Speaker A: Like I think it could be an interesting like deep dive on Unsafe, for example, like an Unsafe Chronicles type video, but it's not something I've currently planned. It's like somewhere in the far back of my head I'm looking for low level development resources for quant development and Rust. Can you please suggest some resources? I don't know what you mean by quant development, but if you mean quantum, then no. If you mean something else, then also no. Not something that I do or have insight into. You've been an engineer for a long time. For someone starting now, what are the pitfalls to avoid in your opinion? Ah, this.
02:23:04.581 - 02:23:59.565, Speaker A: This stuff could fill a book. I think one thing that is valuable as an engineer is to have some degree of humility. And that doesn't mean not standing up for yourself. It doesn't mean not having confidence in your own solutions. But it means a willingness to listen to others and to figure out whether they might actually be right and you might actually be wrong. I see it far too often where engineers are so stuck in the mindset that their solution is the right one or that their way of looking at solutions is the right one, that they miss early warning signs. They miss obvious Errors, they miss huge opportunities for gains just by being stuck in their own way of thinking.
02:23:59.565 - 02:24:30.285, Speaker A: And I think having that humility and nurturing that over time is pretty valuable, especially as you become more senior. Because as you become more senior, you. You in some sense rightfully feel as though you know better. But you gotta. You gotta fight that. You gotta put that intention with the fact that other people still have valuable ideas. Like other people who are coming up are also going to become senior and have good ideas that might be different from yours.
02:24:30.285 - 02:25:09.749, Speaker A: So that, I think is one of them. The other thing that I think is really valuable is to start to track your own work. And I don't mean that in terms of tracking time. I mean that in terms of tracking what did you do right, like your accomplishments, not, not just at one company, but across your career as well. There is a. Where is that. Julia Evans wrote this blog post called get yout Work Recognized, Write a Brag Document.
02:25:09.749 - 02:25:56.559, Speaker A: And it's a really good blog post that basically has the top tagline, you don't remember everything you did. And this comes up again and again. It comes up whether you are like going up for performance review, you're going up for promotion, you're looking for a new job, you're updating your resume, you're applying for, like, further education. It can be all sorts of things, but it's just really useful to have a list of, like, cool things you did because you will not remember them all. It's good for yourself in terms of others, but it's also good for yourself. It lets you celebrate and recognize and remember your victories and, you know, hopefully gives you a sort of track record of like, you know, I'm actually pretty good. It's a great way to battle imposter syndrome.
02:25:56.559 - 02:26:54.055, Speaker A: Like, start keeping that kind of log pretty early. It's something I wish I had started earlier because for me, there's a bunch of stuff I'm sure I did and was proud of a long time ago, but now I don't remember many of them. And I think maybe the third thing I would say is try to not get stuck. It's very easy to become comfortable with or good at a subset of your field and then just sort of do that for the rest of your life. And if you're happy with that, that's fine. But it's. It can be a dangerous kind of comfort because over time, you know, technology develops, people move to different tech stacks, new things become the new hotness.
02:26:54.055 - 02:28:09.893, Speaker A: People moved, new companies started to spring up in new domains. Old Companies fold. The way that we build software, software changes, the world changes. And if there's just one thing that you know how to do, you're going to trap yourself into the only other places you can go or places that are sort of adjacent to that. And so if you can expand your horizons a little bit, like try to make sure you learn new things and then that's going to benefit you massively because it gives you a bigger surface area to contact with other opportunities. And that doesn't just have to be in terms of pure technology, it doesn't just have to be like learn a new language, it can be, learn a new field, like learn biology, chemistry. Computational biology is a thing, right? It could be physics, it could be math, it could be formal methods, it could be like physical, like engineering, it could be 3D modeling, it could be digital art, it could be just art in general, it could be journalism, it could be psychology, it could be UI design, UX design, QA testing, all of these are hugely valuable skills.
02:28:09.893 - 02:28:43.035, Speaker A: And again, it doesn't have to be related to this at all. It could be law, for that matter. And you will find ways for it to then merge with the things you know from before and now. You're a more unique candidate with a more unique set of skills. And it also unlocks other things that you can work on and that that ability to explore new spaces. And like, I mean, again, this is one of the things I think the PhD gave me is that ability to explore and build up a more robust and broad foundation of skills and interests. And I think that benefited me a long time and still does.
02:28:43.035 - 02:29:30.475, Speaker A: Do you think Rust will beat C in the robotics and system engineering space? Yes, I think it already is. You know, it will take some time, but just because there's a lot of software in the world. But I think this is already happening. Again, I don't think there are any places where you should use C if you have a choice. Now there are a bunch of places where you don't really have a choice, where, for example, where there are vendor provided libraries that only have bindings in C. And so using a different language is really painful. Granted, those are more painful to work in, but.
02:29:30.475 - 02:30:30.585, Speaker A: And then robotics for example, like the framework for the OS for the device you're programming for might just be a C thing that you need to integrate with. And in that case your choice, your choices are more limited. But on the whole I think you choose Rust over C because there will be a better choice now and in the future. Yeah, finance is another thing to be really is worth learning. Do you think Rusty will ever move to an ID oriented architecture sharing its code base with Rust Analyzer? I don't know. We. I feel like there's been a lot of discussion in both directions here and I feel like there was a push towards this, then it sort of failed or didn't happen and then I feel like there was some conclusion that maybe we should just not try to unify these and instead it's better to just have the have Rust Analyzer be its own separate implementation of the language.
02:30:30.585 - 02:31:21.509, Speaker A: I don't know where it's landed and I don't know what the right answer is either. Like this I think requires someone who's like a compiler expert and also an IDE expert, which really just means Mat Cloud needs to do it. But also I think Mat Cloud is now doing zig stuff. I don't know. I don't have a great answer to this. Speaking of skills that engineers should make sure to learn that are important as you become more senior like pitfalls is learn to tell people when you don't know. Because it's so easy as engineers to just try to make up an answer on the spot and you need to just acknowledge when you don't have a good answer because otherwise you're going to give an answer and other people are going to take that as not zero gospel, but as this person knows what they're talking about because they gave us an answer.
02:31:21.509 - 02:31:55.875, Speaker A: Try to avoid that. Did you experience imposter syndrome when working for AWS or your recent interviewing? No, but that's because I'm weird. I've never really had a confidence problem. Quite to the contrary, to the point where I very much had to learn humility growing up and eventually I did. And now I'm the best in the world at humility. No. So for me I've.
02:31:55.875 - 02:32:55.763, Speaker A: I've not really been affected by imposter syndrome all that much, but I know that that is the rare case. What is your opinion of Rust for embedded platforms like Arduino and Raspberry? I think that's. I think that it's a great idea. All embedded platforms should all be Rust. How did you meet girls when you were a PhD student? I was on all of the apps and sites is really the answer. And you know the same way as other people, I guess. But interestingly enough, like you know, I was talking about how when you do a PC you have a lot more just time and room to explore and have spare time.
02:32:55.763 - 02:33:28.587, Speaker A: And in my case one of the Ways to do that was to try all of the different dating apps and platforms for this. So I think I had a profile on everything and was, I don't want to say active. That, that sounds too severe, but, but rather like I was like testing them. Like I was, I was trying to figure out which one worked best for me and what works best for what. And ultimately I did. I met my partner on one of them. I met my partner on Hinge in the end, but I think that was somewhat arbitrary.
02:33:28.587 - 02:34:26.611, Speaker A: Um, I think in some sense my favorite was actually OkCupid because I like that you give a lot more detail, you have more to go on with people. They have all these questions you can ask and then see your match with other people based on not just what you answered, but what you have said you would like the other person to have answered and how important it is to you. So I like that setup better, but not where I met my current partner. Hinge worked decently well for me, mostly because. Or when I say worked well, I mean I liked it more than Tinder and Bumble, for example, because it was set up so that you have to start the conversation with something. So like when you first contact someone, you have to like either pick a picture or a particular part of their profile and send them a message about that. And that I think was a forcing function.
02:34:26.611 - 02:34:57.677, Speaker A: That was pretty nice. So yeah, I think that's. I mean follow up questions are welcome, but I think that's the rough answer. And then, you know, I ran some board game nights and stuff and that's a decent place to meet people. But ultimately, you know, it's hard to find someone that you want to be with longer term. It's not just mere exposure. Right.
02:34:57.677 - 02:35:23.275, Speaker A: There are a lot of things that need to go right. And so I felt like, okay, I need to go out and search and that. So then searching is a bunch of work. What Wayland compositor are you using? Hyperland. I don't know if that's how you pronounce it. Hyperland. It's hypr L A N D.
02:35:23.275 - 02:35:53.405, Speaker A: There's no e and I. It's very frustrating because of the command for configuring hyperland is hyprctl like hypercontrol. But every time I type it, I type it with an E like H I P E R C T L. And every time it's wrong and I have to type it again. That's really annoying. Hipperland, maybe it has to be said very fast. What would you change about your job Well, I don't know, I haven't started it yet.
02:35:53.405 - 02:36:52.325, Speaker A: Was going full time with commercializing Noria something that you were considering? Well, so I co founded the company to start commercializing Noria. Ready set. And the main reason why I didn't start working for that company straight away was because I was so burnt out with database work where I'd worked on Noria for like six years straight. Day in, day out, weekends, like that was just burnt into my brain. And so I just didn't have the, the capacity to do any more work on it. I still think it's important and valuable, but it's just certainly at the time when I graduated I was just. Even just the thought of going back into the code base made me be unproductive no matter what I was working on.
02:36:52.325 - 02:37:41.641, Speaker A: And so I recognized that the right place for me to go would not not be to work on commercializing Noria. That it just wouldn't work. But I think it was important to do that and hence I co funded but did not work for. It's gotten a little bit better, but even now like I still feel this tingling of like it's too, it's too soon. Like databases and especially the Noria code base is still like so burned into my memory that I need distance from it. Have you tried using Emacs? I tried Emacs for a little bit and I didn't really like it. One of the things I didn't like was that it's not really a terminal editor.
02:37:41.641 - 02:38:24.657, Speaker A: It wants its own GUI and I don't want to give my editor its own gui. And the other reason was because the key bindings were weird. And the third reason was it felt like it was more an operating system than an editor and that's not what I wanted. Those aren't great reasons. I don't have like a burning passion that people shouldn't use Emacs. That just wasn't for me at the time at least. What is your advice for people struggling to find a job in the tech industry nowadays? Not necessarily.
02:38:24.657 - 02:38:43.907, Speaker A: As a Rust dub, it makes me think that the industry is still saturated and I should focus on personal projects instead. Would like to know your thoughts. Cheers man. Signed. Just a dude. Nice sign. I don't know that the industry is saturated.
02:38:43.907 - 02:39:56.335, Speaker A: I think the industry is maybe saturated for more junior engineers perhaps. So it would be useful to know more about your background here to really answer this well, but I do think that there are a lot of tech jobs out there, especially in Rust for junior and senior people. One of the things though that I found that is unfortunate is a lot of especially startups tend to want to try to hire senior people and I think that's a mistake. I think if you build your company with only senior people until you get to a size where you're like, okay, now we can, now it's okay, we can start hiring junior people. You build a senior senior engineer culture. You don't build the mechanisms, the devices, the tools, the processes for making junior engineers succeed at your company and turn into senior engineers. I think if you build the company with junior engineers present from the start, it forces you to build the company in a sustainable way where you have a pipeline for engineers to go up through the company.
02:39:56.335 - 02:40:32.571, Speaker A: And so I wish there were more tech startups that hired junior people. Which brings me to the obvious follow up question which is I don't know what Helsing is doing here. I believe that Helsing is pretty good about hiring junior people as well. I don't know whether they currently have any openings. It's worth looking and if they don't have any openings for junior people, then I want to have a word with them and see. But this is certainly an area where I think it is very valuable for companies to hire junior people. But I don't.
02:40:32.571 - 02:42:01.105, Speaker A: At the same time I don't know what level you're at and I don't know which languages you're looking at or what country or region you're looking at and whether you're open to remote, whether you're only looking for in person, it's difficult. Also, companies tend to mostly make exceptions in terms of things like remote for more senior people. So if you're junior you have less availability for companies because you have to look at companies that are either fully remote, where everyone can be remote, or that are on location where you are and that limits your search as well. But if you're struggling to find something, I do think that focusing on personal projects is pretty good. Although keep in mind that that mostly helps you for self development, right? So like it'll make you better as an engineer, it's not clear how much it'll help you on your resume. Like open source work is tricky to use in a resume setting because if you're on the recipient receiving side of a resume that mostly lists open source stuff, evaluating how well you ran open source projects and what kind of experience you've gotten from it is tricky at best. So you will generally probably not get that much benefits from it resume wise.
02:42:01.105 - 02:42:48.783, Speaker A: Does Norway have a lot to Learn. In terms of tech industry, should Norwegians take more risks and be more innovative? I don't know that it's about risk or innovation. I think it's partially. Norway's just really small. There just aren't that many Norwegians and so there's fewer of us to be innovative. It also means that it's harder to start a company because your initial audience size, your initial customer base is smaller. The taxation rules in Norway are also such that it's pretty costly and annoying to start a small company, which means many people don't or they start them elsewhere.
02:42:48.783 - 02:43:37.369, Speaker A: I know that the rules have gotten a little bit better recently, like in the past few years, so maybe that starts to change things. But I don't think Norway is non innovative. I think it's a combination of those factors that just make it that we don't have like huge booms coming out of here. I also think there's a pay problem and this applies more broadly in Europe, but certainly in Norway that. I had a couple of conversations with Norwegian tech companies and they weren't really competitive in terms of salaries, which means you're not pulling talent here, which stifles your innovation and also stifles the possibility for future inventions here. But. But I don't think it's about risk taking or.
02:43:37.369 - 02:44:09.651, Speaker A: Or being innovative in the first place. Do you know who Magnus Carlsen is? If so, how famous is he in Norway? Yes, I know who he is and he's quite famous in Norway. Yeah, we're very proud of anyone, anyone who's from Norway who does it well in the world. Because there aren't very many of them. There aren't very many of us. And so we get irrationally excited when we see like a Norwegian flag somewhere else in the world. Very cool.
02:44:09.651 - 02:44:35.135, Speaker A: If there's a Norwegian flag, like on TV or like if I watch an American show and in the show there's a Norwegian flag, I get a little excited. Or there's a Norwegian region in there excited because we're just. We're just tiny. There aren't that many. What do you think of FreeBSD and all the other BDSs? It's also. It'll also be great to hear what you think about next OS. I like BSD.
02:44:35.135 - 02:45:08.825, Speaker A: I ran open OpenBSD for a little while. The biggest challenge I think I had was that it was just too inconvenient. Like I wanted too many things that were Linux only. And so I just gave up. Maybe things are better now to the point where I should consider trying it Again, but I don't know. This also gets to the I don't really feel the carrot or the stick right. There's nothing that's really pulling me to BSD and there's nothing that's really pushing me away from Linux and so I'm pretty happy where I am.
02:45:08.825 - 02:45:45.545, Speaker A: Nixos. I like the idea there too. I don't really know what the incentive is to move. I've heard that it is easier to get things to just work because they're installed as bundles rather than as you know, you build an application to dump it on your file system. And that appeals to me to some extent. But I've also heard that the next language is a huge pain and I quite like writing Arch package builds which are just bash. So I like the idea of nixos.
02:45:45.545 - 02:46:46.835, Speaker A: Maybe I'll start tinkering around with it. Given that Hellsing does some nix stuff as well, it's not unreasonable that I might end up dabbling in it and then it infects my entire life, which it seems is how Nyx gets into people's lives is it starts a little bit and then it just takes over. But that's the extent to which I have useful input there. What are your thoughts about working in the security field? Security is really fun. I mean it's terrifying, but I really like security. I was the teaching assistant for the computer security class at MIT for many years and it's. I think it's fascinating to think about threat models, to think about security mechanisms and the trade offs involved in the space, the trade off between user convenience and security.
02:46:46.835 - 02:48:07.739, Speaker A: I think it's a hugely interesting field. I don't know what it's like to work in the field now at Amazon and probably at Helsink to a decent amount of the work that I do is security related or has components that are. That are about security. But working as like a security engineer for example, is not a position I've had but I've interacted a lot with them and it sounds really fun but also quite stressful because you are on the hook for getting things right and when things go wrong you're the first person paged and I'm okay with that not being me, but it seems really interesting to me. Have you tried Leptos for front end development and what are your thoughts about front end development in Rust in general I have not tried Leptos and my thoughts about front end development in Rust is that it's weird to me to do front end development in Rust because Rust is not a front End language. I think Rust makes a lot of sense for webassembly, like when you want to write specific components that require the sort of high performance or correctness stuff or low level control that you get in Rust. But building your entire front end in Rust feels a little weird.
02:48:07.739 - 02:48:44.537, Speaker A: It does depend on what you mean by front end. Because if what you mean is sort of the, the thing that generates the HTML and css, then like that's not really front end development to me. There is some of that maybe, and that's where I think something like Leptos falls in. But when it comes to like building something like single page apps or reactive applications and stuff, I just wouldn't do that in Rust. It feels weird to force that to be in the sort of backend that then gets converted. I think that's a recipe for pain. I do think that Rust has a place relatively close to the front end.
02:48:44.537 - 02:49:32.071, Speaker A: It still makes sense in terms of things like generating HTML, generating the HTTP service kind of thing. That there makes a lot of sense to me. But in the actual development of the ui, probably not. Or at least doesn't make sense as much sense to me. Okay, how will tech look like in a decade? I don't know, probably about the same as now. I just like don't believe in significant radical change over the course of only 10 years. It happens.
02:49:32.071 - 02:50:52.069, Speaker A: But like more AI. If I had to make a, like a radical guess. Let's turn this question interesting. Like what is the most radical guess I can make as to how development will be different in 10 years from now? I think that the current trend to work remotely is not slowing down, it is accelerating. And I think that we're going to see a not just remote first, but a remote only approach to work where fewer and fewer people actually go into offices or want to go into offices. And I think it's going to completely change how companies think about their, about engineering culture, about engineering, how we do remote engineering. Because a lot of the practices that especially the big tech companies use are very much rooted in how we ran development during like in person type things.
02:50:52.069 - 02:51:43.873, Speaker A: And I think it's just going to be radically different. Like things like real time collaborative coding. I think we're going to see more of, you know, there are some editors are starting to get this now where you can have multiple cursor in a code editor. And I think that's the kind of direction that we're going in where like, you know, in, in the olden days you would sit down at a computer together and like Pair program and I think that's all going to be remote. I, I think we're, we're leaving the world of in office software engineering behind and there are a bunch of things that are hard about that and that, that we don't know how to solve. But a decade from now, I, I, I think we're going to see that trend accelerate. What backend framework do you recommend? Axum, Actix, Salvo or any other.
02:51:43.873 - 02:52:46.783, Speaker A: I like Axum for a bunch of reasons, but none that are particularly well informed except that I've used it, I like it, I know the developer pretty well and or have interacted with them sort of online a bunch and they built good stuff. Integrates pretty closely with Tokyo, which I think is a good idea. I like Axum. Do you think Rust is the best language suited for implementing cryptography right now, as opposed to C, C and Go? Yes, Go is very good at cryptography right now, but it's mostly because they have really good cryptographers working full time on that problem. I don't think it's because the language is inherently better suited for it. I still struggle to see what Zig's unique selling point is or why that's better than Rust. But you know, I could be convinced wrong there, but I would rather them be built in Rust.
02:52:46.783 - 02:53:20.485, Speaker A: Like anything where you don't need something that goes beyond the boundaries that Rust puts on you, I think is good to do in Rust. All right, I'm gonna speed run through a little bit here and aggressively skip some questions because I want to end it probably around nine so in like six minutes. Ish. That's three hour mark. I think it's about good. So I'm gonna, I'm gonna run through. Skip that one.
02:53:20.485 - 02:53:46.415, Speaker A: Skip that one. I've been catching up on streams from a few years ago. Can you explain why you didn't go back to the lock Free to wait, free simulation after implementing hazard pointers? I just have another time. I still want to get back to that stream. I think it's really cool and interesting and the whole point was that once we get hazard pointers we can actually make progress. So I genuinely want to go do that more. It's on my list.
02:53:46.415 - 02:54:34.065, Speaker A: What made you leave the U.S. oh, there's a bunch of things. I left the U.S. because I think the way that healthcare is handled there is absolutely insane. I don't like the car centric cities and the car centric culture of having to drive everywhere. I think the intrusions on civil rights in the US including things like the right to abortion being taken away is wild. I also think that the fact that guns are a problem in the society at the level that it is is not something I want a part of.
02:54:34.065 - 02:55:33.571, Speaker A: And the fact that you have basically no employee rights in the us, you know, you not only is like healthcare tied to your employer, but also like you can be fired on the day, there's no required notice period. You have very few rights as an employee. Union culture is sort of dying out and taken together like I just don't see why you would stay in the US right now. I just don't think it is valuable why do you choose to work in AI and not some high frequency trading quant firms? His quant again, I don't know. I don't work at Helsing because of the AI stuff. The AI stuff I don't really care about. It's an enabling technology that's used in part of the stack.
02:55:33.571 - 02:56:15.823, Speaker A: I did it because a I think what they do is important and b because they have some really unique problems in the distributed system space. High frequency trading, not so much like sure you need to be low latency and high throughput and whatnot, but like they're not uniquely different. Interesting problems to me. Do normal developers need to care about the fuss around the Rust or the trademark issues that affect anything? If we're just developers mostly no. I also talked about this earlier. Already answered that. What's your opinion on sabbaticals? I think everyone should take more breaks and I think that should be a standard part of our working culture.
02:56:15.823 - 02:56:59.865, Speaker A: I think we should work fewer hours, I think we should work fewer days. I think we should take more vacations, longer vacations. So sabbaticals very much on board. I think it's a great idea. Do you have any thoughts on ADA compared to Rust? I took this question just because of the username of the person who posted it, but no, not really. I haven't used ADA at I want to say I used it once for some random task, but I don't really know ada, so I can't really speak to the comparison. But I like the username you put.
02:56:59.865 - 02:57:54.047, Speaker A: How do you feel about the fact that nearly everything is closed on Sundays? So in Norway a lot of things are closed on Sundays, including most grocery stores. It's a little annoying, but at the same time I like the fact that people use the day to do other things and instead and more people have the day off. It's kind of nice as you get older. Do you think your ability to solve problems or learn increases or diminishes. I think my ability to solve problems is increasing. I think my ability to learn, it's probably about the same, it's changed. I think my ability to just like do retention of knowledge has probably gone down.
02:57:54.047 - 02:58:39.709, Speaker A: But at the same time I have more hooks to hang that knowledge on. So it's easier for me to pick up new things because they relate to things I already know. So a little bit of both. Is there a role for Rust in the field of AI or is that ship sailed? Very much a role for Rust in that field. Now that you're no longer at AWS or Amazon, what's your opinion of the company? It's management techniques in particular, like stack ranking employees. I think stack ranking makes absolutely no sense. This is the same thing that certain universities do and with like grading on a curve, it makes absolutely no sense.
02:58:39.709 - 02:59:29.247, Speaker A: It's a, it's truly ridiculous. I understand why they do it because it's easier and more convenient, but it's a terrible practice in terms of the company overall, I, I think Amazon gets some things really right. Like I actually think the leadership principles at Amazon are really good. The two new ones are not so good, but the other ones are quite good. They're sensible and if you apply them well, they're a useful, coherent vocabulary to use for internal conversations and discussions and for guiding those and for guiding documents. I think the document culture is good too. The problem with the leadership principles is that they're not universally followed.
02:59:29.247 - 03:00:08.769, Speaker A: They don't seem to really apply to leadership and the senior leadership in the same way it applies to the rest of the company. So they end up being sort of used downwards, which is really annoying and unfortunate. But, but I think, you know that I think they have some pieces right. I think where they're really going in the wrong direction now is on remote, of course. Like I think, I think they're shooting themselves in the foot. I don't think they have much of a choice for what it's worth, but. But I think they are and you know, I think Amazon feels a little bit now like a two tier company.
03:00:08.769 - 03:01:04.565, Speaker A: Like there's sort of the, there's the senior leadership and then there's the rest of the company and I feel like there's a disconnect, there's probably a communication disconnect and I think it might be partially because of COVID where they rely, relied very heavily on in person communication to stay in sync with the rest of the company and that's sort of gone away and they haven't really remedied that situation except now trying to push everyone back into. In person. But I'm not hypercritical at Amazon even after leaving. I do think that the. I don't like the way that they treat employees as sort of fungible and to some extent disposable. That, that really rubs me the wrong way and the, the way that they lay people off and such. So mixed feelings there.
03:01:04.565 - 03:02:07.693, Speaker A: But I, I value the time that I had there. Let's see, how's your experience been living on a visa? And how'd you get a work permit? The work permit I got be well. So what happened was I was. I did my PhD in the US and after your PhD you can do what's known as practical training. So you get a practical training visa and that lets you work for one to three years on that student visa, which makes it easier for companies to hire you and see how you do because they don't have to sponsor the visa. And then after I joined Amazon, they then immediately started applying for an H1B for me. And I got that like a year later or something.
03:02:07.693 - 03:02:23.865, Speaker A: And that process wasn't too bad for smaller companies. That's more annoying. They're not if they're not used to sponsoring visas. And that's a whole hassle. I did not like being on a visa. I. I think it sucks.
03:02:23.865 - 03:02:42.835, Speaker A: It's one of the reasons why I moved back to Norway is so that I don't have to be on a visa and certainly not an employer. Sponsored. Sponsored 1. It puts you at a disadvantage to the company for sure. But in addition, it puts a bunch of restrictions what you can do with your spare time. Like for me, I really wanted to like open a Patreon, for example. Not allowed.
03:02:42.835 - 03:03:30.189, Speaker A: I wanted to do some rust consulting. Not allowed. It's just there's a bunch of things that you're just not allowed to do when you're on one of those visas. And that was very, very frustrating. Let's see, scrolling through here. Are you still learning the piano? How's it going? No, well, I. I was a little bit, but my piano stayed in LA and rather I sold it in la and I haven't bought one here yet and I don't really know where it would go.
03:03:30.189 - 03:04:20.903, Speaker A: The apartment is a little too small. But I do have. This is a guitar that I bought many years ago in London and I found it when I came home just like a few weeks ago. So maybe I'll now try to learn the guitar again. I don't know. Does Helsing offer visa sponsorship? Yes, I mean, they do that there's some restrictions on because they work with like the military for different governments. And so that there are all these requirements coming from there where there are certain passports and dual citizenship statuses that they cannot hire.
03:04:20.903 - 03:05:30.867, Speaker A: Like they're just not allowed because of the clients that they have. So there are a couple of restrictions in that way, but as long as those don't apply to you, they do offer visa sponsorship and I think they offer relocation too. So you don't have to currently be in Europe, but you will have to move to Europe if you're not in Europe. I'm just browsing through here. Are you interested in joining Rust Meetups in Oslo? I already answered that one, but yes, I am. I'm just waiting for the next one to be scheduled. Do you speak Norwegian? And if not, how is living there with English only? I would like to emigrate to another country, but language is the biggest problem for me.
03:05:30.867 - 03:06:07.635, Speaker A: I do speak Norwegian. I'm from Norway myself, but my partner does not. And I think she's found it surprisingly easy. Like, everyone speaks English here and there's a surprising number of people now just walking around the streets for the past, you know, month or so that are also English speakers. Like just speaking English on the street. The main problem places where you might have problems is like, if you travel far out the cities or if you talk to much older people, they might be less comfortable speaking English. But in general, people are pretty excited to speak English here too.
03:06:07.635 - 03:06:31.381, Speaker A: They speak it pretty well. So you won't have too many problems with English. Only here. I like to play videos on 1.5 to 2x speed. I think it makes me speak faster. I've noticed that you speak very clearly and steadily.
03:06:31.381 - 03:07:09.265, Speaker A: Is it something that's natural to you or do you train to do it? I. This is how I speak. I and. And like, I don't know whether it's morphed over time as I do more videos, but like, I think I try to be very intentional with my words when I speak normally. And so I do that when I speak to the camera as well. And that means that I end up speaking clearly and steadily. Sometimes I speak quite quickly, but I think even then I try to make sure that I use all the right words as I go.
03:07:09.265 - 03:07:53.327, Speaker A: And so it still ends up being very. The words end up being very segregated from each other, which I think is part of what gives that impression. Hopefully that makes it easier. Easier to understand me at higher speeds too. Let's See, I'm getting down to like the four vote questions. Where can people who do not use Twitter follow your stream announcement? Knitter.net unfortunately doesn't work anymore.
03:07:53.327 - 03:08:37.933, Speaker A: I'm also on Mastodon fostodon.org@john who. There's also a calendar with all of my streams, so you can just, you know, follow that calendar. That link is if you go to my foster dom, for example, and you go back a little bit, you'll see the link to where I announced that I'm going to start keeping a schedule. And apart from that, I mean, this is one of the reasons why I want to set up something like a community discord or a, or a Patreon or something is so that it's easier for people to just get announcements from me. I'm also now starting to post on LinkedIn. So that's the other place where you can follow me.
03:08:37.933 - 03:09:16.651, Speaker A: Don't connect to me on LinkedIn, just follow. Connections are different and annoying. So that's the other thing to use. Let's see. Can we see photos of your sourdough? No, I threw it out. It was very, very sad. But I will make sure to post some when I.
03:09:16.651 - 03:09:52.345, Speaker A: When I manage to get it to work me dumb. How me get smart. It's a good question. All right. This list of questions is now very long. One of them just says, how are you doing? Which is a good question. I'm doing well, thank you.
03:09:52.345 - 03:11:03.845, Speaker A: I'm trying to look for the ones that have been asked recently that are the ones from chat, just to serve the people in chat here better. What do you think about Restation Station? I mean, I help run the podcast, so I think it's a pretty good thing. Recently I haven't done too many episodes on it because of the move and everything, but I'm hoping to get, get back to Would working on Windows OS be a deal breaker? Yes. I have no interest in working on Windows. There's a difference between if I'm building software that other people run on Windows and whether I have to develop on Windows. Those are a little bit different. But yes, I do not want to be forced to work on Windows.
03:11:03.845 - 03:11:58.295, Speaker A: How would you compare working in the US versus Norway? Would you recommend it for a Norwegian? I think it was really valuable for me to work in the US for a few years. Like, it's not as though I would undo my time there. It is more that it's not where I would want to be long term. I don't know that I would. So I would, I would very much Recommend working in the US for a little bit if you can. At the same time, like, I don't really like the US and you would have to put up with working on the US for a bit, which is worth it. Hard to say.
03:11:58.295 - 03:13:12.645, Speaker A: I would probably work for a European company instead, whether remote or in that country. All right, which neovim, front end or UI do you use with Wayland? And if it's not gnvm, have you tried it? I don't use a front end gui, I use the Terminal ui. So I launch Alacrity, I have TMUX running it and then I run NVIM directly in my terminal, the only UI I've ever wanted to use. Okay, I'll do two more questions, so let's. I'll start from the top and if you vote something else up then, then we'll take it from there. I have not tried Obsidian md, so I'll just get rid of that question. So it's not a candidate here.
03:13:12.645 - 03:13:47.177, Speaker A: What started your interest in Rust? So my interest in Rust started really during my PhD. So for my first, the first year of my PhD, I used go and it was fine. I didn't mind it. I liked the language well enough. But then I decided to start building this database like thing and you know, I knew it was going to be high performance, low latency. I knew it was going to need to do a bunch of like memory tricks. I knew that it was going to be fairly like low level code.
03:13:47.177 - 03:14:26.387, Speaker A: But also I really felt as though I missed types in Go or I wanted to do more of them. And while all of that was sort of circulating in my head and I was going to start writing the first prototype, I was like, all right, I'll use GO for this as well. And I wrote the first prototype and it was fine. And then I saw the announcement of Rust 1.0 and I went like, this thing proposes a language that or gives a language that does a lot of or has a lot of the properties that I'm looking for in the language for this particular problem. I'm doing a PhD. I can just choose whatever tech stack I want.
03:14:26.387 - 03:14:57.145, Speaker A: No one else is going to tell me not to. And so I just went with, sure, let's try Rust then I guess. And I just never really looked back. I started using it and just really enjoyed the experience. I started bringing other people on board and they enjoyed the experience. After the initial learning curve, it worked well. When we had multiple people working on the project, it worked well for several years without, you know, significant regressions and without any huge frustrations with the language.
03:14:57.145 - 03:16:01.271, Speaker A: And so it was really one of those. It fit the problem that I was looking at at the time, and I had the freedom to allow me to test it out. And then that test was very successful, and then the tests since have all been successful. So there's nothing really more fancy to it than that it seemed like the right tool for the job and turned out to be. All right, last question. What can dynamic dispatch do that static and enum dispatch? Can't dynamic dispatch do that static and emotispatch can? It depends what you mean by can do. So.
03:16:01.271 - 03:16:48.681, Speaker A: So the first thing that comes to mind is that dynamic dispatch lets you type erase, so you don't have to pass around a concrete type. With static, you know it's monomorphized, the type is relevant. For enum dispatch, you need to have an Enum variant for the thing you want to call. With dynamic dispatch, you don't have to name a type, you name the trait, but you don't name the type. And this matters in the sense that with static dispatch, anyone who calls you or your caller can choose any type that implements the traits. With Enum, which is nice. With enum dispatch, they can't.
03:16:48.681 - 03:17:51.905, Speaker A: They can only use the types that you've provided variants for. But dynamic dispatch is like static dispatch in that it allows any incoming type, unlike enum dispatch, but it does so in a way where you don't get the monomorphization. So that's sort of the slice that dynamic dispatch does. The other thing that it does is dynamic dispatch can be can give branchless dispatch, which I don't think you can do with enum dispatch. So with an Enum dispatch, if you want to call a method on the inner thing, you need to match on the enum discriminant before you dispatch, which means you have to branch in the cpu, which means you have to rely on the branch predictor, which is usually pretty good, but it's an indirection anyway. With dynamic dispatch, there's still an indirection, but it's a virtual function call, which means there's no branching. You just load and jump or load and call, and usually that doesn't matter.
03:17:51.905 - 03:18:47.073, Speaker A: But in particularly hot loops, that difference can end up making a big difference, especially if the branch predictor turns out to not hit very often. So those are the first two that come to mind. Yeah, so as Alice points out in chat too, like enum dispatch is extremely strict. Orphan rules, basically the only types you can use when using Enum dispatch are the ones that are declared in the crate that declares the function that is being called or dispatched through. So it's like not open to any other implementations. Okay, I think I'm gonna call it there. Three hours and 20.
03:18:47.073 - 03:19:09.755, Speaker A: That seems about right. There are a bunch more questions, but they're mostly low question votes. I'll make sure to read through all of them. It's interesting to read through all of them. Okay. I'm also very glad that the stream worked all the way through. Like this is my first Wayland stream on this computer from Norway and it seems like everything has just kind of worked, which is amazing.
03:19:09.755 - 03:19:43.025, Speaker A: My Internet connection is fast enough even though it's wifi. I'm streaming over WI fi right now, but that makes me happy. Okay, I'm going to call it there. Thank you for watching. If you're watching this video on demand, then I'm guessing you haven't watched all of the questions because why would you? You can just click to the ones that are interesting. But if you're watching live, thank you for watching through this whole thing. Like there are 350 of you ish who have watched most of this and that's wild to me but hopefully you feel like I said something useful.
03:19:43.025 - 03:20:00.935, Speaker A: And I don't know when the next normal stream is going to be like rust oriented stream is going to be, but now that I have the setup I know that it works and I'm starting to be settled in. I'm hoping it won't take too long. Thank you all for coming out and I'll see you next time. Bye folks.
