00:00:00.160 - 00:00:31.950, Speaker A: Morning. Welcome back, folks. It's been a little while. So this stream is, well, it's January 1, first of all, January 1, 2022. Happy New year. Let's get rid of the past couple of years and just say that this is the year after 2019 or something, and let's just go on with our lives from here. I wanted to do a stream partially to test my new audio setup.
00:00:31.950 - 00:01:20.080, Speaker A: It may not look very different, but it's more different behind the scenes and partially just because I haven't done a q and A in a while. And so I wanted to just take a chance to just take a bunch of random questions, see what we get. It doesn't have to be rust related, but let's maybe primarily focus on rust. I haven't taken any advance this time, so just sort of pop them in, chat, and I will go through them as I see them and like, let's just chat about random things. I'm guessing a bunch of you, as I am, are a little tired. In my case, I'm also tired because we recently adopted a second cat and they have to be kept separated to get to know each other, which means that the second cat sleeps in our bedroom or next to our bedroom. And so I sleep less than I normally do.
00:01:20.080 - 00:01:44.396, Speaker A: So I'm a little bit of a shell of myself, but hopefully it will be fine. I'm just going to try to scan, chat for questions and answer them as I see them. If I miss your question, just post it again later. That's fine. Let's take a look here. Your image quality from the camera is really fantastic. It's funny.
00:01:44.396 - 00:02:13.300, Speaker A: Yeah. So this camera, it's actually a DSLr. It's not a normal webcam. And so it, it's, like, very crystal clear and has, like, depth of field and stuff. But normally you just see it up in the tiny corner of the screen, so you don't really see that. It's really nice, but I'm very happy with that, with that setup. I have given comments if I do, like, video chats with people and stuff that, like, your image is creepily clear because, like, this is, most people do not have this kind of a setup.
00:02:13.300 - 00:02:41.040, Speaker A: Right. Audio and video is not in sync. Is that the case elsewhere as well? Like, does the sound match my lip movements? Because otherwise that's the thing that I can fix. Even if they're just slightly off, I want to know so I can fix it. Are you using pipewire? I'm not using pipewire. I want to start using pipewire. It seems nice, but I am not currently using it.
00:02:41.040 - 00:02:53.460, Speaker A: Twitch. Ok, it's a bit off. Slightly off. All right, let's try this then. Let me go over here. Oh, you can't see my screen. That's even better.
00:02:53.460 - 00:03:27.332, Speaker A: If I go here and I do this and let's try. Is that better or worse now? So I added a hundred millisecond delay. Is that more in sync or less in sync? What do we think? Yeah, slightly off audio, slightly ahead. It's worse. Worse. Okay, so less in sync now. So how about I'm gonna go 100 milliseconds the other way now? How's that? Oh, yeah.
00:03:27.332 - 00:03:48.574, Speaker A: Let's do a clap. All right, clap time. So you want to see whether the audio of the clap matches the actual clap. You ready? Let me try one more time. How's that? Pretty good. Fantastic. Looks good, looks good, looks good.
00:03:48.574 - 00:04:09.056, Speaker A: All right. And watching the lip movement, it seems about fine. This is crowdsourcing audio setup perfect now. Okay, great. Then we will stick with that. Fantastic. Sorry to steal chat's list of questions.
00:04:09.056 - 00:05:40.740, Speaker A: Let me go back up and see what I find. What sort of rust work do you do at AWS? So this is a question I've gotten a couple of times and I haven't been able to sort of give a satisfactory answer just because it's been a fairly evolving role. The role I have is basically to build out the infrastructure for building stuff with rust internally at AWS. So the idea being that if you want to build something using rust at AWS, you have to be using the sort of Amazon build systems. And I'm working on the rust support for that build system, essentially like the sort of rust build tool, if you will, internally, which my goal with developing that has basically been to make it as non amazonian as possible, as in, I want it to feel like you're just working with cargo and rust, as opposed to like, oh, I need to learn this entirely different amazonism of a build system in order to write rust code. And I think we're getting pretty close now, but there's just a bunch of stuff you have to deal with. Once you're sort of doing internal development, you need to deal with things like which third party packages are we allowed to use, how do we track which ones we actually end up using, which versions of which dependencies, how do we ensure that binaries are built for the platform they're going to be deployed to? This is all sorts of things you need to make things work with all the other packages in that internal ecosystem.
00:05:40.740 - 00:06:57.924, Speaker A: So it's been a really fun job. And a lot of that has been interacting with cargo and oftentimes finding issues in cargo, or posting feature requests to cargo for things that would make the integration nicer. And it's always a tricky balance, right? Of is this a feature that only Amazon needs for cargo, in which case it probably shouldn't be added to cargo? Or is this a feature that anyone integrating with a large build system will need? In which case it might be a feature that cargo ought to have to make it easier for other large companies, for example, to also adopt cargo internally. So that's the sort of work I do. I do sort of both working on the build system itself, which is written in rust, and working on the sort of upstream projects that we end up interacting with things like cargo and rust up and rusty, and of course dealing with all of the internal users of those tools and figuring out how can we make life better, how can we make ide integration better, all that stuff. Do you think improvements to the sophistication of the borrow checker will get progressively harder and less significant over time? Yes, I do think that's true. I think we started in a pretty good place with non lexical lifetimes.
00:06:57.924 - 00:08:02.938, Speaker A: It got very good. Now there are a bunch of known corner cases that do get progressively harder to fix. I don't know that there are a lot of low hanging fruits left, although I think in many cases the answer isn't necessarily to tackle them one at a time, but rather to work on like a holistic, more formal representation of what the actual semantics should be, and then implement a complete solution for those semantics. Right? So think of something like the whole stacked borrows idea of trying to create a formalism around how borrows should work in theory, and then just implementing that completely. And hopefully that will satisfy all of the current use cases and also solve some of the missing pieces from from what we have today. What's the model on your mic? I used to have a rode podcaster, which is a. I have it over there.
00:08:02.938 - 00:08:37.900, Speaker A: It's mounted. It's a really nice mic, actually. It's a dynamic microphone that I've found to work really well. It just has a usb interface, so you just like plug in a USB cable and stick it in your computer and it, it works really nice. There are a couple of reasons why I switched. I actually switched to the rode procaster, which is basically the same microphone, but it has XLR out instead of USB out. And the reason I did that was because that way I can connect it through an audio interface rather than just directly into my computer, which lets me adjust levels a lot better.
00:08:37.900 - 00:09:29.764, Speaker A: It lets me use physical audio improvement devices. It gives me better monitoring and stuff. So it's actually, it's basically the same microphone, but the audio pipeline is now better. What's the best place to find a rust job? I'm only receiving offers from crypto like companies, so this one's tricky because it's funny. I keep hearing from people who are looking for rust jobs, and I also keep hearing from companies that are looking to hire rust engineers and saying that it's hard. Clearly, there's some disconnect here, and I don't quite know where it stems from. Like, I know the companies are looking on LinkedIn and Angel list and stuff, and I know that developers are looking maybe more on, like, either expecting to be contacted or looking at, like, the Reddit thread for job postings and stuff.
00:09:29.764 - 00:10:30.760, Speaker A: Or I know this week in Rust has a listing of, like, available jobs. I don't know how we align these two because I think both the supply and the demand are there, but they're just nothing lining up correctly. I don't quite know how to solve that. I think there are a lot of crypto companies doing rust and for better or for worse, but there are also a lot of non crypto companies doing rust. And I think what's happening is that the crypto rust companies are, in some sense, much better at rust hiring because they are much more aggressive about reaching out to people as opposed to having people come to them, which I don't know whether I want to encourage that all companies should reach out to engineers because it ends up being a lot of noise. But I do think those companies are out there. What is your, oh, I guess this is a related question.
00:10:30.760 - 00:11:26.322, Speaker A: What is your view on the web? Three hype. Why is rust popular with cryptography and blockchain? Many blockchain system use rust like parity for Ethereum, Polkadot, Solana, etcetera. I think it's somewhat complicated, but I am not generally a big believer in decentralized systems just because I don't know what it buys you for most of the use cases that people are using them for. Like, I'm just not seeing the benefit. Like, blockchains have been around now for a while and I just don't have see legitimate use cases that are benefiting from this. Maybe they will come down the line. I think in some sense, maybe what's happening is that we are 510 years too early for it to be useful and it's more of an interesting niche, so it's hard to see how it's going to pan out.
00:11:26.322 - 00:12:02.044, Speaker A: I am also extremely disturbed about things like the energy requirements. Like this is like, I know a lot about proof of stake systems, like my lab at MIT, we're working on some of them. And proof of stake is a significant improvement in that. Now, you're not, you know, burning through forests in order to generate random cryptographic proofs that are then thrown away. But not everything is on proof of stake, like most things are not yet. And that change needs to happen quickly. And I think even once it does, I still don't know what the upsides are.
00:12:02.044 - 00:12:52.888, Speaker A: I think it's a really hard model to pin down what use cases actually need, the guarantees that are required and are willing to pay the costs that are associated with it. I think there are costs associated with it that are in terms of things like ergonomics and auditability, which provides a lot of value, and things like recoverability of assets, of accounts. It's tricky. I don't think this is like, unique solution that just fixes everything. What are some things in rust you're not too well versed in right now? And what is something you'd like to learn? So this one is. It's tough, right? Because there are things that I know that I don't know, and then there are also things I don't know that I don't know. This is the classical problem, right.
00:12:52.888 - 00:13:34.272, Speaker A: I think in my case, the things that I want to know more about are embedded development. I've done some embedded development in c in the past, but I haven't had a chance to do much in rust. And I think it's really interesting. I like working with the super low level bits, but I haven't had a chance too much. The other one is Wasm. I think WASm is a really cool avenue to explore with Rust, and I think it's one of the ways that we're going to see a lot of the benefits of rust come to spaces that would normally be harder to break into. And I just haven't played around with it enough that I can sort of speak confidently to it.
00:13:34.272 - 00:14:31.656, Speaker A: This is also why in rust forever stations, there isn't really a chapter on WASM is because I don't feel like there are two reasons, actually. One is I don't feel like I can speak very comfortably on it. And two, I think we're still in somewhat the early days, like, we have a lot of the tooling now and things kind of work, but it feels like the early days of CSS, where everything was a huge pain, or they're just, if you're doing the standard things, then things work fine, but there are all these, like, things you need to know about and like slight incompatibilities, or you need to know to use this pattern to make this thing work. And it just feels a little too early stages, maybe, to. To put it into book form. Like, one thing that I observed while writing the book is that I'm writing this book for a long time, right? Like, if. If everything went out of date, like in three months, then this book would not carry a lot of value.
00:14:31.656 - 00:15:42.072, Speaker A: I wanted to sort of encapsulate the things that will actually last some amount of time. This is why in the error chapter of the book, for example, I don't really talk about things like anyhow, or this error or error, or the proposed changes to the standard library error type and backtraces and stuff, because that space is still evolving and instead focused on how should you think about your errors, because that is information that lasts. This is the whole teach a man to fish argument, you know. When do you think named parameters will be a part of rust? I don't think we'll ever get named parameters in that, in quite the form that you're probably thinking of. I'm guessing we're going to see it in the form of more convenient to construct structs that are, that are sort of. Maybe they have temporary names, or you don't need to name them, or you declare them directly in the argument list or something, but, but I think we're going to see a sort of rust take on named arguments as opposed to named, actual named arguments. And maybe we end up with, like, sugar that makes it look like named arguments further down the line.
00:15:42.072 - 00:16:33.006, Speaker A: But, but I think realistically that's probably the path. Let's see, what's your advice on overcoming feelings of getting overwhelmed, anxiety and all that when starting a new project or learning something new. So for me, at least, if I decide to learn something new, it's because I'm interested in it. I think it's fun. And so when you first get into it, you should feel excited that there are a lot of things you don't know, if you feel overwhelmed or anxious that you don't know things. I mean, in some sense that's natural, because you're correct. There are a lot of things you don't know.
00:16:33.006 - 00:17:17.580, Speaker A: But that's the exciting part. This feels a little bit similar to me, as I know a lot of people who have sort of presentation anxiety. It stems from this feeling of, like, oh, if I get up on stage, my body clenches up and I start cold sweating and get worried. And I do that too, right? Like, I also feel when I step onto a stage and know that I have to give some presentation that I'm nervous. But one thing that I was taught, I took a. A public speaking class in Australia, and one of the things they taught you was, that's normal. That's never really gonna go away, but you need to learn to make that.
00:17:17.580 - 00:18:02.642, Speaker A: What gives your presentation energy, right. Like, that anxiousness is really pent up energy in your body, and if you can use that to make your presentation more dynamic, then do that, right. You don't need to try to get rid of the anxiety or the overwhelmingness, but turn it into forward momentum of, like, I want to get over this stage, so I want to move forward. You run the risk of then getting too excited and, like, speaking too quickly, but that's, like, its own kind of problem. But I do think it's a similar kind of thing where if you want to learn something new, don't worry about the fact that there are lots of things you don't know. Think of it as you're starting to read. Imagine you start reading the wheel of Time, the book series, and there are 14 books in that series, right? There are a lot of books.
00:18:02.642 - 00:18:52.722, Speaker A: You could feel overwhelmed that there are a lot of books and there's a lot to get to, but instead, just be, like, read the first book and be like, there are 13 more. I'm so excited this won't end for a while and that doesn't solve your problem, right? Like, if you genuinely just do get overwhelmed and anxious, I think try to sort of introspective. Why are you anxious about the fact that there are things you don't know and maybe. Maybe it's because you're required to know it. That becomes a slightly different situation if you're like, I need to learn this for my job, or I need to learn this in order to get a job, or I need to learn this in order to pass this exam, then it becomes harder and there. I think there isn't really a clear cut solution beyond take one step at a time. That's the best thing you can possibly ever do.
00:18:52.722 - 00:19:19.628, Speaker A: You're not going to learn all of this overnight. You have to take it one step at a time and pick things up at your own pace. And generally, therefore, the advice is start earlier, even though that's sometimes harder. Like, that's the way you do it. Has anything in your desktop and editor setup changed since your last video? A fair amount, actually. So I'm no longer using Xmonad. I'm using the binary space partitioning vm.
00:19:19.628 - 00:19:56.230, Speaker A: So bspwm. I've been very happy with that. I'm also now using Ulauncher instead of cuphereen. I'm using Neovim with LS, like the built in LSP rather than coc analyzer. I should probably just do another video on my setup, but part of the reason I haven't is because it's still sort of evolving. Like, it feels like the Neo vim LSP setup is still settling a little. Like, there's still occasionally breaking changes and, like, a plugin doesn't work.
00:19:56.230 - 00:20:24.728, Speaker A: There's, like, multiple different projects that try to implement the same thing. And, like, I'm using Vim, Vim LSP now, and there's, like, thing. Er. No, I'm using Neovim completion. I don't know. These have changed, like, three times in the past six months. And that's part of the reason why I haven't, is because I feel like it would get outdated so quickly as I want to wait until that space settles a little bit more before I go.
00:20:24.728 - 00:21:03.316, Speaker A: Like, this is the thing I'll be using for a while. How have you been holding up during these past two years? Sorry, this is kind of personal. I'm happy to take personal questions. That's fine, too. You know, it's been weird. I moved to LA with my girlfriend in September of 2020, which is like we thought was right in the middle of the pandemic, but it was actually sort of at a slight down point. And we moved here and was sort of hoping that, okay, soon we'll be able to live our lives here, and we haven't really.
00:21:03.316 - 00:21:37.070, Speaker A: Like, everything is sort of closed. It's hard to go anywhere. I don't feel like I know people here. Like, normally my instinct when moving to a new city would be to go to meetups, whether that's a rust meetup or. I love board games, so I play a lot of board games. I would love to go to board game nights here, but there aren't really any, like, no one's meeting in person, and I that for good reason, mind you, but it means that I kind of feel like I'm just sort of living in this place, and I don't really know the place. Right.
00:21:37.070 - 00:22:11.976, Speaker A: You could have taken where I live and just move it almost anywhere else in the world, and it would feel kind of similar, and that's a little sad. Like, I wish I got to know more about this place or that I felt more as part of a. Of LA, even though. So this is the other part of it, is that I don't really like LA. I'm much more of, like, a city person, and LA is not a city. LA is like, someone described it to me as 30 or so suburbs in a trench coat. And I think that's about right.
00:22:11.976 - 00:22:37.978, Speaker A: I don't like that you have to have a car to get anywhere. I don't like that nothing is walking distance. I don't like that it's so dry. So really, I kind of want to be in Europe in one of the bigger cities there. That's more where my heart is, or New York, for that matter. I like New York a lot, but I'm guessing we'll be here for another two or three years, probably, and then we'll see where we go next. And.
00:22:37.978 - 00:23:09.910, Speaker A: Yeah, so the reason we moved here is because my girlfriend is trying to get into voice acting. And voice acting, of course, is an industry that's primarily based in Hollywood, which is here. And so you kind of need to be here even just for the networking part, which, of course, has been another bummer here, right. Is that we moved here so she could meet people, but she can't meet people because there's a pandemic going on. It's a little bit of an unfortunate arrangement. Do you work remotely for Amazon? I do, yeah. So I'm going to work remotely for the rest of my life, is my plan.
00:23:09.910 - 00:23:48.840, Speaker A: I don't see why I would go to an office. I see no benefit to it. I mean, it's nice to meet coworkers, maybe, or to be able to, like, walk over to someone's desk, but I think the benefits of working from home far outweigh that. So I've been working from home since the beginning, and so I do think you need to be a little bit principled about it. So, for me, the space you see behind me is, like, half of this room, and the other half on the other side of this here is my office. So there's another desk that you can't see right behind there, and that's where I go to work. I never go on the other side of this shelf unless I'm going to work.
00:23:48.840 - 00:24:32.520, Speaker A: And that has helped a lot, actually. It means that I actually feel like I'm going to work and I'm leaving work, which I feel like makes it easier to separate them in your mind and to like actually take, you know, personal time and to. It's easy if you just have one space to feel like you should be working or not work when you should be working because it's all just sort of mixed up in your head. Like if this desk was work and personal, it would be hard to separate the two. But this physical separation does really help. But it does require that you have a little bit more space. Your book recently released on Amazon and the Kindle version has issues with code formatting.
00:24:32.520 - 00:25:23.600, Speaker A: Do you know about them and you know if they are fixable? Yes. So this is apparently there's a problem in the Amazon Kindle conversion process. So if you look at all of the like EpuB and Mobi and PDF files from no starch, they don't have that problem. So there's specifically something about like the Amazon conversion to the proprietary Kindle format was like AZ w three or something is the file extension. That conversion is messing up the line break somehow. And I know that no starch is working on it, which is primarily poking at Penguin random house about it, who are then poking at Amazon about it. And Amazon I think are currently working on it, which is funny, I have no insight into this because that's not the part of Amazon I work for, but I know that it's being worked on and I think they're working on it and are going to push out an update to the Kindle one.
00:25:23.600 - 00:26:01.558, Speaker A: So like if you have a Kindle and are reading on a Kindle, you should be just like getting the fixed version of the book. Hopefully soon. I think a lot of people are like on break because you know, it's Christmas and New Year's and stuff, but hopefully like starting next week we should see some forward progress. It is a little unfortunate that this happened like right after release because it means that the Amazon reviews are like, half of them are just like the code formatting is broken. And to be clear, I'm not saying go leave Amazon reviews. Like if you didn't buy it on Amazon, then don't leave it in a review because it's important that they're like the verified purchases and stuff. But it's more.
00:26:01.558 - 00:26:34.656, Speaker A: It makes me sad because I want people to have a good experience reading the book. And it's unfortunate when your first experience with the book is all the code looks like shit. It's interesting to see the difference between devs like you with masters in PhD and Esteban Kuber who didn't finish his degree. Both are doing well in my opinion. Do you think a master's is usually worth it, so that's a good observation. So I love Esteban. I think he's fantastic.
00:26:34.656 - 00:27:02.290, Speaker A: He's really good at what he does, and he's great. It's hard to say whether a master's in a PhD is worth it. It depends what you mean by worth it. You shouldn't do them in order to get a better paying job. That's not the thing to aim for. If you take a master's PhD to get better paid, it will not work out. The opportunity cost is too great.
00:27:02.290 - 00:27:38.400, Speaker A: I think the big upside for me with. So Masters and PhD are slightly different, at least. I mean, I took my masters outside the US, so it's hard to say how it applies in the US. But my experience at least was that the master's degree was a great way for me to branch out and gain deep knowledge in something I didn't know a lot about before. So my masters I did on wireless networking and wifi localization. So being able to, like, locate a device based on its wifi signals, that was really cool. I got to do, like, GPU accelerated performance work.
00:27:38.400 - 00:28:05.594, Speaker A: I got to do, like, fiddling with hardware wifi bits. Like, it was really interesting and something I don't think I would otherwise have gotten a chance to try out at. Like, if I were to join a company, it would probably be a while until I got to do work like that because I had no experience doing it. So that was really fun for my PhD. Um, the PhD is a less. Like that. Like, the masters is much shorter.
00:28:05.594 - 00:28:29.280, Speaker A: Right. So you get to really specialize and learn a lot about a thing and then sort of go on with your life. So, the masters, I think, is worth it if you really want to gain, to be able to, like, branch out into something kind of niche and get really good at it. Master's great, and it doesn't take that long. A PhD is a whole other ballgame. So a PhD. I I mean, mine was six years.
00:28:29.280 - 00:29:10.542, Speaker A: It's a really, really long time. It's like a huge chunk of your life, and you don't get paywalled while you're a PhD student. Like, if you're lucky, you get paid at all. If you're unlucky, you have to pay to do it. Often there are stipends and stuff, but not everywhere. So there's a huge opportunity cost there, and it's not clear that you're a better job candidate after you are for some positions, but very often I think companies don't really know what to do about you if you have a PhD, apart from they think they have to pay you slightly more. But it's not clear that a PhD is like a prerequisite for many positions or that they even really value the knowledge you get out of it.
00:29:10.542 - 00:29:44.304, Speaker A: For me, the value of the PhD was more that it gave me a lot of time to just figure out what I thought was interesting. The PhD is sort of, you just get put in this little playpen and then someone just says, go. And there aren't really objectives, right? Like, you're not being. Varies a little bit by institution, but in general, you're not given, like, homework every week or every month or every year. Like, there aren't. You have to be very self driven. You have to figure out, this is the thing I'm going to go after.
00:29:44.304 - 00:30:29.630, Speaker A: You have advisors that try to point to you, like, this is probably not worth spending your time on because it's already solved. It's not important from an academic perspective, but in general, it's really you just sort of feeling your way through this, like, unknown space and figuring out, like, where is there a soft spot that I can push on and like, maybe push the boundaries of human knowledge a little bit. It's a really weird process. And at the end, hopefully you write a thesis that maybe two people will read, maybe you'll give some presentations and I'll get it a little wider. But in general, it's just going to be you learning a lot about learning. I think it's somewhat rare that you end up actually working with what your PhD was on. It's not impossible.
00:30:29.630 - 00:30:58.918, Speaker A: It does happen. But unless you're going into academia, down the line, companies are probably not quite as at the forefront of science as whatever you wrote your thesis on. So is it worth it? I thought it was great. It gave me a lot of time to explore open source. It let me do these streams to teach people because I had the sort of time that I could devote to that. It let me learn a lot about rust. Contribute a lot to rust.
00:30:58.918 - 00:32:01.638, Speaker A: It let me learn a lot about distributed systems, about databases, about performance optimization. You sort of get to just spend your time on things that you think are interesting, which is great. You get a lot of flexibility, and that's valuable. But are you willing to commit to it for six years? That's up to you. It's hard to give an answer. Let's see, what's your opinion on the growing number of programming professionals? Do you think the market will be saturated and start to pay less or will it keep growing over the next three to five years? I think that demand is growing as well, and so the fact that supply is growing is probably not going to slow that growth yet. I think we'll probably get to that stage at some point.
00:32:01.638 - 00:32:58.440, Speaker A: But like, I think everything needs to be programmed, right? Like we're moving into an increasingly digital and programmable and computer based world. And so there will only be more need for skilled labor in that field. And I don't think that supply is anywhere near it, which is sort of what's indicated by what pay is like at the moment. Of course, that is somewhat us specific too. So I think one thing to be careful about here is it's not like there's just one pool of supply and one pool of demand. It's more that there is a huge demand for highly skilled programmers and there the supply is maybe somewhat low, and then there's also a huge demand for junior developers. But there the supply is very large and that's also why the pay there is lower.
00:32:58.440 - 00:33:35.310, Speaker A: And I think we'll probably saturate the junior pool sooner than the sort of senior pool next three to five years, I think probably won't saturate it, but I think we are looking at a trend like that. Do you believe in God? No, I do not. I am very not religious. Um, I. Yeah, no, I'm very not religious. Most positions at Google require a PhD. They do not even consider you without one.
00:33:35.310 - 00:34:21.247, Speaker A: That is definitely not true. There are certainly positions at Google that require a PhD, but most is not the case. What are your thoughts on the zig programming language? Have you tried it already? I have not. I've heard good things about Zig, but I, I haven't had a chance to. And in some sense, I don't feel a strong need to. Um, which, you know, maybe that's ignorance on my part, but I've just had, I've had so much joy with rust that I haven't really felt like I have needed to sort of branch out yet. Um, I do, I do really want to, or rather, I should say I like programming language.
00:34:21.247 - 00:34:49.242, Speaker A: I think languages, I think it's interesting to learn about them, but I just haven't had a burning need for them since I found rust, which is, you know, maybe good. Which Os to use privately and which one professionally. I use Linux everywhere. That's definitely my preferred Osdhead. I'm using arch Linux on my desktop and on my laptop. On my work computer. It is a macOS laptop.
00:34:49.242 - 00:35:20.506, Speaker A: This is my first Mac OS. And I don't really like it, but the advantage is that I do most of my development in a VM that runs Linux. So I'm deeply happy there. But yeah, I don't really like macOS. I don't really like windows. Every experience I have with them is I want to configure my window manager in a very particular way, and I want to configure my keyboard in a very particular way. And I just can't do that on these platforms.
00:35:20.506 - 00:36:04.944, Speaker A: Part of it might be because it's also an enterprise laptop. So there are all these system configuration things and you can't change anything you want for good reason, for security reasons. But that probably contributes to the fact that I can't quite make it what I want to. If it was just my personal Apple device, then maybe I could like tweak things more than I otherwise can. But yeah, I don't see why I wouldn't use Linux. Would you have any general advice for a first year systems PhD student? Ooh. So, you know, first year PhD student, I would say, don't worry too much about what your thesis project is because anything you might guess at right now will be wrong.
00:36:04.944 - 00:36:39.058, Speaker A: Like, I didn't know what my thesis was actually gonna be about until my fourth year probably. And even then, it wasn't until my end of my fifth year maybe, that I was like, I know the title now. Like, I knew the general area. Like, I knew it was gonna be on Noria around year four, maybe end of year five, I knew was gonna be on partial state in dataflow. So, like, year one is more. Just follow all of the leads that you think are interesting. Sort of follow your heart and your passion.
00:36:39.058 - 00:37:11.138, Speaker A: I have found that in order to sort of survive a PhD, you need to make sure that the things that you're doing day to day are things that you enjoy. If they are not, you'll just burn out, you won't have fun. So if you're not currently enjoying what you're doing, switch projects. It's easy to do early, it's harder to do later. Did you like your stay at the University of Oslo? What made you go elsewhere? I'm thinking of applying there myself. Okay, so let's do a brief recap of my history. So I'm from Norway.
00:37:11.138 - 00:37:30.750, Speaker A: I grew up in Oslo. I went to high school in Oslo. And Oslo, Norway, that is. And then I did my bachelor's. I started my bachelor's at the University of Oslo. I was there for a year. Then I moved to Australia and finished my bachelor's in Australia at Bond University.
00:37:30.750 - 00:38:18.690, Speaker A: Then I moved to London and did my master's there, and then a bit of masters. Worked as a research assistant there for a little while on a project, and then I moved to MIT to do my PhD, and now I'm on the west coast. The University of Oslo for me was a. I don't know what to do, so therefore I'm gonna go there until I figure it out. It was too basic for me at the time, but part of the reason for that was because I had been doing a bunch of programming before I started the bachelor's. And, like, when I started that bachelor's, they were doing, like, intro to Java was like, one of my first classes, and I was like, this is not interesting. I know this stuff.
00:38:18.690 - 00:38:30.442, Speaker A: I don't care about this stuff. This is not what I want to learn. All the interesting classes don't come for another, like, three years. So it was not really for me. It was fine. I liked university. I liked the professors well enough.
00:38:30.442 - 00:39:00.046, Speaker A: It's just, it wasn't right for me at the time. I also, and I think I've mentioned this before, I actually applied to mitzvah four times. So I applied straight out of high school and got rejected, and that's when I went to the University of Oslo. I applied after a year at the University of Oslo and got rejected. And that's why I went to Australia. I applied when I was finishing in Australia to go there for my master's and PhD and got rejected. That's why I moved to London.
00:39:00.046 - 00:39:40.290, Speaker A: And then it wasn't after I got my master's in London that I got in on my fourth application. So, like, it takes perseverance, that's for sure. The University of Oslo, for me, was more like a stepping stone or a holding ground until I could figure out where I wanted to go next. And I think part of the reason why it felt like that for me was because I grew up in Oslo. The University of Oslo felt like more of the same. I'd already been to school in Oslo for so long that it just felt like the next year in school, rather than, like, going to Australia, was very different. And I enjoyed that a lot of getting that experience of getting away.
00:39:40.290 - 00:40:44.240, Speaker A: About the joy of Rust, I wonder how you deal with compile times. Do you think Rust will shift to drop legacies and shift towards a fully lazy compiler, compiling only stuff that is used in depth? You know, I don't have that many problems with compile times in rust. There are some projects that are really bad and primarily things where procedural macros are involved. But it doesn't really affect me that much most of the time. And maybe that's because usually I end up working on either things that are low in the stack so they have like that they're fairly self contained, or they are very large projects that I sort of expect to take a while to build. But even so, like, a slow build isn't that slow. Like, it's not like it takes hours to build and if it does, something is wrong.
00:40:44.240 - 00:41:34.702, Speaker A: Whether rust will sort of shift towards a lazy compiler, that's harder to say. It's also unclear what the benefits are there because the analysis becomes a lot more complicated. I don't know if you would actually get speed up and compilation. There are certainly ways in which the compiler could get smarter about what it compiles and how, but I don't know that it requires a full compiler rewrite to get there. For me, the joy of Rust comes more from the fact that I feel like I can write code that represents the mental model I have of the problem. And this particularly comes down to the type system. I feel like I can, I can tell Rust in source code form what the actual constraints of an interface are.
00:41:34.702 - 00:42:29.138, Speaker A: I can make things not compiled that are wrong. And that to me is core of why I enjoy working with the language, is that I can really use the expressive type system. Just means that I get to write code that matches how I think about the problem. Can you write an os like Linux in Rust? Yes, absolutely. There are several that people are writing. There's like Redox OS and there's also, I think, libertyos, and I'm pretty sure there's at least one other. Let's see, what's the coolest rust thing at AWS that you know of and can tell us about? Um, you know, I think that's actually an easy question.
00:42:29.138 - 00:43:02.860, Speaker A: I think Firecracker is just really cool. I like the like super fast VM for, for sort of small or fast jobs. I think it's really cool. And it's written in Rust. I think it's cool. I haven't like read all the code or anything, but I think it's just really cool from like a we can do this and rust enabled it kind of way. Do you think it's worth learning rust as a data scientist? That one is tough, because rust at the moment is lacking a little bit in things like data analytics tooling.
00:43:02.860 - 00:44:03.004, Speaker A: We don't have great libraries for things like plotting and data analytics. There are like linear algebra libraries and stuff. But compared to something like R with Ggplot and stuff, it's definitely some distance off. It's also not clear that Rust's benefits help you a lot in data analytics, unless you are specifically crunching very large amounts of data where you could really use that speed benefit. But I think there's a lot of value in able to do things like, basically have a repl, which is much harder to do in Rust because it's compiled. Like, having a runtime helps you a lot with just being able to do sort of interactive data exploration, which is harder in Rust. How's it like being far from your parents and your family? You know, this is actually something that doesn't bother me that much, and maybe it's because I've gotten used to it.
00:44:03.004 - 00:44:38.530, Speaker A: Right? Like, at this point. So I moved from. I moved away from Oslo in 2009, and so I've lived away from home now for a very long time. And I do go home to visit. Like, don't get me wrong, I love my family, but I don't feel like a sort of constant pull to them of, like, I need to go home. I think I've sort of settled on a nice balance where I see them. Like, I sort of Skype with them every now and again, and I see them maybe twice a year, and I'm okay with that.
00:44:38.530 - 00:45:09.040, Speaker A: I have my own life now. How likely are you to move back to Norway? You know, this is. This is a. It's a question I go back and forth on. I really like Oslo, and I like it more over time. Every time I go back, I feel like the city has evolved somehow. It's become more diversified, more international, more interesting.
00:45:09.040 - 00:45:33.050, Speaker A: So I think it's actually a really attractive place to move back to now. And it's also, Norway is a great place to raise a family. It's also a great place to work compared to the US, especially. But there are also fewer opportunities there. So I don't know that there's like a. I don't know. It's a clean trade off where it's like, obviously better.
00:45:33.050 - 00:46:05.414, Speaker A: It also depends on my girlfriend. I honestly don't really know yet. I really like London, so it might be that I'd move to London instead of to Oslo, and that way I'd also be a decent amount closer. But I don't know. Like, Brexit made moving to London a lot less attractive. So I honestly don't know yet. Are you going to stream programming topics on a more regular basis soon? You know, this is tough.
00:46:05.414 - 00:46:43.418, Speaker A: I really want to do more streams. It's just time has been so short for me lately, and so I mainly do two types of streams, right? I do the quest of rust streams, and then I do the programming streams. The programming streams I have much more material for. Like, I want to do more on the hazard pointers. Like, I have at least one more stream there. I want to ultimately get back to the lock free, no, the wait free implementation that we were working on based on a paper, which we needed hazard pointers for. Right.
00:46:43.418 - 00:47:20.870, Speaker A: There are like multiple layers of the stack that I want to do. The problem with those videos is they take six, 7 hours, probably about 8 hours total if you include like setup time. I need to set up the chapter marks, like encoding, uploading, you know, all that. And it's just really hard to find eight hour time slots in my calendar these days. That's not to say I don't want to, it's just, it's been tricky. And especially now, lately, there's been a lot going on with like the book release new cat, you know, it's a lot of stuff, but I do want to do them. I just don't know when I'll find the next time slot.
00:47:20.870 - 00:48:51.870, Speaker A: Crest of Rust is a little bit of a different story. So they're, the videos are shorter, so they're easier to schedule, they're easier to do even just like during the week. The problem there is I want to make sure that I make them on topics that are interesting, important, not readily explained elsewhere, somewhat intermediate, and I want the explanation to be relatively complete and lasting over time. We keep coming back to this concept of I want to put things out there that have a longer lifetime, right? Where it's not like I put the video out and then everything is outdated, like three months later. And for crust of rust, I feel like I've gotten to a point where there are fewer good topics left that fit all those criteria. So there, it's less that I don't have the time and more that I need to find the right topic and the right way to cover that topic. So this is why I had the, the Reddit thread a little while ago where I was asking people, like, actually, let me link that in chat where I asked people like, what would you like to see? What is the, why is Reddit not loading? There we go.
00:48:51.870 - 00:49:28.330, Speaker A: Like, what topics would you like to see covered? Which ones are not well covered at the moment? And one of the things I stipulated in that post was like, here are the criteria that I use in order to choose my topics, please give things that actually match this. And some of them did, some of them did not. But here. But I did get a lot of good suggestions there. So I'll put that in chat. But yeah. So the short answer is, I want to do more streams.
00:49:28.330 - 00:50:27.816, Speaker A: It's partially lack of time and partially lack of content. Um, for an engineer of your caliber, exactly what is an opportunity to you research work in general? Um, so I, I think this question is asking what do you look for given your range of options? Um, and I, I want to answer that in two parts. So first, my range of options is not as wide as you might think. And that's partially because I am very picky about what I do. And that in turn is because I know which things I'm good at and there are some things that I believe I'm really good at, but there are also lots of things that other people might think I'd be good at, but I know I wouldn't be good at. Like one example of this might be. So Amazon, for example, has a lot of service teams.
00:50:27.816 - 00:51:18.324, Speaker A: There's the s three service team, there's, I don't know, all of the various EC, two, all of the services that Amazon has or AWS has. I think a lot of those teams would love to have me on board on their teams to work on the service, and I don't think I would enjoy that and I don't think I would necessarily be good at that. Like that's not, my background is not working on services and web APIs and that kind of stuff. Maybe the backend engineering, but that's not where my experience lies. I think where my skills are much more in like low level, like libraries, data structures, concurrency, which you do much less on, on a service team. I could probably learn the other things, but it's not my passion. Like, I don't have the same drive for it.
00:51:18.324 - 00:52:14.154, Speaker A: So even if I did learn them, I don't feel like I would be as productive there as I would be in the spaces that I truly care about. So in some sense, the answer to your question is that I want to do things that I enjoy. And that matters much more than whether it's research or whether it's working for, you know, a commercial company or whether it's working for an organization, as long as it's something I'm passionate about. And in some sense, this is the reason why I took the job I currently have at AWS, which is I want to enable more people to work with rust because I believe in the language and I enjoy the experience of sort of enabling people to use it. And this role was you get to work on enabling people to use rust and you get to work on improving rust on the process by making it work better with like large build systems, which enables other companies to pick up rust. And you get to work with all the developers internally who want to pick up the language. So you get to do sort of teaching and stuff as well.
00:52:14.154 - 00:52:54.922, Speaker A: So it's been a really good position for me to do many of the things that I care about. You've said that you generally only learn something if it solves a problem for you. Are you interested in WaSM enough to find a problem for it to solve? I think it's very hard to find problems in a space that you don't work in. I don't think you find problems by sort of setting out to search for them. You can, but it requires a lot of time. You encounter problems and then you decide to solve them. So I guess the answer is no.
00:52:54.922 - 00:54:04.814, Speaker A: I'm not interested enough to sit down and do all the work to find a problem there. That said, it might be the case that over time wasm is used more in the things that I use and therefore I end up being interested in it because I encounter a problem, but I probably won't go and like actively look for them. If someone was thinking about starting a rust programming YouTube channel, what sort of level and domains do you think would be most useful to people? It's a great question. Please do it no matter what you choose in terms of level and domain. I don't have a great answer for you because I don't think there are objectively good answers. I think what makes for a good channel or a good blog or a good Twitter account is that you have a passion for what you teach and for teaching it. It's not enough to have a passion for what you teach if you don't enjoy teaching it.
00:54:04.814 - 00:54:41.636, Speaker A: And it's not enough having a passion for teaching if you don't care about the thing you're teaching. So you need to find something that is both. And that's why my streams are primarily around like low level primitives and concurrency and synchronization and like that sort of stuff because I really care about that. I think it's so fun to work on the and you should do the same. And maybe like for some people, their passion is to get people started with a language to do the sort of beginner content. If that's your passion, do that. There are more resources in beginner material, but that doesn't mean that there's not a space there.
00:54:41.636 - 00:55:43.794, Speaker A: And especially if you find a domain that, that isn't well covered elsewhere. If you do decide to go for the more sort of advanced streams, think very carefully about who your audience is. Like, this is a problem that I've had a challenge with too, of like who am I making these videos for? Because I know that there are a lot of people who don't care about my videos or who sort of, I know there are people who find my voice annoying. I know there are people who think that they're too slow or that I take too many detours so that they should be edited down or that, you know, that video isn't for them in the first place. And that's okay, right? The audience I have in mind is not all rust programmers because it's not a realistic audience. So you need to figure out who are you going to be making your videos for? And then you have to like be laser focused on that audience. And this is why I have not been making my streams shorter or it's switching topics.
00:55:43.794 - 00:56:30.600, Speaker A: It's because I need to do the things that I am passionate about and that I believe in for the audience that I want to make it for. Otherwise the content won't be good because I won't, my heart won't be in it. And so, like, I know, for example, that there's definitely a space in rust for like more curated shorter videos on advanced topics or intermediate topics, basically my videos, but like a 10th of the length. It's a lot of work. Like, I can tell you that if you were to try to do that, the editing will take a very long time. But there's definitely a decent chunk of developers who don't want to watch my videos because they're too long but want to learn the content. And maybe, and who are looking at videos, maybe you do a blog version of the same thing, but just you need, you need to find your space.
00:56:30.600 - 00:57:17.704, Speaker A: Look at something like the faster than lime blog, which I think is fantastic. I feel like I don't actually, Amos is that, I think it's Amos. So Amos has found a sort of niche as well, right? Where all of the blog posts are very long form, very exploratory, very informal conversation. Let's see what we find as we go. And I think that's great. I love reading things like that. But for some people there's just too much stuff, right? Like it's like, tell me the commands to run or just show me the diagram or point me at the issue, rather than give me like an hour long read blog post.
00:57:17.704 - 00:57:51.940, Speaker A: And that's okay. It just means that you need to find your audience and cater to it. If Amos started writing much shorter posts, then a bunch of the audience would go away, because that's not what they came for. That's not how they learn or all of that. If you think about taking an article that's this long and cutting it down to be this long, there's stuff that you're removing, right? And for some people, that stuff doesn't matter. But for some people, that's where you pick up all those little weird things you didn't know about the language, and this is the only way you get exposed to them. So find your audience and then target that.
00:57:51.940 - 00:59:05.240, Speaker A: Um, you seem to have an analytical mind. So I'm curious about your thoughts on the origin of the universe. Do you believe that there was a first cause, or do you believe it has had always existed? You know, it's funny, because I, in high school, I took a philosophy class, and I ended up participating in the international philosophy Olympiads, which, yes, is a thing, and one of the first questions. So the way this Olympiad worked is you're given a set of, like, five thesis statements, and you have to pick one and write an essay about it. And I remember the first question that I chose, the one I chose for sort of the entry essay, was about the origin of the monoid. Let me look this up so I don't say anything entirely wrong. So not the monad, but the mono monoid, which is a.
00:59:05.240 - 00:59:25.860, Speaker A: The principle of philosophy. Let me see if I can. I forget who the philosopher who started this was. All I get is programming terms. I'm not after the. Aha. Monodology.
00:59:25.860 - 01:00:37.770, Speaker A: Okay, so here's the Wikipedia article on monadology. Okay, so this is the work of Gottfried Leibniz. And I'm taking this from, mostly from memory here, but the argument is basically that there is a smallest possible element that everything is made of, and that is the monoid, or the monad, not a programming monad, but he was sort of thinking of the atom. But even if it's not the atom, there's some smallest piece that just, you know, everything is constructed of, if you go deep enough down. And the question in this essay question was, is this true? Like, could this be true? Of course there's no. You can't really answer this question. But for me, this ended up being an exploration of the origins of the universe, which was, let's assume that there is such a smallest thing, then we have a couple of options.
01:00:37.770 - 01:01:44.832, Speaker A: Either that thing has always existed, so there's no beginning to time, which is weird for us as humans to conceive of. How could something always have been? What does that even mean? The second explanation is that they were made by some metaphysical being and this thing just made the monoids and then they formed all of the rest of existence. That's sort of the divine creation theory, right? Of course, then you run into the problem of, well, if everything is monoids, then what was this metaphysical being made of? Was it made of monoids? Because then who made those monoids? So it sort of recurs this, but you can always make the faith argument of, like, you know. And then there's a third argument, which is that these things did not exist and then suddenly started existing. And this is sort of the physics argument of. For that to be the case, something must have been made from nothing. So the question is, how is that possible from physics? We don't know how you can make something from nothing.
01:01:44.832 - 01:02:29.998, Speaker A: You could convert energy to matter, right? So maybe there was just energy, but you still have the same problem, then, of where did the energy come from? You still have the same. Either it's infinite or something was made from nothing. And so the possible origins of the universe, given this monoid theory, is that either the universe is infinite in both directions, because these monoids can never be created or destroyed, or there's a divine creator, or we don't have enough of an understanding of physics to be able to explain this. And, of course, my take here is the third one. We don't know enough. But those are my brief thoughts on the origin of the universe. Yeah, I had no idea there was a philosophy Olympiad, either.
01:02:29.998 - 01:03:00.260, Speaker A: It was very funny. I ended up going to Romania, to Yash. It's a city of Romania. That's where there was. The Olympiad itself was held. I was one of two participants from Norway, and it was a really bizarre experience. Would you be upset if someone started studying your book in video format? It depends what you mean by studying.
01:03:00.260 - 01:03:51.420, Speaker A: It's my very sincere belief that you can't teach everyone with one resource because people learn in different ways. And as I said before, not everyone will learn from me or learn from my way of teaching, and that's fine. And so I think that the way that we disseminate knowledge to mankind is that you have reinterpretation, you have other people learning, and then in turn teaching. Like, one day I will die and someone will have to keep teaching, right? And so if other people take what they learn from me and then teach others based on that, that just makes me happy. Right. I don't own the knowledge that I teach on these, on this channel and in the book. Right.
01:03:51.420 - 01:04:30.566, Speaker A: I guess in some sense I like, own the words or something like copyright and whatnot. But if other people try to reteach, and that's great, I do want to make sure that people reteach in their own words in their own way because just like regurgitating exactly the things that I said, I don't think adds value. So would I be upset? No. Like, if someone studies what I did, that sounds great. If there's discussion around what I wrote, that's great. I've seen a couple of, like, rust reading groups that are picking up my book and having lots of great discussion that I sometimes get tagged into. That's fantastic.
01:04:30.566 - 01:05:31.978, Speaker A: That makes me very happy. What inspired you to work on Noria? So, you know, Noria was one of those I can't believe it doesn't exist type of problems, which maybe is a good way to find good PhD thesis projects. But I, I'd done a lot of web development in my past and there was one point during my thesis work where I was working on some, like, or during my early days of my PhD where I was working on like, some database stuff, and I was like, I don't really like databases. I don't want to work on a database. I told my advisor this, like, I don't want my thesis to be on a database. Of course, here I am. But he and I had a conversation about, like, all right, what's wrong with databases? Not necessarily like, why I don't want to work on them.
01:05:31.978 - 01:06:04.802, Speaker A: But just like, why do we have this dislike for databases? And for me, the answer was that they're never fast enough. They feel like they're not made for what I use them for. And after a bit of exploration, that was really, they're not made for read heavy workloads, they're not made for web applications, which is the primary place where they get used now. And that frustrated me. And then we sort of got the discussion of like, well, you just put a cache in front of it. I'm like, well, why should you need to? Caching is a huge pain. I don't want to write a cache.
01:06:04.802 - 01:06:26.000, Speaker A: I don't want to have to maintain a cache and implement a cache and run a cache service. Like, I don't want any of that. Why can't the database just do it? For me? It knows my data, it knows my queries, it knows my schema. It should just do it and out of there. Rose. All right, let's implement that then. And then five, six years later, we had Noria.
01:06:26.000 - 01:07:41.892, Speaker A: Do you think that rust is a good option for writing video games? I do, and I say this with very little experience writing video games, but I have this hunch that for video games, they're kind of stuck working with C and C because they can't afford GC pauses of any kind. You just can't in a video game setting. And so with rust, you don't have GC pauses, so it's a contender. And c and C are a pain to get right, even for performance sensitive code. So why not use rust? There's obviously a bridge there of, like, all the game engines are written in c and C, so there's definitely a transition period, but I feel like it's a really strong contender there. And what's missing is, like, all of the middle layers that you build games on top of. I mean, I know that we're getting bevy and stuff, and that's really cool, but I think it's really just a matter of time before we see it in a lot more games.
01:07:41.892 - 01:08:38.669, Speaker A: And I've really been curious about going into games myself because game development is a lot of concurrency and data structures and performance and latency, and I think that's great. I think it would be really fun to build something visual like that, but it would be a bit of a career jump. But it does sound really cool. Would you live forever if given the option? I feel like I would have a lot of follow up questions. Like, live forever in what way? Right? In what physical form? And I think the answer is no. Like, forever is a very long time. There's also the question of, like, okay, who else? Like, is it just me? Am I gonna, like, outlive humanity and then just like, live alone for the rest of the existence of the universe? Because that sounds terrible.
01:08:38.669 - 01:09:11.860, Speaker A: So probably no, unless the details were very compelling. Otherwise for us unaware. What is Noria? Noria is my PhD thesis project. There's a video were me presenting both. There's one where I talk about a high performance database on YouTube, and there's another one where I actually give my thesis defense where I talk about it, but very briefly. Noria is a database, or it looks like a database. It clocks like a database, it smells like a database.
01:09:11.860 - 01:09:41.106, Speaker A: You interact with it like it's a database, but it implements caching internally so that when you read, you're basically getting the read speed of reading from a cache, but it's automatically maintained by the database. You don't have to do cache and validations and stuff, they just automatically happen in place whenever you do writes. So you basically just did the work you didn't want to do. Yeah, exactly. That's exactly what happened. Why don't you stream on twitch? I do. All my streams go to both YouTube and twitch.
01:09:41.106 - 01:10:29.610, Speaker A: So right now you can go to twitch instead. When do you think the rust GUI ecosystem will be mature and stable enough for production ready apps? I don't know enough about that space. There was a question earlier about what spaces don't you know much about and potentially would like to learn? I think GUI programming is one of them. I think I've come to the realization that, I don't know if it's a realization, maybe I knew it all along, but like most people don't want terminal applications, they want Gui's. And I think for me it hasn't mattered that much. I don't care about GUI programming because I enjoy building things for developers, which means they can be command line based. But GUI programming is just essential for getting, in some sense, computers to the masses.
01:10:29.610 - 01:11:06.010, Speaker A: For programming to really have an impact, ultimately there has to be a user somewhere. Otherwise you're not making people's lives better, you're not having an impact on people. So, like, there's interfaces downstream of you somewhere, and therefore they matter. It's not something I work on. I don't know that I would care about working on them. I don't know if Rust has like a compelling new take on GuI programming. I think it's really just catching up to being able to make interfaces or Gui's in rust, and I don't have enough of a handle on that space to see, say, how far along it is.
01:11:06.010 - 01:12:00.890, Speaker A: Does ownership model kind of break around classes? Otherwise it's going to be hard to breach GUI in games without them. I mean, there are no classes in rust. What I've seen is that for game programming in rust you often use the, what's it called? Entity component system, which is like a neat way of representing entities in games, and that apparently works really well. But I can't speak too much to it in detail because I don't have first hand experience with it. But this is what I've observed from people talking about rusting gaming. Have you ever met Graydon horse, Steve Klabnik, or someone from the rust core team? I have. I've not made Graydon horror.
01:12:00.890 - 01:12:30.430, Speaker A: I have met Steve Klabnik. I met him. Where did I meet him? I met him in Boston. For, you know, that's a very good question. I think he was here for a meetup, like back in 2017 or 18. But. But very briefly, others from the Rust core team.
01:12:30.430 - 01:12:51.830, Speaker A: I mean, I've. I've met Niko as well because Niko was in Boston as Niko is not on the core team anymore. But. But I did make Niko in Boston a couple of times. I don't think I've met anyone else there. I've, like, chatted with some of them one on one, but. But not in prison.
01:12:51.830 - 01:13:30.028, Speaker A: What's your main goal this year? My main goal this year. So I don't know that I have a goal. So there's a YouTube channel called CGP Grey, which I highly recommend. Like, he makes amazing videos, and they're. They're just really good explorations of sometimes weird, sometimes just insightful topics. And I really like their narrative style. But they have this one video on.
01:13:30.028 - 01:13:57.538, Speaker A: You shouldn't have goals for the year. You shouldn't have, like, New Year's resolutions and stuff. Instead, you should have themes. You should have a theme for your year. And I think that was a really cool twist on this. I don't know that I've decided on my theme for 2022 yet, so I'm gonna have to get back to you on that one. But that's how far I've gotten is I think I want it to be a theme rather than an explicit goal.
01:13:57.538 - 01:14:41.074, Speaker A: Part of the reason is because you can't fail at a theme. A theme is something that colors your decisions and color the ways you make decisions. But it's not like a checkbox where either you did it or you didn't have. And I like that because you can make a lot of progress in the direction that you want without necessarily committing to what the end goal is going to be ahead of time. Which buzzwordy technology would you advise actively avoiding? Nfts. It's a huge waste of time. When do you think Rust will be used in Linux? I think we're not too far off.
01:14:41.074 - 01:15:11.844, Speaker A: I think we're getting pretty close now. Like, the latest iteration of the patches, I think got pretty good reception. There's still like an open ticket with. Actually, let me link that as well. Rust. Colonel, there's this issue which is tracking rust unstable features that are still needed for rust to land in the kernel, which is really cool, but we're still a little bit off. But there's certainly a really good forward momentum there.
01:15:11.844 - 01:15:41.104, Speaker A: That's exciting to see. Shows the cat. Okay, so I now have two cats. And because. So there's kind of the situation of chai, which is our first cat is like an only child, right? Like she owns the house. And then we got a second cat. And Chai did not like smelling another cat in here, which is pretty usual.
01:15:41.104 - 01:16:01.484, Speaker A: The other cat came from a foster family that had twelve cats that all lived together. So she's completely used to there being cats everywhere. And is now kind of lonely cause she's alone with us. But. So she really wants to meet Chai. But Chai does not want to meet her. And so we've had to sort of separate them off.
01:16:01.484 - 01:16:36.280, Speaker A: So Miso, the new cat, lives in our bedroom and the adjoining bathroom. And then the doors there are closed off from Chai. And Chai, of course is furious that she can't go into those rooms because she owns them. So I can't actually bring you both cats because they're just separated. I could maybe bring you Chai, but I don't know where she is right now. But if she comes wandering up here, I'll make sure to show her. What books are you reading? I am rereading the wheel of time.
01:16:36.280 - 01:16:59.022, Speaker A: I read that book series when I was. It's probably the first fantasy series that I. No, I read Jules Verne before that. But I think I read wheel of time starting when I was like 1213 maybe. I started the first book. I started in Norwegian and then I switched to English partway through. And, you know, they're just great.
01:16:59.022 - 01:17:50.360, Speaker A: I love those books. So I'm rereading those. I also have a couple of programming books that I want to read. Where are they? So there's this one, the visual display of quantitative information by Edward Tufte. So this book is all about how to visualize data in a way that is helpful and sort of not just that it looks nice, but that it actually presents helpful insights about your data. I want to read this one, a programmer's introduction to mathematics, because I feel like my math knowledge is not where it should be and a programmer's introduction seems good. And where is is.
01:17:50.360 - 01:18:20.362, Speaker A: I'm also rereading the pragmatic programmer. I read this many, many years ago, but there's a new edition out now. Pragmatic programmer is great. If you haven't read it, absolutely read it. And then I've been recommended this, but I haven't started it yet, which is the algorithm design manual, which is all about like cool data structures and like, how to implement them and how to implement them efficiently. This might make for a really good like stream topic. Just like implement all the things from here.
01:18:20.362 - 01:19:43.380, Speaker A: Like just looking at the list of the table of contents it's got, there's a bunch of things about analyzing them. So big o notation and stuff. So there's stacks, queues, dictionaries, binary search trees, priority queues, sorting heap sort, merge sort, quick sort, binary search, divide and conquer graph, traversal breadth first search, depth first search, shortest path network flows, bipartite matching backtracking this is like combinatorial search search pruning, Sudoku solving, parallel algorithms, dynamic programming like the partitioning problem and parsing context free grammars and satisfiability p versus Np Kd trees set trees. Like the list just goes on and on and on and like this is like gold stuff. I love fiddling with these kind of bits. So maybe a fun like stream series just do, just like implement all of the data structures from there. Might be really fun.
01:19:43.380 - 01:20:21.890, Speaker A: My books are mirrors. Oh no, I'm sorry, I don't know why. Oh, I guess I haven't mirrored my screen. And I'm also going to reread brave new World 1984 because they're really good books. And I recently heard an intelligence squared debate on which one was more anticipatory of the times we live in now. And it was an interesting discussion. It made me want to reread both books, and I realized they're actually both really short.
01:20:21.890 - 01:21:13.294, Speaker A: John, what is your Amazon salary, if not a secret? Is it a secret? That's a good question. I don't think it is. I think in California you're not allowed to prevent someone from disclosing their income. But I'll be slightly vague, just for reasons. So Amazon pays in salary plus equity like ours use. And for your first two years, or at least in my case, the first two years, you get like bonus pay to make up for the fact that your rsus don't vest yet. And I think my total compensation currently is around 300k.
01:21:13.294 - 01:22:12.950, Speaker A: Like I think just below 300k. That's per year, if in case that was unclear. And us dollars, what's your second favorite color? Orange specifically. Do I have anything in that orange right here? No, I don't. I thought I did, but yeah, orange is my second favorite color. What's your travel bucket list? My travel bucket list. I used to have this written down and then I moved and forgot to bring the list.
01:22:12.950 - 01:22:41.870, Speaker A: I had a world map, like a pin board world map with different pins. And I even traced out what the travel route would be, but places I want to go are. I really want to go to Japan. I would love to just take a few months in Japan and just travel the country. I really want to go to Hong Kong. I've been there briefly, but I'd like a longer stay. I really want to go to Seoul.
01:22:41.870 - 01:23:16.452, Speaker A: I really want to go to Singapore. I really want to go to. I really want to go back to Bali. I spent two weeks in Bali a few years ago and went diving there and stuff, and it was amazing to go dive there. I don't really care about the party scene and stuff there, but the diving there was really good. I want to go back to Australia just to visit. I have a lot of friends there, and I haven't seen them in a very long time because it's so far away.
01:23:16.452 - 01:23:53.678, Speaker A: I also want to go visit New Zealand because I didn't while I was in Australia, which was dumb of me because that's the one time you're actually close to New Zealand. I also want to go to Iceland again. I had a. I went on, like, a company trip there, like, nine years ago or something now, and we went, like, snowmobiling on a glacier and stuff, and it was. It was amazing. It was real fun. Where else do I want to go? I really want to go back to Ho Chi Minh.
01:23:53.678 - 01:24:43.980, Speaker A: So in Vietnam, there was a trip that I went on many years ago now with some friends, and we were supposed to spend a week in Vietnam. No, a week in Bali, then a week in Vietnam, and then a week in Thailand. And we liked Bali so much that we stayed there for two weeks instead. And we only had one day in Vietnam. Like, we landed, we spent the night, and then we left the next day, but it looked like it's a really interesting and different city that I would like to see again. I've been to Bangkok many times, and I think Bangkok is great, and I would love to see some more of that. What else is on my list? I want to go to the Netherlands just because I feel like it's a place where I will enjoy the energy somehow.
01:24:43.980 - 01:25:31.742, Speaker A: I can't quite describe it. I'm not a drug person. I don't care about that part of things. But just, like, it just seems like a pleasant country, and I want to go visit. It's hard to get that from, you know, just a brief visit. Let's see. Do you ever feel limited by rust type system compared to something more dependently typed ish, like Haskell? I don't really feel limited compared to something like Haskell, I do feel.
01:25:31.742 - 01:26:22.104, Speaker A: Or rather, if I were to take a step up in the type system hierarchy, I would go to something like Idris or cock, right, wherever you truly just, like, have, like, formal verification and, like, machine proof verification at your fingertips, and you can actually prove semantic properties about the behavior of your code dependent types. Get you some of the way. But. But I feel like, realistically, I don't know how much Haskell would buy me over rust. I don't know that that would be worth downsides. Whereas something like cock or Idris, I think, is. Or maybe like, Daphne or f hash is a better comparison point here, but somewhere where you can actually, like, verify the behavior of your program according to some.
01:26:22.104 - 01:26:58.300, Speaker A: There's, like, a big asterisk about according to some spec, and who knows if the spec is right. But, like, I think that is the. Realistically, the step up, and I don't really feel limited there. I think it's great that people are working on that, but that's not. That's too far for me. I care too much about the implementation of the algorithm and not enough about the type representation to go all that way. Do you want to check out India? I do want to go to India, too, actually.
01:26:58.300 - 01:27:31.320, Speaker A: I would love to go to India. I don't really know where I would go, but I have a friend who has gone to India many, many times. He's in the region, but one of his parents, I think, used to work for the embassy in India. I forget exactly what the connection is, but he went there a lot, especially when he was younger, and I feel like he would be a good guide. Oh, Mexico, too? I would love to go to Mexico. All of. I would love to go to South Africa.
01:27:31.320 - 01:27:53.258, Speaker A: I want to go to Morocco. I want to go to Egypt. You know, I just love traveling. I would love to go lots of places and subsets. I think it's more like which places are not on my list. And I don't even know that I have many. How old are you? I am 32 years old.
01:27:53.258 - 01:28:18.852, Speaker A: I'm halfway to 64. So people are like, the important dates or the important years are like, when you turn, what, 1618 and like, 2030, 40, 50, who knows? You know, for me, it's not that. It's the powers of two. Those are the ones that matter, right? So you turn one. That's a big one. You turn two, you've, like, survived your first two years. You turn four.
01:28:18.852 - 01:28:43.526, Speaker A: Maybe you're starting to become sentient. You turn eight, and now you're like, a kid and not a baby. You turn 16 and now you're like an adolescent and not a kid. You turn 32 and now you're an adult and not like an adolescent anymore, and then you turn 64 and then you turn old. So, like, it's the powers of two. And if you get to 128, then you, like, that's the high score. So for me, the powers of two are important.
01:28:43.526 - 01:29:14.670, Speaker A: And I'm now in the. In some sense, I guess I'm in the last half, which is disturbing. No, I'm not in the last half. 64 would be the last half. I'm in the second quarter or something that turned dark. But yeah, I'm 32 and I think 32 is a good year. Yeah, I basically want to go everywhere.
01:29:14.670 - 01:30:38.702, Speaker A: Fibonacci over power of two. I mean, maybe, but I feel like the power of two just has this magical property of it kind of maps the stages of life, too. Any general advice on how to get better at teaching, especially things you understand very well and maybe don't have a lot of empathy for how it feels to be a beginner? I think the thing that taught me the most about empathy for beginners is to start teaching the moment you have to explain something, and I want to say specifically teaching with an audience is you start teaching and then realize that people don't follow what you're saying. And the questions that you get are the things that correct your impression of what people know. So my guess is, as you start teaching, you will be bad at it because you will assume too much. And then over time, you learn where your audience is at and then you can adjust for that. And this is why, like, I think it's so valuable to have to do streams as opposed to just publish videos is because the feedback from chat makes sure that what I teach has a pace that people can follow.
01:30:38.702 - 01:31:02.912, Speaker A: Right. And it forces me to re explain. If an explanation was poor, it forces me to take a step back if I did too much of a leap. And I think you need that correction to learn that skilled. So in some sense, the way to get better at teaching is teaching. It's not super satisfactory, but I think that's the best I have. It's also, you need to care about it.
01:31:02.912 - 01:31:43.796, Speaker A: You need to really feel like you want to help people learn. And then the feedback you get won't feel like a defeat. It will feel like great. This is information I can use to make this better the next time around. What is your favorite restaurant in La so far? Oh, that's an interesting one. I don't know that. I have one favorite of.
01:31:43.796 - 01:32:09.480, Speaker A: I really like the ramen from Tsujita. I really like the dumplings from Din Tai Fung. I really like the salads from Mendocino farms. You know, it's a good question. What else do I have? I really like. I'm just gonna pull up my order history here. This is the other problem.
01:32:09.480 - 01:32:47.402, Speaker A: I can't really go anywhere. Everything is closed. The bowls from flower child are really good. The boba from teaspoon, the burgers from the counter burger. What else I got here? Oh, there's a restaurant called Violet Bistro that is pretty good food. I've been happy with them. Yeah, I think that's my.
01:32:47.402 - 01:33:36.048, Speaker A: Oh, and the ice cream from echo and Poco. I think those are my, that's my, that's my current shortlist. I have many places I want to go, though, but many of them are close or hard to get to at the moment. Can you tell us about give directly? Sure. So give directly? I don't actually know a lot about it myself, beyond the fact that there is a. So there's a website called Givewell, which is an organization that tries to figure out what charities are worth giving money to, like, where you can have the greatest impact. And give directly is one of the places that Givewell recommended.
01:33:36.048 - 01:34:23.418, Speaker A: And give directly is on the list of charities that are registered with the YouTube, like, charity list that you can. So on YouTube, you can, like, set videos to be found, fundraisers for different charities. And there's like, a list of charities you can choose from and give directly was on there and was recommended by Givewell. And that's why I chose them. And my understanding is that the basic idea behind givedirectly is one way to help people who are struggling is to give them money, counterintuitively. So that's what they do. And of course, it's like you need to select carefully and make sure that it goes somewhere useful.
01:34:23.418 - 01:34:54.050, Speaker A: But ultimately, like, that's how you help a lot of people. I do like greek restaurants. I love greek food. I used to make tzatziki, and I should make tzatziki again. It's so good. Hey, John. I'm in my second year of a double major in mathematics and computer science, and really considering going to grad school for operating systems.
01:34:54.050 - 01:35:41.500, Speaker A: What helped make up your mind about grad school? You know, the reason I chose to go to grad school was because I really like to learn, and that seemed to be the best way to do it. Once you go into industry learning random things. Maybe not random, but learning whatever you want becomes a lot harder because during your workday, you're gonna be super busy with work, so you're only gonna learn things that are relevant to your job. And that might not even be that much. Especially the longer you're there, the more you'll just be doing things that, you know, you'll still be learning. Like, it's not like you'll stagnate completely, but. But in general, learning is gonna happen more on your spare time.
01:35:41.500 - 01:36:34.660, Speaker A: And I didn't feel like I was ready to stop learning lots, and grad school is a great way to just learn, learn lots of things. That was the deciding factor for me, that I didn't really care about, like, going into the job market and, like, making money yet. And that, like, partially because it's like a position of privilege. Right? Like, I didn't need to make money because the grad schools I applied to had stipends that I could live off of. It's not like I lived super well and had lots of money, but, like, at least I had a stipend pay for my grad school, so it was an easier choice, at least. And I just felt like there I would be able to spend my time sort of doing what I wanted and learning a lot more. And so that's what I wanted to do.
01:36:34.660 - 01:37:11.040, Speaker A: Where can I buy your book or download it for free? What's the name of your book? The book is called Rust for rustations. It's at like everywhere now. Like it should be at local retailers and stuff. You can get it on Amazon, you can order it directly from the publisher from no starch. If you order it from no starch, then you get the digital version for free when you buy the print version. So it's like the incentive to buy from there. But otherwise, like, if you just like, search whatever your book dealer of choices, you should find it there.
01:37:11.040 - 01:37:43.698, Speaker A: It is not available for free anywhere. At least not anywhere. Legal microphone seems to be working well. Good, I'm glad. Why did you relocate to the US? Do you think you'll come back to Norway? So I moved to the US primarily because this is where the university that I sort of dreamed of going when I was a kid, MIT, was, and so I went here. And realistically, the US does have very good universities. I think that's the only real compelling reason for me to come here.
01:37:43.698 - 01:38:17.158, Speaker A: Like, there is some compelling reason in that they have. A lot of the big tech companies are here, this is where they're based, and it's harder to work. If you want to work for one of those companies, it's hard to do that from the US, from outside the US. I don't think that's a super compelling reason for me. I think realistically I'll probably move back to Europe in two or three years. But it's a little hard to say. What kind of music do you enjoy listening to? Oh, that's tough.
01:38:17.158 - 01:39:25.470, Speaker A: So it depends on my mood for writing. I like somewhat slower music, often more like video game soundtracks and stuff, or to some extent classical music, but more video game background music for programming. If I'm deep into a coding problem, I listen to faster music, usually without lyrics, and even sometimes really fast stuff like let me pull up. I don't want to pull that up. Even things like Fury of the Storm, if you know this song by Dragon Force, which is very heavy, not everything is as heavy as that, but I like high pace music for like focus programming and then just for general listening, I have a playlist that is all over the place. Like, it's not. It's everything from, let's see what's in there.
01:39:25.470 - 01:40:25.638, Speaker A: The Beatles is in there, the offspring is in there, Bob Dylan is in there. There's like a couple of, like norwegian songs by norwegian folk artists that are in there. There's jazz in there. There's like, I like songs more so than I like genres or albums or artists. Like, I don't really have a lot of loyalty to any particular thing, so I listen to just like a very wide random sampling of things. So I don't really have a good answer to you, but it's really all over the place. Can you remember your first large rust program and what was it? You know, it was my thesis project.
01:40:25.638 - 01:40:58.834, Speaker A: That's where I started. I finished after the first year of my PhD, I finished the program that we wrote like a white paper on that was written in go. And then I started playing around with the idea of Noria, of this database caching system. And I started writing it in go and didn't really like it. And then I saw some mentions of rust and I was like, maybe I should just try this out. And then I started writing it and I built a sort of small prototype and I was like, this is worth it. I'm going to build it more properly.
01:40:58.834 - 01:41:28.720, Speaker A: And then I started building the real one. And that is now, like, I forget how many thousands lines of code it is, but it's pretty large. So my biggest project is also my first project. This house music is in there too. Epic, orchestral, music. That, too. I wonder, do I have a way to share this one question? Let me see if I can.
01:41:28.720 - 01:41:50.780, Speaker A: I don't open Spotify my computer because I'm worried about it, like, messing up the audio interface somehow. But I think this playlist is marked as public. Yes, it is. Here, I'll. How can I. Oh, I can send it on discord. Nice.
01:41:50.780 - 01:42:47.800, Speaker A: This is why it's nice to have Chatsync there. So that is my Spotify playlist for easy listening. I want to see if I can find the. And then this one is my programming playlist. And then this one. This one right here is my writing playlist. And they are very different in style, all three of them.
01:42:47.800 - 01:43:43.820, Speaker A: Having written a book, do you think you'll be writing another one soon or soonish? Maybe a non technical book? Probably not. Partially. This is for visa reasons. The us visa system is real complicated and weird, and I don't think I could write a book right now. I could the year after I graduated. There's, like, all sorts of complicated rules around this, but basically, I don't know that I could write a book right now, but also, I don't think I would want to. I think I put all of the things I wanted to write into that book, and there might be sort of a second revision of that book down the line, but probably not for a while.
01:43:43.820 - 01:44:17.874, Speaker A: And also because I need a break from it. Right. Like, writing that book took a lot of time and a lot of mental energy, and I've, like, poured so much thought into it that I just need to, like, hold it at arm's length for a while. In terms of writing nonfiction, I did play around with writing nonfiction a long time ago. I don't know that I will do it again or, like, actually publish something, but, you know, I've been. At least I've been through the experience now once, so we'll see. I also have no idea how well this book will do.
01:44:17.874 - 01:44:38.552, Speaker A: Right. Like, I don't actually have the sales numbers yet. I think I get them in, like, mid January for the past six months. So I have no idea how popular the book is. I don't. Like, I see some people enjoying it. I also see some people, like, less happy with it.
01:44:38.552 - 01:45:02.894, Speaker A: I don't know. It's, like, very hard to separate out the feedback because very often it's, like, random conversations on discord and stuff. It's just, like, I don't have access to all the people talking about it. Right. And I don't know how many people have bought it, so I don't know the size of audience, I don't know the general reception. And I think that's something I'll get a sense from over time. But that's probably gonna factor into my decision to write another one, too.
01:45:02.894 - 01:45:34.840, Speaker A: Because if it turns out that people, let's say that it turns out that people don't enjoy this book, like, they don't feel like they learn from it, or they learn relatively little, or the teaching style is not right for many people, then I probably wouldn't write another one, because why would I? It wouldn't. I don't write the book for me. Right. I don't write the book because I want to have written a book. I write the book because it's my understanding that it might help people learn rust. And if that turns out not to be true, then I shouldn't be writing books and I should be making videos. Instead.
01:45:34.840 - 01:46:05.348, Speaker A: Someone asked whether there's something that I regret that's not in it or want to add. I think there are some things, like, I think, for example, once the error story in rust stabilizes a bit more, there's some stuff there. There's some stuff on assembly. Once the assembly syntax lands, that might be useful to put in. Wasm, I think is potentially a big one. GUI programming, maybe. One thing that's tricky is that the book is intended to be about rust the language, and not really the ecosystem.
01:46:05.348 - 01:46:56.080, Speaker A: So I want the book to focus on here are things that you need to know about rust the language, in order to take advantage of its ecosystem and to add to its ecosystem and contribute to it. But it's not like, here's how to use this library, like, how to write a game with Bevy. Like, that's never going to be in the book. And so there's a little bit of a fine line where there shouldn't be too many chapters in it that are not about core rust. Let's see. Show us a physical copy of your book just for the culture. Sure.
01:46:56.080 - 01:47:23.450, Speaker A: Here. Yeah, so it's a, it's pretty small. Like, it's a pretty thin book. And this was intentional, too. I know that a lot of programming books try to be, how to say this very guiding in their writing. Like, you use more words than you need to to make sure that people follow and to give more context for things. I specifically didn't want to do this for this.
01:47:23.450 - 01:48:09.930, Speaker A: I wanted this book to be fairly dense, because if you're reading this book, it's because you already know rust, you're already an intermediate developer, whatever that means, but you feel like you're beyond the basics, as I wanted this to be a thing where you read it and you keep finding new things you didn't know or that you get to understand better. And I want it to be. I don't want you to feel like you have to get through a bunch of stuff to get to the good parts, which does mean that it's fairly dense. It does mean that it's not always. Sometimes you have to read things multiple times to catch them. And that's on purple because I didn't want to sort of fluff it up, but, yeah. So this is the book.
01:48:09.930 - 01:49:05.150, Speaker A: It's got pages in it. It's signed, believe it or not. So, yeah, it's got my picture on the back right here. Do you see the resemblance? See it? Jay is guarding the copies up there. When does rust replace all other popular languages, like C, C, Java? Never. And there are multiple reasons for that. One is that there are cases where rust makes less sense than a language with a runtime like Java.
01:49:05.150 - 01:49:42.596, Speaker A: The second is that there is too much code in the world that Rust will replace all of it. There's too much legacy code that just realistically is not going to go away. We can do incremental rewrites and stuff, but it's just the. The pyramid goes so deep that the time frame for something like that is. Is very, very long and requires long, sustained effort. I don't think it's. I don't think it's something that's gonna happen anytime soon, and I also don't think that it should be a goal.
01:49:42.596 - 01:50:18.338, Speaker A: I don't think we should say rust is the only language now. Like, I don't think there's value in that. The hair is less spiky. Yeah, it's true. Spike up my hair a little. How's your cat? Okay. So, chai, my cat, is currently annoyed that she can't go into the bedroom, which is her favorite place to sleep, because that's where the new cat, miso, is.
01:50:18.338 - 01:50:50.444, Speaker A: But otherwise, Chai's good. She's getting a little bit chunky, so we're trying to hold back on her food and run her around a little bit more. We have, like, a toy and a stick that she loves chasing, so she needs a little bit of exercise, but she's very soft and very cute and very cuddly. How much rust does someone have to know to follow your stream? So it depends a little bit. The programming streams are. The programming streams. Expect people to know Rust.
01:50:50.444 - 01:51:48.460, Speaker A: Like, I don't take a lot of time to explain the syntax, the basics of the language. I take time to explain more intermediate concepts that come up, but it definitely assumes just, you know, rust, um, for the crust of rust streams, they are a little bit more friendly towards people with less experience with the language there. I would say it's for you if you're interested in the topic and know some rust, but even there, like, they're not really beginner streams. And so it's not a complete answer, but it's the best I can do. Do you think ten years from now, Rust will be popular in the job market? Yes, but that's speculation. I don't think people expected rust to happen ten years ago. So it could be that there's a new language that does all the things rust does, but better by that time, given how long it took for us to get from sea to Rust, I think it's unlikely.
01:51:48.460 - 01:52:39.274, Speaker A: There's a magical set of circumstances that have to come together to make a language compelling enough for the kind of uptake we've seen with Rust, but it's hard to predict. But I think. So when will rust be accepted as a general purpose language? I think it already is, but I think where Rust hasn't broken through yet is in enterprise, non tech enterprise. Like, there are a lot of companies out there that write a lot of software but aren't really tech companies. Like, take, like, JP Morgan or something. Right. Or Goldman Sachs or even, like, banks, for that matter.
01:52:39.274 - 01:53:16.364, Speaker A: There's a lot of software running there that matters. The safety and security and performance of it matters a lot. They don't have their sort of finger on the pulse as much of, like, what are new programming languages? They're more risk averse. So I think Rust getting into that space is probably where we're pushing at right now. And I think Rust has some really compelling selling points into those companies, but it requires active selling because they're not looking. They don't care what the most loved language on stack overflow is like. They're nothing tuned into the world of tech.
01:53:16.364 - 01:53:51.008, Speaker A: They just care about their business, and programming is a tool to get there. But I do think Rust is a pretty good contender for becoming a language that's used in those kind of contexts, too. Can we use Noria in production? No. So, Noria, the code base that's on GitHub, is a. I mean, it's my thesis project. Like, it's a research prototype. It's not like, I don't want to say that it's not something that could be turned into production.
01:53:51.008 - 01:54:31.350, Speaker A: But what's out there is not a production ready piece of software. Favorite games, video games, or board games, because those are very different. I have favorites in both. What's your workout routine look like? Terrible at the moment. So I really like rock climbing, but I haven't gone rock climbing now in years, so I don't know if I can really say that anymore. It's partially just because of the world situation, but I really want to get back into that. That was really fun.
01:54:31.350 - 01:55:02.460, Speaker A: I don't really have a workout routine. There was an interesting article or thing that made the rounds many years ago called the seven minute workout, which I thought was really cool. The basic idea was that. I think it was the New York Times went and asked a bunch of scientists, like, hey, if someone was going to work out just seven minutes every day, what should they do? And that's the thing that I tried to do for a while, and then I just got bored with it. The problem is that I don't care. I don't enjoy exercise. I don't.
01:55:02.460 - 01:55:22.180, Speaker A: I like programming too much. Like, if I have time, I want to spend it programming. I don't want to spend it exercising, which I know is bad for me. It's something I. It's a flaw of mine. It's a fault and something I want to fix, but at the moment, not really a workout routine. Oh, the odd vacation.
01:55:22.180 - 01:56:01.616, Speaker A: Okay, so, yeah, this is a story. I'll go through it fairly quickly. So, over the summer, my girlfriend and I were gonna go to Norway to visit my. My family, and we were both fully vaccinated in the US, and so we were supposed to just be able to go to Norway. And then the rules changed in Norway for whether you were allowed to enter the country. So they changed so that you could only enter the country if you got, like, a written approval from the government to say that you had, like, a connection with someone who was from Norway. So I had that.
01:56:01.616 - 01:56:22.298, Speaker A: I was like, I'm norwegian. I have a norwegian passport, so I'm allowed to enter the country. But foreigners could only enter if they entered with someone with a connection to the country. So we got a signed letter from the government, all is well. And then we had a form that actually, that rule no longer applies. No foreigners can get into the country unless they're fully vaccinated. And we're like, okay, that's fine.
01:56:22.298 - 01:56:52.658, Speaker A: So this was, like, a few days before we're gonna fly. All right, well, that sucks. But we're fully vaccinated, so that's fine. And then we realized that in Norway, they don't accept the, like, paper certificate from the CDC saying that you've been vaccinated, you need, like, a european digital certificate saying that you're vaccinated. And we're like, we can't. I can get that because I'm norwegian, so I can just, like, email my doctor in Norway and be like, hey, here's the proof. Can I get a digital one? But my girlfriend can't, which means she can no longer go to Norway.
01:56:52.658 - 01:57:44.452, Speaker A: And we learned this, like, a few days before our flight. Then we find out that in Germany, they are allowing people to come in to go to the pharmacy, bring their CDC card, and get issued a german digital certificate, which is valid in Norway. So I buy a plane ticket from Oslo to Germany and back to Oslo the next day. The idea being that we take our normal flight to Oslo, and instead of exiting the airport in Oslo, which she's not allowed to do because they don't accept her proof, we instead do a transit and fly to Germany, go to a pharmacy, get the digital certificate, and the flight to Norway. We go to Germany. We do this. We go to Germany, and we get to the pharmacy, and they go, yeah, we no longer do that.
01:57:44.452 - 01:58:24.386, Speaker A: And we were like, what do you mean you no longer do that? It turns out the day before we arrived in Germany, the entire digital certificate system for COVID vaccinations in Germany was hacked. Or rather, there were, like, some security researchers found a security problem in the system, and so they shut it down across the country. No one could get a digital certificate in all of Germany at all. And so we're like, okay, we can fly back to Norway now because you wouldn't be let into the country. So we decide to stay in Germany. However, this was a Friday, and so, of course, it's not going to get fixed until Monday. So now we have a four day stay in Germany.
01:58:24.386 - 01:59:18.780, Speaker A: We're going to stay unexpectedly in Frankfurt for four days, and we're, like, stressed out and are like, what do we even do now? And then we get to Monday, and it's still not fixed, and the government is like, we're probably gonna be able to fix it by the end of this week. Now, at that point, my girlfriend was scheduled to return from Norway to the US, like, the end of the next week. She was only supposed to spend a week in Norway. And so we're like, well, what do we do now? And so we keep traveling through Germany, trying to, like, extend our stay and try to figure out how to get back to Norway and just. I don't know, we were just, like, scrambling for ideas. Maybe we should have a vacation in Germany. Then my girlfriend started feeling poorly because of the flight.
01:59:18.780 - 01:59:45.848, Speaker A: She had, like, an in your ear thing for. From the flight, and so she was getting super dizzy and couldn't get in a car. And the doctor told her, you should not get on a plane either. So now we couldn't fly back to Norway either. Then Norway changed the rules again, so now she could come in if she was, like, double vaccinated, but she had to go into quarantine, which is fine. Cause we could quarantine with my mom in, like, at the basement, so. But she couldn't fly anymore.
01:59:45.848 - 02:00:32.880, Speaker A: So by this time, I think it's, like, Wednesday of that next week, and we drive. She was able to get in a car in that point, but she still couldn't get on a plane. So we drove from Frankfurt all the way up to the tip of Denmark, and then we took a ferry from Denmark. We'd stayed the night in Denmark and took a ferry from Denmark to Norway to get into the country. And eventually there, my mom met us on the other side of the ferry terminal, and we had, like, two days in Norway, and then she had to fly back to the US. So what was supposed to be a week of meeting my family in Norway and just sort of relax during the summer ended up being a road trip through Germany and Denmark and then two days in Oslo. So it was a mess.
02:00:32.880 - 02:01:16.054, Speaker A: All right, let's see. Long story, somewhat short, is it possible to sponsor you somehow, Patreon, GitHub, sponsor, etcetera? Unfortunately not. This is one of the downsides of being a foreigner in the US. So I don't have a green card. I have an h one b, like a work visa, which means that I can't do any work except for my primary employer and Patreon and GitHub sponsors and stuff, all set accounts as work, so I can't have any of them. If I get a green card, I can. If I move back to Europe, I can.
02:01:16.054 - 02:01:53.000, Speaker A: It's just I can't hear, and it's unfortunate. Are you working with Felix Kloc and Niko Matsakis at Aws? They're at AWS. They're on a different team than I am. So they're on the rust platform team, which are the people who work with Rust itself, like, externally to Amazon. They don't really work on internal stuff. They all work on sort of public projects and on rust itself, which is not what I work on, right? I work on the internal build system. What do you think about Lofoten? It's beautiful.
02:01:53.000 - 02:02:19.194, Speaker A: I was there once as a child and I would love to go back. Did you visit other cities in Germany while you were there? So we were in Frankfurt. We drove to Heidelberg for like a day trip, which was beautiful. We were going to drive down to, like the Cinderella Castle. I forget what it's called. Noanstein. I forget.
02:02:19.194 - 02:02:46.998, Speaker A: It's like almost down by the swiss border. So we're going to drive this like, long path down there, which is supposed to be really nice. But then my girlfriend was real poorly, so we couldn't do that. And then we drove north. We drove to Munich. I spent one night in Munich and then we drove through, through Denmark. What university in London did you do your masters at? UCL University College London.
02:02:46.998 - 02:03:27.458, Speaker A: I was there for a year and then I did some research there, too. Can you still do the Amazon wishlist? So I've actually stopped doing that because I, now that I have a job, I sort of feel bad about people randomly buying me things. And also I kind of ran out of things to put on there. But I'll show you this, actually. So every time I get someone bought something from my Amazon wishlist, I get like, with the little box, I get a little card that says, like, oh, I bought this for you here, enjoy, or whatever. And I kept all of those up through the years because I was like, so amazed the strangers would buy them for me. And they were just sort of sitting on my shelf and I didn't really do anything about them.
02:03:27.458 - 02:04:13.530, Speaker A: I just liked having them. And my girlfriend for my birthday made me this little like, leather booklet where she framed all of them. So all of the thank you notes that I've gotten in all of the gifts people have sent me are now like in this little booklet that I can look at. It's really nice. So I have that now. But no, I don't really do the wish list anymore. I will probably do a Patreon or GitHub sponsors and stuff once I can because I would love to be able to do more of this, basically do work sort of part time and then do this part time and have that bee at least some portion of an income, but that's not really feasible at the moment.
02:04:13.530 - 02:04:41.856, Speaker A: Schloss neuschwanstein yeah, that's the one. Do you binge watch tv shows? Yes, I do. Yes, I do. Ted Lasso great show. Highly recommenda what's the price of your book with your real signature. I don't sell it with my signature. But if you find me, I'll sign it.
02:04:41.856 - 02:05:12.458, Speaker A: I will tell you now because I've now started telling a couple of people that I'm signing all the signatures I'm doing. I'm signing with a number. So I have here I have a little clicker I'm going to bring with me and I'm going to count how many signatures I do out. So I number every signature. So whichever book I sign next is going to be signature number twelve. So your goal is going to be to get a low number. But I mean, like I'm just going to.
02:05:12.458 - 02:05:33.436, Speaker A: If people want me to sign, I'll sign. But I don't think we're going to. Don't think I'm going to sell signed, signed copies. Definitely. Tea? I don't like coffee. Coffee is just burnt. It just tastes bad.
02:05:33.436 - 02:06:04.886, Speaker A: Tea is great. How do you get that energy to do such long streams and coding stuff? You know, that energy comes from the fact that I work on things that I think are interesting. I wouldn't be able to do long programming streams on. Like if someone just gave me a random thing to program I wouldn't be able to do that. It's specifically because I choose topics that I care a lot about. That's why I do it. I don't really watch soccer, but I kind of like soccer.
02:06:04.886 - 02:06:26.420, Speaker A: Football, it's football. You kick the ball with your foot. American football is not football. It's hand egg. Let's get this right. So I don't really watch football a lot. I used to watch it when I was younger and then of course my favorite football club was Arbeko Rosmodwald club in Norway from Trondheim, which is where my dad is from.
02:06:26.420 - 02:07:01.538, Speaker A: I do for some weird reason though, like playing football. Manager, the game, the video game. And I'm playing that downstairs now. And I'm playing as Middlesbrough because, you know, why not? I don't know that I particularly care about Middlesbrough. But you know, that's what I'm playing as. What's best in blood on the clock tower playing or storytelling. So blood on the clock tower is a social deduction board game that I've been involved in the process of like developing and doing a lot of rules debugging on and stuff.
02:07:01.538 - 02:07:32.288, Speaker A: It's a really cool game. I'm very excited that it's finally shipping and I love storytelling, that game. It's sort of a mix between Mafia or werewolf and D and Da in a weird kind of way. It's great I highly recommend it. And storytelling is a lot of fun in that game, although playing is also a lot of fun. What is your chair for? Long hours of work. I have a steelcase series two.
02:07:32.288 - 02:07:58.002, Speaker A: Is that what it's called? It is very. It's not this one. It's the one I currently have on my work computer. It's very, very comfortable. All right, I think so. We're now at the two hour mark, and I have to go play with both the cats and feed them and stuff. But I think this is good.
02:07:58.002 - 02:08:24.570, Speaker A: It sounds like the sound was pretty good. Hopefully. We covered a pretty wide array of topics. I'm sorry I didn't get to fully catch up with chat, but there were a lot of questions in there, a lot of conversation. But I tried. I tried. In that case, I'm hoping to do the next stream on Hazard pointer sooner rather than later because it's driving me insane to sit with the project so close to finished.
02:08:24.570 - 02:08:44.590, Speaker A: So once I have the time, I will do it. I promise. Thank you, everyone, for joining in. I hope you have a great 2022 and take care of yourself and everyone around you. Bye, everyone. Bye.
