00:00:00.240 - 00:00:46.610, Speaker A: All right, we are live and I'm here today with another interview with different builders in the web3 space live on Eigenlayer. And today I'm joined by Anthony. And Anthony is one of the founders of Zksync. And I've talked to Anthony off and on over the last six months, six months or so, and kind of really interested and excited about some of the future of what they're building there. And with the recent mainnet launch and everything like that, I thought it would be a great time to bring him in and just talk about the developer ecosystem, building on Zksync and everything from the perspective of a developer that might be interested. With that being said, Anthony, do you want to give us a quick introduction to yourself and also maybe give us a quick overview of what Zksync is?
00:00:47.510 - 00:01:07.820, Speaker B: Yeah. Firstly, thank you for having me. I want to offer one super quick clarification. Definitely not a co founder. So today I'm CTO of Matter Labs, which is the team behind Zksync. And I've been here around two and a half, three years, but the team is maybe five years old at this point. There's a lot of work that definitely predates me and two co founders.
00:01:07.820 - 00:02:00.588, Speaker B: Yeah, leading the cryptography side and then also our CEO to maybe give a quick introduction. So I joined matter labs, as I mentioned about two and a half or so years ago on scaling Ethereum with ZK. Prior to that was we're going all the way back to the start, my background was actually particle physics. So PhD postdoc, kind of doing work in that area, moved in to do machine learning, software engineering, distributed systems and the west coast of the US for a few years, most recently at SpaceX, which was the stop before matter labs. A lot of web two stuff, a lot of other interesting high performance, high reliability systems. But yeah, Zksync. So in terms of what we're building, I mean, the problem that we're looking to solve is primarily related to the scalability of Ethereum.
00:02:00.588 - 00:03:05.842, Speaker B: So we believe in the value of public blockchains. We believe a vision of a world with application layer that can support billions of users, giving people digital sovereignty, giving people access to the properties that public blockchains provide, but doing in a way that isn't 15 tps. And how do we get there? So Zksync, there have been several evolutions of the system. The first one, which is known today as Zksync Lite, was an application specific ZK roll up, so deployed, I guess maybe of the order of like three and a half, four years ago at this point. And essentially it was a L2 for doing the sort of payment primitive kind of operations in ZK. So sending value, minting an NFT, doing swaps and you know, at the time, like really looking to relieve that sort of urgent pressure that was on Ethereum for a lot of the sort of functionality associated to defi. The most interesting sort of evolution actually came with the next version of the system.
00:03:05.842 - 00:03:40.730, Speaker B: So this is today known as the casing era. And this is the general purpose l two, right, full general purpose execution environment. Deploy your solidity contracts, deploy your Viper contracts. Runs just like the EVM, but of course, like proved in ZK. And you can provide an execution environment orders of magnitude cheaper with much, much higher throughput and start to really provide an environment to sort of scale in the way that we think ZK can let the ecosystem scale. And this was deployed, I mean, mainnet for ZK sync era now was roughly a year and a half ago. So about, I think March of last year since then.
00:03:40.730 - 00:04:05.950, Speaker B: Yeah, lots of exciting metrics. I think we've processed about 405 million transactions today, TVL in the sort of like one and a half billion territory right now and demonstrated I think like 200 DP's or ballpark on Mainnet. So super interesting system and very happy to talk more about where it's going. And we have lots of interesting designs for how you really scale with ZK.
00:04:07.850 - 00:04:37.890, Speaker A: Yeah, I think one of the things that I've noticed is often when I go to l two fees, I always see kind of ZK sync there at the bottom. And I just checked it today and that is definitely currently the case, which is kind of interesting. That's just a one off small thing. That's something we can touch on later. But um, I think I want to step back and talk about a little bit more about your background. I think, like it's always interesting to hear how people got into the space. And knowing that you've had such an interesting background to me is extra interesting.
00:04:37.890 - 00:04:52.030, Speaker A: I mean, working in particle physics, working at NASA, I mean, I'm sorry, working at SpaceX, it's super cool to me. So I'm kind of, kind of curious, like what were some of the things that you were working on there and how did that lead you into becoming interested in blockchain tech?
00:04:53.050 - 00:05:41.880, Speaker B: Yeah, it's cool because it does feel like there's maybe some strange career choices, but there is, at least in my mind, an arc that feels kind of sensible. So for my PhD in postdoc it was all actually very fortuitous in the sense of, like, right place, the right time, because I was at CERN for the Higgs discovery. So we this big collider smashing protons into each other, taking gigabytes and gigabytes of data. So, yeah, my seven or so years doing this just looked like lots of c, lots of statistics, lots of machine learning, but, like, really interesting time. CERN is kind of, like, unbelievable place when you're a physicist, Nobel Prize winners having coffee and things like this. So just intellectually super interesting place to be. But the pace was quite slow.
00:05:41.880 - 00:06:11.586, Speaker B: Academic papers have a huge amount of rigor around them. Maybe takes a year to go from sort of an idea to a paper. And it was always clear to me that, like, academia wasn't the place to stay forever. You know, really loved it, but wasn't, like, the ultimate destination. So I jumped from there into, like, machine learning. And this is because I was doing, you know, to find these signals that may or may not be buried by mother nature among tons of data. You know, there's lots of statistical techniques, lots of machine learning techniques being applied.
00:06:11.586 - 00:07:07.340, Speaker B: So this is kind of like the next thing I jumped into and was doing this in, like, in and around, like, Silicon Valley for some number of years, building machine learning teams at Uber, working on a bunch of interesting ones. But it was sort of in that academic environment at CERN, I first heard about bitcoin. One of my collaborators, like, the postdoc in the office next to me was mining bitcoin on, I don't know, like, some piece of hardware in his. In his office, you know, university were paying for the electricity. And it was like one of those moments like many people have had in the space where you kind of, like, this idea is so compelling and followed it for a long time, but it kind of, like, ebbed and flowed over time. So I was, you know, back involved at some times. Kind of other times I'd, like, drift back in and, you know, whatever probably varied roughly, like, the general interest in the space, you know, get back into it in 2017 with all the ICO craziness and.
00:07:07.340 - 00:08:11.256, Speaker B: But ended up at SpaceX. And I, like, loved it, though, like, intersection of, you know, important problems, super smart people, people who care about what they're doing. Really amazing place to be an engineer, really fantastic thing to be a part of. But for, like, the last two years there, I would, you know, go do a bunch of hours in the rocket factory, then go home and read defi white papers or whatever, like, play with NFT projects, whatever it happened to be, and really felt this sort of pull back towards Ethereum in a very deep way. So towards the end, it seemed like if you think about this thing so much, go jump in. It feels to me, and it felt to me back then as well, that we are sort of at the point of a phase transition where this technology is so powerful, it has so much promise, but there's a lot of work to do to get it there and, you know, go jump in and try and, like, nudge it in a way that makes sense to you is kind of the approach that I was thinking about. So the, like, selection was, what are the important problems? Scaling ethereum, to me is like, the only important problem right now.
00:08:11.256 - 00:08:32.194, Speaker B: Or like, until we've achieved that, almost nothing else matters, right? Like this. This has to be bigger. Inside scalability. ZK was the technology that, you know, ZK is the end game, is a statement that I think even back then Vitalik was making for reasons that I, like, I think decently well established. But, you know, this is a super niche topic, so. Yeah, love talking about this stuff.
00:08:32.242 - 00:08:33.030, Speaker A: Yeah, yeah.
00:08:33.770 - 00:08:59.950, Speaker B: And then, you know, when I spoke also with Alex Luhovsky, the CEO and co founder, it was like, super clear to me that the team that they were building was, you know, technically at the same level of the engineers I was working with day to day at SpaceX and, like, people who deeply cared about the mission. So it's that, like, intersection again, of smart people, hard problems, but something people are very passionate about as well. And, you know, a couple weeks later, I was resigning and making the jump.
00:09:00.690 - 00:09:43.330, Speaker A: Nice, nice. I think that the story of you kind of going from one place to the other is definitely super interesting for a lot of people who are getting into this space from different areas. Um, just knowing like, that there's folks from all types of backgrounds is, to me, just really interesting. But, um, I guess, like, in terms of Zksync team specifically, like, were you also considering working at other blockchain companies? And, uh, you know, were you kind of like, just interviewing around or were you just more like, okay, I met this team. I am extremely, you know, just, uh, all in on what they're doing specifically.
00:09:45.670 - 00:10:27.884, Speaker B: It was much more the latter, but I would say I wasn't at the time, like, super deep in the weeds where I could have told you all of the ins and outs of what every gym is doing. And, you know, it's even today, right. I live and breathe in the ultra space, so they still feel like, damn, this is a space that moves quickly with a huge amount of complexity. But at the time it was, you know, I didn't expect to lead, if I'm being really honest. I sort of felt this pull towards this technology into this space and like really wanted to jump in and did reach out and talk to a couple people in the space. Like, it was like very seriously considering it. But it was really only after I spent probably like 2 hours talking to Alex.
00:10:27.884 - 00:10:58.170, Speaker B: And it was where to me I realized the strength of the team and I realized you, you know, the vision that he had as a founder was just extremely clear for, you know, whatever people may or may not think about. Elon, the vision at SpaceX was extremely clear. The mission to me felt extremely important and the team was unbelievably good. So like, it was like a lot of good reasons to be there. But I also think there's a lot of interesting problems in the world, right. You don't necessarily want to work on one thing for your whole career, like, at least definitely. I feel like that was.
00:10:58.170 - 00:11:15.850, Speaker B: It was a good time for me to be thinking about different problems. But that conversation with Alex and then subsequent conversations with the engineering team and other people who are already there, I basically didn't speak to any other teams after we'd sort of engaged and they just felt like it all fell into place quite quickly.
00:11:16.150 - 00:11:22.770, Speaker A: So I'm going to move on to some zksync specific stuff. So what is the difference between Zksync Lite and Zksync era?
00:11:23.870 - 00:12:05.840, Speaker B: Yeah, so the big difference is the one that I sort of touched on at the intro where I think of light, and it was very much a really innovative system, particularly when it was built. But I think of it very much as a proof of concept for ultimately what ended up being built with era. So light is not general purpose. The big difference is you can't take a solidity smart contract and just deploy it to light. It was really built for that sort of I'm going to send value, I'm going to meet an NFT or I want to do swaps between these tokens. So you can do a bunch of different things that you may want to use a blockchain for in an environment that's much cheaper secured by ZK. But you can't go build a game there, you can't go build your new defi application there.
00:12:05.840 - 00:12:50.656, Speaker B: But Era is different. So Era is this general purpose execution environment. You can take your solidity contracts that you've written already for Ethereum or wherever you can take VYPR contracts, compile them and deploy them to era. And on era, it's a dedicated virtual machine built from the ground up to be provable in ZK, but respecting the ability to support things like solidity in a way that obviously the EVM does. So yeah, this is the fundamental difference. ERa is a virtual machine for people to go build games, whatever you could build on Ethereum and more, I would say you can build on Oneira. The difference is, obviously you don't pay a one gas fees.
00:12:50.656 - 00:13:12.900, Speaker B: Fees, as you mentioned earlier, are super cheap and the throughput of the system is much, much higher. And as we evolve the system, it can do even more interesting and compelling things, which we can talk about. And yeah, we have a lot of ideas for how do you really build a system that could power applications that normal people who don't care about blockchains use and it enriches their life.
00:13:13.560 - 00:13:26.930, Speaker A: So basically, if you're building right now on Zksync, you're building on Zksync eradic, and that's where the majority of the volume and the momentum is in terms of the shared execution environment of ZK sync.
00:13:27.790 - 00:14:09.742, Speaker B: Exactly. So it does go a step beyond this, though. So era is the ZK roll up that we deployed, like I mentioned, year and a quarter or so ago. And it's primarily been the big focus for the team, particularly in the last year and the year building up to that as we were getting ready to bring it to Mainnet. But there are other things that we're doing that are super interesting and much more in line with where we're going. So as part of building era, the goal was always bigger, because no one l two on its own, no matter how much you optimize it, is actually going to scale like the Internet in the same ways. Google doesn't just get a bigger and bigger machine.
00:14:09.742 - 00:14:49.660, Speaker B: We can't continue, in my opinion, to just assume that monolithic environments are going to continue to be better. L two s don't have the same constraints as l one, so they can definitely outperform l one, but they aren't scaling, you know, to hundreds of thousands or millions of TPS, which is broadly what I would say we need. So, you know, we have a toolkit called the ZK stack, which you can use to deploy era like systems. So other ZK roll up ZK chains, and it's this horizontal scalability of the ecosystem that we think is broadly how, you know, if you want to achieve the ability to support an application layer that looks, you know, like the Internet, like you need to scale like the Internet. And that was horizontally.
00:14:52.560 - 00:15:51.540, Speaker A: Um, so essentially, yeah, that was the next thing I was going to talk about is you have kind of the vertical and the horizontal scalability that can be achieved in any software. And you typically think of the execution and the throughput being the vertical scalability. And we're now seeing this roll up centric architecture of Ethereum. And the Ethereum roadmap, in particular with all of the different EVM chains, is more of that horizontal scalability, is the roll up centric roadmap. How does Zksync fit into that today and in the future? And I guess this would be more along the lines of, okay, if I want to build a, you know, a shared. If I want to build on a shared execution environment, I might build on era today, but let's say I want to build like an app chain. And how would that look on Zksync? Or I guess this would be more of like application specific roll up these days.
00:15:52.880 - 00:16:40.150, Speaker B: Yeah, so, yeah, so it's an interesting time, I would say, for the roll up landscape. Wherever I. We have a lot of systems today, I think. You know, if you look at l two b, there might be like, I don't know, of the order of like 20 plus systems that all have 100 million or more in TVL, more coming, many in development, you know, teams like us and others that are building also these stacks. So you have a toolkit to go deploy your app chain or, you know, customize the system. So, you know, also the barrier to building these things is much lower. The way that we think about it is, I do expect horizontal scalability to essentially be like, let's say the high level architecture that lets us build an execution environment that can support hundreds of thousands or millions of gps.
00:16:40.150 - 00:17:02.140, Speaker B: The user experience needs to evolve. You don't want an experience, I would argue that looks like the multi chain experience we have today. Today. So first workstation. Most wallets aren't sort of designed for this. Most tools aren't designed for this. Updating your network to like move from like system a to system b to system c is like really painful.
00:17:02.140 - 00:17:27.156, Speaker B: The user experience is pretty rubbish. The sort of experience of moving between these systems is also terrible. You know, if you have an optimistic system and you want to use a native bridge, okay, like withdraw from the l two, wait a week, okay, and then claim your assets back on l one and like move them. Obviously this doesn't work very well. To go through a third party bridge is also a poor experience. In my mind. Right.
00:17:27.156 - 00:18:01.630, Speaker B: You have firstly, like, trusted intermediary who's deployed capital on both chains, so they've had to put a lot of value to work, which means that they charge you. Right. Obviously, they could be doing other things with this capital, so you have to trust them. And if you think about these systems, they've been an absolute nightmare. From a security perspective, you may be familiar with the rec leaderboard, which kind of keeps track of the biggest hacks in crypto. Like, I don't even know, like eight of the top ten bridges. A huge number of, like, the biggest hacks in crypto by volume at risk or volume lost was, you know, these.
00:18:01.630 - 00:18:25.332, Speaker B: These bridges, because they're managing lots of value and they're typically very difficult to get. Right. So bridges are kind of broken. The user experience is pretty broken even for those wallets that support multi chain setups. It's very weird to kind of like, open the wallet and say, all right, cool, I have six versions of USDC. Okay. Normal people are probably not going to find this to be a great user experience.
00:18:25.396 - 00:18:26.160, Speaker A: Right, right.
00:18:27.260 - 00:19:00.680, Speaker B: But with ZK, you actually can address a ton of these problems. So ZK can give you the ability, because, you know, ZK isn't really about the zero knowledge pieces. I know. You know, obviously the name is kind of a little misleading, but it lets you prove computation. So you can start to build trusted systems. You can start to build systems that can asynchronously move value between each other in a way that you don't need to have capital on both sides of the system and have an intermediary doing the work. So it lets you build genuinely, horizontally scalable systems.
00:19:00.680 - 00:19:22.438, Speaker B: Yeah, we'll be publishing a blog post that really details what we're doing here, how these systems will evolve, what we'll be deploying, and a lot of the nice things. There are a lot of other nice things you can do with UK to make it extremely cheap. But of course, like, preserving all the properties of blockchains and preserving trustlessness, censorship, resistance and all those things. So, yeah, ZK is very powerful.
00:19:22.574 - 00:19:43.126, Speaker A: So what does Zksync offer in terms of that architecture? Like, is there a product name? I know at some point it was called, like, hyperchain or something, but maybe it's been. It's changed since then. I think there's like, the op stack has its own thing and then, you know, arbitrum has orbits. What is that for? ZK sync?
00:19:43.318 - 00:19:53.326, Speaker B: Yeah, the zoo of system names is. We've just been calling these UK chains lately which I think is much clearer.
00:19:53.398 - 00:19:58.410, Speaker A: Yeah, I think I saw that. I was like looking through the docs yesterday and I noticed that and I was like, okay, I like that.
00:19:59.190 - 00:20:47.366, Speaker B: Yeah, it's a little clearer, I think. And it's, at least for me, it feels like the right level of abstraction, because inside that you can have a lot of customizability, right? It could be validiums, volitions, different sequences, different consensus algorithms. But to a first approximation, the important thing is, like the ZK piece gives you a bunch of things, particularly with respect to interop, and we can kind of talk about specifics if it's useful. But yeah, at least for us, we're building an environment that teams can obviously choose to build on a general purpose execution environment. And most people should just do that. Unless you need infrastructure isolation or tons of the ability to really customize an app chain, running these things is not trivial. If you can just deploy to a network and it just works.
00:20:47.366 - 00:21:39.320, Speaker B: This is definitely the cleanest experience today. But if you need more, if you need infrastructure isolation, because you have a super high throughput application in mind, like on chain order book or big social network, or expecting to do a lot of activity, you definitely need to consider this sort of like infrastructure piece. And with the Zkstat, you can deploy into the Zksync network. So you can build ZK chains with a lot of ability to customize the specifics. What's the base token you want to use? What's the consensus algorithm you want to use? All of these things will be customizable, many of that today. And building into an ecosystem. So, for example, building into the Zk sync ecosystem can give you a lot of nice properties, because what we deployed so recently, we had what was known as our v 24 upgrade.
00:21:39.320 - 00:22:36.552, Speaker B: But the v 24 upgrade for Zksync included many things, but the big one, at least relevant for this conversation is around the bridge. So, like all l two s era had a native bridge where, you know, assets could be moved from l one to l two. But the upgrade actually transformed this bridge into what is kind of, you know, commonly called like a shared bridge. Right? So you can start to have multiple systems deployed into this ecosystem. And inside this series of smart contracts on l one, you can share liquidity between systems so they can move value between each other very seamlessly. Yeah, there's lots of nice properties, but essentially it's about supporting this ability to scale horizontally at l two. And in my mind, l two is not going to be a series of discrete roll ups that people use but this very expandable layer where to the first approximation, users don't even know which system they're interacting with.
00:22:36.552 - 00:22:39.540, Speaker B: It's just applications, kind of like the Internet.
00:22:40.490 - 00:23:52.906, Speaker A: Yeah. So it comes down to the UX of interoperability between networks once we get to that point. So like if you are a developer and you're watching, I mean, I think one of the things that you maybe outlined here was like if you're looking to just build an application that you're unsure of the amount of usage you're going to get and you want to experiment or maybe even, you know, like a general feel of like how much demand that you're going to have. And it's nothing, and it's nothing crazy. Your probably best bet is to deploy on that shared network because you get a lot of properties that are desirable there. But if you are an existing protocol or something that's already been deployed and your usage is expanding and you need more control or you want to have more, I would say yeah, I guess control over some of the different properties and the network itself, then you might consider deploying your own network or your own chain. So some of the examples of this in the past, I think one of the first ones was like DyDX, and then since then we've seen just tons of them and they're now even roll up as a service providers that kind of help you do this.
00:23:52.906 - 00:24:05.012, Speaker A: And ZK sync is actually supported by most of them. So you have like conduit, Caldera, gelato and Alt layer. Few other ones out there. Do you all work pretty closely with them or are they kind of.
00:24:05.076 - 00:25:08.074, Speaker B: There is, yeah, maybe seven or eight different roll ups as a service providers that are all looking to offer services via the ZK stack. So yeah, really about lowering the barrier to entry. It's complex to run these systems just as it's complex to run big web two infrastructure where you're managing it, kubernetes and maybe multiple databases, different failover. Lots of engineering effort goes into building high reliability systems independent of whether it's web two, web3. But these systems, just as if you want to spin up Kubernetes, you've got a choice of go the hard route and go buy a bunch of hardware, go deploy Kubernetes to bare metal and manage it yourself, or the somewhat easier route which is kind go use managed services via say, GKE from Google. Rollups as a service kind of is more like the GKE model, even though obviously as an ecosystem earlier. Still lots of work to do to make it that clean or go run the hardware yourself, you can do either.
00:25:08.074 - 00:25:37.512, Speaker B: And depending on what the team wants to do is, yeah, different things will make sense for different teams. Ultimately, for us, that we want to make it extremely easy to run these things. We want to see lots of roll ups. Like, we don't expect, like a world of a small number of, you know, 500 TPS roll ups, thousand TPS roll ups. It's still not an interesting number in aggregate when you're trying to, you know, support everybody. So for us, yeah, I think of it very much like nodes and edges. Right.
00:25:37.512 - 00:25:43.312, Speaker B: I would like to see lots of high performance nodes, and these are sort of the ZK chains and then edges being like, interrupt between them.
00:25:43.456 - 00:25:43.784, Speaker A: Yes.
00:25:43.832 - 00:26:10.906, Speaker B: And for us, yeah, yeah. Like, the Zksync protocol will support, like, permissionless ZK based messaging between these chains. So any chain to any chain. Coming back to the problems of bridges today, if you want to use a third party bridge and you're a new roll up that you've just deployed your app chain, you have to get them to deploy. Right. It just doesn't wire in automatically. You have to, like, go, probably have BD people talk to other BD people, get contracts deployed, get liquidity deployed.
00:26:10.906 - 00:26:52.270, Speaker B: It's expensive, it's time consuming, and for some use, cases like they may not be motivated to do it. All of this can be solved at the protocol levels you gave, which is kind of a pretty beautiful thing where you can have these permissionless systems where anyone can deploy into it, and it's immediately interoperable with the other systems. It's immediately able to access this shared liquidity environment in that sort of shared bridge system 101. So, yeah, the future of these systems is extremely interesting, and over the coming years, even already, we're seeing lots of teams making a ton of really exciting progress in this space. L two s will start to look very different from l one. Yeah. Already we're sort of seeing this happen.
00:26:52.690 - 00:27:28.272, Speaker A: So the scalability characteristics that ZK brings over optimistic roll ups is pretty well understood at this point. But I think the main thing that you might have, um, argue that's holding back ZK is just where it is and the current, like, life cycle of the, uh, technology itself. So, like, I would say, you know, as, as, um, this becomes, like, I guess, cheaper and faster, then it will just blow everything else out of the water. Is that kind of like a good, um, like, understanding of where we are today and, um.
00:27:28.336 - 00:28:00.794, Speaker B: Yeah, I think, um. I think there's a few reasons why, if you just go on like, you know, some of the sort of like most obvious metrics like TVL or whatever happens to be. Yeah, like clearly the ZK systems are not beating optimistic systems in all cases. Yet importantly, obviously like ZK systems have really only been in production for about a year, let's say the general purpose funds. Optimistic systems have had a long head start. And of course, like, you know, you build network effects, you build momentum. The other thing that I think is still true is people don't really understand the difference between these systems very, very deeply.
00:28:00.794 - 00:28:58.506, Speaker B: And, you know, this is something that I think is on, like us, particularly on the Zk side, to make it clearer, like what are the value statements of optimistic versus zk? I know these will become apparent when these systems start to get more mature. For example, like the bridging question is just an obvious one. I would argue that the performance of ZK system can be far superior, particularly for systems under load, for different reasons that we can speak to if it's useful. But ultimately the progress we're seeing on the proving side, it is, I think, ahead of expectations. So probably rewinding a couple of years, people would have expected an era of optimistic dominance because the ZK systems are harder to build. You have all of the challenges of building a roll up plus a ton of power cryptography challenges that in many cases are like research problems. This is very, very close to the cutting edge, but already what we're seeing across the space is major, major progress on practical proof systems.
00:28:58.506 - 00:29:31.102, Speaker B: To your point earlier, prior to 4844 era was the cheapest. It was cheaper than the optimistic roll ups. It was DA that was dominating. And because of ZK you can do nice things with DA to compress the state way more than is possible with optimistic systems for fundamental reasons. But this horizontal scalability is a thing you cannot do with optimistic systems. So for me, these teams are all doing interesting things. I would argue that all of the excellent optimistic teams in the space are working towards the right.
00:29:31.166 - 00:30:07.760, Speaker A: Yeah, I was going to say even optimistic systems are also moving in this direction. I think the difference is that you all have been working on it for like five years. Not to say that they can't also become successful. I just think that it's worth just pointing out factually that that's kind of the difference. I think obviously tons of smart, great people working at all these different companies and we're all working towards the same thing. But I thought that was one of the most interesting things. The more that I understood kind of all of the landscape of all the things happening and all the people building and in this space.
00:30:07.800 - 00:30:23.008, Speaker B: So yeah, it's an exciting time. A lot of activity in the ZK space of the last year with a bunch of, yeah, you know, different but similar teams coming online and yeah, very happy for the competition and collaboration.
00:30:23.184 - 00:30:47.540, Speaker A: So with a few more minutes left, I want to focus more around like the developer ecosystem and how developers can start building. I guess there's two things. Yeah. First of all, if a developer wants to start building, what are some of the things that are going on in the ZK syncico system? I guess, are there hackathons or their discord channels? What places do they need to go for documentation and things like that?
00:30:48.720 - 00:31:29.000, Speaker B: Yeah, so we, I would say a great starting point is just, you know, zksync IO. Will you be able to find everything from this, this one sort of entrance point? But yeah, we have very active Devrel community. They're supporting things like Discord. We have very active GitHub discussions where we'll be talking more about evolution of the system and so on. There's a ZK sync devs Twitter which regularly tweets out things targeted at the developer community. So talking about hackathons, talking about demos, tutorials, all of the things that we're doing to support the developer community. But yeah, we're super engaged.
00:31:29.000 - 00:32:08.706, Speaker B: Devereal has been a big priority for us, you know, really, I think for a long time. In particular the sort of like year building up to taking era to mainnet. We was heads down, writing code, grinding, like really trying to bring the system to life. But now that's here, like, you know, it's, it's a different game. Right. So for developers who are interested, I would say, yeah, jump into the docs, go through the tutorials, chat with us on discord, ping us on Twitter, and always happy to chat with developers as well. And I keep my DM's open on Twitter for better or worse, for people who want to talk and regularly jump on calls with development teams.
00:32:08.818 - 00:32:20.590, Speaker A: And just to underscore this, for the most part, if someone has built a smart contract that they've deployed on another EVM chain, it should work with ZK Sinkara. Right?
00:32:20.930 - 00:33:13.090, Speaker B: Yeah. The big difference, or like one thing to be aware of is that we designed the virtual machine from scratch to be provable in ZK. So you know when they're talking about why is it cheaper or why is it faster? Mostly because it was designed to be cheaper and faster because it was designed to be provable, which of course EVM wasn't like this is, it predates a lot of this thinking, so there's work to do, but it's mostly take your solidity code that you wrote for l one or wherever else, and instead of compiling it with solace, compile it with our compiler. So we built a dedicated compiler for the, for the ecosystem. And to a first approximation should just work. There's always, you know, like edge cases and like a couple of bits and pieces to be aware of. We've documented it all and I'm super happy to kind of like talk people through it in case they run into anything.
00:33:13.090 - 00:33:18.790, Speaker B: But to a first approximation for most developers, yeah. Just recompile it and redeploy it and you're good to go.
00:33:19.890 - 00:34:01.680, Speaker A: Yeah, yeah. And I understand like a big focus of you, of you all has been around developer experience and that continues to be, and because we talked about this a lot before that, you all are essentially just continue to focus on that and making it better and better. And I know that there's some folks there like Albie, and I know a lot of other folks there, but I know her in particular just because we kind of knew each other before she joined that can help out. And I actually don't think I was aware of the Zksync devs Twitter handle, so that's good to know. If you just go to Twitter and the handle is literally zksyncdevs, that's a good place to get caught up with everything going on there.
00:34:02.260 - 00:34:14.866, Speaker B: Yeah, we'll regularly be tweeting about where we're going or releasing updates on tools being upgraded or hackathons that are going on or anything of this form. And yeah, devil team, always happy to chat.
00:34:15.058 - 00:34:46.600, Speaker A: And I'm not sure if you can speak to this, but what does the developer ecosystem grants and funding and stuff like that look like going forward? And I know this might be something that you can't really touch on that much, but just out of curiosity, I know optimism is doing retroactive public goods funding, and I know that when we spoke you all were kind of considering something like that. Just curious what that's looking like, or maybe if you have timelines on when stuff like that will be available.
00:34:47.420 - 00:35:37.100, Speaker B: I would say that in terms of what's available right now, at least right now, our biggest focus is on some really fun and compelling things that will be running in person. We've started some work leading up to Edcon, so we're partnering with some teams over there who are running hackathons. We have built a tool called ZK Quest, which is, I don't even really know how to describe it, but sort of like in family for things like crypto zombies. So you've got like on chain sort of fun, educational things to do where you can like, go learn about the protocol, go solve some challenges. But it also rewards people on chain, like on mainnet with Eve. So, yeah, it's like a fun way to both, you know, develop your skills as an engineer, but also, you know, get some real value on l two from your time. We'll be running that at ECC.
00:35:37.100 - 00:35:51.880, Speaker B: We'll be running that at Edcon as well. So yeah, come see us. We'll have big presence of both. And then on the bigger things for project things, all of this. I expect there to be more on this topic very soon, but probably nothing to share today.
00:35:52.220 - 00:36:11.052, Speaker A: Okay, awesome. Well, that wraps up today. We're already kind of a little bit over on time, but this was really cool. I think that we try to keep these kind of dense and try to compact a lot of information in a short amount of time. I think that we accomplished that today. So thanks for your time. Yeah, and thanks for everyone that came through.
00:36:11.052 - 00:36:20.540, Speaker A: I'm going to be uploading this to our YouTube channel with a bunch of links. So if you came on late, you can watch it there and we will see you in two weeks on the next live stream.
