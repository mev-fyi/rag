00:00:02.160 - 00:00:35.544, Speaker A: So for the first session, the agenda, the theme, is for Shiram to give a high level vision of what Eigen layer is trying to achieve. And he will talk about, say, like, as an Eigen, how we see it as a digital commerce, how we see it as a verifiable cloud. So he will give. Give a presentation on that, and then we'll have a FAQ session where you can ask him questions on that. Cool session. Shiram, the floor is yours.
00:00:36.244 - 00:01:50.404, Speaker B: Awesome. Thank you, Shawik. Thank you, everybody, for making it to the session. I think the effort that we are trying to do here is to cultivate, like, a much closer relationship with, you know, both for us with all of you, but all of you with all of you, right? So it is a community of, like, innovators, and we're all building on this edge of what is possible. So I think it's super useful to have a close feedback loop between, you know, how we are building some of the core protocol features and what sets of things are most useful for all of you, and how we can empower a super additivity across all the different people that are building on this protocol. So, like Shawvik mentioned, you know, we wanted to use this session as warm up for what. What our larger vision is, how that translates into some of our actions, and what we can do to build what we are doing to build towards that vision and what we, as a larger collective can do together.
00:01:50.404 - 00:03:06.724, Speaker B: So I'll start with some really high level kind of observations before we go into specifically the idea of this open, verifiable digital comments. So if you look at the. If you look at why, you know, there are interesting things in life and start from that very abstract point of view, and you see, like, one of the main reasons we have, you know, and why everything is not a rat race is because there is positive sum games. Positive sum games are like, where, you know, all of us can win together, right? Many of us can win together. And there are really only two, like, stereotypes or prototypes of win win games. One is coordination, you know, a group of people coming together to do something greater than some other parts. Second one is innovation, where we invented something and convert a non resource into a resource.
00:03:06.724 - 00:04:16.634, Speaker B: These are the only two, I think, foundational prototypes are archetypes of win win games. And these two, you know, coordination and innovation actually interlock in a fractal structure to actually create all the interesting things. So just as a kind of very high level example, you take the thriving country like the United States, and you say, what is the reason it's successful. And then you actually find this underpinning architecture, which is there is a layer of coordination. Like, you can think of it as the constitution, the democracy, as the layer of coordination. And then there's a layer of innovation, which is the free markets that ride on top of it, where any individual agent can participate and create useful value, and this structure of an underlying layer of coordination, and then anybody can permissionlessly come and innovate. We talk about permissionless innovation in this space, but really, that's what a free market is, permissionless innovation.
00:04:16.634 - 00:04:53.314, Speaker B: So if you look at this structure, that there's an underlying layer of coordination, and then there is a layer of innovation on top, and there is, you can put a lens that, a deeper lens into it. And what you find is there's like a fractal structure. There is coordination, and then there's layers of innovation. And somebody creates innovates to create a layer of coordination. Like a company is its own layer of coordination, and then people innovate inside it and so on. So you have this nested structure of coordination and innovation. And the.
00:04:53.314 - 00:05:48.714, Speaker B: I think the broader project of crypto, in our view, is to create these coordination superhighways like mechanisms where lots of people can come and coordinate, and that itself enables more innovation. As an example, you have the Ethereum protocol. The Ethereum protocol enables anybody to come and create smart contracts. So by creating a layer of coordination, the Ethereum protocol enables a layer of open innovation where anybody can come and build new apps and smart contracts on top of it. And these contracts coordinate, for example, they're composable, they share a common security base. All of this through the core Ethereum protocol. And kind of the Eigen layer vision is to take this and turbocharge this.
00:05:48.714 - 00:07:05.792, Speaker B: How much can we expand the surface area of coordination so that more innovation can be plotted? And one obvious problem that we found as kind of builders in this space four years back is when you try to build a distributed system and try to plug it on top of, you can't just go and plug it on top of Ethereum, because Ethereum only lets you write a smart contract, not, right, general distributed systems, and so more. So the question was, it seems like each innovation needs to solve a bootstrapping problem itself. Can we have a common framework where we let lots of protocols share a common framework for coordination? And so that was the kind of starting point of Eigen layer, and Eigen in German for your own. So Eigen layer is your own layer. Anybody can build whatever they want. And the idea is that so? That's the kind of North Star for us. In fact, I should mention that we didn't even have restaking when we coined the terminal layer, when we coined the goal that we want to actually enable more permissionless innovation, because that's the problem that we were stuck with.
00:07:05.792 - 00:07:48.188, Speaker B: And we have to find our way through what possible solutions exist. And so, okay, so you have this, the Ethereum itself, this layer of coordination, and then layer of innovation on top. And the way we think about Eigen layer is expanding that to say, now you can coordinate for this larger class of activities. And that is in the Eigen layer view. You have stake, you know, which is basically money. And then you have operators, which is computational resources. And then you have AV's developers, which is ideas, talent, that side.
00:07:48.188 - 00:08:49.714, Speaker B: And we want to bring all these three together to create productive services. And this is one of the reasons we called it AV's actively validate services, rather than the notion of chains, which was probably, if anybody else came up with staking, that's what they would be thinking about is, oh, you can build chains, but chain is just like one specific manifestation of what you can do as a service. There are lots and lots of things that are really services. And the vision that we are building towards here is, how do we enable. If you look at this stack in the cloud, you have a very similar example where if you're building an application, you build an application, and then you have this as a web server, you have this Internet, which is a common framework. You go and throw your web server on top of the Internet. Now anybody can query the web server and get the information that they want.
00:08:49.714 - 00:09:48.098, Speaker B: This is how it started. And then as people started building more and more applications, you realize, hey, there are lots of commonalities in what an application wants. Every application wants a payment system, every application wants a login system, every application wants a database, every application needs a data lake. And you just keep inferring what are commonalities across all these applications. And those became abstractions in the infrastructure as a service or software as a service landscape, where each of them became very powerful horizontal services, the software as a service category. And now the way applications are built is you go and use these existing software as a service tools as much as possible. And to the extent that they don't serve what you want, you have to write your own new code.
00:09:48.098 - 00:10:31.784, Speaker B: And so this, the other thing that emerged simultaneously, which is a very important horizontal service, is the cloud. The hardware underpinning for all of this stuff, you have the cloud. And then on top of it people said, hey, I'm taking up all the commonalities across these many applications and then providing them as horizontal services. If you look at the last 20 years, software as a service is maybe the most profitable category in venture investment. And I think it's not coincidental. You know, lots of people from the outside is like, oh, you know, this boring SaaS stuff. But if you think about it, SaaS is actually hyper specialization.
00:10:31.784 - 00:11:55.762, Speaker B: So each person building like a particular software as a service tool is actually specializing in something very unique, like, and the amount of specialization is mind boggling. Like if you, you know, for people who think about crypto and say, oh, you know, there is a modular paradigm and there could be like three modules that is consensus data availability and execution or whatever, then you think about it and you're like, here's an example of a SaaS, a real time data streaming service for autonomous AI agents. Like, you just like look at all the qualifiers that has gone in to defining that service. And even so, there's a big addressable market. And so that's the, that's how we see the evolution of what happened in web application development. So yeah, there's like historical topography of web application development and how do we envision crypto application development? And the starting point for us is what is the difference? What is the dividing line between web applications and crypto applications? And one way we say it is decentralized trust. But then actually it's decentralization is an input, it's not a property.
00:11:55.762 - 00:12:45.408, Speaker B: Nobody is like, hey, I want decentralization. They want some other properties that they acquire through using decentralization. So what are the properties? We thought quite a bit about it, and I think there are really only two fundamental properties that crypto is trying to offer, openness and verifiability. Openness means what, when I build a service, anybody else can consume that service as long as they subscribe to some basic, whatever fee model or some very basic thing and what we call censorship resistance. And normally we think about as a community, censorship resistance to users as a key property. It's like, oh, you know, wherever you are in the world, you should be having equal access and so on. I think that's an important property.
00:12:45.408 - 00:13:37.818, Speaker B: But equally, or maybe much, much more fundamental, is censorship resistance to developers. Okay, imagine you are building a service on top of the Twitter API. Any day the Twitter API shuts down, then you are no longer able to offer your service. So in fact, there is something even worse where if you build a highly profitable service on top of the Twitter API. The Twitter API is guaranteed to find ways to extort that value from you, because that's what Twitter does, is what's supposed to do. And if they don't do it, they're not a normal C Corp or a publicly traded corporation. So this is the nature of the current Internet infrastructure.
00:13:37.818 - 00:14:51.624, Speaker B: When you're building on top of the Internet infrastructure, you don't know that the underlying layer is going to continue remaining open if you become successful. So as a developer, people are building on very, very flaky property rights. You know, you're building the shop and you know that if your shop is successful, the landlord is going to come and eat you. Oh my God. Simon here, actually, this experience, you know, just on the chat, you know, for Will, will ask him to share the experience in the AMA idea that as a developer, you get rigid property rights because the layer below you shares a property called openness. Super, super, super important. And this is, I think people have not understood the ramification of this, because once the service below you behaves like common infrastructure rather than profit seeking businesses, I mean, each of them can have a profit model, but it cannot change the conditions of its contract arbitrarily.
00:14:51.624 - 00:15:35.974, Speaker B: That's just not an acceptable thing. So openness, and the second one is verifiability. When you consume the outputs of another service, you want to be sure that you're getting the output correctly. If it's a computation, you get the output of the computation. If it is storage, you want to be guaranteed that the data was stored. If it is a peer to peer propagation service, if it's a data availability service, if it is a two factor authentication service, you want to know that it did its thing correctly. So now these pieces become highly composable, and each layer has a value for itself, because you are building on rigid property rights that nobody can take away from you.
00:15:35.974 - 00:16:44.904, Speaker B: This is the vision of the open, verifiable, you could say open verifiable cloud, but I think the term that we preferred was open verifiable digital commons. And what is commons? Commons is anything that we all share, its trees, its forestry, its lakes, its oceans, its natural parks. These are the things that are there for all the inhabitants to commonly use, and even roads, you can say, or commons. And the thing that a road does not do is when you're carrying gold on top of the road, it doesn't stop and extort you and say, hey, hey, you're carrying gold now, and therefore you should pay more, or an ambulance is going. And the road doesn't stop you and extort you to say, hey, if I stop you now, I can extort you $100,000, and therefore, I'm going to do it. That's just not what a Commons does. So digital spaces are becoming more and more common in our lives.
00:16:44.904 - 00:18:01.990, Speaker B: And right now, the entire digital world is built on monarchies. There are monarchs, like Facebook, Twitter, like all these monarchs, they set the rules unilaterally. We all have to abide by it. And instead, we want to switch to a world where there is a uniform digital commons, a coordination mechanism, on top of which everything is open and verifiable, and people can build new things one on top of the other. And these services become super additive, because each service can provide these very strong guarantees. And as more and more people build on top of these services, they become more useful, more usable, more efficient, all of the properties. So that's the vision of the open, verifiable digital commons, and how we are approaching it is what are the features that we need to build to enable it? That's how a lot of our internal discussions and protocol roadmap look like.
00:18:01.990 - 00:18:48.046, Speaker B: And one particular manifestation of that was, you know, okay, there's a whole bunch of services where things are not on chain verifiable. You know, to use ETH, staking and slashing eth, you need that thing to be on chain verifiable. But these serves some services. And a simple example is, have a group of nodes stored data. You can create things like ZK proofs for it. Have a group of nodes served data to anybody who wants it that is not on chain verifiable. And so service is not on chain verifiable, but it's off chain verifiable for all of us, viewing from the outside, from the real world, you can actually know that Eigenv has not served its data.
00:18:48.046 - 00:19:44.782, Speaker B: And things that are on chain, on chain verifiable, you can actually build using eats, taking and slashing, and various things that are not on chain verifiable. We wanted to build a mechanism that actually enables it, and that's part of what we did with the Eigen token. The reason I mentioned the Eigen token here is to convey that Eigen layer is not just a rest taking protocol. We want to build a coordination mechanism for the open, verifiable digital commons. Whatever is needed, people try to do it to the extent we understand how to do it. So that's just to kind of phrase our long term vision and how these kinds of services that all of you are, many of you are building here. Open, verifiable services are completely like, it's a new category of what? Of envisioning how the verifiable Internet should be.
00:19:44.782 - 00:20:49.240, Speaker B: You know, each of these services want to be open that anybody else can consume them, as long as they subscribe to a standard, simple pre model and they are open. They're verifiable in that either they guarantee correctness all the time, or they guarantee crypto economic correctness, which is that if the outputs are wrong, a certain amount is slashable and even redistributable, so that the harm, there is no harmed parties. And so you can create a very strong economy on top of it. So that's the long, long term vision of what we're trying to do with Eigen layer. And the part of, like trying to do this right is taking each of the steps, you know, with cap. And, you know, as an example, the how Eigen layer staking worked for e three staking. We started with a very small cap for how much deposits are allowed, $25 million.
00:20:49.240 - 00:21:28.144, Speaker B: That's how we started. And then that was there for like 60, 90 days. And then we increased it to 100 million, 200 million, 500 million, and so on till we got to whatever point, I think 20 plus billion today. And another example of taking a lot of CAIR is slashing. The first version deployed on Mainnet for Eigen layer already has slashing. Because what is slashing is just like an AV's can just send a signal, say, burn the funds and you burn the funds. That's not the hard part of building slashing.
00:21:28.144 - 00:22:27.198, Speaker B: The hard part of building slashing is how to make sure that somebody doesn't abuse slashing, how to make sure that there is no leverage risk. Like right now, we don't have slashing on Mainnet and you have, let's say, ten, several billion. Restrict across several protocols. Everybody thinks they have the same security. If everybody thinks they have exactly the same $5 billion of security, then this mechanism is not accounting for. So then you have to do complex calculus to account for how much the total amount of stake is versus how much each of the avss are consuming. And so we had to innovate and create new mechanisms which uniquely, attributably allocate security while still preserving the benefits of sharing a common pool.
00:22:27.198 - 00:23:39.898, Speaker B: And so that's coming up with our new slashing mechanisms, which we are going to share in one of the upcoming sessions. Similarly, the payments mechanism. How do you make sure payments do not suffer from a tragedy of commons and a lot of people speculating on Twitter and so on about it. So, for example, if everybody thinks there are hundreds of services, each service thinks they have the same 20 billion at stake, and they're like, oh, I really don't even need 20 billion, I only need like 1 billion. Then nobody's incentivized to pay a proper fee proportional to what their security demand is. This leads to the tragedy of commons inside this layer itself, because it's a common pool and nobody wants to kind of correctly understand and negotiate and pay. And then what about things like, and the other, other problem is how do avSs, which actually take a lot of care in reducing risk for stakers and operators, they should actually have a lower APR than like other avss, which actually are more reckless.
00:23:39.898 - 00:24:31.394, Speaker B: And how does the market actually solicit these, these things? So there is a, the jigsaw puzzle on how payments and slashing should work is actually quite intricate. And what we see is existing mechanisms, for example, used by things like the cosmos interchange security had fatal failings. They say, oh, share a portion of the fee, and then there's very little fee. And so the operators are not incentivized, the stakers are not incentivized, and the whole kind of system collapses. Polkadot had a parachain auction mechanism which ran at a very slow frequency and had these slots. And either they were under over demand where people could not get in and become a parachain, or they were under demand, which means nobody cares and nobody participates in the auction. And the whole thing either has an up spiral or a down spiral.
00:24:31.394 - 00:25:43.032, Speaker B: So there's just a lot of complexity in building these things. And what we're doing is from, for example, in payments, we have a roadmap. So we have upcoming payments coming up and we'll do a session maybe next week or something on payments. But not only that, we have pay for stake, pay for attributable stake, and then pay for computation, all of which coming up so that you're pricing the differential value of security from the differential value of compute. So the, so I think one of the things we realized and the reason we started this series is, as we are putting a lot of thought into how these things are built, the feedback mechanism between us, communicating it and getting your feedback as inventors and developers can be tightened quite a bit. And so that's what led to this new format where we come in, talk about what is going on, people from our different people from our team, and get, you know, run an AMA get feedback on hey, you know, this is the binding issue for us. I don't need more stake, I don't need insurance, I don't need attribution.
00:25:43.032 - 00:26:20.714, Speaker B: I really need this kind of payments. Our system is different because we, our costs of writing to Ethereum are expensive. We need intersubjective slashing or don't need it or all of this stuff. Have a forum where we can engage closely. And so yeah, so really excited to kick this off this week. I'll stop my monologue here and start taking questions. Awesome.
00:26:20.714 - 00:26:41.804, Speaker B: Any, you know, comments maybe? You know, we start with this comment here. Ismail, just 1 second. Zimon here has a comment on the TT reference is exactly what happened to me in the past. Maybe they can speak up and share a story.
00:26:43.464 - 00:27:15.764, Speaker C: There is no happy ending. So a year ago, I believe. Yeah, over a year ago I was in a different company. It was a startup with very short Runway and we decided to do our final call, our final Fantasy, and work on some application over the Twitter. But then Twitter decided to close the API completely and that ruined our last hope.
00:27:16.664 - 00:27:18.024, Speaker B: Yeah, that's it.
00:27:18.064 - 00:27:49.438, Speaker C: But like, since I'm speaking, maybe I will ask about stashing because you mentioned. Yeah, stashing has some challenges actually. And for us it would be really nice to have in activities dashing and in Eigen layer. Have you like considered in activities at all? What I mean by that is like simply operators to refuse to provide the service, right?
00:27:49.606 - 00:28:17.224, Speaker B: Yes, absolutely. And this is, you know, we will have a session on slashing maybe in two weeks. Exactly. That will dive into this. But absolutely we need slashing for liveness problems. So I think inactivity is just one one expression. But generally, you know, slashing for safety is one, one direction and slashing for liveness is equally important.
00:28:17.224 - 00:28:51.124, Speaker B: And so we absolutely need to support it. And I think the first version of slashing that goes live will support it. So, and I think we are talking about like a three to four month, you know, four months to mainnet for splashing. So we'll start discussing what the exact slashing scheme is and how we actually build up to that roadmap. Okay, Ismail, was going to turn on the mic. Yeah.
00:28:51.284 - 00:29:26.454, Speaker D: I wanted to ask briefly your thoughts on the best way to guarantee liveness across the network broadly. Because I mean, it can be something that doesn't require slashing, something like avalanche snowman, or could be something that requires it's retroactively observable, for example, like some of the early work with Eigenva, or could be something that's inter subjective as well. If you just have a series of nodes that are assessing the live and Stella node, but it feels like that's a very broad design space of guaranteeing liveness that has a bunch of different solutions that can have ETH restaking or eigenstaking or no slashing at all, I guess. Where would you sort of think the best design for that sit?
00:29:27.114 - 00:29:54.094, Speaker B: That's a really, really good question. It seems like this can basically inspire a whole session on how to design for liveness. It is a hard, hard problem. Okay, so first let's start with recognizing that it is a really hard problem. And let's go back to ethereum. Like, you know, we are, we are Ethereum builders. So we always look to Ethereum to understand what, what might work.
00:29:54.094 - 00:30:41.604, Speaker B: And if you look at Ethereum and split Ethereum's like properties into safety and liveness, safety, the thing that gets confirmed remains confirmed liveness, that new things keep happening, new honest transactions keep getting in. And for safety, Ethereum has like, rigid on chain slashing. Like, you know, you double sign a block, whatever, like, you can be identified and slashed. And that's part of like the execution environment and it's possible to do it. But liveness slashing, you can split liveness into two parts. One we call ledger growth, which is that the chain makes more blocks. So ledger growth, it's growing.
00:30:41.604 - 00:31:23.388, Speaker B: And the second one is censorship resistance. Censorship resistance is if the ledger grows, it is including all the new honest transactions. So ledger growth is easier to observe. And why is it easier to observe? Because no blocks made. Like, everybody knows no block is made, so it's easier to observe. Censorship resistance is much, much harder to observe because how do I know no transactions have been censored? I need to be monitoring the mempool. I need to know that these transactions were sent to all the nodes and they, in malicious nature, didn't include it, as opposed to out of network failures, didn't include it.
00:31:23.388 - 00:32:03.704, Speaker B: It's a high bar. So if you look at all the kind of like social layer stuff of ethereum, it's all because of the inability to solve censorship resistance in protocol. Otherwise, why do I care? Or why does Ethereum care if Coinbase is the only node that runs? I could say, I know, just Coinbase runs the only node, and that's it. That's everything is observable and slashable. But censorship is not. So they are like, okay, can we get more decentralization and decent. Unfortunately, decentralization is not measurable by the Ethereum protocol.
00:32:03.704 - 00:32:42.950, Speaker B: And so ethereum, because decentralization is not measurable by the Ethereum protocol, we have to sit and shout on Twitter that, hey, don't go below 30% this and that, which is very ugly. Like, it's not a protocol. It's like some kind of like, social committee. And like, you know, we don't like this as protocol builders. We want clear, sharp, you know, conditions in the protocol. And unfortunately, that's not the case with censorship resistance today. But one principle at least we can draw from this is, number one, ledger growth is more easily observable, whether that is inter subjectively, which is outside the reference frame of the blockchain.
00:32:42.950 - 00:33:31.720, Speaker B: It's observable. Also for many systems, avss, like either Argon DA or other people building AVss, it's observable on Ethereum itself, right. That no new updates have been made. So for that, you can have a different procedure for how to deal with it. That no new update has been made is a different kind of an error, then an update has been made, but does not include or is trying to censor transactions. That's a different kind of an error. And the second one, the sensitive resistance, going by the ethereum's social layer example, instead of avss trying to create their own social layers and yelling.
00:33:31.720 - 00:34:04.028, Speaker B: I think what we can do is to have, like, decentralization oracles bad. Which specify that, oh, you know, choose more decentralized operators, so you have a much more difficult time for all of them to collude and censor. So that's the extent to which we can go into it today. But it's a great topic, and I think it's the most non trivial thing to achieve in these systems. So debates like a whole. It merits a whole discussion session by itself. But thank you, Ismail, for bringing that up.
00:34:04.156 - 00:34:09.784, Speaker D: That's actually really helpful. I hadn't thought of the framing of ledger growth versus censorship resistance, and that's actually something that we've overlooked.
00:34:10.444 - 00:34:22.624, Speaker B: Thank you. Okay, we have Uri and vanish. Hands up. Give me 30 seconds. I'll be back. Shawvik. In the meanwhile, you can moderate.
00:34:22.624 - 00:34:24.332, Speaker B: Yep. Yep.
00:34:24.468 - 00:34:38.244, Speaker A: Sounds good. Yeah. Oh, Manavi also has questions and is there a question in the chat also? Okay, maybe we can start.
00:34:42.744 - 00:34:43.120, Speaker B: Yeah.
00:34:43.152 - 00:36:05.944, Speaker E: Thank you. So similar to earlier about how we have these consumers that maybe their cost of corruption is 1 million, 2 million, they don't need 1 billion worth of stake. And if, like, I don't know, you know, verifying less BLS signatures means the service is cheaper for them and they're fine. With them. I'm wondering if consumers will also have the same attitude regarding subjective versus inter, subjective versus objective conditions, not only regarding slashing, but also like, payments, settlement, et cetera. There's, you know, you could have a subcommittee of the quorum set reports, whatever, you know, cryptographically verifiable artifact the AV's is producing, and then have the rest of the quorum look at their behavior and for some use cases where if the rest of the quorum can pick that up really quickly and then, like, have a majority vote within the quorum. So these are things that sort of, we would need some programmability through the slasher in order to have these design patterns and really test whether consumers would accept the solution or not.
00:36:05.944 - 00:36:08.564, Speaker E: I was wondering if you could shed some light onto that.
00:36:09.024 - 00:36:59.156, Speaker B: Yeah. So in this case, you know, there are two sides to the market for an AV's. You want to create a slashing condition or verifiability conditions based on the two sides. One side is what is acceptable to the stakers because they have to take a risk on that thing. Then what is acceptable to the AV's consumers? You have these two sides. The AV's developer is kind of in the middle, taking the punches from both the sides. And that's the hard part, is basically what is the trust assumptions that stakers will be okay with that AV's consumers will also be okay with.
00:36:59.156 - 00:37:25.984, Speaker B: So this is a complex negotiation, and the way we are going to design the slashing protocol is, you know, if you want to slash based on a committee, it should be possible. It's just not clear how many stakers will opt in or, like, perceive that as higher risk. It's going to be emergent. And so that's, we don't know what.
00:37:26.684 - 00:37:40.116, Speaker E: The way we converge onto, like, good design patterns and, like, each use case will require its own, like, consensus is really to have this programmability and like, very, you know, iterative, responsible maturation with these design patterns.
00:37:40.260 - 00:38:47.484, Speaker B: Absolutely. I think that is, that is the right way to go. And I would say, like, you know, tune the one kind of like a general principle is like, if you make slashing very rigid, then it makes, it transfers more trust to the consumers, but it makes it very difficult for stakers to opt in. So it's this two sides that you have to balance and start from less slashing and then go to more slashing over time, because right now, consumers don't care that much about exactly what the locus of trust is because the crypto economic model is not fully understood yet. Exactly what is the source of security? How is it getting transferred? Not fully understood. And I think like there is pervasive misdesign. Like, you know, for example, in cosmos, you know, even though you think you have like x dollars of security, and chains say that they have x dollars of economic security, the total slashable is only 5%.
00:38:47.484 - 00:39:46.930, Speaker B: So do you really have x dollars or you only have like 5% of x dollars? Right. So the, the reason I mentioned this is that's the state of the space. And so a lot of consumers are willing to be like, okay, now you have trusted operators, you have a quorum, we're happy to take it and have some minimal amount of slashing. And usually I think the way you think about it is initially the real risk is like lazy operators, operator opts into your thing and doesn't just forgets to run the software or like goes home on vacation or whatever, and then like doesn't the mission shut off and like, nobody's there to restart it. This is like a real risk initially. Over time, as you're like, AV's starts to serve a lot of value, then you have to really be tuned the knob on, hey, what are these operators turn malicious and try to attack me. I should still have a secure system.
00:39:46.930 - 00:40:32.880, Speaker B: And so that's like zag negotiation pattern. You start leaning a little bit towards finding productive use for consumers. This is one of the reasons we did not, you know, we actually felt comfortable going live on mainnet without slashing. Our people criticize us for this, but we understand it's really hard for an AV's developer to write rigid slashing contracts. And it's really, really not useful to write rigid slashing contracts if you don't have real users. So starting from, hey, I built an AV's which is actually functional and is delivering a use case and then turning up the trust model is the right way in our view. So saying, oh, I have the full slashing thing.
00:40:32.880 - 00:41:22.454, Speaker B: And like I mentioned, we had on our main net code just past the slashing code. We did not turn it on because we know it's like we can say, oh, slashing is live, and you just send a, send a single signal and then you just burn the money. Like, how hard is it in our contract enabling slashing at eigen layer levels? Not at all difficult. It's really difficult for the avss to actually figure out what is the right slashing conditions. How do you make sure to mediate it? But unless you have a thriving AV's consumers, it's useless to like, write more and more complex slashing contracts so the zigzag pattern is lean to consumers. Then like slowly add on flashing to make sure that over time operators can never misbehave. And that's really like the right tuning in our view.
00:41:26.234 - 00:41:28.854, Speaker A: Cool, I think next question is from Banishree.
00:41:29.434 - 00:42:31.034, Speaker F: Hey Shriram, thanks for doing this. I have a question about something you mentioned a little while ago on staking and compute resources being the two components offered by Eigen layer operators. Let's focus on the resource part. Here is the question. What do you think about the viability and usefulness of the following service? Think of a service which can advise operators on where the demand is going to come next. It's think of it as a prediction model that has seen enough data to give them inputs and thereby they can truthfully report to abss their resource availability, thereby abss being able to.
00:42:34.254 - 00:42:35.062, Speaker A: Figure out.
00:42:35.158 - 00:42:41.834, Speaker F: Their way of ensuring to their customers.
00:42:44.014 - 00:43:24.946, Speaker B: This is a really interesting kind of question. And I think it depends on whether avss are operating under constant load or slowly varying loads or avss require highly varying loads. And I think we don't have the data on this, on how. Because if you look at, let's say running a chain, right, usually running a chain requires a constant provisioning of compute. Even if run TPS is going up and down. You always need that computer. You just have to provision it and then like it's just utilization is varying from 0% to 100%.
00:43:24.946 - 00:44:17.146, Speaker B: And as we construct more sophisticated operated tooling, which says hey, you have 20 services and I'm not going to provision a whole node for just running this one layer. Two, I'm going to dynamically size it up and down across all these different cores. I think as we get more and more sophisticated tools, this prediction model will like be very helpful. But I think that's the starting point is dynamic mechanisms to take the bunch of workload and reallocate it across nodes and so on. Our operator experience sucks and we know that, we know lots of things suck at il air. So you know, it's useful to know like from different people what the pain points are. And our operator experience sucks because each, the operator has to download and run each AV's separately.
00:44:17.146 - 00:44:52.240, Speaker B: It's just, it's like this is one of the places where I mentioned aviators are in the middle taking punches from stakers and AV's consumers. And we are in the middle between AV's developers and operators. And operators want standardization. Give me one box and I have to be able to run 50 avss but each of you have like a crazy new idea and new hardware requirements and different ways of running it. You don't want to set it up as a docker container. You want to do something else. Each application has its own unique demands.
00:44:52.240 - 00:45:24.284, Speaker B: Part of our difficulty is how do we make an interface where operators are flexible across all these application classes, but still have a more unified way in actually running it? We haven't found a solution yet, but it's something that we are actively engaging with, with the operators. But also there is a space for much more sophisticated operator tooling to emerge from, you know, the marketplace, which, you know, will be awesome to see.
00:45:24.784 - 00:45:25.248, Speaker F: Awesome.
00:45:25.296 - 00:45:27.644, Speaker B: Thanks Shriram. Thank you, Sri.
00:45:28.744 - 00:45:33.524, Speaker A: I think there is a question in the chat from Jesse, so about.
00:45:34.824 - 00:45:45.876, Speaker B: Oh, it's not Jesse from Eigen layer. Okay, Jesse, a frequent Jesse, if you're around, you could speak up or I can read the question.
00:45:45.940 - 00:45:57.764, Speaker G: Yeah, I don't mind speaking up. How you doing, Sriram? Hi, Shubik. Yeah, it's just often over the last couple months, a question that we often receive is, how much economic security do you need?
00:45:57.924 - 00:45:58.268, Speaker B: Right.
00:45:58.316 - 00:46:05.802, Speaker G: And it's a kind of difficult problem. It's a little bit ambiguous. And I was just wondering if you had a take on how to answer that question.
00:46:05.988 - 00:47:14.094, Speaker B: I think this is one of the most useful questions to think about as a kind of, the thing that happened is when people say, how much economic security do you as an AV's require? I think the fundamental problem is people don't know how much economic security Ethereum requires, or Solana requires, or if economic security is a meme. And like, we're still discussing all of those questions so clearly, like it, you should expect that because of the state of like, where we are as a community, we don't have a clear answer. But we from the Eigen layer research team, we think we have like, very clear answers. And so we would like to nudge you into that direction. The, the first thing is, if you're building a slashable service on Eigen layer, then the main kind of a consideration is if the service goes wrong. Firstly, there is a fraud proof period. I don't know, one week or something.
00:47:14.094 - 00:48:06.524, Speaker B: Within that, there is the slashing proof, and you can slash them. Now, the thing is, essentially what is happening is that the amount of economic security that you have is securing the total value that the AV's is conducting within that one week period. So if you're a bridge and you're moving value around, then you say, okay, you know, inside this one week, I'm moving what, what we call WTL, weekly transaction value. WTV weekly transaction value. So what is the total amount of transactions that you're conducting in that week? And as long as they can set that number to be smaller than the economic security. So economic security is greater than the weekly transaction value, then your system is just crypto economically secure by itself. Right.
00:48:06.524 - 00:48:43.876, Speaker B: So, you know, like, I'm doing $100 million weekly volume. I have $110 million economic security. So I'm sure that there's no profit from attacking my service because you can steal at most 100 million, but you'll lose 110 million. So that, I think, is the tight equation. But like I said, the way you'd want to do it is even if you had unique attribution for 110 million, you don't want to necessarily write a slashing contract that slashes all the 110 million on day one. This is because you want to be careful, but you can have a ramp up period, and over time you can ramp up to that. At least.
00:48:43.876 - 00:49:28.534, Speaker B: That's an example of how you would measure how much economic security you have. So it's the value in flight during the. So another way of thinking about it is what we call harm from corruption. Harm from corruption is, let's say all the operators are malicious, they all collude together, they're all malicious, and they all do something wrong. And they can do wrong only for this one week period, because everything gets reset in this one week period. They are doing something wrong. What is the total harm that can be caused during this one week period? And sometimes it will be even smaller than the weekly transaction value because you're not just relying on this one input, you have all kinds of other inputs.
00:49:28.534 - 00:50:20.474, Speaker B: But so basically it's the harm from corruption on a fraud proof period, that is the amount of crypto economic security. And so having a roadmap. And one of the things is, even if all this is not built on day one, having a roadmap, to actually have that kind of measured and metered in protocol on chain, like, for example, a bridge can set a weekly transaction value limit directly coupled based on how much economic security it has bought. So it is just always secure. It just doesn't allow more transactions to go through unless it buys also more economic security. So you just create this peg and then both of them move together. And so there's just a lot of really interesting things that can be built downstream of this.
00:50:20.474 - 00:51:00.340, Speaker B: Again, we are in very early phases where we're still arguing if it's a meme or not. So it shows us how early we are in this. This group here that, like, major players actually think that it's a meme versus. Actually, this is highly quantifiable, like, mathematically tight. You know, one of the things we. When we talk about we want to build these coordination systems for. For innovation is we really need to make these systems, the broader crypto ecosystem, to be much, much better than the existing financial system.
00:51:00.340 - 00:51:35.364, Speaker B: Otherwise, it's not clear why, like, we would actually get real adoption of everybody moving everything from their money to property to the cloud into this crypto substrate. And systems which measure the amount of security offered sharply. And. And, you know, and build on top of it are actually, I think, much better. So, anyway, so that's our high level response. Thank you.
00:51:35.824 - 00:51:38.124, Speaker G: Yeah, yeah. Thank you, Sriram.
00:51:39.104 - 00:51:40.804, Speaker A: I think next one is Manu.
00:51:41.624 - 00:52:06.394, Speaker H: Yeah, hi. Hi, Shiram. I was curious, like, since we have a lot of the AVSs here, like, we've just been so far, like, helping each other with, like, engineering issues here and there. But, like, I'm curious, are you. What are you guys thinking about? Like, AVSs is working together more formally in the protocol. Like, I don't know how much you're willing to share on that, but I'm curious about that.
00:52:10.054 - 00:52:14.510, Speaker B: Can you explain what you mean by that? I can, or it's just a high level idea, then I can just, like.
00:52:14.582 - 00:52:22.848, Speaker H: I mean, it feels like there's some collaboration that can happen with, like, attributable security if, like, consumers are using multiple aviators together.
00:52:23.046 - 00:52:39.024, Speaker B: Okay, amazing. Amazing. Thank you, Manav. Okay, so, you know, this is one of the superpowers of. So we talk about coordination layer for innovation. And so what does. What does it mean? One way in which.
00:52:39.024 - 00:52:55.544, Speaker B: So, imagine there is an app that uses five. Five Abs's to gather. And, you know, it needs an AI inference. It needs a bridge. It's neat. Needs a ZK prover. It needs some five things.
00:52:55.544 - 00:53:39.604, Speaker B: And let's say that Dap has a weekly transaction value of 100 million. If these were. And all of these are safety critical features, if any one of them go wrong, then maybe money can be stolen. So, normally, what you would want is you would want economic security of 100 million for each of them separately. And that's like, five x more expensive than. So then what happens there is it opens the window of opportunity for somebody to come in and say, hey, I'm actually offering a vertically integrated service, which is, oh, I take all the services together. I built a new service which has all these features, and then I offer that.
00:53:39.604 - 00:54:36.934, Speaker B: But that's not permissionless innovation in our view. That's like one guy needs to know how to build a bridge and a ZK and this and that, and it's not likely and it's not actually really correct architecture. So we call this post market bundling. What's post market bundling? Like? There are these five areas already existing and running on Eigen layer. There should be a mechanism where, you know, there is a big app which needs to consume all these five. There should be a mechanism where people can come and say, hey, I want like a group of operators to run these five services together and I need to get $100 million of security from this group of operators that is running all these five services together. And if we can create this layer to be built permissionlessly, that anybody can come in and ask for a certain bundle of services.
00:54:36.934 - 00:55:55.556, Speaker B: And now there is an economy of scale for all these five servers together and each service is actually stronger because they're contributing to each other's network effects that you can't just like move. And so these kinds of post market bundling is a feature that we are building into our slashing roadmap. So that basically enables people to be able to come in and consume these bundles of services with paying one x the fee than paying five x the fee. Like if there is a five five ABS bundle, but much more will put up about it after we have the formal description of our slashing model. But that's, that's a big, big thing. And I think this is one of the reason I mentioned that we call it avss, actually valid services rather than chains because you can compose these services and use them to get like and you know, in the long I mentioned the WEP one view of or web two view of how applications are developed based on concatenating these SaaS services. That's the same view we have here is you have verifiable services and then you concatenate them to actually get new applications.
00:55:55.556 - 00:56:00.184, Speaker B: So application developers come and just say I want this, this, this and then that's an application.
00:56:01.164 - 00:56:01.798, Speaker H: Thank you.
00:56:01.876 - 00:56:03.494, Speaker B: Yeah, awesome.
00:56:05.194 - 00:56:53.366, Speaker A: Any more questions? Comments? We are at the end of the session also, so well, time good. So thanks everyone for coming and appreciate all the fellow inventors and discoverers seeing here. So it's to build a very vibrant and robust digital commons. So it will be a long journey and we'll be all together into it. So really appreciate it. Everyone building on Eigen layer. And for next session I will send out the theme, theme soon, maybe today or tomorrow, and we can and if there are any reading materials or something like that, I'll also send with that message.
00:56:53.366 - 00:57:11.142, Speaker A: And. And the presentation will be there and also same format. And then there will be an FAQ session and where we can answer those questions. Thank you. And I send a recording right after I get the link from Google. So awesome.
00:57:11.278 - 00:57:12.350, Speaker B: Thanks, everybody. Bye.
