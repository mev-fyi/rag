00:00:09.240 - 00:00:30.285, Speaker A: Okay, we're live again with another Infinite Layers. Today we are joined by an AVS team who's been building on Eigen Layer Automata Network. I'm here with a couple of the co founders. So thank you guys so much for your time today, for joining us. Looking forward to learning a lot about Automata. Do you mind giving us intros to yourself and then we'll dive into what you all have built?
00:00:31.225 - 00:00:47.465, Speaker B: Yeah. Hey guys, great to be here. Thanks for the invite to Infinite Layers. I'm Delhi from Automata. I'm one of the co founders. So actually I joined crypto in 2016. Like start, like start reading like some of the white papers also like have better understanding.
00:00:47.465 - 00:01:25.199, Speaker B: At that time I was a student at National University of Singapore doing a little bit research on system security and network security. That's also why I have interest in crypto in general, because it really rhymes really well with the research area. Especially at that moment I started learning about trusted execution, basically the technology we've been using. That's also when I met Zhen Long over there. So it's kind of like everything all start from there. So ever since then we started really talking about how to use TE to bridge the gap in crypto. So we started the project in around 2020.
00:01:25.199 - 00:01:36.315, Speaker B: We actually during COVID we had to work from home trying to discuss ideas. In 2021 we launched projects, did the fundraising, like all the way until now. Yeah, great to be here again.
00:01:40.695 - 00:02:56.405, Speaker C: Okay then I think Daly said a little bit about myself. So for me, I kind of like finished my PhD during late 2018, 29, early 2019 and kind of like during my entire PhD research, my focus has always been on system security, specifically more on the kind of like lower level stuff like binary analysis, program analysis, privacy attacks on systems. How can we kind of like break certain security assumptions? So I remember back when I started my PhD in 2013, when I first entered the lab, we were talking about like designing our own trusted execution chip. Back then that intel didn't have their intel sgx. I guess the only kind of like trusted execution environment that was commercially available was ARM Trust Zoom. And then that, that kind of like started my entire journey of like playing around with tes.
00:02:56.485 - 00:03:31.475, Speaker A: So yeah, so Teas, this has been something that for me it's fairly new, but the more I learn about them, it's not a new idea. Like this idea has kind of been around and it feels like it's come in and out of the discussion around how people are architecting different systems. And now it Seems to be more of an interesting topic or more of like a popular topic. So before we dive into automata, I would love to talk about teas for example to get started. If someone was to just ask what's the definition of a trusted execution environment? What would be the answer to something like that?
00:03:35.455 - 00:04:15.235, Speaker C: I think the simplest kind of like explanation that I give for trusted execution environment is really like it's a private piece of. It's a kind of like private computation space that you can have away from the machine that you are working on. So you can think of it as a remote. It's like an extension of your computer that you're using on some remote server or some remote location. So it allows you to perform computation as though you're running it on your local machine in some other place. So yeah.
00:04:15.815 - 00:04:17.955, Speaker A: Do you have anything to add? Dele.
00:04:18.855 - 00:04:55.805, Speaker B: Yeah, I think easier to understand example is I remember I saw this multiple times when we read some of the TE papers and also presentations. People talk about like cloud computing back then and TE would be a kind of a better model because like you previously you have to trust cloud, trust that they are not playing with your data. But if you have de, you could just eliminate the trust because you are not trusting operators anymore. You're just like using technology. You're kind of entrust the enclave that being running like elsewhere also there will be mechanism for you to verify and provision your own data. So it actually starts from zero. There's nothing wrong there.
00:04:55.805 - 00:05:05.205, Speaker B: But when the time you provision your data it becomes kind of your personal like compute like space. So you could just like continue using it for the future.
00:05:05.285 - 00:05:05.783, Speaker C: Yeah.
00:05:05.909 - 00:05:24.335, Speaker A: So what are the sorts of things that people are doing within a trusted execution environment and in the sense of like a use case where I might be building an application and there's a limitation within my SMART contract and then I might offload that to a T. Like what would be an example of something that might be done there?
00:05:24.755 - 00:06:17.021, Speaker B: Yeah, I think we can talk about that in two like areas. One is in traditionally like in the web two industry actually if you look at what Apple is doing recently, they have this private cloud compute which essentially use cloud based although it's their own kind of architecture based on their own operating system as well. But the concept is similar. So it extends the trust like domain trust boundary from your personal device like iPhone, iPad, Mac to a cloud environment. So from there you can do like inference because those are like you can't really run it locally. So you have to put it on cloud to have more Powerful computations. So in Web three, I think in the past we have seen people doing really global encrypted state, essentially a private blockchain with private execution.
00:06:17.021 - 00:07:12.183, Speaker B: So nobody can really see the transactions. There'll be ways to also provision your own data as well, just to start it out. Also we've seen people doing a little bit on the Oracles because TE could ensure the integrity of the execution as well as the data. So it will be a kind of best fit for running Oracles as well because it can get data from trusted source, then post it on chain and everything can be verified by just checking the signature. I think lately people have interest on multiprover because it's kind of a balance between trust and also the, I mean the security and also the cost. Because if you for example, if people are doing Executor Lab, you're already like to run the entire proverb system is kind of costly. You certainly can't like do another prover just using like all the system.
00:07:12.183 - 00:07:21.695, Speaker B: Again you have to use a different tag to kind of mitigate the single point of failure or issues. So this would be some of the use cases we have seen so far.
00:07:22.555 - 00:08:25.799, Speaker C: Yep. And then to kind of like add on a little bit more. I mean other than like having the functionalities, a lot of kind of like traditional companies like Web2 organizations, they have been using TES as a way to mitigate some of their own organizational risk. So for example, if I'm a company that and I want to perform some analysis on my user's data right now, what happened is that the company would collect the user's data and then perform analysis of it. Of course the company would have a privacy kind of like agreement with the user to say that like how is the data being used, it won't be sold to third parties, et cetera. But as we all know, things happen, companies get hacked and then data gets leaked and the whole thing becomes a very tricky situation because the company might not want to review the user's data. But now the data is in the hands of the hackers.
00:08:25.799 - 00:09:56.725, Speaker C: So by utilizing trusted execution environments, because the data is actually kept encrypted within the enclave itself, it actually makes it a lot harder for malicious third party to access the data. That's one and another one is in the entire Web3 ecosystem, especially in terms of securing, what's it called, encryption keys. We actually see a lot of organizations, for example Fireblocks, they actually make use of TES in MPC setting where I mean other than using NPCs to separate out to distribute the secret shards for the encryption key. They also make use of keys to ensure that all this control, access control to the encryption key is actually enforced by code itself instead of by the operator. Because the tes would, would guarantee the integrity of the code which includes access control to the, to the data. And this is this, this kind of enforcement is actually done on the operator and the service provider too. So it's a kind of like code is law kind of situation.
00:09:59.715 - 00:10:13.695, Speaker A: So I guess in terms of what Automata is providing, are you all. It doesn't sound like Automata is a trusted execution environment. You're like a platform for people to launch and deploy and manage their own, is that correct?
00:10:15.115 - 00:10:42.375, Speaker B: Right. In a broader sense that's actually the better definition because we don't really develop TE hardwares, we're actually making use of all type of TEs. So up until now I think we've seen so many different cloud providers also like chip vendors, they already invented their own solutions. I mean these are already generally available. So that's what we do. We kind of figure out a way to plug it into the Web3 systems. So there are actually multiple ways to do it.
00:10:42.375 - 00:11:13.835, Speaker B: And currently our focus is just the co processors. Because this model is essentially extending the trust from blockchains like Ethereum to like, I mean from the hardware to Ethereum so that people can verify hardware on chain and if you can verify that then you don't have to trust any third parties kind of the risk is minimized. You can just check the data submitted by the enclaves and also have certain like, like, like extension based on that. So this is essentially what we do. Yeah.
00:11:14.735 - 00:11:36.235, Speaker A: So what, what does the actual experience look like for someone building on Automata if they're a developer, how would this fit into their tech stack and what would the process kind of look like for them to kind of say, okay, I want to build my own trusted execution environment, I want to build my own CO processor maybe or whatever. And what does that kind of look like?
00:11:36.815 - 00:12:47.399, Speaker B: Yeah, if you ask this question like two years ago, I would say it's still very challenging because back then the only kind of commercially generally available solution is intel sgx. But the security model is a little bit like, I would say it's better but it's also like limited because you have to really like do some like close integrations between your business logic along with the security model that Intel SGX adopts. That means you have to really thought about, think about like what kind of compute would be put into the private sessions and what would stay outside. But now things have changed because a lot of vendors develop this VM based approach like amd, Sev and also intel tdx. These are kind of easier solution to work with in general. The experience now is if you have some code already developed we can just take a look at it, figure out like if could be just like putting easily. I mean in general it should be fine but you would probably see some like overhead in terms of performance.
00:12:47.399 - 00:13:00.755, Speaker B: So we could like look at that and maybe do some optimization to make sure you don't actually lose too much. But compared to other tech I think like the performance drop will be still acceptable. It's not like really like that serious.
00:13:01.295 - 00:13:42.843, Speaker C: Yep. And then the kind of like what's it called developer experience really is. It's. It's kind of like mixed. It actually depends on the type of trusted execution environment technology that you choose to, that you want to use. So for example like on our AVs we actually support like Intel SGX, TDX, AMD, SUV, AWS, Nitro Enclave, stuff like that. So if you choose to like, if you want to use intel sgx, then the kind of like the bar to actually develop the enclave would be a lot higher.
00:13:42.843 - 00:15:20.165, Speaker C: In that case it's more like kind of like collaborative effort where we will actually help the project to kind of like co design how the kind of like trusted portion of the code would be the untrusted portion actually which part of your business logic should actually be moved into the trusted segment. So that's like for the Intel SGX portion. And then like what Tilly mentioned, the kind of like confidential VM solutions like TDX and sev, it's a lot easier to develop because for the developer itself they would just write any kind of like standard applications. Of course when they are writing the applications they need to have that kind of like mental model where their application will actually be running within a kind of like a sealed port, so to say. And what we are providing to the application developer is this entire infrastructure, this framework where we are able to kind of like perform the attestation, the verification that their workload is indeed running in trusted genuine hardware. That's one and two. You have heard about attacks on Intel SGX where hey, some security researchers have actually found out certain vulnerabilities and intel might actually take some time to perform what we call a TCP recovery.
00:15:20.165 - 00:16:21.865, Speaker C: It's something like hey, this particular version of the TE is now unsafe, so please update to the next version of the tee. So the kind of like current ecosystem, now we actually have to rely on intel to perform all these TCP recoveries. But what we are doing at Automata Network is really to provide you with this, with the ability for the community to actually step in at an earlier moment to say that, hey, you know, I think this particular vulnerability is serious enough for us to say that these particular versions that are affected by the attack, we are not accepting the attestation for all this version until there's a particular mitigation or there's a new version, then we would continue accepting the attestation. Basically our infrastructure allows projects to actually tap into this.
00:16:24.035 - 00:16:33.895, Speaker A: And like trusted execution environments, they're not really, like you mentioned, limited to blockchain infrastructure. Right. This is something that's already existed in the past.
00:16:36.435 - 00:16:38.219, Speaker C: Yes, correct, you're right.
00:16:38.267 - 00:17:12.605, Speaker A: What does the verifiability kind of bring to the table? I mean, in my head I understand because I can kind of do the same analogy between traditional servers and maybe a blockchain or something. But yeah, I'm curious, like what might be the value proposition for someone that is going to consider building an application and using a trusted execution environment to kind of understand maybe the differences between the two, between like a traditional team versus maybe like something built that's more, that's verified verifiable.
00:17:13.185 - 00:18:20.785, Speaker C: Yes. So actually when we look at a lot of kind of like TE applications that is being done now, the verification is actually not done by the users because most users, they do not have the technical ability to actually perform the verification itself. The use cases, at least up TO now, where TEs are used is actually a operator versus service provider situation where I'm a service provider, I have some workload that I want the operator to run in. So I would, I would pass, I would. And I'm not sure if the operator will actually run my workload properly. So I'll ask the operator to run my workload and I'll verify that this particular environment is indeed trustworthy by kind of like performing the remote attestation verification. Once I'm confident that this is a correct, this is a genuine platform, I can then say provision some secret into the environment to do encryption decryption.
00:18:20.785 - 00:19:27.785, Speaker C: I can put some private data in to perform some computation. Like tes are used in dvd, sorry, Blu Ray decryption programs. So there are some Blu Ray software that actually make use of Intel Azure X to perform the decryption. Only when the kind of like the attestation pass through, then the software would release the key into the key itself. So okay, yes. And the reason why it's designed this way is that most users, what we believe in is because most users can actually verify the authenticity of the keys itself. Now what if we have this kind of like public infrastructure, like a blockchain that allow us to have some code that we agree that has certain integrities that's enforced to it and then now we actually perform this kind of like verification publicly in the open and put it again publicly on the ledger itself.
00:19:27.785 - 00:20:14.805, Speaker C: This actually allows anyone to have. How is it to actually make use of any cloud compute in a way like they are using it on their own machine? They have certain integrity guarantees to a certain level, they have certain privacy guarantees again to a certain level. And it's easy for users to use because users don't actually have to perform that, that complex protocol. They just need to go online to the smart contract and take a look at hey, is this machine that I'm talking to attested verified? If it is, then I can trust the machine. I can trust the results that is coming from the machine.
00:20:17.025 - 00:20:19.805, Speaker A: This is very cool because it's. I'm sorry, go ahead.
00:20:20.185 - 00:20:37.855, Speaker B: Yeah, we actually also named this thing like proof of machine hood. So it kind of establish, we don't call it identity, but more like authenticity of the machine on chain so it's approved and people can verify. If you verify the machine, some of the compute on it can also be trusted. So this is why we name it this way.
00:20:39.955 - 00:21:24.199, Speaker A: Yeah, I was just going to say like this is definitely outside the scope of what I'm typically used to building with. This is like more, I wouldn't say like low level, but it's kind of more, I don't know, I guess it almost reminds me of hardware engineering to an extent. I don't know because you're kind of talking about actual hardware and things like that. Whereas I've been more of a full stack developer and now getting into some smart contract development and then now with eigenlayer, maybe building out a couple of examples of just verifiable networks. But this is just a whole new area that's completely new to me. It's really interesting. I'm really interested to know why you all decided to build this product specifically.
00:21:24.199 - 00:21:36.435, Speaker A: Do you feel like this is an area that's going to have a lot of growth? And if you do think that, I guess where do you see that growth happening? What specific verticals? Maybe.
00:21:38.575 - 00:22:28.983, Speaker B: I think at the moment what we see interest it can come from use cases like multiprover and also maybe oracles. So maybe I can start with multiprover. I mean it's also not a new concept we create. It's actually it's mentioned by Vitalik in one of his talk in 2022 he mentioned about like because ZK systems are still early and could be vulnerable to soundness issue. So there must be some ways to mitigate the issue. And like a different tech stack, a different implementations, a diversified implementation would actually help a lot with that. And that actually it's already like become a kind of established opinion in even like the Ethereum client because you see a lot of other like I mean many different third party teams develop like clients as well.
00:22:28.983 - 00:23:46.689, Speaker B: So similar situation could happen to maybe the proverb system. So I mean before we like before those code can really like formal verify and like maybe audited an easier way to start using them is really just have this kind of more robust and defense in depth systems like multipur is actually one of this use cases like Oracles is also especially very powerful because we seen so nowadays everything go by API. Traditionally in Oracle or you have some node grabbing data from API then post it on chain but in the world of TEE you can have a layer of verifications going on basically because all APIs run through HTTPs. TE is actually a very good middleman on verifying the remote party and also related to blockchain but essentially create a bridge between blockchain and also endpoint. The endpoint can be verified because the search there it's public. You can run some logic to make sure this is always the same cert that you're accessing instead of like kind of attack like the one that's being replaced by attacker. So this is establish a better like data source kind of trust.
00:23:46.777 - 00:24:32.649, Speaker C: Yeah, Yep. And then I would like to also kind of kind of like push the boundary a little bit. So like what Billy has been describing has been like what we traditional know what we traditionally understand of trusted execution environments. Like I have an environment where I can perform certain computation. Now he actually mentioned something that we are working on which is called proof of machine. Think about that. If I have a trusted execution environment or any hardware based secret then I'm actually able to because it's hardware based I can have a certain level of trust on it and then I can slowly extend that trust up the entire tech stack.
00:24:32.649 - 00:25:27.435, Speaker C: And you might be asking hey, what can I do with this hardware trust? Like right now we actually live in this kind of like world where there's more and more content that is generated by AI that people probably can't tell nowadays already. Now think about it. I think most of us have smartphones, either Android phones or Apple iOS phones. So for example, for every single Apple iPhone there is a secure enclave chip that is embedded within the device itself. And through that chip we are actually able to have a hardware root of trust. Now if I can extend that hardware root of trust to content that is actually created on my device, I can actually have this provenance chain. If I take a piece of.
00:25:27.435 - 00:25:39.515, Speaker C: How is it, if I take a picture or I type a message now I can say that hey, this content is actually generated by me or at least generated by this particular device.
00:25:41.375 - 00:26:09.585, Speaker A: Yeah, that's going to be extremely important. It already is starting to become important. I think we're already getting to that point. So is that something that's enabled like conceptually through automata or is that something that in practice that you think is going to happen? I guess my question is more around, okay, can you, you can extend these sorts of products into existing chips or do they have to be essentially new hardware that would enable and facilitate something like this?
00:26:10.565 - 00:27:12.401, Speaker C: So I believe this would happen with or without automata. But we want to be in the position where we can kind of like be part of this. Exactly, yes. Be part of this movement. So there's actually, there's actually a move, not a movement, a kind of like a group called Creative Authority CA that is kind of like, it's a kind of like web2 movement where device manufacturers, software vendors are getting together to kind of like work on a standard where we can embed all this kind of device specific information that is derived from. You can think of it as a hardware root of trust into content that is created like your camera sensors and things like that. This is my personal belief.
00:27:12.401 - 00:28:58.633, Speaker C: My personal belief is that maybe one, two years or maybe five years in the future you'll find this in all your digital cameras where if you take a piece of picture there will be this chip within the camera that will actually sign over the picture that proves that this image is taken by the device. If we are talking about a phone, then the nice thing about a phone is that it is more or less a general compute that is in a mobile form factor. We can actually write software that can make use of this hardware secrets or this trusted execution environments to perform certain computation when we are generating the image. For example, I can today I can actually write a camera app on iPhone. Might be a little bit difficult because of how locked down the API is, but let's say I'm able to Write a camera app that can have access to the sensor and the app can actually, when the user takes a picture, performs a signature over the image that is generated by camera sensors. And if you perform the attestation from the chip itself to the, to the application, to the operating system, to the firmware running on your device, then you can have, then how is it you can have the confidence that yes, there's nothing weird about this. This is a genuine Apple device that has unmodified loader, unmodified operating system updated to a particular OS version number.
00:28:58.633 - 00:29:42.637, Speaker C: It's using a particular, what's it called, Camera application, say XYZ camera app of a particular version. So all these are information that can actually be generated. But you might be thinking again, hey, then wouldn't that be like a kind of like downside for the user's privacy? Because right now this kind of like hardware tested information, a lot of my information is actually released to the public. Right. This is where like zero knowledge proof can actually come in. Where to prove to someone, I might not need to actually review that hardware information to that someone.
00:29:42.741 - 00:29:53.451, Speaker A: Yes, you can essentially provide the proof without showing the exact information. Just you're kind of combining both together. Yeah, makes sense.
00:29:53.643 - 00:30:36.885, Speaker C: Yes, exactly. And that is why at Automata we are also kind of like, we have actually implemented some VK circuits using RISC 0 to actually perform all this verification within the circuits itself. So users can actually have that option whether they want to take their attestation report, put it on chain and do everything publicly, or they want to use their report, generate a ZK proof for it, and then upload the proof to the, to the chain to kind of like show that they are, they are running certain computation on a genuine device. So there's this option.
00:30:38.795 - 00:31:06.225, Speaker B: I think just to add on that because Chin Wong just covered how to prove that certain content is generated, not generated by AI, but actually even for AI. There's also requirement to verify if certain content is generated by the correct version of AI, which is model provenance. Because it's hard to solve because there's really no mechanisms right now you have to trust the provider whether they're really running the GPT4 or GPT3 version.
00:31:06.265 - 00:31:08.045, Speaker A: You're right. Yeah, that's awesome.
00:31:08.465 - 00:31:53.379, Speaker B: Yeah, it's possible that they could just cheat and try to get you to pay more because you can't really differentiate from the quality. But actually we've seen this Nvidia has this new capabilities built in their latest version of GPU like H100. They have tee functionalities. If you couple it with a confidential VM, you could actually establish like very strong guarantees from the hardware all the way to the software stack. So you can literally trust that a particular model is actually running in that device on that gpu. So therefore the content created by it or the inference itself is also correct. You could just know that this is really coming from a GPT4 model instead of GPT3 model.
00:31:53.379 - 00:32:13.485, Speaker B: So it's really also useful. I mean, this is something that people have been trying. Even Nvidia is working with a lot of cloud providers to make it available. So people don't really have to build entire things because this couples really well with the cloud model because you could just start using them. It's also private environment running there.
00:32:15.705 - 00:32:52.045, Speaker A: This has been really helpful. I'm very curious if you all have thought about doing more general TEE education initiatives because you all have so much, you know, domain specific knowledge about all this stuff. I feel like there is not a lot of information out there. I feel like ZK has been really, really kind of. A lot of people have done a lot of public open discussions and research, maybe the same as for teas, but I just. Maybe I'm not in the right echo chamber. But I feel like it would be really cool to kind of see more of this, especially with you all kind of being so specialized and focused on this.
00:32:52.045 - 00:33:11.845, Speaker A: But I've already learned a lot and I'm hoping a lot of the people that watching kind of learned a lot as well. So that's just like a general thought. But before we dive into the next area, which is going to be more discussions around building the ABs specifically Gajesh, just want to make sure if you had any other questions or comments before we moved on to the next final area.
00:33:12.465 - 00:34:00.755, Speaker B: Sure thing. Yes. So what apps would you like to see people build with automata, which do not exist right now? I think from my point of view I would prefer people start building like a fairness applications because this is also what TE is good at. It's able to actually enforce certain policies, no matter it's public policy or private policy. So if it's private policy, then it means maybe it could be a private auction. Like a lot of parties could do this in a really fair manner. If it's public policy, that means, okay, this can be something like maybe a public good that really ensures that all the participants get a fair share of the interest or at least they could just contribute to this equally.
00:34:00.755 - 00:34:21.304, Speaker B: So this will be a very interesting application. Essentially people can build maybe DAO inside it or if in particular area that's interesting, they could also make use of this. So this will be a very interesting property. Actually at the very beginning we started with this, but we haven't seen really like good applications going on.
00:34:23.204 - 00:35:36.757, Speaker C: So for myself I'm actually kind of like, I mean to kind of like add on to what Darlene mentioned. There's actually a project called Cycles that is combining TE with MPC to do, to do things like, what do they call it, something like credit a kind of like a credit system within, within the webcam ecosystem. But I think for me what I really want to see is actually like decentralized game. Like it's, it's, it's, it's really like. So for me, I'm a gamer myself and what happens is that a lot of multiplayer games, you realize that once the company decides that hey, I'm no longer going to support the game and then that's it, that's the end of the game, we can no longer play it anymore. But if we actually have kind of like web3 games. Well, nowadays web3 games have a certain connotation, but that's why I'll call it decentralized games where users can actually have some way to establish like a kind of like a trusted server where no one can modify the data because it's running within a TE and then the clients can all connect to this server.
00:35:36.757 - 00:36:25.635, Speaker C: This server doesn't have to be hosted by one specific company. It can be hosted by anyone or by a DAO or by a community or even on a distributed network. And then you can have for example your old Diablo 2 type games where they can have a mini session 8 player connect to this server or you can have quick 2 kind of deathmatch kind of tournament games. I'm actually really excited to see more of this happening because TES provide you with this computation integrity and low latency, like high, what's it called, high efficiency in terms of computation and latency. So I think this is a very good use case.
00:36:28.495 - 00:36:59.395, Speaker A: Very cool. Well, now we're going to wrap it up, but I want to talk a little bit about your experience building an AVS or building as an avs. So a lot of the people that are watching are maybe new AVS developers. So if you had any like advice or suggestions around kind of what you learned in building in the eigenlayer ecosystem, but also building your network in this fashion because you know, when you all started building especially it was very early and you know, we've come a long way since then, still trying to make it easier and better. But yeah. Do you have any advice for any AVS developers?
00:37:00.295 - 00:37:30.513, Speaker B: Yeah, actually we start the like like talking to you guys I think started last year but like actually earlier this year we started looking at AVs, looking at SDKs. It's actually great to see that everything is open source. Also the documentation is very clear. So I wouldn't say we face any difficulty on like developing the AVS software. The node softwares also like later on like when we launch it. Also we receive a lot of support especially on acquiring the operators. So there are actually groups like helping us to.
00:37:30.513 - 00:38:12.535, Speaker B: I started introductions and connections with all the different operators. We were able to quickly get over 20 operators at the beginning and now slowly we grow to even 70 plus. This is actually quite amazing and we received a lot of support from everyone in the ecosystem. Also other peer AVs as well. They've been also sharing their experience, helping us to solve some of the issues, especially when is related to some of the newest development, all the new features because we're probably not following very closely sometime but we do get help and updates on those things too. That's really good experience.
00:38:13.435 - 00:38:44.185, Speaker C: Yep. Actually my advice would be like just go do it. Just like go clone the public source repository and then just, just start building and if you have. What is it called? Because I find that the community is actually very strong and there's a lot of help. So just dive into it. But if you have any problems that you meet along the way, ask and I'm pretty sure you'll get help and answers.
00:38:44.265 - 00:39:07.871, Speaker A: Yeah, that's the best life advice to just do it. Like professional advice, just do it. Don't procrastinate, just start building. You never know what's going to happen. You put one foot in front of the other and good things happen. Because I think a lot of times like what I've noticed is I get paralyzed by fear or by worry or by like think I'm gonna make the a mistake. So I just don't start.
00:39:07.871 - 00:39:12.235, Speaker A: But if you just start, you know, things just work themselves out a lot of times.
00:39:14.815 - 00:39:16.395, Speaker B: Yeah, totally agree with that.
00:39:17.775 - 00:39:31.987, Speaker A: Awesome. Well, this has been really great. Again thanks for both of you for coming on. I appreciate your time. I learned a. And I'm looking forward to other people learning as well. So if someone wants to learn more about automata, we have the Twitter account here.
00:39:31.987 - 00:39:36.695, Speaker A: But if they want to get started building or considering building, where should they go?
00:39:38.115 - 00:40:12.465, Speaker B: Yeah, actually the best source is still some of the like our own like ripple regarding AVs that we built because you could really get a sense like how TES could be integrated with this kind of AVS system. But in the future we'll be releasing SDKs for people who really want to just experience with the development of TE or without AVs. This thing could be also just running standalone but what they need is really maybe some attestations modules that could help them to verify on chain. So this will be all available in the future releases?
00:40:13.765 - 00:40:28.365, Speaker C: Yep. And if there's something that you want to know more, we have a discord if not most of our information can actually be found on our Twitter X. So yep, perfect.
00:40:28.525 - 00:40:40.325, Speaker A: Well thanks again for coming on. Thanks everyone for watching. This has been another episode of Infinite Layers. We'll be back next week with another one. If you missed part of this it'll be on our YouTube as well and we'll try to drop a couple of links there. So thanks.
