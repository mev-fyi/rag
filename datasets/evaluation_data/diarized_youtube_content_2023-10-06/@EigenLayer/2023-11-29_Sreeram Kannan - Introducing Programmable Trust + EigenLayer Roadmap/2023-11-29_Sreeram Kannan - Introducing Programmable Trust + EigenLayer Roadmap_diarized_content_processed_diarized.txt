00:00:00.650 - 00:00:30.280, Speaker A: Good morning, everybody. Welcome to the restaking summit. It's my real pleasure to welcome you all here. I'm Sriram. I started this Eigen layer project two and a half years back. And it has been really exciting for us to see all the progress from there. What I'm going to do in today's talk is try to set the context for why we are doing what we're doing, what is our vision for what we want to build, and how we can all partake in, actually.
00:00:30.280 - 00:01:12.718, Speaker A: Okay. How we can all work together in actually making this happen. As you can see, the subtitle of this talk is the coordination engine for open innovation. Really, this is where I want to give a little bit of orientation around this title. To start with, if you think about it, if you zoom out, there are only certain kinds of positive sum games. What's a positive game? When we are engaging in collective action, certain kinds of games are win win or positive sum. So that there's a net positive created out of these games.
00:01:12.718 - 00:01:46.254, Speaker A: And if you think about it, fundamentally, there are only two kinds of prototypical positive sum games. Number one is innovation. Innovation is when you take something and make a resource out of a non resource. Right? You can take air and you make spectrum, you take oil, you make energy, you take sand, and you make silicon. These are innovations that transform, like, one kind of a resource to another non resource into a resource. Really highly positive for everybody. And innovation is also like this.
00:01:46.254 - 00:02:34.886, Speaker A: That if I have an idea and you have an idea and we exchange it, both of us have two ideas, clearly, positive sum, unlike other resources, which are finite and you cannot create more of. So innovation is one stereotypical, prototypical posture sum game. There's another one which is also very powerful. Coordination. Coordination is when many parties come together and create something which is greater than the sum of the parts. Right? If they work together, if we all work together, we can do something which is much bigger than what we can all do, just going our own separate ways. And if you look at these two different types of posthum games, there's echoes of this structure everywhere that you look in working systems.
00:02:34.886 - 00:03:43.010, Speaker A: So you can think of like, these two structures interlace and work together with each other in very powerful ways in different examples. And one example is, let's say you take a country like the United States, or any successful country, for that matter, you'd see that basically the government acts as like a coordination layer. On top of which there is a free market, a competitive economy, which can be built on top of it, which is akin to open innovation. And what we are aspiring to here is to do this for digital platforms, essentially coordination via bringing decentralized trust. Who brings trust? Trust is created through this decentralized collective. In our vision, Ethereum and Eigen layer work together to actually create this. On top of which, anybody can build arbitrary new digital platforms which can compose with each other.
00:03:43.010 - 00:04:33.950, Speaker A: And in our ecosystem, we call this avs, actively validated services. Or you can also think of these as like a decentralized version of software, as a service that we see in the cloud. Okay, before I go into explaining what all we can do with this kind of a platform, I'm going to start with the basics, like for some of you who may not be aware, just a couple of minutes. So in Eigen layer, what we do is we bring together a variety of parties. So I mentioned being a coordination layer. What does it mean to be a coordination layer? You need to bring together different kinds of parties that work together to actually achieve a certain goal. And in our case, it is mainly the first side of this is stakers.
00:04:33.950 - 00:05:07.498, Speaker A: So what happens is, in Ethereum, what you do is you go and stake your eth. Stake your eth. What does it mean to stake your eth? You put it into a contract and then make a promise that you will hold to the conditions and the covenants of the Ethereum protocol. What Eigen layer does is to make this much more expansive. So we call this restaking. Restaking is you stake your reit, and then you're adding on additional conditions, taking on additional covenants, making additional promises. That's what is now popularly called restaking.
00:05:07.498 - 00:05:47.334, Speaker A: In fact, we are calling this the restaking summit. But if you want to be really precise, you'd call it permissionless programmable staking. That's really what it is. What do I mean by that? So you take the ETH that's staked in Ethereum, and then subject yourself to additional programmable sets of conditions. So when you stake it into Eigen layer, you're basically saying, hey, I'm going to run any kinds of new middleware services, actively validated services, whatever we want to call it. But essentially what you're doing is you're saying, hey, I'm taking my eth. And normally when I'm staking, I'm promising that I'm running the Ethereum protocol correctly.
00:05:47.334 - 00:06:53.970, Speaker A: But now I'm going to promise that I run all these services correctly. Okay? And when somebody wants to build an abs, essentially we are talking about building two things. Number one, they can build arbitrary software, a container in which they can house and deploy arbitrary software, and a smart contract. So Eigen layer itself is a smart contract in Ethereum, but it allows anybody to build new smart contracts that talk to the Eigen layer contract. Any new middleware or avs can build a new smart contract that talks to the Eigen layer contracts. And the avs contract can specify the payment condition, the slashing conditions, and the registration conditions. Who can register? How much do they get paid, and how much do they get slashed? So that's the overall structure of how you build how we are able to use agonlayer to actually take the underlying decentralized trust from Ethereum and then supply it to any kinds of new middlewares or services that can then be built on top.
00:06:53.970 - 00:07:36.526, Speaker A: You can think of this as the kind of open innovation layer. Anybody can build these new kinds of services. Okay, so in the last slide, I call this permissionless programmable staking. Right? Why is it programmable staking? Because you're staking, and then other people permissionlessly can create these middlewares and services that can consume your staking and then create new kinds of services based on that. So you can think of Eigen layer as being a paradigm for programmable trust. Okay, so at the base of all of this, we have the Eigen layer shad security system. Another way of thinking about it is it's a shared security system.
00:07:36.526 - 00:08:30.462, Speaker A: Why are we calling it shad security? The same stake or the same pool of validators are actually sharing that security to a variety of different applications. So that's another model for thinking about this. There are really two things that power this shared security system. On the one side, we have the ETH staking people can stake ETH, and this provides a certain amount of economic security. Economic security means, you know that if your service is not run correctly, you will be able to slash a certain amount of ETH. There's also a certain amount of decentralization because you're borrowing the same set of node operators that run something like Ethereum. You can borrow the decentralization, and this gives you a certain amount of collusion resistance, that these are distinct operators, neutral set, which is actually participating to validate your service.
00:08:30.462 - 00:09:19.200, Speaker A: So these are the two dimensions of programmable trust that are created from the Eigen layer ecosystem. And now what can you do with this? You can actually start building a variety of different things. And one way to root this thing is to take an analogy from the pre crypto or the web two world. And you can think of in the cloud era, if you think back to 1995 and you want to build an application, you have to build your own server stack. You have to build your own authentication, payments, database, everything yourself, as well as building whatever application you want. This is what you would have done if you wanted to do web application development in 1995, in 2023, that's not what you would do. You'd go basically use a cloud service.
00:09:19.200 - 00:10:20.786, Speaker A: There is a bunch of software as a service solutions, SaaS solutions on top, like OAuth, like MongoDB, like stripe, all these things. And then when you want to build an end user application, just concatenate these pieces correctly and then you can build whatever application you want, leading to a much higher velocity of innovation. How can we kind of see an echo of this in the crypto world? So one can start thinking about what kinds of the middlewares and avss, the actively validated services that can be built on top of wagonlayer as something akin to these SaaS services. And then end user applications can then build on top of these services. So what I'll do next is give you a little bit of idea of what kinds of services can be built on top of Wagalayer, so you can categorize them in many different ways. Here are a few. So number one is roll up services, like categories of services.
00:10:20.786 - 00:11:06.062, Speaker A: So if you think about the Ethereum roadmap, one of the biggest things going on in the Ethereum roadmap is the rollup centric roadmap. The idea that there is going to be lots of roll ups. These roll ups offload computation from Ethereum and are able to therefore scale the whole Ethereum stack. And in the rollup era, there's lots of roll up adjacent services that may be interesting, and we're seeing a bunch of them being built. We are building the first one ourselves, Eigenda, the data availability service. The way to think about this is when you're offloading computation, you still need a place to publish the inputs and outputs of said computation. If I publish the inputs and outputs of the computation, anybody else can then verify that I'm doing the computation correctly.
00:11:06.062 - 00:11:59.122, Speaker A: So that's called a data availability or a data publishing system. We're building eigenda as a data availability system using Eigen layer, but there's lots of other roll up services that we're seeing emerging on the Eigen layer ecosystem. For example, rollups have a single central sequencer which orders all the transactions. Can we instead build a decentralized sequencing infrastructure on top of Eigen layer rollups? Take a certain lag before they settle onto Ethereum. You may want faster bridges and there is a variety of different bridges being built on Eigen layer how to handle the mev that accrues in the rollup ecosystem. You may want to build all kinds of interesting mev services. For example, I want to say build an encrypted mempool for a roll up.
00:11:59.122 - 00:12:48.914, Speaker A: So which means you need a bunch of nodes. These node needs to participate in some kind of threshold cryptography so that when you send a transaction, no one node is able to actually see the transaction, it's encrypted. But then after the transaction is included then you can actually decrypt it so you can build MeV services on Eigleair. And another category that we've seen emerge is watchtowers. If you have not one or two or three optimistic roll ups, but thousands of optimistic rollups, which is the era we are going towards, you have to make sure that there are people who are actually watching what's going on in these roll ups and trigger a fraud alert or a fault alert when such a thing happens. You need a neutral set of nodes to do this. So again, a new category that we're seeing on agiler, so this is roll up services.
00:12:48.914 - 00:13:46.194, Speaker A: Another category which I'm quite excited about personally is the family of coprocessors. How do you think about a co processor? You're sitting on Ethereum and then let's say you want to run an AI application and then get the output of such AI application onto Ethereum. This would be an example of a, you know, you are on Ethereum, you're in the EVM programming environment, but I want to access running all kinds of other outputs. Maybe you want to run a Linux machine and a program for which you made a commitment. And then you want to say that hey, if you run this program, then this is the output and then bring it all back to Ethereum. Be an example of a core processor. You want to run a database, a SQL query on a major database, and then you want to say the inputs, the outputs of that SQL query, you want to bring it back to Ethereum, you want to run like a ZK service and then you want to bring the outputs of such cryptography.
00:13:46.194 - 00:14:17.200, Speaker A: All of these could be examples of coprocessors we're seeing. Many of these show up on Eigen layer. The next category is new kinds of cryptographic methods. I'll talk about the Eigen Cert service, which is a new service that we are building later. But there are things like trusted execution environments. I want to run like a trusted execution environment committee. A trusted execution environment is a hardware device which has certain kinds of.
00:14:17.200 - 00:14:58.650, Speaker A: There is a little bit of trust assumption in the manufacturer, like intel and AMD and Android. All of these different hardware manufacturers have different te environments. But to be able to access TE networks on Ethereum is a very interesting use case. Things like secret sharing. I want to take a secret and encode it and send it through the network so that nobody has access to the secret, but it's spread all through the network. More general version of that is the secure multiparty computation or fully homomorphic encryption. We're seeing all of these new categories emerge on Eigen layer.
00:14:58.650 - 00:15:55.882, Speaker A: There's also other kinds of things that one can do. Bring proofs of various kinds into the Ethereum ecosystem. What kinds of proofs am I talking about? Suppose you want to know where a node operator is located, a proof of location. You may want to get an attestation that basically promises what the proof of location of a certain node operator is. And one way to do it is have a decentralized group of nodes which ping each other through the native peer to peer network to actually then figure out what the ping latencies are. There are systems like this being built proof of mesh in hood, which is a new kind of idea from automata, which is basically the idea that I want to know how many distinct devices that somebody is logging in from a distinct machine, a distinct Apple phone or a distinct Android. You want to have proofs of identity.
00:15:55.882 - 00:16:42.570, Speaker A: I want to log into a HTTPs server and then get the authenticated certificate into Ethereum. There's a bunch of protocols like reclaim building this. All these other services are things you would want, irrespective of the fact that these are particularly Ethereum stakers. They need a certain amount of economic security, they need a certain amount of decentralization. But there's also the fact that because we're doing restaking of ETH, it's the Ethereum block proposers that are participating in the ecosystem. And you can start doing interesting things on the Ethereum side. For example, managing MeV on the Ethereum l one, you can start thinking about event driven actions whenever certain sets of things are triggered.
00:16:42.570 - 00:17:37.018, Speaker A: You have to actually, for example, whenever there is a liquidation, then that liquidation has to be taken. And these kinds of event driven actions, for example, improve the usability of these platforms massively. Because imagine that you're running a DeFi platform and you need to calculate how much over collateralization you need. It's basically the time to liquidation, which is actually determining the over collateralization factor. And by reducing the time to liquidation, you can actually get very tight systems. Another system which is newly proposed is the idea of based sequencing, where from Justin Drake, the idea that ethereum l one itself can actually do ordering of transactions for roll ups. But when you're doing that, one of the things you may want to do is how do you get like fast pre confirmations.
00:17:37.018 - 00:18:22.918, Speaker A: And if there is Ethereum staked by the block proposers on Ethereum, and they are restaked on agile, then you could basically start doing things like pre confirmations. They make a certificate that hey, I am going to include your transaction and send it to you right away in an instant. And then later if they don't, they get slashed. So these are the different examples. This is not an exhaustive list, but the types of things that we are starting to see on eigen layer. And the way we think about it is the systems that build natively on Eigen layer are like the SaaS services, which means they are infrastructure pieces. And end user applications will then concatenate a bunch of these pieces to actually build usable applications.
00:18:22.918 - 00:19:04.486, Speaker A: And we are talking about how do you take crypto to a billion users. One of the things you have to think about is what set of functionalities do they need? And that's where we think that Eigen layer will play a role, is at the core functionality layer. And then applications will just mix and match these different pieces to then get the end user functionality that you want. Okay, so that's a brief overview of what the scope of the project is. When we are talking about to be the coordination layer for open innovation, this is really what we mean many of these things. We had no idea that these could be done on eigleair. So these are all emergent.
00:19:04.486 - 00:19:53.466, Speaker A: Lots of people here have actually come up with many of these different things. And it's amazing for us to just sit and see that once you allow this coordination layer, what all can then emerge out of it. Okay, so in the next couple of minutes, what I'll do is briefly touch upon what is the fundamentals of the shad security system. When people think about restaking, they're thinking about something like, hey, I'm reusing the same eth, some kind of leverage or some other concept. I just want to dispel some of these myths here. So what is the core functionality of what Eigen layer is actually doing? The first point is that shad security is strictly better. What do I mean by that.
00:19:53.466 - 00:20:41.978, Speaker A: So let's forget that we are restaking from Ethereum to Eigen layer. Let's just imagine that inside Eigen layer there's a certain amount of each stake, but it's supplied to all these services simultaneously, right? So one way to think about it is let's say you have $1 billion restaked to 1000 services. This is one world, another world in which each service has $1 million staked. Which world is better? Right? To attack any one service, in the other world, you just need 1 million. Whereas to attack any one service, when the same pool is restaked across all these services, you need 1 billion capital as an attacker to go and attack any one service. There is a certain rigidity, a certain hardening of security. When you pool security together.
00:20:41.978 - 00:21:14.162, Speaker A: We see this all through the place, right? Like, this is why nations coordinate. You don't have city, cities don't have armies, nations have armies. Sometimes even like many nation states coordinate to create alliances that actually work together. It's exactly the same phenomenon. Shared security is strictly better. There is a little bit of downside in that, which is if you had segregated security, you have something attributable to yourself. Each service has that 1 million, whereas in this you get a little bit of mixing together, a pooling, which is good.
00:21:14.162 - 00:22:16.034, Speaker A: But if you also wanted attributable security, what we're doing in ionlayer in the upcoming version, not in the version that is already live and launched, but in the upcoming versions, we are working on a design where you can also get attributable security. What do I mean by that? If you have $1 billion stake, there's potentially $1 billion to be slashed and some service, maybe there's a bridge which says, hey, I'm very, very security critical. If my service goes down or something gets compromised, I need at least $100 million of insurance of the slashable portion. So instead of taking the slash portion right now, what we do is we just burn it like Ethereum does in our v two. What we'll do is we can actually give you a portion of that slashed funds and the ability to buy. This is called insurance, and you pre buy it. And now you not only have the pooled security to attack any one service, you need to be able to acquire the $1 billion of capital.
00:22:16.034 - 00:22:54.530, Speaker A: But if your service gets attacked, you know how much you can slash. Uniquely, this insurance is not over provisioned, so it is always guaranteed that you will be able to slash that much. So that's a superpower. So you can both get the benefits of pool security and the benefit of attributable security. You can also start seeing that there are economies of scale, which is if you're using an application, the application is using several avss built on Eigen layer. Then you don't have to pay five x. If you're using five services, then you don't have to buy insurance separately for each of these five services.
00:22:54.530 - 00:23:16.998, Speaker A: You just buy insurance once on Eigen layer. So there is an economy of scale. And then finally there is an elastic scaling of security. Amazon is called EC two elastic compute, right? Which is I don't know how much compute I'm going to need. I'm going to go and buy it from a common pool. And there is randomness of how much compute is needed by different people. They go and buy the portion of compute that they want.
00:23:16.998 - 00:23:46.578, Speaker A: There is a similar phenomenon in eigen layer, which is the elastic scaling of security. There is a large pool, $1 billion or whatever amount totally sitting as security. Now, whenever like a different services, there are lots of different services. Each service needs a randomly varying amount of security. Why? Because I'm running an e to USD bridge. When there's a e to USD price volatility, people might want to use more of that. There is a BTC to solve like bridge or something else.
00:23:46.578 - 00:24:35.010, Speaker A: Also sitting on top of Eigen layer. Then you want different amounts of security for each of these across time. And by having a single layer through which you can buy security actually makes it much better. Okay, so what I'm going to do from here is just go through the, let me just run this through. I'm not going to talk about all these things. I want to basically go here, talk about our timeline of what we are building and when we are going to deploy it. So the, right, so earlier we had divided the Eigen layer launch roadmap into three different stages.
00:24:35.010 - 00:25:32.200, Speaker A: And stage one was stakers, stage two was going to be operators, and stage three was going to be services. And instead we've redivided it now in our current launch plan in a different way. Stage one, which is already live, is Eigen layer staking like you can restake your ETH natively or using liquid staking tokens. Stage two, instead of only launching for operators, what we're trying to do is we're going to launch the entire ecosystem Eigen layer. You can have stakers, there's operators, people can launch services, Eigenda, our data availability service, all of them will go live except the economic part payments and slashing, except the economic part everybody, all the different sites can come together and start creating useful services. And in stage three we are going to add payments and slashing. So that's our roadmap currently, and we are on the stage one is already on the main net.
00:25:32.200 - 00:26:09.280, Speaker A: We will have a stage two testnet coming soon, definitely this quarter, hopefully much earlier, which will go on main net next quarter. And then the stage three follows that. So that's the current launch roadmap of Eigen layer. We're really excited about all these different new things that can be done across the different sides of the ecosystem. Stakers, operators, people building new avss roll ups, consuming Eigenda. Lots of interesting things happening there. You'll hear about some of them today.
00:26:09.280 - 00:26:13.100, Speaker A: Thank you so much for listening to the first talk.
