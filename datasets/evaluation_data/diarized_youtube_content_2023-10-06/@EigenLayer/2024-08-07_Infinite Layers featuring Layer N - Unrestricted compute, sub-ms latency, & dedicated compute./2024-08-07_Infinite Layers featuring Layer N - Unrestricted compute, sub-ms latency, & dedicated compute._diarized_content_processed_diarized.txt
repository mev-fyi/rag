00:00:10.920 - 00:00:28.850, Speaker A: Okay, we are back today with another infinite layers. Today we're joined by Dima from layerin. Today we're gonna be diving into what layerin is, you know, how it was created and a lot of the thought process behind building it. And we're here with us today we have Dima. So do you wanna give us an introduction to yourself?
00:00:29.180 - 00:00:58.490, Speaker B: Yeah, absolutely. Pleasure to be here. Thanks, Nader Gash, for inviting me. So essentially my introduction before crypto, I was focusing on Oya research, neurotech research, and discovered crypto early 2021 and went essentially full time, banning everything that I was working before. Started my building at Dex and Solana together with my co founders. And then eventually it came to decision that the best thing to build is layrante, which I can talk more about later.
00:01:00.790 - 00:01:05.290, Speaker A: So you worked previously in this industry for how long?
00:01:06.390 - 00:01:24.610, Speaker B: So essentially since 21, it's been like more than three years now since I've been in crypto. And layer n specifically, I think we found that we started in March 23. So I would say two years prior to starting, layer n was working on different things in crypto.
00:01:25.390 - 00:01:32.730, Speaker A: All right, so if someone asks you for the elevator pitch or like a 62nd overview of what layer it is, how would you respond to that?
00:01:33.270 - 00:02:22.190, Speaker B: Yeah, I mean, like, the shortest version is like, build applications with infinite compute and restricted composability and latency. The more longer ones is that like, essentially our goal is to figure out how to build a roll up where each application can have their own dedicated compute, their own dedicated sequencers, their own dedicated resources to be able to scale to whatever level they need. Which means that each individual app in layer end can have hundreds of thousand transactions per second. It can have minimal latency while being able to compose with each single application. So it's essentially taking this idea of a single environment or single mega computer and scaling it to hundreds of machines, scaling to hundreds of resources. So you can have this super performing layer where you can forget about all of the steps that are usually associated with web3.
00:02:22.970 - 00:02:27.910, Speaker A: So it's basically a shared compute platform. It's kind of like a shared network.
00:02:28.370 - 00:02:29.234, Speaker B: Exactly.
00:02:29.402 - 00:02:30.954, Speaker A: Solana or something, right?
00:02:31.122 - 00:03:31.798, Speaker B: Yeah. So essentially the difference, let's say, between Solana evms of the world is that they're always run on a single vms, they're always run on a single computer. And we are trying to figure out, like, hey, how can we do it better? And essentially through sharding of like, applications to different machines, like, we can make sure that a Dex in layer n can have their own sequencers they can sequence transactions separately. They can process all of this separately, so that way you don't have to worry about congestion. So you can build whatever applications you want compared to, let's say like a EVM or like SVM, where I need to think every single day, like how much computer can I use, like how what our other applications are doing, right? Even like taking a look at Solana right now and you realize like, oh damn, I'm having trouble lending my transaction. And if I'm building, let's say like an order book protocol, like, my market makers are getting screwed. If I'm building a lending protocol, I need to worry about liquidations and a lot of other factors which essentially get a lot more complicated.
00:03:31.798 - 00:03:53.600, Speaker B: When you have this single vm environment with us, you can build the Dex as a single application, have their own sequencer, but at the same time, like this, Dax can send messages to every single other application within layer and every single other, like, so to speak, app or EVM, et cetera. So that way you have the perfect environment which is only possible to achieve those architectures that we provide.
00:03:54.100 - 00:03:58.760, Speaker A: So you all are not EVM, correct. You all have your own vm.
00:03:59.140 - 00:04:31.265, Speaker B: So that's the nice part. I think we realize that a lot of developers are solidity developers. It's really hard to tell everyone, hey, come learn rust. Hey, come learn whatever language we have. What we offer is one an environment where you can like come in and build an application. So we call it XVM, and we also expanding that environment to other programming languages, such as python, typescript, et cetera, et cetera. But we also realize that like 90 plus, probably percent of crypto developers are solidity.
00:04:31.265 - 00:05:04.816, Speaker B: So what we offer to them is that they can spin out their own EVM, like we are spinning out our own EVM platform as well. So we do have an optionality for developers to just continue using solidity, but also offer an alternative because they want to build something more performant, or they just know rust more than solidity. They can come build their rust program as well. So that's our goal, is to be as unopinionated as possible around like, how developers build their application, but more so, like, the ideas of, like, each developer needs their own dedicated compute.
00:05:05.008 - 00:05:15.810, Speaker A: So if someone was to start building on layer end today, what would be some of the languages and vms that are supported, like at the moment versus what will be supported in the future?
00:05:16.190 - 00:05:50.390, Speaker B: Yeah, so right now we support our own custom VM, which essentially uses rust, as we call it, XVM. So that's like part one of cohort of our developers who are building on top of it, and we are right now preparing for a public release EVM environment. So people can either write like an app specific applications on top of EVM environment, or launch on our own EVM. They just want to be part of the ecosystem. So essentially for developers, like I can write either they're in solidity rust, and I don't need to worry about liquidity fragmentation on the network.
00:05:51.570 - 00:05:58.990, Speaker A: So I guess what is the current status of the network? Are you all on Testnet Mainnet? And what are some of the timelines that you're working towards?
00:05:59.410 - 00:06:40.662, Speaker B: Yeah, I mean, essentially right now we are in an auditing stage. We are right now auditing our first XVM. We call it Nord. And that application aims to bring high performance Dexs up on chain. And when I'm talking about high performance, like the way we measure Nord's performance is not against existing platforms in crypto, but try to measure it against Coinbase, finance, Nasdaq. And really the goal there, like how we can build the fastest exchange on chain and make it essentially the place for people to trade. And with that product, we aim to launch with a few partners, like for building exchanges such as nos, such as SUSE, and we have a couple of other products in the pipeline.
00:06:40.662 - 00:07:11.870, Speaker B: And the goal there is, every crypto platform aggregates around dexs. So we need to make sure that our dexs have the best technology, has the best liquidity, is the best resources. So that's like the phase one of like what we are aiming to launch. But the second phase is like focusing more on the vm environment and making it more accessible for all the developers, because not everyone would want to learn rust. Not everyone even need like this complexity. And that will be like our next stage of like launching EVM environment. And we already have a couple of people building on top of dedicated EVM nodes.
00:07:12.330 - 00:08:22.030, Speaker A: Nice. Yeah, I think if you can support both rust and solidity, you've kind of hit the sweet spot and you've captured the large majority of the developer market in mind share, because like, you know, obviously solidity is not going anywhere, but rust is definitely growing. And I think often a lot of the, from what I can tell, like higher quality advanced engineers prefer rust. And, you know, so therefore, yeah, you have a good capture there. I think one of the things that got me excited when I started working at Eigen layer and looking at some of the products being built on Eigen Daev, that you all had this demo of a Dex and the real time UI was live on testnet, and all of the transactions were being simulated there. And it was just really, really high throughput. Can you talk about some of the focus in terms of getting it to be something as close to something like Coinbase, Nasdaq, or real time and high throughput as possible? Like, what are some of the metrics that you're kind of looking to emulate and benchmark?
00:08:22.890 - 00:09:08.158, Speaker B: Yeah, yeah. I think, like, recently, a lot of teams have been focusing on, like, how we can build the fastest evms, the fastest SVM. But I think, like, that target of, like, trying to just, like, build the fastest general environment is, like, really difficult and might not be the best one. Because if I'm trying to scale, like, SVM to, like, a million transactions, like, there's so many unknowns of how people are going to use this quantum. Solana spent two years trying to patch it up to make it sure that it's viable. Because essentially we had so many situations in Solana where no one expected this to happen, no one expected that people will be using the chain they're using. But our core idea is that if we focus on specific use cases, it's a lot easier to optimize their application.
00:09:08.158 - 00:10:03.404, Speaker B: It's a lot easier to figure out how do I build my platform in such a way that it can scale a lot more easily to hundreds of transaction a second. So our focus is like, how can we provide, like, the most bare metal like environment for people to figure out, like, hey, I'm building this application. I have these types of transactions. I have this type of computational needs, and this is how I will scale. Instead of, like, trying to chase this idea of, like, buildings, like, the big, big vm, like, capable of handling, like, all of the applications at the same time. And the reason as well is, like, looking at, like, how web two scales. Like, it's not like everyone was trying to figure out how do we build a computer which can handle, like, coinbase, finance, et cetera, on the same platform, right? Like, that's something that no one has done in everyone tried to figure out, like, how can I scale individually my application? And that's what we already had it, and that's what we focused on.
00:10:03.404 - 00:10:32.020, Speaker B: And in general, like, the motivation as well as, like, hey, like, s evm, let's say it's like the sandbox of this size, like, of what's possible to do. SVM is probably larger because higher TPs. And our question is, like, how can we make it like, 100 x bigger? Like, because I think if we provide environments which can handle like 1 million transactions a second, the sandbox is so much larger that we can see new applications appear, new use cases being applied, and that's like essentially like our thought process there as well.
00:10:32.960 - 00:10:43.540, Speaker A: So what is the, like, engineering team look like at layer in? And how has that been built over the, over the past year? And, like, how many co founders do you have?
00:10:44.690 - 00:11:44.160, Speaker B: Yeah, so essentially you're a team of like three co founders and essentially two of us, like more and bdside, including myself. Like, I used to code a lot, but now, like, definitely a lot less time to do that. And we have like a brilliant CTO who is leading charge of like, all of our technical development in terms of engineering talent. Like, we have like incredibly talented team from backgrounds like, such as, like Cisco, VMware, like Dfinity, a lot of postmodern protocols background as well necessary, have a really well packed of engineers with decades of experience who joined our team. And we've been gradually scaling it since our first seed round announcement. And really the philosophy has always been like, how can we attract the best sell and how we can work as the best people, how we can build something that will extend the test of time for decades to come. Definitely been very picky and very selective in that process, but really happy with having like, really amazing people join our team.
00:11:46.020 - 00:12:29.708, Speaker A: Yeah. Speaking a little bit to some of the stuff we've talked about, but also going off course a little bit. I've seen a lot of discussion around, you know, apps versus infrastructure, and, you know, people are hyper over indexed on either, like supporting one or the other or both, I guess, even in some circumstances. But I find it interesting because like, I used to be more, okay, we have way too much infrastructure. We need more apps. The more I learned about actually building an app, the more I realized that a lot of the use cases that we'd like to support are not possible yet because the infrastructure isn't there yet. And the people that are building out high quality ux are essentially often making a lot of trade offs.
00:12:29.708 - 00:13:17.898, Speaker A: They're doing a lot of hacks to make optimistic updates on the UI, to make it feel faster than it actually is, and things like that. So I think I've gotten to the point, the realization that we need, you know, we need both. It's really challenging to build a high quality app today, but if you can do it, you can probably do really well. But if we look at the infrastructure in the web two space and the, you know, types of things that are being built there, and the speed and the scale at which, you know, that's happening. You know, we need a lot of block space, and we need a lot of improvements in speed and latency and throughput. So I think stuff like this, you know, is fitting in exactly there, but we need more of more of them. Like, I don't think we need just one or two or five.
00:13:17.898 - 00:14:08.770, Speaker A: I think we need probably hundreds of shared compute blockchains, like, layer in. We also need application specific roll ups that are high throughput and low cost. And you put all that together, and then you have this amount of block space and hopefully compute that can support those types of use cases. But then you get to the next question is, like, what is the interoperability story? Like, start looking, like, there. So I'm kind of curious, like, what are your thoughts around that question? I know Vitalik tweeted something out yesterday or the day before, saying, like, we're a lot closer than a lot of people think on making interop actually feel good in terms of, like, the UX, but, like, what is your, what is your thoughts around the fragmentation and the fix for that? Fragmentation?
00:14:09.430 - 00:15:02.682, Speaker B: Yeah, maybe. I guess I feel a bit more pessimistic than Vitalik around how close we are in terms of interoperability. I think the biggest challenge around interoperability is that you have a lot of big players, big roll ups, and now you have hundred roll ups. Right now we're about to be lodged hundreds of roll ups. And so the question is, how do you get everyone together, and how do you essentially get all of these people to come up with a single standard and apply to it? And I think when you have especially optimistic roll ups, you need arbitrary and optimism. Figure out a trust, right? Like, model, like, of how do we trust each other? How do we work together? And then you have people with different proving systems, like, and then you ask, like, one ZK roll up and another ZK roll up, whether they are comfortable with trusting each other's, like, backhand and hardware. And you know that, like, each of these roll ups have a withdrawal window.
00:15:02.682 - 00:16:07.676, Speaker B: So with all of this, like, essentially challenges, it feels like it will take a lot of time for a lot of this, like, to come to fruition, uh, for a lot of it to mature. I think Togrul had, like, a whole, like, bullet point list of, like, how many things we need for, like, ZP Rolex to truly decentralize. And it was like, hey, we need, like, different probing systems. We need XYZ. And it's like, it will take time and so what's the solution in the interim? I think, like, there's obviously a lot of bridging solutions which help a lot with that. But our thought process is that like, hey, like what people want in terms of like blockchains, routes is like, what you mentioned is more throughput, more scale, and how do we work on that? And now we see that a lot of app specific roll ups are essentially leading the charge of next generation applications. And with that in mind, our thought process is, what if we just focus on our own ecosystem? What if we focus on our own network and make sure that the interaction there is as seamless as possible and whatever comes to fruition on ethereum side, you'll figure out how to integrate it.
00:16:07.676 - 00:16:48.130, Speaker B: We will watch, like, in terms of how it works, but our goal is that like, each single application, like, only needs like milliseconds to comp to compose with another application. So that's like essentially our target and that we want to essentially see like to counterfeit right now and take it from there. But I think like the global composability layer across all rollouts, I think it will take like a significant amount of time. But all these like little clusters, I think like in layer end, it will be an amazing experience. Super chain plans to come up with something next quarter, or like in the next quarter after that, and you have like elastic chain aggregation layer, but in the interim I think, like those like clusters will be dominating.
00:16:51.190 - 00:17:02.810, Speaker C: Awesome. So I had a question, like, what would be a flow for someone who wants to build like a game? So someone wants to build chess on layer and what would be their flow?
00:17:03.670 - 00:17:41.698, Speaker B: Yeah, essentially right now our material is not fully open source, but the goal is to open source all the tooling by the end of this quarter or year. And essentially from there it will be super easy. You don't need to talk to me. You don't need to talk to anyone on the team. Maybe you don't like us, but just likes what we're building. But today it's like if you reach out, we can offer you a stack to build an EVM application and have a dedicated VM environment for you to build your game with unlimited compute and all the nice metrics that are available to you. Or like, you can decide to build a rust application which is going to allow you to optimize it a lot better.
00:17:41.698 - 00:18:22.074, Speaker B: It's a lot more closer to the metal, so there's a lot less additional blockchain infrastructure in the middle. So that's essentially another thing, but otherwise it will not be hard for you to adapt to build on there. And if you build Solana rollouts, you'll find yourself familiar in XVM environment, not Solana rollout. There's a lot of applications. If you build an EVM, you'll find yourself familiar in the EVM environment. So there's no significant activation energy to come build with us, given whatever background you have in blockchain development. But what I would say is nice is that coming to layer end, like, you don't need to worry about gas, you don't need to worry about compute units, fear from salon, and you can just focus on your use cases.
00:18:22.074 - 00:18:30.390, Speaker B: And you don't even need to worry about other applications, like having some events which will destroy your user experience in the meantime.
00:18:31.970 - 00:18:39.750, Speaker C: Gotcha. And sorry, I just want to like. So layer n is a stateless Vm, right?
00:18:41.370 - 00:19:06.980, Speaker B: No, not necessarily. So essentially it's like XVM is very similar to like any other VM. Like, there's a stage, there's like all the instruction, et cetera. It's just like geared towards like, being as customizable as possible and as like bare metal as possible. Because the goal is like, not to let other applications to launch their roll ups, but more so like, be the place for a single application to launch their app and use EVM and SVM for other environments.
00:19:07.880 - 00:19:16.220, Speaker C: Gotcha. That makes sense. And what are some applications you'd like to see people build in layer and six months?
00:19:16.800 - 00:19:59.746, Speaker B: Yeah, I think, like, what I'm like personally, the most interested one is like, try to see people like, take a lot of ideas from like years ago or this year and try to figure out like, how we can actually make them functional. I think, like, Defi had a ton of different people trying different ideas, but essentially what came out of it is that people realized, hey, it doesn't work. And I think there's more compute with lower latency. With no gas, you can iterate a lot better. And that's what I'm really excited about. Take for example, amms. I think amms are not great for market making or providing liquidity for the end user who is using to permanent loss, but who is more computer, more data, more latency.
00:19:59.746 - 00:20:43.668, Speaker B: I can market make any market with lot more efficiency and actually make money, and we can actually replace, like, let's say, Vintremu jump in the blockchain ecosystem by autonomous protocols. Another one is like, let's say different vault systems, which are using very primitive functions, like to try to provide yield to people. This can also be auto innovated. The same comes to games. And I can go on with this list more and more. But essentially, I think, like a lot of ideas that we've tried in the history of blockchains that can be revamped, relaunched and become sustainable, provide real revenue. And from there on, we can also even start thinking about what other things we can do, what other things that we can innovate on.
00:20:43.668 - 00:20:58.890, Speaker B: And I just hope that essentially it was there. And we revived a lot of hype around Defi, around a lot of this applications, and also can try a lot of different use cases in gaming deep and et cetera, where like, people care about cost as well.
00:21:00.510 - 00:21:07.330, Speaker C: Gotcha. And what are, what are some applications which do not exist right now which you would like to see?
00:21:09.310 - 00:21:50.320, Speaker B: Yeah, I mean, I would say, like, I think the kind of touch upon it, like, I think, like market making robots and permissionless vault systems which are like fully on chain, that could be really interesting. Like from incentive perspective, I think a lot of any other protocol around risk management, I think having essentially better lending protocols, better protocols to even provide under collateralized, I think some people that can exist on their end because of a lot more efficient risk management systems. Super excited about that. Really excited about a lot of gaming potential use cases where people can try out whatever is built in about two built in web, three, without like any issues.
00:21:51.420 - 00:21:55.080, Speaker C: Gotcha. And what has been your experience building with Eigen layer so far?
00:21:55.580 - 00:22:30.890, Speaker B: No, it's been amazing. I think, like, going back to our stories, like, we believe this, like, idea of like, hey, we need abundant DA, we need abundant data to essentially function. And I think, like, we, even before knowing about Eigenvalue, like, hey, what if we close data to Solana? What do we post data, like, anywhere else? And essentially then a friend introduced me to free ROm and I was like, hey, this is exactly what we need. And it was really interesting experience of finding it out before even knowing about it. You were looking for a solution and you finally found it.
00:22:31.990 - 00:22:32.890, Speaker C: Amazing.
00:22:33.310 - 00:23:09.110, Speaker A: So if someone is using layer in and wants to interop with other infrastructure or other developer tooling or other things that we're just kind of used to, like wallets and block explorers and stuff like that, does layer in require a different wallet or can they use stuff like metamask? What does that look like? Because I think, like, when you look at the benefits often of building a roll up or an l two or just inheriting an existing vm, a lot of the value proposition is that you can kind of reuse a lot of the things that are out there. As opposed to having to build those from scratch.
00:23:10.140 - 00:23:54.250, Speaker B: Yeah, I mean, essentially our goal first is to support Metamask and we actually plan to support Solanabolas down the line as well. And the goal there is like, we want to make sure it's like we are as unaffiliated as possible and we can attract as many people as possible from different ecosystems. Eventually, I think we are considering to have our own wallet, but the goal is not to essentially force people to use it, but more people want to make them use it. Sorry. But essentially, like, we are not a companion that like, hey, we need to have our own custom wallet because, like, we tailor so it's tailored to our own infra. You're more like, hey, how can we tailor our infra to existing solutions? Because the last friction there is for people to onboard to layer and the better.
00:23:56.350 - 00:24:13.410, Speaker A: Awesome. So we're going to wrap it up here in just a moment. But, yeah, I would just ask if you were going to give any advice to people that are out there listening, that are considering building or starting their own company. Like, what are some things that you've learned along the way being a founder?
00:24:14.070 - 00:25:14.260, Speaker B: Yeah, I mean, I think, like, I really like what you were talking about. More infra, more apps kind of dilemma. And I think, like, what people are not tired of is, like, infra itself. It's like when infra doesn't have like a purpose, but it doesn't feel like it's clear, like, why are we building this? Like, what's good, what is going to lead to, and I think, like, what's important is, like, whenever you're building something, figure out, like, hey, like, if it's an application, is there a demand for it? Is if I'm building an infrastructure, is there a demand for it? And is it leading to applications which have users using them? And that's kind of like, I think, like, very underrated framework in crypto is that, like, we tend to forget, like, loss in all the debate on research topics, but I think, like, that's like, really crucial to highlight, really crucial to think about. So we can essentially double down on building something that's actually useful for everyone and can actually lead to adoption. And I think, like, that we do need better infrastructure, but we need the infrastructure that's actually useful.
00:25:15.920 - 00:25:30.994, Speaker A: So if someone wants to get involved and maybe as a developer build something there or kind of learn more and keep up with what's happening, what are some things that they should do be aware of in terms of, like, community, social media accounts and developer docs in.
00:25:31.002 - 00:26:00.806, Speaker B: Terms of building and layering? Yeah, yeah. I mean, I encourage everyone, like, to read our docs that we also get a release of white paper in the coming weeks. Like we should give like a deeper dive, but I would just encourage reaching out, like joining Discord or whatnot. Like getting in touch with people. Like we are really eager to support anyone building on top any applications, and that's essentially our number one job. Like onboard as many developers as possible and we are trying to be as open to everyone as we can.
00:26:00.998 - 00:26:05.810, Speaker A: Will you be participating in hackathons and in person events in the future?
00:26:06.230 - 00:26:18.530, Speaker B: Yeah, I mean, definitely. I think as our stuff is open source, we've probably launched multiple hackathons and that's essentially our angolic as well. And that's what we were thinking about.
00:26:20.800 - 00:26:54.672, Speaker A: Awesome. Well, if anyone's watching and they are participating in any hackathon in the future and they're building on layer in when Testnet and everything is out, you can also be eligible for the infinite hackathon building on any av's or roll up on eigen da. So you can win up to or earn up to $7,500 in additional bounties if you're considering building on layer in as part of your hackathon project. So definitely keep that in mind. We're excited about that initiative and it seems to be going pretty well. I think we've had about 20 entries so far and we've already doled out a couple of prizes there. So, adima.
00:26:54.672 - 00:27:04.976, Speaker A: Yeah, this has been really great. I've learned a lot, kind of went through, I think, quite a bit in a short amount of time. So hopefully a lot of other people learned a lot about layer in. So thanks for your time today.
00:27:05.168 - 00:27:07.860, Speaker B: No, it's been a pleasure. Thanks for having me.
00:27:08.880 - 00:27:22.180, Speaker A: All right, everyone that's stopped by, thanks for checking this out. We'll have another episode of Infinite Layers next week, and until then you'll be able to catch this on YouTube. If you missed the beginning of this, we'll drop a bunch of links there as well. So thanks for stopping by.
