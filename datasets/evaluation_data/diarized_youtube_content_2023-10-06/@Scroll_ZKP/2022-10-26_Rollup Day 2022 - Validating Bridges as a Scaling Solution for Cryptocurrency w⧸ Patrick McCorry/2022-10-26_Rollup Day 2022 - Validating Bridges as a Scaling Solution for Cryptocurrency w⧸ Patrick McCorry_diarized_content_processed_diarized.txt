00:00:16.490 - 00:00:18.480, Speaker A: So we're going to get started now.
00:00:20.050 - 00:00:23.440, Speaker B: Let me start with a personal story up front.
00:00:24.530 - 00:00:24.966, Speaker A: And.
00:00:25.028 - 00:00:59.840, Speaker B: And if we may have your attention, please. I'd like to start with a personal story because myself, I entered the space of roll ups quite recently, only to find that roll ups are so confusing. And I thought, well, I'm a newbie. Roll ups are quite specific, quite a niche topic. And so I figured, okay, it's going to come with time. And it was only then, after many talks, discussions and events, that I found out more and more that roll ups are confusing. Full stop.
00:00:59.840 - 00:01:33.020, Speaker B: It's not just me. And so today we would like to start working even more actively towards making roll ups more comprehensible. And because of that, today we are starting the roll up day with espresso systems and scroll. And we would like to welcome everyone. Today there will be two tracks. You have the program on Rollupday XYZ. Feel free to move between the two floors as you like.
00:01:33.020 - 00:01:50.030, Speaker B: This room and this floor is going to be recorded and live streamed. The first talk of today is going to be one on validating bridges, brought to you by Patrick. Please give your applause to Patrick.
00:01:54.870 - 00:02:06.820, Speaker A: Awesome. So welcome, everyone. The bogada. I hope you're all having a wonderful time. I see very little crypto swag. So you've all taken the advice to no dar papea. So awesome.
00:02:06.820 - 00:03:01.750, Speaker A: So this talk is more framed towards an introduction. So, as he mentioned, roll ups can be very confusing. And so I want us just to step back and try to understand, what are roll ups trying to solve? What are security properties and why should we care about them? Like, why are they interesting and really under the hood? For roll ups, it's all about bridges, it's just bridge engineering. And really, for the past ten years, this is how we've scaled cryptocurrencies. You have your funds on Ethereum, you lock them into some bridge, and then they magically appear on an off chain system like Coinbase finance, FTX, whatever. And then when you want to withdraw your funds, you typically ping Coinbase to say, coinbase, let me withdraw my funds. And then if you manage to get past customer support, they will send a transaction to the bridge to say, Alice can withdraw her 1000 etH.
00:03:01.750 - 00:03:39.358, Speaker A: And the most important bit is, from the bridge's perspective, there's a deposit function, withdrawal function. And when the bridge gives this message from Coinbase, the bridge has all the assets. And for Coinbase, I think it's like 10% of all crypto assets are under their custody. So there's a lot of assets that are protected by this bridge. And the bridge has to be convinced that the user is entitled to 1000 ETH before it actually sends off the funds. And so in this case, it will trust Coinbase to tell it the truth and to protect the off chain database. And then Alice gets her 1000 eTh.
00:03:39.358 - 00:04:20.110, Speaker A: But generically speaking, what's happening under the hood here? Generically speaking, there's an off chain database. It has account balances, program code, program state. But really, this database is recording the liabilities of the system. So if I have like ten coins in arbitrum, really the arbitram database is saying that has ten coins that is liable to me and it should eventually give me back. And the bridge has the assets, and the whole point of roll ups is to make sure that the assets can cover the liabilities. And the bridge is convinced that this offchain database is okay, it's well and it's alive. So that's the ultimate goal for all of the roll ups.
00:04:20.110 - 00:04:55.722, Speaker A: But the trust assumption for these bridges have evolved over time. So, as you know, we have the single authority, the Coinbase and the bitstumps. Then we have these multi authority bridges. We have the RSK, we do have liquid by blockstream, but no one really uses it. So it's actually really removed that example. And then we have these crypto economic bridges as well. But with the crypto economic bridge, the difference is that if I want to be a validator, I have to lock up my funds, have skin in the game, then I appoint myself to protect the bridge on behalf of other people.
00:04:55.722 - 00:05:33.270, Speaker A: But at the end of the day, there's still multi authority bridges. So by the end of 2021, around six authorities controlled, I think it was like 85% of all the modic staked in the system. And so we're really trusting these eight entities to protect the assets held by the bridge. Now, in all of these examples, we're trusting less than ten people to protect our funds. And this sucks, right? The whole point of something like bitcoin was to remove the intermediaries, and now we've just happened to reintroduce them. But it doesn't suck from an ideological perspective. It sucks, practically speaking, because they keep getting hacked.
00:05:33.270 - 00:05:54.014, Speaker A: Who's read in the past two weeks about a new bridge hack? Look at this. Yeah. Oh, look at all these bridges getting hacked. Did anyone lose any funds? I'm only joking. But when they get hacked, it tends to be large scales. So the biggest hack was McGox. They lost 850,000 bitcoin which was 6% of all bitcoin that will ever exist today.
00:05:54.014 - 00:06:21.910, Speaker A: They just sort of swap it under the counter and pretend it never happened. But basically, it sucks practically, because we have a single authority who has to take a set of human processes, apply the human processes, protect the key, and try to protect billions of dollars. And clearly that doesn't scale. Humans don't scale. What about multi authority bridges? Well, they're a little better. They get hacked a little less, but they still get hacked. So the run on bridge was a good example.
00:06:21.910 - 00:06:59.490, Speaker A: Five out of nine validators get compromised. Under the hood. It was really a single authority bridge because one person controlled five validators. But we like to have some security there. Feel like we've forgot about this old school motto, not your keys, not your coins. We're building these systems where we lock our funds into the bridge, and then we give custody to the off chain system, and we trust the off chain system to protect our funds. So can we do better than this? Can we transact on an off chain system while still allowing users to maintain self custody of their funds? That's sort of the goal for these bridges.
00:06:59.490 - 00:07:39.134, Speaker A: And this was the original goal in the side chain paper from 2014. They don't use the word bridge, but they're trying to build a trustless bridge with, they call a two way peg. And the idea was fairly simple. So on a blockchain like Ethereum, you would have a bridge where you could lock your funds into this other layer, one blockchain. Then you would transact there, and eventually you could bring your funds back to Ethereum, or in this case, back to bitcoin. And the important bit is that the bridge on Ethereum is trying to check whether this consensus protocol on this other chain has authorized you to withdraw your funds. So what I mean by that.
00:07:39.134 - 00:08:17.238, Speaker A: So if this was Ethereum, the bitcoin, Ethereum would be checking the blockheaders in bitcoin and checking the proof of work. If the proof of work passes, then you can get your funds out of the bridge. But the problem here is that I call this a consensus bridge, because ultimately you're relying on the consensus protocol of the other system. And if there's a consensus protocol, then you're trusting the judgment of a set of parties. And so we haven't got rid of the parties. And so what's trusted here, so one is if the validators all agree to an invalid transaction, then that could get passed by the bridge. Now, maybe we could use iron all these proofs.
00:08:17.238 - 00:08:56.738, Speaker A: And if you go upstairs, you'll learn more about that today. But the ultimate problem with these consensus bridge is liveness. If the other blockchain goes offline, for whatever reason, your funds will get stuck in the bridge on Ethereum. So if bitcoin goes offline, which hopefully it never does, your funds will get stuck in the bridge because you never get it back from bitcoin. And that's annoying. We should be able to still survive even if the entire off chain system goes offline. So again, the question, can we really build a bridge that protects us from an all powerful adversary? And this all began with plasma.
00:08:56.738 - 00:09:31.380, Speaker A: So, plasma in 2017 was the start of this journey for roll ups. There was this paper called plasma. Has anyone here tried to read the paper no one's tried to read? Okay, one person. There we go. Three people. Did anyone understand the paper? That's a joke, because it's a really difficult to read paper and asked Joseph Poon about it, and he called it aspirational because it was so difficult to read. But plasma was a great idea because it tried to solve that liveness problem, where even if the system goes offline and the operators are fully malicious, you could still eventually get your funds out of the system.
00:09:31.380 - 00:10:17.134, Speaker A: But this led to two years of research, plasma, MVP plasma, cash, and all these different schemes. But it wasn't a wasted two years. But nothing viable came out of it. But then Barry came along, Barry Whitehat, and he simplified the design space, basically, he said that, know, trying to protect the data and making sure the data is publicly available, and he came up with this thing called the roll up, where you take the data and you just post it to Ethereum alongside a proof that is valid. And that's where roll ups came from, ultimately, and I like to call them validating bridges. We say with the whole idea of bridges, what we're really building under the hood is a validating bridge. So the idea is that you still have this off chain database.
00:10:17.134 - 00:11:01.280, Speaker A: Someone will come along and propose an update for the database, and they'll send that to the bridge. Now, the difference is that the bridge will not blindly accept a random update from someone on the Internet. The bridge must be convinced that this database update is correct and valid, and then if it's convinced that the update is valid, it will then process any withdrawals that are needed, and then you send the convincing evidence, and the bridge will be very happy to say, yep. Is the database safe and alive? Yes, it is. I'll accept the proposed update. And this is what the roll up teams are trying to build. The loop ring Zksync, arbitram, Starkware, they're all trying to build a validating bridge in their own way.
00:11:01.280 - 00:11:41.462, Speaker A: And ultimately, if they can achieve this goal, then you can deploy Software to protect the funds locked into an off chain system, and something like Ethereum can protect you and your funds. This sounds really cool. It's really exciting. Clearly you're all here, so you're excited for roll apps, but this also sounds a bit too good to be true. So how do they work under the hood? So I'm going to cover who are the agents who's involved in the protocol, a high level overview of how a validating bridge may work, then the threat model and some security properties of what it means to actually be secure in this context. So here are the agents. The first one's an honest user, Kubi Alice.
00:11:41.462 - 00:12:09.240, Speaker A: All she wants to do is go on the off chain system and buy and sell her mooncat. She doesn't really care about the system itself. She just wants to be a user. We have the sequencer, and the sequencer's job is to take the off chain transactions, order them, and then pass them on to be executed. Then we have the executor who comes along. He takes the transactions, he'll execute them, and then propose an update to the bridge. So let's have a high level overview of how they work together.
00:12:09.240 - 00:12:41.610, Speaker A: So Alice is here, and Alice will deposit one coin into the bridge. And once the bridge gets the deposit, it will show up on that off chain database. Then Bob comes know, hi, Bob. And Alice wants to send one coin to Bob. So Alice will sign a transaction and give it to the sequencer. Now, the sequencer could ping Bob to say, bob, you're going to receive one coin. But right now that transactions, it's not public, it's not even pending, it's just held by the sequencer.
00:12:41.610 - 00:13:23.226, Speaker A: The sequencer waits around, I know, collects these off chain transactions, and eventually the sequencer will take the order transactions and pass it on. In this example, the sequencer will give it directly to the bridge. The bridge will take the list of transactions and it will finalize their ordering. And now they're ordered, but they're not yet executed. So the executor comes along, he'll pick up the transactions from the bridge with his 1990 animation. He'll execute the transaction, and then he'll post a little checkpoint to say bridge. Here is the proposed update, alongside evidence that this is valid and this happens continuously.
00:13:23.226 - 00:14:05.606, Speaker A: We order transactions, we execute transactions, and then we convince the bridge that the execution was correct. And so the bridge is continuously convinced that this off chain database is valid, and. Well, and that's the idea behind a high level overview of how a validating bridge works. But what's the adversarial model? Who are we trying to fight? Who are we protecting ourselves against? So there's really two things we have to be concerned with. One, message flow control. So the adversary can view, reorder, and drop every message on the L2 system. The only guarantee we have is that Alice can send a message to the bridge on Ethereum.
00:14:05.606 - 00:14:39.298, Speaker A: That's the only guarantee we have for message delivery. Two, we assume that nearly every single party is corrupted by the adversary. We can only assume there's one honest party and the bridge contract itself. And that honest party could be the user themselves. And that's the only two we have to be concerned with. But this is actually the most powerful adversary that you can think of. And if you visit l two beats, you'll notice that no roll up today can actually satisfy this beast or fully constrain the beast, because it's a very difficult adversary to defeat.
00:14:39.298 - 00:15:25.554, Speaker A: But they're all working towards beating this beast. But what about the security properties? What does it mean to be secure? So the ultimate goal is that there's an off chain database that records the account balances program states smart contracts, and the goal is to protect its safety. So every update applied to the database is correct and valid, and its liveness such that if the entire system is offline, a user can eventually get their transaction executed. And there's three sub goals. One, data availability. Are all the updates to the database publicly available? From the bridge's perspective, the bridge has to be convinced. Can anyone get a copy of the database? Two, the bridge has to be convinced that every update was valid.
00:15:25.554 - 00:16:14.130, Speaker A: And three, it's up to the bridge to forcefully include and execute transactions. It's the bridge that enforces censorship resistance. So, let's talk about the data availability problem. What does this mean? So we're going to talk about why does the data need to be public? What data needs to be public, and how do we guarantee it's publicly available? So why does it need to be public? So, as I mentioned, we assume there's one honest party who can assist the bridge with protecting the system. This one honest party needs to have a copy of the database. If you don't have a copy of the database, well, you can't propose an update for it. So the reason why the data has to be public is so one honest party can get the database and then eventually propose an update to the breach.
00:16:14.130 - 00:16:50.926, Speaker A: What data needs to be public? This differs based on if it's an optimistic or a ZK roll up. But generally speaking, you can either post the transaction history, so you get the list of transactions, the transaction data, and you send that directly to the bridge. Or you can get a state diff. So you have the old database, the new database, you compute the state diff, what stories values are different and you post a state diff to the bridge. And there's pros or cons of both approach, but it's cool. There's two different types of data that can be published. As long as you can recompute the database, the bridge doesn't care.
00:16:50.926 - 00:17:14.722, Speaker A: And as long as it's valid, of course. And three, how do we guarantee this data is publicly available? One, the first approach was the on chain data availability challenge. That was plasma. Everyone's sort of given up in this approach because it was too hard. But I think nowadays you could probably find a viable solution for it. But right now everyone's given up on it. The second approach is a committee.
00:17:14.722 - 00:17:57.118, Speaker A: This is like any trust or the Starknet committee, I forget what they call it, where you have ten or 20 entities that attest to the fact that the data will be available. So law send their signatures to the bridge to say bridge. I promise to make the data available on bingo. The third approach is the roll up where we just take all the data, basically the update to the database, and we post that directly to the blockchain. So we rely on something like Ethereum that guarantee the data is publicly available. So what about the state transition integrity problem? Now this is very straightforward. We want to make sure that every opt data posted to the bridge is correct and valid.
00:17:57.118 - 00:18:34.930, Speaker A: If one invalid transaction can be included, then the adversary can steal all the funds from the system and bingo. This is the optimistic versus the ZK, the fraud proof versus the validity proof. I won't go into this today because it's a short talk, but this is like when you hear about the optimistics or the ZK roll ups. They're mostly just solving this one problem. And if they can solve this problem, it's great, but it doesn't mean they're a roll up. The difference between a side chain and a roll up is really censorship resistance. It's the ability to allow any user to forcefully execute their transaction if the entire system goes offline.
00:18:34.930 - 00:19:20.634, Speaker A: So what is censorship resistance? Basically, I send my transaction to the sequencer and they reject it and say, no, I'm not going to include this and execute it for you. So the way we solve this is two components. One, the bridge must be able to accept transactions directly from the user, so the user could send the transaction directly to the bridge, and the bridge will order this for execution. So the bridge has this power, but now that the transactions are ordered, they have to be executed. So this brings us to the sequencer and the executor. The sequencer has absolutely nothing to do with censorship resistance whatsoever. It could be fully centralized and the system is still censorship resistant.
00:19:20.634 - 00:20:08.298, Speaker A: What really matters is that there's one honest executor out there who will pick up the transactions from the bridge and then execute the transactions. So, to summarize, if we can solve all three problems, maybe we can slay the beast and deploy a secure L2 system. And by the way, this picture is from the bear market in 2014. I replaced the bitcoin shield with the Ethereum shield, because clearly EF is money now. So anyway, there's other problems that also emerge, but I don't have a lot of time to go into it. But I wanted to show the slide. A couple of things I wanted to highlight was one, oh, by the way, these are resource problems that are really interesting to solve, because while we have the three core problems, these problems surround it and also really do also need to be solved.
00:20:08.298 - 00:20:49.322, Speaker A: So obviously MeV is a big issue for the sequencer. Should we have these auctions or some fair ordering protocol? Censorship resistance is nontrivial. Censorship resistance is the hardest thing to build, and clearly not many Perula projects are actually trying to build it. And of course, experimental virtual machines. We have the Cairo, we have the optimism virtual machine, the AVM, the arbitrary virtual machine. We can actually deploy a crazy virtual machine like WaSM, execute the transactions here, but still get the security of Ethereum. So these roll apps allow us to experiment with crazy designs while still retaining Ethereum security.
00:20:49.322 - 00:21:20.662, Speaker A: So that's really exciting. Anyway, regardless, is it worth it? Is it worth going through all this bother of trying to build a validating bridge that can protect our funds? Why not just trust Coinbase? Coinbase hasn't been hacked yet. I guess binance did. So that wasn't very good, but it was very unfortunate for them. They got a bug in their Merkel tree. But anyway, is it worth it? I believe it is worth it. So for me, web3 is this buzzword that gets thrown around.
00:21:20.662 - 00:21:52.526, Speaker A: But my take on it is that in the web two world was where we really have been for the past ten years. We do have the coinbases, the binances and the bit stamps. And the issue here is that we have to give our coins to this off chain system and trust them to protect our funds. They have to take these human processes and apply it to protect our funds. And that doesn't scale. Empirically speaking, it doesn't scale where in the web3 world, ideally I can just deploy software. I deploy the software, the roll up.
00:21:52.526 - 00:22:47.118, Speaker A: I offer exactly the same service as someone like Coinbase, but I just don't take custody of your funds. Instead I can lock it in and if that goes offline, for whatever reason, I just take my funds back out and go somewhere else. And for me that's web3, where I can interact with a counterparty, but I don't have to trust them. And really what this will lead to is that custody will be a liability for most off chain systems. It's very difficult to replicate human processes, to secure billions of dollars because humans don't scale. If one of these roll up teams can actually build an implementation that works and is bug free, it's easy for developers to build on and it's really easy for people to deploy. That's sort of the layer three goal that anyone could deploy an instance of this roll up, and it'll be the software that scales and the software that protects the funds and not users.
00:22:47.118 - 00:23:08.610, Speaker A: So I don't believe users care about custody. I mean, I have a mooncat. Sometimes I lock it in the services, sometimes I don't as a mooncat, but operators do. If I'm going to do a startup today, I do not want to worry about securing billions of dollars. Who wants that liability if I can just take someone's software and deploy it. There you go. That entire upstack problem disappears.
00:23:08.610 - 00:23:18.770, Speaker A: And that's why I think rollops will eventually take off, because operators will drive it. So again, thank you for listening. And I believe I'm out of time. So hopefully there's next speaker's available. Gigi.
