00:00:00.600 - 00:00:09.870, Speaker A: It's not sustainable to assume, like, one synchronous blockchain will serve the entire web. That's ridiculous. You can't assume. It's like assuming, like, one server will serve the entire Internet.
00:00:10.062 - 00:00:36.674, Speaker B: This episode of Empire is brought to you by fails Markets, an options platform on arbitrum and optimism that gets you exposure to crypto in the simplest way possible. They've made it as easy as simply choosing up or down. You'll hear more about Thales later in the show. All right, everyone, welcome back to another episode of Empire. We have Mustafa, the co founder of Select, Preston, co founder of Sovereign Labs, Preston, Mustafa. Welcome to Empire, guys.
00:00:37.254 - 00:00:39.714, Speaker A: Hello. Good to be here.
00:00:40.294 - 00:01:23.924, Speaker B: Good to have you guys here. Fun time to be doing a conversation on roll ups. There is. For anyone who has been reading John Charbonneau, there's a big debate this week on basically just what defines a roll up ignited by the two John Charb pieces. And I think my knowledge has basically, if you've ever seen that chart where it's like, you think you know everything and then you realize you know literally nothing, and then you slowly build back up from there, I think I'm at the point of realizing I know literally nothing. So I think what would be helpful, uh, for me at least, is like, let's start at the very top before we go deep. And so I think, Preston, I'll throw this first question to you with just like, not even, what is a sovereign roll up, but what is a roll up? And then we can go deeper from there.
00:01:25.174 - 00:01:58.934, Speaker C: Yeah, okay, this is a great question. Um, so James Prestwich is the guy who I think has maybe the best definition here. And his definition is that it's, um, it's another. Basically, it's a virtual blockchain. So the idea is you have some additional state, which the main roll up nodes don't agree on. Uh, so basically a roll up is some subset of the full nodes of the regular blockchain, the l one, keeping some additional state, which the rest of the l one nodes are not aware of. So really, if you take a step back, the idea is that you're running a new virtual blockchain on top of an existing blockchain.
00:01:58.934 - 00:02:16.794, Speaker C: So you're inheriting consensus from some l one, but you're not inheriting their execution rules. So the great thing that it gives you is that you can inherit what people typically call the security of the l one, meaning its consensus guarantees without having the limitations that are imposed by the need for decentralization on the base layer.
00:02:19.354 - 00:02:38.494, Speaker B: Two different types of roll ups here. Well, maybe actually three. The two big ones right now are ZK rollups and optimistic rollups. And then you guys have introduced sovereign rollups. But really specifically that's probably tied into the ZK rollups. I don't know how you bucket that, but maybe take us one level deeper. And what are the two distinctions here?
00:02:39.994 - 00:02:40.402, Speaker A: Sure.
00:02:40.458 - 00:03:16.624, Speaker C: Yeah, and Mustafa, feel free to jump in here. I think Mustafa is the one who coined the term sovereign rollup. But broadly speaking you've got optimistic and zk and that's about technical implementation, details of how the roll up state transition is proven to like clients. So taking one step back, you've got this blockchain. So it's a set of rules that has been socially agreed upon that you're going to run and you say whenever a transaction happens, we're going to say check signature. And if the signature is valid, then we'll transfer some money from person a to person b. Okay, so you've got these roll ups with their logical state transition function.
00:03:16.624 - 00:03:57.000, Speaker C: Now anybody who's running a full node just implements those rules and that's the end of the story for them. As soon as the transaction lands, they execute it and they know what's going on. The distinction between optimistic and ZK is, okay, let's say that you can't afford to run a full node. So a good example is like you're an end user on a mobile phone or maybe you're another blockchain that cares about the state of this roll up chain. How do you find out what the state is? So broadly speaking, there's two ways you can go about doing that. One is that you can just ask somebody, this is an optimistic roll up. Somebody goes on the chain and they say, hey, I promise the state of the roll up currently is x and I'm willing to guarantee that by putting up some money.
00:03:57.000 - 00:04:31.774, Speaker C: And if anybody else is able to prove that the state of the roll up was an x, then they get my money. So it's a way to get an economic guarantee or a crypto economic guarantee that the state of the roll up is correct. All you need is the ability for one person to come in and basically facts check them. So as long as there's at least one honest guy who's watching, then they'll want to earn the money. So they'll keep the guy who's attesting to the state honest. So that's an optimistic roll up. The other thing you can do is a ZK roll up, which is just using fancy cryptography to prove that the state is something rather than doing this crypto economic game.
00:04:31.774 - 00:05:08.142, Speaker C: So that's ZK versus optimistic. That's pretty orthogonal to the question of sovereign versus smart contract roll ups. And this distinction is maybe more of a social distinction than a technical distinction. Again, Mustafa, feel free to jump in here. But broadly speaking, the idea is if you're a smart contract roll up, you've got some enshrined contract on a particular layer one. So a good example is like arbitrum or optimism, they have a special contract on the Ethereum based layer, and this contract is responsible for validating the state of the roll up and sort of telling Ethereum about it. And it's very deeply baked into the architecture.
00:05:08.142 - 00:05:29.034, Speaker C: So most of the assets on optimism and arbitrum are actually bridged from the Ethereum base layer in a sovereign roll up. The idea is that you don't have some special smart contract. Instead, every end user sort of decides the state of the roll up for themselves. And that means that there's less focus on bridging assets in and more focus on sort of native assets on the roll up.
00:05:30.584 - 00:05:59.374, Speaker B: I want to double click on this idea of it being a social distinction rather than a technical one. I was reading a blog post on Celestia's site, so Mustafa, maybe I can throw this to you. It says, to not enshrine a settlement layer is primarily a social distinction rather than a technical one, which means that there is a social contract between the roll ups community, that the rollups transaction validity rules are defined by the community rather than an immutable l one contract. You got to break this one down for me.
00:06:00.074 - 00:07:03.394, Speaker A: Yeah. So what you quoted there is actually the article that first defined what a sovereign roll up is, and where I first introduced what a sovereign roll up is. And as I said, a sovereign roll up is basically a roll up that does not enshrine a settlement layer or a bridge. And what does it mean to not enshrine something? And I argue that it's mainly a social distinction, not a technical distinction, which means that if the roll up community agrees that the upgrade process for a roll up is that they will agree they have a process where they can hard fork the roll up. And they agree that it's not the bridge that defines what the state of the roll up should be, it's the community or running the nodes for the roll ups that should define what the roll up is. And that's kind of like playing into the recent debate. Is the roll up the bridge or is it the chain.
00:07:03.394 - 00:07:39.194, Speaker A: And that's why. And the fact that I say successful distinction. Like when I first kind of published that post, like Kelvin from optimism thought it was kind of weird because he thought it's obvious. Like of course, like of course the node defines chain. And he himself sees to some extent that the optimism chains can be sovereign roll ups. And that kind of really plays into the fact that it is really essential distinction, and more so than a technical distinction.
00:07:41.574 - 00:08:01.454, Speaker B: Am I understanding it correctly in that a sovereign roll up is really technically not that different than your typical ETH roll up, except that there's this social distinction that it's really what you're describing is it's about the community that decides on upgrades via forks rather than the bridged. Am I understanding that correctly?
00:08:02.314 - 00:08:55.098, Speaker A: Yes. But there is also kind of like what we've been discussing recently, this idea of social sovereignty and technical sovereignty. So like, in order to have that social distinction in the first place, you also need some form of technical sovereignty, which is idea like, you need, you need that, you can't. To even have the concept for software to be useful, you need to have the ability for end users to run nodes that follow the roll up chain directly, not just via the l one. Because on the l one you obviously have a bridge contract between to the roll up. And that bridge contract basically operates as a light node or lite client for that roll up. And in many cases, people don't need to run a node for the roll up, they can simply run the l one chain.
00:08:55.098 - 00:09:44.624, Speaker A: And inside the l one chain is a lite client as a smart contract for the roll up. So you're kind of like implicitly, indirectly running a node for that roll up. And if you do that, it's not what I would describe as technical sovereignty. That's what we describe as a smart contract roll up. But on the other hand, if we talk about a sovereign roll up, there needs to be the ability for users to follow the state of the roll up and get roll up blockaders, not just by following the on chain smart contract, but actually by connecting to some PHP network directly and downloading the blocks and checking for themselves directly that the roll up blocks are valid, whether it's optimistic or for fraud proofs or OZK proofs. And that's what we refer to as technical sovereignty. And that's what sovereign SDK allows for as well.
00:09:45.324 - 00:10:42.374, Speaker B: Before we completely lose everyone who's not the like 120 people in this world who really cares about the distinction between roll ups, why don't we actually zoom out even more. And we typically don't do this to kick it off, but maybe, like, let's go even more high level than this and just talk about both of your vision for the world and how crypto will look in maybe three to five years, and why the hell it matters. Why are we talking about this? And maybe actually, this is a good time to plug sovereign and celestia, I think both of what you're building, to me, when I understand both of what you're building, it's not things that are incredibly imperative to today's crypto world, but will be very essential in the future crypto world. So maybe, Preston, if I could ask you to first, like, describe your vision of the world in crypto in like, three to five years, and then tie that back into, like, why this whole conversation about roll ups and sovereign labs really matters.
00:10:43.354 - 00:11:22.246, Speaker C: Yeah, absolutely. I'd be super happy to. So, before we get too deep into this, one thing that's super, super important to understand is this notion of a trust zone. So, broadly speaking, when you have a blockchain, you've got some set of miners or validators, some people who are in charge of defining what data is on that chain and within one of those trust zones. So for the base chain and for any roll ups that are defined in terms of the data on that chain, you're able to circumvent some limitations that would. That you run into if you tried to go across trust zones. So in technical terms, there's this problem called the asynchronous fair exchange problem.
00:11:22.246 - 00:12:19.412, Speaker C: That's the problem we're interested in here, if you want to look into the technical details. But broadly speaking, if you're trying to bridge across different chains, you have this fundamental problem, which is like, let's say you've got tokens on Solana and you want to move them over to ether, right? Now, what you want to do is you're going to lock them up on Solana, and then the Ethereum blockchain or some smart contract over there is going to look at the state root of the Solana chain, and they'll say, oh, yeah, those tokens have been locked up, so it's safe for me to mint them on the Ethereum chain, and then you can use them over there. The technical problem here is that those two things are in different trust zones, which means that if one of them hard forks, or if there's just some problem and the chain rolls back, then maybe that transaction no longer happened. So let's say that Solana somehow rolled back. Suddenly you've minted these tokens on Ethereum, but they're no longer locked up on Solana, and so you've just double spent your tokens. Okay, so across trust zones, this is a fundamental problem. There's no way around it.
00:12:19.412 - 00:12:58.484, Speaker C: If the chain hard forks or rolls back, then the other chain is just straight out of luck. It's got these copies of the tokens that are not backed by anything anymore. So what that means is that you want to have large trust zones, you want a lot of different activities, all happening within the same trust zone. So where I see the world going in the long term is that we'll have a few base layers that dominate. So maybe three to five is a good approximate number, who knows? But a very small number of base layers with their own validator sets. And then on top of those base layers, you want to be able to do all sorts of different things. So think of the Internet.
00:12:58.484 - 00:13:45.304, Speaker C: Imagine if there were only two different programs that you were allowed to run on a computer. That would make no sense. What you want instead is you want lots and lots of different computers running lots and lots of different programs that can be deployed in a permissionless way, and then they can all talk to each other. So the technical way we describe that is that you've got synchrony within your local machine, so you can, you know, you can access your hard drive, you can do computation, and then you've got asynchrony when you want to interact with somebody else. So let's say that you want to download a nice cat GIF from Pinterest, right? Your computer's going to make a call over the network, and that call might fail, but that means that you're decoupled from Pinterest. So if Pinterest goes down, your computer doesn't stop. So I expect blockchains broadly to play out in this exact same way.
00:13:45.304 - 00:14:37.144, Speaker C: You'll have lots and lots of different chains doing lots and lots of different things, and they're all there, separate little islands. They're all just doing their own particular business logic. They're not necessarily even aware of other roll ups or other base layers, but they're all on these broadly shared trust zones. And that gives you the best of all worlds. This way it can be totally permissionless to deploy a new chain. So if you need something that's not being offered by a current roll up, you can just make your own in the same way that if you want something that's not available on a current website, you can just go and deploy your own website, but then you have the trust properties inherited from the DA layer. So again, speaking very broadly, we expect a few DA layers with hundreds or thousands, or ideally tens of thousands of roll ups, all running on top and all able to communicate, but not communicating with each other all of the time.
00:14:37.844 - 00:14:40.864, Speaker B: Mustafa, how does this align with your vision of the world?
00:14:41.524 - 00:15:13.386, Speaker A: Yeah, so we share a very similar vision. Our vision kind of revolves around how we also saw the web develop. So there's enough analogies with how we see blockchain develop, how we saw the early web develop. So, like when the web was first created, to create a website, you usually had to have your own physical server. And that's very similar to the early days of bitcoin. It was like one application per blockchain. If you wanted to create a new application, actually create a new blockchain, it was bitcoin, which was the first application.
00:15:13.386 - 00:15:48.598, Speaker A: It was money. And then there was other chains like Namecoin, litecoin, dogecoin and so on and so forth. There was no ERC 20s or anything like that. And then in the early days of the web, you had this idea of shared hosting providers, like geocities is the early one, but you also had like Dreamhost, Bluehost and stuff like that. And the parallel to that in blockchains is Ethereum. Ethereum came about and said, instead of creating your own chain every single time, let's just create a shared blockchain with a shared execution environment. Just upload your code and it will run on the same chain.
00:15:48.598 - 00:16:37.964, Speaker A: We can share the same computational resources. It's a very analogous to the early web where we had shared hosting providers. You upload your code to geocities, Dreamhurst or whatnot, and your code runs on the same server as like hundreds of other websites. You're sharing the same resources. But more recently we realized that that doesn't really scale well and it has very many limitations. Like you're stuck with the same execution environment as that shared host gives you, or you're stuck with the Ethereum virtual machine. Like, what if you want to experiment with new execution environments that are more scalable, like Solana's virtual machine or move, or any other execution environment that supports parallel processing? Or do people want to create, modify the EVM to add new opcodes that weren't possible before? So then you had.
00:16:37.964 - 00:17:36.353, Speaker A: So then the idea is like the evolution of the shared web hosting providers was this idea of virtualization. We had virtual servers, we had virtual machines and the cloud. So it became the case that if you wanted to create and deploy a new application on the web, instead of sharing the same operating system or execution environment as everyone else, when I shared a web host, what you would instead do would go to Amazon, AWS, EC two, or Digitalocean, or any virtual machine provider, and in 5 seconds you could deploy your own virtual server. So now you can have your own execution environment as a virtual server within seconds. So then you had the best of both worlds. You had the flexibility of your own server, but the convenience of using a shared host and roll ups do the exact same thing. That's why they're described as virtual blockchains.
00:17:36.353 - 00:18:08.876, Speaker A: You can now, instead of having to create your own chain from scratch using your own consensus or proof of stake network, you can just create a virtual blockchain that inherits a pluggable consensus and data layer like Sylvester that plays into our multi chain or app chain thesis, where in the future we expect that there will be millions of app chains or chains running on shared areas like Celestia, just like how there's millions of virtual machines all asynchronously talking to each other on the web right now.
00:18:09.020 - 00:18:21.704, Speaker B: If I understand both of your visions of the world correctly, you both think that right now we have Dy DX has created their own app chain. You both think that there will be millions of apps who have created their own app chains. Is that a fair thing to say?
00:18:22.844 - 00:18:26.484, Speaker A: Yeah, exactly. Completely.
00:18:26.564 - 00:18:27.140, Speaker C: Yeah.
00:18:27.292 - 00:18:47.684, Speaker B: Okay. And will, these might be really dumb questions. Will all of these app chains be built on different l two s? Like the optimisms and arbitrums or Preston, that is actually what sovereign Labs is building in that, like, they will hopefully be built on something like a sovereign labs is SDK.
00:18:49.104 - 00:19:34.800, Speaker C: Yeah, absolutely. That's our vision, is that most of these chains will need something custom. So the EVM is of course great, and there's a lot of reasons why you might want to use it, but it's also very limited in some fundamental ways. So one limitation is that it's extremely unfriendly to parallelism, which puts a limit on how much transaction throughput it can ever do. So if you need a super scalable app, EVM is probably going to be the wrong choice. Another big limitation of EVM is that its transaction model doesn't allow for batching. Think of Uniswap today, if you want to send a trade on Uniswap, you are roughly guaranteed to get sandwiched if you don't use a special MEV protection API because the EVM itself can't protect you from sandwiching.
00:19:34.800 - 00:20:09.400, Speaker C: The only reason for that is that the EVM can't batch trades. So you could trivially build a version of Uniswap which didn't have sandwich attacks just by settling trades once per block, instead of settling every transaction separately, and then everybody would get the same price. So there's no incentive at all to sandwich. That would mean suddenly your slippage tolerances could be way lower. Basically, it's just a fundamentally better version of Uniswap. The problem is there's just no way to implement it in EVM. And so that's going to be broadly the case for any particular choice of VM.
00:20:09.400 - 00:20:39.324, Speaker C: Every virtual machine has to make different trade offs, and some of them will be good for different applications, but for any particular application, like any particular vm is not the right choice. So you need flexibility. And things like EVM stacks just can't give that to you. In the same way that it doesn't really make sense to have one canonical website that everybody can customize a little bit to run the app on. Like, no, you just need to be able to write your own apps and serve them via the web. So that's what sovereign labs is trying to provide.
00:20:41.864 - 00:21:13.434, Speaker B: Okay, so, like, when I think about the three core tasks of a blockchain, it is executing transactions, achieving consensus on the transaction ordering, and then the DA layer. Right? Like guaranteeing the availability of that transactional data. What part of this in a world. Okay, let's use Uniswap, for example. Uniswap goes out, they build their own chain. What of those three things is happening at that app chain level? What is happening one layer below? What is happening still at Ethereum? What is happening here on Celestial? Maybe, Mustafa, you could take this one.
00:21:14.654 - 00:21:21.834, Speaker A: Yeah. So are you talking about a hypothetical example if INU swap wanted to be an app chain roll up, for example?
00:21:22.214 - 00:21:23.230, Speaker B: That's right.
00:21:23.422 - 00:22:02.410, Speaker A: Yeah, I guess DydX is also quite a similar example, because DyDx use Docx. So dy DX itself was a roll up on ethereum. But the way it would roughly work is like you have the execution environment, and the execution environment is the roll up itself. So if it was a uniswap roll up, for example, let's say you would create it using the Ethereum virtual machine, for example. And that would be an execution environment. And that roll up would post its block data to a. Another consensus.
00:22:02.410 - 00:22:28.954, Speaker A: And DLA, like Celestia. And what that does is Celestia would make the roll up blocks. It would give ordering over those roll up blocks to say which ones came first, so that there's objective truth to what the actual transactions are, and it would make them available, the data behind them available, so that if there's any fraud proofs, they can be generated. Or if there's any misbehavior, it can be challenged with fraud proofs. For example.
00:22:32.134 - 00:22:59.242, Speaker B: Hmm. Okay. I'm just thinking. I'm trying to almost visualize in my head, like, you've got basically the data availability consensus, settlement, and execution in a monolithic blockchain. All of that happens on Ethereum with a roll up. The DA consensus and settlement happens on Ethereum, but then the execution happens on your own chain. And then with something like a sovereign roll up, the DA and the consensus would happen with Celestia.
00:22:59.242 - 00:23:07.266, Speaker B: Tell me if this might all be wrong, but I think the DA and consensus would happen with Celestia, and then the settlement and execution would happen on your own chain.
00:23:07.410 - 00:23:24.574, Speaker A: If it was a sovereign roll up, or even if it was a sovereign roll up, you could also have a different settlement layer. And, like, for example, you could be an l three to l two. And one of the advantages of that might be you have, like, you have a bridging. You have access to a bridging hub, which was memorized. Bridging.
00:23:24.734 - 00:23:25.474, Speaker B: Hmm.
00:23:27.094 - 00:23:28.110, Speaker A: Sorry, go ahead.
00:23:28.262 - 00:23:56.742, Speaker B: No, I was just gonna say, like, the. I like what I think. When a lot of people still think app change, they think cosmos. But my understanding here now, like, getting a better understanding of this is the cosmos SDK is great, but the cosmos SDK is meant to built l one s, which means that you then have to recruit your own validators. You have to get your own set of full nodes, et cetera. With a roll up, you inherit the security of the l one. So, Preston, with what you're building with sovereign, you're meant to build, I think, ZK rollup.
00:23:56.742 - 00:24:05.302, Speaker B: So it just makes everything a little easier to get off the ground, I guess. That's a question.
00:24:05.358 - 00:24:05.954, Speaker A: Yes.
00:24:06.294 - 00:24:07.154, Speaker B: Okay.
00:24:08.044 - 00:24:08.420, Speaker A: Yeah.
00:24:08.452 - 00:24:21.704, Speaker C: Imagine if every time you wanted to deploy a website, you had to go and build a data center. Sure, there's lots of people who are interested in building data centers for you, but it's just a pain to actually go out and do it. So just use an existing trust zone.
00:24:23.524 - 00:24:48.334, Speaker B: This episode is brought to you by Thales, a new frontier in simple on chain options. Here's what you do. You choose an asset, a strike price, and the market you want to participate in. And that's it. With its powerful and capital efficient Amm based architecture, Thales is able to offer low fees, automated liquidity, and effective utilization of leverage. With no funding rate and known payouts. They just launched this new UI.
00:24:48.334 - 00:25:04.818, Speaker B: It's super clean. Step one, you choose an asset. Step two, you choose a strike date. Step three, you pick a market and choose the USD amount. Getting exposure to crypto assets price action has never been easier because of fails. So here's what you got to do. You got to go to Thalesmarket IO.
00:25:04.818 - 00:25:17.098, Speaker B: T h a l e s market. IO salesmarket IO. They're on arbitrum and optimism. Go play around. Choose a crypto asset, choose strike date, pick a market, choose the USD amount. Bada bing, bada boom.
00:25:17.146 - 00:25:18.374, Speaker A: Check out sales market.
00:25:20.194 - 00:25:45.320, Speaker B: Let's. Okay, good. High level framing. Let's get back into the weeds a little bit. I think maybe the first place to talk about is guarantees. I don't know who to ask this question to, but, like, what guarantees are different with a roll up where you don't have this baked in, right? Or you don't have, like, this enshrined smart contract versus, like, an l one where you actually have the enshrined smart contracts does that. I don't know who to ask that question to, but curious about.
00:25:45.320 - 00:25:46.804, Speaker B: Curious about the guarantees here.
00:25:48.144 - 00:26:32.454, Speaker A: I mean, in theory, you should get the same guarantees. Like, interestingly, like Celestia used to be called lazy ledger. And the reason why it was called lazy ledger is because it trips back a layer one to only the core components that layer one needs to do to get all the guarantees that blockchain provides, which is provide a ordering over some set of data so that nodes can get what the final state of application is. So it's like as long as you have ordering and consents and ordering and data availability over some data, you get the exact same guarantees that any other chain provides. It's just that it's decoupled.
00:26:32.754 - 00:26:50.754, Speaker B: Maybe tell me about the end benefit here to the user. I'm assuming there's some sort of benefit, like cheaper fees or faster confirmations if you're completely sovereign. But maybe tell me about the why behind that, and if I'm right about that being the end benefit to the user of if you are completely the sovereign.
00:26:51.424 - 00:26:51.936, Speaker A: Yeah.
00:26:52.000 - 00:27:31.614, Speaker C: So going back to that conversation we had earlier, this is, again, primarily like a social distinction, not a technical distinction, really. The whole concept of a settlement layer is not fundamental in any way. So the reason we have this concept of settlement is a historical accident where the first roll ups were on Ethereum and people were thinking of them as like a way to do more execution of ethereum things on a second layer. So then the idea is like, okay, if the second layer is really part of Ethereum, it has to settle to Ethereum. But fundamentally, there's nothing about settlement layers baked into roll ups. So a roll up is just a blockchain of its own. You can follow the rules of that blockchain, completely independent from any other chain.
00:27:31.614 - 00:28:09.010, Speaker C: And so you could imagine like having an l three, which has its data on l one, and then it has, quote, settlement to two different l two s. And there's no contradiction in terms there, right? The settlement layer is not a fundamental part, really what a settlement layer is like. It's a social contract about. We think this chain is sort of important to the roll up in some way. So Ethereum is sort of important to optimism and arbitrum because pretty much all the assets from optimism and arbitrum are bridged over from the ETH base layer. But really like a settlement layer isn't really a thing, it's just a chain that you bridge to.
00:28:09.152 - 00:28:09.470, Speaker A: Yeah.
00:28:09.502 - 00:28:57.744, Speaker C: So then the question that you're asking is really like, what are the trade offs involved in bridging from a roll up? And the answers there are fairly, you know, implementation dependent, but broadly speaking, like running a bridge, smart contract is a bit expensive. And so especially if you're a smart contract, roll up, which has to sort of by social contract, has to be updating this bridge frequently, then that can get quite expensive for end users. So let me be very concrete here. Like imagine that you are a Starkware Starkx exchange or something. Your social contract is that you're supposed to settle your trades onto Ethereum, which means that you have to be posting ZK snarks onto Ethereum as frequently as you can afford to. But verifying snarks on chain is very, very expensive. And so that translates into higher fees for end users.
00:28:57.744 - 00:29:41.810, Speaker C: So if you remove this social contract, if you say no, the roll up is sovereign on its own, and then we'll bridge back to Ethereum based on supply and demand. You can translate that into lower fees. So the way this works is you create your Zksnark and you do that completely off chain on your own peer to peer network, and you can send that snark to lite clients right away. So end users can get finality in the minimum amount of time that it takes to generate a snark, which is usually like a couple of minutes. And then when you want to bridge, you can do that on the longer timeframe that Ethereum forces you to use because, because of how expensive verifying snarks are. So I think concretely on Ethereum today, like starkware roll ups settle about every 8 hours or so. The reason for that is just gas price.
00:29:41.810 - 00:30:05.594, Speaker C: It doesn't take Starkware 8 hours to make the snark, it's just that it's too expensive to verify. So if you separate those two components out, then you can reduce the time to finality for end users. But you can still have your bridge contract your trust, minimize bridge with Ethereum. So really this is all just a product of sort of a bad mental model coming from the history of roll ups, right. Settlement layer is not an inherent part of a role.
00:30:06.254 - 00:30:48.184, Speaker B: Just to make sure I fully understand that one of those pieces, Preston, and is that because ZK, like starkware for example, is that because zks are so like cost intensive, basically they consume so much gas that this is so like if you're Starkware or Stark X or whatever, you won't actually post to the block. You won't actually post to the blockchain every minute or every ten minutes because that would be far too expensive. So you'll do it every 5 hours or every 10 hours or something like that. And that becomes a problem if I'm a user, because if I'm looking at the chain, I don't actually see my transaction for maybe even several hours after it's posted. And a sovereign roll up would fix that. Is that correct?
00:30:49.184 - 00:31:09.360, Speaker C: Yeah, exactly. Exactly. So to be clear, starkware could do the same thing. They could make their proofs and they could send them to users directly. The trouble with starkware is that they don't post their transaction data on chain. They only post state diffs, if I recall correctly. And so because the data is not settled on l one until they post their proof, you really don't get finality.
00:31:09.360 - 00:31:19.584, Speaker C: But if starkware were to post their transactions on chain, then they could do this same trick where they make their proof soft chain and send them to users and then just settle or bridge every few hours.
00:31:20.404 - 00:31:34.704, Speaker B: So Mustafa, tell me about your prediction for just, I guess, what happens with optimistic rollups here then? Because it seems like with optimistic roll ups you need the fraud proofs and with ZK you don't. So it seems like optimistic rollups eventually get run over.
00:31:36.124 - 00:32:14.986, Speaker A: Well, in theory, like theoretically, ZK roll ups kind of like have better properties in optimistic roll ups in the sense that you don't have to wait, you don't have to wait for, for proofs. But I guess the main reason why people are using optimistic roll ups right now is simply due to the high proving cost of proving certain computations in ZK roll ups. Like for example, if you want to create something in the evm, creating a ZK EVM is very expensive. But like, hopefully, like I'm, like I'm kind of agnostic. I like both optimistic and zk roll ups. I'm very neutral. But my hope is for ZK rollups.
00:32:14.986 - 00:32:20.414, Speaker A: Of course, hopefully it will become more and more efficient in the future when it comes to proving these computations.
00:32:22.074 - 00:32:50.274, Speaker B: Mustafa, you were talking earlier, I guess you both were, about comparisons and analogies to the web. When you think about what you're building at Celestia, are there comparisons for the smooth brain folks like me? Comparisons to early web or Aws or cloud, like HTTP? Any analogies that you can pull out of this, of what maybe that you both are building to kind of help me visualize and get a better understanding of really what we're doing here?
00:32:51.854 - 00:33:51.594, Speaker A: Yeah, as I mentioned, I think the best analogy is just like how the cloud lets you deploy virtual servers without having to maintain your own physical infrastructure. Roll ups allow you to deploy your own virtual blockchains without having to maintain your own blockchain consensus infrastructure, or maintain your own layer one network. I think that's the best analogy I could effectively find. And also another analogy, when it comes to moisturizing the stack, there's this thing called the OSI stack, which computers today, they're built in a very modular way. Like you have the hardware there, we have the networking layer, you have the application layer and so on and so forth. And I think the key takeaway is, as any technology stack matures, it starts to mature by modularizing. Imagine we have TCP IP, for example, and that's on the network layer.
00:33:51.594 - 00:34:22.176, Speaker A: It's a protocol for computers to communicate with. On top of that, we have HTTP, which is how websites work. But imagine if we had to of like create a whole new networking layer every time you wanted to create a new kind of like way to use the Internet. Like imagine to create the web, or like to create HTTP. Imagine. So for example, like you have HTTP and HTTPs, and HTTPs is like a more secure version of HTTP that uses encryption by. Imagine.
00:34:22.176 - 00:35:10.734, Speaker A: Imagine if in order to deploy HTTPs, we have to modify the entire networking layer of the Internet and modify the actual routers and the actual Wi Fi chips and everything like that. It will take ages. And that's exactly what we've been doing with IPV six versus IPV four, we're running out of IP addresses, and there's IPV six, which increases the number of IP addresses. And that's basically taking like two decades to get mass adoption because you have to modify every Wi Fi chip, like all the hardware, all the routers. And so you can use the same analogy for blockchains. Imagine if you had to, every time you have to create, modify your execution environment in some way that you want to experiment with. Add a new opcode to the eVM.
00:35:10.734 - 00:35:43.172, Speaker A: Imagine if you had to create a whole new layer one, just to experiment with a new execution environment. It would be insane. And that's basically how we've been operating over the past ten years. Like, we've been stuck in this like, loop. What I describe of like this monolithic layer one loop. Like every cycle there's this new layer ones that incrementally improve on the old layer ones. Like on the first cycle, you know, 20 1516, we had Ethereum, and the next cycle we had things like EOS Nem, I think.
00:35:43.172 - 00:36:09.654, Speaker A: And then like a bunch of others, Cardano. And in the previous cycle we had Solana avalanche, and now we have Sui and Aptos. So it's like, when does it end? Like, we can't, it's not sustainable. Like the industry needs to mature a little bit. We can't have like this, like the constant new layer ones that just copy all the applications, the previous layer ones, same NFC ecosystems, the same application, exactly the same applications, the early selling points, like it's a new layer one just, just for incremental improvement.
00:36:10.514 - 00:36:55.104, Speaker B: So, okay, so if you're looking at this OSI stack, you've got seven layers of the OSI stack. And like down here you've got like the fiber and the wireless, and then you've got the Ethernet, TCP IP APIs and sockets, like SSL, the presentation syntax layer, and then you've got the end user layer, like the application, like HTTPs and things like that. What you are saying is that what we're trying to do in, like in most of crypto and with Ethereum specifically right now, is when there's a change that should happen just at the HTTP level, like the end user, the application level, we have to go all the way down sometimes to the packet level or the frame level, and modify ether, modify TCP IP, when really we should just be sitting up here modifying the syntax of the end user layer.
00:36:55.484 - 00:36:56.984, Speaker A: Exactly. Yeah.
00:36:58.924 - 00:37:32.894, Speaker B: What's the bottom? So in the OSI stack, to keep this analogy running, I might run it out too far. Here. But the physical and the data layer and even the network layer really don't change. Like TCP IP, like Ethernet, like the wireless cables, like, no one's messing with those things these days. At least that's my understanding. So your understanding here would be that, like Ethereum, like, what's the base of that layer? Like, is it going to be ethereum? Are there like several of these l one s that will win? What do you guys both think here?
00:37:34.574 - 00:38:04.824, Speaker A: I mean, yeah, I mean, it doesn't matter perfectly to the OSI stack because ultimately it's analogy. But like, the way I view the stacks in a box in layer is, I define layer zero as social consensus. That's where it all starts. Like, you have. For layer one to have meaning, you need layer zero social consensus to agree what the rules of layer one is. And I see the layer one as the kind of data consensus layer. And then L2 is the execution layer.
00:38:04.824 - 00:38:25.084, Speaker A: And then on the execution layer, on the L2 execution layer, you can have applications on top of it, which is like the layer above. Or you wouldn't describe them as layer threes, but I would describe them as layer above. If you have EVM smart contract follow up on L2, you can deploy applications on top of it.
00:38:27.144 - 00:38:29.884, Speaker B: Preston, would you agree with Mustafa on most of this?
00:38:31.724 - 00:39:12.486, Speaker C: Yeah, I think Mustafa and I broadly agree on this thing. In crypto, we like to make distinctions of l one, l two, and then now people are saying l one five, all of these things. A lot of this is sort of stuff that's fun to debate over, but not super inherently meaningful. I think the point that Mustafa made that I agree most strongly with is that social consensus is like, layers zero are the most fundamental thing. And everything on top of social consensus is a bit malleable. And then I also really like his point of l one being the trust zone. So the validator set, which is where computers and the social consensus interact.
00:39:12.486 - 00:39:22.194, Speaker C: And then on top of that, you've got freedom and you can stack things as high as you want to go, and it doesn't really matter. You're all within the same trust zone. If you're sharing l zero and l one.
00:39:24.554 - 00:39:41.214, Speaker B: When does. So both of you share this app chain, thesis belief. When does all of this become a need, not a want? Is it in the next potential bull cycle where there's just a crazy amount of demand? And when does all of this become a need, not a want?
00:39:43.834 - 00:40:26.076, Speaker A: I think pretty much like yesterday when bitcoin, ethereum, every single bull market, l one fees skyrocket. And it's like, okay, we're not. Every single bull market is like, okay, query crypto is not ready for mass adoption. So I think ultimately the ultimate lead is we need scaling. And that's why Ethereum is now doing a roll up centric roadmap. So, like, scaling is obviously one of the most important reason why we need this multi chain or up chain thesis, because I think everyone, well, not everyone, like Solana, isn't on the same page, that it's not sustainable to assume, like, one synchronous blockchain will serve the entire web. That's ridiculous that you can't assume.
00:40:26.076 - 00:40:52.098, Speaker A: It's like assuming like, one server will serve the entire Internet. But other than that, I think we need also need it. It's very important to break, it's very important to have to enable app chains to break out of this layer. One loop I described. But every time you want to make an incremental improvement to execution environment, we launch a new layer one. And it's not sustainable. It's not economically sustainable.
00:40:52.098 - 00:41:01.694, Speaker A: At some point, these layer ones are not going to be funded anymore. That's why I think it's also very important to have roll ups.
00:41:03.154 - 00:41:30.754, Speaker C: There's one more really interesting point here, which is that you frame this in terms of a bull market. When the next bull market comes, we're going to need all these app chains. I think that framing is very much indicative of the state of crypto. Right now. You're sharing this single computer between the entire world. And so the only thing you can run on that computer is like the very highest value thing that you can think of. So if there was only one mainframe in the world, we would probably use that mainframe to run Nasdaq or something, right? We would use it for something incredibly high value.
00:41:30.754 - 00:42:20.680, Speaker C: But nobody wants to live in a world where nobody has computers except for Nasdaq. So what we're building out is the infrastructure where suddenly everybody can have a computer at home. And it's too early to say exactly what people are going to do with their computers. People didn't necessarily predict friendster and MySpace and Facebook and then TikTok and Instagram, but it's obvious from even where we're standing today that there are a ton of applications for useful blockchains in the same way that there are a ton of applications for home computers, even if you don't know quite what they are yet. I think ten years from now, we'll look back and we'll think it's kind of ridiculous that activity was so tied to prices. That's just an artifact of the fact that everything on chain is financial right now, because chains can't support anything non financial. So we're trying to build out that layer and then I think we'll see a lot of exciting things.
00:42:20.680 - 00:42:34.214, Speaker C: You'll probably see gaming and social as early applications. But broadly speaking, the reason we need app chains is not just to scale finances, it's to enable interesting use cases that are just not possible with the limitations of blockchains today.
00:42:34.954 - 00:42:40.294, Speaker B: Preston, Mustafa, are there anything, any things that stand out that you guys might disagree on?
00:42:43.954 - 00:42:56.294, Speaker A: Well, I can't think of any. Right. I think we've had various disagreements about how we serialize certain data structures in certain protocols, but I don't think there's anything super fundamental.
00:42:57.994 - 00:43:50.554, Speaker C: I think one thing that we disagree slightly on is where we see optimistic rollups fitting in in the future. So we're both broadly fans of ZK and optimistic, but I'm more bearish, I think, on optimistic roll ups in the long term than Mustafa is. So I'll tell you sort of why, and then, Mustafa, feel free to push back. But the reason I'm a little bit bearish on optimistic roll ups is that I think we have this shared vision of a future where you have tons and tons of different app chains and they're not necessarily all aware of each other. So the thing with optimistic roll ups is that they have a very weak assumption. Right? They have an assumption that there's at least one honest person watching the roll up. Okay? But in a future where there's a million different rollups, maybe that assumption doesn't hold up anymore because you might have some, like, you know, like, I have a personal website that's a little draft that's available on a corner of the Internet.
00:43:50.554 - 00:44:32.164, Speaker C: But I don't think anybody has ever gone there via Google. I don't think anybody but me has ever seen this website. But if your infrastructure assumes that there's always going to be an honest person, so it's always safe to bridge back and forth with any optimistic roll up, that assumption might break in the future when we have, when blockchains are where the Internet is today. So for that reason, I'm really bullish on ZK, just because it gives you complete firm trust that nothing can ever go wrong and so you can build simpler and more robust systems, systems. Now, in the short term, I think optimistic has a great future because we're a decade away from where we see this ending up. But I think that's one area where maybe we disagree slightly.
00:44:34.384 - 00:45:10.014, Speaker A: Yeah, I think ultimately depends on the scale you're talking about. I would say having optimistic roll up app chains definitely allows you to get a lot more chains securely than using your own layer one valve assets as you have the cosmos right now. Because of course, like having a honest minority assumption scales better than having an honest majority assumption. But of course having a no honesty assumption and just verifying the proof directly scales even better. Sorry, even better. But yeah, I'm bullish. Both I'm optimistic and ZK roll ups.
00:45:10.014 - 00:45:50.536, Speaker A: And I think ultimately for ZK roll ups, it's just a matter of reducing the proving costs. And it also kind of like pays a lot into the idea or the recent discussion of like, what optimism is saying, which is like, the roll up is not the bridge. So for example, like, optimism actually wants to also ZK prove their role up. Like, you can have multiple bridges, one of them is optimistic bridge, and another of them is like a ZK bridge. You can even have a pessimistic roll up that doesn't have either thought proofs or optimistic or validity proofs. You just have to run a full node. And interestingly, that's actually like how people built applications on bitcoin before ethereum even existed.
00:45:50.536 - 00:45:58.804, Speaker A: So you could say tether itself is a pessimistic roll up that uses bitcoin because it uses bitcoin as a daily.
00:46:01.384 - 00:46:11.428, Speaker B: That's interesting. In this world that you both envision. Where does the value accrue here? And maybe we can continue moving forward with the Uniswap example here.
00:46:11.596 - 00:47:19.484, Speaker A: Yes, my thesis is that there will be fewer Dn layers than there are execution layers, and there will be fewer execution layers than there are application layers. And my thesis is that the total value of the application layers will be greater than the total value of layers below it. So for example, the total value of the execution layers will be greater than the total value of the DA layers. But the value of the biggest dlaer will be bigger, will be potentially bigger than the value of the biggest application, for example, simply because of, because there's less DL layers than application layers on average. Potentially. So it's kind of like similar to how AWS provides infrastructure, but the value of AWS is much larger than the average application built on ls. But once you take all applications built on LWS on aggregates, they're probably greater in value than the value of AWS itself.
00:47:19.484 - 00:47:25.924, Speaker A: That's my theory, but I'm not strongly related to it.
00:47:26.744 - 00:47:28.044, Speaker B: Preston, what do you think?
00:47:29.544 - 00:48:24.158, Speaker C: Yeah, I think that's a very reasonable thesis there. So one interesting thing to think about is exactly this. Where does the value accrue? I think you generally accrue value whenever there's scarcity, right? So if you're providing something that not many other people can provide, then you can accrue value from that. So DA layers will accrue value, because being on a particular DA layer makes you part of the same trust zone, which means that you can bridge with other roll ups in a cross minimized way. So for that reason, Da layers have sort of natural network effects, which means you should expect them to accrue value. You'll also see value accrual on app chains specifically, which are popular, because any popular app is going to have more demand than it can possibly supply, because there are limits to how much you can ZK prove how much you can run on a single computer. And fundamentally, the idea of a single chain is that it needs to be able to run on one individual full node.
00:48:24.158 - 00:49:24.562, Speaker C: We don't currently have a good robust way of mapping a single machine to a bunch of computers. So the peak throughput of an app is the peak throughput of a single laptop, basically, which means that any app is always going to have basically a fee market emerge because more people want to interact with it than it can support. So this is actually a great reason why people should build app chains. If you're a token on Ethereum today, like if you're a popular app, you can launch like a governance token, but all of the fee revenue from your app accrues to the Ethereum validators. And the only way to make your token valuable is either you have some social pump or something which can happen, or you have to try to wrangle some innovative way to steal away the gas freeze from Ethereum and make them accrue to your roll up token. But if you launch as an app chain, then it just happens, you immediately start accruing the value of your app to your app token. It's a much nicer, much more natural way to align communities and to reward the people who are actually creating value.
00:49:24.562 - 00:49:51.524, Speaker C: So like, Uniswap is responsible for something like 80% of the fees on Ethereum today, and the unitoken accumulates basically none of that, right? Until they enable the fee switch, it does accumulate none of that, and even then it will only accumulate a small amount because much of Uniswap is actually happening at the gas layer. So there was a bit of a tangent, but broadly speaking, we expect DA layers and then application tokens to accrue pretty much all of the value.
00:49:51.984 - 00:50:22.324, Speaker B: Huh. That's interesting, because I was trying, before this recording, I was trying to think of both of your business models, and I wasn't fully sure. I was trying to think of the business models and the moat. And I guess maybe I'll turn that into a question for Mustafa, which is like, how hard is it for an l two or an l three? Once they've, they're using Celestia as the data, as the DA layer. Like, how, how tough is it to, for one, for an l three to move from one DA layer to another? And maybe there's a. Yeah, go ahead.
00:50:22.744 - 00:51:14.030, Speaker A: We want it to be as easy as possible, even though that might seem contradictory to, you know, our goals. And, like, we, like, we want to see, like, common da interfaces kind of like being developed in the industry. So, for example, we've even contributed like a modular da interface to the opstack, because this only makes sense in a world where there is a modular blockchain stack. And to kind of get to that, we actually need to make it possible to replace the DA layer. Because I don't think anyone wants to build a walled garden. I don't think anyone wants to build an application on a specific piece of infrastructure without knowing that they have the flexibility to move somewhere else if they wanted to and without doing a lot of work. I think that's a major advantage of a modular stack.
00:51:14.030 - 00:51:35.384, Speaker A: Like, if we create these common interfaces, then developers can have a lot more flexibility and freedom and confidence if they choose to pick particularly execution layer, they know because they're using common interfaces, they can switch in the future if they wanted to, and they're not building in a walled garden and stuck to a particular module.
00:51:35.684 - 00:51:58.704, Speaker B: Yeah, and when you guys, I'm assuming you guys have done a bunch of user conversations and customer conversations, like when you talk to those folks, when you talk to potential apps, apps who might go build their own l three, is there any conversation about, hey, we might actually just run our own da layer, or we might just build this in house, basically. Is that a conversation or. They all like this idea of outsourcing it.
00:52:00.264 - 00:53:04.724, Speaker A: They generally all like the idea of outsourcing it? I think some roll ups have, like, have, like, I know, like Zksync, for example, has to develop ZK Porter, but, like, it really kind of like, comes to fruition at least the same extent that we're building, like, we're building a decentralized data layer. So, for example, like, oblivion has any trust, but that's like a, like a centralized data availability committee. Slackware has something similar like a centralized data availability committee. And we've been actually talking to Slackware projects and we're trying to work with stockware to make it possible to deploy stockware roll ups or stockx roll ups using celestial SD layer. Because when we talk to these stockx roll ups, they don't like the idea of having a centralized data availability committee that's being provided by default. And so if you want to do things properly and have a decentralized data layer, you can't just wake up and decide to do it. It's actually very, very difficult because.
00:53:06.584 - 00:53:06.872, Speaker B: You.
00:53:06.888 - 00:53:39.914, Speaker A: Need to have decentralized validator sets, but also you need to be credibly neutral, especially for application specific roll up. They prefer building an incredibly neutral data layer, like let's say like Polygon had its own the a layer. Like it's unlikely. For example like arbitrarium, we want to use Polycon, Polygon avail and maybe that's part of the reason why avail kind of spun out from Polygon to its own independent project so it can be more currently neutral.
00:53:40.734 - 00:54:01.384, Speaker B: Nice, Preston, let me just ask you then. I want to actually just learn a little more about this announcement. So like, until now it's been very tough for a developer to deploy their own ZK rollup. You guys just launched this SDK to do this. Is this something that folks can use today? Is this something that's here but coming soon. Tell me about the SDK that you guys just launched.
00:54:02.124 - 00:54:45.272, Speaker C: Yeah, absolutely. Sovereign, broadly speaking, is building a toolkit for building roll ups. We were talking about this analogy of the OSI stack earlier. Imagine that every time you wanted to launch a new web app, you had to build your own HTTP server and then you had to like write your actual application logic in assembly by hand. That's basically where we are with roll ups today. Like every single roll up team has their own full node implementation and they've got a full time set of engineers who are just building this full node. And then on top of that they've got like PhD cryptographers who are handwriting circuits to like very, in a very specialized way to encode the application logic of the ZK rollup.
00:54:45.272 - 00:55:25.882, Speaker C: And that's just never going to be sustainable or scalable. What sovereign is doing is we're building a toolkit where you get your full node implementation totally for free and you can write your business logic in a normal programming language that lots and lots of developers know how to write. And then we generate all of the snark machinery for you. So suddenly, instead of having to recruit a whole team of people, you can launch your own roll up in just a few hundred lines of code. So we have demos of this today. Now, we just launched our Alpha and the alpha is basically like, hey, for the first time, Sovereign has enough features that you could actually use it to build an application with. The alpha is definitely an alpha release.
00:55:25.882 - 00:55:50.234, Speaker C: Like, there are security problems that we know of. There's lots of performance improvements that are coming down the pipeline. But this means basically, like, for the first time you can deploy a roll up on Celestia with just a couple of lines of code and you can fully customize its behavior. Like, you can use accounts, you can use utxos. If you want to deploy a full virtual machine, you can do that. If you want to have an app specific role, you can do that. That's our alpha release.
00:55:50.234 - 00:56:08.920, Speaker C: It's the first time that Sovereign has enough features that it actually runs and you can use it. And we're headed towards beta, which will be when it's like, we've done some audits. We're very confident that it's reliable and secure and you can use it to build apps. It's just not quite fully feature complete. And then we'll release a full version after that.
00:56:09.112 - 00:56:15.524, Speaker B: Nice. That's exciting. And you guys are working with Mustafa? Yeah. And Celestia on the data available, the da layer.
00:56:17.064 - 00:56:43.670, Speaker C: Yeah. So the sovereign is pretty interesting in that it's fully generic over basically every component. So you can plug in different DA layers, you can plug in different ZK snark systems. But Celestia is one of the leaders in the DA space. And so we have been, we use them for our demos. We've also got a partnership with avail, the formerly Polygon avail, and we're building some demos with them as well right now. But, yeah, Celestia.
00:56:43.670 - 00:57:07.026, Speaker C: Most of our design thinking was initially based around Celestia because it's such an interesting environment to program for. Because there is no smart contracting layer. It forces you to think very robustly about exactly what capabilities your roll up needs from its underlying DHA. So Celestia was our first integration and is where our demo is run today. And we also expect it to be a great place to run in the long term.
00:57:07.210 - 00:57:12.334, Speaker B: Nice. Mustafa, anything coming from you guys this year that we should be on the lookout for?
00:57:13.354 - 00:57:27.094, Speaker A: Absolutely. We have mainnet coming this year. It's going to be a culmination of four years of effort since the latest edge of white paper was first created in 2019, so, yes. Stay tuned for that.
00:57:29.384 - 00:57:45.404, Speaker B: Amazing. Exciting. All right, cool, guys. Well, Preston, Mustafa, I will admit some of this was a little over my head, but I definitely learned a lot. And, yeah, appreciate, appreciate you guys coming on. Definitely gave me a better understanding of what you guys are both building, but also just the app chain, thesis roll ups, l three s in general. So, yeah, really appreciate the time.
00:57:45.404 - 00:57:46.624, Speaker B: Likewise.
