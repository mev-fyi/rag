00:00:00.200 - 00:00:40.250, Speaker A: Hey everyone, Sante and I have been talking about Solana a lot recently and we're excited to have a Solana sponsor of Empire Marinade. Marinade is a staking protocol on Solana and the only stake pool that delivers auto rebalancing, mev rewards and automatic downside protection with their new protected staking rewards. Optimize your sole stake with Marinade by hitting the link in the show notes. Big thanks to Marinade. We'll talk more about them later in the show. This episode is brought to you by Avalanche. Avalanche is a leading network of blockchains giving some of the world's largest financial institutions new use cases and business models while leveraging completely customizable infrastructure.
00:00:40.250 - 00:01:09.806, Speaker A: Check them out. It's core app discover. You can explore Avalanche's subnet ecosystem at core app Discover I was playing around earlier today. Really cool. This episode is brought to you by Mantle. Mantle is an l two backed by over a $4 billion treasury, obviously one of the largest in the industry. They recently launched their airdrop program called the Reward station to distribute both pre sale token allocations or listed tokens to MNT holders who stake their MNT.
00:01:09.806 - 00:01:20.530, Speaker A: Mantle has nailed their rewards program recently. Would highly encourage folks to check out the mantle rewards program at Mantle XYZ Rewards station.
00:01:23.430 - 00:01:57.978, Speaker B: Hi everyone. Welcome back to Empire. We have two very special guests. You know we have Steffi and Dino from fluent. Dino is co founder, CEO Steffe is a CoO and I think this would be a great episode we're going to talk about. They just rolled out something really interesting called blended execution environment. But when I first thought about bringing these guys on the pod, first of all, I'm an investor so full disclosure, obviously biased, but I think there's been a lot of chatter over the last couple of years around these different execution environments, different Vmsheen.
00:01:57.978 - 00:02:39.970, Speaker B: We've had multiple people on the pod talking about different trade offs. And when I think of someone who's at a very interesting vantage point that can talk about all the different trade offs and is really deno. And when I first had a conversation with him last year, I found him to be extremely knowledgeable about just historically what has happened in crypto, someone that has paid a lot of attention first in Ethereum and then started to pay attention in other ecosystems as well. And so I think this episode would be really great to talk about the different execution environments and then ultimately what fluent is building and this blended execution environment which I think is coming at a really interesting time. So welcome both. Excited to have you on thank you.
00:02:40.010 - 00:02:41.270, Speaker C: Thank you. Good to be here.
00:02:43.650 - 00:02:47.910, Speaker B: Yeah. So maybe, Dino, why don't you get started with intros, and then we'll go from there.
00:02:49.370 - 00:03:24.296, Speaker C: Sure. Yep. As Santi said, dino, one of the co founders of Fluent, and we are building the first blended execution network, and steph is coo of affluent. Yeah, we'll start with the status quo. I mean, the way we've seen things historically is these execution environments have been built. And again, this could be like l one, l two, l three. Any execution environment, the way we've seen them built so far, has been in what we'd call the single execution paradigm.
00:03:24.296 - 00:03:44.400, Speaker C: And so the way we define single execution networks is a network that I support for apps from one VM target. So, very simple. One VM. This could be the EVM. This could be the SVM. This could be the move VM. It doesn't really matter, but think of an execution layer that supports one of them.
00:03:44.400 - 00:04:14.102, Speaker C: And historically, this has really just been the EVM. Over the past few years, there's just been a ton of EVML two s that have popped up all over the place, but they largely kind of look similar. And what we found is, I mean, this is clearly, like, limiting, right? Like, you can. EVM has certain technical limitations that people love to point out. And, like, we, we certainly have seen those as well. And. And even, like, on the.
00:04:14.102 - 00:04:55.840, Speaker C: On the language side, right? Like, you can only deploy solidity smart contracts, Viper smart contracts, and those two things can kind of, like, natively interoperate, but you can't really benefit from any other libraries in other languages. You can have smart contracts in any other languages. People are working on changing the EVM to support things like parallelization, but by default, that has just not been the case. So what have you seen? You've seen over the past year, there'd be especially a lot of excitement around. You can call them alt vms, you can call them next gen vms. But things like the SVM, things like the movie, have gained a lot of steam, and for good reason, too. People know the SVM for kind of, like, parallelization that obviously supports rust as a language.
00:04:55.840 - 00:05:31.284, Speaker C: And there are also, I mean, that's gotten popular. So there are also not only technical attributes that are interesting, but also, I'll say, like, ecosystem or go to market attributes that are interesting, like, just like, a slew of other, like, tools and things like that. And then the, you know, move obviously has, like, formal verification, which is interesting for, like, security purposes. And so you see more and more of these, like, vms popping up. But the problem is that in a single execution environment you have to make this trade off. As a developer. If I'm a Dapp developer, I am innovating on some new type of Dex or some new social fi app or whatever.
00:05:31.284 - 00:06:10.460, Speaker C: I have to make the choice. Do I deploy on one of the EVM L two s and get all of the network effects? It's like, ok, this is great. If I have a problem, I can type it in a chat GPT, I can copy paste some of the primitives of smart contracts and build upon those. The quicker iteration loop, huge user base wallet integrations. But I cannot use any of the new functionality of the next gen vms that are popping up. So what do I do? Obviously, if I care enough about that functionality, I'm placing a pretty big bet because I have to build something new and I have to take a bet on this ecosystem and I don't get any of the network effects. I hope they succeed and I hope they get escape velocity.
00:06:10.460 - 00:07:12.190, Speaker C: This has clearly been a problem over the past year, and what we've seen is the alt vms become more and more desirable by developers. And so what do people naturally do? They say, okay, it's not a totally novel idea to be able to say, let me just try to get the best of both worlds. But it's the way that people have approached it so far that we've kind of found suboptimal, or people in our view, fundamentally are just taking these two different vm, or more different vm environments and trying to make them as interoperable as possible. But if you don't architect that from the ground up in a way that actually makes the experience good, it gets clunky and then people don't use it. So I mean, there's been a few different approaches that actually, Steph, maybe you want to talk to. But fundamentally we do see these as two different environments, two different single execution environments either being stacked on top of each other or put next to each other. There are different approaches, but maybe, Steph, you can talk a little bit more to that.
00:07:12.820 - 00:08:12.660, Speaker D: Yeah, sure. So basically, these EVM networks, or any network that tries to combine multiple vm, most of the solutions involve actually having two different states. So what does that actually mean in practice? It often means that let's say it's an SVM network and you want to also support EVM on top of that. So in addition to contracts in Solana rest, you want to also support contracts and solidity. What ends up happening is that you have your SVM down here and you have contracts like Solana contracts here, and you have like a proxy network, which is the EVM network up here. And so generally what happens is you'll have to have, as a user, you'll somewhat bridge into that network, you'll have a separate wallet, a separate native token, and in effect, although everything eventually does make it into the same blocks, like of the overarching network, like the user experience is completely fragmented into two separate state environments. So the network does support multiple vms, but not in a seamlessly interoperable way.
00:08:12.660 - 00:09:03.900, Speaker D: So at fluent, you know, our journey was, okay, we want to support ZK WASM, we also want to support the EVM and able to have that, you know, those network effects bring in like slot or, sorry, solidity developers and things like this. But we found it to be an unacceptable trade off that it would effectively be two separate networks. So we thought to look deeper. How can we get both of these networks and put them on a shared state environment, such that as a user, I get to use one native token, one wallet of my choice. And as a developer, I don't have to think about the additional complexities and have these two separate environments effectively acting as one. In doing so, we also notice that in our design, it's actually extensible. So we first started with WASM and EVM, but then we're like, oh, hey, look, we can also add SVM, we can also add moviemouse, and effectively have them all live in this one shared state environment.
00:09:03.900 - 00:09:08.500, Speaker D: I'll pause there before going too technical, but I think that was what you're getting at. Dino.
00:09:08.800 - 00:09:25.980, Speaker B: Well, there's a lot to unpack there, and I want to just double click on a lot of those features. But just for the general user, I want to make sure that things are pretty clear here. Let's define an execution environment. Let's define a virtual machine. And then I think I want to revisit what you just said. Stephanie.
00:09:27.460 - 00:09:49.532, Speaker C: Yes. Yeah, no, that's a great point. I feel like over, because the idea of a VM is actually not unique to blockchain. It's kind of like this. It's like this virtual environment thinking about VMware. Exactly when was VMware started? Like 2000 or something like that. So it's been around for a while.
00:09:49.532 - 00:10:29.206, Speaker C: But I think what's gotten confusing for a lot of people in blockchain is the term VM has kind of been bastardized a little bit. You can probably blame the EVM for this. It's funny because I actually don't hate on the EVM that much because I do see a lot of value in the go to market attributes that we were talking about before just as a startup person, but that did bastardize the term. So what people do is they conflate two different things together right now in the space. One is a virtual machine and the other is an execution environment. Really. What? A virtual machine is just a sandbox to run like certain types of binaries, right? Like, it's literally just like, it's like the smaller sandbox.
00:10:29.206 - 00:11:13.510, Speaker C: And like, the execution environment is like the bigger sandbox. So if you look at like most of like the, from our view, the interesting areas of innovation are actually in kind of the broader execution environment. When you, when you see, you know, people try to like things with like, account abstraction. If you're trying to like add IBC into some type of environment, like that doesn't really have to do with the small sandbox where you're putting your solidity code or whatever code that's actually in like the broader execution environment. So what we're, what we're trying to say is, and by the way, another way to think about it is the execution environment is like the whole state transition function. That state transition function can actually include other state transition functions such as different vms. And then it also does some types of protocol checks.
00:11:13.510 - 00:11:37.100, Speaker C: And then in our case, it gets ZK proven. So I guess maybe you can think of it as just a little sandbox inside of a bigger sandbox or something like that. We do think most of like, the interesting area of design is in like the broader execution environment. That's why we don't really look at it as like a blended vm per se. We say blended execution network because it's really about the bigger thing. So hopefully that's helpful. But I can go further.
00:11:37.840 - 00:12:10.382, Speaker B: Yeah, that's really because I think, like, the key point I think is, and I think you're going to keep hearing it over and over in this episode, is a state transition. Because ultimately, like, blockchains are that like, whenever you're swapping tokens, whenever you're sending stuff, whenever you're doing whatever function that requires, it requires this thing called the state transient transition. And then that's ultimately recorded in a particular block. And then you need to make sure that that blocks actually included verified, you know, the proper, you know, gas and all the other. All of that happens at the execution environment. Right. So, so that's how I think.
00:12:10.566 - 00:12:27.490, Speaker C: And I think exactly. And the thing is, like, with what people have I think done so far is just kind of called both of those things, like the VM. So sometimes when people are talking about a VM, they literally mean just, like, you know, the smaller sandbox, and sometimes they mean the bigger one, which. Which makes it a little bit confusing.
00:12:27.530 - 00:13:00.360, Speaker B: So, yeah. Steffi, I want to go back to something you said, and also, Dina, you alluded to, like, there's been a lot of different, I guess, experimentation on execution environments. And I'm curious, like, when you think about the journey of fluent, like, what inspired, what was the problem that you saw? And just, I want to understand, like, that journey, and then transition into, like, blended execution environment and what that ultimately solves.
00:13:02.460 - 00:13:44.402, Speaker D: Yeah, I can take this one. So the beginnings of the project were, you know, focused on WASM. So the notion of how do we bring traditional programming languages to Ethereum? And that's, you know, a major unlock, because traditionally, there are other execution environments that are other networks that do support wasM, but we haven't seen it yet in the ethereum ecosystem. And why bring this to Ethereum? It's the network effects of Ethereum as a roll up. And so you get basically the best of both worlds. So that was the initial thought. But as noted, we realized that when you get onto the l two, especially in the state that we're at in the market, people are most familiar with solidity with EVM standards, things like this.
00:13:44.402 - 00:14:54.914, Speaker D: And so jumping straight to wasm on Ethereum was it could potentially limit us from being able to support all of the people who are already in web3. We want to also talk to web3 developers and web two developers. So then that became the journey of how do we make this WaSM environment also EVM compatible? And so I kind of mentioned it before, there's been a number of attempts in the past, and other networks are also doing this, like an all VM plus an EVM. But we just didn't want to sacrifice on user experience in any way. So that became the question of how do we enable wASM contracts in rust and typescript and whatnot, contracts in solidity, but have those natively talk to each other and have them atomically be able to compose? Which, there's two benefits to this. Well, actually, there's a number of benefits to this. One, you enable this broader pool of developers being from web two and from web3, but also you're able to make some really interesting applications that not only use just rust or just typescript, but also can add some crypto related logic in solidity.
00:14:54.914 - 00:16:17.240, Speaker D: So you can imagine trying to make a more performant Dex in rust or something like that. If it were just a wasm based environment and you didn't have any tokens that people are familiar with, like ERC 20s, then where's the financialization in that? But with something like blended execution and everything being in one state, shared state machine, you're able to have that DeX, which is performant in rust, and it can interact with ERC 20 contracts seamlessly in a way that doesn't affect the user or developer experience. So that was the first part of the journey, was like, how do we mix this web two, the performance of web two things, and then also the financialization of web3 and crypto and solidity, and bring some of these two worlds together. But then we realized that we didn't want to limit it to just the EVM because our design was extensible and because it was a different way of doing it than other networks had done it before, and hence expanding to this notion of blended execution of different virtual machines or supporting apps from different virtual machines. But I think I'm going a little bit too far here. But blended execution in the fluent context is going to involve wasm, EVM, SVM. But the idea of a blended execution network and using the fluent based framework means that a developer could build a roll up that has any kind of mixture of execution of VM support that they want.
00:16:17.240 - 00:16:32.696, Speaker D: Right. So it could be. I like things from the moviem. I like things from SVM. Like, that's the mix that I want to do. And so we want to encourage experimentation of this idea of bringing different VM targets together, whether whatever combination a developer finds most interesting. So.
00:16:32.696 - 00:16:41.900, Speaker D: So I'm going to pause there, but it really can go beyond what fluent supports, just being what developers find interesting for their mix of blended execution.
00:16:42.720 - 00:16:45.580, Speaker B: Yeah. Do you know anything to add there?
00:16:45.960 - 00:17:33.782, Speaker C: Yeah, I was just going to add just kind of like, zooming out to more of just like, the startup context and kind of why we took the approach that we did. I mean, I think generally it's important to innovate, but at the same time, like, meet the market where it is. And so, like, you see this all across the board, right? Like, even dating back to a Netflix and how they started with just dvd by mail, but also had an eye towards streaming and kind of built their systems along the way to introduce it, whether it's on the tech side or on the marketing side towards streaming. And then, of course, they had an eye towards that. Or I think in the web3 context I think forecaster has done a really, really good job with that. Where they did start with, they met the market where it is in terms of messaging the product itself around crypto natives. But as you can see now, they've architected the system in a way where it is super scalable towards the masses.
00:17:33.782 - 00:18:12.658, Speaker C: And we kind of like have that same philosophy, and that's why we do really want to. And that's where it's more art than science. It's like, how do you meet the market where it is enough, but also design the system to where it's kind of future proof enough? And so that's kind of, that was always like our design goal. And then obviously, blended execution is the way we've executed on it so far. And just to. Just to add a little bit more to kind of what Steph said on the why it kind of, like, matters side, actually, would it be helpful if we dove into blended execution first, almost like defined it, or kind of like.
00:18:12.714 - 00:18:14.746, Speaker B: Yeah, why don't we just define it?
00:18:14.938 - 00:18:53.380, Speaker C: Okay, so I would probably say blended execute, like a blended execution network is. It could be a blockchain, so it could be an l one, l two, l three, doesn't matter. That supports native composability between apps from different vm targets. Now, obviously throwing in some technical words there, because I wanted to point out that it's really just to reemphasize that it's not taking a number of vms and running them in the same place. It's actually an environment that uses some pretty low level primitives to support this native composability. In our case, we're building the first bung execution network. Hopefully many more to come.
00:18:53.380 - 00:19:34.660, Speaker C: But what we're focused on is EVM apps was maps and SVM apps. And the beauty from, like, a developer and user experience is that, like, from a developer perspective, these smart contracts. So, like, the Wasm rust smart contracts can actually call, they can directly talk to the, you know, the SVM rust smart contracts, which can directly talk to the solidity EVM smart contracts. And this kind of creates, like. And actually, steph, maybe this is where you can kind of, like, pick up the thread from before and talk a little bit more to, like, the benefits. But I mean, it really does actually unify these different ecosystems and create this, like, diversity of, like, this much more versatile design space for people.
00:19:36.160 - 00:20:16.132, Speaker D: And I guess, like, just to make it, like, abundantly clear, like, blended vm is different from the notion of multi vm. Although there is, like, support for apps from multiple different virtual machines. It's, at the end of the day, it's actually just one virtual machine, which is like the rwas and virtual machine, which is used to simulate these different VM targets. Right. So I just want to make that very clear, because in other solutions, you're actually running two, three different state transition functions, but in our solution, it's just one, all under the hood. But that complexity is abstracted away from the developer as well as the user. So in the end state, what should happen is that a developer will be able to effectively copy and paste some solidity code.
00:20:16.132 - 00:21:08.310, Speaker D: So let's say any existing app that already exists, you should be able to port it over and you in order to call contracts like. So if it's just like a solidity, solidity conversation, you don't have to think about it. But if you are calling a WASM contract or calling an SVM based contract, you just have to route through these things that we call the compatibility contracts, which are core system contracts which enable that communication. But there shouldn't be too much additional overhead for you as a developer. We want to make that as easy as possible, so it's effectively as seamless as possible as deploying an app on a native EVM or a native SVM network. So what are the benefits to that? Effectively, it's twofold. One was the example that I mentioned before, which was this notion of being able to make really interesting applications that make use of smart contracts that pertain to different vms generally, and being able to mix and match in that way.
00:21:08.310 - 00:21:43.414, Speaker D: We're effectively creating an additional execution point where apps from other ecosystems can come and just redeploy quite easily. Why would you want to do that? Well, fluent is effectively an additional market for you. You can have, let's say, radium on Solana, and you can have radium on fluent. If it's just a copy and paste situation, there's not much overhead. You're able to access a different pool of users than you might otherwise wouldn't have had on Solana. What's great about it is, like Dino mentioned before, you have to convince people to come to your alt VM network. You have to show them why it's valuable.
00:21:43.414 - 00:22:05.538, Speaker D: You have to hope that people are going to want to come over, use this new virtual machine and build network effects from there. But what we're saying is, how about this? We can create an environment in which everybody can come join, and so you benefit from each other's network effects. And so Solana apps, talking to uVM apps talking to Wazm apps and adding that additional web two functionality, and then the PI can grow from there.
00:22:05.714 - 00:22:39.994, Speaker B: Yeah, in many ways, I want to get into the type of applications that you foresee that would be huge unlocks, but just putting it more concretely for people to visualize. So, like you're saying if there's a Dex in Solana and a Dex in Ethereum, it's going to be extremely easy to just copy paste into the fluent environment. The user would much rather go directly to fluent than trying to bridge and interact with all these different other just hop across networks.
00:22:40.162 - 00:24:00.248, Speaker C: So, yes, I think you can look at it from the developer benefits and then the user benefits, and obviously they intertwined in places. So, like, a developer benefit is kind of, as Steph was saying, like kind of a greater access to more types of apps and liquidity that wouldn't exist kind of elsewhere. Because if you're put yourself in the shoes of a developer, right, like, if you're going to deploy in some, like, purely alt vm context, well, that ecosystem is being built from, from scratch. But also, if you were going to deploy, even if it was a solidity contract, right, and you were going to deploy it in one of the hundreds of EvM only l two s, well, you're never going to get that emergent effect of your app being composed with the ten best SVM apps and the ten best wasm apps and stuff like that. There's somewhat of, I think people can intuit that that's useful because it's like, okay, there's new experiences that can compose with each other, and then there's just more of an emergent effect that I think compounds over time. And then from a user's perspective, you could also think of a base case as, I am an EVM wallet user, and I want to just like, use, like, I don't want to change wallets. Like, I just want to, like, use all the good apps and not really have to think much about it.
00:24:00.248 - 00:24:12.176, Speaker C: Like, I don't like, there are plenty of Solana apps that. That I would love to use, but I don't want to, like, change a bunch of things. I just want to use them. So that's kind of like the way I look at developer and user experiences. Hopefully.
00:24:12.208 - 00:24:19.180, Speaker B: That's like, yeah, definitely. So you announced this, I think it was a couple of weeks ago.
00:24:19.920 - 00:24:20.296, Speaker C: Yep.
00:24:20.328 - 00:24:46.150, Speaker B: Right. What kind of reception have you been getting from developers in particular? What kind of apps are been most interested? Or is it existing apps? Is it just people that have said, oh, wow, like, you know, you're really abstracting all the complexity. I really have thought about this particular app, but haven't been able to really build it because of this fragmentation that currently exists. I'm curious, like, what kind of reception you're getting.
00:24:46.690 - 00:25:35.366, Speaker C: So I think we've been pleasantly surprised so far with the reception to the value prop that I just mentioned from developers. I think the base case is that straightforward of like, okay, well, look, we have a multi chain strategy. I mean, usually so far, it's been a lot of people we've talked to who are already kind of, like, deploying on different roll ups, and it's like, okay, well, fluent gives me access to a broader market of things, and there are some existing things, like people. And keep in mind, we're still in private Devnet, so it's not like we're still kind of building the ecosystem, but as far as the reception that we've gotten so far, it's, oh, wow. So there's going to be SVM apps and Wazen VM apps that deploy there. So, yes, like Steph said, it's an extra execution point. And usually that's kind of enough for somebody who already has a multi chain strategy.
00:25:35.366 - 00:26:11.058, Speaker C: They kind of get it, and then I think for like, some brand new. And that's for the most part, been like, kind of like defi so far. And then I think if you look around to some of, like, the conversations we're having with, like, new app experiences, I think that there's. There's certainly a lot of, like, social and, like, gaming use cases that lend pretty well towards webassembly. And I think. So it depends how far you want to go with that, like, because if you step even, like, further and say, like, okay, well, there's the. The solidity apps and the value prop for them.
00:26:11.058 - 00:26:56.748, Speaker C: There's the wasm or more social, consumer y apps in the value prop for them. Now you can actually go a step further and say, all right, there's this notion of blended apps where the app itself is actually composed of smart contracts from these different VM environments. And that's where I think that things could get pretty interesting. And we're actually just experimenting with that ourselves. And we actually, our Deverell's just spun up, like a couple of games that we'll hopefully demonstrate in the next week. Kind of like a chess game is the first one where you could actually see the different parts of, as somebody's using this game, what's actually happening under the covers is like a rust smart contract. Is talking directly to a solidity smart contract.
00:26:56.748 - 00:27:52.790, Speaker C: And I think we're in the early innings again, but getting the juices flowing as to what can be built in that environment. And this was kind of evident in like, just the wasm only world that we were in before. But I think that there, there's some cool stuff that fits into, like, I'll say, the autonomous world type way of thinking where, like, all right, I'm a developer and I can just focus on, I own, like I say, I only know solidity, and so I can just focus on building like a primitive towards a game or a world or whatever experience in solidity, deploying it on fluent. And then what? Like, maybe I don't build anything else, but I know that now. The market, the audience of people who can build on top of my, like, low level level primitive and the, let's just say in this case, the games that can be kind of built in parallel using that primitive now goes from solidity developers to any developers who care for any of these different ecosystems can all compose on my primitive. It's just like a very exciting notion.
00:27:54.130 - 00:29:04.330, Speaker B: Yeah, I want to at some point get into these compatibility contracts you mentioned because composability is something that is talked about a lot, but I think is like, is, is not properly understood or doesn't like, has the right nuance to it because, you know, this, this was your composability started to like, oh, you remember the time of like, Defcon and Osaka? Was it Osaka? Everyone's like, oh, you know, things are gonna break. You know, we're gonna go on l two and, you know, composability. But I'm like, my, my thought then and still is, is like, the Internet had this problem too. And so ultimately you had to just build better, like middleware, so to speak. Like better, like connective tissue between these different ecosystems and standards. And oftentimes, like when I talk to teams, like, whether it's a new l two or, you know, a new network, like, like a movement based language, like chain or, you know, near or something like that, it's like the tooling is not there and it makes it very hard for developers. And I think, like, in ethereum, like, this was like the appeal to, like, you know, for wasm, right? It's just like bringing just a whole wider range of developers.
00:29:04.330 - 00:29:14.090, Speaker B: But I'm curious, like, if we can go into these compatibility contracts which I think are like, pretty fascinating, which are powering all this, like, you know, connectivity, right, so to speak.
00:29:16.070 - 00:29:51.838, Speaker D: Yeah, I can take that one effectively. Like the compatibility contracts are what enable you to speak to different contracts pertaining to different vm targets. So the alternative approach to that, like what is composability or interoperability? But like generally speaking, if you were going to be like an EBM app or solidity app or you're a user of one and you want to then, you know, move over and do something on Solana world, like you have to use a bridge, you have to move over. And like that adds an additional trust assumption. You, you know, you can't, it's, it's not atomic. You're going to have to wait a couple blocks. Like there's a little bit of like a delay.
00:29:51.838 - 00:29:56.770, Speaker D: And that's just kind of the status quo for compatibility between different networks at this point. I'm.
00:29:58.740 - 00:30:22.332, Speaker B: On that point. Like there's a lot of interoperability today with chains. You are taking some trust and lag and delay assumptions, right. Because you have to your point. So there's a lot of interoperability, but not like composability is like a top. Like, well, when I think of composability, it's like, yeah, it's atomic or near atomic or whatever trade off. If it's defi or gaming, well maybe it's composable.
00:30:22.332 - 00:30:35.020, Speaker B: But, you know, in one, you're willing to accept certain degree of latency because otherwise there's a lot of mev. But there's two really important points that I just heard, like interoperability and composability. Two different things. Right?
00:30:35.720 - 00:31:02.608, Speaker D: Good point. I guess, like, you know what? That's a fair point. Like, I guess I did my mental model. I never saw composability as 100% pertaining to atomic composability. Like, I feel sometimes those words kind of get like, you know, traded around. And so when I say composability, I guess, I mean in like the broadest possible sense that you're able to talk from, you know, one contract or one network to another. But I will then, you know, dial in more that.
00:31:02.608 - 00:31:09.488, Speaker D: Like these compatibility contracts enable atomic and real time composability. Just for sake of doubt, I'm just.
00:31:09.504 - 00:31:10.376, Speaker C: Because I wasn't just you.
00:31:10.448 - 00:31:30.570, Speaker B: Because in my mind, like no one's, no one's been able to do that if, from, from, correct me if I'm wrong, but like that, that's the key novelty here because there's a, people might be comparing it to bridges and again, interoperability but not atomic composability. At the smart contract, in my mind, that's the key hallmark that's the key innovation here that I think is so awesome.
00:31:31.150 - 00:32:23.490, Speaker D: Totally. And so, yeah, like how in the world we're in right now, right where you have, like, you know, various disparate roll ups, you're thinking about how do we maintain interoperability? How do we try to achieve atomic composability? And there's like a number of different ways that's being done, like via shared sequencers or via ZKC transition proof bridges, I think is the closest you can get. But at the end of the day, you are trying to fit things together that are from different environments. The difference with what we're doing at fluent is we are the same environment. I want to reiterate and make very clear that it's not two different vms talking to each other. We're not enabling composability between two different vms, but it's the one larger fluent VM which is able to simulate these VM targets on top of it. And hence the atomic composability happens all, like, on that same state at the RwASM level.
00:32:23.490 - 00:32:45.110, Speaker D: So the compatibility contracts are effectively a way to route transactions between the different types of contracts on the network. But everything is then compiled down to our wasm, where the composability actually takes place. So you're not. You're effectively not doing interop between different networks, different state machines. It's all one state machine, and hence it's atomic and synchronously composable.
00:32:46.570 - 00:33:09.842, Speaker C: There's. There's one thing I want to actually just build on from what Steph was talking about, which is just like, generally how we see kind of like, these execution environments shaping up, right. We're talking about, like, composability. We're talking about interoperability. And I just want to make one thing, like, pretty clear. This is our thesis is not that there should just be kind of a consolidation back to one big fat l two, right? Like, we're not trying to eat everybody's lunch. We're not trying.
00:33:09.842 - 00:33:39.010, Speaker C: We're not realistically. Like, we're not even trying to support, you know, all the. All the VM like targets on Rl two. It's hard to do, right. There's a lot of different coordination things under the hood. And so right now, we are really just focused on those three app and VM environments. But regardless how we see the kind of the future of these execution environments is really more that blended execution is just like a better way to create them.
00:33:39.010 - 00:34:18.445, Speaker C: And so if you're somebody who envisions a million different execution environments. A million different l two s, l three s, whatever. We would just definitely prefer those to be kind of like blended execution networks instead of single execution networks. And you can hyper customize them for whatever you want, because there's still a million reasons why you might want to build your own separate state machine from the other state machines. Like privacy. There's kind of like enterprise use cases, there's even just monetary incentive use cases, maybe value capture and stuff like that. That's all real and that's still going to require like really tightened interop solutions between even blended execution networks.
00:34:18.445 - 00:34:27.409, Speaker C: So it all does kind of like, I think it fits very well personally into the modular thesis. So I just wanted to clarify that really quick.
00:34:28.709 - 00:35:15.540, Speaker B: No, that's such a good point. So when you think about the, I guess on the modularity point, we are seeing an explosion of, as you pointed out, multiple, you know, l two s, l three s. We're seeing some like movement, you know, move based l two, you have the multiple SVM implementations that you have. Like, Aurora, like, I'm curious, like how you think about like, now that you've introduced this blended execution environment, how do you see them existing with like in a blended execution environment? Like, what is their place in the world now that we have blended execution? Like, how do you envision this kind of your place in the ecosystem and also what it actually means for the rest of the kind of the different execution environments?
00:35:17.280 - 00:36:05.990, Speaker D: Yeah, I think kind of touching on it before and what, you know, said like, not here to steal anybody's lunch. And like, there is obviously benefits to like having a state machine that is like customized to exactly what you want. So like there could be, there is there certainly a world in which like you just want like an EVML too, like, because like, that's the flavor of products that you want to offer to the world. So in our mind, we're just working on really innovating at the execution layer. So if developers want to, if you want to comment to the fluent l two, you'll benefit from all of the different vms that the network supports, but also you can innovate even farther. Like Dino said, we can enable support for different vms. Like maybe you want to have fuel, VM plus EVM, and that could be some kind of interesting combination for you.
00:36:05.990 - 00:36:40.190, Speaker D: Maybe it's just Rosam and fuel, or just being able to mix and match in multiple different ways, but we fundamentally don't see it as taking value away from these single execution networks that can also still live in harmony and offer their unique value props to their users as well. At the end of the day, we fundamentally don't believe that there's going to be one state machine to rule them all. It's just, there's no way we're going to get the entire world's traffic on just one giant l two or one giant l one. We're just offering a different way to innovate at the execution layer, but certainly not at the expense of all of the great things that these other networks offer.
00:36:40.730 - 00:37:17.222, Speaker C: And by the way, just to add on that, even though we've talked a lot about the technical innovations and differentiation, even as somebody building this fun to execution thing, I see that as only part of the puzzle. You can innovate in other ways. You can innovate in some. Even if you are a single execution network, you can do perfectly fine innovating on different mechanics. Maybe governance incentivization, you can kind of bundle things and unbundle things. Something can go with kind of like, you know, some apps baked into like the precompiles or some type of pre compiles that make like, ML easier on their thing. It really is.
00:37:17.222 - 00:37:34.290, Speaker C: So I. Maybe I'm just like a hyper bull on, like, how many of these, like, state machines separate state machines, like, people will actually need, but this is just, I think, a really innovative way to kind of like, architect it, like, on the, on the technical side of it, but there's just like, way more to the puzzle.
00:37:36.750 - 00:38:16.026, Speaker A: Hey, everyone. Santi and I have been talking about Solana a lot recently, and we're excited to have a Solana sponsor of Empire. Marinade is a staking protocol in Solana. I remember when they launched, I think it was back at a Solana hackathon, and they were funded with this 80k grant. It's super cool to see how far they've come. They're the only stake pool today that delivers auto rebalancing, mev rewards, and automatic downside protection. With their new protected staking rewards, you can stake natively or liquid stake with marinade and get the same high performance delegation strategy that thousands are using already to stake your soul to over 100 of the best Solana validators.
00:38:16.026 - 00:38:42.430, Speaker A: Marinade has been live for over two years, and they have audits completed by four of the top security firms in crypto. The delegation strategy is a first of its kind. So if you're staking your Solana, if you want to start staking your Solana, if you want to get some yield from your soul, start staking today with marinade. Go hit the link in the show notes big thanks to marinade for everything that they've done in Solana staking land. Go check them out. Go stake your Solana with Marinade today. This episode is brought to you by Avalanche.
00:38:42.430 - 00:39:37.552, Speaker A: Avalanche is a leading network of blockchains, giving some of the world's largest financial institutions the design space to explore new use cases and business models while leveraging completely customizable infrastructure. Everything that Avalanche has been building the last few years has culminated in this moment where today you have institutions and developers able to essentially have limitless possibilities with the chain. They've enabled developers to build cross chain swaps or create gaming environments where one subnet can unlock features in another or can use USDC as a native gas token, Onyx, for example, by JP Morgan or Citi or DTCC's digital asset, or the Australia New Zealand Banking Group. They are all building on avalanche evergreen subnets really cool stuff. Big thanks to Avalanche for sponsoring this episode of Empire. Go explore avalanche subnet ecosystem at core app Discover that's core core dot app Discover. Thanks again Avalanche.
00:39:37.552 - 00:40:02.238, Speaker A: This episode is brought to you by Mantle. Mantle is an l two backed by one of the industry's largest treasuries at the time of recording its value at $4.4 billion. The mantle ecosystem engages in a lot of early stage exciting projects such as Athena and Eigen Lair, and they give out actually the rewards to the mantle community. There are two airdrops I want to tell you about. The first one, it was with Athena. They offered 2.5
00:40:02.238 - 00:40:33.320, Speaker A: billion Athena shards to holders of their native token MNT. So the reward station program distributes these pre sale token allocations to MNT holders who stake the tokens. The second one they have going on is with Myso Myso that gives out over 90,000 Myso tokens worth about $50,000 today. That starts on April 25, runs through May 2. If you want to check that out, you got to stake your MNT and you can check out the reward station at Mantle XYZ rewardstation. Big thanks to mantle for sponsoring empire.
00:40:35.580 - 00:41:14.880, Speaker B: I'm curious, like what would a skeptic say to blended execution environment? Like what have been the criticisms that you've heard or what are some of the things internally they just don't know if they're going to shape. Like a big hypothesis is just this convenience factor, but maybe there's a type of developer that says, listen, I hear you, but I'm building for long term and I just have this idea that the SVM is the winning strategy or move is where DeFi is going to live. I don't want, I don't care. Like, fine, blended is cool and whatnot, but I'm just going to double down, just go directly. Like, I could see someone saying that. But I'm curious, like, if you've heard it and what would be the counter argument or the response to that?
00:41:15.860 - 00:41:47.192, Speaker D: Yeah, I guess to answer that is, in effect, that, like, because the experience is going to be. So let's say, like, you're solanable and, like, you, you know, you just want to do SVM. Like, you're not. You don't think about anything else, right? So, like, you've deployed your app on Solana, and, like, that's it. But we're not suggesting that you undeploy, or, like, stop focusing on your app on Solana. Like, we're just suggesting, like, hey, like, look over here, look at all the EVM networks there are. If I'm a Dex on Ethereum, I can just as easily copy and paste my code and become a Dex on arbitrum, on optimism, on Phantom, etcetera.
00:41:47.192 - 00:42:42.952, Speaker D: There's a lot of different markets that you can attain, and a lot of these different vms, specifically the SVM, haven't really had that opportunity yet. We're not looking at it as a way, we're not taking away from your business in the Solana ecosystem. We're just providing an additional market. That's how we would answer. It's not detracting to your commitment to the Solana ecosystem, but in terms of some of the challenges, like you noted, some of the more complexities, something that we are working on in the background is how do you really handle multiple different token standards on a network? Because you're going to have ERC 20, you're going to have SPL. How do those interoperate properly? You want to enable support that a user doesn't. They want to have the choice, like, do I want to use metamask or do I want to use Phantom? How do you enable Phantom to be able to support or interact with ERC 20 tokens? So that's something that we're working on in the background.
00:42:42.952 - 00:42:54.592, Speaker D: It's going to be abstracted, but there is a number of different methods of which we're exploring to do so. But that is certainly one of the biggest complications, is, like, how do you support all of these different token standards and things not get too messy?
00:42:54.696 - 00:43:17.384, Speaker C: I'm just going to add a little bit onto that. I mean, there's always trade offs. There's always going to be some trade offs. And for example, we are optimizing a lot of this to be around, actually. Sorry. What we've talked about is apps from these different VM targets and the way they work together. But we're also optimizing more of the execution environment to fit with the EVM compatible realm.
00:43:17.384 - 00:44:20.920, Speaker C: As Steph pointed to before, somebody might prefer something optimized around the move ecosystem in terms of infrastructure and tooling and stuff like that. And that's perfectly fine. We're going to naturally see kind of like just different communities and pockets, like for these different ecosystems. Some people just might like the fact, you know, you'll have, I have to, you're going to have people who love, you know, the fact that, like, even the fact that Solana is like monolithic and like, they want that, like, hyper low latency environment and that's perfectly fine. But there's going to be other people who just like, want to innovate on like, an SVM app that's really badass and they just want to like, take kind of that as a core primitive and kind of like build their own thing. And like, I think, I think the fact that you have this like, such an open, like, industry that you can just kind of remix everything all around. Like, I think as we develop, as we onboard, not the 20,000 developers that are here today, but just like millions of developers, I think you're going to see an explosion of all these things.
00:44:20.920 - 00:44:30.436, Speaker C: So, like, but at the same time, like, there are just to kind of zoom in on like, our environment. Like, what would a skeptic say? Like, almost like, technically there's the token standard stuff that Steph mentioned, gas.
00:44:30.588 - 00:44:40.440, Speaker B: Like, how do you, like, think about interacting in two different environments that might have different gas requirements when you're at the UX level, when you're presenting to the user, is that even a thing?
00:44:40.820 - 00:45:23.190, Speaker C: I think with gas, like, you know, obviously we're, our gas is in ETh. Like we're paying, like, our l two is like paying in ETh, but like, the fact that we're EVM compatible too. Like, we can, we can do a bunch of account abstraction stuff and enable tokens and like, you know, whatever type of token. So, like, we don't have that enabled yet, but I think that that becomes a very easily solvable problem over time. But also just to go with the more fundamental trade offs because I want to acknowledge there are, of course, trade offs and we haven't actually done this yet or even decided what we want to do here. But there's the base layer environment, which we mentioned before is called reduced web assembly. That just makes it all work under the hood.
00:45:23.190 - 00:46:04.030, Speaker C: Now, if we parallelize that, then we get the parallelization benefits of the SVM apps. If we don't parallelize that, we don't get any of the parallelization benefits of the SVM app. So, like, think about it. Like, if we decided to do kind of one thing, I mean, maybe there you say, okay, why would you not paralyze it? And so maybe that's a silly, like, example. But the point is, like, the design space for this stuff is so big that there's always going to be trade offs. And, you know, somebody else might focus more intensely on the parallelization part, and they support, like, move apps and SVM apps, and maybe people like that environment as well for different cases. Maybe that's where more of the high security needs stuff lives or whatever.
00:46:04.030 - 00:46:21.008, Speaker C: I think you're going to see so many different combinations. Again, this all goes back to what you're saying about the execution environment versus the VM itself. The execution environment is just this very big design space. We're still, at the end of the day, just exploring a part. It.
00:46:21.144 - 00:46:45.900, Speaker B: Yeah. Do you foresee some hardening of particular standards or blended execution environments where right now you're kind of opening the doors of saying, come, there's these three that you mentioned. Presumably there could be more. Do you foresee kind of a hardening of just people gravitating towards SPM and move or something like that over time?
00:46:47.250 - 00:47:55.082, Speaker D: I think it's more so the notion of, like, you mentioned, the composability or like, the atomic real time composability, because I think that, like, the solutions up until this point that were, you know, as mentioned before, like, you know, the different state environments on the same network, like, that was always kind of like an unspoken thing. Like you'd have to be like a researcher or like a, you know, a very like, intent user of a network to understand that, like, this is actually what's going on. Because like, when it's announced, it's just like, oh, support for multiple vms, and you don't understand the trade off space there. And then when you get into it, you dig into it, you realize I, oh, I need to use a totally different wallet and a totally different token to interact with this app from a different VM that's apparently on this multi VM environment. Okay, well, why don't I just go and like, you know, bridge to real Solana you know what I'm saying? Like, it's just like that, I think is more so where we're going to see hardening in that people are like, oh, hey, like, we don't want to, we don't, like, we don't want to have that trade off on our network anymore or on a network that we're trying to create. Like, we want to create this really interesting new alt VM that has, you know, properties X, Y and Z. We also want to make it EVM compatible, but we don't want to, like, have this, like, composability trade off.
00:47:55.082 - 00:48:03.218, Speaker D: So that's where I think the hardening is going to take place, where people are now aware of this issue and they realize there's a different way to try to architect it, to, like, keep everything together.
00:48:03.354 - 00:48:03.938, Speaker C: Yeah.
00:48:04.074 - 00:48:48.190, Speaker B: So I was just on the phone yesterday with an app that's a decent success, pretty good success, actually, in blast. And they were like, hey, where should we go next? Because if we're not in another chain, someone else is going to copy it, someone else is going to be there, and we have the opportunity to go elsewhere. And it was fairly easy to talk about other l two s that they would deploy. But then the issue of Solana came up and they're like, oh, we're going to have to hire. And it just, it's much harder for them, presumably with this, it would be easier for them to explore that implementation much, much faster. What would that actually look like for a project that is in Ethereum and says, hey, listen, I want to deploy Solana? What would that look like in a blended execution for them?
00:48:49.730 - 00:49:35.176, Speaker D: Well, I guess if I understand your question correctly, I think that it wouldn't actually look much different than blast. It's like an EVM network. So it's like you have your solidity, smart contracts in the same way that you could then go and deploy that on Phantom or on arbitrary, on optimism, you can go and deploy that contract on fluentd, same look and feel as any other EVM compatible network. You're not getting, you know, you're not getting access immediately to all of Solana's users per se, because that's an entirely different network. But you, if you were to do so on fluent, you'd be gaining access to, like, the Solana developers and their network effects and their, you know, users that decided to come over and also use fluent or other people who came.
00:49:35.208 - 00:49:39.550, Speaker B: Across, like, you know, on.
00:49:40.090 - 00:49:52.090, Speaker D: So you wouldn't have to, like, modify the, like if you wanted, if you wanted to go to Solana, like, Solana itself, you'd have to go and, like, modify, you know, your contracts, like build on Solana rest or.
00:49:52.170 - 00:49:52.682, Speaker B: Yeah, yeah.
00:49:52.746 - 00:49:53.898, Speaker D: Do all that all over again.
00:49:53.994 - 00:50:14.000, Speaker B: That's still gonna be this, that's still gonna be the case, right? If you still want to go direct to Solana, you're gonna have to, but if you want to, as a hybrid step to test it. You know, a lot of these are startups, you know, have limited resources. This might be a great intermediate step to just kind of test the waters and just get a good feeling of through fluent and ultimately an SVM environment.
00:50:15.260 - 00:50:43.270, Speaker D: Well, sort of, but at the end of the day, right, like, you, in your mind, like, as a developer, like, you're still only interacting with the EVM environment. It would be that the users of the SVM environment, or, you know, of fluent, which encompasses, like, SVM, EVM, WASM, are easily able to also interact with your app just as easily as they're able to interact with the SVM based apps, is what it is is. So it's like, you're not, like, in your view, it's still an EBM app, if that makes sense.
00:50:43.310 - 00:51:14.652, Speaker B: Yeah, yeah. I guess we haven't touched on the user side of things a lot. We've talked a lot about from a developer standpoint, but my theory is, ultimately, users will have no chain affiliation or brand. We're currently in an environment we're very attached to. Oh, theorem aligned, or. I love Solana, but mainstream doesn't look like that. I feel like mainstream looks like a user wants to swap a token because they heard it from a celebrity on Twitter or whatever, and they want to get access to that.
00:51:14.652 - 00:51:57.030, Speaker B: They don't want to think about whether they need to go to the standard, the type of wallet. Like, they just want to. It's very action oriented, and there's no affiliation to a particular chain. So this abstraction is a multiple, as you alluded to. There's different ways to abstract the complexity of interacting with in a web3 context you guys are doing in a very seamless way for developers, but also, I think that has very meaningful benefits for users. Do you foresee an environment where, I appreciate you're not eating other people's lunch, but where the primary landing spot for users just becomes fluent? Because that's where a lot of, ultimately, that's the most convenient way to get access to this world.
00:51:58.100 - 00:52:25.390, Speaker D: I see what you're saying. I think that, you know, as it stands right now, right? You want to go trade like a Solana shit coin like, you're going to go straight to Solana. Like, that's just, like, what's. What it's going to be, right? Like, that's where it is going to be the case. Yeah, like, that's. Yeah, that's what it is. I would say maybe not always the case, but, like, you know, certainly right now, and I think I saw a tweet the other day, like, talking about, like, escape velocity and network effects and things like this, and, like, noting how, like, in the traditional world, like, you know, I'm blanking on exactly the numbers.
00:52:25.390 - 00:53:20.994, Speaker D: But like that, traditional apps, like, you know, don't gain kind of escape velocity until they hit, like, a certain number of users, like, in the upwards of, like hundreds of millions. And, like, we don't have, like, anywhere near those numbers of users, like, in any of the ecosystems at all in crypto. So from my perspective, like, I think the state of things now is going to be very different than the state of things in ten years. So it's like, through various different forms of abstraction. So whether that be, like, chain abstraction between roll ups, whether that be like, blended execution networks, it would be really amazing if there was, like, just a couple, you know, very easy to use uis with different trade offs. And the same way that a user can choose, like, a couple different apps, like, for the same job, like, let's say, their banking app, or, like, their, sorry, real world apps, not crypto apps. I just think that, like, the, like, we were so far out from knowing, like, which networks are going to rule them all.
00:53:20.994 - 00:54:00.742, Speaker D: And at this point in time, it's clearly Ethereum and EVM stuff. And then additionally Solana, those are the two winners. But I think that the end state will be much different and it'll be the networks that innovate and provide the best experience to users that will ultimately prevail. And so with something like blended execution, you're just offering so much more than what is traditionally available in a single state machine. And so I think it puts us in the running of having blended execution networks be something special that has a lot more accessibility to users than just going to a single network. And so, yeah, you can trade in the shitcoin casino over here and you're.
00:54:00.766 - 00:54:57.778, Speaker B: Not pretending to compete against that. It's more like the type of apps that are going to be possible where you have this greater preference, both of a developer, mostly the developer side, where you can pick and choose a different type of execution. And I guess the bet is developers would rather just build using your standard in a blended execution environment. So more interesting apps ultimately get built there that attracts more users, and then that really kickstarts the flywheel. But it's that bit around, like, your point is a really good one, which is, historically, it's just been thinking about execution environments in a very kind of narrow way, and you're really expanding the possibilities of saying, no, no, wait a minute. We're just going to allow you to, like, pick and choose. You focus on building the best app, and then whatever under the hood is required to power that gaming, defi, social fi, whatever it is, you'd rather be in a blended execution environment.
00:54:57.778 - 00:55:08.230, Speaker B: For most cases, maybe there's some enterprise that, you know, that it unlocks a lot of this and catalyzes a lot of innovation.
00:55:09.390 - 00:55:33.862, Speaker D: Totally. And, like, 100%. I agree with that. And I think that there's a lot of. We're yet to see a lot of these new, interesting apps that really do blend contracts from different languages. So performant, like, I think I mentioned before, like, really performant Dex, like, written in rust that, like, is still interacting with ERc 20 tokens and, like, things like that. Like, there's also, like, if you want to go, like, crazy on the wasm thing, there's this notion that once we enable typescript, you could have, like, verifiable frontends and verifiable backends and.
00:55:33.862 - 00:56:16.180, Speaker D: And in addition to verifiable backends, just being a traditional Dap and things like this. And as a user, when I'm navigating through the world, I'm trading over here in the casino, and then I want to go, and, I don't know, I want to just interact with another app that I'm trying to think of a good example, but I'm blank in here, but my social fi app or something like that, I can easily, like, just, like, you know, in one. In one movement, in one transaction, I can, like, pull out of the casino, and I can go over there and then just start interacting over here. And I don't have to, like, think about different networks and think about, like, different ways of getting there. And it just, like, all happens seamlessly under the hood for, like, a variety of different use cases.
00:56:16.300 - 00:56:54.862, Speaker B: Yeah, yeah. Like, social fi is a good example. And Dina, we were just talking about, like, I think ultimately the bet here is that most developers would favor blended execution environment for its flexibility and convenience. And so that really catalyzes is a whole new set of applications that maybe we haven't seen before, and that ultimately translates over. Like, it starts with the developer and the developer favoring, for most cases, maybe not enterprise, maybe not defi whatever, but some certain very. But for the most part, like a pareto here. Like, you would rather go in a blended execution environment, assuming that you have some Lindy on these, like, compatibility contracts.
00:56:54.862 - 00:57:31.080, Speaker B: Like, nothing's breaking there. There's no like. But if that really works, then I'm not a developer, but I talk to developers all the time. I would see them be very interested in deploying and using your standards and ultimately maybe deploying in your l two. And that being a big catalyst to unlock this innovation that we just haven't seen before because there's been limitations and big trade offs at the. But, like, social fi. What I was trying to say is social fi is a good example because you have three different social fi apps that are gaining some decent traction.
00:57:31.080 - 00:57:52.740, Speaker B: They're all in three different chains, and there's like, issues around hopping around. And maybe if it were to happen in a blended execution environment, it might be just easier for the user to just think about interacting with those three different apps without having thinking about, like, just the UX limitations, complexity, so to speak. I don't know.
00:57:54.280 - 00:58:10.096, Speaker C: Yeah, totally. I mean, I think whether also separate the notion of, like, fluence l two, our implementation of this blended execution network from even like, the kind of app specific blended execution networks that we do hope kind of like, emerge.
00:58:10.128 - 00:58:10.272, Speaker D: Right?
00:58:10.296 - 00:59:21.784, Speaker C: Like, let's just say you want to hyper customize an execution environment around social stuff, and you start off by deploying those three applications, you know, whatever. Like, those three applications end up deploying and like that. Then that kind of becomes like a very heavy kind of a social chain or something like this. Or maybe, like I said before, there's, like, new developers who want to, like, take those as, like, primitives and kind of like remix them, but all, like, remix them in kind of one environment. So I think that there's, I think what we start to see, like, as we veer away to your, as you kind of said before, veer away from these, like, very, kind of like tribal in the weeds, kind of like crypto natives, which we obviously are them and love them, but, like, when you reach mainstream adoption, you just get, people just want to use, like, the best tools for the job, build the most efficient kind of apps for their use case. And I just think that, like, blend execution networks, like, as a concept, are just like present, like, a much better playground for these developers to build. And honestly, if it follows, I think the bet, like, one part of the bet is also that the paradigm for building things in web3 starts to look more like the paradigm for building things in web two, where, because if you think of a web two, right, people do just reach for the best tools for each part of the thing.
00:59:21.784 - 01:00:05.298, Speaker C: And so you could see here's two different examples. Think about in the AI space, what are AI models? They're kind of like python wrappers around C libraries and stuff like that. So technically there's different tools that are being used for these different pieces of that app. Effectively you're not going to do that on two different networks, you're going to do that on one shared state environment. It just otherwise wouldn't make sense. Even if you look at other examples. Think about I like to use Figma, and I've been using that since we were talking about WASM, specifically where Figma came along and said hey, it wouldn't make practical sense for me to build this whole thing in JavaScript in the browser.
01:00:05.298 - 01:00:44.362, Speaker C: Instead we're going to use WaSm as this base and build part of the app in JavaScript, because JavaScript is good for kind of like more of the UI like elements and you can kind of like manipulate things better on the screen, but then also use kind of like rust or c for kind of like the more compute intensive parts and just, you know, that creates those things together, have these like emergent benefits, I think of like creating like a really amazing, highly optimized experience. So I think a bet is also another part of the bet is that like people generally just want to build that way. And if it's, and because that is, that does represent how kind of like the masses of developers do build.
01:00:44.546 - 01:01:42.586, Speaker B: Yeah, I think you're already seeing it now. I mean, I think the best builders, founders in the space really go where the users are and they're very practical. Like this idea of alignment in tribalism look is important, but ultimately you care about delivering the best user experience and going where the users are. And so, and that's in flux, very much so like six months ago we don't been talking about Solana and now Solana, there are days where it eclipses Ethereum and on liquidity and user side and there might be telegram might come along and just totally swoop and surpass. And so I think we're in a very interesting time of the crypto, the evolution of the industry, where the last better part of a decade or plus has been just building infrastructure. But I would characterize it as very primitive, fundamental building blocks. You guys, I think are coming at the right time with really interesting middleware and tooling.
01:01:42.586 - 01:02:34.680, Speaker B: I would describe it to just facilitate Joe Lubin again, his keynote speech at Defcon in Osaka was like, let's bring a million developers. Well, if we're going to. Most of the developers I talked to are like, well, the tooling is still not there or it's really hard to, you know, and so I think, like, you guys are really a step in that direction to have this huge unlock that ultimately just makes it extremely easy for developers to just focus on building the app and less so thinking about all the other components and having to learn a lot of things that they shouldn't. Right. They should just focus on the app and not have to think about all the kind of limitations or trade offs. There will always be some trade, like it's, it's, it's like a utopia to be in a place where, like, there's no trade offs, but still, you know, I think this is a huge improvement in that direction.
01:02:36.900 - 01:02:59.600, Speaker C: Yeah, no, that's certainly, certainly agree. And I think that, like, we do encourage like, even more kind of blended execution networks to just push the boundaries as well and just like, run those experiments and optimize for like, different things. Basically, just like use the versatility of the design to just like, try to make the best possible user experience and developer experiences for different cases.
01:03:00.060 - 01:03:15.920, Speaker B: Yeah, let's talk about the, like, the roadmap from here. You've announced it. You know, you've getting traction, attention. What does a path to, like, Mainnet look like and what are kind of the things you need that you're going to be most focused on?
01:03:17.660 - 01:03:19.720, Speaker C: Sure. Actually, steph, you want to take this one?
01:03:20.640 - 01:03:21.992, Speaker D: Yeah, I was just going to say.
01:03:22.016 - 01:03:28.340, Speaker B: You don't have to give concrete timelines or dates because I know your engineers might kill you for it. So I'll save you that.
01:03:29.440 - 01:03:59.036, Speaker D: Yeah, I'll just let you know where we're at and where we're headed. Right now. We're in a private Devnet stage and we'll soon be entering a public Devnet stage. And their most recent version of Devnet does enable composability between Rust and EVM based apps. And so that's like quite new. Our previous devnet was only you could deploy apps in solidity and Viper and deploy apps in rust, but they weren't able to talk to each other quite yet. So that is a recent development that will be coming soon for people to play with.
01:03:59.036 - 01:04:28.460, Speaker D: And as Dino mentioned, we have our sample chess game and we're going to have a bunch of other sample apps and developer guides to be able to explain how those interactions work and what minor modifications you might need to do when talking to the compatibility contracts. And then we're targeting a public testnet within 2024 and mainnet sometime thereafter. Moving into 2025. That is our roadmap for the moment.
01:04:29.920 - 01:04:39.380, Speaker B: That's great. Well, I know we've covered a lot, guys. Anything else that we haven't touched on that you guys want to double click on or just talk about?
01:04:42.480 - 01:04:50.260, Speaker C: I'm good. I think we did actually cover quite a lot. I appreciate it. And sorry if this steered on the technical. No, I actually like it.
01:04:50.420 - 01:05:32.262, Speaker B: I mean, it's quite early, but I could keep asking you questions about the type of applications that we're going to see. But this is part of the beauty of it that it's, it's like hard to conceptualize, like, you know, like, no, when the smartphone came out, like, no one really kind of understood that we were going to have Uber, you know, but we just had a feeling that it was going to be like a thing that was going to connect us and make it easier for us to. But you didn't have really good Internet. Well, yada yada. It's really hard to predict, I think, these type of consumer applications. And Chris Dixon talks about skeuomorphic concepts, just things that exist in web two and we're trying to copy in web3. I'm more interested in the new primitives like flash loans and stuff like that.
01:05:32.262 - 01:06:02.530, Speaker B: And I have a feeling this is going to allow and unlock pretty interesting stuff. I just can't put a pin on it. And that sounds like you guys are just, it's hard, though. But maybe we should have you guys on later this year or early next year to see, because I'd be really interested in the type of, like, what developers are, like, missing, like mashing and like mixing and the type of applications that are going to come out of this because I think that's going to be pretty exciting.
01:06:03.310 - 01:06:07.270, Speaker C: What they're blending? Yeah, they're not cooking.
01:06:07.310 - 01:06:08.134, Speaker B: They're blending.
01:06:08.302 - 01:06:33.232, Speaker C: They're blending. Exactly. So, no, we'd love to. And we're, you know, I think you stated it pretty well. Like, I mean, it's early and, like, we also kind of have kind of good intuition around this and we're starting to see the excitement that I feel like is a good leading indicator. But we'll love to hop back on as we kind of, you know, transition towards, like, public testnet. And we see things being built absolutely.
01:06:33.376 - 01:06:43.280, Speaker B: For developers and just people that are interested in learning more. Like, what is the best way? Is it your discord, Twitter? Like, what would be the best way for a developer to get their hands on this?
01:06:44.380 - 01:07:02.868, Speaker C: Totally. So, yeah, I mean, you could check it. You could follow us at fluentxyz on Twitter. Hop in our discord as well. That's accessible on our website, Fluentlabs XYz. And honestly, just like, you could ping, ping me, steph, ping anybody on the team, we're, like, super accessible. If you just want to chat, talk about your idea.
01:07:02.868 - 01:07:20.170, Speaker C: Clearly this is, as you've gotten from this episode, you know, a new. A new design. Like, we're still, like, we are. We want to explore this design space and clearly with anything new, like, we want to take a very, like, hands on approach to just, you know, help people in their crazy shit that they want to build. So reach out.
01:07:20.830 - 01:07:33.170, Speaker B: Amazing. Steffi, Dino, thanks so much for coming on. It was a real treat. And, yeah, we'll link your Twitter discord on the show notes so people go check it out. But thanks. Thanks again for coming on. Really enjoyed the conversation.
01:07:33.750 - 01:07:35.010, Speaker C: Thank you. Likewise.
01:07:35.670 - 01:07:36.190, Speaker D: Great, chef.
