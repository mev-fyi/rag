00:00:00.240 - 00:00:30.424, Speaker A: Like, you take the Ethereum validator set, the Ethereum state capital base, and, like, there's a future in which you could kind of see Ethereum is like one application on top of that layer. There's actually many, many other applications. So the biggest sort of dream or vision of Eigen layer is that there's so much economic activity, crypto economic activity on top of it, that is as big as Ethereum.
00:00:31.564 - 00:00:59.662, Speaker B: All right, everyone, welcome back to another episode of Empire. You got Santi and me hosting this one. Really excited about this one. This is, we've done a lot of big, like, narrative building conversations recently. Predictions for 2023. These, like, big holistic frameworks today is going to be a little different, giving you guys a little alpha on, I think, what is going to be one of the hottest projects of 2023. Something that's going to be in the narrative, in what I think maybe is three or six or nine months from now, which is Eigen layer.
00:00:59.662 - 00:01:19.662, Speaker B: So we're joined by Calvin, who's the chief strategy officer at Eigen layer, and then also Sriram, who's the founder and CEO. So, guys, welcome to the show. All right, guys, I'm going. You're going to have to excuse me as I ask some, like, five year old questions here as we get into things. So here's my. I've got my second screen up. Here's my definition of Eigen layer.
00:01:19.662 - 00:01:47.924, Speaker B: I spent, like, several hours prepping for this podcast. I'm still having trouble wrapping my head around it. So I want to start high level. Eigen layer, to my understanding, is a protocol that modifies ETH to allow validators to re hypothecate the ETH and share, to let people share and apps share security and leverage ETH's security by what you guys call, I think, restaking. I don't understand what that means. Sriram, I would love for you to explain what is Eigen layer?
00:01:48.104 - 00:02:20.694, Speaker C: Absolutely pleasure to be here. So, one way to think about it is let's just dial the clock back to 2011. You look at the scenario at that time in the blockchain space, you have bitcoin. And the idea of bitcoin is it is the first application specific blockchain out here. You have this one application, transmit bitcoins, send it to your friends, whatever you want to do. But it is very limited. It is specifically built for that particular purpose.
00:02:20.694 - 00:03:39.652, Speaker C: And at that time, when people wanted to do some other thing, like, let's say I want to build a domain name system, and I want to build a blockchain for it. Now I have to build a whole new, like, proof of work system like Namecoin at that time, which just does that one thing. Every new innovation needs a new network. This was the scenario back in 2011, 2012, and around 2013, 2014, we had this idea that, hey, why do we need a new trust network for every new application? Why not create this idea of a general purpose smart contract platform, Ethereum? The idea being that, hey, I have a common trust network by making it more programmable. Now anybody can come and create any new application they want on top of this common substrate on a common platform. And this started growing massively because as you get more and more applications, there is postal same side network effects, more applications, other applications can compose with it, and then you start getting this massive flywheel. But there are still limitations in the open innovation landscape that ethereum permitted.
00:03:39.652 - 00:04:40.134, Speaker C: For example, I want to change the Ethereum consensus protocol. Okay, who has access to change the Ethereum consensus protocol? It's, you know, it has to be agreed upon on a, you know, out of societal consensus that this is the new Ethereum version. There is massive frictions in it. You cannot have three kinds of consensus protocols running at the same time. So when you want to innovate at any layer of the blockchain stack deeper than smart contracts or application layer, you cannot do it inside the Ethereum system, because Ethereum gives you programmability at the level of applications, but not at the level of the consensus protocol, the scaling layer, and all these underlying infrastructure things. So every new innovation beyond, you know, which is deeper than the application layer needs to go build their own l one. Thus the era of the Solana, the avalanche, the polkadots, the cosmos.
00:04:40.134 - 00:05:49.910, Speaker C: So you have this idea that basically, if you want to. Ethereum was this common substrate for open innovation, but only at the level of smart contracts and applications. But if you want to do anything deeper, go build your own thing, right? And I entered the space around 2018 as a professor. I was working on computational genomics at that time, and I shifted from that to work on blockchain because I saw that this is an upgrade of our fundamental cooperation infrastructure. Our ability to interact with each other is mediated through trust. And to the extent that we can build an infrastructure through which, you know, the trust frictions can be minimized, it's a, it's a big one. So, as I was shifting into this area, of course, you know, as an academic researching on things, some of the most underlying fundamental things are like the infrastructure, like consensus protocols, how the scalability works how do you get the game theory right on, you know, designing several of these things? And as we were doing research into this, we, you know, like everybody else, come up with new ideas for, hey, I want to build this, this variant of the consensus protocol.
00:05:49.910 - 00:06:19.110, Speaker C: I want that. And the only way we could actualize any of this is go and start a whole new layer. One, it seemed like an insane task because it's not, you know, creating a decentralized trust network is not a normal job, right? Like, it is not the job of, like an, of an innovator or a programmer or a distributed system builder. It's a whole other thing. And decentralized trust is like a unicorn. It rarely, rarely exists. And so this kind of, like, bothered the heck out of me.
00:06:19.110 - 00:07:15.952, Speaker C: If we are saying that the core value proposition of crypto, or at least one of the major value proposition of crypto, is permissionless innovation, but there is no permissionless innovation, or no easy or low barrier permissionless innovation at the level of infrastructure. We're going to bottleneck ourselves into the very few experiments that can be conducted at the infrastructure layer. So this is kind of like the laying out the landscape as we saw it, like, let's say 2018, 2019. And the question that, you know, I've been kind of pondering from that time on is, hey, but these decentralized trust networks exist, right? Like, there is bitcoin, there is ethereum, there are these trust networks. Can I somehow borrow it to do whatever other infrastructure things I want? I want to build a new oracle. I don't want to go and start a whole new validator network and decentralize it and all of it. I just borrow it.
00:07:15.952 - 00:08:33.507, Speaker C: So the question is, can we borrow trust, decentralized trust, from these existing networks, and then supply it flexibly to anybody who wants to consume it? Right? Phrasing it another way, in an economic form, if you ask, what is the core value proposition of blockchains? It is decentralized trust. It is the essential ingredient. If you remove decentralized trust and take any application that exists and just remove decentralized trust from it, then it's not like a blockchain thing anymore. That might as well run on AWS. If decentralized trust is the core value of blockchain, how do we create marketplaces for decentralized trust where trust can be bought, sold, rented easily? And Eigen layer was conceived as a solution to this phrasing of the problem, which is, how do I build from the innovator viewpoint, how do I go and build new innovations at infrastructure layer without requiring to go and build new trust networks. On the other side, from an economic viewpoint, how do I take and create efficient marketplaces for buying and selling decentralized trust? Nigelayer is like a solution for these two. So that's just a context.
00:08:33.507 - 00:08:40.739, Speaker C: But I'm going to, of course, I can dive in and explain what it is and how we actually achieve these goals that we set up to.
00:08:40.891 - 00:09:10.284, Speaker D: Yeah, maybe as I'm listening here, perhaps the question that comes to mind is, so you're essentially allowing Ethereum today. You know, there's, these validators are providing security for the entire chain. Now you're sort of allowing, like, security as a service by, like maybe there's, and by creating that layer, you're kind of rehypothecating security in some capacity. So the question is, you know, what are the security implications of that, and how do you get the trust guarantees that this actually works and it's not going to collapse all of a sudden?
00:09:11.864 - 00:10:16.502, Speaker C: Awesome question. So maybe just for the listeners, I'll first get into the mechanism of what Eigen layer is or how we achieve these goals, and then explain, like, how we solve these issues with potential risks and risk cascades that one might end up building if you build this kind of a system without proper attention. Okay, so how do we take this goal, which is, I want to share decentralized trust, as San Diego phrased it. I want to share decentralized trust from ethereum to anybody who wants it. How do we achieve it? First, why ethereum? Right. So the core thing is, you know, of course, the two biggest decentralized trust networks are bitcoin and ethereum. And the two essential ingredients we found that are very useful in actually creating flexible programming semantics on top of a common decentralized trust network is, number one, proof of stake, and number two, full programmability.
00:10:16.502 - 00:11:13.822, Speaker C: And bitcoin doesn't have these two things. And I'll explain why these two are important. Why is proof of stake important? Why is full programming parent proof of stake has this unique ability to not only create positive incentives for people to actually opt in, but also negative incentives for misbehavior. So you're constraining. So we're constructing this completely decentralized, pseudonymous world with inbuilt, uh, enforcement, right? But to get, like, tight enforcement that validators, or whichever nodes are running the system, they behave correctly, you need to have both positive and negative incentives. And in proof of work, this, the design space, the game theory of the design space is very, very constrained action space is constrained because you can only give positive incentives in terms of things like mining rewards. But there are no negative incentives.
00:11:13.822 - 00:12:08.484, Speaker C: Like if something goes bad, the protocol cannot go and burn up a mining rig. That is not an action space. That is possible in a proof of work system. But in proof of stake, you have that additional degree of freedom, which is that you can build negative incentives into the protocol. And because stake itself is entirely digital, it's just a digital representation of an asset, then therefore the protocol can exert negative incentives over it, which is the idea of slashing, which is, hey, if you behave in a way which is provably malicious, then I can actually go and burn up that stake. So proof of stake gives this superpower, and now that you have the superpower, that actually nodes are staking and stake can potentially be slashed. So this is slashing.
00:12:08.484 - 00:13:06.134, Speaker C: The idea of slashing is basically that I can burn, or validators take digital assets that have been locked up if they misbehave in a probable manner. Now that there is slashing, you can think of programmable slashing. Programmable slashing is actually, I'm opting in not only to getting penalized for one type of misbehavior that the Ethereum protocol defines, I'm opting in to like slashing or negative incentives or penalties for all these other types of misbehaviors that I might do. Because when I'm sharing as a validator, opting in to a new system through Eigen layer, just give you the context of the name. Eigen comes from the german word meaning your own. Eigen layer basically means kind of your own layer. So we want people to build anything they want on top of this common trust network.
00:13:06.134 - 00:14:10.428, Speaker C: So Eigen also connotes like one of our interest, which is, you know, in eigen layers, eigenvectors, you know, which form like some of the basis for understanding matrices, which drive a lot of our modern representations. But eigen layer is a mechanism by which stakers or validators in the Ethereum network can opt in, say, hey, I'm actually participating in this new network. Let's say Jason built a new network, which is, hey, come and participate in this data storage network. If you are a node in this data storage network, you're going to download and store the data for some amount of time and serve it upon request. And he says, okay, I want Ethereum stakers to opt in to this particular protocol. And Eigen layer allows these Ethereum stakers to opt in. And Eigen layer itself is actually not a new network.
00:14:10.428 - 00:14:58.176, Speaker C: Or a new, like, l one or anything like that. Eigen layer is a series of smart contracts on Ethereum. So it's just a set of smart contracts on Ethereum, which allows stakers to express their intent in participating in specific additional services. You know, I'm a staker. I'm looking at JSON's like, data storage protocol, and there is some economics around it. Basically it says, like, if you store 1gb, I'm going to get one eat, you know, in rewards. I look at it and I say, is it worth it or not? And if it's worth it, like my operational expense and any additional risk that I'm taking as a staker, I'm going to express my interest to opt into like, Jason's protocol, right? So that's how I communicate my interest, to participate in some additional service.
00:14:58.176 - 00:15:45.850, Speaker C: And when I commit to participating in Jason's protocol, Jason may tell me, actually, hey, you have to download this particular node software which actually does like the downloading and storing of data, because it's a data storage protocol which has nothing to do with EVM or Ethereum or anything. It could be like a completely new, like C code that I'm actually downloading and running in my computer or my cloud or wherever I'm running my validation software. So in Eigen layer, you think of like stakers as one side of the market. Stakers who are in Ethereum express their particular opt in. They're saying, hey, I like this protocol because it has favorable economics. So I'm going to opt in. And there are services, service builders on the other side, like Jason, come and say, hey, here's my data storage protocol.
00:15:45.850 - 00:16:32.048, Speaker C: I'm going to throw it on top of the Eigen layer network and let the stakers download and run this new data storage network. But of course, Jason wants to make sure that I'm doing the thing that I'm supposed to be doing, which is downloading and storing data. So he may create some kind of like a slashing protocol on top of Eigen layer. So one of the things that Eigen layer does is to somehow take custody of my stake that I've already deposited in the Ethereum staking protocol. Okay, how we do it, let's get it separately. But the core idea is the contract. The Eigen layer contract is taking custody of the stakers ETH, the 32 ETH that you have to deposit to be Ethereum validator.
00:16:32.048 - 00:17:24.928, Speaker C: It is taking custody of it in some way. And essentially what it is doing is saying that if you misbehave on Jason's protocol, and it is provable through an Ethereum smart contract that Jason wrote. Like, this is the JSON store, that's the storage protocol, and I'm explicitly opting in as a staker to punishment conditions specified in the JSON store slashing protocol, which is expressed as an Ethereum smart contract. So that smart contract, in the case of data storage, could be something very simple, which is whenever randomly, that contract will ask me to reveal portions of data that I'm storing and I have to go and show it on the Ethereum network. And if I show it on the Ethereum network, I won't get slashed, I won't lose my money. But if I don't show it, you know, after enough time passes, I'm going to lose my money. So this is the core structure of Eigen layer.
00:17:24.928 - 00:18:03.424, Speaker C: It's a two sided market. One side is stakers, you know, who are already participating in the Ethereum protocol commit their stake to additional services that they're opting in to serve, which could be, you know, for example, this JSON store. And what they are particularly committing to is a certain economic return that is incumbent upon their participation in the protocol for the risk, which is that, hey, if I misbehave in this provable way, then I'm going to lose my, then I'm going to lose my stake. So this is the core structure of this two sided marketplace. That Eigen layer is.
00:18:04.124 - 00:18:22.614, Speaker D: I just wanted two quick follow up questions on that, just to follow that thought. If you get slashed at the sort of the smart contract layer for this particular JSON storage protocol, does that like, introduce latency into the validation of the layer one of Ethereum?
00:18:25.234 - 00:19:17.386, Speaker C: Okay, so this gets into the mechanics of like, how we actually take custody. And let me explain that. So the first question is, hey, who are you to take, like, to slash an ETH, which has been like staked in the Ethereum contracts? How do we get express permission to slash somebody's ETH, which is actually fundamentally been set to be staked in the Ethereum contracts? So we have really on Eigen layer, we have two distinct types of restaking, right? So fundamentally, you have to put the same collateral at risk for running this additional protocol. And how do we get that to work? I'll separate it into two ways, and the first one is simpler. So I'll explain that first, and then.
00:19:17.410 - 00:19:18.594, Speaker A: I'll go to the second one.
00:19:18.714 - 00:20:06.976, Speaker C: The first way of restaking on Eigen layer is what we call liquid restaking. What is liquid restaking? You take a liquid staking derivative, which, you know, you get from, you know, you have a coinbase ETH or you have a lido stake ETH, or you have a stakewise ETH or you have a rocket pool ETH. Basically liquid staking derivatives, which represents staking positions and trust on certain operator sets. Take that ETH. It's just like, you know, any other token. Take those tokens and then lock these tokens in the Eigen layer smart contracts, right? Lock these tokens in the Eigen layer smart contracts, and commit to doing these other services, right, which is, you know, the JSON storage protocol, for example. And when you commit to doing these services, you could say, hey, I'll do these services myself.
00:20:06.976 - 00:21:29.474, Speaker C: Which means whenever, you know, storage happens, it will happen from my node, my public key, right? I could specify that, or I could say, yeah, I don't want to bother with any of these things. I'm going to delegate it to like Coinbase cloud or Figment or Coruswann or, you know, some steak fish or swiss bar or some major operator to basically run this, right? So anyway, so you can have, the way you participate in eigen layer is you take your token, liquids taking token, just lock it in eigen layer, right? And when you lock your liquid staking token on eigen layer, essentially you are giving kind of explicit permission for the eigen layer contract to slash it or basically take it and redirect it, burn it, whatever it wants to do. If you misbehave according to some Ethereum contracts that you opted into, which could be the JSON store smart contract. So, okay, so that's the way that liquid restaking works. So this is, this has, this is simple. There's really nothing to do with the Ethereum core staking protocol because the liquid staking is giving us a layer of abstraction on top of which we can just cascade. Okay, let me go to the second type of restaking, which is native restaking, which is a much more native, more powerful way of restaking.
00:21:29.474 - 00:21:59.998, Speaker C: The idea is when I, so the way this works is I'm a solo staker or a home sticker. I'm not participating any, in any of the liquid staking protocols. I want to control my destiny. I don't want to trust any operator set. I want to provide decentralization. This is the kind of like ethos which powers decentralized trust. So you have these operators and we want them to participate in the Eigen layer protocol.
00:21:59.998 - 00:23:03.014, Speaker C: How are we going to be able to do that? Because there is no liquid staking derivative for these home stakers. So the way we do it is when they stake in the Ethereum protocol, they can specify something called a withdrawal credential. The withdrawal credential basically specifies who has the power to withdraw the staking position and nominally, what they would do. If you're a home staker, of course, you would set it to your own, like, public key, for which you may have a private key in archival storage or whatever, so that when you want, you can actually go and say, hey, withdraw my stake from the ethereum contracts, whenever that is. That functionality is live. Okay, so that's what you would do nominally, but if you wanted to participate in Eigen layer, what we ask that stakers should do, they set the withdrawal powers to the Eigen layer, smart contracts. They set the withdrawal powers to the Eigen layer, smart contracts.
00:23:03.014 - 00:24:07.388, Speaker C: Okay, so what does that do? What that does is give power to the Eigen layer, smart contracts to withdraw the stake on your behalf. Right? And what you, in the normal mode, if you opted into Eigen layer and just provided service and you want to withdraw it, the smart contract recognizes that, yes, you are, you know, perfectly solvent, and you can withdraw your stake and you just go and trigger the withdrawal, and smart contract will initiate withdrawal on your behalf, and then you are able to then receive the stake back. But if you had performed some, you know, something on Eigen layer that is a slashable event, then the Eigen layer, smart contracts, can trigger the withdrawal from Ethereum, right? Because the contract has the withdrawal powers. Once that functionality is enabled. This is called smart contract triggered withdrawals. Once the functionality is enabled on Ethereum, you can go and just, the smart contract will trigger the withdrawal instantly from the Ethereum protocol. So instead of you triggering the withdrawal, the smart contract will trigger the withdrawal.
00:24:07.388 - 00:24:23.544, Speaker C: And once the smart contract triggers the withdrawal, Ethereum knows, like, this guy is not allowed to stake anymore and be placed on an exeq or whatever the process is. And that's really what happens to the core architecture system.
00:24:23.964 - 00:24:50.842, Speaker B: Calvin, can I throw it over to you here? You were at compound for four years, right? I think you joined compound in January of 2018, which is earlier than probably 99.9% of people knew about even defi, not only not only compound, right? I'm just curious why you left compound and why you left this great team. And I know you're doing some investing on your own. Why'd you join Eigen layer? Why Eigen out of every other company you could have joined in crypto.
00:24:51.018 - 00:25:50.778, Speaker A: Yeah. So I left compound a little over a year ago, after four really amazing years there, it was just an incredible ride and privilege to work there and with that team. And I spent a little bit of time not formally working for a company, but I knew that I wanted to dive back in into operating at an early stage startup because compound was such a great ride. So I spent a lot of time looking at different spaces. I think at this time, about six to twelve months ago, the spaces I was looking at were like NFT infrastructure, which was very hot about six to twelve months ago. Dow tooling, also very hot six to twelve months ago. And then there was a lot of sort of, there was a little bit of a swell of interest in the modular stack, which it's like exploded over the past year or so.
00:25:50.778 - 00:27:02.552, Speaker A: I think at that time there was like Celestia really kind of introduced the content concept to the space by separating out, like, data availability from a normal sort of monolithic blockchain. And so these were the spaces I was really looking at. And I was looking for like a sense of a team and a project that had some DNA that I thought was shared with compound because it was such a great ride. I talked to a lot of different companies and a lot of different projects and explored a lot of different areas. And ultimately, I was lucky to meet Sriram. And what really compelled me and that I think I was looking for, and it's even more obvious in hindsight, is, number one, the opportunity to make a big positive impact in crypto. I think when I showed up and met the team at Eigen layer, I individually asked different members of the team, like, well, what's so exciting about Eigen layer to you? And there were all these various answers, but all of them sort of drilled down towards the same concept, which was open innovation.
00:27:02.552 - 00:27:23.420, Speaker A: And many of them used this same word. Sriram's described, like, at a very deep level, sort of what the protocol is, but at a very high level, what it is is you take like a huge validator set and a huge staked capital base, and you say, what else.
00:27:23.452 - 00:27:24.260, Speaker C: Can you build with this?
00:27:24.292 - 00:28:11.444, Speaker A: It's like a huge amount of resources. What can you build on top of it? And it turns out that this is a very powerful concept because there's tons of really interesting things you can build on top of it. So really, as kind of a multiplier on the innovation that can happen in and around ethereum, Eigen layer is a super powerful concept. And, like, having the opportunity to work for a company that's, like, can increase notably the level of innovation in crypto and on ethereum is really exciting to me. Related to that is, I think we'll probably talk about more in this podcast. Like some of the actual ideas that can be built on top of eigen layer, they're big ideas in big spaces. Mev, like the roll up stack.
00:28:13.224 - 00:28:13.560, Speaker C: It'S.
00:28:13.592 - 00:28:50.744, Speaker A: Just like there's many, many different areas of crypto and basically like blockchains that I can learn could potentially affect. So there's enough like intellectual material here to be really excited every day for years. And then the last thing is just like, obviously like a really, really sort of visionary leader with a very strong vision and a super talented development team. Those three things are, I think, pretty unique and make for like, really great ingredients for a great company and protocol.
00:28:51.044 - 00:29:17.726, Speaker B: So I. So I get everything. Well, not everything Sriram was saying, but I get the gist of what Sriram was saying, which is there's this problem in the industry, which is if you want to go build a new app, historic, like this new innovative app, or build anything innovative in crypto, you have to go recreate a trust layer. And building a decentralized trust layer is one of the hardest things to do. It's really, really tough to do. Bitcoin did it, ETH did it. But you can't have thousands of decentralized trust layers.
00:29:17.726 - 00:29:45.834, Speaker B: It's not really realistic. What Eigen layer does is this thing called restaking, which leverages the existing trust network of ETH to secure other infrastructure and other middleware layers. I think I get that. And I get that concept. Be curious, Calvin, to hear you talk about, like, you mentioned Mev, you mentioned roll ups, like maybe get into the like. So what, which is where I'm having trouble making the connection. Like what is, what are the use cases? What is the, like, impact actually on crypto?
00:29:46.734 - 00:30:56.398, Speaker A: Yeah, well, I think as you're kind of mentioning, the heart of the issue is. Okay, there's maybe two ways to answer this question. The first one is like, the heart of the issue is if you want to innovate at a layer below the application layer, which mentioned you want to design different consensus protocol or different sort of infrastructure that's maybe enshrined into a protocol, you have to build your own validator set. You hear a lot about the salon validator set. What are the different hardware requirements that they need to have? Does it even make sense? Whatever, like the different consensus or requirements that are imposed on operators. And not only that, but if you want to start a new network, you need to somehow tell a story of like why? Generally what you do is you launch your own asset and then you kind of have to tell a story that starts from this asset being worthless. That's like, this asset should be worth something because it can be staked in my network and service security for the economic activity that's on top.
00:30:56.398 - 00:32:14.734, Speaker A: And you have to bootstrap from zero, like the economic security and the ability to have slashable collateral in your protocol. So simply like this concept that you wouldn't have to do that if your core competency is actually like developing infrastructure, really interesting infrastructure on top of blockchains and not building a validator set, which is like entirely different exercise. You have to go talk to every validator and then you have to launch a token which has a whole bunch of different implications. And then you need to go out to the market and inform the market that you stake this token so that my network can even work. That's a ton of pre work that you have to do to do what you actually want to do, which is like launch an oracle or a bridge or mev mitigation solution on top of, on top of like an existing blockchain. So from a developer perspective, that's a lot of value that you can get from something like Eigen layer. The second, like a second frame on that question is essentially like, it's like related, but I think of it a little bit differently.
00:32:14.734 - 00:32:43.324, Speaker A: So you have Ethereum. It has by far the most decentralized validator set of any blockchain. I think it's like, I don't know exactly how many validators it is, but, you know, thousands and thousands and thousands. I think maybe hundreds of thousands. And then you have today like $20 billion of staked capital, actually, with the rise in the price of ETH. And like, the number of ETH being staked is growing every day. It's probably like 25, $30 billion or something today.
00:32:43.324 - 00:33:34.186, Speaker A: So the question is, like, what can you do with those resources? And there's really two sort of fundamentally, if you really wanted to simplify it, there's two, like really fundamental. The interesting attributes. One is that you can get a huge amount of stake security quickly by renting it from Ethereum. And the second is that you can have a really decentralized validator set quickly. So you see, like, I think, like, if you look at the validator sets of other proof of stake networks, they have like 100 validators. I think, like cosmos is like 100 or 150 or something like that. And Ethereum has magnitude, an order of magnitude more orders of magnitude more.
00:33:34.186 - 00:34:55.417, Speaker A: And so those two sort of fundamental attributes, either having a ton of crypto economic security on demand or having a really decentralized validator set, are sort of at the core of all the different use cases that you could think of to build on top of eigen layer. And, yeah, it doesn't, I guess, to, like, draw from that all the way to kind of answer your question about, like, the biggest, most interesting sort of powerful vision of eigen layer. You draw from that. And I don't know. I don't know if I've ever said this, like, sort of publicly, but I almost think about it as, like, you take the Ethereum validator set, the Ethereum state capital base, and, like, there's a future in which you could kind of see Ethereum is like one application on top of that layer. There's actually many, many other applications. So the biggest sort of dream or vision of Eigen layer is that there's so much economic activity, crypto economic activity on top of it that is as big as Ethereum, but or more, it's like even more base, kind of l zero or l one that you can build on top of.
00:34:55.605 - 00:35:38.464, Speaker B: And Sriram, do you. So from what Calvin's saying, it sounds like the things that will, I don't even know if this is the right word, but get built on top of Eigen layer or leverage Eigen layer security network are like, it's not the front end live apps necessarily, but it's more maybe one or two steps lower in the stack. It's like, I don't know what we call it, the infrastructure, the middleware, the bottom where the oracles, the bridges, the roll up sequencers, the RPC nodes. I guess this is where it gets into, like, eigen da, I think is what it's called, which is the first thing that's getting built. So, Jerome, I'd love for you to maybe go one step deeper from what Calvin said. And, like, what are the, what are the, what are the use cases, when you think about it? What are the really obvious low hanging fruits here?
00:35:38.844 - 00:36:41.256, Speaker C: Absolutely. So, you know, Calvin mentioned this thing that when he joined our team, he asked different people, and the one word or the one phrase that kept coming up is open innovation. And what do we really mean by that? And building upon Calvin's answer about, like, there are these two superpowers of Ethereum, like, massive amount of stake capital and massive decentralization. And when you take that and unlock open innovation, what is going to happen? So why do we say it's open innovation? Because just like you can be a nobody and create a DaP, right? That's why we had the rise of pseudonymous founders spinning new billion dollar Defi Dapps. And that is possible because, you know, you don't need to know who the founder is, what they, what they're doing. You just look at the DAP, you look at the smart contract, if you like it, you can opt in and use it. And because you don't need to trust that person, you are only trusting the Ethereum network and that person's borrowing the trust.
00:36:41.256 - 00:37:48.754, Speaker C: You know, this is what Ethereum really did to the DAP layer. And I think this is the underlying source of why we have a pseudonymous economy, the ability for somebody who doesn't need to be trusted, who doesn't need to have a legal backing or a reputational backing in order to come and launch very powerful services. And that has unlocked a huge amount of open innovation. Now when we take that philosophy that anybody can come and create something, an application, but unlock it at the level of the infrastructure, anybody can come and upgrade the infrastructure, you see a really powerful underlying force that can transform the landscape of crypto. I want to give an example to kind of make this concrete. Like if you dial back like two, three years to the Ethereum roadmap, the core idea was Ethereum was going to do sharding. Sharding was this idea that I'm going to split the validator set into small groups, and each group will execute at the different subset of the program, and we share all these common things.
00:37:48.754 - 00:39:08.948, Speaker C: And then it migrated into a roll up centric roadmap which basically said, hey, we are not going to do sharding. We're just going to let anybody come and create these execution layers and proofs and let them all compete on a free market. And this has unlocked a massive tsunami of innovation because it is not one team coming up with one idea and we have to deploy that, and I have to plan for the next four years, be very conservative, and then launch it. That would have been the Ethereum sharding roadmap. And if we had gone down that road, the set of ideas that could have been explored is very minimal. I mean, one idea that it's obviously a very powerful team, they can come up with a good idea, but that is still orders of magnitude of what we have gotten today, which is that there are many, many roll up teams, each of them competing with each other on trying to get the best innovation in the execution layer, in the proof size, in the compression, in the cost in the developer experience that simply, you know, is going to open up a lot of possibilities. Okay? So that is like comparing what you call like a governance based, bottlenecked one idea innovation.
00:39:08.948 - 00:40:18.620, Speaker C: And Ethereum took this very clear stance, which could have been like, it is actually a major decision for a protocol to say, hey, I'm not going to do the things. I'm going to let the free market actually come in and compete fairly on a common substrate. I'm going to push it all out to L2s. It was a very aggressive position to take, and Ethereum did it because there is a massive wisdom in the idea that permissionless innovation is going to unlock the most amount of value. Okay, so now we take that and say, okay, but the problem is, so we are just taking this idea of the roll up centric roadmap that Ethereum laid out and turbocharging it to like one level deeper. Okay, what you could not do with the roll up centric roadmap, what you can do with Eigen layer, I'll point out the transition, and essentially it's taking this idea of permissionless competitive innovation and then pushing it all the way down to, you can do anything. What you cannot do on a roll up is you cannot go and say, hey, I'm changing the Ethereum consensus protocol.
00:40:18.620 - 00:41:24.652, Speaker C: Ethereum consensus finality time is twelve minutes. I have a great idea how to run a consensus protocol among millions of nodes, and I can actually get you consensus in half a second. 2nd because that is the Internet latency. And let's say you look at l one s that are basically doing something like this, or an aptos is saying, hey, we have this new set of innovations, I'm going to come in and change the structure of the consensus protocol. What Eigen layer says is, hey, you have such great ideas, come here and compete where there is already the largest trust network network, where there is the maximum network effect, and you just take this existing huge amount of trust network and channel it for anybody to come and fairly and squarely compete on improving crypto infrastructure. And if you ask me like how much like potential, like upside or like improvements are possible in crypto infrastructure, I would say there is at least six orders of magnitude. Six orders of magnitude, okay, improvement in infrastructure.
00:41:24.668 - 00:41:26.468, Speaker B: That's a big number, Sriram.
00:41:26.596 - 00:41:59.848, Speaker C: It's a huge number. And I'm saying this with full awareness of the insanity of the claim. And in order to tether this, I'll particularly take one dimension of the six orders of magnitude and explain why I think it's true. And one way to view these blockchains, one way to view Ethereum's performance. Performance is as like a place where people are writing data and all this data is being published into a common ledge. Forget the computational part. Forget all the other part of Ethereum.
00:41:59.848 - 00:42:41.318, Speaker C: Let's just focus on one particular thing that Ethereum is doing. In fact, this is the only thing that Ethereum needs to be doing, or the dominant thing that Ethereum needs to be doing in order to support roll ups. Because, you know, as a L2 system, what you do is you offload all the execution you take. You're basically saying, hey, here is the transactions that I got. You publish the transactions publicly on Ethereum, and then you're saying, hey, but I executed all these transactions, and I'm giving you a proof that if you execute these transactions, this is what will happen. So you publish the transactions on Ethereum, and then you just say that, like, if you execute it, this is the thing that's going to happen. And then just submit a short proof so that you don't have to re execute those transactions.
00:42:41.318 - 00:44:13.902, Speaker C: So this is the kind of fundamental paradigm of rollups, but in the paradigm of roll ups, you're still dependent on Ethereum to be the place where you publish the data, right? So then you can ask, what is the data bandwidth of Ethereum? Okay, simple question to ask, right? I'm writing data to this, like, system, and what is the data bandwidth? What is the rate at which I can write data? Suppose Ethereum is not used for anything else. No computation, no uniswap, no, nothing's going on in Ethereum other than people writing data. What is the limits? What is the throughput that you can achieve? You can do a calculation, there's gas limit and whatever cost, bytes per gas, whatever. And then you can find out it's 83 kb/second this is the data bandwidth of Ethereum, 83 kb/second so that's the rate at which you can just write data to Ethereum. You can ask the question like, okay, Ethereum is doing 83 kb/second what is the scope to improve it? Like, can you improve it 100 x? Can you improve 1000 x? Can you improve it a million x? And it turns out that if so, when you want to tether this number, right, like, you know, you have 83. What is the kind of like, scale that is actually normalizing or like, setting this value? You know, if you want to run an Ethereum validator node, you need to have a certain bandwidth requirement. You know, right now, I would say that's like two or three megabytes per second.
00:44:13.902 - 00:44:17.486, Speaker C: So each validated node has, like, two or three megabytes per second.
00:44:17.670 - 00:44:18.134, Speaker B: And.
00:44:18.214 - 00:45:45.734, Speaker C: But the Ethereum system, because, you know, it has all these coordination penalties like consensus, and you have to send data on the peer to peer network and all of these things, it's able to achieve 83 kb/second so there is two megabytes per second per node, but actually this is achieving 80 kb/second so there is two megabytes per second per node. But there are, like Calvin said, tens of thousands of nodes on Ethereum. So the total bandwidth available in the system is actually insane. It is, you know, two megabytes per second times 10,000, which is basically, like, absolutely insane numbers, and that's the total bandwidth available in the system. But the Ethereum systems, able to deliver a data rate of 83, it turns out, by some absolutely insane, like distributed systems architectures, which Ethereum pioneered, the idea that you can take data and split it into small chunks, and every node only gets, like, one small chunk, and you can do it in such a way that even if a lot of nodes go away, you can still reconstruct the entire data without losing any one bit. And because there are schemes like this, and, you know, this is a combination of erasure codes and, you know, something called KCG polynomial cryptography. But if you do all these things, essentially what we know is the theoretical limit is we can basically get to that number, which is, you know, n times 10,000 times, like, you know, two megabytes per second.
00:45:45.734 - 00:46:54.378, Speaker C: So that is the theoretical bandwidth availability on Ethereum, and the practical usage today is at 80 kb/second so that's a clear example of a six orders of magnitude. And I'm, you know, when I talk about bandwidth, it's something that's kind of very personal to me because, you know, I did my PhD back in, like, 2006 to eleven in wireless systems, you know, peer to peer wireless systems. And, you know, if you're building a wireless system and if you can increase the bandwidth efficiency by, like, 5%, you would be the king of 5g. Okay? If you can improve the bandwidth efficiency of 5g by 510 20%, you're the absolute king of 5g. Here we are talking about a system which has six orders of magnitude potential improvement. Okay? So how much can competitive, permissionless innovation unleash that? As opposed to, hey, one, team one, you know, the only person who can upgrade the data bandwidth of Ethereum today is the Ethereum foundation. And they have to take a necessarily conservative approach, right? No, they're driving this massive ocean liner.
00:46:54.378 - 00:47:35.368, Speaker C: They cannot just take abrupt moments and collapse the ship. Whereas on a permissionless innovation on top of Eigen layer, people will come and absolutely compete for the absolute highest bandwidth performance that one can hit. This is an example of what Eigen Lair unlocks is essentially take any feature of Ethereum. The same thing about like finality time. Why should it be twelve minutes? The theoretical limit is half a second. Why aren't we getting a finality time of half a second? Where are the people who are fighting to push the finality time of Ethereum to half a second? Of course there are people inside Ethereum trying to do it. But again, Ethereum is an ocean liner.
00:47:35.368 - 00:47:57.250, Speaker C: You cannot make abrupt movements. It's not a startup. You can't do disruptive things. There is nobody in Ethereum who is going to get a 10,000 x if they make Ethereum go from 12 seconds, twelve minutes to 12 seconds or half a second. That is a startup out there. There is somebody out there who will not sleep for years on end in making that possible. That's what permissionless innovation is.
00:47:57.250 - 00:47:58.894, Speaker C: That's what Eigen layer unlocks.
00:47:59.394 - 00:48:26.674, Speaker D: In a scenario where a lot of validators are using an interacting Eigen layer, does that make Ethereum riskier? If there is an issue, there's a smart contract bug. Some of the services, the apps that are interacting in your protocol. Theoretically, yeah, I understand everything you're saying, but the question in my mind is, is this going to break Ethereum at some point?
00:48:27.974 - 00:49:16.218, Speaker C: It's a great question and something we definitely consider and take seriously. So let's understand. So now that I've explained the potential of what we can do on Eigen layer, I gave two examples, data scaling. I gave another example of short finality times. I can give like, I'll just like throw high level, you know, another two, three examples like mev management can be done on Eigen layer for Ethereum. L1, you can make commitments, you know, to say that, hey, I'm going to order transactions in a certain way, I'm going to participate in a certain auction, and if I don't do it, I'll get slashed on Ethereum. So there are ways in which you can on eigen layer, right? Slash on eigen layer and you can constrain the set of behaviors of nodes because they're opting into these slashing conditions.
00:49:16.218 - 00:49:55.438, Speaker C: And so you can create very powerful mev markets, for example, you could say that, hey, whenever there is a liquidation on compound, I will actually take the liquidation out instantly. And so this can reduce the time to liquidation. When you reduce the time to liquidation, you can reduce the over collateralization ratio, you can increase market efficiencies. There's just a kind of infrastructure is at the root node, and once you improve it downstream, everything consistently can be improved. Okay, so that's meV. Then you can build bridges and all of these things, and I can go on about all of them. But let me take Santiago's question and explain what the opposite side of the story is.
00:49:55.438 - 00:50:57.754, Speaker C: How do we ensure that we do? Consider it careful risk management. Okay, I'm going to separate this into like two different things. Two types of risks that can happen on Eigen layer. One type of risk is what if there was a smart contract bug on Eigen layer, right? Like, suppose, you know, we have this JSON storage contract, which is theoretically supposed to only slash people if they do not produce the data on demand, right? Because they have stored it and they don't produce it, they're going to get slashed. But actually there was a programming bug that then slashes everybody for either it is the pro, it is a programming bug, or is some kind of like an implanted code that Jason is put in that into the JSON store contract. This is a huge risk, right? Because all the eats takers, they said, hey, I'm getting like, you know, 1%. Additionally, if I opt into JSON storage contract and they all joined in, and like now they all lost their ETH.
00:50:57.754 - 00:51:38.754, Speaker C: And this is not only like a risk to those particular stakers and JSON service, this is a risk to the entire ecosystem. So when we do shared security, there is also risk. Cascading risk at any one point can flow through the system. So we need to kind of buffer that up. And the way we do it is we have this. And the problem is, even though theoretically this risk should not exist, because everybody who opts into Jason's contract knows what they're opting into. But smart contract audits and formal verification is not at a stage where we can just say that it's going to do exactly what it says it's going to do.
00:51:38.754 - 00:52:36.232, Speaker C: That may be problems. And so what we need is a layer of human subjectivity to deal with scenarios like this. So the way we deal with it is, you know, the Eigen dao or like, you know, us initially, we will appoint basically a reputed Ethereum community members to man this slashing veto. What is the slashing veto? Whenever a slashing is triggered, right, from, for example, the JSON storage contract. Now I don't go and immediately slash everybody's funds because it is possible that the slashing is illegitimate and we need to have a time lapse. And what happens during the time lapse is this like slashing veto can activate the veto. What it means is they looked at it and they look at the scenario and they say, yeah, actually it's a storage contract supposed to slash people only if they didn't store it.
00:52:36.232 - 00:53:04.100, Speaker C: But this contract is triggering slashing due to either an error or like Jason did, something malicious. So I'm going to buffer this and veto the slashing. So the slashing veto is a human layer of subjectivity that acts as a buffer. So slashing only occurs if it's triggered by the contract and approved by the veto. So there's a two layer. The committee itself cannot go and actuate slashing. You know, the committee has no power to actuate slashing.
00:53:04.100 - 00:53:18.108, Speaker C: They only have a power to veto slashing. So it's like a two layer system. You need both the smart contract to trigger the slashing and the veto committee to approve it. So this creates a layer of buffering on the slashing cascades, risk caskets.
00:53:18.236 - 00:53:28.940, Speaker D: Okay, number one on that point, who's this dao? Can this dow be corrupted, bought? Anytime you introduce a human element, it just is messy.
00:53:28.972 - 00:54:13.708, Speaker C: Right? It's absolutely messy. And the way we deal with this is the, initially there is a DAO and unless essentially trust is there is one layer of trust that you're actually having on the DAO that they will be veto slashing correctly. Stakers opt into the system only if they trust this DaO. And services opt into this Eigen layer only if they trust that this DAO will only veto illegitimate slashing. So if it vetoes legitimate slashings, then the service does not get security. Okay, now, so this is the initial condition. And then after that, what happens is, any updates to this, to this, like reputed committee is basically done.
00:54:13.708 - 00:55:08.110, Speaker C: This is not a token committee, right? Like this is not like you can go and buy 50% of tokens and then you get basically slash, whatever. So the way it works is the Eigen Dow, which could be initially just us, like the company layer labs, which is basically says, this is the committee. Next time we change the committee, there is a lag of like one month, say, before that committee gets actuated. If you as a staker don't trust this new committee, you're welcome to leave. If you as a service don't trust this committee, you're welcome to leave. And what this does is the economic incentive for us as layer labs, or like eventually, if there is a DAO, is to basically make sure nobody leaves. And the right economic response for the DAO is to basically appoint only committee that can be trusted and will be trusted by even more people.
00:55:08.110 - 00:55:43.170, Speaker C: That's how they grow the net market share of the Eigen layer. And if they appoint a bad committee, all that happens is people just leave and the eigenvalues whatever system goes to zero. And so there is no so essentially. But of course, people can only opt in if they trust this slashing committee. That is a condition. And there are like, we have other services, for example, we have this model where eventually. So today, if you look at L2, they have a layer of governance, a layer of human subjectivity, and eventually they will not have, or at least they are claiming that they will not have a layer of solution subjectivity.
00:55:43.170 - 00:55:55.114, Speaker C: And I understand it because eventually, during the layer of innovation, you want the subjectivity. And once the innovation is done and you can ossify it, you don't want subjectivity. And the same thing will happen on eigen layer.
00:55:55.194 - 00:56:49.110, Speaker D: Yeah, I understand that transition when you're talking about very specialized smart contracts. You could have storage, you could have oracle sequencers, as you said, you know, it's sort of endless possibilities. It requires a lot of, I would assume, technical sophistication of this Dow. And if you have a, I don't know how big this dow is going to be, 6712 people, then how do we make sure that, who are these delegates? And how do we make sure that they actually have the technical know how to understand and make an assessment, a proper assessment? Whether or not to exercise this veto is sort of what I'm thinking, because that seems to me like it's a huge bottleneck that you're placing trust on a small committee that is, that is required to have, all of a sudden all this specialization across a vast number of use cases, which.
00:56:49.302 - 00:57:14.380, Speaker C: So the committee is appointed for expertise. That's why it's not a token committee. It is appointed for expertise. What does it mean? What does it look like? It is basically people like the Ethereum core developers who will be on this committee. It will be people who are building layer tools who will be on this committee. It will be people like Flashbox who will be building mev solutions, who will be on this committee. So essentially, this is a committee of like deep distributed system builders.
00:57:14.380 - 00:58:04.384, Speaker C: And that's what it has to be to actually exert the correct judgment. But one thing I want to clarify is these are not very subjective judgments, right? This is not like asking, you know, how much is this token worth? That's not the question. The question is a storage contract has to slash somebody for like not storing the data. Did it slash it for that or for some other like arbitrary purpose because there is a clear, obvious smart contract bug. Or clearly Jason wrote this piece of code which is like a kind of an attack vector that has just gotten exposed. So I think it is not the same level of subjectivity as deciding and saying, hey, this token gonna go up or of these things. This is a very deep distributed systems knowledge that is needed to look at the code and say this is clearly a bug.
00:58:04.384 - 00:58:16.904, Speaker C: This is clearly a kind of implanted attack vector versus it is not. That is all that is needed. So we need people who are absolutely experts and world class experts at doing this. That's what this does.
00:58:17.484 - 00:59:30.134, Speaker A: I wanted to add also one quick kind of perspective, which is this world we're talking about right now is a little bit at a level of more scale than we expect to be at for some time. So obviously it's like very complex to sort of look forward and think about like many, many different middle layers on top of eigen layer, and lots and lots of different slashing positions that need to be considered in a single dao that gets to manage all of that. And I think right now it's our idea of what a working system could look like with Eigen layer at scale. But practically and kind of pragmatically, I imagine that over time there will be innings or like chapters to this story before we really get to that end. Vision. It's going to be really complicated to orient a community of really multiple stakeholders around Eigen layer. And what I mean by that is stakers, validators and middleware developers, they're all going to have different preferences that they want to express around how the system should work and how like slashing conditions should be implemented, sort of vetoed, executed.
00:59:30.134 - 01:00:00.094, Speaker A: So I think like along the way to this kind of vision at scale of what we're describing, it's going to hopefully be like lots of sort of iterative improvements and product updates and protocol updates and like new experiments that are launched in more in safer ways where we're able to get the feedback of the community and ultimately arrive at something that probably won't look exactly like what we're describing today, but hopefully satisfies all those different stakeholders preferences.
01:00:00.554 - 01:00:40.454, Speaker B: Calvin, on the, you guys talk about this like you're building a, I think the word that Sriram uses like decentralized marketplace for decentralized trust, or I, I think was the word, um, when you look at marketplace businesses, you're basically just building supply and demand. And the stakeholders that you just mentioned, I think you just said validator, stakers and middleware. Who is the, like, when you build marketplace businesses, usually there's like, there's the key one that you have to get. So like, if I was sitting in your shoes, maybe I'm thinking about this, like, all right, how can I convince the liquid stake, the liquid staking providers to push like, their validators to come on to eigen layer or something? But like, what is the first thing that you have to nail here?
01:00:40.494 - 01:01:28.326, Speaker A: Yeah, it's a really interesting question. It's one, and we spend a lot of time thinking about, and the more we kind of dig into it, the more at least I have learned that there's sort of nuanced each of these stakeholders. So, for example, we talk about stakers, operators and middleware developers. Like, the sort of easy answer to your question is like, num is the flywheel is you get a lot of stake. And that attracts developers to build on top of eigen layer, which generates fees that go back to stakers, which attracts more stake. And that's kind of the general flywheel. And so what you need to do is probably start by getting a bunch of stake and then try to line up developers that are building on top of it as soon as possible.
01:01:28.326 - 01:02:21.624, Speaker A: Now, like practically, in terms of kind of go to market and approaching this market, what you learn is like stakers, it's a huge set of people with many different preferences. So for example, you mentioned like the liquid stake derivative markets, Lido being like the most dominant one, but there's lots and lots of upstarts now that's like, and then you think about like our implementation of restaking, which free arm has described. One is like native restaking. Once withdrawals are enabled and withdrawal credentials can be set. And the second one is basically liquid stake derivatives, or like taking in tokens into the Eigen layer contract. That's already kind of, you have to separate the staking market between like liquid stake derivatives and the native restakers. And they have very different sets of preferences and like sort of different risk profiles and preferences.
01:02:21.624 - 01:03:41.534, Speaker A: But like, fundamentally, people stake because they want to earn more yield on their ETH. So there's a value proposition there that's going to make sense to a bunch of them, like the operators. What I think I've learned is, again, they all function like very differently and have different sort of like risk profiles and preferences and, but their whole business is built on top of earning as much yield as possible. So like they're very willing to, to listen here and sort of collaborate and partner up and figure out how to participate in a safe way because it's their entire business model. So both of those parties, it's like a yield value proposition. And then developers is obviously like, what is innovation that I can build on top of eigen layer that I couldn't do before? And yeah, I think I've heard sort of asked in our conversation today, what are the use cases that can be built on top of eigen layer? And like maybe what are the most imminent ones or the ones that have, what type of developer would find the most value immediately in building on top of eigen layer? And it's almost a hard question to answer. And part of what's exciting about being part of this project, because the world of possibilities is so large.
01:03:41.534 - 01:04:16.734, Speaker A: And so for like developers, we sort of have a vertical by vertical effort. I think the most kind of pressing verticals that we're focused on are mev mitigation and sort of mev management and then decentralized sequencers for roll ups. And there's a couple more, but I expect that those two are sort of the most prominent ones. So we're going out to those developer bases and really a lot of them are coming to us. And so those are the three kind of pieces of this puzzle that we have to put together. Staker validated developers.
01:04:17.114 - 01:04:30.374, Speaker B: What is the Kelvin, what do you think of as the business model of Eigen layer? If you were explaining the business model of Eigen layer to someone not really in crypto, or maybe like crypto adjacent, how would you explain it in like simple terms?
01:04:30.874 - 01:05:23.554, Speaker A: Yeah, yeah, it's a great question because it can get very complicated and it's something that we talk about a lot. We're at a stage where the price protocol and product hasn't launched. We have to balance all these different incentives of stakeholders, I think. And so I can't give an answer that's like concrete or a guarantee of what the business model is going to be. But I think personally what's likely is, well, first of all, I think we want to reserve the right to innovate on business models over the coming years. But I think what's most likely is something slide Os, you know, basically as a marketplace between developers and stakers. People stake their assets into eigen layer that are used by developers and we sort of sit in the middle of this kind of flow of funds.
01:05:23.554 - 01:05:39.594, Speaker A: And so it makes sense if these different marketplace participants are benefiting from Eigen layer, for the Eigen layer protocol, to keep some of those fees for itself, for whatever use, for insurance, for backstop, for reserves, for treasury.
01:05:40.334 - 01:06:11.774, Speaker B: Cool. That makes sense. I mean, Lido's proven that that's a good model. I think last question here is sometimes Santiago and I have explored the app chain thesis and cosmos with folks like Zacky and other people in that space. Calvin, I've seen you tweet out a little bit about just, like, exploring Cosmos back in the day, maybe a year ago or something. I'm curious just how you think about, like, similarities and differences between Eigen layer and then, like, the Cosmos interchange security. I don't know if that's a question for Calvin or Sriram, but I could start.
01:06:13.354 - 01:06:58.882, Speaker C: I want to, before I answer this, I just want to complete my answer to Santiago's question on risks. Right. I was saying there are really two types of risks that we consider. One is the risk due to improper slashing, and that's what I was explaining with slashing, veto, and so on. And there is another risk, which is due to, like, the fundamental crypto economic imbalance, which is what? The leverage risk that you guys were alluding to from the beginning. So I just want to take a minute to address it before I switch to interchange security, which is okay. So here is an interesting crypto economic puzzle, even for Ethereum, before we understand Eigen layer.
01:06:58.882 - 01:08:04.146, Speaker C: And in fact, many people believed that Ethereum has no chance of working for the same reason that we say, you know, we see today, people worried about Eigen layer. And the idea is, okay, if you take the Ethereum platform, right? Every new application built on the Ethereum platform is increasing the benefits of doing an attack, because, hey, new application, when I do an attack on Ethereum, I can benefit from this additional thing, too. So every new application on Ethereum increases the over leveraging of Ethereum. Every new application on Ethereum basically increases the leverage, the old leverage of Ethereum. And so, you know, one could say, using first order reasoning, that this is basically an unstable system. Like, you can't have many applications, because as you increase applications, each application increases the profit from an attack, but not the cost of an attack. But this is first order, but not second order reasoning.
01:08:04.146 - 01:09:20.517, Speaker C: The second order reasoning is Ethereum was worth, like, $100 million, like, four years back, and it supported, like, a hundred million dollar ecosystem or a few hundred million dollar ecosystem. Today, there is a $300 billion or plus whatever like ecosystem on top of Ethereum. And Ethereum, the ETH token itself has grown to like several hundred billion. And this is what happens, is as you increase basically the ability, so each new dapper doesn't instantly increase the amount of security, but each new DAP eventually increases the amount of fee paid back to each stakers, which increases the ETH value, which increases the staking returns, which increases the security, right? So this is how Ethereum system has grown from like $100 million system. And you know, one could ask that day that, hey, how are we going to run like a $300 billion applications on $100 million? Like, you know, staking ecosystem, it doesn't make sense, but staking expands, eat itself grows to accommodate that. It's the same. And what did Ethereum really do? Ethereum really did is make, make it flexible for people to build apps.
01:09:20.517 - 01:10:02.864, Speaker C: What we are, we are saying is what level of programmability adapt has, is just much more flexible. I can specify each node what that heck to do, rather than just program at the level of the EVM. So essentially, by like expanding the programmability of what adapts, DAP is not just writing an EVM contract. DAPP is specifying what each node in the Ethereum ecosystem does. And that level of programmability increases absolutely massively the total value that is going to ride on Ethereum, but that is going to increase the value of the asset itself. That's maybe a third order effect. The second order effect immediately is that it's going to increase the total amount of stake on Ethereum.
01:10:02.864 - 01:10:53.594, Speaker C: Because if there's $20 billion staked today, because there is a 5% return if Eigen layer comes in, and because all these services, maybe there is another same amount of reward that is available. So staking will double. That's the immediate response. And then the eventual response is that since staking has doubled and there is so much of yield, opportunity on Ethereum, eat itself grows even eventually to accommodate that. So if you look at like the view of where this is the really fun thing for us is, we are able to do, we are able to just take Ethereum and expand the flexibility without actually having to go and build a new system, which is what Vitalik and the Ethereum ecosystem had to do. In fact, first they tried very hard to expand the programmability of the bitcoin ecosystem. And inside the constraints of that system, there was no permissionless way to do it.
01:10:53.594 - 01:11:32.610, Speaker C: Where we sit at today, we can take Ethereum and actually do this permissionlessly. There's no governance upgrade, nothing required. And then we just expand the footprint of the flexibility of programming so that the total value that can ride on top of Ethereum's high. I'll also explain a little bit how actually Eigen layer built correctly massively decreases systemic risk. It decreases systemic risk. Counterintuitive. Why is it like, if you look at applications writing today, what is the cost of attacking these applications? Is basically, you know, applications depend on the Ethereum consensus, but they also depend on other kind of auxiliary services.
01:11:32.610 - 01:12:04.848, Speaker C: Like they depend on chain link, they depend on like a bridging service, they depend on a new data availability service. Applications depend on all of these. And the cost of attacking the application is cost of attacking the minimum of all these things. You can take the entire defi ecosystem down if you attack the Oracle ecosystem. You can take the entire, like, you know, roll up ecosystem down if you can attack the data availability system. So there are these massive choke points that are being created by each new middleware. You can attack the entire like cross chain bridging ecosystem if you attack the dominant bridge.
01:12:04.848 - 01:12:36.300, Speaker C: So the cost of attacking the entire ecosystem is not the $20 billion that is staked on Ethereum, it is the minimum of all these middleware services that are built on top of Ethereum. Imagine in an eigen layer world, all these services are built on top of Ethereum security, which means to attack any one service, you have to attack this $20 billion. It's the most over leveraged. All the stake is doing all these services. In fact, we think this is not over leveraged, this is pooled security. This is not over leveraged, this is flexible pooled security.
01:12:36.492 - 01:12:37.300, Speaker B: That's what it is.
01:12:37.332 - 01:13:18.304, Speaker C: And that's what our aspiration is, that every staker participate in every service. And this is only possible if services are lightweight. And so we have like this huge bias to ourselves building lightweight services that a lot of stakers can download and run. We don't want each service to be like running a Solana node, so that very few nodes can participate. We want each service to be like, you know, leveraging whatever resources they have in a kind of horizontally scaled manner. Anyway, so that's an answer to this idea of why there is, you know, why. While it appears that it is like over leveraging, actually all you're doing is essentially expanding the programmability of the ethereum ecosystem.
01:13:18.304 - 01:13:31.866, Speaker C: And the proof of stake system itself has a natural over leverage, and it only corrects itself in the long term by increasing staking, by increasing the value of the underlying asset. And that's the same dynamic that we actually expect.
01:13:31.970 - 01:13:44.054, Speaker D: Can you just clarify? In this pool security model, it is still far easier to attack, you know, than what it would be to attack Ethereum layer one.
01:13:45.114 - 01:14:09.044, Speaker C: It is, but it is easier to attack. So the, in the, even in the pool security model, it is true, because you're adding, like, by definition it's true, right? By definition is true. But it is harder to attack the DAP in the pool security model than it is. And that's what matters because you're not attacking. Nobody wants to attack Ethereum. They want to attack a DAP and profit off of it. Like because there is money on uniswap.
01:14:09.044 - 01:14:44.620, Speaker C: There is, those are the kind of honey pots. And if you look at where the trust bottleneck is, it's not on Ethereum. It is, it is on all these auxiliary services. But bringing the auxiliary services at par, security to Ethereum. Of course the Ethereum security is being shared with these other things, but Ethereum staking itself increases, right? Because if 20 billion was staked today, now that you have the Chainlink, Oracle additional thing, the bridge thing, the MeV thing and all these things, it's not 20 billion, it's 40 billion that stake. So it's not that purely, it's dilutive to the ethereum interest. It's basically like, it's like an empire formation.
01:14:44.620 - 01:15:02.294, Speaker C: Like you have these small like countries and you know, you want to farm an empire by aggregating the security of all of them. Right. The total amount staked is actually the sum of the staked on all these different applications and you're just aggregating them all into a common pool and it's just better for everybody.
01:15:02.754 - 01:15:43.964, Speaker D: So the idea, I've heard you say programmable security, I mean, it sounds really sexy. You have programmable money with DeFi. Yeah, but I think like, unlike Defi, like security is tricky because you inherently need to make an assumption of the level of security that's required at stake. But if you make the wrong assumption, you get wrecked. And so you really have to trust the smart contracts that you guys are developing, the dao, the convito, to make that assessment for you. So unlike bandwidth or shared resources that could cause like load issues, security, you typically don't want to mess with security. And just as you said, just have.
01:15:43.964 - 01:16:24.580, Speaker D: Maybe there's a lot of inefficiency in Ethereum right now because it's over levered, but in the state that we're in now, do you really want, do you feel that we have the know how, and you can program a set of assumptions that, knowing what the. Perhaps a more precise, less over levered security assumptions, resources you should be allocating. That's the. I hope this comes across as. I'm just sort of skeptical, and I don't know what you would say to that. Am I being totally unreasonable here that you're largely trusting you guys in the Dao to then make.
01:16:24.652 - 01:16:26.972, Speaker C: I would say, you know, I mean.
01:16:26.988 - 01:16:41.198, Speaker D: Like, I'd rather it be so over levered. Like, I'd rather live in the US than live in Somalia. Because, hey, maybe like, you just live in somalia and have a bunker, fine. But it's still largely, like, risky. I'd rather live in the US, which is the safest country in the world or whatever.
01:16:41.366 - 01:16:49.014, Speaker C: To make an analogy, it's not clear that you're living safely today depending on all these, like, tertiary.
01:16:49.054 - 01:16:49.634, Speaker D: Correct.
01:16:50.134 - 01:17:03.466, Speaker C: That's what's actually. That's what I'm saying. You move to the US, don't live in Somalia. You are living in Somalia because you're trusting the weakest middleware that you're trusting today. Move to the US. Ethereum is the most secure pool. Security is the most secure.
01:17:03.466 - 01:17:06.362, Speaker C: That's where you need to move back to the.
01:17:06.538 - 01:17:32.052, Speaker D: So not to use an analogy, but, like, the programmability of security, is it fair to say that you guys are making certain assumptions and then introducing this dao to somehow make a determination with the level of security that's required, which is less than Ethereum? So you could get that wrong. I'm trying to understand where you could get it really wrong, where this falls apart.
01:17:32.228 - 01:18:17.466, Speaker C: Yeah, I can explain kind of like, how this can fall apart and what we're doing to minimize those chances. Right. So how it can fall apart is you take the Ethereum security and then you're supplying it to something extremely. So somebody builds this, like, massively lucrative application on, on top of eigen layer, which has to be bigger than, by the way, when you say, like, Ethereum is already very secure. If you just do a leverage calculation, Ethereum is over leveraged by 20 x. Like, there's $400 billion worth of, like, market cap living on top of a $20 billion security. So first we have to come to an understanding of why it's acceptable to have this over leverage, number one.
01:18:17.466 - 01:19:22.766, Speaker C: Number two, we have to ask this other question. By basically building all these middleware that on top of eigen layer, are we going to increase this market cap from 400 billion to, like, hundreds of trillions? That this is going to overliver by like 100 x, or is it going to increase? It's going to take the $400 billion that exists today and depends on rickety middlewares and move them to the Ethereum security, because then actually it just makes the system more secure. Okay, so, and there are different possibilities. The nightmare scenario is, oh, somebody comes up with like some, actually, the, the best way to illustrate this is you take staking from a much smaller ecosystem. Like imagine like a small proof of stake ecosystem. You build Eigen layer on top of it, and then it goes and supports like all the middleware on Ethereum, right? So I have this new, like, small token ecosystem, and, you know, proof of stake system, and people participate in eigen layer and they're supplying security to huge, high profit ethereum dapps. Then suddenly what's happening is the underlying leverage of that system.
01:19:22.766 - 01:20:17.724, Speaker C: Like that l one system was basically like there was no application or very few applications living on top. And suddenly you're just pumping up the leverage of that system because you have now this massive $400 billion DAP ecosystem that's dependent on that service to work correctly. That is an example of where this intuition that this is massively going to over leverage systems is true. But that's not the case with Ethereum. Ethereum already has a huge amount of profit that you can extract if you attack the ethereum ecosystem, and if we can get to pool security. So I think that's another if. The if is what if, like I'm running an application and people don't want to opt into this and only like $1 million or $2 million worth of stake ops, then what happens? And we have this very nuanced over leverage analysis in those scenarios.
01:20:17.724 - 01:21:02.676, Speaker C: But in the simplest scenario, which, which is also the extreme scenario for over leverage, which is everybody in Ethereum participates in every application. I think it's actually the safest because it pulls all the trust assumptions into the one group and then say that, hey, this one group can execute all of these things. So the way we think about it is you have this nation state called Ethereum and you have all these borders. Right now, the Ethereum staker community is only securing one border block production. It's not securing the oracle border, it's not securing the bridge border, it's not securing the data availability border. It is not securing these many, many other borders that exist. And so there are all these other attack vectors.
01:21:02.676 - 01:21:10.344, Speaker C: I'm saying, what we are saying is just use the pool security to share through the entire system. Then it's actually just better.
01:21:11.644 - 01:21:25.504, Speaker B: Guys, I think this is a good place to wrap for. I have a feeling and a suspicion that Sriram and Calvin, you guys, will be back on empire at some point in the near future. So, Sriram, this is great. Calvin, this is great. Thank you guys so much for coming on Empire.
01:21:26.224 - 01:21:28.992, Speaker A: Thank you. Yeah, love empire. Thanks for having me.
01:21:29.008 - 01:21:44.564, Speaker D: Thank you, guys. And I guess as an exciting young project, you are like, for people that are interested in learning more about it. Are you hiring? What's the best place to read the documentation and keep tabs on your development?
01:21:45.104 - 01:22:28.624, Speaker A: Yeah, we are definitely hiring, especially engineering and developer relations. Actually, actually, we will have you know, the team has been building for a little over a year, but this is the year where things are going to start to roll out to test nets and main nets. So we definitely want people to keep an eye out for that. We don't have a discord or a discourse yet, but we're actually planning to launch a discourse, sort of a forum for ideation collaboration in probably the next couple of weeks and hopefully make public our white paper at that time also. So that'll be exciting, I think, and a great.
01:22:29.484 - 01:22:42.184, Speaker C: Right now, the best place to keep tabs is the Eigen layer. Twitter handle Eigen L A y E R. We'll throw the link in the show notes. Awesome, guys.
01:22:43.204 - 01:22:44.104, Speaker B: Be well.
01:22:44.454 - 01:22:45.558, Speaker C: Talk to you soon.
01:22:45.686 - 01:22:46.734, Speaker D: Thanks so much for coming on.
01:22:46.814 - 01:22:50.974, Speaker C: This was super fun. Thank you so much for bringing us on board. Look forward to future channels.
