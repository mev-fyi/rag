00:00:00.360 - 00:00:37.073, Speaker A: A lot of time people don't really understand the horizontal scaling. People think about, oh, it's just a different scaling technique. Right. It's got a better consensus or it's only have parallelizable execution through this fast paced model. No, the beauty of sue is all these things come together but the fundamental what makes us special is the data model that allow us to basically grouping transactions that relate to each other and process them as a group. Right. So rather than having whole lot of transaction in a block, most of them have nothing to do with each other.
00:00:37.073 - 00:01:02.923, Speaker A: You're processing all the block of transaction within all these transactions. They are basic group based on the objects they're targeting. Right. And each one of the group are independently processed. I think that's not so much a misconception, but people really need to dig deeper. It's not yet another blockchain that goes through this stages like every other blockchain. The fundamental difference really is the data model.
00:01:03.059 - 00:01:42.963, Speaker B: Welcome to Good Game, a podcast for crypto insiders with your host Imran and Chow. Welcome to Good Game. Episode four today is going to be a new format. We're going to be interviewing both founders of EV Sway, Evan and Sam. And before we bring them on to interview them, we're going to go through a quick background on both Evan and Sam just to get an understanding of where they come from and how do we think they're going to operate in the space and what to expect from the future founders. What do you think, Chao?
00:01:43.099 - 00:01:47.251, Speaker C: I would love to learn about their background. I mean, I haven't done as much research as you have.
00:01:47.363 - 00:01:48.109, Speaker B: Yeah.
00:01:48.267 - 00:02:13.045, Speaker C: If I look at the landscape of layer ones, the competitive landscape, on our last episode I said we look at how the founders, how the builders think of them. It's basically due diligence on the customers of the layer ones. But equally importantly, I look at how the leaders of the blockchains behave.
00:02:13.515 - 00:02:13.851, Speaker D: Right.
00:02:13.883 - 00:02:57.215, Speaker C: So for example, I'm personally a big fan of Anatoly. I'm also a big fan of Vitalik. They're two very different styles of leadership. But Anatoly is someone who in my opinion has a big heart, who looks at both the merits and the disadvantages of his competitors. He's very critical, but also open minded. He always talks about good things in other competitors. Recently I saw him complement the Cosmos V2, which came out yesterday, and he does that on a regular basis.
00:02:57.215 - 00:03:37.671, Speaker C: Vitalik is great in his own way. He's very technical. He's very obsessed with the technical aspect of Ethereum. He always writes about the scaling roadmap for Ethereum tries to engage with other builders. He's more of a nerdy kind of leader, but it's also great in its own way. He's able to use that aspect of himself to bootstrap and to build a cult of technical builders around him and around Ethereum ultimately. So I love these two leaders.
00:03:37.671 - 00:03:46.391, Speaker C: So all that to say, I think learning about the founders of Missing Labs or Suway is also very important, so I would love to learn more about them.
00:03:46.463 - 00:04:33.003, Speaker B: You bring up a few interesting points, which is how important leaders are to Layer Ones. It turns out the success of a great Layer One has a lot to do with the team and the person that's leading it. Oftentimes we've seen, you know, many Layer Ones that have started, I mean, you and I have been in the space for, I don't know, let's say nine, ten years. We've seen many, like sidechains, layer ones, L2s that have come out and they're no longer with us. And that's probably a function of how the leader thinks about and a team think about growth and how and developer adoption and they're like, go to market strategy. I think it's very important. I think Polygon's done a pretty good job of staying relevant and staying consistent.
00:04:33.003 - 00:05:16.969, Speaker B: I think the notion back then was to be very technical and very developer focused has always been kind of the ideology behind Great leaders within Layer Ones and Layer Twos. But it turns out you could also be a great leader when you're focused on B2B. Right. And focused on bringing developers from a marketing standpoint and traction from attraction perspective. Right. So I think Polygon's done a pretty good job of kind of leading those efforts from, from that lens. Whereas, like, Vitalik has been focused more or less on, on the research and technical side and Anatoly has been more collaborative, also bleeding edge and competitive.
00:05:16.969 - 00:05:34.953, Speaker B: That's one thing I do like about Anatoly too, which is like, he'll call out his competitors, he'll call them out in a very good way, right? Like as you mentioned, like Cosmos, great work. But to me, whenever I see that, it just adds more fuel for himself so that he could continue to do better for Solana.
00:05:35.089 - 00:06:32.113, Speaker C: Basically, the personality of the founders of Layer Ones are almost like the DNA of the entire blockchain ecosystem. You know, in the case of Ethereum, despite the fact that Vitalik has been trying to decentralize and give power back to the community, despite all his efforts in doing that, Vitalik's own personality is the DNA of Ethereum. It's very, very grassroots, it's very technical. Whereas Polygon on the other side is almost like the marketing arm of Ethereum due to the focus of the founders themselves. So by learning about the founders, their personality, their focus, you can almost predict what the ecosystem might look like in a few years. That's why I think it's important to talk to the founders themselves of those layer one blockchains.
00:06:32.289 - 00:06:46.215, Speaker B: Yep. Why don't we look into the backgrounds of Evan and Sam, the founders of sui. I found some interesting. I found some interesting data points. Okay.
00:06:46.915 - 00:06:47.563, Speaker A: All right.
00:06:47.659 - 00:07:17.205, Speaker B: Well, Evan, one of the co founder and CEO of Mistin, he was, I don't know if you know this, but he was one of the winners of the ACM Systems Award. And if you know what the ACM Systems Award is, it stands for association for Computing Machinery. And it goes to, you know, builders that have built software systems with the lasting influence in the computing space. Guess who were the past recipients of those awards?
00:07:17.365 - 00:07:18.245, Speaker C: I have no idea.
00:07:18.365 - 00:07:19.225, Speaker B: Any name?
00:07:21.605 - 00:07:22.625, Speaker C: Alan Turing.
00:07:24.245 - 00:08:09.721, Speaker B: Close. Dennis Ritchie, who created C programming language unix, vint, Cerf, who created tcpip. And I mean, and the list goes on. I'm just, I'm just giving you two. I just gave you two. So why did, why did Evan receive the ACM Award? Well, he created LLVM with his team, which is essentially a set of compiler and toolchain tech that can allow anyone to develop a front end for any programming language and the back end for any instruction set architecture. And so it's apparently used by millions of people today.
00:08:09.721 - 00:09:04.975, Speaker B: And I guess if you look at his background, even previous to that, he worked 10 years at Apple, six years at Facebook, where he led the Novi and DM team. And what I've realized is I've watched many of his interviews preparing for this podcast. I read some of his AMAs, and in every one of those interviews, he says that whenever he goes, and I'm going to quote his modest operandi, which is, the system that you've been using for years is trash. You don't want to deal with it, just give it to me. I'll build a team and replace it. So he goes in, he rips his manager or the perspectives of how things were done, and he creates and pushes new innovation is the way you want to think about it. And maybe let's just dive deep into this and maybe that's what we need in crypto.
00:09:04.975 - 00:09:42.497, Speaker B: I don't know. Right? I mean, I think we're Doing pretty good in terms of innovation generally. But having that type of attitude might be able to help us get 100 million users in crypto. I mean, we're currently at like what, 11 million monthly active users in crypto today. And primarily, I think the problem in the space is obviously there's infrastructure issues, but I also think that there's a lack of focus for consumers, just general retail. And so whenever you see products today, they seem more experimental than practical use cases. Yeah, so that's kind of my thoughts on that, by the way.
00:09:42.561 - 00:10:12.345, Speaker C: Is that the ACM Award, Is that the same as. Because I used to do math competition in high school. What kind of college. But I never did any computer science competition. But there was one called the ACM that was probably the most important computer science competition for high school college. I wonder if it's the same one. It's probably the same one, right?
00:10:13.245 - 00:10:20.385, Speaker B: Probably, yeah. Unless you're talking about Academy of Country Music Awards. No, it's a joke.
00:10:21.475 - 00:10:22.435, Speaker C: What about Sam?
00:10:22.555 - 00:11:18.917, Speaker B: Sam has a very interesting background. He's the co founder and CTO of Mystin, also one of the leads, lead creators of Move the language. Sam, after doing some research, he's published over 21 white papers all the way back from 2010. And a lot of his work has to do with data optimization and private key distribution and mitigating attacks from hackers. It's very interesting because a lot of the work that people do before they get into crypto can pretty much dictate what they're going to do and how well they're going to do it. And what I've learned from, and I've read, maybe I skimmed through a couple white papers and a lot of his thinking and the way he writes is very technical in the sense of being able to try to solve problems from a very technical perspective. And I think that's why Move was created in the first place by him and his team.
00:11:18.917 - 00:11:26.853, Speaker B: And that paper was published back in 2019. And I'll talk a bit more about the paper and move.
00:11:26.949 - 00:12:18.081, Speaker C: Anecdotally, I heard from one of our founders who moved from I can't remember if it was Solana or Ethereum to sui. He told me that the SUI MOVE language did feel more secure in a sense, that it purposely proactively avoids some of the mistakes that developers can make. So like if you program in the suing move, it's impossible to make some of the mistakes that you would otherwise make in the original Move or Rust or Facilities. It's a very anecdotal point. Why is that it does speak? Well, I mean, it depends on how we design the programming language. Right. Like 10 years ago I wrote a lot of C and the C version back in the day was very error prone.
00:12:18.081 - 00:13:25.971, Speaker C: Like if you have to manage your own memory, you may have like memory leaks in runtime. Whereas the later more modern languages like Java or whatever or any other modern language, they basically does not allow, they don't allow the developer to manage their own memory. The memory is managed by the compiler itself. So the developer can possibly make these mistakes and ultimately it's due to the design of programming language itself. So just to give you an example, so that speaks to the earlier point that you brought up, which is that Sam has a background in formal verification security side of things. And again, that brings back to a narrative point that I brought up, which is the DNA of the founder ultimately dictates how the ecosystem might behave in a few years. So I would imagine that with the greater focus on security, there might be fewer hacks on the SUI ecosystem.
00:13:26.083 - 00:13:26.775, Speaker B: Yeah.
00:13:27.115 - 00:13:31.535, Speaker C: So I mean, it's a conjecture, it's not a prediction, so.
00:13:32.275 - 00:13:45.419, Speaker B: Well, I mean, I think that's a strong enough beachhead to have another layer one. I think we talk a lot about why we need another layer one and you know, you could argue both sides.
00:13:45.547 - 00:13:48.883, Speaker C: I've never had a great answer to that, but same.
00:13:49.019 - 00:14:53.005, Speaker B: But I'd say over the past two years with, I don't know how many attack, how many, how much money did protocols and layer ones and L2s lost over the past two years, I would say at least 2 billion. And if we're going to, I guess if we're going to keep losing money on crypto apps, then there's no way we're going to get mass adoption. There's just no way. And what happened with UST and all the other stuff is just ancillary to the major problem that that's in the space, which is bridges. And all our security assumptions are not fully solidified yet. So a lot of the things that we're doing is still very experimental and I do think that there could be more innovation on the security side and the scalability side to both offer trust assumptions in a way that's going to be good for the users, but then also, you know, fast enough throughput where users can do what they want, similar to consumer apps today. So I still think that those two are big areas that needs to be focused on and we're not giving enough time to that.
00:14:53.005 - 00:14:58.121, Speaker B: And maybe with what suite founders are Building there could be something there.
00:14:58.273 - 00:14:58.889, Speaker C: Cool.
00:14:59.017 - 00:14:59.765, Speaker B: Yeah.
00:15:00.345 - 00:15:01.329, Speaker C: Let's get straight to it.
00:15:01.377 - 00:15:33.659, Speaker B: Let's bring on the founders. Welcome Evan and Sam to goodgame. There's been a lot of excitement around Sui and a lot of news regarding the ecosystem growth of the founders are building the space. And so before we get started, we'll just love to learn more about your backgrounds. How did you come up with the idea and maybe kind of like from where you started and where you are now. And then we'll kind of go through some more questions after that.
00:15:33.827 - 00:16:13.263, Speaker D: Yeah, absolutely. And thanks for having us, Imrano. We're really excited to be here. So, yeah, let me tell you a little bit about my background and my path to founding Mystim and then working on suite. So I started off my career as a programming languages researcher. I was studying static program analysis, where we build automated bug finding tools that try to look at code and find bugs and report them to developers. And I had a great advisor who was also named Evan Chang, coincidentally, who really pushed us to look at both the beautiful math for this automated bug finding, but then also really focus on identifying real problems in real code and just understand what kind of problems developers were having and how we could help them the most.
00:16:13.263 - 00:16:58.601, Speaker D: And so I spent many years doing this research and then got a chance to do an internship at Facebook where they were starting to use some of this technology in a commercial capacity. This was when Facebook was transitioning from web to mobile. And we're discovering that if you ship a bug into a mobile app, it sits there for a long time. And so they were trying all sorts of different ways to keep bugs out, including this automated bug finding technology. So I landed over there and it was the same kind of work I did in grad school, except that you got your work put in front of tens of thousands of developers, you got real time feedback on what worked well, what didn't work well, and what else we could try to find. And I was just totally hooked at this idea of working at the intersection of research and production. So I joined Facebook full time after I finished my PhD and I spent about three years working on the static analysis technology in various spaces.
00:16:58.601 - 00:17:40.397, Speaker D: I loved the work the whole time, but if you do this work for long enough, you develop a lot of opinions about programming language design and about software safety and about compositionality. And so I just had a lot of ideas about, well, you know, I'm detecting these bugs, but how could I actually just prevent these bugs from happening in the first place? By changing a little bit how the language is designed or how the framework is designed or just like doing things a bit differently. And so I was really excited in 2018 when I had a chance to put these ideas to work. When I joined Libra to lead the effort on smart contracts there and there, the mandate was very broad. We were allowed to do anything using existing language, creating our own. You're doing some sort of hybrid. And so I was on the research team led by Evan there.
00:17:40.397 - 00:18:25.239, Speaker D: And this is also where I met my co founders, George and Costas and just really got into the crypto space and the smart contract space and like started to understand what's going on. So we worked together productively for, for many years on Libra. We came up with a lot of cool ideas and went into Libra itself. And then when Libra started to get closer to production and be more narrowly focused on becoming a payment system and becoming a sort of wallet based payment system that it was going for on the research team, we did a lot of work that was more forward looking than sort of motivated by what would the next generation of Libre look like or by limitations. In Libra, we had a lot of this cool work and we were all friends and we had thought for a while, for quite some time about doing a startup together. But we also had a lot of conviction in Libra and in the mission and just really wanted to see it get out the door. But at some point it became very clear that wasn't going to happen.
00:18:25.239 - 00:18:40.445, Speaker D: We said, all right, do it. Let's see what can happen if we take these ideas and bring them out into the broader crypto space. And that was the genesis of Mistin. So I've already spoken for too long. Let me toss over to Evan to talk about his background and to pick up the story from there.
00:18:40.985 - 00:19:06.395, Speaker A: Yeah, thanks Sam. So my background is a little longer. I've been in tech for almost 26 years now. So start out as a software engineer, pretty good one. So spent a few years out of startup, a couple startups and then join Apple. So at Apple my claim to fame was I helped made LVN real. So I was a 2012 ACN Software System Award winner for my work there.
00:19:06.395 - 00:19:51.139, Speaker A: So, you know, it's pretty rewarding to see this. My software basically is in every single smart devices out there today. It's running there, it's being used for everything. So you know, kind of always being interesting, pushing the boundary of technology, you know, kind of continue to do stuff that no one else want to do or don't know how to, you know, Too scared to deal with even after I get to Facebook. I was building out the program language and runtime organization, but that was 2017, 18, right around the time I got the crypto bug. You know, kind of got really intrigued by the concept and also saw the opportunity to build something much, much better. Kind of a little similar to Sam.
00:19:51.187 - 00:19:51.347, Speaker D: Right.
00:19:51.371 - 00:20:49.377, Speaker A: I have a bit of a programming language background. Pretty horrified by what I saw when I see the smart contract development environment and all the bugs in the smart contracts. Start kind of developing the idea if the opportunity arise. And I want to be of something pretty substantial in this space. So that was the time, you know, right around time the internal to Facebook there was some discussion about the Libra project and for me it was a sort of no brainer to join the project versus going out to a startup because it was still really early. The kind of talent I knew is going to be needed for building something this big, this big idea just wasn't possible if I kind of went out and tried to build a team myself. So, you know, when I joined the Libra project I was kind of responsible developer platform as well as building out the research team.
00:20:49.377 - 00:21:31.065, Speaker A: The idea is to take research and get into production. We simply have a lot of unknowns in how to build the system that's going to scale. There's a lot of programming language and formal verification research that needs to be done. All kinds of cool stuff in cryptography. And I want to build that team in conjunction with the resident engineering team with the developer platform we're building. That's how I got started in Libra. Later on, you know, as we as the same say, as we develop more and more, you know, kind of a technology and more kind of our thoughts about what the future should look like and see all the limitations, the, you know, all the existing technology.
00:21:31.065 - 00:21:43.065, Speaker A: Yeah, that's when it was pretty obvious it's time for us to kind of build a company ourselves and really see if we can, you know, take our ideas a few steps further.
00:21:43.615 - 00:21:55.535, Speaker B: Thank you. Okay, so you left Facebook Meta and what was the impetus for leaving Facebook Meta to start sui?
00:21:55.695 - 00:22:33.693, Speaker A: Yeah, yeah, it's a couple of things, right. I mean Facebook was having a difficult time launching the project in first case, right. Secondly, right. Because of all the pressure from the governments, from the regulator politicians, they already kind of, you know, for the last, you know, two plus years, they're already kind of really temper the ambition, you know. You know, and to be honest, right, it was never in Facebook's sort of business to build this kind of Open platform in the first place, right. Facebook's interest was primarily around commerce.
00:22:33.749 - 00:22:34.061, Speaker B: Right.
00:22:34.133 - 00:23:00.575, Speaker A: Payment usage. And you know, and while we were very, very attracted by the mission, right. And bank, the embanked and all, from the technical point of view, you know, from the ambition point of view, it's like, you know, try to make payment experience as great as any kind of interaction on the Internet. Right. Just streamline that. It's great. We always felt that that was needed to take a step further, right? Really, really.
00:23:00.575 - 00:23:53.037, Speaker A: If you generalize it, payment just a form of asset transfer, right. What if you build a kind of infrastructure that allow you to create any kind of assets right. On the blockchain, on the ledger and then allow you to move these assets around, combine them, program against and do all sorts of things that people will do with any assets, synthetic or real. Then you have something that's much, much bigger, you know, that, that feel like what we should be doing all along. You know, probably too big ambition to start with that but, but that's, that's the goal. So it was kind of for all those reasons that we feel like, yeah, it's, it's time, right. You know, it's, it's, you know, the current infrastructure is just not ever going to be approaching fulfilling them, you know, possibility.
00:23:53.037 - 00:24:07.157, Speaker A: So we, we need to do something about it. You sing this all the time, right? It's cool to like come up with ideas and see if others will realize it, but after a while I say, yeah, you know what, let's just do ourselves. That's the only way we can be successful.
00:24:07.341 - 00:24:31.179, Speaker B: A follow up question to that is you left Facebook and launched. So, and you know, we could talk a bit about the team and what you've done since then, but weren't you like maybe a bit intimidated by all the smart contract platforms that were already out there? How did you see that landscape? And why do you think that another smart contract platform should be available today for the masses?
00:24:31.347 - 00:24:34.587, Speaker A: Same. This is a question, Taylor, for you.
00:24:34.771 - 00:25:22.355, Speaker D: Yeah, absolutely. So basically no, I guess is the answer. We're inspired by what's been done so far and the use cases have already been built and the potential that's been shown. But when we think about, as Evan is saying, taking the next step, really think like there's something new that's needed and this was really the impetus of move in the first place. Where if you look at the smart contract space today, I think smart contract security is really an existential threat to the growth of crypto. The folks who develop smart contracts today are already basically as qualified as you can hope for. They're really smart folks, they really understand the underlying blockchains, they're super security conscious, they really take the responsibility of writing this code that manages millions of dollars seriously and still like multimillion dollar 100 million dollar plus hacks or a regular occurrence, sort of like a weekly occurrence basically at this point.
00:25:22.355 - 00:26:09.231, Speaker D: And so if you talk about growing the space and growing the developer and growing the developer community, you're going to get folks that are more interested in developing products and are less security minded. And this already like horrible security situation is going to become worse and worse. I think basically there's just no way to grow the developer pool in a sustainable way while not making the already bad security problem way, way worse. And so if the developers aren't going to get better, the only thing you can do to solve the problem is to have a programming language that has safety as a, as a first class principle that really looks at what happens in solidity and EVM and in these other cases to cause the problems and just prevent takes as much of it as possible off the table. Prevent things by construction. And then for things you can't take out at the language level, you want to do the stuff I used to do in my old life, static analysis, formal verification. You give programmers the power to specify the properties that matter for them.
00:26:09.231 - 00:27:01.739, Speaker D: You give them tools that can check them, make sure they hold for all possible program executions for all transactions. And then this is how you can grow the space sustainably and make the security better instead of worse, but also making smart contract development less intimidating. And so that's what we've been working on for years with Move, since the very beginning of the Libra project. And really it had reached a point where we can build a MOVE based platform, we can build the MOVE based platform. It achieves both these goals at the same time, making security as good as it needs to be, but also extending an olive branch to folks like game developers by presenting abstractions that are familiar to them, by writing examples that are familiar to them, by building SDKs and APIs that will really be like they're writing their game code, but it just happens to run on a blockchain. So this is sort of a roundabout way to answer your question about other smart contract platforms. But when we think about smart contracts specifically, we really think you need Move or something like Move to grow the space.
00:27:01.739 - 00:27:06.465, Speaker D: And so we felt compelled to come out with our own take on this.
00:27:07.165 - 00:28:05.525, Speaker C: So when I think about the opportunities for new blockchains I tend to think that they need to make very meaningful technical trade offs versus existing incumbent blockchains. So for example, in the case of Solana, they try to be the fastest blockchain at all cost. They encouraged very high throughput hardware, very powerful hardware to process a large number of transactions in a short period of time. So based on what you just said in the case of sui, would you say that MOVE is one of the most important innovations? Like, if not, what would be like the top one or two most important things about SUI that makes SUI different from the incumbents?
00:28:06.665 - 00:28:37.573, Speaker A: I'll say something here, then hand it over to Sam on the more technical side. Right. If you look at the landscape of not just blockchain tech in general, what usually after a few years you see these leaps in technical improvements that you just don't think that's possible. Right. You know, think about WI FI today, think about broadband today versus you know, many years ago, DIA modem. Is there a trade off? Actually there's not. Right.
00:28:37.573 - 00:28:54.469, Speaker A: So within the constraints of the existing technology. Right. We're not talking about Voice of Trilemma and in fact that there's a trade off. There will always be a trade off. Right. That's just mathematically impossible to solve all the problems. It's not a problem to solve, it's a trade off.
00:28:54.469 - 00:29:23.485, Speaker A: But the technology can improve such leaps and bounds. There really isn't that trade off relative to the last generation of technology. And that's how we think about it. We're not thinking about, hey, let's focus on this particular area. We're really to sacrifice. Right. You know, you see some of this already happening central, you know, kind of centralization being decentralization being one of the first ones that's being sacrificed for the sake of speeding up the blockchain operation.
00:29:23.485 - 00:29:30.165, Speaker A: So but to do that you have to take a completely different approach in building the technology.
00:29:30.465 - 00:29:30.849, Speaker B: Right.
00:29:30.897 - 00:29:36.729, Speaker A: So that's what we've done. And Sam can speak to that a lot more in Arcade.
00:29:36.857 - 00:30:08.857, Speaker D: Yeah, I mean I love my answer with move, but I think the, because we were asking about smart contracts, but the other design goal that we really had in mind with Sui is we really want Web2 style horizontal scalability. We want a system where if you give me a machine with one core, I can give you some amount of throughput. If you give me some more cores, I can push more throughput. If you give me more machines, I can push even more throughput and I can store more data. This is how things work in Web2. But Web3 platforms don't work this way, or at least most of them don't work this way today. And we want to do that, and we want to do this also while maintaining so called atomic composability.
00:30:08.857 - 00:31:07.405, Speaker D: The experience of a smart contract programmer or a user to be able to touch any piece of the state at once and not have to worry about cross shard communication or write code that deals with two phase commits. We think a lot of the or basically all the value in existing smart contract platforms is to have this abstraction where all of the assets, all of the code, everything is in one place and you can interact with it all at once anatomically. And so that was the design goal we had in mind with sui. And so what we did is we came up with a data model that's quite different than the way things work in Solana or the way things work in Ethereum, where instead of being based around accounts and modeling assets as hash tables that live inside of accounts or inside of smart contracts, we have an object centric data model where the global state is just a collection of objects that have global unique IDs. You can retrieve an object by its ID when you have a. Objects also have ownership metadata, so you don't need to put that inside of a hash table. Each object knows I'm owned by this address, or I'm owned by this other object, or I'm a shared object that anyone can interact with.
00:31:07.405 - 00:31:37.015, Speaker D: And then when you have a transaction, a transaction specifies the objects that it's going to act on. If they're owned by an address, the transaction has to be signed by the key corresponding to that address. If it's shared, anyone can interact with it. And then what a transaction does is expressed in terms of the input objects. It can read and write input objects and it can create new objects, but it can't touch other state. And then this new data model is really what lays the foundations for being able to have this Web two style scaling. Because now all of a sudden instead of having everything be an operation, the entire global state, everything is sparse.
00:31:37.015 - 00:32:14.405, Speaker D: A transaction only operates on the objects that come in. And so it's easy to shard execution by looking at transactions that touch disjoint objects. It's easier to scale storage because you can shard objects by their owner by their ID, sort of like again, Web2 style stuff. And it's easier to do and it's easier to verify the state because you don't have to have a whole view of the global state. You can do this in a Sparse way by starting from an object or starting from an address and looking at only those relevant transactions. This is sort of teasing the parts that we can go into much deeper later. But I think this is really what's at the core of swe, this new data model that we came up with because we started from the goal of having Web2 style horizontal scaling.
00:32:14.875 - 00:32:36.251, Speaker C: So horizontal scaling, Solana has implemented parallelization a while ago and obviously aptos also has their own version of parallelization. So then the natural question is how do you think about the difference between the SUI horizontal scaling and the other two?
00:32:36.403 - 00:33:05.753, Speaker D: Yes. So parallelization, horizontal scaling aren't exactly the same thing. So all three of these platforms do parallel execution, which is of course an important component if you want to scale transaction processing horizontally. But then of course you also have to scale storage. You also have to scale consensus. So let me talk about the execution part and then we can get, and how those parts differ and then we can get into the other bits. So there the biggest difference between both of those is again the data model, where in aptos they have this block STM system that's based on software transactional memory.
00:33:05.753 - 00:33:55.375, Speaker D: So it relies on, if I'm a validator, all the transactions are in memory on the same machine. And I'm going to basically set up little monitors that are, I'm going to optimistically execute transactions in parallel and I'll have little monitors that detect conflicts where if two things try to write the same thing at the same time and there's an ordering conflict. And so this works well if your workload is actually, if your workload actually has inherent parallelism and if you can fit everything in memory on the same machine, because you need to do that to have the monitors. Whereas our strategy is, okay, I want to build out a second machine or a third machine. And so if you need to have everything in the same memory, if you need to have everything in memory to detect conflicts, that's not going to work out. That'll work to parallelize execution on a single machine, but not really beyond that. With Solana, you pre declare the accounts that you have parallel execution and you do this by pre declaring the accounts that a transaction is going to act on.
00:33:55.375 - 00:34:31.563, Speaker D: And this data model ends up requiring you to pre declare a lot of accounts. Usually like there's this recent post where someone is showing. I think it's like an. Is it an escrow? I think it's a little more complicated. Anyway, it required 18 accounts to be pre declared in Solana and for Sui, it's like you have to say, here's three objects that I'm acting on. And so those have a similar strategy for parallelization in terms of a transaction talks about what needs to act on. But with this account based abstraction you just end up needing to touch a lot more things, whereas the object based abstraction is more direct and you end up having to basically take fewer locks to accomplish the same use case or fewer computation.
00:34:31.563 - 00:34:49.027, Speaker D: So philosophically these are similar. This is sort of pessimistic concurrency or declaring dependencies upfront versus optimistic. But that's the high level distinction between these approaches. And we can go deeper in both how SUI does it or some differences just very broadly.
00:34:49.131 - 00:36:13.175, Speaker A: If you look at how blockchains process transactions, execution of the transactions is only one aspect of this. So the other existing blockchains, Solana Aptos basically follow this model, right? There's headerline blocking, right? So they are ordering transactions, sequencing them, total ordering of all the transaction in a block, then executing them and then capturing all the states in a Merkel tree. Right. Our experience working at Libra to X was actually transaction execution is not even a bottleneck, right? It's lost, right? It's all the state capture all the state in Merkle tree, which is shared data structure, rather sparse, right? Because right now the blockchain is basically one kind of accumulator. Basically you keep on writing the blocks into it. Everything's writing to the same data structure and that is actually the real bottleneck. Right? So the other blockchains are trying to sort of pipeline some of these stages, but fundamentally these are still blocking, blocking, blocking, right? You're waiting for everything to be finished processing before you move on to the next stage, right? So what that means is also, as Sam indicated, right, you need to have one very powerful machine that's able to capture all these data on the same machine, so you can work on it at the same time, right? Our model, completely different.
00:36:13.175 - 00:37:13.663, Speaker A: We can distribute the workflow for every validators. You distribute the workload to all multiple machines, allow you to ammo machines to scale on the spot, which is the key difference in terms of this scaling strategy. Right. So why is this important? Right? It's the loads are never stable. You know, that's one thing we learned, right? It's also going to be spiky, right? You know, Christmas, you know, before Christmas, you know, all these social media companies have to prepare their back end to be able to support the more transaction request kind of incoming. You need to have this kind of system to be able to deal with these kind of spikes for your system to be stable because as we've seen, products continues to grow. If you cannot keep up with the growth of the products, the developer just not going to use your infrastructure.
00:37:13.663 - 00:37:27.191, Speaker A: So it's one thing to talk about scaling, it's another talk about this kind of horizontal scaling that allow you to adjust and have sort of this kind of elasticity in terms of your supply so you can meet the spiking demand.
00:37:27.343 - 00:37:58.495, Speaker B: So talking a bit more about paralyzed parallelizable transactions, aptos as an example tries to abstract away the calling out of transaction parallelizable transactions via block stm. And I guess for sui, you leave that responsibility up to the devs and that may creates maybe an inefficient experience for devs. Is that true or not? And why this decision over aptos?
00:37:59.115 - 00:38:46.635, Speaker D: Yeah, I think that's a misconception if you're a developer, right, like any transaction you have there's some minimum amount of content, sorry, intent that you have to convey. The system can't magically figure out what you're trying to do. And so what we've done in SWE is try to set it up so that the intent that you have to convey saying which NFT am I using in this transaction? Which DEX am I interacting with? The things you'd have to specify in any platform, sort of the minimum information is also the dependency information that helps the parallelization scheme. And so basically that's how it works. Like if you're interacting with a dex, you have to specify dependencies, but the dependencies you specify are what two coin types am I swapping and what's the ID of the DEX I'm interacting with. This is the same information you'd have to give on sui, on aptos, basically on any kind of platform. And so I haven't actually seen cases where you have to specify sort of more dependencies than you would need.
00:38:46.635 - 00:39:24.277, Speaker D: It's sort of you in sui, you write your entry points. A transaction is basically just you say, hey, here's the move function I want to call, here's the object inputs I'd like to take, and here's the pure inputs I'd like to take, numbers, booleans, whatever, and the only dependencies you have to specify are the dependencies are the inputs to this move function. So it's just basically saying here's a suspended function call that I'd like to make. And then you only have to specify those. When you talk about specifying what a transaction is going to touch, it sounds onerous. But when you actually get into the programming experience, at least the way that we've set it up. It's such that you only have to specify the minimum amount of information, the intent that you'd have to convey anyway.
00:39:24.277 - 00:39:47.505, Speaker D: So it looks the same as it does in other platforms, but with the advantages of the parallel execution can use this information. Wallets can use this information to say, hey, I know what this transaction is going to touch. So I can provide a preview, a human readable preview to the user so that they know they're not spending assets that they don't intend and things of this nature. We think there's a lot of advantages of this beyond enabling our parallel commitment and parallel execution.
00:39:48.565 - 00:40:06.105, Speaker A: Yeah. So for everyone that's not familiar with blockchain but familiar with programming. Right. In every programming language, it's natural. You have inputs to a function, you have output that can be used as input on the function. The causation ordered already dependency information already presenting your program. That's just natural.
00:40:06.105 - 00:40:18.105, Speaker A: The difference here is we capture the information being used for scheduling things for them to be executed in parallel. That's it. We're not doing anything that's unnatural here.
00:40:19.135 - 00:40:46.165, Speaker C: Okay. I think I get the developer experience between aptos and Suic, but I don't quite get what you meant by horizontal scaling is not exactly the same as parallelizable transaction. It feels like horizontal scaling means more than parallel execution. If so, what else is there?
00:40:46.985 - 00:41:20.433, Speaker D: Yeah, horizontal scaling is about scaling storage as well. Like, let's say you're very effective at processing transactions in parallel, but you need to have all your data in memory because you need to have all your state in memory, because you need that to detect conflicts, or because you need to compute a Merkle tree that goes over the entire state and that needs to be efficient and be able to fit everything in memory. So that's an aspect of blockchains. It's very important to scale as well. So when we talk about horizontal scalability, we're talking about scaling of throughput and we're talking about scaling of storage as well. And so that's basically the primary difference.
00:41:20.529 - 00:41:25.681, Speaker C: Okay, but storing storage, meaning memory storage, not like disk storage.
00:41:25.873 - 00:41:41.483, Speaker D: Disk storage, object storage. Yeah. We want to be able to store petabytes of objects and we want to be able to accept transactions that are just grabbing arbitrary objects out of there and be able to process them just as efficiently as transactions that are sitting on or as transactions that touch stuff in memory on the same machine.
00:41:41.659 - 00:41:42.495, Speaker C: Got it.
00:41:42.835 - 00:42:15.405, Speaker A: Furthermore, just to reminder, execution is only one part of the transaction Processing the first part is sequencing all the transactions. So that's the bottleneck. Right. So that part is not possible to basically scale them in any of the blockchains processing pipeline. Same thing with Merkle Tree Update. So those are the actual bottlenecks. Execution is only one part of the pipeline.
00:42:15.405 - 00:42:18.085, Speaker A: It's probably not even the most expensive part.
00:42:18.465 - 00:43:03.685, Speaker B: And I mean if you look at Ethereum with the original vision of Ethereum 2.0, sharding was a large part of how they were thinking about scaling. But it turns out sharding also is prevents composability different shards because you have a lot of these data transactions that are living in individual shards. And so it does create some like detriment for founders that are looking to build and create composability within a space. So it seems like in this case you're able to kind of scale elastically. Right. With the compute and all the resources that are available that will ultimately allow you to have horizontal scaling with data input, output and all of the other services.
00:43:03.685 - 00:43:05.985, Speaker B: Right. Is that a way to think about it?
00:43:06.565 - 00:43:06.893, Speaker C: Yeah.
00:43:06.909 - 00:43:33.215, Speaker D: So sharding in Ethereum or in near or in other blockchains of sharding, the protocol level is different than what we do. The term we use to distinguish these is intra. That's RA validator sharding versus inter validator sharding. We're doing inter validator sharding where this is an implementation detail of the validator. It's not visible between one validator to another, it's not visible to clients. You don't break composability, as you mentioned. Whereas there are other systems that are doing inter validator sharding here.
00:43:33.215 - 00:44:00.903, Speaker D: Sharding is part of the protocol. There's an algorithm for deciding where different bits of state lives. There has to be a notion of cross shard transactions and all of these sorts of things. And so we think the latter is a much harder problem, sort of like a research grade problem that ends up leading to a worse developer and user experience. And so our focus is on intra validator sharding, just making this an engineering problem that we have to solve in building the suite software and that validators can deploy them inside without anyone having to be aware of how it works.
00:44:01.079 - 00:44:47.121, Speaker A: Yeah, I mean the interval data sharding has some significant sort of trade offs. One is whenever you're moving data across shards, it's pretty slow. Right. So and if the protocol is set up when it's done automatically, you still pay the penalty or moving data around if you are leaving the managing of the data to the developer that creates a different set of problem. They may be able to do it more efficiently themselves. But you're asking now developer who are having trouble writing correct A smart contract also have to deal with all the asynchronous communication problems that you're going to see about it. Different kinds of challenges.
00:44:47.313 - 00:44:48.205, Speaker B: Got it.
00:44:48.625 - 00:45:15.125, Speaker C: I want to ask a question that several founders in our community want us to ask, which is it's not related to the technical side of things, but related to community building. Basically they're wondering how like what do you guys do to bootstrap this grassroot community of developers for the SUWA ecosystem? How do you grab more developer mindshare? What are your plans for that?
00:45:15.545 - 00:45:51.409, Speaker B: And maybe I'll highlight a few examples and then maybe we could dive deeper into that. An example is you have Polygon that's purely focused on BD and growth. They do this through partnerships of large brands and then they bring in a lot of eyeballs into the space. You have some that are very technical focused. So maybe something like near that's primarily focused on or Ethereum that's primarily focused on bringing folks that are gravitating towards those ecosystem purely based on technical functionality. And there are other styles, but those are two that we're seeing predominantly.
00:45:51.537 - 00:46:55.273, Speaker A: Let's start from the high level, right? So what we are trying to accomplish is very important, right? We believe the last few iteration, few cycles, crypto has shown us what can be done, but also shown a lot of limitations. And more importantly, you know what, the technology is so far serving a relatively small niche audience. People are sort of arbitraging or trading assets which is so defi has been successfully used by some professional traders and amateur traders. You also have collectible snaps which create a new synthetic asset class. People are trading, but again they almost all comes down to trading in terms of utility. There's very few examples of any kind of success or sustained success. So for us it's really important ultimately for this field to be successful, to be sticky, to actually be real is deliver impact to the consumers.
00:46:55.273 - 00:47:42.413, Speaker A: Right? Consumer benefits need to be there. And to do that one path is to build brand new experiences. That's not possible without this technology, without crypto. But it's also perhaps overlooking the importance of allowing existing consumer grade products to adopt the technology. Because ultimately what is the problem you're solving? Well, it's about changing the interaction model, you know, sort of changing the relationship between the product and the consumers, right? So they have co ownership. So if you can Solve that problem. You know, you should be able to solve that problem in a variety of different kind of products.
00:47:42.413 - 00:48:51.071, Speaker A: And that's ultimately how you reach a lot of the people the consumer can be, business can be end users. But that's ultimately where, you know, what we're building the platform for, right? It's not just for, you know, kind of a relatively niche community. So with that in mind, right, we're taking a somewhat different approach, right? Yes, we are, you know, sort of supporting the developer community. A lot of people come in, you're going to see us be more aggressive in, you know, having hackathons and you know, publishing tutorials and educational contents, having, you know, competitions and rewards, all that to attract them. But there, what we're building, what's the most important thing for us to take on is reduce the friction developing on the platform, given the best experience, given them the tools to realize their ambition. On the other hand, we are also working with a lot of larger product builders. A lot of them are Web2 developers and been thinking about adopting this technology.
00:48:51.071 - 00:50:07.945, Speaker A: You've seen one example that we already announced as part of Series B is Netmarble, right? Netball is building the kind of largest game, Metaverse on our platform there we're talking about, well, the ambitions of millions of daily active users, right? If you see, look at their track records, that's kind of the product they built. So why are they important, right? Well, they're showcases, they show the world, show people how do you build large scale products, right? These are the different sets of problems you're going to have to deal with, you're going to have to solve, right? Because they always worry about customer acquisition or we worry about conversion and retention, right? These are different sets of product problems. How does the blockchain technology fit into so that their arsenal of technologies they use to, to solve these problems are significant. Very different from the sort of the more, you know, smaller grassroots developer community that focus more on sort of protocol level province, you know, so we're approaching kind of in, you know, both ways and building our ecosystem that ultimately will serve the consumers.
00:50:08.245 - 00:50:26.499, Speaker B: You mentioned something about the gaming focus. From some of the articles that I've read, it seems that SUI is focused more or less on a specific vertical like gaming versus others that are primarily general purpose. Is that true and why.
00:50:26.667 - 00:51:17.583, Speaker A: No, that's not true at all. So gaming is good beach hits, right? So why is gaming important? Well, one, there's a lot of consumers, right, for gaming products and people understand the ownership aspect sort of more, you know, sort of naturally in gaming environment, especially open world mmorpg, you know, large scale gaming. Why? What else is important? Why is this a good demonstration? Because gaming is not gaming anymore. Gaming are social, right? You know, Fortnite is a social network. You know, a lot of people are interacting in the game together. Commerce also happens, right? So the power of this technology is merging all these verticals together, you know. So why are people excited about Metaverse? That's precisely that.
00:51:17.583 - 00:52:02.445, Speaker A: It's not just games, right? It's. It's everything in the games. There's events that happens, there's a social interaction. When events happens, those can be captured as almost a moment is memorable, right? That creates an asset that can then be shared by the people participating in the game in their social experience. So that's why we are focusing some our early kind of efforts, partnership efforts around gaming. But what make them possible is all these different vertical. There's trading elements, so there's also defi elements in a lot of games or marketplace.
00:52:02.445 - 00:52:10.705, Speaker A: In the games all those things come together. It's all these building block that makes kind of Web three powerful.
00:52:11.885 - 00:53:03.825, Speaker C: How do you envision the consumer experience be like on Suway? Because the current, you know, mainstream or mainstream experience on Blockchain, let's say on Ethereum, is the user, you know, they have to go to open their Chrome, then install their browser extension for Metamask and then every time they do a transaction in the consumer application or game or whatever, they have to sign a transaction. It's really painful experience. And it's mostly desktop. I would say the mobile experience is even more broken. I tried a bunch of mobile wallets that are completely unusable, let alone the security aspect of it, like storing your private keys on local device. It's really messy. How will the experience on Sui be different?
00:53:04.325 - 00:54:16.935, Speaker A: So if you're successful, if the community is successful in a few years, the experience should be completely different. The experience should be very, very similar to your current experience interacting with desktop mobile products. You're using a product, you're enjoying a product. The concept of wallets are sort of baked in or integrating into your overall flow and experience, right? If you're playing a game, the last thing you want is getting kicked out again, go to a wallet and then have to press some button to pay for gas, right? So the concept of paying for gas should be invisible to the product, to the consumer as well, right? So these are the things that's very, very important, right? You can't just think in terms of the technology right now. It's limited require using tech with wallet pay for gas, you have to think about from the product and the consumer experience. If today I have a successful free to play game, right? What I do is I distribute my products to consumer that's curious about it. They start playing without doing, jumping through hooks, right? They're not paying for anything initially.
00:54:16.935 - 00:56:05.153, Speaker A: You don't want them to think about, oh, by the way, you have to go to our discord register and buy some NFTs you don't want them to think about download wallets and make sure you have some tokens in your wallet to pay for gas, right? These are frictions you're adding to the early part of the, you know, the process. The enjoyment is very, very limited. If you have to deal with all these friction, right? I want to jump in, start enjoying my product, right? Even outside of gaming, think about this, right? You know, we talk about blockchains being essential for the creator economy, right? So because they want to have more control of their assets, how to monetize it. Well, what about the creation process, right? Let's say today if I am photographer, right? How do I mint my artwork, my photography as nft and put it on the marketplace, right? It's high friction because it's all different, separate stage, right? You create your product, then you have to use a different sets of tool and deal with gas and all those complexity. And to create a NFT mint, right, you have to set all kinds of parameter, then you have to have separate experience uploading to a marketplace, which often require you to use a completely different set of tool, right? Imagine compare that to an Instagram experience or any kind of a photo sharing experience. You open up the app, you take a photo and you press the button, you're done, right? You don't even think about paying for anything, right? That should be the same experience. You're going to see that happening on suite experience like that, right? Because we abstract away a lot of these complexity.
00:56:05.153 - 00:57:11.095, Speaker A: We have feature allow you the product to pay for gas without the user ever worrying about it's built in, right? So think about it. Now you can potentially take a photo and press a button, upload to marketplace, but everything is set up automatically for you. The product's paying for your gas. They also set up the contract. So if your artwork, your photographer gets purchased or gets rent, they get a cut of the payment to recover the cost of paying for your gas fee and all that, right? So very, very different model. That's where we need to go, right? You know, the experience you describe you know, dealing with MetaMask, all the other kind of, you know, wallets are not the mainstream consumer experience. You know, it's completely fine at this stage of crypto web 3 products because we're still early, we're not going for the consumer market, but it's not going to be experience that really get us to, you know, hundreds of millions of billions of active users.
00:57:11.095 - 00:57:34.549, Speaker A: That's the experience. They're dealing with products, they're not dealing with the blockchain. Right. It's just like very, very similar to the early days of the Internet. Right. You're using a text terminal, you use very, very coarse, you know, kind of, you know, not very refined products to send an email compared to today. Right.
00:57:34.549 - 00:57:39.185, Speaker A: You know, very, very different experience and that's what we're going for.
00:57:39.485 - 00:57:55.865, Speaker C: So folks, as with every everything in crypto, there's a lot of misconception, a lot of misinformation. What you say are some of the top misconceptions that the public has about sui. I want to give you a chance to address those.
00:57:56.845 - 00:58:33.491, Speaker A: Yeah, I think there's a few. The first one is, well, is this based on the technology we develop at Facebook at Meta? There's a lot of underlying technology, yes, that we start developing thinking of them back then. But the big difference is we did not take that blockchain and using it. Right. We decided to build something from the ground up. This whole concept, the data model being objects are completely new. So even our version move is significant change.
00:58:33.491 - 00:59:09.411, Speaker A: We really pretty much design and build everything from the ground up. So that's the biggest, I think misunderstanding by everyone, but almost everyone is that all you guys came out of Facebook Meta. Is this based on dm? It's not. It's actually very, almost very, very little code come out of that DM Code base number two is a lot of time people don't really understand the horizontal scaling. Right. And I'm glad we have a chance to talk about that today. People think about, oh, it's just a different scaling technique, right.
00:59:09.411 - 00:59:51.589, Speaker A: It's got a better consensus or it's only have parallelizable execution through this fast paced model. No, the beauty of sue is all these things come together but the fundamental what make it special is the data model that allow us to basically grouping transactions. They relate to each other and process them as a group. Right. So rather than having whole lot of transaction in your block, most of them have nothing to do with each other. You're processing all the block of transaction. Italian say within all these transactions they Are basic group based on the objects they're targeting and each one of the group are independently processed.
00:59:51.589 - 01:00:27.925, Speaker A: This allow you to have a very different way of, you know, thinking about transaction pipeline, thinking about architecture of the blockchain and even have impact on developer experience. Even reading the data on the blockchain are very, very different. So, you know, I think that's not so much a misconception, but people really need to dig deeper. It's not yet another blockchain that goes through this state stages like every other blockchain. You know, the fundamental difference really is the data model.
01:00:28.045 - 01:01:06.569, Speaker D: The only thing I would add is we didn't talk about it as much on this podcast, but a lot of times when folks look into Suite first, the first thing they see is these two different paths through consensus. The fast path that can do parallel commitment, that has very low latency and then the route that uses sequencing using Narwhal and Bullshark. And I think there's a common misconception where it's like, oh, if I want to use this fast path, then SWE is the best thing ever, but if I don't, then SWE is somehow worse than other platforms. And that part isn't the case at all. Where we think of it as like, Narwhal is the best in breed, Narwhal and Bullshark are the best in breed. We have very fast consensus, very fast sequencing. And it's just this other path gives you a way to skip that and have even lower latency for some class of transactions.
01:01:06.569 - 01:01:16.365, Speaker D: So that's one technical misconception that I see a lot and possibly because we emphasize that first part so much because it's new, but that's something I want folks to know is that both of these paths are really quite good.
01:01:16.915 - 01:01:50.211, Speaker A: Yeah. The other thing just coming back to what we discussed earlier, execution, parallel execution, isn't it right? Isn't the entire story. Parallel execution is when you have a bunch of transaction, they are dependent, they are related. When you execute them, processing can you do it more efficiently. But it's only one part of the pipeline. So what we are doing is basis, you know, paralyze the entire pipeline. So that's a part, I think most people don't, a lot of people don't quite get.
01:01:50.211 - 01:02:17.485, Speaker A: But I did do a Twitter sort of threads a couple of weeks ago and I think that probably is a good introduction of the high level kind of design, the model of suite. So we'll urge people to read that and get a better understanding because we understand It's a very, very different design and takes some time to really wrap your head around on it.
01:02:17.945 - 01:02:29.365, Speaker B: Well, we're at time really appreciate you hopping onto Goodgame to talk a bit about sui. And if developers or builders want to learn more, where do you think they should go?
01:02:30.105 - 01:02:54.193, Speaker D: So it started docs SUI IO. There you'll find links to hop into our discord. You'll see links to the GitHub if if you want to contribute code or file issues. Also there are telegram builder groups for sui. Have your folks reach out to us or to their suite friendly friends and we can add them. We really just of course on Twitter we're very active as well. We just really want to meet the community, especially developers where they are and just eager to engage with them wherever is most convenient.
01:02:54.329 - 01:02:56.525, Speaker B: Sam, Evan, thank you so much for your time.
01:02:56.825 - 01:02:58.665, Speaker D: Thank you all for having us. This was great.
01:02:58.825 - 01:02:59.641, Speaker A: Thank you for having us.
01:02:59.673 - 01:03:00.325, Speaker C: Take care.
01:03:03.395 - 01:03:07.011, Speaker B: That was a great talk. What are some of the things that stood out to you, Chao?
01:03:07.083 - 01:03:52.215, Speaker C: I learned a couple of technical things that is sort of counter to the popular narrative. So one is that I think a lot of people equate the parallelization that Solana did to what ATOS did and to what SUI did. It turns out that they're quite different, at least according to the founder of Sui, Evan and Sam. Solana and Aptos focus on the execution, but execution is not the entire pipeline of blockchain. So if you think about the pipeline, there might be three or four main components. One is when you receive the transactions, you order them. That's the ordering.
01:03:52.215 - 01:04:40.831, Speaker C: Once you've ordered the transactions, you execute them and then after that you write the states, you store the states. Right? So this entire pipeline of processing blocks, SUI tries to address all three steps in that pipeline. Whereas in the case of parallelizable transactions, in Aptos and Solana, they only focus on the execution. So that was very interesting. I don't know. I don't pretend to understand how they managed to do this whole parallel like horizontal scaling across the entire pipeline. I would have to go back and read their white paper to maybe try to understand it, but that's at least what they claim to achieve.
01:04:40.831 - 01:05:23.651, Speaker C: And why is that important? Because execution is not the only bottleneck. The entire pipeline is all the way from order to storage. That's very interesting. And behind the scenes, what enables them to do that is a object first model rather than account first model. So in the case of Ethereum, for example, the first class citizen is the account. Whereas in the case of sui, the first Class citizen is the object. So let's say like an asset, like your C20 or whatever.
01:05:23.651 - 01:06:15.735, Speaker C: Right. And it turns out that that is what enabled this pessimistic parallelization by the Swim Move programming language. That is the technical part. What also pleasantly surprised me was the fact that both Sam and Evan come from a very deeply technical background. But they have some interesting answers, some good answers in my opinion, about community building. Obviously they are going to do all these hackathons like developer documentation, API documentation, all these things to help crypto native developers on board. But more importantly, they consider gaming as their beachhead market.
01:06:15.735 - 01:06:57.113, Speaker C: And they're focusing primarily on smart. Exactly. Because gaming has two implications. One is there's almost everyone plays games. I play a lot of games and it's probably the first vertical of applications that will bring crypto to the masses. And the other interesting thing about gaming is that almost all modern games are social in nature. I don't play Fortnite, but like a few years ago I saw my nephews play Fortnite and they don't play Fortnite for the sake of playing Fortnite, they play Fortnite because they hang out with their friends.
01:06:57.113 - 01:07:03.377, Speaker C: So Fortnite is first and foremost a social network, not a game. But yeah, I thought that was very interesting.
01:07:03.481 - 01:07:52.251, Speaker B: But even if you look at the history of computing, let's go back to the 70s, 80s, you had these huge time based servers that would sit in universities and students would hack into it and then play mud like games. And that's how computing actually got started. Right. And I always kind of look back and think at every huge paradigm shift in computer computing. And it turns out you have a few industries that take off first that kind of predicts where the future is going to be. So an example of this is for mobile. You had the adult industry that kind of took off first with video streaming and then you had gaming for crypto.
01:07:52.251 - 01:08:12.839, Speaker B: I also think it's very similar. You're going to have certain sectors where most of the minds are working in that will develop concepts that would ultimately take off. And I think one of those is going to be games. So it's very interesting to see that. It's very interesting to see his strategy on games from that perspective.
01:08:12.967 - 01:08:14.755, Speaker C: What did you learn from the interview?
01:08:15.135 - 01:09:21.388, Speaker B: There was a few misconceptions on Twitter that I found. I was actually surprised. One that was, you know, the comparison between like aptos and Sweep, where aptos is more developer friendly and focused with Block stm, which, and if you guys haven't watched our Last episode Block STM is ultimately a would optimistically approve transactions that have dependencies and then will validate afterwards whether or not there's dependencies. And if there's dependencies, then it would invalidate the transaction. Whereas with sui, developers have to call out the dependencies while they're working on the product. And they say that, and people have said that this experience is pretty bad for developers and that people are going to be more akin to using aptos. And it turns out they called it out, the founders called it out and said, you know, it's not that hard.
01:09:21.388 - 01:09:30.824, Speaker B: It's actually pretty easy. In fact, it's very easy to do that. And our programming language makes it easy for any developer to call out dependencies. So I thought that was an interesting call out there.
01:09:31.284 - 01:09:31.868, Speaker A: Yep.
01:09:31.956 - 01:10:34.915, Speaker B: A couple other things that stood out to me was you mentioned gaming, which I also agree is going to be very important. It's some sort of beachhead. And the reason why I say this is because if you look at all the ecosystems today, like Avalanche and all the general purpose chains, right, Whether monolithic or others, they just focus on everything. If you're building something, come build with us. It turns out, at least from the things that I saw over the past couple of years, is it's always better to focus on one sector and grow it, because when you grow it, then you can. Although you could invite every developer and build whatever you want, having them focus on gaming or another sector, you could probably be very specialized over time and it'll help you get faster to validation in terms of product market fit. And so I do think that having a focus like that is very important in the layer one, L2, space.
01:10:35.035 - 01:11:22.175, Speaker C: But he said specifically that gaming is not their only focus. It's just a B10 market. And anecdotally I heard from a couple people in the SUI and Aptos community that Aptos. It seems to them that Aptos is focusing primarily on DeFi, whereas SUI is more on consumer, including gaming and social. That is probably true to some extent. That is the current state of things. Meaning that there might be a overwhelming percentage of founders in the APTOS ecosystem building DeFi, whereas in the SUI ecosystem it's gaming or social.
01:11:22.175 - 01:12:06.997, Speaker C: But I would imagine that in both cases these are just beachhead markets. So they have different strategies to bootstrapping the initial activity on chain activity. The DEFI angle is actually interesting because my perspective is that last year the alt layer ones that took off, at least temporarily, they almost all started with DeFi. So Solana started with DeFi a bunch of Dexes and lending platforms. Same thing with avalanche arbitrum. The first sign of activity and narrative and hype around new layer ones is always TVL. People always talk about TVL, TVL increasing, and TVL ultimately is DeFi.
01:12:06.997 - 01:12:21.899, Speaker C: And so Aptos is kind of using the same strategy, at least according to the founders that we talked to. But SUI is taking a completely different approach which is focusing on consumers as a butcher. So I thought that was interesting.
01:12:22.037 - 01:13:05.227, Speaker B: Yeah, I think defi, you know, I mean even if you look at alliance, we were at one point called Defi alliance and that was primarily because that was the first sector that took off and over time realized that, you know, defi is part one of many sectors are going to take off within web3 crypto. But you bring up an interesting point which is like most layer ones, L2s always focus on like DeFi and then grow the TVL and then over time start to focus on other applications. How important is defi to a layer one? Like in order for a layer one to be successful, do we need to have defi activity?
01:13:05.371 - 01:13:41.095, Speaker C: My mental model of defi is DeFi is actually two things. There's DeFi infrastructure and there's defi applications. So in my mind, the likes of Uniswap and AAVE basically spot decentralized exchanges and lending and also the core NFT marketplaces. I consider NFT marketplaces as DEFI as well. By the way, these things are core infrastructure. They just have to exist. Because if you think about what crypto is, it's an open ledger of assets that have value.
01:13:41.095 - 01:14:23.635, Speaker C: And what do people do with these assets? They need to trade it, they need to lend it. So trading and lending of these assets, be it fungible or non fungible, they must exist. They're part of the core infrastructure. Okay, so uniswap, aave, their core infrastructure. On the other hand, you have things like dydx, gmx, these higher level stuff that are derivative trading, structured products, things that sit on top of the base layer stuff. The base layer meaning spot exchanges and landing on stablecoins. So the higher level stuff, to me these are applications.
01:14:23.635 - 01:15:03.799, Speaker C: So I think there are two different types of DeFi. So the first type of DeFi, the infra, they must exist, whereas the second one, they're not critical for the success of these layer one blockchains. And by the way, that is the reason why you've seen DYDX moving from an Ethereum layer into its own app chain. But you don't see Uniswap do that because Uniswap is the core infrastructure of Ethereum. DYDX is not a core infrastructure of Ethereum. So this is how I think about defi.
01:15:03.967 - 01:15:59.603, Speaker B: So if that is true, then every Layer one should have core defi as part of their go to market strategy. Right? They'll need to have a wallet infrastructure, they'll need to have core defi, which is like AMMS lending protocols. And once you have kind of this early foundational building blocks, then you can start to build out the entire, start to work on the entire ecosystem. I mean it makes a lot of sense. I mean if you look at like crypto, I don't know if you remember, but back in the day, 2016, 17, 18, Ether Delta, which was, I don't even remember trading on Ether Delta, but it was like one of the first dexes that was out there. And the only reason why I use Ethereum was so I could buy shitcoins or on like, on, you know, like certain places I would buy shitcoins and be able to sell it on Ether Delta. Right.
01:15:59.603 - 01:16:33.345, Speaker B: And that was primarily the use case that I used it for. Right. I mean I didn't use it for anything else. And if you look at a lot of core, if you're thinking about bootstrapping new ecosystems, speculation is like the first use case. And so you have to build out that activity in order for you to start to build out the other building blocks of layer one, L2 ecosystem. So you have core DeFi. And so if you look at Sui and then Aptos, Aptos seems to be pretty good in focusing on Defi, whereas SUI is more or less focused on gaming.
01:16:33.345 - 01:17:05.157, Speaker B: I did see some wallets that have been building on sui and so I'm starting to see some traction in that ecosystem. I'm starting to see also those diagrams where you see the ecosystem and a bunch of logos. I'm sure you've seen this. I think the block does a pretty good job of it. But I started to see one for SUI already and in fact one of our startups in our cohort is building a wallet for sui. So we're pretty excited about both of those ecosystems.
01:17:05.261 - 01:18:14.193, Speaker C: That's also one of the key takeaways from that conversation was that they see, or the SUI founders, they see the MetaMask browser extension kind of old school crypto experience as being probably obsolete. They think that in order to bring crypto to the masses, you need to have a Web2 kind of experience. Like when you play a game on your mobile device, you don't Install a wallet first, and then upon every transaction, you go back to your wallet and approve a transaction. They think that all these transactions need to be happening under the hood and the fees need to be subsidized by the app itself. By the way, this thing is currently sort of done in Ethereum in some apps, but they're not done at the protocol level, they're not done at the lower layer level. Like they're done by some service providers, some SaaS, businesses to help apps to subsidize fees and approve transactions. But they see that as like the Sui founders see that as being core to.
01:18:14.193 - 01:19:15.403, Speaker C: To Sui. So then the natural question is, is this the right vision? Because we have two competing visions. We have the old school MetaMask vision, which I don't necessarily think is bad, and you have the SUI, you know, Web2 Vision. The reason why I say that the MetaMask Vision is not necessarily bad was because, like, I came to that realization during DeFi Summer 2020, and I thought that Defi, you know, that experience where you have one account to access a bunch of different products, you know, you trade on yoniswap and then you move that assets to AAVE without having to sign up, without having to sign in. That experience is 10x better than anything I've ever encountered in traditional finance. Because in traditional finance, you have to open a new account to go through KYC on every new account, every new brokerage account, and then you withdraw the money. It takes a few days.
01:19:15.403 - 01:19:36.145, Speaker C: It's extremely painful. Defi was far more frictionless. The only point of friction in Defi, at least back in the day, was you as a user. The first time you use Defi, you have to install a browser extension. That to me is the only point of friction. But after that, the experience is great. So I actually think that the MetaMask experience is not necessarily bad.
01:19:37.045 - 01:19:38.389, Speaker B: I have a counterpoint.
01:19:38.557 - 01:19:39.389, Speaker C: Go ahead.
01:19:39.557 - 01:20:17.887, Speaker B: It turns out no one uses brokerages. If you. And like, I was actually just talking to a friend of mine and they're like, yeah, you know, I have fidelity, but I don't know how to use that shit. And so all my Money's in Vanguard ETFs, and I don't know how to move it around. I don't even open up my account. So I feel like you and I are like, great, like power users for like, financial apps and services, but I think the masses are pretty far behind. I mean, like, the reason why Robinhood took off is because it was intuitively very easy to use.
01:20:17.887 - 01:20:27.565, Speaker B: Like, you hit The Buy button and you buy. Right. And so I do think the right customer base is probably the users of Robinhood.
01:20:28.345 - 01:20:38.833, Speaker C: By the way, I've used Robinhood myself and I prefer the MetaMask experience because you don't have to KYC on Robinhood. You still have to kyc.
01:20:38.889 - 01:20:55.857, Speaker B: Yeah, kyc obviously the most, like, painful point in using financial services, but, you know, maybe this is probably off talking, but maybe kyc, I feel like, will probably become a more important conversation for Defi the next year or so.
01:20:55.961 - 01:21:24.483, Speaker C: Yeah. But to your point, it's possible that these two competing visions might coexist in five years. Meaning you have this experience that Web2 people are used to, and that's the experience that 80 to 90% of people are going to use. But then you're always going to have like 10, 20% of crypto users who are power users and they prefer the MetaMask experience or the browser extension experience.
01:21:24.659 - 01:22:04.929, Speaker B: I think over time this is just going to become a browser in itself, maybe similar to Brave, where you just trust a browser to manage your private keys. I don't know how strongly I feel about, you know, Chrome extensions and others, but we'll see where those visions kind of pan out in the long run. And I agree, like, I think we're the power users and we'll probably be like the 20%, but I do think in its current form we will see some optimizations on UI UX to the point where I think the truth is probably somewhere in the middle. And some of this, and we've mentioned this in our first podcast, but like Coinbase with their NPC Wallet, does a great job of that already and a couple others that are out there.
01:22:05.057 - 01:22:05.697, Speaker C: Cool.
01:22:05.841 - 01:22:15.337, Speaker B: Cool. That's recapping our interview with the founder Sui. Are you bullish or bearish? Sui. After talking to the founders, I felt.
01:22:15.361 - 01:22:23.753, Speaker C: Like the founders of Sui are legit. I don't have a great answer still as to whether or not we still need another layer one.
01:22:23.889 - 01:22:58.385, Speaker B: Yeah, I think the problem is big enough to work on. Obviously. Security is, you know, obviously the biggest problem in crypto today, and if you're going to do it from first principles via the MOVE programming language, then that's an experiment I'd love to see play out. So I'd say I feel very positive after the conversation and I'd love to see more work coming from the SWEE ecosystem. And we're already seeing some of that already, to be quite frank. We're seeing some founders are already of very high quality that are building, are attracted and building the sweet ecosystem.
01:22:58.725 - 01:23:22.589, Speaker C: I think I told you this, but I've seen more legit founders in the SUI ecosystem in the last four weeks than I've ever seen on like Algorand near Polkadot, which is very interesting. I'm not saying these other blockchains are bad, I'm just saying like the speed of bootstrapping the grassroot community is very impressive.
01:23:22.717 - 01:24:01.273, Speaker B: Yeah, they just announced their funding round in November of 2021. Right. Or something like that. So from less than a year, we're seeing a lot of attraction of great founders that are coming into ecosystem. So I think that's a function of how the founders are thinking about attracting people into the space, both from a technical perspective. I've also heard great things about, you know, developer documentation and onboarding that SUI does. And when I talk to a lot of the founders, the first thing they say is like, let me see the documentation, let me see how is the easy it is for me to get onboard into this developer platforms.
01:24:01.273 - 01:24:24.963, Speaker B: And the easier you make it, I think the easier you'll have network effects of bringing more and more developers onto those types of ecosystems. So I do think SWE is doing a good job on that as well. Cool. Well, good to jam out. If you haven't subscribed yet, subscribe to Goodgame podcast. We'll be back with next episode in the next couple of weeks. Thanks so much for tuning in.
01:24:25.099 - 01:24:26.135, Speaker C: See you next time.
01:24:26.515 - 01:24:30.735, Speaker B: Thanks for listening to Goodgame. Don't forget to subscribe. We'll see you next week.
01:24:31.615 - 01:24:31.855, Speaker C: It.
