00:00:00.240 - 00:00:34.455, Speaker A: I use Metamask as our kind of like North Star in regards to where we are in terms of like monthly active users. And as a whole, you know, let's say 30 to 35 million monthly active users. I'm curious on how many of those users have been phished or attacked and how many have then either become non existent users or they've left because of being hacked, or they've like doubled down on their security stack to make sure that they're able to continue interacting in defi. In crypto. Because we think that, you know, security, once solved in a very generalizable sense, it could help us get to like 100 million users. Right. That's kind of the core idea there.
00:00:34.535 - 00:00:41.799, Speaker B: That's why this whole episode is so important, is that security has been a major impediment to mass adoption.
00:00:41.887 - 00:01:18.773, Speaker A: Welcome to Good Game, a podcast for crypto insiders with your host Imran and Chow. All right, welcome to good game, episode 12. We're going to be talking about a lot of cool things and this time around it's going to be crypto security or Web3 security. Obviously it's a very complex topic. Even if you like search online for content, it's actually really hard to find content. The space has been overlooked primarily because I think it's very complex. There's only a group of key subject matter experts that are able to really understand the space.
00:01:18.773 - 00:02:10.065, Speaker A: And the most part it seems like the average person can't like wrap their head around it. And that's probably why there's not enough education that's out there and why a lot of these attacks, like a common attack is. The reentrancy attack could be avoided pretty easily, but it hasn't and you continue to see these types of hacks happen over and over again. So I do think it's good to shine a light in this industry and try to understand or unbundle some of the things that we could do as founders and as users to protect ourselves from these types of attacks. And I know, Chow, you've gone through many of your own rugs, as I did as well, and maybe quick high level thoughts on that and then we can talk and dive deeper into Mount Gox and the dao.
00:02:10.105 - 00:02:19.395, Speaker B: Yeah, first of all, this episode is going to be so fun because we're going to talk about all the, all the rugs that we've gone through personally. By the way, Imran, have you read a three body problem?
00:02:19.555 - 00:02:22.035, Speaker A: I have not. It's on my reading list. It has.
00:02:22.075 - 00:03:07.141, Speaker B: The three body problem is One of the best sci fi books I've ever read. And it's written by this Chinese author, Liu Cixin, and it's a trilogy. And in the second book, they introduced the concept of dark forest. So basically the analogy I'm going to draw is that crypto is very much like a dark forest. Blockchains are very much like a dark forest. But the concept of dark forest, the way it works is there's probably a ton of civilizations throughout the universe and many of which are much more advanced than humans. But the reason why we haven't heard of them is because all these advanced civilizations understand this concept of dark forest, where you should stay silent.
00:03:07.141 - 00:04:00.583, Speaker B: You should not let the rest of the universe know where your position is, because the moment you do, a more advanced civilization will come in and snap at you. They're going to destroy you. And this is why the universe is so silent. And that's exactly what's happening with blockchains. The moment you sign a transaction that's vulnerable, the moment you broadcast a transaction to the rest of the blockchain, or the moment you deploy a vulnerable contract, smart contracts, someone, a hacker, will come in and snap at you, snipe at you, and they will destroy you. They will steal all the money that they can possibly steal from you, even though you don't hear from them during normal times. But the moment a vulnerability is out there on the blockchain, you will get destroyed.
00:04:00.583 - 00:04:32.181, Speaker B: So for me, blockchains are like a dark forest. And one of my first. Well, I've been part of the two OG rugs within this dark forest. The first one is Mount Gox, which I've talked about in the past. And the second one is the DAO hack. And for better or worse, ever since these two hacks, I've just become extremely paranoid about security in general. I still got involved in several other rugs, but much smaller in magnitude.
00:04:32.181 - 00:04:34.685, Speaker B: But we should talk about the history.
00:04:34.805 - 00:05:27.467, Speaker A: Yeah, I like the concept of dark forest and how signals transactions could signal economic or hackers to try to find a way to extract value. I see Crypto is like a giant bug bounty system, and people are actively looking for ways to extract value. And I think over time this is probably going to harden crypto in the long run for more robust applications, which I think is around the corner. But let's talk about the first hack, because there's a lot of learnings between the first hack, which is, I wouldn't say the first, but the first visible hack, and the DAO as well. And these two stories are going to be very relevant into all of our topics today because they continue to happen. It hasn't changed. And so we need to discuss and figure out why.
00:05:27.467 - 00:05:49.377, Speaker A: Right. It turns out Mountain gox was actually launched as a magic cards exchange, if you didn't know that. And you know who was launched by? Jed McCaleb, who was the founder of Ripple and Stellar. Yeah. You know what's also very interesting was his background. He launched something called Edonkey. Yeah, funny name.
00:05:49.377 - 00:05:53.565, Speaker A: But it's essentially, if you remember this, it's a peer to peer file sharing system similar to.
00:05:54.005 - 00:05:57.005, Speaker B: I've used it. I've used Edonkey live here and.
00:05:57.045 - 00:06:18.077, Speaker A: Yeah, and it's interesting because a lot of the first ideas in crypto are started by like OG founders. Do you remember our last episode or the episode before where we talked about, I believe his name was Sean, the founder of Napster who helped launch Helium. Also very similar background. And I've noticed this with other founders in other areas of crypto.
00:06:18.141 - 00:06:21.433, Speaker B: All these OG peer to peer guys. Right?
00:06:21.569 - 00:06:50.943, Speaker A: Yeah. And I don't think we give them enough credit and I think we should because a lot of that learnings from that, that era helped crypto become what it is today. And we also don't give a lot of support or acknowledgement to, you know, cryptographers that have been working on this for the past 50 years. So I think those two are important pieces for crypto. But yeah, so Mark. So he ended up selling it to Mark Carpalis and the reason for it was, you know, he was just getting too much money being wired. He freaked out and sold it.
00:06:50.943 - 00:06:57.099, Speaker A: But it turns out there was also some mismanagement of money before that was sold. That was at least what the rumors were saying.
00:06:57.267 - 00:07:09.015, Speaker B: I was smiling because the moment I hear Mark Carpilli's this, this meme where you have that image of Mark Capillaries and it says, in this moment I'm euphoric. That just pops up in my mind.
00:07:10.515 - 00:07:37.061, Speaker A: You know what's very interesting about Mark was that his Persona was very similar to SPF's as I was reading about him. Yeah, he liked to have taken pictures and have it on walls. He liked to be called the king of bitcoin, if you remember that. And so he had very similar personality traits to sbf. Either way, Mongox got hacked. There's a couple of things, right. One was like mismanagement of capital and the other was really not having very strong security frameworks in place.
00:07:37.061 - 00:07:51.233, Speaker A: So what does that mean? Well, back then, wallets weren't natively encrypting private keys. So, like, you could hold your keys in your wallet, but it's not encrypted. So it's just a file. And the file is called the wallet, that file.
00:07:51.289 - 00:07:55.965, Speaker B: So literally the string of the private key is stored in a text file?
00:07:56.665 - 00:08:32.625, Speaker A: Yes. And there's no password or PIN that encrypts that file. And so you could just open up your wallet and then you can get access to your private keys. Then the next update, which happened much later, then allowed for encryption of that file, but back then, it didn't. So the auditor's computer was hacked, and this was around September of 2011. And it ended up compromising some keys. And then again, they were able to compromise the wallet DAT file, and from that allowed them to get access to the private keys.
00:08:32.625 - 00:08:51.145, Speaker A: And then from there it was kind of, you know, the hackers ended up slowly taking capital out or bitcoin out of the exchange. It wasn't noticeable for a while. I think it took took them a year to figure it out. There's rumors that it was one of the founders of the exchange, ebtc that ended up doing that, which is another story in and itself.
00:08:52.365 - 00:08:57.893, Speaker B: I had 10 bitcoin on that exchange. I still can't withdraw it. I don't know what the story is.
00:08:57.949 - 00:09:00.781, Speaker A: But if you want me to divulge, I can.
00:09:00.973 - 00:09:05.909, Speaker B: Let's ignore the BTC story. It's a side story. Let's keep going with a side story.
00:09:06.077 - 00:09:32.713, Speaker A: Yeah, so that's pretty much it. Back then, there was no encryption, there was no security parameters in place. The file was copied into an auditor's computer, and someone just got access to that copy and then was able to get access to private keys. It was very simple. It wasn't that hard. And so back then, it was a combination of, like, not having very strong security frameworks in place where these types of files shouldn't be stored on an auditor's computer.
00:09:32.809 - 00:09:33.137, Speaker B: Right.
00:09:33.201 - 00:10:03.239, Speaker A: To begin with, and it should be encrypted and partially. Also, like wallet infrastructure, was it robust enough to actually have encryption for these types of files? So very basic, simple. But you still hear about it today. And I can talk about some of the hacks that happened later that was very similar in nature. The one that I think that's a little bit more advanced is the DAO hack. I know we both have stories here. I just remember being a part of the DAO hack where the whole concept of the DAO was to bootstrap, by.
00:10:03.247 - 00:10:14.343, Speaker B: The way, for those who don't know the history. It's literally called the Dao. It was. It's the OG Dao. And the name of that product is called the Dow with a capital T. Capital D. Yeah.
00:10:14.479 - 00:10:45.447, Speaker A: And the idea was it actually, you know, back then, it made a lot of sense. The Ethereum ICO happened. Ethereum's token went public. Everyone made a lot of money and they're like, okay, now we have this incredible smart contract platform and we have money. How do we get more founders to build on this platform? So they decided to launch this generalized Dao, and the concept was, we'll give it money, we'll get tokens. In return, we'll vote for where the capital should get allocated to and into what startups. And in return, we'll get tokens.
00:10:45.447 - 00:11:17.937, Speaker A: And it will be like a fortuitous cycle. Well, it turns out that there was some vulnerabilities, and this vulnerability is still very common today, which is called the RE entrancy attack, which I'll talk more about in detail in a bit. But just going back to the Dao, they raised about $150 million, or three and a half million ETH. And the concept was. So once this vulnerability was shown, the attacker was using this RE entrancy attack to continue to drain the ETH out of the daedal. And it takes a while. It doesn't happen overnight.
00:11:17.937 - 00:11:50.155, Speaker A: And so there were some ideas on how to stop them. One was to create this white hack group that would drain the ETH faster than the black hat. But, you know, it wasn't very successful. So at the end of the day, from an ideological perspective, there was this war between should we do a hard fork or no? And then they ended up doing the hard fork. There was an 85% vote approval, and they rolled back the chain as if the hack never happened. And there was a split in terms of two chains. There was Eth Classic and then Ethereum as what we know it today.
00:11:50.235 - 00:11:53.645, Speaker B: And you personally fell for the immutability meme?
00:11:54.745 - 00:12:24.723, Speaker A: Look, I mean, back then, okay, back then, I was a bitcoin max and I started to. I started to warm me up to eat, right? So I got. I'm like, okay, this is. This is cool. You know, building apps on chain makes a lot of sense, but the immutability just got to me and I think partially because of Barry and then his group. But, yeah, I did fall for it, and then the price didn't go anywhere, but, I mean, luckily I got out of it. But, yes, I did fall for the ETH Classic Scam.
00:12:24.779 - 00:12:43.779, Speaker B: I mean in hindsight that hard fork was the right decision because today no one talks about that part of the history. Like no one is shitting on Ethereum for being not immutable anymore, but saving the early adopters a ton of money by doing that hard fork really help getting the community together.
00:12:43.907 - 00:13:22.129, Speaker A: That's right. I mean if this didn't happen I don't think Ethereum would be here today. And so I do think this was a very important part of history. So what is the RE entrancy attack? There's some pretty good content, at least high level content that's out there that talks about the types of attacks. And there's a analyst called Xerox Kofi on Twitter, he published an article on one confirmation that talked about the vulnerability stack. We're going to rename a couple but roughly the way we think about it is there's the economic hacks. So I would consider that to be like Flash loan attacks.
00:13:22.129 - 00:13:54.765, Speaker A: Two would be like protocol smart contract logic attacks. So this is where we would be talking about reentrancy, delegate call exploit, access control exploit and like deposit logic exploit. And then finally it's infrastructure, infrastructure is like spoofing, DNS spoofing, phishing, compromised private keys, explain, etc. So those are like the three buckets that of attacks that happen in crypto today and it's still very, very common. Before we dive deep into these different areas. Anything you want to call out?
00:13:54.885 - 00:14:52.027, Speaker B: Maybe just touching back on the history, I feel like if you look at the top hacks in history since the Mount Gox and the dao, if you look at the top hacks by dollar amount, it's pretty staggering that a lot of them are still very similar to how Mount Gox was hacked, which is the hot wallets getting drained. And another major category of hacks is smart contract bugs, which is in the same category as the DAO hack. So it just seems like these two types of hacks continue to happen over and over again. And more recently there's more interesting phishing attacks like Kevin Rose's NFTs getting drained, stuff like that. But anyway we talk about history all the time. Every episode I feel like we talk about history and a lot of that history is forgotten but still seems interesting and relevant today.
00:14:52.131 - 00:15:25.269, Speaker A: I mean history is important. I feel like crypto has a very short attention span generally and we tend to forget what happens within a quarter. And so I do think it's good to touch on that history, especially what's happened in the past. Because if you really Think about it, once you do the research or if you've gone through it long enough, you realize that the same things happen over and over again. We haven't really moved beyond past anything. Right. And so maybe it's for us to call light, maybe it's for us to just dive deeper into why this continues to happen and what we can do as founders or developers to help mitigate.
00:15:25.317 - 00:15:29.345, Speaker B: And also as users, how do you users of blockchains, how do you protect yourself?
00:15:30.005 - 00:16:12.331, Speaker A: Yeah, and if you think about it, I use MetaMask as our kind of like North Star in regards to where we are in terms of like monthly active users. And as a whole, you know, let's say 30 to 35 million monthly active users. I'm curious on how many of those have those users have been phished or attacked, right. And how many have then either become non existent users or they've left because of being hacked, or they've doubled down on their security stack to make sure that they're able to continue interacting in defi, in crypto. Because we think that security, once solved in a very generalizable sense, it could help us get to 100 million users. That's the core idea there.
00:16:12.403 - 00:16:20.797, Speaker B: That's why this whole episode is so important, is that security has been a major impediment to mass adoption.
00:16:20.931 - 00:16:45.673, Speaker A: Yeah, let's talk about some hacks, right? I think this is a part where we can dive deep into some of them and try to dissect what went wrong. The one that I want to talk about, this is probably under the economic hack bundle or economic hack area, which is the Oracle attack price manipulation with Mango markets, if you remember that one.
00:16:45.729 - 00:16:52.423, Speaker B: So I'm on this website, it's really fun. It's called REC News that you share with me. Rect News, Yes. So you're.
00:16:52.479 - 00:16:56.175, Speaker A: It started by Julian and I think it's a core contributor to Curve.
00:16:56.295 - 00:17:01.155, Speaker B: Oh, oh really? Julian Gutulou or something like that?
00:17:01.535 - 00:17:04.295, Speaker A: Yes, it's great. It's a great site.
00:17:04.335 - 00:17:15.063, Speaker B: It's really good website. But according to this website, the Mango hack is ranked number 15 in terms of dollar amount of money lost due to the hack.
00:17:15.159 - 00:17:17.527, Speaker A: Yeah. Oh, by the way, it's interesting.
00:17:17.591 - 00:17:39.884, Speaker B: Quick, quick note. So we're going to talk about a lot of the hacks, but our goal is not to make anyone look bad because a lot of these hacks, like the players, the developers behind these projects, are actually good players. So our goal is really to see what we can learn from these incidents so that as an industry we don't make the same mistakes anymore.
00:17:39.964 - 00:18:13.857, Speaker A: That's right. So Mango is a derivatives platform on Solana. And if you know the infamous Avi, who's publicly that publicly came out and said that he attacked Mango and he actually wrote a couple tweets, even months before that he was going to attack one of the protocols. So it was just interesting to see that timeline play out. He funded the wallet with $5 million in USDC and he deposited into Mango and used it to take up a large per position. And he used this as a way to drive the price of Mango up. And I think it went up like 10 to 15x.
00:18:13.857 - 00:18:24.669, Speaker A: And by doing so, what he did was he was able to take the Mango collateral, he had, deposit it and withdraw collateral or withdraw assets from that.
00:18:24.757 - 00:18:31.669, Speaker B: So he took a loan using the collateral that was denominated in the Mango native token.
00:18:31.797 - 00:19:21.565, Speaker A: That's right. And the reason why how this happened was the fact that Mango itself had very low liquidity and it was a very low float token. So there wasn't enough circulation of the token in itself. So any one buyer can come in with, let's say, 5 million bucks and be able to drive the value of the price to an area that is good for the hacker or attacker. And obviously this is also very ideological because some people say that this is an economic attack, some people think it's a hack. I don't want to get into that debate, but it's interesting to call up because that is still happening today with many of these protocols. So after he deposited collateral, he borrowed $54 million in USDC, he borrowed $25 million in MSOL, 25 million SOL and BTC, and he was able to extract the value out of the protocol.
00:19:21.565 - 00:19:27.809, Speaker A: All the debt on the protocol went bad. And the protocol was like non functioning at that point.
00:19:27.937 - 00:19:28.921, Speaker B: Just to summarize the hack.
00:19:28.953 - 00:19:29.505, Speaker A: Yeah.
00:19:29.665 - 00:20:10.079, Speaker B: So the guy used the Mango native token as collateral, manipulated the price of the token in such a way that it went like 10x. So the value of the collateral went up 10x, but it's artificially inflated. He borrowed money using that collateral, but that collateral eventually went back to whatever the fair value was, which is 10x smaller. And so the system basically tried to liquidate that Mango native token, but the collateral is worth nothing, basically. And the money that he borrowed was way more, was worth way more than the collateral. So he basically walked away with free loans. And the system itself defaulted.
00:20:10.079 - 00:20:14.551, Speaker B: Or, sorry, the guy defaulted and the system itself was left with bad loans.
00:20:14.663 - 00:20:41.735, Speaker A: Yeah, and he went back to Mango, he put up A governance proposal and said, hey, I'll give the users their money back. So as long as you call this a bug bounty and we'll make everyone whole and everyone can walk away unhurt. And so that went through and then Avi walked away. Obviously that changed most recently when the SEC and the FBI came after Avi and we could talk about that later, but that's high level of what happened.
00:20:41.855 - 00:21:06.463, Speaker B: The lesson for this is very simple and it's really not something that should happen in production in crypto because this just happens over and over again in tradfi as well. Right. The lesson is that don't use a illiquid asset as collateral in your system design. Whenever you design a defi system and there's some kind of borrowing that's based on some kind of collateral, never use a illiquid asset as a collateral collateral.
00:21:06.559 - 00:21:07.647, Speaker A: It happens over and over again.
00:21:07.671 - 00:21:24.215, Speaker B: It just keep happening. I don't understand why. But anyway, as a user of crypto, you also don't want to touch those systems that use illiquid assets as collateral because you will be hurt if you provide liquidity, if you provide loans into that system.
00:21:24.375 - 00:21:35.773, Speaker A: That's right. And I can call out to like Rari Capital's Fuse Pool which offered like tail end lending for tail end assets. And there was also Cream which also did something very similar.
00:21:35.869 - 00:21:36.905, Speaker B: Oh my God.
00:21:37.845 - 00:21:45.901, Speaker A: Yeah, Cream was just a hot mess. They forked compounds code and there was re entrancy attacks and there was.
00:21:46.013 - 00:21:48.665, Speaker B: They got attacked like three times, right?
00:21:49.205 - 00:21:49.837, Speaker A: They did.
00:21:49.941 - 00:21:53.053, Speaker B: And that was, that was good times. It was defi Summer. Was.
00:21:53.189 - 00:21:54.197, Speaker A: It was Defi summer.
00:21:54.261 - 00:21:55.385, Speaker B: So many rugs.
00:21:55.965 - 00:22:25.809, Speaker A: So many rugs. So that's, you know, people call it price manipulation. I call it more like combination of Oracle and price manipulation. But it was interesting to see how that played out. So for founders, as you mentioned, you know, think about the types of assets that you want to list and the types of collateral that you want to use. There's a reason why AVE and Compound only have still six to seven assets only listed on their lending protocol and they haven't really added any more collateral to it. There's a reason for that.
00:22:25.809 - 00:22:42.313, Speaker A: So being innovative, I agree, go ahead and be innovative. But you have to also think about the risk parameters in place if you want to try to compete with Aaven Compound. The other one, which I found to be very interesting, goes under the flash loan governance attack boat and it's called Beanstalk.
00:22:42.409 - 00:22:44.033, Speaker B: Beanstalk is maybe you want to pull.
00:22:44.049 - 00:22:46.017, Speaker A: It up on Beanstalk on recnuse.
00:22:46.041 - 00:22:52.905, Speaker B: It's number eight. And the value is $181 million.
00:22:53.565 - 00:22:54.157, Speaker A: Yeah.
00:22:54.261 - 00:22:58.301, Speaker B: Mango was 115 beanstalk, 181 beanstalk.
00:22:58.493 - 00:23:30.145, Speaker A: You know, it's a algorithmic stablecoin protocol. You know how that goes. Right. But what was interesting about this one was the hacker submitted two beanstalk proposals on its governance forums, BIP18 and BIP19. BIP18 was called out to transfer all the money from the protocol to the hacker. And bip19 bip19 was to send 250k to Ukraine as a donation.
00:23:30.725 - 00:23:31.509, Speaker B: To who?
00:23:31.637 - 00:23:57.575, Speaker A: $250,000 to Ukraine. To Ukraine as a donation, yeah, Ukraine. The attacker then used a Flash loan of about a billion dollars, leveraging Ave, Uniswap and Sushi to gain enough voting power, which is two thirds that's needed to trigger an emergency execution. The Flash loan was successful. Okay. And the hacker was able to walk away with $180 million.
00:23:57.655 - 00:24:23.709, Speaker B: For those who aren't familiar with Flash Loan, it's a loan where you borrow money, borrow any assets, and return the loan within the same block. So basically, the guy borrowed governance tokens, use that to pass his own governance proposal to steal all the money in the protocol, and then return the governance token with all these three things within the same block.
00:24:23.837 - 00:24:45.631, Speaker A: But let's talk about Flash loans. I mean, I mean, what an interesting concept. I think it was proposed by aave. Right. And the ability to borrow unlimited amount of money without any collateral within a block that allows you to take care of any transactions within one block to extract value. That's ingenious. Right.
00:24:45.631 - 00:24:56.591, Speaker A: But it's also scary because there are so many different types of attacks that happens because of flash loans. You know, Flash loan, Oracle attacks, reentrancy attacks, and governance attacks are the three that I want to call out.
00:24:56.663 - 00:25:01.071, Speaker B: Infinite capital within, within the same block, basically, without. Without needing any collateral.
00:25:01.263 - 00:25:47.097, Speaker A: That's right. But how did this. How did the hacker take away a takeoff with $180 million? It turned out the root cause of this was the existence of the emergency commit function that was in the governance contract. And within this contract, you're able to essentially call the execute function and use that as a way to introduce your own logic where you can essentially walk away or transfer the money that's from the protocol to the user's wallet. And so the way it worked was he or she got 2/3 of the vote using a Flash loan, and it triggered the emergency contract. And from there, he or she introduces his own logic that allowed them to pull the capital out because they had this approval of the, of the government.
00:25:47.161 - 00:25:55.765, Speaker B: Why does that emergency contract exist in the first place? Because that seems like a huge attack vector.
00:25:56.475 - 00:26:03.547, Speaker A: That's an attack vector. It's an attack vector and I think it was overlooked. There should have been some sort of logic in place to stop that from happening.
00:26:03.651 - 00:26:21.451, Speaker B: Normally when you pass a governance proposal, it doesn't execute immediately. It's normally just a signaling multisig mechanism. And then you still need the multisig or whatever to actually approve the actual proposal.
00:26:21.603 - 00:26:32.963, Speaker A: That's right. But in this case it was all done via smart contracts. So that's, you know, within the flash loan or the economic attacks bucket.
00:26:33.059 - 00:26:37.283, Speaker B: It's a genius attack. I love it. I mean it's not fun for.
00:26:37.419 - 00:26:53.863, Speaker A: And who would have thought about that? Like governance, like using governance. And this was done a day before the attack. They put the proposal up. Maybe it was the euphoria of the bull market, of the defi. Bull market. But everyone overlooked that. I mean the proposal was on the forums site.
00:26:53.863 - 00:27:40.781, Speaker A: Yeah. And maybe he or she put the other proposal for Ukraine to confuse people from looking at the first one and they all ended up looking at the first, the last one. And that could be the reason for that. But it's pretty genius, very, very smart for them to extract this value. So we're going to move on to the next bucket under the vulnerability stack, which is the smart contracts and protocol logic and high level. What does this mean? Well, there's many logic within smart contracts that could help and allow, you know, malicious attackers to find ways to call the contract in a way and introduce their own logic in a way to trick the contract into giving you money. That's essentially what it is.
00:27:40.781 - 00:28:21.233, Speaker A: So I was listening to Sam CZ son, he's a security researcher at Paradigm, probably one of the most infamous security researchers in our space. And he pretty much calls out the first thing he goes, do not trust unsafe external calls no matter what. And that's like the first thing, right? Like you don't trust unsafe smart external calls. What is unsafe external calls? Well, it's essentially a smart contract that you own. Let's say you are uniswap and you have your own smart contracts. From time to time these smart contracts will have to interact with third party smart contracts as a way to facilitate trades or a way to facilitate loans. I mean that's the whole composability nature of smart contracts to begin with.
00:28:21.233 - 00:28:54.025, Speaker A: And so what external call function does is it helps function or helps execute certain types of state changes that you want the user to make. And it turns out, like, there's an attack vector that can introduce really bad logic, like the RE entrancy attack that could use different types of attacks to extract value. And I can talk a bit about what the RE entrancy attack is, but unsafe external calls are, like, really bad. Like, you should always think about what smart contracts you should trust outside of the DeFi protocols or et cetera.
00:28:54.105 - 00:28:57.665, Speaker B: So what's an example of this type of vulnerability?
00:28:57.825 - 00:29:31.015, Speaker A: Oh, man, there's. I mean, this happens all the time. Like, the DAO was the first one, one of the first ones, and it happens still to this day. So let's just go back to what happened with the dao, since we've already kind of covered this. So the hacker deploys a smart contract that then deposits. So let's say if I want to invest one eth into the dao, right? The hacker deploys its own smart contract and deposits one eth into the DAO's protocol. And so this allows the hacker to then call the withdrawal function in the DAO smart contract.
00:29:31.015 - 00:30:10.991, Speaker A: And what it does is the DAO smart contract will look at the hacker's wallet or smart contract, and it shows that there is still less than 1 ETH on its wallet. So it will return the 1 ETH that it deposited back to the hacker. While this happens, the attacker will then use a call function to withdraw again. And so it creates this infinite loop where it will continue to drain the wallet to the point where the. The DAO is completely. It can't get out of this loop until it's completely flushed out. So this is called the RE entrancy attack or the infinite loop attack.
00:30:10.991 - 00:30:34.717, Speaker A: And this happens often, like it happened with Cream, and it's like a very common attack which still happens to this day. And basically, like, what I've learned is that the check should happen before the transfer, not after the transfer. So the wallet should check, the dial should check before the transfer before they actually make the transfer happen.
00:30:34.821 - 00:30:43.933, Speaker B: And by the way, cream is number 12. And I think this is only one of the three hacks, but it's number 12. This one hack is number 12. $130 million.
00:30:44.069 - 00:30:58.485, Speaker A: Yeah, I like the fact that you're calling out the number with the attack that we're talking about. If we go into any other industry and we're like, oh, yeah, 180 million. And that's just number 12 on the list. They're like, what?
00:31:00.145 - 00:31:05.925, Speaker B: I mean, that's because we have a global distributor ledger that's open to Everyone to check and audit.
00:31:06.225 - 00:31:18.329, Speaker A: That's right. But if this happened in the real world, this would be talked about for a very long time. So yeah, it just interesting to call up any other attacks that you want to talk about within this.
00:31:18.377 - 00:32:13.295, Speaker B: There's a bunch of other smart contract vulnerabilities in addition to their reentrancy attacks that you mentioned. But I'm just looking at the top hacks in history, right? Half of them are centralized exchanges whose hot wallets got drained, and the other half are bridges, which is really staggering because there's so many different types of smart contracts, there's so many defi protocols. But why is it that the bridges are the ones that get hacked the most? Right, so I'm looking at this list. There's the Ronin hack, the BNB bridge hack, the wormhole hack, the Nomad bridge hack. Like these are the top four bridge hacks. And in terms of dollar amount, it's like half a trillion dollars, another half a trillion dollars, a third of a trillion dollars, and then a fifth of a trillion. Like in total, it's like what, like $2 trillion worth of money lost in bridges.
00:32:14.035 - 00:32:14.971, Speaker A: It's insane.
00:32:15.083 - 00:32:47.015, Speaker B: And the hacks are all different. So for example, the BNB bridge hack and the wormhole hack, they are smart contract vulnerabilities. Like they still fall under that category of smart contract bugs. Whereas Ronin is more of like a phishing attack where infrastructure four of the nine validators of the bridge, their private keys were compromised due to a phishing attack. And they're all different. But anyway, so which one you want to talk about?
00:32:47.355 - 00:33:17.999, Speaker A: Well, the Binance hack, it's within smart contracts. Let's talk a little bit about that. It's a very technical attack, but the high level, Even like Sam, CC son, if you read through his thread, he says 95% of it, he doesn't even understand the logic. There's only 5% of it that he understands. And so we'll give you a very high level of what that means. But the basic concept of what happened with the binance hack was the fact that they were able to mint 2 million BNB. They were able to trick the prover to thinking that they are Binance.
00:33:17.999 - 00:33:44.327, Speaker A: And so because of that, they were able to trick the prover into thinking that they could mint whatever tokens they wanted. And then they ended up minting 2 million in BNB tokens. And then they used that as a way to extract value from the binance chain. And then they pulled money out using several methodologies. So they put Some into arbitrum, they put some into other chains and they were able to pull out whatever value they could.
00:33:44.391 - 00:34:24.683, Speaker B: I just want to add a little bit more context. So Binance Chain actually has two chains. I forgot the names. One is called BSC chain and the other one is BNB chain, B chain, or something along those lines. But anyway, one of those chains is used for governance and the other one is used for smart contracts. And there is a bridge between the two chains. And basically the hacker, as we described, normally when you bridge tokens from one chain to another, you first lock the tokens into the original chain and then you mint the wrapped or slash synthetic tokens into the second chain so that the tokens on the second chain are basically backed by the tokens on the first chain.
00:34:24.683 - 00:34:41.163, Speaker B: But what the hacker did was he tricked the chain into thinking that there is backing. In reality, there is none. So they basically were able to mint BNB out of nowhere without any backing. If I recall correctly, that's how the hack worked.
00:34:41.259 - 00:35:13.338, Speaker A: That's right. And it's funny because if you think about how all these bridge attacks started, it started right after Vitalik posted his paper about why bridges have very weak security assumptions. The first attack happened was wormhole, and then it set off a bunch of other bridge attacks that happened right afterwards. I mean, I agree with Vitalik. I mean, if you think about it, you know, bridges have its own security assumptions and you have to trust a bridge in being able to bridge in bridge out of capital into different chains.
00:35:13.386 - 00:36:12.809, Speaker B: But just to push back a little bit. So let's push back, Vitalik. Vitalik's argument was actually, it's very nuanced and it's not really related to the three bridge hacks, three or four bridge hacks that we mentioned. So Vitalik's point is that again, in normal bridges, what happens is you lock the tokens into the first chain and then you mint the synthetic or wrap tokens into the second chain. But the tokens that you own on the second chain is not native to that chain. So, for example, let's say take a very old example, the wrapped btc, right? Like when you hold RAT BTC on Ethereum, you're not only relying on the security assumptions of Ethereum, you're also relying on the security assumptions of Bitcoin, and you're also relying on the security assumptions of bridge itself. So the token that you have on the destination chain is not native and it's very vulnerable in the case of a 51% attack.
00:36:12.809 - 00:37:18.185, Speaker B: So in the case when the 51% attack happens, the hacker is able to reverse the transactions in the first chain in a way that they can basically reverse the locking of the tokens in the first chain in a way that as a result, the tokens that are wrapped on the second chain on the destination chain is no longer bagged. So you can lose everything by holding wrapped tokens on the destination chain that is bridged in the case of a 51% attack. And the reason why I say this argument is nuanced is not related to the four examples that we gave earlier, is because in those hacks, there was no 51% attack. It was literally just a bug in most of them. It was a bug in the smart contract. The scenario that Vitalik described is something that could happen in the long run if more and more assets are bridged via these traditional bridges in the form of wrapped tokens. The more value there is locked in those wrapped tokens, the more incentive you give to the hackers to launch these 51% attack.
00:37:18.185 - 00:37:20.229, Speaker B: It's a pretty scary scenario.
00:37:20.357 - 00:37:59.475, Speaker A: Well, I mean, let's talk about it a bit more. I mean, most bridges today rely on either native assets that chain one or bridged assets using wrapped tokens as two. But even those bridges have its own security parameters in place, right, as you mentioned. So if the bridge was to be attacked in such a way where it takes over consensus, or it could take over the custody of the chain itself with all the custody assets. I completely agree with you on that side. But don't you think that even with that, like all the security assumptions are still weak, weaker compared to the robustness of layer ones and how long they've been around?
00:37:59.515 - 00:38:14.335, Speaker B: Yeah, I mean, because that's the core argument. Whenever you have wrapped assets through a bridge, you're relying on arguably three times the security assumptions, the assumptions of original chain, the designated chain, and the bridge itself.
00:38:15.035 - 00:38:39.319, Speaker A: Here's an example, right? And then you also have to trust who are operating these bridges. So an example that I'll give you is like Harmony. Harmony had a bridge that had about $100 million total locked in its bridge. And the bridge itself was secured by two of five multisigs. And these multisigs were sitting or. Sorry. And these wallets or these private keys were sitting on hot wallets.
00:38:39.319 - 00:38:41.703, Speaker A: And it was also kept in plain text.
00:38:41.879 - 00:38:43.079, Speaker B: That's ridiculous.
00:38:43.247 - 00:39:11.515, Speaker A: And so the attacker was able to compromise the two keys and then they easily drained 100 million from the bridge. And so if you think about it, we have to trust the bridges themselves. Ethereum obviously I can trust Ethereum, I can trust Bitcoin Solana also, more or less. Right. But when it comes to bridges, I have a very hard time trusting most bridges today just because of the security parameters are in place.
00:39:12.215 - 00:39:34.249, Speaker B: So harmony number 16. Number 16 with $100 million value lost due to the hack. Yeah, but yeah, I agree with you. I, I don't trust most bridges and I definitely don't trust the ones that have that use wrapped assets. I don't feel comfortable holding wrapped assets. Same at all. Same.
00:39:34.249 - 00:40:11.755, Speaker B: But the nuance is depending on how you define wrapped assets. But I feel a little bit better if, if it's an asset that sits on a L2, because at least on paper, the security assumptions of holding assets on a layer 2 is the same as holding assets on Ethereum layer 1. Obviously the current state of things is not exactly that because you have centralized sequencers and stuff like that, but centralized sequencers, the worst they can do is they censor your transactions, but they cannot steal your assets. So if you hold assets on a L2, you cannot lose it. You may get censored. So I'm okay with that.
00:40:11.835 - 00:40:28.887, Speaker A: And sequences are essentially within L2s and they process transactions within different L2s. So Optimism has its own sequences, Arbitrum has its own sequencer. Typically they're operated by the chain itself or the company itself. And the goal is, over time, to decentralize those sequencers over time.
00:40:28.991 - 00:40:37.955, Speaker B: So if I could rank, like this is very high level, but if I could rank the different types of bridges in terms of how much I personally trust them.
00:40:38.335 - 00:40:39.911, Speaker A: Well, yeah, let's do that.
00:40:40.023 - 00:41:08.055, Speaker B: I feel very comfortable storing assets on the layer one, like native assets. So I've seen bridges where or bridges, if you call them bridges, but I've seen products where you move USDC from Ethereum to USDC on Solana. That's fine. You're not introducing new risks like USDC is backed by a circle anyway. So by bridging. Bridging, quote, unquote bridging. That way you're not taking on more risks.
00:41:08.055 - 00:41:13.275, Speaker B: So by doing that bridging, you still hold USDC that is native to Solana. So that's fine.
00:41:13.375 - 00:41:15.091, Speaker A: And touch on L2s, right?
00:41:15.163 - 00:41:44.937, Speaker B: Yeah. So L2, the assets on L2 will be next on my list because despite the centralized sequencer, I think they're good players and at the very least you're not going to lose your assets. So the assets that are stored on L2, that would be next on my list, the one I definitely would avoid is wrapped assets on a different chain. So for example wrapped ethnic that has been bridged to Solana. I would not hold that at all.
00:41:45.001 - 00:41:46.681, Speaker A: And it's very illiquid too, so.
00:41:46.753 - 00:41:51.097, Speaker B: And by the way, that was the hack behind wormhole. Wormhole, that's right.
00:41:51.121 - 00:41:51.513, Speaker A: Yeah.
00:41:51.609 - 00:41:54.721, Speaker B: So don't, don't hold. I will not hold any wrapped assets.
00:41:54.873 - 00:42:19.853, Speaker A: Yeah, I agree with you. So like personally what I use is similar like layer ones. If I can interact in layer ones natively, I'll do that. Two is L2s have their own like bridges. So arbitrum optimism. And so I typically use that to bridge in. When it comes to bridging out, it is annoying that you have to bridge out and it takes like eight days and so people try to find ways to get the capital out quicker.
00:42:19.853 - 00:42:51.555, Speaker A: And there are a couple bridges that allow you to bring your pull your capital out quicker. Like hop protocol allows you to do it within 30 minutes. Synapse allows you to do it right away. There is a fee but you know, so as a user, try to think of ways where you could mitigate risk. Right. I would use like optimism arbitrum as a way to bridge in because I trust optimism arbitrum when it comes to bridging out. Try to find the fastest way to get your capital out and from obviously a trusted brand that has been around for.
00:42:51.595 - 00:43:46.959, Speaker B: By the way, there's actually a really simple rule of thumb for users in general in terms of whether or not to trust something, anything in crypto is lindy effect, which is that the longer this protocol, including bridges and many other things, defi protocols or whatever, any protocol, the longer this protocol has gone without a hack bug free, the more likely that it will stay bug free and without a hack in the future. Because those are the ones that are battle tested. Right. The more they've grown in terms of dollar amount and no one has managed to hack them, the more likely it is that they've been bug free. So pick the ones talking about bridges, pick the ones that have been around for longer and if you're going to use the newer bridges, understand the risks. Right?
00:43:47.087 - 00:44:07.161, Speaker A: Yeah, we should do an episode on bridges. I don't know why, I just find it fascinating. But the other one I want to talk about is your typical phishing scams, right. That happen. And so AX Infinity was phished and that's how 500 million was extracted from its bridge. And it happened because. And you mentioned earlier, half a trillion.
00:44:07.233 - 00:44:20.315, Speaker B: Earlier, it's half a billion. We're not at that magnitude like the Entire market cap of crypto is only a trillion dollars. Not everything is lost. Sorry about the misspoken.
00:44:20.475 - 00:44:39.923, Speaker A: I could have sworn you said billion. But yeah, you're right. Yeah. So the way this happened was the hacker got. So there was a senior engineer with an AXI that applied for a job or something and the job or the company sent him a PDF, he downloaded his PDF and executed it maliciously.
00:44:39.979 - 00:44:42.535, Speaker B: The PDF, I think it was the actual job offer.
00:44:43.385 - 00:44:44.313, Speaker A: Was a job offer.
00:44:44.369 - 00:44:45.085, Speaker B: That's right.
00:44:46.185 - 00:44:48.881, Speaker A: I mean, wow, it's a crazy hack.
00:44:48.913 - 00:45:00.409, Speaker B: It's like, it's genius. And by the way, that allegedly that group is this North Korean hacker group, Lazarus. That's right, allegedly.
00:45:00.577 - 00:45:07.185, Speaker A: And funny enough, this happens to every like. I mean, we get like weird applications all the time within alliance.
00:45:07.265 - 00:45:09.975, Speaker B: We get PDFs all like, really?
00:45:11.115 - 00:45:11.835, Speaker A: It's scary.
00:45:11.915 - 00:45:14.307, Speaker B: PDFs in emails.
00:45:14.371 - 00:46:02.417, Speaker A: It's actually very scary. So notion, use notion. So March 23rd, the hack occurred, right? And then around March 29th, someone brought it to the Axie Infinity team's attention. But what ended up happening was once the attacker got into the IT infrastructure of AX Infinity, it was able to compromise four of the Sky Mafia validators. And you need five to be able to sign a transaction, approve the transaction, right? And so the AXI Dao had another like key, and so they were able to compromise that through like a gasless fee transaction. And then they put the five keys together and they were able to get access to the capital that was within the bridge and they were able to pull out $500 million out of the Axie affinity bridge. I mean, like, if this wasn't going to happen, Axio was going to happen to someone else.
00:46:02.417 - 00:46:23.633, Speaker A: Like, there's just no way you can control the people that you work that work for you to be able to, like, you got to make sure that you trust everyone that works for you to download information, send information in a very secure manner. So it's one of those things that really sucks for the industry, but I also think that it also hardens us as a company, as companies.
00:46:23.689 - 00:47:03.655, Speaker B: Axie guys are amazing people. They're good players in this industry and they're great builders. I've said in our last episode, most of the games in crypto today are really fucking boring. And I know people love to hate on things like Axiom and Stephan, but these are the games that are actually interesting to me. Not the aaa games with NFTs on chain. But anyway, point being, there's actually two things that went wrong here. Uh, so let's dive Deeper one is that the employees clicking on the phishing or PDF and fell into this phishing attempt.
00:47:03.655 - 00:47:18.483, Speaker B: But the other thing is that the bridge itself has nine validators and four of which was the company itself. So there was a point of centralization. And points of centralization are vulnerabilities. Right.
00:47:18.579 - 00:47:36.081, Speaker A: And the bridge itself uses proof of authority. And proof of authority consensus is essentially like, you know, that these validators are known validators within the ecosystem or within the bridge or the layer one. And these are like known validators that can commit to the approvals or transactions of the bridge.
00:47:36.193 - 00:48:04.883, Speaker B: And by the way, centralization risks, every protocol in this industry has to start centralized. There's no other way around. If you want to ship, if you want to outperform the incumbents, if you want to build something great, you have to start centralized. So there's no way around it in the beginning. But for users, they need to understand if they're going to use those bridges, they need to understand the risks.
00:48:05.019 - 00:48:48.665, Speaker A: Agreed. So we went through some of the attacks that happened within crypto. Now, what does the Web3 security stack look like or the crypto security stack look like? And how can founders end users use software as a way to mitigate these types of risks? And so recently, I think it was just yesterday or two days ago, Coinbase published a Web3 security stack report that kind of gave a highlight of just the entire startup scene around this emerging ecosystem. And it turns out there are a lot of teams that are working on it, on all of these problems that we've talked about. Any area that you want to talk about within that stack.
00:48:48.705 - 00:49:16.499, Speaker B: Why don't we continue with the phishing attempts? How can consumers protect themselves from phishing attacks? Right, because recently a lot of wallets started rolling out sort of antivirus within the browser extension, for example, that would alert the user if something looks like a scam. So why don't we talk about the Kevin Rose hack? Remember that?
00:49:16.667 - 00:49:18.075, Speaker A: Yes, I do remember that.
00:49:18.235 - 00:49:46.731, Speaker B: So what happened was I think Kevin Rose fell into a phishing attack from an airdrop. He clicked on that airdrop, but he accidentally sign a transaction that allows the hacker to list all his NFTs on OpenSea at basically zero price. And by the way, that's due to the way Seaport works on Open. Seaport is the OpenSea protocol for third party.
00:49:46.763 - 00:49:47.659, Speaker A: It's a gasless transaction.
00:49:47.707 - 00:50:26.359, Speaker B: Exactly. And so basically he fell into that. He signed a transaction that allowed their NFTs to be listed at basically zero. And the hacker basically bought the NFTs for nothing. So stole everything. And the reason why this is a really interesting example is because a lot of wallets are thinking about rolling out their transaction simulation alerts based alerts in their wallets. And the way it works is before the user signs a transaction, the wallet itself on the back end, they will run a fork of Ethereum mainnet and they will simulate what the transaction will do to their assets.
00:50:26.359 - 00:51:04.645, Speaker B: And if the simulation shows that those some NFTs are going out but nothing come back in, there's a very good chance that it's a hack. Right. Because normally when you run a transaction on OpenSea, let's say you sell an NFT, but you will get some ether in return. But if you get nothing in return, according to the simulation, very good chance that this is a hack. So a lot of wallets are starting to build this or roll this out. But in this particular case with Kevin Rails, this transaction simulation would not work because in that particular case it was a gasless transaction. No NFT was going out when Kevin Reels signed that transaction.
00:51:04.645 - 00:51:40.385, Speaker B: But instead the transaction allowed the NFTs to be listed at a basically nominal price. And then the hacker later on could steal those NFTs. So the traditional transaction simulation would not have caught that bug. But there is a product that I started using recently, which is Pocket, and by the way, false disclaimer. They're going to be in our next cohort. But Pocket, basically it's a separate browser extension in addition to the wallet that you use, and it would alert you. So whenever you sign a transaction, there will be a popup that says this might be a scam.
00:51:40.385 - 00:52:14.025, Speaker B: But what they do is they don't just simulate the transactions, they actually try to decode the actual signature itself that the smart contract and see what would happen if Kevin Rose signed that transaction. There is a possibility for someone else to steal everything. So security is really, really complex. You have to decode every contract and try to understand what's going on under the hood. But anyway, that's phishing attack. Use products like this. There's probably other browser extensions as well that help you do.
00:52:14.155 - 00:52:15.197, Speaker A: There's Blowfish.
00:52:15.341 - 00:52:18.005, Speaker B: But Blowfish is under the hood, right?
00:52:18.045 - 00:52:21.917, Speaker A: They work with Phantom. Well, no, they're releasing their own extension too.
00:52:22.061 - 00:52:26.837, Speaker B: Okay. But yeah, so Phantom started rolling. I think Phantom integrated with Blowfish.
00:52:27.021 - 00:52:28.269, Speaker A: Blowfish, yeah.
00:52:28.397 - 00:52:54.811, Speaker B: Our original concern was, you know, if you install a browser extension that creates a whole new set of friction for the users, like, is this really good for mass adoption? And then I started using it, I realized, well, I Don't mind because like I've been using a hardware wallet with my browser extension. Every time I send a transaction, I have to approve things on my hardware wallet. Like this additional work that gives me peace of mind is worth it.
00:52:54.923 - 00:53:08.035, Speaker A: Yeah, I know you and I have gone back and forth on this for a while and you know, like, I agree, like having. I'll concede and say that like, you know, downloading an extension to protect your assets makes a lot of sense.
00:53:08.075 - 00:53:10.187, Speaker B: You hate it. Maybe extension before.
00:53:10.291 - 00:53:27.819, Speaker A: I still hate it. I still hate it. But I do think that will change over time anyways because, you know, you just can't have two extensions running. One protecting your assets, one that allows you to use your assets. Right. I feel like that could all become one similar to like Phantom. How Phantom integrated with Blowfish.
00:53:27.819 - 00:53:47.641, Speaker A: But overall, I do think, you know, for the average user that's coming to crypto, I think it's good for them to use this for now. Right. For like people like you and I. Even for me, like everything I do is through a hardware wallet. Like I have. I don't use hot wallets, period. And I just, it just, just through experience, it's just very hard for me to do anything.
00:53:47.713 - 00:53:51.969, Speaker B: It's from the, all the PTSD from, from back in.
00:53:52.017 - 00:54:21.927, Speaker A: I have so much ptsd. I even like when I execute the transaction, I look at the contract it's interacting with, I'll copy and paste into Etherscan and I'll copy and paste it to Google to make sure that that is legitimate. It's just, you have to do that. What's really cool now is that MetaMask allows you to name contracts that you interact with often. So what I do now is with the most common contracts I interact with, I'll just name it so that I know that the contract I'm interacting with is trusted, by the way.
00:54:21.951 - 00:54:55.169, Speaker B: So back to that Kevin Rose example. That particular transaction that he signed was a Seaport transaction. If you were able to tag the transaction or the contract with like, let's say opensea, because that type of transaction would normally only happen on OpenSea. Right. So if you're able to tag that contract with OpenSea, then when Kevin Rose saw that phishing attendance and signed, like about to sign that Gaslight transaction and saw OpenSea but on a different website, he would smell something very suspicious.
00:54:55.257 - 00:55:24.537, Speaker A: Yep. Yeah, that one was very sophisticated, I feel like, because whenever I list on OpenSea, I don't know why my heart drops every time, but it says give me access to all your NFTs I'm like no, I don't want to give you access to all my NFTs, I hate it. But just hodl until they fix this. But yeah, I completely agree with what you're saying on the consumer side, especially with downloading the extension for consumers.
00:55:24.641 - 00:56:12.459, Speaker B: We talked about using either a browser extension with strong security alerts or using a even separate browser extension like Pocket. We talked about Lindy effect which is trust the protocols that have been around for a while. We talked about using a hardware wallet. I always use a hardware wallet as well unless it's for testing a new product where it only needs like a couple of ETH for transaction fees. We talked about never store value, a lot of value in wrapped assets that are bridged to a different chain like wrapped ETH on Solana, that kind of crap. Never, never, never ever touch it. I mean you can touch it, but make sure to convert it into something else into a native asset immediately after the bridging.
00:56:12.459 - 00:56:52.091, Speaker B: Just don't store value long term in those assets. Obviously FTX never use centralized exchanges for custody. Use centralized exchanges if you have to for trading, but the moment you've done trading just move it back into your hardware wallet. We talked about the PDFs. You know, be careful about the suspicious PDFs, URLs. When you receive an email and there's if something looks suspicious, if there's a PDF, always look for the email address of the sender. Make sure that it is legit, like copy paste everything, like do research on Google or whatever.
00:56:52.091 - 00:57:01.605, Speaker B: Anything you can do before you click on that PDF. I received the email yesterday about MetaMask requiring KYC.
00:57:01.680 - 00:57:02.491, Speaker A: KYC, right?
00:57:02.603 - 00:57:23.817, Speaker B: Come on man, MetaMask will never do KYC. But the email was like we need your Metamask account is compromised, something like that. And we need you to kyc. And there's a link in there that asks me that if you click on it, that will ask you for like a bunch of information including your seed phrase. So that's how the hacker will learn about receipt. Never leak receipt phrase.
00:57:23.881 - 00:57:30.325, Speaker A: Basically yeah, just you know, don't open any emails, don't turn your computer on, just play.
00:57:30.985 - 00:57:42.705, Speaker B: By the way, I always use a different laptop, like that's totally clean, it has nothing else installed. I never use it for anything else except for signing transactions.
00:57:42.865 - 00:58:09.751, Speaker A: Chromebook is probably the best for that. Like I use a Chromebook because Chromebook is very hard to install malicious bug softwares onto your computer because it's all just a Chrome browser and so don't use your Real computer for anything, right. Use a Chromebook and that's a very cheap fix. 150 bucks on Amazon and that can solve a lot of your problems. Between that and a hardware wallet, I think will should get you to where you need to be.
00:58:09.783 - 00:58:39.325, Speaker B: Yeah, and everything we've mentioned so far, I feel it's still pretty basic. It's like table sticks. I have several OG bitcoiner friends from back in the day, like those early libertarian bitcoiners. Yes, they do a bunch of crazy shit for their own privacy and security. They're so fucking paranoid about their ops. I'm not going to say what they do because that's bad for their privacy. But everything we've mentioned so far is table stakes.
00:58:39.445 - 00:59:17.321, Speaker A: Well, I mean you could talk about Zappo and how they custody assets, right? They have a cold storage and cold storage is a storage where it's completely removed from a hardware wallet. The keys are located in some computer that has never. And that's air gapped. And what air gapped means has never been connected to the Internet. And it's stored hundreds of miles away in mountains where there's like 24 hour 7 security services that overlook the entrances of the location and you don't know where they are all across the world. I mean that's like I'd probably see the top like this is where like Wenzen's the founder of Zappo. That's where he focuses on terms of security.
00:59:17.513 - 00:59:31.721, Speaker B: What about developers? What can we recommend developers? Because we give some interesting, I guess, hopefully helpful advice for consumers, for users. But what can DAPP developers do when writing solidity?
00:59:31.873 - 01:00:13.293, Speaker A: People typically write solidity in Hard Hat. Foundry and before was Truffle. It turns out like Foundry is probably the best now because it's optimized in Rust and it's more secure based on memory. And because of that you're able to test and iterate your code much more quickly than you can on let's say Hard Hat, because Hardhat uses Java as an example, JavaScript. And so that's like one example of how founders can really focus on putting out secure code. And there's other ways, right? There's something called Slither. And Slither allows you to detect vulnerabilities in smart contracts pretty easily.
01:00:13.293 - 01:00:28.489, Speaker A: You could also do fuzz testing and fuzz testing someone essentially there's like a software like Echedna, I think it's called and it tests how your smart contracts react to like different randomly generated transactions. As an example.
01:00:28.677 - 01:00:44.325, Speaker B: Slither is interesting because I've not used it. But I understand the concept, which is that, you know, developers, when, when they finish, you know, writing a smart contract, they go out to, to auditors, right? They pay a bunch of money like, I don't know, 20k or something like that. Per. Per audit.
01:00:44.865 - 01:00:45.537, Speaker A: More.
01:00:45.681 - 01:00:53.273, Speaker B: More. Yeah, probably, yeah, depending on the market, like it evolves a lot and depending on the market, on the auditor themselves as well. So they're really good auditors. Probably charge.
01:00:53.329 - 01:00:56.845, Speaker A: There's a couple out there maybe you want to call out, like Trilobits, OpenZeppelin.
01:00:56.885 - 01:01:00.125, Speaker B: Trilobits and OpenZeppelin are for me, probably tier one.
01:01:00.205 - 01:01:01.533, Speaker A: Tier one. Agreed.
01:01:01.589 - 01:01:16.173, Speaker B: If you go back to Rekt News, that website that we mentioned earlier, you can see the projects and who audited their products. And so Peckshield has been involved in a bunch of these hacks.
01:01:16.229 - 01:01:32.595, Speaker A: Rest in peace, Peckshield. It turns out if you look at Even the top 25 of the hacks under REC News, it turns out most of them were unaudited. Only one was audited and it was by. No, yeah, one was audited and outside of that, most of them were unaudited.
01:01:32.895 - 01:02:11.761, Speaker B: So back to Slither. So you do all these human auditing, but the problem with humans is with human auditors is that they make mistakes. They're not machines. Yes, they're very good at identifying bugs that are unique, sophisticated and that haven't happened before. But machines are better than humans at detecting more common basic bugs and those bugs that happen a lot in history because basically machines did study history. And so Slither is a good one. But there's also an alliance company called Narya.
01:02:11.761 - 01:02:53.599, Speaker B: They were formerly called Pal no More. Oh, they renamed, they rebranded, but the name is. I mean they're known as PNN but PNM pound no More. But the name is hard to remember. But anyway, what they do is they also build automated auditing tools to complement human auditors. And the state of machine based auditing today is still very much based on an expert system. However, this goes back to the AI episode with LLM ChatGPT is that I think at some point, pretty soon, probably the LLM models will be used in proper ways to help with automated auditing as well.
01:02:53.727 - 01:03:03.015, Speaker A: But I think that's the future. I mean, just having something that's continuously monitoring your smart contracts over time, you need to have something like that.
01:03:03.055 - 01:04:04.733, Speaker B: Because today, like every time you want to update your smart contract, you're going to have to go out to do an auditing again, like, which is really expensive. So like One of the reasons why, for the past few years, we as an industry have been in this mentality of moving slow and don't break things, which is the total opposite of Web2, which makes perfect sense because we store so much value in our systems. But one of the reasons why we are forced to do this is because every time you want to roll out a new version of your smart contract, you have to go through these auditing experiences. And they're really expensive and they're slow and they take a long time. But imagine having an automated tool that can help you to audit in an automated way, your smart contracts, assuming you're rolling out, like, minor changes, Right? If you roll out some minor changes, you shouldn't have to go out and go to the human auditors again and pay really expensive fees. You can just rely on some automated tools that will really help the industry move fast and still not break things.
01:04:04.909 - 01:04:50.065, Speaker A: Yeah, no. I think what happened at Defi Summer as an example, and if you look at all the hacks that happened on REC News, most of it happened in Defi Summer. And I think that was because everybody was competing to bring out their products to the users. And the problem with this is that all the auditors are backed up so no one can actually audit new code. All the startup founders are competing with each other and they need to get their code in front of users so they can get users. And then you have this really bad cycle of auditors being full, not being able to release contracts, and then the founders are forced to release contracts and just put a stipulation disclaimer out there that's saying that we're not audited. And really, it turned out to be a really bad kind of phase for Defi where everyone got hacked.
01:04:50.065 - 01:05:02.935, Speaker A: Literally there were days where I would just wake up and be like, where are my assets and should I just pull out? I mean, I got caught up with like, the urine hack and the pickle hack, and it was like booby traps everywhere.
01:05:03.635 - 01:05:06.411, Speaker B: The half wrecked, if you remember that.
01:05:06.603 - 01:05:07.715, Speaker A: Yes, yes, yes.
01:05:07.795 - 01:05:17.467, Speaker B: That was not my first. So half rec was in the form of nft. That was my second NFT that I've ever owned. The first one being Cryptokitties.
01:05:17.611 - 01:05:24.035, Speaker A: But, oh, where you had to mint the ass. Oh, we had to mint an NFT for. Oh, wasn't it?
01:05:24.155 - 01:05:31.485, Speaker B: It was a badge of honor. Like. Like, you're considered an OG if you got hacked in, if you got rugged in particular.
01:05:32.025 - 01:05:37.765, Speaker A: This was Andre's like, game. Like, it was some contract and everyone.
01:05:38.465 - 01:05:41.153, Speaker B: Remember, was it some Fancy name.
01:05:41.249 - 01:05:46.433, Speaker A: I'm looking. I forgot the name, but I think it was supposed to be a game.
01:05:46.489 - 01:05:55.581, Speaker B: It was a game he allegedly has been developing for a while. And then, yes, somehow it got leaked. Like if people found his smart contract.
01:05:55.693 - 01:05:58.741, Speaker A: They found that contract. He said not to call it, don't call it.
01:05:58.853 - 01:06:02.465, Speaker B: Somebody will definitely call it. He def. Andre definitely did it on purpose.
01:06:03.885 - 01:06:05.373, Speaker A: Yeah, I mean, I called it.
01:06:05.549 - 01:06:09.621, Speaker B: I got rocked. I got rocked. And I believe it was fun.
01:06:09.693 - 01:06:31.205, Speaker A: I mean, it was. I mean, I mean, I think that was because of yearn. Everyone like aped into yearn and turned out to be very good times. It was a good times. I want to touch on like one more, two more areas which I think could be interesting. You talked about consumer security, which is very, very important. And you talk about security tools like Pond, or it's called Naira now.
01:06:31.245 - 01:06:34.145, Speaker B: They're called Nara N A R Nara.
01:06:35.005 - 01:07:07.075, Speaker A: Okay, there's another one. There's two or three others that I think could be important for founders. One is bug bounty platforms. So there's like Code arena and Immunify. And essentially you have these, a funnel of incredible security engineers that are ready to review your code and get a bug bounty or get a bounty of some sort. And so this is like a great way to test out your contract for hundreds of security developers are out there and to make sure it's hardened. Your code is hardened.
01:07:07.075 - 01:07:29.001, Speaker A: There isn't a. I wouldn't say there's a framework that founders should follow, but you know, there are many things that you could do to kind of make sure that you're protected. One is like security audits. As we mentioned, there's like platforms like Pond. No more bug bounty platforms that kind of like stress test your code. There's also monitoring services as well. Right.
01:07:29.001 - 01:07:33.833, Speaker A: So like, I believe there's Forta that's released by Open Zeppelin.
01:07:33.969 - 01:07:50.937, Speaker B: So I'm actually a little bit skeptical. I'm not trying to make anyone look bad, but I'm actually a little bit skeptical about real time monitoring tools because, like, can you think of one single hack that took many days to play out? Like, all the hacks I've seen, like, it's at a snap of a finger, it's done.
01:07:51.001 - 01:07:51.321, Speaker A: Seconds.
01:07:51.353 - 01:08:04.097, Speaker B: Yeah, it's done. Like, even if you monitor those hacks, what can you do about it? I guess you can feel a little bit good about noticing those hacks early and notifying your users, but you can't really do anything concrete.
01:08:04.201 - 01:08:31.293, Speaker A: Well, here's a fun example. Let's say that you do find out, Right. Then it's a race to figuring out who can win the transaction via mev. Right. So if you have a direct. Okay, so let's say that transaction happens and you get notified right away, then the protocol could submit a parallel transaction and you would just have to pay a higher fee than the attacker to the builder of the block. Right.
01:08:31.293 - 01:08:36.189, Speaker A: And then the block builder then proposes it to the validator that then gets accepted into the transaction.
01:08:36.277 - 01:08:52.120, Speaker B: So you're saying that the hacker steals something and then like swaps whatever token that they stole into another asset and then the project that got hacked can try to front run that transaction? Is that what you're saying?
01:08:52.152 - 01:08:52.784, Speaker A: Yeah.
01:08:52.944 - 01:08:53.424, Speaker B: Okay.
01:08:53.504 - 01:09:12.179, Speaker A: Yeah. There's so many ways around this. Right. But it has to happen quickly. It probably has to be automated to a certain extent where it automatically pays a bribe fee that's higher than the hacker and they could front run the transaction that could block the transaction. I mean, like, I'm just talking about like in a perfect world, could this really happen? Maybe.
01:09:12.267 - 01:09:13.723, Speaker B: Yeah, it could be really cool.
01:09:13.779 - 01:09:41.435, Speaker A: Right. Like now we're marrying security with mev. Right. And I know we need to talk about MEV we've talked about in the past, and I think we should do a session around like MEV as well. Great. Well, I know there are many more topics within Web3 Security that we want to talk about. An example of this is like, what does the Web3 security stack look like? We talked about some of it, but what does it actually mean? You know, there's gauntlet, there's Chaos Labs that offer simulation based services.
01:09:41.435 - 01:10:16.061, Speaker A: As an example, there's threat intelligence, there's formal verification, there's security testing tools, wallet infrastructure, access management. There's so many areas of Web3 security. And I do think that probably in the next couple episodes we'll dive deeper into this area and understand, you know, what can founders use? You know, what should they be looking out for and where would. Where do we think? You know, crypto security is going to go moving forward. But until then, thanks for tuning in to Good Game. Hit subscribe if you haven't and we'll catch you next time.
01:10:16.133 - 01:10:18.465, Speaker B: And stay safe in the dark forest.
01:10:18.885 - 01:10:23.145, Speaker A: Thanks for listening to Good Game. Don't forget to subscribe. We'll see you next week.
01:10:23.935 - 01:10:24.175, Speaker B: N.
