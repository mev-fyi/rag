00:00:00.970 - 00:00:59.806, Speaker A: Now we have Solana and Solana versus sway and Aptos. This is, like, becoming a very trending topic these days. Solana, I guess, introduced sea level about a year and a half ago. What is sea level? Which, it's essentially the ability to execute transactions in parallel versus how Ethereum does it to today, which is like single threaded. And so what does that mean? Well, if I'm submitting a transaction on Ethereum, Ethereum would mine transactions one by one. So it's kind of like typical ordering system, and it's batched into an order and it'll execute transactions one by one, whereas with C level and I guess similarly with soy and Aptos, it will execute transactions in parallel. So as long as they're not dependent, more or less, and we'll talk more about what that means.
00:00:59.908 - 00:01:08.018, Speaker B: A big misconception that people have towards Aptos and sue is the parallelization. They think that Aptos and sue are.
00:01:08.024 - 00:01:13.154, Speaker C: The ones that pioneered, but it's actually Solana like parallelization has been done already.
00:01:13.272 - 00:01:15.410, Speaker B: For a long time on Solana.
00:01:16.230 - 00:01:21.634, Speaker A: Why was it a big deal then? It's all about the narrative.
00:01:21.762 - 00:01:22.930, Speaker B: It's all about the narrative.
00:01:23.010 - 00:01:24.086, Speaker C: And in fact, if you talk to.
00:01:24.108 - 00:01:33.530, Speaker B: Developers who are building on Apptos and Sui, the thing that attracts them is not parallelization, is the move language.
00:01:34.190 - 00:01:34.940, Speaker D: Right.
00:01:36.750 - 00:02:10.310, Speaker B: So interestingly, I think we mentioned this before, but I think I want to say maybe 70%. 70% to 80% of developers on Aptos and Sui come from Salana. And I've been thinking about the reasons behind it for a while. I think the most obvious reason is just that move conceptually and syntactically are more similar to Solana rust than to solidity.
00:02:10.970 - 00:02:11.720, Speaker D: Right.
00:02:13.130 - 00:02:19.130, Speaker B: Both enable parallelization. Both are statically typed and syntactically.
00:02:19.630 - 00:02:22.700, Speaker C: I think they all come from the C C family.
00:02:23.150 - 00:03:02.098, Speaker B: Interestingly, I've had one founder tell me that, oh, actually, maybe some background first. So the Aptos move is the original move from Facebook, whereas the sui move is modified move. And one founder told me that the Aptosui is actually more similar to Solana rust in many ways than it is to sui. So one interesting similarity is in both. Sorry.
00:03:02.184 - 00:03:03.590, Speaker C: No, no, I take it back.
00:03:03.660 - 00:03:07.058, Speaker B: Sui is more similar to Solana than it is to Aptos.
00:03:07.154 - 00:03:08.098, Speaker A: That's right.
00:03:08.284 - 00:03:16.262, Speaker B: And one interesting similarity is in both Solana and Sui, the developer has to declare their own dependencies.
00:03:16.406 - 00:03:20.670, Speaker C: So in this philosophy, the responsibility of.
00:03:20.740 - 00:03:24.270, Speaker B: Identifying parallel transactions is put on the developers.
00:03:24.930 - 00:03:25.582, Speaker D: Okay.
00:03:25.716 - 00:03:30.090, Speaker C: Whereas in Aptos, the responsibility of identifying.
00:03:30.170 - 00:03:43.742, Speaker B: Parallelizable transactions is put on the shoulders of the virtual machine, and it's done at runtime, and it's something, what they call the block STM. And that's something that came out of Facebook.
00:03:43.886 - 00:03:45.582, Speaker C: Sui doesn't use block STM.
00:03:45.646 - 00:03:50.842, Speaker B: Sui's philosophically is a little bit more similar to Solana.
00:03:50.926 - 00:03:55.062, Speaker C: And so as a result, I have founders tell me that the Aptos move.
00:03:55.116 - 00:04:02.170, Speaker B: The original move, is easier to work with than Sui move and Salana rust.
00:04:03.150 - 00:04:05.002, Speaker C: So Aptos move is a higher level.
00:04:05.056 - 00:04:09.498, Speaker B: Language, and I can relate to it because ten years ago I wrote a.
00:04:09.504 - 00:04:11.498, Speaker C: Lot of C plus plus, and it.
00:04:11.504 - 00:04:12.810, Speaker B: Was so painful for me.
00:04:12.880 - 00:04:14.126, Speaker C: C and C plus plus are some.
00:04:14.148 - 00:04:15.306, Speaker B: Of the most painful languages.
00:04:15.418 - 00:04:16.606, Speaker C: And at some point I moved from.
00:04:16.628 - 00:04:26.430, Speaker B: C plus plus to Java, and my entire world changed. Like Java, whatever you do, it just works. It just compiles. You don't run into bullshit issues like.
00:04:26.500 - 00:04:28.322, Speaker C: Segmentation fault, you don't have to manage.
00:04:28.376 - 00:04:30.370, Speaker B: Your own memory and all that stuff.
00:04:30.440 - 00:04:35.954, Speaker C: So Java is a higher level language than C plus plus. There's trade offs, of course, because C.
00:04:35.992 - 00:04:54.778, Speaker B: Plus plus is faster, Java is easier to work with. So developer experience is on Aptos move reminds me of Java, whereas Sui and Solana are more analogous to C. But anyway, so that's something I learned anecdotally. Very interesting stuff.
00:04:54.864 - 00:05:16.014, Speaker A: Yeah, it's very interesting. So it seems like Aptos is much more developer friendly than sway, primarily because block STM, which stands for software transaction memory, it essentially allows you to pre order and divide transactions optimistically, and then we'll validate it and then check for any dependencies and then invalidate the transaction if there's dependencies caught.
00:05:16.062 - 00:05:16.514, Speaker B: Right.
00:05:16.632 - 00:06:01.086, Speaker A: So essentially blocksTM does all the ordering and then checks for dependencies and then will optimistically validate the transactions, whereas with SUI, sway will give the developer more control to call out transactions whether they're dependent or not, which requires more work on the front end for developers. Right. So there's very interesting dynamics there. You have one that does it for the developer, and then you have sue that gives more power to the developer to call out the transactions. What do you think about the two, and which one do you think? Obviously, it seems like you like what Aptos and BlocksTM is doing.
00:06:01.188 - 00:06:05.778, Speaker B: No, I think both have their merits. Neither is strictly better than the other.
00:06:05.864 - 00:06:06.306, Speaker D: Right.
00:06:06.408 - 00:06:36.214, Speaker B: It's very hard to say at the end of the day, but providing a good developer experience is critical for success. And anecdotally, I heard from Solana founders that both the Aptos and Sui developer tooling, surprisingly, is better than Solana. Get out of here because Solana has been around for, like, two, three years now, whereas Aptos and Sui are much newer.
00:06:36.262 - 00:06:38.586, Speaker C: Well, I mean, obviously they've done many.
00:06:38.608 - 00:06:45.010, Speaker B: Years of work at Facebook, but surprisingly, the devtooling is better on Aptosin and Sui.
00:06:45.190 - 00:07:30.602, Speaker A: Well, Solana just announced that they're going to be supporting move. Did you see that? Yeah, I think it's about a year away, less than a year away. And so, you know, there's this huge battle between Solana, Aptos and Sway. We have some of the developers moving away from Solana to sway and Aptos primarily, I think it's just transaction throughput. Right. So, like, the bottlenecks and the chain being halted is an issue for some developers. And so some of these people move, do you think, with Solana moving to move or supporting move, do you think that they'll still have the competitive edge? Where do you see this all play?
00:07:30.736 - 00:07:33.738, Speaker C: Know, at the end of the day, I want to touch on a point that I brought up at the beginning.
00:07:33.754 - 00:07:49.326, Speaker B: Of this session, which is that we, as analysts or whatever you want to call it, can spend all day researching the theoretical aspects, merits, trade offs of each chain.
00:07:49.358 - 00:07:50.194, Speaker C: But at the end of the day.
00:07:50.232 - 00:07:56.242, Speaker B: The only thing that matters in the early stage is developer adoption is the momentum.
00:07:56.386 - 00:07:57.080, Speaker D: Right.
00:07:57.690 - 00:08:07.526, Speaker B: Aptos and Sui are clearly gaining momentum right now at the expense of Solana. And I think the Solana people are aware of it.
00:08:07.708 - 00:08:11.206, Speaker C: I think, anecdotally sees a lot of.
00:08:11.228 - 00:08:27.274, Speaker B: Good things in Aptos and Sui and also thinks them as direct competitors to Solana. And by the way, anecdotally, there's a few big Solana investors that are pushing their portfolio companies to switch from Solana to Aptos.
00:08:27.322 - 00:08:41.762, Speaker A: And sue, how do you feel about that? I mean, there's just a lot of fud around Solana, it seems like. And there's this concept of mercenary and missionary founders that you and I always talk about. Yeah, so let's talk about. Let's unpack that.
00:08:41.896 - 00:08:55.206, Speaker B: The thing that is unclear to me is how missionary the developers on Aptos and Sui are, because a lot of them come from Solana, some of them.
00:08:55.228 - 00:08:57.030, Speaker C: Come from Ethereum, and some of them are new.
00:08:57.100 - 00:08:59.650, Speaker B: A lot of them, I think the majority of them come from Solana.
00:08:59.730 - 00:09:40.390, Speaker A: Do you think that's a good thing or bad thing? I mean, for me, as an example, I want to attract net new developers. Obviously, we'll get some developers from all the other ecosystems, and that's fine. But to me, having organic pull from net new developers is a great signal. Just vampire attacking or attacking or attracting other layer one developers from one specific ecosystem may not be the best strategy, because what you're doing is you're attracting mercenary founders versus missionary founders. So curious to hear your thoughts on that.
00:09:40.540 - 00:10:16.890, Speaker B: The developer loyalty level of loyalty is certainly a big problem for new chains in general. It's not specific to Apptot or Suey or anything, but at the end of the day, I feel like for most new developers that are new to web three, they couldn't care less about loyalty towards the online ecosystem, at least maybe in five to ten years. Choosing between Apptosui Salana or Ethereum cosmos is basically choosing from AWS or Google Cloud or Microsoft Azure, right? Whatever works for them, for attracting funding, for attracting users.
