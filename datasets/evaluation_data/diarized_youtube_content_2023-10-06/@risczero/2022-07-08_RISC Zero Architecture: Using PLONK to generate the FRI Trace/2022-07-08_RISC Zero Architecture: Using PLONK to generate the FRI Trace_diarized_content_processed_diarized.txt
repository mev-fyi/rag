00:00:00.090 - 00:00:35.080, Speaker A: So I wanted to talk now in detail about sort of the mechanism that we're using to do the memory validation. So as we mentioned earlier, we're effectively doing at most one memory transaction per execution cycle. And honestly, if we don't have a specific memory transaction, we just do a read of memory address zero or whatever as a default. So there's always one memory transaction per cycle. So there are, there are two sets of columns. They're both in the data section. One of them is the sort of memory operations, and those occur in program order.
00:00:35.080 - 00:00:58.254, Speaker A: And so there's a sort of cycle of which logical cycle this is, and that just moves forward monotonically. And there's a constraint that that always moves forward monotonically. And then there's basically the address, the data, and a write read write flag, which of course have constraints that are hooked into the rest of the circuit. Just real picture. I can do this.
00:00:58.292 - 00:00:59.294, Speaker B: If you do this, you can like.
00:00:59.332 - 00:01:00.142, Speaker A: Oh yeah, there you go.
00:01:00.196 - 00:01:02.382, Speaker B: Do a pointer thing that everybody will see. And hopefully that.
00:01:02.436 - 00:01:35.782, Speaker A: There we go. Yeah, so this is the cycle, this is the normal ordered. So this all happens in cycle order. And so what we're saying here is, okay, at time zero I'm going to do a write to address three of the value 17. And then at time one, I'm going to do a write at the address seven of the value three. Then of course later I'm going to read from address three and I'm going to read back 17, or at least I should, assuming memory is valid. Right? So what happens is during the initial program execution, we generate these columns and we just model memory externally.
00:01:35.782 - 00:02:19.030, Speaker A: Right? Then what we do is after execution, we do a sort of all of the values in here into this sort of verifiers, this second copy of the memory transactions. But these are, instead of being sorted by cycle, are sorted by address first and cycle second in lexographic sort order. What that means is that all of the memory transactions that occur on the same address are all now located next to each other, and all of them are in proper cycle order. At which point, basically it's possible to quickly verify the validity of the memory transactions. Oh wait, you know what? This should actually be a one, shouldn't it? Yes. Oh, shoot. I guess I can't edit this document while I'm doing this.
00:02:19.030 - 00:02:35.294, Speaker A: Sorry. This is a one. This is a one right here. Yes. So what you'll see is we write 17, then we read it twice, and then here we write two different values and read it. And interestingly, the requirements for the verified verifier are basically written here. They're actually fairly simple.
00:02:35.294 - 00:03:49.750, Speaker A: If the addresses are the same, then we have to verify that the cycle is moving forward. And if it's not a write, we have to make sure that it matches whatever the previous value was, and then also that otherwise, if they're switching between addresses, the only thing we care about is the addresses are going up. You will note, by the way, that this allows an initial read prior to a write to return any value whatsoever, which we actually take advantage of. Basically, reads of values never written are in fact undefined, and we use that actually as a way to interact with the external world. So basically, in addition to, besides the set of constraints that represent the verification of the resorted versions of the address, we also have to prove, of course, that these two different tables are in fact permutations of each other, which we do using the sort of plonc permutation argument, where we basically commit to the entire state of the data trace Merkel tree. And we use that and the Pyatshmere sort of mechanism to then pick a number, you know, a set of, of ways of. I won't go through the Planck argument in detail.
00:03:49.750 - 00:03:52.340, Speaker A: I'm sure people have read the paper, and if not, it's a great paper.
