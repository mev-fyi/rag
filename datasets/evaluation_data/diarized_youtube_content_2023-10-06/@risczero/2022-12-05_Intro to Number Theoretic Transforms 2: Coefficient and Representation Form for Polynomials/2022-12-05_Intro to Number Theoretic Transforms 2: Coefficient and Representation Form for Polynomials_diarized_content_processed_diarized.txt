00:00:00.490 - 00:00:55.918, Speaker A: So what is the main goal of the number theoretic transform? And it's basically to do with the difference between so called coefficient form and evaluation form of polynomials. So, to produce a stark, a computer has to have a very be a very large polynomial in its memory. Basically, it's a polynomial with a lot of components. And there's basically two ways to write down a polynomial. One way is the more traditional way that you're probably familiar with. You write it down in coefficient form. So I can say I have a polynomial p of x, and that's a three x cubed plus a two x squared plus a one x plus a zero.
00:00:55.918 - 00:01:49.450, Speaker A: Right. This is a degree three polynomial, because three is the exponent here. And you can see that there are basically four pieces of information that are needed to convey this polynomial, right? We need a three, a two, a one, and a zero. So if those four numbers, a three, a two, a one, a zero, are written down in your computer's memory, then you know everything you need to know about the polynomial. The other way you could write down a polynomial is in evaluation form. And this is just to say that you can evaluate a polynomial at several points, right? A polynomial is a function. You can give it a number and it spits out another number, or you can give it a finite field element, and it will spit back out another finite field element.
00:01:49.450 - 00:03:15.050, Speaker A: And if you take four different locations and you evaluate the polynomial at those locations, then that's essentially as good as giving you the polynomial coefficients. Because, as we'll see, there are ways of going back and forth between these two things. And this is really important for the sort of stark software, because it turns out that the person who's producing a stark proof is actually going to have to do operations that involve both of these forms. There will be a list of evaluations, and the prover is going to have to publish some of those. And then there will be a coefficient form that the proverb will transform it back into to do some sort of arithmetic operations on these polynomials, to sort of reduce them. And so, basically, it's very critical that we be able to pass between the coefficient form and the evaluation form, that we should be able to take a coefficient form polynomial and transform it into an evaluation form. And also, if we have an evaluation form, if we have a bunch of different evaluations, we should be able to find the coefficients back from those evaluations.
00:03:15.050 - 00:03:38.740, Speaker A: And so we need an efficient way of going basically back and forth between the two versions. I guess I'll stop and I'll just make sure. That ask if anyone has any questions, assess if anyone's sort of confused by anything or has any sort of thing they want to resolve. Before I move on.
00:03:48.710 - 00:04:01.400, Speaker B: Obviously, we're operating over finite fields in this context. We want to use polynomials as the bases. Could you also use polynomial bases in non finite contexts, like over the real numbers?
00:04:02.970 - 00:04:47.314, Speaker A: Yeah, sure. So I guess what we're going to see here is that there's a transformation between evaluation form and coefficient form, and that's basically there's four variables and four unknowns. At least in this case, there could be more, but I don't see any reason why you couldn't do it using real numbers. Instead, it would just be, you would just be using the mathematics of the real numbers or some other field. It doesn't necessarily have to be a finite field, although it does have to be a system of numbers in which you can divide. That actually is important. So it does have to be a field rather than a ring.
00:04:47.314 - 00:04:49.494, Speaker A: If you know the mathematical difference between.
00:04:49.532 - 00:04:52.230, Speaker B: Those two things, that's helpful.
00:04:56.330 - 00:05:09.290, Speaker C: Just ask. So you have these coefficient and evaluation form. Does it mean that it's possible to evaluate the polynomial without knowing the coefficient or not using the coefficient directly?
00:05:11.070 - 00:06:20.400, Speaker A: Well, so it should be possible to evaluate the polynomial at any point given the coefficients. I guess you could say that you do that directly by just sort of multiplying things out. And that's something that I'll show later. But perhaps something that I should emphasize is that the evaluation form is not just a single evaluation of the polynomial, but multiple different evaluations. Right. If I just give you a single number, a single point at which a particular polynomial is evaluated, that's not enough to tell you the whole polynomial, because there might be many polynomials that pass through that one point. So you actually sort of need quite a bit of information, and there's sort of a distinction between doing the computation directly and doing it in a way that sort of is the sort of more number theoretic transform way, which is a bit more indirect, but actually gives you a lot of data all at once.
00:06:22.530 - 00:06:37.640, Speaker D: I think the question, if I understood correctly, was, if you just start with the evaluation form, can you evaluate at different, at points that are not your x zero, x one, x two, x three? Not if you start with your form.
00:06:38.410 - 00:07:15.680, Speaker A: Okay, I understand. Yeah, that's a good question. Yeah. I'm not sure if there's a real direct way of doing that. One way that you could do it is if you had an evaluation form and you wanted to evaluate at someplace that was not one of the points at which you had evaluated, you could take your evaluation form, and if you had a way of changing that into coefficient form, you could go into coefficient form, and then maybe once you had it in coefficient form, you could then evaluate it at the point you wanted by multiplying things out.
00:07:16.290 - 00:07:59.180, Speaker B: So I actually have some more context on this because I was randomly reading about this earlier. Basically, this is a big deal in the snark world right now where they want to try to eliminate entity from snark generation computations. And there's a valuation form called the Barry centric evaluation which does indeed allow you to evaluate a polynomial at different point without going through coefficient form first, and it is better under niche circumstances. I just posted in the chat a link to an article by Vitalik on this topic that also links to a paper that has more information as well.
00:08:00.910 - 00:08:10.510, Speaker A: Yeah, Vitalik's article are always great. Okay, great. Thanks for that. Something I think I didn't know, so I'll probably read that article later. Bye.
