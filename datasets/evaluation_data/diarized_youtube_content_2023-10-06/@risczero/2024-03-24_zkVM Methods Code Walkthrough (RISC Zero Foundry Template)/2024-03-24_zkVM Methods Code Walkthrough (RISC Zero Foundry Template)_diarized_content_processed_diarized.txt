00:00:01.840 - 00:01:01.866, Speaker A: So if you're building something with the RiSC Zero foundry template, there's really three parts that you need to be thinking about. There's the part that is the ZKVM program that you're actually proving. There's the publisher app which is going to send a request for that proof. And then once Bonsai sends back the proof, the publisher app is also going to publish the proof on chain. And then the third part is going to be the app contract which is going to call the RiSC Zero verifier. So in this video I want to dive into a little bit of a code review of the ZKVM part of the application which lives in this methods folder. So the we use the term guest program to refer to the part that's getting proven.
00:01:01.866 - 00:02:26.914, Speaker A: And if you click into the guest folder and then into this source slash bin folder we find this is even file and this is the code that is actually going to get proven inside the ZKVM. And it's quite a short program. All that this program is going to do is it's going to read some input, or I guess here really is where it's going to read the input and it's going to decode this input and assign it to a variable. And then it's going to run an assert statement on that variable and in particular it's going to run an assert on the final bit of that variable. And depending on whether that final bit is zero or one, it's going to either fail and return that the number is not even, or it's going to actually commit that number to the journal and generate a proof. So you'll notice that we're using this stood in to get our inputs into the ZKVM. And because we want to actually include the output as part of the proof, we're going to commit the output using this commit slice command.
00:02:26.914 - 00:02:37.094, Speaker A: So that's the ZKBM portion of this bonsai foundry template. Thanks for watching and happy building. Happy building.
