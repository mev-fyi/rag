00:00:00.410 - 00:00:07.722, Speaker A: So I want to just briefly, sort of give a picture of what this fry protocol actually looks like in practice.
00:00:07.786 - 00:00:13.450, Speaker B: This is going to be a very bird's eye view. The prover sends.
00:00:13.530 - 00:00:15.790, Speaker A: So this is Alice sends some big.
00:00:15.860 - 00:00:18.302, Speaker C: Block to the verifier and says, hey.
00:00:18.356 - 00:00:20.702, Speaker A: This is a valid code word.
00:00:20.836 - 00:00:23.134, Speaker C: And the verifier says, yeah, that's pretty big.
00:00:23.172 - 00:00:25.686, Speaker B: I don't really want to run an interpolation on it.
00:00:25.868 - 00:00:27.126, Speaker A: How about I just send you back.
00:00:27.148 - 00:00:28.934, Speaker B: A random value, and you can use.
00:00:28.972 - 00:00:36.038, Speaker C: That random value to make a smaller code word? And the verifier says, yeah, that's still pretty big.
00:00:36.124 - 00:00:41.914, Speaker B: I'll send you back a random value, and you can use that random value to make a smaller code word.
00:00:42.112 - 00:00:44.186, Speaker C: And then eventually the verifier says, okay.
00:00:44.208 - 00:00:46.140, Speaker B: Yeah, that's small enough. I'll check it myself.
00:00:47.150 - 00:00:49.274, Speaker C: So now the verifier, instead of having.
00:00:49.312 - 00:00:58.320, Speaker B: To run an interpolation on this big 20 entry code word, instead, only has to think about a five entry code word.
00:00:59.730 - 00:01:02.014, Speaker C: So that's the fry protocol in two minutes.
00:01:02.212 - 00:01:06.290, Speaker B: Less than that, maybe 45 seconds. Questions about the fry protocol.
00:01:15.810 - 00:01:18.880, Speaker D: What do you mean by check it themselves?
00:01:19.570 - 00:01:21.154, Speaker A: By check it themselves, I mean this.
00:01:21.192 - 00:01:23.220, Speaker B: Algorithm that I showed here, more or less.
00:01:23.910 - 00:01:24.866, Speaker D: I see.
00:01:25.048 - 00:01:26.850, Speaker A: So this algorithm.
00:01:29.030 - 00:01:34.034, Speaker C: The agreed upon degree with 20 entries. This is super expensive.
00:01:34.162 - 00:01:40.806, Speaker A: But if we do a couple of interactions in order to make that smaller, then it's manageable, I think.
00:01:40.828 - 00:01:43.914, Speaker B: I was talking over you for a second. Did I answer your question?
00:01:44.112 - 00:01:57.550, Speaker D: Yeah, I was just clarifying that with sort of a smaller code word, you can then check if the interpolated polynomial is below the agreed upon degree.
00:01:57.970 - 00:01:58.382, Speaker B: Yeah.
00:01:58.436 - 00:02:15.394, Speaker A: And there's some implementation options here in terms of what the end of this actually looks like. In the fry paper, you go all the way until the last thing is a constant polynomial. In our implementation, we go until the.
00:02:15.432 - 00:02:17.106, Speaker B: Last thing is degree 256.
00:02:17.128 - 00:02:21.782, Speaker A: And the details of, like, we actually.
00:02:21.836 - 00:02:24.242, Speaker B: Don'T make the verifier do the interpolation.
00:02:24.306 - 00:02:26.470, Speaker A: On the degree 256 thing.
00:02:26.620 - 00:02:29.202, Speaker B: Instead, the prover does the interpolation.
00:02:29.346 - 00:02:33.826, Speaker A: But on some level, at the end, the verifier says, like, okay, yeah, you've.
00:02:33.858 - 00:02:38.650, Speaker B: Done enough of the work for me. And then the verifier does some checking it myself.
00:02:38.720 - 00:02:45.350, Speaker C: And the checking it myself part, I guess, includes not only a check that the thing at the end is valid.
00:02:45.430 - 00:02:51.974, Speaker A: But also these random values provide a sort of audit trail for the interactions.
00:02:52.102 - 00:02:57.470, Speaker B: So this is an interactive proof protocol.
