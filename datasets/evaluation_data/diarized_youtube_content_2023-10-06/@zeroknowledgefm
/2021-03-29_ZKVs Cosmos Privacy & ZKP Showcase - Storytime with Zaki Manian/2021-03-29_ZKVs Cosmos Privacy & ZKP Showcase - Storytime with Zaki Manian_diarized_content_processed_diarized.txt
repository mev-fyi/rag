00:00:05.970 - 00:00:20.982, Speaker A: Actually, would you guys mind dropping Anna's screen share so people can just see my giant head? Totally. We'll bounce. Sweet. Sweet. Okay. Because I want to tell stories. So I'm zucky again.
00:00:20.982 - 00:01:25.022, Speaker A: I've been around the cosmos basically since the beginning. I have been working on this project for a really long know. My formative experience in cryptocurrencies, to a large extent, was when Ellie and Aaron Tromer came and spoke at the bitcoin meetup I was running in Santa Clara and gave the first public talk outside of Israel about zero cash. And I'm like, snarks, what is this witchcraft? I don't understand this talk, but I will eventually understand it. And it took like, three years, and eventually I understood how snarks worked and all of this stuff. It's been fantastic to see this expansion of knowledge around. And one of the things I've been frustrated by in the history of cosmos has been that there's this amazing privacy work that I get to help out with.
00:01:25.022 - 00:01:58.060, Speaker A: I'm an advisor to the electric coin company. I have been trying for years to. I've been just interested in every single piece of ZKP tech. We run a data availability node at occlusion for. For diversify will's decentralized exchange. I've been bullish on ZKP tech, and so it's always been like, there's like, all this cool ZKP stuff. There's all this cool cosmos stuff.
00:01:58.060 - 00:03:17.650, Speaker A: Why don't these things mesh together? And it's been a surprisingly shocking divide. And so I've had the opportunity to advise a lot of projects who are trying to work at the intersection of cosmos and privacy. But I've never really had an opportunity to share what usually I tell them. So it's weird, but probably the biggest sort of breach point between the cosmos world and the privacy world is the fact that the Cosmos SDK is written in go, and the privacy world has basically congregated around two things. They congregated around the Ethereum virtual machine. So there's a lot of really cool solidity code, like the Starquares Cairo verifier written in solidity, super cool, amazing technology, and there's a lot of really cool ZKP stuff written in rust. And the challenge has always been like, the cosmos SDK is in go and for a variety of feedback loops.
00:03:17.650 - 00:04:22.082, Speaker A: And as Dave is saying in the chat, he's like, the SDK is not very geared at the moment for changing anything about the cricut to be ZKP efficient. Yes, he is 100% right about this. But I was going to say I'll cover the impedance mismatch that Dave has been talking about for, like, five years, or three years or something like that in a second. And I'm sure he's going to talk about in his talk, too. So we have this huge cultural divide, but between what is happening, all of this innovation, and these feedback loops. And so the EVM is there because Ethereum is this great target market, and Ethereum has done a couple of things to make it easier for people to build privacy tech on top of Ethereum. But mostly projects have macgyvered their privacy tech on top of Ethereum with lots of really amazing cryptography and cryptographic tricks in ways that nobody really anticipated.
00:04:22.082 - 00:05:25.770, Speaker A: And it's just a testament to the extensibility of Ethereum, far exceeding anything I would have expected when it was being designed. And then the rust thing is, there's not really any one explanation. I'm sure everybody who chooses to write their ZKP stuff in rust does it for a particular reason. The power of the abstractions, memory, safety, correctness oriented design. But I think a lot of it just came down to the fact that the electric coin company really adopted rust very early on in the zcash ecosystem, and they were the people who pioneered this frontier, and that had a feedback loop where you needed no rust to read the code for sapling. The sapling design innovated so many of the sort of important ideas that have sort of propagated out into the ZKP space. And so there's really widespread adoption of rust.
00:05:25.770 - 00:06:48.440, Speaker A: So then the advice that you have to give is there's basically a bunch of different kind of routes you could take to sort of the routes that people could take to integrate, go and rust stuff together, or, like, these two things, these two artifacts, the EVM artifacts and the rust artifacts. So the EVM artifacts is, this concept of Ethermint does exist. Like, Ethermint does exist. It is unfinished as a product. I'm sure Fede has more to speak about, like what it would take to finish Ethermint as a product, but in its nascent form, you actually could build an EVM, like, use the Ethereum solidity integrations in a Cosmos SD context with a modest amount of work. To the best of my knowledge, no one has gone down that road yet, but I do think somebody will, because there's millions and millions of dollars that have invested in EVM verifiers for zero knowledge things. It seems like insane to waste on it.
00:06:48.440 - 00:07:33.060, Speaker A: The other component of it is the rust stuff. And there's basically three plausible approaches to integrating rust into the Cosmos SDK and reusing a lot of the Cosmos SDK code. So one approach is the approach of just using the Seago interface and integrating rust function. One approach is reimplement all the privacy stuff in go. And reimplementing the sapling verifier in Go is a modest amount of work. It's definitely doable. So far, a bunch of people have sort of started and not really gotten over the finish line for doing that.
00:07:33.060 - 00:08:20.990, Speaker A: So let's disregard that, because a lot of people who want to build this stuff just don't want to write code in code. So then there's the question of using Sego. So this is like a tight integration into Seago is this thing that allows go code to call anything that looks like C, and Sego allows for integrations. And you do have a bunch of Cosmos SDK projects that do use Sego with rust in production. And so that exists. There are examples of this that people can look at. The sort of deepest integration of Sego stuff and rust stuff into the cosmos SDK is cosmosm.
00:08:20.990 - 00:09:19.990, Speaker A: Cosmosm brings webassembly smart contracts to the Cosmos SDK and uses those webassembly smart contracts. And those Webassembly smart contracts are all being executed over a rust interface. And so there's a huge opportunity to use cosmosm as an example of how do you build a lot of rust inside of go. Rust also has the advantage of compiling the webassembly. So cosmosm could be your execution environment. And that's sort of like the second option and then probably the third option. And honestly, as you'll hear from the teams that are presented here, I found to be, seems to be the popular option is build a rust execution environment that speaks to the tendermint apci and rebuild the Cosmos SDK in Rust.
00:09:19.990 - 00:11:10.380, Speaker A: And there's also the work on ABCI about improving the abstractions that tendermint offers for the zero knowledge world. So I think these are the three options. The problem with the third option is it is a pretty heavy lift. And what's really exciting to me about these projects that are presenting today is we are moving from a model where building a Cosmos SDK in Rust is like a completely underresourced effort with two and a half people working on it, two large teams and very competent teams, and teams that have had a long track record of shipping who are starting to build on this thing. And what I hope is that everybody collaborates together, that we end up with something that is as rich an ecosystem as the Golang Cosmos SDK in rust. And then we can really take advantage of the fact that we have IBC, that we have this sovereign interoperability model, and the sovereign interoperability model and the sovereign interoperability model just purely can enable all of this code to work together. There's a long way to go to get there, but the core is, I see these pieces as inevitably coming together, and I'm just hoping that all of the teams that are presenting today can start collaborating more deeply so that the Cosmos privacy vision finally reaches its inevitable future.
00:11:10.380 - 00:12:22.178, Speaker A: It's also cool because I want to use all of this tech, and so I'm super happy that all the teams that are working on are presenting it. And yeah, I'm available to you guys, just speaking to the presenters and really anyone else who's building Cosmos privacy tech. This is a thing I'm willing to dedicate time and energy to and projects that I'm working on, like sommelier, also need privacy tech, but it probably is more in the enclave space and less in the ZKP space as we go forward. I think the other real impediment to moving Cosmos forward has been like the privacy and Cosmos forward has been sort of the general snark timber phenomenon, where it was like a new proof system came out every month for all of last year's. Okay, so Anna has a really good question. How does IBC open up new. Going to.
00:12:22.178 - 00:12:41.240, Speaker A: I'm going to take Cisla's question. Cool. Okay. Hi, zuckie. What's your view on combining NFTs and privacy? NFTs not for art performing, used for Uniswap LPs, NFTs. Because then people will know my orders. Yeah.
00:12:41.240 - 00:13:38.834, Speaker A: So I think this is a little bit about what I was hinting at with NFLPs. I really like the term. NFLPs are like way better term than LP. NFT. The mechanism is. So, I mean, I was hinting at this, right? Because it is, as far as I know, pretty hard to build systems that do this sort of property based computation in zero knowledge. Like the, like, it's, it is though, you know, there is an increasing world around it, but there, you know, and, but, and like, you can do things like big, like bare big shield, like a shielded pool that contains nfts.
00:13:38.834 - 00:14:11.042, Speaker A: Like there's no there. The big. The big thing that is going on there is that you can build shielded pools of NFTs. It's very clear that you can do that. Whether or not you want to go beyond that and have computation over those properties, then I think you need enclaves. So now you have this. Okay, so there's another question.
00:14:11.042 - 00:15:49.682, Speaker A: How does the informal effort around tendermint Rs fit into the need for a rust SDK? One of the things that so informal is this amazing team that has been built up by Ethan Buckman and Ariane and, and the rest of that team that is like these team of formal verification rust ninjas in the cosmos. They have been diligently improving the quality of general rust tooling in cosmos. So one of the most painful things about integrating with cosmos in any other ecosystem other than Cosmos SDK is what we call the IBC handlers, which are these components that sort of handle the IBC packets and set up IBC connections and sort of are essential for speaking IBC. And so one of the things that informal has been working on that I'm most excited about and will unlock a lot of rust in cosmos stuff is the world of having those handlers available in rust. One of the things that I think is also interesting there is those handlers may, in an idealized world, those handlers kind of can go across all kinds of ecosystems. This like hypothetical Cosmos SDK and Rust that is being built across multiple people, across multiple organizations is a use case for it. Existing blockchains that speak webassembly and rust like substrate or near are other potential users of that system.
00:15:49.682 - 00:17:35.794, Speaker A: And that makes me really, then, okay, I'm going to do the last one. What is the business case for privacy in the cosmos ecosystem? In the cosmos ecosystem in web three, the business case? Well, I'm actually not going to answer that question because I think when you see the presentations that are coming up, it's going to be relatively obvious what the business case is, because all three of these projects have super compelling business cases, and they're not just, hey, we're going to make private ecash. They're really saying there are functionalities in the cosmos ecosystem that are essential to the economic development of cosmos, and that makes a big difference. I think if you watch the remaining presentations, you'll get a pretty good sense of what the business case is. So, just so I got 1 minute left, I'm going to wind things up. So what's really exciting to me about where we are is that, yeah, I think that the idea of that the ship has sailed on creating a really compelling ZKP go ecosystem. And so what is going to happen? What these projects really represent is an increasing, having crossed the boundary.
00:17:35.794 - 00:18:17.070, Speaker A: And IBC going live on Monday, there's a really compelling reason to build a rust ecosystem now around cosmos. And that's going to enable a lot in terms of, that's going to enable a lot of sort of like, more code reuse, more innovation on the zero knowledge front. And if you watch the remaining presentations, the business case for why you should build privacy on Cosmos should become really clear. I think you're going to see these projects represent a frontier that a lot of people are going to cross. Thanks, John. Awesome. Thank you so much, Zucky.
00:18:17.070 - 00:18:23.410, Speaker A: Yeah. Please enjoy the rest of the event. There's some really exciting projects likes to learn about. Bye.
