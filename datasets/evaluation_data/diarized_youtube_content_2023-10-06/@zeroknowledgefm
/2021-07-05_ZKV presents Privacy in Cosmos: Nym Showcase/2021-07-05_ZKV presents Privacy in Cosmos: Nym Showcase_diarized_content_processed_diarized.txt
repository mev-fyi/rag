00:00:00.490 - 00:00:44.902, Speaker A: I'll give a quick run through of Nim, then. Thank you very much. Yeah, so I'm the CTO of NIM, and I'm in charge of building this beast, and I'll just try to give a quick overview of what it is that we're doing. So, to recap kind of what Harry left us with, the Internet was originally designed for friends. When it was originally built, it had no kind of privacy or security technologies, and we've been just sort of bolting on these security features since the 1970s. So let's go over the goals of NiM in the context of that kind of background. The three goals of Nim, I would say, are network privacy, and what that means is that your network communications should not be observable.
00:00:44.902 - 00:01:14.366, Speaker A: We want to make it such that it can't be figured out who's talking to who within the system. We're also interested in transactional privacy. That is the stuff that you actually do online. You want to be able to hide the effects of that, the side effects of that whenever you're doing them. And we also want to enable scalability. So here are the technologies that we use for each of those parts of the stack. We have a mixednet, which I'll go into in a moment, and that's the network privacy layer.
00:01:14.366 - 00:01:53.166, Speaker A: If you want to think about it really simplistically, it fulfills the same functions that people want from Tor. That's the simplest way of thinking about it. We have coconut, which is a credential scheme, which I'll also talk about for transactional privacy. When we talk about transactional privacy and network privacy, for that matter, NIm can be used for blockchain systems. And it's worth understanding that that's kind of our first place that we're going. But we're thinking of this as a general purpose system. So we're trying to build technologies that can be used in blockchains, but then will also be able to be rolled out into other areas, basically.
00:01:53.166 - 00:02:30.134, Speaker A: So, like the wider Internet, the last of these three technologies is the NIM token, which provides incentives for scaling the system up and down. So I'll talk about each of these three technologies in succession here. So, a mixednet, what is it? The goal of a mixednet is to make it impossible for your adversary. Whoever is trying to figure things out about what you're doing, make it impossible for them to say who's communicating with who. So when we think about encryption, it's easy to think, well, I can send people messages. In fact, this whole stream is going out over SSL. It's encrypted.
00:02:30.134 - 00:03:18.054, Speaker A: What's the problem? Well, the problem is that all of us who are connected, if there's a sufficiently powerful adversary or even just maybe somebody who's locally powerful, can actually maybe not tell the content. Well, they certainly can't tell the content of our communications unless somebody has really screwed up. But what they can do is they can all see that we've connected to the system that we're viewing this video through, for example. And that's true of all of your communications on the network. And the reason for that is because it goes back to that first slide that I had. Basically, the Internet has just had these kind of privacy technologies bolted onto it. So where we've ended up so far is that despite the fact that the content of your communication is encrypted and hidden from any adversaries, the metadata that gets your content there is actually not encrypted.
00:03:18.054 - 00:03:57.974, Speaker A: So that's kind of what we need to fix with the mixnet. One of the ways that we do that, or the main way, is that we have a technology called the Sphinx packet. The Sphinx packet is actually used in the lightning network, but we use it for quite a different purpose than lightning, as you'll see in a second. So, a Sphinx packet is a nested packet format with a bunch of nested headers that have encrypted routing information. And you can think of them kind of like russian dolls. Assuming that all of these dolls were the same size, they have exactly the same kind of design painted on the outside. You can't really distinguish them from each other just by looking at them.
00:03:57.974 - 00:04:37.106, Speaker A: You can't say what's inside them. You don't know where it's going, right? So, the mixnet, here's the simplest version of it. We have two people, one on each side, the happy faces, and they want to communicate with each other. So we have a system of network nodes in between them. And each of these people can send sphinx packets back and forth to each other and bounce them potentially through different jurisdictions all over the world. And at each one of these hops. So let's say the happy face on the left sends one of the sphinx packets that will, let's say, go through the top row all the way through to the recipient.
00:04:37.106 - 00:05:20.238, Speaker A: At each hop, that russian doll basically gets unwrapped by the mix node. The mix node then gets one piece of information, which is, where should I send this thing next? And then. So, in our case, it's the second mix node on top. And that one gets another russian doll, unwraps that, and finds out, well, where should I send this next? And the answer is, let's say the one on the bottom. Right. So then that packet gets the routing information and says, where should I send this next? And it should be delivered to that final person. Basically, this is kind of the essence of the mixnet and how it works, but this is not good enough if you have a sufficiently powerful adversary.
00:05:20.238 - 00:05:57.514, Speaker A: Basically, as Harry was saying earlier, if you can keep track of the order that packets enter and leave these nodes, you can see which one goes where. And there are adversaries, in fact, who, either locally or globally, can basically record the entirety of much of the Internet's traffic stream. So this is like not some kind of science fiction thing. Yeah, so you can see what goes where. And in that case, if you're the adversary, you win, and of course, we lose. So we introduce mixing. And mixing is only possible in a crowd, that is, if you only have one person or two people using this mixnet.
00:05:57.514 - 00:06:56.434, Speaker A: Mixing actually doesn't make any sense unless you introduce huge amounts of what we call cover traffic. So let's take this example that I have here. First, you can see that we have people on both sides of this thing. And actually, if they're all sending these russian dolls through the network, and they all get unwrapped at each hop, well, okay, that's really interesting, because it's actually getting harder to tell which doll is ending up where or the message, let's say, inside the last one of those russian dolls, each one where it's ended up. The other thing that we actually do is we do what's called mixing. So let's say the first three people on the left there, they all send their packets in to the first couple of nodes. Instead of those nodes emitting the packets in the exact same order, they actually shuffle them up like a deck of cards inside the mix node, and they're emitted in a different order.
00:06:56.434 - 00:07:48.718, Speaker A: So at that point, once you do a few hops, statistically, it's very, very difficult to tell which of those messages originated with which people and which message has been delivered to who, basically. And you can tune the parameters to change the kind of degree of anonymity and privacy that you can get from that. So, yeah, that's the basics of a mixednet. So we have that running right now, and I'll talk a bit about where we're at at the end of the presentation. The second technology we have is the one that deals with transaction privacy. So we have a credential system called coconut, and it's not a JWT, but the easiest thing in kind of web technology that you could think of a coconut credential as being like is sort of like a JSON web token. So I don't know if anybody who's ever programmed with JSON Web tokens, it's basically a bearer token.
00:07:48.718 - 00:09:10.502, Speaker A: You have key value pairs inside it, and maybe you have a credential that looks something like this that would give you some access fictionally to some aspects of GitHub, let's say. So this is kind of like there's keys and values and there's a signature at the end so that the token can be verified basically. And whoever has this credential can present it to some system and they can do something as a result of having that. What does coconut add on top of? Or how does it differ from an earlier technology like a JSON web token? Well, the first thing that we have is blind signing, so it's not possible. So you can actually ask for a signature from your signature authorities and you're actually blinding the content of what you're asking for with a zero knowledge proof such that they actually are not really quite sure what it is that you're actually specifically asking for, but they can still verify that what you're asking for is cool and kosher for them to give you. Another thing we can do is re randomization so you can get back this bearer token which says, I don't know, it could say something like Harry owes me 50 bitcoin, something like that. And I could get that token from these signing authorities that could verify in fact that Harry had this money in his account and he can give me the token.
00:09:10.502 - 00:10:00.282, Speaker A: Now if I then present this bearer token to somebody, they can look at it and say, well, Harry gave Dave that one. It must be Dave who's presenting this thing. But with re randomization, what we can do is we can call a method on the token and basically make an entirely new token that nobody has ever seen before, which is still valid for the same underlying message. So it's actually really magic when you see it working. It's pretty cool. Another thing we can do is selective revelation of attributes, which is a fancy way of saying we could get rid of, we could say blot out the name for example on there and just present the other parts of the thing that says I have access to a specific repository, let's say. So that's another privacy supporting technology.
00:10:00.282 - 00:10:35.602, Speaker A: And the one thing that all of these things were always possible to do before. These first three were always possible. But this last one, it was never possible to have a credential scheme like this before. Kind of the advance of coconut is that we have these decentralized signing authorities able to produce the tokens in a cooperative way. So that's kind of the big advance of coconut on earlier signing schemes. Yeah. So what could you use this for? Well, it's a bearer token, like a JWT.
00:10:35.602 - 00:11:14.500, Speaker A: You could use it for privacy friendly. You could anonymize currencies, you could anonymize data access, voting, electronic governance on chain, off chain. You could make private NFTs, you could do KYc with it. So you could say, I have the right to participate in token sale X. Cool, give me a credential for that and then you could participate in that token sale perhaps without revealing who you actually are because maybe that would be useful to you in some way. Basically, coconut is good for anything where you want to prove a right to use instead of who you are. Most of our security systems these days are based on I'm Dave, therefore I can do this.
00:11:14.500 - 00:12:07.958, Speaker A: Coconut kind of inverts that relationship and test please Mr. Validator or please Mr. Issuing authority, a test that I can do something and then after that people don't need to know who I am, they just need to know he's allowed to do it or whoever presents this bearer token is allowed to do this thing. Lastly, the last technology is that we have the NIM token. What the token does is it solves some problems that earlier privacy systems have had with scalability. So tor, for example, which is the most useful general purpose privacy system on the planet today, has about 6000 nodes and they have had six or 7000 nodes for many years. They're probably going to have 7000 nodes next week, and the week after and the week after.
00:12:07.958 - 00:13:03.794, Speaker A: Even if demand for their service goes up, they don't really have a way of incentivizing anybody to scale the system up or importantly scale it down when there's less demand for that. And people don't need to be like wasting resources by running nodes. So this is what the NIM token basically does for our system is provide those incentives and we can say it works. So we are currently running about 8500 mixed nodes. We have 25 Cosmos validators that hold the directory of which mixed nodes are in, which mixed nodes are out. So despite the fact that the system actually doesn't work incredibly well right now, one thing we can say is that we've proved an experiment which is incentives can work for getting people to run privacy infrastructure. So that's one thing that we can say for sure, which was definitely not clear when we started the project, the coconut library.
00:13:03.794 - 00:13:35.900, Speaker A: So we have this quite large network. We've just released the coconut library code that's available in go and rust. So that's just come out happily. The implementation is interoperable between both of those, and we're currently, at the present time, building that coconut into the NIM system right now. And we have plans for a cosmos module once we get it working in our own system. So that's the basic state of play with NIm right now.
