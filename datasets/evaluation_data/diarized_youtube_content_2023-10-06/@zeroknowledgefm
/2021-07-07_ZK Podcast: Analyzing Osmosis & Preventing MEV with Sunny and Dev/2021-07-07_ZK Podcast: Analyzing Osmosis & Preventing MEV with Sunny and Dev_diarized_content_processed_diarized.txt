00:00:05.450 - 00:01:05.662, Speaker A: Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. This week, Tarune and I chat with Sonny and Dave all about Osmosis Osmosis is a Cosmos zone Dex that uses IBC to allow enabled assets to be traded, pooled, and staked. We talk about their journey to osmosis, what this means for the Cosmos hub, and how they aim to provide an MEV solution that differs from the one proposed by the Flashbots team. Wanted to quickly highlight that the ZK validator, the project running validators on some key L one POS networks, is also now running on osmosis. I didn't get a chance to mention this at the time of recording as we hadn't yet confirmed that we were going ahead with it.
00:01:05.662 - 00:01:58.580, Speaker A: But I did want to let you know now that the ZK validator is live on osmosis, we are powered by our new staking partner, courseone. And so if you're thinking of staking your OsMo, you can find us in the osmosis staking interface. Now I want to thank this week's sponsor, least authority. Least authority is a leader in the security of distributed systems. They provide security consulting services, develop open source products, and contribute to the advancement of learning and research in the field. In addition to their recent security reviews of innovative projects such as Chia Network, Mina, and Bender Labs wrap protocol, they will soon be releasing a white paper on zcaps, or zero knowledge access passes. ZCaps is an anonymous token based authorization protocol that facilitates an online exchange of value while disconnecting the necessary payment data from the day to day usage service data of customers.
00:01:58.580 - 00:02:28.090, Speaker A: They have adapted the privacy pass design and implemented this for something called private storage, a soon to be launched cloud storage service designed with privacy and security features to give you control over who has access to your data. If you'd like to be notified of the ZCap's white paper and the latest security research projects, sign up for their monthly newsletter@leastauthority.com. Slash newsletter. So thank you again, least authority. Now here is our Osmos interview with Sonny and Dave.
00:02:31.550 - 00:02:38.894, Speaker B: So today I want to welcome Dave and Sunny to the show to talk to Tarun and I about osmosis. Welcome to the show, guys.
00:02:39.012 - 00:02:40.446, Speaker C: Thanks for having us on again.
00:02:40.548 - 00:02:42.142, Speaker D: Thanks. Pleasure being back on.
00:02:42.276 - 00:03:06.710, Speaker B: Yeah, and it's funny because you've both been on the show, but you've been on completely different episodes. This is the first time that you're actually here together. I had sunny on first, I believe, and we did an episode way back where you shared with me an introduction to Cosmos. I think it was the first episode we did on Cosmos, actually. And then, Dave, you came on the show for a deep ZK episode where we looked at fractal.
00:03:07.050 - 00:03:14.102, Speaker C: I think actually, maybe the first time we did it was at ECC, like two, three years ago. Remember you were doing those governance.
00:03:14.246 - 00:03:16.170, Speaker B: The combo ones. Yes.
00:03:16.320 - 00:03:17.770, Speaker C: That one was so much fun. I love.
00:03:17.840 - 00:03:20.090, Speaker B: Okay. Oh, so this is your third time on. Cool.
00:03:20.160 - 00:03:26.410, Speaker C: I guess, technically, yeah. That was one of my favorite interviews I've done because you just had such cool questions about governance.
00:03:26.570 - 00:03:34.594, Speaker B: I remember you were talking about, like, cosmos is the. Yeah. Is it the United nations? You had this interesting metaphor going on there.
00:03:34.712 - 00:03:40.500, Speaker C: Yeah, I think it was Cosmos was NATO or something and something like that. Yeah.
00:03:41.350 - 00:03:45.074, Speaker E: Do you still believe this analogy, like.
00:03:45.112 - 00:04:03.402, Speaker C: A couple years later? Yeah, I think so. Specifically, it was about the Cosmos hub. Everything that does shared security with the Cosmos hub is NATO, and the Cosmos hub is, like, the US, who's just like, helping everyone else out, but it's more voluntary. It's not this thing that you're not allowed to leave.
00:04:03.536 - 00:04:15.930, Speaker E: Why was that asking? Because what happens in a pandemic? In this analogy, do all the cosmos chains start fighting for validators with each other? Maybe validators fix vaccines.
00:04:17.730 - 00:04:34.062, Speaker B: You've both been on. I want to hear from both of you what you've been up to since those interviews and maybe how the Cosmos ecosystem has also changed and your roles in it have also changed. So, Sonny, why don't we start off with you? What have you been up to? What's new in Cosmos?
00:04:34.206 - 00:04:55.338, Speaker C: Yeah, sure. So I guess we did that maybe two years ago since then. So that was after the launch of the Cosmos hub and everything. So I've talked about that. I think what happened was most of 2019 was really spent working on getting IBC up, and most of 2020. Sorry. Was spent on getting IBC up and running.
00:04:55.338 - 00:05:13.566, Speaker C: And Stargate, which was this huge upgrade to the Cosmos SDK and SDK. V one, was this. It worked well for launching this thing, but we needed to basically build this v two where. Okay. We had these weird encoding structures in the first one, and certain things were just very unintuitive. Yeah.
00:05:13.588 - 00:05:21.246, Speaker B: I actually did a whole episode on the Stargate upgrade from, like, four different perspectives, and we heard a lot about that. I'm going to add the link to that in the show. Notes.
00:05:21.358 - 00:05:21.970, Speaker C: Oh, perfect.
00:05:22.040 - 00:05:32.370, Speaker B: Yeah. So you were part of that. I was curious, how active were you during that thing? Were you already starting to work on osmosis then, or were you focused primarily on Stargate?
00:05:32.450 - 00:05:48.346, Speaker C: I was helping a little bit on the Stargate side, but not. Yeah, it wasn't really my main focus. So what happened was, you probably heard about what we like to call Gore 2020, which is the Cosmos ecosystem's great organizational restructuring of early 2020.
00:05:48.528 - 00:05:50.494, Speaker E: Gore, Gore 2020.
00:05:50.532 - 00:05:53.200, Speaker B: I never heard that. Okay, cool.
00:05:53.810 - 00:06:18.618, Speaker C: Basically, yeah. What happened was everyone was working in this one company called Tendermint. And then in early 2020, we basically all. Basically everyone, or not everyone, the tendermint company is still there. But then a lot of people sort of left the tenderman company and started working on other. Creating new companies to contribute back to Cosmos. And what's really interesting was it was nice to see that no one left the cosmos ecosystem.
00:06:18.618 - 00:06:58.802, Speaker C: As far as I can tell, everyone's still working on Cosmos. But Zaki went and started working on through his Validator company called Occlusion, and now they're building a product. You have a lot of Chris and a lot of people, they went to the Interchain foundation and was working on Stargate from there. And so, yeah, Dave and I sort know we already had this validator that we were running for a long time, and I think we talked about that last time. And so we're like, all right. And so we're like, all right, let's just run this validator, and we'll do a little bit of open source development, just like contributing back to the Cosmos SDK in the meanwhile. And then as we got into it, we realized running validators just isn't super fun.
00:06:58.802 - 00:07:20.514, Speaker C: At least it's not for us. I know there's some people who really enjoy it, but I think we wanted to build something. I started working a lot with the flashbots team very early on, so maybe last summer. Basically, they got me really excited about mev and stuff. I'm like, wow, this is such a huge issue. And then they told me their solution. I'm like, guys, that's not a solution.
00:07:20.514 - 00:07:46.202, Speaker C: You're making the problem worse. You're, like, productionizing the extraction of mev, and it's. No, no. Okay. So then we went back to Dave, and I was like, all right, let's figure out how to know they're going to make this problem even worse. Let's figure out how to solve it. And so we spent some time trying to figure out how to reduce the mev, and we came up with a pretty good solution, and we started building it, and then along the way, we were like, okay, this is a really cool feature.
00:07:46.202 - 00:08:23.180, Speaker C: It needs a product. And so that's sort of how osmosis came about, where we sort of merged with a company called Chinapsis. They built the Kepler wallet, which is like the most popular wallet of the cosmos ecosystem. And they actually built basically the base of what osmosis code base is today at a hackathon. Like, last know, Josh was a really close friend. We worked together at tendermint for a while, and he's been in the cosmos ecosystem probably as long as I have, actually. So we sort of merged forces with them, and we're like, all right, let's launch this osmosis thing and then use it as a vehicle to add in all this front running resistance and privacy and all this kind of stuff we want to add.
00:08:23.870 - 00:08:37.486, Speaker B: Want to. I want to dig into osmosis really soon, but I want to also hear from you, Dave, what has your trajectory been? Because last time we spoke, you were, like, deep in ZK world, and I know you were also running sikka at the same time, but what was your journey to this?
00:08:37.588 - 00:09:07.878, Speaker D: Yeah, so I think the last time we talked, I was still running a Sika as validator, but back then, it was still kind of passive, where we just help with some SDK or tendermint designs, because a lot of the things are. Sunny and I had a core part of building a lot of the core infrastructure that SDK and tendermint Sunny. We provide advice on new designs there, but I was mostly focused on finishing college and doing recursive snark research. So we talked to work on fractal, and since then, I was helping out with kind of building the arcworks rust ecosystem.
00:09:08.054 - 00:09:08.602, Speaker B: Oh, cool.
00:09:08.656 - 00:09:11.786, Speaker D: You had a podcast with cartouche the other day, or maybe a couple of months back.
00:09:11.808 - 00:09:13.582, Speaker B: A few months ago. Yeah. Cool.
00:09:13.716 - 00:09:25.860, Speaker D: And so I was helping out with that and trying to build up the ecosystem in addition to working on crisp snarks. Then sometime, like mid 2020, Sunny comes to me and is like, mev, what do.
00:09:28.550 - 00:09:37.618, Speaker B: Was there a moment in there where you were also looking at ZK stuff in the context of osmosis or whatever this project was? Because I vaguely remember us talking about that.
00:09:37.704 - 00:10:02.426, Speaker D: Yeah. So I think the initial dream of this was like, let's figure out how to make a zero knowledge decks, or, like, what's the most best way to get a deck that's very privacy preserving? And we're like, okay, well, the sort of dream of literally no information about trades is public. Doesn't really work out. But how about this? How about we have everyone you can hide who is doing a trade, but the actual trade lists of trades are still public.
00:10:02.528 - 00:10:03.034, Speaker B: Yeah.
00:10:03.152 - 00:10:21.700, Speaker D: And we could do this, like we figured out a way to front running and these ordering issues, and then basically we ended up just talking to people about this and they were all like, okay, this front running thing is very cool. We want you today in ethereum. Privacy is like, yeah, interesting, but not a today problem.
00:10:22.150 - 00:10:53.294, Speaker B: Man, this is so the problem of what? I feel like we face this constantly and it's totally economic and it makes total sense. Like, there is a reason why there's priority given to some of these problems. But we've talked about this so often on the show. If privacy isn't baked in at the beginning, it's super hard to add later. But I'm going to leave hope that you will revisit it because I know that you've gone further with the MeV, but Dave, I know that you have a deep background in zero knowledge stuff, so I'm hoping you'll bring it back in at some point.
00:10:53.332 - 00:11:40.314, Speaker D: Yeah, I think the dream is, my current dream is like, there's this idea of having this, some projects trying to have computation kind of done off chain and have that computation be private. So it's kind of like Zexi model. And I feel like what might actually end up being what happens is you still have the code be public and some public input to the code, but you fully blind who's doing things. Like you break this linking. And I think that's kind of the dream I have for what happens in osmosis as well. We make a way so that maybe all these actions are public, but who's doing it? And ways to link actions other than kind of metadata or side channel leakage, of trying to figure out your strategies, ignoring those, you can't really link these together.
00:11:40.432 - 00:11:56.722, Speaker B: Got it. So I think we're at the point where we should really introduce osmosis because we're now mentioning it a couple of times. What is osmosis? I've played with it. I think it's really exciting. But tell me exactly what it is and what people can do with it.
00:11:56.856 - 00:12:19.490, Speaker C: Yeah, sure. So osmosis is a dex that we've built on the cosmos ecosystem currently. So this v one that we launched is, I would say it's basically most inspired by balancer, the hackathon project that was created like a year ago that was basically taking the balancer code base and putting it onto the Cosmos SDK.
00:12:19.570 - 00:12:20.114, Speaker B: Okay.
00:12:20.252 - 00:12:48.846, Speaker C: Yeah. And so I think that balancer has the most cosmos esque mindset of all the amms, or at least at the time it did. And what that means is the mindset is just about like, okay, everyone can spin up their own zones and they'll have their own governance and they'll compete, and the market will figure out which ones work. I think balance is a very similar idea, but applied to amms. Right. It's like, all right, give you as much flexibility as you want. All right, go make weird weighted pools.
00:12:48.846 - 00:13:18.694, Speaker C: Go make multi passive pools. And you can have multiple pools with the same pairs, and just the market will figure out which ones work out or not. And so that's why we were just the most drawn to balancer. And so we took that code base, and then we started just adding in ideas from other protocols as well. We really like the bonded liquidity that curve tries to do. And so we integrated things from that. We took a lot of inspiration from Sushi's token design and stuff and how they do liquidity incentives.
00:13:18.694 - 00:13:43.154, Speaker C: So we added that on. So, yeah, we just took a bunch of ideas from different protocols on Ethereum and like, okay, let's bring this to cosmos. Let's launch this because Cosmos needs now, and now we have it. And now this is going to be a platform for us to start iterating and adding in all of these new features that we're talking about.
00:13:43.272 - 00:13:52.466, Speaker B: Is osmosis a standalone blockchain? Is it a zone? Let's talk about how it connects into the cosmos ecosystem.
00:13:52.578 - 00:14:23.546, Speaker D: Okay, sure. So it is its own independent, like, l one. And in cosmos, kind of the popularized way of is like, you have this multichain world where every chain can talk to one another via this protocol called IBC. TLDR is like, you kind of just have both chains use, like, clients one another. You say, okay, I trust your consensus is good. So if I get a like client proof and of us finalized state, we can transfer assets back and forth. So we use this to connect to every other cosmo zone who has this enabled.
00:14:23.546 - 00:14:32.370, Speaker D: And so assets can flow in and out of osmosis via IBC, and then you can trade on osmosis and move things back out.
00:14:32.440 - 00:15:01.242, Speaker B: And one of the things that osmosis, I believe, unlocks. And maybe there's another project that did it, but at least for me, it was the first time that atoms could be automatically within a cosmos product actually traded for other cosmos network or cosmos ecosystem tokens. It's the first time that I see that, the first time that it at least becomes very easy without a centralized exchange. Is that the first project or was there anything like it before?
00:15:01.376 - 00:15:29.670, Speaker C: Yeah, it's basically the first project that does that. First IBC enabled Dex. And part of the problem was, I think a lot of these cosmos assets were having a little bit of a tough time getting added to centralized exchanges because centralized exchanges have all of this infrastructure. If you have an ERC 20, they can just press a button, probably, and it adds the ERC 20. But integrating a new chain into a centralized exchange is definitely a lot more work because they have to run nodes, they have to do all this kind of stuff.
00:15:29.740 - 00:15:37.942, Speaker B: Even if it's just like a Cosmos zone and it's using Cosmos SDK. Are they so customizable that they'd have to really work on it?
00:15:37.996 - 00:16:12.190, Speaker E: Well, they need to do an ETL on the data to be able to query it to determine provenance and stuff. And so they have to index each chain separately. I see there's a million tools that auto index the different token standards, but I'm actually surprised. It's slight tangent, but I'm surprised there isn't someone who does kind of these data management for Cosmos chains. And do you guys see that as a problem in the future for people who want to do queries or Nansen style tagging?
00:16:12.350 - 00:16:58.782, Speaker C: So the Cosmos SDK, we started adding Rosetta API integration. So that's like Coinbase's that they created. But yeah, we definitely need people to come in and add more of this because, for example, yesterday was our first reward distribution on chain and the rewards just showed up in people's accounts. And then people were like, oh, my God, how do I explain this to my tax person that I just got airdropped, $8,000 has dropped in my account and there's no transaction explaining why that happened. And so this is definitely something that from our side, we have to be improving the sort of events and logs that get output by the chain. And then, yeah, I think there's definitely going to be companies that come in now, and once the Defi is there, I think then these things, now there's an incentive to put together all of this analytics.
00:16:58.846 - 00:17:20.266, Speaker B: Now let's talk a little bit about what it is to use osmosis from a user's perspective so that people can really understand what this is and maybe what it enables. Let's start the journey from the hub, the cosmos, where the atoms live. What would a user do from there? They have atoms. What do they do.
00:17:20.448 - 00:18:12.106, Speaker D: So currently a flow is you kind of go to this osmosis website with your Kepler wallet connected and then you click on some assets page and you basically have an atoms field. If you press deposit the amount you want to deposit onto the chain, it'll do an IPC transfer underneath. And so what that means is one nice thing about cosmos is that we do have a standard for addresses and like pub keys. So I can have an address on the Cosmos hub and I can actually have an address with the same pub key on osmosis. So this assets button, when you hit deposit, what it's going to do is it's going to do this IBC transfer to move those tokens from the hub onto osmosis. So IBC is actually, I gave TLDR earlier, it's like client verification of both chains. There's a lot of details to it.
00:18:12.106 - 00:18:39.266, Speaker D: There's things called channel ids for allowing a chain to have multiple connections to another chain. And these look like a random hash, basically. So what's stored on chains actually kind of like unreadable for. What are these things? One thing we worked really hard on, or the champs folks worked really hard on, was getting this UI to be such that the user doesn't have to ever learn about the fact that channels are underneath, that you can just do.
00:18:39.288 - 00:18:44.914, Speaker B: This like IBC transfer right into that new zone. Basically, as far as I can tell.
00:18:44.952 - 00:18:56.038, Speaker C: Our front end doesn't even say the word IBC anywhere. It's literally just, it says deposit and withdraw and it's just supposed to mimic the UX that users are already familiar with.
00:18:56.204 - 00:19:37.320, Speaker B: Well, having used Kepler to also play with this, I did have to push a button that said transfer using IBC, but I was excited to do it because I'd heard about IBC for so long and I was like, oh, cool, I get to use IBC. By the way, I have a question to both of you, and this is something I've asked a few times. You just mentioned IBC. Is this like two light clients living on different zones? It's a rule set for transferring tokens across different blockchains. But is it a bridge? Is IBC like the makings of a bridge? Because I've heard it lumped in, or maybe we actually, on the show lumped it in with bridges as a type of bridge or something. But I don't know. How do you see it? Do you think of it as a.
00:19:37.770 - 00:19:55.466, Speaker C: It's basically. It is a bridge. It is a protocol for building bridges. It's a generalized bridge protocol. Right now. And by bridge, it depends on what you mean by if you. I don't know, I feel there's like a tautology where I'm going to say, if you mean a bridge is something that generalized have to change, talk to each other, then yes, that's what IBC is.
00:19:55.568 - 00:20:10.250, Speaker E: I think bridges should be classified by what their bus is. Do they need to have data availability on both sides? They need data availability on one side. Do they only do like metadata between them? So maybe actually distinguishing in that sense would be useful.
00:20:10.410 - 00:20:57.194, Speaker C: Yeah. So what IBC is, is all it knows is, hey, give me a light client proof that something exists in your state tree. That's all it cares about. Now you build higher level protocols on top of that, and one of them is we call it ICS 20, which is the ability to transfer tokens. And so that's like a higher level protocol built on top of IBC where it's like, okay, what are we proving about your state? It's like okay that you locked up tokens in this specific part of state and then I'll accept that and then mint you tokens here you can have icss for all sorts of things. You can just say like, oh, here's a proof that there's some oracle data that's on the other chain. And prove to me that, that oracle data is in the state of your chain.
00:20:57.194 - 00:21:36.966, Speaker C: And is that classified as a bridge? I don't know, but that's what IBC does. The other piece of IBC that's interesting is that it's just so standardized. The process of running a bridge is really annoying because we're actually starting to run ethereum bridges on the Cosmos hub soon. And so as a validator we have to start running Ethereum nodes and all this kind of stuff. But with literally you can make a connection between two chains by sending two transactions. You send a transaction on chain one and send a transaction on chain two and you have a bridge. Just the fact that how fast and simple it is, I think that's what's going to be really game changing for IBC.
00:21:37.158 - 00:22:06.050, Speaker E: One question, what's the destructor process for IBC? If I want to close a bus of data being sent between two chains, I imagine it's something like you send one transaction that's like open receive from remote chain x. Remote chain x makes a transaction that's like send disk data or metadata across. But when you close things, is there like a process? What's the destructor process? Is there a lot of state on both chains.
00:22:06.470 - 00:22:12.566, Speaker D: So I guess, are you talking about as an individual user or we talk about kind of the entire channel or the bus itself?
00:22:12.748 - 00:22:29.062, Speaker E: Yeah, I guess the bus itself, because I'm trying to think about, let's say you're in osmosis and I want to route trades between different chains and there's many different routes. Right. I may want to deprecate some edges in that sort of pairs of trades that you're allowed to make because they're inefficient.
00:22:29.126 - 00:23:15.290, Speaker D: Or I could be wrong, but I believe the base IBC protocol actually doesn't really do destructors in the sense where if I open this bus, it's like I don't really have to actively maintain too much. What I'm maintaining is like a last header of the other chain or a last block hash. And then after some period of time it becomes too old, like you have weak subjectivity concerns and then you need governance of the host chain to re update the hash. The reason for this is know proof of stake. You have this whole weak subjectivity issue where if I'm trying to glancing to your chain and it's been too long, I can't actually know, is this the real chain or not?
00:23:15.440 - 00:23:41.410, Speaker C: So the IBC connections can never be closed. And that's the header part. And then the ICS 20, those take place on the channels on top. And so whether those can be closed is kind of up to the ics where the ics can say, okay, we have a methodology for deciding to close for deprecating a channel or not. I don't believe the ICS 21 has one, but you could build an ICs that can be closed.
00:23:41.990 - 00:23:45.106, Speaker B: You've used this a few times, but ics, what does that stand for?
00:23:45.208 - 00:23:46.594, Speaker C: Interchange standard.
00:23:46.792 - 00:24:37.106, Speaker D: Okay, so you can imagine this like, you know how for normal networking things there's UDP and then everyone kind of builds their own, or not everyone. A lot of people build their own protocols on top of know. Now we're seeing quick, which is very exciting actually getting deployed. Then you have these things for video formats, et cetera, that are these kind of protocols on top of UDP where it's like, okay, well here's this one way of communicating. But me and you, we know we're going to send data to more advanced format so we can kind of do some tricks on the structuring and coding of things to get better efficiency. And so that's kind of like the analogy for ICSSR where it's like, okay, well we have this communication route called IBC and then we can build together like me and other chain can add more things on top if we want. We and just standards for.
00:24:37.106 - 00:24:40.842, Speaker D: What are these more things we're building are called the ICSs.
00:24:41.006 - 00:24:48.818, Speaker C: Same as ERCs. Right. ERCs are just standards for how smart contracts talk to each other. ICSs are going to be standards for how chains talk to each other over IBC.
00:24:48.914 - 00:24:54.714, Speaker B: Awesome. That's actually a great comparison that helps give a good clear picture of what that is.
00:24:54.912 - 00:25:01.062, Speaker E: Yeah, actually maybe a little bit back to osmosis. How do you deal with routing across chains?
00:25:01.126 - 00:25:32.498, Speaker C: Right now we only do direct connections. Right. Know, this might be a controversial opinion, but I think that the Cosmos hub vision of being the router for all chains is wrong. I think that all chains will connect to every other chain. You'll have many to many connections and everything will. If you want to send tokens from one chain to another, what you will end up, let's say you have a token from the one third chain and you want to send that from a to b. Well, I think what's going to happen is they're going to unwind that first hop and then you're going to send the next hop.
00:25:32.498 - 00:25:39.000, Speaker C: I really don't think connections are going to be or assets are going to be like multi hop. I think most of them are going to be one hop only.
00:25:39.450 - 00:25:49.590, Speaker D: I think multi hop is in some way a premature optimization unless we get this world of thousands of different blockchains, not hundreds, like actual thousands or tens of thousands.
00:25:49.750 - 00:25:57.034, Speaker E: Yeah, I mean, I guess in ethereum it makes a lot of sense because there are actually millions of tokens on uniswap.
00:25:57.082 - 00:25:57.390, Speaker D: Right.
00:25:57.460 - 00:26:14.660, Speaker E: And so you do actually have to care about this. But I guess the idea here is your best unbiased estimate for how the market develops is you're going to have a small set of cosmos chains, like sub 1000 that you have pair to pair or connect to hub trading basically.
00:26:15.430 - 00:26:25.686, Speaker C: Yeah. I think that osmosis should be able to connect to 1000 chains by itself. It shouldn't have to go through another router to do that. Yeah.
00:26:25.708 - 00:26:39.466, Speaker E: Actually, are there any limitations on size to how many dexes you can create? Or is there extra residence state that's sort of common to a registry and the registry can't be too big or something like that.
00:26:39.648 - 00:27:01.886, Speaker D: So actually the state for every IVC connections, not that bad. It's basically what you need as a light client. So, proof of stake, it's basically just last verified header proof of works, actually really the same thing. Last header that you believe is finalized, which is not that much data. Like a header should not be more than a kilobyte. So it's like, can you store a kilobyte for every chain?
00:27:01.998 - 00:27:09.640, Speaker C: Yeah. And you don't need to keep the history. You could just prune away anything that's older than three weeks or whatever the unbonding period is.
00:27:10.010 - 00:27:13.202, Speaker E: Right. But you don't have to store data per pair.
00:27:13.266 - 00:27:13.494, Speaker C: Right.
00:27:13.532 - 00:27:15.426, Speaker E: Like it's not n squared storage.
00:27:15.458 - 00:27:19.970, Speaker C: Are you talking about for the DeX or are you talking about for the IBC connections, for the.
00:27:20.060 - 00:27:41.242, Speaker E: Sorry, for the like, how much state do you like? I'm just curious, if I were to scale this at a million chains, would osmosis have some performance or cost degradation? At a billion chains, would it have that? Or at a 10,000? Just to get an idea of how to think about it relative to Ethereum dexes, where it's like there's like millions of tokens.
00:27:41.306 - 00:27:55.826, Speaker C: Yeah, I mean, I think the solution is you end up having base pairs, right? And that's just always been the solution and so on. Osmosis, right now, basically there's two base pairs being used. There's half the pools are basically using atom as a base pair and half the pools are using Osmo as a base.
00:27:56.008 - 00:28:00.322, Speaker D: So it is permissionless. Anyone can add more base pairs, but so far no one's.
00:28:00.466 - 00:28:10.986, Speaker C: There are some pools already that have been added where it's just know, AkT DVPN or something. But it's know. You see, most of the liquidity is still concentrated on the atom. Osmo pairs, actually.
00:28:11.088 - 00:28:19.034, Speaker E: Is anyone else doing sort of liquidity mining for providing liquidity to osmosis pools other than the osmosis ones themselves?
00:28:19.152 - 00:28:46.494, Speaker C: Yes. Well, it's going to start probably, I don't know. It depends on when they send the transaction, either today or tomorrow. But the Akash network team is going to be adding additional incentives and the chain is designed to do this where they just have to send the funds into a contract and then it will automatically start distributing at the same time with all the awesome rewards. And I think there's a couple other teams who are also the AKT team. I think there's like two or three teams that are all trying to add in external incentives soon.
00:28:46.632 - 00:28:56.838, Speaker B: You just mentioned the sort of on a smart contract is osmosis, can someone deploy something onto that zone? In that zone, is it smart contract enabled itself?
00:28:57.004 - 00:29:07.050, Speaker C: Yeah, that's why I hesitated when I said the word contract. I used the term because it's probably something that most people are familiar with, but no, it's not actually a smart contract.
00:29:07.470 - 00:29:08.026, Speaker B: Okay.
00:29:08.128 - 00:29:47.174, Speaker C: Currently all the logic on osmosis is like part of the node code base, and so you can't add additional functionality. I guess we're looking into how to add more customizability, especially for the Amms, because one of the core goals of osmosis was to have very customizable amms. And so to do that, we're probably going to need some sort of VM. We want to be more staged in our rollout for this, and so we want to make it more a very restricted sort of VM where it's like, okay, you're only allowed to deploy a contract as long as it meets the interface that we expect an Amm should.
00:29:47.212 - 00:30:08.366, Speaker D: Have, that kind of thing. It's really like a restriction for helping people who want to get extra functionality. It's not like a real restriction on you, because whatever you build for a VM, it's almost certainly going to be turing complete, and you can hack in whatever type of functionality you want, because Turing complete. Just change inputs, outputs as you please.
00:30:08.468 - 00:30:22.002, Speaker E: Are you actually planning on making it like a full VM, or is it going to be an interpreter or something like a tiny register, mini register machine? How do you think about what the minimum viable version of this looks like?
00:30:22.056 - 00:30:50.442, Speaker D: So what we were last looking at there is this new kind of VM language kind of popularized in cosmos called cosmwasm, which is you give it this WaSM code, you locally compile it to your native architecture. You trust this compilation process isn't going to introduce any non determinism across do have, I guess it's a VM in sense that the VM, upon reception of code, compiles it locally and executes that compiled code.
00:30:50.576 - 00:30:51.114, Speaker C: Yeah.
00:30:51.232 - 00:30:56.814, Speaker D: So then it's using, I don't really know how the WASM register system works, but then the compiled code uses your.
00:30:57.012 - 00:31:08.420, Speaker E: Yeah, no, I mean the wasm interpreter does have sort of some mapping to registers. I was just. Yeah, where you're thinking about that, because I do think that problem can get hairy if you.
00:31:09.190 - 00:31:20.914, Speaker D: So the reason we just wanted to start from actually more interpreted code is it's actually hard to enforce any sort of API structure on the compiled code. Know, with trying to get security guarantees.
00:31:21.042 - 00:31:21.382, Speaker C: Yes.
00:31:21.436 - 00:31:25.560, Speaker E: Don't look at the Solana virtual machine if you want to see a bad example of this.
00:31:27.130 - 00:31:50.074, Speaker C: Before we started using cosmosm for this, we were actually looking at this thing called Selgo. It's by Google, and it's like this interpreted, non true complete math interpreter. It's pretty easy to write math functions into it. And that's why we're like, all right, amms are just math functions. Right. And so let's just use that. And then what we realized over time is amms actually have to be way more stateful than we were expecting.
00:31:50.074 - 00:31:58.050, Speaker C: And so that's why the whole Selgo, we switch it out with something that is more like a traditional contracting system, which is cosmosm.
00:31:58.470 - 00:32:09.160, Speaker B: I know that in the Cosmos hub world, there's also this gravity Dex. There was a hub proposal around this. What is that, and how does it relate to what you're doing?
00:32:09.530 - 00:32:10.038, Speaker D: Yeah.
00:32:10.124 - 00:32:23.130, Speaker C: So gravitydex is an amm that's being deployed on the Cosmos hub directly. Okay. Osmosis and gravitydex kind of got birthed around the same time, like, near the end of last year.
00:32:23.280 - 00:32:26.554, Speaker B: Who's the team behind it? Who's pushing that?
00:32:26.752 - 00:32:35.226, Speaker C: It's a team called b harvest. They were our validator on the Cosmos hub. I think they actually recently got acquired by tendermint.
00:32:35.338 - 00:32:35.902, Speaker B: Okay.
00:32:36.036 - 00:32:38.814, Speaker E: Weren't they doing staking derivatives at some point?
00:32:38.852 - 00:32:41.486, Speaker B: And then they stopped and ZK stuff, I think.
00:32:41.588 - 00:32:47.300, Speaker E: And ZK stuff sounds like a very buzword hopping type of.
00:32:48.710 - 00:33:14.566, Speaker C: Yeah. So when we started doing osmosis, we were like, hey, let's put this on the hub. Let's go build the decks for the hub. And then as we went into it, we just realized for multiple reasons that that's just not the right way to do it, because, for one, we just want to be able to upgrade way faster. The hub is a very much slower thing. Our goal was, like, we want to be able to upgrade the chain on a monthly basis if we wanted to. And that's just something the hub doesn't.
00:33:14.598 - 00:33:28.494, Speaker B: Do, because if you did it through the hub, you'd actually have to do it with voting and valid. And here you have. But with osmosis, don't you also have to do it with the validators? Or do you feel like, is there still sort of, like a developer key that lets you move?
00:33:28.532 - 00:34:03.546, Speaker C: No, there's no developer key, but it's just about the expectations that were set. We've told every validator that runs on osmosis be like, hey, expect to be upgrading every month. If you're not okay with that, then please don't run a validator on osmosis. And that's sort of like, the hub is meant to be this more conservative chain, and osmosis, it's a science lab, right? We're pushing this idea that it's meant for experimentation. We're going to go just way faster. And then on top of that, we also just needed access to much lower level stuff. Like we can't do the threshold decryption stuff.
00:34:03.546 - 00:34:35.970, Speaker C: We need to go change how tendermint works a little bit. And so having our own chain is useful, is really important to be able to move fast on those kind of things. And then finally, obviously, just bootstrap a deck. You need some sort of liquidity mining scheme. And it's really hard to build a good liquidity mining scheme on an existing token like atom that's already so distributed. If we're building this Dex, we want it owned by the lps and make sure they're incentivized and part of the governance process. And so the best way to do that is to issue a new token that you give to the LPS.
00:34:36.410 - 00:34:48.962, Speaker B: What is the plan for a connection to Ethereum? How would that happen for osmosis? I know that there's like a bridge being built, but wasn't that bridge between the hub and Ethereum?
00:34:49.106 - 00:34:55.722, Speaker C: Yeah, so there's a team called Altea. They're putting together something called gravity bridge, which is.
00:34:55.776 - 00:35:00.806, Speaker B: I think I was mixing those up, actually. Sorry. Yeah. Okay. That's why it's confusing.
00:35:00.838 - 00:35:26.514, Speaker C: No, because it's called gravity Dex and gravity bridge. Yes. Okay, so gravity bridge is this bridge from a Cosmos SDK chain to Ethereum. It's the name of the software. And then the hub is planning on deploying it to connect to Ethereum, but then different chains can deploy it as well. For example, Somalier, which is Zaki's project, they also are using gravity bridge, but they're adding in more extensions on top of it as well.
00:35:26.632 - 00:35:30.834, Speaker B: So you guys, osmosis would just deploy the gravity bridge? Potentially.
00:35:30.962 - 00:36:08.434, Speaker C: Potentially. So, I mean, the original idea was we wanted to just go ahead and use the gravity bridge of the cosmos hub. But we're a little bit worried right now about the credible neutrality of the cosmos hub, because if you have this, this is kind of what I've always been pushing where it's like, hey, guys, don't put this Dex on the hub because you're going to harm the imagine Ethereum foundation built their own native Dex. Would people have built dexes on top of Ethereum? Probably not. So I don't know. I think that hopefully gravity decks spins off onto its own chain eventually, and then osmosis would be happy to use the gravity bridge of the hub, but we'll see. And if not.
00:36:08.434 - 00:36:09.886, Speaker C: And maybe we'll just end up deploying.
00:36:09.918 - 00:36:18.310, Speaker E: Our, you know, there is some precedent for this. Vitalik did basically write on the Uniswap forum, hey, you should just copy.
00:36:19.050 - 00:36:19.800, Speaker C: Right?
00:36:22.730 - 00:36:27.542, Speaker E: And I feel like Uma sentiment has not quite recovered since.
00:36:27.676 - 00:36:36.682, Speaker C: Yeah, I like tweeted that where I was like, all right, so, yeah, it was literally just like he was saying, copy Uma. It was very interesting, more or less.
00:36:36.736 - 00:36:47.210, Speaker E: I mean, without, you know, in more polite terms, perhaps. Well, uma sucks at liquidity, so uniswap, you should just copy them, was basically the TLDR.
00:36:47.370 - 00:36:50.590, Speaker D: You have high market cap, users do all the good ideas.
00:36:51.250 - 00:37:06.920, Speaker B: So I want to go back a little bit to this user journey. We started on that user journey. We got them using Kepler, sending something over IBC. But I want to go back to what happens when someone arrives in like, what do you do?
00:37:08.090 - 00:37:18.658, Speaker D: Like, what do you want to do? So Dex now have the ability to add liquidity, to stake your tokens or to trade on Dex. It's got a permissionless manner.
00:37:18.834 - 00:37:29.814, Speaker C: It has the same functionality as you can imagine on uniswap today. There's three buttons at the top, right, there's the trade pool and govern or something. I think they have Gov.
00:37:29.862 - 00:38:08.738, Speaker B: Right, but that's a slight difference. Is that because it's a proof of stake chain of its own? That's what's kind of a little different. At least when I was looking at the interface where it also looks like the interface of any proof of stake network where you're actually using voting, you're adding liquidity and you're trading. I guess it's the liquidity adding and the staking in the same interface that I hadn't seen before. Yeah, well, I guess I have seen it. When you have these, like, I know ave you can stake as well, but I know that in this case there's actually an underlying blockchain. And so you're validating, when you're staking with somebody, you're actually validating this whole blockchain.
00:38:08.914 - 00:38:29.742, Speaker C: Yeah. Right now there's like two options. If you have Osmo, right, you can go like lp it, or you could go stake it. And this is sort of like a choice that you have to make right now. But over time, we're actually going to make these two things are going to become more and more combined. So we're working on something called code names right now called reverse staking derivatives. We'll probably come up with a better name.
00:38:29.742 - 00:38:36.274, Speaker C: I'm thinking super fluid staking. So here's why it's called reverse now.
00:38:36.472 - 00:38:50.802, Speaker E: Do you realize that your choice of naming makes you sound like boring tradfi people? Because repurchase agreements are sort of like staking agreements, and reverse repo is like when the central bank kind of does the opposite.
00:38:50.866 - 00:38:55.560, Speaker C: Now you sound like we'll have a new name. Don't worry, I'm working on the name.
00:38:56.890 - 00:38:59.720, Speaker E: It's like a little too, like trad five for you.
00:39:00.510 - 00:39:06.380, Speaker C: I completely agree. I'm liking the term super fluid somehow. And I want to use that because.
00:39:06.830 - 00:39:10.586, Speaker E: I think it comes from Dan Elitzer. I guess he gets credit for that, right?
00:39:10.608 - 00:39:31.118, Speaker C: Yeah. So another reason is because I really love Dan's post, and it's basically based off of that. So let me explain what it is first. So what it is, is in normal staking derivatives, and it's also usually called liquid staking. What people are proposing is you go ahead and you stake your coins, you get back some sort of derivative asset.
00:39:31.294 - 00:39:34.306, Speaker B: Like IOU to that, and then you.
00:39:34.328 - 00:40:17.182, Speaker C: Go use that asset in Defi. But the problem is, this breaks the entire security model of proof of stake, right? We spent all this time designing proof of stake and all these lockups and everything, and this just undoes it. So the reason I've been calling it reverse is we're putting this in the opposite direction. What if we take our staking coin, use it in defi, take our defi assets and stake them. So in this example, for osmosis specifically, it would be, imagine you have Osmo and something else, bitcoin. You add it to a liquidity pool, you get back an LP share, and this LP share has some underlying Osmo value. If you were to withdraw it, you could get out a certain amount of Osmo.
00:40:17.182 - 00:40:55.038, Speaker C: And so now we're saying, well, let's just go ahead and stake this LP share and have it be treated as the underlying Osmo value. And the chain can query this every single block if it wants to, like, say, what is the conversion between this LP share and the Osmo? Obviously, it wouldn't be like every pool can do this because that would get out of hand. But the chain can basically vote to say, all right, these pools, their LP shares are allowed to be staked. And so now if you LP now, you can be both lping and staking at the same time. And obviously, a lot of this is actually heavily inspired from Tarun's work as well. He has a whole thing about how you can borrow against LP shares. Yeah, sounds cool.
00:40:55.124 - 00:40:56.480, Speaker E: Just needs a better name.
00:40:57.490 - 00:41:02.430, Speaker D: Superfluid has problem. Superfluids are nice. There's zero friction, but if you stake.
00:41:03.970 - 00:41:26.834, Speaker E: There is also super solid, which is. It's actually been very hard to construct these things. This is why I left physics. This took ten years to fucking resolve this thing. But there was this guy who claimed to have made super solid. Helium four and super solids are like, interesting. Like, superfluids have no friction, but they kind of rotate forever.
00:41:26.834 - 00:41:47.918, Speaker E: Kind of like almost perpetual motion machine. Like, super solids are like super liquids. Except imagine an ice cube in a little circle, and you push it, and then it just rotates forever. But it stays as an ice cube. It doesn't melt or it doesn't like have all the atoms are basically. Anyway, sorry, slight tangent, but you may want to look into names like that.
00:41:48.004 - 00:42:00.002, Speaker C: I'll look into super solid, but superfluid is cool because it's like liquid staking. This is superfluid staking. And then it is taking Dan's idea of like, okay, using the same collateral for many things. And that is literally what we're trying to do here.
00:42:00.136 - 00:42:06.722, Speaker E: I wonder if any layer one would do mean not saying that you aren't. I just mean like one that is mean.
00:42:06.776 - 00:42:38.778, Speaker C: I want to be able to expand this to more and more defi assets. I mean, ironically, I think LP shares are probably one of the harder ones to start with, but it's what our chain is. But you can imagine it's much easier to do this with something like C Osmo. If you had OSMo on compound, it's much easier to take that c asset and have that be staked. LV shares are probably much harder because of the impermanence, loss and all that kind of thing. I think there's a whole new paradigm here that can be done where how we can generalize this and have it be used for all these different defi assets that are based on OSmo can still be used to stake.
00:42:38.874 - 00:43:09.580, Speaker D: The main hard question here is how does the chain reason about the risk premium? It should be know one compound OsmO say, should not really be worth. Suppose there's one Osmos collateral for this should not be worth a full OSmo because there's some correlated concerns here, right? Like there's liquidation. That's not caught in time. It could actually not be withdrawn for full OSmO back. It could only be, maybe it's 0.9. And how do you reason about this as chain governance? Seems actually pretty hard.
00:43:10.190 - 00:43:24.790, Speaker B: You have a validator set of your own. That's the security of the osmosis chain. But is there any shared security at all between you and any of the tokens that are coming across IBC? Or is this completely separate?
00:43:24.870 - 00:43:39.410, Speaker C: Right now there's no shared security. I mean, this is also kind of why I was upset about gravity deck, because I was like, guys, you guys should be working on shared security. We need to use it. But at the moment, yeah, osmosis is just self sovereign, and then all the chains or other chains are also self sovereign.
00:43:39.990 - 00:44:04.874, Speaker B: Does this not bring up that issue or that fear of, like, if there is a corrupt zone and it has deployed IBC and it starts to trade with other IBC enabled assets, but it's corrupt, so it's bullshit. Could that somehow taint or screw up some of these trades? Basically minting things that aren't there and having some. Could it be a rug pull at some point?
00:44:05.072 - 00:44:42.614, Speaker C: I don't think so. Because only the people who hold or who are exposed to the asset from that chain are the ones who are affected, right? Because let's say you hold atoms on osmosis and then this other chain goes corrupt. They can't do anything to atoms. What they could do is they could go ahead and mint infinite of the other token and then drain the liquidity pools and take out all the atoms. Yes, but as being an LP of a pool with that token, you're still exposed to that. And so if you're exposed to it, it's the same as having held the token on the other originating chain itself. Right?
00:44:42.732 - 00:44:54.394, Speaker B: You're saying, like, the atoms, like, the other assets wouldn't be affected. Like, those chains wouldn't be affected, but the LP tokens in osmosis and the LP token holders would be if they had that corrupt one.
00:44:54.512 - 00:45:35.430, Speaker D: Only for the people of that pool. To phrase a bit differently, it is a fear in the kind of earlier overview IBC we were giving. But there's a separate thing in IBC that says, know, basically tokens from one zone originating from one zone can't be confused with tokens originating from another zone. So only tokens that are from there could have this confusion. So, like, I don't know, zone C could not mint atoms. Or they can mint some tokens, localized their chain. It has the same name because names are internally namespaced, but it can't be confused on osmosis or another chain as though it's from the hub goal of ics 20.
00:45:35.500 - 00:45:45.114, Speaker C: And the styles of ICSs that we want to design are such that we want to localize anything that like any chain failure, it should be localized to.
00:45:45.152 - 00:45:48.330, Speaker B: People who are exposed to that chain.
00:45:48.830 - 00:45:51.146, Speaker C: They have to be opt in. Right.
00:45:51.248 - 00:46:24.454, Speaker B: I want to now ask a question about what is an asset on osmosis, though. I'm just realizing it's not that the atoms are actually on osmosis, they're just derivatives of atoms through IBC, right? And so you'd have derivatives of this crappy chain. Would there be any way to block, like, if that happened? Mean, I don't know, maybe that's impossible. Or any way to gauge if all of a sudden there's this flood of seemingly more tokens than there should be coming into osmosis from this corrupt chain? Would there be any signifier to stop that?
00:46:24.652 - 00:47:24.726, Speaker D: So there is one safeguard thus far that's already deployed, which is that suppose I sent over the hub, sent over 1000 atoms to osmosis. If there was a bug and osmosis had some corruption, it could not send back 1001 atoms. Okay, the hub keeps track that we had 1000 tokens flowing out this way, and so you can only send back 1000. But then the chain you sent to could still do attacks for changing who owns it, but they could never mint more. And there's some ideas for boosting this where it's like, okay, maybe we want to rate limit transfers back and forth for some reason, because it gives you time to catch a failure. Some ideas for doing some more tracking of whale addresses or something, but these are still very much in kind of spec phase, and they're not such that they're always good. Whereas for this one of ensuring it's max supply per zone, max can be sent back to me, that one's deployed everywhere.
00:47:24.726 - 00:47:27.354, Speaker D: So there's almost like no reason to not have that.
00:47:27.472 - 00:47:43.946, Speaker C: So because of this restriction, if you're one of the boomers who's keeping your atoms on the cosmos hub and not bringing them to osmosis, you will not be affected. If osmosis fails, for some reason, only the people who actively chose to bring atoms into osmosis will be affected.
00:47:44.058 - 00:47:44.942, Speaker B: Got it?
00:47:45.076 - 00:47:55.362, Speaker E: And remember, this is true in if you uniswap moved completely to west. And so once they did that, it basically meant that you have the exact same issue.
00:47:55.416 - 00:47:55.682, Speaker C: Right?
00:47:55.736 - 00:48:05.890, Speaker E: If wes failed, then goodbye everything. And that's not just uniswap. Sorry, all the amm sees west except curve. But that's because it's using mainly stable.
00:48:05.970 - 00:48:22.358, Speaker C: I guess the fact that atoms are one of the two base pairs right now, osmosis could be worried of, like if the cosmos hub gets corrupted, almost all the or half the pools are based off atoms and if you could just mint infinite atoms right now. Yeah, you could drain like half the pool.
00:48:22.454 - 00:48:28.654, Speaker B: But I guess your assumption here is the security model there is decent enough to make that your base for.
00:48:28.692 - 00:49:34.260, Speaker E: Now, if we get back to kind of like some of the biggest problems with amms and constant function, market makers in general, it's sort of the problem of sandwich attacks and other things, but I guess that's like the most prominent one. And that brings us to sort of mev or minor extractable value or vev validator extractable value. Both of these terms are kind of mev and vev would annoy physicists. One is vacuum expectation value, and the other is like mega electron volts or Miller electron volts or millo electron volts. Yeah, it's just that usually whenever you're measuring an electron volt, it needs to be giganto. But one interesting thing is, I think there's been this kind of huge philosophical debate about MeV. Does it have to exist? Can we actually really find a cryptographic solution? Should we bother trying or should we only have an economic solution? This, of course led to this very public fight between Phil Dyan and his.
00:49:34.260 - 00:50:02.014, Speaker E: You know, usually in academia, people don't get along with their advisor, but it's usually their advisor just shits on them at conferences. But here it's like his advisor is like writing this public news article, being like, my student sucks effectively. And so you're on a very particular side of this argument. So I think it'd be really great to hear your views, what influences why you think it is sort of like the way you believe. And then I'm framing it openly so.
00:50:02.052 - 00:50:06.560, Speaker B: You can maybe do explain both sides too, for listeners might be.
00:50:08.450 - 00:50:29.250, Speaker C: I mean, for content. I definitely agree with his advice is Ari Jules? Yes. Yeah. So I definitely agree with Ari on this one. Yeah. Let me explain the situation first. So what is Meb miner extractable value? What it is is it's the idea that whoever the block proposer is so in proof of stake, it's validators and proof of work, it's miners.
00:50:29.250 - 00:50:40.046, Speaker C: The block proposer has certain powers that no one else has, and they can use those powers in order to extract value. Right. And get some edge.
00:50:40.098 - 00:50:41.594, Speaker B: Aka front run.
00:50:41.792 - 00:51:23.490, Speaker C: Front running is one. In my classification of Mev, I would include things like time jacket. Remember those things where it's like, oh, back when people used to use the timestamp as a source of randomness in Ethereum, it's like, okay, if you manipulate that, I consider that minor extractable value. Like anything that the miner can do is part of it. Now, front running is probably the biggest class of MeV attacks. Before that, there's what I call a transaction ordering censorship attacks, which is the idea that the proposer can choose what gets included in a block and what order they're included in a block. Within this, there's two categorizations.
00:51:23.490 - 00:52:05.266, Speaker C: I call it absolute positioning and relative positioning. Absolute positioning is just saying that you're not trying to base yourself off of other transactions in a block. You're just trying to have some absolute position in a block. And this would be something like if there's liquidations happening, right? And someone has to be the one to trigger the liquidation and they get some profit. By doing so, the block proposal is able to say, guarantee that they will be the first one in the block, and that way they can always, that's extractable value. And this type of mev, we have ideas for how to restrict it, but it's not what we're focused on at the moment. Maybe we'll come to that in the future.
00:52:05.266 - 00:52:44.238, Speaker C: And I think that there's actually a reasonable philosophical argument. I think there's a good debate to be had there, where it's like, okay, someone has to be doing these liquidations and they're not extracting value from anyone. It is really a positive sum thing where they're performing a service for the network, and they're just sort of making sure they get to be the ones to do it and profit from it, but they're not actively harming anyone else. But then there's the other form, which is what I call relative front running, where you're trying to base your transaction's position off of someone else's transaction. And so this is what sandwich attacks would be like. That where you see a trade coming in, a big trade, you could go.
00:52:44.244 - 00:52:50.482, Speaker B: Ahead and pump up the value or push down, do something to the price, and then you can profit from it.
00:52:50.536 - 00:53:23.190, Speaker C: And for this, I really do not see how there's a strong argument to be made that this is ethical or I just don't see it. This is like a privacy concern to me. Right. I really do see this relative front running as a privacy concern more than anything else. It's like if I'm able to hide what I'm about to do, I should be doing that. And so the threshold decryption solution that we're building is really meant to address that relative front. So to your point about Phil, honestly, I don't understand where they're coming from right now.
00:53:23.190 - 00:53:42.130, Speaker C: In his MeV, what do blog post, there's a project called Equitas. And they do, like, a bunch of, like, they're focused more on the absolute front running, I think. Or not really both. Yeah. They're taking a different solution. We're taking, like, a privacy focused solution on front running. They're taking a more fair ordering solution, which.
00:53:42.130 - 00:54:09.660, Speaker C: They have some ideas there. But Phil puts this chart, and in the equitas thing, they have four or five different parameterizations of their protocol, and each of them have different outputs. And he's, you know, which of these should we do? They all have trade offs. How can we decide? And then it's like, phil, every single one of those are better than what's going on currently. You can't be like, oh, there's too many choices that are better than the current to be, like, a reason not to fix what's going on right now.
00:54:10.270 - 00:54:21.438, Speaker B: What is the philosophy of flashbots, though, in regards to that? What's the difference? What you're describing is how they're critiquing these models. But, yeah, what are they doing?
00:54:21.604 - 00:54:51.910, Speaker C: Okay, so front running and mev, there's, like, the MEV itself, there's value being extracted from users, and then there's side effects to meV. Right? And this is like the insane gas spikes and the consensus instability and all this kind of stuff that happens from side effects of meV. And I think the flashbots team is really focused on minimizing the side effects of MeV, but they're not actually focused on tackling the MEV itself, I think.
00:54:51.980 - 00:55:01.286, Speaker D: No, this has been an understatement. Right. For things like sandwiching. It does fix that. Whereas you have this layer of all these transactions are encrypted via centralized sgXs.
00:55:01.398 - 00:55:05.680, Speaker C: Which is not right now, by the way. They don't use SGX right now. They just send to.
00:55:07.170 - 00:55:32.278, Speaker E: There's no. For the record, and there's a lot of controversy about this today on the flashbots discord. They are extremely centralized service that is attempting to decentralize via SGX or potentially some other routes. But they already have spam issues, because they only have three nodes, and they're running into basically civil resistance issues right now.
00:55:32.364 - 00:55:33.750, Speaker D: This is the whole reputation.
00:55:35.850 - 00:55:48.790, Speaker B: But, like. So they were thinking of using SGX, but are they using SGX to perform the same kind of thing that you wanted to do with threshold cryptography? Like create a private area where people can't see what's coming next, and therefore not do the sandwich?
00:55:48.950 - 00:56:16.740, Speaker E: The auction should be private. So there's an auction that takes place, although they solve the auction greedily. So it's not like the optimal solution when there's multiple things presented right now. And that that's also led to some attacks against it. But if the auction is private, then no one can kind of see who the winning sandwicher is or try to front run them right before. And right now it's kept private by they run the node, and you effectively trust them on that.
00:56:17.190 - 00:56:27.110, Speaker D: If you trust there that they run the node, you don't really have details of how much sandwich opportunity is there. You don't get to read everyone else's transaction before you get to make your bid.
00:56:27.790 - 00:56:30.650, Speaker B: So they act as the privacy entity.
00:56:30.990 - 00:57:09.140, Speaker E: Okay, yeah, effectively right now, and obviously for a variety of reasons, some legal, some philosophical, some economical, you really want to not be centralized. But they wanted to get to market really quickly. And to be fair, they were able to aggregate an insane amount of hash power because of that, because they were the first ones to do it. And these cryptographic mechanisms are quite unproven in practice and production. It's like snarks. Are we really sure we're ready to actually deploy this on hundreds of billions of dollars? Probably not.
00:57:10.170 - 00:57:45.362, Speaker C: Give them credit. I believe part of their roadmap is they want to use the SGX to become this sort of private mempool over time, that each miner can just have their own SGX based mempool, and normal users can use this. So there's something called Mistx right now, which is like an overlay on top of uniswap where it uses the flashbot system. And so, like I said, no SGX right now. But eventually, if they just do SGX, you could use that as a way of creating a private mempool. Normal users could submit transactions privately, but then we have all these reasons why SGX doesn't work. So Dave can maybe go into that a bit.
00:57:45.416 - 00:57:53.314, Speaker D: Yeah, I mean, SGX is kind of what it's doing is saying, okay, here's this compute device, which, I mean, actually.
00:57:53.352 - 00:58:03.894, Speaker B: I would say, I think our listeners probably know the SGX battle at this point. Okay, pretty well, like it's a trusted enclave. There could be a backdoor, I guess.
00:58:04.012 - 00:58:28.414, Speaker C: Well, the thing that we actually are is for us, it's like, what is the security budget here? Right? It's like, okay, how much will it cost you to break an SGX? Maybe it'll cost $10 million. You hire a team of ten top notch engineers, researchers, and give them a year, they could probably break it, right? And it's like, okay, well, Mev is so much more than $10 million right now, and it's worth it to break.
00:58:28.452 - 00:58:32.170, Speaker B: The s. I have a feeling breaking SGX might be a bit more expensive.
00:58:32.250 - 00:58:43.858, Speaker D: Than depends what we mean by break. Because what you need is just need to get the key out of one and we see, or get one to be able to do whatever you want.
00:58:44.024 - 00:58:50.790, Speaker C: You just need to break one SGX. That's it. You just need to get the key out of one. And now you're able to de anonymize the entire mempool.
00:58:51.210 - 00:59:25.466, Speaker B: Let's shift here, because I want to talk about the threshold cryptography, because going back to the beginning of the episode, that was like one of the core ideas you had. And something that, as far as I know, is not yet in osmosis, but will be eventually. Yeah, good. Okay, so let's talk about what does that do exactly? And I know we don't have too much time in the episode left. And I will point people out of video and like a talk that you gave recently at a ZKV event that we did. So there is some other documentation on that. But yeah, tell us, how does threshold cryptography actually help with Mev?
00:59:25.578 - 01:00:00.734, Speaker D: Sure. If all transactions are cryptid before they get into a block, then that means if I'm someone on the p to p layer, I can't know what's about to be in a block, therefore, or I can't see what the actual content is here, so I can't front run it. I can't donate this content to where algons, which is what sandwiching is. So if it's fully blind, then gets it to a block, block gets finalized, then it gets decrypted and the decryption process kind of trustless. I'll get back to that in a second. Then we know that I had no front running or no relative front running possible. So the flow is.
01:00:00.734 - 01:00:27.346, Speaker D: Then I spread an encrypted transaction. It gossips around, but the fee parts public. Miners use the fee check. There's a fee enough for this amount of bytes. Then they get into a block, the encrypted blob into a block. Block gets finalized sometime later, transaction gets decrypted and then executed. This prevents anyone from front running me because before it was finalized, all they got to see was an encrypted blob.
01:00:27.458 - 01:00:47.978, Speaker B: Yes. And this is this private aspect, adding privacy at the point of, in the mem pool, I guess. So that ordering cannot be changed or you can't see something and try to get in front of it. Is it super different when it moves from proof of work to proof of stake? Is there any difference in the proof of stake world for this?
01:00:48.064 - 01:01:20.518, Speaker D: The big difference is around finality. So all proof of work algorithms fundamentally have some probabilistic finality, or you can kind of try to overlay at some degree. We just call this probability especially negligible and call it term mystic. Whereas in the proof of stake world, some chains have guaranteed finality, some don't. So the key thing is, depends on your solution. But to get like max security, you want it to be decrypted after finalization. But to some extent that's maybe not needed in that.
01:01:20.518 - 01:01:25.330, Speaker D: Suppose we have the 1% case, happens where got some rollback.
01:01:25.410 - 01:01:35.370, Speaker C: Okay, yes, happened on ethereum, by the way, someone reorg and took something that was like a flashbotch bundle. Once it got revealed, they reorg and used it.
01:01:35.520 - 01:02:49.082, Speaker D: And so if it gets sufficiently bad, then you could have in this public finality, someone might say, okay, it's worth it for me to try attack this, but at least you're still getting protection most of the time. But when you have guaranteed finality, you can kind of make stronger claims that we're always getting it, given our security assumption holds. And then you kind of multiple solutions for how do you encrypt at the mempool layer? One is SGX's, one is a thing called timelock crypto, where it's like, okay, I'm going to make an encrypted transaction, and that anyone trustlessly can decrypt it after running some sequential process on an ASIC for a few minutes. The third one, which I think we think is the best, is like threshold decryption, where you have some committee with some weights, and they collectively can decrypt a transaction, like where we all, two thirds of us come together, do some things together, and then we can get the plain text out. And so that assumption is pretty similar to what is the tenerment proof of stake assumption, which is that, okay, well, if two thirds of nodes, we trust them all collectively, or rather, yeah, we trust two thirds collectively to be act honestly, whereas if they didn't act honestly, we could detect it and slash them. So if we make this trust function, then we can get this decryption, we trust them to do this properly.
01:02:49.226 - 01:03:26.046, Speaker C: That's one of the things that the threshold thing is, you do need a committee, and that's why it makes a lot of sense in proof of stake, or at least in tendermint. Esque proof of stake, because we have an obvious committee to give this job to. Timelock probably makes more sense if you don't have a committee to give this to. But timelock has all these ux concerns with it, where you need to make sure the time locking process is sufficiently long such that it doesn't get decrypted in the mempool. You need to make sure that everyone has to be using the time lock crypto in threshold. It's kind of an optional thing. You don't have to, there's no reason if you don't want to be threshold encrypted, you don't have to, but in time lock it doesn't work like that.
01:03:26.046 - 01:03:35.246, Speaker C: You need everyone to be using that system. As long as you're okay with having a committee, which obviously we are in tendermint threshold is by far like the proper way to do it.
01:03:35.348 - 01:03:52.118, Speaker D: Well, as for instance earlier, we have to empirically validate. There is extra bandwidth happening, we think, so preliminary things. We think that the bandwidth is going to be fine, but we do have to wait till we see it. Empiricism does have some value and stuff. Let's wait till we see that the bandwidth empirically was not a problem.
01:03:52.204 - 01:04:02.390, Speaker E: I mean, I think the main thing is just does the latency affect ux effectively in the long run? Do you think that's a valid trade off for the end user?
01:04:02.470 - 01:04:22.582, Speaker D: So it's actually like the latency shouldn't be much worse given spam assumptions. It shouldn't be much worse than what's going on today on osmosis, which is the sense that your block currently is executed after it's finalized. But we can engineer the threshold encryption so that it's done as soon as the block is finalized.
01:04:22.666 - 01:04:28.754, Speaker C: As you know, Tenderman already sort of pipelines where unlike ethereum, where it's, I.
01:04:28.792 - 01:04:41.270, Speaker E: See you're going to overlap the validators voting on the mem pool. Do you separate inclusion and ordering? Do they vote separately on the set of transactions included versus the order?
01:04:41.340 - 01:05:15.834, Speaker C: No, a proposer includes them and then they just vote on the ordering that the proposer did. So we're actually building something called vote extensions, which is like, our team proposed this to tendermint. We're extending the functionality that Tendermint has. And with vote extensions, you can have every validator contribute additional data along with their consensus vote. So this is where the decryption shares are going to be shared. So that's how we have them happen at the same time. And the other one that we also want to do eventually is actually, do you have helped me come up with a better name for this one as well? This was called joint proposals.
01:05:15.834 - 01:05:17.860, Speaker C: No, it's kind of lame name. We need a better name.
01:05:19.190 - 01:05:22.974, Speaker E: Instead of being tradfi, you now sound like you're like at the Pentagon.
01:05:23.022 - 01:05:57.326, Speaker C: Like the joint, the joint proposals idea is just saying that every validator can just include a couple of transactions in their vote, and then the next proposer is required to at least include those transactions in their proposal. And then it's okay if they overlap a little bit, but they include those and then they can add in more if they want. But it's like they have to at least include the ones that the validators added in, so that way it prevents it. So one proposer isn't the only one who has access to inclusion. All the validators can contribute to inclusion a little bit.
01:05:57.428 - 01:06:22.646, Speaker D: It's actually kind of interesting sense of both in terms of the idea we talked about earlier about, there's different proposer powers. Like, one of them is choosing absolute order transactions, and the second is for censorship reasons. If you have all the validators getting to collectively add things to a block, you now just need in some real sense, as long as at least a third of them aren't trying to censor you, your transactions should be able to get it.
01:06:22.828 - 01:06:50.766, Speaker C: Going back to how we define Mev, which is like the power that a single proposer has. The way I guess we think about MeV and solving it is move as much of that power to requiring a two thirds threshold. So our threshold decryption is a system that takes, okay, one proposal can't do it. You'd need two thirds of colluding validators to do something. Or same thing with this joint proposals. Right? Like, one proposal doesn't control inclusion. You need two thirds of validators to.
01:06:50.788 - 01:06:55.570, Speaker E: Like, do you think this can ever scale to more than 1000 validators?
01:06:56.230 - 01:07:02.510, Speaker D: There's some inherent, like n squareds in here that might become like n log ns if we're lucky.
01:07:02.590 - 01:07:11.586, Speaker E: Well, I just feel like you have n squareds, but you're making the constant factor potentially a lot bigger as n gets larger by adding in the ordering.
01:07:11.698 - 01:07:15.800, Speaker B: But do you need 1000 validators? Like, is that a goal of the project?
01:07:16.170 - 01:07:19.350, Speaker E: Hey, don't read any eth two marketing material.
01:07:20.010 - 01:07:29.254, Speaker C: Well, the main n squared is still just from the bandwidth side and like the p to p stuff. But as far as I can tell, the threshold side shouldn't not have any n squared.
01:07:29.382 - 01:07:31.050, Speaker D: We do in the key setups part.
01:07:31.120 - 01:07:44.842, Speaker C: Okay, the DKG, yes. The DKG is the hard part. We're working with the Anoma team actually to collaborate, to put together a DKG. That will suffice for what we're trying to do. So you're right, the DKG is the bottleneck.
01:07:44.906 - 01:08:12.406, Speaker D: Yeah, it's actually not ordering here. Just give you an n squared if you want to talk about fair ordering. I don't know if want to, but actually one of my problems with fair ordering is the sense that fair ordering doesn't really move you to this two thirds assumption. The sense that you're kind of relying on some mempool information to do this. But you have no auditability here, where if I lie, no one can detect me lying. It was very hard to detect. So we have to assume that just two thirds aren't lying.
01:08:12.406 - 01:08:53.586, Speaker D: Whereas in proof of stake, we've come to those two thirds assumption. Because suppose two thirds do act dishonestly, I can make a double sign evidence and slash you. But doing this for fair ordering is actually really complex, or complex in the sense that you need to dump a lot of data from your. Like, you have to add a lot of extra bandwidth that's n squareds again, and for all full nodes as well, in order to get these proofs. And it's kind of like why we also dream instead of like fair ordering. Maybe the moves, random ordering, where we try to say like a proposer can kind of have some influence of choosing encrypted data within a block, but not even their order, their order is randomized somehow.
01:08:53.778 - 01:09:10.700, Speaker B: Osmosis is live. It's been live. I mean, as of recording, I know this is going to come out in a few weeks, but as of recording, it's been live for about a week. How have you distributed tokens? What does this project look like? And yeah, should people actually know about, because I don't know that everyone who has Adams knows about.
01:09:11.070 - 01:09:59.178, Speaker C: So, you know, the goal was we wanted this native token and distribute it to all the lps and people contributed into the protocol. And this is sort of what, look at uni distribution, valid distribution. Everyone does this and they show that, okay, look, after four years, this is what the decentralized distribution will look like or whatever, but at t equals zero, it actually extremely centralized where the team basically owns all the tokens. And that just does not work for proof of stake, right? Because you need to have a decentralized distribution from t equals zero. And so this is why we did this airdrop to atom holders to be like, okay, here's your invitation to come be part of osmosis and contribute. But it also helps us get this distribution. And I don't know, I think it worked really well, actually.
01:09:59.178 - 01:10:32.386, Speaker C: So I don't know. People keep saying that airdrops are dead, but I don't know, looking at what happened with osmosis, I don't think that's true. I think it's because of how we did it. So one of the cool things we did was we invented something called a quadratic fairdrop. And so what that means is we actually airdrop to people based off of the square root of the number of coins in their account. So obviously we couldn't tell people about it beforehand, otherwise people would split. But this was a nice little thing where it's like, what we expect is obviously, it's like the atom whales are going to be getting the whale share of the LP rewards.
01:10:32.386 - 01:10:39.254, Speaker C: So we wanted to put more weighted toward the smaller atom holders as well. And that's the point of doing that. Quadratic nature.
01:10:39.382 - 01:10:53.390, Speaker E: So maybe this is another sort of philosophical question, but do you think it's possible to make a fair distribution mechanism where the issuers don't hide information about the mechanism?
01:10:54.770 - 01:11:25.154, Speaker D: I'm currently pretty suss about this because it almost feels like if the definition of fair is like, it's based off identity, and until there's some real decentralized identity schemes that we trust or reputation networks, then I always have this fear of sibling or trying to game the identity system. So until we have identity or reputation networks that we are pretty happy with, I don't see how you do it for when the definition of fair is based off of, are you distinct humans?
01:11:25.202 - 01:11:25.558, Speaker C: Right?
01:11:25.644 - 01:11:28.838, Speaker E: I just mean, do you think there's an impossibility result to that?
01:11:28.924 - 01:11:39.146, Speaker C: I don't know. I actually have not thought about this much. But I think that there's like, what about off of people's degen score? Right? You could do an airdrop of.
01:11:39.168 - 01:11:41.902, Speaker E: Well, now you're trusting the DGEN score creator, though.
01:11:42.036 - 01:11:42.720, Speaker C: Yeah.
01:11:43.810 - 01:11:48.026, Speaker E: Who, of course, is now incentivized to pay for play for DGEN scores.
01:11:48.058 - 01:11:53.726, Speaker C: Right. Right. I have to think about it, but I've never thought about this question before. And so I think that's it.
01:11:53.748 - 01:12:08.910, Speaker E: Sorry, it was a little out of left field, but I thought it was like, because you mentioned that you guys purposely hid this so that people wouldn't do all this stuff. It was kind of like, oh, well, if you just make a tiny extension, maybe it's just impossible to do without doing that.
01:12:09.080 - 01:12:35.626, Speaker D: I think. I disagree in the sense that it depends on what identity you want to be rewarding or what's fair. If I choose some extremely easy suppose passport holders of some country, and then as long as there's some, or there's some database I can use to verify a passport, that would work. This is when we try to go to these decentralized definitions of fair, that it gets much harder. But I think if we had some web trust like model, or robust reputation networks.
01:12:35.818 - 01:12:44.420, Speaker C: There's a tweet sitting in my draft which says Dex, front running resistance privacy, web of trust. My five year plan.
01:12:48.870 - 01:13:00.018, Speaker E: But there's a turtles all the way down recursive question here, which is, can you bootstrap the identity or web of trust without having some secret information or randomness?
01:13:00.114 - 01:13:06.262, Speaker C: Yeah, so, okay, this is going to such a derail. So I built a web of trust.
01:13:06.316 - 01:13:07.990, Speaker E: Sorry, Henrik, in advance.
01:13:09.530 - 01:13:28.218, Speaker C: I built a web of trust at a hackathon, like, three years ago, and it was know we won. Haseeb was the judge, actually, and he's like, wow, this is cool. Question. What's the incentives? Why would anyone do this? And I'm like, good question. I don't know. And it took me, like, three years to figure it out. And I solved it when I saw circles.
01:13:28.218 - 01:13:31.662, Speaker C: Circles is circles Ubi. I don't know if you've had them on.
01:13:31.796 - 01:13:32.622, Speaker B: No, I haven't, actually.
01:13:32.676 - 01:13:35.918, Speaker C: Like, you should have them on. Coolest project. Most underrated.
01:13:36.014 - 01:13:38.546, Speaker E: Well, the problem you had Martin on.
01:13:38.648 - 01:13:43.010, Speaker B: Oh, from gnosis, we didn't talk about it. I didn't know. He's behind and knows.
01:13:43.350 - 01:14:18.798, Speaker C: Okay, it's his side project. But what it is is they built this decentralized Ubi that's based off of a web of trust. But I think they're too focused on the UbI side of it right now. I don't think what they've realized is that they just created an incentivized web of trust, a decentralized, incentivized web of problem. The way that they designed it is they parameterized it in such a way that they're trying to build a ubi. But if you reparameterize it to be this incentivize, early adopters and yada, yada, yada, I think you can actually build a proper web of trust. That's very hard to game.
01:14:18.798 - 01:14:29.540, Speaker C: And I think there's something really cool that could be done there. And that's why the web of trust, I think there's a lot of privacy, things that need to go into making a web of trust work properly. And that's why it's the last on the list.
01:14:30.870 - 01:14:50.378, Speaker B: Okay, what the heck is Ion? I feel like everyone's asking. So ion is this token that is in osmosis, and it has a very similar graphical depiction as Osmo, the native token. And no one knows what it is. Do you guys know what it is?
01:14:50.544 - 01:14:51.594, Speaker C: I don't know what it is either.
01:14:51.632 - 01:14:53.020, Speaker B: You don't know what it is either?
01:14:57.150 - 01:14:58.620, Speaker C: I don't know what it is either.
01:14:59.310 - 01:15:02.122, Speaker B: It just randomly happened. Okay.
01:15:02.256 - 01:15:09.886, Speaker C: I woke up one day and it's like, wow, I made this GitHub commit at 04:00 a.m. I don't know what I was doing last night, but all right, I guess this is a thing now.
01:15:10.068 - 01:15:12.810, Speaker B: Oh, really? Okay, so is this. You don't know.
01:15:12.980 - 01:15:16.100, Speaker E: Don't blow up Sunny's spot as a magician all.
01:15:18.630 - 01:15:19.042, Speaker D: Had.
01:15:19.096 - 01:15:27.460, Speaker E: He has some psychological in my sleep impairments, and then he just doesn't want the world to know.
01:15:27.910 - 01:16:07.474, Speaker C: I think it's really cool to see what the community is going to try to do with it. I think there's like an entire ion community right now, and I think they're trying to figure out what is this thing. I think there's a lot of people drafting governance proposals for adding utility to ions, but in a way that's very symbiotic with Osmo as well and with atoms. I had this tweet that I tweeted earlier, which was like, the father, the Son, and the Holy Spirit. It's like, adams, osmo, and Ion. And it's like, what is the Holy Spirit? I've spent time, I think I went through the Wikipedia page yesterday of the Holy Spirit, and I still don't understand what it is.
01:16:07.592 - 01:16:17.300, Speaker E: Sonny is going to be a cult leader and ion is the entry to his cult. You must own this much ion to join the Sonny cult.
01:16:21.130 - 01:16:39.370, Speaker C: I'm working with the Commonwealth team right now. The Commonwealth team, they actually building a forum for osmosis where pool specific forums. So people are lp. They can chat there. But I also asked them to like, hey, can you make a telegram group? That's limited by who's only by ion ownership.
01:16:40.850 - 01:16:41.658, Speaker B: Whoa.
01:16:41.834 - 01:16:44.382, Speaker E: If only we had the telegram open.
01:16:44.436 - 01:16:45.150, Speaker C: Network.
01:16:48.610 - 01:17:09.430, Speaker B: Could have linked in. All right, so, Dave, Sunny, Tarun, thanks so much for coming here and having this conversation, exploring osmosis. This has been super interesting and very excited about the project and congratulations for launching it so smoothly. And, I mean, at least from where I was sitting, it looks like it's going really great.
01:17:09.580 - 01:17:13.270, Speaker E: Thank you so much yeah, you guys inspired me to write some shit.
01:17:15.610 - 01:17:26.530, Speaker B: Woohoo. Cool. All right, so I want to say thank you to Andre, the podcast producer, Henrik, the podcast editor, and to our listeners, thanks for listening.
