00:00:07.690 - 00:00:57.934, Speaker A: Welcome to Zero Knowledge, a podcast where we talk about the latest in zero knowledge research and the decentralized web. The show is hosted by me, Anna and me Frederick. This week we sit down with James Prestwich and Tarun Sheetra. Once again, we chat about the recent events around flash loans and we generally catch up about some of the goings on in the space. But before we start in, we want to say thank you to this week's sponsor, Newsifer. Newcypher is a cryptography company that builds privacy preserving infrastructure and protocols. The company aims to offer accessible, intuitive, and extensible runtime and interfaces for secrets management and dynamic access control.
00:00:57.934 - 00:01:28.238, Speaker A: The company is currently looking for an engineering lead to work on a new open source cryptographic product they are building from the ground up. You'll get to work on a lot of cool primitives like fully homomorphic encryption and zero knowledge proofs. Newsypher are headquartered in San Francisco, but they are a remote first company. For more about their work, have a look@newscypher.com. That is N-U-C-Y-P-H-E R.com. Or check out the link in the show notes for more about the role. So thank you again, newsypher.
00:01:28.238 - 00:01:43.694, Speaker A: And now here's our conversation with James and Tarun. So we are here at SBC, the Stanford Blockchain conference, with our friends Tarun and James. Welcome back to the show, guys.
00:01:43.892 - 00:01:44.986, Speaker B: Hi, Anna.
00:01:45.098 - 00:01:46.110, Speaker C: Aloha.
00:01:47.570 - 00:01:59.266, Speaker A: Last time we spoke with you, or last time I spoke with you was in Osaka. We actually did an episode with Giorgios, who sadly is not here at the Stanford blockchain conference. And I think we're all a little.
00:01:59.288 - 00:02:01.940, Speaker C: Sad that he's not here 100%.
00:02:02.310 - 00:02:05.378, Speaker B: I miss Giorgios. But we do have Frederick this time.
00:02:05.464 - 00:02:06.002, Speaker A: Exactly.
00:02:06.136 - 00:02:06.782, Speaker B: Yes.
00:02:06.936 - 00:02:11.430, Speaker C: We went from the southern part of Europe to the northern part of Europe.
00:02:12.170 - 00:02:26.682, Speaker A: Both of you have been on the show, actually, I think twice or three times each. So some of our listeners will know you, but I think it is definitely worth it to do very quick intros, just to brief them on who you are.
00:02:26.816 - 00:02:37.870, Speaker C: Hi, I'm Tarun. I founded a company called Gauntlet, and we do sort of economic stress testing and threat analysis for layer one and DeFi protocols.
00:02:38.930 - 00:02:48.286, Speaker B: My name is James Prestwich. I'm the co founder of a company called Suma. We work on interoperability and cross chain protocols for layer one chains.
00:02:48.398 - 00:02:50.766, Speaker A: And I hear you're also an oracle of sorts.
00:02:50.878 - 00:02:54.660, Speaker B: Tarun's been trying to tell me that, but I really don't believe it.
00:02:55.270 - 00:02:57.250, Speaker A: What is James an oracle of?
00:02:57.400 - 00:03:46.434, Speaker C: So um, a little bit of color on this is that there's basically been these attacks. Well, attacks. I put quotes around attacks. There's kind of a weird combination of poor economic incentives with logic bugs, as opposed to kind of smart contract bugs that are unintentional. And these attacks basically took advantage of the ability to borrow a really large amount of money with very little collateral upfront. And James has been advocating using these in cryptocurrency systems and smart contracts for many months, because the person who made the idea in the beginning kind of didn't take it to its conclusion. And there was some code online that was half finished for doing it.
00:03:46.434 - 00:03:51.320, Speaker C: And James was always like, someone needs to do this. And he got his.
00:03:53.210 - 00:04:39.698, Speaker B: You know, for historical context, flash loans started as marble protocol. This was the first implementation that I know of that did this. So the team at marble works for compound now, so they're working on a completely different thing. And the marble code base existed and was relatively unmaintained and forgotten about until pretty recently. Flash loans got deployed a while back, have built up a little bit of a capital pool, an amount of money that would be significant to you or me, but is, in the grand scheme of finance, not all that much. But it's only in the last week that we've seen them actually used in practice for real fascinating economic events.
00:04:39.794 - 00:05:04.286, Speaker A: Okay, so this is this flash loan concept. I think the majority of this episode is going to be about exploit. Basically, we're here together to talk about some things that have happened recently. We have a few ideas to cover. I think this sort of exploit around flash loans is the one we want to start on. But why don't we first define a little bit more clearly, what is this flash loan? What is that?
00:05:04.388 - 00:05:57.518, Speaker B: Well, flash loans are one of the few things that seem to be unique to blockchain finance. It's something that doesn't really have an analog in traditional finance. And the idea is basically that because a transaction in Ethereum takes up zero real time, borrowing money for the duration of a transaction should be free. And because there's essentially no risk to the lender, because the contracts enforce that the loan is repaid in the transaction, and there's no opportunity cost to the lender, the actual cost of that loan is zero. And so, hypothetically, you should be able to borrow any amount of money for the space of one transaction for no cost. Anyone should be able to do this at any time.
00:05:57.604 - 00:05:58.794, Speaker A: And that's a flash loan.
00:05:58.842 - 00:06:00.250, Speaker B: And that's a flash loan.
00:06:00.410 - 00:06:10.850, Speaker A: Is there any sort of historic? Are there flash loan type things elsewhere, because you just said this is like crypto specific, but does it come from somewhere else?
00:06:11.000 - 00:07:27.434, Speaker C: There are things in traditional finance that do vaguely resemble this. So one thing James alluded to is that when you're taking a loan, one of the majority of sort of the majority of the component of risk that you're measuring is the duration risk. So if I'm a lender, if I give you a loan for 30 years versus 1 minute, those should have very different prices, I should charge you different fees. And there is this kind of idea in finance that as that time goes to zero, so if you could do the loan instantaneously, then it should have no duration risk because I'm getting things back. The problem with duration zero is that you need to trust that all of the things that the person is borrowing it for actually complete and they can repay the loan. And in the normal world, this would be as if you went to your bank and said, hey, I want a $500,000 loan to buy a house, and if I don't win the house, you get the loan back, right? In the real world, there's duration risk no matter what, because you need to deal with humans who are going to put a bid in on a house, et cetera. But in cryptocurrencies, the fact that your smart contract can execute these things and only executes and borrows the loan if the conditions are met, allows you to ameliorate this trust.
00:07:27.434 - 00:08:01.798, Speaker C: Central banks do do things like flash loans, but they do it basically because they're printing money, they're changing a rate of inflation, and then they basically go and immediately sell against that rate in the open market. So the US Fed might say, hey, we're increasing the Fed fund rate by 25 basis points, but then instantly go and sell in like the euro dollar or treasury curve a ton against that. So that averages out to zero. And there's a sense in which that has a similar duration, lack of duration risk, kind of.
00:08:01.804 - 00:08:52.950, Speaker B: The reason that this is possible and interesting on chain is that when you make a transaction in Ethereum, you're acquiring the global exclusive right to update the state of Ethereum, so nobody else is allowed to make any transactions during your transactions execution. And so it's like you go to your bank and you say, halt the entire financial system until I have bought this house or given you your money back. So this is why it's something that is unique in chains. But when you phrase it that way, it kind of shows you that the loan may be free, but the right to take out that loan, the right to halt everything else going on is going to be expensive.
00:08:54.170 - 00:09:47.686, Speaker C: Yeah. So I guess maybe to add a tiny bit of historical context, what this sort of attack resembled is something called the Soros attack from the 1990s. And what happened then is George Soros, this hedge fund manager, realized that the british government, the british central bank, basically was pegging their currency to the German Deutschmark. And he believed that this was incorrect because there should have been more of a fluctuation. But the british bank was artificially keeping their exchange rate constant because Germany is a net exporter to Britain and Britain's a net importer. And so what Soros did was he borrowed a gigantic loan. So I think his hedge fund size was maybe $100 million, but he was able to aggregate, like $6 billion of capital, which sounds like a lot for an individual, but compared to a central bank, that's not like a gigantic amount.
00:09:47.686 - 00:10:25.106, Speaker C: But then he basically cornered the market on Deutsche mark's first pounds by buying up $6 billion of that asset. The british government was sort of forced to break the peg. They couldn't afford to keep the peg up because the market wasn't functioning, because he basically bought up all the supply, and then no one could. They couldn't hold what they were trying to do. And then once that happened, the pound devalued, and he had sort of a short position externally. And this whole thing happened in one ethereum transaction. And that's basically what this kind of famous thing, someone, whoever did this, figured out how to do it, kind of.
00:10:25.288 - 00:10:32.360, Speaker A: What is the name of this thing that we're talking about? Has it shaken out enough that there's some term for what just happened?
00:10:33.050 - 00:10:34.310, Speaker B: Is there a term for what?
00:10:34.380 - 00:10:38.460, Speaker A: Like the fulcrum attack? The fulcrum exploit, maybe.
00:10:40.830 - 00:11:05.730, Speaker B: Yeah, the fulcrum exploit is a good name for this specific instance of it. Okay. Typically we call these Soros attacks because they always remind us of the pound and George Soros. And we use that name because it's an attack that is only available to people who have insane amounts of money. Usually, yes.
00:11:05.800 - 00:11:06.370, Speaker A: Usually.
00:11:06.520 - 00:11:45.998, Speaker B: Well, that's what's so interesting about flash loans is that George Soros was able to do this because he could leverage $6 billion. Right. And he could have a direct fight with a central bank in the market. Not everybody has that capability in the traditional financial world. The thing that's so interesting about flash loans is that once they have a lot of liquidity on chain, anyone who can write a transaction, who can write a fairly complex smart contract can execute these attacks, but it's kind of a.
00:11:46.004 - 00:11:52.902, Speaker D: Stretch to call it an exploit or an attack. It's a good trade, part of the system it's designed.
00:11:52.986 - 00:11:54.030, Speaker C: It's a great trade.
00:11:54.110 - 00:12:23.130, Speaker B: It's a very good trade. In the Fulcrum case specifically, though, they failed to put sanity checks on their pricing, so their system actually allowed the person to go into the red and keep open a position that should have been closed. So in the fulcrum case specifically, we should probably call it an attack. But the general case, the Soros case, it's a good trade.
00:12:23.710 - 00:12:52.514, Speaker A: Okay, let's go through the steps of what actually happened. We talked about the flash loans, but there were other projects that were actually involved, or this attacker, or exploiter or smart trader, whatever you want to call him, her. They used a number of tools in order to do so, and I've seen it written up a number of times on Twitter. I was amazed at how it turns into seven steps or something like that. It's quite clear. So why don't we cover that?
00:12:52.632 - 00:12:57.266, Speaker C: It's a Buzfeed article. Seven easy steps for you to win in profit.
00:12:57.378 - 00:13:00.200, Speaker A: Number six will blow your mind.
00:13:02.810 - 00:13:26.158, Speaker B: Yeah, it might be, like, a little difficult to go through every step and also pretty boring. But we can point to the critical thing here is Fulcrum is a lending protocol, right? So you're supposed to put down collateral, and it allows you to borrow against that collateral, and the amount you borrow has to be less than what you put down.
00:13:26.244 - 00:13:26.880, Speaker C: Okay.
00:13:28.850 - 00:14:30.670, Speaker B: So the core issue is that Fulcrum would allow you to go to outside markets like Kyber to source trades for the stuff you're borrowing, and it would allow you to manipulate your position. But Kyber sources liquidity from other on chain venues. And so the Kyber price can move significantly depending on what's available. And Fulcrum failed to sanity check the Kyber price in certain cases. And so the attackers set up a manipulation where they could get more money out of Fulcrum, because Fulcrum would pay any Kyber price that came back, even if it caused Fulcrum to pay out more tokens than they had borrowed. So they were able to get more tokens out of Fulcrum than value they put in as collateral.
00:14:30.830 - 00:14:36.486, Speaker D: And I think in the end, they made it out with something like $350,000.
00:14:36.588 - 00:14:40.246, Speaker B: Right. And the second attack got out with about 650,000.
00:14:40.268 - 00:14:44.402, Speaker C: And neither of those were actually optimal.
00:14:44.546 - 00:14:45.334, Speaker B: Right.
00:14:45.532 - 00:14:58.346, Speaker C: So there's quite a bit of optimization on the first one. You could have actually gotten much closer to a million dollars. And the second one, I think was kind of close to the optimum was like 800.
00:14:58.528 - 00:15:17.230, Speaker B: Right. So the core thing is just that Fulcrum was not properly checking prices, and so it resulted in a situation where it paid out more money than they actually had borrowed. So you took tokens that were from the fulcrum pool and paid them out to the attacker almost directly.
00:15:17.390 - 00:15:49.402, Speaker A: So I found, actually just found one of the tweets that summarized it not into seven points, but six. And I wonder, I mean, I think it is actually worth it to say it on air just so people kind of can follow what we're talking about. So the idea here was that someone took 2.7 million in a flash loan on DyDX protocol. They put 5.5 eth on compound finance. So like half of, or almost a little over half of the eth on compound and borrowed against it.
00:15:49.402 - 00:15:59.102, Speaker A: 112 WBTC. They then went and shorted WBTC on BZX. I hope everyone follows these.
00:15:59.156 - 00:16:00.494, Speaker C: That's fulcrum, by the way.
00:16:00.532 - 00:16:14.938, Speaker A: That's fulcrum. And then they dumped 112 WBTC on Kyber uniswap to trigger the short. They then paid back the loan and made profit.
00:16:15.054 - 00:16:42.470, Speaker B: Right. So the critical path there is that the short on BZX used Kyber's very illiquid market that the attacker was able to manipulate and did not sanity check the price. So it created a situation where the collateral did not cover the amount of money BZX paid out to the attacker.
00:16:42.550 - 00:16:53.700, Speaker A: What would it mean? They shorted WBTC? How did shorting that. What trade did they do after that that allowed them to pay this back? Actually, that's not completely clear to me.
00:16:54.230 - 00:17:14.440, Speaker B: So the way Kyber and Uniswap and a bunch of these on chain automated market makers work is that you can push the price anywhere. As long as you have enough WBTC or ether, you can push that price all the way up to infinity or all the way down to next to zero.
00:17:15.450 - 00:17:29.194, Speaker C: I'll add one tiny comment on that, which is you need to actually have both assets to do this trade, and you can't actually go to infinity or zero, but you can go arbitrarily close. And how close you go makes your cost go up to infinity as you try to go.
00:17:29.232 - 00:17:47.380, Speaker B: Right. But because WBTC in Kyber and uniswap is a very small, illiquid market, the costs are much lower than they would be for eth or dai or most other tokens. So because that market is so thin, your dollar goes a long way in moving the price around.
00:17:49.670 - 00:18:01.554, Speaker A: Shorting WBTC, did they buy it back then to pay back the compound finance loan, then the 112 WBTC would be a lot cheaper.
00:18:01.682 - 00:18:33.150, Speaker B: Right? So the way these typically work is that you move the price one direction and then you go and you abuse fulcrum, and then you already move the price that one direction. So you already have that asset, you go and move the price right back, and then you pay back compound. So you're entering into like a stack here, right? You're borrowing, you're shorting, you're moving, Kyber, you're resolving the short, you're unmoving, Kyber, you're unborrowing.
00:18:34.390 - 00:18:40.740, Speaker A: And where's the money sitting then at the end of this, what currency is it sitting in?
00:18:41.830 - 00:18:47.134, Speaker B: Ether. Okay, they got ether from the fulcrum pool.
00:18:47.182 - 00:19:41.894, Speaker C: And so the one question I think that always confuses people is who are the main losers in this somehow, you know, the accounting has to be zero sum eventually, right? And the main losers are the uniswap pool holders. So the people who are in the WBTC ETH pool, as well as the fulcrum pool lenders. So these on chain lending protocols work by having basically people lend their tokens to a contract. So they lock up some tokens in a contract and then borrowers, as, as James said, kind of post collateral, and they borrow against it. And when borrowers default, basically the loss is socialized over all the people. So let's say each of us put in 25% of a pool and a loan is made for 5% of the pool or for 4% of the pool, and then that loan defaults, then each of us loses 1%.
00:19:42.012 - 00:19:42.680, Speaker D: Right.
00:19:43.370 - 00:20:53.390, Speaker C: So the weird thing I think that is kind of always a little bit complicated in these systems that people don't realize is that these losses are not. There are ways that losses can happen that don't even have to come from defaults or from someone manipulating a price. You also have multiple parties involved who have to actually have incentives to ensure that when the contract does go underwater, that collateral that has defaulted can be sold or can be converted to something that's more liquid. And so I think in the case of compound versus bZx, compound relies on using what's known as a liquidation incentive. So in the liquidation incentive, basically, let's say Anna has $150 worth of Ethereum and she needs to buy a microphone. And unfortunately, the microphone salesperson only takes Ethereum or only takes USD. So she goes to compound, she goes and borrows $100 worth of stablecoin by posting her $150 of ethereum collateral up.
00:20:53.390 - 00:21:43.366, Speaker C: Now suppose Ethereum's price goes down relative to usd to $100. Now you're $99.99. Now your collateral is in default because the system has lent you $100, but it only has $99 worth of collateral. So in order to get rid of this net liability, which these over collateralized loans can't ever be in the state of having a net liability, they basically auction your collateral. Indicator compound is not auction. There's an incentive where someone can call a function, call in maker, it's called poke. But in compound it just has like a normal name where you can basically get, basically, if you're the first one there, you give a wallet that has at least 5% away, you basically get a discount.
00:21:43.366 - 00:22:09.494, Speaker C: That's like 5%. So let's say your collateral is worth exactly $100. It's about to be liquidated compound. The contract sells your collateral for 95 USDC or 95 die. And so anyone who has that can buy the collateral and they get a discount, they're getting 5% off. So if they can sell it quickly enough and not incur too much in trading costs and transaction fees, then they've made a profit. And these are the keepers of these systems, these liquidators, and these mechanisms for incentivizing people to do this.
00:22:09.494 - 00:22:42.960, Speaker C: And one of the reasons maker and compound have been able to grow so big is they actually have a small but healthy set of these keepers and liquidators. And the question that people always wonder is like, how big can these things grow if they're very reliant on keepers? So I'm only saying this for compound because I've spent a lot of time, we wrote a paper that stress tested it and analyzed it, but BZX doesn't have that. They actually have a weird liquidation mechanism. And that is another thing that people started taking advantage of.
00:22:43.830 - 00:22:54.020, Speaker A: Okay, so we've covered what a flash loan is, we've covered the steps, we've covered who was potentially affected. Do we know who did it?
00:22:55.050 - 00:23:32.906, Speaker C: I think the ultimate conspiracy theory of this industry right now is everyone playing the, you know, that meme with Spiderman, pointing at other spider men. And I think it might be better to talk about what the type of person who would have done it would have to have known. There's a meme of 19 year old in Pakistan. Does Soros attack against smart contracts? That I saw. But I think the person who's done this has to know a lot about all the systems. All the systems. Also the flash loans in DydX were not in their public GUI or visual API.
00:23:32.906 - 00:23:51.942, Speaker C: You actually probably were running a node, probably reading their contract quite carefully and figuring out the right time to call that. And it's actually kind of amazing. It happened on like Valentine's Day. Also, there's another attack actually in December with Maker and synthetics. Sorry, that one is definitely not an attack. There was an art.
00:23:51.996 - 00:23:54.002, Speaker B: Like there was another winning trade.
00:23:54.066 - 00:24:30.466, Speaker C: There was another winning trade, yes. I don't mean to call these things. I personally think they're not attacks usually, but when they're covered, they're called up. But someone found this way to basically manipulate MKR and the synthetic version of MKR. So it's like a derivative on that and just basically move the uniswap price up and down, because the only place to get MKR is uniswap. And that happened on Christmas. The interesting thing is with onchain analytics, you could actually track that the person was testing this strategy for like three weeks and doing very tiny amounts of it.
00:24:30.466 - 00:24:46.130, Speaker C: And then on Christmas day just went crazy, and it took like 24 hours before someone else was also doing the same trade and it went down to zero. But I think this holiday appearance of this thing suspects someone knows that those are good days, that people are not paying attention.
00:24:46.290 - 00:24:49.062, Speaker A: Busy on Valentine's Day and crypto people.
00:24:49.196 - 00:24:50.730, Speaker B: No one at East Denver?
00:24:51.870 - 00:24:56.106, Speaker C: Yeah, actually that's kind of funny. They did host a conference, during a.
00:24:56.128 - 00:24:58.102, Speaker B: Conference with hundreds of attendees.
00:24:58.166 - 00:25:02.330, Speaker A: Maybe it was more that was the distraction, it being at East Denver.
00:25:02.750 - 00:25:23.810, Speaker D: The systems have been around for a long time. Why do you think it took as long as it did for someone to actually do this? Is it just that it was that hard to analyze, or why is it taking so long? And if it's taking so long, what does that mean for what's still left out there to exploit?
00:25:25.190 - 00:26:15.054, Speaker B: I think there's a fairly complex calculus for anyone making these transactions, is there's not actually a huge amount of money in these systems. They're walking away with like 300,000, 500,000. It's not a I never have to work again amount of money. Right. It's very high risk because a lot of these are like potentially crimes in some jurisdictions. It's very hard to liquidate that ether now because everybody is watching it. So there's actually like a very complex incentive calculation going on here of when is it worth it to do this for an attacker.
00:26:15.054 - 00:26:39.100, Speaker B: If I have to spend hundreds or thousands of hours acquiring the expertise to do this, some amount of weeks, making sure that it's going to work and implementing the software to do it, and then all I'm going to get out of it is a few years salary that I can't even go use for anything. I wouldn't make this attack.
00:26:40.190 - 00:27:33.050, Speaker C: Yeah, I would have the same calculus. Because there's very little anonymity in Ethereum, especially compared to bitcoin. And I don't mean anonymity in the strong sense of is there a knowledge proof? I mean, just even mixing services like people in Ethereum who are liquidators, I feel like they use their addresses as vanity plates. Like, look at how many liquidations I've done. It's very different than the bitcoiner mindset of I don't want anyone to know who I am, and these things are extremely traceable. So the moment that this is 2013 in bitcoin, but for DFI, and the moment that the chainalysis of the world, or the governments of the world that want to analyze this, figure out which address did it, I'm sure they could identify it on Ethereum, because people take so few privacy precautions.
00:27:33.130 - 00:28:28.080, Speaker B: Well, and the account model is inherently opposed to privacy. You're basically required to have a long lived public key identity. But if you look at the history of attacks in Ethereum, even the huge ones, even the like, ten plus million dollar thefts, the eth tends to just move somewhere, be stolen, and sit there forever. Wow. People don't seem to be liquidating the proceeds of these attacks, and sometimes, like with the synthetics thing, they don't even seem to be like, liquidating the proceeds of good trades. And the stigma is never going to fall off of those coins. So this is why I think Tarun and I would not make these attacks, is because you don't actually really get much out of them.
00:28:29.010 - 00:29:13.002, Speaker C: One other thing I will say to Frederick's point of it took a while for this particular attack, is there's a sense in which this relies on different credit worthiness of different smart contracts. So DyDX, BZX, and compound, you should think of them as three separate banks. And different banks have different lending standards. Some banks will lend to anyone, some banks will lend to no one. Some banks will lend cheaply, some will lend it more expensively. And you need enough lenders with enough capital and enough differences in qualities of credit standards to do these types of things. So fulcrum actually was quite small until recently, and it very recently crossed the $10 million line.
00:29:13.002 - 00:29:32.786, Speaker C: And I think basically you needed someone of such low quality as a bank in terms of their lending standards in order to take advantage of borrowing on the crappier one, using that to collateralize a loan on a good one, and then making a profit that way, if that makes sense. So this variance in credit standard not.
00:29:32.808 - 00:29:45.480, Speaker D: Only like the knowledge base necessary to execute it and overcoming the legal risk, but it's also the right environment needed to be there to actually do it.
00:29:45.930 - 00:29:56.250, Speaker B: So, Turin, would you say that the frequency of these attacks is going to scale with the square of the number of these defi banks?
00:29:57.070 - 00:30:11.834, Speaker C: That's a good lower bound, because I feel like you can start doing crazy meta transaction things where I batch a single transaction to all three. You know what I mean? The square is assuming that we have to do them sequentially.
00:30:11.962 - 00:30:22.334, Speaker A: Okay, one thing here. Flash loans wasn't the flash loan actually, isn't that sort of a new phenomenon? It just recently was like, kind of the whole idea was deployed recently.
00:30:22.382 - 00:30:23.554, Speaker B: The idea is a few years old.
00:30:23.592 - 00:30:24.194, Speaker A: Oh, yeah.
00:30:24.312 - 00:31:17.190, Speaker B: So I think marble actually did deploy a contract two years ago, almost. I'd have to actually go and look up the dates, but the idea is a few years old. There's been an implementation for a while, but they only recently, with DydX, started getting a bit of liquidity. The thing about a flash loan is that it can be costlessly and risklessly stapled onto any other smart contract. And so all you need is like one or two of these defi pools to tack flash loans onto their contract in order to have incredibly deep flash liquidity pools. So I think you're right in saying that, well, the idea has been around for a while. It's only very recently that someone went and implemented it with some ETH in the pool.
00:31:17.770 - 00:31:56.146, Speaker C: And I will say some of the other flash lenders. So Ave, DuiDx, BCX, some of them actually charge fees. So on ave, the most amazing thing was kind of watching when you're doing some chain analysis after this attack, there were like, I don't know. I don't know how to estimate the number of people doing this. It might have just been one bot, just someone trying to optimize their strategy, but there were people making failed function calls to every single one of these contracts because it's costless. Because if you run out of gas or your transaction doesn't work, go through, no one pays anything, or you pay.
00:31:56.168 - 00:31:58.014, Speaker B: An extremely small transaction fee.
00:31:58.062 - 00:31:59.650, Speaker C: Yeah. So you pay your gas costs.
00:32:01.030 - 00:32:04.722, Speaker B: Gas costs are negligible for almost everyone right now.
00:32:04.856 - 00:32:17.080, Speaker A: But James, why do you love flash loans? Because it sort of sounds a little bit like flash loans were kind of the part of the problem, or why are you pro this?
00:32:17.390 - 00:32:37.022, Speaker B: Flash loans don't contribute to these problems. BZX had that problem whether flash loans existed or not. Flash loans didn't even make it easier to do this. What it did was it opened up the possibility to more people.
00:32:37.156 - 00:32:42.014, Speaker A: You're saying, like, all of a sudden you didn't have to be a whale to do this kind of game.
00:32:42.132 - 00:33:39.140, Speaker B: You didn't have to already have tons of money to play complex arbitrage games. So beyond that, it's democratizing access to these kinds of complex trades. And now that they exist, we will never go back to a world without them. It's not useful to say they're contributing to the problem or making things worse, because the incentives are there to create them and to have them, and people want to use them. And so we have to move forward with this world where they exist. And I think that flash loans have some really cool use cases that we're going to see over the next year, and that they can be generalized a lot more than we've seen so far. Right now, we're seeing flash loans of money that is sitting around doing something.
00:33:39.140 - 00:34:44.470, Speaker B: There is no reason that that money needs to exist before being flash loaned. You could have flash inflation of a token, where the token supply goes to infinity. And I have all of it for the space of one transaction. It's the same as a flash loan, but you're flash loaning the entire monetary base of that asset. We can have flash access to ownership of a smart contract, or flash access to subsets of the state of a smart contract, because we can have hard limits on what someone can do in the space of a transaction, and we can ensure that they must return these things to normal by the end of the transaction. The flash concept has a lot of very interesting and powerful ramifications on how we handle smart contract state. We're super early in this, and again, it's something that you can't effectively do in traditional finance.
00:34:45.610 - 00:34:57.610, Speaker D: I've seen some speculation on Twitter that the ERC 20 token standard should be changed to have this in it, like you can flash loan whatever amount you want.
00:34:57.680 - 00:34:59.478, Speaker C: That was inspired by James.
00:34:59.654 - 00:35:13.246, Speaker D: Just to make it really clear that this can happen, whether you design for it or not, we need to educate people, and people need to build their apps with this in mind, right?
00:35:13.428 - 00:35:52.014, Speaker B: The idea that someone with all of the money is going to come along and try to use your app to make a winning trade. So the idea of flash inflation was arrived at by me and a couple other people independently last year. So I think Remco from Zero X has an initial implementation of this that I'm excited to play around with. But it's really like five lines of solidity with one function call. It's not complex. It is trivial to staple onto any existing ERC 20 token or any newly deployed one.
00:35:52.132 - 00:35:55.950, Speaker A: And yet the ramifications could be explosives.
00:35:56.450 - 00:35:58.080, Speaker B: Well, interesting.
00:35:58.690 - 00:36:42.022, Speaker C: We've already seen some reactions to this from people who are kind of being ostriches about this risk to their system in particular. Maker announced that there's kind of this known bug that if you could borrow a bunch of MKR, not even that much because of how few people actually vote and how it's the same x people who vote every time, that you could basically take over a maker and crash the system and make the interest rate go really high or really low or whatever. And the flash loan thing is a little more scary for that because you don't even really need to borrow. You can borrow, vote, close the borrow, so you have no cost in completely affecting governance.
00:36:42.166 - 00:36:53.626, Speaker A: Whoa. On the governance front, because it's not being spent and it's not being trade, it stays sort of in its form. You just need it for signaling, basically, or for allowing your share of the vote.
00:36:53.738 - 00:37:00.910, Speaker B: Yes, so we've seen like the, what's the name of the Dow for maker governance? Takerdao.
00:37:00.990 - 00:37:01.922, Speaker C: Takerdao, yeah.
00:37:01.976 - 00:37:09.880, Speaker B: So we've seen like, takerdao is a thing we might expect to see flash governance in the future.
00:37:11.930 - 00:37:27.610, Speaker D: But again, it's something that the people building this have to design around. Right? Like if you build a governance system, make sure that you're locking tokens for voting. It's trivial to design a solution for this, it's just that people have to do it.
00:37:27.760 - 00:37:45.810, Speaker B: Right. Well, it's also that the solutions for this are going to have negative user experience, like they're going to have real costs to the user. So when you talk about locking tokens for voting, you're talking about taking away liquidity from your users in order to vote in the governance.
00:37:46.150 - 00:37:50.462, Speaker A: If they're validators, they'd actually have to possibly unbond lock.
00:37:50.526 - 00:38:24.910, Speaker B: Right? So you're talking about imposing costs on your users in order to solve for this. Generally speaking, governance systems are actually more complex, less specified financial systems bolted on to the actual protocol you've wanted to build. So I would expect that we see a disproportionate impact of things like this on governance, because generally speaking, governance systems are poorly designed and more vulnerable to this than the underlying collateralized systems.
00:38:25.410 - 00:39:03.578, Speaker C: And I guess in some sense, this is a good way to optimize these governance systems, because right now people complain about, hey, there's a lack of participation in our governance system. And it's like, okay, well, now you might have too much participation instantaneously. And I think the more competition there is amongst people using flash loans, the irony is that's actually a safer threat model, because now you can assume that any participant in the system can aggregate almost the whole money supply, or potentially more with inflation. And by doing that, you will just kill the bad mechanisms and converge on.
00:39:03.584 - 00:39:35.250, Speaker B: The ones that survive and sort of kind of bring this back to something I said way earlier in the conversation. The risks and opportunity costs of flash loans are very low, but because being the first to get that flash loan can have impact on governance and impact on the arbitrages that are available, buying the right to make an ethereum transaction is going to get very expensive in this world because you get the exclusive right to the entire chain.
00:39:35.690 - 00:39:51.210, Speaker C: So I was actually talking with my friend who's a bitcoin core developer, who was like, oh my God, you know, it's great that ethereum exists so that no one tries to do this on bitcoin.
00:39:54.590 - 00:39:56.380, Speaker A: Is there any comments on that?
00:39:57.790 - 00:40:06.762, Speaker C: I thought it was pretty funny because his master's thesis was actually on atomic transactions with infinite, kind of like price impact.
00:40:06.826 - 00:40:12.202, Speaker B: Well, you're going to just dox who it is right there by saying what, their master's thesis?
00:40:12.266 - 00:40:37.510, Speaker C: Well, you know, that's probably uniquely identifiable. Well, hey, this person has publicly been quite talking about it. Even though he's a bitcoin core dev, he's been trying to convince bitcoiners that this is actually a good way to make themselves antifragile, which I agree with. It's actually like a very good stress testing methodology. I just don't think the cryptokitties of the world are ready to be ready for their beanie baby annihilation.
00:40:38.590 - 00:41:02.014, Speaker D: To me, this is like a very good example of the disconnect between the shills saying, like, oh, this is ready for mass adoption and the people that actually know what it is and how it works and say, no, this is like super early days. But I say that in a hopeful way that we will resolve these things and we learn these things as we go along.
00:41:02.212 - 00:41:18.520, Speaker B: Well, I think that that's why we all find this so interesting, is we have discovered something that is unique to on chain systems and is causing a very rapid maturation of our understanding of how these systems work.
00:41:19.850 - 00:41:28.490, Speaker A: So you love them because they're just putting things into the fire, sort of. It speeds it up. It makes it hotter.
00:41:28.990 - 00:41:41.920, Speaker B: Yeah. We are learning about how these systems work in practice, and we're learning about the social structures of these systems by stress testing them. Live with real money.
00:41:42.290 - 00:41:46.030, Speaker C: It's darwinism, but for economic models.
00:41:48.210 - 00:41:52.730, Speaker D: When I hear about this and think about it, it's like quantum mechanics for blockchain.
00:41:52.810 - 00:41:56.322, Speaker C: Where there's so many disks for that.
00:41:56.376 - 00:42:37.950, Speaker D: On this episode, when you start reading quantum mechanics, the first thing is you get in a laby and run an experiment where there's an electron trapped in a potential well, and then you observe this, and eventually the electron jumps out and you go like, how the fuck did it jump out? Well, the real answer is its actual position is a probability curve, and it was never in the well to begin with. But what the teacher will tell you, or at least what my teacher told me, was, don't worry about that yet. It borrowed some energy from the universe, jumped out of the well, and then gave the energy back.
00:42:38.100 - 00:42:43.570, Speaker C: Nice. That's actually a really good way of teaching renormalization. I'd never heard that analogy.
00:42:44.870 - 00:42:46.302, Speaker B: Flash energy loans.
00:42:46.446 - 00:42:47.262, Speaker D: Energy loans.
00:42:47.326 - 00:42:55.010, Speaker C: Well, if we're just replicating the universe in digital form, then, oh, no, we can't really do much better entropy wise.
00:42:55.670 - 00:43:04.406, Speaker A: So, guys, we actually have some time left, and I'm wondering if we should cover some other kind of topics that.
00:43:04.428 - 00:43:08.150, Speaker B: Have just like, since we're here talking about lending.
00:43:08.910 - 00:43:51.474, Speaker D: Tarun, you just gave a talk here at SBC, and I think it's definitely one of my favorite talks, and I would encourage people listening to this to watch it. And you're talking about lending and how that affects proof of stake protocols. And I think it's a very interesting perspective, because as we move into this world of proof of stake and move away from proof of work, there's a bunch of stuff that changes, but this is an angle of it that I hadn't really thought deeply about before. And I think you present a very holistic and thought through view of it, but maybe give a summary of it. How does lending affect proof of stake protocols?
00:43:51.602 - 00:45:16.820, Speaker C: Yeah, first of all, thanks for the kind words. So basically, what's the difference between proof of work and proof of stake? So the original sort of bitcoin talk post about proof of stake, which is, as far as I know, the earliest provenance. I mean, there are people who have made systems that call themselves stake, but the first piece that ties bitcoin proof of work to proof of stake was this post written in 2012, and I first found it thanks to someone who's been on the podcast, Joe Bono. He pointed out to me a long time ago, and this post basically says there's sort of a thought experiment for how you get proof of stake as the limit of proof of work. And the way it works is imagine if I, instead of committing hash power and being selected by a hash power distribution, I instead am able to kind of have a virtual hash power distribution that looks like the limit of every time I get a block reward, I immediately reinvest it, and now that changes my relative probability of winning. And so that's sort of a limit of proof of work, because in proof of work, if you get a block reward, you have to go sell it or somehow exchange it for a minor. Turn the minor on right? There's this latency that doesn't happen instantaneously, and so that's where this idea came from.
00:45:16.820 - 00:46:34.010, Speaker C: So in proof of work, however, this disconnect means that the asset itself is disconnected from the thing securing it. Unless you can bring that thing on chain via an oracle, which is the hash power, the actual hash power distribution is off chain, and it's distinct from the asset that makes transactions in proof of stake by design. To get this kind of instantaneous reinvesting of block rewards, you end up making the asset exactly the same as the asset that's used for transactions. So the asset used for security has to have a really high value relative to all other competing instruments. And moreover, the rate of return has to be higher than alternative rate of returns on the same instrument, which is different than proof of work because of that. Now, basically, lending is a natural, simple way of generating yield on an asset you own, and on chain lending in particular, because it's censorship resistant. Basically, there's no really way, kind of like the flash loans, to say, hey, this won't exist because people are just going to deploy these contracts and do them the exact same way.
00:46:34.010 - 00:47:54.142, Speaker C: And on chain lending can't really be stopped. As long as you meet the conditions to borrow or lend, you can earn that yield. So now you look at the staking asset and you realize there's a financial attack surface area that really corresponds to the fact that staking coins have to compete on the basis of relative returns rather than on the basis of hodonomics or kind of know I've invested a lot of money into electricity and know I need to recoup my investment, or kind of something James has written about with Hasu and Brandon Curtis. About kind of like minor extractable value and how you should try to cost that out. And so, yeah, so this talk basically made a kind of simple but rigorous mathematical model for people who view their assets as portfolios of staked assets versus lent assets. And I think that extensions of this will come as we find more sources of yield. Like if there is a way for proof of stake tokens to be used in derivatives, then now you increase your portfolio to portion, staked portion, lent portion and derivatives, and those components increase.
00:47:54.142 - 00:48:00.760, Speaker C: Whereas in proof of work, this distinction really helps you separate them. So at a high level, that's basically what it's about.
00:48:01.370 - 00:48:20.490, Speaker B: So are you saying that because you are using your asset for staking and for lending and for other things, the rates these pay compete with each other? Right. And so over time, people will allocate capital so that those rates converge?
00:48:21.710 - 00:48:50.162, Speaker C: Or if, let's say you're a staking coin and you're not the numerator, so you're not the denomination that people really use for trading. Like, if you're not bitcoin or USD, then you will just rebalance to whatever gives you the highest rate. And you do see this in proof of work a little bit in terms of miners mining on the lower end of the coin spectrum, where they do really reallocate their, especially if they're GPU coins, they do reallocate. You can't avoid that per stake.
00:48:50.226 - 00:49:05.226, Speaker B: GPU coins sometimes reallocate on the minutely basis. Miners with large GPU farms are constantly evaluating which coin is most profitable to mine on, be it bitcoin cash, or.
00:49:05.328 - 00:49:08.550, Speaker C: Musiccoin, which is a real music coin, exists.
00:49:08.630 - 00:49:11.594, Speaker B: Musiccoin is a real proof of work coin.
00:49:11.642 - 00:49:12.720, Speaker C: What does it do?
00:49:13.810 - 00:49:14.560, Speaker B: Music?
00:49:16.450 - 00:49:18.990, Speaker D: I think it does music licensing.
00:49:19.650 - 00:49:41.282, Speaker B: Okay, so the point being that this coin that you've never heard of, which is probably not even in the top 250, is being considered by GPU miners at all times. So stakers essentially are forced to reallocate out of staking if there are better returns.
00:49:41.426 - 00:49:55.510, Speaker C: Yeah. And it's more instantaneous, like the trade off you have for being instantaneously reinvesting your block reward is that you now have made it so that the timescale at which you have to rebalance is faster.
00:49:56.250 - 00:49:58.930, Speaker B: Is this true even if there's an unbonding period?
00:49:59.010 - 00:50:36.774, Speaker C: Right. So the criticisms I think that this model has is, it's too simplistic. It doesn't include unbonding periods, it doesn't include staking derivatives. But the idea is to make the simplest possible nontrivial model where this does happen and then slowly add in those features to see how they protect against this. But I think in the unbonding case, it actually just corresponds to changing the risk profile of the system in a certain way. But there's no reason that everyone doesn't try to unbond at the same time, like at the end of the period, like at the end of the ephuc or something. Right.
00:50:36.892 - 00:50:41.754, Speaker B: If some better opportunity is available elsewhere, right. Everyone will unbond to pursue it.
00:50:41.792 - 00:51:26.130, Speaker C: And one of my greatest things, like flashlands, that I hope happens, maybe people who are running proof of stake networks hope this doesn't happen, is that a competing chain goes and launches an on chain lending platform with a bonding curve that's designed to be kind of easily manipulable so that this does happen and people stop staking. And then the crazy world, and this is where James, I think will have a lot of opinions, is the cross chain world. Where I can actually cross chain, I can collateralize a bitcoin loan on Ethereum and then kind of like remove security. So you can imagine that you can remove security stakers who are rebalancing rebalance from one chain to another, and they do it via lending, because every ether.
00:51:26.210 - 00:51:38.730, Speaker B: That is bonded for a tokenized asset or for a CDP or whatever is actually in proof of stake taking potential security away from the chain.
00:51:39.070 - 00:51:46.254, Speaker C: Yeah, that's kind of great. So it's going to be another form of darwinism that I think once we have many proof of stake chains live.
00:51:46.372 - 00:52:24.890, Speaker D: We'Ll really, there's this conversation that I've had a ton of times of what does a fully interoperable world look like where you can move any tokens anywhere and sort of at the limit? What does that mean? Does it mean that all tokens become the same thing and are worth the same thing? And all these sort of philosophical questions which are interesting to think about, but I guess to sort of maybe summarize and put a Pierre don this, my question would be, what should someone who's designing a proof of stake protocol do? Like what should they look at or think about as they do that?
00:52:24.960 - 00:52:52.930, Speaker C: Yeah, so one of the mitigations that I think people are trying to do, although I don't think they're necessarily framing it in the lending phrase, is staking derivatives. So validators right now, I think the real yields are quite low. So they're actually losing money in a lot of cases because they end up paying too much. They have to buy nodes. I think people underestimated the cost of running nodes in 2017, or they estimated them but told investors there were less or something. I don't know. Choose your poison.
00:52:52.930 - 00:53:34.930, Speaker C: But basically the validators don't have liquidity. And if they could borrow against their staked tokens, maybe they can keep their nodes up. And there's been this talk about staking derivatives. There's another side effect to staking derivatives, which are basically loans against your staked asset, which is that the base protocol actually now knows all the lending activity. If you can make the primary lending market, the staking derivative market, which is very difficult to do for a lot of reasons, but if you can find a way to do that, then the money supply can actually be dynamically adjusted based on the expected lending activity.
00:53:35.830 - 00:53:59.190, Speaker B: So you're saying that if you're designing a proof of stake blockchain today, and you're designing the issuance rate, and you're designing the rewards for the proof of stake system, you should be designing a lending market at the same time and launching that lending market at genesis of the chain.
00:53:59.530 - 00:54:44.150, Speaker C: Yes, I'm saying you should try to make that a distinct part of it, of what you're building. I'm not saying there's still attacks on that. Someone could make a much more successful smart contract that's on your platform that works. But the idea is if you can get all the early participants providing liquidity and getting the pool size to be really large, then that's much harder to manipulate. And then you make the variance in rates, then the rate deltas quite low. But then you're a central bank, right? Just FYi, I think, I don't want to belabor that point too much, but proof of stake does. After you start counting all the ways of attacking it, it starts looking like a central bank.
00:54:46.090 - 00:54:48.098, Speaker A: What do you want to be when you grow up?
00:54:48.284 - 00:54:49.930, Speaker C: Not Ben Bernanke.
00:54:54.750 - 00:55:02.598, Speaker B: So do you expect a lot of central bank, like human oversight of proof of stake issuance rates and markets?
00:55:02.694 - 00:56:03.890, Speaker C: Yeah, I think these governance, these designs where people are like, okay, we're going to have governance on the rates. I'm not saying it's the best possible solution, as we've learned from flash loans, because you can imagine flash loaning the Pos currency and crashing the rate, there are tons of things like that, but I think there's a lot of benefit to that. Another case where I think there's actually you're forcibly building a lending market whether you like it or not. And I don't know if everyone who's working on these types of things realizes this. It's like when you have a native stablecoin, native algorithmic stablecoin, because you're building in the lending market into the staking protocol and it's actually very close to the type of thing I'm saying, where in order to keep the token stable, it's like adjusting its issuance. And that ends up being a weird form of lending because the validators who are locked are kind of like locking up more or less of their tokens and the lending activity looks like that. It's like making certain tokens locked in a pool.
00:56:04.630 - 00:56:07.938, Speaker B: This seems a lot more complicated than proof of work.
00:56:08.104 - 00:56:36.150, Speaker C: Infinitely. I mean, this is why I'm saying I think the attack surface is just gigantic. Ginormous for proof of stake. But it's cool. I think the darwinism aspect is really cool. Right. Central banks took hundreds of years to kind of find an equilibrium that's sort of an equilibrium, and now we're going to compress hundreds of years of central banks competing with each other into like one year of every proof of stake currency competing with each other via Coinbase and binance.
00:56:36.230 - 00:56:36.906, Speaker B: Wow.
00:56:37.088 - 00:56:38.810, Speaker A: And then Libra wins.
00:56:40.910 - 00:56:53.918, Speaker C: I don't know. I have no clue what's happening there. Their talk at Sanford blockchain conference suggested that nothing new has happened. I don't think. They didn't say anything that wasn't in the original paper, as far as I could tell.
00:56:54.004 - 00:56:58.100, Speaker D: No. The only thing that's happened is the US government saying that they can't do it.
00:56:59.830 - 00:57:02.702, Speaker C: Well, maybe it is just going to be a dollar back coin.
00:57:02.766 - 00:57:04.946, Speaker B: That's never stopped anyone in blockchain before.
00:57:05.048 - 00:57:06.660, Speaker D: Yeah, that's fair enough.
00:57:07.270 - 00:57:26.010, Speaker A: So before we sign off from this conversation, I did have one last note that I wanted to cover, and that had to do with the work that you've been doing, James, on the EVM support on near or in near? How do I say this? EVM support at near for near on, isn't it?
00:57:26.080 - 00:57:27.098, Speaker B: On near.
00:57:27.184 - 00:57:48.350, Speaker A: So that is the EVM support on near. So you were working on that. And I just wondered, when we were talking just before about this cross chain and what that would mean when we talk about EVM support. Is that helpful in a cross chain context? Because as I understood, it was like redeploying it separately. It's not related to the original EVM.
00:57:48.430 - 00:58:26.494, Speaker B: Right. So near has two projects. One is the bridge, which is a federated bridge between ETH and near. And one is near EVM, which we worked on. In a nutshell, we took the parity EVM from the parity Ethereum client that Frederick put a lot of work into. And we went through the code, we took chunks of it, and we compiled it to wasm for deployment on Nier. So we have a functioning EVM that runs on Nier and uses Nier's native token so you can deploy solidity contracts to Nier's testnet today.
00:58:26.494 - 00:59:06.170, Speaker B: It's not part of the near bridge project, and I'm not sure what the state of that is or how usable it is, but kind of what we've been doing at Suma, and especially with crosschain group, is not just working on crosschain communication, but working on general interoperability standards and tooling. And so the EVM already has a lot of tooling around it that lets you quickly deploy these smart contracts. Truffle for testing web three for uis. So there's a large existing ecosystem, and the near EVM is about taking that ecosystem and opening it up to use more chains.
00:59:06.590 - 00:59:11.934, Speaker A: For this to work, though, you'd have to redeploy each contract. It's not like they just automatically, you have to.
00:59:11.972 - 00:59:53.770, Speaker B: No, they don't automatically migrate over. You'd want to redeploy contracts as necessary. And that means that you need new liquidity pools. And Ethereum has a lot more assets than Nier does. Right now, the near EVM is a fairly siloed off part of the near ecosystem. But like the EVM on substrate projects, like other EVM oriented projects, really what we're trying to do is take all of the existing tooling, take truffle, take web three, take everything that uses it, and apply it new places. And we think that's really compelling.
00:59:53.770 - 01:00:00.922, Speaker B: A lot of work has already been done in this industry, and there's no sense starting over from scratch on every.
01:00:00.976 - 01:00:07.818, Speaker A: Chain, although does every network have that capacity? Like, is it really appropriate for every network?
01:00:07.914 - 01:00:25.214, Speaker B: So every smart contract network is going to have that capacity. The question is usually going to be whether it's economical to deploy an EVM and how is it economical to deploy an EVM. So I don't know how you're approaching this for substrate. Frederick.
01:00:25.342 - 01:01:10.690, Speaker D: We're thinking about it the way that you just said that, there's been a lot of effort put into the EVM, into ways of analyzing bytecode, into trying to write good solidity libraries, et cetera. And while actually a large part of me does want to throw that out and say it's all shit because of what we're talking about here today, but most of that will happen somewhere else. Anyway, and so, yeah, there's a trade off here of using already known kind of entities, but then I think we have to start reinventing and have to start from scratch on other things as well. But we are doing that. We're writing a smart contract language in rust and we're doing a bunch of other things.
01:01:10.760 - 01:01:11.138, Speaker B: Right.
01:01:11.224 - 01:01:34.966, Speaker D: But I think we should do all of the things, basically. Yeah. If you were to find a better solution to write smart contracts in a better way, then it's not as if we can throw everything else out that was already done. We have to slowly migrate to the better solution. So we need to provide some path for that migration.
01:01:35.078 - 01:01:52.218, Speaker B: Yeah. One of the things that we've been thinking about for near EVM that we'd be really interested in talking to you guys about more is how does the EVM call outside of its silo? How does the EVM call a near contract and process the results?
01:01:52.314 - 01:01:54.786, Speaker C: You want an FFI, basically.
01:01:54.888 - 01:02:07.450, Speaker D: Yeah, basically. I mean, we already solved this problem when we did the EWASM implementation. So, I mean, we called from EVM to EWASM and had WASM and EVM contract interoperate.
01:02:07.550 - 01:02:41.694, Speaker B: Well, one of the interesting things about near is that the near contract execution is asynchronous. So when you send a message, you don't wait for the result. Right. So you can't just directly call from the EVM's synchronous call stack thing to near because you'll never get a result back. So you have to finish up your EVM processing and have the EVM generate some list of messages that need to be sent, which may result in messages coming back. So you need to do actually quite a bit of thinking and work on the proper way to do this.
01:02:41.812 - 01:03:21.098, Speaker D: Yeah, that sort of changes. That's part of the problem of the EVM, is that there are some fundamental concepts. Once you get into trying to change that, you're not actually providing a migration path anymore. If you start saying that, no, this EVM is actually async, and you make a call and then you have to provide a function for that response to come into, then, yeah, you can't take your contract from Ethereum and deploy it anymore. Same thing if you want to remove some of the legacy baggage of like, 256 bit words, et cetera. Yeah. Then again, it's something EVM like.
01:03:21.098 - 01:03:25.534, Speaker D: But is that actually useful? Isn't it better to just start from scratch? I don't know.
01:03:25.652 - 01:03:39.060, Speaker C: Well, one thing, I guess it does seem like you should be able to wrap these as like, deferred futures and promises, right, that you basically make EVM wrappers that wait on events that future racing call makes.
01:03:40.630 - 01:03:43.246, Speaker B: The EVM is really bad at types.
01:03:43.438 - 01:03:49.234, Speaker C: Well, I'm just saying I think you could. Morally you can do it.
01:03:49.272 - 01:04:25.460, Speaker B: Morally, you can do it. I wish morality wrote code for me. But getting back to where we started off at Suma and at Crosschain Group, we're interested in these big picture interoperability projects, is how do we bring the existing ecosystem to more chains, and how do we build cohesive ecosystems around these new chains. And I think near EVM, we got a great opportunity to work with the near team directly on doing some of that, and that's why I was excited about it.
01:04:25.830 - 01:04:28.930, Speaker A: And do you see yourself doing that for more projects, too?
01:04:29.080 - 01:04:57.340, Speaker B: I think we could conceivably deploy a few more evms if we wanted to. I think that we're going to keep iterating on and maintaining this one for a little while. I don't know that the EVM is the perfect tool for all use cases. It's probably not. So I'm excited to see what new teams come up with and if there's anything they're worth standardizing around.
01:04:58.030 - 01:05:16.100, Speaker A: It almost has a bit of like a substrate feel. Like the way you just described it, like you deploy, it has all the tooling. I know it's just a part of a blockchain, but I know that in substrate you deploy and a lot of the tooling is also included. And I guess in the Cosmos SDK, it's similar. But is that sort of like the ETH one version of.
01:05:16.470 - 01:06:07.986, Speaker B: Well, we're seeing a bunch of different ecosystems that are developing cohesive tool sets within their ecosystem. So cohesive tool set for substrate, where you build a substrate chain and you get all of this stuff for free. And the same in cosmos. If you build a Cosmos SDK module, you're going to get the consensus mechanism and the network protocol and the message handling for free. Essentially what Crosschain group is about is a little bit more of the multi ecosystem standards. And what can we give you for free just because you built something resembling a blockchain somewhere? And what kind of standards can we implement that are broadly applicable to the polkadot ecosystem and the cosmos ecosystem and the ETH ecosystem? And that's what I spend a lot of my time thinking about these days.
01:06:08.168 - 01:06:16.820, Speaker D: I would personally be a lot more excited if we standardized on WASM than on EVM. Yes, because everyone is going in wasm direction anyway.
01:06:17.670 - 01:06:19.086, Speaker C: Subsets though, right?
01:06:19.208 - 01:06:38.842, Speaker D: No, yeah, kind of. But not really. It's sort of like yes, you can have an asynchronous model of it, or you can have this, but the subset is basically just wasm without floating points for everyone, so the host functions will look a bit different. And so we kind of need to have wazi standard for blockchains kind of thing.
01:06:38.976 - 01:07:32.234, Speaker B: This is something that I actually am really enjoying as a developer is because there are a bunch of people standardizing around various versions of waSm. I can just write rust and I can be sure that my rust is going to know on substrate. It's a little more difficult with the standard library thing, but I can be sure it's going to run on near and I can be sure it's going to run potentially on Solana and I can look forward to it running. What? Move speaking move is very rusty. I can look forward to it running on the new rust cosmos like tendermint implementation as well. Because people are standardizing around WASM, we can start building things in rust and typescript and know that they will be useful on many chains for years to come.
01:07:32.432 - 01:07:47.700, Speaker D: We're also working on solidity to WASM compiler, and we're like others are as well. I know the WASM team was working on that as well. WASM is supposed to be a back end of there's like, oh really?
01:07:48.310 - 01:07:49.394, Speaker B: That's really cool.
01:07:49.512 - 01:08:01.430, Speaker D: I think that's a better migration path than like compile your solidity code if you have to keep that, compile it to WASm instead of compile it to EVM and have this janky EVM.
01:08:01.930 - 01:08:04.610, Speaker C: The EVM was never designed to be an IR.
01:08:04.770 - 01:08:47.060, Speaker B: The EVM is itself very janky, but it is like the thing we have and the thing that people use. And I would love it if a lot of the solidity got seamlessly migrated to WaSM. But as we found out, like developing near EVM, there are a bunch of fiddly little semantics that change depending on the environment you're in. Getting the ethereum call stack semantics right, was actually very difficult. So anytime we move from EVM to a WASM VM, I think we run the risk that contract behavior is going to subtly change.
01:08:47.830 - 01:08:51.160, Speaker C: Flash lens might be different, very different.
01:08:51.690 - 01:09:05.020, Speaker D: It depends on how people write contracts. Like some people write really shitty contracts where they depend on the gas price at some point and have branch conditions on how much gas is used and such that's never going to be deployed anywhere else.
01:09:06.350 - 01:09:47.000, Speaker B: One last point is inherently all contracts rely on gas prices. They could make addition worth 8 million gas tomorrow and all contracts would break. So anything that affects how gas is metered is going to change the behavior of some contracts, and it's going to change how people write contracts. And so we can do a lot of things like near EVM, where it's easy for the developer to migrate over, but there will be subtle changes in the costs and in the behavior. And so what we're looking for is to get as close as possible and provide a good dev experience. Cool.
01:09:47.850 - 01:10:00.602, Speaker A: All right, guys, I think we have used up our time here in the Stanford Alumni business center. Thank you guys for letting us use your meeting room to record this podcast. Yeah. And thank you so much for coming on the show.
01:10:00.656 - 01:10:03.726, Speaker B: Again, thank you. Thanks for having us.
01:10:03.748 - 01:10:04.880, Speaker C: Yeah, thanks very much.
01:10:05.490 - 01:10:07.630, Speaker A: And I guess till the next conference.
01:10:08.290 - 01:10:09.242, Speaker C: Your conference.
01:10:09.306 - 01:10:10.874, Speaker A: Oh, yeah. Zero knowledge summit.
01:10:10.922 - 01:10:11.838, Speaker B: Oh, when is that?
01:10:11.924 - 01:10:12.922, Speaker A: End of March.
01:10:13.066 - 01:10:17.646, Speaker B: So zero knowledge summit. End of March in Berlin, March 31.
01:10:17.748 - 01:10:22.154, Speaker A: Get your application in. Okay. Thanks, guys. And to our listeners. Thanks for listening.
01:10:22.202 - 01:10:25.360, Speaker D: Thanks for listening. You.
