00:00:07.450 - 00:01:02.298, Speaker A: Welcome to Zero Knowledge, a podcast where we talk about the latest in zero knowledge research and the decentralized web. The show is hosted by me, Anna and me Frederick. In this week's episode, we chat with Dan Robinson, research partner at Paradigm. We talk about his recent blog post entitled Ethereum is a Dark Forest, a story about how he and some colleagues try to save a transaction from the monsters that lurk in the mempool. But before we start in, I want to say thank you to this week's sponsor, least authority. Least Authority is a team of security researchers, cryptographers, open source developers and privacy advocates. They are a security consulting company known for their dedication to pushing the limits on how to build privacy respecting solutions.
00:01:02.298 - 00:01:53.162, Speaker A: Mostly known for their security audits like the ETH two specification protocol labs, Gossip sub protocol, Atomics Library wallet and smart contracts for the Tezos Foundation, Blockstack's investor wallet centrifuges, Tinlake 30 and more. The least authority team is passionate about advancing the security of projects in the blockchain, cryptocurrency and DFI space. Importantly, these independent reviews improve the security of the technology. And what's more, when the reports are published, the broader community can benefit from the shared knowledge. This is also why least Authority decided to sponsor this podcast. They recognize the potential for zero knowledge proofs and protocols to improve the scalability of projects and the privacy of users. So if you're looking to further improve the security of your protocol and its use of cryptography, email least authority to book a no obligations consultation appointment.
00:01:53.162 - 00:02:23.548, Speaker A: The email address is contact us@leastauthority.com I've added the link in the show notes, so thank you again, least authority. Now here is our interview with Dan Robinson. So today we are talking with Dan Robinson, a research partner at Paradigm and also someone who co wrote a recent blog post called Ethereum is a dark Forest. It's been doing the rounds. It's about the mem pool and we're going to be talking a little bit more about that. So welcome to the show, Dan.
00:02:23.644 - 00:02:24.768, Speaker B: Thanks for having me on.
00:02:24.854 - 00:02:43.952, Speaker C: Yeah, welcome to the show. Great to have you. I guess before we dig into the mempool stuff, which is interesting story, I think that looking forward to let's talk a little bit about what you do, what paradigm is. So what is a crypto VC, I guess, and what is unique about paradigm?
00:02:44.096 - 00:03:29.510, Speaker B: Sure. So paradigm is a crypto asset investment firm. And here I should mention that I'm here speaking and representing my own views and not those of the firm or of the fund. And nothing that I say on this will be investment advice paradigm is a crypto asset investment firm. And we act kind of like a hybrid between a VC and a hedge fund, in both making private investments in the cryptocurrency space and buying public tokens and holding them tokens like bitcoin and ETH, we're entirely crypto focused. So everything, not only is every investment that we make crypto focused, but everyone on the investment team tries to be as technical and sort of as deep into it as possible. And we think that gives us an edge in terms of the kind of investments we can make.
00:03:29.880 - 00:03:43.176, Speaker A: What makes it the crypto VC versus a traditional VC? What does that mean? I know you mentioned. Okay, so you're also partly a hedge fund, but just on the crypto VC side of things. How is working in this space different?
00:03:43.358 - 00:04:23.668, Speaker B: Yeah, so this is my first job as a VC. Previously I was a lawyer, actually, and then I became a crypto engineer at a company called chain, which was acquired by stellar. So I can't necessarily compare it to what it's like to be a general SVC. I think it would be pretty different in that a lot of what we do revolves around very sort of technical, either due diligence or value add. So the reason I think we're so focused on crypto, in addition to thinking that it's a really exciting space for investment, is just that personally for the whole investment team. So the firm was founded by Matt Wong from Sequoia, and Fred Osam, who's one of the co founders of Coinbase. And we've got a few other researchers and investors on the team now.
00:04:23.668 - 00:04:42.652, Speaker B: Everyone is sort of personally, passionately into crypto, and we think that kind of obsession and that amount of technical knowledge kind of gives us an edge when investing in these companies and when helping them succeed. And that's something where generals, investors, they sometimes invest in crypto stuff, but they sort of don't know what to make of it.
00:04:42.786 - 00:05:11.620, Speaker C: Sort of a non sequitur, but something I've always been curious about, and your intro triggered it for me. Who needs to say that they're not giving investment advice? Because I always feel like it's either people on YouTube who aren't investment advisors and feel like they seem more legit by saying that they're not giving investment advice, or it's people who are investment advisors and want to make sure that it's like, this is not investment advice.
00:05:12.040 - 00:05:35.950, Speaker B: Yes, in this case, it's the latter. So it's a fair time. A registered investment advisor I do think in general, it's kind of like when someone launches a smart contract and then know smart contracts are all insecure, you're going to lose all your money. This token won't have any value. And everyone's like, ooh, that means I really should invest in it. So I worry about just sort of the reverse psychology of it.
00:05:36.320 - 00:05:50.064, Speaker A: Yeah. Giorgio's, who works with you, was on the show, also said it recently, and we haven't said it. I mean, I'll say it now to anyone who's listening. Nothing we say is investment advice. I hope that's obvious, but I wonder.
00:05:50.102 - 00:05:59.828, Speaker C: Who can really get in trouble. Like, if I were to give someone investment advice, like on this podcast, not that I ever have, but if I did, could I actually get in trouble for it?
00:05:59.994 - 00:06:23.740, Speaker B: Yeah, that's a good question. If it was fraudulent, then yes. And I think a lot of what people do that is they're trying to cover their own ass in case something they say is wrong, either legally or. I'm not actually sure about the law around. Yeah, there's not really a law that says you have to have a license to give investment advice, like legal advice, but, yeah, I think they're trying to cover their own asses.
00:06:24.880 - 00:07:02.216, Speaker A: So I think now we should move on to the topic at hand, or one of the topics we wanted to cover in this episode, and that is the article that you wrote called ethereum, is a dark forest. And you wrote it and published it like a week after, I think, dark Forest version four was released, or like, right when it was coming out. And I obviously good piggyback there. But tell me, in your case, you're using the term Dark Forest. It's a similar. I don't know how to describe it. You're describing something vaguely similar, but it's quite different from the video game ZK videogram, which, by the way, we've had on the show a few weeks ago.
00:07:02.216 - 00:07:04.904, Speaker A: If you haven't heard it, we'll put the link in the show notes. It's great.
00:07:05.022 - 00:07:17.436, Speaker B: Yeah. So I think I talked to the Dark Forest guys, and we're both just fans of, I guess, chinese science fiction, or particularly this one series. And the whole series is great. I recommend it. The three body problem.
00:07:17.538 - 00:07:17.948, Speaker A: Yeah.
00:07:18.034 - 00:08:17.648, Speaker B: The whole series is a very rich sort of fertile ground for metaphors, and there's a lot of other ones that I use in day to day conversation that are actually more obscure. But the Dark Forest metaphor, which is from the second book in the series, is a really powerful one for thinking about these environments like crypto, where it's kind of a war of all against all. So a dark forest in the context I was using in and which is also the inspiration for the game, is an environment in which there are such advanced predators out there, such monsters out there, that if you're visible, you'll be killed, almost guaranteed. And so the only solution to this is to try to hide. And then if somebody wants to destroy you, all they have to do is reveal your position publicly. And so in dark Forest in the game, they depend on these snark proofs, right. And sort of the grinding to basically have private information about areas of space.
00:08:17.648 - 00:08:25.660, Speaker B: And so that's a way to basically maintain this fog of war without which otherwise you just sort of have, like, constant battle.
00:08:25.740 - 00:08:28.932, Speaker A: Totally. By the way, did you play this version, this last one?
00:08:28.986 - 00:08:33.268, Speaker B: I've not yet played Dark Forest. I'm really looking forward. I have some friends who just spent all their time on it.
00:08:33.274 - 00:09:18.432, Speaker A: No, I have not yet. I did play last weekend for the first. I mean, I had heard about all the other versions and I had not yet jumped in, and then I did, and then it turned out to be a dangerous game for me because I love things like Sieve and I love map games, I love resource management games. I have been addicted to these grinding games, these games where you have to mine something for a long period of time and then, wait, the timing and then on top of it, built with zkps. And I think, I don't know how many people were playing, maybe 400, but it's the zero knowledge proof community mainly there. So it was amazing. Except I only played right near the end, so I didn't rank.
00:09:18.432 - 00:09:24.692, Speaker A: But next time, anyway, you guys should totally try it. Frederick, have you tried it yet? No.
00:09:24.746 - 00:09:51.100, Speaker C: Eh, I have not. I have not gotten the time. But it's on your list. It's one of the things, obviously I want to play it, but it's also one of the things, like, I want to have the time to play it because I know that once I start playing it, I really want to hack around, probably buy a super powerful machine, start grinding out hashes, and actually just go gung ho on it. But I can't really do that now.
00:09:51.170 - 00:09:56.530, Speaker B: One of the best things about my job is that I will be able to credibly say that I'm playing this game for research.
00:09:57.620 - 00:10:36.424, Speaker A: I felt the same way. Yeah, very cool. Now, going back to what we were just describing, you're using the term dark forest based on this book to describe the mempool. And we did do an episode on the mempool, which is quite technical. We'll put a link to that in the show notes, maybe worth listening to, just to get some context for what we're talking about here. And we want to kind of hear this story of what you tried to do to basically save a transaction or save someone from losing a ton of funds. But before we go into that story, let's do a few quick definitions.
00:10:36.424 - 00:10:38.824, Speaker A: So what is a mem pool?
00:10:38.952 - 00:11:26.190, Speaker B: So, the mem pool on Ethereum or on any blockchain is the set of transactions that have been published and are known by all miners or stakers or whoever's constructing blocks, but haven't yet been confirmed into a block. So the mempool is a technical detail of how nodes are implemented, but it's also a necessary one, at least naively, because you don't know where the next block is going to come from. So you have to basically tell a lot of people in order to make sure that your transaction gets included. And so, one of the known issues with the mempool is that your transaction is public, and it's possible for somebody to create a transaction that gets in before your transaction with a knowledge of what's in yours. That's the dark forest environment that I'm into.
00:11:26.560 - 00:11:49.220, Speaker A: There's a way for someone to front run it, or someone to take what's in that transaction and sort of use it themselves. I don't actually understand how that would work. I do know that you could maybe kill a transaction, maybe by throwing up the same one with the same nonce. I don't know if that actually works, but with a higher gas price. But how would you take what's in it?
00:11:49.370 - 00:12:39.380, Speaker B: So, by default, Ethereum miners order transactions in a block based on the gas price, a descending order of gas price. And so if you see a transaction that's pending, someone has published it, it's in the mem pool, and we use the term done mempool, although of course every node has their own individual one. But basically by that, I mean it's just out there in the world waiting for someone to add it to, and everybody sort of knows about it and is waiting to be added to a block. Once it's out there, somebody can submit a transaction with a slightly higher gas price. And then if a miner sees it, they'll give precedence to that transaction. And so for most transactions, possibly this won't matter. So, for example, in a bitcoin transaction, if I'm sending bitcoin to somebody, there's no way for you to get a transaction submitted early that takes advantage of that or that prevents mine from being executable.
00:12:39.380 - 00:13:32.660, Speaker B: And this is true for a normal ethereum eth send as well. That's my eth. You can't actually stop me from doing that. When it becomes an issue is when there's more complex, what's a term called minor extractable value, which is when you have something sort of going on in this transaction where somebody knowing that you're doing this means they can get in and cause you to get a worse price on a trade or possibly cause your transaction to fail. And the fact that you've published this basically gives them valuable information in doing this. So the classic example is front running on Uniswap. So if somebody makes a really large trade on Uniswap, you can do what's called a sandwich attack on this trade, where you put in a transaction before, which pushes the price up, and then they end up buying at a worse price, and then you put in a transaction afterward which sells and basically locks in your arbitrage at a higher price because the user has pushed the price up.
00:13:32.660 - 00:13:38.080, Speaker B: For a large enough user trade, you can make a profit just sandwiching someone's individual trade as a pure arbitrage profit.
00:13:38.160 - 00:13:53.272, Speaker A: Damn. And because it's public, you can actually see the transaction, you can see what they're trying to do. You can look at the price right now. The way to do this would be to do something to push the price up and make the gas more expensive so that it happens earlier on your transaction.
00:13:53.416 - 00:14:07.872, Speaker B: You submit the transaction with a higher gas price. So you choose the gas price of your own px. So you just basically submit a transaction that has a gas price that ensures that that transaction is included before the one you're trying to attack, and then you include one that's after.
00:14:08.006 - 00:14:17.268, Speaker A: Are there tools? Is that happening? That must be happening all over the place. And I can't imagine that it's like someone individually going and looking at this thing. But are there bots that just do this?
00:14:17.434 - 00:14:52.848, Speaker B: This happens all the time. And I think on Uniswap, which is one of the most popular applications on Ethereum or in crypto generally, there's a lot of really specialized ecosystem around arbitraging uniswap specifically. And this isn't just doing like the sandwich tax, this is also getting the first trade in the block after the price has moved in the real world. So you can get an arbitrage on it, or rb between Uniswap and some other on chain trading platform. But there are all kinds of bots out there for extracting all kinds of Mev anytime. A protocol in Defi basically does almost anything. Quite often there's some way for smart people in the Memphis to take advantage of it.
00:14:52.848 - 00:15:35.212, Speaker B: And this isn't always a bad thing. Like with Uniswap, the arbitrager who trades as soon as the real world price moves, they're actually providing a very valuable service. They're an essential part of Uniswap working, because they're the reason that Uniswap always has an accurate price or a reasonably accurate price. So in some ways, good mechanisms are designed to take advantage of the fact that there will be parties out there who basically pick up these free pennies on the sidewalk. But then there are other ways in which it can be a bad thing. So there's a lot of really smart people. I kind of picture them as sort of like Russians or sort of like a basement somewhere, just sort of like hacking on this.
00:15:35.212 - 00:15:46.444, Speaker B: You don't have to be in the ecosystem. I probably don't know the best black hat hackers or mempool people, because I think they make crazy amounts of money from what I can see and what's happening in the mempool.
00:15:46.492 - 00:15:46.992, Speaker A: Wow.
00:15:47.126 - 00:16:22.424, Speaker B: But there is a more generalized form of this. This is what I find really fascinating. On Ethereum, there's a particular strategy you can do that doesn't for a particular type of meV. It can always take it on any contract, and the programmer doesn't even have to have any idea what the contracts are doing. Like, could be a new contract with new code, but for a particular kind of meV, this bot can detect it and pick it up. And this is what led to this story that I published with Jojos a month and a half ago, in which we called Ethereum a dark forest.
00:16:22.552 - 00:17:15.608, Speaker C: We have an episode, a previous episode, that explains sort of the technical aspect of mempools. But back then, this was years ago, this episode, and even back then, we were seeing something like 1000 transactions per second, just from bots outbidding each other, right? So that's also an interesting thing, is these bots get into war with each other. So if there is minor extractable value, then one bot will detect it, inject their transactions, and then another bot will detect it, say, I'm going to bid one way higher gas than you, and inject their transactions, and then the first bot replaces theirs. So a node is actually churning through thousands and thousands of transactions per second, sometimes just between two bots fighting each other to get the final thing in, and then eventually one bot gives up because they say, well, this is not profitable enough for me anymore.
00:17:15.704 - 00:17:38.656, Speaker B: That's right. So there's this thing called a priority gas auction, which is when a bunch of sophisticated parties see some mev or one of them sees it, and this triggers other ones to go after it. And I don't think I'd be able to successfully participate in a priority gas auction. I think these are highly specialized predators here, figuring out how to win these against other bots. Absolutely. Like them. And how to minimize their costs if they lose.
00:17:38.656 - 00:17:47.732, Speaker B: Yeah. So that's part of what makes the mempool really scary, I think, is that not only are they picking off individual users, but even they aren't safe from other predators.
00:17:47.876 - 00:18:02.744, Speaker C: And there's another interesting angle too, is I would assume at least that basically all of them use gas tokens, so they're not actually paying the same gas price as you are. So they have a completely different playing field as well in how they engage in these transactions.
00:18:02.872 - 00:18:11.672, Speaker B: That's right. So they can set a high gas price on their transaction, but they don't pay all the gas that the transaction would cost because they're redeeming a gas token in the same transaction.
00:18:11.736 - 00:18:17.490, Speaker A: And by gas token, do you mean like gas token the thing, or is it a type of thing?
00:18:17.860 - 00:18:52.430, Speaker B: There's a few instances of gas token. The original one was designed by Phil Dion, who's also one of the researchers who coined the term mev and is one of the experts on the mempool and front running and all these things. But gas token, for those who don't know, it's a trick that takes advantage of how ethereum measures gas cost to be able to basically get a refund on gas at exactly the time that you want it. So you can basically prepay for gas by storing some junk state on the Ethereum blockchain and then later get the gas back in a transaction where you want to use it, potentially one with a much higher gas price.
00:18:53.040 - 00:19:02.112, Speaker A: Is it kind of like an averaging product? Like it sort of means that gas prices won't spike, but you may sometimes be paying a little more? Or are you always paying less?
00:19:02.246 - 00:19:30.232, Speaker B: You typically probably wouldn't use a gas token if you could buy one at the same price that you'd be paying for the gas. So it's sort of like almost an option on gas at a particular price, right? At any given time is one way to think about it, or imagine pricing it. But I think it does probably tend to have a leveling effect on the price of gas, although I'm not sure if that plays out in practice. And because it's mostly used by these weird games, like possible it could have the opposite effect.
00:19:30.366 - 00:19:53.680, Speaker C: I think it averages the bots costs for gas, but for the general public, it's probably not that big of an impact. So I think we've walked through the basics here and the primitives. So tell us what the experiment that you did was. What was it that you did in the blog post, and what did you find?
00:19:53.830 - 00:20:54.900, Speaker B: So this was a situation that I found myself in, which I'm not usually in, because I'm mostly not a white hat hacker. I don't spend a lot of time trying to break other people's contracts. So what happened was, I heard about somebody having sent uniswap liquidity tokens into the uniswap contract itself. And this is one of the most common mistakes that people will make on Ethereum, is sending ERC 20 tokens to the token contract itself, or to some other ERC 20 contract, or some contract where they can't recover it. And so this was basically a fat finger error, and usually this is unrecoverable. But I realized after thinking about this for a bit, that in this very particular instance, the tokens that they'd lost were worth around $12,000 could be recovered not just by them, but by anyone. There was a function on the Uniswap contract that they could call, which would actually withdraw the liquidity for them and give them all the liquidity that's worth around $12,000.
00:20:54.900 - 00:21:54.656, Speaker B: And since anyone could call this, I could call it, and I could just be a white hat hacker and pick up this money and give it to them. But I knew because of the nonsense that goes on in the mem pool, that this actually wouldn't be that easy. So I was lucky that I'd heard about this from Phil Dion a few years ago. The same researcher who created gas tokens and coins are mev. He told me a story over beer about an encounter with something that he called a generalized frontrunner. So a specialized front runner is the kind of frontrunner that we were talking about before, which is written by a programmer to sandwich a trade on uniswap and make a profit. And this depends on some human intention around looking at a mechanism, figuring out that it's broken in this particular way, and constructing a pattern matching bot that will automatically take some action in response to saying something a generalized front runner doesn't just look for one particular kind of mev.
00:21:54.656 - 00:22:02.932, Speaker B: It looks at every transaction in the Ethereum endpool, and then simulates what would happen if they sent that transaction instead of the user.
00:22:02.996 - 00:22:08.780, Speaker A: Wow. And I guess for most of them they're just like, this is useless, it wouldn't do anything.
00:22:08.930 - 00:22:09.388, Speaker B: Exactly.
00:22:09.474 - 00:22:11.630, Speaker A: But once in a while, right?
00:22:12.000 - 00:22:53.416, Speaker B: For most transactions, this will fail. For some transactions they just run this and they see oh my ERC 20 balance in this token increased and I didn't pay anything, and it was worth the that would pay for gas. And when this happens, they just front run your transaction, they just submit a transaction with a slightly higher gas price, that is generally guaranteed to get in before yours. And so this is only an issue for a very particular kind of meV. And this is where there's like a function that anybody can call, and that's not every kind of mev, by any means. It's not most kinds of mev, but it was the situation I was in, because there was this function on the uniswap core contract, that anyone could call and get this money out.
00:22:53.518 - 00:23:03.180, Speaker A: Do you think though, is it always mistakes like those things that one could front run? Is it always an error or is it sometimes purposeful?
00:23:03.680 - 00:24:02.508, Speaker B: I would think it would usually either be a mistake, a result of a mistake as it was here, or a bug in a smart contract. So relatively often when there is an exploit, one of the problems is that exploiting it yourself could potentially get front run by something like this, because it's in the nature of an exploit, not every exploit, but in a lot of exploits that anyone can do them. Yeah, it would probably be a bad idea to design a mechanism on chain that really depends on people not being able to do this, because anyone could have called this function at any time and pick up the money. So you shouldn't really design it so that anyone could pick it up, because then anyone might. But the funny thing is, in this case, the money had been sitting there on chain for 8 hours before I had this thought that I could go pick it up. And I went and checked and it was still there. So there was this function, the documented function on the contract, that anyone could just call and get the money out, no one had.
00:24:02.508 - 00:24:18.710, Speaker B: But I knew that about these generalized smart contract front runners in the mempool. And as a result, I knew that if I tried to pick it up, which is like transaction sending to it, it would get sniped. And so the mempool is even scarier than the ethereum smart contract state, which is pretty scary already.
00:24:19.720 - 00:24:35.480, Speaker A: Wow. Okay, so you were there, you saw this problem, you realized there's a solution, but then kind of luckily also realized that if you just went for it blindly, someone would see it and then front run you. You attempting to save it.
00:24:35.550 - 00:24:35.784, Speaker B: Yeah.
00:24:35.822 - 00:25:02.896, Speaker C: It's sort of like you as a human see this, right? But the bots, only, they're not going around analyzing contracts. They're not actually smart. They're not actually finding these things. So no one else was looking at the actual contract. And this in depth, but you have a bunch of these predators who are just looking for how are you moving? And then based on how you're moving, determining where you're going and then going in the same direction.
00:25:03.008 - 00:25:03.476, Speaker B: Exactly.
00:25:03.578 - 00:25:07.510, Speaker A: Damn, I'm so seeing some similarities now to the dark force game. Anyway.
00:25:09.320 - 00:26:16.516, Speaker B: That'S cool. Exactly. And so it's a really fascinating situation, but then it was a somewhat scary one to be in. There was also a ticking clock, because if anybody removed liquidity from this pool the normal way, then either they would get the liquidity, they'd get this money out, or the front runners would see the call and the front runner would end up getting it out. Either way, it wasn't likely to get back to the person who'd accidentally sent it in. So in order to try to recover this money, I talked to some smart contract security researchers, including Samsung, Scott Bigelow, some experts on the mem pool, and on smart contract security, and we formulated this plan, which involved basically a lot of unnecessary steps, needlessly complicated scheming to try to hide from the bots the call that we were actually trying to make. And so I obviously couldn't call the contract directly with my transaction, but I also couldn't just put up a contract and call the contract that would make the call, because you wouldn't necessarily be able to tell that just by looking at my transaction that I was even interacting with uniswap.
00:26:16.516 - 00:26:21.340, Speaker B: But if you ran my transaction and simulated it, you can see every internal call that I make.
00:26:21.410 - 00:26:21.644, Speaker A: Wow.
00:26:21.682 - 00:26:42.524, Speaker B: And what these bots can do is run the transaction, do an execution trace of it, and simulate, not just if they sent the transaction, what would happen, but if they did every call internally, what would happen? And so that wouldn't be enough obfuscation on its own. Basically, they could extract that I had done this call, simulate it, and then just do a transaction that makes the call, doesn't even go through my contract.
00:26:42.572 - 00:26:48.324, Speaker A: And there's a belief that these generalized bots would be doing that they would actually run every call.
00:26:48.522 - 00:27:40.916, Speaker B: I didn't know exactly whether they would, but basically, in this scenario, we had to sort of think like an attacker and say, okay, if we built a bot like this, and we had a lot more resources, and we're a lot smarter like these people are, this is how we would do it. And so we figured that wouldn't be enough to prevent this call from being front run. Our step actually involved deploying two smart contracts and splitting the transaction that activated them into two transactions, which we tried to submit into the same block. And the idea was, hopefully, a generalized front runner would simulate these transactions separately. If they simulated them in sequence, then they would see that the second one actually did the rescue call. But if they simulated them separately, then the transaction, the second transaction would fail, and they wouldn't actually, without calling the call to uniswap. So that was the hope, is that the bots weren't smart enough to actually detect us.
00:27:41.018 - 00:27:49.924, Speaker A: And was the individual, like the first entity calling it, guess your address or something? Did you also split that, or did you just split the contracts?
00:27:50.052 - 00:27:54.068, Speaker B: Yeah, we called from two different externally owned accounts.
00:27:54.164 - 00:27:54.728, Speaker A: Got it.
00:27:54.814 - 00:28:08.728, Speaker B: And made these calls to two separate contracts, one of which would activate the contract that would actually do the rescue, and the other which we would call a contract that would then call that contract, which would then do the rescue. And we hoped these transactions don't look at all related.
00:28:08.824 - 00:28:09.324, Speaker A: Cool.
00:28:09.442 - 00:28:33.028, Speaker B: The different gas prices and everything, but different senders called different contracts. But yes, if you ran them both, then you would see this. So, unfortunately, we didn't manage to get both transactions in in the same block. The strategy was not itself fully tested. We didn't see whether it would have worked if we got in both transactions in the same block. The second one ended up in either the next block or maybe a couple of blocks after that.
00:28:33.114 - 00:28:41.770, Speaker A: I can understand the architecture of the action that you're trying to perform, but why in the same block do they have to be sequential? You don't want anything in between.
00:28:42.140 - 00:28:46.424, Speaker B: Well, so what actually happened was we got the first transaction in one block. Right?
00:28:46.462 - 00:28:46.724, Speaker A: Okay.
00:28:46.782 - 00:29:27.188, Speaker B: But as a result, the second transaction, when run against the current blockchain state, when some generalized front runner was trying to look at what it would do, the second transaction would make that internal call to Uniswap when they ran it against the current state. And so the reason we wanted it in the same block was on the hope that the generalized front runner wasn't running all the transactions in that block, which would be somewhat more computationally intensive, that running all transactions of the mempool in sequence, or constructing candidate blocks and running them and seeing what happened in each transaction in them, we were hoping they were running the transactions individually. So this didn't work. We actually got front run.
00:29:27.274 - 00:29:30.344, Speaker A: Okay, which part got front run, though?
00:29:30.462 - 00:30:00.976, Speaker B: The second transaction. The second transaction was basically a naked call. It was routed through two contracts. It was like a nested internal call, but nevertheless, when you ran the transaction against the current blockchain state, it resulted in the uniswap burn call being made, the call that could be used to pick up the free money. And so we were basically sitting ducks with that transaction in the mempool by itself. And so the transaction did get front run. Some crazy bot came in and burned a bunch of gas tokens and picked up the money.
00:30:01.078 - 00:30:08.916, Speaker A: Damn. Did your first one go through correctly? And then it was the second one that they front runned, because the second one was the one where you actually got that. Okay.
00:30:09.018 - 00:30:43.516, Speaker B: That's right. So this was a strange experience, because while we were. We were spending, like, hours trying to write these contracts and write the script that would submit them and test it. And this whole time, it felt a little like being paranoid, or we were like, why does it actually make sense for us to be doing all this? And we knew intellectually this is a huge risk that this would happen. But it wasn't until it actually happened that you could really believe it. You know, like in the. In the beginning of a quiet place where the kid gets eaten by the monster in the flashback or sort of the prehistory.
00:30:43.516 - 00:30:50.690, Speaker B: So I think the reason they do that in the movie is otherwise everyone's going to look really stupid, being super paranoid about saying anything.
00:30:52.820 - 00:30:54.656, Speaker A: I don't know the reference, but, okay.
00:30:54.758 - 00:31:13.144, Speaker B: This is a movie where aliens are on earth that detect sound, and so you have to be really quiet and you can't talk. So there's, like, very little dialogue in the whole movie. Yeah, but it's a situation like this where basically being detected means death, but until that happens, you can't see the monsters around. You just sort of know they're there.
00:31:13.262 - 00:31:26.840, Speaker A: Wow. And I guess, were you not sure exactly? Were you exactly sure on how the bots work? Is there a deep understanding about how these work, or is it sort of a mystery monster, like a big unknown?
00:31:27.000 - 00:32:20.872, Speaker B: When this post was published, I think it surprised a lot of people, and it surprised me when I first heard about these bots before, because this is a case where this and, like, white hat hacks are sort of the cases in which this particular kind of mev comes up and where this kind of generalized front runner happens, and most people don't encounter that on a daily basis. There was some lore in the white hat hacker community around what these bots could do. It's not all public, not even everything that's known about how they work is public, in part because that would leak alpha, basically, where if white hats actually do have to get one of these transactions included, the tricks that would work in this case, because our trick didn't work, we felt comfortable publishing this and thought that it was worth scaring everybody. But we've considered, and we have a research budget that hasn't yet been used to kind of map out this dark forest and figure out what these bots can actually pick up on and what they can't.
00:32:20.936 - 00:32:59.228, Speaker C: It'll be interesting to see, because it's sort of the same thing as in the hedge fund world or the general trading world, where there are a bunch of open source bots that can do automated trading in various ways, but they get published because they don't work anymore, because they're not profitable anymore. But you know that whatever a real hedge fund is using is this at its basis, but with some variation that now makes it profitable again. And so you kind of know what this scene looks like, but you don't know exactly, you don't know what exact models they're using, because then they wouldn't be profitable, right?
00:32:59.314 - 00:33:58.296, Speaker B: And to be honest, I think this obfuscation tactic is doomed. There's just going to be no way that just, even with a sequence of different transactions and hash precommits and all kinds of ways to get in the way of these being detected, ultimately it's unsolvable, and the bots are going to win this arms race. And the reason you can say this is because for our rescue to be successful, a transaction had to be included in an Ethereum block that made this call at some point internally to uniswap. And that is the necessary condition for us to win. Right? And as a result, because we were submitting this to these miners mem pools, some minor had to be able to construct a block that did this. And if a minor can do it, then the attacker can do it. And so I'm not sure whether they have enough computing power right now to really be like, to be constructing blocks fast enough to always get this, but that's sort of inevitable.
00:33:58.408 - 00:34:29.384, Speaker C: Yeah, I think so. They'd certainly pretty close. So, going back to what you were running, your whole thesis was that if we have these two separate transactions, and they both get included in the same block. The theory is that they're not constructing and executing a whole block, because then again, they would see that call being made. But just running one transaction against the current state, and if they did this for each of them individually, they'd run the first one. See, oh, this only activates a contract. It doesn't give me any money.
00:34:29.384 - 00:35:03.792, Speaker C: The second one, oh, it just calls this contract, and nothing happens from that. So it doesn't give me any money. But constructing and executing a whole block takes on the order of like 100 to 300 milliseconds. And block time is like 15 seconds. So you have a lot of time to construct and execute full blocks. And this is with a mining client, and there are many clients and evms that aren't in production, but are way, way faster. So if you were on a hyper experimental, like, I just want to simulate shit, you could do it way faster than that.
00:35:03.792 - 00:35:11.350, Speaker C: Probably down towards like ten to 50 milliseconds. That gives you a lot of simulated blocks per block round chance.
00:35:11.800 - 00:35:56.468, Speaker B: That's right. And you can imagine this running as like a cluster of huge high memory nodes on AWS. There's really sort of no limit on how parallel, for example, this could be. Right? That's why I say I don't think there's a way actually to obfuscate your transaction when ultimately at some point, an internal call is to be made that you're trying to hide. There's no way to hide it, because ultimately, yeah, they can just do whatever a minor does and do it maybe like ten times in parallel with different combinations of transactions at the mem pool. Who knows? And I think that ultimately is why that's a dead end. The way to do it right now, the cutting edge on this is submitting the transaction directly to a miner, so it gets included in a block without ever touching the mempool or being published to anyone else.
00:35:56.554 - 00:36:06.676, Speaker A: Yeah, I was going to ask if the miners run this themselves, then that would skip this problem, I guess. I don't know if that's actually how it works.
00:36:06.858 - 00:37:14.588, Speaker B: Okay, so first I'll talk about, I think, white hat miners and miners being able to be really helpful in actually being able to do this. And this is something that actually happened subsequent to our post. And then I'll talk about the future and why it might be worrying if miners start to essentially try to extract this value themselves. So the best way to ensure that your transaction doesn't get sniped by any of these bots is just not to show it to them and to have it be included in a block without ever being published to anyone, with only being in the mempool of a single mining node. So if you happen to be an Ethereum miner or you're close friends with one, you can basically get them to include this manually in their blocks without propagating it. When we were in this situation, we didn't know any miners, so we had to make do in the public mem pool. A couple of weeks later, Sam's son, the person who we who paradigm, just hired the starts of that contract security researcher, actually found a bug in a DFI contract that put him in a similar situation, except with $10 million on the line instead of 10,000.
00:37:14.674 - 00:37:15.272, Speaker A: Whoa.
00:37:15.416 - 00:37:41.344, Speaker B: And the way he got out of it was pulling an all nighter with some other people in the security community and miners to be able to actually get this included in a block without ever being published. And so this is a great story. It's a follow up, sort of kind of sequel to my dark forest post. This post is called escaping the dark forest, and that's actually what they did. They got a transaction included that skipped the Memphis and therefore skipped all these monsters.
00:37:41.472 - 00:37:43.750, Speaker A: Is that actually published? I don't think I saw it.
00:37:44.060 - 00:37:44.472, Speaker B: Yeah.
00:37:44.526 - 00:37:47.130, Speaker A: Cool. We'll definitely include that then. Cool.
00:37:47.740 - 00:38:27.732, Speaker C: This is, in general a very controversial topic because it's been often discussed of should miners have their own private network amongst each other, because that would lower uncle rates and we could increase blocks and a bunch of other things. But then you're obviously centralizing between just these miners, cabal. Yeah, exactly like you're forming this strange thing, but in an interesting way, you can sort of have the best of both worlds. If you go proof of stake, because then the validator set is known, it will change by the protocol, but the set is at least known, so you could submit something to just this set.
00:38:27.866 - 00:38:46.936, Speaker B: That's true. Although. Although then you have to. So in that case, you have to trust that the stakers that you're submitting it to aren't going to take the meb themselves. And this is true of minus two. If you give this to the mempool, in this case, it was spark pool and they were honest and published a transaction in the block without sending it to the mempool. If they're honest, then you're fine.
00:38:46.936 - 00:39:27.640, Speaker B: And this is a great situation. If they just chose to extract it themselves, there's nothing you could do about it. And so you do have to reveal this to somebody. Now, I think it's a better situation than having to reveal it to everybody. And generally, I think miners so far have tended to act in a kind of rationally altruistic way with respect to not kind of extracting mev themselves in the future. I think that's likely to change, in part because if you're a miner extracting MeV, you can get so much value potentially from that MeV that that can offset your computation costs and make you a more competitive miner. And so miners that don't try to do this in any way will get competed out by those that do.
00:39:27.790 - 00:39:44.108, Speaker A: Oh, no, but wait, when you say a minor, it can't be just one minor can actually do this better. Right, because you need a lot of miners to accept this, too. I don't actually understand. Do you have to have a pool? How does it work that you'd actually get these miners to do it?
00:39:44.194 - 00:39:50.456, Speaker C: Well, it's still a valid block. So by the protocol, the other miners would accept it.
00:39:50.498 - 00:39:50.704, Speaker B: Sure.
00:39:50.742 - 00:39:55.004, Speaker C: They could run their own analysis and reject it, but then you're breaking the protocol.
00:39:55.052 - 00:40:39.468, Speaker B: Right, exactly. So it's one mining pool that they submitted this to, spark pool, and I don't know what percent, maybe 20% of ethereum blocks. So that ensured that this transaction would get included at least relatively soon. And then once it's included in a block. Yeah. The other miners build on it same way they normally do. But this is a risk and potentially one that could destabilize the consensus process itself, because if one of those other miners was really malicious, what they'd do is they'd roll back, they'd fork out your block, they'd look at your block, see the MEV in it, fork back, build on top of its parent block, and include the transaction and extract the MEV from it, and then continue.
00:40:39.468 - 00:40:45.900, Speaker B: And this means that potentially you'll have this war happening not between frontrunners, but between miners.
00:40:45.980 - 00:40:46.332, Speaker A: Whoa.
00:40:46.396 - 00:41:11.656, Speaker B: Where they're all trying to fork each other out and all trying to destroy each other. And the war between frontrunners mostly only shows up for the end user as being like, just weirdly high gas costs. And sometimes transactions do weird things. This would show up as quite often having rollbacks and conducts. So that would be quite, and we're not in that situation yet, but it's possible if MeV gets too big without other ways of addressing it, is there.
00:41:11.678 - 00:41:17.012, Speaker A: Any way to prevent this? I guess somebody's got to be doing some research in that direction.
00:41:17.156 - 00:41:38.384, Speaker B: A lot of people are. If you are working on this, please reach out to paradigm. You can reach out to me at Dan at paradigm XYZ, or find me at Dan Robinson on Twitter. Because we love talking to people who are interested in this space and we're interested in making investments in this. A few of our portfolio companies are working on ways that could mitigate this.
00:41:38.502 - 00:42:16.540, Speaker C: I think there's a lot of, I've heard a couple of different proposals. I mean, there are ZK versions of these proposals to avoid front running, but there's also some companies have reached out to us to use the parity secret store, which is like the miners could deploy a distributed key generation mechanism so that you can actually encrypt the state of transactions, but miners can still decrypt it, run it, make sure that it's valid, include it, all this stuff. So it's kind of like this idea of just sending straight to the miners, but you're sending it to the public, just encrypted and the miners can decrypt it.
00:42:16.610 - 00:43:10.030, Speaker B: So, of interest to your listeners, there's a lot of ways that potentially cryptography could be used to ensure that transactions can't be read by the miners and they won't know what's going on in them until after they've been included in a block in addition to encryption. Another way you could do it is vdfs. So verifiable delay functions. If, for example, every transaction itself had to have a vdf on it, that was like 15 seconds, that would mean that nobody would be able to create a transaction in response to one that's already in the pool. If a transaction had a time lock encryption on it that prevented it from being seen for 15 seconds, then it would be included in the block, potentially not decrypt until after you don't know what the state of the block is until after the block has already been constructed. But these are generally ways of either separating transaction inclusion order from transaction execution, or blinding whoever is executing or sequencing the transactions from what they're actually doing.
00:43:10.880 - 00:43:29.540, Speaker C: Yeah, and they all have various trade offs in terms of like centralization, complexity. Ux, if you have a VDF on everything and like it starts getting really complicated. Yeah, I think it's an interesting space. I haven't dug super deep into it, but there's a lot of interesting stuff that you can do there.
00:43:29.690 - 00:43:37.544, Speaker A: Is this an ethereum problem? Is this only for ethereum problem? Is this a problem that every blockchain is going to have or has?
00:43:37.742 - 00:44:07.648, Speaker B: Bitcoin has mostly avoided this problem because there isn't all that much mev on bitcoin. So like we talked about before, if you submit a transaction just spending your bitcoin, no one else can submit that transaction. Nobody else can basically do anything to interfere with it. As we start to see more things built on bitcoin, like lightning, for example, a payment channel provides a way to get mev. It requires quite a lot of work from the miners. It's much more than just front running a transaction. It requires censoring for potentially a long period of time.
00:44:07.648 - 00:44:48.908, Speaker B: But that's one way in which miners could potentially extract value by manipulating transactions in the pool in a way that could ultimately both mess with lightning and mess with bitcoin consensus generally. Another way is just the transaction fee itself is a kind of mev. Including a transaction with a very high fee is obviously minor extractable value. Right. And actually there's a paper called on the instability of bitcoin in the absence of the block reward, which talks about how if transaction fees are the main way that bitcoin miners are paid, then it becomes much more profitable to do weird strategies where you roll back other people's blocks in order to steal the high transaction fee transactions that are in them.
00:44:48.994 - 00:44:49.340, Speaker A: Okay.
00:44:49.410 - 00:45:18.752, Speaker B: And that this could potentially, and then you get into games where you might want to leave transactions in the pool so you don't get rolled back. And ultimately, there's not really an equilibrium to this. And so it results in this instability of the consensus system itself. So I do think as miners get more sophisticated and competitive, even on simple chains like bitcoin, this will be a problem, and it certainly will be a problem on any smart contract chain that uses roughly, ethereum's model of the contracts are public. The transactions are public in a mempool.
00:45:18.816 - 00:45:25.320, Speaker A: Well, this also, I mean, I guess this will carry forward onto any sort of eth two or sharded blockchain as well, would it?
00:45:25.470 - 00:45:44.272, Speaker C: Yeah. And I think the only thing that we've talked about on this show that I think starts to address this is like Zexi, where contracts are private, the calls to those contracts are private and everything down that line, but then completely different model of programming and interacting and everything else.
00:45:44.406 - 00:46:13.736, Speaker B: It is also, in theory, the miner could just say to users, you have to unblind your transaction to us. So if the user is capable of unblinding a transaction, this is kind of a hard problem. Maybe you could do something with deniable encryption. I don't know. But if a user is capable of unblinding the transaction, of showing the minor, then the miner could potentially extort that out of them. This is just a really hard problem. It's just like game theory in what's in some ways an iterated game, but in some ways a free for all.
00:46:13.736 - 00:46:48.260, Speaker B: And this competitive dynamic, what scares me most is the issue that it really doesn't matter how honest and proof of work like miners are, because ultimately the least honest ones, the most extractive ones, potentially will win and will win, not just win these races, but also just outcompete the honest ones. And so that's a very worrying situation. This is all under the general metaphor of Malik, which is a popular metaphor in Ethereum, of basically coordination failures and competition leading to what ultimately is kind of like a really scary environment, like the Ethereum menpool is now.
00:46:48.330 - 00:47:14.776, Speaker C: Yeah, because even in if you paint an extreme scenario where if I'm submitting a transaction to a dex, then I also have to be running a bot to make sure that that gets in at the price that I want and et cetera, even in that world, the miner still has the advantage and can just like he doesn't have to pay a fee because he would just be paying himself.
00:47:14.968 - 00:47:25.804, Speaker A: Would this also affect PoS systems because their miners are taken out? And I know you just mentioned you gave this example of validators, but has that been considered in a POS context?
00:47:25.932 - 00:48:04.184, Speaker B: So pos is almost the opposite problem where in proof of work, because anyone can show up and compete, that's one of the best properties of it. It's also one of the scariest because it means ultimately that some malicious party might actually end up being the best, able to pay for electricity with their mev profits. Right. And be able to essentially take over the chain. Proof of stake is sort of the opposite. It's much more entrenched in that the large owners of stake and those that they've delegated to, ultimately they're harder to displace. You can't just have some random party come in with a better strategy and beat them because they don't have all the stake.
00:48:04.184 - 00:48:20.704, Speaker B: And it's hard for someone new to come in and buy up all that stake from them. They'd have to sell it. But as a result, this does mean that if ownership of your coins does get captured, that potentially the whole chain is basically locked down. And ultimately, if that turns out to be a corrupt oligarchy that's running the.
00:48:20.742 - 00:48:24.148, Speaker A: Chain, then trust is lost completely, I guess.
00:48:24.234 - 00:48:48.700, Speaker B: Yeah. And decentralization is lost and potentially, and censorship resistance. And so I do think in the medium run, proof of stake will likely work a little better than proof of work in this because the competition just isn't, isn't as fierce. But ultimately, I don't think it's an ideal situation to have basically trust that these large whales have the chain's best interest at heart.
00:48:48.770 - 00:48:49.390, Speaker A: Yeah.
00:48:50.640 - 00:49:24.720, Speaker C: They still have to be considered malicious. Right. I mean, that's how you always have to build a protocol. You have to consider all validators malicious at a base level, and then you hope that two thirds of them aren't. But it's still interesting because, I don't know, in the minor world the miners are known, like, if spark pool gets a bad reputation because they're doing this bad shit, you have the same kind of effect there. Like, the people who use that pool is going to move away. And so same thing with validators who are getting a lot of nomination.
00:49:24.720 - 00:49:49.950, Speaker C: Like, if they behave badly, maybe people nominate someone else. Although we aren't really seeing that. We're not seeing nominations being that sophisticated. We don't see nominations that have the chain's best interests in mind. And so I wonder if we'll get to that point or, like, if it's currently all nominees are just basically people who seek higher interest rate than their bank will give them.
00:49:50.880 - 00:50:49.388, Speaker B: Yeah. So I think that's one of the big structural risks for proof of stake long term. It's also a risk for proof of work. And I mean, right now proof of work partly works because the mining pools tend to be long term rational, where basically they know, and this is true on bitcoin and ethereum, they know that doing things like double spending attacks and rolling back the chain or really aggressive extraction of mev could basically break the chain itself and mean that all their mining equipment is worthless. Right. And this is similar for proof of stake where, yeah, there's probably some abuses you can get and do at the edges, but if the consensus set gets too dominated by someone and they start extracting too much from it, then it kills the chain and ultimately their coins are worthless. And so arguably this has maybe happened to eos, where I think the perception that block production is centralized or cartilized and run by a small group has meant that the chain itself has been less competitive.
00:50:49.484 - 00:51:25.230, Speaker A: Yeah. So it sounds like this is a space that there's no conclusions yet. There's still a lot of research to be done and we have to keep our eye on it. It's been kind of fascinating to even visit this part of the blockchain world. I had not spent much time thinking about it until your blog post and even more so now in this interview to sort of switch gears for this last point. You're in this role where you do research for this VC firm. You're spending a lot of time kind of like communicating this outward, and I wonder what your feelings are about that.
00:51:25.230 - 00:51:35.680, Speaker A: Do you sort of see that like this blog post that you wrote, like creating the story out of it? Do you find this like something that's important for you to be doing or your firm?
00:51:36.100 - 00:52:15.964, Speaker B: Absolutely. And it's really what made you excited about joining a firm in the first place is. Well, first there's this intake step where basically I get to a very sort of broad overview because we have people coming and pitching us. I'm out there always looking for potential new investments or developments that are meaningful to our existing investments. And so I feel like I get this kind of perspective where I get to see a lot of ideas and then process and pick out some of them and then try to communicate them to a broader audience, basically in order to make it easier for more projects to form that are working on these things. So this is a lot of what I've done in DeFi is sort of publishing out papers with like DeFi ideas. And this happened.
00:52:15.964 - 00:52:51.604, Speaker B: I published a paper called the Yield protocol, and then ultimately an entrepreneur came that wanted to build it, and we're actually incubating them now. And so this is meaningful effects for the fund. But with the Mev post also, we were basically trying to seed startups out there to be like, look, this is a serious issue. It's potentially going to threaten crypto. We think there could be both promising investments and potentially really important ones to be made in this area. And so it's kind of a call for startups to do this. And so trying to some extent set the agenda on it or get these ideas out there we think is really valuable in these cases.
00:52:51.604 - 00:53:11.904, Speaker B: Much more valuable than keeping this alpha to ourselves would be, because ultimately, paradigm really depends on the crypto space working. That's the most important factor for us being successful. And so anything we can do to kind of advance that, including inspiring these new projects, is worth it, even if we don't capture the gains, even if we don't actually make investments in them.
00:53:11.942 - 00:53:27.328, Speaker A: Do you sort of see, though, the strength in adding that emotional side of it, the storytelling, the metaphors? It takes it a little bit away from the technical, but I actually think it's incredibly useful. It's not done that much. I feel like it's kind of missing.
00:53:27.504 - 00:53:58.604, Speaker B: Absolutely. And I used to read there's a fantastic book called the Cuckoo's Egg, which is about tracing a hacker in, like, late 80s on the computers. Ghost in the Wires by Kevin Mitnick. There's, like, great sort of hacker fiction, hacker nonfiction, that's actually quite thrilling to read, even though it gets into technical stuff that you have no idea about. But when you explain it really in terms of this story, you don't really have to. And in fact, it's much more interesting than the fiction about hackers is where they got a million screens and they're just like, typing on numbers keyboard, right?
00:53:58.642 - 00:54:00.860, Speaker A: Plowing down the screens vertically.
00:54:02.320 - 00:54:13.120, Speaker B: One of the most rewarding things for me of publishing this story was the people who didn't know anything about crypto at all, maybe weren't even interested in crypto, even after reading the piece, but thought it was a fun kind of cyber thriller.
00:54:13.200 - 00:54:13.876, Speaker A: Cool.
00:54:14.058 - 00:54:26.788, Speaker C: Yeah, I think it's one of the few crypto blog posts, pieces, whatever, that I saw on hacker News actually end up there and get somewhat popular, where normally hacker news is really crypto averse.
00:54:26.964 - 00:54:36.730, Speaker B: Yeah, hacker news hates crypto. And most of the comments were like, crypto is stupid, but this is kind of fun. So I was like, I'll take it.
00:54:38.220 - 00:54:44.552, Speaker A: Well, on that note, maybe we wrap up and say, thank you so much for coming on the show, Dan.
00:54:44.696 - 00:54:45.820, Speaker C: Yeah, thank you very much.
00:54:45.890 - 00:54:47.020, Speaker B: Thanks so much for having me.
00:54:47.090 - 00:54:56.664, Speaker A: And looking forward to your next story of visiting some part of the dark forest that is ethereum. And to our listeners, thanks for listening.
00:54:56.792 - 00:54:58.060, Speaker C: Thanks for listening.
