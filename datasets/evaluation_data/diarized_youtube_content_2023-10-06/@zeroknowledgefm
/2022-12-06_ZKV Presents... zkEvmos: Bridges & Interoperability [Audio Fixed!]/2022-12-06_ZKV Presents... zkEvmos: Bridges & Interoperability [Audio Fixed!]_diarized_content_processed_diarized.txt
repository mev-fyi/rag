00:00:00.810 - 00:00:32.360, Speaker A: We're here for ZK Esmos, an event where we're going to be talking about bridges and interoperability in an Esmos context. This is a topic that I think is becoming extremely relevant. And using ZK in bridges and interoperability is sort of the thing that we wanted to cover today. This is brought to you by the ZK validator. We've been around since 2019. We're validators on a number of networks, including a number of Cosmos networks. I think I have a slide about that.
00:00:32.360 - 00:01:15.780, Speaker A: And what we do is we will either be working with projects or networks that have ZK built in, or we work with networks where we think that we could potentially bring something to the table. We can introduce them to ZK concepts. We can start building communities to start thinking about that and seeding that kind of development. As I was just mentioning, we are already on four different kind of cosmos ecosystem networks. We started on the Cosmos hub, Osmosis, Agoric and Evmos. We're also on some other networks, including a few on Polkadot and near Mina cello. We are also on a lot of testnets, so you might see us around there as well.
00:01:15.780 - 00:01:49.120, Speaker A: I want to share a little bit about who we are, what we are. We're here to sort of, like I said, we're working with a lot of networks that either have ZK built in, baked in, or we're actually bringing that. And the way that we do it is we become advocates for privacy on those networks, as well as ZK Tech. We participate in governance. We support emerging teams through either introductions or sometimes as well, through funding. And then we launch initiatives to promote and fund ZK tech. This is our.
00:01:49.120 - 00:02:11.558, Speaker A: Oh, and we're actually missing someone. We're missing Pierre. I just realized. And we also are hiring. So if you're interested in kind of what we're doing and you think you have something to share, we are looking for specific roles, usually people in the UK. But if you are interested anyway, I think we're always happy to hear from you. Yeah.
00:02:11.558 - 00:02:14.680, Speaker A: Agneska, do you want to share a little bit about the goals of this event?
00:02:15.050 - 00:02:56.850, Speaker B: Of course. Obviously, we want to introduce ourselves to the wider Evmos community, but we also want to hear from you. We want to hear about your needs, your interest in ZK space. So if you have anything that you would like us to discuss further, maybe in the next sessions, just put it in the chat. Of course, we want to explore the topics of interoperability and ZK in a cross chain context. So this is what we're going to discuss today, hear about new projects, building these technologies. I'm pretty sure we're as excited as you are, guys, just to listen and learn about all those new projects and technologies.
00:02:56.850 - 00:03:34.510, Speaker B: And we want to identify where we are, what are the opportunities for ZK in fmos. So this is the goals for the event today and our schedule. We are bringing really exciting projects for you today. So this is the schedule for today, our introduction. So this is what we're doing with Anna at the moment. We're going to start with electron Labs, with garvet Goel, who is already, I see, ready for his session. After that, we're going to jump to Yale University.
00:03:34.510 - 00:04:05.482, Speaker B: After that, we're going to have Nel foundation with Mika Komarov, who is the founder of the Nell foundation. And we're going to finish with a big boom with Fireside with Nick Z from Ermas. We're going to grill them a little bit. I saw the questions, and they're really good. So stay with us till the end. And of course, at the end, we're going to have a wrap up, and also we'll try to answer all your questions during the event. So under the sessions, you see Q A.
00:04:05.482 - 00:04:30.930, Speaker B: This is where I'm going to pull out all the questions that you have. One thing that we didn't mention on the presentation, and I think it's very important to say as well. Please do not click the blue button. Share audio video. This is only reserved for the speakers, so if you're going to share it, unfortunately, you're going to be rejected. So that's for everything for today. The next slide.
00:04:30.930 - 00:04:37.214, Speaker B: Oh, I can't hear you, Anna. I think you muted.
00:04:37.262 - 00:04:56.170, Speaker A: I'm muted. I just want to say one more thing about the interface, because I know a few new people have arrived. If you're not familiar with. Hop in. There's two chats, there's an event chat and a sessions chat. So for this session, try to chat in the sessions chat. Otherwise you're sort of chatting in reception, sort of a funny little nuance of hopping.
00:04:56.170 - 00:05:40.330, Speaker A: All right, I'm going to share a little bit about some other initiatives that we have going on. So, ZK validator, kind of co created along with the ZK podcast, something that I host, we co created something called the ZK Hack. It's an event series as well as there's whiteboard sessions, and it's kind of like a community of ZK learners. So if you're here more on the ZK front, be sure to join Zkhack. Actually, maybe we can dig up a link to that at some point in the next few minutes so we can share just sort of how to get into the Zkhack discord. And yeah, this is a place where if you're actually interested in learning about how ZK works, this is a really good place to start. We're actually spinning this out into a new.
00:05:40.330 - 00:06:29.238, Speaker A: And there is an event that I just want to mention that starts on November 22. We actually do a multi week workshop and puzzle hacking competition. It lasts for four weeks. There's a ton of workshops and sessions, and it's a really good way to get yourself onboarded if that's what you're interested in. Another thing that ZKV has championed and done is this open legal report. So we've brought together a number of lawyers and team like product people and founders who work in the space in ZK specifically in order to understand what the challenges are around working with ZK and privacy tech. Obviously this summer we learned through the Tornado cash sanctions that there is some work that needs to be done and there's some understanding that needs to be had by all these teams in order to better operate.
00:06:29.238 - 00:06:59.022, Speaker A: We also do another thing, and that's early stage funding and funding support. So we actually co ran the recent Gitcoin ZK tech side round with Xeroxpark and we also do invest ourselves into ZK projects. So I just wanted to highlight that it's something a lot of people might not know about. ZK validator. All right. The support for this event actually comes from the Cosmos hub. We over a year ago had a grant to do a number of events for Cosmos.
00:06:59.022 - 00:07:38.254, Speaker A: We actually satisfied the grant but had a little bit of extra funding and we decided to do another event focused on the Cosmos ecosystem. In this case, we decided to focus in on Evmos. So thank mean it's just the little leftover bits to fund it, but I'm really glad that we had that funding. So it's. Oh, the media partner is my podcast and the videos for this will be on the ZK podcast YouTube channel afterwards. So there's usually a ZKV presents playlist and that's where we put events like this. Yes, things to look out for.
00:07:38.254 - 00:08:07.714, Speaker A: Just a reminder, ZK Hack runs from November 22 till December 13, so do check that out. Zkhack three. And also we have this amazing Cosmos newsletter. And I don't know if everyone here has signed up for it, but I think we're at like issue 50 or 60 at this point. But in it, it's sort of like a really short summary of the goings on in the previous week. And it's very, very useful if you want to just stay up to date. It's not just the hub, it's really looking at all Cosmos ecosystems.
00:08:07.714 - 00:08:16.220, Speaker A: Ephemos is often featured in it. So, yeah, do check that out. And I think, Agniyeshka, if you want to take it from here.
00:08:17.310 - 00:08:38.050, Speaker B: Yes. So this is where you can find us as well. You can follow us on Twitter if you have any questions or any suggestions about the events. This is our event email and I think we're going to start. So I would like to introduce to this stage Garvet Kohl from electron wraps.
00:08:39.830 - 00:08:40.722, Speaker A: See you later.
00:08:40.856 - 00:08:54.550, Speaker B: See you. Okay, Garvet, you should be joining. Hello. So the stage is yours.
00:08:55.770 - 00:09:18.286, Speaker C: Yeah, thanks a lot. Just a second. Let me just start a presentation. I hope everyone can see my screen. Just a second. Yeah, I think so. I'll just get started.
00:09:18.286 - 00:10:05.040, Speaker C: Yeah, so basically, as Anna just introduced that Zkibc and basically ZK based powered bridging is becoming pretty interesting. So we are the company that if you guys recently saw on Twitter, we talked about ZkibC and how we can basically use zero knowledge proofs to bring IBC to Ethereum. And, yeah, we are the company behind building this. So just to get started, there are two parts to my presentation here. So first, I just want to talk about a bit about the vision and what the problem statement really is that we're trying to solve. And after that, I'll get into the technicalities of the kind of solution we offer. And towards the end, I'll just discuss a bit what is our roadmap and how basically evemos and other cosmos app chains can integrate this and start using it.
00:10:06.210 - 00:10:06.960, Speaker D: Yeah.
00:10:11.410 - 00:10:12.670, Speaker C: Just to get started.
00:10:12.820 - 00:10:13.182, Speaker D: Yeah.
00:10:13.236 - 00:11:08.754, Speaker C: So basically, if we talk about the reason why zkbridging is important. So, like we've seen with FTT recently and in the past, also at the onset of this beer market, we saw several companies that were centralized. Defi players go down as a result of being centralized. The idea is that in the long run, only those products survive that are truly decentralized. And in case of bridging, right now, the existing bridges that we have are highly, highly centralized and custodial. So the future, we believe, is that we should really have noncustodial light clients. Now, the problem is that the reason why we don't have noncustodial light clients today is because if you talk about the most popular blockchain, for example, Ethereum, then running these in order to achieve decentralized bridging, you essentially need to verify the consensus of one blockchain on the other one.
00:11:08.754 - 00:12:16.966, Speaker C: And if you do that on Ethereum today, the transactions will cost you at least $1,000 per transaction and can go up to $10,000 per transaction. So this is clearly not feasible, right? And this is the problem essentially that we're trying to solve, that if you do decentralized bridging today, it's going to be way too expensive, right? And if you specifically talk about the cosmos to eth ecosystem because of the lack of Ed 2519 pre compiles, this is a problem that exists. So the solution that we have proposed for this is we use the compression property provided by zero knowledge proofs. In our case, we use snarks where we can basically take a batch of validator signatures and create a ZK proof of that. And that basically allows us to achieve 100 x 2000 x scalability in terms of the amount of computation that you have to run on the Ethereum blockchain. So that basically brings us in the feasible realm and allows us to conduct cross chain transactions powered by IBC for just $5 today. So that's broadly the reason why ZK bridging is becoming so important and is basically the future.
00:12:16.966 - 00:13:28.110, Speaker C: It basically makes lifeline bridging feasible. So just to give a bit more context as to how this technology integrates quite seamlessly into existing bridge technology, if we talk about IBC, for example, the process is quite straightforward. You can say like all IBC and light client, which is basically have this on chain module where they have the concept of this light client which is running on chain, we simply swap that out, remove the part which is actually doing the signature verification, and add the part where we are just basically verifying the proof itself, and nothing changes on the front end, nothing changes at the interface level. So all existing applications just run the way they were running. So for example, all your IBC modules, such as interchange accounts, interchange queries, they're all compatible from day one on top of ZkiBC. So I think that's quite an exciting feature, that you can retain the model, but still upgrade the security model, just to go a bit deeper into our solution at this point. So basically ZKiBC, it's not like that, it's a perfect solution.
00:13:28.110 - 00:14:25.706, Speaker C: Zero knowledge proofs come with their own performance penalties, and right now they do introduce an additional cost and time of 3.6 minutes and $5 to the bridge transactions. While these are not desirable, they're not too bad that one can actually use these bridges today. Having said that, we would like to definitely reduce them over time and get the latency down to a couple of seconds and basically get the transaction cost overhead to virtually zero. And that's sort of our goal going forward also to improve the performance of the bridge in terms of the latency and the transaction cost. So basically, we are using two approaches to achieve this. The first one is in fact one of the, we are actually talks with multiple hardware companies today to understand how we can use specialized hardware such as fpgas and asics to really achieve.
00:14:25.706 - 00:15:28.566, Speaker C: And I think the initial numbers that we believe are possible are five to ten x reduction. In fact, I think we were just today itself talking to one of the speakers that we present going forward in this session today. Another approach that we're taking is use of recursive proofs. So recursion has this grace property that allows you to combine multiple different proofs into a single proof. So basically, imagine that all the different headers coming from all the cosmos app chains in the ecosystem could be all reduced down to a single proof. So one would be submitting one single snark proof on Ethereum for the entire cosmos ecosystem, and over time, even for other blockchains also. So basically, the idea is that you are able to achieve this sort of, this header aggregation, or the way I like to call it, basically network effects, that as more and more chains join this network, the transaction cost on a per transaction basis will continue to go down.
00:15:28.566 - 00:16:15.700, Speaker C: And basically the transaction overhead of the ZK proof will become virtually zero. And this will basically allow us to achieve a bridge performance that is at par with custodial and centralized bridges. And basically at that point, there will be no reason to use a centralized bridge because you get the same performance in terms of transaction cost and latency, while having much higher levels of security. So we believe that recursive proofs will really enable that kind of future to be realized. Yeah, I just want to talk about the roadmap here. So I think most people right now think that ZK bridges are probably a year away or several months away. But I just want to say here that we are looking at internal timelines in terms of number of weeks.
00:16:15.700 - 00:17:07.974, Speaker C: So this is coming quite soon, not that far out. And in fact, we already published some of the numbers when we posted our initial proposal on ETH research. So in fact, if you're an app chain, you can actually reach out to us and we'll start shipping the integration docs quite soon. And just to talk about some interesting angle here. So what is the purpose of shipping ZKiBC and where does it go from here? So I think cosmos ecosystem as a whole can benefit significantly. For example, if you talk about the concept of interchange security, that is becoming really interesting in terms of producer chains and consumer chains and mesh security, I think once IBC is connected to Ethereum, even Ethereum can start providing its security to various app chains. I think that's one of the very interesting research areas that could become important in future.
00:17:07.974 - 00:18:12.586, Speaker C: Secondly, I think over time, as the number of app chains grow in the cosmos ecosystem, the transaction overhead of verifying these IBC connections could basically significantly increase and start occupying a large amount of the block space in tendermin blockchains. And at that point, to basically enable point to point bridging, you will need ZK proofs to really compress down to all those connections and submit them on chain. So at this point, I just want to talk a bit about our team. So we are a team comprising of people who have strong experience across web two and web3 domains, have strong experience in shipping great products and working in deep technology, and are very well positioned to basically bring this product to market. Yeah. And I think finally the most important, I consider this the most important slide. As I said, this is actually coming much sooner and in a couple of weeks and any cosmos appching that is looking to use this can reach out to us today and we can start the integration process very soon.
00:18:12.586 - 00:18:15.020, Speaker C: Yeah, that's all from my side.
00:18:16.750 - 00:18:39.460, Speaker B: Thank you. Thank you very much, Garvet, for your presentation. I'm pretty sure it was as exciting as for everybody else's for me. So thank you very much. And the next presentation I'm inviting to the stage fan Zhang, that will talk about Ziki projects. So fan, you should be able to join now.
00:18:46.200 - 00:18:46.950, Speaker E: Hello.
00:18:48.140 - 00:18:52.440, Speaker B: Yes, we hear you well. So please start your presentation.
00:18:54.780 - 00:20:05.702, Speaker E: Okay, let me share screen. Can you see the screen? I'm assuming you can. All right, well, thanks a lot for having me. So I will take this ten minutes to briefly introduce the recent project done by a collaboration of people from Berkeley and Stanford, Texas and Yale and Xinhua University. This project is called the ZK Bridge through ZK Bridge. We want to make trustless cross chain bridges more practical. So I think the previous talk set up the stage well.
00:20:05.702 - 00:21:05.930, Speaker E: So I guess I can just jump right in. The core functionality of a bridge is pretty simple, right? It allows a smart contract on chain two to access the state of the different chain of, say, chain one. Right. The API can be as simple as just like that, get the state at a particular address at a particular height. The concept of bridge is related to the notion of light clients, state proofs, cross chain swaps, et cetera. But bridge is different in that it requires a different set of properties. We want the bridge to be generic and to be universal in that it should support many different applications and it should be efficient to operate on chain and particularly crucial for infrastructure like bridge.
00:21:05.930 - 00:22:39.538, Speaker E: We should minimize the trust in that we should try our best to not put extra trust on the operator or on a committee, or basically to avoid extra trust as much as possible. To achieve all these properties at the same time seems challenging, right? Existing bridges can be roughly divided into two categories. Generally, one approach is to introduce an intermediary to facilitate the bridge, such as a side chain or a committee or some other architecture. This approach typically enjoys very efficient on chain verification. Typically the receiver chain only need to verify rather simple cryptographic evidence such as a multi sig. The downside, however is they introduce extra trust in these intermediaries, either in the form of some threshold assumption or assuming certain parties have this independent interest. While the second approach is to try to get rid of the intermediary by running a light client protocol directly on chain, like the previous talks introduced as well, the idea is to run the light client verifier on chain.
00:22:39.538 - 00:23:41.954, Speaker E: But of course the downside of this while the upside is now the prover in the light client protocol is only trusted for live needs. They are not trusted for security, they are only there to provide the proofs, which is only needed for live needs. But as the previous talk also mentioned, the cost of running light client protocols on chain directly is quite prohibitive because light client protocols are typically designed for off chain parties. One example in this category of solution is near's Rimple bridge. For example, they have a light client protocol implementation as a smart contract. But in order to avoid the expensive on chain verification, they had to introduce a watchdog service to make this somewhat an optimistic protocol. So it seems like neither trade off seems to be very desirable.
00:23:41.954 - 00:24:46.686, Speaker E: We want both trust and minimization and efficient on chain verification. So can we achieve both with ZKP? Yes, we can. ZKP is ideal tool that achieves both properties we desire. With zero knowledge proofs we can replace honest assumptions with cryptographic assurance. We can ask the committee, ask the sidechain or however you call it, to generate a proof instead of trusting in their honesty. And zero knowledge proof typically are efficient to verify on chain and the verification can be even independent verification cost can be even independent of the off chain computation, so you can verify a lot of computation in a very short and concise proof. This is the high level architecture of Zkbridge.
00:24:46.686 - 00:26:38.834, Speaker E: It generally follows the light client approach, so we run a light client verifier contract, called a updater contractor contract on the receiver chain. However, instead of directly running the like client protocol, the verifier contract only checks a proof generated by untrusted approver. So the proof essentially proves that the chain has advanced from a previous state HT to a new header, HT plus one. The exact statement of this proof PI is closely related to the consensus protocol, but for many proof of stake blockchain, it looks like a statement that there's enough signatures on this new header by a committee that's identified in the old header HT. And this architecture also allows the developers of applications to work with the chain in a more modular fashion, in that the bridge provides a simple and unified interface, which is the updater contract, and application developers can build more complicated application level proofs on top of this using the modular design. So the advantage of this architecture, as I have mentioned, is this kind of achieves both minimized trust and efficient onchem verification. Right? Purpose built snarks is far more efficient than directly running the live client, and it's permissionless and decentralized by design because provers are not trusted.
00:26:38.834 - 00:28:12.022, Speaker E: So anyone can join as a prover and it's extensible and universal. As I said, developers can develop their own applications on top. But so far I have been avoiding one unpleasant choose that is, snarks are generally very expensive to generate, all right? And to make things worse, blockchain protocols are not designed to be exactly ZK friendly in that they're not designed to be proven using zero knowledge proof. Right? For example, common digital signatures like EDDSA is actually quite expensive to express as a zero knowledge proof circuit. So as a result, because state transition usually involves hundreds of signatures for verification, even simple tasks like proving verifying all the signatures in a particular blog header can be extremely can be prohibitively expensive if you compute the proof naively. So, our core technical contribution in the recent paper is we came up with a series of ideas that make this proof generation time to reduce the proof generation time significantly and to make the VK bridge architecture practical. So one of the core idea is a new snark protocol called D Virgo.
00:28:12.022 - 00:29:22.700, Speaker E: This is a distributed version of the Virgo zero knowledge proof protocol. The speed up stems from the fact that there is a lot of data parallelism in the circuit that verifies signatures for a block header. Basically, Divergo makes use of parallel machines to speed up execution and it enjoins what we call optimal parallelization. For example, if you deploy 100 machines to compute divergo proof, you essentially get 100 times speed up, so it scales perfectly linearly with the number of machines, this is quite optimal. Also, we further reduce the proof size and the verification cost by recursive proof. We run Devorgo verifier in gross 16 and only post the graph 16 proof on chain. Another idea that can further reduce the cost is by batching verifying multiple headers in one go.
00:29:22.700 - 00:30:15.980, Speaker E: So, to show this pictorically, Divergo has very fast proof generation, but it generates relatively large proof. In relatively speaking, graph 16, like protocol is slightly slow, is slower, but it has constant proof and the verification. By combining the two, we kind of get the best of both worlds. We can get the constant size proof and the verification with only a slightly increased proverb time. So in the interest of time, I will invite you to check out the performance numbers in the proof with this slide. I just want to show you with just a little bit more, 5 seconds more in proof generation, we can reduce the proof size by several orders of magnitude. So is the verification cost.
00:30:15.980 - 00:31:09.660, Speaker E: So I will basically wrap up here. So ZK bridge is this trustless bridge with snarks. And to learn more, please go to our website where you can find the paper and the contact information for all of the authors. And we are more than happy to talk with all of you about what to do next, because the technology, this is merely the beginning. We have the protocol, but there's a lot more to be done to deploy the system, to make it really an ecosystem, open and decentralized ecosystems based on the technology. There's a lot more to be done. We are more than happy to chat with everyone who is interested.
00:31:09.660 - 00:31:14.430, Speaker E: Sorry I'm running a little bit over time, but I will stop you.
00:31:14.580 - 00:31:41.970, Speaker B: Thank you very much, van, again for a very interesting presentation. I'm very happy that we're super on time. So the next presentation I want to introduce on the stage Mikhail Komarov from Nils foundation, and he's going to show us the dataproof tool chain for bridging and scaling. So, Mikhail, I hope you can join us. Hello. Hello.
00:31:42.120 - 00:31:56.380, Speaker D: Yeah, okay, let's just. I don't know. Okay. It's not really a podcast if we don't bump each other with questions, but simply do presentations. But let's do what I will have.
00:31:57.070 - 00:32:01.194, Speaker B: Okay, I will wait till you start presenting. Yes, everything works.
00:32:01.392 - 00:32:02.430, Speaker D: Should work.
00:32:02.580 - 00:32:04.350, Speaker B: So the stage is yours.
00:32:05.010 - 00:33:09.262, Speaker D: Yeah, well basically trustless bridges, or how they are being called right now, ZK Bridges. What's that about? Right? What this was started with? This was started with, well, effectively this was started back in the beginning of 2021. This whole thing with trustless bridges with state proof bridging, it was a mutual effort of initially us foundation and salon foundation folks. We spent kind of a year hyping this up, doing these things again with minotrustless bridge. Well, they call it ZK Bridge now, but anyway, okay, whatever works for you with Solana's ZK bridge, how they call it this way. And basically what I'm going to talk about today is, well, first of all, I'm very excited. This has become a thing.
00:33:09.262 - 00:34:00.130, Speaker D: Very excited to see that people are actually building other state crews for the sake of, as they call it, ZK bridging. Even the project came up with the name ZK bridge. It's more than exciting and I thought that would became a thing, but anyway it became a thing. It's good me, I'm really glad. So what I'm going to talk about today is about our issues we faced during building that state roofs, why it didn't work out that easy, why it took so much time, what we learned and what we're ready to help with, what we would be happy to help with to any other team. Building state proofs building ZK bridge, building ZK data transfer, whatever data accessibility solution. Okay, that's what basically we have a data accessibility in here.
00:34:00.130 - 00:35:17.900, Speaker D: So basically anyone's building ZK data accessibility solution is, well, what we are ready to help with, what we're ready to facilitate with, what were our stakes, what was our experience basically? Okay, trustless data accessibility hell is this? What am I talking about? Right. Well, it's quite a widespread notion that there is such thing as data availability. Data availability usually supposes that we're talking about provable read only data that prove that somewhere a data is available to be read. Data accessibility is supposed to represent is supposed to be a notion for read and write. It's basically not only a proof that some data is available somewhere for reading, but also a proof that some data was basically written into some protocol. What about this data accessibility? Well, what about the data accessibility it includes as one of the use cases ZK bridging as well. So what does it need? Well, first of all it needs various protocols data.
00:35:17.900 - 00:36:04.858, Speaker D: We on our side facilitated that with our dbms. Basically it makes the data of a various cluster available via unified interface, just like you would have done with a regular dbms, like with SQL like interface, for example. So that's pretty much the same. And also what such data accessibility needs. It needs, well, first of all, state proofs for data sampling, like query proofs, the read part, which is about data availability. Right? And it needs also state proofs for data insertion like ZK bridging thing, a write part. Well, an example of such ZK bridging, like the first ZK bridge ever is basically.
00:36:04.858 - 00:36:52.982, Speaker D: Well, yeah, it's like an example. It was a Mina eth thing or Mina EVM thing. So it's basically if you're about to verify that with evms or any other EVM compatible protocol, application protocol, you're good to go. So it's like everything which comes out, out of a thing is compatible with EVM. So yeah, the mechanism is pretty simple. You get commit log of a cluster, you target. It can be not only it can be also like Solana, it can be eth, it can be like whatever works, it can be cosmos, it could be any IBC project with help of electron labs folks if they desired.
00:36:52.982 - 00:37:26.100, Speaker D: Help. Yeah, it can be any protocol. You basically get the commit lock from it. You put it together into a single proof, like small short description of the whole commit lock of a cluster, of a whole commit lock of a protocol. We're trying to bridge to somewhere, we're processing that, we're generating this proper state proof, and then, well, if we need it somewhere, then we submit it to a particular cluster. We're bridging that to eth. Whatever EVM compatible EVM OS works as well.
00:37:26.100 - 00:38:16.062, Speaker D: So as we noticed, it all goes down to state proofs. So state proofs is the most complicated part. Well, data source is complicated part as well, but, well, state proofs are the most complicated part right now because, well, first of all, guys, designing state proofs is hard. I mean, it took us eight months to design Mina's state proof circuit design. It took us eight months more to design Solana state proof circuit design. And when I'm talking about these timings, I'm not only talking about just a circuit design with circom or something, it required custom proof system. We'll come to why state proofs actually require custom proof system and why for example, like Circom or any other approach.
00:38:16.062 - 00:38:44.758, Speaker D: Well, it simply doesn't cut it, to be honest. Well, from my experience. Maybe I'm wrong, maybe I'm wrong, but it simply doesn't cut it. The second thing is. Yes, well, state proofs, they prove the whole protocol's commit log. It's actually a lot of computations. I mean, if we're talking about the actual, the proper state proof secure version of such one, with a properly designed one, it means really a lot of computation.
00:38:44.758 - 00:39:06.158, Speaker D: For example, from our experience, Mina state proof took. I don't even know how to pronounce this number. I mean, I just calculated it with python. I just put it into. And it's not a random number, it's basically two Pou 34. That's what it is. And I don't even know how to pronounce this number, this amount of multiscalar multiplications.
00:39:06.158 - 00:39:36.686, Speaker D: And guess what? This thing has to be verifiable with EVM. Yeah, I mean, it has to fit the proper amount of gas. Or for example, like salon estate proof. Salon state proof. It actually requires verifying 4000 EDDSA over ED 25 y nine signatures. It is, well, as folks have already mentioned, very unfriendly to. Very unfriendly to proof system.
00:39:36.686 - 00:40:44.258, Speaker D: It's a signature scheme which is very unfriendly, which is very unfriendly to be expressed as a circuit within the proof system. So basically, it takes a lot of combinations. The problem we faced with this is, well, first of all, let's say it this way. If we're talking about, there's always a choice between a security and verification cost, right? So if we're talking about like, the absolute security, like trustlessness, at its best, we're talking about some proof system which doesn't require trusted setup. So we can't use graph, we can't use KZG, we can't use anything which requires trusted setup because, well, basically nobody wants this to become a broken ZK bridge. Okay, so this has to be a proof system which doesn't have trusted setup. That's the first thing.
00:40:44.258 - 00:41:24.970, Speaker D: Second thing, it has to produce a circuit which is as close to be theoretically packed with the most density you can achieve. So it could be possible to verify that on IDM. Well, in the cheapest way. So this required us to build a specific proof system for proving a lot of computations to. So basically, Mina's case fit the stink. Solana's case fit the stink. Well, just in case Mina produced.
00:41:24.970 - 00:42:10.218, Speaker D: It's like Mina requires this amount of multiscalar multiplications to be proved every 15 minutes. Soon it will be more. Solana requires this amount of etc. Signatures to be proved every, I don't know, less than a second. Yeah, well, of course it goes down to batching, of course it goes down to recursive proofs. But anyway, recursive proofs has to be done with a proof system which doesn't require trusted setup as well. Well, and yeah, this made us to design a proof system with Blancish arithmetization over hash based commitment scheme which removed trusted setup with adjustments to the arithmetization, which made the verification as cheap as possible.
00:42:10.218 - 00:43:07.326, Speaker D: Well, it's pretty close to theoretical limit, to be honest. It's full. So what have we achieved? What have we done? What we hope will help those who desire to prove a lot of computations to EVM, or to simply prove a lot of computations, what we hope will help them. What we designed is basically zkllvm thing. It's, well, LLVM, it's a usual compiler we all love, but it's capable of generating provable code from CPP from rust, from whatever LLVM front end out there. That's basically what we resulted with after building two, like three state proofs. And we're porting our state proofs and we're porting our state proofs to that and we're going to use it ourselves.
00:43:07.326 - 00:43:56.154, Speaker D: And I encourage everyone who builds state proofs as well to port theirs to this as well, because first of all, don't trust the setup. Blancish alike proof system. The cheapest verification on EVM would you need more? Yeah. Then basically, what's the difference with compilers? What's the difference with provable computation solutions which are already out there? Well, it's basically not a virtual machine. It doesn't contain any virtual machine inside, it's just a compiler. It just packs the computation inside a circuit as close to each other as it's possible. With the biggest density it is like theoretical.
00:43:56.154 - 00:44:01.822, Speaker D: With the best density it's possible. So it's not a virtual machine. We don't have a virtual machine.
00:44:01.966 - 00:44:04.974, Speaker B: Sorry to interrupt you. You have one more minute?
00:44:05.102 - 00:44:08.370, Speaker D: Yeah, okay, that's fine. I mean, that's the last slide.
00:44:08.870 - 00:44:09.618, Speaker B: Great.
00:44:09.784 - 00:44:48.546, Speaker D: And also, well, since we understand that state trips are going to be required to be proven to different clusters, not only eth, not only EVM. Well, we introduced verifiers for Solana, for Polkadot, because simply compiling the verifier to webassembly is not a big problem. So building state proof with Zkll VM means being able to prove it to whatever place you can imagine yourself. And yes, it does generate verifiers automatically from the circuit definition in CPP, in rust, in whatever you like. For EVM, well, EVM Os folks, you can use it. Eat folks. Polygon, everyone.
00:44:48.546 - 00:45:19.686, Speaker D: You can use it. It's for you, for BPF, Solana folks here. You like? Well, okay. It's mentioned that there are others, but there are no others right now. I got to admit, there are no others right now. So this is what we came with. This is what we got as a result of our two year working around our two year work around state proofs.
00:45:19.686 - 00:45:38.900, Speaker D: We hope this will be helpful to anyone who wants to prove heavy competitions to ETH, to Solana, like who want to build state proof because, well, yeah, you don't have two years to spend. We spent two years already for you folks. Here we go.
00:45:40.150 - 00:46:06.890, Speaker B: Thank you. Thank you very much. And please share those links in the chat so we can also click ok. Ok. Thank you once again. And now I would like to invite on the stage once again Anna Rose and Nixie from Evmas fireside chat interview. Let's wait for Nick.
00:46:06.890 - 00:46:11.420, Speaker B: Okay, the stage is yours, guys.
00:46:14.530 - 00:46:19.520, Speaker A: Hello. Are you going to be video free?
00:46:19.890 - 00:46:25.158, Speaker F: I think so. I don't know. My video is working at the moment, unfortunately.
00:46:25.354 - 00:46:41.240, Speaker A: Well, then I may do the same. That's okay. It's going to be a conversation between ZK hack and question mark. Unless it's too awkward to watch two voices with no video.
00:46:42.410 - 00:46:42.774, Speaker F: Maybe.
00:46:42.812 - 00:47:01.178, Speaker A: Let me know in the chat if you really want one of us to have a video. But I think. Okay. Podcast style. Exactly. Okay. So, Nick, I want to start off, I want to get to know you a little bit and understand what your role is in the evmos community.
00:47:01.178 - 00:47:03.866, Speaker A: What are you doing? What got you interested in?
00:47:04.048 - 00:47:42.780, Speaker F: Totally. Totally. So I'm an Evos co founder alongside Akash and Federico. I think you may have spoken to Federico in the past. He's certainly been in the Cosmos sphere for a while now and I've known him for a while. I've been in Cosmos since 2017, just as a spectator. And when Federico mentioned to me last year that he was working on bringing Ethermint to market, I jumped at the opportunity to join him in doing that.
00:47:42.780 - 00:47:52.762, Speaker F: It's been a long time coming for Cosmos. I think this is like version three of Ethermint or something. We finally put it out.
00:47:52.896 - 00:48:01.246, Speaker A: Do a lot of people know the history of Ethermint and the sort of change into evmos? Maybe you can share a little bit about that, actually.
00:48:01.428 - 00:48:04.218, Speaker F: Totally. Totally. I mean, we could do a whole podcast.
00:48:04.314 - 00:48:12.834, Speaker A: Podcast episode, which I think we are due to do for this event. We're going to not do the full deep dive. But yeah, just maybe.
00:48:12.952 - 00:48:13.474, Speaker F: Sure.
00:48:13.592 - 00:48:13.874, Speaker D: Yeah.
00:48:13.912 - 00:48:50.080, Speaker F: The TLDR. The TLDR. Ethermint as an idea started off about around the same time as Cosmos, sort of the real work on Cosmos started. So after Bucky and Jay got together, like in 2016. Well, they got together much earlier. But formally, Cosmos lore begins in 2016 with working off later on in 2017. And that's sort of the earliest record I can find of Ethermint being mentioned.
00:48:50.080 - 00:49:30.426, Speaker F: And of course, there's that video from 2018 of Chris goes talking about Ethermint version two being worked on at that point. So this is 2018. Later on, a company called Chainsafe based out of Canada tries to. Yeah, they try to bring ether into market, but at the same time, Cosmos Hub is launching, or Cosmos Hub four is launching formally. And I think at the time, Federico, if I have this right, and Federico would really be the voice of authority on this, but Federico was contracting with.
00:49:30.448 - 00:49:34.940, Speaker A: Chainsafe and this is sort of the introduction then.
00:49:35.890 - 00:49:56.740, Speaker F: Right. And Ethermint sort of gets dropped as a priority in favor of all of the Cosmos hub launch stuff that's happening with Stargate and whatnot. And Federico just says, hey, you know what? We can still do this. And builds a team around the ethermint idea.
00:49:57.110 - 00:50:11.080, Speaker A: Cool. So it's really coming from that core, like the core Cosmos group and research and thought process. It was already there on the map and now we get to actually enjoy it, which is so cool and use.
00:50:12.970 - 00:50:41.442, Speaker F: And. Sorry, one last thing I think is important to mention here is that for a long time, I mean, Evmos just announced its raise this month, but for a long time, the Ethermint project and Evmos itself was grant funded through proposal number 44 of the Cosmos hub, making the ethermint launch one of the first grant funded l one launches, I think, if I'm not mistaken, out there.
00:50:41.576 - 00:51:16.720, Speaker A: Cool. All right. I want to ask a question about the Evmos priority list, basically, or focus areas, rather. The reason for this is obviously this session was very much focused on CK bridges. We are here, in a way, to also explore just generally what kind of opportunities are there in Evmos for ZK type things. But, yeah, if you were to sort of say, what are the three focus areas that the community right now is looking at and wants to highlight? And I don't know if there's a way to rank them, maybe they're equally important. But, yeah, what do you think is most important?
00:51:17.090 - 00:52:08.202, Speaker F: Totally. Totally. So the reason I brought up the grants funded point earlier, right before we transitioned to this question, was because I wanted to sort of highlight the fact that Evmos is a very Cosmos oriented project. What I mean by that is the Cosmos ethos is kind of enshrined in Evmos's development. And we, as the Evmos development core team, try to stick to that as much as possible in supporting the community and driving the Evmos roadmap forward. To that end, I think the priorities that I can talk about are twofold. One are driving use cases on Evmos that you can't really see anywhere else on any other EVM chain.
00:52:08.202 - 00:54:24.826, Speaker F: So there are things that are unique to Cosmos, like IBC, of which Federico was part of the core team for. But Cosmos chains are one of the few, if not the only chains that come built in with light client bridge compliant interfaces that support things like IBC and interchange accounts, et cetera, et cetera, and other sort of IBC based specifications like forthcoming ICS 721 specification, which is a specification for interchange nfts, essentially. And again, this would be built over IBC. And so keeping this in mind and thinking about Evmos's positioning in a world that's overly saturated with EVM block space, how can we think about differentiating providing a differentiated product, different block space for developers to build on top of and to offer unique use cases to their users, and thinking about how we can build use cases or how we can empower developers to build use cases around the EVM smart contract. So that comes with all the EVM tooling that you know and love, like foundry solidity, et cetera. But adding in the IBC superpower there to build interchange applications, I think that's point number one to consider here. But what about supporting interchange use cases for chains that don't have IBC support? And I think ethereum, the ethereums, the polygons, the gnosis chains of the world that don't support IBC out of the box, what do we do there? How do we connect users and assets and developers from Evmos or from the broader cosmos ecosystem to those chains? And I think that's kind of topical here because that's where I see at least Zke EVM come in.
00:54:24.826 - 00:54:40.554, Speaker F: IBC itself is trust minimized. And as much as possible, we want to avoid having trustful bridging between Evmos and the rest of the non IBC compliant ecosystem.
00:54:40.682 - 00:54:55.490, Speaker A: Yeah, if that makes sense. Yeah. So you're saying you're looking for almost like something as secure or almost as secure as an IBC type setup or system, but it potentially extending.
00:54:58.470 - 00:54:59.026, Speaker B: Two.
00:54:59.128 - 00:55:17.670, Speaker A: So this is unique to Evmos IBC and then these non IBC but cryptographic bridges. Is there any other areas? Just since I had asked for three. Do you have any other like a third area? That's interesting. It doesn't necessarily have to be about bridges either. It could be about anything. Totally curious.
00:55:17.830 - 00:56:19.226, Speaker F: Totally. So, to complete the Trinity, so to speak, here again, I always go back to the fact that Evmos is built with the cosmos ethos in mind. The reason I came to Ethermint was because I thought Cosmos was really cool, not because I thought evms necessarily were really cool or anything like that. Not that there's anything wrong with evms, but there is an unexplored design space that I think that is a little underappreciated with evms. And also that Ethereum itself, the Ethereum core development team, is not inclined to explore or to sort of branch out, know at no fault of their mean. There's a lot of responsibility in developing the various ethereum clients out there. Of course, Vitalik published the roadmap, and Ethereum development generally tends to move slowly and carefully.
00:56:19.226 - 00:56:56.806, Speaker F: And I see that as a place where Evmos can sort of stand to innovate and try out new things. And so the third and last sort of point I want to highlight here is building a highly modular and extensible EVM. So Evmos itself is a proof of concept for ethermint. And this is if we talked about a little bit about the history of Ethermint, we might have gone into this. But Ethermint and Evmos are both projects that live in parallel. Ethermint is built as the EVM module that slots into evmos.
00:56:56.918 - 00:56:57.706, Speaker A: Got it.
00:56:57.808 - 00:57:38.440, Speaker F: So Evmos is like this live proof of concept of Ethermint. But there are many other Ethermint chains out there that have launched since Evmos went live. So for example, Kronos is an example of an ethermint chain. Kanto is an example of an ethermint chain. Kava is an example of a chain that did not use Ethermint but later adopted Ethermint. And this is sort of the power of building with the Cosmos SDK and building with modular libraries right on the application layer of an l one.
00:57:39.850 - 00:57:56.510, Speaker A: When you say the word modular, I just want to check this. So do you mean modular in the context of Cosmos SDK modules, or do you mean modular in the way that celestia talks about mean? It's a great word, but it does have like nuance.
00:57:56.850 - 00:58:35.290, Speaker F: Yeah, there is a collision there, right? It is a little overloaded. So when I say is or the Evmos core development team is building out the most modular EVM out there. I kind of mean both. Okay. So in one respect, you can sort of extend the EVM itself. You can extend Ethermint to do all sorts of things. You can extend it to add in custom pre compiles for things like to make things like certain kinds of cryptographic signatures easier to compute or less gas intensive.
00:58:35.290 - 00:59:26.282, Speaker F: You can extend it with custom precompiles to support things like calling, staking and voting functions from the EVM itself or IVC transfers from the EVM itself. But in addition to that, what we want to do is we also want to explore certain innovations across the modular stack, which is, I think, sort of what Celestia means when they talk about the modular stack, which is like, how do you replace the data availability layer? How do you replace sort of like the consensus mechanism that the chain uses? And there have been several explorations here from other teams, from third party teams. So you may have heard of Sevmos, which is Celestia plus Evmos that I think may have.
00:59:26.336 - 00:59:29.020, Speaker A: I have not heard of that. That's a cool name.
00:59:29.630 - 01:01:01.426, Speaker F: Right? So this is, again, not the Evmos team that is doing this, but a third party team that spun out of Celestia, I think, or is still internally part of Celestia. I'm actually not sure exactly where they're at today in their journey, but yeah, this is something they're exploring in adapting the way Evmos settles to use Celestia by default as the DA layer. In the past, we've also had explorations by folks like giorgios from paradigm, replacing the default Cosmos SDK mempool and consensus engine tendermint with narwhal and Bullshark. And so enabling these sorts of innovations across the stack, I think, is something that Evmos will be exploring. And again, of course, what I mentioned earlier, being able to extend the EVM lends itself really nicely to the topic du jour for this session or for this event, which is ZK bridges, thinking about how do we make it easier for ZK bridges to deploy to Evmos and actually slot into the Dapps that have been deployed to Evmos to allow them to take advantage of that permissionless connection to chains like ethereum, polygon, et cetera.
01:01:01.618 - 01:01:50.262, Speaker A: Very cool. Yeah, and I wanted to actually bring it back to the bridge topic as well. A little bit like from where you're, I mean, I think right now everything we've talked about is very pro. Lots of bridges or like lots of connection points and I do wonder, given what we've seen, and I think we know that given what we've seen with bridges this past six months or so, there's been a lot of bugs, it's been a lot of hacks, it's been really rough on people. I think we can say, like, the difference here is we're talking about cryptographically enabled bridges, we're not talking about economic game bridges, we're not talking about independent sort know trusted bridges. So that's good. But there is always that chance for bugs know breakdowns as well.
01:01:50.262 - 01:02:02.010, Speaker A: So are you worried a little bit about Evmos kind of having too many bridges if it's bridging out and there's IBC and all these things, that something could get broken?
01:02:04.930 - 01:02:21.730, Speaker F: Yeah, good question. I think there's always going to be a risk. I think when you're dealing with bridges that are trustful, that rely on things like multisigs as a custodial, backing.
01:02:25.990 - 01:02:26.306, Speaker D: The.
01:02:26.328 - 01:03:44.538, Speaker F: Attack surface is just much wider. And so by relying on light client bridges or ZK bridges, I think you minimize the attack surface a little bit, but you can never sort of remove that. You'll always need to rely on bridges. And sort of this goes back to Vitalik's whole separation of security zones kind of argument when he talks about cross chain versus multi chain, where, in his opinion, users will want to stay within certain security zones, they won't want to move across security boundaries. Whereas I think a lot of the cosmos ecosystem is built around the idea that things are going to be interchange or cross chain, and things will be constantly moving across security boundaries, because obviously, Evmos'security is much different than, for example, Osmosis's security, which is much different than Ethereum's security. And so really, our mandate there is to remove third party security. We don't need an additional attack surface there, like an additional area that can be exploited.
01:03:44.538 - 01:03:55.762, Speaker F: And this is, of course, following in the footsteps of the Nomad exploit that happened earlier this year that hit Evmos and many other bridges quite hard.
01:03:55.896 - 01:04:05.250, Speaker A: Oh, it did hit you hard. I remember this, yes. Although it was still pretty nascent. Right. I think. Had you kind of recently done that integration?
01:04:05.830 - 01:04:37.086, Speaker F: Yeah. So luckily, liquidity on the Nomad bridge wasn't as entrenched as it wasn't as mature as it was on chains like Moonbeam, for example. And so, yeah, the brunt of the pain there was felt by non Evmos chains, but it's still something important to recognize that it happened early on in Evmos's lifetime. And something that we'd want to address sooner rather than later.
01:04:37.268 - 01:04:38.000, Speaker D: Cool.
01:04:38.530 - 01:04:49.074, Speaker A: I have another question. This is going a little bit off the bridge topic, but it's more on the ZK topic. Are there any. Oh, agniyeshka, you just jumped on. But I have a bit of time.
01:04:49.112 - 01:04:55.010, Speaker B: Right, yeah, we have three more minutes. And there is actually one question about.
01:04:55.080 - 01:04:58.600, Speaker A: I saw that. I saw it. If I have time, I'm going to ask it. No problem.
01:04:59.770 - 01:05:00.182, Speaker B: Okay.
01:05:00.236 - 01:05:36.834, Speaker A: So, yeah, I had two more questions. So the first one I wanted to ask was about ZK snarks and just general ZK tech. Are there other use cases that we didn't show? I mean, today was really focused on interoperability, but are you seeing sort of ZK projects? This is a bit of a selfish question, maybe on the ZKV side, but we're really curious to explore evmos and what's out there. So. Yeah. Have you heard about any cool projects? Do you think that it's coming to evmos? Maybe it's already there. Let us know what's happening on the ZK front.
01:05:36.952 - 01:05:56.470, Speaker F: Totally. Totally. Yeah. Great question. There's not much I can talk about right now in terms of Dapps building on Evmos using ZK. I think there were quite a few, and they all got scared off during the tornado. Cash instant.
01:05:56.470 - 01:07:19.090, Speaker F: But what I am excited about, I guess people always have this sort of dichotomy for ZK tech, which is like, oh, it's used for either this compression scaling property, like the succinctness property, basically, versus the privacy property. Right. And so within Cosmos more broadly, I've seen tons of use cases around the privacy property pop up. And this is in the coming months, you'll see a lot of integrations with other projects like Nim, Noma, penumbra for things like ZK custody over private custody, using things like IBC, or even over interchange accounts, allowing users on evmos to sort of programmatically, using smart contracts on evmos, programmatically control assets or custody assets in private zones. So that's like something that I've been somewhat interested in exploring further.
01:07:21.350 - 01:07:37.910, Speaker A: So I think we're just about at time. There was a question from the audience that I'll ask. I don't know if this is something that you're able to answer because this seems like it's more of a ZK bridge focused question, but when will the next major update for Evmos be involving?
01:07:39.790 - 01:08:28.310, Speaker F: Yeah, great question. So we've actually started speaking to a few teams. I don't know if ZK Bridge is like the proprietary trademark name that electron uses, or the concept of ZK bridge is used more broadly. I tend to just use any bridge built vaguely using zero knowledge I just refer to as ZK bridge. Let me know if I should stop doing that. But we've started speaking to a few teams out there who leverage who are building essentially light client proofs for tendermint who've already built light client proofs for Ethereum. Two's consensus.
01:08:28.310 - 01:09:21.738, Speaker F: And yeah, thinking about what the GTM, what the go to market is for this technology. So we tend to take a product minded approach to a lot of new innovations that come to Avmo. So not just like adding in an integration and hoping somebody will build on it, but thinking about what the end to end use case is for both developers and the end user. So we will build out or help a bridge integrate and then take a look at what use case can be built on top of that bridge. And a few things have been like, oh, what if we could let dapps on the Evmo side understand what a user's balances on the Ethereum side look like? What could they do with. And so yeah, taking it from there.
01:09:21.904 - 01:09:35.226, Speaker A: Cool. Nick, thank you so much for this fireside and sharing with us this insight and a little bit of the history of Ethermint and Evmos. This has been really great.
01:09:35.408 - 01:09:41.834, Speaker F: Totally. I've enjoyed it a lot and thanks for the rest of the speakers as well. I really enjoyed their conversation.
01:09:41.962 - 01:09:49.186, Speaker A: I think one last thing, if there is anyone watching who wants to sort of get involved in building on Evmos, what should they do? Where should they go?
01:09:49.368 - 01:10:15.020, Speaker F: Yeah, great question. So we've had several hackathons happen over the past few months. There's an ongoing hackathon that just kicked off the covalent hackathon. Right now the best way to find out about it is just to visit the evmos.org evmos.org twitter page. And we've got a bunch of tweets out on that.
01:10:15.020 - 01:10:31.998, Speaker F: It is the covalent 1 million wallets hackathon. So take a look there. We were actually talking to ZKV about potentially sponsoring a track for that hackathon, but I think we decided, I don't know if this is a, I think.
01:10:32.004 - 01:10:50.180, Speaker A: It'S fair to say so, yeah, we were talking about probably not this one because it didn't quite fit our mandate. But I think we were talking about another one, a future one where we could actually do something like a ZK track. Totally hackathon. I think we're interested in that for sure. Don't want to make any promises here.
01:10:50.790 - 01:10:52.594, Speaker F: No, not at all. Not at all.
01:10:52.632 - 01:11:04.700, Speaker A: But I do think it could be cool, that link you just shared, if you want to put that in the chat after, I think that would be amazing. So people can find you. And I guess, everyone, keep an eye out for that hackathon coming up.
01:11:05.550 - 01:11:06.106, Speaker E: Cool.
01:11:06.208 - 01:11:07.386, Speaker F: It's ongoing right now, so.
01:11:07.408 - 01:11:08.282, Speaker D: Yeah. Tune yes.
01:11:08.336 - 01:11:11.190, Speaker A: Or look at it now. Thanks again, Nick.
01:11:11.350 - 01:11:12.170, Speaker F: Take care, everyone.
01:11:12.240 - 01:11:13.020, Speaker D: Thank you.
01:11:13.490 - 01:11:24.270, Speaker A: Thanks for listening to that impromptu podcast, by the way, everybody. That was cool. That's actually how I like to do these conversations. Like, no video. So that was good.
01:11:24.420 - 01:11:24.686, Speaker D: Yeah.
01:11:24.708 - 01:11:53.740, Speaker A: So I think we wanted to just wrap this up. I definitely want to highlight, once again, Zkhack three. I know that we now have all the links in the event chat, so there's some useful links. And I think the discord is there as well, which is fantastic. If you want to participate in Zkhack three, which is very much for learning and getting into the ZK space, do join our discord. That's where all the learners are. We also have study clubs and study groups and whiteboard sessions and all sorts of things to do there.
01:11:53.740 - 01:12:07.850, Speaker A: And as mentioned, sign up for the Cosmos newsletter, if you haven't already. I want to say a big thank you to you, Agnieshka, for putting this together. Let's do a little clap. Thank you very, everybody. Very cool.
01:12:07.920 - 01:12:08.998, Speaker C: All the participants.
01:12:09.094 - 01:12:11.580, Speaker B: Yes. And everybody who joined us today.
01:12:12.430 - 01:12:26.418, Speaker A: Very nice. And also, awesome design, Agneska. I've told me today, I thought it had been from somewhere. And she's, no, no, I did it myself. And I'm like, this is amazing. So, yeah, the slides here and everything. Thank you so much, Agneska, for putting that together.
01:12:26.418 - 01:12:34.480, Speaker A: Thanks for coming out, everyone, and hope to see you at a future event. Either a hackathon that we're helping with or another one of these.
