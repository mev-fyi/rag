00:00:05.520 - 00:00:55.774, Speaker A: Welcome to Zero Knowledge. I'm your host Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. This week, guest co host Brendan and I interview Ben Fish from Espresso Systems. We dive into the world of l two sequencing shared sequencing mev in the new system the marketplace espresso is building and so much more. Quick disclosure, I'm an investor in espresso systems through ZKV and ZKV is also exploring working with the system. And yet I feel I had so much to learn from this interview about what they're building and how different actors can get involved in it.
00:00:55.774 - 00:01:42.070, Speaker A: Hope this helps to shed a little bit of light on the shared sequencing concept for you, too. Now, before we kick off, I just want to let you know about an upcoming hackathon we are getting very excited about ZK Hack Krakow is now set to happen from May 17 to 19th in Krakow. In the spirit of ZK Hack Lisbon and ZK Hack Istanbul, we will be hosting hackers from all over the world to join us for a weekend of building and experimenting with ZK Tech. We already have some amazing sponsors confirmed like Mina Zero one Labs, Polygon, Aleph Zero scroll, avail, Nethermind, and more. If you're interested in participating, apply as a hacker. There will be prizes and bounties to be won, new friends and collaborators to meet, and great workshops to get you up to date on ZK tooling. Hope to see you there.
00:01:42.070 - 00:01:51.066, Speaker A: I've added the link in the show notes and you can also visit zkhackcrakow.com to learn more. Now. Tanya will share a little bit about this week's sponsorship.
00:01:51.066 - 00:02:39.612, Speaker B: Launching soon. Nemata is a proof of stake l one blockchain focused on multi chain asset agnostic privacy via a unified set. Nomada is natively interoperable with fast finality chains via IBC and with Ethereum using a trust minimized bridge. Any compatible assets from these ecosystems, whether fungible or non fungible, can join Nemata's unified, shielded set, effectively erasing the fragmentation of privacy sets that has limited multi chain privacy guarantees in the past. By remaining within the shielded set, users can utilize shielded actions to engage privately with applications on various chains, including Ethereum, osmosis, and Celestia, that are not natively private. Nemada's unique incentivization is embodied in its shielded set rewards. These rewards function as a bootstrapping tool, rewarding multi chain users who enhance the overall privacy of Nemata participants.
00:02:39.612 - 00:03:25.876, Speaker B: Follow Namada on Twitter amada for more information and join the community on Discord. Discord Dot GG Nemata Alio is a new layer one blockchain that achieves the programmability of Ethereum, the privacy of zcash, and the scalability of a rollup. Driven by a mission for a truly secure Internet, Alio has interwoven zero knowledge proofs into every facet of their stack, resulting in a vertically integrated layer one blockchain that's unparalleled in its approach. Alio is Zk by design. Dive into their programming language, Leo, and see what permissionless development looks like, offering boundless opportunities for developers and innovators to build ZK apps. This is an invitation to be part of a transformational ZK journey. Dive deeper and discover more about alio@alio.org.
00:03:25.876 - 00:03:28.864, Speaker B: Dot and now here's our episode.
00:03:32.004 - 00:03:37.904, Speaker A: Today. We are here with Ben Fish, co founder and CEO of espresso Systems. Welcome to the show. Benjamin.
00:03:37.904 - 00:03:39.770, Speaker C: Thank you. It's good to be back, Anna.
00:03:39.882 - 00:03:43.690, Speaker A: And we have Brendan today as the guest co host. Welcome, Brendan.
00:03:43.762 - 00:03:44.506, Speaker D: Thanks, Anna.
00:03:44.610 - 00:04:13.112, Speaker A: So, Ben, I was looking back at our last episode, it was over two years ago that you came on the show and you did introduce espresso. But what we talked about back then and the product and everything is changed so much. I'm very excited to get a chance to kind of catch up and learn about what's changed, what's happening. I also am very excited to get a chance to dive into shared sequencers. This is something that I think Tarun and I, especially those episodes, we've mentioned it a bunch of times, but we've never actually covered it on the show.
00:04:13.168 - 00:04:14.168, Speaker C: Yeah, let's go.
00:04:14.256 - 00:04:27.360, Speaker A: So the first part, I really do want to understand the shift from what we talked about last time to working on shared sequencers. What was it in your journey with this project that caused that pivot?
00:04:27.472 - 00:05:09.716, Speaker C: When we started out working on espresso systems, we were building a privacy product. So it was quite different. We started out with, the system that we were developing was called Cape configurable asset privacy, and it was all about balancing the need for regulatory oversight and disclosures with the need for privacy. And so that was what Cape was about. And we found that it was a, you know, it was a compelling product, but it was very difficult to find product market fit, at least at the time. I don't know if the times have shifted by now, but we found it to be quite difficult. And at the same time as we were working on this privacy product, we were also building infrastructure that would increase efficiency.
00:05:09.716 - 00:06:19.324, Speaker C: And Kape was actually supposed to be deployed as a layer two application. So we were getting familiar with the layer two landscape and what it meant to run applications on the layer two. Something that was very top of mind for us was the fact that if we ran Kape as a payment platform on top of other layer twos, it would be quite isolated from the rest of the ecosystem. And so we were quite worried about that, because if we ran cape as a smart contract on Ethereum, then people could use it in any DeFi protocol, etcetera. Whereas if you deployed it on a layer two, whether it was an app chain or on top of a specific layer two, we would have to make a choice about which subset of applications we were integrating with. It would feel a lot more like we're deploying on a specific layer two ecosystem rather than on Ethereum. And so that's actually what kick started this whole thinking about how do we increase interoperability between layer twos on top of Ethereum? And that's what ultimately led us down to completely repurposing a lot of the infrastructure that we were building to actually facilitate an interoperability layer for layer two s.
00:06:19.324 - 00:06:22.096, Speaker C: And that's what brought us to shared sequencing.
00:06:22.200 - 00:06:37.754, Speaker A: For me, it was like, I think, the espresso project and team. That was the first time I even heard of the concept of shared sequencers. Was it your idea, or was there some work happening anywhere else in the ecosystem that you were kind of like, drawing on?
00:06:38.054 - 00:07:15.960, Speaker C: It was our idea, at least independently. We came up with this idea after Bogota, so it was Devcon in Bogota. We were talking to a lot of teams there, and that's where we came up with the idea. But I think that there were other teams talking about this, too. We ultimately realized that teams like optimism with the super chain were also using similar language to describe shared sequencing around the time that we actually announced the new direction. It was in March 2022, I think.
00:07:16.132 - 00:07:19.032, Speaker A: Must have been 23, because you were on the show in 22.
00:07:19.128 - 00:07:32.640, Speaker C: Yes. No, it was March 2023. It was not this past march, but the march before. Wow. I can't believe how time flies. It was March 23, and at that time, Astria also started talking about shared sequencing already as well.
00:07:32.712 - 00:07:33.416, Speaker A: Okay.
00:07:33.560 - 00:07:51.244, Speaker C: And flashbots with suave also was using similar language to describe what is a little bit different from what we're doing with shared sequencing. But the term shared sequencing was certainly floating around, and that's actually to some degree, what led to a little bit of confusion around the term, because people, people were using it in different ways to describe different things.
00:07:51.824 - 00:08:00.176, Speaker A: So why don't we kind of define how you see shared sequencers or how the term is now used and basically what you guys are building?
00:08:00.360 - 00:09:06.914, Speaker C: Well, the way that I see it, a shared sequencer describes a ephemeral role of some server node, whatever we want to call it, that for a given time window determines or proposes the next sequence of transactions for two different chains. So that's what I call a shared sequencer for two different chains. This doesn't need to be a fixed role. It doesn't mean that there's one party or protocol that's always producing the next sequence of transactions for these two different chains, but simply that there's one party that's playing what we would generally call the role of a leader in a consensus protocol. And so that's also different from the process of actually finalizing or agreeing on what was proposed. That is what I call a shared finality gadget, or consensus protocol. I use the term shared sequencer specifically to describe the role of a leader that gets to actually have autonomy over proposing during a certain time window for, for multiple chains at once.
00:09:07.294 - 00:09:36.286, Speaker D: Yeah, I think one of the things that I didn't understand when the discussion around shared sequencing first emerged was that privilege to have a proposal that's shared between multiple roll ups, it's revocable. It doesn't need to. You're not, as a roll up, perpetually giving up sequencing rights to a proposer. This is something that exists for a discrete period of time. And then, yes, I think like, yeah, so I'll leave it with that.
00:09:36.350 - 00:10:41.904, Speaker C: And it's a lot more like the interaction between proposers and builders on Ethereum, whereas the relationship between a builder and a proposer is a little bit different because the proposer ultimately has the right to propose whatever it wants for Ethereum, and there's this out of band fair exchange protocol that's happening between a builder and a proposer. And maybe it's facilitated by a relay that is not part of the core infrastructure of Ethereum, but a proposer will, at the very last minute, basically auction off the block and is essentially looking for suggestions from a builder market and make some kind of credible commitment to builders that whatever they propose, it will actually respect. The shared sequencer idea is to auction off the rights to actually be the proposer in the first place. And if you have some party that ends up with the right to be the proposer, for multiple chains for a given period of time, that party can then do things an individual proposer for a chain might not be able to do.
00:10:42.324 - 00:11:13.404, Speaker A: Wow, this is so, I've been actually wondering about the connection between MeV and shared sequencers, because I think I saw you guys at this event focused on MEV and you were speaking there. And this is really helpful actually, to see where it's really tapping into that space. Before we dive even deeper into this, though, I realized that we should probably define what is sequencing today, what is the current landscape, how is this currently being done? Because then I think we'll understand even better what this change looks like.
00:11:13.524 - 00:11:47.372, Speaker C: The sequencer in layer two is today mostly a centralized node that plays several different roles. It collects transactions. Those transactions in most roll ups aren't posted immediately to Ethereum. This helps with compression. So it collects transactions and builds up a buffer of transactions. And so it's acting as a temporary da layer, in fact, because it's persisting those transactions, it's persisting the data before it's ultimately posted to Ethereum. And it then compresses those transactions either.
00:11:47.372 - 00:12:27.714, Speaker C: If it's a ZK proof system, sometimes the sequencer role is sort of combined with the prover role, but those are logically separate. So it could outsource the job of constructing a proof to a prover, and at some point it then posts the transaction data to ethereum, compressed. Usually that's before the proof is posted. If it's a ZK rollup, the second role that it does, in addition to persisting this transaction data, is it acts as well. First of all, it gets to determine the order in which these transactions actually appear by virtue of playing that role. It of course may outsource that job to a builder market. That doesn't happen so much today on layer two s, but it totally could.
00:12:27.714 - 00:13:05.356, Speaker C: Finally, the last thing that it does is it acts as a certain trusted finality gadget for the roll up. Pre ethereum finality. So this is sometimes called pre conformations or soft confirmations. If you as a user, trust the sequencer for your roll up, then once you send your transaction to the sequencer, you can feel like your transaction is done and confirmed. And you don't have to wait for Ethereum to finalize the transaction, which would be another 13 minutes conservatively. Nor do you necessarily have to wait for a proof to appear on Ethereum if you trust the sequencer for the.
00:13:05.380 - 00:13:08.572, Speaker A: L two, who runs the sequencer today.
00:13:08.748 - 00:13:51.084, Speaker C: Generally speaking, the foundations or projects behind various l two s have some default sequencer. I think every project out there has a long term plan to decentralize that, whether through external infrastructure or infrastructure that they're building in house. But typically it's run by the foundation or by the company behind the project. There are also rollup as a service companies that this is more relevant not for the main chains of the various l two stacks, but rather the app chains of those stacks. There are companies like conduit that actually run sequencers for projects.
00:13:51.454 - 00:14:03.314, Speaker A: When you talk about running a sequencer, a centralized sequencer, is it on one machine? Are they also decentralized? Is it at least redundant or something? I'm assuming so.
00:14:04.614 - 00:14:51.018, Speaker C: I like this question because I think it touches on something about decentralization that is often glossed over. We think of web two as centralized infrastructure, but web two infrastructure is still very much distributed. It's just the term that we use there is distributed rather than decentralized. Yes, and the reason is that usually for decentralization, it's more of a distinction between who's logically participating. If you, Google, were to run a fault tolerant distributed system on 1000 machines, we wouldn't call that a decentralized system. Decentralization is connected to more of a permissionless concept. But even in a permission system, any permissioned blockchain is going out and trying to find many different entities that are contributing.
00:14:51.018 - 00:15:07.922, Speaker C: And those entities are logically separated. They're run by different organizations, different people, and that's what distinguishes decentralized systems from just a fault tolerant distributed system. If you're going to run a centralized sequencer, of course the state of the art thing to do is to run some kind of fault tolerant distributed system.
00:15:08.018 - 00:15:36.100, Speaker D: I think that's a really important point, because I think that people mistake the fact that you can have something that's fault tolerant and has very, very high uptime and reliability guarantees without it being decentralized. And decentralization, at least in my mind, is much more about avoiding rent seeking and creating a market structure where you don't have the possibility of capture by a single entity. But I think that mistake gets made a lot when people talk about sequencers.
00:15:36.212 - 00:15:49.276, Speaker A: I want to also understand the economics of the sequencer fees are somehow being incurred by the sequencers. I understand it, but what are those? Are they from the protocol? Are they actually gas like? Yeah. Where are they coming from?
00:15:49.380 - 00:16:57.098, Speaker C: Great question. So today, when we talk about sequencer revenue, so to say, it encapsulates a lot of different types of revenue streams that will ultimately be separated when we move away from single sequencers or centralized sequencers. So the first stream of revenue for a roll up ecosystem is the gas fees that are being paid, but those are being paid inside the protocol today that might be encoded as a payment to an address that happens to be owned by the same entity that's running the sequencer. But there's no fundamental reason why that needs to be the case. So even if we were to do away with a sequencer run by the foundation of a roll up ecosystem, and this was a more distributed or outsourced role, the primary source of revenue for the roll up, which is the gas fees being paid, those are being logically paid as a part of every transaction inside the roll up. And it could go to. You could go to a dao address, it could be burned, it could be distributed to token holders in that roll up ecosystem.
00:16:57.098 - 00:17:23.104, Speaker C: It could go to an address that is controlled by the foundation and then used for whatever the foundation might use it for. Some communities are excited about talking about public goods funding, others are talking about it in a different way. Whatever is the case, the sequencing revenue that's generated, or the execution revenue. So the execution fees are, in my view, separate from any additional revenue that comes from the right to sequence itself.
00:17:23.524 - 00:17:38.584, Speaker A: Because of the way that's set up. Like, is there a motivation for these entities that are running this sequencer to actually give that to a more decentralized pot? Is there any motivation for them to switch?
00:17:39.024 - 00:18:23.594, Speaker C: Right. So what I was just saying is that the fees that are coming from the gas fees that are being paid, that's going to. If a roll up were to outsource sequencing somewhere else, it would still collect the revenue from gas fees. So then we come to the next question, which is, well, what additional revenue does a sequencer and only a sequencer make? And that has entirely to do with what is colloquially called Mev. Right. So anything that goes beyond the execution fees, the gas fees that people are paying, any other revenue stream, is generally thrown under this umbrella term MeV. And that could be from people paying priority fees to order the transactions in a certain way.
00:18:23.594 - 00:19:16.684, Speaker C: It could be from selling, it's a special case of that. It could be from selling arbitrage opportunities. It could also be for things that people don't classically associate with MEV, but is really under the term MEV, which is any form of pre conformation. So if a sequencer says to a user, the next time that I have the opportunity to sequence, I promise you that I'll do this for you, the user won't pay for failed transactions. It could be promising that the user, if this sequencer controls multiple chains, it could be promising that the sequencer will try to do some kind of atomic interaction across multiple chains. Let's say the user wants to attempt to do a bridge transaction to buy an NFT, but doesn't want to do anything unless it actually successfully purchases the NFT. That's another type of promise it could make all these promises users may pay tips for, and that again becomes additional revenue.
00:19:16.684 - 00:19:38.340, Speaker C: That's outside of just the gas fee that are being paid. And that is all under sequencing, intrinsic sequencing revenue. So then you ask, if the roll up ecosystems are running their own sequencers today, and this additional revenue could be quite significant, why would they give it away? And I don't think they would give it away, which is why espresso is building a marketplace through which they can sell it.
00:19:38.412 - 00:19:56.114, Speaker A: Cool. Okay, so let's come back to the shared sequencer. I think this has been really helpful to understand how it is today. The shared sequencer lives, as far as I understand, sort of this middle layer, kind of between the roll up and the main chain. Is that correct? In thinking of it that way?
00:19:56.614 - 00:20:41.760, Speaker C: It's hard to say. It's hard to put it into, because the roll up itself is a virtual machine, similar to how the EVM is a virtual machine. I mean, some of these roll ups actually run the EVM, others run special purpose vms and the layers that we use to describe things. So layers are generally used to describe infrastructure that's actually processing and persisting data. And it's not generally used to describe the VM itself, although application layer is something that we describe on top of Ethereum. So the way that I look at it, the layer two is sort of synonymous with the application layer. It is a very much enriched application layer on top of Ethereum.
00:20:41.842 - 00:20:42.348, Speaker A: Yeah.
00:20:42.476 - 00:21:17.106, Speaker C: And so sequencing is more of a yeah, but it's more of a layer on top of Ethereum. Or now with, with base sequencing, it sort of blurs the lines between those. But I would say that it is infrastructure. It is, it is a layer above Ethereum in the cases that it's used today. Similar to external DA layers, external DA systems. I wouldn't necessarily say that it's a layer in between the l one and the l two, but I have in the past described as layer 1.5. I'm sort of going back on that description.
00:21:17.106 - 00:21:18.186, Speaker C: I'm not sure it's appropriate.
00:21:18.250 - 00:21:29.666, Speaker D: Okay, well, we overload the term layer, right, because we use it to refer to things like the Da layer and the execution layer and the application layer. And those don't really have a hierarchical relationship to one another.
00:21:29.810 - 00:21:32.154, Speaker C: Exactly. I think that's a good way to describe it. Right.
00:21:32.234 - 00:21:48.594, Speaker D: Yeah, but the l one and the l two, we relate those hierarchically because the l two settles to the l one. My understanding is that shared sequencing is much more in the former category because there's no settlement relationship between l two to l one, five to l one.
00:21:48.674 - 00:22:00.170, Speaker C: That's right. It is a layer. It is an infrastructural layer, just like an execution layer or a DA layer. But it's not necessarily hierarchically situated between what we generally refer to as layer one and layer two.
00:22:00.282 - 00:22:18.190, Speaker A: You mentioned that the sequencer in the current state does hold Da in a way like it holds that place for, I guess, a shorter period of time. Would a shared sequencer then have some sort of da component, or are you kind of ignoring that for now, like, leaving that to the DA layers?
00:22:18.382 - 00:22:55.416, Speaker C: Yeah. So sort of. Fundamentally, one of the roles of a sequencer today is to persist data before it gets posted to the l one. Right. Now, some sequencers in the future may not operate like that, and they would just ingest data that's already been posted to the l one, but roll ups that are looking to take advantage of the ability to compress data before it's posted to the l one. Four DA, and primarily driven by the reason for this is cost. And the fact that Ethereum DA is even post 444 is still more expensive than what external systems can do.
00:22:55.416 - 00:23:14.750, Speaker C: That, of course, may change, but I do see DA, at least temporary DA as an important job of a sequencer at espresso. That is, a DA system is a part of our infrastructure. So we do provide a DA system that's very similar in nature to eigen da.
00:23:14.902 - 00:23:15.614, Speaker A: Okay.
00:23:15.734 - 00:23:20.942, Speaker C: But rollups may choose to use alternative DA systems if they so choose.
00:23:21.078 - 00:23:44.868, Speaker A: The connection to MeV, I know you just described it before, but can you actually cover that again? Because I think I feel I have a little bit more context now. Yeah, like the builder proposer. I mean, we've done episodes on this in the past, so, like, we do have material we can link to and stuff, but it might be good to kind of, like, revisit that idea and say exactly what they're doing in the case of a shared sequencer.
00:23:44.956 - 00:24:25.232, Speaker C: Yeah. So the builder's job typically is it comes through a just in time auction that the proposers run right before they build a block. And typically, at this point, all the information is known although builders may have private order flow of transactions as well, that is not known to the proposer. But typically the job of the builder is to figure out optimal orderings of transactions. And it does this. And whoever is able to bid the most, because by virtue of finding the optimal ordering, they can make the most surplus value, typically wins this builder option. That's how it works with proposer builder separation on Ethereum today.
00:24:25.328 - 00:24:28.364, Speaker A: This is all on the l one. This is on Ethereum price.
00:24:28.864 - 00:25:17.444, Speaker C: Well, that's how it works on the l one. But the same exact thing could happen on the l two with sequencers. So sequencers propose blocks, and sequencers could, right before they propose a block, use the same type of interaction, run Mevboost or something like that, where they would outsource the job of building this block to a builder market. Now, some sequencers prefer to have sort of a first come first serve experience, and so that leaves less room for this kind of interaction. And so that may not actually happen. All of this is related to shared sequencing, but quite different because with shared sequencing marketplaces, as I like to call it, the roll ups are selling future rights to occupy time slots. So they're selling off the right to be the proposer.
00:25:17.444 - 00:26:11.504, Speaker C: And the proposer can always just in time before it actually builds a block. During that time slot, it could choose to work with a builder market as well. Whether it could effectively do that or not may be determined by features of that roll up. So roll ups that have a very fast block time and may not leave enough time for a proposer to really outsource that job. Roll ups that prefer to threshold encrypt transactions and then have some threshold decryption also may not leave as much room for a proposer to outsource that job. There are other ways that occupying this proposer time slot may bring you additional revenue beyond the gas fees that are being paid in the roll up. Which is why I would say that MeV goes beyond the classical ways in which we think MEV is generated today in builder auctions.
00:26:11.504 - 00:26:52.244, Speaker C: I gave an example. One example would be if I'm the proposer for some time slot in the future, I could make a promise to a user that I'll do something when it's my turn. I'll do something like ensure that their transaction goes through. I'll try to do some kind of atomic interaction across different chains for them and only and ensure that they don't pay for failed transactions unless the whole thing goes through atomically. Those are not typical examples that we give with proposers and builders on Ethereum today, because it doesn't, you know, makes much sense, but it is something that would be potentially a significant stream of revenue for shared sequencers that are sequencing for multiple chains on top of the l one.
00:26:52.394 - 00:26:56.456, Speaker A: And when you say multiple chains, these are multiple l two s, multiple roll ups. Yeah. Okay.
00:26:56.520 - 00:27:24.860, Speaker D: Ben, do you think it's fair to say that PBS, especially for rollups, allows us to kind of have our cake needed too, in the sense that we can have a decentralized proposer selection mechanism and decentralized consensus where hardware requirements are very low, but builders actually can be heavily centralized. They can be extremely sophisticated actors that are able to run execution clients across a bunch of different roll ups. Is that like a fair characterization of the relationship?
00:27:25.012 - 00:28:08.316, Speaker C: Yeah, I think that's a fair characterization. I would break it down one more step, which is that you can first determine who is going to actually act as the leader in. So any type of decentralization ends up looking like a consensus protocol. And in consensus protocols there may be thousands of nodes participating, but at any given time, there's some node that actually has the job proposing the list of transactions. This is called the leader. In Ethereum l one, we just rotate randomly among the nodes participating, and that's how we determine a leader. That may not be the best way to determine a leader, because if you just select a random node to be the leader, that node may not be very powerful.
00:28:08.316 - 00:28:43.112, Speaker C: And that's why proposal builder separation is so important on Ethereum today, because these weak nodes end up outsourcing the job to much more sophisticated actors of actually proposing the list of transactions. The idea here is to say, let's not select a leader at random. We have other mechanisms for achieving censorship, resistance and neutrality, which is the main reason to select a leader at random. But let's actually involve some kind of market mechanism in determining who's going to be the leader. It could be an auction, it could be a lottery. We're actually running it as a lottery. The Ethereum foundation is exploring similar ideas with execution tickets.
00:28:43.112 - 00:29:30.302, Speaker C: So we may actually see the l one transition in this direction as well sometime in the future. And so this ensures that you keep the node requirements very low for like the 12,000 or more nodes that are participating and contributing to security. The nodes that actually end up acting as leaders are more sophisticated actors that have acquired that right through some kind of auction mechanism. They may still choose at the very last minute to re auction that right to builders, because the sophistication thats required to act as a leader, to act as a just in time builder may be different, but with that additional color. I do agree though with your characterization, Brendan.
00:29:30.438 - 00:30:38.294, Speaker D: I think it raises a really interesting point because the builder ecosystem participating as a builder is permissionless. So anyone can join and start building and submitting blocks, and if they're able to do so competitively, then they can make money. And I think from conversations with others in the roll up ecosystem, there's sort of maybe a discomfort with this, because people look at the builder ecosystem and they say, well, there might be thousands of nodes that are providing security for the l one, but there are fairly few builders. What are we doing if we end up with this relatively centralized builder ecosystem? But it misses the point because we need a lot of nodes at the l one for security. Exactly. As you said, it's really important to have a very diverse set of nodes. But if we have permissionlessness at the builder level and builders are able to give us really good ux, I'm sure we'll talk later about, about cross roll up transactions and atomicity and these really cool guarantees that we're able to get from builders.
00:30:38.294 - 00:31:05.174, Speaker D: Given, as you said, that we have censorship resistance elsewhere in the protocol, do you think that it's necessarily a problem if we have relatively few? I guess, put another way, do we need 1000 builders that are actively participating at any one time? Or is it fine to have still a diverse set of builders, sort of a much smaller set than the total number of nodes that are providing consensus security on l one?
00:31:05.294 - 00:32:09.710, Speaker C: Yeah, I think the latter. I tend to look at this problem by looking at what are we trying to solve for. I don't see decentralization as the end goal. Decentralization is a means to some other set of goals, and one of those is higher security, making sure that once things are finalized, they can't be unfinalized, or it would require the mass collusion of many, many actors and a lot of economic value that would be lost to do so. That's the security piece. Then there are other goals like avoiding censorship or making things incredibly neutral as possible, and anti monopolization. So trying to make sure that prices remain low and those can be achieved even if we have only a few builders participating, but they're sufficiently competitive with each other, and if we have additional mechanisms for achieving censorship resistance.
00:32:09.710 - 00:32:24.314, Speaker C: So one thing that you might consider is, well, there doesn't necessarily need to be one proposer. You could have one randomly elected proposer that's in charge for just making sure that certain things get included, and then other proposers that are actually in charge of how things get ordered.
00:32:24.614 - 00:32:33.446, Speaker A: I want to understand, though, and when you talk about the proposers and the builders, those are outside of the shared sequencer itself, right? Or are they?
00:32:33.510 - 00:32:35.118, Speaker C: A shared sequencer is a proposer.
00:32:35.166 - 00:32:36.526, Speaker A: Oh, it is a proposer. Okay.
00:32:36.590 - 00:33:02.390, Speaker C: Is a proposer, yeah. So the role of sequencers today and rollups is to act as a proposer. It's to act as a temporary DA system, and it's to act as a temporary finality gadget. So when we move towards this world of more decentralized open sequencing, those roles get separated, and the shared sequencer is specifically a node that ends up proposing, acting as a leader for multiple rollups at once.
00:33:02.502 - 00:33:03.054, Speaker A: Okay?
00:33:03.134 - 00:33:23.786, Speaker C: And rollups can sell this time slot, right? So a rollup could provide a default proposer that will act as the sequencer for that rollup, or it can sell this right for future time slots using some open market mechanism. And that market mechanism is what espresso is building.
00:33:23.970 - 00:33:54.294, Speaker A: Interesting. This actually follows. There was another question that I had, going back to the leader, creating the list of transactions. I sort of wondered, the l two rollup itself has a list of transactions, but then if you're shared sequencing, you actually have these lists from different roll ups. When you push them through, when they go through the shared sequencer, is it like you assign one proposer to do one roll ups transactions, or is there any sort of mixing?
00:33:54.714 - 00:35:13.568, Speaker C: So, first of all, we don't assign anything, okay? But when many rollups participate in an open market mechanism for selling time slots to propose, then organically, we predict that we will end up in a situation where there are a few proposers that are acting as simultaneously as proposers for multiple chains. And the reason is that if you are the proposer for two chains at once, two roll ups at once, you can create some surplus value, and that's going to put you in a better position to win the right, because you'll be able to pay more than other people will for that. Right? So, something that we haven't touched on yet is actually. So I've given examples of facilitating atomic interaction. So I think it would be great to get into this conversation because we have brendan here, but ag layer. So ag layer is a great example of this, because it is something that enables fast message passing between rollups that are ZK enabled, yet there needs to be some coordinator that's actually constructing the blocks for the two rollups and proposing these blocks at the same time and coordinating the message passing. And while that could be done asynchronously.
00:35:13.568 - 00:35:32.992, Speaker C: There's a lot of advantages to having some nodes synchronously build the two blocks at the same time and pass these messages between them, giving them the feel as being part of one chain, at least for a time slot. So the opportunity to play that role is yet another reason to bid for the right to be the sequencer for several rollups at once.
00:35:33.168 - 00:36:23.920, Speaker D: Yeah, I think this is a really interesting point, and I really like the way that you framed it. Like, if you're a single sequencer for a single roll up, no matter how sophisticated you are, no matter how good you are at building blocks, you will only be able to capture a certain amount of value, and it will necessarily be less than someone that's able to propose blocks across multiple roll ups, because for users, there will always be surplus value that's gained by the ability to do things across chains and to do orbs. And even from a UX perspective, users will have a better experience if they're able to interact across multiple chains. And so I think, for me, when I first heard the shared sequencing concept and didn't really get it, it was difficult. But it clicked when I grasped this, that what you're fundamentally doing is achieving surplus value for users.
00:36:24.032 - 00:36:24.952, Speaker A: Interesting.
00:36:25.128 - 00:36:29.544, Speaker D: That wasn't really a question, but I don't know, is that the right way to look at it?
00:36:29.624 - 00:36:30.760, Speaker C: No, definitely, yeah.
00:36:30.832 - 00:36:31.964, Speaker D: Okay. Yeah.
00:36:32.344 - 00:37:10.172, Speaker A: In that example, Ben, where you had the proposer actually having to lists, I'm assuming that they stay as like a concrete thing. What I'm trying to figure out is, could you have individual transactions on different roll ups being mixed together in that list? I envision rollup list of transactions. Sequencer proposes that list to the main chain. I don't actually know what that looks like. So maybe I'm mixing it up, because I think of it as a list that's compressed and then written on chain. If you have two lists, could you mix those lists of things and then write them to chain?
00:37:10.268 - 00:37:36.414, Speaker C: Yeah. So think about two different applications on Ethereum. Think about Uniswap, and, I don't know, think about Aave or something. Okay. Then there's a list of transactions that are affecting the state of Uniswap. There's a list of transactions that are affecting the state of AAVE. If these were l two s, which are just applications, super applications that may host other applications, they still have independent lists, and there's no advantage of interleaving those lists.
00:37:36.414 - 00:38:12.086, Speaker C: But on the other hand, if what's happening is a user does a deposit into Uniswap and then takes something out of Uniswap, and then does some action and gets a loan from Aave or something like that, then there is something that's happening on a level beyond just independently Aave and Uniswap that have to do with what's happening on the two of them together, and then on the l one as well. So it's not that these transactions for the different roll ups are being interleaved, but what's actually happening on one or the other. I can make sure that something happens here and something happens here at the.
00:38:12.110 - 00:38:13.674, Speaker A: Same time, kind of.
00:38:14.974 - 00:39:08.272, Speaker D: And this isn't really practical if those two roll ups don't share a builder for that time slot. I guess to go back into the historical sharding literature, part of what didn't work was if you have two shards or two distinct execution environments, you could create a system where you're taking a lock part of a state on one shard, and then you're submitting that in a decentralized way to the consensus set of another shard. It turns out that my understanding is that this is actually very, very expensive, because locking that state, it's risky because you're not able to accept transactions or confirm transactions for a certain period of time. I think that if you want to do synchronous composability, like Ben, do you think that, in my mind, sharing a builder is really the only way to do that in a practical way, is that like, a fair characterization for synchronous composability?
00:39:08.368 - 00:39:09.440, Speaker C: Yes, definitely.
00:39:09.512 - 00:39:10.128, Speaker D: Yeah.
00:39:10.296 - 00:40:02.844, Speaker C: I think even from an asynchronous perspective, just making interactions happen faster, or making sure that things are atomic, which isn't quite synchronous composability, but just ensuring atomicity of actions across two different rollups, having a shared, not even shared builder, but like a shared proposer that can pass on those requirements and restrictions to whoever is involved in building the block is important. I think it might be helpful, Anna. So with this question about the two lists, it might be helpful to talk about, like an example. Imagine that you had USDC deployed to both of these rollups. Okay? And so USDC has something called cross chain transfer protocol, where if you burn USDC in a contract on one chain, then you can mint USDC natively on the other chain.
00:40:02.964 - 00:40:03.564, Speaker A: Oh, cool.
00:40:03.644 - 00:40:12.388, Speaker C: And so this is a great example of a bridge, but so imagine if there's a. You know, the blocks on these two different roll ups are being constructed at the same time.
00:40:12.516 - 00:40:12.988, Speaker A: Yeah.
00:40:13.076 - 00:40:57.916, Speaker C: So if you were to also have something like ag layer, which allows for message passing between chains, so that a chain on one side can verify that something happened on the other side as well. Then now you still have an independent list of transactions for this chain one I'm calling train chains and roll ups, I'm using synonymously, because even though it's an imprecise term, that's what the industry uses. So this chain one, it has a list of transactions. There's some USDC burn transactions, transactions along with other things that are being done. Now. There's this chain two that also has its own independent list of transactions, including a USDC mint transaction. But this USDC mint transaction is happening at the same time, in the same time period as this USDC burn transaction.
00:40:57.916 - 00:41:28.626, Speaker C: And it's only valid because of the fact that this burn transaction happened on the other chain. So it's receiving some evidence on the side that it's aware that this burn transaction happened on chain one. These transaction lists are still independent. They don't need to be. There's no advantage of mixing them together and compressing them together or anything like that. But the fact that they're happening at the same time, and that this chain two is sort of aware that something happened on chain one, namely that the USDC was burned, and therefore this mint transaction is valid. That's the point here.
00:41:28.626 - 00:41:36.530, Speaker C: And the shared proposer that we're calling shared sequencer is what is enabling all this to happen to them the same time.
00:41:36.642 - 00:41:44.250, Speaker A: Interesting. We've now mentioned the AG layer a couple times. Maybe we should define what that is. Brandon, maybe you can take the lead on that one.
00:41:44.322 - 00:42:18.390, Speaker D: Yeah, so I would call it a decentralized protocol that provides cryptographic guarantees of safety for the type of cross chain interaction that Ben's describing. And it also allows chains to share, to safely share a native bridge. So if you have two chains that share a proposer and they're doing a bunch of stuff that's happening cross chain, you can think about just moving l one native assets, or l two native assets seamlessly between those chains, instead of having to mint a wrap synthetic, and then swap back into the native representation.
00:42:18.502 - 00:42:26.134, Speaker A: Of that asset with the ag layer. Would you call it a settlement cross chain thing? You're actually moving tokens?
00:42:26.294 - 00:43:18.282, Speaker D: No. So the problem which Ben alluded to earlier, is that if you want to do things cross chain and you want to route those cross chain interactions through Ethereum, then you have to wait for Ethereum to finalize. And so that takes a long time. It's like twelve to 19 minutes to finalize blocks on Ethereum. And so part of the motivation with the Ag layer is like, okay, we're not going to wait for that. It's just totally impractical from Ux perspective. So given that we want to do things across chains in a much, much lower latency way, how do we do that safely? And how do we guarantee that chains can't settle to Ethereum with inconsistent state, or chains can't rug each other on the native bridge, or even an unsound prover on one chain can't drain the shared bridge of funds? That's the motivation.
00:43:18.282 - 00:43:40.644, Speaker D: But as Ben said, it's not a shared sequencer. It's not a coordination layer or coordination infrastructure protocol. And so it can only work in conjunction with chains coordinating via shared sequencers, or. Yeah, I mean, I think shared sequencers are probably like the best candidate for making this kind of vision work in a very good ux way.
00:43:40.764 - 00:43:51.926, Speaker A: Cool. When I first heard about it, I actually thought it was competition. I thought it was like the Polygon shared sequencer proposal, but it's quite different. It's like a different layer, it sounds like.
00:43:51.990 - 00:44:27.388, Speaker D: Yeah. So I think at various iterations it might have seemed more like a shared sequencer, but it was sort of liberating, I think, in conversations with Ben and with Justin Drake to understand where the concept for shared sequencing was, and to understand that we actually had zero interest in building or competing with shared sequencers. And in fact, it was much, much better that Polygon was not a shared sequencer. And the realization that it could be fully complementary with the vision for espresso and for shared sequencing in general was, I think, a really powerful thing.
00:44:27.516 - 00:45:01.404, Speaker A: Are some of the other networks like Zksync or optimism, are they looking to build their own kind of shared sequencers? Because in a way, they have now lots of roll ups built on their stack that will need to interact. And they currently, I guess, all have these centralized sequencers. Do you know of any work there? I mean, I know Ben, you'd probably recommend they use the espresso shared sequencer instead. But are they sometimes thinking of building their own, that sort of like really just caters to their ecosystem or federation as we've been referring to it?
00:45:01.484 - 00:46:15.034, Speaker C: Yeah, on the contrary. And I actually don't view what espresso is doing as at all competitive with what Zksync or optimism might be doing within their own ecosystems. And this sort of comes back to, to the understanding of espresso as a marketplace. So if you view espresso as a marketplace, then clusters may form where certain roll ups always choose to be sequenced together, right? So the idea of a marketplace where everyone has their own sovereignty to sell their, to sell their sequencing rights, that may be on a level outside of roll up ecosystems, but roll up ecosystems like the optimism, super chain may not necessarily have individual chains within the super chain selling independently their sequencing rights through a market mechanism like espresso. But the super chain as a whole could participate, of course, could use it. So there's value in sort of imposing infrastructure on a marketplace where you're not allowing every individual free for all sell your. Because there's advantages to making sure that having the confidence that you'll always be sequenced together.
00:46:15.034 - 00:46:50.468, Speaker C: And that's the way that I view things like the super chain or hyperchain. Although to be honest, I really can't tell you because I don't know specifically what the super chain is going to do or hyperchains are going to do. These are sort of more concepts that are described at a high level right now, but I don't think there's a ton of concrete detail on them yet. What I can say is that if the super chain were to be a collection of roll ups that are all being sequenced together, then it could still participate as a unit in a marketplace mechanism like espresso.
00:46:50.556 - 00:46:51.164, Speaker A: Interesting.
00:46:51.244 - 00:46:54.148, Speaker D: Ben, can I ask a spicier question?
00:46:54.236 - 00:46:54.904, Speaker C: Yeah.
00:46:57.644 - 00:47:45.136, Speaker D: So given what we were discussing earlier around sort of surplus value in shared sequencing, and in particular, I think, network effects that will grow among ecosystems, that can interoperate and that can share proposers and can share builders. Do you think that there will be this dynamic where if you're using a shared sequencer, you will always be able to deliver more value to your users than if you were to not use a shared sequencer? It might be the case that fight it, run from it. Shared sequencing will come inevitably, or will come all the same. Do you think that's maybe in the end state a fair characterization, or is that too spicy?
00:47:45.240 - 00:48:42.606, Speaker C: I don't think it's spicy. I think in general, it's hard to argue with the idea of allowing yourself to participate in a marketplace. I think that the vision of this as a marketplace highlights this, that the market will determine whether this is valuable or not. If you are a roll up, why wouldn't you integrate with a marketplace where you have the option to sell the rights to sequence for your roll ups to third parties if they're able to clear whatever price you set? And this applies to even super chains as well. Why wouldn't the super chain as a whole sell? My understanding as well from super chain is it's not necessarily a shared sequencer in the sense that there's one sequencer for the whole super chain. We can make this more general, since it's not specific to optimism, I think it's a general paradigm. A lot of roll up ecosystems may want to have some form of a super chain as a meta concept, and that doesn't necessarily look like having one sequencer.
00:48:42.606 - 00:49:32.584, Speaker C: It's actually a nice selling point to say to roll ups within your ecosystem, that they can have their own sequencers and that they can have their own sovereignty over block space, over sequencing rights, and they can participate individually in Excel. External mechanisms like Espresso, if they so choose the super chain may be something more about some kind of shared bridge infrastructure or something else that facilitates greater unity among chains within that ecosystem. So anyway, sorry, that's not the most direct answer to your somewhat spicy question, Brendan, but I think that to summarize, looking at this as an open market mechanism, that chains can decide to participate in it very much highlights the fact that if it's valuable, then it's inevitable, right? There's no downside to integrating an open market mechanism, it only expands your opportunities.
00:49:32.924 - 00:49:33.612, Speaker A: Cool.
00:49:33.748 - 00:49:55.190, Speaker D: Well, especially, I'm not sure if you've mentioned it explicitly, but there's an implied reserve set for every auction from every roll up for its proposal rights, which is the value that roll up would gain from just, you know, sequencing transactions itself. And so like literally, it's very difficult to find a downside in that.
00:49:55.382 - 00:50:12.454, Speaker A: I really like talking about these different layers and how they're interacting ag layer these hyperchains. But I know Ethereum itself is doing something around sequencers, and I think it's called this based sequencer concept. Can you explain what that is and how espresso would work with that?
00:50:12.614 - 00:51:02.956, Speaker C: Yes. So Ethereum itself is not doing anything but base sequencing. Is this idea that the Ethereum l one can function as a shared sequencer? So maybe let me first describe the original version of base sequencing, which was actually the original concept of roll ups in the original ideas that were described, which was that there's no external sequencer. You just use a smart contract on the l one to implement some kind of inbox that collects transactions but doesn't execute them. Right. And then periodically the nodes that are on the layer two, whether it's optimistic or zk, will execute the transactions that are in the inbox and will sort of post the result of what the state is. And if it's a ZK rollup, it will be a proof that is the original concept of a roll up.
00:51:02.956 - 00:52:01.634, Speaker C: There's no external sequencers. External sequencers were introduced for various advantages, one being the ability to compress data before it gets posted to the l one, another being soft finality confirmation. So if you trust the external sequencer, then it can give you a confirmation about what the state is before it's actually finalized. On ethereum. And Justin Drake sort of resurfaced the idea of base sequencing after people started talking about shared sequencing and was pointing out, well, the original concept of rollups actually had Ethereum as a shared sequencer, implicitly, so we could move back to that if there are advantages to shared sequencing. The problem is that people have gotten very accustomed to these advantages that external sequencers have data compression, faster finality. So the idea of base sequencing has sort of evolved to look a little bit less like base sequencing was originally described.
00:52:01.634 - 00:53:24.014, Speaker C: Where it's more about, and what I love about this is that it's focusing on what is the core advantage of evolving Ethereum. Well, the core advantage of evolving Ethereum is that the proposers that are building blocks for Ethereum can also act as proposers for layer two chains. Well, that's possible without just completely giving away the right to l one proposers, which has all kinds of downsides, like leaking sequencing revenue to the l one and not capturing it at the l two, which most roll ups I think are sort of uncomfortable with. And the realization is that, well, market mechanisms like espresso actually capture this too, because they allow rollups to sell sequencing rights to l one proposers. L one proposers can participate in this market mechanism. If you're going to be the proposer, and you find this out about 32 slots in advance on Ethereum, if you're going to be the proposer for the next Ethereum block, you could also bid for the right to be the proposer for, for multiple l two chains at the same time. Now, this becomes particularly advantageous from an economic perspective for rollups that choose to be synchronous with the l one, meaning that their blocks are sort of synchronized with the l one, and they're building off the very latest l one state.
00:53:24.014 - 00:54:07.368, Speaker C: A lot of rollups choose not to do that because it impacts their finality. So some roll ups delay any transaction that happens on Ethereum, like a bridge transaction to the roll up, for a long period of time to make sure that that transaction on Ethereum is final before it's recognized in the roll up, but rollups that choose to sort of just allow whatever happens on Ethereum to immediately be recognized in the rollup, they, by selling the right to be the sequencer to l one, proposers will now get sort of greater synchronous interoperability with the l one. And that's the concept of base sequencing. It has some caveats, but it has some clear economic advantages, and so some roll ups may choose to do this.
00:54:07.536 - 00:54:26.230, Speaker A: If you are selling the right through this marketplace, does the proposer who's participating in that, do they have to be running something in the espresso format? Is it just exactly what they're doing right now, and they can just participate in this marketplace, or do they have to actually be running something else to participate?
00:54:26.302 - 00:55:28.774, Speaker C: L one proposers that decide to sequence for layer two s through a mechanism like this will have to run additional software. In general, that's like a feature rather than a bug. Because even with the original concept of base sequencing, if you just have some l one proposer that is unknowingly sequencing l two transactions because it's including it in its blockchain, but it's not really aware of it, and it's not doing anything too special to support it, what will end up happening is then those l one proposers, by virtue of not being sophisticated to what's happening on the l two, will need to outsource the job of actually figuring out what transactions should be proposed on the l two to some kind of builder market. And so you kind of push the problem there. Otherwise, you will sort of miss out on a lot of the advantages of more sophisticated, what more sophisticated proposers can do for royalties.
00:55:29.434 - 00:55:33.754, Speaker A: Somehow, I still don't fully get what the based sequencer is, though.
00:55:33.914 - 00:55:44.090, Speaker C: Based sequencing just means that the proposer for Ethereum is also acting as the proposer for the roll up at the same time.
00:55:44.242 - 00:55:46.818, Speaker A: Okay. Okay, that's that part I see.
00:55:46.866 - 00:56:03.146, Speaker D: Yeah. So, like, rather than some proposal that's participating in the espresso marketplace, you're just including the l one proposer, which is known ahead of time on Ethereum, as sort of the proposer that can bid on l two proposal rights.
00:56:03.250 - 00:56:09.922, Speaker A: Would that be implemented into the l one in some way, or isn't that more like the flashbots team would build this?
00:56:10.018 - 00:56:11.242, Speaker C: No, neither, actually.
00:56:11.378 - 00:56:11.904, Speaker A: Okay.
00:56:11.994 - 00:57:21.682, Speaker C: Vanilla based sequencing is just, you can use the l one proposer on Ethereum today, and you give away the right to sequence to the l one proposer by just implementing some inbox in the smart contract. That's running on Ethereum. That's vanilla based sequencing, or what I like to call original roll up design. And the idea that I'm describing here gets back a lot of the advantages that we've gotten from moving away from original roll up design while still involving the l one proposer or a l one proposer that is sophisticated and choosing to participate by allowing the l one proposer to bid for the right to sequence for rollup. So this would be an l one proposer that is also running additional software, just like MavBoost is additional software, right? So it's also running additional software. And just like proposers choose to participate in Mevboost auctions, they can choose to participate in a roll up sequencer auctions, and they will be in a position to create even more surplus value because of the fact that they are the sequencer for Ethereum. They're the proposer for Ethereum.
00:57:21.682 - 00:57:27.762, Speaker C: So now they can do shared sequencing between Ethereum and l two rollups, right?
00:57:27.938 - 00:57:32.426, Speaker A: So in this case, the base sequencer, it's a concept concept. It's like an action, it's not like.
00:57:32.450 - 00:57:46.184, Speaker C: A product, it's a concept. And it's a label that could be bestowed upon rollups that make certain choices when deciding how to integrate with a market mechanism like espresso.
00:57:46.484 - 00:58:25.280, Speaker A: I see, I see. Cool. I have one more question about the list of transactions this is sort of throwing back to earlier in the episode itself, but I realized as we were speaking that where we left it with the shared sequencers, it's a marketplace and you're the proposer. But I've always had this idea of the sequencer as really the thing that makes the list, not that's proposing the list in the shared sequencer model. Is the proposer creating that list as well, or is it relying on some other agent that's actually putting together the list and then bidding to propose it?
00:58:25.472 - 00:58:42.260, Speaker C: Proposers are making a list. Whether they choose to outsource that job to builders or not is sort of their own prerogative. But proposers are making a list, and unless something goes horribly wrong, that list will be finalized.
00:58:42.412 - 00:58:44.884, Speaker A: I'm talking about the list of transactions on the l two.
00:58:44.964 - 00:58:45.516, Speaker C: I am too.
00:58:45.580 - 00:58:46.140, Speaker A: Oh, you are too.
00:58:46.172 - 00:59:41.120, Speaker C: Okay, so the reason why we're using these terms proposer, right. Is to highlight the fact that what a sequencer does is really the job of a proposer within a consensus protocol. So we're unifying the terminology that's used on Ethereum L one with the terminology that's been introduced by the Ethereum L two. And so when we look at decentralized sequencing or more open market mechanisms for sort of giving sequencing rights, then we highlight the separation between what is finalizing the list of transactions on the l two, which is some form of shared finality. And Ethereum provides that shared finality ultimately from the act of actually proposing what is the list of transactions to be executed on the l two. That's a job that sequencers play today, but that could be opened up through market mechanism to involve other proposers.
00:59:41.152 - 00:59:54.464, Speaker A: Yes, I see the entire flow, though, because you talk about the proposers on both sides, like on the l one and the l two. Is it almost like proposer on the roll up builder? On the roll up. Shared sequencer, proposer builder.
00:59:54.544 - 01:00:41.834, Speaker C: Okay, yeah, I mean, I regret that maybe I use the terms posers and sequencers are the same thing. I sort of regret the fact that I introduced this additional term. I think what's causing the confusion is that, so, like when I started out, I was saying that basically, if the centralized sequencer for rollup is playing several different roles, it's proposing the list of transactions. It's also finalizing the list of transactions based on trust. In that, yes, in that centralized sequencer. So it's providing the soft finality, and it's also acting as a DA system. And so the reason why I introduced these separate terms, finality gadget proposer DA separately, is that when we look at opening up this centralized role, then, now these are these three different actions that sequencers do today can be separated.
01:00:41.834 - 01:01:31.914, Speaker C: So espresso, as a marketplace is sort of auctioning off the right to be the proposer. But then there's also some form of shared finality that once some shared proposer proposes two lists of transactions for two different chains, then all the other nodes that are participating in the sort of espresso finality gadget, which is sort of a decentralized consensus protocol, and it's being run through Ethereum that can provide some shared finality. Rollups could choose not to use that shared finality, of course, and just wait for Ethereum finality or introduce their own mechanisms. Whatever may be the case. I just wanted to separate out this action of actually proposing lists of transactions, which is where the shared sequencing is really coming in, versus the act of finalizing and agreeing on what was proposed.
01:01:32.074 - 01:01:36.794, Speaker A: That's really helpful. Yeah, thank you so much for letting me ask that last one.
01:01:36.954 - 01:01:39.654, Speaker C: And we should have asked it earlier, unfortunately.
01:01:40.114 - 01:02:03.684, Speaker A: Yeah. I feel like I've been obsessed with this list of transactions and who does what to this list of transactions. But, yeah, I think that really helps to clarify it. So that wraps up our episode. Thank you so much, Ben, for coming on the show and sharing with us the work that espresso has been doing on shared sequencing what exactly a shared sequencer is. This has been so helpful. Thanks.
01:02:03.764 - 01:02:06.084, Speaker C: Thank you. It was really fun being here.
01:02:06.204 - 01:02:08.572, Speaker A: And thanks, Brendan, for co hosting.
01:02:08.668 - 01:02:10.100, Speaker D: Yeah, of course. Thanks.
01:02:10.292 - 01:02:17.934, Speaker A: All right, I want to say thank you to the podcast team, Rachel, Henrik, Jonas, and Tanya, and to our listeners. Thanks for listening.
