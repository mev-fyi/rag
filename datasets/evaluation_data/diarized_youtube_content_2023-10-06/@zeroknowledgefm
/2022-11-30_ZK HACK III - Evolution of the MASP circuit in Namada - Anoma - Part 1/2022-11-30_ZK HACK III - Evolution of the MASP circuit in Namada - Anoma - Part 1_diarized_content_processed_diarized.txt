00:00:09.290 - 00:00:10.526, Speaker A: Banks and I are going to talk.
00:00:10.548 - 00:00:13.866, Speaker B: Today about the evolution of the MASP.
00:00:14.058 - 00:00:23.214, Speaker A: And some extensions that we've developed on top of the MASP for some interesting.
00:00:23.332 - 00:00:31.270, Speaker B: Applications, which I think have not been explored before, at least maybe not in this context.
00:00:33.130 - 00:00:51.498, Speaker A: So first question probably is, what is MAsp? And it's certainly not an upside down wasp if you're afraid of getting stung.
00:00:51.674 - 00:00:55.920, Speaker B: By a flying insect. No, it's not that.
00:00:56.690 - 00:01:30.170, Speaker A: Even though the characters look similar, MASP actually stands for a multi asset shielded pool. And what is a multi asset shielded pool? Well, maybe being a little bit reductionist, a multi asset shielded pool is a shielded pool with more than one asset type in it. Now, was a shielded pool. Well, the sort of most famous and.
00:01:30.240 - 00:01:33.142, Speaker B: Perhaps original example of the shielded pool.
00:01:33.206 - 00:01:37.450, Speaker A: Is provided by zcash.
00:01:38.270 - 00:01:40.118, Speaker B: The idea of the shielded pool is.
00:01:40.144 - 00:01:52.110, Speaker A: That you can use cryptography and zero knowledge proofs to encode transactions that happen.
00:01:52.260 - 00:01:59.986, Speaker B: And because you are using zero knowledge proofs and cryptography to encode and to.
00:02:00.008 - 00:02:05.490, Speaker A: Verify these transactions, they're so called shielded.
00:02:06.410 - 00:02:25.350, Speaker B: They're not cryptographically linkable in the way that most transparent transactions are, where transactions that involve various addresses are cryptographically linked to those addresses.
00:02:25.430 - 00:02:30.334, Speaker A: And we know by checking signatures which.
00:02:30.372 - 00:02:33.870, Speaker B: Addresses are involved in which transactions.
00:02:38.610 - 00:02:56.150, Speaker A: We want to start from the existing examples again, most notably zcash, which support really one asset type. In the case of zcash, it supports the native zcash token.
00:02:57.210 - 00:03:01.874, Speaker B: In other cases may support whatever native.
00:03:01.922 - 00:03:18.230, Speaker A: Token there is for the pool. But we're interested specifically in shielded pools that contain more than one asset type, which means that the asset type that's involved in each transaction is also cryptographically.
00:03:18.310 - 00:03:19.900, Speaker B: Encoded in some way.
00:03:20.370 - 00:03:21.680, Speaker A: And so.
00:03:24.690 - 00:03:43.090, Speaker B: The properties of the asset are checked inside of a zero knowledge proof. And so you don't have external or transparent knowledge of which asset type what was involved in each transaction.
00:03:44.470 - 00:03:47.926, Speaker A: So we have to start with the.
00:03:47.948 - 00:03:52.440, Speaker B: Zcash shielded pools, of which there have been three so far.
00:03:53.290 - 00:03:58.840, Speaker A: And I'll use Zcash's own description of what it is.
00:03:59.770 - 00:04:10.786, Speaker B: It's an implementation of the original paper called zero cash, the original academic research paper. And this is a little understatement.
00:04:10.918 - 00:04:13.550, Speaker A: Improvements to performance and functionality.
00:04:14.050 - 00:04:18.106, Speaker B: In fact, over the last eight ish.
00:04:18.138 - 00:04:22.910, Speaker A: Years, there have been incredible improvements to performance and functionality.
00:04:23.330 - 00:04:32.610, Speaker B: It's not just some smaller incremental or evolutionary improvement, it's actually been quite substantial.
00:04:34.470 - 00:04:38.806, Speaker A: And the general idea is that we.
00:04:38.828 - 00:04:42.614, Speaker B: Want to accomplish things that you can.
00:04:42.652 - 00:04:49.740, Speaker A: Do using the existing transparent systems, but.
00:04:50.190 - 00:05:05.150, Speaker B: Use zero knowledge proofs, or more accurately, zero knowledge, succinct, non interactive arguments of knowledge, which is a technical distinction.
00:05:06.530 - 00:05:15.342, Speaker A: But we want to use these DK snarks to prove that the various properties.
00:05:15.406 - 00:05:21.682, Speaker B: Of the shielded pool are satisfied, such as you cannot in general just create.
00:05:21.816 - 00:05:25.494, Speaker A: Value out of nowhere, so on, so and so on.
00:05:25.612 - 00:05:27.800, Speaker B: You cannot spend other people's value.
00:05:28.570 - 00:05:33.670, Speaker A: All these important properties we prove using.
00:05:33.740 - 00:05:36.920, Speaker B: These zero knowledge terms.
00:05:38.670 - 00:05:43.050, Speaker A: And the best place to learn about shielded pools.
00:05:45.950 - 00:05:49.014, Speaker B: Most specifically are zcash protocol.
00:05:49.062 - 00:05:54.862, Speaker A: Specification and the issues on the live.
00:05:54.916 - 00:06:00.750, Speaker B: Rest zcash repository on GitHub.
00:06:01.410 - 00:06:12.226, Speaker A: And these are really the two most comprehensive resources for understanding how shielded pools work and how the modern evolution of.
00:06:12.248 - 00:06:13.700, Speaker B: The shielded pool has.
00:06:15.770 - 00:06:28.810, Speaker A: Come about. Of course, there's many other resources out there as well, but these are certainly very comprehensive and very well written resources.
00:06:29.710 - 00:06:39.354, Speaker B: For understanding the zcash shielded pool and all of the research that's gone into the zcash shielded pools, and they are.
00:06:39.392 - 00:06:52.490, Speaker A: Certainly not light reading. The zcash protocol specification is not necessarily intended, at least as far as I know, to be read linearly.
00:06:52.650 - 00:07:00.610, Speaker B: As a textbook, it can be somewhat technical in some places.
00:07:01.030 - 00:07:10.722, Speaker A: Certainly GitHub issues are also not necessarily supposed to be read linearly. However, I've found that it's an incredible.
00:07:10.786 - 00:07:16.534, Speaker B: Educational resource, and oftentimes the discussions there.
00:07:16.732 - 00:07:19.510, Speaker A: Really give an incredible amount of context.
00:07:19.590 - 00:07:23.980, Speaker B: For why certain decisions were made in the way that they were.
00:07:24.670 - 00:07:39.230, Speaker A: And we also have in the Anoma MIsP repository some documentation about the multi asset shield pool specifically, which assumes generally.
00:07:39.970 - 00:07:48.820, Speaker B: That you're familiar with the zcash shielded pools to begin with and doesn't repeat very much.
00:07:49.510 - 00:07:55.670, Speaker A: So these resources are primarily where we.
00:07:55.740 - 00:08:01.240, Speaker B: Draw from for the MXP and where we're going to draw from today.
00:08:03.610 - 00:08:15.398, Speaker A: So where do we start? Well, we're going to start our discussion with zcash Sapling, which was the shielded.
00:08:15.414 - 00:08:17.900, Speaker B: Pool upgrade that came out a few years ago.
00:08:18.270 - 00:08:20.700, Speaker A: We now have Zcash Orchard, but.
00:08:22.750 - 00:08:25.498, Speaker B: We'Re going to be talking about zcash Sapling.
00:08:25.594 - 00:08:35.860, Speaker A: Which is still an incredibly good technology, which is still very much relevant today.
00:08:36.550 - 00:08:40.462, Speaker B: Because it was such a massive improvement.
00:08:40.606 - 00:08:48.146, Speaker A: In efficiency and other benefits. And so we're going to use zcash.
00:08:48.178 - 00:08:54.360, Speaker B: Sapling as our starting point of the discussion, which is.
00:08:57.790 - 00:09:04.986, Speaker A: Quite an important starting point because of the fundamental changes that.
00:09:05.008 - 00:09:07.786, Speaker B: Were made with zcash sapling and the.
00:09:07.808 - 00:09:14.640, Speaker A: Fundamental improvements over the previous shielded pool sprout. And so.
00:09:16.450 - 00:09:18.960, Speaker B: I took this equation from.
00:09:20.290 - 00:09:42.870, Speaker A: The zcash protocol specification, and I wanted to share it first because this is probably the most significant change in the sapling upgrade for our context, which is using this notion of a homomorphic value commitment.
00:09:44.970 - 00:09:47.590, Speaker B: If we recall from our cryptography background.
00:09:48.430 - 00:09:52.538, Speaker A: Commitment in cryptography is a way of.
00:09:52.704 - 00:09:59.722, Speaker B: Sort of locking some information into a box, kind of a cryptographic box, such.
00:09:59.776 - 00:10:03.434, Speaker A: That it has two properties that are.
00:10:03.472 - 00:10:04.060, Speaker B: Important.
00:10:05.890 - 00:10:11.742, Speaker A: Hiding and binding. Hiding meaning that once you lock this.
00:10:11.796 - 00:10:15.186, Speaker B: Information in the box, it's not sort.
00:10:15.208 - 00:10:38.650, Speaker A: Of readily apparent from the outside what information that you've locked inside and binding. In the sense that when you unlock the box and reveal the secret information that was inside, you can only ever.
00:10:38.720 - 00:10:41.660, Speaker B: Reveal what was originally locked inside of the box.
00:10:42.430 - 00:10:45.562, Speaker A: There's no feasible way to take something.
00:10:45.616 - 00:10:49.180, Speaker B: Out of the box that you didn't put into the box.
00:10:50.770 - 00:11:09.380, Speaker A: And so this use of this particular value commitment, which is a Pedersen commitment in sapling, works as follows. They derived two fixed elliptic curve points.
00:11:09.910 - 00:11:14.900, Speaker B: Which call capital v and capital r here.
00:11:16.010 - 00:11:38.650, Speaker A: And to encode an integer value of some kind, some amount of zcash, which is represented by little v, you first compute some randomness, just some random bits.
00:11:39.390 - 00:11:41.630, Speaker B: Which we're going to call rcV.
00:11:42.530 - 00:11:52.250, Speaker A: And then we're going to compute this value on the jubjub elliptic curve, where we take the value and multiply it.
00:11:52.420 - 00:11:54.958, Speaker B: Do a scalar multiplication of the elliptic.
00:11:54.974 - 00:12:04.100, Speaker A: Curve point capital v, and a scalar multiplication of our randomness rcv times the.
00:12:04.890 - 00:12:07.270, Speaker B: R point on the elliptic curve.
00:12:07.930 - 00:12:15.206, Speaker A: And by adding them together we're going to get this other point on the.
00:12:15.228 - 00:12:16.742, Speaker B: Elliptic curve that we're going to call.
00:12:16.796 - 00:12:28.186, Speaker A: The value commitment of v. And the claim is that by the way that Pedersen commitments work, and the way that.
00:12:28.208 - 00:12:34.720, Speaker B: We derive the values, the two curve points v and r.
00:12:36.690 - 00:12:41.130, Speaker A: That this commitment should have the hiding and binding properties.
00:12:41.210 - 00:12:43.570, Speaker B: That we discussed earlier.
00:12:44.470 - 00:12:57.494, Speaker A: And this is actually really important for the way that the sapling shielded pool gains real performance advantage because of the.
00:12:57.532 - 00:13:11.606, Speaker B: Model of transactions that they use, which is somewhat different than the previous sprout shielded pool and the zero coin papers shielded pool.
00:13:11.718 - 00:13:32.560, Speaker A: And the reason is that zcash sapling uses a note based transaction model, which means that value is encoded into things that are called notes. They're a little bit like utxos, but.
00:13:35.490 - 00:13:40.020, Speaker B: Generally because of zero knowledge, it's not.
00:13:41.830 - 00:13:43.220, Speaker A: Clear from the outside.
00:13:45.130 - 00:13:47.590, Speaker B: What notes are spent or not spent.
00:13:49.050 - 00:13:52.806, Speaker A: But the general idea is that with this note based transaction model, you can.
00:13:52.828 - 00:13:55.670, Speaker B: Either spend or output notes.
00:13:56.170 - 00:14:00.426, Speaker A: And so in a sapling transaction, and.
00:14:00.448 - 00:14:05.580, Speaker B: Again, this is just, you can find this in the ccash protocol spec.
00:14:07.070 - 00:14:13.230, Speaker A: Sapling transaction looks like n spends of notes.
00:14:15.570 - 00:14:20.222, Speaker B: With value commitments cv old one.
00:14:20.276 - 00:14:26.658, Speaker A: Through n, which again commit to specific.
00:14:26.744 - 00:14:31.010, Speaker B: Values which represent amounts of zec.
00:14:32.070 - 00:14:46.310, Speaker A: And then you create from this output m output notes which have value commitments cv new one through m which encode.
00:14:47.550 - 00:14:50.250, Speaker B: Some amounts of zec that are output.
00:14:51.310 - 00:15:05.886, Speaker A: And then you have this balancing value which is sort of the net sum of this transaction, which is used to.
00:15:05.908 - 00:15:10.830, Speaker B: Represent how much Zc is added or removed from the shared pool.
00:15:11.970 - 00:15:21.886, Speaker A: And so the reason that this is important in sapling is because by breaking.
00:15:22.078 - 00:15:22.820, Speaker B: Each.
00:15:24.890 - 00:15:36.598, Speaker A: Spend or output of a note into its individual value commitments, by using.
00:15:36.684 - 00:15:41.180, Speaker B: The properties of this value commitment, you.
00:15:42.430 - 00:15:55.226, Speaker A: Can actually efficiently compute 10 knowledge proof per spend or per output, and you don't have to encode the entire transaction.
00:15:55.338 - 00:15:59.680, Speaker B: In 10 knowledge group, which is actually.
00:16:00.610 - 00:16:12.990, Speaker A: A nice gain of efficiency and other benefits as well. And so, to ensure that transactions don't.
00:16:13.070 - 00:16:20.200, Speaker B: Create or destroy value again, you can find this in the cash protocol spec.
00:16:21.530 - 00:16:28.474, Speaker A: The important property of this value commitment is that it's homomorphic, meaning that if.
00:16:28.512 - 00:16:32.442, Speaker B: You add or subtract value commitments from.
00:16:32.496 - 00:16:40.134, Speaker A: Each other to or from each other, that is effectively the same as adding.
00:16:40.182 - 00:16:43.790, Speaker B: Or subtracting values inside the commitment.
00:16:44.930 - 00:16:48.974, Speaker A: And so this means that you don't actually need to know what value is.
00:16:49.012 - 00:16:53.110, Speaker B: Locked inside of the box. You can do this, add or subtract.
00:16:53.290 - 00:16:57.234, Speaker A: Of two value commitments, and you get.
00:16:57.272 - 00:17:01.220, Speaker B: A value commitment that commits to the sum or different.
00:17:02.550 - 00:17:12.566, Speaker A: And so this is great. This means that we can, in sapling, consider each note individually and not have.
00:17:12.588 - 00:17:14.870, Speaker B: To consider the entire transaction.
00:17:16.570 - 00:17:31.886, Speaker A: We can just compute for each note, each value commitment corresponding to that note, sum the value commitments up outside of.
00:17:31.908 - 00:17:35.486, Speaker B: The circuit, not in zero knowledge, because.
00:17:35.588 - 00:17:39.246, Speaker A: The value commitment is hiding, so it.
00:17:39.268 - 00:17:43.620, Speaker B: Already doesn't reveal what's inside.
00:17:44.150 - 00:17:46.350, Speaker A: So we can, outside of the circuit.
00:17:46.510 - 00:17:49.554, Speaker B: Sum up all the value commitments and.
00:17:49.672 - 00:17:53.746, Speaker A: Obtain the net value change of the.
00:17:53.768 - 00:18:04.120, Speaker B: Transaction, whether it's added or removed any value from the shielded pool, and then that compares against the balancing value.
00:18:05.290 - 00:18:15.900, Speaker A: Okay, so the sapling design works really well, and the technical details that the gross 16 proof system still very.
00:18:17.790 - 00:18:19.900, Speaker B: Efficient and practical today.
00:18:22.210 - 00:18:23.134, Speaker A: It stood the test.
00:18:23.172 - 00:18:24.430, Speaker B: Of time very well.
00:18:24.580 - 00:18:27.902, Speaker A: So what can we do to add.
00:18:27.956 - 00:18:30.240, Speaker B: Multiple asset support to this?
00:18:31.090 - 00:18:33.986, Speaker A: Because this sapling design, for the most.
00:18:34.008 - 00:18:44.260, Speaker B: Part, only supports an implied asset, which would be or a single asset of some kind. Well.
00:18:46.090 - 00:19:13.834, Speaker A: I traced it back to this comment from Dira quite a long time ago still, during the development of sapling, which describes the really elegant, in my humble opinion. I also agree, it's really elegant, really elegant way to do this without changing.
00:19:13.882 - 00:19:16.990, Speaker B: The sapling design very significantly.
00:19:17.730 - 00:19:22.254, Speaker A: Of course, there's several different ways that.
00:19:22.372 - 00:19:23.454, Speaker B: You could do this.
00:19:23.572 - 00:19:25.406, Speaker A: But if we're starting from the sapling.
00:19:25.438 - 00:19:28.500, Speaker B: Design, which is very good, and we don't want to change it too much.
00:19:29.030 - 00:20:12.974, Speaker A: The most elegant way of doing this is by realizing that you can use these homomorphic value commitments to not just sum over a single asset type, but instead over many asset types at the same time. And the way that we're going to do this is by using a different elliptic curve point for each asset type. So if we go back and look at this value commitment, we have this capital v elliptic curve point that we.
00:20:13.012 - 00:20:24.210, Speaker B: Use to multiply our scalar value by to lock our value inside of this commitment.
00:20:24.550 - 00:20:27.014, Speaker A: And the claim is that we can.
00:20:27.052 - 00:20:36.120, Speaker B: Use a different value v, a capital v different o at the curve point for each separate asset type.
00:20:36.890 - 00:20:44.940, Speaker A: And that's going to cause the value commitment to behave independently for each asset type.
00:20:47.070 - 00:20:57.360, Speaker B: So this is again one reason why it's very much worth, for educational purposes, understanding the GitHub issues.
00:21:00.210 - 00:21:02.190, Speaker A: So let's.
00:21:05.030 - 00:21:06.898, Speaker B: Diverge from sapling for a.
00:21:06.904 - 00:21:14.814, Speaker A: Second and just discuss what is an asset type? What are we formally trying to do here?
00:21:14.952 - 00:21:21.398, Speaker B: Well, an asset type is an abstract property added to a note in addition to its value.
00:21:21.564 - 00:21:26.342, Speaker A: So if a note doesn't have any.
00:21:26.396 - 00:21:38.010, Speaker B: Asset type, then implicitly all notes must have the same asset type. The asset type is implicit and it's shared across the entire shielded pool.
00:21:39.310 - 00:21:45.200, Speaker A: But if you add this notion of asset type to a note, then.
00:21:47.410 - 00:21:57.940, Speaker B: We start to understand what properties we need from notes that are now types that have this asset type.
00:21:58.470 - 00:22:01.540, Speaker A: Notes should have only one asset type.
00:22:02.710 - 00:22:09.506, Speaker B: I mean, this is not, you know.
00:22:09.528 - 00:22:14.006, Speaker A: That we, we impose this requirement to help us. There's no reason why notes need to.
00:22:14.028 - 00:22:16.040, Speaker B: Have more than one asset type.
00:22:17.390 - 00:22:37.920, Speaker A: And we importantly have this rule that all transactions are balanced independently across all asset types, meaning that in a transaction, no matter what asset types are used, an asset should.
00:22:40.130 - 00:23:03.830, Speaker B: Balance by itself for that asset type by itself. The amount of that asset input into a transaction or spend should equal the amount output, maybe adjusted by the amount that's added or removed from the shielded pool.
00:23:06.810 - 00:23:12.954, Speaker A: And the idea of this is, of course that you don't want necessarily to.
00:23:12.992 - 00:23:19.740, Speaker B: Start with different asset types messing with each other. You don't want a transaction which has.
00:23:22.210 - 00:23:27.482, Speaker A: One type of asset to change its properties.
00:23:27.546 - 00:23:34.660, Speaker B: When you add a second type of asset to the same transaction, it shouldn't affect asset one at all.
00:23:37.030 - 00:23:48.806, Speaker A: Now this is great, this notion of asset type, but we have to have, unfortunately different mathematical and computational representations of.
00:23:48.828 - 00:23:50.982, Speaker B: What an asset type is at different.
00:23:51.036 - 00:24:08.410, Speaker A: Points because they're used in different ways. So I'm going to somewhat arbitrarily, but very specifically use certain terms to refer.
00:24:08.480 - 00:24:12.778, Speaker B: To representations of different asset types.
00:24:12.954 - 00:24:17.498, Speaker A: So I'm going to start by just saying, well, the name of an asset.
00:24:17.594 - 00:24:21.280, Speaker B: Is just application defined in some way.
00:24:21.730 - 00:24:23.966, Speaker A: It's some byte string of arbitrary length.
00:24:23.998 - 00:24:27.234, Speaker B: That uniquely represents a given asset type.
00:24:27.432 - 00:24:42.934, Speaker A: And the reason this is so generic is because there's actually this incredible variation among different standards for how you might.
00:24:42.972 - 00:24:47.778, Speaker B: Define what an asset like, specifically what kind of asset is.
00:24:47.884 - 00:24:51.020, Speaker A: So you have ERC standards, you have.
00:24:52.670 - 00:24:57.174, Speaker B: The most common ERC 20 fungible token.
00:24:57.302 - 00:25:20.450, Speaker A: You also have ERC non fungible tokens. You have cosmos interchange representations of different tokens. You've got an incredible variety of different.
00:25:20.520 - 00:25:21.460, Speaker B: Ways that.
00:25:23.750 - 00:25:40.490, Speaker A: This asset type can be viewed from an application layer. We're just going to call the name of the asset some generic.
00:25:43.070 - 00:25:47.210, Speaker B: Thing that uniquely refers to the asset.
00:25:49.070 - 00:25:49.754, Speaker A: Which might.
00:25:49.792 - 00:25:58.720, Speaker B: Come from some token derivation or token address or something like that.
00:25:59.090 - 00:26:07.602, Speaker A: You can also include other things. You can include some salts, you can include a random beacon. There's reasons to do this.
00:26:07.736 - 00:26:09.374, Speaker B: If you want to kind of prove.
00:26:09.422 - 00:26:17.526, Speaker A: Maybe that you didn't construct your assets before a certain point in time, maybe.
00:26:17.548 - 00:26:19.350, Speaker B: You include a random beacon.
00:26:22.250 - 00:26:30.966, Speaker A: There's different things you can add, and it's fundamentally not part of the shielded pool specification.
00:26:31.158 - 00:26:38.460, Speaker B: What information goes into this representation of an asset type?
00:26:41.730 - 00:26:55.826, Speaker A: So inside of the shielded pool, we're going to get much more specific because the shielded pool has to know what an asset type is in a very concrete way, as opposed to the very.
00:26:55.928 - 00:26:57.698, Speaker B: Generic way we just defined it in.
00:26:57.704 - 00:27:04.370, Speaker A: The previous slide, which maybe use outside.
00:27:04.440 - 00:27:05.970, Speaker B: Of the shielded pool.
00:27:06.390 - 00:27:09.826, Speaker A: Inside of the shielded pool, it has to be very concrete, and the shielded.
00:27:09.858 - 00:27:12.070, Speaker B: Pool has to know what an asset type is.
00:27:12.220 - 00:27:21.900, Speaker A: And so there's two different representations inside of the shielded pool, which, for the.
00:27:22.270 - 00:27:27.930, Speaker B: Extensions, the mask that is built on zcache sapling.
00:27:31.010 - 00:27:38.826, Speaker A: Takes two forms. An asset type can be represented by an identifier.
00:27:39.018 - 00:27:41.614, Speaker B: An asset identifier is just a 32.
00:27:41.652 - 00:27:52.660, Speaker A: Byte string, which the only requirement is that is derived from the asset name in a deterministic way, so that.
00:27:57.610 - 00:28:02.150, Speaker B: Each asset type still has a unique identifier.
00:28:03.130 - 00:28:07.374, Speaker A: Two assets with different identifiers are distinct.
00:28:07.522 - 00:28:10.700, Speaker B: And two assets with the same identifier are the same.
00:28:12.190 - 00:28:15.354, Speaker A: And we're going to impose some really.
00:28:15.392 - 00:28:20.250, Speaker B: Strict requirements on the asset identifier for some technical reasons.
00:28:24.290 - 00:28:28.122, Speaker A: Namely, we're not expecting this asset identifier.
00:28:28.186 - 00:28:32.458, Speaker B: Will be like a token address or.
00:28:32.644 - 00:28:36.574, Speaker A: Anything like that, because the asset identifier.
00:28:36.622 - 00:28:47.960, Speaker B: Is specifically 32 bytes and it's compressed representation. It's not going to include all this arbitrary data. It's just going to be.
00:28:50.890 - 00:29:13.290, Speaker A: This 256 bits. And this can give very strong hint as to how you should derive the asset identifier. Certainly you can just hash the asset name, as long as you still maintain the uniqueness properties.
00:29:13.630 - 00:29:17.818, Speaker B: You can use whatever kind of hash.
00:29:17.834 - 00:29:25.826, Speaker A: Or compression you want generally, but just taking a hash of the asset name to get this asset identifier is not.
00:29:25.848 - 00:29:27.140, Speaker B: A bad way to start.
00:29:27.990 - 00:29:39.846, Speaker A: However, we do have this second and third requirement, which are related, which is not every 32 byte string will be.
00:29:39.868 - 00:29:41.830, Speaker B: A valid asset identifier.
00:29:42.410 - 00:29:47.394, Speaker A: And this is for a sort of technical reason. It doesn't have to necessarily be this.
00:29:47.452 - 00:29:50.678, Speaker B: Way, but we do this on purpose.
00:29:50.854 - 00:30:07.306, Speaker A: And this is because of the third requirement, which is that if you take the Blake two s hash of the asset identifier, you get the asset generator, which is going to be the elliptic.
00:30:07.338 - 00:30:10.830, Speaker B: Curve point that we're going to use in our value commitment.
00:30:11.810 - 00:30:29.574, Speaker A: And so the reason that we have this construction then, and this sort of strict requirement on the asset identifier is so that we can efficiently handle all.
00:30:29.612 - 00:30:32.738, Speaker B: Of this inside of the zero knowledge circuits.
00:30:32.914 - 00:30:37.990, Speaker A: So computation in our zero knowledge circuits is very precious.
00:30:41.470 - 00:30:42.826, Speaker B: It's not free.
00:30:43.008 - 00:30:47.850, Speaker A: It's certainly rather expensive for the prover.
00:30:49.630 - 00:30:54.094, Speaker B: To do extra work. If our circuits are very complicated, it.
00:30:54.132 - 00:31:05.090, Speaker A: Imposes a cost of not just cpu, but memory usage. And if you're concerned about your proving performance on, say, mobile devices.
00:31:08.790 - 00:31:13.860, Speaker B: You really want to make sure that your performance in the circuit is really good.
00:31:14.790 - 00:31:25.794, Speaker A: And so we just impose by fiat this requirement that you take a Blake two s hash of this asset identifier.
00:31:25.842 - 00:31:27.430, Speaker B: And you get the asset generator.
00:31:27.950 - 00:31:35.482, Speaker A: And this is why the asset identifier is 32 bytes. Because that way you can take the.
00:31:35.536 - 00:31:37.798, Speaker B: Blake two s hash in the circuit.
00:31:37.894 - 00:31:42.494, Speaker A: And you only need to do one.
00:31:42.532 - 00:31:54.210, Speaker B: Block of the Blake two s hash. You don't have to do many Blake two s blocks in the circuit, which would be very expensive.
00:31:56.790 - 00:32:02.690, Speaker A: And also by restricting.
00:32:06.570 - 00:32:10.162, Speaker B: That, the hash.
00:32:10.226 - 00:32:16.706, Speaker A: Always has to work. So not every output of a Blake two s hash is a valid curve.
00:32:16.738 - 00:32:19.126, Speaker B: Point on the jub jub curve.
00:32:19.318 - 00:32:23.002, Speaker A: And so this is why not every.
00:32:23.056 - 00:32:38.458, Speaker B: Asset identifier is going to work. Some asset identifiers are just not valid, because when you take the hash, the blake two s hash of them, you don't get a good message generator.
00:32:38.634 - 00:32:46.510, Speaker A: And we don't want to do extra work in the circuit to handle these invalid cases.
00:32:47.170 - 00:32:49.040, Speaker B: We just want to reject them.
00:32:49.970 - 00:32:55.622, Speaker A: And so it's the responsibility outside of the circuit to ensure that only good.
00:32:55.676 - 00:33:01.240, Speaker B: Asset identifiers are used. This can prevent you from just.
00:33:06.570 - 00:33:07.074, Speaker A: Straight.
00:33:07.122 - 00:33:14.598, Speaker B: Directly using the hash of the asset name, because you might get an invalid asset identifier.
00:33:14.774 - 00:33:16.694, Speaker A: That when you hash, the asset identifier.
00:33:16.742 - 00:33:19.020, Speaker B: Gives you an invalid curve point.
00:33:21.650 - 00:33:31.520, Speaker A: There's some subtleties. Okay, so what does a spend look like in the.
00:33:35.190 - 00:33:36.526, Speaker B: Masp?
00:33:36.718 - 00:33:55.880, Speaker A: So in order to spend a note that now has this asset type, well, all we need to do is make the notes typed. Now, if a note has in it.
00:33:57.050 - 00:34:13.070, Speaker B: The asset generator that represents the value or the base, that you should multiply the value by the elliptic curve point for your value commitment.
00:34:14.770 - 00:34:28.926, Speaker A: All you need to do is add this value base as a witness to the spend circuit. So if you're familiar with the sapling.
00:34:28.958 - 00:34:32.414, Speaker B: Circuit and how it works, sapling circuits.
00:34:32.542 - 00:34:42.838, Speaker A: And how they work, if you look at the spend circuit, this should be extremely familiar, because for the most part.
00:34:43.004 - 00:34:45.960, Speaker B: Things are not very different.
00:34:47.050 - 00:34:53.974, Speaker A: All that's been added is that we add this private input of the asset.
00:34:54.022 - 00:35:08.350, Speaker B: Generator, which I've used Vb to represent for value base. We just add this asset generator as a private input.
00:35:09.410 - 00:35:50.702, Speaker A: And we want to say that the circuit is satisfied if all the usual sapling spend requirements are satisfied with the exceptions that we have added. Now this asset generator to each note, we can, for the most part, ignore almost everything I've highlighted in kind of this purplish color. What has changed? All we have to do is add.
00:35:50.756 - 00:36:06.660, Speaker B: This asset generator to each note and it becomes now a typed note. It doesn't just represent value in some implied single asset, but notes can actually have value and a type.
00:36:08.070 - 00:36:13.714, Speaker A: And then not much else really changes, except that when we look at the.
00:36:13.752 - 00:36:15.010, Speaker B: Value commitment.
00:36:16.730 - 00:36:18.120, Speaker A: Instead of using.
00:36:21.850 - 00:36:23.190, Speaker B: This fixed.
00:36:24.570 - 00:36:40.862, Speaker A: Elliptic curve point in our commitment, we still use a fixed elliptic curve point to multiply our randomness by. Because the randomness does not depend on the asset type, we can just use.
00:36:40.916 - 00:36:49.950, Speaker B: A single elliptic curve point, which we get from this group hash.
00:36:52.130 - 00:37:01.602, Speaker A: For our randomness base. But the asset generator, the value base in the Pederson commitment now comes from.
00:37:01.656 - 00:37:04.770, Speaker B: Our private input and comes from our note commitment.
00:37:05.210 - 00:37:33.898, Speaker A: And so as long as our private input matches what was committed to in the note, and we use that asset generator in our value commitment computation, we can now be confident that the value commitment matches not just the value that's.
00:37:33.914 - 00:37:47.086, Speaker B: Contained in the note, but also the asset type. And from this side, from the spend circuit, as complex as the spend circuit.
00:37:47.118 - 00:37:53.954, Speaker A: Is, this is the only change that is really necessary. We have some extra fine details about.
00:37:54.152 - 00:37:56.310, Speaker B: Checking that these points are not small.
00:37:56.380 - 00:38:00.870, Speaker A: Order and clearing cofactors.
00:38:01.690 - 00:38:06.370, Speaker B: This has to do with the fact that the Jebjeb curve is an Edwards.
00:38:06.450 - 00:38:08.150, Speaker A: Curve and has a cofactor.
00:38:10.190 - 00:38:18.730, Speaker B: Which you can read the details about this in both the zcash specification and the MISB specification.
00:38:19.790 - 00:38:22.810, Speaker A: Okay, so spending a note is actually.
00:38:22.880 - 00:38:24.880, Speaker B: Not very different at all.
00:38:28.610 - 00:38:44.562, Speaker A: How does creating a note look like? And this is actually a lot more subtle. So when you create a note, what does the circuit have to check? Circuit has to check the things that.
00:38:44.696 - 00:38:46.610, Speaker B: It checked in sapling before.
00:38:46.760 - 00:38:54.534, Speaker A: Namely, you're given some public inputs about note that you're creating note commitment and.
00:38:54.572 - 00:38:57.880, Speaker B: The value commitment and so on.
00:38:59.630 - 00:39:14.766, Speaker A: And the private input is going to have the private inputs that the sapling output circuit had before. But we're going to add not just.
00:39:14.788 - 00:39:17.530, Speaker B: The asset generator to the private input.
00:39:17.690 - 00:39:26.594, Speaker A: But also the asset identifier. And we'll see in a second why this is important, why we cannot just.
00:39:26.632 - 00:39:32.290, Speaker B: Add the asset generator like we did in the spend circuit.
00:39:35.100 - 00:39:57.724, Speaker A: And if we look at what the output circuit has to do now, well, it has to do all of the things that the spend circuit changed. So when we compute the note commitment, for example, we have to now compute a typed note commitment.
00:39:57.852 - 00:40:03.364, Speaker B: So it doesn't just have a value with an implied asset, it now has.
00:40:03.402 - 00:40:06.500, Speaker A: A value and an asset generator.
00:40:09.320 - 00:40:11.344, Speaker B: And you put that into the note commitment.
00:40:11.472 - 00:40:26.760, Speaker A: So that's the same as in the spend circuit. The value commitment has also the exact same change where you use the asset generator now to compute your value commitment.
00:40:28.240 - 00:40:30.140, Speaker B: Not some constant.
00:40:31.840 - 00:40:32.990, Speaker A: Curve point.
00:40:33.520 - 00:40:37.500, Speaker B: You use the asset generator that you've put into the note.
00:40:38.560 - 00:40:48.224, Speaker A: However, there's no place in the output circuit to check that the value base.
00:40:48.262 - 00:40:49.090, Speaker B: Is correct.
00:40:51.060 - 00:40:52.116, Speaker A: In the same way that.
00:40:52.138 - 00:40:53.860, Speaker B: There was in the spend circuit.
00:40:54.360 - 00:41:20.588, Speaker A: If you recall, in the spend circuit, this value vb, although you're giving it as a private input, it's ultimately compared to the note commitment. And the note commitment came from. The note commitment tree comes from notes that already exist. And so once a note is typed with a certain type, with a certain.
00:41:20.754 - 00:41:22.590, Speaker B: Asset generator in it.
00:41:25.120 - 00:41:46.416, Speaker A: You can assume it's good. You cannot change the asset generator later, because the asset generator did not come from the user. It came from a note that already exists. And that's not true in the output.
00:41:46.448 - 00:41:47.220, Speaker B: Circuit.
00:41:49.240 - 00:42:11.150, Speaker A: As here, the user, whoever the prover is of the output circuit, whoever's creating the new note, is actually creating a new note, and they can otherwise put any value, any elliptic curve point they want in vp, and they can create.
00:42:14.880 - 00:42:16.780, Speaker B: Crazy asset types.
00:42:17.360 - 00:42:19.564, Speaker A: Any elliptical curve point that they want.
00:42:19.762 - 00:42:21.490, Speaker B: They can type in the asset type.
00:42:23.700 - 00:42:52.824, Speaker A: And this can be destructive because for example, suppose that the value of vb that they use, the asset generator, is the negation of some other asset type. So they take some existing asset type and they say, I'd like to create notes which have the exact opposite asset type, the same curve point except that.
00:42:53.022 - 00:42:54.984, Speaker B: Multiplied by minus one.
00:42:55.182 - 00:43:10.476, Speaker A: And so then by creating new notes of this negated assets type, you can create unlimited amount of the other asset.
00:43:10.508 - 00:43:15.744, Speaker B: Type by sort of in a kind.
00:43:15.782 - 00:43:19.232, Speaker A: Of almost quantum foam type of way.
00:43:19.286 - 00:43:22.500, Speaker B: If any of you like theoretical physics.
00:43:24.280 - 00:43:42.184, Speaker A: If you are allowed to have negated asset generators, you can spontaneously in the shielded pool, create an asset and it's negation. And because it will still balance to.
00:43:42.222 - 00:43:42.810, Speaker B: Zero.
00:43:46.480 - 00:43:52.412, Speaker A: It would otherwise check out just fine, even though this is obviously something.
00:43:52.466 - 00:43:55.352, Speaker B: That you don't want and you want to prohibit.
00:43:55.496 - 00:44:07.372, Speaker A: So how do we prohibit this? We say you cannot witness, the prover cannot witness an arbitrary asset generator.
00:44:07.516 - 00:44:15.460, Speaker B: It has to actually witness that this asset generator came from an asset identifier.
00:44:15.880 - 00:44:28.456, Speaker A: And this is why the proverb has to witness this 32 byte asset identifier and compute in the circuit this Blake two s hash, one block of the.
00:44:28.478 - 00:44:29.880, Speaker B: Blake two s hash.
00:44:31.900 - 00:44:34.570, Speaker A: To derive this.
00:44:36.720 - 00:44:51.520, Speaker B: Value base, this asset generator, and verify that in fact that you did not just make up some asset generator, you did not just negate some asset generator that already exists.
00:44:58.790 - 00:45:19.020, Speaker A: And so we should note now, having observed that this is necessary in the output circuit, we should note that this is not necessary in the spend circuit because you can only create notes with.
00:45:20.750 - 00:45:24.890, Speaker B: Correct asset generators.
00:45:26.110 - 00:45:41.710, Speaker A: The output circuit enforces that only valid asset generators can be used to create notes. And so we can assume that when the notes are spent.
00:45:43.590 - 00:45:52.690, Speaker B: That their asset generators were already checked to be acceptable.
00:45:55.630 - 00:46:25.094, Speaker A: So 1 may wonder if it's necessary. The answer is kind of yes and no. The answer is yes in the construction that we just described, for the reason that I just described, if someone witnesses the negation of an asset generator and.
00:46:25.132 - 00:46:27.814, Speaker B: Produces notes with negative value of some.
00:46:27.852 - 00:46:32.854, Speaker A: Actual asset, they can create notes of.
00:46:32.892 - 00:46:36.250, Speaker B: Arbitrarily positive value homomorphic imbalance.
00:46:37.870 - 00:46:51.354, Speaker A: Now that being said, there were other proposals which you can read about in the GitHub Zcash repository, in the GitHub.
00:46:51.402 - 00:46:52.000, Speaker B: Issues.
00:46:53.970 - 00:47:01.634, Speaker A: Which include one way of avoiding this entirely and avoiding this Blake two.
00:47:01.672 - 00:47:02.690, Speaker B: S hash.
00:47:04.870 - 00:47:07.170, Speaker A: Which is certainly more efficient.
00:47:09.910 - 00:47:12.466, Speaker B: From a circuit perspective.
00:47:12.578 - 00:47:20.630, Speaker A: Anytime you can avoid having to do an expensive hash operation in the circuit.
00:47:21.210 - 00:47:26.780, Speaker B: You can save a lot of computation time.
00:47:28.750 - 00:47:36.686, Speaker A: But in the specific construction that we've described, you have to verify that.
00:47:36.708 - 00:47:39.280, Speaker B: Your asset generator is good in some way.
00:47:40.770 - 00:47:43.694, Speaker A: And so we just accept in this.
00:47:43.732 - 00:47:51.540, Speaker B: Construction the cost of the Blake two s hash, even though there's potentially alternative ways to do this.
00:47:53.270 - 00:48:15.740, Speaker A: So then one of the other most common questions I get is, why does it need to be a Blake two s hash? Why can't we just use a Pederson hash? Because it's much more efficient to compute in the circuit than a pseudorandom function.
00:48:16.430 - 00:48:18.570, Speaker B: Such as the Blake two s hash.
00:48:20.670 - 00:48:22.870, Speaker A: And the answer is that you cannot.
00:48:22.950 - 00:48:25.850, Speaker B: Use this Pederson hash.
00:48:28.210 - 00:48:30.094, Speaker A: To verify or.
00:48:30.132 - 00:48:32.590, Speaker B: Just to drive the acid generator.
00:48:33.650 - 00:49:26.160, Speaker A: And this is because while Peterson hash offers collision resistance, it is possible. In fact, it's actually downright easy to find related pre images to each other because the pederson hash generators are publicly known. Suppose we used pedersen hash to derive our asset generator from asset identifier. You can very easily, starting from an existing asset, an existing asset identifier, an existing asset generator, you can very easily derive a new asset identifier, a new asset generator that has some known relationship.
00:49:26.770 - 00:49:28.750, Speaker B: To the existing generator.
00:49:31.590 - 00:49:34.900, Speaker A: This is just generically a problem.
00:49:35.590 - 00:49:41.060, Speaker B: It's not so easy to get around.
00:49:41.930 - 00:49:47.574, Speaker A: You have to have unlinkability at some.
00:49:47.612 - 00:49:48.200, Speaker B: Point.
00:49:51.130 - 00:50:07.466, Speaker A: Just for security purposes, to allow people. To prevent people from mixing different assets types together and potentially violating the rules.
00:50:07.498 - 00:50:10.670, Speaker B: That we require for balances between asset types.
00:50:11.490 - 00:50:26.610, Speaker A: Now, this doesn't mean that all conversions between asset types are unwanted. In fact, this just may allow unwanted conversions.
00:50:27.510 - 00:50:33.880, Speaker B: We may actually want some conversions, which will be the next part of the top.
00:50:36.940 - 00:50:41.400, Speaker A: Okay, I think we're at the breakpoint.
00:50:42.220 - 00:50:57.036, Speaker C: Yeah. But before we do that, there was one person in the Q a chat who was asking some questions, and I wasn't exactly sure what he meant. But you might want to give it a read and see if you can answer it and then hold on to the break.
00:50:57.138 - 00:50:57.752, Speaker A: Okay.
00:50:57.906 - 00:51:03.120, Speaker B: Yeah. Let me see. Okay. Basic principle.
00:51:04.660 - 00:51:06.240, Speaker C: We can't hear you, Anna.
00:51:07.940 - 00:51:09.280, Speaker B: I'm not muted.
00:51:09.780 - 00:51:10.850, Speaker C: No, you're not.
00:51:11.220 - 00:51:12.630, Speaker A: Could you hear me there?
00:51:13.160 - 00:51:13.668, Speaker B: Yes.
00:51:13.754 - 00:51:23.896, Speaker A: Okay. Yeah, so just one thing. If you want to read questions from the q a, just be sure to repeat the question for the video. If you can just read it out.
00:51:23.918 - 00:51:24.730, Speaker B: That would be.
00:51:27.900 - 00:51:28.650, Speaker A: Like.
00:51:30.140 - 00:51:34.984, Speaker B: There's basically only one question. All right.
00:51:35.022 - 00:51:50.604, Speaker A: So Hakan asked, the basic principle behind zero knowledge is that there's always a simulator capable of performing fraudulent proofs. You learn nothing from false evidence. So if they're just indistinguishable from real evidence?
00:51:50.652 - 00:51:53.120, Speaker B: You cannot learn anything from real evidence.
00:51:53.620 - 00:51:59.084, Speaker A: Are you aiming to hide real data by using fake data with zero knowledge?
00:51:59.212 - 00:52:02.950, Speaker B: Is the purpose here to hide the source rather than the information?
00:52:04.600 - 00:52:46.256, Speaker A: Okay, so five minute recap of what zero knowledge is and how it works. So the fundamental idea of zero knowledge is that you want to convince the verifier of some fact in such a way that anything the verifier learns through the entire procedure. The verifier could have figured out themselves anyway. So the verifier might get convinced of.
00:52:46.278 - 00:52:47.280, Speaker B: Some truth.
00:52:52.020 - 00:52:53.184, Speaker A: But they don't learn anything.
00:52:53.222 - 00:52:54.770, Speaker B: Else besides this fact.
00:52:55.380 - 00:53:02.756, Speaker A: And so I always use the example of soda flavors.
00:53:02.828 - 00:53:03.450, Speaker B: Th.
00:53:05.260 - 00:53:07.944, Speaker A: If you imagine that there's some.
00:53:07.982 - 00:53:11.112, Speaker B: People who don't believe that two different.
00:53:11.166 - 00:53:14.520, Speaker A: Brands of soda taste differently.
00:53:17.020 - 00:53:17.960, Speaker B: Suppose.
00:53:19.680 - 00:53:35.280, Speaker A: Suppose I don't believe that brand a and brand b taste any different, but other people do believe that they taste different. They know they taste different, then you can use a proof of some kind.
00:53:35.350 - 00:53:39.330, Speaker B: To essentially prove this fact to me.
00:53:39.860 - 00:54:31.570, Speaker A: Namely someone who can actually taste the difference between the two different brands of soda. I can challenge that person by saying, take a sip of cup one or take a sip of cup two, and I can randomize which brand of soda or which cup of soda I challenge the prover with at every step. Basically, I, behind my back, choose one of the cups of soda, and I challenge you to taste the difference. Tell me which soda, brand of soda is. And the idea is that if someone guesses 100 times in a row what the brand of soda is, then that could not have happened by chance.
00:54:34.840 - 00:54:36.420, Speaker B: I've become convinced.
00:54:38.200 - 00:54:40.916, Speaker A: Of what brand of.
00:54:40.938 - 00:54:46.490, Speaker B: Soda, that the brands of soda are different.
00:54:47.100 - 00:55:08.770, Speaker A: And the idea of zero knowledge and the idea of using a simulator here is, suppose that you want to do the same kind of proof that the brands of soda tastes different, but you don't actually.
00:55:11.540 - 00:55:14.290, Speaker B: Want to reveal which brand is which.
00:55:14.900 - 00:55:49.288, Speaker A: Well, the idea is that by, in some sense, hiding the source of hiding the way that each cup is chosen. So that's so that you don't imagine.
00:55:49.384 - 00:55:52.216, Speaker B: You cover the labels of the cup, so you don't actually know which cup.
00:55:52.248 - 00:55:55.710, Speaker A: Is which, then.
00:56:01.780 - 00:56:02.864, Speaker B: You don't actually learn.
00:56:02.902 - 00:56:25.944, Speaker A: Any information this way. So the reason this is formalized in the notion of the simulator is that you imagine that, suppose that you set up some cameras, a tv studio or something, where you're filming the prover and the verifier doing this interaction with each.
00:56:25.982 - 00:56:26.570, Speaker B: Other.
00:56:29.420 - 00:56:32.024, Speaker A: And the verifier concluding that, yes.
00:56:32.062 - 00:56:34.410, Speaker B: In fact, the cups of soda are different.
00:56:36.700 - 00:56:46.152, Speaker A: The way that you prove it's your own knowledge is that you argue that. Imagine that the verifier in the television.
00:56:46.216 - 00:56:47.020, Speaker B: Studio.
00:56:50.000 - 00:57:08.512, Speaker A: Is colluding in some way with the proverb. Imagine that instead of being like a real verifier, it's a simulator of some kind, which is trying to simulate what they're not actually trying to verify.
00:57:08.576 - 00:57:10.244, Speaker B: The cups of soda taste different.
00:57:10.362 - 00:57:12.816, Speaker A: They're just trying to simulate what it.
00:57:12.858 - 00:57:13.850, Speaker B: Would look like.
00:57:16.780 - 00:57:17.944, Speaker A: If the prover were.
00:57:17.982 - 00:57:22.440, Speaker B: Successfully convincing them that the cups of soda tasted differently.
00:57:22.860 - 00:58:13.816, Speaker A: And so you have the two cups of soda, which are, they have the labels covered and the verifiers challenging the prover with the cups of soda. Well, imagine that there actually was no difference in the taste, and the verifier being. The simulator is in on the scam, right? That the simulator is trying to simulate what it would look like if there was a difference. Well, the verifier simulator, the simulator and the prover just. Just need to use the same randomness for choosing the cups. The simulator chooses some pattern for how.
00:58:13.838 - 00:58:15.028, Speaker B: It chooses the cups.
00:58:15.124 - 00:58:17.832, Speaker A: And the prover knows the same pattern.
00:58:17.896 - 00:58:22.350, Speaker B: Like it's going to be cup one and then cup two, and then cup two again, cup one.
00:58:23.840 - 00:58:56.970, Speaker A: And the idea is that in this tv studio, it looks exactly the same, like you cannot tell from the outside that instead of a real verifier, it's this simulator. And yet, although it looks exactly the same from the outside, there's actually no transfer of knowledge going on. There's nothing being proven because.
00:58:59.100 - 00:59:00.436, Speaker B: It'S a fake proof.
00:59:00.548 - 00:59:06.216, Speaker A: It's a simulator that's just not acting.
00:59:06.248 - 00:59:07.352, Speaker B: As a true verifier.
00:59:07.416 - 01:00:01.276, Speaker A: It's just simulating what a correct interaction would look like. And so zero knowledge proofs fundamentally kind of work in this way, where if you argue that there's always a simulator which can look exactly the same as a real verifier, then, in fact, there must have not been any information gained, because there's never information gained by approver and a simulator talking. Because there's no information. There's nothing real about approver and a simulator talking. It's just all sort of put on.
01:00:01.298 - 01:00:05.324, Speaker B: For tv, put on for show.
01:00:05.522 - 01:00:14.656, Speaker A: And so as long as there exists the simulator which can look exactly the same as a real verifier doing the.
01:00:14.678 - 01:00:15.760, Speaker B: Real verification.
01:00:18.020 - 01:00:27.632, Speaker A: Once you plug in the real verifier, you can conclude that the real interaction between the proverb and verifier.
01:00:27.696 - 01:00:33.120, Speaker B: Also does not exchange any knowledge, if that makes sense.
01:00:33.210 - 01:00:51.572, Speaker A: And so that's why we have this proof. This notion, not in the actual code or anything, but in the theorems and the math papers. We use this notion of a simulator.
01:00:51.636 - 01:00:58.700, Speaker B: That does false proofs. And that's how we argue that actually no information is revealed. Subscribe.
