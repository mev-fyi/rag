00:00:05.530 - 00:00:50.886, Speaker A: Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. In this week's episode, Tarun and I chat with Guillermo Angeris, a PhD student at Stanford. We chat about inverse design and convex optimization. We also explore what these fields aim to do exactly, and how they could be applied to a defi context. Specifically, we look at the work Guillermo did figuring out why CFMMs actually work, as well as the challenges that come when you try to add privacy into these constructions.
00:00:50.886 - 00:01:19.602, Speaker A: Now, before we start in, I want to let you know about another privacy event that I'm involved in. It's happening on Friday, March 26, this coming Friday, and it's called the Cosmos privacy and ZKP showcase. So it's focused a little bit more on the cosmos ecosystem and the types of privacy projects happening there. If you want to check it out, I've added the link in the show notes. Also, just want to mention we currently have a grant live during Gitcoin's latest CLR matching round. If you'd like to support the show, now would be a great time. Head over to Gitcoin.
00:01:19.602 - 00:02:00.290, Speaker A: I'll add the link to our grant in the show notes. I also want to thank this week's sponsor, Ave. Ave is an open source, decentralized, non custodial liquidity protocol on Ethereum. With Ave, users can participate as depositors, meaning they can provide liquidity to earn a passive income. They can also act as borrowers to borrow in an over collateralized way or an under collateralized way. Think one block liquidity flash loans that we've mentioned a number of times on the show. They've recently just released the Ave AMM market, a new AMM liquidity pool which enables liquidity providers or lps on uniswap or balancer to actually use those LP tokens as collateral in the AAvE protocol.
00:02:00.290 - 00:02:30.726, Speaker A: I've added the link to that announcement in the show notes as well, and if you want to find out more about Ave, please visit ave.com. So thank you again Ave for sponsoring this episode. Now here is our conversation with Guillermo. So today Tarun and I are chatting with Guillermo Angeris, who is a phd student at Stanford. His work basically formalizes a lot of the defi concepts that we learn about. So welcome to the show, Guillermo.
00:02:30.918 - 00:02:42.670, Speaker B: Thank you. I think that's a solid description if terrifying and know, but whatever it's weird having someone actually speak about your work for some reason or another. I don't know what it. Right.
00:02:42.820 - 00:02:47.870, Speaker A: So no worries. Well, Tarun, how would you describe the work that Guillermo is doing?
00:02:48.020 - 00:03:07.442, Speaker C: Well, you know, over the last year, we've seen people pour money into smart contracts, also known colloquially as aping. And they must be pouring money in for some reason. They're not totally irrational. They're at least somewhat rational. They have future expectations of future profits.
00:03:07.506 - 00:03:07.974, Speaker B: Right.
00:03:08.092 - 00:03:41.650, Speaker C: And somehow understanding what those systems are doing is really important at a mathematical level and fundamental level. And it's something kind of cryptographers have not really studied, and neither have economists, because it's kind of like a weird mishmash of both fields. And no kind of one subject matter expert can be the expert of most of this stuff. So we try to take a different lens than the lens that cryptographers take or the lens that economists take. We take kind of the lens of sort of more how optimization people from the optimization literature. Look at this.
00:03:41.720 - 00:03:48.050, Speaker A: Yeah. And, Tarun, you and Guillermo actually work on a lot of this stuff together. You've co published papers.
00:03:48.470 - 00:03:48.834, Speaker B: Yes.
00:03:48.872 - 00:03:54.706, Speaker C: So Guillermo and I have a long history together, which started in 2016.
00:03:54.818 - 00:03:56.802, Speaker B: 2016, I think is right. Yeah, 2016.
00:03:56.866 - 00:04:09.018, Speaker C: 2016. And definitely 2016 because I didn't work there at that place in 2016. So, yeah, he was my intern in 2016, and then we stayed in touch and kept working.
00:04:09.104 - 00:04:09.402, Speaker B: Yeah.
00:04:09.456 - 00:04:17.760, Speaker A: Nice. So, Guillermo, why don't you tell us a little bit more about yourself? You were an intern of tarunes five years ago. What have you been up to since then?
00:04:18.130 - 00:04:58.182, Speaker B: It's been a While, right? So five years is getting older. It is weird. It is weird to say, like, oh, yeah, Tarun was literally my boss before, and I guess now, in some weird sense, after. I think the best way of describing Tarun and I's relationship is one of continual nerd sniping, right? It's this weird thing where he hands me relatively nicely packaged problems. He's like, oh, yeah, I've been thinking about this thing. And then all of a sudden, I look at it and I'm like, oh, yeah, have you thought about this other thing and this other thing and whatever? And it goes on to like, I don't know. Essentially, I end up spending tens or hundreds of hours on this stupid problem, and it's like, oh, okay, well, I guess we found something.
00:04:58.182 - 00:05:15.620, Speaker B: He's like, cool. Do you want to write it up and publish it? So, roughly speaking, that's kind of how it goes, at least how it's been for quite a while now. I think. Got it. I guess kind of going back to the original question is, like, what the hell have I done since five years? In some ways, I want to say, like, almost nothing.
00:05:17.350 - 00:05:21.598, Speaker C: Maybe part of a PhD. Stanford is a blatant lie.
00:05:21.774 - 00:05:23.940, Speaker B: Okay, yeah, right. But here's the deal.
00:05:25.030 - 00:05:44.300, Speaker C: Maybe it actually makes sense to describe what you're doing your phd in, because I think people in the crypto world don't really actually understand or know anything about the field you're in and might not even see why math from there is applicable elsewhere. So maybe start starting. What is your PhD on?
00:05:46.030 - 00:06:13.300, Speaker B: That's a good point. Well, I guess that goes to two things. Is, one, I don't really know what my PhD is on. I mean, I have an idea, right? There's some weird, general, vague notion. And two, I guess my PhD essentially just involves me becoming a machine that turns coffee, calories, and booze into literal papers, right? I input these three things and outcome paper. I mean, Turin kind of. Kind of attests to this, right? It's weird, but it kind of happens.
00:06:13.830 - 00:06:18.406, Speaker A: What is the field? I think this is what we're trying to get to the bottom of. Is there a field?
00:06:18.588 - 00:06:20.694, Speaker B: Is there a field? So, yeah, the Answer is yes.
00:06:20.812 - 00:06:21.430, Speaker A: Okay.
00:06:21.580 - 00:07:35.950, Speaker B: Weirdly, the actual thing, technically speaking, that I think, on average, I'm supposed to be doing my work for is this weird intersection between physics and optimization theory, right? And there's kind of a bunch of crap that goes into this, right? I mean, in some ways, people make it super complicated and super magical. But it boils down to this question of, look, in physics, the beautiful part about physics is that the whole point of physics is to study systems, right? We study anything. I mean, a system is pretty much anything, right? It can be anything from the trajectory of planets around the sun all the way to really complicated things like the different pressure patterns around an airfoil in whatever at high railing. Numbers and things like that. So I work in this weird intersection of fields where the question of physics in some ways is, I give you a system. You tell me what the behavior of a system is, right? So it's like you solve some dumb, really complicated differential equation, and then you get some output that says, you give me the system. Here's how it's going to behave.
00:07:35.950 - 00:08:14.170, Speaker B: So, I work in an area that kind of does the opposite. And the question is, in that area is, look, I want to design something, right? That I have a very good grasp of how that thing behaves after it's been designed. So if you give me a for example like, this could be a bridge, right? A bridge is like, if you give me a bridge, I could probably stick it on a big ass computer, simulate the tensions among each one of the strings and all of the things, and afterwards tell you, like, yeah, this bridge, it's going to absolutely fall in 2 seconds if you try building it. Or, hey, congratulations. Given some basic assumptions on what the bridge does, right, it's going to roughly work.
00:08:14.240 - 00:08:30.394, Speaker A: And I guess applying this then into the defi context, you are looking at existing bridges or some sort of construction and trying to figure out if it's going to collapse or how it might essentially.
00:08:30.442 - 00:08:38.322, Speaker B: Yeah, like, everything is like a system, right? In some weird sense or another. And the question is just, can you write down the mathematics that correspond to that thing before.
00:08:38.376 - 00:09:04.954, Speaker C: Guillermo keeps sounding like too much of a category theorist in the abstractions at which he's describing systems. I think a more concrete description of what he's doing to ground our listeners is he works on something called inverse design. So inverse design is a thing that's actually very important to hardware design for sort of optimizing layouts in hardware, and also kind of making sure that you're able to have hardware that does the certain features you want.
00:09:05.072 - 00:09:05.450, Speaker B: Right.
00:09:05.520 - 00:09:35.170, Speaker C: But Guillermo works a lot in optimization. And optimization historically is extremely useful for solving problems in many different fields. And it just happens to be that this is the subfield that he is applying optimization to. But if we take a step back, optimization is a really good way of describing how to solve how expected behaviors of complex systems will be. And so I think that was kind of where the galaxy brain bridge analogy was coming from, actually.
00:09:35.240 - 00:09:50.242, Speaker A: I did wonder, in your background, you have sort of an electrical engineering background. So that question kind of came up. How do you link from that to what you're doing today? But I guess maybe it's through this hardware angle.
00:09:50.386 - 00:10:05.022, Speaker B: Yeah. So what I was going to get to in the end is, it turns out you have very good descriptions of whatever the hell system let's call the bridge. Right. The question now is, okay, I want to build a bridge that works. Can I do that in an automated way? And that's what inverse design is.
00:10:05.156 - 00:10:07.358, Speaker A: I see the automation of these things.
00:10:07.444 - 00:10:24.914, Speaker B: It's literally automation. Right. So in particular, it's like you have some requirements. Your bridge needs to hold this much. It can't have resonance frequencies at some stupid thing, whatever it is. Right. You just plug that into a computer, and because you know exactly how the system is going to behave, you just then just optimize the bridge right.
00:10:24.914 - 00:10:53.546, Speaker B: I mean, of course, a bridge is a very, very large structure, so you would optimize some simplified version of it. But the point is, this could be applied to anything. And when I mean anything, I literally mean like, anything for which we can mathematically talk about its behavior. And congratulations. Now you've got some optimization theory. And that's kind of where I come in, is the field is mostly physicists who do real things. I'm mostly a mathematician who doesn't do real things, but can apply some of my knowledge to these rough aspects.
00:10:53.546 - 00:11:19.714, Speaker B: And it turns out there's the bridge, right? So the ee kind of teaches you the physics and also kind of teaches you the optimization things. And those two things combine very nicely to describe not just physical systems, but in our case, like weird defi primitives with crazy behaviors that at first glance look somehow magical. But it turns out they're usually pretty simple under the surface.
00:11:19.842 - 00:11:33.190, Speaker A: Is it common to use this type of technique on economic systems, or are you only able to do that with DeFi because it's also built into code and it's sort of more digital?
00:11:33.530 - 00:12:13.110, Speaker B: So it's a funny thing. And Turin has some thoughts on this, too, I suspect. But I'm going to front run him on those thoughts, probably, hopefully. So that in some sense, economists try to do this, right, in classical market making literature, right? Economists try to come up with models for general behaviors. So in what people call the classical exchanges, which are these order books, right, you have kind of very complicated mechanics, or I guess, very complicated dynamics specifically, that kind of give rise to a bunch of behavior that, on average looks like something. The beautiful part about DeFi is that here's what the behavior is. It's exactly what's written in the damn contract.
00:12:13.110 - 00:13:01.490, Speaker B: So I can write down an equation that says, actually, when someone makes a trade this large, here's exactly how much they're going to get out of it, right? Whereas economists will approach it because in some sense, while the behavior of all of the agents that they're modeling has, on average, some function that represents it or something really complicated like that, right? In DeFi, you know the function because it's written into the damn. So in some like, yeah, economists can approximate what DeFi is doing. Exactly. And that's a good thing or a bad thing, right? Because in some sense, the systems of DeFi could be potentially less flexible than kind of the classical capitalist systems of free markets. But at the same time, you can analyze them pretty damn well with very basic tools.
00:13:01.650 - 00:13:57.400, Speaker C: One thing I would add to that is that economists are really historically focused on. I would say there's a very high amount of interaction between optimization and economics. I'd say a lot of the modern developments in economics are pretty much due to changes in mathematical optimization. However, if you go to grad school, even the labor economist who doesn't know how to add two numbers is forced to take an optimization class for a reason. But there is kind of a sort of sense in which mathematical optimization talks about much more, less prescriptive things. So a lot of economists like writing down sort of functional forms that describe an object, but there's never actually really consensus on whether those functional forms are correct or not, and then they optimize. Assuming that model in DeFi, at least you can say, hey, the function's correct.
00:13:57.400 - 00:14:33.202, Speaker C: But I think what Guillermo and his lab are kind of quite famous for is actually optimization over things where you don't have functions and you rely on computation to give you a solution versus something where you're like, hey, I think this economy is linear or quadratic or exponential. Right? Instead you say, hey, here are all the possible models. Try to optimize. Sort of like, given those constraints, I think, maybe, taking a step back, it might be good to talk about kind of like your research lab and the different types of fields they work in, because, for instance, your advisor does economics as well sometimes.
00:14:33.336 - 00:14:55.638, Speaker B: So, okay. One of the labs that I work in is a thoroughly, completely and entirely physics lab, and this is like the one that Torina is not referencing. And they do, like, real people things with real people, photonic chips and real people, like quantum vacancies, trying to do a bunch of combinations of stuff that's like quantum, potentially getting to quantum computers.
00:14:55.734 - 00:14:59.382, Speaker C: They make esoteric quantum computing plus, plus hardware.
00:14:59.446 - 00:15:00.074, Speaker A: Oh, wow.
00:15:00.192 - 00:15:32.706, Speaker B: Yes, exactly. And it's really complicated. And they are actually doing real things that I understand approximately 1% of. So if you want something useful, you kind of go to that lab, and then the other lab, which is the one that Torina is referencing, is Stephen Boyd's lab. And honestly, they do a bunch of shit. I mean, it's like a weird combination of enormous amounts of everything. So one of the friends I co author with quite a bit, Shane, really does his whole thing is essentially, the best way I can put it, is mathematical modeling.
00:15:32.706 - 00:16:04.666, Speaker B: Right. All he does is he takes a problem that's kind of in the literature, and then frames it in a way that can be solved, usually using some techniques that we develop, which is in convex optimization theory, and then kind of, this is for everything. I think, at some point. He's done stuff in baseball and he's done stuff in. We did some stuff on surveys, like how to optimally weight survey responses such that they are approximately representative of a population.
00:16:04.858 - 00:16:07.120, Speaker A: That's useful for, I guess.
00:16:07.570 - 00:17:12.294, Speaker B: Yeah, exactly. So we like to call it our Covid paper, right? Everyone had a Covid paper that they did that was directly or indirectly related to it. So that was ours. But in some sense, kind of the overarching theme of Steven's lab is essentially you have this big tool of optimization theory, and there are hundreds upon hundreds upon hundreds upon hundreds of just problems that you can fit in in very clean, very simple, very almost innocent ways for which once you frame it in this way, you now have a perfectly reasonable solution method. And so kind of, that's what he's been famous for, right? He's been famous for taking things that are initially seem really complicated and have a bunch of stuff, kind of a bunch of details, and then reducing them to things that are very, very mathematically clean, but are still extraordinarily useful. This has led to a bunch of things like really good software for writing. So essentially, like these domain specific languages for writing optimization problems that can.
00:17:12.294 - 00:17:50.526, Speaker B: Then you write it in some python thing, and then afterwards you press enter, and then you have it be converted to this really complicated format that then just gets solved for you. But you don't see any of that. Right. So in some sense, the overarching theme of Stevens lab is, yeah, optimization is a hammer, but 90% of the work is taking up what seems like a really hard problem and turning it into something that's very concrete and very simple and can be solved with these optimization tools. And that's kind of where I fit in, essentially, I do the same thing, but just applied to a bunch of different fields. So in this case, physics or Defi or even I have some paper of robotics with another friend and all this. I mean, it's weird.
00:17:50.638 - 00:17:51.666, Speaker A: It sounds fun.
00:17:51.768 - 00:18:30.320, Speaker C: It is, yeah. So one thing you should kind of take away from this, and some of the listeners who maybe have taken convex optimization in undergrad, they probably use Steven's book. It's kind of the most popular, I would say undergrad, and maybe graduate in some institutions book for teaching this field. But the key thing is that the plumbing of almost all modern mathematical modeling is convex optimization. Part of the reason for that is it sort of guarantees you sort of a unique solution. It guarantees you one that's also computable. You can efficiently find an answer that's good enough.
00:18:30.320 - 00:19:09.850, Speaker C: And so even if you have a problem that's really hard, sometimes you try to just find the closest sort of convex optimization like problem and then solve that, because you actually have tools to use it. And so making those tools better actually improves many fields. Statistics, machine learning, interesting. Economics, like, pretty much anyone who ever does linear regression, is doing convex optimization every day. And it's probably the most used piece of library code outside of, like, a kernel and an operating system. Are convex optimization tools and matrix multiplication.
00:19:10.190 - 00:19:12.494, Speaker B: Right, but one is applied to the other.
00:19:12.612 - 00:19:14.298, Speaker C: Yeah, they're very closely related.
00:19:14.394 - 00:19:20.720, Speaker A: So what is convex optimization? You just mentioned that a couple of times, and I don't know what that is.
00:19:21.330 - 00:20:07.946, Speaker B: So convex optimization is kind of a really weird field that seems absolutely esoteric the first time you see it. And I will apologize in advance, but then it becomes utterly natural, and then you're like, okay, everything makes sense. So, convex optimization, first express what is a convex function, or even a convex set. So, one way of thinking about it is everyone kind of, or maybe, like in geometry, at some point, you might have learned what, like a convex polyhedron is, right? Essentially, it means you take any set, you can think about it as a drawing somewhere. You take any two points that are inside of that set. And if you draw a line between them or a line segment, then that line segment had better lie inside of the set itself. Right? So, for example, a circle is a convex shape, or so is a triangle.
00:20:07.946 - 00:20:23.122, Speaker B: But you could imagine that an s shape is not a convex shape, because if you take, you can take up two points, one at the very top of the s and one at the very bottom of the s, connect them, you're going to have a point along that line where it's not inside of the set itself.
00:20:23.256 - 00:20:24.180, Speaker A: Got it?
00:20:24.710 - 00:21:17.640, Speaker B: And of course, this leads to the question, look, congratulations, you have a line that fits inside of the set. Who the hell cares? Utterly shocking is you get a bunch of very nice and very simple properties that kind of emerge from it. So some simple properties that you get out of this is if you have two convex sets, you can separate them by a line. This isn't always true, right? For any set, you don't always get this, right? So if you can imagine two interlocking c's which never overlap, right? So there's no line you could ever draw through those that would separate them. And again, this seems almost silly, but it turns out it'll be essential to proving the weird privacy result that we just recently published a paper on. But other things that it implies is that kind of extending so now we've talked about convex sets. Let's talk about convex functions, and they're almost as simple.
00:21:17.640 - 00:21:42.906, Speaker B: Is a function, is convex if you fill in. So you could think of x squared, right? It looks like a parabola. Right? And if you think about it, if you fill it in, so if you color all of the points that are above this line, you get a convex set. Because if you take any two points on the graph itself, it will always lie above the graph itself, like a.
00:21:42.928 - 00:21:50.894, Speaker A: Line between those two points. You mean a line between them, correct. Yeah. Okay. Because it's sort of an upside. It's like a mean. I know it's not exactly.
00:21:50.932 - 00:21:51.134, Speaker B: It.
00:21:51.172 - 00:21:58.642, Speaker A: It looks a bit like a u. And any two points will always cross over that sort of the inside area of that u.
00:21:58.696 - 00:21:59.250, Speaker B: Correct.
00:21:59.400 - 00:21:59.954, Speaker A: Okay.
00:22:00.072 - 00:22:15.846, Speaker B: So we joke, and certainly in Steven's lab, we joke, that convex optimization is simply the study of things that look like bowls, right. Simply because what you're doing is every function that you're going to ever have that's convex looks like a bowl. Right? And so that's it.
00:22:15.868 - 00:22:17.750, Speaker C: But it might have a fat bottom.
00:22:17.900 - 00:22:26.170, Speaker B: Yeah, it could. It could potentially. It does not need to be sharp. It could be completely flat. It could be. But in some sense, right? If you put water, it's not going to spill out of it.
00:22:26.240 - 00:22:32.330, Speaker A: Okay. But you just are describing convex functions. But what is the optimization?
00:22:32.770 - 00:23:25.594, Speaker B: If you have a convex function, then the one property you should get out of it, which is kind of a weird one, but it's that any local minimizer, so any point for which, if you were to look left of that point and to the right of that point, if it looks smaller than its neighboring points, that's called a local minimizer, is actually a global minimizer. So it actually minimizes the entire function. So, in particular, one way of thinking about it is like the bowls, never. The bottom of the bowl, is always going to be the only optimizer over all of these things. The point is, the way you can think about it is if you're walking down a hill at some points, in a normal hill that we normally walk, if you've ever just taken a hike at some points, you're going to reach kind of these flat spots where you look like you're kind of at the bottom, but you are not actually really at the true bottom of the hill.
00:23:25.642 - 00:23:26.094, Speaker A: Okay?
00:23:26.212 - 00:23:38.818, Speaker B: That can't happen in a convex function. If you walk downwards and you reach a point where you can't walk downwards anymore, that means that you are optimal. You are like, at the minimum value of that function.
00:23:38.904 - 00:23:39.250, Speaker A: Okay.
00:23:39.320 - 00:23:39.838, Speaker B: Period.
00:23:39.934 - 00:23:43.650, Speaker A: Why is optimal the minimum? Why is that a connection?
00:23:44.310 - 00:24:05.690, Speaker B: And this is just by definition, right? So optimal could mean minimum or maximum, but it turns out the minimum of something is just the negative of the maximum. So if you think about it, if I minimize a parabola, it's the same thing as maximizing the negative of the parabola. So we just use minimization as the important one. But either of the two is fine.
00:24:05.760 - 00:24:14.314, Speaker A: But it's not that you're trying to make the line between the points smaller or something like that. That's not the optimization you're describing. It's getting to the bottom of the thing.
00:24:14.512 - 00:24:37.218, Speaker B: Yes, it is literally getting to the bottom of the thing. So in that sense, convex optimization is utterly obvious. You're like, yeah, of course I got to the bottom of the thing. I look around, all I see is up, right? And congratulations, you've now discovered literally every important facet of convex optimization. Of course, it gets weird and complicated and high dimensional spaces or whatever, but no one actually cares. It turns out it all works exactly the same way.
00:24:37.304 - 00:24:42.854, Speaker A: I'm going to let you have that. I don't entirely understand why the word optimization is used for this.
00:24:43.052 - 00:25:42.118, Speaker C: One way of thinking about it is, let's say generically, you have abstract to this level. You have a bunch of data you're getting, and you have some sort of model you're fitting that says, like, hey, if there's five cherries and two oranges at the store, then we must be in a pandemic because everyone's buying all the oranges and not buying cherries, right? That's a really weird prediction. But there's a set of possible models. Maybe there's, like, the models that say, maybe that was too simple, that was sort of a linear model. Maybe it needs to have some other features or some other facets. Well, one question is, how do I choose the best model over the set of all possible models? Okay, and that is an optimization problem, right? Because I say, here's a set of models that I think describe this system, but there are many of them, and there are many parameters. So how do I fit those parameters? Well, if it's convex, I know that I can find an algorithm that is local and computable and efficient that gets me to that optimum, to the bottom of the hill.
00:25:42.118 - 00:25:46.922, Speaker C: The bottom of the hill is some notion of fitness, of how good your model is.
00:25:46.976 - 00:25:50.138, Speaker A: Is it the distance from the model.
00:25:50.224 - 00:25:51.770, Speaker C: To the real data?
00:25:51.840 - 00:25:57.150, Speaker A: And so it's almost like getting your delta very low or something. Okay. I think I kind of understand that.
00:25:57.300 - 00:26:03.486, Speaker B: Yeah. So, essentially, here's what you want out of a model, is that it makes good predictions, and what you want is to minimize the prediction error.
00:26:03.598 - 00:26:03.970, Speaker A: Okay.
00:26:04.040 - 00:26:10.994, Speaker B: It turns out very often that prediction error is a convex function of the parameters of the model.
00:26:11.192 - 00:26:11.890, Speaker A: Okay.
00:26:12.040 - 00:26:22.114, Speaker B: Finding the minimum means that you've picked the model that has minimized the error in some sense. Right. And there's many possibilities of errors.
00:26:22.242 - 00:26:25.494, Speaker A: Cool. Well, thanks for explaining that. That's awesome.
00:26:25.612 - 00:26:30.058, Speaker B: Yeah. Hopefully it was a useful explanation. I have no idea, but maybe it was.
00:26:30.144 - 00:26:32.700, Speaker A: I think it was useful. I think we got there.
00:26:33.070 - 00:27:30.358, Speaker C: So, something most people probably who listen to this podcast have heard of is uniswap. And you may have also heard of balancer or curve or, you know, now, there's hundreds of these types of decentralized exchanges that are automated market makers. And one natural question is, why do they work? Because there have been many, many attempts at making automated market makers and decentralized exchanges for the last ten to 15 years. And so an interesting question that I guess I had had in 2019, like February, March, was, hey, there's like a million dollars in this uniswap thing. Why is anyone putting any money into it? And in the process, I started trying to write some equations out, and I was like, yeah, it looks kind of like an optimization problem, but people seem to be losing money. Why would anyone put money in this? And so then I started talking to Guillermo. I was like, hey, here's some equations.
00:27:30.358 - 00:27:53.874, Speaker C: And here's what I think is. But like, how is everyone not just losing all their money? And we were like, yeah, we got to find some description of why this is profitable for different types of people who are participating in this, both the people trading as well, the people providing liquidity. And in that process, I nerd sniped him XKCD 363, if I remember.
00:27:53.912 - 00:27:54.642, Speaker B: Oh, man. Wow.
00:27:54.696 - 00:28:45.074, Speaker C: That's where the definition of that is, 363 or 353. But whatever. The main point is that he then was like, hey, this is definitely a convex optimization problem. And crypto people, I don't think, were really thinking about, hey, what's the math behind this? They were just kind of like, well, hey, look, I made some money, and someone made a smart contract who didn't quite know why or how it worked, but just had a lot of conviction that it would. And kind of like a lot of things in this space, in the cryptocurrency space, people go and implement something that they completely don't understand why or how it works. And then users try it, and if they don't lose money, then all of a sudden, they're like, okay, it must work. So something I personally have found unappealing about the space was that there's a lot of that type of stuff, and half the time, you can't tell if it's a Ponzi scheme or not.
00:28:45.074 - 00:29:11.702, Speaker C: But Uniswap at that time really started seeming not like that. And if you try to write the equations out, it's a very simple, smart contract. It's probably the most amount of money per line of code ever written in history. Like, 100 lines of code, right? So it kind of behooved the question of, why does this thing work, and why doesn't it exist in the normal world already if it works so well? And so that was kind of to set the stage.
00:29:11.766 - 00:29:12.042, Speaker B: What?
00:29:12.096 - 00:29:19.822, Speaker C: Our first paper, which kind of got published in December 2019, although this journal has been extremely slow about publishing it.
00:29:19.956 - 00:29:25.582, Speaker B: Although I think we got an email about it recently. So it might not be that maybe it's finally 2021, will be the.
00:29:25.636 - 00:29:31.442, Speaker C: I mean, it got a bunch of citations, but since then. But it kind of, like, weirdly, has never.
00:29:31.576 - 00:29:34.814, Speaker A: It didn't actually see the light of day, but it was, like, accepted.
00:29:34.942 - 00:30:09.582, Speaker C: Yeah, it's accepted, but the preprint was online. And so this paper tries to formalize uniswap. Then I think the second thing I kind of tried to nerd snipe Guerrema about is like, there's something nice about this uniswap paper. We got some very simple, clean properties. We proved how expensive it is to manipulate it. We proved that people don't lose money, and we proved kind of that this property that academics had fetishized for about a decade in the automated market maker field called path independence was actually a red herring. Like, Uniswap worked because it didn't have that right.
00:30:09.582 - 00:30:38.386, Speaker C: So that was actually kind of the interesting thing that this Martin Coppelman and Vitalik on a Reddit post in 2015 that basically invented Uniswap. That Reddit post was right. It had the right intuition that all the automated market making literature was wrong. And you have all these very fancy academics, turing prize winners, who've written papers on this stuff. It's impossible to solve this problem. It's sharp, p complete, like, much harder than. And then it turned out it's actually this convex thing, which is extremely simple and easy to solve.
00:30:38.386 - 00:30:46.874, Speaker C: And so that was the key insight Guillermo had, was that, hey, the convexity is actually the thing driving why people are able to make money.
00:30:46.992 - 00:30:47.418, Speaker B: Right?
00:30:47.504 - 00:30:59.214, Speaker C: And then the second thing was, hey, there's this huge outcrop of new automated market makers. There was balancer, there was curve, and this was January 2020, so there weren't that many more.
00:30:59.332 - 00:31:02.250, Speaker A: Wait, you just said something. The convexity.
00:31:02.410 - 00:31:03.070, Speaker C: Yes.
00:31:03.220 - 00:31:07.650, Speaker A: Allowed that people. That is why people would make money. I don't understand that.
00:31:07.720 - 00:31:46.910, Speaker B: Okay, here's the beautiful part about convexity, right? As I told you, look, whatever, you're at the sill, you're trying to find the bottom of the hill. What you do is you just walk downwards. So it's a very funny thing because it turns out convexity essentially tells you something silly. Like any heuristic you can think of, any silly way of getting to the bottom will probably work, right? Okay, so it means that people don't have to know something as convex in order to solve the problem. You can simply say, look, I have an approximate guess. I have this silly algorithm that does something that seems to get the right answer. It turns out convexity essentially will not quite, but will almost guarantee that you get the right answer.
00:31:46.910 - 00:32:03.442, Speaker B: Right? So if a trader wants to perform the optimal trade, they don't need to know that the problem is convex. They simply use some potentially complicated method. But because it's convex in some sense, even though the trader doesn't know that they're going to get the right answer.
00:32:03.576 - 00:33:04.854, Speaker C: I see another interesting facet of this is in uniswap, there's two sides of this market. There's the liquidity providers who are trying to earn fees, and then there are the traders who are trading against it to get moved between currencies. And there's a sense in which the liquidity providers could lose money if the traders keep buying the more expensive asset and giving them the crappier asset. That's kind of what impermanent loss is. It's a terrible name, but that was the state of 2019 Ethereum. But the kind of interesting thing about the convexity, if I were to put it in yield farming language, is that if you have 1000 metaphorical apes who see 500% APY and all of them say, I'm going to put all my money in it, that strategy is actually optimal because it will converge to an equilibrium very fast. And that's the key to convexity, is that you can be dumb and just see 5000% APY putting my money there, and the system will be able to reach an equilibrium quickly.
00:33:04.854 - 00:33:07.954, Speaker C: If it wasn't convex, it could never reach equilibrium.
00:33:08.082 - 00:33:08.566, Speaker B: Right.
00:33:08.668 - 00:33:17.994, Speaker A: But this has to do also, that particular example also has to do with timing, though, doesn't it? Are you thinking in a system where everybody sees this at exactly the same moment?
00:33:18.192 - 00:33:27.838, Speaker C: Yeah, it does have to do with timing. But the idea is there might be some optimal apy, right? Like in the real world where people do know what convex analysis is, like bond traders and stuff like that.
00:33:27.844 - 00:33:28.830, Speaker B: You'd be surprised.
00:33:29.410 - 00:34:18.206, Speaker C: Guillermo's advisor is the one advises a lot of this type of stuff. Everyone is competing for fractions of these percentage points because everyone's like, oh, look, this thing, slight moved like 0.1%. And there's an arbitrage opportunity. And that actually is just in crypto. The liquidity constraints and the way capital moves in this space make it so that there's not much capital in certain opportunities, even though there should be, maybe because they're providing some yield or they have some reward. And the idea is that if the mechanism actually has sort of some convexity property, anyone just has to say, hey, look, I'm going to go move my capital to optimize that reward locally individually. But then the system, the global thing will be optimized, right? So remember how Guillermo was saying convexity is important for local.
00:34:18.206 - 00:34:39.790, Speaker C: Like, oh, if I'm locally an optimum at the bottom of the mountain, I'm globally at the optimum. What that means in an economy is locally, any individual trader trades what they think. That's the notion of local. Global is the whole system of traders. And the idea is it's, in convex problems, it's very easy to get to the global minimum, which is the equilibrium.
00:34:39.870 - 00:34:54.986, Speaker B: Yeah. So in some sense, you can think about the economy as like one big, I mean, this is a weird thing, but you can think about the economy as one big function. So this function takes in like 100 million parameters. Every person gets to only locally change one parameter. If everyone does that.
00:34:55.008 - 00:34:55.482, Speaker A: Right.
00:34:55.616 - 00:34:59.818, Speaker B: Congratulations. You have got the best possible function value, right.
00:34:59.904 - 00:35:00.762, Speaker A: And it's the best.
00:35:00.816 - 00:35:01.354, Speaker B: And it's the best.
00:35:01.392 - 00:35:15.966, Speaker A: This is the thing. This is what you're, you're not looking because you can map whatever, but you're looking for optimized, but for what exactly? Here, you're trying to get the best amount. Is it supposed to go higher? What does it do?
00:35:16.068 - 00:35:20.754, Speaker B: Yeah, the best amount here, right? And for a trader, the best amount is what nets to be the most money.
00:35:20.872 - 00:35:31.846, Speaker A: But back to that example of everyone having a parameter. It's like if everyone does that, right? Then everybody nets the most amount. Or is it like the entire system nets the most amount?
00:35:32.028 - 00:36:17.710, Speaker B: Okay, this is where the analogy gets kind of a little complicated, and I wasn't sure, but the point. Yeah. So you can imagine there's, like, one function that in some sense, the system is this big function, and if the system is at a minimum, so if that function is minimized, it's good for the system. That function could be a bunch of things. So in the case of turun, it could be, like, some notion of stability. And the point is that if everyone's incentivized to make, they can only change one of the variables of that function, but they want to maximize it for their own sake, because they net money, potentially, even though it could be smaller and smaller amounts of money, but they still will net money. If everyone does this, then the whole function is optimized, not just the local version, but the whole function actually is optimal.
00:36:17.710 - 00:36:26.466, Speaker B: Maybe this is one way in which convexity is nice. There's many ways in which convexity is nice, but, yeah, I think this is what Turin was trying to get at, if I understand correctly.
00:36:26.578 - 00:37:15.714, Speaker C: Yeah, I mean, I think the question that I think Anna's getting at is, like, what's the objective function? What is the thing that I'm optimizing? And why is that the best optimum, or why is that the thing that was decided to be optimal? And so, in the case of Uniswap, you have to frame a problem such that you can talk about a notion of optimum. And the problem we phrased in the first paper was what's called the optimum arbitrage problem, which is, let's say there's another market. There's Coinbase or finance. And Coinbase says ethereum is worth $1,000. And then Uniswap says ethereum is worth $900. So the question is, you want to buy low and sell high, right? So you want to buy from Uniswap and you want to sell on finance. And so what kind of the automated market maker literature of the 2010s said was that, hey, you can't figure out in the way they're structured.
00:37:15.714 - 00:37:53.166, Speaker C: You can't actually figure out what quantity to trade to maximize your revenue to buy from Uniswap. How much should you buy from Uniswap and then sell on Coinbase? And the automated market makers that academics were designing had no ability for you to quickly compute what the amount you should buy to maximize your profit is. However, Guillermo and then the co authors, we kind of realize that, oh, actually, for Uniswap, it's convex. So there's a unique exact quantity. To trade, you have to trade $50 of ethereum and it maximizes, it equilibrates the two prices to be exactly equal.
00:37:53.198 - 00:38:13.978, Speaker B: Yeah. So what's surprising is that the solution to this problem. So the best thing for the arbitrageure to do and why it's important for Unisoft. So the best thing for the arbitrary to do is to maximize their profit, right? But it turns out if an arbitrage, or we should, is they maximize their profit, they're also making the two prices equal just as a side effect of whatever they're doing.
00:38:14.064 - 00:38:24.122, Speaker A: I see, this is the arbitrage, right? Like they take some asset out of something that increases the price and then they move it into somewhere else, which decreases the price, decreases the price equilibrium. Yes.
00:38:24.176 - 00:38:59.890, Speaker B: And so they're literally equal. And so of, if you think about, it's not that complicated. But the whole point was, it was utterly surprising that the Uniswap tracked some external market. But kind of, when you think about it, you're like, wait. Yeah, of course. If there's ever a difference, right? Someone can profit by buying low and selling high, but the key to all of this is that how much to buy low and sell high in uniswap. And then later, as we showed, and actually we also showed this in balancer and afterwards showed it for essentially all of the CFMMs that exist now, is that that problem, because it's a convex problem, is easy to solve.
00:38:59.890 - 00:39:22.522, Speaker B: And so arbitrageors, who, even though potentially it could be very complicated, there are potentially many, many coins which they have to all balance in just the right way to make sure the prices all line up correctly. Right. None of that actually really matters because almost every silly heuristic will work to equilibrate those prices, even though in some sense the arbitrary need not know that this problem is convex.
00:39:22.586 - 00:40:11.470, Speaker C: And here the assumption of optimal is that given more than one market, they can stay synchronized strictly by incentives without actually needing money to keep being printed or come into the system. And that's the key that you could never show in old automated market makers what the original kind of very complicated designs that existed in 2010 and eleven had these problems where people could do what's called a money pump, they could trade back and forth between the assets and they could drain all the liquidity. Right? That's bad. And they basically proved, hey, here's a design where you can't do that. But guess what? You can never compute what the optimal arbitrage price is to synchronize with other markets. That's sharp, complete, in some cases and so the cool thing about Uniswap is you can show, hey, you can synchronize and you can bound the error of how much the prices can differ by. And then in practice, that's what happened.
00:40:11.470 - 00:40:34.466, Speaker C: And so I was observing that in practice and was like, there is no fucking way that the people who are doing this on ethereum are actually computing some very exact correct solution. But somehow they're getting the right answer, right? Because they're saying the binance price and the uniswap price were the same. And that was when it was like, there has to be some magic here under the covers.
00:40:34.498 - 00:40:43.338, Speaker A: And that was kind of what was the magic, though? Was it just their intuition? Was there some market force that was like putting the right number in, or what?
00:40:43.424 - 00:41:26.486, Speaker B: The market force is convexity. Okay, so let's get back to the original question that we're talking about is, yeah, we talked about these local functions. We talked about everyone has to switch a little local lever on this big function. Here's what it is, right? In some sense, uniswap has a bunch of different markets with a bunch of different coins. Here's the deal is that if I'm looking at two pairs of coins, let's say ether and USDT or something like that, and I locally optimize that, it's going to open up another but smaller arbitrage opportunity for someone else along a different pair. If they go and they're like, I know this arbitrage here, I'm going to go and change it. That's like a separate lever of this function, then they go and perform arbitrage there.
00:41:26.486 - 00:42:13.414, Speaker B: And now those two things get equilibrated, and the other two things are pretty close. And if you do that in a bunch of rounds, just kind of what arbitrariors all do locally. The global system has this beautiful property that all of the prices will match. If you trade like USDT for ETH, and then eth for dai, and then dai for whatever, and then back to USDT. In some sense, all of these cycles will have zero profit, or approximately speaking, they will be approximately equal. So this is what I mean when we say, like, look, the arbitrage problem, if people kind of solve it locally, will approximate the true problem on the graph, which is, here's what it is. It's making sure that there's zero profit everywhere on the possible graph, which is equivalent to saying that all of the prices are equal to whatever an external market.
00:42:13.452 - 00:42:15.970, Speaker C: And that's sort of a notion of economic.
00:42:16.050 - 00:42:16.694, Speaker B: That's exactly.
00:42:16.812 - 00:42:18.946, Speaker C: That the prices are synchronized.
00:42:19.058 - 00:42:30.730, Speaker A: Exactly. And I don't know if you did research on this for the work that you did, but the folks that actually came up with this structure, were they coming from a different place which allowed them to do this?
00:42:30.800 - 00:42:32.910, Speaker C: You mean Vitalik and Koppleman on the site?
00:42:32.980 - 00:42:33.310, Speaker A: Yeah.
00:42:33.380 - 00:43:14.090, Speaker C: No, this was right after the can you stop trading? Thing. And basically Vitalik was like, we need to somehow have Ethereum tradable without relying on fucking Bitfinex. I don't know if you guys know that. Google, can you stop trading if you want to learn about the history of this thing? Because this was when Ethereum was hacked during ETH Devcon, Shanghai, which one it was. And basically the attacker was dumping all the coins on this one exchange. And Vitalik was kind of trying to tell the exchange, hey, can you shut down the exchange? Can you shut down the exchange? And they were like, fuck you. And so that was what led to it being essential in his mind that there was a decentralized exchange.
00:43:14.090 - 00:44:05.898, Speaker C: And most people at that time had come up with really complicated and kind of annoying solutions, like zero x, where it's like off chain relayers, and you post proofs, and it's like Auger, just incredibly complicated, and you have no guarantees that the price even can stay synchronized. Or it's like things like from the academic literature, which were also equally complicated, and they also don't have the property that it's easy to figure out what the amount you should trade is. And so I think that was kind of the beauty of this design. But I think the design wasn't inspired by any academic insight as much as like, hey, we plugged in a couple of numbers in this formula. Looks like maybe it'll work. Kind of the usual kind of like crypto luckiness that I think people in 2015 and 16 don't walk their way into that. People now are like, what you could figure, find something that easy.
00:44:05.898 - 00:44:36.530, Speaker C: But the key point is this convexity property ends up being more generic. All of the constant function market makers that have hundreds of millions of dollars or billions of dollars in them all have this property, right? There's not a single one that doesn't. In fact, some of the ones have gotten hacked don't have this property. And people kind of exploited them with flash. And it's very clear that this property, both in practice and in theory, is the number one reason these things are stable. And they're stable by incentives alone. You don't have to add too much.
00:44:36.600 - 00:44:36.930, Speaker B: Right?
00:44:37.000 - 00:44:46.054, Speaker C: So the next paper we did was kind of making it generic and saying, hey, for any convex function, you can kind of get this synchronization property.
00:44:46.172 - 00:44:46.502, Speaker B: Yeah.
00:44:46.556 - 00:44:56.362, Speaker C: And from there, I think then the question was, hey, are we paying a price for this convex property? And I think that's where privacy comes in.
00:44:56.416 - 00:44:57.020, Speaker B: Right?
00:44:57.710 - 00:45:05.182, Speaker A: Actually, before we move on to that, the impermanent loss, where does that whole concept come from? Who coined that?
00:45:05.316 - 00:45:12.346, Speaker C: This guy Pintail, who's some anon blog post writer, February 2019 medium why impermanent loss?
00:45:12.378 - 00:45:14.478, Speaker B: It's such a bad term. It's like truly a terrible.
00:45:14.574 - 00:45:17.090, Speaker A: I think that person has apologized, though, right?
00:45:17.160 - 00:45:20.242, Speaker C: Yeah. They too agree it should be called opportunity cost.
00:45:20.296 - 00:45:23.298, Speaker B: Okay, yeah, I agree.
00:45:23.464 - 00:45:25.346, Speaker A: Opportunity cost is way more.
00:45:25.448 - 00:45:27.038, Speaker C: It's way more descriptive.
00:45:27.214 - 00:45:27.926, Speaker A: We know what that is.
00:45:27.948 - 00:45:44.186, Speaker B: And more. Correct. Right. Because impermanent loss has nothing to do with impermanence other than in some weird esoteric sense where you have some complicated, recurrent know. It doesn't make any sense, is the point. I mean, it kind of does in stable points or something. But that's mean.
00:45:44.186 - 00:45:53.786, Speaker B: So it turns out, here's a fun fact. Without fees. So if the CFM charges no fees, impermanent loss is just a thing that happens for all CFMMs.
00:45:53.978 - 00:46:13.502, Speaker C: Sorry, that's the deal. CFMM stands for constant function market maker, which is the set of all of the possible mechanisms that act like uniswap and sort know. A lot of our work works on classifying those and describing what properties are necessary to be sort of economically stable.
00:46:13.566 - 00:46:13.938, Speaker B: Right.
00:46:14.024 - 00:46:20.690, Speaker A: So what you just said, if there were no fees. And by fees, do you mean fees in that network or like gas fees?
00:46:20.770 - 00:46:47.486, Speaker B: So I actually mean fees like the percentage fees. So Uniswap, for example, has this beautiful constant called whatever, 0.997. It's the classic or zero three, depending which way you're looking at it. So without that fee, liquidity providers always end up losing. Okay, we have some other paper that essentially shows that the best fee is the smallest possible fee under some conditions as well. But it turns out like this impermanent loss, or whatever you want to call it, opportunity cost is all opportunity costs. Yeah.
00:46:47.486 - 00:46:55.250, Speaker B: Is kind of like an intrinsic feature. So that's one place it might not be good or it might be good. It depends.
00:46:57.590 - 00:47:02.370, Speaker A: Are you calling the opportunity cost or impermanent loss a fee here?
00:47:02.440 - 00:47:05.326, Speaker C: Are you equating fee is supposed to compensate for that loss?
00:47:05.358 - 00:47:05.940, Speaker B: Exactly.
00:47:06.950 - 00:47:25.714, Speaker C: Here's one way of thinking about if I'm a liquidity provider and I put in 50 x and 50 y, and the price now keeps going up and you're losing the more valuable one and gaining. You need a fee in the more valuable one to compensate for the loss that you're having because you're just holding the shitty one.
00:47:25.852 - 00:47:36.880, Speaker A: Although, isn't there a point where that fee does. It's no longer worth it? I feel like I've experienced that myself by leaving eth in too long some of these things.
00:47:37.250 - 00:47:54.130, Speaker B: Yeah. So one example of this is you could imagine, you know for certain that coin a is going to increase and coin b is going to stay the same. Right. And congratulations. If a is increasing too quickly, there's essentially no fee by which you're ever going to make money, right?
00:47:54.200 - 00:47:55.010, Speaker A: Totally.
00:47:55.510 - 00:48:19.018, Speaker B: So this is absolutely the case. It's what I call the foster bargain, or the devil's bargain that you have when you become a liquidity provider for these constant function market makers, or whatever uniswap or whatever you want to call them. And it's essentially you as a liquidity provider are betting in some sense that the price isn't going to change too much, or if it does, it's going to revert back to what it was before. That is your bet.
00:48:19.184 - 00:48:24.330, Speaker C: So one thing is that this is also true in real life. See GameStop.
00:48:24.490 - 00:48:25.198, Speaker B: Yes.
00:48:25.364 - 00:48:47.926, Speaker C: Because if the price moves too fast, market makers can't actually cover on both sides, and then they just don't put any liquidity there, or they require too much collateral, and then the same thing happens in order books. It's just that people, we have all these market mechanisms by centralized political authorities of like, oh, no, circuit breakers can't go over x percent per.
00:48:48.028 - 00:48:48.802, Speaker B: Yep.
00:48:48.946 - 00:49:01.622, Speaker C: And it's in Defi land. You can't do that. And so I don't even know if it's necessarily even a fossian bargain. That's the bargain you have for being censorship resistant. You better be okay with that.
00:49:01.676 - 00:49:13.120, Speaker B: Right? Yeah. This is why I call it the deal with the devil. Right. Because it's fundamentally part of the deal you make as selling yourself for the good things of whatever decentralized finance, I mean, whatever it is that gets you into this.
00:49:13.650 - 00:49:17.454, Speaker A: Can I ask a really kind of naive defi question here?
00:49:17.492 - 00:49:18.880, Speaker B: No, by all means, please.
00:49:19.570 - 00:49:40.646, Speaker A: Because I haven't actually experienced this, because I haven't seen the price go down significantly. But what happens if you're holding and then one of the assets prices just drops and the other one stays stable? Does it keep the amount of value stable plus the fee, or. No, not at all. You're shaking your head.
00:49:40.748 - 00:49:50.458, Speaker B: So the price going down on one asset and having and being stable on the other is exactly the same. It's, in fact, equivalent to the price staying the same and the other asset going up.
00:49:50.544 - 00:49:51.322, Speaker A: I see.
00:49:51.456 - 00:50:03.886, Speaker B: Because it turns out that Uniswap has this property as this balancer and all these things that it's what's called scale invariant. Anytime one asset goes down, it's the same as all of the other ones going up.
00:50:03.908 - 00:50:06.830, Speaker C: By that same multiply, do you lose?
00:50:07.170 - 00:50:10.542, Speaker A: Does the value of your entire amount just go down?
00:50:10.676 - 00:50:17.758, Speaker B: Yeah. You as a liquidity provider lose, because you now end up getting more of the, so to speak, less valuable asset and less of the more valuable asset.
00:50:17.774 - 00:50:23.314, Speaker A: I see. So the stable asset will potentially, there'll be less of that. That's where your loss will.
00:50:23.352 - 00:50:24.820, Speaker B: There'll be less of that. Exactly.
00:50:25.190 - 00:50:26.210, Speaker A: Haven't seen it yet.
00:50:26.280 - 00:50:29.030, Speaker B: And you get more of the other asset, too. So congratulations.
00:50:29.930 - 00:50:32.294, Speaker A: You have less of the good, more of the bad.
00:50:32.412 - 00:50:33.270, Speaker B: More of the bad.
00:50:33.340 - 00:50:33.622, Speaker A: Okay.
00:50:33.676 - 00:50:34.230, Speaker B: Exactly.
00:50:34.380 - 00:50:45.654, Speaker A: All right, so now let's move on to kind of the last part of this interview, which is how then, does privacy play a role? Like, what are you trying to solve for with privacy?
00:50:45.782 - 00:51:03.886, Speaker B: Yeah, well, so that's the question that I think we posed in our latest paper is, because, I guess, for the audience, this is in reference to a recent note. I guess. It's not even a paper. It's a note because it's like nine pages or something silly like that compared to the 40 page tomes that we usually. Yeah, sketch. Exactly.
00:51:03.988 - 00:51:04.640, Speaker A: Okay.
00:51:05.010 - 00:51:08.026, Speaker B: Inspired, actually, by Anna on essentially show.
00:51:08.068 - 00:51:09.394, Speaker A: By an event that I did.
00:51:09.512 - 00:51:12.420, Speaker B: Yeah. I mean, might as well be you, equivalently. Right.
00:51:12.870 - 00:51:27.602, Speaker A: Okay. And we'll say what that is. It was the ZK sessions define privacy. And Guillermo gave a talk, and it was about this particular topic, which is sort of privacy. CFMM. How does it help? How does it hurt?
00:51:27.666 - 00:51:28.326, Speaker B: Correct.
00:51:28.508 - 00:51:29.702, Speaker A: I don't know if that's a good.
00:51:29.836 - 00:52:20.182, Speaker B: No, no, this is great. Another part of the bargain that Tarun had mentioned is convexity is very nice in a lot of ways, but it also hurts you when you're trying to be private. And the reason why is convexity provides a lot of structure into how the market behaves. Okay. One way of thinking about privacy is, look, we don't want anyone to be able to teleport any other person's traits, right? So someone buys a bunch of coin in some market. What we don't want is we don't want kind of an eavesdropper we usually call Eve to be able to tell apart what the agent who we usually call Alice has traded. So in normal transactions, it's super easy to hide how much someone has traded.
00:52:20.182 - 00:52:24.486, Speaker B: Simply, here's the deal. You hide the quantities that Alice has sent to Bob.
00:52:24.598 - 00:52:28.982, Speaker A: And by normal, do you mean, like, in traditional transactions?
00:52:29.046 - 00:53:15.946, Speaker B: So, in classic transactions, where we say privacy, we mean, like, look, if Alice and Bob changed some quantity of you, if you hide that, then congratulations, no one knows anything about anything, right? So if they exchange between each other and you hide those quantities, then an eavesdropper cannot know what the quantities, right? Because by definition, they're hidden. So it turns out that logic, or I guess, that intuition doesn't actually carry through for CFMMS, right? So here the setup is, Alice, instead of trading with Bob, not trades with a CFMM or a constellation market maker, for example, trades with Uniswap. And the intuition says, okay, Alice trades with Uniswap. Let's just hide whatever she traded. Right? And then Eve obviously can't tell. Just. That's not true.
00:53:15.946 - 00:54:28.974, Speaker B: The problem is that Uniswap only allows very specific trades to go through, and that's essentially due to the convexity of the market itself. So just hiding the quantities doesn't help you, because Eve can also interact with this market. Eve can look at the prices of the market. Eve can check whether she can trade some amount of money, and in some sense, having the ability to do that before and after Alice's trade is enough to recover, actually what Alice traded. In finance, this idea of your market price changes when someone makes a trade is called slippage, right? And most people probably know what this is already, but it turns out the slippage is kind of what outs you, because what you do is you take the price before Alice's trade and after Alice's trade, and you see, okay, look, the price went up by one cent. I know there's this much liquidity in the market, so I know exactly what Alice must have traded in order for the price to have gone up that much. And so, kind of that's what our paper shows, is that there's this attack vector that's often not really considered that says the following.
00:54:28.974 - 00:54:56.714, Speaker B: If Eve can interact with the market and knows, roughly speaking, when Alice transacted with the market. So when Alice performed her trade, then you reach this weird point where even though Eve need not know Alice's trade or really anything about it, it suffices for her just to be able to interact with the market and ask, what's your price here? And then after Alice's trade, what's your price now? And then use that to reconstruct what the original trade was.
00:54:56.832 - 00:55:15.486, Speaker A: There's a point I kind of want to bring up before we go even deeper into this, which is going from what you were describing me before, why do you even want privacy? Does privacy also have some good qualities that could be useful, or is it just kind of like, we want it because we're businesses and we just don't want people to see our work?
00:55:15.588 - 00:55:58.766, Speaker B: So I think Tarun has better thoughts on this than I do. But, I mean, privacy kind of makes a lot of sense in weird ways, right? One is this notion of front running resistance. Right? What you don't want is you don't want someone to come in. So what can happen is if someone knows you're going to buy whatever $10 of some asset, what they can do is they can front run you by buying some amount of the asset. Then you buy your $10 of the asset, right? And now the price is higher than it should have been because you bought some amount and they bought $10, and then you go and sell it. So essentially, you're kind of taking advantage of the fact that, you know, someone is going to trade with the market and you know which way they're trading with the market, and that's really important. So that's case one.
00:55:58.766 - 00:56:33.946, Speaker B: I mean, case two is also that in some sense, we all claim that wallets are pseudonymous. And, yeah, that's mostly true in some weird way. Right? If you create a wallet very temporarily for a very small number of traits, but it turns out everything can be traced pretty easily. And there's a whole industry around de anonymizing wallets, and it's really damn good. Right? So my point is, good luck trying to stay private if you have anything more than some negligible amount of money in the market. And I think Tarun probably has better thoughts on this, so I'm going to let him continue answering this.
00:56:33.968 - 00:57:00.142, Speaker C: But the only thing I would add is that there are two other things. One is, if you're a whale, you don't want people knowing you're selling because it kind of not just front runs you, but also back runs you. So maybe you're a Whale and you can't sell. You have thousands of tokens. You sell ten tokens and everyone's like, oh, shit, this whale is selling. We're just going to dump. And then now your fortune is pitiful, right? Has been depleted.
00:57:00.206 - 00:57:00.820, Speaker A: Yes.
00:57:01.350 - 00:57:47.220, Speaker C: But the interesting thing is, I will say the lack of privacy in Defi has led to a bunch of very interesting market dynamics that remind me a little bit of, like, Instagram influencing, where people will have public vanity addresses that they advertise as them, and then they say, hey, I bought this or I'm trading this. And then people copy trade. So it's a little bit like kind of. Yeah, there's like, influencers who take advantage of the lack of privacy, and then there's people who follow that. Right. Of course, at the same time, there's also the fact that you can't do big trades. And this is the same thing that exists in the normal market, where big orders and big trades really leak a lot of information and you can't do them efficiently without privacy, without everyone else trying to.
00:57:47.220 - 00:58:00.034, Speaker C: In a sense, that's societally mechanistically stable, where no one party takes all of the loss or something. If I look at everyone's sort of the distribution of profit and loss.
00:58:00.162 - 00:58:18.970, Speaker A: So this is helpful to sort of frame this. And what you just described before was kind of describing why the sort of proposals for privacy, a superficial proposal for private CFMM, will still leak information. It actually doesn't solve for what it says it will solve for.
00:58:19.040 - 00:58:19.754, Speaker B: Correct.
00:58:19.952 - 00:58:34.250, Speaker A: Do you have an example of where it does work? Like, are there things that people should be doing if they're thinking about these private. I don't know what you'd call them. Like, private CFMM structures.
00:58:34.330 - 00:58:35.230, Speaker B: Something like that.
00:58:35.380 - 00:58:37.386, Speaker A: Something like that. Private amm.
00:58:37.418 - 00:58:42.978, Speaker B: Yeah. If you come up with a good name, you should tell us, because that might be the title of the next paper or something like that.
00:58:42.984 - 00:58:47.974, Speaker A: They're called private amms. Pams. No.
00:58:48.172 - 00:58:52.840, Speaker B: Yeah, I'm going to take that. I might steal it.
00:58:56.170 - 00:58:56.854, Speaker A: I don't know.
00:58:56.892 - 00:58:57.286, Speaker B: Right?
00:58:57.388 - 00:58:58.182, Speaker A: I don't know.
00:58:58.316 - 00:58:59.222, Speaker B: You're vetoing it.
00:58:59.276 - 00:59:00.694, Speaker C: It just reminds me of the.
00:59:00.732 - 00:59:01.630, Speaker B: It's better than cffs.
00:59:01.650 - 00:59:07.580, Speaker C: I don't want anything to do with trading or privacy. That reminds me of the office, the tv show.
00:59:09.390 - 00:59:09.946, Speaker B: Right.
00:59:10.048 - 00:59:13.670, Speaker A: Okay, we'll leave that one on hold. We'll come up with a better word eventually.
00:59:13.830 - 00:59:33.934, Speaker B: Fine. But it's actually pronounceable, which is much better than any of our current ones. So I guess in the paper we do provide a few mitigation strategies. Right. And it's not clear these are sufficient, but they're certainly at least necessary in some sense. One of them is kind of almost silly. And that is the idea that you can batch orders.
00:59:33.934 - 01:00:26.898, Speaker B: Right. So what you do is instead of having kind of. This whole argument that I gave previously relies on Eve being able to critically know when Alice's trade was but you could imagine that Alice makes a trade, but also a hundred other people make a trade, and the trades aren't executed until a long time after everyone has submitted them. And in that case, Eva is going to have a pretty damn hard time telling apart Alice's trade if Alice's trade isn't like, super large compared to the rest. So in that sense, there exists some things you can do. Another thing you can do, which actually starts to get very complicated because you have to do it in a way that is self consistent, is you can add random noise to the reported price. So if you add enough noise, there's a few downsides to that, right? One is, if you add noise to the reported price, you might be underreporting the price.
01:00:26.898 - 01:01:18.118, Speaker B: So people are going to be incentivized to buy at that price. And so liquidity providers end up kind of losing some amount of money. Similarly, the same thing happens if you over provide, if your price is too high or whatever. The other kind of issue with that is that your randomness, or your noise, so to speak, has to be very carefully constructed, because a simple, dumb idea would be to just kind of, every time someone asks for the price, you give them a price with some additional noise. But here's the deal, right? If I take ten measurements and I average all of them, that's going to be pretty close to the right thing. If you're telling me, look, I'm adding noise, that's mean zero, right? It cancels out. If you add enough of them and take the average, then that's kind of silly, right? Because then you never had privacy in the first place.
01:01:18.118 - 01:02:35.086, Speaker B: So this kind of requires a very complicated mechanism for which to add noise in such a way that that doesn't happen. But also, after you make a trade, what you also don't want is you don't want the price to change too much, because then someone else can distinguish actually how much the price changed, which is before leads us to the original attack, right? Essentially, if we know the slippage, we know how much someone traded to get there. So it becomes this kind of weird trade off where what happens is you either have a degraded user experience in some sense or another, because you're either misquoting prices or you have to batch things in general, or there's any one of these trade offs, you're kind of paying a price in some sense for privacy. It's not just like kind of a freebie. You don't just get privacy, right? The problem with this, in the end, is that you could imagine that, for example, orders taking a long time because they're being batched, or similarly kind of weird price misquotes because you've added noise to them end up threatening the solvency of the system. In some sense, the system itself works because there's this feedback loop that allows it to work, but you're kind of threatening that by injecting noise. Right.
01:02:35.086 - 01:02:56.020, Speaker B: And whether noise comes from delays or whether it comes from actual stochastic noise added to the price, it's something to consider. It's not super obvious that it just yields, like, positive effects and potentially just a negative user experience. In fact, might yield more consequences outside of personal, but rather systemic risks that kind of emerge from doing things like this.
01:02:56.870 - 01:03:12.138, Speaker A: One thought I had, as you're talking kind of about this specific randomness, and I realize this is like a different track, but has anyone thought of using vdfs for this kind of thing? And I say that because I always think of randomness in the context of vdfs, even though I know it has more to do with time.
01:03:12.304 - 01:03:35.620, Speaker C: Yeah, it's definitely the type of thing you want to use for this. That's how you would actually implement the batch time to be non manipulable. And it also kind of ensures that the precise timing is not attackable. But it's like most vdfs are still, I would say, 90% theoretical, 10% real.
01:03:36.390 - 01:03:36.706, Speaker B: Right.
01:03:36.728 - 01:04:17.790, Speaker C: But it's definitely one way of doing this. Gnosis had another approach, which was really complicated. Again, I think somehow people in the last era of icos just believed that really complicated mechanisms would work, and then they didn't realize they were dealing with quote unquote apes, as the Twitter meme goes. Right, but Gnosis's thing has a notion of a batch auction. Great, that's a check plus. But then they also had this crazy thing where people had to crowdsource solutions to this NP hard problem. So really hard, opposite of a convex problem in a lot of ways.
01:04:17.790 - 01:05:08.074, Speaker C: And then whoever had the best solution that would map to how the orders got allocated to price, and this thing was super front runnable. And so what people would do is around. People did like, initial token offerings in this gnosis thing, and gnosis was really hyping this up earlier this year before kind of balancer took over. The balancer, LBP and Uniswap have kind of completely taken over this whole IPO token thing that gnosis really wanted to take over but completely flopped on, which was you crowdsource this solution to this NP hard problem that solves this allocation. So people would just front run. So everyone who would send orders early was actually like a fish who. The person who was the last person to send in an order would send in an admissible solution.
01:05:08.074 - 01:05:50.902, Speaker C: It doesn't need to be optimum, remember, it doesn't need to be optimal, unlike in the convex case, for their thing, it just needs an allocation of price quantity. And the interesting thing is, whoever the last person to submit a solution in would always be like the person who puts in a huge whale order. And then they give themselves the cheapest thing and then make everyone else take a worse price. And they have this problem that because you don't know what the true best solution of how to distribute these tokens to the number of people who submitted orders is, you just get really bad things where the person who's smartest and the last. And sniping takes everything. And so it's the opposite of uniswap. Because in the Uniswap case, there's no dispute over the best allocation.
01:05:50.902 - 01:06:08.658, Speaker C: Like there is just a single best notion of trade size. And that is why it's so much better than almost every other alternative that's ever happened. That's why this notion of convexity is the key to why it has worked in practice much better than every other solution. Like zero x gnosis, right?
01:06:08.744 - 01:06:40.630, Speaker A: So it sounds like the vdfs and amms and privacy. Maybe that's something for the batching in the future, and we're just going to leave it as a project. But the idea of the convex optimization and the privacy paper, I kind of want to reconnect those. So when it comes to those privacy amms, they don't exist necessarily. There's some theoretical ones that have been proposed. But are you doing an inverse kind of engineering or inverse design in this case? Or are you more designing a privacy amm?
01:06:40.790 - 01:07:01.554, Speaker B: So this is foreshadowing some paper. I think it's supposed to be due in the near future. There is some notion of designing a private amm. Maybe I shouldn't say that. Turin, I don't know. But in some sense, actually, you do bring up a very good point. And this is a question that tarn and I had been thinking about for a while, which is the question of designing either privacy amms or really amms in general.
01:07:01.554 - 01:07:40.042, Speaker B: And you can kind of do know, and sometimes they're not really related originally, as stated, because inverse design is usually a very specific connotation, but you can optimize parameters of amms and things like that for specific application uses. And this is kind of a thing we mentioned way back in the CFMM paper, okay? And it's this question of, you give me some figure of merit, some function that tells you how good your AMA is for a given circumstance, and you can change the parameters or change the function itself to best match or to be best for this metric. Right? Or something. I guess let's roughly write something to optimize this metric.
01:07:40.186 - 01:08:58.954, Speaker C: Maybe we can motivate this a little bit with the example, which is curve has a different curve that's very flat, which is very good for things who kind of are stablecoins that trade around a fixed value, and it doesn't cause loss, but it's very bad for things that drift a lot. Like one's price is way higher than the other, like Ethereum versus USD. And that's a function of the shape of the curve. So this impermanent loss, how much impermanent loss you have is dependent on, a, how people are trading, but also b, the shape of this curve. And so one question is, given some process, some notion of the way a price behaves for a certain asset or some property, of the payoffs of that asset, you can try to say, hey, what is the best function I can fit to that? And so I would say 90% of people who are raising money right now on CFMMs, for better or worse, are just trying to solve that problem of, like, what function do I choose that's slightly better? And I think a year ago, there was no one doing it, and you're probably likely to succeed, whereas now there's just a million people and they're making tiny tweaks. It reminds me of, like, proof of stake in 2017. Like, by the end of 2017, everyone and their mom was like, I'm making a proof of stake protocol with this little special thing.
01:08:58.954 - 01:09:20.302, Speaker C: Special thing, right. But the special thing people are doing is adjusting this curve. And so one question might be, can you automate that process to go from a kind of like, hey, this is what the real life data is. Here's the curve that fits best to it. And I think that's all we should say. Yeah. The next step is to add privacy to that.
01:09:20.356 - 01:09:20.670, Speaker A: Okay.
01:09:20.740 - 01:09:31.138, Speaker C: Because there's actually some parameters where for a trading curve like, curve, you might actually not need as big of a batch size.
01:09:31.224 - 01:09:31.860, Speaker B: Right.
01:09:32.470 - 01:09:57.260, Speaker C: Whereas for something like uniswap, you might actually need to batch more transactions to spread privacy. And there's some notion in which the shape of the curve maps to how much privacy or how easy it is to lose privacy. So this is where the true uncharted design space is. And I think right now everyone's kind of trying to go for the easy thing because investors are like, oh, you're 10% better, you take my money, right?
01:09:58.190 - 01:10:09.840, Speaker A: Oh, that's interesting. So it's almost like the mitigation of the issues caused by adding privacy to a CFMM setup, that mitigation may be influenceable by this.
01:10:11.810 - 01:10:56.222, Speaker C: And so that's, I think, where Guillermo's kind of inverse design lens of the world, inverse design is kind of very similar where you have something you want and you want to recreate the bridge. To choose this analogy, you're like, I have two islands and there's some water between them, and it's really windy there, and I have millions of cars driving on it every day. Build me the best bridge. There's just the equivalent problem here. But privacy should be one of the objectives. And you have to design with privacy in mind. And the first CFMMs were designed with no kind of notion of privacy in mind.
01:10:56.222 - 01:11:15.170, Speaker C: And so I think our work is really about showing kind of that aspect that, hey, these things work. And they work on a blockchain with no transactions per second, like very low transactions per second, like ethereum, but they do give up something. And if you want to recover it, here's kind of the constraints to recover it.
01:11:15.240 - 01:11:18.390, Speaker A: Cool. Well, I'm so excited to see this.
01:11:18.540 - 01:11:21.046, Speaker B: Me too, actually, because I wip, this.
01:11:21.068 - 01:11:23.138, Speaker A: Is the future work, not the work that exists.
01:11:23.234 - 01:11:23.734, Speaker B: Future work.
01:11:23.772 - 01:11:24.214, Speaker A: Okay.
01:11:24.332 - 01:11:25.138, Speaker C: Alpha leak.
01:11:25.234 - 01:11:35.706, Speaker B: Truly an alpha leak. We have mentioned some of this. We've dropped hints about this on some of our older papers for sure. But yeah, this is definitely a true alpha, beta and gamma leak, I guess.
01:11:35.728 - 01:12:00.094, Speaker C: Is the, but it is kind of crazy that when you think about it, that Guillermo is able to kind of take this thing that's used for very esoteric hardware research and kind of apply it to defi. And I think that type know every bull market in this space always brings in new talent. And so I think that you're naturally going to get people from more varied.
01:12:00.142 - 01:12:07.460, Speaker B: Backgrounds, from weird fields like physics optimization theory, because whatever.
01:12:07.830 - 01:12:08.626, Speaker A: Why not?
01:12:08.728 - 01:12:19.122, Speaker B: Yeah, exactly. I used to think it was just my mom reading my papers. It turns out now it's approximately ten more people from DFI. So they make up 90% of the people who do read my papers.
01:12:19.266 - 01:12:20.200, Speaker C: It's great.
01:12:20.570 - 01:12:22.826, Speaker A: Well, maybe after this podcast there'll be.
01:12:22.848 - 01:12:24.118, Speaker B: A couple more, hopefully.
01:12:24.214 - 01:12:50.962, Speaker A: I do want to say a huge thank you for coming on and going through all of this with both of us. I know, Tarun, you're well versed, but for me, this was new territory. It also helps to put in context the presentation and the paper that you recently published. I'll be adding links to that in the show notes, if anyone wants to catch that. I mean, I got the presentation, but I didn't understand where it fits into this larger study that you're doing. This is very cool.
01:12:51.096 - 01:12:53.982, Speaker C: One of the other interesting things I think about Guillermo.
01:12:54.126 - 01:12:55.670, Speaker B: Oh, God, now I'm worried.
01:12:56.410 - 01:13:53.526, Speaker C: And sort of Stephen Boyd's labs writing style is. I think Boyd is really probably the most popular kind of textbook that people learn convex optimization from. And one of the reasons it's so popular is he writes in the most simple mathematical language, which is kind of a little bit of the opposite of cryptographers who really love this very kind of crazy way of writing math with challenge response, and writing kind of these algorithms out in kind of a little harder to read for a generic audience manner. But part of the reason that their writing style is quite important for this type of work is that it's very interdisciplinary. Like, a lot of people from different fields are consuming it, so you kind of don't want to write towards one specialties, vernacular. You want to write at, like, the, you know, multivariate calculus, and that's it. You took it in college.
01:13:53.526 - 01:14:31.454, Speaker C: And I think that's actually a really interesting thing. I think about the way the style of these papers we work on is because it's always like, alex, who's on the podcast earlier, and I, we kind of come from more like, we were, like, writing out the math in more math language, and Guillermo's always like, axe, axe, axe, axe, axe. And it's actually super interesting because I think that level of approachability is actually what made these papers quite widely read in the crypto community, because they were able to learn something without actually having to be subject matter experts in these other fields.
01:14:31.582 - 01:14:53.418, Speaker B: Yeah, it's funny. I think the first time I talked to Truden and Alex, I gave them essentially, like, an EUla, essentially waiving all rights to any of the writing being made and to apologize in advance for just how much of a pain in the ass I was going to be as a co author about writing. But I think it's true that.
01:14:53.424 - 01:14:55.638, Speaker A: Well, sounds like an amazing combination.
01:14:55.734 - 01:15:22.740, Speaker C: Yeah, I've definitely learned a lot about how to write for multiple fields in the process of this, because I think it's actually quite hard, if you want. Crypto is a very interdisciplinary space, and one of the reasons I see people not understanding what's happening is that people of different fields will write in their own vernacular, and then it sometimes will be purposely cryptic because they're trying to raise money.
01:15:23.590 - 01:15:24.434, Speaker A: God damn it.
01:15:24.472 - 01:15:40.134, Speaker C: And then other times, it's not purposely misleading. It's just that they're not really trying to write to an audience. They're used to kind of the highly specialized academic environment of there's ten people who know how to read this paper, and I'm only writing to them, and I don't care about anyone else.
01:15:40.172 - 01:15:48.700, Speaker A: Yeah, I think a lot of guests that have come on actually have that, and then they have to face my dumb questions and dumb it down a little bit.
01:15:49.710 - 01:16:22.886, Speaker C: I think the interesting thing about Guillermo's advisors, I would call him a contrarian academic, because most academics keep their kind of position, get tenure, get more funding, by being more esoteric. Right. Being highly more specialized. And somehow their group is the opposite. They've been able to kind of, like, by being very broad and being in many different fields and having to write in a manner that covers all covers all of them. They've actually been quite successful. So I think that crypto mirrors that in a lot of ways.
01:16:22.988 - 01:16:23.494, Speaker B: Right.
01:16:23.612 - 01:16:41.690, Speaker A: Well, this is interesting. I want to learn more. Well, I think that brings us to the end of this incredible interview and incredible conversation. Actually, I learned a lot, and I really appreciate you taking the time. And thanks, Tarun, for being back on as a co host and as the co author of some of this stuff.
01:16:41.840 - 01:16:49.294, Speaker C: Yeah, I think I was Schrodinger's interviewer. I was never clear whether I was the interviewee or interviewer at any point during this.
01:16:49.332 - 01:16:58.074, Speaker B: Again, like I said, like, my savior for some of these. Sometimes I'm like, Turin has some great answers to this, and surprised, lo and behold.
01:16:58.202 - 01:16:58.734, Speaker A: Cool.
01:16:58.852 - 01:17:01.374, Speaker B: So, yeah, anyways, thank you so much for having me.
01:17:01.412 - 01:17:01.774, Speaker C: Oh, my God.
01:17:01.812 - 01:17:08.070, Speaker B: This is kind of weird because it's the first time, like, really publicly spoken about a lot of research, but wasn't at some weird academic conference.
01:17:08.650 - 01:17:13.894, Speaker A: Oh, that's great. I didn't know that. Well, fantastic. So thanks again.
01:17:14.012 - 01:17:15.558, Speaker B: No, thank you so much for having me.
01:17:15.644 - 01:17:17.910, Speaker A: And to our listeners, thanks for listening.
