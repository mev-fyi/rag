00:00:05.450 - 00:00:49.222, Speaker A: Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. This week, James and I chat with Ben Jones and Mark Tyneway. From optimism, we learn about the team optimistic roll ups, what is unique about optimism? The challenges of optimistic roll ups, partnerships, and more. But before we start in, I want to say thank you to this week's sponsor, least authority. Least authority is a leader in the security of distributed systems.
00:00:49.222 - 00:01:54.210, Speaker A: They provide security consulting services, develop open source products, and contribute to the advancement of learning and research in the field. In addition to their security reviews of innovative projects such as loopring, Mina and Filecoin, this May they will actually be releasing a white paper on ZCAps or zero knowledge access passes. ZCAPs is an anonymous token based authorization protocol that facilitates an online exchange of value while disconnecting the necessary payment data from day to day usage service data of customers. Private storage will launch right after the white paper is released. Also this coming summer, the Moon Math Manual, a beginner's guide to Zksnarks, which introduces the theory and applications of ZK snarks from various angles, will also be released. So sign up for leased authority's newsletter to stay in touch and be notified of the release of the ZCaps, white paper, private storage and the Moon Math Manual, as well as continuous security audit reports, job openings and more. Visit Least Authority slash newsletter to join their mailing list.
00:01:54.210 - 00:02:12.822, Speaker A: So thank you again. Least authority. Now here is our interview with optimism. So this week, James and I are here with Ben and Mark from optimism, builders of the first optimistic rollup, live on Ethereum. Welcome, Ben and Mark.
00:02:12.956 - 00:02:13.590, Speaker B: Thank you.
00:02:13.660 - 00:02:15.174, Speaker C: Thanks Anna, for having us.
00:02:15.292 - 00:02:17.890, Speaker A: And hello, James. Welcome back. Hi Anna.
00:02:17.970 - 00:02:20.438, Speaker D: Hi Ben. Hi Mark. It's good to see you all again.
00:02:20.524 - 00:02:22.390, Speaker B: Hey James, likewise.
00:02:22.730 - 00:02:38.878, Speaker A: So, Mark, I want to start with you. You've actually been on the show before. I think you were on the show last year, but for a totally different project. So you were working at the time on Handshake. And I'm curious, what's been your journey since then? I want to hear what's new with you.
00:02:39.044 - 00:03:18.902, Speaker C: Oh, yeah, totally. Handshake is a really interesting project for people that don't know. Handshake is a decentralized DNS root zone and it's a fork of bitcoin, so ten minute block times Utxo based. But it has some kind of fun extra goodies that let you basically purchase domain names on chain in an auction system. And after working on handshake for a while, the project is pretty decentralized. There wasn't really a good ecosystem of companies building on it yet. And I was always Ethereum curious.
00:03:18.902 - 00:03:39.970, Speaker C: And I had met Ben, Carl, and Jing and the optimism team at conferences, and I kind of wanted to hop into the Ethereum space and kind of learn what could be built over there, just because building on bitcoin, it takes months and months in what you can do in a single weekend on Ethereum.
00:03:40.550 - 00:03:53.670, Speaker A: And actually, I guess if anyone wants to find out more about that work that you mentioned, the handshake work, I'll add the link to that in the show notes. We did a whole episode about kind of your background and that project. But when did you join optimism?
00:03:54.570 - 00:03:57.478, Speaker C: I believe it was last July or so.
00:03:57.564 - 00:04:00.002, Speaker A: And what are you doing there? What's your gig?
00:04:00.066 - 00:04:15.054, Speaker C: I'm a developer and I'm working on basically Gef. We maintain a fork of geth that kind of runs as a sequencer or a verifier. And I'm also doing some DevOps work, kind of our deployments and making sure that it's stable. Running in the cloud.
00:04:15.172 - 00:04:17.806, Speaker A: Cool. How big is the dev team right now?
00:04:17.988 - 00:04:23.502, Speaker C: Oh, it's pretty small. It's probably around ten or so people.
00:04:23.636 - 00:04:29.438, Speaker A: Okay. In a team that size, you actually get to do a lot. I guess you get to wear many hats.
00:04:29.614 - 00:04:32.078, Speaker C: Yes. One of my favorite parts.
00:04:32.254 - 00:04:37.590, Speaker A: Now, Ben, I want to hear about you. What's your background and what led you to optimism, and maybe what do you do there?
00:04:37.660 - 00:05:03.910, Speaker B: Yeah, hi. What's up, Val? I'm a total Ethereum by heart. I discovered in early 2017 this thing called Ethereum, and it basically seemed like, oh, this crazy libertarian edge case that I saw that was bitcoin, which was really cool. Actually has a lot more things that we can do with it now. So that was super exciting. My background in the time was math and physics. That's what I studied in school.
00:05:03.910 - 00:05:34.070, Speaker B: And I quickly realized that all of the fruits were lower hanging in Ethereum by far than they were in the physics and math world. And I just got hooked. That began a long journey. I started doing research at the Ethereum foundation, working on Casper and with Vlad, and then I found Carl and Jing, and we realized that there was a whole world of even more practical scaling opportunities. That was L2, and that got me really excited because I knew that we could actually implement these things on Ethereum today. And that was super exciting.
00:05:34.410 - 00:05:47.930, Speaker A: That team that you just mentioned. I understand optimism is kind of like an extension of the plasma project or the plasma team. Is that the case? Was that kind of like the group that you're talking about originally in the foundation?
00:05:48.430 - 00:06:27.042, Speaker B: Yeah, for the most part. I think usually when we use plasma, that's referring to, like, a class of L2 solutions, and there's a lot of dope projects working on plasma. So I can't at all claim to be, we can't claim that we were the plasma team, but we were called Plasma group, and we did do a lot of fun, exciting research in that area. And over time, what we realized is, while academically infinite TPS was really cool, what was even cooler was smart contracts, because that's what people were using. And once we sort of started to understand this data availability solution, that is the roll up, we started to realize, hey, there's a real thing here. We could actually build this. And so we started optimism.
00:06:27.186 - 00:07:02.260, Speaker A: Cool. All right, let's start talking about the optimistic roll up. We've had already on the show this month, two projects from. Who created ZK rollups. And I think our audience is very well versed in the ZK roll up space when it comes to optimistic rollup. I have done, I think, one episode on it with John Adler maybe six to eight months ago. But, yeah, I think it's worth it to redefine optimistic roll up kind of what is it? And maybe for me, I'm curious, how is it specifically different from plasma or an evolution from that?
00:07:03.270 - 00:08:00.022, Speaker B: I would love to talk about this. Okay, so I think one great framing that we've been able to evolve by now in the L2 scaling space, which is super useful, is basically this like two by two grid, optimistic, and Zk on the left and the right, and then roll up and plasma on the top or the bottom. And sometimes that ZK plasma is called validium. Now, that's a fancy new term that the stark people have been working on. But effectively, what these sections of the grid correspond to is where transaction data lives, how it is committed to, and how the validity of the output of those transactions is acquired on l one. So, for plasma versus roll up, the difference is, in a plasma, you commit a block route that contains a bunch of transactions committed within it, but you don't actually take that transaction data and put it on chain. Instead, you have off chain data providers that say that they will make the data available to you.
00:08:00.022 - 00:08:29.130, Speaker B: And in the event that they do not, users have a way to challenge that that data was made available. And this basically must be answered by putting that particular censored data on chain. So that's one side of things. The other side of things is a roll up where you explicitly put all of the data on chain and really you put it into the history. So it's not like sitting there in a smart contract that can be accessed by some other money Lego. But it is in the history, in a way, that nodes can retrieve it as they're downloading the chain.
00:08:29.290 - 00:08:33.678, Speaker A: Like this is l one nodes. L1 nodes can retrieve this information.
00:08:33.844 - 00:08:51.202, Speaker B: That's right, yeah. Very important point. Yeah, absolutely. L1 nodes. So that sort of corresponds to where the data lives in each of these cases. Either you put it all into a censorship resistant form up front, or you keep it off and wait for maybe there to be a dispute, or you just trust someone is holding onto it off chain.
00:08:51.346 - 00:09:09.100, Speaker D: The two axes here are where does the data live on l one or somewhere else? And then how do you achieve confidence in the data? Are you using validity proofs, like a zero knowledge proof system, or using fraud proofs, which would make it an optimistic system.
00:09:09.550 - 00:09:33.234, Speaker B: Exactly right. That's exactly right, James. Yep. And of course, the zero knowledge proof, interestingly, the real property that gives us the scaling is not the zero knowledge element of these snarks or starks or choose your moon math flavor. It's actually the succinctness that is the important part. Right. Because that succinctness lets us spend much less gas to verify a big block of execution on l one.
00:09:33.352 - 00:10:01.734, Speaker A: I mean, for the uninitiated, I've always understood it a little bit. Like there is this batch of tons of transactions happening off chain, and then there's this mechanism to bring them on chain with a very small amount of data. The question I have here is, lightning does something sort of similar, this idea that you are able to do this batch of transactions off chain. So what is the big distinction between something like lightning and something like these roll ups or plasma?
00:10:01.862 - 00:10:25.058, Speaker B: They're definitely both super similar. You're totally right, Anna, that there's a lot of underlying components that are the same basic idea. Right. One of them is that we want to use the blockchain more efficiently, so we use it as an adjudication layer instead of as an execution layer. That's basically the optimistic side of that access that I was talking about. Sort of all of those solutions, including state channels like the lightning network, et cetera, all use that sort of framing. You don't go to court to cash a check.
00:10:25.058 - 00:11:05.978, Speaker B: You go to court when the check bounces. So that's one aspect. The designs that you choose beyond that core framing basically give you different properties in your system. So you might have a system, for instance, like the lightning network, where payments can happen entirely off chain and sort of like, almost infinitely like you can imagine sending a satoshi back and forth between two servers at a million satoshis per second. And it's not very meaningful. But you could claim you have this incredible TPS number, right? On the other hand, state channels require that the participant set be known in advance. So to add someone to a state channel to get them participating in this network, for them to receive money or send money, they have to make an on chain transaction.
00:11:05.978 - 00:11:18.230, Speaker B: Whereas in a plasma or a roll up, that's not necessarily the case. So it comes with some other trade offs, namely, not quite as off chain, not quite as theoretically infinite throughput, but you get some nicer properties.
00:11:18.890 - 00:11:52.880, Speaker D: You can kind of think of it as another trade off axis, is state channels. And payment channels have to be fixed participant. But what they get is this nice property where there is a setup and an ending. So there's only ever two things that go on chain. Whereas with plasmas and with roll ups, we really, really want these to have flexible participation. We want people to be able to drop in and out over time. And that means that they need to have a bunch more, a succession of on chain commitments to the state.
00:11:52.880 - 00:11:57.822, Speaker D: They need to have many more than two commitments on chain.
00:11:57.966 - 00:11:58.610, Speaker B: Yeah.
00:11:58.760 - 00:12:12.050, Speaker D: What are the practical limitations on transaction throughput in a plasma or roll up compared to a state channel, which you said can have essentially infinite transactions.
00:12:12.130 - 00:13:01.858, Speaker B: Infinite throughput, that's a great question. So I think there's a bit of a spectrum here, and it probably goes like somewhere from roll up to plasma to channel in terms of the participants said that you can get. So one thing you can do in plasma, for example, is you can post absolutely massive blocks, because the only thing you put on chain is a hash of the block. That block actually could be bigger than any one user could validate, and they could actually validate subsets of the blocks, that is, the transactions that pertain to them and follow the chain. So you can get a lot, a lot of throughput out of platma with that, with still an unlimited participant set. On the other hand, with a roll up, optimistic or otherwise, you do have to put those transactions into some availability mechanism, which is the l one. And so because of that, you are somewhat limited.
00:13:01.858 - 00:13:06.434, Speaker B: And this is why we need things like eth two to expand that limitation further.
00:13:06.562 - 00:13:07.480, Speaker A: Got it.
00:13:08.590 - 00:13:16.854, Speaker D: So is the limiting factor there the amount of layer one chain space that your L2 system consumes?
00:13:16.982 - 00:13:19.020, Speaker B: That is the ultimate upper bound. Absolutely.
00:13:19.710 - 00:13:33.358, Speaker D: So where a state channel only touches the main chain two times and a plasma only puts the tiny hash of this block onto the main chain, a roll up has to put much more data on there.
00:13:33.524 - 00:13:34.846, Speaker B: Exactly right.
00:13:35.028 - 00:13:40.740, Speaker A: And is this the same for ZK roll ups? This is just roll ups consistently across the board.
00:13:41.270 - 00:13:48.034, Speaker B: In fact, what you are doing with that data is you are rolling it up. Got it. A ridiculous name, but a great one.
00:13:48.072 - 00:14:01.900, Speaker A: I think it's a pretty good one. I mean, I don't know. Does it come from fruit roll ups? Is that like, why people got excited about it? Or was there like, some technical background to this name? I thought it was fruit roll ups. I don't know. That's what it struck in my mind.
00:14:03.470 - 00:14:28.580, Speaker C: One difference between a zero knowledge roll up and an optimistic roll up that I think is worth talking about is just an optimistic roll up will actually post the transactions themselves and all of the state transitions have to be executed, whereas with a zero knowledge roll up, they can include a zero knowledge proof and the state diff.
00:14:29.910 - 00:14:37.494, Speaker A: Does that sort of mean, like, you have to settle in a way in the optimistic one, or am I missing exactly the part here?
00:14:37.612 - 00:15:15.934, Speaker D: This is similar to one of the main differences between bitcoin and ethereum is in bitcoin you have an implicit state and explicit state transitions. A transaction where in ethereum you have the opposite, you have an explicit state, the state tree and implicit state transitions. Whatever the contract execution does, it sounds like what you're saying is that optimistic roll ups have this and optimism has this implicit state transition, whereas ZK roll ups have an explicit state transition.
00:15:16.062 - 00:15:16.786, Speaker C: Yes.
00:15:16.968 - 00:15:24.020, Speaker A: Cool. This is going a little deeper into the distinction between optimistic and ZK than I feel like I've done before. So thank you.
00:15:24.870 - 00:15:26.414, Speaker D: We're playing taxonomist.
00:15:26.462 - 00:15:27.300, Speaker B: It's fun.
00:15:27.830 - 00:15:42.646, Speaker A: So optimism is the project that both of you are working on, but are you the only optimistic roll up in town, or are there others? Is this like a concept that is from this, or is it something that's actually being replicated with different teams?
00:15:42.758 - 00:16:01.230, Speaker C: Yeah, there's definitely other projects out there working on optimistic rollups. I know fuel is doing something interesting with a Utxo based optimistic roll up. I'm kind of looking forward to whenever they come out with kind of their more complex scripting language that they've been talking about.
00:16:01.380 - 00:16:03.280, Speaker D: Their prototypes are interesting.
00:16:03.650 - 00:16:08.900, Speaker A: Are there any others, maybe that we're not because we did have fuel on, but anyone else?
00:16:09.350 - 00:16:20.726, Speaker B: There's a few others. Arbitrum is definitely another big one, which are doing some super cool, interesting things. The Hubble project is another very underrated one that I will recommend you all go on to GitHub and check out if you.
00:16:20.748 - 00:16:39.782, Speaker A: So there's also. I know that there's like Zkopru, which I think that's how you say it, and that's like a combo. ZK optimistic. Has the optimism team considered including zero knowledge proof somewhere in their construction, even if it's not a ZK roll up?
00:16:39.936 - 00:17:18.918, Speaker B: Absolutely. So zero knowledge for privacy is a great match for optimistic roll ups, because the evaluation of these zero knowledge proofs of these snarks can end up being quite gas intensive. So if you make the execution of that snark verification be optimistic, then you can further lower your costs, which is pretty cool. Obviously, privacy is another super important one related to this. In fact, building a ZK roll up does not give you privacy just because there's ZK in there. This is what I alluded to before in the simpler way. You do the ZK part for the speed, the verification, but you're not actually necessarily hiding what's going on.
00:17:18.918 - 00:17:19.638, Speaker B: Got it.
00:17:19.724 - 00:17:23.930, Speaker D: The only one that does claim to do privacy right now is Aztecs, right?
00:17:24.000 - 00:17:24.810, Speaker B: That's right.
00:17:24.960 - 00:18:20.730, Speaker A: And they're actually the episode right before this one. In some of the previous episodes I did on ZK roll ups, we did actually talk about the criticisms of optimistic roll up, and I thought maybe we could go through some of those with you, because I'm very curious to hear from you as the optimism team, how you kind of treat these questions, how you think about them. So one of the big points is this distinction between the fraud proof and the ZK proof. With fraud proofs, as I've understood it, there's almost like a dispute mechanism that would happen after the fact. And that since that takes so long, the idea that you'd actually be able to resolve a dispute in time, to be able to kind of adjust any sort of transaction, it's too late. That's kind of the thinking that I feel has been like, at least that's what I took away from it. Now I'm curious how you think about that or how you take that criticism.
00:18:20.890 - 00:18:45.422, Speaker C: Yeah, totally. So basically, just to frame the problem, when the l two system submits transactions and corresponding state routes to l one, and then there's this fraud proof window, which we've parameterized to be one week. And basically, the absence of a fraud proof will determine the validity of the transaction and its corresponding state route.
00:18:45.486 - 00:18:47.926, Speaker A: So if there is an absence, what does that mean?
00:18:48.028 - 00:18:53.842, Speaker C: So if no fraud proof is submitted, then the transaction can be considered finalized.
00:18:53.986 - 00:18:54.630, Speaker A: Okay.
00:18:54.780 - 00:18:57.802, Speaker D: Because anybody can make a fraud proof, right?
00:18:57.856 - 00:18:58.410, Speaker C: Yes.
00:18:58.560 - 00:19:03.078, Speaker D: So if nobody does, that probably means there was no fraud.
00:19:03.174 - 00:19:03.482, Speaker B: Yes.
00:19:03.536 - 00:19:09.398, Speaker C: Assuming that everyone can access the data and everyone can compute the state transitions.
00:19:09.494 - 00:19:13.314, Speaker A: So fraud proof isn't, it's proof of fraud having been committed.
00:19:13.382 - 00:19:13.662, Speaker C: Yes.
00:19:13.716 - 00:19:20.126, Speaker A: What does that even look like? What is a fraud proof? Do you go like, this is wrong for sure. What is it?
00:19:20.228 - 00:20:01.318, Speaker B: You do indeed prove things very explicitly wrong. That's a great question. So in general, like Mark said, the general pattern that you see is a transaction is posted and then a proposal as to what that transaction did is posted, and then the next transaction is posted, and then the next proposal is posted and so on and so forth. And the core trick is to go from the latest valid proposal and prove that if you executed the transaction against that valid proposal, the next proposal would be invalid. So what this means is that you can evaluate this fraud without just naively executing all transactions in the history leading.
00:20:01.334 - 00:20:02.222, Speaker A: Up to that point.
00:20:02.356 - 00:20:10.506, Speaker B: Instead, you basically take the hash that came before, you provide some Merkel branches, and you run the transaction against those branches.
00:20:10.618 - 00:20:19.860, Speaker A: But where is this data even coming from? Is it two hashes that you're basically showing, one that is already proven, and then the next one, where are they?
00:20:20.630 - 00:20:46.170, Speaker B: They live on Ethereum. So you actually, interestingly, can roll, you roll them up as well. So actually, what happens when you post these transactions and you post these proposals is that you can post them in a batch. Those are hashed into a single value, and that value is stored on chain. And so when it comes time to proof fraud, you actually undo that hash and you provide a proof down to a very particular element that you disagree about.
00:20:46.240 - 00:20:58.490, Speaker A: But is that like hash, the first hash and the second hash, what's in between them? Is it like many transactions, or is it like a single transaction? It sounds like it's many. Like, it's almost like these batches that have been written on chain.
00:20:58.570 - 00:21:21.670, Speaker B: It's definitely a challenging one. Anna, what you're getting at is the consistent overloading of the word transaction in the blockchain community. Yeah. So it depends what you mean. Right. We call that data type a transaction in our system, but that could actually contain several user transactions, which in Ethereum we sometimes call a meta transaction, although that is perhaps a bit devoid of meaning on its own.
00:21:21.740 - 00:21:53.726, Speaker A: So this is interesting. So this word transaction, this has come up before where also transactions in a ZK concept is different transactions. The way I've been using them, the way I'm asking is actually like many transactions between different users, like doing transfers within the optimistic roll up. I'm imagining that you're able to do many of those, and then that becomes like batched as a. Maybe it's merklized and it's hashed. All of those little transactions are individual leaves, potentially. Is that how it looks?
00:21:53.828 - 00:21:55.082, Speaker B: Yep. That's about right. Yep.
00:21:55.146 - 00:22:10.550, Speaker A: Okay, so then there's the hash. And that hash gets written on chain like user transactions is quite high, or could be quite high. As many Merkel leaves as you can include. But you're saying that a transaction for you is also just that moving of the hash on chain.
00:22:10.970 - 00:22:57.646, Speaker C: So that single hash that commits to the entire batch gets stored on l one. And then to run a fraud proof, what happens is you can basically prove inclusion of the transaction, and then you can prove inclusion of all of the storage slots that were touched by that transaction's execution. And you basically will deploy all of the contracts onto l one, and you'll fill in all the storage slots that were touched on l one and then execute the transaction. And then you'll take the corresponding state route from the l one execution and compare that against the proposed state route that was sent by the sequencer.
00:22:57.758 - 00:23:15.994, Speaker A: Just, Mark, you're using the word transaction again here, like, kind of unclearly now. I'm not sure which one you're talking about. So we've just defined these two types of transactions, right? There's the ones the users like, sending funds between each other, or maybe it's a smart contract doing something. And then there's this other transaction. Maybe we just kind of stay there for a second.
00:23:16.112 - 00:24:17.920, Speaker D: So it sounds like from the top layer we have on chain, the optimism state route, which says the whole current state of this optimistic system. And then we want to have a block, an optimism block that takes that state route and produces a new one. And we would like to be able to prove that that block is correct. And unfortunately, that's really expensive. So instead, we use the nice optimistic proof, which is saying, okay, if there's no fraud shown, it's correct. And in order to enable people to produce fraud proofs to show that there was fraud in this block, we're going to take that block and we're going to break it down into a set of checkpoints. So you might have 100 checkpoints in this block, and the person creating the fraud proof is going to choose two of these that are next to each other and say that the fraud happened between checkpoint 57 and checkpoint 58.
00:24:17.920 - 00:24:41.682, Speaker D: And so what the layer one does is it looks at the block. It says, okay, here's all of the code that was executed between checkpoint 57 and 58. I can learn the state at checkpoint 57 by having people upload it for me, and then I can run the code and see if it produced checkpoint 58 correctly.
00:24:41.746 - 00:24:42.214, Speaker A: Yes.
00:24:42.332 - 00:24:51.910, Speaker D: If it's correct, then there was no fraud. If the layer one produces a different checkpoint 58, then there was fraud.
00:24:51.990 - 00:24:59.942, Speaker A: Okay, is it a contract happening on l one that's actually rerunning something? Is there almost like a verifier type setup?
00:25:00.006 - 00:25:16.842, Speaker D: Yes. And one of the things I think is really cool about optimism and arbitrum and some of these is that the verifier is running the EVM or is running the OVM, or things that are extremely close to the EVM and can run solidity contracts.
00:25:16.986 - 00:25:37.080, Speaker A: So, Ben, I want to go back to this question of, like, I want to bring the word transaction back, because I still want to understand between, let's use that term, maybe checkpoints. Are there many transactions within those checkpoints? Like user transactions? That's what I mean. Like sending of funds or contracts being doing something.
00:25:37.710 - 00:26:05.970, Speaker B: The answer is yes. Or maybe a more nuanced question is how many. Right. And in Ethereum, each transaction has this measure of how computationally expensive it is called gas. Right. So sending money to someone, not a lot of gas, doing 50 flash loan swap magic things, is going to be a lot of gas. And what you want to do is make sure that the amount of gas from one checkpoint to the next is bounded.
00:26:05.970 - 00:26:14.938, Speaker B: And so, yes, there can be multiple transactions. And in fact, the frequency with which you checkpoint can come out of the amount of gas that's been spent.
00:26:15.134 - 00:26:37.530, Speaker A: Interesting. Okay. Is the checkpointing actually happening on the roll up side? I think of these roll ups as also, like, they're standalone blockchains. There's, like, things being blocks in a way, or something being created, a record being created also on them. So are those checkpoints on the side of the roll up, or are those checkpoints. I realize it's being verified on chain, but where?
00:26:37.600 - 00:27:09.238, Speaker B: That's a great question. They're like the link in some sense, because they live on both. What you do as a verifier is you download those transactions, you compute locally what you think those checkpoints should be. Then you watch the chain and compare those checkpoints to what were proposed. If you see a disagreement between what you computed locally which you know is correct because you did it and it's your computer, and that's different from what was proposed. Then you go into the 57 to 58 thing that James was talking about.
00:27:09.404 - 00:27:21.066, Speaker A: Let's then walk through what the node operator does. Exactly. So this hypothetical person or computer has found this problem, this discrepancy. What happens? What is the process?
00:27:21.248 - 00:28:08.146, Speaker B: There's conceptually like three phases. There's basically a part where you upload all relevant l two state that was involved in between the checkpoint that was correct and the checkpoint that was wrong, and that we call like the pre execution phase when we think about this conceptually. So, for example, let's say the checkpoint had a transaction from Alice to Bob. It had another transaction from Carol to Dave. Before you can execute the fraud proof, you have to go to the checkpoint that was correct and put on chain the balance of Alice, Bob, Carol and Dave, because this is the requisite information to be able to execute the transaction. So that's conceptually one thing that you do. The next thing that you do is you actually execute the transaction.
00:28:08.146 - 00:28:11.074, Speaker B: So you give the transaction data and you run it on chain.
00:28:11.122 - 00:28:13.274, Speaker A: Oh, wow. On l one, this is on l one.
00:28:13.312 - 00:28:38.394, Speaker B: Okay, exactly. And so we have something called the OVM that enables this. But this ends up being one of the hardest problems is how do you create a system of transaction execution that you can run on l one if need be. Right? Because you're running a little slice of l two execution on l one, and the EVM is really not really built for that. So that was a really fun problem to solve.
00:28:38.522 - 00:28:39.162, Speaker A: Wow.
00:28:39.316 - 00:29:17.902, Speaker B: But that's what you have to do, right? You make sure that all the data is there. You make sure that you have a way to deterministically run the transaction against that pre state. And so that's phase two. You execute. In our example, you subtract from Alice's balance, add to Bob's balance, you subtract from Carol's balance, add to Dave's balance. Now that you have executed that transaction, now what you do is you take all of the updated values, and you use them to calculate what the next checkpoint should be. Because given the old checkpoint and all updated values from the old checkpoint, you can derive what the new checkpoint should be.
00:29:17.902 - 00:29:23.738, Speaker B: And once you've done that, you have a single hash for the checkpoint, and you prove that it's not equal to what was proposed.
00:29:23.834 - 00:29:24.106, Speaker A: Okay.
00:29:24.148 - 00:29:25.490, Speaker B: And you've proven fraud.
00:29:25.910 - 00:29:52.422, Speaker D: So you have these kind of full nodes that are involved in the roll up that are executing these blocks. And looking for fraud. And it sounds like ideally the layer one, when it is validating a fraud proof, does the exact same thing. It goes from checkpoint to checkpoint and executes everything in between to make sure it's right. Is that in the correct neighborhood?
00:29:52.566 - 00:29:53.740, Speaker B: Yeah, absolutely.
00:29:54.750 - 00:30:17.998, Speaker A: Is the expectation here that that will never happen? Are you trying to test the system to see if that even could happen? I just picture since that mechanism is set up, is it set up purely to be like, you can try, but it won't work because there's a fraud thing. That's sort of the question I have, like, will people actually do this? Will there be fraud? I mean, obviously you don't want fraud.
00:30:18.094 - 00:30:20.030, Speaker C: Yeah, ideally there's no fraud.
00:30:20.110 - 00:30:31.062, Speaker A: So it's like you've created a very elaborate trap and you've been like, look at the trap. You better not do it because we're going to catch you. And that is encouraging people to stay in line.
00:30:31.196 - 00:30:31.590, Speaker B: Yes.
00:30:31.660 - 00:30:34.360, Speaker C: It's the most important code that should never run.
00:30:36.010 - 00:30:44.410, Speaker B: Exactly right. I think I called it in some presentation mad mutually assured dispution.
00:30:45.950 - 00:30:46.940, Speaker A: Got it.
00:30:48.430 - 00:31:17.806, Speaker B: This is a really interesting one. This is a very common question that you bring up, Anna, and it's such a fascinating one. It almost always comes back around to some topic of incentive systems in blockchains. And when they do or don't apply, like a common example of this is all of the people running a full node on Ethereum that are not miners. Right. They're running very complex infrastructure and doing an incredible service to the community, but they're also not getting rewarded in the same way that a miner is for that. Right.
00:31:17.806 - 00:31:43.134, Speaker B: And so there's all sorts of these fascinating subjective reasons that people have for doing different things in the system. I think it's pretty likely that the mechanics of those incentives work out so that there's not fraud being proven. On the other hand, you should make proving fraud profitable so that in the event that there is fraud, it's pretty much a no brainer for the people that see the fraud to go ahead and publish that.
00:31:43.252 - 00:32:00.546, Speaker A: That actually speaks to. This is sort of where my question is coming from, because you're expecting people to perform this role, I guess, of checking or looking for fraud or seeking fraud, and they will likely never find it. And so why are they doing it at all? And I guess this is interesting.
00:32:00.648 - 00:32:15.750, Speaker B: Right. And the answer is because they want to know the state of the chain themselves. Right. There's lots of people that run their nodes and choose not to outsource that information because they want this notion of security. And so this applies in a roll up, too.
00:32:15.900 - 00:32:50.162, Speaker A: Is this assuming. So you're a Dap that relies on, you have your own node and you're running a node, and you maybe interact with, like, you move something with optimism. This is what I'm trying. I'm trying to picture like a use case for somebody running this node who doesn't get paid ever because they never find fraud. And they are kind of like doing some, but like some core infrastructure stuff. Where is their benefit for them? It's like they want to work on both. They want to go between the chains, and so they run the node, and somewhere in there they could find fraud, but they probably will never.
00:32:50.162 - 00:32:56.238, Speaker A: But they have some other business case that lives on top of that. So they don't care about incentives.
00:32:56.414 - 00:33:10.550, Speaker B: Exactly right. Exactly right. So your block explorers are always going to be running these nodes. Right. There's something that we might touch on later. This notion of fast exits, sort of purchasing yet to be withdrawn funds. Those people want to run a node.
00:33:10.550 - 00:33:15.050, Speaker B: Crazy nerds like me and Mark runs, et cetera, et cetera.
00:33:16.030 - 00:33:30.302, Speaker A: Another point of criticism that was, I think it was Alex from matter who brought it up was this m of n honest validator assumption, this idea that you would need. I don't know if that's exactly. Do you know this expression? Does this mean anything to you?
00:33:30.436 - 00:33:49.506, Speaker B: Yes. Well, in a layer one consensus, you have an m of n honesty assumption, where that's usually like two thirds or half. Like James said earlier, anyone should be able to prove fraud. So the interesting thing in a roll up is actually that you have a one of n honesty assumption. It only takes one honest person to prove fraud to secure the chain.
00:33:49.618 - 00:33:50.280, Speaker A: Interesting.
00:33:50.890 - 00:34:00.474, Speaker D: You still can't escape the m of n honesty assumption of the underlying chain, though. So you're layering another assumption on top of that.
00:34:00.592 - 00:34:28.100, Speaker C: That is true. It is like the weakest link because you basically inherit the l one security, because even if a minor, let's say that miners are trying to censor the fraud proof and a single minor defects and decides to include the fraud proof, then that block could just be reorganed out by a majority. So you are right. It comes back to the 51%.
00:34:28.790 - 00:34:45.798, Speaker D: That's really interesting, because it sounds like if you have this coalition of miners on the layer one, what happens to optimistic roll ups is that they have an improper state transition, potentially. Is that right?
00:34:45.884 - 00:34:49.762, Speaker B: That would definitely be the outcome in the event of a 51% attack and.
00:34:49.836 - 00:35:02.430, Speaker D: For a ZK roll up, the outcome of a 51% attack is that it has a liveness failure, that the miners decide that that roll up stops running for as long as their coalition lasts.
00:35:02.770 - 00:35:49.882, Speaker C: So the interesting thing about an optimistic roll up being censored is that I do agree that miners will censor fraud proofs being sent to the contract because the miners actually will just include the fraud proofs themselves. They have no incentive to accept the fraud proof being sent from users. And it's also racy. If multiple users are trying to submit fraud proofs at the same time, it kind of will result in a priority gas auction and only one of them will go through and it will result in wasted gas on a reversion. So I do think that the optimal strategy is for miners to censor users sending fraud proofs and just include them.
00:35:49.936 - 00:36:18.822, Speaker D: Themselves, unless the miner is the one that committed fraud. The outcome I feel like is more likely than miners censoring this fraud proof for seven days is that the first time anyone tries to censor the fraud proof, people realize it and socially coordinate some fix ethereum has in the past, and I think in the future will continue to show a willingness to socially coordinate to fix issues like this.
00:36:18.956 - 00:36:54.410, Speaker B: Absolutely agreed. That's definitely our philosophy here too. And I think a very important note here on this point is this is something that makes parameterization really important. So we've had a lot of people a bit aghast by our one week fraud proof window. People always say, oh my goodness, a week to confirm the fraud proof transaction? That's crazy. Even I, with not very good usage of gas price, can get my transaction confirmed within a day. And what they have to understand is that this length of time isn't there for the normal case of Ethereum operation.
00:36:54.410 - 00:37:19.242, Speaker B: It's for the case when Ethereum starts having censorship to give the Ethereum community time to be able to socially coordinate. Because if you have that window beyond the order of hours, I agree with you, James. We're definitely going to have an incredibly agile ethereum for at least a little bit longer. But I'm not optimistic on the order of hours. So it's definitely very important, I think, to design with that in mind.
00:37:19.376 - 00:37:40.030, Speaker D: I think I've had John Adler tell me before that this social coordination is a critical part of the rollup security model, that it's not just a nice feature, that it is. The fallback is that the optimistic period is long enough to give time for social coordination in the worst case scenario.
00:37:40.690 - 00:38:00.726, Speaker B: That's a pretty interesting take. I think I would tend to agree with it. As Ethereum stands now, hopefully we can improve our l ones to make censorship harder with basically fancier execution models on l one. So maybe if we get to the point where we're commit revealing or doing some threshold encryption stuff, maybe then it's going to get harder and we can say other things.
00:38:00.828 - 00:38:04.120, Speaker D: Yeah, maybe in 2026 or 2027.
00:38:05.130 - 00:38:08.700, Speaker B: Well, by then, the ZK roll up evms will be about to be out.
00:38:09.710 - 00:38:27.886, Speaker A: I feel like there's some snaps happening in there. This actually does bring up another topic that I wanted to dig into with you guys, which is the EtH two landscape, what it would look like with roll ups. I've talked about this with actually, all of the roll up projects that I've had on so far.
00:38:27.908 - 00:38:29.210, Speaker D: Centric roadmap.
00:38:29.370 - 00:38:31.242, Speaker A: Is that what you're calling it? Centric?
00:38:31.386 - 00:38:33.578, Speaker D: The roll up centric roadmap.
00:38:33.754 - 00:38:47.746, Speaker A: The roll up centric roadmap, indeed. Do you almost see eth two? If ETH two comes out, then the roll up model actually is less valuable. Or are you like. No, it will for sure stay on. Okay, tell me why. Tell me your thinking.
00:38:47.928 - 00:39:12.890, Speaker C: In ETH two, at least from my understanding of e two, there's really no execution model defined for user transactions. What eth two provides is a large throughput of consensus over data. That's exactly what our roll up needs to scale, is it needs data that is available and agreed upon.
00:39:13.050 - 00:39:46.002, Speaker D: You're saying that since the ETH two team has backed off from plans for execution on the shards, it kind of looks like the shards are ideally suited for what a roll up needs. A roll up needs data availability. The shards provide tons of it. A roll up doesn't need very much execution in any happy path. And so it is okay to have just one EVM shard managing a roll up that uses all of the other 60 something shards.
00:39:46.146 - 00:40:05.466, Speaker C: Exactly. And there's actually an Ethereum scaling hackathon coming up that there's a project called Rayonism, and anybody that's interested in contributing the stretch goal is to try to get optimism running on the e two sharded testnet by the end of the hackathon.
00:40:05.658 - 00:40:09.642, Speaker A: What was the name of the project? Sorry, can you just say the ray and ism ray?
00:40:09.706 - 00:40:09.886, Speaker B: Yeah.
00:40:09.908 - 00:40:17.602, Speaker C: I could share a link. It was something that proto put together and, yeah, maybe we could put it in the show notes or something.
00:40:17.656 - 00:40:22.610, Speaker D: So you'd have to do kind of a prototype merge and then do a roll up from there.
00:40:22.680 - 00:40:23.906, Speaker C: Yes, exactly.
00:40:24.088 - 00:40:49.498, Speaker A: One question I have here is, so far, we've been talking a lot about the optimistic roll up construction, but where is optimism unique in that is what we've described, like the week long fraud proof window, the way that the OrU communicates with the base chain, all of this. Is there a distinction between the optimism construction and some of these other optimistic roll ups that you can hint at or share?
00:40:49.664 - 00:41:14.034, Speaker B: So definitely a lot of the concepts that we've been going over are pretty applicable to a lot of different roll up designs. Right. We've been speaking in very generic terms. Cool. We didn't get to go over my favorite roll up design, which is a roll up that computes the Fibonacci sequence, but that's for another day. Anyway, a lot of the concepts we've been talking about apply to a lot of things now. Different projects have different parameterization and maybe different choices within that.
00:41:14.034 - 00:41:51.998, Speaker B: I think one of the things that stands out with optimism is one of our central goals is to stay with Ethereum as much as possible. So what that means is that the software that we maintain is all forks of other Ethereum software. So our node software is a fork of Go Ethereum, the main Ethereum client. Things like our compiler, which is how you create a smart contract that can run an l two, is a very small fork of the Ethereum solidity compiler. And I think this is super important for the ecosystem as a whole. Like building L2 is hard enough without reinventing all entire other parts of the stack. And it also means that we can be better together.
00:41:51.998 - 00:41:57.490, Speaker B: So it means that as we improve l one, we will improve l two because they use the same code.
00:41:57.560 - 00:41:58.098, Speaker A: Got it.
00:41:58.184 - 00:42:28.426, Speaker B: Just as importantly, we can build things on L2 that are too risky to try on layer one. But if we can prove them out on L2, then they can be adopt in layer one. And that's something that I'm super excited for. There's this whole family of quote eth one point x that has all these incredible designs and ideas, and it's hard for the Ethereum community to coordinate around how to test these things out, whether to put them in the fork. It's going to be really cool to be able instead throw that into l two, test it out, validate that it works, and then move on.
00:42:28.528 - 00:42:44.026, Speaker A: You're talking about client software. When you said that I thought, oh, maybe he's talking about dapps that need cheap gas prices to try out. But actually what you're talking about is actually like client software, like the forks, like the potential integrations into the base protocol.
00:42:44.218 - 00:42:54.594, Speaker B: That's exactly right, yeah. So these are things like state rent account abstractions, stateless execution, these are all fun buzwords that you might hear in the eth one point x community.
00:42:54.712 - 00:42:55.138, Speaker A: Cool.
00:42:55.224 - 00:42:56.594, Speaker B: And that's what I'm talking about.
00:42:56.632 - 00:43:20.746, Speaker A: Yeah, nice. I want to ask you a little bit about this software and does optimism have a validator community? Is there validators like there are on some of the other roll up or like coordinators, some sort of role? We talked about the node operator running basically like the full node, including the optimistic node being able to do the fraud proofs. Is that the validator? I'm curious about that role, yeah.
00:43:20.768 - 00:44:02.106, Speaker C: So there's no validators in the system. There's what could be called a validator or verifier. The role of a verifier is to listen to l one, and it listens to all the transactions that are posted by the sequencer. And the sequencer is kind of, you can think of the sequencer as the write node, like the writer, it writes and extends the blockchain. It maintains the liveliness of the system. And users can send transactions directly to the sequencer, or they can send transactions through a special l one contract that the sequencer listens to, and it pulls in those transactions and executes them.
00:44:02.208 - 00:44:18.122, Speaker A: That's interesting. But that node operator, then going back to the l one fraud proof creator node operator, would they be running like an ethereum node doing the verification side of things, and then also run a verifying node in a way, a separate blockchain?
00:44:18.266 - 00:44:19.262, Speaker C: Yes, that is true.
00:44:19.316 - 00:44:19.582, Speaker A: Okay.
00:44:19.636 - 00:44:19.854, Speaker B: Yeah.
00:44:19.892 - 00:44:28.526, Speaker C: So doing the verification for a roll up is strictly a superset of the verification for just the l one chain.
00:44:28.558 - 00:44:33.790, Speaker D: Itself, which implies that it's always more expensive than running an ethereum node.
00:44:33.870 - 00:44:38.346, Speaker C: Yes, that is the problem with scaling.
00:44:38.478 - 00:44:50.518, Speaker A: And is the verifying client software, is that, Ben, what you were talking about? Like that's where you would test out new things because it's a fork of death, but it can do more and you can add to it sort of.
00:44:50.604 - 00:45:11.390, Speaker B: Yes, that's correct. I was really talking about the underlying software there, which applies both to this verifier role that mark was talking about as well as the sequencer role, like the block. I see it's both, right. In the same way that both miners and block explorers run the same core software. You would have to run the same software on both sides. Right. Because everyone has to agree.
00:45:11.390 - 00:45:15.198, Speaker B: But it's absolutely in that software package that I was talking about. Yeah.
00:45:15.284 - 00:45:34.054, Speaker A: Okay, so let's talk a little bit more about these sequencers. Mark, I know you did a talk at a recent event that I did called mapping the l two landscape, and you went deep on sequencers, but maybe you can share a little bit more, even in this episode, about what they are and how they work, and maybe how people could think about them.
00:45:34.172 - 00:46:20.438, Speaker C: Yeah, totally. So I think an interesting mental model that helps reason about sequencers is the sequencer is really, like I said before, it's the kind of node that's responsible for maintaining the liveliness of the system, and it's really the l one contracts that the sequencer interacts with. You can think of those l one contracts, like the service level agreement with the sequencer. So when you are sending transactions to the sequencer, the sequencer can kind of choose the ordering of these transactions when it executes them. The sequencer is also responsible for taking those transactions and batching them up and sending them to l one.
00:46:20.604 - 00:46:20.982, Speaker B: Right.
00:46:21.036 - 00:46:39.274, Speaker C: So, designing a fair kind of sequencer is really important. You want to kind of think about the ways that the sequencer is able to extract MEV from the system, and kind of create a mechanism to prevent them from extracting MeV in bad ways.
00:46:39.472 - 00:46:55.314, Speaker A: This adds so much more complexity then, like MEV on the optimistic side, that's wild. Are you then following, are you working with the MEV flashbots folks? Are you coordinating with them to keep that kind of in your build?
00:46:55.432 - 00:47:20.186, Speaker C: Yeah, I mean, I've definitely been chatting with them, kind of picking their brains, seeing if they have any good ideas, and kind of how to design these mechanisms, because really, we want to design something that is fair. We don't really want to create something that mirrors too closely, like the existing power structures, and just magnify them, because it seems like technology has the tendency of doing that.
00:47:20.368 - 00:47:49.710, Speaker B: Definitely all the amazing folks behind flashbots and flashboys, and all this incredible research and now execution have definitely been with us in the community as we've been building something that's been very fascinating for us to watch at optimism, is we put out this sequencing mev auction post, like, over a year ago now. And since then, the MEV has been a bit of the talk of the town. It's been become more and more prominent, and miners are actually starting to extract it much more readily.
00:47:49.790 - 00:47:59.534, Speaker A: Shit. It's almost like they pointed out what the problem was in the dark forest. And now all of the monsters have turned towards and been like, oh, ha, thank you for letting us know we can do this.
00:47:59.592 - 00:49:25.346, Speaker B: Exactly. And I think one thing, I just think it's worth highlighting that as we design these sequencing mechanisms, this does not mean that the service level agreement, as Mark was saying, that you have with the sequencer should be that all your transactions are broadcast in plain text, and the sequencer should be trying to extract as much value as it possibly can from those transactions. So we still do need to do things that limit the amount of MEV that can be extracted. There's responsibility of application developers to do that at the application level, and there's also responsibility at the infrastructure level to try to tackle that in more general ways. But even in a crazy sort of magic moon math world, where it's much, much harder to front run, the right access to the state is still fundamentally valuable. Because even if you don't know what other transactions there are, because they're encrypted or obfuscated or whatever, there is still value in being able to put your transaction first because there might be external things outside of the system that you can use to be profitable. I think one of the most fascinating things we're going to see with MeV, and I think we're going to see more experimentation with this more quickly on l two than l one is able to react, is where is the value in block production when you don't know necessarily all of the other users transactions in a block? And we suspect that there still is a lot of value there.
00:49:25.448 - 00:49:59.050, Speaker A: Cool. So there's currently a lot of conversation among DFI projects who are looking to move either fully or partially onto l two. Like they're exploring this. There's a lot of grants going out, there's a lot of partnerships being announced, and I feel like there's a little bit of a kind of a battle for certain projects to join certain roll ups. And I know with optimism, you've been relatively successful, as far as I know, in terms of commitments. But can you talk a little bit about that and how you can kind of imagine even those DFI protocols working across the different l two s?
00:49:59.120 - 00:50:19.826, Speaker B: Oh, that is a great question. That is a big question. I love it. So a few things. So one starting note is that one of the things that drew us to optimistic roll ups over plasma was the ability to do smart contracts. And one of the incredibly alarming things about smart contracts is the ability to have these incredible money Legos. Right.
00:50:19.826 - 00:51:11.890, Speaker B: This is like your composability, as it's normally called. What you were alluding to is the fact that composability is especially hard across, we call these domains internally. I think chains is the right word across different roll ups, but it could also apply to between a roll up and a state channel, or between one l one and another l one here at optimism. One of the things that we've been doing is designing for composability and interoperability. Like as a first class citizen, we are much more focused on having one really good composable roll up before we start to examine the various challenges that come into breaking out different roll ups horizontally. We have lots of fun thinking here and there's lots of external community work being done as well on this front. But that's one of our focuses, is be really good for money Legos to be all in the shared optimistic ethereum chain.
00:51:11.890 - 00:51:45.642, Speaker B: I think from our perspective, I think that's one of the things that's gotten us a lot of success as we have partnerships with folks like Synthetix, who's been an amazing early client. And soon we'll be having Chainlink and Uniswap and maker and blah, blah, blah. So I think that's one important component of this. As a researcher, though, I do also love the cross rollout part of this question. Right. That's a super fun one. So you can do a variety of things here, but the thing to keep in mind is that when you are talking between run, roll up and another, there's going to be a delay, fundamentally.
00:51:45.642 - 00:52:18.454, Speaker B: Right? Like the fact that these are two separate things basically has a requirement that you have some delay. And if you're like a programmer, you can even think of this as like an asynchronous. Even imagine an async await for blockchains. This is basically what we need. What is not very well developed in the crypto technology stack right now is what are the correct patterns for talking between roll ups and chains in general, what do applications need to tell each other? Right? Like the most common thing that they tell each other is a deposit and a withdrawal. Right. But there are other things too.
00:52:18.454 - 00:52:39.854, Speaker B: Maybe you want to tell the uniswap b three price to all of the other roll up chains, right? Because that's going to be your best price. Oracle, et cetera, et cetera. We're doing our best to give developers as much time as possible to figure out those really hard experience problems by having one really good chain to start. But there's going to be some incredibly interesting things that come up across roll ups as time goes on.
00:52:39.972 - 00:52:53.682, Speaker A: Yeah, you just mentioned this sort of like consistent patterns or almost standards of how these l two s or roll ups should be communicating. Is there any work on that in the community? Is there any sort of organization trying to push for this?
00:52:53.816 - 00:53:27.774, Speaker B: There's this organization called optimism. That's been doing a little work, and you don't know this, but you're, like, describing my past few days. Oh, definitely. This is important. One of the things that we're pushing hard to standardize now is the deposit withdrawal interface, which, like I said, is the most common form of communication between chains, especially layered chains like roll ups, is you deposit your money in from l one, you withdraw it out from l two back to l one. Right. And so defining how assets are moved between these chains is definitely a super important thing.
00:53:27.774 - 00:54:10.838, Speaker B: More generally, there's like the question of communication, and there's different components here. Right. One problem is that if you want to do it with ZK roll ups, then maybe you can't use all of the EVM goodies that solidity gives you in terms of data types and things like this. But another one is that you can see these are asynchronous calls, so you're basically only sending info one way. It's not like in uniswap, where you can do your flash loan and then do your thing with the flash loan and then return the money. Flash loans can't work the same way on l two across chains because loaning the money in one direction is going to take some time, and then sending it back is going to take some time. But the whole point of a flash loan is like, it either happens in a flash or it doesn't.
00:54:10.838 - 00:54:15.230, Speaker B: Right. It's a very challenging problems. Very fascinating.
00:54:15.810 - 00:54:23.454, Speaker A: It sounds like there would be no way to do a flash loan if you have, because there's multiple transaction jumps you'd have to do. Right. Like, it wouldn't be.
00:54:23.572 - 00:54:24.318, Speaker B: Right. Exactly.
00:54:24.404 - 00:54:26.722, Speaker A: Able to fit into the space it needs.
00:54:26.776 - 00:55:05.242, Speaker B: You definitely can't do the exact same thing, but you can do some things. So, for example, you can deposit into another roll up, but instead of depositing to your own address, you can deposit to an address on the other chain that will flash loan your money for a period of time and then automatically withdraw it back to you. So this doesn't give you quite the same thing as a flash loan because there's like capital lockup and it's a little different, but it does give you some semblance. Right. So it's our suspicion that those sorts of design patterns, as cross roll ups stuff becomes more prevalent, is going to really, really evolve and be super fascinating.
00:55:05.386 - 00:55:22.340, Speaker A: Interesting. Let's talk a little bit about bridges, because this is what you were talking about with some of these standardizations or some of these patterns that we'd like to see. And I want to kind of ask you, James, to also your thoughts on this because you're the Bridgemaster. Is that what they call you?
00:55:23.670 - 00:55:24.226, Speaker D: No.
00:55:24.328 - 00:55:26.180, Speaker A: King of bridges, but no.
00:55:26.710 - 00:55:30.902, Speaker D: Developing standard models for these sorts of things is what I work on all day.
00:55:30.956 - 00:55:49.354, Speaker A: Yeah. Is the bridge thinking bridging from l two s to other l two s, or is it also bridging from l two s to potentially, like, other chains that have EVM compatibility? Is this included in this thinking, or is it really just between the two l two s right now?
00:55:49.472 - 00:56:40.666, Speaker D: Well, as I think you and Ben kind of pointed out, there's not an organization standardizing these things. There are dozens of bridges and know communication systems being built in parallel. Most of them are only thinking about one to one relationships, the connection between optimism and ethereum, or the connection between XDI and BSc. There's basically no unified model for these. There's no shared patterns. There's collisions in the address space all over the place, with no way to distinguish which chain a given address is. Then, you know, there's people like me and Ben working on different, but probably extremely similar standards for how domains talk to each other.
00:56:40.666 - 00:56:51.934, Speaker D: So I think it's mostly just a mess right now, and it's going to take a lot of time and a lot of people losing some of their money in order to sort things out.
00:56:52.132 - 00:57:02.754, Speaker A: There's no group that. There's no bridge alliance, by the way. I find those two words together funny. But is there any meta group that's trying to work on this problem?
00:57:02.952 - 00:57:12.070, Speaker D: I think most of the people building bridges right now are just trying to bring farmers over to their chain. There's not a long term strategy for most of these.
00:57:12.220 - 00:57:13.670, Speaker A: That's a bit of a shame.
00:57:14.010 - 00:57:41.098, Speaker D: The exceptions are going to be the roll up projects, and me, of course, I'm really cool. The roll up projects are really the main people that are putting work into getting a single good working bridge model. And you see this from arbitrum and optimism have extremely similar designs, and you see it on the Zk side too, although those work differently.
00:57:41.274 - 00:57:58.338, Speaker A: Yeah. There was sort of an announcement, or there's a proposal for the maker, optimism bridge. I'm curious what that actually means. Is that a bridge from a dap to an l two, is that different from these other kinds of bridges?
00:57:58.514 - 00:58:16.022, Speaker B: It's definitely a little different. I think we've encountered the second most overloaded term than transaction in the blockchain space, which is bridge. We did specifically call our token deposits and withdrawals a gateway just to add to the confusion, but at least not have something else be called a bridge.
00:58:16.086 - 00:58:17.034, Speaker A: Got it.
00:58:17.232 - 00:58:22.106, Speaker D: Oh, gateway is a bad word to use because it overloads with communication systems.
00:58:22.218 - 00:58:27.360, Speaker B: That's true. That's true. Yeah. I thought I was depositing into my windows 98 machine, in fact.
00:58:30.290 - 00:58:44.098, Speaker A: Okay. But this is so good because I've actually been careful not to use the word bridge between the l one and the l two. So this is where you're talking about the gateway. Okay, so tell me about the overloaded term bridges. I feel you.
00:58:44.184 - 00:58:47.894, Speaker B: Cool. So in the context of the maker thing that you're referring to.
00:58:47.932 - 00:58:48.278, Speaker A: Yeah.
00:58:48.364 - 00:59:41.062, Speaker B: What we're actually getting at is one of the, what we think and is quickly evolving to be a very important primitive in cross chain systems, which is basically doing things in advance on one chain because you know that something is going to happen due to what happened on another chain, but has not happened yet because of the slowness of the communication from one chain to another. Okay, so the simplest example of this and what the sort of maker bridge is talking about is for withdrawals. So remember that we have to wait one week, and if there's no fraud proof at the end of the week, that's considered a state update. Right. What this means is that if you want to update the state to say, I am withdrawing my money back to l one once that transaction has been proposed, you must wait one week until it is credited to you on l one.
00:59:41.196 - 00:59:43.254, Speaker A: Oh, I didn't realize that from your one week thing.
00:59:43.292 - 00:59:43.654, Speaker B: I actually.
00:59:43.692 - 00:59:59.770, Speaker A: Sorry. And this is a total miss on my part. We're right at the end of the episode, and I'm only like, oh, so when you deposit money into the contract, you put it into the optimistic roll up. You hang out in there for a while. When you pull it out, you have to wait a week before you get it right.
00:59:59.920 - 01:00:19.950, Speaker B: And when we say we put it in right, what we mean is we lock it up in a smart contract on l one that says, I am deposited funds, I will not be released unless I see a valid withdrawal. And the only way for it to know about a valid withdrawal is if it sees one that had the fraud proof window expire with no fraud proofs.
01:00:20.030 - 01:00:21.090, Speaker A: Okay. And that's a week.
01:00:21.160 - 01:00:39.442, Speaker B: Got it. And that's a week. Yeah. We think that that should be parameterized at a week. So, of course, the notable thing here is during that week, there's no question to any of the other participants in the ecosystem as to whether or not that is your withdrawal. People know immediately. Basically, we call this, like, subjective finality.
01:00:39.442 - 01:00:51.866, Speaker B: Right. Your verifier generates the checkpoint and you know that you're good. But the point is that there's no way for the l one chain to magically know if we're good. So the l one chain always has to wait.
01:00:51.968 - 01:00:52.426, Speaker A: Yeah.
01:00:52.528 - 01:01:35.546, Speaker B: So what this gets at is to what we call sometimes it's called fast exits, fast withdrawals. There's a lot of different terms, but basically the idea is instead of withdrawing your money to yourself, what if instead you withdraw your money to a contract that says, hey, if someone paid 99% of this withdrawal to me immediately, they can get the 100% when it arrives and I'll give them that 1% fee. Right. And you're kind of like selling your withdrawal in advance. In fact, in plasma, in early versions of this, we actually realized that could be represented as an NFT. We've since realized that's overloaded and thank God we're not contributing to the NFT hype now. But that's sort of what's going on.
01:01:35.546 - 01:01:40.780, Speaker B: There's a lot of designs there. I can tie it back to the maker, one in particular, but I can pause for questions too.
01:01:41.710 - 01:01:51.598, Speaker A: This is interesting. So this is the idea that you would basically pay a small fee to get your money out quicker. Exactly. From the user's perspective, you're like, I don't have to wait the week.
01:01:51.684 - 01:01:52.350, Speaker B: Exactly right.
01:01:52.420 - 01:01:59.460, Speaker A: Is there a fee when you're using the optimistic roll up as well? Is there a fee going in and then there'd be another fee coming out.
01:01:59.910 - 01:02:21.250, Speaker B: You definitely have to have fees on any blockchain system pretty much that has a bounded amount of computation because you have to make sure that people don't spam the chain for free. So you do have fees. If you crunch the numbers on one week lockup versus like the interest rates that we're seeing elsewhere, it seems pretty likely that those fees will be quite low to get your money in and out.
01:02:21.340 - 01:02:22.026, Speaker A: Okay.
01:02:22.208 - 01:03:16.314, Speaker B: One other interesting note, I don't see talked about as much in the fast exits world, but I think it's a very interesting point is that we often think about markets for exits for these withdrawals because they take so long and we think of some liquidity provider there serving that role. One interesting thing that I think we may see in the future as the infrastructure gets more built out is there's actually a very natural coincidence of wants between people withdrawing and people depositing. So you can actually imagine a roll up where the same volume of people are depositing as are exiting. And instead of any actual deposits or exits occurring, those two parties will simply trade their l one and l two assets for each other repeatedly. So you might even have this world where people are like virtually moving in and out of the roll up, but in practice they're just trading assets with people who want to do the other.
01:03:16.352 - 01:03:20.698, Speaker A: Action in an l one smart contract basically within there.
01:03:20.864 - 01:03:21.434, Speaker B: Yeah.
01:03:21.552 - 01:03:41.842, Speaker A: Let's kind of walk through what the maker optimism bridge would actually look like, though. So this is like a very specific proposal where you would, I guess you'd deposit like maker, where you mint die, basically. I'm kind of curious, like how would this work? Would you deposit on the l one and mint die in the optimistic roll up? Is that kind of what it would look like?
01:03:41.976 - 01:04:37.394, Speaker B: First of all, the maker team is amazing and they've been doing some awesome work. Major shouts out I do not want to speak to their roadmap unduly so I can share what I think is going on. I want to caveat with subject to change, but I have a good sense we talk with them. So I have a good sense of what the proposal is in its current form. Basically, the core realization is that a withdrawal in progress could make an extremely good collateral for an MKR on layer one. Because it's very clear if you know the state of the roll up that what this asset is and what it's going to be worth and because of the sort of longer term nature of maker liquidations and things like that that week is actually a lot more reasonable of a requirement within that framing. And maker also has an oracle that is used to basically update the price of DAI, for example, and other components.
01:04:37.394 - 01:05:01.846, Speaker B: And so very interestingly, what we can do without building much additional trust assumption into the system is have that oracle be an oracle for upcoming withdrawals and basically credit them and use those to mint DAi. So that is, to my understanding, the current proposal is you still do it on layer one, but you use a collateral that is a L2 asset that is in the process of being withdrawn.
01:05:01.958 - 01:05:02.714, Speaker A: Interesting.
01:05:02.912 - 01:05:52.894, Speaker D: I do want to push back on the idea that this is not very much of an additional trust assumption because it is a really interesting idea, but it has the side effect of opting every die holder into this security system and making the stability of DAI now dependent on proper function of the optimism, contracts and withdrawals. And it has an additional side effect, which is that it expands the power of the maker, Oracle. Where previously the oracle affects all vaults and all users equally, now it will affect users individually at its discretion. So it is a really interesting system. It does have significant security impacts and new trust assumptions for the maker system.
01:05:53.092 - 01:06:44.286, Speaker B: That's definitely a good point, James. You're a great grounding force in these sorts of discussions, so I definitely agree. I do think that the design that they're choosing, though, is actually, I think, pretty reasonable and pragmatic. One note is that if the assumption of the roll up is non censorship by miners, that's actually something like there's already a lot of things on maker that break if the miners can censor right already. So hopefully that's not like so oracle, for example. So there are definitely, I think in general what we're going to see is crazier and crazier trust models and assumptions being pushed as we enter this sort of multi chain universe that is very rapidly expanding in front of us. I really personally like the trade offs that maker makes.
01:06:44.286 - 01:06:46.254, Speaker B: I think they're very interesting.
01:06:46.452 - 01:06:53.850, Speaker A: Cool. So it sounds a little bit like this is also maybe questions for the maker team for us to chat with them because it's their proposal.
01:06:53.930 - 01:07:00.898, Speaker B: I definitely think they would be best suited to answer those and they might be a little upset if I answered too much for them.
01:07:01.064 - 01:07:08.246, Speaker A: Fair enough. So anything else maybe on the roadmap that you want to share with our listeners before we wrap up?
01:07:08.348 - 01:08:20.314, Speaker C: Yeah, totally. So right now we are on mainnet with synthetics and it's kind of a, kind of closed early mainnet launch. There is a kind of contract whitelist where if you want to deploy arbitrary contracts, you need to kind of be added to this whitelist. And as we are iterating on the system and making it more stable, we're planning on adding more projects and we have an upcoming release planned with synthetics to enable synthetics exchange. And this is going to be really interesting because synthetics exchange is really expensive on l one and on l two it becomes way cheaper because l two you're really just charged for the size of the transactions in bytes because you don't need to pay all the gas for all the execution. And then over the next few months we're hoping to have a really rock solid and stable system and hopefully we can get uniswap on. They announced that they're planning on launching v three on optimism later this year.
01:08:20.432 - 01:08:24.734, Speaker A: Yeah, I mean, that's going to be pretty wild. Do you feel ready?
01:08:24.932 - 01:08:26.222, Speaker C: Yeah, definitely.
01:08:26.356 - 01:08:33.570, Speaker B: Our knees are weak and our palms are sweaty, but we are feeling ready. I do think we already made that joke once before.
01:08:33.720 - 01:08:36.180, Speaker D: There's synthetics on your chain already?
01:08:37.830 - 01:09:05.974, Speaker B: Yeah. Code spaghetti. I want to show one last short term upcoming milestone, which is the eth global scaling Ethereum hackathon that is coming up. We are going full steam ahead and going to have some prizes and other awesome stuff. So check that out for more details. We're thinking of this as the staging ground for our next batch of whitelisted deployments to Mainnet. So that's going to be super exciting.
01:09:05.974 - 01:09:12.538, Speaker B: We're going to have lots of fun stuff to keep everyone busy, and I'm sure to keep us busy. So that's very exciting.
01:09:12.714 - 01:09:23.786, Speaker A: Cool. All right, well, I want to say thank you, Ben, mark, for coming on the show to chat with me and James about all things optimistic and optimism.
01:09:23.898 - 01:09:25.102, Speaker C: Thanks for having us.
01:09:25.236 - 01:09:27.434, Speaker B: Absolutely. Thank you, guys. It was a pleasure.
01:09:27.562 - 01:09:37.350, Speaker A: Cool. I want to say a big thank you to Andre, the podcast producer, and Henrik, the podcast editor, and to our listeners, thanks for listening.
