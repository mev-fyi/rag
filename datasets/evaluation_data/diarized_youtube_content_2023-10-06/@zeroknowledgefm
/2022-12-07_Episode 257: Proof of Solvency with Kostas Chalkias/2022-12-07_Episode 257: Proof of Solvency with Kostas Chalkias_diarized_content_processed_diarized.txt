00:00:05.450 - 00:01:12.126, Speaker A: Welcome to Zero Knowledge. I'm your host, Anna Rose. In this podcast, we will be exploring the latest in zero knowledge research and the decentralized web, as well as new paradigms that promise to change the way we interact and transact online. This week I catch up with Kostas Halkias, co founder and chief of cryptography at Mistin Labs. We dive into his background and then explore his work on the concept of proof of reserves, or as he calls it, proof of solvency. We look at old models for this how zkps can be used in these protocols, the way that exchanges currently use them, attacks on some of those approaches, the security vulnerabilities, privacy issues, and general bugs that can be found in some of these systems, as well as how to better create proof of solvency protocols. For some context, proof of solvency means does this entity have the liquidity assets reserves that they say they do? Obviously, this is very relevant to our industry today, so it was great to get a chance to kind of dive into this topic with Costas.
00:01:12.126 - 00:01:58.322, Speaker A: Now, before we kick off, I just want to let you know that we are rolling into our last weeks of Zkhack. If you haven't checked it out yet, it's our annual online multi week event all focused on bringing you up to date with ZK tools and tech. It also brings together some of the best ZK brains to hack on broken ZK protocols. We have prizes, but more importantly, this is a great way to get cred within the community. It's been amazing so far, with dozens of hackers hacking and hundreds and maybe by the time this airs, thousands of workshop participants. Be sure to check out the website to see past workshop videos, puzles and some of the solutions, as well as sign up for the next few sessions and hopefully get a chance to try your hand at the current Zkhack puzzle. You can find out more at Zkhack Dev.
00:01:58.322 - 00:02:29.290, Speaker A: Now Tanya will share a little bit about this week's sponsor. Today's episode is sponsored by Alio. Alio is a new layer, one blockchain that achieves the programmability of Ethereum, the privacy of Zcash, and the scalability of a rollup. If you're interested in building private applications, then check out Alio's programming language called Leo. Leo enables noncryptographers to harness the power of zkps to deploy decentralized exchanges, hidden information games, regulated stablecoins, and more. Visit leo lang.org to start building.
00:02:29.290 - 00:02:58.698, Speaker A: That's Leo Lang.org. You can also join Alio's incentivized testnet three by downloading and running a snark OS node. No signup is necessary to participate. For questions, join their discord@alio.org. Discord so thanks again, Alio. And now here's our episode. Today I'm here with Kostas Harkias, the co founder and chief of cryptography at Mistin Labs.
00:02:58.698 - 00:03:00.562, Speaker A: Welcome to the show, Costas.
00:03:00.706 - 00:03:14.326, Speaker B: Very nice to see you eventually, Anna, and I'm super happy I have the opportunity now that everything is super hot on the topics I'm working on. I know a lot of people actually in the industry know me by my nickname, which is called as cryptos.
00:03:14.438 - 00:03:14.762, Speaker A: Okay.
00:03:14.816 - 00:03:22.480, Speaker B: Because you remember, right when we started this podcast, it requires a few moments to be able to pronounce my name.
00:03:25.970 - 00:03:55.826, Speaker A: There are a few takes that will have been cut by the time people hear this, but I did say it by the end. Okay, thank you, Costas. Welcome to the show today. Our plan with today's episode is really to talk about proof of reserves, a topic that you've been focused on for quite a while. I want to hear, though, like, let's kind of rewind a little bit. Before mist and labs, what were you working on a few years ago? Where did you start to get excited or interested in this concept of proof of reserves?
00:03:55.938 - 00:04:16.558, Speaker B: Okay, first I will give a few hints on how I went into the cryptography space in general. Right. Imagine I'm an immigrant in the US. I come from like a greek university. I worked for a couple of european companies in the past, all of them on security and cryptography. And all of my life that I can think after 2005 or six was breaking stuff.
00:04:16.724 - 00:04:18.320, Speaker A: You like to break things.
00:04:18.690 - 00:04:58.534, Speaker B: Well, I think I had an inclination into doing some cool attacks in systems and all of this back in the days, you could very easily do all of these Javascript injection attacks. You can even go to websites, you can learn how things work on the server side. But anyway, eventually I ended up doing pairings, bilinear pairings, which is like one of the major primitives that is used in zero knowledge proofs since 2008, nine. And I was hired at Corda, you might note. Corda. Corda, it's from r three. It was one of the first, biggest investments in the space at the very beginning.
00:04:58.534 - 00:05:53.578, Speaker B: They were like permissioned. Eventually they got like semi permissionless and all of this stuff. But there was a benefit there. The benefit was the guy who hired me was Mike Harn. Mike Harn is one of the first developers of Satoshi, and I had the opportunity since 2016 to literally work on hardcore blockchain cryptography. And obviously back then, because the company was backed by some of the most major banks in the world, I think all of the popular banks that you are aware of were part of the consortium who invested in r three back then, and I worked there leading all of their cryptography efforts for, like, two to three years. I remember myself starting the proof of reserve stuff even before I joined Facebook, which means that back then, we were doing SGX enclaves and not zero knowledge proofs.
00:05:53.578 - 00:06:16.790, Speaker B: And I remember myself being on the zero knowledge proof. The first event that happened, I was there with 100 cryptographers. I was the only person doing SGX. Everyone was pouring at me. And then I said, oh, my God, where am I going? It's now Kanetti and Kravchik and all of the Daniel Benaros. And everyone was looking at me, okay, this guy is doing something different. However, we want to hear different voices.
00:06:17.850 - 00:06:20.066, Speaker A: What event was that? Was that ZK proof?
00:06:20.178 - 00:06:55.246, Speaker B: Yes, it was the ZK proof. The first one that was organized back then by Cadit. But anyway, the zero knowledge proof topic actually attracted my attention, of course. And then I said, okay, I'm breaking stuff. And then I realized I'm dealing call of the day with bankers and people who are doing, like, decentralized finance. Let's see, is everyone solvent? Can we even prove this? Can we do anything to actually provide some evidence to the world, especially for exchanges and some centralized wallets, even custodians? Right. Sometimes we need solvency for custodians as well, not necessarily exchanges.
00:06:55.246 - 00:07:27.974, Speaker B: And I started doing this work from 2016, as I said. And it's important because I think one or two years before I joined r three, Mike Harn was literally an auditor. He was called by one of the major exchanges back then to do personal audit. So he went back to their database and he actually, with his eyes, checked the results of the database. Oh, these are the assets, these are the liabilities. I can prove myself. I put my signature that this company is solvent.
00:07:28.022 - 00:07:28.330, Speaker A: Wow.
00:07:28.400 - 00:07:32.654, Speaker B: And then I said, oh, my God, is this like, okay, we rely on.
00:07:32.692 - 00:07:33.694, Speaker A: Efficient way to do it.
00:07:33.732 - 00:08:10.102, Speaker B: Yeah, we rely on experts, and I rely on your sayings, but this is not verifiable. There were a few people, even, like, after the empty Gox case where they started building cryptography, they realized that personal auditing by real people and that they were considered experts is not enough. Right? This is not transparent, this is not auditable. You rely on someone's reputation that this is actually happening. The big four, like, the big auditors weren't in the space yet. Like, imagine all of these things were just a toy. There were not real assets back then.
00:08:10.102 - 00:08:32.814, Speaker B: Now they have more of a monetary value. And they said, okay, let's use a very basic cryptography. Let's use merkel trees. And with merkel trees, people can. Someone, like a company can just put all of the balances in a Merkel tree, and I will check if I'm included in the Merkel tree. This was the very first approach on how we can do proof of liabilities, at least.
00:08:32.932 - 00:08:38.606, Speaker A: Is this the work you were doing, or is this the work that was being proposed generally?
00:08:38.718 - 00:09:37.662, Speaker B: So, like, the first proposals were even exchanged between some email threads even before my time, like 2014, 2015, the very basic stuff. I'm not saying that this is the one that we should use today, but if these guys weren't there, like people like Greg Maxwell and some other folks, we wouldn't be in a state now that we can have more privacy preserving techniques, techniques that are actually more secure, and all of this stuff. So imagine 2014 15 is a very important day, because empty Gox, the collapse of the empty gox and the rumors that they were insolvent, it sparked the interest of some cryptographers, especially those in the bitcoin space, that says, okay, let's see if we can automate this process. And the automation started, as I said, with very simple Merkel trees. But these Merkel trees were not as like the Merkel trees we're using for membership proofs. What we do, we also have a summation up to the root. So you have a Merkel trees with all of the balances of the users.
00:09:37.662 - 00:09:58.186, Speaker B: Like, you have five bitcoins, I have seven bitcoins. We put all of them into leaves in this Merkel tree, and then we do the addition. So the next level has five plus 712. And you go up and up and up. Eventually, you go up to the root, and the root should have the total amount of the liabilities of the company got it? Right. And we said, okay, what do we do with it?
00:09:58.208 - 00:10:00.842, Speaker A: Or the reserves, maybe not liabilities. Always.
00:10:00.976 - 00:10:09.962, Speaker B: I will explain. There is a huge misconception here when we say proof of reserves, if this is enough to actually prove solvency.
00:10:10.026 - 00:10:16.750, Speaker A: Right here you're talking about, like, the Merkel trees. This was sort of first attempt. I remember r three. So this is a 2017.
00:10:17.570 - 00:10:18.794, Speaker B: Exactly project, right?
00:10:18.852 - 00:10:19.602, Speaker A: I vaguely remember.
00:10:19.656 - 00:10:42.122, Speaker B: Well, it started earlier. I think it started even very close to the Ethereum. When Ethereum was published, r three was in the like. They were trying to build r three back then. I see. But in a different way, like more private. And they wanted to actually explore, I don't know, different ways of public blockchains, but still a smart contract platform.
00:10:42.122 - 00:10:48.486, Speaker B: I was there. I worked until 2019. And then I met Sam. Sam Blacks here, who is our CTo.
00:10:48.518 - 00:10:51.530, Speaker A: At Miston, who I've had on the show.
00:10:51.600 - 00:10:56.282, Speaker B: This changed my life, not only at Miston Labs, it changed my life for me to go at Facebook.
00:10:56.426 - 00:10:56.830, Speaker A: Yeah.
00:10:56.900 - 00:11:11.294, Speaker B: And I'll explain what happened. So we had an algorithm. This was like a post quantum signature scheme. And then there was a conference in Canada. And I said, okay, of course it's a good publication. I'm going there. It was an IEEE conference.
00:11:11.294 - 00:11:32.758, Speaker B: Not so famous, but it was okay for the time being. And Sam was also there because what happened back then, it was David Marcus building the team of Facebook that they will deal with blockchains and obviously some key members of the team. And Sam is. I don't know if you know, but Sam is probably one of the youngest people being promoted at this level that he was before he leaves Facebook.
00:11:32.854 - 00:11:33.562, Speaker A: Oh, wow.
00:11:33.696 - 00:11:53.646, Speaker B: He's very smart. But anyway, obviously some. I didn't know this guy back then also attended to try and check. Oh, is there any interesting presentation? And then he has seen the name of Mike Hahn, as I told you, the guy that was at bitcoin. And he said how bad this presentation can be. The conference was not perfect. Right.
00:11:53.646 - 00:12:03.406, Speaker B: There were many weak presentations and all of this. And I was fortunate because Sam joined my session and then he went back to Facebook and said, okay, I met a guy that we should hire.
00:12:03.518 - 00:12:10.550, Speaker A: Cool. So he saw you give a talk, decided you would be a great addition to the team, and then he recruited you, I guess.
00:12:10.620 - 00:12:17.910, Speaker B: Exactly. And it's very funny that Sam didn't actually refer me to Facebook. Someone has seen his post at Facebook and someone else got the referral.
00:12:20.330 - 00:12:21.080, Speaker A: Him.
00:12:22.110 - 00:12:41.194, Speaker B: Yeah, we're making fun with some these days. But anyway, this was my first step to say, okay, I'm now in the UK. I used to work in London. R three was like New York and London, but most of the engineering team was in London. It's a good opportunity for me to go at Facebook. Obviously they are building something new. I know they want cryptographers.
00:12:41.194 - 00:13:01.666, Speaker B: The team seemed really cool. I talked to some. Then I even talked to some of the leadership. Imagine getting someone as a transfer from a company where you are leading stuff and you're getting paid well. You're actually having your own team. It's not easy, right? Even if you say, I'm going to Facebook. But I was convinced, like, even David Marcus was a key player.
00:13:01.666 - 00:13:09.618, Speaker B: And Evan Cenk, Evan, like, the CEO of Mr. Now, was also, like, the director of all of the research team at Facebook.
00:13:09.714 - 00:13:29.646, Speaker A: Did you have any trepidation, though, going to a company like Facebook now? Meta, like, at the time, this is 2018, 2019. I guess the reputation already of Facebook is like, it's a big company, but it's not. I mean, it, first of all, wasn't really known as a cryptography company at the.
00:13:29.748 - 00:13:30.110, Speaker B: No.
00:13:30.180 - 00:13:33.050, Speaker A: And like, yeah. Did you have any worries about going to such a big.
00:13:33.130 - 00:13:50.502, Speaker B: I can give you the full perspective here. I didn't, and I will explain why. Obviously, this was right after the Cambridge Analytica situation, which happened a year before. And obviously, as a researcher, you want to go sometimes in companies that, you know, you can fix things.
00:13:50.636 - 00:13:51.366, Speaker A: Okay.
00:13:51.548 - 00:14:35.458, Speaker B: I didn't know, of course, if it was like, Facebook to blame or if it was just because they missed something, like, in the flows. But anyway, it's like, entring to you, right? You want to go to a company that is big enough to support even having a team. This was one of my first requests. Back then, I didn't have a team directly, but eventually I did lead the team as I wanted. And the fact that I was about to work in a startup inside Meta Facebook back then was also very good for me because I was very experienced with startups. And I said, okay, it's a big company. As you say, they have their own issues, but at the same time, they have the many benefits that I can have access to, the best resources available.
00:14:35.458 - 00:14:58.138, Speaker B: I can work on very important problems. It's a new blockchain. I've done it once. I've built one blockchain with Mike and all of the r three team Corda, I know how to do it again. And to tell you the truth, at the same time, you know how it is with cryptographers and, like, senior engineers. You're getting offers from Apple, Google, Facebook and so on. And then I had a few other options, visa as well, back then.
00:14:58.138 - 00:15:28.678, Speaker B: And then I said, okay, I'm joining Facebook because in all of the other offers that I have, they are actually putting me as a security engineer or as a cryptographer, where I don't know what is the project I will work on. But Facebook had a dedicated role for Costas. And this is the reason that I picked Facebook. It wasn't necessarily money. It wasn't necessarily like the fact that you said bad reputation. They had a very clear role for me. And I joined Facebook, super happy.
00:15:28.678 - 00:16:14.434, Speaker B: Three years leading staff, starting officially publishing proof of reserves, proof of solvency protocols on 2019. So the first year at Facebook, we already had the presentation back then in Amsterdam. It was like one of the first, no second or third zero knowledge proof event. I presented our first ideas how we can add privacy to the original schemes of Proof of solvency. And since then, I worked so many different things at Facebook. So from proof of reserves, leading the zero knowledge proof story with Bobinth, now Bobinth is at Polygon, leading so many different compression schemes, even on signatures with Lera. Lera is on a 16 z now.
00:16:14.434 - 00:16:37.098, Speaker B: We had so many. I mean, the team was one of the best. You can see back then. Very cool. I'm not kidding, right? I was in Corda, I was dealing with hyperledger fabric and all of the Ethereum guys. I believe that Evan Cheng, because he was like the head of research back then, he managed to build a very solid team. And I can tell you for sure, because I was internal at Facebook, right.
00:16:37.098 - 00:17:02.018, Speaker B: The reason that Libra didn't launch wasn't technical. We were already technically even a year ago, before the Libra project collapses. And we were super happy with what we did. And it makes sense. Right after the Libra collapse, you've seen a few startups popping up. It's Mr. Labs, it's Aptos, it's Lineara, it's even David Marcus Lightspark, at least for almost l ones.
00:17:02.018 - 00:17:10.994, Speaker B: There is a reason for this. The team was very, very strong. And because Facebook couldn't keep all of these people, eventually, I mean, nobody would work for a project that wouldn't fly, ever launch.
00:17:11.042 - 00:17:11.446, Speaker A: Yeah.
00:17:11.548 - 00:17:28.742, Speaker B: Yes. Then personally, when I realized that Libra will not manage to do it for a while before I leave Facebook, I also worked on WhatsApp security. I have a few patents there and all of this stuff. I'm against patents, but big companies, they have to do this for even defensive.
00:17:28.806 - 00:17:31.178, Speaker A: Reasons, reasons I'm putting.
00:17:31.344 - 00:17:50.142, Speaker B: Can I can give you an example. I didn't know about this. Right? There is a reason. Sometimes you might be the inventor of some idea and there might be a company outside the US that they will. No, no, we did it. And now Facebook, you cannot use it. So sometimes, because of this potential threat, they go and patent.
00:17:50.142 - 00:18:30.990, Speaker B: But anyway, this happened, and with misten, I think we had the best opportunity possible. And there is a big reason for this, is some of the research that we were either finished at Facebook or most of the times, especially now, we extended after we left. Facebook was so innovative that compared to the other blockchains that you could see here and there, you had an opportunity to actually build a system with high throughput privacy whenever is required. Some very cool cryptographic primitives. I had all of this experience with proof of reserves and working with the Libra foundation, with Corda banks in the past. And then I said, okay, it's better for me not to stay at Facebook. It's better to me not to join another company.
00:18:30.990 - 00:19:05.654, Speaker B: Now, all of them are friends, right? I'm personally a person who likes the community. I want other projects to also flourish. But I said, okay, I will join Misten because the team that Evan Cheng is now having was literally one of the best I've ever worked with. So we have five founders who, all of them were almost like, having one of the best promotion paths that you could see at Facebook. These guys couldn't be, like, fake, right? There is some real substance behind it. And then I left Facebook. I joined Miston as the lead cryptographer and obviously co founder.
00:19:05.654 - 00:19:27.518, Speaker B: And now we have, again, I believe, one of the most solid teams. We have four departments of cryptography. We have a zero knowledge proof, dedicated department. We have a random beacon dedicated department. We have an optimization department, and we also have an RFCS department. So this is where I am at the moment. Right, leading these four verticals inside Miston.
00:19:27.614 - 00:19:52.854, Speaker A: Sounds good. Let's go into proof of reserves. So you've started to tease some of the early work. So I think we now understand the history of when you started working on this. Yes, proof of reserves. Obviously, we're recording this just a few weeks or a week after the crazy FTX fiasco collapse and all of that. The topic has become super relevant because in that case, there were no proof of reserves.
00:19:52.854 - 00:20:13.662, Speaker A: And we are learning that reserves were not there. And that's kind of terrifying. So this idea of proof of reserves, you do have it being used in exchanges. I want you to kind of go back into explaining what is a proof of reserve. Actually, you started with the Merkel trees, but let's even go a bit higher than that. What is it for?
00:20:13.796 - 00:21:24.290, Speaker B: I will explain what's the problem we're solving here, right? We have companies, we have exchanges, we might have custodian wallets, and all of these people who own money and they handle money on behalf of the users, for which the users do not have the actual key to the blockchain, like someone else is controlling your key to make transactions on the blockchain. And this is what's happening usually on centralized exchanges, like the FTX case back then with empty Gox, and even like all of the major exchanges that we're aware of, people are not good at protecting their passwords eventually. Sometimes you are lazy, and what you do is actually you go there. It also gives you all of this flexibility to do the transactions without you remembering very complex passphrases and everything. And people felt really good with that until we realized the problem, right? The problem is, what if the company, you are putting all of your money there by credit card, you are having some wires, you're sending all of this because you don't have a personal account. They control the bitcoins, ethereums, whatever is the coin for you, but you don't know if they are solvent. And what solvency means is the money that all of the clients have in the exchange.
00:21:24.290 - 00:22:15.702, Speaker B: These are the liabilities of the exchange, are matching all of the assets that the exchange has in the outside world, which means the assets, the real bitcoins that I have on the network and I control the key for I'm the exchange now. All of the other potential like assets that I have outside the exchange, I might have some cash, I might have some bonds, I might have some real estate investments, I might have different things. But at the same time, I want to ensure that wife, one day, all of my clients, all of my customers come back and say, I want to withdraw my money. Am I able to pay them back? And if you consider what are the functions involved here, it's like proof of liabilities. You need the proof to actually show how much money you own to your customers. And the proof of assets. How much assets do I have in.
00:22:15.756 - 00:22:24.758, Speaker A: My ownership, would you say then, is proof of reserves both of those things? Is the proof of reserve a proof of liability, matching a proof of asset?
00:22:24.934 - 00:22:42.650, Speaker B: Yes. And sometimes we call it proof of solvency as well. So proof of reserves is probably equal to proof of solvency. And this is divided into proof of liabilities and proof of assets. Sometimes people are confusing proof of reserves with just proof of assets, because the word reserves sounds like assets.
00:22:42.730 - 00:22:43.934, Speaker A: That's what I was thinking, too.
00:22:43.972 - 00:23:13.914, Speaker B: Yeah, exactly. So what I use lately, I better use the wording proof of solvency, and then I divide it to proof of liabilities and the proof of assets. And you can see different mechanisms, even from the cryptography perspective, how to prove liabilities and how to prove assets. And I think this is causing the confusion. Even on Twitter, people can see, like, there are some very good solutions out there. And I can mention like Stargur, Alibertzason has some great ideas. We know all of these Benedict Boones and Dan Bonet have some very good.
00:23:13.952 - 00:23:16.250, Speaker A: Ideas for selective disclosure.
00:23:16.670 - 00:23:44.722, Speaker B: Exactly. And there is also Chainlink, who's solving with Oracle's the problem of proof of assets. And I will explain why these problems are different. But anyway, let's stick to the point where you have to prove liabilities and you have to prove assets. How do you prove assets? Let's get this side first. Right? There is a second parameter actually, before I go there, which is liquidity. We know that the FTX case might not be, we don't know if it was truly insolvent, actually.
00:23:44.722 - 00:24:07.882, Speaker B: This is like the court or like the legal system would decide, but we know they had a liquidity problem. This is a fact. Right. And sometimes I might say to you, right, let's assume you're putting your money into my exchange. I'm an exchange now, and you're having like 1 million in dollars in my exchange. And I go and buy real estate, I go and buy a house. And then you say, I want to withdraw my money.
00:24:07.882 - 00:24:13.998, Speaker B: Yeah, this money might not be liquid. I mean, I need to sell my house first to give you your money.
00:24:14.084 - 00:24:28.690, Speaker A: Fair. And I think in this case, especially with the case that just went down, investments with long lockup periods, for example, would still look at asset on the balance sheet, but wouldn't actually be liquid. So if you needed to take the money out, you wouldn't be able to.
00:24:28.840 - 00:24:55.846, Speaker B: Exactly. And this is usually the main problem that even if you do cryptography and all of the fancy solutions, you need to define some function on what is liquid and what is not liquid. And then you might say, I'm running in a fractional reserve regarding liquidity. However, in total I am solvent, because liquid plus non liquid assets surpass the liabilities. And it's a problem. Right. It's not easy to solve.
00:24:55.846 - 00:25:22.514, Speaker B: And let's go and see what are the options that we have. Proof of assets first, because proof of assets, as we said, is like the assets that you have on chain. Let's assume these are the liquid assets. You have bitcoins, you control keys for your bitcoins, and ethereum, and there are non liquid assets which might be, as you said, investments, bonds, even cash on the bank and all of this stuff. So there are companies like Chainlink and some others where they're building a set of oracles, and probably they have some.
00:25:22.552 - 00:25:26.066, Speaker A: Collaboration with auditors to connect to the real world, right?
00:25:26.168 - 00:25:27.782, Speaker B: Yes, they're trying to connect to the real world.
00:25:27.836 - 00:25:28.518, Speaker A: You need this.
00:25:28.604 - 00:26:06.014, Speaker B: You need this. And there is a question, can we do this without auditors? Probably with some zero knowledge proofs, but again, all of the system, like the banking system and everyone who is owning these assets, eventually. So your cast is under a bank, your real estate is probably under some agency or something. They need to provide these proofs, because otherwise, how do you know that? So what's happening is, let's assume the simplest model is you have a set of oracles. This set of oracles is talking to some auditors. These auditors are auditing the actual reserves, the actual assets. So I'm not going to use the word reserves again, the actual assets.
00:26:06.014 - 00:26:46.640, Speaker B: And these are giving, like every few moments, they're giving a signal that these are the assets. These are the assets. These are the assets we need this heartbeat, right? Because, you know, these are fluctuating. And this is one of the other problems that we have now. What do you mean, the assets at which timestamp? Because even in one moment, I can transfer funds or I can transfer some of my assets, or I might acquire a new company. My assets are changing constantly. So for proofs of solvency, it's very important to define an actual timestamp, in which case you are doing concurrently the asset check and the liabilities check.
00:26:46.640 - 00:27:28.614, Speaker B: This is not very easy in the real world. How would you do it? How would you actually say all of the other providers of these assets, banks, real estate agencies, bond providers, the stock market investments, investment funds, how do you say to them, give me, by this timestamp, all of my assets, and I will compare it with these liabilities? There is a process here, and you need some time to organize it, but it is possible, if we do it properly, it is possible. And there is another thing that you mentioned at the very beginning of this meeting, right. One of the issues is if you know, however, this timestamp and you have a friend in the other exchange, you might ask them, okay, tomorrow at 07:00 I will be audited.
00:27:28.742 - 00:27:48.558, Speaker A: Can you send, actually, I said this before we started the interview, but yeah, this idea of like a short term loan to move funds into an account at the time when you're actually doing this check, and then you'd move them right out. And I think there's like a theory that crypto.com may have just recently done that, but that's a little conspiracy theory, possibly.
00:27:48.654 - 00:28:29.422, Speaker B: I won't get into this, into the conspiracy and rumors. I will talk as a cryptographer here. Right. What can we do, is it anything that we can do? Surprisingly, there is a paper from Benedict Boones, Dan Bonet, Jeremy Clark, and all of these popular, famous, notable cryptographers, where in their provisions paper, it's called provisions. It was the first scheme that I've seen, I think it's 2015, that they had an algorithm that said, okay, if proof of assets is happening at the same time for all of the exchanges, then there is a zero knowledge proof that we can create that all of them are solvent. And they used this asset once. Right.
00:28:29.422 - 00:28:33.162, Speaker B: You didn't double use this asset in my audit and your audit.
00:28:33.226 - 00:28:33.502, Speaker A: Yeah.
00:28:33.556 - 00:29:00.966, Speaker B: Interesting. Okay, so it is possible. However, this algorithm was only based on the facts that we can see on the assets that we can see on the blockchain. Because in the blockchain, you know, because imagine these are addresses that they are owning some assets. And by zero knowledge proof, you can use the object id, the Utxo ID or whatever it is, and say this utxo id in zero knowledge proof is not used here. And here it's used only once. It is possible.
00:29:01.068 - 00:29:13.680, Speaker A: Is it also possible to take like three snapshots in a certain period of time in case almost to look for these type of short term loans? Although I guess, actually, if somebody knows the snapshots are coming, they could just make the loan longer.
00:29:14.050 - 00:29:34.642, Speaker B: Yeah, it is possible. And this is like what I call continuous auditing. You need some continuous auditing, right. Either this step is every few moments, literally in an analog way. It's very difficult how to do it per second. Right. Because all of this requires some computations, you cannot even do it every second.
00:29:34.642 - 00:30:36.870, Speaker B: So you have to take this into account, because if we are building zero knowledge proof systems for this stuff, we also need to account for how, I mean, the frequency of this. It's important, right. It might take time, and you know better with all of the guests that you have, that some proving systems are not super fast, or even if it's not super fast, even if we say a minute, we cannot go less than a minute. How would you do that? Okay, this is one of the problem, right? First problem, how do you ensure that at the same time, in one organization, all of the proof of assets are happening at the same timestamp? The second problem is, how do you ensure that these are not colluding? And even if exchanges are not colluding, not everyone is audited at the same time, even if we could enforce it, because it might be you, an individual who would be a friend of the CEO of the exchange for some reason, you had a lot of assets. And because we're having assets outside the exchanges, you own the private key personally. You can just rent it for a while. Right.
00:30:36.870 - 00:31:04.014, Speaker B: And then after the audit, you will never be audited because you're an individual. Who cares? They will return back to you the money. And we have to figure out how to solve this. And the way we can do it is with continuous analytics. If we see big transactions happening, this is an alert, and we have to do this. However, we also propose something else in one of our papers. The audit should happen in a timestamp defined by some set of auditors in the past.
00:31:04.014 - 00:31:11.362, Speaker B: Okay, so imagine I'm coming to audit you now, and I say to you, I will audit you for yesterday, not today.
00:31:11.416 - 00:31:13.218, Speaker A: Yeah, that's nice. Okay.
00:31:13.304 - 00:31:32.070, Speaker B: Now it's in the past, right. You cannot change the past. And probably you have to find a way to prove what were your liabilities back then and what were your assets back then. And now you don't have the time to do all of this collusion thing. So there are ways to do it. We don't know how far in the past it is possible because you might have lost the keys.
00:31:32.150 - 00:31:34.842, Speaker A: Yeah, there's things that could have had you lose it.
00:31:34.896 - 00:31:35.258, Speaker B: Exactly.
00:31:35.344 - 00:31:46.446, Speaker A: In a way. Also, you're proving proof of liability and assets then, and you may have lost it, like, maybe you've totally gone out of whack since then and you're not proving it for now. Okay, this is true.
00:31:46.628 - 00:32:21.202, Speaker B: However, a few things might be auditable already. Right? If you had, like, some timestamp on the transaction that happened back then, and even, I don't know, with some auditor supervision, or even if you don't want to provide so much privacy and you want to reveal to the world, these are the assets I own, the blockchain. Obviously, you're losing privacy here. These are all of the liabilities I have for everyone. You can go and check at that day. Was this your balance? Are you happy with this? If you do the sum of the liabilities, is it the same with the sum of assets, or at least lower than the sum of assets, then it would be golden. But we need also some privacy.
00:32:21.202 - 00:32:24.514, Speaker B: We cannot reveal people's balances.
00:32:24.642 - 00:32:25.138, Speaker A: Yeah.
00:32:25.244 - 00:33:23.342, Speaker B: And this is where the problem starts. Let's assume we finish with proof of assets. We understand the problems there. Let's go to the liabilities now on the liabilities part. How do you ensure that the company is adding the balances of its user, the liabilities, to their customers correctly? And I'm going to talk about attacks. Now, what zero knowledge proofs can do, and all of this stuff, plain Merkel trees might not suffice, because if you have a merkel tree, in theory, where you're going up to the root, you can read your neighboring leaf, right? You can read the balance from your neighboring leaf to do the addition and go up and up and tap and tap. So in the original mechanism, where our balances were just leaves of the trees, and then you just go up its level, you know your neighbor, and you are learning some value that someone in the network has, and you might be unlucky or lucky to be next to Mark Zuckerberg, for example.
00:33:23.342 - 00:33:40.610, Speaker B: And you can see someone with $10 million in bitcoin why you should know as an individual what someone else is owning as liabilities to this particular exchange. So we had to hide this information. Okay, simple merkel trees do not work. And here is where zero knowledge proof is coming.
00:33:40.680 - 00:33:47.490, Speaker A: So it's more for the privacy here that you're using ZKP so that you can create this proof of liability without revealing everyone's account.
00:33:47.560 - 00:34:20.746, Speaker B: Exactly. Okay, well, this was one of the first reasons that it was proposed, but obviously you can also use that KP for compression. But let's assume this is not a problem. Now, compression is not a problem here. And then what you need for zero knowledge proofs, okay, I can build a zero knowledge proof scheme that I take the Merkel tree, and what I do is I blind the balances, and then I use homomorphic encryption up to the root. So you know this is encrypted of something, and your neighbor has another encrypted of something. But if I add them, I know I have the encryption of these two values.
00:34:20.746 - 00:35:07.210, Speaker B: I know one of them, but I know the correctness of the operation. And then you can go up to the root and you know that the correct operation has happened. So here is one application of zero knowledge proofs, and obviously, because we are talking about blinded values now, apart from the homomorphic encryption, you also need zero knowledge proofs to ensure that there is no overflow. So there is this called range proofs. You need to ensure that the balance will not get up to some very big amount. And then because we have groups in cryptography, right, this will go back to zero and 1234 again, like starting from the beginning, you need zero knowledge proofs to prove that the range of the addition of these homomorphic operations is correct, is not overflowing.
00:35:07.290 - 00:35:30.310, Speaker A: Got it. Just a quick question on the fhe that you're talking about. Here, since it's just simple addition, is that something that current fhe systems can handle already? Because I know that more complicated computation, just generally, fhe isn't like a fully developed space. Okay, you say already today you can use the fhe that exists to do a scheme like this.
00:35:30.380 - 00:35:59.006, Speaker B: Yes. And you don't need fhe in practice. Right. Even partial homomorphic encryption works, because you just need addition. Fhe is addition and multiplication. Here you don't need multiplication, you need only addition, which means that with very simple el gamal encryption, which is like additive, is adding the exponents, which are encrypted works. And this is one of the systems that we proposed, originally proposed in the provisions paper of Dan Bone, Benedict de Boons and Jeremy Clark and all of these guys.
00:35:59.006 - 00:36:23.558, Speaker B: And then we said, okay, they're proposing this. They didn't have a Merkel tree structure back then. For them, it was a flat structure. But we said, okay, we cannot publish billions of information on chain. Let's do the mercalized option. And what we did is very plain Pedersen commitments. Not fully homomorphic encryption, just homomorphic encryption, just addition and arrange proofs on top of them.
00:36:23.558 - 00:36:27.846, Speaker B: And now you can go up to the root and, you know, all of the operations were correct.
00:36:27.948 - 00:36:33.190, Speaker A: So, was this both for proof of assets and proof of liability, or was this only for proof of liability?
00:36:33.350 - 00:37:10.834, Speaker B: The Merkel tree approach is usually for proofs of liabilities. And I will explain why we need Merkel trees there. There is a reason I didn't finish yet with the proof of liabilities. The fact that, you know, you have a construction that in a zero knowledge proof way, is adding the balances correctly up to some root is not enough. Why is not enough? And now we'll explain about some new findings we had in the previous, this year, actually financial crypto conference, that we revealed that all of the proof of liabilities that at the moment, most of the major exchanges, those who support it, offer, they have vulnerabilities.
00:37:10.962 - 00:37:27.180, Speaker A: Okay, so here you're talking about like, actual uses of this. So this proposal, this idea of utilized proof of. So it's already being used. It's being used by these exchanges. But you found a vulnerability in that model. Four vulnerabilities, four vulnerabilities in that model.
00:37:27.870 - 00:38:06.502, Speaker B: And I will explain what I mean here. Okay, let's assume that you had a way to do the addition, right? We explained zero knowledge proofs. We explained Merkel trees. The first one is the original proposal from 20, 14, 15 from Maxwell had a small issue where instead of committing to the addition of the two values, you can play games like breaking a bit, the addition property, and you actually commit to the maximum of the two values. So if we had five and five, I could say that the sum is five. So you can hide balances up to the root. And unfortunately, well, this is public information now.
00:38:06.502 - 00:38:15.850, Speaker B: For example, all of the audits that until 2018, 2019, Deloitte had were using this algorithm, which was vulnerable.
00:38:16.190 - 00:38:22.190, Speaker A: Was this a bug? Was this a mistake? Why were they only taking the biggest one?
00:38:22.340 - 00:38:52.390, Speaker B: That's the best question I wanted to hear. So the vulnerability was actually published even before we find it. The problem is, people didn't realize what they found. And then, because I was at Facebook, I had all of the research supervision of what's happening in the space. I said, okay, let's see if this vulnerability actually applies today in the exchanges. And then I realized that they are doing it even with one of them. One of the big four auditors had an emergency when we reported it.
00:38:52.390 - 00:39:10.098, Speaker B: I'm not kidding. They literally called me that we're going to have a Friday meeting. I don't remember the day. And let's see. Because, Costas, I can assure to you, we didn't know there was a bug. They didn't know, Anna. They didn't know that the algorithm they were using had the bug.
00:39:10.214 - 00:39:11.598, Speaker A: Oh, that's bad.
00:39:11.684 - 00:39:36.766, Speaker B: What was happening is I personally believe that the auditors didn't know about this vulnerability. They didn't do it on purpose. I have a few evidences that the reason for doing this is because, first, the original algorithm with the Merkel trees was not published as a cryptography paper. It was published in some threads and in some forums, and people never had the ability actually to do a proper security proof.
00:39:36.878 - 00:39:37.490, Speaker A: Got it.
00:39:37.560 - 00:40:02.074, Speaker B: Then there was a team. I don't remember the names of the authors, that on 2018, they said, okay, the Merkel. Teresa summation is not correct. Right? They can actually play games here and prove different balances by committing to the max instead of the sum. But nobody paid attention. Probably the conference that was published wasn't. I don't remember which conference.
00:40:02.074 - 00:40:22.046, Speaker B: Yes, maybe it wasn't crypto. It wasn't eurocrypt. It wasn't like CCS zero knowledge summit. No, it wasn't. I think the title is called breaking the binding or something. But anyway, nobody paid attention. You know, the auditors also do not have cryptographers.
00:40:22.046 - 00:40:45.478, Speaker B: I explained at the very beginning that even big companies like Facebook, they didn't have unlimited cryptographers. Right. Even in university departments. You could find more cryptographers than at Facebook at the very beginning. Or in an auditor who is an expert in cryptography, would join an auditor for years and have a big research team. It's very difficult. Even blockchain teams sometimes struggle to find good cryptographers.
00:40:45.478 - 00:41:02.078, Speaker B: So I believe they just got what they found in the forum and they just applied it. And that's why nobody could figure out this is actually exploited. Can be exploited. This is the correct wording. Because I think, at least in the Deloitte case, it wasn't exploited. They just didn't know.
00:41:02.164 - 00:41:04.414, Speaker A: This was one vulnerability. But were there others?
00:41:04.532 - 00:41:27.670, Speaker B: Yes, this was one. The Merkel tree summation was wrong. The others are, okay, what do you do with the proof of liabilities? You have the Merkel tree, right? And then you need the people to check their inclusion to this Merkel tree. If nobody checks, you are an exchange, and you will say, my liabilities are zero. And then Anna and Costas never check if their balances are.
00:41:27.820 - 00:41:28.934, Speaker A: Ah, yeah. Okay.
00:41:29.052 - 00:41:42.442, Speaker B: Right. So you need interaction. Right. Proof of liabilities cannot just be proven by just a commitment. You need people to actually check that my balance was there. Otherwise, nobody knows if the balance that you are reporting is the correct one.
00:41:42.496 - 00:41:51.902, Speaker A: And yet you want to keep everything private. So you can't have some other person checking these balances. You want it to be the actual owner of the account, I guess.
00:41:51.956 - 00:42:00.158, Speaker B: Exactly. And what's happening is there are two options. Like, I think Kraken is using one of them. So the auditor might have access to the balances.
00:42:00.254 - 00:42:00.802, Speaker A: Okay.
00:42:00.936 - 00:42:21.170, Speaker B: Right. Let's assume that not everyone in the world has access, but the auditor might have access. I'm not saying that this is the best application. I wouldn't do it just this. I would try to hide even from the auditor, sometimes from the solvency auditor, sometimes the individual balances. But let's assume this is tolerable for now. The auditor goes there, and in the system, they check some balances.
00:42:21.170 - 00:42:52.782, Speaker B: How do they know if these balances are real? If you don't ask the person who has the money, whose money is belonging to them, you don't know. Right. You need people. And what auditors usually do, they do random sampling. They literally call people, hey, is it you with like, $3,000 in FTX? And then I don't know how the sampling is happening. What I realized after talking to some auditors is they also create their own accounts to the exchanges. The exchange doesn't know that these accounts belong to the auditor.
00:42:52.782 - 00:42:58.382, Speaker B: So they can definitely do random sampling between them, right? Between their own employees.
00:42:58.526 - 00:42:59.266, Speaker A: Okay.
00:42:59.448 - 00:43:29.738, Speaker B: But again, this is not enough. And to tell you the truth, I was never audited in the past. No one of my friends was audited. We don't know if random sampling works from auditors, like by phone call. What you can do, however, is you can just publish this Merkel route, this commitment on the total balance of liabilities. And then users can request a proof of inclusion. And then you check if your balance at that day, assuming you remember, your balance is included in the total liability proof.
00:43:29.738 - 00:43:56.486, Speaker B: And then we identified in the paper that if you have, for example, 1 million clients, for the company to cheat in 100 accounts, like to not include 100 people on purpose. If 5% of the population checks, they will be caught. If they try to cheat, they will be caught. Obviously, you can cheat by omitting one account if you know this user will never check. Right. This is obvious. However, we have to talk with asymptotics now.
00:43:56.486 - 00:44:24.030, Speaker B: Let's assume that this is not a real attack. The real attack is if they are doing this continuously and they're actually removing many balances from the mercantry. If they try to remove many balances. We did the math and we realized that even with a small portion of people checking the inclusion proof, it would suffice. Right? It would be okay. It would be okay. So this percentage, to tell you the truth, varies between depending on the population, from two to 5%.
00:44:24.030 - 00:45:06.730, Speaker B: I think if one out of 20 people was checking and the exchange doesn't know who is checking, because this is a very important information, and I will explain why this is important. And what is the third attack that we found? As I explained before, people need to do random sampling somehow. They should check their proof of inclusion. How? You just see a merkel tree, who is giving you the inclusion proof, someone needs to provide to you. But what's happening is these websites, sometimes they have their own website and they say, here is the mercury root. Anna sees this mercury root, Costa sees this mercury root. But we don't know if it's the real mercury root, because if you refresh, I might see a different mercury root.
00:45:06.730 - 00:45:09.498, Speaker B: And if I refresh, I see a different mercury root.
00:45:09.594 - 00:45:15.822, Speaker A: So this is like a web two website where you're just like, checking. Exactly some. And that could be hacked, is what you're saying?
00:45:15.876 - 00:45:18.370, Speaker B: Exactly. It's a web two vulnerability now.
00:45:18.440 - 00:45:22.382, Speaker A: Yeah. Okay. That's the third one then. This is the third vulnerability.
00:45:22.446 - 00:45:53.350, Speaker B: Let's assume this is the second for a while and I will explain what's the third one. So the second one is a web two vulnerability because we're not committing to a public bulletin board on the potential balance, people don't know if they're checking against the correct mercury route. Right. And what is the public bulletin board? Probably you have to put it on Twitter, on Facebook, on a blockchain. You need the public bulletin board. The reality is the world doesn't have an approved public bulletin board today. We only say that it's blockchains, but people are not familiar with blockchains.
00:45:53.350 - 00:46:25.554, Speaker B: How can I even check if I don't have a light client, if I don't run a full node? That this was literally something published on a public bulletin board. So I think we have to improve there, create some tools for the community that can be used across the exchanges, that people very quickly can check their balances and they know that they check against the correct proof of liabilities. Right. The correct route. That's the second. As I explained before, there is a third one. When you join an FTX or any exchange website, you are assigned an identity, right? Some identifier.
00:46:25.554 - 00:46:34.346, Speaker B: You have a user id. How do I know that FTX is giving me the same user id with you or not? Or they're giving me, they're assigning me.
00:46:34.368 - 00:46:37.722, Speaker A: Like, if it's independent, you don't know it. Somebody else. Okay?
00:46:37.776 - 00:47:11.142, Speaker B: You don't know it. Which means that if there are people in their system that they happen to have the same balance. And sometimes, you know, we have rounded numbers, you will have five bitcoins and not 4.99. It is possible this is a theft attack to actually send the same inclusion proof to two different people. Both of them will check. They will say, my $5 are there, but this $5 is reused between different users now, right? So you cannot sit on everything, but you can sit on equal balances now.
00:47:11.276 - 00:47:14.274, Speaker A: So this is duplication of accounts when there's an equal balance.
00:47:14.322 - 00:47:37.262, Speaker B: Yes. And the proposal here is you should use something that is either picked by the user, like the user id. I pick it. Or you might use my phone number or my email as user identifier rather than a random user id. Why they're using user ids? They try to solve the privacy problem. No, I cannot reveal your email even to the auditor. I use a user id.
00:47:37.262 - 00:47:46.754, Speaker B: However, now you need the proof that this user id is unique, right? Interesting. Or we need some KYC provider that will give you a token on.
00:47:46.872 - 00:47:47.710, Speaker A: That's unique.
00:47:47.790 - 00:48:04.082, Speaker B: Yes, that is unique. It's your email. But there is a token over your email. So this is the third one. And there is another one that surprisingly was. I was super excited when I found it. A few implementations are truncating the hases.
00:48:04.082 - 00:48:15.190, Speaker B: So instead of using all of the output of the hash while you're going up to the tree, like the 256 bits, they truncated this to 64 bits. Okay, now it's brute forceable.
00:48:15.270 - 00:48:24.842, Speaker A: Oh, really? So here the privacy could be leaked. Is that correct? Or could you still, like, when you say brute force, what are you, brute forcing?
00:48:24.986 - 00:48:31.230, Speaker B: I can find two balances, different balances that they happen to go to the same hash.
00:48:31.810 - 00:48:36.466, Speaker A: I see. Okay. Why would they truncate it though? Why did they do that?
00:48:36.488 - 00:49:12.374, Speaker B: I think they did it for performance reasons and it was a huge mistake. And yeah, I even found a website. I think this website is not like live now. It was Bhex. I don't remember where this exchange was from, but if you search on Google for broken proofs of solvency, you will find our full report. We have names like BhEx there, Deloitte, Coinfloor, Kraken, Bitmex, anything from Armanino. There are so many different names, and one of them was using sort hashis completely everywhere.
00:49:12.374 - 00:49:21.258, Speaker B: I could literally create a fake proof of liabilities for everything. So, yes, these are the four attacks that you can find at the moment on proofs of liabilities.
00:49:21.434 - 00:49:44.386, Speaker A: When you talk about these proofs, is this a situation where the proofs are being created and then there's an outcome and that's sort of the audit basically. I was kind of unclear even going back to the first one, the bug, like who's running this? Is it. The exchange runs these proofs, and then the auditors would check this to make sure that it's accurate.
00:49:44.578 - 00:50:21.870, Speaker B: Yes. So the exchange is publishing their proof of liabilities, is computing their proof of liabilities and publishing the root of the proof of liabilities or whatever system they are using and their proof of assets. Obviously it can be the auditor as well, along with the exchange, and then the user element comes right afterwards. So after I see the commitment on the proofs, I request the liability inclusion, which means that you have an exchange. In theory, let's assume that there wasn't an auditor. What you could do is you can use Oracle's to give you some evidence of proof of assets. You can produce your own proof of liabilities, no auditors involved.
00:50:21.870 - 00:50:45.642, Speaker B: And then you publish this to a public bulletin board. The users are coming and checking. And we said that if a significant amount of people check, the probability that you'd see it on many balances is very small. Let's assume that we can tolerate this. No auditor is involved. People are actually doing their own checks by their mobile phones or the website of the company. The proof of assets has been proved by systems like the chain link.
00:50:45.642 - 00:51:12.290, Speaker B: Proof of asset, proof of reserves, they call it. I would say that the whole industry should change the name to tell you the truth. We should use proof of solvency and proof liabilities and proof of assets. Proof of reserves is very confusing. And then with this proof of asset system and the proof liabilities, no auditor is involved. Computed by the exchange, the users can audit it in a decentralized fashion. This is how it's working.
00:51:12.360 - 00:51:16.130, Speaker A: And this is the ideal scenario. This is what you think should be.
00:51:16.200 - 00:51:52.240, Speaker B: This is the ideal. If we don't want to include auditors, I will give you a very interesting situation. I came across so back in 2019 or 20, I think it was cointelegraph that they realized that Facebook is working on proof of solvency. And I can tell you for sure, I think David Marcus even tweeted that the other day. I don't think there was any other team in the world that they did all of the analysis that we did on proof of solvency. We have at least four reputable papers in the space and we knew exactly where to focus. Right? Literally, the team was very experienced on this.
00:51:52.240 - 00:52:45.998, Speaker B: And something that I also had as a problem is when this article was published by Cointelegraph, some people, because you know what it reminds you the proof of solvency thing, it reminds you the infamous Enron scandal, right? And in all of the cryptographic papers, usually we use this in some sentence, oh, there was Enron, and it was like Arthur Anderson, like the audit company. And people said they might have a collusion between the auditor and the company. And that's why we want, ideally, to avoid the inclusion of the auditors. But I don't think in real life this is possible. I think we need both. We need to use the proof of solvency as extra system on top of what the auditors are doing. So users have the ability now to audit the system by themselves, even if there is no auditor, or if the.
00:52:46.004 - 00:53:06.178, Speaker A: Auditor is corrupted, to just repeat what you have in mind here. So it is like a better proof of solvency than because you had found problems with the previous one. But obviously with all of those fixed. Yes, you'd want, like a better system. But are you still using the same kind of thing with fhe and the merklized tree? Is it still the same construction? But just like without those bugs.
00:53:06.274 - 00:53:26.426, Speaker B: This is the same construction, but we added a few elements there to make it more private and actually to add some extra privacy features. There is another problem with merkel trees. If you have a merkel tree, someone will know your number of clients just by getting information about the height of the merkel tree.
00:53:26.458 - 00:53:27.280, Speaker A: Oh, interesting.
00:53:28.450 - 00:53:53.382, Speaker B: If I know you are like two in the power of ten. Like ten layers. I know the maximum users is two in the power of ten. But is this an information that FTX and the other. Now you're trying to protect the other organization, right? Because sometimes you don't want to reveal your client base numbers and you need to provide all of these evidences, but also do not expose your company's success. It's very tricky. Right.
00:53:53.382 - 00:54:17.962, Speaker B: Imagine if for FTX, you knew that this month they didn't acquire many clients because you can see it from the number of users in the proof of solvency. And then you can go and sort their token because they're not performing well business wise. This information shouldn't be known. And what we did is we replaced the merkel tree. One of the uses that is easy to explain here with sparse merkle trees.
00:54:18.026 - 00:54:18.558, Speaker A: Oh, yeah.
00:54:18.644 - 00:54:50.414, Speaker B: So you can add zero nodes in the trees, and now you can extend the number of users to whatever you want. People do not know, by checking the proofs how many users exist and in reality, how many leaves, how many layers you need. Right. People in the world are 8 billion. You don't need a tree bigger than 8 billion, even if every individual had the tree. So you shouldn't imagine that sparse melted tree would be huge. It would be like an extra two or three layers compared to the standard mercury.
00:54:50.414 - 00:54:53.798, Speaker B: But it offers this extra privacy perspective.
00:54:53.894 - 00:55:14.402, Speaker A: Even the cryptographic solution, though, that you've the fixed one. This is a random question, but does it actually output a total at the end? You're using fhe, it's all private. But when you actually do that last matching, are you seeing a value? Actually, no.
00:55:14.536 - 00:55:42.838, Speaker B: Okay, you can hide the value. Why? You can hide it because obviously it's an outcome of some homomorphic encryption addition. And then you eventually have a Pedersen commitment, or let's assume an elgamal encryption of something. What you do is you have the proof of assets, and by using systems similar regarding the output, also a Pederson commitment, you can have a zero knowledge proof that my assets are less. Sorry. Are more than the liabilities.
00:55:42.934 - 00:55:51.900, Speaker A: But that's it. That's the only proof. It just says it's solvent, not it has this kind of percentage solvency or something.
00:55:52.750 - 00:56:10.162, Speaker B: You can do this as well. We have zero knowledge proofs here, right? We have zero knowledge proofs here. And sometimes you want to prove a surplus or you want to prove like some fraction, but this fraction is very close to 100%. Honestly, when I talked to the big four, some of the big four auditors, their tolerance level was 5%.
00:56:10.296 - 00:56:10.882, Speaker A: Okay.
00:56:11.016 - 00:56:35.446, Speaker B: Because they know some people might not check. And there is another issue that I didn't mention. What will happen in practice, right. I managed to have access to all of these big systems because I did the experiments for Libra and Facebook. There was another small issue, which is even synchronization internally. If you are an exchange, you need to actually get a snapshot of your database, but some transactions are in flight.
00:56:35.558 - 00:56:36.314, Speaker A: Yeah.
00:56:36.512 - 00:57:04.322, Speaker B: What do you do with these things? Right. You need to ensure that even if I don't manage to have 100% accuracy, I can tolerate up to a point, if continuously, because we were talking about continuous audits previously, right? If you receive this at a continuous level, it seems that something is wrong with your solvency. But in practice, you might need to have some tolerance, like a very small percentage, just to avoid all of the synchronization issues.
00:57:04.456 - 00:57:11.518, Speaker A: Why did Facebook meta. Why did you need this? Why was this topic the most relevant one?
00:57:11.544 - 00:57:12.022, Speaker B: Why?
00:57:12.156 - 00:57:12.550, Speaker A: Yeah.
00:57:12.620 - 00:58:04.466, Speaker B: Because Libra would be the most audited and regulated blockchain in the mean. What is this question? Right. I mean, it's very clear why. And I can tell you, and this is a very interesting story, when I was about to leave Facebook, like a few months before this happens, I remember talking to the economists of Libra, Christian Catalini, and now Alonso, who is our head of economic in Mistan Labs today, they even asked me, why don't you create a startup? And I literally had offers to create a startup about profosolvency. But obviously I was doing this at Facebook back then, because the order from David Marcus and all of the leadership is, we need to have the best system for regulation and audits. I'm not kidding here. Facebook spent a lot of money to improve on the community tools that we have today for proof of solvency.
00:58:04.466 - 00:58:25.566, Speaker B: We should credit Facebook for this, right? Because I don't know about bad reputation and other things that we mentioned at the very beginning, but internally I could say to you with confidence that the work that was published at Facebook was genuine and improved the community offerings that we have today for all of these things. Yeah.
00:58:25.588 - 00:58:39.570, Speaker A: I mean, it was preemptive too, right? Because it was this sense, like Libra was already going to be scrutinized and it had to be perfect. It had to be super auditable. Especially it had this basket of different currencies. Reserves were really important.
00:58:39.720 - 00:58:40.226, Speaker B: Exactly.
00:58:40.328 - 00:58:41.458, Speaker A: Okay, makes sense.
00:58:41.544 - 00:59:03.178, Speaker B: Exactly. And I mean for Facebook it was super important. I was thinking that if we ever launched, we would have the better system regarding tools for auditors and regulators. Yeah, well, this never happened, but obviously we're still here. I know there is like a community effort, not only me, right? I think it's Ellie from Starquare. There are many things like Dahlia. Dahlia also supported me a lot.
00:59:03.178 - 00:59:22.334, Speaker B: I would mention this on proof of liabilities. She's now at Chainlink. But I think we should have an RFC proposal for standardizing proof of solvency. If we don't do this, we will come up again into the, come back to these problems that I mentioned, the four attacks and all of these things.
00:59:22.372 - 00:59:24.302, Speaker A: Right? When you say RFC, what is this.
00:59:24.356 - 00:59:49.438, Speaker B: Request for request for call? I mean we need like the ERCs, as we say for Ethereum. We need something as a community standard, a community proposal. To tell you the truth, I started this at zero knowledge proofs. And if you see one of my papers is even mentioning proposed standard. Since then we made many additions. I also found the attacks. I also talked to the auditors, I talked to some exchanges.
00:59:49.438 - 01:00:16.990, Speaker B: Now I have more information. And because now the topic is super relevant, I think many other cryptographers should help. We should form a small consortium, like a small committee and try to define some rules. It's not a perfect solution, as I explained, because of synchronization and some other issues that you might face. However, without this we have nothing. At least let's have a tool that can make the work of potential fraud or something more difficult to be performed.
01:00:17.070 - 01:00:28.726, Speaker A: And do you see this? Once this standard say it happens, it needs to be implemented by all exchanges across the board in a way to avoid that issue of like a short term loan or.
01:00:28.828 - 01:01:19.158, Speaker B: I wish, I don't know if they're going to do it. I wish they will do it. And I know even Binance's CEO mentioned the other day that we need proofs of reserves. I totally believe that we should set something in place now, make proposals. I don't care if we're going to have options, but why? We're very close to a working solution now. Zero knowledge proof might improve on top of the mercurialization as well, because we talk about merkle trees, but there are other ways to prove membership as well, right? And I can see, with the recursive zero knowledge proofs and many other things, we can even make a better proposal that works for both proof of assets, both proof of liabilities, and actually proving that the assets surpass the liabilities, or at least prove the tolerance. Right? Prove how much of a fraction reserve you have.
01:01:19.158 - 01:01:32.802, Speaker B: Is it 80%? Is it 90%? Because sometimes we're talking about solvency, but you don't know exactly today how much money SBF needs for the solvency of FTX, right? We believe it's some billions, but how many billions?
01:01:32.866 - 01:01:33.238, Speaker A: Yeah.
01:01:33.324 - 01:02:12.150, Speaker B: And what's the percentage of billions of these billions compared to the total valuation of the company or the liabilities? I think we can do it. It just needs extra, I don't know, motivation, probably from regulators, to tell you the truth, Mr. And sui, the protocol that we're building, the crypto primitives we're supporting, is to enable this if it's ever required. And, for example, supporting zero knowledge proof verifiers on top of the chain, supporting intent signing. I should know if you are signing for a transaction or for a proof of possession, or for a proof of assets, or for all of this stuff.
01:02:12.220 - 01:02:30.438, Speaker A: This brings up a little extra question, which is, you'd have to do this for each currency, wouldn't you? Each blockchain would need to run something like this, because when you talk about accounts and being on chain, it's not that it's joined across, like bitcoin versus ethereum even. Wouldn't you have to run it twice?
01:02:30.614 - 01:03:06.262, Speaker B: It's a good question regarding how do you do the summation? Right. Can you have one user having just one tree for all of their assets? This is a very difficult problem because there is an exchange rate between them, which is defined by different exchanges. Might have a different exchange rate. It's not easy to do this at the moment. What we have is individual mercury per asset. I see how you can do it with the help of auditor or some oracles, probably, that can define a particular exchange rate. But you should imagine there might be a fluctuation now, right? 1% or, like, 0.5%.
01:03:06.262 - 01:03:25.274, Speaker B: I don't think we care a lot about this stuff, right? This is happening in the real world. It's fine if continuously. However, you see all of these glitches, you have to take action, but, yeah, we can make it one. Most of the solutions I've seen on proofs of liabilities, they're using different proofs per different currency.
01:03:25.402 - 01:03:25.886, Speaker A: Okay.
01:03:25.988 - 01:03:27.886, Speaker B: Yeah, it's a good call.
01:03:27.988 - 01:03:31.726, Speaker A: Yeah, that would be more like you want some consistency though, I guess.
01:03:31.828 - 01:03:52.594, Speaker B: Yes. There is another thing. Okay. It's a good pass, actually, that you're giving me here. There is another small problem that I also realize that is happening. The small problem is pending transactions and in flight transactions and time locked transactions. And also assets that are locked in the l two s or some payment channels.
01:03:52.594 - 01:04:05.462, Speaker B: Right. What do you do with this? Bridges or bridges, right. I think this is the reason. What I'm saying, this is the reason. We're in a very good state now. We have some primitives, some tools. They seem to work for particular cases.
01:04:05.462 - 01:04:13.418, Speaker B: But we still need extra innovation on how we can combine all of these puzzle pieces into one solid solution.
01:04:13.514 - 01:04:14.510, Speaker A: Fascinating.
01:04:15.010 - 01:04:20.254, Speaker B: It's not easy. You might even have locked in An l two more than the money that you have in l one.
01:04:20.452 - 01:04:21.054, Speaker A: True.
01:04:21.172 - 01:04:56.940, Speaker B: Right. Which means that you need support on vl two as well to prove ownership there. And even there, there might be situation with payment channels and fraud proofs where you don't know if there is no expiration of the fraud proof period like of the challenging period of the seven days. How do you do this? Even if I give you a snapshot, you don't know if this is the current true. And especially on payment channels, the collusion thing might be super easy. Because there I might have given you the money. You might have already sent me the transaction to return me the money back.
01:04:56.940 - 01:05:02.590, Speaker B: It's literally a loan that is secure. It will happen. I mean, you cannot escape.
01:05:03.250 - 01:05:24.050, Speaker A: I can already see a few edge cases as well. Things like locked assets, burned assets, like things where you do have them, but you can't do anything with them. So they're not really assets you could ever have. Liquid, I guess you have vested, but then it's still an asset. But yeah, there's a lot of edge cases here that you'd need to account for.
01:05:24.200 - 01:05:49.050, Speaker B: There are even more, right? You might participate in the lottery. You know that you won, but the assets are held by the smart contract. The smart contract didn't show the result yet. Even if you know that you will win, for example, you need the challenging period to finish. Until you claim your winnings, you cannot provide the proof, right? It's very difficult. Yeah. We have a lot of work to do, Anna.
01:05:49.050 - 01:06:20.694, Speaker B: That's the reality. And when people say that this will solve everything, it's not right. It's good to have. It's by far better than having nothing. But we need to explore all of these particular edge cases, as you mentioned. Imagine we're talking for 1 hour and you already found an edge case, right? That's the ugly reality. But at the same time, there is a good positive outcomes from the research side, and I don't see why we should not standardize something at least makes sense.
01:06:20.812 - 01:06:29.722, Speaker A: Costas, we are almost at time, but I do want to hear a little bit more about what is going on on the ZKPE front at Miston today.
01:06:29.856 - 01:07:41.210, Speaker B: So the nice news, the good news is already on SUI. We have support for bulletproofs and you will see, actually there is a pr, literally now that is getting reviewed, we're going to have growth 16 as well. We're going to have verifiers on top of SUI. There is a benefit on SUI compared to all of the other blockchains, because for some transaction types you can even avoid full consensus, which means that we can have each transaction actually having an accompanying zero knowledge proof that will run in an independent and parallel like fashion. And this is how we can enable, I don't know, using KYC per transaction. You can do private transaction, confidential transaction without waiting for a full consensus and getting to a block, or even if a huge size of a transaction will affect the block size. The fact that we can parallelize things allows us to have an extra bit of startups that I believe will join Sui just because it's easier with us to bump the network, bombardize the network with zero knowledge proof per transaction without creating all of these block restrictions.
01:07:41.290 - 01:07:44.930, Speaker A: So does this sort of open up new use cases where you'd need something like that?
01:07:45.000 - 01:08:45.886, Speaker B: I think it's happening already. I think we received some partnership requests where they can see why they have a small benefit to actually do on suite. So what will happen is we have this individual team now I have Francois Garilo, and actually Francois had the presentation like the last few days on the zero knowledge proof conference. We presented our findings. We even managed to have a verifier on growth 16 that it combines the arcworks framework with BLST, and we managed to have double the efficiency on the verification. Imagine we're not focusing as a blockchain on the proving, because for us, verification is what matters. And even if you can get like double the efficiency, it means that you can accept double the number of proofs, right? So we had some improvements on how we're doing, like the pairing computations and parallelization there, and using the correct combination of existing implementations.
01:08:45.886 - 01:09:10.898, Speaker B: And I think on the verification side, we have a very, very fast growth 16 verifier now on suite. Cool. And obviously you don't stop there, right? Imagine. I'm also one of the co authors of Winterfell. I know Winterfell is used in Polygon. Bobbin is a close friend. We work together like in so many different topics and we're even having plans to augment Winderfell.
01:09:10.898 - 01:09:41.346, Speaker B: Right. Even if we're working on individual, like different companies, research is different, right? People in research are friends. And for like, this is how I see Bobint here. And I know we've discussed on a lot of improvements on top of Winderfell. I cannot guarantee when we're going to have stark verification on suite, but I can tell you for sure that we already have some work in progress on having optimizations on top of Winterfell.
01:09:41.458 - 01:09:42.120, Speaker A: Interesting.
01:09:42.490 - 01:10:06.602, Speaker B: And this will be open sourced. Everything in mistem is open sourced. And generally we believe that we're going to have a very rich API. And personally, because of my personal interest, and I see the interest from many providers and partners, I don't see how a new blockchain will survive, especially if regulation comes faster than we expected without having support for these primitives at the core layer.
01:10:06.666 - 01:10:06.990, Speaker A: Wow.
01:10:07.060 - 01:10:23.762, Speaker B: We need it. We need it. So yes, you will see a lot of things being published from our team in the next week. You will also see an extra blog post. We're going to make how we made BLS aggregation faster, slightly faster, but faster than what exists out there.
01:10:23.816 - 01:10:34.342, Speaker A: Nice. I'll be sure to include it in the next Ck mesh. I don't know if you know about this, my monthly newsletter where I collect a lot of stuff. Be sure to send that to me because I sometimes miss things. But yeah, send them my way.
01:10:34.476 - 01:11:06.030, Speaker B: I will. Yeah. Thank you so much for everything here and I'm super happy to help and give you some progress reports on how the solvency sector is actually getting either promoted or if there is a coalition of all of the exchanges and the researchers to do something, because when binance says we need proof of reserves, I think they need to do a bit more research. What, which algorithm, how we're going to use it. If you're going to provide privacy, these rules are not enlisted properly.
01:11:07.090 - 01:11:24.178, Speaker A: Cool. Thank you so much, Costas, for coming on and sharing with us proof of solvency, which we are now not calling proof of reserve anymore. Proof of solvency. I'm going to go with it. And yeah, how kind of the history of this concept and now how we might have a better way to build those into systems.
01:11:24.274 - 01:11:45.054, Speaker B: Yes, and I'm super happy to help anyone in the industry, even if we're not partners. Not only myself. I believe Bobbin Fazwell and other people who worked here, Cornell University, people under Arijewels, GMU visa, they are all eager to help on providing extra input if they want to build proof of solvency for their exchange for free.
01:11:45.172 - 01:11:47.054, Speaker A: Very cool. So thanks again.
01:11:47.172 - 01:11:54.962, Speaker B: Thank you, Anna, and I really appreciate even your knowledge. I'm surprised now that you managed to find the nets case in half an hour.
01:11:55.016 - 01:11:57.940, Speaker A: Wow, really? That was a new one. Oh, cool.
01:12:00.150 - 01:12:14.934, Speaker B: It's not that it's necessarily new. It's something that I didn't expect people will realize very quickly. Right. But you did, right? You understand now why we're not using zero knowledge. Sorry. Proof of solvency everywhere because there are edge cases. Cool.
01:12:14.972 - 01:12:23.490, Speaker A: Well, thanks again for sharing that with us. I want to say a big thank you to the zero Knowledge podcast team, Tanya, Rachel and Henrik, and to our listeners. Thanks for listening.
