00:00:00.680 - 00:00:35.044, Speaker A: Hey folks, the last time we were looking at the instructions file and we took a look at what are the different types of instructions that this particular program will process. One is the init escrow and the other is the exchange. Now let's see how these instructions are actually getting processed, right? So if you go to entry point, you see that there is process instructions, which is called calling the process function within processor. So let's go to processor and look at what is happening here.
00:00:35.164 - 00:00:40.100, Speaker B: Right now, as per usual, we are.
00:00:40.132 - 00:01:50.972, Speaker A: Using the Solana program create and bringing in certain parameters like the account info, entry point program, program error program pack, public key, and syspacial. Now we are also going to bring the SPL token create from where we are going to take the account as the token account, wherever we need to refer to token account, that's where we can use this variable. And of course, we start with a structure processor. Before that we have a couple of crates like the error, the instruction and the stick. And what in all are we taking from these files? Right, from the error file we are taking the escrow error, this one which defines the different types of errors, like invalid instruction, not rent, exempt, expected amount, mismatch, amount, overflow, etc. Then from the entry point, I don't believe we are taking anything. Let's see, from error, from instruction, we are taking the escrow instruction, which is going to be our main is, you can see here the main implementation which has the functions in it.
00:01:50.972 - 00:01:56.044, Speaker A: And we are also taking from the state, the state screw.
00:01:56.204 - 00:01:56.904, Speaker C: Right.
00:01:57.884 - 00:02:33.040, Speaker A: Now that we have all the sort of dependencies in place, let's get started with what this processor is actually doing. This processor. So the struct processor has an implementation processor under which we have lot of functions. The first one being process. This is the one that is being called from the entry point. And this one is going to process the instructions. So at the first point what it does is it unpacks the instruction data right into the escrow instruction format.
00:02:33.040 - 00:02:41.760, Speaker A: So what are the two escrow instructions? So if we go to instruction within escrow instruction, we have init escrow and we have exchange.
00:02:41.912 - 00:02:42.512, Speaker C: Right?
00:02:42.648 - 00:03:06.644, Speaker A: So this, this is trying to take the instruction and match it with either init group or exchange. How does it do the matching? It takes match the instruction keyword, sorry, the instruction variable. Then you want to typecast it or you want to pull it from the escrow instruction. So you say init escrow and then the amount.
00:03:07.364 - 00:03:08.060, Speaker C: Right?
00:03:08.212 - 00:03:34.802, Speaker A: So if it is the init escrow, then it says that it's the init escrow instruction. And it calls a function called process the init escrow. With these accounts, the amount and the program id. Now here you can see that we need to create this similar snippet for processing the exchange.
00:03:34.938 - 00:03:35.570, Speaker C: Right?
00:03:35.722 - 00:03:48.334, Speaker A: So let's create the same escrow instruction, but it's called exchange. And this also has an amount.
00:03:48.994 - 00:03:49.734, Speaker C: Right.
00:03:55.594 - 00:04:02.254, Speaker A: Now if we want to print, we say instruction is exchange.
00:04:02.794 - 00:04:03.554, Speaker B: Okay?
00:04:03.674 - 00:04:13.014, Speaker A: And then the function name is going to be process init exchange.
00:04:13.434 - 00:04:14.174, Speaker C: Right?
00:04:14.474 - 00:04:19.774, Speaker A: Of course, this function is already here, so we can even search for it.
00:04:21.874 - 00:04:26.396, Speaker B: All right, editor probably doesn't have, so.
00:04:26.420 - 00:04:28.144, Speaker A: You can see process exchange.
00:04:31.444 - 00:04:32.264, Speaker C: Sorry.
00:04:36.204 - 00:04:37.304, Speaker B: Close this.
00:04:39.604 - 00:05:07.244, Speaker A: Process exchange. It's taking accounts, the amount expected by the taker and program id. So here we have sent the accounts, the amount and the program id, right? So this is one simple piece of code that you need to fill up. Now it's, let's take a look at process init. We can take a look at either of these functions and then just see the workflow, how it's happening.
00:05:07.284 - 00:05:07.864, Speaker B: Right?
00:05:08.364 - 00:05:31.924, Speaker A: So when we enter here again, we, if you remember the hello world program, we create an iterator over the account so we can go through the accounts. Remember that for each of these instructions, it takes a bunch of accounts, which is here in the instruction rs 012345. So this one takes six accounts.
00:05:32.044 - 00:05:32.704, Speaker C: Right?
00:05:33.124 - 00:05:46.984, Speaker A: Now these are the accounts that we will try to unwrap over here in this program. The first one is the initializer, right? So you are getting the account from the iterator. And here we are checking if the initializer is the signer.
00:05:47.064 - 00:05:47.376, Speaker C: Right.
00:05:47.440 - 00:05:58.328, Speaker A: They have to be the signer. Now the next instruction is use the iterator as above and get the account info and store in the variable temp token account.
00:05:58.416 - 00:06:17.604, Speaker B: So I'm going to take this, I'm going to select is equal to next account info. Account info iterator, okay, so I've got that.
00:06:17.724 - 00:06:47.896, Speaker A: And then the next instruction is also to create get the next account. But this is the token to receive, right? So that's the name of that. And here we are checking if the owner token to receive is equal to the SPL token id, right? So is this person, is this the correct token program where we are receiving?
00:06:48.000 - 00:06:48.644, Speaker C: Right.
00:06:49.784 - 00:07:09.584, Speaker A: So that's the check here. And then even the next one where we need to get the iterator, we need to create the variable escrow account. So you can just think of these as, you know, all the accounts that are being sort of fetched from this iterator.
00:07:10.844 - 00:07:14.144, Speaker B: So let me copy this and this is called.
00:07:16.684 - 00:07:17.236, Speaker C: Right?
00:07:17.340 - 00:07:56.592, Speaker A: So one by one you will see all the variables being populated here. We are also pulling up the rent from the account variable. This is where. And then if the this account is rent exempt, you don't have to pay rent. If not, you'll have to pay some rent. And then we are getting the escrow info which is from the, from the escrow account, right, that we picked up here. And now we are going to populate all this escrow information in the escrow info struct, right? So what in all does our escrow info have? Let's go to the state and see.
00:07:56.592 - 00:08:20.124, Speaker A: Is it initialized? What is the initializers public key? What is the temp token account public key. What is the initializer token to receive account public key and expected amount. Right. So these are the things we need to populate. How do we start populating? So escrow underscore info is our struct is initialized.
00:08:22.284 - 00:08:29.184, Speaker B: True escrow info dot.
00:08:30.964 - 00:08:36.516, Speaker A: Initializer public key. So that's the initializer account that we.
00:08:36.540 - 00:08:44.504, Speaker B: Should have picked up, right. Where is the initializer here.
00:08:47.264 - 00:08:48.160, Speaker A: And so on.
00:08:48.232 - 00:08:48.800, Speaker B: Right.
00:08:48.952 - 00:08:52.804, Speaker A: So we already have this piece of code here.
00:08:53.544 - 00:09:08.728, Speaker B: Let's just take it, put it here. Alright.
00:09:08.776 - 00:10:10.080, Speaker A: So these keys are actually coming in as references. So we need to dereference them using this style operator. So all these things we have already taken here, all the accounts, once we have the escrow info, we are going to pack this, right? And we are going to create this PDA. Don't worry about that. The token program as well is there in the account struct account array. So we take that and then we are going to set the instruction that is, we are going to send an instruction that is set authority, right, of this program, token program, the temporary token account and all the parameters that are required for this. And this invoke is actually going to invoke the transaction, right? So in the token program it will have this invoke which is going to, you can see from the program there is invoke.
00:10:10.080 - 00:11:10.458, Speaker A: So we are going to invoke the transaction, right. That this is going to change the owner. Now in the process exchange you can see a similar thing happening where finally in the invoke you will be transferring the funds as well and then writing the different account owners into the accounts, right? So you can see there is a transfer function here that is being called. And in this one there is a set authority function that is being called. So here what we will do is as an exercise, I will comment out some of the code in the second function, that is process init exchange. Process exchange. So, one, and then you can, you can take that, you can try to fill that up as an exercise by looking at what you did in the previous function.
00:11:10.458 - 00:11:29.364, Speaker A: And you can submit that as a final exercise for this particular lesson. So this is largely all the code? This is all the code. In fact, error rs is very small and simple. What I want to do very quickly is actually build this.
00:11:30.024 - 00:11:30.816, Speaker C: Right.
00:11:31.000 - 00:11:32.564, Speaker A: So I want to show you.
00:11:34.704 - 00:11:39.044, Speaker B: Okay, let's see what are the errors.
00:11:42.584 - 00:12:17.934, Speaker A: Okay, so you can see that it's very. The compiler is very simple and straightforward, and it's thrown us some errors. So I'm going to fix this and come back. Okay, awesome. So there were a couple of errors where I had written public key with a capital k, and also in the processor, I made a name mistake. I made it process eight exchange. However, now the build is successful, and it's been completed in 76 x 0.76
00:12:17.934 - 00:12:35.654, Speaker A: seconds. And now you can actually upgrade. I had already deployed it, that's why it's showing me upgrade. But you will get an option to deploy here, wherein you can deploy like this, your contract to the Solana Devnet.
00:12:35.814 - 00:12:36.470, Speaker C: Right.
00:12:36.622 - 00:13:21.826, Speaker A: This is the last process in accessing this contract. So let's do this. I mean, this is the last process in building and deploying a contract. And now you can see in the Solana explorer that your contract is deployed successfully on Solana Devnet. As you go more intermediate and advanced level, you will understand how to interact with this contract, how to test this contract, and how to build further with easier frameworks like anchor and things like that. So that's pretty much it for this session. I'll see you in the next one.
00:13:21.826 - 00:13:22.234, Speaker A: Thank you.
