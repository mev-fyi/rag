00:00:01.000 - 00:00:45.734, Speaker A: Alright, so this is the project that we're going to be using for our event challenge. First thing that you're going to want to do is clone this into your versus code. How to do that is you'll go ahead and click this big green button here and then you'll click this to get your link to the repository. If you're unsure how to go about that in versus code, don't worry because I'll be showing that to you in just a moment. From there, once it's cloned you go ahead and run the series of commands here to get everything set up. First command is going to be NPM I that is going to download all the dependencies that you need and get those set up for you. Once that is finished you'll go ahead and open two more terminals.
00:00:45.734 - 00:01:49.884, Speaker A: You're going to be using those terminals for the hardhat commands we're about to run. In one of those new terminals you go ahead and run NPX hardhat node that is going to spin up a developer network essentially on your local machine. And that's where you deploy your smart contract and that's also how you're going to be able to interact with it as well. And then here once your node is deployed, you go ahead and deploy your smart contract with this, this line here. Once your contract is deployed, going back to your first terminal window, you'll go ahead and run NPX hard hat console that is going to spin up a console that's connected to our hardhat network and that's going to allow us to call the functions in our smart contract and interact with it. Lastly, once the console is spun up, you go ahead and copy and paste this in. What this is going to do is create a way for us to interact with our contract.
00:01:49.884 - 00:02:43.324, Speaker A: If you look here we have our contract name which is bank, and then we're attaching the address where it is deployed which is right here. And again we're attaching all that to this variable here because that's what we're going to be using to call all the contracts functions which you can see here. These are the function calls that we're going to be making in our demo. I've provided them here in case you want to experiment with them a little bit yourself, just to make sure that you have an understanding of the material. And so from there we'll go ahead and go to our versus code so you can see all this in action. So switching to our versus code, the first thing that we'll do is clone this. So git clone, and then we'll just copy paste, paste that link that we got from the repo.
00:02:43.324 - 00:03:14.864, Speaker A: And you can see we have all the files now from there. One thing that I like to do is just immediately go into that new folder. This way if you're opening terminals, they're all going to be in that project folder already. You don't have to keep console lining into them. Just makes it a little easier. So now that we have our project files, we'll go ahead and run the first command, which is NPMI. Again, this is going to get all of our dependencies.
00:03:14.864 - 00:03:42.552, Speaker A: Typically this doesn't take too long. It depends on your local machine and your network speed as well. But there's not too many for this project. As you can see, it completed rather quickly. Once that is finished, we'll go into another terminal here and we'll spin up our hard hat node. So MPX hard hat node. And we now have a blockchain node operating on our computer.
00:03:42.552 - 00:04:31.714, Speaker A: Pretty cool. You can see here that it deployed to our local machine at port 8545. And when you spin up a node like this, it provides some handy accounts that you can use. These are the account addresses and they are preloaded with 10,000 Ethereum. If you were using this with metamask or something, these are the private keys that you would use to import that in not pertinent to this lesson, but handy to know for the future. But we are going to be using these accounts here in our contract interactions to happen very soon. So now we'll go to our third terminal here and we'll go ahead and deploy our smart contract, which is this command here.
00:04:31.714 - 00:05:24.294, Speaker A: And then what that's going to do is compile our code and then we can see that it deployed that contract to this address. So now we'll go back to our first terminal here and we will create that hard hat console. So we'll just go ahead and copy and paste that in like so. And we can see that the console is now available to us for use. So we'll go ahead now and attach our smart contract to this console with that command here. It'll say undefined. Don't worry, it did go through successfully.
00:05:24.294 - 00:05:58.908, Speaker A: And now the fun stuff. We'll start actually interacting with our smart contract. So the first thing that we'll do is we'll do a deposit. If we look at this deposit call, we're taking a address and we're saying how much we're depositing into that account. In this case, we're depositing one way you can tell that it completed successfully. Because you get these series of information here. Don't worry too much about this.
00:05:58.908 - 00:06:54.330, Speaker A: Basically, if you see this, just know that it worked successfully. And we're about to see that now because what we're going to do is call getbalance and we can see that it now has a balance of one. Now what we're going to do is transfer that one way to another account. This will demonstrate the transfer function of our smart contract. So we're transferring from that first account to the second one again, which is one way transaction went through successfully. So if we call getbalance on these accounts again, we can see the balance for the first account changed to zero. And if we call it for our new account, we can see its balance is now one.
00:06:54.330 - 00:07:43.264, Speaker A: So perfect. The last thing that we're going to want to do is call withdraw, which is the final function in our smart contract. So we'll go ahead and withdraw that one way that we just put in and we can see that went through successfully. We'll know that again because we'll call this get balanced and the balance is zero. So perfect. But now of course, the big question is where did all these events get logged to? So if you look here, this is our deploy script, right? And how this works is we have our contract information here which is being loaded into this variable. And then in this variable we have a function called on.
00:07:43.264 - 00:08:42.989, Speaker A: And what that's going to do is every time it detects an event that is specified here, it's going to run whatever code that you have in between the curly braces here. So in this instance we are looking for a deposit event. And in that event there's going to be an owner and an amount. If we actually look at the smart contract, we can see our deposit event right here and we can see that it has an owner and an amount. So that's, you know, where we're getting those variables from. And it's going to be the same thing for withdrawal and transfer. So whatever event name that you want to log, you just put the title of it here, as long as whatever variables that you're tracking in that event, and then it'll execute whatever code you have here.
00:08:42.989 - 00:09:29.224, Speaker A: In this case, all we're going to be doing is console logging that. In the case of a deposit, we have a new deposit, the owner's address as well as the amount that they transferred. And to prove that this works successfully, if you go to the terminal where your smart contract was deployed, we can see that our events fired successfully right here. So we have our deposit event. This is that first account that we used with the one way we did that transfer from that account to the second account, which was one way. And then of course our final event which was withdraw. We didn't have a event created for get balance.
00:09:29.224 - 00:09:59.434, Speaker A: If we did, we could also see that here as well. Maybe that's something you could experiment with on your own, but that is it. So that is how you get the log information from your smart contract into your JavaScript and display it. If you have any questions, you can reach out to me on Discord. My name is Chris. I hope this was very helpful to you and with that, take care and have a wonderful day.
