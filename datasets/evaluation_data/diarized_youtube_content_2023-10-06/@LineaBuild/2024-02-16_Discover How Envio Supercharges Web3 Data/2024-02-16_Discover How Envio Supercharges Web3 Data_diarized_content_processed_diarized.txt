00:00:00.170 - 00:00:39.160, Speaker A: Is Tuesday, which means it's another developer workshop. Really excited to introduce envio the project. I mean, obviously I'm not going to get into it because our beautiful guest will tell you a little bit more about it, but just kind of hint at the history of it. We actually first met at the ETH global Lisbon hackathon, so it's kind of wild how, I don't know, talented people are in bringing things forward. Know, just a quick hack to something like a working business and actual fruition. I don't know what I'm trying to say here, but anyways, let's get into it. Please introduce yourself.
00:00:39.770 - 00:00:53.374, Speaker B: Cool. Thanks so much, Emily. Yeah, super stoked to be on here today. It's going to be a real fun one. My name is John. John. I'm one of the co founders of Envio and as Emily said, we'll get into exactly what that is in a second.
00:00:53.374 - 00:01:17.254, Speaker B: But before we do, yeah, I'll just say one of the co founders from a technical background and some random fun facts. I enjoy playing chess, maybe solving a Rubik's cube. Also love the sun and a good hike. I actually went hiking camping this weekend, but yeah, that's a little short bit and we are ready to jump into it.
00:01:17.372 - 00:01:28.386, Speaker A: Yeah, amazing. I too love the sun. I don't like mean, I guess. What is Envio?
00:01:28.578 - 00:01:59.730, Speaker B: Cool. Yeah. So Envio is essentially a solution for you to get the on chain data that you care about. And if you think of the ecosystem where we're at in today's day and age, linear is a blockchain with millions of blocks. There are obviously also other blockchains that exist with millions of blocks. And you often in a place where you care about what's going on in the blockchain. But there's only specific parts of information you maybe want to get.
00:01:59.730 - 00:02:44.818, Speaker B: And finding what you care about can kind of be like looking for a needle in a haystack. This data is scattered over millions of blocks, and if you don't have a very clear strategy about how to go find the data you care about, you can really be stuck in a river without a paddle. So what we do is we have a couple of different solutions. We have a complete indexing solution, which I'll show you, which allows you to say, hey, this is a smart contract I care about. Maybe it's a dairy or a uniswap or whatever it might be. And I'm interested in all of the swap events. And what we do is then create infrastructure that allows you to extract that event information.
00:02:44.818 - 00:03:24.350, Speaker B: Very quickly and then store it in the database and make sense of it. And for different people, that might mean different things. For some people and some protocols, it might be showing that information to their users real time on a user interface. Like, these are all my previous trades and this is what I've done in the past. Or for others, it might be deep diving and really running some kind of analytics, like, wow, these are all the trades that have occurred in the last 30 days. And it's crazy to see this trend. And because I've seen this trend, let's maybe do this or that.
00:03:24.350 - 00:03:41.780, Speaker B: So it can mean a lot of different things to different people, but we help essentially make it easy to get access to that on chain data. And linear is obviously one of the blockchains we support and we're excited about that. So, yeah, I'll get in and I'll show you some examples in a little bit.
00:03:42.790 - 00:03:56.578, Speaker A: I mean, just to kind of give context, right? For those of, I guess kind of the newer beginners, what does the world look like without, like, how do I get this information otherwise?
00:03:56.754 - 00:04:41.206, Speaker B: Yeah, that's a good question. So there are generally quite a few ways to skin the cat. Often we say there's lots of different ways you can get that information through the RPC on nodes, all these kinds of things, but it's often cumbersome and really slow. And without something like NVO, you have to spend significant resources on building out the right data pipelines, getting the right data engineering teams in place, and custom building your own version of a solution to extract the data that you care about. Right? So that's what it's like unless you leverage a solution like NVO to really help streamline that process of getting the data you care about.
00:04:41.388 - 00:04:57.290, Speaker A: Yeah, I do kind of want to dive into how NVO works. I know. I think our call to action here is learn how to sync millions of events in seconds. No, RP, that's a grand statement.
00:04:59.150 - 00:06:04.770, Speaker B: So I'm happy to go through that. Where that's basically come from was our own position where we essentially were trying to sync hundreds of thousands of events for a set of smart contracts we had built and deployed. And for us, it became a real issue. If we ever wanted to do some kind of upgrade to maybe a user interface to show an additional field, maybe the number of times a user had interacted with the protocol or anything like that, essentially we would have to retrace our way through all those hundreds and thousands of trades to build up that information. And that's something that could take days, if not weeks. And as a developer, that's just really cumbersome often because you might find you've actually made an error and now you're having to wait days to actually find that out. So we really wanted to be extremely deliberate in making sure that we could have a much quicker feedback cycle which would help the developer experience.
00:06:04.770 - 00:06:31.900, Speaker B: So where it might take you days or weeks to sync the 30 million events in a Uniswap contract, we can do 1020 million events in just a couple of minutes. So orders of magnitude 100 x quicker to actually cycle through all of that data and transform it and put it in your end database. And that just makes development generally a lot easier, which is really nice.
00:06:32.510 - 00:06:46.350, Speaker A: Yeah, awesome. This is like the question you asked, right? Because developers have a lot of options, right? What kind of sets NVO apart?
00:06:46.930 - 00:07:45.122, Speaker B: It's a great question. So I'd say one of them is that speed with that developer experience. So generally you're often trying to extract information just from nodes and nodes and networks. Their primary purpose is to facilitate consensus, add new blocks and keep the blockchain going. But that doesn't necessarily mean they're the most efficient way for you to get data from the blockchain. And that means when you want to get a lot of data and run analytics, use case or get real time information, it's slow and difficult. And we've recreated that entire process to instead have these specific data lakes that are optimized for you to very easily and flexibly pull the information that you care about, therefore enabling your data use cases to be much more accelerated in terms of the development of you wanting to answer all kinds of questions, which we'll get to.
00:07:45.122 - 00:07:53.826, Speaker B: So generally, if you're looking for speed and flexibility, that's where I think we really shine in terms of the solution we offer.
00:07:54.008 - 00:08:01.960, Speaker A: Yeah. Awesome. Am I allowed to ask this right, is this revealing trade secrets? How do you do it?
00:08:04.090 - 00:09:11.222, Speaker B: That's a good question for sure. I'm happy to talk a bit about it, but essentially we've just thought a lot about sort of blockchains and the data pipelines and how to optimize the way we store general raw blockchain information and optimize it not just for storage, but for fast retrieval and also for fast retrieval and specific use cases like indexing, where you wanting to look at one specific smart contract, like a uniswap pool or something, and just listen to the swaps for that address. So by doing a lot of work behind the scenes, we're able to really optimize for those use cases and it's just leveraging more modern database techniques, being aware of sort of the latest and greatest in terms of how that whole space has evolved, which is something that's not necessarily my core expertise, but it's been fascinating for me to dive into parts of it. It's really a fascinating world out there.
00:09:11.376 - 00:09:17.360, Speaker A: Awesome. Well, we already have a question for you. How do people get in contact with you?
00:09:18.130 - 00:09:38.870, Speaker B: Cool, that's great. I mean, number of different ways. Probably the easiest is if you join our discord because they will really be able to support you and help you. Any questions you might have, any data requirements you might have. So, yeah, I'm sure in the chat now someone will drop a link to join our discord, but that's probably the easiest way.
00:09:39.020 - 00:09:58.758, Speaker A: Yeah, maybe this is like a good time to actually jump into looking at NVO and how people get started. I'm sure there's probably a link on your website as well to more, I guess, these chats. Oh, question, what are the rate limits? Are there rate limits?
00:09:58.854 - 00:10:17.780, Speaker B: Cool. So there's no rate limits right now, so definitely go wild. We'd love to see what you're building and experiment with you. I see it looks like our discord link might have been blurred out, so we might have to send it again there. But let me hop in and get people going.
00:10:18.870 - 00:10:19.620, Speaker A: Yeah.
00:10:20.150 - 00:10:22.338, Speaker B: Cool. You happy for me to start out?
00:10:22.424 - 00:10:23.620, Speaker A: Yeah, absolutely.
00:10:23.990 - 00:10:51.274, Speaker B: Cool. Let me do that. So, as I said, we're talking about NvO and there's two things I'm going to show you today. Firstly, Nvo dev, you can go there and find out all the information you need to get started. We're actually going to go through Hyperindex and hypersync. Hyperindex is what I was talking about, the indexing framework, it's very easy to get started. And Hypersync is a data lake.
00:10:51.274 - 00:11:41.386, Speaker B: There's a client forward in Python and that's sort of a lower level place for you to make even more flexible queries. And hypersync is essentially the backbone that's powering hyper index. But let me stop talking about it and let me rather show you about it. And the way we're going to do it, I like to do it very practically, is we're going to go actually look at some data. So if we look at the linear blockchain, something that stood out to me was dairy V four. It's an options protocol, and if we had to go have a look at what this protocol looks like, we can look at it on linear scan, for example, you can see it's this contract and there's tons of stuff going on here. And remember, our goal is we want to make some sense of all of this information.
00:11:41.386 - 00:12:22.570, Speaker B: So you can see people are requesting trades, they're requesting to add margins, they're doing all these kinds of things. And if you hit the events tab you'll see there's tons of event information here. But just like this, it's quite difficult to actually make sense of all of this information. So what we'll do is we'll index this contract. Now there's more than 107,000 transactions, but very quickly we'll get a sense for this actual data once we've indexed it. And now everything I'm going to do, I'm going to be doing right from the start and from scratch. So you can follow along at home if you'd like.
00:12:22.570 - 00:12:59.650, Speaker B: But the first thing you want to do is install envio if you haven't already. But I won't go through that since that's in the docs. You can see I've got an empty folder over here. And Emily, do feel free to button with any questions at any point in time if that helps. But you're simply going to run this very quick NvO in it command and it's going to actually allow you to auto generate an indexer to start off with, which is very useful. So there's a couple questions. You can choose which language you want, you can choose the contract import feature.
00:12:59.650 - 00:13:42.926, Speaker B: And what this means very simply is you can head over to linear, which is really nice. Simply paste this contract address Derry, which is nice, and you can see all of the events that it's emitting and possibly select or deselect any events that you care about. Hit enter. And this is the only contract we want to do. So just like that, we finished and what's going to happen is our indexer has just like that been generated for us. So if I hit code and I open up a terminal, I'll actually show you now what that ends up looking like. Yes, I trust the authors.
00:13:42.926 - 00:13:49.320, Speaker B: Let's update a little bit later and let's go on to this over here.
00:13:49.850 - 00:13:56.470, Speaker A: I'm going to interrupt very quickly. Is there Golang support or is it only Javascript?
00:13:57.130 - 00:14:27.026, Speaker B: There's no Golang support at the moment. There's typescript, there's rescript and there's Javascript support. Okay, if there are interest in other languages, please let us do know. We obviously want to take different feedback into account, so that's really cool. And what I'm actually going to do is instead of just diving straight into the code, I'm going to index. So remember, all of this has been auto generated. So let's not worry about this too now.
00:14:27.026 - 00:15:14.850, Speaker B: And I'm going to run Nvo dev, I'm actually going to run PNPM NvO dev. And that means I'm going to start indexing. And just like that, it's going to open this Hasura console, and it's going to show us all of our data, which is great. So if we come over and we look at all of our data, all of it is in these tables. And remember I was talking about speed. Speed is one of the cornerstones. And you can see we've indexed 115,000 events already, and that's all of the events emitted from the contract, so that's near instantaneous.
00:15:14.850 - 00:15:56.330, Speaker B: All of this data from the dairy contract, all of it has been indexed in our auto generated indexer, which is very nice. You'll see if we head back over here, 115,000 events. And now you might want to look around and explore what this data might look like. So we are just saving these events right now at the moment. So you can see there's the request trade event, there's the request liquidate event. And what you can do is two different things. Number one, you have this really nice graphql interface.
00:15:56.330 - 00:17:11.800, Speaker B: So this is called GrapHQL, and it allows you to make these expressive queries to get certain data. And what I mean by that is, we could request all the trades. So we're making a request for the trades, but we can do interesting stuff like we only want ten trades, and we can also order the trades by something like the last cumulative PNL on the engine. So maybe this is the protocol, wanting to do some leaderboard, and then we can get all of these pieces of data that we've saved and we could click the play button and we could run this request. And now when you hitting this graphql endpoint, here we go, we're getting the ten trades where the last cumulative PNL was the greatest. Now, this is something you might use, you would imagine, for a leaderboard or something like that, where you want to understand all the trades and show the top of them. So GrapHQl gives you this very powerful and expressive way to filter and choose and show pieces of data.
00:17:11.800 - 00:18:07.874, Speaker B: And now you could imagine your UI is making requests and getting this kind of data. So that's sort of one aspect of it. And then if you're wanting to look at all the data and run analytics. At the moment, this is in a postgres database. You can see all the different tables and what all the different data looks like, and there's various different ways you can obviously go about analyzing it. But one, for example, Emily, which is quite interesting, is using an open source tool like Metabase. And Metabase is just a bi tool business intelligence tool that you can hook up to your database and you can start doing interesting things, looking at different kinds of events and creating different kinds of visualizations.
00:18:07.874 - 00:19:22.270, Speaker B: So this is showing all the events we've indexed and it's showing all of the different types of the events. And we could click on something like distribution. And very quickly what we've done is we've turned this page of crazy events that just shows the last 25 on the most popular contract in linear or one of the most popular contracts in linear. We've turned that into something where we can start to very quickly see important information and we can see actually what's happening most of the time is people are requesting trades. There's been 28,469 trades requested. And the thing that's happening next most often is people finishing and adding margin. Now myself, I haven't delved too deeply into the dairy protocol and its workings, so some of these statistics might not mean as much to me, but I'm sure if you're someone who's a trader or a protocol user, leveraging these statistics can be extremely interesting, especially if you perhaps the protocol coder.
00:19:22.270 - 00:20:32.440, Speaker B: So that's really nice. And you can do tons of different things regarding filters. Summary so again, basically, just to cap off what we've done on this section, we've looked at one of the most popular D five protocols on linear dairy. We've indexed all 108,000 dairy transactions in just a couple of seconds without any code using the code gen tool, which will automatically generate an indexer for you. And we've looked at how you can either query from a graphql endpoint and get very specific, nice data for your front end, or how you can use that data at a more global scale to get protocol insights at a whole. And then kind of just the next level is going one layer deeper and actually editing your indexer code. So if I head back to let me just open up another terminal here, another code.
00:20:32.440 - 00:20:50.542, Speaker B: So here we have it. So you can see it's caught up. All of this was just boilerplate generated code, but what you might actually want to do is do something specific so you can see whenever there's a finished liquidate event.
00:20:50.596 - 00:20:52.062, Speaker A: Can you zoom in a bit?
00:20:52.196 - 00:20:57.726, Speaker B: Yeah, let me try there. How does that look? I don't think.
00:20:57.828 - 00:21:01.680, Speaker A: Do one more. Okay, perfect.
00:21:03.410 - 00:21:56.702, Speaker B: Cool. So you can see there's these handler functions and these functions just say, what should I do when I receive this event? So it's a finished liquidate event. It, and in the boilerplate code we generated, we basically just save this information. We don't do anything special with it. But you might want to come now in and customize your indexer so that every time you see a finished liquidate event, you maybe want to associate that liquidation with a certain user. And that way you can look at which users have liquidated people the most and gain other kinds of insights. So it's really just the starting point and the boilerplate, but it's really quick for you to get up and going essentially immediately.
00:21:56.702 - 00:22:23.306, Speaker B: So this is the indexer, which is quick and helpful. And I think maybe I'm going to stop there on the indexer for now and ask if there's any questions. And after that we'll move to hypersync, which is the data lake that you can also access directly below it. But let's stop over there for now and ask.
00:22:23.488 - 00:22:50.050, Speaker A: Awesome. That's super cool. So, I mean, I think first thing, just to hone in someone was like, okay, yeah, wow, this is from block zero and no RPC subscription. Fantastic. And then we have another question. I think this is again, in comparison to alternatives, we have subsquid advantages of using NVO for depths instead of subsquid. I don't know if you're familiar with that.
00:22:50.200 - 00:23:37.170, Speaker B: Yeah, that's a good question. So I guess everyone should look, there are a range of alternatives. I think from our feeling, we've been very focused on developer experience. So often the way you write your indexing code can be different depending on the framework you use. I think we have opinions that the way we've structured is very logical and easy for a dev to get going. So yeah, that's our opinion of what we think it looks like. And then also in terms of speed, the way we've structured our data lakes, on the tests at least we've run, we have the edge on speed, but definitely we welcome more people to write more scenarios and we want to seek more benchmarks.
00:23:37.170 - 00:23:48.520, Speaker B: So yeah, absolutely open to hearing more of that. But yeah, definitely, I think the speed and the developer experience are two things that we pride ourselves on.
00:23:50.490 - 00:24:02.810, Speaker A: Super cool. Yeah, that was really fast. I was like, what? You're doing it right now? That's amazing. Cool. I think no more questions right now.
00:24:02.960 - 00:24:45.750, Speaker B: Yeah, let's move on. Let's jump on to the next part. So the next part I want to show you. And again, I'm going to not do too much code and try keep it a bit more conceptual and show you the examples. You can dive into yourself, but we're going to talk a bit about hypersync. And hypersync you can use in a couple of different ways, but think of it maybe as faster and more flexible alternative to the RPC. So instead of using RPC, which a way to get data from a node, you can use hypersync to make more expressive queries and get a more interesting mix of data and get it back faster.
00:24:45.750 - 00:25:38.166, Speaker B: And we're going to show you some use cases of what you can do with that and why it's cool. So let me again just share my screen and I'll show you. So something we built is chain density, which does just that. So if we again want to go back and look at this contract dairy and we want to understand where have all of these events occurred over the entire history of the linear blockchain, what we can do is paste this address and we can go click on the linear network and we can hit submit. And what's going to happen is very quickly it's going to be able to scan the entire linear blockchain. And you can see it's running from block 900,000 here to block 2.4 million.
00:25:38.166 - 00:26:25.350, Speaker B: And it's going to show us a distribution of when all of these events were emitted. So what you can see here is that a lot of the activity on dairy protocol was happening around here. There's lots and lots of stuff going around block 1 million. Maybe that coincided with some kind of event or incentives or who knows? But that's just an example of what hypersync can do. Hypersync is enabling this use case and we can get into a query right now and we can also just go and do this again for any random address on linear. Let's go look at some random address here. I mean, I just picked it out, it's only got five transactions.
00:26:25.350 - 00:27:14.662, Speaker B: And very quickly we're going to be able to scan through the entire linear blockchain and we're going to be able to plot where exactly these transactions have been. And you can see they're very recent. This address has obviously just come online and those are the different transactions. So what does this actually look like under the hood? And again, I won't go into too long, but we have clients for Python and also javascript for you to very easily use it. And what you can do is simply import the hypersync package. And again, I won't go over it too long because you can go check it out more in the docs. And please do if you want to use it.
00:27:14.662 - 00:28:13.866, Speaker B: Join our discord, ask us questions. There's still things we are doing under development, but very simply, what this script does, it does something a little bit different. It gets all the transactions from the last 100,000 blocks on the linear blockchain. And from all of these transactions it's getting who the transaction was from the block number, the gas used and the effective gas price. And what we're going to do is use this to see which address has been using the most gas in the last 100,000 blocks. So if we run this, what we are doing, you see, we connecting to linear, we're creating a Parquet file and we're getting all of these transactions in the last 100,000 blocks, which is from the current height now to 100,000 blocks ago. This is just some more config that I won't go through now.
00:28:13.866 - 00:28:54.854, Speaker B: A lot of it can be default and standardized. And then to find the top wallets we're just aggregating the from column and doing some simple mathematics to actually see the full gas price. And if I run Python top wallets again, this is getting every single transaction from the last 100,000 blocks and the specific gas prices takes just a couple of seconds to load. And we can see the top address has used 9.2 eth in the last 100,000 blocks. That's quite a lot. Quite interested in that this is doing.
00:28:54.854 - 00:29:43.894, Speaker B: I mean let's go and actually have a look at it and maybe see what it's up to. So I'm just going to append zero x here and yeah, wow, just like that. We can see this doing a ton of stuff. 2 seconds ago, 2 seconds ago, 6 seconds ago validating transaction proof. Very interesting. I wonder what this address is doing. But it's busy guzzling a lot of gas on linear and for example, again we can head to chain density and we can look at what does the transactions look like for this address we can hit submit and there you can see it super recently it's very much ramped up and it's sending tons of transactions this address.
00:29:43.894 - 00:30:36.610, Speaker B: So yeah, I'm not quite sure what it is, but basically that's just a little use case on how you can use the client to answer interesting questions. Regarding specific wallets or who the top gas spenders are, and if you are interested in answering more of those types of questions, we've put together a little repo over here which we can maybe drop in the links now. I'll ask them to and please join our discord. We can also answer and help asking questions. But there's the top gas usage one I just showed you. Then there's also contract deployment density where you can look at where every single smart contract has been deployed on the linear blockchain over time. And you can very simply run this script.
00:30:36.610 - 00:31:36.440, Speaker B: So those are some cool examples if you want to get started and play around with some linear blockchain information and you can go all low level and use hypersync as we were talking about. Or if you want to get your hands less dirty on the code like we talked about before, you can use hyper index and you can very quickly auto generate an entire index just by pasting in a contract address. But yeah, I think those were. I've gone through it quite quickly, but I think it's been nice to just really breeze through the main parts of it. I don't want to dive too deep into any specific layers of code, but I think got a nice holistic overview of hypersync, hyper index and how you can use both. So yeah, let me stop sharing again there and see if there's any more questions at this point.
00:31:36.970 - 00:31:50.000, Speaker A: Yeah. Oh my God, that's amazing. This is so cool. Cool. I wish I could be the one. I'm like, oh yeah, I'm just casually spending nine eth on gas. Fortunately not my address.
00:31:50.000 - 00:32:34.190, Speaker A: Yeah, questions are a little delayed, so I'll give it like a few seconds, I guess. But I kind of want to kind of end with a few things. Right? So linea is participating in the east Denver hackathon coming up, and I think the thing I always say is linear is boring. What protocols like you do is make dapps there interesting and more powerful. So from, I guess, your perspective, do you have any advice, ideas like envio out in the wild that could serve as some sort of inspiration?
00:32:35.090 - 00:32:51.202, Speaker B: Yeah, that's a good question. I mean, hackathons are great. Like, big fan. Depends really what you want to build. There's a ton you can build. If you want to build a hardcore analytics type hack, definitely can recommend using hypersync. Could be really cool.
00:32:51.202 - 00:33:49.240, Speaker B: For example, that tool I was showing you, chain density that plotted out the density of transactions over entire blockchain, that's something built at a hack. So if you want to have some kind of developer tool or visualization that could be really nice if you want to build an indexer, for sure. For a protocol you build at a hackathon, you can definitely leverage envio and auto generate an indexer just from the AbI of your smart contract. I also know Joss from the NVO team. He's going to be at the ETH Denver hackathon, so go tap him on the shoulder and I'm sure he'll take some time out of his own hack to help you out if you need any. Yeah, really, I mean, the sky's the limit. My only advice for the hackathon is just focus on having fun and experimenting and doing something cool that you wouldn't get to do every day.
00:33:50.730 - 00:34:12.578, Speaker A: Yeah, no, this is amazing. We have someone being like, I just became a fan of MVO in just 30 minutes. Me too. Wow, this is amazing. This is why I host these, because I don't know anything and I'm just like, oh, you tell me in front of everyone. I think it would be helpful to get just like a few links that I can put on. I think the platform should have a private chat.
00:34:12.578 - 00:34:22.160, Speaker A: I don't know if you can find it. If you do, you can send it to me and then I'll post that and make sure it's here on the screen.
00:34:22.610 - 00:34:48.226, Speaker B: Yeah. So I'll do the website and then let me grab a discord link as well, which I think is going to be great. A second. I'll open up discord. I see there's another question that asked. Is that because the contract was only deployed from block 900,000? Yeah, that's exactly correct. There was no activity in the first 900,000 blocks.
00:34:48.226 - 00:35:26.770, Speaker B: So yeah, that's why it would only essentially show from 900,000. Cool. And there's a discord invite link. So yeah, please do join, especially if you want to try it out and give some time. So yeah, those are the main two links. And on envio as well, you can obviously find the docs, which is super important and we super responsive, so definitely happy to help out. And if any of you are in East Denver for the hackathon, do look out for Joss for sure.
00:35:26.770 - 00:35:46.858, Speaker B: Maybe we'll ask him to wear like a bright neon shirt or something so you can distinguish, but we'll get that sorted. And then also for anyone who's going to be hacking, maybe in London in a couple of weeks, I know there's an ETH, London will be there too. So come chat and be more than happy. To help out.
00:35:47.024 - 00:35:54.590, Speaker A: Okay, cool. Here's another question. Do you also parse values of tokens in transactions?
00:35:56.130 - 00:36:51.662, Speaker B: Do we also pass values of tokens in transactions? Yes, if we're using the indexer and you indexing, say all ERC 20 token transactions, we can pass those values for sure of what they are. It depends. In the indexer you have the ABI and it gives us the ability to decode it and have it right over there. So yeah, we do do passing. And in hypersync we're working on the client quite actively to improve decoding too, so those values are more easy to understand. And I'm also going to share the GitHub repo of a couple of examples that I was showing you earlier of analytics on the linear blockchain using hypersync. So there's a few python scripts there.
00:36:51.662 - 00:37:00.980, Speaker B: You can go download the repo and run a couple of them yourself, make some edits, chat to us. There's lots of other cool things you can do.
00:37:02.710 - 00:37:17.640, Speaker A: Very cool. Yes. So all these links are here, but if you want to copy paste them, I'm sure we'll post it in a recap somewhere. But also we're on YouTube, LinkedIn and Twitter, so go watch it on every platform.
00:37:19.550 - 00:37:20.858, Speaker B: One after another.
00:37:21.024 - 00:37:26.140, Speaker A: Yeah. Okay. And you said Joss with no h.
00:37:27.150 - 00:37:29.082, Speaker B: Joss is going to be there in Denver. Yeah.
00:37:29.136 - 00:37:29.450, Speaker A: Okay.
00:37:29.520 - 00:37:34.538, Speaker B: Lovely guy. He looks like a Joss. You'll recognize.
00:37:34.634 - 00:37:46.770, Speaker A: What does that mean? If I had to. I hope that's a compliment.
00:37:47.510 - 00:37:48.820, Speaker B: No, it is.
00:37:50.790 - 00:37:56.162, Speaker A: Cool. Okay. I guess the last piece. Do you guys have a Twitter or anything that we could also.
00:37:56.296 - 00:38:17.580, Speaker B: Yeah, absolutely. Let me link you to that too. And again, the easiest place we have links to Twitter, discord, all those things on the website. So if there's one thing you do remember, that's nvo dev. That's super simple for you to find all the links at the bottom in the footer there. But yeah, there's a Twitter. Give us a follow.
00:38:17.580 - 00:38:31.214, Speaker B: You'll see updates on new releases v zero point 31 coming out super soon, hopefully this afternoon. So stay tuned for more improvements, which is cool.
00:38:31.332 - 00:38:31.950, Speaker A: Okay.
00:38:32.100 - 00:38:36.930, Speaker B: And yeah, there's Joss commenting hit me up at East Denver.
00:38:37.270 - 00:39:00.460, Speaker A: So definitely do dm him in discord. Yes, apparently he's buying beer for everyone. We'll see how that happens. But yeah, I guess want to just leave time for closing thoughts, any announcements or whatever that you want to make? If not, I'll count down from ten to leave some time for lag and questions.
00:39:01.870 - 00:39:34.018, Speaker B: No, I mean, final thing. Just would really love for you to people to get their feedback. So if there's any questions you have, if there's any specific problems you've been struggling with, getting information about your protocol or analytics or anything like that, we're super friendly. Please do drop into our discord, send us a line, and we'd be more than happy to start getting you off in the right direction. So, yeah, definitely very keen to connect afterwards. And don't be a stranger. Come say hi and, yeah, let's do it.
00:39:34.184 - 00:39:41.720, Speaker A: I actually have one question. Do you only hire people whose names start with J? Because at this point we have Joss, Jason, John.
00:39:42.090 - 00:39:50.540, Speaker B: No, it is hilarious. There are a lot of J's. It's not a requirement, but it seems to happen.
00:39:51.550 - 00:40:10.400, Speaker A: Okay, cool. So I will count down from ten. If there's no more questions, I guess we'll cap it off. If there's more questions later, join the NVO discord. Find out more at NVO Dev, soon to be renamed Genvio, I believe. No, I'm just kidding. Okay, cool.
00:40:10.400 - 00:40:31.494, Speaker A: Ten. 987-65-4321 okay, I think that's lag time. So thank you so much for joining. This is super fun, you guys building something. Oh, my God. Amazing. So I hope to see kind of how you guys continue to develop past this.
00:40:31.532 - 00:40:35.814, Speaker B: Awesome. Thanks so much for hosting us. Hugely appreciate it, and we'll catch you soon.
00:40:35.932 - 00:40:37.090, Speaker A: Okay, bye.
