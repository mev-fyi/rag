00:00:00.600 - 00:00:09.798, Speaker A: Hello. Hello, everybody. I don't know what time zone you're watching from, but for me it's somewhat in the morning. So good morning. Almost afternoon. I'm Emily. I do devrel for Linia.
00:00:09.798 - 00:00:13.554, Speaker A: I have a really great guest today, so I'll let you introduce yourself.
00:00:15.534 - 00:00:29.494, Speaker B: Hi, Emily. Good to be here. I'm Igor, co founder of on this. We provide no code tools for building on chain. And our mission, which we'll expand on later today, is to empower on chain users to become builders.
00:00:30.274 - 00:00:48.374, Speaker A: Yeah, I mean, so I guess let's just kind of dive into the details and expand about that. Like, what exactly is on this? Right. How does it work? Like, what is the user experience like versus the dev experience?
00:00:50.074 - 00:01:50.044, Speaker B: Yeah. So the intention is to have the experience very seamless for the end user. In other words, you're selecting from dropdowns, entering inputs, whether you're pasting token addresses or selecting origin change chains or destination chains. And the end result is you can deploy contracts with a few clicks. And that's kind of the ultimate goal is to give people the opportunity who don't have deep dev experience or coding skills to create, to deploy useful contracts that they can use themselves, that they can share with friends. And just to put things into perspective, there are roughly 200,000 solidity devs across the entire world. I mean, likely that number is smaller for those that are, are actually building stuff, working for teams.
00:01:50.044 - 00:02:24.184, Speaker B: And there are, you know, arguably close to 100 million on chain users that are traversing every ecosystem, trying different things, being creative. And those, those people always are looking for ways to improve, learn something new, create and give back to their communities. And we think that the no code tools approach can pave that path for those people and help them deploy useful things that they themselves can use or they can share with their communities.
00:02:25.044 - 00:02:44.604, Speaker A: Awesome. Cool. So I actually want to take a step back, probably even further. So I think my question was pointed more so at for somebody who doesn't even know what on this does. Right. Like, I guess to kind of hint at it. Right on this is a shortcut, but like, what even is a shortcut?
00:02:45.544 - 00:03:59.810, Speaker B: Right. So that's a great question. So, like, what contracts are you deploying? Like, what can they do and why are they important? So the contracts that you can deploy, as one example that we, that we like to use is, for example, let's say you wanted to bridge to linear, and this, we already did this. It was already created and assigned to an ens. But let's say you want to bridge to Linea, you can deploy your own bridge contract, and by sending eth to that contract, it can automatically bridge your Eth from, let's say mainnet to linear and the flow, the user flow, once a contract has been deployed via any of our no code tools, is that you can send eth to that contract and it does several actions for the end user. So you can think of it as an easy way to combine multiple on chain actions to get multiple things done for the end user. And we like to use the bridge example as the simplest one.
00:03:59.810 - 00:05:02.548, Speaker B: But to take it one step further, if, let's say that you're a user that is on Ethereum mainnet and you want to buy foxy token on linear. So the typical user flow would be that you would take your Eth from Mainnet, go to bridging site, bridge your ethnicity, then you would go to a Dex with that linea ETH and swap it into the foxy token. That's an example of the traditional route. With one of our bridge and swap contracts that you can deploy, you combine those actions together. Our Noco tool allows you to deploy the contract. And anytime you send ETH that newly deployed contract, it does all those steps I just mentioned for you automatically. So you send ETH to a contract, it auto bridges to linear, goes to Dex, swaps it for Foxy, and the foxy token gets returned to the sender back in their wallet.
00:05:02.548 - 00:05:17.004, Speaker B: So you never have to leave your wallet, you just send ETH and it does multiple actions for you. Maybe that was a long winded explanation of how the contract works, but ultimately you can do multiple things with one action.
00:05:17.504 - 00:05:40.764, Speaker A: Yeah, I think, I mean, if you don't have it pulled up, no worries. But like on this, I think really hits home when we have sort of a visual example. If there's a way you can kind of show us what the user experience looks like from like just using, I guess on this versus building it.
00:05:41.554 - 00:05:48.738, Speaker B: Yes. So using, using a contract or using a shortcut specifically.
00:05:48.826 - 00:05:49.694, Speaker A: Right? Yeah.
00:05:50.634 - 00:05:57.854, Speaker B: So let's pull up my screen here. Can you see my screen?
00:05:59.234 - 00:05:59.974, Speaker A: No.
00:06:00.474 - 00:06:13.274, Speaker B: Oh, whoops. I didn't click it yet. I can't see it because I didn't click share my screen yet. So this is, can you see my wallet?
00:06:13.774 - 00:06:14.514, Speaker A: Yeah.
00:06:15.334 - 00:07:09.384, Speaker B: Okay, perfect. Okay, so I'm going to go to on this xYz, this is the landing page that most people will see. And if you're ready to build, you could click build. But for now, let's click discover and see, you know, what contracts are available. As you mentioned, shortcuts contracts and we could pick one and use it. So this is where you'll see multiple contracts that were launched, whether it's a token that was launched via our tools, bundles, which is allowing people to buy multiple tokens at once. Bridge and swap is what we spoke about, which allows people to bridge to another network and swap into a token.
00:07:09.384 - 00:08:13.024, Speaker B: Let's just pick one as an example. Let's see what this one does. Okay, so this is the MFR token. For this just sake of simplicity, I could find a linear one with a few created, but I just want to make sure that we don't run out of time. But, so this is, somebody created this bridge and swap contract which goes from ETH Mainnet to base. So all we have to do is copy the address and we go to our wallet, and from Mainnet we can send, hopefully have enough ETH for gas, you know, 0.01, a very small amount.
00:08:13.024 - 00:09:21.628, Speaker B: So what I did was I just, all I did was I copied the contract here, which bridges from Mainnet to base and buys the MFR token. And so now the contract spending. But once it's. So let me just copy the MFER contract address so I could show you in my metamask that it appeared. So let me import. 1 second is okay. Oh, it's already there.
00:09:21.628 - 00:10:26.314, Speaker B: So just to go back for a second and just review what I just did. So we were on Ethereum mainnet. In our metamask, anyone could go to discover page, which takes you to a list of all the available things that you can do beyond this. In this example, we did a bridge and swap transaction, which bridges your ETH to another chain, in this case base. But we could go over a few linear examples, and I believe we did this one here, which, which is the MFEr token. And all we do is we just copy the address, go into a metamask and send it. And what it does is bridges the ETH over to base and then swaps into a method on the Dex, the best available liquidity.
00:10:26.314 - 00:10:37.814, Speaker B: And as you can see it automatically, within like probably 30 seconds it appears. And we use a cross under the hood for the bridging.
00:10:39.434 - 00:10:39.906, Speaker A: Awesome.
00:10:39.970 - 00:10:41.202, Speaker B: That was a live example.
00:10:41.338 - 00:11:20.844, Speaker A: Yeah, yeah, yeah. I guess to kind of re explain everything that just happened. Right. What on this does is provide a way for people to create complex actions, especially when they're cross chain, which are kind of one of the most complex, I think transactions for new users to do it in one click right directly from your wallet. I think I have a few follow up questions, I guess can we do l two to l two, or is it only mainnet to l two right now?
00:11:21.544 - 00:11:48.124, Speaker B: Great question. So you can do l two to l two, and, you know, you can do from base to linear, from linear to base. There's a couple lineage, a couple linear contracts that we deployed. So, yeah, you can do, you could do a number of different combinations. And we've seen pretty much all of them already deployed.
00:11:48.794 - 00:12:12.054, Speaker A: Awesome. Cool. And then I guess another follow up question. So we've done this one actually with Linea. Right. Specifically just bridging on to Linea from eth mainnet to linea. So it was, I think if you send eth to onlinea eth, it'll just bridge it over.
00:12:12.054 - 00:12:26.984, Speaker A: And I guess the reason you can do that is because you created this shortcut through on this. You have this contract address, and then you bought an ens for that contract. Like, how did that work?
00:12:27.964 - 00:13:31.094, Speaker B: Yeah, so the on Linea ETH top level domain is owned by Linea and managed by their security council and multisig. And we deployed a contract on this, deployed a contract that does the bridging in the background. And it became very easy for Linea to just assign the newly created contract to their own EnS name, which in this case is on Linea E. And all the user ever has to do if they ever want to get e over to linear is type in on linear ETH in their metamask. And you can see that because the wallet resolves EnS names, it automatically recognizes it and shows you the contract right away that's associated with the ENS name. So once again, the user just types in on linea E and sends whatever amount.
00:13:32.634 - 00:14:00.694, Speaker A: Yeah. And then I guess, also follow up questions for users protecting themselves devs, like demonstrating that they're building something reputable. Right. How do the people know whether, like, what's being bundled is not malicious? Like, EnS names can change underneath them. How do we kind of make use on this safely?
00:14:02.264 - 00:14:18.164, Speaker B: Yeah, that's a great question. Um, the, so one of the big ways that that's going to happen is we're, I think, did I do this with you before where I had to Alpha drop just because of the question?
00:14:18.784 - 00:14:21.524, Speaker A: Oh, yeah. No, I mean, okay, feel free to.
00:14:22.624 - 00:14:46.754, Speaker B: No, no, no, this is great because it's complete. It's complete. And we, we definitely want to announce it. And so we're officially live in the snap store. I don't think we linked it on our site, but it's, we have a forward slash, which is on this forward slash snap actually, I could probably go back to sharing my screen.
00:14:47.374 - 00:14:48.914, Speaker A: Oh, I feel so bad.
00:14:49.534 - 00:14:54.782, Speaker B: No, this is great. I mean, what's the point of Alpha dropping if it's not by surprise?
00:14:54.918 - 00:14:55.594, Speaker A: Yeah.
00:14:57.714 - 00:15:01.250, Speaker B: So I'm sharing my entire screen. Do you see it?
00:15:01.282 - 00:15:02.694, Speaker A: Okay. Yeah.
00:15:03.634 - 00:15:48.194, Speaker B: So on this dot XYZ snap, which will make more public and available on their site as well as announce it on Twitter or X. But basically, to answer your question is, how do you know what's going on in the background when you're pasting in a contract address for the EMS name? The best way that we decided to deal with this is to build a snap where you can see more details and insights on any contract that's been deployed using on this, and you'll see a detailed breakdown of the transaction, what's happening. So that will give you the confidence and the peace of mind to transact with these contracts.
00:15:48.754 - 00:16:01.674, Speaker A: Okay. Very cool. This is exciting. I'm glad that you've been able to leverage metamask snaps for insights. Yeah. I mean, because security is definitely always top of mind. Remind me, we need to stop at the half hour.
00:16:01.714 - 00:16:01.866, Speaker B: Right.
00:16:01.890 - 00:16:10.414, Speaker A: So I think I asked too many questions. I want to hop directly into what it looks like to actually build a shortcut.
00:16:13.754 - 00:17:02.944, Speaker B: Yeah. So while I'm still sharing my screen, one of the exciting things that we're doing now, and for anyone who's listening, if you've been an onchain user and you've been looking to get into building or developing, and that's of interest to you, I think great opportunities to check out our builder program where we teach you how to deploy your own contracts using our no code tools. We make it pretty easy. And you have a community of builders that are going through the same process and learning alongside you. So they could help you kind of grow within a community setting. The easiest way to do this is just to go to this site. And I don't know if we could share it somewhere, Emily, but, you know, you just.
00:17:02.944 - 00:17:33.574, Speaker B: We could just. It's in our docs. It's the link that called become a builder. Hopefully we could share this link somewhere. But you fill out a type form, join our telegram, and you join our 30 plus members now currently building and using our tools to better serve their own communities. In your case, it would be linear. And our entire team is in that chat, actively helping people.
00:17:33.574 - 00:17:43.854, Speaker B: So this would be a really, really great opportunity for most people that are looking to get into building but don't know where to start.
00:17:45.874 - 00:17:59.694, Speaker A: Awesome. Cool. Can you give us, like a sneak peek? I guess of like actually creating your own shortcut, if that makes sense. Can you do that without being a builder in the builders kind of program?
00:18:00.734 - 00:18:11.334, Speaker B: Yeah, absolutely you can. And most people have without. We just announced the builder program a few days ago, but. So can you see my full screen again?
00:18:11.454 - 00:18:12.154, Speaker A: Yeah.
00:18:12.774 - 00:18:49.254, Speaker B: Okay, so we're back on this XYZ, except now, you know, instead of using the contracts that are deployed by on this, which is through the discover link, we want to build one ourselves. So we would click build. And here you connect your wallet deploy. Now you select which tool you want to use. We have a bridge and swap, which I just displayed. I think I'll use that one as an example. And we have two others, token bundles and token launcher.
00:18:49.254 - 00:19:07.742, Speaker B: Once again, if you want to explore more, you could, uh, join our community via builders or follow us on Twitter. But for now, let me just walk you through the bridge and swap, which is what we just used. Uh, so you click create. Um, and by the way, you still see my screen, right?
00:19:07.838 - 00:19:08.954, Speaker A: Yeah, yeah, yeah.
00:19:09.374 - 00:19:15.114, Speaker B: Cool. Um, so you. You select the origin chain. So, Emily, which origin chain would you like to select?
00:19:16.174 - 00:19:21.838, Speaker A: I don't know. I feel like this is me being. We'll just pick the top one. Yeah. Base.
00:19:21.886 - 00:19:44.554, Speaker B: Sure. Okay. Let's get some assets off of base and bring them to linear. So we select the origin chain and destination chain of linear. And then you select an input token. So one of the ways that I do it, I just go to Dex screener and just look at the available tokens based on l two. In this case, let's look at linear.
00:19:44.554 - 00:20:23.002, Speaker B: A popular one is Foxy. So here is Foxy. So I just copied the token address of Foxy and go back to our creator tool paste. In the token address of Foxy, which lives on linear, automatically finds the best and most liquid pool, 3 million of liquidity. And then if you want to actually click out of the contract, you could do so by clicking on the pool. But so once again, you just select the origin chain, select destination chain, paste in the token address. It automatically finds the best liquidity pool.
00:20:23.002 - 00:20:35.694, Speaker B: You click continue and confirm, and depending on your network connection, take 30 seconds.
00:20:36.434 - 00:21:12.034, Speaker A: Yeah. Yeah. No, this is super cool, I guess. Also kind of other questions that this kind of makes me think about. Right? I love that. This is so simple. Right? I think the other piece though is like, as a developer building shortcuts, how do I differentiate myself? Alternatively, it's like, is the best use case actually for someone who's building something else already? And then using on this as like a UX improvement for their existing product.
00:21:13.254 - 00:22:48.224, Speaker B: Yeah. So what we've seen so far and kind of what we envision for the future is that teams that for example either are looking to launch their own token or perhaps onboard more users that own their token, a lot of times the route to do that is pretty complex, especially if you're in l two. So what these contracts that you can deploy with on this, the bridge and swap contracts, what they help those teams do is make the UX as you said, simpler for somebody to get onboarded. So as an example, just to stick with Foxy, for instance, it lives on linear. So as the team of Foxy would want to basically build a bridge and swap contract from every different l two and create their own perhaps Ui using our contracts in the background. So this is kind of like the middleware layer that improves the UX for projects looking to onboard users onto their token or perhaps you know, enhance the user experience for themselves as like somebody who does an action often. For example let's say Emily likes to buy Foxy token on the weekends, every Saturday because that's just what he does.
00:22:48.724 - 00:22:51.340, Speaker A: Yeah, yeah. Oh, I should have to that over.
00:22:51.372 - 00:23:02.634, Speaker B: And over again, but yeah. So the, any kind of repetition or any onboarding is a good use case of these contracts.
00:23:02.974 - 00:23:48.184, Speaker A: Okay, that's super cool. Yeah. I guess this is a little bit like a way simpler, better version of snaps, I guess kind of like on this as an enhancement to a project versus like independently building shortcuts as you're like. I guess I'm trying to take this from an entrepreneurial standpoint. It would be less common to just build a shortcut and try to sell something off that. But probably more common to use this as a strategy to just enhance existing projects.
00:23:49.964 - 00:24:02.960, Speaker B: Yeah, yeah. It's been used by new, you know, new projects that might, might be resource, you know, resource limited. They want to like build, you know, quick on ramping for the token.
00:24:03.152 - 00:24:03.592, Speaker A: Yeah.
00:24:03.648 - 00:24:16.124, Speaker B: So they'll use bridge and swap contracts. I mean we've also seen just people like I mentioned before, like they do this action themselves and they just want like a contract that they could use and trust.
00:24:16.484 - 00:24:17.196, Speaker A: Yeah.
00:24:17.340 - 00:24:29.780, Speaker B: And the reason that's important is because when you're going from different ecosystems, from l two to l two and you're traversing different uis, there's, there's a danger lurking there. That's fishing.
00:24:29.812 - 00:24:33.104, Speaker A: Yeah, no, that's, that's a really good point. Yeah.
00:24:33.884 - 00:24:43.354, Speaker B: And they just want to, they want to confidently be able to send e to a known contract that does a known function for them all the time, which is bridging and swapping.
00:24:44.174 - 00:24:49.794, Speaker A: Yeah. Okay. Yeah, that's, oh, sorry, I'm interrupting you.
00:24:50.534 - 00:24:54.510, Speaker B: No, no, you're good. I know we're coming up on time, but.
00:24:54.582 - 00:24:55.234, Speaker A: Yeah.
00:24:55.774 - 00:24:56.102, Speaker B: Okay.
00:24:56.118 - 00:25:02.486, Speaker A: If I can ask you one last question, can you just like briefly touch on Bundler like as a use case?
00:25:02.550 - 00:25:35.934, Speaker B: Yeah, yeah. So bundler as, as a use case is. Let me just go to. So you can click on token bundles. And here it's kind of the same process, except when you input the token, it's going to allow you to input multiple token addresses. And what happens is once you deploy the contract, when you send e to the newly deployed token bundler contract, it buys multiple tokens at once. You buy two tokens, three tokens, five tokens, whatever, however many tokens you want to paste in.
00:25:35.934 - 00:26:38.594, Speaker B: Why is that interesting to builders? For several reasons. One is they want to perhaps create bundle strategies or theme strategies. For example, buy defi theme tokens on linear or buy gaming themed tokens on linear and they want to create bundles for that. The second use case is, let's say that you follow a trader or a popular person that you've seen do well with investing in tokens or trading tokens and you've been following them and you've been getting education from them on some social media or Twitter or whatnot or podcaster and you want to copy what they have in your wallet so you can recreate somebody's wallet and have exact proportionality of tokens via this token bundle contract.
00:26:40.774 - 00:27:13.204, Speaker A: Wild. Okay, very cool. So there's a really strong personal use case for being safe and secure, but also from a builder perspective of, I guess, whatever project they might be working on, if they care about strong ux or automating some things. I think the cadence thing was a really interesting thing that you put out that I hadn't thought of like repetitive tests on this as a mechanism to do that. So yes, okay, cool. We are at time. I'm so sorry for like I guess going over.
00:27:13.204 - 00:27:19.376, Speaker A: Is there anything else you want to say? Otherwise I will release you from this.
00:27:19.520 - 00:27:57.824, Speaker B: Well, first of all, I want to say thank you, Emily. You've been great and gracious for inviting me and allowing me to, to community. But what we'll leave off at is, you know, we're, we have a lot of work to do. We're a young team, small team. We're just at the beginning of our building journey ourselves and we want to hear from, from you guys who are listening, who are, who have thoughts on what you want to see built, what you need help with. Which is why I think it's a great opportunity to join our builder program, which is the one, you know, the link I shared with our docs. But is it possible to leave them off on that link?
00:27:58.124 - 00:28:04.984, Speaker A: Yeah, yeah, yeah. I mean, I flashed, but I can also send it out afterwards.
00:28:06.004 - 00:28:16.268, Speaker B: Yeah. We want to hear from you guys. We want to learn, like, get your feedback and improve ourselves. So looking forward to hearing from everyone. Thank you.
00:28:16.316 - 00:28:31.564, Speaker A: Awesome. Okay, cool. Well, see you around. I am so excited. Oh, I guess last piece. We are running our May Dev Cook off right now on linea. So what that is is a monthly hackathon of which one of them is we want to see what shortcuts people are building.
00:28:31.564 - 00:28:44.176, Speaker A: So also, don't forget that. Yeah. Yeah. So, I mean, building a shortcut with Linia qualifies you for a piece of the one east prize pool. So this is a super easy way to get into submission.
00:28:44.240 - 00:28:44.884, Speaker B: Awesome.
00:28:45.384 - 00:28:47.624, Speaker A: Cool. So thank you so much.
