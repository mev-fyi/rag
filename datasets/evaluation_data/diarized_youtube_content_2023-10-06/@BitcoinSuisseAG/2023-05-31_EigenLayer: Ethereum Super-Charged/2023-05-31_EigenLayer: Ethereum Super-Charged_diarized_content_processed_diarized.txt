00:00:06.840 - 00:00:34.370, Speaker A: I'm joined today by Sriram Khanan, associate professor at the University of Washington. He's also director of Blockchain Lab and founder of Eigen Layer. Eigenlayer is one of the most talked about upcoming projects in Cryptoland, and it will likely enable basically the next wave of innovation. You will see why in that interview, and therefore I welcome Sviram and thank you for taking the time today.
00:00:35.510 - 00:00:43.450, Speaker B: Well, thank you so much, Dominic. It's my pleasure to be here doing this podcast with you and have an opportunity to speak to the bitcoin space audience today.
00:00:44.350 - 00:00:58.536, Speaker A: Great. Let's maybe start with a brief introduction, talk a little about your background and the path towards crypto. And also I'd be keen to know how you came up with the idea of Eigenlayer.
00:00:58.728 - 00:02:00.248, Speaker B: Yeah, I'd start the story five years back. I was working on human genomics at the time, and switched from that to start working on crypto and blockchain. And my main thesis for why I wanted to do this was that blockchains I saw to be coordination or cooperation infrastructure, just like the Internet is the information infrastructure or the information superhighway. And when you connect all the people through the Internet, you get everybody participating in the communication. But still, trust is a major bottleneck which prevents cooperation. And blockchains are a natural evolution where if you can remove the trust bottlenecks, you can have many more people interacting more productively, forming new kinds of organizations and structures which lets people coordinate. And I think that is a major upgrade to us as a human species, because the fundamental evolutionary advantage of humans is actually our ability to cooperate flexibly in large numbers.
00:02:00.248 - 00:02:47.760, Speaker B: And I see crypto and blockchain as a major upgrade in that scenario. So when 2018, I got into blockchains, I know I did have a background in peer to peer systems from long back. My PhD in 26 to eleven was in peer to peer wireless systems. So I was immediately drawn to some of the core technical challenges in the blockchain space, which is how do you improve the throughput? How do you reduce the latency? How do you make these systems much more scalable? How do you make them game, theoretically more secure? All of these kinds of things. I've been fascinated about those questions. Our initial journey was, hey, let's come up with new consensus protocols, new scalability layers, new primitives that can be then adopted by all of these different systems. When we built the first one was called prism at that time, which was a mechanism to scale provable blockchains.
00:02:47.760 - 00:03:26.570, Speaker B: We went around and talked to different teams. Like, we went and gave a talk at the scaling bitcoin conference and we did not know these communities well. And I had naively assumed that if people see a good idea, they're going to immediately jump on it. But the way the governance and immutability of these systems work, it's much, much harder to upgrade these systems. And then we went and talked to Ethereum. Ethereum is like, oh, this is interesting, but maybe it takes like five years to get to something interesting. And there is like five ideas that we are interested in.
00:03:26.570 - 00:04:20.856, Speaker B: Maybe this is one of them. So essentially, as we talked to different projects, it became clear that there are actually many, many good ideas out there which haven't yet made it into the kind of the most widely used crypto and projects because of a governance bottleneck. The governance bottleneck is that if there are 30 ideas for how to upgrade a blockchain, only one of them can actually then be implemented. So while a lot of the value proposition of programmable blockchains like Ethereum was essentially the ability for people to innovate at the application layer permissionlessly, if you want to build a uniswap, if you want to build a compound aave any of these interesting things, you don't need to get anybody's permission. You can just come up with contracts and throw them on top of Ethereum. And you yourself don't need to be trusted. In fact, only the blockchain needs to be trusted.
00:04:20.856 - 00:05:16.278, Speaker B: People just need to trust your code base, and that's good enough for you to, for many people to then start using your system. So this, I call this principle the separation of trust and innovation. Trust comes from the blockchain, innovation comes from the application creator. But when you go deeper through the application stack, when you go into consensus protocols, scalability, data availability, oracle bridges, any of these other core infrastructure, they all need their own trust networks. And particularly from my own vantage point, we had these cool ideas about how to change consensus and all of these things, and we had nowhere to deploy them. And the only way to create a new consensus protocol was to start a new solana or an avalanche or Algorand at that time. And so we felt like, you know, professors, you know, and there was this federated term at that time called, you know, Prof.
00:05:16.278 - 00:05:56.620, Speaker B: Coins, which is like professors starting new blockchains and new coins. And I think it was out of necessity, because professors work on infrastructure, and infrastructure projects need their own trust network. And trust networks means like you have to have your own new token. So that that was the system that was prevalent at that time. And we thought this was an insane barrier for many, many people. And this essentially led to what now is Eigen layer, which is how do we take existing trust networks like Ethereum and supply it to anybody who wants to build anything on top of it. So that's the idea of eigen layer, and I can, of course, dive much deeper into it.
00:05:57.400 - 00:06:49.086, Speaker A: Okay, cool. That was already a comprehensive answer. So basically what you're saying is that this decentralized trust layer from Ethereum, that was basically previously exclusively available to Dapps in a permissionless fashion. Now with this restaking primitive and enabled by eigenlayer, it now opens up to all sorts of middleware. Maybe you already mentioned some. Maybe you can give us a tour through all of these possible services that might soon plug into Eigen layer set of smart contracts in order to source this security and also just to get our followers on board. What problems do we actually solve by doing that?
00:06:49.238 - 00:07:31.746, Speaker B: Yes. So what I'm going to do is I'll just start about what is the goal of Eigen layer, how Eigen layer accomplishes it, and then what you can build with it. So first I'll start with what is the goal of Eigen layer? I think I briefly alluded to it, which is that we want to expand the scope of permissionless innovation. Where can you innovate permissionlessly without actually taking anybody's permission? And one way to think about it is how did Ethereum enable it? Ethereum enabled it by creating what I call a marketplace of decentralized trust. All of us talk about it. In the crypto economy, one of the core components of the crypto economy is block space. What is block space? Block space.
00:07:31.746 - 00:08:13.844, Speaker B: Block. The ability to say that in Ethereum, there is a certain notion of what is a block, and many, many blockchains, there's a notion of what is a block. And in a block you can fill it with contents. And because there is contention and competition on people using it, there is a certain price that is formed around the block. So you can think of this as a marketplace for decentralized trust. There is a decentralized trust network that is underlying, let's say, ethereum. Then what is happening is there's a consensus protocol and scalability layer, and all of it, and a virtual machine, all of which mediate this particular decentralized trust, which uses decentralized trust, and then emerges something called block space.
00:08:13.844 - 00:08:51.254, Speaker B: And now that you have this notion of a block, anybody, any application, can come and consume a portion of this block by paying the appropriate fee for it. The economy that is built is that you are as an application, you're consuming trust like from Ethereum, and therefore paying a fee. So the economy is a trust economy. So you're selling trust. But trust has now been refined through all these particular primitives. The consensus protocol, the virtual machine and the block limit and all of these things together basically specify a market for decentralized trust. You can think of this as selling a refined form of decentralized trust.
00:08:51.254 - 00:09:13.152, Speaker B: Like decentralized trust is the crude oil. And then you refine it and then you get like this refined product, which is block space, which is what Ethereum sells. There's a really interesting viewpoint, because if you ask it like that, ask it like that. Ask it. Add is the marketplace for crude oil. Can I just take decentralized trust and then sell it raw? That's what eigen layer tries to accomplish. And I explain how we try to accomplish it.
00:09:13.152 - 00:09:50.020, Speaker B: What does it mean by decentralized trust? In Ethereum, you get trust by staking. Staking is you're putting down a portion of money like your eTh. And then you're saying that I am going to produce Ethereum blocks according to this consensus protocol. This virtual machine rules all of these things. If I deviate from it, I eat in a negative incentive mechanism called slashing. That's the core reason why Ethereum is trusted. Now, if you want to supply this trust to anybody who wants to build anything, how would you do it? That's what Eigen layer tries to accomplish.
00:09:50.020 - 00:10:33.760, Speaker B: That's what Eigen layer wants to accomplish, is to create a marketplace for general, flexible, decentralized trust, just raw trust. So how do we do it? You can start with if staking is the root of trust, so we have to somehow do something with staking in order to then pass off this trust to other people. So we invented this word we call restaking. And you could, I think, maybe even more appropriately call it as programmable staking. And what's happening is when you stake normally in Ethereum, you are saying that I'm going to validate Ethereum blocks. Otherwise I'm liable to lose my like deposit. And in return for my work and operation, Ethereum protocol gives me some fees.
00:10:33.760 - 00:11:29.422, Speaker B: So that's the economy for the stakers. Stakers putting down eth, putting their work up in making Ethereum blocks and getting a reward. What restaking does is when you stake your eth, if I can also say that I'm going to validate not only the Ethereum protocol, but also some other protocols built on top, then I'm validating the Ethereum protocol and maybe this new chain and maybe this new oracle and maybe this new data availability and all that many, many things built on top. Then you can say, now I'm not only making a commitment to validate the Ethereum blocks correctly, but I'm also making a commitment to validate all of these other systems correctly. So Eigen layer is a set of ethereum smart contracts that let you express this preference. The preference is I'm not only validating Ethereum blocks, I'm also validating all these other systems correctly. And so that's the core idea of Eigen layer.
00:11:29.422 - 00:11:55.712, Speaker B: We call this restaking because you're staking in Ethereum and using the same stake to make these additional commitments. And how you do it is there are two different paths for how to do it. One we call liquid restaking, which is actually very easy to understand. You go and stake in a liquid staking protocol. In a liquid staking protocol you stake and there is a redemption token called stake Deeth token in lido or ret token. In rocket pool. There are different liquid staking protocols.
00:11:55.712 - 00:12:48.620, Speaker B: You get a liquid staking token, you take the token and deposit it into eigen layer contracts and then say, oh, I am validating for these like ten other systems or five other systems or whatever you want to opt into. And you as a staker would opt into systems so that you're actually earning enough fees for the work that you're putting into. If a system offers less fee than the work you're putting into, you're not going to opt into it. So that's the basic like economics of the free market of eigen layer. So you have when you stake into restake into eigen layer using, you can take any of the liquid staking tokens and then deposit it into the eigen layer contract and then specify what you're validating for. So that's a basic simple primitive, but if you expand beyond, beyond that, we also allow what we call native restaking. What is native restaking? You stake in Ethereum, you don't want to go through some other third party liquid staking protocol.
00:12:48.620 - 00:13:16.306, Speaker B: You don't trust them or you don't like them or you just want to do it yourself. You want to like have, want your friend to do it, whatever it is. So what you do is you take your stake, you take your in. When you deposit it into the Ethereum contracts, you set a withdrawal credential and the withdrawal says who is allowed to withdraw it. Instead of, normally you would say, I'm allowed to withdraw it. Instead, what you say is the Eigen layer contracts are allowed to withdraw it. And in the Eigen layer contract, you say that you are allowed to withdraw it.
00:13:16.306 - 00:13:47.874, Speaker B: So basically the withdrawal goes from Ethereum to the Eigen layer contracts back to your wallethood. So you're adding like one step in the withdrawal process. And what it does is because you're adding this one step. Now, the Eigen layer contracts have a potential or a permission to impose penalties on you if you misbehave. If you don't misbehave, you're going to be able to withdraw all your REIT according to the rules of the contract. So that's the, how the first one was, why we're doing angular. Now, we talked briefly about how we're doing eigen layers.
00:13:47.874 - 00:13:51.510, Speaker B: Any questions on either of these things before I move on to what you can build with it?
00:13:52.970 - 00:13:59.950, Speaker A: Actually, I have some specific questions, yes. But maybe we come back to that later. Okay.
00:14:01.690 - 00:14:03.666, Speaker B: Yeah, that's awesome. No, that's awesome.
00:14:03.698 - 00:14:57.864, Speaker A: Okay. Yeah, because maybe you can also expand on the, on the range of services that are possible. Because, like, I mean, you mentioned a few, like oracles and things like that. Because, as I understood, like, the design space, eigen layer basically enables this to me, it's very impressive because it opens up kind of a new dimension of possible text x. Right. As an example for, like I have, I love the idea of mentors, for example, for example, like the roll up, you most likely know it, but I think it's super cool that you can simply combine all the good stuff you want into one super flexible modular solution, but with the massive benefit of inheriting the security of Ethereum. Right.
00:14:57.864 - 00:15:12.414, Speaker A: So maybe you can elaborate a little on the, on the range of middleware that we can now secure and other even more like, examples where this new degree of freedom enables new innovation. Like mental, for example.
00:15:12.462 - 00:15:51.720, Speaker B: Yeah, absolutely. No, thank you so much for bringing up mental ill. I'll comment a little bit on it as we go on. So what is the degree of freedom for eigen layer? What set of things can you build on eigen layer? So I want to just start with, when would you call something a crypto solution or a blockchain solution? I think the core ingredient of being a blockchain solution is it somehow uses decentralized trust. If you use decentralized trust, you're a kind of blockchain solution. If you don't use decentralized trust, you're potentially not a blockchain solution. So that's what I call a decision boundary.
00:15:51.720 - 00:16:34.738, Speaker B: If decentralized trust is the core ingredient into making of a blockchain solution. And Eigen layer is a marketplace for general purpose decentralized trust, you can see the potential fusion there, which is that any idea that you want to express which requires decentralized trust in a way in which it is not available today, you can use Eigen layer. So that is the basic scope. And then I can go into many examples. Let me start with the first one, which is why I started Eigen layer in the first place is new consensus protocols. Ethereum has a consensus. A particular consensus is actually very well designed, very thorough, very thorough.
00:16:34.738 - 00:17:18.820, Speaker B: Time of Ethereum is twelve minutes. Okay, suppose you come up with a new consensus protocol which can achieve finality in 1 second. That would be awesome. There are new blockchains, like Solana and Sui and others who are trying to optimize on some of these features. And the question is, what if I can get the massive security of Ethereum underwriting these new consensus protocols? Okay, now you can build any consensus protocol instead of going, hey, I need to figure out how to get new trust network, new token, and create all the hype around it. You have already a solid backing security system, which is Ethereum staking. Just get the Ethereum stakers to opt into your system and then provide validation.
00:17:18.820 - 00:18:12.780, Speaker B: And now you have a super high throughput consensus protocol running on Eigen layer. So this is a very simple, clean example. So basically the scope of anything you can build with the new l one, you can build on Eigen layer. So that's the starting point. Okay, now, so what is happening right now in the blockchain phase is everybody, when, when they're saying, oh, I need this feature, therefore I'm building this new protocol. But there are a lot of other features in Ethereum, and users and apps and everything that are nothing that won't compose with this new feature. So each feature is being built in a silo, right? Our vision is that instead of each feature building built in its own silo, and you have to bootstrap a whole new blockchain for just one feature would be built maybe already at this Ethereum staking and then if we build, many, many people come and build interesting features on top of the Ethereum staking.
00:18:12.780 - 00:18:51.552, Speaker B: These features can all concatenate to form really interesting, powerful services. And what kinds of features are we talking about? So if you're a roll up, for example, you write data to Ethereum because you have to publish the data for anybody to double check your calculations and stuff. And so you normally write it on Ethereum, but if you had the Ethereum stakers participate in a data availability layer. But if this data availability layer is designed in a different way, you could have much more scalability. That's one of the first things we're doing. We took the Ethereum roadmap. There's something called Dunk sharding coming up in a three year period.
00:18:51.552 - 00:19:35.498, Speaker B: We already have basically built a version of dunk sharding, but as an opt in feature which is called eigen da. Eigen Da is Eigen data availability. So basically it's a layer which uses the eigen layers, decentralized trust, which is Ethereum staking, and then let you know. We ourselves have built an example which is a data availability service. And this can massively improve, like the data bandwidth of rollups. Today the Ethereum data bandwidth is 80 kb/second we're already operating at ten megabytes per second in our test network on eigenvalue. So that's an example of 200 x scaling, but we think actually there's another thousand x scaling to be obtained in the next few years by having more people compete on these architectures.
00:19:35.498 - 00:20:25.526, Speaker B: So that's our, so that's a data, a data layer for rollups is an example. Now, I think you mentioned mantle. Mantle has been our close design partner in using Eigen Da. So mantle is a general purpose roll up, which brings some aspects of the opstack, some aspects of Eigen layer, some aspects of new decentralized sequencing. All of these tied together into a flexible modular stack. And in fact even they are, they're thinking of starting with an optimistic roll up, migrating to a ZK roll up over time. So the design space there is, when you think about designing a roll up, what are all the other ecosystem features that you need? I talked about data availability, you can think of.
00:20:25.526 - 00:21:12.514, Speaker B: The other one is decentralized sequencing. Right now, layer tools have a single node which orders all the transactions. And so very contentious process. And like you're pointing out, many people don't like it and for good reasons, right? Like we build. And you know, the thumbs down that you gave there is actually an indication of what I just said in the beginning, which is that a solution when it relies on decentralized trust, we call it a block call it a block call. If it has any point of centralization, all our like, alarms go off and we are like, hey, you know, it's not really using decentralized trust. So now, sequencing is an example of, hey, I need to use decentralized trust and eigen layer kind of, you can build a sequencing solution on Eigen layer that many, many roll ups can say, oh, I'm not ordering my transactions.
00:21:12.514 - 00:21:55.988, Speaker B: These stakers ordering the transactions and then giving it to the roll up. So decentralized sequencing is an example. We already have a design partner called Espresso, which is a really strong team out of Stanford cryptography and so on. And they are basically building a super fast sequencing layer on Eigen layer. So that's an example of service on. Then you come to, what are the problems? Do rollups have optimistic rollups have a seven day withdrawal lag? We know it's needed for the full safety of the protocol. The thing is, as soon as a roll up writes the data to Ethereum, if you have the computational power, you can verify its correctness or otherwise of that roll up.
00:21:55.988 - 00:22:38.382, Speaker B: What you can have on Eigen layer is if enough rest takers opt into a bridging service. And what would be a bridging service? Bridging service would run the roll up transactions and see what the correct state is and certify on it. Then you can move the data across rollups, data from rollup to ethereum, all of these things at a much, much lower latency. As soon as the Eigen layer committee puts up enough collateral behind that data, because you know that if that was wrong, those guys, like a lot of it, is going to get slashed. And that's a superpower. So you can solve the bridging problem for roll ups using Eigen layer. And we have many teams actively working on designing different bridging architectures on Eigen layer.
00:22:38.382 - 00:22:43.810, Speaker B: So that's another example of what you can build on Eigen layer. Any questions? Comments?
00:22:44.190 - 00:23:25.570, Speaker A: Wow. Okay, that's very impressive and kind of a lot to digest. And also, don't get me wrong, I love roll ups. But yeah, as you said, it's kind of still in its. Most of them are in its infancy, and they all have their training wheels on. And I feel like kind of eigen layer could be a massive catalyst and accelerator in order to get to a satisfying state sooner rather than later. And yeah, as I understood, basically all boils down to this decentralized trust layer, right? And you mentioned it previously, talking about oil.
00:23:25.570 - 00:24:16.584, Speaker A: I wrote down like that, the economic security essentially now becomes a multi purpose commodity, right? And now to enhance our conception, maybe you could give us an idea about what is this like also non fractionalized crypto economic trust or crypto economic security that basically or primarily Ethereum offers right now? And why is it so important to blockchain networks? And also maybe to add on, why is it so hard for other layer ones basically, or other smart contract platforms to build such a capital heavy trust layer? As of now, it's basically Ethereum, right. That kind of stands out.
00:24:16.752 - 00:25:34.916, Speaker B: That's right. So I think the reason is great questions, by the way, and as I love the comment about basically decentralized trust now becoming a commodity, and you alluded to the crypto economics of this, and I think maybe we can dive a little bit into that. So when you're asking somebody to stake their like eat or any other token for a certain long period of time, essentially what you're seeing is that, hey, you know, I'm, there is a kind of cost of money, which is that like I have this money and then like I could be doing other things, I could be putting it into a CD or like a deposit or into a treasury note or whatever other things in the world. Instead Im actually holding it in a staked position. So what this means is firstly, why are we doing this? Were doing this because the economics induces trust. Because you know that if a service, if a dapp on Ethereum misbehaves, which means if it does things that its not supposed to, that means like some Ethereum block producers violated some conditions, which means like they are liable to lose their eth, which you know, 35 billion to 40 billion worth of ether state. So that's a lot of money is going to get slashed, slashed.
00:25:34.916 - 00:26:37.316, Speaker B: This is a very, very capital intensive thing. And what is happening today with the layer ones is that each layer one has its own capital asset, which is you stake this new l one token and you are basically now be a validator for this network. The fundamental economics there is if you want to build a new layer one and have like $35 billion, let's say $40 billion worth of stake in your new l one, then you need to be providing a 5% APR or something like that, five to 10% APR in order for that to be productive. So if you talk about like a 40 billion staking and a 5% apR, like that's a huge amount of money, that's $2 billion annually. You have to pay in fees like who has $2 billion to pay? Like the stakers. That is a fundamental problem. So you have to be generating enough cash flow to actually sustain a certain amount of staking.
00:26:37.316 - 00:27:29.060, Speaker B: So how is Ethereum able to sustain this large amount of staking because Ethereum has aggregated a lot of apps. No one app can pay $2 billion annual fees, but many, many apps together in a union are paying enough fees to aggregate it enough to actually create this fee revenue. So which creates more staking and more staking. So the ethereum economy is that like, the more the dapps that are built on top, the more secure the Ethereum staking layer becomes. The more secure the staking layer becomes, the more the Dapps want to build on top. So you have this positive flywheel, which is actually turbocharging the Ethereum landscape. And as a competing layer one, it's going to be very difficult for you to basically reproduce all of these network effects, unless.
00:27:29.060 - 00:28:24.788, Speaker B: Yeah, so it's going to take a lot of time to actually get the same flywheel going. But what Eigen layer does is even more turbocharges this loop. And the way it does it is saying that not only Dapps are sharing security now new layer ones, or like, new consensus protocols, new oracles, new data availability, new decentralized sequencer, new bridges, new MEV management, everything shares security. What that means is now all the fee rolls back to eth. And the more it gets staked, since the more it gets staked, the more security in a common layer. The more security in a common layer, the more services want to build on top. So just like I turbochargers, instead of trying to create a new silo, it finds a place which is working in the crypto ecosystem, which is the Ethereum staking flywheel, which is the more staked, the more services, the more services, the more staked just broadens what a service is.
00:28:24.788 - 00:29:16.194, Speaker B: Instead of a service is basically just a DAP, which is built as a EVM smart contract. A service is anything that requires decentralized trust. It just completely opens up the Ethereum economy to participate in any idea that anybody can come up with. So that's the transformation of that eigen layer to us, and instead of now living in small silos. So another way of thinking about it is each of the DAP on Ethereum may by itself, let's say that just for simplicity, there are 40 dapps on Ethereum, and each of them can sustain like $1 billion staking if they're living by themselves. But because they come together in a common security framework, they can sustain now $40 billion staking, because there is 40 into $1 billion staking that can be sustained. And the same effect now holds for every possible thing in the crypto landscape.
00:29:16.194 - 00:30:18.360, Speaker B: Anything that requires decentralized trust can now aggregate onto a common security layer, thus turbocharging like one place where we have common security and a variety of services that are built on top of that common security so that users or end user facing applications can now decide to use which set of services. I'm using this sequencer, this data availability, this consensus, and all of this, and then tie them together. It's kind of like in the cloud era, like AWS was the cloud, and now there are many, many services on top. Like you have a SaaS service, a software as a service for like identity, like you use clade or something. You have a software as a service for payments, which is stripe. You have a DB as a service and you just tie all of these together and build your end user application. And that's the same thing we want to replicate in the crypto economy, which is that when you're building a user facing application, you should not have to build all the things, you should not have to build a new consensus, a new scaling, a new all of these things.
00:30:18.360 - 00:30:30.420, Speaker B: Instead you just tie all of them together in a very flexible semantics and then now you can actually build whatever end user application that you want. So that's the worldview that we're looking forward to.
00:30:31.480 - 00:31:12.540, Speaker A: Okay, yeah, super, super exciting. Especially like the mechanisms around these flywheel effects. I mean, you basically see them a lot kind of in Ethereum also with their developer base. Right? I recently wrote about like as they have the most developers, like you have the most flourishing deFi protocols on top of it, and that attracts users again and so forth. Basically. Maybe we could quickly shift over to the topic user experience kind of. I know it's very challenging for eigenlayer right now.
00:31:12.540 - 00:32:07.918, Speaker A: I followed the Testnet and now the mainnet announcement to align these different entities, which are stakers, operators and services. And now I'd be keen to what we are keen to know, how does it look from a user experience point of view, if I'm a staker, you already mentioned there are different methods, native, liquid, do they also have different risk profiles? Also, if I stake natively, what is the eigenpot? Maybe you can elaborate on that. And on the operator side, I am not fully sure if I craft the state full picture yet, because I wonder, how does it exactly look like as an operator? Can I still validate on mainnet and on Eigen layer? Or like how is it exactly looking like?
00:32:08.054 - 00:32:50.852, Speaker B: No, there's a lot of questions and some we are figuring out, but the high level is that there are three kinds of participants in our ecosystem stakers, people who bring their ETH and or, you know, either the ETH could be a native staking or it could come from liquid staking. Then we have node operators. Node operators are those who are actually validating the services for, you know, running and like if it's a data protocol, downloading and storing the data. If it's a consensus protocol, running the node that participates in consensus, whatever the node software is, they are running it. So that's a operator. It could be that the staker is the same as the operator. So operator is just a role.
00:32:50.852 - 00:33:17.384, Speaker B: If you want to be, if you want to say that, hey, I'm Dominic, I don't want to trust any of these operators. I just want to do it myself. You're welcome to do it. So Eigen layer does not enforce a fixed operator set. It's a flexible protocol where anybody can basically participate as their own operator. You have the stakers, you have the operators. And then the third side is you have services, you have the oracles, bridges, chains, whatever set of things that need to be built on top.
00:33:17.384 - 00:33:55.328, Speaker B: So it is a pretty complex ecosystem to create. So what we are doing in our launch strategy is we are launching the protocol in phases. It's not like the whole ecosystem gets built in a day. What we do is we would start with staking like stakers can participate. Already we have a public testnet called the stage one Testnet, which is essentially stakers, restakers can participate. And I think you alluded to, how do I participate? As a native restaker? If youre a liquid restaker, you just take your liquid token and then deposit it. You connect your wallet and deposit it.
00:33:55.328 - 00:34:40.852, Speaker B: Its easy. So if youre a liquid staker, what you do is inside the Eigen layer system, you create something called an eigenpod. An eigenpod is like your own mini space inside the Eigen layer universe. So the Eigenpod basically says, hey, here is a kind of subcontract on the Ethereum contract system that you control. It's very important that you control it because what you're going to do is you are going to set, when you go to Ethereum and you want to stake natively, when you stake natively in Ethereum, you are going to say that the withdrawal address now goes to your eigenpod. So you come to the Eigen layer system, smart contract system. You create your own eigenpod, which is your own kind of mini spot in the Eigen layer universe.
00:34:40.852 - 00:35:28.868, Speaker B: And then when you set your withdrawal credentials, you set it to your own eigenpod, because you control the withdrawal from the eigenpod. Now, essentially the flow is money goes from the Ethereum staking. When you withdraw it, it goes to your eigenpod, from your eigenpod, you'll be able to withdraw it. The only condition when you may not be able to withdraw your full money from your eigenpod is if you opted into a service on Eigen layer and that service had a particular slashing condition, which is it should not be. When you say that you're storing data, you should be storing data. Or when you're validating a consensus protocol, you should not run a malicious software that signs two versions of the block or whatever, some kind of like a slashing condition. If that slashing condition is triggered, you may lose a portion of your ETH due to slashing.
00:35:28.868 - 00:36:04.800, Speaker B: But otherwise, you'd be able to withdraw from your Eigenpod all your ETH, as well as any rewards that have accrued into your like pod. So that's the Eigenpod system. So it's an Eigenpod is a subset of the Eigen layer universe that you create for yourself. And you can point your, you go to Ethereum, and then when you in your node software, you have to set your withdrawal address, you set it to your eigenpod. So you can have many, many validators set the withdrawal address to the same eigenpod. But I think that's the core idea, is that you have this concept of eigenpod on Eigen layer.
00:36:05.820 - 00:36:06.708, Speaker A: Okay?
00:36:06.884 - 00:36:52.050, Speaker B: So understand, in terms of the differential risk profiles, there's no fundamental difference between liquid restaking and native restaking. In terms of different risk profiles, they are pretty similar. It's just you use liquid staking. If you already trust a liquid staking provider, you would use native rest taking. If you don't want to give a cut off your fees to the liquid staking provider, or you don't trust any of them, or you already have your own setup, whatever, or you want to be a home staker on Ethereum for any of these reasons. You want to be a native restaker, but you can, you can be a home sticker on Ethereum. And when you set your withdrawal address to the Eigen layer contracts, you can delegate your Eigen layer services to other people.
00:36:52.050 - 00:37:38.650, Speaker B: So that is also possible. So Eigen layer is a very flexible system. So it doesn't say that, but also if you want to run services yourself, you can run it yourself. So you also asked this question about node operators, whether node operators are only validating for Eigen layer, or they're also validating for Ethereum. They have to, of course, if you're an operator and you take in an LSD, a liquid staking token. So if you take in an LST as an operator, you only need to operate like for whatever services are built on Eigen layer. But if you're also like a native staking operator, you're also providing additional services on Eigen layer, then you would of course validate both.
00:37:38.650 - 00:38:19.440, Speaker B: You run basically both the ETH node on the one side and also any Eigen layer services that you have opted into. So we are building a general purpose interface for operators. Now, the problem for an operator is there are going to be tens of services that they are validating, maybe hundreds or thousands in a 510 year period in that world. You have to now download and run these tens of services. We provide an interface by which you can actually manage software upgrades and all of these things for these many services. We're working closely with Nethermind, which is a kind of cutting edge protocol team in the Ethereum landscape and in designing some of these interfaces.
00:38:20.540 - 00:39:17.198, Speaker A: Okay, cool. A question that fits to that explanation, basically, you also mentioned it several times now already, is the aspect of slashing. I wondered, how does that exactly look like in eigen layer? And could there evolve some minor or major risks if too many things are intertwined? Kind of what I'm keen to know with the slashing aspect is basically what happens if I get slashed as an operator or as a restaker. Like is, for example, if I get slashed from the service, is the rest of my, is that, is that stake still kind of validating mainnet then? Or what happens? Why is it just lost in the, in the Eigen layer smart contract set?
00:39:17.374 - 00:39:56.448, Speaker B: Yeah. Okay, so Eigen layer slashing is designed to be very, very conservative, which means slashing only occurs if there is a malicious action on the Eigen layer system. And what do I mean by malicious action? It is I opt into a service and actually I claim to store data. I don't store data. And when the Ethereum smart contract asked me to produce my portion of the data, I don't produce it. Or I should never sign two blocks for a given like block number, but actually go and sign it. Why? I'm trying to do an attack or something.
00:39:56.448 - 00:40:54.648, Speaker B: So these are extremely adversarial stakers because just to zoom out a little bit, why do we have slashing in the first place when you're trying to build a completely pseudonymous economy, which is what most of the Ethereum and the blockchain crypto, broader crypto system is trying to do is when you're trying to build like a pseudonymous economy, you need conditions of compliance programmed in. Right. A staker opts in and then he's trying to do an attack. That's not a kind of like a thing that you, there's no use for a service to say that they're getting trust from Eiger layer. When a staker can come in like completely attack the protocol, they're not getting trust, they're actually getting antitrust. So that's a kind of thing that we are actually careful about. So what happens is Eigen layer slashing is designed to be firstly programmatic, which means it's actually programmed into the contract.
00:40:54.648 - 00:41:33.246, Speaker B: What the slashing condition is. When you're opting into a service, you know what the condition that you should not violate. And normally if you just run the node software of that system, you will never violate that condition. So that's an assurance. Okay, so now you're running the system and I, maybe there is a bug in the ethereum, smart contracts that actually encode that logic, and you do get slashed, there is an additional protection we call the slashing veto committee. The slashing veto committee is basically just judging whether the slashing contracts have a bug or not. If there is a bug and you get slashed due to a bug, they can veto out the slashing.
00:41:33.246 - 00:42:11.008, Speaker B: They cannot add new slashing. They can only remove a trigger of slashing that comes from the contract. They can remove it. So we want the stakers to feel protected, but we also want services to get an assurance that the stakers are doing, the node operators and stakers are doing the right thing by actually running the correct software instead of running malicious software that tries to attack the services. That's the Eigen layer system is slashing is designed only for extreme things where you're trying to attack the protocol. It's not for things like, oh, I got lazy or I switched off the system or any of that. You don't have hard slashing for it.
00:42:11.008 - 00:42:55.970, Speaker B: You'll only lose your rewards. You may get evicted from the service and lose your rewards, but you won't get slashed, number one. Number two, as you opt into some of these services, you actually have protection not only from the services, but also from a common slashing veto committee, which initially we will appoint. And over time it will be like a market based thing where many people can provide like this as a service. So that's the core security model of Eigen layer is you are actually, if you do your due diligence on the contracts, on the services, then you would not get slashed without violating the covenants. But furthermore, there's a protection from the slashing committee.
00:42:57.560 - 00:44:05.970, Speaker A: Okay, very interesting. I'd like to spend one more question on risk, because we see this, like restaking, we see similar mechanisms, for example, in traditional finance. Right. It's basically kind of a form of leverage. And I saw you talking or previously mentioning it was in another podcast, I think that there's currently no standardized theory of leverage and associated risk because, for example, like you said, basically, I just checked ultrasound again, like Ethereum currently secures like ten x the amount that it actually has staked within its deposit contract. So I wonder, if we add Eigen layer to that system, how far can we push that leverage border, and where does it get really dangerous, kind of as there is no theory yet, how do we know without blowing up everything?
00:44:06.470 - 00:44:57.616, Speaker B: That's a great question. So the question is whether, how do we calculate leverage in a staking system by itself, and how restaking changes the landscape of leverage. So I want to kind of separate it into a staker perspective and service perspective. Okay, so first, from the staker perspective, the leverage that you're taking on Eigen layer is very, very different from a leverage you would take on a Defi protocol. Why is this in eigen layer, when you meet, when you stake, and you're saying that I'm validating 30 protocols or even 30,000 protocols, in the craziest case, you know what you're opting into. And as long as you, as a staker and a node operator are not malicious, you will not lose even 0.1 e.
00:44:57.616 - 00:45:48.832, Speaker B: Okay, so the risk that you're taking is completely endogenous. You know what you're doing, and you can control your node behavior. But imagine you go to a margin lending protocol and take a ten x leverage or a 30,000 x leverage, then what you're doing there is the price moves by 10% or 0.001%, you lose all your money. So the risk that you're taking on leverage is exogenous, right? Like you don't control the market price of ETH or whatever, like ETH to USD or anything that you're doing in the borrowing protocol, but you absolutely have 100% control over how you're validating your node for all these services. Firstly, I want to just segregate. Defi risk is not the same as Eigen layer.
00:45:48.832 - 00:45:51.696, Speaker B: Risk is fundamentally a completely different object.
00:45:51.888 - 00:45:52.480, Speaker A: Okay.
00:45:52.560 - 00:46:25.100, Speaker B: Okay. So from the viewpoint of the services. There is some considerations. Okay, so what is the consideration? I think that's what the leverage calculation that you're talking about is on Ethereum. Dapps together have a TVL maybe in 500 or plus billion dollars. Ethereum has maybe $30 billion taking. So that's the ratio that we're talking about, 1012 x, that you have a much higher TVL than the amount that is at stake.
00:46:25.100 - 00:47:27.630, Speaker B: That seems to be leverage, and it seems to be risky. That's the thing that I was talking about in other podcast, that we don't have a standardized theory of leverage. So the core thing going on is that in these kind of systems, in a staking system, essentially every new Dapp is adding to your TVL. Imagine somebody comes and builds a $1 trillion stablecoin on Ethereum. That just adds to your leverage massively. It's within the Ethereum programming model, but it still adds leverage to your protocol. The first thing to realize is that this issue of leverage is very similar between services built on Eigen layer versus services built on Ethereum itself, like Dapps built on Ethereum, also add to leverage.
00:47:27.630 - 00:48:05.266, Speaker B: Now that's something interesting. Now the question becomes, why is it okay for Ethereum to be like 13 x leveraged? And why is it not okay for Ethereum to be like 30 x leveraged? So that's the question that we have to study carefully. And I think we have a very nuanced understanding of this. We're going to write a series of articles on it. But the starting point, which is what I want to mention here, is that the staking, Ethereum. Staking is not protecting the entirety of the TVL Ethereum. Staking is actually protecting the volume transacted within an attack window.
00:48:05.266 - 00:49:22.026, Speaker B: So what can you do if you attack Ethereum? Right? What you would do is you would basically create a block and then go and drain them, like take the money out from an exchange or something, then create a competing alternative block where you send the money to, like some other people. What that does is that the alternative block only one of these two, you're basically sending the same money across these two blocks. And if you can kind of withdraw more money than you will get slashed, then you kind of made a profit, right? And in Ethereum, the idea is that because you have $35 billion at stake and it's not possible to the exchange, liquidity is not deep enough for you to run away with anything of that magnitude within an attack period. Essentially, that's what protects it. So another way of thinking about it is that the value that you're actually securing by running the Ethereum protocol is not the total value locked, but only the total value in transit. That is what actually, that's what the theory of leverage actually tries to calculate. Not only tries to calculate, but also give an opportunity for market participants to express it sharply.
00:49:22.026 - 00:50:09.110, Speaker B: So when you think about like, ethereum is not protecting the total value locked. It's not like a safe, it's not like a bank, bank safe, but it's actually like Ups or FedEx, right? It's only securing the value in transit. Now you have a completely different set of mechanics that you need to think about. When you go to Ups, they'll ask you, how much do you want to insure your package for? Say, oh, I want to insure it for $1,000. So if the package got lost in transit, you'd basically get $1,000 back, and you're to pay a premium proportional to the $1,000. That's the same mechanics we think Ethereum should be building and is built into Eigen layer is the idea that when you get slashed, not all the slashed money is burned. That's the Ethereum mechanics today.
00:50:09.110 - 00:50:41.670, Speaker B: But you can actually take insurance bonds against the slashed money, and you can use it to do a lot of interesting things. But that's a whole deep technical rabbit hole. But they're looking forward to actually engaging with people. Once we write these articles on understanding leverage in Ethereum, understanding leverage in eigen layer, and making sure that we build very secure systems that will actually stand the test of time. You're talking about systems that want to last for hundreds of years. You're not here to do some short term game.
00:50:42.170 - 00:51:06.740, Speaker A: Yeah, of course, fully agree. And it definitely is an area that deserves more research. I'm very excited to see the upcoming papers. But basically what you're saying is there's more overhead and we have room left. I personally love the analogy with Ups. It's very digestible. Yeah.
00:51:06.740 - 00:52:05.440, Speaker A: Okay, so we have one more question, and basically I'd like to know from you how you envision the crypto landscape to develop in the upcoming years, especially because currently, like, I know we are still in kind of a bear market, or we in the spring kind of, and a lot of people are still building. You see that so many ckdms are coming up, the modular narrative is getting stronger. Eigen layer is, in my opinion, huge project to monitor, and that might have a huge impact, basically on the whole industry. And I wonder, how do you envision basically the landscape in the upcoming years. And what do you think? Which impact will Eigenlayer have on it? And also which impact will it have on Defi? Maybe? Will we see, for example, less cross chain hex? Or does it have an impact on that as well?
00:52:06.060 - 00:52:45.860, Speaker B: Yeah, I think our hope is to expand the surface of permissionless innovation. So that is our north star that we operate by at Eigen layer. So Eigen, the name itself is Eigen in German for your own layer. So we want people to come up with new ideas. And initially, as an academic, my model of innovation was the lone wolf. Like this great scientist like Einstein comes up and comes up with a great idea. And over time, I think I've come to a model of realization, which is actually, everybody contributes very little.
00:52:45.860 - 00:53:52.082, Speaker B: And it's by concatenation of these contributions that we get something huge. And that's what permissionless innovation is. To me, each person brings their own unique ideas and improvements, but they all concatenate with each other and create this massive ecosystem, which is much more like natural ecologies rather than top down like, hey, I direct a garden as opposed to a forest that is emerging out of this. Wherever there is free energy to be eaten away, a new organism grows there and tries to eat it away. That's the same vision we have and which already ethereum lives by. But we just turbocharging this core mechanics, which is that maximize the scope of permissionless innovation. Any free energy available, there should be a space for somebody to come in and eat it away profitably so that they have an incentive in actually creating it, as well as they get a fair share of what is going on.
00:53:52.082 - 00:54:55.020, Speaker B: Okay, so thats our vision. And now your question is, how does it impact the crypto economy? I think it is going to take some time before it starts impacting the crypto economy, because our immediate consumers are infrastructure builders. Its a very unique place we are in, which is that usually when youre building a layer one or a L2, your consumers are basically like DApP builders. That's the developers that you want to onboard onto your system. Where we are with Eigen layer is we want to onboard infrastructure builders, which is oracle builders, bridge builders, which is a completely different category, which hasn't had a place to congregate yet on a given ecosystem and then start building. So we're in a unique place, which is both the positive and a negative positive because we're not competing with all these layer ones and L2s. But I it's new, so we have to figure out how to create the semantics and stuff for these different people to build on top.
00:54:55.020 - 00:56:07.130, Speaker B: But our vision is, as you have richer services building on top of eigen layer. When you're building an end user application, whether it's financial or social or identity, or any of these important stacks that we need for the blockchain crypto economy to flourish, they have a rich source of features that they can concatenate to build these systems, particularly since you brought up DeFi, which may be of interest to your audience as well. There are many fundamental issues blocking the DeFi landscape. For example, one issue that I think about a lot is, for example, if you're building a stablecoin, or if you're building margin lending protocol or any of these things, how you set the over collateralization ratio is dependent on the time to liquidation, and the time because you want to make sure that within the liquidation period, the price doesn't go down too much. So that's how you set the over collateralization ratio. And if you can get better systems, you can reduce the time to liquidation massively. For example, on Ethereum, imagine on eigen layer, you can build these kinds of things.
00:56:07.130 - 00:56:34.012, Speaker B: You can build event driven actions. Right now, there's no event driven actions. There's only user driven actions. Users have to trigger liquidations, or users have to trigger, oh, my collateral is down, I'm going to refill my collateral. Whatever set of things that users are doing, they have to do it by themselves. Instead. You had, like Ethereum stakers opt in and say that whenever this event happens, then I'll throw this transaction into the blockchain.
00:56:34.012 - 00:57:05.910, Speaker B: That's a very interesting kind of a system, where you have much better temporal guarantees. You can say that in every five blocks these events will happen. Now, you don't need to set your over collateralization ratio to depend on. You can liquidate in 100 blocks or 500 blocks. You can liquidate in five blocks. There are fundamental changes to the Defi landscape. New features and sharp actions can bring to the DeFi economy, which I'm pretty excited about.
00:57:06.890 - 00:57:18.188, Speaker A: Yeah, that's massive, if I understood that correctly. It basically solves what oracles currently can't, right. Because they can't really interact with, with smart contracts, kind of.
00:57:18.364 - 00:57:40.854, Speaker B: That's right. So right now, I think you see like a portion that some of the oracles do is they have these things called keepers, where you can ask them to trigger transactions on your behalf. But keepers are third party. They don't have any protocol rules. They are not block proposers. So when they don't do their job, you don't know if they didn't do the job or the block proposal didn't accept the transaction. So you can't impose, like, severe penalties on them.
00:57:40.854 - 00:57:48.410, Speaker B: So it's a very weak system. But when block proposes are keepers, then it completely changes the economy.
00:57:48.910 - 00:57:52.170, Speaker A: Wow. Yeah. That's massive. I wasn't aware of that.
00:57:53.070 - 00:58:03.170, Speaker B: It's not something we're building. We want people to build. There are actually many, many ideas down the Eigen lane, rabbit, for people to jump in and build. And so that's what we're excited about.
00:58:03.480 - 00:58:16.488, Speaker A: Awesome. That's so exciting. I can say it will enable a lot. Crazy. Okay, cool. Hey, with that, thank you very much for your precious time. Svaram.
00:58:16.488 - 00:58:41.546, Speaker A: It was, I think, a great interview, and obviously we wish you and the team best of success with the ongoing testnet, the mainnet launch that is coming in Q three, I guess. And also thank you for delivering a tech line for that article already. I wrote down eigenlayer expand the surface of permissionless innovation. I like that.
00:58:41.618 - 00:58:53.210, Speaker B: I love it. I love it. Dominic, it was a real pleasure having the opportunity to chat with you and having the opportunity to interact with your audience today and look forward to other occasions to do so.
