00:00:02.080 - 00:00:47.480, Speaker A: Okay, welcome back, everyone. So this is the third video in the tutorial. At the end of the last video, we were talking about the fully permissionless setting without resource restrictions, yet we stated the proposition written here. So consider the fully permissionless setting without resource restrictions, and suppose that the player set is finite for every row greater than zero, no protocol source byzantine agreement when up to a row fraction of the players may be byzantine. And importantly, so this result holds even the synchronous setting with a known player set and with all players active at all timeslots. So, as we said earlier on, in moving from the permission to the fully permissionless setting, we've introduced these three new complexities. You have now an unknown player set of unknown size.
00:00:47.480 - 00:01:22.050, Speaker A: You have the possibility of players being active and maybe inactive at certain time slots. And there's also the possibility of Sybil attacks. So it's really here, it's the possibility of Sybil attacks that driving this particular result. Okay, so what I want to do next then is just to go through the proof of this proposition. Okay, so I minimize myself so you can see the screen. Okay, so yes, we're going to give a proof for the deterministic case. Actually, the theorem there was a stated for the deterministic case, but the argument extends easily to probabilistic protocols and the natural probabilistic version of Byzantine agreement as well.
00:01:22.050 - 00:02:03.820, Speaker A: Yeah. So towards contradiction, I suppose that such a protocol exists. Well, Suppose delta equals 1, choose n great, equal to 3 such that 2 over n is less than rho. So remember that rho is our bound here on the fraction of the players that can be byzantine. So if we suppose that 2 over n is less than rho, that just means we can corrupt up to two of the players and keep below our row bound. So we're choosing N3 such that 2 over N is less than rho. And we consider a set of players p0 up to p.
00:02:03.820 - 00:02:44.590, Speaker A: And then we're going to let id1, id2 up to idn minus 1 and id1 prime, id2 prime up to idn minus 1 prime. Denote 2n minus 2 disjoint sets of identifiers. Okay? And then we're going to consider three possible executions of the given protocol. And it's going to be a simple indistinguishability argument. Okay? So as I say, we're going to consider three different executions. So this is our first one. So in the first execution, player P0 is Byzantine.
00:02:44.590 - 00:03:29.460, Speaker A: Players P1 up to PN1 are honest. All players active in all time Slots that's going to be true in all the executions. Inactivity is going to be nothing to do with this proof. It doesn't play a role here. For each honest player PI, their identifier set is just idi. Okay, so so far, so simple. For P0, though, the Byzantine player, we're going to let them control all of these identifiers here, the ID1 prime up to IDN1, all players receive an input of zero.
00:03:29.460 - 00:04:28.670, Speaker A: So we immediately know that all the honest players have to terminate and output zero. How then does P0 behave described byzantine player? Well, P0 ignores its input and simulates the behavior, including Messages sent, of n minus 1. Honest and fictitious players p1 prime up to pn minus 1 prime that all have an input of 1 with IDPI equals IDI. So the important thing, the most important thing to remember here is that all players in this execution receive an input of zero. So all the honest players have to terminate an output zero. Okay? And then we come to our second execution, the second execution. The basic idea is we want to ensure that the second execution, E2, is indistinguishable from E1 as far as P1 is concerned.
00:04:28.670 - 00:05:23.860, Speaker A: And that's our main aim here. Okay? So in E2, again, player P zeros Byzantine and P1 up to P1 are honest. Okay? Again, as in all the executions, all players are active in all time slots, right? We want to make sure, as I said, we want to make sure this, this execution is indistinguishable from E1 as far as P1 is concerned. So for P1, well, I'll either identifiers at the same IDP1 is just ID1 as it was before. For every other honest player, though, every other honest player, PI idpi is now idi'those identifiers that were controlled by the Byzantine player P0 previously. Okay? Again, we want this to be indistinguishable from E1 for P1. So player P1 receives again an input of 0, but all other honest players now receive an input of 1.
00:05:23.860 - 00:06:37.120, Speaker A: Okay? And P0 now they control so IDP0 is ID1 prime. They control that set before, but now it also controls id2 up to id. These identifier sets were previously controlled by p2 up to pn minus 1 and execution e1. And what p0 does is it just simulates n minus 1 on its players p1 prime up to pn minus 1 prime under the conditions that p1 prime has an input of 1 and p2 prime up to pn minus 1 Prime each have an input of 0, idp1 prime equals id1 prime, and idpi prime equals idi of I is 2 up to n minus 1. Okay? So the important point here, as I said, in this execution, things are indistinguishable from execution E1 as far as P1 is concerned. P1 outputted zero in execution E1. That means they have to output zero in this execution, which means all honest players still have to output zero.
00:06:37.120 - 00:07:22.236, Speaker A: Okay, then we move to our third execution, okay? And the idea here is that we're going to make sure this execution is indistinguishable from E2 as far as P2 up to PN1 are concerned, okay? So they still have to give the output of zero. Okay? So in this way, in this execution, so P0 and P1 are now Byzantine. Remember, we're allowed to corrupt up to two players. Now, P2 up to PN minus one are honest. You want to make sure the execution is indistinguishable from the last one as far as these guys are concerned. Again, all players are active in all time slots. All players now receive an input of 1.
00:07:22.236 - 00:08:08.332, Speaker A: Remember, P2 up to P1 received an input of 1 in the last execution, while P1 received an input of 0. So so far, this is indistinguishable from the previous execution as far as these guys are concerned. Okay? Identify assignments for all players are the same as in the previous execution E2, okay? And P0 and P1 behave identically as an execution E2. So in particular, P1 acts as input as zero. Okay? So the point here is that we've made sure here this execution is indistinguishable from E2 as far as these guys are concerned. They had to output zero in the previous execution, so they still have to output zero. But now all players have an input of one.
00:08:08.332 - 00:08:34.930, Speaker A: Okay? So they all actually also have to output terminate and output one. That gives us our contradiction. So, summing up, then. Okay, so the following observations complete the contradiction. So, by validity and termination in E1, all players must eventually output 0 0. They'll have input 0, so they have to output 0. Similarly, by validity and termination in E3, all players must eventually output 1 because they all have output 1 input 1 there.
00:08:34.930 - 00:09:21.618, Speaker A: Okay? But because the executions E1 and E2 are indistinguishable for P1, P1 must eventually output 0 in E2. Yeah, and by agreement and determination, in E2, all honest players must eventually output 0. Then last we reached the contradiction, because the executions E2 and E3 are indistinguishable for all the players P2 up to P1, they must output the same value in both executions, which means they have have to output zero and they have to output one as well. Okay, so we reach our contradiction. Okay, again. Again, to repeat, it's really the possibility of civils that drives this proof. The proof goes through.
00:09:21.618 - 00:10:27.248, Speaker A: It works perfectly well with a known player set of known size, and then we assume that all players are active at all timeslots. Okay, so this proposition shows then that to make progress, in order to make consensus possible, you know, somehow bound the combined power of Byzantine players, and in a way different from the traditional approach of bounding the fraction of players that are Byzantine. So how should we phrase such a boundary? Well, the proof of the proposition fundamentally depends on the ability of Byzantine players to costlessly generate an arbitrarily large number of civils, which in turn enables the simultaneous simulation of an arbitrarily large number of honest players. The bound must therefore concern something that is scarce and costly to acquire, something that prevents a Byzantine player from carrying out a simulation of many honest players. Okay, so these ideas bring us to the notion of resources. We've motivated the introduction of resources. So in the next video, what we'll do is we'll start talking about how we're going to model how we'll model resources.
00:10:27.248 - 00:10:28.360, Speaker A: Okay, so I'll see you there.
