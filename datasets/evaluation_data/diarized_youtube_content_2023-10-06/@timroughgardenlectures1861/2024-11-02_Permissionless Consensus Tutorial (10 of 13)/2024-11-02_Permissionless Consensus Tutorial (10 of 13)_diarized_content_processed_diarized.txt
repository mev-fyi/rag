00:00:01.600 - 00:00:48.335, Speaker A: Okay, welcome back everyone. So in the last video we defined the generalized quasi permissionless setting. But then towards the end of the video, we noted that actually if you consider some arbitrary protocol defined resources, then that can lead to the consideration of protocols you might think of as essentially permissioned in some sense. So that led to the consideration of reactive resources. The idea is that in this video we want to define what we mean by reactive resources. Basically, reactive resources are going to be resources that are forced to change hands when stake and when external resources change hands. The basic idea is if we consider the quasi permissionless setting and we restrict to reactive protocol defined resources, then protocols is reasonable to guard protocols of that kind as being permissionless or quasi permissionless at least.
00:00:48.335 - 00:02:04.675, Speaker A: Okay, so let's talk about reactive resources then. So before we give the definition though, let's think a little bit about this question. So why aren't the Bizcoin hybrid and solid protocols essentially permissioned in a similar sense to the example that we considered at the end of the last video? At the end of the last video, we considered this, the idea of a proof of work protocol in which you just select your proof of work to select one committee, and then once that committee is selected, you just use that committee forever. You ask that committee to run as standard permission BFT style protocol. And the idea is that a protocol of that sort which can operate in the quasi permissionless setting, the generalized quasi permissionless setting, that's kind of fundamentally permissions. Right? Okay, so why isn't that true? Why don't we think of Bizcoin hybrid and solid as essentially permissions? Why didn't this issue come up for the specific case of stake as an on chain resource? Well, it's basically because stake and the protocol defined resources used by those protocols, Bizcoin hybrid and Solidar can be forced to change through confirmation of certain messages and transactions that might be issued by an environment by players. Basically, on chain resources can be forced to change hands in those scenarios.
00:02:04.675 - 00:02:52.555, Speaker A: So to rule out essentially permission protocols, then it must be possible for players to eventually lose their on chain resources. So this leads to the notion of reactive resources which cannot be held indefinitely by players that own no external resources or stake. Okay, so we want to write down a formal definition of what we mean by reactive resources. To do that though, first of all, we have to make some very simple definitions first. Okay, so right, so we want to generalize the sense in which stake can be forced to change hands. So formally consider a protocol that use k permitters with corresponding external resources R1 up to RK considering execution of this protocol and some time interval I, let's say from T1 to T2. Then we make some very obvious definitions.
00:02:52.555 - 00:03:52.555, Speaker A: We say that a player P owns no external resources in that interval, if just the obvious thing holds. So if ript equals 0 for all t in that time interval, or I up to 1, from 1 up to k. Okay, and then again next definition is also fairly sort of obvious. We say the player P owns no stake in that time interval I. If every ID owned by the player P whenever T is a set of transactions confirmed from someone as player P prime and any time slot t in the interval I, then that identifier owned by P own 0 stake according to the set of transactions T. Okay, and then lastly we just write down a similar definition with regard to protocol defined resources. Say the player P owns none of a protocol defined resource S at T.
00:03:52.555 - 00:04:43.655, Speaker A: If for every identifier ID owned by the player p, s star of m ID equals 0 whenever m is a set of messages received when honest player P prime at times of less than equal to T. Okay, and then here's the definition of reactive resources. Okay, so when ε greater than zero be a defined determined security parameter here. By determined I just mean that it's known to all players. Okay, I set S S1 star up to SJ star of on chain resources used by a protocol is called reactive if there exists some value l. But we're allowing that L can depend on the determined inputs. That's just the inputs that everybody knows.
00:04:43.655 - 00:05:10.475, Speaker A: But it must be sublinear in D. I wouldn't worry too much about this condition. That's just a technical condition. Okay? If you're interested, you look at the details as to why that's important in the paper. But for now let's brush over that. Okay? There must exist some value l such the following conditions hold with probability at least 1 minus ε for each protocol instance. So we take any time slot T1 after GST, we take any time slot T2, which is at least L after T1.
00:05:10.475 - 00:05:58.585, Speaker A: Okay? And T2 being less than D here means just less, that is less than the duration for which we execute this protocol. Okay? So to keep it simple, let's consider infinite execution. So you forget about this condition here. Okay, so we're taking T1 after GST T2 at least L time after T1. So there and each of the players of some set P owns no external resources or stake in that interval I of length L. Then for every player in that set, every I from 1 up to j p s I star at t2 at the end of the interval. So basically if players, if some set of players don't own any stake or any external resources for sufficiently long, then eventually they don't any on chain resources at all.
00:05:58.585 - 00:06:36.571, Speaker A: Okay, so that's our definition of reactive resources. Okay. And the basic idea here is. Okay, so we defined the generalized quasi permissionless setting. If you want to prove positive results in the generalized quasi permission setting, then basically it's going to be somewhat sort of cheating if you don't restrict to on chain resources that are reactive or satisfy some conditions like being reactive. Right. Similarly, if you want to prove impossibility results for the quasi permissionless setting and that don't already hold for the permission setting, then you're going to have to use some sort of notion like reactive resources.
00:06:36.571 - 00:07:09.875, Speaker A: Otherwise protocols can be essentially permissioned. Okay, so that the quasi permission setting requires a protocol to explicitly list the on chain resources to which the settings player activity assumption applies. Unless someone wants also to consider permission protocols or essentially permission protocols. One generally restricts attention to protocols that use a reactive set of on chain resources or some variant of that kind. Okay, so that's reactive resources. Right. In the next video we're going to move on to consider some results for the quasi permissionless setting.
00:07:09.875 - 00:07:16.835, Speaker A: And in fact what we want to do is establish three separations between the dynamically available and the quasi permissionless settings. Okay, so I'll see you in the next video.
