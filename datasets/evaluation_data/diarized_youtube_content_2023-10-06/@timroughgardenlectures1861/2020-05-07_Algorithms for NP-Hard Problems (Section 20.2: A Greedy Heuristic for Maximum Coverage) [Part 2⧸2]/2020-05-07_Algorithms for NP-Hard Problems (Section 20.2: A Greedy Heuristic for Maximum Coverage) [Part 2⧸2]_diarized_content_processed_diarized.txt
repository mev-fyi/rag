00:00:00.570 - 00:00:48.378, Speaker A: So, in other words, for every possible input of the maximum coverage problem, doesn't matter how big the universe is, doesn't matter how many subsets you have, if you have a budget of k, then the greedy coverage algorithm will guaranteed output. A solution might not be optimal, but its coverage at least will be a one minus quantity, one minus one over k to the k fraction of the best case scenario of the maximum coverage possible using k subsets. For example, if k equals two, this says the greedy algorithm is guaranteed to get you at least 75% of the maximum possible coverage. If k equals three, at least 70.4% of the maximum coverage, and no matter how big k is, at least 63.2% of the maximum coverage. And as usual, this is just an insurance policy.
00:00:48.378 - 00:01:28.902, Speaker A: This is just what you're guaranteed. Even in the most contrived doomsday scenario on realistic inputs, the screedy algorithm will generally get quite a bit closer to 100%. All right, so we will actually prove this theorem in full. But first, let's spend a little time developing your intuition for it, and let's revisit the 81 element example that we had in that last quiz. So why doesn't the greedy algorithm just produce the optimal solution in this example? Well, in the first iteration, it had the option of picking any of the three sets in the optimal solution. So t one, t two, or t three. Unfortunately, the algorithm was tricked by a fourth set, t four, the green set that was equally large.
00:01:28.902 - 00:01:38.580, Speaker A: It had 27 elements in it, just like t one, t two, and t three. In the second iteration, the algorithm was tricked once again. It had the option of picking any of t one, t two, or t three.
