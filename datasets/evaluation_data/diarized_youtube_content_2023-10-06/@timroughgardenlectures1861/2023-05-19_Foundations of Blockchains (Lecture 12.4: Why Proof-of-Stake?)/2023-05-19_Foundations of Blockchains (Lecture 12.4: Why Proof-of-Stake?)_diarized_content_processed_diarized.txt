00:00:00.170 - 00:00:43.718, Speaker A: So already with the Bitcoin protocol, we had a method for doing civil resistant random sampling. We had a permissionless consensus protocol based on proof of work. So the question you should be asking is, why isn't that good enough? Why might we want any alternative approach to civil resistant random sampling, be it proof of stake or anything else? And indeed, the battle between proponents of proof of work on the one side and proof of stake on the other side, it's been a pretty bitter one over the years. A lot of blood and ink has been spilled over which of those two approaches to silver resistant random sampling is better in some sense. And as usual, I'm not here to take sides. I'm not here to sort of resolve this debate for you. I'm really here to just educate.
00:00:43.718 - 00:01:26.866, Speaker A: So I want you to be able to think clearly and understand what are the fundamental issues that people are debating on this issue. As so many other issues in the broad web3 space, the discourse has often been fairly confused. And a common issue is that people conflate specific protocols with more general principles. As we'll see throughout this lecture. For example, the proof of stake blockchain protocol design space is really, really big. There's a lot of different ways that you can and that people have been designing blockchain protocols that use proof of stake. And so you'll often see people criticize proof of stake broadly, when really what they mean is they don't like some aspect about some particular implementation that makes use of proof of stake civil resistance.
00:01:26.866 - 00:02:20.386, Speaker A: So that's one particular common error you should be looking out for when you read about this issue in other sources. Now, whatever one's feelings might be about proof of work or proof of stake, there is a trend over the last four to five years which is undeniable. Which is there's been a very strong shift in new blockchain protocols away from proof of work civil resistance toward alternative approaches. Among those, by far the most dominant proof of stake, now, you can debate whether or not this is a good thing. You can debate the reasons why you think this might be happening. I'll tell you my answer to that question in this video, but you really can't debate that this trend is in fact happening, perhaps best exemplified by the fact that Ethereum actually changed over from proof of work to proof of stake in mid 2022. Now, I'm certainly not trying to say that proof of work is dead.
00:02:20.386 - 00:03:15.018, Speaker A: I mean, for example, at the time of this recording in early 2023, the Bitcoin protocol, as it's been for its entire existence, is by far the biggest, at least by market, cap blockchain protocol out there. And Bitcoin, of course, does use proof of work civil resistance. It's anyone's guess whether that's going to be true going forward, but it's definitely true right now. Now, in this video, I'm going to outline three advantages that proof of stake has over proof of work. And I'm going to focus on the positive in this lecture for two reasons. First of all, I want to finish the story, or I want to give you my explanation, my opinion about why this shift is happening, about why we're seeing a migration from proof of work to proof of stake in new blockchain protocols. The second reason I want to do that is just we're about to go through in the rest of election number twelve, some pretty hard, actually videos about how you implement proof of stake civil resistance because it's not easy.
00:03:15.018 - 00:04:06.250, Speaker A: So before we do that hard work, I want to make sure that hard work is properly motivated and that we all know what the pot of gold at the end of the rainbow is. Now mind you, proof of stake is not without its disadvantages. And so at the very end of this lecture, after we've seen how proof of stake actually works, we'll go back and do a detailed sort of pros and cons between sort of proof of work and proof of stake civil resistance. We'll just be in a much better position to appreciate the issues after we know a little bit more how these protocols actually work. So let's proceed to what are, in my opinion, the three biggest reasons for this migration that we're seeing from proof of work to proof of stake. The first issue I want to raise is probably the issue you'll hear about the most as far as this comparison. It's not obvious to me it actually is the primary driver of the migration, but it is the one that gets the most headlines, which is a comparison of energy consumption.
00:04:06.250 - 00:04:55.990, Speaker A: So why does energy consumption come up, right? If you're talking about like web one protocols, like, I don't know, Http and SMTP, you don't usually talk about the energy consumption of those protocols. Why would we be talking about it here for blockchain protocols? Well, remember how proof of work works, right? The whole philosophy is to select a node with probability proportional to their hash rate. The protocol doesn't know the hash rate of the various nodes. The protocol certainly can't trust nodes to honestly report their hash rate where everybody would just lie and say they have a huge hash rate. And so that means that all of the miners in a proof of work blockchain basically have to have their Asics or their machines on full blast all the time. They have to be constantly proving to the protocol the hash rates that they're bringing. So that fundamentally is why proof of work protocols naturally have nontrivial energy consumption.
00:04:55.990 - 00:05:41.258, Speaker A: The protocols really needs to know quantities, namely hash rates that are not directly observable to it. The protocol can't magically know how many asics some node running the protocol might own. So the nodes just are always proving through solving these hard crypto puzzles at an appropriate rate. They're always proving exactly how much hash rate they're bringing to the protocol. So what do I mean by nontrivial energy? Well, that's going to depend on the proof of work blockchain protocol that you're talking about and how much computational power miners are devoting to it. But in the case of Bitcoin, which of course is by far the biggest proof of work protocol, nontrivial means estimates vary, but maybe something ballpark of like half of a percent of the world's energy usage. So 0.5%
00:05:41.258 - 00:07:01.010, Speaker A: of global energy consumption is devoted to mining Bitcoin blocks. So to put that in context, a number of, for example, countries in Western Europe will consume less energy annually than is devoted to Bitcoin mining. So to implement civil resistant random sampling without all the energy consumption, it would seem you would need to make use of a costly resource, which is in some sense more directly observable to the blockchain protocol compared to computational power or hash rate. And that is actually really good news for fans of proof of stake, right? Because in proof of stake, you're selecting nodes that's probably proportional to their locked up stake, which of course is directly observable to the protocol, right? All those stake amounts are literally just hanging out, sitting there in a smart contract that lives on the blockchain. So the protocol actually immediately knows the probabilities with which it should be sampling the various nodes running the protocol. And so for that reason, blockchain protocols that make use of proof of stake their energy consumption is on par with all the other sort of protocols you might think about http SMTP whatever. So we're talking about at least two to three orders of magnitude less energy consumption than something like the Bitcoin protocol.
00:07:01.010 - 00:07:58.966, Speaker A: So what I've said to this point is not really controversial. I think pretty much everybody agrees that, yes, proof of stake protocols do indeed use much less energy than a big proof of work blockchain protocol like Bitcoin. So where the controversy lies is in exactly how serious a criticism this is of the proof of work approach. So how big a deal is it, this big gap in energy consumption? So lots of people do care and it's easy to see why, right? So climate change, of course, is all around us. It's something many people are very concerned about. I mean, if you are concerned about it, it might strike you as unacceptable to use such a nontrivial amount of energy doing, quote unquote, wasted work, meaning having computers, or asics just sort of solve crypto puzzles which have no benefit other than securing the Bitcoin protocol. So for people who want to criticize proof of work protocols on the basis of energy consumption, it's pretty straightforward how you would do that.
00:07:58.966 - 00:08:55.926, Speaker A: People who are in favor of proof of work offer a number of counterarguments, so let me mention four. And again, I'll leave it to you to decide whether you find these convincing or not. So the first maybe counterargument would be whether you think of the energy consumption of the bitcoin protocol as big or small sort of depends on your reference point, right? And so if you say, oh, it sort of uses more energy than the Netherlands, that sounds like a lot. But if you say actually it uses less energy than the gold mining industry, well, then maybe it seems like it's not that bad. So the first argument would just be that like, yeah, it uses non trivial energy, but in the grand scheme of things, it's really not that much energy. A second argument you hear from people that are in favor of proof of work will be that, well, you know what, if you care about climate change, you shouldn't really care about energy consumption per se. You should care about energy consumption only in as much as it leads to increased emissions, right, because that's what's really relevant for the severity of climate change.
00:08:55.926 - 00:10:00.042, Speaker A: And it is true a decent chunk of the energy that goes into bitcoin mining is from renewables, is green energy. So I think that's a fair point. There's definitely also a counterargument to that counterargument, which would say really what you want to do is zoom out and think about the global energy market. And the question then is really not how much of the energy going to the bitcoin protocol is from renewables, but how much of it is from renewables that would not have been otherwise used for some valuable purpose. If bitcoin mining just winds up forcing would be users of renewables to instead switch to fossil fuels, well, then the argument sort of breaks down then. In fact, bitcoin mining is basically as bad for the environment as if all of it was driven by fossil fuels itself. Speaking of the global energy market, that brings me to the third counterargument you sometimes hear from proponents of proof of work, which is an argument that actually bitcoin mining in some sense sort of stabilizes or smooths out the global energy market.
00:10:00.042 - 00:10:52.700, Speaker A: The intuition there being that, okay, well, if for some reason energy drops, the price of energy drops quite low, then you would expect kind of more people to get into bitcoin mining. You would expect the price of energy to be driven back up. And so you might expect less fluctuations of the energy price given that bitcoin mining is always there, ready and waiting to consume cheap energy when it exists. So I certainly see the intuition behind this counterargument, but it's really a pretty unquantified statement at this point. For this counterargument to have force, you would need to argue, first of all, that it really is true, that really the energy price is more stable with bitcoin mining than without bitcoin mining. And secondly, you need to argue that the additional price stability in some sense makes the world a better place. I don't know whether either of those two are true or not, but I can tell you I've never seen a really kind of serious analysis trying to quantify either of those two points.
00:10:52.700 - 00:11:32.458, Speaker A: The final counterargument I wanted to highlight is some people will just say it's worth it. They'll just concede that, like, yeah, bitcoin mining is kind of bad for the environment. That sucks. But they'll just feel that this sort of permissionless global payment system is just such a unique technology that it's just kind of the price that we have to pay for it. They might point to something like air travel as a comparison point. Air travel unquestionably, not good for the environment, but most people in the world have made peace with that. It's just the cost that you have to pay in order to have this technology that many, many people really enjoy using.
00:11:32.458 - 00:12:02.530, Speaker A: No question. At least right now, in early 2023, the bitcoin protocol is nowhere near as central to the global economy as air travel is going forward. Who knows? But that would be one possible argument. So that's what I wanted to tell you about, sort of the main points you hear about the proof of work versus proof of stake debate. Specifically on the topic of energy consumption. Let me just add a couple of thoughts of my own. Again, not so much to take sides or to have an ideology really, just kind of speaking from a more pragmatic perspective.
00:12:02.530 - 00:13:06.790, Speaker A: So I do think proponents of proof of work have a point when they complain that typical discussions of this issue were overly simplistic. So, for example, just identifying energy consumption with increase in emissions, I think there's some fair points there and we'd benefit from a more nuanced debate. On the other hand, I think that even if you were somehow able to make all of the appropriate corrections, even after all that, I think the environmental impact of big proof of work blockchain protocols would be unpalatable to many people. You can argue whether it should be unpalatable or not to people, but I think the reality is many people will just find it unacceptable the environmental consequences of the proof of work approach. And that will become, I think, even more true as alternatives like proof of stake become better understood and more battle tested. And so for that reason, I think it's going to be just from a political perspective, tough to sort of have new successful proof of work blockchain protocols in the near future. That said, Bitcoin, which of course is proof of work and likely to stay proof of work for a long time, I think it's definitely possible.
00:13:06.790 - 00:13:58.118, Speaker A: Bitcoin is not going anywhere for a while. So proof of work will be with us, but I'm not sure we're going to be seeing big new proof of work blockchain protocols anytime soon. Now, what's interesting is, even though the sort of environmental debate is what gets most of the headlines on proof of work versus proof of stake. And there'll definitely be sort of proof of stake blockchain protocols that proudly trumpet themselves as sort of green blockchains. From my vantage point, I actually don't think that's been the number one cause of the migration from proof of work to proof of stake that we've seen over the past four to five years. Rather, I think the migration has been driven largely by performance considerations, specifically around latency, meaning the amount of time an end user has to wait before their transaction gets finalized, and just more generally, finality properties of the blockchain protocol. Right.
00:13:58.118 - 00:14:52.982, Speaker A: From the perspective of an end user of a blockchain protocol, I think most people would care quite a lot about latency, about how long they have to wait before they can feel confident that the transaction is being carried out, that payment's been made, that they've acquired an NFT, whatever it may be. And proof of work blockchain protocols tend to score quite poorly on this key performance metric. And the fundamental issue here is it's actually not really proof of work civil resistance per se. It's more that proof of work seems to force you in to using something like longest chain consensus, that is Nakamoto Consensus. Now, to be clear, this statement is not literally true. It's not true that you literally can only do vanilla longest chain consensus if you're using proof of work sub resistance. You can also do more sophisticated things.
00:14:52.982 - 00:15:43.666, Speaker A: And indeed, there are academic proposals out there suggesting various ways to add complexity to, for example, the Bitcoin protocol to improve things like its latency. So with that caveat aside, I will now sort of be a little sloppy and conflate proof of work with Nakamoto Consensus. I'll sort of assume that there's nothing else you might be doing other than vanilla longest chain consensus. I'm going to do that for two reasons. The first is just empirical, which is if you look at pretty much all the major proof of work blockchain protocols, certainly for the Bitcoin protocol, they are using just vanilla longest chain Consensus, they are using Nakamoto Consensus. The second reason is that for some of the issues we're about to discuss, actually, they really are fundamentally about proof of work protocols, not just about Nakamoto Consensus. And we sort of saw that in lecture number nine.
00:15:43.666 - 00:16:26.098, Speaker A: If you recall, we had the impossibility result that said, if you have a proof of work protocol, you have to make these sort of unsatisfying tradeoffs between a basic liveness property and consistency under network attacks. So some of the issues we'll discuss actually really are driven by proof of work, not by longest chain consensus per se. So now zooming into Nakamoto Consensus. Right. So back in lecture number nine, we proved some pretty nice things about Nakamoto Consensus, but we also observed its various flaws. So let's just recall those flaws right now. So first of all, and this is really kind of the obvious reason why longest chain protocols do poorly on the latency metric is that you need this security parameter, K.
00:16:26.098 - 00:16:56.854, Speaker A: So remember, in a longest chain protocol, the finalized blocks, it's not all the blocks on the longest chain. It's all the blocks on the longest chain, except for the last K. The last K blocks are always considered still under negotiation. Only once a block is sufficiently deep in the longest chain do you think of the transactions in that block as being confirmed and K. Again, it depends how aggressive you want to be, how risky you want to be. But K in the mid double digits is not a crazy number for it. So that's a lot of blocks to wait before the block containing your transaction is considered confirmed.
00:16:56.854 - 00:17:48.630, Speaker A: So that's where large latencies are coming from. Another drawback we mentioned of Nakamoto Consensus, or really any implementation of longest chain consensus that uses randomly chosen leaders is finality. Always. Even if you're in, say, the synchronous model, finality is always only probabilistic. There is always some chance, no matter how remote, that you'll get unlucky and have a long sequence of Byzantine leaders that wind up being able to create an alternative, longer chain rolling back blocks that you had thought were finalized. That's very unlikely probability if you choose K large enough, but it's always a non zero chance that blocks could get rolled back. Finally, as we've seen many times, nakamoto Consensus breaks down badly in the partially synchronous model, if you have a network partition with sort of two groups of nodes that can't talk to each other for some long period of time, each group of nodes is going to grow its own chain.
00:17:48.630 - 00:18:49.562, Speaker A: And when the network partition finally ends, whichever group has the shorter chain, that whole chain is going to get rolled back. So in the partially synchronous setting, where you can have network outages and attacks, there's really no finality guarantees whatsoever. And on this point, actually, this point is not really about Nakamoto Consensus, as we saw in lecture number nine, this point is really fundamentally about proof of work. Any proof of work blockchain protocol must make this very tough trade off between liveness in the synchronous setting and consistency in the partially synchronous setting. All right, so what about proof of stake protocols? So as we'll see in this lecture, you actually compare proof of stake sybil resistance with either longest chain consensus or with BFT type consensus, unlike proof of work, which really only kind of pairs well with longest chain consensus. But interestingly, if you pair proof of stake with longest chain consensus, then all of these criticisms we just made for Nakamoto Consensus will also apply. So proof of stake, longest chain consensus, again, you need a security parameter which leads to large latencies.
00:18:49.562 - 00:19:47.796, Speaker A: You generally only have probabilistic finality because you're doing random leader selection. And again, you have a total breakdown of finality in the partially synchronous setting when you can have network partitions. And indeed, when I say there's been a migration to proof of stake over the past four to five years, it's actually really kind of specifically been a migration to proof of stake protocols that use something other than longest chain consensus, most commonly some type of BFT consensus. And if you do use BFT type Consensus. So something like Tendermint, which, again, you can't really do in conjunction with proof of work, civil Resistance, if you use something like a Tendermint style protocol, you're going to overcome. As we've seen all of these drawbacks with Nakamoto Consensus, right? Blocks are just going to be finalized one at a time. A block is finalized once it has the sort of requisite stage two quorum certificate so there's no security parameter k like once a block is sort of produced and voted upon.
00:19:47.796 - 00:20:40.704, Speaker A: There you go, it's just done, it's finalized. The finality property is deterministic and persists even in the face of network outages and attacks. Assuming of course, as usual, that less than a third of the participation is Byzantine. From a performance perspective, this is a big deal. And in particular because you don't have the security parameter, because you don't have to wait for a whole bunch of subsequent blocks before you can consider a transaction confirmed that leads to typically much lower latencies in BFT type protocols than in longest chain protocols. So longest chain protocols, you might think like best case, latency in the tens of seconds and minutes or more is sort of not uncommon. And then in a BFT type consensus protocol, you'd expect one to two orders of magnitude speed up.
00:20:40.704 - 00:22:05.636, Speaker A: So you'd expect latencies at worst kind of in the small number of seconds and in the best case, even in, let's say, the hundreds of milliseconds. And so in my experience, these performance advantages of using proof of stake silver resistance specifically in conjunction with BFT type consensus, that from my vantage point, looks like the number one reason for this migration over the last several years from proof of work to proof of stake civil resistance. So that leads me to the third advantage of proof of stake protocols that I wanted to mention, which is an increased set of options for recovering from 51% type attacks. So in all of our discussions of consensus protocols thus far, we've always had some kind of assumption limiting the power of the adversary on the fraction of Byzantine nodes or byzantine hash rate or Byzantine stake. But a question which is really quite relevant for practical deployments of these protocols is what happens if those assumptions are violated for, let's say, a short period of time? Like in a longest chain type protocol, if an attacker gets 51% control, they could, for example, publish only empty blocks on the longest chain and meanwhile keep everybody else's blocks outside of the longest chain. Basically a violation of liveness. Or in a BFT type protocol, if someone captured 34% of the voting power they could double vote, winding up with two blocks being finalized at the same block height.
00:22:05.636 - 00:23:01.264, Speaker A: So that would be a consistency violation if an adversary gets 34% of the power of BFT type protocol. Well, in a proof of work protocol, frankly, it's not so obvious what you can do about it. Traditionally, honestly, the approach has sort of been to hope that attackers either can't or won't do this, that either it's just too expensive to acquire 51% control over the blockchain protocol, or even if someone can get that much control, that would be too economically costly for them to carry out any sort of attack on the protocol. So why would an attack be economically costly? So the story here goes something similar to what we discussed at the end of lecture number ten. That's when we were discussing selfish mining. And we had that last video about what are the various reasons why selfish mining doesn't seem to occur in the wild. And so here that argument would go something like this.
00:23:01.264 - 00:23:52.292, Speaker A: Think about like the bitcoin protocol, and imagine an attacker actually manages to control 51% of the hash rate contributed to the bitcoin protocol. So that would require an enormous economic investment in getting asics and sort of having a really large hash rate. Meanwhile, suppose that that attacker then after the attack, suppose the public notices that there's an attack, like there's only empty blocks or there's a double spend or whatever. And suppose as a consequence of this apparent 51% attack on bitcoin, the price of bitcoin all of a sudden drops to zero. Well, that would be expensive for the attacker, right, because they had all these asics that they purchased literally by design. The only thing those asics can do is earn bitcoins is earn mining rewards from the bitcoin protocol. So if bitcoins are now worth zero, all of those asics are now also worth zero.
00:23:52.292 - 00:24:34.580, Speaker A: So that'd be the story about why there'd be an economic cost to the attacker of carrying out a 51% attack. And then you could sort of cross your fingers and say, hopefully no one's crazy enough to do that. So you can hope that a bad thing is not going to happen. But what if it does? What if someone actually did acquire 51% of the hash rate going to the bitcoin protocol and proceeded to do bad things with it? There is a sort of nuclear option available, which is something known as a hard fork. We'll probably talk about hard forks in more detail in some future lecture. For now, just think of it as a protocol upgrade. Like, you literally just change the code of the protocol you've been running all along.
00:24:34.580 - 00:25:10.942, Speaker A: And so that obviously requires sort of large scale coordination from all of the people that are paying attention to sort of the blockchain. In this case, in this example, the bitcoin blockchain. But if you can pull that off, if you can get everybody who cares to change the protocol code to a new version. So if you can pull off a hard fork, here's one particular thing you could do with a hard fork. You could change the cryptographic hash function which defines the proof of work crypto puzzles. So for example, the bitcoin protocol, the crypto puzzles are based on the hash function shot 256 that we've talked about several times. That is not the only cryptographic hash function available.
00:25:10.942 - 00:25:43.698, Speaker A: There are plenty of others you could choose instead. And asics for mining bitcoins, they are specific to shot 256. They are useless for doing anything other than evaluating shot 256. In particular, they're completely useless for evaluating any other cryptographic hash function. So if you change the cryptographic hash function in the protocol, then you have again zeroed out the value of all of the asics that this attacker invested in. So now, even if the price of bitcoin does not go to zero, it stays high. Nevertheless, you have managed to make the attacker's asics worthless.
00:25:43.698 - 00:26:25.398, Speaker A: Of course you've also made the asics of all of the honest hash rate worthless as well. So it's sort of a scorched earth policy. But it does impose hopefully a deterrent of a form of economic cost on the potential attacker. So that's the situation for proof of work. If you have a 51% attacker, very limited set of options, what other options would be available? Were you running a proof of stake protocol instead? Well then there's the possibility of surgically targeting the attacker, confiscating only their stake. So we'll have an entire video about the pros and cons of slashing toward the end of this lecture, toward the end of lecture number twelve. Let me say a little bit about it here.
00:26:25.398 - 00:27:23.286, Speaker A: So again, the idea is you could just literally confiscate the stake from misbehaving validators, right? Leaving everyone else's stake untouched. So that's very different than the scorched earth approach that we talked about with the hard fork and the proof of work setting. Now, to pull this off, of course it's essential that you're able to identify which validators are the misbehaving ones, depending on the protocol, depending on the specific attack, that may or may not be possible. But sometimes it is possible. Like think for example about a protocol that looks like tendermint so BFT type protocol that finalizes blocks one by one based on voting, based on quorum certificates that require a supermajority, more than two thirds of the nodes or two thirds of the stake or whatever to be attesting to. It the only way you could ever have a consistency violation in a protocol like tendermint so the only way you could have at a single block height two different blocks get finalized. How would that happen? Well, they both must have their own supermajority attesting to them.
00:27:23.286 - 00:28:02.930, Speaker A: So more than the two thirds of the nodes voted for A, more than two thirds of the nodes voted for B. And now if you. Remember our quorum intersection property. That means the overlap, the number of nodes that are voting on both of them has to be more than a third of the overall nodes. Moreover, if we're thinking of these votes as being signed, these votes that are signed by the same private key verifiable by the same public key on the two blocks at the same block height, that is a smoking gun of a misbehaving validator. Any validator that ever double signs in that way cast votes at the same block height for two different blocks. That is someone you can comfortably slash, comfortably punish.
00:28:02.930 - 00:28:43.666, Speaker A: So in a protocol like tendermint, whenever there is a consistency violation, you are able to identify at least a third of the nodes or a third of the stake. And a proof of stake protocol that are violators that you can punish. There may be others too. Maybe you don't catch everybody, but you catch a lot of people when there's a consistency violation in a BFT type protocol. So suppose you find yourself in such a situation, you've identified a bunch of validators, you're convinced they're misbehaving, you want to punish them. Now, in a proof of stake blockchain, you're in a great position to punish them because to be a validator, they had to lock up some funds in a designated smart contract. And so the idea is you just want to take those funds away from them.
00:28:43.666 - 00:29:33.826, Speaker A: You just want to zero out the stake that they have in escrow in the staking contract. So the question then is how are you going to do that? How are you actually going to carry out the confiscation? There are two quite different options available for how you'd actually carry out this confiscation of stake. The first approach would be very much like the scorched earth solution we saw in the proof of work context. Namely, you could have a hard fork. Again, this requires a large scale coordination amongst kind of all of the major stakeholders in the protocol, getting everybody to update to some new version of the protocol's code. Now, last time we talked about hard forks, we changed the code to switch out the cryptographic hash function, therefore thereby basically zeroing out the value of everybody's asics honest or Byzantine. Here there's no cryptographic hash function, right? It's proof of stake, it's not proof of work.
00:29:33.826 - 00:30:12.800, Speaker A: So instead the new version of the protocol code is just going to say all of those misbehaving validators now have zero balances, they just don't have any of the native cryptocurrency remaining. So that's the first option to handle slashing purely outside of the protocol. You basically reboot the protocol with a new version of the protocol anytime you need to sort of slash some validators funds. A very different approach would be to actually do the slashing in protocol. So here the slashing would be purely programmatic for better or for worse. No coordination by sort of human beings would be necessary. For this slashing to happen.
00:30:12.800 - 00:31:12.446, Speaker A: So these are two very different options carrying out the slashing outside the protocol or inside the protocol. And honestly, different proof of stake projects have very different philosophies about how to go about slashing. So, like Ethereum famously does have in protocol programmatic slashing, that's always been part of their vision for the proof of stake version of Ethereum, which went live in 2022. On the other hand, there's also a number of quite major proof of stake blockchain protocols that do not have in protocol slashing, but that reserve the rights under sort of extraordinary circumstances. You could do some kind of hard fork if necessary to repel an attacker. So really kind of open at this point, really just sort of reasonable people disagree on which of these two approaches is the right one to use. All right, so having talked about slashing a little bit, let me briefly sort of zoom out with an aside and just remind you about where lecture twelve fits in the context of this Foundations of Blockchains lecture series.
00:31:12.446 - 00:32:17.634, Speaker A: So remember, this is lecture number three out of four that are about why you might want to endow a blockchain protocol with a native currency, with a cryptocurrency above and beyond, if you just sort of wanted to create some kind of cryptocurrency for its own sake. So in lecture number ten, we talked about sort of incentivizing participation in the protocol, specifically block rewards, and the tricky game theory that's a consequence of introducing block rewards, at least in a Nakamoto Consensus last lecture, lecture number eleven, we talked about a native currency as a convenient way for charging for usage. So for charging transaction fees. And in this lecture, we're talking about proof of stake civil resistance. And again, sort of in principle, you could kind of do proof of stake with some external cryptocurrency. It's much more convenient to do it with a native currency. And when you're talking about in protocol slashing, at that point, I don't know how you would possibly do that if it wasn't a native currency, right? Really, for the slashing to have bytes, it must be that the protocol itself controls the creation and destruction of that currency.
00:32:17.634 - 00:33:04.626, Speaker A: And that's what it means to be a currency native to the blockchain protocol. So by contrast, if you think about validators staking, not in a native currency, but instead in some kind of digital representation of an actual, say, US. Dollar that's held in some bank, well, now, I mean, the protocol is in a position to destroy the locally stored digital representation of that dollar, but the protocol obviously can't just sort of reach out and magically sort of rip up the dollar bill that's in some bank in the real world. So it's really not the same thing. So for slashing to really have its full force, you really want the blockchain protocol to have its own cryptocurrency. So that wraps up the three big benefits that I wanted to highlight of proof of stake protocols, which in my opinion are fueling this migration from proof of work to proof of stake over the past four to five years. Again, just quick recap.
00:33:04.626 - 00:33:48.610, Speaker A: Number one, energy consumption. Proof of stake blockchain protocols use two to three orders of magnitude less energy than a big proof of work blockchain protocol. Like bitcoin number two, proof of stake civil resistance pairs well with BFT type consensus, unlike proof of work civil resistance. And so that opens up the possibility of enjoying all of the guarantees that BFT type consensus gives you. So specifically you don't need a security parameter and therefore you have much lower latencies than with typical longest chain protocols. And also you have deterministic finality robustness to network partitions, et cetera. And then finally you also have this enlarged design space for how you might try to recover from a 51% style attack that's launched on your blockchain protocol.
00:33:48.610 - 00:34:32.530, Speaker A: So these three benefits, honestly, I don't think these are particularly controversial. I think pretty much everybody would concede that, for example, ethereum uses far less energy after switching from proof of stake than it did when it was proof of work. I think everyone would concede that BFT type consensus protocols do offer some performance advantages over longest chain consensus protocols. And I think everyone would admit that there are more options for trying to deal with an attacker when you have a proof of stake blockchain protocol than using proof of work. But these advantages do not come without costs. There are also disadvantages of proof of stake. So for example, they tend to be, as we'll see, quite a bit more complicated and harder to get right than Nakamoto Consensus.
00:34:32.530 - 00:35:17.422, Speaker A: There's a richer array of ways of attacking proof of stake blockchain protocols than there seem to be for proof of work protocols. And as we'll see as this lecture proceeds, in order to deal with all the different possible attacks on a proof of stake blockchain, you do generally have to make some compromises. So for example, somewhat stronger trust assumptions, just to give you one sentence of intuition. I mean the reason you have more attacks to worry about is some form of costless simulation. So basically it's just much easier for a node running a proof of stake blockchain protocol to fabricate a long alternative history because you don't have to solve proof of work puzzles along the way. So it's much easier to fabricate alternative histories in proof of stake versus proof of work. And as we'll see, that leads to some issues.
00:35:17.422 - 00:36:04.506, Speaker A: I'm not saying those issues can't be addressed, but there are some compromises you have to make along the way. So what is controversial is whether these benefits on this slide are worth it. So there was a lot to say on that point and indeed the last couple of videos of this lecture, of lecture Twelve are going to be basically more than you ever wanted to know about the relative merits of proof of work and proof of stake and all the different sort of points that people like to debate. So we will have that very detailed discussion later on that discussion. It's easiest to have that discussion after we understand a little bit better how proof of stake blockchain protocols actually work. So that's what we're going to turn our attention toward next, beginning with the next video about more details of the mechanics around Staking. So I'll see you there.
00:36:04.506 - 00:36:04.950, Speaker A: Bye.
