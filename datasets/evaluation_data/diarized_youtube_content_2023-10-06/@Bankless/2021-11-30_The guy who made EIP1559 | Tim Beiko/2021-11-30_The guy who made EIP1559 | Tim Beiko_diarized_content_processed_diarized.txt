00:00:06.890 - 00:00:42.890, Speaker A: Welcome to Layer Zero. Layer Zero is a podcast of unscripted conversations with the people that make up the Ethereum community. Crypto is built by code, but it's composed by people, and each individual member of the crypto community has their own story to tell. Cipherpunks understood that the code they write impacts the people that use it. And layer Zero focuses on the people behind the code because crypto is people all the way down and always has been. Today I'm speaking with Tim Baco. Tim Baco has a similar timeline with getting into crypto as I did, got into the top of the 2017 markets and then found his way into what niche fits him best.
00:00:42.890 - 00:02:03.410, Speaker A: Started working as a client project lead at Consensus project manager, and then eventually he hand raised and used his position working on the Besu client to really focus on EIP 1559. And Tim raising his hand to take that effort on AIP 1559 led him into the role of being the all core devs coordinator. So this podcast is really a lesson in the dynamics of what it means to make upgrades to Ethereum. And very, very true to what I think Layer Zero is all about is like what code? And who is proposing this code that ultimately becomes part of Ethereum really needs to be considered because the code dictates how people's lives will look. What Ethereum is will impact the people that use it. And Tim Baco is at the heart of what changes make their way into Ethereum and what changes do not. And so this is a fantastic podcast to answer the question, are there just centralized actors that can upgrade the code? Can Vitalik just get whatever he wants into code and upgrade Ethereum as he see fits? We've talked about these subjects directly and then also talk about some overarching decisions and problems that will inevitably be part of Ethereum's future and what we can do to solve those problems.
00:02:03.410 - 00:02:25.094, Speaker A: Now. Also, this is just a lesson in client diversity and client development. And so just a very informative podcast. So let's go ahead and get right into this layer zero with Tim Baco. But first, a moment to talk about some of these fantastic sponsors that make the show possible. Arbitrum is an Ethereum scaling solution that's going to completely change how we use DFI and NFts. And now it's live and has over 100 projects deployed.
00:02:25.094 - 00:03:06.626, Speaker A: Gas fees on Ethereum l one suck too many people want to use Ethereum and it doesn't have enough capacity for all of us. And that's why teams like Arbitrum have been hard at work developing L2 solutions that makes transactions on Ethereum cheap and instant. Arbitrum increases Ethereum's throughput by orders of magnitude, at a fraction of the cost of what we are used to paying. When interacting with Arbitrum, you can get the performance of a centralized exchange while tapping into Ethereum's level of security and decentralization. This is why people are calling this Ethereum's broadband moment, where we get to add performance onto decentralization and security. If you're a developer and you want to save on gas costs and overall make a better user experience, go to developers offchainlabs.com to get started building on Arbitrum.
00:03:06.626 - 00:03:53.734, Speaker A: And if you're a user, keep an eye out for your favorite DFI apps being built on Arbitrum many DFI applications on the Ethereum l one are migrating over to L2 s like Arbitrum, and some are even skipping over the layer ones entirely and deploying directly on L2. There's so many apps coming online to Arbitrum, so go to bridge Arbitrum IO now and start bridging over your ETH or any of the tokens listed and start having the Defi or NFT experience that you've always wanted. Alchemyx is one of the coolest new DeFi apps on the scene. It introduces self paying loans, allowing you to spend and save at the same time. Deposit the DaI stablecoin into the Alchemyx vault in order to get an advance on the interest it generates. Borrow up to 50% of the total amount of your deposited Dai in the form of Al USD stablecoin. Here's the craziest part.
00:03:53.734 - 00:04:37.730, Speaker A: The loan pays itself back and you cannot be liquidated. Unlock your assets potential in the ultimate DFI savings account, and brand new to Alchemix is the ETH vault, where you can deposit eth into the application. Borrow al eth against your deposits while having your advance gradually paid back over time. V two is rapidly approaching, which will allow for even more collateral types, plus a variety of yield strategies to choose from. Harness the power of alchemyx at Alchemyx fi that's Alchemix F I. Follow alchemyx on Twitter at alchemyxfi and join the discord to keep up to date with Alchemyx V two and to get involved in governance. Hey Tim, how's it going?
00:04:37.800 - 00:04:38.818, Speaker B: I'm good, how are you?
00:04:38.904 - 00:04:46.440, Speaker A: Pretty good, my man, pretty good. Still in Seattle, about to head into a plane to get back to San Diego from the holidays. Where are you at?
00:04:47.370 - 00:04:52.490, Speaker B: I'm in Vancouver and was just in San Diego yesterday to celebrate thanksgiving with some friends.
00:04:52.640 - 00:05:06.400, Speaker A: Oh, bummer. We miss each other. I'm up north and you went down south. And I was down south and you went up north. You have one of those cool nft things. I can't remember what the name of that NFT project is in your background, but I remember looking at those.
00:05:07.010 - 00:05:17.566, Speaker B: Yeah, I think they're called crypto trees. So I bought it. I didn't mint it. I'm still looking for a good NFT background. If people have suggestions, you're going to get flooded.
00:05:17.678 - 00:05:18.610, Speaker A: Suggestions?
00:05:19.270 - 00:05:23.780, Speaker B: Yeah. This one is like, decent, but I don't know, I'm not like 100% in love with it either.
00:05:24.710 - 00:05:30.470, Speaker A: I feel like that's how NFTs go is like, you never actually feel completely in love with them, so you always have to keep on searching.
00:05:31.050 - 00:05:31.800, Speaker B: Yeah.
00:05:32.570 - 00:05:48.170, Speaker A: So, Tim, let's go all the way back. For those that don't know, Tim is one of the lead efforts coordinating the ETh one. So I don't think we call it Eth one anymore, but also largely the EIP 1559 efforts. But let's go even further back. When was your moment that you first heard about Ethereum?
00:05:49.230 - 00:06:13.714, Speaker B: Right. A friend of mine told me about it and I ignored it. The first time, that was a mistake. Second time I heard about it was in the context of the DAO. But when the dow was a fundraising project and not a hack, and that seemed interesting. And I actually bought my first eth to contribute to the Dow. I bought the absolute top.
00:06:13.714 - 00:06:26.962, Speaker B: I think my buy went through on Coinbase. There's always like a couple of days, like, literally the day before the hack happened. Yeah. So that was my introduction to Ethereum, was the Dow getting hacked.
00:06:27.106 - 00:06:37.770, Speaker A: I feel like this is a great exemplar story. Like your friend tells you about Ethereum, you ignore it and then you buy the top. This is how people get into crypto.
00:06:38.590 - 00:06:39.882, Speaker B: Exactly, yeah.
00:06:40.016 - 00:06:45.630, Speaker A: What kind of experience? What was your work life, your career trajectory before crypto?
00:06:46.370 - 00:07:20.070, Speaker B: Right. So I kind of started out more on the business side. I always started a bunch of projects when I was in high school. I had an online t shirt company, Shopify, I don't think existed back then, but today that would be like a Shopify store. Then actually, I managed a painting company for like three years, like actual painting of houses. Realized that doesn't scale really well, so there's really diminishing returns to scale with physically painting things. Got interested into tech because it seemed like something you could scale easier.
00:07:20.070 - 00:08:07.640, Speaker B: And instead of going to college, a friend and I figured out, why not try and start a tech company? So we spent a year trying to start a startup. Didn't work out. The idea was to try and basically Airbnb for your luggage space. So if, say, you're living in Bali and you want something from France, we would match you with somebody coming your way, and then you could pay them to bring whatever you want. And that was also like a horrible tech idea because that also doesn't scale really well, but learned a lot about technology and also realized how little I knew. I kind of taught myself to code a little bit while we were doing that. And when the startup didn't work out, I went back to school to do computer science instead of business and basically did that.
00:08:07.640 - 00:08:20.540, Speaker B: And then, yeah, after that, worked as a product manager and kind of kept doing that. It felt like a nice intersection of being involved in the engineering side, but also not just writing code.
00:08:21.010 - 00:08:24.640, Speaker A: So you always have had an entrepreneurial spirit inside of you.
00:08:25.330 - 00:08:26.880, Speaker B: Yeah, pretty much.
00:08:27.730 - 00:08:32.110, Speaker A: Did I extend even earlier than that, or is that kind of like the early stories?
00:08:32.450 - 00:08:55.240, Speaker B: I think the t shirt business was the first thing. And it was interesting because I was like, I don't know, 16 years old at the time, or 15 years old. And it was just so hard to do everything from getting your Paypal account. Right. Because you're not 18, getting set up on, I forget what I use for a storefront, but, like the equivalent of Shopify. Like, all those things are quite hard if you're not 18 years old. Yeah.
00:08:55.770 - 00:09:02.954, Speaker A: Was it the pursuit of capital or the spirit of building something? Like what. What really resonated with you about it?
00:09:02.992 - 00:09:32.820, Speaker B: Yeah. So definitely the building more capital was nice in that it was mostly, like, unconstrained. Right. Like, when you work a job, it's like you can work more hours or find like, a slightly better paying job, especially when you're like, 16 years old, your options are quite limited. And so, yeah, I guess working on something that's self directed, but also if things work out, you do get a higher payoff. Yeah, I think those two things were really the gist of it.
00:09:33.270 - 00:09:39.638, Speaker A: And then what made you decide computer science when you went back to. That wasn't your undergrad, was it?
00:09:39.804 - 00:10:16.020, Speaker B: Yeah, undergrad, undergrad, I guess trying to code. I liked it. I realized how little I knew and how flaky everything I was writing was doing. So there's a lot of debates about how useful it is to understand the theory behind computer science versus just doing, say, a coding boot camp. And I think I'm very glad. I kind of started with the boot camp approach and actually got to building things really quickly, but after that you kind of just realize how little you know. So then going back and looking to theory, and I spent a lot of time in undergrad also doing AI, and that was really interesting to learn.
00:10:16.020 - 00:10:25.054, Speaker B: So, yeah, I enjoyed kind of getting just a better understanding overall of how these things work behind the scenes.
00:10:25.182 - 00:10:34.360, Speaker A: So after you graduated with a degree in computer science and then you had some experience building, being an entrepreneur, where did you think you were going to take that?
00:10:35.050 - 00:11:52.750, Speaker B: Yeah, so one thing I realized when my company didn't work out is I didn't want to start another company unless I knew I was like the best person in the world to do it. And it was just something like meeting. As I had my startup, I got to meet a bunch of other founders, and to me that seemed like one of the really not necessarily necessary things for companies to work, but it greatly improves your od if you feel you're like in the top one or 0.1% of people that can actually tackle this problem. So I was, and still am, kind of fine not starting a company for its sake, but waiting until there's something where I'm like, well, nobody else can kind of do this better than I can, right? Or the vast majority of people can't do that. And I also realized, while I was kind of running my company, we were like a startup of three that I didn't have a good feel for. What does a successful ten person company look like? What does a successful 52 00 10,000 person look like? So during my undergrad, I tried to intern of a bunch of different sized companies to get a feel for what do they look like? And then after my undergrad, I basically went to a mid stage startup for a year working on AI.
00:11:52.750 - 00:12:26.330, Speaker B: And that was, I think, late 2017, early 2018. By that point, I had been kind of following Ethereum again, pretty much. But there's not a lot of jobs on Ethereum if you're not an engineer. And AI kind of felt like a better kind of career path. So I worked in AI, kind of followed Ethereum on nights and weekends, and at some point just started searching for a job full time in this space. I got just really bored of it after like eight months. And so I was looking at any Ethereum job I could find.
00:12:26.330 - 00:12:27.020, Speaker B: Yeah.
00:12:27.390 - 00:12:37.520, Speaker A: What was the process of work Ethereum balance for you before you got into, before you got your job in Ethereum, right? Yeah, tell me about that.
00:12:38.210 - 00:13:19.962, Speaker B: So if I have to describe it quickly, it's like booking your conference room for yourself and reading the beige paper like you're doing crypto zombies. So I would try to, like, if I wasn't too busy at work, take time there to study or read up on interesting things. Spent a bunch of time on the Ethereum subreddit. The quality there was quite high. And I didn't actually go to Ethereum meetups, there weren't a lot of them in Montreal. But I managed to get my AI company to pay to send me to a blockchain conference in Austin. And then when the first ETH Berlin happened, my goal was to go there and try.
00:13:19.962 - 00:13:38.770, Speaker B: I bought a ticket for East Berlin, a ticket for Devcon, and I was like, I'll just go to those places and get somebody to give me a job. And I was really lucky that I actually landed my first job right before going to ETH Berlin. But that was kind of my plan. I was like, in person, it'll probably be easier to meet these companies and find a good fit.
00:13:38.920 - 00:13:41.460, Speaker A: So this was in 2017 ish, right?
00:13:42.070 - 00:13:57.206, Speaker B: Yeah, late 2017, early, I guess, east burden. The first one was in 2018. So I kind of started looking late 2017 again, probably right before the top, and then kept looking throughout the first half of 2018 and got something a bit later in the year.
00:13:57.308 - 00:14:09.286, Speaker A: Yeah, no, our timelines are about the same. So why Ethereum? Because in 2017 there was everything, right? Like there was eos, there were a billion, billion bitcoin forks. Like, why ethereum?
00:14:09.398 - 00:14:43.750, Speaker B: Yeah. So I'd known about Ethereum since the Dow. Just the project really resonated with me. It did seem like it was trying to build something genuinely new. I'm just not that interested. But I say, like, bitcoin forks, where they tweak a parameter and kind of derivative projects, I don't know. In 2017, aside from Ethereum and bitcoin and maybe a couple of smaller ones like Monero or stuff like that, and Zcash, there weren't like a lot of actually legitimate projects.
00:14:43.750 - 00:15:32.360, Speaker B: And I also felt the risk reward of working on, say, like an ICO project was pretty bad. That's kind of what got me to decide to work on Ethereum full time, is when there was this ICO boom. I was like, all these projects might fail, but clearly it shows there's like demand for Ethereum, right? Like there's demand for using this platform. And also the thing that I realized was how kind of broken Ethereum was. I don't know if you remember then, but icos could plug the mempool for two days or something like that, and it was really hard to get a transaction in and I was like, clearly there's a lot of work to do at the protocol level. There's like some demand for the protocol itself and all the stuff built on top still feels pretty speculative. And I didn't feel like I knew enough to be able to say, this is like a project that is actually going to make it.
00:15:32.360 - 00:15:45.450, Speaker B: Ethereum just felt like the platform order is like the most actual activity, innovation happening on it. And in a spots where there was still a lot to do to actually improve the protocol.
00:15:46.430 - 00:16:03.680, Speaker A: While you were going through this 2017 2018 journey of learning how to get into the space, were you more of like a lone wolf, or did you have company, like a friend to go with you? I remember in 2017, I had five or six friends in a group chat. Right. And so we all kind of shared knowledge. What was your dynamic like that. Like that?
00:16:04.690 - 00:16:20.694, Speaker B: Yeah, the exact opposite. Like completely alone. Yeah. There's like one guy who told me about Ethereum and bitcoin and we're not like close friends, so I messaged him probably ten times in the span of three years about it. But yeah, no, I didn't really have anybody I knew.
00:16:20.892 - 00:16:30.040, Speaker A: And I feel like that was also kind of true. When you were building your businesses, your early businesses, when you were first experimenting with being an entrepreneur, were you also a lone wolf then too?
00:16:31.290 - 00:16:42.560, Speaker B: More or less. A lot of them had co founders or I had friends involved in that or made friends through the process. So I think a lot of them probably started with me more or less alone. And then I kind of brought people into it.
00:16:43.730 - 00:16:45.790, Speaker A: What was your first job in Ethereum?
00:16:47.090 - 00:17:19.240, Speaker B: So I got super lucky. Consensus was just starting a protocol team and they needed product managers, actually. I think it was like early in the year I applied, I interviewed, and they're like, we're kind of looking for a product lead and not like a single pm, and we'll call you back if we ever hire single pms. And I thought they were just being polite and say no, but actually did call me back, like four months later. They were like, well, we hired a product lead, now we're looking for actual pms. Are you still interested? I said yes. So it was just like such a perfect fit.
00:17:19.240 - 00:17:52.050, Speaker B: And at that time, consensus was building your client from scratch. So I basically joined right after they had called the V one. But it was really more like a V zero, like a very basic client that could sync to Mainnet, only had full sync, was only an archive node. So aside from working in theory, it really didn't do a lot on Mainnet. And then over the next couple of years, we basically got to build that and add kind of all the features you expect in a standard Ethereum client, like fast sync, pruning, all the JSON RPC support, tracing and all that stuff.
00:17:52.200 - 00:17:53.860, Speaker A: Did this client have a name?
00:17:54.710 - 00:17:56.890, Speaker B: Yeah. So it was called Pantheon, not, it's Besu.
00:17:56.990 - 00:17:58.600, Speaker A: Yeah, I remember it.
00:18:00.730 - 00:18:02.102, Speaker B: Still exists today.
00:18:02.236 - 00:18:10.060, Speaker A: Right. Did you feel equipped or qualified to be able to do that? Was that a challenge for you?
00:18:10.590 - 00:18:38.190, Speaker B: Right, so I'm not sure. There were a lot of people who would have been like 100% ready. I'd say it's probably 50% there. My biggest surprise or learning when I first started is I assumed I could read the spec like the yellow paper, the beige paper, and that would be like 80% of the actual client. Right. These are like the rules of Ethereum, but it's more the opposite. It's more like 20% and 80% of stuff in clients.
00:18:38.190 - 00:19:13.350, Speaker B: Like for example, Fastsync doesn't have a spec. Right? Like the spec, there's like a pr on guess that explains how it works. But it's like, yeah, there's so many things that are kind of like that where they're not, they're maybe specified somewhere, but you really have to know where to look for. And it's quite obscure and you kind of have to learn by either using other clients or trying to understand what they did. That was probably the part where I had to ramp up the most, was just understanding all these parts of Ethereum that are specified in the weird corners of the Internet.
00:19:13.510 - 00:19:22.640, Speaker A: And is that true? Just because of the chaotic nature of ethereum? Just it was a young ecosystem, people weren't really writing stuff down. Why was that true, do you think?
00:19:23.410 - 00:19:50.022, Speaker B: Yeah, I think that's part of it. I think the other thing is maybe you don't know in advance what will be the popular feature. So for example, fast sync is what get implemented. And parity at the time had warp sync and Snapsync actually turned out to be, sorry, fast sync, snapsync is what they have now. So I keep referring to that. But Fastsync just turned out to be like the better of the two. And so everybody kind of converged towards that.
00:19:50.022 - 00:20:22.146, Speaker B: But when they were implementing it, we kind of didn't know that in advance. And for example, for tracing, it's the exact opposite parities. Tracing APIs are actually the ones that everybody say like ether scan or exchanges use, and then the get ones are less used. And so, yeah, same thing. It's just like people kind of didn't necessarily know in advance which one would work or also how people would use them. Right. There's a bunch of quirks and tracing APIs, like how you want to.
00:20:22.146 - 00:20:55.754, Speaker B: Figuring out if a transfer has actually happened can be quite hard. If it's like a smart contract that, say, sending an ERC 20, you actually need to run through everything and make sure it doesn't revert. And only then can you actually mark, say, the tokens as transferred. And so over time, people like exchanges or block explorers, they just gain really deep familiarity with these APIs and they know all the quirks around them and how to handle them. And these things just become kind of cemented as the standard, even though they didn't set out to be used like that or used so extensively.
00:20:55.802 - 00:21:19.270, Speaker A: Basically, one of the things that me and Ryan are particularly obsessed with is the broader ethereum ecosystem. Are like the values of Ethereum. And when you start to build out a client, is that where you start to become related to those things? Building out a client and also making sure that Ethereum retains the values that it was originally purported to have. Was that a relevant conversation when you were building out this client?
00:21:20.170 - 00:22:56.034, Speaker B: Yeah, I think the biggest one is awkward. Devs is probably the place where that plays the biggest role. And I think the questions we had at Bayesu specifically is given Basu was funded by consensus, and consensus is like a big organization in the space. Should our views reflect consensus's position every time? Should you have people kind of reflect their own views? How do you make sure that you build this in a way that's just aligned with the other teams? And so, yeah, I think we weren't super explicit about, okay, what are the values we want to embody as much as just what every interaction we have, how does that reflect? Is this like a net positive for the ecosystem? I think it's kind of all these small decisions of how you act and the battles you picked and the things when are you willing to just let others win? And this is like the hard part about Ethereum. We have four clients, and they all have different trade offs that they make. And sometimes some feature can be harder for you to implement because of your architecture and stuff like that. And just thinking about, okay, how do we make sure this all works when we disagree with people? How strongly do we want to express that? And overall, does this make Ethereum better or does this just benefit us? And I think we've tried to be really mindful of that, and the team still is, so I'm no longer there, but I think they still do like a really good job of that.
00:22:56.152 - 00:23:04.966, Speaker A: So it's less about the Ethereum values and more about just the technical details of if we build this in this way, will that trip up other clients that build it in a different way?
00:23:04.988 - 00:24:05.100, Speaker B: Yeah, I think one of the big values is decentralization, obviously. And having multiple implementations was always something that was important to Ethereum, and it was pretty critical, like in 2016 when there were the Shanghai attacks. And even now, if one client has a bug, it's great that we can have others kind of pick it up even more so with the merge, with the fact that staking penalties are anticordated. So I think it's just like this idea of decentralization and resiliency is probably the one that as a client team, you spend most of your time thinking about. And that's like another interesting conversation, like how much time or how little time, I guess, client teams spend understanding what's happening on Ethereum, especially as it grows in complexity. You literally can't understand everything that's being built. So just trying to figure out on what Ethereum value can we have an impact, and how do we make sure we do a good job there?
00:24:05.790 - 00:24:20.606, Speaker A: Do you remember a particular decision or issue that had to really be unpacked for a good example for the listeners, just so they can wrap their head around these small choices that had to be made, what you would have to consider and what that process.
00:24:20.708 - 00:24:55.766, Speaker B: Sure. So I can go very technical and then much more broad, but the very technical one, for example, is the ETH networking protocol. So the format by which nodes communicate with each other. So when they send a new transaction, how is that formatted? Right. And this is like, can think of it like how nodes talk to each other on the network. These formats all have assumptions embedded into them and we improve them. And oftentimes if you want to create, say like a new sync algorithm, when you're syncing, you're basically asking a bunch of nodes on the network for data about the network.
00:24:55.766 - 00:26:10.402, Speaker B: So this is where things change a lot. And I think there's a lot of time where get has been building new syncing algorithms and supporting these networking formats is something that adds a lot of technical depth to them. And they really benefit when other teams kind of drop, are able to also quickly deprecate that so that they can just refactor their code and make their syncing work better. So that's an example where I think we've always tried with the Besu team, even though we might not be implementing the same syncing algorithm as them for another year to try and see, okay, how can we prioritize this thing? Because it helps them. Another thing that's really basic is just like, adding testing infrastructure, right? Like, the EF maintains a lot of the Ethereum testing infrastructure, and it's really valuable when other client teams are able to spare some resources to help improve that. And that's one thing we try to be mindful about, bit more high level and probably relevant to most of your listeners is like EIP 1559. So when we decided to start working on that, it felt like something where we had kind of the skill set in the team and we also had the bandwidth, and literally nobody else in the client teams had.
00:26:10.402 - 00:26:47.470, Speaker B: They all had the skill set, obviously, but they didn't have the bandwidth to do that. So that just felt like something that was super valuable for Ethereum, where there was a lot of work that could be done, and we knew that we could do a lot of the work ourselves and then get it to a point where it was a bit more ready. So that when we started involving other client teams, the foundation has been set. And that was stuff like, obviously implementing the EIP itself, but just like building tools to test it better and stuff like that. So, yeah, that was probably one of the biggest one in the past couple of years where I think we were able to really have an impact.
00:26:48.050 - 00:27:42.234, Speaker A: I've always thought the position of being a client dev is really interesting because there's a little bit of evolutionary fitness that goes into clients, right? Like, bad clients drop off, good clients become downloaded more. And the cool thing about crypto is it's all like biomimicry, right? And so whichever client can get themselves replicated more is therefore a successful client. Yet at the same time, clients can't be in too much of a competition with each other, because you don't actually want one client to have a monopoly, right? You don't want one little organism to dominate the whole entire ecosystem, because then the whole ecosystem will die off because you can't have centralization on one client. So I've always thought it's like there's this tug of war between, you want to make the best client, but you can't make it too good because then you smother all the other clients. What was the conversation? Is this a conversation with client teams?
00:27:42.362 - 00:28:36.882, Speaker B: Yeah. So we've had this. I think every team kind of agrees they're not going to make their client worse, right? Whether that's like the get team or Aragon, they're all say very good on certain aspects. I don't think any team is willing to compromise to make their client worse for the sake of client diversity, just because at the end of the day we do want to offer a good product for the users. I think what we often compromise on is making the client better but slower, right. We all have these roadmaps for what we want to do, but then if other people kind of have other stuff that's really important to them, we're sometimes fine just not doing something, but just making it in a way that gives others time to adapt and stuff like that. And for example, this happens a lot, say, with the Aragon team today.
00:28:36.882 - 00:29:30.260, Speaker B: They have a completely different architecture. And so oftentimes if we can do things that allow them to implement that better, then I think we really should try and do, you know, even though they might not be the most popular client on the network today, they're potentially the most popular client in three years. And leaving the room for that is what allows us to have people who come in and decide they're going to build a whole new client. And I wouldn't be surprised after the merge, kind of the assumptions around what the network should provide and what's not kind of change. And there might be a new team that pops up and that's like, well, we're going to build a client who doesn't care about anything before the merge. If you want to validate proof of work, sorry, we just don't support that. But we can be really optimized for validating everything starting from the merge, for example.
00:29:30.260 - 00:30:21.614, Speaker B: And I think it's really valuable you want to leave the space for that because this is how we keep having better core infrastructure for Ethereum. And I'll add a note like, I'll shield the clients a bit more. When you hear about Ethereum killers, or especially EVM compatible Ethereum killers, or even roll up solutions, a lot of them reuse clients from Ethereum. A lot of them will just fork get and build their whole kind of basically network around it. Tron, avalanche, optimism are all forks of Geth and polygon as well. So I think that shows you how good the software actually is. And we want to make sure that we keep this software really good and we give the space for people to come in and build even better software on the foundation.
00:30:21.614 - 00:30:47.820, Speaker B: And for example, Aragon, which used to be called Turbogeth is a client that stores data in a much more efficient way, but that also started as a fork of death, and now they still can bring some changes in, but they've made, like, major modifications. I'm not sure it's fair to them to call them a fork of death anymore, but they definitely started out as that. And yeah, I think it's really valuable that we leave the space for new people to come in and improve on this stuff.
00:30:48.990 - 00:30:54.014, Speaker A: I want to keep on going on this conversation, but since we touch on it, why is everything a fork of guess?
00:30:54.132 - 00:31:51.630, Speaker B: Why guess? It's just so good, I guess a couple of things. So I guess is extremely good. It's also the oldest still running client, so there's a lot of people who are knowledgeable about it. I think the license is quite friendly. Also, people probably expect that it's going to be maintained forever. For example, parody was very popular as well, and the original team kind of walked away from it, and there's been others who've attempted to maintain it, but it's a really hard job to maintain a client. And so even though some teams can commit a few engineers, there's uncertainty about will this thing actually still be there in five years, or am I going to have to move off to something completely different? And I think the get team has shown that they've been there since basically the start of Ethereum, and they'll probably be there up to the end of Ethereum.
00:31:52.210 - 00:32:08.498, Speaker A: So isn't this just like a massive public goods problem? Because if we need these clients to be maintained basically until Ethereum dies, how do we expect these clients to just be maintained for the next multi generation time frames?
00:32:08.674 - 00:33:09.962, Speaker B: Right? So I think luckily the space has grown in terms of funding, and I think with regards to just basic maintenance, think about paying maintainers salaries, we're probably getting into a spot where I wouldn't say easy, but it's a manageable problem. So whether that's through large grants either from the EF or others, or through clients working with, say, L2 teams or whatnot, that then get paid for that work, I think there's more and more options where starting a client can be, say, like a profitable business. In a way. I think the biggest challenge and something I want to spend more time on is aligning the incentives so that the risk reward of working on a client is better. So right now, most client teams, like devs at best, have equity in the company they work for.
00:33:10.016 - 00:33:10.234, Speaker A: Right?
00:33:10.272 - 00:34:12.202, Speaker B: Like everybody who works at Nethermind has Nethermind equity everybody who works at consensus has consensus equity, but that's like a very indirect value creation to capture mechanism. And there is obviously some amount of risk to work on the protocol, but it's less than starting your own DeFi project, for example. You're not starting from scratch. But I still think that the kind of reward for working on the protocol, which is from zero past your salary to some equity in some company that's tangentially related to the client and also not necessarily correlated with Ethereum's rise, that's way too low. And so the risk is that people are able to take a little bit more risk. So they go from working on the clients to starting their own d five project, which is obviously riskier. But then instead of getting ten times the reward or five times the reward, they get like 100 or 1000 x times the reward.
00:34:12.202 - 00:35:32.280, Speaker B: Right. And so what I really want to make sure is that we can create mechanisms where we can have some rewards for these people that's coordinated with the overall growth and adoption of Ethereum. And what this could be in practice is something like asking projects to donate a percentage of their treasury to some fund that goes out to client developers, for example, and something like that, where if you can get new projects that are just starting out to have a social commitment to that, then a subset of those projects will be really successful. And that kind of provides some upside to the different people working on this stuff. Obviously, once you get into the weeds of it, there's like a ton of details about how do you decide who's in, who's out of the list, how do you wait people, how much do you ask for projects and whatnot? But generally, I think this idea of if we could get projects to provide some sort of upside contribution or fund that would help make working on a client a much better risk reward kind of proposition. It'll never beat, obviously, starting a successful defi protocol, but doing that is also taking way more risk. And I suspect there's a lot of people who'd be happy with just slightly better upside given the risk that they already take.
00:35:32.280 - 00:35:39.240, Speaker B: Yeah. So that's one thing I think is really important, and where the community can really kind of innovate on in the next couple of years.
00:35:39.790 - 00:35:54.800, Speaker A: Is there a world where it doesn't have to rely on donations or contributions, but there's actually a way to turn this into a business? I'm pretty sure it's blasphemous for a client to have some sort of fee in it, right?
00:35:56.690 - 00:36:34.010, Speaker B: A lot of them have businesses, but the problem is those businesses are like, they capture such a small percentage of the value. So, for example, a very common business with e two or consensus clients is like, you can offer professional support to staking services. Right. Like Consensus does this. And I'm not super familiar, but I'm sure basically every team will do this. It's like if you're Coinbase and you want to use Consensus's client, you can get enterprise level support, and consensus obviously generates revenue from that. And I think this is why I was saying earlier, I think you can build a sustainable business into starting these clients.
00:36:36.510 - 00:36:39.930, Speaker A: But they don't have token gains. Right, exactly.
00:36:40.000 - 00:36:57.700, Speaker B: They don't have the exponential upsides that you see in a lot of crypto native stuff. And I haven't seen a good proposal to embed that in clients directly that doesn't require, say, on chain allocations to dev funds. And I don't think that's something we want to do. Right.
00:36:58.390 - 00:37:00.820, Speaker A: Starts to feel like a cartel right at that point.
00:37:01.190 - 00:37:26.374, Speaker B: Exactly. Right. Yeah. And I would be very uneasy to have something on chain that sends funds to a bunch of addresses or to one addresses that just seems, and there was a proposal for it a couple of years ago that got shut down pretty hard. So I don't think we're not going to get funds from the protocol. And I think the revenue is nice, but it basically pays for the salary. And it's almost like we need some mechanism to pay for the upside or the equity.
00:37:26.374 - 00:37:42.240, Speaker B: And that's like the bit that's missing. And yeah, donations totally might not be the final or like the best approach. If people have suggestions, send them to me. I'm happy to try and get those working. Yeah.
00:37:42.950 - 00:38:17.494, Speaker A: Say for a thought experiment, for example, say we figure out as an ecosystem how we do actually attach the upside potential of a token to building a client. And then say again in this thought experiment that we successfully figure that out. And then all of a sudden clients and tokens are paired and then we have some sort of just like mania where, oh, I can make my token go 1000 x by starting a new client. And then we go from having a handful of clients to hundreds and thousands of clients. Right. Is that a problem if we have hundreds and hundreds of clients?
00:38:17.542 - 00:38:50.950, Speaker B: Yeah. So I think the easy solution to that problem is like you time gate it, right? So you time and feature gate it. So you say your client has to be live for a year. And if you want to build a new client, come see the EF's grant program or some other malok now or something and we'll give you funds to actually try this and prototype this. But I think if you have that sort of mechanism, you require clients to have been live for x amount of time. And it's extremely hard to start a client. So most people will give up before a year, I suspect.
00:38:50.950 - 00:39:51.226, Speaker B: I don't know, maybe a year is too short, maybe it's two years, I don't have a strong opinion. And then you feature gate it as well. It's like, well, can you sync the main net and process these blocks or post merge? Can you be a validator? So there's like a couple of things that, and say if you're a validator, can you keep these metrics right? Can you attest to x percentage of the blocks? Can you propose blocks on times? And I think it's not that hard to define the baseline for what a successful client is. It's quite hard to build it. And there's been probably 50% of teams who've tried that have not made it to this bar historically. So yeah, I think that would be the way to go. And then if we have twice as more, there's a discussion to have, how much do we need and does it bring you extra efficiency or not? That feels like kind of a happy problem.
00:39:51.226 - 00:39:59.930, Speaker B: If the problem we're having is too many smart people want to work on this, I'm sure we can figure out a way to have them work productively.
00:40:00.590 - 00:40:31.270, Speaker A: I want to pick up the client diversity question line again, because are there conversations in the very long term, like 50 to 100 plus years, about the inevitable centralization of ethereum onto one client? Do people think that ultimately one client will kind of win out? Or is there a conversation that we just need to be able to balance it just enough? What are the long term thoughts about client diversity in the very long term?
00:40:31.770 - 00:41:25.734, Speaker B: Yeah, so I'm sure people have very differing opinions. I can speak to myself and what I see one of the challenges with not the very long term, but say like the short to medium term is people have a really strong sense of pride in what they built, right? So people who build a new client, they're not going to pack up and go home and be like, okay, I'll just work on Geth instead. People put huge amounts of resources and efforts into that. And so I think they want to make it successful. So I think there's this, I don't know, inherent motivation for different people who started these projects to keep maintaining them. I would be weary of only having a single client in the future. If you told me that, I don't know, in 50 years we have two or three.
00:41:25.734 - 00:42:04.130, Speaker B: That seems like less bad. The challenge is if one client goes down and has a bug, then the Ethereum network basically stops working. Right? And again, that's maybe something that we change our mind on as a community. But so far we've had an extremely strong bias on ethereum to the chain doesn't go down. Right. And Ethereum has had a higher uptime than bitcoin. The bitcoin chain has, very early on in its life, stalled for a while while they put out a bud fix that hasn't happened on Ethereum, especially as more and more economic activity gets built on Ethereum.
00:42:04.130 - 00:43:12.860, Speaker B: What we're selling basically to people building on Ethereum is this settlement layer that does not go down and that you can always rely that like, you know, post merge, every 12 seconds there's a new block that comes in. And if for some reason the chain had to go down for two days or like even a day, and this is like the amount of time you'd expect, like an a plus engineering team. If there's a bad bug to like wake up in the middle of the night, find what the issue is, fix it, test it and ship it and get everybody to update their nodes. Realistically, you can't do that within less than 12 hours, probably. And if the Ethereum chain went down for 12 hours, that'd be terrible. Just think today, what would happen with DFI? What would happen with all the businesses who rely on being able to accept payments, with all the insurance? That's like on Ethereum. And if you look out 510 years in the future, it's like if tradfi is selling Yamdis, imagine it's like market close in the US or in Asia and you're selling for the day and Ethereum is down.
00:43:12.860 - 00:43:58.466, Speaker B: If people had to expect Ethereum to be down, I think you take away 50 plus percent of Ethereum's value proposition. And so I think we really want to be in a spot client wise where this can't happen. Right? And I'm not sure what the right number is. It's definitely bigger than one. I think it's also bigger than two. It's not ten or 100, but somewhere in that range, I think is really healthy. And I think it becomes even more healthy after the merge because some of these bugs can have impacts on people's stakes, right? So if there's just one client and there's a bug in it and the chain goes down, you basically can lose people money that are validating on the network.
00:43:58.466 - 00:44:40.934, Speaker B: And that's also something like, yeah, it's a big part of the value proposition, like, you can be a validator and earn income, and if you do things right, you shouldn't be penalized. That's my opinion. Some people might disagree. And I also think, yeah, if we want Ethereum to keep innovating in 50 years, the way to innovate is often to build something new. Because, for example, geth could not build what Aragon has built just because they need to support all the current geth users. So new teams are able to kind of leapfrog. If in 50 years we have all zero knowledge based Ethereum, I suspect we'd have a client that's built to support zero knowledge proofs from the core from day one.
00:44:40.934 - 00:44:57.002, Speaker B: And that would be way more efficient than whatever zero knowledge implementation is added to geth, just because you can take all the decisions, making those assumptions. So, yeah, I think we'll always keep a few. It's really important for the resiliency. Some people might disagree with that, though.
00:44:57.136 - 00:45:16.514, Speaker A: I definitely want to get into the zero knowledge conversation later, but I also want to pick up on Tim's story because, Tim, you came on a lot of people's radar because of your effort on EIP 1559. Can you talk about the transition from working on Besu into EIP 1559? You touched on it a little bit, but just keep on going down that story.
00:45:16.552 - 00:45:54.494, Speaker B: Yeah. So I kind of mentioned earlier, at consensus, we always tried to think about what are things we can do that really help the community and that we're maybe uniquely positioned to do. And 1559 kind of fit that bill perfectly because it was like a huge effort. Like, we knew getting into it, it would be huge. We underestimated how big, but we knew it would be big and bigger than we estimated, and we wanted people to use baseu. So we were like, well, if we're the first ones to get like a test net with 1559, people want to try that and it'll be good for us. And we also saw no one was really working on it.
00:45:54.494 - 00:47:06.258, Speaker B: So there had been some original efforts done, but the team had kind of stepped away or they weren't super. It was like missing momentum, basically. And it seemed like something that was just mostly desired by a very large part of the community. It was somewhat contentious, but it felt like an, I don't know, 80% bet that this thing will actually make it on chain, assuming it's safe. And finally, also, yeah, it's worth noting like, when 1559 was first presented, the get team basically had a bunch of technical issues with it, and no one had really addressed them, but we had a really clear list of problems to solve. And so, yeah, so we decided to take one or two engineers, have them look into it really deeply at first to understand, are we missing something here? And then we just started kind of prototyping it. I started running calls with the people who had been involved in the past to see, what have you guys done? What were the blockers? What are the things we're missing to get the main net? There were a couple of really big changes we made to the spec that really helped simplify it.
00:47:06.258 - 00:48:04.806, Speaker B: So, for example, the original 1559 EIP had, like, this transition period. So it was like, we're going to have a hard fork, and on the hard fork block, you're going to start with 1% of transactions, and the block can be 1559. And then over six months or a year, I forget you'll have 100% or maybe 99%. Like, you always leave a bit of room for legacy transactions, but you kind of transition this way. And that was super complicated because we would have clients maintain two different memp pools, one for 1559 transactions, one for normal ones, have to create a block, and you need to cross check them. And if we got to the spot where we wanted to actually deprecate legacy transactions, you have this problem of somebody signed a transaction five years ago, they walked away in the woods, and now they come back and they want to submit it to the network, and they can't because we bricked it. So that's one thing that even though in theory, in practice, it might not matter much.
00:48:04.806 - 00:49:00.380, Speaker B: Like in theory, felt very important to keep this property. Like, if you find an ethereum transaction, we shouldn't lock you out of the system. And so Micah Zoltu found, like, a really smart way that we could convert legacy transactions to 1559, one where we set the gas price to both the max fee and the priority fee. And that allowed not only to solve that problem, but also to simplify the spec hugely, because then we had a way to have a single mem pool, and you can just treat all transactions as though they were 1559 style transactions. We just spent like a year, basically. That was one of the bigger kind of fixes to the spec, but we spent like a year going over this and trying to figure out what are the problems here or how can we fix it. The other huge one was there was no proof or analysis that showed 1559 actually worked.
00:49:00.380 - 00:49:15.360, Speaker B: Everybody who had specked it and looked at it from the client side, kind of understood intuitively why it would work and why it was a better system. But some people were uneasy. They were like, well, what if we're wrong?
00:49:17.330 - 00:49:24.080, Speaker A: And this question is about, like, we don't really know until we see it in action, and we can't really know ahead of time. Is that kind of the issue?
00:49:24.610 - 00:50:13.040, Speaker B: No, it was more about the economics of it. We don't know if this is like a sound economic system. And when you think about it, you're like, it sounds like it. But we were scared that some economists would just look at it and be like, oh, no, this is absolutely broken. Somebody will do this and kind of bypass the system. And so somebody basically helped and hired Tim Rothgarden, who's a computer science and game theory professor or economics professor who specializes in game theory. And he basically spent three months with his team researching 1559 and trying to come up with a formal proof or model of like, does this actually meet the goals that it's intending to? And he published like a 50 page paper, the TLDR of which was, yes, it basically does.
00:50:13.040 - 00:50:59.550, Speaker B: Yeah. And that was hugely valuable because at least there was something we could point to that was like, somebody with deep expertise in this field, who also understands ethereum, was able to analyze this, and there was no massive shortcomings in it. So it was just like, yeah, spending the time to doing all this. And towards the end, we got to a spot where we were actually ready to put this onto main net. And I think there it was more work around trying to educate the community around what 1559 does and doesn't do. So I spent a bunch of time, wrote a bunch of articles trying to explain that. And what can people expect? For example, people thought 1559 would massively lower transaction fees on Ethereum and just trying to explain what does it actually do to transaction fees.
00:50:59.550 - 00:51:31.530, Speaker B: And similarly, there was a lot of talk about miners and how would miners react. So I spent a bunch of times working with folks not only to analyze that, but also to talk with miners and try to explain to them this change and trying to explain to them other revenue sources that they could get and how to prepare for that. Yeah. So it was a lot of very technical work at first, then kind of transitioned to more like community outreach and just a lot of explaining 1559.
00:51:31.680 - 00:51:36.730, Speaker A: So a lot of your EIP 1559 work came through working on Besu?
00:51:37.790 - 00:51:45.840, Speaker B: Yeah, basically. And it was extremely helpful to be in that position because I had a dev team that could actually write the code. Right.
00:51:47.650 - 00:51:53.760, Speaker A: And then you actually transitioned into a different role in Ethereum. How long after did that happen?
00:51:55.170 - 00:52:46.434, Speaker B: Yeah, so basically, I think I'd been at consensus for two and a half years or so. And I was always involved in the awkward devs call because I was on one of the client teams, but I was also kind of the less technical person on those calls. I was kind of the only non engineer there, basically alongside Hudson. And sometimes other folks show up, like Pooja and James Hancock was there also earlier on. But the call is basically 90% engineers and then some kind of people like us who are more on the project and product management side of things. And towards basically the end of 2020, I was talking with Hudson and he mentioned he had been doing this for, I think, five years up to then, and wanted to move to something new. And that just felt like such a great opportunity.
00:52:46.434 - 00:53:19.180, Speaker B: It felt like something where I knew kind of how all Cordev's worked. I think I had some ideas about how we could potentially improve it. And also my opportunity cost for doing this wasn't that high. You don't want an engineer to run awkward devs. You want them to write the code. So I was like, I'm one of the few people who understand how this whole thing works, but also I can't actually write the client. So the next most valuable thing I can do is try and manage or run this whole thing.
00:53:19.180 - 00:54:06.330, Speaker B: I got to talking with Hudson and it seemed like a good transition. One thing the EF was super mindful about is they really don't like taking people from projects and bringing them into the EF. They really want to push many projects to thrive. So one thing we did was I took basically six months to transition out of my role at consensus so that we could hire somebody new and train her, who's basically the new product lead for Beisu today. Sajida and I kind of started working part time at the EF and went part time at consensus once we had hired Sajida, so I could just kind of help onboard her. And then, yeah, over basically, I think it was around March, I was just like full time at the EF and no longer at consensus.
00:54:07.070 - 00:54:20.880, Speaker A: For the listener that isn't familiar, which includes me at this point. Can you just TlDR explain, like, I'm five, what Hudson and now your role is with the, like, what is it that's really.
00:54:22.210 - 00:55:05.294, Speaker B: Right, right. Not super easy. But the main thing is every two weeks there's this call where all the different client developers get together to discuss changes to Ethereum, right? This is how we plan network upgrades, how we discuss new eips and whatnot. And you need like a moderator for this call. So that's kind of my job. Like at very basic level is like every two weeks I sit on this YouTube call and I try to make sure that we get through all the topics from there to make sure those calls generally go well. I spend a lot of time thinking about how can we make client development like a sustainable and thriving thing.
00:55:05.294 - 00:56:13.214, Speaker B: And so that includes things like working on grants programs or just talking with the teams and organizing workshops when we need to. So just like making sure that the kind of working environment around this is good. And then the other half of my job is basically explaining all the stuff that we do to the broader Ethereum community. And so stuff like this podcast or writing these tweet threads that I do or writing articles, just trying to take what we spend all our time on and make it accessible to somebody who's obviously familiar with Ethereum but doesn't want to spend 2 hours every two weeks listening to this call and trying to dig through Eips and pull requests and whatnot. So, yeah, I really see it kind of twofold internally. Work with the client teams, make sure that we have a roadmap for Ethereum. We're executing on it and trying to unblock the biggest blockers, whatever they are, as they come up, and then kind of sharing what's happening with the broader Ethereum community so that they can have a feeling for what happens and obviously can participate.
00:56:13.214 - 00:56:32.522, Speaker B: If there's something that they support or disagree with, then my hope is somebody can just skim my tweet threads and be like, oh man, this is like a terrible idea, and then engage on this one specific issue rather than to have to listen to all the calls all year long and the hope that nothing goes wrong.
00:56:32.656 - 00:56:52.160, Speaker A: Right. So you're a relayer between the community and all the client teams, just relaying the data. And then in both ways, right? Like, hey, client teams, the community has these concerns. Or hey, client teams, there's this thing called EIP 1559 that the community really likes, and then probably vice versa too, right?
00:56:52.930 - 00:57:22.970, Speaker B: Yeah. And I think that's giving me too much credit. So it's like, if I had to simplify it, I think I'm a better relayer from the core devs to the community, and we've actually hired somebody to do kind of the opposite. So Trent van Epps works with me closely. And if I had to describe, I'd say he basically does the opposite. He's better at going to the community and getting their opinion than bringing it back or if we have something that really affects kind of the community. He helped a lot with 15, six, nine, and now with the merge, for example, trying to reach out to all the projects.
00:57:22.970 - 00:57:33.980, Speaker B: Yeah, so it's basically two full time jobs. One is sending the information out and one is getting the information and we work really closely together.
00:57:34.670 - 00:58:12.678, Speaker A: Hey guys, I hope you're enjoying the show with Tim. Thus far in the second half of the show we are getting into the details of what does it actually mean to make changes to Ethereum, who actually is a core dev. Am I a core dev? Are you a core dev? Some interesting conversations, some interesting thought experiments coming up in the second half of the show. Before we get there, a moment to talk about some of these fantastic sponsors that make the show possible. Matcha, everyone's favorite Dex aggregator, has just launched an open beta for gasless trading. So if you're trading more than $5,000 in common ETH and wrapped bitcoin pairs, then your gas fees on matcha are free. And that's why you should be using Matcha.
00:58:12.678 - 00:59:01.750, Speaker A: Matcha routes your orders across all the various Defi exchanges on Ethereum, polygon, Binance, smart chain and gives you the best possible price without any trading fees or unnecessary slippage. Matcha has smart order routing that splits your orders across multiple liquidity sources. If matcha sees that it gets you better pricing. Trading on Matcha is super easy because it pools the liquidity for me into a single and easy to use platform and has even saved me multiple times from accidentally picking the wrong decks to trade on and getting a bad price. Matcha also allows you to make limit orders on chain so you can set and forget your defi trades and they will go through automatically while you're away. So when you're making a trade, head over to Matcha XYZ bankless, connect your wallet and start getting some of the best prices and most liquidity. When you trade your crypto assets, living a bankless life requires taking control over your own private keys.
00:59:01.750 - 00:59:39.346, Speaker A: Not your keys, not your crypto. That's why so many in the bankless nation already have their ledger hardware wallet, which makes proper private key management a breeze. But the ledger ecosystem is much more than just a secure hardware wallet. Ledger is the combination of the ledger hardware wallet and the Ledger Live app. And if you're used to seeing all of your crypto services and favorite defi apps all in one spot, Ledger Live is where you want to be. Not only does Ledger let you buy your crypto assets straight from the app, but it also hooks into all of the defi apps and services that you're used to using Ledger live. You can stake your Ethan Lido, swap on dexes like Paraswap, or display your NFts with rainbow.
00:59:39.346 - 01:00:15.802, Speaker A: You can also use wallet Connect inside of Ledger Live to connect to all the other defi apps that keep coming online. Defi never stops growing, and the Ledger live app grows alongside with it. So click the link in the show notes to see all of the defi apps that Ledger Live has. And stay tuned as more apps come online. And if you don't have a ledger hardware wallet, what are you even waiting for? Go to ledger.com, grab a ledger, download ledger live, and get all of your defi apps all in one. Like, what's that? Like, what's it like to work with all of the client teams? Because they're all engineers, right? And so they're engineering type.
01:00:15.802 - 01:00:24.980, Speaker A: The meme is that engineers, they're really good at code, but they're not really good at communicating. And sometimes they're all kind of like lone wolves. What's that experience like?
01:00:26.310 - 01:01:22.118, Speaker B: Right? I think most teams have some people who are actually pretty good at both, who are good on the engineering and the more project management level, and typically they'll self select those people and have them participate. So I don't necessarily have to interact with all the engineers, right. I can interact with the subset who decides they want to participate in the project management. And I think I kind of see it as my job to fit around their schedules or their constraints, rather than the other way around. They have to write all the code. So, yeah, I just generally try to work in a way that's convenient with them, whether that's like, whatever platform you message them on or what time you schedule meetings with them, just like all these small things that ideally don't add too much friction to their day job of actually building the clients. But, yeah, I don't know.
01:01:22.118 - 01:01:54.850, Speaker B: Most teams have been great to work with. I don't have any complaints about them. And I think the other part that's really interesting is I work with those and spend most of my time with those, too, but also tend to work with basically everybody who submits an EIP that gets some amount of traction, and then I kind of help them get this in front of the right people and do that as well. So, yeah, I'm stoked. I get to work with all the smartest people working on the protocol and kind of observe and sit around as they build a theorem.
01:01:59.030 - 01:02:13.410, Speaker A: Do you worry about your own. What's the right word? Impartiality. Impartialness. Hey, there's the thing that I'm interested in. Hey, core devs, let's focus on this. Or are you kind of like a steward that is supposed to be apolitical and just facilitating communication?
01:02:13.490 - 01:02:14.070, Speaker B: Right.
01:02:14.220 - 01:02:16.360, Speaker A: Have you ever did it balance that at all?
01:02:17.130 - 01:02:58.774, Speaker B: Yeah, totally. It's something I think about. So, for example, when we did 1559, and when we decided whether it was going to be included, I asked Hudson to come and run those calls, because I obviously had, like, a strong feeling there. Generally, I'll try to be on the more impartial side. I think you can't be, like, 100% impartial as well. When we were having 1559 conversations, for example, sometimes there are some bad faith arguments, and if you just give as much of a platform to bad faith arguments as to good faith arguments, you're not actually being impartial. Right.
01:02:58.774 - 01:03:27.246, Speaker B: You're kind of tainting the thing. And I think that's something that's a bit more subtle that I try to think about a lot. At the end of the day, I can't really do much, even if I feel really strongly about something, if the devs don't want to implement it, I can't force them. Right. And this is true of anyone, not just me. You need to actually convince people. And then it's like, even if I convinced the devs and all the community hated it, well, nobody would download the software, and so they'd have to do that.
01:03:27.246 - 01:04:36.130, Speaker B: So I think you need to be somewhat impartial. But it's also what I spend a lot of time focusing on is finding out what's the actual bit on which people disagree and focusing the conversation there, because I think a lot of time, we lose. There's, say, ten arguments, but there's actually, like, one or two of them that are really important, and if we get resolution on those, people will be okay with all the other small issues. And so when we have these discussions, one thing, for example, I found really helpful is, outside of the alcohol devs call, reaching out to all the client teams and being like, hey, what do you guys think about this? What do you guys think about this? So that I can get to the call and be like, well, have the teams think this, have the team think that, and we can discuss this one specific point of friction and ideally move it forward. I think being somewhat impartial is really important, I don't think you can be fully impartial. For example, another bias that I, and I think all core devs have is we'll benefit the Ethereum main. Net over other implementations of Ethereum.
01:04:36.130 - 01:05:13.182, Speaker B: Right? So this idea of interrupt, we won't try to kneecap other implementations, but we'll always kind of put the Ethereum main. Net first. Right. And that's obviously a bias because somebody from cello or avalanche come on the call and be like, well, you're not impartial. And I think we're fine telling them, well, we want to focus on the Ethereum main. Net. I think there are these decisions we've made, and I try to adhere to the rough social consensus just to try and highlight the biggest point of frictions between different people.
01:05:13.182 - 01:05:16.740, Speaker B: So we can ideally spend most of our time discussing those.
01:05:17.430 - 01:05:53.150, Speaker A: This line from the cipherpunks, I'll repeat whenever I get the opportunity, is that cypherpunks understand that the code they write impacts the people that use it. And the all core devs call is like the war room for all changes, all bits of code that in theory will impact generations and generations down the line. And it's probably really draining to think of every single decision as like, all right, well, what about three generations from now? What about 200 years from now? But is that people's thoughts and considerations, like behind the scenes?
01:05:54.370 - 01:06:47.886, Speaker B: So I think the part where we have it maybe slightly easier than that is people are willing to attack the Ethereum network today. So we could usually get by saying, will somebody attack this? If they can, and I'm not sure that's like a perfect proxy for, is this going to be good 200 years from now? But we can also make more changes in the future, right? Like if we realize something's wrong in ten years, I hope we'll be able to change it. So the one kind of main bit we always think about is like, what's, like the security implication of this? And basically every EIP that gets proposed kind of goes through this. Somebody is using Ethereum, they're frustrated by something, and they're like, man, I have this perfect idea of a feature that would make this so much easier. They talk to other projects and they all agree. They're like, man, this is great, such a good idea. And then they come on a cordes call and they get pointed out, well, this has three security issues in it.
01:06:47.886 - 01:07:45.310, Speaker B: If we introduce it, and then at least half the ips just die there, and the ones that usually make it in, you'll have the author kind of then spend months and in some cases years trying to come up with some workaround that provides the feature that they originally wanted to but is also safe. And this is like 50% to 90% of the work of actually getting an EIP onto main net is like, okay, how do we make sure that it's safe? And that's really like the main lens by which we kind of view things. Obviously there's this implicit assumptions like, we want to do stuff that's useful to people, but generally that's not like the hard part. It's easy to look at a new feature and be like, okay, yeah, this would help because it lowers gas costs, because it improves Ux and whatnot. But then it has all these other problems that people might exploit and how do we address those?
01:07:45.460 - 01:08:14.570, Speaker A: So obviously, vetting the code for making sure it doesn't break Ethereum is really, really important. But have you ever experienced a social attack, as in somebody's trying to make their way into the all core devs team or to calls to implement some social coordination attack? Because as we know, even outside of crypto, most hacks are just like people social engineering other people. Right, right. Has any story like this ever arisen?
01:08:15.550 - 01:09:04.330, Speaker B: So I think what we see a lot, a lot might be an overstatement, but what we've definitely seen a few times at least, is people who come in with an EIP and they have an incentive to get it in. They're much more unrelenting than the people who don't want to get it in. So say you come up with an idea and it's like you really want this. And people are like, well, there's problems a, B and C with it. And then the next week you come up and you're like, well, I really want this idea. And the person doesn't want to repeat, like I told you, there's problems a, b and c. And you see that it's almost like a war of attrition where people would try to bring up stuff over and over and over, even though the fundamental issues with them had not been addressed.
01:09:04.330 - 01:09:47.302, Speaker B: And I think we've seen it a bit less recently. But yeah, in the past I think the way with that is we would just tell people, you can't really come back on the call until you've addressed these things. And once you have, we're happy to. But I think that's really the things like the imbalance between people who want something and people who don't want it. The people who don't want it having to constantly re justify why and not wanting to, it's not really their job. So that's one thing I'm pretty mindful about. I think that more subtle engineering attacks say very, I don't know, extreme scenario like the NSA infiltrates a core dev team.
01:09:47.302 - 01:10:43.420, Speaker B: I think this is where the client diversity also kind of matters because no client team can single handedly push a change unless they kind of convince everybody else, right. And then even if the client teams agreed, then they'd have to convince the community to do that as well. And you can imagine stuff where you only need to convince the client teams, right? Like if it was like some backdoor in a cryptography function, the amount of people running nodes who can actually verify that is quite small. But if somebody was coming and shilling their BLS twelve library nonstop, and, I don't know, say the get team was like, oh, yeah, we're really on board with that. And other teams thought something was fishy about it, it would probably just stall, right. Or if not, other teams would be like, okay, we'll do this, but we'll use a different library. And so you'd kind of mitigate any impacts of that.
01:10:43.420 - 01:11:17.300, Speaker B: And also, it's worth noting a bunch of teams have people that disagree with each other on the team, right. It's quite possible that somebody, again, say this like this example. Somebody tries to put a backdoor into geth that the get team might not agree about. Do we want to use this library or not? I think this is where it's really valuable. You don't want to have just one implementation that's guarded by one team. Because if for whatever reason, that team got compromised, the other teams kind of act as a sanity check. And that's really good.
01:11:18.070 - 01:11:54.274, Speaker A: So part of the ethos of this whole industry is that it is reflective of what the people want, right. And the nature of open source systems is that you can contribute to them if you think that you have something valuable to contribute. So vet this statement for me. If you have something that you think Ethereum should go into, ethereum, you can actually get that done. And I'm talking about not you or the client teams, I'm talking about Joe schmo from wherever in the world has a really good idea, but he doesn't know you. He doesn't know Danny Ryan. He doesn't know any of the client teams, but he has a good idea.
01:11:54.274 - 01:12:02.660, Speaker A: Can he actually get that code in there or is actually updating the code gated to a very small, privileged number of people.
01:12:03.590 - 01:12:37.082, Speaker B: Right. So we have eip one, which kind of describes how to do changes to Ethereum, and I've updated it to add a note about this. I think the difficulty is proportional to two things. One is how big of a change you're trying to introduce. If something that happens all the time, for example, is some teams working on roll ups, for example, use a pre compile and they think the gas cost is too high. And they come in like we don't necessarily know them and they're like, look, this gas cost is too high. It would help us a lot if it was cheaper.
01:12:37.082 - 01:13:14.890, Speaker B: And we've run some benchmarks and we think it's safe if it's cheaper. So they can come in and they're obviously familiar with Ethereum, they don't know anything, but it's a simple change, they're able to add a rationale for it and that's pretty straightforward. If, say you want to change how, say, an idea on the scale of EIP 1559, you're going to need a lot of time and effort and convincing people to do this. So I think, yeah, one part of the difficulty is proportional to how big the change you want to make is. And it's also proportional to how big ethereum is. Right. Because you're changing the system not just for yourself but for everybody else.
01:13:14.890 - 01:14:11.354, Speaker B: Right? So basically the more ethereum grows, the harder it is going to be to make big changes because you just have so many different people that depend on it. So can a random person who knows nothing about Ethereum come and make a massive change? Realistically, no. Can they come without having connections and propose something that's intelligent and well scoped and be heard and have it critiqued like 100%? We get ton of those. If you're not sure, you can reach out to me. I get emails from people that are like, I want to come on all cordes and talk about this and I'll try to let them know, just set their expectations. And even if they have an idea, I can tell them, look, even if this works, this is going to be something that's going to take like a year plus to get done. And if this is something you want to commit to, I'm happy to help you and I'll put you in touch with people who can review and give you feedback on this.
01:14:11.354 - 01:14:18.366, Speaker B: But yeah, people should expect that. It's not like a trivial thing to come on Ethereum and change the protocol, and that's by design.
01:14:18.468 - 01:14:22.240, Speaker A: So Tim, who is an all core dev, how do you define that?
01:14:23.910 - 01:15:26.520, Speaker B: Right, hard question. So I think we use all core devs to define the call, not like the people. And I think I've tried to break it down between client developers so the people who actually write code into one of these clients, and then we have a bunch of other folks on the calls who are extremely valuable, like researchers, obviously, EIP champions. I find it easier to think about it that like, what do people actually do? I think when people ask this question, they're asking implicitly who gets to make the decision? And it's a balance. I've mentioned this a couple of times already, but even, for example, I'll take the most Steelman version of this is like Vitalik really wants to change. Vitalik has a list of changes he really wants to see on Ethereum that don't get adopted because for whatever reason, people don't think they're safe or they're just not the priority. And even him can't force something through the process and get everybody to drop everything they're working on.
01:15:26.970 - 01:15:35.400, Speaker A: Unless, can you just rattle off a list of things that you know that Vitalik wants that isn't going in? Just a really quick list.
01:15:36.810 - 01:16:18.966, Speaker B: I don't have the full list, but the one he talks about a lot is removing self destruct. That's like one of the fairly simple things we could actually do that has a lot of kind of ripple effects. Right? And that's an example where I think he'd be happy if we decided like, oh, we're going to remove, solve the struck really quickly. And then when we look at this, we're like, well, how the hell is this going to work? And by, nobody else has spent their time figuring this out. So I think that's a good example where, and there's valid reasons for removing it. It helps with a bunch of stateless stuff and whatnot. Like, he doesn't just want this for fun.
01:16:18.966 - 01:17:03.474, Speaker B: There's a strong rationale for why. I guess as a group, we just end up having utter priorities, and nobody has made that their number one priority. I'm not saying it's not going to happen, but it's like even him can't get everybody to drop everything and focus on the thing. And if he might come up with a proposal that's important enough, but people would have to all make the call, like, oh yeah, he's right, and we should drop everything to work on that. And so, yeah, when people ask you about who has the power to make these decisions, obviously the group decides what code goes into what hard fork. We have this concept of rough consensus. So we want people to generally agree.
01:17:03.474 - 01:17:47.666, Speaker B: We won't require 100% agreement. Like a lot of people will just sometimes say they disagree, but not enough to block it. If people have really strong objections, it is possible for somebody to single handedly block or delay something if they have a sufficiently strong objection to it. But there's no hard and fast rule here. And then, yeah, even so, if you have consensus amongst all the client teams and some of the folks like, say the EIP champions or the researchers, you still need the community to adopt the change. Right? And you need everybody to upgrade their nodes. And I think we don't want to be into a spot where we just ship a bunch of software and nobody upgrades it.
01:17:47.666 - 01:18:36.738, Speaker B: That's actually very confusing. It's bad, and it's a situation we want to avoid. So generally, the core developers won't ship an upgrade that they feel would not get adopted by the community. But it is a possibility. If for whatever reason we messed up there, we misread things and the community decided this is actually bad, they don't have to upgrade. I think obviously, if you want to make changes to ethereum, there's like a lot of value in spending time to understand how this process works and kind of gaining trust from the people in it and providing good contributions and whatnot. But I don't think there's anybody who can single handedly change or derail the process at this point.
01:18:36.738 - 01:18:58.730, Speaker B: And I think that's really healthy. It's probably way underrated if you look at, say, the strawman arguments against our governance process and how people will say, again, Vitalik can influence the entire roadmap and what actually happens, I think there's like a massive gap there. And, yeah, that's really valuable.
01:18:59.310 - 01:19:22.670, Speaker A: So in phrase differently, would you say like a core dev is somebody that has a good idea, the motivation to actually commit to that good idea, the resources in order to prove that that idea is good, and then is ready to follow through on carrying that idea all the way to the very end of its execution. That person is a core dev.
01:19:22.820 - 01:19:57.018, Speaker B: Yeah. And again, it's like a fuzzy label, right? That seems generally like a good definition. I think what I don't like about this label is it's also like, say you have a researcher who spent two years coming up with something and they don't actually implement it. They're not a core dev in that they don't write code, but they're hugely valuable because they've done the work. Like, for example, everybody who worked on the Beacon chain, spec but doesn't write code for it. I don't know. You could debate whether you call them a core dev or not, but they're definitely a super critical part of the process.
01:19:57.018 - 01:20:05.642, Speaker B: And I call them like a researcher, but they're involved in the protocol governance for sure. So, yeah, it's a fuzzy label.
01:20:05.706 - 01:20:21.170, Speaker A: I'm just getting images of the whole Spartacus meme where everyone stands up and says like, well, I'm a core dev, I'm a core dev. I wrote a tweet that helped the core devs learn something like, oh, I wrote the introduction paragraph to this eIp. I'm a core dev, I'm a core.
01:20:25.910 - 01:20:34.054, Speaker B: I don't want to exclude people from it. And I think, yeah, maybe at some point we'll just start calling it all core devs altogether and get rid of that problem.
01:20:34.172 - 01:20:37.750, Speaker A: That's pretty funny. Is Amin, Soleimani, Cordev.
01:20:39.870 - 01:20:57.906, Speaker B: I think a lot of people almost dismiss Amin because of his attitude. He's made like mega important contributions to theorem. Like he's worked on state channels. Malok Dao is obviously huge, so I think people are too quick to dismiss Amin.
01:20:58.038 - 01:21:17.080, Speaker A: Yeah, that was mainly the reference. Maybe I'll try and find that clip and put it at the end of the show. But when you know what I'm talking about, listeners stay to the end. We'll put that one in the end. So, Tim, are you going to just facilitate these core dev operations for the rest of your life, or what's next on the horizons for Tim?
01:21:18.570 - 01:21:57.330, Speaker B: Man, I don't know. I think it's really hard in a space that moves so quick as Ethereum to have, say, a five year plan because it's impossible to predict. I felt like obviously when I joined this, one of the main things I needed to do was get the merge done. That seems like a no brainer, and we're working on it's the next big thing. We're also going to have the withdrawals from the beacon chain won't come in the same upgrade as the merge. They're going to come a few months after. And if I think of the merge being done, for me, it's probably those two upgrades.
01:21:57.330 - 01:22:37.886, Speaker B: There's a bunch of stuff after that I feel really strongly about at the protocol level. So the biggest one is stateless. So the idea is that the amount of data on Ethereum kind of keeps growing over time as more people use it and there's more data stored. But it'd be really nice to have a way to cap how big a node is for a bunch of technical reasons, but just to have kind of a constant or ceiling on the node size, that's something we've been talking about since 2017. 2018. And that I think after the merge we have a good shot of prioritizing that and sharding. But sharding happens much more on the consensus layer side.
01:22:37.886 - 01:23:22.614, Speaker B: So like the beacon chain, teams will probably handle sharding for 90 plus percent, whereas stateless happens mostly on the execution side. So I think that's like another big problem that I've basically been there since we've started talking about this. I have a good feeling for what the different trade offs are, how we can maybe get this done. Yeah, I feel pretty strongly about getting this onto Mainet. I think if we had sharding and proof of stake, and I also felt pretty strongly about EIP 1559. With EIP 1559 proof of stake and stateless, I think Ethereum could probably go along for ten years without any upgrade and still be good. I think there's a bunch more stuff we'll want to do to make it even better.
01:23:22.614 - 01:23:30.880, Speaker B: But yeah, those things just felt to me like the major kind of flaws or issues with the protocol, and I'd really like to help fix them.
01:23:31.410 - 01:23:35.620, Speaker A: Is your entrepreneurial itch sufficiently scratched right now?
01:23:40.310 - 01:24:33.554, Speaker B: I think my work is great in that it is extremely self directed, like an entrepreneur, and I think I do have the ability to shape things. The other big part of stuff I like to work on, which is a bit lower on my priority list, but it's like, how do we formalize the governance processes for Ethereum, right? And one thing, for example, I think is like a flaw in our process. I don't like that we actually rely on these calls every two weeks to make decisions. I think it's not great for different time zones and people who can't make the calls. I think some people also are not most comfortable going on a call and talking about stuff like they're more comfortable writing. So I would love it if we move to a mostly async governance process and we would still have calls. Obviously we're going to always need calls to discuss stuff.
01:24:33.554 - 01:25:41.774, Speaker B: There's things that's just higher bandwidth to discuss on video. But another way to phrase this is I would be really happy if the way that I end this goal, this work, is by putting myself out of a job that you don't need somebody to run those calls every two weeks and you're still going to need people to facilitate. But it does feel like the amount of context that myself or Danny needs to have to do this is extremely high, and I would love it if you were able to have a much simpler process where basically anybody, say, with a project management background would be able to take in if for whatever reason I stopped doing it. So I think that's from a process perspective, that's something that bugs me. And Rick Dudley had a tweet about that, I think, a few years ago that stayed with me. He said, if your engineering process requires genius to work, every time you don't have an engineering process, you have an artistic performance. And I'm like, I feel like we're not quite an artistic performance on all core devs, but we are a bit too close to that side for me to be comfortable.
01:25:41.774 - 01:25:50.330, Speaker B: And I really like it. If we had something that's a bit more formalized and less dependent on live calls that are run with people with a ton of context.
01:25:52.030 - 01:25:53.980, Speaker A: If somebody had to, yeah, we'll see.
01:25:54.830 - 01:25:59.760, Speaker B: Once all that stuff is done, we'll see what I do next. But I feel like I've got it on my plate for the next couple of years.
01:26:00.290 - 01:26:05.570, Speaker A: So if somebody pinned you down and forced you to answer, what would your answer be for a wind merge?
01:26:07.750 - 01:26:14.180, Speaker B: I'd say 2022. That's a good hedge the whole year.
01:26:15.910 - 01:26:17.620, Speaker A: If you had to pick a month.
01:26:19.350 - 01:27:10.770, Speaker B: Month is hard, right? So the reason picking a month is hard is because what I can control is like how much focus we have on the merge. And that's like my main thing, like making sure we keep the vast majority of our focus on that. And then the other thing that's hard is we might find like a massive bug at some point. If we find that, it delays things and it's hard to know by how much. But assuming we didn't find that, I think early next year, sometime in February, we can probably have the code done right again. That might not happen if there's like a major issue. But assuming we got that, the question is then how quickly can the community upgrade for the merge? And this is a bit hard because the merge is like a really different upgrade.
01:27:10.770 - 01:28:01.698, Speaker B: It's not just you update your node and that's it, right? If you're a validator, you're going to need to run an execution client as well. If you're like Coinbase or binance, whatever running nodes, you're going to need to kind of change your setup. And we want to make sure that the community has time for that. We don't want the merge to work at the consensus level, but then everything breaks, right? Like all the staking pools break, for example. That'd be terrible. And so it's hard for me to gauge exactly how much time the community needs. What we've been doing, Trent has been taking the lead on this, is having these merge community calls, and literally we'll share some updates, but most of the call is just like answering people like wallet developers, infrastructures questions and also figuring out what do we need to do to get this in a good form for you to upgrade.
01:28:01.698 - 01:28:39.246, Speaker B: So we've had one a month or so ago, we have the next one this Friday. I think that's a way we can kind of speed run the process where we don't want to wait till the code is completely finished to start reaching out to infrastructure providers. We want to solve as many of their issues proactively as we can. And then it's like, yeah, if the code is done in February and we need two months, we usually take about two months to deploy an upgrade that's like April. But if, for whatever reason, if ether scan was like, well, this is completely going to break things, and we just learned about it the last second, we'd have to make a call. Do we make it three months or do we go with a broken. And I say ether scan? But I suspect it would be like all block explorers.
01:28:39.246 - 01:29:22.880, Speaker B: Right? So that's why it's hard. I would be disappointed if we don't get it in the first half of next year. And I'm doing everything I can to get it within as close as possible to the start of that first half. I think the code is not going to be done until January or February. So I think it's unrealistic to expect things before April ish or late March or something like that, if everything went absolutely perfectly. But yeah, then there's like a couple of months that it's just unclear how quickly we can get this out. And I think everybody involved in this kind of prefers safety over shipping it like two weeks.
01:29:23.570 - 01:29:40.838, Speaker A: Yeah. So it's a matter of just not only having the code and having that just vetted and tested, but also watching Coinbase raise their hand and Coinbase says, hey, we're ready to go. Etherscan says, hey, we're ready to go. And just like, oh, we get a gist of everyone kind of says they're ready to go, let's go ahead and do this, I guess.
01:29:40.924 - 01:29:58.602, Speaker B: Yeah, basically. And also we need to make sure things mostly don't break. So it's fine if they don't have perfect support. Like we saw this with 1559. Right. Metamask didn't support it right out of the gate. It took them a couple of weeks after, and I don't know, I'm fine with that.
01:29:58.602 - 01:30:37.480, Speaker B: Assuming it doesn't lock out users in any way, I'm fine if the protocol upgrades and then things are maybe a bit sketchy for a week or two just as infrastructure sets up. But you just don't want to fundamentally break anything, right? You want people to be able to use the old version and have that. So I'm not saying we need to wait for every single infrastructure provider to be ready and there's good competitive pressures amongst them. Like, for example, if binance supports it but not Coinbase. Like Coinbase obviously wants to do it. If Inferra supports it but not alchemy. Alchemy wants to do it.
01:30:37.480 - 01:30:46.570, Speaker B: I don't want us to do kind of central planning here, but I do want to make sure we're not completely breaking some major parts of infrastructure.
01:30:47.710 - 01:31:03.280, Speaker A: Well, Tim, this has been a fantastic lesson as to what it's like to be working on a client team and also just working very close to the heart of Ethereum. If there's one thing that you wish was more common knowledge throughout the broader Ethereum ecosystem, what would that be?
01:31:07.670 - 01:31:32.198, Speaker B: Yeah, I think that bits I mentioned earlier about the process actually being quite decentralized now at the governance level. I think even within the Ethereum system, some people might have a picture that certain folks are able to push stuff or to single handedly veto stuff. And I think, yeah, that's gone less and less true, and that's really healthy. Yeah. So that's probably the one thing.
01:31:32.364 - 01:31:48.560, Speaker A: Well, Tim, I hear those criticisms and critiques all the time, and so thank you for coming on and producing a show with me where I can actually point people to actually direct them here. So this will be a new resource for. Awesome, awesome, Tim, thanks for coming on.
01:31:49.410 - 01:31:50.494, Speaker B: Thank you for having me.
01:31:50.532 - 01:31:51.178, Speaker A: Cheers.
01:31:51.354 - 01:31:54.542, Speaker B: We need a consensus of the core devs to do that.
01:31:54.596 - 01:31:55.600, Speaker A: I'll do it.
01:31:55.970 - 01:32:03.310, Speaker B: I mean, you're not a core dev. I'd be a core dev. No, you're not a core dev. How do I become a core dev? We'll talk about that offline.
01:32:03.390 - 01:32:49.710, Speaker A: Hey, we hope you enjoyed the video. If you did, head over to bankless hq right now to develop your crypto investing skills and learn how to free yourself from banks and gain your financial independence. We recommend joining our daily newsletter, podcast and community as a bankless premium subscriber to get the most out of your bankless experience. You'll get access to our market analysis, our alpha leaks and exclusive content, and even the bankless token for drops, raffles and unlocks. If you're interested in crypto, the bankless community is where you want to be. Click the link in the description to become a bankless premium subscriber today. Also, don't forget to subscribe to the channel for in depth interviews with industry leaders, ask me anythings, and weekly roll ups where we summarize the week in crypto and other fantastic content.
01:32:49.710 - 01:32:54.010, Speaker A: Thanks everyone for watching and being on the journey as we build out the bankless nation.
