00:00:00.970 - 00:00:19.646, Speaker A: Welcome, Bankless Nation, to a very, very once in a lifetime opportunity to do something really, really cool on Ethereum. And to help me explain exactly what's going on in this world of KZG ceremonies, I've got two people from the EF, carl Bazikin, who is a researcher at the Ethereum Foundation. Carl, welcome.
00:00:19.828 - 00:00:21.422, Speaker B: Hey, thanks for having me on.
00:00:21.476 - 00:00:41.500, Speaker A: And then on the right, I got Trent Van Epps, who is an Ethereum steward and also the lead behind the Protocol Guild and overall Ethereum enthusiast. Trent, I think, shares in mine and Ryan's branding of we like to work for protocols, and we consider ourselves employees stewards of this crypto revolution, specifically Ethereum. Trent, welcome to the show.
00:00:42.190 - 00:00:44.934, Speaker C: Thank you for having me. Cheers. Cheers.
00:00:45.062 - 00:00:56.240, Speaker A: Okay, guys, what the hell's going on? What is a KZG ceremony? Why do we need to do this, and what does it mean for Ethereum? Carl, you want to start?
00:00:57.010 - 00:01:31.530, Speaker B: Yeah, sure. So the ceremony is much like we've heard similar things happen in the past for other protocols, but the idea is to get a bunch of people to come together and generate a secret such that everyone who participated, like, no one individually knows the secret. It's, like, shared in the collective memory of everyone. But there's no way to reveal this. And then we can perform some math and cryptography on top of the secret to leverage it for all sorts of fun and useful protocol things, which is why we need it here.
00:01:31.680 - 00:01:45.070, Speaker A: Okay. Everyone's coming together to create a secret, but no one individual knows a secret. I think we're talking about cryptography level stuff here, but can we unpack that what that means? What does it mean to create a secret?
00:01:45.570 - 00:02:42.510, Speaker B: So, sure, a lot of these cryptographic protocols start with just assuming that there's something that no one really knows, and it's like it's a key which unlocks the entire system. And the commitment scheme that we're wanting to use for EIP 4844, which you can touch on in a moment later, requires a secret to be sort of embedded. And in this case, it's a number that we encrypt and we perform some calculations on to make it a bit more useful. But it's a number that no one can know. So you contribute like someone. Everyone has a turn to add a little bit more to this number and to make it a little bit more random and a little bit more secure. But in essence, no single person or even collective of people can know the ultimate secret unless everyone gets together to reconstruct where the secret and number comes from.
00:02:42.660 - 00:03:11.642, Speaker A: So EIP 4844, that's something that we've talked about on bank list pretty frequently. Proto Dank Sharding is what this is called. And this is something to unlock a new property of Ethereum called Blob space. So in addition to block space, which everyone transacts on, we get Blob space. And Blob space is like this data space for specifically layer twos. It's what takes the brakes off of layer twos. It's probably, perhaps one of the last major upgrades to Ethereum before it really becomes the full vision of itself.
00:03:11.642 - 00:03:40.420, Speaker A: There's, of course, some other things to do. But Carl, what you're saying is in order to get 4844, we need this number thing and we need this number thing to be a secret. This is like, I think, one of these properties of this universe that is very specific to this crypto industry. Why does everyone need to not know what this secret is? Why does this number need to be secret? What happens if we were to know what this number was?
00:03:41.350 - 00:04:46.134, Speaker B: So this number is basically used for these commitment devices. So the way that L2 S reference the data that we have in these Blobs, the way that they reference us on chain is via these commitments we call KZG commitments, which you could see is very similar to hashes like we have right now. Unfortunately, hashes are very complicated or very expensive to calculate in SNOX. So that wouldn't work for ZK based L2 S as well as for full dank Sharding requires some extension polynomials which are basically similar, even more fancy cryptography, but using similar cryptography to what we're using here. So if this were to break, if someone were to know the secret, it's basically the private key to these KCG commitments that allow us to make these commitments. So breaking the private key means that anyone could commit to anything. So that means we no longer have any of the sensible guarantees of like this is a Blob and the Blob is really what we say the Blob is.
00:04:46.134 - 00:04:51.930, Speaker B: It means that sort of all bets are off in terms of what a data Blob would be or would be committing to.
00:04:52.080 - 00:05:14.510, Speaker A: Okay, so basically, if this number, if this secret were to be known, all the data that layer two is put on the Ethereum layer one wouldn't be secure. As in anyone could have those private keys. Metaphorically speaking, anyone has the private keys to any layer two that's putting data on the layer one. So basically it breaks every single layer two if somebody does know this secret?
00:05:15.090 - 00:05:30.966, Speaker B: Yes. And you can do all depending on how these layer twos are constructed, you could do all sorts of fun things like proving false things in ZK or inventing transactions that didn't really exist for the optimistic style. It's really not something we can afford to have happen for these L2 S. Right?
00:05:30.988 - 00:05:52.838, Speaker A: So if somebody knows this secret that we are all collectively producing in this moment because this ceremony is ongoing, we'll talk about some of the details. This ceremony is ongoing. But if somebody was to know the secret somehow we'll talk about how feasible or unfeasible that knowing that secret is. But it's like God mode for layer two. If you have the secret, you are God of all layer two transactions. Is that a fair description?
00:05:52.934 - 00:05:53.194, Speaker B: Yeah.
00:05:53.232 - 00:05:56.238, Speaker C: You have the if they're using the.
00:05:56.244 - 00:05:58.078, Speaker A: Blob space, they're using the Blob space.
00:05:58.164 - 00:06:04.626, Speaker C: We're assuming that they will be using four four. Four. But yeah, they would have to be using it in order to get compromised in this way.
00:06:04.728 - 00:06:05.186, Speaker B: Yeah.
00:06:05.288 - 00:06:05.746, Speaker C: Cool.
00:06:05.848 - 00:06:06.210, Speaker A: Okay.
00:06:06.280 - 00:06:06.546, Speaker B: All right.
00:06:06.568 - 00:06:27.880, Speaker A: So that's something very important. We don't like gods in this world. We like everyone to have equal access, no one to be superior over others. Why do we know that what we are doing here with this KZG ceremony is secure? What are the assurances that we have on this?
00:06:29.630 - 00:07:10.434, Speaker C: So, for one, it's being operated as a public ceremony, so anybody can contribute. And this is important because the ceremony has a one of N trust assumption. That means only a single person has to destroy the entropy or the randomness that they're putting into the ceremony or calculating over. Only a single person has to be destroying their randomness or behaving honestly, if you think of it in the general sense for this to be secure. So right now we just broke 9000 contributions. Literally 8009. Nine of them could be behaving malicious.
00:07:10.434 - 00:07:40.266, Speaker C: They could all be the same individual. They could all be David in different hats, and he could have retained all of his secrets or his entropies. And if I was the only single honest contributor who did some keyboard mashing and added some random text, this would be secure. Layer twos could be confident that this couldn't break. Obviously, that's far from the truth. There are many thousands of unique individuals that are contributing to this. And that's part of the assurances.
00:07:40.266 - 00:08:26.506, Speaker C: So one is like, we want this to be run in a publicly accessible process. And so, yes, you can check that box. The other thing is once the ceremony itself is complete, so in a couple of months when the output is actually put out, there will be a verification process. So the community and Carl and I will be part of coordinating some of this. We will encourage people to run a script to verify that, yes, this is the actual output of the ceremony that took place. So if you participated, you'll have a verifiable proof that your Ethereum address was included as part of this, or it's linked in some way. You'll have a signed message from the sequencer.
00:08:26.506 - 00:09:23.650, Speaker C: So there'll be again, this verification dance, sort of like social signaling of like you can think of it sort of like not an exact analogy, but when bitcoiners do soft work upgrades where you signal something in your node, this is similar in that everybody's like, okay, I'm signaling that, yes, I accept this. There's nothing that actually happens on chain. It's more of a social process. But this verification is super important to actually make sure that the output that we're putting into clients and will provide the foundation for four eight four is actually what was produced. And then I jumped ahead a little bit. Another bit that sort of ensures that the ceremony is run properly or reduces the likelihood of failure is that we have multiple implementations. So you can use the hosted interface, but you can also use a couple different CLI implementations which are like code that you would run locally and then it contributes.
00:09:23.650 - 00:10:07.790, Speaker C: So this is a bit unique to other ceremonies that there are multiple implementations that you can contribute through. And this helps make the entire event more secure because you have differentiated paths that people can contribute through. Kind of like the multi client ethos of the ethereum execution layer or the consensus layer, where you're much less likely to have a consensus failure if you have multiple clients. Same idea applies here. If you have a couple of different ways of contributing to the ceremony, you're less likely to have a bug in all of them. Those are the three main ways that we can make sure that a good outcome. Right.
00:10:07.860 - 00:10:40.694, Speaker A: Let me reiterate those three things just to make sure I totally understand it. The first reason why we know that this works is that it's a one of N trust assumption, as in only one person has to behave honestly for this whole entire thing to work. And so if somebody has already done this signing and part of the ceremony and then they forgot their key that they put into, we're already good. And as somebody who I can't remember if I typed capital letters or not capital letters into my key, we might be good here. This might be a solved problem. We can just shut it down. We're done here.
00:10:40.694 - 00:11:02.654, Speaker A: But that's the idea. It's like the reason why having a God mode over all ethereum layer twos that use Blobspace is a terrible outcome. But why we're okay with this is that how easy it is to have completely the strongest assurances that this works is so easy to achieve just by having one person forget their key. How many people did you say have signed so far?
00:11:02.692 - 00:11:08.606, Speaker C: Trent well, I don't know if it's well, we have over 9000 contributions.
00:11:08.638 - 00:11:09.346, Speaker A: Over 9000 what?
00:11:09.368 - 00:11:12.222, Speaker C: The breakdown is between GitHub or Ethereum.
00:11:12.286 - 00:11:12.706, Speaker B: Sure. Okay.
00:11:12.728 - 00:11:56.734, Speaker A: So that's one reason why we know this is going to work. The other thing that you talked about is that there's an additional step where we're going to produce this secret that we're all contributing to. But then before that secret actually gets implemented into Ethereum, into the clients, there's going to be a process where everyone can check that their Ethereum address actually did contribute into that number. Right. And so it's a way so if we produce this number, somebody's going to have to take that number and put it into the clients to actually update the clients. And we need to make sure that the number that we produce is the actual number that goes into the software. And so there's going to be a moment where everyone can verify that this is the correct number.
00:11:56.734 - 00:12:29.910, Speaker A: And there is a mechanism to say if you your Ethereum address signed a message to go into this KZG ceremony, that it is actually the number going into the client. So we have assurances that way. And then the third thing you mentioned is that there's multiple ways to access this ceremony. And so maybe there's the front end website that probably most people will use, but maybe for some reason that is logging everyone's secrets. Maybe that thing's corrupted. And so we have another way to add randomness into this thing that is, like you said, a multi client way to do this. So you could go through IPFS or some other route.
00:12:29.910 - 00:12:38.938, Speaker A: And again, only one person needs to forget their secret. And this is how we have these assurances that we feel good about that this whole thing is going to work. Is that a fair description?
00:12:39.114 - 00:12:41.520, Speaker C: Yes. Good summary. Cool.
00:12:42.050 - 00:13:08.150, Speaker A: Trent, I want to ask you a little bit about zoom out and take this from a little sociocultural philosophical standpoint. The way that I've been describing this to people is like, you actually get to write your initials in the base of this pyramid, this metaphorical pyramid that's going to be around forever. Can you talk about getting away from the actual details of the cryptography and kind of what this means from like a sociocultural moment in Ethereum?
00:13:08.990 - 00:13:51.654, Speaker C: Yeah. One of the really cool things about Ethereum is that it's developed in the open. So before I started working in the core protocol space, I was just like an enthusiast following stuff on Twitter. Didn't really know a ton of what was going on. I knew it was exciting, but I wasn't entirely aware of all the things that are going on. Obviously, still today I'm learning, but it's hard to imagine back then and still today how I can contribute technically to Ethereum. I found other ways to contribute, helping to coordinate network upgrades, coordinating between client teams, engaging the community in core protocol upgrades, things like that.
00:13:51.654 - 00:14:38.280, Speaker C: But before this, if you're maybe not as technically knowledgeable, there's not really a way for you to contribute technically. It's a really deep domain in those terms. However, this is a really unique opportunity for people who anybody really in the Ethereum community to contribute directly to a technical part of the Ethereum protocol. And in fact, it requires these contributions. It's not like, oh, it would be nice. This is literally made possible by having the broadest cut of the Ethereum community come in, contribute to it. And to date, there hasn't really been anything like it.
00:14:38.280 - 00:16:11.694, Speaker C: Like I said before, you can follow stuff on Twitter, you can listen to the core dev calls, you can be part of the community at a certain level, but you can actually contribute to the protocol. So this is I really like what you said about adding your name to the base of a pyramid or I think I've also compared it to writing your name in fresh concrete, assuming that this concrete isn't replaced in a couple of years. But yeah, it's this way of somebody who is really excited about what Ethereum is and what it's doing to have a really deep impact. And I think that's a really important opportunity to take hold of for people who are part of the community because it has a significant impact for many years to come. Like you said, it's interesting from a social perspective that the community itself can literally provide input to the social or sorry, the the technical protocol in this way, through social signaling, through sharing this around, through contributing, and I don't know if there will be many opportunities like this in the future. It's a very rare bit to have this window into the protocol like this. Maybe we'll do an update to the setup in a couple of years if something needs to change or we need to create a deeper or if we need to do something beyond this for Dank Sharding itself, possibly we'll have to update the ceremony.
00:16:11.694 - 00:16:20.534, Speaker C: But treat this as your one opportunity to contribute directly to the Ethereum protocol and it's definitely something very special. Yeah.
00:16:20.572 - 00:17:04.174, Speaker A: And the Ethereum developers are a very talented, technical competent bunch of people. And I totally think that they could have just gone into a room, done some ceremony themselves and be like, okay, we did it. We don't really need to have this public ceremony. But that's not really in the Ethereum Ethos. And especially when there's an opportunity like this to get so many more people involved, to put a visualization in people's heads. Imagine like a floating ETH logo. There's a massive line of people and each one of them is coming and putting their very unique handprint with all their unique fingerprints and they're touching the ETH logo and they're leaving that print there and then everyone is adding their own little handprint to Ethereum.
00:17:04.174 - 00:17:55.650, Speaker A: And while we could have had the other event where just the Ethereum devs just did it and it probably would be just totally fine, we would be robbing the whole world of this opportunity to be a part of this fun ceremony and it really adds social legitimacy to Ethereum. We can get. Like, I'm going to go after recording this video, I'm going to go send this video out to Kathy Wood and hester purse and Andrew Yang and try and get all of these other people just to hey, don't miss this opportunity to leave your handprint at the core of this structure because it's like a socially legitimizing mechanism. Right. Even though it's going to totally work either way. It's like a nice way to just put a little bit of yourself into this core protocol.
00:17:56.070 - 00:18:58.486, Speaker C: Yeah. The other thing I'll add to that and something we touched on earlier about the one of N trust assumption is that, yes, obviously a single core dev could do the ceremony themselves, or like 20 people could do it themselves, but that's not credible. We talk a lot about credible neutrality or credibility in ethereum or legitimacy, like you just mentioned. And this is very much an effort in building credibility, not just for the people who are around now, but the people who will be around using ethereum in ten years, in 20 years and 100 years, assuming there's no setups in between there. But we need this to be as credible as we can make it now for the long term, because if we don't make it broadly accessible, if we don't have these multiple ways to contribute, if we don't try to do all of these things, then the output of the ceremony loses a bit of credibility over time. So, yeah, definitely very much about building consensus around was the community able to participate, is it a legitimate output? Things like that.
00:18:58.668 - 00:19:09.820, Speaker A: So let's go a little bit into the details of the timeline of this whole ceremony. Carl, I'll throw this one back to you. What's the timeline of this whole thing? What are the dates that people should know about and pay attention to?
00:19:10.370 - 00:19:56.010, Speaker B: Yeah, so we launched this thing on Friday the 13th of Jan for meme reasons, it was just too tempting. So, yeah, that was a bit of fun. And the idea is to run the primary ceremony for at least two months. And what we want to do is give everyone a fair opportunity to make sure they feel like everyone had a turn to contribute, that there was some point it wasn't like, oh, you have a week, quickly rush over to do something. Maybe you're away, you weren't paying attention, it didn't work out for you. We want to give it like an extended period of time for everyone to participate. So our current planning now is to have that run for about two months till the 13 March.
00:19:56.010 - 00:20:39.698, Speaker B: Then we're going to switch to what we're calling special contributions. So something we've seen in previous ceremonies in the past is some people have come up with really creative ways of contributing. So doing things like for some of the original Zcash ceremonies, people used some radioactive cloth from Chernobyl and flew up in an aeroplane and pointed a Geiger counter at this cloth to try collect randomness that was hopefully far away from all sorts of noise collection sources, babbing in an airplane, things like this. Just ridiculous ideas that give us extra layers of assuredness.
00:20:39.794 - 00:20:41.898, Speaker A: But it's also art. It sounds like art.
00:20:42.064 - 00:21:14.626, Speaker B: It is. And this is actually a very important component of how this works, is we're having thousands of thousands of people contribute right now, and that provides a lot of security, but at some human level, we relate to these stories. 9000 people is mostly a number, and I can see many of my friends on this list and I've contributed in that list. Sure, that's fine, but seeing these other ridiculous efforts that people make to do this is far more convincing at some kind of weird monkey brain kind of part of the story.
00:21:14.808 - 00:21:16.386, Speaker C: The spectacle of it too.
00:21:16.488 - 00:21:17.140, Speaker A: Yeah.
00:21:18.170 - 00:21:21.800, Speaker B: So that's this period we're going to have after that.
00:21:22.170 - 00:21:27.970, Speaker A: Do you know of any cool experiments that people are thinking about doing in this phase?
00:21:28.130 - 00:21:54.100, Speaker B: So we've had a bunch of things we're actually still opening. We have a grants round open at the moment to the end of this month trying to ask people to come up with cool ideas and we'll throw some money away if you have something that's interesting. We've had some cool examples of destroying the computer afterwards to make sure that there's nothing left. Lots of people asking for crazy amounts of explosives for things.
00:21:56.310 - 00:22:00.100, Speaker C: Please, no more applications for exploding things.
00:22:00.470 - 00:22:01.906, Speaker A: But at least one, right?
00:22:02.008 - 00:22:02.942, Speaker C: We get to explode.
00:22:03.006 - 00:22:04.786, Speaker A: Somebody gets to explode something.
00:22:04.968 - 00:22:47.106, Speaker B: Yeah. So like these kinds of things so like either weird ways of creating the entropy or convincing other people it's destroyed afterwards. People are trying to use cat toys to sample some entropy, building weird hardware around that these kinds of things. And then the other thing we're encouraging people to do is to write their own implementations of the software. So something we've taken as a very unique approach, a very ethereum approach, is that this whole idea started as a specification. So much like the consensus layer, clients are all like there's consensus specs and if you can implement those then you have a client. We've done the same thing for the ceremony where it's like here's just a minimal and it's designed to be as simple as possible.
00:22:47.106 - 00:23:55.430, Speaker B: Here's the thing. You can write, implement yourself and then have work. And so we're encouraging people to try write their own implementations, even roll their own cryptography here and maybe your cryptography is going to take really long or is really slow or does something weird and different. So we're trying to also allow for people to do that then to allow for other just more implementations of the code bases to just further reduce the chance of correlated failure through the system. Because I think we're rapidly approaching the point where with 9000 people there's no realistic way, I mean, already it's 9000 people, there's no realistic way that everyone's going to get together and reconstruct the secret. I think it's always useful to have more people and we want as many as possible but it's rather unrealistic for that to happen. So now I think the more realistic failure cases look like oh, there's a bug in Windows or all Firefox browsers have this weird thing which somehow leaked a secret or something like that, right? So there's some weird correlated failure which starts attacking many of these contributions.
00:23:55.430 - 00:24:10.838, Speaker B: So trying to encourage people to write other implementations allows us to transition over to reducing those other risks that we have. The sort of more Black Swan style risks that are potentially posed to the ceremony.
00:24:11.014 - 00:24:32.894, Speaker A: And perhaps also one of the reasons why this open period of contributing randomness is so long is that there's no real reason for it to need to be short. I think we have what's the next upgrade? Shanghai upgrade for 4844 is speculated to be end of March, early April. No one really knows, but that's kind of the vibe. And so why not just open up this window?
00:24:32.942 - 00:24:37.410, Speaker C: And for the majority of that time, Shanghai is withdrawals.
00:24:37.750 - 00:24:40.190, Speaker A: Excuse me? Right. Cancun.
00:24:40.270 - 00:24:40.862, Speaker C: Cancun.
00:24:40.926 - 00:24:41.540, Speaker A: Right.
00:24:42.950 - 00:24:48.970, Speaker C: Yeah. It's expected to have 4844. Obviously, nothing is guaranteed, but yeah, that would be a little bit later in the year.
00:24:49.040 - 00:24:49.660, Speaker A: Sure.
00:24:50.910 - 00:25:02.494, Speaker C: That period would be we're basically going to try to fill that entire period until I don't know exactly the timeline, but we'll try to fill the entire period with contributions as much as we can.
00:25:02.692 - 00:25:22.978, Speaker B: Yeah. So we'll open up again to general contributions after you've done these weird and wacky special contributions right up until the last moment when client devs need to take all of this, shove it in the clients, have everyone verify that their contribution was included in this, and then we can ship 4844.
00:25:23.064 - 00:25:37.926, Speaker C: Yeah. And right there would be the verification period where everybody performs this. It doesn't have to be very long, as long as it exists of just, like, the social signaling of here's the output. Are you good? Does this work for you? It works for me. I see my name in there and.
00:25:37.948 - 00:25:44.842, Speaker A: No one raises a flag saying, hey, mine's not here. If no one's raising a flag saying, Mine's not here, like, we're good, right?
00:25:44.896 - 00:25:46.460, Speaker C: Yeah, exactly.
00:25:47.150 - 00:25:53.280, Speaker A: All right, guys, this is really cool. Are there any angles of this whole entire ceremony that we haven't talked about yet that we need to touch on?
00:25:54.770 - 00:26:06.834, Speaker C: I mean, this is maybe more a little basic. The lobby is pretty large. I'm looking at it now. It's 2800 people.
00:26:06.952 - 00:26:09.314, Speaker A: Trent, what's the website that people can go to?
00:26:09.512 - 00:26:51.806, Speaker C: You can go to ceremony ethereum.org that'll have the summoning guides, the hosted interface, a couple of different ways that you can contribute, and also, like, a bunch of FAQs and information. If our higher level answers didn't if they weren't enough here, go there. We should have most answers for any question you might have, as well as the transcript is hosted there as well. So ceremony ethereum.org. Yeah. Just on, like, a procedural note, the lobby is pretty saturated right now, so if you're trying to contribute or you're really excited about being part of this, as you should maybe come back next week and the lobby will be a little bit less.
00:26:51.806 - 00:26:57.490, Speaker C: No guarantees. We're hoping that the wait won't be so long.
00:26:57.640 - 00:27:00.660, Speaker A: Why is there a wait at all? Why is there a.
00:27:02.790 - 00:27:41.422, Speaker C: I mean, the simple answer is just a lot of people want to contribute at the same time. And one of the misconceptions which we're trying to improve some of the copy around is there's not actually a queue. So once you get to this lobby, I know you've contributed, David, but there's like this intermediate stage where you've created your entropy and submitted it to the sequencer. And then you're sort of in this intermittent, literally a lobby, that's what we're calling it. And the sequencer picks randomly from this space. So it doesn't matter if you contributed ten days ago and you've been sitting in there for ten days. I don't think anybody's actually waited that long.
00:27:41.422 - 00:28:13.930, Speaker C: But it doesn't care how long or how early you contributed. It'll just pick randomly from here. So there's no queue. And this is something that was very common with other ceremonies that had to do when they were passing around larger amounts of data. You had to strictly schedule when somebody is contributing. So I would do my calculation, do my contribution, pass it back to a sequencer, and then there would be an explicit next person that was scheduled in advance. Very common for other ceremonies that had other requirements.
00:28:13.930 - 00:28:19.900, Speaker C: Usually it comes down to the size of data that they're passing around.
00:28:20.910 - 00:28:25.200, Speaker A: Why can't we just all add it all at once? Why is there like a bottleneck? What's the constraint there?
00:28:25.650 - 00:28:28.590, Speaker C: Sure. So it has to be sequential.
00:28:29.250 - 00:28:31.630, Speaker A: And is this with ethereum blocks?
00:28:32.450 - 00:29:00.460, Speaker C: No, this is related to powers of tau, which is like the construction that we're using to actually this is what trusted setups are, at least the first phase, what they're typically called is powers of tau. And it's a sequential multiparty computation. So while I'm doing my calculation over my entropy, you can't start until you actually have so it's strictly step by step. Right.
00:29:01.390 - 00:29:06.170, Speaker A: Randomness gets added one at a time, not in parallel. Okay.
00:29:06.240 - 00:29:06.860, Speaker C: Right.
00:29:08.590 - 00:29:15.422, Speaker A: You have to build upon the previous person's randomness. You can't both build off of the same randomness. Okay, I see.
00:29:15.476 - 00:29:32.610, Speaker C: Right. I don't want to lean too heavy on analogies here, but it's like coming to consensus on the head of a blockchain. There can only be one and it has to be sequential, like block after block.
00:29:33.030 - 00:29:38.494, Speaker A: Otherwise we wouldn't be adding randomness together, we would be making many different randomnesses.
00:29:38.542 - 00:30:02.378, Speaker C: Yes, exactly. So once I'm done calculating on my entropy, I send that to the sequencer, which is just a server doesn't actually make decisions, really. And then it would pass it to the next person in sequence. And that's why the queue is so long. Or I'm not going to say queue. The lobby is so large just because there's so many people and it just takes a little bit of time.
00:30:02.544 - 00:30:06.830, Speaker A: Is the computation done locally or is that done on a server?
00:30:07.410 - 00:30:08.894, Speaker C: Computation is done locally, yeah.
00:30:08.932 - 00:30:17.874, Speaker A: Okay. So your computer is the thing doing the computation to add the randomness to the okay, interesting. Okay, cool.
00:30:18.072 - 00:30:23.906, Speaker B: The sequencer literally, like when it's your turns, like here, david, you are in charge of the current powers of.
00:30:23.928 - 00:30:24.446, Speaker C: Tau.
00:30:24.558 - 00:30:25.074, Speaker B: Right.
00:30:25.192 - 00:30:29.126, Speaker A: And that is you adding your fingerprint to Ethereum. Okay, cool.
00:30:29.148 - 00:30:40.438, Speaker B: And if you watch your CPU usage or something, it will spike and all your cores will suddenly rev up for 30 seconds or so while you do your contribution, and then you send it back and you're done.
00:30:40.524 - 00:30:40.918, Speaker C: Cool.
00:30:41.004 - 00:30:42.474, Speaker B: That's really cool. Yeah.
00:30:42.512 - 00:30:54.540, Speaker A: And in that moment, that is when your computer is generating your fingerprint based off of your inputs to add to Ethereum. So that is the thing that you are adding to Ethereum when the CPU heats up.
00:30:55.230 - 00:31:31.290, Speaker C: Yeah. And I guess one other thing I can add to this. You asked about other things we had missed. So one, the lobby is pretty large, so if you're thinking of contributing, maybe come back in a little bit, a couple of days, a week, there's plenty of time. Don't worry about missing out. The other thing is we're working through some bugs, so if you have already tried to contribute, there's a couple issues with user sign outs where, well, I won't get into them now, but basically we're working on them and we hope to have them live soon. So if you tried in the past few days and were hit with some error that you weren't sure how to resolve, we are actively trying to solve them, and hopefully that'll make the experience a little bit smoother.
00:31:33.230 - 00:32:06.994, Speaker A: Awesome, guys. Carl Trent, thank you so much for walking us through all of this. I hope everyone in the Bankless Nation definitely gets an opportunity to add their little thumbprint, their fingerprint, their handprint, whatever, their DNA, whatever you want to call it, into the soul of Ethereum, because this is a moment. Here's a fun little anecdote. When my nephew was born, about almost two years ago, the text message from my brother in law went out to the family and was, know Lincoln born at this height, this many pounds. And I took that text and I put it into an Ethereum transaction. And in the future, I'm going to give my nephew those private keys just because it'll be kind of cool.
00:32:06.994 - 00:32:36.590, Speaker A: He'll be the only kid in school that has proof of work era private keys. And this is just kind of like one of those things like that where you get to embed something very deeply into the Ethereum protocol, and it's going to be around forever. And that's just a unique property that only crypto systems can really enable. And so I just really want to impress upon people the once in a lifetime moment that this KCG ceremony is really bringing to the table. So, Carl Trent, thank you for helping me communicate that to the Bankless Nation.
00:32:36.930 - 00:32:38.190, Speaker C: Thank you for having us.
00:32:38.260 - 00:32:39.486, Speaker B: Yeah, it's been great. Thanks.
00:32:39.588 - 00:32:40.270, Speaker C: Cheers.
00:32:41.810 - 00:32:51.620, Speaker A: Since you guys are on, uh, there's not too many opportunities for EF people to come and have a podium. Is there anything else that you guys want to talk about before we wrap this thing up?
00:32:52.550 - 00:33:34.666, Speaker C: I'll obviously show protocol. Guild It's a collective of core devs who are trying to improve the incentives around working on core protocol. So the main thing that this organization produces is just a curated list of literally the people who are working on the protocol. It has members from, I think, about 20 different organizations from throughout the space. It's not just the Ethereum Foundation, and today we have about 128 members, and we're hoping to build norms around protocols or applications to contribute back to the core protocol. Previously, there's no single contract or single address that people can send to. There's many Gitcoin grants.
00:33:34.666 - 00:34:08.822, Speaker C: There are many individual ways to contribute. But it's really hard for somebody, even if you're embedded in the space, to find a way to say, I want to fund the protocol. I want to fund the people who are making things like the merge possible, things like 1559. We all love ultrasound money, but who actually made that happen. So this is a way for people to contribute back to the people that made it happen and hopefully boost some of the incentives to work on the core protocol. So I'm a member of that organization, and we're actively building it. And, yeah, I guess that's my one chill spot.
00:34:08.822 - 00:34:11.440, Speaker C: People can check it out or hit me up with any questions.
00:34:11.810 - 00:34:13.950, Speaker A: Carl, you want a soapbox?
00:34:17.250 - 00:34:35.942, Speaker B: I don't actually think so. I don't have any weird or wonderful things to contribute. Just like I always appreciate the coverage you have here of the more researchy topics and allowing everyone to get involved with all those things a little bit more, I think that's an exciting, important thing in the space that we can never have enough of. So, yeah, thanks for that.
00:34:35.996 - 00:34:39.286, Speaker A: Well, thank you, Carl, and thank you, Trent, for joining me. Cheers, guys.
00:34:39.468 - 00:34:40.322, Speaker C: Thanks for hosting.
00:34:40.386 - 00:34:40.722, Speaker B: Cheers.
00:34:40.786 - 00:34:41.330, Speaker C: Cheers. Bye.
