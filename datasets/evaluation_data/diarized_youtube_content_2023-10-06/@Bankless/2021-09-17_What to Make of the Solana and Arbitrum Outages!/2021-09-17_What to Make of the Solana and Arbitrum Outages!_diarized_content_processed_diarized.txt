00:00:00.490 - 00:00:02.510, Speaker A: All right, David, are you ready, man?
00:00:02.580 - 00:00:04.174, Speaker B: Oh, my God. I'm so ready.
00:00:04.292 - 00:00:28.710, Speaker A: I know you're ready for this. Okay, so the headline here is a tale of two outages. There have been two outages this week in crypto chain outages. One, the Solana chain, which we'll talk about, and the second was arbitram, which is a L2 that we'll talk about as well. So why don't you take us through a tale of two outages? Let's talk what happened with Salana this week.
00:00:28.780 - 00:01:17.086, Speaker B: Yeah, so Salana had a peak load of over 400,000 transactions per second, which is a lot. And then the at Salada status Twitter account says Salana Mainnet beta encountered a large increase in transaction load, which peaked at 400,000 transactions. These transactions flooded the transaction processing queue, and the lack of prioritization of network critical messaging caused the network to start forking. This forking led to excessive memory consumption, causing some nodes to go offline. Engineers across the ecosystem attempted to stabilize the network, but were unsuccessful. And so as a result of this, a bunch of validators had to coordinate inside of a discord channel, I believe, to coordinate a restart of the network. And then as a result of that, the salana was down for over 18 hours.
00:01:17.086 - 00:01:38.138, Speaker B: I think it was something like 18 to 20 hours. And then once some sort of coordinated consensus mechanism to restart the network checkpoint and restart the network again. I'm not a distributed systems developer, but they were able to get that salana network started up and running again 20 hours later. So it was down for over 20 hours, which is kind of crazy.
00:01:38.304 - 00:01:45.554, Speaker A: 20 hours down. And when you say down, we're not talking about degraded, we're talking about, like, dead down. There's nothing exist.
00:01:45.622 - 00:01:51.630, Speaker B: Your transactions aren't going anywhere. No one's listening to them. Like, your money's frozen, there's no withdrawals.
00:01:52.690 - 00:01:53.294, Speaker A: Nothing can.
00:01:53.332 - 00:01:55.934, Speaker B: Nothing frozen. The state is frozen.
00:01:56.062 - 00:02:34.646, Speaker A: And what had to happen is they basically had to eventually reboot the thing. And I think it required, like, the support of 80% of all of the validating stake validating nodes. And that was kind of the coordination that you're talking about. We'll get to some takes there, but I will say never in my history in crypto have I seen a chain worth like, 40, $50 billion, tens of billions of dollars be down for 20 hours. That's pretty unprecedented. Has never happened at that level of value. People have tried to compare this to the Ethereum Shanghai tax in 2016.
00:02:34.646 - 00:02:51.006, Speaker A: No, we got to talk about that one. I don't think the comparison is apt. But before we do, let's talk about, we said a tale of two outages. A second outage happened at just about the same time. And I put outage in kind of quotes because it's kind of an outage, but also kind of not. But tell us what happened to arbitrum. David.
00:02:51.038 - 00:03:19.820, Speaker B: Yeah, so arbitrum, the L2 to Ethereum, had their sequencer go down. So another interesting thing, like I said at the beginning, it's interesting that both of these happened really, really closely to each other, I think within the same hour or maybe 2 hours. And it had both had to do with the sequencers for both Arbitrum and Salana. One of Salana's big claims to fames is it has this natural sequencing built into the L1. Ethereum doesn't have that. It sequences things. It allows whoever proposes the block to sequence the transactions as they see fit.
00:03:19.820 - 00:03:50.390, Speaker B: But arbitrum has a centralized sequencer. A centralized sequencer almost kind of is what a roll up is. And that part broke down. And so the report from Arbitrum says all transactions that had been accepted by the sequencer were included and not reordered. Transactions accepted by the sequencer between 1013 and 10:14 a.m. Were reassigned a timestamp when the sequencer returned online at 10:59 a.m. And so Arbitrum was down for about 45 minutes.
00:03:50.390 - 00:04:12.774, Speaker B: And they say that the root cause of the downtime was a bug causing the sequencer to get stuck when it received a very large burst of transactions in a short period of time, almost very similar to what happened with du Salana. And then the issue had been identified with a fix and had been deployed. And so there are some takeaways that we should talk about with the whole arbitrum being glad.
00:04:12.822 - 00:04:15.454, Speaker A: I'm kind of glad, David. This happened at the exact same time.
00:04:15.492 - 00:04:18.000, Speaker B: This is great. This is such a great test.
00:04:18.370 - 00:05:02.570, Speaker A: It's a great learning lesson, I think, for the ecosystem. So we can say exhibit A, what happens when a layer one sort of has a complete outage and requires a restart from a coordinated set of validators? And then exhibit B, what happens when a L2 goes down as well? So maybe let's talk about the contrast here. One interesting contrast is when the arbitrum outage was a little bit different, so sending L2 transactions was not possible. So you couldn't transact on L2. But Ethereum wasn't down, so you could actually still get some transactions through on arbitrum in sort of a roundabout way, as I understand. Why don't you take us through when arbitrum failed, how did it fail?
00:05:02.650 - 00:05:44.934, Speaker B: Right? So when arbitrum failed, the arbitrum sequencer stopped listening to incoming transactions. And so all the benefits of the l two, all the scale, all the throughput, all the low gas fees, we lost that. That's what we lost. The sequencer stopped hearing transactions and stopped writing them to the arbitrum blockchain. The arbitrum L two. But the whole point about roll ups is that there is a natural fallback to a roll up that doesn't require you using the sequencer. And so because of the roll up design, users could just make an L1 transaction and update the state of the arbitrum l two themselves using the main chain.
00:05:44.934 - 00:06:26.882, Speaker B: It's like a user only backdoor to arbitrum. If, for whatever reason, the sequencer is not listening to transactions, maybe they're censoring you specifically, but not no one else. It doesn't matter because you can just go through the door that is on the ethereum l one, so your funds are never at risk. This is why people like l two s. And so the moral of the story is that when the arbitrum L2 breaks, the worst case scenario is that it just returns to being an Ethereum l one smart contract that you engage with on the Ethereum l one. So all you got to do is have some ether on the l one to make a transaction to the arbitrary smart contract to say, hey, your shit's broke. Excuse my language.
00:06:26.882 - 00:06:36.490, Speaker B: Give me my money back. And then because Ethereum operates by that code, because of the nature of rollups, you get your money back. And so your money's never frozen.
00:06:37.230 - 00:07:38.062, Speaker A: I kind of get this visual, David, where thinking in terms of imagine Ethereum is just this bubbled city in the cloud, right? And then Arbitrum is another bubble city in the cloud, right? But it has this bridge, this bridge that just essentially cannot be destroyed unless Ethereum, the city of Ethereum, is totally destroyed, too. So if Arbitrum goes down, if arbitrum's on fire, if there's chaos in the city, then that bridge cannot be destroyed. So you always have the ability to withdraw funds, do some kind of transactions across that bridge as well, and exit in the case of, like, there's no bridges right there that are enforced by. So, like, Salana is down, the entire salana network is down. That's not the case with L2. Layer two just fails gracefully back to Ethereum. So it's kind of a question of like, was arbitram totally down? Right? And I think Daniel from the arbitrum team actually makes that case.
00:07:38.062 - 00:07:51.906, Speaker A: Like, practically speaking, it kind of was for the average user. But he says, if I want to get nitpicky and pedantic, I could also argue that it's not. And he gets very nitpicky and pedantic in the whole thread, and we're not going to go through it. But what's the TLDR here?
00:07:52.008 - 00:08:34.542, Speaker B: Yeah, the TLDR is that there are three ways to get a transaction out of arbitrum. One of them is like the normal case where as a normal operating l two, you send your transaction to the sequencer, and then the sequencer updates the arbitram state and gives you a little receipt, and then yay, we can go beyond our merry way. We are actually going to have to scroll down because I'm going to have to read the second way to get in. But this is going to be just a little learning lesson. And so here he says, meet the sequencer. That's the thing that orders the transactions, accepts the transactions right to the arbitrums chain. But the case number two is that when a message from the ethereum l one can also be included into the sequencer.
00:08:34.542 - 00:09:39.910, Speaker B: And so you can actually write to the arbitrum sequencer, even if the sequencer is still live. By writing a transaction to the Ethereum l one, usually you wouldn't do this. Sometimes there are some specific scenarios, but the transaction gets added to the delayed inbox, and the inbox is like the thing that is where all the transactions go before it gets added to the arbitram chain. And the most common case here is when you just straight up add money to your arbitrum account. That's when you make an Ethereum l one transaction, put it into the arbitrum inbox, within ten minutes, it shows up on the arbitram l two. And that's one of those cases that you would do that. And then the third case is what we were exactly talking about is that if a message has been sitting in a sequencer's inbox longer than what is the code for max delay, which I believe is ten minutes? Any user can call a function called force inclusion, which pops out the message out of the delayed inbox and puts it into the user's account on the Ethereum L1.
00:09:39.910 - 00:09:59.890, Speaker B: And so this is a fantastic thread, if you want to go into the more nitpicky details about how a L2 roll up is constructed but because there's three different ways, and the worst case scenario is always the fallback of like, there is always user sovereignty if the sequencer isn't doing what they say they were. That is why roll ups are so magical.
