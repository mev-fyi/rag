00:00:30.580 - 00:00:58.690, Speaker A: In the night with finality on the Ethereum blockchain last week, and we want to go over that today with some experts who can help us answer the question as to whether Ethereum broke or not. What does it mean to break? What happened? What does non finality mean? I think we'll talk about that. And what are the risk conditions that we are exposed to as result of this? How did Ethereum handle this event? Is really the central question in my mind. David, who do we have on today?
00:00:59.140 - 00:01:40.408, Speaker B: We have Preston van Loon and Terrence Zhao of the co founders of prismatic labs, now in Arbitrum, now part of off chain labs. And we brought Preston and other members of Prismatic on to the show before to understand the world of clients, because it is a complicated world, but not so complicated that we won't be able to understand it here on the show. So some very important questions with some very smart people who have been with the Ethereum proof of stake effort since it was once upon a time called Ethereum Two. But before we get into the show, we got to talk to our friends and sponsors at Consensus, because we got to talk about this thing called Diligence Fuzzing. It's a new fuz auditing tool. Just fuzz it. Yeah, with a sick new name called Diligence Fuzzing.
00:01:40.408 - 00:02:30.316, Speaker B: So what's diligence fuzzing for? Smart Contract solidity devs auditors enterprises engaging with Web three that need to ensure that their smart contract is secure before proceeding to mainnet. Diligence Fuzzing. It's an audit grade security tool that serves as an automated way to find cone code vulnerabilities for people without hosting their own infrastructure or writing complete complex test cases. So there are many ways to do automated testing, but Fuzzing is a brand new way with quite a lot of sophistication, according to Consensus, that you can go and access right now. So this is an extra layer of protection for your smart contracts in addition to and above and beyond typical code audits. Humans are messy and can miss things, but Diligence Fuzzing is diligence by robots. Fuzzy robots, apparently, to get access to this.
00:02:30.418 - 00:02:35.020, Speaker A: David, can you imagine releasing a smart contract and not fuzzing it? I just can't even imagine.
00:02:35.100 - 00:02:37.280, Speaker B: I prefer fuzzy smart contracts.
00:02:37.860 - 00:03:03.320, Speaker A: Fuz it. All right, so there was an event that happened last week, and this was an event that happened after the roll up, and I'm wondering if we could kind of tee this up before we bring Preston and Terrence on. So what happened? I think maybe the first sort of mini event was on Thursday and then again Friday, if I'm recalling correctly. All my weeks are a blurred. David. But give us the recap before we get in here.
00:03:03.470 - 00:03:41.376, Speaker B: Yeah, it happened twice. And so Ethereum failed to finalize, which is an interesting sentence. What does that mean? Blocks were still propagating, transactions were still going through, but finalization was not happening. And just at a high level. Finalization is just something that happens when enough clients, enough validators have given the thumbs up about a certain epoch. Epochs which are, I believe Preston is going to come in here and give me the whip, I believe 64 blocks, but it's a collection of blocks. And then if enough validators give the thumbs up, then that epoch finalizes, and that is permanently embedded into the blockchain.
00:03:41.376 - 00:04:14.396, Speaker B: When an epoch is finalized, it requires slashing conditions to go back and unwind those blocks. And so if a block isn't finalized, it's not as permanently embedded into the blockchain as it otherwise could be. Except with this event, which happened twice, ethereum failed to finalize because blocks were being missed, validators were not doing their jobs. I am only able to explain it to some degree at a high level. And so we're going to go talk to Preston and Terrence to get a deeper dive into what this world of finalization means.
00:04:14.498 - 00:04:54.232, Speaker A: Should do a disclosure before we get in, of course. Now, Prismatic is owned by Offchain Labs, which is a sponsor of the Bankless podcast, very supportive of what they're doing in layer two and client development work. Also, David and I are notorious holders of the asset called ETH, so you should know that also podcast, that we are bullish on Ethereum generally and are interested in finding out what happened today. So guys, we're going to get right to the episode with Preston and Terrence to talk about whether Ethereum broke or not. But before we do, we want to thank the sponsors that made this episode possible, including our number one recommended exchange, Kraken. Go check it out.
00:04:54.366 - 00:05:27.780, Speaker B: Kraken Pro has easily become the best crypto trading platform in the industry. The place I use to check the charts and the crypto prices even when I'm not looking to place a trade. On Kraken Pro, you'll have access to advanced charting tools, real time market data, and lightning fast trade execution, all inside their spiffy new modular interface. Kraken's new customizable modular layout lets you tailor your trading experience to suit your needs. Pick and choose your favorite modules and place them anywhere you want in your screen. With Kraken Pro, you have that power whether you are a seasoned pro or just starting out. Join thousands of traders who trust Kraken Pro for their crypto trading needs.
00:05:27.780 - 00:06:01.644, Speaker B: Visit pro kraken.com to get started. Today, mantle is a brand new high performance ethereum layer two network built differently from the other layer two s you may be familiar with. Mantle is a modular layer two built on the Op stack, but uses Eigen layer's data availability solution instead of the expensive ethereum layer one. Not only does this reduce Mantle's gas fees by 80% compared to other layer two s, but it also reduces gas fee volatility. Mantle has a decentralized sequencer set, eliminating the risk of downtime and censorship on the network. And because Mantle implements multiparty computation nodes.
00:06:01.644 - 00:06:48.256, Speaker B: Layer one settlement execution is shortened from seven days to as low as just one or two. Mantle is the first layer two built by a dow and is backed by one of the biggest dow treasuries in the world, bitdao. Mantle already has subcommunities from around web3 onboarded to help the growth of Mantle like game seven for web3 gaming, or Dao for the world of DSI and Bybit for TVL Liquidity and Onramps. Check out Mantle at Mantle XYZ and follow them on Twitter at zero xmantle. Immutable is at the forefront of web3 gaming on a mission to bring digital ownership to every player. Offering the world's best games and game development platform, immutable lets game builders and players focus on great gaming experiences. So build your next web3 game on easy mode with Immutable's leading full stack web3 gaming platform.
00:06:48.256 - 00:07:28.472, Speaker B: Its built in UX features like the Immutable Passport are designed for games to scale to the next billion players coming to web3. With Immutable, players can sign up with an email, pay with a credit card and experience a frictionless purchase flow inside of games. So discover your next favorite game and explore a network of 150 games building on Immutable, including such titles as Gotham Chain, Guilds of Guardians, Alluvium Embersord, and Metal Core. So join web3's largest ecosystem of games and players build, play, and connect@immutable.com. Bankless Nation. Preston Van Loon and Terrence Tau are the co founders of Prismatic Labs, one of the organizations that maintains the Prism Ethereum consensus. Client.
00:07:28.472 - 00:07:40.960, Speaker B: Prismatic Labs was one of the earliest client teams that was formed to start building what was then called Ethereum Two, which we now just call Ethereum. And they've been very key to Ethereum development every step of the way. Preston Terrence. Welcome to bankless.
00:07:41.700 - 00:07:43.248, Speaker C: Hey, happy to be back.
00:07:43.414 - 00:07:44.908, Speaker D: Thanks for having me.
00:07:45.094 - 00:07:54.180, Speaker B: Yeah. Okay. I'm going to look forward to being educated about some of the nuances of finality and security. But first, did Ethereum break?
00:07:54.250 - 00:08:14.876, Speaker C: Preston no, it did not break. Right, okay. We did see Ethereum actually work. We have a time where Ethereum has difficulty finalizing and we got to see it actually work in action. Right. So this is not a problem with Ethereum. The specification did not break.
00:08:14.876 - 00:08:22.190, Speaker C: It actually worked. And it worked in an unfavorable condition and we got to see that happen in mainnet for the first time.
00:08:23.200 - 00:08:34.176, Speaker B: So how would you summarize what actually happened? And so I did my best to explain it in the intro. How would you describe to the layman? Explain it like I'm five. What actually happened here.
00:08:34.278 - 00:08:34.544, Speaker D: Sure.
00:08:34.582 - 00:08:39.968, Speaker A: And how many blocks are there in an epoch? Preston most importantly, there are 32 blocks.
00:08:39.984 - 00:09:31.876, Speaker C: In an epoch, not 64. At least you got a power of two. So that's nice. What happened was multiple clients, Prism specifically Anteku, had this problem where if it received these sort of old attestations attestations being what the validators are, producing to say, this is what I think the head of the chain is. They received these old attestations which caused Prism in particular to replay a bunch of states, right? It had us go back in time to evaluate whether or not this attestation was valid or how to count. This vote ended up being a pretty expensive operation that somehow bypassed or filled the caches that we had. So we weren't able to keep that work in.
00:09:31.876 - 00:10:05.840, Speaker C: The client had to recompute it every time. So essentially it was an accidental, I guess, like kind of denial of service where the clients were so busy doing these computations they weren't able to respond. This is the Beacon node part of the client. The Beacon node was not able to respond to what the validators were asking to do. The validator said, here's the block I want to produce, here's the attestation I want to produce. These weren't getting out the door because the client was so bogged down with trying to process these valid. But untimely attestations.
00:10:05.840 - 00:10:08.496, Speaker C: That's the gist of it.
00:10:08.678 - 00:10:10.092, Speaker A: This happened to two clients.
00:10:10.156 - 00:10:51.116, Speaker C: Preston yeah, well, two clients have released updates specifically to handle this scenario that's Prism and Tech, who Lighthouse already does it really well. So a lot of us have sort of taken inspiration from their model of how they handle these old attestations. In short, they basically drop them. They say this attestation is not going to be very valuable to how we're going to update the fork choice. It's not worth recomputing all this effort. So we sort of copied their model of just excluding that adaptation from consideration, not doing all the work.
00:10:51.218 - 00:10:53.520, Speaker A: And so why did this happen so suddenly?
00:10:55.300 - 00:12:02.004, Speaker C: Well, we're still trying to track down the exact trigger to the event. But what we think had happened is that some clients, namely lighthouse, when they lose a connection to the execution layer, the layer that the client that handles transactions and the state of ethereum, as we think of from the application layer, that being like go ethereum or whatever you use for your execution client. When we lose access to that, some clients will behave, well, they'll just withhold these attestations and then later produce those, just sort of later release them. So what Prism does is we just don't attest during that time because we can't advance our node. So we just wouldn't really be attesting there. Other clients will produce these sort of old valid but not valuable attestations. And that was what actually triggered the event.
00:12:02.004 - 00:12:19.370, Speaker C: It's not a common path that happens. But what we have learned is that it wasn't something that was nefarious. It was just some sort of unexpected behavior, valid behavior, but unexpected that Prism and perhaps Techu didn't consider or handle very well.
00:12:19.980 - 00:12:59.204, Speaker D: I think a good question here is why it didn't happen on testnet, right? Like why it didn't happen before. I think there are several reasons to it. The first reason is that there's a lot of validators now. There is 600,000 validators and validator matters like the number of validator matters, the more validator you have, the more hashing that you have to do on the state and that's slower. And our testnet only has 400,000 validators. So even the test net is lower than the main net, which is obviously a flaw here. That's something that we're taking back and we're going to revisit how do we do this type of test net.
00:12:59.204 - 00:13:28.480, Speaker D: The second thing is there is a lot more deposit now, right? Because now we enable withdraw and then the deposit queue and then people are kind of getting their top off eve they're going to redeposit it. And then with so many deposits, there's a lot more hashing that you have to do that also increase the latency. So those are the two big factor. And once we reach those two bowling point and we kind of just create this dev spiral.
00:13:29.140 - 00:14:16.640, Speaker B: Okay, so to recap what I'm hearing, both there are new conditions about the state of the beacon chain. A higher number of validators are increasing the resource requirements of nodes. And then also from what Preston was saying, prism and Lighthouse shared similar properties. Because Prism just borrowed from Lighthouse's code base to do this one part of the client in Prism, and because that part was shared, this problem that was triggered by the increased computational requirements and bandwidth or networking requirements of the more and more validators coming in that was triggered. But then because of the shared property of Lighthouse and Prism, that showed up in two clients, which is how it actually showed up as a non finalization event in Ethereum. Is that recap accurate?
00:14:16.980 - 00:14:46.920, Speaker C: Sort of. So the fix was to replicate what Lighthouse handles this behavior. It was Prism and Teku that didn't handle this scenario very well. So when the outage happened, right, there were something like 60% or more blocks were missing. So that's an indicator that more than one client is having issues. And we believe that to be Prism and Teku because both clients have released sort of emergency updates or critical updates since the incident on Friday and Thursday.
00:14:47.660 - 00:15:28.490, Speaker A: Okay, I have a question in general about what this looks like for Ethereum to not finalize. So here is a beacon chain visualizer we've shown before on Bankless. I think specifically when the hard fork upgrades happen, you sort of look for these things to go from red to green, right? These are proposed blocks that we're looking at. So when the blockchain doesn't finalize, when Ethereum didn't finalize on I guess it was Thursday once for a period of time and I don't know how long that was. And then also Friday. First of all, what does this chart look like?
00:15:30.300 - 00:16:17.636, Speaker C: Well, the main indicator is that the green bar you see at the bottom of each epoch justifying or finalize, that's not going to be greater than two thirds. You need it to be greater than two thirds to justify or finalize. In the case of the incident last week, we were missing a ton of blocks. So you can see a couple of red spaces here in the blocks those are missing blocks. If the proposer, whoever they may be, failed to produce a block at that slot. And because there were so few blocks more than half of them were missing, it wasn't possible to pack in all of the attestations. And also very likely the same nodes that were suffering from not being able to produce the blocks were not able to produce the attestations either.
00:16:17.636 - 00:16:31.368, Speaker C: So two parts to it you have to have enough blocks to include attestations and you have to have enough attestations that agree with each other that being more than two thirds to finalize or justify and finalize an epoch.
00:16:31.464 - 00:16:37.150, Speaker A: And how long were these periods of time where this sort of degraded finalization service was happening?
00:16:38.400 - 00:17:23.016, Speaker C: The first time on Thursday, I think it was for four or maybe five epochs that we had a gap in finality. Usually we're seeing every epoch is finalizing two epochs later. So in this screenshot you can see epoch 63 is finalized. When the current epoch 65 finishes we're going to see the 64 will finalize and we just have the sort of continuing rotating the epoch two epochs ago is finalizing. Well, when it wasn't finalizing on Thursday it took five epochs to get back on track and then on Friday it took even longer. I don't recall the specific number. Maybe Terrence knows.
00:17:23.016 - 00:17:44.096, Speaker C: But what was significant about Friday is when it goes longer than five epochs we start to incur an additional penalty that everyone gets penalized and it's called liveness leak, I think. Terrence, do you want to explain in detail?
00:17:44.198 - 00:18:37.548, Speaker D: Sure. So we have this inactivity dig. So this inactivity dig is essentially what makes Ethereum World War Three resilience, right? So imagine we cut the internet in half and then there's this say Asia and then USA and they cannot talk to each other, right? In that case we want either side of a validator to leak their balance faster, to lose their balance faster, so we can finalize faster on each side. So you will begin to lose balance faster if we don't finalize for more than four to five epochs. And then eventually after 17 days you will lost probably around 16 eve, then you will get ejected from the pool. So this is the first time this inactivity dig happened. So I did some math earlier.
00:18:37.548 - 00:18:54.010, Speaker D: So we ended up burning about 28 e. And I don't know if this is something that we should be proud of because everyone loves spend ETH, but it's slightly different. So on average every validator, if you are offline at that time you lost about one dollars.
00:18:55.100 - 00:19:42.580, Speaker B: Okay, just to double down on that mechanism. The idea here is Ethereum's philosophy is to withstand World War Three so if we imagine the internet as a gigantic cell and that cell gets cut in half, ethereum should find a way to bridge the gap between the division of the Internet. And the way here is that if there can't be consensus between the nodes across the world, the assumption is that there's going to be at least a few nodes that can span that gap. And for all the nodes that cannot span that gap, they will get inactivity leaked and down until they are kicked out of the validator set. And then the few remaining nodes that can span east and west or whatever division of the Internet there is, they will be the ones left standing who are not getting inactivity leaked because they are the ones still propagating the blocks. And that's a mechanism that entered, is that correct?
00:19:42.730 - 00:19:44.280, Speaker D: Yes, that's right.
00:19:44.350 - 00:20:04.484, Speaker A: Well, at least we got to test the inactivity leak, right? Guys? There's a silver lining here. I don't think we've ever tested that in the wild. And so this inactivity leak came into play for those who were staking with is it just Prism and Teku and Lighthouse kind of carried on? Was it just sort of a subset of client users?
00:20:04.632 - 00:20:29.412, Speaker D: I think it's hard to tell. I think every client had some issue at that time because of just high CPU usage. So they're sending their Attestations, but their Attestations may not be received, may not be processed. So I think every single client, unless today you run your client on very powerful machine, that you are likely break even or you lose a few cents.
00:20:29.556 - 00:20:48.300, Speaker A: I got it. Okay, so what happened? That's the view sort of from the client and high level blockchain perspective, we've seen that. What about the average user? What happened during this time? Were they able to get transactions through or what happens to users using the network? Did they even notice?
00:20:49.920 - 00:21:41.836, Speaker D: So I guess, put it this way, right? If today it wasn't for beach and Chain Explorer, if it wasn't for that site, will we ever find out the issue? Maybe yes, maybe not. But I don't think we'll find out the issue at that time. Right? We'll probably find out the issue like a few hours later when someone was using this finality notion before. Right? So with that, basically we can say that, yeah, it probably doesn't affect most people. If today you're doing a swap on Uniswap, you are buying some NFTs, those still goes on. But if today, say today you're actually using Finality, which is a pretty rare set of application, I will say maybe layer two, maybe it's changed as a big amount of withdrawal, then that will be affected. But that's kind of a small set of the use case.
00:21:41.836 - 00:22:02.484, Speaker D: I mean, was it acceptable? No, I don't think it's acceptable for Ethereum to be this global Internet of money, which we cannot have this, right, but I'm really happy that liveness still goes on because that's probably, like, I would say, close to 95% of the use case out there.
00:22:02.522 - 00:22:41.696, Speaker A: The transactions were going through completely. It wasn't as if there was a pause in sort of user transactions. It was just this one finality piece that some sort of you called them settlement applications might use. It might be a layer two or it's an exchange, maybe doing a big batch process with a lot of money and they want to wait until full finality is achieved before they settle it. Those are the kind of apps that were maybe affected, even though that's even hard to see because this is so brief, but users weren't affected at all like the regular users. And Liveness was preserved through this event. Preston, looked like you were going to add something to this.
00:22:41.878 - 00:23:22.728, Speaker C: Yeah, I wanted to add that the real impact to sort of the end users was that there was a diminished amount of block space. Right. So when we packing transactions into blocks, what drives the gas price of Ethereum is the demand for block space and the availability. So I did notice that at least on Thursday, gas prices were slightly higher than the daily average. It was something like 120 GWe, at least on the epoch that I checked, which in terms of scale of Ethereum, gas pricing is kind of a negligible increase. Maybe it was 100 epoch before. Now it's 120.
00:23:22.728 - 00:23:53.912, Speaker C: We've seen a lot of DApps push the gas price much higher for different reasons. So it didn't seem like anyone really would have noticed. Right. It wasn't astronomically high, it's just slightly higher than average during that time due to less available block space for transactions. But everything was still going through pretty in a timely fashion. You may have noticed your transaction took up to a minute, but where it normally takes 12 seconds. But that was really it.
00:23:53.912 - 00:23:57.130, Speaker C: You didn't really feel that it was down or broken in any way.
00:23:58.620 - 00:24:13.730, Speaker B: So in that case, what's the big deal here? Why do we care about finality? What could have been a worse condition? Could we play out a scenario where maybe this happens again and then something actually bad happens? What's the big worry here?
00:24:15.460 - 00:25:08.380, Speaker C: Well, the concept of finality in proof of stake is one of the main features, right. It means that we have finality in the blockchain and that we can be assured that that point in time is final and can never be rewritten, or we cannot go back in time, build on a prior block and sort of exclude this history that's happened. As Terrence was saying, that's very important for some transactions. So if you're doing maybe a very large purchase, let's just know we're at a point where you can purchase property in the real world. You say, I want to close on this property, I'm going to send you my ETH, or whatever it might be, my tokens, and we're not going to consider it done until there's finality. Right. So there is that aspect where we want it to be final cannot be rewritten.
00:25:08.380 - 00:25:53.048, Speaker C: It's also part of the entire security of Ethereum. Right. If Ethereum aims to be the global settlement layer, you need to have this consistent finality in a timely fashion. And it can also affect layer twos or other networks that are leveraging Ethereum security. I was imagining a scenario where, what if this played out for a very long time? Right. We have optimistic roll ups out there with, I think, a seven day window for the challenge period. So you can imagine that if this incident went longer than seven days, what does that mean for the challenge period? Even though it has resolved, it's not entirely final because it's not final until it's finalized.
00:25:53.048 - 00:26:17.030, Speaker C: And I thought about that as being sort of like the medium term worst case, the obvious worst case. This goes on longer and longer until we have so much inactivity leak that a lot of validators are rejected. Eventually ethereum recovers. L two S would recover and those challenges would eventually be finalized. But you could see that would be a major disruption if it went on longer than seven days.
00:26:19.740 - 00:26:35.844, Speaker B: Can you put us into the headspace of Preston when this was happening? Were you freaking out? Were you like, oh, that's a sometimes, yeah. We can talk about the technical details of finality, but what about the emotional response?
00:26:35.972 - 00:26:46.530, Speaker A: I can give you guys the response of people on Twitter, which was mass panic, freak out. Oh, my God, ethereum aim is broken. That was the response on Twitter, but yeah.
00:26:48.260 - 00:27:08.992, Speaker C: So when it happened on Thursday, it was around like, 04:00 p.m.. My time. And I had been starting my day very early. And I was like, I'm going to go take a nap. Like, I'm kind of tired, right? And then I just check right before I go to make sure nobody needs me for anything. And I see this message I never want to see again. From Nishant.
00:27:08.992 - 00:27:19.370, Speaker C: He's on our team, nishant Das. He sent me these a couple of times. He says mainnet stopped finalizing. And I said, oh, my God. What? There's no way I'm going to be able to sleep for days.
00:27:20.380 - 00:27:22.412, Speaker A: Three words. Those three words.
00:27:22.546 - 00:27:59.652, Speaker C: Mainet stopped finalizing. And this is how I found out about it the first time. So this isn't the first time Mainnet has had a finality delay or finality incident happened a few years ago where Prism was unable to produce blocks and Prism was a supermajority. Thanks to client diversity, we're not have that risk anymore. But the same message he sent me, he said, may not stop finalizing. And that time, it took us, I think, three days to figure it out, to figure out what the issue was. And we were sleeping in rotating shifts, like, maybe a few hours at a time.
00:27:59.652 - 00:28:08.920, Speaker C: So when I thought, okay, I'm going to go take a nap. And then he said those three words. I said great. I'm just never going to sleep again. So emotionally, that was challenging.
00:28:10.300 - 00:28:41.968, Speaker B: Well, I think this does a very good job illustrating why client teams are so important and why client team maintainers are heroes that should wear capes. So, Preston Terrence, thank you for always wearing a cape, even though you don't actually legitimately, literally wear a cape. There's a lot more that I want to ask about, but first we have to talk about some of these fantastic sponsors that make this show possible, especially MetaMask. If we have used Jargon in this episode that is confusing to you, I bet you MetaMask Learn has an explainer for you on their product. There is a link in the show notes.
00:28:41.984 - 00:28:42.788, Speaker A: Here we go.
00:28:42.954 - 00:29:27.100, Speaker B: Learning about crypto is hard until now. Introducing MetaMask Learn, an open educational platform about crypto, Web Three, self custody, wallet management and all the other topics needed to onboard people into this crazy world of crypto. MetaMask Learn is an interactive platform, with each lesson offering a simulation for the task at hand, giving you actual practical experience for navigating Web Three. The purpose of MetaMask Learn is to teach people the basics of self custody and wallet security in a safe environment. And while MetaMask Learn always takes the time to define Web Three specific vocabulary, it is still a Jargon free experience for the crypto. Curious, user friendly, not scary. MetaMask Learn is available in ten languages with more to be added soon, and it's meant to cater to a global Web Three audience.
00:29:27.100 - 00:29:56.904, Speaker B: So are you tired of having to explain crypto concepts to your friends? Go to learn. MetaMask. IO and add MetaMask Learn to your guides to get onboarded into the world of Web Three. Hiring people worldwide, paying them in crypto, providing them access to benefits it all's so complex. But it doesn't have to be complying with labor laws, payroll rules, tax obligations and crypto regulations. In every country that you employ, someone is difficult, time consuming, manual and costly. And it's drawing more and more attention from regulators and governments.
00:29:56.904 - 00:30:32.648, Speaker B: But there is good news toku is here. Toku is the first employment and compensation platform for the crypto industry that makes this easy. Toku helps you hire employees or contractors and pay them in Fiat or crypto, legally compliantly and with all the taxes handled in over 100 different jurisdictions. So whether you're an early stage company with just a team of two, or you're an enterprise with 200, toku has a solution that meets your needs. Toku is already working with the leading companies in the Space Protocol Labs, Hadera, Gitcoin and many more. So transform your employment and token payroll operations with Toku. You can reach out to toku@toku.com
00:30:32.648 - 00:31:08.932, Speaker B: Bankless or click the link in the show notes. Introducing Ethx from Stator. Ethx is a liquid staking token designed to maximize rewards, all while securing ethereum. With Stator, you can run an. Ethereum node with just four ETH, an 85% lower capital requirement versus the 32 ETH required for solo staking. With Stator's four ETH nodes, you can get a 35% average higher yield since you charge fees to those who use your node to stake their ETH. By running a node with Stator, the Ethx staking derivative token can get minted on your validators and can flow into the world of DFI, which Stator is actively building integrations and partnerships into.
00:31:08.932 - 00:31:46.688, Speaker B: To increase the utility of Ethx, stator allows for both permissioned and permissionless nodes to join the network, maximizing its potential scalability for Ethx while preserving the values of decentralization and openness behind its liquid staking token. Go to Statorlabs.com ETH and sign up to get access to the Stator staking protocol. Arbitrum One is pioneering the world of secure Ethereum scalability and is continuing to accelerate the Web Three landscape. Hundreds of projects have already deployed on Arbitrum One, producing flourishing DFI and NFT ecosystems. With a recent addition of Arbitrum Nova. Gaming and social DApps like Reddit are also now calling arbitram home.
00:31:46.688 - 00:32:32.508, Speaker B: Both Arbitrum One and Nova leverage the security and decentralization of Ethereum and provide a builder experience that's intuitive, familiar and fully EVM compatible. On Arbitrum, both builders and users will experience faster transaction speeds with significantly lower gas fees. With Arbitrum's recent migration to Arbitrum Nitro, it's also now ten times faster than before. Visit Arbitrum IO, where you can join the community, dive into the developer Docs, bridge your assets, and start building your first DAP with Arbitrum experience Web Three development the way it was meant to be secure, fast, cheap, and friction free. And we're back. Now, Terrence, I'd like to turn to you. What was your story? What is it like from your perspective to hear the words mainnet stopped finalizing as a client team dev?
00:32:32.674 - 00:33:29.100, Speaker D: Yeah, it's definitely not great hearing that on Thursday afternoon. Typically, I stop all my meetings after Thursday, so I decided to get to coding, have some personal time, read some paper. I heard from the News, I heard from Telegram, and to lose 65% of participation, it's a little crazy. When I first read that, I just couldn't believe that I was like, how would that happen? Right? It's like, imagine like, 65% of the notes just disappear, right? It has to be like, this sounds very catastrophic if you really think about it. So in my mind, I just started piecing everything together quickly, right? Because 65% then I know it's not just one client. Because thanks to client diversity, every client is pretty spread. Even my prism has 33%.
00:33:29.100 - 00:34:21.840, Speaker D: My house has 33%. So I know it's not just one client, so it's not a client bug. Then I thought, okay, maybe it's like a target attack, right? And then maybe it's literally like someone is attacking the network. Finally, someone is actually taking the network. But luckily, the whole thing went back to normal after three to four epoch, which is like 20 minutes. So they kind of gave us more time to think about what the issues is, right? And then I thought, okay, well, if it's a target attack, why did it stop? If they could have done for longer, why stop there? So I didn't really think it was a target attack at that point. Then I thought, okay, maybe there's like a really big exchange or staking pool that runs something on GCP and AWS and then they shut down or something like that.
00:34:21.840 - 00:34:38.820, Speaker D: So that was another reason. But luckily, I think the whole thing took about like four to 5 hours until we came to the gist of it that basically our software was little bit under optimized.
00:34:39.820 - 00:34:47.928, Speaker B: So how hard of a problem was this to fix as soon as so it sounds like diagnosing wasn't too difficult, but what was the actual solution process?
00:34:48.014 - 00:34:48.650, Speaker A: Like?
00:34:49.340 - 00:35:30.532, Speaker D: It wasn't hard to fix. We could have fixed the problem within the first 30 minutes, but we kind of wanted to do the perfect fix, right? Because everything is trade off. Client software is a trade off. If you optimize one thing, you kind of lose another thing. And this is why client diversity is nice, right? So I'm going to shout out client diversity again. Just Lighthouse works fine because of the trade off they made, right? Today network is under another scenario. Lighthouse may underperform life versus prison because everything is a trade off here, right? So we kind of picked the face that we felt had the right trade off.
00:35:30.532 - 00:35:52.892, Speaker D: That where we like. And then again, this is a team effort, probably like five to ten of us. We got together, we talked about it, and then we're like, okay, this is the fix that we want. We also share our fix, our idea, with five other awesome client teams as well, right? And then, because we're all learning from each other, we are all study each other's design.
00:35:53.026 - 00:36:40.056, Speaker A: So, yeah, one interesting observation I have about this is this is sort of a finality event, but it's also like a non event, right? Like when we asked the question at the beginning of this episode, preston, did Ethereum break? And you were just emphatically? No, it didn't break. And so this is maybe a demonstration of the resilience of the Ethereum Network and what came into play. How did the Ethereum Network show resilience during this event like that? Terrence, you just talked about multiple clients. Was that the key thing? Is that the thing that saved our ass, I guess I would say? Or are there other elements that demonstrate the resilience of Ethereum first to you, Terrence?
00:36:40.168 - 00:37:25.064, Speaker D: That's one thing, right? If today it was three years ago when Prism was a majority client, I will be really worried, right? But today we're just like a piece of the pie. So therefore, I feel like I can sleep a lot better. The second thing is that we really need to thank this thing. It's called LMD Ghost. This is designed by Vitalik and a few brilliant researchers from the Ethereum Foundation. So LMD Ghost is this consensus mechanism, is this four choice rule that we use for E two or order of beacon chain, basically. So essentially the beach and chain ethereum proof of stake consensus is made up two parts.
00:37:25.064 - 00:37:55.492, Speaker D: The first part is LMD Ghost. Essentially, it favors liveness. It basically ensures today if we don't have safety, we don't have finality. The blockchain keeps going. And this is very important, as it turns out, because before I always question, why do we need this? Why can't we just have safety? That's it. Why can't we be like a tenderminchain? Why can't we be like maybe like the other blockchain that just have safety? Right? And this is really the reason. This is why.
00:37:55.492 - 00:38:13.340, Speaker D: Because if things go wrong, if we don't have finality, we don't want to affect the UX, right? We want people still be able to buy NFTs, they buy coffee still to make trade. So essentially, to answer your question, this LMD goes for choice rule was the one that saved our butt.
00:38:13.840 - 00:38:19.484, Speaker A: It prioritized liveness. That's what it did. Specifically, preston, what would you add to that? What saved us?
00:38:19.682 - 00:38:49.820, Speaker C: Yeah, I think Terrence said it well. It's the specification of Ethereum, L D Ghost and these things that make Ethereum the way it is, combined with client diversity. Right. The specification worked here. When there's an incident, it can recover, it can live on. And because there was an incident and we're having client diversity, it was minimized to a subset of the network. Right? It could have been worse if it was more of a majority prism.
00:38:49.820 - 00:39:31.300, Speaker C: It brings me back to the days when we had these early testnets like Madasha, which was 100% prism and it was just on fire. It was terrible when there were incidents and thankfully, client diversity. We've done a really great job over the last two years or three years, however long, to smooth that out. And we could see it here today, that there was an incident and it recovered on its own without intervention within minutes, and that we were able to release mitigations and hot fixes and client updates within days to say, okay, now it's not going to happen again. So I think that went really well. It's a great test in Mainnet.
00:39:32.440 - 00:39:49.930, Speaker B: So I'm going to pull in something from my Bitcoiner world. They always love to say, this is good for Bitcoin. And the spirit of that response is that anti fragile crypto economic systems, what doesn't kill them makes them stronger. So, Preston, was this good for?
00:39:51.820 - 00:40:20.710, Speaker C: I think, you know, like we're saying, this is the first time we've seen it in Mainnet in production. We knew it would work. We've done it in testnets. But actually see it in action, it just goes to show the resiliency that when things are going horribly wrong, it can still be okay and it still eventually finalizes. And that the mechanisms and the specification and the design of Ethereum proof of stake is resilient. So I thought that was great.
00:40:22.760 - 00:40:23.860, Speaker B: Yeah, go ahead.
00:40:24.010 - 00:40:47.576, Speaker D: So Ethereum is an evolving protocol as we know. Right? It is still constantly under heavy R D, right? And then we definitely came out here with a very better understanding on just very little detail of things that we want to improve, of even future research spec as well. I heard your podcast on MEB.
00:40:47.608 - 00:40:48.124, Speaker C: Burn. Right?
00:40:48.162 - 00:41:06.470, Speaker D: That's a very good podcast. But because of this, we're kind of looking at MEB Burn, we look at PBS to see how we can do better there as well because everything is interconnected. They basically all touch each other. And I definitely feel like we definitely got all of this very strong.
00:41:07.640 - 00:41:14.150, Speaker B: And not only that, but clients have discovered a weakness that is now removed. Correct?
00:41:15.640 - 00:41:17.764, Speaker C: Yep. Cool.
00:41:17.882 - 00:41:20.360, Speaker B: Nice. I love anti fragile systems.
00:41:20.860 - 00:41:42.664, Speaker A: My last question is this, and this goes back to Terrence, something that you were saying about kind of the design of Ethereum proof of stake with LMD Ghost. That's like way in the weeds for people. But the priorities that the Ethereum network makes, as we all know, it's not high transactions per second on the base layer on mainnet.
00:41:42.712 - 00:41:43.068, Speaker C: Right.
00:41:43.154 - 00:42:06.470, Speaker A: Instead, Ethereum has made other trade offs and one of those tradeoffs is Liveness, a liveness trade off. And I want to just focus for a minute on some other outages that have happened in crypto with other layer one blockchains. And we don't have to name names. I don't want us to anyone to feel like the Ethereum is punching down that kind of thing. Okay?
00:42:07.400 - 00:42:09.988, Speaker B: Just think of the first name that comes to your mind about a blockchain.
00:42:10.084 - 00:42:11.844, Speaker A: But also just like just the facts.
00:42:11.892 - 00:42:12.152, Speaker C: Okay?
00:42:12.206 - 00:42:58.964, Speaker A: So I think when people were talking about and by the way, bankless included, we're sorry, everyone listening for the Tweet headline, all right? We've made amends on that. That happened this week. But when people equate Ethereum breaking to sort of the downtime and the breaking or temporary halting of other blockchains, it's much different. So I'll just throw the name Solana out there just for a minute so we can talk about that as just the facts kind of use case here. When Solana was down, because it did not prioritize Liveness, when it had some issues, it was actually offline, right? Like you couldn't get a transaction through for a period of time. I'm wondering if you guys could just weigh in on that briefly because it is a useful contrast point. Okay.
00:42:58.964 - 00:43:08.200, Speaker A: Ethereum doesn't have the highest transactions per second on the main net, but it does have this feature of liveness. Terrence, could you talk about that for a minute?
00:43:08.540 - 00:43:25.212, Speaker D: Yeah. So I just wanted to add, right, there's nothing like what we are doing today, right? We're working on open source software and this is the open network. That means anyone can read any code that we write. We're like chefs, we're cooking the kitchen. Right. And anyone can join the network.
00:43:25.276 - 00:43:25.648, Speaker C: Right.
00:43:25.734 - 00:43:55.096, Speaker D: So it makes it very vulnerable to attack. Therefore therefore, I think fevering liveness is very important just because you want your life to keep going. Right. Say today you have a country that's built on top of Ethereum. I want to buy coffee and then if today Ethereum is done, cannot process transaction, I cannot buy my coffee, then I will be very upset. Right. So I would say Liveness is a very important property.
00:43:55.096 - 00:43:59.432, Speaker D: Probably the most important property. If you want higher throughput there is layer two.
00:43:59.486 - 00:43:59.752, Speaker C: Right.
00:43:59.806 - 00:44:05.020, Speaker D: And that's what layer two is for. But Ethereum as a base layer definitely liveness.
00:44:06.480 - 00:44:23.136, Speaker C: Yeah. I think that's what makes a blockchain great is to have liveness. Right. It's not useful if you can't use it. So to have liveness is, I think, one of the most important aspects of Ethereum. More so than transactions per second. Right.
00:44:23.136 - 00:44:37.060, Speaker C: We have solutions for that. We can abstract to layer two or other clever mechanisms. But if you don't have liveness, then none of that works. You have zero transactions per second. So it is the most important aspect of Ethereum.
00:44:38.600 - 00:44:39.108, Speaker B: Beautiful.
00:44:39.194 - 00:44:48.616, Speaker A: Preston, Terrence. Yeah. Thanks for summarizing this. Thanks for jumping on the Bankless podcast, explaining this to the Bankless community and the crypto community. Did ethereum break? The answer is no.
00:44:48.718 - 00:44:51.500, Speaker B: This was maybe whoever tweets that is dumb.
00:44:51.920 - 00:44:52.670, Speaker D: Yes.
00:44:53.120 - 00:45:30.680, Speaker A: This is maybe Ethereum's biggest liveness test yet, though. And so it was good to come out on the other side and see a resilient network. Pretty unique, I think. Something that's very special in this space and worth preserving. And as always, got to thank you. Whenever we have client devs on the Bankless podcast, we would be remiss, David, if you and I did not express our thanks both to you, Terrence, and to you, Preston, and also to any other client dev that is doing this hard and essential work to build this incredible freedom technology network that we care so much about. Thank you.
00:45:30.680 - 00:45:31.332, Speaker A: Sincerely.
00:45:31.396 - 00:45:33.770, Speaker B: Open source superheroes, for sure.
00:45:34.380 - 00:45:36.330, Speaker A: We appreciate you guys coming on.
00:45:37.740 - 00:45:51.704, Speaker C: Yeah, it's our pleasure to get to work on it, really. It is an exciting opportunity. We know that Ethereum is going to change the world and to be working on it at the protocol level, there's nothing better that we could imagine doing. So it's our pleasure to be here.
00:45:51.902 - 00:45:53.728, Speaker D: Plus, on to what Preston said, thank.
00:45:53.734 - 00:46:05.564, Speaker A: You for having us written disclaimers, guys. Of course. Got to let you know, Ethereum is resilient, but ETH the asset is risky. So is all of crypto. So is DeFi. You could definitely lose what you put in. But we are headed west.
00:46:05.564 - 00:46:10.430, Speaker A: This is the frontier. It's not for everyone. But we're glad you're with us on the Bankless journey. Thanks a lot.
