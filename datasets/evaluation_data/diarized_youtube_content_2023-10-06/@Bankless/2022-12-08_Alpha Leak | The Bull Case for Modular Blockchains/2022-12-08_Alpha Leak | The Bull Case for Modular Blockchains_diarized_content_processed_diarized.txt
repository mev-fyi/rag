00:00:01.850 - 00:00:56.750, Speaker A: Bankless nation. Welcome to this episode of Alpha Leak, where we are talking about Fuel network with John Adler. Fuel network is a layer two on ethereum, but it's a different kind of layer two. And that's really what I wanted to explore here today. What about Fuel is so different? Why is it built in the way that it is? And why does John Adler believe that he is skating to where the puck is going, where every other layer two is focus a little bit too much on the short term? In this episode, you'll learn about why Fuel is built in the way that it's built, how it's different from the ethereum virtual machine, and why the Fuel VM. The Fuel virtual machine is new and improved and shiny and super fast and super executable and is going to be, according to John, the logical conclusion of a layer two. You'll also learn a little bit about the inner workings of Fuel beyond the Fuel VM, the other parts of the Fuel network that make it tick and overall, just get John's philosophy onto the layer two space.
00:00:56.750 - 00:01:13.742, Speaker A: Fuel is a sponsor of the Bankless podcast. But that is not why we are making this episode. We are making this episode so we can dive all the way down into the details that make Fuel tick so we can learn more about it. So, without further ado, we'll get into this conversation with John Adler of Fuel right after we talk to some of these fantastic sponsors that help you go bankless.
00:01:13.806 - 00:01:58.494, Speaker B: The reality today is that five corporations control the entire world of social media. They own our names, they restrict our content, they monitor our every move. And their time is up, thanks to our sponsor, DSO. DSO is a layer one blockchain built from the ground up to decentralize and scale social networks. With DSO, you can own your own identity, content and social graph and take it with you across hundreds of applications already built on the censorship resistant DSO blockchain. DSO storage advantages make it finally possible to build infinite state applications that can efficiently store and index large amounts of content and data fully on chain. Diesel also offers multiple crypto native monetization primitives for developers and creators, including social NFTs, social dows, social tokens, and social tipping.
00:01:58.494 - 00:02:28.442, Speaker B: So in order to experience the social layer of web3, go to diesel.com and claim your username. That's deso.com. If you've been listening to Bankless, you know that we're fans of the modular blockchain thesis. The idea that blockchains will separate execution from data availability and consensus, allowing all three to become the best versions of themselves. And Fuel has built the fastest modular execution layer in the industry. By supporting parallel transaction execution, fuel unlocks significantly faster throughput for the webfree world.
00:02:28.442 - 00:03:19.494, Speaker B: Fuel also goes beyond the limitations of the EVM with its own Fuel VM, which is more efficient and optimized, opening up the design space for developers. And lastly, fuel brings a powerful developer experience with its own domain specific language Sway, and a supportive tool chain called Fork. With Fuel, you can have the benefits of smart contract languages like Validity while adopting the improvements made by the Rust tooling ecosystem, letting the Fuel development environment go beyond the limitations of the EVM. If you want to learn more, there's a link in the show notes to see how you can get involved with the Fuel network. In all of my years in crypto, I have never been hacked, scammed, or lost money to a thief. And a lot of that credit goes to my Ledger hardware wallet. The Ledger Nano X and the Ledger Nanos plus hardware wallets allow users like you and me to secure and manage all of our crypto assets and our NFTs, all with the security of storing users'private keys offline and out of reach from hackers.
00:03:19.494 - 00:03:46.786, Speaker B: The Ledger Nano X is the perfect hardware wallet for managing your crypto and NFTs on the go because it connects to your phone with Bluetooth and has a nice big screen for easy transaction readings. Ledger has also upgraded the iconic Ledger Nanos and made the new Ledger nanos device more DeFi and NFT friendly, making it the perfect hardware wallet for beginners. Ledger has truly maximized for both ease of use and security. So discover which Ledger device is best suited for your journey by going and visiting Shop Ledger.com.
00:03:46.888 - 00:03:54.230, Speaker A: Welcome, Bankless nation, to this edition of Alphaleak where we are talking to John Adler about fuel network. John, welcome to the show.
00:03:54.380 - 00:03:55.910, Speaker C: Hey David, thanks for having me.
00:03:55.980 - 00:04:04.710, Speaker A: John, you want to introduce yourself a little bit and provide some background on how you got into crypto and we'll lead into that story all the way through to where we are now with Fuel Network.
00:04:04.870 - 00:04:49.990, Speaker C: Yeah, sure. So currently I am our guest most recently and also currently I'm one of the co founders of Fuel Labs and also Celestia Labs, which are building two separate components of a modular blockchain stack, which we'll dive into a bit later. How I got into Blockchain this is a story that I feel like I tell this every podcast, but basically my old grad school advisor when I was in grad school at UFT, was really into Blockchain. He was involved in the early days of Ethereum and so on, so he's been around there for a while. One thing he likes to show his students is this selfie he took with a Mount Gox sign guy in Japan, if you remember those. Like this guy with a sign give us back our bitcoins or whatever. In Japan when Mount Gox happened and he had a selfie with that guy.
00:04:49.990 - 00:05:22.260, Speaker C: So he's been around for a while. He kind of introduced his students to Blockchain, and then since then, that's kind of where I got exposure. After that, I guess I went to consensus to do general layer two scalability research. So things like channels plasma and so on. That's also where I created the optimistic roll up design paradigm. Or I guess at the time it was called Minimal Viable Merge Consensus because it was intended to be minimally viable and not the end game. Since then I think we've come up with slightly better constructions such as Sovereign Roll Ups and so on.
00:05:22.260 - 00:05:30.310, Speaker C: And then after that, I left Consensus to start fuel labs and celestial labs. That's kind of the TLDR of my journey.
00:05:30.650 - 00:05:40.202, Speaker A: So you said you created the optimistic roll up design structure. Does that mean you created what we now know as Optimistic Roll Ups? Is that what you said?
00:05:40.336 - 00:06:56.740, Speaker C: Yeah, I guess you could say that. There was a bunch of competing and close design architectures floating around at the time, which should surprise no one, right? Everyone was kind of in a hodgepodge of various ideas with different parameters in terms of data availability, how to do validity and so on. But I was kind of the first person to at least publicly publish the exact construction that we now know as Optimistic Roll Ups that specifically has certain properties such as it uses fraud proofs for validity permissionless, block production to ensure state liveness and data availability on the main chain. So combining these three properties is something that other people hadn't written about before, which is kind of OD because if you think about it's not exactly a complicated construction, but it's one of those things where it's like it's obvious in retrospect but at the time people weren't really thinking about these kind of constructions. I think it's because at the time the prevailing narrative was plasma and people didn't like the idea of posting all the data on chain because they thought it was a regression compared to the quote unquote infinite scalability of plasmas. So because of that, people weren't too interested in that particular avenue of research.
00:06:57.670 - 00:07:42.240, Speaker A: Okay, so you started as a scalability researcher at Consensus. You said you worked in state channels, plasma and then ultimately became Optimistic Roll Ups, which means you've seen the full trajectory of ethereum scaling research since day one, since we started with like, oh, we're going to scale ethereum with state channels, not realizing that that is limited to where we are now with optimistic Roll Ups. But you've taken Optimistic Roll Ups in a slightly different direction than I would say is like the status quo where the status quo or something like arbitram or optimism where they are trying to be EVM equivalent. You're gone off in a new direction. Can you talk about that philosophy or design choice with Fuel and how it's perhaps different than the optimistic roll ups than most people are familiar with?
00:07:42.850 - 00:08:17.322, Speaker C: Sure. So first of all, it might be good to kind of give an intro to what Fuel is. The TLDR is that it's the fastest modular execution layer. Fastest because it supports transaction throughput along proportional to the cost to run a full node that is better than any other modular execution layer out there. And modular execution layer because it's something that's slightly more than just a roll up. So we could perhaps talk about the modular execution layer part first.
00:08:17.376 - 00:08:17.738, Speaker A: Sure.
00:08:17.824 - 00:08:23.918, Speaker C: And then go to the fastest part because the fastest part has like it's one word, but it has like a million different cones to why it's like that.
00:08:24.004 - 00:08:24.686, Speaker A: Right?
00:08:24.868 - 00:08:34.610, Speaker C: So the modular execution layer, for those of you who aren't familiar with roll ups, should I maybe give like a 1 minute summary of a roll up?
00:08:34.680 - 00:08:35.346, Speaker A: Love it.
00:08:35.448 - 00:08:46.210, Speaker C: Okay, so a roll up is a blockchain like any other blockchain and it's attached to some data layer. And then a data layer is like.
00:08:46.360 - 00:08:49.010, Speaker A: A layer one like ethereum or something else.
00:08:49.160 - 00:09:07.542, Speaker C: Yes, it could be ethereum, it could be bitcoin cash if you're in 2017 and you're vitalik. It could be Celestia, it could be eigen layer if you want. You could actually have a blockchain that is its own data layer, kind of like Ethereum is today or like Solana is. It's effectively its own data layer.
00:09:07.606 - 00:09:09.414, Speaker A: And we would call that kind of a monolithic.
00:09:09.462 - 00:09:47.830, Speaker C: But then that'll be monolithic with a modular blockchain. The data layer is another completely separate blockchain. So a roll up will post its data to a data layer and it will progress its state transition function just like any other blockchain does. And it'll allow users to verify that the blockchain is valid. But the roll up rather just so there's no ambiguity here, it'll allow users to verify the roll up is valid using either fraud or validity proofs or if we have any other cute construction to verify validity without actually fully validating the chain. Because then it's not a roll up. It's just like just a blockchain.
00:09:47.830 - 00:09:51.066, Speaker C: It's just like, I don't know, side chain or something.
00:09:51.248 - 00:10:07.550, Speaker A: Maybe one definition to unpack is like a roll up is a blockchain that posts its data as in posts its blocks to another blockchain. And that the fact that it's posting its own blocks to another blockchain makes it a roll up, not its own independent blockchain. Is that a fair definition?
00:10:08.930 - 00:10:11.290, Speaker C: That's a necessary but not sufficient condition.
00:10:11.370 - 00:10:11.710, Speaker A: Okay.
00:10:11.780 - 00:10:52.838, Speaker C: You also need additional conditions such as you would need fraud and validity, fraud or validity proof. And you would also need a mechanism for permissionless insertion of transactions into the roll up somehow, right? Because if you don't have that, then the roll up can be halted or it can be censored. So you need these three properties. So what's a modular execution layer with a roll up? Most roll ups you don't necessarily need what's called a settlement layer. What a settlement layer is a blockchain. It could be the same as the data layer, such as in the ethereum model for rollups. The ethereum acts as both the data and settlement layers.
00:10:52.838 - 00:11:57.026, Speaker C: The settlement layer will verify these fraud or validity proofs, thus allowing you to have a two way bridge of funds between the settlement layer and the roll up. You don't technically need that for a roll up to be a roll up. Like, you could have a sovereign roll up that could be its own settlement layer, that could use another settlement layer, or just use a peer to peer for verifying fraud or validity proofs. But regardless, with a settlement layer, the settlement layer is concerned with this two way bridge, right? And for a two way bridge to work, what you really need for certain VMs or certain execution systems, what you really only need is for some state route to be valid. As long as the state route is valid, or as long as the route of something, let's say, withdrawals is valid, that is sufficient. That is both necessary and sufficient to have a two way bridge. Now, the problem is that some roll ups have taken this to an extreme in terms of optimization and have decided to forego everything else.
00:11:57.026 - 00:12:44.826, Speaker C: So if you look at the Bitcoin design paper, right, satoshi spends one entire section of the Bitcoin design paper talking about light clients or simplified payment verification clients at the time, right? And he talks about, hey, let's put the transactions in a Merkel tree so that light clients can actually get a Merkel proof to their transaction being included in a block, right? And if you didn't have light clients, you wouldn't need a Merkel tree. Like full nodes do not care about a Merkel tree of transactions or even a Merkel tree of state like Solana full nodes. The Solana blockchain does not have a state route like a Merkel route over the blockchain state all account balances and contract state. It doesn't have that. And full nodes, solana full nodes still run. But you can't have Solana like clients. Or rather, solana has some weird way of doing like clients.
00:12:44.826 - 00:13:29.230, Speaker C: But let's say you can't have Solana like clients just as a generalization without a state route. Similarly, if you don't have a transactions route, you can't have like clients either. So some roll ups have kind of taken the notion of a layer two is just a roll up and it's just concerned with this two way bridge and nothing else. And they've optimized away things like a transactions route, and they just have a transaction hash. And then you can't actually have an off chain like client to the system. Which is weird, right? Because now you're running a roll up. And okay, do you run? Who do you trust? In that case, if you think about the model, who do you trust? If you don't have a roll up lite client off chain that you can run, how do you know the roll up is valid? I guess you can trust that there's some powerful computer verifying it and so on.
00:13:29.230 - 00:14:30.254, Speaker C: But you run an ethereum full node, because if you don't run an ethereum full node, then you don't actually know the roll up has any notion of validity or anything like that, right? So the trust model becomes very weird if you don't have off chain like clients. In addition to not just the trust model of has the roll up been corrupted, but the trust model of even interacting with the roll up. Right? Because then do you just trust infuria to just give you all the data honestly, right? There's no merkel proofs that your transaction has been included in the block. How do you know it has been? Right? You just have to trust infuria completely at that point. Well, why even have a roll up? So a modular execution layer, if I can use an analogy, it's kind of like the difference between USB Three and Thunderbolt Three, right? Where Thunderbolt three is basically for those of you who aren't familiar, the USB standards, due to designed by Council, has a bunch of optional components. So you can get like a USB cable that doesn't include certain features, like, let's say a display. So you can get a USB cable that you say, oh, I can use this to connect to a display.
00:14:30.254 - 00:15:15.474, Speaker C: But you can't because it only has power like a Thunderbolt Three cable has all the features similarly to Thunderbolt Four and USB four, right? It has all the features. So you're guaranteed if you get one of this cable, it's more expensive, but has all the features. Right? And that's kind of the analogy is that just a roll up and just a layer two will be kind of like a USB Three cable. You don't know what you're getting and potentially you could want to do something and you can't. A modular execution layer, you can think of it like a thunderbolt cable where it's like a roll up, but it has all the features. And one of the important features that it has is the ability to run an off chain like client. So you have the properties of a roll up, the trust minimization, the permissionless, the trustless two way bridge, but you also have the ability to run a light client for that roll up.
00:15:15.474 - 00:15:20.130, Speaker C: And that allows you to really have trust minimized infrastructure.
00:15:20.470 - 00:16:11.714, Speaker A: Okay, I'm going to need you to check my understanding on this. I'm going to try and regurgitate what you said and you'll correct me in some particular way. Okay, so you're saying a lot of roll ups and you're talking about the bitcoin white paper and Satoshi emphasis on these light clients, emphasis on merkel routes. And my interpretation of just like, what is a merkel tree? What is a merkel system is a compression system. It's a system of putting a bunch of transactions into a smaller bit of data. And by making that bit of data more manageable, you allow more people to verify it, more people to actually verify the validity of the transactions that happened. And so when you're talking about a layer two, that doesn't have this light client enabled properties or just any sort of system for the layer two.
00:16:11.714 - 00:17:09.430, Speaker A: That makes it more manageable for other people to check the validity of. You're saying that it kind of runs into the same problem that Bitcoiners previously would critique ethereum of is like yo, your nodes are way too big, only so many people can validate the chain. What's the point of having a trustless system if the ability to run a node is so goddamn difficult that everyone has to just trust infira? So you're saying that we need a module rather than just a roll up, which is the USBC model, which is some one off solution to create a roll up. And all it does is verify the two way bridge so you can get your assets there. But it doesn't allow users to actually verify the validity of the chain because these chains are just not optimized. It doesn't have any sort of compression tool like a merkel tree for example. And that means that no one can run a light client which means no one can validate the roll up that they're on, which means they're kind of just trusting the operators of that roll up without being able to do it themselves.
00:17:09.430 - 00:17:31.562, Speaker A: And you're saying a modular execution layer has solved this problem by producing a more abstracted layer two, an abstraction layer between the ethereum layer one or any layer one and the fuel layer two. Is that at a fair conclusion? Check me where I got wrong.
00:17:31.616 - 00:17:35.658, Speaker C: Pretty fair, except the last part. I wouldn't say it has more abstractions. I would say it just has more features.
00:17:35.754 - 00:17:39.598, Speaker A: Okay, more features. Everything up to that last part is good?
00:17:39.684 - 00:17:59.910, Speaker C: Pretty much, yeah. It's not a bad analogy. Yeah. So that's kind of where the modular execution layer comes in. It's that we're really pushing for a system that isn't just a roll up and it's not just a bridge, but rather has all those features that you would expect out of a blockchain today that allows trust, minimized infrastructure.
00:18:00.490 - 00:18:20.266, Speaker A: It seems to be following the same trajectory of just like modularity in general. Right. So the ethereum layer one is becoming modular and I think maybe the generalized critique is that something like optimism or Arbitrum or like a roll up as we know it is like a monolithic version of a layer two and you're trying to make a more modular version of a layer two. Is that also fair?
00:18:20.368 - 00:18:53.240, Speaker C: You could say that, yes. That's actually not a bad way of putting it in the sense that traditional roll ups, now they're moving towards being modular execution layers following fuel's lead. But these traditional roll ups that su everything except for the two way bridge, it is not a bad analogy to think of them as more like a monolithic modular execution system whereas they kind of tightly couple themselves to a very specific layer one. And they say we must operate in this exact, we must operate in this stack and nothing else.
00:18:53.690 - 00:18:59.850, Speaker A: Okay, so what kind of flexibility does Fuel gain by this design choice, by this design philosophy?
00:19:02.110 - 00:19:31.186, Speaker C: Well, one, it gains security for end users, and two, it gains flexibility. Just so we're clear, it's not just flexibility, it's also security. We covered the security just prior. So in terms of flexibility, it allows Fuel to be run or deployed. Rather, there's less constraints on which layer ones it can use for data availability and settlement. If you don'tightly couple yourself to a very specific stack. This is layer one.
00:19:31.186 - 00:19:36.658, Speaker C: This is a roll up. If you don'tightly couple yourself, then that means you have more opportunity to go in different ecosystems. Right.
00:19:36.744 - 00:19:45.014, Speaker A: So the Fuel layer two can settle both its data both on Ethereum and Celestia, and another layer one, if you wanted to.
00:19:45.052 - 00:19:45.734, Speaker C: Yes. Okay.
00:19:45.772 - 00:19:57.050, Speaker A: That's kind of what I meant about abstraction. As in we could extract away which data layer really is important to Fuel. So there's no layer one or data layer that Fuel really calls home.
00:19:57.200 - 00:20:28.600, Speaker C: That's exactly it. And I think large parts of our node just refer to the data layer as like, DA layer, as opposed to Ethereum. If you look at some other chains, they'll call this specifically thing Ethereum or they'll call it EVM. Right. In our case, we've tried very hard to abstract that away. Not out of necessarily any ideological concerns about Ethereum, which there are none, but more about the more you tie yourself to any specific thing, the more weird code debt you might inherit without even intending it. Right.
00:20:28.600 - 00:20:36.166, Speaker C: It makes it harder to ensure that your code is clean and free from weird legacy stuff.
00:20:36.268 - 00:20:54.350, Speaker A: Sure. And importantly, it's that light client merkel tree aspect that we were talking about that enables this property. Right. It is the compression of all the data into like a little nice, neat bundle of data that allows for that data to be able to go onto any data availability layer. Is that correct?
00:20:54.500 - 00:21:23.110, Speaker C: No, that's orthogonal. Those are two different parts. The fact that you have the ability to run a trust, that's not the only property. That's difference between Thunderbolt and USB analogy here. There's additional properties. That's a major one that I talk about because of security. But there's other ones, like just building your software in a modular way, abstracting away what is the data layer and what can it actually provide? That's another property.
00:21:23.260 - 00:21:41.734, Speaker A: Okay. One of the big new things about Fuel is the Fuel VM, which is a meaningful separation from the Ethereum virtual machine, which so many roll ups Arbitrum again. Arbitrum. Arbitrumism. Just emulate. They recreate the EVM as close to the EVM as possible. This is not Fuel's design choice.
00:21:41.734 - 00:21:47.242, Speaker A: So talk about the philosophy behind this design choice and kind of how it fits into the overall broader Fuel stack.
00:21:47.386 - 00:21:49.886, Speaker C: Yeah, sure. So now we're getting to the fastest part.
00:21:49.988 - 00:21:50.254, Speaker A: Yes.
00:21:50.292 - 00:22:50.110, Speaker C: Cool. And similarly to how the modular execution layer has both a security component and a flexibility component, as does the fastest part, it has the fastest part and it also has a flexibility part. So in terms of performance, period, the Fuel VM is designed based on the EVM, actually. So if you're familiar with the contract execution semantics of the Ethereum virtual machine and some of the nuances and gouchas there, you can learn how the Fuel VM works in like an hour. It's very simple because it's basically the EVM, but improved is what I like to call it. It has a number of architectural changes that aren't too important, I think, to dive into things like it uses registers instead of a stack, which leads to higher performance and higher performance both in terms of register machine. Like a program on a register machine being executed is faster than on a stack machine and also because it reduces gas accounting overhead.
00:22:50.110 - 00:23:41.950, Speaker C: But that's kind of getting a bit too much into the weeds. The kind of interesting things that the Fuel VM brings to the table in terms of performance is the fact that it can introduce new instructions that wouldn't really be introducible into the EVM without a lot of bike shedding, along with other architectural changes that will emulate certain EIPS on Ethereum or that implement them in spirit. So I'll give it a few examples. One of them is memory copy, right? People would really like to have a memory copy instruction because it would just make certain operations much, much cheaper, especially custom cryptography. The current approach is you can delegate call into the identity precompile or sorry, not delegate call, I guess static call. You can call into the identity pre compile and then copy your data and then get it returned. And then, okay, you have your memory copy.
00:23:41.950 - 00:24:36.260, Speaker C: That's fairly expensive because you have to call a pre compile versus just an instruction. And people wish that forced things like custom cryptography, they had a memory copy instruction. Why can't you implement it? The answer is, well, because the EIP process is very involved. There's a lot of governance complexity in the Ethereum space because you don't want to just accept every single EIP that people propose because then the EVM would get very bloated and be impossible to maintain, right? And as we all know, public goods funding on clients is kind of fairly limited. Which makes me somewhat happy that the paradigm team is now choosing to maintain a Rust EVM implementation. Because now at least we can be pretty guaranteed that at least we'll have one thing in the site performance that is also Rust, which is nice, that is maintained, and we don't have to worry about public goods funding as much. But regardless, back to the topic at hand.
00:24:36.260 - 00:24:50.610, Speaker C: So in the Fuel VM, we have a memory copy. Boom. End of a story. It allows you to cheaply copy memory from one place to another. Hello, custom cryptography. Another example is transient stores.
00:24:50.690 - 00:25:03.454, Speaker A: Transient. That is pretty technical. And for a non technical person like me, can you just really distill down the impact of that? Maybe for developers and for users. If it does impact them, it will.
00:25:03.492 - 00:25:36.706, Speaker C: Impact people who want to build custom cryptography in the EVM. And it'll impact people who want to use cryptographic primitives that aren't natively supported by the VM. So in the EVM, you have access to, let's say, a signature verification for Ethereum's curve. But you can't really verify signatures for other curves. One popular curve or one popular signature scheme is EdDSA, as opposed to Ethereum's ECDSA. And EdDSA is used by Nier, it's used by Solana, it's used by Cosmos, it's used by a bunch of chains. They shouldn't be using it because it's garbage.
00:25:36.706 - 00:26:09.620, Speaker C: But regardless, they use it. People would like to, for instance, construct a bridge, like, I think, a Rainbow bridge or something, right? They'd like to construct a bridge. But to verify each EDSA signature with custom cryptography implemented in the EVM is on the order of 1 million gas versus 3000 gas. For an ECDSA signature verification, that disparity is on the order of three orders of magnitude difference. That should not be the case. Maybe we're talking about a factor of two, three, I don't know, something like that. Difference is what it should be, not three orders of magnitude difference.
00:26:09.620 - 00:26:34.010, Speaker C: So in the field, VM people will be able to and Hash Cloak is actually writing I think they wrote a BLS signature verification in Sway, which we'll get to sway later, but they wrote it for the Fuel VM. So you'll be able to write custom cryptography, different hashing algorithms, different signature schemes so that you can do things like Bridging to other chains and whatnot. And you can do that reasonably, economically.
00:26:35.070 - 00:26:49.680, Speaker A: Okay, and so that's all about just, like, having one transaction or all transactions on Fuel just overall have a smaller footprint on whatever data layer that it settles down to. Which is where we get this fastest claim, right?
00:26:50.690 - 00:26:52.190, Speaker C: Among other things, yes.
00:26:52.340 - 00:27:06.078, Speaker A: Okay. All right, so tell us about the current state of the Fuel network. When did it get started? What are you guys working on right now? Where is there a roadmap and where are we in that roadmap?
00:27:06.254 - 00:27:13.126, Speaker C: Yeah, I was about to talk about more parts, about the fastest, but okay, we'll talk about this.
00:27:13.228 - 00:27:16.950, Speaker A: If we're not done talking about the fastest parts, we should absolutely talk about the fastest parts.
00:27:17.370 - 00:27:18.874, Speaker C: Sure. I have a few more to add.
00:27:18.912 - 00:27:21.610, Speaker A: Okay. Yeah. Where's next? In the fastest? Yeah.
00:27:21.680 - 00:27:52.274, Speaker C: Okay. So there's a few other EIPS that have been implemented. One of them is transient storage. Some people from Uniswap have been pushing T store and T load, which are effectively let's see how I can distill this. So storage on Ethereum allows you to persist things across transactions, right. And memory persists only within a particular call. So if I call the uniswap contract, right, it has some memory and that persists only within this call.
00:27:52.274 - 00:28:20.390, Speaker C: So you have two options. You either persist things across transactions, or you persist things only within a call. What happens if the unisop contract calls? I don't know. The Die contract, right, then the Die contract doesn't have access to the memory of the unisoft contract. But it would be really nice if we had access to some memory or some storage, whatever you want to call it, that persisted across the transaction. So across calls in a single transaction, and that was discarded at the end. So it couldn't be used across transactions, but it could be used across calls.
00:28:20.390 - 00:28:55.202, Speaker C: That's what Tstore and T load are. There's an EIP for this, and it allows you to do nice things. One thing it allows you to do is it allows you to check for reentrancy at runtime without having to use storage, which is very expensive. Then you can use T storage. Other things you can do, there's a bunch of things you can do with this. So the Fuel VM has a shared memory architecture where memory is persisted across calls. You can go into more deep dive into the technicals, but the essence is that it has memory, that is some storage location that is persisted across calls.
00:28:55.202 - 00:29:52.726, Speaker C: So it already has whatever Tstore it would give you. So you could wait whatever amount of time this EIP can wait for while it's on the back burner to be implemented, or you can just build on fuel. This is part of potentially the flexibility that I was talking about the fastest is both performance, but also flexibility in terms of performance. It might also be worth talking about the Fuel protocol itself, because the Fuel protocol isn't just a Fuel VM. The Fuel protocol is designed to run multiple instances of the VM in parallel, because each transaction in the Fuel system declares which contracts it will touch. If you know which contracts, two transactions will touch and they touch disjoint sets of contracts, you can execute them in parallel because there's no hard dependency between these two transactions. So this allows us to execute transactions and therefore instances of the virtual machine in parallel.
00:29:52.726 - 00:30:36.600, Speaker C: And that's kind of the overarching Fuel protocol. So it's not just like a single VM that runs transactions one at a time, it's more like an orchestrator that runs multiple instances of the VM in parallel and leveraging parallel. Transaction execution is also where we get a lot of performance gains, because modern CPUs haven't really increased their single core speed in the past 1520 years or something like that, right? I remember when I was a kid, I was playing half life two on a single core Pentium four, and I was running at like 4.2 GHz or something like that. I'm sure a lot of people had a Pentium Four back in the day. If you're my age and that was like the fastest single core processor at the time. This was like right on the cusp of dual core processors started to become a thing.
00:30:36.600 - 00:31:18.618, Speaker C: And nowadays I have on my desktop, my processor is, what, like 4.8 GHz Boost, right? That's not even that much faster than 4.2, right? And that was like 2020 years later. Oh jeez, I'm old. But what have processors done? Well, my processor has 30, I forget it was 32 or 64, and it has shitload of threads, right? And the old Pentium Four had one thread. So that is almost two orders of magnitude more performance that is unused in a single core VM. So with parallel transaction execution then this kind of unlocks, just using resources that are sitting there, not being used, it doesn't require a more expensive machine.
00:31:18.618 - 00:31:38.346, Speaker C: It's just those resources. Regardless of what CPU you buy nowadays, it's going to be multicore. It's going to have at least a minimum of eight threads. Unless you go really cheap and buy an Intel Atom processor or something, it's going to have at least eight threads. So those resources are unused currently in single threaded VMs. Might as well use them.
00:31:38.528 - 00:32:09.880, Speaker A: So the first thing that you said is that Fuel network, you have a transaction that calls two different contracts and we can have this. Instead of having to call memory twice, there's only like one persistent memory. I'm going to mess up the way that that's described, but it sounded like just a more efficient way of accessing memory in the Fuel network across contract calls, which again, limited developer experience. But it really just sounded like there was just like less resource load per transaction in order to get a transaction done.
00:32:10.330 - 00:32:37.070, Speaker C: That's a good way of putting it. And one thing we like to say is that we reduce waste. It turns out that a lot of ways people want to use the EVM, have to use the EVM wastefully. It's not necessarily even that the EVM must be inherently slow and you must completely change the architecture because we didn't. The fuel VM is based on the EVM. It's that, it turns out people want to use the EVM in certain ways. And the EVM doesn't have a good way of doing certain things.
00:32:37.070 - 00:32:41.278, Speaker C: Therefore people, they use wasteful ways of doing those things.
00:32:41.364 - 00:32:45.946, Speaker A: We provide efficient workarounds which ultimately become wasteful in terms of computational resources.
00:32:45.978 - 00:32:49.090, Speaker C: Exactly. And we just provide efficient ways of doing those things.
00:32:49.160 - 00:33:17.046, Speaker B: The layer two era is upon us. Ethereum's layer two ecosystem is growing every day. And we need layer two bridges to be fast and efficient in order to live a layer two life. Across is the fastest, cheapest, and most secure crosschain bridge. With across, you don't have to worry about high fees or long wait times. Assets are bridged and available for use almost instantaneously. Across's bridges are powered by uma's, optimistic Oracle to securely transfer tokens between layer twos and ethereum across its critical ecosystem infrastructure, and Across V Two has just launched.
00:33:17.046 - 00:33:47.966, Speaker B: Their new version focuses on higher capital efficiency, layer two to layer two transfers, and a brand new chain with polygon all while prioritizing high security and low fees. You can be a part of across the story by joining their discord and using across for all of your layer Two transferring needs. So go to across to quickly and securely bridge your assets between Ethereum, optimism, Polygon, Arbitrum or Boba Networks. The Brave Wallet is your secure, MultiChain onramp into Web Three and is built directly into the Brave privacy browser. Gone are the days of managing multiple.
00:33:47.998 - 00:33:49.826, Speaker A: Wallet extensions that put you at risk.
00:33:49.858 - 00:34:29.134, Speaker B: Of phishing, spoofs and tracking. With the Brave Wallet, you can securely manage your crypto assets across more than 100 different chains, including Ethereum, Layer Two, Salana and more, all without downloading risky extensions. The Brave Wallet is easy to set up and removes the headache of jumping between wallets and extensions. It's lightweight, but packed with great features like built in token swaps, buying and holding NFTs with a gallery view and support for hardware wallets. But also much more than that, because Brave is shipping new features every single month with a mission to make Web Three easier to navigate. For its over 55 million users, wallet extensions are a thing of the past. So get started with Brave's Web Three ready browser today and experience a decentralized Web seamlessly without all the clutter.
00:34:29.134 - 00:35:09.066, Speaker B: You can download the browser@brave.com bankless and click the wallet icon to get started. Arbitrum One is pioneering the world of secure Ethereum scalability and is continuing to accelerate the Web Three landscape. Hundreds of projects have already deployed on Arbitrum One, producing flourishing DFI and NFT ecosystems. With a recent addition of Arbitrum, nova gaming and social DApps like Reddit are also now calling Arbitrum home. Both Arbitrum One and Nova leverage the security and decentralization of Ethereum and provide a builder experience that's intuitive, familiar and fully EVM compatible. On Arbitrum, both builders and users will experience faster transaction speeds with significantly lower gas fees.
00:35:09.066 - 00:35:27.394, Speaker B: With Arbitrum's recent migration to Arbitrum Nitro, it's also now ten times faster than before. Visit Arbitrum IO, where you can join the community, dive into the developer Docs, bridge your assets, and start building your first DAP with Arbitrum. Experience Web Three development the way it was meant to be secure, fast, cheap and friction free.
00:35:27.512 - 00:36:06.722, Speaker A: So there's something that you said in the very beginning of this where it was like something about the relationship between the Fuel stack, the fuel technology and a full node. And it was like the Fuel allows you to leverage the full resources of a full node in a way that's not very wasteful. And this is kind of the theme that I'm gathering here, is that a transaction on Fuel is minimalist, in that it only uses the minimum amount of computational resources it requires to get itself executed, and then also on top of that, you're adding like multi core multi threading with the Fuel VM. Is that kind of a simple way to explain what Fuel is?
00:36:06.856 - 00:36:25.190, Speaker C: Yeah, that is it. It's not like anything magical like, oh, we used to be engineers at Qualcomm and we know how to build kernels and shit on routers. This is very simple. Just reduce waste. Reduce waste in terms of make transactions. You can make transactions execute faster by making them waste less. Right.
00:36:25.190 - 00:36:33.930, Speaker C: You don't need magical reengineering of anything of hardware or anything like that. You just say waste less and boom, your transaction is faster.
00:36:35.630 - 00:36:41.920, Speaker A: Are there any numbers that you can put behind this? How many more times faster is Fuel than your typical optimistic roll up?
00:36:42.530 - 00:37:38.030, Speaker C: That is hard to say without optimizations in the sense that there's a design aspect to it, like you're designing the protocol and that there's an implementation aspect. And the implementation obviously requires optimization work that is independent of the fundamental design of the protocol. Our implementation is currently undergoing the VM implementation is currently going optimization work as we speak. It's been ongoing for the past month or so that has greatly reduced overheads, I think, like on the order of ten x just off of optimization work. But until those optimizations are complete, then it doesn't really make sense to give any numbers because if the overhead is so high because it hasn't been optimized out yet, then there's not really any comparison to make. What you really should be comparing against is an optimized field VM versus an optimized EPM. That is still a little ways away, but it'll be ready in the not too distant future.
00:37:38.180 - 00:37:42.526, Speaker A: Okay. Is there some sort of like what number are you going for? If that's fair.
00:37:42.628 - 00:37:49.650, Speaker C: What number are we going for? Well, I mean, hopefully 100 x on the same computer.
00:37:49.800 - 00:37:52.754, Speaker A: 100 x faster than a typical optimistic roll up.
00:37:52.872 - 00:37:53.538, Speaker C: Yes.
00:37:53.704 - 00:37:55.998, Speaker A: Okay, so I know like, Arbitrum likes.
00:37:56.014 - 00:37:59.060, Speaker C: To do an add another zero.
00:37:59.590 - 00:38:21.770, Speaker A: They like to just say, I think the last number we got out of Arbitrum is that we are seven times faster than ethereum. So there is like Arbitrum has seven ethereums worth of scale. I know that that measurement has offended other layer twos, but if you want to tell a normie like me, how much more scale does it have? That's like a nice thing to say. So does it go and say that? Okay, then fuel is 700 ethereums?
00:38:22.430 - 00:38:32.986, Speaker C: I don't know the zero just as Edwards. No, I mean, I don't know zero to the seven x. I don't know, something along those lines.
00:38:33.098 - 00:38:39.810, Speaker A: Okay, well, that's certainly a big number. Have we covered all the fast part of Fuel?
00:38:40.150 - 00:38:45.614, Speaker C: Yes, I think we're ready to move on to your previous question about roadmaps. Maybe we could repeat it in brief.
00:38:45.662 - 00:38:51.430, Speaker A: Yeah. So when did the Fuel project really get started? What is the roadmap and where are we on that roadmap?
00:38:52.570 - 00:38:56.274, Speaker C: Depends what even my Fuel project, I guess I can talk about the origins of Fuel.
00:38:56.322 - 00:38:56.920, Speaker A: Sure.
00:38:57.610 - 00:39:17.680, Speaker C: Which is that I think it was in 2019. Yeah, I think it was in 2019 when I left Consensus to start it up with Nick. And then Sam joined shortly thereafter. Very shortly thereafter. It was basically the three of us in a cave with a box of scraps subsisting off of a single small grant from the Ethereum Foundation. And we launched. Fuel v one.
00:39:17.680 - 00:39:50.454, Speaker C: Was it at the end of 2020? No, that seems too long. Okay, maybe we started maybe we started this in 2020. The years are all fuzzy. I think we started in 2020. We launched Fuel V One at the end of 2020, and Fuel V One was just for payments. It was the first and currently only real optimistic roll up. In other words, ones with a fraud proof, b permissionless block production, c posting data onto Ethereum, and d no upgradability that exists on Ethereum today.
00:39:50.454 - 00:40:36.754, Speaker C: And it was the first optimistic roll up, regardless of true optimistic roll up or not, that was deployed to main in Ethereum right at the end of the year, December 31, just so we could say we deployed it in that year, a whole year before any other roll up. Yeah, and that wasn't the end game. It was just for simple payments, but it wasn't the end game. We knew from the beginning that we wanted to build a system that allowed Ethereum to scale not just in payments, but that allowed Ethereum itself to scale. And that meaned general purpose, smart contract execution. And towards the end of that year, we had actually started working on what would become Fuel V Two. We started thinking about the VM architecture, we started thinking about the language.
00:40:36.754 - 00:41:34.860, Speaker C: And here's maybe some fun piece of history. We had actually talked to some people about if we had a VM interpreter in Rust that we can compile down to WASM if we could use an interactive verification game over the implementation rather than the protocol itself. And this turns out we had chatted with some researchers about this, and it turns out that's the exact approach that both arbitrary and optimism ended up unveiling as nice innovations in the future. What a good coincidence. So we ended up not going down that approach for various reasons. One of which is that you're tying yourself to a particular implementation and any weird bugs that that implementation may have, any weird inconsistencies, it also makes it harder to maintain. And one thing that's very important with these systems, and this will come into play of why we built Sway is that building and maintaining are not the same thing.
00:41:34.860 - 00:42:08.766, Speaker C: You can sure build a system very quickly if you take some general purpose thing and run it over the implementation of your VM interpreter. But then how do you maintain it? Right? Then do I have to maintain two different instances of your VM interpreter, one that you can run quickly and one that you can run the IBG over, it gets very tricky on how maintenance is done. So this also leads us to our language. Right. We had also been thinking about what to do with our language. We looked into move. We were thinking of also of using the Move VM.
00:42:08.766 - 00:42:49.620, Speaker C: But the Move VM is not designed to be fast and it's not designed to be flexible. It's designed for a very particular and very different way of reasoning about assets. And the Move language was also very immature at the time. And I'll tell you, in the past two years or so since we looked at Move, I think this was at the very end of 2020. Yeah, at the very end of 2020. The language really hasn't changed that much. Like, Sway has grown from literally nothing because it was created from scratch to the most mature blockchain development language in existence, if I do say so myself, from nothing.
00:42:49.620 - 00:43:24.170, Speaker C: And Move has basically not changed at all in the past two years. So it was a good choice not to use it. So in addition to it being immature and it following a weird different paradigm, one of the reasons not to use it is that it would be an upstream dependency. For anyone who's worked in an open source code base, it's really nice to use if your upstream dependencies are maintained. Right? If they're maintained, then you can use them. If there's a bug, you ask the maintainer, hey, can you fix this? Release new version, and all is good. The problem is, when it's not maintained, then you have a choice.
00:43:24.170 - 00:43:59.894, Speaker C: You can either fork it yourself and maintain it yourself. So now you're maintaining some code that you didn't write. It's not in your style. It doesn't have the same conventions. Do you completely change the style to your conventions? Right? And completely change how they do things to work with your conventions? At that point, it's like, can anyone else even use it? Or are you just solo maintaining it? And if it's like a big thing, that transition could be very expensive and it could happen at a very inappropriate time. So when it comes to building, sure, taking on a upstream dependency is nice and easy. It makes things fast to build.
00:43:59.894 - 00:44:35.380, Speaker C: But again, it's not just about the building. It's about the maintaining and having an upstream dependency like that. Especially something that's know some software from Facebook, then Libra, then DM, now Move is being forked to different. Aptos has their flavor of Move, sui has their flavor of Move. It's like, is there even a single maintainer with a core Move language? I don't even know at this point, right? And having an upstream dependency of that is really, really bad for maintaining your code. So we chose to build Sway instead from scratch. I feel like before I talk about Sway is it maybe good to go back to the roadmap question.
00:44:36.070 - 00:44:41.030, Speaker A: I think Sway and also the fork conversation are similar. Should we also talk about fork?
00:44:43.290 - 00:44:44.342, Speaker C: Sure. Okay.
00:44:44.476 - 00:44:47.190, Speaker A: I can also let you lead if you have a direction you want to go in.
00:44:47.260 - 00:45:14.082, Speaker C: Well, I was going to finish talking about the timeline and roadmap thing as opposed to just diving into more technical stuff. Cool. Because this was more like a history lesson of how we got to where we are. Right. We launched VLV One, we started thinking about Field V Two, and these were some of the things we were thinking about, like Move and then IVG and all this other stuff. We ended up basically building the whole thing from scratch to avoid upstream dependencies and other issues like that. Since then, we've been building.
00:45:14.082 - 00:45:28.814, Speaker C: For the past two years, the organization has grown from zero contributors other than the founders. I think we made our first hire in January, end of January or something like that sorry.
00:45:28.952 - 00:45:29.830, Speaker A: Of this year?
00:45:29.900 - 00:45:31.480, Speaker C: No, of 2020.
00:45:31.930 - 00:45:32.774, Speaker A: Okay.
00:45:32.972 - 00:46:15.650, Speaker C: No, sorry. Okay. We launched Fuel V One at the end of 2020, and then we started building Fuel V Two in earnest, 2021, January up until now. So the past two years dates are hard. So we made our first hire. We've since grown to, I think, almost 70 contributors in the organization from Noan back in back in the beginning of 2021. So I think we've done a pretty good job building out one of the best teams in crypto, especially, well, for sure, the best compiler team and just one of the best teams, period, across our whole stack in crypto, mostly engineers, believe it or not, like 60 of those people are engineers.
00:46:15.650 - 00:47:02.798, Speaker C: We really do need to hire more non engineers. So if you are out there and you're a non engineer, if you're into BD, or if you're into public communication, content writing, if you're into project management or anything like that, please reach out to me after this because we always need more of those. And then since then, we've basically been building. We launched a oh, sorry. For the first year we built in stealth mode, and then on January 2, 2022 so this year so about eleven months ago now, to the date actually oh, it's December 2, so eleven months ago. Then we released all of our code base in public. Since then, we have actually been building in public, and this is an important distinction between us and potentially some other projects.
00:47:02.798 - 00:47:36.080, Speaker C: So not only is our code all open source, our entire stack, except for a couple of minor components, but those will change soon. We also build in public. Some other projects, roll up or not, will, for instance, build entirely in private, and they'll release some blob at the end. And it's not even open source, right? Or sure, it's open source, but they don't actually build in public, they'll push things out. Just boom. Here's something. We were working on this for the past year now you know about it.
00:47:36.080 - 00:48:08.810, Speaker C: At fuel labs, everything we build for the fuel protocol is built in public and it's also planned in public. We don't have like a private issue tracker that people can't see. You can go on our GitHub, you can communicate with people through issues, through PRS and stuff and that's how we do our work. So it's very a big part of ethos. It's not just about the software and the blockchain, it's also about how is it built because people are a very important part of our culture. We made all the code public at the beginning of this year. Since then we've launched three testnets.
00:48:08.810 - 00:48:48.206, Speaker C: One of them was for Sway swap, a port of uniswap, the hybrid of uniswap V one and V two, ported to the Sway language, deployed to a private DevNet. Then we launched two public testnets, beta one and beta two. Each of these about two months apart that had just increasing number of features and increasing sophistication and stability and so on. I think we are gearing up for a beta three testnet sometime early next year. Let's say that's kind of it for the spoiler. So there'll be a few more testnets. We're rapidly approaching a main net launch.
00:48:48.206 - 00:48:58.360, Speaker C: What form that I'll take will leave to future announcements, but yeah, that's effectively how things have gone in terms of development for the past couple years, three years.
00:48:58.890 - 00:49:20.206, Speaker A: So how will an ecosystem come to be on fuel? What's the idea behind that? Because if I'm understanding this correctly, you can't just copy and paste uniswap code and deploy it to fuel. That's why you talked about with some sort of iterated code to make it work on the fuel network. How do you expect an ecosystem to come to be on fuel? How do you expect that story to go?
00:49:20.388 - 00:49:58.250, Speaker C: Yeah, it's not just how I expect an ecosystem to come. I can describe how an ecosystem came to fuel. We already have burgeoning ecosystem of very excited developers that are really engaged into the project and the language and just general ecosystem that they've taken a look at Sway, they've taken a look at the fuel of VM and they're like, wow, there's so much better than any other chain I can get even today. And there's the early days with rough edges. Imagine like a year from now when we've polished all those rough edges even more. It's going to be insane. And we already have a dozen or so projects that are building on us on testnet.
00:49:58.250 - 00:50:32.930, Speaker C: We hosted a Switter space with one of them, pool shark last night on the Sway. You can look at the Swaylang Twitter and it has a space from just last night. Just last night. If you're in Eastern time, I guess if you're in different time zones then it's not night and maybe not yesterday, but they're building an AMM that's concentrated liquidity if recall correctly. Right. We have a few other ones like an NFT marketplace and some other stuff that are being built today. So this is like we have to attract developers out of Norris.
00:50:32.930 - 00:50:40.454, Speaker C: We already have an ecosystem of developers being built that are already here and there's only going to continue to grow, of course.
00:50:40.492 - 00:50:45.354, Speaker A: Yeah. Do you have any stats on users or daily transaction volume or any stats of adoption like that?
00:50:45.472 - 00:50:57.760, Speaker C: That is something I don't have off the top of my head. I'll have to talk to our growth lead on this. I'm sure she has some whole bunch of numbers and stuff, but that's not my area of expertise. I just do protocol design.
00:50:58.850 - 00:51:10.942, Speaker A: Would data like that be something available in something like Dune Analytics? Or does the fact that it's a Fuel VM make finding data on Fuel a little bit harder because it's not as easily plug and playable as other roll ups?
00:51:11.006 - 00:52:03.038, Speaker C: Yeah, it's not currently as plug and playable, so it wouldn't appear in Dune. That being said, it's all on chain and the testnets are public, right? Like beta two is a public testnet. It has an open GraphQL endpoint that anyone can query. I should also point out that it's not just like the fundamental protocol that has been improved over the EVM. We also made improvements to things like we have a native GraphQL interface, so you don't have to use a third party service like the Graph to index things and then expose a GraphQL endpoint if you're June or whatever. Right. We also have a first party indexer service, so if you want to build an application and then run various indexing on that, things like pools over time and user accounts over time and all this other stuff, we actually have a first party indexing service that you can plug into our node.
00:52:03.038 - 00:52:34.190, Speaker C: You don't have to use a third party like the graph, wait for integrations, wait for all that governance and all that stuff. You can just use our indexer. Boom. It just works. And it's all like a single unified tool chain and you can get all your indexing done that you can then plug into analytics websites. Of course it's not currently plug and play into Dune, but eventually, why not? There's no reason that it can't happen, or there's no reason you can't just run some GraphQL queries against the node on yourself. Because again, the beta two network is public and the blockchain is all on chain, as they say, right? You just query the chain.
00:52:35.570 - 00:53:13.900, Speaker A: Do you have attitude or philosophy as like where do you think the whole entire broad landscape of ethereum layer twos is going? Because each layer two has its own kind of directional philosophy. Optimism is really focused on their bedrock and op stack. ZK Sync wants to do its prover circuit with a bunch of layer threes. Do you have any sort of belief as to where the broad landscape of all ethereum layer twos will go. And I'm assuming you think that Fuel is kind of leading in a particular direction that you think is the right direction, but do you have any takes about where the logical conclusion of ethereum layer two go?
00:53:15.230 - 00:53:27.818, Speaker C: So I think there's two facets to that question. One of them is potentially where do I think it's going to go in the short term? And the second is where I think it's going to go in the long term.
00:53:27.914 - 00:53:28.270, Speaker A: Sure.
00:53:28.340 - 00:54:29.060, Speaker C: So I'm pretty convinced in the short term that we're going to see two things happening. The first one is convergence around the EVM as a focal point as it exists today, other than Fuel, of course. So this will look like what we see today. We have a bunch of blockchains going or a bunch of roll ups going from I guess we're EVM compatible to, okay, now we're EVM equivalent, right? And then they're all going to deploy their solutions that are quote unquote EVM equivalent. But then the next step to this, and this is still in the short term, is people will want more. They'll want more flexibility, they'll want more speed, they'll want more something, right? And we can see this already. You have projects that talk about, oh, why don't we add account abstraction, why don't we add native support for Tstore, right? Hey, I'm on, I don't know, roll up XYZ, let's implement T store and get people who have been excited about it all this time to use us.
00:54:29.060 - 00:55:12.538, Speaker C: People want more and you're going to end up, I think, in a weird scenario where that's the long term thing, we're going to talk a weird scenario in the long term thing. Okay, so in terms of people want more, people want improvements to both EVM and infrastructure like RPC endpoints and stuff. They'll want parallel transaction execution in a way that isn't a denial service vector. Because some people are saying, hey, let's apply a parallel transaction execution to the EVM with concurrency. That's a denial service vector. Or rather, well, it's a denial service vector or it does nothing, which is always the rock in the hard place. It either does nothing or it's a denial service vector.
00:55:12.538 - 00:55:50.738, Speaker C: In the worst case, if it's adversarial and our Ethereum team is using this approach, which is why I think they're using the wrong approach. Of course, Fuel is not using optimistic concurrency, right. It's using enforced parallelism in the transactions themselves. And therefore it's part of the actual consensus of the chain. It's part of the rules that there is going to be an opportunity for parallelism and then you can enforce certain payments and stuff around this. If someone makes a bunch of transactions that are all targeting the same state, they should pay more and so on. But you can do this as part of consensus because it's actually part of the transaction.
00:55:50.738 - 00:56:34.300, Speaker C: It's not just some implementation detail like. Concurrency is. So what I think is going to happen is that people want more. And guess what in that wanting more? That is fuel. Fuel is years ahead, plural, of any other chain in terms of building the next step of the EPM, in terms of implementing these EIPS like Tstore, in terms of account abstraction, in terms of EIP 30 74 for authenticated calling, in terms of flexible transactions with scripts, all of these things Fuel has from the beginning, right? So when people start looking for more, well, guess what? Fuel has been there for years, right? And we're years ahead of anyone else. So there's going to be no competition, there is no second best, as someone would say.
00:56:34.750 - 00:56:38.874, Speaker A: You're just saying that fuel is the philosophy of skating to where the puck is going.
00:56:38.912 - 00:57:14.118, Speaker C: Yes. Cool. And that falls into what I foresee is what's going to be some long term consequences of this EVM convergence, which is that as people want more, we have now crossroads. It's either people are going to accept that they can't get more, which is not good, like I really wouldn't like that eventuality, or people are going to just say, hey, let's use Fuel. Because Fuel, it has everything we want, it has all the more we want and it's already implemented. We don't have to wait years. It has better language, better tooling, better VM, better everything.
00:57:14.118 - 00:58:30.798, Speaker C: Why wait when we can just use Fuel? That's, I think, the ideal scenario both for fuel and myself personally and also for the ethereum ecosystem, I think because there's a third scenario which I think is really bad which is that each of these roll ups, which a lot of them have certain financial interest and political interests are going to start pushing through ethereum governance changes to the EVM that benefit them. And if they don't get those changes, then they're going to start fragmenting what is the EVM? Right? Imagine if Arbitrum and Optimism have two different ideals around some feature of Ethereum, right? Like arbitram really wants feature x Optimism doesn't like feature X and thinks it should be feature Y. And an example of this is actually Ethereum itself, the EVM like base layer. Ethereum had such a thing happen where there were two competing proposals, which ironically, weren't actually competing necessarily, but there were two competing proposals for how to implement BLS signature verification in the EVM, which I don't actually know why it was needed ultimately, because apparently you don't need it for withdrawals. People are saying you needed it to enable withdrawals, but then it didn't happen. Then turns out you don't need it for withdrawals. So I don't even know why it was needed.
00:58:30.798 - 00:59:13.310, Speaker C: But regardless, I think the reasoning at the time was to enable withdrawals, which we know that's pretty important, right? And that's still taking a while. So there were two proposals. One of them was implement BLS pre compiles, the other one was implement basic pre compiles for general cryptography that people could then use to specialize at the application layer instead of at the consensus layer. For BLS specifically, right? Now the BLS specific ones, maybe they were faster and cheaper, but then they required you specifically need to know about BLS. The other one is more general, right? But it could be more expensive. And there's like a bunch of fierce competition and governance around which one of these two should be accepted. Of course, neither of them ended up being accepted.
00:59:13.310 - 01:00:49.450, Speaker C: But when you have a situation like this, imagine if you have two roll ups and each of them think one of these is better. What the fuck happens to governance then? Especially when these roll ups are when they say they're EVM equivalent? Like do they just stop improving their chain and fuck their users and send them all to Fuel? I mean, I would like that, right? And I think that may be the ideal scenario for Ethereum because then it avoids this, this disaster scenario of all these roll ups now competing with each other for Ethereum Governance. They're not competing with each other for users, they're competing each other over Ethereum Governance and having a war through Ethereum Governance which features get implemented in the EVM because they have to stay EVM equivalent. And if they don't, then potentially even an even worse scenario happens where now each of these rollups branches off and has their own flavor of EVM and fuck EVM equivalents and they call themselves the EVM and it's like, well, what do you do with the Solidity compiler? Do they each have a different version of the Solidity compiler that can be used for their flavor of the EVM? Then how do tools work and stuff? Right? Both of these scenarios are really, really horrific. And that's what I foresee post EVM convergence that people will want more and this more will lead to what I hope is the ideal case of people will realize fuel is that more and it is bringing scalability to Ethereum and bringing improvements to Ethereum with all the security guarantees and trustlessness and decentralization ethos and open building ethos that Ethereum really values. And it'll go to Fuel because if not, then it's looking very grim in terms of what are the long term consequences of roll up teams fighting on the Ethereum Governance arena for their own purposes.
01:00:50.430 - 01:01:07.438, Speaker A: Well, John, this is why I love these conversations, because it's only developers cadet can actually think in these such long term time horizon like game theory scenarios. So that's definitely something that I now have to consider. So thank you for sharing that.
01:01:07.604 - 01:01:09.620, Speaker C: Well, now maybe you won't sleep as well at night.
01:01:11.110 - 01:01:28.760, Speaker A: Well, I've never been bearish on Ethereum actually being able to problem solve, but yeah, the problems do only seem to get larger and larger as we go out into the future. If you had a call to action for listeners, developers, whoever might be listening to this episode to help join the effort to make Fuel a success. What would you ask?
01:01:29.530 - 01:01:52.080, Speaker C: I would ask that you keep an open mind and try it. You don't have to take my word for anything, but you also shouldn't take anyone else's word. Don't believe what you hear on Twitter necessarily. And don't believe anything you hear out of my mouth. What you should believe in is the code. Go look on our website, go look at our docs, go play around with our tooling and our chain and see for yourself that there is no second best.
01:01:52.850 - 01:01:55.594, Speaker A: And where are all of the links to go get that done?
01:01:55.652 - 01:02:21.820, Speaker C: Yeah, so if you want to, I mean, the main portal to everything is just Fuel Network, the website Fuel Network. You can also look us up on GitHub directly@github.com slash Fuel Labs. You can follow us on Twitter, which is at Fuel Labs underscore potentially that might be changing soon, alphaleak. But yeah, that's kind of where you can go to kind of get started on socials and just code and stuff.
01:02:22.590 - 01:02:29.834, Speaker A: Awesome. Well, John, thank you so much for joining me on this Alpha Leak episode. Speaking of Alpha leaks and explaining to me the Fuel ecosystem, I appreciate it.
01:02:29.872 - 01:02:32.874, Speaker C: Thanks so much for having me, David and the Bankless Nation hey, we hope.
01:02:32.912 - 01:03:13.138, Speaker B: You enjoyed the video. If you did, head over to Bankless HQ right now to develop your crypto investing skills and learn how to free yourself from banks and gain your financial independence. We recommend joining our daily newsletter, podcast and community as a Bankless Premium subscriber to get the most out of your bankless experience. You'll get access to our market analysis, our Alpha leaks and exclusive content, and even the bankless token for airdrops raffles and unlocks. If you're interested in crypto, the Bankless community is where you want to be. Click the link in the description to become a Bankless Premium subscriber today. Also, don't forget to subscribe to the channel for in depth interviews with industry leaders.
01:03:13.138 - 01:03:22.810, Speaker B: Ask me anythings and weekly roll ups where we summarize the week in crypto and other fantastic content. Thanks everyone for watching and being on the journey as we build out the Bankless Nation.
