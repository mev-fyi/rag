00:00:13.530 - 00:01:02.240, Speaker A: Morning, guys. It's a little early in the morning, everyone's getting here, but we've got some inferior members in the audience. And then I think I talked to some of yesterday about coming to this event. I'd like to, because we have a little smaller audience, can take a quick pull of the room on what basically project you're working on and what you're interested in hearing about. Be a bit more informal of a talk, basically. If there's any specific subjects or things in general, I can go into those in more detail or change what's on the slides to talk about something different. So really just shout out if there's any questions.
00:01:02.240 - 00:01:54.906, Speaker A: This talk is going to be on Inferra and front end. So some specifics on ethers js and how to get eth logs and how to work with ERC 20 tokens in a front end environment. And my name is Sean Brennan and I'm on the inferior team as the developer relations lead. Quick show of hands as far as like, who's had some background in Javascript for Ethereum development before anyone? First time this weekend, probably nothing before. Okay, so a couple of terms that you hear a lot in this talk and in future will be. So a client is the software necessary to run a blockchain node, and so to sync with the blockchain and to interact with it. So that's called a client.
00:01:54.906 - 00:02:44.530, Speaker A: A node is that instance of a blockchain. So the theorem network probably has like 10,000 nodes all running the Ethereum network in sync with each other. And so to do that you have to download the nodes to your local machine with a client. But because the Ethereum blockchain has been running for so long, that takes many hours depending on the different settings you run it with. And so if you're just trying to work with the blockchain, but you don't want to run it locally or deal with the hassle of running it locally, you can use what's called a provider, which is a connection to a blockchain, such as Ethereum, but remotely, and that's defined by a particular URL. And so when it's a remote provider, it's called a gateway. So inferior is a gateway to Ethereum.
00:02:44.530 - 00:03:54.230, Speaker A: You'd use a provider in something. I'm going to talk about something called ethersJs, which is a Javascript library for basically a set of functions and basically protocols that have already been written for you. So when you're interacting with Ethereum, you can go directly through the client and interact through these specific JSON Repc calls and set up your application that way or someone's done a lot of the hard work for you already and put all these nice functions into libraries. And so ethers, JS is one of the, I'll show a list of them later. For pretty much all the different languages, there's web three libraries. And basically one of the first things, if you're learning about Ethereum and want to build a website with it, I just tell everyone, like check out etherjs and it's a great start. Let's see, so example, this is just from their documentation.
00:03:54.230 - 00:04:44.754, Speaker A: You can see there's different providers and how to connect with them. And so Infuria is a provider and you just basically sign up on infuria IO and you get a API key and you just plug in that API key to the provider step of ethers and boom. Like with really just one step free sign up online, you're connected to Ethereum and you can interact with blockchain. Another front end tool that's really useful is called metamask. It's a consensus plugin for different web browsers. And basically it's your user's connection to the website. So it's a web three provider and you'll see a lot of different websites that you interact with on Ethereum.
00:04:44.754 - 00:05:45.786, Speaker A: They'll ask you to connect your metamask and you just basically click it, type in your password, and then you can interact with basically send and receive tokens from the website. And again, sorry, I guess the code might be hard to read there, but it's basically you're creating an Ethers provider and basically would just slot inferra into that. Another thing I want to talk about is something called ethlogs. And so basically smart contracts generate logs by firing events. So here's a transaction receipt that contains one log entry. I wish this was easier to see, but basically it has a block hash, it has the block number, it has the logs. And so the pink text, that's the address.
00:05:45.786 - 00:06:20.022, Speaker A: And then the data. The next one is the data. It's basically a long hexadecimal string that obviously that isn't human readable. And so you have to do a little bit more work to get the actual log data out. And so these are when you convert that hexadecimal string to text, you get. Is this more readable? Can you guys read that? Read this. Okay, so basically this is what a log output looks like.
00:06:20.022 - 00:07:03.700, Speaker A: You'll have these index. And so this is at the bottom it says that the name is transfer and it's a type event, and so there's still more details to get out of it. And so this is actually real transaction data from the cryptokitties. And so it's called a Kesec hash. And that's like the hashing protocol used to get these logs. And so it's a transfer event from one address to another and a certain amount. And this, to decode this log, you'll have one more step to do.
00:07:03.700 - 00:07:51.710, Speaker A: We can decode the data from that transfer event by doing a little coding magic, and we get out the type and the name. And then this step here is really important. It's called Eth Abi. Abi is a term you hear a lot. It stands for application binary interface. So basically every smart contract has an ABI where you need to know. Basically on the ethereum blockchain, the smart contracts just live as binary, right? You can buy all them and they're on the ethereum network as binary, but they each have an associated ABI, which is a human readable list of all the different functions and function types of that smart contract.
00:07:51.710 - 00:08:29.754, Speaker A: And so a common thing you have to do is decode that ABI with basically its map. So like every ABI has a specific list of functions and types. And so when you decode the can, it's basically the secret key to know what's going on in a contract. And so this is just decoding that. And then eventually you can finally read the log. It says transfer from one address to another of a certain token type or a token id. And a common thing you'll want to do is set up a website that interacts with users.
00:08:29.754 - 00:09:17.550, Speaker A: And that user will probably through metamask, be sending tokens to you and around transferring. And when your website backend wants to react to that, you'll be watching the Ethereum network for specific logs. So what you would do then is set up basically a search through like bloom filters. It's called. Basically, if you run a full node like geth or parity, or what inferior has done for you is set it up so you can search the entire blockchain for those specific log events and match them. Specific topic. So you only care about transfers to a specific address, like a destination address that you control.
00:09:17.550 - 00:10:18.020, Speaker A: And you'll basically be constantly always listening for new events, and that way your front end can react to them. This is an example of, sorry, I wish the screen was a bit easier, but basically you're running something called east underscore git logs right here. And this is a specific address to watch for and a specific topics to look for. This is hexadecimal code, and it's looking for the entire blockchain from the earliest block to the latest block. And the result of that is on the right, and you get some data, a log index, and the topics that are associated with it, and then the specific transaction hash which corresponds to one transaction in a block. How's that going so far? Any questions so far? Good. All right, cool.
00:10:18.020 - 00:11:13.442, Speaker A: All right, so switching gears a bit, let's go back into ERC twenty s. So you've probably heard of these. It's basically tokens such as die tether bat, basic attention, token reputation with Auger. There's thousands of them because they correspond to a specific token standard called ERC 20. And they're just very easy to create with unique rules as far as their distribution and creation. And this is an example of the solidity code that governs a very simple it's a piece of the solidity code that just sets the total supply of a MyRC 20 token, and that's called the gitter that returns that value. And so typical tokens are maybe easily less than 1000 lines of code.
00:11:13.442 - 00:12:07.538, Speaker A: Pretty much 200 to 500 can define a full ERC 20 token. Here's a list of all the different web three libraries for all the different languages. And so if you have specific expertise coming to Ethereum and in a different language, there's web three libraries like ethers js, like web three js in all these different languages. And so the Javascript is probably what I'd recommend to start with. It has the most users around it and the most community and help out there, but there are people building and using libraries for nearly every language. So I'm putting all these links on our GitHub about Inferior. It's GitHub.com
00:12:07.538 - 00:12:54.190, Speaker A: inferior devrel if you can't read these. But these are basically really good resources for beginners or introductions to learn about, basically how to start hacking. And so consensus has put out two excellent guides at the top. Within Fura, we have a community website for asking any questions. We're always online to answer them. Community infura IO there's subreddits, our EtH dev and our Ethereum, that are really helpful, especially Ethdev, for asking questions and getting help. We have gitter channels that are maybe more advanced.
00:12:54.190 - 00:13:26.942, Speaker A: As you delve into specific aspects of Ethereum, there's tens of specific. So like Ethereum 2.0, like the Lighthouse spec, proof of stake all these different more in depth topics where you can get help with. And then there's two excellent YouTube channels I'd recommend for starting, dapuniversity and freecodecamp.org. These are just excellent. They've been running short video guides for all these things to learn how to start hacking. And there's education at the bottom.
00:13:26.942 - 00:14:04.330, Speaker A: Consensus Academy, coursera and Udemy all have excellent actual certification guides to go through. And these are a bit of wall text. But basically I've put together like a curated list of tutorials on different aspects of front end development, if there's any. I'll probably be available all day to talk in detail about any of these and help out. But basically crypto zombies is a fun one. It's basically design a game and learn solidity. Openzeppelin and Truffle are excellent.
00:14:04.330 - 00:14:58.570, Speaker A: Openzeppelin is basically recommended smart contracts to work with. Truffle is a way to deploy your contracts to either the main net test chains or local test chains. And to learn more about Ethereum logs, I put some links here, talked about Inferra and how we actually index logs off chain and so we can get much better response times and results than if you query your node, which is the default. And one more page. There's guides on angular and react and how to use it with ipfs and ethersjs. For a full in depth guide we have Openlaw. It's basically you go through it and it's a complete Openlaw development dap.
00:14:58.570 - 00:16:00.862, Speaker A: And these final ones there's an in depth guide on how to build a decentralized Reddit with react and embark, which is a really good guide. And the final one, which actually might do a little hack on later today, is a really good guide on how to do a zero knowledge proof so you can actually write solidity contracts and the front end side of it. So basically combine those two and as a user I can prove that I'm part of a set or like a part of a set of users without actually showing or saying which user I am. So it's a bit of mathematical magic, but this is the best guide I've found on it, if that interests you. And again, all these links are@GitHub.com infira Devrel and then I'll go as far as I can today. I think I only have about 5 minutes left and I want to answer some questions too.
00:16:00.862 - 00:16:44.510, Speaker A: But probably the best guide I'd recommend for learning how to write a front end it's this guide here, it builds the Ethereum web wallet and basically it's the full stack. So Ethereum, it works with React and Redux. There's sending ERC 20 tokens, getting the logs using web three js. So ethers js and web three js are fairly equivalent. I'd prefer to use ethers JS, but they're both very good. And so this is basically subscribe to Ethereum events. You get the logs and you react on that in the front end.
00:16:44.510 - 00:17:45.470, Speaker A: And so there's basically this guide here. It uses webpack and the front end side of JavaScript to just build it. And so the full code base is here. You can see it builds a homepage container with the different tokens you care about and has ways to interact with them, including Metamask. I think I'll leave you guys with this specific example. So any front end is going to need a web three provider. There's basically this Etherjest signer where when you go to Inferior IO and sign up, you get the Inferior API key and then you put that into the web three provider step and that is your connection to Ethereum.
00:17:45.470 - 00:19:06.460, Speaker A: And so you'll basically be, when you're doing front end development, you can either be writing new solidity contracts and new solidity code and put smart contracts to the blockchain and then create, and then create a front end that interacts with these contracts, or there's already hundreds of good contracts already out there. So you can basically forget about the solidity development, work off pre existing tokens and contracts such as dai or defi apps and just build purely from the front end side. And so if you do that basically with EthersJs, you'll put in the smart contract address that you want to interact with and it's API. And from there you just basically build a front end app that you don't have to write the solid code yourself, you just put in inferior as your web three provider and you interact with the contracts that way. I think I've only got a couple of minutes left, take probably time for questions here. I'll put up the resources here. There's any questions about those or where to find out specific information, you can ask now or all day.
00:19:06.460 - 00:20:23.152, Speaker A: Inferia is part of consensus and so probably the best consensus resources for beginners is Inferia metamask, which is the browser extension consensus academy has all different guides. And from there it's just a wild branching path to find out which part of Ethereum you want to work with and what hack to build. So there's, so the question is, why do I prefer ethers Js over web three? And there's a couple of things. EthersJs is a much smaller client as far as, like, an NPM install. The main difference is how it handles signing. Basically, every transaction that is relayed through inferior has to be signed by basically, if I'm interacting with my money and my tokens, I have to sign it with my public key, right? Sign it with my private key. Excuse me.
00:20:23.152 - 00:20:58.442, Speaker A: And then that signed message is passed through. And so the way ethers and web three handle the signing is different. And I think ethers is better. And also, just in general, the methods and the code quality and the testing all adds up to be slightly if not significantly better. And we have an audience mic now we've got time for maybe one more question, if you have one. Cool. Thank you for waking up earlier on.
00:20:58.442 - 00:21:10.250, Speaker A: And again, I'll be around all day at the consensus table, or the mythx has a booth up there for in depth, smart contract questions or coding questions. And good luck, everyone. Cheers.
