00:00:01.050 - 00:01:02.590, Speaker A: Most of you know about Solana. It's very fast blockchain. Is it okay? Is it fast? It can process transaction in parallel. The time of finalization is small, but Solana has its own virtual machine and you should create smart contracts with Solana on roughly language and it's complex. At the same time, Ethereum community have created a very useful, very user friendly tool chains for developers and it's very easy to use them. That is why we decided to implement Ethereum virtual machine for Solana and bring capabilities of Ethereum to Solana. So neon Evm is a smart contract for Solana.
00:01:02.590 - 00:02:01.250, Speaker A: It is deployed to Solana cluster and it can process Ethereum transactions. So you have abilities to send Ethereum transactions to Solana and Solana will process them and Solana can process transaction in parallel. And it does the same with our transaction with Ethereum like transactions. I had a plan for today speech to show you live demo how you can create contracts for Solana. But yesterday when I was on my stand, I had a lot of problems with networks. That is why I decided to prepare everything and show you one part live demo on my local stand, and then the second part on the live cluster. I created a video which I recorded tomorrow, today in the morning.
00:02:01.250 - 00:02:58.682, Speaker A: Sorry. So this is demo show how you can use neon EVM and create a solidity contract which will get access to a spell token account. Spell token is the registry of your C 20 tokens on Salana. You create a token, you create accounts on it, and the users can transfer tokens together. So all which I show you, you can find in our documentation. But now I will show how it works in practice. Okay, I created hardhat project and in configuration I use hardcut deploy package.
00:02:58.682 - 00:03:42.540, Speaker A: It helped me to do something more simple. Okay, these two private keys I include in the config to simplify the procedure. These private keys is synchronized with metamask keys. And I have two configuration. One configuration is for local stand, the second configuration is for Devnet. Devnet is a stable version of Solana cluster. It's a testnet for Solana, but it's more stable than Testnet.
00:03:42.540 - 00:04:26.876, Speaker A: So developers in most cases deploy Solana programs on devnet before deploying them to my net. That's it. In sources I have three files. It's solidity contracts. Neonvm has API which you can use to call spell token methods and metaplex methods. You will call them like any precompiled contracts. And I will show you how it looks.
00:04:26.876 - 00:05:48.340, Speaker A: So this file describes spel token interface in solidity it has a lot of methods which will allow you to implement your C 20 interface. For example, it can transfer tokens, it can mint tokens, it can burn tokens, it can approve tokens from one account to another. Also in another file we have interface of metaplex which is provided by Neonavm. Then we have a file with two contracts. One of them is a simple version of ERC 20 tokens. It provides the same methods which you can find in ethereum. It has total supply balance of transfer from and also it has methods to transfer tokens from Ethereum like account to Solana accounts.
00:05:48.340 - 00:07:19.754, Speaker A: Also you can transfer tokens from Solana to neonvm, approve methods and so on. So the next contract allow you mint tokens and it works like enable contract from open Zeppelin. You can mint only by authorized user. So I have a deploy script which will deploy my mitable Spail token account contract to the network which will I choose. And I have a simple script which will mint tokens from to the second account which is listed in my configuration. This account will deploy contract, it will be owner of minter and the second one is destination of of tokens. Okay firstly I will show how it works on local stand.
00:07:19.754 - 00:08:15.100, Speaker A: All these files are available in our repositories so you can check them. In our documentation you can find information how to start local stand for local testing. This local stand contains Solana node, it contains proxy server which provide Ethereum like RPC endpoint. It contains indexer which collect information about completed transaction and so on. And also in this configuration we have faucet and you can use it to get test tokens on the local stand. So I have a metamask, this is my account. I will request spoil token, sorry.
00:08:15.100 - 00:09:22.040, Speaker A: Gas tokens to this account. Sorry. Okay, so I requested 1000 of neon tokens to the balance of account in metamask. And in metamask I see them. Also I can request neon tokens, gas tokens to the second account from metamask. Okay both my accounts has gas tokens. So the next step I will deploy the contract.
00:09:22.040 - 00:11:31.990, Speaker A: So the first step I compile files, then I deploy contracts to the local stand. Okay, something wrong with my configuration. Where is my deploy script? Okay, what is wrong? Oh, let's find the problem place. Okay I have one moment. I had an old deployment history, that is why it wasn't work. Okay, again no gas price. What happens? Maybe I add something in my configuration and I didn't see chain ID localnet.
00:11:31.990 - 00:13:24.008, Speaker A: Oh I forgot, blah blah blah blah. I forgot that I need a network connection to calculate gas price. Let's try to connect to network. Okay, you should wait some time and the gas price should be calculated. Okay, I will restart one service compose. One moment. I forgot about it.
00:13:24.008 - 00:14:12.950, Speaker A: Okay, so let's try again. Why not? Okay, I got gas price. So this is the hash of transaction and the address of spell token account. I'm sorry. Of a spale token which deployed. And this is address of ERC 20 interface to it. For example, I can get transaction received.
00:14:12.950 - 00:15:09.580, Speaker A: I ask about this transaction the public network. One moment please. Solana. So this is the transaction. Let's run mint of tokens on local net. So we have minted neon tokens to the second transaction, to the second account. And let's check that it really happens.
00:15:09.580 - 00:16:04.540, Speaker A: I choose a second account and import. Sorry guys. Okay. My account in metamask has requested additional tokens. Okay, this happens. All these balances are stored on balance of spell token accounts. So you can use it in Solana too.
00:16:04.540 - 00:16:58.710, Speaker A: And small video how it works on the real network. Let's try to check that network is available. Yes, it's available. In quick start you can find information how to connect to Neon EVM. And there you can find that you can import configuration from chainlist. You can connect this to your metamask also. Let's see the explorer.
00:16:58.710 - 00:17:47.590, Speaker A: This is our explorer on live network. And this is Ethereum like transaction which were processed by the Neonavm. And here we can find a hash of Solana transaction inside which this transaction was executed. It's a public explorer for Solana. And for example this transaction transfer several tokens from one account to another account. This is logs of Solana transaction. What happened during this execution all happens on chain.
00:17:47.590 - 00:18:40.360, Speaker A: So I can show it too. One moment. So if you have network, let's request. Let's switch network and request test tokens on our public faucet. You can request test USDC, test sushi and other tokens. All of them are stored on spill token accounts. My account now have nine tokens.
00:18:40.360 - 00:19:35.148, Speaker A: I will request additional ten tokens. Transaction were completed. Okay. Balance in metamask changed. Okay, do you see? So this is a demonstration how it works on existing public testnet. This is deploying of contract to the devnet. This is transaction in block explorer.
00:19:35.148 - 00:20:17.800, Speaker A: And this is deployed transaction. So it is big salana transaction small. They have size 1 kb, about 1 kb when our contract more than one kilobytes. So neon evm writes this big ethereum like transaction into Solana account and then call Neonavm to execute it. Okay, there are a lot of transactions. Let's wait. Something happened, a lot of actions.
00:20:17.800 - 00:21:24.670, Speaker A: Okay, this is mint of tokens. This is registering of token in Metaplex library and so on. So the next step is the minting of tokens. Now I show the receipt from the public network using Ethereum like RPC endpoint. Okay, I am entering the RPC endpoint but I make mistake so it will not return me the receipt. Then I check the configuration. Okay, I found my configuration in metamask and check what is the address of RPC endpoint.
00:21:24.670 - 00:22:20.370, Speaker A: Then I fix the error and you can see the receipt. So the next step is mint tokens to the second account. Okay, let's wait some time. So it happens. It's a symbol of Nerf C 20 token. I got it from the Metaplex registry. It's ethereum like transaction in block explorer and Salana transaction in which this transaction was executed.
00:22:20.370 - 00:23:39.976, Speaker A: So this is the address of ERC 20 token and now I will import this address. Wait some time to get information from our network. So yes, we see 100 test tokens. The next. I meant additional 100 tokens but something wrong. What happens again? Yes, I forgot that I should have neon tokens on the balance. Okay, I request neon tokens, got complete call again so additional transaction I can check the balance of tokens and it was changed.
00:23:39.976 - 00:24:33.000, Speaker A: I got ten gas tokens. So the next step I want to transfer visa spell token from one Ethereum like account to another account by using Metamask. Let's try do it. Okay, I switched to wrong account. It doesn't have required tokens and it was mistake. Okay, transaction wasn't completed. Let's try again.
00:24:33.000 - 00:25:27.660, Speaker A: I will forward demonstration. Let's check. The transaction doesn't exist because again I made mistake. So this transaction should be completed. Both transactions were completed on the live cluster and we see the result of execution. And did I show the balance of tokens? Yes. Okay, so I should check that tokens come to the first account.
00:25:27.660 - 00:26:21.760, Speaker A: Okay, that's it. I think it will be enough because my time is off. So if you have a question, you can ask me. Hi, is there anything in production using Neon? Neon is testnet Neon foundation started early builder program before mainet launch. So if you want you can participate in this activity. The font is enough, is big and so you can earn money. Thank you.
00:26:38.540 - 00:26:47.408, Speaker B: Where are you at in the NFT process? As far as being able to transfer over EvM nfts to Solana, you ask about neonpass?
00:26:47.524 - 00:26:52.364, Speaker A: Yes I didn't hear you NFTs so.
00:26:52.402 - 00:26:59.010, Speaker B: If I have like an NFT and I want to transfer it over to Solana. How easy is that to do on neon, right?
00:27:01.380 - 00:27:13.424, Speaker A: Ask. I'm sorry, I didn't hear. I will try to explain your question. Okay, so you ask about NFT tokens. Is it possible to use it in neon EVM in solidity contracts?
00:27:13.472 - 00:27:28.808, Speaker B: Yes. Yeah. Can I take an NFT program that's already launched on EVM and then deploy it on neon and have that on Solana to where it's interactable? On Solana, like the NFTs I can see, like my phantom wallet, for example.
00:27:28.974 - 00:28:08.690, Speaker A: Okay. Yes, we have API to communicate with the metaplex library, but ERC 721 has another interface and metaplex collections. So we have implemented the same interface like in Ethereum. In this case, we create metadata for each NFT token. And we only have plans to implement the full compatibility with metaplex with other collections because in metaplex you can have a collection of NFT tokens owned by one owner and so on.
00:28:10.300 - 00:28:11.464, Speaker B: Okay, thanks.
00:28:11.582 - 00:28:23.350, Speaker A: Thank you. Okay, that's it. Thank you very much. Have a nice day.
