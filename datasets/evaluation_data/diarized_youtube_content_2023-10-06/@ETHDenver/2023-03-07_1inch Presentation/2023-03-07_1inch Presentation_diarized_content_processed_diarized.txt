00:00:00.170 - 00:00:27.990, Speaker A: But haven't actually jumped in on the technical side or the solidity side. Okay. A little bit closer. Okay. So if you have more experience than that, this will be a lot of review, but you still might take away some tips or something interesting from the presentation. So before we get started, there is going to be a post presentation document. It'll be at this QR code or bit lyetheriumtooling.
00:00:27.990 - 00:01:10.644, Speaker A: You can grab this now. I'll also have it at the end of the presentation as well, so you can grab it then. It's going to be a placeholder right now, but when the presentation is through, I'll publish all of the information on it and that will have kind of a summary of everything I talk about today in the presentation, as well as links to other useful resources or anything else that I found interesting. So I'll leave that up for like ten more seconds and then, yeah, it'll be back later. Okay, so a little bit about me. I'm a software developer of eight years. Most of that was spent in web two, but for the past two years I have been a contributor to the back end and community teams at one inch.
00:01:10.644 - 00:01:54.686, Speaker A: And my first Ethereum conference ever was actually East Denver 2020. Back then, I didn't really know anything besides the high level usage of Ethereum, and I studied it like with podcasts and things like that, but I didn't really know anything about the development side or the community side or anything. So my friends and I decided, let's check out ETH Denver 2020. And we were really blown away by the community, the projects, the passion, and we ended up doing the hackathon while we were there, even though I didn't really know solidity at all and it didn't really work at the end. But I found it interesting and it kind of really influenced where my career path would go after that conference. So that was the inspiration for this talk today, was to create something that would have been useful for me back in 2020 for anybody else who's new to the space today. So an overview.
00:01:54.686 - 00:02:40.610, Speaker A: What we're going to talk about today is we're going to go a little bit about into block explorers. We're going to talk about development environments. We're then going to go on to transaction simulators, and then we'll talk about some useful tutorials that I would like to share. So first off, with block explorers, we're going to look into the state of ontain contracts, and if these contracts are verified, we'll look at their source code, their ABI or application binary interface and their public functions, and we'll talk a little bit about what verified means when we get there. Okay, so the first block explore we're going to look at is probably the most well known one and it is Etherscan. There are others, but this is the one we're going to look at today in the example and that's at Etherscan IO. Hopefully that is big enough.
00:02:40.610 - 00:03:09.718, Speaker A: Hopefully that's big enough. So anyways, this is the home page of Etherscan. There's a lot going on there. Ether's price, the market cap, transactions, summaries about the block, the most recent blocks, the most recent transactions published on the blocks. But we're going to focus on is the search bar at the top and what we're going to do is we're just going to type in the name of a well known contract and that is going to be the Dai stablecoin. So super quick summary on stablecoins. They are tokens on top of Ethereum that try their best to stay pegged to some fiat currency.
00:03:09.718 - 00:03:47.638, Speaker A: In this case, Dai is trying to stay pegged to the US dollar and it is made by the maker foundation or the maker protocol. Not all contracts you want to find on Ethereum can be found through the search feature like this, but Google actually does a pretty good job of finding contracts for you. So you could type in Dai Etherscan here you could find the one inch router by doing this. So if you can't find them directly on a block explorer, Google can sometimes do a really good job of finding these. Or I should say it usually does a really good job of finding these. So once we jump into the DAI contract, we'll see things like the Max supply holders total transactions on here. But what we're interested in today is the source code.
00:03:47.638 - 00:04:37.010, Speaker A: So when developers want the community to know exactly how their contracts work, they can publish the source code to block explorers as well. And that lets you actually view exactly how these contracts work at the solidity level or whatever language they use to publish these contracts. And that can be really useful for understanding contracts as well as debugging. If we scroll a little bit further down in this section of the code, we're in the contracts tab with the code sub tab we'll see the contract ABI and the contract ABI is also really useful for when you're trying to talk to contracts from maybe third party tools or third party libraries. So it knows exactly what the inputs and outputs of all the functions on these contracts are. And we'll have an example later that will actually use the ABI. If we go over one sub tab to the right to the read contract tab, we can see all the publicly available read functions on these contracts.
00:04:37.010 - 00:05:20.210, Speaker A: So right here I just did a quick example with the balance of function on this contract and I plugged in a contract from one of the pools on Uniswap. And you can see at the bottom there, there is a unit 256 value which is a very large number. And that shows us exactly how much Dai is controlled by whatever contract we put in. And this number is really big and that's a nuance of ethereum where the decimal precision is actually metadata on there. So if you want to get a rough approximation of what this value is, you would remove 18 digits on the right to get a somewhat human readable approximation. And just looking at one more example on the read side, we can look at the total supply as well. This is also going to be a really big number and it shows exactly how much Dai is outstanding in total for this contract.
00:05:20.210 - 00:05:50.436, Speaker A: If we go one more tab to the right to write contract, this gives us all of the public write functions as well. So these are going to be ways that you actually send transactions that interact with the contract usually to change state in some way. To do that through Etherscan directly, they do let you connect your web3 wallet to it and then you would post a transaction to metamask or whatever browser wallet you have installed. As I said earlier, there are alternatives. Etherscan is the most well known one. It's also closed source. There are open source alternatives.
00:05:50.436 - 00:06:26.500, Speaker A: Just a couple is blockscout.com and beaconchain. So if Etherscan's down, or if you want to use something more decentralized, you have options there as well. Okay, on to development environments. Development environments we're going to look at today is for writing solidity, compiling solidity, as well as deploying contracts on sandbox environments using a local node as well as on ethereum directly. So the one we're going to look at today is remix, and that's at remix ethereum.org. This is a fully in browser ide and it's usually a great starting place for when you're new to solidity.
00:06:26.500 - 00:07:06.752, Speaker A: So if you go to the website, you get greeted with this main page. And for developers, this is very similar to vs code or Intellij or any other ide you are used to using. There's a bunch of buttons at the top left where you can navigate. The top left one will be the file Explorer view, and then below that we'll look at two others, which is the compiler view and the deployment view. So sticking just on the file Explorer view, we'll see kind of a structure here, a file structure at the top left, and we're going to drill into that a little bit and we'll see a file called one underscorestorage sol. If you go to remix right now, it'll have this example project there available for you as well. So you can just jump in and you'll see the same thing on your page when you go there yourself.
00:07:06.752 - 00:07:35.960, Speaker A: So really quickly we just kind of look at this super simple contract. It shows us what compiler versions this contract is for. It also gives us the contract name, just like a class name in other programming languages. We have a field value called number, which is of type UN 256. And then underneath that we have two functions. One is a write function called store, and one is a read function called retrieve. So other than the color coding, which you've probably already noticed, the id also has a built in compiler, as you would expect.
00:07:35.960 - 00:08:07.108, Speaker A: So I put an at symbol next to the value number and I hit Ctrl s or command s to compile it. And immediately there is a red exclamation mark that kind of shows us what's going on, or that there's a problem with the contract. If we click on that we will see its best guess at what's going on or what's wrong with the contract. In this case it's a pretty easy error to fix, but sometimes they can be pretty bad. But that's true for most compilers as well. If you look over at the left there's a red number one next to one of the buttons. That's the compiler view, the dedicated compiler view.
00:08:07.108 - 00:08:56.456, Speaker A: So we can see at the bottom there's that same error that we had before, which was the issue with the at sign. And if we fix that we can hit Ctrl or command s again, and then also we can just actually select the contract explicitly and hit compile and it'll do the same thing. Okay, going down one more button on the left, we're going to go to the deployment view. What you'll see right away is the environment is the remix vm, and this is a sandbox just for compiling solidity and testing things in isolation. It doesn't have any knowledge of anything else going on on the blockchain. So we'll just go down to the deploy button, make sure that one underscore storage is selected and press deploy and we will see a transaction in the terminal at the bottom, letting us know with the green checkmark that everything went through successfully. And if we wanted to get more details about this particular transaction, we could hit the drop down arrow here.
00:08:56.456 - 00:09:26.348, Speaker A: But we're not going to do that right now. And we will see in the deployed contract section at the bottom left, this contract has now been deployed. So we'll open that up and there will be two buttons there. There will be kind of an orange button that says store and a blue button that says retrieve. And those are going to map to the functions that we went over earlier with this contract. So if we click the retrieve button directly, we'll see at index Zero was a UN 256 value of zero, which is what we would expect. And if we go up and we type in five and then click the store button, we will write that data into the contract.
00:09:26.348 - 00:10:02.732, Speaker A: And if we press retrieve one more time, the index zero variable of type UN 256 is now five. So the contract worked as we expected, in a sandbox environment. So the next thing we might do, let's say the contract might be talking out to the die contract we looked at earlier, and we want to get the total supply of that. Well, we could actually use something called Foundry provider on Remix, and that's going to connect to something that has a lot more information about the blockchain. So really quickly we'll talk about what foundry is. This is going to be a tool that you install on your local computer. It is to make you have a more rich environment for actually testing and developing the tool within.
00:10:02.732 - 00:10:27.504, Speaker A: Foundry that we're going to use here is called Anvil. And that just spins up a local node on your computer that has knowledge of the state of the blockchain and then we can connect to it directly from remix. And we'll talk about this a little bit more in a second. But assuming you had Anvil running on your computer, you could click the foundry provider button. It will give you one more window, kind of giving you a little definition of what Anvil is. And you'll see at the bottom it's trying to connect to localhost 85 45. That's where Anvil would be running.
00:10:27.504 - 00:11:00.540, Speaker A: If you had this set up, you'd press ok and then you would see on the left new count values as well as no more deployed contracts. And that's because you're no longer in the remix VM. You're now talking to your local anvil instance. And from here you could deploy it and you can actually make calls out to the state that you would expect to be on Ethereum or any other EVM chain. And then the last one we're going to look at is injected provider. This says Metamask for me. I don't know if this changes depending on your browser wallet, but if you have in this case it's going to say Metamask for me.
00:11:00.540 - 00:11:35.432, Speaker A: So from here what you're going to do is if you press deploy, it's going to try to connect to whatever network your browser wallet's connected to, and it will give you a summary of what the transaction that's going to be posted to the chain is going to be. And in this case I'm just going to connect straight to Ethereum Mainnet and press ok and post that transaction through Metamask. And then we can look at the transaction summary on Etherscan and it'll give us the address of the contract that's now deployed on Mainnet. So we're not quite done yet. As we talked about a little bit earlier, you still want to verify this. If you want people to be able to see the source code, that's pretty easy. On Etherscan you just press the verify and publish button.
00:11:35.432 - 00:12:07.140, Speaker A: Once you go to your contract page, it will ask you questions about the compiler type, the license type, and then it will also ask for the source code directly. And since this is a single file, it's quite easy to do. And then you put that in, hit submit, and then your contract is officially verified as well. Now, beyond remix, there are a lot of more command line tools and ways you can set up development environments locally that does not actually use your browser at all, or does not use the browser ides at all. The one we talked about briefly is foundry. Foundry has a whole suite of tools. Anvil is just a local node instance, but there's a lot more.
00:12:07.140 - 00:12:56.196, Speaker A: There's other things like Brownie, which would be more for people who are familiar with python environments and want to stay using something more similar to that. There's hard hat truffle and probably more as well, each having their own pros and cons. But I would suggest starting with remix first, and then once you started to do bigger projects or you want to have more tools available to you, start looking into these and seeing which one makes the most sense for you. Next, we're going to talk briefly about transaction simulators. So these are really useful because you can test the outcomes of actual transactions on the blockchain. This can be useful if maybe you're trying to interact with an unfamiliar contract, maybe you're trying to collect an airdrop or trying to do something with your NFT, but you don't know how to read solidity or you do and you still aren't quite sure what the contract does because people can obfuscate that pretty well. You can actually simulate this transaction and see what's going to happen on the other side.
00:12:56.196 - 00:13:36.780, Speaker A: This wouldn't protect against MeV, but malicious contracts, you'd definitely see it if you use a transaction simulator. This could also be useful for wallets you don't control. Maybe it's a wallet with a really large balance that you want to test something on, or maybe it's a multisig and you want to make sure the transaction is going to go through correctly before you get all of the multisig signers to come through and just waste their time on a failed transaction. And then one that I use these a lot for is detailed debugging. They're really useful because they're kind of a visual debugger that lets you step through kind of at your own pace. And if anybody's used a command line debugger, you'll be very happy when you see this. So the tool we're going to look at today is called tenderly.
00:13:36.780 - 00:14:02.280, Speaker A: This is at tenderly Co. And this is their main website. When you go there, if we jump straight down to their simulator button at the left, we're going to jump in here and it will take you to a summary screen of all the simulations you've run. I blurred these out because this is actually my account. Yours will be blank if you first come to this page. And we're just going to jump straight up to the new simulation button at the top right here. Here's kind of the beginning of this process.
00:14:02.280 - 00:14:35.430, Speaker A: We're going to tick use custom contract and we're going to plug in that storage contract we looked earlier that I deployed to Mainnet. So we plug that in here, we skip over the input data value and we go straight to or used fetch contract Abi. Now, if you verify the, and you've waited a while, tenderly will probably pick this up automatically. It doesn't always work. So we're going to pretend it doesn't in this case. And we're actually going to go get the Abi explicitly, so tenderly knows how to interact with this contract. So we'll go to the page where we deployed the contract, we'll go down to the Abi section that we talked about earlier, we're going to copy that and then we're going to plug it right back into this field here and then hit import.
00:14:35.430 - 00:15:15.660, Speaker A: And then sure enough we see the store and retrieve values that we had earlier. So we'll go ahead and we'll click on store, we'll plug in five again and we will go down to the bottom right and click simulate transaction. There are a lot of ways you can customize these transactions on the tenderly, but since this is a simple contract, we'll keep the example as simple as possible and just leave everything as default. Hit simulate transaction and it'll run for a couple of seconds and then you'll see the summary here. So we see a success. And if we actually go up to the state tab on here and we click on that, we can see that the storage contracts field number has changed from zero to five. So we know that the storage thing worked on the actual chain as we expected.
00:15:15.660 - 00:15:53.692, Speaker A: But what if we want to actually see the result of that like we want to retrieve it back from the contract? Well, each simulation by default runs in isolation and then you're back to whatever the base state of the chain is, but they have a feature for that as well called run on fork. You can click this button, it will rerun the transaction again, but on a forked version of the blockchain. And then you can run subsequent transactions that rely on the state from before. So in this case we'll click on new simulation again now that we have a fork where the initial store call was made and we'll fill everything out that we need to. And this time we'll call Retrieve. Now on here we'll see another success message, hopefully. And then we'll also see that the output was at index zero, a value of five.
00:15:53.692 - 00:16:26.436, Speaker A: So the number has been updated to five. We retrieved it and that was successful. Now we can also go from here into the debugger view and this will give us a view of exactly what happened in that transaction. At the top left, once you go into the debugger view, you'll see that there was just one call to retrieve. These actually can get pretty hairy if you are making calls to more complex contracts or more popular contracts, there's usually a lot of subcalls that are happening too. But in this example there's exactly one call and it's to retrieve. If we go over into the actual code view, you'll see it actually highlights the exact line where the retrieve call was made.
00:16:26.436 - 00:17:06.500, Speaker A: And below that we can see information about that call. So which what the function name was called the opcode, the caller that actually made the call, as well as the inputs and outputs at the bottom next to input. You'll see hex here, that's just the function selector, but don't worry about that too much. We see the return value of five, which is the part we care about. Now, again, for people more familiar with richer debuggers, you might be used to seeing all the state that's on a contract when you are going through the debugger tenderly gets pretty close with their evaluate feature. Basically, at any point in time during this transaction simulation, you can kind of click and you can click the evaluate button and you can ask for any information that's actually on the contract. So here we'll just type in number because that's the field that we've been changing and reading so far.
00:17:06.500 - 00:17:36.124, Speaker A: And it says okay, at this point in time, at the entry point of the retrieve call, I'll evaluate number and what I got back was five. And that's what we'd expect because the state of the contract currently is written to five. So this feature works pretty well if you try to do like too complex of an expression. It doesn't work all the time, but it's always worth a try because it's really useful to be able to see the state of the contract. Okay, and then on to the last section, which is tutorials. The first one we're going to talk about is cryptozombies. This is pretty well known at this point and has been around for a while.
00:17:36.124 - 00:17:59.908, Speaker A: It's at cryptozombies IO. It's a very gamified approach to learning how solidity works, which is actually pretty useful and pretty fun. And I think they're still updating this project. I think it's pretty alive. I think they're trying to keep it up to date and make it as useful as possible. If we just jump in and we look at the start course, you can see there's various chapters. They show you what percentage of them you have completed, and if we just click into one, you'll see that it kind of gives you a visual explanation of what you're making.
00:17:59.908 - 00:18:27.272, Speaker A: And then on the left it'll talk more about the specifics of it, including like the math behind it and what your kind of goal is with the solidity. And then it'll give you kind of an integrated development environment. So here it's even more simple than remix. In this case, it's just making sure you're writing the solidity code correctly. So that means that you don't need to worry about compiling, you don't need to worry about deploying, you don't need to worry about any of the dependencies. It takes care of all of that and just makes sure that you're learning the solidity syntax. Okay.
00:18:27.272 - 00:18:52.956, Speaker A: And then the next one we're going to look at is on ethereum.org. They have a community tutorial section here. People from anywhere can submit these tutorials. They add in tags to them, and then they also say how hard they might think it is or anything like that. And you can just browse through by tag and figure out which ones you find interesting. And then the last one is Ethernot, and this is from Openzeppelin. This is more security focused.
00:18:52.956 - 00:19:26.300, Speaker A: You'll be deploying these contracts directly to a testnet, and it will have challenges where you have to go through and either hack or break these contracts in some way. It's kind of like a set of challenges for you. So here's an example. On the very first contract, it's going to have you try to claim ownership of the contract and then reduce its balance to zero. These can actually be pretty tricky, especially if you're newer. So in the accompanying document that I'm going to link again, at the end, there's a tutorial series that will go through and help you through all these. So it'll be much more of an interactive tutorial rather than a series of challenges.
00:19:26.300 - 00:19:55.044, Speaker A: And yeah, that's everything for me. So thank you guys. Here is the links again, if you want to go back and look at the document that kind of summarizes all this, as well as gives you links to all the tools I talked about, tutorials and anything else. And yeah, so I'll hang around and answer any questions anybody has. And yeah, we also have a booth upstairs, so come visit us there if you want to talk to us, too. Thanks. I'll leave this up for a little bit.
00:19:55.044 - 00:19:55.520, Speaker A: Bye.
