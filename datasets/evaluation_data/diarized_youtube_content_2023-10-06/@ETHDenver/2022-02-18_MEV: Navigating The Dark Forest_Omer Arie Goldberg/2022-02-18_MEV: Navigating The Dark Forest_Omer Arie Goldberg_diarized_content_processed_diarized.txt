00:00:04.510 - 00:00:20.450, Speaker A: Cool. Hey, everybody. Good morning. Thank you for joining me on Friday to talk about Mev. It's going to be quick primer and we'll try to get through as much as we can. I know it's lunch coming up, so I'll be outside afterwards for Q A. Cool.
00:00:20.450 - 00:00:47.178, Speaker A: So I'm Omar. I'm the founder of Chaos Labs. A bit about chaos before we jump into Mev way. So Chaos Labs is a cloud platform. What we do is agents and scenario based simulations for DeFi protocols. There are a couple of use cases for this, the main one being testing the economic robustness of different protocols. So we use agents, which is basically the ability to spin up any type of user that you could kind of run into on Mainnet.
00:00:47.178 - 00:01:34.590, Speaker A: It could be malicious activity or just ways that you're expecting for users to interact with the protocol. And then we also have scenarios. Scenarios are more like macro changes to the blockchain environment. You can imagine things like latency on transactions, gas prices, if it's in the context of Ethereum, and recently just finished partnerships with Chainlink and Uniswap, where in the context of the simulation, you have granular control over the return value of the price feeds. This opens a whole world of testing and simulations. One example is the stuff that we're doing for maker, and you want to be able to test that the liquidation and auction mechanisms are working properly. So in the context of the simulation, we can drop the prices of collateral assets and then see that keepers are working, auctions are working, and that everything is working as expected.
00:01:34.590 - 00:02:14.780, Speaker A: The last kind of use case for chaos labs is after you deploy your protocol and you're doing governance updates, you're tweaking parameters. You don't really have a good way to test it today. So using our infrastructure, you can select different parameters for your protocol, run thousands of simulations over different probabilistic distributions, and then get results that are statistically significant for the market conditions that we set. Now for the talk. Okay, so what is Mev? Initially in Flashboys 2.0, MEV was called minor extractable value. Today it's more maximum extractable value, because nowadays it's not only the miners who are benefiting from this.
00:02:14.780 - 00:03:14.320, Speaker A: So ultimately, MeV is really what value can be extracted from reordering the transactions on a given block. This doesn't sound too interesting on the surface, but it is actually very interesting because there's a lot of opportunity here. So when you have control over the transactions in a given block, there's actually a lot of financial upside here. Because you can start benefiting from arbitrazers liquidations in different types of way. Now, mevs usually kind of, when we hear about it in the news, it's kind of like this dark thing that's terrible for Defi and maybe kind of threatening for the future of Ethereum or other chains, but there's actually good sides to it, which is making markets more efficient, closing arbs across dexes and stuff like that. So it's not all bad. Having said that, there is a lot of damage that's done to the network itself and to the overall user experience.
00:03:14.320 - 00:03:52.806, Speaker A: So what kind of damage happens to the network? Essentially, like an MeV? You can't really do it manually anymore. It's mostly bots. You have bots that are competing and bidding and trying to get kind of transactions in very specific orders to be able to financially benefit from this. Now, when there are many bots working across the network, this creates competition and kind of creates this false sense of block room. Ultimately, this can drive up gas prices. And we saw it earlier this year, or around 1218 months ago, when gas prices in Ethereum started spiking extremely significantly. The other thing is an end user.
00:03:52.806 - 00:04:32.146, Speaker A: So if you're coming to, like, a uniswap or any other protocol and trying to execute your trade, you could get sniped by a bot. You pay the gas for the transaction, but it's no longer possible to execute the transaction, and it gets reverted. So, as an end user, you might have to try several transactions, each one having their own gas fees Associated. It's not good. Ux. So how big is this network congestion that we're talking about? So, this graphic is taken from the Flashbots website, where they keep track of MEV extraction over time. And this is the first kind of graphic that you see at the top is gas prices attributed to actions which are meV.
00:04:32.146 - 00:05:17.298, Speaker A: So you see here massive spikes. The massive spikes oftentimes correlate with kind of high market volatility, where there's a lot of opportunity, and they really just make things more expensive for everybody. Beneath that, there's some numbers about basically quantifying the price and funds lost to kind of gas prices as a result of MeV action. Let's quantify it a bit further. So, the numbers here are freaking massive, and this is why we're here. So, just the MeV started being tracked by flashbots, I think, January 1, 2020. So this is definitely an incomplete history of, basically, funds and kind of prices that have gone towards MeV.
00:05:17.298 - 00:05:58.946, Speaker A: Right now, it's a bit over half of a trillion dollars. And, like, you see the graphic here is an aggregate function, so it's always getting larger, larger, and larger. Now, as big as this number seems, it's actually the tip of the iceberg flashbots, which is tracking this, they're only tracking some of the larger protocols. So we have here, like the aaves, the compounds, the uniswaps of the world, and that's just like, a little bit, right? So you can imagine that the real number is much, much larger, especially with the current pace of innovation at DFI. I don't know if we're at 2.0 or 3.0, or maybe after this weekend, 4.0,
00:05:58.946 - 00:06:30.282, Speaker A: but there are a lot of protocols that are missing here. All right, so we kind of, like, painted the picture. Why should we care about MeV, which is cool. Now, let's start to talk a little bit more technically about what MeV actually is under the hood. So you can imagine the following flow. I'll come to the screen because the text is very small on this presenter view. So a following flow would go like this.
00:06:30.282 - 00:07:09.238, Speaker A: A user signs a transaction, and it's broadcasted to the network. In the context of this conversation, we'll focus on Ethereum. Even though MEV exists on every single chain, as soon as the user signs a transaction, the transaction enters the mempool. Now, miners are working to solve some type of puzzle, assuming that we're still in proof of work, and a certain miner has won, so now he has the ability to take transactions out of the mempool and order them in any way they see fit. And this is the part that's really important for most people coming into the space. I think the intuition is that the ordering would be by some type of timestamp, maybe when they were submitted. So it turns out that it's not.
00:07:09.238 - 00:08:05.180, Speaker A: And usually miners act as rational kind of agents or actors in these systems, and they're going to order the transactions in the way that's going to benefit them the most. So one naive approach for this is just gas prices or tips, right? So they can just take whatever's going to pay them the most and be the highest economic incentives and work that way. But things over the years have gotten a little bit more complex and a little bit more basically smarter. Now we see kind of bots or mev searchers collaborating with miners to order transactions in the same way and even splitting fees. There's more on that on the end, but definitely there's a lot more to it than just kind of taking any arbitrary order of transactions and filling a block. So what kind of mev types? This is very general and definitely not exhaustive, but there are three types that we want to look at today. There's front running, there's back running, and there's a sandwich attack.
00:08:05.180 - 00:08:41.074, Speaker A: Let's go into each one and discuss it more. So, front running is just simple. You have these mev searchers, usually bots, that are looking at the mempool, and they're constantly searching for opportunity. Where can they turn a profit? They look at all the transactions there, and when they find something, they execute. So let's just give, like, an example for a little bit of intuition. Say you're trading on some type of Dex on Ethereum, and you place a transaction with some type of slippage fee, for example, that you kind of predefined. Say that on this trade, I'm willing to take a 5% slippage fee.
00:08:41.074 - 00:09:09.514, Speaker A: Okay, this is like a kind of example that does all of them, because in the end, there's a sandwich attack, but the attacker sees how much slippage you're willing to take and starts taking that into consideration, knowing that he can come in before you kind of play with the liquidity in this pool. And as long as that, the slippage stays under 5% overall, you're still going to do it. Okay, so let's think about that slippage for a second. Now let's talk about back running. So, back running is what it sounds like. Front is. Put my transaction in front of your transaction.
00:09:09.514 - 00:10:09.666, Speaker A: Now I'm going to put my transaction in back of your transaction. This one has kind of the ability to be good, mostly when we're talking about the context of arbs, right? So when you're trading in an amm, doesn't matter what function the amm is using, but you make a trade, you're moving the prices in the pool, and you want the prices to be uniform across the market for it to be efficient. So they see an Arb opportunity, and they'll take it here, right after your trade, they'll look at how much you're moving the liquidity in the pool, how prices are trading, how prices are changing, and use that as a way to kind of turn profit as well. Now, we take both front running and back running, and we get a sandwich attack, which is the nicest, because you get everything together in one transaction. So let's go back to kind of the naive example of executing a trade on a dex. Someone sees that you're willing to accept a certain amount of slippage on the trade that you're going to do, let's say 5%. So they'll go and they can place an order that moves that basically causes slippage of 4.99%.
00:10:09.666 - 00:10:37.896, Speaker A: Just do it before you and then sell it right back to you. Okay. So you get here special love. And for them, it's basically a risk free way of turning profit. They already see your transaction in the Mempool. They know how much slippage you're willing to take, and they just make sure that their transactions go before and after you. So we already kind of spoke about the numbers and the scope of how big this is, but now let's kind of take a look what the distribution is.
00:10:37.896 - 00:11:39.768, Speaker A: So where are mev attacks the most prevalent? We've been speaking about trading in dexes, so it's no surprise that most of the mev type of attacks come in the form of Dexes, but they also come in the form of liquidations, mostly on lending protocols. Again, this graphic is not exhaustive, because currently what's being tracked by flashbots is just really the top kind of blue chip defi protocols. But this is another graphic that illustrates a distribution of which kind of protocols are basically, they're tracking the most type of mev action. Now, I think this is like for anyone here who's new to mev and has kind of heard the term, but not really sure what it means, I really recommend reading Dan Robinson's post from paradigm. Ethereum is a dark forest. First of all, it's freaking interesting. It sounds like this guy should be like an action or thrill writer.
00:11:39.768 - 00:12:21.888, Speaker A: So it's written really well. It's very engaging, but it also gives you an example of some of the stuff that we're talking about. So where does the term dark forest come from? There's a Sci-Fi book with the same title. And really the term means in this book that you're in a highly adversarial environment where just being detected, someone knowing that you're there, is almost certain death. So that's like a very kind of dark and kind of morbid analogy, but that's what it feels like when you're to kind of execute transactions in an area that has a lot of mev searchers. All right, so in this blog post, Dan talks about a specific case that they were faced with. Dan is a researcher at paradigm.
00:12:21.888 - 00:12:54.112, Speaker A: Paradigm works closely with Uniswap. One evening he was just browsing the support channels on Uniswap, and then somebody came to him with a question. He said, hey, by mistake, I sent my uni lp tokens into the pair contract. Is there any way I can get them out? He started thinking about it a little bit and said, okay, I think there's actually a way to get it out because of how Univ two is built. Without going too much into the internal implementation of Univ. Two, there's a burn contract. There's a burn function on the interface of every pair contract.
00:12:54.112 - 00:13:18.460, Speaker A: Basically, when you query the person who queries, it can take and receive all of the LP tokens. That seems simple in a naive world, but we're in a world of Mev. So Dan understands this. He says, okay, theoretically, calling that function should be enough. But I know that there are a bunch of people who are watching the mempool. The second they see that I'm trying to do this, I get front run. So let's get a bit more creative.
00:13:18.460 - 00:13:55.352, Speaker A: All right, so why not, if we go a little bit like one layer beneath this, why not call burn directly? There are many reasons. In this blog post, he specifically cites something that's called generalized frontrunners. So you can create kind of mvv strategies that are very, very specific, that work through very, very special heuristics. Another opportunity is sort of like a catch all. We'll create something that's generalized. So, imagine a framework where you're looking at every single transaction in the mempool, and you're running sort of a simulation. You want to see what is the end state of all the counts involved, and if there's profit to turn.
00:13:55.352 - 00:14:10.152, Speaker A: If there's profit to turn. Let me just submit my address. I don't care what protocol it's doing, I don't care what the trade is. I see that I can turn profit here. Let's go. That's what they're worried about. In this case, he's calling a burn function on maybe esoteric kind of pair contract.
00:14:10.152 - 00:14:45.636, Speaker A: He's not worried that somebody's looking at exactly that pool. He's worried that there's generalized bots that are constantly scanning and searching for opportunities. So what is the solution to trying to pull out these LP tokens? So ultimately, these MeV bots, it's just code, right? So if you try something naive, like calling the burn function immediately, maybe that's too naive. Another bot will see this. So maybe we can obfuscate some of the actions, kind of try to confuse the bots. The strategies hopefully aren't. The MEV strategies aren't that advanced.
00:14:45.636 - 00:15:21.168, Speaker A: And with this obfuscation, I'll be able to call the burn function before anybody front runs me and submits the transaction. So now I'll come here so we can kind of like review the code very quickly. Again, this wasn't like the most complex setup. Also, it might be one of the reasons why it didn't work for them, even though we'll get into that later. But they deploy two contracts, right? They deployed a simple getter contract, getter and setter contract. And the idea is that only the person who deployed the contract can make the calls. If not, they're going to be reverted.
00:15:21.168 - 00:15:45.820, Speaker A: And this is where the obfuscation comes in. Right. So they first deploy a getter contract with the deployer's address as only one who's eligible to call the methods on that contract. And then they deploy a setter contract. Okay. Now, when the setter contract is called, when the set method is called, it ultimately activates the getter contract. So this is this level of indirection that they're hoping is going to throw off the bots that are searching for opportunities in the TX pool.
00:15:45.820 - 00:16:19.284, Speaker A: Lastly, after the contracts are deployed, we'll try to submit the set transaction and the get transaction in the same block. So that was the idea. It sounds kind of complicated. Unfortunately, it didn't work for them. Okay, why didn't it work for them? They tried to submit the transactions through infura. Inferra kind of looked at has a bunch of heuristics for trying to predict kind of the state of the chain. I guess, like after things were submitted, saw that this wasn't going to work and the transaction wasn't going through, they got a little bit nervous.
00:16:19.284 - 00:16:35.948, Speaker A: It was late at night. They tried to submit their transactions manually before they could get the LP tokens. This was sniped. The opportunity was lost. We'll go really fast on the last slide. Basically, monsters are real. You hear about the stuff all the time in the news.
00:16:35.948 - 00:17:04.036, Speaker A: It's something different when you come to it face to face. There are a lot of bots, you don't hear as much as you should about them, but the strategies are real and they're getting more advanced on a daily basis. A little bit insights. If you're doing stuff that's super sensitive on chain, maybe don't go through an alchemy or inferra. You might want to have your own node, or at least talk to somebody who has your own node to make sure your transactions don't get blocked. And 30 seconds of shilling. If security, all that stuff is important to you.
00:17:04.036 - 00:17:27.670, Speaker A: If you're deploying mev strategies and looking for kind of an environment to test them and play with them. Talk to us. At chaos Labs, we offer these real world environments and cloud environment where you can fork every blockchain and you have a catalog of agents and scenarios and you can play with all these things before you try them on. Mainet I'll be outside and I won't take away more time. Thank you.
