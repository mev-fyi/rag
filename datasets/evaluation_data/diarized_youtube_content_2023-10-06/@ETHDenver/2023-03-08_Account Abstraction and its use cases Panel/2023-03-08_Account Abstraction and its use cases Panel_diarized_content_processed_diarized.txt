00:00:02.090 - 00:00:35.990, Speaker A: Welcome to East Denver. It's amazing to be here and moderating this panel with amazing panelists. This is on account abstraction. So we have great experts here. I'll let you guys introduce yourselves, but you have from the serum Foundation, Alex from CK sync and Julian from Argent. And maybe we can go from Julian to you and just briefly say what you do on what your project is about and then we'll get to the discussion.
00:00:36.650 - 00:01:03.200, Speaker B: Okay, thank you. So I'm Julian, one of the co founder at Argent. And at Argent, we've been building smart contract wallets since 2018, which is, as we'll discuss a form of account abstraction. And of course, we've been pushing for the account abstraction narrative because for us, it's the dream in a sense, having a chain where our model is native is what we've been hoping for for five years. So very happy to discuss that.
00:01:03.970 - 00:01:48.110, Speaker C: Hello, my name is Alex Gulholski. I'm co founder of ZK Sync, which is the ZK roll up implementing Zkavm to scale Ethereum. And we're extremely excited about account abstraction because we believe that this is the technology that will unlock the next wave of real world adoption with users. So we partnered early with Argent to support something like experience similar to account abstraction as Aksync wide version one. And for ZK sync era, the ZkvM network, we implemented account abstraction natively, largely following the standard AP four three seven, which YaF will introduce.
00:01:49.970 - 00:02:31.678, Speaker D: So I'm your vice from the Ethereum foundation. So my name is Yo Vice and I'm a security researcher, but I've been working on account obstruction for quite a long time. And I'm a co author of ERC of four three seven. I was also supposed to give a talk here right before this panel, but unfortunately it was impossible to find a place on time. So I was going to announce that ERC 43 seven is live on Mainet. Thank you. All right, let's help.
00:02:31.764 - 00:02:50.740, Speaker A: All right. Okay. I'm Camila Russo. I'm the founder of the Defiant, a media platform focusing on Defi and web3. Well, I guess to start, do you want to talk more about this eip and what its significance is?
00:02:51.750 - 00:03:40.740, Speaker D: Yeah, account obstruction is an old idea. It actually is older than Ethereum. And there were many attempts to. So there were many attempts to do it at the protocol level using various eips, and it turned out to be difficult to do it at a protocol level and we needed to start experimenting, so we did it in the form of an ERC 457, which allows us to experiment with account obstruction immediately on any EVM chain, since it doesn't require protocol. So this allows us to start building a decentralized ecosystem with separate mempool and start having account obstruction wallets and experiment with it.
00:03:41.990 - 00:03:53.190, Speaker A: And maybe Alex and Julian, can you talk about what account abstraction does for the end user? Why is it something that we want to implement?
00:03:54.170 - 00:04:34.018, Speaker B: So I think for us, account abstraction is the only way to bring a user experience, a simple user experience to users. As we all know, the user experience of self custody on Ethereum has been very, very complicated, because to interact on chain, you typically need to manage a private key or a seed phrase. We know that this is very complicated. People lose their private key, it gets hacked and so on. So actually being self custodian on Ethereum is very, very complicated. And the reason for that is because the logic has been hard coded in DAVM. So the definition of an account on Ethereum is fully art coded and it has been coupled to designer or this private key.
00:04:34.018 - 00:05:15.786, Speaker B: The idea of account abstraction is basically to break that coupling and enable anyone to basically program the key functionalities of an account. So with account abstraction, your account becomes a smart contract where you can put the logic that you want. So that means that you can use that logic to really build good user experiences. As an example, for example, something we did at argent is pioneering social recovery because we wanted to get rid of seed phrases. And so we find a way, using a smart contractor account abstraction, to let users completely forget about seed phrase and use the concept of social recovery. Something else you can do is do sponsored transactions. A lot of users will come to crypto for a use case, and maybe they just want to have DAi or USDC.
00:05:15.786 - 00:05:50.554, Speaker B: Why should they have ease just to pay transaction fees? So using, again, the logic in your contract, you can delegate the payment to another instance, say the DAP you're interacting to. And so now users can actually use a simple wallet without having to think about transaction keys. But there's also a lot more use cases. We have pioneered ids such as session keys to enable on chain games, to basically not require users to sign every transactions. And I think all these are just the beginning. We are just scratching the surface by making accounts programmable. It's basically a completely new design space for developers.
00:05:50.554 - 00:05:55.040, Speaker B: And so I think there's a lot more use cases that will be built in the coming years.
00:05:59.010 - 00:06:04.660, Speaker A: What about you, Alex? How are you excited to use this new technology?
00:06:05.910 - 00:07:13.000, Speaker C: So for us, Zksync is on a mission to scale Ethereum to the extent of real world, to support real world use cases, to bring hundreds of millions, billions of people, and to scale Ethereum, not just on the throughput level, but with all its values. It's really, really important to keep the values of decentralization, censorship, resistance, self custodiality. And until account abstraction, it was not possible to keep your account both self custodial, fully, truly owned by you, and also usable and compete with the neo banks and web two like experiences. So we see the user experience as one of the key components of bringing crypto to mainstream. And this is why we decided that we're going to support account of traction from day one, from the launch. Zksync era is now live on Mainnet for developers. Builders can deploy applications there and we will soon open the it's actually open for the users, but in some subtle way.
00:07:13.690 - 00:07:14.440, Speaker B: But.
00:07:16.490 - 00:07:53.620, Speaker C: What was important for us is to implement it natively. Unfortunately on Ethereum it's really hard to make protocol changes. So EAP 457 had to do it tangentially without touching the protocol. So they introduced some limitations, some points of centralization. We decided that we want to follow as closely as possible the EAP, but actually make it at the protocol level, so you don't have any centralized sectors involved in producing. And we hope that eventually Ethereum will also embrace this approach. Maybe, Yovki, you can comment on this.
00:07:55.350 - 00:08:43.070, Speaker D: Yes, Erc four, three, seven is definitely not the end, it's just the start. It's the first step. And what we expect to happen is that other layer tools, much like ZK sync done, will also do things at the protocol level. And one day we'll even be able to do this for Ethereum, although this will take time. But the importance of having a standard is that wallet developers will not have to develop for each chain separately. So wallet developers will develop once. It will work the same way everywhere, with feature parity, which allows them to compete on features, on features and flexibility for users, rather than getting fragmented across chains.
00:08:45.050 - 00:08:55.240, Speaker A: So is the end goal for Ethereum to be able to have account abstraction at their protocol level fully in the way that Cksync is implementing it?
00:08:55.690 - 00:09:11.770, Speaker D: Yes. My end goal is to eliminate EOAS, to eliminate externally owned accounts altogether. I think they are bad user experience, bad security, and we need to replace them. And this is just one more step on the way to eliminate.
00:09:13.950 - 00:09:34.100, Speaker A: Mean, does that mean that Ethereum users in the future won't have to? I mean, the way that we interact with Ethereum will completely change. We won't have to remember our seed phrase, it changes my concept of how you use a blockchain in the first place.
00:09:34.710 - 00:10:15.620, Speaker D: Yeah, that is exactly right, because I don't think the next billion users are going to be writing twelve words on a piece of paper. And key management is hard. People don't know how to do it and we can't expect everyone to do it right. So users should be adding devices to an account, they should have devices, they should not have keys, and you should always have a recovery option, just like in your bank account. When you use online banking, you are never worried that if you lose your password, you will lose your bank account. Someone is out there to help you. What we need to do is to have the same user experience of a bank without having to trust a bank, and that's the purpose here.
00:10:16.150 - 00:10:27.298, Speaker A: I love that. The same user experience of a bank without having to trust a bank. And so that means that you'll have just a regular password for Ethereum that you can recover.
00:10:27.474 - 00:11:11.620, Speaker D: So it depends. What's great about account obstruction is that you can change the implementation as you grow. So when you start as a new user, maybe you just want something simple, not even a password, just add a device and have a recovery option. Maybe even use a centralized recovery service that can help you with that. And it's still better than, still better than what we have now. But then as your needs change, maybe you become more accustomed to the blockchain and you also have more value. Then you can start having more features, you can start changing implementation of the account in place with the same account, and then the user experience can change entirely to fit your current needs.
00:11:12.310 - 00:11:19.400, Speaker A: Interesting. And what's the timeline for this? It's of course really hard to say, but what do you think?
00:11:19.770 - 00:12:03.700, Speaker D: So it's possible right now with Erc four three seven. That's the idea. It's not permissioned so anyone can start using it right away now that it's audited by open zeppelin on Mainet. And many wallets are already being built, some of them are right here in the audience. So people are building wallets and you'll be able to start experimenting with this user experience. And then over the next couple of years, when more and more L2s and at some point even layer one will introduce a protocol change, it will become more efficient, it will become cheaper to use, but from user experience standpoint, you can start experiencing right away.
00:12:04.390 - 00:12:30.070, Speaker B: Maybe if I can jump on that. I want to say that it's not that it's available now because of port three three seven. All the features that you can get from account abstraction have been live, for example, with Argent since 2018. Social recovery was in Argent in 2018. Gas abstraction user not paying gas fees has been live in Argent for five years. And today it's been live on Stacknet as well, which is supporting native account abstraction. And it's live on Zksing era.
00:12:30.070 - 00:12:53.620, Speaker B: And I'm actually happy to say that Argent mobile is now supporting Zksing era. So all these benefits, they're available now using 4337, but they are also available on Zksing era on Stacknet and they were available before on smart contract wallet. But the benefit of 4337, as you said, is to bring a standard which we hope will help push that to majority of users. But all these features, they've been there.
00:12:53.990 - 00:13:21.790, Speaker A: Yeah, I was surprised that they were going to be implemented like at layer one level. Super interesting. And from your experience so far, having used all these features so far for years, what are some of the learnings? I don't know. Are users finding it more intuitive? How's the retention?
00:13:24.610 - 00:13:50.342, Speaker B: I think, Arjun, we've demonstrated that this can bring the ultimate user experience. Really. When we started, Arjun, we used to sponsor transaction. There was no seed phrase and there was no transaction fees. So for users it was really like revolute of Venmo and users, they loved it. But of course gas fees went crazy and sponsoring transactions turned out to be not such a good idea. But I think that demonstrates that the user experience was the right one.
00:13:50.342 - 00:14:42.514, Speaker B: The problem is that we were building that on the chain that wasn't really scaling where transactions were very expensive. So that's why we started engaging with Zksync, for example, because we wanted to have a chain that would scale if cheap transaction. And with native account abstraction we could reproduce that same model. Another learning that we've learned, and I think that's a call for the developers in the audience, is that smart contract wallets or account abstraction on a chain that still supports EOA makes smart contract wallet a second class citizen. Because the majority of developers, they're not thinking in terms of smart contract wallet, they're thinking in terms of EOS. And there's a few flows that DAP developers use that are not directly compatible with smart contract wallets. For example, many DApps ask users to sign off chain data just to prove they control the account, their identity, and for that they typically verify that using EC recover.
00:14:42.514 - 00:15:21.490, Speaker B: But smart contracts generally cannot sign transactions. So for smart contract, you need to actually ping the account and say, is this a valid signature? So what we've learned over the past four or five years. Is that smart contract wallet or account abstraction really enables the user experience that we need as an ecosystem to scale to billions of users. But unfortunately, if we do that on a chain that still have voas, there will always be friction, there will always be DAP developers not aware of this new paradigm. And so that will kind of degrade the experience for smart contract wallets. And that's why, as you have said, account abstraction is great, but the ultimate goal is to get rid of Voas. DAP developers shouldn't have to think about what they are programming for.
00:15:21.490 - 00:15:35.350, Speaker B: There should be one easy model to make sure that smart contract accounts are compatible everywhere. And that's why of course we are very excited to have native account abstraction because that makes smart contract wallet the default account on that network.
00:15:37.050 - 00:15:59.230, Speaker A: Alexander for CK sync the main reason for smart contract wallets to use it is it this ability for the wallet itself to take on the gas fees for their users in a way that it doesn't immediately get out of hand, like just very cheaply be able to pay transactions for users?
00:15:59.730 - 00:16:52.446, Speaker C: So this is one use case. We discussed that there will be many use cases. We cannot foresee all of them, but there are certainly some that I am personally very excited about. It doesn't mean that it's only the reason why Zksync is building a lot of traction. We want to enable developers to invent new stuff and come up with greater ideas. But yes, paying fees in any token, not having to bother with what is gas, do I need to swap? I have a friend of mine received 1000 usd, like he was paid by he did some job with someone online, he was paid 1000 USDC and he wanted to send it to his bank account and he was like, how do I do this? Said, well, you need to change it, just send it to an exchange. He said, I tried to send it to an exchange but they didn't have told me like I don't have enough funds, but I have $1,000 there.
00:16:52.446 - 00:17:49.342, Speaker C: Why don't have enough funds? Well, you need some ether to pay for the transaction. I know it told me this. So I tried to swap it this USDC for ETH, but it told me that I need ETH to swap this catch 22 loop. How can you onboard people with this? It's just not possible. But this is but just one aspect. What I'm really really excited about catches my attention is security or this interplay between UX and security. Every time I sign a transaction on chain, whatever small transaction is, I look really carefully in the hex data of what am I signing there? Because you see in your wallet, you're just sending this, you're paying $10 in gas fees for the execution, but you don't really know what's happening under the hood.
00:17:49.342 - 00:18:43.362, Speaker C: Maybe it just takes all of your money, all of your other tokens and sending somewhere else, or your nfts, or just like changing the ownership of your account, et cetera. And with eoas it's impossible to prevent. Your key can do anything. So you have to really guard yourself against doing anything that could be malicious. With account abstraction, you can separate that. First of all, protocols have to be aware of this. If you build things like ERC 20, it's going to be problematic because the UX, I mean, we can solve it as a count abstraction by batching transactions together, but you fundamentally have to do multiple transactions, like one to approve a token, one to actually send them, right? So when the protocols are aware, you can build things in a way that have, for example, daily spend limits, how argent implemented it.
00:18:43.362 - 00:19:44.630, Speaker C: Or you can have something that says if the amount, if the total value that is going to be spent is more than certain amount, then it requires a two fa. It's not enough to send it with your wallet, but you also have to confirm it on some other device or maybe from online. Or generally you can take a cost signer, implement it a lot easier, not through some NPC logic, which is hard to swap keys, et cetera. But someone can be monitoring in real time what you're doing with your transactions, detect fraud in real time and stop transaction from happening and actually prevent the damage. So as Vitalik recently wrote in his post about user experience, good user experience is not about the average use case, it's about the worst use case. It should be reliable and should not be afraid to make a payment, just like you're not afraid to make a payment today with credit card on the Internet. But it was the case in the early days of credit cards on the Internet.
00:19:44.630 - 00:19:52.860, Speaker C: So we need to transition to that. But we need to move faster than the evolution of the Internet. We can learn from all the mistakes of the past.
00:19:54.350 - 00:20:13.662, Speaker A: I think these use cases to improve security are amazing, but does it mean that each specific wallet building with account abstraction would have to implement these different features? Will it depend on what wallet I'm using, whether I have these security measures?
00:20:13.806 - 00:20:37.240, Speaker C: I think it should be standards. We just need to define better standards, assuming that the wallets are now smart and they can contain logic. So now you can say, okay, let us actually, for this transaction, let's define what is the total impact of this transaction is going to be. You can define it as a.
00:20:40.590 - 00:20:41.050, Speaker B: We.
00:20:41.120 - 00:21:31.334, Speaker C: Call it invariance in math or in security programming, you can define an invariance saying like after the execution of these transactions, all of my accounts, all of my balances have to remain the same, except maybe for this balance, right? And then you can execute any code and this is part of your smart contract wallet for the account of x wallet. At the end of the execution, the wallet will look at the balances and if they changed not in a way that you expected, it will just cancel the transaction, right? So the wallets don't have to think about it and you don't have to trust the wallet or any centralized servers to monitor it for you. It will be code immutably deployed on the account you own and you fully control. This is how I imagine that maybe, guys, you can comment more.
00:21:31.532 - 00:22:08.366, Speaker B: Yeah, I mean this is what you can do today, right? You mentioned two Fa, for example, the idea of two FA is very simple because you can program your account, you can add a second key to that account and you can say that that key needs to cosign every transaction. And now you can give that key to a service that you want. And every time you make a transaction, the service will inspect the data. Because of course we human, it's complicated to understand what a transaction will do. Its exadecimal is very very hard. But if you can give that to a machine, that machine can say okay, actually the account you've been interacting, you've been sending money to that person many many times. So this is a known transaction, I'll automatically co sign.
00:22:08.366 - 00:22:44.266, Speaker B: Now suddenly you're trying to send $10,000 to someone you've never interacted with. The service will say, hey, you know what, confirm your identity with a second factor. So that makes it very simple. So all these things can dramatically improve. Something we, I think, haven't mentioned enough is the power of multiples as well. So batching transaction, one of the key problem of Ethereum is that every time you want to do something, you typically need to do many transactions. For example, if you want to swap token on a deck, as you mentioned, you need to approve the token, that's one transaction, wait for it to be mined and then you can finally make your swap.
00:22:44.266 - 00:23:21.740, Speaker B: It's a second or a third transaction. And typically, because that's a terrible ux, people have taken the pattern to approving unlimited amounts so that they don't need to do these steps multiple times. And I think people don't realize, but a lot of people are basically saying to a random contract, you know what, you can take all my tokens when you want, just for the convenience of security. And that has been the standard so far. There was always a trade off between convenience and security. And if you can start to program your account, you no longer need to make a trade off. You can have the best of both worlds, so you can really build the best of web two like experiences without compromising on security.
00:23:21.740 - 00:24:18.640, Speaker B: And so for example, midicode is very important for that because you can batch all your action in one transaction, something that I find interesting. As an example, there are people doing implementing the concept of a shopping cart. So you go typically to an NFT marketplace, instead of selecting one NFT, buying that, I mean approving the token, buying that NFT, you can actually really go shopping, create a shopping cart of the 15 nfts you want to buy, and then in one transaction you can buy all these nfts because your wallet will orchestrate the sequence of execution to make all these interaction happen. So suddenly every interaction can become one click. It doesn't matter if you want to do a crazy complex d five protocol, everything can be one click. And again, this is bringing web two like experiences to web3, which for us is I think the main driver and the main motivation, bringing easy experience without compromising on security.
00:24:20.290 - 00:25:54.282, Speaker D: So batching is indeed the low hanging fruit of improving the execution part of the transaction, of improving what the wallet can do for adapt, but it can go well beyond that. We just need more standards for it so that it will not be done per wallet. For example, you could have a lot of automation, you can have things like recurring payments, where since with account obstruction, we separated the authentication from the execution or the authorization from the execution, which means that you can pre authorize certain things and then you don't need to be the person who actually triggers them. So recurring payments is one simple example where you authorize a merchant to charge you a monthly fee, and then you don't need to sign a transaction every month, your wallet is going to allow them to withdraw it, but it can also do much more complex things. For example, you could set certain conditions such, and you could set conditions in your account such as I want to perform a trade, I want to trade a certain token, but only if the price reaches a certain level. But I don't want to be waiting at my computer until the price is reached, and then send a transaction with an EOA. I would have to, because I need to be the one signing the transaction.
00:25:54.282 - 00:26:35.850, Speaker D: But with account obstruction, I can send a transaction that creates the condition and then adapt, or even it can even be decentralized. The wallet can even incentivize the account, can incentivize anyone like MeV searchers to see that the condition is met and then get compensated for triggering the trade in my account. But they cannot do anything bad with it because all they can do is trigger something that I pre authorized. So all of these use cases, it can really improve DApps in Defi and in other spaces. And none of it is possible without having a counter structure.
00:26:36.910 - 00:27:21.500, Speaker A: This is super interesting and exciting for the future use cases on Ethereum, but I'm wondering, we have a couple of minutes left how these new technologies will interoperate with old dapps. Because right now, when using smart contract wallets, it's great, but it's hard to interact with everything that's out there on ethereum. And that's what makes it just like there's a friction there. So will that be the case going forward with account abstraction? That it's just hard to use dapps that were built before?
00:27:23.710 - 00:28:17.980, Speaker D: So I think Dapps will adjust to benefit from these features. But in order to do that, we need to break a cycle here. We need to make sure that people start using these wallets, start using these wallets more so that DAP developers treat them as first class citizens. And one way to do that is to start giving the best possible user experience right now so that people really want to use these wallets. Then users will ask DApps to add support for it, and Dapps will start also automating things and doing things that were not possible before. So it's not going to happen in a day, but we need to start building in order to make it happen.
00:28:19.150 - 00:28:54.834, Speaker B: And maybe if I can add to that, I think today is a great time to actually make that happen because we see the emergence of L2s. You are right that on l one, on ethereum, there are daps that are there and some of them are not upgradable. And so if they are using the one or two things that prevent using smart contract wallet, it may be hard to make them change. But we are seeing the rise of all the L2s which are kind of standing on the blank page. So I think it's an amazing opportunity to say right now, let's make sure we build daps that are supporting smart contract wallet. And it's actually very simple. There's only two things that are breaking smart contract wallet.
00:28:54.834 - 00:29:29.406, Speaker B: One is the use of EC recover. And so as a DAP developer, if you are using EC recover in your code, just check that you are also using EIP 1271 and for example on Z casing era the compiler will even tell you with a flag you are using EC recover. This is like an anti pattern. Make sure you support smart account abstraction. And the second thing is the use of transaction origin, which is a bad pattern from the start. So as a developer, there's basically two opcodes that you need to prevent in your smart contract and in your Dapps and that's it. So it's not like it's complicated.
00:29:29.406 - 00:29:43.720, Speaker B: So if you're building on a L2, please just check these two things. Make sure you just don't use ecrecovertransaction origin and if you don't do that you will be aa compatible. So I think it's very simple and now that we are moving to L2s is the right time to make that happen.
00:29:45.290 - 00:30:01.200, Speaker A: This went by so quickly, but thanks to the panel, it's a really interesting panel. And yeah, it looks like we'll have a much more usable ethereum and blockchain future with account abstraction and start everyone start building on this technology.
00:30:01.730 - 00:30:02.220, Speaker B: Thank you.
