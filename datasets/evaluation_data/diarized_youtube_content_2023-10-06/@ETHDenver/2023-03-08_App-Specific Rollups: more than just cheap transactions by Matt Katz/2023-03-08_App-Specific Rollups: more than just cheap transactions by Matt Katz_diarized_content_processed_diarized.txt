00:00:00.250 - 00:00:21.678, Speaker A: Okay, excellent. Hey guys, I'm Matt. Sorry about the technical difficulties there. One of the many joys of running Linux on your personal machine is that your computer doesn't work with any of this sort of stuff by default. I'm the founder of Caldera. We are a project that helps people launch their own application specific rollups. But really, this talk is not going to be about my company.
00:00:21.678 - 00:00:50.022, Speaker A: It's just going to be about the rollup space in general. All the possibilities that can be done with roll ups. I think generally there's a common misconception that roll ups are a way to scale Ethereum, or they're a way to get Ethereum chains with cheap transactions. And that's all totally true. But there is so much more that can be done with app specific roll ups, ecosystem specific roll ups. So I thought I'd come here and talk about it. But first, let's talk about the state of roll ups.
00:00:50.022 - 00:01:52.810, Speaker A: How did we actually get to this point? And so, because this is the devtopia, as you guys are all devs, or presumably you are, I'm sure you know that Ethereum is super slow. And if you wanted to quantify the speed of Ethereum in terms of instructions per second, it's about as fast as the Altair 8800, which was launched in 1970, 419 75. It's like actually boomer technology. And unlike with the folks who were running programs on the Altair or the Atari 2600, way back when there might have been running like a single program on Ethereum, you have tens of thousands or hundreds of thousands of smart contracts that are all competing for these scarce computational resources. And that, of course, leads to Ethereum's reputation as being expensive, especially during a bull. I guess this chart is cut off at around mid 2021, which might be a little unfair, but it does serve my point. When you have a fixed amount of supply for block space and computation, and you have varying demand.
00:01:52.810 - 00:03:11.750, Speaker A: And so that means when demand is high, when everybody wants to do things on chain, things get really expensive, right? Things get $20 per transaction, $40 per transaction, depending on what you're doing. And so it was in this environment that the idea of roll ups really came about, right? People were saying, we need a faster, cheaper Ethereum that was aligned with Ethereum, that wasn't a sidechain or some Ethereum killer or some project, some VC backed project that was trying to draw users away from the core ecosystem. People were like, we need what is effectively a side chain or an alternative chain that is aligned with Ethereum. And projects delivered, not all of them are on here, but optimism, arbitrum, Zksync, Starkware, especially those first two, the optimistic roll ups. They've really done a great job at growing the roll up ecosystem, and today the rest is history. We have a little over $6 billion locked up across roll ups in the Ethereum ecosystem, most of which are in arbitrum or optimism. And so these projects really executed well on this idea of a faster, cheaper Ethereum, right? They targeted EVM equivalents, and they actually use Geth, the standard go ethereum client implementation under the hood.
00:03:11.750 - 00:04:02.490, Speaker A: And they also use ETH as the gas token. So the promise of these roll ups is you can bridge over your ETH, and it's just like building on Ethereum back in 2018 2019 when things were really cheap. And of course, they've found amazing product market fit for these roll up protocols. But that's not all there is to roll ups. So let's take a step back and think about what roll ups actually are. I stole this screenshot from Vitalik's blog, but essentially what a rollup is, is it's a blockchain where the canonical state is determined by a contract on Eth mainnet, right? So you have a state route, which is basically like a succinct representation of the entire state of the chain. My balance, your balance, smart contract code, storage in smart contracts.
00:04:02.490 - 00:05:09.242, Speaker A: And you have some sort of off chain execution, the roll up sequencer that updates this state route when transactions are submitted to it, right? So maybe I transfer you five e that will get added to a batch, and then once those batches are processed, a new state route is generated based on that new state. And then that is committed to the Ethereum chain in the form of some storage slot in the roll up contract, or the set of roll up contracts. And so if we zoom out a little bit, this is optimism's architecture. These are the roll up contracts right here, and the sequencer proposer is submitting those state routes. And so you have now the state located on Ethereum, and the only other thing you need is approver or a verifier to hold that sequencer to account, to keep them honest, and to enforce that the sequencer is running those state transitions correctly. And so this is where a lot of the debates in the roll up world come from. It's actually just this piece right here, right? This is where optimistic roll ups versus ZK roll ups.
00:05:09.242 - 00:06:16.222, Speaker A: It's the verification mechanism or the dispute mechanism, what you might not notice here, or what you might have noticed is that nothing in this diagram says you need to run the EVM, right? You have some state transition function, some standard way of processing transactions agreeing upon a new state, and then some way of verifying that that state has been transitioned correctly. But that doesn't necessarily mean that you need to be tied into the EVM, right? So when people say like, roll ups are a cheaper ethereum, it's totally correct. They are, many of which are, I guess, optimism, arbitrum, et cetera. But that's not the full picture. And same thing with people saying roll ups are Ethereum scaled or they're a scaling solution, right? Roll ups in many cases are more performant than Ethereum. But a roll up's core value prop does not necessarily need to be that it's faster or cheaper. The better way or the more complete way to think about rollups are that they're performant chains that are secured by Ethereum, and they could be any type of blockchain.
00:06:16.222 - 00:06:54.994, Speaker A: So that's it. And I wanted to add this quote from Vitalik again. In his endgame blog post, which is coming up on maybe a year and a half old, he talked about a multi roll up future. For know, basically, roll ups are the way that app chains get added to Ethereum and the Ethereum ecosystem. And so it is somewhat complementary. Or it's Ethereum's answer to the cosmos chain vision of having multiple different execution layers that are designed for specific applications. But unlike with Cosmos, where every cosmos chain is sort of siloed, you obviously have some interoperability with IBC, but they each have their own validator set.
00:06:54.994 - 00:07:43.710, Speaker A: Although of course Cosmos is changing that a little bit as well. Roll ups are app chains that are secured by, you know, we need to open up our minds a little bit with the possibilities of roll ups and what can actually be done on them. So I wanted to give a brief overview of some things that are totally possible with roll ups that I'm really excited for that I think we're going to be seeing in the next 2510 years. The first one is diverse vms. So most of the roll ups that exist on Ethereum right now run the EVM. And if you look at the ZK roll up world, actually a lot of them are competing with how closely they can follow the EVM, EVM equivalence versus EVM compatibility, all of those debates. But that doesn't necessarily need to be the case.
00:07:43.710 - 00:09:00.966, Speaker A: And there might be cases where you don't want the EVM at all, or you want to make modifications to the EVM so especially in the optimistic world where it's much easier to construct fraud proofs, it is totally, totally possible to have a Solana VM which is running on Ethereum, interoperates with Ethereum, you can bridge to and from it, but is running Solana programs, and the same thing with move, and the same thing with any other virtual machine that comes out in the future, and potentially even virtual machines that exist in the regular world. You might want to write smart contracts in WASM, or potentially you could even compile some sort of python interpreter down and have a chain that allows people to write smart contracts in Python. The possibilities are totally endless. Kind of in the same vein are custom pre compiles, or what we like to call EVM plus. So of know, most EVM chains, the entire applications are written in solidity, and this works for most things. And I think most developers find solidity relatively ergonomic and useful. There are certain types of things you might want to do where solidity isn't good enough, right? You might want to have some custom logic for a certain type of elliptic curve cryptography, or potentially you want to natively verify some type of zero knowledge proof on chain.
00:09:00.966 - 00:09:52.054, Speaker A: Maybe you need some sort of randomness oracle function that you would rather write in go or rust or webassembly, or leverage the existing libraries in those languages or runtimes. What you could do if you created your own roll up was basically write those core pieces, the things that needed to be absolutely performant. You could write them in a lower level systems language and then add them as a pre compile, and then call them from solidity from your smart contracts. In kind of a different vein, there's also a lot of modes for revenue generation with roll ups on the first order. There's transaction fees and existing roll up runners. Optimism arbitrum already make millions in transaction fees, but if you ran your own roll up, you'd be the person who's taking those fees. Or you could try to undercut those other roll ups.
00:09:52.054 - 00:10:36.310, Speaker A: There are also many other ways you could end up trying to add different fees into the ecosystem to generate sustainable revenue. So you could make money on the bridge, either both ways, or if you wanted to encourage people to bridge into your chain, you could subsidize one way and then take a fee on the other. Maybe some interesting models there. And as well you could run MeV, or you could have a sequencer auction, aka people paying money to determine people bidding on who gets the right to sequence transactions. And you can take that money and put it back in the project or use it to finance a dow or an ecosystem fund or something like that. Another thing as well is early access to eips. When you control that base layer execution layer, you can merge in eips before ethcore devs do.
00:10:36.310 - 00:11:26.038, Speaker A: And so this is really powerful because you would be able to leverage a lot of these features before developers on Ethereum or developers on all these strict EVM equivalents roll ups could do. So I posted ERC or EIP 4337, which is getting a lot of hype right now. Account abstraction. You could totally find some implementation for this. Merge this into your roll ups l two geth, and then get account abstraction out of the box. And I think the really exciting thing about this is that I think we're going to see a ton of roll ups coming into existence that do kind of try to front run Ethereum and these types of improvements, and they'll kind of be like amazing developer sandboxes that allow developers to play with these features before they get merged into eth mainnet. Lastly, also want to touch about gas customizability with a roll up.
00:11:26.038 - 00:12:08.450, Speaker A: A lot of the existing roll ups, they charge gas fees in eTh. That is an implementation detail. You could choose any gas token you wanted, whether it's the gas token for your project, or if you wanted to maximize user experience, you could make it a stable coin like USDC, or you could even offer free transactions, or a certain amount of free transactions per user per day or something like that, or per verified user. You would have total freedom to mess around with the gas implementation, and that can lead to some amazing UX improvements. So those are a few things that I'm really excited about. Also, I was told I'm allowed to shill the company for a few minutes at the end. As I mentioned before, I'm the founder of Caldera.
00:12:08.450 - 00:12:55.134, Speaker A: We're working on making it as easy as possible for people to launch optimistic roll ups and then eventually ZK roll ups in a super customizable manner. Basically what we do is we allow people to pick their data availability layer, where they're settling on whether they want to launch on Ethereum, or if they want to be like an l three on arbitrum, or optimism, or if they want to launch on Polygon avalanche, whatever. They can add the infrastructure they need, they can make some of those customizations I just talked about, and then we'll also help run the node infrastructure. So this is potentially very interesting. If you're trying to build a project and you're finding you're running into a wall with the EVM, or you expect to reach a high amount of scale, or you want to potentially implement some of those customization details that I talked about earlier. Yeah. This is our mission.
00:12:55.134 - 00:13:22.780, Speaker A: We are trying to make interesting, novel web3 applications possible. Again, our goal is to just reduce as many blockers as exists right now in the ethereum ecosystem. So, yeah, if that sounds interesting to you, whether for your project or if you want to work with us, don't hesitate to contact me. Thanks. It I.
