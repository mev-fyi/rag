00:00:06.910 - 00:00:41.100, Speaker A: Thanks, everyone. Very happy to be here. And thank you for showing up so early for this talk. We're going to try and get through some live coding today and a quick overview of how Aztec Connect works. So, yeah, the agenda today, go through the east Denver bounties, an overview of Aztec Connect. Discuss some of the ideas for the hackathon that you can work on. A bit more detail on how the actual layer one, L2 interface works.
00:00:41.100 - 00:01:32.670, Speaker A: And then we're going to attempt to do some live coding and code up a uniswap bridge to interact with layer one uniswap from inside Aztec using Aztec Connect. I want to make it interactive, so if you guys want to ask questions, just stop me and I'll do my best to kind of answer them so we can learn something today. So for those of you who don't know, Aztec is a private roll up on Ethereum. We bring ten times gas savings and privacy to Ethereum. We launched about a year ago with private payments, and we're about to launch Aztec Connect, which is our interface to all of layer one defi. We're thrilled to be sponsoring the hackathon. We have two tracks for kind of our bounties.
00:01:32.670 - 00:02:26.842, Speaker A: Both of them are available for in real life participants and virtual attendees. On the left hand side, we've got privacy enabled dapps. So using our SDK to build kind of new interfaces, things like ZK money, Dow payments, private kind of batch payments to contributors, and on the right hand side, building Aztec connect bridge contracts. So using the interface we're going to discuss today to interact with any l one smart contract from inside Aztec. So let's go into a bit more detail about what Aztec Connect is. It's a private bridge to Ethereum, and it operates as a L2 sitting just below Ethereum. We're a bit different to some of the other l two s because we're focused on users moving their funds to Aztec.
00:02:26.842 - 00:03:15.790, Speaker A: But the protocols stay on l one. We interact with them through a process called d five, pooling, giving privacy and gas savings to users. So some of the highlights, we get about ten to 100 times gas savings depending on which interaction you're doing compared to an l one standard ethereum DFI transaction. It depends on the complexity of the actual smart contracts, but on average, we're seeing about ten to 100 times gas savings. The main benefit the protocols enjoy is that we use layer one liquidity. So we're not moving protocols to l two, we're moving the users, and we're interacting with the protocols on l one directly. This means you can call kind of the $50 billion of liquidity on Uniswap directly from inside Aztec.
00:03:15.790 - 00:04:08.266, Speaker A: And there's great kind of interoperability between protocols that use kind of multiple DFI protocols. So for example, if your DFI protocol uses curve and balancer to do swaps like element, you don't need to move all those protocols to l two. You can just interact with l one directly. In terms of some of the kind of user stats, we're targeting around 8000 gas for private transactions, plus a share of the l transaction cost. If you have 100 users doing a Uniswap transaction, kind of socialize that gas cost, 140,000 gas across 100 users. So you get kind of end to end Uniswap transactions for about 12,000 gas, which is pretty great. The roll up can support around 1000 transactions per block.
00:04:08.266 - 00:04:52.940, Speaker A: And we can interact with up to 32 different smart contracts per roll up. At the moment, we're targeting roll ups every 10 minutes. So for ETh Denver, there's a few things that we've kind of seen through our discord and people have been building or asking us to build. I think the most exciting ones are kind of private governance and private kind of voting. If protocol uses, like on chain governance, you can use aztec connect to vote privately. And with ten to 30 times gas savings. How this actually works is the aztec roll up votes on behalf of all the users who it has tokens for.
00:04:52.940 - 00:05:50.254, Speaker A: And that's something we're really keen to see. Bridges built for maybe a compound governor Bravo integration and a front end that kind of manages proposals and lets people vote using aztec. And on the left hand side, you can also use aztec connect to purchase nfts privately. So users supply ETH to a bridge contract on Aztec and you can purchase nfts on Opensea. And it just looks on chain like the roll up has bought an NFT and you don't know which user has bought it, which is kind of a cool problem when people are kind of doxxing their degen trading accounts, purchasing nfts and linking the two together. Also, we're happy to kind of hack on bridge contracts that are just to popular DFI protocols. Through our grants program, we have about 20 bridges in progress, but there's a lot of protocols that aren't being built right now.
00:05:50.254 - 00:05:59.490, Speaker A: So if you want to build a connector to Aztec, just come and see us at the booth and chat to us and we can figure out the best way to integrate.
00:06:06.170 - 00:06:06.920, Speaker B: It.
00:06:07.610 - 00:06:47.566, Speaker A: Okay, so in terms of the interface and how Aztec connect works. All the interfaces are written in solidity. It's just a layer one smart contract that maps a DFI protocol to a function interface that the roll up contract can understand. And we model DFI or any l one smart contract as an asynchronous token swap where you can pass in two input assets and receive back two output assets. And there's two kind of models for the swap. One happens atomically. So in a roll up block, you could call out to uniswap with ETH and expect back die in the same block.
00:06:47.566 - 00:07:30.290, Speaker A: And there's also an asynchronous flow, which could be useful for limit orders or kind of. We actually use it for the element bridge, where users kind of initiate a DFI transaction in block one, and in block 100, it settles, and users on Aztec get their funds back certain amount of time later. So both of those are possible with the bridge. And we think that this interface really lets you interact with most of DFI. So we're excited to see what everyone builds with it. As a quick example for Uniswap. Actually, before I dive into this, does anyone have any questions on the interface and what's possible with it? Yep.
00:07:30.290 - 00:08:40.218, Speaker A: So the question was, how do we aggregate people together? Yeah, so maybe I can do this. With the uniswap example, users create kind of trade intents or transactions using the Aztec SDK. And instead of kind of sending it to another user on Aztec, you end up sending it to a bridge address, so you can aggregate all transactions which are going to the same bridge address and have the same kind of function parameters. So for a uniswap example, you can aggregate all eth die swaps that have the same slippage. And it's up to kind of the front end and the SDK to kind of set that slippage to get the best batching. It's also up to the user to decide, do they want to kind of wait a certain amount of time to have higher gas savings, or do they want to pay just the full cost of l one if they want to go instantly and kind of avoid batching? The roll up itself does the batching, and it just happens automatically. So if you send a transaction as a user, you kind of always have a chance of being batched, but it depends on how obscure your kind of DFI interaction is.
00:08:40.218 - 00:09:47.390, Speaker A: The common protocols will kind of try and set the fees so that the batch is, like, sane compared to l one traffic. So if we see a protocol has, I don't know, 500 daily deposits a day, on l one, we may set the batch to be an hour and 20 transactions to get kind of reasonable gas savings for the user. Does that make sense? Cool. Anyone else? Okay, cool. So for uniswap, the way this flow works, imagine I've got some shielded eth on Aztec, and I decide I want to swap it on Uniswap, I send a private transaction using the aztec SDK to an aztec node. The input to that transaction is an amount of my shielded eth, and I'm expecting back some ZKDI. So the aztec node, then, based on the fees, decides to create a rollout proof, and it will aggregate transactions together which have similar kind of trade intents or similar going to similar bridge contracts.
00:09:47.390 - 00:10:45.010, Speaker A: And it creates a roll up proof for those transactions, kind of summing up the aggregate value, but keeping the user's identities hidden throughout the process. And then that roll up proof is sent to l one. It's effectively has inside it kind of instructions that allows the aztec roll up contract on l one, which owns all of the users funds, to make a trade with Uniswap directly through your bridge contract. So that trade is kind of on behalf of all the users who did that particular interaction. And because it's a zero knowledge proof, we have kind of ironclad cryptography guarantees that when the trade happens, it's guaranteed that all the users, it's a correct record of events. There's no kind of optimistic roll up delays here. Once the proof is valid on l one, we have the authority to actually transact on behalf of all those users.
00:10:45.010 - 00:11:28.618, Speaker A: So then the roll up sends a transaction out to Uniswap, receives back an amount of die, and this is sent back to the roll up contract, and it's distributed prorata to all the users on Aztec. So if you put in one ETH and I put in nine ETH, I'd get 10% of the proceeds, and you'd get 90% of the proceeds. And that happens trustlessly by the aztec nodes. They're incentivized to do that. And, yeah, the most important part of this is that user identities are hidden throughout. So the privacy set for this transaction is anyone who's ever deposited ETH to the aztec network. You could have been, at the moment, one of about 40,000 people who've deposited ETH to aztec.
00:11:28.618 - 00:11:53.000, Speaker A: And kind of that's just growing every day. So the more DFI interactions we have, the privacy set just grows for this. It's not a privacy set per batch. It's kind of a global privacy set. For the whole system. Okay, so let's move on to some coding. There's an aztec connect Bridges repo, which is at this address.
00:11:53.000 - 00:12:41.270, Speaker A: I'll give people some time to clone this down, and then we can go through the setup and start coding up Uniswap bridge. Oh, sorry. It's fully collateralized in the roll up contract. So when you shield eth, you deposit eth to the aztec roll up contract on l one, and you're given an encrypted utxo note that represents the amount you shielded. So it's not a different token. It's just you're given, like, an encrypted representation of that token that you can spend with aztec proofs. But the roll up contract holds all the tokens for the duration of the time they're inside Aztec.
00:12:41.270 - 00:13:07.680, Speaker A: Yeah. So the question was, would I get my tokens back in a one to one ratio? Yeah, you can always shield back or unshield your assets in a one to one ratio. The only time that there wouldn't be a one to one ratio is if there was a hack and the roll up lost some of its tokens. Any other questions?
00:13:09.970 - 00:13:15.490, Speaker B: Like the anonymity, do you recommend, is there recommendation bridge layer?
00:13:20.790 - 00:14:15.950, Speaker A: It's a good question. So the question was to maximize the anonymity set at the bridge layer, is it useful to use a kind of standardized amount? So when you do a bridge interaction, the kind of privacy set, it's public. How much is being transacted? So let's say I decided to kind of swap 1.696,969 eth on Uniswap. That's likely going to be identifying if at a later date I unshield kind of that amount of eth. Okay, we may not have time to do coding then, but, yeah, so it is useful to kind of restrict the privacy set. Sorry, restrict the amounts to increase the privacy set, but only very large amounts or kind of very high precision amounts can actually be identifying.
00:14:15.950 - 00:14:50.000, Speaker A: And the identifiable action is actually when you leave Aztec, not whilst you're inside Aztec. So if you kind of shielded funds to Aztec, did a load of defi interactions but never left, you'd never be at kind of risk of kind of breaching your privacy. Cool. Has everyone managed to clone the repo? I may just kind of do a quick example of how to actually do this with uniswap. But we've only got 5 minutes, so if people are interested, we can kind of come by the booth. We're at booth M two, which is two floors down. And we can go into a bit more detail.
00:14:50.000 - 00:15:48.350, Speaker A: Cool. So this is a version of the aztec connect bridges repo. We structured it so it uses foundry, which is kind of rust version of solidity devtools. We use it because when you're kind of interacting with lots of l one protocols, it's much easier to fork from main net with this, and you get really good stack traces. So I've made a new folder here called Uniswap, and I've kind of set up a sample convert call with a few input assets. And I haven't implemented any of the code here yet, except the input asset swap when we have a token, and we also expect out a token. So you can see here, it's just like normal coding in solicitity.
00:15:48.350 - 00:17:11.480, Speaker A: We can call the Uniswap interface to swap exact tokens for tokens. The roll up contract will provide the total input value, which is the value that all the users have sent, the aggregate total of all the users who supplied input asset a. And we can use that to kind of do a unisol transaction and to kind of return funds back to the roll up. We just set the output value a of the convert function to the amount we returned back. And we approve those tokens for kind of being claimed by the roll up by just approving the ERC 20 token transfer for the roll up. If I run some of the tests here. 1 second this test is going to fail so far, but you'll be able to see kind of the cool trace of what's happening and kind of it may help people understand kind of the execution flow.
00:17:11.480 - 00:17:39.650, Speaker A: So in our tests, we simulate a roll up being processed. Then the roll up contract calls out to our proxy contract, which will call out to your bridge and then try and do the interaction. In our case, the interaction is failing because we're not returning the correct amount of tokens. But we can go through this later and fix it because I think I'm out of time. Does anyone have any questions? For now, I think we won't get to much more live coding. I would happily take some questions.
00:17:41.860 - 00:17:42.610, Speaker B: All.
00:17:54.300 - 00:18:47.032, Speaker A: Yeah, definitely. So we're working on a private smart contract language called noir. The main difference between that and kind of some of the other languages is we'll have private state variables, private logic. So you'll use noir not necessarily to recreate all DeFi protocols in the early days, but doing stuff like identity management, multi sigs, and kind of anything where you actually need private logic and private state variables. And we're building it because I guess solidity doesn't have private primitives, so the focus of noir is just anything where privacy is like a core principle of your dap. We have it live right now as kind of an alpha language, but it's not actually in the roll up yet. So the next kind of eight to twelve months are us focusing on putting noir in the roll up.
00:18:47.032 - 00:18:55.130, Speaker A: And we call that Aztec three. So if you come back next year, I'll give a talk and explain how it works. Thanks for listening, everyone.
