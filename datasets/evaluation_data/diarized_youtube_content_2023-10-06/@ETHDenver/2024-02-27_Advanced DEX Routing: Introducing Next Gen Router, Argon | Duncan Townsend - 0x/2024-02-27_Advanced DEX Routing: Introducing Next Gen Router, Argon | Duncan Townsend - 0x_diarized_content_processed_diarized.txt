00:00:07.530 - 00:00:53.040, Speaker A: All right. Hello, I am Duncan with Zerox project, and I am here to tell you about advanced Dex routing and Xerox's new router, Argon. And I want to give a big thanks to my colleagues who collaborated with me on this presentation, Andy Bliss, Q. Chang, Kevin Liao, Robert Paluba, and Henry Zhu. Without them, this would not have been possible. Now, is this presentation right for you? Are you degen enough? You should have a decent idea of the answers to these questions that are on screen right now. You should know what gas is, what a swap is, what a Dex is, and hopefully you know that Zerox is a Dex aggregator and that there are many others and we're one of the leading ones.
00:00:53.040 - 00:01:48.270, Speaker A: Now, if you are a little bit more degen, perhaps you know what a private market maker is, and maybe you know what price impact is and what the difference between price impact and slippage is. And if you know those, you're in pretty good shape. But we're going to go one step deeper here. Maybe you know what arbitrage is and why swaps generate MEV, and why, even if you use an MEV blocker, RPC, and you get a refund for the MEV that you generate, that's still bad for you. That's money out of your pocket. And so Argon is designed to keep all of that mev in your wallet, generate as little mev as possible, and give you the best possible price. Why is it necessary to build argon, that next generation Dex aggregation router? It comes down to liquidity, fragmentation.
00:01:48.270 - 00:02:36.110, Speaker A: I bet all of you in the audience could name at least three dexes, maybe five, maybe more. Well, Univ. Four is coming with Denkun, and it's going to make all of that so much worse. And so we need a next generation Dex aggregation router to take optimal advantage of all of that liquidity on chain. And we also want to take advantage of off chain liquidity through those private market makers through RFQ systems. This presentation is going to give you an overview of techniques for routing. And at the beginning, for those of you who like bright colors and pretty images, a comparison between Argon and a bunch of other industry leading DeX aggregation routers.
00:02:36.110 - 00:03:11.410, Speaker A: So by the end of this, you should understand all of these things. If you didn't download my slides already, you should, because I'm not going to talk through these. But you're not going to understand our router implementation. I'm not going to give that away for free. You're probably not going to understand how either of these algorithms work, but you will have the knowledge of those names, of those algorithms, and I'm going to send you a bunch of links if you want to read those and learn more. Some warnings this information is not complete. If you go and code this up, you're going to get wrecked.
00:03:11.410 - 00:03:45.246, Speaker A: I don't want you to get wrecked, so please don't go do that. If you decide to build your own router, this is just a starting point. You're going to have to put in a lot of work if you want to make a router that's as good as ours. Please do. This is just a starting point. Now how can you, as a trader, know that your Dex aggregation router is giving you the best possible price? Now, this swap for a million wrapped BTC to die on our competitors router looks pretty good. Why did I choose wrapped BTC to die? Well, these are big tokens.
00:03:45.246 - 00:04:38.470, Speaker A: They have big market caps, they have lots of juicy liquidity, but there's very little direct liquidity between these two tokens, and that makes it an interesting problem to route. Our competitors router does a pretty good job, but our router is better. When you see a swap like this, that's how you know that the Dex aggregation router that you're using is giving you the best price, is taking optimal advantage of all that on chain liquidity. If you're seeing a route like the one on the left, our competitors route, you're not getting the best possible price. Now, we call this a yarnball swap. Regardless of whether this is what's actually being displayed, if this is what's happening under the hood, you're getting the best price. You also need to have a router that makes good use of RFQ.
00:04:38.470 - 00:05:31.010, Speaker A: RFQ is when the trader requests a quote from a private market maker for a portion of their swap. When you do that, you're moving more of your swap through that off chain liquidity, which means that the remainder that goes through on chain liquidity has lower price impact. You're getting a better price, and sometimes even your whole swap will go through off chain private liquidity, you get lower gas costs and a better price. Our competitor here does not use RFQ in this swap. And so again, at that million dollar wrapped BTC to die swap, we're seeing 75 bits of price impact. It's kind of a lot for this swap. I didn't have a good graphic for what it looks like on our end with RFQ liquidity, but ours is better still even without that RFQ liquidity.
00:05:31.010 - 00:06:02.830, Speaker A: Now, you might be saying Duncan, I recognize that competitor and I know that they have an RFQ system, and that RFQ system is probably going to give them a better price than what you're showing me. Thank you for keeping me honest, but I did look at that. With their RFQ, you only get back ten bits. So our route is still better even though we're not using RFQ. And we also do use RFQ, so it's going to be better still. Just RFQ is also not good enough. Now this is kind of an unusual swap.
00:06:02.830 - 00:06:41.134, Speaker A: This is a million dollars of Ave to Lido and this is our existing routers swap. So you're getting some significant price impact, but it's not the end of the world. This is still a swap that you could do if you really felt like it. But our competitor, who only uses RFQ, nobody is willing to make that swap for you. You do not get to swap today. So you want to use a Dex aggregation router that always gives you a route that always gives you something to compare against, even if it's a weird swap. Now you're asking.
00:06:41.134 - 00:07:36.426, Speaker A: Well, Duncan, why don't you show us the latest and greatest route for that swap? And sure, there it is again. You see yarnball swap, lower price impact, making better use of available on chain liquidity. This is what you should be seeing out of your dex aggregation router. Three hops is the magic number of hops. If your swap goes through three distinct swaps using three distinct sources of liquidity, and involves four distinct tokens, you're probably taking optimal advantage of onchain liquidity. You want to see lots of swaps like that first line from our competitors swap because the sell token may not have good liquidity with the buy token as we saw in that previous slide. The sell token and the intermediate token may not have good liquidity with the buy token.
00:07:36.426 - 00:08:14.458, Speaker A: But if there's some liquidity somewhere, if you go a to b to c to d, you're going to take optimal advantage of onchain liquidity. You need at least four tokens, at least three swaps for complex Dex aggregation routing. And of course, here is this Dydx to USDt swap. Our price impact is better. I'm not sure I would call that good. So maybe that's just better price impact, but that's what it means to take better advantage of available on chain liquidity. Now also, you want your swap to work even when you're not trading a million.
00:08:14.458 - 00:08:44.770, Speaker A: Raise your hands if you're trading a million dollars on chain every week. Okay, this slide is not for you. This slide is for those people who are trading four, five, maybe six figures on chain. When you're trading quantities of that order, the execution gas of your swap has a major impact on the price that you realize. And if you're swapping frequently, that could become a major cost. So you want your router to give you the best swap, even when it's small, even when gas is high. Somebody's minting lots of nfts today.
00:08:44.770 - 00:08:56.646, Speaker A: Gas is high. You really need to make that swap. You still want the best price. Our competitors swap here. This is not a good swap. It costs a lot of gas. The amount out is not very good.
00:08:56.646 - 00:09:34.462, Speaker A: We should not be seeing 8% price impact for a $3,000 swap. This is our swap. You can't really see this on the chart, but not only do we know that you only want to interact with one Dex, even if that means you are getting a little bit less, one or $2 less. But we also know that Univ. Two, the Dex that we're interacting with here is more gas efficient than other dexes, and that saves you more than what you might be losing by not using a more advanced Dex. Okay, so that's what success looks like. How do we achieve that success? Let's take a look at three strategies for routing.
00:09:34.462 - 00:09:56.886, Speaker A: First, with a really bad one, which, in case I didn't say it, it's really bad. Don't do this. But it's really simple. So this is what we're going to start with. First, we're going to generate some disjoint routes. Disjoint in the sense that each potential route doesn't use any of the amms from any of the other routes. And then we're just going to do this loop.
00:09:56.886 - 00:10:19.326, Speaker A: We're going to trade some tokens at the best amm, and we're going to update for price impact. And then we're going to trade some more tokens. And you do that until it's done. And this works. It's not ideal, but it's nice and simple. You can make it aware of gas, and if you're smart, then your routes are going to be smart. But it's a greedy algorithm.
00:10:19.326 - 00:10:47.274, Speaker A: The price is not going to be optimal, and it's only as smart as you are. You want your algorithms to be smarter than you are. You want your algorithms to find things that surprise you. This is not going to find you a yarnball swap, and it's also slow if you're trying to get sub 100 millisecond latency on your router. This is not the way for you. You already saw this one. This route was produced by a router that works approximately like that.
00:10:47.274 - 00:11:15.646, Speaker A: It's not exact, it's close. But moving on from the bad router, let's talk about a slightly more advanced technique, successive shortest path or minimum cost flow. Kevin Wayne, all of his materials, excellent. I recommend you go read them. I can't explain it all here, but let's go a little bit into detail on it. This is pretty similar to the obviously incorrect way. Oh, and by the way, we're going to get into some math.
00:11:15.646 - 00:11:37.846, Speaker A: If you're allergic to math, maybe start looking away. We're going to treat this problem as a graph. We're going to treat the tokens as nodes. We're going to treat the amms as edges. We're going to treat each unit sized chunk of liquidity as its own amm. You get to decide how big that unit is. It affects how fast your algorithm runs.
00:11:37.846 - 00:12:00.210, Speaker A: We'll see that later. And then we set the cost of each edge to the negative logarithm of the price. Why? You need to go read the paper. And then we execute this loop. We run the Bellman Ford algorithm. We delete the shortest path from the graph and then we add it to the swap and do it again. And we do this a lot because we have to do this until the entire swap is consumed.
00:12:00.210 - 00:12:30.938, Speaker A: What's Bellman Ford, you ask? Well, it's this great graph theoretic algorithm for finding the shortest path, which in this case the shortest path is the lowest price impact from the source. That's the sell token to the sync. That's the buy token. It's a dynamic programming algorithm, which means I'm not going to put it up here on screen. And the runtime is theta of v times e, where v and e are these. And remember that e is the number of split amms, the different chunks. So that's big.
00:12:30.938 - 00:12:54.814, Speaker A: And this is why setting that chunk size is important, because this affects the runtime of your algorithm. You want to know how Bellman Ford works? Go read Wikipedia. It's great. Why is this algorithm great? Well, Bellman Ford's really fast. There are lots of optimized techniques out there for doing it. And there are other algorithms that do the same thing that you can use that are going to make it even faster. This works with private market makers.
00:12:54.814 - 00:13:25.150, Speaker A: Big plus. We can take advantage of off chain liquidity. And there's a ton of available literature. It does produce an optimal route, but if there's arbitrage, your algorithm just kind of crashes because Bellman Ford doesn't like it when there are cycles in your graph, and that happens when there's arbitrage and it still can't account for gas. Okay, so let's look at one more. What about convex optimization? These guys, geniuses, absolute goat. Go read their papers.
00:13:25.150 - 00:14:06.700, Speaker A: This involves constant function. Automated market makers constant function, in the sense that there's some constant, like in the case of univ two, that's k, and a function for computing it. In the case of Univ two, that's the balance of token zero times the balance of token one. And k has to only go up. That's what it means for it to be a constant function automated market maker. Now, it turns out that CFAMs are convex, which means that we can apply this technique convex, meaning that there's no token discount, token volume discount. If you're selling one eth, you're going to get a better price than if you're selling ten or if you're selling 100.
00:14:06.700 - 00:14:29.954, Speaker A: And the objective get the most tokens out is a convex objective. And the fees charged by cfamms are also convex. So this is a problem that is really easily adapted to convex optimization. You throw it in the convex solver. Now, for those of you who are really allergic to math, absolutely, look away. Now, this next slide is very math heavy. You can come back later.
00:14:29.954 - 00:15:07.118, Speaker A: I'll let you know when it's time to come back. Given these parameters, the reserves of the amm, the mapping from token addresses, token zero and token one, the amounts that we're going to sell, the amounts that we're going to receive, we're going to constrain our problem like this. We have this network trade vector, which is just the sum of all the token amounts that we're buying and selling. And this equation down here basically says that k is not allowed to go down. That's the rule. And there's this fees parameter in there. And our goal is to maximize U.
00:15:07.118 - 00:15:41.580, Speaker A: U of Psi is our objective. And if we're trying to get the most amount out, it's like that. Now we're done with the math, you can come back. Why is this good? Well, it's applicable to many different types of things that require on chain liquidity. You can have a swap that sells multiple different tokens. You can have a swap that buys multiple different tokens. If you don't care which stablecoin you get, you can have it get you the basket of stablecoins that has the most amount of those stablecoins without caring which is which.
00:15:41.580 - 00:16:08.958, Speaker A: It's also good for rebalancing positions. And this algorithm was designed for extracting arbitrage, so it's very good at that. You also get a price oracle as a side effect. That's pretty cool. Who doesn't want to build their own price oracle? And you do get optimal amount out. Why is this bad? Well, you kind of have to be really smart. You need to know the inner workings of every single amm that you're going to integrate.
00:16:08.958 - 00:16:49.230, Speaker A: You can't use it with pmms because they're not going to tell you the function that they're trading against. And for those constant function automated market makers that have non analytic or cubic or higher order constant functions, your solver might barf. There are some solvers that will do this. Okay, tick based amms also kind of a pain. And gas fees aren't convex, so we can't account for gas. Except there are some techniques that you can use to account for gas, but those are really advanced. But lastly you say Duncan and Jarris and owl, they wrote a second paper that solves all of those problems.
00:16:49.230 - 00:17:24.790, Speaker A: And you're right, it does. It doesn't solve all of them. It still can't account for gas and it is much faster. But I'm out of time and I can't really explain this to you anymore, but I hope you enjoyed, I hope you learned about why gas aware optimal Dex plus RFQ aggregation is a hard problem. I hope that you see that our router improves on the state of the art our competitors routers. And then we talked about two techniques. Minimum cost flow, also called successive shortest path for routing, and convex optimization as a technique for routing, including its dual decomposition variant.
00:17:24.790 - 00:17:35.770, Speaker A: We're here all the time. You want to talk to us? You want to learn more about zero x? Scan this QR, seek us out. Join our abiddlethon. Thank you very much for listening.
