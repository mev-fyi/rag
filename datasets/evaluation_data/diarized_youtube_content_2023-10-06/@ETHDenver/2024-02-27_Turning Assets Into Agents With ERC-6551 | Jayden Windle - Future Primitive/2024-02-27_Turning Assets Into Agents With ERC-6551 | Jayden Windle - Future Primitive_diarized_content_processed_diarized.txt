00:00:07.530 - 00:00:32.726, Speaker A: Thanks, y'all, for being here. This is a talk called turning assets into agents. With ERC six five one, we're going to talk a little bit about what assets are, what agents are, why they're important, and how ERc six five one interacts with that. So, I'm Jaden. I'm the CTO at future Primitive, where we've been building ERC 6551 and tooling on top of it for the better part of a year. One of the co authors of the standard. And I spent basically all my time working on this for the last little while.
00:00:32.726 - 00:00:49.366, Speaker A: So excited to share what we've been working on. Now, how many of you own one of these or owned one of these in the past? Any hands? Yeah. Okay. A few, right? This is a feature phone. They were great. You could make calls, you could do texts. They had some features that the manufacturer included.
00:00:49.366 - 00:01:05.018, Speaker A: You could play snake. You might have a calculator or a calendar. They're kind of like a landline, but better. You could bring it with you. How many of you have one of these in your pocket right now? Feature phone, anyone? No? I didn't think so. You probably have something like this in your pocket. You have a smartphone in your pocket.
00:01:05.018 - 00:01:44.058, Speaker A: And smartphones were just infinitely better than feature phones. They brought a bunch of new features that really just changed how we interact with the world around us. You got Internet access, so you weren't just limited by calling and texting your friends and family. You could interact with all of the information out there on the Internet. And instead of just being left with the features that the manufacturer created for you, you now had this whole ecosystem of third party apps. Anybody who had an idea could build it for your device. We just saw this proliferation of what you could do with a smartphone, and it was a whole new way of interacting, right? It wasn't just buttons on a keypad, it was taps and swipes and pinch and zoom.
00:01:44.058 - 00:02:16.502, Speaker A: A new way of interacting with a device that just brought a whole new way of using it. It was just fundamentally better. Now, if feature phones were the past and smartphones are the present, what might be coming next? What's the next big leap in interacting with the Internet or interacting with the world around us? I think we're starting to see some really interesting science. I don't know if any of you have played with any of these. This is the humane AI pin, the rabbit r one device, AI device and chat. GPT's voice interface. These are really cool.
00:02:16.502 - 00:02:42.590, Speaker A: You can just talk to or interact with these devices, and they're kind of like agents. They do things on their own. You ask, chat, GPT, something, it just tells you. It doesn't make you go click a button to do something, it gives you the information you need. You tell the humane pin to take a photo and it just does. You tell rabbit to book you flights and it just does all on its own. And they adapt to their environment, right? It's not programming individual button clicks and presses.
00:02:42.590 - 00:03:06.854, Speaker A: It will go and find the site and book the flights for you. And you're not interacting with taps and swipes anymore. You're interacting at the level of voice and ideas. It's a new way of interacting with devices, a new way of interacting with the world around us. And you can see kind of the tech tree progression here, right? You start with an object that has some utility. It just generally makes life better. It's more convenient than what we had before.
00:03:06.854 - 00:03:31.598, Speaker A: And then you add programmability. You let people build applications for it and you just have this cambrian explosion of what you can do with it. And then you let it start doing things on its own. You give it agency so that it can take actions for you. This is kind of the natural progression of things over time. Now, what does any of this have to do with NFTs? We're at a crypto conference. We're talking about NFT standards at the base level.
00:03:31.598 - 00:03:47.806, Speaker A: NFTs are Internet native objects. They're just like the objects we interact with in the world around us every day. And they're great. You can own them, you can transfer them. Those are the two things that are standardized in ERC 721. They might have some utility that the creator of the NFT has defined for you. For example, cryptokitties.
00:03:47.806 - 00:04:01.910, Speaker A: You could breed them. That's super cool. And it's just better than a database. It's better than your data being in Facebook's database. You own it with your own private keys. It's an object you own. But nfts are kind of in their feature phone era.
00:04:01.910 - 00:04:44.006, Speaker A: You're still locked into the utility that a creator provides you. There's not many applications beyond that. And what about programmability? What about the ability to extend an NFT with new ways of doing things? What about agency? What about the ability to act on its own or interact with the world on its own? We don't really have that. And it was never part of the standard or the original design of nfts. And about a year ago, we've spent our whole company's lifetime building crazy experimental NFT applications. And we realized that there's a really neat way you can enable both programmability and agency for nfts. Last year at East Denver, we launched ERC six five one and we introduced the world to the concept of a token bound account.
00:04:44.006 - 00:05:19.022, Speaker A: This means that every NFT has its very own wallet, and that goes for existing nfts like cryptokitties and the NFT collection that launches tomorrow as soon as an NFT exists. It comes with a unique wallet, a unique identity. This means every NFT can own assets, eth ERc twenty s, eleven fifty five s. Anything that can be owned by an Ethereum wallet, your NFT can own too. It also means your NFT can execute transactions. Any DAP or protocol that you as a user interact with, your NFT can now interact with as well. This allows your NFT to create its own history, its own identity, its own agency.
00:05:19.022 - 00:05:52.270, Speaker A: It can act as its own being. Now for the technical folks in the house, this is how it works under the hood. ERC six five one defines a registry contract. This contract is unowned, it's non upgradable, and it's deployed the same address on every Ethereum chain. This registry reserves address space for nfts. It ensures that every single NFT has a unique address assigned to it. And anyone can create the smart contract at that address by calling into the registry, providing some information, including the chain id address and token id of the NFT.
00:05:52.270 - 00:06:32.566, Speaker A: This means that every NFT inherits those capabilities. And how does it bind an account to an NFT? It actually embeds that data into the bytecode so that permanently on the blockchain the nature of that account has the NFT data in it. This means that any application your account interacts with knows it's a TBA interacting with it, and it knows which NFT is taking the actions. This opens up a bunch of possibilities for you to build really cool applications with nfts. And we spent the past year or so working on developer tooling and uis and just things to make it easier to build. With 6551, you don't have to worry about bytecode structures. You can just work with a really nice SDK and a really nice UI.
00:06:32.566 - 00:06:51.486, Speaker A: Now let me do a quick demo of how this works. If you go tokenbound.org, you can play with your tokenbound accounts for your NFT. So this is an NFT I own. Let's see if I can get the demo to work here. There we go. This is an NFT I own, and this is its token bound account address.
00:06:51.486 - 00:07:23.078, Speaker A: If I go to OpenSea, I can paste in that address and I can see the contents of this Ethereum wallet. Now, Opensea has no idea this is an NFT. It just knows this is an Ethereum wallet and it owns some assets. So it just works with anything on Ethereum that works with accounts, which is pretty much anything. But because it's a wallet, I can connect to opensea as my NFT and execute any action on OpenSea. So I just went to wallet connect and you'll see it'll prompt me to sign with the holder wallet of that NFT. So I sign on behalf of my NFT and now I'm using Opensea as an NFT.
00:07:23.078 - 00:08:05.366, Speaker A: You can see that I can go and I can list this NFT, right? Any action I can take in the Dap I can now take as my NFT so I can go and I can list it for sale. I put in all the details and it'll prompt me to do this transaction. This is really cool. This means NFTs can just participate in ethereum like everybody else can. Same with something like uniswap. If I take my tokenbound account and I go to uniswap, I can connect my wallet and this will let me swap ethereum that is stored in my token bound account just the same as I would if I was a normal ethereum user. Token bount accounts are a medium for turning NFTs into ethereum users into agents, and this enables tons of possibilities for developers who want to let NFTs do more things.
00:08:05.366 - 00:08:40.354, Speaker A: It also opens up a ton of possibilities for you as an NFT owner. There's no code here, right? You're just doing normal ethereum transactions, but you're doing it as your NFT. If you're a developer and you want to start working with this, we have an SDK. It's just as simple as pulling in VM or wagmeet or anything else. It's one call to get the token amount account of an NFT, it's another to execute transactions from it just the same way you're used to if you were interacting with a wallet. Now, there's still some unsolved problems with this. If we go back to the feature phone example, when I want to go from the US to Canada, I can just bring my phone with me.
00:08:40.354 - 00:09:11.510, Speaker A: It just works, right? I might have to pay some data for roaming, I might have to get a calling card or a Sim card, but by and large I just bring my phone with me. It's not quite the same for nfTs. NFTs are by nature single chain assets. They live on one ethereum chain. So if I want to bring it to another chain with me or do something with my NFT on another chain, I have to interact with a bridge, which costs gas money. I have to worry about finality and bridge risk. It messes with the provenance of the NFT because it's not just as simple as me bringing my NFT with me if I'm going to bridge an NFT.
00:09:11.510 - 00:09:53.740, Speaker A: If the NFT has native integrations with a bridge, which is usually only newer nfTs, I can burn the NFT and mint a clone on the chain I want to use. So I would burn the NFT on Mainnet, mint a clone of the NFT on polygon, and then go about my business, use my NFT, and if I wanted to bring it back, I would get the NFT remainted back to me. But what about all of those nfts that predate bridge integrations? In that case, you're putting your very valuable asset into a bridge contract with everybody else's NFT. If that bridge ever gets hacked, your asset is gone. And then you're minting a clone on the layer two chain. So you get into the situation where you're tracking which clone is the real one. Where is the NFT actually live if it's not on the origin chain? Because the origin NFT still exists, but now you've got a clone, if you bridge it two or three times, it's hard to keep track of where it is.
00:09:53.740 - 00:11:05.630, Speaker A: What if instead of moving your NFT from chain to chain, your NFT just had an identity that lived across every chain at the same time? What if your NFT was just like a wallet where you can use your metamask wallet on any chain you want to? What if your NFT was the same? That's what we've done with token bound accounts. If I own a noun on Ethereum and I have the token bound account, zero, x, one, two, three, that same token bound account exists on any Ethereum chain at the same address, and I can use it just like a normal wallet. So if I want to play a game on Polygon or trade meme coins on base, my NFT can own those tokens on base without the NFT ever having to change chains. If I wanted to own a lens handle on polygon, same thing. All the dapps you integrate with as a wallet, you can use as your NFT. Now, we launched this about a year ago. We've been working really steadily on improving bridge support, and right now we have support for Ethereum to Polygon and Ethereum to op stack chains, which is nice, but in a lot of cases you actually want to go from destination chains, from layer twos like Polygon back to Ethereum, and we don't support that right now, but really excited to announce that we're partnering with layer zero to make token bound accounts work on any chain supported by layer zero by default.
00:11:05.630 - 00:11:47.150, Speaker A: This means that your NFT on Ethereum can just use any chain it wants to. Anytime you use the tokenbound site to the token bound SDK, all you're doing is specifying which chain you want to execute the transaction on, and all the details about how that works happen under the hood. So if you're a user, you don't have to worry about interacting with the bridges or which chain does my NFT exist on. You just worry about doing things as your NFT. So I want to do a transaction on Ethereum, or, sorry, on linear. My token bound account would call from ethereum to linear, and then the receiving contract on linear will know that it comes from zero, x one, two, three, my token bound account. The receiving contract on linear knows which NFT is calling into it, and knows that whoever initiated that call must own the NFT.
00:11:47.150 - 00:12:16.120, Speaker A: This also works for destination chains, so polygon can execute transactions on blasts. Or if you wanted to go from any other chain to any other chain, your NFT, no matter which chain it lives on, can execute actions on any other chain. Now, this is going to be live in the next little bit in March. If you're at the hackathon and want to play around with this, please come see me. We'd love to get you hooked up with it. We're going to do an announcement in the next couple of days about this specifically and some docs for it. There's still a couple of things that are missing here, though.
00:12:16.120 - 00:12:37.822, Speaker A: We're still maintaining a list of trusted bridges, which is not great. We want to get this fully decentralized. Right now we're whitelisting bridges one at a time. It also means that every time you want to do a transaction, you get a transaction pop up. You have to click that sign transaction or submit transaction button. And it also means it only sports nfTs, right? It's kind of part of tokenbound account so far is it's NFT native. Your NFt has an account.
00:12:37.822 - 00:13:05.906, Speaker A: But what if we want to move beyond those limitations? We're working on v four of the token bound protocol right now. And there's a couple of really key improvements. The first is we're going to be integrating layer zero natively into the token bound account. This means no more centralized whitelist of bridges that we manage. This means you as the NFT owner get to bring your own bridge. You get to choose your security model, choose the way you want messages ferried from your origin chain of your NFT to destination chains. This means that it's fully decentralized.
00:13:05.906 - 00:13:40.412, Speaker A: You don't have to rely on us to maintain this. You as the NFT owner have full control over it. If you picture the idea that I was saying before of agents, right, of interacting with things like humane or the rabbit r one, you just kind of ask it to do something and it does it. And tbas right now aren't really like that. If I went to my TBA and said, hey, can you collect the most popular Zora NFTs from this week? My NFT has no idea how to interpret that, right? It just knows how to interpret transaction calling. And even if it didn't know how to interpret it, it would still ask me to sign a bunch of messages. I would get a bunch of pop ups.
00:13:40.412 - 00:14:10.796, Speaker A: Every time it wants to do an on chain transaction, I get a transaction pop up and I have to sign it. It requires the owners to approve it. It requires a human in the loop. And if we're going to move into this future where it's just agents, where I'm just saying what I want to do and it happens, it's really difficult. If I have to manually approve everything, it's kind of the equivalent of a button click on a smartphone. How do we move from this to a model that's more agent like where I just say I want this thing to happen and it happens. This can be a pretty big difference between tokenbound v three and v four.
00:14:10.796 - 00:14:55.192, Speaker A: It's kind of a giant step. We're introducing this concept of an auth extension. It's a way for NFT owners and NFT creators to change how the token bound account interprets, who can use it and where it can be used. So instead of the owner having to always manually sign a transaction to say, hey, go and mint me this thing, the NFT owner can delegate an auth extension and say, hey, I'm going to delegate an auth extension that knows how to interpret my random requests for Zora mints and is able to execute those on chain without prompting me for a signature every time. And this kind of removes the human in the loop it's kind of like power of attorney. It's giving access to your token bound account to a new contract. Now this is tied to the owner, right? If I'm the owner and I set an auth extension and then I transfer the NFT to someone else, it's a blank slate for them.
00:14:55.192 - 00:15:30.776, Speaker A: But as long as I own the NFT, I have full control over the auth extensions. And if I'm an NFT creator, I want to build a really cool game where I don't want transactions popping up every 10 seconds. I can set auth extension in an auth extension registry that works across chains and say that hey, for all of the NFTs in this collection, our game is going to be able to interact with those tbas. It's going to be able to manage them on behalf of the user in the game. By minting this NFT, you trust us, the NFT owner, to give this game to you. And so our game logic can automatically execute things on a token bound account. You know, this means that you don't have to sign transactions every time.
00:15:30.776 - 00:15:59.344, Speaker A: You can just tell your NFT to do things or just interact with that dap or interact with that game and things just happen. But it's your NFT doing the actions, your NFT acting as an agent, which is just really different from how we interact with NFTs today. Now, of course, it's all self custodial. So if you, the owner of the NFT, don't trust the NFT creator, which is kind of a common thing, you can say, okay, I don't want to trust any of the NFT creator auth extensions. I just want to manage it self custodially. That's totally fine. So that's what's coming in tokenbound V four.
00:15:59.344 - 00:16:43.096, Speaker A: We're introducing the concept of auth extensions that lets you extend token bound account authentication beyond just signing a transaction every time. It lets both the NFT owner and the NFT creator define custom logic that determines who can use the token bound account. And it's got native bridging built in so you don't have to rely on us to maintain a whitelist of bridges. You can just choose your security model and choose how you want these transactions to go from chain to chain, all while maintaining the tokenbound account, the singular identity that exists for your NFT on every chain, and maintaining the ease of use and the ease of programmability of this paradigm. Now, there's one more thing that's really cool with auth extensions right now. Token bound accounts are ERC 721 only. So it's an NFT that's non fungible.
00:16:43.096 - 00:17:42.160, Speaker A: There's only one copy, and if it's a non fungible token, it has a token bound account automatically and you can use it. But one of the things we've gotten a lot of requests for is like what about ERC 1155s? Those are nfTs, right? Kind of. They're semifungible, but they can be non fungible. What about my custom token type that I developed just for my game that I really want to use? What about this new token standard that launched last week that's not ERC 721? Auth extensions provide a solution to that problem and allow Token mount accounts to represent any asset on chain, using the same approach of giving a unique identity to an asset that's capable of owning assets and taking transactions. This means that you can write auth extensions to support ERC 20 bound token bound accounts, or ERC 69 nine bound token bound accounts, or game bound token bound accounts. Anything you can identify with a chain id, contract address, and token id you can tie to an account. This goes a little bit beyond the ERC six five one standard, but there's some really cool possibilities here, especially if you're doing kind of novel things with NFTs.
00:17:42.160 - 00:18:19.820, Speaker A: So if you look at it over the course of where we've been in NFTs and where we're going, NFTs started as an asset, as an object. You own self custodial, you can own it, you can trade it. That was really great. It solved the objects being stored in centralized databases. It gives you an object you own and you control yourself, and that led to a lot of really cool applications, right? Token gating is a great example because you own an asset, you can token gate a community or Tokengate access to something, so you can build some applications on top of nfts. But you're still pretty limited with tokenbound accounts, and specifically with token bound accounts that are cross chain enabled and that have auth extensions. We've solved a couple of more problems.
00:18:19.820 - 00:19:08.520, Speaker A: We've solved the problem of NFT identity across chains, an NFT identity that just works like you expect a wallet to work. We've also solved the problem of utility. The entirety of the Ethereum ecosystem is now the utility of your NFT. You can do whatever you want, just like you as a user can do anything you want. In the Ethereum ecosystem, nobody has to build anything for token amount accounts or ERC six five one. It just works out of the box, because everything in Ethereum supports accounts. And then if we look forward to NFTs as agents, so going from just objects with utility to objects that are programmable, to objects that can act on their own, with auth extensions, we have the ability to let NFTs do things themselves, to let NFTs really be this representation of a unique identity on chain that can take its own actions and do anything it wants to, even though it's still owned by a user.
00:19:08.520 - 00:19:42.856, Speaker A: And the amount of ways that can be integrated into our experiences on chain applications on chain, how we interact with the Ethereum ecosystem are hopefully as limitless as the smartphone was compared to the feature phone. You can do anything you want to with an NFT now, and it's really easy to integrate with. So that's a quick history of what we've been building with 6551, what we've been building with Tokenbat accounts, and what's coming down the pipe. If you are interested in chatting about any of this, or building with any of the tools, or working on six, five, one of the hackathon, our team is all in these blue jackets. You can come find us. We'd be happy to help you integrate with it. And we're really excited for this.
00:19:42.856 - 00:20:04.700, Speaker A: We're really excited to partner with Layer Zero, which bring NFT token bound accounts across chain. And we're really excited for all the chains, all the changes coming forth in the future. So I have to leave you with one thing. I think agents are the future. I think this experience of interacting with agents is going to be really cool, and hopefully token mount accounts can help with that. Thanks y'all for coming. Bye.
