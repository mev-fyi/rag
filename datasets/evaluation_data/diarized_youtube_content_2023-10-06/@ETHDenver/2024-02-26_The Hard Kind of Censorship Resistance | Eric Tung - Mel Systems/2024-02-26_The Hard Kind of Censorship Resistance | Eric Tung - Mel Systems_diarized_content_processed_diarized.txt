00:00:07.770 - 00:00:35.122, Speaker A: Hi. Hi. The topic of my talk is the hard kind of censorship resistance. So who am I? My name is Eric and I am the creator and maintainer of GEF, an open source circumvention tool. So a tool. You can think of it as a VPN for places like China that actually have a lot of technology to block VPNs. So it's like an adversarial VPN.
00:00:35.122 - 00:01:32.970, Speaker A: It has more than 500k daily users, mostly from places like Iran and China, where other vpns don't work. For the past few years, I've also been working on Mel, which is a new clean slate blockchain optimized to interoperate with off chain code through light clients. That's somewhat of a mouthful, but the idea is that it's a blockchain designed to be consumed through light clients by offchain code and give their security to offchain code, and not primarily be consumed by smart contracts. So this talk will have two overall parts. First, I want to talk about two different kinds of censorship resistance. There's the kind that we always talk about in crypto, but there's also a much trickier to solve kind that I will want to call ban resistance. And then we'll also look at how can we make web3 ban resistance, which turns out to be a lot harder than doing it in traditional systems like vpns.
00:01:32.970 - 00:02:38.190, Speaker A: So usually in web3, when we talk about censorship resistance, we mean something like the protocol can't discriminate against particular use cases like you can't co opt ethereum to freeze accounts, taint coins, or damage the blockchain's neutrality. At least we hope we can't, right? That's what we say when we say we want ethereum to be censorship resistant. And this is the usual sense that we use the word in the crypto web3 world, we mean a property of the protocol, that its integrity is protected, that everything inside it is fungible. And we actually know how to solve this pretty well. The nice thing is that decentralization plus encryption is pretty much a silver bullet for this sort of thing. Decentralization means there's no central point of control, hopefully, and privacy techniques such as Zk things and encryption reduce visibility by these nodes, et cetera, into actually what users are doing. And the idea is that you can't censor transactions if you can't even know what's going on on the blockchain.
00:02:38.190 - 00:03:44.062, Speaker A: But there's actually a completely different kind of censorship resistance that's also really important, which is actually a more common notion of the word censorship resistance in the privacy tools and censorship circumvention tool space, which I'm also very familiar with. This kind of censorship resistance means that the entire protocol resists censorship that denies usage of the protocol. So to use Ethereum as an example, we're not talking about nodes censoring transactions or validators censoring some smart contracts. We're talking about nation states and isps shutting down or blocking access to, let's say, all of ethereum traffic. And so, for clarity, just so that it's not confusing, I'll call this kind of censorship resistance, ban resistance, since it's resistance against banning the protocol itself. And there is a whole area of research into this, producing tools like Tor, pluggable transports, steganography, et cetera. But the interesting thing is that band resistance is not actually a common goal in web3 projects.
00:03:44.062 - 00:04:29.986, Speaker A: Even the most, like privacy focused web3 projects are easily blocked in places like China. And that's very unfortunate, because a large fraction of Internet users actually use networks where ban resistance is important, and perhaps even more important than our usual notion of censorship resistance. And these adversaries are really common, like China, like Iran, like Russia, et cetera. And they use these powers a lot to interfere with new protocols. So how do we actually achieve ban resistance? Well, the first thing to know is that it's actually possible. There is this common misconception that if you want your thing to work in China, it's just like a security by obscurity game, and you can't defeat the chinese firewall. That's not true.
00:04:29.986 - 00:05:13.710, Speaker A: We actually have good methods of achieving strong band resistance. However, they are all rather imperfect. It's definitely not as mature as our solutions for censorship resistance. And the worst thing about this is that all the current methods are hopelessly centralized. And this is really scary, because we actually want ban resistance for decentralized apps. It's a little hard to explain what I mean by hopelessly centralized. So let's just look at a concrete example, which is the usual way, state of the art circumvention tools, sensors of resistant vpns, basically, how do they work? That includes Tor's Snowflake project.
00:05:13.710 - 00:06:02.234, Speaker A: That includes my own project, Gef. It includes other projects like Lantern. They basically all follow this architecture. I don't think there's a kind of name for this architecture or design pattern, so I'm just going to call it Snowflake style bootstrapping. But the way this works is that we first have a broker, and what a broker is that it's a central server that's accessible through a transfer protocol that has a property known as collateral freedom. What does collateral freedom mean? It means that if you want to block that service, you have to block a lot of other innocent services and cause a lot of collateral damage. So one example would be, let's say you have a GitHub repo, and you push code to that repo to upload it to the server, and you pull code from that repo to download it from the server.
00:06:02.234 - 00:06:40.266, Speaker A: And the server is on the other side looking at the same repo. In this case, it's really hard to block access to the server without blocking access to GitHub, which will ruin a lot of other people's days. And the interesting thing is that the broker doesn't need to be very fast, right. This transport can be really clunky and difficult to use. But the idea is that we now have this unblockable broker that cannot be blocked without massive collateral damage. The broker then gives different users, different proxy servers or VPN servers or whatever nodes you want. And this means that if you're the bad guy, you can't just talk to the broker, get the list of all the servers and block everything.
00:06:40.266 - 00:07:19.910, Speaker A: The list of servers you get will be. The different list of servers will be different from the list of the servers that your victim gets. So you're only going to be blocking yourself, not anybody else. And finally, the users connect to these proxies with obfuscated protocols. What this just means is that if you're the bad guy and you are the ISP, simply by looking at the packets, you cannot detect that. Let's say this looks like Tor, so you can't block the central bootstrapping point. You can't list the servers, and you also can't detect the traffic by their protocol signature, and thus you have band resistance.
00:07:19.910 - 00:08:10.406, Speaker A: This is like an illustration from Tor's website on how Snowflake works with the broker, the client in the little bubble, which is like China basically, and getting a list of snowflake proxies and then using those to get to the destination. Now, just from that description, we already see this is like inherently centralized and web3 incompatible, so to speak. Well, the broker, first of all, has to be trusted. It knows everything. It can betray everybody to the sensor. And not only is that the case, we also rely on external web two services like GitHub for collateral freedom. The idea is that you have things like GitHub, that one, they're too big to block, and two, they're actually not under the control of the sensor.
00:08:10.406 - 00:08:53.218, Speaker A: So the sensor cannot tell GitHub to block this repo. And this is something that's true for China and Iran. That's not generally true. This is a very specific case that sometimes happens. And overall, this is very much not in alignment with web3 goals of trustlessness. We don't want to just imagine that the world outside of China is trusted and we can just trust GitHub and Amazon or, and so, so far we have a pretty bleak picture. We see that censorship resistance against protocol, internal discrimination, the usual sense we use the word, is achievable through decentralization cryptography.
00:08:53.218 - 00:10:25.570, Speaker A: Lots of projects do this pretty well, but censorship resistance against banning the protocol is really hard to reconcile with decentralization. And we looked at a specific example to see how difficult that is. But actually making decentralized networks band resistance is really important because when we talk about sensor resistant web3, we really mean stuff like user autonomy, economic freedom, et cetera. But all these things mean nothing if the system that supports it, the access to that system, can be arbitrarily denied to people. And more interestingly, threats of banning a protocol can also subvert internal censorship resistance, like the one we usually talk about in web3. What if somebody says to a project, please remove your privacy features, or we will unlist you from exchanges, or we'll block all your traffic from China? Then perhaps the internal censorship resistance of that protocol is not that secure either. So how can we build a decentralized system that has a ban resistance? Well, my first idea was, can we build decentralized collateral freedom? Can we make a decentralized protocol have the sort of social dynamics of something like GitHub or Amazon Cloudfront, where blocking this one protocol means breaking a ton of innocent apps? This initially sounds really attractive, right? Because first of all, we all want popularity and mass adoption of web3 here.
00:10:25.570 - 00:11:27.218, Speaker A: It actually helps fan resistance rather than conflicting with it. We don't need to stay under the radar. And even if this one protocol is super slow and clunky, let's say only bitcoin makes this, maybe we can bootstrap from this like we do in Snowflake and get composable band resistance for everybody else. The unfortunate thing is that I don't think this is likely to work. There are two main problems. First of all is that, yes, maybe if bitcoin really makes it, and every single government thinks that it cannot ban bitcoin, sure, but how do you get to that scale without somebody killing you while you're still growing? And the other more subtle point is that for a lot of protocols, like cryptocurrency protocols, the sensor can block the good part of the protocol that's actually censorship resistant, while minimizing collateral damage. Let's say you have a world where you still can use Ethereum, but you have to use custodial wallets, you have to use approved rpcs.
00:11:27.218 - 00:12:10.280, Speaker A: And something like the great firewall of China makes sure that this is enforced by banning other traffic off the Internet. Well, in that case, the collateral damage would actually be pretty small. Most of the ecosystem would still work, except the few things that the sensor doesn't like. So instead of collateral freedom, I decided to go another direction, which is decentralized information asymmetry. Remember back in the snowflake design, we had this broker that gave every person different servers? Can we replicate this? Every user sees different servers. Part of Snowflake in a decentralized network. And the really interesting thing is that if you have an invite only peer to peer network, that is possible.
00:12:10.280 - 00:12:47.090, Speaker A: So just as a very simple toy example, imagine every user connected to a few friends using obfuscated protocols. So you can't detect these connections by looking at the packets. And we actually have pretty mature technology for doing this. And users only know their friends in the protocol. They cannot ask their friends to tell them about their friends, and they never learn anything more about the network. Users can only join by being invited by people, and then messages can be broadcasted with gossip. So you have a topology, something like this, where every node has a few friend neighbors.
00:12:47.090 - 00:13:31.210, Speaker A: But if you're the green node there, this is all you ever get to know about the network. So even if you are evil, you can only blacklist those three nodes. And the damage you can cause to the rest of the network by cooperating with a sensor is very limited. And this is really band resistance, because sensors can't find nodes by looking at packets, and sensors can also not enumerate the nodes. That's the name of a project I was working on. But you can't enumerate the nodes because you can only see the immediate neighbors, and you have to fool every node to manually friend you for you to block them. So this is enough to run broadcast networks like blockchains.
00:13:31.210 - 00:14:27.518, Speaker A: This is already quite interesting, this design, although there are obviously two problems, broadcast doesn't let you run most interesting things. It pretty much only lets you run blockchains. It's very inefficient for stuff like actually talking to a web server. Also incentives and scaling, right? Like imagine you're in this friend to friend network, there's no reason why you would add more friends, because all you're doing is increasing the chance that you give your information away to somebody you don't trust, who works with the sensors, and then you get kicked off the network in China. So you have this incentive problem where everybody's interest is in not growing the network, and this obviously doesn't. So how can we extend this to a general purpose network? It actually turns out that it's possible to do so. You can actually efficiently route two way communication, not just gossip.
00:14:27.518 - 00:15:18.770, Speaker A: The solution is that you can actually gossip a global routing table without the IP addresses of the nodes, so that every node has a good picture of where to send packets to get to that particular node. You can also add Nim like mixednet features to improve privacy and actually improve like, network internal censorship resistance. The first kind we talked about, you want the nodes in the network not to be able to censor each other. And most importantly, you can actually add incentives. You can incentivize nodes to actually find and maintain peering relationships with trustworthy friends. And this makes scaling possible. If I know somebody who where the profit I get from peering with that person on the network is greater than the potential loss from that person actually working with the government and blocking me, then I will actually be incentivized to grow the network.
00:15:18.770 - 00:16:05.758, Speaker A: So I am actually working on such a general purpose band resistance network layer called Air Rendal, from a character in Tolkien's legendarium. So what is an air rendal? It's an experimental peer to peer communication protocol designed to be the first strongly band resistant decentralized network. So it uses this sort of friend to friend information asymmetry system that I discussed. It has privacy goals similar to NIM or ITP. It has an API similar to the Internet. So you have addresses, you send packets to other addresses, and it has a really simple incentive system based on if you send traffic, you just pay your immediate friend who handles the traffic. This is inspired by how you pay for bandwidth on the Internet.
00:16:05.758 - 00:16:48.554, Speaker A: You pay your ISP and your ISP pays their isps. And this is also a foundational protocol in the larger project which I'm working on, which is called Mel. So Mel is a blockchain. But part of the mel vision is that the composability happens off chain, not on chain. And you want this ecosystem of composable network protocols that judiciously use blockchain like clients to secure themselves, and they don't run on the blockchain. So in Aaron Rendell's case, we just use the blockchain for incentives and anti spam, and there are no smart contracts other than that. And Air Rendell Mean is composable with any network app that needs band resistance because it has the API of the Internet.
00:16:48.554 - 00:17:18.614, Speaker A: It's not really like a mel ecosystem project because that doesn't really exist. The Mel project is really about building blocks that any Internet app can compose with. So the current status of Erarendel is that it's open source, it's in early public alpha. Most things other than the incentive system are done. We already have a few dozen volunteer nodes. A lot of them actually come from places like China and Iran. And the obfuscation does work.
00:17:18.614 - 00:18:11.830, Speaker A: The traffic is still flowing. We eventually want to integrate error Rendal as it back into my other project, GEF, which is a currently centralized circumvention tool with a large user base. And we want this to be a kind of experiment to deploy the first large scale peer to peer network that's dark and band resistance to ISP level sensors. And we also want air Rendell to not just be like this project that me and my small team at Mal works on. We want it to be something that has a lot of community input because it's such a composable piece. It has the API of the Internet. So you can find our docs at Docs Arrentel network and you might want to help out if you're interested in anything related to protocol obfuscation, mixnets, payment channels or state channels or anything related to decentralized networks and band resistance.
00:18:11.830 - 00:18:22.320, Speaker A: So yeah, that's our website and GitHub and Discord. And thank you guys for coming to my talk. I'll be round if you have any questions. Thank you so much.
