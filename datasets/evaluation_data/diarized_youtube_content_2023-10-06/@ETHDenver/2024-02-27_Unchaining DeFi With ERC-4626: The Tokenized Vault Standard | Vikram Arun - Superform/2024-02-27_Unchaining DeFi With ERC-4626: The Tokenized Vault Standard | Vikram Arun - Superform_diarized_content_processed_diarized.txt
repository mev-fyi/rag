00:00:07.850 - 00:01:07.640, Speaker A: Hey, everybody. My name is Vikram, and I'm one of the co founders at Superform and a contributor at the 4626 lines. And today we'll be talking to you guys about the new token standard, ERC 4626, and potential use cases and some of the other stuff that we've been doing around it. So, as far as what we're going to be covering in this workshop, we're going to talk about why ERC 4626 came up and what its role is in DFI. We'll go into a technical deep dive into the standard covering the different functions and specifications behind it, and then we'll move into development tips and considerations, followed by some q A. And then there's actually. We can show you guys an end to end deployment example of actually deploying a vault and doing things with it on chain.
00:01:07.640 - 00:01:21.330, Speaker A: And if there are any questions through this, it's meant to be a workshop, so feel free to just jump in if you have questions. The Q A there is just to have a designated time for it. But anytime you guys want to jump in.
00:01:24.600 - 00:01:25.350, Speaker B: Cool.
00:01:26.040 - 00:02:31.200, Speaker A: So, if we think about what Defi was trying to do, what Defi is trying to do, it's turning capital on chain into something more through smart contracts. And the idea that capital can be made efficient by anybody, anywhere is a really powerful statement. And previously, blockchains could only be used for storing money. We've standardized things like ERC 20 token transfers, and using blockchains to store and move value. But the actual process of making money has not been something that's been standardized. And that's really what ERC 4626 attempts to do, is standardize that arbitrary money making logic that makes those legos work, to turn money into more money. So, a little bit of history with why ERC 4626 came up in the context of DFI.
00:02:31.200 - 00:04:04.412, Speaker A: If we think back DFI summer days, DFI TvL, sitting just under a couple of billion dollars, had this massive spike over the next year and a half. And in the beginning of 2022, we were sitting in a time where there were different yield implementations on 20 different chains. Liquidity was extremely fragmented, and there wasn't really any way that people saw forward for kind of tying all this stuff together. So, together, some of the founders of Urine and Faye and some of the other leading D five protocols at the time, proposed EIP 4626. And in May and March of 2022, ERC 4626 was finalized and caused that massive dump in DFI TVL. And over the next two years, we've been building 4626 vaults there have been over 2000 plus vaults deployed, and over two and a half billion dollars in native TVL in those vaults with much more addressable through wrapper contracts, and firmly believe that what we're seeing now is really the advance of a standardized DFI. And that'll take applications to much higher heights than they did last cycle.
00:04:04.412 - 00:05:33.500, Speaker A: That's really exciting. So going back to what I said earlier on 4626, standardizing DeFi's core behavior, this is really the power of what the standard provides. And it's that it turns this arbitrary money making logic, which could be anything, it could be a yield aggregator, a lender, a lending strategy, any automated lp strategy, liquid staking, it turns that into a vault contract that standardizes how money goes into the vault and how money leaves the vault. So the process of money in is something that ERC 466 standardizes in deposit and mint, and to get money out of the vault that standardized through redeem and withdraw. And those four functions really make up the core of how we can think of any capital moving into these strategies on chain, and that itself can be anything but generally deposit assets to get shares, redeem shares, get assets that's applicable toward any yield strategy that we see in DeFi now. Yeah, so just going back again to why that standardization is important, if we look at what the biggest issues right now in DeFi are, I think that if we were to pull you guys, you'd probably say something very similar to this. It's that DeFi is pretty insecure for how much TVL it has.
00:05:33.500 - 00:06:12.150, Speaker A: There's a lot of hacks. It's very hard to tell if something's secure or not. Even after it has multiple audits, all kinds of testing. It's just the ability for us to judge and create. Tooling around custom yield products is not scalable. And we want to make it easier for new protocols to launch securely. And that's really where 4626 comes in, is it provides a base layer for those protocols to adapt to build from, so they can build more secure, more composable, and just better applications.
00:06:12.150 - 00:07:12.370, Speaker A: On the composability side, you guys have all seen this, where custom adapters are being built everywhere in DFI, and that becomes kind of a closed source thing. But 4626 allows all that work to be done, to be done in the open, and that's really powerful. And then on the speed side, applications have gotten so complicated that the ability for applications to be built on top and manually integrate each one of these protocols also gets really tough. And that's also lengthened development times for these new applications. So 4626 is really that building block so that developers can focus on what makes DFI DFI, and that's making money. And if your strategy can make money, that's fantastic. And it'll be more secure on top of a standard like ERC 4626.
00:07:12.370 - 00:07:54.280, Speaker A: And hopefully that focus can give more time toward actually building what matters. And the last thing there is, standards have historically, in crypto, always been how we really get to the next level of mass adoption, whether it's ERC twenty s or ERC 721. That's how each of those kind of caught wind in its own right. And I think that 466 can enable safer and more permissionless applications to be built on top. So again, it's just about building on top and building forward rather than sideways. And that's why serenization here is a big deal.
00:07:57.170 - 00:07:57.920, Speaker B: Cool.
00:07:58.290 - 00:08:56.950, Speaker A: So just jumping into a little bit more about how 4626 works, had mentioned this diagram here of money goes in through deposit and mint, and then money comes out through redeem and withdraw. We'll be breaking this up into three sections. Getting money in, getting money out, and then other important functions that are useful for other vault functions. So getting money into vaults, this is a process essentially of exchanging underlying assets for the vaults, for vault shares. So you can kind of think of this asset. To get money into vaults, you start with assets, and each individual vault will have one particular asset. So a vault could have, for example, USDC as the underlying a vault, when it implements deposit, would be.
00:08:56.950 - 00:09:28.450, Speaker A: We call that, it's more of like a market order. So a user will deposit those USDC assets to get shares. And on the other side you have. I'm not sure if you guys can see my cursor if I move around, can you? Okay, cool. I'll start using this. And then on the other side you have limit orders, which is like mint. And that is effectively saying that, hey, I have these assets and I'm looking to get a determined amount of shares.
00:09:28.450 - 00:10:13.326, Speaker A: So that's why this can be thought of as a market order, because it's just get me however many shares versus mint is, I only want 100 shares. I'm willing to pay whatever assets it is to get that. So the condition here for a deposit to be successful would be two things. One is that the assets being deposited is less than what the vault defines as the max deposit. So the max deposit can be set on a per user level, and that could increment differently depending on who's depositing. But the assets being deposited always have to be less than that max deposit number or the deposit would revert. Similarly, the preview functions.
00:10:13.326 - 00:11:02.162, Speaker A: So preview deposit, for example, is used as the lower bound for what can be accepted out of a vault. So the amount of shares out of a vault must always be greater than what was determined through preview deposit. So you can kind of think of these two as gating functions. The deposit would not go through if, if it was greater than max deposit, and it would revert if not enough shares were given back. And once that's successful, we emit a deposit. So we successfully received shares for four assets, and that's the end of the deposit flow. On the mint side, again, mint is a limit order.
00:11:02.162 - 00:11:54.594, Speaker A: So it's saying I want 100 shares of the vault token, I'm willing to pay whatever USDC, whatever the asset is for it. So the two conditions here that would apply would be making sure that the amount of shares that I'm requesting is not greater than the amount that I'm allowed to be minted. If it was, that would revert. And the second thing would be that the number of assets that will be taken from the user, whoever's depositing into that vault should not be greater than what the preview mint number was. And the reason why that's needed is because it'd be weird if, let's say I requested 100 shares and preview Mint told me oh, I'm only going to take 50 USDC from your wallet. But then I actually put it on chain and took 55. That's an issue.
00:11:54.594 - 00:12:47.410, Speaker A: So that always has to stay true, is that the number of assets taken from the user has to be less than preview mint. The function signatures are here, pretty much the high level of it is that deposit and mint deposit assets redeem and get shares. But the difference is that deposit will take in assets as parameter versus mint. That takes in shares as parameter, and one is a set defined amount of shares that you're receiving. Some advanced, just some notes here, which we'll come back to in wrapping up the technical flow is the asset must be one predefined ERC 20 token. So this can't change or anything. It can't be multiple assets.
00:12:47.410 - 00:13:11.210, Speaker A: And if a vault is capped or paused, if there's anything that would cause a deposit or mint to revert, that should be reflected in these two conditions here. It shouldn't be like a silent kind of revert, it's either reflected in max deposit or the preview functions.
00:13:12.910 - 00:13:13.434, Speaker B: Could be.
00:13:13.472 - 00:14:01.454, Speaker A: Reflected in either though. And the last thing is, deposit should return exactly shares back to the receiver. So that applies to both deposit and mint actually. But just making sure that return types are the exact same and using those appropriately and not rounding down or anything. Rounding up, yeah, that's pretty much it for getting money into vaults. On the flip side of this, getting money out of vaults, this is the redeem and withdraw flow. So similar to how deposit was a market order to get assets into shares.
00:14:01.454 - 00:14:56.500, Speaker A: Redeem is the market order to get shares into assets and withdraw is the limit order to receive a defined amount of assets from shares. So both of these functions serve to get rid of a user's shares and get assets. And the conditions are very similar here. The max functions serve as a gating function to not allow the user to burn more than what he's allowed to. And then the preview functions will indicate on chain that the user cannot have more than a certain amount taken out of his wallet before returning him. Before returning him the shares that he wanted.
00:14:58.390 - 00:14:59.330, Speaker B: Oops.
00:15:00.250 - 00:15:56.440, Speaker A: Just a couple notes here, is that it can only return the ERC 20 asset. Why does it keep going ERC 20 asset back? So similar to how the deposit flow can only accept one ERC 20 asset is redeeming from a vault should also return just one asset. And then there have also been some interesting vaults that people have been deploying where there's time locked behavior on getting money out of vaults. And if a user is going to be time locked, just remember to reflect that in how the max functions are working because otherwise it's kind of hard to tell off chain other than just by simulating and seeing that it reverts. And those are really helpful functions to be able to tell if those withdrawals will work or not.
00:15:59.050 - 00:15:59.800, Speaker C: Cool.
00:16:00.890 - 00:16:09.020, Speaker A: Just curious, anybody have any questions on the overall 4626 flow so far? Yeah, go for it.
00:16:19.220 - 00:16:45.640, Speaker C: Yeah, just on the withdrawal side. So nowadays more and more transactions are non atomic. So if you want to sell an asset on a Dex, maybe there's some delay and this is to prevent from mev value extraction. So how does 46 26? It obviously handles atomic withdrawals, but let's say you need to do some swaps and it doesn't settle immediately. How do people kind of handle that with 46 26?
00:16:45.790 - 00:17:53.040, Speaker A: Yeah, that's a great question. So there are no execution guarantees it directly built into 4626 and that's been something of contention. You'll actually notice that in the spec, there's no slippage parameters, right? So some people have built their own custom implementations on top of 4626. That'll include that slippage price. But our recommendation actually is to only interact with 4626 vaults through a router contract, which would actually implement that execution logic for you, where you could actually say, hey, don't withdraw from this vault if it's going to result me in two USDC when I should have gotten ten, and it's not being solved uniformly on a vault level, which is why I think there's like a security abstraction level on top of that. But yeah, that's a great question. And there has been some good work by the urine team, for example, in actually protecting those swaps that can be made on a vault level, but generally, the idea of slippage should be solved through another contract.
00:18:00.540 - 00:18:01.290, Speaker C: Cool.
00:18:03.500 - 00:19:08.380, Speaker A: So moving on to some of the other useful functions in 4626. Mostly, these were built for general vault statistics and typical sort of information that you'd be seeing on a vault through a normal front end. These can be split up into things that ERC 4626 inherited from ERC 20, and new methods that 4626 actually implemented. So from ERC 20, it inherited total supply and balance of, and it introduces total assets. Convert to shares and convert to assets high level. If you're just thinking about a vault, there are two metrics that you're always going to want to calculate, and that's TVL and APY. 4626 makes it very easy to calculate those things, but notice that they don't actually define something in the standard about how you should calculate it, because it could be dependent on the vault.
00:19:08.380 - 00:20:25.540, Speaker A: But there are some recommendations here for how people can calculate TVL and APY on top of it. TVL can be calculated through total assets, which is a 4626 method, which will get the total amount of assets managed by the vault times the asset price. We've also noticed that some vaults will represent total assets differently, and in some cases, it would actually be better to use the total assets number as the asset balance of the vault. So like looking at the actual ERC 20 token contract and then seeing how much was actually in the vault, and then using that as a basis, multiply by asset price, and then APY lots of ways you can do this. The two most popular that we've seen, and are just looking at the change in total assets divided by total supply. So you can kind of think of this as total assets is just the amount of stuff that's in the vault, and then total supply is the ERC 20 inherited method for the amount of vault shares, and the difference in that is the difference in the price per share, pretty much. And there are some instances where that won't be totally accurate.
00:20:25.540 - 00:21:00.992, Speaker A: There could be fees, there could be some other things, which is why we would recommend calculating APY in a couple of different ways, and maybe just comparing and seeing how those might differ. But another way to calculate APY would be looking at the change in convert to assets, which is explicitly meant to be a pricing function and can be used as an oracle price and everything else. So yeah, that's pretty much it for.
00:21:01.046 - 00:21:01.650, Speaker B: That.
00:21:06.010 - 00:22:07.494, Speaker A: Recap of the ERC 4626 flow. So 4626 has outside of deposit mint, redeem and withdraw has three main classes of functions. One is the preview functions, which are real time simulations of what an action would do, and that is used as a lower bound for what the actual deposit mint withdraw redeem would do. The max functions are constraints on individual user actions. You'll note that preview functions must be global. So if I wanted to preview what depositing 100 of this token would be, that deposit of 100 must apply to all users. That would be depositing 100, but the max deposit function would be potentially different by user depending on if they had recently deposited or if they were kyc'd or whatever else.
00:22:07.494 - 00:22:58.546, Speaker A: And that max deposit could be used differently. And then the convert functions, in contrast to the preview functions, can be used externally for average pricing. So stuff like oracles front ends, whatever you see fit. The preview functions are very risky to use s oracles because they will change a lot, and they could be changing block by block. And there are actually a couple of exploits that have happened already by protocols implementing the convert to assets function the same way they would preview. And that's pretty dangerous, something to keep in mind. And we had the question earlier on a vault level, how to handle execution guarantees.
00:22:58.546 - 00:23:55.580, Speaker A: And you'll note that there's no subage parameters in the core functions, and that's something that there have been implementations that will add that. But we recommend keeping the 4626 spec as clean and conformant as possible and letting that fall on the integrator to actually implement. And then we've also noticed some protocols will obviously favor to use deposit and redeem. It's just more conceptual, just makes more sense to think about it in terms of market orders. And mint and withdraw was something that, even in writing the spec, to my understanding, was something that was a little bit under contention, but just remember to implement them. You never know who's going to find use for it down the road. And yeah, the spec has it in there, so never hurts to follow it.
00:23:55.580 - 00:25:30.708, Speaker A: Just a bit more on the security practices already mentioned the stuff about the convert functions, but if you guys are curious to look at it, there was an interesting exploit on cream, I think it was maybe end of like 2022 where one of their ETH markets was exploited due to something very similar to this. One of the other common attacks that we've seen and has been talked about is the URC 466 inflation attack. So this pretty much happens because the first depositor into a vault has a massive imbalance in the actual amount of shares so that person can be sandwiched and effectively lose his deposit. To combat this, there have been multiple solutions that have been proposed, but the one that we recommend is simply from a vault creator side. Just initialize the vault with dead shares and that's the easiest. It just guarantees that even if integrators don't check that for you, that somebody depositing straight into your vault would still be totally fine. And then the last point here is with no execution guarantees in 4626, it is risky to deposit and redeem directly from those contracts.
00:25:30.708 - 00:27:18.240, Speaker A: You just never know how that logic will be handled within it and there's no guaranteed revert cases for it if you're not going to receive the amount of assets or shares that you wanted back. So would recommend that you interact with these things through routers that do that rather than just calling deposit on the 4626 directly, that would help. Just some tips in developing vaults the old fashioned way is you can write your own from scratch, give it a shot, or there are a bunch of new ways to permissionlessly deploy 4626 strategies and there are a lot of tokenized strategy bros out there that are more than willing to provide tooling and resources to make your vault and strategy totally conformant and safe. Some of the ones up here that have listed are urine v three, Morpho Blue, Valcraft and Euler VC. Actually I heard that Euler was just here and leaked a bit of alpha on EVC, so we'll have to go back and see what they talked about there. But pretty much these four things are ways that you can permissionlessly deploy new vault strategies right now and toolkits make it pretty simple for anyone to launch their own strategy and get it to market. If you'd so like urine, V three is just focused on the actual strategies themselves.
00:27:18.240 - 00:28:18.028, Speaker A: Morphoblue on new lending markets Volcraft can be used with any 4626 on a bunch of different chains. Would definitely check them out and been building lots of cool stuff across the board. If you decide to do it though, there are some tools to help you develop vaults safely from scratch. Linked a couple of resources open. Zeppelin's 4626 implementation is probably the most up to date. It covers a bunch of stuff on the inflation attack, just generally new commentary around how to handle some of the edge cases, around things that we've been seeing in vaults, and they've been doing a great job keeping that up to date. And then some other tools that we found super helpful are Ercx's online tester.
00:28:18.028 - 00:29:52.050, Speaker A: So it's made by the guys over at runtime verification, and you can run any deployed vault through it, and also run your smart contract code just by copy pasting it in to their idE, and just run conformance checks against it and trail of bits and a 16 z. Also have great fuzzing tools available for people and check that out. And there are also resources to help you guys do this and would just reach out to the 4626 alliance, and there's a group of people who would love to answer your questions and get you going. All right, so one of the things that we've been hearing lots and lots of feedback on 4626 over the past two years, and wanted to cover some of the limitations of the standard and where we think these yield standards are going and why it's really important. So, first off, 4626 assumes that there are synchronous deposit and withdrawal methods, and that's totally fine. Works great for 99% of DFI, but for any case, and including some DFI cases, we cannot actually process those synchronously. And this is particularly an issue for most real world assets.
00:29:52.050 - 00:31:06.270, Speaker A: But just imagine you're trying to get into like a tranche product from Blackrock, and it's like their cap is totally full. We need that deposit to be capped, and there needs to be some step in between me allocating assets and then that getting fulfilled. And similarly for withdrawals, sometimes these are locked up in three year investments, and these things aren't immediately redeemable. How do we actually properly create this structure to fulfill all of these asynchronous requests? And that's why we've wrote a EIP 75 40, which is an extension for 4626, which supports exactly that. Pretty much TLDR of it is that it introduces a request to both the deposit and the withdrawal step, and that can then be fulfilled by the vault operator. And hopefully that kind of stuff will help bring more yield on chain that historically has never really been able to be defi, because DeFi is just way too open and composable for them. And then the other thing is, on what asset is.
00:31:06.270 - 00:32:19.986, Speaker A: So asset is obviously the underlying token that the vault accepts. And that's what it deals in. Lots of interesting things around how to support multi token pools, double sided LP for example, and generally gotten a lot of feedback that ERC 4626 strictly enforcing only a singular asset has led to some weird funky implementations that we don't want happening. So there's this EIp out there, 75 75, which extends this for multiple assets. In the meantime though, until these are finalized, if you have multiple underlying, it is totally reasonable for you to still create a 4626 for token a and token b separately, and then just have that be managed through a swap, and then get the LP token for example, and then deposit. And then last one is the asset must also be an ERC 20 token. Obviously we have a bunch of different staked eth vaults.
00:32:19.986 - 00:33:35.150, Speaker A: Some of them are native asset native eth vaults, some of them are staked eth vaults, whatever it might be, but definitely want to provide vault support for native eth and other evM assets. So 75 35 extends that for native EtH. By the way, all of these are still in review, and we'd love to hear if you guys have been building vaults that have encountered issues doing directly on 4626. You're just curious about how one of these works forums there here to answer any questions. And yeah, goal is just make those as comprehensive for those new use cases as possible. So feedback is always great when it's in the review stage. And then actually the last thing here, which I just kind of included last minute, was a lot of protocols will want to offer their own protocol token rewards and just tokens that aren't necessarily the underlying asset, which is great, that's DFI.
00:33:35.150 - 00:34:15.660, Speaker A: But the way that 4626 works right now is that to return those non asset tokens back to the user, it would either have to be compounded into the assets, you'd have to sell your protocols tokens into the asset, not good. Or you could distribute and airdrop it separately to users, which is mostly what protocols have been doing, and that's great. But when it happens uncenitized, obviously there's room for improvement and that'd be another cool area to standardize. And if anyone's interested or has been dealing with reward tokens like that, would love to hear it.
00:34:20.460 - 00:34:21.208, Speaker C: Cool.
00:34:21.374 - 00:35:16.852, Speaker A: So we talked about how to build a 4626, whether from scratch or through one of the token factories we talked about on this last slide. If 4626 doesn't work for you, what you could explore, but let's say that you already have a 4626. What can you do with it? And besides this being generally more composable than your own siloed implementation of your vault, there are already a handful of use cases that you can use right now. So one of them is you can go on superform shameless plug. So superform is a permissionless front end for 4626 vaults. And once it's on superform, anybody can deposit any asset from any chain into that vault. So you can kind of think of it as a distribution platform for your vaults.
00:35:16.852 - 00:36:15.736, Speaker A: And once you have a smart contract address, all you need to do is put it on there and you don't have to build a front end or anything else for it. People can find and deposit and do everything with your vault just from that. And yeah, if you really don't want to build any sort of front end, you can also create a protocol page and manage your vault directly from there as well. Other cool things. This is not comprehensive, by the way, but just to keep it more brief is you can create a prize pool on pool together. So pool together is this really cool platform that allows anybody to deposit four, six, two sixes and that they split the principal and the actual yield reward and they'll return all of the yield accrued to a handful of people that won the prize. And so you have a potential to win really big without losing any of your principal.
00:36:15.736 - 00:36:32.608, Speaker A: And we'll also note that these prize pools are also 4626. So if you had your 4626 vault made a price pool on pool together, and then you could put that price pool on superform and then everybody could access it from any chain and that's.
00:36:32.624 - 00:36:40.680, Speaker B: How some of those vaults have been created right now. Cool.
00:36:41.850 - 00:37:00.110, Speaker A: Yeah, that's pretty much it. I had before the actual workshop demo stuff, but wanted to open it up for any q and a before we got to that and see if there are any things on what I just said that could use any clarifications.
00:37:15.180 - 00:37:15.928, Speaker B: Cool.
00:37:16.094 - 00:37:48.960, Speaker A: I guess we'll just jump straight to the workshop. The actual deploying, testing, using a vault. You guys are welcome to follow along. I'll just kind of be up here doing stuff on my computer and you guys can watch. But we're just going to be deploying a 4626 through a vault factory and then we're going to load it up in one of those tools to test and see if it worked. And then we'll try listing it on superform to get crosschain distribution.
00:37:52.280 - 00:38:11.550, Speaker B: Okay, see, it's kind of.
00:38:17.620 - 00:38:27.860, Speaker A: Alright, so we're gonna be following a guide from urine on deploying and managing one of their V three vaults.
00:38:28.920 - 00:38:30.070, Speaker B: Having that.
00:39:25.770 - 00:39:26.520, Speaker A: Okay.
00:39:33.730 - 00:39:34.454, Speaker B: It.
00:39:34.612 - 00:40:17.780, Speaker A: All right. So the beauty of how a lot of these D five protocols have set up their 4626 factories is that they've deployed these on chains that they're on and you can simply go to their factory and assuming you're not going to be adding any additional strategy, logic or anything on top of it, you could go directly to their factory and just create a vault yourself. So we'll just be, for the sake of this demo, just going directly to urine's vault factory. So this is yarn's vault factory on polygon. See, they've created a couple through this already. Go to.
00:40:19.350 - 00:40:20.690, Speaker B: All right, contract.
00:40:31.120 - 00:40:39.916, Speaker A: We will make this a USDC. Actually, let's make it a dive.
00:40:39.948 - 00:40:40.560, Speaker B: Vault.
00:40:48.870 - 00:40:49.730, Speaker A: Dive.
00:40:51.190 - 00:40:52.260, Speaker B: Let's go.
00:41:20.600 - 00:42:33.760, Speaker A: So these are just arbitrary parameters that urine set up in their vault factory. But just look at their docs for more on this. But pretty much, if you want to add stuff to these vaults over time, you're going to have to do them through some of these addresses that you set up here. They manage the strategy. So we'll go ahead and make that vault and whenever this indexes. There we go. And we got our vault.
00:42:33.760 - 00:42:51.040, Speaker A: So you can see these are just some logs. New vault was created with the underlying asset of Dai. And this is our vault address right here. And you can see this was just created. You can look at the contract should be auto verified.
00:42:51.120 - 00:42:52.790, Speaker B: Yes, it is. Nice.
00:42:56.700 - 00:43:09.724, Speaker A: We could now take this contract. So this is a functioning 4626. Actually, we're going to find out if.
00:43:09.762 - 00:43:11.820, Speaker B: This actually works as expected.
00:43:16.410 - 00:43:20.934, Speaker A: I think because it's a viper vault, it might take a little time for this to run.
00:43:20.972 - 00:44:22.310, Speaker B: But let's see, where is. Wait, do they. There we go. Okay.
00:44:35.720 - 00:45:03.850, Speaker A: So you can run ERC 4626 contracts through this tool and it'll tell you just generally if it's conforming or not, anything you should be aware of when interacting with it. You can also use this tool for ERc 20s, erc twenty s and seven hundred and twenty ones too. Could be helpful if you guys are swapping on uniswap or something else. You just want to see something safe or not.
00:45:08.060 - 00:45:10.530, Speaker B: Wait for that. Then.
00:45:53.040 - 00:47:05.072, Speaker A: While we're waiting for that, we might as well can go to the next step. Assuming that that vault is safe, which it is, because it was created through the factory contract, what you could also do with your 4626 is go over to superform. And these are all 4626 vaults that have been added and users can deposit from any asset in any chain into those vaults. Anybody can also permissionlessly add vaults to superform, allowing for that instant cross chain distribution. And here's an example. So you just go here, it's a viper vault, so actually wouldn't be able to run vault checks, but can just go ahead and add it like you would any other vault, and then once it's there, shows up, know that was a urine vault. So we'd actually need urine to approve and have that show up in their protocol page.
00:47:05.072 - 00:47:46.988, Speaker A: But if they were to, and if anyone from urine is here and wants to do that, they can right now, but I assume they're not. So you can just see these vaults that the protocol is already verified. And to just give you guys an example like this is a conformant 4626, and you can just deposit from any asset into this and do the bridging and everything for you. So, yeah, pretty much it when I should do that. Let's see if this 466 checker is done. Yeah.
00:47:47.154 - 00:47:55.130, Speaker B: Okay. Oh, wait. I ran the ErC 20 test.
00:48:27.220 - 00:48:52.170, Speaker A: Well, you can't run them for everything, I guess, but if you guys tried out for more vaults, it should give you useful results. I'll give you an example of a token that did work. So this is one of exactly new vaults. And you can see.
00:48:54.140 - 00:48:55.390, Speaker B: Where is this?
00:49:19.750 - 00:49:56.126, Speaker A: This is an example of another 4626. This is actually the puff, the puff eth vault. The staked eth vault and tool will tell you Abi specifications. Anything else you should be aware of in integrating it, but especially from a developer standpoint, before you actually would deploy the contract. It'll tell you if there's anything that you're missing. Run fuss tests through echidna foundry, all that good stuff. And, yeah, it's just generally very helpful tool, and that's pretty much it.
00:49:56.126 - 00:50:26.340, Speaker A: There are a lot of different ways for you guys to deploy 4626 vaults. Just some of them are morpho urine vault craft. And for the bravehearted, could build yours from scratch. But would definitely say that if you want to spend time actually building strategies, don't do it from scratch. Just use one of the out of the box solutions out there right now and you'll be good to go.
00:50:27.910 - 00:50:28.370, Speaker C: Cool.
00:50:28.440 - 00:50:36.780, Speaker A: That's it. Thanks for listening, guys, and any questions, happy to answer them. And I'll be around after too, if want to answer.
00:50:37.630 - 00:50:39.030, Speaker B: Thanks, bye.
