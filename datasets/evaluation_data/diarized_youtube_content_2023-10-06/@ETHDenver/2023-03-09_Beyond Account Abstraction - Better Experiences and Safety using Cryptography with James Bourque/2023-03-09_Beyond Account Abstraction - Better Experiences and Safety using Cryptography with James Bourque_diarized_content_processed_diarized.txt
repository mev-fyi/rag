00:00:01.530 - 00:00:25.414, Speaker A: All right, everybody, thank you very much for coming. My name is James Bork. I am co founder at Intu. We have a booth just around the corner. I do a lot of the research and development for our project, and I am here today to talk to you guys about account abstraction, which after the news this morning, we all know is a very hot topic. But we specifically want to look at what's beyond account abstraction. It.
00:00:25.414 - 00:01:07.310, Speaker A: So we are going to make this a nice kind of high level story. First and foremost, I think we can all agree that private keys are scary, right? Everyone has nightmares about losing that private key with those assets, and things just go sideways. But the important thing to note here is that private keys are also the cornerstone of everything. That makes web three great, right? That self sovereignty, that agency, that ability to generate accounts without trusting somebody else. You can do the math on your own, and we cannot lose that part of our community. That is what sets web three apart from web two. So just kind of high level.
00:01:07.310 - 00:01:53.706, Speaker A: Broadly speaking, accounts in web three work in two ways, right? These are addresses. This is where to find either applications or end users. We have smart contract addresses, which are like your dapps, and these are typically intended for other machines. They also do not have a private key for everybody else. For us external users, we have eoas, externally owned accounts, and these have private keys. We use these private keys to send messages and transactions to confirm that we are owners of that public address, and therefore, as an external user, be able to participate in web three networks. Now, the big problem with eoas is that eoas do not meet human expectations, right? It's a single point of failure.
00:01:53.706 - 00:02:44.482, Speaker A: You lose that one private key and you lose access to your eoa. If we want to get those next billion users that everybody's talking about, we have to do better than a single private key, single point of failure. This is also a one account fits all. And then at least at Intu, we firmly believe that, saying, oh, it's human error, you lost your assets. Human error is not an acceptable excuse anymore for our customers, our users, our developers losing access to their data, to their assets. So now we get to account abstraction. And so account abstraction is an attempt to provide a more human experience for end users with more usability and more functionality by decoupling the private key from the assets that you use.
00:02:44.482 - 00:03:26.294, Speaker A: Right? So the signers, aka the private keys, are now separate from the assets that you're holding. The assets are being held on a smart contract account, typically not necessarily so. Account abstraction is just this decoupling right? It's this ability to provide a more human experience for end users. When we talk about account abstraction today, we almost always talk about it in terms of smart contract account abstraction. This is not a new concept, right? Gnosisafe has been a variation of account abstraction for a long time. These are just new words for the same thing. And I think we can all agree we need to stop making up words for things that we already have.
00:03:26.294 - 00:04:05.330, Speaker A: But that's a whole different story. Smart contract account abstraction allows us to introduce a whole new world of programmability into the way that end users interact with web three. But it's not without its limitations. Right? Smart contracts have to be deployed on a single network. That smart contract address does not automatically get translated to other networks. Right? We've had front running issues where you have a safe on one network and you're sending assets across chain, and someone has front run that address. There's also limitations as to how smart contract addresses can interact with other protocols.
00:04:05.330 - 00:05:30.282, Speaker A: Compatibility is an issue. There's also setup risk, right? The developer who is writing that code in that smart contract address, the one who actually deployed it, if something is configured incorrectly, you are compromising the entire account. There's also always upgrade risk, right? If someone has the ability to change the nature of your account as an individual, you are trusting that person to not change the conditions under which your smart contract account behaves. So the last one, and the one that kind of came up mostly today with EIP 24337, was trusting arbitrary verification of users. Up until now, we have always assumed that one private key, one public address, one user, no one is foolish enough to give away their private key, right? So now with account abstraction, we're introducing this whole new world of being able to verify external users using things that are not private keys, things that they might not have either complete control over or really care or secure that efficiently. So let's look beyond account abstraction. In the past couple of years in particular, we have made a lot of progress in cryptography that enables us to still generate eoas, right? Public addresses, SEPIC, two hundred and fifty six k one addresses, but without single private keys.
00:05:30.282 - 00:06:16.970, Speaker A: This is secure multiparty computation. This is verified secret sharing. This is threshold signatures. And with this we have the opportunity to introduce an eOa, a static public address for humans like us, but no single private key to lose. Right? We now have the ability to use key shares and threshold signatures, to still use an externally owned account, but not have to worry about losing one private key. Right? We now have to lose a majority of them, because this is cryptographic, because the end result is an eoa, we maintain the broad compatibility that we enjoy today. You can use the same account on Ethereum mainnet as on Polygon, avalanche, Phantom, any EVM compatible chain that uses ECDSA.
00:06:16.970 - 00:07:09.454, Speaker A: There's also a lot of flexibility in how you use it. And all the DApps that currently exist today are already expecting transactions and messages from externally owned accounts, so it looks exactly the same. EIP 4337, which we all know was announced and approved today, is an excellent first start in standardizing account abstraction. We now have a common language for developers to use in creating smart contract account abstraction. The way that 4337 works at a very high level, you're replacing eoas with users and you're replacing transactions with user operations. These go into a higher level mempool. This is above the consensus layer, and these bundlers go ahead and process these smart contract abstracted accounts into transactions, and then you interact with the rest of web three.
00:07:09.454 - 00:07:32.100, Speaker A: This is awesome. This is great. This is the beginning of a standard way of having NFT games that don't require microtransactions. You can do proxy payments, subsidizing payments for your end customers. You can do privacy preservation. All the things that we're trying to do we can achieve with accounter distraction. And 4337 gets us one step closer to doing that in a normalized way.
00:07:32.100 - 00:08:29.010, Speaker A: However, back to the issues with smart contracts. You require trust in the smart contracts and the developers and organizations that built them. As the previous speaker was talking about, an audit is not just enough, right? There are things that we can't anticipate. There have been flash loans that have been used in ways that was never intended, but has completely changed the way that we think about web three security. Arbitrary verifications of users has a wide variety of unforeseen impacts. If a developer decides that they want to verify their end users using Twitter or a cell phone number, we're now open identities to authorities that are saying you are who you say you are because I have your email address and it lives on a server somewhere and I pay for it every single month. Right? Additionally, you're losing the cross chain compatibility again, front running on smart contract addressing.
00:08:29.010 - 00:08:56.958, Speaker A: And you're also losing all of the effort that we've put into off chain security. Everyone knows there's nothing safer than an off chain key. That's why we have ledger. That's why we have Trezor, that's why we have enterprise building on hardware security modules to secure keys in a way that's at scale, efficient and safe. It's air gap. We lose all of that with 4337. So what I am here to propose to you guys and to hopefully engage in more conversations about.
00:08:56.958 - 00:10:01.982, Speaker A: I'm not saying we have all the answers yet, but it's an important conversation for us to have is to look at account infrastructure first and to look at this advanced cryptography first. Using key shares instead of private keys and using threshold signatures, we are enabling our end users to recover accounts. We can use key resharing to dynamically change participant ownership of accounts. And with that we can better approach a more human experience, something that we're more closely chasing while still relying on the hard coded consensus layer that we've all come to trust. Right. That is why EVM is so widely adopted, is because private key, public address, we trust it, we know it's going to be verified cryptographically by the network, and we know we have the distribution in order to trust in that. When we take that infrastructure and then we start building the account abstraction on top of it, we're divorcing the account side of it, right? The key management, the identity of the end user while still providing specialized experiences for our applications.
00:10:01.982 - 00:10:38.590, Speaker A: So again, proxy payments, I can subsidize the cost of your browsing, I can pay for your gas fees, and I don't have to worry about your private keys. I don't need to worry about how you've identified yourself on the network. I can go ahead and just focus on what I'm good at. KYC, compliance, deeds, transfers, all sorts of great things without jeopardizing the why of web three. So, in conclusion, I think what we all want is a web three that more closely meets human expectations. We want to be able to reset our passwords. We want to be human and not be penalized for it.
00:10:38.590 - 00:11:03.586, Speaker A: And I think most importantly, this is what the mainstream wants. This is what we need in order to convince web two users that web three is safe. And you can still learn without losing everything along the way. And that's it. So thank you very much for listening. We are just around the corner. We focus a lot on secure multiparty computation, verified secret sharing threshold signatures.
00:11:03.586 - 00:11:15.300, Speaker A: This is a great way to keep in touch. We are remotely based, but if you're ever in Paris or San Francisco or Lisbon, come say hi. Appreciate your time and I hope you guys have an incredible rest of your Eth. Denver, thank you.
