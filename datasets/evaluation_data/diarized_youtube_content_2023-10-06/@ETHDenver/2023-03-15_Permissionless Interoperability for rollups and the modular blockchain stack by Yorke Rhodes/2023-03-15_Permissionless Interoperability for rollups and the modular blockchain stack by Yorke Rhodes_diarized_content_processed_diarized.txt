00:00:01.130 - 00:00:27.080, Speaker A: Hey, guys, welcome, welcome to this talk on permissionless modular roll up. Interoperability. It's a bit of a word soup. So I'm going to kind of talk through some of the definitions there. But my name is York, I work on a project called Hyperlane. It's an interoperability project. We're kind of embracing some of the ideas that I'm going to talk about in this talk.
00:00:27.080 - 00:01:58.350, Speaker A: And if you have any further questions about hyperlane or anything I talk about here, definitely reach out either on one of these links or after the talk, you can come up and ask some questions. Okay, so I'm going to get started. So first I just wanted to define what interoperability is so we can have kind of a cogent discussion. My definition of interoperability is composability amongst dapps that are on different infrastructure. So that's like a pretty high level definition. But we've observed in crypto and in the blockchain ecosystem in the past, I don't know, 1020 years, is that dapps that are enabled by this new technology are on increasingly divergent infrastructure. And this is because they want to take advantage of new innovations, new, basically new advances in research that are only being deployed on kind of like new infrastructure layers, because the ability to either include those properties in existing networks like bitcoin or ethereum or even cosmos, or one of these kind of established networks with network effects just becomes a political battle.
00:01:58.350 - 00:03:10.780, Speaker A: You have to lobby and you have to get your pre compiles included, and you have to ask for a hard fork to get the feature your application wants. And at some critical point in a, I guess, network's lifecycle, it stops being able to just include everything that people are asking for, because there's obviously trade offs here. So the idea behind the modular blockchain thesis is we want to allow applications to express the types of trade offs that they make at every layer of their stack. And I think a lot of people, the modular blockchain thesis is a very loaded term. I think it comes with a lot of different associations and assumptions because we're at an Ethereum conference, I'm going to talk about kind of the Ethereum roll up centric roadmap and what that means in this modular blockchain thesis context. Yeah, this graphic over here is taken from Zksync's website. This is kind of like what they think the future of.
00:03:10.780 - 00:04:26.440, Speaker A: I guess their roll up architecture is going to look like for application developers. And you can see that it's very complicated. It looks pretty complicated. So we need to come up with a way for developers to interface with this stuff that is not so overwhelming for people to understand. But yeah, just to summarize, I guess as we increase the complexity of the infrastructure layers and their implementations, it becomes harder and harder for DAP developers to grock this stuff and to evaluate the trade off space of like, oh, should I be using celestia as my data availability layer, or should I be using Ethereum? Or should I be using eigenda? Right. These things are very nuanced, so we have to just come up with the right interfaces for people to express this. So like I said, I'm going to focus on kind of the Ethereum roll up centric view of this modular blockchain thesis.
00:04:26.440 - 00:05:58.880, Speaker A: And in case you guys aren't aware, Ethereum and the Ethereum research community and ecosystem has kind of galvanized around the rollup centric scaling roadmap. This has been kind of what the core devs have been working on for the past couple of years, basically transitioning Ethereum to be this base layer for this roll up centric future, for the ability for us to get increased scalability properties. So basically like transaction throughput, right? We don't want to make the l one prohibitively hard for people to run. We want it to maintain some of these network effects that it already has. So we can't make super drastic changes, but we can make a change like EIP 4844, which enables some innovation to happen on a layer above without requiring basically a lot of controversial protocol changes, which might have a big impact on the existing network effects and stakeholders in the Ethereum l one. So this is kind of where we are today. This 4844, you've probably seen it on Twitter, basically makes roll ups able to use Ethereum as their data availability layer for way cheaper.
00:05:58.880 - 00:06:56.356, Speaker A: That's like kind of the super high level takeaway. And what we're seeing as Ethereum kind of moves in the direction of this roll up centric roadmap is DAP developers are actually adopting these new architectures. So both of these graphics are taken from a website called l two beat. Basically like visualizes roll up activity. Definitely check it out. But you'll see pretty recently, actually, the aggregate amount of activity on these l two s has kind of superseded the activity on the Ethereum l one. If we're using kind of transaction throughput as a metric for activity, and if we look at kind of DeFi TVL, basically like options, protocols have exploded on arbitrum.
00:06:56.356 - 00:08:24.550, Speaker A: You guys have probably heard of GMX, they're killing it right now on Arbitrum. And yeah, application developers are starting to adopt these roll ups. They see the benefits of the lower fee environment for their users and they see the performance benefits of having these more centralized sequencers. And they realize it's a way for them to differentiate from their competition. And so they're migrating to these new L2 s, which is exciting, right? We're actually seeing a lot of innovation happen in real time. But there's kind of a problem that comes with this innovation, and that is that the ability for all these applications which are now deploying on these new roll ups no longer have the kind of atomic composability that they had on Ethereum l one. If you think about kind of like DFI summer and the ethos of Ethereum as this generalized execution environment, a lot of people believe that this property of atomic composability is the reason that Ethereum is such a valuable developer primitive, and that we can deploy smart contracts that leverage each other's network effects rather than having to bootstrap our own network effects within kind of some siloed application.
00:08:24.550 - 00:09:22.512, Speaker A: This is like the idea behind lens, right? Instead of like if you want to compete with Facebook, you have to go and build your own social media company and get people to come on board with lens or with any of these smart contract platforms, you can leverage these existing network effects without being competitive. You can be cooperative. But when these applications are on these l two s, there's kind of this fragmentation that's been happening, and there's all these different types of interoperability. Now there's no longer just this simple atomic composability. There's deposits and withdrawals from l one to l two. There's this asset bridging that's happening between roll ups to share liquidity and to kind of balance demand across the different roll up environments. And there's also general message passing between roll ups.
00:09:22.512 - 00:10:46.636, Speaker A: So this is like asynchronous composability, basically having smart contracts interact with each other in an asynchronous manner. There are some attempts, some recent attempts and working groups to address some of this fragmentation. I noted one of the eips here. But generally it's really hard for as an application developer, to look at this stuff and know what you should be doing. So yeah, just kind of highlighting that with this new roll up, future DAP developers have a much harder task to understand what interfaces they should be using. The, this interoperability, especially between these like heterogeneous environments that is kind of being enabled by this roll up future unlocks new forms of innovation that actually weren't possible on ethereum l one. So not only are we getting the scaling benefits, but we're also seeing new forms of applications that are only possible because we have an application that's leveraging properties of some infrastructure, like multiple infrastructure layers.
00:10:46.636 - 00:12:12.456, Speaker A: So there was actually this really cool article that a 16 Z crypto's research team just released. They've been doing a bunch of research into auction theory on chain auctions, like verifiable fair auctions, and they built this cross chain application which leverages aztec connect, which is like a privacy l two, to do a sealed bid auction, which is kind of like this thing that a bunch of people have been trying to implement, but it's really hard to implement. And maybe it's a solution to MeV, but we're not sure. But yeah, just wanted to again, to highlight not only are we getting scaling and we're getting applications can now basically do things that they couldn't before, which is also really exciting. A lot of people are like light client maximalists, and this is an idea that somewhat comes from the cosmos ecosystem. So they believe that interoperability between these heterogeneous environments should only use what's called native verification, which is basically like you have this thing called a light client, and it's basically syncing on chain with some other chain's consensus. So it's consuming the headers that are being produced by some other chain and it's verifying them locally.
00:12:12.456 - 00:13:20.000, Speaker A: And so this is called native verification. But the problem with this in our super fragmented roll up world is, first of all, there's not light client implementations for most of these things. But second of all, the implementations are very specific to the state model. And so in this modular blockchain thesis, we want to allow applications to express their preferences at every layer. With something like cosmos, there's actually a lot of baked in assumptions that enable IBC, and some of those are basically know you have to use the same consensus model, you have to have the same state model, and this allows you to have this, I guess, universal light client interoperability. But where we are in Ethereum, this basically is impractical, especially with the size of the ETH two validator set. A light client for the ETH two validator set is extremely, extremely expensive to run on chain, basically like prohibitively expensive.
00:13:20.000 - 00:14:14.872, Speaker A: So we need to turn to alternatives. People are doing some really cool research stuff on the ZK side of things. I'm a little further away from that, but people are working towards solving this east two light client problem, but it's still very much in the research stages. Okay, so we want modular interoperability for application developers in this roll up centric world. We need to separate the transport layer and the application layer. So this is kind of where we depart from maybe what the Cosmos model is, where there's kind of like a bit of a verticalized stack. And yeah, the basic premise is like DAP developers should just understand the interface to the application layer.
00:14:14.872 - 00:15:05.060, Speaker A: This is going to be a simple send and receive, or in this case a dispatch and handle interface that should be consistent across all these roll ups, all these different execution environments. We can have a consistent interface that's possible. And if we do this, we don't need to maintain all these different implementations. We can just have a spec. I mean, maybe we want some diversity of implementation, but generally this makes the DAP developers life a little easier, because now they don't need to understand. Okay, l one to l two, withdrawal versus l two to l two, generic message passing versus asset bridging between l two and some cosmos chain. All those right now are completely different applications with their own set of interfaces.
00:15:05.060 - 00:16:25.256, Speaker A: The complexity of some of these code bases is just like crazy because you have to special case, basically like every single pair of chains that you're connected to, you want this interoperability. We also want to allow DAP developers, or maybe some delegate that DAP developers select to express their security preferences and their risk tolerances. So as a recipient application, when you're getting some inbound intent for interoperability between some other chain or from some other chain or some other roll up, you want to basically specify through some consistent interface, like what is the security model. We can have basically the equivalent of token lists, like Uniswap has a list of token lists. We can have a community governed list of security models for all these different channels that developers can just opt into, have a consistent interface to. But they don't need to all implement themselves these verification mechanisms from all these, I guess, heterogeneous environments, there will be some kind of like canonical set of verification mechanisms. Maybe some are like clients, maybe some are like these optimistic verification mechanisms.
00:16:25.256 - 00:17:06.100, Speaker A: Some are proof of stake sort of systems. And application developers don't need to necessarily understand all of the transport layer stuff that's happening in between. They just have this configuration layer for security and a simple dispatch and handle interface. They get this interoperability across all these environments. So at hyperlane we call this sovereign consensus. Kind of like a funny name, but yeah. The cool thing about this is like applications, whenever these new verification mechanisms that are coming out of the research community become available, they can just change their configuration.
00:17:06.100 - 00:18:01.896, Speaker A: They don't need to go in and rearchitect their entire system to accommodate some new light client implementation or something like that. They just say, oh, I'm going to set my interchange security module to this new light client module. So the way this is, I guess, modular in the Hyperlan architecture is we basically allow anyone to deploy this. It's a protocol, but it's also basically just this interface of like dispatch and handle configuration layer. And if you're spinning up your own roll up, which is kind of the idea of a bunch of these roll up as a service projects, like, you've probably seen the optimism. The op stack Celestia has their role mint roll kit thing. Arbitrum now has something like this.
00:18:01.896 - 00:18:58.036, Speaker A: A lot of new projects kind of competing on this roll up as a service model. People want app specific roll ups because they get all these scaling benefits and they get more free revenue. So you don't want to have to go out and lobby some validator set or some bridge. You don't want to have to go to wormhole and say like, hey, please support my chain and bridge here so that I can leverage existing network effects from these other chains. You can just deploy this protocol yourself and you get all the benefits of inbound security. If you want other applications to basically compose with you on your outbound communication, they need to opt into that. So they need to kind of configure some interchain security module which knows how to verify your roll up or your chain.
00:18:58.036 - 00:19:48.532, Speaker A: You can go and deploy that for them. But yeah, this is a basic idea. You don't have to go and do bd to get interoperability anymore. You now have these modular systems where you can just as an application developer, be chain agnostic, not bake in so many assumptions when you're doing your initial architecture or design or deployment, but rather be super extensible to all these new roll ups, new verification models. And yeah, I encourage you guys, if you want to spin up your own roll up this week, you can try deploying hyperlane on it and sending messages between our existing deployments. You should hop in our discord, tell us about what you deploy. We're super curious what people are building in these cross chain architectures.
00:19:48.532 - 00:19:56.630, Speaker A: I think my time's up, but yeah, definitely come down and ask questions if you have any. And yeah. Thanks so much for my time.
