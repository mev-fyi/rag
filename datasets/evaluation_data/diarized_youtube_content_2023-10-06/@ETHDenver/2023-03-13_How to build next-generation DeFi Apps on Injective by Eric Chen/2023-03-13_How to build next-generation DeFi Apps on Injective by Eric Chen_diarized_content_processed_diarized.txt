00:00:00.090 - 00:00:42.090, Speaker A: You all right? Good morning, everyone. Seems like it's a light crowd today. At least I wouldn't show up at 09:00 a.m. So this is Eric Chen, co founder and CEO of Injective Labs. We're the core contributor to injective, the blockchain bill for finance. And today I'm going to do like a quick overview of injective and how we're focused on build, building the new HFA connected financial stack. Yeah, so coming from personal experience, and also I'm sure most of the developers have faced similar issues.
00:00:42.090 - 00:02:04.818, Speaker A: When you're building within a monolithic environment, whether that be ethereum EVM, whether that be Solana, whether that be the newer and cooler like moviem, it's generally built and kind of optimized around a more generalized context. So this means that whenever you build some EVM like that, whenever you're structuring the gas economy, whenever you're making any type of OpCO considerations, you're always going to be kind of making as broad of a coverage as possible, which basically creates kind of like this awkward equilibrium for each specific vertical. Because every single sector or every single vertical, they have different types of economic considerations, they have different types of computational requirement or storage requirements. And obviously, one of the biggest problem currently within DeFi is MEV. Some people might argue it's a feature, some people might argue that it's detrimental to the best possible user experience or the most fair experience for DeFi. But it's certainly a hotly debated topic. And this is kind of like an unavoidable topic for any type of generic or monolithic layer ones on top of that.
00:02:04.818 - 00:03:44.500, Speaker A: Certainly it's a very high gas cost, given the interactive nature of a lot of the DeFi applications and DeFi infrastructures, you're going to be consistently running into issues of gas cost, because within a traditional centralized world, orders within an order book order gets updated quite a few million times every second. So the computational resource required to simulate a more traditional financial market and a financial infrastructure is certainly practically impossible within a decentralized and basically peer to peer setting. On top of that, Defi keeps getting hacked every other day. And that's kind of like the norm these days. That is mainly due to perhaps lack of understanding within how EVM works, or within the general best practices when you're building solidity contracts or whatever language you guys prefer. And then on top of that, it's just a giant honeypot due to the transparency, which is a huge, obviously pro for DeFi, but it often causes issues with kind of highly parameterizing and quantifying the exploit value and really motivating a lot of the bad actors to kind of take advantage of opportunities. Now it's certainly a good thing because it kind of demonstrates the censorship resistant nature and the permissionless nature of defi contracts, but it's definitely not the best developer experience.
00:03:44.500 - 00:04:36.930, Speaker A: Stability is another issue. Basically, we're kind of framing this within the context of scalability. Generally within a monolithic environment. Most of the services, especially for e two, it's been highly stable. But at the same time, if you're trying to seek for more scalable environments to build your application, to deploy your application, it starts to become quite a bit of a significant problem for a lot of DFI applications. Given that a lot of the scalability solutions and a lot of the layer two solutions are very much of a nascent space. And as we've seen, there's been historical halts, reorgs, downtime, et cetera, across most of the major scaling focus solutions, whether that be like another faster l one, or whether that be like l two solutions.
00:04:36.930 - 00:05:56.430, Speaker A: And another thing about the last thing is certainly, oh wow, it turns out there's a bunch of slides I can go just let's go one by one. So scalability is certainly one of the biggest issues within DeFi because of the highly interactive and computational intensive nature of DeFi contracts and most of the protocol designs. And certainly there are a lot of existing work around how to optimize for gas, how to create a lot of, I would say, very neat little tricks to make sure that it's as non interactive as possible, it's as gas efficient as possible. But especially as we see more adoption, more usage within the monolithic environment, let's say like ethereum during the really hot times, or when people are really passionate about nfts, the gas economy kind of spills over to the other DFI applications and makes the cost for using or kind of the economics of a lot of d five protocols inviable. Or it's a certain level of gatekeep. Because if you think about it, uniswap v three represents every single lp position. Practically speaking, as an NFT.
00:05:56.430 - 00:07:20.202, Speaker A: This means that every time you're creating a liquidity distribution within the market, or you're just updating, trying to prevent yourself from being adversely selected, you're basically trying to mint and burn, mint and burn like hundreds of entities. And that is certainly not viable. And then people might ask, okay, why not going through arbitrum? Why not going through optimism. And that's because it's really kind of buying time for a consistent issue as adoption grows. Within the EVM context gas economy, the overall optimization is generally considered in a monolithic context. So a lot of DeFi applications will basically have kind of like a cap scalability and kind of like a limited pathway for them to kind of really truly expand without having to face a significant sacrifice in composability integrations and a lot of the other security related issues as well. Yeah, so injective is basically kind of like the solution or one of the kind of tentative possibility where developers can look to, to kind of work around a lot of these problems.
00:07:20.202 - 00:08:53.956, Speaker A: Within DeFi, certainly there's no perfect fix for a lot of the preexisting issues. That's because of consensus design centralization issues, and more importantly, the fundamental underlying cap theorem. But injective as a blockchain, as an infrastructure that's highly optimized for financial applications, can basically bridge that gap and present like a pathway forward where there are just so much more possibility for horizontal scaling and so much possibility for a lot of the optimization where the entire ecosystem is vertically or focused on a certain vertical. So injective as a blockchain is built on top of Cosmos SDK, and it has a lot of native and out of the box integration for Ethereum. Like I mentioned before, a lot of developers on day one, whenever they're considering building on top of Ethereum, building a slowly smart contract, kind of like how the injective labs team started off thinking about trying to build like an application on top of Ethereum. The biggest downside for moving off of that environment is the lack of colocation with where the primary flows are, the lack of composability, the issue with the bridging infrastructure, so many problems just in general. But injective certainly presents a solution to try to resolve that.
00:08:53.956 - 00:09:53.640, Speaker A: Because when we were trying to build back in 2018 or 2019, a fully decentralized and on chain or trustless order book infrastructure, we ran into the exact same set of issues. We ran into a lot of problem and it kind of like pivoted the direction of what we want to build towards. For us, it's really about like we're imagining a lot of other developers are probably going to face the same set of limitations. Building DeFi applications face the same set of problems, and we basically decide to build the infrastructure ourselves. And some of the highlights about injective is that it's very, very fast. It has know 1 second block time thanks to Cosmos SDK and some optimizations done on top of it. It's highly interoperable via IBC, and also an internal bridge module within the injected blockchain itself, which allows for bridging of assets through the bridge will be secured by the validator themselves with economic bonding.
00:09:53.640 - 00:10:50.908, Speaker A: And that bridge module is also well audited at this point and highly secure. And it also allows for arbitrary passing of data, where a lot of developers can also build different types of composable measures and also different types of integrations in a lot of really creative ways. So you're retaining that composability at the con of losing out on the atomicity. And for a lot of scaling solutions, you obviously cannot have atomicity. And one of the cool part is that injective done something very special within, kind of like the Cosmos SDK stack. I decided to go with the Ethereum key derivation, which basically allows for any type of ethereum user utilize EIP 712 to sign messages, to be able to send transaction directly to injective chain without even having to realize it. They switch chains or they do this and that.
00:10:50.908 - 00:12:25.996, Speaker A: And that is kind of like the core of the infrastructure itself is to really truly empower the applications and the developers building on top of it. At the end of the day, for a blockchain that's focused on a certain vertical, the base layer is kind of designed to be the best possible environment and will evolve consistently to try to maintain being the best possible environment for defi developers. So on top of that, certainly the bridging infrastructure and a lot of the bridging solution has grown exponentially since Injective's blockchain launch last year. And there has been consistently a lot of integrations that are ongoing. I think most recently wormhole deployed on top of injective to bridge over a lot of assets. I think Solana for first time to the cosmos ecosystem and on top of know with Axelr and IBC native integration, it kind of allows injective to practically arbitrarily connect to any type of new and hot projects out there with a lot of very neat composability features. And one of the things that's very special for injective, like I mentioned before, if you're building within a virtual machine environment, the gas economy and a lot of the considerations for it becomes very, very difficult for DeFi modules and DeFi use cases.
00:12:25.996 - 00:14:00.490, Speaker A: And so one of the most important part about injective as a blockchain is that there are core modules and core infrastructures that kind of allows developers to leverage and allow users to kind of go through this. How do I put it? Like a lighter or like a more optimized path towards performing a lot of chain native interactions. So one of the most important module within that set of web3 modules is the exchange module. So that basically allows for an mev resistant exchange module that completely resolves front running issues via frequent batch auction. And this basically allows during that block production period of roughly 1 second, there are no possible way for anyone to front run a certain order or to really censor it per se. And because frequent batch auction completely alleviates that and kind of prevents any type of sandwich attack issues, there's also on chain derivatives mechanism, since maintaining margin pruning positions, pruning order books, liquidating positions is certainly a very, very computationally expensive task within any type of virtual machine environment. It now becomes basically kind of this native module, which has very much bare bone logic that allows for developers to leverage that and to allow users to access those services at a very, very kind of low cost.
00:14:00.490 - 00:15:44.070, Speaker A: And as a matter of fact, one of the coolest things about injective exchange module is that the users does not even need to pay for gas when they're interacting with anything relating to the exchange module. And that's because one of the main consideration for Defi developers building applications on top of injective is that acquiring token for gas is certainly one of the biggest issue. And we've ran into it consistently within a lot of l two solutions and any type of l one solution, onboarding. And it really wants applications that are building on top of injective to really just face the users kind of head on in the most intimate way possible and let the user kind of just forget that they're really being powered by injective in the back end. And basically this allows applications to decouple from kind of like this kind of close ecosystem of a certain blockchain or l one, but rather empowered Ms like application developers where user can just kind of coming from whatever ecosystem or whatever multichain world, they can just interface with this application directly without having to go through a mental barrier of onboarding to a new l one. And obviously just utilize, due to the kind of restrictive nature of a lot of these modules, you basically need to have a vm layer and that's basically kind of like a smart contract environment. And for injective's case, it utilizes CoSM WaSM, which is a rust based WaSM environment.
00:15:44.070 - 00:16:45.980, Speaker A: And this basically allows for any type of new protocols to be built, new mechanism to leverage the native chain modules and to kind of build really cool stuff and really cool features that has never been seen before within kind of like general Defi ecosystems and also any type of applications within the multi chain world. So currently there are quite a few dexes built on top of injective. They each have their own really cool features. For example, Helix is the premier one, aka the Boring one, because it's built by injective labs. QWERTy allows for kind of like interaction with exchanges without having to actually sign the message via an offsea granting process which allows you to delegate permission for a certain restricted action, like placing limit order book to a certain address that can just automatically perform that action for you without having to go through your ledger. And those are time expiry, so it guarantees security as well. There's also dexterium wavelength, which is doing cool things, but I'm running low on time.
00:16:45.980 - 00:17:42.142, Speaker A: Oh nice. I got a minute. Yeah. And like I mentioned before, so the cosmosm is really where all the cool stuff gets to happen within the injective ecosystem. This is where developers really get to flex muscles, build a lot of really cool smart contracts, build very interesting primitives, and there are just so many cool things about cosmosm that I unfortunately don't have the time to get to. But I would love a lot of people to check it out on the injective website because there's also going to be an upcoming hackathon powered by the injective ecosystem to leverage the cosmosm layer and build a lot of the really cool applications or go through a certain track to build very specific tools, et cetera. And currently there are quite a few projects that has already deployed on top of injective utilizing the cosmosm layer.
00:17:42.142 - 00:18:42.496, Speaker A: Whitewell is a great example as report being one of the first kind of like new deployments by Astroport to recently the injective ecosystem has grown very much exponentially. There has been a lot of venture groups and also ecosystem initiatives and also hackathons are starting or that has launched to be able to support a lot of builders and developers that wants to build truly cutting edge and innovative defi applications. Because within kind of this infrastructure or within this injective environment, if you interact with the modules with extremely well, this allows you to build a lot of really bleeding edge and really innovative applications that really listening would have been tossed out as impossible within let's say like an ethereum environment or EVM environment or any type of other environment. Yeah, thanks for.
