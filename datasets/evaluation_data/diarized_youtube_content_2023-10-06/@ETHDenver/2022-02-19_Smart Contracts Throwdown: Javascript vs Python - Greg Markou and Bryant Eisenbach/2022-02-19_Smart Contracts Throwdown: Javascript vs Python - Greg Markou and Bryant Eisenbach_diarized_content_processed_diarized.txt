00:00:00.250 - 00:00:14.880, Speaker A: So we're here to kind of have a little debate. Greg and I always chat back and forth on Twitter about JavaScript versus Python and which language is better for developing in web3. And we kind of want to just put on a show for you today.
00:00:15.810 - 00:00:28.520, Speaker B: So one of the first things I want to ask everybody here is, you know, because we're talking about smart contracts and smart contract languages. How many of you are familiar with Java script, smart contracting language? Anybody?
00:00:29.450 - 00:00:30.200, Speaker A: Anyone?
00:00:30.970 - 00:00:47.430, Speaker B: Yeah, we got one back there. Yeah. Interesting. Do you want to come on up? Because I'd love for you to talk about it. There is no JavaScript one. The talk title got a little, got a little messy.
00:00:47.510 - 00:00:50.458, Speaker A: Yeah, but there is a Python one.
00:00:50.544 - 00:00:52.570, Speaker B: There is, and it's really good in Viper.
00:00:52.650 - 00:01:31.318, Speaker A: Viper, but we're not here to talk about Viper. It's more about how you develop smart contracts. Developing smart contracts is very high security activity. Writing the code in solidity, or Viper, is really only about 10% of the work that you're actually supposed to be doing. The rest of it is the framework around how you test and deploy it at scale. So I'm, of course, the Python maxi in this chat. I think Python is the best framework for developing and testing and deploying smart contracts because the data science community and cybersecurity communities are very used to working in Python.
00:01:31.318 - 00:01:32.870, Speaker A: But Greg disagrees.
00:01:32.950 - 00:01:38.554, Speaker B: Yeah, I mean, that's like cute, but have any of you guys tried to.
00:01:38.592 - 00:01:43.934, Speaker A: Use Python like Python? Python two, Python three.
00:01:43.972 - 00:01:51.070, Speaker B: What do you type in your cli? Because the first step to using Viper requires Python 3.2.
00:01:51.140 - 00:01:53.146, Speaker A: Well, deprecated. Two is deprecated.
00:01:53.258 - 00:01:56.030, Speaker B: Yeah, see, this is the problem. Nobody knows how to install Python.
00:01:58.770 - 00:02:12.120, Speaker A: Well, installing it is the hard part. Once you get past that initial bar, it's like the easiest language in the world. In fact, it's the number one most used language in the world according to Ieee. I looked this up this morning.
00:02:12.730 - 00:02:15.666, Speaker B: But every browser runs JavaScript.
00:02:15.858 - 00:02:21.298, Speaker A: Okay. If you want to counsel log, debug your smart contracts, then I guess you could use that.
00:02:21.324 - 00:02:24.620, Speaker B: That's why we have hard hat. You don't have that.
00:02:25.230 - 00:02:27.770, Speaker A: Well, what if we just built a real debugger?
00:02:31.230 - 00:02:31.980, Speaker B: Wow.
00:02:32.670 - 00:02:51.220, Speaker A: Mike Drop. So we really didn't plan this talk at all. We were just kind of bsing up here. But if anyone has any questions about what are the differences between using JavaScript or Python, pipe up with questions. We'll get you in there.
00:02:52.150 - 00:03:09.946, Speaker B: Yeah, this is also probably a good time to talk about probably tools as well, and where there's a lot of tools that exist nowadays in the smart contract space that perhaps a lot of people don't know about. Forge and even just like what you.
00:03:09.968 - 00:03:40.690, Speaker A: Do, aporks just releasing this week full out of beta. But we're a Python based smart contract development framework, and really the framework is there to support you writing tests. We use Pytest, which is a venerable testing framework, very mature, very robust for cybersecurity testing, I think a lot better than anything in the JavaScript ecosystem for testing, which is why we picked bytime.
00:03:44.710 - 00:04:11.530, Speaker B: Again, if you can install it. No, but for real, the one thing we do have in the JavaScript community, which I think a lot of people need to learn about, is Giorgios's library, forge. The thing is incredible. There's a stat out there. Basically, it helps you basically run your tests if you have DAp tools, which again, unfortunately Python doesn't have DAP tools. So can you even write tests in Viper?
00:04:12.290 - 00:04:15.760, Speaker A: You can write whatever you want in Viper. Sure.
00:04:16.770 - 00:04:18.046, Speaker B: That doesn't make sense.
00:04:18.068 - 00:04:21.754, Speaker A: It's not optimized like Forge or daptools is, but you can write a contract.
00:04:21.802 - 00:04:23.710, Speaker B: Point in case Viper is too new.
00:04:23.780 - 00:04:29.938, Speaker A: You can write a contract, lace it together and deploy it and run your test that way. That's all that Forge is doing.
00:04:30.104 - 00:04:44.790, Speaker B: Yeah, but Forge can reduce build times. There's a really good stat out there, maple finance, not sure if anyone's familiar with them. They went from a ten minute testing cycle to about like 45 seconds, and you just don't have that in Python.
00:04:45.450 - 00:04:57.066, Speaker A: That is true. I can't beat that. We built a GitHub action that reduced our testing runtimes from six minutes to one and a half. But getting to that 15 seconds is going to take a bit of time.
00:04:57.168 - 00:05:00.570, Speaker B: Now, one thing with Viper that we should talk about is readability.
00:05:01.550 - 00:05:53.070, Speaker A: Yeah, so one thing I really harp on pretty heavily is that smart contracts should be readable. So a lot of people that write smart contracts, they spend a lot of time doing gas optimizations, and that actually makes your code harder to read, harder to audit and less secure. So gas optimization is important, you should use it with care. But if you're going deep into assembly and solidity, it's going to be very hard for an auditor to understand all the interconnections within your contracts. So with Viper, we disallowed assembly writing in assembly because I had not seen a safe pattern to do so. But yeah, so when you're thinking about design, you should be thinking about reading, because 99.9% of the usage of your contract is not going to be somebody leveraging it in their own design.
00:05:53.070 - 00:06:13.220, Speaker A: It's going to be reading up on how to use it, how to work with it. Security auditors need to read it so they can understand your code. Public bug bounties, they need to read your code so they can apply for your bounties and help protect your code. Live in production. Reading, reading, reading is really the fundamental theme here.
00:06:14.150 - 00:06:29.366, Speaker B: Yeah, I think scoping is one of the big ones there. In the last little while that I've been using it, it's been really nice to understand where global variable states affected versus local state modifiers know on top, which is also really nice. Doesn't clutter the constructor.
00:06:29.398 - 00:06:32.140, Speaker A: Yeah, modifier does not rug actually.
00:06:34.990 - 00:07:28.010, Speaker B: But you know, since we're here at E Denver, it's a little bit more newer, people showing up. We should probably dive into kind of like an ideal path forward, because maybe diving into Viper is not the first thing you'd want to do due to the nature of the tooling and that exists, and that's why JavaScript is really good, because it's the most accessible language that exists to this day. Right. Your grandmother who goes on Facebook, she has access to JavaScript, so there is a use case there as why it's, you know, if you are new to the space and you'd want to jump in, it's probably the best place would be to start in hard hat, something like that, and learn the fundamentals of how these testing frameworks work. But the minute you actually want to start getting real optimizations and real power out of it, that's where viper works. Works well. But there's a caveat.
00:07:29.150 - 00:07:47.582, Speaker A: I would even maybe push back on that, because most schools and universities now are teaching Python as part of their curriculum. They moved on from Java to Python. So Python is like most people's first exposure to programming. It's also one of the easiest languages to learn, which is probably why it's one of the most popular.
00:07:47.726 - 00:07:49.822, Speaker B: Until you don't know where your statements.
00:07:49.886 - 00:07:52.034, Speaker A: End, until you can't install it, until.
00:07:52.072 - 00:07:57.880, Speaker B: You just can't read it. Curly braces are great, you just can't get better than that.
00:07:59.610 - 00:08:43.460, Speaker A: But yeah, the python tooling for many years was kind of under supported in the web3 ecosystem just now. That's what our company is trying to solve, help making Python more accessible in web3 for development purposes and particularly for data scientists. One of my big thesis behind apeworks is that data scientists have been supremely undersupported in the web3 ecosystem, and yet the duality of that is the data produced by these smart contracts are some of the most valuable parts of using smart contracts in production. You're watching token flows, you're trying to understand what's happening with a particular protocol. The ability to deeply analyze the data that those protocols produce is like number one for me.
00:08:43.990 - 00:08:52.470, Speaker B: That's a good point. Let's talk build sizes on the output, let's compare. You showed me some statistics yesterday, of which contract?
00:08:53.130 - 00:09:25.106, Speaker A: Oh, yeah. So I've been developing an ERC 46 26 yield bearing vault standard with some fellows from Rari, and yield protocol, I think. And I did a side by side comparison of viper implementation versus a solidity implementation using open Zeppelin ERC 20 token, and literally a fifth of the size of the bytecode, the Viper version, it cuts it by 80%. That's pretty crazy to me now, because.
00:09:25.128 - 00:09:35.374, Speaker B: Everyone'S going to ask, this is kind of why developing JavaScript is nicer than Viper. How many auditors can actually tell you if your code's safe?
00:09:35.502 - 00:09:54.300, Speaker A: If you had asked that question two years ago, not many auditors were familiar with Viper. But with chain security coming back on the scene, they're the number one Viper auditor. So if you are writing a Viper project, chain security would be my top pick for auditors to look at your code. But more people are learning it.
00:09:54.830 - 00:10:07.310, Speaker B: And your top pick for solidity auditors are still chain security. Chainsafe. Wait, what's in your back pocket.
00:10:09.330 - 00:10:10.080, Speaker A: Here?
00:10:10.690 - 00:10:11.630, Speaker B: Magic.
00:10:14.210 - 00:10:30.530, Speaker A: Okay, we really did not plan this at all, but, yeah. So you got two deep web, three experts. We've been in the scene for quite a well. If anyone has any questions, please pipe up, because we're running out of things to talk about. Bye.
