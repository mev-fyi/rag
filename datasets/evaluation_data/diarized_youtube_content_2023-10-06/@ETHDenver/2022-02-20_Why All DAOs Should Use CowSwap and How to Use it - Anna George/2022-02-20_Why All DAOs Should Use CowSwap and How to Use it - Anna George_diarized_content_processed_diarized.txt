00:00:00.250 - 00:00:23.646, Speaker A: Welcome, everyone, to this talk, and thank you so much for the lovely introduction. So that's actually true. We have been spinning out of gnosis last week. So our project is, in a way, one week old at this point. Yeah. So who in this room has actually heard about cowswap before? Ooh, it's a lot. Okay, that's nice.
00:00:23.646 - 00:01:56.054, Speaker A: Okay, I hope this talk is not too repetitive for you, but I try to make it a little fun. First, and most importantly, of course, what is cowswap? And to answer this question, I first wanted to show you a couple of statistics to show that basically we launched last year in May, and then about June, July, we started to get a lot of traction. And until this date we have almost 7 billion in trading volume and about 50,000 individual users. So this doesn't really answer the question yet what cowswap is, but it tells you that it is relevant and it's going to stick around for a while. All right, but now back to the question, what is cowswap? Cowswap is a meta Dex aggregator. But what does that mean? Hasu, who probably many of you know from his famous podcast about the same time, when cowswap launched last year in May, he was wondering, he was complaining, basically saying, wow, there used to be so many different dexes that I went out and had to check the prices on because I never knew for which token pair would get the best price. And then the first Dex aggregator launched, and then he knew, okay, that's the place where I go to get the best price.
00:01:56.054 - 00:02:40.854, Speaker A: But then more Dex aggregators launched, and the more Dex aggregators, they're out there. Again, you have the same problem. You don't know where to go to get the best price because it highly depends on the token you're trading and the amount of volume you want to trade at the same time where you would actually get the best price. And this is one of the problems that cowswap fixes. So essentially, if a user, let's call him Mr. Octopus, goes to cowswap and places a trade, cowswap checks everywhere. It checks all the existing on chain liquidity sources, and it also checks all the existing Dex aggregators to try to see which one offers the best price.
00:02:40.854 - 00:03:18.050, Speaker A: And this is exactly where your trade is going to be settled. But if you think this would be everything, it would be kind of boring, right? I mean, that wouldn't be innovative if that would be everything that kowstrop would be doing. So of course there's more to it. So let's try to unravel this little mystery box. And this mystery box, essentially, is a batch layer. But to explain what a batch layer is and what the batch layer actually does, I have a little example. So let's assume you're in the Denver Zoo.
00:03:18.050 - 00:03:52.014, Speaker A: The zoo has many compounds for many different animals. There's a compound for the llama, and of course, there's the aquarium with the octopus. So the llama, last week, there was a little annoying boy that was throwing a ball into the compound of the llama. But the llama doesn't really want to have this ball. What the llama really wants is a chewing gum. Then there's the octopus. And the octopus, he has chewing gum because another little annoying kid was throwing chewing gum into the aquarium the other day.
00:03:52.014 - 00:04:27.450, Speaker A: What the octopus really wants is basically a ball that it can juggle around on its many arms. So what can Mr. Octopus and the llama do? Luckily, both are aware that in the zoo, there is one very smart animal living there. It's a unicorn. And they know exactly that this unicorn is willing to take anything and swap anything, but it is doing that for a very hefty fee. It's taking 0.3% on all the assets and all the volume that it's trading.
00:04:27.450 - 00:05:08.100, Speaker A: But since Mr. Octopus really wants to have the ball and the llama really wants to have the chewing gum, they're willing to pay this hefty price. Now, imagine that on the way to the compound of the unicorn, the llama and Mr. Octopus, they accidentally run into each other, and they realize that they can directly exchange their assets with each other. Then, of course, the unicorn is going to be sad, because the unicorn is not going to make a profit, and it's going to cry a little bit. But the llama and the Mr. Octopus, they're super happy because they make a way better deal.
00:05:08.100 - 00:05:59.410, Speaker A: Now, imagine that there's way more animals who are living in the zoo, right? And all of them, they want to buy something and exchange it for something else. So if they were to meet in a giant bazaar and just exchange the assets with each other, they all wouldn't have to pay any fee to the unicorn. Again, the unicorn is really sad, but all the other animals, they are really happy. And this is exactly what cowswap does. It's basically this economic phenomenon of finding these coincidences of different people wanting to have what the other person is willing to sell is called coincidence of once. Hence the name cowswap. So really what it is, is it facilitates peer to peer trading between different people.
00:05:59.410 - 00:06:51.902, Speaker A: And, yeah, basically, now you know exactly why cowswap is called cowswap. All right, now let's take it a little bit more to the abstract level to really understand how cowswap works. What you already know is basically that if an individual trader, let's call him Mr. Octopus, is going to cowswap and places a trade, he will get the best possible price that's in the market, because there's this in between layer of external parties called the solvers, who will always look for the best price possible. But now, the more animals actually join the party, the more people at the same time want to execute a trade. Increasingly, there is a likelihood that these trades can be directly matched together. And this is the second part that the solvers do.
00:06:51.902 - 00:07:50.050, Speaker A: They basically check out what is the order book, what are the different orders that are in the order book. They try to match them all together, and then only the remaining volume that can't be matched directly together is being forwarded to the on chain liquidity. And this comes at a huge price advantage for our users because basically they don't have to pay the protocol fees, they pay way less gas, because they don't have to interact with the Uniswap smart contract or whichever other underlying smart contract. And they also have a reduced price impact. And of course, there's never going to be the perfect use case scenario where you have 100% matching of the different assets. There's always going to be some leftover amount. But this leftover amount, if this reduced leftover amount only is being settled on the underlying liquidity sources, you still manage to save a lot of fees.
00:07:50.050 - 00:08:31.306, Speaker A: Okay, but why you're already here is basically to understand why it makes sense for Daos to be using kaosa. And what was all this animal talk? Okay, how would you describe a Dao? A Dao usually consists of a multisig. It's very decentralized, so it has many different individual owners. So a multisig is very, very secure, but it comes at a disadvantage. A dow is very slow. So in a way, a dow resembles a turtle. All right, now imagine you have this perfect dow.
00:08:31.306 - 00:08:58.054, Speaker A: You have a dow of 20,000 members. You're super secure, you're super decentralized. But now you need to make a trade. It could be that you're super risk averse. Basically, you want to buy some stable coins, or you need to pay out a bounty, and the bounty has to be paid in a different asset. So you have to place a trade. What do you do? You have the option to do what you always do.
00:08:58.054 - 00:09:33.250, Speaker A: As a user, you could just use whatever exchange you've been using before. It could be uniswap, sushiswap, one inch, and you basically do a normal transaction and a normal trade. You use the default slippage tolerance that's predefined. And then you also commit to the execution path, because this is what you do when you trade on one inch, for example. Right. You always immediately commit to which path your order is taking. Okay, so you set up this transaction, and since you're a dow, you need to collect the different signatures.
00:09:33.250 - 00:10:05.418, Speaker A: So the raccoon is super responsible, super stoked. It immediately signs. The monkey also is jumping on the train and say, yeah, let's do this transaction. Immediately signs. But then there is the puppy, and the puppy has gotten the munchies, and it's going out for a midnight snack because it really wants to eat some cookies. And so completely ignores the transaction in the Dow. And then it takes hours, and after hours, it comes finally back and realizes, shit, I have to sign a transaction.
00:10:05.418 - 00:10:39.990, Speaker A: So it signs and executes the transaction. But what happens? The transaction fails. The trade fails. Why did it fail? Because it waited for too long. And by the 2 hours that it was done, the prices had changed and the limit price that the Dow was basically setting up was no longer achievable. So the trade fails. And probably the Dow wasted $200 in transaction fees on this failed transaction.
00:10:39.990 - 00:10:57.938, Speaker A: So the turtle is sad. Here come another day. The turtle thinks hard. This time I've gotten much smarter. This time I'm going to adjust the slippage tolerance. I'm going to put 2%. The raccoon approves.
00:10:57.938 - 00:11:24.346, Speaker A: The monkey approves. Even the puppy approves because the puppy feels really bad about the last time. So this time it makes very sure to be on time. But what happens? Of course, the slippage is eaten away by me v bots. So the Dow loses 2% on the entire trade. And again, the turtle is sad. Here comes yet another day.
00:11:24.346 - 00:12:07.246, Speaker A: And the turtle thinks, okay, this time I really learned from the experience. I'm just going to transfer all the funds that I need for this transaction to an externally owned account. And of course, the owner of the account is a fox. As you might know from all the children books, the fox is usually not a very trustworthy animal. Right? So it might just be very tempted to steal those funds. But let's assume that for the sake of this argument, the fox is actually resisting its temptations, and it's not stealing the funds. Unfortunately, it's still an externally owned account.
00:12:07.246 - 00:12:46.364, Speaker A: And so it can very easily get compromised. And this is what happens. The entire funds get stolen. And again, the turtle is very sad. What now? Luckily, the turtle was at an event in Denver last week, and it came across around all its old cow friends. So after meeting its friends, the cows, it decided to place the next trade on cowswap. So what does it do? It sets any sort of slippage.
00:12:46.364 - 00:13:17.500, Speaker A: It feels super free to basically set a slippage of even 10%. It doesn't worry. It is also not committing to any execution path. It just says, basically, these are the tokens I want to trade. This is the limit price I'm willing to get. And that's the slippage tolerance of 10% I'm willing to pay. The raccoon approves, the monkey approves, but the poor puppy, because it has eaten too many cookies, ended up in the hospital.
00:13:17.500 - 00:14:03.752, Speaker A: So now the puppy is in the hospital for two weeks and it cannot sign the transaction. Two weeks pass, and finally the puppy is out of the hospital and finally manage to sign the transaction and execute it. What happens? Not only is the trade executed, but also the entire slippage tolerance is being protected. So the 10% are not taken away because cowsop essentially looks at the time of execution. What is the slippage tolerance that is needed to, at this point in time, successfully execute a trade? And it realizes maybe only 0.6% slippage are needed after two weeks. So what it does, it takes a 0.6%
00:14:03.752 - 00:14:33.984, Speaker A: slippage, it adds 0.1% slippage, just because you never know. And it executes the trade. That means the Dow still keeps its 9.4% slippage, which on any other exchange, it would have lost. And on top of that, because it didn't have to previously commit to a specific execution path, the solvers of Kaoswap are even at this moment of execution, cross checking again. What, right now is the best way of executing this trade.
00:14:33.984 - 00:15:26.280, Speaker A: So the Dow finally becomes the best possible price for the transaction that it had been trying to submit for ages. Finally, the turtle is happy. All right, this is a little bit of a very dense slide. I tried to just, on a more abstract level, explain again how cowswap works and what was happening to the turtle trade. So what happens if a user is doing a transaction on cowswap, they basically only have to sign an order that includes the limit price, the slippage tolerance, the expiry date, and the buy and the sell token. Once they have submitted this order, it ends up in the order book. And what happens now is, first of all, the two things that I had previously mentioned.
00:15:26.280 - 00:16:19.270, Speaker A: So, first of all, the servers are double checking. Are there any other orders in the order book that I can match this trade with? And then they're also checking for the best possible execution path. But again, they're doing this not when the first transaction was done in the DAO, but only at the time of execution. At this moment, where the servers are trying to submit the order on chain, this is where they look for where is the best path. Then on top of that, as I explained previously, the servers only take the slippage tolerance that's actually needed to successfully submit the trade. And then there's a few cherries on top, which is that also in case that for whatever reason, your trade has to be resubmitted, because the price point just change at time of execution, then the service resubmit the order for you. You don't have to become active nothing.
00:16:19.270 - 00:17:21.900, Speaker A: And you don't even have to pay for failed transaction, because it could always be that you, for some reason, still picked a very cheap limit price and very cheap slippage tolerance. And so the transaction fails, but you do not have to pay for this. And then the last cherry, basically, is that your transactions are protected against MeV. And there's a two dimensional protection layer, essentially, first of all, all the trades that are directly matched peer to peer with the other orders that are in the order book, they are fully protected against MeV. But then also the solvers are integrating the flashpods, RPC and the Eden network whenever they submit your orders on chain, and they're very flexible. So any other MEV protection mechanism that will appear on the market, the servers will be integrating those, because they're also competing with each other. So they also always want to make sure that they get the best possible price for you.
00:17:21.900 - 00:18:15.034, Speaker A: All right, I think I only have 2 minutes left or so. So, summarizing, first of all, again, on cowswap, you don't have to pick a fixed execution path. Your slippage is protected, you don't pay for failed transaction. You always get the best possible existing price. You do not have to hold ease, because since you're only signing a transaction, the gas is actually taken, the transaction cost is taken from your cell token, so you do not have to hold ease and pay an eth. And now comes basically the real USP of Kausa. Number one is that it makes moo always when you had a successful trade, because I mean, who wants to weigh around and really wants to wait for that transaction to successfully pass? So you don't have to wait.
00:18:15.034 - 00:18:48.486, Speaker A: You just keep the sound on your computer on, and at some point you hear a very satisfying sound. Moo. And then the very last USB is while you're waiting for your transaction to execute, you can play this little game, the cowrunner. And that's it. Anna, that was a very moving presentation. We have time for just a few questions. One question.
00:18:48.486 - 00:19:32.382, Speaker A: One very good question. So are you tokenizing and the cows are up? And if so, how is the profits of the protocol tied into the price of the token? All right, it is a long question for 40 seconds. I tried to answer it in a very short way. So we did spin out of Nosis last week, Friday. Since that moment in time, we do have our own protocol token. And actually that was also a very interesting process because it was Nosis Dow who voted on us becoming independent. So the initiation of our dow was created by another dow.
00:19:32.382 - 00:20:11.454, Speaker A: Pretty cool. But coming back to the question, yes, we have the token and oh, my God, 30 seconds is a short time. So the token actually has many different use cases that still have to be voted for by our own cow dow now. But essentially the idea is that first of all, it's playing a very important part for the solver mechanism. So to guarantee that solvers are actually behaving correctly, they have to stake the token. And then basically they are getting rewarded for their efforts of always finding the best prices for the users in cow tokens. And then there's some other advantages for users who are holding cow.
00:20:11.454 - 00:20:25.600, Speaker A: For example, by holding cow in their wallet, they get a fee reduction when they trade on cowswap. There's more, but I don't know if you have time. And basically we have a cow forum that also launched last week and all the different things are described in there. Thanks.
