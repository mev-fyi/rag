00:00:05.590 - 00:00:29.730, Speaker A: Good afternoon everyone. Happy to see everyone here. Hope your east Denver is going well up to this point. Today I'm going to talk about the developer console for near. You can learn, create and operate all in one place. First of all, who am I? I'm Josh Quintel. I'm a product manager on the developer platform team at near, which is rebranding as Pagoda you may have saw at our booth.
00:00:29.730 - 00:00:58.860, Speaker A: So what is near? First of all, near is a proof of stake sharded layer one blockchain. It has a couple great extra conveniences that are nice for developers. So we've got like native named accounts and a unique access key model. So this is really great. Of course for your users, they get a named account like they're used to on their more traditional web two platforms. This is all built in. You don't need like Ens or anything like that.
00:00:58.860 - 00:01:35.640, Speaker A: Access keys allow you to control access to your contracts in a more granular way than just simply allowing everyone to call everything, but also not requiring you to modify the contract, which is very interesting. Gas fees. A portion of the network fees actually go to developers. So the contract that's responsible for processing a transaction actually receives a portion of the network fees involved in that transaction. You can upgrade contracts in place, actually, as long as the state serialization doesn't change. You can do an in place upgrade of a contract. And I'll actually demonstrate that here today in a little bit.
00:01:35.640 - 00:02:21.658, Speaker A: The virtual machine on near runs Webassembly, so you can target it with languages that you might already be familiar with. Currently we support rust and assembly script, but we're working on a vanilla JavaScript SDK as well, which hopefully is super compelling to web two developers. So talking about the developer console, how does it actually fit into the software development lifecycle? And so here, taking a look at this very simplified version of it. But you're going to make your DAP, let's say you've planned it out, right? You know what you're going to build. So you actually need to do the coding work. You use our CLI, write your smart contracts, then it's time to test them. You spin up a sandbox node, you have your workspaces, you test your smart contracts.
00:02:21.658 - 00:03:01.234, Speaker A: Finally they get deployed to a network. But then what happens after that point, right? You're going to need to be monitoring and managing these contracts and that's where the developer console comes in. So with that, I'm going to go and do a little demo here. We're going to talk about analytics and some contract aggregation that relates to the monitoring portion I just talked about. But another interesting thing is that, being that this is an operations platform and your daps hopefully going to be using it once it's launched. We have an opportunity really to onboard people in an interesting way. So rather than just sending you to a tutorial, there's actually like an interactive element on top of this.
00:03:01.234 - 00:03:41.778, Speaker A: Whereas you're going through it, you see feedback about what you're doing in a quick info card. So without further ado, let me just show you what I'm talking about rather than you continually having to watch me talk over bullet points. So this is the developer console. And so what we're looking at right now actually is the tutorial. So when you started up, you've signed up, you could of course create a blank project which is just for your existing DAP or for a new DAP you want to develop. But there's also another option to create a tutorial project, this being one of them. You can see with that badge up there and this particular one is a really great one.
00:03:41.778 - 00:04:20.880, Speaker A: It's an NFT zero to hero our Devrel team put together. So this takes you from knowing nothing about developing on Nier all the way up to a system of smart contracts for a full fledged NFT marketplace. So today I'm going to look at the minting portion in particular, and you're not going to have to watch me live code or anything. We're just going to go right down here to the already built contract. And so you can see in the lower right hand corner there's this live contract data card here. And so this is what I was talking about. As you're going through the tutorial, this card is going to update, show you information about your progress and about the contract itself.
00:04:20.880 - 00:04:56.620, Speaker A: And so it really makes it a lot more fun and engaging to go through these tutorials. So coming over here, I've already got the repo cloned, I've already checked out the correct branch. In fact, I'll show you right here around the minting branch because I wanted to just deploy the completed version of it already for you. So with that, let's build it here. You don't need to worry about the warnings since it's part of a tutorial. This code is unused because you'll use it in the next step. But in this case we're not.
00:04:56.620 - 00:05:29.300, Speaker A: So now we've built our contract, we're going to actually go and deploy it here. But before we do that, we need to tell the network who we are. There we go. And in this case, actually, I'm going to do that one more time because I want to actually create a new account here so you can see this. There we go. So the CLI wants me to log in. We go here to near wallet.
00:05:29.300 - 00:05:57.656, Speaker A: We'll create an account F Denver 2022. Five sounds good. We'll reserve that. Don't do this next part. Obviously, I'm not going to use this after this tutorial. So it doesn't matter that the passphrase is here, but obviously never show your scene phrase to anyone, especially on stage. So now we need to get word number eight here just to confirm.
00:05:57.656 - 00:06:40.334, Speaker A: Looks like it's smooth wifi. Once the account's created, then here we go here, it's just asking us to connect. Here's a list of the permissions. Since it's the CLI and we're going to be deploying contracts and things, it needs essentially full permissions, just confirming the granting. And here we go. We are now logged in. So let's pop back over to the CLI and actually deploy that contract.
00:06:40.334 - 00:07:17.498, Speaker A: So first things first, actually we're going to set a variable in our console here to make this or in our CLI to make this a little bit more convenient for us. There we go. And so now for the remaining steps, we don't need to type out that East Denver 2022 address anymore. And here, just confirming. Yes, that variable is definitely our name there. So now to the actual deployment. So once when we did that compilation step earlier, it created a Webassembly file because as I mentioned, the virtual machine on near runs Webassembly.
00:07:17.498 - 00:07:33.662, Speaker A: So we point it to that wasm file and then provide it an account ID. And look at that. That was very fast, even with the Internet. So cool. That's already confirmed. We can see that transaction in the explorer right here. It's going to reach finality here momentarily.
00:07:33.662 - 00:08:09.600, Speaker A: And then now this really comes the part where we can start to see some interactivity here. So we go to East Denver 2022 five down here in our quick info card and look at that. We can see that I created the account and it knows there's a contract there, but it also knows that it's not initialized. So we're going to do that next. And I'll keep both of these on screen so you can see actually that the card is going to respond in real time here. And look at that. There we go.
00:08:09.600 - 00:08:29.000, Speaker A: So it sees that it's initialized. We get some metadata about the contract, including the name, the spec and the symbol. But oh, this is weird. When it's minted in this tokens area, we don't have this NFT function implemented. But you know what? No big deal. Let's just continue through. We can ignore that for now.
00:08:29.000 - 00:09:02.622, Speaker A: So let's actually mint an NFT. Now that we've got this deployed, it's calling the function here. And look at that, it's done. But oh no. Oh that's right. Oh, I needed total supply and this tokens function to actually see my NFT down here. And the one I just deployed doesn't have that.
00:09:02.622 - 00:09:52.878, Speaker A: What am I going to do? Well, as I mentioned earlier onir, you can actually upgrade this in place once again, the only asterisk here is that you cannot change the serialization of the state of the data. But luckily in this case we are just adding accessor functions so we will have no problem with this. So I've switched over to the enumeration branch. That's the next step in the tutorial where you're actually going to be adding these functions that will allow you to show the tokens by user and also get an enumerated list of the total that are minted. So we're just going to build that new version of it. And that is now complete. And so now we'll simply rerun that deployment and oh, and look at that.
00:09:52.878 - 00:10:52.450, Speaker A: And it alerts me, yes, there is a contract already deployed here and it asks if I want to proceed. In this case, like we said, I know that it's safe, I'm not changing any state, so it's going to do that. And look at that. Lo and behold, now I can see the number minted and also the one that I had already minted previously is in there. So we were able to upgrade that contract in place without anything going sideways there. So I definitely encourage you to go back and go through the whole tutorial. Like I said, it starts from baseline, like have never developed on near you start interacting with a pre compiled contract and then it builds up through the steps, kind of what we went through just now, minting and deploying your NFT contract all the way up to, let me get this out of the way here, all the way up to adding enumeration approvals, royalties, and then finally building it up into a full fledged system of contracts for our marketplace.
00:10:52.450 - 00:11:26.670, Speaker A: It actually, while I'm over here. So once we've got this deployed, let's say we've completed this tutorial, you can actually convert this into a full fledged project. But there are some other things, obviously, that the console can do. So I mentioned it's an operations focused platform outside of this tutorial project. So we have this contract screen here which allows us to see aggregate data about our various contracts. In this case, we just have one. But if you had multiples, you would see an emerged transaction list down here.
00:11:26.670 - 00:12:19.834, Speaker A: You can quickly link out to the Explorer. So we're kind of building up towards this vision where this is the nerve center of your DAP essentially, and then of course analytics over here. So there's the RPC service attached to this that has an API key. And so by using that we're able to actually give you now some insight into your usage of the RPC, including your response codes, total calls, calls, by method breakdown, things of that nature. So super nice really on the bookends of your experience with Nier. Right, getting started through that tutorial and then monitoring and operating your application. So future, looking a little forward, you kind of saw a bit of what was available today, but in the future, so that included the RPC service, some of those basic usage analytics around the RPC, the contract screen and those interactive tutorials.
00:12:19.834 - 00:13:03.962, Speaker A: But in the future we're going to be adding things like an indexing service. So if you have interacted with an NFT marketplace or something that's having to wrangle, filter and sort a lot of on chain data, typically you employ an indexer in between there to make that manipulation a little more easy. We're going to make that even easier by just giving you a turnkey indexer service. On the monitoring side, we'll be adding alerts and actions so you can actually trigger certain functions on your contract if a given condition is met, and then better analytics and visual deployments. And so finally, to drive this all home, especially the alerts and triggers part, I'm going to just go through a scenario real quick. Actually, a series of scenarios kind of show you a bit of the future of this. So the first scenario, a defi smart contract's been hacked.
00:13:03.962 - 00:13:35.078, Speaker A: How could the developer console have prevented this? So using those alerts and actions that I was mentioning earlier, you can see here, we would set one up. In this case, we've got our vault contract up here. We set some conditions. We want to know if the balance changes on the order of 20%. And this transaction isn't coming from our allowed list. So we, as the owners of the DAP, would potentially want to withdraw from the treasury. So we mitigate that there and then what's going to actually happen? We'll get a notification via email or text.
00:13:35.078 - 00:14:17.842, Speaker A: But more importantly here, we're actually going to call a pause function on this contract and mitigate the loss of our funds. So when that happened, you'd see something like this in your inbox. So we note that the balance was draining on this contract. It went down 20% as we set that threshold, we see the conditions and then we also see the actions down there that'll link out to the explorer so you can see exactly what happened. And in this case, we just saved your hacked DFI Dap 80% of its treasury rather than losing all of it. So then next up, talking more to the analytics portion of things like an NFT marketplace wants to see their best performing collections and artists. How would we do that? Well, you'll be able to build your own dashboard in the future.
00:14:17.842 - 00:15:00.386, Speaker A: It's currently like pre configured analytics, but combined with that indexer service we're working on the ability for you to actually query any type of contract data, combine it, visualize it, et cetera. And so in this case, we just have our top ten artists by revenue and we're going to visualize it as a bar chart. So just quick reminder before I leave you, what's here now, definitely go to console Pagoda dot co and test all this out. We've got that interactive tutorial. You saw me walking through the RPC service with the operating analytics, that nicely aggregated contract screen, and of course that all links out very conveniently to the Explorer. And there's a bunch of people from the dev platform team here. Couldn't put everyone's name up here, but there you go.
00:15:00.386 - 00:15:32.000, Speaker A: If you see any faces on this screen, definitely come up to any of us and talk about all things developing on near. And of course we have a booth in the shill zone P five. And then lastly I'll post these slides online in my Twitter and then near will likely retweet it. Then you'll be able to click all of these links here. So I've got proposals about our new Cli links to all of our tools, ways to get involved, and some nice applications down there like Astrodow in the lower right hand corner. All right, thanks everyone. That was it.
00:15:34.290 - 00:15:37.534, Speaker B: We actually have some time left, so if you would like to take some.
00:15:37.572 - 00:15:54.350, Speaker A: Questions from the audience, I would love to do that. Yeah. Anything I presented on or just about developing on near protocol, even in general, I'm also happy to not answer questions.
00:15:55.760 - 00:16:01.756, Speaker B: Or maybe if there are a few projects on near that you're particularly excited about that you want to mention briefly.
00:16:01.948 - 00:16:15.424, Speaker A: Yeah, definitely. So that one that was in the lower right hand corner of my appendix. Slide here, Astrodou is the easiest way to start a Dow, essentially, so you can. Yep. There we go. Thank you. In the lower right hand corner, Astrodou.
00:16:15.424 - 00:16:30.852, Speaker A: Definitely check that out. Allows you to spin up a Dow just using a graphical interface and set a lot of different parameters. It's very flexible. Nice system there. On the defi side. Ref finance. Ref finance on near is really cool.
00:16:30.852 - 00:16:43.230, Speaker A: And the two NFT marketplaces I would highly would be Paris IO, which is paras and Mintbase, are the two prominent ones on near. So definitely check them out.
00:16:45.200 - 00:16:52.280, Speaker B: Well, if there aren't any more questions, you can always catch Josh at the near booth. And thank you. Warm round of applause for Josh Quintel.
