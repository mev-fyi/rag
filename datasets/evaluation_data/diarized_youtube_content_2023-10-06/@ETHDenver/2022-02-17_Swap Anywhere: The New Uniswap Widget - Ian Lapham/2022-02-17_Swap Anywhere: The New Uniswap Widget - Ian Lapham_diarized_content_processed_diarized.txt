00:00:02.330 - 00:00:27.782, Speaker A: All right, hi, everyone. Thanks for coming today. So, my name is Ian. I'm a software developer at Uniswap Labs. I've been at Uniswap since 2019. And today we're going to talk about the new Uniswap swap widget. So I'll start with giving you kind of an overview of what swapping looks like across the web today, current integrations, and how you would do that now on your current site.
00:00:27.782 - 00:01:21.650, Speaker A: Then we'll get into the new swap widget, what that is the new features that we're offering with it. And then after explaining that for a bit, I'll actually do a demo of some code to show you how you would integrate swap widget in your own site. At the very end, we'll go over some information we have around bounties that we're doing for the hackathon this week. So I think it's interesting just to take a look at some stats around the Uniswap protocol right now, just to get some context for what people are doing. So if you look at Uniswap v two and v three, these stats were taken maybe a week or two ago. We're seeing 15 billion plus trading volume per week, over 3 million unique user addresses of all time, and almost 80% share of the dex volume. So it's pretty safe to say that majority of swapping across Dexes is being done on Uniswap.
00:01:21.650 - 00:02:15.800, Speaker A: And because of that, I think it's important to look at how people are doing that swapping and how websites across the web are managing that. So I think the next important thing to think about is how swapping is a core tool in the web3 toolbox. Because swapping and this specific pattern that you can see here didn't used to always exist when we were swapping assets before people would actually view that as a buy or a sell instead of a swap. So this idea of a swap is actually something that hasn't existed forever. But with the creation of automated market makers and Uniswap, this pattern has grown to be really popular across web3. And you can make an argument it's one of the most common patterns. An interesting stat is that the Uniswap interface has been forked almost 3000 times.
00:02:15.800 - 00:03:04.546, Speaker A: If you're into DFI, you've probably seen forks of the Uniswap interface for various other things. Sushi, yams and all these other things take this pattern and they work off of it to provide interfaces to their protocols. So it's obvious that swapping is an important thing, and it's done a lot. But there are some issues with how you would go about building your own swap UI right now if you want to do that. So for your project, if you wanted to create the same experience that you get on Uniswap interface, you have a couple of options right now. One that is similar to what I just mentioned is forking the Uniswap interface. So that is when you would go to the open source code on the Uniswap GitHub.org
00:03:04.546 - 00:03:44.500, Speaker A: and you'd fork our interface, which would give you an exact clone of what is on the Uniswap interface now, and you can go from there. So that's good because you get a lot of boilerplate. It's not a lot of work to get a starting point, but there is a lot of additional work to customize that experience for your users. Also, as Uniswap makes updates to that repo over time, you miss out on those. So it requires a consistent development effort, maintenance, and a lot of development time to create that experience. Another option you have currently is using an iframe. So it's possible to take the Uniswap interface and embed it within a portion of your website.
00:03:44.500 - 00:04:30.398, Speaker A: There are issues with this as well, because there's no way to really customize this experience. The iframe on the current Uniswap interface is not optimized for this. So you'll see UX that's somewhat squished and it probably doesn't play well within whatever designs that you have on your site. And also, it's tricky with wallet connections. If you have your own wallet connection on your site, and then you have a second wallet connection, UX within an iFrame, it can be a little strange for users. And the last option that you may want to use now for trying to achieve this would be using the Uniswap SDK. So the Uniswap SDK is great because it gives you access to low level tools to build something from scratch related to swapping on the Uniswap protocol.
00:04:30.398 - 00:05:14.880, Speaker A: And this is good if you have a use case that requires a lot of custom implementations and you want the lowest level access to tools around swapping. But again, if you want a quick integration or something that's simple, this would still require a lot of work and a development team to maintain over time. So the point of looking at these is just to get an understanding that while these tools can be good for some people, it does take time and effort, and it's somewhat difficult right now to mimic this swapping interface within your own projects. So now we can move on to the new swap widget. So I'll escape right here. Actually, no, you can see this. So this is a quick video to give you an idea of what this looks like.
00:05:14.880 - 00:06:09.140, Speaker A: So you can see an experience here that's similar to what's on the Uniswap interface today. You can select tokens, you can input amounts, confirm swaps, look at swap details, and this is what you would actually see inside of the widget. You can see you can submit transactions and you get details around the transactions you're submitting and the swap you're doing. So the swap widget itself is actually a react component, so it can be used within any react project that you're working on. You can install it using NPM or yarn, and with it you get a polished Uniswap UI right out of the box. And within that widget you have access to the Uniswap V two and V three token pools. And also within the widget is the auto router routing package that will handle quote fetching for you to make sure that users using the widget are getting good rates when they use it.
00:06:09.140 - 00:06:45.070, Speaker A: So while this can be used for swapping, I think it's important to think about the broader space of use cases that this is actually good for. So you can see you can use this for swaps, but also this could be used as part of the communities you're building. So an example here would be friends with benefits. Say you want to embed this on the page because people need access to the token for going to events or participating in other community activities. You can streamline this process to make it easy for your members to buy certain tokens. There are other types of use cases. For example, on the right here you could see wrapping and unwrapping eth.
00:06:45.070 - 00:07:30.090, Speaker A: Another thing is that widgets can take curated token lists, so you can curate the tokens that are shown to users. So right here we have the role token list. You can see these are all social tokens, but you can imagine other types of token lists as well. So you could maybe do the curve token list, you could do Uma things like that so that you get a curated list and you can kind of build experiences around that. Another important thing to note is that the swap widget does support all networks that Uniswap is deployed on. So right now we have Ethereum, Testnet and Mainnet, arbitrum, polygon and optimism. And that works right out of the box as well, just depending on what network users are connected to within their wallet.
00:07:30.090 - 00:08:17.490, Speaker A: So now we can actually take a look at what this would look like if you were going to do this in code and you wanted to customize some settings and see what this would look like in your project. I'm going to move over to a text editor and we can see what this looks like on the web. So I'll zoom this in a bit. So right here I have a react project which is actually just a fork of the uniswap interface. And in the root of the app I'm rendering this demo component. So we have a couple of things here. First thing to note is the swap widget itself, which we're importing from the NPM package.
00:08:17.490 - 00:09:00.766, Speaker A: And the swap widget must take one of two inputs here. It can be a web3 provider or a JSON RPC endpoint. So a JSON RPC endpoint will allow you to fetch data from the contracts and get you quotes, and your web3 provider will actually allow your users to make transactions and you can customize these things. And in the docs there's descriptions for what that would look like. In this repo I'm using web3 react to get my web3 provider, which is another popular web3 library that we use in the uniswap interface. So if I switch over to my browser, you can see what this looks like. So this is kind of a default view without a lot of customizations added.
00:09:00.766 - 00:10:07.186, Speaker A: You can see a swap experience here we have token selection, we have things like settings that you'd find on the Uniswap interface. So slippage deadlines, I'll try to select some tokens here you can see quotes being fetched, you can see error states and data around your balances and things like that. Swap inputs and outputs and things like that. So right out of the box with only a couple of lines of code here you get the full swapping experience that you used to on the uniswap interface now. So I think one fun thing to do would be to start looking at how we can customize themes, because an important goal with this widget product is to allow developers to customize the experience within their web applications. An important part of that is design and styles. So here I've made a demo theme and you can see that I've defined a couple of characteristics, something like a border radius font family and then some colors.
00:10:07.186 - 00:10:44.130, Speaker A: So if I go back to the browser, we can see how this changes. So you'll notice different background colors, font, family things like that. And this is cool because with this you can really get custom with how you're integrating this in your own website. And the goal is for every brand to be able to make this fit into their experience. So you can change any of these things and there's a lot more properties that you can customize as well. I've just picked a few here you can see text color and things like that are easy. So you can get custom with this and start to make it match your brand.
00:10:44.130 - 00:11:16.602, Speaker A: I think the next thing that can be cool to look at is how we can make use of token lists, like I was mentioning earlier. So by default the tokens that are in the widget are from the Uniswap labs default token list. But you can actually import any token list that you want. And if you're unfamiliar with what token lists are, it's just a JSON standard for identifying a list of tokens. And this can be on main net testnets and layer twos as well. So tokenlist.org actually has a list of a bunch of these.
00:11:16.602 - 00:11:52.150, Speaker A: Right now I'm on the D five prime token list. So to get all these tokens in the USWAP app, all you have to do is grab the URL where the token list is hosted. You can go into your swap widget component and add the list. So right here I've added defi prime list. You might not be able to notice the difference, but it's loading tokens here. These tokens are now fetched from the defi prime list. So this is cool because you can make your own token lists and input it that way.
00:11:52.150 - 00:12:35.350, Speaker A: There's a lot of token lists out there. This page has some of them. So yeah, I think another cool thing that would, or something that'd be cool to try out would be using a custom token list here. So a token list can be formatted in a few ways as long as it matches the token list JSON standard. Here I just have an array of one token, and again I'm going to use friends with benefits as an example. But let's say I was trying to put this swap widget on the FWB website to let people buy that token quickly. I could make a token list like this that has the FWB token, and instead of importing a list from a URL there I can pass in the constant.
00:12:35.350 - 00:13:20.834, Speaker A: If we go back to the application, we'll see that these are the two tokens that are in there now. So this is nice for projects say it could be any project that has a token that's of interest to users in a community. You can set this as a default and it's easy to get people to grab your token if you want to take it one step further. You can even set default amounts and token addresses here. So I can do default output address, go down to the FWB token address and input that here. So if I refresh the page you'll see that that's default as the output. And you can default inputs too.
00:13:20.834 - 00:14:01.330, Speaker A: You can default amounts. So the point with that is you can really get as custom as you want with the display that users are seeing when they come to your website. So yeah, that's some examples of how you can customize this. There's many other properties that you can define as well when you're using a swap widget in your application. We have a couple of minutes left here, so I'll actually show you what a transaction would look like in this widget here. So I'm going to switch to rank b and do a transaction there. And I'm also going to get rid of the token list so that the default has some rank b tokens.
00:14:01.330 - 00:14:40.190, Speaker A: So let's buy some uni so you can put in your outputs, you'll see a loading state and this is using the auto router packages that we have and you can check that out in the Uniswap Labs GitHub repo. But what that's doing is it's using some data back ends and some logic to find you the best quotes. And this works on Rinkp two. So I can review the swap details. Here you can see the things that you'd want to typical within a swap. So price impact, the fees, slippage, tolerance, things like that. I can go ahead and confirm.
00:14:40.190 - 00:15:27.848, Speaker A: Let's see. Okay, that might not be working. This is actively in development on my machine, so you can try this later. So yeah, I'll stop there with the demo, but if you want to check out the code for this or the documentation, you can actually go to MPM now and look at and you can use this, you can install this and use this now. So now I'll go back here quickly. We'll note real quick that this week we're giving away a total of $10,000 in bounties for hackers at the Denver hackathon. We're looking for the most original and polished experiences that use the widget.
00:15:27.848 - 00:16:03.190, Speaker A: So we'll have 5000 for the in person submission and we're going to have an additional 5000 for the virtual submission. So if hackers who are looking at this are interested, you can go to the Uniswap documentation, you can go to the GitHub repos and they should have instructions there for how you would use this within your app and you can do it that way. So again, there are more resources here. If you want additional support you can go to the widget channel in the Uniswap discord. And also we have a booth in the mirrors gallery this weekend, so come by and say.
