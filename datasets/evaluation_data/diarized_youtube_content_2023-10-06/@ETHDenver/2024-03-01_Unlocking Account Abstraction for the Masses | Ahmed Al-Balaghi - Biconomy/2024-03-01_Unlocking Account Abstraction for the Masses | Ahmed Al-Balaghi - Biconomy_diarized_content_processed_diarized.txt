00:00:00.390 - 00:00:27.330, Speaker A: You. Hello everyone. GM, thank you for joining us at East Denver 2024. And to everyone watching us on Twitch, thank you for tuning in as well. Our next speaker is Ahmed Albalagi. He's the CEO and co founder of Biconomy. His talk today is called Session Keys unlocking account abstraction for the masses.
00:00:43.730 - 00:01:14.420, Speaker B: Hey everyone, just we need 1 minute. We're getting super tom to fix the issue. Okay, no worries. All right, awesome. Hey everyone, thank you so much for tuning in. And yeah, really, really excited to speak to you all today. And thank you all for coming.
00:01:14.420 - 00:01:49.306, Speaker B: My name is Ahmed. I'm one of the co founders at Byconomy. And at Byconomy we build infrastructure for wallets, app chains, dapps to essentially enhance the UX on chain. And for us at byconomy, it's all about making on chain UX as simple as off chain. So today I wanted to basically talk about session keys and actually do more. I wanted to show you guys session keys. I think a lot of talks about account abstraction with use cases like session keys, there's been a lot of talk but no show or tell.
00:01:49.306 - 00:02:45.002, Speaker B: So today I'd love to do a show and tell on session keys. So I guess just very quickly we don't need to go into the weeds. What are session keys and what is it in the context of account abstraction? So session keys in the context in the web two world are essentially jwts, right? And so they use JSon web tokens as a way to authorize transactions. And we essentially do this every single day, right? Like we grant permission to applications, be it Google, Zoom, slack. And so this is something that we use on a day to day basis. And of course this is all centralized verification and authorization in the context of account abstraction, session keys become a lot more cooler because they're now programmable. And so what this essentially means for the user is that they don't now need to have wallet pop ups every time they do a transaction.
00:02:45.002 - 00:03:41.906, Speaker B: And so imagine doing a trade, an NFT mint, anything on chain. When you give a permission that is limited, controlled, and that's verifiable, you essentially can have an amazing UX from the wallet or the app player. And so what this means is here, temporary keys are generated for the user in the browser or phone or even on the laptop. And of course this is all going to be based on predefined conditions that either the user sets or the wallet sets, or maybe the DAP sets on behalf of the user. And the great thing about this is because this is all on chain this means we can have decentralized verification authorization. So we basically built a v one implementation of our session keys for our modular smart accounts by economy. And essentially what we optimized for was sort of three things.
00:03:41.906 - 00:04:44.588, Speaker B: The first was modularity. The second was ux and security. And the third was optimizing l one gas fees. And so essentially for us this was, I don't know what's going on, all right? And essentially for us, we built this implementation with these three core things in mind. And when it came to the modularity, the reason why we built this is so that for Dapps, they could essentially have a separation between general permissions and use case specific permissions, or follows that they have in their app. And then when it came to the UX and security side, they could basically think about the security they want to implement and think about the user flows in a bit more detail. And we also basically implemented Merkel trees, at least on the design of the session keys in order to optimize for our one gas.
00:04:44.588 - 00:05:34.496, Speaker B: And in a way, what this kind of looks like from, let's say a gaming perspective, what adapt could do is essentially allow the player and the user to have these different conditions based on their application. And so whenever the user is doing a transaction, if that transaction basically, if it's basically obliged by these criteria, then they don't need to sign anything. The transaction just happens whenever they're doing a simple operation. And so of course this is in a way what we wanted to enable for Dapps that are building with account abstraction. So like I said, I want to show and tell. So let's look through a demo. And this is basically a live implementation right now that you guys can use.
00:05:34.496 - 00:06:12.550, Speaker B: Okay, this is a trading example. I know it's not a full on like this won't bring 1 billion users to web3, but it still at least showcases a real flow that thousands of traders, even tens of thousands of traders are using on a daily basis. All right, so over here, as a user, I go on manage, I go on one click trading. I could basically see that my session is inactive. I could then dictate how long I want the session to look like. So here the user has chosen 5 hours. They enable this.
00:06:12.550 - 00:06:44.632, Speaker B: It's one simple signature request for the user and then it becomes active. This session happens on chain. And so now for the user, what they are able to do is they can now do a simple trade. They're longing eth over here, which is probably a good idea. No financial advice. They're opening in position. They're confirming the order and it's just as simple as that.
00:06:44.632 - 00:07:27.124, Speaker B: There is no wallet pop up. This is all on chain, all verifiable. And here the transaction has succeeded. So from the user point of view, especially from a trader point of view, when seconds matter in the form of trading this use case, I'd say the trading use case has been like the number one use case that we've seen in account of traction. And here the user is doing another position which is basically closing the position. And here they're submitting the close order. And again, within these few hours that they've enabled this permission, they don't need to worry with any wallet pop ups, no gas or anything like that.
00:07:27.124 - 00:08:22.330, Speaker B: You guys might ask, okay, so how is the user paying gas? There is a gas tank that the user has pre funded. So essentially this permission is basically saying, okay, or at least on the DAP level, it's taking gas from the gas tank, which basically makes this UX super easy. So that's, I would say, a real life implementation on session keys. And so what does this look like in terms of adoption? Where are we at with this? So I would say the number one use case that we've seen has been for trading. So we've worked with companies like Razrade, Quinta and Deeperp and it's been quite astonishing actually. Like we've seen over 15,000 session keys registered on chain. Yes, it's small in number, but it kind of goes to show, okay, the impact that it could have.
00:08:22.330 - 00:09:29.240, Speaker B: And what was really cool that we saw was that we enabled a form of multi chain transactions that we kind of haven't seen before. So what does that mean if I'm a user? Like for example with racetrade, they're a perp aggregator. Now, as a perp aggregator, they aggregate perp platforms on arbitrum, on optimism and other chains. And so what they enable the user to do is I could basically sign a transaction on arbitrum for me to execute a trade on optimism. Right? Now, why is this useful? Because it's useful for this use case. Right. But if we think about sort of further use cases, imagine a user had a wallet on arbitram and optimism and they wanted to send funds from their optimism, let's say wallet, right? And in this chain abstraction world, where the user doesn't need to think about switching the network id or anything, they could literally sign a transaction on whatever chain they're on and then it would execute the transaction on another chain.
00:09:29.240 - 00:10:18.980, Speaker B: So this was, I would say in a way, a more sophisticated example of how this was working for one client of ours. As we went through this, there was a lot of learnings from V one. We wanted to introduce security policies, or more generalized security policies. However, the V one design was not that compatible. V one had a dependence on an off chain layer, and so this also led to complications. If a user had a session key on one app and a session key on another app, and what if there was, let's say, a collision of session keys? Gas costs were also high. I remember when I was using these platforms, I was paying like a dollar to enable a session.
00:10:18.980 - 00:11:08.592, Speaker B: And for traders it's not a lot, but if you're a user using any form of any simple application, this is still a high amount. And at the same time to achieve, I would say, multichain flows and essentially transaction flows, the developer had to integrate different modules. So basically the integration was a bit complex from the developer side. So now, as by economy, we're going to be rolling out session keys, V two. And essentially this is an upgraded version from all the things that we've learned. So what does this mean? It basically means it's more l two native and it's scalable. We are focusing on minimizing a lot of cost in terms of gas.
00:11:08.592 - 00:12:07.588, Speaker B: So that's focusing on minimizing call data and allowing for sessions that might have to be enabled separately. They can now be enabled in one transaction in order to save the gas costs for the user. So the formal batch transactions could also work in this case. And also we found a way to enable multiple sessions that could be done across chains within a single click as well. So these are all, I'd say, improvements that we are building towards with v two. And so when we look at the immediate benefits and improvements, they literally span across security and transparency, cost and time and devex. And so for us, security is paramount, and especially if we want to enable a verifiable way to check out sessions and really a decentralized way to authorize them.
00:12:07.588 - 00:13:20.116, Speaker B: And so this basically means now anyone could basically have their own form of security policy, or we can have a general form of security policies. With v two, as I mentioned before, we're now able to reduce the cost and time for developers to integrate session keys, especially with the gas costs, which are super important to optimize for. And then there's also devex improvements. Now the developer does not need to integrate many different modules or they don't have to do a lot of complex things like our previous clients had in order to enable customized user flows. One thing that I also wanted to talk about here was we had this concept of ABI session validation module. So essentially what this means is with our v one of session keys, every DAP that we worked with had to build their own custom session validation modules. Now, what is a custom session validation module? Let's say a Dap wants to enable free NFT mints, for example, using session keys.
00:13:20.116 - 00:14:20.604, Speaker B: They would have to build their own SVM, they would have to write it in solidity, they would have to get it audited, they would have to get it deployed as well. And so this was a very long journey for applications to do. Now, for these more complex defi applications, it was way more than just a simple NFT SVM that they had to build. So a lot of the developer integration work and time actually went in building out these svms. Now, what's cool with v two and with this Abi session validation module that we have is we're going to have pre deployed modules, meaning that developers don't need to reinvent the wheel for many, many use cases. And as well as if a developer had a specific flow that they wanted to implement, they could do it without having to code, which is super cool. So it kind of expands the developer crowd that we want to attract with this.
00:14:20.604 - 00:15:02.770, Speaker B: And the great thing is there's no overhead. You don't need to get this audited, you don't need to write solidity or deploy anything. And so it just becomes a way easier sort of experience for developers and apps. So we're really excited about this. We're going live with this soon and we'd love to see how it operates in the world. So yeah, just wanted to touch base very quickly about us and app by economy. If you're a developer wanting to utilize account abstraction, I'd love for you guys to work with us.
00:15:02.770 - 00:15:36.824, Speaker B: We essentially provide a full stack account abstraction SDK all the way from modules, the smart account layer, to paymarter service and the bundler service. And I did want to take some time to talk about some of our clients. So we just recently integrated with Trustwallet a couple of weeks ago. This is to power their new wallet called Swift. It's a contract account. So what we've enabled Trustwallet to do is for their users to pay gas in over 250 tokens. And it's been already two weeks since launch.
00:15:36.824 - 00:16:22.648, Speaker B: And it's really interesting to see that the top two tokens being used to pay for gas for any form of operation is USDT. And TWT, which is a trustwallet token. And what trustwallet did was if you pay with trustwallet token, you kind of have a discount on gas. So it's a pretty cool sort of token use case that we were able to enable for them with account of traction eccentric. Now this was an announcement we did yesterday. Eccentric is basically a product on Mercedes Benz. We officially announced our partnership, Mercedes Benz, to allow them to enable account abstraction in this new data marketplace that they're building on top of blockchain rails.
00:16:22.648 - 00:17:01.770, Speaker B: This data marketplace is going to be about automobile data and essentially for them, because web3 is really important and it's easier to enable the ITR marketplace for this data. They wanted to use account abstraction to make it easy for people to onboard and to access the platform without having to pay gas. Of course, another cool integration was chess.com and Animoca. You saw the previous presentation with the web3 Auth. So we worked with Chess.com and Animoca on their new game called any chess.com.
00:17:01.770 - 00:17:54.628, Speaker B: This game is basically like a magical chess.com, and users get free nfts for doing whatever they're doing on the game itself. But what was really cool was this was an integration with both web3 auth and by economy. So Web three Auth was a social login provider because we don't provide a social login solution, we work with folks like Web three Auth. And so they used web3 auth for social login and biconomy for the full account abstraction solution. And right now it's one of the biggest, I would say, dapps that are continuously doing transactions on a day to day basis. And we also have gotten on board folks like Morgan as well to use account abstraction in their POC last year with Project Guardian.
00:17:54.628 - 00:18:47.906, Speaker B: And so far all of these efforts has already enabled us to become the largest account abstraction provider in the space. So we've kind of gone through so much in terms of building the stack out, a lot of trial and error, and ensuring that everything is as reliable and as scalable as possible. So if you guys want to build with us, please let us know. I'll be around here for a bit. And yeah, if you have any questions, I'm happy to take any questions that you guys have. I think we have another minute or so. All right.
00:18:47.906 - 00:18:53.340, Speaker B: If there are no questions, it means that I've explained everything clearly. I hope that was the case.
00:18:59.510 - 00:19:07.840, Speaker A: Thank you so much. Ahmed. Let's give it up one more time for this amazing talk. And thank you so much for joining us today.
