00:00:31.040 - 00:00:53.820, Speaker A: Hello. Good morning everyone. Thanks for joining us so early today. I want to talk a bit about Cartasi rollups and basically bringing Linux to Ethereum. I do business development at Cartasi. My name is Max. And in short, basically what Cartasi rollups is trying to achieve is trying to elevate smart contracts to decentralize Linux runtimes.
00:00:53.820 - 00:01:40.824, Speaker A: Basically, there's two facets to this. On one hand, we want to give your dap the computational capacity of a full cpu or virtual machine and give you the programmability of a traditional web server and all of that on Ethereum. So there's two constraints that we want to tackle at Cartasi. The first is computational scalability, and the second one is content scalability. And I'll start with computational scalability, as it will naturally lead us into this second constraint. Imagine if the price of a banana at your local food stand just ten x in price because the casino down the street just got really popular. Well, that's what happens kind of on Ethereum, right when dgens all ape into the same NFT collection or yield farm gas, prices increase for everyone else.
00:01:40.824 - 00:02:36.696, Speaker A: And so in times of high demand for block space, certain apps are completely outpriced and actually can't survive on Ethereum anymore. Furthermore, certain apps are non viable to begin with on Ethereum, even in times of low demand for block space. So on Ethereum, everyone validates everything. So you're sort of competing with other applications for block space. And having applications share the same vm removes predictability for developers in terms of user experience. Like will I be able to serve my users in a week? Will I be able to serve them in a year? As more and more apps join this Ethereum, basically the network becomes gentrified. And instead of optimizing for certain features of your application that are key, you actually need to architect your application in a certain way that minimizes these costly interactions with the blockchain.
00:02:36.696 - 00:03:27.144, Speaker A: So it's clear that this really limits the design space. Now, Ethereum is this world computer. To quote this early consensus blog, it's not meant to be the fastest possible computer, but it's a universal computer which is accessible from anywhere by anybody, and which always gives the same result to everybody. It's an amazing technology. The question is, how do we get more applications to be able to use this at the same time and also get more use cases that can leverage this as well? So how do we go about scaling this world computer? Probably a lot of you guys are familiar with this. There's two facets to it right, data scalability and computational scalability. Ethereum is focusing on data scalability with EIP 4844 and dang sharding and stuff like that, and basically greatly reducing the cost of adding data to its blockchain.
00:03:27.144 - 00:04:15.740, Speaker A: And computational scalability has been delegated to roll up projects, hence the name roll up centric roadmap. Now, unlocking both of these things in tandem. So computational scalability and data availability capacity unlocks a lot of new use cases on Ethereum. And we can move from monolithic Ethereum, where we had the first use case as the ICO, to way more complex applications such as complex dows, all the way to potentially like complex metaverses on chain games, machine economy, IoT stuff. Note that here, if you scale data enough, you need to actually scale computational capacity sufficiently to make use of that data. And this kind of gray area represents that. So you need to actually move both in tandem.
00:04:15.740 - 00:04:51.368, Speaker A: Now, with roll ups, we shift computation to L2 protocol and use Ethereum to verify proofs that what was executed off chain is actually following the rules. And with optimistic roll ups, which is what we're doing at Cartesi. And I'll get a bit more into that in a second. Ethereum basically becomes this arbitration layer. To give a really basic example, imagine you're playing a game of on chain cards, and you have these two guys, the noun guy and this other sunglasses guy, and they're playing a game, and they both agree on the result. Perfect. We can just run the computation within the roll up and move things forward.
00:04:51.368 - 00:05:53.020, Speaker A: However, if there is a disagreement, meaning that there is one dishonest party, we will actually fall back to Ethereum and rerun the specific part of the computation where there was a disagreement on Ethereum. So roll ups are awesome, because even if we just have one honest validator, we only need one honest validator, basically to enforce correct results independently of cooperation of the majority. Now, one big thing, though, that you need to remember is that actually Dapps, using roll ups under global consensus, will eventually face similar issues as the ones we saw on Ethereum earlier on. You can picture EVM roll ups as like, computational shards, basically. So they definitely grow like the capacity of Ethereum. But at the end of the day, if there's increasing demand for block space within one of these shards, you face the same issues as we had on Ethereum. You have, again, only a fraction of applications which are viable on each shard as more and more applications are deployed on the same roll up.
00:05:53.020 - 00:06:43.852, Speaker A: And there's this zero sum fight for the VM's capacity, which leads to gentrification again. So it's only a matter of time until some of these roll ups become congested as well. And certain use cases then just become blocked and, you know, impossible to do on them as well. Now, fortunately, there's another way to understand roll ups. Imagine that instead of everyone validating everything, validators only validate the applications that matter to them. And we call this design application specific roll ups, or as others like to call them, roll apps. And by letting go of shared vms, basically your application can have their own cpu and can fully leverage the power of the hardware, and with it, the exceedingly high computational capacity that comes with that.
00:06:43.852 - 00:07:28.196, Speaker A: So you can also avoid the problem of network gentrification and the lack of predictability that we discussed earlier. Now, obviously, this comes with certain trade offs, right? Like your app gives up a certain level of composability at the roll up level. But for a lot of applications, base layer composability is more than enough. Furthermore, the benefits of higher computational capacity far outweighed slight reduction composability for many use cases. So what is Cartesi rollups? Well, it's infrastructure for application specific rollups. You can run Cartesi roll up on top of Ethereum, on top of a layer, two like optimism, or as a sovereign roll up as well. And going back to this idea of a world computer, basically, I feel like bankless or some other team already use this analogy.
00:07:28.196 - 00:08:17.800, Speaker A: But roll ups and data availability scaling enable us to turn this world computer into this universe computer, if you will, with roll ups kind of gravitating around Ethereum, the sun, and turning this computer into this super powerful computer. Now to take things one step further, we position that application specific consensus actually also opens up the design space for execution environments. And this allows us to not only create this universe computer, but also have planets that orbiting Ethereum that have very different purposes and designs that are optimized for certain things. And so we can create a lot more diversity in execution environments on Ethereum. And that's really cool. So you might be wondering what we at Cartasi want to optimize for. And, well, basically want to optimize for content scalability, which is what we discussed earlier.
00:08:17.800 - 00:09:04.650, Speaker A: And basically we want to bring more programmability more explicit to ethereum. Bring more content to ethereum. Now let me explain why content or scaling content is so important. And I'll start with a quote from Hayek and the use of knowledge in know we make constant use of formulas, symbols and rules whose meanings we do not understand. And through the use of which we avail ourselves of the assistance of knowledge which individually we do not possess. What Hayek is referring to are these man made complex systems that are compositionally built on top of other know. This allows us to build new content without having to think or having to understand these lower systems and basically leverage that to create way more content to scale content.
00:09:04.650 - 00:10:37.108, Speaker A: If you think about the amount of technology that exists in cars today, you can see this on this beautiful visual here there's decades of accumulated knowledge that were needed to build subsystems within a car, like an engine. Tools that we leveraged to build this engine that you do not need to understand in order to actually build the engine. And each of these levels basically hide information about the underlying systems and enable the next layer to perform more actions, more operations without having to think about them. And in software we have this software development stack, right, composed of libraries, languages, operating systems, compilers, interpreters, instruction set architectures which each abstract away the underlying systems and allow us to do more without having to think. Now modern software is complex, so it's really important that we can, it's really useful actually that we can rely on this battle tested content which has been iterated on over and over, and basically to be able to build new content without having to write or understand their inner workings ourselves. Now the EVM cannot tap into these abstractions, unfortunately, it needs to run its own flavor of code. But now with application specific consensus and the computational capacity that comes with it, and this unlock in the design space for execution environments, we can actually make this happen for the first time.
00:10:37.108 - 00:11:13.840, Speaker A: And that's really exciting. So the main idea to scaling content is to basically drag into Ethereum the same computer we use on a daily basis in scratch with decades of rich, battle tested and mature content. And with it we can run the entire modern software development stack on Ethereum. So you might be wondering how cartesy rollups does this. Well, it uses a custom virtual machine based on RISC five. It's basically a deterministic risk five emulator. And RISC five is like arm the cpu you have in your phones, tablets and laptops.
00:11:13.840 - 00:11:59.132, Speaker A: Now RISC five is an open standard instruction set architecture. So it's open source, has a community and such. And using RIsC five allows us to actually boot a full operating system on top of that. Now we chose Linux, but you could use also other operating systems like self four and stuff like that in the future, which is a very secure operating system. Now this means that you can use Linux, but also all the languages it supports, along with their combined ecosystems, complex libraries and so on. We can even use databases for smart contract development, which is really cool. So the idea is that I have a new planet in this universe that's really expressive, that's very programmable, and way more similar to traditional web server.
00:11:59.132 - 00:12:46.060, Speaker A: And we hope this will bring new use cases for this world computer. Basically by bridging the accumulated knowledge and wisdom of all these years of open source software development to Ethereum. To kind of sum up Cartasi rollups is this combination of application specific rollups and an expressive execution environment for Ethereum. And this means that you can use the tooling languages libraries you love, basically the content that you love to build smart contracts and dapps. We're currently on Testnet and have a lot of great developers experimenting with our tech. This sounds interesting to you. You can check out our discord on this QR code or come by our booth today or during the main event as well and have a chat.
00:12:46.060 - 00:12:48.970, Speaker A: Enjoy the rest of East Denver and thanks for your time.
