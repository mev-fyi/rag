00:00:07.910 - 00:01:18.514, Speaker A: Hey, I'm Ren. I'm an engineer at Electric Capital, and today I'll be talking about smart contract genealogy on Ethereum and other EVM chains. So, to start off and to frame the reason why we care about smart contract genealogy, the main goal is to try and answer the question, where is new code first deployed? New code. We view new code as a form of innovation, and we're really trying to answer the question, where is the innovation coming from? So there are a lot of ways to measure innovation. Some are more subjective while others are more objective. And today I'll be presenting one possible path that is scalable and a way to measure innovation across EVM chains. So, to answer the question of how do we detect where innovation originates, we detect when new EVM is deployed via vaguely a three step process.
00:01:18.514 - 00:02:20.914, Speaker A: First, we identify the logic blocks that determine how a smart contract works by analyzing its source code and bytecode. Second, we create a unique identifier, which we call a fingerprint for each logic block using a cryptographic function like for example, mD five hash. And third, since each logic block is uniquely identifiable, we can tell which contract first introduced the logic, where it was first deployed, and when contracts reuse logic blocks in the future. So, to be more concrete about how this actually happens, first, we determine all of the paths that a contract code can take from start to finish. These paths are called a control flow graph. So by taking the runtime bytecode that is deployed on chain, decompiling it, generating a control flow graph, we end up with a bunch of nodes. So within each of these nodes we create a unique identifier for each step of the path.
00:02:20.914 - 00:03:39.578, Speaker A: So for example, a CFG node might look something like jump desk, call value is zero, push two pushing a value, and then a subsequent jump to the next node to execute along that control flow graph. Well, we can take that list of opcodes and generate a unique identifier, such as by using MD five to create this fingerprint that we can attribute to that deployed contract and then track when other contracts deployed on other trains in the future are using that same block of logic. And since each CFG node is uniquely identifiable, we can tell which contract first introduced the logic on chain and which contracts use the logic in the future. So before I go into the graphs and some of the analysis, some caveats. So for instance, the reason we think using this CFG fingerprinting method is particularly powerful is that changes to constants, function names, or variable names produce the same control flow graph nodes. Because the sequence of logic within the smart contract doesn't actually change. So when we stripped away the values pushed or popped to the stack in memory.
00:03:39.578 - 00:04:34.714, Speaker A: This helps dedup and better identify novel blocks of logic. So, for instance, if you had two wet contracts and one changed some of the function names, maybe they changed some of the constants that actually produces the same fingerprint. This is particularly good for deduping against things like civil attacks, spam, et cetera. However, comparing absolute differences in CFG nodes is not a perfect metric. So, for example, changes in compiler versions can introduce differences in CFG nodes, amongst other reasons for differences. So, for example, if you were to use the solidity compiler zero 418 to zero 421 you would have the same set of CFG nodes, but using 00:42 to 0426 you would introduce 13 new CFG nodes compared to zero 4118. That's roughly around 13% of the CFG nodes for the wet contract.
00:04:34.714 - 00:05:48.066, Speaker A: So there is a trade off in using absolute matches for the fingerprinting for CFG nodes, which we view as a good trade off at the moment because it results in faster pairwise comparisons at the cost of handling some of this drift in compiler versions over time. So here's a summary graph of where. Net new blocks of logic are being deployed and what we generally see is we had this large run up, kind of like the smart contract revolution that happened between 2000 and 22,021 during DFI summer and the NFT wave that happened subsequently. And. Net new logic deployed per month has roughly held up through the bear market. And today we increasingly see that net new logic is not only on Ethereum, but is starting to appear on BnB, polygon and arbitrum in addition to Ethereum. But if we look at just the contracts deployed in 2023, we decompile those contracts and then we look at where the logic blocks or the CFG nodes originated or were first deployed.
00:05:48.066 - 00:07:12.420, Speaker A: What we see is that 71% of the logic blocks for contracts deployed in 2023 were first deployed on Ethereum, followed by 19% from BnB and 7.2% from Polygon, which is a pretty interesting insight given that Ethereum did not have the most deployed contracts in 2023. But the unique aspect of Ethereum's code base and Ethereum's deployed contracts is that the smart contracts on Ethereum are mostly unique, and they're homegrown, and deployments on other EVM chains can often trace their origins to another chain. So on the graph that you see on the screen, we can see that the vast majority of the contracts deployed on Ethereum contain logic that was first deployed on Ethereum. Whereas if you're looking at BnB, chain Polygon, arbitram based scroll avalanche, optimism, the vast majority of the logic that comprise the smart contracts deployed on those chains originate from another chain. And with this line of analysis, we can trace where every block of new logic is first deployed and where it is deployed next. So we end up with some pretty interesting flow graphs that show where code is pulled and where code is being used.
00:07:12.420 - 00:08:31.578, Speaker A: The first takeaway that I highlighted earlier is that most of Ethereum's contract logic is only found on Ethereum, comes from Ethereum, and gets reused later on in Ethereum, with a small portion of other chains exporting logic into Ethereum. And Ethereum is also the biggest exporter of new on chain logic. So chains like BNB, Polygon, Arbitrum, base avalanche and optimism. The developers on those chains, when they're writing their smart contracts, are reusing pieces of logic that originated and were first deployed on Ethereum. Second to Ethereum is BNB, which exports a lot of logic, has a lot of deployments, but the vast majority of those deployments comes from code that was first deployed on Ethereum. And lower on on the graph, you can see that most of the contract on l two s actually just comes from Ethereum, or was first deployed on Ethereum. BMB and Polygon are the next largest creators and exporters of logic, and new logic that appears on BMB and Polygon can make its way onto Ethereum, BMB, Polygon and the l two s.
00:08:31.578 - 00:10:10.620, Speaker A: Anecdotally, this kind of lines up with some of the things that we've seen where bmb and polygon, due to being low cost chains, are often the areas where developers might experiment with new primitives, new ideas, due to the low cost nature of deployment and large user bases on those chains. One of the interesting aspects is we can take all of the deployed contracts from 2023, we decompile them, we have fingerprints for the logic that comprise those deployments, and then we can look and ask the question, in what year did those blocks of logic first appear on chain? Which gives us a sort of vintage like analysis of when those blocks of logic were first written. So, for instance, contracts deployed in 2023 across EVM chains contain a lot more logic that was deployed earlier than 2023 than in 2023, which is a troubling type of result that we found. But it's not necessarily a bad thing, because one of the aspects of smart contracts is that the security is really, really important. And if you have a primitive that's been battle tested that has a sort of lindiness because it's been live in production for many, many years and has been used by a lot of users. Custody is a lot of TVL and assets. You might not necessarily want to rewrite that primitive, or for instance, if you have a math library or other form of library, there isn't necessarily a strong reason to do so to rewrite it.
00:10:10.620 - 00:11:50.442, Speaker A: But underneath the aggregates we are seeing a sense of divergence. So we saw earlier that on the left hand side, Ethereum and Scroll bucked a trend of 2023 deployments using net new logic from prior to 2023. And on the right hand side we can see that a lot of the faster l two s and cheaper l ones such as Arbitrum, Avalanche based BMB chain, optimism and Polygon the contracts for the percentage of the logic in the contracts deployed in 2023 that were originally and first appeared in 2023 is actually quite low compared to the logic that first appeared in prior years. But on the other side, on the right hand side with Ethereum and Scroll, you can see that Ethereum actually had a rebound from 2022, and in 2023 we see that a larger proportion of the contracts deployed during that year are using net new logic that first appeared and first was deployed in that year. And scroll shows a similar trend. So some takeaways that might be valuable for builders L two s folks working in ecosystems is that decompiling deployed bytecodes and fingerprinting the control flow graph nodes provides one path to attribute blocks of logic that removes the effect of trivial changes in source code. Over the past few months, we've seen increased civil activity on the development side, especially with scroll and base.
00:11:50.442 - 00:12:41.480, Speaker A: And one very easy way to strip away a lot of trivial changes like changing variable names function names constants, is to take a CFG fingerprinting type of approach. It's very easy to quickly dedupe contracts that way in 2023. Most logic in smart contracts still originates from Ethereum, which kind of bucks this idea that the L two s are leading innovation at the moment, but that might still happen in the future. And finally, there is divergence in 2023, where Ethereum showed the first rebound in net new logic, whereas most other EVM chains, the contracts that were deployed in 2023, were still sourcing most of their logic from prior to 2023. Cool, thank you.
