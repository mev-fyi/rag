00:00:00.250 - 00:00:37.318, Speaker A: Everyone. As mentioned, I'm Carl, I'm a researcher with the Ethereum foundation. And today I'm going to be talking to you about distributed validators, or as I like to call it, staking with friends. But yeah, we'll get into that in a moment. So, as I'm sure many of you are aware, staking on Ethereum right now can be painfully expensive. When I got into the space, actually what got me into the space was a hackathon where I tried to build what I'm going to talk about now, many years ago, because I didn't have enough cash to stake. And I think this is true for many people.
00:00:37.318 - 00:01:37.846, Speaker A: So if there was infrastructure that allowed people to be able to stake in still a decentralized and trustless manner without having to fork out crazy amounts of etH, that'd be really cool to see. Another thing is we see many people are very scared of going offline, and what they do to do this is they try set up some redundant, some redundant staking set up for themselves. Maybe they set up two validators, or they have some software which tries to detect if one goes offline and spin up a new one if it does. The problem with this is one of the safety mechanisms we have within Ethereum. Proof of stake is that you can never vote twice with different opinions. And so if you spin up two validators, you stand a high chance of shooting yourself in the foot, where you end up voting twice with the different validators in different ways. And the majority, these are the slashings we've seen on beacon chain.
00:01:37.846 - 00:02:23.900, Speaker A: The majority of them are from people trying to do this, be it institutional or small individuals. And yeah, that's a pretty bad pain point. The other thing is we have this mechanism called correlated slashings. So in order not to penalize people too heavily, if you on your own make some mistake, we don't penalize you that much, you lose one eth. That much is relative, but still. But if you are a larger institution and you're staking a large portion of ETH, then the penalties quickly scale with the amount of faults you make at the same time. And yeah, this can lead to some pretty detrimental runaway effects where your risks as an institution or as a whale start to add up very quickly.
00:02:23.900 - 00:03:16.140, Speaker A: The other thing we've been seeing is there's a lot of demand for more liquid style staking where you can stake and unstake very quickly, or to be able to use staked ETH as an Internet bond, quote unquote. And this is people trying to enable more out of their stake. And we see services such as this is Lido, but there are a few others trying to spin up, and they're basically just trying to offer this platform for staked ETH. The issue being is that there's no way for them to do this in a proper trustless manner. They have a few people under the hood that they delegate the staked EtH to and just quote unquote trust us. Another issue is that lots of these institutions that are being trusted are the same people that the exchanges trust. So there's all these correlated issues I was mentioning in the previous slide that start adding up quite quickly.
00:03:16.140 - 00:04:33.780, Speaker A: So yeah, there are several things which are starting to add up which can lead to a rather unpleasant experience in certain scenarios. And we'd like to have this tech called distributed validators as an attempt to mitigate lots of these issues. The idea being that several people, buffercorns, institutions, servers, whatever you want, you can distribute your risk and your uptime amongst multiple people, and together you act as one validator for the network. And as you'll see in a few moments, this gives us some really cool upsides in terms of what can be achieved for homestakers. I'm sure everyone is familiar with this lovely email that makes you go have I done something wrong? Or is it just that one fluke where something happened probably can be ignored? If you get a few more of these, you got an issue. And the idea is here again that you can have a setup which is more resilient. So if this is your particular node at home that's going down, maybe you could run different pieces of software to try help mitigate this, and then use this distributed validators on top of it, such that if one of your clients goes down, it doesn't really matter.
00:04:33.780 - 00:05:25.220, Speaker A: Institutions, this is the rough distribution of stake at the moment, minus a big one, which is coinbase who obfuscates some stuff which makes it a bit harder to track. But as you can see, they start adding up to that magic 33% threshold I was mentioning earlier, which is where the correlated slashing is at its full effect. So if you start to get close to those numbers, that could have really negative effects for you. So again, hopefully distributed validators can come in here and eliminate some of these risks. Another one is pooling with friends. Personally, this is this sort of solved my initial issue where I didn't have enough ETH to stake, but maybe you and your homies can get together and stake together to try put up 32 eth. You and three other friends, eight eth each.
00:05:25.220 - 00:06:24.280, Speaker A: It's a lot of money, but maybe is a lot more achievable for many people. And as a part of democratizing this and decentralizing this thing we have, which is staking, it would be really nice to be able to do this without having to trust a major exchange or institution. Another cool thing we've been seeing starting up lately are these decentralized pools. These are the two major players in the space at the moment with varying levels of tech, but they're implementing this to try help people out at all levels of this tech stack. So, like, what I'm presenting now is sort of the pure idealized version of this technology, but we need people to actually implement it and make it feasible and have nice interfaces for onboarding to be able to plug into these money legos. And that's what these services are hoping to provide. So, going to dig a little bit into how this works.
00:06:24.280 - 00:07:07.778, Speaker A: So four buffercorns get together. They want to set up a decentralized validator. What they do is together they generate one key, which is going to be their staking key, their ETH two validation key, and they break it up into parts and they give themselves each a part such that no one on their own can act as the validator. Right. No one has enough of the key to generate signatures to misbehave, or to try coerce their friends. And yeah, we continue with this, then what we can do is going to have nice different setups so everyone could use a different client, for example. And again, they're distributing risk amongst.
00:07:07.778 - 00:08:06.406, Speaker A: If you have issues in your particular client, how do we handle that? And yeah, by each having a different key, this helps eliminate it. Then what we need to do, there's missing a piece of my slide there, but let's pretend basically everyone needs to get together and agree what they're going to do. So someone proposes, hey, let's build a new block, or let's attest to this particular fork of the chain. And everyone gets together, and before they do anything, before they sign any messages, they reach agreement. And this is like sort of the key that allows us to do this in ways where we can account for people being malicious or being offline. And that's that. And once they've all agreed, then they sign the message, they come together with their keys and to collectively sign this message in a way that no single one of them could do it on their own, but only with a sufficient quorum of them could they do.
00:08:06.406 - 00:08:41.582, Speaker A: So this is enabled by some sort of fun tech under the hood, shamir secret sharing, a very common concept in cryptography. But basically this is how you split up the keys. This will be the key generation phase. And the point here is you can set up threshold schemes. So maybe you need three out of four people to sign the message, right. You can have one person be offline or missing or disagreeing, and that's okay, we can handle that. What I was getting into there a bit is threshold signatures.
00:08:41.582 - 00:09:31.694, Speaker A: This slide is just, don't bother trying to go into it too deeply. It was just supposed to look complicated and make it look like my slides aren't just filled with pepes and buffer corns. I do do real work at some point, but yeah, the same math that allows ethereum proof of stake to scale to so many thousands of validators is sort of the functionality we have in the underlying cryptography and the signature scheme. BLS also allows us to do these threshold signatures where everyone sort of signs if we agree on a block. In a distributed validator, everyone signs the block individually and together we can reconstruct it with some threshold, say three out of the four people. The agreement under the hood looks, again, something. Another try, make me look serious.
00:09:31.694 - 00:09:56.822, Speaker A: Slide. The agreement looks like this. It looks very chaotic. But this is actually what most safety first consensus algorithms end up looking like. When I say safety first, this is an important property. Basically, in a distributed validator setting, we always need to vote in a way that can't get us slashed. And we would rather miss an attestation or miss a block than get slashed.
00:09:56.822 - 00:10:44.170, Speaker A: So we're prepared to, in the worst case, multiple people go offline, or many people are malicious, we'd rather halt and have that fail than continue. And so this is what these kinds of algorithms look like. I mean, at some level, ethereum proof of stake looks like this too, for the finality. So what would this look like? I mean, in cases where you have one node dropping offline, it doesn't matter, because in a setup like this, we could have three or four threshold signatures and BFT consensus, and we would just basically ignore the offline party. And whenever they get back online, they're welcome to sync up and join and join again. But it's no issue. And this would prevent some of the issues you get with people trying to set up redundant systems.
00:10:44.170 - 00:11:23.938, Speaker A: Evil or malicious. One of your friends could have something like, could try coerce you or vote weirdly. And this allows us to ignore that setup, which is an important property. I think where this comes more into play is if you have an institutional setup, maybe. And you have multiple keys in multiple places, you could distribute the number of people who have access to certain keys. So you'd have maybe two people, Bob and Alice, and some of them have access to some of the threshold keys and some have access to others. Or we distribute the keys amongst multiple institutions.
00:11:23.938 - 00:12:10.838, Speaker A: And this means that even if we have a rogue party within an institution, they can't take everyone down, we just completely ignore them from then on, outwards making their malicious votes. And we can deal with that outside of the protocol, but it's not going to cause anyone to get slashed. A third class is, sorry. Yeah, I mean, if it's really pertinent, I can happily, happily take it now, otherwise I'll get to it in a few slides up to you. What's the, so we not, so the question was with malicious and evil validators, what's the message we use to identify them? Is that correct? Yeah. So we're not voting on hey, this person is malicious. What we're voting on is hey, we ignore this person.
00:12:10.838 - 00:13:22.270, Speaker A: So if you try propose malicious blocks or malicious attestations, everyone else is just going to ignore you because what you're saying is not valid from the perspective of the chain and from everyone else's perspective, the messages to identify people would have to happen out of protocol. So in my bob and Alice example, if Bob was trying to steal the keys or something like that, then it would be up to whatever institution to try handle that and to look into what their own Opsec is doing, why that went wrong, and try to tackle it from there. Bugs, this is a class of thing. We've seen sort of minor bugs appear on chain, but there's quite a scope for larger bugs. And when I got into the correlated slashing things, this could really be bad. So as per few previous talks I've given, Prism currently holds a two thirds majority or somewhere thereabouts of the validators on Ethereum proof of stake. And so if there was a bug in prism at the moment, this would cause massive correlated slashings would be atrocious for the network.
00:13:22.270 - 00:14:28.686, Speaker A: It doesn't matter where you are, private individual institutions, it's really bad. So hopefully this improves over time. But one of the ways you can avoid this is you might just not care if one of your clients has a bug because the rest of them should all be agreeing. And even if multiple of them, like if everyone disagrees and there are bugs and it all goes terribly, you know, at least you're not going to get slashed because no one can agree on which message to sign, you're not going to be able to produce that threshold signature, and that gets you out of a lot of these issues. As of earlier this week, we opened up the specifications we've been writing for distributed validators. So the idea is just like we have the Ethereum consensus specifications where there are multiple clients implementing the code, the idea is to do the same thing here where we write sort of a minimalist specification that people can read and implement and write their own clients for it. And then hopefully we will have a diversity of clients in many languages, by different teams, with different security assumptions and targeting different players.
00:14:28.686 - 00:15:16.934, Speaker A: And this should allow us to again scale out and improve the safety of even this level of infrastructure. In particular, the construction we've been looking at here is to try and minimally impact the setup we have at the moment for individuals and institutions, and therefore your trust assumptions you currently have we can hopefully carry forward or minimally impact as we carry forward in terms of allowing you to be able to stake with these distributed setups. So you'd take your current keys, if you want to do this, you could take your current keys, split them up. Don't know why this died. It's all good here. Tech hello. Do we know why this is dead? Yay.
00:15:16.934 - 00:16:09.018, Speaker A: Okay, anyway, it wasn't super important or the same slide, but anyways. But yeah, you could take your keys and your current setup, split them up amongst a couple of parties, and then run with your existing beacon nodes as they are, and lots of your same key management, or how you handle that, we can hopefully keep that relatively similar to what it looks like. My co conspirator DTI, gave a talk 20 minutes ago on the other stage. You're sitting here in the front row, which is a little bit more technical, slightly less memey. So if you'd like to actually look into sort of what these setups look like and what this looks like under the hood, I highly encourage you to check out his talk, which I assume will be online. Sorry, it's not enough time for me to put in a QR code to wherever that will be. Yeah, thank you for coming to my presentation and listening to this chat.
00:16:09.018 - 00:16:11.120, Speaker A: And yeah, are there any questions.
