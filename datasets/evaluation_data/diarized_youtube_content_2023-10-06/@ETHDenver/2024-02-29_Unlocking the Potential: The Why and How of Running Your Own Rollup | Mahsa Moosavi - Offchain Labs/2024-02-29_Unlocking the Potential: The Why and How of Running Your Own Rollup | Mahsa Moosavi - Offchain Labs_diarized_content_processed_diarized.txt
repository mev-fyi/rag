00:00:07.050 - 00:00:27.760, Speaker A: Hello. Hello. Cool. Hello, everyone. We are back with another presentation. This is unlocking the potential, the why and how, running your own rollup by Masha Musavi. She's an integration engineer with offchain labs, and she's going to take it away.
00:00:28.130 - 00:00:59.454, Speaker B: Thank you. Is it showing okay? Yeah, it works. Awesome. Thank you. Excited to be here. And, yeah, I'll be diving into arbitram orbit, and we'll learn about what is orbit and how can you launch your l two s or l three s? So a little bit about myself. My name is Masa, and I'm an integration engineer at the offshore labs.
00:00:59.454 - 00:01:36.670, Speaker B: I'm also doing phd at Concordia University in Montreal. And this is my twitter if you need to get in touch with me, if you have any questions about the talk, whatever. And this is my website anyways. All right, so let's dive into the orbit and do a quick intro. So what is orbit? So maybe most of you, or even all of you, you've heard about orbitrum one or arbitrum nova. These are our public chains that have been live for quite a while now. They have a lot of users, they have a lot of applications, and they have been saving a lot of gas for us so far.
00:01:36.670 - 00:02:31.054, Speaker B: So there's this specific piece of technology behind these two public chains that enable them to operate. And what is exciting about arbitram orbit is that the orbit program allows you to grab that specific piece of technology and then do whatever you want with it. You can even launch the grab arbitron one and then launch it under a totally different name and branding, but the tech would be the same. So let's look at how orbit evolved through the time. So when we first launched orbit program, it was only about the l three s, permissionless ones. So it enabled everyone to launch their l three chains on arbitram one and arbitram nova. So at that point, there is no need to go through the Dow, no need to get any permission from the Dow, and it was totally permissionless.
00:02:31.054 - 00:03:17.002, Speaker B: But if anyone wanted to do their l two orbit, I mean, they had to go through the Dow, so they need to get the license. So they would go to the Dow foundation and they would get the license, and then they were able to launch their orbit chain. But this caused a lot of frictions. And because there's always this general desire for efficiency, we decided to make it more efficient. So what we did is we did a lot of community calls. There was a lot of Dow talks calls, and then we decided to come up with an arbitrum expansion program, which is basically a program that allows everyone to launch their l two and l three chains, totally permissionless. No need to get any permission from the Dow.
00:03:17.002 - 00:03:59.482, Speaker B: And there's no fee except for you have to pay a portion of your sequencer fees to the Dow because it's kind of a revenue sharing. So you need to share your revenue with a Dow. And it's awesome because let's say you want the best l two stack that is available in the community. You can just grab it and you don't even have to go ahead and talk about it publicly beforehand. This arbitrum expansion program is what we call a community source license. So you can grab the tech. It's kind of an open source, but at the same time, you're paying back to the community by sharing the revenue with the arbitram Dow.
00:03:59.482 - 00:04:20.690, Speaker B: So it's really cool. And so there are two types of orbit chain, l three orbit chains and l two orbit chains, as I said. And both of them are permissionless. Both of them, they can settle to any chain that derives its security from Ethereum. It can be arbitram one, arbitram nova. It can be even base and optimism. So any chain, basically.
00:04:20.690 - 00:05:21.542, Speaker B: So this is really cool about it. And both of these chains can use either roll up or any trust technologies, which I'm going to go ahead later in the talk and discuss them further. So what is orbit? How hard it was for us to come up with orbit. So for arbitrary one, the roll up technology in order to operate the way it works is there are some smart contracts that they are deployed on Ethereum l one, and they have roll up smart contracts, they have bridge smart contracts that they are all responsible for communication between l one and l two, and also the security of those communications. So what is arbitram orbit is basically you can grab those same exact smart contracts with very minor modifications, and you can just deploy it on any parent chain. Let's say you want to do an l three on top of arbitram one. You will go ahead and deploy those smart contracts with those modification that I mentioned on arbitrary one.
00:05:21.542 - 00:06:23.574, Speaker B: And then you have your orbit l three on r one. And of course, you have to do some minor modifications on the node software as well to provide support for that. So was it hard to come up with orbit? Not quiet, but it wasn't really easy either. All right, so maybe you have this question of why would you want your arbitram orbit if you have already access to arbitrum one, and you can go ahead and use it and interact with it. So there are tons of the reason that might push you to do your orbit chain, which I'm only going to go through some of them here, but I'm hoping that that will inspire you to think even beyond what I'm going to describe. So the first one is you can go ahead and totally customize the software, the state transition function. So arbitron one, the way it operates, it's been always in line with Ethereum.
00:06:23.574 - 00:07:04.970, Speaker B: So it has this motto that it's always EVM compatible and it was always like that, but it doesn't have to be the case with orbitchain at all. So what you can do is you can grab the tech behind Arbitron one and based on your needs for your protocol, you can do anything, basically. So I have some examples here. Hopefully they will inspiring you. The first one is you can do native account abstraction and directly integrate smart contract wallets in your chain. You can add support for those eips that you think Ethereum is not going to add support for them anytime soon. And you can have access control in place.
00:07:04.970 - 00:07:43.346, Speaker B: So you can have part of your chain or even the entire chain, private and permission. And basically the possibilities are endless. So you can do anything. So hopefully these are inspiring enough for you. The second reason is the gas price, reliability. So when you deploy an application on arbitram one, arbitram Nova, or basically any blockchain, the cost for your user, the cost depends on what other applications exist on that chain and what is going on on that chain. So block space is something that is relatively available on arbitrage one now for users.
00:07:43.346 - 00:08:23.490, Speaker B: But this is not going to stay the same, especially as time goes on and we have more demand. So at some point if you have your applications on arbitrage one, you'd have to compete for the block space. And the way you really can hedge against that is to have your own orbit chain. So you have a dedicated chain for your application. So users, your users do not have to worry about other applications monopolizing the block space. So you don't have to worry about some meme coin being launched in some specific date which are going to monopolize the whole block space. And we have the customized protocol logic as well.
00:08:23.490 - 00:09:07.594, Speaker B: So I talked about the customized state transition and the way blocks are produced, but you can totally go ahead and change the protocol logic based on your product needs. So there are some examples here that again, I hope they will inspire you. The first one is you can incorporate different alternative data availability layers for your chain. So right now, any trust technology. It posts everything to arbitram Nova. So it uses arbitrum Nova as a DA layer, and it's very strong and it's powerful, but it totally is not the only solution out there. So you can use celicia, you can use eigen layer or whatever Da you want and directly incorporate that with your chain.
00:09:07.594 - 00:09:50.810, Speaker B: You can develop your own governance system. So right now, our public chains, of course, they're all governed by arbitram Dao, but that doesn't have to be the case. So you can grab the tech and you can come up with your own government system. You can adapt the challenge protocol to refine settlement logic. So this is the topic that has been discussed quite a while in different research forums, and you can even use innovative cross chain communication methods. So if you've ever used arbitrum, you know that we have this specific cross chain communication method called retrieval ticketing system, and that perfectly works. But I'm pretty sure there are tons of those methods out there that you can explore.
00:09:50.810 - 00:10:33.434, Speaker B: And at the end, you can use a different sequencing model. So, sequencing has been a hot topic for a while now in the roll up ecosystem. So if you have decentralized, shared and distributed sequencing. So based on your need, you can go ahead and plug in those models into your chain. Okay, so the other question that I want to address in this talk is, maybe you're thinking of why would you do an l three instead of l two? So, we'll talk about the trade offs here and we'll see. So the first one is the finality speed. So the way roll ups achieve their finality for the transaction is through the Ethereum L one.
00:10:33.434 - 00:11:35.200, Speaker B: So when you're interacting, let's say with arbitrage one, you send your transactions to the sequencer. The sequencer would batch those transaction and it would post those batches back to l one, ethereum l one. So if you really want to have the hard finality for your transactions, you have to wait for those batches to be finalized on l one. And this batch posting it has some fixed cost that you would rather to spread over more number of transactions so that you would pay less for that. And of course, on l two, this fixed cost would be a lot less than posting on l one. So at the end of the day, the bottom line is that posting those batches to something like arbitrage one is a lot cheaper than ethereum l one. So this way, if you have an l three chain on top of arbitram one, you can send batches more frequently in a cheaper price, and you can achieve finality a lot faster than posting to ethereum l one.
00:11:35.200 - 00:12:22.942, Speaker B: The other thing is support for arbitram stylus. So if you run an l three on top of a chain that already supports stylus, you can do a lot of things. So the possibilities with stylus are endless. So, Stylus is a new technology that adds support for writing smart contracts, not only in solidity, but also in C, C plus, plus, and Ros. And this opens a lot of opportunities. So if you run an l three on top of a chain that supports stylus, I wouldn't be surprised if your l three chain is way more advanced than the current l two s. So the example is the way outbox smart contract works on arbitrage, one with vertical trees, which has been talked about for quite a while.
00:12:22.942 - 00:13:16.798, Speaker B: On Ethereum, it would be more efficient, but worker trees, because they need some primitives that are not available on EVM, on Ethereum, they can be implemented, but stylus, on stylus, they are feasible and possible. So they add a lot of values. And the last but not least is having the cost effective bridging solutions. So many roll ups, they rely on different bridging solutions, different exchanges, and those things that they want their users to be able to interact with. So if you have an l two on top of l one, your users would need to go through the Ethereum blockchain. So, of course, transacting on something like Ethereum is way more expensive than arbitrum. So if you have an l three on top of an l two, your users would need way less gas price for interacting with those exchanges and those bridging services.
00:13:16.798 - 00:14:01.254, Speaker B: So things to really focus on here would be the token and east deposits between two chains, withdrawals and cross chain messaging. All right, so let's say you're sold and you want to know how you would launch your orbit chain. So to launch your orbit chain on Mainnet, we strongly advise you to go through the roll up as a service providers, because it is a risky process and it has a lot of corner cases. Definitely, we provide support on our discord, but this is what we recommend generally. But here, I'll walk you through how you can launch your orbit chain on a testnet. So we provide this very simple UI tool. It's orbit arbitrum IO.
00:14:01.254 - 00:14:43.946, Speaker B: You would visit that link, and you have two options. So either you can choose the roll up or any trust technologies. We're going to talk about the differences in a bit. So in a roll up orbit, in roll up technology, the way is for sure. I'm not going to go through the details of how roll up works, but let's say you send your transactions to the sequencer. The sequencer, as I said, it batches the transactions, compresses them, and it posts those batches to the parent chain, which in this case would be the l two chain, let's say arbitrage one. So let's say you choose the orbit roll up and then it would open up some very basic configuration for you.
00:14:43.946 - 00:15:53.358, Speaker B: You have to choose the chain ID chain name, and then the challenge period blocks, which are the number of blocks that the dispute periods are going to take. This would be on the parent chain and the stake token, which is a token that your validators, the chain validators need to stake in order to be able to validate the chain. This is currently hard coded on ETH, but we will open the possibility for other ERC 20 tokens as well, and base stake in ether, the minimum amount of ether that your validators need to stake in order to participate in a challenge protocol. And then the owner of the chain, who is the address EOA address that does the chain upgrades and those things by default, it would be the wallet that deploys this chain. And you can see the gas token which is hard coded, you can change it, I'll tell you why. And then you have the batch poster address which is configured automatically for you. So when you do that, when you deploy your chain on a parent chain, when the deployment transaction has gone through, this will show up and you have to download two files.
00:15:53.358 - 00:16:29.526, Speaker B: One of them is for configuration the node. As I said at the beginning of the talk, you have to change the node to add support for your orbit. And the other one is the configuration for your orbit chain. So what you have to do is you download those two files and then you would go to kind of like a setup script in a repo that we provide. And there are some steps that you have to go through here. There's a docker container that you run and it basically what it does. Oh yeah, this is the setup script link that you go to after you download those files.
00:16:29.526 - 00:17:01.222, Speaker B: And then there are some steps, as I said, that you have to follow. There's this docker that you run. And once you run the docker with those configuration files that you downloaded already, it would just launch a node with public RPC, which is reachable at your local host at this port. And also the cool thing is that it runs a block scout instance for your orbit chain. So you have everything at hand. You can use that RPC and plug it into your metamask and start interacting with your chain. And that is all done.
00:17:01.222 - 00:17:46.674, Speaker B: So now you have, as I said, the RPC link. You have the block scout Explorer for your chain and inside that outputinfo JSON file that you download, you have the chain config, you have the core contract addresses for your orbit chain, and you have the token breach contract addresses. So everything for your chain sitting there, you're done. So let's say you want to choose an any trust. So what is the difference between any trust and roll up? So remember I just described how roll ups work. So the only difference between roll up and an etrust is that here the sequencer would not post the batches to l one. So what it does is it posts them to a set of servers which we call data availability servers.
00:17:46.674 - 00:18:41.382, Speaker B: So those would kind of attest on those data and they put their attestation on the parent chain, which here would be l two. The differences between anytrust and rollout would be because anytrust does not post everything on a parent chain. It's a lot cheaper. As I said, it relies on data availability committee for those data to post to parent chain. So it's really suited for gaming and social media applications because they're not really requiring high security because it kind of compromising security a bit for cheaper cost and roll up. Specifically they're good for financial apps which need higher security. So the only difference here for anytrust is that you can add your custom gas token which is really cool.
00:18:41.382 - 00:19:30.694, Speaker B: So this is not available on roll up by the way, only any trust can have their custom gas token. So this gas token, it has to have some requirements which I'm not going to go through because of the time limit, but we provide all the info on our docs. You can easily have whatever token that has these requirements as a custom token for your chain, which is really cool. And then there's this extra step for setting up an orbit, any trust which is to configure a key set for those data availability servers which is really easy to follow, the instruction is there. And then we have tools and resources available for your orbit chains. We have an SDK for you to build these orbit chains. We have the docs available and we even have a monitoring tool for your orbit chains which is really cool.
00:19:30.694 - 00:19:48.960, Speaker B: You can monitor everything about your chain. And at the end I want to say arbitrum is freedom. So you can basically do whatever you want with this orbit chain. It's totally permissionless. You don't need to get any permission from Dao. And that would conclude my talk. I hope you really enjoyed that.
00:19:48.960 - 00:19:51.130, Speaker B: Bye.
