00:00:00.250 - 00:00:32.322, Speaker A: My name is Sorek. That's what everyone knows me online as. I am a grey hat hacker, and interestingly, now a local politician in California, most well known for developing Sedia, the alternative to the App Store for jailbroken phones. So if you've ever used a jailbroken iPhone, you probably use my software. However, currently I am working. However, thank you. However, currently I am working on Orchid, which is a decentralized marketplace for programmable bandwidth.
00:00:32.322 - 00:01:24.040, Speaker A: Been doing that since 2017. Been kind of embedded now in the crypto community, I tend to go to conferences, hackathons, et cetera, and I give talks on behind the scenes of exploits. A lot of times our hacker conferences are in places like Vegas, where you see magicians like Penn and Teller give presentations, and one of their big shticks is explaining how the trick works and then sometimes doing more tricks than they don't tell you how that works. There are a lot of aspects of security that you can learn from seeing these kinds of mistakes and walking through the code, which we will not be doing today, and seeing which is where the time will come from in some sense, and seeing how a trivial mistake or an incorrect thought process can lead to. Oh, yes, sir, you can take your laptop back. I'm sorry. Incorrect thought process can lead to a complete control of the system.
00:01:24.040 - 00:01:59.410, Speaker A: Part of the reason why is that we're really building mathematical abstractions here. And as soon as you make even a single mistake, you've done the moral equivalent of assuming one plus one is equal to three. Once you make an assumption like that, if you ever remember your high school algebra, now, you can prove anything you want. And a lot of times I think developers underestimate or underplay, maybe understate the importance of these some potentially minor looking mistakes. Oh, yeah, there's a config file that sometimes he can't load. Oh, yeah. Sometimes somebody will try to add an image to their account and it will fail.
00:01:59.410 - 00:02:53.746, Speaker A: No, that mistake can now be compounded and built up, potentially using other exploits, or potentially just with incredibly tricky weaponization for the exploit in order to take control of your entire system, in this case. And so what it's worth, I wrote an article, soric.com saurik.com optimism HTML, which this talk is probably not going to live up to anyway in some sense. But what I've done is I've extracted one quick single narrative from it that I believe that was really what resonated with people on comments on Twitter and also in some of the news and articles so quickly. What is optimism? The dictionary defines optimism as hopefulness and confidence about the future of the successful outcome of something where the doctrine, especially as set forth by Liebnitz, that this world is the best of all possible worlds. And I think that is in some sense what we are seeing with the community as a whole.
00:02:53.746 - 00:04:10.226, Speaker A: So I some sense say that the original sin which came from this bug was an attempt to store the attempt to make a change to EVM semantics, to store the balances of all of accounts as an ERC 20 contract sitting on top of the L2 I point this out partly because in December 6 of 2020 I went onto the optimism Discord channel based on an invitation on their website saying that for anyone where this would cause an issue, or they believe that they see some kind of problem, that they should interesting that they should come onto discord in order to talk about it. If this type of functionality is critical for your application, please let us know. On discord where I went and I explained that the issue that this would cause and the reason why this was a problem, and fast forward a year later and we see OVM 2.0 come out and OVM 2.0 attempts to fix some of the aspects of this, moving from what would be maybe EVM compatibility to EVM equivalents. And here's where we get to fast forward through a lot of things. I'm just going to read the article and it goes through the actual exploit beautiful slides showing that the code that they had implemented actually already had a discrepancy and a mistake.
00:04:10.226 - 00:06:15.482, Speaker A: It already was not compliant with the other EVM implementations because of what I would argue is an underlying incorrect architecture of the Go Ethereum itself, which I think is actually being caused in some sense by a mantra from the go community about how packaged local access works, leads to a mistake where when you self destruct a contract on optimism, all of the balance of the money that is stored in that contract gets not only sent to the beneficiary, but on optimism would also get left in the original contract. And due to then the semantics of self destruct, which do not actually destroy the contract until the end of the transaction, you were able to have a contract self destruct to itself in a loop, doubling its amount balance each time in order to cause what some people call an inflation attack. Now at this point there'd be a slide, which is the rick and Morty episode with the setting the value of a dollar from one to zero, which in some sense I kind of feel is the kind of thing that these attacks, whether it be bridge attacks, or serious infinite inflation attacks end up causing. And when you think about the kind of damage that you can cause with these issues, it is brutal. You go in and you just start buying up tokens and allow automated arbitrage systems in order to begin bringing in and moving in money and messing with the economy on the l two, leading to a ledger that is so horribly confused that you can no longer piece it apart. This is more devastating than merely taking a bunch of money from a reserve, as you see in many bridge attacks, because you can always put money back into a reserve. But once you no longer know who has transacted with whom with a legitimate quantity of money, and there are people who have somewhat legitimate claims because they were trading three levels deep on money that had originally been stolen, what do you do? So this bug was awarded.
00:06:15.482 - 00:06:52.046, Speaker A: I did not go max damage. I responsibly disclosed it to optimism, who paid me out a $2,000,042 bug bounty, the $42. We momentarily thought maybe this would be the largest bug bounty payout to a single developer for a single bug ever, but it's not. First of all, there was a $2,000,000.01 we saw, and that's why the $42 Boba, which is a fork of optimism, kicked in an additional 100,000, which was their max. But sadly, two point. Well, sadly, with respect to having the fun of saying that it was a record, $2.1
00:06:52.046 - 00:07:20.934, Speaker A: million is still not the record. It is $2.2 million. If anyone from Medus is in the audience, you had a $1 million max payout, and there's not that much needed to go to get back to the record. But so I think as a community, we spend a lot of time where we end up accidentally replicating the mistakes of Web 2.0 with move fast and break things. And this is something that I end up talking to people and they still remember Silicon Valley and move fast and break things.
00:07:20.934 - 00:07:45.200, Speaker A: And I want to remind that in 2014, Mark Zuckerberg actually retracted. Move fast and break things. He said move fast with stable infro, because when you build something that you don't have to fix ten times, you can move forward on top of what you've built. These are the real changes that we're making, so people can rely on us as a critical infrastructure for building all of their apps across every mobile platform. Measure twice, cut once, and we're done.
