00:00:00.250 - 00:00:30.450, Speaker A: Cool. Hey, guys, my name is Nick Pye and I'm the CTO of across particle. Today we're going to talk about across the settlement layer for cross chain intents. So we're going to cover bridges, intents and chain abstraction. So the agenda today is to discuss what is the chain abstraction problem? I'll frame that. We'll talk about why intents are the best architecture for crosschain chain abstraction, how intents work under the hood. So a quick technical preview.
00:00:30.450 - 00:01:23.794, Speaker A: We'll frame bridges as settlement layer for crosschain intents, and then finally we'll talk about chain abstraction. We'll bring it full circle. How do we make the crosschain experience for users invisible? And for that, I think we're going to need some crosschain standards, which I'll propose at the end of the talk. I think VC from socket explained the interoperable problem very well. So today in blockchains, we have multiple l two s connected to l ones, and they have in protocol or canonical bridges to each other. This is kind of like the optical fiber between continents, while chain abstraction and the magical ux that you have is the Internet on top of that optical fiber. So today in the multirolip world, we have multiple l two s connected to an l one via these optical fiber paths.
00:01:23.794 - 00:02:30.300, Speaker A: These in particle paths are slow, but they are very secure because they are secured by the same consensus layer that secures the l two consensus itself. The problem with these paths are that they are complex and they all offer different user experiences. So users, when they want to bridge from optimism to mainnet or arbitrum to mainet, polygon to mainet, they have to call different functions. And that's very complex as developer and user to support. So fast bridges are built on top of these optical fibers, and they offer fast paths that forward users intense cross chains. However, bridges introduce new trust assumptions. So the question is, can we rearchitect bridges so that they can still offer speed without adding additional trust assumptions? And I'm going to present how we think that replacing the bridge with a market of competitive relayers gives us the properties of speed, low fees, while maintaining security.
00:02:30.300 - 00:03:14.170, Speaker A: So intent based bridges introduce a solver competition on top of the optical fiber. These solvers compete to fill crosschain user intents with their own balance sheet, and they can take on deferring amounts of finality risk. So these solvers can be very fast and very cheap, and end users can get very fast, cheap, secure user experiences. So the relayer, not the end user, interacts with the bridge. So where we're ultimately driving towards is chain abstraction. So chain abstraction is cheap, fast, secure interoperability that is so seamless, you don't know you're dealing with a blockchain. And critically, that doesn't rely on a corruptible, trusted vendor.
00:03:14.170 - 00:04:06.326, Speaker A: So one of the sub problems of chain abstraction is cross chain value transfer. If you can't send value between chains, so with sending tokens, then there's a very limited set of actions that users can do. And so across is trying to solve the sub problem of abstracting away value transfer. So one key insight that across has is that value is fungible. It doesn't really matter how your money got to the destination, all that matters is you got your money. This is the mental model for why intents, or in other words, a competitive market of solvers, work so well. So the rest of this talk, I'm going to convince you that intents solve chain abstraction, and ultimately we're going to need a standard for intents and how to originate them efficiently.
00:04:06.326 - 00:05:01.998, Speaker A: So first, I will propose a straw man. The one way to bridge is via message passing. Message passing is a user on the left depositing tokens into a contract, a bridge contract. And that bridge contract talks to its sibling on the destination side, either via optimistic relay, ZK relay, or proof of authority relay. The font's really small here, but the problem with these sort of message passes is that they're either slow or insecure. So if there's a centralized message passer, I would argue that's insecure, while if the relayer is optimistic or ZK, it's going to be pretty slow because the message passed can only happen after full finality. On the origin side, message passing also cannot price transfers dynamically.
00:05:01.998 - 00:05:49.700, Speaker A: So not only is pricing slow, but when the message is passed by the bridge, the bridge usually will release tokens on the destination side via some sort of amm pool or dex pool or some other way. But the thing is, the bridge encodes its path to solve the user intent into the code. It doesn't really have the ability to dynamically pick the most optimal route for pricing. The upshot of message passing, though, is guaranteed execution. And this is important. Intents does not guarantee execution in all situations, but intents does offer a potentially faster and cheaper way to bridge. So bridging with intents does not actually send messages between blockchain A and blockchain B.
00:05:49.700 - 00:06:53.240, Speaker A: An event is emitted on blockchain A, and it's seen by solvers who are running off chain sophisticated code. And what they'll do is they'll fulfill the user intent on blockchain B, then the solver will go to the bridge and ask for repayment later. Crosschain intents solvers fill users with their own capital quickly and cheaply, and then get repaid later. So intents can be very fast. Across is a lot faster than its competition because there's a competition for fillers, because there's always a filler who can take on some finality risk and they will always beat the others to it. So you can think of intense based bridging, really as a marketplace for fulfilling orders. It's kind of a cross chain limit order market where any user sends an order like I have USDC on optimism and I want to get weth on Mainet and then there might be three relayers who see this and they're going to compete on speed and also price to fill that quickly.
00:06:53.240 - 00:07:52.410, Speaker A: Intents also can be really cheap, and this is a similar property in that relayers are going to compete to fill this order. Intents are also very cheap because messages don't have to be passed on every single bridge. Imagine a user sends 100 different deposits. That leads to the filler sending 100 fills, but there's no messages being passed here. The total repayment for the 100 orders can be batched at the end of all 100 orders into a single message pass to repay the relayer. So the mental model that I use for how fillers price intent transfers very cheaply is that they essentially have access to OTC loans, external dexes, binance, coinbase. They can access these liquidity sources off chain to make their own balance sheet, and then fill the user cheaply.
00:07:52.410 - 00:08:29.160, Speaker A: And finally, intents can be really secure. And this is because intents separate the urgent part, the user needing the fast fill, from the complex part, which is determining whether a user's intent has been fulfilled correctly, and whether the filler needs to be repaid so the intent can be verified via optimistic fraud proofs. ZK proofs could be proof of authority, whatever, it could take a long time. That's the key point. And these intents can be refilled in batches. The fillers are not urgent users. Users need their liquidity very quickly, whereas fillers are sophisticated and are willing to wait.
00:08:29.160 - 00:09:22.950, Speaker A: And fillers ultimately can be repaid on the chain of their choice using these canonical messaging paths or in protocol paths. And as long as these in protocol paths are the same canonical messaging, in protocol messaging networks that are used by the l two s, then intense doesn't really add any more security assumptions. So I guess the main point of this section is that bridges are ultimately intent settlement layers. We have an intent layer, which surfaces the user order, for example, an RFQ in uniswap x or calswap, or maybe some sort of batch auction. Or it could be an aggregator. And then we have the solver layer, which competes to fulfill user orders. And then finally we have the settlement layer, which determines which orders have been filled correctly.
00:09:22.950 - 00:10:07.670, Speaker A: So I would argue that bridges should be focused on the settlement layer and not solving optimal value transfer paths. Bridges are going to compete at this bottom layer, and these bridges are going to offer differentiated services. Ultimately, settlement contracts are going to win based on what services they can offer to fillers and whether this leads to faster refillment or cheaper fees. For example, here's a set of features that across offers, across offers, batch repayment intents can be fulfilled hundreds, thousands at a time, and that leads to lower amortized costs. Repayment speed. There's a spectrum there, relayer fee models. So relayers or fillers solvers are ultimately going to be charged some fee in one way.
00:10:07.670 - 00:11:06.502, Speaker A: And so the model is going to ultimately determine what price the filler can show to the user. Flexible repayment chain fillers, all things being equal, are going to prefer being able to be repaid on any chain they want to backstopping intent fulfillments. So imagine you send an order and no filler can fill it. Can the settlement layer use its own balance sheet to repay the intent? That would be a nice value add, but it also adds complexity. Exclusive relayer periods does the settlement layer allow the user and the solver to enter into an exclusive negotiation for price? Imagine this is an RFQ responded by the filler intent expirations should user orders, should they be allowed to expire? And then more exotic options like multiple input or output tokens and chains. Ultimately, this competition is good for users. So we want many different settlement layers.
00:11:06.502 - 00:11:39.220, Speaker A: Across is just one option that I work for. But ultimately what we do need is a standard for intents. These orders, or intents are grounded in network effects. We want as many fillers on the network as possible. And these fillers ideally should be interacting with every single settlement layer. So it would be best if all the settlement layers spoke the same language and if we had a universal order intent. So I'm imagining some sort of EIP that defines a cross chain limit order.
00:11:39.220 - 00:12:23.060, Speaker A: And I will say that the downside of intents is that if not enough relayers are online, then the UX suffers. So it is a network effects all the way up and all the way down. So the vision for across and what we're working on, and I'll add some contact details at the end if you want to collaborate, is that across wants to firstly help build an ecosystem where we have an efficient RFQ for surfacing intents. At the solver layer, we established a standard so that different fillers are speaking the same language and we are offering a settlement layer. So I'm going to go now. Talk about intent standards and auctions for crosschain intents. This is more experimental greenfields that we haven't fully fleshed out yet.
00:12:23.060 - 00:13:29.026, Speaker A: So here's my straw man proposal for a crosschain order intent it's a permit to compatible intent. The key point here is the highlighted settlement contract in the order. The user when they submit their order, they're going to be able to specify whether they want their order to be settled by a cross or some other settlement layer. And the choice of settlement contract will impact the user's security whether how confident they are that their order will be fulfilled, how cheaply they can get the fill off. Because the fee model is going to affect their pricing and the other properties of settlement contracts I was talking about before. The other fields are pretty obvious and I think not too contentious. The swapper so the person who wants to swap and then the permit to nonce and the permit to initiate deadline, if anyone's not familiar with permit to think of it as an allowance that you sign off chain that allows anyone to pull your tokens from the chain that you have specified.
00:13:29.026 - 00:14:17.800, Speaker A: So this sort of order would allow users to initiate a cross chain bridge without sending an onchain transaction. The settlement contract would then have to define a simple resolve function that takes in the arbitrary data, sorry, that's the last field here. Order data that then returns the actual contents of this arbitrary data. And this arbitrary data would be more settlement contract specific fields such as input token, output token. For example, some settlement contracts might want multiple output tokens. So onto the last part, which is how solvers are going to discover user intents. I propose we add an auction to the beginning of the user experience.
00:14:17.800 - 00:15:19.078, Speaker A: If the user wants to send eth from one chain and receive USDC on another, the user should enter into a quick auction where they can negotiate with fillers to get the best price. This auction should produce the crosschain intent as a permit to order. The filler can then take this order and bring it on chain. The filler can then take this permit to order, bring it on chain, and then the filler has initiated the user bridge for them. At the end of this interaction, the user will receive funds on the destination chain and the user's intent will have been fulfilled. The filler will then request repayment from the bridge protocol after some optimistic or ZK challenge period. So at the end of all of this interaction, we now have a situation where the user has not sent an onchain transaction, but has signaled their intent and has ultimately received funds on the destination chain.
00:15:19.078 - 00:16:04.980, Speaker A: This is almost 95% of the way there to cross chain abstraction. And all we're missing is for the order to have some sort of arbitrary call data such that when the fill is sent on the destination chain, the user's funds can be used to enter into a lending position or a staking position. So at the end of this with intents, we have user signing message off chain and entering into a staking position on the destination chain without having ever sent a transaction. So this is my contact information on Twitter and Telegram. Here's my GitHub. And today across is working on the cross chain intent standard. We're hoping to publish that next week.
00:16:04.980 - 00:16:53.196, Speaker A: And across wants help designing a cross chain intent auction architecture. Cool. Thank you. Any questions? Wondering when you create the intent? Yeah, so the question was, when a user submits an intent, how do they set the price correctly? And so that's where I think an auction is really good for price discovery. And I know there are issues with auctions. For example, Uniswap X, their dutch auction. It's a great auction in that you start at a price and you descend to a reserve price.
00:16:53.196 - 00:17:28.780, Speaker A: However, the problem is where you actually start the price. And I think that's a really hard problem. I think that's where maybe an RFQ system can do really well. An RFQ to set the price to lead into the dutch auction. I think auction design is really interesting and there's a wide open space here. But I do think auctions are the best way to set intents, because today the way it works is the user essentially picks a price out of the air, sends it, and hopes a filler fills it. Sorry.
00:17:28.780 - 00:18:18.792, Speaker A: Yeah. So the question was, how does the solver prove that they've fulfilled the intent? So when the solver fills the intent, they send a transaction. So then the bridge protocol, after, say 2 hours, looks at the last 2 hours of fills and tries to match the fills with the deposits, and comes up with a list of successful fills according to some protocol rules. So the solver is not really tasked with proving anything. The solver just has to interact with the right contract and set the parameters right. Because the solver is essentially bringing truth from a different blockchain onto the destination blockchain. Doesn't the user not get.
00:18:18.792 - 00:19:21.460, Speaker A: What? Sorry. Yeah, so I didn't quite get all that, but I think the suggestion was that auctions are not the most efficient way to surface intents. And I agree with that. And I didn't actually hear your solution, but I'm sure it's better than auctions it. Okay, thank you, guys.
