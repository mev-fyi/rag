00:00:00.410 - 00:00:35.154, Speaker A: So, hi everybody, I'm Marina Guriva, running neon labs, which stands behind neonavium. Yes, I know it's neonavium running on Salana. And basically we love Ethereum, and we've been with Ethereum since 2014, I believe me personally. And the idea was, okay, Ethereum virtual machine is great. So we want to bring in to Solana as well. And we did it. So Neon EVM is a smart contract, EVM running natively on Solana.
00:00:35.154 - 00:01:43.054, Speaker A: That enables a very easy way for Ethereum Dapps to come to Solana natively without any code changes or optimizations. And basically the numbers that we have, because we are on Salana, and you all know the salana, we have a throughput of 2000 TPS, and we have the cost of transactions, which is very low indeed. So you can see the numbers here, but it's worth trying, and it's worth doing these, as you can understand from what we have as the result. So talking about neon architecture. So yes, as mentioned, we have a DaP running natively on Solana, but still, we want Ethereum dapps to come and deploy using standard tooling, not anything like fancy. And we want Ethereum users to come and start using metamask, not anything else. And we did exactly that.
00:01:43.054 - 00:02:38.314, Speaker A: So basically any dev can come deploy, and then any user can come and open metamask and start using Avapo on neon, for example. So how it might be done? So it's done because we have a special thing, we call it proxy server, that wraps Ethereum like transactions into Solana transactions and sends them to Solana to be executed by neon EvM on Solana. So you have to understand that Solana differs greatly from Ethereum. And the most crucial thing is that on Solana, the programs are separated from data. Yes, you know this. But just in case you forgot. And this let us do a lot of different things natively on Solana.
00:02:38.314 - 00:03:33.166, Speaker A: This is how neonivium looks like being deployed on Solana. So basically we have neonivium program with Ethereum virtual machine inside, and we do have a special set of accounts where all the contracts are deployed. So basically, when Ava comes or curve comes or any other Ethereum dev comes. So it's set on a special Solana account with all the data put inside. And all the connected data are linked to this special Ethereum contract that is deployed. And the accounts are represented as a separate set of Solana accounts as well in terms of transactions. So as you might know, Solana can execute in parallel.
00:03:33.166 - 00:04:35.842, Speaker A: And this is huge because the throughput that we have because of this factor or due to these factors. But then Solana needs to know and understand which accounts are involved into the execution of a particular transaction. So we have to put a list of accounts for each and every Ethereum like transaction. And this is the structure of Solana transaction. And this is a place where we put all the information and also we put all the Ethereum relevant information inside Solana transactions. Basically what we are doing, we are actually wrapping Ethereum like transactions into Solana transactions for them to be executed correctly as Solana transactions. So in terms of where the transaction goes, once a user pushes the button, the Ethereum light transaction goes to neon RPC endpoints.
00:04:35.842 - 00:05:43.014, Speaker A: And this is the proxy server thing basically. And then the proxy wraps up the transaction and sends Solana transaction to Solana RPC endpoints. It's important to understand that the proxy has to put into the Solana transaction a list of accounts, Solana accounts involved into the execution, as mentioned. So it emulates the execution, calling the original neon EDM deployed on Solana. So in order to page the list of Solana accounts involves basically neon contracts, as you might remember, and neon accounts and put it into Solana transaction. So then it sends it all to Solana node. How the parallel execution happens natively, very easy indeed, because there are tons of Solana transactions coming to Solana RPC endpoints and basically Solana validators, they treat them as normal Solana transactions.
00:05:43.014 - 00:06:54.354, Speaker A: So Neonavm contract is called and within Neonavm contract, as you might remember, the relevant Ethereum contract is called avocurve or whatnot. And then the execution happens. But sometimes we have to execute very long ethereum transactions. So as you might know, Solana has a limit of instructions per transaction. And in Ethereum the limit is only determined by gas consumption. So in order to wrap up a very long Ethereum transaction into Solana transaction, we have to split it into several transactions and execute them one by one in order to ensure that any Ethereum like transaction is executed correctly by neon EVM. So this is how the iterative execution looks like.
00:06:54.354 - 00:08:46.002, Speaker A: So basically we're dealing with chunks of Ethereum transactions and we are sending them to proxy server, then to EVM. And then we block the accounts involved. At the beginning we do one by one all the executions, and then we write the state of Solana rewrite and then unblock the account after the latest transaction is, and the crucial question is here, how the atomicity is insured by us and it's insured in a very simple and nice way. So basically, because Solana blocks the accounts involved intuitive execution of one particular transaction, and we are blocking the accounts at the beginning of the first chunk of the first neon transaction, then everything that comes in parallel while the loan Ethereum transaction is being executed, it's being blocked and it fails because the accounts are blocked. So this is what we have. And you know, then when we are talking about a proper execution, we are talking not about handling the Ethereum like transactions in a proper way. We are talking about having the right infrastructure in place in order to ensure that any dev can come and deploy and use the standard tooling that is available on Ethereum.
00:08:46.002 - 00:09:38.230, Speaker A: Definitely. And we do have such a tooling. So we have oracles, we have indexes, we have explorers, we have bridges, we have NFT support and whatnot. And for the users, we have also everything that they need and they accustomed to using on Ethereum. So basically we do have the wallets, we do have the sdks and APIs and everything else. And we do have the Ethereum Dapps coming to us asking for Solana and asking for deployment. And basically what we have right now, we have a special build the program launched by Neon foundation.
00:09:38.230 - 00:10:09.370, Speaker A: And we invite everybody, every single Ethereum dev that want to grab yet another market to come and try and build something on neon and basically make Solana Geist accustomed to using very nice ethereum occasions that we have abound. So that's it. Thank you for your attention. Bye.
