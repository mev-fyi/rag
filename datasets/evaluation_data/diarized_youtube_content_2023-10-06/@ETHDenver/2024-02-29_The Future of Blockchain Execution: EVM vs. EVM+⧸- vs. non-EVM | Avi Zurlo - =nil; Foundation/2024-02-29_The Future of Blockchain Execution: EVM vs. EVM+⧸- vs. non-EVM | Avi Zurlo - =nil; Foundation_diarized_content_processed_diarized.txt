00:00:00.170 - 00:00:24.882, Speaker A: Foundation. He's going to be diving into the future of blockchain execution. Welcome, Avi. Okay, there we go. Hey, everybody, I'm Avi Zurlo. I'm chief product officer at Nil Foundation. Nil foundation was founded in 2018.
00:00:24.882 - 00:01:01.840, Speaker A: We've been pioneers of ZK technology ever since. We built the world's first circuit compiler, ZK LLVM, the world's first zero knowledge proof market. And later this year, we'll be releasing the world's first ZK sharding l two for Ethereum. Today I'm going to be talking a little bit about the future of blockchain execution. And this talk is going to be focused primarily around the EVM. We are at ETH Denver. We are an EVM chain, and despite what you may have heard recently, the EVM is just fine.
00:01:01.840 - 00:02:07.026, Speaker A: And we're going to talk a little bit about that today's okay. So to start some basics. And the first half of this presentation is going to be a little bit more technically focused. If you're like a low level engineer, it's probably very redundant. But we're just going to walk through a few of the basics of what makes an execution environment. What makes a virtual machine? A virtual machine is essentially a software computer that runs on top of physical hardware, and it is able to access the resources of hardware via hypervisor, and it allows developers to build applications and use tools that may not be native to the hardware that they're actually operating over. So virtual machines are used for pretty much all programming development today, but they're also used for blockchains.
00:02:07.026 - 00:02:43.890, Speaker A: And this is where we have the EVM. Now, the EVM is essentially the rules of the correct state transition of Ethereum. The Ethereum blockchain. It reads the Ethereum bytecode. So solidity and Yule and Viper code gets compiled down through an Ethereum compiler into a bytecode which the EVM can read. It's a stack based machine. It's fully Turing complete, meaning that it can compute and process sort of arbitrary computations.
00:02:43.890 - 00:03:39.270, Speaker A: And this is very important for smart contracts, smart contract logic, and uniquely unlike traditional virtual machines, it's run by thousands of nodes that process this state transition function in lockstep. And this is what gives the Ethereum virtual machine its very unique characteristics of global shared state and decentralization and so on. Now, the state transition is an incredibly important component of the EVM or, and of the Ethereum blockchain. It essentially takes the world. And I'm going to flip to the next slide here. It takes the current world state, some sort of transaction list. It applies the state transition function, which is essentially the Ethereum virtual machine, and then it computes the resulting world state.
00:03:39.270 - 00:04:36.470, Speaker A: And this is how Ethereum builds blocks and nodes, process this in lockstep, and this is how we move the blockchain forward. Another very important part about the Ethereum virtual machine are opcodes. These are essentially the middle language and instructions that a program can use. Because EVM is a standard stack machine. You have typical things that push and pop information from the top of the stack, but you also have blockchain specific operations. And these are things like address that pulls the current address block hash, pulls the last 256, or hash for the last 256 blocks. And every smart contract can be broken down into sort of a series of sequential opcodes operations.
00:04:36.470 - 00:05:21.558, Speaker A: And the EVM uses a gas counter to essentially meter the number of operations that a given transaction can use. So a user smits a gas limit, and this sort of caps the amount of opcodes you could think that that transaction can consume. And there's also sort of a limit on how much gas a certain block can consume, and there's a target of 15 million and so on. But details aren't important for now. Okay, so thank you for bearing with me. That was some of the technical background and foundation. But why is the EVM important? Well, the EVM does pretty much everything.
00:05:21.558 - 00:06:06.390, Speaker A: It touches, everything about the Ethereum blockchain. It influences everything that developers do. And this is directly from the EF's website. The Ethereum protocol itself exists solely for the purpose of keeping the continuous, uninterrupted and immutable operation of the EVM. So what exactly does the EVM touch? It touches the developer experience for smart contracts. It influences the speed at which the blockchain actually progresses. Granted, the execution of the blockchain is sort of a minority share compared to consensus.
00:06:06.390 - 00:06:54.850, Speaker A: It influences your API compatibility and developer tooling compatibility. So things like your developer environment, your wallet support, indexer support, these are all influenced by essentially the EVM that you implement. And then it also impacts hardware requirements, in particular for Ethereum validators. And here I'm just going to have this is a total side note, but on client diversity, which has sort of been a hot topic as of late, you may have heard of some concerns about the execution client concentration risk around Geth. Essentially what this means is the Ethereum node is split into two clients. Execution and consensus. Execution is what's responsible for running the EVM.
00:06:54.850 - 00:07:47.320, Speaker A: And right now this is actually an outdated number. I think it's maybe at like 64%, but 64% of execution clients run Geth. And the risk here is if Geth has a bug or a vulnerability, now the network at large is at risk. Side note. Okay, now on to some of the good stuff. What are EVM alterations? What kind of alterations might we make and who's going to make them? Okay, so to start, who is actually responsible for these alterations? So historically, the Ethereum sort of core devs and core contributors were those who were responsible for maintaining the EVM. And this lasted for many years and still persists today.
00:07:47.320 - 00:08:57.820, Speaker A: But we also have a number of other blockchains that now live in this universe of the EVM. And these are L2s, they are roll ups, and they're even layer ones. So now these are the people and developer teams who are responsible for maintaining the EVM, and we can begin to make alterations. And the natural question is why? Well, one reason why is that the alterations that happen outside of Ethereum core can serve as sort of a test bed of experimentation for Ethereum core itself, for the layer one. And this is a really nice attribute and sort of relationship between l two and other evm l ones in which Ethereum core naturally has to be more conservative with how they introduce upgrades and alter the eVM. Whereas l two s and other ethereum EVM based l ones, they can be a little bit more aggressive, right. And try new things out.
00:08:57.820 - 00:10:22.002, Speaker A: They can roll things back a little bit more quickly, especially in these permissioned sort of setups. And we have this really nice sort of like synergy between Ethereum core and the l two s other way. But we also have the opportunity for these non ethereum core EVM blockchains to begin offering new types of functionality for users and developers. And this is where things start to get really interesting, right? And so when we talk about EVM alterations, which I'm going to walk through a few, they're not necessarily for the ethereum core itself, they're for other blockchains who are running the eVm, who can be a little bit more aggressive in innovating on how the EVM actually functions. And you see here, everybody maybe one day ends up with a slightly different version of the EVM with some baseline standardization. Okay, so what are those optimizations? We have native account abstraction, parallelized execution, asynchronous communication between two independent state machines, zk optimizations, and a few more. So native account abstraction.
00:10:22.002 - 00:11:12.630, Speaker A: This is probably, I mean, who's heard of account abstraction? Okay. Yeah. So this is like one of the most popular, exciting new technologies that come out of sort of the last cycle. If we're back, which looks like we're back, and this has huge promise for improving the user experience, we can eliminate seed phrases, replace verification with biometrics or social recovery mechanisms. We can have sort of shared accounts. We can give and delegate authorization of smart contracts to interact with other smart contracts on a user's behalf. And broadly speaking, we have a bit more of a robust foundation to improve security of wallets.
00:11:12.630 - 00:12:09.542, Speaker A: Now, why might we want to enshrine this into the EVM itself? Number one, there's certainly some gas efficiency that we can squeeze out. It's not huge, but it's there. But the big one is code bug risk. Right? If we have a variety of different implementations of account abstraction, we're introducing with every sort of nuance and tweak sort of a vulnerability surface that we then need to audit. Right? And so this becomes actually very expensive, whereas if we enshrine it into the protocol, we agree on one standard, which might have some coordination overhead, but then we need to audit it once and it lives there persistently. And this is already underway. There's the rip, which is roll up improvement proposal for native account obscration and Zksync and starkware.
00:12:09.542 - 00:12:54.680, Speaker A: And I'm sure many others are working on this at l two s today. Who here has heard of paralyzed EVM? Okay, so not as many as count abstraction, but this is another really hot area for sort of blockchain infrastructure development. The idea is that we can take the sort of sequential execution of the EVM, which is single, threaded and multithreaded. Right. And run the execution of transactions in parallel. And this holds some potential for very significant increases in throughput. It ultimately helps us solve state fragmentation, which I'm not going to get too deep into.
00:12:54.680 - 00:13:49.020, Speaker A: But if we can allow a blockchain, or in particular a L2 to process more transactions, we actually need less isolated roll up, or l two instantiations, because we can fit it more on a general purpose universal L2. And this is well underway. I think polygon was actually the first, so shout out to them. But recently monad and say, which are sort of EVM, paralyzed EVM L1s have been getting quite a bit of attention. Okay, asynchronous communication. This is, I think, who knows what asynchronous communication is. Okay, so we're sliding in the knowledge set, but this is super important.
00:13:49.020 - 00:15:16.200, Speaker A: This is essentially core to enabling horizontal scalability. And horizontal scalability is sort of thought of as the most optimal scaling solution for blockchains, because we can scale by not increasing the hardware requirements of a particular node, but rather adding new nodes to the system of interest. And we need asynchronous communication between these nodes that are essentially independent state machines or independent instantiations of the EVM to communicate. And today the EVM does not have this ability to communicate asynchronously across instantiations. So there's actually been a lot of research that's gone into this from sort of ethereum core, given their efforts throughout the years for sharding. And this is actually underway at nil, where we use approvable sharding architecture and make some modifications to the EVM to allow for asynchronous communication and thus horizontal scalability. Finally, or I think we've got maybe a list of miscellaneous alterations, but Zk optimizations, right? Who here has heard and agrees Zk is the end game? Yeah.
00:15:16.200 - 00:15:57.650, Speaker A: So Zk is incredibly important for scaling. It's also very important for privacy. Today, the most popular sort of implementations of Zk for scaling are roll ups. Zk roll ups, those that use the EVM essentially build a collection of Zk circuits which make up a ZKe EVM. And those circuits actually prove the EVM and then a little bit more essentially encapsulating the entire state transition function of an Ethereum blockchain. Right. This Ethereum blockchain being a roll up or any other EVM based blockchain.
00:15:57.650 - 00:16:53.460, Speaker A: Unfortunately, the EVM and its naive implementation is not very Zk friendly. In particular, one of the biggest bottlenecks is the hash function, which is ketchak. So today most, and I want to say all, but I didn't double check, most zk evms actually switch out ketchak for Poseidon. Right. And this allows you to sort of decrease proof generation costs as well as proof generation time. We can also, and this isn't really an alteration to the EVM, but we can add alternate vm support to a L2 that's a little bit more snark friendly, a little bit more ZK friendly. And this is, as I said, pretty much underway at every Zk roll up, zk l two Zke EVM project.
00:16:53.460 - 00:17:46.514, Speaker A: And then we've got a little bit of time. There's a few other alterations that an l two might consider state size control. So sort of accelerating state exploration and potentially vertical trees. And this sort of decreases the requirements of storage that a node is sort of enforced to maintain. Adding BLS twelve, three, eight one, which is an elliptic curve that's very common or more standardized than actually the curve that Ethereum itself uses. Adding SeCp 256 R one. This is used widely in trusted hardware, right? So if you want to do things inside of a trusted execution environment, this is a super important addition.
00:17:46.514 - 00:18:41.430, Speaker A: And then we can actually just add all new vms together, right? Which arbitram has sort of done really great efforts in adding stylus, which supports waSm. And then I know we're at ETh Denver and we talked a lot about the EVM, but there are absolutely other virtual machines that hold a lot of merit in improving the execution of blockchains. The two here I have listed are both sort of Ethereum based roll ups. I think maybe eclipse is now using celestia, but movement uses the move vm, and this sort of prioritizes security. It's formally verifiable. It also has paralyzed execution. Eclipse uses the SVM, the Solana virtual machine.
00:18:41.430 - 00:19:47.080, Speaker A: Big benefit of paralyzed execution and also local fee markets. But I'm here at my last slide, but I just want to end again on the note that the EVM is just fine. The EVM has the most robust ecosystem of developer tooling, it has the most robust ecosystem of developers, and it's maybe been slow to implement some more innovative state of the art optimizations because l two s haven't had the opportunity to actually sort of experiment, right, in that they've been focused on just shipping and getting things live. Now, the L2 ecosystem around Ethereum actually has a critical mass right now I think is really the right time for non ethereum core EVM based blockchains to begin experimenting with making the EVM great again. And that is all.
