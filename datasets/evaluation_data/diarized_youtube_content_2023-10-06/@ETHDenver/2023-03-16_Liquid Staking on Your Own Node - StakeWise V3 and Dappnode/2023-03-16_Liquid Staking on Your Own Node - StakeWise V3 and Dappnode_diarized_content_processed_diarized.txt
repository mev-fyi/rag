00:00:00.250 - 00:00:17.118, Speaker A: Let's get this show on the road. I can't. Good to go. Awesome. Wicked. All right, guys, thank you for joining us. It's great to have you here in person and also hopefully there's plenty of you joining in on the stream as well.
00:00:17.118 - 00:00:51.562, Speaker A: So we're excited to present to you and walk you through this workshop on how to liquid stake on your own node from home. It I guess to start with a bit of housekeeping. The plan is to do a couple of presentations. Firstly showcasing dapper node and then showcasing statewise v three. We are then also going to run you through the statewise v three testnet and hopefully you guys can get involved with setting up your own vault. The v three testnet is not actually live yet. We're planning to launch the private testnet later this week.
00:00:51.562 - 00:01:22.066, Speaker A: So anybody who's taking part today gets a sneak peek into ultimately what the v three testnet looks like. And there's also going to be a website which you guys can find the details to follow along to, which will show on the presentation shortly. So let's get this started, I guess. First off, let's do some introductions. So for me, my name is Jordan Sutcliffe. I am the business development lead at Stakewise. My job is anything to do with partnerships and protocol growth.
00:01:22.066 - 00:01:24.760, Speaker A: Hey, good to see you. Yeah.
00:01:26.810 - 00:01:45.342, Speaker B: Hi everyone. My name is Dimitri. I'm the founder of Stakewise and currently my job is to lead the development of Stakewise V three. And yeah, make it a great technical product. Awesome.
00:01:45.396 - 00:01:47.550, Speaker A: And then we've got Paul joining us from Dapnode.
00:01:50.370 - 00:02:11.830, Speaker C: What, up there? Yes, Paul from Dapnode. Our mission is kind of make it extremely easy for everybody to be able to run infrastructure for Ethereum. And this way we get a lot more people running nodes in a decentralized manner and we help both people participate in the validation and the networks to be more resilient by being more decentralized.
00:02:12.410 - 00:02:39.854, Speaker A: You can keep it a hold of that. All right, so I mentioned there's a website QR codes there. There's also, it's docs Stakewise IO workshop. If you want to follow along, please do. And yeah, so that was a good, fantastic introduction. I've got a couple of questions. So who here is a solo staker? Nice.
00:02:39.854 - 00:03:11.446, Speaker A: That's good. So the aim for you guys is to show you exactly what you can do as a solo staker with V three. That is minting a liquid staking token against your own node and also being able to attract delegations from others to potentially spin up more validators and maximize the potential of your node. Okay, next question is, who would like to be a solo staker? Who's interested? But they're concerned because maybe of the technical difficulties or economic difficulties. All righty. Nice. Okay.
00:03:11.446 - 00:03:27.710, Speaker A: And this is where Dap node comes in. These guys will. And our goal for you guys is to show you how simple it is to stake from home. And obviously then you can access all the benefits of being a solo staker with V three. So without further ado, let's crack into what Dapnode offers.
00:03:28.370 - 00:04:01.254, Speaker C: All right? Yes. Our purpose is to help you run your infrastructure with the minimum amount of hassle possible. Right. The goal is that no matter how technical you are, you can be absolutely zero technical, and you will be able to run a validator, or you will be able to run a node, or you will be able to run anything that is infrastructure. And when I say anything, I mean anything. Because we are absolutely open source. Free and open source.
00:04:01.254 - 00:04:28.100, Speaker C: And we have an SDK. And if you have your. Sorry, what's your name? RJ. So if you have RJ chain and you have your node, you can use our SDK to put an RJ node onto the Dapnode store. A dapnode dap store. And this is completely get. When we say we want to help people run any infrastructure without any technical knowledge, we mean it.
00:04:28.100 - 00:05:03.814, Speaker C: Now, there's two ways of doing that. We're doing this. We're doing this with, as I said, free open source software that you can install in your machine. But what we found out is that there's people who want to run validators and they've never installed Linux in their lives, and they might not even want to do that. So we also offer a plug and play solution. This piece of hardware right here, which literally arrives to your home. You plug it into your router via an Ethernet cable, you turn it on, follow the instructions, and you have everything on a beautiful UI from your own laptop.
00:05:03.814 - 00:05:41.558, Speaker C: You don't even need to connect a screen or have a keyboard for this. It generates a hotspot to wifi. And you connect to this, and then you can start configuring everything from your own laptop or even a mobile phone. Right? The main use case for DAP node right now is to run validators, to run solo validators mostly. And we can see, I just checked these numbers this morning. We have 3582 validators on main net, Ethereum, and eleven k in gnosis chain. That's a lot of validators.
00:05:41.558 - 00:06:19.346, Speaker C: And I have to say that this is self reported validators. And when I say we have, I don't mean we. Dapnode doesn't even know where those validators are. This is people running their own infrastructure, their own hardware at home that are using DAP nodes and they have self reported that they are running DAP nodes to run these validators by putting it in the graffiti. As you can see, this is the graffiti cloud and we can see here. And why do I say self reported? Because we actually have no idea how many DAP nodes are out there. We collect no telemetry, we have no metrics, which is a conversation killer for all the vcs.
00:06:19.346 - 00:06:57.450, Speaker C: But actually our allegiance is not to vcs, it's to the users. And we consider self sovereignty extremely important for the users. So self reported 3003.5k validators on Ethereum, but a lot more because for example, I myself have changed the graffiti and I have another graffiti that is not the default one. So we imagine that we will have a lot more validators. Same in gnosis chain. And we're going to see later during the demo what Dapnode is exactly and how it works.
00:06:57.450 - 00:07:46.206, Speaker C: But the idea is that, I don't know if you can see here, it's a little bit small, but the idea is that you can configure everything with a couple of clicks. Right? What do you need to run a validator? Anybody? What do you need to run a validator? Hans hands. You need hardware, you need an Internet connection. Fantastic. What software do you need to run in this hardware? Hands over there. Wait a second, is it an execution client and a consensus client? That's right, you need an execution client, a consensus client, and you'll need also a validator client. And then if you want, you can have add ons like MeV Boost.
00:07:46.238 - 00:07:46.820, Speaker B: Right?
00:07:47.750 - 00:08:20.826, Speaker C: If you want to delegate the block construction to Mev to MeV searchers, you can also plug in MeV Boost. So that's exactly what Dapno does. It gives you this beautiful UI. You choose your execution client. Okay girly, sorry, guess. Aragon. You want the consensus client, you want lodestar, you want Nimbus, you want Teku, you want prism? Then we use a web three signer from the Teku team and you can choose optionally to use mev boost or not.
00:08:20.826 - 00:08:42.926, Speaker C: And that's the configuration that you need to do. You click click here. You'll be asked to put the recipient address for your validators. And easy. We're going to see how this works later during the demo part. But our goal is to make it stupid simple, like 5 minutes, you got everything configured. But as I said, it's not only for validators.
00:08:42.926 - 00:09:13.630, Speaker C: We have like a DAP store with a bunch of different options that you can install. We could have RJ chain node in this DAP store right here. We have bitcoin, Monero, Ethereum, classic, zcash, own cloud, which is not even a blockchain application. But since you have your own hardware, your own server, you can use it for that. We have Rodkey, we have other chains like avalanche. Well, you name it, you can put anything you want over there with our SDK. And I think that makes it for the Daphne introduction.
00:09:17.410 - 00:09:36.760, Speaker A: Thank you, sir. All right, so let's take a look at the stakewise side. First question, who is very comfortable with the term liquid staking? Who knows exactly what we mean when we say liquid staking? Explain liquid staking. Your mic.
00:09:38.730 - 00:09:42.966, Speaker C: Well, liquid staking allows you to have your capital staked, but also use a.
00:09:42.988 - 00:09:49.206, Speaker A: Representation of it which still has accurate rewards and exposure to the risk of.
00:09:49.228 - 00:09:51.510, Speaker B: The underlying Eth that's staked.
00:09:51.670 - 00:10:35.154, Speaker A: Got it for sure. And so I think we can agree here that the two main benefits of liquid staking is one, the ability to unstake instantly. There's native withdrawal times on networks, so being able to sell a liquid staking token on the markets instantly allows you to unstake on demand. But as mentioned, the ability to use your state capital across DFI and essentially do whatever you want with it is a really powerful tool. So Stakewise has been offering liquid staking now for the best part of two years. We launched back in March 2021. Dimitri, as mentioned, was the founder, built stakewise because he wanted to become a validator on Ethereum, but didn't have enough ether to stake.
00:10:35.154 - 00:11:13.266, Speaker A: At that point, it was way more than 32 ether required. And so the only way that Dimitri was ever going to be able to stake would be to pool capital with his friends. Next thing you know, stakewise is being born. And over the past couple of years, we've been heavily developing the protocol, and we are soon to be launching our next version called Stakewise V three. Now, the way I like to view this stakewise V three protocol, and the way I like to picture it in my mind, is essentially the baseline foundational staking infrastructure on Ethereum. Ethereum doesn't have a native staking infrastructure like cosmos, et cetera. And so we're essentially building it.
00:11:13.266 - 00:11:42.574, Speaker A: And this protocol has two layers. We have the first layer, which we are calling vaults. These is essentially the heart of V three. And this is where the Ethereum is staked. Ether is staked and also it'll be on gnosis chain as well. And then we have a second layer which sits on top which is the liquid staking token layer which takes that staked Ethereum and turns it into liquid staking. And we're just going to dive into both of these layers quickly now.
00:11:42.574 - 00:12:08.270, Speaker A: So the first layer is vaults. Vaults are isolated staking pools. You can see on the image here. This is our current stakewise staking pool, the only pool that exists on stakewise. Currently. When we launch V three, we're going to allow hundreds, thousands of different staking pools, all to run in parallel. Each of these pools are fully permissionless.
00:12:08.270 - 00:12:34.682, Speaker A: They can be created by any node operator or group of node operators. And as I mentioned, they're fully isolated. They're their own unique staking pools. So we've got some examples here. So like maybe you've got a group of solo stakers who want to run their preferred DVT solution like Obel or SSV. We could have a commercial node operator like block demon who wants to spin up a vault for their institutional capital. Each of these vaults are noncustodial.
00:12:34.682 - 00:13:08.790, Speaker A: This whole platform is noncustodial. When you deposit ether into each of these vaults you get a unique ERC 20 token to represent the vault that you've deposited in. And this vault layer is essentially fully automated. As a node operator, setting up a vault takes a couple of minutes. And once you've done that, it handles everything for you. It can accept ETH delegations of any size. It bundles those eth delegations into 32 ethers, automatically submits it to the beacon chain.
00:13:08.790 - 00:13:36.446, Speaker A: These vaults can also collect your fees as a node operator for you. They basically just handle everything for you. All you need to focus on is just running your node. And the last thing to mention here is that they're highly customizable. So the first thing to mention here, you can have public or private vaults. So public vaults will allow delegations from anybody. Maybe you're a solo staker and you want to attract delegations from the public.
00:13:36.446 - 00:14:09.670, Speaker A: You can do that or you can make them private. If you're a solo staker and maybe you just want to stake your own capital, that's absolutely fine. You can create a vault and just make it private, whitelist your own address to stake into it. And then yeah, you're simply staking your own capital. So this layer is essentially, as I said, kind of the beating heart of V three and it creates essentially an open marketplace for anybody to run their own staking solution. The next layer, which sits on top of vaults, is OS eth. This is the liquid staking token layer.
00:14:09.670 - 00:15:13.930, Speaker A: And as you can see, it essentially creates a single layer of fungibility across the entire vault ecosystem. This is where you can mint OS EtH and get access to DFi. This is the key to the success of liquid staking, and anybody who deposits into a specific vault within the v three ecosystem will be able to access and mint os eth to turn their stake liquid. The one thing to flag here is I mentioned each of these vaults are isolated. And so in order to ensure that the risks of, say, an operator getting slashed in one vault does not impact operators in another vault, we need to make sure the OS eth token is over collateralized. This ensures that if somebody's minted os eTh against vault one and, say, vault four, but if vault four gets slashed without any over collateralization, that slashing event will actually bleed through into the rest of the ecosystem. And so in order to stop this, we only allow OS EtH minting at a set LTV.
00:15:13.930 - 00:15:58.894, Speaker A: It's probably going to be around 90%. And that LTV is based on the true slashing risk in the network. We're going to be monitoring the network, and we can calculate or estimate, have a strong estimate what the risk is and how much a validator would lose if it got slashed at this point in time. And we'll automatically be updating the LTV of OS ETH to account for those losses. For you guys and the audience as solo stakers, V three will allow you to create a vault. Stake into that vault, and you'll be able to mint OS ETH against your own node. And as also mentioned, if you want to make the vault public, you can try and attract delegations, you can do this however you want.
00:15:58.894 - 00:16:38.234, Speaker A: There's actually no collateral requirements on v three. We're letting the marketplace decide, how much collateral do stakers need to see from solo stakers in order to be happy to stake with them? Maybe it's one eth, maybe it's ten eth. We'll let the marketplace decide, and you can essentially, there's various ways that you can attract capital as a solo staker into your vaults. So as I mentioned, collateral is the obvious one. We're also working with various insurance providers for node operators to take out insurance on their vaults. And we're also planning to do a native insurance policy using the statewise Dow token called swise. Lots of fun ways.
00:16:38.234 - 00:17:04.482, Speaker A: And also, obviously you can advertise. This is the cool thing. You can actually just create your own business and sell it and market it however you desire. So that is the quick run through of stakewise v three, and obviously dapnode previously. It might be a good time just to pause if there's any questions, but if not, then we can quickly crack on to actually seeing v three in action. Got it, sorry.
00:17:04.536 - 00:17:05.140, Speaker C: Yeah.
00:17:06.470 - 00:17:16.386, Speaker B: Okay, so I'll be the designated noob, right? So I do run a lightning node. Don't hold it against me. I'm looking at the Ethereum, doing an ethereum node.
00:17:16.418 - 00:17:17.606, Speaker C: And one of the noob questions you.
00:17:17.628 - 00:17:25.958, Speaker B: Have is the slashing thing, right? So noob question, can I just set up my node and say, okay, just make the right decision, you stupid nodes.
00:17:25.974 - 00:17:27.382, Speaker C: So I don't get slashed?
00:17:27.526 - 00:17:34.702, Speaker B: And I think you kind of addressed that question, but if you could restate it in noob terms, that'd be great.
00:17:34.756 - 00:17:36.190, Speaker A: Sure thing. Thank you, Paul.
00:17:39.250 - 00:18:14.118, Speaker C: Hey, perfect. Yeah, that's an excellent question, and actually I'm glad you asked it because a lot of people have this misconception about slashing and inactivity penalties. So as a solo staker, there's two things that can happen. Or as any staker, there's two things that can happen. The number one is the scary one. You do something against the network, you double sign, you try to forge the results, you put signatures that are not valid, you do weird shit that the network doesn't like. Something against Ethereum, you get slashed.
00:18:14.118 - 00:18:52.120, Speaker C: If you double sign, you do something weird, you get slashed. Big penalty, forced exit from the validator set, you will lose a big chunk of your eth and you will not be able to validate anymore. You will be forced to exit the validator set. Now this is not what happens when you're offline. When you're offline for a few days, you actually don't lose that much. And what that is called, that's called inactivity penalties or inactivity leak, because your balance kind of leaks a little bit, but it doesn't go down in a dramatic way. And this is actually by design.
00:18:52.120 - 00:20:24.126, Speaker C: The design of Ethereum took into account the fact that we want a lot of people running nodes, a lot of people running nodes in situations that might not be professional settings. Therefore, when they were designing the penalties, they were like, okay, what's the amount of time that you can be? So basically, if you are two thirds of the time, two thirds of the time online, and this is fairly easy to do, over the period, over a long period of time, two thirds of the time is a pretty reasonable thing to do. You're already making money with staking. So the inactivity leaks are very forgiving. Now, there's another type of penalty that people do not know, and it's the correlation penalty. And the correlation penalty is another type of penalty, which is in the consensus protocol, which will check like, okay, if you're offline, we said that you have this inactivity leak, right? But if you're offline at the same time as a lot more validators, you get a multiplier on the penalty that you get. And you'd say, like, wait, what? And this is actually in order to force or to incentivize decentralization, because if you have a big data center and all of your validators are in this big data center and this big data center goes down, you're kind of fucked.
00:20:24.126 - 00:21:31.050, Speaker C: Because then is when correlation penalty kicks in and your inactivity will be multiplied by the correlation penalty multiplier. Okay, so it's actually a lot safer to stake, as a solo staker than to have in a professional setting. Well, this is kind of like a controversial statement. What is safer? You can lose your keys. But, yeah, in terms of penalties, if something happens, it is more likely that you'll get a bigger penalty if you are staking in a data center, if the data center goes down, than if you are a solo staker and you just have one validator or two in your hardware, and this hardware goes down. Hello. So you mentioned every vault has its own ERC 20 token.
00:21:31.050 - 00:21:43.198, Speaker C: And on top of that, is that os e, how do they interplay? Or, like, how is it working in the first place with the ERC 20 token? And how can I translate that to os e?
00:21:43.284 - 00:22:10.514, Speaker A: Got it. Yeah. So for those who might not have heard, the question was, how are. I'm back. What's the connection between the ERC 20 tokens of each of the individual vaults and Os Eth? And how does it work in practice? So, as I mentioned, each vault has its own ERC 20 token. These tokens are effectively repricing. They could be their own liquid staking token if they really desire.
00:22:10.514 - 00:23:07.682, Speaker A: What we cannot do, though, as stakewise, is provide liquidity for thousands of these different, unique vault tokens. And so what we're doing is we're focusing our efforts on OS ETH and allowing ultimately anybody to mint that single token. Os eth will also be a repricing token. And the way to think about Os Eth is it will accrue the yield, the average yield, from all the different vault tokens that have gone to mint it. So if you're like a one click staker, for example, and wanted to buy OS Eth off the secondary markets, you're actually getting a yield from a super highly diversified set of node operators. There are mechanisms which we have, or we're building out to ensure that OS ETH maintains a quality yield. And one question we often get is, what if I stake into a vault which is heavily underperforming, and then mint Os eth against it? My poor vault performance is going to be impacting OS ETH.
00:23:07.682 - 00:23:44.020, Speaker A: And that's true, it would be. But what we'll end up doing for you or the person who mints Os ETh against underperforming vaults, there'll be extra charges to essentially compensate the reduction in yield that you've caused to OS ETH. So essentially, OS Eth is going to be taking the yield from a highly diversified set. It's effectively the average yield across the statewide v three ecosystem. But we have mechanisms in place to make sure that OS EtH itself remains a quality lsd and the yield itself remains quality. Hopefully that helps answer your question.
00:23:44.630 - 00:23:45.620, Speaker B: Follow up.
00:23:49.530 - 00:24:03.466, Speaker C: Hello. So does that mean, like the friends, I guess, who stake on me, do they get os e or do I get ERc 20 from me? And my ERc 20 is like, os e is the security for that?
00:24:03.648 - 00:24:06.570, Speaker A: Sorry, the question was, so what does.
00:24:06.720 - 00:24:11.286, Speaker C: My friends, what are they actually getting? Are they getting the OS eth or the ERC 20 token?
00:24:11.318 - 00:24:45.826, Speaker A: Got it. Yeah, good question. So it depends ultimately how you stake in stakewise, but let's say you've created a vault and you want your friends to stake with you. When they deposit their ether into your specific pool, they are getting your unique ERC 20 token that then can be used, essentially locked as collateral to mint os eth against it. Right? So having this open marketplace allows stakers, and gives stakers the freedom to choose exactly who they want to stake with. They can specify their node operators. There is another type of staker, though, and that is one that doesn't want to choose their node operators.
00:24:45.826 - 00:24:52.090, Speaker A: They just want to buy a liquid staking token. And absolutely, they can do that. They can also just buy OS eth. Great questions.
00:24:52.160 - 00:24:52.940, Speaker B: Thank you.
00:24:55.310 - 00:26:02.990, Speaker A: Okay, this will be the last one because I'm conscious of time, but yeah, thanks. Tying back to what you were saying about adjusting for the different rewards in different vaults that you would somehow, I'm not sure if you reward the better vaults or you just punish the bad ones. What are the mechanisms in case of some slashing events in some of the vaults? How do you handle that? Got it. So, first of all, this is not yet finalized, and we're going to be launching a working group to finalize these details. The plan so far is not to penalize people who are in overperforming vaults, people who stake with really high quality vaults and mince OS eth against it. They actually end up in a position where their collateral, their unique ERC 20 tokens representing their specific vaults, actually accrue in price faster than OS EtH. So if you think about it, in that sense, they're a very safe borrower of Os ETH, and their LTV will slowly decrease over time because their vaults are performing better than Os ETH.
00:26:02.990 - 00:26:54.710, Speaker A: The mechanism on the slashing side, if a vault gets slashed and you've missed the buffer, the capital buffer that's in place because of the LTV mechanism on OS ETH, will mean that even if, let's say, vault one gets slashed here and all the OS ETH minted against that vault will still have. It'll still be over collateralized. So let's say we have a 10% capital buffer on OS ETH. The slashing penalty will probably be 5% of that. We then have to have extra capital buffers in place to reward people for liquidating bad or unhealthy OS ETH positions. So essentially, the LTV on OS ETh accounts for multiple things. One, slashing losses, but also two, liquidating or rewarding liquidators within this whole protocol.
00:26:54.710 - 00:27:19.014, Speaker A: That liquidation mechanism is just very similar to what you see across DFI today. And there's also going to be a small. Like an extra small buffer just for security. Yeah, hopefully that's all good. All righty, dima, you're up. Let's have a look at v three in action. Dimitri is going to set up a vault on the v three testnet.
00:27:19.014 - 00:27:32.062, Speaker A: As mentioned, there is a website that if you guys want to play around with this yourselves, you can do. It's on docs, stakewise, IO workshop. But other than that. Take it away, sir.
00:27:32.196 - 00:28:15.138, Speaker B: Thank you. Let me put it here. Want to break? All right. Hi, everyone. I'm going to show you how v three looks in the current hour stage. Namely, I will focus on the first layer of what Jordan has presented, and that's basically creating and staking into the vault. The OsiF part is still.
00:28:15.138 - 00:28:57.346, Speaker B: We are still developing it, and it will be ready in around like a month. Or so. So let's go to the demo stakewise IO and those who wants to follow the demo and also stake into the vaults, they can just go to that page as well. There are only two requirements you need to have right now. First is you need to have a wallet. And the second one is that you also need to have some girly ether on that wallet available. So if you don't have one, you can always go to dogs stakewise IO workshop.
00:28:57.346 - 00:29:27.970, Speaker B: And here you can find faucets for getting some girly e. There is a couple of them, right? So getting back to the vaults page. So this is something what you're going to see when you land on the stakewise we free. And here you have two options. Like first one, you can scroll and see through different vaults. So those vaults, as already mentioned, they are created like permissionless in a permissionless manner. You can think of it as creating a liquidity pool on uniswap.
00:29:27.970 - 00:30:26.214, Speaker B: So basically if you have less than 32 e, you can select one of those vaults to stake there. And also you can see here you can search for a specific one, you can filter based on score APR or TVL. And score is basically like we are currently still working on it and it will show how well that specific vault is performing. So you can see based on its performance, how many attestations blocks it's missing. What's the MEP strategy they have? Like whether the owner of the vault has provided some, has staked something into its own vault. And if that's the case, then there is some additional insurance in that case. So let's go ahead and connect the wallet, I'm going to use metamask here.
00:30:26.214 - 00:31:33.494, Speaker B: So once I'm connected, as you can see also here there are some private vaults. So private vaults are the ones that are created by someone and that person wants to actually control who can stake into their vault. For example, if you have friends and you want only your friends to stake there, you can easily do that. Or if you want like offer staking as a business, let's say, and you would like anyone to stake there, you can make it public. So if we open this vault, for example, I can see that I cannot stake here as that's the private vault. But if we go to another vault, which is like space eth here, I can see the graph of TVL and APR over the time, what's the current locked eth, what's the APR and the score, see the description, different actions of this vault. I can also see what are the validators that are generating rewards for that vault.
00:31:33.494 - 00:32:17.770, Speaker B: And there is a link to, let's say Guerley Beacon chain where I can see more performance and how well that vault is working. Also there are some additional details that we can see. The vault is public, it has its own like ERC 20 token, which is called space eth. Every vault is a contract. It's fully noncustodial. And you can check that contract on ether scan as well. Yeah, and let's assume I'm happy with this vault and I can stake here some amount.
00:32:17.770 - 00:32:42.000, Speaker B: So if I'll stake one ether, I will need to confirm it here and the transaction is on its way. While it's confirming, I can just describe the vault is basically a ERC 20 contract which has like rebalancing tokens. So over the time.
00:32:45.990 - 00:32:46.594, Speaker A: I will have.
00:32:46.632 - 00:33:48.674, Speaker B: The same amount of tokens, but the amount of ether that I exchange those tokens for will be increasing. And later on, let's say here, I can, for example, now I can add that token to my wallet and that will be in my metamask here. Right? So that's the rebalancing token that I'm going to get. So what exactly I could do from here, for example, later on I can lock that vault token in the controller and mint OSF on top of it. And let's say then I can go to any project that supports OSF that has integration with OSF and do something with it. For example, it could be borrowing stables on top of it, or it could be doing a call strategies and et cetera, et cetera. Or I can, let's say do more of a leveraged staking.
00:33:48.674 - 00:34:36.638, Speaker B: I can exchange that, let's say to ether and stake more and do other things. But let's assume now that I have 32 ether, or let's say I have myself and my friends, we have together 32 ether that we would like to stake and we want to do that just specifically for us. Run the nodes, then we can create a vault. So here we have two options, whether we go public or we go private. So public again is for those who want to have more of like open gate for anyone to stake there, or private is the one where you control who can stake into that vault. So let's choose private here. And here we are presented with different setups, how I can run the validators.
00:34:36.638 - 00:35:26.542, Speaker B: So currently we have like two available kubernetes. That's the one that we've been running on v two for two years. And it's large scale setup where you can run many validators if you want to do staking as a business then that could be interesting for you to check. But also we're having integrations with Dapnode and there are other integrations that are coming later. And we want to simplify the staking and make it easy for you not to only kind of create vault, but also through the different means run the validator on different infrastructure. So here I'm going to select custom. And here basically we have two addresses.
00:35:26.542 - 00:36:07.378, Speaker B: So for those of you who know, like when you create a validator, you need to specify the withdrawal address where ether going to land. After that validator going to exit from staking. The withdrawal address here actually will be the vault that will be created. We can pre compute that in advance and show it here. So you can generate the deposit data. The deposit data is used to register validators and there is a fee recipient. So fee recipient is an additional contract that you must specify for your validator client to where the priority fees and map rewards going to land.
00:36:07.378 - 00:36:48.880, Speaker B: So those two addresses are available right here in front before you even create a vault. So what I'm gonna do now is that I have downloaded the value key again. That's like the tool for generating validator keys. I'm just going to open it here and you can also install it. So there is a link in the workshop. Where is that? So it's here. If you click on it, it will take you to the GitHub page where you can download the key generator from here for your specific platform and open it.
00:36:48.880 - 00:37:29.670, Speaker B: Let me open that application. So first thing here is that you need to do that through the control because it's not verified. Producer Mac is a bit complaining here, but. Right, so we have that. So basically when you generate validator keys, now what we are doing, we need to generate some validator keys where we going to stake our ether. So we're going to use that tool here. And usually you generate a seed phrase.
00:37:29.670 - 00:38:15.370, Speaker B: I'm going to choose girly network here because it's like yeah, the testnet is running on girly and I'm going to generate the mnemonic here. The mnemonic is the one that you always keep in private. It's the way that you can backup or recover your validator keys in case you're going to lose them. So make sure if you generate that for the production environment that you do that on the air gapped machine and it's fully secure. But just for the example here, I will not even save that, but use that for generating the validatory keys. So I'm going to generate one key and I need to provide some password here. I'm not going to do very secure here password.
00:38:15.370 - 00:38:50.886, Speaker B: So here, basically when it asks for Ethereum withdrawal address we're going to provide the address that our vault has pre generated here. So we're going to copy it and paste it here. That's the vault address that we're going to end up with later. And I'm going to choose where to save the validator keys. And. Okay, now it's generating the validator keys and one validator key here in that example and the deposit data file. So let's assume we're good here.
00:38:50.886 - 00:39:33.294, Speaker B: Let's continue. And now we are asked to upload the deposit data. So if you ever created a validator through the launchpad you probably know that you have to upload the deposit data that actually specifies to what validator you want to assign your 32 ether. What's the public key of that validator. So now we can see it's generated. It has generated the key store the deposit data file and there is the recovery phrase that I've just generated. So let's go to the folder where I have the validator keys and here is the deposit data file.
00:39:33.294 - 00:40:22.082, Speaker B: Just from here I will rename it to the deposit data JSon. And let's upload this file here. All right, so basically the UI will check that the deposit data file is generated with correct withdrawal credentials. The withdrawal address that was shown before, it will check that the validators in that deposit data file are not registered in beacon chain so far and in general that the signatures, the network and other things are correct. So that's for the safety of the vault creator. So here is the next step. We can provide the name for our token so as we can run our own, let's say liquid staking business here.
00:40:22.082 - 00:40:56.298, Speaker B: Or we can just come up with an interesting name for our token. Let's call it Denver staked eth. And the token symbol will be then eth. So yeah, there is a capacity. The capacity is basically you can limit how much ether you want to get into your validator. We're going to keep it unlimited. And also you specify as an operator the fee percent that you want to have, what you want to charge those who are going to stake into your vault.
00:40:56.298 - 00:41:47.662, Speaker B: I'm going to keep it 10% here. Let's continue. And here I can provide some additional branding. That's for the list of all the vaults I'm going to call my vault Denver east vault. And just add here a logo from here so it will add a bit additional branding to this vault. All right, here we have a summary and we are good with everything we see here and we deploy the vault. So yeah, it's going to deploy the contract for the vault through the factory and it's going to specify the parameters that we have provided here.
00:41:47.662 - 00:42:27.210, Speaker B: So just to add here, the one who creates the vault becomes an admin of this vault. Which means that there are several things I can change. I can update the deposit data file if I want to generate more validators, if I want to add more validators to my vault. Or I can for example change the fee recipient address. By default it's myself. So the fee recipient address is the one who gets the 10% cut from the rewards that user is going to receive here. And there are some additional settings that me as an owner of the vault can perform.
00:42:27.210 - 00:43:29.390, Speaker B: So here we can see our vault is successfully created. There is a very small deposit, that's a security deposit for vault inflation attacks to prevent them. And here we have different settings that we can do like change the branding, upload the deposit data file, change the fee recipient. And as it's the private vault I can also, let's say if I don't want to manage the list, the whitelist of the users that can stake here I can change the access manager. So the address that is here will be able to whitelist addresses that can stake or the keys manager is the one who can upload the deposit data file, the new deposit data file in case let's say I run out of the validators, I can always add more by the same way we just did through them mnemonic, I can allocate more validator keys and also there is a vault access. So this is like as again this is the private vault. Here are the addresses that I can manage like that I can whitelist, we can stake into that vault.
00:43:29.390 - 00:44:08.170, Speaker B: All right, so I think here we can do that. An example of, let's say I'll take another account, copy it here we can see that I don't like as an account here. I'll go back. Yeah, our vault actually has been created here. Where is that? We have this one, the Denver Eve vault. We have it here and as I changed the count I cannot do any modifications. And of course that's everything through the smart contracts and that's controlled fully by the vault contract that we've deployed.
00:44:08.170 - 00:45:06.400, Speaker B: So let's go back to the admin here and add another address that can stake. All right, so we will add it to the whitelist of our vault and the transaction will be confirming here for some time. And basically once the address has been confirmed, the transaction has been confirmed, that user will be able to stake into that vault. Right. So what would be the next steps? For example, once someone stakes into that vault, be it a private vault or a public vault, next step could be for me to Mint Osif. If, let's say if that vault wants to manage their own liquidity, that's fine. You can do a pair with ether on uniswap or curve or balancer and you can manage your own liquidity, but that's quite difficult thing to do.
00:45:06.400 - 00:45:55.498, Speaker B: So in case you don't want to do that, you can mint Osif and you can benefit from all the liquid staking that is available while running your own node, while being fully controlled over your stake and not delegating that to any operator. All right, so we added that address. Let's change the account and see whether we can stake from it. Yes, we can now stake. I can stake like 32 ether here to run a validator. Yeah, I can also take you through the process of, let's say there is an additional service. As a node operator, you need to run, this is called stakewise with free operator.
00:45:55.498 - 00:46:49.588, Speaker B: And basically there is a need for those who. So the main responsibility of that service is that you need to run it close to that, you need to run it to register the validators for your vault. So basically once it monitors, when the vault has 32 ether, it takes the next validator key from the deposit data and moves ether from that vault to the Ethereum staking contract. All right, so do we have time for. Should I. Okay, right. So we have some more time here and I will show you how that operator service runs.
00:46:49.588 - 00:47:21.648, Speaker B: So basically it needs to have execution node, it needs to have consensus node. There is multiple clients provided on Ethereum, Bessu, Aragon and gas. And by the way, yeah, we're going to be supporting gnosis as well. And you can run validators on gnosis or Ethereum based on where you want to stake. So there is also you have to generate key stores and deposit data file. That's something we already did with value key generator. And the next thing is to generate a hot wallet.
00:47:21.648 - 00:47:59.580, Speaker B: So hot wallet is basically used by the operator service to register the validator. So that could be any Ethereum wallet, private key with some ether for gas in it. So here I'm going to use vanity eth. I'm just going to generate random wallet here. Here is their address. I'm going to send some girly ether to that address for the gas. Let's add like zero one and confirm.
00:47:59.580 - 00:48:55.640, Speaker B: So while it's confirming I will save the private key to somewhere where I connect later it to the operator service. So here is the file. I'll move it to. Just move it to. All right we have here to the demo folder love. All right let's call it if Hotwallet and move it to demo. Yeah.
00:48:55.640 - 00:49:39.376, Speaker B: So we are good. We have a hot wallet now here generated and the next step would be to change a bit the environment file here and start the operator service. So I'm going to just adjust this is the environment file and you have to specify the network we use. Gurley here, the vault contract address. That's the one I'm going to copy from here. Paste it here. There is some directories, the nodes, the execution and endpoints for the consensus execution nodes and path to the key stores.
00:49:39.376 - 00:50:11.756, Speaker B: The key stores are used here to generate the exit signatures and spread those exit signatures across oracle so that in case validator wants to exit oracles can do that process for the vault itself. Right. So we're going to save it and run here our operator service. Let's see. It's going to start. It's very still experimental. We are just launching our testnet.
00:50:11.756 - 00:50:46.268, Speaker B: So there could be some demo effect here. So we can see that it has connected to the operator account. It can connect to the lighthouse and geth and connect it to the oracles. Now we load the key stores and it will notice that the vault has 32 ether. Take the next validator key from the vault contract and register it. So while that's happening we can spin up our lighthouse validator. First thing is to import the validator key.
00:50:46.268 - 00:51:22.344, Speaker B: So for that we use, we use that command. Where is that command here. So you can see that also from the documentation page of the lighthouse. You can run it through the docker or for other way, any other way. I'm going to use the Docker command here so it provides the password. And now we imported the key so the next command would be to start our validator. So we're going to use Docker command here.
00:51:22.344 - 00:52:17.336, Speaker B: Again, Docker run here is an important part. So as the few recipient where the map and priority fees going to go, we're going to specify the address that we have like Mav recipient here. So we're going to copy it and paste it for the suggested fee recipient of the validator client. All right. So it managed to get the public key. And at the same time, our operator client has registered the validator. So if we're going to take this one and go to the girly beacon chain and paste that public key here, let's see.
00:52:17.336 - 00:52:40.850, Speaker B: It's going to find it. Yes. So we can see that our validator was deposited. The withdrawal credentials are the same as the vault address. I'm not sure if you can see it here, but maybe if we paste it in the URL. Okay. It's a bit formatted differently, but that's the vault address here.
00:52:40.850 - 00:52:53.670, Speaker B: That's it for the demo. Hope you enjoyed it. And if you have any questions, feel free to ask them. Thank you. Thank you.
00:53:00.900 - 00:53:14.916, Speaker A: Hello. Awesome. So, thanks, Dima. So I guess just a quick recap. So dima there spoke through creating a vault on the stakewise Ui. Hopefully you saw that's very simple. And there's a lot of customization that you can do to create that vault itself.
00:53:14.916 - 00:53:51.170, Speaker A: The step he was just talking through there is running. The only specific software we require node operators to run is the stakewise operator software. Dima showed how to set it up using CLI and running through the docs. We are building our own operator software at stakewise to make that even simpler. But this is also where companies like Dapnode come in. And Paul is about to show you how to do the same process, but doing it via the Dapnode software and show you essentially how easy it is.
00:53:52.180 - 00:53:52.544, Speaker B: Go.
00:53:52.582 - 00:53:53.664, Speaker A: Take it away, sir.
00:53:53.862 - 00:53:57.780, Speaker C: All righty. Let's do it. Yeah. I'm going to plug in with mine.
00:54:18.520 - 00:54:19.284, Speaker B: Two one, two.
00:54:19.322 - 00:54:34.010, Speaker C: Checking for signaling stuff on my side.
00:54:55.070 - 00:54:57.650, Speaker B: It different dongle.
00:55:06.610 - 00:55:27.560, Speaker C: All right, so basically what we saw right now is how to run the stakewise operator software, which you need because it automates all of the validator registration. And it's where you let the vault know that the validator is there and ready. Right?
00:55:32.490 - 00:55:33.240, Speaker B: Yeah.
00:55:39.680 - 00:56:16.300, Speaker C: Here we go. I'll be back. Yeah.
00:56:17.230 - 00:56:17.786, Speaker B: Okay.
00:56:17.888 - 00:58:07.680, Speaker C: We're having some technical trouble. It estimator it. Yeah. So what we're going to see when we reboot the system and finally see something on the screen is I'm going to show you how to run your execution client, your consensus client, the stakewise operator software. And then we're going to spin up a validator for one of the vaults that I have already created following exactly the same process as Dima has showed you how to do of the Mac as well. Okay, cool. Yeah, no problems.
00:58:10.850 - 00:58:12.270, Speaker B: Reopen windows.
00:58:19.050 - 01:01:02.154, Speaker C: Rebooting the Mac. So basically it's going to take not too much time, because as you have seen, that Dapnode has already a UI that allows you to install your execution client and your consensus client with a couple of clicks. So as soon as that is done, we just need to download a package, just like RJ could deploy the RJ nodes, then stakewise. We have deployed a package for the stakewise operator, and we're going to use that package, and it's going to have instructions that are going to guide us how to do all of this without having to use the command line at any point. Yeah, more stuff. Do you have wireguard on your Mac, far away from here, but you cannot.
01:01:02.202 - 01:01:03.310, Speaker A: Connect to the present?
01:01:03.460 - 01:01:10.000, Speaker C: Yeah, exactly. Come on, come on, come on.
01:01:17.270 - 01:01:18.420, Speaker A: Good luck, people.
01:01:18.910 - 01:05:32.060, Speaker C: Yeah, sam. Good. We got it, I think.
01:05:35.070 - 01:05:36.822, Speaker B: Yes, perfecto.
01:05:36.966 - 01:06:41.486, Speaker C: Good. So, all right, thanks, Dima, for lending me your laptop for the demo. Let's try to connect to my dub nodes here. Right. So I'm connecting to my Dap node now through a VPN wireguard. So I'm connecting to a Dap node that's all the way over Europe to my dad's house, actually, and let's. Okay, excellent, good.
01:06:41.486 - 01:07:22.540, Speaker C: So here's my DaP node, right? And the first thing that we need to do is we need to install the execution client and the consensus client. Right? So I've already done this, so it will be synced before we start. But in Dapnote, the only thing that you need to do is you need to go to the staker section, and you need to select, for example, Gorli, Aragon, or Nethermind. And here you're going to use Teku, for example. You choose whatever you want. And then if you're going to use any mev, Mev boost, you just click it from here. At this moment, I'm just going to leave it as it was.
01:07:22.540 - 01:08:19.310, Speaker C: And then I would go here, and I would go like, apply changes. And what it would do right now is it's going to install it here in the packages. Okay, so now we have the first things that we need to have. When we want to run our own node, when we want to run a validator, we need these pieces, right? We need the consensus client, we need the execution clients, and we already have that. So now the next piece that we need to have is the stakewise operator, which I'm going to share the package. So we're going to install this package live. And Dima, can I send this through this URL on telegram.
01:08:26.150 - 01:08:27.540, Speaker B: If you look at.
01:08:31.830 - 01:08:55.340, Speaker C: Excellent. So now we have the package, as we said we could have like anybody's node right here. And we're going to install the stakewide operator software. And here we go. Like, hey, okay, you want to run a validator? Yeah. So you will need the vault contract address. And Dima has created a vault before.
01:08:55.340 - 01:09:39.754, Speaker C: And let's check if we can go here and try to find the vault that we have created. So one of the vaults that we have created is the dap node decentralization maximalist vault. Right. And we can go and take the contract address and bring it here and we just, hey, I want to become a node operator for this vault and I just put it here. Then as Dima mentioned, I need a hot wallet. I need a hot wallet that will be registering my validators. So we could create one through my ether wallet offline or my crypto desktop app, and you basically create a key.
01:09:39.792 - 01:09:40.380, Speaker A: Store.
01:09:42.110 - 01:10:12.226, Speaker C: And then you can start registering the validators. So maybe I'll just send my stuff over and I will share this via telegram protocol right here.
01:10:12.408 - 01:10:21.460, Speaker B: Cool. Here it is.
01:10:24.010 - 01:10:33.510, Speaker C: So we can put this now into the package. I can go here, choose file downloads. Was it downloads?
01:10:33.590 - 01:10:34.220, Speaker B: Yeah.
01:10:35.390 - 01:11:07.220, Speaker C: Can we organize by date? Added UTc here. Perfect. And we have created these, and now we need to put the password. That would be a lot more simple if I could just like copy and paste stuff, but. Sorry about this. Okay.
01:11:09.670 - 01:11:11.860, Speaker B: Defined object.
01:11:16.010 - 01:11:45.262, Speaker C: Now we have the passphrase. Perfect. Then we need the deposit data. And the deposit data we need to create the key stores and deposit data of the validator that we're going to be running. And this is going to be an empty validator. It's going to be a validator that we want the vault to fill in. Right? So what we're doing here is we're saying, hey, I'm running all the hardware, I'm running all the software, and here's my validator that I'm running in this machine.
01:11:45.262 - 01:12:37.618, Speaker C: Please put 32 Eth in it and start running and start validating. And I will start validating for you right here. So here we go. I'm going to do exactly that. Going to go back here, download deposit data, download the key store, and there we go. So Dima has already shown how to create the validator with the Wagyu keygen, and therefore I'm not going to show how this is done. But I've created this deposit data, making sure that the withdrawal address is the same of the vault that I want to be an operator for.
01:12:37.618 - 01:13:14.080, Speaker C: So this same one right here. Right. And then I need the keystore file, which I've already sent to me right here. Fantastic. And then the passphrase for the keystore. So now I'm going to submit all of the information I'm going to accept and now it's going to install and what Dima has done with the n, with the environment file, configuring everything, everything is managed in the background when you're using Dapnode. So basically the only steps that you need to do is you need to know which vault you want to be an operator for.
01:13:14.080 - 01:13:59.498, Speaker C: You need to create the deposit data and the key stores with a tool like Wagyu. And once you have done that, then you can basically use the Dapnode package and go through all the packages and then you're going to be a stakewise operator. And now basically you're running, you're running all the software and we can go here and see the logs of what's happening. It's going to do the same as we've saw on DMAs presentation. It's going to connect. And I've already done this, I did this yesterday. So basically what we can do is I did exactly the same process on Dapnode and I created a validator in the same way that we have done.
01:13:59.498 - 01:14:31.446, Speaker C: And right now there's not enough staked balance in here. So it's not going to put automatically the 32 ETH into this validator that we have created, but it's what it did. Yesterday when I created this, I deposited 32 ETH and boom. Yes, the vault automatically deposited 32 eth in the key store that I had registered right here. So we can check this and we can go here and see that it's spending. And the queue in Gurley right now is massive. It takes three days.
01:14:31.446 - 01:15:07.010, Speaker C: But in three days the vault dapnode decentralization maximalists will have one validator running and it will have two. Actually, if somebody wants to put 32 ETH more or 23 ETH more in the DAPno decentralization max, as we have already, as we have running this right here, it will basically be running, it will be ready and automatically it will deposit the 32 E into this validator that we're running. And that's how it's going to work and that's how you do it with DAP nodes.
01:15:11.510 - 01:15:12.018, Speaker B: Awesome.
01:15:12.104 - 01:15:26.742, Speaker A: Thanks, Paul. Obviously apologies for the technical details. These things happen. But hopefully you can see two things. One, how simple it is to create a vault on the UI. On the stakewise UI itself. The actual vault creation is super simple.
01:15:26.742 - 01:15:50.506, Speaker A: Dima showed you how to do it. Versus command line, that's a little bit more complicated. But using software like DAP node, there's no command lines. It's super simple. And the key thing to flag here is that if you're a node operator, you're done at this point, right. The vault is going to handle everything for you. It handles your fees, it handles the validator registration, it handles all the pooling of ETH.
01:15:50.506 - 01:16:16.982, Speaker A: There's essentially nothing for you to continue doing other than continue running your node. And this whole system is designed to be as seamless as possible and as automated as possible. I'm conscious of time. We've obviously overrun now. So I will not ask for questions on stage. We will stick around afterwards if anyone's got any questions. As I mentioned, the testnet for v three is going live this week.
01:16:16.982 - 01:16:31.820, Speaker A: It will be private to start with. As I mentioned, you guys got a bit of a sneak preview, but there will be a public testnet launching very, very soon and we'll be super excited to get you guys involved there. But yeah, I'm going to wrap it up and see you on the flip side.
01:16:46.840 - 01:17:14.510, Speaker B: Access. So this is like as again, this is the private vault. Here are the addresses that I can manage like that. I can whitelist, we can stake into that vault. All right, so I think here we can do an example of, let's say I'll take another account, copy it here. We can see that I don't like as an account here if I'll go back. Yeah, our vault actually has been created here.
01:17:14.510 - 01:18:01.740, Speaker B: Where is that? We have this one, the Denver evolved, we have it here. And as I'm not like, as I changed the count, I cannot do any modifications. And of course registered in beacon chain so far and in general that the signatures, the network and other things are correct. So that's for the safety of the vault creator. So here is the next step. We can provide the name for our token so we can run our own, let's say liquid staking business here, or we can just come up with an interesting name for our token. Let's call it Denver staked Eth.
01:18:01.740 - 01:18:30.884, Speaker B: And the token symbol will be then Eth. So yeah, there is a capacity. The capacity is basically you can limit how much ether you want to get into your validator. We're going to keep it unlimited. And also you specify as an operator the fee percent that you want to have, what you want to charge those who are going to stake into your vault, I'm going to keep it 10% here. Let's continue. And here I can provide some additional branding.
01:18:30.884 - 01:19:27.770, Speaker B: That's for the list of all the vaults. I'm going to call my vault Denver east vault and just add here a logo from here. So it will add a bit additional branding to this vault. All right, here we have a summary and we are good with everything we see here and we deploy the vault. So yeah, it's going to deploy the contract for the vault through the factory and it's going to specify the parameters that we have provided here. So just to add here, the one who creates the vault becomes an admin on this vault. Which means that there are several things I can change.
01:19:27.770 - 01:20:07.670, Speaker B: I can update the deposit data file if I want to generate more validators, if I want to add more validators to my vault. Or I can for example change the fee recipient address. By default it's myself. So the fee recipient address is the one who gets the 10% cut from the rewards that user is going to receive here. And there are some additional settings that me as an owner of the vault can perform. So here we can see our vault is successfully created. There is a very small deposit, that's a security deposit for vault inflation attacks to prevent them.
01:20:07.670 - 01:21:13.960, Speaker B: And here we have different settings that we can do like change the branding, upload the deposit data file, change the fee recipient. And as it's the private vault, I can also, let's say if I don't want to manage the list, the whitelist of the users that can stake here, I can change the access manager. So the address that is here will be able to whitelist addresses that can stake or the keys manager is the one who can upload the deposit data file, the admin here, and add another address that can stake. All right, so we will add it to the whitelist of our vault and the transaction will be confirming here for some time. And basically once the address has been confirmed, the transaction has been confirmed, that user will be able to stake into that vault. Right. So what would be the next steps? For example, once someone stakes into that vault, be it a private vault or a public vault, the next step could be for me to mint Osif.
01:21:13.960 - 01:21:25.980, Speaker B: If, let's say if that vault wants to manage their own liquidity, that's fine. You can do a pair with ether on uniswap or curve or balancer.
01:21:28.080 - 01:21:28.396, Speaker C: And.
01:21:28.418 - 01:22:09.100, Speaker B: You can manage your own liquidity, but that's quite difficult thing to do. So in case you don't want to do that, you can mint OsiF and you can benefit from all the liquid staking that is available while running your own node while being fully controlled over your stake and not delegating that to any operator. All right, so we added that address. Let's change the account and see whether we can stake from it. Yes, we can now stake. I can stake like 32 ether here to run a validator. Yeah.
01:22:09.100 - 01:22:41.456, Speaker B: I can also take you through the process of, let's say there is an additional service. As a node operator, you need to run. This is called stakewise with free operator. And basically there is a need for those who. So the main responsibility of that service is that you need to run it close to that. You need to run it to register the validators. I can always add more by the same way we just did through them mnemonic.
01:22:41.456 - 01:23:13.730, Speaker B: I can allocate more validator keys. And also there is a vault access. So this is like as again, this is the private vault. Here are the addresses that I can manage like that I can whitelist, we can stake into that vault. All right, so I think here we can do an example of, let's say I'll take another account, copy it here. We can see that I don't like as an account here if I'll go back. Yeah, our vault actually has been created here.
01:23:13.730 - 01:24:02.176, Speaker B: Where is that? We have this one, the Denver evolved, we have it here. And as I'm not like, as I changed the count, I cannot do any modifications. And of course that's everything through the smart contracts and that's controlled fully by the vault contract that we've deployed. So let's go back to the admin here and add another address that can stake. All right, so we will add it to the whitelist of our vault and the transaction will be confirming here for some time. And basically once the address has been confirmed, the transaction has been confirmed, that user will be able to stake into that vault. Right.
01:24:02.176 - 01:24:26.040, Speaker B: So what would be the next steps? For example, once someone stakes into that vault, be it a private vault or a public vault, the next step could be for me to mint Osif. If, let's say, if that vault wants to manage their own liquidity, that's fine. You can do a pair with ether on uniswap or curve or balancer.
01:24:28.060 - 01:24:28.376, Speaker C: And.
01:24:28.398 - 01:25:16.104, Speaker B: You can manage your own liquidity, but that's quite difficult thing to do. So in case you don't want to do that, you can mint Osif and you can benefit from all the liquid staking that is available while running your own node, while being fully controlled over your stake, and not delegating that to any operator. All right, so we added that address. Let's change the account and see whether we can stake from it. Yes, we can now stake. I can stake like 32 ether here to run a validator. Yeah, I can also take you through the process of, let's say there is an additional service.
01:25:16.104 - 01:25:59.590, Speaker B: As a node operator, you need to run. This is called stakewise with free operator. And basically there is a need for those who. So the main responsibility of that service is that you need to run it close to that. You need to run it to register the validators for your vault. So basically, once it monitors when the vault has 32 ether, it takes the next validator key from the deposit data and moves ether from that vault to the Ethereum staking contract. All right, so do we have time for.
01:25:59.590 - 01:26:28.522, Speaker B: Should I. Okay, right. So we have some more time here and I will show you how that operator service runs. So basically it needs to have execution node. It needs to have consensus node. There is multiple clients provided like on Ethereum, Bessu, Aragon and gas. And by the way, yeah, we're going to be supporting gnosis as well.
01:26:28.522 - 01:27:12.458, Speaker B: And you can run validators on gnosis or Ethereum based on where you want to stake. So there is also you have to generate key stores and deposit data, validator key from the deposit data and moves ether from that vault to the Ethereum staking contract. All right, so do we have time for. Should I. Okay, right. So we have some more time here and I will show you how that operator service runs. So basically it needs to have execution node.
01:27:12.458 - 01:27:42.386, Speaker B: It needs to have consensus node. There is multiple clients provided on Ethereum, Bessu, Aragon and gas. And by the way, yeah, we're going to be supporting gnosis as well. And you can run validators on gnosis or Ethereum based on where you want to stake. So there is also you have to generate key stores and deposit data file. That's something we already did with wagyu key generator. And the next thing is to generate a hot wallet.
01:27:42.386 - 01:28:20.282, Speaker B: So hot wallet is basically used by the operator service to register the validator. So that could be any ethereum wallet, private key with some ether for gas in it. So here, I'm going to use vanity e. I'm just going to generate random wallet here. Here is their address. I'm going to send some girly ether to that address for the gas. Let's add like zero, one and confirm.
01:28:20.282 - 01:29:29.380, Speaker B: So while it's confirming, I will save the private key to somewhere where I connect later it to the operator service. So here is the file. I'll move it to just move it to. All right, we have here to the demo folder. All right, let's call it if hotwallet and move it to demo. Yeah, so we are good. We have a hot wallet now here generated and the next step would be to change a bit the environment file here and start the operator service.
01:29:29.380 - 01:30:15.582, Speaker B: So I'm going to just adjust this is the environment file and you have to specify the network we use. Gurley here, the vault contract address. That's the one I'm going to copy from here. Right, paste it here. There is some directories, the nodes, the execution and endpoints for the consensus execution nodes and path to the key stores. The key stores are used here to generate the exit signatures and spread those exit signatures across oracle so that in case validator wants to exit oracles can do that process for the vault itself. Right.
01:30:15.582 - 01:30:47.770, Speaker B: So is to generate a hot wallet. So hot wallet is basically used by the operator service to register the validator. So that could be any ethereum wallet private key with some ether for gas in it. So here I'm going to use vanity e. I'm just going to generate a random wallet here. Here is their address. I'm going to send some girly ether to that address for the gas.
01:30:47.770 - 01:31:53.714, Speaker B: Let's add like zero, one and confirm. So while it's confirming I will save the private key to somewhere where I connect later it to the operator service. So here is the file. I'll move it to, just move it to. All right we have here to the demo folder. All right let's call it if Hotwallet and move it to demo. Yeah, so we are good.
01:31:53.714 - 01:32:49.320, Speaker B: We have a hot wallet now here generated and the next step would be to like change a bit the environment file here and start the operator service. So I'm going to just adjust this is the environment file and you have to specify the network we use. Gurley here, the vault contract address. That's the one I'm going to copy from here. Right, paste it here. There is some directories, the nodes, the execution and endpoints for the consensus execution nodes and path to the key stores. The key stores are used here to generate the exit signatures and spread those exit signatures across oracle so that in case validator wants to exit, Oracle can do that process for the vault itself.
01:32:49.320 - 01:33:10.720, Speaker B: Right. So we're going to save it and run here our operator service. Let's see. It's going to start. It's very still experimental. We are just launching our testnet. So there could be some demo effect here.
01:33:10.720 - 01:33:48.522, Speaker B: So we can see that it has connected to the operator account. It can connect to the lighthouse and geth and connected to the oracles. Now we load the key stores and it will notice that the vault has 32 ether. Take the next validator key from the vault contract and register it. So while that's happening we can spin up our lighthouse validator. First thing is to import the run here our operator service. Let's see, it's going to start.
01:33:48.522 - 01:34:22.950, Speaker B: It's very still experimental. We are just launching our testnet. So there could be some demo effect here. So we can see that it has connected to the operator account, it can connect to the lighthouse and geth and connect it to the oracles. Now we load the key stores and it will notice that the vault has 32 ether. Take the next validator key from the vault contract and register it. So while that's happening we can spin up our lighthouse validator.
01:34:22.950 - 01:34:55.326, Speaker B: First thing is to import the validator key. So for that we use, we use that command. Where is that command here. So you can see that also from the documentation page of the lighthouse. You can run it through the docker or for other way, any other way. I'm going to use the Docker command here. So it provides the password.
01:34:55.326 - 01:35:31.870, Speaker B: And now we imported the key. So the next command would be to start our validator. So we're going to use Docker command here. Again, Docker run here is an important part. So as the fee recipient where the map and priority fee is going to go, we're going to specify the address that we have like mavrecipient here. So we're going to copy it and paste it for the suggested few recipient of the validator client. All right.
01:35:31.870 - 01:36:15.286, Speaker B: So it managed to get the public key and at the same time our operator client has registered the validator. So if we're going to take this one and go to the girly beacon chain and paste that public key here, let's see. It's going to find it. Yes. So we can see that our validator was deposited. The withdrawal credentials are the same as the vault address. I'm not sure if you can see it here, but maybe if we paste it in the URL.
01:36:15.286 - 01:36:34.660, Speaker B: Okay. It's a bit formatted differently, but that's the vault address here. That's it for the demo. Hope you enjoyed it and if you have any questions, feel free to ask them. Thank you. Thank you.
01:36:41.840 - 01:36:55.936, Speaker A: Hello. Awesome. So thanks, Dima. So I guess just a quick recap. So Dima there spoke through creating a vault on the stakewise Ui. Hopefully you saw that's very simple. And there's a lot of customization that you can do to create that vault itself.
01:36:55.936 - 01:37:34.684, Speaker A: The step he was just talking through there is running the only specific software we require node operators to run is the stakewise operator software. Dima showed how to set it up using CLI and running through the docs. We are building our own operator software at stakewise to make that even simpler. But this is also where companies like Dapnode come in. And Paul is about to show you how to do the same process, but doing it via the Dapnode software and show you essentially how easy it is. Go take it away, sir.
01:37:34.882 - 01:38:26.040, Speaker C: All right, let's do it. Yeah, I'm going to plug in with mine. It 1212. Checking for signaling stuff on my side. No.
01:38:30.500 - 01:38:31.250, Speaker B: Beautiful.
01:38:37.400 - 01:39:08.610, Speaker C: Different dongle. All right, so basically what we saw right now is how to run the stakewise operator software, which you need because it automates all of the validator registration. And it's where you let the vault know that the validator is there and ready. Right?
01:39:13.460 - 01:39:41.108, Speaker B: Yeah, use. We use that command. Where is that command here. So you can see that also from the documentation page of the lighthouse. You can run it through the docker or any other way. I'm going to use the docker command here. So it provides the password.
01:39:41.108 - 01:40:28.820, Speaker B: And now we imported the key. So the next command would be to start our validator. So we're going to use Docker command here. Again, Docker run here is an important part. So as the recipient where the map and priority fee is going to go, we're going to specify the address that we have, like Mav recipient here. So we're going to copy it and paste it for the suggested fee recipient of the validator client. All right, so it managed to get the public key and at the same time our operator client has registered the validator.
01:40:28.820 - 01:41:01.748, Speaker B: So if we're going to take this one and go to the girly beacon chain and paste that public key here, let's see. It's going to find it. Yes. So we can see that our validator was deposited. The withdrawal credentials are the same as the vault address. I'm not sure if you can see it here, but maybe if we paste it in the URL. Okay.
01:41:01.748 - 01:41:20.410, Speaker B: It's a bit formatted differently, but that's the vault address here. That's it for the demo. Hope you enjoyed it. And if you have any questions, feel free to ask them. Thank you. Thank you.
01:41:27.690 - 01:41:41.706, Speaker A: Hello. Awesome. So, thanks, Dima. So I guess just a quick recap. So Dima there spoke through creating a vault on the stakewise Ui. Hopefully you saw that's very simple. And there's a lot of customization that you can do to create that vault itself.
01:41:41.706 - 01:42:17.960, Speaker A: The step he was just talking through there is running the only specific software we require node operators to run is the stakewise operator software. Dima showed how to set it up using CLI and running through the docs. We are building our own operator software at stakewise to make that even simpler. But this is also where companies like Dapnode come in. And Paul is about to show you how to do the same process, but doing it via the Dapnode software and show you essentially how easy it is.
01:42:18.970 - 01:42:19.334, Speaker B: Go.
01:42:19.372 - 01:42:20.454, Speaker A: Take it away, sir.
01:42:20.652 - 01:43:28.490, Speaker C: All right, let's do it. Yeah, I'm going to plug in with mine. Two, one, two. Checking for signal. Go. Yeah, I'll be back. Yeah.
01:43:29.420 - 01:43:29.976, Speaker B: Okay.
01:43:30.078 - 01:45:19.800, Speaker C: We're having some technical trouble. Decimator it. Yeah. So what we're going to see when we reboot the system and finally see something on the screen is I'm going to show you how to run your execution client, your consensus client, the stakewise operator software. And then we're going to spin up a validator for one of the vaults that I have already created following exactly the same process as Dima has showed you how to do the Mac as well. Okay, cool. Yeah, no problems.
01:45:23.050 - 01:45:24.470, Speaker B: Reopen windows.
01:45:31.300 - 01:45:50.590, Speaker C: Rebooting the Mac. It's doing stuff on my side. No.
01:45:55.050 - 01:45:55.800, Speaker B: Beautiful.
01:46:01.850 - 01:46:46.260, Speaker C: Different dongle. All right, so basically what we saw right now is how to run the stakewise operator software, which you need because it automates all of the validator registration. And it's where you let the vault know that the validator is there and ready. Right, here we go.
01:47:00.610 - 01:47:01.600, Speaker B: That's already.
01:47:02.070 - 01:47:03.986, Speaker C: Can you stop mirroring and go and.
01:47:04.008 - 01:47:04.850, Speaker B: Repeat.
01:47:12.330 - 01:47:13.400, Speaker C: In this way?
01:47:19.920 - 01:47:20.972, Speaker A: I'll be back.
01:47:21.106 - 01:47:21.790, Speaker C: Yeah.
01:47:22.720 - 01:47:23.276, Speaker B: Okay.
01:47:23.378 - 01:49:13.160, Speaker C: We're having some technical trouble. It decimator. What we're going to see when we reboot the system, finally see something on the screen is I'm going to show you how to run your execution client, your consensus client, the stakeways operator software. And then we're going to spin up a validator for one of the vaults that I have already created following exactly the same process as Dima has showed you how to do the Mac as well. Okay, cool. Yeah, no problems.
01:49:16.330 - 01:49:17.750, Speaker B: Reopen windows.
01:49:24.550 - 01:51:53.040, Speaker C: Rebooting the Mac. So basically it's going to take not too much time because as you have seen, that Dapnode has already a UI that allows you to install your execution client and your consensus client with a couple of clicks. So as soon as that is done, we just need to download a package just like RJ could deploy the RJ node. Then stagewise, we have deployed a package for the stagewise operator, and we're going to use that package, and it's going to have instructions that are going to guide us how to do all of this without having to use the command line at any point. Not too much time, because as you have seen, that Dapnode has already a UI that allows you to install your execution client and your consensus client with a couple of clicks. So as soon as that is done, we just need to download a package, just like RJ could deploy the RJ node. Then stakewise, we have deployed a package for the stagewise operator, and we're going to use that package, and it's going to have instructions that are going to guide us how to do all of this without having to use the command line at any point.
01:52:10.160 - 01:52:10.910, Speaker B: Game.
01:52:13.440 - 01:52:39.640, Speaker C: Yeah, the shit's opening now. More stuff.
01:52:51.160 - 01:52:51.910, Speaker B: It.
01:53:08.290 - 01:59:22.280, Speaker C: Do you have wireguard on your Mac? Yeah, exactly. Come on, come on. Sa, do you have wire guard on your Mac, far away from here, but you cannot connect to the present? Yeah, exactly. Come on, come on. It Sa. Good, we got it, I think.
01:59:25.290 - 01:59:27.042, Speaker B: Yes. Perfecto.
01:59:27.186 - 01:59:46.590, Speaker C: Good. All right, thanks, Dima, for lending me your laptop for the demo. Let's try to connect to my dev nodes.
02:00:09.690 - 02:00:10.054, Speaker B: Right.
02:00:10.092 - 02:00:58.334, Speaker C: So I'm connecting to my DAP node now through a VPN wireguard. So I'm connecting to a DAP node that's all the way over Europe to my dad's house, actually, and let's. Okay, excellent. Good. So here's my DAP node, right? And the first thing that we need to do is we need to install the execution client and the consensus client. Right? So I've already done this, so it will be synced before we start. But in Dapnote, the only thing that you need to do is you need to go to the staker section, and you need to select, for example, Gorli, Aragon, or Nethermind.
02:00:58.334 - 02:01:40.834, Speaker C: And here you're going to use Teku, for example. You choose whatever you want. And then if you're going to use any mev, mev boost, you just click it from here. At this moment, I'm just going to leave it as it was. And then I would go here and I would go like, apply changes. And what it would do right now is it's going to install it here in the packages. Okay, so now we have the first things that we need to have when we want to run our own node, when we want to run a validator, we need these pieces, right? We need the consensus client, we need the execution client, and we already have that.
02:01:40.834 - 02:02:43.110, Speaker C: So now the next piece that we need to have is the stakewise operator, which I'm going to share the package. So we're going to install this package live. And Dima, can I send this through this URL on telegram? Excellent. So now we have the, we have the package, as we said we could have like anybody's node right here. And we're going to install the stakewide operator software. And here we go, like, hey, okay, you want to run a validator? Yeah. So you will need the vault contract address.
02:02:43.110 - 02:03:29.974, Speaker C: And Dima has created a vault before. And let's check if we can go here and try to find the vault that we have created. So one of the vaults that we have created is the Dap node decentralization maximalist vault, right? And we can go and take the contract address and bring it here and we just, hey, I want to become a node operator for this vault and I just put it here. Then as Dima mentioned, I need a hot wallet. I need a hot wallet that will be registering my validators. So we could create one through my ether wallet offline or my crypto desktop app, and you basically create a key.
02:03:30.012 - 02:03:30.600, Speaker A: Store.
02:03:32.330 - 02:03:52.140, Speaker C: And then you can start registering the validators. So maybe I'll just send my stuff over and I will share this via telegram.
02:03:56.920 - 02:03:57.670, Speaker B: It.
02:04:01.320 - 02:04:02.436, Speaker C: Right here.
02:04:02.618 - 02:04:11.670, Speaker B: Cool. Here it is.
02:04:14.200 - 02:04:57.430, Speaker C: So we can put this now into the package. I can go here, choose file downloads. Was it downloads? Can we organize by date? Added UTC here. Perfect. And we have created these, and now we need to put the password. That would be a lot more simple if I could just like copy and paste stuff, but sorry about this. Okay.
02:04:59.880 - 02:05:03.910, Speaker B: Defines a process.
02:05:06.220 - 02:05:35.484, Speaker C: Now we have the passphrase. Perfect. Then we need the deposit data, and the deposit data we need to create the keystores and deposit data of the validator that we're going to be running. And this is going to be an empty validator. It's going to be a validator that we want the vault to fill in. Right. So what we're doing here is we're saying, hey, I'm running all the hardware, I'm running all the software, and here's my validator that I'm running in this machine.
02:05:35.484 - 02:06:19.344, Speaker C: Please put 32 eth in it and start running. And start validating. And I will start validating for you right here. So here we go. I'm going to do exactly that. Going to go back here, download deposit data, download the key store, and there we go. So Dima has already shown how to create the validator with the wagyu keygen, and therefore I'm not going to show how this is done.
02:06:19.344 - 02:06:46.024, Speaker C: But I've created this deposit data, making sure that the withdrawal address is the same of the vault that I want to be an operator for. So this same one right here. Right. And then I need the keystore file, which I've already sent to me right here. Fantastic. And then the passphrase for the keystore. So now I'm going to submit all of this information.
02:06:46.024 - 02:07:33.444, Speaker C: I'm going to accept, and now it's going to install and what Dima has done with the n, with the environment file, configuring everything, everything is managed in the background when you're using dapnode. So basically the only steps that you need to do is you need to know which vault you want to be an operator for. You need to create the deposit data and the key stores with a tool like Wagyu. And once you have done that, then you can basically use the Dapnode package and go through all the packages. And then you're going to be a stakewise operator. And now basically you're running, you're running all the software and we can go here and see the logs of what's happening. It's going to do the same as we saw on DMA's presentation.
02:07:33.444 - 02:08:17.248, Speaker C: It's going to connect. And I've already done this. I did this yesterday. So basically what we can do is I did exactly the same process on Daphne and I created a validator in the same way that we have done. And right now there's not enough staked balance in here. So it's not going to put automatically the 32 ETH into this validator that we have created, but it's what it did yesterday when I created this, I deposited 32 ETH and boom, yes, the vault automatically deposited 32 Eth in the key store that I had registered right here. So we can check this and we can go here and see that it's spending.
02:08:17.248 - 02:08:57.200, Speaker C: And the queue in Gurley right now is massive. It takes three days. But in three days, the vault DaP node max decentralization maximalist will have one validator running and it will have two. Actually, if somebody wants to put 32 ETH more or 23 ETH more in the DAPno decentralization max, as we have already, as we have running this right here, it will be ready and automatically it will deposit the 32 E into this validator that we're running. And that's how it's going to work, and that's how you do it with DAP nodes.
02:09:01.720 - 02:09:20.996, Speaker A: Awesome. Thanks Paul. Obviously, apologies for the technical details, these things happen. But hopefully you can see two things. One, how simple it is to create a vault on the UI. On the stakewise UI itself, the actual vault creation is super simple. Dima showed you how to do it versus command line, that's a little bit more complicated.
02:09:20.996 - 02:09:55.236, Speaker A: But using software like DAP node, there's no command lines. It's super simple. And the key thing to flag here is that if you're a node operator, you're done at this point, right? The vault is going to handle everything for you. It handles your fees, it handles the validator registration, it handles all the pooling of ETH. There's essentially nothing for you to continue doing other than continue running your node. And this whole system is designed to be as seamless as possible and as automated as possible. I'm conscious of time.
02:09:55.236 - 02:10:21.530, Speaker A: We've obviously overrun now, so I will not ask for questions on stage. We will stick around afterwards if anyone's got any questions. As I mentioned, the testnet for V three is going live this week. It will be private to start with. As I mentioned, you guys got a bit of a sneak preview, but there will be a public testnet launching very, very soon and we'll be super excited to get you guys involved there. But yeah, I'm going to wrap it up and see you on the flip side.
