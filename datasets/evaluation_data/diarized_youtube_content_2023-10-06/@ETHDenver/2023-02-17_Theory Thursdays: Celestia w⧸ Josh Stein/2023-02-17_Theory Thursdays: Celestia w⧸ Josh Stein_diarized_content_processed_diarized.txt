00:00:00.250 - 00:00:21.680, Speaker A: In the future. I got that one backwards because at the beginning of these, I know that people haven't trickled in to watch the live yet. So I'm only speaking to people that have watched the recording. So what I meant to say was, hello, people of the future. I'm here from the past, and as always, I am Derek, the community steward here at E. Denver, aka Sporkdow. Branding's hard.
00:00:22.770 - 00:00:24.640, Speaker B: Past, present and future.
00:00:25.050 - 00:00:39.218, Speaker A: All of us are welcome here. Whatever time zone you're in, whatever part of the four dimensional time space continuum you're a part of, you're welcome here right now. And speaking of people that are welcome, I'm joined here by Josh today. Hi, Josh.
00:00:39.314 - 00:00:42.040, Speaker B: Hey, nice to meet you. Derek. Nice to meet you, too.
00:00:42.510 - 00:01:20.342, Speaker A: So today on theory Thursdays, we're going to continue solidifying our fundamentals. We want to make sure whether you're a developer, a designer, a student, whatever your background is, whatever your interest level is, whatever your knowledge level is, theory Thursdays is for you. Because we are going to start from the beginning. We're going to make no assumptions about what you know. You don't need to know what a hash is. You don't need to know what a consensus mechanism is. This is really breaking it down and explaining some of the high level ideas in terms that you could explain, ideally to a family member over dinner, and just be like, well, here's the goal of this thing.
00:01:20.342 - 00:02:04.382, Speaker A: Here's how we tried to accomplish it with a broad stroke. And so I'm excited because today Josh and I are going to get into celestia. And Celestia is the hallmark of a modular blockchain. So by the end of this discussion, you'll understand a little bit more what a blockchain tries to do. Like, if your current mental model is like, a blockchain is like a computer, right? Great. That's a fantastic place to start. And we're going to get into what computers do, the difference between something like computation and storage, and talk about how Celestia has an approach that attempts to solve some of what we're seeing on Ethereum mainnet, for example, like congestion, high gas fees, really slow throughput.
00:02:04.382 - 00:02:17.750, Speaker A: These are problems caused by the current infrastructure. And so we're going to try to explain how Celestia has one potential solution to that, basically by breaking it up into pieces or modules. So that's what modular means. I'm doing your job, Josh.
00:02:18.650 - 00:02:20.194, Speaker B: We'll get into the details.
00:02:20.322 - 00:02:58.274, Speaker A: Sure. But I want to just set the stage. Well, this is like a tell them where you're going. Tell them and then tell them what you told them. So here in the beginning, I want to let y'all know that today we're going to talk about how blockchains work. And then Celestia is going to give us an interesting angle in on how they work and how they are attempting to break apart the pieces and put them back together in a different way that has certain advantages. So without further ado, let's take a complete detour, because just like Celestia is modular and has different pieces, so do you too have a lot of pieces going on in your life? You're not just, are you Devrel or Dev advocate?
00:02:58.402 - 00:03:00.274, Speaker B: Yeah, solutions engineer.
00:03:00.402 - 00:03:01.542, Speaker A: Solutions. Is that.
00:03:01.596 - 00:03:04.390, Speaker B: I'm on the Devrel team. I'm on the Devrel team.
00:03:04.460 - 00:03:06.018, Speaker A: What is a solutions engineer?
00:03:06.114 - 00:03:16.234, Speaker B: I work a lot on integrations. As more people want to build roll ups, I also do a lot of documentation and this sort of thing.
00:03:16.432 - 00:03:21.974, Speaker A: Okay. Public facing, like with the folks that are trying to use the tech and building on interest.
00:03:22.032 - 00:03:24.320, Speaker B: Kind of like an integrations. Yeah.
00:03:25.250 - 00:03:50.802, Speaker A: This is greek to me. We're going to start as we always pin. I'm going to force Josh to tell us his life story because I think it's more interesting to know who people are than to just dive into, like, well, you'll never believe our new SDK. So to that end, Josh, would you be willing to tell us a little bit about how you got here to be a solutions engineer at Celestia? What is that path?
00:03:50.866 - 00:04:34.034, Speaker B: Yeah. So I'm not going to go too far back, but I do think it's important to highlight. I had a pretty math and science heavy upbringing, educationally or academically. So I went to a STEM focused high school, ended up going to university for mechanical engineering, and in what seems like a common fashion for people in crypto, I took a detour. I actually worked in restaurants, beginning, like, washing dishes. I ended up managing kitchens for about two and a half years. I then decided during the pandemic to go back to school.
00:04:34.034 - 00:05:12.202, Speaker B: One of the things that resurfaced from my STEM heavy high school was really, I had this deep desire to learn how to build websites. I had done WordPress sites. I had done squarespace and sort of the no code tools to build sites before. But as I was finishing school, finishing a business degree, actually, I started to get really curious. So I started playing around with Gatsby Js. I did a tutorial on their site that taught me how to build something from scratch for the first time. And that was kind of where it all clicked and I realized I wanted to go in a different direction.
00:05:12.202 - 00:06:09.694, Speaker B: I studied supply chain management in business school but realized that wasn't really what I wanted to be doing. So I was working with a nonprofit in Boston actually, as I was finishing my degree as well and doing some website management for them. Fortunately, I was with a lot of engineers working on that project and they kind of encouraged me to start looking at this different path. So that's really ultimately what led me in the direction of working in traditional tech. I guess I was working on an AWS course to be actually forget exactly the role, but was getting a certification for that. And then I was scrolling on Twitter one day on the weekend and I came across developer Dow and I was like, wow, this looks fun. I'd kind of been like exploring the NFT scene that summer.
00:06:09.694 - 00:06:53.310, Speaker B: So this is back in October ish 2021, right around when developer Dow had first taken off and I minted a token, I joined the Discord server. It seemed a lot more fun and exciting than what was going on. I mean, at Amazon it wasn't really that appealing. I had friends that worked for them and they were like, yeah, they don't really care about who you are. And I guess after a few years of working in kitchens, I really just wanted to be able to enjoy myself and be myself. So that was a big thing that drew me into the web three crypto world. So I actually signed up for a build space project that day that I discovered developer Dow.
00:06:53.310 - 00:07:45.806, Speaker B: There were a lot of people in the server that were using that to learn how to build things. So I ended up doing a few projects there and that was kind of what got me going down the rabbit hole. So I actually went to Eth Denver last year. I was looking for work at the time still, and man, there were just endless options in terms of what I could do with my business background but also my tech interest in learning about all of. So yeah, that's pretty much what kicked it off for me about a year ago after Denver, I worked at Anchor AnKr Infrastructure as a service provider and now I'm at Celestio and I guess very briefly was a teaching assistant with buildspace part time last winter.
00:07:45.918 - 00:07:46.914, Speaker A: That's fun.
00:07:47.112 - 00:07:53.122, Speaker B: So, yeah, it's definitely not been a straight path, but it's all worked out and I'm loving what I do.
00:07:53.256 - 00:08:36.640, Speaker A: Wow, a lot of parallels to my path, actually. Yeah, I ended up around that August, October 21 time. I mean, many of us are members of the 2020 bull run cohort of course. But I also find it interesting that since then, developer Dow, because you joined and you found build space and started practicing. Since then, developer Dao has launched DD Academy. Even they have their own in house version of the same. And it's just really heartening to hear that many of us find a foothold just scrolling through Twitter, finding a community that looks fun going and hanging out in a discord server, and then the rest is history.
00:08:36.640 - 00:08:51.890, Speaker A: That's very often how it happens. And then a launching point, of course, like your first IRL event, whether it's in ETh Denver or something else closer to you, there's this like, oh, you're from DD. Oh, my God. Oh, let me introduce you to this person. And then suddenly the networking just starts to unfold.
00:08:51.970 - 00:09:07.178, Speaker B: Yeah, absolutely. And I guess it was a perfect storm in the sense that we were all home during that time, and hanging out in discord was something that was completely okay. Yeah, that's a great point. Yeah, it's been a good time.
00:09:07.344 - 00:09:27.700, Speaker A: So you found some purchase, you worked at anchor, you helped out at build space as teaching assistant. Now you're at Celestia. What is Celestia trying to is at a high level. What is it and how does it fit into the current landscape of where the blockchain ecosystem is and is trying to go?
00:09:28.070 - 00:10:20.078, Speaker B: Absolutely. So Celestia is the first modular blockchain network, and we'll get a lot more into the details about what that means here shortly. But at a high level, the way that I first understood it, what we're doing is basically breaking apart the different functions of a blockchain or modules, as you described briefly in the beginning. And we're making it so that anyone can specialize each one of those layers for whatever their use case is. At the core, though, what we're building is a shared security layer, which will handle consensus and data availability, which are two of the common core functions of a blockchain. So the real goal here is to allow anyone to deploy a roll up for their sovereign community. And by using a shared security layer, it makes bridging easier.
00:10:20.078 - 00:10:34.838, Speaker B: And the trust assumptions are basically the same across the different chains that are built on top of Celestia. Yeah, I think the slides will help.
00:10:35.004 - 00:10:57.326, Speaker A: I definitely a lot better. And before I forget, I forgot to add this piece to reflect on your story. I also find it interesting that you left AWS, essentially, or learning about it, to join developer Dao, and then that was like a springboard. Nather Dobbit, who essentially founded developer Dao because he released the NFTs for free in the style of the.
00:10:57.508 - 00:10:58.222, Speaker B: What were they?
00:10:58.276 - 00:10:58.730, Speaker A: Loot.
00:10:58.810 - 00:11:01.738, Speaker B: Loot, yeah. I was going to say shout out natter.
00:11:01.834 - 00:11:19.134, Speaker A: Yeah, shout out natter, for sure. He was on stream a couple of weeks ago. Like, actual hero of mine. It was his birthday recently, he also sort of left AWS to pivot into web three. So I think there's a little just fun symmetry there between path and his path, if I may draw that parallel.
00:11:19.182 - 00:11:20.020, Speaker B: Yeah, sure.
00:11:21.530 - 00:11:30.698, Speaker A: Let me get away with it. So let's go ahead. If you have some slides. Visuals, of course, can help a lot with these things, because we're talking about.
00:11:30.784 - 00:11:31.930, Speaker B: Hi, Alana.
00:11:32.430 - 00:12:00.514, Speaker A: Extremely technical stuff behind the scenes. And in order to do that, let's start at the beginning. We're going to have some definitions, we're going to have some diagrams. We have the hard job. Josh and I both have different versions of a teaching background, and it is our sincere goal to help you understand really technical things at an approachable level. And so here we go.
00:12:00.712 - 00:12:05.266, Speaker B: Yeah, I'm ready. We got the screen up.
00:12:05.448 - 00:12:06.950, Speaker A: Yeah, we're good to go. Whenever you're ready.
00:12:07.020 - 00:12:27.930, Speaker B: Nice. Cool. So today we're going to be talking about. Or tonight? Today, whatever it is for you, Celestia. And Celestia is the first modular blockchain network. I think we already covered most of this. I'm a solutions engineer at Celestia Labs, and at the core, we're a modular data availability layer, one blockchain.
00:12:27.930 - 00:12:41.070, Speaker B: I was previously at anchor in build space. I am a GM emoji stan. I use it everywhere. I love it. And then, I guess, developer dow again. That's what really started it all for me.
00:12:41.140 - 00:12:43.094, Speaker A: Shout outs to Didi. Amazing crew.
00:12:43.242 - 00:13:17.190, Speaker B: Thank you. Natter dabbit. So, going over the agenda, we're going to first talk about what a modular blockchain is and break that apart into four core functions. And we'll get into that in a second. Then we're going to talk about Celestia, and then we're going to talk about rollkit, which is the hot new SDK that we kind of hinted at earlier. And then we're going to go over deploying your own evm. So ethereum virtual machine roll up that's going to be using Celestia as a shared security layer.
00:13:17.350 - 00:13:31.214, Speaker A: So someone will know that they've really got what we're going over today. If they could explain what AI, AI, b and c mean if they understand these.
00:13:31.252 - 00:13:31.790, Speaker B: I think so.
00:13:31.860 - 00:13:41.810, Speaker A: Functions of a blockchain. And could it do like a one liner version of like, oh, what does execution mean? Blah, blah, blah. So somebody's really good to go if they could explain each of these.
00:13:41.960 - 00:14:29.890, Speaker B: Yeah, absolutely. And we won't go too deep into settlement, but on the execution side, we're going to be going into that. Okay, so starting out really, what is a modular blockchain? I'll let that sit for a second, because it's a new concept. A modular blockchain is a blockchain that decouples the core functions. So breaks apart the core functions of a blockchain. And typically those functions are execution, settlement, consensus, and data availability. But what does that all actually mean? So one way to think about this is with the OSI model for software development.
00:14:29.890 - 00:15:19.646, Speaker B: Basically, what I want to get out of this slide is the things that we use today, Twitter, Instagram, email, like streaming and all of that. It's not all happening on one software stack. There's multiple pieces that build that to make it more efficient so that you can reduce bottlenecks. So I think this is a good comparison that we can use to understand modular blockchains. Basically, we've seen this progression of blockchain technology go from a monolithic era where execution and consensus are tightly coupled. So basically the blockchain is doing everything, and this often causes bottlenecks. So high transaction fees, low throughput.
00:15:19.646 - 00:16:21.234, Speaker B: And what we're doing in the modular software era is decoupling execution and consensus at the software level, but that requires you to create an entire validator network. So basically creating your own shared security layer. And we'll get into the details of that in a little bit of why that isn't necessarily the best solution, at least as far as we're understanding this. And the modular blockchain era is where we're going to split apart all of the functions and then build on top of a shared security layer so that we can all have the same guarantees for security. So what this looks like in practice, we're going to go over a few examples. So there's a few different ways that you could build on top of celestia or on top of another shared security layer. So the first example would be a sovereign rollup.
00:16:21.234 - 00:16:59.240, Speaker B: A sovereign rollup has execution and settlement coupled. And basically the execution layer is where all the smart contracts live, where all the accounts live. That's what you would see in your wallet. And the smart contracts that you interact with is basically what the end user sees now, consensus and data availability. Basically consensus is Derek and I agreeing that we're on the same page. If we were nodes and then data availability is us being able to have the same transaction data. I might be getting ahead of myself, so we'll just go over these examples now and get into the details in a second.
00:16:59.240 - 00:17:46.230, Speaker B: So a roll up the execution layer would be able to settle onto something else. This could be Ethereum. And then we also have consensus and DA still handled by Celestia. There's also the idea of a celestium where execution is done in its own environment and then settled and settlement and consensus is done on Ethereum. And we're just going to use Celestia for data availability. And I can post links in the chat to more about this for anyone who wants to learn more. So going back a little bit, I think it's important to compare the traditional web two cloud stack with the web three and modular stack.
00:17:46.230 - 00:18:40.310, Speaker B: In the web two world, we have these large data centers where there's a lot of centralized, basically centralization around the way that data is stored and handled and owned. Now in the web three modular stack. What we're aiming to do at Celestia is build a data network that anyone can build on top of. And basically the big thing is shared security. So each one of these DFI, NFT, Dow, decentralized social could all be their own roll ups. And we're going to get into what that looks like. So why Celestia? Modular blockchain sounds fun, but what does that actually mean? The goal of Celestia is to allow anyone to deploy decentralized blockchains without the overhead of bootstrapping a new consensus network.
00:18:40.310 - 00:19:17.810, Speaker B: And what this does is it allows you to scale without sacrifice and really just build what you need to build rather than focusing on the base layer. And a big part of this is that people who are building on top of celestia inherit crypto economic security, which basically protects them from civil attacks. And yeah, it allows everyone to have the same security, but how is this actually possible? So traditionally we have two different types of blockchain nodes.
00:19:18.150 - 00:19:19.378, Speaker A: May I pause you?
00:19:19.464 - 00:19:20.482, Speaker B: Yeah, man, absolutely.
00:19:20.536 - 00:19:48.838, Speaker A: Well, because Alana, the web three girl, is very actively paying attention, and she is looking forward to you posting more links later. But there was a question in relation to this slide. I'll go ahead and put it on screen here just so we can all see it. So I could have my own blockchain now, but inherit the security from Ethereum, for example. I think this is in relation to one of the. On the previous slide. Yeah, that one.
00:19:48.944 - 00:19:56.394, Speaker B: Yeah. So celestium is something that will be enabled by something we're calling the quantum gravity bridge.
00:19:56.522 - 00:19:57.294, Speaker A: Okay.
00:19:57.492 - 00:20:01.274, Speaker B: Yeah, and I'll link you to the blog post there.
00:20:01.412 - 00:20:02.162, Speaker A: Great. Got it.
00:20:02.216 - 00:20:21.750, Speaker B: That's something that we're still working on. But yes, ultimately you can use consensus. You can settle on Ethereum and have consensus on Ethereum as well. But I think it will help to get into more about what exactly consensus is and what data availability is. Okay.
00:20:21.820 - 00:20:24.610, Speaker A: Yeah, let's keep it going. Thank you for asking, Alana.
00:20:24.770 - 00:20:53.620, Speaker B: Thank you, Alana. So, taking a step deeper, traditionally we have two types of blockchain nodes. We have full nodes, and full nodes download and verify all the blockchain data. So every block they download everything, make sure it's valid. And what this causes is a higher barrier to entry. And it really only allows a minority of users to run nodes on the blockchain. Running a node allows you to guarantee security.
00:20:53.620 - 00:21:54.680, Speaker B: And what we're working on at Celestia is something called a data availability sampling light node. But before we get into that, a light node is something that only downloads block headers. Traditionally, it doesn't actually verify the data. And there's a lower barrier to entry, which allows a majority of users to run these light nodes. And then we have light clients on Ethereum, but they trust a majority of validators. So you're having high trust assumption that all of the full, the validators are being honest and there's no way to actually check that anything but the header is accurate. At Celestia, we're building light nodes that are able to verify the blocks with high security by only downloading a small portion of the data.
00:21:54.680 - 00:22:47.940, Speaker B: And we'll explain that in a. But like, how light are we talking? So recently, code sandbox released docker compatibility in their browser, in the application in the browser, and we're actually able to run a light node on there. And they only really have about a few gigs of memory and storage. But we're able to do this on very, very lightweight devices. But what is data availability? So data availability is transaction data that's getting verified for the first time. So in block seven here, we have the newest transactions coming in from everyone. And as a user, what we want to do is verify that the new transaction data is there and that it's available.
00:22:48.550 - 00:22:56.920, Speaker A: This one makes sense to me because I'm a user and I'll do a swap on uniswap and I just want to know the swap's done so I can go do something with whatever I just swapped for.
00:22:57.530 - 00:22:58.050, Speaker B: Yes.
00:22:58.140 - 00:23:04.170, Speaker A: I just want accurate, up to date data on the state of how things are absolutely.
00:23:04.320 - 00:23:50.810, Speaker B: It's really important, I think, for the user experience to be able to do that quickly, but also accurately. And I think a common misconception with data availability is that it sounds like the same thing as data storage. Right? But data storage is transaction data that's already been verified. So as a user, you're going to be retrieving old transaction data, and these aren't the same thing. So data availability is just transaction data that's getting verified for the first time, and then data storage is transaction data that's already been verified. So I just want to highlight that these are two different things. And we will have data storage, but not on light nodes.
00:23:50.810 - 00:24:48.220, Speaker B: So when it comes to scalability, I think I mentioned earlier that building your own roll up on top of a shared security layer allows you to scale almost endlessly in a monolithic chain. The full node downloads the entire block. And if we want bigger blocks, that means we need bigger hardware. Typically, a lot of these full nodes can maybe run on a laptop, but as the blocks get bigger, we're going to need servers, we're going to need data centers. And at the end of the day, this is something that is probably not as scalable as it could be. So in the modular world, we have these light nodes, and they're able to download a small portion of the block. And the more light nodes that you have, the higher guarantee you have that the block is there and that the data is available.
00:24:48.220 - 00:25:39.020, Speaker B: So as we want bigger blocks, all we need to do is add more light nodes. And as the network grows, we're able to produce bigger blocks. And bigger blocks mean higher throughput and lower transaction fees. So really what we're doing here is allowing networks to scale without requiring more hardware. And then ultimately the goal is to allow these light nodes to run inside of wallets on cell phones and actually make a lot of this technology more accessible by also providing people with the security guarantees that they want. So knowing that your uniswap swap went through, I guess I'm going to pause, see if there's any questions.
00:25:39.730 - 00:25:58.020, Speaker A: So, so far we're covering data availability and data. Yep, we do have a question. Alana is asking. So you're allowing for decentralization that can be enabled by the user of a blockchain, correct?
00:25:58.550 - 00:26:16.950, Speaker B: Absolutely. So instead of having to trust an RPC provider, someone who's going to tell you that the data is there, you're actually able to do that yourself. And we'll play around with it later on. But interesting, something you can do with a light node is actually also send transactions.
00:26:17.530 - 00:26:33.310, Speaker A: Wow. Okay. Yeah. For folks that, let's take a step back. So in the current model, if you're using something like a metamask or my ether wallet, how does a transaction that you're trying to execute get to the blockchain?
00:26:33.650 - 00:26:55.780, Speaker B: Yeah. So it's going to go through, well, unless you're running your own node, it's going to go through an RPC, which is basically a gateway to someone else running a node. So basically what you're doing is trusting a third party without actually being able to verify that information yourself.
00:26:57.910 - 00:26:59.254, Speaker A: What's the other big one?
00:26:59.372 - 00:27:00.418, Speaker B: Alchemy.
00:27:00.594 - 00:27:01.990, Speaker A: Of course, anchor.
00:27:04.010 - 00:27:24.990, Speaker B: Pocket network is a great one. Yeah. But basically we're just trusting these other parties and what we want to do is be able to give the users of the blockchain like the first class access to be basically the main part of the network.
00:27:28.770 - 00:27:57.658, Speaker A: Yeah, I think I'm excited for us to keep going because I don't totally understand what was given up in transitioning to being a light node. Like what is a light node doing? What is it not doing? If I have the app open on my phone, in what sense am I contributing? Is it like a peer to peer network? And when I turn it off, what happens then? So I think as we continue to define what these different parts are, it'll be a little more clear to me at least like what these nodes are and are not doing.
00:27:57.824 - 00:28:48.140, Speaker B: Yeah, absolutely. So what these nodes are doing is something that is called data availability sampling. And basically data availability sampling allows these light nodes to download around less than 1% of the block and guarantee that the entire block is valid. The more nodes that you have sampling this, the higher guarantee that you know that the block is there. So what this does is that it increases scalability and reduces the cost for users to operate nodes and verify the network. And as I mentioned earlier, the more nodes there are, the more capacity the network has. So I think a really good example of this.
00:28:48.140 - 00:29:45.386, Speaker B: So stepping back a little bit, data availability sampling uses something called erasure coding, and erasure coding is actually something that exists in cds, dvds, Blu rays. But I think a more tangible example, I guess in that case, if your CD is scratched, it might still play the music on it, but only to a certain degree. If there's too many scratches, you're not going to be able to guess what was there. I think a good example that is more tangible is with a QR code. So the QR code on the left, if you have your phone out, you can scan it and it's going to take you to the celestia docs. And I've actually removed a pretty large portion of the one on the right and it's going to be able to do the same thing for you. So this is using erasure coding and we're basically able to guarantee with a small bit, well, almost a majority of this QR code.
00:29:45.386 - 00:29:47.260, Speaker B: And we're going to get to the same place.
00:29:47.790 - 00:30:16.418, Speaker A: That is beautiful. And for folks wondering about the implications of this, if you're understanding it for the first time, you could just take your thumb and cover different parts of the left one. It's not like there was a specific part you're allowed to do this for. What he's saying is there's a holographic nature to the way the information is encoded so that the whole is existing across the parts, unlike a URL. Right. If it just said like celestio.org docs, if I covered the right part, you would be unable to know what it said.
00:30:16.418 - 00:30:18.710, Speaker A: But it's not like that. Each of the parts.
00:30:19.210 - 00:30:19.526, Speaker B: Yeah.
00:30:19.548 - 00:30:24.360, Speaker A: I'm not going to pretend I understand how to explain holograms super well, but I think it's a beautiful execution of a good idea.
00:30:24.730 - 00:31:28.874, Speaker B: Yeah. So where did this all come from? I think that's important to understand. So if you want to read more into data availability sampling, what you can do, I can send links after this or you can look up these papers, but there's a paper by Mustafa who is our founder, and Vitalik and Ismail and Alberto who wrote about fraud and data availability proofs, detecting invalid blocks and late clients. And then another one that I think is useful to read into if you want to get into the details, is the original paper for Celestia, which is called lazy Ledger, distributed data availability ledger with client side smart contracts. And that's written by Mustafa. And yeah, if you have more questions, please reach out to me after. So, taking a step back a little bit, I want to go over what the real benefits of building on Celestia are.
00:31:28.874 - 00:32:03.938, Speaker B: So foremost, we have scalability. The more transaction, we're able to verify more transactions as the number of nodes increases, which means we can have bigger blocks. I think bridging is probably one of the biggest problems in the blockchain world. There's been countless hacks and a lot of these are because the base security layers are different. So you cannot inherit the same security for two different roll ups unless they're built on the same shared security layer.
00:32:04.034 - 00:32:23.260, Speaker A: Well, moreover, if you're trying to bridge between two completely separate l ones, like gnosis chain and Ethereum main net, for example. That bridge has the security of neither. It just has the security of the bridge, which are notoriously not as robust as the networks themselves.
00:32:23.790 - 00:32:24.262, Speaker B: Absolutely.
00:32:24.336 - 00:32:37.490, Speaker A: And which need a lot of liquidity to be able to function effectively as a bridge. So people are just like, I'll go put my eth in this bridge contract. It's between ETh main net nosis chain. What's the problem? It's like, oh, there was some underflow exploit in the bridge itself.
00:32:37.560 - 00:33:07.610, Speaker B: Oopsies. Yeah. So that's one of the bigger problems we're working on solving. And actually, I guess if you're familiar with the cosmos ecosystem, this is something that something called interblockchain communication enables between cosmos chains. But there's still not the same security guarantees between those different validator sets. And the validator sets are what make up the shared security layer. So I think the third benefit here is sovereignty.
00:33:07.610 - 00:34:02.482, Speaker B: And what that really means is the flexible choice to pick your execution environment. So you could use the fuel VM to build a roll up, you could use the EVM to build a roll up, you could use the Solana VM, you could make a JavaScript VM move vm. So basically, we want people to be able to build what they need, and all we're doing is providing them the security to do that. Well, not all we're doing, but that's the main thing that we're doing here. So I want to highlight a little bit about the shared security aspect of this by using these diagrams. In the monolithic layer one chain, you have to actually build your own security. So building your own security is setting up that whole validator network that validates the network.
00:34:02.482 - 00:35:01.680, Speaker B: But in the modular world, whether we're building on Celestia or another DA layer, we're able to inherit security from day one. So as soon as I start my rollup, I'm receiving that security. There's definitely a few more steps there, but you're able to start up a network without having to bootstrap that entire validator set and then splitting apart the functions of the blockchain a little bit. Here we can see in the monolithic example, we're just going to use execution, consensus and data availability all in the same chain. And in the modular paradigm, we're going to use a common shared security layer on the bottom and then have execution separated. They're going to be connected, but they're not coupled together. So this allows us to reduce bottlenecks and really focus on just the execution side of things.
00:35:01.680 - 00:35:34.890, Speaker B: So we're going to be going through an example here in a little bit, and we're going to be building a sovereign roll up. A sovereign roll up is a roll up that has execution and settlement in one layer and then shared security in another layer. Want to pause for any questions? And if there are none, I'm going to go to the next slide.
00:35:35.950 - 00:36:12.290, Speaker A: Well, I think we'll need to get to the end for my question to have all of the room to breathe. My question, which we will punt until the end, is cool. So why aren't we just doing roll ups on EtH Mainnet? Haven't we already architected a solution to this to improve transaction throughput while inheriting the security of everyone's favorite ETH mainnet, like EtH max unite? So I want to understand what you're saying so that I can understand the right column, for example, because I think you're hinting at an answer that includes EtH Mainnet for everyone who loves eth.
00:36:12.370 - 00:36:13.046, Speaker B: Absolutely.
00:36:13.228 - 00:36:27.980, Speaker A: So I'll let you continue, but that's sort of the elephant in the room for me, which is like we already have the shared security layer we love and we're already working on using roll ups to improve execution and settlement. So in what sense is this similar or different?
00:36:28.430 - 00:37:07.710, Speaker B: Absolutely. But I'll let you think, I guess I should note Celestia orders transaction data and makes it available. There's nothing else going on. So really, I think the most simple form of a blockchain, and this really just helps reduce the bottlenecks that happen on Ethereum mainnet. We'll get into that later. And I think the blog post actually can explain it better than I can for celestiums. So what is a sovereign roll up? Sovereign roll up is a roll up that doesn't use a separate settlement layer.
00:37:07.710 - 00:37:29.818, Speaker B: And this allows developers to have the freedom to choose their execution environment and not share resources like you would share in another execution environment, such as building on one chain. Yeah. So how can I build this? That's probably what you're wondering.
00:37:29.914 - 00:37:35.010, Speaker A: What do you mean, no settlement layer? No shared settlement layer rather.
00:37:35.160 - 00:37:43.202, Speaker B: Yeah, no shared settlement layer. Basically the settlement happens within the execution layer. Okay.
00:37:43.256 - 00:37:44.450, Speaker A: Yeah, let's keep going.
00:37:44.600 - 00:38:20.314, Speaker B: Yeah, we're good. So roll kit is the way that you would build this. And roll kit is a modular framework for roll ups. So what this allows you to do is build your own roll up on top of a shared security layer. And really the possibilities are endless there. But what this looks like in practice is each one of these could be a roll kit roll up that is built on top of Celestia. It could also be built on another DA layer and the configuration under the hood.
00:38:20.314 - 00:39:07.134, Speaker B: What we're able to do is choose our execution environment, whether it's the cosmos SDK, whether it's the EVM, cosmosm, or fuel vm, we're able to set up different types of sequencer sets. So these could be a centralized sequencer. It could be decentralized leader selection or sequencer as the service even. We can also have staking options that we basically configure to whatever use case we need. And then we also have different ways that you can add proof schemes. So fraud proofs, zero knowledge proofs, or I guess in the pessimistic option, no proofs at all. So let's get to building a little bit here.
00:39:07.134 - 00:40:07.010, Speaker B: I think this might help everyone understand a little bit better about what's going on, and then we'll come back for questions a little bit later. So, I guess, starting out, I'm going to show you what we're actually going to be looking at here. So one of the first projects I did on build space was something called a wave portal. The project left room for a little bit of creativity. So what I built then was a veggie portal. And that was built on, I think it was on Rinkabee at the time, but basically it was the first time I put a smart contract out there, and I was able to actually interact with that on the front end, and it kind of blew my mind at the time. So what we're doing here is we're actually connecting to an Ethermint roll up, which is an EVM compatible roll up that's running on top of Celestia.
00:40:07.010 - 00:40:49.950, Speaker B: I think that I've probably already posted from this account, but it looks like I haven't. So what we're going to do now is we're sending a transaction and it's going to post a GM on the wall. But I think it failed because I've already posted. Yeah, we're going to swap the contract out and do the full demo here in a second. So what we were just looking at is a full stack Ethernet, I guess, demo. The smart contract is living on an Ethernet roll up that's posting data to Celestia.
00:40:50.610 - 00:40:52.660, Speaker A: Should I know what ethermint is?
00:40:53.510 - 00:41:24.986, Speaker B: I guess not. Ethermint is a cosmos SDK. It's built with the Cosmos SDK, and it's basically an EVM Cosmos SDK chain that's compatible with the cosmos ecosystem and also with the EVM. And when I say compatible with the evm, it's running the evM. So you can use traditional tooling like metamask and all that stuff.
00:41:25.088 - 00:41:26.182, Speaker A: You can write your smart contract.
00:41:26.246 - 00:41:53.890, Speaker B: Solidity. Yeah. And then solidity. Okay, cool. Thank you for asking, actually. So over here on the right, actually, we'll start with this. So the dependencies for this are a celestial light node, which is something that you can run on your laptop.
00:41:53.890 - 00:42:41.170, Speaker B: We also have a local Celestia devnet that you can run similarly to how you run hardhat or truffle, where you have a local network to test things out before you go to a testnet that's actually out there. We're also going to have a roll kit ethermint node, and this node is a sequencer. So what it's doing is it's taking in transactions and ordering them and then producing a block and posting that block to Celestia. We're going to have a solidity smart contract in the project. And the front end is built with VJs. Rainbow kit. Huge rainbow kit fan.
00:42:41.170 - 00:43:05.820, Speaker B: Yeah. And chakra Ui. And Chakra Ui is a component library that makes building front ends easy. I guess one of the things that I really like about it is that it has dark mode built in pretty easily, so you can make it developer friendly if you want. To.
00:43:07.870 - 00:43:09.710, Speaker A: Developers who famously hate light.
00:43:09.780 - 00:43:28.818, Speaker B: Yeah, it's not an option. So the site that we were looking at before is actually deployed on fleek. So it's hosted on ipfs. And I'm actually using an ENs and ETH limo to reach site right now.
00:43:28.904 - 00:43:30.580, Speaker A: I don't know what those words mean.
00:43:31.350 - 00:43:50.010, Speaker B: So what that means is I have an Ethereum name service name here, and I have pointed the site that is living on the interplanetary file system. So a decentralized data storage network.
00:43:52.030 - 00:43:54.860, Speaker A: Like a blockchain, but more like a Google Drive.
00:43:55.230 - 00:44:24.734, Speaker B: Yeah. There we go. Thank you. And what we have on the naming service, like we would have domain name service, is we're pointing the address to the ipfs file or the hash there. And ETH limo is a way that you can access this on a normal web browser. If I were to go to brave, I think you can. We'll do it later.
00:44:24.734 - 00:44:29.000, Speaker B: But I could also just type in buildmarket ETH and it would show up.
00:44:29.370 - 00:44:50.890, Speaker A: I put a QR code up on the stream here that will take folks to buildmarket ETH limo, which I just loaded up and it turns out is live. And you can even cover a corner of that QR code with your thumb and it'll still work. Yeah, someone scanned it. Alana, did you scan it? That's fun.
00:44:50.960 - 00:45:01.306, Speaker B: Nice. We'll figure out a way how to. I'm going to get you tokens if you want to play around with it at the end of this, but we're going to deploy a new contract first.
00:45:01.428 - 00:45:02.100, Speaker A: Cool.
00:45:02.470 - 00:45:20.378, Speaker B: So the dependencies for this are relatively low. The recommendation is to have 8gb of ram, quad core cpu, and around 250 gigs of storage for bandwidth.
00:45:20.414 - 00:45:21.880, Speaker A: Not a cell phone, my guy.
00:45:22.250 - 00:45:25.766, Speaker B: Yeah, we're going to be running.
00:45:25.948 - 00:45:28.858, Speaker A: This is a medium node, both a.
00:45:28.944 - 00:45:40.222, Speaker B: Light node and then the roll kit node. I guess the dependencies here are a little bit conservative in that sense.
00:45:40.356 - 00:45:40.894, Speaker A: Okay.
00:45:41.012 - 00:45:48.334, Speaker B: Same with the bandwidth. You don't need bandwidth that high. But this is the recommendation. High.
00:45:48.372 - 00:45:58.290, Speaker A: Tall order. Because when other people run nodes, they get like eth or whatever. So am I at least getting some celeste?
00:45:59.030 - 00:46:57.590, Speaker B: Yeah, not really. If you're running a light node, the light node is basically just the way to allow the end user to inherit that security. I think it's also important to note that we don't have light node running in production on a cell phone. But it has been done, I think, around, I want to say this time last year, Mostafa ran one on an Android and it was able to be doing data availability sampling on that phone. So I want to get into it. Sure. I guess it's important to note I tested out a local devnet along with an Ethernet roll up running on, I think it was 1gb of memory, 25 gigs of storage, and a single core cpu.
00:46:57.590 - 00:47:32.260, Speaker B: And this was in a virtual machine on digitalocean. But it was able to do that and run the whole entire local DA network and then also run the roll up on top of it. So it came with lower resources, but just more of a recommendation than anything. So the first thing we're going to do here, we're going to set up the actual chain before we go into the smart contract. And please let me know if I should zoom in a little bit. Okay? Yeah. Cool.
00:47:32.260 - 00:48:05.020, Speaker B: So the first thing that we're going to do is clone the repository. I've already done that. I'm on relatively slow Wifi right now, and we're going to install the binary or the daemon that is going to be running that chain. So you can think of this as the software that is the node. And I've actually already installed it. So I'm just going to verify that I have that there. We're going to get the nice Cli menu that tells us everything that's going on.
00:48:05.020 - 00:48:55.302, Speaker B: And in order to initialize the chain, we have a fun switch to a new chat tab. Here we have this init script that's going to do all the work that we don't want to type in one by one. But basically what we're doing here is setting the chain id, and this is actually a chain id that's both compatible with Cosmos SDK, which is what celestia is built with, or the network the underlying network is built with. And this chain id 9000 is actually what's going to be used for the EVM side of things. I'm not going to go through every line of this. This is in the repository if you want to look deeper to know what's going on. But basically we're setting up the chain.
00:48:55.302 - 00:49:42.940, Speaker B: We're setting up the genesis file that starts the chain and then we're making sure we don't have any existing versions there. And what this is doing is just setting the foundation so that we can start the chain. We're going to be making, basically creating some tokens that are what we're going to use to send transactions on the chain similar to what we saw in the metamask wallet a little bit ago. Questions? No. Cool. So in this example we're going to run a local DA network. Just to get started.
00:49:42.940 - 00:50:48.710, Speaker B: I'm using Docker, which basically allows us to have that running in a container. So I don't have any conflicts with dependencies that are actually on my local machine. We're going to get this started. It should pull it from the GitHub container registry and it'll start up in a second. So we can see we have a celestia address there. And what we can do to verify that we're actually able to post blocks to this is checking the balance. Um, so we can see that we have, this is in uts, so we have around 99 million tokens on this node that we're going to be posting transactions to.
00:50:48.710 - 00:51:31.570, Speaker B: So what we need to do in order to get the roll up started is we select a random namespace id. So you can think of this as just a place that the data is going to be going on Celestia. And then we also want to know what block height this data availability layer is at. So this set of commands here is going to pull the namespace, create a random namespace id and pull the block height. So it's going to be around 71 right now. And since we're running this locally. That's going to be very quick.
00:51:31.570 - 00:52:10.190, Speaker B: And what we can do to start the actual ether mint roll up is drop this in. I have tutorials on all this as well that we'll link at the end of this so you can dive into the details on your own. And if you have questions, please reach out. So what we're doing here is we are starting the daemon. We are specifying that we're using roll kit and a DA layer that is Celestia. We're setting the base URL for Celestia as this network that's running here. We're setting a timeout and gas limit as well.
00:52:10.190 - 00:52:56.830, Speaker B: And then in order to post these blocks to Celestia, we're basically setting the fee. And that is in Utah. So the balance that we checked just a minute ago, that's what we're going to be spending to post these blocks to Celestia. The namespace id is also something that we just set and we have to specify the DA start height in order to start posting to the right place. So we're going to start that chain and now we can actually get into the fun part, which is the smart contract and the front end. So you can see that we have block height, one being committed to Celestia. We're going to actually wait a second to see that go through.
00:52:56.830 - 00:54:04.480, Speaker B: And we also see that we started at DA height of 146. So we can see that we submitted a block to the DA layer and we have that commit hash. That basically is the proof that that block was posted. So what we're going to want to do to deploy the contract is pull the private key that is running on that sequencer. And we're going to be using a cosmos SDK command to export that key and set it as a variable. And what this is going to allow us to do is use the tokens in the ethermint roll up and actually deploy a contract and pay the gas to deploy that contract. So, taking a step back, I have a wave portal contract that we're going to be using to allow people to waive or send to GM.
00:54:04.480 - 00:54:37.790, Speaker B: And if you've done projects, this is probably familiar for you. Basically, we are recording the address of the user who GM'd or waived. We're setting the message that they sent. And then we're also going to keep a timestamp of that so that we can see when you GM'd. And what we're doing is we're storing that in an array and then mapping that. And also we're recording how many times someone has waived. So this is going to basically prevent people from spamming the wall.
00:54:37.790 - 00:55:23.230, Speaker B: But yeah, we're going to go ahead and deploy this. And to do that, we're going to be using foundry. Foundry is similar to hard hat if you've used hard hat. And I honestly just like it. So right now we are running this command in the directory that this contract lives in and we're deploying it to port 85 45, which is the RPC for this ethermint EVM chain. And we're using the private key that we set already and we're not in the right place.
00:55:23.840 - 00:55:26.120, Speaker A: Could not canonicalize the target path.
00:55:26.200 - 00:55:27.230, Speaker B: Yeah, I know.
00:55:28.000 - 00:55:35.410, Speaker A: Yeah, that's how I feel every day. Well, we're in front end.
00:55:38.980 - 00:56:15.608, Speaker B: We're supposed to be in the contracts directory. This is one of the situations where it worked on my machine. All right, so we're in the right directory now we're going to run this command to run the deployment script that's going to broadcast the contract to the EVM network. And this time we're going to see a receipt. Here we go. In a few seconds that this contract was compiled, we can see that we have chain id 9000. We can see the gas.
00:56:15.608 - 00:57:05.404, Speaker B: We can also see the amount of eth required to deploy this. And now we have a contract address that shows that was deployed. But what we want to do to make sure that that is actually working is send a GM to that in the CLI and then verify that we actually got that GM. So first I'm going to set the contract address to the contract that I just copied out of the output. And we're going to use foundry again to send a GM using the private key that deployed the contract. It could be any private key though, that holds tokens on this chain. And we're going to send a GM to the RPC URL, which is the same one.
00:57:05.404 - 00:57:52.584, Speaker B: That's where the EVM is running. So it's going to take a second to go through, but right now it's interacting with the contract. It's paying gas for that. And ultimately we're going to get a response that shows there is some hex data that was written to that contract and we're going to be able to pull the number of waves that have been sent to that by calling, get total waves on the contract. So we can see now, wrong one. We can see now that the transaction has gone through. We start from the top.
00:57:52.584 - 00:58:21.988, Speaker B: We have the block hash. We have the block number which looks like oven, which is accurate. We also have the total amount of gas used and the gas price. Then we have some logs of hex data. Not that important, but we also have a transaction hash. And now that block twelve has spun out, what we can do is actually query this contract and see how many total waves there are. Cool.
00:58:21.988 - 00:59:11.590, Speaker B: That worked. But what if I want to send another transaction? So if we remember in the contract, I set it up so that you can't GM more than once per day. So if I try to do that again, it's going to tell me that this address is already waived. I think this is something that just highlights the beauty of smart contracts where we're able to turn things into code that might not normally be that way. I know we're coming up on time here so I don't want to go too far, but I think the next thing I was going to do is deploy that to an EVM roll up that's running out in the cloud and the one that's actually running the chain on the website. So just want to get a temperature check there?
00:59:12.040 - 00:59:14.324, Speaker A: Yes, I would love to see you do that.
00:59:14.362 - 00:59:14.950, Speaker B: Cool.
00:59:16.360 - 00:59:24.680, Speaker A: Some of those pieces I don't understand. Yeah, the secret of the streaming is that even if no one comes, I get to learn a bunch of stuff.
00:59:24.830 - 00:59:46.944, Speaker B: Cool. All right. Yeah, we're hanging out. So we have this chain running on our computer, but we're kind of done with it. I think I'm ready to push something to a live network. And first I'm going to go ahead and stop the docker container that's running that and not open steam. Okay.
00:59:46.944 - 01:00:19.720, Speaker B: And I'm going to use Docker stop to do that. Take a second. But I'm also going to go ahead and stop the Ethernet chain up there. We can actually see as I stopped the Celestia data availability client, we see that output in the Ethernet side of things. So yeah, we're good to go. I'm going to actually kill this window and we're going to play around over here. So I'm using cloud VM.
01:00:19.720 - 01:00:41.984, Speaker B: This is a virtual machine that's running Linux and I'm using digitalocean. I think if you're getting started with cloud infrastructure that's a pretty safe way to go if you don't need things that are too more.
01:00:42.182 - 01:00:47.830, Speaker A: Does it have a better developer experience than something like an Amazon or Google version of the same?
01:00:48.440 - 01:01:47.990, Speaker B: I mean personally I think so, but I have not actually played around too much with either AWS or GCP. But I know in terms of the learning curve it was a lot, I guess less steep than what I've experienced with playing around with AWS when I was learning for the certification. Yeah. So I think if you're just getting started with a like, that's probably the way to go. And really just if you want to be able to start something up and not actually manage your own server at home, I think this is a good way to go. So what we have here is, well, right now we're logged into this box and using something called TMux, which basically allows me to have terminal instances persist even if I log out of the VM. So we're going to see a bunch of more blocks like spinning through this one, but I'll explain a little bit about what's going on.
01:01:47.990 - 01:02:29.524, Speaker B: So at the top here we have a celestia da lite node running, and it is running on the mocha testnet. So the mocha testnet is our first testnet and it's live. This node is running. The node is also funded, so it has testnet tokens which allows you to submit transactions to the DA network through the light node. On the bottom we have the ether mint chain running. I've had this one going for a while now. So it is at block height 39,000 and some change.
01:02:29.524 - 01:03:27.656, Speaker B: Yeah, 39,300. And we can see that we're posting blocks to Celestia and that's basically the stack there. These two nodes are running an EVM network and we're going to be posting to that over here. Going to go ahead and just check the balance on the light node. So I have around 170 TIA. And what that does is it allows me to post data to Celestia. So we're going to do is actually set the private key again, which that was the other window I had open a second.
01:03:27.656 - 01:03:44.200, Speaker B: It stopped my share for like. Yeah, here, I'll take it down 10 seconds. Yeah, I took it off. It's a burner, but yeah, it's a best practice.
01:03:45.340 - 01:03:46.328, Speaker A: You just let me know when you.
01:03:46.334 - 01:03:48.970, Speaker B: Want me to put it back. Cool, thank you.
01:03:50.780 - 01:03:53.450, Speaker A: Meantime, in the meantime, you all can queue up your questions.
01:03:56.080 - 01:04:02.108, Speaker B: 1 second. All right, cool. Ready to go over here.
01:04:02.194 - 01:04:04.940, Speaker A: I'm going to bring it back up. Boom.
01:04:05.680 - 01:04:44.360, Speaker B: Cool. So we're actually still on my local machine. We're going to be using the same contract as before. And what we're going to do here is deploy the same contract, but this time we're going to deploy it to this network that's running out in the cloud. So what I'm able to do is use the same command as before, but I've swapped out the RPC URL to be the IP address of the virtual machine that I have running out there. So if all goes according to plan, this should work. We've compiled the contract.
01:04:44.360 - 01:05:35.900, Speaker B: It's actually one that I've compiled here before we can see the logs that I am a smart contract shout out Farza from build space. This is where that contract is from. And we can see that it's being deployed to chain id 9000, which is the same chain id that's running over here and we're still sending that transaction. It's going to take a little bit of time to confirm. I guess one of the misconceptions with roll ups, at least the way they're built right now, is that they make things faster. It's not always true and we're playing around with ways to make the user experience better on that front. But at the end of the day we do have to make sure that we avoid malicious actors in the network who might produce fraud.
01:05:35.900 - 01:06:43.856, Speaker B: So we've got that contract deployed. We have a contract address that we can call as a proof of concept. I'm going to go ahead and set that contract address here. We're going to actually just call it from the CLI right now and we're going to send a GM the same way that we did last time. So again, not necessarily super fast yet, but this is calling the contract that's living on the ethermint chain here that's posting data to one of our celestia testnets. And in the meantime, while we're waiting on that, I'm going to go ahead and close out of these contract things and actually swap the contract address out. So what I'm doing here on my front end is changing the contract address.
01:06:43.856 - 01:07:38.384, Speaker B: And at the same time what you always want to remember to do is to swap out the ABI and the ABI is the application binary interface. And basically what that does is it allows you to actually communicate with the smart contract on the front end and all the functions on the contract that are there. It basically just helps the front end communicate with the smart contract. Maybe not in the best of fashion, they swapped it out, but it's going to work. I don't know if copy pasting is the right way, but we have a new contract address in here. So what I want to do is actually, I want to change into my front end directory first because I have everything in the same repository. In the meantime we're actually going to check back to see if that went through.
01:07:38.384 - 01:08:21.136, Speaker B: And it looks like it did. There we go. So at block number 39,000 on the DA layer, which that seems about right, looks good to me. And we can see the gas that was used, we can see the logs. And really the important thing, we have that transaction hash and we know that the transaction itself went through. So what we're going to do now, again, we're going to check the number of gms. I guess it might have made sense to check that before, but we can see that we have one and we've already copied the ABi on the front end.
01:08:21.136 - 01:08:47.956, Speaker B: So now what we can do is make sure that everything is installed in terms of dependencies on the front end. And these are all the modules that build up the front end. So chakra Ui is installing right now. Hopefully this doesn't take too long, but in the meantime, derek or anyone else, I guess if you have questions, I think shout out to Juan.
01:08:47.988 - 01:08:59.420, Speaker A: Geraldo. Welcome back, Juan. What's our tech stack for the front end? I'm hearing react, I'm hearing chakra Ui. Is that basically it? And then what are we using? Like ethers js?
01:09:00.320 - 01:09:36.408, Speaker B: Yeah, I'm using rainbow kit, I guess I do have ethers js. Yes, I have ethers running or ethers js imported as well. In terms of other dependencies. Yeah. Wagme is being used by rainbow kit. And at the core of it, I would like to think it's a relatively not too clunky front end. I don't have much going on here.
01:09:36.408 - 01:09:37.912, Speaker B: I have some buttons at the top.
01:09:37.966 - 01:09:41.460, Speaker A: In terms of design or in terms of the complexity of the stack.
01:09:41.620 - 01:09:43.556, Speaker B: In terms of complexity of the stack.
01:09:43.588 - 01:09:44.940, Speaker A: Yeah, we got react.
01:09:45.280 - 01:10:08.444, Speaker B: I love building with. It's quick, it works, but in terms of styling, I'm using chakra ui, I'm using rainbow kit. But the main things that are allowing us to talk to the smart contract and interact with the smart contract are ethers, Wagme and rainbow kit.
01:10:08.572 - 01:10:12.544, Speaker A: Which would be true regardless of the chain or the user's wallet.
01:10:12.592 - 01:11:00.804, Speaker B: Basically, yes. So what we're going to do here now that everything is installed is start that local instance of this website or front end. And this looks the same as the one online. But the only difference here is going to be that the contract is different. So we're not going to see all the gms that we saw last time. But what we can see is that the GM that we posted from the command line using foundry did go through and we can see that on the wall. Guess so.
01:11:00.842 - 01:11:12.820, Speaker A: Even though the front end is running on your local machine. Can you explain how? Because it sounds like you're reading from the ether mint.
01:11:13.400 - 01:11:16.676, Speaker B: Correct. Okay. Yeah, that's not on my machine.
01:11:16.868 - 01:11:20.504, Speaker A: Right. Spell it out how these are connected. Yeah.
01:11:20.542 - 01:11:57.860, Speaker B: So basically I think I need to take a step back. So right now this local site is the RPC. So the endpoint that we're using to reach ethermint is live. It's actually out there in the wild. And this local site is communicating with that ethermint chain, the EVM chain, and it has the contract Abi. So it's able to read from that contract. It's also able to create posts on that contract.
01:11:57.860 - 01:12:25.964, Speaker B: And actually what we can do in the meantime is just to show that this can also go live, is commit this to the main branch and it will rebuild on ipfs. And in a few minutes we'll come back here and reload that. But basically, did that explain it well enough?
01:12:26.002 - 01:12:30.888, Speaker A: Does that have. Wait, sorry, just as a small question, does that have continuous deployment to ipfs?
01:12:31.064 - 01:13:04.284, Speaker B: Yes. That's cool. I guess that was the other fun part of this that I wanted to get into if we had time. So this site is deployed on fleek, which is something that protocol labs is building. And basically fleek is something similar to Versaille where you can host websites. But the fun part about it is that it's posted on the web three version of Google Drive ipfs. There's also other services out there.
01:13:04.284 - 01:13:41.944, Speaker B: But fleek puts this all together really. So we're actually able to use a domain name server. So I'm using GM portal Xyz. So we can reach it at that address. We can also reach it. We're going to see this GM portal since it's actually a different URL than what I was on before. We're going to connect to the chain again and it is not updated yet.
01:13:41.944 - 01:14:18.140, Speaker B: We'll check back in a minute. But before we do that, I think it's important to poke around a little bit on here. So I have this deployed on fleek. We can see that there is a deploy that was deployed in a minute and 33 seconds just a few minutes ago. And we also can. No, can't scroll. We can see that this site is deployed on a few places.
01:14:18.140 - 01:15:01.410, Speaker B: So let's say you don't have a DNS or an ENS, you can have it deployed for free. And this is using Fleek's domain name servers. We can also deploy it to a regular domain, but the fun part is deploying it to ens. So what we can do here is not get there, it's loading. But the easier way to get to that using Ens is to use Eth limo. And if you want to learn more about that and read about it on the site. Wow, I almost don't want to wait on.
01:15:01.940 - 01:15:05.680, Speaker A: I mean, I guess my only question is why did you use GitHub instead of radical?
01:15:06.980 - 01:15:10.756, Speaker B: Good question. No. The next thing that we'll add to.
01:15:10.778 - 01:15:48.736, Speaker A: This, for those who don't get the joke, we're in the context of pushing more and more of the pieces of web app development into decentralized versions of web two services. So the node, for example, is running on digitalocean, which is essentially like an Amazon web server type of virtual machine. You can rent out some of the cloud and have it do computation for what. What is ipfs doing? The data availability, the front end, it serves up the code for the front end.
01:15:48.838 - 01:16:49.588, Speaker B: So it's serving the front end. We're going to actually go because we're going to go and build market. It's going to want me to use that RPC. If we go here on s, we can actually see that we have a pointer on ipns that basically connects this really long, definitely not human readable hash into something that is human readable, really the same way that we don't use IP addresses to go to Twitter. So I guess I have this set up to use Cloudflare, but the easier way to reach that is to use Eth limo. And actually, if you're using something like brave, you're going to be able to see that little ipfs link in the top that'll take you directly to that file. Wow.
01:16:49.588 - 01:16:55.604, Speaker B: However, it's typically kind of slow, and I'm on hotel wifi right now.
01:16:55.802 - 01:17:02.950, Speaker A: Sure. And welcome. Decentralized technologies, they're famously not fast.
01:17:03.480 - 01:17:53.860, Speaker B: Yeah. So on that note, I guess the part that wasn't too slow is we have this GM portal and we've swapped the contract out. We're on a live website. And I'm going to go ahead and since I've already posted from this account, I'm going to go ahead and disconnect from it and switch to another one. And what we're going to do here is actually interact with the contract using metamask instead of using the CLI. And I'll make it less confusing by getting rid of the other. All right, so Eth Denver is coming up.
01:17:53.860 - 01:18:18.430, Speaker B: We're going to GM to Eth Denver because we're too excited to wait. And we're going to see that we're going to spend about a really small amount of gas on this. And apparently I've already gm today, so that's not good. All these.
01:18:20.240 - 01:18:22.290, Speaker A: You'Re just gming everywhere you go.
01:18:25.780 - 01:18:32.628, Speaker B: I don't want to get too stuck in the weeds here, but it would be nice to. Oh no, not a good day for that.
01:18:32.794 - 01:18:34.310, Speaker A: Maybe it's not worth it.
01:18:34.920 - 01:18:43.812, Speaker B: We'll see. So that was the demo. Try for one though.
01:18:43.866 - 01:19:47.196, Speaker A: But as you do, I'm going to talk through the stack. Because in a conversation around modular blockchains, the part that's conceptually new and challenging for me at least, is understanding in the old paradigm what service does each piece of you've got serving me a front end so I can see it on my computer. You've got interacting with my wallet. You've got sending a transaction from my wallet to some kind of node, whether it's an RPC that's a third party service, or whether it's a node I'm running on my own machine, or whether it's a node I'm running on some virtual machine somewhere else. And then you've got the actual execution, and then the storage and data availability once that's all done, and then reading that from the blockchain and then bringing it back to the front end to show that there's been some update. That's a lot of pieces. One or two to compare this to how things usually go.
01:19:47.196 - 01:20:51.952, Speaker A: Let's my check my own understanding. If I were a day one build space dev, I would probably learn how to make a front end with react that uses something like ethers, js or Rainbow kit to talk to the wallet. If I had a metamask wallet, then metamask is under the hood talking to infura or some other RPC to send the transaction from my computer through that node over to the blockchain to queue it up as something that's trying to get in the next block. And this is a conversation between many nodes, is the whole point of the decentralized network is lots of nodes working together to arrive at some consensus about what happens in the next block. And then they decide together what happens. And then that data is stored in the block, which we then use metamask again back to our front end, back to our machine. We're like querying and saying, hey, there we go.
01:20:51.952 - 01:21:28.856, Speaker A: We're saying, hey, what happened? Did my uniswap swap go through? We look at the blockchain, probably through some third party thing, and we say, yes, that data availability is there. Here's the new thing. Okay, great. And then we show it on our front end. So we've got a bunch of pieces there. In this version, we have a couple of things that are the same, same wallet, for example, still metamask and the front end still written in react. But in this example, this was optional.
01:21:28.856 - 01:21:44.848, Speaker A: It has nothing to do with Celestia was hosted on ipfs, correct. Which was pointing to a GitHub repo that you'd put. And then I found it interesting. This is like a subtlety that I think is one of those, there's a.
01:21:44.854 - 01:21:46.576, Speaker B: Lot of moving parts, one of the.
01:21:46.598 - 01:22:32.204, Speaker A: Gotchas, similar to one of the more important gotchas, which is like nothing is ever in your wallet. That is not how wallets work. We can get into that later. But in a similar way, when you go to a website such as Uniswap or GM portal, it's not that the website talks to the blockchain. The website is sort of preparing information to go through your wallet to the blockchain, or more accurately from your wallet to an RPC node to the blockchain. And so that's why I was surprised you could run it from localhost, but go talk to an actual node that's running on Testnet. I was like, oh, that's right, the front end doesn't actually do the work here.
01:22:32.204 - 01:23:02.250, Speaker A: It's the wallet that's doing the work as it talks to the node. So in that sense, I wanted to zoom in, because that's where it feels like we're at the new piece. We queue up a transaction in the wallet from the GM portal. Sign a message to send your GM. Okay, I have my metamask. I click sign and then I want to slow down because this is the part I'm not sure I get that gets sent where it would normally go, straight to infura or something, or like to pocket or quicknote or whatever. Now it's going to.
01:23:05.820 - 01:23:10.648, Speaker B: That evm roll up and let's say that both of us posted.
01:23:10.744 - 01:23:13.320, Speaker A: How do I set that up in my metamask? Is that like a unique.
01:23:13.400 - 01:23:15.752, Speaker B: Yeah, so it is a unique network.
01:23:15.816 - 01:23:25.100, Speaker A: Okay, that makes sense. And so I'm putting in the RPC, in this case, the exact URL of the instance that you've deployed on digitalocean.
01:23:25.260 - 01:23:42.200, Speaker B: Yeah, in this case, actually, I have it set up. So that rainbow kit is going to suggest that you add a chain. It's then going to prompt you in your metamask wallet to add that chain and then switch to that chain. So if you were to go to the chat.
01:23:45.500 - 01:23:47.400, Speaker A: Right here to try it out yourself.
01:23:47.550 - 01:24:06.270, Speaker B: There we go. Nice. Sure enough, you can connect to that chain. I think what I could do is leave a private key that has some tokens in it. That's a burner if anyone wants to go ahead and try that out. Interesting.
01:24:06.880 - 01:24:08.290, Speaker A: And now I can see that.
01:24:08.660 - 01:24:16.640, Speaker B: Or you can dm me and I'll send you tokens. I guess that's probably the easier way. I don't want to encourage bad security practice.
01:24:17.220 - 01:24:19.872, Speaker A: No pasting privacy in chat.
01:24:19.936 - 01:24:25.076, Speaker B: Yeah, that worked good. It's like an Easter egg or something.
01:24:25.178 - 01:25:03.090, Speaker A: So what have we, what have we gained? Like, what was the main benefit of structuring? Like, I'm a dev, this is EVM compatible. What have I gained? Compared to throwing this on Eth mainnet, an EVM compatible roll up that's already on ETh main net, such as ZK sync or some other l one that has enough decentralization to fit my use case, such as gnosis chain. Why would I do things this way?
01:25:03.540 - 01:26:11.892, Speaker B: So to be transparent, this example is not necessarily something that you'd be able to take and go start a Dex roll up or anything like that. You'd still need to set up a network of full nodes and sequencer and light nodes that actually make that roll up network work. But to zoom out a little bit, the way that this could be used by someone, let's say you want to build a gaming roll up, what you could do is set up your own chain on top of Celestia that uses the EVM. So you're able to use familiar tooling, like Metamask and Rainbow kit and all that fun stuff, but really only focus on that game in the execution layer. So instead of having a network that has a lot of other smart contracts on it, you could make this your own special roll up. And basically that allows you to reduce the amount of resources that you're sharing with other people. Not that sharing is bad, but if we're all trying to use the same.
01:26:11.946 - 01:26:19.464, Speaker A: Layer, it basically, I don't want sunflower land using up all the stuff on Polygon and ruining if I have my.
01:26:19.502 - 01:26:30.060, Speaker B: Josh game and Derek, you have your game, we're going to want to split those up, probably so that we don't use the same resources and so that I don't hog your resources and you don't hog mine.
01:26:32.160 - 01:26:35.260, Speaker A: Specifically the full nodes resources.
01:26:36.340 - 01:27:33.890, Speaker B: Yeah, let's say that I'm not going to actually use real numbers, but basically, if we're both trying to use the same chain for, let's say, two different games. And this game has a really big high volume in transactions. It's going to cause one of our chains to be a lot slower. It also makes the transaction costs go up and ultimately just throughput slows down. So if we're both trying to run a game on the same roll up or something like that, that's going to slow things down. So the real benefit of this is that you can have your own sovereign community where you can focus on the core functions of whatever you're building and really only do.
01:27:36.020 - 01:28:44.970, Speaker A: I'm. I know you've drawn some analogies to Cosmos, for example, I'm actually comparing it to my understanding of Avalanche, which I learned a little bit recently, and how they play a game where they can also have different virtual machines. You could have move, you could have fuel, you could have EVM, whatever you want. And then the validators are eligible for certain criteria, like whether or not they're KYC, for example, or whether or not they're in a certain geographical area, or disclose that at all. And so you can set your requirements of what you need out of validators, and then the validators sort of this might be not exactly how it works, will take turns validating different things that they're eligible for. And in this way, a variety of virtual machines are maintained by this overlapping mesh of validators. And it's a little messier, whereas your visuals at least seem to, on the slides, seem to imply more so that there was like a more monolithic security layer where sort of every validator, every full node is in lockstep with each other.
01:28:47.740 - 01:29:45.660, Speaker B: I guess the important thing there is in both the avalanche case and Cosmos case, and I just want to preface this with, this might not be 100% accurate, but you're going to have to actually spin up an entire validator set. In the cosmos world, this basically is around 100 to 150 validators that you need to coordinate. That requires a massive amount of social coordination, but also a large amount of technical coordination to do. And then the real thing there is that these are isolated so that you don't have the same security between each of those chains. I think I'll probably not go back to the slides right now, but you basically have all of these different blockchains that are isolated, whereas if you build on top of a common shared security layer, you're able to all be in the same network.
01:29:46.320 - 01:30:30.536, Speaker A: Yeah, that's the trade off. The more I learn about scaling, which is sort of one of the eras we're in, there's enough demand. Now let's talk about solving the scalability trilemma. I can see this as a solution. Like, let's make it possible for these execution environments to be separate so that they don't interfere with each other. And yet when the roll ups settle their data, that's on a shared layer. So that when you do a swap on uniswap, even if it's its own chain, the results at the end of the day are stored here, so that other dapps have access to that data and can use it.
01:30:30.536 - 01:30:45.160, Speaker A: So from the user experience, it's all available. It might as well all be one l one. Even though there's a pretty different architecture over on the execution side of how we got to the place of the shared data across the daps.
01:30:45.320 - 01:31:06.390, Speaker B: Yeah, it's definitely pretty complicated. I think it's taken me a while to really wrap my head around this, so I want to add that if anyone does have questions, please reach out. I think our docs are a good place to start, both on the Celestia side and the roll kit side.
01:31:08.600 - 01:31:09.524, Speaker A: Go ahead.
01:31:09.722 - 01:31:14.216, Speaker B: Yeah, I was going to just pull my slides up again because I have some QR codes there. That's good.
01:31:14.238 - 01:31:18.650, Speaker A: If you can share your whole screen, that'll help prepare my next joke, too.
01:31:19.340 - 01:31:21.080, Speaker B: Bam. Okay.
01:31:21.150 - 01:31:27.210, Speaker A: Hey, I'm blocking the QR code a little bit and we're fine. Yeah, I just want to.
01:31:30.000 - 01:32:16.750, Speaker B: Went through that. I want to actually add that the reason hit that contract on Metamask is I think I need to actually change the contract and swap the ABI out again. But not really 100% positive there. But if you try it from another address, it will definitely work. I see. So the resources that I'd recommend you checking out. If you want to learn more, we have a learn modular section on our website on Celestia orglearn that will guide you through from a higher level and a little bit less technical than we just went through, really like what this whole modular blockchain paradigm looks like.
01:32:16.750 - 01:33:37.056, Speaker B: But then if you want to go deeper, we have a build modular section on the Celestia docs that will walk you through the different ways that you can deploy roll ups on Celestia and the different types of roll ups that you can actually build. I guess this is a little bit of like an alpha leak. We haven't really announced it publicly yet, but we have been working on something called roll kit, which is basically the SDK or the framework that allows us to build a roll up that is able to communicate with a data availability layer, whether it's Celestia or something else. So yeah, if you want to check out more about rollkit, some of the tutorials on Celestia will be moving there soon and we're really trying to build this as an open source framework for anyone to build roll ups and embrace the new modular paradigm. I think we've already done a lot of Q A, so unless anyone has any pressing questions, we're going to skip to that. I'm waiting for whatever you were going to ask, but don't worry. If you want to contact me, please reach out on Twitter or telegram.
01:33:37.056 - 01:34:03.470, Speaker B: Either one works for me. And if you want to, I guess get more involved in the celestia ecosystem, definitely join our discord. Ask questions, play around with the tutorials. If you run into bugs, please write a ticket. That's how we make them better. If you have any suggestions for things to add, that's always welcome as well. Yeah, thank you very much.
01:34:06.960 - 01:34:32.960, Speaker A: As steps for self as a teacher wait, leave your screen. As a teacher, I always thought more lectures should end in standing ovations. Criminally few do, despite how good they are. Cody on YouTube says thank you folks. Drop some claps. Drop some gratitude for Josh. This has been a tour de force and we've covered a lot of ground and he's still available as a resource to you as you go through the docs.
01:34:32.960 - 01:34:36.312, Speaker A: Alana says, standing ovations on her side as well.
01:34:36.446 - 01:34:40.810, Speaker B: Thank you, Alana, for the questions as well. And if you have any more, please reach out.
01:34:41.420 - 01:35:21.380, Speaker A: Thank you emperor 22 hours for joining us as well. So I just want to point out that it's nice to get to know you. You said a moment ago that this is some pretty dense stuff. I forget your exact wording, but we're digging into some pretty complex architecture like blockchain was already hard. And to understand what celestia is trying to do to address some of the problems blockchains are currently facing requires a fairly intermediate level understanding of where we are right now in the first place, much less to understand how they go about implementing those solutions. Oh, even more gratitude flowing in from Deadcoin and grocer. Hi grocery.
01:35:21.380 - 01:35:54.320, Speaker A: But I just want to say it's nice to see you model you, Josh, as somebody who is clearly excited about learning and sharing what you learn and education as a core value of yours. What I wanted to tease you about is that it's clear you like being on the cutting edge of stuff you don't like sitting on your hands on your laurels. You like learning. You're using arc browser, you're using warp terminal, you're using celestia. There was another one. Yeah. You're using ipfs to host your front ends.
01:35:54.320 - 01:36:36.344, Speaker A: There's something about you that's just like, shiny object syndrome, but in the most beautiful way of like, I want to learn the cool thing, I want to try it, and then if it's good, I'm going to use it, and then I want to share. You're the quintessential early adopter, so I appreciate you being out here in the weeds with your machete, going through the jungle, scratched up, and then coming back and being like, I wrote a few docs come this way trying to show people how to, right? You're just like, completely covered in grime in your safari outfit. Like, you can deploy your own roll up. It's easier than it sounds. It's pretty hard. But you're like, no, trust me, just copy paste. I wrote the doc.
01:36:36.344 - 01:37:47.616, Speaker A: So I just appreciate how hard your work should work. Right? It should work. It didn't, but you could go open a ticket. It's nice. I appreciate your journey has been from mechanical engineering to restaurants to wait, I should check out this software stuff. What are websites? And you've come all the way here, and I'm assuming you're somewhat early in your career, like, if you're lucky enough to live a long life, you've been through a lot of stuff, even at your tender young age of, I want to say, late 20s, early thirty s. And that is why I wanted to celebrate you as a model of someone that is just curious and trying stuff and bouncing around and seeing what's fun and cool and just letting your own curiosity lead you into completely different industries, completely different skill sets, essentially scaling, at times, nearly vertical learning curves where you're like, why isn't it working? I installed a new browser, a new terminal to deploy on a new blockchain infrastructure using a new SDK.
01:37:47.616 - 01:38:02.090, Speaker A: Why is it working? No shit. It's not working. All of these things are new and haven't been tested with each other. If you want something that works, go run like, chrome and just do an aws and call it a day. But no, you're out here wanting to try new stuff because it's cool.
01:38:02.460 - 01:38:11.230, Speaker B: I do like to play around with things, so I guess I encourage you to do the same. If you're curious, you might end up in a pretty fun place.
01:38:11.760 - 01:38:17.676, Speaker A: Yeah. So one last time, for folks that are curious, could you go back a slide or two. The QR codes.
01:38:17.708 - 01:38:18.290, Speaker B: One.
01:38:19.140 - 01:38:55.512, Speaker A: Yeah, there we go. I encourage folks to at least open these, bookmark them, whatever you want to do. Just have them as resources. I hoard bookmarks even though I won't be able to consume all the tasty information out there, because I share that curiosity of yours. I love learning, and even if I never deploy my own virtual machine on Celestia, it's exciting to know that this is one of the parts of our industry that smart people are figuring out and then nice people are doing their best to communicate. It takes a whole team. And so I appreciate you for being here.
01:38:55.512 - 01:39:13.456, Speaker A: I appreciate folks like Rockroove and Alana, the web three girl. Oh, Franz Dehan on YouTube says, can't scan the webcams in the way we did it. We broke the QR code. It was nice. So go back. I'll move our cameras. Franz, thank you for saying that.
01:39:13.456 - 01:39:14.930, Speaker A: I'm going to move our cameras now.
01:39:17.140 - 01:39:21.536, Speaker B: Maybe 20% that you can cover on these, but cool.
01:39:21.638 - 01:39:23.748, Speaker A: Yeah. Anyway, thank you so much.
01:39:23.914 - 01:39:33.764, Speaker B: Thank you so much, Derek. And thank you for the kind words. If you will be at Eth Denver, I look forward to meeting you and then anyone who attended, thanks for coming.
01:39:33.962 - 01:39:41.688, Speaker A: Yeah, likewise. Thanks for being here. Thank you, Alana. Thank you, Franz. Thank you, cockroave. Thank you, Deadcoin. Thank you, Emperor 22 R.
01:39:41.688 - 01:40:08.280, Speaker A: Thank you, Cody. Thank you, Juan. Geraldo. If you want to go fast, go alone and use battle tested web two services. But if you want to go far, go together and use things like IPFs and ENs and radical and warp and arc and Celestia and ask for help in the right discords along the way. Thank you for joining us today, Josh. It's been an absolute pleasure.
01:40:08.440 - 01:40:09.904, Speaker B: Thank you. I've had a blast.
01:40:10.032 - 01:40:15.540, Speaker A: All right. Please join me in sending everyone off in the traditional way by saying bye.
