00:00:19.770 - 00:00:42.274, Speaker A: So I don't know if some new people came in, but if you're looking for the website, it's class chainshot.com.com. And you could jump in right away. We're still on the first stage. Class chainshot.com. The audio is good. It's this one here. And then Wifi password.
00:00:42.274 - 00:00:45.240, Speaker A: You see Denver 2019 exclamation mark.
00:00:51.360 - 00:00:53.140, Speaker B: It whenever you're ready.
00:00:53.290 - 00:00:54.710, Speaker A: Audience good. Okay.
00:02:19.060 - 00:02:19.810, Speaker B: It.
00:02:28.500 - 00:02:33.636, Speaker A: Yeah, good question. So I'll go over it once I get in.
00:02:33.658 - 00:02:45.320, Speaker B: There's.
00:02:49.900 - 00:03:30.632, Speaker A: All right, so yeah, to go over this first stage, guys, if you want to, you can jump into my workspace. So I just started adding it in here so you can go to the participants list and find silver zebra there. And that's going to be me. And if you view my workspace, I'm in the needs help column and you can copy kind of what I have out here for this first stage. So essentially what we need to do here is the constructor is basically a special function that gets run when you deploy this contract out to the blockchain. So this constructor is going to be called only that first time when you deploy this contract. So it's usually a place where we go to set up something.
00:03:30.632 - 00:04:17.076, Speaker A: So if we were going to create a buildathon smart contract out on the blockchain, we might want to have this max participants where we say at some point we're going to cut off how many participants that we can accept into our buildathon. And so that's what this constructor is kind of doing right here. One of the questions was a great question is why am I using an underscore here? This is common convention. So common convention for if you are just trying to set a variable. So this is called a member variable inside of your contract here. So if you're going to be setting something just to that value, you want to use this underscore so that you don't shadow a member variable that you have in here. If I were to call it the same thing, then it wouldn't know the difference between this one and that one.
00:04:17.076 - 00:04:53.276, Speaker A: So the main thing is here, this one is pointing to my member variable, my storage, what's actually being stored on the contract. And this one is referring to the one that we're passing into our constructor. If you take a look into the test cases in here, the test integers js, you can actually see that what we're doing. And so this is a great way to test your smart contracts as you guys are moving along is what we're actually doing is in Javascript. We're setting up a contract. This is using truffle. So if you guys get familiar and you might see it in other tutorials as well, truffle is a quick way to kind of spin up a set of test cases for your smart contract.
00:04:53.276 - 00:05:24.604, Speaker A: And essentially what we're doing in here is we're actually deploying a buildathon contract, a new instance of the buildathon with a set number of max participants. So I'm tossing in 200 here. That 200 is going to get stored on our smart contract. And then what I'm expecting is us to be able to call out to the contract, wherever it lives on the blockchain and say, hey, what's the max participants that we can actually accept? And we're testing to make sure that that matches what we passed in. So if I go ahead and run.
00:05:24.642 - 00:05:36.150, Speaker B: These test cases, here's.
00:05:41.550 - 00:06:24.148, Speaker A: Sorry if that messed you up, guys. So that's a classic mistake for me, at least. You're going to want to put your unsigned integer in front of your public. So public is going to be, this is like I was saying before, it's a visibility setter that's going to allow you to actually create that max participants getter function that we're going to be able to access from the outside. I had these reversed, so instead of public un, it should be un public. So if I go ahead and run that again. Yikes.
00:06:24.148 - 00:06:50.940, Speaker A: Okay. I haven't seen that before. If you refresh, it's going to hold all your stuff, so you can try doing that. Yeah, unfortunately, I don't know if that's going to help you. Yeah, sorry, I've never seen that before. Apologize. Okay, let's see what happened here.
00:06:50.940 - 00:07:22.334, Speaker A: Okay, so in the newer versions of solidity, it's required that you put a visibility setter on your functions as well. So one other mistake I made here is that you need to put a public on your constructor so that it's actually explicitly defined with the previous solidity versions. You didn't have to do that. And so this is kind of like the debugging process you're going to see as you kind of run through your test and make sure that you have it set up correctly. Cool. Sweet. All right, so that passed.
00:07:22.334 - 00:07:55.492, Speaker A: So if you guys want to jump into my workspace, silver zebra, I have up on here, it's going to be inside. Okay, cool. A lot of people have it done before I did. So if you jump into here, you can look at anybody who's finished it and be able to copy their code out so that you can pass the first stage and we can move on to stage two. I'll give you guys just a minute to be able to do that. Cool. So I'm going to push forward onto stage two.
00:07:55.492 - 00:08:32.108, Speaker A: I actually got to log in as admin. Cool. All right, so I'm going to push this forward onto stage two now. All right, so stage two what we're going to do for this one. So this one gets a little trickier. So essentially what we're going to want to do now is we're going to want to allow people to enter our buildathon. So essentially what we're going to do is we're going to create a function called enter, and that function is going to allow somebody to call into this function, call into the smart contract, and now join our buildathon.
00:08:32.108 - 00:09:13.250, Speaker A: So there's a special property when you're calling a function inside of a smart contract that's called message sender. That is going to be the address that's actually calling that function. So when you call this enter function, message sender is going to be that address. And we want to make sure that we store that address somewhere so that we know who's inside of our buildathon at that time. And then we're also going to create a number of participants that's going to allow us to define how many participants there are inside of the buildathon and be able to call that from the outside, inside of our Javascript test cases. I'll go ahead and get us a little bit started here. I relogged in, so I'm starting from scratch, but I'm going to hop into.
00:09:13.860 - 00:09:28.510, Speaker B: My old workspace and go from there's.
00:09:43.810 - 00:10:21.080, Speaker A: I'm always going to do that. The old versions didn't yell at you, now it does. Yeah, similar to our constructor, which is a special type of function when you want to name a new function on your contract. There's this function syntax that looks kind of similar to Javascript, if you're familiar. And we can kind of look in here inside of our details to see how to set up a new function. And we have this message sender here, which is going to be that thing that we're going to use to be able to look up who's actually calling our function. So function enter public.
00:10:21.080 - 00:10:39.832, Speaker A: So if you guys are familiar with this, this is a comment syntax. I'm just trying to start you off.
00:10:39.886 - 00:13:10.194, Speaker B: There's like, yeah, I mean, I could have, if you guys are sitting feel.
00:13:10.232 - 00:14:43.592, Speaker A: Free to just toss on that collaborate sign and I'll hop into your workspace and give you like a pointer, try to get you through it in about like 2 minutes. I'll put up the solution and move on. Okay, cool. So we had a couple people finish this one. This one was a little bit trickier. So if you look into the test cases here, what I have set up, essentially it's very similar to what we did in the first stage, is where we're creating a new buildathon contract and we're putting in our max participants. So it's 200.
00:14:43.592 - 00:15:28.820, Speaker A: And then what we're taking, we're taking this accounts, this is going to get passed in by truffle in your execution environment. These accounts are just addresses on the ethereum blockchain and I can loop over every single one. And what I'm doing is I'm going to send over a transaction trying to enter our buildathon. And then what I'm doing down here is I'm testing that the number of participants equals the number of people that enter the buildathon from our enter function. So essentially, really all you needed to do to pass the test cases for this one was actually add number of participants up so you don't have to put it in an array. But for the next stages you certainly will. You could have done either an array or you could have done a mapping.
00:15:28.820 - 00:16:06.772, Speaker A: There's two different syntaxes here. So one for a mapping, you can do an address to like a boolean and say who's entered. And so we can keep track of what this is essentially doing is it's like a key value store. So in this case, this would have a bunch of keys that would map to a value and the keys would be an address and the value would be a boolean. So true or false? While the address is some long hexadecimal address. So we can say entered message sender is equal to true. And that's kind of keeping track.
00:16:06.772 - 00:16:36.460, Speaker A: That's keeping track that this person who just message sender is the person who called enter, they are now entered into our buildathon. So if we kind of run that, we'll give it a second. You might have to. Yeah, that's probably what's going to come back for me right now. Oh, wow. Surprisingly you don't. Okay, good question.
00:16:36.460 - 00:17:20.452, Speaker A: So for a view, a view, you wouldn't actually be able to modify the storage. So for view, you don't actually modify. So if I'm doing public, what that's going to default is to a function that I can modify storage so there's different visibility. Setters view is definitely one of them that you want to put in there if you're just trying to look up something and those are actually, it's a big difference there. Something like this is always going to cost gas because you're modifying something in storage and it needs to be mined by a miner who's going to pick it up and make that change for you. And so it's going to cost some gas if you do something that's a view and you're just looking up values in your smart contract. Like one of these, like max participants and number of participants, all they're doing is they're using the call syntax.
00:17:20.452 - 00:17:49.556, Speaker A: So from Javascript and web3 you might be familiar with, you could call something like this, you could say a getter call. And this is gas list. This doesn't cost me anything, it's just a query that you send to an ethereum node and typically you do that for infura and it's totally free, you just get the number of accounts back. So it's a great question. Cool. Okay, so I'm going to push us forward onto the next stage and work on it. And I'm happy to help you guys out.
00:17:49.556 - 00:18:15.556, Speaker A: There's going to be somebody else coming in this room, so we could probably work on it on the side and happy to work through it. Hopefully this was helpful for you guys. And if you get to a point where you kind of tutorials, we actually have something now. So I'm going to push forward our stage first. We have something now where. So first of all, you can go to chainshot.com at any time and you could take those lessons like I was talking about in the beginning.
00:18:15.556 - 00:18:49.236, Speaker A: These are kind of take at your own pace and there's a couple of different project based tutorials and things that you can get started on there. Similarly, if you want to start your own tutorials, we have this new tool, it's called the Builder. So ww dot GitHub.com change builder. So if you go to GitHub.com chainshot, there's going to be pinned up there. We have this builder ide and what this is actually it's an ide that spins up from node package globally.
00:18:49.236 - 00:19:40.920, Speaker A: So if I open up an iterm, what we could do is all the content that's out on chainshot, you can actually fork this. So the tutorial that you guys were doing today, you can actually download. And so I'm going to go ahead and clone this repository to my local content. 1 minute left and I can hop in here. So I'm going to go into my local content folder, and I can run this chainshot builder, and the instructions for how to do that is out on the GitHub. So what this is going to do is it's going to create an ide for me where the lesson that we did today is the solidity buildathon. So if you guys were like, I don't know, that guy kind of had a whack tutorial, and you want to work on this and make it better, you can actually hop in here, and this is like the admin behind it, and you can host this as your own and run your own class.
00:19:40.920 - 00:19:53.350, Speaker A: So, yeah, that's kind of what we're piloting here. And hopefully you guys learned something new today and appreciate you coming out. You all right.
