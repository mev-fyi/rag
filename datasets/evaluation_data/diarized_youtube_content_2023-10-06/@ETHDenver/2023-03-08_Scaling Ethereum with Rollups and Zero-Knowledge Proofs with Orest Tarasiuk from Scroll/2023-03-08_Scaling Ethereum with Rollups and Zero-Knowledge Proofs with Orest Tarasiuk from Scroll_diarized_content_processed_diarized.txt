00:00:22.480 - 00:00:53.950, Speaker A: Hello. I think we need to restart the slides. Oh yeah, great. I allowed myself to post on Twitter about my colleague here. Thanks so much for bearing with us. I'm here to tell you a bit more about scroll and the Zke EvM. But first, before we jump to that, could I see a quick sign of hands? Who knows about scroll already? Who's heard about scroll before? Okay, good.
00:00:53.950 - 00:01:34.776, Speaker A: I adjusted the slides such that this makes sense. I'm here to talk about scaling Ethereum with roll ups and zero knowledge proofs. And so I hid the items that everyone understands, probably, and just left the ones that we probably need to talk about a bit more. So I'm wondering, given these keywords, scaling Ethereum roll ups and zero knowledge proofs, who is able to define each of those three keywords? Hand up three people. Four. Okay, yeah, that is a problem. It sounds scary.
00:01:34.776 - 00:02:15.480, Speaker A: Talking about roll ups, talking about scalability, talking about all of these keywords is kind of off putting to many. And so I'm here to do a small piece to changing this. And I hope this will be a bit help, a bit of help for. For everyone. Now, before we jump into the details, I wanted to give you a quick outline of today's talk. We have 30 minutes. We'll start with possibilities of entering and understanding the world of crypto, especially for people who might not have been around for 20 years and who don't work with roll ups on a daily basis.
00:02:15.480 - 00:02:56.420, Speaker A: Second, we'll talk about understanding Ethereum's choice in the so called blockchain trailer. And we also hear about why it's a bit of a stretch to call this a blockchain trailer. Next we'll talk about solutions to this scalability issue that Ethereum is facing. And here we will jump into a set of abstraction layers that we will be delving deeper into one by one, just focusing on one path in this tree. So we'll start with l two s. We'll focus on roll ups. We'll then focus on ZK roll ups, and finally talk about the Zke EvM.
00:02:56.420 - 00:03:41.940, Speaker A: And lastly, we'll hear very briefly about where scroll positions itself in this whole scheme. And also, I'm told we have some bounties out there, I think $16,000. So we'll see some details about that as well. Now, I'd like to start with a bit of a personal story and something that I'm trying to use to make crypto a bit less scary. And that is myself orest. I only joined crypto as a developer quite recently. Some one and a half years ago, with a background in traditional computer science and traditional startups.
00:03:41.940 - 00:04:55.950, Speaker A: And I think it's very important to talk about how people from less crypto native backgrounds can actually get into the space and what the pathways are. And so in my case, I actually did startups in the very traditional sense of high tech, which often means you start with the high tech idea. You have this ideal of using technology to solve a human problem, and then we are faced with the real world out there and you notice, oh, damn, not everyone cares about text that much. And it's not purely a computer science or high tech problem that we can solve here. And so in my case, I co founded a startup called Caracare with the idea of using technology to help people with digestive disease. And we had all of those big ideas in our minds of how inefficient it is for people to track diaries of what they eat and how their symptoms develop in a paper form. And we thought, hey, this is such a clear gain and win for a high tech company.
00:04:55.950 - 00:06:00.924, Speaker A: And then it turned out years later, hey, this is not a tech problem. This is something where the human component is very important, where compliance and empathy are actually stronger than the element of the high tech. And I think there's a lesson to learn from this. For crypto, as in, people who attend events like these are often those who are into the nitty gritty detail, and they are so fascinated by this new framework that comes out or this new language, or this new feature set. And I'm here to tell you why developing in a crypto centric or roll up centric world actually should feel boring. You should feel like it's boring to deploy to this roll up of yours, because this is actually an advantage. This is something that is going to make people use the roll up in the first place, and this is something that is going to open up Ethereum and this whole crypto bubble to the masses.
00:06:00.924 - 00:07:01.780, Speaker A: And so it's very important not to get caught up in thinking about those fascinating high tech gadgets only. And so what happened at our company, Karaka, is that we found out we basically need to scale, not via technology, but via adding people and having people talk to users and talk to clients and understand the pain points. And only then can you think about scaling this with tech. And it was also that company that made me get into crypto in the first place, actually, because all of our developers were big on crypto, and they would convince us to lose some money with ICO, stuff like that. And so there were touch points. But it was never a very active or a very hands on engagement for me. And then my co founder, he also decided to leave that company and joined Ethereum foundation.
00:07:01.780 - 00:08:15.900, Speaker A: He had been working on secure multiparty computation for a long time. He had studied theoretical physics and so on. And so he would keep telling me, ever since we left that startup, hey Oris, have you heard about secure multiparty computation? We can collaboratively compute a shared value without actually trusting each other to follow the rules, but then having full confidence in the result. And so I thought to myself, yeah, this sounds cool, but Dankrad is this theoretical guy, and he doesn't really worry that much if this theoretical breakthrough doesn't have that many applications in the real world. And that went on for a few years, and it was only one and a half years later when my second startup failed. I told that very guy who had been investor by then, hey, we are afraid you will need to write off your investment. Upon which he again bothered me about those secure multiparty computations.
00:08:15.900 - 00:09:28.628, Speaker A: And I actually checked what the state was and realized to my huge I was very, very surprised that actually zero knowledge proofs are a reality now, and they are something that you can actually use out there in the wild. And that is no longer a dream of a researcher, no longer something that only the theory or the researchers who are interested in theory get to value and appreciate, but something that everyone in here will probably be very directly affected by within is already and will be even more affected by in the next few years. So I decided to get into the space, and I figured the best way to do that would be to join a company doing exactly the cutting edge research and putting it down to practice and creating a product out of it. And so this is something I can recommend to everyone. Hit me up if you guys need any input or feedback or ideas of how to get engaged in the space yourself. So now let's talk Ethereum. We are all here because of Ethereum, and we all love it.
00:09:28.628 - 00:10:01.870, Speaker A: Everyone loves it, except it's not really the case. If you google Ethereum problems, the first thing you will find is, oh, damn, Ethereum doesn't scale. You will see different numbers. 15 transactions per second is approximately the average number you will see. And that contrasts very sharply with all sorts of centralized systems, such as visa doing orders of magnitude more. Now, is this an Ethereum problem? Not really. It's a blockchain problem.
00:10:01.870 - 00:11:12.880, Speaker A: Or can we go more broadly? Can we escape this bubble of thinking that everything is cryptocentric? Well, actually, it turns out we can. And if you come from a more traditional computer science background, and you've been around for a bit longer than the last eleven years, you will probably remember there's databases out there. Blockchain is just a database. And specifically for distributed databases, we've had this carp theorem that you can read up on Wikipedia, and we've known about the cup theorem since around the basically can't fulfill three properties in a decentralized database at the same time. That's what we call a trilemma. So you need to decide which of the three desirable properties you want to focus on, which two you get to pick. Now, in the Ethereum or in the crypto bubble, this came to be known, a version of this came to be known as the blockchain trilemma.
00:11:12.880 - 00:12:05.110, Speaker A: And that's what we call the thing from the basically means that you have these three cool properties. Number one, security, number two, decentralization, and number three, scalability. And you are faced with this dramatic choice of only being able to go with two of them. Now, what happened in the case of Ethereum? Ethereum sacrificed scalability. That's where the 15 transactions per second come from. Now, what would the alternative be? If we don't sacrifice scalability as traditional chains, bitcoin or Ethereum? We could sacrifice decentralization. That's what monolithic high TPS chains do.
00:12:05.110 - 00:13:09.252, Speaker A: Or alternatively, we could sacrifice security. And that's what you might see in multi chain ecosystems. Now, did Ethereum really sacrifice scalability? If you go back and check out even Vitalik's posts from the early times of Ethereum, you will see, first of all, it was a very conscious, deliberate choice to sacrifice scalability and to focus on security and decentralization. Second, you will see that there have been ideas around working around this trilemma for a long time. Now. Layer twos are basically the result or the favorite or something that turns out to be the most promising from those ideas back from the early days. And so they stand for layer twos, as in an embedded layer into the ecosystem of the ethereum based layer.
00:13:09.252 - 00:13:55.210, Speaker A: Now this again, a problem of definitions here. Our crypto bubble is moving so quickly, we don't really know how to define terms. So I gave two definitions about the l two s. I think the shared trait nowadays is that an l two is a system that inherits most. So ideally all security properties from the base layer. The level one and one example of layer twos are roll ups. Roll ups have gotten to be known as the end game for Ethereum, and they are supposed to basically win in scalability use cases in the long term, according to many people in the space.
00:13:55.210 - 00:14:40.928, Speaker A: But let's talk about what the current state of the roll up ecosystem is. There's in fact two big categories of roll ups, optimistic ones and ZK based. The optimistic roll ups are simpler to build because of that, have been around for quite some time now, and they have a pretty good adoption. You might know arbitrum optimism, you might probably have interacted on them. Noteworthy at this point is to remind ourselves of the fact that if you go to ltobeat.com, you will see even the so called main net optimistic roll ups. They have a lot of training wheels, like you are not able to submit a fraud proof, for instance.
00:14:40.928 - 00:15:31.610, Speaker A: We are in a very early stage even with the optimistic roll ups, and they are the simpler one. Now, the problem with optimistic roll ups is that they have a slow finality. You basically need to warrant a time window for network participants to submit a fraud proof, in which case the network then discards such fraudulent state transaction. Now the alternative are roll ups based on zero knowledge proofs. Zero knowledge proofs have been around since the late seventy s and again in the crypto bubble. We tend to think that zkps be an Ethereum thing and this new kid in the block, but they are actually not. If you've studied maths or computer science before Ethereum, you will have known this.
00:15:31.610 - 00:16:40.620, Speaker A: But the cool thing about ZK is that they became practical now. And so there's several teams building ZK roll ups out there which promise to have fast finality. Because in the case of a ZK roll up, you basically submit a validity proof to the l, one that doesn't require any other additional delays for other node participants to convince themselves with very, very high confidence that the state transition was correct. Now the problem again is the complexity. And so even though ZKPs have been around for a long time, we've only had a few years of practical experience building them, and that is very, very little for the complexity of such systems. And so that means there's very low adoption right now. Nonetheless, ZKPs, ZK roll ups are seen as the clear favorite in the mid to long term because of those restrictions that stem from the optimistic case of the time delay.
00:16:40.620 - 00:18:04.600, Speaker A: And so let's talk about what AZK roll up is. So there's two important properties to a ZK roll up. Number one, in order to prove the state transition in such a roll up, we do not require every other node participant to re execute all of the transactions in a block. And instead we submit a small incise cryptographic proof, convincing other network participants that this resulting new state route is correct. And the important element in this case is that it's actually way faster to verify such a proof than to re execute the whole thing. Which brings us to this very desirable property of scalability that we can define as the cost being sublinear in the size in the n, as opposed to a linear situation that we face in the current decentralized ethereum ecosystem, where every new node or every new transaction adds costs, basically the same amount as the previous one. So it means this linear cost in expanding the network, or expanding the network capacity.
00:18:04.600 - 00:19:16.384, Speaker A: In this case we are able to skip that and have this sublinear cost. And all of this is doable with a trustless assumption with respect to the prover, with the prover being the entity that creates this zero knowledge proof, this smart, this succinct cryptographic validity proof. So that's a very, very important property, because the prover is the entity that does the heavy lifting. So not everyone will be the prover. So what types of ZK roll ups are out there? There is actually some ZK roll ups that are alive on the main net, and those are application specific roll ups. So for instance, there's ZK roll ups that only allow sending, etho only allow doing swaps. What interests us as the Ethereum community though, is having a general purpose roll up that would allow the entirety of the critical mass that the Ethereum ecosystem has amassed to be directly ported to the roll up.
00:19:16.384 - 00:20:38.680, Speaker A: So that ideally what we mean by that, so that all of the upcodes of the EVM can be reflected in the ZK world. What do we mean by the EVM and upcodes? Well, the EVM is just a VM. A VM is a virtual machine, and a virtual machine is basically an abstract formal definition of a computer that makes it easy for all sorts of implementations to talk together to follow the same standard. And so an EVM takes this input solidity code or some other language that gets compiled into bytecode, and that bytecode gets executed within the engine of such a virtual machine. This is important because there's different levels of a ZKE EVM rollup with respect to compatibility with the EVM. And so you might have seen this chart by Vitalik. It actually is kind of outdated these days already, but you will see there's all sorts of properties on this spectrum, on this trade off between compatibility with the EVM and the performance of such a ZK rollup.
00:20:38.680 - 00:21:34.910, Speaker A: And the important thing to note here is in the ecosystem we have teams working on basically each of those ZkeVM types. So what are the benefits of such a ZKE EVM? Why do we bother for this in the first place? Well, the first big benefit is we get to reuse the existing infrastructure, in particular for ZKE EVM of type 2.5 or less. We get to reuse compiled bytecode and it's very easy to port applications dapps from Ethereum to the rollup. And that's what we mean by hey, let's have a boring developer experience. Let's just ask people to exchange the RPC endpoint and the chain id and press the submit button again and the contract will be deployed to a roll up. That's a very valuable property.
00:21:34.910 - 00:22:50.244, Speaker A: Next, we encapsulate this complexity of those zero knowledge proofs, highly complex mathematical primitives, into a system where the end developer doesn't need to worry about that anymore. This is in contrast to systems that are a ZK rollup but use a separate vm model where for instance the developer needs to think in prime fields when coding the contract. And lastly, we get to benefit from the security of the EVM execution model, which has been around for many years now. So summary let's make devex boring. Now how is this possible? Why haven't we had this before if zkps have been around since 79? Well, in fact they haven't been plausible. It doesn't really interest us in the applied sphere that some crazy scientists in the could prove something. And in the footer they added a note that it would take 1000 years to prove that thing if executing it takes 1 second.
00:22:50.244 - 00:24:25.466, Speaker A: Now these days there have been huge improvements in proving systems and there have been breakthroughs in hardware accelerating such systems. And this has been possible with actually a lot of interest in the community which basically created this self fulfilling prophecy or this positive feedback cycle wherein more very smart people are working on this and so there's more breakthroughs and so even more people are interested in working on this. So what is the Zkevm in detail? Well, you can think about this as a pipeline, and there you already see potential for optimization wherein the execution client gathers traces of what's going on in the l two. Those traces get passed into a circuit input builder that creates then witnesses for the individual elements of the VM that basically can be mapped to the Zke VM. And those individual proofs get aggregated later in an aggregation circuit and posted on chain on chain means onto the ethereum based layer. What is the vision behind this whole thing? And now I'm coming to scroll, which is one of the Zkevm teams. Well, the vision, especially for scroll specifically, is to scale ethereum itself to make it accessible to more people.
00:24:25.466 - 00:25:17.514, Speaker A: And we believe that decentralization is key for that. So we don't want to sacrifice that third element of the trilemma, but we want to work around it, and ideally, such that and developers can port the Dapps to the roll up easily without having to think about all of this complexity. And we want to achieve that while working very closely with the EF, such that we benefit the entire community. And we've been open source since day one. You can see a lot of contributions between the PSC team from the EF and scroll public on GitHub. So where's the catch? Well, the catch is there's two subcatches, actually, subcatch. Number one, the computational cost to create those proofs is very, very high.
00:25:17.514 - 00:26:22.686, Speaker A: Like the direct computational cost, it takes a big machine to create such a proof. And the second subcatch is on the meta level. There's a lot of complexity involved, and you need to actually have a lot of very smart people come up with those circuits, and then even smarter people come and try to audit them and try to find out where the bugs are in a code base. That entails, right now, I think, 40,000 lines of code in the PSE upstream alone. So there will be bugs, and so we need a lot of eyeballs to catch them as soon as possible. Where are we in this whole endeavor? Well, in fact, I was told not to promise any alpha, so I won't be promising any alpha today. And I can only say we are somewhere between phase two and phase three of our roadmap, which means we have a live pre alpha testnet that you can access at Scroll IO.
00:26:22.686 - 00:27:05.786, Speaker A: It's a permission less one. Anyone can access it and deploy the DAP and see how boring deploying Dapps is. Next up, we will be working on outsourcing the proof generation to a decentralized network of provers and launching a main net after that. Finally, we will work on decentralizing the sequencer as well. So join us, check us out, check out our discord, check out open roles, and also try the testnet. Finally, we also have several hackathon bounties this week. You get $1,000 just if you deploy to scroll.
00:27:05.786 - 00:27:51.058, Speaker A: So I think this is a very easy one to get. There's ten slots for this one and some more. Check them out at the official URL. Other than that, I encourage everyone to not be too afraid and too scared in spite of all the buzwords that have been circulating around and hit up anyone from the scroll team or myself. If you have any questions. Thank you so much. Yeah, do you have a quick question? When do you think the following is going to happen? Instruction by instruction, zero knowledge proofs of EVM so you can have totally obfuscated EVM on layer two.
00:27:51.058 - 00:29:09.720, Speaker A: Is it far in the future? What do you think? So I think the question is about when we have something that some people refer to as enshrined roll up. Right, enshrined Zkevm so that we get to prove mainnet blocks. And I think that we are quite far away from that because this entails significant changes to the base layer. But this is one of the big final goals for many roll up teams, and this is very attractive for Ethereum itself as well. So I would see the roll ups right now in the midterm as a playing field to experiment with all sorts of different features and approaches and incentives and so on that could then be used, and I think it will take a bit longer than the soon trademark from the EF that could then be used to actually prove mainnet blocks and make snarks part of Ethereum itself and the snark everything roadmap. Not soon. Yeah, 1 second for the mic.
00:29:09.720 - 00:30:41.350, Speaker A: Is the plan with scrolls EVM to compensate provers network for providing the validity proofs? Or is it intention for the person wanting to actually do a computation to provide the proof themselves? If I got it correctly, the question is about would the ZkeVm compensate proof generators for the work? And the answer is absolutely. That is crucial for decentralizing the prover network. It's very important that there's not one single foundation running provers, and in fact this is quite a challenge because proof generation requires GPU machines with hundreds of gigabytes of ram right now, and so you actually can get them for a few bucks an hour at Amazon. But it's not like every node or every network participant, like normal end users, would be inclined to be running those. So it's actually an important element of the decentralization strategy to set up tokenomics such that provers can be incentivized and such that this incentive structure doesn't lead to centralization. So for instance, not rewarding the fastest provers first. Yeah, one more question.
00:30:48.260 - 00:31:05.224, Speaker B: Hi. So on the same note, the question is this. Now if you need a g you with all the stuff to do the proofs, are we going to go back into the whole proof of work kind of environmental thing versus some sort of proof of stake? You have to have your own tokens. Does it get to that? Or how does it work? Is it a lot of energy?
00:31:05.422 - 00:31:46.792, Speaker A: Very good question. Does proof generation basically mean going back to proof of work? The answer is no, luckily not for two reasons. Number one, with proof of work, you are hashing random nonsense to find the right hash. This is useless work. With the proof generation, you are actually proving something useful. And second, proving something useful means that not everyone needs to be running this dumb work in parallel. So in particular, this is an important element of the proof generation decentralization strategy as well.
00:31:46.792 - 00:33:02.320, Speaker A: In particular, could the network distribute tasks of proof generation in parallel, such that there's not too much redundancy with respect to creating a proof for the same transactions, the same blocks? So it would only be maybe one or ten provers that work on creating proofs for set of blocks. And not everyone creates proofs for everything. So there's a big, big, again, sublinear component to this. Hey, are you aware of any beginner friendly projects maybe on GitHub someone who's interested in getting involved, can contribute to and whatnot? Yeah, absolutely. Are the beginner friendly projects how to get involved? Well, I guess given that people are here, check out the hackathon, check out some bounties, I guess that's a nice first step. Also, you can check out our GitHub. We have some good for beginner issues out there.
00:33:02.320 - 00:33:55.290, Speaker A: And finally, I can recommend a course on ZK if you want to dig deep into the maths behind the whole thing called ZK minus learning.org by actually those people who, among others, who in the 70s came up with ZKPs, Dan Bonet, Shafi Galtwasa, et cetera. It's actually very up to date. It's ongoing, doing as we speak, and it will go on for another, I think, two or three months. Any more questions? Okay, thank you so much everyone. Hit me up. Anytime sooner.
