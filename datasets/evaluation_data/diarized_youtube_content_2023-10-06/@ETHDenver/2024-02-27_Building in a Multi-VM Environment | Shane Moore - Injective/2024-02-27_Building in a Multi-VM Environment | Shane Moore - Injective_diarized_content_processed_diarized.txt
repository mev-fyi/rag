00:00:07.690 - 00:00:49.654, Speaker A: Over a discrete time period and crossing orders by priority. The priority of market orders then unfill limit orders and then limit orders from the most recent auction interval. All orders are not published to the order book until the auction interval ends, which eliminates the possibility of front running and negative spreads. And of course being able to match all orders in one shot allows for massive scalability improvements that enable injective's paralyzed order processing, contributing to that 25,000 Tps. An injective also has a shared liquidity.
00:00:49.702 - 00:00:52.174, Speaker B: Model, which means that all DAPPs are.
00:00:52.212 - 00:01:10.450, Speaker A: Sharing the liquidity that is available on chain, eliminating the need for smaller DAPps or protocols to find and source their own market makers. Market makers on injective are trading markets that are being utilized across all DAPPs on injective.
00:01:12.470 - 00:01:15.362, Speaker B: And all of these things are just some of the features that.
00:01:15.416 - 00:01:46.270, Speaker A: Make injective tailor made for defi developers. But injective is not just different on the chain level, but it also is built differently so that it's also easier for DFI developers to build a web3 finance application. What we like to say is that injective has these plug and play modules that make life easier for devs to quickly utilize and launch their apps.
00:01:48.130 - 00:01:50.158, Speaker B: And here we have just some of.
00:01:50.164 - 00:01:56.386, Speaker A: The modules that are available to developers utilize. Of course the order book module and.
00:01:56.408 - 00:01:59.102, Speaker B: The smart contract module can be utilized.
00:01:59.246 - 00:02:02.418, Speaker A: But injective also has the binary options.
00:02:02.504 - 00:02:06.674, Speaker B: Module, Oracle module, bridging module that are.
00:02:06.712 - 00:02:14.214, Speaker A: Readily available for use when you're looking to build on injective. Devs don't need to source their own.
00:02:14.252 - 00:02:53.380, Speaker B: Partnerships as these are all baked in solutions for injective. And the bridging module specifically is a highly useful feature for DAP developers because injective is one of the most interoperable networks within web3, not only natively IBC, it also has its own Peggy bridge bridging its network to Ethereum, and it's also integrated with wormhole, which opens the injective network to a multitude of prominent L1s, including Salana, Aptos, Polygon and even more.
00:02:55.770 - 00:03:09.158, Speaker A: But today I'm here to talk about injective's electrochains, which takes a step further when it comes to interoperability and scalability.
00:03:09.334 - 00:04:33.650, Speaker B: Than just creating different bridging solutions. Injective's electrochains foster flexibility and compatibility, empowering developers to deploy dapps across various blockchain ecosystems seamlessly. The first of these electrochains are NeVM and NSVM, which are just different rollup environments for Ethereum and Solana respectively. These VMS environments accommodates different virtual machines, each tailored to execute smart contracts written in different programming languages or adhering to different execution models. And this setup facilitates interoperability by allowing developers to leverage the strength of different VMs while ensuring compatibility with existing smart contract standards and infrastructure. So injective's in EVM environment is also inherently different from other EVM chains because it integrates Ethereum into the IBC ecosystem, representing a significant advancement in holistic composability. And today we'll cover how to deploy an Ethereum DAP on Nevm.
00:04:35.270 - 00:05:50.714, Speaker A: So getting started with Inevm is very easy. And deploying on inevm is the same as any other EVM compatible chain, so it should be pretty intuitive. And on top of this, there are a lot of other useful tools and integrations exclusively on NevM that you as a developer can leverage to interoperate seamlessly with injective, as well as other chains like Ethereum and Solana. And in this workshop I'll go through two projects uniquely integrated with NevM that you guys can leverage on day one to interoperate with injective and other prominent blockchains. So hyperlane is one of those. And they are not just a bridge, but also a universal and permissionless interoperability layer built for the modular blockchain stack, perfect for roll ups like NevM and NsVM. With Hyperlane on Injective's NevM, you can build interchange applications that abstracts away the complexities of the multi chain world away from these users.
00:05:50.714 - 00:06:36.090, Speaker A: If you want to build a solidity Dap that allows users to post orders directly on injective's exchange dapps, then Hyperlane can make this happen seamlessly. And here are some of the interesting features of Hyperlane One, contracts. So hyperlane exposes contracts that allow applications to send and receive messages. Then they have agents. And these agents in the network operate the protocol by providing security and relaying messages across the chains and applications. Well, that's you guys. You can use the protocol to send and receive messages between different chains secured by hyperlane.
00:06:36.090 - 00:06:44.430, Speaker A: And here's how you can then interoperate between Nevm with injective or other chains.
00:06:45.170 - 00:06:47.118, Speaker B: So you can create a message object.
00:06:47.204 - 00:06:53.918, Speaker A: First that contains the destination chain, the recipient address, and some message body.
00:06:54.084 - 00:06:56.750, Speaker B: Then you're going to want to deposit.
00:06:56.830 - 00:06:58.930, Speaker A: The required fees to cover the cost.
00:06:59.080 - 00:07:00.578, Speaker B: Of sending the message.
00:07:00.744 - 00:07:14.390, Speaker A: And then within the hyperlane contract, you want to call the dispatch function and pass the message object that we just mentioned as an object. So if you're then on the other side and you want to try to.
00:07:14.460 - 00:07:33.774, Speaker B: Receive messages or events happening on injective or other chains, you're going to be monitoring for this message received event on the hyperlane contract, and you're going to want to then process that message, right? So when the event is fired, process the message by extracting that sender and.
00:07:33.812 - 00:08:10.790, Speaker A: Then the chain and the message body. If you have any more questions as well, we're going to be releasing more docs and feel free to reach out to our team or hyperlane to get started. So with Injective's deep integration with various blockchains and liquidity gathered over time, you can easily deploy adapt on Nevm that accesses liquidity and users from all over the multi chain world by connecting to justinjective.
00:08:12.670 - 00:08:15.482, Speaker B: And then another great protocol deployed on.
00:08:15.536 - 00:09:31.118, Speaker A: Nevm is layer zero. And for those of you who are building multi chain apps, layer Zero allows you to build Omnichan interoperable applications using its open source immutable messaging protocol. One of the coolest parts is that it introduces a new type of app to the DAP ecosystem on Nevm, the OAP. And so what is this OAPP? Well, OAP stands for Omnichan application, a type of decentralized application that operates across blockchains. So in the context of Nevm, OAPs can interact not just with injective's ecosystem, but across all connected networks, leveraging layer zero's infra. So to become an OAP, you integrate with layer Zero's contract on Nevm, which is a core smart contract that defines the logic for cross chain interactions on Nevm. You'll also find the corresponding layer zero endpoints, which are crucial components that facilitate communication between different blockchains.
00:09:31.118 - 00:10:32.102, Speaker A: And after the initial integration steps, you can build your own custom user application, which takes care of the user facing component of the OAPP that interacts with that layer zero contract. So what's cool about these OAPs is horizontal composability. The OAPS is composed enables for external cross chain calls to and from in EVM. And there's also further extensions purposely built for NFT ecosystems called OFP extensions, which facilitates cross chain NFT. For those of you interested in building an NFT project. So yeah, to get started as an AnyvM developer, you can find the Oapsender Sol or the OAP receiver Sol already deployed on EVM from layer Zero's docs pretty soon. So just feel free to reach out to us or the layer zero team.
00:10:32.102 - 00:10:44.950, Speaker A: If you have any questions and there's a omnichan interface contract specific to Nevm's ecosystem that you can implement to get started with your first OAP.
00:10:45.110 - 00:10:47.238, Speaker B: Then afterwards you'll be able to leverage.
00:10:47.334 - 00:11:36.200, Speaker A: Nevm's layer zero endpoint for secure and efficient cross chain messaging provided by layer Zero. So that's an overview of Nevm on injective. Again, for more details and to receive all this information and material, head over to docs nevm.com and check out what they have there. And also on this upcoming Saturday, we'll be hosting a builder's brunch. So if you're interested in learning more about deploying on Nevm, or just in general about building on injective, please join us for the builder brunch. I will be there alongside a lot of the other injective labs team.
00:11:36.200 - 00:11:48.234, Speaker A: Yeah, feel free to find me afterwards if you have any questions. Again, you can find out more or get the support you need or find the right person at the builders brunch.
00:11:48.282 - 00:11:50.106, Speaker B: And I just want to thank you all for listening.
00:11:50.218 - 00:11:51.020, Speaker A: Thank you. Thank you.
