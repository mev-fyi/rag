00:00:13.930 - 00:00:41.514, Speaker A: Everyone. Hopefully I'm in the right place. If I'm not, someone stop me now. So today I'm going to be talking about scaling ethereum with roll ups. So my is John Adler, I am with fuel labs and we're building an optimistic roth implementation. So first, let's talk about the scalability problem. We all know that bitcoin can process around three transactions per second, maybe up to seven, depending on how big they are.
00:00:41.514 - 00:01:12.530, Speaker A: Ethereum can process around 15 transactions per second. Maybe if you're doing just simple payments, that can get up to 30. And meanwhile visa can process 5000 transactions per second. This is generally the scalability problem. We want to increase transactions per second. So the scalability, and we want to do this without decreasing decentralization. So there's a few potential solutions that have kind of been proposed over the past ten years for channels and more recently for plasma.
00:01:12.530 - 00:01:42.970, Speaker A: Channels aren't really great for scaling. They're capital efficient. They don't support open participation contracts like Uniswap, and generally they have a poor ux in terms of capital because you have to lock up your money and it can't be used elsewhere. So channels aren't really a scaling solution, they're an interactivity solution. They allow instant finality, which is great. Blockchains can't provide that, but they're not really a scaling solution. Plasma is a little bit better, but plasma cash is kind of the only plasma variant that provides us with good security guarantees.
00:01:42.970 - 00:02:16.840, Speaker A: And plasma cash also doesn't support open participation with smart contracts. And it requires things like checkpoints to prune coin history, which makes it actually use a non trivial amount of block space. And the big problem with plasma is that it's permissioned. So ideally we want something that allows open participation, is permissionless and is trustless and capital efficient, and we're willing to sacrifice the instant finality that channels provide. We're okay with having at block time or potentially slower latency for transactions. We're okay with that sacrifice, but we don't want to sacrifice on anything else. We want everything else.
00:02:16.840 - 00:03:13.174, Speaker A: So before we see the solution that we're going to talk about, which is obviously roll ups, because that's the subject of this talk, let's see, what is the scalability bottleneck, and how does roll up tackle this bottleneck. So one common talking point is that EOS is centralized, and it's more scalable than Ethereum because it's centralized around 21 block producing nodes. That's kind of a common talking point, but, and if you take away one thing from this talk, it should be this that this is wrong. If we look at the charts of block producers on EOS versus Ethereum and bitcoin, you'll see that Ethereum four mining pools control the majority of hash rate. Bitcoin four mining pools control the majority of hash rate. So there's fewer nodes. So why is it that EOS is more scalable than Ethereum and bitcoin? And the answer is that the number of nodes actually has nothing to do with scalability.
00:03:13.174 - 00:04:05.494, Speaker A: And that's because consensus is not the bottleneck. So what is the actual bottleneck is this on Ethereum, we want a non consensus full node with the following specs, approximately a four core cpu, 8gb of ram, and an NVMe SSD to be able to fully validate the chain at a rate that's ten times faster than it grows than blocks are produced. With bitcoin, the parameters are different. We want a non consensus node with a raspberry PI and a hard disk drive must be able to fully validate the chain approximately 30 or 50 times faster than it grows. And EOS is different, they choose a different parameter. They want non consensus nodes to run a 64 core cpu have 1 ram rated NVMe ssds, and that kind of computer should be able to fully validate the chain approximately as fast as it grows. And this is a social contract.
00:04:05.494 - 00:04:47.074, Speaker A: It is not consensus. At no point here did I say anything about number of nodes or about the consensus process. And that's because number of nodes has nothing to do with scalability. It is all about what are the hardware and network requirements we have for a user to run a full node to do full validation. So how does Ethereum's scaling bottleneck manifest itself? How do we get from that hardware specs to 15 transactions per second? We have to get there somehow. Why is it that Ethereum can only do 15, despite the fact that it has much higher node hardware requirements than bitcoin, and bitcoin can do maybe half of that. There are two reasons.
00:04:47.074 - 00:05:32.546, Speaker A: The first one is that Ethereum can support more complex transactions. It can do these stateful, richly stateful, turing complete smart contracts that we all know and love Ethereum for, as opposed to bitcoin's stateless predicates. And the second reason is because of state accesses and state growth. Generally, accessing state during Ethereum transactions is a very expensive process, and the Ethereum state size uncompressed is around 45gb compared to bitcoin's 2gb. And this is actually why an NVMe SSD is needed because the ethereum state is too large to fit into RaM on most consumer hardware. So roll ups to the rescue. So what's the roll up design paradigm? It's basically you take all the state, you move it off chain.
00:05:32.546 - 00:06:10.974, Speaker A: You do execution on this state, also off chain, and you only use the Ethereum main chain for data availability. So you just post the roll up chain's blocks as call data, make the data available, and that way you don't have to worry about the data withholding attack. That is a big problem for regular side chains. This allows us to build trust and minimize permissionless, scalable side chains for the first time ever in the history of blockchain. And you can't do this on bitcoin. And you can ensure the validity of the sidechain's blocks with several different things. One is validity proofs or zero knowledge proofs.
00:06:10.974 - 00:06:52.826, Speaker A: And this scheme is known as ZK rollups. Another thing you can do is you just have a fraud proof and then a synchrony assumption. So if someone commits to a block, if no fraud proof has been submitted within a long period of time, say a few days or a week, then you just say it's valid. The last thing you can do is an interactive verification game plus a synchrony assumption. And this is what the guys at offchain Labs are doing. I don't think this one here has a good name yet as a general name, but as an alternative to optimistic roll ups. So why can roll ups scale? So with the roll ups, consensus nodes and miners, ie miners and non consensus nodes.
00:06:52.826 - 00:07:31.680, Speaker A: So the users don't need to execute the roll up transactions, they only need to order data and make it available. So imagine taking a movie and just downloading it. Or you have a Linux ISO and you just download it and put it on your disk. You can do that very quickly and this doesn't require a lot of resources. So by separating data availability and ordering from execution, now you have a system that can potentially scale. And this is kind of almost the best thing you can do because there's no lower execution to no execution. If you do all the execution off chain on chain to no execution, you can't really do better than this.
00:07:31.680 - 00:07:59.362, Speaker A: So the last slide I said can with a star. So why can? So let's kind of look at the profile of verification cost versus block production cost. So in normal blockchains and in optimistic roll ups, this cost is symmetric. So in order to run a full node as a non consensus node versus a consensus node, it's basically the same cost. They're both doing the same thing. And since it's symmetric, it's easy to analyze. With ZK roll up, things get a little more complicated.
00:07:59.362 - 00:08:45.186, Speaker A: And with chains that embed ZK proofs directly at the consensus layer, for instance, coda, because sure, the verification cost is very cheap. So as a non consensus node you can keep up, but the block production cost is much more expensive. So this means that potentially block production is more centralized. So this becomes much more complex to analyze. So we'll ignore it for now, and you can extend what we talked about earlier about non consensus nodes to also talk about consensus nodes. But for now, let's analyze the symmetric case of optimistic roll ups. And what I'm going to say now might surprise you, but if everyone had a single EVM optimistic roll up, and all the block space on Ethereum was just filled with data availability for this roll up, we would not have a few hundred transactions per second like you've been told.
00:08:45.186 - 00:09:44.546, Speaker A: We would have 15 transactions per second. We'd have zero scalability gains. And that's because the end users would still have to fully validate this roll up chain. And if you have EVM in the roll up chain, well, guess what? Unless you increase the hardware network requirements of the users, they're still only going to be able to execute on the same hardware, 15 transactions per second, right? So roll ups does not scale because there are fewer users using this particular roll up chain, right? The number of users has nothing to do with scalability. It's all about the hardware and network requirements. So if optimistic roll up doesn't actually give us any scalability whatsoever, if we use it on the EVM, how does it allow us to scale? And the intuition here is that sharding in general, like what's being used in e two, it provides us with increased transactions per second because it allows us to do many execution threads in parallel. There's nothing to do with the number of users.
00:09:44.546 - 00:10:33.480, Speaker A: It's all about many execution threads in parallel. And guess what optimistic rollups allows us to do? It allows us to do dynamic, heterogeneous sharding. So you can have a single data availability layer, the Ethereum chain, and then you can have several roll up chains that all execute essentially in parallel, independently. This means that you can get the nice benefits that sharding will get you. And you get this on Ethereum one and heterogeneous, because each shard is different, unlike in the e two design, where all shards need to be exactly the same, here, shards can be different. And one nice thing that it allows you to do is it allows you to experiment and explore with different execution and data models without any hard forks on the main chain. For instance, at fuel labs we're doing one with a Utxo data model.
00:10:33.480 - 00:11:02.378, Speaker A: You can also have something, a custom VM that's well suited for interactive verification games, which offchain Labs is doing. You can use Libra's move VM if you want. You can do state rent and you can have application specific execution. So one thing I want to drive home, since this is the hackathon, is that application specific optimistic roll ups can and should be a thing. And it's something that you should think about designing. Doing EVM, again, as said before, doesn't provide any scalability. Build application specific optimistic roll ups.
00:11:02.378 - 00:11:42.330, Speaker A: They work, they can scale, they're simpler, they're easier to meter around, and they're not really that hard. So beyond optimistic roll ups and sharding, can we get better than this? Yes, we can. We can actually get sublinear cost on data availability by using data availability checks. And the kind of design paradigm around this is being implemented in laser ledger, which you can check out if you're interested. So the TLDR number of nodes don't affect scalability, consensus doesn't affect scalability. It's all about the hardware requirements for a user to fully validate. And because of this, the EVM doesn't really provide scalability.
00:11:42.330 - 00:12:01.920, Speaker A: Instead, why don't you just explore with different execution and data models, and don't wait for someone else to build a scalable optimistic roll up chain for you. You can reach out to me, you can reach out to anyone else in the optimistic roll up community, and you can build application specific roll ups that scale very well. Okay, that's it. Thank you everyone.
