00:00:00.090 - 00:00:34.630, Speaker A: Lewis, he's the founder of Gelato and I'm not going to try to pronounce his last name, so I'll let him do that for you guys. Thank you, Lewis. Thank you. Hello, eth Denver. So I'm going to talk to you today about zero gas, infinite scale web three, the bow case for app chains and how to build them. I'm Lewis and I'm the founder of Gelato Network and we have a booth over there in case you want to join us there. Yeah, you will be greeted by very nice people there, so highly recommended.
00:00:34.630 - 00:01:26.854, Speaker A: Okay, so let me first start by taking you a quick trip down memory lane and let's talk about how web two scaled. Looking at the audience, I think not many people were there for that, but it did happen at some point. All right, so web two started with local hosting on physical servers. So at some point people who hosted a website literally had a machine in the basement and there was the website running on that machine and obviously that didn't scale very well. Like if you had visitors on your website from another country or continent, they would have very slow loading times. And also if your electricity was out or anything else happened to your server, your website would be down as well. So yeah, basically very early days of the web, very unscalable, lots of problems.
00:01:26.854 - 00:01:46.238, Speaker A: From there we went to shared hosting geocities and dreamhost. I don't remember them. Some people here might remember those. Yeah. And basically they did solve a problem. They managed servers for you and they managed website hosting for you. Great.
00:01:46.238 - 00:02:30.406, Speaker A: But there were still a lot of issues with it. So you would be very constrained in your scalability still because you were sharing that infrastructure with everybody else using that same shared hosted provider. That means that if you had another website on there that suddenly had a huge surge in traffic, your website that has nothing to do with that website would also suffer from that and maybe be down. Right. So not very scalable. And also one of the biggest issues is it's very inflexible because these shared hosting providers would have a specific framework, a specific programming language to work with and you would be constrained by that. You would have to learn that and write your application in that and you would lose the benefits of all the other nice programming languages and architectures out there that maybe would have helped you to build a much better web app the way you actually wanted to.
00:02:30.406 - 00:03:10.506, Speaker A: Right. So still, bad endgame for Web two is surprise, surprise, AWS and Google Cloud and whatever else have you. Right? And really what they brought to the table was they allowed you to have your own server, but not physical anymore, a virtual server with a virtual machine on it. So now you could truly deploy your web application in isolation. You wouldn't share bandwidth with others. You could horizontally scale as many instances of these servers that you needed. And nowadays, to be honest, like ec two, elastic compute and so on, they even allow you to auto scale based on traffic and so on.
00:03:10.506 - 00:03:55.510, Speaker A: Right? It's very smart hosting and with your own vms, you could also use all of the technology out there and really build the web app just the way you wanted to build it. Right? So that's the end game here of web two. So the key point here is that the Internet is not one huge world computer. It is a web of interconnected computers and web two scaled via asynchronous services. You would deploy a bunch of your services, instances, machines, whatever, and they would all talk to each other via asynchronous communication tools like HTP, right, APIs and whatnot. And also they would talk to the rest of the Internet that way. And it was all interconnected.
00:03:55.510 - 00:04:48.610, Speaker A: So let's talk about Webtree's evolution and let's try to draw some parallels here. And the claim is that asynchronous cloud services are scaling web three two today already on gelato and in the web three evolution. What we have observed is that there is a movement from the early days of web three monolithic chains to where we are today. Infinite virtual chains or roll ups in the web three cloud. So just like I showed you those three stages of web two scaling, I'm going to now show you similar stages congruently of web three scaling. And web three started with bitcoin and other special purpose l ones before ethereum and back then. If you were a developer back then in 2013 or whatnot.
00:04:48.610 - 00:05:28.390, Speaker A: If you also wanted to build an application like bitcoin, you would similarly have to bootstrap your own validator set, launch your blockchain the way bitcoin was launched or similar. And yeah, that's, I mean, even harder than reliably hosting a physical server in your own home. For website hosting, that's much worse. Even you had projects trying to do this, like Mastercoin, Dogecoin, some of them still live, right? But obviously this wasn't the end game here because it was way too expensive. Imagine if you want to build your blockchain application. Imagine you have to bootstrap your own validator set. You have to generate your own token, you have to inflate the token, you have to pay them and you then still have to be sure that it's enough for there not to be 51% attack.
00:05:28.390 - 00:06:04.814, Speaker A: So basically impossible. And from there we have Ethereum. Yay. East Denver, right? Ethereum. Ethereum was huge because Ethereum allowed people to deploy their applications not as blockchains, not as validator networks, but as smart contracts, right? And very similar to shared hosting providers, geocities and dreamhosts and so on. Ethereum was a great managed service for applications, smart contracts. It gave them the shared security, it gave them the global sort of network, all out of the box, basically infinite uptime and so on, all great.
00:06:04.814 - 00:07:02.766, Speaker A: But it suffers from the same problems that the shared hosting provider suffered from, which is it is very inflexible, right? Like you have the EVM, you have solidity compilers and so on, but you can't really do that much on Ethereum in terms of a wide array of programming languages, parallel execution, whatever you want to do, you can't really do it on there, right? And on top of that, you're sharing Ethereum with every other application out there. So if a dgen is doing like an ICO or NFT drop, suddenly your application and your users have to pay huge gas fees or they suffer from high congestion, your application suffers. And yeah, it's basically not scalable. And I think everybody agrees today. Vitalik agrees because he published the roll up centric roadmap three years ago. Right? So yeah, the end game for web three scaling is virtual blockchains on roll up as a service, virtual blockchains are just roll ups. You can think of roll ups as virtual blockchains.
00:07:02.766 - 00:07:55.874, Speaker A: They are blockchains within a blockchain. They are blockchains that are hosted off chain on centralized sequencers like gelato, but they are still sort of posting commitments and data to the real blockchain, right? So yeah, it's a bit like vms where on web two, on AWS and so on, where now a roll up as a service provider like Gelato can host your application as a roll up, not as a smart contract anymore. It's now a roll up with smart contracts and you are in isolation. You don't share this bandwidth with others. You can spin up as many instances as you need and as you want, we can all automate this for you. Even it's all auto scalable, just like in the cloud. And yeah, you still have the benefits of Ethereum, you still have maximum security from Ethereum and now you have maximum customizability as well because you can actually on a roll up, modify the EVM, you can merge eips that you like that aren't live on main net yet.
00:07:55.874 - 00:08:23.744, Speaker A: You can take the SVM like Salana, you can do whatever you want on there. And that's really equivalent now to web two endgame. And we are reaching this endgame thanks to Gelato now and web three as well. So let's unpack Gelato's web three cloud. A simplified version or model here is just to think of the base layer. Those are the roll up frameworks. Op arbitrum, polygon, da layer, celestia, I canda, whatnot.
00:08:23.744 - 00:08:48.956, Speaker A: Right? That's one part. And then the second part is essential services. Just like on AWS. You have MongoDB, you have various Linux Oss, you have all sorts of APIs like SQL databases, whatnot. Similarly to that in web three, you need a specific range of services to really make your application powerful and scalable. And yeah, Gelato has own suite of services. That's what we're known for.
00:08:48.956 - 00:09:20.564, Speaker A: For four years, like two years ago at East Denver, we weren't talking about roll up as a service. We were talking about smart contract automation, serverless functions. All of these things still exist and they benefit our roll up as a service clients today. But yeah, there's also many other partners that we are deeply integrated with and working with on roll up as a service. We have the graph, we have gold sky for indexing, block explorers, ether scan, block scout, bridging, cross chain messaging, layer zero across oracles pith, Redstone, and so on. Right? So that's sort of how you can think of it. There's the chain and then there's the services you need to build.
00:09:20.564 - 00:09:55.440, Speaker A: If you combine them, you can build actual applications that aren't subpar to web two anymore. They actually rival web two. So you can see how easy it is to deploy a roll up with Gelato. You can just go to our UI, you pick your stack, you pick your da layer. Yeah, you can configure services you need on rems, off rams, fam, and then the roll up is deployed. Going to skip fourth a bit. You can look at analytics, you can see what services are live on the roll up bridges, blah, blah, blah.
00:09:55.440 - 00:10:38.328, Speaker A: All right, let's go a bit more technical now. Still very high level, but yeah, the core blockchain design, right, this is what you're looking at here, is essentially a roll up. We have the execution layer, the modified version of the EVM. Normally that's op geth, arbitrum, polygon, cdK, whatever. And then you have Ethereum as a settlement layer, and that's really crucial, right? That's the whole point of a roll up, is you don't actually spin up a new blockchain with new assets on them. You actually still have your assets in smart contracts on Ethereum, and you just upload them into your roll up for high throughput execution. But ultimately, if the roll up somehow has a fault, you can still get your assets out on Ethereum.
00:10:38.328 - 00:11:15.336, Speaker A: And Ethereum is saving you in that case. Yeah. And for data availability nowadays, you can use Ethereum, but you can also use Celestia or others if you want to really save on gas costs. And that's really what gets you to zero gas roll ups, which is also the title of this talk as well, right? Basically, zero gas roll ups mean roll ups where your users pay zero transaction costs. And yeah, let's expand from here. So we still have the roll up stack. As I will go through these charts with you, you will see that we are expanding from the inside out and we still have the roll up stack here.
00:11:15.336 - 00:12:04.612, Speaker A: But now we're adding scalable rpcs. DRPC, for example, is our partner right now, and block explorers and the native bridge that lets you bridge assets from Ethereum to your rollup in the most secure way known today via the roll up bridge, the cryptographic bridge, or even a zero knowledge bridge like in Polygon CDK. So yeah, that's like the essential infra with the rollup core infra and the sort of block explorer and bridge that you sort of need. And that's where most roll up as a service providers stop. Right? It's pretty cool already, but it's also pretty useless because there's a bunch of services that you really should consider using to build a fully fledged application that rivals with the likes of web two. And that's where gelato really shines as a roll up as a service provider, because we're more than that. We are not just a roll up as a service provider.
00:12:04.612 - 00:13:05.804, Speaker A: We are a web three cloud services provider and we are a web three cloud platform. That means you get the roll up as a service, but you also, for example, get your lots of functions, the serverless environment. You can liken this to AWS Lambda, right, in the AWS architecture, and you get relay and so on, right? And actually, our roll up as a service customers are heavily using these services with their rollup. And from day one, for example, when they launch the blockchain, they can use functions and data from Redstone or pith to immediately stream price feeds to their blockchain and have a fully functional defi application from day one, like a perpleptex or whatnot. Right? And taking this a step further, if you want to have the best ux on your UI, you can use Gelato relay now and have your users send transactions in an account abstracted way to your rollup so that they literally just sign in with Google. They get, I don't know, wallet as a service, keys, and they just click buttons. No more metamask pop ups, no more tedious gas management, just buttons and trading and all the fun, right? All right.
00:13:05.804 - 00:13:42.648, Speaker A: And beyond that, we have goalsky graph and so on from day one on your rollup, so that you have graphql indexing for UI. You can display data in a very nice way. And last but not least, we have liquidity provider and cross chain message bridging on your roll up from day one. So that you can also not just work with a very slow process of bridging eth away from your roll up. Or I mean, the native bridge doesn't even allow you to go from other roll ups to your rollup, but liquidity providers, like across and so on, allow you to connect to the world of other rollups. Base, optimism, mainet, you name it. So that's like a full stack, gelato roll up.
00:13:42.648 - 00:14:17.476, Speaker A: As a service application, it could be used for a DeFi roll up if you want to build a perptex, it could be used for whatever else. Have you like a game. But yeah, let's take this one step further because you still have to talk to other chains, right? Like now your roll up is live, it's super scalable. Your users just click buttons. They're happy, they don't pay any transaction fees, but they still need to talk to other chains sometimes, right? You still want to connect to other user bases from other chains. And it's a very simple piece of the puzzle for asynchronous communication. In the web we have HTTP and so on.
00:14:17.476 - 00:15:17.936, Speaker A: And in the blockchain world, we have these cross chain messaging protocols like layer zero, Connext and so on, right? That let you connect to other chains and move assets from your roll up to those chains, or more importantly for you, from other roll ups to your roll up. All right, almost finished, but let's take this to the absolute end game. There's a buzword on here for those of you who are knowledgeable here in the roll up space, which is shared sequencing. So in the web two world, if you really have massively scalable applications like, I don't know, World of Warcraft or whatever. Usually you have a ton of servers and you sort of segment your user base into regions, right? Like maybe you're on the, I don't know, european server, on the US server, whatever it is. And this way you can guarantee a high throughput for your users. But if your user in the US on a server wants to play with a friend in Europe, that doesn't work unless these two users or gamers meet on the same server.
00:15:17.936 - 00:16:09.880, Speaker A: So for that you would then migrate your character, your in game assets and so on from one server to another. It works. And just like that in web three with crosschain messaging, you can also sort of, if you wanted to, if you were building a game, you could launch, I don't know, three roll ups and sort of segment your user base and divide them amongst those three. But if you want to have them operate interoperate synchronously with each other. If you want the smart contracts on these roll ups to talk synchronously with each other, then you need shared sequencing. And just why do you even need this in the first place? Even if you have this hyperscale with your roll up with super cheap da on gelato, if you have crazy use cases, these technologies like op and so on, even today they have certain throughput limits. So at some point you need to scale horizontal just like you would on AWS.
00:16:09.880 - 00:16:52.804, Speaker A: Your server instances will eventually also need, they will run out and you need more of them and they need to load balance between them or whatever. Similarly you could build like a massively scalable gaming application on gelato where you would deploy five roll ups, but you still want the game to be a single game experience. Everybody is on basically the same game. And for that you need shared sequencing. And that basically just means that you have these different execution environments, these different rollups processing all of your gaming transactions, but they all are synchronized amongst each other basically in a single block that is created by the shared sequencer. And there's projects out there trying to solve this problem today like Espresso and others. And I think that's not reached yet.
00:16:52.804 - 00:17:16.990, Speaker A: That is not solved yet. But I think end of this year this will also be solved. To be honest, if you are at this stage, it's a luxury problem. Normally in web three we don't even have that many users, but at least now the technology is ready for it. So if you're there, you can be proud of yourself. Kudos. And we will have a solution with chat sequencing at the end of this year for you there as well.
00:17:16.990 - 00:18:05.784, Speaker A: All right, so Ethereum is not one huge world computer. It's a web. Three of interconnected roll ups on Gelato. And, yeah, if you want to come build with us to scale Ethereum here, you can see a bunch of applications that have been working with us in the last four years. Many of them are now middleware services, limit orders and so on, like pancake Swap, sushi Swap, synthetix, Optimism, Pith, Redstone, all these great projects, beefy finance, many of them have booths here today, have been working with us for four years. Some of them are already deploying chains on our rollup as a service today or tomorrow. And, yeah, basically it's just chill.
00:18:05.784 - 00:18:47.320, Speaker A: Like, if you want to build with gelato, build on gelato, you're going to be in good company. We've been doing this stuff for four years. We've been trusted in production with our technology for four years by the best protocols in the space. And yeah, we are more than ready to provide you not just with smart contracts, middleware services, but also with your own block space so that you can scale and actually build a meaningful application where your users are not annoyed anymore and where your users prefer that even to a web two counterpart. So, yeah, thank you very much for coming to this talk. You can find out more about Gelato network on X. First time I said X on Twitter, gelato network and also git pusher, that's me on Twitter.
00:18:47.320 - 00:19:08.190, Speaker A: Just jump into our discord. We have many nice developer relation stuff, many nice people that will help you get on board it, help you integrate our services and yeah, let's scale web three together. Thanks a lot. Right?
