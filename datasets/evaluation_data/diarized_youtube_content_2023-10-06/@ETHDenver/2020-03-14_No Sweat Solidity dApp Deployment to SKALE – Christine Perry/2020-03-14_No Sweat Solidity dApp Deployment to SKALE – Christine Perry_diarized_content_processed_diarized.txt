00:00:13.930 - 00:00:35.510, Speaker A: Okay, so happy Valentine's Day, everybody. Thanks for coming to the workshop. So, I'm Christine Perry. I lead solutions engineering at scale labs. And today we're going to walk you through how to hack on scale. But before we get started, I want to set the stage. So we're going to do a brief intro of what scale is, and I promise I won't take too long.
00:00:35.510 - 00:01:03.434, Speaker A: And then we'll get into some live demos while I'll show you how to deploy on scale using rinkby, using rinkby truffle. And then also a cool game that we built as well. So let's get started. So scale is meant to empower Ethereum. By that I mean it's not Ethereum killer. Instead, it's meant to actually run alongside of it. But just like Ethereum, we have quite a few nodes in our network that work for your dap.
00:01:03.434 - 00:01:32.250, Speaker A: But the differences are this. Instead of having one chain to where every DAP has to share resources and share transaction speed, we group together a subset of nodes that we create for your scale chain. So it's 16 nodes that's created for your scale chain. But over time, we rotate nodes in and out. So over time, you may have all the nodes within our network working for your DAP. Here are some other key differences, too. Your scale chain is just one of many.
00:01:32.250 - 00:02:16.406, Speaker A: So one of many means that one node can run up to 128 different scale chains. And we'll get into more about that later. But for your scale chain, you're able to process transactions by deploying smart contracts, use our file storage, and even use interchange messaging for managing things like ERC 20, ERC 721, or dive to dive a little bit more into the node architecture, though. One of the things that we did was we made it easy for you to only pay for what you need at that time. So if you decide that you want a small scale chain, you'll get 20 transactions per second. And if you want a large scale chain is 2000. But if we dig deeper into that node, that node is doing multiple things.
00:02:16.406 - 00:03:07.622, Speaker A: The first Nord orchestration is connected to Ethereum, so you can kind of think of scale as being adapt deployed to Ethereum. That validator orchestration basically manages the nodes that are going to be grouped together to run your scale chain. The node auditing piece means that each node is monitoring 21 other nodes within the network. And for the scale admin, that's where the fun happens for you, because you're able to deploy your solidity based smart contracts directly to scale and run them just as if you were on Ethereum and also use file storage and interchange messaging. So let's go a little bit deeper here. For a validator, they could either be grouped together to one, one scale chain, or they could have multiple scale chains running on that. So this middle one is more or less what most validator nodes will look like within our system.
00:03:07.622 - 00:03:50.710, Speaker A: And if they just join, as you can imagine, they don't have any scale chains running yet, but they're open to be able to be selected. Now, more information about this can be provided at the booth. If you're interested in validating with scale, please come talk to Abru Ingwal. She's in the crowd over there, and she'll be able to give you more. Okay, so, but this is a Dap workshop, so let's get into the fun parts about how to deploy on scale at East Denver. So again, just to kind of set the stage, I'm going to do a live demo showing you how to deploy using rinkby and truffle. And then I'm going to show you how to turn all of those learnings into a real live game that's 3D based off of unity and scale.
00:03:50.710 - 00:04:26.140, Speaker A: So let's switch gears here. All right, there we go. So if you want to try to follow along during this workshop, go to scale network Eember, and you can get a scale chain right away to hack at this hackathon. Or follow along here and bear with me just a moment while it comes back up. Yeah. Okay, so there we are. Looks like we're back.
00:04:26.140 - 00:05:07.010, Speaker A: Okay, so again, if you want to follow along, looks like everyone had enough time to get a scale chain. What you'll get is a scale chain that looks like this. You'll have access to your scale chain via four different ports. I'm going to use the HTTPs one during my demo. And let's go ahead and bring up the scale documentation. So, scale docs, if you go to our portal, in order to understand how to deploy to scale, all you'll have to do is click here on smart contract scaling, and then go to get started and start as a beginner. From here, we've scaled it down to just four simple steps to get up and running.
00:05:07.010 - 00:05:38.660, Speaker A: The first one is simply get your scale chain, which you've already done, and the second one is prepare your scale chain by transferring ETH. So I'm going to walk you through doing that. It's really simple. You essentially put in your scale chain here, copy an account, maybe from metamask, and then from there you're able to transfer ETH. Once you do that, you're able to use your scale chain just as if you're on ethereum. So I'll show you how. I'll use a rinkby first, and let's increase the screen size.
00:05:38.660 - 00:06:09.200, Speaker A: All right, so I'm going to start small with creating a coin contract. This coin contract allows me to send, mint and view the balances of a coin. So if I go to metamask, I'm on Rinkby. Let's test that out with rinkby and see what happens. So here there's a gas cost for deploying the smart contract. Great. And one of the things we're going to have to do is wait a little bit, which is fine, but at a hackathon you're usually pressed for time.
00:06:09.200 - 00:06:36.280, Speaker A: So instead of waiting, what we're going to do is switch over to scale. So in metamask, it's just as easy as entering a custom RPC. Pasting the. And let's go back here pasting your endpoint here, and let's do that again. Custom RPC paste the endpoint. Let's go ahead and give it a name. And that's it.
00:06:36.280 - 00:07:18.210, Speaker A: So once it switches, then we're able to redeploy that smart contract using scale. And one of the things you'll notice is that in scale, there's no idea of cost for the end user because it's already paid for when you decide to spin up your scale chain. So think of it as Amazon for AWS, for blockchain. But instead of having to wait when I hit confirm or send any transactions, it happens in near real time. But most people here have probably already worked with other complex tokens, such as ERC 20, ERC 721 Dai. So let's see what it looks like deploying something as complex as that. For that, I'm actually going to switch over to truffle.
00:07:18.210 - 00:08:31.060, Speaker A: And here I would have to follow the same exact process as I did for remix. So what I'm going to do is enter in my endpoint here. And because it is just as easy as deploying to any other network, I'm able to copy a configuration I've already created, rename it to scale, and point it to my scale chain endpoint. And it really is just as simple as that for getting started if you're using something like a truffle bot. So if I switch over now to my command line here, and let's make this bigger so everyone can see I'm able to use the exact same tools in the exact same way as I would for Rinkbe or Ethereum. So I'm going to reset my scale chain and I'm going to deploy to, instead of rinkby or Covon, I'm going to deploy to scale and give that a moment. And one of the benefits you'll get by doing this too is that just like with deploying via Rinkbe on truffle, it's just as fast.
00:08:31.060 - 00:09:25.890, Speaker A: Now, instead of just deploying one simple smart contract, if I come in here because we're using openzep lens standards, it is actually deploying all of these different smart contracts that's attached to my ERC 20 smart contract. And as you saw, it happened in near real time too. So how can we take this a step further? We have an ERC 20 smart contract. How can we use it on scale? Well, if you go to our dev portal and go underneath products interchange messaging, we explain an easy process for being able to manage your tokens in scale, which means that you'll decrease costs and also speed up the transaction for using that token in your app. So let's see what this looks like. I have a live demo here that kind of walks you through this four step process for being able to manage a token on scale. The first thing you have to do is deposit it.
00:09:25.890 - 00:10:07.882, Speaker A: And so if I go back to the documentation here, the first thing is deposit. The second thing is we create a clone on the scale side. So that way you're only working with clones and then you're able to exit from the scale chain. So I'm going to show you step one and two. And if you're interested in learning more about this, we have more workshops at the scale booth. So please drop by today at 05:00 okay, so here, this deposit smart contract interacts with our interchain messaging feature where it's deploying that same my ERC 20 smart contract that we just deployed earlier, user truffle. But instead, what I'm using is a function with interchange messaging to be able to lock that up on Ethereum.
00:10:07.882 - 00:10:43.162, Speaker A: One of the benefits to managing the token on scale is that the token never leaves Ethereum. Instead, it stays there in a safety deposit box. And then on scale, you're able to interact with clones in near real time. Meaning if you transfer that token a million times, you are able to see that transfer happen in less than a second. But more importantly, let's say you transferred a million times. Instead of having potentially a million dollars in transaction costs on Ethereum, you decrease that down to $2 because there's just the transaction cost for the deposit, and then at the end the transaction cost for the exit. And so you can see this here.
00:10:43.162 - 00:11:13.090, Speaker A: And I'll make this bigger. Now, the reason why it took longer here is because with rink fee, we're still at the mercy for whatever that transaction speed is there. But on scale, once it's here, it operates in near real time. So as you can see, my account balance increased from nine to one. So let's show you what that looks like in a real world application. And I'm going to switch over to unity. Do we have any developers out there that have played around with unity or heard of it? We have one a little bit.
00:11:13.090 - 00:11:23.986, Speaker A: Great. Okay. Two. A few. Three. Okay. If you haven't heard of Unity, you've most likely played a game on it because it's used to create 3d apps for most gamers.
00:11:23.986 - 00:12:17.462, Speaker A: But what's missing from it is the ability to understand how to actually connect blockchain to something as complex as a Unity game development tool. So here I have my world and what I'm going to do is just kind of zoom out so you can see it. And we're going to play this in a moment, but essentially it's a racetrack, so I'm going to zoom back into my cart. What's on this racetrack, though, that's really unique, is that we have scale coins that is tied to that erc 20 contract that we deployed that you're able to gather if you actually hit it while racing. So let's zoom in on this token to see what it looks like. This is what the token looks like, but if we go over to the code here and let's increase the size. So this is the contract that it's attached to my ERC 20 smart contract that you just saw me deploy.
00:12:17.462 - 00:12:57.142, Speaker A: I deployed it earlier, so I have different byte code for that. But what it's connected to here is a class that allows me to interact with that token and transfer it every time that a user hits that token. And this is just using an Ethereum package where if you're a C sharp developer, it allows you to connect Unity games or any net application directly to Ethereum or in our case, scale. So instead of using Ethereum, we're going to be using scale for this game. So let's go back to the game and let's see it work in action. So when I hit play, give it a moment. I want to draw your attention to a few things.
00:12:57.142 - 00:13:19.898, Speaker A: First up here we have a block time. Well, a block block count. And here we have the balances, where if you remember, it matches exactly what I see here. Again, it's attached to the scale interchange messaging feature. So here we have our balances, we have our tokens. On the racetrack we have a bouncy house, which is pretty fun. So let's go ahead and play.
00:13:19.898 - 00:14:12.878, Speaker A: Now, I'm not the best driver, so I probably won't get all of the tokens, but notice what happens as I start to get the tokens. You start to see a transaction appear at the bottom, and as you see on the right, the block count or the scale token count is actually increasing for that ERc 20 token, as I actually get that on the racetrack. Now, again, I'm not the best driver, but if you want to try to win and try this game out yourself, please drop by the booth. But essentially that's just it. Using scale Unity and Ethereum, we're able to connect the blockchain to something as complex as a 3d application in a real world. So again, thank you. So happy to provide the code example if anyone's curious with trying this out.
00:14:12.878 - 00:14:54.602, Speaker A: With unity, you're able to build an application using C sharp or JavaScript. Unfortunately this is C sharp, but JavaScript implementation is just as easy. But I do want to remind you that if you want to get a bounty, please feel free to download or get your own scale chain here. And at a future conference we'll be able to have a leaderboard where anyone that tries this out can win some tokens and actually transfer it back to their account on Ethereum. So I'm going to reset this game so we can play this later. And what that reset is doing is interacting with interchange messaging to transfer the tokens back to the original account. So that way we can just play it again and we'll make it smaller so we can see a change.
00:14:54.602 - 00:15:48.878, Speaker A: And as you can see there, it's just reset. All right, so let's wrap this up. Okay, so that's it with just making a few changes, you can deploy on scale using remix, truffle or any ethereum tool that you have, and you can also incorporate it into a more complex game such as Unity. Now, I do want to open it up for Q and A in just a moment, but again, here's the link in case you missed it the other 100 times for being able to download or get your own scale chain. And then if you want to follow us, follow us on Twitter at scale network. Okay? And then lastly, here are the bounties. We have five prizes for 500 die and two super bounties for 1000 die.
00:15:48.878 - 00:16:17.140, Speaker A: And literally all you would have to do is potentially link into your scale chain using something like remix or truffle, and it will just be as easy as I just showed you. Now, Jack O'Holleran, CEO of Scale Labs, he's going to be giving a more in depth talk about how scale works. So everything I glossed over here, he'll go into more detail later. All right, any questions out there? No? All right, well, thanks for your time.
