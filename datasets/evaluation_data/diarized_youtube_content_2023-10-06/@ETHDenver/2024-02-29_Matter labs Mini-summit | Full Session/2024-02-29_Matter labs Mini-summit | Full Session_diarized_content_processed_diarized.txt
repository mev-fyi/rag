00:00:06.730 - 00:00:48.778, Speaker A: Hello everyone. Welcome to the first ever ZK mini summit event. We are so happy to have all of you here and to give you some background. ZK mini summit came from a few brainstorming sessions with idea of how we can give back to the ZK community. Today for like 3 hours, we are going to have different topics with thought leaders of the space. But to set you up for success, we are going to start with a presentation or like a book reading of zero knowledge proofs. Explaining like I'm five and for you to follow along.
00:00:48.778 - 00:01:24.786, Speaker A: Under your seats you will find a bag. And in the bag there is a book. Yep, that's it. Dustin, you got it. So I would encourage you to open the book and get ready for the first session. Let's invite to the stage Marchin, who's the chief protocol architect at Matterlabs and who's the author of the book. Okay, thank you, folks.
00:01:24.786 - 00:01:55.938, Speaker A: So, yes, as Abiona mentioned, please check under your book. This book started a little bit as a joke when I was trying to explain zero knowledge proofs to one of the coworkers. Let him be unnamed for now. And something that started as a joke very quickly actually turned into like, hey, maybe we should make a real thing out of it. And that's how this book is created. So as the title says, this is zero knowledge proof. Explain me like I'm five.
00:01:55.938 - 00:02:20.146, Speaker A: So it will give you some basics to start, but you're going to need to learn a little bit more before you can actually create a real circuit. So just to get the expectations right. Having said that, over next couple of minutes, we're going to go for the book. I'll try to do the reading part. There is not much text in there. It's mostly for children. So it's mostly focused on images.
00:02:20.146 - 00:02:40.880, Speaker A: At the same time. There are some questions. Please do not hesitate to ask. I think we going to have at least one or two mics. And also there will be also questions available afterwards. So without further ado, let's get into the book and let's explain you zero knowledge. Like I'm five.
00:02:40.880 - 00:03:12.620, Speaker A: So imagine, Albie, so forget about zero knowledge. Forget about blockchains for a second. Just let's go back, children. Let's go. Imagine a zoo that has many animals for zero knowledge. We actually called a zoo a circuit and the animals are gates. Now imagine we also had.
00:03:12.620 - 00:03:32.640, Speaker A: Imagine we also had boxes, basically three types of boxes. There are boxes that have a hidden number. There's a hidden number in a wooden box. These we call the variables. We also have glass boxes. They also hold a number. But for glass boxes, you can actually see what's inside.
00:03:32.640 - 00:03:51.510, Speaker A: We call them public inputs. And then we have stone numbers. These don't change. These are clearly visible. You cannot actually modify what's in there. And these we call constants. Now, we had a set of animals, and now each animal has a special power.
00:03:51.510 - 00:04:30.900, Speaker A: Animals can look inside the closed boxes and then depending on the type of the animal, they can be happy or sad. For example, we have equal zebra. So equal zebra is happy when two boxes have the same value. Now, if they don't have the same value, equal zebra is sad. Now the important thing here is you don't know what's inside the box, but zebra does. So animals can also look at the glass boxes. They can also look at the stone numbers.
00:04:30.900 - 00:05:15.454, Speaker A: And as I mentioned, each type of the animal has a different mathematical expression tied to it. So we have not greater than crocodile. And the crocodile is happy when the right number is bigger than the left number. And this is where the first part of zero knowledge comes in, is you don't know what's the number in the bottom box, but you know that the bottom crocodile is sad. So whatever that number is, it must be smaller than five. Now the important thing to remember is you don't see the values, but crocodile does. Now we can have far more complex animals.
00:05:15.454 - 00:06:00.634, Speaker A: Let's say the spider can actually look at four objects at the same time. It's the if spider. If the top box is zero, it would like to have the left and the bottom box to be equal. If the top box is one, it wants the right and the bottom box to be equal. So look, the spider is happy. So here's the question to all of you adults in the room, can you guess what number is in the top box? Yes? No? Okay, so in this case, we call a spider a selection gate. Now, there are plant.
00:06:00.634 - 00:06:38.406, Speaker A: The zoo has a lot of animals, right? We have beavers for divisions, squirrels for modules, caterpillars for additions, and many, many more. And we can put all of these animals into more complex setups, basically creating complex circuits. If all animals are happy, this means that the circuit is fulfilled. The thing is that we don't need to see the values in the boxes, but we can just look at the animals. And what we say is if they are happy, it's good. And we can almost take a picture of the animals. Remember, the picture will not reveal what's inside the boxes.
00:06:38.406 - 00:07:00.482, Speaker A: It will show you what's in the glass box. It will show you what's in the stone numbers. It will show you the happiness of animals. It will not show you the contents. And we can call this photo of all these happy animals a proof. So, basically, proof becomes a photo. But enough talking.
00:07:00.482 - 00:07:32.138, Speaker A: Let's actually build a circuit to solve the real life five year old problem. How to make sure that my sister split the candy equally. So here's the problem. Your mother left some candy. Your sister decided to split it between you and herself, how to make sure that she did a good job. So here is a simple circuit that takes care of this. So mom's candy is on the left.
00:07:32.138 - 00:07:51.940, Speaker A: You don't know how much she left to you. But what you know is that there is a squirrel on top. There's the modulo two. There's the beaver at the bottom. There's the division by two. There's some sister candy that you don't know. There's also the caterpillar ad on top.
00:07:51.940 - 00:08:29.774, Speaker A: So if the circuit is correct, if all animals were happy, then whatever values you got should be correct. But let's take a look. If we actually zoom in, imagine your sister put numbers in these boxes. We don't know what number she put, but the one that I'm getting is not correct. The beaver is sad. She did something wrong. Actually, if you spend a couple more minutes for adults in this room, spend a couple more minutes.
00:08:29.774 - 00:09:00.380, Speaker A: You can actually see that there's a small problem with this, but I'll leave it as a homework. This actually means that sister gave you more than her. But anyway, you can take a look and try to prove it to yourself as a homework. But now if we go to the next slide, this is the positive outcome. Again, we don't know how much candy mum left. We don't know how much candy sister got. But if all animals are happy, this means that the two candy that we ended up with is the right value.
00:09:00.380 - 00:09:35.200, Speaker A: Now, in practice, you probably heard about different ZK systems. Now, the way you can think about them is like, different animals. You've probably heard about plunkey, heard about Halo, think about them. Same concept animals, gates, whatnot. They are just different, just different types. And there are a lot of different provers. Because remember, the proof is the photo of happy animals.
00:09:35.200 - 00:09:59.720, Speaker A: And there are different cameras that you can use to take the photo. You probably heard about snarks, starks, fries, kzgs. That's where it comes in. That's the technology that's used to take the picture. So next time someone is telling you, oh, I have a snark, with blonky, you're like, oh, sure. So you use this camera with these animals. Got it.
00:09:59.720 - 00:10:39.628, Speaker A: Next. So now that we know the basics, let's talk a little bit about how these circles are created. So you can imagine that there are zookeepers. So zookeepers, they create new animals. Let's not get into details how they do that. Let's say they just create new animals and they create the scenarios. They figure out, okay, these animals with these boxes, now, we call these zookeepers circuit builders, or crypto people, and they are also visitors.
00:10:39.628 - 00:11:16.860, Speaker A: So once circuits are created, the visitors arrive and they can actually put numbers in the boxes. So if you're a visitor, you're coming in, you're putting a number in each box, and then you take a picture of the happy animals. If all animals are happy, this means that the values that you put in the boxes were correct. Again, you don't have to reveal to anyone what values you put. Animals are happy, values are correct. And the only thing that shows up on the photo are all the happy animals and the public inputs. And this picture is what we're calling a proof.
00:11:16.860 - 00:11:59.740, Speaker A: Now, there can be mistakes, a very common mistake is sorry, there can be a mistake that zookeepers do. For example, imagine they put too many animals. This is what actually called over constraint. And in this scenario, you cannot come up with the numbers that make all animals happy at the same time. Like, look at this example. What kind of values can you put here to make both crocodiles happy? Answer, you cannot. This is called over constraints, and you will not be able to generate a proof for such invalid circuit.
00:11:59.740 - 00:12:42.180, Speaker A: There are also other bugs, like a missing animal. If you want to earn a million bucks, find the missing animal. I am not joking. The examples of different bounty hunting for ZK proofs are all about finding the missing animal. That if it's not there, you can actually put fake values in the boxes and all animals will be still happy. Because again, if one is missing, you will not be able to get that right. So this is a very bad scenario.
00:12:42.180 - 00:13:37.560, Speaker A: And we call this under constraint. And in systems, it can lead to invalid state transition being accepted, invalid state being committed to blockchains. So when you try to explain to your kids, what do you do at work? It's, I'm looking for missing animals, honey. Now, real circuits have thousands upon thousands of animals, so looking at the picture to see all of them happy or sad would be very slow. That's why we have Zeke. Zeke is a special animal. Zeke can actually look at the pictures of other animals and be happy if all of them are happy, and be unhappy if at least one of them is unhappy.
00:13:37.560 - 00:14:19.160, Speaker A: So we call Zeke recursive proofs, or aggregate proofs, as a special power. So, remember, it can look at a picture with lots and lots of animals and just be happy or unhappy, depending on their whole state. This means. But now the tricky thing is that Zeke, one Zeke, might not be enough, because it can look only at thousands. But with millions of animals and huge gates, we can actually have Zekes looking at other zekes, meaning we can have. Zekes can look at the picture of themselves. So we have Zekes looking at Zeke's looking at animals.
00:14:19.160 - 00:15:00.470, Speaker A: And that's what we start getting into recursive proofs. In practice for systems like ZK sync, we can have Zeke looking at Zeke looking at Zeke looking at animals. So, like, four levels. Out of curiosity. So that's why at the end, we have one Zeke to prove them all. One Zeke on top of the circuit to prove that if he's smiling, then all the Zeke's below must be smiling, and all the animals at the very bottom must be smiling. And this means that the whole state transition, all these animals that we had at the very beginning, all these small transitions, they must all be correct.
00:15:00.470 - 00:15:52.420, Speaker A: So this checking that the last Zeke is smiling is what we call proof verification. And this is what's done on ethereum. This way, the only thing Ethereum has to do is to look at one Zeke, and that's it. So if you want to learn more, if you go to this link, you can actually see a web page with both the book and interactive quizzes. So you will find an animals in there, and you can put things in the boxes, see if they are happy or sad, and try to solve some of them. So, with this, I want to thank you all. Thanks for coming.
00:15:52.420 - 00:16:19.352, Speaker A: I hope this was useful. I hope that, as I said, it's a little bit different approach to how zero proof proofs work. You're not an expert yet, but please wait for two more books. Eli nine and Eli 15, and then you will be there. So, thank you. Yeah, we're close enough. Hey, everybody, my name is Nick.
00:16:19.352 - 00:16:38.964, Speaker A: I am here to present as Albie introduced dumbass crazy ideas for on chain dapps. Right. So, little intro about myself. My name is Nick. I'm a software engineer for Matterlabs. Here's my socials and website down there. I am relatively new to web3 about six or seven months in.
00:16:38.964 - 00:17:06.150, Speaker A: And I'll sort of talk about that as I go through my presentation today. For those who want to follow along. This is a QR code to download these slides. We're also going to post these online, available after the presentation. But if you want to follow along now, feel free to scan this. Leave it up for a few seconds. Cool.
00:17:06.150 - 00:17:47.676, Speaker A: So what am I going to be going through today? I'm going to talk about why did I do this presentation? And then I'm going to go through some of these ideas at the very end. I'm going to wrap it up with some takeaways that hopefully we can all walk away with. So why did I do this presentation? Right. Kind of goes back to I had first joined Matterlabs and I had $100 worth of eth. I wanted to figure out a way to spend that money. I looked for a bunch of different games that I could play on chain. I am very passionate about gaming.
00:17:47.676 - 00:18:22.300, Speaker A: I wanted to see if I could support the local developer community. If there was like an indie game that was available, I thought, you know what, I would love to give them my money. So I started going and looking through some of the dapps that are available and honestly, they were not great. Most of them just ended up not working or if they did work, were just NFT shills. It wasn't fun and I just wanted something more out of it. So I started looking beyond gaming. I started looking at other kind of dapps that existed out there.
00:18:22.300 - 00:19:23.836, Speaker A: They were mostly finance based or finding ways to swap tokens or trade nfts. And it really felt like there was this lack of innovation that existed. It wasn't something that I really felt passionate about giving my money to and I wanted something fun, right? I wanted to spend my money and I didn't know how or where to. So before going a little further into the presentation, I want to talk about my mental model, about how I've come to think about web3. So for me, I think about web3 and specifically smart contracts as kind of like AWS lambdas. So for those who don't know, AWS Lambdas are this serverless computing functions that exist, hosted by Amazon, and they're super convenient and easy to use. In the Smart contract world, we have these calls and transactions for something like an AWS lambda.
00:19:23.836 - 00:20:05.660, Speaker A: What that really equates in my mind to know every call is a get request. You're getting information. Every transaction is a post request. You are making a change to the data that exists on chain. The difference here is who pays for making sure that these services exist? In the AWS Lambda world, it's whoever is paying for the Amazon account, your AWS account, you get billed at the end of the month. Smart contracts, you have to pay upfront. You don't pay for the calls, the get requests, but you are paying as a user, the transaction costs, those post methods.
00:20:05.660 - 00:20:55.864, Speaker A: Now, there are differences, right? With an AWS lambda, you can invoke them with HTTP requests, with events, or even through a scheduler. That's not the same with smart contracts. You can execute them or start a smart contract function from an HTTP request. But there is no way to call a smart contract function from an event that has happened somewhere else on chain. There is no way to just start and execute a smart contract function based off of a cron job. It needs to be initiated by the user. Another limitation is you don't have the full access to the resources like you would with an AWS lambda.
00:20:55.864 - 00:21:50.336, Speaker A: In AWS Lambda, you have access to potentially gigabytes of RAm. But in smart contracts, we're talking about, right, you have to live within these sort of restrictions of the current system right now. And that sort of gets me to the next point, which is I'm looking at these apps and we have this sort of constraints that are built into the system, these limitations. But from my experience as an engineer, I've always seen that these limitations often foster creativity. And I'm not seeing that, but let me sort of talk about what do I mean by limitation fosters creativity. So there is this amazing YouTube interview by Ars Technica. They sat down with Andy Gavin, who is the co founder of Naughty Dog.
00:21:50.336 - 00:22:41.692, Speaker A: This is the team who created the Crash Bandicoot series. And they wanted to go through the war stories of what it was like to develop the original crash Bandicoot for the PlayStation before the PlayStation ever even got released. Right? This game launched at the same launch day as the PlayStation. So for them, they had similar restrictions and their mentality, their philosophy at the beginning was no cycle of cpu, no gpu or byte of memory would go unused. They would find hacks, they would find tricks to get to every single piece of resources that they could, whether they were supposed to or not. So one example of that was limited memory access. That's something that I had just talked about with Ethereum.
00:22:41.692 - 00:23:14.968, Speaker A: And what was the case for the PlayStation was the PlayStation only had two megabytes of onboard memory on the console. Now, the disk of the game had about 640 megabytes. The game itself was about 60 megabytes. So most of it was like 90% empty. But the problem and the constraint was really this two megabytes of ram, because the cpu and the GPU of the PlayStation could only ever access the ram. It couldn't access the data directly on disk. Right.
00:23:14.968 - 00:23:36.156, Speaker A: It just wasn't possible with the interfaces. It was too slow. It takes time to get data from the disk down to the ram. So what did other companies do? They lived within these sort of boundaries. They built game levels that only had two megabytes worth of assets. So the original PlayStation games, the majority of them, were very small. They had to fit in two megabytes.
00:23:36.156 - 00:25:03.308, Speaker A: But what did Andy do and his team? They basically found a way to update the entire custom memory schema where they had 64 kilobyte chunks. And as you were walking through a game level, it would hot swap chunks of data that you would need directly from disk. So, in essence, by building out this hot swappable memory, you now had access to much larger game designs, much larger game levels, and they were doing things that no other game could at the time because it forced them to. Right. So I ask the DAP developers that are out there, what if you didn't have these constraints that we have currently with Ethereum? What can be done? So that gets into the first crazy idea, what I'm calling z 64 it is. What if you could have an on Chain Nintendo 64 emulator? Is that even possible? Right. So where does this idea even come from? Where did I come to this? Like, yes, I'm passionate about gaming, but why the Nintendo 64? And one of the things that I had mentioned before is this idea that anytime you interact with a transaction, it's coming from a user, right? So video games today, whenever you are trying to save a game, typically you walk through and it's just auto saved as you go along, right? That's not how it used to be.
00:25:03.308 - 00:25:52.636, Speaker A: Whenever you played these older games on the Nintendo 64, you had to open up the menu, you had to choose save, you had to click yes, and you had to wait as the game is being actively saved on memory, and then you wait for that transaction to complete, and then you go about your day. People were just used to that. That is the flow. That is the limitation that they were used to. That is very similar to what we're seeing right now with Ethereum and transactions. So what can we learn if we look at the Nintendo 64 and I guess the game building model of these sort of similar interactions and restrictions? So I basically started from there, and it turns out it's kind of possible. The first thing I realized is that there is a webassembly emulator for the Nintendo 64.
00:25:52.636 - 00:26:18.964, Speaker A: So it is called n 64 wisem, by the way, if you go look it up on GitHub, but it allows you to fully in a browser emulate the Nintendo 64 and play games in the browser. I was like, all right, awesome. All I have to do is make a website and host that on chain with this Javascript. Cool. Make a website with boss gg. All right, now that's fully on chain. All right, that solves that problem.
00:26:18.964 - 00:26:53.440, Speaker A: I now have an emulator that is fully on chain that I can pull up through the browser. Next problem. What if I need to save the game at any point in time? Well, it turns out to save a game is about 16 megabytes. This is a problem because approximately that's going to cost you about 32 grand just to save the game once. Now, it's still feasible. This is crazy. You probably wouldn't want to do this just for one single game, but it got me thinking, and I started talking about this with some of my coworkers.
00:26:53.440 - 00:27:46.288, Speaker A: You can actually use a validium, and actually, if you don't need this data to live on l one, which I don't know, if you need your ocarina of time game save state all the way up to l one, it can just live off chain. Then these transactions go down to be pennies, right? That's the majority of this cost where it's coming from. So theoretically you could have a fully on chain Nintendo 64 emulator experience. All right, let's go into idea number two, the burner phone smart wallet. So for those who are not familiar with what a burner phone is, it's this prepaid phone that you can buy, typically for cash at a local gas station that people use and then throw away once it's done. And it has a lot of implications behind it, but that's the general idea. Could you have that sort of experience? I don't know what the need is.
00:27:46.288 - 00:28:47.350, Speaker A: I'm not going to speculate. But could you do this for your smart wallets? Right. And as I start thinking about it, it's really, could you have prepaid gift cards for smart wallets where you can only put in money once, and then from then on out, the funds can only exit, right. Technically, it's possible with some things like account abstraction, you can control with logic, the ingress and egress of your transfers. You can add business logic in there to say, hey, you can actually do this if you really wanted to. Idea number three, what if your smart contracts changed ownership randomly? Now that's really really scary for some people because there is a lot of money typically associated with a smart contract. And handing over an ownership of that contract means you are now exposing and handing over the ownership of that money.
00:28:47.350 - 00:29:17.916, Speaker A: But just leave it up to rngs and it's totally possible. That's a terrible idea. I would not recommend this at all. But what if the ownership of it changed every single day? Did you just create like a lottery system by doing this? Right. And along the way, as I was thinking about how to implement this, I started learning about different ways for role based access. Right. This concept of ownership can be defined in a few different ways.
00:29:17.916 - 00:29:51.850, Speaker A: And there are different ways of having role based access. Also, you would need to have some sort of scheduler, right. I had mentioned at the beginning, like, you can't just execute a smart contract function fully on chain based off of a schedule. However, after going through some of the research, it turns out that there are schedulers that are available as a service. It will exist off chain, but they do exist. And I started going down this rabbit hole of, okay, technically this is possible. I don't want to do it, but it's possible.
00:29:51.850 - 00:30:35.456, Speaker A: Another idea, what if there was an automated cat feeder based on EtH tips? So imagine you had animal shelter where there was a webcam stream pointed at a bunch of cat feeders, and on this website you could donate or tip Eth and that would automatically dispense some snacks and then the cats would interact. This would sort of as imagine me at the beginning where I wanted to spend that $100. I would love to have donated that money. Right. It's going to a good cause. It's going to keep that animal shelter open. But it's also that instant gratification.
00:30:35.456 - 00:31:24.000, Speaker A: Once that transaction goes through, you're going to see, oh, the food gets dispensed and the cats are happy and they're all playing and probably might be fighting each other for the food, but it's rewarding and I know where that money is going. Right. And the money that you're distributing for something like this, it could be used for keeping the website running, the power, the maintenance. Anything else just goes to the animal shelter like I described before. And who's to say this has to only be an animal shelter? For those who might have been at Devconnect in November in Istanbul, there are a bunch of know wild cats that just roam the streets. They're totally friendly, they'll walk up to you. They're at most any park.
00:31:24.000 - 00:32:36.616, Speaker A: But who's to say the same setup can't be set at a remote location where these cat hotels sort of exist in these parks. All you need is someone to constantly fill it up and it's the same experience. And then I heard this whenever I pitched this to a few of my coworkers. So if anyone wants to do this, please feel free. Another one is this idea of a timestamp. Oracle so what if on chain, your smart contract or your application had access to the current timestamp down to the 100 milliseconds? Right now, the only way you get access to a timestamp is what is the current block timestamp? Depending on what network or what protocol you're using, that could be a few seconds apart, right? It's not an accurate timestamp to what the actual time is right now. It's just when was the last block mined? And what you'll really need here is a network that can handle hundreds if not thousands of transactions per second, because again, you're hitting this at 10 hz, so ten times a second to be able to have that sort of frequency.
00:32:36.616 - 00:33:27.310, Speaker A: But what could your application do if it had the most latest up to date current timestamp on chain? Another thing that you might realize is this is going to get expensive. I'm making ten transactions a second. I can't keep this up forever. Even if I wanted to sponsor an application like this, put in the funds, that's going to drain my account real quick. But that's when you start diving deeper into applications or networks that have state diff based fee models. So with these sort of models, you start learning that, oh, you only really get charged for the difference in the data at the beginning and at the end of your batch. So even though you're updating it ten times a second, if the batch is, let's say 2 seconds apart, you're only going to get charged for the beginning value to the end value.
00:33:27.310 - 00:34:45.930, Speaker A: Another idea, what if your biometric telemetry, your health telemetry, is fully on chain? What if similar to that Timestamp oracle, it is constantly being updated and just available, right? Well, let's go into some examples. So what if you could prove that you exercised at least three times a week, right? Is that cheaper life insurance? What are some applications behind that? Is there any way to anonymize this data? Right. That was the basic. As soon as I asked this crazy idea to some of my coworkers, it's like I didn't want to do that. I don't want anyone knowing this information that's very private that's PII. But maybe if we anonymized it, that could work. What if also, you use this as a reward system? What if you built an ecosystem where if you proved your heart rate was above normal for 30 minutes a day, then after a full week, you get a small prize pool that gets distributed between all your friends, and it incentivizes all of you to make sure that you're exercising at a constant pace and you're keeping each other credible as you're going through this.
00:34:45.930 - 00:35:41.610, Speaker A: So here are some final thoughts. Here are some takeaways that I want to make sure that I sort of COVID here, which is one, get creative. Don't constrain yourself to the idea of just the limitations of the system. Don't be afraid to share these crazy ideas. Something like a hackathon is perfect for making sure that you feel like you can just try something for the sake of trying something. And Ethereum's ecosystem and the feature set is just expanding rapidly, so take advantage of it, right? State diff based fee models or validiums or whatever, all these examples that I went through, those are becoming a reality now. So understand what they are and try and use them.
00:35:41.610 - 00:36:57.632, Speaker A: Another big one for me is we're better than just another finance dap, right? None of these ideas were like finance based, but I really cringe at seeing another just NfT shill sort of app that's calling itself a game. And lastly, asking these crazy questions or crazy ideas is going to help you learn something new and think differently. Whenever I bring this presentation up with my coworkers, I left every single time knowing something different, whether it was, hey, that actually existed about two years ago with this one side project, or, hey, actually that might be possible now because we're going to have something like validiums. So one final note is ZkQuest, for those who haven't signed up. It is a web app that we built just for ETH Denver, where you can go and complete coding challenges and puzzles to earn ETH. This is something that we sort of built together as a different approach to hackathons. So if you want to sign up, the booth is going to be here all week.
00:36:57.632 - 00:37:32.430, Speaker A: It's going to be down that way. You probably have already seen it. And thank you. Good, he's getting pressure here. And we are back with the next panel. Thank you very much for your patience, everyone. Let's get a round of applause for everyone who joined us today.
00:37:32.430 - 00:38:18.156, Speaker A: This panel is called ZK. Snarks rule everything around me that Vitalik presented at Edcon in Montenegro, and we were very inspired by that. That's why we decided to bring thought leaders of the space, starting with Jason, Zach, Ben Jordy and Benedict Porter will be the one who is hosting the panel. So let's just welcome them again and let's hear what they say. All right, welcome, everyone. I'm super excited because basically, the way this panel was created was I got to ask all of my favorite guests, and they all said yes. And we're going to talk about how Ezekie will rule the world.
00:38:18.156 - 00:38:36.508, Speaker A: But first, we will do the slightly boring intros. So if everyone could just say your name, introduce yourself, and your project. Yeah, I'm Jason Morton from Ezekiel. It's a project to make AI verifiable and private with ZK. Cool. Hi, I'm. Yeah, I'm Zach.
00:38:36.508 - 00:39:10.360, Speaker A: Does this need to be a boring intro? Extra boring? Who here's heard of Aztec? Yes. So, yeah, that's my jam. So, yeah, I'm a CEO, co founder, and our mission is to add strong privacy guarantees to this wonderful distributed world computer that we're all building and using. Ben Lipstotz, VP of research at ZK Singh. I'm Jordan Valena. I'm the technical lead at Polygon ZKVM. We're trying to just scale Ethereum.
00:39:10.360 - 00:39:37.910, Speaker A: That's the main goal. And, yeah, I'm very much a developer, engineer, and Ethereum fund. I would define myself, yeah. My name is Benic Buns. I am one of the co founders of Espresso Systems. We're building a shared sequencer for ZK roll ups, but also rollups in. You know, I have some takes on where ZK actually doesn't rule everything, where you need other tools, such as consensus to solve some issues.
00:39:37.910 - 00:40:02.172, Speaker A: But I also have a second head. I'm also a professor at New York University where I work on zero knowledge proof. So I also do believe that ZK will just rule a lot of things. Nice. Welcome, everyone. So we will have some spicy takes. I know a lot of these people have been on a lot of panels before, and I don't want this to just be another boring panel, but starting off, we're going to.
00:40:02.172 - 00:40:23.120, Speaker A: Panels are very exciting. Right, sorry. Very exciting panels. And we'll swap seats around, and then we go speak the same stuff at the next conference. But anyways, let's zoom out and let's go 2030 years in the future. And I want you guys to imagine all of your dreams come true. ZK has taken over the world, or however much Benedict wants it to.
00:40:23.120 - 00:41:17.030, Speaker A: And so your engineering goals are hit, all of the things that you want to happen. What does the world look like at this point in time? Sure, I'll start. So, one of the things we think about is not just AI, but kind of general analytics that can be done in ZK. I think one kind of final scenario for ZK is that it completely replaces all the kind of ERP databases, everything that lives inside, in between companies. And so every time you look at a financial statement on edgar, you know that that number underneath it is a proof of every single transaction that went into that number. And I think that would be an interesting new foundation for the economy. It would allow a lot more trust as well as confidentiality, but trust in the numbers that were presented in investments and in other decisions that we make.
00:41:17.030 - 00:42:19.080, Speaker A: Yeah, good answer. What is blockchain really for? I would say that it's a coordination engine and it's trust infrastructure. And at the moment, it's a very primitive, limited coordination, and it provides limited trust because of lack of strong privacy guarantees and limitations with scaling and data. And ZK can solve all of these. So where are we going to be in 2030 years? We're going to be in a world where it's much harder to create a monolithic company that leverages its profits through information asymmetries. If we succeed, I hope we create a world where users are much more in control of their own data. Once that becomes practical and possible, I suspect that there's going to be a strong push to make it inevitable.
00:42:19.080 - 00:43:35.070, Speaker A: People are going to be much closer to the institutions and structures that they are governed by, and will ideally, if not themselves, actively participate, will have an expectation of being able to do so, which means having a more pluralistic forms of governance, both politically and socially. I see it as a world where it's much harder to create monopolies, a world where it's much easier to start competing in industries, because everything will be much more composable and barriers to entry much lower because of the composable nature of what we're doing. But ultimately, it's going to be a society where there is more trust. It'll be a strong trust society, not a weak trust society, which is where we're heading at the moment, where people don't have trust in their institutions and they don't have trust in the governance structures that they're subordinate to. Fundamentally, this is about building an affordable, high integrity computational layer with optional privacy in a way that cannot be exploited. Right. It's a bit of a mouthful but that's sort of, at the end of the day, that's what these systems become.
00:43:35.070 - 00:44:36.830, Speaker A: And certainly we already see enough of sort of traditional finance functions being moved to that. But I think it's going to be super interesting to watch as we have sort of users other than humans actually starting to step into the space. That is to say, you have agents, autonomous agents, things of that sort, programs that react to data. I think that's where basically this high integrity layer will start shining and where the demand for higher capacity, for higher throughput, potentially lower latency, where all of these things will become even more important than they seem now. Yeah, it's more philosophical, maybe answer here, but I believe in free world. When I say free world is free. People living in there, people that just live happy, that have some happiness in there, people organized in communities, not in states or not in these.
00:44:36.830 - 00:45:28.260, Speaker A: So communities that you can choose to opt in or to opt out. And for that you need some system of trust that you don't need to trust in a specific person. So you just trust in numbers. I think you were mentioning very much before that. And yeah, to create this community base where people just think in having fun and working for the other peoples to have fun and enjoying where we are living in this world. Yeah, we need to solve conflicts that the humans have today. And if you do a deep analyze of what are the big problems that humanity is suffering right now, most of them, you will discover that end up being trust problems.
00:45:28.260 - 00:46:24.050, Speaker A: If we can solve that, or we can add peace, if we can add peace, so that the trust of humans is less needed and we can trust in math, in science, I think we will get a better world. And that's my goal for my life. But I don't know if it's going to be 20, 30, 50 years, whatever it is, but this is what I'm working for. Yeah, I'm not sure I've met Chad. I would love to live in all of these worlds, but yeah, I think one very concrete thing that I don't think will take 2030 years is that there's a lot of generative data with the advent of AI. And I think that sort of necessitates more sort of verifiability of where that data is coming from. And I think that's a very immediate problem that we're facing, but that I think, I think is very solvable using ledgers and using zero knowledge.
00:46:24.050 - 00:47:28.134, Speaker A: Nice. I think it's actually a great summary. All these visions are really cool, and they actually do seem all really solvable. Like, you guys are all working on projects that directly do this. So is there any reason why these futures wouldn't work out, or any roadblocks or bad things that could happen along the way? Yeah, I mean, I think one of the roadblocks that we face every day, maybe not so much here in magical Ethereum land, but if we try to sell this to someone outside who's not here in Denver with us, is that they have a trouble understanding what exactly it is that we're doing, what the guarantee that we're providing is, and whether the trust assumptions that we've now made are actually better than the trust assumptions that are provided by a trusted enclave or just by a legal contract. And so I think the biggest barrier in my mind is not really technical, because I think we've shown that the technical innovation can happen at an extraordinarily fast pace. So the real barrier is more social and educational and kind of marketing.
00:47:28.134 - 00:48:21.946, Speaker A: Can we figure out a way to explain the benefit of this technology such that everyone can understand it? Right. We've done a tremendous job, for example, with HTTPs, with secure socket type technology, and certain kinds of very limited encryption. But outside of the crypto space, people don't even really feel comfortable with a digital signature, and we're asking them to understand a generalized digital signature. So I think we have a lot of work to do in making it seem useful to the average person. Yeah, I'm not sure I agree about it being really about education. I think the fundamental issue is the tech sucks, it's so bad. Who has tried to write ZK snark circuits? Come on, raise your hands.
00:48:21.946 - 00:48:52.238, Speaker A: Right, who's deployed ZK snark circuits in any kind of production setting? Yeah, it's fucking hard. Sorry for swearing. So I think, yeah, people don't understand it, and it's unfamiliar, blah, blah blah. That's because it's weak, and it doesn't reach into their lives in a meaningful way, and we have a lot of work to do there. But that's not why we aren't going to succeed, because technology is inevitable. There are so many reasons why we'd fail. Let's just look back to the first way generation cipher puncture.
00:48:52.238 - 00:49:37.860, Speaker A: In the battles that they fought were around ensuring strong encryption was available to protect user data. And so they had to have a fight to legalize encryption software, and they won all these battles. But the war that they were fighting was a war for an open, permissionless Internet, where information was free and humans would be their own autonomous agents, surfing the information superhighway. And, my God, did that not happen. We're all bloody commodities. You're a commodity. What's the sum total of your commoditizable information versus the amount of money that black market smugglers could get for your organs? I reckon the information might be more valuable at this point.
00:49:37.860 - 00:50:04.570, Speaker A: You're not the customer, you're the product. Like for every single goddamn application that you use online. So the cipher bunks failed, and now look at us. We're talking about, oh, we're going to change the world. We're going to create this wonderful world of free agency and democracy and openness. This is a $1 trillion casino. None of what we're doing is reaching into the lives of the average people, ordinary people.
00:50:04.570 - 00:51:01.040, Speaker A: Nobody buys their daily goods and services with cryptocurrencies unless they're very technologically well connected. Bitcoin is not the kind of threat to sovereign currencies that its creators intended. And there are so many difficulties with pulling out any kind of positive utopian vision, I think out of the relatively corrupted, flawed foundations that we've had to build off of. So what are the problems? Privacy does not get accepted. We as and we the entire community just can't make it work in a way that users are willing to tolerate it. I'm wrong with my thesis that privacy is the missing link to make blockchain reach into the real world and become mainstream. Without privacy, we are building the tools for the next surveillance state.
00:51:01.040 - 00:51:27.190, Speaker A: We're building networks where every single transaction is happening on a global permissionless soap. For now ledger where everything is visible, where the sum total of all of your transactions and all of your payments, what you own, what you have, is viewable by all. What the hell? Everyone said. Oh, yeah, privacy. Yeah, we'll add that on later. It's just an easy fix. It's turnkey.
00:51:27.190 - 00:52:10.542, Speaker A: Are you mad? We're building dangerous technology masqueraded as a dumb casino at the moment, and we're just repeating the same mistakes as the wave one cyberpunks, the way I see it. But what do you think are the mistakes? Because I don't know. A product that I think about sometimes is PGP. Like just encrypted email, right? Which is not very technically hard. Like, what we're trying to do with zero knowledge proofs is significantly harder. It is absolutely awful, right? Like, no one has ever used it. Seriously, it could be the default.
00:52:10.542 - 00:52:35.978, Speaker A: Your emails could be by default encrypted in some way. I feel like that wouldn't be that hard. To do, and yet it doesn't exist. And I'm not entirely sure what the reason is. Is it hard to deploy or. I don't think it's like evil Uncle Sam trying to prevent it. I genuinely wonder why not.
00:52:35.978 - 00:53:42.350, Speaker A: And how can we learn from these failed attempts in the past? I can hazard a guess it's that the problem is society benefits as a whole when people use these technologies that are backed by strong encryption for the individual, it's a meaningless difference. You take some random person, so just some average Joe, right, going about their lives. Do they care about their emails being able to be read by the government? No. And they don't even know that that can be the case. Not entirely. Just about every survey you do in privacy, you'll basically have this sort of 1080 ten kind of thing, which is 10% don't care about much of anything, then 10% are sort of the tinfoil demographic and then 80% sort of negotiate with me, right? So basically depends on the circumstances and depends on the value prop. And then there is a bunch of products out there that are quite addictive where the value prop is that people are willing to give up on their privacy to get free usage, right, or seemingly free usage.
00:53:42.350 - 00:54:26.062, Speaker A: I think that all the technologies, technology is, I would say, quite neutral by itself. I mean, all the technologies can be used for good and for bad, but the technology, if we think that the technology is a bad thing, then we would not advance, we would not do technology. And if we think that the technology is a good thing, then maybe somebody is going to take over. So we need to understand that all the technologies can be used for good and for bad. And it's our responsibility. And here I fully agree with you, Zach. That is our responsibility, that this technology, as it grows, it's also used for good things.
00:54:26.062 - 00:54:52.374, Speaker A: It's used for improving the good of the humanities. Of course there are risks, and I agree that we need to be aware of those risks. The risks that you mentioned, they are facts and they are reals, okay? So we need to be aware of that. And that's why supporting privacy is an important thing. But the technology is not only. I mean, this technology is not only privacy. I mean, scalability is important, usability is important.
00:54:52.374 - 00:55:37.206, Speaker A: There are other things that are important and needs to be improved. And when you join all together, all the pieces, of course, including privacy, including censorship, resistance, I mean, including all the values that are important, if we put it in the right way, we will get a better society. If we put it in the wrong way, we will have a worse society. I agree with that. I'm saying that without privacy, it is a worse society, as in transparent distributed ledgers. I would argue if that's the end state, they are net negative on this planet. Net negative because of the amount of social control that can be exerted by having perfect information.
00:55:37.206 - 00:56:25.950, Speaker A: Transparency around individuals resources, what they own and how they spend them is far too damaging. Sorry to take a slightly different take. I think part of the problem with privacy as we're conceiving of it right now, is if you try to sell privacy to an individual, you have this problem. They don't care. It's a lot of work, and the government would actually rather that they not have it. But there are plenty of other actors in society that have an actual obligation, right? So they have an obligation under regulations to keep user data private or not to collect user data or not to keep it. And so I think if we focus our energy on kind of companies that have to maintain confidentiality, companies that have to use their users'data in some specific way, we might have an easier time actually delivering privacy to the end user.
00:56:25.950 - 00:57:21.800, Speaker A: Let me be a little bit controversial here with you, Zach. So I agree with you in the privacy, you know that, but I would prefer a world where all the transactions are public, that a world where very few people and people that you don't control have access to your transactions and not the rest of the world. Yeah, but that's not where we're at the moment. At the moment, everyone's like, transactions. It's a melange of chaos. Right? We have cash, we have an enormous number of differentiated payment platforms where it's actually quite difficult, at least in a nominal democracy, for a government institution to actually have perfect visibility over an individual and their assets and their finances, especially not in a very algorithmic, deterministic way where you can just run a query on anyone and get that information. Please don't misunderstand me.
00:57:21.800 - 00:58:09.382, Speaker A: I truly believe that we need privacy, and privacy is a value, it's a fundamental value in the space, and we need to solve privacy. But said that, I mean, I prefer transparency, which is another property that we are adding here, is also important, and it's also a value that's interesting to have. I was just going to say, look, let's not forget that the public blockchain use case is not the only case that's out there. Right? Situation is very different. If you start speaking to banks, corporates, consortia of, I don't know, car manufacturers, people who deal with logistics and all these other use cases that in some cases go back to 2018, 2019. I mean, those people. Yeah.
00:58:09.382 - 00:58:28.060, Speaker A: To them, privacy is very much needed for all sorts of reasons that have nothing to do with personal freedoms, that just have to do like, they make good business sense. Right. And then you don't have to sell them on that. They understand why it's needed. Yeah, I agree. I mean, these are all tractable problems. I wouldn't be here if I didn't think that.
00:58:28.060 - 00:59:17.178, Speaker A: But it's a challenge that needs to be considered as in the way that we're planning on going about it is not like privacy is not the product because not enough people care. Privacy is something that is an essential requirement for certain products and services whose value prop is completely unrelated. And those, I think, are the targets that need to be chased in the early days. But Zach, the other point is that the starting point right now regarding privacy. Currently we have zero privacy. The starting point. That's not true.
00:59:17.178 - 00:59:39.860, Speaker A: That's absolutely not true. Maybe we had privacy. We have more privacy 20 years ago, before the mobile phones. Before we had the mobile phones. Today, all the governments have access. All the governments have access to all your data that you have on your iPhone. This is where we're the starting point right now.
00:59:39.860 - 01:00:06.394, Speaker A: I think that's a bit reductive, because what they do not have is coordinated accesses and they do not have a single source of truth that's fully legible that they can easily run algorithmic analysis on. I'm talking about the blockchain. I'm talking just real phone. Yeah. I'm saying that they don't have what I just said they don't have. KYC, you know who you are? You now don't have phone. And they have.
01:00:06.394 - 01:00:30.322, Speaker A: There is services right now. There is services that all the states can buy. They just say, I want to. We're talking past each other. What I want to say is there is friction. Governments can acquire information about an individual, but it takes effort. They cannot acquire all information about all individuals at low f with a very low cost basis and then perform a lot of analysis on it.
01:00:30.322 - 01:00:58.182, Speaker A: Zach, they're using AI to organize all this information. Okay, I think I'll bring it back and take us to a new question. That's great from all the panelists. Let's go to Benedict and talk more about the technical side of things. You've published tons of papers. You're working in both industry and academia. Could you talk some about the balance you've seen between those industry, at least in cryptography, actually seems to be doing, in general, a lot of work that doesn't start from academia.
01:00:58.182 - 01:01:50.362, Speaker A: And how do the two work together? Yeah, I think it's a complicated space, and sometimes I have the feeling, oh, we haven't reached anything yet, and we still have so much to do. But then also there's things that make me incredibly optimistic. And one of the things that makes me the most optimistic is there is a beautiful synergy right now. And I think there's inherent reasons why that is between academia and industry. We have really cool ideas that come from industry that then lead to sort of more academic research, which then leads back into industry and so on and so forth, and, like, hard problems that people literally are expecting. Like, oh, we have this hard problems, but we believe in science. We believe that science can solve this problem.
01:01:50.362 - 01:02:33.226, Speaker A: And smart people from wherever they are, whatever background they have, they can tackle these problems. And that's just so cool to see. And there's fundamental reasons why that. And it's way better than an AI, which is also an emerging field where academia and industry have a thing to play. But data is private, right? And access to data is really important in order to make even just new innovations and certainly products. And one of the cool things about blockchains is that by its nature, it's open source and it's openly accessible, and you need to actually show that the product that you're building has value and is trustable. Right.
01:02:33.226 - 01:03:39.934, Speaker A: And that works so well with this academic model that we have, which is, I think also they used to say that in the best case, it takes seven years for some cryptographic innovation to be deployed in practice. Right? And now, I don't know, I've had less than one year, right. I think I wrote this paper and then within seven months it was deployed in Monero and sort of powering Monero. And, yeah, it's a really fun space to be in and to work in. And it makes me like, when you have both companies that are profit oriented, which is totally fine, and smart people in academia working together and tackling these hard problems, that is what makes me optimistic that at least the technical challenges we can solve and it's exploded. And I cannot be more positive and optimistic about it. Let me add to that.
01:03:39.934 - 01:04:23.310, Speaker A: So I've been an academic for about 20 years, right? Mostly within an industry bend, but I've been publishing papers for about 20 years. And frankly, I have not seen a space or have not experienced personally, like firsthand a space that moves quite as fast as this one. And of course, AI is sort of competition that we have. But the level of sort of intermingling, the level of kind of exchange of ideas and the speed with which it happens here in ZK specifically is quite astounding. Right. And again, I lived through a previous sort of wave of ZK innovation back around 2013, 2014. Right? Got some interesting results back then, too, but nothing compared to what we're seeing now.
01:04:23.310 - 01:04:45.254, Speaker A: Right. It's just like the speed at which results are coming out in the form of papers. Right. Oftentimes we don't even bother submitting things. They just go onto Eprinto archive and people read them within days. Right. Or like, the speed with which experimentation is happening.
01:04:45.254 - 01:05:31.090, Speaker A: Again, quite astounding. Yeah, I agree completely. I think that kind of the intrinsic incentives of blockchain are extremely positive, some in many ways. And it's an area where good ideas rise to the top because they're not controlled by individual factions that are trying to monetize them. They just become another piece of a very composable framework where they add value to a lot of different projects, different people. And, yeah, it's really positive to see. I think the quality of opportunities available to competent people in this space is so much greater than any other industry I've ever either been in myself or observed from the science ladens.
01:05:31.090 - 01:06:23.902, Speaker A: I think we talked a little bit earlier about some of the political problems and sort of human rights issues that we hope to address with the technology. I was also an academic. I was a professor of mathematics before starting this company. And you sort of saw, I would say, four waves of turning math into money, right? Like, what are the options if you want to make a career outside of academia? And sort of wave one was defense, and wave two was maybe trading, and wave three was maybe advertising. And this is wave four. And this is the wave that I felt okay leaving that academic job, because I felt like I could wake up and do something about problems that I saw in the world and that the actions and technology that I was building actually could have a positive impact. Of course, there's a lot of froth.
01:06:23.902 - 01:06:52.798, Speaker A: Of course there's a lot of issues. But I think it's easier for me to sleep at night, I think, than if I had gone one of those other routes of turning math into money. Jim Simons did very well in wave number two. Right. In the trading wave. Jim Simons. Yeah, I think if we have one value that probably right now is in danger and is this collaboration environment that we are in the space.
01:06:52.798 - 01:07:58.414, Speaker A: Of course, this is why academia likes. Because academia has been also always about collaboration on that. This is an important value here. For me it's a call especially to the tech people, to the people that's interested in engineers, people, mathematicians, people that's interested in the technology, to keep this value in mind, the pressure from the society, from the competitive, from the marketing teams, from the business teams, money is money and the pressures is huge. But here is a call for technical people, for free technical people, for people that's interesting, to keep this collaboration. And if we keep this, this is much better for the industry, it's even better for the organizations, for the corporating organization itself, because they would be in an evolution, and we are in evolution in this space. So this is even good from the business perspective.
01:07:58.414 - 01:08:56.040, Speaker A: But one of the biggest dangers that we have in the space is that at some point we stop collaborating. So even if sometimes goes against your hurt, we need to impose ourselves. Let's act as free persons and continue collaborating. Do not hide information, do not hide technical information for patents, for business reasons, for whatever, just share what your knowledge. And if we all technicals, we keep us that we are going to advance much faster. And this value is important. And here I think that from the academics, if we keep this, the academics, they already been doing that for years on that we should be an example for other industries and keep this value as we have been doing until now.
01:08:56.040 - 01:09:42.370, Speaker A: While we're on this topic, sometimes there's some small frictions between sort of academia and industry. And also, by the way, to your point, keep funding research. But it's one small friction is that academics like to write their papers with very formal, and they like to get their citations and brownie points. And the greatest trick we ever pulled is that a society is that we get to underpay academics, but they get their brownie points. So keep giving them brownie points, it's very important. But then technical people like to bring things out in blog post very fast, just put the idea down. And I think both are great and we need both.
01:09:42.370 - 01:10:37.110, Speaker A: And I don't think one sort of obliterates the need for another. Only because an idea has been written as a blog post doesn't mean that someone else can formalize it and write it in a much more formal way with mathematical proofs and all of that. And only because something, because you have an idea doesn't mean you need formal training in order to publish it. If it's a good idea, just write it up in whatever way you can or care about, but put it out there just exactly as Jordy said. We need to keep this culture of open source, of open publishing. I think it's one of the strongest assets we have as an industry. It should not be incompatible to be formal and to be clear, and that accessible for the teams.
01:10:37.110 - 01:11:46.666, Speaker A: It should not be incompatible. I know that sometimes you need to do an extra effort for compatibilizing both things, but if crypto went so fast, and here I'm looking here, people that wrote some papers, it's because the people that wrote the paper, they not only did the formal part, they also did a huge effort to go a step farther in the paper and explain the protocol, explain whatever they was explaining in an easier way for the people that are less used to read papers, to understand the basics, maybe going after the formality, which again I respect, and it's important. It's essential in the crypto space. Yeah. And it doesn't have to be the same person. Right. I think ideally you do everything you write formal academic paper and informal blog post in implementation and everything, but not everybody is suited to do all of that.
01:11:46.666 - 01:12:10.546, Speaker A: Right? Like someone might not have the formal training to write a perfect paper. That's okay. I think we can again use the power of collaboration to have someone else can explain a paper. I think that's totally okay. And this is happening, which is great. I think there is tons of willingness to go up and down this spectrum. And again, not everybody has to do everything.
01:12:10.546 - 01:12:34.106, Speaker A: Right? I think there is a lot of willingness to sort of do handoffs. Of course, people need to learn how to do it better. And this takes some time. But frankly, look, I mean, for years I worked in areas where you have a paper, and then it takes at least five years to see any glimpse of that in production. Right? Any glimpse of that seriously. And so compared to that, things are happening like blazingly fast. So that's one thing.
01:12:34.106 - 01:13:23.830, Speaker A: The other thing is that I see a lot of willingness even in the roll up space, right. For people to do things together. And we are on the research team starting some collaboration with other roll ups. And certainly we would love to see more of that and perhaps eventually standards around some of these things, but at this point, let's just see more of that and see where that takes us. All right. Speaking of collaboration, we have all of these super smart people on stage who are publishing papers and creating zkvms and Zkai and privacy and crazy things, and we have all these wonderful people in the audience here who are just dying to know how they can end up like you guys at some point. So what advice can you give to the audience that they can start working on to end up helping with this future that we're looking for.
01:13:23.830 - 01:14:12.310, Speaker A: Do you want to go first? I can give the cynical answer and then I can give the real answer. The cynical answer is go to wwW dot Aztec network and download our sandbox and start developing today. We've got a great grants program. And in all seriousness, it's amazing tech hack on it. We've already had several teams that have actually created startups out of what they can do with our tech. But more seriously, okay, the thing is, if I look at how I came into this space, I'm not sure it's a model that can easily be replicated because there was just a lot of serendipity and circumstance. Right? Like I came into the ZK space when it was still relatively new.
01:14:12.310 - 01:14:50.732, Speaker A: Basically I didn't know ZK. I learnt it from scratch in six months and was able to make meaningful contributions and publish papers. And that's not as easy anymore. But I can give more general advice, which is basically find an existential problem that speaks to you. Find a sense of belonging. If you're working on a project and you're getting that intrinsic satisfaction from working on it, and you feel like you belong, you're in the right place, keep going. And if you're not there yet, then maybe you need to explore other alternatives.
01:14:50.732 - 01:15:29.384, Speaker A: But you need that existential need to drive you. Because if you don't have that, you're not going to be prepared to grind the 20 hours, days or whatever it is for multiple years and change roles, wear different hats, learn different skills in order to, to succeed. Yeah, I can listen to. I think what Zach said is very correct. I think it really depends on who you know. There's great academic learning resources out there. Coursera has a great and free cryptography course that teaches you the basics of cryptography.
01:15:29.384 - 01:16:12.216, Speaker A: There's tons of YouTube videos on sort of learning about zero knowledge proofs. There's obviously amazing libraries that you can hack around with if that's what you do. Just starting to play around with. I think one advice that I would give is that it's really helpful to be comfortable with abstraction. So for example, not knowing exactly. Sometimes it's good to dive deep and know exactly how something works, but sometimes it's also very useful to just know what it does. So, for example, if you just understand what a zero knowledge proof does, it allows you to prove that something is true without revealing why it's true.
01:16:12.216 - 01:16:38.332, Speaker A: That's sometimes okay. To understand everything you need you don't need to understand how they work. Or sometimes I get people that come to me, it's like, oh, I started to learn about zero knowledge proof and then I got stuck at elliptic curves. I'm like, I don't really know how elliptic curves work either. That's like way deep down the line. You don't need to know that. You can sort of just be comfortable with some abstraction of it and then just knowing how some things work and then you can build on top of these things.
01:16:38.332 - 01:17:11.656, Speaker A: But yeah, I think hacking around with a library is one of the best ways to start. Get your hands dirty. I mean, that's a problem that's common to everything. I would say the vision maybe from the developer. For people that love scoding, I mean, this is very much my passion. Just take some of the protocols. I mean, just try to create by hand aetherium transaction and send it to Ethereum transaction and see that minet and it's accepted.
01:17:11.656 - 01:17:54.260, Speaker A: If we implement elliptic corpse, if you implement CDSA, if you implement numbers, I mean, some finite field libraries coding, I mean, just trying to understand by coding when you code something means that you probably have a good understanding. Well, not always, but in general, in crypto, if you don't understand what you are doing very much, you probably will end up giving up. So for me, the way to get in the space was coding. It's coding. That's what I like to do. I think you can get a good level, maybe if you want to write papers, then there is other path. We need more math, more abstraction on that.
01:17:54.260 - 01:18:29.300, Speaker A: But I just want to share here my experience that coding and trying to understand what's going on, maybe starting a little bit of math to understand what's going on. This is the best way to get in. So I can also do a plug for us. Of course, one of the things we built was a system that lets you just write in python. So you can just write in a python Jupyter notebook. You can write ordinary Pytorch and compile it to an AI model, which is a zero knowledge circuit. That's a great way to get started and play with it.
01:18:29.300 - 01:19:00.724, Speaker A: Of course, I agree that the right way to do it is kind of play with the thing. Start to think about what you want to happen. Very soon you will reach the limits of the technology, because it really is a young technology, although it's moving very fast. And then you start to dig in onto how far down the rabbit hole you'd like to go in understanding the kind of math you need to add, and that can go all the way to very deep algebraic geometry. So, I started with algebraic geometry from Robin Hart Schorne. Right. And then somehow, way down the line, I find myself doing extremely applied algebraic geometry.
01:19:00.724 - 01:19:24.984, Speaker A: So the math, as it underlies it, is extremely beautiful. And I encourage you to dig into it, but don't think you need to learn any of it to start. So, look, my take is that even on this stage, there are people of fairly different backgrounds. My background is in systems. Right. Let's say, as opposed to cryptography. But as the space expands, I think there will be even more diversity that you're likely to see.
01:19:24.984 - 01:19:56.784, Speaker A: I think what's important is that given how fast the space is shifting, is finding a large long term problem that really appeals to you. Right. On a deep, sort of psychological, even emotional level, this is the kind of thing that you're happy to work on for the foreseeable future. It really helps, because this is what forces you to learn. This is what forces you to overcome obstacles as they come. This is what forces you to sort of reconfigure your forces as circumstances change and things change around you. Right.
01:19:56.784 - 01:20:14.184, Speaker A: I mean, I don't know, the innovation improve systems. We see, like a new one being announced, like every, I don't know, three weeks or something these days. So, yeah, that's my take. Cool. All right. I hope everyone is very inspired about the future of ZK now. I think that's all we have time for.
01:20:14.184 - 01:20:44.700, Speaker A: So let's thank our panelists. We got some controversial things. All right, awesome. Thank you. Speak right into my height. Oh, wow. Okay.
01:20:44.700 - 01:20:54.020, Speaker A: Yeah. Do you want to help me get this up a little? Everyone, listen to me. My. Loud and clear. Oh, that's perfect. Thank you. Oh, hello.
01:20:54.020 - 01:21:05.050, Speaker A: There we go. One, two, three, check. Yeah, I need to eat the microphone. Thank you. I think I'm good. Yeah. Front and center.
01:21:05.050 - 01:21:24.270, Speaker A: Yeah. Okay. Do you have a microphone for questions? I feel like I'm going to lick this. All right, cool. If we got it, we'll see if we have questions. Exactly. All right.
01:21:24.270 - 01:21:38.368, Speaker A: You're a pro. Maybe we can join. No, I need good posture. Oh, nice. Okay. I might just hold on to mine. I like fidgeting with my hands.
01:21:38.368 - 01:22:01.272, Speaker A: Welcome, everybody. Let's get this show on the road. We'll stick right on schedule. My name is Brayden or Bxpana from matter Labs, the team behind ZK sync. And you're joining us for the good, the bad and the ugly to take the next few minutes to take a look at the good. And the technology and achievements from different ZK roll up projects. The bad, some of the technical things that they've run into.
01:22:01.272 - 01:22:38.150, Speaker A: And then we're going to take a look at the ugly and take a little bit turn the stone of community and take a look of what's going on underneath it instead of just the shininess on the outside. So we're going to start off the segment, just a little introduction from each of our guests and let them just give a little 1 minute intro about who they are, where they come from. Go ahead, Alex. Hey, my name is Alex and I am community manager at Tyco. So I handle all things community, discord, Twitter. I'm a little more on the ecosystem side. So trying to find really fun, interesting things for people to do on Tyco and that's about it.
01:22:38.150 - 01:22:58.244, Speaker A: Hey guys, I'm Shariar. I'm on the partnerships team at scroll. So if you're not familiar, scroll is an open source bico compatible community. First dkavm. We launched on Mainnet in October and in my role at Scroll I work across a bunch of different initiatives like defi, staking, restaking, stablecoins, a bunch of stuff. Yeah. Hi, I'm Emily.
01:22:58.244 - 01:23:22.416, Speaker A: I do developer relations at Linea. That means a lot of different things, so I can't tell about my day to day because I feel like it changes like crypto. But anyways, linear. Yeah, we are an EVM equivalent. ZK roll up, moving towards a type two eventually type one and yeah, where dives thrive. Hello everyone, I'm Cece foes, work at matter Labs, the team behind ZK sync. I'm a community manager.
01:23:22.416 - 01:23:44.472, Speaker A: We're focused mostly on the developer community right now and been focusing on the users in the last two years. And Zksync is a type four ZKVM. We've been on main net since March last year, last ETH Denver. And I'm happy to discuss with all of you good, the bad and the ugly of the kvMs. Sweet. Thank you guys. And we really appreciate you being here.
01:23:44.472 - 01:24:24.708, Speaker A: And like I was saying, we just wanted to give an opportunity to just have a little bit more of a say and show to the world, to the world of developers, especially at a bit of week here, what goes on behind the scenes. But before we get into that, I just want to make sure we cover the technical bases. So we're going to start with the good and just give you guys a minute to talk about from the technology standpoint, what are the good things that you guys feel have been accomplished by your project or by your protocol and the future achievements that you guys are trying to achieve, or achieve, achieve, achieve what you guys are trying to do as well. So let's start off. We'll go switch up the order. We'll go backwards. So, Esteban.
01:24:24.708 - 01:25:10.004, Speaker A: All right. Wow. It's been super exciting to launch the first ZkVM one year ago on main net, and that has been a great technical achievement. I think we were on Main net before the Wall Ethereum community was expecting to see an EZkvm on Mainet, so that was something that was amazing to go through. More recently, I think one of the technical advancement that I'm super excited about has been our new prover. We published and is live on production, the new prover called Buju, which decreased substantially the fees on Zksync. And I think since then we've been consistently able to manage, I believe, the cheapest fees as a layer two.
01:25:10.004 - 01:25:36.968, Speaker A: And I think that's an exciting technical achievement. I think boujoom is also a great system because it has a very low hardware requirement. So when it comes to decentralization one day, and having a decentralized proverb network, having low hardware requirement is, I think, something that would enable to have a proper decentralized proverb network. So these are the two technical achievements that I'm most proud and happy about over the last two years. Nice. Excellent. Emily.
01:25:36.968 - 01:26:08.440, Speaker A: Yeah, definitely a lot of really cool things about linea. I think I want to speak more from like, an ecosystem of technology standpoint. So if you guys don't know linear is powered, our circuits are powered by Ganark. So Gnark is an open source ZK circuit library that is the fastest snark on the market. And it's a golang, and there's a lot of things to say about it. But if you've ever interacted with ZkBNB seller Zkbridge, everything, Ganark powers those, and it's like, that's an in house team with that at consensus. Right.
01:26:08.440 - 01:26:38.688, Speaker A: So that's really cool. I kind of want to take the other view of, again, leveraging ecosystem and open source projects. So linear. And any of you guys call me out if this is untrue, is the only l two that is multi client, right? So we support Nethermind Bezu gas out of the box, which is really, I think, a huge technical achievement. I can't explain how they do it. They're just intelligent people. But yeah, I think that's kind of something that people don't really think about.
01:26:38.688 - 01:27:04.328, Speaker A: At all, especially when we keep talking about decentralization, multi client security, blah, blah. I don't know. But anyways, that's really cool that I'm really proud of our team. And I think a lot of it also is due to Bezu. Right? Hyperledger Bezu is an open source team that sits within consensus as well. So there's a lot of synergies that we've been able to leverage from the technical point of view. Yeah, that's great.
01:27:04.328 - 01:27:27.916, Speaker A: Thank you. Yeah, so there's a bunch of different things I'm really excited and proud about for scroll, so I'll try to go through them quickly. One thing is like the cross pollination of contributors between us and the Ethereum Foundation's privacy scaling and explorations team. So that means our contributors are directly working on what we think is going to be the future of scaling ethereum. That's a really exciting thing. And those people are also helping us out too. The second thing I think is that we have been pioneering the multi prover approach.
01:27:27.916 - 01:28:08.770, Speaker A: So just like you said, with client diversity, you need to have prover security for fault tolerance. So over the next few months we're working on basically bringing, in addition to our Zke EVM prover, we're going to have a trusted execution environment prover that's going to be based on stuff like Intel SGX on a threshold signature scheme. So that's going to help build another layer of security on proving. And I'd say the last thing is that we've been working really hard on being really as compatible as possible and making it as easy for developers in terms of opcodes pre compiles. And it's like a little known thing is, as far as I know, right now we're the only ZK rollup that has the pre compiles necessary to deploy noir contracts on scroll. So that allows you to build stuff with privacy. So yeah, those are all really exciting things all over the place that I'm really happy about.
01:28:08.770 - 01:28:42.276, Speaker A: Fits in perfectly for our last panel that was up here with the privacy talks. Yeah. Thank you, Alex. Well, where do I even start? I think Tyco's, it's a little bit different because we're still in Testnet. So a lot of the interesting things that have been happening have been like a long evolution over the testnet phase. So I think a big thing is ethereum alignment. So everything about being a type one ZKE EVM, so we can really work with the existing dev tooling, we can work with existing smart contracts.
01:28:42.276 - 01:29:42.844, Speaker A: It's ethereum extended and I think it's been a really long, interesting road with a lot of open ended research problems that we've had to tackle from testnet phase to testnet phase. We've tried out different tokenomics designs, we've experimented with l three s, we've taken a look at scroll like a multi prover approach. So we have a based contestable roll up that we're testing out right now in our testnet. And so that's again similar along the lines where you can basically plug and play and use different proving systems in the roll up, so you can use trusted environments like SGX all the way to the new up and coming cutting edge proving. You know, that's also been a thing is the adaptability of Tyco as a protocol and how things have changed. The ZK world is very new and up and coming, so there's lots of changes. Six months from now there might be a new novel proving system.
01:29:42.844 - 01:30:31.084, Speaker A: So I think a big key has been keeping the protocol adaptable and able to sort of be modular in a sense. So we're not relying solely on one proving type. When things change, we can keep up with the entire landscape. It's been really interesting to see us kind of adapt to that really crazy landscape. This is awesome. Just reflecting on when starting in the industry here where ZK was to now hearing about multi clients, multi proofs being a type one, like having different proving systems, it's mind blowing what we've done in the, what, maybe four years? So just wanted to highlight that really quick. And of course we talked about the good in the technical, so we've covered the good.
01:30:31.084 - 01:31:27.116, Speaker A: Now, thinking about each of these great things that you've had, I want us to also explore the bad, all of these, while we're trying to achieve technical greatness. There's a trade off with some of these things and it's the challenges you run into or the trade offs that you make or whatever it is. So just thinking about that perspective, what has been the challenges from the technical side that you've seen for your projects or for your protocols? And let's go ahead, let's mix up the order, make things spicy. Sharia, you want to start us off? Yeah, I mean, where do I think so scalability and costs are probably something that we all have dealt with. The growing pains with running a Zkevm. I mean, if you go to any Twitter announcement, probably from any of us, and look at the first few comments, it's like, please reduce transaction costs, please reduce bridging costs, you just got to deal with it. I think with Zekeropes, the thing that people have to understand, obviously, is initially the prover costs are going to be amortized over fewer people.
01:31:27.116 - 01:32:03.588, Speaker A: But over time it reduces. As you change the prover scheme, as you change and adapt the circuits, as you optimize those contracts and everything, it gets a lot cheaper. But at the beginning, you can't expect the same experience you're getting from optimistic roll ups. And so getting over that bridge of understanding for developers and users that it's not the same user and developer experience at the beginning has been the biggest challenge for us. And I would say, just like you said, continually adapting to this ecosystem is really difficult, right? Like these circuits that we build to prove these particular opcodes and precompiles, we have to continually adapt and upgrade them. If you ever want to change the prover and verifier scheme, we have to adapt that. We have to also make them simple enough that they're auditable.
01:32:03.588 - 01:32:33.316, Speaker A: And if we want to add any of this custom stuff that's part of these new narratives. Right, like the modular narrative, you get an alternative da later, you have to prove that too. So there's this constant push and pull of trying to keep ahead of the narrative and keep the same ux and devex of incumbent Alt L ones or l two s that have had time to catch up and get that existing user base. But I think I'm very positive that we're getting over that inflection point now. Nice. All right, Emily. Yeah, I guess there's kind of two ways to look at it.
01:32:33.316 - 01:33:24.560, Speaker A: I think generically bad is just trying to build a Zkevm. Right? There's a reason we came out later. I think at least the linear team has taken a really interesting approach to it in the sense that it used to be two step, now it's four step proving system, where kind of the translation part of the proofs, we actually just didn't do a snark. It's something called lattice based hashing where it's really good for recursion, and then at the very end it's kind of too big, and then we shrink it down to a snark and whatever. That's probably not the important part. I think I want to do talk about the comments on Twitter and what that means in terms of the bad. And I want to speak specifically to, I think, the user trying to explain gas prices to users, especially since at the end of the day, we are still affected by l one prices and so like, yeah, if everything is pumping like ethereum is expensive, whatever, that's going to affect us.
01:33:24.560 - 01:33:45.400, Speaker A: Right. Like as l two s. I'm sorry. Yes. The fee will get higher. And it's like trying to manage the community of explaining how gas works to a very technical thing, to a non technical audience, many of them just aping into the chain and things like that. But I think probably the solution to that is just making everything cheaper.
01:33:45.400 - 01:34:04.624, Speaker A: Whatever. Okay. Which is exciting, right? Because I think from the linear perspective, we did introduce data compression two weeks ago, which reduced our prices by 66%, which is pretty hefty, kind of. Yeah. And I heard scrolls kind of would be doing something similar. Right? Yeah. Which is great.
01:34:04.624 - 01:34:24.644, Speaker A: Very cool. Yeah. The yoloing for some people would just yeet right in. You're like, oh, let's take a step back. That's why. So I'd say that the explicit trade off that we're making with ZK Singh is a performance equivalent one. So we're not an EVM equivalent, ZKVM.
01:34:24.644 - 01:35:02.150, Speaker A: So I'd say I would classify as the bad as being like, there is an additional barrier to entering the ecosystem. You have specific tooling, you have to adapt a little bit. There is a little bit additional work for you to onboard on Zksing. And that's one of the main, I'd say, bad aspect that we saw, but we are actively working on it to bring better tooling people. I mean, tooling on which normal devs are familiar with. So, yeah, I'd say that has been the main challenge, is that we had great performance at the protocol level, but at the expense of a bit of equivalency. But we're working actively on that and making the developer experience as.
01:35:02.150 - 01:36:01.880, Speaker A: Yeah, that's definitely a big challenge for us. Tyco Alex? Well, it's been a long road. I think being ethereum equivalent and being like a based roll up basically just comes with its own field of future research questions. So again, this whole landscape is really experimental. A lot of these protocol designs in general design spaces are really unexplored. So it's a challenge of seeing which direction is the right way to go, where to put all of your energy, and what to focus on, because these are all questions that people haven't answered before. This is the first time we're taking this on, so it just takes some time and it gets a little difficult trying to figure out, again, the best way forward because there's 10,000,001 ways to figure out a way to design this protocol.
01:36:01.880 - 01:36:41.828, Speaker A: But I mean, those are happy and open challenges. There's been lots of collaboration between the Ethereum foundation and researchers like you mentioned with Scroll. Tyco was also working on that open space collaboration with the privacy and scaling exploration team on the ZKe EVM circuits. So there's research being done on based pre confirmations. Justin Drake is talking about shared sequencing and all that. And there's multiple ways to go around that. There's a million and one questions to answer, and I think the biggest challenge is getting around to all of those.
01:36:41.828 - 01:37:41.684, Speaker A: And another less technical but more prominent challenge is just expectations. You have this really opinionated Twitter community, for example, that you always feel like you're on stage, like everybody's waiting for you to make the wrong move so they can make their Twitter comments. So you always kind of feel like whatever step you take, you're always thinking about what could people say about this? What could go wrong? So it's those expectations of always feeling like no matter what you do, you're always going to let somebody down, whether it's with an airdrop or the direction that you're taking, the protocol, whatever. People have really big expectations. So trying to supersede that to make the most people happy, I think, is a really big challenge. Yes, and you're right about that. It's like all of us, in a sense, are all like building in a glass house, and it's everybody from the outside who has something to say about what's going on in the glass house.
01:37:41.684 - 01:37:58.572, Speaker A: But we're the ones in there. But everything you do is always on stage. And that's definitely something that's different about crypto that I enjoy and is also a bad. So good and the bad. Okay, well, thank you, guys. And now let's talk about. So let's look into the ugly side.
01:37:58.572 - 01:38:44.184, Speaker A: We all know that community is a wonderful part, an extension of a crypto that makes really why most of us are here. It gives the sole aspect to web two, gives the ownership. It gives this camaraderie of place, of belonging. Now, we all know those are the good parts, but what's the ugly side that makes you? Why? By doing this. Then you get back and you're like, all right, this is what I'm here. But what just drives you nuts? What's the ugly side of your role? Because I know not everybody is community leads here, but in different facets of the community. But what is the ugly side that drives you nuts? And this one, let's go with whoever wants to start.
01:38:44.184 - 01:39:02.524, Speaker A: I won't force this on anybody. I can start off with that. So being a community manager, I'm like all in on the community. So that's my day to day. And it is a really crazy space. It's almost like the elephant in the room. We're here in a builder's hub.
01:39:02.524 - 01:39:36.396, Speaker A: Everybody's focused on protocol, technicals, ideas, building stuff. And the community is just kind of like there off to the side where a lot of people don't even want to touch it, they don't want to look at it. And I think you're referring to it as the ugly because I've even noticed in Myspace there's this airdrop farmer type of vibe. There's people that don't really care about the fundamentals, that they don't care about being part of a community. They're just in, out, try to get whatever they want. Lots of back and forth about like, oh, this is better than this, this is better than this. This project is going to win.
01:39:36.396 - 01:40:17.172, Speaker A: You have to be a maxi on one project. And so I guess I have a unique perspective. So with Tyco, I started out as just a general community member. I was just interested in Tyco. I didn't know anything like super technical, so I was just in there asking questions. Our engineers took time to talk to me, answer my questions, gave me enough knowledge so I could personally go out there in our discord server, answer questions to other people, really inform people about how to run a node, what's going on with the protocol, and then from there, they really cared. They gave me a moderator position, and then from there, community manager.
01:40:17.172 - 01:40:59.456, Speaker A: And so I guess I have this really personal interest and stake in building a really robust and interesting community. So I think a big challenge and a big key has been trying to stray away from the financialization of a community. And so it's kind of banking off of that ugly. So it's like you have people that join your discord server, join you guys on Twitter for whatever reasons that they have potential, airdrop this, this and that. But people are just there, they're in your community, and it's how you foster that. So what we've really tried to do, and what I've really tried to do is foster that environment that I was given of education. So people have joined our discord server.
01:40:59.456 - 01:41:43.060, Speaker A: They've never opened a terminal before, they've never installed Docker, and then within a few days they're there like running a node, running a proposal, answering questions for other people, and people get really excited. So we've seen lots of community initiatives and projects where people start. We've had our own community built, like Prover network, where somebody was just like, in our community asking questions, and they were like, oh, hey, I could build like a distributed prover network. And that was all community run. So there's been some really beautiful projects and initiatives started just from our community because it's really been all about cultivating. You got people there for whatever reason that they're there. It's all about treating everybody with respect, giving them time, and really showing them that you can learn.
01:41:43.060 - 01:42:07.436, Speaker A: It's all about education, really giving people the time of day to foster that environment. Nice way to take the ugly and then make it beautiful again. It's so hard to make community ugly. All right, so I'll leave it up for the next person who wants to take it. Yeah, I can take it. So I think there's two ways I can say one. And I think this is like a one sentence thing.
01:42:07.436 - 01:42:39.344, Speaker A: I absolutely hate how everyone calls it an l two war, which is like the dumbest thing ever. It's not a zero sum game like multi prover. Multi. I guess linear is the only multi client, but yeah, so stop that. That's ugly. And I think I want to touch a little bit about the financialization of community. And I think actually what I think is really ugly is, I don't know if you guys feel this, but I feel like there is an element of developers pitted against user sybils.
01:42:39.344 - 01:43:23.940, Speaker A: Farmers, right. Because I think there's an extent of like, oh, we worship the developer, we worship the builder, which is true, they are the ones who build the future. But I think what linear has done, and I really like from an l two perspective of the opportunity that we have is we have a lot of eyeballs, right? And also, where do those eyeballs come from? So if we look at the uni swap, the uni drop, that's like average $2,200, which will feed, what, 44 people in Vietnam for a month. This is like life changing money, right? Which is insane. And so you have a lot of attention. And so, like l two s, we have this opportunity to direct the attention back to the builders and say, let's bam. Your network, your load balancing needs work.
01:43:23.940 - 01:44:06.880, Speaker A: Or, like, your ux is really bad and stuff like that, right? And also from an l two ecosystem perspective, we are connected to everybody. We are connected to users, builders, from the developer level, like developer tooling, builders, from, like, I don't even know anything, like you mentioned as well. And there's so much capital that we can do and interact with people that I think is ugly. The way that we kind of just kind of, I call it like, don't villainize the farmer because they do a lot for us at the end of the day. And I guess the thing that is ugly about them, I'm very fortunate I'm not in your position of community manager, I'm going to be honest. But I talked to them and it's ugly how nasty Internet and nons can get. Yeah.
01:44:06.880 - 01:44:20.196, Speaker A: So please be kind. I'm sure none of you here are mean in dms. Hopefully not. Yeah. Cool. So that's where I'm at. Yeah.
01:44:20.196 - 01:45:10.084, Speaker A: They can be mean, visible, wall behind. Yeah. I'll say that. I agree with all of what you said, whether it's managing the expectations within the community and channeling the attention that is not necessarily focused on the protocol, towards the protocol and the mission that we are trying to accomplish with the ZKVMS. I will always remember the first time that we tried to just innocently run a survey through the community and we had like 15,000 people just sibling the form, all the infrastructure going down in between. And we were like, yeah. Essentially this additional burden from the community trying to gam protocols and the protocol, trying to leverage and farm the community, these adds a lot of additional operational burden for us.
01:45:10.084 - 01:46:03.972, Speaker A: And if you want to run a meme competition, if you want to run anything in which there is a minimum at stake, you need to think twice about how you're going to have on board what pipeline you're going to have, because you know that it's going to be seabuard and you have to take the necessary steps to account for that. So, yeah, high expectations from the community creates also high operational burden on our side. I would say that that was a bit the ugly side that we faced over the last two years. But of course, sometimes how mean the community can be, but also how good and altruistic they can be. I think that comes with the job. Like, we have this broad range of community members, and sometimes there is a very minority fringe that could be very vocal and mean. Sometimes it always seems like a constant fight.
01:46:03.972 - 01:46:30.690, Speaker A: Sometimes they change something. So then you change something and then it adds, like, then they change it this way, and you're like, I thought I already stopped that. So it's like this never ending cat and mouse. I feel like sometimes too. Shar. Yeah, I mean, I agree with all the points you guys have made. I think there's a lot of difficulty in finding the fine balance between respecting and listening to your community and then kind of focusing on this vocal minority and bending your will to them sometimes.
01:46:30.690 - 01:47:10.092, Speaker A: And there's been a lot of discourse, obviously, about the toxicity of some of the community members and a lot of different reactions across the board. I think my take here is that it's a no upsides move to disrespect or look down on the members of your community. Right. There's ways to work around it, and there's ways to focus on the people that deliver the most value. But looking down on them, on people, like you said, who for this amount of money is life changing. It doesn't help anything, and it just makes you seem a lot more highbrow and thinking you're above them when we're trying to all be very down to earth people. And then one other point about developers I think is also really interesting, is that, like you said, we sort of worship the developers in a sense, and we think a lot about them.
01:47:10.092 - 01:47:31.568, Speaker A: Of course, for us, like developer education and thinking about them is the most important thing. But sometimes we silo in on thinking about their needs only. And when you talk to them, they're like, wow, you guys are so compatible. It's so easy to build these contracts, but you don't ever listen to users. I want something fun to do. I want to just be able to gamble with my money. And that might sound trivial to us, but this is a large proportion of what the crypto community is.
01:47:31.568 - 01:48:07.760, Speaker A: And I think all this posturing about trying to be super developer or research heavy, that has to be balanced with a little bit of degen and a little bit of understanding where the community members are at and what they need. Yeah, that's my take on it. Awesome. Well, so we got through the ugly, and when we were talking about these things, it made me think of something else. Like not a lot of people, or when people think about community, they kind of just automatically put it into this subcategory of marketing or of growth. And that's what it is and has been in the traditional web two, but web3. I see it as completely different as what we were talking about earlier.
01:48:07.760 - 01:48:59.330, Speaker A: How do you guys manage the internal expectations at your own companies of, like we see, I think from all of us, all of our mission statements or our visions are like community first, community built, community. Community. But it can feel like sometimes inside, like you were saying, it's something off to the side. Like, all right, we've got this vision, we got this together. Community is doing something. So regardless of your role, because I know you guys are in different extensions, but how do you convey how important either community or what your role is is internally to your company? So they know that resources need to also be put there, like product and everything else is very important. But yeah, community, Devrel, product or partnership, all those need attention too.
01:48:59.330 - 01:49:40.244, Speaker A: So how do you say, hey, look at me down here. Any order, any order, any order, I'm down. I'm happy to go first. I like to think of, we always say that community Web three is community first, essentially. I think the reason why is that there is a protocol supposed to be owned by no one else, but then a distributed community. And so the same way that a protocol requires a certain level of engineering and at some point there is open sourcing and there is a community that gets involved. I think the community also needs a certain form of engineering.
01:49:40.244 - 01:50:43.330, Speaker A: You need to design it to be able to have contributors. I think I have contributors have specific opportunities to shine as well. And having the community being engineered and talk the engineering language to engineers, I think, and see the community as a product that needs to evolve in few cycles. I think this is a way a bit to speak the Mem language with the engineering team. I think that's a barrier that I've seen that speaking different language, the marketing language versus the engineering language, and turning that into a common vocabulary is a good way to advocate for what you want to try to achieve. Well, I think the way I look at it is you could build the best protocol out there that has all the best fundamentals, you could have the fastest proving times, cheapest fees, whatever you launch on mainnet. And if you don't have a community, you don't have any applications on there or anything.
01:50:43.330 - 01:51:52.528, Speaker A: It's just a ghost town. What's the point? What's the whole point of building a protocol that doesn't have anybody a part of it? Without the community, the protocol is really nothing. And there's a real utility to having a really robust and excited community. It's like you can blend the community and the developer side together. So, for example, from my personal experience with community building and all that, we've gotten to a point where we have a pretty large and excited community behind our testnet. And right now I'm basically utilizing that community to be a launch pad for all of these new and exciting applications that are being built on Tyco. So it's actually enabling all of these small time projects that usually wouldn't get enough traction or have enough users to go through and QA test things and get feedback and all that having our community there and excited and ready to learn about stuff and mess around with stuff on chain and all that has really fostered this really incredible launch pad for our ecosystem projects.
01:51:52.528 - 01:52:40.452, Speaker A: So our developers on that side and our ecosystem, they all come together and they figure out cool ways to be composable and build on top of each other. And then they learn from stuff and then they get valuable feedback from our community and they have this really great developer experience all from our community. And again, it's when you focus on the non financial aspects of the community, when you get people excited, it doesn't even have to be like really complex applications that are deployed. It's like people love to play games, people want to play games on chain and all that. So you'll have all these projects that come on and they have these new fun, novel ideas and you're able to again bring community and developers together to create this really cool experience. It's really interesting. Yeah, the modular system all over again.
01:52:40.452 - 01:53:10.792, Speaker A: Right? Put things together. Yeah. I think the point you made at the beginning was exactly right where you said these are like all extensions of each other. It's really a question of internal structure and culture we see, and I'm sure all you guys feel the same way. Partnerships is an extension of Devreau and Devereaux is an extension of community and community is an extension of marketing. All of them flow into each other, and especially in web3, they all have to work together very tightly in these fast, iterative loops. I think that's how you get attention on community feedback.
01:53:10.792 - 01:53:42.296, Speaker A: Like comms will highlight one thing and then that comes to Devrel and we say, okay, it's a technical issue or is this an issue with a particular project? Does partnerships need to step in? If Deverel has an issue, they bring the rest of the team in. So it's really about highlighting the issues and making sure that every single team member who might be relevant is able to see it and basically create a culture of like, okay, community feedback is critically important. Just as important as an engineer's feedback might be in a sprint. That's kind of how you create a community led or community kind of feedback focused culture. Nice. That's really good. Yeah.
01:53:42.296 - 01:54:18.100, Speaker A: So I feel like you started off the question saying that I guess people don't care about community or it's off on the side, which I feel like is categorically false. Right? Am I putting words in your mouth? Because that's like kind of the first impression I got. It comes in both. It's like a duel. Sometimes people come in and like, yeah, I'm here for the community, but I think you sometimes get to maybe more. Some projects who are like internally, outside they're like, yeah, all about the community, but internally it's like community will get to it or whatnot. But I think a lot of people might.
01:54:18.100 - 01:55:03.668, Speaker A: What I run into is some people be like, oh, so you do marketing? And it's like, no, I don't do marketing. And maybe it's not just internally, but it's also from the external people's viewpoint. When they think of a community thing, they're like, you're doing ads, you're like a brand ambassador, like doing those types of things. So I guess something in that realm that, I mean, okay, cool. I guess maybe because we just have different maybe opinions on what community is, at least for us, our community team does not sit on the marketing team. Right. But I think what I will say about community that isn't brought up, that is really difficult to navigate in terms of maybe resources from a time perspective is how diverse the community is in regards to their needs, right.
01:55:03.668 - 01:55:51.332, Speaker A: Because user community is completely different from what a developer community needs. And when all of our teams are really small, right. How do you dedicate time to, I need to take care of my user community while at the same time taking care of my developer community, somehow collating all that feedback and then letting the product managers prioritize that. And then even within the developer community it's split into two groups too, right? Because you have the Dapps who are wanting to deploy on main net and that's like partnership side. And I think in general, for a chain, that's usually your first priority because when you launch you want people to actually be able to do things. But when you start focusing on that, then you start to neglect individual developers, people just exploring the space, trying to figure out what's going on and then you're like, okay, how do I figure out all this mind share? And I don't know. I think the answer is always just hire more people.
01:55:51.332 - 01:57:04.810, Speaker A: To be honest, there's not really a good answer there either overwork people and burn them out until they leave or hire people and care about their work life balance. But I will say, I think from the linear perspective, community has been critical. I think to especially how we've developed the idea of how we interact with users specifically like farmers or people like that, expecting incentives and how important transparency is about what's happening at the time, how every action or time resource thing that you contribute will actually manifest later on, because I think when you pull the rug underneath people who are spending their time building with you, transacting on you or whatever. I don't know where I started the sentence, but the point is, it's something that you get a lot of feedback on from the community and addressing that and making sure they're feeling taken care of and heard and understood that they are the core of your protocol is super important. And I don't think that's a marketing function, and I don't think that is ignored, at least, like, across the board. I feel like we're all here exactly. Pretty nice.
01:57:04.810 - 01:57:30.320, Speaker A: Yeah, that was exactly what I was trying to get across. So you've led into it perfectly. So thank you. We have just a few more minutes left. I wanted to just leave it open for a few questions from the audience. If anybody had any of the more project focused questions or community focused questions. If you've got a question, give that hand a nice high raise, and our lovely Albie codes will come give you the microphone.
01:57:30.320 - 01:58:16.492, Speaker A: Give it a little questions for the communities. I know it's been a long day. Oh, we got one right there. The guy in the beanie. Hey, question. How can these unique communities all kind of connect and work together to kind of solve some of the bad and the ugly that was discussed on stage? Who wants to take that one? I don't know if it's like there is an element of we are all suffering the same problems. And I want to say, just from a perspective of working at Linea, it's actually a very collaborative environment.
01:58:16.492 - 01:58:54.860, Speaker A: From the l two side, we're all working together and thinking about how we're solving problems. And I think in the same way, each of us are figuring out what to do with our communities when they are ugly and when someone fixes it or does something cool, one of us immediately copies it, which is fantastic. I think so. And that's what you're supposed to do, right. Regardless, copy paste other people's success, I think, is the way to kind of bridge the ugliness away. Yeah, I'll add to that then. We are working also with slightly different tech stack.
01:58:54.860 - 01:59:31.588, Speaker A: At some point at the engineering level, I think there should be a certain level of standardization that will also bring these communities together. We make the protocol more interoperable. We know already that our communities are, I'd say, overlapping. We're all within Ethereum. But it's true that there is technical differences that at some point over the long term, I think we're going to naturally converge through a specific design architecture that will also bring the communities together. Yeah, I would say for the community members, I think there's this idea of this l two war. It's like complete bs.
01:59:31.588 - 01:59:43.800, Speaker A: All our teams know each other. A lot of people probably could have or might have worked at other people's teams. There's a lot of overlap. There's like no war happening over here. So I wouldn't think about pitting l two s against each other. It's like l two s against the world. We're trying to grow the pie.
01:59:43.800 - 02:00:02.336, Speaker A: Just try out everything. If you have ideas for interesting applications, try them out everywhere. Get engaged in each community. I think, yeah, the pie that we're trying to grow out is a lot larger than what we're fighting for right now. So just be actively engaged in what we're building right now. And I think it's going to be really exciting in the next like five to ten years. Yeah.
02:00:02.336 - 02:00:38.216, Speaker A: And I think I'll go a little bit of a different way. I think it's just what I try to do with my community is just remind people that it's not a big deal, it's chill, it's not like life or death. There's no l two war. There's not this crazy end game or whatever. It's like a really open, collaborative research space. And so I guess when things get a little ugly or a little bit crazy, we have our weekly community calls and we talk with our community and there it's really like getting that message across that these things aren't serious. It's not life or death.
02:00:38.216 - 02:00:59.190, Speaker A: You don't have to pick one over another. It's just like, come check out what we're doing. We're doing cool stuff. If you like this better, that's cool. But we're always around. We're always here to help you guys, teach you guys, be a launch pad for your project or whatever. So, yeah, again, we all have overlapping communities, so I think it's just reminding people that it's not so serious all the time.
02:00:59.190 - 02:01:30.572, Speaker A: Yeah, that's great. Well, thank you guys all again for your time today. We really appreciate it. And I just hope that there was something great takeaway for people in the audience as well. Just wanted to showcase that the community, as much as the rainbows and the fun and the unicorns that are out there, there are different sides to it. And there's also this deep complexity level of knowledge that I'm super impressed that a lot of people think that community can be a little bit higher level. But when you're in it, you're cross functional.
02:01:30.572 - 02:01:52.984, Speaker A: You're going between different departments, so you're absorbing the different knowledge along the way because you are the first part of the funnel of people coming into the community. So you have to have that layer of knowledge to help them along. So thank you everybody for participating in the good, the bad and the ugly. And thank you for everything you guys are doing for the Ethereum ecosystem. We really appreciate it. Thanks for having us. Thank you.
02:01:52.984 - 02:02:16.956, Speaker A: Thank you very much. Thank you very much. All right, so yeah, I'm giving a presentation on 4844. So who is familiar with blob transactions? Okay, perfect. I saw someone pointing at me. Thank you. Be kind of awkward if I wasn't.
02:02:16.956 - 02:03:17.520, Speaker A: So, yeah, basically we're going to go through an overview of what 4844 is. What are blobs? How does the blob transaction lifecycle differ from the normal transaction lifecycle? Introduction of the new fee market, what changes we had to make to ZK sync, and then what is going to follow? So the TLDR is blobs are cheaper storage on Ethereum. So before blobs, we mainly stored pub data in the form of call data. And then with blobs, we're now able to store it in an area that's relatively cheaper. The back of the napkin math says it's about 93% cheaper when it comes to the amount of gas that's being used. So as many of you may or may not know, Ethereum roadmap is moving to be roll up centric. And so that puts an emphasis on data availability.
02:03:17.520 - 02:04:30.664, Speaker A: So 4844 sets the stage for this with full sharding, while allowing roll ups to take advantage of cheaper data sooner. So in the blockchain, trilemma Vitalik basically put it as a blockchain can only accomplish two out of the three kind of like sectors, scalability, decentralization and security. We have those targeting decentralization and security, like bitcoin and Ethereum, multi chain ecosystems going for decentralization and scalability. But with roll ups and becoming a roll up centric roadmap, we can actually offload the scalability down to the roll ups. So Ethereum would only have to focus on decentralization and security while allowing roll ups to really put an emphasis on the computation. How do blobs kind of roll into this whole thing? So with blobs, we have the new storage type that's cheaper. But the reason it's cheaper is it's only being kept for a short amount of time around 18 days.
02:04:30.664 - 02:05:23.328, Speaker A: And now you might be thinking this becomes a problem, but for many roll ups, 18 days is more than enough. Zero knowledge. Roll ups will really utilize this data within an hour or so as we prove batches to be valid about on Zksync an hour after they're committed, and then on optimistic roll ups, that data is only needed for seven days as that's the time for the fraud proof challenges. And now each blob is able to handle the amount of data that we have in call data. And given the new targets, we can actually fit three. There's a target of three blobs per block with a maximum of six blobs. It's not a ton right now, but this is really just setting the stage for full dank sharding.
02:05:23.328 - 02:06:35.760, Speaker A: That will introduce up to 64 blob slots. And it basically allowed Ethereum to move the necessary changes for the consensus and execution layer to now, while allowing full dank sharding to be focused on later. And that covers data availability sampling. So each of the consensus layer nodes doesn't have to hold each individual blob, which would add terabytes of storage for them. And in addition, there's the introduction of the multidimensional fee market. So it is really just like a complex way of thinking or of saying the way that blobs are being charged for changes versus how normal transactions are being charged for. So if you're used to gas going high for an NFT mint or an airdrop or anything along those lines, those won't affect the amount of cost that the layer twos will incur, because the market for blobs changes differently than those for regular transactions.
02:06:35.760 - 02:07:30.000, Speaker A: So we can go into the blob lifecycle. So when a user submits a layer two transaction, those get basically sent to the roll up operator, batched together with a bunch of different transactions for everyone, and then sent to the layer one mempool. Once they're in the layer one mempool, they get split off into the execution layer payload and the consensus layer payload. Blobs only being available on the consensus layer payload and on the execution layer, we're able to get a commitment to the blob. And that's how we can ensure that we know what data is in there. It's the same data that we assume, and it'll help us reason about it in the future. And so this is another diagram kind of going through the lifecycle.
02:07:30.000 - 02:09:02.716, Speaker A: I think it actually does a little bit better job explaining how things get split up. So as you can see on the top right, once the execution payload and the blobs reach the beacon proposer, they get split up into the sidecar, which is the KZG commitment, the blob, and the proof that the KZG commitment references the blob, and then the execution payload, which is everything, including the hash of these commitments, which we'll go into a little bit later. So now, if we don't have access to the blobs on the execution layer, how can we reason about what's inside the blobs? And that kind of sets the stage for KZG. So, KZG, which stands for Kate, and then I should remember the other two, but it's the last names of the three people who came up with this zero knowledge proof. And basically, it is a way to form a polynomial commitment of the data. And so, if we wanted to know what's in the data, we could just hash it, and then on the execution layer, we could just have a hash to that data. But once we want to reason about what's inside that data, we would have to then provide the full pre image, which would then be inefficient, and basically removes the benefits that we get from the KZG commitment.
02:09:02.716 - 02:10:14.040, Speaker A: Instead, we can take that data form a polynomial, and then basically make the commitment to that polynomial. What that allows us to do is we can prove what the data behind the polynomial commitment is by making a proof of, by evaluating a point in that polynomial, and basically saying, I know that the value at this point is this value. And over a certain number of points, you then become more and more sure that the data in the blob is actually the pub data that you're committing to. And so, the benefit of these commitments is, they're significantly smaller than blobs. So, for instance, a KZG commitment is about 48 bytes, whereas pub data, which is the main reason we seal a batch on Zksync, goes up to 125 kb. So that is significantly cheaper. And the people who end up seeing the benefit of the reduction in this amount of data are the end users.
02:10:14.040 - 02:11:29.280, Speaker A: And so I spoke about kind of how we take the KZG commitment, and how we are able to prove what data it is. And this is done through a proof of equivalence. And with the proof of equivalence, basically on chain, we're able to take the version hash from the execution payload. We use that along with the opening point and the opening value, and the proof that the version hash corresponds to a KZG commitment, that when opens, at the opening point, will yield that opening value. And with that, we're able to then prove everything we need to know about the blob. This is for those who are a little bit more mathematically inclined, this is Vitalik's post on how the proof of equivalence can work. And so we started to talk about this multidimensional fee market, and how blobs are being priced differently than normal transactions, and how this helps when eth gas price surges.
02:11:29.280 - 02:13:13.410, Speaker A: And so with that, they operate kind of like the EIP 1559, where once we hit the target number of blobs that we want in a particular block, the gas price will increase by twelve and a half percent. And when a block has less than three blobs, we'll actually decrease it by twelve and a half percent. And this makes it so that we can always be sure that we know when our transactions will get included and when there's a surge in the normal, when there's a surge from demand for either. Again, NFT mints airdrops, the roll ups don't have to pay for this burst in data, nor do they have to delay sending their l two batch commitments waiting for the burst price to go down. So this is talking about the block size. So as we can see, with protodang sharding, we have an average case block size of 375. Why protodang sharding was introduced wasn't necessarily for the average case, but you can see how in the worst case, the block size is actually significantly less than what we see in the status quo, which is using call data, or versus a different EIP, which was introduced, 4488, again, not to be confused with 4844, which would essentially, rather than introducing this new cheaper storage, actually would reduce the amount of costs that call data would have.
02:13:13.410 - 02:14:31.926, Speaker A: So now the most interesting part, how does this all translate to Zk sync? So, in Zk sync, basically the way it works is we have our security rooted in proofs, and you can think about our l one batches as going through three major steps. We commit the batch, we prove the batch, and then we execute the batch. And so when we commit the batch, we make changes to the batch commitment. Now to include both the pre image of the blob that we're using, as well as we add in the blob commitment. The blob commitment has the version hash, the opening point and the opening value as parameters. And so these values will then get included in the overall batch commitment and proven later on within the proved batches step. And so with going from call data to blobs as I mentioned before, we actually bring it down, the potential 120 blob.
02:14:31.926 - 02:15:57.094, Speaker A: And our system will handle two blobs. So that'll be about 288 bytes, which allows us to have double the number of pub data than we could previously have. So that means with more transactions and more state diffs within the batches, our overall cost will go down per transaction. And another important thing that we wanted to include within our contract changes was not just this ability to utilize blobs, but in the event that the blob fee market decides to go haywire, we want it to be flexible enough to switch back and forth between blobs and call data. And so this allows us to basically retain the finality that we currently have. While giving us the flexibility to either opt for cheaper transactions or for. Yeah, and so with the batch commitment, we also have to make changes to our prover, which basically recreates the changes that we've done in the commit batches step.
02:15:57.094 - 02:17:04.060, Speaker A: And so within our proof system, we'll basically take the blob, we'll repackage it in order, we'll take the pub data, package it into our blobs, compute the KZG commitment. Along with that, the proof of the blobs, the fact that the KZG commitment references the blob. And that using these blob commitments that we've introduced in the commit batches step, that these are actually the values of that. And proving that all these values together will essentially give us what we've committed to on layer one. And so, going into what's next for ZK sync, right now, as I mentioned, we support two blobs. But in the future, we plan on supporting any number of blobs, as the number of blobs overall supported per block increases from six to 64. But also with dank sharding, we have more blobs coming.
02:17:04.060 - 02:18:08.210, Speaker A: The implementation of data availability sampling. So each individual node at the consensus layer won't have to store all the blobs, but can just store a certain part. We'll have proposer builder separation, which is needed for increased security around different things like mev, as well as a new 2d KZG scheme. And so I think we have a little bit of extra time left. If anyone has any questions about blobs or anything about. That's all right, I see. Hands up, there's blob.
02:18:08.210 - 02:18:37.490, Speaker A: So the question was, who is going to be blob ready on day one? So I can't necessarily speak to the other chains because we're not 100% sure what their progress is there. But I can confidently say that ZK sync will be blob ready on day one. Nice it. Thank you. All right. Thank you, everyone. And, yeah.
