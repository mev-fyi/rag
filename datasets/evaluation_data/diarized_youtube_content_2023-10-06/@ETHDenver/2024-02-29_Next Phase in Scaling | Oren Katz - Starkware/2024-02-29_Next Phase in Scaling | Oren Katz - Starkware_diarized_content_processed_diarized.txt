00:00:00.090 - 00:00:07.550, Speaker A: Pleased to announce that our next speaker is Oren Katz of Starquare talking on the next phase of scaling. So everyone give a huge round of applause.
00:00:17.510 - 00:00:53.620, Speaker B: Hello. So I'm Oren from Starquare and I want to share with you. I want to present the technology I've been working on for a while now. So I'll both start and end with these highlights. So it's going to be the fastest proving technology out there. It will significantly reduce the cost of generating stark proofs, and it's going to be seamlessly integrated into Starknet. So if you're using Starknet or building on Starknet, you're going to reap the benefits of this without the need to do anything.
00:00:53.620 - 00:01:44.240, Speaker B: So what I'm going to do is first I'm going to explain why or how proving technology actually helps with scaling blockchains. I'm going to run briefly through the history of proving and its relation to blockchains. Then I'm going to introduce this new prover we're working on. I'll briefly touch a few of the improvements or the mathematical enhancements that make all this possible, and then I'll end with the benefits of all of this. So why do we have a scale issue with blockchains at all? So blockchain is a decentralized technology. So you have lots of full nodes, typically tens of thousands or even more. But each and every one of these full nodes really has to execute all the transactions of the entire network.
00:01:44.240 - 00:02:22.408, Speaker B: Add to that that we want a full node to be able to run on a weak machine, and we end up with us limiting the throughput of the network. So all of this could actually work. That's basically why we have a scalution blockchain. So how does proof systems, how does stark or other proof systems actually help with that? So the main idea is simple. We want to take all of this computation of running all the transactions off chain. There we could actually only run it once. In addition to running it, we'll also generate a proof, a stark proof that basically shows that all these transactions were valid.
00:02:22.408 - 00:03:17.468, Speaker B: We're going to send that proof on chain, and the only thing we're going to do on chain is basically verify that that proof is valid instead of running all these transactions. And the nice thing about stark is that verifying a computation is a lot less expensive than actually running the computation. It's exponentially lower cost than actually doing the computation itself. And this is the way how we can run lots of transactions off chain, but still verify them inexpensively on chain so based on this idea, we came out with this concept of L2 validity roll ups. And the way this works is that the users send the transactions, instead of sending them directly to layer one, they send them to L2, or more specifically, to a sequencer, which is running a L2. This depicts starknet, but it's true for any other validity roll up as well. The sequencer sequences these transactions into blocks.
00:03:17.468 - 00:04:09.320, Speaker B: These blocks are then sent to the prover, to a stark prover that generates a proof that shows that all the transactions in these blocks were indeed valid. That proof is then sent on chain to a smart contract on Ethereum that knows how to verify stark proof. And when that contract verifies the proof, only then can we basically update the state of the rollup on another smart contract on Ethereum. So this way we're able to run much higher throughputs than Ethereum can handle without compromising the security of the base layer, which is Ethereum in this case. So this concept of proof systems is not really new. It's been known in academia for several decades. Even the later enhancement of that, which is zero knowledge proofs, was already published in the 80s, in 1985.
00:04:09.320 - 00:04:52.550, Speaker B: But for many years it's been something that has been researched, but not really used anywhere in any industry in production, because there simply wasn't a use case that people thought warrants that. Things started to change once blockchain came around. So first there was bitcoin, then Ethereum. The first time zero knowledge proofs were actually used in production were in zcash in 2016, and then they weren't used for scalability, but rather for private transactions, so for privacy. A couple of years after that, the Stark paper were published. Stark is the proving technology that we use. It has some better qualities than the ones that came before it, and also Stark, where the company was incorporated.
00:04:52.550 - 00:05:26.238, Speaker B: And two years after that, we deployed our first roll up on Ethereum mainnet. That was Starkex. Starkex is an application specific rollup that caters for a specific family of applications, which is crypto exchanges. So it supports spot trading, nfts, derivatives. But it already was able to show that we could run a much larger number of transactions on Ethereum at a much lower cost. And there are multiple exchanges actually running on that technology. A year after that, we deployed the first alpha version of Starknet.
00:05:26.238 - 00:05:59.334, Speaker B: Starknet is our general purpose smart contract platform. So it's more like a full blockchain running as a Lyra, two on top of Ethereum. I just mentioned both of these underneath the hood. We're running our Stark prover that we called Stone. Stone stands for Stark one, which is the first prover that we've developed when the company was founded like five or six years ago. So all of Starkx, all of Starknet up until today is running on that prover. Here you can see some numbers for Starkx and Starknet.
00:05:59.334 - 00:06:26.518, Speaker B: As you can see, they're big. I'll highlight some of them. So if you look at Starkx, Starkx has facilitated to date in terms of trading volume. It caters for exchanges, so traded volume of over $1.2 trillion. The number I like most is the one on top. If you aggregate the amount of saving that Starkx and Starknet has saved in gas costs on Ethereum to date, that's by itself over a billion dollars.
00:06:26.518 - 00:07:10.442, Speaker B: So if somebody wanted to run all these transactions on Ethereum, it would have cost a billion dollars more than it did. This is another nice metric for Starknet that shows the size and the growth of its developer ecosystem. So Starknet, what you see on the X axis is basically the number of developers working on Starknet in Q one 2020, and the Y Axis is Q four last year, Q 423. You can see Starknet over there. Not only is it the biggest ecosystem outside Ethereum, it's also the fastest growing one. And this is basically due to the strength of the technology and the strength of the community. Okay, so what's next? So like I said, all this was running on stone.
00:07:10.442 - 00:07:46.986, Speaker B: Stone is basically a prover that we've built five years ago, even more now. The world has progressed and we know how to do things better today. So I'm very glad to introduce now the Stu prover. Since the first one was Stark one, it only makes sense that the next one is going to be cold two. Now it incorporates several enhancements and improvements and advances, basically improving technology. I'll mention them. I'll touch briefly some of them.
00:07:46.986 - 00:08:28.950, Speaker B: I won't have time to go over all of them. So it uses a small field, the Milsen 31 prime field, in order for us to be able to run Stark on top of that field, there's this new invention called Circle Stark. I'll talk about it a bit in a second. It also uses DKR lookups, mixed degree traces, and also some improved Cairo virtual machine. I won't be able to touch all of them, but if you're interested, come and talk to us afterwards. So what's the Mercen 31 field? So it's a prime field where the prime is exactly two to the power of 31 minus one which has some neat properties. So first of all, it's small.
00:08:28.950 - 00:09:15.760, Speaker B: That's what makes it good for performance. It's less than 32 bits, which make it pretty granular for arithmetization as well, which is what you do in starks and proof systems. It has this nice property in modular reduction in that 2231 in that field is exactly equivalent to one which makes computation is easier, and it basically offers great performance for both cpus and gpus. But there's a problem here. So the field is great. But if we want to run Stark on top of that field, we need another thing. We need a structure of a group over that field, and for stark to function properly on that, the group has to be of size that divides by high power of two things, two to the power of 30.
00:09:15.760 - 00:10:05.850, Speaker B: But Mersen 31 doesn't have that. The highest power of two it divides by is actually four, is actually two. It doesn't even divide by four. So luckily there is a solution to that which a few researchers from stark were published a couple of years ago that's called ecffft elliptic curve fft that basically enables us to run stark on top of a group that doesn't have this nice property. On top of a field that doesn't have this nice property, because the group we build is not the generic multiplicative group, but rather an elliptic curve, a group built on an elliptic curve. But there's another problem here, that the operation elliptic curve operations are expensive, so we can use it for stark, but it'll be quite inefficient. So now there's a better solution.
00:10:05.850 - 00:11:26.610, Speaker B: This is an article that was published just two weeks ago. It's a collaboration between Polygon Labs and Starkware, and basically it introduces a new type of group that we could use for stark that actually has better performance, and that's called Circle Stark. So I'll start by showing a short movie about Circle Stark doesn't become. But let me ask, what do I miss? Can you hear it? Hardly. Okay, so first, a couple of apologies. The next few slides are going to be a bit mathy, so I may be losing some of you, so it's not going to be long. Bear with me.
00:11:26.610 - 00:12:07.866, Speaker B: Another apologies to the ones who actually want to dive deeper into the math. This is going to be more hand waving than rigorous, so if you want to hear more, come and talk to us afterwards. So there are many types of groups. The simpler one is what I call the generic multiplicative groups for prime fields. It's basically all the integers up to the prime minus one with multiplication which actually forms a group. Like I said, this is the simplest, but it doesn't work well for mosem 31 and Stark. So the other option I mentioned before was instead of using integers, we could have each group element basically be a point on an elliptic curve.
00:12:07.866 - 00:12:49.180, Speaker B: And then we use the elliptic curve multiplication for the group operation. That's also a group that actually does work for stark, but is quite inefficient. And this new idea is basically we could use another curve which is just the circle, basically the unit circle. So the group elements are basically points on that circle. And the operation is pretty much angle addition. So if you want to add two points on the circle on the curve, so each point corresponds to its angle. So if we want to add the point that corresponds to angle a with the point that corresponds to angle b, what we get is basically the point that corresponds to alpha plus a plus b.
00:12:49.180 - 00:13:46.760, Speaker B: And one can show that this is indeed a group and it's a group that's very simple to actually do stark operations on and FFT and all that we need for this. And from a sen 31 it has exactly two to the 31 points. Okay, so what's in it for you? So first of all, this is going to be a lightning fast prover, way faster than anything out there today. How fast? So we're not done with it yet, but we estimate it's going to be more or less 100 x faster than stone and for Starknet. So first, like I mentioned before, it's going to be seamlessly integrated underneath the hood. So for whoever is using Starknet, building on Starknet, sending transactions to Starknet, you don't need to do anything and you'll get the benefits of this. It's going to lower the fees because it's going to cost a lot less to generate the proofs for the transactions of the network, a lot less.
00:13:46.760 - 00:14:45.782, Speaker B: It's going to improve the finality both on layer one and L2 for a similar reason, because it's going to take a lot less to generate a proof, so we could submit it a lot quicker. And as always with technological improvements, it opens new possibilities, some of which we probably haven't even thought of until now. Just to get you thinking, consider that today generating a block on Starknet, and typically on networks, is something that takes a few seconds, maybe up to 10 seconds, whereas to generate a proof for a block is something that takes a lot longer, something like ten minutes. Now imagine what would happen if generating a proof will take also the order of magnitude of 10 seconds, which is the same time it takes to build the block. What that means for consensus, what that means in general. And last but not least, all of this development is open source from day one. So if you want to take a look at it.
00:14:45.782 - 00:15:18.170, Speaker B: So we're not done. It's still work in progress, it's still early stages, but we already have some codes and a working example of a simple proof for a Fibonacci series. So you could scan the QR code and go to the GitHub repo and take a look at it. So I'll end where I started. This is going to be the fastest prover out there. It will greatly reduce the cost of computation of generating stark proofs, and it's going to be seamlessly integrated into Starknet. Thank you.
