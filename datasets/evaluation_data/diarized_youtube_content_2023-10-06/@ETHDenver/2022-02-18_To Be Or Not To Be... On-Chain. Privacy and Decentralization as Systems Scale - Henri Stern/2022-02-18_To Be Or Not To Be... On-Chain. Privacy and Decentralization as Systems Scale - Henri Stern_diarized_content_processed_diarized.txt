00:00:00.090 - 00:00:34.514, Speaker A: System of scale. Please give him a warm welcome. Hi folks, congratulations on making it through the gauntlet. Great to see you all. So, yeah, I want to talk about what happens as basically we move into a more decentralized world as web3 becomes a more common paradigm, what do we do with private user data? And so that is what I'm going to be speaking to you about for the next 20 minutes. But I'm going to take a step back and introduce myself. I'm Henry Stern.
00:00:34.514 - 00:01:09.954, Speaker A: I spent the last few years of my life working on the consensus algorithm for Filecoin before starting a new company called Privy. We help developers take user data off chain safely. So I've been thinking about this quite a bit. I'm excited to dive in. So I'm going to do this in sort of four parts. I'm going to start talking about the sort of core tension at the center of the space we all work in, which is to say what happens as we take more and more data on chain to the most private data that we have. Then I'm going to talk about the state of web3 today as pertains to this question.
00:01:09.954 - 00:01:52.350, Speaker A: Before going into some heuristics we can follow as developers to try and build better products that are both more decentralized but also respecting of user privacy before sort of charting a course for the path ahead, as I see it. So let's dig in. First, where were we? Web two is really sort of predicated on the client server model. As users, we've sort of handed off state to the server. The server is the one who knows what exists in the system and can reason about sort of any sort of truth. So we are basically trusting the server to keep track of all our records, of all of our data, of all of our interactions. And this is where obviously blockchains are useful.
00:01:52.350 - 00:02:37.386, Speaker A: In October 2008, we get the bitcoin paper and this is the introduction of a new primitive that we have, which is in a sense decentralized state. Peer to peer interactions through bittorrents and other systems used to be super short lived. You would have one transaction basically, I want to download a film or something like that, and you would be having these peer to peer interactions around sort of this transient state exchange. But there was no way of keeping state around for a long time. What the blockchain introduces is a public state that everybody can keep track of. And so this allows us to build much more complex interactions built on peer to peer networks. And so now we get sort of a world in which every peer can reason about the state of the network, because the state itself is public, it's on chain.
00:02:37.386 - 00:03:16.278, Speaker A: So this is awesome. And obviously it unleashes a wave of new applications and products being built. And we're all here today for that reason. But what do we make of this web3 thing? How does the public nature of the blockchain interact with the way in which we should think about our data and our users data as we build products in the space? So web3 aims to make the Internet more decentralized, verifiable and secure. Can take that as a maybe starting definition. And all of this, I think, really stems from transparency, which is to say we have a public state we get to work with. So as a node, I don't need to take you, the service provider's word for the state of the network.
00:03:16.278 - 00:03:44.580, Speaker A: I can actually verify it on my own. And so transparency, my ability to make these verifications is at the core of everything that web3 is trying to do. And yet there's this second goal, this word that people keep talking about, which is data sovereignty. Now, what the hell does that mean? We have, on the one hand, transparency. On the other hand, we have data sovereignty, which is to say ownership. As a user, I get to be in charge of my data as it works in these systems. And I've always had a bit of trouble sort of squaring these two things together.
00:03:44.580 - 00:04:05.386, Speaker A: Now, what does data sovereignty actually mean? It means expressive, revocable permissions. It means I can give a service provider access to my data, but I can take it back. It means data portability. There's no lock in. I can go from service to service, taking my data with me. And ultimately it means user control. And I guess I want to start teasing the tension a little bit.
00:04:05.386 - 00:04:34.702, Speaker A: User control to me is a form of centralized control. As a user, if I'm in control of my data, it means I can censor you. If I don't want you to have access to my data anymore, I can stop you from doing so. And so we can sort of see this tension playing out between user control on the one hand, and data portability on the other. User control is sort of a prerequisite for privacy. Like me, having access to private systems means I get to make choices about who accesses my data. And data portability on the other side is derived from decentralization.
00:04:34.702 - 00:05:27.246, Speaker A: So how do we square away these two things? And I guess I'll jump right in by basically saying that we start by not putting private data on chain. So I'm more or less done with the talk now, but I've got another 15 minutes to go, so I'll find a way to make it work. But at a high level, putting private data, putting user identifiable data on chain means you lose access to fine grained controls. If I put encrypted data on chain and I give you the key, I can't really take that back. Now, there might be new primitives and new cryptography that allows us to do this in the future, but today, certainly it's not a good idea. And then I want to point to the fact that you also lose forward secrecy forever, which is to say, if I put encrypted data on chain and I lose my keys, I'm not just losing funds, I'm losing all of the data about myself. And we have to keep in mind as well that cryptography is evolving.
00:05:27.246 - 00:06:17.554, Speaker A: If you look at what has happened to computer systems in the last 80 years, if you look at Moore's law, if you look at quantum cryptography, the reality is that ciphers are going to break. And any private data that you think you've put on chain today is likely to become public data tomorrow. And so I am with Padme on this one, which is to say, I am very worried about developers putting Pii, putting personally identifiable information on. So, you know, that's the first part. And with know, you may ask, what constitutes private data? And so let's take a bit of a side quest, which is, let's try and determine how should I think about my user's data as a developer? How do I decide what I can and cannot put on chain? And so this is obviously a huge topic, which we could spend much longer talking about. But at a high level, you can think of, like, the most private data. This is personally identifiable information.
00:06:17.554 - 00:06:44.586, Speaker A: This is personal health information. This is Social Security numbers, a name, an address, stuff like that. That's the most private it gets. Then you have other identifiers. This could be geographic data, this could be IP addresses, things that can be de anonymized with a bit of work, moving to behavioral data, order history. This is the sort of thing that happens as I move funds, say, from wallet to wallet. You could link these things together to determine, like, this is the person making these transactions throughout the chain.
00:06:44.586 - 00:07:05.730, Speaker A: So chain history obviously is public. And finally, you have non user system data. This might be inventory, this might be prices. And frankly, this is kind of the bread and butter of blockchains. Like, we use these systems because we want guarantees against price discrimination. We want transparent pricing and auction models. And this is the sort of stuff that we see in NFT marketplaces which help us build more liquid markets.
00:07:05.730 - 00:07:42.526, Speaker A: So if I had to draw a line, obviously this is a spectrum, but I would basically say everything left of this line should be considered private. It can be used to identify users. Everything right of the line is public. Everything right of the line is really a good set of things to try and put on chain. And the chain obviously helps us build better applications by having sort of a decentralized state where we can reason about these things. Everything left of it. I think you should think twice in terms of how do you have this user data interact with your decentralized application? So with that, to go back to the title of the talk, to be or not to be on chain, that is the question.
00:07:42.526 - 00:08:15.882, Speaker A: And to answer crypto Shakespeare's question, the answer is if data is private or identifiable, really don't put it on chain. Now, why haven't we seen this happen? We just haven't seen that much data leakage on chain beyond what's sort of publicly accessible today. And the reason is that chains don't scale yet. And so we've sort of so far been saved from this issue because putting data on chain is just infeasible. It's too expensive. Obviously there's gas costs. If you needed to make a transaction every time you wanted to make an update to a database and it cost you $80, it's not a very viable system.
00:08:15.882 - 00:08:49.990, Speaker A: There's throughput block time is slow, there's bandwidth. Putting huge amounts of data on chain is infeasible. This is why we put, say, ipfs, hashes of nfts on chain. We don't put the nfts themselves on chain. And so the reality is we've been saved by our own systems to this point, but this is going to change. And this is sort of where I'm getting to in this talk, which is I think we're sort of at a crossroads where a lot of things are going to become possible that weren't over the last few years. And now is a great time to start being a little bit more thoughtful around how we handle this user data.
00:08:49.990 - 00:09:24.346, Speaker A: So obviously, I think even a lot of you are probably working on scaling solutions. This is proof of stake sharding l two s side chains, state channels, and there's reason to think that this is going to change over time. Now the question might be how are these changes going to affect privacy? Won't we get better primitives so we don't have to make these trade offs anymore. And the answer is we probably will. In particular, I think state channels are interesting in that they sort of help change the vision of what is on chain and off chain. It's not a binary thing, it's more of a spectrum. State channels are things happening off chain, being reflected on chain.
00:09:24.346 - 00:09:50.330, Speaker A: So that's one element that's really interesting. And obviously ZK roll up zero knowledge proofs are going to be very important to privacy preserving applications in the future. And so it's tempting to think we can get it all. Ideally, doge speeds up block time, ten x increases block size ten x drop fees 100 x, and then it wins hands down. We don't have to make these difficult decisions anymore. We get everything. Now, obviously, this ignores the sort of engineering constraints that we have to work under.
00:09:50.330 - 00:11:03.278, Speaker A: The reality is that to Elon Musk's tweet, there's some tension between scaling systems as pertains to sort of transactions per second and decentralization. And in the same way, I would argue there's a tension between privacy and decentralization. And so that would be sort of my second lesson in the talk, which is, remember the trade offs in everything we build? We have to make decisions about what's best for our users and what's best for our products. And we do well to remember that we are working in a space of trade offs, and we have to pick points in that spectrum on which we want to build. And so with that, I'm going to try and give us some tooling to make these decisions better, to pick these points in the spectrum. So the question is, what should I do with my user data as I'm building an app? And I think the real question, in a sense, is, can this data be put on chain? I guess I want to move us away from a place in which we ask this question towards a question which is, should this data be put on chain? And I've talked to a number of developers who are thinking about putting user data on chain, not because they think that chain somehow makes the data more private, but more so because they don't want to handle the pain of touching user data. It's never been so tough as developers to handle user data.
00:11:03.278 - 00:11:48.458, Speaker A: You've got new regulation, GDPR CCPA, that you need to deal with. You're at risk of a breach or a leak, completely destroying your reputation and obviously putting your users at risk. And so a lot of people are tempted to sort of dump data on chain so they don't have to take this issue anymore, which is a huge dereliction of duty, right? I don't want to worry about this. I'm going to dump it in a public state. The question instead is, should it be put on chain? And the real question here is, what guarantees do you need? First, again, acknowledging that the question of on chain is becoming a little blurrier and that we have a range of tools we can use to make these decisions, do you need logic control? Do you need to be able to make concerned assertions about what's happening to the data? In which case, smart contract platforms might be great. You can just use Ethereum. You don't need to put the data on chain.
00:11:48.458 - 00:12:33.850, Speaker A: Do you need to make sure that the underlying data hasn't been switched, in which case commitments to the data? The sort of way IPFs works is good enough for you. Do you need to make sure the data is available over time, which is really important to l two s, for example, in which case proofs of retrievability might be really important. And finally, maybe you actually need the data itself to be on chain. But again, as in all things, this is a spectrum, and I'm going to draw a shoddy analogy. In consensus, we have this tension between safety and liveness. So too, I think with data, which is to say we have this tension between putting less data on chain, which helps prevents leakage, and on the other side, putting more data on chain, which helps with censorship resistance. So again, we have to remember the trade offs, but luckily we have increasingly composable primitives in this space.
00:12:33.850 - 00:13:13.322, Speaker A: For each of these questions, we have a tool, and some of them are lower level, some of them are higher level, but we get to build with the appropriate tooling. And so this is sort of my next takeaway, which is use the right tool for the right problem. Think through your application, think through the behavior you're trying to engender, and pick the right tooling for the problem set you have. The dirty truth is that most products today are already hybrid. People sort of talk about decentralization, but be it in nfts, say OpenSea, most orders happen off chain. You're signing a transaction that gets stored on a centralized server, and then when orders are matched, the transaction occurs on chain. This is already happening.
00:13:13.322 - 00:13:45.460, Speaker A: Likewise, in DeFi, a lot of these protocols have sort of centralized front ends to which you're accessing smart contracts. So we're already making use of, as it were, the Defi mullet, which is fintech in the front, defi in the back. We're already mixing and matching tooling to get the right user experiences, which is exactly how it should be. So again, I'm going to sort of extol composability. I think your stack should really reflect the needs of your product and your users. And the goal for us should be to build the right tooling so you can do this. And so obviously this is where I'm going to plug the stuff I'm working on.
00:13:45.460 - 00:14:30.290, Speaker A: We're working on privy, and the idea for privy is to help developers take on user data off chain without having to silo this data and keeping users in control. What that means at a high level is all data is encrypted in the browser directly by your users. It goes into a private data store. You can have interactions happening on chain on the side, and when you need it back, you can get the data back. This allows you to build better ux. You can associate sort of real life data to onchain addresses, so you can build richer user experiences without having private data be on chain. And the goal for us is really to do exactly that, which is to build better tooling so that developers have more optionality and have more room to build the right products without putting their users at risk.
00:14:30.290 - 00:14:58.938, Speaker A: With that, I'm going to finish up by talking about the path ahead, such as I see it. Imagine you have a decentralization privacy spectrum. We go from left to right, from centralized systems to decentralized systems. Decentralized systems making it easier to verify things. We go from bottom to top, from private to public data, where private data is easier to control. I would say data sovereignty lives in the bottom right quadrant is hopefully both more private and more decentralized. But we have technical pressures keeping us from getting there.
00:14:58.938 - 00:16:04.378, Speaker A: And right now, as developers, we're sort of living in this band where our tooling allows us to build things that are either more centralized and private, or more decentralized in public. And the really cool thing about the space and all the activity that we're seeing is that better primitives, better tooling, sort of grows the band so we can actually build better products with fewer trade offs over time. And so this is sort of what I want to finish on, which is let's continue to build options. I ripped this slide from a talk from Albert Nee, who's an ethereum foundation member. And the quote is from a book I haven't read, but I like the quote, which is, the more dynamic the situation, the poorer your foresight, the more uncertain the future, the more the essential logic has to be of taking a strong position and creating options so I think my takeaway is let's take a very strong position not to sort of sacrifice user privacy on the altar of decentralization. Decentralization is a tool that gets us to an end, and the end is user ownership. And so we should take a strong position not to make this sacrifice and to instead try and build systems that are once more private and more decentralized.
00:16:04.378 - 00:16:37.926, Speaker A: And so to conclude, I think we're at a crossroads for user privacy in web3. I think the next few years are going to be really important in deciding how we build these products and what happens to user data as we get richer experiences in the space. I think you should keep your users data off chain. You should remember trade offs as you build, and always strive to build the right, to pick the right tools for the problem you're building against. And you should embrace new options and primitives. And to that end, if you're taking on any user data that you need, that makes you a little bit uncomfortable. If you need to take on user data off chain, please reach out.
00:16:37.926 - 00:16:46.300, Speaker A: We'd love to get you set up. Thank you. Awesome. We do have a couple minutes for questions.
