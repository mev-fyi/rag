00:00:07.530 - 00:00:48.726, Speaker A: You guys can hear me? All right, I guess this will start. Is the presentation fine or no? Yeah, it's good. Okay. All right, so for the crowd we have here, I'm going to try to keep this as entertained painting and as fast as possible for you. So this is like the best, shortest, random presentation you've seen in the whole conference. Okay, I'm going to tear your head off with an idea and we'll see how everyone takes it. But I was going to do a presentation on state growth as sort of the final boss for blockchains.
00:00:48.726 - 00:01:22.582, Speaker A: And where blockchains are going, state growth is a horrible problem. But instead I'm going to talk about something else, something that we researched and discovered very recently, which might allow us to basically not need ZK roll ups at all for quite a while. So effectively I'm going to present an idea. And for now I'm just calling this idea fast finality optimistic roll ups. So for those of you listening, it's a novel idea. We just released it. I've got a few people that have already looked it over so far.
00:01:22.582 - 00:01:53.866, Speaker A: No big red flags, and I'm really excited to present this today. So fast finality. Why wait a week? Why wait a week for optimistic roll ups anymore? That is the question. So for the agenda real quick, I'm going to start with just a quick overview. What are optimistic roll ups? Then we'll go into censorship. We'll go into the prior art for reducing the optimistic finality window as well. We're going to get into something, a trick which is transacting on Ethereum without transactions.
00:01:53.866 - 00:02:37.834, Speaker A: Then we're going to go into a check in model, which is the idea. We're going to talk about some downsides and some solutions and the conclusion, and for all of you listening, my name is Nick Dodson. I am the founder of Fuel and fuel Labs. I built the first optimistic roll up to mainnet Ethereum. I've been doing Ethereum stuff for a very long time, almost since it started, and quite frankly, I've aged significantly over the years, way more than a human being should just to do what they want to do in their life. All right, so optimistic roll ups. So right now on the roll up chart for Ethereum, optimistic roll ups are dominating.
00:02:37.834 - 00:03:27.806, Speaker A: They're doing really, really well. Out of the top five layer twos that are available for Ethereum right now, four of them are optimistic based or three of them are full optimistic roll ups. And one of them is a ZK roll up in which a lot of people can't sell their tokens yet, so they're high up on the list, quite frankly. But basically, most of these projects are optimistic roll ups, which means that the technique, for as long as we have it, is pretty good. A lot of people and the market are willing to use this technology and lock billions of dollars, $30 billion into these technologies right now. So doing pretty well. So to get into what is an optimistic roll up, maybe just for people who are just trying to build their knowledge, and maybe they see the definition again.
00:03:27.806 - 00:04:26.242, Speaker A: So an optimistic roll up is basically a trust minimized blockchain where it can inherit the security of something like Ethereum and uses something like watchtowers to keep an eye on things. But in general, so long as people keep an eye on it, they can use Ethereum, they can work out when things go bad and effectively keep a blockchain in a position where it's doing what we call state transitioning, and it's doing that in a nice way. And over time you can have this really nice trust minimized blockchain and it inherits the security of Ethereum, but could be completely different. It could have a completely different architecture, it could be wasm, it can be something else. In our case, it could be the fuel VM. So it's a very powerful idea. I can build a rollup that's completely separate to Ethereum, but it'll inherit the security of Ethereum and it'll bridge to Ethereum, all that liquidity, all that security I can now get with my project.
00:04:26.242 - 00:05:10.442, Speaker A: So it's a very nice idea. The problem with optimistic roll ups has typically been one really annoying thing, which is you need to wait seven days for it to finalize. Okay, and what does that mean? Well, it just means that we consider the state of things finalized by a specific time. And the reason why it needs to be seven days is because of what we call a challenge window. So for optimistic roll ups, when someone tries to basically break the state transition or a healthy state transition, we get to step in and we go, hey, that is not the right state transition. Given the rules of the system, I'm going to submit a fraud proof and I'm going to revert that state transition. They're going to lose their money and everything will continue as normal.
00:05:10.442 - 00:05:50.874, Speaker A: So the problem is that we have this seven day challenge window. And quite frankly, this is the primary reason, one of the central reasons why we're doing Zk in the first place, because we don't want to have to wait seven days on any kind of blockchain to consider it finalized to consider the state transitions are final. We've had enough time to think about it. Yes, they're okay. We're going to keep moving on. So the thing is, the challenge window needs to be long enough to basically wait out what we'd call a censorship attack on Ethereum. Now we'll get into censorship in just a second, but the period needs to be long enough to wait out the censorship.
00:05:50.874 - 00:06:10.340, Speaker A: Okay. This is very, very important for everyone listening. So what is censorship? Well, I define it very broadly as the following thing. Definition broadly meaning the prevention of transactions from state transitioning. A blockchain. Right. So I'm trying to submit this transaction to say, hey, there's fraud, there's something wrong.
00:06:10.340 - 00:07:17.670, Speaker A: And basically some attacker is just either buying out all of the block space on Ethereum or basically they have a contract with some of these block builders on Ethereum and the transaction just won't go through. Right. So you're being completely censored. So here you have a malicious actor, they're censoring a validator, an honest party, from submitting this fraud proof. Right? And so our solution with optimistic roll ups has typically been, well, if you wait seven days, that means this malicious actor has to censor Ethereum for like five to six to seven days, which is incredibly expensive, just talking billions of dollars burned just to try to prevent one transaction from reverting a state transition. Right? So it's an enormous cost, I'll reiterate, and it's highly unlikely, but it can happen. Right? So unfortunately, with optimistic roll ups, we've set that window long enough because we need to wait out a potential censorship attack so that everything can transition normally.
00:07:17.670 - 00:08:01.094, Speaker A: Now getting into some prior art with reducing the finality window for optimistic roll ups. So of course, this problem has been around for a while since we've come up with optimistic roll ups as a community, and we've thought about some ideas about how we can reduce this. So ed from arbitrum came up with a nice idea of trying to detect when Ethereum has forks and basically say, look, forks are kind of like a form of censorship detection. And we can use forks to say, hey, you know what? If we see some forks, there could be some censorship there. So maybe we need to extend the period. But if we don't see forks, we just keep going. And that's a nice model.
00:08:01.094 - 00:08:26.874, Speaker A: Don't get me wrong. It doesn't cover all forms of censorship, but it covers a good chunk of censorship. So that's really, really important. And then as well, there's been some ideas around what we call a sliding window, right. So maybe instead of having seven days, you have a shorter period of time, and then it just sort of extends out. It extends out over time when you need it to extend out. So maybe the window extends out when the base fee is high, when there's a lot of activity on Ethereum.
00:08:26.874 - 00:08:50.550, Speaker A: So we say, you know what, there's a lot of activity. I don't know if I can get my transaction in. We're going to extend the window to be safe, right? And another one is to say, what if we use the dow to sort of extend the window out? So we have a governance mechanism of some kind that basically extends the window out. And this way you could have a shorter window. Maybe you could have one day as the window. Maybe you could have three days as the window. It's probably a lot better than seven days.
00:08:50.550 - 00:09:19.450, Speaker A: Right. But you have this sort of sliding window that's happening here. So these are the two kind of core ideas that you see. And the sliding window has two papers. So one from Patrick McCorry and researchers, I can't remember their names, he's working with arbitrum as well, and one with three Sigma, who's a Lisbon based auditor, is very good. And they came up with a really interesting proposal. So this is sort of the state of the art, and quite frankly, most of the community right now is very focused on ZK.
00:09:19.450 - 00:09:47.794, Speaker A: And don't get me wrong, I love ZK fuel, uses ZK and some of our provers, and we're very hopeful for the future of ZK in the community. But it's very expensive. And when I say very expensive, I mean very expensive. And don't let anyone else tell you otherwise. It really, really sucks to process CK right now. It's going to get better, but it's not great right now. So this is the state of the art, right? So here's the core assumption that we have to challenge.
00:09:47.794 - 00:10:14.786, Speaker A: Okay, so under a sophisticated censorship attack on ethereum, right, we must assume one key thing, that no transactions can be made by anybody at that point. So we just have to let that go. We have to say Ethereum is under a censorship attack. I cannot make a transaction. It just won't go through. It doesn't matter if they're blocking the mempool, they're blocking my connection, they're spamming some address. The block producer isn't letting it in.
00:10:14.786 - 00:10:53.514, Speaker A: They're all colluding against you. Something's going wrong. Right? We have to assume we have no way to make a transaction. Now, the real interesting idea and where all this leads is what if we could use that as a mechanism to reduce the chance that censorship can actually affect implementing some kind of mechanism for a sliding window. So this is where the big idea comes in. Now, what if we said, okay, well, I can't make a transaction. Well, let's use that property for something really, really interesting, which is I'm going to transact on Ethereum without transacting at all.
00:10:53.514 - 00:11:42.582, Speaker A: And the idea here is quite simple. It's just to say, instead of using transactions to signal fraud, right? So I have to submit it to signal the fraud. What if instead we continually signal to Ethereum that the state of things is actually correct? What if we only signaled, hey, you know what? I'm just going to keep signaling when things are correct. Oh, the signal is gone. Okay, then we must be under a censorship attack. And using this mechanism, we can go, okay, now we're going to get a bunch of signals of correctness. But if a censorship attack happens, right, say some kind of, like, warlord buys out $2 billion worth of funds and they pay off all the block producers and they go, can you just censor Ethereum for three days? Because if we do this long enough, then maybe I can slip in this state transition.
00:11:42.582 - 00:12:00.158, Speaker A: I can take all the funds out of this optimistic roll up. Let's just assume the worst case. Right. Well, with this mechanism, that becomes really difficult because basically you're going to be signaling correctness. And then when the signal is gone, someone's paying for the censorship. Well, now there's nothing they can do. We know we're being censored.
00:12:00.158 - 00:12:31.690, Speaker A: So this mechanism is a reverse idea to submitting fraud proofs, but it opens up a lot of interesting design potential. So this is where we introduce a check in model. So what does this mean? Well, I've got an optimistic roll up and I'm going to be checking in. So all the validators on the roll up are going to be continually checking in. Okay. Now, if any one of the validators doesn't check in, okay, something goes wrong, they don't check in. We just assume that there is censorship.
00:12:31.690 - 00:13:06.562, Speaker A: We assume we are being censored. Now, what does this mean? Well, it means a few things with optimistic roll ups, particularly, we use what's called an honest minority assumption. What does that mean? It means that you only need one person on planet Earth to actually validate the chain to defend the entire chain. Right. And this is a very amazing property of optimistic roll ups. And using this check in model, we can still retain this property of what we call an honest minority assumption. There's one person, the minority, that can defend the entire chain.
00:13:06.562 - 00:13:55.842, Speaker A: Now all the validators are going to be submitting signals of correctness. And then when someone comes along and says, hey, I'm going to censor you, I'm going to censor someone else, the chain just goes, whoa, okay, well, we're being censored. And what you can do with this is you can passively expand the window based upon the signaling of correctness. So we can say that if all the validators check in, we can assume that the state of things is final because all the check ins are done and they're correct. And that check in can happen really, really quickly. How about one ethereum block? All of these validators could theoretically check in, and it would just take one ethereum block. What does that mean? It means optimistic roll ups can retain a minority assumption and finalize within one ethereum block.
00:13:55.842 - 00:14:22.990, Speaker A: And if anyone tries to censor, and if anyone tries to do anything there, then it just takes one of these validators to not submit a check in. And the window passively expands. And it can passively expand until seven days, until the censorship attack is over. So in practice, it sort of looks like this. You have an honest validator. You have a malicious actor. The malicious actor has, let's say, $100 billion to burn on a censorship attack.
00:14:22.990 - 00:14:59.354, Speaker A: Okay? Now, given Ethereum's economic security, how expensive this would be, et cetera, a little hard to say. But you have a regular check in. Oh, we're being censored. Okay, the really rich guy is censoring ethereum. So he censors it, but then realizes, well, wait a second, I am running out of money really, really quickly. And effectively, the honest validator just goes, okay, I don't submit anything and I'm being censored. And then the honest validator comes in after, once the censorship attack is over, submits the fraud proof, and then resumes the regular check in, and everything is passively okay.
00:14:59.354 - 00:15:50.940, Speaker A: So this is a very interesting mechanism, because effectively, under the greatest forms of censorship on ethereum, we can still progress the state of things and finalize things, but effectively not need any more mechanisms than just continually checking in by validators. So some interesting downsides to this. So there is some grieving that can go on. What does that mean? It just means that basically a single party could hold up the system, right? They could say, I'm just not going to check in, and I'm going to make sure everything waits till seven days. Okay, well, what we can do is introduce a little bit of bonding and a little bit of slashing. So if they wait the seven days and they don't submit fraud, then you better have a nice mechanism to deal with this. But effectively you could just say, well, if we are being censored, you could probably prove that either socially or some other way.
00:15:50.940 - 00:16:28.802, Speaker A: And if they don't have fraud to submit, then we know, well, it's either something we need to analyze, maybe some social mechanism, or you can just give them their bond back, or you slash them depending on the situation. But what's nice is you can design a nice mechanism where it really accounts for a lot of different situations. The second thing is accessibility. So now validators have to check in more periodically. This is a difference from the previous optimistic roll up model where you kind of only needed to make a transaction when things go wrong. So it was a lot cheaper maybe to operate. So this does raise some costs.
00:16:28.802 - 00:17:24.022, Speaker A: But this is where we can use things like ZK aggregation, and we can use nice incentive models to basically ensure that there's enough incentives and the correct bonding and everything else to ensure that everything works normally. Now we've got a lot of nice mechanism design that can help with the minority grieving issue because tendermint has a very similar issue with inactivity. And so effectively there's a lot of nice things we can do there to make sure that this model works. The incentives are structured correctly. But remembering that the incentives at the very base of this idea don't really affect security, the main thing that affects security is going to end up being, can an honest minority extend the window when they're being censored or bring the window back when they're not being censored? And the answer is yes. And we didn't know that answer was yes before, but now we do. And so when it comes to having many roll ups and many check ins, it could get very expensive on Ethereum.
00:17:24.022 - 00:18:26.186, Speaker A: So the big idea here is to say, well, all these roll ups in the happy path case can take all their votes and they can compress them in a ZK coprocessor, and then we drop that into a smart contract, and then all the roll ups can use these check ins. Now, if everyone does check in and the incentives are right, it means that the state of things is actually final, even under the honest minority assumption, which means that I can have an optimistic roll up that settles in one Ethereum block that still retains the security properties. Roughly speaking of optimistic roll ups, now, we can get into arguments about incentives and slashing and bonding and higher requirements. But the point is, I know for a fact there's enough people that would do this kind of validation for arbitram or optimism or all the other optimistic roll ups out there, and they would take rewards and they would take other things. And you can basically do this for a very low cost in comparison to ZK proving. And remembering here that we're only ZK proving the check ins, so the votes, we're not ZK proving the entire roll up. So it's a lot cheaper to ZK prove.
00:18:26.186 - 00:19:43.942, Speaker A: And you still get really great finality guarantees while having Ethereum security and inheriting the base level security. So what are the conclusions from this presentation? Well, what we've shown is that we can actually safely remove now the seven day window from optimistic roll ups while still being censorship resistant and retaining only an honest minority assumption, which is really, really wild. Now, if all validators check in, and as well, you'd say the finality window is very small, you can also use this for cross roll up interoperability. So one of the big pitches of using ZK is that, well, we know every ZK is going to be valid. So effectively, if they're all valid, then I can aggregate all of this stuff again and then I can communicate between them. But once the finality here is solved in the way that it is here, all I need to do is look at for all the check ins on the validator sets and then I can understand, well, yes, everyone's checked in, thus the state is valid, and thus I can do atomic cross chain interoperability with optimistic roll ups, not with CK, which is very fascinating. The last thing is we can use these check in mechanisms potentially elsewhere in DeFi, where you have like lending protocols and other things that need to close out certain cdps and other things like that.
00:19:43.942 - 00:20:14.060, Speaker A: Potentially this mechanism is also useful there as well, the mechanism of transacting without transactions. So effectively, that's the big idea. And I am very excited to, well, carry this idea through. We'll repost on e three search soon. Thank you for listening to my crazy idea. We'll have the community vetted further and we'll see what the situation is. But in general, yeah, now why do we have to wait a week? So thank you very much, everyone.
