00:00:10.090 - 00:00:54.426, Speaker A: All right, I think we are good to go. Perfect. Okay, so this is actually my second talk on the stage over the past few days, and this is now the third day of Eth Denver. And I'll say the same thing that I did during the first talk, which is that it's great to see already so many people here before the main event starts. So I'm actually particularly excited for this second talk of mine because it's a little bit closer to kind of what we're building here at particle network, which is a lot of account abstraction related products. And specifically there's going to be a very interesting kind of topic and angle that I'm going to be going through on account abstraction today, which is kind of understanding why account abstraction has maybe been adopted slower than you could have expected given its impact on user experience. So we're going to go through this kind of with this specific agenda.
00:00:54.426 - 00:01:49.470, Speaker A: So we're going to start by kind of first defining what ERC four three seven account abstraction is, what does it mean for user experience, how does it actually impact applications and the possibilities within it? From there, we're going to go into the state of account abstraction through ERC 457. So to what degree has it been adopted, how many user operations have been executed and so on. From there we're going to go through kind of what's next for account abstraction. So as you'll see within this second part, adoption hasn't been maybe as good as we have expected so far, or there could be some room for improvement. So how are we going to get to that point? How we're going to solve the remaining points of friction for account abstraction to make it truly a mainstream product that actually drives this idea of the next billion users. From there, we're going to go through kind of two key components of the general adoption of account abstraction or of kind of Ux centric technologies in general. That a particle, we feel are very fundamental to the kind of improvement of user experience throughout the ecosystem.
00:01:49.470 - 00:02:22.202, Speaker A: So first, what I want to do is go through kind of the timeline of account abstraction. I'm sure you guys have heard of this term plenty. What is account abstraction? Its impacts on user experience. This probably isn't kind of a new term for many of you, but account abstraction has actually been kind of an initial idea for a long time now since 2016, with the original kind of proposal for ERC four three seven being done in 2021. Now, ERC four through seven, in terms of an actual implementation, wasn't live until March of last year. So whenever I go through some of these numbers in a moment. Keep that in mind.
00:02:22.202 - 00:03:20.700, Speaker A: In terms of account obstruction through the standard is still very, very new to the Ethereum ecosystem. And of course the numbers reflect this, but they can definitely be better as well. So, as a quick overview, if you didn't understand what I just said regarding account abstraction and what it means, the easiest way to understand it is basically a transition from externally owned accounts, which are kind of the standard account structure within the EVM ecosystem, used for things like setting transactions and receiving tokens and interacting with contracts and so on, transitioning from that to smart contract wallets, which essentially allow for the same type of interaction, but through the means of a smart contract. So there's kind of a few key differences here that are important to understand. The first is that externally owned accounts, which is probably what most of you use when it comes to metamask or any other typical wallet, these are secured by single points of failure. So private keys, as soon as your private key or seed phrase gets leaked, the control over your account is also revoked. It's given to whoever took your private key.
00:03:20.700 - 00:04:00.134, Speaker A: This is a pretty major issue for a lot of reasons, and as a result, we see a lot of breaches and loss of funds, specifically through the loss of private keys today. Additionally, beyond just the kind of security implications of using an account with a single point of failure, external accounts also just have a very limited range of functions. They're made for very specific use cases of sending transactions and interacting with contracts, and that's about it. They aren't programmable as a result of this limited range of functionality. And if you lose your private key, if you lose a single point of failure, there's no chance of recovery. Whoever has that private key now, it's their account. Essentially, the good thing about EOAS is that creating an account is free.
00:04:00.134 - 00:04:33.534, Speaker A: And whenever you create an EOA or you start using it, that's the same address, the same kind of interface on every other eVM chain that you use, which is great. This kind of creates a unified standard for users. And of course, it's kind of easy to understand whenever you're interacting across different EVM blockchains. So why do we want to move to smart contract wallets? Well, it's actually primarily to solve kind of those three points of red right there, which is number one. Smart contract wallets are intrinsically programmable. So these are interfaces that you can program to basically have any arbitrary logic that you want. Do you want two fa, do you want guardians? Do you want gasless transactions? Et cetera.
00:04:33.534 - 00:05:24.082, Speaker A: This is possible through smart contract wallets and isn't necessarily possible through eoas. Additionally, kind of like I alluded to just now, these have very flexible security. So while eoas are basically just bound to one private key and how you can secure that, smart contract wallets extend this pretty far into things, like I mentioned, two fa, social recovery, et cetera. And again, this goes in tandem with the fact that they aren't usually bound to a single private key. You could have multiple eoas that own parts of a smart contract wallet, or you can have one smart contract wallet that has different security features that again, make it beyond this limitation of one point of failure via a private key. Finally, the kind of one downside to smart contract wallets, it's not a silver bullet by any means, is that they aren't free to deploy because these are smart contracts at the end of the day. So if I want to use a smart contract wallet on a chain that needs to be deployed, and that costs money.
00:05:24.082 - 00:06:14.190, Speaker A: So this is one point of friction, but ultimately you're going to have more benefits moving to a smart contract wallet via ERC 457 than you would by sticking with an EOA. So I want to kind of shift gears just for a moment here to contextualize some of the information I'm going to go through over the next 14 minutes or so. So first of all, I want to kind of go through the three pillars of friction that exist within web3 today. So why don't we have a billion users within the ecosystem? Why isn't web3 as mainstream as it possibly could be? A large part of it beyond just potential application limitations, is actual infrastructure limitations that can be kind of put down to these three verticals. The first is onboarding and account flexibility. So the process of actually getting a user into an account, and ideally that account being as flexible as possible. So you want users to be able to onboard in two or three clicks.
00:06:14.190 - 00:07:06.290, Speaker A: The account that they onboard into should of course be as flexible, as I mentioned, with smart contract wallets. So flexible security, gases, transactions, batch transactions, et cetera. Beyond this, you have transactional complexity, which is arguably a more important issue because today interacting with web3, especially when you're doing it across chains or across multiple applications, is incredibly complicated. Users are basically expected to manually discover and execute every transaction in a sequence of transactions to achieve a goal. So if I want to do a on chain a, then I want to do b on chain b. Doing so could take five or four transactions and be pretty difficult for me as an end user to actually figure out and then execute, this is a major limitation. It's just as a result of kind of the rawness of interacting with blockchain today, and it's a pretty big barrier to entry for newer users or those with less technical acumen.
00:07:06.290 - 00:07:50.450, Speaker A: For the third issue, which I'll talk about kind of for a good chunk of this, is multichain complexity. So some of you might have heard as of recently, this term of chain abstraction. So this is kind of what that would aim to solve in terms of multichain complexity within web3 as a whole is a major, again, barrier to entry, in terms of if I want to go from chain a to chain b, sometimes I'll do different bridges, or it's non uniform standards, et cetera. It's quite difficult to interact across chains, and again, it isn't uniform. So for the end user it's quite difficult and complicated. They need to be constantly aware of what chain they're on, what chain they want to be on, and the infrastructure that might get them between each chain, which often is difficult to work with. So these are the three main issues, onboarding, account flexibility, transactional complexity and multichain complexity.
00:07:50.450 - 00:08:25.680, Speaker A: So this, as you might notice, kind of corresponds very closely with the user journey. So number one, onboarding, account flexibility. This is the first step in a user journey. They start with the onboarding process and they, of course, onboard into an account. From there they start doing transactions and of course eventually they'll do transactions across chain. So these three problems tie in very closely with just what users, what you would expect users to do on a day to day basis. So of course, these are all things that need to be solved, and the fact that they aren't is probably a large contributor to maybe why we've seen less adoption throughout web3 as a whole, not just ERC 437.
00:08:25.680 - 00:09:06.086, Speaker A: So given this context of these tying very closely with the user journey, what I do want to make sure is made clear is that the first problem is actually largely solved. Maybe not to 100%, but we can consider it solved for the sake of this presentation. This is solved through, number one, account abstraction. Number two, things like NPC wallets and social logins. The infrastructure exists today where an end user can go to an application and essentially onboard, and start using that application in two clicks, and they can do that into a smart account. So this is a big component of why the onboarding problem is effectively solved today, although of course it still needs some widespread implementation. Beyond this, the kind of latter two problems are things that are less solved.
00:09:06.086 - 00:09:39.054, Speaker A: So these are kind of more emerging, cutting edge parts of the space that we have yet to really address en masse. So that's, again, transactional complexity and multichain complexity. So I want to kind of go back to ERC four three seven here. So how does that relate to the three problems that I just mentioned beyond the onboarding component? So first of all, ERC four three seven applies to a lot of different things. And you can see clearly this has been identified within the ecosystem through this large suite of infrastructure providers. You have a ton of smart account providers, bundle or paymaster providers, key management solutions. We fit into all four of these categories.
00:09:39.054 - 00:10:20.370, Speaker A: So we do MPC wallets, we do smart accounts and so on. But you have a huge list of organizations that are dedicated to building this infrastructure. But why? How does it actually translate into adoption, all these individuals building for ERC 47, what does adoption look like so far, since it was originally deployed in March of 2023? Here are some numbers. This is actually from Bundle Bear, which is a great website, and they give some amazing stats on account abstraction. So some kind of key metrics here is, number one, between five core chains. So ethereum, polygon, optimism, arbitrum, base and avalanche, there's been about 12 million total user operations. So that's by user operations that can either be one or multiple transactions.
00:10:20.370 - 00:11:14.740, Speaker A: Beyond that, there's been about $2 million in sponsored gas across these five chains, 3 million total smart accounts, and around 200 to 300,000 weekly active smart accounts. So in kind of the grand scheme of web3 and what you usually expect out of kind of account adoption, and of course, comparing this to eoas, it's quite small at the moment. Now, if you even look into account retention, which I believe John rising from stack up posted about this a few months ago, where the account retention with smart accounts specifically is pretty low, depending on kind of what month you're looking at, as you can see here, it kind of drops off pretty considerably from month one to month two. And eventually, starting at month six early in 2023, about 1% retention. So there's definitely some, I guess about 2%. There's definitely some kind of work to be done in this sense. So this is something to note as well regarding the actual state of adoption with ERC 457.
00:11:14.740 - 00:11:58.382, Speaker A: So with 457, I don't have much time left, so I'm going to kind of go through three key points of friction contrasting with the three key points of friction I just mentioned for kind of the larger web3 space. So ERC four, three, seven. The reason why that adoption, those numbers that we just went over a moment ago haven't been maybe as much as you might expect beyond just the fact that it's a relatively new technology that needs implementation, can kind of be broken down into three key things. The first is that for a long time, complexity as it relates to integrating ERC four through seven was quite high. It was pretty difficult to actually, you know, build an application that leverages account abstraction. Today, that's not necessarily the case. There's a lot of sdks, including sdks that we do and stack up and zero dev, et cetera, that abstract.
00:11:58.382 - 00:12:38.730, Speaker A: Most of this intrinsic complexity, it removes it eliminates it essentially. So it makes it where you can basically now interact with the counter abstraction to the same degree that you would with any other normal transaction structure, which is of course a big step forward. But even though the simplicity is there, even though it's easy to interact with account abstraction within an actual application, the issue beyond the actual complexity is incentives. So developers don't have large incentives to integrate account abstraction. This is because maybe they just don't have a large reason. They don't see the benefit ux wise that, that their application might see as a result of the integration. Now there's some exceptions to this, like gaming for example, has been one vertical where kind of abstraction has been integrated to a pretty large degree.
00:12:38.730 - 00:13:12.146, Speaker A: But still in a lot of verticals you see a very low amount of adoption with this technology because again, a lot of developers don't see a reason to switch to ERC four three seven over the standard account structures that they're already used to. This ties very closely in with wallet participation. So most wallets that users use are EOA based. They aren't based on smart contract wallets and therefore most users will naturally just automatically be in EOAS. Again, wallets don't have a major incentive to integrate smart contract wallets as an alternative or even migrate completely. And finally, again, multichain complexity. So smart accounts are especially difficult to work with multichain.
00:13:12.146 - 00:13:40.594, Speaker A: We'll get into the reasons why in a moment. But this is a major point of contention with account obstruction is the difficulty that comes up when you're trying to use them across different chains. This can kind of be broken down into two core problems here. Number one is that it's expensive to use smart accounts across different chains. So you have to deploy a smart account on every chain that you want to use it on. This incurs gaps, which is expensive. Beyond this, there's not enough feature incentives for wallets and for applications to integrate ERC four, three, seven.
00:13:40.594 - 00:14:13.146, Speaker A: So as a result, you see fragmented integration, not a lot of adoption. And of course, for multichain usage, there's some points of friction there as well. Okay, so tying these back in with kind of the original issues that we just talked about with the larger web3 ecosystem. Again, we kind of identified three core issues, one of which was solved. The last two that are remaining for the entire ecosystem, not just account abstraction, is transactional complexity and multichain complexity. So this kind of ties very closely in with UX improvements. So incentives for wallets and dapps.
00:14:13.146 - 00:14:54.374, Speaker A: Again, if we can solve this using account abstraction as kind of a layer, as a foundation, then account abstraction will intrinsically be adopted quite significantly. Multichain complexity, again, this can also be solved with account abstraction or be improved with account abstraction, which contributes to that problem that we identified with ERC 47 a moment ago. So these two groups of issues, the fundamental issues of web3 and the issues of account abstraction specifically tie in very close together. So solving these within account abstraction will therefore contribute significantly to the solution of these problems within the larger web3 ecosystem. So this is very important to understand as we kind of go into the latter half of this presentation. Okay, so real quick, I want to go through basically two halves of the problem here. Number one, transactional complexity.
00:14:54.374 - 00:15:28.510, Speaker A: Number two, multichain complexity. First of all, transactional complexity. So this is solved primarily by what we call intents. I won't get into too deep exactly how this works within this presentation because I only have about 5 minutes left. But essentially intents, what these operate to do is basically take or remove the cognitive load away from a user when it comes to expressing and executing transactions. So as a user typically would have to go through every step in a process to achieve a certain goal on chain. So they have to do different transactions, signatures, approvals, et cetera, whatever they need to do to go from point a to point b, this is up to the user.
00:15:28.510 - 00:16:22.950, Speaker A: They need to not only determine what these transactions are, then actually go ahead and execute those transactions. This is a problem. This is quite complex. So what we can do alternatively is use intents via what we call the intent fusion protocol to basically have a user just express what they want to do. So user says, I want to go from point a to point b, I want to spend this amount of x, right? And by doing so, by expressing that intent, that intention, the intent fusion protocol or any intent framework can essentially say, okay, well, we know what the user wants, and we know what the transactions could be, or the protocol should ideally figure out what those transactions should be to kind of get from point a to point b and then execute that for the user. So this graphic kind of visualizes that rather than the user defining and executing every transaction that they do, typically the intent fusion protocol, or intents in general, they just take an expression, a goal, and then they find the transactions that need to happen and then execute that for the end user. This is a major evolution and basically removes all transactional complexity.
00:16:22.950 - 00:17:21.958, Speaker A: I won't go into this, but if you want to take a picture of something, this is kind of the architecture of what you might see within most intent centric systems. Again, it just involves expression of an intent, then translation into actual transactions or tasks, and then execution of those tasks, of those transactions on behalf of the user. So intents can kind of be seen as an evolution of account abstraction to some degree. For example, this graphic was inspired mostly by biconomy, where they made the argument that intents are basically the next step from account abstraction when it comes to improving user experience. So you can see intents as leveraging account abstraction in a lot of cases and therefore pushing the adoption of account abstraction alongside, of course, solving this transactional complexity. So these two are again tied very close together. Okay, so at this point, going through that very quick overview of how we can solve transactional complexity, we now have both of these kind of initial two problems solved, onboarding and account flexibility through account abstraction and NPC wallets.
00:17:21.958 - 00:18:09.222, Speaker A: And number two, transactional complexity through intents, which are an extension or kind of a layer above account abstraction, which they typically use account abstraction underneath kind of that interaction layer. So now we have multi chain complexity. So how does this operate? What is multi chain complexity and how do we solve it? First of all, again, kind of a complicated graphic, but again, this is kind of serving to visualize this idea of whenever you're using multiple different chains, especially with the smart contract wallet, this very quickly becomes quite laborous and quite cognitively intense. So you have to deploy the smart contract wallet on every different chain. So if I have chain a, chain b, chain c, chain D, I have to go and deploy that wallet on every chain. So this is expensive, this is difficult, right? This is for the end user. This is just kind of not very user friendly or kind of mass consumer ready, if that's a way to say it.
00:18:09.222 - 00:18:46.062, Speaker A: So beyond this, of course, you have to manage balances on each chain, and actually moving between chains is quite difficult as well. So I think I went back, there we go. So this is kind of one solution to half of that problem, which is actually the deployment problem. Right. So because you have to deploy across every different chain, there's a solution to this, which is omnichan account abstraction. This again gets a little bit complicated, but essentially the goal of omnichan account abstraction and kind of what we're building towards and what a few other organizations are building towards is to allow smart accounts to be defined and deployed in a single location and to be managed across every other chain that they're deployed on. Again, intent fusion protocol.
00:18:46.062 - 00:19:27.230, Speaker A: Intents serve to contribute to this idea of reducing multi chain complexity through the cross chain execution of intents. This gets a little bit complicated, but if you want, that is kind of an architectural overview of how that would work. So how do intents kind of go from its expression to ultimately doing transactions across multiple different chains for the end user? Finally, I want to very quickly highlight this as well. BTC Connect, which is another kind of thing that we're building at particle, which addresses kind of this idea of multi chain complexity with the bitcoin ecosystem. So we basically allow smart accounts to be interfaced through one native bitcoin wallet, Unisat, OKx, Xverse, et cetera. And this wallet can be used across every bitcoin layer, two, including native bitcoin. And that kind of results in a smart account that we're deploying on chain.
00:19:27.230 - 00:20:07.246, Speaker A: So that is kind of unifying the interface across multiple different chains with the kind of abstraction. Another example of solving multi chain complexity via AA. Okay, so we've now solved kind of through these two very quick introductions, we've now solved transactional complexity and multichain complexity, ultimately leading to a complete solution that ideally will set the stage for actual mass adoption within web3. So that was that, about 20 minutes. I kind of went through it as quick as I could, but that's kind of the current landscape of ERC four three, seven as it relates to user experience and potentially the evolution of that, as if we continue over the next few years, tying in again the solution to transactional complexity and multichain complexity. That's about it. Thanks, guys.
00:20:07.246 - 00:20:09.760, Speaker A: There's our QR codes, and I appreciate you guys having me on.
