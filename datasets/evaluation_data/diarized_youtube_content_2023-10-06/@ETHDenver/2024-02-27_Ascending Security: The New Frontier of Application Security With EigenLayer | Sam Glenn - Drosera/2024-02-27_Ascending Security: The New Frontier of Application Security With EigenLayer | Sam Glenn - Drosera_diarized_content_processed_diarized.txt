00:00:07.690 - 00:01:23.692, Speaker A: Hey, guys. So my name is Boba, I'm the CTO at Drocera. Today's talk is going to be about ascending security, the new frontier. Super bullish title, right? What does this even mean? Ascending security, the new frontier? What are all those things? The talk is basically to talk about how we can ascend security and how do we handle security for the next frontier in crypto, right? So rather than just talking about kind of general security things, I wanted to start with a thought experiment for you guys to think about when thinking about crypto and what we're doing with advancing all this technology. And the concept here is risk debt. Developers are familiar with the concept of tech debt, right? You add a feature, you add more logic, and you add some huge epic, right? But you need to be able to go back and you need to clean up the code, you need to refine things, right? And I think the same thing goes for complexity. When you add more complexity, you add more risk.
00:01:23.692 - 00:03:40.940, Speaker A: And that risk debt gets built up over time and you need to be able to manage it, because at the end of the day, risk debt will eventually make you pay, right? Whether it's through a vulnerability or some dependency that you're using that has some other risk associated with it that is going to have a bad effect on your protocol and your users. So like I was saying, crypto is quickly evolving, and the pro to that is that evolving is essential for survival and it's essential for innovation, right? Survival is a thing that I think most protocols care the most about, right? If you can survive a couple cycles, you can continue to grow TVL, grow users. And this is fantastic. But the con is that increasing complexity leads to increased risk. So the parallel I like to talk about here is that back in the day, websites and services had like maybe one or two or three dependencies that they used, and now they have like 15 different services, right? And I think the same thing is going to happen in crypto where rather than just using one oracle or one bridge, we're going to have protocols that are using like 15 different other protocols and other tokens, and there's risks associated with being connected to all those different protocols and then those protocols being connected to all these other different protocols, right? So what do we do about it? And kind of what I'm proposing here is that we need to evolve our security infrastructure in lockstep with industry, right? We need to continue to add more security infrastructure as we add more complex systems and as risk grows, right? This idea of risk debt, and it's really important that we actually maintain alignment with the ethos of DeFi when we're making the security infrastructure. That's like making decentralized bug bounties, decentralized auditing, right. Just making sure that we're honing in on this permissionless, transparent, decentralized nature of crypto.
00:03:40.940 - 00:04:21.044, Speaker A: And so there's a really big piece to this infrastructure that hasn't really been tackled quite yet, like across from audits, bug bounties and alerting infrastructure. But I want to get to that. The first thing to think about here is this idea of layered security. If you're a protocol and you're using audits, bug bounties, and alerting platforms, you're doing layered security. You're adding many different layers to fill the holes in this bulletproof vest. But the thing with security is that it's an iterative process. You're never going to be able to have a silver bullet.
00:04:21.044 - 00:05:15.332, Speaker A: One solution that just protects you from every last thing, right? So you need to be able to have multiple defenses, defenses in depth. Right. So this is the missing piece, I think that we really need incident response infrastructure. Essentially, you can think of this like nodes that are running twenty four seven that are doing risk analysis on the ecosystem, on protocols, and they're essentially just emergency systems in place to take some automatic action, like if a bridge goes down or some lending protocol gets like some insane amount of bad debt. We need systems in place to help protect the users and then protect other people's users that are maybe even using your protocol as a dependency. And then obviously we can't rely on devs waking up at 03:00 a.m. To sign a multisig.
00:05:15.332 - 00:05:42.832, Speaker A: I'm sure everybody loves to do that, but I don't. So we should try to put things in place to make sure that we don't have to do that anymore. Right? That would be fantastic. So this is risk mitigation 101, right. You have some type of backup plan put in place to be able to do something. If you're not at your computer or your team is asleep, or your team is maybe coming to East Denver and they're in an airplane. Right.
00:05:42.832 - 00:06:35.838, Speaker A: That would be very important for you to have something in place that when you land, you say, oh my God. Thankfully, our users are protected, the system is paused, or there's some type of mitigation that was performed by our incident response infrastructure. And so this is like the big question, right? Why am I talking about this now? Why hasn't there really been this much of a focus on this stuff. And I think that a big reason is because of industry wide tech updates, upgrades, right. Advancements in ZK, advancements in restaking, that's like risk zero on the ZK side, eigen layer restaking. Obviously on the restaking side, and obviously with something like restaking, this allows us to build security infrastructure that is Ethereum aligned. Right.
00:06:35.838 - 00:07:45.678, Speaker A: We're leveraging Ethereum to be able to have some type of shared security. And especially on the ZK side of things. What's really important here is the fact that we can do general purpose, verifiable compute, whereas before it wasn't as possible, we didn't have things like risk zero in place to be able to do some really advanced stuff. So on the restaking side, how does it fit into all of this? One thing I'd like to think about here is if you think of staked ETH from a validator perspective, that's like securing Ethereum from the consensus layer, from the execution layer. But you can also think of restaked ETH as securing Ethereum's applications at the application layer. And that's something that is available to us with things like AVss and just restaking in general. Having slashing allows for us to build rules around this node, software and rules that weren't embedded into your Ethereum clients.
00:07:45.678 - 00:08:46.686, Speaker A: We can have sidecars that are running and making sure that not only are these Ethereum validators caring about Ethereum, but they're actually caring about your application. And if we have a lot of those, then we can see applications in general becoming more secure and Ethereum becoming more secure. And then obviously on the ZK side, what I was saying earlier about general purpose zero knowledge vms, the thing here that's really important is that when it comes to security, it's an always changing landscape. Like there's some new zero day that's occurring, or there's some ecosystem wide event, like a bridge going down. Having general purpose zero knowledge vms allows us to quickly innovate and add more security infrastructure to handle new threats as they come. That's something that's like 101 in the web two, space. We should be doing that in web three, there's no doubt about it.
00:08:46.686 - 00:09:34.056, Speaker A: And then as for usage, how have we seen ZK been used? Been used? Fraud proofs, validity proofs. Those are things that you can use for incident response infrastructure, security infrastructure, and you can use it for disputing having a dispute window with fraud proofs. If there's consensus between a bunch of nodes that some incident has occurred or you can have validity proofs where a proof is sent saying, hey, this incident occurred. Mathematically, take some action. So this brings me to essentially my last slide, talking about drocera. Drcera is an incident response protocol. It's an avs.
00:09:34.056 - 00:10:17.416, Speaker A: So leveraging, resticking Eigen layer. The whole point is to reduce risk debt. The whole point is to handle the complexity that is constantly growing because it's just going to continue to go right. We need to be able to have something like Jocera in place to be able to handle this risk debt so that we don't have to pay for it when exploits occur. The idea is to have nodes running twenty four seven looking at your protocol and for them to be ethereum aligned as well. So you have security that is aligned for your protocol's needs and Ethereum's needs. And then the coolest thing about Drocera really is this kind of like catchphrase at the end, security infra as smart contract code.
00:10:17.416 - 00:11:17.170, Speaker A: I think that's something that's super important in this space is making sure that we fully leverage the EVM rather than making like some node js backend thing that we're running in the cloud. I think that if we can fully leverage smart contract code to make systems like Drusera, then we're going to see kind of an expansion of more complex systems that have reduced risk. And I think that if you think about this in terms of the eigen layer space, what's really cool about something like drocera is that it's like an avs that can provide protection for other avss. And you can think of that as like Eigen layer protecting itself, Ethereum protecting itself. It's added complexity, but it's like targeted complexity to reduce risk. All right, that's the end of the talk, guys. Bullish.
