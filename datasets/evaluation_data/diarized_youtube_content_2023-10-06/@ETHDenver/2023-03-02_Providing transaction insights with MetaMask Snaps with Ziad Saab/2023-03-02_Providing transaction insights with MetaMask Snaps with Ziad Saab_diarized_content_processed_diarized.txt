00:00:00.570 - 00:00:41.856, Speaker A: Metamask snaps before we get started. Okay, we were all doing something different before coming here, so one thing I really like to do, feel free to join me. I'm just going to gently close my eyes and take two deep breaths so that we can all come into this room together. All right, great. Now that we've done that, we can get started. The presentation that you're looking at right now is a business presentation. Like it makes a business use case for metamask snaps.
00:00:41.856 - 00:01:07.388, Speaker A: I didn't even write it. It was made by my colleague Christian Montoya. I just literally copied it and slapped my name on it. But we don't have a lot of time for this workshop, right? We barely have 30 minutes. So I'm not going to go through this presentation. I want to do a demo of how to build a snap with you guys. It's a technical workshop, so I will summarize the like 60 slides of this presentation very quickly, in 1 minute, just so you know what we're doing, and then we'll get started.
00:01:07.388 - 00:01:54.824, Speaker A: Okay, so I'm going to tell you a little story. Two days ago, I was at the biddle hub. I was sitting down at the metamask table. We had like our logo. So a lot of people came to see us, and I heard like about three times people saying like, oh, I wish metamask built this feature, or I wish metamask would have this chain integrated in the wallet and all that. And they were all valid use cases for a wallet, but we just don't have the time or resources to build all of that stuff. And you never hear anyone say like, oh, I wish Apple had built this virtual reality makeup app for the iPhone or whatever, because any developer can wake up any day, they can learn swift or something, and then they can just build any app for the iPhone.
00:01:54.824 - 00:02:36.600, Speaker A: And that's what snaps is. Any developer with snaps can learn Javascript or already knows javascript, and you can just write some code that has access to some privileged APIs without us ever lifting a finger. You can implement a new protocol. There's a bitcoin snap that you can use today and a developer preview of metamask. It's called Flask, and there's a snarknet snap. There's a lot of plugins that are already created, and today I want to show you how you can create your own plugin. Okay, so with these metamask snaps, you have access to APIs, such as being able to derive private keys out of the user's wallet with their permission.
00:02:36.600 - 00:03:27.684, Speaker A: You have access to see all the transactions that the user is doing and give them some extra information, like enhance the transactions. You can send notifications directly into the wallet. You have access to a lot of APIs, and this allows you to build some really interesting integrations around account abstractions or communications or identity. And today we're going to be building a transaction insight snap together. That is a snap that is going to add some user interface inside the metamask UI and give some useful information for any transaction that I make inside the metamask and the way that I've set up the workshop. Good news, you don't have to use your laptops or anything. I've set up a git repository which is linked at the end of this presentation.
00:03:27.684 - 00:04:07.524, Speaker A: So if you want, you can QR code. This will link you back to this presentation. And at the end you have a lot of resources, our discord, our GitHub discussion forum, and even a link to the workshop that I'm going to give. So I'm going to give you a minute to do that and stow away your phones when you're done. And the workshop that I'm giving is set up on GitHub so that you can really follow it step by step. There's like one branch for every step that I'm going to be doing, so you can safely, you don't have to follow or try to do it at the same time as me. I really set it up well and I tested it with a bunch of people.
00:04:07.524 - 00:04:43.436, Speaker A: So I'm going to be demoing how to create a snap from scratch. But before we do that, I would like to look together where we're heading by the end of this workshop. Like what are we going to have built together? I think it's very important to know where we're going. So you'll notice that in my browser here I have metamask and it looks purple. This is metamask Flask. It's the developer preview of Metamask. And today you can actually use snaps inside the developer preview, so you cannot use it at the same time as the regular metamask.
00:04:43.436 - 00:05:17.976, Speaker A: So you have to create a new browser profile. And don't use your private keys where you have all your good stuff because this is a developer preview and as much care as we put into it, things can sometimes break. I'm going to make a transaction here. I'm going to send some eth to someone. And by the way, if you need some girly eth, you're developing something, like I can just send you some just contact me on telegram or something. I have already sent to a bunch of people. So I'm going to make a transaction.
00:05:17.976 - 00:05:58.884, Speaker A: I'm going to send some eth here between two of my accounts, whatever, and I'm going to send, let's say 0.1 eth to an account. And when I click next here, I'm going to have an extra UI element in the metamask window that you don't have. If you have metamask today, you will not have this. And even if you have metamask flask, you will not have this until you install the snap which we are going to go through very soon. And if I click on this tab, I'm going to get some insights on the transaction that I'm about to execute. It's going to tell me in this case that this transaction, if I go through with it, I'm going to pay 16% in gas fees.
00:05:58.884 - 00:06:39.684, Speaker A: So I might want to think twice if I want to really make this transaction or not. And we have a lot of developers who have built really interesting things inside this UI where they show you the reputation of the smart contracts that you're interacting to. And even some people have done like machine learning on the source code of the smart. Like you can do anything you want because we give you the transaction object. You do any custom logic, you call any APIs you want, and then you return a very pretty custom UI and the user can then get a better user experience and even maybe more security out of their wallet. If you have any questions at any point, feel free to raise your hand. It would allow me to also take a breath while you're doing that.
00:06:39.684 - 00:07:17.464, Speaker A: And if not, I'm just going to keep going through this step by step. So this is what we're building up to today. The first thing I'm going to do is I'm going to remove this snap from my metamask. This way we're going to be able to really do it together from scratch, and it's going to allow me to show you where you go to see all your snaps. So you go in your regular metamask settings and we have a new section called snaps. If you are using the flask developer preview and in the snaps section we will see that I have one snap installed. This is the one that enhanced the transaction that I was making earlier.
00:07:17.464 - 00:07:58.560, Speaker A: I'm simply going to go here and I'm going to remove it from Metamask so that I can go through the process together with you step by step. So how do you create a snap, you have to run two commands from your terminal. I'm actually working right now on a tool. You only have to run one command. You're going to be able to do in the very near future, you're going to be able to do like yarn create at Metamask snap, just like you can create a react app or something. But today you have to run two commands. You have to install globally our Cli, like the global add mmSnap.
00:07:58.560 - 00:08:36.060, Speaker A: And while this is running, I want to show you, by the way, oh, it's not called MmSnap. It's called at Metamask Snap Cli. And while this is running, I want to show you, by the way, what I'm doing in front of you live right now is all of it is inside this workshop that is linked at the end of the presentation. So basically I just showed you the demo and now I'm following the steps really step by step. Sometimes I'm going to even copy paste code from my own workshop so that we can go a little bit faster. And I still see no hands up. So I'm continuing to move forward with this.
00:08:36.060 - 00:09:21.176, Speaker A: So now that we've installed the snaps ClI, we have an MMSnap command that was installed globally. Again, you won't have to do that in a week or two, but for now you do and we can use this Mmsnap command to create a new snap, just like you would do a react application. So I'm going to call that hello snap. And what this is going to do is just going to clone a template from GitHub. It's going to install the dependencies with yarn, and then it's going to run through a build process of the snap just to make sure that everything is going correctly. And once the template is downloaded, then we're going to see what we get. Okay, so this is the first step I'm going to do with you.
00:09:21.176 - 00:09:49.728, Speaker A: I'm going to show you how to run the dev server and how to see the result of what you get. This way we're going to get like a very tight feedback loop on everything that we're doing. So the project was successfully initiated and I created it in the hello snap workshop. So now I'm going to simply switch my vs code to the hello snap directory and that's it. You've just created a snap. That's the end of the workshop. You can go home now.
00:09:49.728 - 00:10:04.968, Speaker A: All right. No, I know it's not the end of the workshop. Did you have a question though. Okay. He thought it was really the end of the work. I mean, you can go home if you want, but I suggest that you stay because now it's the fun part. But really what we give you is a full snap project.
00:10:04.968 - 00:10:35.632, Speaker A: Okay? You have here yarn workspaces project. So inside of it you have two packages. One is a site which is basically a react application, like a Dap. And we give you that so that you know how to call the snap functions, how to actually get the user to install a snap. All of that code is in a react app. You don't have to build with react, but that's what we give you. And then the second package is the snap package which has an entry point just like a regular, most regular node project.
00:10:35.632 - 00:11:05.528, Speaker A: It has a source index cs where you will be able to implement all the functionality of your snap. And we're about to do that very shortly. Before diving deeper into the code, I want to show you the output of what we give you. When you get started, I'm going to run from the root of the repository. I'm going to run yarn start. The dependencies were already installed for me when I initialized the project. So when I run yarn start, it's going to run two development commands.
00:11:05.528 - 00:11:59.996, Speaker A: One of them is going to be the dev server for the site for the react Gatsby application, and the second one is going to be for the snap. So that snap, while you're developing, you're going to also get a bundler that automatically rebundles your code just like a hot reload of a react application. And in production, when you want to ship your snap to real users, you're going to be shipping your snaps on NPM. So they're going to be built locally and then you can simply publish them on NPM and the process to install them is the same. We're going to be looking at the code for that very shortly. The dev server for react is running on localhost 8000, so I'm going to open that right now. And what you get is a template that you can use or not use, but at least you have the code in it to do what you need to do.
00:11:59.996 - 00:12:54.488, Speaker A: I opened it in the wrong browser, so I'm just going to open it in the browser where I have metamask flask installed. Notice that we also give you the proper react hooks, by the way, that you can see that here in this browser where I don't have metamask flask, it prompts me to install metamask flask. So you can reuse that logic in your own app. And here I have metamask flask installed. So I'm going to get a very familiar connect button. Your web three users are already used to having a connect to metamask button and the only difference here is that rather than asking them for their accounts when they click on connect, we are going to be asking them for a permission to connect to a snap. And you can see here that the snap that is being connected to has an id here, local colon and then some URL.
00:12:54.488 - 00:13:41.400, Speaker A: That's because the snap is being developed locally on your machine. When you go to production, this id here will look more like NPM and then the name of your package so that users are more easily able to identify your snap. So I'm going to click connect and here you will see the permissions that the snap is requesting. So the basic snap that we give you is not a transaction inside snap. It's in a snap that exposes an API and that just pops up a dialogue just so you can have some basic functionality. So the snap needs to display dialogue in windows and metamask and it needs to allow websites to communicate directly with the snap, which shows you that a snap can expose its own RPC API. So I'm going to approve and install the snap, and once I do that, the UI refreshes automatically.
00:13:41.400 - 00:14:32.508, Speaker A: And now I'm going to be able to communicate with the template snap that is given to me by clicking this send message button. This send message button is going to defer to the global Ethereum object just like you would do with any web three function, but it's going to call a function called invoke Snap, which is going to wake the snap up, call one of its RPC methods. And this dialog that you see here is being popped up inside of the metamask sandbox by the code inside the snap. So far so good. Great. So it doesn't matter here if I approve or reject, but in your code you're able to get a boolean and you'll know if the user has approved or rejected, and then you can run some logic based on that. So now that we've seen what the basic snap gives us, let's quickly walk through the code to do that.
00:14:32.508 - 00:15:05.530, Speaker A: Did you have a question? Yeah, you. No. Oh, I thought you were raising your hand. All right. Okay, cool. So first step, what happens when we click connect to metamask? Well, there's a button in the react code, and what this button does, I'm going to try to find it and show you the API that it calls because for most of what we're doing here, we're going to be working in the Snap directory. So I just want to show you very quickly what happens when we clicked the connect button.
00:15:05.530 - 00:15:45.300, Speaker A: There is a call that's made to window Ethereum and it's called wallet request snaps and you pass it the Snap ID. The Snap id is like that local colon whatever that we saw earlier. And that's pretty much all that we're going to look at inside the site directory. From now on. I'm going to be focusing on the snap directory and I'm going to be modifying the snap so that we can get what we want to do, which is display transaction insights inside the user's metamask. So that's how you install a snap. All right, now that we've seen that, I'm going to switch to the snap directory and I'm going to look at the index CS, which is the entry point of the snap.
00:15:45.300 - 00:16:23.296, Speaker A: What is this snap doing? It's basically doing two things. It's importing a bunch of dependencies and it's exporting a method or a function called OnrPC request. This is the function that we want you to export if you want to expose an API to your snap. Okay. And very quickly, how is this API called? By adapt there's a function called invoke snap that you call, we're calling it in the react code and it's the same thing you do, window Ethereum request invokesnap. You pass the idea of the snap. You pass the request with a method and some parameters if you like.
00:16:23.296 - 00:17:09.244, Speaker A: And then when this function is called, it's going to wake up the OnrPC method of your snap where you can have access to that request object and do whatever it is that you need to do. And in here, well, what we're doing right now is we're popping up a snap dialog. So what are we going to do with this code where we're going to delete all of it? Because we're not implementing an RPC API in our snap, we're implementing transaction insights. So I'm going to delete all that code and I'm going to add some new code to implement the transaction insights. Before doing that, I'm also going to go in the manifest file for the snap. This is a very important file that you should be aware of. It's called snap manifest JSON and it contains all the metadata about your snap.
00:17:09.244 - 00:18:04.204, Speaker A: So the name that will appear in the snap installation window. You can put a description and so on. But a very important part also is the permissions that your snap is requesting. The template that we give you is set up with a snap dialog permission so that it can bring up dialog and it's set up with an endowment RPC so that the snap can expose that ONRPC request method and get some requests from Dapps. So what I'm going to do here, I'm going to delete these two because we are not exposing any APIs and we're not bringing up any dialogues and I'm going to add the permissions that are going to be necessary for me to do transaction insights. There is only one and it's called endowment transactioninsights. Okay? And now I'm going to simply save this file and before doing anything else I'm going to go back and get that quick feedback loop.
00:18:04.204 - 00:18:46.296, Speaker A: I'm going to go back to my dap and I'm going to reconnect the snap. Okay, so every time you make a change to your snap, whether it's the source code or the manifest, you go back and you have to reinstall the snap. And one difference that we will see is that I didn't put the permission properly. So I'm just going to follow what my workshop is telling me instead of trying to do it by hand. Oh, it's transaction insight without an s. So I'm going to just remove that s right here and then we're going to go back and reinstall the snap. And when I do that, you will see that the permission has changed and it now says that the snap wants to fetch and display transaction insight.
00:18:46.296 - 00:19:41.836, Speaker A: So again, a very clear communication to the user about what this plugin is doing. I'm going to approve and install and the next step is going to be now that I have the permission for transaction insights, I'm going to have to implement the on transaction method, which is what the snap will call whenever there's a new transaction in metamask. So I'm going to export a const called ontransaction and it's going to be a function that will receive the transaction and it has to return a custom UI, which is a set of components that we give you to build this panel with the heading that we saw earlier. I'm not going to write the code from scratch. I'm just going to copy it from my workshop and then we're going to go through what it's doing step by step. So I'm exporting an ontransaction function and it receives a transaction object. And then what I'm doing is I'm just console logging the object so that we can see what it's made of, what fields it contains.
00:19:41.836 - 00:20:38.964, Speaker A: And I'm returning an object that has a content field which is composed of some UI components that we give you. So you notice I'm importing these components from UI and then I can compose them as much as I want. There's panel, there is heading, there's text, there is one where you can have a copyable field so the user can easily copy a text that you give them and so on. And so what this will do is every time I make a transaction in metamask and I switch to the new tab that will be added in the transaction, I will have a console log that will appear in my devtools and I will get some panel that will show this basic string here. And then the last step will be to just change from this basic string to showing the gas percentage fees like we saw in the demo earlier. So I'm going to save this and I'm going to get my quick feedback loop again. I'm going back to my dap, I'm going to reconnect the snap, we get the same permissions because we didn't change that.
00:20:38.964 - 00:21:25.468, Speaker A: But now when I go in my metamask and I make a transaction, what's going to happen is I'm going to get that new tab that will appear in the transaction window, and in that tab is going to be the text that I just displayed in my custom UI. The only problem is if I open my developer tools, I don't see that console log of the transaction object. Does anyone know why there's a console log? And clearly my code is being called, but I don't see it. Yeah, exactly. The console log happened inside the extension. So if you don't know how to access that, it's very simple. In my case, I have metamask here pinned at the top of my UI.
00:21:25.468 - 00:22:11.570, Speaker A: So all I have to do is right click and go to manage extension. I want to make sure that developer mode is open here in the top right corner. I want to make sure that it's on and I'm going to click on the background HTML view and it will pop up right here. And so what I'm going to do is I'm going to go back to that transaction that I was doing earlier and I'm going to try to make the transaction one more time, and as soon as I switch to this tab, this is when the on transaction callback is called. So the user has to want to see your transaction insight. You don't just get automatically access to all transactions. But now that I've switched here, we see in the developer tools of the extension that the transaction object was printed and you can see all the fields that you have access to in here.
00:22:11.570 - 00:22:56.850, Speaker A: You don't have the nuns because the transaction is not official yet and you don't have the hash, of course, because we didn't sign the transaction, you get the transaction before it's been approved by the user. So you get still a lot of very useful fields. And in our case, we're going to be able to use these fields like the max fee per gas and all these fields to figure out what the percentage of the gas fees that the user is paying. Okay, so that's pretty much what we're going to be doing from now until the end of the workshop is just building from that example up to having the final result of showing the user the percentage of gas fees that they're going to be paying if they do their transaction. And at any point, if you have any questions, feel free to raise your hand. If not, I'm going to keep going. Yes.
00:22:56.850 - 00:24:25.900, Speaker A: So the user has to click on your tab and then your extension will be woken up and then they're going to be able to see the result. There's no way to catch their attention more than that with what we're building, the way that it's built right now, right? Snaps, by the way, are still in developer preview, so things are still being changed and we want to be able to add also new features. So we're looking for feedback also from you guys who are building these kinds of plugins to know what's going on, right? So discord, my telegram, my Twitter, anything, just get our attention. And we'd like to know if you're building something and you feel like you're missing something, it doesn't mean that necessarily we will do it, but at least we want to know about it so that we can be in a better position because we're doing this for you guys. Yes. So maybe it's similar question, but basically do you have deep linking support? So for example, can I create a link that will lead to my tab, to my. Just so much echo, like I'm really having a hard time.
00:24:25.900 - 00:26:01.768, Speaker A: Your snap is an NPM package, right? When you put it in production, it's an NPM package and something has to call the wallet and tell it to install the snap, right? So you can create a link to adapt and rather when earlier we clicked the button and it installed the snap, you could run that code without anyone clicking the button. You could run that on page load and then there's going to be a pop up to install the snap. But your snap is not in any directory. We don't have like an App Store or anything like that for the snaps. Maybe the community will build something, but your snap is only published on NPM and then for the moment it's really going to be up to you to build a Dap that will connect the snap to metamask. Does that answer your question? Okay, I understand that's good feedback. I don't think it's possible today, but send me the question again because I can't write it down right now, but connect to me on telegram and like I said, we want all the feedback of the world.
00:26:01.768 - 00:26:40.148, Speaker A: So just tell us what you feel would be important for you and I will make sure to convey that information to my team and keep you in the loop about it. Was there more questions? All right, I don't think I have a lot of time but I have 2 minutes. Okay, so just want to show you one more thing and we're not going to go through the whole process. You guys can do it. It's like basic math, like get the gas fees, multiply by the transaction value and show the percentage. But I just want to show you one thing since I only have 2 minutes and there are no more questions. If you want inside your snap code you can access the Ethereum provider just like you would do in a regular dap.
00:26:40.148 - 00:27:20.452, Speaker A: And you don't have to do window because there's no window in the snap. So you can do Ethereum request and you can get the like. For example, for this implementation I would need to get the gas fees like the current gas fees. So I would have to request the method like eth gas price. And one thing that a lot of our developers have been having trouble with in the past few days is that they try that or they try to make a call to the network, like to call an API or something and then it seems to not be working. So the last thing I want to mention is that manifest file. Everything you want to do in your snap, you need to have permission for it.
00:27:20.452 - 00:28:03.132, Speaker A: By default your snap is in a sandbox and it can't do anything. Okay, so if I try to do that Ethereum request here, it's just not going to work because I don't have access to the Ethereum provider. So it's actually as granular as having to go back to my snap manifest and adding a permission, an endowment to access the Ethereum provider. And only if I do that will I be able to access the network. There's another one for network access, but I'm not going to go through everything. I only probably have 30 seconds. So docs metamask, IO snaps, and then our discord and everything is in the presentation.
00:28:03.132 - 00:28:25.140, Speaker A: So if you haven't got it yet, this is the QR code to the presentation. There's a lot of links to all the resources that we have for snaps. And feel free to reach out to us, let us know what you're building, let us know what you need. And thank you very much for coming here, for your attention, for your questions, and have a beautiful rest of your conference.
