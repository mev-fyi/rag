00:00:00.890 - 00:00:22.960, Speaker A: The next discussion is called security and ZK rollups, a no compromise approach to scaling Ethereum, moderated by Sam Kessler at Coindesk. And we'll have Michael Llewellyn at Open Zeppelin Riptide, a white hat, sandy pung at scroll, and Anthony Rose at Zksync give him a warm welcome.
00:00:25.530 - 00:00:49.354, Speaker B: Sweet. Hi, everybody. Thanks so much for joining us. We don't have that much time, so we're going to jump straight into things and just talk first, maybe a little bit about, for those of you who are less familiar, what is the difference between a ZK roll up to scale Ethereum and an optimistic roll up to scale Ethereum, specifically with regards to security? Maybe, Mike, you can kind of get us started there.
00:00:49.472 - 00:01:45.246, Speaker C: All right, so first preface is I'm not an auditor, but I work with very smart auditors so I can translate for them and simplify. And so we've done audits on optimism. We've done audits in Zksync, and the main difference that you end up finding is that with optimistic roll ups, you're optimistically assuming that the transactions that you're running on the l two are going to be correct, but you're going to give a challenge period for someone to prove otherwise, essentially. So the fraud proof is actually fairly simple in terms of complexity. The complexity usually comes in the fact that you have to worry about a fraud proof coming through during your seven day period with ZK rollups, the technology that makes it work, the contrography, can be very complex and difficult to understand, but the actual proof in terms of knowing that the transactions are valid when they're published on Mainnet or on Ethereum, is actually fairly simple. It basically just is yes or no. And as long as you assume the cryptography is working properly with all the other systems, then you know the transactions are good to go.
00:01:45.428 - 00:02:13.186, Speaker B: Sweet. So I'm sure everybody completely understands what ZK rollups and optimistic roll ups are now. That was actually the best overview I've heard in that small amount of time. But we've got two of the teams who are building ZKe evms here. There's a bunch of teams trying to do it. Some teams are further along than others, but it's been like one of the main things that cryptojournalists have been covering when it comes to the Ethereum business landscape and the l two landscape. So we've got Sandy from Scroll and we've got Anthony from ZK sync.
00:02:13.186 - 00:02:28.006, Speaker B: And I think now maybe one of you, maybe Anthony, starting with you, you can tell us a little bit about what are the risks inherent to zero knowledge roll ups that maybe aren't there for optimistic roll ups, or how are you thinking about those vulnerabilities?
00:02:28.198 - 00:03:11.274, Speaker D: Yes, great question. Obviously, one, that's something that we're thinking a lot about. As many people who have been maybe using the food truck experience can see, the era is basically on the threshold of being ready for users. I don't know about risks specific to ZK roll ups being the thing that I would put as, like, our number one concern. I think there's, you know, with any complex systems, we're thinking about risks from sort of end to end, right? So we, as we're approaching securing ZK sync, we're thinking about risks at the smart contract level. This is obviously common to many different systems, including optimistic roll ups. We're thinking of risks inherent to complex systems that are not even unique to web3.
00:03:11.312 - 00:03:11.466, Speaker B: Right.
00:03:11.488 - 00:03:47.186, Speaker D: You're building complex software. There are sort of application and network security problems that you have to think about generally, things about key management. There's just lots of different problems. The only piece that I would say is maybe specific to zero knowledge roll ups is that the cryptography is hard, right? It's hard to get it right. It takes a serious level of intellectual effort. It's hard to build teams that have the competencies to do this correctly. It's also hard to audit because you need basically, like, an adversarial auditor who's at least as competent as the people who built the thing.
00:03:47.186 - 00:04:00.786, Speaker D: So for us, when we're thinking about security, it's about, how do you think about orthogonal methods to secure the system so that at any one point that fails, the system still has sort of redundancy in its security posture.
00:04:00.898 - 00:04:21.278, Speaker B: Awesome. Maybe let's move to riptide. We just heard about what some of the risks are in roll ups generally, and in ZK roll ups. And you're a white hat. You hack these systems, find vulnerabilities. What would you look for if you are a white hat or not a white hat in these systems when they come out?
00:04:21.444 - 00:05:00.640, Speaker E: So I don't think I understand all the cryptography. I'm not gigabrain, I'm just a simple chad. What I would do, I used to work it tech support, and people would call in and they say, oh, what's the problem this? What's the problem this? First thing I'd say is it plugged in. So oftentimes, I think these teams, they're so smart and they go so deep in detail that they miss the forest for the trees. And so you're looking at the mathematical proofs, this and that, and then meanwhile, you've deployed your contracts incorrectly, or you've missed something glaringly obvious, and I'll be that one to find it.
00:05:01.170 - 00:05:37.666, Speaker B: Yeah, it's interesting. When I talk to ZK teams, they often talk about how there's so few people who understand the technology. I mean, maybe, Sandy, you could speak a little bit about. There's a lot of nuances both to how ZK works generally, but also to how different implementations work. Maybe you can speak a little bit about how scroll is going to differ from Zksync and some other platforms and what are, in your view, some of the advantages that come from this bytecode level equivalence, even though you say you'll both be compatible with all the same sorts of apps.
00:05:37.858 - 00:06:47.200, Speaker F: Yeah, sure. I think the question I've answered the most frequently in this conference is, what is an l two? Have you heard of an l two? So it's always good to kind of step out and talk to developers and realize we're still very early in this space. And to answer the previous question, your question actually reminds me that for all of the row up teams, how we think about security, I assume, is probably relatively similar, regardless whether it's ZK or optimistic, the way we think about it, it's a matter of security principles, and it's about kind of security being an ongoing process, about, we think about it from a terms of having an internal security team, about having continuity. I was kind of like joking before about, let's start a new war on who's the most secure ZK or the most secure row up. But that's kind of a meme, because the security doesn't go from like no one can claim at one point saying, oh, we're now secure. We're now definitively secure. That concept doesn't really exist in the realms of security.
00:06:47.200 - 00:08:03.490, Speaker F: But I think the way we think about security is that we've been open source since day one, and we've tried to kind of implement a set of security principles and make sure that all of our engineers are trained in security practices. And whenever we kind of commit code in the open source repo, there are people from the open source community or from our team who didn't work on that part, randomly selected to audit it every single step of the way. And as we just launched our testnet on Guerley kind of a few days ago, going forward, we were engaging a number of individuals who are well versed in the space of ZK circuit to kind of audit, just kind of lend a fresh paradise to the entire code base. But that's kind of an ongoing work and we anticipate to continue doing for the next few years, essentially. And to address the question of how do we differ from the other zKevms. I think we set out on this path to build what we called a bytecode level equivalent Zkevm. And I think with every design choice, there are pros and cons and there are trade offs with our decisions.
00:08:03.490 - 00:08:54.790, Speaker F: We're optimizing for Ethereum nativeness and we're also optimizing for easiness for developers. So kind of going back to part of how we think about security when a protocol has been running on Ethereum mainet for multiple years, all of their debugging program and all of the things that accumulates over the years about how secure a certain protocol is, and we want them to be able to transfer to L2 without losing any of that historical traction in terms of finding bugs and discovering process. So that's why we went for 100% bico level equivalents. And the plug there, the advertisement here is that if I want to try out our testnet, it's on scroll IO.
00:08:55.210 - 00:09:40.174, Speaker B: So I think implicit in what we've been talking about so far is that this whole ZK thing is a big money opportunity. It's a race in large part between a bunch of different teams, a bunch of different companies to scale up Ethereum. I don't know if it's going to be a winner takes all. Nobody will tell me whether they think it's winner takes all or not. But one thing that has been a consequence of this race, for those of you who've followed along on Twitter, has been a bunch of different marketing we've seen from teams around who's going to be the first ZKE EVM to market. And different teams have had different ways of defining that ZK sync. Like you guys have dueled with Polygon.
00:09:40.174 - 00:09:58.582, Speaker B: Another big team that's building a ZKE EVM to say that you're going to be the first in 2021. You said you were going to launch. I don't want to pick on you specifically. By the way, Anthony's very nice. 21. They said they were going to launch, and then they said there was going to be 100 days to mainnet. Then you launched a main net and there was a bunch of criticism around what you launched was not necessarily a launch.
00:09:58.582 - 00:10:12.762, Speaker B: You were transparent about that. But anyway, I'm curious how you're thinking about this marketing side of things with regards to, has that kind of pushed you to roll something out that might not be as secure for end users, you and other teams?
00:10:12.906 - 00:11:09.182, Speaker D: Yeah, great question, I would say. I mean, to your point about the potential delays, I think this is exactly because we haven't been pushed to do what we don't want to do with respect to security. I mean, the 100 days to mainnet piece I definitely think probably could have been communicated better in hindsight. But for us, it was always about how do we roll out a system that we've had live on testnet for a year in a way that you're being thoughtful about security, being respectful about early users, buying down risk yourself rather than rushing to say yes, quote unquote, we're first, let's open the doors. And then users or developers have, they're shouldering the burden. So for us, with the deployment back in October, the idea was always to run this closed version of the system, work with teams like Openzeppen, work with white hat researchers like Riptide, and really reduce the risk on the system. And it ended up being the case that we found improvements.
00:11:09.182 - 00:11:37.398, Speaker D: We ended up fixing various bits and pieces, and this led us to where we are today, where two weeks ago or so ago, we opened up the system for external developers to deploy. A few weeks from now, we'll see users on Mainnet, and we have also this sort of soft launch with the food truck experience, which is running on mainnet today. But to Sandy's point, security is an ongoing thing. It's important for us. It's something that we take very, very seriously. It's why we're not rushing to do things that might otherwise put users at risk.
00:11:37.494 - 00:11:59.502, Speaker B: Awesome. So my next question is for you, Mike. Kind of branching off of the answer there. So you kind of referred to these sort of training wheels that all of these ZKA evms are launching with. That's what Vitalik calls them, training wheels. One of the big training wheels is upgradability. So contracts like Uniswap are not upgradable, which seems counterintuitive in a web two context.
00:11:59.502 - 00:12:25.740, Speaker B: But Nomad, a big bridge, got hacked for $200 million when it got upgraded and auditors didn't catch because they had audited a version of the code. Then it got upgraded and auditors hadn't seen that version of the code and whatever $200 million were stolen. So I'm curious what kind of a challenge that poses for you as an auditor in the short term, like how do you communicate your findings to people when these softwares are changing for a while?
00:12:26.270 - 00:12:56.786, Speaker C: It's a good question. So there's a few things we do. First of all, when you read the audit report, and I definitely recommend everyone reads the audit report, because sometimes there's things in there that you wouldn't know about the protocol unless you read it. That's where we confirm whether the documentation matches or not. But the first thing we do is we say, what are the trust assumptions? And usually if there's privileged operators, if there's upgraders, we list that and we say, we are assuming that they act honestly. And this is the commit, this is a specific version of the code that we are addressing in this report. So we just be very clear about this is the snapshot we're looking at.
00:12:56.786 - 00:13:34.622, Speaker C: We're not saying this is going to be secure forever. We're not even really saying secure now. We're saying we've done our best to make sure it's secure at this point in time. And then going forward we make it clear, like, okay, there's the proxy, here's the implementation. And what we've done with other teams, especially with compound, and I think we're now doing at matter labs, is we encourage very close security monitoring of the multi sig and of any privileged roles in the system. One, to just make sure no keys got lost or anything that could have been loss of access, which luckily with a high multi sig is very difficult. But also to show, okay, if there is an upgrade coming through, it's not something that, it's something that the community should be aware of.
00:13:34.622 - 00:14:29.330, Speaker C: And the one thing I'd liked about the ZK sync lite approach was the fact that it was one of the few. If you look at l two beats and you look at the asterisks on the security for all of these roll ups, ZK sync did say, hey, for upgradability, we are going to put in a time lock. And the only exception to that time lock is if we have a very large threshold of multisick members who are from independent parties, approve a rapid upgrade, which would be like emergency scenario. We need to basically fix a bug that could otherwise cause users losses. So I think that's the best middle ground. And I think the path over time is the progressive decentralization, like slowly take off the training wheels in terms of restricting upgradability. Maybe it's instant today, but it gets time locked, more higher multisig, and maybe someday you can take it out entirely and just burn the upgrade role and make it so that it's immutable going forward, but it's a roadmap you have to be careful about because you never want to be in a position where you don't have any ability to respond to a security incident.
00:14:29.330 - 00:14:42.920, Speaker C: So it's a balance between decentralization and security in that particular context. And I think the idea is for projects to just be clear about the expectations for what the system is now, and then what it will be over time, where they're going.
00:14:43.290 - 00:15:10.270, Speaker B: Gotcha. Riptide. Maybe if I were a user looking at these audits, audit reports, or probably not looking at these audit reports, just looking at these products, is there anything that I should look out for? Not saying that your two products aren't trustworthy, but what should I, as a user, look at when I'm deciding whether to bridge my tokens from a layer one ethereum to a L2, how can I judge if something's secure?
00:15:10.770 - 00:15:57.962, Speaker E: That's one of the toughest things, is you talk about how users can assess the risk of providing capital and using these products, and it's so tough, and we need more transparency in the space. So I think one of the things that we should do as users is look at the security posture of the protocol. So would you rather have them rush it out, or would you rather have them check, double check? Consider different layers to the onion. If they're using a proxy, if it's upgradable, that's another layer of risk you have to accept as a user, but you don't know what's going on behind the scenes. They may have a bug bounty that's active, which is great. Bunch of audits, all fantastic. But then let's dime out arbitram.
00:15:57.962 - 00:16:23.640, Speaker E: They have a big bug bounty, and then you find a bug, they don't pay out. So you're incentivizing black hats instead of white hats. Do users know that? Users need to see that. Users need to know everything about the security of the protocol. So all that needs to be very transparent. The more transparent these protocols are, the better off they're going to do with attracting capital and hopefully gaining market share.
00:16:25.130 - 00:17:06.120, Speaker B: Speaking of market share, I kind of, like, bury the lead with one of my other questions, talking about whether this is going to be a winner takes all space. But there are a lot of teams, like Polygon, ZK, sync, Matterlabs, scroll, consensus, and there's also a bunch of, I mean, there's others, not to forget anybody, but there's a bunch of people launching these. I wonder, Sandy, like, what you think about the space with regards to will there be a place for all of these different softwares, these different L2s, or will people eventually coalesce around one? Is that something your team has thought about?
00:17:10.410 - 00:18:27.322, Speaker F: I think it's really hard to predict whether developers will coalesce because right now the number of ethereum dev community is super small. And so most projects can have this very high touch relationship with all of the row up players. So rather than being just by nature of the space being so small, it's really difficult to break down kind of like personal relationships and direct investment relationships or grants relationships or whatever. So I think right now you will see clusters of teams forming around the row ups and building on top of it. I think at some point there might be a point where the ecosystem has grown so large, or one of the routes might have carved out a particular niche, that certain new pieces of the Lego can only exist on a particular row up. But I think we're some time away from that. Know when and how that will happen I think will depend somewhat on user adoption, developer adoption, and yeah, I think it's a race that developers will get to decide.
00:18:27.386 - 00:18:58.040, Speaker B: Really now, Anthony, I think this might be our last question. You all made the choice at Matterlab Zksync to open source your code. A lot of these teams are doing that and it kind of presents a trade off between making it faster for this technology to get commoditized available to anybody. But also on security, it might be a good thing, might be a bad thing. Can you talk about it specifically with respect to security? Why is it a positive, in your view, for the community to be able to contribute? See all of your code?
00:18:58.410 - 00:19:34.386, Speaker D: Yeah, for us. So we open source the entire system at our recent milestone under a very permissive like, dual MIT Apache license. And then I think it's just like a foregone conclusion for us that this was the choice that we had to make. From the security perspective, the complexities of these system are really vast. I think tools like the l two B risk analysis framework is really useful for users to be able to kind of understand where things are. But it's a complex system with lots that can go wrong. The more that we can put in place to secure these systems, the better.
00:19:34.386 - 00:20:00.382, Speaker D: The more eyes on the code, the higher the probability that an issue is found. And again, it comes back to buying down this early risk. I think there are other valuable reasons to open source the code and it's for us, we want to get to a point where the network is. We are one contributor of many. And this is a trustless system. And a trustless system doesn't work in a world where you have to if you don't have access to the source code. So for us, this was an inevitable step that we wanted to take.
00:20:00.382 - 00:20:11.920, Speaker D: We wanted to even take it sooner. But being cautious about risk, being thoughtful about the right way to do it was. Yeah, essentially we thought as soon as external developers are required to use the system, this had to happen.
00:20:12.690 - 00:20:20.766, Speaker B: Awesome. Thanks, Anthony. Thanks everybody, and thanks for listening. I know this was really dense, but I hope you all took something away. I thought this was fantastic. Thanks everyone.
00:20:20.948 - 00:20:21.420, Speaker F: Thank you.
