00:00:00.330 - 00:00:09.710, Speaker A: Is Adam here? Absolutely. How you doing? There you are, Adam. Good to see you, man. Yeah, thanks for having me. Yeah, you got it. Well, you got an extra? I'm going to give you an extra minute. You want it? Let's go.
00:00:09.710 - 00:00:14.670, Speaker A: Oh, absolutely. Yeah. Let's get started. Okay. Take it away. Sweet. Thank you.
00:00:14.670 - 00:00:38.700, Speaker A: Hi everyone. I'm Adam and I'm working with compound and I'm happy to be here at East Denver. I have a presentation to show and also some live coding to get you started going towards the compound bounties. So I will share my screen here with my slide deck. There we go. Nice. All right.
00:00:38.700 - 00:01:04.886, Speaker A: I am Adam and I work with compound labs. I am the developer relations lead. You can contact me and I will help you out with your protocol related development projects. Things like working on DeFi projects that use the compound protocol. I'm here to help you out, answer your tech questions, help you understand all the concepts and stuff. I'm here to help you so you can find me on Twitter. I'm Adam Bosa.
00:01:04.886 - 00:01:35.414, Speaker A: You can find me in discord. I am Adam B. And also you can email me at Adam at compound finance. So today we are going to talk about the hackathon bounty for compound. I'll tell you what the compound protocol is if you haven't heard of it before, and I will show you the developer resources so you can get started hacking. And I'll also do a dev workshop to give you a jump start on what it's like to build an app with compound. So I'll tell you about the compound bounty.
00:01:35.414 - 00:02:05.706, Speaker A: We're calling it the compound composability bounty. It is for the most useful new original financial application that is built on top of the compound protocol. That is the one requirement it must be built on compound in order to be eligible for that $5,000 of CuSDC prize. Cool. So if you haven't heard of the compound protocol before, it is a developer infrastructure. It's running on the ethereum blockchain. It is decentralized.
00:02:05.706 - 00:02:42.866, Speaker A: It is something that enables developers to incorporate interest rates for ethereum assets into their application. So your users can supply assets to the protocol and they earn an interest APY on those assets when they're in the protocol. So there's no KYC, there's no custodian. It's just a smart contract running on the Ethereum blockchain. So today there are around $6.6 billion worth of assets in the protocol. And the inverse to borrowing is supplying, is borrowing, and there are about $2.8
00:02:42.866 - 00:03:29.600, Speaker A: billion worth of assets being borrowed from the compound protocol right now. And those assets are plain old ether and also some ERC 20 tokens. There are nine supported assets currently, and at any time, more can be added for use, for supplying and borrowing and getting interest rates. The protocol is decentralized, so developers can actually create the new features, such as adding assets, changing interest rates, changing collateral factors. All that good stuff can be done by developers just like you, and you can create those proposals that the whole community votes on. So yeah, that's compound in a nutshell. I will tell you a little bit about governance and how that works.
00:03:29.600 - 00:04:05.718, Speaker A: So the compound protocol has been decentralized for the better part of a year, and that is controlled by two smart contracts that are live on the blockchain. It is the comp contract and also the governor. So comp is a utility token, ERC 20. It is distributed to protocol users in a very slow drip. If you are using the protocol, such as supplying or borrowing, you can earn the comp token. And that can be used to vote on governance proposals. So governance proposals are actual changes to the protocol.
00:04:05.718 - 00:04:41.810, Speaker A: They're code changes. You can check out that code on GitHub, audit it yourself before you vote, and then if the whole community as a whole, votes in favor of a proposal, it will go onto the blockchain live. So the community can create proposals. If you have more than 100,000 comp delegated to you, you can create a governance proposal. So here's the cool logo of the comp token. Here is a flow for voting on proposals. Somebody writes some code, tries it out on a testnet, makes sure it works in the protocol.
00:04:41.810 - 00:05:34.390, Speaker A: They create a proposal, and once a proposal is created, the community can check out the code, make sure it works, audit it, and then the voting sequence becomes active. Once the proposer initializes it, there are three days for the entire community to vote yay or nay on the proposal. And if it succeeds, it gets more yes votes than no votes. Then it becomes queued and it goes into the time lock, which can be at minimum two days. And that gives applications running on the compound protocol. It gives them the opportunity to make any changes to their app to reflect the upcoming merging changes to the protocol. So if something changes, they have some time to fix their app to make sure it doesn't break before the changes go live on the Ethereum blockchain.
00:05:34.390 - 00:06:06.846, Speaker A: So that is governance in a nutshell. There is a nice interface on compound finance. You can head over there to see proposals that are made, proposals that are live past proposals. You can also vote using your comp token. There's a nice interface that uses web three to use your delegated votes to vote on proposals. Here's a cool tool. It is a leaderboard of all of the top comp delegates.
00:06:06.846 - 00:06:47.440, Speaker A: These are folks in the community that build apps on the protocol and they can do things like create proposals, vote on proposals. We have a nice descending leaderboard on compound finance governance. So resources for you to get up and running with development. You can go to compound finance and get the docs at docs, everything is linked from the docs. That homepage in the docs has things like smart contract documentation. Each method is described. There are guides for developers to build an application and get their environment set up, links to medium guides so you can follow along.
00:06:47.440 - 00:07:23.930, Speaker A: There are smart contract addresses, abis all ready to go there. You can find the whole community in discord. Come to compound finance discord that will link you to our discord. You can hang out in the development channel, ask any question you can think of. We got lots of smart folks there, including myself, and we can help you with your project, help you debug your code, give you feedback on your ideas, all that good stuff. Like I said, we got a medium blog with developer guides. And of course everything is open source on GitHub.
00:07:23.930 - 00:07:58.778, Speaker A: So check it out. This is the workshop that I will be running through today. It's a little app for using the compound protocol. Take your screenshot right now, head over to GitHub and check out my demo app as I code along with you. All right, let's get started on that coding portion. So if you go over to my GitHub, here is our cool app we're going to build together. Here is a screenshot.
00:07:58.778 - 00:08:44.258, Speaker A: I guess it's kind of small. We're going to build something like this. It's a basic app where you open the web browser, you enable Ethereum, and you can use metamask to supply assets to the compound protocol and earn an interest rate. So that is something you can enable for your users. So I have already cloned this repository on my local machine right here and I'm going to run it. It's just basically a little bit of HTML, a little Javascript app that uses an SDK called the compound JS SDK that's also open source on GitHub and it's also a little bit of CSS. I'm not going to run through everything, but I'll show you some cool stuff here.
00:08:44.258 - 00:09:17.038, Speaker A: I'm going to bring up my terminal here is the app folder itself. I'm going to do HTTP server. This is a node package for running a little web application on your local machine. So this is in the root folder, so that index HTML will be our app. So here it is running. I'm going to bring up my developer console so we can see what's going on as I write some code. Cool.
00:09:17.038 - 00:10:11.520, Speaker A: So first thing I'm going to do is I'm going to sign into metamask, I guess. All right, my local host is not running, so for this demo I will run Ganache CLi and I will do like a fork of mainnet. So this is an unlocked wallet here that I use for all of my demo applications. So we're forking Mainnet so we can run like a fake blockchain on our machine here. So that is good. And I will enable metamask real quick. Okay, so metamask, you usually have to reset your account so the nonce doesn't mess up.
00:10:11.520 - 00:10:41.814, Speaker A: Okay, cool. So we got our local host blockchain, we get 100 fake eth for free. And of course I don't have any other assets here. These are C tokens, but I have zero of them at the moment. So what I'm going to do is I'm going to disconnect from the app. So this is what happens when you first visit the app. It tells you the APY of the current compound protocol C token smart contract.
00:10:41.814 - 00:11:11.860, Speaker A: And our number is missing right now because we need to actually query the blockchain. We need to query the C token contract to find out what the rate is so we can find out the APY there's an error in the console because we don't have a web three provider. And that is because I disconnected the app. So in order to connect I can click this nice big enable ethereum button. I will enable my local host account. Very cool. So when I refresh the page, a number should pop up here.
00:11:11.860 - 00:11:59.390, Speaker A: Yes, we see the Eth APY is currently zero point 13%. And to sanity check this, we can head over to compound finance markets. And we see on ether, the supply APY is currently zero point 13%. So that's awesome. That works. All right, so the code for that guy is make my font nice and big for you all. If we use compound js and do a read on the blockchain, we can pass this little abi here of the supply rate per block for the C token contract and use our local provider with window ethereum.
00:11:59.390 - 00:12:30.394, Speaker A: And that way we can query for the supply rate per block. And here's a quick little equation. We use the blocks approximate blocks in a day and days per year. We can come up with the percentage of APY with a quick little javascript function. All of this is in the documentation, by the way, in the protocol math section, in case you want to write this again from scratch. So yeah, this is what is calculated when the page loads. So that's how we see this zero point 13 here.
00:12:30.394 - 00:12:56.786, Speaker A: Very cool. All right, so next we're going to supply some of our ether to the protocol. I'm going to make my metamask wallet nice and big so you can all see it. Cool. So here's our little interface here. I'm going to supply three eth because we have a lot of eth right now, and that's going to go to the protocol. I'm going to get a transaction request.
00:12:56.786 - 00:13:47.590, Speaker A: I don't think I can make this guy bigger. But basically what it says is I'm going to be querying the or making a transaction for the C ether contract and I'm going to be sending three eth and I'm calling the mint function. What this does is it sends ether to the contract and the contract mints C tokens. And of course we're going to be losing a little bit more than three eth for the gas fee. So the gas fee is this little bit here. So when I hit confirm, it's going to send that transaction based on my code. When I click the supply button, we're going to grab the number that was in that text box, call the supply method, which is here, and we're going to call this compound js, very easy supply method one liner.
00:13:47.590 - 00:14:35.090, Speaker A: It tells the SDK which asset and how much. So we supplied three eth and then after that we log in the console. What we supplied the underlying ethers js transaction object, because compound js is just a wrapper around ethersjs and we also log the transaction hash. So that's what we see in the console here, this transaction hash. So if we were on main net or we're on a testnet, we'd be able to plug this into ether scan and we'd see our mid transaction running. So because we're using ganache Cli, the transaction mines pretty much right away. So that means that our wallet will reflect the difference.
00:14:35.090 - 00:15:17.058, Speaker A: So it's 100 minus three point something eth is this number here the 96. And we see we have 96 eth and our c eth balance went up from zero to 149 so we have c tokens. The exchange rate is always changing. It's about 50 to one to start with. And of course, over time, that changes such that you can redeem your ce for more eth as time goes on. So as the block number goes up, you get more ether in return for your c ether when you redeem it. So now that we have some c ether, let's try and redeem it using the app.
00:15:17.058 - 00:15:51.882, Speaker A: So I have 149. So I'm going to do 100, and I'm going to click this redeem button. So we're running pretty much the same sort of function that we saw earlier. There's a button that we click, and it takes that value from the text box, and we run this one liner for compound js to redeem the asset. This is an initialized instance of the SDK. We did that at the very top here by calling the SDK constructor, left that part out. So this is the window ethereum that's provided by metamask.
00:15:51.882 - 00:16:25.510, Speaker A: But, yeah, here's the redeem function. If we have a number, it's not like someone put a letter in the box. Then we create the transaction. If somebody messes up and does something wrong or the request fails, we'll alert the user so they know something went wrong. So I'm going to hit that redeem, and that will give us a metamask transaction. We're going to run the redeem. This time, there's zero eth being subtracted from my wallet.
00:16:25.510 - 00:17:06.586, Speaker A: There is a little bit of a gas fee, so it's a little more than zero. So when I confirm this, we should see my ether go up, and we should see my c ether go down to 49. So let's confirm again in the console, we get a new transaction hash, and we will see these numbers change in a few seconds. It. There we go. We got 98 eth now. And so for that three eth that we supplied, we actually earned a little bit of interest because we had our ether in the protocol for more than a block.
00:17:06.586 - 00:17:49.066, Speaker A: So we earned some interest, and our seeth went back down to 49 because we subtracted 100. So, cool. That's supplying assets and redeeming them from the compound protocol. But what if we want to add more interfaces? What if we want to include more of those assets that are listed on compound finance? We can do that by adding some more code to our project. So why don't we try and add USDcoin to our project? Let's do that by going back to the code, and let's go to the HTML. We got our interface here for ether. So we're just going to copy this because we want to have another interface so people can do USDC.
00:17:49.066 - 00:18:31.936, Speaker A: So I'm going to take away all the things that say eth, I'm going to say USDC. Instead. We got two of these modal, sort of not really modal, but little widgets in our user interface for using the compound protocol. So when I refresh the page we see we got a USDC one here. Cool. But we do not have an APY number because we didn't write any Javascript. So we should get on that.
00:18:31.936 - 00:19:00.372, Speaker A: We should write some Javascript. All right, so up here we're grabbing each of those elements from the DOm using get element by id. I'm just going to copy them, do the same old thing and we'll change each of these to USDC. Got my multi cursor here. Nice. Sublime feature. Love sublime.
00:19:00.372 - 00:19:37.270, Speaker A: All right, so now we're going to grab all of those new elements we just made in the HTML. Let's make some more button click event handlers USDC. And these are now wrong ones. So let's do SDC. Very nice. And this is a little thing in compound js. This resolves to a string that's just plain old like eth, like that.
00:19:37.270 - 00:19:54.856, Speaker A: So it's nice if you don't like having strings in your code, you can just do compound asset name. So I will do USDC. And when we're redeeming we're doing that with C. USDC. Cool. So now we got our click event handlers. So those will work.
00:19:54.856 - 00:20:43.064, Speaker A: When we click those buttons we're going to use the same supply method. Obviously it's generic enough to work for both and calculate APY also works, but we need to actually fetch it from the blockchain. So when the window loads we're going to grab the USDC APY. So yeah, like I said before, we can pass the actual string literal if you'd like. And then let's do USDC and USDC. Okay, so we wrote some Javascript code that hooks up our interface to the blockchain. So let's take a quick peek at what the USDC interest rate is.
00:20:43.064 - 00:21:19.342, Speaker A: It's currently 9.61%. So for each USDC that you supply the protocol, you'll get a 9% interest rate, which is awesome. So let's go back to our app. So when I refresh the page here, we're going to be using that calculate APY function and getting that nine point something number, maybe we have some caching going on. So I'm going to hard reload. There we go. Nice.
00:21:19.342 - 00:21:55.434, Speaker A: Okay, so we got 9.61. That's what we saw on the other page. Excellent. So I'm going to make sure it works by doing some supplying. But I actually don't have any USDC. But what's good about having a localhost test blockchain is we can fake it, we can steal some USDC, which is kind of fun. So if you actually go over to the compound developers, GitHub, that's GitHub.com,
00:21:55.434 - 00:22:36.502, Speaker A: compounddevelopers, you can find the compound supply examples repository. This goes along with my medium blog post Quickstart guide. And there are some examples here for seeding your account with tokens. So if you're on localhost, you can seed your account with some nice tokens. So if I go over to USDC, I'm going to run this script and basically what it's going to do is it's going to mint some USDC and send it to my address. So in order to do that I need to run ganache Cli in the background and I need to unlock the USDC address so I can steal some USDC. I'm going to steal 50.
00:22:36.502 - 00:23:07.458, Speaker A: So I already have this on my machine. Yeah, supply guide. Okay, cool. So I'm going to do node seed and USDC. So that will run a transaction to my ganache CLi, which is running in this tab. And we got 50 USDC in our wallet. So when we go back over to metamask, it should say that I have 50 USDC, which it does.
00:23:07.458 - 00:23:43.898, Speaker A: Very nice. All right, now we have some USDC that we could supply to the protocol using my. Okay, here's my app. Okay, so let's do 17. Let's do a weird number. I hit supply, I get a would you like for this page to spend your used FCC. Okay, so the extra step with ERC 20 tokens is we have to approve that the compound protocol can spend our assets, which basically means just take them and put them inside the c token contract.
00:23:43.898 - 00:24:30.534, Speaker A: So the compound JS method has a way to do these two transactions in one method call. You can pass a boolean to actually make it so it doesn't, but mine does. So I'm going to approve before I actually supply. So that first transaction was sent and now the protocol can take the USDC from my wallet. So I got another metamask pop up and this one is for the actual mint operation which takes the USDC and sends it to the protocol. Of course, this time, unlike ether, it's zero because we're not spending any ETH besides the gas fee. So we're taking 17 USDC, we're sending it to the c token contract and minting some c tokens.
00:24:30.534 - 00:24:59.270, Speaker A: So like I said, c tokens are about 50 to one. So we should see our C USDC number go up. We got our transaction hash again, and we'll give this a few seconds. All right, so we got 788 CUSDC, and of course 50 -17 is 33. Cool. So that worked. Let's make sure our redeem function works.
00:24:59.270 - 00:25:46.238, Speaker A: Let's redeem 500 of those CUSDC. So we should have 288 something after this transaction. So metamask says we're calling redeem on the CUSDC contract. Hit confirm, get another transaction hash here, and check out our wallet. There we go. We got 288 CostDC remaining and 43 USDC. So of course, our amount of USDC went up a little bit because the interest rate allows to earn a little bit of USDC.
00:25:46.238 - 00:26:25.600, Speaker A: Cool. So that is a little demo of adding interest rates to an application with the compound protocol. And also compound Js, which is an SDK that is open source. It is on GitHub. It was written by yours truly. It works in both the browser and node JS. So you can come on over to the repository or the documentation and check out these cool functions for using the compound protocol and also ethereum in general.
00:26:25.600 - 00:26:49.000, Speaker A: If I head over to docs, there's a compound js tab over here. This will help you out with using that. So, yeah, that's my presentation. I'm here to answer your questions as well. I have the twitch chat open right now, so feel free to ask away. I'm ready.
00:26:50.990 - 00:27:05.680, Speaker B: Cool. Thanks, Adam. Let's take a look here. Let's see if you allow borrowers to borrow your ethereum, can a lender ever lose it?
00:27:07.410 - 00:27:46.134, Speaker A: Yes. So if somebody borrow your ethereum, can a lender ever lose? Yes. Once a person who borrows an asset, they own that asset, it's in their wallet. So they can take that and do whatever they'd like with it. So the concept that the protocol works on is this, over collateralization. So in order to borrow an asset, they must first supply collateral. So the way it works is there's more collateral needed than the value of what can be borrowed.
00:27:46.134 - 00:28:39.270, Speaker A: So let's say I want to borrow some USDC. I could check out the collateral factor for USDC by going to the markets page. And the collateral factor is currently 75%. So if I supply $100 worth of ethereum, I can borrow up to $75 worth of USDC. So that way the borrow is collateralized. And if the price of the Ethereum collateral happens to go down such that it no longer supports the borrow of USDC, that would mean that the account is subject to liquidation. So a liquidator can repay the borrow.
00:28:39.270 - 00:29:10.180, Speaker A: So they would repay that USDC, and they would be able to take some of the collateral as a bonus. So that's the incentive for the liquidator. So that's what keeps the protocol healthy. In case a borrower's collateral no longer supports their borrow, they can get liquidated and their collateral gets taken and given to a liquidator who makes sure the protocol stays safe and healthy and that the assets are able to be.
00:29:12.330 - 00:29:13.080, Speaker B: Yeah.
00:29:14.970 - 00:29:15.334, Speaker A: Five.
00:29:15.372 - 00:29:20.780, Speaker B: Turkey or Sturkey, one of those two is asking what's the biggest challenge in developing the app?
00:29:21.950 - 00:30:09.302, Speaker A: This app in particular, I'd say the biggest challenge is learning all of the concepts for using the protocol. The protocol is definitely not straightforward defi. It's challenging to learn the concepts are not trivial. So once you understand the concept of supplying and borrowing and minting c tokens and being able to redeem them later, then once that makes sense, building any app is actually pretty straightforward. Some pretty basic Javascript. I designed that SDK to be as straightforward as possible and have these nice one line methods. So if you were to write this with web three js or ethers js, this ends up being like a whole file worth of code.
00:30:09.302 - 00:30:22.970, Speaker A: But using the SDK makes it nice and easy. So you could do one liners like compound redeem or compound supply, and of course many other methods that I made simple for you. The developer want to make your life easier.
00:30:26.270 - 00:30:33.420, Speaker B: Excellent. Looks like all the questions that we have for the moment, and it looks like we're just out of time.
00:30:33.790 - 00:30:35.186, Speaker A: Perfect. Good timing everyone.
00:30:35.248 - 00:30:38.420, Speaker B: One right on time.
00:30:39.110 - 00:30:50.530, Speaker A: Great, well go after that $5,000 USDC bounty. I'm here. I'm here to help you. Come find me in discord. Message me on Twitter. Thanks for having me. I'm really happy to be a part of Eth Denver.
00:30:51.590 - 00:30:52.050, Speaker B: Awesome.
00:30:52.120 - 00:30:52.354, Speaker A: Yeah.
00:30:52.392 - 00:30:56.786, Speaker B: Thank you so much, Adam. Thank you for sharing compound and we'll see you next time.
00:30:56.888 - 00:30:57.280, Speaker A: See you.
