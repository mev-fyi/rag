00:00:00.170 - 00:00:13.214, Speaker A: We're going to move on to the next speaker in our content. That's biconomy. Chirag, I think, is here. You here?
00:00:13.252 - 00:00:13.840, Speaker B: Yeah.
00:00:15.730 - 00:00:17.120, Speaker A: Can you hear me okay?
00:00:17.490 - 00:00:18.526, Speaker B: Yes, I can hear you.
00:00:18.548 - 00:00:25.200, Speaker A: Well, the show is all yours, so we look forward to hearing from you and take it away.
00:00:26.250 - 00:01:23.030, Speaker B: All right, first of all, thank you, etnwar, for having me for this talk and everyone else for joining. My name is Shirak Titya. I have been working with biconomy and I started with blockchain when DeFi was getting started with some of the peer to peer lending applications or the auction marketplaces. So today, mainly, we are going to talk about the usability and how to improve the experiences of web three applications. So let's just get started. Present suite. All right, so the blockchain has been like the d five space has seen a rapid growth in last two years.
00:01:23.030 - 00:02:33.600, Speaker B: So here is some context about the volumes, and there are multiple use cases or the protocols coming up, be it like margin trading or alternative savings, decentralized lending, gaming, et cetera. So for all of these, I think, in my belief, for blockchain or the crypto applications to go and do a next rapid growth stage, we need scalability, usability and interoperability. So mainly focus on the interactions with these. So, like, you could pretty much build up anything with the. You can combine several protocols in DeFi and use the composability and make a really good UI and the user experience. But the way the users are going to interact with it, it still involves a lot of steps and some friction. So it is very important to simplify all of these complexities in interacting with an edify protocol or a decentralized application.
00:02:33.600 - 00:03:29.934, Speaker B: And the major issues are. So I'm going to talk about the problems with usability. Like in the beginning, you would need to remember your whole ethereum address, and you're sending this address to someone. The wallet logins are complicated and you need to have a certain extension in your browser. And this is about like I used to try to figure out how do we get this particular application into mobile and how the interaction would go. So that's one problem which is sort of like solved. Like about the addresses, which is solved with the growth of Ethereum name service, where you just sort of put up your name and the transaction is basically, it's linked with your address and the transaction goes through.
00:03:29.934 - 00:04:12.998, Speaker B: So apart from that, the gas is a big problem. So the gas prices are varying. And for example, if you set the gas price very high, then you would end up overpaying. Your transaction would go through. Or if you set this to a lower value, then you might end up getting your transaction, getting stuck. So these are the challenges. Like some protocols are setting deadlines and how do you figure out exit, what price you should be putting in? So these are the major issues of the gas prices when sending out the transactions.
00:04:12.998 - 00:05:24.162, Speaker B: Meta transactions are way to solve that, where you have a certain entity called a relayer, which pays on your user's behalf or on your behalf, and the transaction is basically like you sign a message and then this signed message is basically relayed to the DAP. There are other issues with pending and stuck transactions and with the transaction times getting too high. Or there are certain complexities when you are doing yourself as a non crypto savvy user, where you go to metamask and see certain settings or any other wallet, you see certain settings, like what is the gas limit should I put? And what are the other settings, so that this transaction saves me money and it goes faster. So these are the problems. Like it boils down to transaction. So that's why the topic of this talk would be like simplifying the transaction experience so that you or your users can have superior ux. There are certain other interactions, like in terms of scalability, layer two is here.
00:05:24.162 - 00:06:12.814, Speaker B: There are several layer two solutions, and it's actually a lot cheaper and faster when you are interacting on layer two. But when you want to move your funds back to layer one, it's a big process and hassle for it could go up to a certain number of days. So these are some of the problems which have been in the usability space. This sort of shows that you consider defi interaction as a highway. You are interacting with different protocols, yield, farming, savings, et cetera. And with each stage you need to stop at this checkbox to pay the gas fees. And it adds certain number of steps when you are interacting with the DAP.
00:06:12.814 - 00:07:26.310, Speaker B: So these includes the friction, and there are some solutions out there. So basically the goal would be like how do we make these interactions on web three, just like web two? So you compare this with the web two stack and try to have a better login solution for your users, or better managing the wallet solution without being as a custodian. So these are the challenges. And how do we transit from web two to web three with the similar experience? And yeah, this would be the goal. Like how do you capture the next billion for your DAP? Say you are a developer, or you are working on a certain protocol, or you are building something on top of it, so how the user onboarding can be improved. And also there are certain challenges with having to pay ETH or buying the ETH. First, let's say my employer has transferred me some tokens and I need to transfer these tokens and I do not know about ETH.
00:07:26.310 - 00:08:51.746, Speaker B: So I need to make this entire round trip, go to an exchange, do the KyC and buy ETH, and then I'm going to spend those ETH as a gas fees for a particular transaction. So it's about providing different options while reducing the steps for all of these interactions with the different protocols. And there are some solutions out there which this would be like guideline or some inspiration from different solutions which are out there right now in terms of valids, in terms of improving the transaction experience. So I'm going to talk about this a little bit more on the biconomy side later on. So for example, you have valid connect or fort metting, which solves the problem of interacting easily with your mobile phones, where you sort of just scan a QR code and then you're logged in or you click on a link and it is sort of a passwordless login to the DAP and then you can do the transactions basically. So these solutions can be provided more on the wallet side. And metatransaction is an idea where, like I explained, it basically allows your users to, it allows you to sponsor gas for your users.
00:08:51.746 - 00:10:23.934, Speaker B: So the transaction so this gas paying step can be removed from the entire experience. This makes a lot of sense when let's say you have a decentralized exchange or you are making let's say derivatives and the trades are very often, or it's a gaming platform, or there are like several use cases where you can reduce these number of steps with enabling meta transactions. So more on this later and certain options can be provided in terms of whether you want to pay ETH as a gas fee, do you want to pay in any coin which you already have, any ERC 20 token and you are just, there is a motor turnaround with the platform. And apart from that it should be encouraged to make these different developer friendly sdks or very simplified API suites where other people can just sort of integrate your services with like a few lines of code and their usability experience is improved. So some solutions are out there which are doing it. For example, in case of zero x, it's a very good idea where people are just like signing the messages of the orders they want to place in the order book and sort of like exchange these messages in decentralized way. And when the order is matched, the transaction would be on chain.
00:10:23.934 - 00:11:20.274, Speaker B: So these are some very good ideas of the solutions out there to be inspired from. And then you can also natively optimize the gas, because the gas prices are going high, ethereum price is going high, and how do you reduce the number of computational steps natively in your smart contracts itself. So that would save a lot on the fees, despite of you are doing some other solutions. So that is like the native optimization. So these are some ideas. Now I'm going to talk about biconomy and how sort of talk about on the high level, how do you integrate it with your DAP and how you can build on top of it. So biconomy is basically a transaction infrastructure where we have a very robust relayer infrastructure in the back end, which sort of relays your transactions.
00:11:20.274 - 00:12:16.854, Speaker B: And you need to follow a very few number of steps. And that is one time to enable the gasless transactions in your DAP. And there are some other products where users can pay gas fees in the RC 20 tokens, or there can be other use cases where users can pay fees in fiat to you later. So all of these experiences can be improved with just three lines of code in your DAP. Or you can even use the APIs to sort of relay the metatransactions from any application that you're using. And the features would be the gas transactions like I talked about, metatransactions. And then another feature is like there would be no struck transactions, you do not need to, or your users do not need to worry about how much gas fees should I set or whether this transaction will go through or not.
00:12:16.854 - 00:13:16.682, Speaker B: So there are certain services which take care of this at the back end. Apart from that you get certain amount of gas refunds whenever it is feasible to burn the gas tokens. We are using g token from one inch, but it could be like any other gas token, GST two. So this would improve also on the fee side, whether users are paying less fees in gas or in terms of overall savings. And you can sort of watch the DAP statistics on the dashboard, how your user base is increasing, or for the solution you are providing. And another problem which I didn't talk about is blockchain agnostic. What it means is basically you are interacting with different layer two solutions coming back to layer one.
00:13:16.682 - 00:14:02.374, Speaker B: And different Dapps are on different networks. And basically the users need to change this RPC address all the time. This even more further includes one more step to do this configuration of the network. Then you sort of pay the gas fee. So these transactions can with blockchain agnostic if we deduce these two steps. So users are just like signing the messages as usual, it doesn't matter, they are on any network and the transition would go through. So yeah, these are basically the features which I talked about, like how do you integrate in very few number of steps.
00:14:02.374 - 00:14:52.566, Speaker B: And the ideas would be like you can create a wrapper on top of any protocol to enable the metatransactions, or even if it's not gasless transactions, you are giving a choice to your users to pay in any other token. It could be a native token for your tab where you already have some token economics, you can give some rebates. So there are certain amount of very interesting use cases. Now I'm going to talk a little bit about how this is being managed at the back end. So in case of, for example, gas refund. So for that there would be a script to mint the gas tokens when the gas prices are very low. And when the gas prices are high, these tokens are burned along with your transaction which is being relayed by a relayer.
00:14:52.566 - 00:16:06.942, Speaker B: And then it improves in gas savings and overall gas consumed by a particular transaction. So that's the one thing in terms of a relayer infrastructure, you need to maintain a certain amount of eth in your relayers, be it like even if you're running your own relayer with GSN, and then you need to stake these relayers. So all of these account management and the relayer stuff happens at the biconomy core back end. And apart from that, for pending transactions of the stuck transaction, there are services which are listening constantly to check these transactions. And if you need to resubmit or bump up the gas price. So all of these things are doing, it's taken care of automatically. And this is like sort of the architecture for one of the approaches where basically the transaction signer or the end user will just sign this message of the transaction they want to send, and then it would come to the relayer, and relayer sort of like forwards to a certain forwarder contract whose job is to just verify the signatures by the user and also prevent the replay attacks.
00:16:06.942 - 00:17:14.818, Speaker B: And then ultimately it goes to your contract. Basically DApps recipient contract only change you need to do in your DAP contract is you need to enable metatransaction. And the way to do that is basically like if you have any method sender property or the transaction initiation property in any method of your smart contract, then you need to inherit a certain contract which makes your recipient contract native to accepting metatransactions. So in that case you just change the method or sender property to that function value and then you're ready to send out the meta transactions. So these are like some steps which are involved. First you do the smart contract changes based on the approach that let's say you want to enable gasless or you want to go for a certain approach where the users are paying gas fees and ERC 20 tokens. So based on that you just need to inherit these contracts.
00:17:14.818 - 00:18:30.334, Speaker B: Once you make this smart contract changes, then you go to the biconomy dashboard and register your contract with the different methods that your users will be interacting with. So that would be the second step. And in dashboard there are other features where I'll share the resources link where you can actually check the docs and the dashboard so you can enable other features like if you want to enable the gas token burning, you can watch the stats. And this registration process is one time, once this is done, you are ready to send out the transaction by using some client side changes in your code, which would be like importing using the SDK or directly using the APIs. So these are the contracts where you sort of inherit this contract based on the transaction approach which you're choosing. And if you notice, it just defines the message sender how to it could be a relayer or it could be an end user. So it handles a case, in case of if the transaction is forwarded with the relayer and what is the end user address which your contract should use.
00:18:30.334 - 00:20:09.822, Speaker B: So that's the whole purpose and your contracts are ready to enable the guest list transactions. And apart from that you just import, like I mentioned, in three lines of code where you import the SDK and then once you have registered your DAP and the smart contracts, you just provide your API key in this object and then you just change your current provider to use the biconomy provider and that's it. Then you can just send out any RPC call. So one more thing, like what happens in terms of infrastructure when you send out these transactions, the biconomy provider will pick your transaction and it will intercept the RPC call and it will check if your contract is registered or not, and then it will come to the method and then your transaction happens by sending out the signed transaction by the relayer. So that's the same step like I mentioned. And once you're provided the same, then you just use the send transaction RPC call and your transaction would go through and it would be gasless experience. There are some other steps where if you want to use the forward which is paying for gas and ERC 20 tokens, you just need to import helper clients which will enable, again you just use two different lines of code and it will be in any token, any supported token you want to pay for gas fees and you can create this.
00:20:09.822 - 00:21:16.070, Speaker B: So this is documented well in the docs and I can sort of reach out to the telegram or discord community to us. We encourage devs to build on top of different protocols and use biconomy in their different use cases. There are some prizes and the hackathons to sort of encourage building tutorials or building on top of any protocol using biconomy. So yeah, that's like the technical intro on the high level. And these are some stats where the different Dapps who are using biconomy and how it improved in their user base, or how it increased the volumes of the transactions which could be like a big metric for a particular tab. So this was curve on layer one and these are some of the stats. Then there is idle finance which also uses layer one and these are like sort of numbers in terms of how the experience is improved for the end users.
00:21:16.070 - 00:22:13.990, Speaker B: Another good use case is per protocol where it's basically like perpetual contracts on BTC where users can interact on layer two and it's very seamless trading experience. And here are some other stats about the partners or the Dapps who have been using biconomy. This slide talks about how you can enable gasless transactions. What are the other products which the forward enables to pay the gas fees in the SD 20 tokens. And there is also friction between moving your funds from layer two to layer one. So there is another product which you can use or leverage to build on top of. So that's called like Instagram.
00:22:13.990 - 00:23:25.200, Speaker B: And this is about some resources where if you want to use biconomy then you just go to the docs and register on the dashboard. There are some other links like how it used to be like truffle stack and apart from truffle and web three how you can move on to hard at ethers type chain stack. And there are some other resources where if you want to participate in hackathon and build a product, so how quickly you can build the solution in very less amount of time. And some other references for using different services like Wallet Connect to enable your wallet to have wallet connect functionality where end users can have very less number of steps or they can have seamless mobile interaction with the wallets that they want to use. So, yeah, that's it from my side. I think I'll be ready to take questions now.
00:23:26.610 - 00:24:04.350, Speaker A: All right. Well, let's see if we've got any questions. Jonathan, do we have questions? I'm not sure that people know they can ask questions. So if you do have questions, feel free to answer or ask them in the twitch chat there. And when our speakers are done, we're happy to ask the questions. Jonathan, any questions? I guess not. So thank you, Girag.
00:24:04.350 - 00:24:08.740, Speaker A: We really appreciate it. And we'll look forward to seeing you around the ether space.
00:24:09.350 - 00:24:11.390, Speaker B: Yeah. Thank you. It was a pleasure.
00:24:11.550 - 00:24:12.400, Speaker A: Yeah, you got it.
