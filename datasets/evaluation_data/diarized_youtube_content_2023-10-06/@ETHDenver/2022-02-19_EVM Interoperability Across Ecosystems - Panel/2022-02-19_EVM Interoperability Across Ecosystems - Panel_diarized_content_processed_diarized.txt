00:00:00.570 - 00:00:51.678, Speaker A: So thank you all for coming. It's interesting being in Denver in 2022 at an Ethereum conference, because I feel like two, three years ago, it would have been controversial to even mention that there could be another layer one outside of Ethereum. And now we have a panel full of different founders who are working on different layer ones and other ecosystems. So I'm really pleased to kind of see how this space has progressed and so we'll kick it off really quickly. I'm Ashley Tyson. I'm with hypersphere, but previously I was part of the founding team at Web Three foundation, so worked on Polka Dot and then I worked on near, and now I work with all of these guys on stage. So I will give them each a moment to introduce themselves and the projects that they're working on.
00:00:51.678 - 00:00:52.474, Speaker A: Derek?
00:00:52.602 - 00:01:21.800, Speaker B: Sure. So I'm Derek Hugh, I'm the CEO of Purestake, but the main project we're working on is Moonbeam. Moonbeam is an Ethereum compatible parachain on the Polkadot network. So, yeah, I think we'll be talking about a number of things related to kind of EVM implementations. And we just went live. We're about five weeks from our main net launch, which was on January 11. So yeah, great to be here.
00:01:23.850 - 00:01:37.660, Speaker C: Awesome. Brian from Layer Zero, we are the only one that is not an l one, but we're interoperability. So the goal is to connect all of these fine people together. Yeah.
00:01:38.670 - 00:01:39.562, Speaker B: Thank you.
00:01:39.696 - 00:01:57.842, Speaker D: Hi, my name is Nico Arquetos and I'm the CEO of DC Spark. DC Spark is working in the Mikomeda protocol. The Mikomeda protocol gives EVM capabilities for non EVM blockchains using rollups. And we are deploying to Algorand, Solana, Cardano and Terra. So we are going to be giving.
00:01:57.896 - 00:02:29.722, Speaker E: Event capabilities to those chains and to close it. I'm Alex from Aurora. We're building an EVM compatible solution on top of nier blockchain. So it allows Ethereum developers to launch their contracts without any changes on top of more performant scalable blockchain. And I cannot say that you're the only one who is not from the layer one kind of thing, because we seemingly a layer one, but also not a layer one. So, yeah, I believe. Let's kick off the great discussion here.
00:02:29.856 - 00:02:54.242, Speaker A: Sounds good. Just a quick question. Can you raise your hand if you work on ethereum specifically? Okay. Raise your hand if you work on another ecosystem? Okay, good to know. Just wanted to know. Okay, so I'd like to start off by Brian asked that we keep things a little spicy. I don't know if you'll find this question spicy enough for you, but we can get to that later.
00:02:54.242 - 00:03:11.162, Speaker A: But the future of solidity and EVM. So we've seen more and more blockchains building in rust. There's a lot of talk about wasm being the future. And I'm just curious what everyone's take is on the future of solidity and EVM. Alex, you've got the mic. Feel free to kick it off.
00:03:11.216 - 00:04:01.958, Speaker E: Sure. So from my point of view, EVM as a tech right now has the biggest amount of the developers, the biggest adoption, the biggest amount of tools available for it. So from my point of view, it's logical that many people are building for the EVM, their contracts, right? And maybe in some kind of design aspects, it's not the best one. Or back then in 2014, people were not thinking about what is going to happen in eight years after it. But we have what we have. This is the default kind of thing. And my recommendation and my point of view that in the next years we are going to see EVM becoming a de facto standard for the execution environments.
00:04:01.958 - 00:04:38.040, Speaker E: And maybe some additional languages like Wiper or some more advanced kind of things are going to appear there. But the EVM as an execution environment, I believe is going to be there. And that's why there are lots of people that are working on the EVM kind of compatibility thing. So we are all boring projects here because we are the compatibility divisions of these new blockchains, right, that are appearing, but it is us because of which the ecosystem can go and adapt new technologies. That's my point of view on this.
00:04:39.610 - 00:05:41.526, Speaker D: Okay, I'm going to try to spice things up a little bit. Let's see how it goes. So as one of my co founders say, the programming language is whatever, what do this means? That basically more important than the programming language is the programming model, because right now every blockchain has problem with the scalability and they're looking to get there. And right now I think, and I believe that there's different models, but the most likely that's going to help with scalability is the ones that are related to Sekate roll ups. So it's super important to have a model where data availability is easy to use and is scalable. And this should be going in hand with hand with everything that's related to also create the validity proof for Ck rollups, because right now it's not the easiest. And for example, for EVM, this is like a well known thing, because, for example, Vitalik is talking about this concept of, I'm going to try to pronounce it correctly, statelessness.
00:05:41.526 - 00:06:19.960, Speaker D: And this is what Vitalik uses. But right now, to create this validity proof is kind of like difficult because the state is quite big. But the EVM and the Ethereum community has realized about this, and there's a specific path with birch to solve these things. So I think the programming language is not going to be that important because you could be compiling from rust to a specific Beerton machine that doesn't do this well. So I feel like if EVM is able to move fast and solve all these issues to be really well, like a beer machine that works really well with validity proof, I think it's going to be like maybe the end game.
00:06:21.370 - 00:06:59.890, Speaker C: Yeah, I'm the one who asks for contentious questions all the time, so I think it makes panels much more interesting. Although I don't think my answer to this is particularly contentious. I think in general, we've seen long term, in all of sort of the history prior, that the market can just bear significantly worse languages and constructs if it has escaped trajectory in terms of adoption and tooling. And because of that, I don't think in terms of primary ecosystem solidity, EVM is going anywhere within any near term. Like probably not forever, but within the near term, I don't think it's going anywhere.
00:07:01.270 - 00:07:48.402, Speaker B: Yeah, I'm trying to think of controversial takes here, but I have to kind of agree with a lot of my fellow panelists that there's a consolidation in my mind around different tech stacks. At this point, if you're building chains that might be substrate or Cosmos SDK, when it comes to smart contracts, I think people tend to underestimate, greatly underestimate if you have a new tech stack, just what it takes to build all the tooling infrastructure, like other kinds of things around that new tech stack. And so from my perspective, the EVM is here to stay. Ten years from now, it's still going to be here. Back to the point of it being maybe not designed in a way you would do it today. I mean, it reminds me of, I've heard this story about like x 86, right? So when intel came out with this chip, it was this interim, almost throwaway thing. They're like, let's just do this thing.
00:07:48.402 - 00:08:06.854, Speaker B: We need to get to market quickly. We need to do these things. And then they had all these planned upgrades of better chip architectures, better instruction sets, but guess what? That got adoption tools and all these people developing around it and then here we are like 40 years later, still using the same instruction set. So that's kind of how I see the EVM playing out.
00:08:06.972 - 00:08:36.610, Speaker A: Okay, so then to make it a little bit more controversial, if that ecosystem is already in place and that tech stack is already in place, let's talk about l two s. All right, so with, like, optimism, arbitram, boba, a lot of these l two s are launching. Some are rumored to be playing with the idea of launching a token. So do l two s on ethereum eliminate the need for EVM compatible chains in other ecosystems?
00:08:37.430 - 00:09:19.566, Speaker B: Yeah, I would say that there's many EVM chains, but you'll need to specialize. I think there is a differentiation that's needed. So the l two is really, if you want good security and just cheaper execution, I think it's going to be probably increasingly challenging to have that be your differentiation angle as an alternate EVM compatible l one. So take our example. We're trying to differentiate more on interoperability, right? Because we're a parachain on polka dot, that means that we can offer native integrations, for example, using the Polkadot's XCM technology to other parachains in the ecosystem. So we're leaning into that and extending the base ethereum feature set with these native cross chain integrations. But there's other angles one can take.
00:09:19.566 - 00:09:26.340, Speaker B: But I think you'll probably need to take some kind of angle that's not just cheaper, cheaper, faster kind of thing.
00:09:29.030 - 00:10:30.950, Speaker C: Yeah, from a layer zero perspective, I don't think we necessarily need to care and sort of like where it ends up. But I will say in the current state of l two s versus alternative l ones that the market has clearly shown there's much more of an appetite for alternative l ones than it is for l two s. I think people want things that are fast and work now and have shown they're willing to sort of sacrifice certain things to do that. And that's given sort of these ecosystems like to stand on and grow and innovate. So in a perfect world where l two s inherit base layer security and are fast and scalable and has everything, then like, no, maybe not, but it doesn't seem like we're living in that world yet. So I think we'll see a continued sort of, let's say, high usage of alternative l ones as opposed to strictly everything rolling intel twos.
00:10:32.650 - 00:11:34.006, Speaker D: So how I see things is that right now, to get the token out of the way, a token is sometimes helpful, but not enough. And for scalability, there is like two major things going on. The first one is scalability and the layer one. And this is going to be really difficult to get full scalability for all the needs that are going to be in the industry in the future. So there is here going to be like a competition in the layer one, but also this to be played really well with l choose because that's going to be like the way that these chains are actually going to scale up for the needs that we need for the future. And I'm convinced that right now that charting has show so many difficulties and for example, even some chains that are working with charting, they have problems that one chart could sort of the other one with these sort of messages that could generate these reactions. So I believe that the layer one, they should optimize for data availability.
00:11:34.006 - 00:12:17.142, Speaker D: And this is super important and also to have what is everything related to the smart contract and also the state separately. There is one blockchain that nailed this one, but they're not very friendly towards roll ups. So I think that's like a huge miss. And most likely the future for scalability is going to be like Ck rollups with validity proof. So the chains that are going to be able to nail it in the layer one and also they're going to have a virtual machine that's going to be very friendly towards validity proof. I think that's going to be the winner and it's not going to depend that much about the tokens. So although there is like L2 launching Ethereum, maybe the layer one is going to be different in the future.
00:12:17.142 - 00:12:23.180, Speaker D: And maybe these L2s are going to end up moving to other chains that actually nail these specific points.
00:12:26.110 - 00:13:06.070, Speaker E: So I would like to split this part into several different questions. So first one is the usage of the security, right. When we are talking about l two s, we first of all think about the security of the Ethereum blockchain that is inherited inside of the l two solutions, right? There are many different ways how you can do it. You can launch inside of you inside of Ethereum. You can launch a validator of your l one blockchain. That would mean that in order to break your l one blockchain, you would need to break Ethereum, right. And from that point of view, this blockchain, l one, will become an l two, right.
00:13:06.070 - 00:13:55.730, Speaker E: It's going to be protected by the security of the Ethereum blockchain. This is just one of the examples, right? So utilizing the security of other solutions, from my point of view, is a great thing to do because you do not need to build from the ground up your own security of your own blockchain. Right. So this is, I believe more and more solutions are going to become an l two from the point of view of the security, but they are not going to use the paradigm that l two is right now are developing in. Right. So this is one thing. However, in terms of the EVM compatibility, the first thing that comes into my mind is just the adoption of the comparison in between the adoption of the optimism and arbitram.
00:13:55.730 - 00:14:34.900, Speaker E: Right? So optimism, who is building on optimism? Anything? Okay. Who is building something on arbitrum? Okay, so obviously it's not like a huge difference here, but zero versus two people. One of the reasons why people are not building things on optimism, because they changed the virtual machine. You cannot run directly the Ethereum smart contracts there, right. You need to rewrite some pieces of it. I know a very well known company that is integrating with optimism for more than a year right now. Right.
00:14:34.900 - 00:15:24.420, Speaker E: That's kind of approach. This is what it takes. So from that point of view, if you're losing the compatibility, if you're doing some kind of changes that are not backwards compatible, again, just reiterating on the things that my colleagues were saying, that you might be underestimating the efforts for you to build all of the tooling and all of the things for this. So keeping and like arbitrum is absolutely the same solution, but just with the EVM compatible kind of thing. So it is a little bit easier to run your stuff on arbitrum. And from that point of view, I believe just keeping that compatibility, it gives lots of great things for the developers and for the community to develop stuff on top.
00:15:27.050 - 00:15:57.440, Speaker A: So my next question is about attracting developers. So it's always a question of, do we build our own kind of ecosystem? Do we work with other ecosystems? Do we maybe siphon off some developers from other ecosystems? So how do you weigh attracting developers and capital from Ethereum versus creating a homegrown ecosystem? What are the strategies for each of your projects? And then maybe we can dive into a second question from there.
00:15:57.970 - 00:16:29.078, Speaker E: Well, from my point of view in general, blockchain is too small. Is too small in comparison with web two. In my dreams, layer ones, L2s need to stop competing with each other and instead trying to bring on board the developers from outside. Right. We have lots of challenges as the industry. We need to scale. We are not growing combined.
00:16:29.078 - 00:17:09.542, Speaker E: Blockchain is not growing as fast as freaking TikTok. Right? This is already an indication that we are doing something wrong. Right? Lots of great tech minds here and they are not able to make the tech viral. It means that we are not selling good all of the things, right. That's why from my point of view there is no need for us to compete with each other. Everybody will find a place in case we all going to succeed. So let's instead trying to either get in the developers from other protocols, let's together educate people from outside of the blockchain and bring them on board so quickly.
00:17:09.596 - 00:17:19.690, Speaker A: Assuming that's the case for you, what would you say is the difference from Aurora and what type of developers are you looking to attract? What type of community are you looking to differentiate with?
00:17:19.760 - 00:18:11.562, Speaker E: Yeah, so our approach is again like reiterating on other things that I was saying is to keep the compatibility so people are not seeing something that is unusual. It's like you're using, I don't know, C. You can run c on intel cpus, you can run c plus plus on AMD cpus or some kind of arm chips. There are compilers that are compiling it into the m one chips, right. So from that point of view for the developers, the less you change the better, right? Obviously we need to make from my point of view, the ecosystem for developers high enough so they are not thinking about the blockchain that they're working on. We need to make it a little bit better than right now. We are too low level right now.
00:18:11.562 - 00:18:28.480, Speaker E: And that's why the docs of Aurora is pretty simple. You just go to see the solidity docs and go to see web3 API docs. That's it. There's two links. So this is our approach to it.
00:18:31.410 - 00:19:11.834, Speaker D: Thank you. So for this question, maybe I can try to answer from the developer perspective or maybe first with athesis at least. I'm convinced that there's not going to be one blockchain that's going to be the winner takes all. But rather than going to be multiple blockchains out there. So having said that, and to be consistent with my answer, sometimes a lot of people have different opinions, but if you put their opinions together, they are consistent. So if we are going to have this future with multi chains. And also there is this point that Vitalik did about bridges that could be kind of scary.
00:19:11.834 - 00:20:09.710, Speaker D: And sometimes the security that you have in a L2 is basically inherited from the layer one, which is completely different when you're using bridges that actually you should be able to have local deployments of different dapps or different things. And for these evms, compatibility is quite important because if you have a specific protocol. For example, in Ethereum, what I have seen that's happening, that in other blockchains, maybe they're not copying the code because they don't have solidity support, but they're like copying the same project, it works the same way. They're basically translating the code. And for me this is like waste of brain power, which you have people inventing new stuff. And this also why for example, when you look at the DeFi primitives, I think most of them, they have come out from Ethereum and they have been implemented in other chains. So I think EVM compatibility for other chains quite important.
00:20:09.710 - 00:20:44.742, Speaker D: And that's why we are doing with milk meta. So people that want to specialize in some things, they can spend their time to create something new. And also there is the point that I was mentioning, my previous answer about scalability. So developers are going to be like, they want to code something that is not painful. If they follow documentation, it works right away, that they can debug, they can visualize different use cases. So this is quite important. And right now EVM is way, way ahead and it continues improving quite well, especially for scalability and related to validity proof.
00:20:44.742 - 00:21:31.240, Speaker D: So I think developers are going to be looking for east to code, but also what is the future of this blockchain? So I think blockchains, layer ones that maybe don't have EVM support, but they could be quite fast, they could have a chat to game developers, because if they game EVM and they're quite fast in the layer one, developers can have the easiness to code, but also they can see a future that maybe this specific layer one blockchain could make it in the future because you don't want to spend time learning a new programming language and in a new blockchain, because it's very risky and maybe it's not going to make it. And most of your work and your knowledge is going to be deprecated. So that's why I think we are going to be trying to make developer exciting about other layer ones using EVM technology.
00:21:31.850 - 00:21:39.020, Speaker A: I think some of us like the pain though. Nico, I think you might be wrong there. I think there's a lot of masochists here. Brian, what are your.
00:21:40.350 - 00:22:34.746, Speaker C: I mean, I think ultimately there's two ways to attract devs, and I think you attract them either via capital or by giving them something that's actually interesting and they want to do right. And I think most ecosystems right now just attract with capital, which is why you see the same projects being forked 100 times because they'll get paid to be forked here and then they'll get paid to be forked there, but nobody actually cares. Right. So I think it's more about giving people something that's genuinely interesting. I think for us, obviously the goal is seamless interoperability, but I think Solana has done a great job of like, it's like a closed ecosystem is a really risky bet in that if they didn't hit a certain critical mass, I think the developer community would just died. But they did, and now they have people building interesting things because it's hard. People need to actually care and be motivated enough to build there and then once they've gone through all that, they feel beholden to.
00:22:34.746 - 00:23:22.240, Speaker C: And I think one of the issues right now is everybody is just purely attracting. They're like bootstrapping protocols with just capital incentives, and I don't think it's enough. Fortunately, I'm not running a layer one or L2, so I don't need to necessarily think about it on how I would do in that ecosystem. But from our end, in attracting devs, it's really just use cases. And I think whether it's the DeFi protocols or the largest fintechs in the world, like whoever we're talking to, ultimately what we're offering them is a use case that they don't have now that is genuinely interesting to them and that they want to execute. And I think in any case, that's what's going to get people to kind of be interested enough to really build something and genuinely be sort of committed to building on top of you.
00:23:24.930 - 00:24:12.598, Speaker B: Yeah. Part of the question you asked was around assets, actually. So just to take that part first, I think if you're an alternate l, one, you pretty much have to target, at least part of your strategy has to target like Ethereum based assets. That's just where so much of the value is. And there's a whole bunch of bridging solutions such as layer zero that can help move those assets. But I kind of see that as almost required when it comes to developers first, it's kind of these prerequisites for EVM chains. I think the thing that was really an eye opener for us was, yes, you need to build the Ethereum implementation and have that work well, but there are these critical other pieces of infrastructure that developers really, really want, and some of them are not that easy to get because they're single threaded through certain organizations.
00:24:12.598 - 00:24:43.942, Speaker B: So that would be like Etherscan, I'd point out, as being one that they have a long backlog for integrations. So that's like a very critical piece along with Chainlink. Chainlink is like a big unlock for a lot of DeFi activity. And that's not something that there's only a certain rate at which those integrations are delivered. You need these prerequisites. And then what we've seen is, in my mind, the right strategy is to have a mix of what I'd call multi chain teams and native teams. So multi chain teams, there's a number of teams now know.
00:24:43.942 - 00:25:26.370, Speaker B: Many of them started on ETH mainnet and they're then pursuing a multi chain deployment strategy. In our case, I would highlight folks like sushi or curve that have deployments into our ecosystem. They're multi chain there you have a lot of confidence about their brands speak for themselves. Right. People have confidence in using those protocols and that may even be confidence enough to say, hey, I'm going to use this new ecosystem because I trust this other brand. I think the challenge with them is though, when you have a multichain team like that, the attention is divided, right? So you have ten deployments, then that team is kind of minding ten different ecosystems and you're going to get maybe a 10th of their attention, right? Something like this. And so I think that's where you have to complement with native teams.
00:25:26.370 - 00:25:40.300, Speaker B: They may be newer, they may be having new contracts, there may be some smart contract risk and other things, but you're compensated by having that team's full attention. And they're often going to be doing community building efforts and other things to help your ecosystem along.
00:25:40.750 - 00:25:45.606, Speaker A: What's the breakdown of moonbeam versus multi chain versus native teams?
00:25:45.798 - 00:26:08.260, Speaker B: Yeah, I would say that it's also been different over time. So initially our strategy was to target multi chain teams. That was kind of our initial go to market strategy. But what we've seen is much more uptake on the native side now. But that's just a sign, know the ecosystem maturing. A lot of these tools I mentioned being integrated and available, so it kind of changes over time, I think.
00:26:08.710 - 00:26:28.040, Speaker A: So we have 4 minutes left, and Brian specifically asked that we made this panel really spicy. So I'm going to ask you if you've got any questions for fellow panelists or for yourself that you want to answer that is spicy and controversial and meets your expectations of that.
00:26:31.710 - 00:26:39.242, Speaker C: I wish I did. Right. If this was an interoperability panel and I could argue with people on ways to address it, that's the fun.
00:26:39.296 - 00:26:40.602, Speaker A: I think we could take it there.
00:26:40.736 - 00:27:04.660, Speaker C: That's what I think about all day. So I love to have those conversations, but in terms of the trade offs that these guys are making, I'm maybe less equipped to ask the right contentious questions. So maybe I'll leave it to you guys if you have something for each other, or I'm happy to field any, if anybody has one. I say it every time I speak. I very much love adversarial lines of reasoning, so feel free.
00:27:07.110 - 00:27:29.834, Speaker B: Vitalik had this post, right, that a lot of people were talking about, about different consensus and security domains and kind of being a bit of a naysayer then on cross consensus, what that looks like in the future. But it seems clear to me that that's going to exist. So maybe that's obviously something. It sounds like you have thought a lot. He, is he wrong or what would you say in response to him on that point?
00:27:30.032 - 00:28:06.086, Speaker C: Yeah, I wrote a thread after it and I basically said, I agreed that wrapped assets suck. And ultimately, at the core of what Vitalik is talking about is wrapped assets, right? So you have some inflow from one ecosystem to the other. And the way that most people design bridges now is like you're going to lock an asset on chain a and you're going to mint a synthetic derivative on chain b. And so if you have $10 billion of inflow from chain a to chain b, you have $10 billion of systemic risk that lives in that contract that if something happens, wormhole was like a great example of this recently. The underlying, the entire amount of the underlying is basically at risk. Right. So I think what will happen is one is the question.
00:28:06.086 - 00:28:49.762, Speaker C: Vitalik obviously thinks through wrapped assets, because there's no contract that can mint eth on another chain. So all eth anywhere else is like weth. Right. Which is fine, but there's a bunch of assets that have native deployments everywhere. So do we really need eth on avalanche and Solana and Matic and all of these other chains? Maybe. But maybe in the future that's going to be more likely to be like USDC or some algo stable or something else, right? And so if we move towards something that's actually deployed on multiple chains, like, okay, let's say it's USDC, and you can have a pool of, let's say 100 million on each chain of these two chains of USDC, and you can get the same $10 billion of inflow, assuming you can incentivize rebalancing correctly with none of the systemic risk. Right.
00:28:49.762 - 00:29:19.502, Speaker C: You only have the $200 million that's deployed. So it's slightly less capital efficient than being able to mint and burn, but it's much more capital efficient in terms of actual risk. Right. You only ever have that $200 million of immediate risk at any point in time, and you can still have the massive inflow. And so you're talking like, orders of magnitude greater from a security perspective, not to mention the usability and all the other reasons why you would not want to have wrap synthetics. But from my standpoint, things will trend in that direction. But I 100% agree with him that wrapped assets are bad in general.
00:29:19.502 - 00:29:49.480, Speaker C: And especially when you're going from, you have five bridges, you have five different versions of that wrapped asset, and then sometimes you're like, daisy chaining wrapped assets. We're like, okay, this bridge has dominance here, and now we're not even going to bridge the native over from this chain to the other. We're going to go through a different bridge of that wrap. So you have this daisy chain of bridges where if any of them breaks, the entire chain is broken. And people don't even necessarily understand the risk that they're inheriting by using one of these on a given chain. That's basically the entire trail. Prior to that.
00:29:52.010 - 00:29:59.330, Speaker A: I guess we're out of time. But thank you guys so much for joining. Thanks everyone for joining us. Have a good east Denver.
