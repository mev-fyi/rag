00:00:00.250 - 00:00:06.858, Speaker A: Aka sporkdow. And today I am joined by Ahmed Castro from Scrolls EKP. What's up, Ahmed?
00:00:07.034 - 00:00:10.270, Speaker B: Yeah, doing great. Yeah, thanks for having me. Super happy to be here.
00:00:10.340 - 00:00:56.746, Speaker A: Thanks for joining folks that have been following along with the smart contract Tuesdays series. We have been doing a lot of different stuff, mainly focused on solidity. Over the last few months, we've learned basic solidity data types got all the way to understanding hard hat, writing scripts and doing deployment on various networks. We've had folks from other l ones and other roll ups come and explain some of the basic ideas around scaling. We've talked about other languages like sway, for example. And so I'm excited because as a not so secret eth maxi, I always get excited when there's a scalability solution that just adds on to the existing mode of Eth mainnet. Sorry, I have my bias.
00:00:56.746 - 00:01:17.140, Speaker A: It's okay if you have yours. And so to that end, I'm excited that we're joined by someone who's at the scroll team, which is working on. Well, I think I'll let you explain it better than I could. So before we get into what scroll offers, one thing I always love to do is if we could both say GM to everyone watching. GM, everyone.
00:01:17.830 - 00:01:18.980, Speaker B: GM, everyone.
00:01:20.090 - 00:01:31.770, Speaker A: I like to know the people behind the screen first. So I'm curious, how did you get to where you are? Like, did you have a life before this current role and how did you find out about web three and start getting your foothold in the industry?
00:01:32.590 - 00:01:44.206, Speaker B: Yes. So I find out about web three, actually, because of the Silk road. That's how I found out about bitcoin. Yeah.
00:01:44.388 - 00:01:45.630, Speaker A: First time I've heard that answer.
00:01:45.700 - 00:02:10.230, Speaker B: Great. Yeah. But I didn't do anything, actually. I wasn't, I guess, open minded enough to understand what was going on, what bitcoin was about. And I just look at the bitcoin logo, I didn't like it. I didn't feel compelled. Too orange.
00:02:10.230 - 00:02:53.022, Speaker B: Too orange for my Tesla. Yeah. But then I actually got into web three because of blockchain or crypto, because of Dodge coin. So, yeah, I got in 2013 at the very beginning. And I've been a developer before Web three. I did video games and also all sorts of web apps and mobile, but especially video games. So I took a look at how Dodge coin works, which is basically bitcoin.
00:02:53.022 - 00:03:31.402, Speaker B: It's the same and I really like it. So I started seeing how easy what is to code and I did some video games on Dodge Coin. And then a friend of mine introduced me to Ethereum at the beginning, I remember back then there were so many cheat coins. So I thought, okay, Ethereum is just another shitcoin I didn't understand at the beginning. But one time he just sit me and put the computer in front of me. Look, this is solidity. This is a smart contract.
00:03:31.402 - 00:03:59.210, Speaker B: You can code it this way, you can deploy like this, et cetera. And it was thanks for him that actually. Thanks, Christian. If you see this, shout out to Christian. Yeah, it was because of him that I got into Ethereum. And yeah, just fast forward now. I'm just very deep into the rabbit hole doing just full time doing blockchain stuff.
00:03:59.210 - 00:04:58.730, Speaker B: Super happy and especially now with Scroll. I remember back then that we used to see like it wasn't not too long ago that we used to think that these theories of having zero knowledge proofs on blockchain, this is scalability that's going to help. But it may work or it may not. And yeah, fast forward now. Scroll is doing these amazing things and I am really happy and honored to be part of the team that is making this possible. Because for people that don't know about scroll, it's a cke evm. Basically, as Derek said, that if you know how to deploy smart contract on Ethereum, you also know how to do it on any CKVM such as scroll.
00:04:58.730 - 00:05:20.398, Speaker B: And if you're a user, it's the same experience, but it's cheaper, faster, and you don't have to compromise security because all security relies on layer one. So yeah, super happy to what's happening on the space and also being part of the sweet.
00:05:20.574 - 00:05:25.560, Speaker A: Yeah. When you were doing your game dev, what were you working on? Like unity or something?
00:05:28.250 - 00:06:04.594, Speaker B: So for Dodge Coin, my first project was some sort of casino that you send Dodge and you open a chest and some chest have more coins. So yeah, that was my first one. But then I think the biggest one. It was so fun doing it. It was so much fun doing that. I grabbed this open source MMORPg. You go around like killing monsters and collecting coins, doing quest, everything.
00:06:04.594 - 00:06:42.960, Speaker B: So I took this MMO and I introduced like Deutsche coin. For you guys that have worked with bitcoins, I introduced these RPC commands. Being able to receive and send money inside the scripting language of this MMO. Yeah, it was so cool. So basically you could do scripting as you will on the game, but adding this feature so you can add this to the quest, you can add it to whatever you want. So I added a couple of games. I remember.
00:06:42.960 - 00:07:27.930, Speaker B: So back then I think there's still a big community on Reddit, on Dodge coin, but now it's all crazy now after Elon Musk is so crazy now. But back then there was a community on Reddit. So I talk about this game and people gave me donations and I put this donation on this well, like this magic well that you can go like one time per day and it will give you like five deutsche and for free. It's like a faucet. So that was one game. My favorite one is that you go to this underground, you talk to this guy and he asks you for five deutsche to enter to this dungeon. And inside the dungeon it's like free for all.
00:07:27.930 - 00:07:40.958, Speaker B: It's like battle royale. Everyone fights with each other, and the guy that wins is going to take the reward from the other one, the whole pot. That's so cool. Yeah, it was very cool.
00:07:41.044 - 00:08:03.942, Speaker A: I mean, that's composability, right? Like you just by doing the RPC calls have just layered on like a real financial layer to the MMO because it reminds me of like old school world of Warcraft. There was like a sort of economy, like you could buy gold, for example, with us dollars, like on the side markets. But it's cool to use the scripting language to do it in game like.
00:08:04.076 - 00:08:07.862, Speaker B: Yeah, yeah, super. Yeah, yeah.
00:08:07.996 - 00:09:00.630, Speaker A: And that also reminds me a lot of the kinds of projects that are going to come out of ETh Denver soon for folks that are watching and didn't know, we announced all the bounties on Monday, which was yesterday, yesterday morning. So we'll go watch the replay, the Vods on Twitch and YouTube and Twitter. If you are going to be bidling this year, I highly suggest you start studying all the bounties because you can apply to up to ten bounties when you submit a project at ETH Denver. And so if there are ten bounties that are all relevant to your project and your project is making good use of them, that makes it a lot more consistent in terms of walking away with some prize money compared to folks who do no bounties and are just going for that grand prize for the track. Both are great, but I highly encourage folks to check that out. I was thinking about that because the projects you were mentioning are the exact kinds of things that I would expect at the Denver folks are like, yeah, like, I wrote a scripting language.
00:09:00.790 - 00:09:31.170, Speaker B: Yeah. And I think that there's going to be also, I'm very excited because there's going to be some stuff on gaming. So, yeah, we're very happy and curious to see what happens now, because now it's so much cooler than before. That's the good thing about blockchain. I remember back then doing this game, everything was in reality in the back end. It was very centralized. There was no way back then of doing this game and having these interactions in a decentralized way.
00:09:31.170 - 00:09:43.410, Speaker B: But yeah, now with ethereum we can do it decentralized and I think it's super cool. I'm very expectant to see what gets built in the hackathon.
00:09:43.570 - 00:10:00.640, Speaker A: Yeah, we'll see. So for now, I would like to make sure we honor the intention of Tuesdays where we increase our smart contract knowledge. So I think you have a little bit of screen sharing to do and can walk us through a little bit of this. Like what is scroll? What role does it play? How can folks use it?
00:10:01.090 - 00:10:06.682, Speaker B: Yeah, actually I'm not going to talk too much about scroll.
00:10:06.826 - 00:10:07.520, Speaker A: Okay.
00:10:09.650 - 00:10:24.034, Speaker B: I would like to have this presentation about this cool protocol that I think it deserves more attention that learning about EIp right now. Yeah.
00:10:24.152 - 00:10:25.554, Speaker A: All right, let's do it.
00:10:25.752 - 00:11:11.922, Speaker B: Yeah, I think EIP 712 is something that I wanted to share with you guys, with all the developer community because I think it has not enough documentation at the present moment. And I think that many developers can benefit from this and yeah, just make better protocols. So, yeah, this is something that we usually call colloquially, like gasless transactions. But the more technical, if you want to impress your friends, the more technical term is this permit smart contract with IP 712. So yeah, that's what I would like to talk about today. Should I begin?
00:11:12.056 - 00:11:18.818, Speaker A: Yeah, go for it. I was just updating the title because I want folks to know we're talking about gasless transactions or permit smart contracts.
00:11:18.914 - 00:12:16.870, Speaker B: Yeah. So what we're going to do to honor this smart contract Tuesday, it's to learn how to send a transaction to the blockchain, but by signing it going through a relayer and then execute it. Yeah, we'll learn more about this. And what you can expect from this live is to first learn what an off chain protocol is. There are many different type of offshore protocols, but we will get familiarized with this idea by doing a small, very naive implementation of a very simple off chain protocol ourselves. That's what we're going to do. And I think this can help improve our users with better UX.
00:12:16.870 - 00:13:22.800, Speaker B: And yeah, I think it can improve in different ways the UX and also maybe find different use cases. I think this is an open protocol. I think this is going to be super interesting and we're going to do a small demo, very naive implementation. The most simple thing that you can do to make an off chain protocol work. And if you wonder to what protocol this may be related and what protocol are using, I think the best example so far is cowswap. I don't know if you have used it, but you're able to swap tokens, but just by signing transactions you don't execute it and you can decide to pay the gas fees on whatever token, maybe die, maybe eat BTC, whatever you want. So yeah, that's what we're going to do.
00:13:22.800 - 00:14:29.458, Speaker B: We're not going to do the whole calls up because that's a great protocol that I really like, but it's very complex. But we're going to do the first building blocks about that. And also I want to encourage you guys to open your mind to this Eip because I think it's very cool. I think you're going to like it and it's open to a lot of creativity. So yeah, I hope that you guys build confidence on yourself and try to experiment and maybe it could fit on something that you are doing or trying to work through a hackathon. Also, one thing that I want to say is that what we're going to be doing in this live is like very hackatonish. What I mean by that is we're going to be doing a lot of copy paste and we're not going to be working in the most organized way.
00:14:29.458 - 00:14:42.038, Speaker B: But this is because I want you to get the general idea. And if you want to improve on top of this, at the end of the live, we're going to make a couple of recommendations on what to do next.
00:14:42.204 - 00:14:44.950, Speaker A: If you like this, this is very hackathonish.
00:14:45.370 - 00:15:13.540, Speaker B: Yeah, maybe for this hackathon, I think it will be nice if people implement this. You're going to say, let's see if you guys like what we're going to do. So we're going to do this three step process. We're going to sign a transaction. We will send it to a relayer. So learn what a relayer is and then we're going to execute it. That's what we're going to do.
00:15:13.540 - 00:15:39.990, Speaker B: So this should be looking something like that. Like this. We're going to create a message, for example, saying hello. Then we're going to encrypt it or also sign it. And encrypt and sign is basically the same thing. And then we're going to verify it. So for signing, we're going to use metamask.
00:15:39.990 - 00:16:22.022, Speaker B: We'll have a pop up that will sign a message. This is also used in the permit. In unisop, for example, you can approve your token by doing the permit. That's an alternative way of doing it in a secure way. So yeah, we're going to pop up metamask and sign a transaction, and then we're going to verify, and to verify it, we're going to verify through a smart contract on Ethereum. In this slide, we're going to use scroll because, yeah, confirm scroll, inviting people to use scroll. But this can be done in any other place.
00:16:22.022 - 00:17:32.746, Speaker B: And I will teach you guys how to do it in whatever place that you want, for example in guerrelli or wherever you want to do it, because this is compatible with any EVM compatible blockchain. And also, now we're just going just doing this small message, like saying hello, for example, but you can do anything. For example, it could be sending tokens, your message could be making a swap, minting an NFT deposit, claiming whatever you want to do. So yeah, you can make use of the expressivity that we like on Ethereum to do whatever we want. This is just an example, and as I said, just to keep it simple, we're going to verify this specific smart contract, the well known greeting smart contract that we usually see as an example. And this may be the first smart contract that writes. That was certainly the first smart contract that I wrote, the greeting smart contract that, as you can see, you have this string and you can change the value of the string just by passing it as a parameter.
00:17:32.746 - 00:18:42.900, Speaker B: So we're going to do this smart contract, but in an off chain protocol. So basically, as the user, you will sign the message that you want to change this greeting, and then it will be changed on the smart contract, but it could be by a third party, but it will be done in a secure way. So yeah, now, getting more into it, this is how it should look like, this is how we will sign a transaction. As you say, as I said, metamask will pop up and you will sign. Then we will build like a very simple UI for signing and relaying the messages. So as you can see, it's going to be HTML vanilla, and also JavaScript vanilla is going to be super, with the least amount of code that you need to understand. And I advise you that if you already know another language, for example, you already know react, for example, I will advise you to use react instead.
00:18:42.900 - 00:19:26.494, Speaker B: Yeah, you can work more organized, and also you will want to make it look prettier than this. So you may use like a CSS library. But as I said, this is intended for like, this is very hackathonish, like I said. So we're going to do it this way. And finally, first we're going to sign a transaction, then we're going to send it to our relayers, and the relayer that is going to be a back end in node js is going to execute a transaction, and that's the whole process. So the signer won't have to pay gas. The one that will pay the gas is the verifier.
00:19:26.494 - 00:19:52.966, Speaker B: So, yeah, we will make a deeper dive on that later. So, yeah, I think that we can start with our demo and I'm going to be doing, we will be using this. I don't know if I can share this with you.
00:19:53.148 - 00:20:03.200, Speaker A: Yeah, if you go back to the stream tab and then I'll take your screen share down for a moment. If you go back to the stream tab and then down where it says private chat, if you send it to me, I can make it so folks can.
00:20:04.210 - 00:20:25.960, Speaker B: Okay, here you go. And also I'm going to share, if you want to do it like I'm doing it myself, I will be doing it with scroll. So I will share the link for the scroll configuration if you need. So, yeah, I'm now ready.
00:20:26.970 - 00:20:28.998, Speaker A: Okay, I'll bring you back up.
00:20:29.164 - 00:21:27.366, Speaker B: Okay, thanks. Okay, so everything that you need for doing a protocol like this, I put it here in this blog post. As I said, this is the most naive implementation. And we're going to go step by step here. And by the end, you should be able to do all of this. This blog post is intended for people that want to do it on quarterly testnet, but I myself am going to be using scroll. So if you want to, for example, use optimism or polygon or ethereum mainet, I will show you while we're going through it, what you would need to change.
00:21:27.366 - 00:22:22.778, Speaker B: And also, if you were wondering, usually if you saw a project working on X protocol and you want to do it in another protocol, you will learn how to do it. If you are wondering, if you want to complete everything that we have here, you will need metamask. There is some link there. Also for metamask, if you want to install it, you will need some fonts. So in here I will leave the faucet for guerrelli. So if you want to do it in Guerley, if you want to do it on scroll, you can go here in scroll IO and at scroll. Currently we have a pre alpha and we're very near what the pre alpha is, is that we are running both layer one and layer two.
00:22:22.778 - 00:23:07.314, Speaker B: So our testnet is running on a layer one that we launch ourselves. But I think this may be a little bit of insider information. But we're very near of going to using layer one, using Guerrelli as layer one. We're super near. And this will be announced in a couple of days, I think. But at the moment, if you go to the hackathon, you can use whatever because I think for Denver hackathon we may be having this quarterly testnet. So you can use whatever, but at the moment I will use this pre alpha.
00:23:07.314 - 00:23:47.334, Speaker B: So if you want to do it yourself, you can go to the faucet, you can here add a scroll to your metamask. So it should be looking like this. You should have scroll layer one and layer two as networks. And then you can go to the faucet and you move to layer one. And here you can request fonts. I can do it now because I already did it, but you can request some fonts. Then you go to the bridge and from layer one you send funds to layer two.
00:23:47.334 - 00:24:25.730, Speaker B: So at that point you should be able to use layer two as any other blockchains. And. Yeah, alternatively, as I said, you can do the same thing that I'm going to do now on quarterly. So you can go to the quarterly faucet and you can grab some funds from there. And it's going to be exactly the same because that's the point of scroll and that's the point of all the CKE EVM at the moment that it works exactly the. Yeah. And also if you want to continue up until the end, you also need node js.
00:24:25.730 - 00:24:52.810, Speaker B: I also left some links here and an RPC key. You can grab it from infuria or for alchemy. So, yeah, once we are ready, we're going to go to the first step, that's launching the smart contract. And so we're going to grab this and we're going to take this to remix and we're going to create a new file.
00:24:58.120 - 00:25:00.870, Speaker A: Oh, how did you get muted? What happened?
00:25:07.180 - 00:25:08.184, Speaker B: Can you hear me now?
00:25:08.222 - 00:25:09.370, Speaker A: Yeah, now I can.
00:25:10.320 - 00:25:13.000, Speaker B: I think I just touched something on the microphone.
00:25:13.080 - 00:25:13.710, Speaker A: Yeah.
00:25:14.240 - 00:25:17.276, Speaker B: Okay. So going back.
00:25:17.378 - 00:25:17.836, Speaker A: There we go.
00:25:17.858 - 00:25:50.920, Speaker B: Okay, thanks. So this is the smart contract and we're going to just take a look. We're going to come back to this because as I said, we were going to do the querying smart contract. As you can see, it's very short, but now I'm showing a very large smart contract. And yeah, at the moment I'm not going to explain everything because by the end of the live it will make a lot more of sense. But as you can see, there are some similarities. Here we have the greeting text.
00:25:50.920 - 00:26:09.728, Speaker B: This is the hello word. This is this one. This is the one that's going to be constantly changed. It's this one. And we also need the set greeting, the set greeting function. And it's all back at the end. It's the grid function.
00:26:09.728 - 00:26:51.768, Speaker B: This is the same as the set greeting. This is the grid function. And now the greeting is passed like as a struct, just because I wanted to demonstrate how to capture who is the sender, because this is something important. So for example, imagine in cowswap that it's very similar to uniswap, but done as an off chain protocol. If someone wants to make a swap, you have to know who is the sender. It's super important because it's not like anyone can take your tokens. So we need this security measure to know who is the sender.
00:26:51.768 - 00:27:38.292, Speaker B: So that's why I added the sender here as a state variable. And also the greeting, when it's passed, it contains the text that's going to be changed, the greeting, and also the deadline. So the deadline is going to be because you want to put a deadline for a transaction to be executed the same as you do in uniswap, as you have seen. You can set it in the settings, you can say, okay, the deadline for this transaction is like 5 minutes, 10 minutes, you can put that and. Yeah, just for security measures. So I think this is something very important. This is something super important to do in an off chain protocol.
00:27:38.292 - 00:28:30.670, Speaker B: That's why I decided to add it. I hope it's not like adding too much complication, but I think it was ported. So the two extra things that we add. So just making a recap, we have the same text that we're going to set, but we're going to also store the sender and also we will put a deadline to the execution. So now, as you can see, there is a lot of stuff here, because the thing is that this protocol has been evolving, this 712 EIP has been evolving through the years, and now it's more complex. That's why you need to add all of this. You need to check which chain you are, what version of the protocol you're building, and other stuff that we're going to cover.
00:28:30.670 - 00:29:14.276, Speaker B: But the thing is that this will give the user a so much better user experience. You're going to see that. I know this looks like super complicated now, but I promise that in a moment it's going to be simpler and you're going to see how this help the user to be more confident on what he's signing. And that's nice. So here, back to the greeting. As I said, we're going to send the message and the deadline and the sender. And also we have this vrs thing that we're sending here that we're using elliptic curves cryptography.
00:29:14.276 - 00:29:32.444, Speaker B: What you need to know is that this is the signature. So when we send a message, our signature, it's built from three variables, VR and s. So whatever you use this elliptical, I'm not like a cryptography expert.
00:29:32.492 - 00:29:41.364, Speaker A: I just know that, yeah, maybe if you could. Let's treat it like a black box. But what's happening in line 59 here?
00:29:41.562 - 00:30:12.364, Speaker B: Yeah, so basically this is super important that here we're verifying that the signature, the VR and s signature is correct. So if everything is correct, we can continue. If not, it will revert and set evaluate signature. So yeah, this is super important. As you can see here, this is how we verify that everything works. And yeah, we also check the deadline, if still not reached. And if everything is correct, the deadline is fine and the signature is fine.
00:30:12.364 - 00:30:57.564, Speaker B: We store the text and the sender. Yeah, that's it from the part. So yeah, what we're going to do now is to launch this smart contract and then we will go to the front end so we can interact with it. So we're using solidity 818. So we're going to compile it and we're going to deploy it. I already have another one deployed here, so I'm going to remove doing some tests before coming here. As I said, I'm using scroll layer two, but this should be the same experience as any.
00:30:57.564 - 00:31:47.564, Speaker B: As you can see, it's basically the same. That's why I didn't want to talk about too much about scroll at this point, because it's the same, nothing different. I think here in metamask is pending, but it already appeared here so I guess some of them are going to catch up in a moment. So yeah, that's it for the smart contract. Now we are going to go to the next part, to the front end. As I said, we're using HTML vanilla. So if you want to upgrade this, I will recommend maybe react view or angular, but at this point you get the point.
00:31:47.564 - 00:32:47.740, Speaker B: So here we're going to just the UI the user will interact with, some bottoms, some text box so the user can introduce the message that he wants to send. Also how it's going to be. The state of the smart contract is going to be displayed here. So what we're going to do is we're going to create some files here. So for the front end we're going to need two files, the index HTML, and then we're going to create another file for the Javascript. So blockchain, I will just name it blockchainstuff js. It's going to have all the mechanics and all the signature and all the relaying, everything like mechanic wise.
00:32:47.740 - 00:33:41.010, Speaker B: So here I'm going to paste all the HTML and then we're going to the blockchain install file and we're going to take all of this and I'm going to explain roughly in a moment and put it here. So the index is just the buttons that we're going to see on the screen. As you can see there are some, for example, we're going to test it in a moment. As you can see, we have the sign bottom where the people can introduce whatever they want to add and then sign the message. And then we're just going to have another bottom for verifying the message. So this is for the HTML and the blockchain side. This is the cool stuff we're going to do.
00:33:41.010 - 00:34:34.752, Speaker B: First it's just like initialize the smart contract, initialize the metamask wallet, all the things that you normally do, but the important part is around line. Yeah, first line 130. So here we're going to print the state for the user so we can know the message that's currently stored, the hello word message that's currently stored on smart contract. And then here is where we've signed the message. So the metamask will pop up for the user and the user will sign. And finally here is where we will relay the message. We'll send the message to a third party like this backhand service that is running.
00:34:34.752 - 00:35:05.004, Speaker B: We're going to build it in node JS and node JS will send it to the blockchain. And I think this is very cool because we can have a message, we can sign it, and once it's signed we are free to share it with anyone. And we're not sharing compromisable information. Everything's very secure. But we can pass it to a third party and he can execute it. And yeah, we don't have to take care of that. I think it's super cool.
00:35:05.004 - 00:35:34.624, Speaker B: That's where the improvements in user experience come from. This is going to be blockchain stuff. So in here we're going to make a couple of changes. First, one that here in the blog post is on network five. So this network five is query. So for example, network one is mainet. So if you're doing polygon, I think it's 137, I think that's polygon.
00:35:34.624 - 00:35:58.670, Speaker B: But in this case we're going to do it in scroll. So the second link that I share is in here. So we're going to use the chain id on scroll pre alpha testnet. So this is the chain id. So we change it here. That's the first change. And the second change is updating the gritter smart contract, this one.
00:35:58.670 - 00:36:28.084, Speaker B: And we're going to set it to this smart contract that we just launched. So we copied this, paste it here and that's it. That's the only changes that you need to do. So if you want to do it in quarterly, just change this smart contract address. If you want to do it in any other protocol that is not quarterly, you will have to change both the smart contract and the network. This is the only change. And this applies for anything that you're doing.
00:36:28.084 - 00:37:23.752, Speaker B: If you have a code base built for a specific platform, for example, you go to the uniswap front end that is public. On the Uniswap page you can go that, you can download the front end code and you will just have to change the network id and the smart contract and you can use it in any other platform. As we continue here now it's going to be on the relayer back end. So as I said, it's just going to be a small back end service that is going to execute the transaction. So we copy this. This is the name the backend ts. This is going to be an express server, but you can do it with whatever you want.
00:37:23.752 - 00:38:20.900, Speaker B: For example if you like, I don't know, net or ruby on rails, which is my favorite Django. Whatever backend that you want, you can do it. You can set a backend that receive these transactions and then send it to the blockchain. And in general, what this back end needs to do needs to have, because at the end of the day someone needs to pay the gas. So in this case the back end is going to be the one paying the gas. We need to set up a wallet that has some funds, has some it, and that state that's going to be used on the back end. So yeah, in here what you will need to change here is these two lines, line ten and line eleven.
00:38:20.900 - 00:38:46.960, Speaker B: So for line ten is the gritter contract. So we go back to remix, we copy the gritter and we put it here. And then the back end wallet address. This is the one, as I said before, the one that's going to pay the gas. I'm just going to set it to this account. So make sure that this account has some. It's on it.
00:38:46.960 - 00:39:13.880, Speaker B: And yeah, that's going to be it. As you can see here, this is the one that, this is the most important function, line 46, relay greeting. So this, what it's going to do is to post the transaction to the blockchain. So yeah, send sign transaction to the blockchain. He's going to post it. This will be executed by a third party.
00:39:15.500 - 00:39:20.280, Speaker A: Wait, the backend can just be an eoa, it can just be your wallet?
00:39:20.880 - 00:39:23.512, Speaker B: Yeah, I think this opens the door to a lot of possibilities.
00:39:23.576 - 00:39:24.636, Speaker A: I thought it had to be a.
00:39:24.658 - 00:39:31.612, Speaker B: Smart, can be the, it can be just a normal wallet. Super cool, right?
00:39:31.746 - 00:39:46.864, Speaker A: So does it know, you said at the end of the day someone has to pay gas, but at the end of the day you don't have to manually sign something. You're a relayer. So is it just sort of draining automatically as people are signing messages from your wallet?
00:39:46.992 - 00:39:47.892, Speaker B: Yes, that's correct.
00:39:47.946 - 00:39:50.336, Speaker A: Wild. Super wild.
00:39:50.448 - 00:40:15.340, Speaker B: That's cool. Yeah. So here, this is the important part of the code. The rest, as I said, is just express stuff. For example here, getting the parameters like parsing them and send it to this other function. This is the ethers JS function. I think you're using ethers JS somewhere.
00:40:15.340 - 00:41:11.852, Speaker B: I think it's alchemy web three. I think Alchemy web three in the package using ether js. But you don't have to use specifically express, I just use express because it's the simplest one, but you can do it in whatever back end that you want. So yeah, I'm going to save this and we are now going to also for the back end, to understand how to execute, how to. He knows what function to execute, he will need the API. And this is the API from the smart contract that we just launched. You can find it in remix, you can find it here in the solidity compiler tab.
00:41:11.852 - 00:42:07.036, Speaker B: Just select it from here. There's only one contract, so you select it here and just copy the API to your clipboard and we're going to put it in this file. JSon API grid JSon so JSoN API greeter JSon just here. This is so the backend knows how to interact with smart contract. And lastly, we're going to add this m variable, we're going to add our environment variables. As you saw in the previous live stream on Harhat, you need to set up environment variables so you don't upload your code to git. You don't want to upload your private keys to GitHub.
00:42:07.036 - 00:42:47.724, Speaker B: So yeah, we just set this. We will put two stuff in, and this is for Guerli, but you can put any other RPC URLs. If you want to use the one from Guerrelli, you can use infuria or alchemy and you can use them for free. Better yet, if you have your own node running, you can use your own node. That's the best case scenario because this is the most decentralized. But if you don't, no worries. You can have an RPC from Infuria and Alchemy.
00:42:47.724 - 00:43:05.590, Speaker B: In this case we're going to use the one from scroll, that is this one, the RPC URL. You can use that also for free. And we're going to paste it here. Now we're going to put a private key here. I'm not going to show it because.
00:43:06.280 - 00:43:08.324, Speaker A: I could take your screen down for a moment.
00:43:08.522 - 00:43:10.516, Speaker B: Actually, I'm prepared for this.
00:43:10.698 - 00:43:11.844, Speaker A: How do you do it?
00:43:11.962 - 00:43:14.196, Speaker B: So I'm going to close this on.
00:43:14.218 - 00:43:15.620, Speaker A: A different monitor or something.
00:43:15.770 - 00:43:19.496, Speaker B: And I have an enviro here, but.
00:43:19.518 - 00:43:23.160, Speaker A: I can see this. What do you do? What don't I know what's happening?
00:43:23.310 - 00:43:55.140, Speaker B: I'm going to replace the file and that's it. Now I just have to make sure to not click here because if you're on metamask, you can grab that from here. Account details and export prick. You put your password here and confirm so you can grab from here. Remember to not share this with anyone and especially don't upload that to GitHub.
00:43:55.640 - 00:44:01.616, Speaker A: Yeah, I mean, is Env ignored by default or do you need a git ignore?
00:44:01.728 - 00:44:09.130, Speaker B: Yeah, that's a very good point. It's not ignored by default and it's something that it's not added in here.
00:44:11.180 - 00:44:17.384, Speaker A: You better update that. People scan this QR code. People are going to use this article.
00:44:17.512 - 00:44:20.270, Speaker B: Yeah, I will update for sure.
00:44:21.920 - 00:45:05.924, Speaker A: I had a buddy at Raid Guild shoutouts to raid guild that was working on a project and he did not upload his env or his private key. But what he did not realize was that an extension he was using in his environment. It was like hard hat or something like it. Somewhere in one of the logs that was in the file base, it basically had dumped his key during one of the errors and somebody scooped that up and logged into his wallet or loaded it up and then stole the stuff. He was like, what? I got rugged by like hard hat. This is crazy. Even when you're doing all these steps, let's not forget, never use the same private key as what you're using for where you actually hold your assets.
00:45:05.924 - 00:45:32.070, Speaker A: You should have some separate account. Sorry. I like to be even more clear. I'm not talking like account two, but managed by the same seed phrase. I'm talking a completely different seed phrase or private key. And you can send whatever eth or faucet you need to it, but just never when you're developing, use your actual private key for whatever wallet you hold assets in or a member of dows in or whatever it is.
00:45:33.000 - 00:45:36.724, Speaker B: Yeah, I'm adding here on the blog. Great.
00:45:36.762 - 00:45:41.190, Speaker A: Oh, I'm so happy to see that. Great. Look at us, we're pushing, we're pushing to Maine already.
00:45:41.640 - 00:45:46.392, Speaker B: Yeah. And I will put here, remember to.
00:45:46.446 - 00:46:03.950, Speaker A: Hey Craig, sorry, there's a small typo. It says ute instead of your.
00:46:07.860 - 00:46:08.672, Speaker B: Thank you.
00:46:08.806 - 00:46:09.810, Speaker A: Yes. Great.
00:46:11.940 - 00:46:59.504, Speaker B: Yeah. Now once you have everything is set up. Now we are going to also add this package JSON file to make launching your server more easily. Package JSOn file here. The most important thing here is that we have this NPM start that we are very used to so we can start the back end more easily and the dependencies, the alchemy amp. So yeah, we're going to install the dependencies and after that, yeah, that's it. We're going to test it.
00:46:59.504 - 00:47:02.160, Speaker B: Finally, where is this back end running.
00:47:02.230 - 00:47:03.308, Speaker A: On our local machine.
00:47:03.404 - 00:47:37.870, Speaker B: Yes, going to be running on our local machine. So this is in the same folder, but here we have two products. So the js and the blockchain stuff and the index HTML is the front end. You will want to upload it in a separate place and the rest of it, especially the back end js file, you can put it in a different server running and that's where the relayer is going to be.
00:47:39.840 - 00:47:41.628, Speaker A: Or an AWS instance or.
00:47:41.714 - 00:47:44.284, Speaker B: Yeah, yeah. You can put it in whatever detail. Okay.
00:47:44.322 - 00:47:47.420, Speaker A: I was just curious like shipped a prod.
00:47:47.780 - 00:48:40.060, Speaker B: Yeah. So here I'm going to install this web server library I already have installed. But I like this one because it's very simple to run and once installed you can just type lite server. And here you go. This is our front end and as you can see it's reading the state from the smart contract. This is the hello word text that you can see here. As the state variable greeting text, and it's also reading this one, the greeting sender, at the moment it's just empty.
00:48:40.060 - 00:49:18.670, Speaker B: So it's this thing. So what we're going to do is that we're going to change the grid and text and then we are going to sign it and then we're going to verify it. So let's go to the whole process. So for example, if you want to change it, you can put whatever you want. Let's put, hola amigos. In case you didn't tell from my accent, I'm from Latin America so I speak Spanish. Oh nice, nice.
00:49:18.670 - 00:49:23.900, Speaker B: Yeah, you have nice accent.
00:49:24.320 - 00:49:25.260, Speaker A: Gracious.
00:49:26.320 - 00:50:21.084, Speaker B: So we also put a deadline, and in solidity the deadline is using this epoch. So I like using this website, epoconverter.com. So basically the deadline is up until when this transaction can be executed. So if this time passes after that you won't be able to execute it. So we can say, for example, now it's February 21, we can set it to February 22 and we're going to get the timestamp, and as you can see here, 23, so you can see that it's changing. So the epoch timestamp is in seconds. So it is this one, don't grab this, milliseconds is not compatible with solidity.
00:50:21.084 - 00:51:12.224, Speaker B: So we can grab this one and we can put it in the deadline here. And yeah, now we can sign this transaction and metamask pops up. And as you can see, I really like the experience, and this is something new because the first version of signing transactions on metamask, it was just this random string hash and it was very hard to read. But now as you can see, you can see a lot of things like the name of the contract, you're interacting with, the text and the deadline. So when you click sign you feel more confident on what you're assigning. So this is the thing that I really like about this 712 EIP. It's nice, it's super cool user experience.
00:51:12.224 - 00:52:12.724, Speaker B: So we can sign this and it's going to produce this. I don't know why my metamask is so slow, but yeah, it produces this signature here and this is the one that we're going to relay to our back end. So this part here will send these parameters to our small back end in node express, going to send all the parameters that he needs and he will execute it. So we'll pass everything, greeting text, the green deadline, the sender, so I am the sender, the address here, and finally the signature this big hash, this signature is the thing that makes everything safe for the user. So yeah, replicate this will be super hard for anyone else. So this is why. This is super cool.
00:52:12.724 - 00:52:31.060, Speaker B: So we're going to relay the transaction. It won't work, sorry. Because we need to run the back end ntm start. Fair enough. Yeah. So we start the server. Now it's running locally.
00:52:31.060 - 00:53:00.528, Speaker B: Import 80 80. It's waiting for message. So we relate message sent. And in the back end, as you can see, it even posted the transaction id. This one we're going to copy and we're going to take this to, we can take it to the explorer. In this case using scroll explorer, you can use the guerreli. Etherscan for example, is using guerrelli.
00:53:00.528 - 00:53:16.104, Speaker B: And here it is. It's already confirmed. So let's test if everything is working correctly. So now it's saying hello word. It should say olamigos. And the address should be set to my address. Here you go.
00:53:16.104 - 00:53:22.104, Speaker B: Wow. As you can see, it was executed by a server. What? In a secure way.
00:53:22.222 - 00:53:45.760, Speaker A: Okay. But when I, first of all, great job. When I sign the transaction, I choose between different amounts of gas that I can use depending on how quickly I want to make sure it gets included in the next block. But it doesn't seem like that's a parameter we're setting. Is that sort of set by default? And what would happen if the gas of the network went up?
00:53:45.910 - 00:54:08.216, Speaker B: Yeah, I think that's a super good question because that can be defined on the back end. So in this case, in this setup that could be defined on the express node using this, I'm using this alchemy web three thing that's using ether js in the back. So it could be set by ether js. For example, you can say, okay, you.
00:54:08.238 - 00:54:10.520, Speaker A: Could expose it to the user if you wanted to.
00:54:10.590 - 00:54:12.660, Speaker B: If you want, you can expose it to the user.
00:54:12.820 - 00:54:22.044, Speaker A: Okay, good, because I wanted to avoid a situation where you sort of hard coded or something and then the gas price of the network goes up for an extended period of time and then nothing ever goes through ever again.
00:54:22.242 - 00:55:06.670, Speaker B: Yeah. And I think that's super nice because for example, cowswap, the thing that allows you to do is to pay the gas fees is something like we see in account abstraction, that you can pay the gas fees in whatever other token. For example, you can pay your gas fees on Dai. So if you don't want to hold ether, I don't know why you wouldn't want to hold ether, but if you want to hold, for example, only Dai, you can pay your transaction in Dai or whatever, but there should be some economics in the background, right? Because he's paying for that and there should be some way of rewarding the relayer. Wow.
00:55:08.240 - 00:55:39.444, Speaker A: It also makes for a fantastic ux for onboarding. Like for example, at ETH Denver, we've always had like food truck tokens where after you check in, you get like this wallet and then it has an ERC 20 that we make just for ETH Denver. And you can go use it at the actual food trucks that are out in front of the venue. And this year we're calling it Biddlebucks. And you get more biddlebucks as you work on your project and talk to the mentors. And you're like, hey, we formed our team, we got our idea and they're like, oh, great job, here's some more bible bucks. Go eat and then get back at it.
00:55:39.444 - 00:56:24.180, Speaker A: And these wallets, it would be not very smart for us to have to load them all up with ETH because they're actually on ZK sync and l two. They're not on testnet right now. And it would not be great if for the 20,000 people coming to ETH number we had to seed all those wallets with some ETH. So instead we're doing, I'm not 100% sure it's EIP 712. Maybe there's some other way of doing the account abstraction, but it's like gas list for the user. They just sign and then the tokens transfer and they don't need that base currency, whether it's ETh or whatever it is on that particular network. And so it's just a fantastic ux if you've got a bunch of people attending some kind of event and there's a bunch of burner wallets or whatever, it makes it so you don't have to give them all like gas.
00:56:24.920 - 00:56:50.748, Speaker B: Yeah. And for example, you can play around in solidity, for example, okay, there's all this wallet, but you can only claim this once, for example. And that can be done in a secure way on solidity. You don't have to make those validations on the back end on node, for example. You can do it securely on the smart contract. I think it's super cool. Yeah.
00:56:50.748 - 00:58:06.416, Speaker B: I would also like to go back to the presentation and just some final thoughts about it. So some recommendation post hackathon or during hackathon, if you like this protocol, is that for example, now we're using remix, but instead of remix you could use harha truffle. Foundry. If you want to work more organized, you also want to upload and work collaborate with other teammates. In GitHub, for example, that would be nicer. And also instead of using we use like HTML and Javascript vanilla here you can use a front end library like react angular view or a CSS library so your product looks nice, like tailwind bootstrap. Bulma yeah, also very important point number three is that think about the economics, how the relayer is going to be rewarded.
00:58:06.416 - 00:59:03.188, Speaker B: I think that we can play around with different economics in that part. I think it's different. Things can be done in different ways in there. For example, as we were talking about before having this checking if user, for example, maybe buy actions, I don't know. For example, I'm just thinking just on the top of my head, for example, you can say like okay, you can buy actions and with the actions you can do whatever you want. For example in cowswap you could for example prepaid for swaps. Or you can have this bot in smart contract, you can have balances that the fee will get deducted from there.
00:59:03.188 - 01:00:03.384, Speaker B: Or you can even pay gas in multiple coins. You can like for example, okay, I want to pay 50%, eat 50% die, something like that. Yeah, this different way of doing that. And also, yeah, I think this is something new, a protocol that has gone through a lot of changes. Now I think it's a good time to get into this protocol because it's got to a point that it's more mature and it's better user experience, as we mentioned. Now we can go back and see that here, why we are implementing all these hash functions and everything. This is because we want to give the user a better experience that when he signs a transaction he knows he's in the correct chain id, he knows he's in the correct project and he will sign these specific things.
01:00:03.384 - 01:00:19.170, Speaker B: In our cases, it's the text and the deadline. So yeah, it's a little bit more code complicated. I, to be honest, had a hard time implementing this and bring it here today because this was not easy to understand.
01:00:19.540 - 01:00:28.850, Speaker A: I don't even understand how you have two functions named Hash. When you call hash, how did it know which one to call?
01:00:29.400 - 01:01:15.280, Speaker B: Yeah, that's a good point. But the thing is that it has two different parameters. But you mentioned it because these are both internal. If they were external, I don't think this will work because the API will get confused. But yeah, the thing is that I think this is nice that all these talks is being implemented. Even if the code is a little bit more complex now, but it's super nice at this point of time. I think it will be nice to see what people can do with this EIP.
01:01:16.020 - 01:02:05.570, Speaker A: Yeah, I love the design space of rewarding the relayer because now instead of the base gas token of whatever network you're on, we just now have the composability of it being anything. I mean, a simple way for folks to start thinking about it is like an arbitrary ERC 20. Like, hey, come use our decks and you have to pay for gas in our ERC 20 that we made up. But if you want to take it one step further, you could incentivize providing liquidity. You pay for transactions not with our native token, but with a liquidity token over on uniswap or whatever of our token and Eth or dai or whatever. And that's like your patronage. And in that way the protocol accumulates the liquidity over time.
01:02:05.570 - 01:02:09.730, Speaker A: There's just a lot of fun ways you could play with it instead of it just.
01:02:10.580 - 01:02:23.380, Speaker B: Yeah, for example, go ahead. Yeah, sorry. For example, you could have, for example, if you have this NFT, you have a discount, for example. Yeah, I think it's super interesting what you were saying.
01:02:23.530 - 01:02:47.650, Speaker A: Yeah, this reminds me of the old conversation, like, does value accrue to the network layer or to the app layer? And this provides one more way in which you could try to accrue value in addition to the network layer because again, the gas gets paid, but it's being paid by the relayer. But you could add another layer of abstraction on top. Is it nfts? Is it erc twenty s? Is it lp tokens? Whatever.
01:02:48.500 - 01:03:16.016, Speaker B: Yeah. And the relayer space. Yes. So much things going on in there because I think, for example, cowswap has multiple relayers, so you can have an economy of different relayers and that they can compete to make it profitable. So. Yeah, that's a huge rabbit hole in there.
01:03:16.138 - 01:03:25.032, Speaker A: Wow. Okay. Yeah, that gives us a lot to chew on. One last time, I'll go ahead and turn off your screen share. Go ahead.
01:03:25.166 - 01:04:02.964, Speaker B: Before turning off, what do you want to show? Okay, yeah, so this final slide that we're going to be at Denver, actually, I'm already at Denver, so yeah, happy to. If you want to come and say hi to us in the booth, we're going to have a booth. And yeah, it would be nice to meet all of you guys. And we are having hackathon bounties, so make sure to ask about those. And also just keep connected in Twitter. You can just take a look at what events are coming. Scroll is going to be very active now, especially now.
01:04:02.964 - 01:04:21.192, Speaker B: I'm very excited because we're going to quarrely finally and I think it's going to be super cool. So yeah, happy to connect with you guys if you find me wandering on the event. Just happy to say hi.
01:04:21.246 - 01:04:26.328, Speaker A: Yeah, go visit a met at the scroll booth. What's your job title? Devrel or Dev advocate?
01:04:26.424 - 01:04:28.520, Speaker B: Yeah, Devrel at Scroll.
01:04:28.680 - 01:04:45.350, Speaker A: Yeah, the poor Devrel. Folks have to sit behind the booth for like so many hours. So go say hi and ask about the bounties. Your whole job is to make it easier for folks to do a better job applying to the bounties. Right. Or at least that's a big aspect of why you're there at the event, is to help people learn about scroll technology.
01:04:46.040 - 01:05:00.250, Speaker B: Yeah. And whatever thing that you want to build on scroll here, I just brought this example. But it can be anything, games or whatever economy that you want to build. Yeah. Just happy to hear what you're building. Yeah.
01:05:05.260 - 01:05:24.620, Speaker A: Oh, you're smart. I see what you did. Ggh. So there's a link in the chat for more information on scrolls bounties. They are allowed to share that information now because all the bounties were announced on Monday, yesterday. So if you want to learn more about the bounties, watch the vod from yesterday. You can check out that link for information on scrolls bounties.
01:05:24.620 - 01:05:59.576, Speaker A: And if you want information on the rest of the bounties, it'll be up on eatdember.com. One last thing. I'll go ahead and put the QR code up here on the left for folks that want to follow up and mess with that tutorial you had on dev toe. I just want to thank you for introducing EIP 712. I didn't know anything about it. And that's the nice thing about standing on the shoulders of giants. A lot of people have thought really hard about this, and I don't totally understand the relayer code or the verifier soul, but it exists.
01:05:59.576 - 01:06:25.168, Speaker A: I could copy paste it. I could learn how to tweak certain things. I don't have to make from scratch. I don't have to understand elliptical cryptography very well. I can just know, oh, okay. There's like a few different parameters and good enough is good enough. So I appreciate folks like you taking what folks are doing and pioneering and then doing the work of communicating it at a layer where new folks like me can be like, all right, I could copy paste.
01:06:25.168 - 01:06:28.996, Speaker A: So I just appreciate you. I think education is equally important because.
01:06:29.018 - 01:06:29.924, Speaker B: If we make a bunch of cool.
01:06:29.962 - 01:06:42.904, Speaker A: Stuff, but then nobody learns about it and uses it, then what was the point? So thanks for being. Do I have a teaching background? I have a huge soft spot for education, and I see what you're doing, and I really appreciate it.
01:06:43.102 - 01:06:58.590, Speaker B: Thank you, Derek. Yeah. Happy to share this because, as you said, a lot of work has been putting here, and I just felt this protocol needs more attention because it's super cool.
01:06:58.960 - 01:07:12.340, Speaker A: Yeah. Please help me send off everyone. The Twitter information was a few minutes ago. You can go back, but for now, we're going to say goodbye in the traditional way. Please join me in saying goodbye.
01:07:13.640 - 01:07:15.940, Speaker B: Goodbye. Thank you.
01:07:16.090 - 01:07:16.850, Speaker A: See you later, everyone.
