00:00:00.810 - 00:00:07.546, Speaker A: We have infura coming up next. Patrick.
00:00:07.658 - 00:00:09.166, Speaker B: Awesome. Hi, how are you doing?
00:00:09.268 - 00:00:11.198, Speaker A: I'm good, I'm good. How are you?
00:00:11.284 - 00:00:20.160, Speaker B: I'm good. I'm really jealous of your cosmos background. I wish I'd came prepared. I just got my infura t shirt, which is like the coolest thing at the.
00:00:22.210 - 00:00:31.350, Speaker A: We spent. If you could actually see little studio here that we've built. I mean, this is quite the preparation, let's put it that way.
00:00:31.420 - 00:00:33.670, Speaker B: Have you got a green screen? Is it like a proper green screen?
00:00:33.740 - 00:00:42.540, Speaker A: We got a proper green screen. I got two giant gaff lightings right here. I got a boom mic above me. I got a cinematography camera right here.
00:00:45.630 - 00:00:46.806, Speaker B: That's pretty epic.
00:00:46.918 - 00:00:54.460, Speaker A: Yeah, it's pretty good. But more importantly, we're interested in hearing about inferior. What's going on with you all and.
00:00:58.510 - 00:01:02.000, Speaker B: Oh, should I get started? I can get started now if you want. Yeah.
00:01:02.370 - 00:01:05.950, Speaker A: Let's go. You're ready? You're on. So take the stage.
00:01:06.110 - 00:01:31.090, Speaker B: Awesome. Hi, everyone. So my name is Patrick McCorry and today what I'm going to present is basically the infura transaction service. It's been under wraps now for about, I guess, six months in Infura. And I really want to highlight the following is, one, why you should be really excited for it, two, how you can get started. Yeah, we can try new software. And three, we have this really exciting bounty for the hackathon.
00:01:31.090 - 00:02:21.474, Speaker B: And it's actually a bounty that's sort of close to my heart because I wanted to see this deployed for over a year. So if you stayed at the end, you'll hear about the really cool bounty for this hackathon. Yeah, if Denver. But before I begin, I guess the first question I want to ask, and I know there's a little chat room here, so hopefully someone can reply. When was the last time you had a stuck transaction and how did you deal with it? And I guess also how did it make you feel? So if anyone has a good answer for that, I'm just going to scroll through the chat here. Please leave it in the chat and we can gossip about it because basically everyone who ever interacts with Ethereum at one point or another has a stuck transaction. And really, what is the problem behind stuck transactions? When you're on metamask and you sign, oh, yesterday.
00:02:21.474 - 00:03:02.082, Speaker B: Yeah, crying. Exactly. We're always crying about stuck transactions. But why do they get stuck for? So the way I like to think about it is that the network is a funnel, okay? And you send transactions through this funnel. Now really, what happens is that there's a block every 14 seconds and every block has around 12 million gas. So when we have too many transactions in the funnel, there's a huge list of pending transactions and it exceeds the block capacity, then it's just physically impossible for every pending transaction to get in the next block and then be bind. And that's basically the source of stuck transactions.
00:03:02.082 - 00:03:44.110, Speaker B: So now miners need to decide, given this list of pending transactions, which transactions do I include in the next block and which transactions am I going to ignore? And that is why we have the fee market. I set a high fee. If I can outcompete everyone else in the fee market, then hopefully I'll entice the miner to include my transaction next. And that's actually what's really exciting about Ethereum is this global permissionless fee market. It's basically an auction mechanism where we all place bids and the miner gets to pick the bids that they like. So that's like the source of these stuck transactions. There's also various different network rules that sort of have an impact on why transactions get stuck.
00:03:44.110 - 00:04:40.898, Speaker B: The first one is, as everyone's aware, sometimes your transaction just gets dropped by the network, you've signed it, you've set a fee that you're happy with, you send it to Ethereum, and for some reason it just gets dropped and it never gets mined on the network. And this typically happens when the network is under high congestion. And that's because when you run like a go Ethereum node, a go ethereum node is only going to hold around 4096 or so pending transactions. If there's 4097 pending transactions, then one has to get dropped from the pending pool. And the simplest way to describe it is if you have a low fee transaction, you're going to get dropped from the pending pool. But there's also more awkward, more quirky rules around the pending pool. One example is you have 16 transactions, you've sent 17 transactions, but the pending pool only guarantees to keep around 16 transactions.
00:04:40.898 - 00:05:27.666, Speaker B: So the 17th could be dropped from the network as well. And these are rules that not everyone's really familiar with, and it's why transactions get dropped. Now, what's the problem with dropped transactions? The problem is this thing called announce gap. So let's just say you send five transactions in a row, you have transaction one, transaction two, transaction three, but for some reason transaction three gets dropped from the network. If transaction three gets dropped, then you send transaction four, transaction five and transaction six. What's going to happen is that transaction four, five and six are going to be stuck and they can never be confirmed by a miner. And that's because there's a special network rule where for every Ethereum account, every time I send a transaction, the announce must increment strictly by one.
00:05:27.666 - 00:05:48.426, Speaker B: So, you know, 1234. But in this case, transaction three got dropped. Transaction three gets dropped. It's impossible for 40 ever be mined. And that's a really frustrating scenario to be in. But how theoretical is this? Do we really get dropped transactions? So I stole this chart from a block native. I've given the blog post there.
00:05:48.426 - 00:06:40.614, Speaker B: It's a very good blog post if you want to learn about the pending pool or the memory pool. But around black Thursday back in March, over 50,000 transactions an hour were being dropped. You can see here from the pending pool and what happens next is really sad. I don't know if everyone's aware of it, but Makerdao has an auction mechanism that helps secure make sure there's always enough collateral for Dai the issue back in black Thursday was that you had a liquidation auction. You had a bunch of bots, and all the bots are sending bids to each auction. Then some of the bids got dropped by the network such that all their other bids bids can never be confirmed by the network. So in this example, I have bid one bid two bid three gets dropped by the network, then all the other bids get stuck.
00:06:40.614 - 00:07:12.482, Speaker B: And what the good old keeper bots did was that when they said a new they tried to republish some of their bids, they even said it in a rage as fee of 4500 way ten x the normal gas price. And even that transaction gets stuck. And that's mostly because these bots had really bad relay infrastructure and really bad relay code. And I think now it's been improved since March. And that's why the liquidation auctions have been a bit better. And that had many stuck transactions. But that's a horrible situation to be in if you're trying to save maker.
00:07:12.482 - 00:07:49.742, Speaker B: And in the end they were under collateralized by millions of dollars. I think it was like a token sale to save the day. The second problem during high congestion is again if you have a queue of transactions, you have to make sure that all the transactions have a high fee. So in this example you have a high fee, a low fee, a high fee, a high fee, a high fee. If you have a low fee in the middle of your queue, it's nearly as bad as having a drop transaction. Because for some reason ethereum miners aren't very smart and they don't look at your dependent transactions. So in this case, again, you would get stuck if this is a low fee.
00:07:49.742 - 00:08:24.022, Speaker B: That's the opposite of bitcoin actually, because in bitcoin this would be child pays for parent, the child has a high fee, parent has a low fee. That's how you do price pumping in bitcoin. But for some reason, ethereum miners don't do a very good job of that. So again, another reason why you may get a stuck transaction. And finally, the third problem, as everyone's aware, gas prices are too high. And this is more like when you put duct tape and try to solve the problem, you actually make the problem a little bit worse. So what most people do is they go and eat gas station, they get the trader rate, they plus 50 gwe, and then they send that to the network.
00:08:24.022 - 00:08:50.454, Speaker B: And for the most part, that's going to work. You pay a premium fee, you're going to get mined within the next few blocks. Of course, sometimes the price are so volatile that even that doesn't work because the fees skyrocket by the time you do 50 or more quay from the time you sent it. But the consequence is everyone overpays the fee. And so this is where ITX comes in. So yesterday I sent a transaction. The fast route was 418, trader route was four nine five.
00:08:50.454 - 00:09:22.846, Speaker B: I got my transaction in accepted of three four, three Gwe, and that only took three blocks. It's not like we're waiting around for like 20, 50, 60 blocks. I got that in at three blocks. And that's because we just have a very simple bidding strategy that outcompetes everyone else on the network, which is really crazy, to be honest. And lots of people have built their own in house relayers. If you use a wallet contract like argent, Dharma Genosis safe, they have their in house relayers. And if you talk to their teams, I'm sure they agree with me.
00:09:22.846 - 00:10:11.066, Speaker B: I don't want to put words in their mouth, but relayer software is really, you know, sending transactions to Ethereum is a pain in the ass. It's surprisingly very difficult to get this relayer software correct. It also requires a dedicated infrastructure. You need this relayer to be on sending transactions reliably to the network. And even if you build your own in house relayer, it's also really hard to get satisfactory guarantees because the fee market is so volatile, it can just result in bad UX if you again get a stuck transaction, and if you get the relayer software wrong, as I mentioned, you can get a potential loss of funds makerdao has under collateralized the millions of dollars because of the bat relay software. And there's other dapps that I don't really want to talk about too much, but they've also lost funds because they couldn't see of cdts. And again, it was because of their relay software.
00:10:11.066 - 00:10:45.450, Speaker B: So really the whole point of this is no more stuck transactions, please. The whole point of ITX is anyone using ITX. We're going to do our best to make sure you never deal with a stuck transaction again. That's the guarantee that we try to provide. How does it work? Well, basically you're a developer, you're thinking about building your in house relayer and then you think, no, I don't want to go through that boring task. I'm going to hook into the ITX API and then I'm going to send my transaction to infuria. And Infuria is going to guarantee this gets delivered to Ethereum and I no longer deal with stuck transactions.
00:10:45.450 - 00:11:16.370, Speaker B: How does ITX solve the problem? First, we republish the transaction periodically. Every few minutes we'll republish it. So even if your transaction gets dropped, we don't have to check if it gets dropped or not. We just republish it because we're really cheeky that way. Two, we organize the transaction queue has fee at the start of the queue, lowest fee at the end of the queue. It's a bit like a right angle triangle just to make sure you never get stuck behind a low fee transaction. And we have a very, let's say, sophisticated bidding strategy.
00:11:16.370 - 00:11:38.390, Speaker B: Sorry, I'm laughing the cheeky comment there. We have a somewhat sophisticated bidding strategy such that we always pay the best price at the best time. Our current strategy tries to get it in within ten blocks. That's our target. But sometimes, actually a lot of times it's normally before ten blocks. Hopefully I'll be able to show you later. You might find ITX useful.
00:11:38.390 - 00:12:15.334, Speaker B: I already mentioned crypto wallet providers again, like Argentinosis dharma at all. They like to handle transactions on behalf of their users. But if you're getting stuck transactions on their services, you should lobby them and tell them to use ITX. Or if you're building your own wallet, use ITX and solve that problem for your users. One of the use cases I'm really excited for is for roll up providers. Roll up providers have to create large blocks like 7810 billion gas, and they have to somehow outcompete the rest of the network and get their block confirmed on Ethereum and ITX will work out of the box for that. And that's actually the main use case.
00:12:15.334 - 00:12:40.958, Speaker B: I'm really excited for another one is server side scripts and DFI bots. So one example is the Ethereum name service. You're registering Paddy Eth. You have to send three or four transactions before your domain is set up. Really, I just want to send ETH to a contract and then ens can register that on my behalf and just deal with all the transactions for me. That would be really awesome user experience. And that also goes in the are.
00:12:40.958 - 00:13:11.958, Speaker B: If you're getting complaints about stuck transactions, you could try to send transactions on behalf of your users and ITX makes that really easy for you. So how do we get started? This is a hackathon. We want to talk about cool products that people can try and use. So to get started, one ETH is money. First you have an ETH deposit on the service and that will act as your virtual gas tank. And then we'll use that ETH to pay for gas on the network. ETH is the payment mechanism.
00:13:11.958 - 00:13:33.758, Speaker B: ETH is money. Use it as money and deposit into the ITX service. That way. The second one is an Ethereum account. The way we authenticate new relay requests is that you sign it and you give us the job and we just use Ethereum signing keys because that's way easier for most developers to deal with. And third, you need a coding project. You need a hack on something.
00:13:33.758 - 00:13:45.666, Speaker B: You need a script that's going to send a transaction to the network. Read a hackathon. It's Eve Denver. Although I've stolen the old, I don't really know what that is. An ox, I guess. I've stolen the old ox from 2019. But you get the point.
00:13:45.666 - 00:14:18.874, Speaker B: You need a project to use ITX with. So the way we've implemented ITX is that we have three new JSON RPC commands. So we're using Etherjs. You can just do provider send and you can send up the RPC command to Infura. There's three commands and I'll go through each know get know what's the balance of my gas tank? Send transaction will take a pre signed relay transaction. You send it up to Infuria and then we'll return you back a relay transaction hash. And then third, get transaction status.
00:14:18.874 - 00:14:49.430, Speaker B: As you're going to see. We're going to give you a list of transactions and then you can verify which one gets mined. So let's get to some code examples. Okay, well, the first one actually is you need a deposit so I'm not going to demo this part, but you go on the website, you go to the contract, there's a deposit for function you put in the address you're depositing for, and the amount you're going to deposit. You wait ten blocks, and then you're ready to go and you can start using ITX again. Eth is money. EtH is how we take the payment and how we fill up your gas tank.
00:14:49.430 - 00:15:06.666, Speaker B: And what's really nice is that you can program this into your script. So then, actually you can use ITX to then retop up your gas tank every time it gets low. So it's like an automated process. And that's really cool. Get balance. It's a really boring command. You're going to know relay, get balance.
00:15:06.666 - 00:15:29.346, Speaker B: So I think I have it over here. This is the balance one, and we're just going to run the balance command. So here in the code, you have the provider. It's called ITX, because I'm really exciting that way. You have a wallet. You do ITX, send, relay, get balance, and it returns your balance. It's the most boring piece of code ever, but you need to know your balance.
00:15:29.346 - 00:15:57.150, Speaker B: And I have zero point 16, ethan, at the moment with ITX. Oh, yeah. And that's the sample code. The next one's a bit more exciting because we're going to send a transaction to Ethereum. So the way you do it is that you get your transaction. The two address the transaction data, the gas limit and the chain id. You hash this together, you sign it, and then you pass that up to ITX.
00:15:57.150 - 00:16:20.614, Speaker B: You can see two data gas and the signature itself. Then what we're going to return to you is a relay transaction hash that would allow you to use a status API to track your relay transaction. And this is an example. But you know what? Showing little scripts on slides are a bit boring. Let's just run a demo. Let's see the fee bumping in real time. So this is the demo contract we're going to use.
00:16:20.614 - 00:16:39.722, Speaker B: There's an echo event. There's an echo function. It's going to be the most expensive hello, world in the world. And we're going to emit a message that says echo. Okay. Now, in the code itself, again, we have the provider ITX. We're going to call it.
00:16:39.722 - 00:17:08.278, Speaker B: We have the signer. We create the transaction here, which is the demo contract. Address the function for Echo, hello, world on the gas limit. We sign it, we hash it, we sign it, and we pass both to ITX. Here the transaction, the signature, we get back the relay transaction hash. So now I'm going to run this and hopefully it'll send out live demos are always exciting. There you go.
00:17:08.278 - 00:17:47.194, Speaker B: So now ascending, the first transactions be sent at 102 gwE. So while that's sending, we'll jump back to the slides. So what we need to think about next is if I can get here, how do we track that gas price bumping in real time? You see here, there's an ether scan link with the guay. So what you send up is relay get transaction status. You include the relay transaction hash like so, and then we return you back a list of transactions, the transaction hash, the gas price, the broadcast time, and you'll get each of these. And hopefully here you'll see. Maybe that's in mind.
00:17:47.194 - 00:18:06.600, Speaker B: Actually, let's find out. No, it's still pending, so it's going to say it's going to take 12 hours. It's been about 50 seconds so far. There we go. We've got a second bump. It's now 116 gwE, and hopefully it's going to get mined shortly. So keep an eye on that.
00:18:06.600 - 00:18:25.310, Speaker B: I can close that one now. And what is the current fee? Actually, the current fee is 196 and 176. There we go. We got it mined. Oh, beautiful. My friends took me five blocks. I got this mined at 116 gwE.
00:18:25.310 - 00:18:51.240, Speaker B: Yes, 116 GwE. The fast rate is 176. Trader is 196. I love it when a demo comes together. Thank you, senpai. That's what's really exciting about ITX. We're actually saving people money, even with our fee included on top of that, it's still cheaper to use ITX than it is to send it yourself.
00:18:51.240 - 00:19:16.782, Speaker B: I mean, it's ridiculous. But there is one gotcha. And one last point, actually, is there's no gas overhead, so I've lost a transaction. But when you send a transaction using ITX, there's no extra gas. We just take your data and we send it. There's no intermediary contract that you have to deal with. We just send your transaction as if you were sending it.
00:19:16.782 - 00:20:05.120, Speaker B: But there is one gotcha, and every third party relayer has this issue. And if you're going to build using a third party relayer, you're going to run into this gotcha and you're going to see it's not that big a gotcha, but I highlight it because that's the fun thing about development and also the most annoying thing about Ethereum. So it's called the message sender problem. So when a relayer sends the transaction on your behalf, we're going to execute a target contract. The target contract typically authenticates the user using message sender, but message sender is the immediate caller of the contract and that's going to be the relayer's address and not your Ethereum account. So there's some implications there. Most ERC 20s, you're going to have to do a pre approval before you can use the service.
00:20:05.120 - 00:20:41.020, Speaker B: But one if the contract is metatransaction capable like Dai, USDC, uni, then actually ITX works out of the box. There's no real actor configuration you need to worry about. You just run the permit function and then for example, use the uniswap router. If your user has a wallet contract again, you have, I think, believe Dharma origin Genosis safe. Everything works out of the box, everything's immediately compatible and it's beautiful and it works really well. That's the big gotcha with relayers. And every third party relayer service has that issue.
00:20:41.020 - 00:21:09.886, Speaker B: And there's some proposals to fix this at the EVM level and hopefully it doesn't get fixed at the EVM level because it's a bit annoying. But generally speaking, when you're developing your DAP, you can fix most of these problems. So it's not even that big a problem for you anymore. So now let's get to the challenge. The most exciting thing for I really want someone to build. What I really want someone to build is ITX loves Uniswap. The challenge.
00:21:09.886 - 00:21:53.066, Speaker B: I want someone to build an intermediary service that sits between the user and assists between Uniswap. The user gives the intermediary service a Uniswap, a swap that they want to perform. This intermediary service will sanity check the transaction. It's going to uniswap, it's swapping tokens, it's going to reward you for processing the transaction. And if you're going to get paid for this transaction or this swap, you're then going to pass as the ITX. ITX will broadcast that to the network and make sure it gets mined in a reliable fashion. When the transaction gets mined, you're going to get paid for the swap because you're covering the cost of the transaction.
00:21:53.066 - 00:22:22.390, Speaker B: You get a payment, then the user gets the swap tokens. So ideally the user experience is I go on your website, I hit swap, you take care of that for me. And then I just get my swap tokens at the end and I pay you via the swap. Okay, so this is a relayer enabled exchange. It's a really fun challenge. And really your challenge is going to be one. I wanted to work with any metatransaction capable ERC 20 contract.
00:22:22.390 - 00:23:04.578, Speaker B: If it's uni, USDC, Dai, they should all work out of the box for any user coming to your website. What you could also do is if the user does a pre approval so they send an approved message for we to the router contract, then that will also then work out of the box as well. That's the one small hiccup of the UX. But to be honest, you do that pre approval once, you never have to do it again because everyone does the fine out of infinite approval. Two, the user should not require any eth when they visit your website. The user requires no pre deposit in iTX. The user has no idea that ITX is even being used and they can just pay you via the swap.
00:23:04.578 - 00:23:31.402, Speaker B: So if I'm swapping die to uni, I want to pay you in uni via the output of the swap. Could even be the input. If you want, I could pay you and die, and then you do the swap and then you transfer, then I get the uni back. But regardless, I don't want ETH, I just want to pay you via the swap. Could be the input or the output. For me, the output probably makes more sense. And really the big challenge here is treasury management.
00:23:31.402 - 00:24:18.990, Speaker B: So your intermediary service has a gas tank, is covering the cost of the transactions, and you're in ETH and you're being rewarded in Dai, Uni, USDC, or any token that you're willing to take. And of course you can always do die to ETH, USD to ETH, whatever. So now you have the several tokens and it's up to you to work out how can you swap that back to ETH, top up your gas tank and then cover future transactions. And ideally by running this service you should be making profit. If you're going to swap tokens for someone, maybe you take 0.5% of the swap and that's enough to cover the cost of the transaction. And then they make a little bit of money for yourself for the relayer enabled exchange, and then you've improved everyone's user experience when they use Uniswap.
00:24:18.990 - 00:25:00.298, Speaker B: And the whole point here is that ITX takes care of the relay and sending transactions to Ethereum on your behalf. And all you have to care about again is this treasury management and that treasury management. I think it's going to be a little tricky, which is why it's really fun for a hackathon, but the big bulk of the back end is done for you. And as you've seen, we've done our best to minimize or avoid vendor lock in. So if you deploy this, it could be used for any relay service. The actual router contract is not aware that ITX even exists. The router contract doesn't care about ITX, so there should be minimal vendor lock in as well.
00:25:00.298 - 00:25:31.382, Speaker B: If you do this hackathon, we're going to do everything. I'm going to do everything. I'm sure the team will as well to support you to build this because I would love to see a relayer enabled exchange. I had my girlfriend trying to do Uniswap and she didn't know how to deal with ETH and I want my girlfriend to use Uniswap and not a centralized exchange. So I'm here to bounce ideas. If you want to build this type of project, get up to speed on what the MVP should do and what it can do. We have a modified router contract as a starting point.
00:25:31.382 - 00:26:09.534, Speaker B: It only needs one more function and it should do everything you need on the contract level. And you know what? If this becomes like, if there's an MVP, it's really exciting. It improves user experience. We're going to submit a Uniswap grant and assuming Uniswap accepts it and the MVP is awesome, I would love to see the MVP go to production and then you make money by dealing with the treasury management and uses relay transactions on behalf of others. And then you could have a startup and you never require a vc funding because the grant should be hopefully big enough to help you bring it to production. And we have $1,500 up for grabs. ITX.
00:26:09.534 - 00:26:38.822, Speaker B: And if you have gone all in on this challenge, we could have had other projects, but to me this is the closest to my heart and I would love to see this on a build on top of Uniswap. And finally, ITX is on all testnets. We have a private main net and there's a zero gas overhead to use it. So I think that's my final slide. I don't even have a question slide. I don't really know what to do now because I guess there's not really any questions. So thank you for listening and I really hope you enjoy the hackathon.
00:26:38.822 - 00:26:49.520, Speaker B: And I'm really excited to see the projects that come out of this, even if they're not ITX related. I love to see the projects that comes out of the yeah, awesome.
00:26:51.250 - 00:27:20.534, Speaker A: Patrick, you have some fans in the chat, man. No questions, but lots. Great presentation. Really interesting because, yeah, there's a real world use case for the treasury management, minimizing volatility, relaying between kinds of things, and then obfuscating the UX. I mean, we actually work with this quite a bit in our payroll application at Opolis, so this might be something we'd be interested in talking about later, too, if you get it all figured out.
00:27:20.732 - 00:27:29.820, Speaker B: Yeah. I think the Treasury Madison is like, the trickiest thing for this. So that's the main focus of the challenge, really, is to deal with that. Everything else is sort of taken care of, but awesome.
00:27:31.330 - 00:27:48.826, Speaker A: Cool. Well, thank you for everything. I'm just sort of queuing my friends over here to keep it down a little bit. So. Anyways, thank you very much for the wonderful presentation. We'll see you around the ether space. You're going to be in the gamer drive space at the consensus desk?
00:27:48.938 - 00:27:52.730, Speaker B: Yeah, I'll be around, I assume so. I'll be around at some capacity.
00:27:52.890 - 00:27:53.806, Speaker A: All right, cool.
00:27:53.908 - 00:27:56.100, Speaker B: I'll see everyone later. Bye, guys. Thanks.
