00:00:00.890 - 00:00:22.414, Speaker A: It's big enough, I guess. Can you see it? Great. So thank you everyone for coming. We're going to talk about paymasters and account abstraction in general, and how they can disrupt transaction fees. Oh man. Images are not working. That was my profile picture, but you can see me.
00:00:22.414 - 00:00:48.714, Speaker A: So, yeah, a bit about myself. My name is Antonio. I'm a developer relations engineer at Matterlabs and I have around 50 years of experience as a software engineer. And two years ago I started getting into blockchain learning solidity. I started this blog called soliditytips.com. There it goes. Where if you are learning solidity, you can find some tips for you.
00:00:48.714 - 00:01:19.974, Speaker A: And ufano is my Twitter profile. So if you want to follow me, you just have to go there. This is the agenda for the next 30 minutes or so. We're going to talk about what is CK sync? Just a quick overview. And then we're going to talk about how accounts work on Ethereum and the problems that we have right now. UX problems. After that we're going to talk about account abstraction because it's supposed to solve most of those UX problems.
00:01:19.974 - 00:01:49.498, Speaker A: And finally, we're going to talk about how we have implemented account abstraction on CK sync and how to create paymasters, which are the coolest thing about EIp. Four, three, seven, to be honest. So let me adjust this a little. Okay, Matterlabs. Our mission is to accelerate the mass adoption of public blockchains. And obviously Ethereum is the most popular blockchain. So we've been doing it with CK sync.
00:01:49.498 - 00:02:34.830, Speaker A: We created CK sync version one more than two years ago, which was a roll up that used zero knowledge technology to make payments and transfers. It was like a proof of concept for zero knowledge technology. And it's been used by projects like gitcoin. If you have used Gitcoin before and you have get bounty, for example, you can claim that bounty using CK sync and the fees will be super, super cheap compared with Ethereum. We have also released CK sync era, which is CK sync version two. We just rebranded it and it's a general purpose blockchain. It's a full roll up powered by a CKEBM.
00:02:34.830 - 00:03:19.290, Speaker A: We are increasing the scalability of Ethereum by moving the execution of the transactions off the layer one into the L2. And we are reducing transaction fees as well because we are bundling a lot of transactions together in batches before sending them to the r one. So basically, the cost of doing a single transaction in the l one is split between all the transaction in the batch that's how you get super cheap transactions. As we are sending the information of the transactions to Dr. One using validity proofs, we are inheriting the security of Ethereum. So if you know about the blockchain trilemma, that scalability was an issue. We are basically checking all the boxes.
00:03:19.290 - 00:04:09.260, Speaker A: And one of the coolest thing is that cksync era is powered by CKEBM which is EBM compatible. So you don't need to learn a new programming language. For smart contracts. You can use solidity or viper right now, and thanks to the special compiler that we have, in the future you will be able to write smart contracts with rust or C Plus plus and more programming languages. Apart from that we can say it's EBM plus because apart from the default features of the EBM, we also have account extraction, paymasters and l one L two communications. So we have even more features on top of it. And account extraction and paymasters, they are the hottest topic right now and they are super cool because they promise to improve the user experience in general.
00:04:09.260 - 00:04:50.540, Speaker A: So before learning how they improve the user experience, we need to know the problems in user experience right now. And to understand those problems we need to talk about how accounts work on ethereum right now. So let's go to it. So on Ethereum we have two types of accounts. We have externally owned accounts and smart contract accounts. An externally owned account is your metamask, or your ledger, or your trust wallet or any other client, and they have an address, a nons and a balance. If you don't know what a nons is, it's just the counter of the transactions that you have.
00:04:50.540 - 00:05:51.198, Speaker A: Each account is associated with a signer, and a signer is basically a private key and a public key. You use your private key to sign transactions and the blockchain is able to verify that a transaction was signed by the owner of the account based on the private key. And the externally owned accounts are the only ones that can initiate transactions. On the other hand, we have smart contract accounts and these accounts also have an address, anonyms, a balance, but they also have code. Because when you deploy a smart contract, that smart contract has some code, they are not associated with the signer and obviously they cannot initiate transactions. So if you send EtH to a smart contract, the only way to withdraw it is for that smart contract to have a withdraw method or a function and to call that method from an externally owned account. So smart contract accounts, they just live there.
00:05:51.198 - 00:06:38.602, Speaker A: There's no way that they can start any transaction. So this generates a few UX problems. The first one is that as the account and designer are so coupled together, if you lose your private key, you lose your account. And if for whatever reason you find a private key, you will own the account. So basically you can say that at the end of the day they are basically the same because if you have one, you have the other. On the other hand, we have managing private keys, which is super, super difficult even for experienced users. Nowadays if you create a new account, the first thing that the wallet asks you to do is to print your seed phrase or your private key and store it safely, whatever that means.
00:06:38.602 - 00:07:10.038, Speaker A: People don't know what to do with them and people lose them all the time. And again, if you lose your private key, there is no recovery at all. How many times have you tried to go into Google or your Facebook account or whatever, you don't remember the password. You have to use the recovery. Recovery doesn't exist on blockchain. If you lose your account, it's gone forever. And finally, the logic to sign transactions is hard coded in the EVM and there is no way to change it.
00:07:10.038 - 00:07:45.090, Speaker A: So yeah, that's what it is. And with animations this looks better. So these problems are the things that account extraction is trying to solve. The first one is instead of having accounts linked to a signer, basically we're breaking that relationship. So no more signer because we will use smart contract accounts. And instead of having a logic to sign transactions hard coded in the EVM, that logic, we will put that in the smart contracts. So it's fully programmable.
00:07:45.090 - 00:08:20.474, Speaker A: So basically the solution to all these problems is to use smart contract accounts. So here are all the problems that I mentioned earlier and with externally owned accounts and with smart contract accounts. So again, there is no more this relationship between the. Let me make this bigger. That's a little better. There's no more relationship between the signer and the account. Then again, the logic to sign transactions is put in the smart contract.
00:08:20.474 - 00:08:49.430, Speaker A: It's not hard coded in the ABM anymore. Then we have different methods to sign transactions. We can use biometrics or Google authenticators. They are super, super cool. And obviously this is programmable. So you can put recovery methods in your smart wallet, you can have backup keys, you can have social recovery and many different things. So most of the problems, they're solved.
00:08:49.430 - 00:09:27.940, Speaker A: So again, these are some of the features and Ux improvements. We can have different signature schemes instead of the one hard coded in the EPM. We can have multi SIG accounts, native multi sig accounts. We can have accounts with spending limits. Imagine you have an account that has a monthly limit for whatever reason, or application specific accounts. You can have one account to interact with Abe, one account to interact with Opensea, NFT marketplace. So all this logic, any logic you can think of, you can put it into the smart contract account and it will work.
00:09:27.940 - 00:10:09.514, Speaker A: And also, again, recovery methods like social recovery, backup keys. Okay, there is a problem. We all start using smart contract accounts, but only externally owned accounts can initiate transactions. How does this work? How are we going to do it? And that's what EIP 4337 is meant to solve. So I'm going to explain a little bit what EIP four three seven is, because it introduces a lot of new concepts. So let's go through them. There is a lot of info here.
00:10:09.514 - 00:10:46.146, Speaker A: So first we have the concept of user operations. And user operations are intentions of a user to execute a transaction in the blockchain. And this will be like the transactions generated for smart contract wallets. To simplify things. Then these smart contract accounts, they will send user operations to a dedicated mempool. This is key on this. So we will have externally owned accounts sending transactions to the mempool that we all know, and smart contract accounts sending these user operations to a dedicated mempool.
00:10:46.146 - 00:11:26.318, Speaker A: Then we have the concept of bundlers. Bundlers are nodes running a specific code, and what they do is they monitor the user operation mempools and they bundle a bunch of them together and they send them to a special smart contract that is called entry point. And the entry point contract will verify the user operations and execute. And again, that's a lot of info. So this is how it will look like. So on the top we have the current transaction flow of Ethereum. So we have the externally owned accounts sending transactions to the mempool.
00:11:26.318 - 00:12:24.230, Speaker A: And then we have the nodes validators picking those transactions and putting them into blocks. The EIP 4337 proposal. In the EIP proposal, you have smart contract accounts that create these user operations and they send them to this new mempool. And then you have the bundlers, which are again these new nodes, picking up these transactions, bundling them together and sending them to the entry point contract. So you can think of the entry point contract as an Ethereum system contract, and the entry point will validate the transactions, execute them and put them into the next block. Okay, so what about paymasters? Paymasters were in title of the presentation and we haven't mentioned them yet. So paymasters are a pretty cool feature of EIP 4337 and they are a smart contract that is used to sponsors transactions for other users.
00:12:24.230 - 00:13:24.300, Speaker A: They are an extension of the entry point contract. So the entry point will detect if a transaction is supposed to be handled by a paymaster and the paymaster will grant some validations and pay the transaction fees for the user or not. So with a paymaster you can have gasless transactions for users or you can allow users to pay fees in ERC 20 tokens, for example, which is pretty cool. Again, some use cases of Paymasters paying fees with ERC 20 tokens. And if you think about it, if you allow users to pay fees with other tokens, that means that you are increasing the utility of that token. Imagine that Uniswap decides that any swap will be the fees will be paid with the uni token. So that means that from that moment on, the uni token is no longer just used for governance, it has this utility, so it has more value.
00:13:24.300 - 00:14:01.910, Speaker A: Other things that you can build with Paymasters, you can decide that you can pay fees for any user that has a specific NFT. This is a very cool use case for dows, for example. Or you can have a Paymaster that pays the first ten transactions of every month for a user. And again, paymasters are just smart contracts so they are fully programmable. Any logic that you can think of, you can put it on them. So the summary of EIP 437 is this. It's a new transaction flow for smart contract accounts.
00:14:01.910 - 00:14:55.202, Speaker A: And if you see what's going on here, Paymasters are just in the new flow. So that means that Paymasters are not supported by externally owned accounts, which is a bummer because we all have metamask wallets. So we won't be able to use Paymasters. We will have to create our own smart contract account. So when account extractions? Yesterday, basically they announced it yesterday. So I had to redo a couple of slides of my presentation and yeah, they announced that the audit of the entry point smart contract was finalized and they deployed the smart contract into Mainnet. And they also announced that there are a few providers running these bundle nodes and creating Paymasters for users.
00:14:55.202 - 00:15:45.714, Speaker A: So you can say that account extraction is live on Ethereum since yesterday, which is great because it opens the door for all these UX improvements. So here's the Ethereum implementation. Now we can deploy programmable smart contract accounts, which means that the onboarding is, we have improved the onboarding because we might have no private keys, we can have recovery methods. So in general, a lot of UX improvements and we have Paymasters for smart contract accounts. EIP four, three, seven was not implemented at a protocol level because that will have required another hard work. So they didn't want it to do that. And what we have is two separate transaction flows.
00:15:45.714 - 00:16:21.906, Speaker A: So everything that they did for the CIP was adding things on top of Ethereum. A couple of things that are not so great is that it requires additional clients to run the bundlers. So that's one thing. Paymasters are not available for externally owned accounts, which is a bummer. And all of this is great, but the transaction fees are still a little high on Ethereum so they couldn't do anything about that. But these things. Can there do something? Yeah, of course we can.
00:16:21.906 - 00:16:58.090, Speaker A: Can we take EIP 43371 step further? We did in CK sync era, so let me show you how it is. Okay. With animation. This is better because it's less information every point. So at Cksync era we have account extraction implemented and it's live on Mainet. So we didn't have to put account extraction on top of an existing protocol because we were building a new protocol from scratch. And account extraction has been our radar from the beginning.
00:16:58.090 - 00:17:44.810, Speaker A: So for us there were zero compromises and this has allowed to allow us to do it in a different way, which is more simple both for users and for developers. Smart contract accounts and paymasters are first class citizens because under the hood, all accounts, even externally own accounts, every single account, behave like a smart contract account, and every single account support paymasters. So if you are using a metamask or trustwallet, you can still use it. And if you want to send transactions to that Paymaster, it will still work. There is a single mempool and a single transaction flow. And this is the key. Every single transaction, no matter if they come from an externally owned account or a smart contract account, they both go to the same mempool.
00:17:44.810 - 00:18:41.200, Speaker A: And we have our own version of the bundler and the entry point contract. This is inspired by EIP 4337 and our bundler is called the operator and the entry point contract is called the bootloader. So all of this looks like this, which is a simpler transaction flow. On Ck sync you have externally owned accounts and smart contract accounts, sending transactions to the same mempool. As we just have a single mempool, we don't need the two different nodes and bundlers. We have just a single bundler, which again we call the operator, and then our entry point contract which we call the bootloader. And as all transactions are following the same transaction flow, or can use paymasters, which are optional yeah, this is how it looks.
00:18:41.200 - 00:19:38.870, Speaker A: Okay, so how do you build a paymaster? You can do a lot of cool things with paymasters. How do you actually create one? Before going into the specifics on how you can create paymasters, just a reminder of what is the developer experience on Cksync era. You can use solidity and Viper or piper to write your smart contracts. So again, no need to learn new programming language or anything like that. You can use existing devtools like Hardhat, metamask or foundry. For example, if you have a project and you want to bring it to CK sync era, there is minimal changes that you have to do in the integration, zero changes in your smart contracts, minimal changes in your integrations. And we have sdks in JavaScript, Python, go Java and Swift.
00:19:38.870 - 00:20:08.200, Speaker A: And these sdks are not like completely different. They are built on top of the most popular libraries. So for example, the JavaScript SDK is built on top of ethers and it uses providers wallets contracts. To instantiate a contract you need the contract address, the API and signer or a provider. So it's exactly the same. The Python SDK for example is built on top of web3 Py. So again, the developer experience is very easy.
00:20:08.200 - 00:20:46.398, Speaker A: So Paymaster again is a smart contract. Okay? And again, you can put any logic that you want on them. Obviously you have to follow a few rules. One of them is that the paymaster must implement the methods on the ipaymaster interface. And that interface is provided by us in the CKC contracts package. And this interface has two methods. One, it's validate and pay for Paymaster transaction and the other one is post transaction.
00:20:46.398 - 00:21:33.520, Speaker A: And as you will imagine they validate and pay for Paymaster transaction. It receives all the transaction data and some payload. And with that you can do any validations that you can think of. The validation to check if the user has an NFT or a validation if they are sending a password. If your paymaster is password protected, for example, you will do these validations here and after that you will calculate how much in gas fees this transaction is going to take. You can see here in this line using gas limit and max fee per gas. And you will have to transfer that exact amount from the paymaster to the boatloader contract, which is this call over this method over here.
00:21:33.520 - 00:22:35.350, Speaker A: And once you pay the fees, because at the end someone is paying the gas fees, that is transparent for the users, but the Paymaster is the one that will pay them. Once that paid you will have to return a success or an empty value and that's basically it. The post transaction method is optional and you can use it to emit an event, for example, that hey, this transaction has been executed and it was processed by the Paymaster, for example. Then in Sikasync we have two Paymaster flows built in. One is the general one that you can use to basically anything and it receives a payload with any parameters that you can send. And again, this is useful for if the paymaster is protected by a password, you will send the password and it will go through the general built in flow. The ERC 20 flow, which is called approval based, is used because if you have used an ERC 20 before, you know that you have to approve and then you have to spend.
00:22:35.350 - 00:23:13.194, Speaker A: So that will mean that you will have to ask the user to send two transactions. So the way we do it is if you are using this flow, it will be a single transaction for the user and our transaction flow will do the approved behind the scene. So it will be a single transaction for the user. Front end integrations. So obviously you have your smart contract, you have created it. Next thing you have to do is deploy it to the testnet or to the main net, obviously. And then you have to fund it because at the end the paymaster needs some eth to pay for the gas fees.
00:23:13.194 - 00:23:50.186, Speaker A: So you have to fund it. And then in your front end there are some parameters that you have to include in the transactions to actually make sure that the transaction will be processed by the paymaster. For that you will have to use the get Paymaster params of the CK sync web3 library, which is here. And this method receives the paymaster address. And it also receives an object with a type, which is the type of load that you are going to use. Again, this is general or approval based. And then the inner input which is any payload that you want to send to the Paymaster.
00:23:50.186 - 00:24:46.612, Speaker A: Passwords, keys, whatever you need to run your validations. If you are using the approval based flow, you will also have to provide the ERC 20 token that you are using and the amount of tokens that the flow will approve for you. And finally, in your transaction, you will send these parameters in transaction overrides in an object that is called custom data. They will send it here and that's all you have to do. So you create a smart contract, you deploy it and from the front end integration it's just too minimal changes. And your application is using paymasters, paying fees for your users or allowing them to pay in ERc twenty s, which is very cool. Another thing that is pretty cool is that we have built the food track experience using CK sync era and using Paymaster.
00:24:46.612 - 00:25:32.816, Speaker A: If you have checked in on the. Oh, I'm not going to be able to show you guys because I don't have animations. But if you have checked in on the event, which you have, because you're here, you have received a code to claim some bidderbacks tokens. These are an ERC 20 that is deployed on CK sync and you can use that to buy food in the food tracks outside. The way it works is you download my ether wallet or you can use any other wallet because paymasters are supported by metamask or any other wallet. You can claim your tokens and once you go to the foot track, they will give you a QR code that you can scan and you will be paying your food with Erc twenty s. And you can use an empty wallet, a completely new wallet with zero eth.
00:25:32.816 - 00:26:07.116, Speaker A: Because we are using a paymaster and we are detecting, okay, this person is sending a transaction and the receiver is one of the foot trucks. So we will pay the transaction fees. So that's why it's completely transparent for you guys. No need to use ETH, no need to know what gas fees are. This is a very good improvement in user experience. And here I had all the screenshots of the app which you cannot see. And here I have some logos from us because we are one of the main sponsors of the event, cksync era.
00:26:07.116 - 00:27:12.836, Speaker A: We have hackathon bounties going on if you want to participate again, we have built the foot track experience. We have two booths, one at the entrance, another one in the main floor, super big. And we have a lot of talks, panels, workshops going on. So if you are interested in what we are building and L2s and what we're doing to scale ethereum, just come talk to us, ask us anything. So, main takeaways CK sync era is a L2 roll up powered by a Cke EBM. You can say it's an EBM plus because we have account extraction, paymasters and any more features that are specific for CK sync, we implement account extraction at a protocol level, which is simpler for users and for developers. Account extraction in general is great because it improves the user experience a lot, which means that it will increase the adoption of blockchains, which is our mission.
00:27:12.836 - 00:27:37.852, Speaker A: And paymasters are super awesome. I think they are the greatest things to happen with ERP. Four, three, seven. I think they can create like a new economy around them. So yeah, they're great. You've learned a little bit how to build them. If you're late and want to know more about Paymasters, you can check our docs because we have a tutorial on how to create your own paymasters.
00:27:37.852 - 00:28:32.748, Speaker A: Don't worry, there's no need to take the pictures. I have a QR code in the next slide. So yeah, more about account extraction there is a blog series from Argent which have been talking about account abstraction for years now and we finally have it again. This is this tutorial that explains you step by step how to create a paymaster on Cksync era and deploy it on the testnet and use it. There is also a tutorial about how to create the smart contract accounts, native multisig accounts on CK sync. A lot of more information of CkSync era is in our docs and then we have a discord channel with more than half a million people developers there asking questions and discussing about the protocol and obviously our Twitter account. Make sure that you follow the official account because there is a lot of scams and if this loads.
00:28:32.748 - 00:29:02.950, Speaker A: Yeah, this is the QR code. You can scan it. It has a link to the presentation and it also contains a link to another workshop that I did a few days ago about an introduction to L2s in general with some code examples, a repo that you can follow to deploy a smart contract on CK sync and interact with it. We also have our job board here because we are hiring. So yeah, that was it. Thank you everyone for coming.
