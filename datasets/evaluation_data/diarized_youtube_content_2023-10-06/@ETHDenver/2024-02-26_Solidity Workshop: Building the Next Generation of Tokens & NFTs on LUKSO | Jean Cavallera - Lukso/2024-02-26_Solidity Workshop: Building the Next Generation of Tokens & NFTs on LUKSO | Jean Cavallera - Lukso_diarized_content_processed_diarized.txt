00:00:08.250 - 00:00:39.862, Speaker A: Hello everyone. Yeah, and welcome and thanks for joining my presentation. So today I'm going to do a little solidity or workshop on how to build the next generation of token and NFT on Vaxo using the LSP standard. So a bit of introduction about myself. So my name is Jean. I'm the lead smart contract engineer at Luxo. And aside of Luxo I'm also the author of all about solidity article series and really passionate about smart contract.
00:00:39.862 - 00:01:35.882, Speaker A: So this is basically the repo that I work on a daily basis, LSP smart contract. And aside of that I publish articles on medium called all about solidity. So today the agenda is that we're going to have an overview of LSP seven and eight standards, the token standard on Luxo and the benefits. And we're going to build a very basic proof of attendance NFT as a proof that you intend into this talk. And we'll look at the solidity code and I advise you to use the universal profile browser extension available at this link. So what are the benefits of Luxor standards? So basically there are multiples. First, they are more adatable for different use case.
00:01:35.882 - 00:02:40.430, Speaker A: You can use them to do things like dynamic NFTs or collection of subcollections. So you can create more complex application that are more tied to the real world. They can hold a little amount of metadata. Their interface, you will see is more unified compared to the other standards and they have safety and notification feature. But yeah, as the code says, let's look at the code and stop talking. So if you go to this link, it's available also here on this QR code you will get head into the GitHub repository. So if you go there you just have to click on remix of the remix link here and you will have all magically the whole code loaded.
00:02:40.430 - 00:03:53.280, Speaker A: I'm just going to give a quick overview on the slide. So first of all, as you can see the this contract, use the LSP smart contract. I think we're going to do it like that from the NPM package. And first of all we're going to look at the deployment parameter of an LSP eight identifiable digital asset. We can see several things. First, we have the type of token. We can represent NFTs and token multiple ways.
00:03:53.280 - 00:04:39.690, Speaker A: And second, we can represent each NFT also in even more multiple ways, like basically a number. Or we can have more unique identifier, or we can have more complex use case like collection of subcollection. So now we're going to see how we can set metadata. So basically the way it works is that in the constructor here we are setting what we call the token metadata. The way it works is that LSP eight use a flexible key value store that you can see as a mapping. But we are developer not smart contract. And as we know smart contracts understand bytes.
00:04:39.690 - 00:05:37.882, Speaker A: But for us we are more oriented toward a more unique and readable form of how to read this metadata. So this metadata can be represented with these schemas. And you can see we can store things like the metadata of NFT or like who created the NFT, a list of creators. So the way things like array data keys work is that we have one entry for the number of creators like for the length of the array and then each index is accessible through the next 16 parts of a key. So a bit of a walkthrough to the code here. So the way it works is that first I set up some predefined metadata here at the top. Then we are going to set the list of creators.
00:05:37.882 - 00:06:31.506, Speaker A: So there is only one creator. Then I have set up the address of my up as a creator here and we have utility libraries like LSP, two utils in our package to make all of that heavy lifting easier for you. And then we basically set which type of creator it is. So he's an ERC 75 account and it's at index zero and all of that is available in our docs. It's just that in 20 minutes I cannot cover all the inner detail. So what's the second benefit? We saw that there is a unified interface and functionality. So if you look at other standards like ERC 27 to one, each of them have their own way to do approvals and do token transfer.
00:06:31.506 - 00:07:08.240, Speaker A: In comparison, LSP seven and eight have the same function interface. The only difference is the parameter for what you are transferring. LSp seven you transfer an amount of tokens. LSP eight you transfer a token ID an NFT. But yeah, so let's see a bit that in action. How does that actually work? So I built a little d app for the purpose of a workshop. Yeah, with Internet that will be better, sir.
00:07:08.240 - 00:08:21.440, Speaker A: The way it works is that as you're going to see we're going to first deploy our NFT. So we're going to go in remix. I'm going to connect my account. So this is our universal profile browser extension. I'm going to connect this account and this is connected and I'm going to deploy. You going to have a pop up window appearing. I don't know what's happening.
00:08:21.440 - 00:09:16.330, Speaker A: Yeah, I think it's my Internet connection. That's not working. Great. Okay, well, I will just carry on with the slide. So the way it works with LSP eight is that assets are automatically registered. So here's a basic question. If I send token to someone or an NFT, but I don't tell you, how do you know that you have received it? And the answer is that basically you don't.
00:09:16.330 - 00:10:19.950, Speaker A: You don't. And the only way you know is by adding the address on metamask, by importing it. But how do you know the address of a token that you have received if you don't know actually that you have received a token? And the way we have built that at Luxo is by using a common interface function called universal receiver, where you have a type ID to specify the type of token or NFT or information you are receiving and the data that was sent alongside the notification. And the way it works is that let's simulate a token transfer scenario where you have two universal profiles. One is transferring the token to another. The token contract is going to notify both the sender and the recipient. And what will happen is we have what we call an LSP one delegate contract that is going to handle the registration of the asset on the token contract.
00:10:19.950 - 00:13:21.300, Speaker A: So I have nine minutes left. I'm going to try again to connect to the, to reload the page and show the demo which one. Sorry. Thank you. Okay, so I'm going to now deploy the contract. So this is the bytecode of a contract. You can see the browser extension in action here after fighting against Wifi.
00:13:21.300 - 00:15:01.936, Speaker A: So you can see if I open the browser extension, there is like the transaction in progress view. And we can look at the transaction hash is basically here. So yeah, this is the contract that we just deployed. And if I go into the sample app that I created for the purpose of this talk, you can see this is basically like the metadata that I've preset beforehand. So, yeah, let's do a bit of a demo. So the way it works is I will connect another user, I'm going to call it Alice, to the d app. And the way the code is built is that there is a claim function that basically creates the token ID as the hash of the caller.
00:15:01.936 - 00:15:42.590, Speaker A: And we're going to mint. And the way the parameter works is that we are minting for the claimer. The token ID true, is a parameter called the force in the LSP seven and eight standard. So this is for, by default, everything is false because recipient of token need a way to register the assets. But here, like, I put it as true in case if anyone want to trade out with a metamask or any way. So I'm going to claim the NFT with Alice. So you can see the buz extension here.
00:15:42.590 - 00:17:02.244, Speaker A: It. So yeah, we have like different tabs in our browser extension, like who has access to the smart contract based account? Like the activity. You can see there's a transaction coming in right now. Let's have a look if it has already been validated. Yeah, it looks like it went through. Okay, cool. Yeah.
00:17:02.244 - 00:19:04.844, Speaker A: And if I connect with Alice and I go to her wallet, we can see that Alice has this collectible. But one interesting thing is that we can see that the asset is unverified. So the way it works with Aluxo for verifying the assets is that to make sure that you're actually interacting with an asset that's genuine, is that as me, as the creator, I have to register this asset in my list of issued assets. So I'm going to just do that right now. I'm going to disconnect and I'm going to reconnect with my actual account and I am going to click on registered issued assets. And what I'm going to do here, basically under the hood, is that I'm setting the entries in the storage of my up for the LSP, twelve issued assets, the list of assets that I've created. It's probably a bit slow to update, but yeah, basically, if I go now and I refresh the page, you can see it's already appeared live.
00:19:04.844 - 00:20:01.948, Speaker A: You can see now that because I registered the asset, now the asset is verified. And yeah, this is the proof that we have a cross linking between the list of creators in the assets contract and the list of issued assets in my metadata contract. And, yeah, that's basically it for the demo. Have 30 seconds left, and there's a bit of a bumpy road with Wifi, but hope you liked it. And if you have any more questions, feel free to ping me. I will be around in Iftanva for the whole week in two minutes. I cannot go into the whole detail of the code and the standards, but yeah, you can learn more by going to our docs at Luxo tech, or you can just feel free to ask us in the team for more detail.
00:20:01.948 - 00:20:05.720, Speaker A: Yeah, and thank you, everyone, for attending to my presentation.
