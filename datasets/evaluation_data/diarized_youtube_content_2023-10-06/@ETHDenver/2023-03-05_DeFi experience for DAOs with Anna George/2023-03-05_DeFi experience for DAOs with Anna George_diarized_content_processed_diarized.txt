00:00:01.690 - 00:00:56.610, Speaker A: You hear me? Yeah. Cool. All right, thanks everyone for coming to this call. My name is Anna. I'm co founder of Cowswap, and today's talk is going to speak about not only dows, even though I think in the agenda, originally the title was Dao related, but generally how to trade on cowswap, what the advantages are from trading on cowswap, and then why specifically daos are also benefiting from trading on cowswap. So we are starting off with a few statistics, just to let you know. We have been basically live for almost two years, and since then we have become the second largest Dex aggregator and by now have the highest retention rate across all Ethereum dexes.
00:00:56.610 - 00:01:47.474, Speaker A: We have since we launched, transferred $20 billion in funds, and we have a lot of users and our user base is constantly growing. Speaking about our users, we actually have here an overview of how our user groups compare to the user groups of our competitors of other Dexes on Ethereum. And interestingly, basically the two graphs on top compare the volume, and then the lower two graphs compare the number of traders. And then we categorized what types of traders are more attracted to the usual amms that, you know, compared to what types of traders are usually trading on cowswap. You can see that basically the users that are more if you'd like to.
00:01:47.512 - 00:02:05.880, Speaker B: Learn how to practice your fix or practice yours before tomorrow ceremony, then come on down to the middle palate stage at 06:00 p.m., again, if you want to practice your presentation for tomorrow, come on down.
00:02:10.620 - 00:03:17.820, Speaker A: All right, for everyone who doesn't want to leave to practice their pitch, I continue. So the interesting part here basically is that the type of user that's using on cowswap is usually more what we would classify as a Dex aggregator or whale user. So someone who is more large volume trader, they typically also have a larger diverse portfolio of tokens. We are actually targeting all users, also normal retail users, but because of the advantages that we offer, the people who really trade a lot of volume usually prefer going on cowswap. Speaking about large volume traders, we actually made news a couple of weeks ago when we transferred or when we processed a trade of $16 million. It was done by ENS, by the ENS Dow, one of the biggest dows in the space. They had the need, I think, to basically secure some funding for paying salaries for the next year and a half.
00:03:17.820 - 00:04:28.070, Speaker A: They wanted to convert 10,000 ether for USDC, and they had public Dow discussions on where they would want to process this trade. And after long discussions, they basically came to the conclusion that they would wanted to settle this trade via cowswap. The question is why did they pick cowswap first? Before we explain this, I want to make everyone understand what's different about a DAO related transaction compared to a normal user transaction. The difference is if as a DAO, you want to decide what type of transaction you will do and you have your entire community discuss this with you, you will first have to set up a proposal that already includes the transaction details. So now after the proposal is created, you basically have to wait, right? You have a voting period where now your token stakeholders will decide whether they're in favor of the trade execution or not. For many dows, this voting period lasts seven days. In the case of ENS, it was actually even a little longer.
00:04:28.070 - 00:05:23.588, Speaker A: Then finally, after the voting period has passed, if the community is in favor for executing this trade, they will then trigger the transaction. But remember, the transaction details were crafted at least seven days ago. So what happens now? If you were to place a trade that was crafted seven days ago on any of the normal dexes like Uniswap or one inch, you would basically have two options. Option number one is again, you crafted the transaction already with the fixed execution route, with the fixed price point, and with fixed slippage. So now it's seven days later. And the only way that you can ensure that this trade actually will be executed is that you define a very large slippage tolerance. Because of course, there's a lot of on chain price movements, meaning if you don't allow for slippage, most likely your transaction is not going to last.
00:05:23.588 - 00:06:03.356, Speaker A: It's not going to be possible to be executed. So you have to put a very large slippage. But imagine putting 10% slippage tolerance on a $16 million trade, there's a lot of money on the line that you could lose. And if you had done this trade where one inch or uniswap, it would have been visible on chain for any mev exploiting bots for seven days or longer. And for sure you can place a bet that this money would have been extracted. Scenarios two is you are aware that your slippage is at risk. Hence you're not willing to set a 10% slippage tolerance.
00:06:03.356 - 00:06:49.486, Speaker A: You put a very, very tight slippage, you wait for seven days. There was a lot of onchain volatility. Probably the price is not the same anymore. That was seven days ago and you have a high risk of your order to fail. Not only does this mean that you basically paid transaction costs for an order that never was executed. But much, much worse is you probably have to do the whole on chain voting process again, craft a new transaction, and hope that the next time the transaction actually passes. Now, what happens if you were to do this on cowswap instead of any of the other normal dexes? One very big difference is that on cowswap you actually sign a message.
00:06:49.486 - 00:07:41.370, Speaker A: So you're not crafting an ethereum transaction, you only sign an intent. Then what happens after the voting period passes and the servers are actually, and your trade is actually supposed to be executed? Cowswap engages in a solver competition where external parties are all competing against each other to find the best possible execution path for you at the moment of execution, not what was the best path seven days ago. Then these servers are also looking into coincidence of once. We will talk about this in a second. And very importantly, they will also protect you against these MEV exploitations. All right, let's go through this in more detail. First, as I mentioned before, the user or DaO signs an intent to trade.
00:07:41.370 - 00:08:27.930, Speaker A: This means you do not commit to fixed execution paths. You do not pay for transaction costs unless the transaction actually is finally mined. And very importantly, there's also a way how you do not have to commit to a specific price. But we will get back to this in a couple of minutes. Then what we talked about already briefly is we have the server competition. As mentioned, they will look at time of execution. What is the best possible execution path for your trade? And they do this not only by querying all existing onchain liquidity, they also query one inch, paraswap, matcha, everything.
00:08:27.930 - 00:09:16.470, Speaker A: And they also have their own pathfinding algorithms and also integrate their own market maker liquidity to ensure they can really execute your trade optimally. They compete, and only the solver that finds the best possible price for you is the one that wins. Then what is special also about cowswap is they can also match your trade against another user's trade. We call this coincidence of one. This is where the name cowswap is coming from. And by batching you against other user trades, you get additional price benefits. Because if you can be matched against someone else, there's less price impact, you pay less gas costs, and all the volume that is directly matched peer to peer is protected against mev.
00:09:16.470 - 00:10:04.404, Speaker A: Then the last step, and this is actually a very, very important part of Kauswab, is that your trade is protected against mev. So not only do solvers when they execute your trade, they check what slippage tolerance is actually necessary at moment of execution to submit your trade successfully. So let's say that you committed to 2% slippage tolerance, but it's actually only 0.2% is required for your trade to actually be executed. They will only submit your trade with a reduced slippage tolerance so that the remaining slippage cannot be exploited. On top of that. Also solvers are responsible for carrying the execution risk.
00:10:04.404 - 00:10:56.840, Speaker A: So what happens? The servers engage in a competition. The server with the best solution wins the competition. And they are bound by smart contract to provide you exactly that price point that they promised to give you. So in case when they're executing your order and you're being sandwiched, the server has to pay that cost. The user is not impacted by the sandwich attack. So I mentioned before that there's one essential step that on top is possible with cowswap that allows the user to not predefined a fixed price. And this is facilitated with the token standard ESC 1271, which basically allows to verify off chain signatures created by smart contracts.
00:10:56.840 - 00:11:54.510, Speaker A: Why is this important is we had a grant that was executed by the yearn team, actually by sub team members from the yearn team that for their own purposes thought, okay, actually we want to trade on cowswap, but there's one thing missing for us, which is that we cannot previously commit to a fixed price because we want automated integration of cowswap. So they created a service that we refer to as the Milkman service, which consists of two things. It's basically, it's one smart contract in one bot and you, if you are interested to try it on cowswap for setup a trade already that will only be executed sometime in the future. You don't know what the on chain price point is going to be. Then you use Milkman. Basically all you need to do is you need to approve the milkman smart contract. Approve it for the token that you want to sell.
00:11:54.510 - 00:12:46.776, Speaker A: Then you query the Merckman smart contract with following parameters. You need to specify what's the amount in basically the token you want to sell. You need to specify what ELC 20 token you want to swap out, which one you want to receive, what is the receiver address. And now the very important part is you can also set a price checker. And the price checker is an address which is basically the price oracle. So you could choose a uniswap pool as your price oracle, or you could even come up with something more sophisticated where you would basically take the average of multiple on chain pools. And then once you query the smart contract, it emits an event, and the milkman bot is picking up the order automatically.
00:12:46.776 - 00:13:20.536, Speaker A: And it's thus set on cowswap. And this is exactly what Ens did. And by doing this, not only did they successfully execute their trade, they were able to previously define a slippage tolerance of 2%. However, when the bot picked up this order realized, okay, it's only adding 0.5% slippage on top. In total, only 0.6% slippage were required for the price impact of the 10,000 ether order, which is very low.
00:13:20.536 - 00:13:48.400, Speaker A: None of the slippage tolerance was exploited. None of it. So there was no mev attack. The mev bots could have taken $80,000 from the order, but they didn't. And, yeah, so that was a very successful first experiment of the milkman order. And it's really cool to see that now. Other dows are following, for example, nouns dows now also working on doing the trade, using milkman on cowswap.
00:13:48.400 - 00:14:18.490, Speaker A: Yeah, so there's many different use cases of how you can leverage these smart orders on cowswap. One is the one we just talked about. It's a very simple swap that can be done by a DAO for many different purposes. It can be done because you want to diversify your portfolio. It can be done because you need to do a payment or because you want to invest in specific assets. And many more use cases, basically that just require you to do a simple swap with finding a price point. That's in the future.
00:14:18.490 - 00:14:48.950, Speaker A: I mentioned we are working with nouns now. We have worked with ENS. We are now also working with tally. Tally is going to integrate us natively in their UI, which is going to make it even easier for people in the future to use cowswap for automatic trading. Then another nice use case for DeFi is twap orders. That basically means time weighted average price trading. That is, if you want to build up a portfolio over time, this is the way to go.
00:14:48.950 - 00:15:53.956, Speaker A: It's strategically smarter to not, if you, let's say you want to invest in ether, to not buy all your eth today because you don't know how the price is going to develop over time. So instead, what you can do is you can set up t wob orders where basically every day or every week or every month you are committing to buying a certain amount of ether. And yeah, that's basically for that. We also have already, we are using ESC 1271, and we have also special contract code that is linked here under the QR that guide you through the process of how you can create your own Tivob orders, and then there's many, many more use cases as well that you can do via cowswap. One big one, for example, is liquidations. So imagine that you want to check that whenever your collateral rate of your portfolio is below certain of someone's portfolio is below a certain amount, you want to liquidate those assets. You can do this via cowswap.
00:15:53.956 - 00:16:47.720, Speaker A: This my contract could automatically verify and validate whether the balance is too low and then trigger a sell order. The reason why it would be nicer to do this via KaosOp than via the traditional liquidations protocols is that this is an inherently better user experience because there's less price impact if you do it via Kaosop, and the traits of the user are protected against MeV. Liquidations is always an event that sucks. At least let's try to make it a little bit better for the user that at least they get a little better price for when they get liquidated. Another use case for Kowsop smart orders, for example, could be automated rebalancing. This is interesting for any DeFi protocol that is basically managing portfolio of other projects. By integrating Kausup, they could manage these portfolio assets fully, trustlessly.
00:16:47.720 - 00:17:28.616, Speaker A: And then lastly, another use case that comes to mind is automated recolateralization, basically the opposite of liquidations. If you have been liquidated in the past, you don't want this to happen anymore. In the future, you could set up cowswap basically in a way that it always checks whether you have enough assets in your portfolio. If you go below the collateralization rate, you could automatically trigger a buy order to increase the rate of your portfolio to ensure you won't get liquidated. And yeah, this is just to spark some ideas. There's many more use cases for smart orders now. Basically, since we had a hackathon, we want you guys to build your own.
00:17:28.616 - 00:18:13.444, Speaker A: There's a QR code to our bounties. It's not too late, even if you don't submit it by tomorrow. We were always happy down the line to fund more projects to build on top of Kauswab here, another two QR codes, one to the milkman smart contracts and one to the TwaP smart contracts. And last weekend, a shout out to the different projects we are collaborating with. I mentioned Tally nounstar ens. Also, we are collaborating with the Nosisafe and with Zodiac. Just basically to bring cowswap, make it easier for anyone who's interacting with dows and needs to do some sort of portfolio management to do this via cowswap, and that's it.
00:18:13.444 - 00:18:14.800, Speaker A: Thank you very much for listening.
