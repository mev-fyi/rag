00:08:24.950 - 00:09:37.550, Speaker A: Ethereum client passing in that Wagme client object and then the chains. And once we have the imports and configurations set up, where do you add this code? So in this example, because we're using react, your app JS is going to be like not the root of the component, but basically where like not your index HTML file, but where your components actually start rendering. And so this example is like if you're using next JS, which is generally what it looks like, but for what we can do here is this would essentially just be app, because it's like your first app component that you have when you're using react. And we wrap that app, we wrap it with the Wagme configuration passing in the client, which is a Wagme client. And then lastly we then add web3 modal below. So we don't actually wrap web3 modal with any of this. And then once you have that set up, then it's this simple to just add the web3 button.
00:09:37.550 - 00:10:06.810, Speaker A: So it's just literally its own component. And we can add different styling to it as well. The styling, the way it'll look like. So we can use this. Let me disconnect. Okay, so we click on connect wallet. This is like that web3 modal button.
00:10:06.810 - 00:10:51.238, Speaker A: And then you see this modal that's already kind of pre done for you. So what I can do from my metamask wallet, I can just click metamask. Actually, let's try that again. I'm going to click metamask. Well, just get the QR code, open up metamask from my mobile device, and then I'm going to scan it. And then I'm being asked if I want to connect to the site from my phone. So then I can put connect, then it's connecting.
00:10:51.238 - 00:11:13.422, Speaker A: You can kind of see it's still loading some information here, but you can see that it already kind of auto configures to my Ens information, which this is like my Ens domain. Finesse. Finesse. And this is my NFT avatar that is also included in my ENs domain properties. Okay, cool. The project finished. Loading.
00:11:13.422 - 00:12:00.970, Speaker A: Excellent. So let's jump into this project and let's add all the code. We just basically did. All right, so first things first, I'm going to create an environment variable just because this is where I want to keep my project information. So we can do that by in your terminal typing in touch env. And now let me get that project id number that I have saved. So I'm just going to save that to my clipboard and let's open up that terminal I just created.
00:12:00.970 - 00:12:56.648, Speaker A: And because this is a react project, we need to make sure we start everything with react app and we're going to call this project id. So we'll paste that in the project id and let's go back to the documentation and we can just start kind of importing all the code we need. All right, so this might take hopefully not as long, but let's install these dependencies, which will be the web3 modal ethereum, React, Ragbi and ethers. While that's loading, let's go back and grab some of the imports that we'll be using. So in your app js, actually, okay, earlier I said that this all goes in your app JS file. I lied. It goes into your index JS.
00:12:56.648 - 00:13:34.110, Speaker A: So it's a lot easier once you can start seeing it, encoding it in real life. So let's just get rid of some of the things that we're not going to need and then we can import. So we're just pasting in this entire chunk from the import and we'll be adding it to your index JS file. This is where we'll be changing the chains that we'll be using. So for this import, I'll just going to be using orally since that's the chain that we can test. And now let's go down to our configuration. So let's just copy this entire block.
00:13:34.110 - 00:14:45.020, Speaker A: And in here we'll be able to create the client. So our chains will just have to be updated to the one chain that we just updated. And then let's get our project id info down here. So let me just make sure I can see that. All right, that's still loading here for a sec. But pretending that this does exist and this actually works, I'm just going to make a variable for it so it just looks nicer and prettier. So for example, like here under project id, we can actually just erase this entire thing and just pass in project id.
00:14:45.020 - 00:15:31.284, Speaker A: And this is just because I named my Project ID the exact variable name. So if I had done something like this, then I would have to do project id cloud. Hopefully that makes sense. But we're going to just keep it the same so I don't have to worry about creating a different variable for it specifically. And we can do the same thing with your Wagme client and we'll just save that for now. And let's go back to the Wagme components. So I'm going to just copy this, everything from Wagme and the web3 modal.
00:15:31.284 - 00:16:10.184, Speaker A: I'm going to copy that. We're going to kind of clean some things up here. So I'll just paste that in, remove this strict mode. Okay. Hopefully this looks a lot cleaner. So all we did, we kind of got rid of all the extra rendering. We still have our app that will be rendered, but now we're wrapping it with the Wagme configuration component.
00:16:10.184 - 00:16:57.560, Speaker A: And then at the bottom, we're adding our web3 modal. And let's not forget to also add our project id down here. So that looks pretty good to me. I guess we can just finish until the dependencies are finished installing. But lastly, let's just go ahead and add our connect wallet button. So from our app js, we can probably just get rid of everything from this app and we can just say Denver 2023. And I'm going to import that web3 button.
00:16:57.560 - 00:17:41.130, Speaker A: Oh, it's still loading. That's why it's not autocompleting. But we'll give this a second to load. But while this is loading, does anybody have any questions? Are you all on a team to hack this weekend? This week? Any cool stuff? Not really. Just here for the parties. It's okay. A lot of people are just here for the parties too.
00:17:41.130 - 00:18:19.030, Speaker A: So let's look at that wagme config. So this is this create client? Is this what you mean? So we're grabbing create client from this import line. And that's in the documentation when you're importing. Yeah, here it is. So that's a second to last line. You're creating that create client. Cool.
00:18:19.030 - 00:20:22.374, Speaker A: The Internet looks strong, but it's not going that strong right now, so appreciate your patience here. Well, while that's loading, I'm happy to show a different project that is actually using Wagme hooks. And you can see how it's incorporated using web3 modal. So at least I can give you guys some working example here. What was this intro? Okay, there's a lot happening here, but let me load this app so you guys can kind of see what it looks like. Is anybody else having issues connected to Wifi, or is this the wifi everyone else is connected to as well? Attendee? Yeah, that might be the move if the Internet doesn't work down here. Okay, cool.
00:20:22.374 - 00:20:52.810, Speaker A: That's loading for us. Awesome. Okay, so this is like a guest book that I created earlier. Let's see. Is this actually all right? Not working as expected. However, let's take a look at the code. So let's take a look at where Wagme actually gets used.
00:20:52.810 - 00:21:40.490, Speaker A: Let's see. Okay, actually let's go back to the example because it did finally load. So that's good. And web3 modal that. Okay, so let's try running this. And we're using NPM. All right, so we've got something that's working that looks promising.
00:21:40.490 - 00:22:13.498, Speaker A: So if we click on connect wallet, we're now able to also get the QR modal. So let's just try from the browser itself. So I'm going to just connect to this burner account that I've got. Oh, it looks like I have two rejections in here. Switch network. All right. Okay, let's just try that again.
00:22:13.498 - 00:23:04.926, Speaker A: I think there was like another request earlier. So let's click connect wallet and let's just kind of do it the QR way as well. So I'm going to connect using my phone and it looks like I'm connected through my phone over here. And we are connected to chain one. What is this showing as? Yeah, so we're able to actually connect. I know that wasn't as the workshop I was planning to give you all, but it's honestly really that easy. Once you have the configuration set up, you're then able to use Wagme hooks.
00:23:04.926 - 00:23:43.374, Speaker A: So if you're unaware what Wagme hooks are, we can go here. And the important thing here to note is you're going to see that you have two examples. So up here on the very top you have react and core. When we're using the react package, you're going to want to use the react hooks. And down here on the sidebar, if you click on hooks, you'll be able to see all the information that you're able to use. So let's say you want to be able to get the balance of the user, which web3 modal already does for you under the hood. But let's say you want to display it somewhere else in your application.
00:23:43.374 - 00:24:03.530, Speaker A: You'll be able to just import it like this. Like use Wagme. You can probably even just try it out as well. Let's try it here. So use wagme. So this is from the balance. Let's see.
00:24:03.530 - 00:24:44.540, Speaker A: So we want to be able to get the user account right from who's ever already logged in because you obviously want this to be dynamic. So we go to use account. It's just another hook that we're going to be importing. And if we do this. So let's console log this or just comment it out for the time being. And let's just console log address. And now going back into the react app.
00:24:44.540 - 00:25:07.620, Speaker A: Okay, we're able to see, this is the address that I'm currently connected to. So here ending in CE. Oh no, just kidding. I connected on my phone. So this is the right address. So now let's go back and let's see if we can pull the user balance. So let's just remove that because we don't need it for right now.
00:25:07.620 - 00:26:15.264, Speaker A: Remove this log and we're going to actually move this down here. And since we already have the address, what we're going to actually just do is pass in the address. And let's see what we now get when we console log data. So we get this object and you're able to see that we've got kind of all that information that web3 modal is already pulling. But this is kind of just honestly how easy it is to use Wagme versus using ethers and kind of creating all of that on your own, which is normally what you have to do if you're not using Wagme. And the same kind of goes to if you want to read the contract or write. So do people here have examples with smart contracts and reading smart contracts from your front end? Okay, so then you kind of know when you're going to be reading a contract from your front end.
00:26:15.264 - 00:26:53.870, Speaker A: You need to have access to that Abi, which is just that JSON file. So very similar to what we did earlier. Let's say we want to use this. So use contract read. Let's just get rid of that. And if you get this error or you can't use the same const, because we've already had it, you can always rename this to contract read data. So then you're just setting it as a different variable name.
00:26:53.870 - 00:27:42.220, Speaker A: So we do console log. All right, so we can change some of these things up. So this is supposed to be the contract that we've deployed. So I believe I have a contract. Where is this contract? So this is a contract I've kind of been using. So you can see all these different ad entries. So looking at the docs, you just want to make sure you use the actual contract that you're trying to read from.
00:27:42.220 - 00:28:40.710, Speaker A: So I'm going to just import or just use the contract address that already exists, the ABI, we'll have to create an ABI. So let's see if I can do that here fast. Contract. So let's just copy that back in here. And where are we? And so I'm just going to create a quick file just to import all this info. And this is just what I got straight from Etherscan. You go back to app JS, we'll want to import that of course.
00:28:40.710 - 00:29:25.810, Speaker A: So we can call this AbI contract. So let's see. Okay. And for the function name we can take a look at this contract as well. So we should just be able to use get entries. This is just a getter function from the contract and let's try that. So get entries and then let's just remove all of this.
00:29:25.810 - 00:29:55.884, Speaker A: Okay so expecting to see a lot of data. So here we go. So this is what I'm logging, using the contract to log and then you can see all the information that's already posted to the contract. And this is all just again using Wagme hooks. Super easy but yeah, that's all I've got today everyone. So thank you so much for joining and if you guys have any questions, just come find me on the side. I'll be here.
00:29:55.884 - 00:29:57.080, Speaker A: Thanks again, bye.
