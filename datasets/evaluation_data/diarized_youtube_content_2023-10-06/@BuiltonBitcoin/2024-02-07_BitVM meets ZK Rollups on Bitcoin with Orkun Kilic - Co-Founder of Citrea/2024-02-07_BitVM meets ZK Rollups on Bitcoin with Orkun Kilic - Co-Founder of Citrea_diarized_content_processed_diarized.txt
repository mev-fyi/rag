00:00:00.490 - 00:00:02.720, Speaker A: Orkin, how are you today, my man?
00:00:03.250 - 00:00:12.842, Speaker B: I'm doing pretty well and I'm so excited to be here. We have lots of topics to talk. I can't wait to start horribly.
00:00:12.906 - 00:00:38.646, Speaker A: I love it. I am fantastic. Also very excited. You guys have been dropping some mysterious ish alpha on Twitter. Not diluting everything, but dropping some alpha about what you guys have been building. Looks like you might have solved some very big problems around roll ups. The pegging process, utilizing bitvm in some way, which is like what, four months old at this point, maybe less than that.
00:00:38.646 - 00:00:53.066, Speaker A: This is still very new bleeding edge tech, so a lot to cover, that is to say. But I guess broadly, let's just kind of start easy and I'd love to get to know a little bit about your background and kind of how you ended up building on bitcoin.
00:00:53.258 - 00:01:20.530, Speaker B: That will be a good start. So I'm also like CEO of JVA Labs, but I'm an engineer crownsperson. So I worked as developer for years. Initially I did developments on some EVM chains. I was smart contract developer. Then in the meanwhile I was playing around with Utxos and building some mock blockchains with Utxos. Then after some point I got interested more in bitcoin.
00:01:20.530 - 00:02:14.310, Speaker B: And early this year actually as a company, we built ordinal safe, one of the first extension wallets on ordinals. And it was quite fantastic for us because we launched a product in a month and it got lots of users and ordinance was really hype and it was exciting process for us and we dig deeper on tap route and scripts. So in a quick time we got really expertise on the tap root side. And after that point we also previously developed zero knowledge proof systems on EVM chain. For example, we developed proof of innocence, which is a privacy tool on EVM chains. And after that point we knew that, okay, we know ZK valve, we know bitcoin script valve. What if we can combine this knowledge and bring defi on bitcoin? So this is like igniting story for chainware labs and also citra.
00:02:14.970 - 00:02:33.934, Speaker A: Got it. And on that topic, could you place us, when were you building on ETH and then when did you start to transition over? Because it's a trend I've seen some people do. They kind of either left 2017 or they left last bull run and jumped over. So I'm curious, can you place us.
00:02:33.972 - 00:03:20.890, Speaker B: Time wise as a regular job? I think we were on EVM ecosystem in general until two years ago, eth ecosystem much more. But we were also interested in Utxo side, especially playing around Utxo's building interesting scripts and pets. And meanwhile, like I said, we discovered, okay, we were talking about modularity roll ups, and we talked about, okay, there's a Utxo based system. There is no account, no contract once. It's like we can embed data, embed the roll up data for this. We already know, like colored coins and RGB and stuff, but we want to do something more expressible. We started with that idea.
00:03:20.890 - 00:03:44.900, Speaker B: Then Casey invented ordinance, basically. So in scriptures, we knew that it was already possible, but we haven't explored any path before Ord actually came out. And after the ordinance came out, we realized, okay, there's an easy way to do it, and we can use this for defiant stuff. After building ordinance safe, we immediately focused on this, left the research part and actually started building.
00:03:45.750 - 00:03:48.546, Speaker A: Got it perfect.
00:03:48.648 - 00:03:48.914, Speaker B: Then.
00:03:48.952 - 00:04:48.854, Speaker A: I think that's a pretty good segue to start to jump into roll ups broadly, because this is a topic that in Eth, you guys are much further ahead. It seems like when it comes to the tech side, and John light put out a paper maybe a year ago that was pretty well known as far as the bleeding edge of what ropes could look like on bitcoin. But it always felt far away, mainly because the opcode issue of, like, you need to have op stark or something. And so a lot of the conversation was around l two s or around covenants, for example. Like, right now we're talking about CTV and we're talking about sandwiches and stuff, but roll ups are still kind of like further down. Unless you solve the peg and process a different way, it sounds like, or a verification, a different process. So before we jump into the specific how you guys are building it, because people know these terms, roll ups, optimistic, sovereign, but most of us don't really know what that means.
00:04:48.854 - 00:04:55.850, Speaker A: So could you give us a brief overview of kind of like, the landscape of what is a roll up and what does it look like on bitcoin?
00:04:56.430 - 00:05:21.566, Speaker B: Sure. Roll up is actually. I prefer to call them execution shots because eventually roll ups are the only trustless construction of l twos in a universal manner. So we have, like, lightning, and it is a peer to peer. So that it is trustless. You are only trusting yourself. But in universal systems that has global states, for example, that is mostly programmable chains, like think about liquid, think about stakes, think about rootstock.
00:05:21.566 - 00:06:02.886, Speaker B: These are universal systems, and these systems is not trustless. You are moving away from bitcoin, trusting another entity, like stake miners, rootstop signers, or merge miners and stuff. These are not trustless solutions but roll ups. In I think 2018 they emerged as the trustless and universal solutions and it actually stems from one single and most important thing. They use bitcoin block space. They don't create another block space or they are not moving to off chain and do some things there. They move off chain but they only compute off chain then go back to on chain with a proof.
00:06:02.886 - 00:06:41.660, Speaker B: This is either VK proof or fraud proof. And they embed the data on chain so that you can unilaterally exit and use this data to construct the state. Basically roll ups are like only trustless universal tools that can be built and on bitcoin context. So far we couldn't aware of any construction that can be trustless to build on bitcoin. There are sovereign roll ups like you said. They are basically using bitcoin to embed some data and depend on client side validation. Just like RGB and other client side validated protocols like an ordinance also.
00:06:41.660 - 00:07:02.610, Speaker B: But this falls short in something they don't have breach. Native breach to peg in and peg out. BTC sovereign rollups don't have breach. They are just using bitcoin as DA and consensus. Bitcoin doesn't aware of anything happens on the roll up. So you cannot peg in, peg out trustlessly or trust minimize. These were the problems.
00:07:02.610 - 00:07:52.366, Speaker B: And initially once we started citre we were building a sovereign roll up and thinking about solving the peg problem in some other way, which is now abundant but later. 2023 Robin invented BTM. I think this is like most important thing in bitcoin space right now for maybe two or three years, because it basically allows us to build smart contracts in a trust minimized way. I just saw your tweet, like you hate the word trust minimize, but it is not trustless because not every participant, not every bitcoin node verifies the scripts. But if something happens, they are verifying it. So it is not a client side validation or it is not not native. It is validated inside the bitcoin.
00:07:52.366 - 00:08:44.610, Speaker B: If something goes wrong, this is an efficiency problem. BitVM is efficient and make it possible to build trim complete contracts by doing optimistic way in fully pessimistic way, which means every script gets executed on bitcoin, it won't be possible. So bitwm is at that phase. And after that point we realized that okay, we can use Bitvm's properties to make the peg in peg out, which is a settlement process easier. And this is now where we are talking about CK rollups and optimistic rollups thanks to BitVM. If we need to go further, we need to introduce several opcodes to make them fully trustless, which we can still talk about at the end of the recording. But currently BPM provides us a trust minimized way to build these roll ups on bitcoin.
00:08:45.270 - 00:09:31.570, Speaker A: Got it. Okay, we covered a lot that I'm going to try and rehash a little bit of it to make sure that we're going in kind of eyes wide open. So one thing you said is that roll ups, ideally they give you a trustless environment and they batch things. You mentioned this word execution shards. And I think this is something that most people that aren't super technical don't fully grasp. Myself included around. What does execution mean when it comes to global state and blockchains versus storing state of data availability or what is true? So I just want to make sure when it comes to this execution shard piece that you mentioned, is that really important to understand what a roll up is? And if so, can you just double click on a little further to make sure that we rock it properly?
00:09:32.310 - 00:10:03.280, Speaker B: Maybe I can give some examples on bitcoin network and ordinals. So in bitcoin regular payment transactions, both settle on bitcoin, right? All the nodes agree on the same state, so they settle on bitcoin. And all the data is published on bitcoin network. So all the nodes have the same transactional data. So this is also data availability itself on the l one. And also for the execution, all the nodes execute transactions one by one. So they know that these transactions are valid and they execute it themselves.
00:10:03.280 - 00:10:55.594, Speaker B: And think about or not. They use bitcoin as data. Their script starts with op, false, right? It says that don't execute this branch. So the data embedded with or not don't get executed on bitcoin because they are not programs or scripts, they are just bunch of data. So in bitcoin core node, these data is only used for data availability, but the execution happens off chain. You are running an orgnode, which is basically a meta protocol that looks to bitcoin, extracts the data from bitcoin and make it meaningful like concentrates all the bytes and says okay, this is this gPEG, this is this HTML. It settles on its node and also it executes these things, for example, recursive inscriptions.
00:10:55.594 - 00:11:15.566, Speaker B: It recursively executes the scripts off chain. The recursion is not happening on chain. Only data is put on chain. This is like something unique to metaprotocals. They both settle and execute off chain. But the data is held in bitcoin in roll ups. This is also pretty similar in native rollups.
00:11:15.566 - 00:11:47.962, Speaker B: I'm talking about an optimistic roll ups. We are using bitcoin as data availability layer, which means all the data sits on bitcoin network and settlement also happens on bitcoin network. Right now it is true bitvm. And in the future it can be like ops EKP or Ops Stark. Any other opcode that can settle the transaction so all nodes can be aware of. But execution happens after bitcoin doesn't know about these transactions. For example, we are building a Zkem, which is the Ethereum virtual machine implementation running on bitcoin.
00:11:47.962 - 00:12:30.170, Speaker B: But bitcoin doesn't actually run atarium virtual machine. We are just creating a batch of transactions and run them in ZK virtual machine so that we have a ZK proof. We created an execution shard. Actually we sharded execution from bitcoin based layer to some other components, which is citre. And we compress all the transactions in a verifiable way and put the data back into bitcoin so bitcoin don't unload it with all the bunch of execution. We use bitcoin efficiently by just using it for settlement and data available to layer. And we are doing execution on citra.
00:12:30.830 - 00:12:54.500, Speaker A: Got it? Okay. And then just to make sure I kind of understand this, one of the differences with a regular l two side chain is that once you peg out, Bitcoin has no idea what's going on there. And the data availability is also on that side chain. So it's like a fully enclosed system versus roll ups that kind of have this synergy between the base layer and the roll up, right?
00:12:55.110 - 00:13:29.774, Speaker B: Yes. So side chains, like I said once, imagine that you are moving to a side chain. You usually use some kind of pegging process, like multisig, right? You are depositing your BTC to some multisig. Then you go to a side chain and imagine that this side chain is merged mines. So in this side chain, if miners and majority of nodes are like dishonest, they can steal your money. And if the bridge nodes, bridge signers are dishonest, they can steal your money. Or they can just withhold the data from you, just block your IP address so that you cannot access the data.
00:13:29.774 - 00:13:52.354, Speaker B: You cannot get the data anywhere. So that you cannot even request an exit. Even though you request an exit, they can just prevent you from exit. This is the unsecure things about sidechain. But in the roll up case, all the data is also on the bitcoin network. And bitcoin is censorship. Just create a bitcoin core node.
00:13:52.354 - 00:14:17.690, Speaker B: Then you have all the roll up data so that you can use this to exit unitarily in the BitVM. Not unitarily. You need to help from one verifier among all the community. It is like an honest minority function, but in trust scenario, you just need a bitcoin cornote to do all the transactions and exit unilaterally. This is what makes roll up different than psyche, actually. It is all about security and efficiency.
00:14:17.850 - 00:14:54.620, Speaker A: Yes. Okay, that makes sense. So the biggest issue here really is the assurances you have really getting your bitcoin back off that side chain. Because for the most part, we've had proof of burn forever, where you can just send your coins one way, do a bunch of fancy stuff, and it's kind of stuck. But it's having the assurance that whenever you need to, a minimum amount of people as possible. This is like the term trust minimized, which, as I said, the problem is that it means so many things. There's a wide design space of what trust minimized means, but it's a useful word between custodial and trustless, where you can for sure get your coins back.
00:14:54.620 - 00:15:16.174, Speaker A: So that's helpful. I think then we have a pretty good base foundation. I'd love to start to deep dive into what you guys are. I guess this will come out after you guys have officially announced. So what you guys have launched officially? What you guys been cooking up? What is Citria? And then we can kind of dance around different topics within that.
00:15:16.372 - 00:16:11.438, Speaker B: Yes, like Citri is the first roll up on bitcoin that enhances the capabilities of bitcoin block space using zero knowledge technology. Why we are using this term enhances the capabilities of bitcoin block space, because citre is not some off chain solution like side chain. Citre actually works on bitcoin block space and process lots of transactions, maybe like ten times even higher than bitcoin, or 100 times higher than bitcoin, and batch them together and submits them to the bitcoin blockchain again. So everything believes in bitcoin blockchain. And this helps drea to assure that we have bitcoin equivalent security, bitcoin equivalent data availability, and bitcoin equivalent censorship resistance. This is something important that we targeted at the beginning, and this is something why we are building citrea. We believe that bitcoin is the chain that you can get censorship resistance that you can get all the security guarantees.
00:16:11.438 - 00:16:43.266, Speaker B: And if you build something else than citre than Zklo up. Then we just leave these things behind and create a new ecosystem that has own security guarantees. We don't want that. So we are expanding the capabilities of bitcoin block space. You can now do incomplete smart contracts to EVM. You can build anything, you can build a decks, you can build other fungible token standards. You can build non fungible token standards, you can build anything within this evm chart.
00:16:43.266 - 00:16:59.380, Speaker B: But the security is also bitcoin level and the capability throughout is also above the bitcoin level. So we are enhancing all the things that we can do like programmability and true output, but we are keeping security as bitcoin equivalent level.
00:17:00.070 - 00:17:23.340, Speaker A: Yep. Okay, makes sense. And what is the big unlock here? Because I think we've had EVM base chains try something to make bitcoin more extendable like a smart contract platform. And ZK is becoming more mature on ETH. So is bitvm like the piece that was it, the missing piece of the puzzle that unlocked most of this?
00:17:25.230 - 00:17:47.146, Speaker B: I would say it was a team that can both build your own knowledge technology and bitcoin was a missing piece. It was one of the important thing. I need to give a credit to all my teammates there. I think in Turkey it's like 08:00 p.m. Right now and our office is full. My co founders and my teammates are working hard so I need to give them credit. More out exam and start.
00:17:47.146 - 00:18:27.280, Speaker B: But the biggest unlock, like you said, for the peg and pegat process, which is the actual settlement, the biggest unlock is always the bitvm. And on top of that the technology that we are using which is recursive ZK proofs that allows us to build BitVM program in an efficient manner. We are using bitcoin blockspace efficiently and we need to use bitvm efficiently because it is not something perfect. It is pretty good innovation. I took the biggest innovation on bitcoin right now, but it is not perfect. So it has all limitations. And with our technology we are trying to make the process as efficient as possible.
00:18:27.280 - 00:19:09.340, Speaker B: This is the biggest. And going further, the BitVM makes us trust minimized, makes the Kerala apps trust minimize. But in the future we believe that there will be some opcodes that can verify VK pins directly on the bitcoin script. So we will get trustless and unilateral roll ups on bitcoin. This is also not something for only roll ups, but we are talking about vip process for every single opcode, right? You need to do some functionality you need to introduce a vip. But if you have some generic DKP verifier on the bitcoin base layer, you can implement any opcode with ZK circuits. And bitcoin doesn't need to aware of the fact that can be do.
00:19:09.340 - 00:19:23.440, Speaker B: There is a need for these opcode because it is already embedded. Everything is embedded in ZK. The biggest downlock is bitVM, but the target is always have a ZK native bitcoin based.
00:19:24.070 - 00:19:54.060, Speaker A: Yep, makes sense. We're all hoping for that opcode to come sooner than later so we can get that trustless nature. Until then you're saying it's trust minimized. To be fully accurate. What is the trust assumption here then? Like if I'm going to use citria, where what party in this kind of stack am I trusting with my BTC on? I'm guessing it's the peg up process.
00:19:56.750 - 00:20:41.290, Speaker B: There are two components that you need to trust in bitcoin l twos. One is the peg in peg out process, and the other is the nature of the alto. Let's give an example from rootstock, because it's a perfect example to have an understanding on that. You are taking risk of two things in rootstock, right? One is the nine signers on the bitcoin main chain that held all the bitcoin in a multi stick. This is the one security assumption, and the other security assumption is rootstock network is actually secure. They have enough hash power, they have enough honest nodes that can put your money secure, and there is no reorgs through miners and stuff. You are getting two security assumptions on that.
00:20:41.290 - 00:21:28.150, Speaker B: On ZK roll ups, the block producing and node part is trusted thanks to ZK proofs. All these block producing process and transaction process creates a validity proof assertive. The correctness of the process, so that you don't need to trust anyone, any node, any block producer. You just get a mathematical proof and you are verifying it so that this is correct. On that side you are not taking any trust assumption, but on breach side you are taking assumption of BTVN, which is one of them. We call it uns minority assumption. For example, in regular multisig, for example in nine signer, if you have five malicious signer, they can steal the money, right? It is five of nine actually.
00:21:28.150 - 00:22:19.110, Speaker B: But if you have nine verifiers in ViTV, the money can only get stolen if nine of them are dishonest. Also, this is something like much more secure than five of nine. Because if at least one of these persons are honest, then the money is secure. And also you don't have liveness either because of BitVM's reveal nature, you can just do a series of challenge response transactions that reveal the data needed. So if you are correct, you can exit, operator can help you to exit, any party can help you to exit. And if only one of the verifiers are honest, then your money is fully secure. So I can tell this is the most secure alto construction that you can right now do with a universal statement, unlike lightning and client side validated protocols which don't have BTC.
00:22:20.090 - 00:23:06.102, Speaker A: Got it? Okay, now that makes sense. Yeah. And on the ZK proof side, I just want to make sure that everyone understands. And I think I get it, which is that what you mean by ZK proof is that you have. So we know about cryptography, which is like this very advanced but verifiable mathematics, that when you put it through these algorithms or these hashing functions that you get, depending, if the input is the same, the output is the same, and then you can verify this equals this. And as you get more complex with a ZK proof, you can confirm without knowing the parties involved that this happened and it outputted this. And it sounds like with personal verification, like running a light client, you can verify that yourself.
00:23:06.102 - 00:23:33.966, Speaker A: So your computer for example, can verify that state based on the proof that it got. And the honest minority is that as long as you have that one proof, you can challenge all the dishonest actors and it runs through that tree of mathematics, cryptography and gets to, no, you ten people are wrong, because I have this proof here that's mathematical. Is that like a layman's way of putting it?
00:23:34.148 - 00:24:11.498, Speaker B: Yes, definitely. Like you can see the k proofs as a black box and vast setup in gold roll up, we are agreeing on that. Okay, this is a black box and the label of it is a. So if you just verify the proof using this a label, that you will get true or false if the proof is correctly. Like get all these black box circuits inside of the black box that you will get true. If it misses any of the branches on circuit, or just going around the black box and producing a fake proof, then the function has to return false. This is the nature of ZK proofs.
00:24:11.498 - 00:24:56.490, Speaker B: And in BitVM we are embedding this Zk proofs in the Bitvm program. So that what happens is basically operator just provides a ZK proof saying that this proof is the correct proof. And if all the verifiers can agree by just verifying the proof against the label, that they previously agreed on, then everything is good. And if one of them thinks that okay, operator provides me a false proof which returns false in my function, then they can provide the correct proof and slash the operator and replace the operator so that they can help users to exit the system. This is how well this is the proof works in collaboration with PTVR.
00:24:56.830 - 00:25:50.090, Speaker A: Got it. That makes sense. So, on the side of who's verifying these, it seems like up to this point, most of it has been economic based incentives to make these things work. So you have miners who have an incentive to get the fee structure where you have stacks, which is also like a similar, they get a token signers lock up their thing. So most of them have been economic incentives, and that's who you're putting your trust in when it comes to. If we're going to identify who are the verifiers here, and again, honest minority, like, as long as you have one honest person, you're good. But I guess the first question is, how do you become a verifier? What does this process look like? Can we each do it ourselves? Are you staking anything? Help me understand, how are individuals securing this and becoming verifiers?
00:25:51.230 - 00:26:40.038, Speaker B: In the current BTVM construction, the verifier set is static, which means that you cannot just go to the set and edit the set at any time. It is set one time and continue the lifetime for the roll up. And they state some BTC in the BTM program, so that if they challenge something wrong, they get the BTC of operator. And if they just arm the operator by false proofs and then their BTC gets lashed, so they have a minimal economic security. But for example, in stacks model, you need to have STX collateral. The SPTC model, you need to have STX collateral on the stack chain, which always must be bigger than SPTC's dollar value. Because if it goes down, then this is crypto economically not secure.
00:26:40.038 - 00:27:21.434, Speaker B: But in VM, the staking amount is not a function of the bridge amount. It is some static amount that you need to stake, because everything is cryptographically asserted. You don't need to put high collaterals. If you just wrong, your stake is gone. No matter what is the bridge amount. Your wrongness or correctness can be proved in the BCM, so that in the beginning it's a fixed set of verifiers that are like minimal crypto economic buzer, because it doesn't depend on crypto economic security, but it depends on cryptographic security. And in the future, if we have some kind of covenant, which is I'm not into the technical details of all of that.
00:27:21.434 - 00:27:47.318, Speaker B: You can have dynamic set of verifiers, which means if you are not happy with the situation, you can join the BitVM program and challenge the operator so that it's a permission system. And hopefully in the much, much better future, once we have the KP verifiers on the bitcoin base layer, then the process is already just. You don't need to have fraud proofs or I guess proofs to some operator.
00:27:47.514 - 00:28:27.534, Speaker A: I see. That's super interesting. Okay, so as you mentioned, when it's pure economics, you have to have the TVL and the locked economic security are kind of intention. And this could be like a hash rate majority if it's merge mining or this could be, I think with the new SBTC model, it's something like 70%, which is a lot, but still it's based on economics. And as that tension rises, if SBTC gets really popular, then there's more incentive to steal. If you hold enough stacks. What you're saying is that you hold enough to make it painful to cheat or lie, but it's super easy to prove that they were wrong.
00:28:27.534 - 00:28:57.400, Speaker A: So the incentive is so much lower because you could be called out super easy by just putting one person in that stack, putting up a fraud proof. You absolve yourself of your BTC, which is like your collateral. And do you get kicked out from the verifiers at that point? And again, like you say, it's static. So I'm curious, how often are these being spun up and how do new people join if it is static, once it's set at that point in time.
00:28:58.090 - 00:29:40.374, Speaker B: So bitvm is actually, like I said, n of multisig that works. And on smart assumption. So if you need to change the set, if verifiers can agree, they can immediately change the set and set up an EBCM program if everything has a good intention. So you know that. So you can just sign the transaction and make a new committee. But if you believe that there are some shaded things going on, if one arms verifier is present in the signature committee, they can just prevent their signature so that the change wouldn't happen. And I believe our checkpoint is in every six months or so, so that you can change the verifier committee in every six months if needed.
00:29:40.374 - 00:30:00.380, Speaker B: But like you said, automatically they get out of the committee if they do something wrong, because their flesh is gone and they cannot no more be present in the signature thing. And also, they cannot put another fraud proof, or they cannot defend themselves because they are already kicked out if they're doing something wrong.
00:30:01.150 - 00:30:41.994, Speaker A: Got it. Okay. Trying to think, because you mentioned this six month thing before, and this is something. When I was trying, I talked to Paul stor from drive change, and they have this, like, it sounds similar, I'm sure it's very different. But like, this acting process of like three to six months. So when you say six months, do you mean it's happening twice a year, or is it like the checkpoint is six months, but it's happening kind of periodically in a chain, and so you can only backdate to, I guess, what is ultimate finality or challenge six months past, but it's consistently happening. Help me understand that nuance there.
00:30:42.192 - 00:31:15.634, Speaker B: Yeah. Settlements, like the actual verification on BiTVM happens in every six months, but this doesn't mean that withdrawals are happening in every six months. If everything is good, mean everything is optimistic. The operator already front covers the liquidity for withdrawals. Then after six months, it claims all the front covered liquidity from the BitVM program, so that withdrawals are immediate once the proof is finalized on bitcoin. But the claim process by operator happens later. As HCM is one of not trustless.
00:31:15.634 - 00:31:45.982, Speaker B: You always need some party to collaborate. You cannot unilaterally exit without OPZKP, some kind of opcode. This is why you need to front cover. If operator rejects the front cover, these transactions at the end of six months, they got kicked out from the committee, and the honest verifier replaces the operator, so it can help you to exit by front covering. Your liquidity claim. The money six months after that. So six months is the actual settlement time.
00:31:45.982 - 00:32:07.640, Speaker B: This is because of the inefficiency of BTM. You cannot just settle in every single block because it takes too long. If there's a fraud proof and you are moving all the Utxos, it also costs lots of money on BTC. But this is something that can both increase the UX on optimistic case and also protects people in the pessimistic case.
00:32:08.090 - 00:32:27.020, Speaker A: Got it. Okay. And is there any issue with Reorgs here? Obviously, six months sounds like a long time when you first hear it. So is there issues with. Something happens over that time period? That's a big window of reorgang if that was to happen. So what's the mitigation? Or is that an issue?
00:32:27.550 - 00:32:46.000, Speaker B: Yeah, in six months, the reorgs cannot affect the six month period. But once the fraud proof process, the challenge response process, if it starts then yours is an issue. But in the BiTVM, we have enough time span between these challenge responses so that your not issue.
00:32:46.550 - 00:33:04.118, Speaker A: Got it. And then on the challenge side, what does that look like? I've heard it's like, is it sending transactions on bitcoin with some kind of piece of the proof? But it sounds like I've heard that it's pretty inefficient. So I'm just curious about this topic of how does the challenge process work?
00:33:04.284 - 00:33:42.914, Speaker B: Yeah, the BitVM was actually like name of the paradigm, the computing paradigm that tells about this process, but later it renamed us like the actual name of the VM. So Robin and his team is right now building a bit VM, and it works like a generic computer that can run any process up to like 4 billion cycles. And in the worst case, you have 40 bitcoin transactions to prove something is wrong or right. For example, I'm an operator. I put an aggregated DK proof saying that, okay, this was all the aggregated proofs and this is the withdrawals. I did them all. This is the proof of that.
00:33:42.914 - 00:34:07.018, Speaker B: And if you are not agreeing with me, you are like putting a one bitcoin transaction and saying that to me, okay, reveal this template branch and I'm revealing it. Then you are responding. And I'm revealing. You are responding. At the end of the 40 Transaction, the truth is coming up. If I am either true or false, if I'm true, your stake is gone. If I'm false, my stake is gone.
00:34:07.018 - 00:34:19.280, Speaker B: This is basically how it happens. A 40 transaction may look a lot, but it is pretty efficient to make all this process. Trust me. My smart contracts on bitcoin uses 40 transactions. It is good.
00:34:19.730 - 00:34:40.630, Speaker A: Got it. Okay. Yeah. This sounds just the piece between the economic, kind of like Clara put up and the cryptography. It sounds like a really deadly combo to solve a really big pain point. So really excited about that. So we've seen a few people recently try and raise on ZK roll up tech, and they have a token.
00:34:40.630 - 00:35:00.074, Speaker A: So they're raising on that token. It's a gas token. Who you stake it? Who knows? They do fancy stuff. Do you guys have a token? And who gets fees on the roll up? I'm assuming it's not BTC, but yeah. Is there a token? And how does that dance down?
00:35:00.272 - 00:35:20.370, Speaker B: We don't have a token. The BTC is our native token. It is just renamed as like CBTC, Citra, BTC to make the process easier. But we don't have any citra token or sites like there will be lots of scams and hopefully not. But there is no chair token. We are using BTC as native token. This is like all process of BitVM.
00:35:20.370 - 00:35:55.594, Speaker B: I don't like to talk about the other project, but I can go through fee questions. So basically fees go to bitcoin miners. This is the whole point of using bitcoin block space. So we are collecting fees on the roll up on citre. Then we are paying like 99 of percent of the fees to bitcoin miners because we are inscribing a bunch of data to bitcoin network. And also this includes VK proof, some compressed transaction data, some other transaction metadata that we need to put. We are putting all of them to a bitcoin block.
00:35:55.594 - 00:36:49.726, Speaker B: So we are paying lots of fees to bitcoin miners. This is an important point. Thank you for asking that. Also the pain point of the side chain and l two thing, bitcoin, we are pretty close to halving and fee, we believe that needs to go higher, but it also needs to become kind of accessible to everyone. So roll ups is also solving this point because they are paying lots of fees to bitcoin and they are making transactions cheap for users because they are betting all transactions. This is why CTRA also contributes bitcoin's long term health by just paying lots of fees to miners and increasing the hash rate and increasing the security and so on. And on the fee side, like I said, most of the fees obviously go to bitcoin miners because we have to describe the transaction data and we have to pay for that.
00:36:49.726 - 00:37:25.050, Speaker B: And the rest of the transaction data will go to proverbs which produces ZK proof. And it is not an easy job. We are running really huge machines and this goes to that. And at some point the sequence around prover will get multi. So we will have lots of sequencers that work in coordination and we will have prover which is a permissionless that anyone can produce a proof. And after that point, the remaining fees that we collected and discovered to bitcoin, the minus between them will be shared among these sequencers and pros.
00:37:25.470 - 00:38:13.434, Speaker A: Got it? Okay, so the majority goes to miners. A small subset goes to verifiers, which again, as we mentioned, they lock up a small amount because of this kind of like dance of cryptography and economic collateral put up front. And yeah, if there's a bunch of economic activity happening on the roll up. Nice thing about this is because of the way it bundles down, you don't have to send a bunch of transactions like we've seen with BRC 20 mints, where you get like 10,000 mints trying to do some ticker symbol and span the mempool, as people will say, which in aggregate is a lot of fees. But in a roll up, you could do that on the roll up and then it condenses down to one clean fat fee, which makes everything else easier on the l one. So that's really nice to hear.
00:38:13.632 - 00:38:56.738, Speaker B: One example is that, sorry for interrupting. We are using state diffs, the architecture, and it means that we are only writing the storage difference between the previous state and the latest state to bitcoin. So imagine that you have a decentralized exchange and you are swapping USDT to BTC. And if hundred people swaps on the pool, then the data described on bitcoin is just the initial data and the latest data, the intermediate data, does not get worse into bitcoin because it is already proven in the ZK circuits. You don't need to put all the unnecessary data. So this makes the roll ups and much more efficient than BRC twenty s and the other meta protocols that are on bitcoin natively.
00:38:56.914 - 00:39:40.678, Speaker A: Very nice, very nice. Okay, so when it comes to building, this is a big topic because especially when you look at the l two s, the l one has bitcoin script, which is notoriously kind of a pain in the butt to learn. And then the l two s are trying to make it easier. And you have EVM on root stock, and I think simplicity is what they're trying to do on liquid and stacks has clarity. So this is EVM based. So is anybody who's building on solidity can basically just easily port their defi application or whatever over to Citria. And it's roughly a copy and paste with maybe changing some parameters or some network stuff.
00:39:40.678 - 00:39:44.118, Speaker A: What's the developer experience like if you're building on this?
00:39:44.284 - 00:40:38.854, Speaker B: Yeah, the goal for us is make every app a bitcoin app. This is the goal for we want to make bitcoin the foundation for world's finance and we need to have all the financial apps built on bitcoin. And right now we are saying that all the defi activity happening on EVM chains, mainly driven by Ethereum, and we are building EVM equivalent zko in Citrea, so that everyone can copy their apps from Ethereum and move to bitcoin and make it a bitcoin app. It will be like bitcoin equivalent security, but it will be the same developer explain so that you don't need to port stuff. Learn a lin language and stuff. There will be several different parameters like gas limit and stuff, but this doesn't affect the solency or the code that you write, but some deployed parameters. I can say you just need to tweak something, changing the RPC URL and stuff.
00:40:38.854 - 00:41:19.320, Speaker B: But this is not some big deal that you can do by deploying this. You are just copying the code, pasting it, change a parameter and deploying it. This is as easy as possible to make every app a bitcoin app. And the solidity experience is also good. But we built j in a way that we can introduce new virtual machines in the future. The code itself is pretty modular, so we can plug in any vm if it's in K Pro zone. And for example we can port a webassemble vm into the stack and every rust developer in the world start and developer bitcoin application.
00:41:19.320 - 00:41:28.398, Speaker B: This is a future plan, not something prioritized first. But this definitely enables lots of builders to build on bitcoin.
00:41:28.594 - 00:42:02.660, Speaker A: Got it. Very exciting. I'm curious, a lot of my audience is somewhat newer. Some of them want to become developers. I'm curious, in your experience, we're in early 2024 and you have things like evm roll ups coming online. What would you recommend people do right now? Does it help to really learn bitcoin script? If these expansive l two s are coming, would you learn solidity? Like any general advice I'd be curious about?
00:42:03.430 - 00:43:04.722, Speaker B: I would say like right now, bitcoin script has some apps that also like user facing the multistore solutions like MidVM, but most of the applications will be on l two mainly. So if you want to develop some, let's say user facing application, then going with solidity and deploying on j is the best way that you can do. But for example, if you want to work with bitcoin script bitm, you want to do an infrastructure layer for the tools and the other applications. Then bitcoin script is also a good way. I don't want to pull everyone to solidity. Then I want lots of bitcoin script developers, and I also need good script developers to work side by side. But if you want to have some user facing application come build on Citrix because there will be lots of liquidity, there will be lots of developer support so that you can deploy your applications easily and start welcoming users.
00:43:04.722 - 00:43:25.760, Speaker B: But if you want to build some infrastructure, then I think bitcoin script also if you want build something natively on bitcoin. For example, they did some tricks with Opcat, the pepper wizards. They did some cool scripts like covenants and stuff if you'd like it. I fully support learning bitcoin scripts, but most of the user facing things will happen also.
00:43:26.610 - 00:43:41.890, Speaker A: Perfect answer. And ultimately we need 100 x more developers across the board on everything bitcoin because there's just so much to build. So cool. I appreciate that. Well this has been great. We covered an absolute ton. Super excited.
00:43:41.890 - 00:44:04.940, Speaker A: Just the idea of minimal collateral and this cryptography for the peg and verifier process seems like such a big unlock, so they're excited to see that out in the wild I guess. Last two questions. First one, when can we use this? When is this going to launch? Where's the product at currently?
00:44:05.630 - 00:45:00.540, Speaker B: Yeah, so we are recording this pre launch, but hopefully in the February we launch the technical specs so that you can learn all the internals of citre, how it works and stuff. And you can also start learning solidity, start developing applications and hopefully in the app build we will have a public testnet so you can deploy your applications. You see Traya and this is the general flow. Looks like we have lots of upcoming announcements, the partnerships that we already did before launching the product event. So in the Apple we will have a public test that people can deploy, people can use, but right now you can just join the community. We will have a big discord that people talk and ask questions. We will have a developer talkhouse and we will have a documentation section that you can visit anytime and gain up to date information about J awesome.
00:45:01.150 - 00:45:15.620, Speaker A: Sounds good. And I'll have all those links down below as well. I guess last question is, is there anything that I didn't ask? Any closing thoughts or things you want to cover that we didn't cover so far?
00:45:16.550 - 00:46:28.360, Speaker B: I think on the technical side and user flow side we covered a lot of things, but I need to say that we are building Citrix bitcoin equivalent secure and true, incomplete and easy developer UX infrastructure for everyone to build on bitcoin and use bitcoin with this EVM base. With bitcoin security, you can build privacy out trees, you can do private bitcoin swaps, you can do private sense, you can even put a better version of Lightning on Citrea and it will work flawlessly rather than dealing all with on chain stuff on lightning you are just putting on CJ. It has trust minimized BTC naturally coming from Citra and you are using it on your parent solution. I think the future will be on building on citre building on bitcoin equivalent secure and true complete layer that can provide all the things that you need. And if you have some applications or want to deploy fully open and my dms are open and you can reach out to me for every channel. We have a big developer team, we have a big business development team. We can always support you.
00:46:29.550 - 00:46:33.900, Speaker A: Awesome. I think your dms are going to get flooded very soon, so prepare yourself.
00:46:34.510 - 00:46:38.534, Speaker B: No worries. I just love projections and pressure.
00:46:38.662 - 00:46:59.200, Speaker A: Love it, love it. Well, man, Orkin, thank you for doing this. This has been a fascinating conversation. Very excited to jump in the discord and see what's going on in there and try this as it launches. So yeah, excited to try situ and thanks again for coming on the show.
00:46:59.570 - 00:47:07.880, Speaker B: Yeah, thank you for having me. I like asking these key questions that everyone can ask and everyone can understand. Thank you for doing.
00:47:08.250 - 00:47:09.000, Speaker C: Absolutely.
00:47:09.530 - 00:47:13.480, Speaker A: And for everyone. All the links for everything we mentioned will be down below.
00:47:14.090 - 00:47:29.994, Speaker C: But until next time, thank you for listening this far into the episode. If you found it enjoyable, please do like subscribe on whatever platform that you're listening on YouTube does me a huge.
00:47:30.032 - 00:47:31.586, Speaker A: Favor to like and subscribe.
00:47:31.718 - 00:47:53.666, Speaker C: Find me on Twitter at jake blockchain. Show me some love. I reply to every DM and if you are a bitcoin builder that is kind of at this forefront of building new use cases, whether it's l one, lightning stacks, rootstock roll ups, ordinals, BRC 20, I want to talk to you.
00:47:53.768 - 00:47:55.642, Speaker A: So when I'm not doing this podcast.
00:47:55.726 - 00:48:18.870, Speaker C: I am the sourcing partner at the Bitcoin frontier fund, where we invest in bitcoin startups at the earliest stages. Give you access to whatever you need, whether it's legal, product, fundraising, help, as well as capital. So love to talk to you. You can hit me up again. Find me on Twitter at Jake blockchain and shoot me a DM.
00:48:18.950 - 00:48:20.010, Speaker A: I'll read everything.
00:48:20.160 - 00:48:22.670, Speaker C: Love to talk to you guys. All right, peace.
00:48:27.810 - 00:48:30.522, Speaker A: Welcome to built on bitcoin.
00:48:30.666 - 00:48:32.782, Speaker B: I know that things don't always go.
00:48:32.836 - 00:48:38.154, Speaker A: Your way, but I'll be right here waiting, waiting.
00:48:38.202 - 00:48:40.686, Speaker B: Now, I've been trying to figure out a way to make it out, make.
00:48:40.708 - 00:48:44.380, Speaker A: It out because I don't think about everything going wrong. Oh.
