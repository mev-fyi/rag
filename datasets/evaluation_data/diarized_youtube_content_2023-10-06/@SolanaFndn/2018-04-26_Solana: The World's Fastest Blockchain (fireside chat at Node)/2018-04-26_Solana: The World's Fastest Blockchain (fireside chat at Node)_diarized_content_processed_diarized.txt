00:00:01.000 - 00:00:09.950, Speaker A: Anatoly worked on chips at Qualcomm and writing some of the initial kernels for brew, the qualcomm operating system. And you sort of take for granted.
00:00:09.982 - 00:00:12.078, Speaker B: That there's a time clock and there's a time stamp.
00:00:12.206 - 00:00:13.630, Speaker A: Well, what does it mean now to.
00:00:13.702 - 00:00:19.798, Speaker B: Incorporate time as a layer, as, like, a foundational piece? Yeah.
00:00:19.886 - 00:00:23.966, Speaker A: So that's the concept. We're going to have conversation. We'll open it up and then we'll.
00:00:23.990 - 00:00:25.030, Speaker B: Have a DJ afterwards.
00:00:25.142 - 00:00:28.224, Speaker A: Cool, thank you. One more thing about Anatolia here is.
00:00:28.294 - 00:00:37.012, Speaker B: Is a world class underground, underwater, underwater, underground, underwater, underwater.
00:00:37.148 - 00:01:11.684, Speaker A: As deep as it goes in his undertone as well. What's interesting about them is we take time for granted. We take time to take for granted, and they really embrace that and sort of build a highly scalable about 700,000 transactions a second. Hundred times faster than 100,000 times faster than bitcoin. Very fascinating. Excited to be the investor. Hopefully they did my money, but.
00:01:13.784 - 00:01:14.072, Speaker B: That.
00:01:14.088 - 00:01:15.484, Speaker A: Was neither no nor yes.
00:01:21.904 - 00:01:38.354, Speaker B: Sure. So, like. So, like, what's time? Right. Like, time is like, something we can measure, but it's really just, like, numbers that are ticking by. Right. Like, just go back with your background.
00:01:38.394 - 00:01:39.334, Speaker A: How you got here.
00:01:41.994 - 00:02:17.930, Speaker B: Okay, so, like, see, I've been an engineer all my life, most of my career spent at Qualcomm working on, like, embedded software. So, like, if you ever had a flip phone, like, most of those ran brew, it's an os that we built that, like, nobody ever heard of, but it could fit in, like, two megabytes of memory. It was all written in c, and, like, I wrote most of the kernel by the end of it. So, like, if you. If you look at your phone, there's a processor in there, and it's actually, like, about 20 computers shrunk into one die. So, like, it's a bunch of different subsystems. It's not like you're, like regular desktop and Intel CPU.
00:02:17.930 - 00:02:56.686, Speaker B: They, like, take all your audio cards, video cards, and just put them all in a single die. Right? So all these computers, like, there talk to each other and they need to synchronize at a very, very tight, like, space. Like, very, very, like, few milliseconds apart. Yeah, well, yeah, microseconds is like nanoseconds. Like, things get fuzzy even in, like, the. So, like, how we don't do all this is there's like, a clock there that's visible from all the different subsystems. So all of these are running different operating systems.
00:02:56.686 - 00:03:45.590, Speaker B: There's, like, you're not going to believe me, but there's 20 million lines of code for the modem on your cell phone. Like, it's an insane amount of code. It's its own os, and it's running at like a different clock rate than the OS on your, like, hand. Like, that's powering Android, right? Like, so all this stuff synchronizes because there's a hardware clock that everyone can trust. So, like, in a decentralized distributed system like bitcoin, we don't trust anyone's timestamps. When you see like a JPeg image and it says it was taken like two days ago, anyone could fake that, right? Like, so that concept of time is like, it's not trustworthy. So, like, I was like, I was working at Dropbox when I read the iota paper, and I was like, this is supposed to be like blockchain for embedded systems.
00:03:45.590 - 00:04:35.326, Speaker B: I can do better than this. That kind of drove me to build my own thing, and it was inspired by my experiences working in these embedded systems. The fundamental core piece of this technology is if you guys are familiar with what a cryptographic hash function is, it's like a shot to 56 or like write them to or whatever. It's a way to take a bunch of data and condense it to a small set of bits, like about 256 bits. And the nice property about this is that you can't predict what the output is going to be without actually running this function. There's no way to know what the output is going to be based on the data if this function is secure. So if you take this function and you run it over itself over and over and over again.
00:04:35.326 - 00:05:30.588, Speaker B: So you take the output and use it as the next input. This loop can only be done in like a single core, single threaded process. So if you run it a million times, like the, that process of like doing it a million times, like in, that data that it generates is a representation of time passing. Because when you look at the data, you know that somebody actually started it at like the first iteration and ran it a million times to the last one. So if you like, run this thing over and over and you sample it, each sample represents a tick of time passing. And what's cool is then you can take the delta between each sample, like the slice starting and the ending point, and you can verify it in parallel. So now we have this clock that takes real time to generate, but like with a 1080 Ti GPU card, you can take take verify a second and a quarter millisecond.
00:05:30.588 - 00:05:41.064, Speaker B: So it has this nice asymmetric property that, like, there's one generator for the system, but everyone else can quickly verify that this thing is not trying to trick you.
00:05:42.164 - 00:05:43.940, Speaker A: I'm going to ask you a really dumb question.
00:05:44.012 - 00:05:44.624, Speaker B: Sure.
00:05:48.164 - 00:05:50.356, Speaker A: How is it different from proof of work?
00:05:50.540 - 00:06:00.972, Speaker B: Well, proof of work, right? Totally, totally valid question. Like, the cool thing about, like, the bitcoin.
00:06:01.108 - 00:06:05.184, Speaker A: Quick show of hands. How many here know what proof of work.
00:06:08.884 - 00:06:09.624, Speaker B: Is?
00:06:10.124 - 00:06:36.264, Speaker A: Okay, how many of you here know what consensus means? All right, how about start out with what proof of work is? Sure. Let's start with what consensus is, how people agree, or how different participants in a chain agree that we have to write this transaction to the chain. Let's start off from there.
00:06:36.304 - 00:06:56.540, Speaker B: Okay, so proof of work, right? You have this, like, blob of data, and you're trying to find a random number that, like, when you hash this blob of data and this random number, your, like, results hash is take and run a function over it that generates a small set of bits.
00:06:56.652 - 00:06:58.724, Speaker A: So that hash is unique.
00:06:58.844 - 00:06:59.164, Speaker B: Yeah.
00:06:59.204 - 00:07:01.604, Speaker A: And only can be generated with that set of data.
00:07:01.644 - 00:07:02.204, Speaker B: Exactly.
00:07:02.284 - 00:07:07.740, Speaker A: And every time you run that function on that data, you're guaranteed you'll get the hash. That's what a hash.
00:07:07.772 - 00:07:08.052, Speaker B: Yes.
00:07:08.108 - 00:07:11.076, Speaker A: It's like a unique signature. Yeah, yeah.
00:07:11.180 - 00:07:12.204, Speaker B: So bit.
00:07:12.244 - 00:07:21.906, Speaker A: Sorry about 64 bytes of 256 is basically like one long strength. Right.
00:07:22.010 - 00:07:41.982, Speaker B: Okay, so proof of work, like, all the computers in bitcoin, they're running like, a billion different cores that are all trying to find these magic random numbers that the result of a hash has, like, a bunch of starting zeros. And whoever finds this, this magic number gets the bitcoins.
00:07:42.118 - 00:07:44.342, Speaker A: Why do they have to find the magic number?
00:07:44.518 - 00:07:54.382, Speaker B: Well, because when you can prove that you found this magic number, that's like your vote for the. For the secure blockchain branch.
00:07:54.438 - 00:07:57.638, Speaker A: So are you telling me this, all this work you do is just dumb?
00:07:57.806 - 00:08:20.320, Speaker B: It's dumb, yeah, it's dumb. But it, like, it makes sure that nobody's cheating because you have to go by the. By the graphics cars or the silicon and spend the electricity to run it to, like, get this magic number. Otherwise, like, on the Internet, nobody. Like, there's this thing called civil identities, which means that I generated a bunch of fake Reddit accounts and upvoted myself. Right.
00:08:20.352 - 00:08:21.360, Speaker A: Civil is impersonating.
00:08:21.432 - 00:08:23.044, Speaker B: Yeah, yeah, exactly.
00:08:23.624 - 00:08:34.352, Speaker A: So basically, you're doing all this work that doesn't really do anything, actually doesn't do any work, but because you found this magic number, you get to write to the chain.
00:08:34.408 - 00:08:34.952, Speaker B: Yeah.
00:08:35.088 - 00:08:36.124, Speaker A: And that's basically.
00:08:39.264 - 00:08:43.484, Speaker B: Yeah. It's like terawatt like, what, 30 terawatts?
00:08:44.744 - 00:08:52.120, Speaker A: More than a single bitcoin transaction takes 77 kw, which is what it takes to power one average american house for a week.
00:08:52.152 - 00:08:54.204, Speaker B: Yeah, it's an insane amount of energy.
00:08:54.784 - 00:08:56.398, Speaker A: So that's where we are with bitcoin.
00:08:56.456 - 00:09:24.800, Speaker B: Yeah. Proof of work. Right? And the consensus part of it is consensus means we all agree on something. Like, how many times would everyone have to talk to each other in this room to agree that, like, a particular, like, the Trump is an asshole. Yeah, yeah, exactly. Like, we all have to, like, come together and come up with a way to vote and then, like, all vote and then count the votes, and everyone has to trust and verify the votes. It's a pain.
00:09:24.800 - 00:09:37.080, Speaker B: Right? Like, computers have, like, the similar problem of agreeing what everybody else agreed to, because we all have to talk to each other and then confirm that not only do we talk to each other, but that everybody else also talked to each other.
00:09:37.152 - 00:09:41.552, Speaker A: So how does the time, how do the timestamps work? So you can't trust.
00:09:41.688 - 00:09:58.092, Speaker B: Right. But so where time comes in is like. So Google uses the thing called true time. They have these global data centers and they have these atomic clocks that their engineers have all synchronized, and they can all trust these atomic clocks.
00:09:58.188 - 00:09:59.444, Speaker A: So it's an atomic clock.
00:09:59.564 - 00:10:38.690, Speaker B: It's like a clock that is very, very accurate. Like, it's used as a cesium atom that's vibrating, and they measure the vibrations, and the count, like, represents time. Right? Like, cool. That's what I think it is. I don't know for sure. So, like, if you think about it, like, kind of intuitively, like, if we send out a bunch of messages to everybody here and they all arrived out of order, if they all had timestamps you could trust, you can order them the exact same way, and then when you read all of them, you all end up in the same state.
00:10:38.802 - 00:10:42.194, Speaker A: So you're saying you can actually solve consensus by using time?
00:10:42.354 - 00:10:51.456, Speaker B: Yeah, you can make it simpler. It's still complicated, but we can simplify the problem of figuring out when all the, like, what order everything was in.
00:10:51.600 - 00:10:55.084, Speaker A: So that consensus algorithm you came up with is called.
00:10:55.624 - 00:11:09.380, Speaker B: It's so the time property is called proof of history, and the consensus part on top of it is actually tenderman's proof of stake, but modified and simplified. Yeah, yeah.
00:11:09.512 - 00:11:28.756, Speaker A: So proof of stake, new thing we're hearing about that's going to solve all the world's problems and world's hunger. So that's obviously proof of statements. You're not doing random numbers, and you're basically saying that whoever owns a lot of coins in the system gets to work.
00:11:28.860 - 00:11:29.364, Speaker B: Exactly.
00:11:29.404 - 00:11:30.500, Speaker A: Can you talk more about that?
00:11:30.612 - 00:12:17.072, Speaker B: Sure. So, like, instead of buying CPU's and like GPU's and paying for electricity to prove that you have some identity that isn't like fake, you buy tokens like you own some Ethereum and then you lock it up and say that, like, I'm not going to spend this Ethereum and I'm only going to vote for a particular branch of Ethereum and not any other branch. And if somebody proves that I like, sign it signed with these tokens and any other branch of Ethereum, then they can like destroy my tokens. So kind of like equivalent of burning down my virtual, like, GPU's. So I have like incentive to like not do that, right? Like because I want to keep my, my virtual GPU's.
00:12:17.168 - 00:12:29.944, Speaker A: So you're saying that if you, if you cheat, because you own a lot of tokens, right, that's going to result in your ecosystem breaking down, right. So you have no incentive cheat, right.
00:12:29.984 - 00:13:31.224, Speaker B: So why that matters is like it's this thing called forking and branching, like in the bitcoin space that's solved by everybody throwing all their hashing power in one branch, right? And because you can't like fake the hashing power, that branch gets stronger and that's the one that wins. In this like proof of work free world, in this proof of stake world, anyone can like take a computer, even like any old computer, and just generate a new like proof of stake based ledger that looks just as good as any other one that's out there. And like, how do we as people trust that one, right? Like, so the way, the way like they try to make it work. We don't know if this is going to work yet. Like, nobody has like a proof of stake system that's like really as trusted as bitcoin, right? Like you would agree, right? Like, but we think we can get it to work. And the way it's going to work is like, I am just not going to vote on any other branch because I don't want my ethereum tokens to be destroyed on the one that's popular.
00:13:31.384 - 00:13:41.672, Speaker A: So I've been hearing a lot about this, like proof of stake, which is awesome, but I've been hearing a lot about delegated proof of stake. Can you talk more about that?
00:13:41.728 - 00:13:42.324, Speaker B: Sure.
00:13:43.544 - 00:13:44.440, Speaker A: You mentioned gender.
00:13:44.512 - 00:13:44.696, Speaker B: Yeah.
00:13:44.720 - 00:13:45.000, Speaker A: Oh, yeah.
00:13:45.032 - 00:14:04.664, Speaker B: So delegated is simply like, I can assign my token to Greg and he can then use them as his votes in the system. Why I would do that is because he paid for the hardware to process transactions. And I'm just like a token holder. That's like I'm poodling.
00:14:05.444 - 00:14:08.876, Speaker A: So you're saying the people actually vote who the delegates are going to be?
00:14:08.900 - 00:14:09.412, Speaker B: Exactly.
00:14:09.508 - 00:14:19.544, Speaker A: Instead of just holding a lot of tokens, you get the power so you don't have to. Of being able to choose a delegate and the rewards trickle down.
00:14:19.624 - 00:14:20.244, Speaker B: Yeah.
00:14:20.664 - 00:14:23.560, Speaker A: Cool. So you're using delegated proof of stake.
00:14:23.752 - 00:14:30.488, Speaker B: I know there's like, a danger with delegated proof of stake where things get more centralized, kind of like we have with mining pools.
00:14:30.576 - 00:14:32.644, Speaker A: But isn't warding gonna solve the problem?
00:14:33.344 - 00:14:38.360, Speaker B: Maybe, but, like, do you own, like, any stock? Sure. Do you vote?
00:14:38.472 - 00:14:40.888, Speaker A: No, I do get a vote.
00:14:40.976 - 00:14:59.256, Speaker B: Yeah, but you get like a letter saying, hey, there's an election. Like byzantine. Yeah, it's like a. What's it called? It's called the tragedy of commons problem. Like, people just don't give a shit. Right? Like, when things are easy to ignore, you just ignore them. So, like, I don't know.
00:14:59.256 - 00:15:01.400, Speaker B: I'm not sold on delegated proof of stake.
00:15:01.512 - 00:15:04.336, Speaker A: But you are using it as the.
00:15:04.360 - 00:15:12.788, Speaker B: Papers written right now. It's just proof of stake. So you have to buy the hardware and do the work, and then you can vote. Is it a vote or a wager?
00:15:12.876 - 00:15:14.124, Speaker A: Are you wagering your tokens?
00:15:14.164 - 00:15:16.540, Speaker B: It's a vote so you can reuse.
00:15:16.572 - 00:15:21.852, Speaker A: Those so you won't lose tokens. If you vote for the wrong fork, that doesn't end up winning.
00:15:21.908 - 00:15:39.776, Speaker B: If you try to vote for both, you will. If you vote for the wrong one, you kind of have to not vote on the other one until that vote expires. Okay, so there's like. Because we have this proof of history thing. We actually have proof of, like, when you did this. And we can wait until it's, like, no longer valid. Right.
00:15:39.776 - 00:16:06.878, Speaker B: So we can, like, use actual time in the protocol, which, like, if you look at, like, Casper and, like, other proposals, they're. They. They only trust the clock of the current computer. So they all have to, like, kind of play this game of, like, the messages I'm receiving. If they're timestamped within the bounds that I expect them to, then, like, they're okay. If not, like, I drop them. But everybody else might make a different decision.
00:16:06.878 - 00:16:10.014, Speaker B: So it gets really complicated really quick.
00:16:10.134 - 00:16:15.274, Speaker A: So I've been hearing a lot about intel secure features called SGX.
00:16:16.094 - 00:16:31.906, Speaker B: Is that poet SgX? What's sgx? But intel built, like, a thing that's similar, like, conceptually to like what I'm building. They called poet proof of elapsed time. It's a cool name, but it's like.
00:16:31.930 - 00:16:33.250, Speaker A: Basement sca, is it?
00:16:33.282 - 00:16:49.546, Speaker B: Okay, so it's like a core that like is secure and is trusted by intel, but like you can trust it to generate timestamps. If everybody in the network trusts their like secure intel core, then we can do this like reconsistency, ordering of messages pretty fast.
00:16:49.690 - 00:17:02.354, Speaker A: So let's, before we get into. So we talked about proof of work is useless for entire countries.
00:17:05.174 - 00:17:19.514, Speaker B: I'm honestly bullish at proof of work. I can imagine the future when there are solar panels that are powering the heating of my water heater and all those things are doing is hashing. That's the future we could almost imagine. Right, right.
00:17:20.774 - 00:17:23.774, Speaker A: Water heaters, three bitcoins.
00:17:23.894 - 00:17:24.554, Speaker B: Yeah.
00:17:27.934 - 00:17:30.606, Speaker A: Who is the decider of how fast the clock goes?
00:17:30.750 - 00:17:32.870, Speaker B: So it's just moving as fast as silicon.
00:17:32.902 - 00:17:42.966, Speaker A: Just repeat the questions, make sure people can hear the question. Yeah, people can hear the questions, yeah. So like, who decides how fast the clock moves? Like, if you have two different computers, have different gpu's.
00:17:43.150 - 00:18:21.834, Speaker B: So that's a good question. So basically the clock moves as fast as the silicon allows and you would use the fastest or near fastest available clock. And if there's delta, like between how fast it can move, it's not a security vulnerability, it just allows you to maybe dilate time a little bit. But as long as you. So like your normal intel cpu core, like the modern ones, do like a shout to 56 round, four rounds in eleven cycles. These are like very exact terms because. Yeah, I know, because I would know this common knowledge.
00:18:21.834 - 00:18:34.294, Speaker B: So if you try to like, like the most, like a single custom ASIC can do one round in one cycle, and that sounds faster, but those things are clocked four times slower.
00:18:34.414 - 00:18:35.774, Speaker A: It's called overclocking.
00:18:35.934 - 00:19:02.314, Speaker B: Right. You could try to overclock it and you could try to cool it and you can kind of get a little faster, but you're never. All those features are available to everyone else in the network. The network itself, which gets rewarded by the fastest clock, will always have one that's as fast as we need it to be. I mean, I will ensure it. I'll have like a nitrogen cool cpu to make sure we can provide the fastest proof of history.
00:19:07.254 - 00:19:08.914, Speaker A: We have a lot of dilation now.
00:19:09.264 - 00:19:55.414, Speaker B: We only need a single clock for the entire world, right? What's really kind of like, in my mind, like the coolest thing about this, you have like a single cpu core in the world, that's, like, doing this hashing thing, and it can take data and insert it into this ledger, right? And this ledger is now proof of time passing. 1000 years from now, we're gonna have a data structure that represents, like, every event in the world that happened at a millisecond resolution. So, like, we have, like, absolute objective history. Like, you're not gonna, like, erase, like, trotsky out of the photos, right? Like, but those, like, all those events happen, like, and nobody can, like, modify it. And that is, like, a. In my mind, like, mind bendingly cool. Like, it's.
00:19:55.414 - 00:20:02.650, Speaker B: It's like something that. I don't know how it's gonna impact the world, but I feel like it actually is. But since time is relative and when.
00:20:02.682 - 00:20:12.322, Speaker A: Elon launches, the cloud space isn't a thousand years. Isn't it? Interplanetary managers. The blockchain remains interplanetary.
00:20:12.378 - 00:20:28.234, Speaker B: Yeah, we can run. We can run a clock on Mars and run here. And the 24 minutes that it takes to synchronize between the two, we can actually trust the events that happen on Mars because it's got an answer for this. Four to 24, depending on. On what side? On the.
00:20:29.494 - 00:20:35.814, Speaker A: Well, so, pretty sure I have lots of questions. Yeah, talk a little about these, like.
00:20:35.854 - 00:21:02.670, Speaker B: Real world business applications, like finance, travel, faster blockchain. That's. That's, like, what I'm building, right? A really, really fast blockchain. Why that matters? It's because, like, cryptokitties brought down ethereum. Like, we're building, like, this, like, the ideal Internet. What I remember in high school, like, thinking the Internet was gonna be. Was, like, the cyberpunk thing where nobody owns it and, like, stuff just runs on it, right? Like, that's what blockchain is to me.
00:21:02.670 - 00:21:15.358, Speaker B: It's a. It's a, like, a magical computer that, like, cannot be destroyed, that just runs applications and, like, without, like, aws or, like, Google or anybody else that can, like, really shut things down.
00:21:15.446 - 00:21:17.394, Speaker A: Yeah, I'm a cat, right?
00:21:18.174 - 00:21:30.484, Speaker B: So we can make this thing fast. We can, like, enable, like, the next googles like, that are not, like, owned by Google or Amazon. Like that. That's, like, the cool, awesome thing.
00:21:30.984 - 00:21:43.080, Speaker A: So one of the way I understood is one of the biggest issues with you could faster blockchain, faster network, but more people use it, the more it gets clogged up. How do you solve that?
00:21:43.272 - 00:21:48.172, Speaker B: Well, we can do a hundred thousand times more transactions right now.
00:21:48.188 - 00:21:54.724, Speaker A: I understand that, but let's say everybody ever does anything, blockchain gets on your protocol. That's going to slow it down.
00:21:54.764 - 00:21:54.940, Speaker B: Right.
00:21:54.972 - 00:21:56.716, Speaker A: With that much traffic there, then we.
00:21:56.740 - 00:22:20.302, Speaker B: Move to ten gigabit network. Okay. I mean, like, if everyone in the world did three transactions per day, that would be about 350,000 transactions per second. So with this design, we could cover everybody in the world doing six transactions per day for payments. Huh.
00:22:20.398 - 00:22:22.154, Speaker A: Almost 7 billion people.
00:22:22.534 - 00:22:23.394, Speaker B: Okay.
00:22:24.734 - 00:22:27.950, Speaker A: What stage is this project at, at the moment? Like, how far along are we?
00:22:28.022 - 00:22:37.482, Speaker B: Like, white papers out? There's like a GitHub with a bunch of Cuda code and rust and we're like, getting really close to a very v zero testnet.
00:22:37.598 - 00:22:40.426, Speaker A: Yeah. And they're raising money.
00:22:40.570 - 00:22:45.534, Speaker B: Yeah. Greg's first in.
00:22:46.714 - 00:22:49.378, Speaker A: Sure. How do you account?
00:22:49.426 - 00:22:55.210, Speaker B: For what? For byzantine faults in the system. Like in the network? Yeah.
00:22:55.322 - 00:22:56.442, Speaker A: Just repeat the question for me.
00:22:56.498 - 00:23:05.094, Speaker B: How do you account for byzantine fault? So what's a byzantine fault? Like, byzantine in distributed systems means it's really fucked up.
00:23:06.514 - 00:23:08.186, Speaker A: Let's talk about byzantine generals problem.
00:23:08.250 - 00:23:39.328, Speaker B: Okay. Oh, so Byzantine's general is like, you have two generals and they're trying to decide when to attack. And when they send a message, they want to attack at the same time because that guarantees victory. And they send a messenger from one side, one camp to the other one that says, okay, we'll all attack at dawn. And the other guy's supposed to send a response, but the people that are defending it, that keep killing the messenger. So you never know whether you send the messenger and the person received the order or you never. Or like, you just missed the response.
00:23:39.328 - 00:24:01.140, Speaker B: Right. So that's the Byzantines general problem. There's no way to solve it. There's no solution. The only solutions, the practical world is with timeout. So you say, I'll send you the messenger, and if I don't receive a time like the messenger within like two days or something like, like that, then I assume like that you didn't receive the data.
00:24:01.212 - 00:24:11.764, Speaker A: That's called byzantine agreement. You pre agree on an action. Basically, in case of fault, you execute the action that you agree upon for the byzantine agreement.
00:24:11.884 - 00:24:50.268, Speaker B: So, yeah, so the byzantine system is when you have a partition and or malicious actors in the system and they are trying to, like, break it. So I guess to answer your question, how do we solve this if there is more than a third of the network is byzantine. Right. That's in, like proof of stake system. That's a denial of service attack because you can no longer reach consensus. You need two thirds of the votes. In this particular approach, we can actually censor the byzantine actors to prevent them from voting or from stopping the vote.
00:24:50.268 - 00:25:26.424, Speaker B: That means that we're in a network that doesn't have full voting power. Right. It's less than two thirds. But because we have true sense of time, as time passes, we can objectively expire the byzantine votes like their ability to vote. So in a network that has more than the majority have like more than half of the shares, those like that expiration will take like a short amount of time. And if you're like a single node, that would take a very long amount of time. And that delta is what gives, like, real humans real time to figure out which network is like the one I'm going to spend money on.
00:25:26.424 - 00:25:28.476, Speaker B: Does that answer your question?
00:25:28.580 - 00:25:31.584, Speaker A: But you don't really know who the malicious nodes are.
00:25:32.244 - 00:25:46.034, Speaker B: You do because they're not voting, right. It doesn't matter whether they're malicious or they're just like unavailable because of like Yellowstone blow. So from the sense of the protocol, we don't care. Right? Like.
00:25:47.854 - 00:25:49.630, Speaker A: So if you're like voting, like different.
00:25:49.702 - 00:25:50.934, Speaker B: So they could be sending it.
00:25:50.974 - 00:25:54.118, Speaker A: Sending different votes to different actors. That's not a presentation problem.
00:25:54.246 - 00:26:03.542, Speaker B: Yeah, that's, that's just a fork, right? That's a fork. So if they fork on two chains and there's proof of them forking on two chains, they get slashed and there's.
00:26:03.558 - 00:26:14.530, Speaker A: No incentive for them to work unless you have decided not a fork. So that's good. How do you differentiate between a fork and network? Well, repeat the question.
00:26:14.602 - 00:27:08.690, Speaker B: Yeah. How do you differentiate between a fork and a network split? So in bitcoin you don't like the, like, everything is effectively like almost a fork. And it's just whoever throws the most hashing power behind the fork, that's the winning fork. Right? So, like, in this system, anyone can like, oh, there's like a thing called a long range attack where I, like, I like tell people, like, hey, after you spend all your money, send me your private keys and they'll send you a dollar, right? And I collect everyone's private keys, and then I go back in time and take the ledger and then create a fake branch where I have all the voting power, right. That's like, that's called a long range attack. So an interesting defense because, because we have this proof of history thing is that after you do that, you're starting back in time. The real ledger is like a month ahead or however long ahead.
00:27:08.690 - 00:27:24.558, Speaker B: So now you have to generate enough hashes to catch up to it. And if we have the fastest clock, you're never going to be able to do that. If your clock is slightly faster, it will take you a really long time to do that. And then that fork is obviously bullshit because no one has seen any of those transactions.
00:27:24.746 - 00:27:27.234, Speaker A: So what if the minority fork has a faster clock?
00:27:28.894 - 00:28:13.114, Speaker B: If the minority. If the minority fork is a fat. So the question was, what if the minority fork has a faster clock? In this particular design, we deal with this by having a very different expiration date for anyone that has over half a voting shares versus less than half. So if you have, like, 50% minus one, it'll take you days to recover versus 50% plus one, we can recover in, like, hours. So that difference is, like, what gives us humans time to figure out what system is, like, the real one. And it doesn't matter, like, which fork gets selected, ultimately, yeah. As long as some fork gets picked and all the data in there is not bullshit.
00:28:13.114 - 00:28:14.450, Speaker B: Right? Like, it's valid.
00:28:14.562 - 00:28:19.862, Speaker A: Does that mean if I have a really fast complete, I can make a fork of just minimal faster? Well, are you having a voting power?
00:28:19.958 - 00:28:27.974, Speaker B: Yeah, you have to collect enough voting power, and you have to have a faster computer than a network that is working to build a faster computer.
00:28:28.054 - 00:28:33.434, Speaker A: And if you have enough. Yeah.
00:28:34.214 - 00:28:35.914, Speaker B: That's a very chill dog.
00:28:36.654 - 00:28:38.634, Speaker A: No, no, not a chill dog.
00:28:39.014 - 00:28:44.534, Speaker B: I love Steve, but not a chill dog. I have a Jack Russell that would have, like, bitten three people in here.
00:28:46.234 - 00:28:47.534, Speaker A: What are the first.
00:28:50.434 - 00:29:31.332, Speaker B: Like, big, real applications for this that are newly enabled by this platform? What I feel like sucks in the crypto space right now is a truly decentralized exchange. That is awesome. Like, if you use d three, delta or xerox, they're slow, they're super complicated, and, like. Like, I don't know if you guys know how an exchange works, but I, like, I want to buy some ethereum. I place an order, and Greg wants to sell some ethereum, and he places an order to sell in a decentralized exchange right now. Like, a. They use these things called relayers, or makers, which are just kind of centralized systems running randomly in the world.
00:29:31.332 - 00:29:50.244, Speaker B: And if they see a profitable order, they can just insert their own. And it's called queue jumping and front running. Like, that's something that, like, books have been written about Wall street, like, called Flash boys. Like, people doing this kind of shit. So this happens right now in, like, the crypto space. There's really.
00:29:52.064 - 00:29:55.000, Speaker A: Only exchange because this happened.
00:29:55.112 - 00:30:18.394, Speaker B: The reason for this is because ethereum is so slow. Like, you can't just, like, throw a bunch of orders on there. So with our blockchain 700,000 transactions per second. Nasdaq does 500,000 messages per second. So we're at the level of Nasdaq. You can throw all the transactions, all the orders, all the messages directly onto the chain. That means all the order book is part of the ledger state.
00:30:18.394 - 00:31:07.410, Speaker B: That means you can't do front running or cue jumping. So, like, we actually get, like, we're as good as Nasdaq, but totally decentralized. And, like, there's this thing that's really cool called the cross chain atomic swap. Imagine, like I said, greg, some bitcoin, and on the bitcoin blockchain, and on the loom blockchain, he creates a synthetic bitcoin. And this is tied in the smart contract with a timeout. And while this thing, this contract exists, I can trade these synthetic bitcoins at, like, a high frequency. I get some synthetic ether, and then I go talk to the counterparty that's holding this synthetic ether smart contract, and he gets to unlock his margin, his collateral, and I get my ether in the ether chain.
00:31:07.482 - 00:31:14.794, Speaker A: You're talking about every follow that. Yeah, you're talking about using one token to get another token without going.
00:31:14.914 - 00:31:46.864, Speaker B: Right. So the answer to the question was, the first application might be dex decentralized exchange. Yeah, that's, like, what we're, that's what I want to target and, like, make as good and as fast as possible. What do you think about these new relayers? I mean, like, rated relay is really high quality and great. Like, I mean, I trust them, but that's, again, it's a trust based system versus a decentralized one. I think that everybody wants a decentralized, trustless system. And, like, my ideal world, I go talk to the, and they're like, sure, we'll use them.
00:31:46.864 - 00:32:09.464, Speaker B: What do they care? They're providing, like, they're doing all the hard work of, like, the user interfaces, bringing in people, like, to actually trade and all this other stuff. I'm an operating systems person, so, like, hey, well, we're the radar team. We'll use loom. Good answer.
00:32:11.354 - 00:32:18.306, Speaker A: I'm really excited about loom. I mean, I think they've solved a lot of fundamental scalability and interoperability problems. Where's the name come from?
00:32:18.490 - 00:32:41.034, Speaker B: Uh, like, so there's a, the first computers were like, jacquard looms. They're actually used punch cards. Why? We have an 80 character, limited terminals comes from the 80 character limit in punch cards. Like, I think they were actually 40 characters, and then they doubled in size, but use the same width. So, like, when. When people are building the first computers, they're like, oh, this thing seems like it'll work. Let's use that.
00:32:41.034 - 00:32:43.814, Speaker B: It's like a weird artifact of time. Right? Like.
00:32:46.114 - 00:32:48.134, Speaker A: Are there any transaction costs?
00:32:48.514 - 00:33:14.480, Speaker B: Yeah, there's message fees. Like, just to. Otherwise you get spam problems. Like, those are hard to deal with. Then you have to use proof of work to, like, spam filtering sucks. But, like, my estimates of, like, the expensive of, like, message would be ten to the minus $6. So it should be pretty cheap at, like, full scale.
00:33:14.480 - 00:33:23.664, Speaker B: Right? Any questions? Cool.
00:33:23.824 - 00:33:25.564, Speaker A: Where do I learn more about loom?
00:33:26.424 - 00:33:35.104, Speaker B: Yeah. Loomprotocol.com. So it's a website. There's a telegram channel. It's run by the KGB that, like, we cares.
00:33:37.164 - 00:33:38.260, Speaker A: And you grew up where?
00:33:38.372 - 00:33:43.604, Speaker B: In the Soviet Union? In the Soviet Ukraine, which is not.
00:33:43.644 - 00:33:46.144, Speaker A: Why is there a high density of blockchain development?
00:33:48.884 - 00:34:00.664, Speaker B: I don't know. Yeah. Like, when I left, it just, like, stopped being the Soviet Union. So, like, my memories of it are, like, Red army parades with, like, rocket ships. Like that. That's what I remember.
00:34:02.064 - 00:34:11.924, Speaker A: That's what we have on the stage. Great. I'm really excited. I'm actually very excited.
00:34:12.704 - 00:34:13.984, Speaker B: So I'm really excited.
00:34:14.024 - 00:34:18.792, Speaker A: You guys should check out the white paper. You should go to a rebranding exercise.
00:34:18.848 - 00:34:19.844, Speaker B: Yeah, totally.
00:34:20.664 - 00:34:31.022, Speaker A: White paper is phenomenal. Just opens up a whole different way of how you think blockchain, how you think time, and we can post it.
00:34:31.038 - 00:34:31.758, Speaker B: To the node page.
00:34:31.806 - 00:34:32.230, Speaker A: So, people.
00:34:32.302 - 00:34:42.230, Speaker B: Oh, awesome. Yeah, that would be super cool. Definitely. Like, any feedback on, like, readability questions? Like, all that is super appreciated. I'm an engineer, not, like, a writer.
00:34:42.302 - 00:34:46.582, Speaker A: So, like, it's easy to put in math, but it's very hard English.
00:34:46.638 - 00:34:53.014, Speaker B: Yeah, it's totally stunned. Stuff is hard to communicate. Cool. Thank you so much. Thank you.
