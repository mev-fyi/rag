00:00:00.320 - 00:00:41.794, Speaker A: Okay, welcome, everyone, to the Solana validator education workshop on stake weighted QoS agenda. Today we're going to talk about what stake weighted QoS is and how operators can take advantage of it. So, a little background. Solana introduced QUIC in 2003. If you're not familiar, QUIC is a transport layer protocol designed by Google. Essentially, the idea was to get the speed of UDP with some of the benefits of TCP. The reason that Solana chose to implement quick over UDP in the past was that we were getting lots and lots of spam from different network events.
00:00:41.794 - 00:01:14.634, Speaker A: And the quick handshake essentially makes it more difficult to spam. So the original intent was spam reduction. A feature that came out of that is this idea of stake weighted QoS. So connections to the leader are now quick connections. There are 500 connections that are open to anybody to make a handshake with. So any RPC or anyone out there in the world can connect to one of those 500 connections. But there's also 2000 connections that are stake weighted.
00:01:14.634 - 00:02:08.724, Speaker A: And a connection must be made by a validator who has stake. It can't be made just by any RPC or anyone making a connection to that machine. And a validator gets a percentage of those connections proportional to their stake. So if I'm a validator that has, let's say, 20% of stake on the network, then I should get about 20% of those connections proportionally. Analogy, which was in the stake weighted QoS docs, which I'll share, is that you could think of stake weighted Qos as kind of a highway analogy, right? The connections are highways and the transactions are cars. Stakewood Qos is like a toll road. It's essentially like a priority access to less congested roads.
00:02:08.724 - 00:02:58.752, Speaker A: And the more proportional stake you have, the more lanes you have on this toll road. So, yeah, I think that might be a good way to frame it. Right. These priority lanes, which aren't accessible to everyone, give staked validators more throughput, more, more cars, reliably get through those lanes. One thing to call out is that stakewaited QoS and priority fees are two entirely separate concepts. So stakeway to QoS is about making the connection to the leader. Priority fees are, once that transaction gets to the leader and is seen by the banking stage, the scheduler is able to make decisions based on that priority fee.
00:02:58.752 - 00:03:21.864, Speaker A: But the priority fee does not improve the amount of connections you get. And stake weighted Qos does not necessarily improve inclusion. It's two separate paths to get to the ultimate block inclusion, or I shouldn't say two separate paths. I would say one path and another to block inclusion. Yeah, Santatsu, go ahead.
00:03:22.564 - 00:03:52.980, Speaker B: Yeah, just before you move past this particular slide or the previous slide. So if it's 2000 dedicated to validators and it's by stake weight, does that. I did the math. Now that means that I think if you have less than 192,000 stake, you can't get one because you have, your fraction of stake is less than one 2000 of the overall stake. Is that true or is there some way in which low stake validators can still get those state connections? That part maybe. You don't know. I don't.
00:03:53.142 - 00:04:28.284, Speaker A: I don't know for sure. I imagine there's some randomness in there as well, so that staked connections can be acquired by lower stake nodes. But that's essentially the design goal of stake weighted Qos, is that the more stake you have, the more trust you have on the network and the more access you get to send transactions. Because the idea is, if you're a validator with very low amount of stake, the transactions that you're sending may be spam. Right. Because it's easier to acquire that stake than it's say you have a million sold to your validator.
00:04:29.424 - 00:04:51.344, Speaker B: Yeah, but just the 2000 sort of establishes a minimum unit of stake that you'd have to have, I guess, to even get one full connection. So, yeah, I don't know if anybody knows the answer to this question, but is it really the case that if you have less than 192,000 stake right now, you can't get one of those state connections? I'd be curious if anyone knows.
00:04:55.044 - 00:05:31.524, Speaker A: Yeah, I'm not positive on that. If anyone else here knows. I don't know if I think Lucas might have dropped off. Yeah, I'll find out. I don't know the exact answer to that, but my sense is the answer is yes, but I'm not positive I'll verify. All right, moving on. So the main idea here is that in order for stake weighted Qos to work, it's a some sort of agreement between the staked node and the RPC operator.
00:05:31.524 - 00:06:26.446, Speaker A: Ultimately, the staked node has access to these connections, these sort of higher priority connections, and the RPC operators are the ones that have access to transactions that end users or whoever wants to send to the leader. In some cases, these stake validators and these RPC operators may be the same entity. In that case, no sort of formal agreement is necessary. But in some cases, or maybe in many cases, these stake validators and RPC operators are separate entities. However you do it, staked validators and RPC operators need to come to an agreement on how much of their connection they want to share and what that arrangement is. And then once that's in place, the next step is setting up that agreement. So I'm going to go into the setup.
00:06:26.446 - 00:07:28.994, Speaker A: I don't have much more detail on the sort of constructs of the agreement that you have with operators, or operators would have with stake validators. So the general idea is that RPC operators, once they're given access, they essentially will take advantage of this. Validators staked connections using this RPC send transaction TPU peer flag, and then that connection, or, sorry, the transactions that are sent by that RPC node gets sent to that validator, which then forwards the transaction to the leader using the stake connection. And it might be a little more clear once I get into these two flags. So from the stake node side, the operator is going to provide access to these stake connections using a flag called stake nodes overrides. Essentially what that does is specify a yaml file that looks like this. The capitalization is incorrect.
00:07:28.994 - 00:08:02.780, Speaker A: That was a. Well, ignore the capital S. The doc should be clear. But you provide a Yaml file that has this state map id, and then in this id there's a list of pub keys. The pub key that you specify here is the pub key of the RPC that you want to give access to your state connections. And the value here is an amount in Lan ports that you want to assign to that RPC as sort of virtual stake. There's a question of when this landed.
00:08:02.780 - 00:08:44.574, Speaker A: So this has actually been in the validator for quite a bit of time. The thing that landed in 100, 1728, I'll talk about in the next slide. But this is supported in all of 117. Yeah. So back to the amount of soul here. You're essentially specifying how much of your state connections you want to give to that RPC operator. So if you specify a million Sol, you're saying that a million divided by the total active stake is how much I want to give to that one staked operator.
00:08:44.574 - 00:09:12.284, Speaker A: If you specify how much the total active Sol is, then you're saying that that RPC operator gets all of my state connections. So you have to be. Yeah, you have to make sure that you're giving the appropriate amount. The numbers here are in land ports. I believe I'll have to verify that the help output says soul, but I believe they're actually lamports.
00:09:12.584 - 00:09:52.604, Speaker B: Yes, that confused me, but the reason I asked that goes back to my previous question. So I was playing around with this and I set 50, I think I set like 50 million sol as like my stake note override for my secondary RPC talking to my validator. But if it's true that we only get if those 2000 connections are divvied up by the stake weight, then you could totally, by giving too much of a number, basically mean that no one can talk to you except that one you've specified. Does that make sense? Like if I said this server has 800 billion Solana as its, you know, as a stake node override, then it would get all 2000, wouldn't it?
00:09:52.764 - 00:09:53.740, Speaker A: I believe so, yeah.
00:09:53.772 - 00:10:13.934, Speaker B: You have to be careful. Like I realize now I wasn't as careful as I should have been, if that's really what I did. That's why I was asking if his number is you put up here, is that, is that supposed to be like, what would you, what would you say is a good example number to use like 80,000 sol? Or would you really put something like 80 million sol if you really wanted to give someone priority? And if you did, then wouldn't that give them all the priority?
00:10:14.474 - 00:10:30.774, Speaker A: I'll be honest, I don't know what this converts to in Seoul. So this may be not the best example. Let's see here. Three or. I think that's a billion there. 80 million. Yeah, it looks like I gave it too much.
00:10:30.774 - 00:11:12.204, Speaker A: I think the appropriate amount depends on your use case and like the agreement that you have, right? If you say that you are going to give, let's say 50% of all active Sol to that RPC operator, then you're saying 50% of your connections belong to that RPC operator and then they can use them as they see fit. Maybe that makes sense for your use case. Maybe it does not. You always have the extra 20%. That is essentially the public connections, right? So 80% of connections are used for stake rated QoS. 20% are used for anyone to connect to. So you'll still have ways to connect to your validator.
00:11:12.204 - 00:11:39.984, Speaker A: But you, it's probably a number that you want to play with and decide like kind of what makes sense to you. To answer the question more directly. I don't know what the right answer is yet. 50% of connections could be too large. It could be just right. I don't know for sure. There's a question about if it's the max amount of sole you have staked in land ports.
00:11:39.984 - 00:12:23.804, Speaker A: The way I understand it is not the max amount you have staked. You are assigning a stake weight to a validator as if it were a stake node. So you're giving connections to that stake validator as if it were a large node on the network that has that much stake. That makes sense for feedback there. Okay. Yeah, yeah. So the question was just to rephrase here.
00:12:23.804 - 00:13:22.834, Speaker A: Let's say you have a million sol, are you specifying the amount of your own stake that you want to give? And the way I understand is, no, you're not specifying the amount of your stake. You're specifying the amount that that RPC node now has, according to your view. So you're saying, in my local view, this RPC is acting as if it has this much stake on the network and therefore gets this many connections when it talks to my validator. Now, you could potentially give them too many connections like Zantetsu mentioned. I think that's something you have to experiment with a bit and see kind of if it impacts your, your ability to land external transactions. Okay, a couple more notes here. All of this currently does not quite work with Jito Solana.
00:13:22.834 - 00:14:14.654, Speaker A: So if you want to run this with Jito Salana, you have to specify the stake nodes override flag, which does not currently exist in the relayer. And all of these things that you're specifying are for the relayer, because you're specifying the amount of stake that your TPU gets are the amount of connections that your TPU gets. So the relayer, in the case of Judo Solana, is taking over your TPU. This flag is necessary, then, for the relayer in order to work for this ecosystem. So a couple things. To get this stake weighted QoS to work, you must run your own relayer, and you have to wait for this stake nodes override flag to land. If you saw earlier or remember earlier, Lucas mentioned that they're working on this, they should have it done pretty quickly.
00:14:14.654 - 00:14:47.384, Speaker A: But again, this does not currently exist in Judo Solana. There's a comment about it would be easier to specify the percentage per node as stake. I agree. I think that override right now is just kind of what worked for implementation reasons. But, yeah, it could be improved. And Zenhatsu mentioned you don't need to restart in order to change these values. Maybe that was the design goal.
00:14:47.384 - 00:14:53.712, Speaker A: With the separate YaML file, you can change the YAML and still have your validator running.
00:14:53.848 - 00:15:14.820, Speaker B: Yeah, you change the YAMl file, and then you reissue a Solana validator command to tell it. Basically, you're telling it, reload the file so you can update it in the runtime. That doesn't mean that it completely solves the problem because having to track stake weights and adjust and then have a schedule for doing that seems like a lot of complexity, but at least you can do it. You don't have to restart your validator.
00:15:14.972 - 00:15:39.584, Speaker A: Yeah. All right, moving to the RPC side. Oh, question about the relayer. So there's a question if having your own relay means a separate machine. No. So just like we mentioned in the previous video, you can run the relayer on the same machine as your stake node. That's currently what Geeto is recommending.
00:15:39.584 - 00:16:18.304, Speaker A: So I think it'd be ideal to have everything running in the same box. Okay, so from the RPC operator side, first of all, you want an RPC node that has no stake. You want to specify the RPC send transaction TPu peer flag. This flag is new as of 1728. So if you're running an older version of an RPC, you need to upgrade to get the flag. You're specifying the IP and port of the TPU, of the stake validator. So this might be a bit confusing.
00:16:18.304 - 00:16:46.076, Speaker A: The TPU port address is the. Sorry, I forget the name of the. Let me look up the docs real quick. Right. The dynamic port range. So the dynamic port range, let's say it starts at 8000 on your box. The TPU port address is 8000 plus three.
00:16:46.076 - 00:17:33.144, Speaker A: So 8003 again, in the case of geo Salana traffic will go to the relayer run by the operator. So if you are trying to set this up with someone running geos that's using the public relayer, this just does not work. The public relayer is not going to give you priority access. So again, if you're working with a stake node, make sure they're running their own, their own relayer and make sure they get the new flag when it lands the stake nodes. Override flag, go away. Okay, there we go. Um, yeah, santas, go ahead.
00:17:33.444 - 00:17:44.420, Speaker B: Yeah, I'm sorry, I'm, I'm kind of confused. The relayer is the one that receives the incoming transactions and it uses quic and it advertise it's the one that handles the TPU.
00:17:44.532 - 00:17:44.956, Speaker A: Yep.
00:17:45.020 - 00:18:06.870, Speaker B: You know why my validator also logs that it's getting and making all these? Well, maybe it's logging only that it's making quick outbound connections. I guess maybe I'm misremembering, but I guess I thought my validator was also getting tons of quick connections, but maybe I'm misremembering and it's really the. Because I would expect the relayer to be the one logging about incoming quick connections. If that's. If that's what it's doing, yeah.
00:18:06.902 - 00:18:08.950, Speaker A: You're also forwarding transactions. Right.
00:18:09.062 - 00:18:19.090, Speaker B: So then, okay, so then my validator will listen for forwards and the relayer will listen for non forwards. Is that what is happening?
00:18:19.242 - 00:18:47.234, Speaker A: Yeah. The relayer essentially takes over the TPU. It is mostly the same code as the Solana validator TPU code. So it is both receiving transactions as the leader or the upcoming leader, and forwarding transactions to the next leader or to some other leader. Does that make sense?
00:18:48.694 - 00:18:56.758, Speaker B: Yeah, it's just not what I remember seeing in my logs. But I could be misremembering what I see in my validator logs. I'll have to. I don't want to derail this. I'll have to go double check.
00:18:56.886 - 00:19:38.704, Speaker A: Okay, he says. So jed from judo is saying, I think the relay should only be establishing outbound connections. Checking validator logs now. Yeah, I was under the impression that it does both inbound and outbound, but I could be wrong. A couple of things you could do to help verify that this setup is correct. There's not a lot, honestly. Unfortunately, from the stake node side, you can't really verify that anything is working properly other than maybe trying to inspect what transactions are getting through.
00:19:38.704 - 00:20:51.216, Speaker A: From the RBC side, you can look through the logs and look for a Solana quick client and then grep for warm and look for the IP address that you're trying to connect to in order to warm up the connection. So that's unfortunately the most that you can do right now to really verify that the connection is happening properly with stake rated QoS. But if there's other things that people come up with, please let me know. That's all I'm aware of right now. All right, the Devrel team put out a guide here that I'll put in the chat that goes over, kind of conceptually, what stakewaited QoS is, and talks about a couple of these flags. So definitely worth a read to check out. Okay, so Zen Tetsu mentioned in the comments that the quick connection logs in the validator are all.
00:20:51.216 - 00:21:01.506, Speaker A: Excuse me, all outbound connections. Can you clarify there, Zan? Is it just in the validator or the validator and the relayer? It's all.
00:21:01.610 - 00:21:24.232, Speaker B: No, I looked at both the logs. The relayer has inbound connection logging and the validator has outbound connection logging. So this split does work. As makes sense. As would make sense. The relayer does appear to be the injection of all quick packets. Anybody directing transactions to your validator, if you're running to relayer, are going to hit your relayer.
00:21:24.232 - 00:21:36.304, Speaker B: Then when your validator wants to forward transactions or for any other reason send them, it uses outbound quick connections and the logging I'm saying matches all that. And so I was misremembering.
00:21:36.604 - 00:22:30.264, Speaker A: Okay, sounds good. Thanks. All right, I think that's all I've got. Any more questions or feedback? All right, I guess we're done as just kind of a general request for feedback as people experiment with this and use it more. Would love to get more tips and tricks just on how to verify it's working. Any setup things that you all are doing, I think it's still relatively new ecosystem wide, so more operator experience to share the better would be really helpful. All right, well, if that's all, then I guess we'll call it there.
