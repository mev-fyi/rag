00:00:03.960 - 00:00:12.537, Speaker A: Hello everyone. Gm gm. Welcome to another episode of the Solana Changelog. I got a special guest with me today. I've got Bree, also from the Devrel team here at Foundation. How you doing, Bree?
00:00:12.721 - 00:00:15.009, Speaker B: Hey everyone. Doing good. How are you, Nick?
00:00:15.177 - 00:00:18.513, Speaker A: I'm doing great. You're in Texas right now at Consensys, aren't you?
00:00:18.649 - 00:00:26.451, Speaker B: I am. It's very hot here, but meeting a lot of great people. Wet. Just cool talk. So it's a great time and gave.
00:00:26.483 - 00:00:34.655, Speaker A: A workshop shout out for Bree's workshop if you were able to catch it in there. But let's go ahead and dive into the changelog. Did you see any commits from this week that were interesting?
00:00:35.195 - 00:00:52.255, Speaker B: Yeah. So let's get started with this first commit. It's an optimization, so it basically is able to reuse calculated fees. The problem was that transaction fees were recalculated a few times. So we're just optimizing that and being able to reuse the calculation.
00:00:53.225 - 00:00:56.085, Speaker A: Nice, nice. Always appreciate a good optimization.
00:00:57.745 - 00:01:17.903, Speaker B: This next commit enables CPI tracking by default. This updated Boolean in the current code base. There's the change right there. It just makes test cases easier to simulate a transaction, then fetch and serialize an associated event.
00:01:18.089 - 00:01:35.615, Speaker A: Yeah. Cool. Especially for compression related things. I guess there was, based off of how this was working before, that you couldn't actually do tests with Solana program test for compression things specifically because of the no OP program. I don't really understand why, but apparently you can now, so that's fun.
00:01:36.275 - 00:01:52.065, Speaker B: All right. And then this last commit, it's a way to optimize getting program accounts. So instead of sorting by default, it updated to be able to just increase the speed for getting program accounts.
00:01:52.925 - 00:02:11.573, Speaker A: Yeah. And anyone who's been developing on Solana for a while, they know that get program. Get program accounts. GPA is like the slowest part of Solana. And we've got God mode. Galactus here has a little benchmark in here checking for stake accounts and serum accounts. And if you look at this speed change, total time is about a little bit more than 8 minutes.
00:02:11.573 - 00:02:22.615, Speaker A: And then 11 minutes for serum accounts. And then with this change that drops to 2 minutes and 3 minutes. So significant speed improvements on GPA, which is just amazing.
00:02:23.155 - 00:02:27.491, Speaker B: Yeah. 430% and 240%. It's pretty crazy.
00:02:27.643 - 00:02:56.501, Speaker A: Yeah, no small feat there. And then let's go ahead and dive into the SIMD of the week. We're going to talk about SIMD96 because SIMD96 was actually just fully approved with a Passing of Yes. So what ended up happening and Jacob and I talked about this a couple of weeks ago on the changelog is for SIMD96. There was a vote put up to all the validators. They all got voting tokens. They were able to actually vote and stake weighted votes of course based off of validator staking.
00:02:56.501 - 00:03:31.635, Speaker A: And this SIMD has been approved and will now be go through the normal featuregate activation process. So eventually it will get activated on chain and on mainnet. If you don't already know SIMD96, it's pretty straightforward. It's just going to give 100% of validator priority fees, or rather 100% of priority fees to the validators currently. And before this actual code gets activated, 50% of the fees were getting burned and only 50% went to the validators. But now that this is approved, 100% of priority fees are going to go to validators. So that's pretty cool.
00:03:31.935 - 00:03:33.355, Speaker B: Nice. Awesome.
00:03:33.655 - 00:04:04.597, Speaker A: And speaking of, there it is. Speaking of fees on Solana, the fees documentation@solana.com docs core fees has just been updated in the last week or so. There's a whole bunch of more information in here and clarification on all things fees and compute on Solana. So if you're unclear of how the fees kind of work, then take a look at this doc and yeah, feedback is always welcome. There's an edit page button here. You can go directly to GitHub if you have any feedback too.
00:04:04.741 - 00:04:35.261, Speaker B: Cool. So diving in more with the doc updates, we have another one for experienced rust engineers to get started with Solana. So this goes over everything from a rust perspective of what you would need to start building programs on Solana, understanding Solana core concepts and how to associate that with your rust knowledge. So definitely recommend if there's anyone interested in starting to get starting to build on Solana, then take a look at this doc.
00:04:35.373 - 00:05:11.155, Speaker A: Yeah and then we'll go into more resources for the week from the community. My favorite one was actually and I've started doing this, I've started putting a call out on Twitter if anyone can submit a resource and I'll take a look at it and maybe add it in. And Dean from WBA and Turbine, he created the Fibonacci sequence on Solana. Which you know people, people are familiar with the Fibonacci sequence, but the thing that's really cool about this is he wrote it in EBPF assembly. So like look at this, look at this code right here. It's just why I love it I love it so much. But the thing that's extra cool that a.
00:05:11.155 - 00:05:41.351, Speaker A: It's written in assembly, EBPF assembly. But if you look at the compute that it actually takes to do this is significantly lower than basically any other way you could do it. It's like the lowest possible compute. You got a little table here. So it's just like incredibly cool. And I will say that Dean actually pointed out that if we do more optimizations, by just writing everything in assembly, we can make more optimizations, which, you know, is something. Did you see any resources from this week?
00:05:41.543 - 00:06:01.115, Speaker B: Yeah, so one that I wanted to point out is Kenobi. So Metaplex actually updated Kenobi to be able to support now generating anchor types. So you can generate anchor IDL types as well as. I mean, sorry. So you can generate anchor IDL types for native Solana programs.
00:06:01.415 - 00:06:22.315, Speaker A: Yeah, this one's really cool. And then we'll go ahead and wrap up the Changelog for this week with the shout out for Stack Exchange. So shout out to everyone on Stack Exchange that are fighting the good fight over there. We got Jimmy, who is leading the week right now. And we've got Childhood with the number three, Rank, and Mitchell, Dennis and Joey. Good old Joey from Stockpile. And now it's squads.
00:06:22.315 - 00:06:28.871, Speaker A: Yeah. And great work from everyone on Stack Exchange this week. And that'll wrap it up for this week's changelog and we'll catch you in the next one. Bye.
