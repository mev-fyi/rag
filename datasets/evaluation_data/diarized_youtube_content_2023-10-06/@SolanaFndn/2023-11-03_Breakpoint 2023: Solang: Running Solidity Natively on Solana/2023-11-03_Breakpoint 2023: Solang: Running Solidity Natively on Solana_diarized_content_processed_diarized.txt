00:00:01.240 - 00:01:01.862, Speaker A: Hello everyone, I'm Lucas, I work for Solana Labs and I'll be talking about Solang. It's a tool for you to run solidity code on Solana natively. So I think the most burning question right now is what is Solang? Solang is a solidity compiler that allows developers to write solidity code and run natively on Solana. Solang also outputs an IDL file so you can interact with the anchor typescript code when you deploy your solidity contract on Solana. And we are up to date with the solidity syntax. You can do almost anything possible on solidity if you use Solar and we support basically all Solana features. We have even extended the language to support PDA's accounts and the SQL token system program, and we are integrated in the anchor CLI command tool.
00:01:01.862 - 00:01:41.476, Speaker A: So if you have installed Solana on your computer and anchor 0.28 or newer, you can just type anchor init solidity and you initialize your solid project. You can type anchor test to test it and anchor deploy to deploy it. This is a common misconception people have about Solang. So you're not trying to emulate Ethereum. So whatever you have in solidity that's made for Ethereum will not work. Right now we are trying to provide support for the solidity language on Solana.
00:01:41.476 - 00:02:27.376, Speaker A: So just like see a horse with python for Solana, we are now solidity for Solana. And this also implies that you need to know about Solana and use Solana constructs to use solidity. So in this example that I have here on the right hand side, I'm checking the balance of an account. So you need to declare the account you're going to use in this function and retrieve the lamport field from the account info struct. So here is a comparison between the solution provided by neon and the solution for Solang. So neon VM tries to emulate Ethereum on Solana, while Solink you can run natively your contract without any layer of emulation. We really run on Solana and on neon.
00:02:27.376 - 00:03:32.694, Speaker A: You have to interact with the ethereum constructs like ERC 20 and ERC 721. And Solang provides you SPL token, the system program. You can also use Metaplex and the bobogram program directly from solidity. And on neon you need to use extreme tools like hard hat, true fo and Solango is built around anchor, so you can interact with the anchor CLI using anchor type street client codes when you deploy your contract on Solana. And this is how it works so if you have your solidity file, you use Solang and it outputs the Solana bytes code, and you deploy it to a program account as any other program on Solana. So a contract, a solidity contract consists of two accounts, a program account which holds the binary you're going to execute, and a data account. So if you write solidity code, you can have those storage variables, which maintains the state, and those storage variables are saved in a data account.
00:03:32.694 - 00:04:17.792, Speaker A: When you call your program your solidity constructor, you're creating that data account on the Solana blockchain. And if you have functions that modify those variables or even access them, you're interacting with that data account. So why would someone use Solang right now? So we have a gentle learning curve. Someone already knows solidity from Ethereum or already knows typescript. Using solent is very easy. You need to learn about Solana, and you have less porting efforts, because if you have an existing project, you don't need to learn rust or rewrite everything in rust. You can take your solidity contract, modify it a little bit to be compatible with Solana and then deployed.
00:04:17.792 - 00:05:05.230, Speaker A: And you can also have a shared code base. So solidity is available on Ethereum, Solon in Polkadot. So in this example here on the right hand side, you can have a shared library which contains your business logic and a shared interface for calls. And then you create a separate contract for each blockchain you want to deploy your contract. Not only Solang outputs an IDL for you to call other contracts in Solana, but we can also interact with anchor IDL. So let's say you want to call another contract created with encore rust. We can pause the RDL file and it will output a solidity interface like the one on the top.
00:05:05.230 - 00:05:40.304, Speaker A: And from that interface you can easily wire up calls and solidity. And we did this remove the burden from developers to having to write those raw calls to the Solana program. We have two libraries available right now for solidity. One of them is the system program and the other one is the SPL tokens. So the system program allows developers to create accounts, transfer tokens and so on. And the SPL token allows you to burn and mint tokens. And you can check that.
00:05:40.304 - 00:06:29.990, Speaker A: These calls are just simple functions. We can just call like Dot, Mintool, or create, because we have already implemented this on our side. But you still need to use those Solana solidity with Solana Sugar because you need to declare the accounts. You're going to modify the sign in accounts for these functions. So we have these functions, annotations like the add mutable account add signer, which you inform the Solana runtime which accounts are going to be needed for this transaction. We also made PDA's available on solidity, so pdas are programmed derived addresses. When you declare the seed annotation and the bump, you're going to create a PDA data account for your contract.
00:06:29.990 - 00:07:12.510, Speaker A: So in this case, all the storage variables will be saved in this data account, in this PDA data account. And you can also use this account to sign transactions without a private key. So if you're making an external call on solidity and you want to sign using seeds, you can just use our syntax with scare brackets, like the call in the bottom and this is a question we get a lot if solidity Solang is ready for production. Yes it is. We've been through two security audits. The reports are publicly available, and we have fixed all the issues raised in this report. Documentation is available.
00:07:12.510 - 00:07:39.920, Speaker A: We have documentation and read the docs. From there you can check all the difference between solidity on ethereum and solidity on Solana. We have examples available on the Solana repository. It's Solana Dash developers program. Examples and contributions are welcome. The project is open source. We are on GitHub, the Hyperledger repository, Hyperledger Solang, and we want you to connect with the project.
00:07:39.920 - 00:08:16.714, Speaker A: So if you want to get started with Solang, there's a page on the Solana website that you can use to get started with your project. If you scan the scare code, it will take you to that page. And Solang has been through a very long cycle of development and we want the developer experience to be as good as you have in rust. So if you're interested in making contributions, writing tutorials, examples, please connect with us. This is our Discord channel. We are always available there to answer questions, help developers, and yeah, this is it. Thank you.
