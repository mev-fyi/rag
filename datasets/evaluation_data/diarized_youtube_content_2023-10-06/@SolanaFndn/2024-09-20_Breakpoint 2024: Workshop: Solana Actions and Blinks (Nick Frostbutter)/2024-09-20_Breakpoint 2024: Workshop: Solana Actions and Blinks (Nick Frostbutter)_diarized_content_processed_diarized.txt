00:00:02.160 - 00:00:31.215, Speaker A: Hello. Hello. How's everyone doing today? Welcome to Breakpoint Day 1. I'm Nick and it's going to be hard to follow Emmett from Mobile. I've been rocking a saga since day one. Got the production unit and do I want that Seeker phone. But I'm going to be talking about Solana Blinks in Actions today if you don't know me again, my name is Nick, I go by Nick Frosty everywhere except for Discord, and I'm developer relations at the Solana foundation and this is my emoji.
00:00:31.215 - 00:00:52.245, Speaker A: So who here has used blinks? Show of hands. Okay, okay. Who here is a developer? Even more hands. Love it. Who here is a developer that's built blinks? I feel like there were more hands of developers that have built blinks than people that have used them. We need to fix that. So for those of you who don't know what blinks are, imagine the scenario.
00:00:52.245 - 00:01:07.797, Speaker A: You're sharing URLs across the Internet. Typical thing that we've been doing for years. And take Twitter, for example. You post a URL on Twitter. In this case, post simple tweet, use Sanctum. Sanctum is great. Shout out to Sanctum and you expect sort of this standard experience.
00:01:07.797 - 00:01:39.647, Speaker A: You have social graph image cards, gets displayed, you can click on them. We've been doing this for years, but with Blinks and Actions, we want to take that to the next level. We want to be able to allow transactions, Solana transactions being brought directly to people where they already are. So you share a link to your favorite dapp, your favorite protocol, their website, and you can immediately interact with it. They can bring the transaction to you. You can connect your wallet, wherever you are, across the Internet. And that's sort of the goal here.
00:01:39.647 - 00:01:57.125, Speaker A: Full interactability, buttons, text input, all sorts of fun stuff. And it's not just Sanctum. There's tons and tons of protocols out there. Your favorite dapp's got madlabs, Jupiter, you've got Helium votes. And all of these things are already out there in the wild. They already exist. People have been using them for a while.
00:01:57.125 - 00:02:33.349, Speaker A: So what are blinks, though? Kind of in a nutshell is blinks are the front end and then actions are the back end. That's how I've kind of over the last several months and we launched Blinks in Actions is so how I like to explain it to people. And we have this, you know, this definition, sort of quote unquote, official definition. And it's. Blinks is actually short for blockchain links. And it's Basically just turning sharable URLs directly to users that can bring metadata rich experiences so that whole interface can be unfurled and displayed. And again, it just allows you to bring transactions and interact with the blockchain directly to people where they already are.
00:02:33.349 - 00:03:06.991, Speaker A: So kind of, in a way, blinks are like embeddable DAPP widgets, but sort of. And we'll talk about why it's a sort of. And they're just client applications. You know, you write a typical web app and you're writing a client application, you write some sort of backend blinks and actions, same thing. And they're just sort of this standardized user interface that gets that you as a developer, you don't really have to worry about it. It gets brought to you with all of the amazing tooling and things that organizations like Dialect have built. And currently it's via browser extension wallets.
00:03:06.991 - 00:03:38.023, Speaker A: So if you have, you open your laptop now, you check out your favorite browser extension wallet. Some of the big ones already have support Soulflare, Backpack, Phantom, OKX and Bybit for example, and many more. And effectively to actually become a blank when you're sharing that URL, there's sort of three conditions that it can actually be for them to become a blank. The first one is the Solana Action URI scheme. And we're going to go through each of these. I'll show what they look like and why they're different and which is better than others. And so you kind of have these three.
00:03:38.023 - 00:04:19.573, Speaker A: You have the Solana Action URI scheme, you have the actions JSON file, and you have an interstitial website using an action query parameter. Typical web2 stuff, right? So let's look at the Salana Action URI scheme. The first one is, you know, it looks kind of similar to what you would see across the Internet, you know, HTTPs URL, except it's different. When you're sharing a URL on the Internet, HTTPs is the protocol, you know, you can share FTP or any other protocol in a URI scheme. With Solana Actions, it's Solana Action makes sense. And then instead of sharing a normal domain, you know, HTTPs, solana.com whatever, you're actually sharing your Action API endpoint directly within the URI scheme.
00:04:19.573 - 00:04:48.489, Speaker A: And there's a couple of sort of fallbacks or drawbacks of this is that, you know, you don't share this type of URL across the Internet, like applications and users don't know what to do with it. So there's no fallback website. If you share this, you know, this exact sort of image here, this action URI scheme, you share that on Twitter or in an email, nothing's going to happen. It's just going to look like text. You can't click it, you can't do anything. So there's no fallback experience for users and went too far. So because of that, it's the least supported and the least recommended.
00:04:48.489 - 00:05:22.681, Speaker A: Basically, don't ever share this. And that's where the Actions JSON file comes in. The Actions JSON file is really simple. It's a simple JSON file stored at the root of your domain and all it does is it Maps the normal URL's on your website to your API endpoints. And it does truly make it so you can share whatever URL you would access. A website like Jupyter, for example, you want to do a swap on Jupyter, you go to their website, you just share that link on Twitter or anywhere else that blinks are supported and it just works. It's beautiful.
00:05:22.681 - 00:05:52.931, Speaker A: And it's sort of the most recommended because you have a fallback. It's a normal HTTPs link, you share it. Everyone across the web knows what URLs are. To click them and you can actually users can click it, go to the website. So if they have blinks enabled, they can within their browser extension wallets or anywhere else blinks are supported, they can click it, go to the website and interact. But if they have blinks enabled, then you get this really optimized experience. So let's just look at an example.
00:05:52.931 - 00:06:20.585, Speaker A: Jupyter. Everyone loves Jupyter. If you pull up Jupyter right now, you go to swap some tokens. This is the URL you see, this is the URL that you would share with your friends, text message or anywhere else. And if you look at the actions JSON file, it's stored at the root of the domain. And again, all it's doing is it's mapping this URL swap/usdc to SOL and it's going to map that to your actual API endpoints. So let's just look at some JSON.
00:06:20.585 - 00:06:44.423, Speaker A: This is actually what Jupyter's Actions JSON file looks like. It's mapping their normal swap URL to their API endpoint. Pretty straightforward. This action JSON file is just super simple. It's typical of JSON. And all you're doing is you're sort of declaring the local paths on your website to your API endpoints. You can do full wildcards, either single star or double star.
00:06:44.423 - 00:07:15.565, Speaker A: They have different Things you can do multiple rules, like this example here. In this case we have two different links that could be rendered here or two different URL patterns that can be rendered. And you can do external URLs. So you could go to a completely separate domain that either you control or maybe there's a service like Dialect that has some various actions that you can already use of out of the box, or you can do internal URLs. So it's really flexible, really easy. And then the last one is the interstitial website. The interstitial website, like dial to shout out to dialect.
00:07:15.565 - 00:07:43.191, Speaker A: All it's doing is it's taking the action query parameter. And this value is actually just the Solana action URI scheme directly in the URL. So when you share these URLs, you know you can click on them, you can actually interact. You have this interstitial website becomes the fallback. Users know how to interact with URLs, right? But if you have blinks enabled, if users have blinks enabled, it unfurls. You get this experience. You can connect wallet, click buttons, you can take user input, all sorts of these really powerful things.
00:07:43.191 - 00:08:15.209, Speaker A: And one of my favorite things about the interstitial site is actually there's this interesting side effect that happens where if you're a developer, you don't actually have to write any front end code, you don't have to ship it, you don't have to worry about Wallet Connect or anything. The interstitial website just handles that. So you could literally write a REST API that returns a transaction and then you've built a full dapp. Makes it really nice. So this is what this would look like. You see this URL for jupyter we have the action query parameter. You can share this and you can interact.
00:08:15.209 - 00:08:33.435, Speaker A: Users can interact, they can click on it. If they don't have links enabled, they can go to dial 2, connect, wallet, all that good stuff. So this is what it looks like. You can go to dial two that exact link. This is what you'll see. You can swap Sol and Jupyter any other blank that works. Dial 2's interstitial website from Dialect just works.
00:08:33.435 - 00:08:54.929, Speaker A: You have this standard interface that sort of gets displayed. This is basically the exact same thing that will get displayed on any social media through your wallets. And you can connect your wallets and then you have these buttons, you can start clicking on them. Interacting is pretty cool. So then what are actions? We've already talked about blinks. And again, blinks are the front end. Actions are the back end.
00:08:54.929 - 00:09:21.313, Speaker A: So let's dive in again. Actions, they're just delivering signable transactions and eventually messages to users. Eventually that will even be optional. You can just do anything, which is pretty cool. And they just public API endpoints on the Internet, globally accessible. They accept, get and post requests, just like a typical REST API does. And all they're doing is they're returning whatever metadata that you need or want to display in that, in that, that interface.
00:09:21.313 - 00:09:45.445, Speaker A: And then you're also returning a signable transaction, eventually messages, eventually you don't even have to return a transaction. You can just sort of paginate through metadata and show all sorts of cool things. And these transactions can really do anything. Anything you can do with a Solana transaction, you can do with a Blink. Because they're just Solana transactions. The last thing here is safety and security. When Blink sort of launched, a lot of people were like, oh, there's all sorts of bad things that could happen.
00:09:45.445 - 00:10:13.795, Speaker A: Not so much. And that's because actions, they just come from domains. Just like you connect to any other DAPP across the Internet, you connect wallet. Your wallet has some sort of user security and safety features. It checks the domain, sees if it's a bad one or thinks it's a bad one, and then they handle that. Wallets are also doing transaction simulation. All the other sorts of things that they've spent lots and lots of times in development hours working on things like blowfish and blockade for sort of a better user experience across the Internet.
00:10:13.795 - 00:10:35.029, Speaker A: And you just. They're just rest APIs, right? So they're, they just return transactions. That's all that actions are. They're super easy to build. You know, if you're a developer, you've probably built a REST API. And just again, some examples, you can do anything you can possibly do with a Solana transaction. Vote on governance proposal, stake sol, native or liquid, and you can swap assets, you can claim collectibles, whatever.
00:10:35.029 - 00:10:58.589, Speaker A: Anything you could possibly do with a slant transaction, you can do with Blinks and actions. Mainnet, Devnet, testnet, even local Net devs work on local. And you can do all of this kind of stuff. You have these rich experiences, you just return that metadata gets displayed to the user and you don't have to worry about any front end. It's kind of cool. All right, we're going to get real nerdy now. So there's devs in the audience.
00:10:58.589 - 00:11:13.199, Speaker A: This is right curve stage. Let's talk about it. First thing is the Actions SDK. This is, you know, open source. It's published. There's a bunch of type interfaces and stuff. You know, if you're using Node or anything like that, type interfaces, There's a bunch of helper functions to make it easier to build actions and links.
00:11:13.199 - 00:11:32.595, Speaker A: And we're going to walk through the life cycle of actions and how it actually works. This looks really complicated. You know, you don't have to really worry about it, except for this part right here. As a developer, that's all you have to build. You build an Actions API, you build a REST API and then you can do things. It's cool. So it starts out with a get request initially.
00:11:32.595 - 00:12:11.221, Speaker A: Say you're scrolling through Twitter or anywhere else. Blinks are sort of supported. The user scrolls through, they see a link, it unfurls, it makes a get request to that URL to the action JSON. It sort of detects if it's a blink and then makes a get request to that API endpoint that you've sort of mapped via your actions JSON or via the query parameter for interstitial sites. And it's going to make a get request to your API server and then you're just going to return some metadata, typical metadata across the Internet, title description, some image kind of stuff. Nothing particularly interesting there, but you can display whatever you want. And then there's the actions themselves, the linked actions, we call them, and let's actually look at those.
00:12:11.221 - 00:12:38.535, Speaker A: So this is actual code from an open source example within the actions repo. And all we're doing here we have two actions. The first one we're just sending some. You have a label, that's the button that's going to be displayed for people to actually click. And then you have an href value that's just your API endpoint. When the user clicks this button, it says send one soul. It's going to make a post request to that href API endpoint that you've declared wherever you want and you'll be able to click it, interact to get a transaction.
00:12:38.535 - 00:13:04.323, Speaker A: We have a second one here. It looks a little bit more complicated. It's basically the same thing, almost the same API endpoint, except we have these parameters because with blinks you can take user input in the form of parameters. In this case we're doing an amount and we just say, hey, we want this amount field. And we're just going to put that in the query parameter. It does a template literal replacement. You could also do payload data within the body itself and then you just return that data.
00:13:04.323 - 00:13:56.279, Speaker A: So you've made the get the client Side's made the get request, it sends the response back and then the user will be able to be displayed that interface, that information within the blinks, sort of standard experience. And then you know, you see this, you have the image, the title description, you have these buttons that you can click on, you have text input that you can, you know, sort of ask the user for just about any type of information. And once the user sees this, they can actually click on one of those buttons. They're performing an action, they're executing an action or sort of initiating it. And what happens is it actually makes a post request back to that href endpoint that you've declared within your get your getresponse and it's going to include the user's wallet address. And if you have any body data, like you've accepted user input via the body instead of query parameter, it gets included in there too. And then you just handle that within your API endpoint.
00:13:56.279 - 00:14:27.205, Speaker A: You process the info, the JSON coming in, you validate any of the user input you need, make sure it's a valid public key, wallet address or account address. And then you do whatever business logic you want on chain logic checking. If they have a minimum balance, they have some nft, some token. Maybe you want to do like some typical Web2 stuff, you know, if they have authenticated on your website, you maybe want to do a zapier integration. You can do anything you could possibly do because it's just a REST API. And then you just return a transaction. Pretty simple.
00:14:27.205 - 00:15:05.929, Speaker A: You just send it back and like, hey user, this is the transaction. Do you want to sign this? And they can either sign it or not, and it just gets sent back to the user. And the thing here is it gets sent back as a serialized transaction base 64 encoded and then the user will actually be able to yep, we sent it. And then the user will be able to sort of just like interact and actually get their wallet pop up. There's actually a helper function within the Solana Actions SDK called CreatePostResponse. It makes it really easy to correctly structure it so that way you can sort of satisfy everything you can pass in your transaction. Optional message that gets the displayed after the user, after the transaction confirms and then you can also pass in some signers.
00:15:05.929 - 00:15:25.737, Speaker A: So if you need to partially sign a transaction for some reason, you can do that too with this. And you just return JSON and then it gets sent back to the user. The user gets their wallet pop up. They can either confirm, they can either sign the transaction or not and eventually messages and eventually not. And then if the user signs it, great. It went to the blockchain. We did blockchain things.
00:15:25.737 - 00:15:39.968, Speaker A: It's awesome. So that's pretty much it. It's that simple to build actions. You can scan this QR code, this goes to this repo. It's listed right here on the Solana Developers GitHub organization. Bunch of open source examples. That's where the SDK is.
00:15:39.968 - 00:16:02.005, Speaker A: Pretty great stuff. There's also this YouTube playlist that has a couple of videos on how to do links and actions, more educational content. And then there's the get it started guide within the Solana documentation. And there's also tons more resources you have. The general docs has talks about different frameworks. There's examples for Next JS Express, Axiom. So if you want to do Rust, it's just JSON, you could do it in any language, any framework.
00:16:02.005 - 00:16:28.701, Speaker A: There's also dialect to huge shout out to dialect and all the engineering work and things that they've done around blinks. And there's also the awesome Blinks repo. So if you build an awesome blink, open a pr, I'd love to merge it. You can follow me on Twitter and if you want to ask any questions, I'm happy to chat. Whether it's on blinks and actions or anything other like dev rel Solana things, I'm all ears and I'm happy to chat with anyone. And if anyone wants to talk about blinks and actions, I'll be floating around. Just come and talk to me.
00:16:28.701 - 00:16:29.645, Speaker A: All right, thank you very much.
