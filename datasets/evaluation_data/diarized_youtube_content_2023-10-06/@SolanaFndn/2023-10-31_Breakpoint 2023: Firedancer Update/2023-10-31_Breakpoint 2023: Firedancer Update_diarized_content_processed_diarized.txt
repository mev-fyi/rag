00:00:03.440 - 00:00:39.294, Speaker A: How's everybody doing? Having a good morning? All right, thanks, Amira. Thanks, everybody who's been here for talking, sharing some awesome updates. Want to talk about fire dancer? I dropped a little spoiler in the opener earlier. I'm going to spend a few minutes kind of diving in and let you guys know what's going on. So what is fire dancer fired? Answer is the first brand new full reimplementation of a validator for Solana. To date, we've had one. This is the product that's been built by Solana Labs.
00:00:39.294 - 00:01:39.452, Speaker A: And fire Dancer is looking at the entire validator code base, ripping it apart piece by piece, rebuilding it, optimized at every level for maximum performance, maximum speed and network reliability when fire dancer is complete. This is going to be fully compatible with the Solana of today that you know and love with our existing validators, with all the protocols on the network. Who's doing this? A team at jump trading. They are a longstanding participant in the Solana ecosystem. They have incredibly deep experience in tradfi and HFT, scaling networks and building extremely, extremely high performance systems. The engineering work is being led by the one and only Kevin Bowers, aka KFB, as he is affectionately known within the ecosystem. Kevin and the fire dancer team, they're here in force this week.
00:01:39.452 - 00:02:03.030, Speaker A: Got some great talks coming from them tomorrow. So. Yeah, yeah, definitely, definitely a team to watch. Definitely a project to watch. So what are the goals? Why do we want to do this? Why does anybody care? Solana's fast, right? We're all good. So two high level goals here. First one, increase validator diversity on Solana.
00:02:03.030 - 00:02:32.304, Speaker A: This is paramount. This is key to the long standing and long term resiliency and decentralization of the Solana network. Second big goal is implement a consensus node, a validator with maximum performance. So maximum performance. Right. We have high performance today, but I'm talking about max performance. This means a validator that operates as close as possible to the physical limits of the hardware that it's running on and the Internet and network bandwidth that powers the network.
00:02:32.304 - 00:03:02.976, Speaker A: Currently, Solana validators are fast, but there are inefficiencies. There are bottlenecks. These exist in the software. The goal of Firedancer is to remove every software bottleneck, every software inefficiency, so that Solana network and firedancer validators and others are limited only by hardware capacity. Hardware always gets faster. We have more cores, we have more transistors, we have faster fiber that's being deployed to more places. And if Solana is only capped by the hardware.
00:03:02.976 - 00:03:39.986, Speaker A: Solana will always get faster over time. So first thing, validator diversity. Today, most validators on Solana run open source rust code that was originally published by Solana Labs, or they run a fork of the Solana code and use the Geeto validator. We're going to hear from the Geo team a little bit later about all the great work they've been doing. They've built an MEV optimized validator, and today, 38% of Solana Mainnet runs the Gito validator. That's awesome. Guito is a fork of the Solana labs code.
00:03:39.986 - 00:04:36.278, Speaker A: It's still written in rust, and as such, it shares a lot of the same components as the Solano Labs validator. It's written in the same language, it uses a lot of the same tools, same compiler, same tool chains. It has a lot of the same upstream dependencies. So while it's awesome to see this, where we really want to get to is a world in which we have four or more completely independent validators with separate code bases written in separate languages, maintained by separate individual teams. And ideally, we'd have a stake distribution that looks like this, which is 25% of the stake held by validators running one or the other of these 4567 different validators. Why? Why do we care about this? Code is imperfect. Code is written by imperfect humans who write bugs.
00:04:36.278 - 00:05:25.858, Speaker A: No matter how hard we try, no matter how many times we audit it, things happen. If you have a critical issue in one implementation, in one language, in one upstream dependency on any one of these validators, and everyone running the Solana validator, the Solana Labs validator goes down, or some other validator goes down. We still have network resiliency. We don't have any validator with 33% or more of network stake, which means Solana Validator keeps on plugin. We just heard from the SiG team, I'm sorry, we just heard from the syndicate team who's building Sig, which is an awesome effort to push this forward. So the fire dancer team and the team at Syndica are really helping us move towards this goal. So these things together really moving Solana into the future, and hopefully very soon.
00:05:25.858 - 00:06:03.760, Speaker A: Maybe someone here wants to take a swing at bringing us to number four. So, performance, if you're here, I hope you already know Solana is the highest performing blockchain in the world today, and that's not enough. I want high performance. I want maximum performance. Fired answer is going to bring Solana to maximum performance. This is bounded only by hardware and hardware always gets faster over time. So what is the design? How do we pull this off? How does the fire dancer team make this happen? So, the first thing firedancer is a complete rewrite of the code base.
00:06:03.760 - 00:06:50.434, Speaker A: They are reworking every major functional component of the existing validator one at a time at a very high level. We can think of sort of three major components, networking, runtime, and consensus. So, networking, this is processing anything that comes in over the wire from the Internet, incoming transactions, and sending out blocks to the rest of the network runtime. This is the Solana virtual machine SVM, the thing that executes the transactions. Figure out what the new account balances are, the output of it, NFT, mint, or a defi trade. Maintaining all that database, the account state inside the machine, and of course, consensus selecting forks, voting, making sure that the chain is secure. As they're reworking this, they're optimizing each component as it is built one at a time.
00:06:50.434 - 00:07:47.114, Speaker A: The architecture Numa aware tile based architecture Numa is non uniform memory access. This refers to the fact that that across a single piece of hardware, even sitting on your motherboard, you've got a cpu here, you've got some memory over here, you've got a network card over here. Within just a few inches, you have a lot of different components. To maximize performance, you need a design that is aware of the latency between individual hardware components, between individual groups of memory. The amount of time it takes for an electrical signal to travel 1 mm versus 2 mm across the board matters. These are the things that the team is optimizing for. Using a tile based architecture with dedicated hardware resources per thread in a multi threaded, multi core environment, you have a single cpu per tile, dedicated memory, dedicated, reworked message passing between these tiles gives incredibly high performance.
00:07:47.114 - 00:08:34.214, Speaker A: Optimized for whatever hardware layout, however many cores you have, a firedancer node can be configured to take maximum advantage of the hardware at hand. So, the current implementation of firedancer, this is an incredibly ambitious project. We've made tremendous progress so far. Current version of firedancer implements all the networking features. This is anything required to bring in transactions from the Internet and process them and send the blocks or the shreds, which are pieces of blocks out onto the Solana network. So quick signature verification, transaction deduplication on the inbound, block packing and shred signing and forwarding on the outbound. All of these things have been built by the firedancer team.
00:08:34.214 - 00:09:34.058, Speaker A: The components for runtime and consensys, these are still in the works. So currently, what we have is a firedancer implementation that uses networking in networking out, all written in high performance c code by the team and wrapped around the existing rust code that implements the Solana runtime and the consensus algorithms and a few other things. So we have this sort of early version Frankenstein, if you will, that's patched together. This is affectionately known as Franken Dancer for the Frankenstein fire dancer. So we've got all this incredibly high performance networking running the existing Solana virtual machine. How fast is it on the inbound incoming transactions getting processed at the network interface card signature verification and dedupe. Early demos from the fire dancer team have showed the ability to process over 1 million transactions per second per tile per cpu core.
00:09:34.058 - 00:10:05.094, Speaker A: On a multicore environment, you are handling multiple gigabits per second of inbound traffic on a single core. Right. Some people run 16 core machines, some people run 32 core machines. The team was able to show just using four cores to handle incoming transactions, practically maxing out a 25 gigabit link. Right. You put a network interface card on your server, it can handle one gigabit, five gigabit, 25 gigabits. This thing was running four cores, no problem.
00:10:05.094 - 00:10:37.038, Speaker A: Scales up, network interface cards get faster. We put more cores on the machine. You can imagine this continues to scale to millions and millions of transactions that this is handling. No problem. Transactions are great, but you got to create blocks. You got to send them out to the network. Same story on the network outbound using today's hardware.
00:10:37.038 - 00:11:18.474, Speaker A: This is commodity hardware, same stuff that's running a validator on mainnet today, showing per tile, over six gigabits per second of traffic capacity to send blocks and shreds out to the network. This is an incredible speedup of the block propagation and the transaction ingestion compared to today's validators. This is what we're talking about when I say maximum performance. Firedancer has removed so many software bottlenecks that they are limited only by the speed of the hardware that they're running on. We can throw more cores at it, we can throw a faster network at it, and it will just run faster. There's really no bounds here. This is on today's validator hardware.
00:11:18.474 - 00:11:51.682, Speaker A: All of these numbers really impressive. Incredible accomplishment by the firedancer team. Well done. So what does this imply for node hardware? A lot of people talk about the requirements to run a solana validator, what kind of server I need, what kind of chip it needs to run to process all of this stuff. There's a couple different paths that this could take. So the default option would say, ok, well everybody uses a certain machine to run their validator now keep using it. You saw these numbers.
00:11:51.682 - 00:12:24.540, Speaker A: If you run the current code, you will have a monster of a machine. As far as capacity, this gives significant headroom if there is some really high network usage event. We think we've seen bot traffic for NFT mints in the past. I mean, what if there's 100 x the traffic, you run this code, good to go. You've got huge headrooms, really, really great. Allows for sort of peak spikes in traffic. Right.
00:12:24.540 - 00:13:15.184, Speaker A: If we have some massive event, or as we're really hoping to see, and as we have seen to date, this sort of upward trending curve of steady state adoption, millions of people transacting using Solana pay day, every day, every single day, every single minute. These things can just scale up, no problem. Alternatively, some people might pursue, okay, well, I've got 100 x performance running this code. Why not use a cheaper machine? I can use something with a lower hardware spec. This also a possible option and makes running a full node or makes validator access much more accessible for more people. If the cost to run the hardware is a little lower, if it's a little more of a simplistic machine, we can increase validator diversity. As far as the population of people that can run these nodes, the kind of places that you can run, the kind of places you can acquire compatible hardware.
00:13:15.184 - 00:13:56.524, Speaker A: And again, the thing to remember, hardware and bandwidth will always get faster and they always get cheaper over time. We're going to have more cores, I mean, the smartphone that's in everybody's pocket. This was comparable to whatever your high end computer was five or ten years ago. You have an eight core or a 16 core cpu in your pocket right now. These things will always get faster, they will always get cheaper, which means Solana's performance will always increase. If we're only bound by the capacity of the hardware. This is not going to require a new scaling solution in two years or five years, when Solana's running at hundreds of thousands of user TPS, it's just going to keep on going.
00:13:56.524 - 00:14:36.284, Speaker A: So that's all great. Where are they? What's firedancer up to right now? You might have heard my spoiler a little while ago, but I'm going to tell you again, very excited to announce fire dancer right now is live on Testnet. This is an awesome accomplishment from the fire dancer team. These guys have been busting their asses for the last year getting this built. They have been working around the clock through the weekends for the last several weeks, last several months to get here today. I was just talking with the team a couple nights ago. 03:00 a.m..
00:14:36.284 - 00:15:09.512, Speaker A: I got a notification. Hey, not only are we live, but here's the operator's guide. Go try it out. Ice was up all night. 06:00 a.m.. I launched my very own fire dancer node on Testnet. We've got nodes, they're staked voting, producing valid blocks, coexisting happily with the 2900 other validators that are on Solana's public testnet right now, running the existing Solana labs validator, running the existing geodo validator.
00:15:09.512 - 00:15:53.402, Speaker A: This is compatible with the 1.17 release, which is running broadly across testnet right now on commodity hardware. This is the same machine that is. Anyone else is running their testnet node, their mainnet node, same hardware, incredible code, incredible performance. What's running, what's the feature set? So, this is an early version of Firedancer, right? This is Franken Dancer. This is the c code created by the firedancer team that runs the Solana networking protocols. That's everything that comes in off the wire, off the Internet, incoming transactions, and everything that goes out back, out of a staked validator, block packing, block production, sending it out to all the other nodes.
00:15:53.402 - 00:16:19.830, Speaker A: This is still using the existing rust code for the runtime, for the Solana virtual machine, for the consensus algorithm. But they are hard at work bringing us sort of this end to end solution. But you don't have to take my word for it. Go check it out. The fire dancer code is, and always will be open source. It's live on their GitHub. Firedancer IO.
00:16:19.830 - 00:16:42.998, Speaker A: The docs are there, the getting started guide is there. Go launch it on testnet. Go play around. Go talk to the team. This is a huge evolution and step forward for the Solana network. I'm super excited that we've reached this great milestone. So what's next? So we've got Franken dancer on testnet.
00:16:42.998 - 00:17:03.838, Speaker A: Ultimate goal is to get a full fire dancer on Mainnet. The team is working on two efforts in parallel right now. Franken Dancer this fire dancer, networking with the rust runtime. This is a viable candidate for Mainnet. We could absolutely see mainnet validators running this. Not yet. Not production ready.
00:17:03.838 - 00:17:48.378, Speaker A: Don't Yolo. Estimated timeline for readiness is the first half of next year to see Frank and dancer on Mainnet. Super exciting. In parallel, the team is working on getting, rebuilding the runtime. They're reworking the code that implements the consensus algorithm, hoping to bring this to testnet later next year. Separately, couple other initiatives, a couple other big shot projects. A couple folks on the fire dancer team have been looking at hardware acceleration, accelerated hardware, custom code to run on an FPGA, maybe an ASIC, maybe expand what we can do with GPU's.
00:17:48.378 - 00:18:58.966, Speaker A: Right now there's a project from Kave who you'll hear about on tomorrow, using hardware acceleration to write FPGA code on a seven year old commodity FPGA, processing 8 million TPs, 8 million inbound transactions per second on a commodity FPGA. This was an AWs Vm running their f one class. This is a couple hundred dollars FPGA that you can slap on a motherboard. And you know, the sky's the limit here, right? There's no reason that a Solana network in five years, or more or less couldn't have consumer images for FPGA's, couldn't have custom asics in addition to support always general purpose cpu's, so you can run your nodes on whatever hardware you want. Separately. There's a project that just is getting kicked off by the Solana labs team to modularize the existing SVM, to modularize the runtime. So what does this mean? That means that the runtime code is going to be able to be run a little bit more in isolation.
00:18:58.966 - 00:19:56.004, Speaker A: So this is a great step forward for developers for tooling for Devx. But what this could imply is a future setup where you have end to end fire dancer code, this high performance c code that rips through the whole network, and in a separate process, on the same machine. You could also be running the rust based runtime code that's been produced by Solana Labs. So you could, in theory, process the same incoming transaction stream by two runtimes in parallel, and it should give you the same exact output. So you get incredible safety by double checking all transactions, all account balances, making sure that there's not some critical bug that's present. If there's a bug in one, but not in the other, you would detect it immediately on the local machine. So all these things together are really pushing the state of the network, the state of Solana technology forward.
00:19:56.004 - 00:20:22.088, Speaker A: I'm super excited for this, but you don't have to hear it from me. The firedancer team is here in force. They are giving a whole bunch of super technical workshops, really interesting stuff tomorrow. This is all on your breakpoint agenda. I just wanted to highlight it here. You can hear from the team, hear it directly from these guys, check out the docs. Super exciting and really incredible accomplishment.
00:20:22.088 - 00:20:26.104, Speaker A: So thank you all. Thank you to the fire dancer team. Let's hear it for fire dancer.
