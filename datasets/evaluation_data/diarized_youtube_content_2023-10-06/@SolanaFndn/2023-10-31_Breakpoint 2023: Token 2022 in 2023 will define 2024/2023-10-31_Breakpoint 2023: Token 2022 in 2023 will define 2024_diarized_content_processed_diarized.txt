00:00:03.080 - 00:00:23.262, Speaker A: Okay. Hey, everybody. Thanks for being here. So my talk is very cheekily named Token 2022. In 2023, will define 2024. I can't remember who came up with it, but I thought it was hilarious. So you kind of just got to lean into it at some point, right? So I'm John, I'm one of the engineers at Solana Labs.
00:00:23.262 - 00:01:04.470, Speaker A: Been here for over three years, mostly working on, on chain programs. So I did like the first Amm token swap, did stake pools, eventually did some staking, did this thing, and once in a while, when the validator team lets me do things, I sort of poke around and have a good time. All right, so you might already be thinking, why am I back talking about this? Because I talked about it last year, described some of the stuff that token 22 was doing. The reason that I really want to talk about it again is we've got new advancements that are going to make it even more programmer friendly. So for the devs out there, this one's for you. And confidential transfers finally work. I cannot wait to show this to you.
00:01:04.470 - 00:01:32.388, Speaker A: This has been years in the making. Sam Kim, who's our cryptographer, unfortunately is not here, but he said he'd be watching. He's very excited that we're going to be demoing this as well. So maybe you don't even remember what it's about. So I'm going to give a full rundown of it. So essentially, SPL token needed more functionality, so we created Token 2022. We actually started after the first breakpoint in 2021.
00:01:32.388 - 00:02:01.388, Speaker A: I think it was Anatoly and someone else like, hey, can you work on this? It's like, ok, it sounds important, bang it out in a couple of months and then we'll be good. And here we are almost two years later. So the program is a superset of tokens. That means that everything that you are doing with token can also work with Token 22. And then you are allowed to opt into any extensions that you want, for either your mints, your token accounts. Gives you a whole bunch of extra functionality, and everyone loves to hate on the name. So at this point, I think we're stuck with it.
00:02:01.388 - 00:02:24.432, Speaker A: Or maybe not. We'll see. I'm not a marketer. All right, what are the updates? So high level, we've got four audits done, two more are in progress. The program is upgradable at the moment, so that we can push out any more changes we need. We will officially recommend it with 1.17, which is probably going to be like sometime January 2024.
00:02:24.432 - 00:03:03.874, Speaker A: And we'll have to also enable some features. We're going to do some more good ZK stuff in 1.18, which these dates are all subject to movements because if there's a security issue or something like that, we obviously have to push things back and then at some point hopefully we'll freeze the program. Never touch it again, never speak of it again except every single time your dapper whatever uses it. So maybe at this point I've won you over a little bit. What do I want to talk about? I'm going to talk about token metadata transfer hooks and then finally confidential transfers. So I'm hoping that you'll find all these a bit exciting.
00:03:03.874 - 00:03:35.752, Speaker A: So you might already be thinking, why did you do metadata? This is like kind of a solved problem. A ton of teams have already done this. The reason was because a ton of teams have done it. I want on chain program to be a much more open thing for any of the developers on Solana. So if you've got a really awesome protocol, I want it to be able to hook into whatever else we've got there. And also people would not stop bothering me about it, like, oh my goodness. All right, so how do you add it? I'm just going to do some really quick demos, most of them.
00:03:35.752 - 00:04:04.464, Speaker A: I'm going to be running some scripts. So I will create a token. This is all against us, the local network at the moment because you need the newest 1.17 for everything, even with a few extra changes. So I've got a little script over here which is going to go create a token, add some metadata to it. So if you'll see, I decided to give it the name over here of breakpoint 2023. I gave it a symbol, I gave it a Uri, really basic stuff.
00:04:04.464 - 00:04:34.016, Speaker A: And then what we allow you to do is add any other fields that you want. So if I wanted to add a custom field of breakpoint with a custom value of 2023, I can do that as well. So we're going to do that. So now you'll see down here, breakpoint 2023. Like, this is pretty basic stuff, but I'm hoping that it's going to get some people excited because you may be like, I already have my own metadata program. I love it way more than yours. That's fine.
00:04:34.016 - 00:05:09.868, Speaker A: I want you to use that. So what we've done is this idea of a metadata pointer inside of your mint which can point to any other account. So that could be, I guess I shouldn't name, I won't name any names, but obviously there's a lot of token metadata standards out there, so I won't necessarily pick one over the other. So you can just update your mint to point anywhere you want. This way we can have a world where there are 50 different metadata standards because you just need to look at whatever account you think is the right one. But this is just for the devs as a security thing. Just make sure that the two point at each other.
00:05:09.868 - 00:05:25.456, Speaker A: Otherwise I can create a mint. Say, like, oh yeah, look at my mint. It's a stable coin. And point at that. You don't want that to happen. So I've got that showing off as well. So then you'll see that I pointed it at the token program itself.
00:05:25.456 - 00:05:57.086, Speaker A: Doesn't really mean anything. But just to show you that it is possible, you might be thinking, can I just use my own program? Yes, we created an interface. Hasn't really seen a ton of adoption yet. It's just got made. But the idea is you just need to implement this interface in your program. Do any other extra stuff that you want, and then people that are using metadata will just be able to call into it, same as any other program that has this interface. But then you're thinking, no, wait, I just want to use my own token program.
00:05:57.086 - 00:06:10.304, Speaker A: And let me be as clear as possible. I want that so badly. I want everyone to be writing their own token programs. I don't want to have to be the one to do it every single time. It shouldn't be like that. This is supposed to be an open network. Please do your thing.
00:06:10.304 - 00:06:46.024, Speaker A: So in the meantime, I was almost going to tease like, oh, maybe that'll be token 2025. We do have some ideas for it, but it's all sort of in development at the moment. All very whiteboarding stage, let's say. In the meantime we have these things called transfer hooks. So maybe this is what's finally going to get you interested. So with a transfer hook, the Token 22 program will call into any other program that you want for your mint during a transfer, as long as your program implements this transfer hook interface. And we have an example program that you can use as well for this.
00:06:46.024 - 00:07:11.372, Speaker A: So let's see this in action. And just to sort of show this, I've got a fun, hopefully a fun little demo. Let's go into the example. So just to show that this works, I put this random message in here. Does anyone want, so like maybe a pg ish message that I can put into this program? Opos. I like that. Op.
00:07:11.372 - 00:07:26.724, Speaker A: Whoops. Opos. I don't trust my typing that much. That's why I have scripts, do a lot of things, but. All right, so I'll build this program. Great. Ok, so now we'll go ahead and run our second script.
00:07:26.724 - 00:07:56.412, Speaker A: It's going to go there. It's going to put this new program that we just built on chain. It's going to create the mint. So now you'll see here we've got in our extensions, we've got this transfer hook that's pointing at some sort of a program. Pretty simple. So the next bit, it's going to set up an additional account. So the way that we've done things, in order to give all of you as much power as possible, is encode additional accounts or account addresses in some other account.
00:07:56.412 - 00:08:25.840, Speaker A: So in this way, if your hook needs a whole bunch of other information, it can just fetch it. We've got, obviously some helpers to do that. So what I've done here is created an additional account. And I've told it, if you're doing a transfer with my program, I'm going to need this account. The instructions sysvar, the reason I used it is because it's like the way, way back example. Someone wanted this in their program, and I'm saying it must be read only. Did I have anything else here? Ok.
00:08:25.840 - 00:08:41.960, Speaker A: Yeah, actually, let's keep going. So then I'm going to create some accounts, I'm going to mint some tokens. Pretty simple stuff here. Well, I know it's a lot of terminal scroll, but this will all be online somewhere. And then I'm going to transfer a token. Great. Well, you haven't seen the best part.
00:08:41.960 - 00:09:02.184, Speaker A: Hold on. So now I'm going to confirm this transaction. Not this one. I'm going to confirm this one here. And so now you'll see in the logs, we execute token 22. It does a transfer within transfer. It invokes my program and it says opos.
00:09:02.184 - 00:09:36.294, Speaker A: Yeah. And so the cool thing about this is you can really do anything with this. We've made like a ton of, what's the word, customization for you to add any other functionality that you want within a transfer. There's some safety guards in there as well. Like, we're not going to give you signers the token signers. There's obviously a lot of technical bits to it, but hopefully the documentation will be clear enough for you. Okay, so you might be wondering how this actually works.
00:09:36.294 - 00:10:28.050, Speaker A: So the way that we did it was through some sort of dynamic account resolution where callers be it on the outside of the chain from our pc be it inside of an on chain program is going to read into an account, that extra metas account, and it's going to figure out like, what else do I need for this transaction? You call those helpers. The rest of it just works. And what's pretty cool, I didn't demo it here, but you can specify PDA seeds. So essentially what you can do is say, all right, if you're transferring with Mymint, with my transfer hook, you must also pass in an account derived from the sender's account, from the recipient's account, so you can create any additional functionality you want on transfer, which I'm very, very excited about. People have done some pretty cool things with it already. All right. If you're a programmer, you're like, that kind of sounds like a leaky abstraction.
00:10:28.050 - 00:11:03.746, Speaker A: It absolutely is. I will be the first to admit it. I had many, many arguments with many, many people about this, but to be honest, I think it's our best option for now. The best thing would be to do everything through interfaces. So you call into a program, you tell it like what do you need? And it tells you that would be the best thing possible. It's not really practical to do that in runtime v one, just because these things are expensive to call, but in runtimev two, which you should go see the talk tomorrow by Alessandro and Alexander, they'll do a much better job explaining it than I do. Hopefully as a developer, you appreciate all this.
00:11:03.746 - 00:11:32.204, Speaker A: A lot of this work is really to try and give all of you more power. And maybe at this point you're starting to be like, all right, can you just talk about zero knowledge stuff? Absolutely. So confidential transfers are possible with token 22 in 1.17 once we get some new syscalls and a native program enabled. As a reminder, only the amounts are encrypted, not the people. So it's not anonymous transfers. That's going to be the next thing, if legal's ok with it.
00:11:32.204 - 00:11:56.144, Speaker A: All right, so how can I do this? It's pretty easy. You'll just want to create your token and you'll enable confidential transfers. Auto and now we can take a look at this. This is the part I'm most excited for. Ok, so we've created our mint. We see here that it does confidential transfers, and the account approved policy is auto. This means that anyone can do confidential transfers.
00:11:56.144 - 00:12:28.714, Speaker A: We do have some functionality where you can make it by approval only, so not just anybody can use it, which depends on what you're trying. We've given so much flexibility to these things. So I think there's a good use case for it. Okay, so now you might be wondering, how can I as a user use this? It's pretty easy. You create your account as normal. Then you just need to configure your account to do confidential transfers. And then after that you just do your confidential deposits and then you transfer with the confidential flag.
00:12:28.714 - 00:12:49.604, Speaker A: There's a ton of stuff that goes on underneath because you need to create proofs, you need to upload them to the chain. You got to wait for some transactions to settle. But that's the basic gist of it, which I will show now. So now we're setting up our accounts. We're configuring. Okay, great. So you'll see here we've got the confidential transfer that's in our account.
00:12:49.604 - 00:13:13.464, Speaker A: We're approved. Great. You'll see all the balances are base 64 encoded zeros, which is also a call to my favorite Discord channel on the Solana tech discord, which is the Ah channel. Big shout out to all of the Ah people. I'm not gonna scream into the microphone, but all the ah. And then you'll see that we can do confidential transfers with this. Okay, well, hold up.
00:13:13.464 - 00:13:37.776, Speaker A: Hold your hold, hold it. You'll see after transfer, then you can, then you can definitely applaud. Ok, great. So now we've deposited some amount into our account. That's why these ciphertexts now have something in it. We don't know what. And then finally we're going to apply the pending balance to move it from pending into available because ZK is complicated.
00:13:37.776 - 00:14:10.584, Speaker A: So what happens is there's a possibility to frontrun people such that you just keep transferring amounts into their account and then they wouldn't be able to generate a proof to move any of their tokens. Which is why we have this concept of pending versus available. So only the owner can move things from pending to available. That means that they essentially always have access to their tokens, even if someone keeps transferring into their account. And then finally we're going to do this transfer. A lot of stuff happens, but it still feels pretty darn fast. So now you'll see this is our destination account.
00:14:10.584 - 00:14:36.864, Speaker A: You'll see that it's got zero for its pending, it's got something available. And if we go back a little bit, we'll see its balance is still zero because all of it has been deposited on the confidential side. And then you'll see our source account here has its available balance updated too. So that's it. That was the confidential transfer. Woo. Yeah.
