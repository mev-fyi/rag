00:00:05.120 - 00:00:28.490, Speaker A: Alright, so we're going to take a look at a couple different ways to transfer Sol. So the first one we're going to do is going to be from the client side. And you can see this is how we got it set up. Right. So we've got our test file here. We're just going to create a new key pair that we're going to transfer into and we're just going to use the system program transfer function and that's going to just return to us this instruction and then we can go ahead and send a transaction with that instruction. So pretty straightforward.
00:00:28.490 - 00:01:08.708, Speaker A: You just use the client side Solana web3 js to go set up the instructions, send them to the system program and we're good. And you can see there's the test right there that we ran. So to start, our payer had this massive balance here and our recipient had zero. And when we got finished you can see that our recipient had one sole and if you see the change here is actually going to be this three and this two here. So you can see we actually decremented our payer as well. Now if we take a look at our on chain example, this is our program here and you can see that we got two different types of instructions. So we can either use a CPI to make the transfer or we can use our program to make the transfer.
00:01:08.708 - 00:01:39.812, Speaker A: And what that basically means is the CPI version is going to be doing the same thing we just saw, right? It's going to go send instructions to the system program and the system program is going to make the transfer. The program transfer is going to be when our program owns these accounts and it's allowed to change the data so it can just directly modify its lamp or balance. So we'll see both. So you can see here, we're just going to kind of direct our program based on the instruction. We saw this in the processing instruction video. And here's our two functions. So here's our CPI one, right.
00:01:39.812 - 00:02:22.184, Speaker A: We're just using invoke classical CPI operation, right? We're doing the transfer instruction from system instruction. And then down here we're going to do the transfer soul with program, right? And you can see the difference here is we're not using invoke, we actually just go ahead and dereference the payer. And we do this tribe borrow mute land ports and we actually do that for both accounts. And this will actually give us a mutable reference to the lamports balance of that account and we can directly interact with it and change it. And this will only work if this program owns this account. So in this case, we're going to make sure both accounts are owned by our program and they'll be able to decrement this one and increment this one just like the transfer would. In fact, this is how the system program does it too.
00:02:22.184 - 00:02:57.196, Speaker A: So if you take a look at our instruction, you can see just like we've seen before, we're setting up the instruction metadata to direct which one to do. Down here we create the actual instruction and we just pass in these params here. And then here's our test. So the first one here we're going to use, we're going to have this test, one recipient and that's going to be to use the CPI version. We're going to do it using the system program, of course. And so we're going to go ahead and set up that instruction using the method we just saw and then we're going to go ahead and send and confirm that transaction. And that's of course going to hit this one here on the top and that's going to run the invoke one.
00:02:57.196 - 00:03:33.990, Speaker A: And then down here we're going to actually set up the instruction the same way. We're going to create two accounts that we're going to make sure have our program as the owner give them two soul each and we're just going to run transfers between them. In this test down here, same exact setup. You can see we're just setting up the program transfer enum instead. So that's going to send the instruction to this guy down here, right? And so now we're, our program is going to make the change to the lamp ports. And so then we're just going to print out the balances and we'll just see how that looks. And you can see another successful test, right? So we got our payer is decremented.
00:03:33.990 - 00:04:00.390, Speaker A: Our recipient was incremented in both cases. And you can see here is the two soul we funded and then we went down to the one there. Now here's the anchor version here. And you can see that it's actually going to be a little bit less code, which is always nice. So right in our lib rs we've got the two functions, the two instructions that we can send in same kind of thing, CPI and program. And this is actually what it looks like with anchor. So we saw anchor CPI, right, CPI context.
00:04:00.390 - 00:04:27.376, Speaker A: This is what the transfer one looks like for CPI. And this is again, if you want the system program to conduct the transfer. But down here, same thing. As with native, we can actually do the try borrow mute land ports function here and do a dereference and we can actually directly interact with the land ports of our account this way. So you can do this with anchor two. And then you see we just have two different contexts here. I didn't want to add checks here because I didn't want to add data types to these accounts.
00:04:27.376 - 00:04:56.010, Speaker A: I just wanted them to be owned by our program. So you'll see these checks here. But this stuff here is, is valid for the first one. And then our test file is also going to look exactly the same as our native one, right? So we're just going to do the same thing. Except this time we don't have to set up instructions like we did with another file, we just use the embedded methods from the idl. So nothing new. But either way we're going to hit the transfer sol with CPI one here, as you can see, same kind of setup.
00:04:56.010 - 00:05:25.918, Speaker A: Then we're going to create two new accounts. Again, two soldiers, make sure they're owned by our program and then go ahead and do the program transfer one on this one as well. So let's kick that off. And again another successful test. And so you can see that the two main ways we can do it on the program side is with a CPI over to the system program which is going to do the same thing we just did with the client and then also transferring with our program as well. And we saw the two ways to do it in native and anchor. And that's it guys.
00:05:25.918 - 00:05:29.134, Speaker A: So whatever one suits your use case. Now you know how to transfer solar.
