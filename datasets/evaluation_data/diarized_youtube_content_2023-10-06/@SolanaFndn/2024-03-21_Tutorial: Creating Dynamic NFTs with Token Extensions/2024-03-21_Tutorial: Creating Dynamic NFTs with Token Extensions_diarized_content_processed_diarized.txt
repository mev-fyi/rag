00:00:03.200 - 00:00:42.054, Speaker A: Hello everybody. Today I want to show you how you can use a new token extensions program to create nfts and also how you can add additional metadata to your nfts to save, for example, specific data about your character in a game, for example. So like a level experience or some kind of gold or in this case here, wood. So the whole thing will be built in anchor. So it will be very easy to call it from the client to mint an NFT and also to change it to add additional metadata. So this is a little example that I built. So I can just press this mint nft button and you can see that I can now mint one of these little beavers here for 0.006
00:00:42.054 - 00:01:15.050, Speaker A: sol and then it will directly appear here in my wallet. So I minted one earlier already. And the cool thing is now if I chop a tree here, what this will do is calls a function on my program and will collect one wood. So now the beaver has five wood and it takes it from this wood account here and it also costs one energy. But the nice thing is now that this wood is actually now saved on chain in the mint of this beaver. So you can see here he had 4 volts. And now if I refresh this on Solana FM, we can see that now it has five v.
00:01:15.050 - 00:01:41.204, Speaker A: So now you have actually the data directly saved in the NFT on chain, which I think is really, really cool. Soulscan does not really support this yet. So for them it just looks like an unrecognized token. But in the explorer, this also works. So if I reload this here in the Solana explorer, you can see now I also have five wood here. And now if I would chop another tree, then it would go to six wood and so on. And all of this is done in an on chain program which is written in anchor.
00:01:41.204 - 00:02:05.422, Speaker A: So let me show you how this works. So first of all, let's go here in the program. So here we have the instruction which is called mint NFT. And here on top, we will start and walk through this. So the first thing we need to do is we need to allocate some space for the mint account. And as we do by using the extension type, try calculate length function. And then we can add all the additional extension types here.
00:02:05.422 - 00:02:33.696, Speaker A: In our case here, we only need the metadata pointer. And then we will save the metadata directly in the mint. So we need to save some, allocate some extra space for that, actually. So the metadata pointer works like this, that you can point to an address and there it expects to be the metadata but you can also directly point it back to the mint. And then you don't need to create another account for this. But there's use cases for both. So sometimes maybe you want to use the same metadata account for like a bunch of different NFTs to save some space.
00:02:33.696 - 00:03:02.304, Speaker A: Then you can do it. Also just point it to another account. In our case we point it back to the mint and then here we calculate the lamp words that are required for this. So first for the metadata and then for the, for the metadata and the mint and then for the extra space that we need for that to save the metadata. Here we are just printing this out. You could probably later remove this because this costs extra compute. But then here we create the account and we put the required lamp words and the space that we need.
00:03:02.304 - 00:03:34.532, Speaker A: Then we assign this account to the token program. And then the next thing we do is we initialize our metadata pointer. And this is something you need to do before you initialize the mint actually. Otherwise it will not work. So here we put the token id, then we put the mint and then we put the authority that we want for this, for this extension and for the mint. So and in my case here we use then PDA for this. So we just create this nFt, this PDA which has a seed nft authority.
00:03:34.532 - 00:04:09.316, Speaker A: And yeah, I did it like this so that we can easily later in another instruction change this metadata because you could also use the signer but then the user who minted it will be the owner and the only one who can change it. But how we wanted it want that the program will be able to change it. So that's why we use this nft PDa here. Nft authority PDA to change the data. And then we put as a metadata address we point back to the mint like I just said earlier. Then we invoke this. Then the next thing we do here is we initialize the mint CPI.
00:04:09.316 - 00:04:40.092, Speaker A: So here we just put the address of the mint and then we call token program 22. Initialize mint. And we say this mint should have zero decimals because it's supposed to be an NFT and our PDA will be the authority and the freeze authority we don't need in this case. Or we have set it to none. Then this is how we get the signers for this PDA. It's just string and the bump. And then we get the signer here and then here we use it.
00:04:40.092 - 00:05:14.614, Speaker A: And here we actually finally create the actual metadata of the NFT. So we say the name should be beaver the symbol should be, be VAR and the URI is just a normal metaplex URL that I like. Metaplex JSon file that I uploaded to Arweave. And yeah, then we invoke the signed. And in this case now we need to have the sign up because this PDA will be the authority of this account. And yeah, here you could actually create your own standard now. So this doesn't need to be necessarily a Metaplex station.
00:05:14.614 - 00:05:45.554, Speaker A: There's also libreplex, Metaplex and there's like this tiny SPL standard. So if you want to build something new now, yeah, you can just experiment here and create your own standard also for this additional metadata fields. So this is how you now actually add another field to your NFT. One additional metadata field. So in this case I say the level should be one. And you could put all kind of key value pairs here. You just need to keep in mind that at some point if you put like a lot of them, then you need to allocate a little bit more space earlier.
00:05:45.554 - 00:06:19.158, Speaker A: And then the next thing is here we just create the associated token account which we derive from the signer and the associated token account. The authority will be our signer here and this will be the mint. And then we just need to put the system program and the token program. So this is how you create a normal account. And then we mint one amount of this mint to the associate token account of the people, of the person who signs this. So this is basically the definition of an NFT, right? You have one amount of a mint and the mint is frozen. So this we do here.
00:06:19.158 - 00:06:38.314, Speaker A: So we say the Mint authority, the mint authority type mint tokens, we set it to none. So there will be no possibility to create more of these tokens. And here you can see all the accounts. And here you can see for example like the PDA. So. And now I want to quickly run the test. So we call anchor test.
00:06:38.314 - 00:07:08.750, Speaker A: Skip local validator. I do skip local validator because I have the validator running here in the background. And you can see you can very easily also run this locally. You don't need to deploy any other programs for this. So I can just copy this signature here, I open the Solana explorer, I set it to localhost, I paste the signature. And here you can see this is now our created NFT. And here we can see on the min two to the token.
00:07:08.750 - 00:07:38.960, Speaker A: We can see it's an unknown token currently. And the metadata is beaver. And we have this additional metadata which is level one. And here you can put all kinds of different data. So I think this is really cool. And I want to show you now, like for example when I chop a tree which I showed you earlier in the app, we can now very easily just add another field here. So for that we just call on the metadata interface update field with the program token 2022.
00:07:38.960 - 00:08:10.656, Speaker A: But this could theoretically now since this is an interface, also be another token program that you deploy yourself. So everyone can now basically create their own token programs if they want to. I will stick with this one because it's safe and I know what it does. But it's very easy now to just create a new field. And in this case I call it wood. And I say the field would should be set to the wood that the player currently owns. And then you can see here in the slana FM that you can see this actually on chain in the token mint.
00:08:10.656 - 00:08:45.241, Speaker A: So I think this is really really cool. And now I want to show you quickly how this looks like in the JavaScript client. So this is next JS app that I prepared here using the preset create Solana game. This will create you an anchor program, a JavaScript client that supports compressed nfts and normal nfts and now also minting nfts and it will also create the unity client. Simply the unity client doesn't support this yet. So if someone wants to build this, it would actually be really cool. So someone could now go in and add an integration for the DAs API for example and implement the Token 22 program.
00:08:45.241 - 00:09:15.444, Speaker A: And then this would also directly work from a unity client. So if someone wants to do this, just contact the magic block team. I'm sure they will be happy if someone opens API for this. But here I want to show you how easy it is now to mint this. So all you need to call on the program is mint NFT. You need to put the sign up all the different programs and then the NFT authority which you can just derive like any other PDA, just from the string and the program iD. So yeah, I think this is really nice.
00:09:15.444 - 00:09:50.388, Speaker A: Let me quickly show you how you would now chop a tree. If you chop a tree you just put the normal data and you add the NFT authority and also the mint of the NFT. And then the program will be able to add this additional metadata here. So if you now want to use this to create a collection, this is certainly not yet available. This will be coming out in Solana 1.18. But then if you want to create a connection then you would use the group pointer extension. So basically you create a group and you create a member and then the group points to the member and the member points to the group.
00:09:50.388 - 00:10:22.970, Speaker A: And this is how a collection will be defined. How I did this in this example here is actually all the nfts. I filter them by the authority which is able to change them. So this is also like grouping them all together but it's not really a collection. But theoretically Phantom could now also group all the nfts by the update authority. Yeah, so this is how these nfts currently look like in phantom. So you can see that the metadata pointer extension is already supported here, but they don't really show the additional metadata yet.
00:10:22.970 - 00:11:13.152, Speaker A: But I'm sure they will eventually and so will the other wallets. And yeah, what you can do now is you can for example save the level and the experience of the player directly in the minimum. And then you could for example work together with the marketplaces like Magic Eden or Tensor or all the other ones and you can say hey, I want to also sort my nfts by one of the metadata fields. It's just like a key value store. So they could, for example you could sort them by level and then the level 99 character may be way more than the level 30 character. For example you could also have like a sword in there or resources that are used for crafting or so on. And you could also create a new standard now that, let's say one of the fields is for example image URL and then this tells all the wallets and explorers and so on to load this image.
00:11:13.152 - 00:11:48.036, Speaker A: And then you could for example have a character which evolves, for example his graphical appearance also depending on his level. So I think there are tons of cool possibilities. And if you want to try out this example, I will upload it to Solana developers token token 22 next week and then you will be able to just download it. And there's next JavaScript client in there. You can run the tests locally for the anchor program. You can also try out the unity project and yeah, maybe find the time to make it also work in the unity project because I didn't get to that yet. So that would be really cool.
00:11:48.036 - 00:11:54.756, Speaker A: You can just open a pr here and yeah, please try it out and have fun with it and see you guys next time. Bye.
