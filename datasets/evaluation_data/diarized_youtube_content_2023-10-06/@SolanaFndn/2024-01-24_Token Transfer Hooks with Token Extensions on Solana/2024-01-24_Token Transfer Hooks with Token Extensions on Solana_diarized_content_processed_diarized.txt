00:00:05.400 - 00:00:35.114, Speaker A: Hello everybody. Today we're going to talk about transfer hooks, which is I think one of the coolest extensions of the new token extensions program and what it allows you to do. It lets you add extra functionality to your tokens. So whenever your token gets transferred from one wallet to another, you can call certain functionality in a program that you deploy yourself. And yeah, you can just do whatever you want in there basically. So you can for example enforce NFT royalties. This is like one of the main use cases, why it was built for, but you can also do all kinds of other things.
00:00:35.114 - 00:01:14.526, Speaker A: You can for example, track certain things about your token or you can prevent certain people from transferring. So you can for example have a token which can only be transferred by people who own a certain NFT collection. Or you can have a token that costs something when you transfer it. So yeah, there are tons of cool possibilities. So today I'm going to walk you through some simple examples. So we're going to start by just getting it to work basically. Then we will add a little error so that we can see like hey, if you transfer more than 100 token at the same time or something, then it fails.
00:01:14.526 - 00:01:53.366, Speaker A: And then we will go a little bit more into detail and how you can add additional accounts to your transfer hooks and we will just add a counter so, which will count how often your token has been transferred. So, but first of all, let's go a little bit through the program. So like I already said, you need to deploy a program first. And then when you create the mint of your token, you will give this program id as a parameter. And then whenever you transfer the token, the token program will actually do a CPI into your program. And then in this function you can do whatever you want. So basically what in the end will be called is this function here, transfer hook.
00:01:53.366 - 00:02:36.538, Speaker A: And now if I call this the tests, if I run the tests, then we can look at the transaction and we should see actually this message here. And by the way, this is an anchor program, so it's quite easy to build and to run and to change. And now if I go here to the bottom, we can see hello transfer hook already. So, but how do we get there? Because it's a bit more complicated. So you deploy this program, but you need to implement this interface here, the SPL transfer hook interface with the execute function and the transfer hook function. Then here on the top you have as usual your program id. Then we have here initialize extra account metalist.
00:02:36.538 - 00:03:16.918, Speaker A: So whenever you create a program that you want to use as a transfer hook, you need to initialize extra accounts, because sometimes you need extra accounts and then of course you need to initialize this. In our case here, we don't have any extra accounts yet, so we just have an empty vector. Then we calculate the size of this vector, then we calculate the rent that this vector will cost on chain. And then here we create a PDA. So we have the seeds of account extra metas and we have the mint in here. And yeah these need to be exactly like this, otherwise it won't work. Then we create the account here.
00:03:16.918 - 00:03:45.416, Speaker A: So we just do a CPI to the system program to allocate some space. And then we call the init instruction here where we then put the data of the accounts of the extra accounts. And then we have the transfer hook here. This is where we will add our additional data later. And then we have this fallback function here. This is only here because the token program is a native program. And since we want to use anchor to make everything a bit easier, we have this function here.
00:03:45.416 - 00:04:28.264, Speaker A: And what we do is we unpack the data and then we match the instruction. And if the instruction is the transfer hook execute instruction, then we just take the amount, we convert it into bytes and then we call our own function here in this anchor program, the transfer hook function. And like this we also have it typed so we can see here all the accounts that we put in the transfer hook. So we have the source token, we have the mint, we have the destination token account. This is default from the old token program. And we just add more functionality here. And then we have the owner and then we have here our extra account metalist and we also need to add additional accounts here, which we will do later.
00:04:28.264 - 00:04:58.294, Speaker A: And yeah, this is the instruction for initialize account metadata. So we have the payer which will be our wallet. And then we have this extra account metas PDA, then we have the Mint, the token program, the associated token program, and the system program. I'm actually not sure, maybe we don't even need the associated token program. So we can check this later. But now let's say we want to add some functionality here. Or maybe let's first look at the tests actually so that you exactly know what will happen actually in these tests.
00:04:58.294 - 00:05:26.552, Speaker A: So what we do is we create an anchor provider, then we create our anchor program, then we have a wallet, we have a connection, you probably all know all these things. Then we create a new mint here. You can actually also do create yourself a vanity address if you want to call your token. Something was bird in the beginning or something. Then we have the decimals. Then we create our token account address. Then we create a recipient.
00:05:26.552 - 00:05:59.316, Speaker A: We basically just transfer a token from one token account to another here. So that's why we need these two token accounts. Then here we find the PDA that we need to pass into an instructions later. Then we have the first test here, which is create mint account and transfer hook extension. So what we do here is we figure out how much it will cost to have the token hook extension. Then we create this account for the token hog extension. Then we create the mint and yeah, that's already it.
00:05:59.316 - 00:06:20.552, Speaker A: And then we send this off. And here we create the token accounts and the mint. So we create 100 tokens. Then we create the associated token account for our wallet and for the destination wallet. And then here we create the mint. And then we send this off. And in the next one we create the extra account metas.
00:06:20.552 - 00:06:57.692, Speaker A: So here we call actually our own program initialize account matters with just the mint and the extra account metalist PDA here. We also need to add additional accounts if we want to add them. And then we send this off. So now we have our token mint, we have the extra account meta list initialized and then we actually do the transfer here. So we want to transfer one token. So we take one, two, and then the decimals to the power of ten and we create a transfer checked instruction. And here we put the decimals and we put our accounts and we also need to put the additional accounts that we need for the transfer hook.
00:06:57.692 - 00:07:41.834, Speaker A: So in this case it's our program id and the extra account metalist PDA. And then we sent this off and that's already it. So now let's add a little bit of more functionality here. So let's say for example, we want to have a token which can only be transferred if it's like a tiny amount. So let's say if the amount is greater than 50, then we want to throw an error, but we want to have a custom error of course. So let's add an error here. So we type error code and we call this here my, my error and yeah, oh, the copilot already helped here.
00:07:41.834 - 00:08:27.794, Speaker A: So if the account is too large, then we want to do this. And here we return not this, but we return exclamation mark an error, exclamation mark and then our error. And we have one too many of these. So now if we run the tests, we should actually get this error. So now we have actually our first functionality here. So you can now only transfer bigger amounts of this token, so you can already see this is red here. And now if I paste the signature into the Solana explorer, so you can set this to localhost and then you can just normally use your Solana explorer also with your local development setup.
00:08:27.794 - 00:09:00.222, Speaker A: All you need to do is you need to call your tests with detached. This means that the validator is continue running after you run the tests. So now in this error here we can see, hey, the amount must be less than 50. So no one can now transfer this token with small amounts. So this is really cool. But now let's go for a little bit more advanced example. So let's say we want to have a counter, right? So for a counter we need an extra account.
00:09:00.222 - 00:09:53.392, Speaker A: So first of all let's create this account. So we say this should be an account and we call it pub struct and we call it the counter account or counter, just counter. So now we have the counter here and then here in our transfer hook we also need to pass in this account. So I just copy paste what we had here. For the x count account metas, I put counter sseed, I remove the mint and this should be our counter and this should be an account and the info should be of type counter. Cool. So now whenever we call this transfer hook, we also have the counter here and we need to add the same thing here in the initialize account matters, but here we need to initialize it.
00:09:53.392 - 00:10:29.862, Speaker A: So we add in it and for the payer we put the payer and now we also need some size here. The size will be eight bytes, no, it will be nine bytes. No. Is this a new eight? This is a U 64 and we need eight bytes for the account discriminator. So this will be 16 bytes and it's not size, it's space I think. Yeah. So now we have this, now we have the accounts set up here, but now we also need to put in these extra seats here when we create this.
00:10:29.862 - 00:11:15.290, Speaker A: And for this is a vector of extra account matters. So what we will need to add here is we need to add a new account matter. So this will be probably an array of extra, extra account meta and let's see what we have here. So we have new with pub key, so you can just put any pub key, but we need a pdA. So we're going to do new with seats. And now we have the scenes, then we have the signer and is writable and we want it, it doesn't need to be a sign because it's just will save just the counter. But it needs to be writable.
00:11:15.290 - 00:11:58.534, Speaker A: So we need to put this to true. And here what we need to put is not just counter, I think we need to get them seed. So this will be a seed and a literal, and then this will be counter to vac. Not quite. So I think this needs to be counter to bytes to Vac. Let's see if this is correct. You can always just go into the source code here and see how it should look like this is a seed.
00:11:58.534 - 00:12:37.886, Speaker A: You can either have it initialized or literal and it's my seed s bytes to vacuum. Okay, so I think I did not quite write this correctly. So let's just copy paste this from here and it should be counter. And this is not quite right yet. Let me quickly look up the syntax on this one. So this is, should look like this actually. So now we have like here stead literal the bytes as counter as bytes to back.
00:12:37.886 - 00:13:04.482, Speaker A: So now we have one additional PDA that we need to pass in. So our program now is actually done. But now we need to go also in the tests and add this extra account. So for that we will go up here and we need to find ourselves a new PDA. So this will be the counter PDA and the seat will be counter. And in this case we don't need the mint. So now we have the counter PDA.
00:13:04.482 - 00:13:36.446, Speaker A: And now let's see where we need to add this. So we need to add this when we create the new account matters. So here is the initialize account matters. And here we now need to add the counter PDA, which is not quite right. Object literally may only specify known property and counter. So for some reason this does not work. So I actually had a little compiler error here.
00:13:36.446 - 00:14:20.424, Speaker A: So this needs to look like this because if the anchor program doesn't build, then also the types are not regenerated. And then of course in the tests I can't use the new accounts. So, but if this is okay here, then we can just anchor build this again. And now we should also be able to use the accounts here. So now we have for the initialized account metas we put the new PDA and we also need to put the new PDA here where we add the new accounts for the extra metadata here. So here I can also put our counter PDA. And it doesn't need to be a sign, but it needs to be writable because every time we change, we transfer this token, we want to update this account.
00:14:20.424 - 00:14:50.544, Speaker A: So it needs to be writable. So let's do this. Now we go here, back into the transfer hook. I commented out this check here and the copilot already knows what we want to do so that's nice. So we just kind of increase the counter by one every time we transfer. And now we want to print this as well. So here I gonna type token has been transferred x times.
00:14:50.544 - 00:15:21.974, Speaker A: Okay, I save this and now we do anchor test minus, minus detach. And now this should hopefully build and run. And here we have our signature. So we open this in the Solana explorer, paste this in here. And here we can see this token has been transferred one times. So how cool is that? So every time this token, no matter who transfers it, this will now always do a CPI into our program and increase this counter. So you can imagine you can do all kinds of cool things here.
00:15:21.974 - 00:15:51.808, Speaker A: The only thing you have to keep in mind is that you can't sign things here. So the signers are demoted when the CPI is done. Otherwise it would be super dangerous. But you can still do tons of cool things here. So there's for example, this other example here which does fees for transferring a token. So this one, every time you transfer a token, there's actually a little bit of soul that you need to spend when you transfer this token, for example. So that's really cool.
00:15:51.808 - 00:16:05.976, Speaker A: And yeah, try it out, build stuff yourself, be creative. I think there will be tons of cool new tokens and many opportunities in the next weeks and months. So yeah, try it out and see you guys next time. Bye.
