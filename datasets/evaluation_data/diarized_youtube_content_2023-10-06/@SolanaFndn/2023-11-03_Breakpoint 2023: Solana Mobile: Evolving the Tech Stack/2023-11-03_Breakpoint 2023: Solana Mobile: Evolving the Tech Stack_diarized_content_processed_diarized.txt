00:00:01.400 - 00:00:34.544, Speaker A: Hey everybody, my name is Marco. I'm a software engineer over at Solana Labs, so I work on Solana Mobile. I primarily focus on our SDKs and developer resources for the Solana mobile stack. All right, so today we're going to talk about a few cool new updates we have to our stack. So first of all, we'll talk about mobile wallet adapter 2.0. We'll talk about some exciting new stuff we have for iOS, and finally, we'll go through our developer resources and how to best get started on mobile. So let's jump right in.
00:00:34.544 - 00:01:23.674, Speaker A: Mobile Wallet Adapter 2.0 this is the latest update to our mobile stack on Android for connecting dapps and wallets. It's been designed to enable new use cases for wallets and dapps and expand on what can be done. Today, we hope this update will support the future of web3 on mobile and continue to drive mobile experiences forward. So what's actually new in mobile Wallet adapter 2.0? Well, we've refined our specification based on feedback that we've gotten from dapps and wallets using MWA out in the field. We've also aligned closer with the web wallet standard in the hopes of kind of standardizing interfaces between the web and mobile, as well as keeping up with the innovations and capabilities that are being developed on the web today.
00:01:23.674 - 00:02:22.274, Speaker A: We've also removed Solana specific parts of our protocol with the hope of enabling this protocol to be used on other chains in the future. So obviously, we're at Solana Labs, we're very focused on Solana and very excited about Solana, but we want our stack to be open and usable by anyone who wants to build on any blockchain. We've also added new feature extensions, so this should allow us to add new features to the protocol more easily, and we'll talk about that more here in a second. And finally, we've added support for sign in with Solana. All right, so feature extensions so feature extensions are a way for us to add new features to the protocol without needing to iterate the spec or create a new version. So you won't need to wait on our team to actually update MWA to like 3.04.0. Whatever it is, we can just extend the protocol directly and add these new features.
00:02:22.274 - 00:03:00.924, Speaker A: So this enables us to iterate a lot faster. Right, wallets and dapps can play with new features, and it gives more flexibility to them to play with the innovations that they want to see on mobile. So the first feature extension that we've proposed is called ephemeral signers. So if you're familiar with a lot of like Defi transactions NFT minting, it's very common to use this ephemeral signer account. It's like a temporary account that is also added as a signer on a transaction. So this feature allows wallets to issue those ephemeral signers directly to Dapps. So we've actually got a feature extension template up on our GitHub.
00:03:00.924 - 00:03:39.340, Speaker A: So anyone can kind of check that out and use that as a template to propose a new feature extension. So you could play with things like maybe burner wallets or signing transaction bundles or even sign transactions on other chains. So definitely check that out. We're excited to see what people come up with. Next up we have sign in with Solana. So sign in with Solana gives a better user experience for what is a common flow today in web3, where you're connecting to adapt and then typically signing a message in order to prove ownership of your wallet. So sign in with Solana combines these two operations into a single flow for users.
00:03:39.340 - 00:04:15.954, Speaker A: So this allows wallets to give a better user experience that users might be more accustomed to in web two for sign in. So this combines our existing authorize request with a sign message into a single operation that wallets can handle. Of course, this is an optional feature that gets exposed through our new feature extension API. So if wallets choose not to implement this, we can always fall back on kind of the old way of doing things with a generic signed message. So all of these features are available today. Mobile wall Adapter 2.0 is available now on our GitHub.
00:04:15.954 - 00:04:54.390, Speaker A: Our core SDKs have been updated. You can start integrating against those today. And of course we're working with the community to get Dapps and wallets updated as well as our community SDKs onboard. And I'm super excited to announce that Solflare is the first wallet to support MWA 2.0. Yeah, so they did a lot of awesome work leading up to breakpoint to support, so definitely show them some love. All right, so let's talk about iOS. So, you know, mobile wallet adapter has so far only supported Android, but we at Solana Mobile, we of course recognize the importance of iOS as a platform.
00:04:54.390 - 00:05:49.184, Speaker A: Right? We can't really say mobile stack without including both Android and iOS. So what have we actually been doing to enable building on iOS? Well, I'm really excited to show you what we have today and what we've been doing to enable building on the iOS platform. So before we get into this demo, let's talk about some of the challenges and why it's been so difficult for us to enable self custody on iOS. So iOS as an operating system prevents a few challenges for native Dapps apps are just heavily sandboxed on iOS at the operating system level. So that makes it really hard to establish a communication channel between Dapps and wallets. There's also no way to disambiguate or no way for us to know which wallet a user has installed. And so typically this leads to the user having to have a lot of knowledge about what's going on or maybe search for their wallet in a list, and the user experience is just not great.
00:05:49.184 - 00:06:35.936, Speaker A: So it's impossible for us to establish a mobile wallet adapter session like we can on Android, on iOS. And then even if we work around these technical problems, Apple's App Store policies have, let's just say, been less friendly than we'd like to web3. And so we're really just not seeing our community focus on native app experiences. We're trying to work around these problems using a lot of web experiences on iOS, right? So we want to help enable that. So we actually believe that wallet standard, the web wallet standard, is a better solution for iOS today. So by delivering a safari extension alongside your native wallet, we can actually work with all existing web apps today with wallet adapter. So we have a demo of what this actually looks like.
00:06:35.936 - 00:07:41.196, Speaker A: We've put together a iOS wallet demo to show kind of what this experience looks like on safari. And so before we jump into this, I just want to call out a couple things that we're about to see. So we're going to log into Jupyter. On Safari, we're going to connect our wallet, and then back in Jupyter, we'll set up a simple swap transaction, forward that transaction over to our wallet, and finally confirm that and look at the result in Jupiter. So let's check this out. All right, so let's dig in a little bit deeper into what we just saw. So as I mentioned, we logged into Jupiter on Safari, we hit connect wallet and our wallet is automatically detected here.
00:07:41.196 - 00:08:17.904, Speaker A: So we've injected this wallet into the page through the wallet standard. We see the name of it here, Safari web extension wallet. That's just the name that we gave our little example, wallet here. So once we select that the wallet can actually draw its own UI that we see here to allow the user to confirm that connection. It's going to return us back to Jupiter where it's going to have access to our public key and we can start setting up that transaction. Once we've sent that transaction request over to the wallet, it can again draw its own UI here to allow the user to understand what they're signing, view that transaction, and either confirm or deny that. So this all happens directly within Safari.
00:08:17.904 - 00:08:59.304, Speaker A: So the important thing that I really want to note here is that this wallet here is not a web wallet. This is a native iOS wallet, and it's using a safari extension to allow users to sign transactions on the web fully within Safari. So under the hood, this extension is actually communicating with native iOS APIs. So it's able to access the same user data and private keys that we have access in, in our full wallet app. So this comes alongside a native iOS app. It's not a separate install that users have to go and find, it just gets delivered right alongside the native app. And all they have to do is enable that within Safari.
00:08:59.304 - 00:09:46.224, Speaker A: So with this you can still deliver a full wallet experience. Users can manage their assets, look at their nfts. All the things that wallets are doing today will continue to exist in the native wallet app. And these safari extensions just allow users to securely interact with dapps on the web using those same accounts and private keys that they have in the native app. So this is better than other solutions that are available today because the user remains entirely on the web, right? They don't have to switch over to another application, they don't have to carry their web session over to an in wallet browser. And the wallet gets detected automatically since it's injected into the page. And wallet adapter can detect that they don't need to search for their wallet in a list or anything like that.
00:09:46.224 - 00:10:26.344, Speaker A: And most importantly, this solution works today with all Dapps right out of the box. So Dapps don't need to add anything, they don't need to change any code or add a new package. This just works immediately with wallet adapter. So we'd really like to see wallets adopt this solution on iOS. And that's why we've created this example wallet. So the demo that we just saw that is like a fully open source example, you can download it, you can play with it, you can build it yourself, use it as a reference in order to build this into your own wallet. So if you're a wallet that already has an existing chrome extension, Apple actually provides a really cool tool called the Safari web Extension converter.
00:10:26.344 - 00:11:34.044, Speaker A: And this tool allows you to convert any existing chrome extension over to Safari. Now obviously this is not like a one click solution right? You're going to still want to cater that UI and cater that experience to the mobile screen, but this is a really great place to get started if you already have a chrome extension that will get you building and then you can start just working on the user experience. So with these safari extensions, we can enable self custody on iOS with all existing web apps today. All right, so on top of this really cool example that we have the reference wallet for iOS, we've got a bunch of existing resources to help guide you on your mobile journey. So the Solana mobile stack is more than just mobile wallet adapter, it's more than just Android, right? We've got tools for multiple platforms and different mobile frameworks to help meet you where you are most comfortable. We've got everything from setting up your development environment and just getting started to testing your final mobile creation. We have the tools to help guide you from start to finish in building your mobile app and on your mobile journey.
00:11:34.044 - 00:12:12.450, Speaker A: So the best place to get started is going to be our documentation site docs dot solanamobile.com. So this is like the central hub for all mobile developers. We've got a QR code if you want to check that out. So on our doc site here we've got setup and integration guides for different platforms like Android and React Native. So how to actually set up your dev environment and get started. And then we have a bunch of really cool example apps for both Android and React native. So we've got some simple things like kind of hello world type apps, how to set up a transaction, how to sign a message, things like that, as well as some more kind of full featured examples.
00:12:12.450 - 00:13:02.060, Speaker A: Like we have an example game that actually interacts with an on chain program to store game state. We have NFT minting app interacting with an anchor program, stuff like that, right? And if you're familiar with the NFT minting app that we launched on Saga called Minty Fresh, we have a fully open source version of that available on our GitHub. So that's like a really cool example of just a full native Android app. So that interacts with native Android APIs. It sets up a complex minting transaction, it uploads assets onto decentralized storage and finally uses MWA to sign those transactions. So that's a really good example of how to build a complete app on Solana. So in addition to these example apps, we also have some really cool testing apps available to help dapps and wallets test their MWA integration.
00:13:02.060 - 00:13:59.764, Speaker A: So dapps can test against our reference wallet and wallets can test against our reference dapp. And so this gives you a way to test your MWA integration in like a fully debuggable environment where you can add log statements, set breakpoints to really dig in and work out any hiccups that you might have in your MWA integration. And finally, on our dock site, we have some links to some really awesome community SDKs that our ecosystem has built for mobile. So on top of our Android and react native resources that we've built, the Espresso Cache team has built a really awesome flutter SDK for mobile wallet adapter. So if you're a flutter developer and you want to interact with wallets on Android, that's going to be a great tool for you. For all the game developers out there, got a couple really cool plugins for different game engines to help you do things with Solana. So magic block has made the Solana unity SDK.
00:13:59.764 - 00:14:29.508, Speaker A: So that's kind of a full featured Solana SDK for the unity game engine. It's got stuff like mobile wallet adapter, interacting with rpcs and building transactions. So that's a great resource for you there. If you use Unreal engine and you want to interact with native wallets on Android, the Caveworld team has built a MWA plugin for Unreal. So that's another great resource. And finally, we have Solana KMP. So this is a really, really cool multi platform Kotlin library that targets both Android and iOS.
00:14:29.508 - 00:15:04.274, Speaker A: So this covers things like building transactions, serializing them, sending them to rpcs and confirming them on the network. So this is actually a rebuild of an older library that was just for Android, and it's been updated to now support Android and iOS. So we at Solana mobile, we're really excited about the future of Web three. Right? Mobile is just, it's huge. It's how most people interact with the Internet today. And so we're here to help drive that future on mobile. We want to help you build, we want to help you innovate, we want to continue to drive the mobile experiences forward.
00:15:04.274 - 00:15:22.860, Speaker A: So again, please check out our doc site. Join us on Discord. It's a really great community of builders. It's a great place to ask questions, get help. Someone's probably been through the same problem that you might be working through. So it's just a really great place to connect with other builders, get help and show us what you're building. So thank you.
00:15:22.860 - 00:15:23.364, Speaker A: Appreciate your time.
