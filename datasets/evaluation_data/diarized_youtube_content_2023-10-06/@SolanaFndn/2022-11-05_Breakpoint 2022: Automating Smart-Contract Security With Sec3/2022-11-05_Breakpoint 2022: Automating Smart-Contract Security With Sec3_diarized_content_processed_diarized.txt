00:00:04.160 - 00:00:22.754, Speaker A: Next up, I wanted to introduce a really important topic, something that sounds like something that a lot of people here will care about, which is automating smart contract security. And so I wanted to introduce Chris Wong of SEC three, who's going to discuss how SEC three can help you do that. So give a big round of applause for Chris.
00:00:35.574 - 00:01:10.614, Speaker B: All right, how's everybody doing? Great. Good afternoon. My name is Chris Wong from sex three. This is my very first time to the breakpoint. Very humbled, actually, to be given the stage here to share with you some of our thoughts regarding automating smart contract security. So in the next 220 minutes or so, I'd like to cover a few topics. First, why automating smart contract security is even important, given that we have security audits.
00:01:10.614 - 00:02:09.054, Speaker B: I'll use two examples drawing from our experience, hopefully to make a case for that. Then I'll list some of the existing solutions out there today in Solana ecosystem so you can use. And then most important to me today is I want to talk about security post deployment. I want to make a case, hopefully convince you there is a really good opportunity to build a solid solution to define smart contract in real time on chain. And if time allows, I'll do a small demo. And afterwards, I want to talk about some of the limitations in some of the solutions I talked today. So let's, before we get into the topic today, allow me to do a quick introduction about ourselves.
00:02:09.054 - 00:03:06.684, Speaker B: So, who is sex three? What do we do? Sex three? All the letters in our name, written in lowercase, actually derives the name from two words, secure web string. We are a security research firm. We focus on preparing Solana products like yours for millions of users and for millions of users you are going to onboard in the future. What do we do? First, we provide a range of services around security audits. We can examine your smart contract, we can look at your front end, we can look at the whole thing. We even do security related trainings and consulting as well. What is more relevant to today's talk? Equally important for us is that we're building a set of automated security tools for the system.
00:03:06.684 - 00:03:51.390, Speaker B: So what are the tools? First, we have a command line based on premise, so you can download to your computer completely free. It's a vulnerability scanner. It's fast. It scans some of the most common vulnerabilities, such as overflow, underflow, account validation, so on and so forth. This is our first product in the ecosystem. I'm happy to report that this tool has been downloaded more than 30,000 times. The only reason I brought that number here today is, it speaks volume about what a vibrant developers community we have in Solana.
00:03:51.390 - 00:04:18.644, Speaker B: That's something to celebrate. We also have, we call it x ray. It's a software service, security software platform. So you can use a web interface to upload your smart contract. We will do the scan for you right now. It covers over 50 types of security vulnerabilities, and we keep adding to it. And also we're adding a few other components into the platform.
00:04:18.644 - 00:04:58.684, Speaker B: This is what it looks like. Last piece is what we call Washtower. It's a real time threat monitor after you deploy your contract to the chain. So with the introduction out of the way, let's dive into the topic. So why automating security for smart contract is even important? Especially given that most projects today, before they launch, they go through a security audit where some product even goes through multiple audits. Excuse me, oops. All right.
00:04:58.684 - 00:05:34.544, Speaker B: But if you look at the, the product has lost funds in the past. Despite they have gone through security audits, some have gone through multiple security audits, they still lost funds by burning up. That don't get me wrong, by no means. I'm assigning blame to auditors. As a matter of fact, secretary, we do security audits as well. We know how valuable security audits do. It's invaluable work, and most auditors do excellent, excellent work.
00:05:34.544 - 00:06:00.654, Speaker B: However, we're all humans. Humans make mistakes. Even a small mistake can open door for a big loss. Sometimes and never before in history has so much value being directly attached to a piece of software. The keyword here is directly. So that's why we believe tools are very important. Tools and humans are complementary to each other.
00:06:00.654 - 00:06:39.124, Speaker B: There are things that humans find very difficult, but tools find quite easy. And humans are better in terms of ingenuity, creativity, and dealing with things unknown and finding corner cases. But for tools, if within their capacity, they can do it consistently, they can do a very good job. The other reason is really scalability. And as we know, human expert like you guys are not very scalable. They tend to be very scarce and they tend to be expensive. It takes time to grow into for somebody to grow into an expert.
00:06:39.124 - 00:07:20.450, Speaker B: Tools. On the other side, software is one of the most scalable things human being ever invented. So let me use maybe two examples to illustrate those points. First, I'll draw experience from our experience in building a checker into our actuarial software. So this checker, there's this kind of vulnerabilities, is so called semantic inconsistency. I guess to explain it. And the core of it is really that two things or multiple things are associated logically, but they do not necessarily show up together in the same spot.
00:07:20.450 - 00:08:23.870, Speaker B: If I can make an analogy that when you enter a dark room, you open the door, then you turn the lights, but the door and lights may not be in the same location, they may not be associate exactly timing, but logically they are associated. If you find in your software, one thing is missing, it's a reflex, something might be wrong. So this kind of issue is difficult for developers because they need to make a conscious effort to really dig into code, because those are, those two things could be thousand apart, functions apart, but really good for tools to do that. So we actually build quite a few of these kind of checkers into our software. For example, we have a checker there to check when Sonata developers use anchor framework. Sometimes you use this framework inconsistently across different spots. So we build this checkers to go through the code, go through every code path exhaustively to check for things very consistent.
00:08:23.870 - 00:09:15.380, Speaker B: So we have used these checkers, I mean it's pretty popular and you know, we have used checkers to consistently finding issues that developers sleep, developers check. Another example is that it's how we dog footing x ray. It's another piece of software or it's a piece of software we're building. And we have a security audit team. Our team is the most avid and active user of our own software. Though our team and our two working together, I think that closely working model make both our team and two better. Because every time our team finding a new type of issue, our development team is going to design a signature and build into our tool.
00:09:15.380 - 00:10:03.492, Speaker B: And so our audit team has a tool has better coverage and as the user more they have chances to further validate those results, to say those results are true positive or false positives and giving that feedback loop, the tool gets better. Our development team have chance to further validate the checkers and refine the algorithm and adding corner cases. So by working closely together, tools get better, our team gets better. So what can be automotive? So this is the chart. If we look at this chart, I really separate the full life cycle of a protocol into two phases. The first phase is really dormant. You do a lot of coding, you try to build field features, sometimes you do refactoring, you fix bugs.
00:10:03.492 - 00:10:52.654, Speaker B: So there's a whole range of solutions right now out there that can help you do that. Development framework, scanners, linters, including our x ray, testing fatty frameworks and help you to do tasks and some even go further to do formal verifications. And then there's another phase which I will touch, which I'll discuss later in the presentation is on chain. Once you deploy your smart contract to the main app, what do you do? So here's a list of some of the solutions out there. The space moves very fast and people are developing very hard in the space, so by no means this is an exhaust list. So if I missed something really interesting, please let me know. We're happy to learn as well.
00:10:52.654 - 00:11:20.626, Speaker B: So on top of the list, I'll just mention a few. I'll highlight a few. On top of the list, there's an anchor. Anchor is a very useful framework. Not only anchor greatly improve the dropper's efficiency, but also anchor does quite a few security checks for developers as well. So you don't have to do that. There's a vrust worth mentioning.
00:11:20.626 - 00:12:03.396, Speaker B: Vrust is open source. I wouldn't be complete if I don't mention that. Vruston the major contributors of Vedras, including one of our co founders, Jeff and his students. He's a professor and taxi NM. Veras converts ras source code into an intermediate representation, so called IR, and then build an algorithm on top of that to check for security vulnerabilities. There's a paper to be published soon. I believe that the open source code has been validated on over 100 Solana products, and the result is quite good.
00:12:03.396 - 00:13:12.908, Speaker B: The tool discovered more than a dozen security vulnerabilities didn't service before, and at least three of them are critical. So I encourage everybody to check out that software and even better, to be a a contributor. On the testing side, I will highlight Neodymium's POC framework. Neodimes POC framework is an excellent tool to help you simulate in a local environment of your smart contract. Also, you can combine a scanner, such as x ray, with neodym's POC framework to drive to the bottom. So a scanner will give you a bunch of warnings, and for each one you can easily and quickly conveniently build a testing framework to try to explore it to verify whether that warning is really true or not. There's also formal verification, which really means they're trying to use mathematic proofs to prove certain security attribute.
00:13:12.908 - 00:14:00.114, Speaker B: I'll just give you one example. There is. If you withdraw from account, the balance after the withdrawal should be mathematically proven to be sound, so you don't have a security issue there. Also, I like to mention that within the move prover, there is an important, very important component called Z three, one of our tech series co founder Nick. During his PhD work, he wrote a big portion of the D three solver. Then lastly, is our watch power in dubious on chain threat monitoring. So I guess it's a good point.
00:14:00.114 - 00:15:10.886, Speaker B: It's a good point to switch to post warmth security, which I'd really like to spend some time talk about. Once a smart contract is deployed on chain, I think the security, at least in the past, becomes a game of more reactive and waiting for something to happen. More manning work. Have you ever wondered, is somebody trying to mess up with your smart contract at this very moment? Have you ever? Well, in that case, what can you do? What can we do about it? What can we do to build a defense system in real time for smart contracts already deployed out there? Is it possible to detect and stop attacks in real time? We believe the answer is yes, and I'll try to explain our reasoning from two aspects. First, let's do a quick reveal of what's in common over the past. Actual hacks, what do they have in common? What we can draw from them. For one, almost all hacks crafted one or more fake accounts.
00:15:10.886 - 00:15:40.574, Speaker B: You need an account to supply data to slot a smart contract in order to manipulate. So you have to prepare that data. For two, almost all hacks involve multiple transactions. You need to prepare the data. You need to supply that data to the smart contract. You use that to manipulate smart contract and gain some access control, and then withdraw funds in multiple steps for three. It takes time, at least for a few minutes.
00:15:40.574 - 00:16:22.356, Speaker B: And sometimes we have seen cases, hours, even days. And that's a surprise to me when I first saw that number. In other words, there is enough time. There is enough time for you to detect it and do something about it. Another important aspect I hope to be able to build a case is Solana's unique programming model. Solana's programming model is rather unique in that it decouples data and code unlike some of the other chains. Some other change that the data is sometimes in the smart contract itself.
00:16:22.356 - 00:17:06.554, Speaker B: This is very, very intuitive, easy to understand. Solana is different. This actually has quite a bit of advantages. It enables many copies of your smart contract deal with different inputs, different data at the same time, running in parallel. So that's one of the key reason why Solana has better throughput, but also it has security implications. It can, from here, you have opportunity to build a better security system. So, as we discussed, attacker must do at least two steps to launch attack, prepare the data and use that data.
00:17:06.554 - 00:18:46.984, Speaker B: Right? So this gave us opportunity to be able to detect in step one when they prepare that data and try to do something in step two. So to do that, how do we do that? I guess, number one, we have to monitor all on chain activities and be able to tell the malicious activities from the normal ones. So we built this engine that we can continuously take in data from on chain in real time and then learn what is normal, what is abnormal, and we call it invariance. I'll give you a few examples. What is the invariance? So, for example, when a user interface a smart contract, it provided in that input, the fourth input account, it should always be essentially a pointer to the system program. If for some reason somebody supplied that account to a different program, that's the red flag that breaks invariant, because that account should always be a system, should always point to a system account. Another example, even though this is one, is a more weaker one, is that if a user, if your users consistently in the past doing transactions less than 1000, so then all of a sudden, if somebody submitted an instruction to do transactions over 100,000, that's another big flag.
00:18:46.984 - 00:19:33.370, Speaker B: So when a transaction or a serious transaction violates or violent or violate one inverter or multiple invariants, you can build a different degree, a various degree of confidence, something is going on. I'll use a real attack as a case study to demonstrate the concept. This is a simplified real case. So just to illustrate the concept. So I took out some of the details. So on the left side is what a normal user interact with that smart contract. Essentially, this is a deposit some tokens on chain one, and then they draw different tokens, but with the same value on chain two.
00:19:33.370 - 00:20:08.484, Speaker B: Okay? So the user first interact with the chain, with the smart contract on Solana side is that they send a verified signature associated path payload. Payload is really a fancy word for the value of the token. Then you post that signature and payload via smart contract. Then you transfer the payload. So it's three steps, easy. That's when things are normal. What the monitor can learn from that, as a monitor keeps learning from that transaction.
00:20:08.484 - 00:21:14.044, Speaker B: First, it learns even without the source code, okay? So when users supply that instruction, the force account should always point to a system account, okay? And then the payload amount should match the other chain, because if you deposit x in the other chain, you should only be able to withdraw, well, withdraw same value on Solana. Third, even though this is a weaker environment that we have learned over the transaction period, maximum payload is less than 1000. Okay. And then in a real attack, what happens? Attacker actually supplied the instruction, replaced that system account pointer, and pointed to a smart contract the attacker launched. So each of those steps, the monitor find now the force account does not point to a system account anymore. That's a big no no. That's a red flag.
00:21:14.044 - 00:21:51.008, Speaker B: And then the value submitted does not match the other chain anymore. That's another red flag. If you wasn't sure in the first step, I think by now you should be very sure something is happening. You should do something about it. And then there's another, even though it's a weaker one, that the instructions submitted was to withdraw more than 100,000. That's a two degree of magnitude bigger. I'll do a small demo.
00:21:51.008 - 00:22:18.224, Speaker B: This is a replay of the actual transaction. Okay, so the setup of the demo is that we'll play 100 transactions right before the attack happened. Okay. And our monitor in the background continues to learn about the environment. So set up the monitor system. Then when the attack actually happens, the system will alert you. There will be three alerts, each highlighted in red color.
00:22:18.224 - 00:22:48.284, Speaker B: We intentionally made the phone so small so I wouldn't be able to see anything. I'm sure you are able to see everything, so you just have to trust my words. Open. So the transaction gets played. There's 100 transactions, it's fast forwarding, and then the system start learning. The system actually learn more variants than the three more environs. Then the three invariants I talked about.
00:22:48.284 - 00:23:09.824, Speaker B: Okay, then that's the first alert. That's when the hacker supplied in their input a different pointer than the system program. That's the first alert. And then the second alert. Oh, this is the first one. Sorry, this is the second one. This is the third one.
00:23:09.824 - 00:24:12.234, Speaker B: Apply the same concept along the same way. We can build a lot more customized monitoring. In stack three, we call it bots, to do different things. In my mind, essentially, it's taking in data and apply certain domain knowledge, in our case is security domain knowledge, and then process that data, extract useful information, and use that information to do something. We encourage the community to work with us that we're just starting on this, and we'd like to hear from you what you like us to build for you. What are the things that can make your protocol more secure? And we have that domain knowledge. We hope to be able to work with you on those things to really understand your needs.
00:24:12.234 - 00:24:48.530, Speaker B: So I have a little time left, so I'd like to go over this. It's silver bullets. The solutions we talked about today, automated solutions for smart contracts. Are there silver bullets? In my opinion, there's very few silver bullets in life. Also in this case, I don't think there's any silver bullets. Almost all tools have limitations. There are things that tools can't do and there are things tools cannot do.
00:24:48.530 - 00:25:22.954, Speaker B: I'll just pick on ourselves in this case. So we have this scanner x ray. It scans more than 50 types of security vulnerabilities. But here's the but this type of scanners, assuming you have a dial, you can dial all the way to the left, under which the tool will leave no dials unreported. Essentially report everything suspicious. Okay. Or you can dial the dial all the way to the right.
00:25:22.954 - 00:25:49.172, Speaker B: In that case, the tool will only report to you. There's a warning when the tool is 100% sure this is an issue, which way you would prefer. It's a hard choice because either way there's pros and cons. I like to dial it to the left. That's where our tool is. Because security is important. Any small issues can lead to big loss.
00:25:49.172 - 00:26:05.188, Speaker B: Right. So we want to present to you everything we are suspicious of. So you can do some investigations and validations. But it takes work. It takes work. So some people don't like that. Some people don't like seeing 25 warnings, right.
00:26:05.188 - 00:27:00.804, Speaker B: And after investigation, only find five issues. But in my opinion, even though even one issue is worth the effort, and also every tool, it takes effort, takes resources, takes time to bring it fully into your workflow, into your system to make it work for you. Again, I'm picking on our system called x ray, is that we actually provided a range of user features for you to start using the tool and further validated customer to your needs. Label those, label those false positives. So the tool learns if on a stable code base over time, if you put into the work, if you work with the tool, then you'll find the tool gets better and better. Tools know your code base better and better. It generates better, better results.
00:27:00.804 - 00:27:40.428, Speaker B: But the developers need to put in that work initially. So I'm a firm believer, we are a firm believer of tools, even though, as I said, we run two arms, we have security audit at the same time we're building tools. We firmly believe each side is very important. Everybody should have hopefully check out both to make both solutions work for you. I think I ran out of my time, maybe have time for one or two questions. Most. Thank you very much.
00:27:40.428 - 00:27:47.584, Speaker B: Appreciate it. Again, I really appreciate that, you know, Solana, bringing us all together here in this great event.
00:27:49.284 - 00:27:50.364, Speaker C: Thank you for the talk.
00:27:50.444 - 00:27:51.064, Speaker B: Please.
00:27:52.164 - 00:28:09.210, Speaker C: I was curious if it is an option to hard code the accounts in the program code so that whenever a function is called, you can verify, let's say in the case when the accounts are predefined.
00:28:09.402 - 00:28:11.074, Speaker B: You mean hard coded? Yeah.
00:28:11.114 - 00:28:20.090, Speaker C: So let's say like the first deploy a program, then create an account and then redeploy it with the account id.
00:28:20.162 - 00:28:48.492, Speaker B: Hard coded. Yeah, I think that's just a different program model. In that model, you put the code itself in the smart contract. Again, Solana is a different programming model, which I think is a better programming model, is that it's not a hard coded number, it's a user supply input. All data in Solana smart contract are provided as inputs. All data. So that's just a programming model.
00:28:48.492 - 00:29:03.084, Speaker B: So you can have many copies of using different inputs, but the crack input, so. And run your smart contract in parallel. Thank you. Thanks. Hello.
00:29:03.784 - 00:29:27.774, Speaker D: So you were saying your automated tools could scan and detect potential vulnerabilities and attacks happening. So like, if your tools detect an attacks happening on a program, what exactly would the maintainers of that program be able to do in the short time that they have to potentially stop the exploit and attack from happening?
00:29:28.314 - 00:30:05.604, Speaker B: Yeah, I guess the question is, let me just repeat the question. The question is that in the case you detected something is happening, what can you do about it right there? I guess there are multiple ways. I just thinking aloud, I guess we're still developing solutions, really working with protocols and products on those kind of things. One idea is that we just provide an API. It's up to you to decide what do you want to do about it. You can have a kill switch, you can abort it, you can freeze it, you can do all sorts of things. So it's really up to you.
00:30:05.604 - 00:30:37.914, Speaker B: Or what we can do is that potentially an on chain smart contract. So to process that and generate that signal and use some sort of multi sig mechanism to work with the protocol to do something about it. Right. I guess it's not an exhaustive list. There's some other ideas that will also be considering as well. I think, I think I read all it my time. Apologize.
00:30:37.914 - 00:30:43.014, Speaker B: Right on time. So thanks so much for listening. Appreciate it.
