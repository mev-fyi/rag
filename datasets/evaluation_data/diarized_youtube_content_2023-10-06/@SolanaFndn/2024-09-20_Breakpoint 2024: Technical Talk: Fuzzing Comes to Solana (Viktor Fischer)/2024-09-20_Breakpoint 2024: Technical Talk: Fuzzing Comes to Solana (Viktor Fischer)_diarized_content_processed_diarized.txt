00:00:03.360 - 00:00:29.631, Speaker A: All right, so fourth break point. Yeah, 6,000 people. So exciting. Who here has medlads? All right, that's not the purpose of my talk though. I am part of Solana ecosystem since 2018 and I founded in Iran Rokui X. We are basically infrastructure engineering firms. So we run validators.
00:00:29.631 - 00:01:02.205, Speaker A: Tomasz here is the God himself. We run validators. We also provide liquidity to defi protocols like for example Camino. We run solvers for Orumhall, Mayan dbridge. So think about us a bit like Citadel running infra, providing liquidity, running the transactions on top of it. In 2021 with Dushan, my business partner back then we realized that actually Solana will also be having hacking risks just like Ethereum. And we were based back then in Prague.
00:01:02.205 - 00:01:49.703, Speaker A: Our office was just in front of Czech Technical University. And we noticed there were a group of very smart professors at the Czech Technical University because actually not many people know. But 30 years ago, all the antivirus software Avast AVG as said, they were actually created in the Czech Republic. So there is a massive like, you know, machine learning AI know how within every university because then these antivirus companies are actually, you know, sponsoring and giving grants to those universities. And so we Dushan, we noticed those professors and we told them, hey, let's create a smart contract auditing firm. So Aki was born in 2021. Aki has a team of 20 people.
00:01:49.703 - 00:02:13.049, Speaker A: We actually also invested into Aki half a million dollars. They never used it. They were profitable from day one. And they are now doing three things. The first one is smart contract audits. Typical smart contract audits, you know, three months project. Second thing is they are running schools of programming, Solana and also now an auditing school.
00:02:13.049 - 00:02:46.141, Speaker A: And the third thing they are doing is publishing open source auditing tools. So we'll talk about this today. In terms of their audits, they have 134 audits that they run so far for around 40 clients. So on average it's three audits per client. Their Solana clients are Marinade, Neon, Helio and their EVM clients are Lido or SEI for example. And they're continuously doing audits of those companies, including the fastest in terms of their schools. They had so far around 3,400 applicants.
00:02:46.141 - 00:03:16.061, Speaker A: The fourth school, fifth school of programming, finished with 42 graduates. It's actually very prestigious because they run it like a university. So at the end you get like an NFT graduating from aki. And very recently they also launched an auditor's bootcamp. It's running currently there are 750 students. So altogether they have roughly 150 graduates from 1500 students. So please join also the next school of Solana.
00:03:16.061 - 00:03:46.247, Speaker A: It's a programming school. It will start next month. Here's a QR code. You can find the URL. Now who knows what is fuzzing? Okay, so fuzzing is basically software tool which is dynamically testing your code. So it compiles your code and then it generalizes, it generates random numbers and then tests your code. You know, 1,101 million iterations.
00:03:46.247 - 00:04:19.503, Speaker A: We will see a demo soon. The open source tool by Aki is called Trident. And why we think it's useful because yes, EVM chains have most hacks around 8 billion. $8 billion was hacked currently across all blockchains. 1 billion on Solana. Still, you know, it's 13% but we think as we provide more value on Solana this will increase. So fuzzing is a tool which is used currently very normally in Web2 and also in EVM ecosystem.
00:04:19.503 - 00:05:00.779, Speaker A: In EVM ecosystem the tools are called Echidna, which is a tool by Trail of Bits, Foundry, Medusa or Wake. Wake is actually developed by Aki for the EVM ecosystem and for Sonana. There is only one open source tool for fuzzing and it's called Trident. Let's talk about Wake first. Wake was launched in Aki before Trident. It already protects around 30 billion of TVL. Interestingly, it found a medium bug in Lido in a smart contract called stonks which has 24 billion TBL.
00:05:00.779 - 00:05:28.003, Speaker A: So fuzzing is actually useful. Lido accel are safe, they use fuzzing constantly. Because the advantage is once you have your fuzz tests then you can just continuously use them to run your program. Every time you have a new iteration, you have a new commit. Boom. You just run the fuzzing test when you are asleep, for example. But again like you cannot just fuzz your code if it's not very well written.
00:05:28.003 - 00:05:54.415, Speaker A: So let's talk about the basics very very quickly. Important is good code quality, you know, use anchor framework, have peer reviews, well documented code and well structured. Number one. Number two, write your unit and integration tests on anchor. Number three, use fuzzing and only then go and see expensive auditors. Because fuzzing you can do yourself. And I'll show you how.
00:05:54.415 - 00:06:19.859, Speaker A: Trident, the open source fuzzing tool we are talking about right now was in development for three years. This includes Awake. It was launched in May this year. And this is how it works. So when you Launch it. You will see you launch it by typing Trident Fuzz run fuzz zero. That's your test and then you can see here it's like launching many iterations to test your code.
00:06:19.859 - 00:06:59.199, Speaker A: Richard, are you fuzzing your code? Of course, quantstamp is fuzzing their code. I hope so. Let me now switch to the demo. Ok, so I think you still don't see my screen. Do you see my screen? No. So okay, and I do mirror display. You should now see my screen.
00:06:59.199 - 00:07:20.085, Speaker A: Yeah. Okay, excellent. So let me just put this. So this is the GitHub that you see when you go on Aki blockchain Trident. You just copy the GitHub repository locally. When you program you see here documentation, I have it open. Super simple.
00:07:20.085 - 00:07:58.029, Speaker A: You know how to get started, how to start fuzzing and actually if you run and you have some of the examples here, if you click so fast test you have several examples including for example hello world. So now let's take a look. I took the Trident repository, I copied it locally, copied it locally. And here you basically see just the GitHub. So I have the Trident, I have documentation, I have the examples. Now in the examples I have hello world and I'm going to show you hello world. When you launch your Trident using Trident init 3 things are important.
00:07:58.029 - 00:08:39.205, Speaker A: The first one is it's going to generate a Trident toml which is the configuration file. Here, for example, you can specify 2000 iterations and what happens if for example the fuzzer found an error? Here I have exit upon crash True. So if it finds an error, it stops then. Second thing, what is important is in Trident tests I have here the output in hfuzz workspace I have cica brt it's a binary file which is the output of the fuzzer. We'll see how we read it in a second. And then I have three files which is account snapshots generated by Trident. You don't touch this file.
00:08:39.205 - 00:09:07.871, Speaker A: This file is basically just there to teach the fuzzer which accounts are used. In testfu you specify which functions of your program should be called. That's an important file, but it's easy to adapt and fast. Instructions is the main file. In this file you program your fuzzer and you basically just do two things. Here you specify what are the inputs to use. So here I have input self data input.
00:09:07.871 - 00:09:40.997, Speaker A: It tells the fuzzer that it should use all the different numbers. But I can also specify, you know, try with the number one, try with the number 123 now. And I also have the second important thing, which is what we call invariant tests, which is if you find an error, for example, if the smart contract or the state of the account is a number 123. Stop. So I just specify again my inputs and my invariable tests. Very easy. And then I can run my fuzzer.
00:09:40.997 - 00:09:53.973, Speaker A: So I am right now here in the hello world. This is my console. I'm in hello world. And I'm going to run Trident. Fuzz run fuzz zero. Run the test zero. Boom.
00:09:53.973 - 00:10:11.001, Speaker A: And now live. The fuzzer is running. I am right now at iteration 356 of 2000. Still haven't found a mistake. Iteration 550. I hope it will find a mistake soon. If not, we'll be here late.
00:10:11.001 - 00:10:22.937, Speaker A: Iteration 659. Boom. It crashed. It found a mistake. Here I can see you know, crash is one. It doesn't tell me the output. But now I know that there was a mistake in my code.
00:10:22.937 - 00:11:03.253, Speaker A: So now I run a debug on the output file, which is called. Every time the fuzz runs, it regenerates the same file. So I just have to run right now the command Trident Fuzz run debug on that binary file. And now debugger will launch. And debugger has this output and it tells me, okay, there was a mistake in an initialize function on line 36 because. And it hit when the number was 100. And you remember in my invariant test, I had a function saying, if the output of the account is 123, then stop.
00:11:03.253 - 00:11:32.957, Speaker A: And he tells me I had a crash when the number was 123. So now I can go back to my code and I can go on the line 36. And I can see, okay, so when this cell data input was the number 123, boom, it crashed. And now I actually found a mistake in my code. So please use this yourself. Download it. It's all on GitHub.
00:11:32.957 - 00:12:10.719, Speaker A: Actually, we created a telegram group AKI Breakpoint fuzzing with Trident, where the programmers, as we speak, are waiting for you to ask your questions. You can also take a look at that same example. Now let's go back to the presentation, please. Who understood? All right, that's cool. I like it. So if you go back to the presentation, how can you actually start even from today? How can you start even from today? Number one, watch the videos. Number two, read the docs that I showed you.
00:12:10.719 - 00:12:36.865, Speaker A: Number three, ask in discord and of course connect to the telegram group which we just created. Why? It's important because as more and more software programs of Solana will be verified on chain, hackers will have access to your open source code and they will do the fuzzing before you do. So please do the fuzzing before the hackers do of your code. And for this, use Trident. Thank you.
