00:00:05.720 - 00:00:47.674, Speaker A: We're going to talk about Solana's programming model and cover all the fundamentals you'll need to know to build on Solana. To start, let's break down exactly how Solana stores state for things like wallets, dapps, and pretty much anything else that operates on Solana. Everything on Solana is an account. An account is a claim to a specific size data storage on the blockchain. You can think of an account almost like a record in a database. Like a database record, you have to have some kind of mapping to this on chain location. This is done with a public key or address, and most importantly, only an accounts designated owner can modify its data.
00:00:47.674 - 00:01:23.252, Speaker A: Data in a Solana account can be anything, strings, numbers, objects, as long as its byte representation is less than ten megabytes. Accounts can even store executable code. These accounts, marked as executable on Solanas runtime are called programs or smart contracts. In other blockchains, programs are exactly what they sound like. Theyre software programs stored within an account that can be executed with transactions. Lets break down a transaction. A transaction contains a list of signatures and a message.
00:01:23.252 - 00:02:13.714, Speaker A: That message then contains a list of instructions. An instruction contains a program id or address of the program that the instruction is for, a list of accounts that need to be loaded by the runtime and the instruction data. Programs then process that instruction data to determine what actions to take on which accounts that have been provided in the instruction. For example, an instruction for a transfer of SOl would be directed to Solana's system program. It would contain the sender, the recipient, and the system program. And the instruction data would tell the system program to conduct a transfer from the sender to the recipient. Also in this example, Alice would have to sign this transaction with her private key because she's going to be debiting her account and sending Sol out.
00:02:13.714 - 00:03:16.964, Speaker A: However, Bob does not have to sign for this transaction because he's receiving Sol, and credits are the only exception to the account ownership and signing rules on Solana. So authorizing debits makes sense. But what if we had a DAP and we wanted to just have an account that kept track of the number of active users on our DAP? Would we want one particular user to own this account and therefore have to sign for it every time we wanted to modify the number of users on our dapper? Of course not. Instead, we can make our smart contract or program the owner of this account. This way, the program can now modify the data and change any of the values in the account. So we no longer require the signature of any user on our DAT. So how does this work? Well, Solana uses what are called program derived addresses, which are basically accounts that have a public key that can be derived from a deterministic set of seeds.
00:03:16.964 - 00:03:51.764, Speaker A: The key here is that these accounts, by design, don't have private keys. Instead, programs can use these seeds to algorithmically sign for transactions and modify data in accounts that are pdas. Using PDA's, we can store data about our application in accounts without requiring our users to sign for every change. This is basically the web3 version of a web two application built on top of a database that it can read and write from at any time. Alright, those are the basics. Now you guys are ready to build.
