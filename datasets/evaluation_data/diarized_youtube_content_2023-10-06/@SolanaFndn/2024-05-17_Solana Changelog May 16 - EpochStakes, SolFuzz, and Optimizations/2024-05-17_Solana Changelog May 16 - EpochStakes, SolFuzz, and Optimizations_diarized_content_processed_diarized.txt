00:00:03.960 - 00:00:10.721, Speaker A: Hello everyone. Gm gm. Welcome to another changelog. I'm Nick from the Solana Foundation Devrel team and today I've got Jacob with me. How you doing, Jacob?
00:00:10.873 - 00:00:12.201, Speaker B: Doing well, how are you?
00:00:12.393 - 00:00:40.459, Speaker A: I'm doing great. I'm doing great. I'm excited to talk about this suite governance proposal here on the forum. I like that segue. It's good. This governance proposal is actually kind of a continuation of one of the accepted proposals on distributing on distributing all priority fees to the validators that are actually packing the blocks. So I thought this was really cool to talk about how the process actually goes to get this fully accepted and fully implemented.
00:00:40.459 - 00:00:49.735, Speaker A: It's already under a feature gate and like Tao mentions in this forum post on the governance side of the forum, there needs to be an actual vote on chain to actually implement that.
00:00:50.115 - 00:01:35.493, Speaker B: Right. So part of the process for general changes on Solana is first you kind of talk about the idea that's considered the idea stage within the SIMD process. Then you draft a simd, you get it reviewed and then for some changes that affect economics, like this change, which is this is specifically SIMD96 if you want to read more about it. This affects economics on the network, so it has to be voted on the validators. What will happen will this will. This is locked behind a feature gate and this will be put up for a vote to all validators based off a stake weight. So if you have a large stake weight, you have more votes for the specific proposal and if they get to quorum on this decision is made and then the feature gate will be activated at some point in the near future afterwards.
00:01:35.493 - 00:01:56.549, Speaker B: So that's the general flow for any type of change on the network. This is specifically for this reward full priority fees to validators instead of like burning half of them. Great change. Good to see the governance in action. We'll see more of these votes in the future. We actually had one past this was timely vote credits in the recent past.
00:01:56.677 - 00:01:57.573, Speaker A: Oh yeah, yeah.
00:01:57.589 - 00:02:47.237, Speaker B: And then moving on to other SIMDs in the process, we have this week SIMD149. This is migrate snapshot epoch stakes. So the way this is is that there's the current snapshot version that needs some changes. And this is kind of thinking ahead of like, hey, if I ever need to make changes to the snapshot version or the snapshot structure and we have multiple clients on the network, I need to be able to have versioning on it. So it's both adding versioning to the snapshots as well as adding this new field For Epoch Stakes to kind of help out with when you reboot from a snapshot in the middle of the new rewards distribution, I think that's SIMD118. So that's what SIMD149 goes through. It's just been went live as of recording 10 hours ago.
00:02:47.237 - 00:02:52.901, Speaker B: So if you want to join the discussion, now's the time. And then what kind of commits did you see this week, Nick?
00:02:53.013 - 00:03:24.359, Speaker A: Yeah, there were some really interesting ones. Shout out to Alessandro making all sorts of performance improvements this week that got merged in. There were two big ones. This first one is program cache and basically the way that the runtime would actually write would do the write locks for some things. That was less than ideal, it's less than optimal. And with these new performance improvements that Alessandro has already merged in, it reduces replay performance by about 20 to 25% which is pretty significant. It's pretty great.
00:03:24.359 - 00:03:47.251, Speaker A: And then continuing on top of this, Alessandro had another merge for deserialization, making that even faster and better. So another pretty decently sized performance improvement. You can see the full flame graphs here on the prs. So really cool. Really great performance improvements that are going to kind of COVID the entire validator set. So it's pretty great.
00:03:47.443 - 00:04:18.477, Speaker B: Yeah, it's good to see these types of performance improvements. And speaking about even more of those, there's some more work being done on the 118 scheduler. This is so that it can load balance by CUS whenever. So we have a lot of traffic going into a validator. Currently it has four threads to do all the work in the new scheduler. It'll do four threads for like distributing and then they will make it in order in a single thread. So doing that load balancing to figure out like which CU should go into that single thread.
00:04:18.477 - 00:04:36.823, Speaker B: This is being done in this pr. It's good to see. And then finally there's a commit by Richie over at Fire Dancer. Yeah, he's great. So specifically, just as a note as he makes here, this is not a security bug. It's just a crash that happens whenever you do testing. Uh, so this is to the vote program.
00:04:36.823 - 00:05:02.679, Speaker B: They don't added a way to just make sure it doesn't panic whenever you reach a specific type of state. Um, this is really cool. It was actually found via fudge testing in Richie's Fuzz testing toolkit. That and the toolkit that Firedancer uses. So it's really cool to see this. Um, we hope to see more of this type of things making the programs on Solana or the, I guess, internals on the Validator even more robust.
00:05:02.767 - 00:05:03.995, Speaker A: Yeah, absolutely.
00:05:04.405 - 00:05:54.425, Speaker B: Speaking about more fuzz testing, Richard and the Fire Dancer team created a new fuzz testing library called Sol Fuzz and they've been using this within the Solana runtime to catch a bunch of different bugs and fix them so that they can one, figure out bugs that might happen in the future and 2 make sure that they can test multiple clients run times at the same time just to make sure that, hey, I know all these different cases, but I don't know all cases. So let's run the fuzz on cases that the Fuzz creates on both so that I can see how similar the two runtimes really are. So this is good for creating more robust runtimes throughout Solana Validator clients, and it's good to see this type of thing. What other types of resources did you see this week Nick?
00:05:54.545 - 00:06:25.051, Speaker A: Well, there was the big Update for Create Solanadap that bman was able to publish. So Create Solanadap now uses the new anchor version of 0.30.0. So when you use the Create Solanadap CLI tool generate a scaffold for your application, the anchor programs that get generated from that now use anchor 0.30 by default. And which means you can benefit from all of those IDL improvements that Acheron and the rest of the anchor team has been working so very hard about. Shipping those out.
00:06:25.203 - 00:06:54.951, Speaker B: Yeah, and we will just also a side note, if you have run into any issues on anchor 0.30, please make issues on the GitHub repo for it. So Acheron is working on any issues that people have found thus far and he's going to be creating a patch version release to fix any issues that people have found in 030. This both helps you get rid of all these issues that you have whenever you build with 0.30as well as any future developers that want to get started.
00:06:54.983 - 00:06:57.311, Speaker A: With Anchor devex improvements.
00:06:57.503 - 00:07:43.463, Speaker B: On another note, of different resources, there's another one by Triton so Brian Long has a post here on Twitter. He's created something called was a Cascade that is a new transaction delivery network to kind of like fix a lot of the outstanding issues around stake weighted quality service. So it's really cool to see this type of thing happen. I continually want to see like more things that make transaction delivery even better, especially with like deploying programs which I know some people. Yeah, some people still have a little bit issues deploying programs still continue being worked on, but this should help even more. And then finally, on the resources of the week, we have this anchor I11N. It's actually introspection instruction.
00:07:43.463 - 00:08:07.601, Speaker B: Introspection done by Dean Mc. So this is a basically a way for you to look at instructions that are within your transaction. It's a bunch of helper macros without having to like run your own digitalization. This will help you out. Get it done very quickly. So it's a nice little crate. I love to see these types of crates come up.
00:08:07.601 - 00:08:15.877, Speaker B: If you ever built something that creates helper functions that you find yourself doing over and over, feel free to send it to us. We hap happy to see them.
00:08:16.021 - 00:08:17.701, Speaker A: And then Stack Exchange.
00:08:17.893 - 00:08:19.061, Speaker B: Stack Exchange.
00:08:19.173 - 00:08:34.785, Speaker A: I'm going to keep doing the shout out like that. Yeah, huge shout out for all the Stack Exchange people. This week we had the top of the list. Here is Dhruv, who I believe is on the Tiny Dancer team. And then we have Jimmy and Stevie is on there. Everyone's crushing on Stack Exchange this week.
00:08:35.165 - 00:08:44.399, Speaker B: Yep. Keep helping us out on Stack Exchange. It helps out any developer in the future. And that'll be it for this week's Changelog. Thank you for joining us and we'll see you next week.
00:08:44.477 - 00:08:44.667, Speaker A: Bye.
