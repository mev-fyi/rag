00:00:04.360 - 00:00:32.451, Speaker A: Hi there. Okay, before I start, I'll just take a 30 second quick brief intro about ourselves for those of you who have not heard about our names. We're a security research firm. Of course we do audits at the same time. We're building softwares. A few software we're building. One of them is called Xray.
00:00:32.451 - 00:01:03.165, Speaker A: It's a static analyzer for Solana Smart contracts. Today my talk is about that. We're announcing releasing an open source version of X Ray today. And we also have a Pro version, has a little bit more bells whistles. It's a SaaS SAS version, but we're open sourcing one version today. We also have Watchtower. It's a on chain threat monitor for post deployment.
00:01:03.165 - 00:01:39.825, Speaker A: But let's get into it. So what is X Ray? X Ray is a static analyzer for SWIG design for Solana Smart contracts written in Rust. The version I'm introducing today is open source. Also it's cross platform. It works for Mac, Windows, Linux. What about the Tech stack? X Ray is built on top of LLVM Tech Stack. Essentially we convert your source code into IR and apply analysis on top of that and figure out where the potential security vulnerabilities are.
00:01:39.825 - 00:02:04.135, Speaker A: Why we're doing this we're doing this because we want to empower developers like you to build rules. Instead of just us figuring out how to build rules and contributing to that, we want to empower everybody who use it and build your own rules. So a quick intro how to install and use it.
00:02:04.475 - 00:02:50.799, Speaker B: We prepared a video using Xray, an open source tool developed by Sec 3 for static analysis of Solana Smart contracts written in Rust. In this video we'll show you how to install and use X Ray to scan your contracts. Setting up X Ray is quick and easy. We provide Docker images for both Vex86 and ARM64 architectures, allowing you to start scanning right away. Using Docker provides cross platform support. So whether you're on Linux, Windows or macOS, you can simply pull the pre built X Ray Docker image and run it in your mobile environment. If you're using Linux or WSM on x86, we also offer pre compiled executables that you can download and extract for a seamless installation.
00:02:50.799 - 00:03:44.997, Speaker B: And of course you can always build X Ray from the source code with instructions provided in the repository. To scan your Smart contract, simply copy the source code to your local machine. You only need to provide the path to the Smart contract as a parameter to the X Ray executable and the tool will Automatically scan the given directory to find the relevant contract code. X Ray streams the results to the terminal of scanning for each identified issue. The output includes the relevant code statement, the corresponding line number, and a link to a full explanation for the issue type. Once the scan is complete, a summary is provided including the total number of issues found across each source file, categorized by type to help you understand the overall state of your code. After making changes to your code, you can easily run another scan to verify your modifications and that's it.
00:03:44.997 - 00:04:00.555, Speaker B: This video serves as a quick start to help you get started with scanning your smart contracts. If you'd like to dive deeper into Xray's features or make modifications and customizations, feel free to visit the project page or reach out to us. Thanks for watching and see you next time.
00:04:01.455 - 00:05:00.755, Speaker A: Yeah, the video flew pretty quickly. In that real example, the Software actually found 12 untrustful account issues and some other issues. So just a quick recap. There's three ways to install this. The most either way for most people is just to simply use a Docker image. If you want to run this on an unsupported platform such as Linux on x86 based platform, we also provide pre built batteries and also most importantly if you want to add and change your own rules, we have source file available so you can build your own. How to use it is pretty self explanatory so I'll just pass this, I'll skip this slide.
00:05:00.755 - 00:05:16.995, Speaker A: The reason why again why we're building this is that because we wanted to make it easy for you to change modify the rules. So we also prepared a really quick video about how people can use it.
00:05:24.945 - 00:06:25.219, Speaker B: This video focuses on the developer side of things including architecture, customization and extensibility. If you are looking for a Quick Start guide using Xray, please refer to our Quick Start video. At its core, Xray consists of three main components, the Code Parser, Code Analyzer and the cli. The parser is built using Antler and llvm, designed to process a Rust program through lexing and parsing and then lower it to LLVM ir. The Analyzer works on this ir, leveraging both built in LLVM passes and our Custom analysis Pass can perform static analysis in smart contracts, identifying potential issues. The CLI serves as the overall driver, handling user input, invoking the parser and analyzer and generating reports. Now let's take a closer look at an example from Code Parser which transforms Rust code into LLVM intermediate representation in the Rust snippet shown here.
00:06:25.219 - 00:07:22.085, Speaker B: The Borrow fee function calculates the borrow fee in the Solana Smart contract. After parsing the source code using Antler, X Ray lowers it to llpm. This IR output then serves as the input for the code analyzer, where further static analysis is performed to detect potential issues. The code analyzer traverses the transform lvir, analyzing key instructions such as function calls and account access patterns, capturing detailed code logic for evaluation against defined rules. The rule engine allows developers to define custom static analysis rules, making it adaptable to various patterns. In Solana Smart contracts, the detection rules are categorized into two main types. Instruction Specific Rules these rules match specific instructions in the code, such as those that focus on detecting, add or multiply operations, which could lead to issues like overflows.
00:07:22.085 - 00:07:58.279, Speaker B: Rules are evaluated upon matching the defined entry points. Contextual Analysis Rules these rules analyze the broader execution context by gathering information about instructions and associated accounts. Examples include the Cosplay Account Detector and Untrustful Account Detector, which analyze account validation and trustworthiness throughout the program's execution. X Ray is designed for extensibility. Developers can modify or add new rule sets to expand its functionality as needed. We welcome ideas and contributions. We encourage you to explore the repository.
00:07:58.279 - 00:08:05.865, Speaker B: For more details, please feel free to contribute or reach out with any questions. Thanks for watching and see you next time.
00:08:07.165 - 00:08:49.805, Speaker A: All right, quick recap. Here's the tech stack. Essentially the tool converts your source code into A lower level IR LLV8 VM IR code captures all operations and then there is analyzing a code analyzer which manifests where the logic, where you want to, you know, how you want to find things. And then through analyzing the IR we're able to find security vulnerabilities. That's the whole idea. But in theory you can write your own rules. It doesn't have to be even limited by security vulnerabilities.
00:08:49.805 - 00:09:54.765, Speaker A: So here's examples using real Solana Smart contract source code. And there's a function essentially I think calculates the fees for borrowed token amount. As you can tell the source code being transferred to a lower level representation, but with all the operations captured in that function. There are two types of the rules. As part of the first release we're contributing about more than a dozen most common rules including account validation, underflow, overflow, some of the most common security vulnerabilities. And keep in mind that X Ray has been actually running and used by the community in the last more than two years. So this essentially we migrate all the tools.
00:09:54.765 - 00:10:26.995, Speaker A: Well, we migrate all the rules that are mostly common use into the open source version. Again, this tool is to empower developers like you and builders like you. So we look forward to working with you to, you know, make the rules much more in depth and in scope. Well, lastly, I just want to thank Solana foundation for their support in making this possible. Thank you.
