00:00:00.120 - 00:00:28.634, Speaker A: Welcome, everyone. We got kind of a jam packed meeting today, so I'm just going to kick it right to. Will's going to talk a little bit about the rollout plan for QWik, kind of how we're thinking about it. Then we will talk a little bit about the event that happened this week, security event, and then the last 15 or so minutes will be GDA labs talking about their MEV implementation. So, lot to get to. Will, why don't you take it away?
00:00:30.494 - 00:01:00.128, Speaker B: All right. Yeah. So I'm going to start with a little bit of background. Probably everyone already knows this, but just in case, I don't want to leave anyone behind. So, Solana, network currently and historically uses UDP for network interactions. UDP does not require any sort of handshake or back and forth communication, and so you can spoof the return address. That makes it extremely difficult to filter out.
00:01:00.128 - 00:01:32.172, Speaker B: Denial of service traffic. Basically, it's the denial of service attack is indistinguishable from legitimate traffic in some situations. That has created a number of problems. I think you're all very aware of the problems that's created. And so, QWik is a new network protocol that provides tools to solve those problems. It does not solve the problems by itself, but it opens up some avenues, and it does that by quic, requires a handshake. So you want to send me something? First, we have to have a back and forth.
00:01:32.172 - 00:02:21.710, Speaker B: That means you have to give me a valid return address. And with that valid return address, then there are options for cutting off actors that think it's fun to send gigabits of traffic per second for no good reason. Okay, so that's what quic is, rollout plan. Obviously, this needs to be seamless because the cluster can't go down while the rollout is happening. So currently, validators that are running on 110.32 or higher are listening for incoming quick connections, and we'll accept them, but by default, are not sending outgoing messages. So transactions being forwarded to readers, for example, are not being sent via Qwik.
00:02:21.710 - 00:03:12.474, Speaker B: They're still being sent via raw UDP in order to. So that there are a couple of phases to the rollout. First, we need to get everyone sending transact sending messages via Qwik, so using those quic servers that are already listening but not being used. And then there's a later phase where we actually turn off the raw UDP network option. Once that's done, the network will be entirely on quick. Anyone who hasn't migrated their messages don't go anywhere. And at that point, the spammers will not really have the avenues that they had to send huge chunks of traffic.
00:03:12.474 - 00:03:54.924, Speaker B: The current plan is that probably validators sending transactions via quic won't happen by default until version 1.11, which probably won't be stabilized until at this point it's looking like September. If you want to, you can set your validator to start forwarding transactions via Qwik. Now there is a TPU use quick flag. It's working on Testnet. Solana Labs has some nodes that we control. Thanks Tim.
00:03:54.924 - 00:04:23.974, Speaker B: That have it running on Mainnet beta. Everything's looking good. Obviously with new features, there's always a risk. Mainnet beta is currently on about 90% of stake is on 110.32 or higher, so 90% of stake can accept these connections. The other 10% is lagging a little bit behind. Yes, jump in with questions please, either in the chat or just unmute and go for it.
00:04:26.254 - 00:05:08.744, Speaker C: Hey, can you guys hear me? I'm assuming? Yes, just wondering. The plan with QWik is to stop spammers who would right now be able to spoof their source ip address if they were to send a lot of data. Right now, we don't know if they're really the person they say they are. But with QWikD, since it's a form of TCP, I guess you can see who they are and block their ip if they happen to be spamming. What would be the solution if a spammer were to, let's say, get 10,000 data center proxies that have a bandwidth of 100 gigabits per second and send through those in the same way they are now, how would quic solve this sort of attack?
00:05:10.044 - 00:06:13.728, Speaker B: So first, just one minor clarification on top of UDP, not on TCP, but that's just a minor technical detail. As for how to solve that scenario, first of all, we've at least made the spammers spend more money having to get the resources to have a lot of proxies. As for the rest of it, I don't know, but I do if know. So Qwik has been around about a decade. There are definitely papers out there exploring sort of options for handling denial of service attacks using QWik. This is something that still needs to be figured out both by Solana Labs and by validators and your data centers. So this is something that the solution is not just going to live in the validator code, it's also going to live in in firewalls, in data center configurations.
00:06:13.728 - 00:06:26.484, Speaker B: So as I said before, migrating to Quic isn't just going to magically fix this problem, but it gives us some tools. I will read up more and try to have a better answer to that by next time.
00:06:27.504 - 00:06:32.524, Speaker D: I think that the point to clarify here is that saturation by quick.
00:06:35.744 - 00:06:36.072, Speaker E: You'Re.
00:06:36.088 - 00:07:27.884, Speaker D: Not going to saturate the validator process. If the process can, it'll only accept as many quick connections as possible. So I think there's more of a likelihood, not a more likelihood, but the possibility is that inbound, sort of at the network processing layer, could get saturated if you have this sort of distributed denial of service attack, which as will pointed out, would be much more expensive. But what you're not going to see is basically a validator receive it, like getting a flood of unprocessed transactions that are then impacting its ability to deal with the packets that it has accepted versus UDP, where it's just this uncontrolled inbound dump of either spam or legitimate traffic.
00:07:34.204 - 00:07:35.704, Speaker E: Yeah, I'll just pause there.
00:07:36.204 - 00:07:37.172, Speaker B: Yeah, thanks.
00:07:37.348 - 00:07:53.264, Speaker A: There's a question in the chat from Zantetsu, basically around why doing a hard switch on 1.11 when that comes to main net to quic versus gradually switching over to quick over time.
00:07:53.844 - 00:08:52.398, Speaker B: Yeah, that's a totally valid question. Those of you who pay attention to the testnet announcements might have noticed that we had testnet validators turn on gradually. That's still up in the air. And honestly, if you would like to turn on now or some point in the next few weeks, you should totally feel free to, if you're reporting metrics and you turn it on, will have access to that data. And so we can track who has it turned on and what percent of stake that represents, at the very least. So it'll be a soft transition either way, because if the transition happens with the upgrade to 111, not everyone is going to update 111 at exactly the same time. So either way, it will be a gradual transition that happens over the course of, you know, weeks or maybe even longer, I think.
00:08:52.446 - 00:10:38.890, Speaker D: Something else to clarify here. I just want to make sure it's clear, right? There's, there's two uses of quic for two different network protocols here, right? One is TPU, which is, you know, handling incoming transactions that are not yet included in a block, right? So TPU is right when an end user or wallet sends a transaction forwards to an RPC node, which then forwards to the next block. Producer or a validator handles transactions internally or from a preferential client or whatever, and then forwards to a block producer. So what we're currently working on is getting quick enabled at TPU, because this is where we saw a lot of the overloads of spam earlier this year when we were having some trouble with these hot NFT mints and stuff like that. And then on the second piece of sort of flipping the switch is actually going to be using quic for block propagation. But before we can, like, you can't force anyone to use quic, but the idea is that if everyone has a quick server running on the machine, then they can listen for both udp or quic traffic, and then it would be up to the individual clients, whoever is generating that traffic that they make sure that they send, if they're sending quick, that they're sending it to an RPC node that uses it as well as. So all the block producers currently can receive QWik packets now, or UDP packets for potential transactions.
00:10:38.922 - 00:10:39.934, Speaker E: Before the pact.
00:10:42.114 - 00:11:11.734, Speaker D: I think it was. Last time I spoke with Anatolia, I think he was thinking it might be in 1.12, where we actually removed the UDP option entirely. So I think it would be all of the 1.11, both stabilization on Testnet as well as its duration of life on Mainnet, where we would be sort of gradually encouraging the ecosystem and the validators to flip over quick adoption both on the client side and the server side.
00:11:18.354 - 00:11:28.254, Speaker B: Question in the chat from Nick Nick, are you getting at what Dan just addressed? Of deprecating the ability to accept UDP packets?
00:11:31.174 - 00:11:51.394, Speaker E: Yeah, I guess. We currently use this TPU client from the Solana client. Great. For a few different use cases, and I was just wondering, will Qwik be implemented into that existing TPU client, or will we need to transition? I noticed there's a new Qwik client in there. Just wondering about that migration.
00:11:52.974 - 00:12:04.764, Speaker B: I don't know yet if there is a plan for that, but if there isn't a plan, there will be. Before it happens, there won't be surprises. That's the one thing I'm willing to commit to there.
00:12:06.264 - 00:12:12.524, Speaker D: I see Bezad is on the call. Bezad, do you happen to know what we're doing with the TPU client?
00:12:15.264 - 00:12:17.284, Speaker E: Sorry, what are you doing with what?
00:12:19.824 - 00:12:38.584, Speaker D: The question was whether the current RPC client and TPU client implementations will be deprecated or like, and we're going to need people to use a different client implementation, or if there's going to just be some sort of flag or other option within the existing client implementations to use Qwik.
00:12:40.284 - 00:12:53.004, Speaker E: I don't know exactly what the plan there is, but yeah, the general direction is to move away from TPU in the long term. Okay, cool.
00:12:56.024 - 00:12:56.376, Speaker F: Sorry.
00:12:56.400 - 00:12:57.752, Speaker E: I can jump in and answer that.
00:12:57.848 - 00:13:03.004, Speaker F: TPU client actually can work with Quic, so you'll be all good there. I think it's already supported.
00:13:04.944 - 00:13:10.804, Speaker E: Okay, awesome. Thanks. Sure.
00:13:16.164 - 00:13:26.904, Speaker B: I've got another question in the chat about measurable bandwidth usage difference with quick versus UDD. I can't speak to that. Are there any engineers on the call that have an answer to that?
00:13:36.164 - 00:14:07.124, Speaker D: All right, I think the overhead for quic is quite low. Yeah, I mean, I would say kick metrics on your test net node and go nuts. But yeah, I mean, basically, if you would otherwise get spammed with incoming transactions when you're supposed to be block producer in UDP land and now in quick, you choose not to accept all of those potential incoming connections, then you're actually going to get quite a lot lower ingress.
00:14:12.244 - 00:14:17.984, Speaker B: And yes, there are metrics around this. So, yeah, like Dan said, explore on testnet.
00:14:21.924 - 00:14:28.104, Speaker A: Any final questions on the quick rollout? We are running a little short on time, so I want to make sure we get the rest in.
00:14:32.644 - 00:14:33.500, Speaker B: All right, great.
00:14:33.612 - 00:14:37.424, Speaker A: Let's transition to Jordan to talk about the recent security incident.
00:14:40.344 - 00:14:41.244, Speaker E: Hey there.
00:14:42.584 - 00:15:44.374, Speaker F: So, yeah, I guess I'll just kind of start with a little bit about the process by which we became aware of the issue and sort of some things that we went through and then kind of what I can publicly talk about. And then there's quite a bit that has been disclosed on Twitter, especially most recently. I would take a look at OSeCs Twitter because they have been doing a third party audit of data that has been provided by slope in pursuit of trying to figure out what happened here. So we started receiving reports, I guess that would have been Tuesday at around six or 07:00 p.m. Central time. Just where I am of like users wallets being drained pretty quickly. We had identified from these reports that it seemed like a lot of different wallets were affected, including wallets owned by people at Labs Foundation Ventures.
00:15:44.374 - 00:16:52.094, Speaker F: And the signers for these transactions were the owners of the wallet. So it was pretty clear that private key material had been compromised. Original theories that prevailed were around a supply chain attack on wallets because it looked like potentially multiple wallets were affected. We organized a war room, and we had solflare slope phantom various auditors within the ecosystem, and then also metamask developers and auditors and various people from the ethereum ecosystem were in this as well. So we continued kind of with this theory for a while, trying to diff dependencies between these different packages to see if it's possible that they relied upon the same things, or that it could be possible that JavaScript running would have added access to this key material. That started to look look. That started to look less and less likely.
00:16:52.094 - 00:18:31.540, Speaker F: And then someone at Metamask confirmed that the slope mobile applications were reporting key material, mnemonics and private keys to a self hosted century service. Originally it was thought that this was only reporting on errors, but it looks like most likely what happened is that this code to do this was added sometime in late June or early July, and it's possible that it wasn't active for this entire time. But at some point not just errors, but also like route navigation in their flutter dart UI started to be reported and this route navigation included a wallet object that had the serialized key material in it. Unclear exactly how this would have been discovered. This is being sent to a server that slope operated that hosted their sentry installation, and this data is being stored in a database, a postgres database. But we don't have complete information, so we only have logs going back right now from July 28 to August 3. So once this was discovered to be a possible attack vector, Slope disabled their sentry installation.
00:18:31.540 - 00:19:30.424, Speaker F: Of course, the apps are probably still the apps take time to update, so they may still be like reporting data or looking for a century service there and not finding it. About 15% of the victim derivable keys were found in that week of data set. There may be like older data that has either been purged due to some retention deleted, or maybe it's available, maybe it's not. We don't know yet that may have other keys or it may not. So we haven't ruled out the possibility that there's another vulnerability. But in the process of interviewing all of the users, it became clear that all of them had at least at one time imported a seed phrase. Even if they hadn't used their slope wallet for anything else, they had imported a seed phrase into a mobile slope wallet.
00:19:30.424 - 00:20:32.634, Speaker F: The desktop slope browser extensions are believed to be unaffected by this because they don't seem to be reporting to sentry. But in general, Slope has recommended, and OSEC has recommended, and we have recommended that users migrate away from keys that were ever imported or generated by a slope wallet, whether it's desktop or mobile, at any time. Yeah, so there are two security audit firms, OSEC. The other one escapes me at this time, that are continuing to work with Slope. They have some sort of NDA with Slope they're coordinating with Slope to release information as they find it, but they also don't have complete information yet. Like I mentioned, they have about a week's worth of this logging data, and it's possible that there's more data with more keys.
00:20:41.094 - 00:20:41.846, Speaker E: Thanks, Jordan.
00:20:41.910 - 00:21:19.234, Speaker D: I'm just going to add a quick sort of closing note on that. So the takeaway is that this, this incident was not related to any Solana core code. It didn't reveal any kind of security vulnerability to the Solana network, the Solana keys itself, nor, as incorrectly reported, did the network go down or block production, was not halted at any time. Sort of.
00:21:21.094 - 00:21:21.782, Speaker E: What would be a good.
00:21:21.798 - 00:21:59.254, Speaker D: Idea for a lot of people to do? If you are concerned, or if you feel like that there's a current or future risk to you or anyone you know, make sure that you TLDR is use a hardware wallet. Move all your funds to a hardware wallet that supports Solana. If you have used slope wallet in the past, recommendation would be to whatever wallet you set up. Make sure that you use a new wallet with a new seed phrase. Consider any seed phrase that had been previously used on slope to be compromised, and don't use any private keys derived therefrom.
00:22:06.434 - 00:22:13.064, Speaker A: All right, thank you, Jordan. I think we'll transition to Buffalo. Unless there's any final thoughts there.
00:22:15.724 - 00:22:16.236, Speaker E: Nope.
00:22:16.300 - 00:22:17.144, Speaker A: All right, great.
00:22:18.004 - 00:22:18.404, Speaker E: Yeah.
00:22:18.444 - 00:22:21.424, Speaker A: Then we'll hear from Jito Labs talking about Mev.
00:22:23.044 - 00:22:57.138, Speaker E: Hey, everyone. Excited to talk to you today about what we've been building. So, my name is Lucas. I'm CEO of Gito Labs. We've been building high performance MEV infrastructure for validators and searchers on Solana. So kind of walk through the history of Gita labs about MEV, some of the things we're working on, and then question everyone's wondering is, like, how much more can I make? And then kind of next steps from our side on rolling this out to Mainnet. So we were formed in August of 2021.
00:22:57.138 - 00:23:41.004, Speaker E: Everyone has backgrounds in distributed systems, firmware and robotics, and big data. Currently a team of six right now. So our mission is to maximize the performance and efficiency of Solana, provide me transparency, so transparency about what is going on on chain and just anything around me. We want to minimize the negative externalities of MEV on Solana. So things like drop transactions, excessive forking, things like that, and then also efficiently extract and distribute me to Solana stakers. So I'll kind of skim over this. I imagine most of you guys know about MeV.
00:23:41.004 - 00:24:34.384, Speaker E: MEV is value that can be extracted by block producers by inserting, reordering, or censoring transactions. So some things like this are like arbitrage, liquidations, front running, NFT sniping, and some of the longer tail stuff that very creative people find. It's important to maximize MEV because it brings better security and more decentralization. It also require, it forces dapps to more strongly consider about minimizing mevt users. I think we see some of this on Solana, and ultimately this results in better protocols and caps minimizing mevt users. We definitely want to minimize the negative externalities to the network. So things like spam and all the forking and things like that minimize Mev block space.
00:24:34.384 - 00:25:04.684, Speaker E: And then it's also, in the long term, it's one of the largest value captures for l one s. Yeah, this is a chart from Leo. I'm sure any validator operator is pretty familiar with this. This is during an NFT drop. So you can see there's just a ton of spam in this. This is ultimately meV. There's a transaction that enables a mint, and then there's a bunch of people that see that and start spamming the chain.
00:25:04.684 - 00:25:53.224, Speaker E: So MeV on Solana right now, we're seeing around a 97% failure rate for arbitrages and liquidations. And that's taking up anywhere from like five to 20% of all block space. I think when the whole luna thing happened, it was as high as 26% on one day, which is significant amount of block space. And the amount of money that's been made like a lower bound on that is $37 million this year. And I think it's important to mention all the work that labs is doing. We were just talking about quick. That's going to go a long way to improving this local fee markets, and then also the work that the team's doing on transaction scheduling.
00:25:53.224 - 00:26:41.354, Speaker E: So kind of go through our products real quick. This is kind of like a high level architecture of how our system works. So we have like a relayer, block builder, or we call it our block engine, and then we have a custom validator, and searchers will connect to the block engine, and we'll kind of handle the building. The most profitable block for validators. So our validator client, we have a modified Solana Labs client, and that supports bundles. So bundles are a list of transactions that can be executed sequentially, anatomically, we have all that, maybe payment and distribution, and that all takes place on chain. So no one actually has custody of funds at any point in the process.
00:26:41.354 - 00:27:18.614, Speaker E: We have a relayer client, so I'll get into that in a bit. Block engine client. And then we have something called Shredstream, which also get into in a bit. So our block engine, it's the first block builder on Solana. It's basically like an off chain block space market. So we will guarantee searchers some specific ordering of transactions and they can bid on our system. We'll use our simulation engine to basically simulate all the different combinations of what could happen and only submit the most profitable and successful transactions to validators.
00:27:18.614 - 00:28:01.744, Speaker E: We also have a pending transaction stream, so this will enable more efficient mev. We have shred stream, which is validators running. Our client will send their shreds in the normal turbine tree, but they'll also send them directly to us. That helps the simulation engine. But if you're an RPC server or a validator and you want less hops in between you and the leader, you can use that and we'll forward it to you. And then for searchers, we have bundles and transactions endpoints so they can send bundles to us. So relayer, it's essentially like a TPU proxy, so it works with quic and UDP, runs all the same logic inside the TPU.
00:28:01.744 - 00:28:48.154, Speaker E: So filtering sig, verify doing all the stake weight things, stuff like that. So what happens is we will receive those packets. Filter Sig verify forward copies of those packets to our block engine, add a small delay in that packet in the relayer, so that relayer is now being, or the packets now being held in that relayer and the block engine has a copy of it. After that small delay is over, that packet will be forwarded to the validator. We also have our heartbeats and fallbacks. So, you know, if your relayer goes down or something happens, then your validator will disconnect from that relayer and completely reverted settings. And all this just results in, like, more sensors, censorship resistant MeV.
00:28:48.154 - 00:29:31.316, Speaker E: So, like, the relayer always has a copy of the packet, you don't have to worry about what the block engine is doing. So we've been running this on testnet for a few months now, and you can kind of see what that looks like here. So we have our gossip IP here, and then you can see our TPU, IP and port are different. So that's the relayer running on a different server. So we also have MEV and payment, MEV payment and distribution. So this is a way that, you know, I think validators will probably want to share MEV with their stakers. So this is all integrated into the validator, so it will kind of manage the MEV payment automatically.
00:29:31.316 - 00:30:40.998, Speaker E: And I guess worth reiterating that, like, there's no private keys that control these funds at any point. It's just purely on chain. The MEV distribution will be like airdrop base, and it'll be through a Merkle route that you upload from the contents of the last slot in your last slot in the epoch. And then. Yeah, so I guess the part that most people are probably interested in is like, what is, how much more can I make? So obviously there's like several assumptions here. The main factors are like how much total MEV is there on the network? What percentage are searchers like tipping as a percentage of the profit that they're making to win these opportunities? And then how much stake weight do you have? So if we assume that, like the lower bound yearly MEV is $60 million and searchers tip 50% on ETH, it's actually like super high for very, very common things like arbitrage, like anywhere from like 95% to 98%. And then if you have around 0.1%
00:30:40.998 - 00:31:26.844, Speaker E: of all stake on Solana, then you'll make $30,000 extra year before sharing it with your stakers. We also have an MEV commission parameter that you can adjust to kind of tune that. So next steps. We've been running our client for several months on Testnet, and we've submitted several thousand bundles through that, mainly back running oracles. So, you know, we see pith Oracle update come in and we bundle some random transfer memo program with that and submit it. In the next few weeks, we're going to start internal alpha testing on Mainnet. I'm sure everyone has a lot of questions, so we also will be putting together more documentation.
00:31:26.844 - 00:31:50.164, Speaker E: We are wrapping up an audit with neodym. So they're auditing all the on chain programs, the relayer, and our validator client. And once that's completed, we will completely open source the validator, relayer and all on chain programs. And yeah, feel free to join our discord. Follow us on Twitter for updates on rolling out to Mainnet.
00:31:56.824 - 00:32:09.224, Speaker A: Thank you. So there's a question in the chat about how the distribution will show up on chain. Is there a way for explorers to differentiate between normal on chain payments versus MeV on chain payments?
00:32:10.884 - 00:32:17.384, Speaker E: Yes, that's something that we need to add, but it will be all on chain, so we'll be super transparent.
00:32:25.084 - 00:32:29.904, Speaker A: Nick asks, are there any plans to contribute this back to Solana core?
00:32:30.804 - 00:32:32.834, Speaker E: Yes, we would love to do that.
00:32:41.014 - 00:32:43.394, Speaker A: Any other questions for Lucas and Geotene.
00:32:49.054 - 00:33:02.534, Speaker E: Yes. The relayer will be the relayer, the validator, and the Mev tip and Mev distribution and all the off chain scripts that you can use to generate the, like, airdrop will be open source.
00:33:04.714 - 00:33:14.946, Speaker G: Lucas, I'll throw you a softball question here for ARBs and ArB traders, where milliseconds are absolutely everything for those guys.
00:33:15.050 - 00:33:15.810, Speaker E: Yeah.
00:33:16.002 - 00:33:27.214, Speaker G: How much latency are you expecting for a transaction to go through your stack versus them just sending it directly to the chain?
00:33:28.294 - 00:34:19.686, Speaker E: So, yeah, like, I guess like with our, with our relayer and block engine, they will actually be able to bundle that so that it's like sequentially executed. So they will be able to see that arbitrage searchers will get that and they'll run their simulation and whatnot, and we'll be able to say, oh, this creates an arbitrage. Here's my bundle with the arbitrage, with the user's transaction first and then my arbitrage second, and then they'll attach a tip to that. And that's kind of where the block engine comes in. So we'll have, you know, several searchers will be coming up with different arbitrages and tipping different amounts, and we will basically simulate all the different orderings of that and submit the one that's the most profitable. Does that kind of answer your question? Yeah.
00:34:19.710 - 00:34:22.674, Speaker G: How long do you think that'll take? How many milliseconds?
00:34:23.854 - 00:34:42.674, Speaker E: So right now we are testing internally with a 200 millisecond delay in the relayer and 100 millisecond auction period in the block engine. So essentially, as soon as the searcher gets that packet, they'll have 100 milliseconds to respond before we forward that, all the available bundles.
00:34:44.374 - 00:34:45.474, Speaker G: Great, thanks.
00:34:46.343 - 00:34:46.679, Speaker A: Yeah.
00:34:46.711 - 00:35:02.083, Speaker B: Also, to clarify, Brian, a validator that's connected to the relay, there's no way for a searcher to directly submit to that validator. It would have to go through the relayer and then this whole, this whole like, delay and sending to the block and then scheme would happen.
00:35:02.383 - 00:35:03.903, Speaker G: Okay. That helps too. Thank you.
00:35:03.943 - 00:35:33.968, Speaker E: Yeah, yeah, I guess planning to handle audits and keeping up to date, it's been pretty difficult. I think the best thing that we can do right now is like we're pulling in master every day and running it on our testnet validators and have a lot of testing, and it would be a dream for us and make our lives easier if we could get some of this pulled into the labs client. But GBD on if that happens. Yeah.
00:35:34.056 - 00:37:16.024, Speaker D: Something I'll just comment on there. I know, as the few projects, well, brave enough to attempt to fork master have found out, and everybody knows, right. The code moves a mile a minute, which has allowed us to do some pretty cool stuff over the last few years, but makes it really hard to fork and stay up to date. So one thing that we've been exploring, and this is a bit of a labs initiative, but also just sort of a broader thing that sort of foundation and with community involvement are really looking forward to that, is a bit of a kind of large scale refactor of some of the Solana labs code base to make things more modular, so that certain logical blocks of the code should have more cleanly defined inversion interfaces, so that if Jito or any other third party or, you know, another team of core developers in the future wants to rip out one piece of the validator and replace it with something, right, you can do so in a much more modular fashion. This is going to be not a small or short effort to do that, just given how fast things move, but I think it's one that is really, like, the right move, such that the product that is released by Solano Labs should serve as, like, basically a reference implementation for a Solana network validator that any future or potential core client developer can use and modify to their heart's content.
00:37:28.144 - 00:37:39.484, Speaker A: So there's a question in the chat from overclock, basically asking how Jito balances the Arbs and transactions that people tip for versus non Jito transactions.
00:37:41.864 - 00:38:24.584, Speaker E: Yeah, so I guess, like, we, like, we believe that we'll have, like, the best network of searchers and block engine, like, validators. So if a validator wants to do high frequency trading or has, like, a private deal with someone, they can continue to do that, but I think that they might be leaving money on the table if they go that route. I guess it's also worth mentioning that, like, we will be keeping an eye on what we send the validator and what gets executed. So if there's some mismatch or someone doing something malicious, then we'll also know about that, too.
00:38:32.124 - 00:38:48.450, Speaker G: So a quick follow up question, then. So if a validator is running your software, will it only accept transactions from the block engine, or does it accept transactions from the block engine and through the typical third party manner?
00:38:48.482 - 00:39:13.134, Speaker E: I guess, yeah. So it will accept transactions through the relayer and the block engine. So you can run the relayer, you can run it on your normal validator machine if you have a lot of bandwidth on there, or you can run it on a different server. We'll also be running the open source version on our own servers if you don't want to manage that.
00:39:19.654 - 00:39:35.234, Speaker G: So if a trader is trying to beat Jito, that validator can say, well, no, I'm going to run all the transactions through the block engine and the relayer. So a trader won't be able to beat Jito in that case, because everything is going through Jito.
00:39:35.654 - 00:40:00.534, Speaker E: Correct. Got it. Yeah, we offer the best. We have a special pipeline in the validator that guarantees sequential and atomic execution. So if you're trying to backrun someone on, like, the TPU, you won't. The probability of that happening is, you know, something between zero and 99%, but with us, it's 100%. Got it.
00:40:00.534 - 00:40:41.208, Speaker E: Yeah. For like, defining rules. For me, we currently, like, we're just like an infrastructure provider, so we let anything kind of happen. We are thinking about how to guarantee, like, better outcomes for people. That's something that we're actively looking into doing. Yeah, I think the. Yeah, that's, I think overclock.
00:40:41.208 - 00:41:40.464, Speaker E: Got it. Like, I think defining what is good versus bad is hard and also being able to detect that. And also, detective, people are find shortcuts or, like, workarounds in our system that we can't detect, but it's something that we're actively looking into. So all TX's go through the. All transactions go through the relayer first and copies of that get sent to the block engine. We are not like front running or doing any mev. Like, we don't have any mev algorithms.
00:41:40.464 - 00:42:13.104, Speaker E: And I think that would cause people, and it would cause all of our customers to lose trust in us. So that's like, trust and transparency is super important to us. So that's not even, like, on the table. And then. Yeah, to zam tattoos point. Like, we want to get that. You know, it's 97% of transactions are failing, but how many of them are getting dropped in the SiG verify or TPU? Like, I think reducing the link saturation will be a big win.
00:42:13.104 - 00:42:16.064, Speaker E: And that also happens through Qwik as well.
00:42:25.304 - 00:42:28.244, Speaker A: Great. Thank you, Lucas. Any final questions?
00:42:31.824 - 00:42:37.600, Speaker E: Yeah, I just say stop by our discord if you have any questions for us. Cool.
00:42:37.632 - 00:42:40.444, Speaker A: Could someone drop it in the chat? I don't have the link handy.
00:42:47.524 - 00:42:48.372, Speaker E: All right, there it is.
00:42:48.428 - 00:42:59.224, Speaker A: Yeah, so the link to join the discord is down there in the chat. Feel free to ping them and ask questions there. But thanks very much for presenting and, yeah, excited to see what comes next.
00:43:01.924 - 00:43:03.564, Speaker E: Thanks, everybody. Take care. Thank you.
