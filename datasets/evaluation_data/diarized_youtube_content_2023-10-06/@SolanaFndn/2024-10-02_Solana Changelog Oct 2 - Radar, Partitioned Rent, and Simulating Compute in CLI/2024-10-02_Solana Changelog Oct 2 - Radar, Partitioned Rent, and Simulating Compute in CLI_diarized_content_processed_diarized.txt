00:00:03.960 - 00:00:10.841, Speaker A: Hello, everyone. Gm. Gm. Welcome to the Solana Changelog. I'm Nick from the Solana Foundation Devrel team and today I've got Jacob with me. How you doing, Jacob?
00:00:10.953 - 00:00:12.245, Speaker B: Doing well. How are you doing?
00:00:12.585 - 00:00:18.713, Speaker A: I'm doing amazing. Post break point. Kind of sad, break points over, but there's always next year.
00:00:18.889 - 00:00:27.525, Speaker B: Yeah. Looking forward to next break point. Also looking forward to any other events that are happening. I know. First event I'll be going to is Mountain Dial in February.
00:00:28.045 - 00:00:30.661, Speaker A: Oh, yeah. Shout out to Mountain Dao. Should be fun.
00:00:30.853 - 00:00:35.825, Speaker B: All right, so getting started here, we wanted to talk about Radar, right?
00:00:36.445 - 00:01:03.145, Speaker A: Oh, yeah, absolutely. So for all those who don't already know the Radar hackathon put on by Colosseum, it should be ending here in just a couple of days, couple of weeks on October 8th. So if you're building anything in the slum ecosystem, be sure to submit it to the Radar hackathon. Check out the entire Coliseum platform. They have this whole really cool, like founder matching platform. Like, it's really, really cool. So you can sort of do like networking, find other people to work with and submit your projects.
00:01:03.485 - 00:01:17.309, Speaker B: Yeah. And even if there's only a few days left or a week left or so, it's never too long to start. You never know, never too late to start. You never know what you can build in that short amount of time and what kind of submission you can make.
00:01:17.477 - 00:02:06.513, Speaker A: Let's go ahead and dive into the SIMD. This week we've got SIMD175 to disable partitioned rent collection. So I took a skim through this and basically the gist, no pun intended, is that the way that rent is currently collected. For people that don't know, rent is basically the account storage fee that you pay. You deposit it, you can reclaim it when you close the account to keep your data online. And that sort of deposit, there used to be a rent collection you would pay a periodic fee, gets deducted from the account automatically by the runtime that doesn't exist anymore because all accounts are rent exempt. It's been a long time coming and with this sort of suggested simd, it's basically to remove part of the code base that isn't really used anymore because all accounts are required to be rent exempt.
00:02:06.513 - 00:02:33.761, Speaker A: So it's basically going to adjust the way that the rent epoch information is stored and calculated in the future. And the really cool thing and like you can read everything here from JSTaring, is that once this is merged and is live, it actually speeds up block production and block processing, which is really, really cool because it basically makes it so some of the checks that are currently being performed just don't need to be performed to sort of like rip them out.
00:02:33.873 - 00:03:15.375, Speaker B: Yeah, that's pretty cool. I didn't realize it was done like on replay as well, because that's what I'm reading here. I would expect that this is probably not even in the Fire Answer code base at all because Fire Answer knew that Rent was going to be removed. Hopefully there's no maybe this actually removes something like on consensus that was required because it looks like I saw that there was a comment by jstari that like, hey, this will make it easier on the Fire Dancer team. So I assume that means they're removing something. I'm not very familiar with the code, but it's good to see things that are being removed or old code being removed to speed up over the overall system.
00:03:15.755 - 00:03:17.179, Speaker A: Oh yeah, absolutely.
00:03:17.347 - 00:04:27.225, Speaker B: Moving on to commits. So we have this commit by John Cinque being on the cli, use the simulated compute units for vote interactions. So what this means is whenever you're doing votes with the look looks like with the specifically with the cli, it'll simulate and use the compute unit limitation that was returned by the simulated transaction to make sure that your transaction uses less compute overall. So why is this important and why should you do this with your normal transactions is overall there is a compute limit cap on transactions per block. I think it's 48 million and if you request compute units, those requested ones and you don't use them, those will make your users. They'll make the transaction costs more for the priority fees for your users. So you want to lower them as much as possible so the users pay less as well as because you're requesting more, you might get packed into the block later or not get or not get packed into the block at all.
00:04:27.225 - 00:04:37.673, Speaker B: So it's easier for scheduling, it costs less for users. It's cool to see this happening on the cli. Definitely do this as well on your normal transactions if possible.
00:04:37.869 - 00:04:39.217, Speaker A: Oh yeah, absolutely.
00:04:39.361 - 00:05:16.455, Speaker B: And then moving on to resource of the week, we've kind of seen a lot of different frameworks popping up and most importantly Steel from Hardhat Chad. Yeah, we have so Steel is a new modular framework for building smart contracts. It is basically using the native code or the native way that you write smart contracts on Solana and adding a few crates that make things easier. Things like serialization, deserialization, managing accounts and a few other things. It's a really cool framework. I'm happy to see different experimentation with different frameworks. Looking forward to seeing what people build with this.
00:05:17.035 - 00:05:47.415, Speaker A: Yeah, this one would be really cool. And then we've also got Poseidon from the Turbine team. This is sort of a new endeavor to basically take the idea of writing anchor smart contracts, but you can actually write them with TypeScript. So a lot of, you know, there's a lot of JavaScript TypeScript developers out there and they can just write Solana programs and smart contracts natively with TypeScript and then it sort of transpiles them into anchor code and then you can actually deploy them on the network just like normal. So this is a really cool experiment too.
00:05:47.915 - 00:06:03.095, Speaker B: Yeah. Looking forward to seeing more people use these as well as what people can create with these. Because I know especially with Poseidon, hopefully it'll get more developers interested in Solana and kind of hook them into the rest side. That's at least my goal.
00:06:04.475 - 00:06:06.691, Speaker A: It's the, it's the Gateway framework.
00:06:06.883 - 00:06:44.509, Speaker B: Yes. Moving on to last but not least, Stack Exchange leagues Stack Exchange. So it looks like Jimmy, John and a few other there's a few new people that I haven't seen before are on the top. So breeze I've seen believe in before Finlay. So the few few people that are new, some people that I like to see at the top all the time. Just as a general reminder, if you want to help out, all current and future Solana devs definitely contribute to Stack Exchange, Upvote the good questions, upvote the good answers and also provide good answers. So that's about it for this week's changelog.
00:06:44.509 - 00:06:46.185, Speaker B: We will see you next week.
00:06:46.645 - 00:06:46.981, Speaker A: Bye.
