00:00:00.320 - 00:00:07.245, Speaker A: Hello everyone. Gm. Gm. Welcome to the Solana Changelog. I'm Nick from the Solana Foundation Devrel team and I got Jonas with me today. How you doing Jonas?
00:00:07.705 - 00:00:09.993, Speaker B: Hey, I'm doing great. Excited, full Changelog.
00:00:10.089 - 00:00:49.425, Speaker A: Always excited for the Changelog. Let's dive into the SIMD. So we've got SIMD 191, relax transaction constraints specifically for loading failures. This is actually, this is from Andrew Fitzgerald from Anza and he actually describes this in the issue. This is actually splitting one previous SIMD, I believe it was 83, splitting it into multiple to make it easier to like bite size chunks in a way. But this specific one is for loading failures. Basically what he's proposing is making it so sometimes when transactions are processed they have different constraints that they could automatically fail during.
00:00:49.425 - 00:01:18.381, Speaker A: So they don't end up getting included inside of a block and therefore a validator that's doing computation and actually expending computer, they don't assess the transaction fee, the validators don't collect the transaction fee, but they're already processing the transaction. So the relaxing of some of these constraints allow these transactions to be actually failed and included in a block, which means validators could then actually collect the fee since they're doing processing on them. So it makes it so they're not just wasting compute, which is really nice.
00:01:18.533 - 00:01:29.681, Speaker B: Yeah, I think it's a great idea that the validators get paid for what they are actually processing. Other advice, you can just send them tons of stuff and DDoS them basically. So I think this is a very good change.
00:01:29.813 - 00:01:38.085, Speaker A: Yeah. What about some of the commits this week? What have you seen? I've seen this really cool one from this guy named with Woody. Woody 4618. Who's that?
00:01:38.905 - 00:02:30.815, Speaker B: Yeah. So what we are currently trying to do is to make program deploys. Great again basically. So I heard from a bunch of people that they have problems deploying programs and it turned out that many transactions actually if you stake connections with Helios and Triton, for example, if you don't use the SCIP preflight check then you're not getting stake weighted transactions. So now in the CLI from version 2.2 of Agave, you will be able to define the skip preflight check and with these it will be way easier to lend transactions, especially deploying because the CLI also sends transactions. And in the meantime what you need to do is you need to look at the current fees so you can for example use the gas tracker by QuickNote or try to figure them out yourself or use an API of one of the RPC providers.
00:02:30.815 - 00:03:34.681, Speaker B: And then if you have a non stake node, what you need to do is you need to set compute units, as I would say, a little bit above the low and then you can set the max sign attempts to 1000 or something and then you can just let it run. And if you use the public endpoint, currently it takes around like 10 minutes for an anchor program, if it's smaller, of course faster. And if you have a stake node, like if you're paying for a node, then you can use the user PC flag and then you can usually deploy a program in just a few seconds. So that should be fine. If anything fails, I don't know if everyone knows, but you can just do Solana program, show buffers, then it shows you the buffers and you can close them again so that you get your sol back in case you have an error. But this will improve in the future for sure. And there's also this issue here at Agave where we are asking if we could get an RPC call which actually gives you this feast because currently it's kind of a little bit of a guess and it's very hard to figure out if you don't use an API from one of the RPC providers.
00:03:34.681 - 00:03:44.585, Speaker B: So yeah, if you want to discuss or give a thumbs up on this, I think it would be cool if you could improve these. And then we have a few other commits here.
00:03:44.705 - 00:04:21.317, Speaker A: Yeah, we've got this feature gate from one of the engineers at Anza for lifting the CPI caller restriction. Specifically this is from one of the Simds 163 and basically what this is doing is it relaxes or it removes one of the CPI checks that it has to make it. So when you're actually performing cpi, those CPI calls can actually be more efficient because it removes one of the checks and it makes it so data doesn't have to be double deserialized and double handled. So it makes all transactions that are doing CPI more efficient, which is awesome.
00:04:21.501 - 00:04:23.085, Speaker B: Cool, that sounds great.
00:04:23.205 - 00:04:23.933, Speaker A: Yeah.
00:04:24.109 - 00:04:41.055, Speaker B: And talking about performance, this one also looks very interesting. So this is from Alexandro again, he's also from Anza and he improved the cache. So can you talk a little bit about this? It says like 5:15x.
00:04:41.715 - 00:05:04.545, Speaker A: Yeah, basically he just doubled. It's actually a very straightforward pr. He doubled the program cache size, making it so the total program cache that the validators will actually have stored within their RAM just doubles the size. It makes it so the automatic program eviction from the cache happens less frequently so they can actually cache things for more data for a little bit longer. So it makes it a little bit more performant again.
00:05:05.365 - 00:05:31.067, Speaker B: Yes, it looks like many of the programs were not actually cached because the cache was too small. Right. So then the next transactions come in, it loads the next program and then it's not in the cache anymore if the same program is called again. That's how I understand it. So this, this sounds like a great fix. This is the never ending story of the executable flag. So I think we talked about this many times here already, but it looks like it's going one step further now.
00:05:31.251 - 00:06:08.285, Speaker A: Yeah. So there's now a feature gate for actually removing the is executable flag checks within the runtime. Basically the runtime has been updated to. Instead of having this boolean value stored within each of the accounts, whether it's executable or not, AKA a program account or not, they're actually just using the owner check instead. Because anything that's executable has to be owned by the loader program, one of the loader programs. And if it's owned by the loader program, it's already executable, which means we could remove this binary value that's stored in basically every account. By basically, I mean literally every account on Solana.
00:06:08.945 - 00:06:26.327, Speaker B: Yeah, Very nice. Talking about cool new stuff. So we have the new web 3js is coming. We talked about a little bit last week already, but now it's actually coming. So it will soon be. How is it called, not release candidate anymore, but version two.
00:06:26.351 - 00:06:32.355, Speaker A: It will officially be version two here in a day or so. Actually by the time the changelog comes out, it should be officially version 2.
00:06:33.135 - 00:06:48.251, Speaker B: Which means that if you have a tutorial and you are. No, it's not tagged as latest yet, so that will happen later. But what you can already do is you can try it out by just using add to, I think, instead of add rc.
00:06:48.363 - 00:06:49.027, Speaker A: Yep.
00:06:49.171 - 00:07:09.419, Speaker B: And yeah, definitely give it a try. It's faster, it's smaller, but it's also a bit different. So I think it makes sense to try it out, see if you can convert your programs, see if you run into problems, report bugs. And if you're interested in creating content, you can also create content on it.
00:07:09.507 - 00:07:11.233, Speaker A: Yeah. And all the content.
00:07:11.289 - 00:07:21.365, Speaker B: Nick did a really great thing today. So in the cookbook now we have these cool tabs here. So we can actually have different versions. So we can have web3 JS V2 and V1.
00:07:21.785 - 00:07:44.815, Speaker A: Yeah. So we're going to the Solana Foundation Devrel team. We're going to start going through updating the Solana cookbook with code snippets for the version 1 and version 2 comparison. You can see here how to create a key pair looks very similar but is just a little bit different. So we're going to go through and get all these updated on Cookbook. So check out the cookbook for some awesome web3js v2 code snippets.
00:07:45.355 - 00:07:57.235, Speaker B: Yeah. And if you want to add some features yourself, you can just click here, the edit page button and add your own web 3js v2 examples here. So it would be great help for us.
00:07:57.395 - 00:07:58.163, Speaker A: Yeah.
00:07:58.339 - 00:08:16.273, Speaker B: And resource of the week. This is Velos, which is a fast, lightweight client for streaming Solana data, reducing infrastructure costs by apparently 50%. I haven't tried it myself, but 50x is like a lot.
00:08:16.449 - 00:08:41.104, Speaker A: Yeah. It seems like there's a whole thread here that we'll have linked in the show notes, but it's sort of the engineers are describing what they're doing and why they're doing it and this seems really, really cool. One of the things that they're shooting for is making it so people can run their own indexers and index anything on Solana with just less infrastructure, cost less. You don't have to run like a full node or a full RPC in order to do it, which is really, really cool.
00:08:41.764 - 00:09:07.423, Speaker B: Yeah, I think it's awesome. If people can run their own index asset, you're not reliant on any third party. I think it's super cool. And last but not least, our Stack Exchange champions. So we have Jimmy here again with 160 points. Then we have Adita, which I don't think I have seen before. So already in the top 10, we have Abhishek Falia here we have Russo, we have Hana.
00:09:07.423 - 00:09:13.075, Speaker B: Hana is actually also a core contributor at Anza, in case you didn't know.
00:09:13.935 - 00:09:14.223, Speaker A: Yeah.
00:09:14.239 - 00:09:35.069, Speaker B: Then we have John, we have Nick, Frosty, cool guy Jacob Creech. So, yeah, thank you everybody for helping everyone. Recently we had lots of new questions because we have so many new devs coming in and they all have questions. So whenever we answer a question it helps everybody. So it's really cool that everyone is helping here.
00:09:35.197 - 00:09:44.425, Speaker A: Yeah. Keep up all the amazing work on the Stack Exchange. It helps out new and existing devs and that's going to wrap it up for this episode of the Solana Change log and we'll catch you next time.
00:09:45.285 - 00:09:45.621, Speaker B: Bye.
