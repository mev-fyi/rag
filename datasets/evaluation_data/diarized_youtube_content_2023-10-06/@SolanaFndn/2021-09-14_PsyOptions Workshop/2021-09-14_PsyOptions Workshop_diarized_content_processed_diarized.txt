00:00:05.400 - 00:00:45.574, Speaker A: Hey, guys, welcome to the Psi Options integration workshop. I just want to give a quick intro. I'm Tommy, one of the core contributors to psyoptions, and I have stockmark with me who runs the psyoptions. Twitter makes the best memes and does all our marketing and relationships. For those who don't know, I'm going to give a quick intro of what psyoptions is. We won the Solana serum hackathon, the first Solana season hackathon, back in February or March. And what we set out to build is a peer to peer, fully decentralized, trustless options protocol.
00:00:45.574 - 00:01:11.094, Speaker A: The genesis behind this was we wanted to automate a options trading strategy in traditional finance called some brokerages. They denied us access. And coming off of the first Solana hackathon back in November, it was a no brainer to kind of build this next. We launched on Mainnet August 22. We have a few strikes. Let me see if I can share my screen.
00:01:11.794 - 00:01:21.574, Speaker B: We talk through all this, make sure it's up. Sweet.
00:01:22.404 - 00:01:41.624, Speaker A: So we have a few strikes listed. We haven't really exposed too many at this point. Right now, we're just doing a test with a single expiration of September 24. We have ETH and BTC markets with just three strikes on each, and.
00:01:44.564 - 00:01:44.852, Speaker B: We.
00:01:44.868 - 00:02:16.646, Speaker A: See some decent volume. What we're really focused on right now is improving capital efficiencies and also reducing the cost of sunken Solana to for rent on these accounts. So what happens is creating one of these strikes. We have to create a psyoptions option market. We have to create a serum market. I'll go more into those structures a little bit when we go a little bit deeper into the integration, and we have to supply the rent for those accounts. And right now, with current serum state, we have no actual closable markets.
00:02:16.646 - 00:03:09.734, Speaker A: So it's a lot of Solana to spin up a single strike. And that's what's holding us back at the moment from just creating all of these ephemeral markets to give a lot of strikes. So liquidity actually isn't the issue at the moment. It's really just some efficiencies and some of the architectures of the programs that PSi options integrates with. And so the architecture here is we have, on the user interface that you see, we have the psyoptions program and the serum program running on chain, and those two, the UI kind of bridges the gap between those two. And the psyoptions Options program is really the settlement options primitive foundation for these options, where you can mint an option, you can create a new market, you can exercise them, you can close existing options positions, and all these options are represented as SPL tokens. And that makes it very plug and play into the DeFi system.
00:03:09.734 - 00:03:42.356, Speaker A: So that's where it makes no assumptions of how things are traded. We have a serum market that we create for each of these option markets, and that's what the UI actually pipes into. So you can see these order books live on Mainnet. And that's just the actual serum order books that these options spls are trading. So they could trade on an Amm. You could take this option and give it to an investor in escrow. There's a lot you can do with it, but we'll go more into that in a little bit.
00:03:42.356 - 00:04:20.802, Speaker A: So we're sponsoring the ignition hackathon. So we have a $30,000 prize for people composing on top of psyoptions. So what we built is this very flexible primitive that can be extended into many different applications. I'll actually cover a list of those that we threw together. We've been thinking about, but don't have the resources at the moment to build ourselves. And maybe that will give people some inspiration into what they want to see. And then I'll also go into a live coding example for these who are actually using the psyoptions primitive.
00:04:20.802 - 00:05:10.914, Speaker A: And we'll build an instruction into a brokerage protocol that sits on top of psyoptions and maybe lets you manage your positions. The site options primitive doesn't handle like auto exercising or anything like that, so we have to build a protocol on top of it to actually handle that. And then we'll just take questions once we get through all of that and stock mark, interrupt me if any good questions come up. So feel free to ping questions in the chat while we're going through this. Happy to stop at any point in time to answer any questions you might have. But the goal here is to really show you a little bit more about psyoptions. Go into the architecture a little bit, and I'll probably cover a decent bit of anchor and using cross program invocations.
00:05:11.294 - 00:05:12.514, Speaker B: Inside anchor.
00:05:14.734 - 00:06:05.334, Speaker A: We'Ll jump right into the. We'll go with the ideas for the hackathon first so they're kind of fresh in your head. And then we'll jump into the actual architecture of psyoptions how some of these ideas could work, and then actual brokerage like instruction that we're going to write. So at the protocol, there's a lot of users, there's a lot of projects, some are user interface related where like the protocol can already handle these use cases. Some are more protocols or programs built on top of the actual psy options. American v one primitive and so at first here we have a whole Twitter thread, we can link this and, you know, some resources later, but we have a whole Twitter thread about us sponsoring the hackathon and just giving a list of ideas that might be helpful for people to brainstorm on. And the first one is a strategy vault.
00:06:05.334 - 00:06:47.964, Speaker A: We see this in. We can take this from like ribbon finance on the Ethereum blockchain where they have some basic strategies that they have a vault delegate that actually handles executing those strategies. They'll select a strategy and then it's pretty passive for the user to get involved. And these are just running some taker strategies for like covered call, selling covered calls or selling secured puts. And a lot of yield is generated by options and these strategies. But options can be very complex for people. So having vaults and strategies that are abstracted away from the base layer and primitive makes it a lot more accessible for people.
00:06:47.964 - 00:07:33.024, Speaker A: So like where we see here, all the slash options protocol makes no assumption of pricing. So this can be pretty intimidating for people who have no idea or are new to options trading. So the vaults will really make things a lot, can make things a lot easier for passive users just looking to generate yield. The American V one is also physically settled, so, and it works with any SPL representation. So even though they're like an NFT is also just some metadata wrapped around the SPL specification, nfts can actually plug and play into psyoptions. American V one. So you could write someone could.
00:07:33.024 - 00:08:30.498, Speaker A: If there's a market for this, this is still like a subject to be researched. You could actually have someone write a secured put where they lock up some USDC or maybe some other asset. If Star Atlas is trading their options or their stuff for Atlas at this point, now that they've launched a token, it could be any representation, but basically you lock in some solar USDC as a quote in a put contract and that's basically locking in a floor for an NFT. So then that maker who is providing that put as insurance could then sell it to someone. Put it in an escrow account and sell it to someone. So if you're holding a degen ape and you want to lock in some floor, you could find some insurance provider that could actually integrate just into, just use psyoptions to write a put for your ape and actually lock in some floor. So you know, we see escrow contracts already in the ecosystem.
00:08:30.498 - 00:09:07.332, Speaker A: We have the American V one and Psi options. That's physically settled. So the actual programs are already there. This is just more of like a user interface that needs to be built to bridge those gaps and make it actually more usable for users. Also, mango is good friends of ours, winning the hackathon alongside us back in the day. It's definitely really helpful to have spot trading and options trading in the same interface. So a very simple integration for mango or psy options would be putting the uis into or.
00:09:07.332 - 00:09:48.956, Speaker A: Yeah, putting the user interfaces into each other's like domain or UI under some tab or something like that. So that way people can get, can see all of these options or spot at once and manage it all from one user interface. Another thing. So the primitive is 100% collateralized. So to improve capital efficiency, we need to build some sort of margining system that works. And I'll go more into the two token system in a bit. But the point here is we have these writer tokens that denote you actually wrote the contract denotes that you are short the option and you could actually, you can value those tokens.
00:09:48.956 - 00:10:43.104, Speaker A: And if you built a borrow lending protocol that was flexible enough to take all these writer tokens, you can actually lock in. You could actually take, people could take the writer tokens, lock them in as collateral, and then get some sort of LTV back, and you create this margining system that is built on top of psyoptions. It's a little bit more complex or a little bit easier said than done. We've done some research on the architecture of how this might work, but we have yet to actually have the resources to implement it ourselves. So if there's anyone who's really curious and are building borrow lending protocols and want to jump on this, definitely reach out to us. Probably specify that if you guys want to reach out to us, ping us on Twitter, ping us on Discord Telegram. We actually have an ignition chat in the discord for everyone to collaborate, ask questions.
00:10:43.104 - 00:11:33.990, Speaker A: So we're always here to provide resources and help. As I've mentioned multiple times, we don't have the resources to build all of this ourselves, but we can definitely do a lot of advising and helping others who are interested in building on top. I mean, it's the whole point of Defi and decentralization, right? We're trying to all collaborate and work together. And so with that, we'll probably open source our UI later today and we have no problem. Actually, I'm going to show you some of the psyoptions repositories. Now we have no problem letting people in who are looking to compose so that way they can actually see the source code themselves, because we've just been closed source with our v one since it's been peer reviewed twice, but it hasn't been properly fully audited. That being said, anyone who's actually doing serious volume on our protocol has access to our repository and all that kind of stuff.
00:11:34.022 - 00:11:37.434, Speaker B: So it's definitely no clause for concern there.
00:11:38.334 - 00:12:16.654, Speaker A: With that, we have a few more ideas too. So if you're just a hackathon participant and you still have no idea what you're trying to build, reach out to us. We have lots of uis for these NFT options. People can write covered calls. We just named a few in this Twitter thread, and that's kind of what I was just reading off of. But we're always here to brainstorm and help people get involved and get up to speed on Solana. So with that, if there's no questions thus far, I will jump into the like more of the protocol, the psy options like instruction set, and kind of how they work.
00:12:17.734 - 00:12:31.574, Speaker B: Mark, how are we on questions? We're looking good. Actually, Taylor's in there answering questions, so sweet. Awesome. Thanks, Taylor.
00:12:31.654 - 00:13:15.878, Speaker A: All right, so there's probably five or six, I think, instructions, core instructions for the American v one. The first is initialize option market. What this does is you specify the parameters that are required to create a new option market. The option market for references, it might be. This side is just one option market. This is like a BTC call with a $45,000 strike and the contract size is zero, one BTC per contract. Initializing the market takes in the parameters that define these non fungible.
00:13:15.878 - 00:13:51.374, Speaker A: I mean, they're non fungible markets, if you will. And so the key parameters to understand are the underlying asset mint and the quote asset mint. So what that means is what is the underlying asset that must be locked up into this contract to write this option and give it to someone. So for the BTC call, that's just the BTC mint. And I think we use the solit BTC bridge mint. The quote asset is what denominates the strike price. What is going to be actually swapped for a contract.
00:13:51.374 - 00:14:46.696, Speaker A: Might help if I explain that the protocol doesn't understand anything about calls or puts. You can read a little bit more about that and some of the architecture designs that we have. But what like the primitive really does, is just helps you write a contract that gives someone the right, but not the obligation to exchange two things at an agreed upon price up until a point in time. And so that's what defines the american option contract. And so these, the underlying asset mint and quote asset mint are really just defining those two tokens that make up that swap. And then obviously we have the strike price, but we define that as the underlying amount per contract and the quote amount per contract. And that can be, that's how you can get the strike price, but also have a flexibility in the contract sizes.
00:14:46.696 - 00:15:30.288, Speaker A: So for the BTC markets we see here, to make them more accessible, not the premiums, not ridiculously priced, we have a contract size of zero one. So obviously we represent that as a U 64 with all the decimals accounted for for on chain. But this is how you get that, that 0.01 contract. And so psyoptions has the flexibility to make contract sizes of whatever you'd like. You know, if there's a token that's trading a lot lower, you can have contract sizes of ten, 101,000, 1525, whatever you want to do. And then you have your quote amount per contract denoting the amount of USD or whatever you're using.
00:15:30.288 - 00:16:05.234, Speaker A: So like we use USDC. So this could be the USDC on that 45,000. So if we have an underlying amount per contract of 0.01, to get the 45,000 BTC strike price, we just use a quote amount contract that is actually 450 because it's zero one times 45,000. And then last but not least, of course, like the expiration timestamp. And we use the chain's clock to actually check against those and validate those values. That's pretty much the gist.
00:16:05.234 - 00:16:45.668, Speaker A: Like these kind of, these core parameters make up a whole new option market. And so with that minting an option, this is obviously one of like the biggest, one of the most used features is you actually have to take the underlying asset, lock it up and mint a covered call. So right now, the protocol only handled to make it completely trustless. The protocol handles covered calls and secured puts. So what that means is if you're going to mint this BTC call, you actually have to put up the zero one BTC and lock that into the contract to mint and get this SPL representation of that contract.
00:16:45.836 - 00:16:46.852, Speaker B: So then you can go list it.
00:16:46.868 - 00:17:05.700, Speaker A: On the order book, someone might buy it, and when they exercise the program has control of that BTC to actually make that swap. You can read more. I won't go into too many details. That's the gist of it. You can read more on the docs. We'll provide a resource link as well. Exercising the contract is really just okay.
00:17:05.700 - 00:17:51.324, Speaker A: Now, I bought this option contract from someone, or someone transferred it to me. Now my contracts in the money about to expire, I want to exercise it. So you make a call to the exercise, I think it's called exercise covered call right now, or soon to be renamed to exercise option. But what that does is you actually have to put up the other end of the option contract to get that 0.01 BTC. So for the 45,000 BTC call that we were just discussing, that would be putting up 450 USDC in order to get that zero one. And so what happens with that is that 450 USDC then goes and gets locked in the contract or into a pool in that option market.
00:17:51.324 - 00:18:38.980, Speaker A: You get that 0.01 BTC from the underlying asset pool sent back to you. And then the, the actual person who was the mentor who wrote the contract, the contract writer has to make another instruction call to get that 450 USDC out of that pool. That can be done anytime, pre expiration, post expiration. If there's, if a contract has been exercised or assigned, anyone who holds the writer token for that option contract can actually go in and claim the assets. I guess I forgot to go over a little bit of the two token system with the minting, so I'm just going to go back to that real quick. When you mint the contract, you actually get two tokens.
00:18:38.980 - 00:19:35.564, Speaker A: The first is the option token, which is what you're going to sell on the CRM order book if you're using the UI. The second is the writer token, which denotes that you actually wrote the contract, denotes your short option. And so this writer token, holding this writer token is what actually gives you that claim on those quote assets when someone exercises. So writer tokens and option tokens are fungible within the specific option market, these specific parameters that were set on initialization. So anyone, if there's an, if someone gets exercised, or if someone exercises an option token, they're burning the option token and putting up that quote asset. Then anyone who has a writer token actually has a claim on these quote assets that are in that pool for that contract or that option market. So then anyone can actually extract the assets using the exchange writer token for quote instruction.
00:19:35.564 - 00:20:23.302, Speaker A: And all that does is burns the writer token and then returns the quote amount per contract to the writer specified destination. If no one exercises at all, then you have to use this close post expiration. So if the market has expired and there's no quote assets in the pool, so there's only underlying assets left. You can then just call the close post expiration. All you need for that is a writer token. It will burn the writer token and then transfer back the underlying amount per contract to you. So if the, you know, the market expires and things haven't been exercised well then you can just use your writer token to get that back and you don't need the option token.
00:20:23.302 - 00:21:17.654, Speaker A: Now what happens if you want to close out before expiration? Maybe some, maybe there's a one year expiration or something crazy. You'll actually need both the option token and the writer token. So if you sold your option token, maybe things have gone in your favor and the option tokens, you know, the market is a lot cheaper. You could just go in and buy that option token and now you have this option token and the writer token for the same market. You can then call the close position instruction which will burn both tokens and then return the underlying amount per contract back to you. So with that, that's the core instructions here for psy options for the American V one protocol. And so with this we get a lot of flexibility in what we can do.
00:21:17.654 - 00:22:36.204, Speaker A: I'm just going to reiterate a few more of the unique aspects about how flexible this primitive is and how you can really brainstorm some solutions or some user interfaces that are unique. Because ultimately our focus here is to build something with psy options for the hackathon we see here. Just like a traditional option trading interface, but the psyoptions, American v one primitive is very flexible in what it can do that it doesn't have to be just for trading. You can write these american style option contracts. If you want to give contributors, similar to in the startup world, incentivize stock options, you can give them a long expiring american style contract that they can choose to exercise up until some point in time. So let's say the DAO has a great contributor that they want to reward, but they don't want to just drop spot tokens on them. Well, the DAO could use the American V one contract to mint multiple option contracts, lock some of them investing if you want to, all that kind of stuff to manage this kind of incentivized contributor option pool, if you will.
00:22:36.204 - 00:23:34.834, Speaker A: So maybe you have something that's like a ten year expiration and it gets granted to these contributors with a one year cliff in a traditional three year vest or four year vest. So three years after that and they're getting these option tokens. So they're not just spot tokens. The user actually has to exercise them at some price point and put up some USDC that actually becomes funding for the foundation. So you can leverage this protocol with a few other things like bonfides vesting to really create like a startup incentivized ecosystem or UI or something like that, right where you're incentivizing contributors. The other thing is we see liquidity mining protocols that just leverage spot tokens. You can combine the American V one to plug into some liquidity mining, and that lets you pull all these kinds of levers.
00:23:34.834 - 00:23:37.678, Speaker A: You could do, you could do a really long expiration.
00:23:37.766 - 00:23:40.222, Speaker B: So it doesn't, if you wanted to.
00:23:40.238 - 00:24:19.542, Speaker A: You could do a short expiration. You can, you know, we don't, we still need to research these subjects. It'll be really interesting. And we want to work with other protocols to try liquidity mining with different expirations, different in the money, out of the money, at the money. But this really just gives you the flexibility to do a liquidity mining program that has all these levers you can pull. Instead of just being at selling or dropping at the spot price, you actually now have this infinite spectrum of value that you can add. You can make the options strike price essentially zero, which becomes the spot price.
00:24:19.542 - 00:25:01.214, Speaker A: Or you can go closer to at the money to give just a little bit of value based on what the premium and volatility would value it at. Or you can go out of the money and really make these people, it's not worth it for them to exercise at the moment. So maybe they're going to hold longer term until they really see a good value. As the project matures, the token appreciates things like that. So it gives ultimate flexibility in and how you want to drop value to these liquidity providers. You can take the same concept and just do it for airdrops as well. You can just mint a ton of options and airdrop them to your community members, the most engaged community members, your NFT holders.
00:25:01.214 - 00:26:10.564, Speaker A: That way, instead of just dropping spot tokens that these holders or members are just receiving for free and they're selling, maybe because there's a tax burden, they're selling because maybe they've just held on this NFT and maybe they don't believe in the project, whatever it may be. You have these other levers to pull with the kind of value that you're dropping. And even if it's in the money and there's good value in that option, well, they still have to put up some USDC or whatever that quote asset is that you set on that option to exercise and get the actual spot tokens out. And that in turn just gives the foundation and the DAO more funding versus if you were just airdropping tokens, you're just giving away value and there's potential selling pressure from those who just received free value or maybe have a tax burden that they have to realize with that. All right, there's a lot of talking. Mark, any questions?
00:26:12.904 - 00:26:20.440, Speaker B: None. None so far. All right, I think I'm going to.
00:26:20.472 - 00:26:24.164, Speaker A: Jump into workshop coding.
00:26:25.904 - 00:26:26.644, Speaker B: So.
00:26:28.344 - 00:27:40.372, Speaker A: So we're on the this is the psy options originally Solana options from back in the day repository that we have where I actually last week rewrote the american protocol in Anchor. This is not the current running version, but this is the program rewritten with anchor. I'm going to use that actually to do the cross program indication. What we're building here is the primitive doesn't actually do auto exercise and so that can be a pain point for people if they aren't paying attention or right now there's no on chain alerts or notifications. Hopefully our friends at Google will get those out there at some point. I know they're working hard, but it's still nice to have something that just auto exercises so you don't have to be paying attention up until the point of expiration. You can kind of build in, is it in the money or out of the money with an oracle and then just have this, this, I'm going to call it the brokerage program because it can be extrapolated to a lot of other.
00:27:40.372 - 00:28:25.254, Speaker A: Nice to have built on top of psyoptions, but this could exercise for you. And so what we're going to build is we did a little prep for this. So we have this brokerage protocol that we can initialize a new vault for an option vault for some wallet address and uninitialize. Just to make things simple. We take in an amount of options that we want to go in there and you see that it will just transfer that from the option source to the vault using the user's authority. And that's pretty much the gist. We don't have any real, we haven't dug into security here or anything like that, so we've just kept it very plain and simple.
00:28:25.254 - 00:28:44.786, Speaker A: We like to do a lot of tdd so that's what makes anchor really nice. When you're doing all your tests in JavaScript it makes it a lot more familiar for people. So we have some basic setup here for this exercise, let me actually, I'm realizing this is probably really small for.
00:28:44.810 - 00:28:49.254, Speaker B: People, so let me just do this.
00:28:51.574 - 00:28:53.034, Speaker A: Is that more legible.
00:29:01.854 - 00:29:02.214, Speaker B: Mark?
00:29:02.254 - 00:29:51.894, Speaker A: How is that legible? I feel like there's class. Okay, so, all right, we have, we're setting up this exercise test where we basically, you know, we need to set up an option market with psy options because this brokerage protocol assumes that it already exists. We need to mint some options while the market's not expired. We need to initialize a vault. And then we finally get into like, this is all kind of just basic setup for what we need to have on chain. And then we get into actually cranking or using this exercise request that makes a cross program invocation to the American V one and exercises options on behalf of a user. So I'm going to just go into a little bit about this setup.
00:29:51.894 - 00:30:23.114, Speaker A: So I'm going to assume everyone's familiar with anchor to some degree. So we have these payers and this provider that anchor has. And that's kind of where we get our, we have our workspace that has our two programs that it is deploying when we build. Then we have a lot of different variables that we're going to use for these tests that need to be accessible in setup and future tests. So we pull them.
00:30:24.894 - 00:30:30.022, Speaker B: Outside of the actual, each test here we just have.
00:30:30.038 - 00:31:12.886, Speaker A: A function that just calls the american mint option. Just to help for function could probably cleaned up and pulled out into a utility. But for now, we're just moving quickly as we do in crypto and we can always clean up the code later. We airdrop some Solana to our users keys and our payers keys just so that we have, so we can actually call instructions here. We actually do an initialized setup to create an option market. This is, I'm not going to dive all the way into this, but it's really just, it's going to create the underlying, quote, mints. So just creating some SPL tokens that the test can use.
00:31:12.886 - 00:31:37.796, Speaker A: It's going to create some associated token accounts because the psyoptions program does take a five bps, a five bps fee for mint and a five bps fee for exercise. If it's there, like if it's not an NFT market and creates those accounts, then it also creates a, creates the option market. And so we can see that we.
00:31:37.820 - 00:31:39.420, Speaker B: Have kind of all these accounts or.
00:31:39.452 - 00:32:03.532, Speaker A: Sets up, sorry, it sets up for an option market. And I believe we actually initialize the option market here. And so you can just imagine that this is all out of tests set up. And then this right here is actually initializing the option market, calling that initialize option market function that we went over in the architecture. And then we're just creating an option.
00:32:03.588 - 00:32:07.944, Speaker B: Token instance just for ease of use on future tests.
00:32:08.244 - 00:32:57.914, Speaker A: We have this helper function that creates a mentor. What that does is just creates a new account with an option account, an underlying account, underlying asset account, quote asset account, writer token account. This is all handled typically by the user interface. If you don't, if your wallet, if it recognizes your wallet doesn't have these accounts, it creates them for you. So for running these actual tests, we have to do all of this setup ourselves, creating the quote accounts, creating the underlying accounts, creating the option account, creating a writer account. And then here we actually send the transactions to create all those accounts. And then to actually be able to mint options or exercise options if we want.
00:32:57.914 - 00:33:11.602, Speaker A: We need to actually have underlying tokens. So here we're using the SPL program to mint tokens to those newly created accounts. And we just, this is an argument passed in for the underlying amount and.
00:33:11.618 - 00:33:13.294, Speaker B: Then argument passed in for the quota.
00:33:13.474 - 00:34:04.814, Speaker A: And we return all these new accounts back to the tests for use. And then now that we actually have the mentor, we use that. This is that helper function that we defined above that actually mints these options to this newly created mentor. Now we pretty much have the full setup from the psyoptions perspective of what's needed. We have an option market, we have a mentor with enough assets. And then we actually minted some options to that newly created mentor in their associated accounts. So now we want this mentor to have these options in the brokerage vault.
00:34:04.814 - 00:34:52.934, Speaker A: Again, this could be done by the user interface where it's very seamless. So things get a little bit more granular when we do tests. But you could imagine a user interface that makes one transaction to mint these options and then immediately, like in the same wallet signature makes a second transaction or separate instruction that mints them to this vault or transfers them to this vault. So you could do it, make it very clean from a user perspective. But when really running good tests, we have to do all this setup in sequence here. And so we just transfer these options when we initialize the vault here. So this is actually going to be interacting with that, with the, where are we at?
00:34:53.634 - 00:34:54.734, Speaker B: Wrong one.
00:34:56.794 - 00:35:25.368, Speaker A: With the brokerage protocol, the initialize. So we can see that we have this, I mean, program is the brokerage protocol and we're using the anchor helpers here to actually initialize and we have the size. So this is the number of options. So we're just actually initializing the vault with one option. And then these are the accounts that the initialize takes, the signer. And here we have the vault account. So now imagine this all goes well.
00:35:25.368 - 00:35:41.144, Speaker A: We have this mentor who has minted these options. They just transferred, initialize this bolt and put them in there. And now we should, in theory, if the market's not expired, which we set the market to expired an hour from.
00:35:41.964 - 00:35:45.664, Speaker B: Right here when actually creating the market.
00:35:47.684 - 00:36:05.688, Speaker A: Then we can actually just test the exercise because we don't have to wait until an exact point in time since this is an american style option protocol. So we can now actually just assert like let's just do a sanity check here and validate that the vault has options in it.
00:36:05.816 - 00:36:12.624, Speaker B: So we'll do a search equal vault account.
00:36:12.784 - 00:36:17.584, Speaker A: The vault account is already the option token account.
00:36:17.664 - 00:36:22.004, Speaker B: So we can just do Amount and we'll do two strings and easily compare.
00:36:22.384 - 00:36:24.324, Speaker A: And we'll do, it should be size.
00:36:25.384 - 00:36:28.040, Speaker B: Since the size is what we transferred.
00:36:28.232 - 00:36:30.604, Speaker A: And so this should actually run.
00:36:32.464 - 00:36:38.204, Speaker B: Okay. And so let's filter out the test because we have a ton of tests.
00:36:38.944 - 00:36:40.804, Speaker A: Unrelated to this Exercise.
00:36:45.824 - 00:36:48.968, Speaker B: So it's building. The two programs see this a few more times.
00:36:49.016 - 00:36:50.004, Speaker A: As we do this.
00:36:55.044 - 00:36:56.344, Speaker B: It'S going to run it.
00:36:59.684 - 00:37:05.788, Speaker A: There we go. So we know that we have, if you guys want to see a sanity check, we could just like log this.
00:37:05.836 - 00:37:18.240, Speaker B: But we can validate that there is actual amount in default. But while that's running, clear this out.
00:37:18.432 - 00:37:28.364, Speaker A: And start writing our other tests. So we need to actually make sure that the mentor received the underlying assets. So the what we can do.
00:37:28.904 - 00:37:31.844, Speaker B: There we go. There's one option in there, the Volt.
00:37:32.464 - 00:37:40.760, Speaker A: So we need to check the, we're going to write a test, the failing test here and then we're going to dive into the actual like rust code.
00:37:40.872 - 00:38:02.924, Speaker B: And I'll try and speed things up a bit since I am user underlying before equals underlying token git info key. So this, if we actually await it.
00:38:03.424 - 00:38:14.364, Speaker A: Should return the account info for the underlying token that is the user's underlying account. So this can give us the balance before we actually make a call. And then we'll do the same thing.
00:38:26.144 - 00:38:27.484, Speaker B: And this is after.
00:38:30.664 - 00:38:36.164, Speaker A: This, after the, like the call should be made. And so we'll just actually take the difference.
00:38:38.764 - 00:39:02.944, Speaker B: We'll do user underline after that amount. Let's subtract from the before and that should be the difference. And then we'll actually make the assertion here assert dot equal.
00:39:03.824 - 00:39:21.444, Speaker A: So we know it should transfer the underlying amount per contract times the size of the like that are in the vault back to the user's underlying account. So we're going to assert that the user's underlying difference.
00:39:24.744 - 00:39:27.296, Speaker B: This is already a mount.
00:39:27.440 - 00:39:36.734, Speaker A: The user underlying difference is the size multiplied by the option market underlying amount per contract.
00:39:37.434 - 00:39:39.534, Speaker B: And we'll do two string comparison.
00:39:40.674 - 00:39:43.014, Speaker A: And now this test should fail.
00:39:57.694 - 00:39:58.474, Speaker B: Cool.
00:40:01.054 - 00:40:15.954, Speaker A: So now we should act. Now we have to actually write an exercise function inside the brokerage protocol to handle this. So we'll do a new account structure.
00:40:30.394 - 00:40:39.442, Speaker B: That's the pattern. Yep. And we'll just start with just the authority percentage check.
00:40:39.538 - 00:40:40.854, Speaker A: And we will do.
00:40:42.914 - 00:40:46.374, Speaker B: Actually to create the instruction I can type.
00:40:57.384 - 00:41:06.924, Speaker A: We're just going to do something. We're going to keep it simple and actually just have it exercise all the contracts in the vault. So it's not going to take in an amount or anything like that.
00:41:11.024 - 00:41:11.708, Speaker B: Here.
00:41:11.856 - 00:41:32.420, Speaker A: So now like we have this, we have this basic template for an exercise instruction. So we'll actually just start filling out, making the call to the programs exercise function. So we're back on the client side here using the anchors helper stuff. And since there's no arguments, we just.
00:41:32.452 - 00:41:53.214, Speaker B: Pass in the options which is the account, and we'll do the authority is the user's public key and the signers the user compare and it should run.
00:41:53.334 - 00:42:00.794, Speaker A: Fine without error and still just give us the same assertion error here.
00:42:04.074 - 00:42:09.294, Speaker B: While that's going, I'll probably jump into a little more. Cool.
00:42:09.754 - 00:42:24.874, Speaker A: So now we have, now we have to actually work on the cross program invocation call. So of course we're going to need the american programs id. So we're going to pass this in here.
00:42:25.034 - 00:42:34.574, Speaker B: We're going to do the PSi american program and that would be the option program, program id.
00:42:37.314 - 00:42:49.450, Speaker A: And need the vault authority because we know that we need, we have this vault authority that owns the actual vault.
00:42:49.642 - 00:42:53.174, Speaker B: So we're going to pass that in. It was initialized.
00:43:02.774 - 00:43:04.374, Speaker A: I think I already defined this in.
00:43:04.414 - 00:43:13.274, Speaker B: A variable when I was setting up the tests. Let's validate that. Yeah, cool. Sweet.
00:43:13.934 - 00:43:19.674, Speaker A: So again, this should like run. Everything should be fine.
00:43:21.434 - 00:43:24.094, Speaker B: It should still be failing. Same place.
00:43:25.834 - 00:43:52.244, Speaker A: As that's running. I'm just going to keep for speed here. I'm going to just go through some other stuff. So we have the, this is the PSI options american v one rewritten for rewritten anchor. And so here we have this exercise option account struct which is used in the actual exercise option function.
00:43:53.504 - 00:43:55.408, Speaker B: So we see it's this exercise option.
00:43:55.456 - 00:44:33.634, Speaker A: Here, which basically just burns the, burns the option tokens, transfers the, quote assets to the pool, transfers the underlying assets from the pool to the exerciser. If there's a fee need like taken, it takes that fee and then boom, we're done. That's like exercise in a nutshell. Probably more easier said than done, right? And so with that, we have the exercise option account structure that we need to pass in. So we can pretty much just rip all of this and take it over to the.
00:44:37.654 - 00:44:56.186, Speaker B: Accounts we have on the other one. Okay.
00:44:56.370 - 00:45:01.174, Speaker A: And so now we need to start filling in this information into the actual exercise.
00:45:06.974 - 00:45:39.218, Speaker B: So we have option market, option mint, the user option account, public key, and.
00:45:39.266 - 00:45:40.974, Speaker A: We have the underlying.
00:45:45.874 - 00:45:46.654, Speaker B: Pool.
00:45:49.914 - 00:46:04.664, Speaker A: So I mean, I'm going to assume everyone is familiar with some of the Solana basics. If anyone has questions offline about what I'm doing here and why I need to pass in all this information.
00:46:07.564 - 00:46:07.996, Speaker B: Happy.
00:46:08.020 - 00:46:31.434, Speaker A: To answer that offline, but basically need to pass in every single account that gets, or every single like public key for an account that gets acted on here. And you can see here that we're specifying that these are mute mutable because they're going to actually, all of these assets are being transferred, whether it's in them or out of them.
00:46:33.294 - 00:46:34.270, Speaker B: So we just have to.
00:46:34.342 - 00:46:41.714, Speaker A: That's the beauty of Solana. It has the parallelization of these.
00:46:44.374 - 00:46:54.466, Speaker B: Accounts and why it runs so fast. Actually, quote asset source, would be user quote account set up all these accounts.
00:46:54.490 - 00:47:02.138, Speaker A: These user quote accounts, user underlying accounts, they all come from this like create mentor setup here.
00:47:02.186 - 00:47:35.394, Speaker B: You can see them being assigned here. And we have the fee owner, which fee owner is a constant. We had the choking program. Okay.
00:47:37.814 - 00:47:43.794, Speaker A: If everything is done well here and we pass in all the accounts and didn't have any typos.
00:47:44.354 - 00:47:45.854, Speaker B: Oh, what do we got here?
00:47:49.594 - 00:48:04.574, Speaker A: Oh, option mark is not found as this scope. So we have this CPI account option market, which really comes from the psyoptions option market. So this is that option market that we initialized here, this struct. So we actually have to.
00:48:06.794 - 00:48:07.162, Speaker B: We have.
00:48:07.178 - 00:48:14.362, Speaker A: To import that from the crate. So we'll use, use Sciamerican and then.
00:48:14.378 - 00:48:19.574, Speaker B: We'Ll do option market. We go now we should build and run.
00:48:20.594 - 00:48:28.722, Speaker A: That definition is actually just using this cargo or like the dependency is specified here. So right here we're just loading it.
00:48:28.738 - 00:48:33.834, Speaker B: Locally, which is this program right here. Cool.
00:48:33.914 - 00:48:36.614, Speaker A: So it looks like all the accounts like passed incorrectly.
00:48:38.534 - 00:48:39.794, Speaker B: Close that out.
00:48:43.734 - 00:48:46.994, Speaker A: So now we actually have to do the cross program invocation.
00:48:49.734 - 00:48:50.262, Speaker B: Where we have.
00:48:50.278 - 00:48:55.238, Speaker A: To specify all the accounts. So we need to do the CPI.
00:48:55.326 - 00:49:02.274, Speaker B: Program is the account for the SCI american program.
00:49:05.604 - 00:49:24.824, Speaker A: And then when you do the CPI account, okay, this is, we also need to import the exercise option struct that we have here. Takes me to it because this is what we're specifying for the actual CPI context.
00:49:26.684 - 00:49:32.064, Speaker B: CPI is just cross program indication going over anyone's head.
00:49:32.144 - 00:49:36.624, Speaker A: And so now we'll do this exercise option and now we have to type.
00:49:36.664 - 00:49:40.444, Speaker B: Out all of these accounts.
00:49:41.304 - 00:49:43.884, Speaker A: So the user authority is just going to be our authority.
00:49:45.504 - 00:49:55.224, Speaker B: We have the option authority which is going to be the vault authority which has access to the options we put in there.
00:49:55.344 - 00:49:58.944, Speaker A: We have the option market which is.
00:50:02.364 - 00:50:05.060, Speaker B: We already passed in here and make.
00:50:05.092 - 00:50:08.460, Speaker A: It into, because this option market expects a program account.
00:50:08.532 - 00:50:09.836, Speaker B: So we're just going to course it.
00:50:09.860 - 00:50:12.824, Speaker A: Into from a CPI account, program account.
00:50:13.844 - 00:51:42.794, Speaker B: What else do we have? We have option mint. Any questions while I'm typing all this stuff out? Yeah, somebody was wondering if you have time if you can show an example emit eventually and like how to consume it in typescript.
00:51:45.054 - 00:51:47.274, Speaker A: Sample emit event.
00:51:49.734 - 00:51:51.114, Speaker B: Or an example.
00:51:52.974 - 00:51:54.434, Speaker A: Of emitting an event.
00:51:55.134 - 00:52:06.514, Speaker B: Not sure what, they actually don't use emit events at all in any of this stuff. I can write it just later if they want that.
00:52:13.034 - 00:52:34.320, Speaker A: Okay, so now we have the accounts set up for this exercise option and then we need to actually make, we need to generate the signer for the cross program invocation because we need to sign this transaction that transfers from the vault.
00:52:34.472 - 00:52:41.944, Speaker B: So that way psyoptions know or Solana knows that we actually have access to the options in this vault.
00:52:42.104 - 00:52:50.896, Speaker A: So we're going to generate the seeds and it's going to mimic exactly how we did the vault for the initialized stuff.
00:52:51.040 - 00:52:52.712, Speaker B: So you can see here that the.
00:52:52.728 - 00:53:00.104, Speaker A: Vault authority is the option market key and then the text fault authority.
00:53:00.724 - 00:53:03.064, Speaker B: So we'll do key as.
00:53:18.564 - 00:53:20.828, Speaker A: We need a bump seed from the vault authority.
00:53:20.876 - 00:53:21.908, Speaker B: That came from here.
00:53:21.956 - 00:53:23.372, Speaker A: So we actually need to pass this.
00:53:23.428 - 00:53:25.504, Speaker B: In as a.
00:53:32.164 - 00:53:32.964, Speaker A: So now we actually.
00:53:33.004 - 00:53:59.044, Speaker B: Have a new argument that needs to come before these accounts. So vault. And then we can pass this in here. We have this signer close.
00:54:10.104 - 00:54:13.004, Speaker A: Okay, now we're creating the CPI context.
00:54:16.764 - 00:54:20.428, Speaker B: Comes from anchor. You do it with a signer.
00:54:20.476 - 00:54:21.660, Speaker A: So we have the program account.
00:54:21.732 - 00:54:59.480, Speaker B: So we already extract that CPI program. We have the accounts which we already did with CPI accounts and then we have signer which we extracted above. And finally we need to actually call the CPI to exercise the option with the CPI context. And because the ex option takes in an amount.
00:54:59.592 - 00:55:16.424, Speaker A: We need to use the amount. We're not doing any checks here, so we're just taking in all of the source of the exercise options token source, which is the vault that we initialized and passing in the amount as the amount that should be exercised.
00:55:19.484 - 00:55:24.116, Speaker B: And this is actually probably going to.
00:55:24.140 - 00:55:30.684, Speaker A: Fail now that I think about it, because we didn't pass in the feed key properly.
00:55:30.804 - 00:56:42.764, Speaker B: And so I believe this owner does not match the burn. What do we got here? I need to make sure this is, oh, this needs to be. I thought I'd change this. How does it burn? This is good. There's our option authority here. It's getting hard with this tiny screen here.
00:56:47.624 - 00:56:49.696, Speaker A: Oh, we did vault authority, which should.
00:56:49.720 - 00:57:28.094, Speaker B: Be correct, properly, set up, down and close. Want to get rid of that?
00:57:44.054 - 00:57:50.606, Speaker A: Did we pass in the vault authority? I don't, I think maybe we forgot.
00:57:50.630 - 00:58:58.870, Speaker B: To pass in the same authority. Program vault authority option, market option, mint exercise option, token source. What else are cool. I'm wondering if. All right, I'm going to my cheat sheet here since we are time constrained and just like magic, it works. Okay. All right.
00:58:58.902 - 01:00:00.894, Speaker A: So there is one thing I wanted to show you guys, but I'm looking at the time and it's definitely been an hour, but so one thing that we were running into, I ran into and like messing around with this on a flight yesterday was the exit that I wanted to touch on. For anchor, the exercise option function here, we use optional accounts when doing the fees. So if you look at this at the fee structure here, we do validate exercise fee accounts and we pass in the remaining accounts. So in anchor, you can have optional accounts. You just have to use the remaining accounts array and pass them into an instruction. And then just like if you're used to Solana native, you just use your iterate across those accounts. But if you accidentally, or if you call next account info and there's nothing in that iterable or, yeah, the program is going to panic.
01:00:00.894 - 01:00:45.504, Speaker A: And so initially, like, we forgot to put in that exercise fee account. And so you see this updated test here that actually just creates checks. If there's an, excuse me, exercise fee, adds that to the remaining accounts and passes it in here. And then it's good to note when you're trying to do a cross program invocation for a instruction that has a, has optional accounts, you need to actually just set the context. Remaining accounts, well, you need immutable context. Then you can set the remaining accounts here because this new assigner actually doesn't take in, you just see it initializes and remaining accounts vector.
01:00:46.084 - 01:00:48.628, Speaker B: So that's why we have this mutable.
01:00:48.676 - 01:00:53.964, Speaker A: Context that we then other remaining accounts too, and that all gets passed into.
01:00:54.004 - 01:01:01.664, Speaker B: The exercise option and then things don't fail that sweet.
01:01:02.684 - 01:01:05.784, Speaker A: I'll probably wrap it up with the live coding here.
01:01:07.244 - 01:01:09.484, Speaker B: I don't know if there's any more.
01:01:09.524 - 01:01:52.616, Speaker A: Questions that I suggest. The emit thing. I actually don't use emit or haven't used emit yet, but I could definitely if you want to ping me or jump in our discord and the ignition, I'm happy to throw something together if it helps you. If you're interested in working on top of psy options now, we're here to provide resources and help where we can. So with that, I just want to reiterate, we have a $30,000 prize that we're sponsoring for those who build on top of psyoptions. You know, we're really looking. It can be user interfaces, it can be other protocols that leverage, you know, I think liquidity mining option.
01:01:52.616 - 01:02:46.194, Speaker A: Liquidity mining would be really cool if someone already can take a liquidity mining program and implement site options into that. I think Mago has a good liquidity mining program that plugs into serum, so it'd be really interesting to maybe to work with them on that. I think another really, really cool thing is all the stuff that can be done with the american v one in regards to incentivizing contributors and things like that. So a user interface where you can simply manage these incentivized options or incentivize contributor options, we'll call them icos instead of isos like we see in the traditional world. But the trading view is very complex and you could make something much more simple for managing.
01:02:48.254 - 01:02:49.390, Speaker B: Those options that aren't.
01:02:49.422 - 01:02:54.274, Speaker A: Really just for trading. We have this portfolio page, but again, I'm thinking a very simple UI.
01:02:57.814 - 01:02:58.126, Speaker B: And.
01:02:58.150 - 01:03:16.054, Speaker A: Then I think there's a lot of cool stuff that can be done with NFT that just hasn't even been explored or researched. Again, like we're here to brainstorm. So if you're not sure what to build, jump into our discord, jump into our telegram. Everyone in there is very friendly and happy to bounce ideas around.
01:03:17.954 - 01:03:21.394, Speaker B: Cool. Sweet. Thanks so much for joining, Tommy.
01:03:21.514 - 01:03:23.734, Speaker A: Looking forward to seeing you on the next one.
01:03:25.354 - 01:03:26.594, Speaker B: Thanks for having us.
01:03:26.754 - 01:03:29.144, Speaker A: Looking forward to it. Happy hacking it.
