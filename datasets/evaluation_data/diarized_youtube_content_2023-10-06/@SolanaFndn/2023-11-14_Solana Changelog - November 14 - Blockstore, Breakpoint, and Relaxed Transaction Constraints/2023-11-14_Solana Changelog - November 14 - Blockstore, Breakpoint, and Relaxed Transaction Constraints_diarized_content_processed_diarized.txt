00:00:03.960 - 00:00:09.834, Speaker A: Hello, everyone. GmGm. I'm Nick from the Solana foundation devrel team. And welcome to the changelog. How you doing this week, Jacob?
00:00:10.214 - 00:00:19.350, Speaker B: I'm doing great. We just had a breakpoint just a few weeks ago, so wanted to start with that. What kind of things did you see at breakpoint that you were interested in?
00:00:19.462 - 00:00:53.018, Speaker A: Oh my goodness, there were so many great talks from breakpoint. There's some of the obvious ones of Steven Lucher and the new web3 js. Amazing chat. Steven does great on podium, on stage, like great presenter skills. And then you've got the next obvious one of runtime v two. Alexander and Alessandro did such an amazing presentation on there and all of the hype that is runtime v two. I don't think I saw a single presentation that got more ovation from the crowd than the runtime v two talk.
00:00:53.018 - 00:00:54.134, Speaker A: It was amazing.
00:00:54.504 - 00:01:19.016, Speaker B: Yeah, runtime V two is a very exciting thing. I believe they're trying to get it out sometime next year. I think it's like early next year in testnet is their plan. So if you're interested in learning more about runtime V two, definitely check out their talk at breakpoint. It's probably going to change a lot of how we develop on making much easier and better developer experience. So definitely check that out.
00:01:19.200 - 00:01:21.914, Speaker A: Yeah. Which, which talk was your favorite, Jacob?
00:01:23.014 - 00:01:27.142, Speaker B: I do. I did really like the fire dancer talk, obviously.
00:01:27.198 - 00:01:28.606, Speaker A: Fire dancers, so good.
00:01:28.790 - 00:01:29.134, Speaker B: Also.
00:01:29.174 - 00:01:30.434, Speaker A: Fire dancers on Testnet.
00:01:31.374 - 00:01:56.550, Speaker B: Yes. Fire dancer on Testnet. That was really good to hear. I think it was like eleven. The patch version was 1104, which is kind of hilarious because like, if you think of, if you have 1104 patch versions, if we were having that many deployments of like the normal Solana, I think everybody would be really angry on the validation. But yeah, they had 1104. You can actually view it.
00:01:56.550 - 00:02:29.758, Speaker B: If you call the command to view validators and testnet. You can also see other validators as of the time that this recording, running fire and answer and testnet and trying it out for the first time. So definitely check that out. Check out that video as well at breakpoint, as well as the talks by Kevin Bauer where he made, what, shaw 256 faster for the world, I believe. Uh, which is kind of crazy. Um, there's the one that they ran, I think, sig verify on FPGA's. Um, and then something like 8 million.
00:02:29.806 - 00:02:33.254, Speaker A: Tps on a seven year old FPGA. Wild.
00:02:33.374 - 00:03:04.924, Speaker B: Yeah, yeah. So definitely check out all the different fire dancer videos if you haven't already. And then like, if you're interested in Breakpoint and you weren't able to make it to Breakpoint? Uh, we have the full list of all the videos on the YouTube channel. You can just go find any of the talks that you may have missed and watch them as if you were actually at breakpoint. So definitely check those out. Getting into commits this week. So the first one we have is the block store by cries of carrots, which is tiara.
00:03:04.924 - 00:03:52.340, Speaker B: So this one will only return blocks on root slots. So what does that mean? In the previous, previous version what happened was we were returning blocks that were for unrooted slots from the block store and that would cause issues like you would get back the block and then it would get flushed because it was not actually rooted. And then you do the lookup again and it wouldn't be there because it would be flushed out. You get some other rooted block. So this is making sure that we're only returning blocks for the rooted slots from the RPC. This is, I believe, yeah, this is for get block time and get block. So this will make things a lot simpler and a lot better for people using those two RPC methods.
00:03:52.340 - 00:04:24.868, Speaker B: Moving on to the next one, we have another commit by starry about burning fees collected into invalid accounts. So this is kind of a funny commit. You can actually see that there's a associated with it and what it does is based off of the fee distribution. Every epoch you could have distributed fees to non system owned accounts. This will basically just make it impossible to do that. It's just an extra check. An extra fix has a feature gate, has a SImD associated with it.
00:04:24.868 - 00:04:39.664, Speaker B: And that's, those are the two commits we have this week on web3 js. I know that you spoke about it, Nick for Breakpoint and Lucia made the talk. Can you talk about how people can try it out today?
00:04:40.144 - 00:05:10.598, Speaker A: Yeah, absolutely. Like Stephen mentioned in his talk, you can actually try it out now, the new version, you can install it directly from NPM, you can see it here on the screen, the tag, or you can go to this URL and actually view some of the information with it. But please do try it out. Try to build something with it. Figure out the do's and don'ts of the new system and the new setup. Because there's definitely going to be some breaking changes with this. Like this is a complete rewrite.
00:05:10.598 - 00:05:48.794, Speaker A: It's a lot faster, it's a lot smoother. The developer experience is going to be a lot better, but there's a new learning curve that people are going to have to overcome. But it's going to be better in the long run. And the thing I really want to stress is that because this is such a huge, massive rewrite of web3 js, this is the entire community's chance to give their input on what they want it to look like. Steven Lucher and the rest of the Solana Labs team that's working on this, they're very receptive to that type of feedback. So please send it over to them on any of the normal channels and you can really help shape the developer experience with the new web3 js.
00:05:49.574 - 00:06:10.024, Speaker B: Yes, definitely do that. Also, if you actually watch the web3 JS video or the talk by Lucher, he will give some contact information. So if you're actually upgrading your dapp from the previous one to the new one, their team will actually help you because they want to find all the bugs early. So definitely take, take advantage of that.
00:06:10.064 - 00:06:19.976, Speaker A: Get dedicated help from Solana Labs and Steven Lucher himself to integrate the new web3 js into your application. Sounds like a pretty sweet all free of charge too. Like who could say no?
00:06:20.040 - 00:06:27.164, Speaker B: Yeah, it's all to make the developer experience better for all typescript JavaScript developers building on slot in the future.
00:06:27.614 - 00:07:09.554, Speaker A: All right, let's shift over to the simd of the week. We've got SIMD 82, which is relaxed transaction constraints. So basically this is a proposal to relax some of the constraints or like the current checks that a transaction goes through before it gets added to a block. Right now there's a bunch of checks, a lot of them are very, very necessary, like you would assume, but some of those checks are actually somewhat unnecessary, so they add some additional restrictions and constraints. So this proposal actually removes some of those more unnecessary constraints and that way they can be moved into a separate portion of the code base and it'll just make it so transactions can have less constraints on them, but still be valid and actually packed into a block.
00:07:10.654 - 00:08:06.336, Speaker B: Yeah, and if you might be asking why, why relax these constraints? It's all for a future work of asynchronous execution. Um, so you can have basically multiple block executors, uh, or asynchronous program execution. There's a apex is what the SIMD is called. Uh, it's all for that much larger project, making sure we can do asynchronous execution and block producing. Uh, also this, this will can help out with some other work as well. Andrew, who wrote this SIMD, has full information written out on his blog of explaining the two. He actually made a couple SIMD's including this one of how these fit together overall and what to expect on, like, how they work together, how they actually allow asynchronous execution in the future and more.
00:08:06.336 - 00:08:15.384, Speaker B: So it's, it's not to lock Solana into moving towards asynchronous execution, but allowing it in the possibility of add some.
00:08:15.424 - 00:08:17.204, Speaker A: Extra optionality in the future.
00:08:18.344 - 00:08:55.051, Speaker B: Yeah, so it's a big deal. There's also just so separate from the SIMD, there's also a general PSA. There is a feature that is going to be activated in the near future. It's currently, I think it's like the fifth one or so on the feature gate list. This is to remove or deprecate, fully deprecate the depth. Currently deprecated request units compute budget instruction. So what does this mean? If you're using the really old compute budget instruction that's for request units, it literally says deprecated.
00:08:55.051 - 00:09:26.436, Speaker B: It will give you logs saying it's deprecated. Like, definitely check that out. There's 2% of y'all using it on mainnet today. Once it's gone, your transactions will fail. So upgrades the newest, you can find the information on how to use the newest or how to request units on the compute budget program on solanacookbook.com. You can also find it in the docs under the compute budget. All those different places will give you how to do the newest instruction and be able to process it correctly.
00:09:26.436 - 00:09:31.004, Speaker B: But I think that's it for today. Did you have anything else today, Nick?
00:09:31.124 - 00:09:35.900, Speaker A: Nope. That about wraps it up. Thanks for joining us this week on the changelog, and we'll see you all next week.
00:09:36.052 - 00:09:36.884, Speaker B: All right, thank you all.
