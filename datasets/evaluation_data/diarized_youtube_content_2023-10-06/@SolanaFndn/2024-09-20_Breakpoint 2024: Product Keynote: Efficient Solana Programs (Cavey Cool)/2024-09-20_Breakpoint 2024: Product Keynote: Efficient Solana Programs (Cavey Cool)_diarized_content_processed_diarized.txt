00:00:03.160 - 00:00:46.335, Speaker A: My name is Katie Cole, I work at Temporal, a new R and D firm and today I'm going to be talking to you about efficient sauna programs. Over the course of the last few years we've seen a shift in priority from adding new features to improving the performance and robustness of the network. And we've seen this with like, the development of new clients. But the agavia client itself has seen a lot of improvements. Right. In the packet ingestion layer we saw the migration from UDP to quic, we've seen optimizations in quic. And now Temporal is working with some of the core teams to research and develop a new networking protocol to accelerate packet ingestion.
00:00:46.335 - 00:01:13.025, Speaker A: Temporal is also working on QoS. Right. So we need a way to deal with this larger packet volume. And yesterday we demoed our V0 QoS working at 1.4 million TPS core. We've all seen Fire Dancer's ABX512 implementation of SigVerify. That hasn't made it yet into the agave client, but I hope that a second independent implementation will be made and brought into it.
00:01:13.025 - 00:01:54.915, Speaker A: Version 1.18 saw a new scheduler that was a massive step in the right direction. In the runtime, we've seen a lot of work done on direct account mapping. I still think we have a long way to go, but there's a lot of work being done. There's also new SIMD that's going to massively reduce the amount of data that's copied in and out of VM for any instruction that uses another program. And then we get to the point here where the VM invokes the entry point of a non chained program. And that is a very interesting transition in this critical path because it's the first time that code not written or selected by a core dev begins to execute.
00:01:54.915 - 00:03:02.121, Speaker A: And so you may be able to see where I'm going with this, which is the core devs can deliver what is the most optimized client by whatever metrics you wish to put forth. But if the on chain programs are inefficient, we will not realize the vision of Solana as blockchain for global scale. A lot of the programs on mainnet inherit inefficiencies from the current tooling, right? So the compiler, the core abstractions and so on program and the programming frameworks all each independently inject unnecessary or suboptimal code and build the executable. It's been a massive effort, very successful, to improve the developer experience on Solana, but It is now time to make performance a top priority. So I'm here to announce Peregrine, a framework for efficient Solana programs. So, this fixes a lot of the inefficiencies, and it has enough utilities that it stands alone as a framework. Any instruction or count data that it touches is all zero copy.
00:03:02.121 - 00:03:39.561, Speaker A: It has the same separation, validation, execution that developers have come to learn. And it's rust, it's not prog macros, it's not EBPF assembly. So you can just write performant, readable, maintainable, extensible code. And that's the goal. You may have heard of this token program that I wrote, nanotoken. This was sort of the first application of these principles. And with these techniques, we were able to reduce the size of the executable almost by a factor of three compared to spl, and almost by a factor four compared to a totally new blank anchor program.
00:03:39.561 - 00:04:20.735, Speaker A: It uses 100 times less block space per transfer, and even with all the overhead of the current agave VM, it still does 54,000 transfers per second on a single core. So this is totally parallelizable across distinct token account pairs. So add 8, 16 execution threads and I'll let you do the math. In addition to this, I'd like to announce the Solana program cave. So this is just a collection of very simple programs that just illustrate these techniques. You know, just some simple ones that you may have seen before. And there'll be a few primitives in there that have never been seen yet on Solana.
00:04:20.735 - 00:04:38.355, Speaker A: And so, yeah, this is the future that I want for Solana. And if we execute, this is a shared mission. If we execute in a few years, we can all sit back and bask in the glory and admire the beauty of the symphony of silicon that we call Solana.
