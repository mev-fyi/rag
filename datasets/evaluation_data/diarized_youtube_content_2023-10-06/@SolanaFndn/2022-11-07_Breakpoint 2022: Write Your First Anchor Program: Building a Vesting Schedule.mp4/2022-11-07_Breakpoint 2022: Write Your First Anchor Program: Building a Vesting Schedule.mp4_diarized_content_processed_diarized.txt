00:00:02.920 - 00:00:45.514, Speaker A: All right, thank you very much for coming and hope I don't interrupt your lunchtime break. All right, so this is going to be a presentation around building your first anchor program. We're going to take an example of building a vesting schedule. Just a little bit about myself. I'm a software engineer at Fantom. I've been there for close to a year and in my pastimes I love riding bikes in California, taking out my dog and writing anchor programs. And guess what we're going to talk about today? Riding anchor programs.
00:00:45.514 - 00:01:35.720, Speaker A: So I just want to set the stage like why I wanted to build this presentation. So many of you think this is a bear market. To me, this is the best builders market ever. Have you seen all the hacker houses out there? Have you looked around? How many people have been here in the last three days? It's been incredible to me. There's more and more people coming into the space and so my goal is to get them excited about building applications on the Solana blockchain, which has an insane amount of possibilities. People are coming in from other chains, like EVM chains, people coming in with no chain experience at all. And some people are not even developers and they actually want to build on top of the Solana chain.
00:01:35.720 - 00:02:08.690, Speaker A: So this is a presentation for them. On top of that, I want to give people some practical exposure to Solana programming. There's this word called rust that really intimidates people. And I would say that you don't really need to know that much of rust to actually program anchor. On top of that, working at Fantom, we really want to empower the entire ecosystem. So this is really to grow the pie of developers. Cool.
00:02:08.690 - 00:02:35.710, Speaker A: So who's ever heard of Anchor? Here, raise your hand. All right, who's ever developed on anchor? Awesome. Great. So this is taken from the website. Anchor is a framework for quickly building secure Solana programs. Anchor is a framework that increases an insane amount of productivity out of teams that use it. Anchor is safe by default.
00:02:35.710 - 00:03:15.298, Speaker A: It provides a lot of safety guarantees for you. It also allows you to extend those safety traits, the safety constraints through the code. Anchor is very opinionated. It's kind of similar to ruby on rails. This is my take, by the way, not the standard take, but it's similar to Ruby on rails in terms of with one command, it'll scaffold files for you and it'll create a consistent set of structure that you can use. So developers coming into projects don't need to second guess they can use the fold of the structure that is created for them. Finally, anchor is really fun.
00:03:15.298 - 00:03:53.250, Speaker A: So I would say it's incredible to see how much you can build with just a few lines of code. So let's go through a quick game plan. We're going to walk through what token vesting is, then we're going to take that concept, we're going to break it down into a few core ideas and then we're going to implement it. Sounds good. So one quick caveat is this tutorial is for people that have already have some experience on Solana. This is not an advanced tutorial by any means. This is going to be a simple tutorial for anchor.
00:03:53.250 - 00:04:19.154, Speaker A: However, because I don't have that much time, I will be able to only partially cover some of these topics here. Also, I am far from an anchor expert. If you want an anchor expert, just wait 25 minutes for the next speaker. For now, you're going to have to stick with me. And I love teaching, but I am not an anchor expert. So don't use my code in production. Ok? Let's go.
00:04:19.154 - 00:05:13.222, Speaker A: Ok, so what is vesting? So, in traditional finance as well as technology, employers like giving shares to employees as a form of compensation over a period of time. They use what is called a vesting schedule to provide this total amount of shares over some number of years. For example, here an employee is receiving 4000 shares over four years. If they quit after their second year, they get 2000 shares. If they quit before their first year, they get nothing. This is called a cliff and it's to incentivize employees to stay for at least a year. So let's take that and let's put our programmer hats on and let's think of what could be like a data model for this.
00:05:13.222 - 00:06:03.972, Speaker A: Right here is a standard data model. I've just kind of like coding in the parameters of what a vesting schedule looks like, right? So cliff duration, start date, the grant amount. So starting from this, let's start getting into some Solana anchor programming. And for the purpose of this demo, let's just assume that there can only be one grant between one employee and one employer. I'm going to start introducing this concept of a PDA program derived account. Essentially, it allows a Solana program to take as input a set of seeds and generate an account that it can operate on deterministically through hashing functions. These accounts generated from PDA's do not have a private key associated with them.
00:06:03.972 - 00:06:42.136, Speaker A: They can only be operated through the program that is using these PDA's. On top of that, they're really great to consistently compute various accounts. Our token vesting program has an escrow account. It's trustless. So our employer needs to transfer the full amount of grant into this escrow token account, which is also a PDA. And this system account here, this authority is the only one who can authorize transfers. So look at this.
00:06:42.136 - 00:07:31.644, Speaker A: With just two accounts here, we've generated, we've derived other free accounts. That's really special. So before we dive into some code, let's take a look at our free scenarios that we're going to implement today. The first one is when our employer, which is Alice, initializes the grant, creates the grant for Bob. Alice calls initialize instruction on our vesting program and passes in the state here, passes in these parameters, which are the grant constraints, transfers all the tokens to this escrow account. Two years later, Bob calls withdraw on his grant. Because he's been there for two years, he can withdraw half of his grant and it gets sent back to the employee.
00:07:31.644 - 00:08:06.604, Speaker A: Again, this is all trustless. So this escrow account can only be operated from within our program. Sadly, Bob quits and Alice calls the revoke function on the grant. Two transfers happen. The first one to bob where he can withdraw his vested tokens. The second one is to Alice, where she gets the remaining unvested tokens so she can use that for other grants. These are the free instructions that we're going to implement today.
00:08:06.604 - 00:08:57.214, Speaker A: A quick caveat is, because we don't have that much time, the math for vesting is not that complicated, and it's a distraction for our main goal, which is to do anchor stuff. So for now, I've abstracted this in my code. However, you can always use my repository to actually read the code for the vesting math. All right, so let's switch and let's take a look at some code. All right, awesome. So, quick show of hands, is the font good up or perfect? All right, let's go. So I created this anchor application using anchor init project name again.
00:08:57.214 - 00:09:34.964, Speaker A: It scaffolds all the files for me. Pretty special. I made two small changes to the anchor application that I recommend people to do. The first one is I enable the seeds equals true feature. We're going to take a look at how anchor is not just a framework to build your programs, it's also a set of conventions that other libraries or programs can use. And by using this, seeds equals true, we're going to see how our programs can actually be built much easier. The second thing I did, and this is because of breakpoint, I found out about this really cool linter.
00:09:34.964 - 00:10:04.504, Speaker A: So, yeah, everyone should use a linter, especially for Solana programs. So this is from trail of bits, I think. Please use a linter if you're going to build solana programs. And of course get an audit if things go to production. I won't be running these for the purpose of time, but you can find instructions on my repository on how to run it. Okay, cool. So let's start by looking at an entry point of our application here.
00:10:04.504 - 00:10:45.464, Speaker A: So this is where our token vesting program is defined. So this module here, you can see this program directive here. This is what allows us to understand that the program is actually our main set of instructions. There's free instructions here, initialize, revoke, and withdraw. Each instruction in Solana has two pieces of information. It has a set of accounts that are passed in, and it has a set of data parameters that can optionally be passed in. Data parameters are usually used to pass in numbers or strings or other type of variable data.
00:10:45.464 - 00:11:24.592, Speaker A: We can start by quickly taking a look at what that looks like here. As you can see, these input parameters here are the parameters of our grant, the one that we saw before in our previous slides. Look how anchor is very opinionated in how you should deserialize and serialize these objects. By using this derivative here, this directive, we're telling anchor to use something called borscht to serialize and deserialize our data. Ok, quick segue back here. Let's take a look at our free instructions. On top here, we also have error messages.
00:11:24.592 - 00:12:04.846, Speaker A: So again, anchor is opinionated on how we define error messages. You just have to define an enum and put in this error code directive on top to start creating human readable message ids and messages that you can, that libraries can use. This all comes out of the box, and I'll show you after, during some tests. Let's hop into our first instruction here, our initialized instruction. Okay. And to make things a little bit easier, my wife was really kind enough to generate these amazing designs. So let's take a look here.
00:12:04.846 - 00:12:51.134, Speaker A: Let's start with our accounts. There are four external accounts that are passed in these four here, these are external accounts and are mentioned here. Here you can start seeing some of anchor's power, right? So as you can see, Anchor allows you to extend the various security checks. The employer needs to be a signer, the employee needs to be different than the employer. The mint needs to be initialized, and the token account that we're passing in needs to be of the right mint and the right employer. Let's take a look at these pdas. So you can define PDA's by just using the seeds directive here.
00:12:51.134 - 00:13:44.846, Speaker A: So when you specify seeds, you're telling anchor two things. The first thing is you want to make sure that you're telling anchor that you want anchor to check that the account passed in at that slot is correct in terms of it's derived by the right seats to avoid other accounts coming into that. The second thing is you tell anchor how it should derive these accounts so that then if you're using a library that uses anchor idls, they can actually derive these accounts for you out of the box. And we're going to take a look at that after. The last thing I want to show you is this init statement that we have here on the grant and on the token account. These run even before our code runs at all. Right, so this is our code.
00:13:44.846 - 00:14:07.836, Speaker A: These runs even before. So this init statement is going to allocate space for our grant model, right. This is the model that we saw before. And on top of that it's also going to set it to the right program. And the same thing here, it's going to create a new token account. Let's take a look at our grant. What does that look like? Again? We define a model.
00:14:07.836 - 00:14:24.844, Speaker A: This is kind of like our model of MVC. This is our model here. We've defined it with a count, three pieces of information. The first one are the input parameters that we pass in. These will never change. The second one are the state parameters. These are going to change in the withdrawal and revoke instruction.
00:14:24.844 - 00:15:04.564, Speaker A: These public keys here we're going to store for safety checks after, and this is a really good best practice in anchor. I won't be covering bumps for the purpose of time. What you need to know is bumps make sure that our PDA's do not have a corresponding private key. So let's take a segue back and let's look at our initialized code here. All right, so three things happen here. So this instruction is called by our employer. And the goal of this instruction is first, we're going to check the input parameters coming from the data field.
00:15:04.564 - 00:15:28.748, Speaker A: We're going to make sure that there's no errors. If there are errors, we're going to exit out immediately. Second step is we're going to perform our first cross program invocation CPI. We're going to call into our token accounts to transfer the token. So we're going to call another program. Finally, we're going to store our grant information here. Let's take a look at how that works.
00:15:28.748 - 00:15:56.264, Speaker A: So here, this is the first part of our instruction. So again, this is step number one. If there's an error, we're going to exit. Notice how in our transfer here we're passing in the authority, right? So we're moving tokens from our employer account to our escrow account. And because of this, our employer is the signer here. So this is a little signer bit that I put. Because of that signer bit, the transfer can go through.
00:15:56.264 - 00:16:25.984, Speaker A: Finally, this is a really nice syntax that I learned on anchor to set the entire object. So here we're setting the entire grant model. And once we get to this line here in just 116 lines of code with tons of comments, look how much features we built. Look how much functionality we've built. And this is our initialize instruction. Let's quickly go over a test for that. So we want to make sure we have at least one test, if not more, for each instruction.
00:16:25.984 - 00:16:56.344, Speaker A: Anchor tests are written in typescript, and this is where you get the power of these idls. So these idls are kind of like an instruction book. They're a big JSON file and they're an instruction book for your anchor program. Basically, they tell libraries how they should interact with your anchor program. And because we're using typescript here, we get a lot of power. Look at this, you get autocomplete just by these libraries. And for example, if I forget to pass my initialize parameters, I'm going to get an error.
00:16:56.344 - 00:17:27.582, Speaker A: One thing I wanted to mention is notice how I only have four accounts specified here. I haven't put it past in these and I haven't passed in my system, my token program and my system program. This is because if we enable that, seeds equals true anchor can just derive these through these four accounts. So it does all of that work for you. It's pretty special. That means you don't have to do PDA derivation yourself. Let's look at our withdraw instructions.
00:17:27.582 - 00:17:57.878, Speaker A: So this is called by our employee when they want to withdraw. As you can see here, there's just free accounts. One thing to mention is now the constraints are changed because our grant account here is not initialized anymore. We're passing in the previous one. And so here we have more constraints. We want to make sure that the employee is the same one as our initialized instruction, and same thing our employer. We want to make sure that our employee account.
00:17:57.878 - 00:18:40.202, Speaker A: We want to make sure that all these constraints match and that our grant has not been revoked yet. This instructor is pretty much similar to the first one. I just want to show you one extra piece of info which I think is really, really important, which is here. All right, cool. So now we're transferring tokens from our escrow token account. We're transferring them to our employee account. But the only account that can actually sign and transfer tokens and authorize transfers from this escrow token account is our escrow authority, which is a PDA.
00:18:40.202 - 00:19:32.474, Speaker A: So there's no, there's, there's no signature because there's no private key. So this is where we have to tell Solana that our authority is in fact a PDA and we have to pass those signer seats. So when we invoke this transfer instruction, we're passing in the right seats and this allows the transfer to succeed. Finally, one small thing I just wanted to mention here is when you perform an addition, always try to make sure that you're using checked add or any kind of operation that allows you to avoid for overflows. This is just best practice when you're writing programs or smart contracts in general. And let's quickly go over the revoke instruction. So again, this is called when Bob quits.
00:19:32.474 - 00:19:59.404, Speaker A: Let's take a look at this one. So as you can see here, we have two token accounts, both the employer token account and the employee token account. Here they are. Of course, we're running all of the checks that we want to run. And here we have our same PDA's. We want to make sure that it's not revoked yet. Let's take a look at our revoke instruction.
00:19:59.404 - 00:20:40.878, Speaker A: This is pretty much the same as our withdraw instruction. A couple things to mention that I wanted to mention before, but I forgot. So how do we get the current timestamp here? So we use this clock, right? So you can use clock get and then you can use clock unit timestamp to actually get the timestamp from the program. This first part here of the program is exactly the same as our withdrawal instruction. So remember, we want to transfer, we want to transfer to the employee all the tokens that they vested. This is what is happening here. Then we want to reload their token account.
00:20:40.878 - 00:21:12.374, Speaker A: So this token account now has changed after the CPI. So it's really important for us to reload it. And this is how you do it. And then we perform another transfer for all the remaining tokens back to our employer. Finally, we mark this grant as revoked by marking it as revoked. What essentially happens is we prevent this instruction from being called again. So it cannot be called again here.
00:21:12.374 - 00:21:44.816, Speaker A: Why? Because it's revoked equals false. So this constraint has to be, has to be maintained. If not, the our program will not run. And same thing here. Okay, so let's look into two things that I really like about anchor. So as I mentioned, anchor is not just about writing safe programs, it's also about setting those conventions that other programs or libraries can use. We're going to look into two things.
00:21:44.816 - 00:22:19.086, Speaker A: The first one is going to be our testing our idls. We're going to do anchor build. What this is going to do is it's going to compile our program and it's going to generate this IDL. So I just want to show it to you real quick. This is what an IDL looks like. It's kind of like an instruction manual, right? So it basically tells all, it tells other programs or other libraries, not just typescript, also python libraries, how to interpret, how to interact with your program. Take a look how cool this is.
00:22:19.086 - 00:22:49.974, Speaker A: So I'm going to go and I'm going to create a new error. It's going to be called employer NGMI, and it happens if the employer puts a zero token grant. So if the employer puts a zero token grant, it's not going to make it. So we're going to build it. And take a look here. This code. Now this object has been generated, so we're able to map a Solana code to an error name and an error message.
00:22:49.974 - 00:23:46.012, Speaker A: Now if we modify our unit tests in our initialized code, I've shown you this test before, but what I'm going to do is I want to try and trigger this. So I'm going to update my grand token amount to zero. These are the parameters that are getting passed in, and the other thing that I want to do is I'm going to go to my initialize instruction and I'm going to uncomment these lines of code here. So we're going to say if the grant token amount is zero as a quick check, it's going to raise this error. All right, so let's try running a test. And just to make this a little bit easier, I'm going to use this distot only to make sure that it's going to run just this test here. And we've had quite a few live demos here.
00:23:46.012 - 00:24:28.874, Speaker A: This is less of a live demo because obviously it's running locally, but as you can see here. How did this happen? So our library is actually able to provide a human readable message, and the reason it's able to do this is because we're using these anchor idls. So these anchor idls are able to interpret how this works. Pretty cool. The last thing I wanted to mention is the testing framework, which I've kind of showed you, but I wanted to tell you a little bit more about it because it's pretty powerful. So as I mentioned before, testing anchor programs is not trivial. And you write anchor programs in rust, but then you test them using typescript.
00:24:28.874 - 00:25:06.912, Speaker A: When you run anchor tests, there's a lot of things that happen, actually. So let me just quickly show you that and uncomment this. All right, let's go. So what's happening here? So we're building the anchor program, we're generating those idls. Then anchor test is going to spin up a local node, it's going to deploy our program, it's going to run all of our typescript. Hopefully our tests are going to pass, and then the entire environment is torn down. This happens all for us just with one command anchor test.
00:25:06.912 - 00:25:41.304, Speaker A: So again, it really promotes that developer productivity, and it's really, really special to use it. It really makes it easier for newcomers. Okay, so that's it for code. Why don't we switch back to our slides? Okay, awesome. So hopefully you've enjoyed this anchor code. And I know there's a lot of anchor pros in this stage, but maybe people at home will enjoy this too. People that are looking at this presentation from anywhere in the world.
00:25:41.304 - 00:26:27.838, Speaker A: A quick thing about a program that I've started this year. It's called office hours, and it essentially allows anyone in the world to book some time with me to go over their anchor program or their solana program. And again, I am far from an anchor expert or Solana expert, but I just love teaching and I love to onboard new people into this community. So this is my way of giving back basically and personal shill. I've had some nice messages from people over this year that have enjoyed my office hours. So, yeah, I encourage anyone to write in in case you want to cover a particular subject together. Oh, I forgot, actually one slide.
00:26:27.838 - 00:27:17.754, Speaker A: Can you just quickly go back to my laptop? Yeah, I actually, I submitted these slides like a couple days ago, and I forgot the most important part of these slides, which are a lot of thank yous. So again, I just wanted to thank a couple people, my wife, for obviously, like, building these amazing drawings. Henry, which is also another, is the speaker after this, and he's actually been reviewing my code and he's really, really provided a lot of feedback. Armani is obviously the person who's created anchor, so we really have to appreciate all he's done for us. And then, of course, the phantom fam for being here and supporting me. So thank you so much. Quick, go back.
00:27:17.754 - 00:27:40.804, Speaker A: One more slide. One more slide. Can you quickly map back, please? Please? Sorry about that. Awesome. And then last but not least, this is my contact. We're hiring at Fantom. Of course, we're always hiring, so please reach out in case you're interested in roles.
00:27:40.804 - 00:27:46.564, Speaker A: I'd love to tell you more about what we do, and if I can help you in any way, just let me know. Thank you very much.
