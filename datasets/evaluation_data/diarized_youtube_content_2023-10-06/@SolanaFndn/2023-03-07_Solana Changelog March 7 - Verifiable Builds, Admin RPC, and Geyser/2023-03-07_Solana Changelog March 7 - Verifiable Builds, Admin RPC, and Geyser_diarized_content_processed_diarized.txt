00:00:00.320 - 00:00:44.470, Speaker A: Welcome to this week's Changelog, where we go through the changes on Solana Week by week. Today I'm joined by Nick, who is a new developer relations person on the Dev rail team for Solana foundation. So this previous week, what we had is we had an outage actually on Solana. There was basically the cluster was slowing down on doing slots and basically getting really slow on confirming slots. It took, I think at some point there was like nine slots in 30 minutes, and then it ended up being a restart in order to try to complete and get the cluster up and running again. It went from 1.131.14 and then back to 1.13.
00:00:44.470 - 00:01:20.862, Speaker A: In the future, there will be a decent amount of changes. Anatoly and the labs team put out some changes that they plan on doing. There's also other testing needs being done by other outside contributors, such as the fire dancer team for the labs team. Specifically, they plan on downgrading the Testnet to the current mainnet beta version and feature set versus whatever the Testnet version and feature set is. Upgrade from Testnet to whatever that release candidate is. For example, if it's going from one 3.16 to one 3.17,
00:01:20.862 - 00:01:52.508, Speaker A: they'll do that in Testnet, they'll kind of do a stress test while doing the upgrade, and then they'll repeat this process to see how well it goes and then eventually release. The full details are still being discovered and discussed on the labs and other outside contributor side, likely to be on some further discussion on a core community call in the future. All right, cool. And then what proposal did you see this week, Nick?
00:01:52.636 - 00:02:46.444, Speaker B: Yeah, I'm pretty partial to SIMD 16, the application fees specifically for write lock fees on applications. So during high periods of network congestion, if there's a popular program on the chain that a lot of applications and DApps are trying to use, like OpenBook or mango markets or anything, those applications all get write locked as all of the DApps try to interact with them and the wallets and users try to interact with them. What this proposal is offering is adding an additional fee that will be paid to the validators to actually hold an account as to actually hold an account write locked. So it's an additional so it's an additional fee that can potentially limit the amount of spam transactions and less good transactions that are just blocking up and causing additional network congestion.
00:02:47.304 - 00:03:06.982, Speaker A: Yeah, I remember reading about this and when it was discussed on the core community call, the last one, they were kind of thinking of a separate new program for this, and they're still figuring out the implementation details of whether or not uses a PDA for this and how an application can manage write fees.
00:03:07.158 - 00:03:41.810, Speaker B: Yeah, I think it'll be really cool from my understanding is it's going to be kind of a two fold aspect of there's the base chain handling, accepting and taking the fees during the transaction, and those fees can actually potentially get paid to the application itself. So if you take mango markets, for example, the validators will take the fee itself, pays it to mango markets, and then the mango application can actually repay those fees back to good users as sort of a rebate in a way. And that way it also helps to encourage good usage across the network. Like that.
00:03:41.922 - 00:04:44.142, Speaker A: Cool. And then moving on to the resource of the week. So the Ellipsis Labs team, they released a new Solana verifiable builds CLI tool. So what you can do with this, it's very similar to like anchor verify to where you can create a way for anybody to verify that what the code is equals to what you've deployed on chain. And then people can host this information, say it's ellipse labs or anybody else that can host this information so that anybody can check, does the code match what I believe is on chain? And then us as users can decide, okay, this, because of this is the code that matches what's on chain. Do I feel like it's good enough for me to use it? It doesn't use like some kind of admin rug function or there's not some kind of like security vulnerability. It allows us ourselves to verify the build and the code without having to like just trust it, which is really good for, for in any type of crypto ecosystem.
00:04:44.278 - 00:05:02.994, Speaker B: Yeah, I'm really excited about this. First of all, additional developer tooling and whatnot is always good for the ecosystem as a whole, but having an additional way as an external company, it helps diversify and decentralize all of the verification process that can happen with programs. So I think it's really cool.
00:05:03.494 - 00:05:07.230, Speaker A: Yeah, awesome. And then what kind of commits did you see this past weekend?
00:05:07.230 - 00:05:27.786, Speaker B: There's been some pretty good ones. My two favorites, I would probably say, are the Solana test validator got updated a little bit. So it uses upgradable programs by default. Anytime you initiate the test validator, it's going to automatically initiate with the upgradable program flag automatically.
00:05:27.970 - 00:05:42.746, Speaker A: Cool. Yeah, that would be very useful for those that are using the latest loader and they don't have to, especially on a test validator. They don't have to worry about accidentally creating mutable program, which makes less sense on a local development environment.
00:05:42.890 - 00:05:50.818, Speaker B: Yeah, especially since the immutable program is actually disabled by default, or it's also now set as no longer default.
00:05:50.906 - 00:06:34.846, Speaker A: Yeah, makes sense. There were some other commits that I saw. One of the ones was created by somebody that was actually at Mountain Dow where they updated the Geyser interface to not require write locks anymore. This is a change that will be done in a future version, but it's kind of a breaking change on geyser plugins. And what it does is it allows the geyser interface to be extremely fast or much faster than the current version because it's not requiring specific write locks anymore. That would slow down the nodes that are running your geyser plugin, so you can get faster updates to wherever you're storing your account data and be able to make sure that you have the latest state available from that geyser plugin.
00:06:34.950 - 00:06:52.046, Speaker B: Yeah, that one's a really good one. Like another boost to speed and performance, especially with Geyser, which is being used to, basically all the indexes are using it. So it's going to make all those easier and it's going to make all those faster and more efficient. So props to that.
00:06:52.230 - 00:07:22.768, Speaker A: Yeah, looking forward to seeing that out there. It will be a breaking change though. So make sure that you upgrade your plugin whenever you get there. It's not, it's in a future version. We will once again during the changelog, say like, hey, this is coming in this version, make sure you're aware of it. And here's the migration steps to upgrade. There were a few other commits that I saw is that like the account info is now being split apart into like two substructs or two structs in general, one that is persistent on the disk versus like the ram.
00:07:22.768 - 00:08:09.596, Speaker A: It kind of allows the validators to have less like large ram requirements, as well as be able to quicker get the, or quickly get the accounts that they need for executing things on the runtime or anything else that needs to be done on accounts. And then finally there was a thing with the admin RPC service. So there's a number of endpoints on the RPC service that are allowed for admin specific users on the RPC. These are things like set identity or validator identity. And what we found during the restart was that you actually can't access this until God has reached supermajority during a restart, which is kind of problematic.
00:08:09.660 - 00:08:10.772, Speaker B: Little problematic?
00:08:10.948 - 00:08:22.388, Speaker A: Yeah, a little bit. So what they've done is they've allowed it to where you can access it before the wait for super majority so that you can do some of the admin RPC functions on it.
00:08:22.476 - 00:08:55.034, Speaker B: Yeah, that'll be a good one. And I guess my last commit that I'll choose is the update for the prioritization fee. So there's a very minor commitment, relatively speaking like small amount of code change, but basically it makes it so for the prioritization fee cache that transactions that request zero compute units. So if you don't like set a prioritization fee it doesn't add that data into the cache. So it's going to make the caching process a little bit faster again for prioritization fees. So a little additional speed improvements all around today.
00:08:55.154 - 00:09:04.108, Speaker A: Cool. And because they're not add to the cache, they'll still be used whenever at the end of the prioritization. Right. It's because it'd be like just first come first serve.
00:09:04.276 - 00:09:05.828, Speaker B: Yeah, exactly, exactly.
00:09:05.956 - 00:09:07.132, Speaker A: Well that makes sense.
00:09:07.268 - 00:09:13.624, Speaker B: All right, well I guess that's it for the changelog for this week. Hope everyone enjoyed and we'll see you next week.
00:09:13.924 - 00:09:15.644, Speaker A: All right, adios. Bye.
