00:00:05.800 - 00:00:39.345, Speaker A: Hello everybody. Today we're going to talk about verified builds and especially how you can verify your own program. So what this actually means is that you can now make sure that an on chain program was actually built by the source code that the developers say it was built from. And if you verify your program, you will also get this nice little badge here. Program source verified in the Solana Explorer, in Solid Scan in Solana fm. And you can also now down here see the verify command that theoretically everyone can just run for themselves and you find out URL to the repository. So this is really cool for discoverability of your program as well.
00:00:39.345 - 00:01:12.483, Speaker A: And yeah, so now I'm going to show you how you can verify a program for yourself. For that I prepared this little program here. It's just a hello world and the Solana developers, it's called Verified Program root because it has the program in the root directory. There's also another one which shows you how you can do the same thing when your program is not in your root directory but in a subfolder. So let's follow the documentation here to go through this. So here's explained how it works. So basically you just build your program in a Docker container, which makes it a deterministic build.
00:01:12.483 - 00:01:49.985, Speaker A: Then you deploy this program and then you call Solana Verify Verify from repository, which clones the repository, builds it and compares it to the on chain hash of the deployed program. So that's actually all that is to it. And yeah, it makes programs not necessarily more secure. Of course, like a verified source code is not more secure than not verified source code. But at least everyone can now look at the source code and check it and make sure that it doesn't do anything it shouldn't do. And it also helps with discoverability. So people can now find your SDK for example, and they can maybe contact you via GitHub.
00:01:49.985 - 00:02:19.465, Speaker A: But now let's get to it. Let's finally verify a program. So first of all you need to of course deploy your program to a public deploy your source code to a public repository because it needs to be open source so that other people can verify it. Then you need to build it in a Docker container, then we need to deploy it and then we need to verify it. So now let's go to first to the second step, building the program. For that we have some pre requirements. We need to have Docker installed and Cargo.
00:02:19.465 - 00:02:59.005, Speaker A: If you're a Solana developer, you probably have Cargo already installed, but you also need Docker. And then we need to install the Solana Verify CLI so that you just do by cargo install Solana Verify. And then you need to prepare your program so you actually need like a cargo log file in your root directory. And then we can just call Solana Verify build and I will show you how this looks like. So here we are calling Solana Verify build. Here you can see what it does. It starts a docker container where it picks the Solana version from our cargo toml so version 2.1
00:02:59.005 - 00:03:46.131, Speaker A: in this case, then it builds the program in that container and then we just get a normal SO file that we can deploy. So for example, with Solana program deploy, the recommended way of deploying a program is like better using a multisig and squats v3 for example. But in our example case we're just going to do this here and then we have our program deployed and then we can already call verify on this program. So now we're going to say Solana Verify verify from repository. Then we need to put our program ID and the path to the repository. So I just ran this here like a second ago. So you can see here I'm calling Solana Verify verify from repository.
00:03:46.131 - 00:04:36.511, Speaker A: Then we have our Solana developers slash verified program path and then we put the program ID and then this run through here. So it clones the repository, it starts the docker container, it builds the whole thing, and then here it compares the hashes and they are both correct. So now we are already sure that our on chain program is the same as the one built from the source code. And now it also asks us here if we want to put our build information on chain. So if you click yes here, this will actually create a PDA and write all our information about the build on the blockchain. So from now on everyone can verify for themselves. And the last thing we now want to do is we want to verify our repository against the public API because at some point you need a trusted third party because someone needs to verify that your program was actually built like that.
00:04:36.511 - 00:05:13.469, Speaker A: So now we can just call the same command with remote. This means it will now send our build Command to the OtterSec API and they will build the program and compare the hashes. And if this is successful, then we will actually get the verified batch on the Solana explorer. So here we can see both of these hashes were correct, were exactly the same. And now we can also click on this link here and we can see that the auto SEQ API now returns is program verified true. And now we can see here in our explorer we can also see that it's true. So I would say try it out yourself.
00:05:13.469 - 00:05:55.291, Speaker A: Verify your programs. It has lots of lots of advantages. And yeah, little conclusion here is make sure that you deploy your programs in a safe way, like using Multisig and Squads v3. And yeah, verify them against the Autaseq API so that everyone can see it and then people will be able to find your source code and maybe your SDKs. Maybe you can also put a link to your front end in there so if someone finds a very cool transaction on chain, they can maybe directly find your program as well and your front end for it. And yeah, I would say verify your programs for yourself. There's lots of examples here in the documentation.
00:05:55.291 - 00:05:57.411, Speaker A: And see you guys next time. Bye.
