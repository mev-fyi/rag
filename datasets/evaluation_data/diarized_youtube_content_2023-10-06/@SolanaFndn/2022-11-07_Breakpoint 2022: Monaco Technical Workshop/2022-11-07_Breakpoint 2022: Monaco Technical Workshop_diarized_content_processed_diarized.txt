00:00:04.720 - 00:00:20.494, Speaker A: So. Oh, hello. Hi everyone. My name is Stuart Toner. I have quite a heavy scottish accent, so I'll apologize before I asked them to subtitle it, but they didn't allow me to do it. So I'm here to speak about the Monaco protocol. I'm Stuart.
00:00:20.494 - 00:00:58.554, Speaker A: I'm from a company called BetDex Labs. We are a core contributor to the Monaco protocol. We do sports betting and the Monaco protocol is designed to be the open source infrastructure. Runs on a blockchain, open source infrastructure for prediction markets, which is exactly what the tagline says right there. So in this technical workshop, I'm going to walk you through some of the SDK, some of the different things that we've got and what exactly that means and what we can do and what you can build with it. So what I'll do is I'll just move on. There's a little bit of an introduction.
00:00:58.554 - 00:01:41.836, Speaker A: What the Monocle protocol is, is decentralized liquidity network that allows people to build exchanges on Solana, we provide the infrastructure. We've got deploy programs that allow third party applications to build prediction markets and access shared liquidity pool. A shared liquidity pool is spread across the entire. Anyone who uses the Monaco protocol has access to this liquidity pool. And this is one of the powerful things of the Monaco protocol. We have an on chain matching algorithm, an order book that allows users to express an opinion. An opinion is something that they believe will happen.
00:01:41.836 - 00:02:34.464, Speaker A: Will the price of Sol be above $40 by the end of breakpoint? Maybe a bit contentious at the moment, but we can set these markets up and have an outcome like that that people can put their money into and bet against. That users submit an order to have it matched against the best possible price available in the market. And that's one of these things that is understated and that if there is a more optimum way for a trade to get fulfilled, the system will automatically take that in order to make sure the user is getting the, the most value for their inputted trades. We have orders that are matched as part of this. We match against the opposite side of the trades. We build this liquidity pool based on price and we match against the liquidity that's on that available market. The protocol manages order matching, user market position.
00:02:34.464 - 00:03:21.594, Speaker A: Market liquidity pools is all handled within the protocol. So as a developer, as an engineer, as someone who's building on this, all you really have to do is work at the prices, submit your order, everything else is handled, and you're submitting into a system that has the global liquidity pool. So that's an introduction. That's what the Monaco protocol is. What I'd like to do is a couple aims is that we have contributed so much, we have a lot in the SDK would be too much to deliver today. So the SDK has broken down into two key areas. One is a user SDK, which allows people to add, remove, cancel, their own user trades into the system.
00:03:21.594 - 00:04:01.084, Speaker A: And the other is the admin SDK, which if you are wanting to build a platform, a site, anything like that, you would use the admin SDK to build markets. Set this up, set your outcomes, whatever you want to do. But that's more on the admin side. The aim of this workshop, we're going to focus more on the user SDK side. I will come back to the admin SDK in a couple moments. We're going to focus on the user SDK and run through some of the things that we do there and some of the tools that we've got moving along. If you want to follow along, this is not going to be get the laptop out technical, you know, it's not going to be as in depth as that because it's, you know, we've got a lot to cover.
00:04:01.084 - 00:04:27.576, Speaker A: All the resources are here. We've packaged the client up into the NPM package, which you can get just by running the standard NPM commands to install a package. The references down at the bottom we have both the Monaco SDK and the Monoco client are available. Go and have a look at them. They're on the Monoco protocol GitHub. Lots of examples, information walkthroughs. Everything is in there.
00:04:27.576 - 00:05:04.646, Speaker A: So I would encourage everyone to have a look at that. So, yeah, so if we're at the point we've got this installed, which I'm gonna guess not many people are gonna do just for the time. We'll move on and we'll do some actions on the chain and see what we've got. So first thing is first, before we place any order in trades, what we have to just find the market. We have to find where it's gonna go, what we're going to do this function here. And you'll see throughout this presentation the mono protocol. We've tried not to be too imaginative with our names, function names.
00:05:04.646 - 00:05:39.162, Speaker A: So getmarket accounts by status. Probably everyone in this room could guess what that did. So by passing in the getmarketcounts with status and passing in a parameter of open for the status, you'll get a list of all the open markets. And that's the open markets that are available on the protocol. It doesn't necessarily matter whether you've created them, someone else created them, doesn't matter. The idea being that you would be able to see a market for a football game, even though you've not created and still add liquidity onto that. This button here, I think, down here.
00:05:39.162 - 00:06:02.674, Speaker A: Oh, yeah. So here's the public keys that get returned. We've got everything wrapped, which hopefully says true up there. If there are any errors or anything, we have some error handling that comes back that allows you to know what's happened and different things like that. This is actually a very benign call. This is quite an easy one because it just returns, read only data. But later, as we move through the couple calls that wouldn't do that.
00:06:02.674 - 00:06:39.254, Speaker A: So what do we have here? So we've got the markets and we've got the public key for each one of the markets. So any one of these up here, what we'll do is we'll now have a look at those markets and see what the state of those markets would be. What's very interesting for anyone that's wanting to place a trade on a market is that we can do the prices super important, but because you've got the wrong price, you've not got matched correctly. And it's all for someone that's wanting to put an order on. They have to know the correct prices. Again, this is where the lack of imagination and function naming comes in. We've got the handy dandy, get market prices function.
00:06:39.254 - 00:07:12.274, Speaker A: Really, again, it does what it says exactly. You pass in the program market premier key and you fetch all the market prices. So this here is the call and this is the response. So the response on the left up here is truncated. So I've taken some of it out, but this will give you information about the amount of liquidity that's available, the different price points, like how many orders are in the queue. It gives you a load of stuff. I've had to cut it just to fit it on the slide.
00:07:12.274 - 00:07:44.780, Speaker A: Each response, each element in that market, prices, is a price point. And you can see here, if I'll go up this one up here. So you can see here this price point up here you have a price point, which to the odds for the pool, you have a four outcome flag. The four outcome is whether you believe that this outcome will happen or not. So you've backed this outcome. In this particular case, we have not backed it. And the matching pool has a list of items and their addresses.
00:07:44.780 - 00:08:34.518, Speaker A: There. Each individual price pool has its own list of unmatched orders. You can see here, you see here, you can see here these orders set and wait to be matched as part of a matching algorithm that we will speak about in just a few moments once an order has been fully matched. And a fully matched order would be if someone put in $10, let's say dollar ten puts in $10 and it gets matched for dollar ten with basically enough liquidity on both sides to match on a partially matched order would be one where there's $10, but there's only been five matched against it. So that can happen. And the reason that happens is for flexibility. A bit later on we'll explain that, but partially matched orders remain in the queue to be picked up and attempted to be matched again.
00:08:34.518 - 00:09:09.154, Speaker A: So we've got this continual system of pulling things, trying to match them. But for us doing the technical workshop, the important thing is that we have now got the state of the market. We know the liquidity amounts, we know the activity in the market. We know basically where the money is and what we'd like to do. And the money on this response and the orders on this response usually is a good indication of what the market is like. So you can sort of rate these and work out how likely things are to happen. So we've got this, so we've got our market, we've got a response, we've got our prices.
00:09:09.154 - 00:09:37.354, Speaker A: I've got a very, very quick if anyone wants to try this out again, pretty sure it's not going to happen. But we have an example code on the GitHub for get market prices. When we've built the SDK, we've built this out. So there's lots and lots of examples for this. For every function has an example, every function has something you can do. This is a snippet of the code that was actually there that I've just copied and pasted in. Just to give you an indication of how we've built it.
00:09:37.354 - 00:10:03.796, Speaker A: If you follow the instructions, set the SDK up. It really is just as simple as NPM run. Get markets on your command line and pass in the market id which your market public key and youll see the prices. See this response back here on the command line. So just an example. All of the functions that we have have these examples. So if you want to build something, go and look at examples, plagiarize it as much as you like.
00:10:03.796 - 00:10:35.070, Speaker A: Its all open source and thats what we got. So now we have our markets, we have the market matching pools. We know exactly what we're doing. What we want to do is we want to create an order on the market. So we want the user to come around and say, and in this particular case, we know the state. And this particular order here that I've set up is, I don't know if there's any fans of this football team, but I'm going to butcher the name Bear Leviskin. No, I notice that's not how you pronounce it at all.
00:10:35.070 - 00:11:13.134, Speaker A: So, apologies, it's my, again, scottish accent. This is a little snippet of code that allows the user, or the person running the code to create an order on market outcome index zero, which is here, which is the outcome that we want to support. It's a four outcome, which means that we believe this outcome will happen. So I'm backing this team to win with a price of two and a stake of one. So price being the odds and a stake being the amount of money we're going to put on the line. Simple as just calling it. And this is the response back.
00:11:13.134 - 00:12:11.364, Speaker A: You can see this response system here that shows you errors and successful things. This is a bit less benign, this function, in that you will get errors back according to the state of the system. So the system itself will enforce that. If the market is locked or the event started or suspended, or for example, it rains and we suspend the market, your market gets suspended because everyone's gone home and the market's suspended, then you wouldn't be able to place an order on a market that's no longer available. Again, same kind of idea with the order key coming back and transaction id, all of which can be looked at and verified through explorers. And you can also see how matched the order is, your partial match and all that from that very, very quick note on outcome indexes, which for those that don't work with this code is probably not would make. Outcome index isn't really a thing that I've seen many people use, or it's not a term.
00:12:11.364 - 00:12:36.828, Speaker A: Every market has their own outcome index, the outcome index being the. The index of the outcome. So in this particular case, you've got three teams. I won't try and pronounce them again. Something I draw in Club rouge, and each of them has an index. There's two helper functions, and what we're trying to do with the SDK every time you commit something is build out these helper functions. So you've got.
00:12:36.828 - 00:13:04.290, Speaker A: You'll get market outcomes by market, which gets you the outcomes. But we've also got things like get market outcomes titles by market as a convenience, as a convenience to pull this out. So this idea, so you can pull the titles out if you want to put it on your UI. You can get the outcome indexes if you want to build it into a system. So that's just a little note on that. So every outcome has an outcome index. So this is the heaviest slide I've got.
00:13:04.290 - 00:13:30.624, Speaker A: So I'm going to apologize for, there's no pitch on this. So what we've got here is just, just a little context around the trade matching. So once you create a trade, it goes into the system. We saw the bit queue, we saw how it sits. And once a trade is placed by the user, the protocol will attempt to match it against the available liquidity on the opposite side. Example here is, if I back outcome a, I believe outcome a will occur. Whatever local team is hopefully going to win.
00:13:30.624 - 00:14:00.424, Speaker A: For a given stake in price, there must be enough liquidity on the lay side. And the lay being that the person believes that that outcome will not occur to ensure that no matter the winning outcome, there's enough funds to pay the winners. So whatever money I put forward, someone else has to put the other side, get matched together. System ends up at zero at the end. That's the idea. And I mentioned this a little earlier as well, about bets being partially matched. So I've used the word bet.
00:14:00.424 - 00:14:38.130, Speaker A: We use betting trades, sort of, so a bet can get also get partially matched if there is only some liquidity available in the pool. So again, example, you put, you pay in ten, someone creates a bet for five or trade for five, that five will get matched and the system will get, will use up that liquidity share pool of liquidity. So that allows the flexibility. So it's not a must match with b sort of principle. So quick recap. Got a market, we've got outcomes. We know what we're doing, we know our price, we're dead on to win.
00:14:38.130 - 00:15:25.868, Speaker A: But it turns out that the outcome, they've knocked three goals in and, you know, all of a sudden I need to cancel my order. We have a very unimaginatively titled method called cancel order, where you pass in the order public key and it will cancel the order. It will take that money off the market. There are a few little notes with this, and if you are partially matched, if you are partially matched, you have ten in five has been matched, you can only cancel off the unmatched portion of this. So the reason being is obviously the five that has been put into the liquidity pool is now part of the match for everybody else. We can't undo that. So that's if you want to take off.
00:15:25.868 - 00:16:27.634, Speaker A: All this is very useful if you're maybe trying to build either the front end or also build up a sort of automatic system that does these things behind the scenes. So let me just move on to at this point, we've got the flow, we've got fine markets, created bets, we've done all the things we need to do. From a user point of view, the user admin is far more featured than what I'm demonstrating here, so I encourage everyone to go and have a look. What I wanted to touch on was just slightly the admin SDK and the admin SDK is where a lot of the power will be for builders. And the admin SDK allows you and anyone building to create markets, build sites, manage markets, change admin permissions, set your odds, set outcomes, different permissions. Basically anything you want to do to set up your, your site and what you want to do. So if you wanted to run a site that deals with the local darts tournament, if you want to run a site that donkey racing, whatever you want to do, you set it up and you can do that.
00:16:27.634 - 00:17:02.774, Speaker A: Bet Dex is a company, I'll show you in a minute. It's focused on sports betting, but, you know, go off and build whatever you like for anything. One interesting point on this, which should have made it into slides, but actually I forgot to put up, is every created market doesn't use a set token. You set the token at the start, so you decide what token the market is going to run in. And that governs what someone pays in whatever token it would be, and it governs what they're paid out. So there's no conversion on the protocol at this point. The reason being it makes it a lot simpler.
00:17:02.774 - 00:17:53.030, Speaker A: So if you've got community that wants to create something, you can use your own token for that and build value in that. Some of the examples are like, if you maybe get twitch tokens, if you get something else, use those tokens, mint a token, just use it. There's a couple, couple tools I was going to run through as well. Where we've got the monochrome SDK, we've got calls covered, get market by status, event wage and tokens, place orders, cancel orders, get market positions. The market positions for a wallet is very interesting because the protocol handles exposure and the user's market position to ensure that they are not overpaying, that they're not committing. The classic example is if you back a team to win and you also lay them to win. Then the other winner, they don't win.
00:17:53.030 - 00:18:13.830, Speaker A: One outcome is going to get paid out. You don't have to pay in twice, you only have to put your stake in once. And that covers that. As a very simplistic example. But the market, the protocol will handle all this and hold that data and this is what this fetches. Get all trades for orders, get wallet token balances. So, yeah, so that's a monocle protocol.
00:18:13.830 - 00:18:48.888, Speaker A: Seks sure, if anyone's getting questions can ask me, but what I was wanting to do is to show you a couple examples. Very proud of this one. This is the BeTx beta site, which soon to be live site. My co founders Varun and Nigel did a great talk yesterday, all about sports betting and how BetDex has announced our launch. So very, very exciting. So you can see here, this is what you can build. BeTX uses the SDK and you can kind of see what you can do with it, the power of it.
00:18:48.888 - 00:19:36.738, Speaker A: Browse available markets, you can see the prices, you can place bets, you get trades, you can order, book different outcomes. Everything is up there. So we're hoping it's going to be a shining example of what you could do with the Monaco protocol. So yeah, I encourage everyone to go and have a look, play around with it and have a look. It's absolutely fantastic. The visualizations is an interesting part in that we pull the data from the Monaco project protocol to give us these visualizations up here that allows to draw graphs and allow us to do different things which everything contributes to informing the user and allowing them to make sensible decisions and where they want to place their funds. Another one, we've very kindly got permission from the SAML community.
00:19:36.738 - 00:20:34.964, Speaker A: They've been having a look at the SDK and they are building out their own version of a site. They've got an on chain SAML prediction market on the Monaco protocol, which is looking really cool. They're using SAML behind the scenes, obviously it's their community and they're using the Monocoque SDK to create markets they're building. They've got UI there, create bets, do everything that they need to do and they're building that out just for their community, obviously for using. So yeah, and like it says at the bottom, and you can make your predictions with SAML, so very cool there. But one final example for everyone which steps away from the UI side of things and sort of gives you hopefully a bit of an idea as to how powerful things could be behind the scenes. And this is an example of a market seeder that we've made, which again is in the SDK, the Monaco protocol.
00:20:34.964 - 00:21:33.674, Speaker A: We use the SDK and use it very quickly to do the create bets, to create liquidity onto a market. The reason why this might be very, very useful is if you've may got institutional folks that are wanting to put liquidity on very quickly. If you've got people that want to move their price points, watch the total amount of money they've got committed and move what they're doing, these tools. So this particular tool will see the market, will be able to put a lot of money onto market, set the correct price points and make it so that a user can come and use it and they can bet against different markets. If you know someone who wants to build something that is more a backend tool, this is the kind of thing that you would want to be doing. You'll inspect the market, see where the gaps are, see where the edge is, create bets, cancel bets, move the money about as you're wanting to do. So it's very cool, very fast, and again, it's another thing that I'm very proud of.
00:21:33.674 - 00:21:59.704, Speaker A: So just going to move on. I've got one more slide and it's the obligatory thank you so much. So, yes, thank you for your time. If anyone's got any questions, I will talk at length about this. We've got the website for the moniker protocol up there, an email up there as well. And this is my telegram here as well. So if anyone wants to get in contact, everyone wants to talk about it.
00:21:59.704 - 00:22:24.204, Speaker A: I promise you, I could talk about this all day. It's been a lot of work to get to this point, but yeah, so if anyone wants to talk to me about this, talk about liquidity pills, just give me a shout. But I think that's the end of my slides. So I'll be milling around. Anyone's got any thoughts, any comments, any questions? But other than that, I just got to say thank you very much for having me and enjoy the rest of the conference. Thank you so much.
