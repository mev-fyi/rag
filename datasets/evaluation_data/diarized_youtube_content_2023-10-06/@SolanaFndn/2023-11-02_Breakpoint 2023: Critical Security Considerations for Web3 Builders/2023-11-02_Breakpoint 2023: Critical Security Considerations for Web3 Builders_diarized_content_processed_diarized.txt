00:00:03.920 - 00:01:01.472, Speaker A: All right, thanks, everybody, for showing up early in the morning here. We're going to be covering critical security considerations for web3 builders. All right, so we're going to take a look at fire blocks, the technology that we're built on. We'll take a look at the basics of private key security, how that applies to smart contract management for developers and more builder centric people, and then how you can extend that out to users using non custodial wallets. All right, so a little bit about fireblocks and where we sit in the ecosystem. So we've got a whole bunch of institutional partners and enterprises that we onboard. So we serve as the technology provider for a lot of these larger companies.
00:01:01.472 - 00:02:07.644, Speaker A: So we have partnerships with Solana Foundation, Magic Eden, and we're built on BNY Mellon is built on us, AnZ bank, the israeli stock Exchange. So a whole lot of larger people use us to custody their own assets. All right, so the pillars of private key security. So everybody's familiar with your phantoms, your metamasks, really pretty straightforward products, but there's tons of security problems with them. And what we're built on is what's called MPC technology, multi party computation. And the way that works is instead of having a single private key sitting somewhere, you've got it split into multiple key shards. So with Fireblocks implementation, we split it into three separate key shards, and there's never at any point a fully formed private key that can be extracted.
00:02:07.644 - 00:03:05.840, Speaker A: So two of those private key shares are hosted by fireblocks and stored in Intel SGX enclaves. And those are secure chips on a server. And the point of that is that someone who has access to the physical server can't necessarily get access into that secure enclave. There's some lab type stuff you can do with drills and lasers, but outside of that, they're very secure chips. And then the third layer that comes into play is the transaction authorization policy, and that essentially allows you to control who can send how much of what assets where. So if you combine all these three things together, you've got separate, geographically located key shares. You've got them secured in those enclaves, and then you have a set of access controls.
00:03:05.840 - 00:04:16.508, Speaker A: So if you think about these access controls, say you've got, like, a top level wallet that acts as your cold storage, where only the CEO has the approval to move things out of that. Then you can have a second wallet where maybe it's like a two of three, and that's for your payroll team. And they can pay out people in USDC then you can put in other sorts of rules limiting what smart contracts can be interacted with, how much dollar value can be moved out of an account, in a transaction or in a day. So, say you could put a $10,000 limit, can't move more than that in a day out of a certain account. So you can see how you combine all these three layers together, and you get a very systemic approach to security. All right, so your private key, you've got a metamask or phantom, and you have to store a passphrase somewhere. If you write it down, obviously, all kinds of security implications for that.
00:04:16.508 - 00:05:29.254, Speaker A: If you get phished, if there's a problem with the browser or the extension, there's just all kinds of ways that can be compromised. So the evolution of that has been like the multisig, where let's say you've got a five person organization, and you need three out of five to sign off. So one of the problems, I mean, it's fast, it's cheap, it's good to get up quick and easy, but let's say you're very successful, which I hope everybody aims to be, and you get a ton of volume locked into some kind of protocol that you've built. And essentially, that's all behind a multisig. So if you've got five people, there's five private keys. Underneath of that, somebody malicious, all they have to do is figure out who are those five people, and then slowly work their way through them, because they have an unlimited amount of time to compromise three of them, and then they've compromised the protocol. So, with MPC, we see that as sort of the evolution of the multisig, where you get a tremendous amount more security and flexibility around how you implement and control access to your assets and private keys.
00:05:29.254 - 00:06:24.450, Speaker A: And then if you want to get really gigabrained with it, if you think about it, underneath the Multisig, it's just a bunch of private keys, and you can break all of those up using MPC technology and really compound your security. So it gets a little bit redundant. But depending on how much, how many assets or what the value is of the assets you're trying to secure, it could very well be worth it. All right, so in terms of smart contracts. So one of the things I really like about the Solana ecosystem is that it was really designed with upgradability in mind. You've got a lot of people who are very user centric, very product centric, and they want to introduce new features. They want to just improve their products over time.
00:06:24.450 - 00:07:39.944, Speaker A: And really drive adoption through improving things. And with that, you have that upgradable program built into how Solana works and part of that core ethos, whereas over on ETH, it's much more immutable and things stay the same. They have upgradeability over there, but not as built into it as it is in Solana. And ultimately, you have some authority that sits underneath of that smart contract that has the ability to upgrade it when you need to secure those private keys, and you've got that stack rank of different options. MPC is an excellent solution that you can use to secure the private keys that have the upgradeability permissions to your smart contracts. So if we look at kind of the future and where we see things growing, and some of the conversations that at least I've been having with fireblocks customers is a lot of people are excited about smart contract wallets. And so if we combine a couple of these ideas together that you see in the Solana ecosystem, you can see how you're going to develop a large amount of smart contracts being developed in the near future.
00:07:39.944 - 00:08:33.104, Speaker A: So if you look at the marinade and their native staking, there is a way to stake your assets with marinade. And then there's two separate authorities where you have a stake authority and a withdrawal authority. And so the stake authority has the ability to move around and delegate the soul to different validators and has a certain set of permissions over those assets. And then the withdrawal authority has the ability to withdraw this all out if it's not delegated to any of the validators. And this is just like an example of a single set of assets that has two different permissions from two different authorities. So that's one basic idea. And then you look at something like an orca, where you can do concentrated liquidity, providing, earn some yield.
00:08:33.104 - 00:09:57.056, Speaker A: And you combine that with Kamino, who will automate the allocation of your liquidity on orca and manage that for you. So if you start to put these ideas together in the context of smart contract wallets, you can see that you could have a product sort of like a modern day 401K, where you deposit your money into a smart contract, and then you say, oh, you know, I want maybe a low risk yield or medium or high risk yield, where that traditionally would have been done with, like, a stocks to bond balancing ratio. You could have a smart contract automatically say, okay, if somebody only wants six 7% yield, they go over to staking. If they want, you know, 40% yield, we push them into some sort of lending, borrowing some kind of more advanced vault, like a whole suite of fees, features. But an end user would only need to deposit into a smart contract. And the way that would work is you would develop this huge web of smart contracts that would manage the allocation of the assets. And so if we bring this kind of back to the private key security and the sort of operational efficiency of using MPC, you could do that with a single fireblocks implementation where you have all these different smart contracts and you've got the various teams maybe probably within one.
00:09:57.056 - 00:11:26.624, Speaker A: So 1020 developers that are allocated to different smart contracts that they work on, that they maintain, but using fireblocks, you can manage that all within one location. You can separate out who has permissions to upgrade which smart contracts, as opposed to a multisig solution where you maybe have this huge monolithic multisig with everybody on it, which is less secure, or you'd have a whole bunch of smaller multisigs, which is like a nightmare operationally to maintain. So if we extend. So that's from a more developer centric perspective on how you can maintain private key security for all your smart contracts. If we think about how users actually want to hold and deploy assets, they don't necessarily want to store them in smart contracts because there's an inherent amount of risk to just leaving assets sitting in a smart contract. So what you can do with that is you can combine it with a non custodial wallet approach, where you have the user holding their own assets in something non custodial, and then they use that to deploy into smart contract wallets that have the advanced features, features and functions that make their lives much easier. All right, so the fireblocks noncustodial wallet, just to clarify, everything fireblocks does is non custodial.
00:11:26.624 - 00:12:29.690, Speaker A: But this is kind of the industry term that's popped up for it is non custodial wallets. And this is where the end user actually holds the private key. So what it is fundamentally is it's an SDK that developers can plug into to manage private keys for end users. So if you think of the typical flow of sort of like a web two application where a user comes in, they sign up for an account with an email address or a username or maybe some kind of social sign in, then where Firebox would plug in is you have an SDK and the developer would call the SDK and generate two key shares in this instance. So in the sort of traditional fireblocks product, we operate with three key shares. We've chosen two for the non custodial wallet implementation for speed. So if you get up to millions of users, speed becomes a concern.
00:12:29.690 - 00:13:32.334, Speaker A: And with two key shares, you still never have a fully formed private key anywhere, which you don't want end users holding these things because there's a ton of friction in onboarding them and it's just unsafe a lot of the time. So you reach out to fireblocks, you generate two key shares, one of which is on the Fireblock side, one is on the end user device. And the way it works is the developer sits in the middle and facilitates the communication between the key shares to sign transactions. But obviously, they're never in a position where they hold any assets. So now that the user has come in, they've generated this wallet that's in these key shares. They are within the developer's application that they've built. And you can create a totally customized walled garden experience where you have all the power of the a web3 back end and ability to maneuver around the chain.
00:13:32.334 - 00:14:42.790, Speaker A: But that's done through this lens of this app where you can say what smart contracts they can interact with. You can include those tap policies that say, oh, you know, they can't move more than $500 at a time. But basically it's used to address all of the sort of negative experiences that a lot of like crypto native users have had and things that we know we all need to solve to onboard a lot of people. So there's a bunch of different backup and recovery conditions that you can use to ensure that everybody has their keys if they need them. So when the user gets onboarded, they back up their key share. They typically do it to fireblocks right now, but the developer could choose somewhere else for them to back it up. And if they lose their phone or need to log in from a new device, they can log in with a social account and redownload that key share and move around pretty seamlessly.
00:14:42.790 - 00:15:40.618, Speaker A: So there's no passkey or passphrase they need to remember and manage. If fireblocks disappears, the developer or our customer can hold our keyshia that we typically hold. So there's a backup condition there. And then obviously if the developer disappears for some reason, Fireblocks has a key share and the end user has a key share, and there's an eject process to allow the end user to take full custody and leave from that sort of walled garden experience. But, yeah, so we covered a lot of ground. So you can use fire blocks to improve your sort of treasure use case and basic operational thing like operational stance, like a lot of our traditional customers do. And then moving into, like, a more web3 perspective, you're able to secure lots of smart contracts and.
00:15:40.618 - 00:16:23.650, Speaker A: And really scale that process with the growth of development teams. And then you can extend that security all the way down to the end user and be able to ensure that those users have a very secure and friendly introduction to the web3 space while at the same time not holding any of their assets and allowing them to leave at any time. So I've got my x up there. It's prezel. I've got the Solana monkey business, and then I have my doodle on some of my other profiles. I've got to farm the bananas with the monkey. And then we've got our developer docs if you guys want to take a look.
00:16:23.650 - 00:16:56.494, Speaker A: So one thing to note is that the non custodial wallet support is not out for Solana quite yet. We're supposed to have it this month, but a couple challenges with our engineering team, so that's coming out in Q one, and I look forward to talking to you all. So I'll be around if anyone wants to chat, fireblocks or any crypto stuff. And then anyone watching remotely can hit my socials if you want to chat, and I'll get you routed to the right place at Fireblocks. Thanks.
