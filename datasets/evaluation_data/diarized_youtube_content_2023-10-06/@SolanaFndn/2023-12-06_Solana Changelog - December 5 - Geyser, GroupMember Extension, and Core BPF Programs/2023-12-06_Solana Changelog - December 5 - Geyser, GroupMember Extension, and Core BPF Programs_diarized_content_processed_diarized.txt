00:00:03.880 - 00:00:09.590, Speaker A: Hello, everyone, GMGM. I'm Nick from the Solana foundation dev rel team, and welcome to the Changelog. How are you doing this week, Jacob?
00:00:09.702 - 00:00:11.150, Speaker B: I'm doing great. How are you?
00:00:11.302 - 00:00:17.474, Speaker A: I'm doing well. Let's go ahead and dive right into the changelog. Let's talk about some of the commits for the week. I guess the last two weeks.
00:00:17.814 - 00:00:51.780, Speaker B: Yes, for the last two weeks. So one of the first commits that we want to talk about today is they're supporting logging in geyser plugins. So this is kind of allowing you to log basically. Basically just the same way that the validator does in the validator logs for your specific plugin. It allows you to have access to the Solana logger and actually log the stuff. So you can have one location for all your logs and you can put that in splunk datadog, whatever you feel like, and you can have a better understanding of what's going on with your geyser plugins. This is especially helpful.
00:00:51.780 - 00:01:39.502, Speaker B: Say if there's a version upgrade and you're upgrading all the RPCs and you have geyser plugins, and you want to know if there's an issue, you can be told very quickly versus having to see the issue happen first. So this is a good change, but that is coming soon. Other changes? I think there's some changes with security TXT. So there's been an addition of security TXt to a bunch of the Token 22 and SPL programs. Basically, if you're not familiar with security TXT, you should definitely look into it and add it to your own program. So this is a standard by neodym. What it does is it allows you to put a security TXT associated with your program.
00:01:39.502 - 00:02:26.666, Speaker B: And in that text file, it kind of gives some metadata on how can security researchers, if they find an issue with your program, contact you and tell you about it instead of having. Yes. Incredibly important, instead of having someone exploit your program and you have no idea about it. This is highlighted in the neodymium talk at Breakpoint as well, where they had, I believe it was Riverguard. Yes, Riverguard, which is a way of looking up and seeing if they can find any exploits on any program. And they walked through how they contacted this person that they found an exploit with and didn't have a security TXT associated. So they still were able to find the person and fix the the issue.
00:02:26.666 - 00:02:39.490, Speaker B: But it was a lot harder and a lot slower and could have given an exploit to a bad actor versus a good actor. So that is really good nick, and what else have you seen this week?
00:02:39.682 - 00:02:57.884, Speaker A: There was another token extension. So the group member pointer token extension, it was added to the new token program. And basically it's kind of think of it like doing groups of tokens, kind of like collection. So a collection is a group kind of think of it the same way. But our friend Joe Caulfield over there at labs.
00:02:58.744 - 00:04:02.904, Speaker B: Yes. So this is another extension that allows you to point to another program to say, like that's where you find the logic, so it doesn't have you tied down to a single program. But yeah, that is a really good addition onto the SIMD's for this week, Joe Caulfield again has a cool SIMD 88 enabling core BPF programs. So what this is, is we have a bunch of programs that are considered native programs on Solana. These programs are actually written and built in and maintained within, directly within the runtime. This is kind of problematic for other validator clients because they have to make sure they maintain the same program in their own runtimes instead of having just a program on chain that was deployed. So what this is kind of doing is a, this specific SimD is a way to enable these core BPF programs later down the road and do a way of upgrading them as well through the different maintainers.
00:04:02.904 - 00:04:08.928, Speaker B: This is a way of doing it. We're looking forward to it actually being implemented.
00:04:09.056 - 00:04:57.646, Speaker A: Yeah, I think SIMD 88 is super interesting because it sets a lot of the additional groundwork for other validator clients. So fire dancer Sigma, and like any other clients, they won't have to implement the exact same programs, these native programs, like you said, Jacob. So it's actually going to make the engineering efforts that firedancer has to do. It's actually going to lessen those quite a bit. But it also makes it so we can have a quote unquote, native implementation of all of the core programs, like the system program, these core programs within the runtime itself that are enshrined in the protocol itself. It makes it so we can have a different programming language, like the Solana Labs client team can work on a rust implementation of it. And then there could be a c sharp, or I believe it's c sharp for c sharp for fire dancer.
00:04:57.646 - 00:05:05.074, Speaker A: So we can have different programming languages also implement the same BPF programs, which gives some additional redundancy, which I think is really nice.
00:05:05.414 - 00:05:08.422, Speaker B: Yep. And by the way, it is c for fire.
00:05:08.478 - 00:05:12.220, Speaker A: Answer C. Darn. There's too many flavors to see. I don't know.
00:05:12.372 - 00:05:18.012, Speaker B: Lots of flavors to see. Anyways, what are the resources of the week that you've seen this week?
00:05:18.148 - 00:06:00.732, Speaker A: Well, this one, it's a little bit of a self plug here, but so myself and beamon shout out to Beamon. Awesome guy, awesome dev. We've been working on this project of create salon adapt. It's decently known within the ecosystem. You can run NPX, create salon adapt, and you can basically get a generated scaffold of some different frameworks like next js react, eventually view and svelte and things like that. But it can give you a really simple way to spin up new applications so that way new devs don't have to go through all this massive amount of setup and this friction of setting up the very minimum and boilerplate stuff. This is actually a call to action for anyone who's interested in giving feedback.
00:06:00.732 - 00:06:34.414, Speaker A: We're getting ready to launch the new version of this. We rewrote it from the ground up, and by we I mean beaming rewrote it from the ground up. It's so much more flexible and powerful. Basically it's at feature parity with the existing version, but we have tons of ideas for features and things to be able to generate within it. So if you're interested in spinning up different templates and applications, whether those are front end or back end, using rust and anchor, then feel free to reach out to me and the Solana devs Twitter account and join us in the early round of feedback before we launch the new version publicly.
00:06:35.474 - 00:06:43.444, Speaker B: Cool. Do you want to share what the command is today to actually try this, or are we waiting for the closed I'll be waiting.
00:06:43.744 - 00:07:01.484, Speaker A: This is the teaser. The closed group will get it actually. Probably by the time this comes out you could try out the new version. If you run NPX, create Solana Dap at next will be the GitHub tag or the NPM tag that you'll be able to run it from until we publish it to the latest tag.
00:07:02.024 - 00:07:07.784, Speaker B: Awesome. That's all we have this week for the changelog. We'll see you next week. Thank you. Bye.
