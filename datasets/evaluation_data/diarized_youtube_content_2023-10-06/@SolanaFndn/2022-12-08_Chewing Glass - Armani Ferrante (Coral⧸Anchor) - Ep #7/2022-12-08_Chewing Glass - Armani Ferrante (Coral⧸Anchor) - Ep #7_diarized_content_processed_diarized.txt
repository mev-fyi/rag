00:00:00.520 - 00:00:02.486, Speaker A: If we can't talk to each other, we're not gonna make it.
00:00:02.590 - 00:00:05.190, Speaker B: Sometimes I feel like I've bitten off.
00:00:05.222 - 00:00:10.102, Speaker A: More than I can chew. Most of the time, I work in a glass jar and lead a very uneventful life.
00:00:10.238 - 00:00:11.830, Speaker B: A face full of glass hurts like.
00:00:11.862 - 00:00:15.294, Speaker A: Hell when you're in it. That's weird. That glass looks half full to me. Eating glass.
00:00:15.334 - 00:00:16.966, Speaker B: Eating glass and staring into the abyss.
00:00:17.070 - 00:00:17.834, Speaker A: Glass.
00:00:18.454 - 00:00:19.974, Speaker B: Who gives a shit about glass?
00:00:20.054 - 00:00:21.274, Speaker A: Who the fuck is this?
00:00:22.854 - 00:00:25.914, Speaker B: It's kind of part of our culture to eat glass.
00:00:26.854 - 00:00:29.354, Speaker A: I'm gonna get some safety goggles next time.
00:00:38.894 - 00:00:52.958, Speaker B: Hey, everybody, and welcome to Chewing glass, the show where we talk to developers building in the Solana ecosystem. Today, I'm joined by the man, the myth, the legend, Armani Ferrante. And we're here to talk about his experience building in Solana. What's up, Armani?
00:00:53.086 - 00:00:54.598, Speaker A: Hey, Chase, how's it going?
00:00:54.766 - 00:01:13.286, Speaker B: Not too bad, man. So, I mean, we've known each other for quite a while. We have a pretty good relationship. We have a nice ship posting relationship on Twitter as well. So it's been a really good time. I really like, this show is really about just talking to developers and their sort of experience building on Solana. It's called chewing glass.
00:01:13.286 - 00:01:25.782, Speaker B: That's not fully the case anymore, but we're going to start from the beginning here and just dive into where you got started. Where did Armani come from before he existed on Solana?
00:01:25.958 - 00:02:20.866, Speaker A: Yeah. Kind of had a relatively normal path into crypto and kind of graduated from UC Berkeley, graduated, majored in computer science, started my career kind of just in Silicon Valley, working in big tech. I was working in Apple, working on apps and frameworks there. And then that was kind of during the whole big boom cycle in 2017 on Ethereum and kind of slowly kind of made my way into crypto after seeing that. That bull market and reading the Ethereum white paper and learning about solidity and learning about these distributed ledger technologies and long story short, just left my job at Apple. My managers were all confused, and it was funny at the time, they were saying, oh, yeah, are you afraid that you missed the bull market? Why are you doing this? You can make plenty of money here or whatever. I was like, yeah, I don't know, that seems pretty cool.
00:02:20.866 - 00:03:07.582, Speaker A: It seems more interesting than what's happening here. So I just kind of took the leap. I had no plan whatsoever. I didn't have a job lined up. And so it's kind of an awkward situation. I just kind of left my job and started contributing to open source, which was super liberating and tons of fun and just such a breath of fresh air from kind of working at Evil Corp, as my manager used to call apple, and kind of like slowly kind of made my way into crypto from there and then kind of been working on various kind of parts in the crypto ecosystem. Spent some time working on Ethereum, working on some state channel technology, spent some time at Oasis Labs, working on their kind of wasm runtime there.
00:03:07.582 - 00:03:17.702, Speaker A: And then most recently kind of have just been in the sauna ecosystem, I guess, for a little over the past two years now. Kind of working on stuff all over the place.
00:03:17.838 - 00:03:31.006, Speaker B: Yeah. So I want to jump back to what you were actually doing when you were at Apple, sort of like leading up to that transition into web3. Were you building on rust? Were you building low level? What were you actually doing there at Apple?
00:03:31.150 - 00:04:33.979, Speaker A: Apple's kind of like a weird place because it's a very old company, and so the technologies that you use there are kind of just there by virtue of path dependency in history. So everything in terms of this tech stack was just all internal Apple technology. So things like, basically everything was like an objective c and c, even at the time, like Swift publicly, it was the hot new thing, but nobody was actually using Swift internally. Maybe there's a couple of widgets on the iPhone or whatever that we're using swift, but basically everything which is objective c. And you have these code bases that are just decades old. You have sqlite management and just Raw C code. There's no garbage collector, a lot of manual memory management and just a lot of cruft, basically that made kind of like working there, like not super fun because you're working on all these proprietary old kind of pieces of technology that kind of aren't being used normally in the outside world.
00:04:33.979 - 00:04:54.126, Speaker A: And I guess that's kind of the story for a lot of big tech companies. Like Google's kind of famous for this type of thing. But yeah, it's working on apps and frameworks there. I worked on stuff like calendar reminders, event kit contacts, and just worked on, like, the apps that's kind of shipped, like out of the box with the iPhone and the Mac.
00:04:54.230 - 00:05:18.894, Speaker B: Cool. Yeah. So you started to talk a little bit about the evolution, I guess you had started contributing to open source on Ethereum. And then my first experience knowing who you were was around the time that the solit wallet came out. That was the first wallet on Solana was that sort of like the main thing that you were focused on at the time whenever you sort of jumped in to the ecosystem.
00:05:19.014 - 00:05:44.474, Speaker A: So, yeah, it's a good question. I think Solit is an interesting story, because when I came to Solana, it was, I think, September. It was like mid September 2020 now. And there wasn't that much kind of there at the moment. I think, like, solit sole existed, serum existed, there was break. That was like a big thing. Basically, solid and serum were the only two kind of like open source kind of pieces of code.
00:05:44.474 - 00:06:40.846, Speaker A: And so I kind of like, randomly, not so randomly, I kind of accidentally fell into this role of contributing to solid because the ecosystem needed all this random stuff. So a good example of this, if you hop back in time and think about what was some of the problems being solved on Solana at the time, even before anchor and stuff, there was this nightmare of user experience that we had with things like token accounts. So if you wanted to send a token from me to you today, it's pretty simple. I go into my wallet, I copy and paste my soul address, and I send it to you, and that's all said and done. But back then, you had not a single address, but you actually had n addresses for end token accounts. So if you had serum or wrapped uniswap or soul or mingo tokens, each one of those would be a different address. You'd have a different token account, pub key, basically.
00:06:40.846 - 00:07:20.910, Speaker A: And so if I wanted to send a token from, I'd say, what token do you have? And then not only what token do you have, what address do you have? Then you would open up the wallet, go to the line item, pluck out the pub key, and then there's the question of like, oh, but there's two pub keys, right? There's this thing called a mint, and there's this thing called a token account. What's the difference? Well, it's like, I don't know. The mint defines the token, and the token account is kind of your personal representation of your balance in that token account. There's all these details, right? And it's really funny at the time, because, like, I think even like, a lot of the folks that were like, kind of really close to Solana, like the Solana core team and stuff, they didn't really think it was much of a problem. There's like, oh, yeah, you know, it's like, ui. Of course they did it. Of course they did it.
00:07:20.910 - 00:08:04.814, Speaker A: Yeah, exactly. And eventually, you know, enough people complained about this, right? Enough people were like, sending tokens to the wrong addresses or just getting confused with this horrible Ux that eventually the associated token program existed. And so this was like a really huge, it sounds stupid now, but at the time it was a really big leap in Ux for Solana. This like, concept of like being able to use deterministic addressing for token accounts so that you can not have n addresses but a single sole address. And so we were kind of like learning this stuff. I think collectively at the application layer, maybe the core teams kind of knew all this intuitively. I assume Anatoly knew all this intuitively, but at least us at the application layer were kind of stumbling upon these ideas.
00:08:04.814 - 00:08:32.848, Speaker A: And so solit was a good example of that because it was one of the first implementations, maybe the first implementation of this. And so there's a lot of examples of this where it's like, well, Solit was the only open source wallet in the ecosystem, and in order to evolve as a community or as a developer community, a lot of folks, including myself, would just maintain that and add these new features so that we can have good examples on how to do all this stuff.
00:08:32.976 - 00:09:17.990, Speaker B: The funny story about all of this is that I worked for another blockchain project called Ken, and in late 2020 they were migrating to Solana. And as I'm testing all this stuff out, I started messaging like the internal team. Cause I talked to like Dan Albert and a lot of guys at the labs and foundation, and I was like, hey, all these wallets do not work, right? Like, I can't, like, people are losing money. Like, not only that is like, if you sent one token, sometimes it would have multiple of the same token and the same account. Sometimes there was nested like token account within a token account, and like, it was just absolute hell. And that was really when I started like paying attention to Solana at the time. So I remember those painful days and I was even, I even remember for some reason sending Dan a message, like, hey, like, even sole it.
00:09:17.990 - 00:09:37.718, Speaker B: Like, I can't send to the main address, I have to send to a specific token account. Nobody's ever going to use this except like five of us, so can we please fix this? And then the exchanges had the same issues and like, it was, I'm so glad that that's resolved. That was a really dark time, like for a lot of people because it was just such a challenging ux.
00:09:37.846 - 00:10:43.950, Speaker A: Yeah, I mean, it was crazy, but I think it was just part of the nature of being early in the ecosystem, because there wasn't really just that many people, there's like a handful of people that knew how to actually build this stuff and were willing to read the SPL token program and willing to go look at the validator code and stuff like that. And so there was a couple of people doing all this stuff, right? There's working on solid, working on the smart contracts, working on things like, you know, like developer tooling and what later became anchor. And there just wasn't any, like, there wasn't capital, there wasn't teams in the space and all that was kind of just starting. But just having those like pieces, small pieces of open source code, like solid specifically, just like that itself birthed just like tons of wallets in the ecosystem. Like, I've spoken with both the soulflare and Phantom team about this, and both wallets heavily, heavily use that code. Even if you like, go look into Phantom today and like send a, send a token from one account to like a totally new account, you'll see it use some obscure program which will, and you're like, oh, what is this program? It's out of nowhere. But that's from the solit code base.
00:10:43.950 - 00:11:25.902, Speaker A: Because there was a smart contract that was written because everybody was paranoid at the time of sending tokens into the ether. And so there was this program that would assert that the owner of the token account being created was actually a system program owned address, which means a human actually owned it. Because there is this flow, basically when associated token accounts were introduced to basically lazily instantiate the account for the user. Because on Solana, that's how things work. You have to Malloc, so to speak, your accounts before you can actually write data to them. There's a bunch of small things like this where if you actually go look at what a lot of the software is doing today, it's all the same stuff that originated from those open examples.
00:11:26.038 - 00:12:03.226, Speaker B: Yeah, that's absolutely incredible to see that evolution, obviously, again, just like that, that sort of inspiration of people just like building on top of things just continues today. Whenever it was so hard and like, you had just got into Solana, let's talk about like early 2021. That was a problem. All this token stuff you're talking about, like UX was horrible. There weren't really any apps yet. It was still just like, what's going on here? Like, what made you want to continue driving that forward? Ethereum obviously existed. There were obviously there's trade offs on both sides.
00:12:03.226 - 00:12:14.082, Speaker B: But like, what made you be like, I'm going to actually invest this much time into this thing? Because why? Because it was cool. Because you saw the future of it. What was it?
00:12:14.178 - 00:13:00.374, Speaker A: Yeah, so, I mean, the answer to that is pretty subtle, I would say. It's like a combination of various things that are more or less good and bad. Sure, the developer experience sucked. There wasn't anybody using it, but you would take a look at things like break. You would take a look at things like serum, and they were above and beyond anything at the time. And up until then, there was a whole wave of basically l one s that had gotten funding and gotten started during the 2017 bull cycle because Ethereum wasn't able to fulfill its promises. Ethereum at the time had this huge, huge narrative of being this world computer, of this thing that's going to power decentralized apps.
00:13:00.374 - 00:13:30.970, Speaker A: And Vitalik at the time was saying, oh, yeah, things are going to be oriented a million transactions per second, and all this stuff. But all that stuff didn't happen. There was all of this, and I'm not saying anything like that about any of the people at the time. It's like, these things are hard. There was this huge wave of l one s that got funded to kind of satiate that appetite, right? And there's a bunch of them, right? There's like, you know, Solana was one of those. All the names just, like, go out of my head now. Cause they're, like, kind of forgotten.
00:13:30.970 - 00:14:11.930, Speaker A: Near avalanche, oasis, thunder. What's the one with the d definity? There's just, like, the list goes on and on, right? There's all these people that came and promised to, like, save the world from slow transaction processing and be the l one to roll them all. But Solana was really the first one to actually ship, ship super fast and show that it was, like, possible to get one to two orders of magnitude improvements. And so that was kind of like the second thing. And then you start going along the ecosystem, you start meeting all the people into space. And it was very clear to me that some of the people were just really amazing people. And I think that's really some of the magic that is really not talked about enough.
00:14:11.930 - 00:14:40.636, Speaker A: I think one thing I really loved about the Ethereum ecosystem, at least amongst the core Ethereum people like Vitalik and the core researchers and the core systems engineers that work on the validator clients, is that they're all really nice people. They're just super friendly and super easy to talk to. I remember, when was it, 2018. I was nobody. Nobody knew who I was. I was just some engineer. I was trying to find his way in crypto, and they were all just super nice.
00:14:40.636 - 00:15:01.852, Speaker A: They would open, or they would merge in your prs. You could talk to them in person. You could just go up and say hi. And I think, like, there's not a lot of l one s for which that's true. And I think Solana is, like, definitely one of those. I think, like, you hear a lot of people say this, but, like, people just, like, be kind, right? Like, Austin from Solana foundation will say that all the time. Anatolia will say that all the time.
00:15:01.852 - 00:15:25.702, Speaker A: When people are getting, like, in fights on twitter that, you know, are maybe getting a bit personal, he'll kind of always, like, say, be kind. Don't call people maximalists and things of that nature. Um, and, like, I think, like, that's, like, a big part of it. Like, it might sound silly, um, but I think that's, like, it's. It's. It's necessarily, like, a necessary requirement, I think, at least, um, for. For me to spend as much time I do kind of doing this stuff with.
00:15:25.702 - 00:15:51.540, Speaker A: With these people. Um, so I think that was, like, definitely a big part of it. And the rest is kind of just like, you know, you have all those things. You know, you like working on this tech, you like working with the people. Um, you see a big opportunity and that, like, we're in the kind of the wild west of this, like, nascent technology, and it seems like, kind of like a once in a lifetime opportunity to, you know, go into the deep end and go all in there. So that's kind of, like, the thought process. Maybe.
00:15:51.540 - 00:16:02.224, Speaker A: Maybe not fully the thought process, but I think, like, captures a good chunk of it. And so, yeah, that's maybe at least the genesis of kind of why I got so into Solana and why I stayed.
00:16:02.644 - 00:16:57.764, Speaker B: Well, yeah, man, that's cool. I think what you just said, pretty much the TLDR is, like, came for this tech, stayed for the vibes, and, like, and you say, that sounds a little bit sort of silly, but it's not, because this is actually the story of almost every developer I talked to. Like, they come here for this sort of, like, this cool tech, and they see a lot of builders, and then they get on Twitter or wherever, and then they start to get all this support and love. Even if you do something small, people are just like, yo, dude, nice job. You shipped a hello world. Like, and that sort of, like, vibe, it started with Toli and Raj in the beginning, and then it came down to Austin and myself and you, and then, like, people just want to be part of that and, like, and it's a really good thing, and I think it's probably one of the biggest strengths of, like, Solana Foundation, Solana the blockchain, Solana Labs in general is it's just like, this whole thing is now community owned and run, and, like, it's really awesome. Describe building on Solana in early 2021 versus now.
00:16:57.764 - 00:17:15.624, Speaker B: Obviously, you sort of highlighted a couple sort of granular details, but just at a high level generally. Obviously, back then, a lot of things didn't exist. We can get into anchor in a bit, but between, what's the difference between then and now with all the things that have been built out there?
00:17:16.404 - 00:18:08.366, Speaker A: Yeah, the word I would use to describe it would just be cumbersome, and the reason for that was basically, there was no code generation at all. And there's a lot of unique idiosyncrasies in the Solana programming model relative to other developer platforms that make the code generation really, really important. And so, yeah, I think that is the main thing. And there's a lot of details and reasons for that. I'm happy to jump into that, but it was very heavy. And so anytime you wanted to do, like, a little thing, like, if you wanted to change, add a feature to a smart contract or add a button that performed a new action, you would have to go through lots of laborious and tedious work just to make that happen. And then cogeneration and anchor was basically the solution to a lot of that.
00:18:08.470 - 00:18:38.102, Speaker B: Yeah, still, I say this often in different conversations and talks and stuff, but I still to this day, do not understand how those early folks actually were able to build anything. Like, when all they existed with the core documentation, a lot of the answer ended up being going into the developer discord and, like, getting direct access to, like, the Solana Labs engineers. That was, like, really the only way to do it, because otherwise, it's like, I would be funny. When I first started as, like, the Devrel here, no examples existed.
00:18:38.158 - 00:18:38.398, Speaker A: Actually.
00:18:38.446 - 00:19:03.994, Speaker B: I used to point people to solit who asked how to do certain things, and I was like, go here. Cause we're still working on, like, examples for how to do these things. But for now, this is probably one of the best places to go. Like, if you asked the core engineer at the time, they would be like, just go look at the tests. And I'm like, dude, that can't be our pitch here. But if you wanted to get into, like, some of those details, that's fine. And, like, and beyond that, like, maybe describe.
00:19:03.994 - 00:19:11.654, Speaker B: And I'm assuming the answer is already, the question I posed is, like, what led to, like, the whole evolution of, like, hey, I'm going to build anchor.
00:19:12.514 - 00:20:06.440, Speaker A: Yeah, so I think both those are like one segues into the other quite nicely. So if you think of the raw low level Solana programming model without any tooling, what does it look like? So from the smart contract side, you basically get a single entry point with three parameters. So you get a program id, you get a list of accounts or slice of accounts, and then thirdly you get instruction data, and that's it. You get a single function. And with that single function you have to build your program. You have to interpret the bytes for the instruction data, you have to interpret the bytes or for the account, you have to do all the account validation, destructure the data, and do any type of relational constraint enforcement all by yourself. And this is kind of like the starting point for building on Solana.
00:20:06.440 - 00:20:55.174, Speaker A: And if you compare this to something like solidity or something like expressjs or would be on rails or whatever, it's very different in the sense that people aren't really used to, to this single function entry point. Normally there's abstractions built on top of this in something like solidity. You have your solidity contract, and you have a function or a method for each entry point. You would just call those functions from a client, and it's pretty straightforward. Expressjs or a rest API, exact same thing. You always have some URL that maps to some function, and then that is your handler for the state transition function. But Solana didn't have any of these abstractions.
00:20:55.174 - 00:21:31.804, Speaker A: When you write a smart contract, you'd have this entry point. And what would you do? And you would basically do the exact same thing for every single smart contract before you would ever actually do anything that would be unique or novel or new. So what would you do? You would first take the instruction data and have some type of dispatch function where you would map some single byte or four byte or eight byte discriminant to some function. So you would have the first four bytes, you would chop it off, and then you would say, all right, byte zero. If it's zero, go to this function. If it's one, go to this function. If it's two, go to this function.
00:21:31.804 - 00:22:18.716, Speaker A: If it's three, go to this function, and so on and so forth. Then not only would you do that, but then you would take the rest of the data, and then you would interpret that as some structured by some parameters, basically. And so you might pass in a string, you might pass in a U 64, you might pass in a struct, an array, whatever it might be. And so that you would have some instruction dispatch, and that's pretty straightforward. But then the thing that makes Solana unique and challenging is this account model. So once you get past instruction dispatch, you now have to deserialize all of the accounts. So for people listening, if you've never programmed on Solana before, an account is basically a piece of data that's owned by a program, and that only that program can update that data, but any other program can, like, read that data.
00:22:18.716 - 00:23:21.590, Speaker A: And this makes the programming model really challenging, because what it means is that you basically have a bunch of untrusted data being injected into your program at runtime, which basically means that you have to do a bunch of safety checks before doing anything with that data. Because you could imagine, like, if you have, I don't know, some program that, some escrow program that says, like, oh, if Chase signed it, then send the money to here. Well, like, an attacker can come in and pretend to be chase and say, okay, well, like, I'm not Chase, but I'm going to pretend to be Chase and sign it, and then send the money to not Chase's account, but to my account. Right? So you have to check these types of things. And so the programming model is really annoying because you'd have to do all this stuff, right? You'd have to serialize instruction data. You have to deserialize the account data, and then you'd have to do checks on all of the accounts to make sure that whatever requirements or invariants that needed to be enforced were indeed enforced. And this basically, if you just go look at the Splana lab slash Solana program library on GitHub, you'll just basically see all this stuff being done.
00:23:21.590 - 00:24:06.914, Speaker A: It's just hundreds of lines of code, maybe thousands of lines of code, depending on what program you're looking at, for just crazy amounts of just boilerplate that no sane human being should do. Once you write a couple of Solana programs, you realize this is ridiculous and silly, and we should have code generation, because cogeneration is the obvious thing to do. And this is all only on the runtime side, it's only the smart contract. On the client side, you have the exact same problems. So not only do you have to do this with a smart contract, but you have to do the exact same thing, but you have to do it inside of your typescript library or your swift library or your java library or whatever it might be. You have to do all the serialization, all the unpacking, all the method creation. You have to do all this stuff all inside of typescript, let's say, um, which is fine and dandy.
00:24:06.914 - 00:24:18.634, Speaker A: Okay, we can do this. This is all heavy lifting. Um, but it's like, it's not heavy lifting. It's just like, it just cumbersome. Right. It's not, like, necessarily rocket science. It's just, um, all distracting you from actually solving real important problems.
00:24:18.634 - 00:24:51.080, Speaker A: Right. Um, and so you can do all this, and maybe you say, great, like, you know, I can do all this. I can ship a smart contract. It was painful, but not that painful. Um, and we can, like, maybe move on with our lives. You do this a couple of time, you have some nice patterns, but then the moment you try to do something, like change or modify some piece of code, like, let's say you reorder an account that's a really common one, that used to be really painful or used to change the order of instruction parameters or change the type or whatever. If you do ever do that, then you have to go through the entire stack.
00:24:51.080 - 00:25:16.038, Speaker A: To go through the client, you have to go through the smart contract, and for every method you have to now redo, you have to update it. All right? And then once you do this a couple of times and you spend an entire day debugging a single thing, like reordering an instruction argument or reordering an account, at that point, you just fucking rage quit, and you're just like, I'm done. Like, I'm not doing, I'm leaving. I'm out of here. I'm not doing this anymore. Solana, GG, like, good luck, guys. Like, I'm out.
00:25:16.038 - 00:25:43.886, Speaker A: And this is just, I'm just talking about this purely from the productivity point of view. And if you start thinking about this from the perspective of, oh, I'm managing millions or billions of dollars, the story gets even more daunting and more dire. Right? And this is basically what happened with me and anchor. I had all these. I was writing some smart contracts, and I was really just fed up with the programming model. I was really just tired of it. So it just really just felt like it was just hard.
00:25:43.886 - 00:26:19.820, Speaker A: And no sane person's going to use this, but I had a task to do, so I did the task, and it's all right, great, it's done. And then eventually I start explaining it to somebody and going through the code with them, and somebody says, oh, have you thought of this? And how do you handle this situation where, like, one account type is passed in for another account type? This is like account substitution attack. That's really common, and everybody knows about this. Nowadays. And as soon as that was introduced to me, I was like, oh, my God, fuck this shit. I'm never doing this ever again. I'm either going to stop everything I'm doing and fix this, or I'm just going to not do this anymore.
00:26:19.820 - 00:26:42.070, Speaker A: And because my view is, if this wasn't, if nobody did this, nobody was going to use Solana. It was, like, kind of my view at the time. And if nobody's gonna use Solana, then, like, why am I doing any of this? And so I kind of viewed the most, like, high value thing for me to do at the time was, like, to just go down the path of building anchor. And that was kind of, like, what led me to do that, which basically was, like, the justification was, like, existential crisis is how I describe it.
00:26:42.222 - 00:27:03.518, Speaker B: Well, you just led us through a very deep thought process to get through there. So, like, it's still super interesting. Like, most of our viewers here on chewing glass are, like, technical. So, like, this is the whole purpose of this. But, like, talk about, like, what was hard about Solana. And, like, again, like, I don't think we're in, like, a chewing glass moment anymore, actually, here's the way that I sort of, like, think about it. There are glass chewers.
00:27:03.518 - 00:27:46.668, Speaker B: There's the Noahs, and there's the Armani's, and then these people that want to chew glass, so truly other people don't really have to. And we've reached this world where, like, anchor exists and people love it. Now we're receiving even further abstractions, even though I sort of have some little disagreements online, whether, like, a python build on anchor or a typescript sort of framework should exist. We'll see that in the future, how that works out. But regardless of that, like, with anchor, we have indexers, we have, like, better wallets. We have all these things, like, what is missing now if, like, we're going to continuously improve developer experience on Solana, like, what are the big, like, things in your mind that are missing that we don't have, that people still sort of, like, suffer through today?
00:27:46.816 - 00:28:06.732, Speaker A: Oh, that's a great question. So I don't know. I don't think this list is going to be all encompassing, but there's a couple things that come to mind. One of them we're actively working on, others we are not. So the first thing is. So anchor was, like, I think, a step function in terms of program safety. We hear this a lot when talking with auditors.
00:28:06.732 - 00:29:05.264, Speaker A: The programs that are written in anchor and not written in anchor. It's night and day in terms of how many vulnerabilities there are. I actually think we can make it even better. What I've been working on and designing with Henry Elder, who's now working on anchor full time, is this new way of doing declarative account constraints, where all of the constraints are actually in the types themselves. If you're used to anchor, you have this derive account struct where you specify accounts with some nice types on them that do some checks, but then all of the checks that aren't in the types you actually of declare through raw constraints where you can have, have some rust code to do basically some if statements, but like do it declaratively inside of a macro. I actually think we can level that up a bit. And to basically eliminate 99% of maybe, I don't know the exact number, that number, I pulled that number kind of out of thin air, but we could eliminate, I think, a lot more attacks and do it through a good type system.
00:29:05.264 - 00:29:37.406, Speaker A: And so this is one thing that I'm super, super excited for. It's really hard to do this. Um, it's a lot of work. It's a lot of design work. It's a lot of like rewriting a lot of like the core anchor constraint code. Um, but I think it'll be like, well worth the effort. Um, but once we do that, I think the programming model will be in a spot where I think it's like, if you compare this on a programming model with this kind of new type of, um, anchor account validation, um, I think it'll be like pretty close to like some of the best, like smart contract tooling, like in any blockchain ecosystem.
00:29:37.406 - 00:29:39.330, Speaker A: So I'm pretty excited for it.
00:29:39.362 - 00:29:43.586, Speaker B: Yeah, well, damn. Okay, well, that sounds exciting, but that's.
00:29:43.610 - 00:30:43.354, Speaker A: Kind of like what we're immediately working on. I think the second thing that I'm super excited for, which we're not currently working on, which I think maybe we should work on it, or maybe somebody else should work on it, is moving to interfaces. I think this is maybe a debated topic because I think on the one hand, you don't want to move to interfaces because maybe you think of things like, more securely, um, like, you know, it's nice having a single token program. It's nice having a single, like, um, token metadata program because like you can reason about security like better. Um, but on the other hand, I think it's like limiting innovation and it creates a bunch of unnecessary, unnecessary governance, like, battles, um, within the ecosystem. And so I think moving the programming model and moving all the protocols to, instead of having ordained programs that are nfts on Solana or our tokens on Solana, we just have interfaces. And if you want to create your own competitor to the SPL token program or to Metaplex, you can.
00:30:43.354 - 00:30:57.770, Speaker A: And I think that will unleash a lot of innovation as well. Although I think people might disagree with me on this, but I think that is something that would be a really killer upgrade to the ecosystem in terms of the developer experience and what the stuff developers are doing.
00:30:57.902 - 00:31:33.802, Speaker B: Yeah, I mean, there's a handful of people out there that are really sort of trying to drive that and like also try to bring like a similar sort of web two e experience to web3. I think we're a little bit off on that, on Solana right now, but I feel like it's coming just to sort of shift gears. We're talking about developer experience. You're working on some things. We're talking about Coral backpack, xnfts, like, what is the future? And like how does this relate to improving developer experience? Or just like make or not even maybe developer experience, but like what does it enable, like what does the future look like for this whole idea?
00:31:33.898 - 00:32:18.822, Speaker A: Yeah. So maybe it's good to start from the bottom and work up. So what we've started this whole journey over the past six months I'm doing is we basically started with this desire to build full stack decentralized applications by tokenizing code. So kind of the starting point for a lot of this stuff that we're working on now is this concept of this new XnFT protocol. So what we've done on top of metaplex, instead of tokenizing an image or really in addition to tokenizing an image, we can tokenize code. And out of this like, very simple idea, a lot of like interesting product falls out of it. And kind of like, you know, the first story that we've been telling and building with a technology is kind of this like decentralized, full stack kind of application ecosystem.
00:32:18.822 - 00:33:18.772, Speaker A: So if you take a look at like web3 apps today, and you take a look at like, you know, how are they attacked? Where, where are the points of censorship? Where are a lot of the unsolved problems? It basically falls into, I think, two things, basically. So the front end is the first thing, the front end is the low hanging fruit for attacks in various ways, shapes or forms, whether it's web two products like Twitter censoring people, or whether it's things like uniswap.com, where they gatekeepers or whatever, you know, whatever, whatever markets are being listed inside that. And so wouldn't it be cool if we had, like, a decentralized, like, App Store and a decentralized application ecosystem? So incomes is like, concept of XNFt, and that's, like, kind of the first, like, step to this. And when you start thinking about this, well, you think, well, how do I get the entire world to use this, right? And it's not really enough to just have a protocol. You actually need to have, like, a full stack, like, ui, right? You need, like, an iPhone. You need, like, a product.
00:33:18.772 - 00:33:55.676, Speaker A: You need, like, a sensible host to run this new system, right? So it comes backpack to this. So, um, the starting point of backpack is a wallet. But I really don't like to describe it as a wallet because that's kind of just like, table stakes for the way we think about the product. And then the question is like, well, what is backpack? Right. Um, and the analogy that, like, I like to use, and, like, you know, bear with me for a moment, because I think this analogy is, like, it sounds like a bit, like, ambitious, like, to start, but I actually think it's, like, the right way of thinking about this. Um, so, you know, the analogy I like to use is that of the iPhone. If you look at the messaging around the iPhone, when it first started, what did Steve Jobs say? He basically said, oh, you have the Internet in your pocket.
00:33:55.676 - 00:34:09.964, Speaker A: It's like, okay, what does that mean? You have the Internet in your pocket. It's like, you ask a bunch of questions. Is it a router? Is it a switch? Is it a browser? Is it a competitor to AOL? It's like, no, no, no. It's none of these things. You're making it overcomplicated. It's just a phone. It's like, okay, that's a phone.
00:34:09.964 - 00:34:58.856, Speaker A: I could call people. I could text people. I could have a contact list. And that makes a lot of sense. And I could attach that to the things that were happening at the time and the competitors like BlackBerry and Nokia and all that stuff, right? But then you say, but then you might ask Steve Jobs, okay, it's a phone, right? And it's like, no, no, no, it's not just the phone, right? There's so much more you can do with an iPhone, right? You actually, you have your calendar on it, you have, like, Safari on it. You have all this rich developer tooling on it, and you have this, like, nice App Store on it, and you have this entire new ecosystem that was built on this primitive of an iPhone, right? All these new developer SDKs, this new App Store, this new ecosystem, right, where you had things like Twitter and Instagram and Facebook and all this crazy stuff that was built, all the mobile games. And what did that do? It's like, well, it created a new ecosystem or a new medium for developers to build stuff on.
00:34:58.856 - 00:35:30.756, Speaker A: But it didn't just do that, right? It actually solved a lot of the security related problems at the time because I don't know if you remember like before the iPhone, you would basically like, you know, you go to websites and basically constantly get viruses, right? You would like, you know, download the wrong thing, a limewire or whatever. And like, your, your computer would die or whatever. That's like, I don't know. I did that several times. I was like totally dumb kid. And I view a lot of what we're doing with backpack is something very similar. It's like not only, okay, we have a wallet, right, but we're a wallet in the same way that the iPhone, it's a phone, it's, that's kind of just like the starting point.
00:35:30.756 - 00:36:23.482, Speaker A: There's so much more to kind of the product than just like the wallet. So we have the wallet to start and you can view your nfts, you can view your tokens, you can swap, you can bridge, multi chain, and that's kind of like the starting point. But then on top of this, we have this XNft ecosystem that we've been building. So, so here we have a bunch of things, right? Like I said earlier, we have the smart contracts, we have the developer SDKs and like react native to build all the uis. We have this new XnFT store that we've built which is trying to provide this like curated App Store like experience so that mom and pop and people can like use xnfts in a way where they don't have to question it. So, you know, if I see magic Eden on the XnFT store, I should be able to guarantee that that is indeed magic Eden. And then of course, we have things like explorers and the underlying protocol for developers and advanced users to eject out of because truly with the spirit of web3, it's important that this up is permissionless.
00:36:23.482 - 00:37:20.146, Speaker A: So I very much view what we're building is this permissionless protocol and this permissionless system all open source. But then with these nice curated hubs on it to really usher in mass adoption. And this story is starting to take shape. But this is really just the starting point, um, for backpack and xnfts. So x nfts really as applications, but the whole, like, next phase and what we've been transitioning to basically over the past like month or so is building the first examples of x nfts not as applications, uh, but as digital collectibles. So these are like these ten K profile picks, like Djen apes or D gods that everybody loves and adores, and they're all kind of used to and have taken, like, the world by storm over the past year. Um, and so kind of what we're working on right now is we're, we're updating the protocol to be able to build these ten K collections so that we have this nice, incredible user experience where when you open a backpack and you see your nfts, and when you click on your NFT, you don't just see your token metadata, you actually go into the token gated application experience.
00:37:20.146 - 00:38:03.002, Speaker A: So we're actually infusing the application and binding it to the artwork itself. So everything you want to do with your community, you can do through Xnft. So whether it's like a holder's chat, whether it's Twitter spaces, whether it's creator specific marketplaces, whether it's staking, whether it's a merch store, whether it's games, whatever you want to do with your community, any type of digital token gated experience, you can do it with x nfts. So we're doing a new collection, the one collection, and we're doing it to dog food the product, right? We want to build a community. We want to go through the dance of building an NFT project, because nfts are awesome. But what we're really doing is like, is shipping this product so that we can bring this to like, you know, whatever NFT communities find this compelling. So I'm super excited about this.
00:38:03.002 - 00:38:34.424, Speaker A: And then now the app is like, starting to, like form, right? So we have a wallet, we have a cross chain wallet. We can do all this stuff with it. We have x NFTs as applications. We have things like, you know, flappy bird in there. We have things like double diffusion, which is like this stable diffusion thing that Jesh built. You know, we have things like, you know, you know, Defi products now. We have X nfts as digital collectibles and token communities, or, excuse me, NFT communities are now living inside of backpack, and we have all these APIs and services now that we're starting to build around all this stuff.
00:38:34.424 - 00:39:20.744, Speaker A: So the idea is that we have this developer platform where you can get rid of pub keys, you can get rid of all this low level stuff, but we could have cross chain user identity and the social services that developers can now hook into. So if I want to create Flappy Bird with my friends, I can now do it and I don't have to reinvent the wheel. So I'm super excited about bringing all this stuff together to build kind of like social first web, three experiences. And that's like a lot of the stuff that we're working on right now. And so this next release is really going to be a banger. It's going to have x nfts as digital collectibles applications, all the wallet stuff, Solana, Ethereum, we don't quite have bridging yet, but that's coming. Then all the social features we're going to have like holders, chats, peer to peer DM's, we have a version of Twitter spaces built, but that's like coming in the future, maybe.
00:39:20.744 - 00:39:56.740, Speaker A: Let's not worry about that for now. But we're building all these primitives, all of it's open source and anybody can hook into it to build their applications. And I'm super excited for it. And like, the way I think about backpack is like what we're trying to build. It's like, okay, it's a developer platform, but really what it is, it's a network in its own right, and it's not a blockchain network, but it's a network in the same way that, like, Twitter is like a network. It's a bunch of people that come together and can have this kind of like two sided marketplace between, like, developers and users to have like, rich experiences that we think will like, kind of fuel, like, you know, the next wave of innovation and adoption. So that's kind of like, long story short.
00:39:56.912 - 00:39:58.164, Speaker B: Yeah, man, that's awesome.
00:39:58.244 - 00:39:59.340, Speaker A: Short story long.
00:39:59.532 - 00:40:29.574, Speaker B: Exactly. It's not overly ambitious at all. But I think if any history has shown us anything that you guys are going to execute on this, and it's super exciting to hear, honestly, just your level of excitement here, we're going to wrap things up. But before we do that, I always like to ask this question and it's like, what is Armani's advice for newer devs getting into web3 and Solana, what is the short and sweet advice that you would have for anybody coming into this space right now that's looking to get involved and build?
00:40:29.694 - 00:40:56.538, Speaker A: Oh, man. Okay. I don't know if I could do it short, but the sweet advice I would say is, first, everybody's friendly, everybody's going to feel like an outsider when they first join. I felt like an outsider, but just, like, jump in, go to events, talk to people, contribute to open source. As a total aside, all of our hires basically came through open source, but our last one in particular is really unique because he just kept opening up prza backpack. And me and Tom, one of the other engineers on our team, like, who the heck is this guy, right? He's, like, amazing. He's just like, randy.
00:40:56.538 - 00:41:13.706, Speaker A: There's, like, no help. We gave him zero help. He just started, like, contributing code, and we called him, and within 24 hours, we gave him an offer. And it's really that meritorious. And so I would just say, get into it. You don't need to feel like, you know, anything. Just, like, go for it.
00:41:13.706 - 00:41:45.184, Speaker A: And, you know, I would say that, like, you know, I wouldn't worry so much about the blockchain stuff or the crypto stuff. I would just say, like, it's all just as tech. It's all just, like, programming. It's all just Cs people. Like, I think at least one thing I struggled a lot with when I first, like, came into the space is, like, all of the jargon and all of kind of the magic, like, dust that people would throw around, but it's really not that different from web two. You know, the systems are different, maybe the value systems are different, but from a technical perspective, if you're a good web two developer, you'll be a great web3 developer. So I wouldn't worry about that.
00:41:45.184 - 00:41:53.252, Speaker A: And I would just say, like, you know, just. Just get started. Like, I think, yeah, that's the short and sweet advice.
00:41:53.428 - 00:42:13.122, Speaker B: You pretty much nailed all the points that I truly think myself and. But anyways, man, it's great to have you on. Like, I know you've been insanely busy, so I'm just glad to be able to grab some of your time. And I'm sure everybody else who's watching this is also going to feel the same way. But thanks again, man, and we'll talk to you soon.
00:42:13.268 - 00:42:14.414, Speaker A: Cool, thanks, Chase. Bye.
