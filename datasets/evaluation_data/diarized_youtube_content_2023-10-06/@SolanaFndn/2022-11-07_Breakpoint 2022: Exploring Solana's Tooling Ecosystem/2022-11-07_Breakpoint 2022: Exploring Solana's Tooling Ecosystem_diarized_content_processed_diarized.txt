00:00:00.920 - 00:01:03.372, Speaker A: Hello everyone, my name is Jacob Creech. I lead developer relations at Solana Foundation. I will be going over the Solana tooling ecosystem. So at developer relations, one of the things that we focus on the most is improving the developer experience. How does a developer get to building a application as fast as possible? How do we improve the speed to developer success and get it as low as possible? How do we enable developers that are learning or brand new to be able to jumpstart and just jump into the ecosystem and start building? So there are a number of things that we've gone and what we can do is we can look a year back at the old tools so that we can appreciate where we are today with the tooling ecosystem that we have today. So we look back about a year ago, we have this Solana test validator. It's still an awesome tool to use today.
00:01:03.372 - 00:01:40.084, Speaker A: What you use this is to build and deploy local applications to your local environment so that you can test out how your programs work. You can test out like one, like do my instructions, run a bunch of things. With the Solana Cli, you can build, you can do a bunch of stuff. That's an awesome tool. Still a great tool today. We also had the create the SBL token CLI, still a great tool today. You can use it to create tokens, create the mint account, initialize your tokens in your account, transfer tokens.
00:01:40.084 - 00:02:22.066, Speaker A: It was a great setup and that's something we had and still have today. We also had the anchor CLI. So anchor was existent as a year ago. Or you could use this, you can also use it to build and deploy programs. You could use it to initialize a startup application so that you could use anchor with a front end and build your Solana programs with anchor. And then finally a year ago, NFts were just starting. And so you have the metaplex CLI as well as the Metaboss CLI that enabled developers to mint nfts, to manage their NFts and work with them.
00:02:22.066 - 00:02:58.268, Speaker A: So yeah, this is all great. These are all amazing tools and still great tools today. But this was just about it in what existed a year ago. There wasn't much else. So now let's look into some of the major tools that came out in the past year and how they work. Starting with my favorite one, Solana Playground. So Solana Playground, the way that it works is it is a web ide in order so that it allows you, and enables you to quickly jump into Solana development without having to install a single thing on your computer.
00:02:58.268 - 00:03:43.204, Speaker A: And this is incredibly powerful. So like if a new user wanted to try out Solana development and see okay, how does it work? How do I interact with programs? What kind of things can I do with Solana? They can just load up beta SolPG, IO, or Solana Playground and be able to quickly build their programs and see with any errors and also test them. There's a fancy little anchor functionality to where you can actually test with button clicks your program, which is amazing. It didn't exist a year ago. This is honestly my favorite tool that came out in the past year. So cool. So good for as developer relations to onboard new developers.
00:03:43.204 - 00:04:33.448, Speaker A: And so I did also mention that it is incredibly fast to build solana programs. So this is me building with the Solana Cli, a hello world program on my m one Max MacBook Pro, which is incredibly fast, supposed to be incredibly fast. Took 18 ish seconds to compile the rust program. You can grab a cup of coffee, you can come back, you can continue your hello world. You can imagine that once you have bigger programs, this would take a lot longer, like magnitudes longer. Now we check playground, same program, 400 milliseconds is, as I said, enabling developers to quickly get to developer success. I started hello world.
00:04:33.448 - 00:05:22.376, Speaker A: I compile, I try it out, and then the next moment I'm doing something with accounts, or the next moment I'm doing CPI calls to different programs. It makes the speed of development so much faster so that you can get to those really cool applications in the future. So no longer do you have to have a mini fridge looking computer or server in your home in order to offload your rust compilation times. You can just use Solana playground. Get it within less than a second, usually, depending on the program size, you don't have to rely on this beefy looking machine to actually get good speeds. Next up, let's talk about create Solana Dapp. So this is a CLI command that was created by someone on my team who's actually currently in the audience today.
00:05:22.376 - 00:06:11.028, Speaker A: And what you can use this to do is quickly bootstrap your Solana development environment with a basic app and multiple frameworks. So today it supports next, vue, svelte, and then anchor and native Solana. And what you can do is just you write a simple command and you're quickly enabled to like build on top of an app versus having to build your basic app. And next. And then learn how to do the wallet adapter and then learn how to add web3 js and do airdrops. It wasn't that great. So whenever you run this, you're greeted with like a very basic application of like hey, you can airdrop so that you can test out your, your application.
00:06:11.028 - 00:07:12.744, Speaker A: You can connect to a wallet so that you can test out like hey, how does my dapp interact with other wallets? And what does it look like whenever I'm sending transactions? Really cool. The next one that we'll go over is creating tokens. So I did mention a while back that hey, this SPl token CLI existed, still exists today and you can use to create tokens. That's great and all, but to view these tokens, it was a little bit difficult. The previous and a year back. The way that you did this is that you used a repository called tokenlist and added the token metadata or your logo, your name, your symbol, and a myriad of different additional information so that people can actually see, see your token on explorers, on wallets and just be able to understand what the token is. It's not just some weird looking string.
00:07:12.744 - 00:07:40.894, Speaker A: This is the old way of doing it. This is honestly a bad developer experience. It's a bad user experience, bad developer experience. And the minimum amount of time that it would take to do this is around 30 minutes because that's how often the CI CD ran for this. But it could take a lot longer to say if you're updating a token versus just creating a new token, this would take, you could take weeks. And that's just terrible. So let's look at the new way.
00:07:40.894 - 00:08:45.690, Speaker A: I mentioned Metaboss. Metaboss has now added functionality in order to create a metadata account and be able to display that information via explorers to wallets and more. So we worked with wallets, we worked with explorers to add the ability to grab the metadata from Metaplex's metadata program and be able to display it immediately. So you can do in a single line on your CLI to display, create tokens, mint your tokens to your token account, and so much more so in the single line. Suddenly you can create this little studious crabs token that I created in Devnet and you can see everything about it super quick. Takes as long as an optimized, as long as you feel like waiting for a confirmation, that's how long it takes. So you end up seeing this comically looking chart now of how long at the minimum it used to take for creating a token with tokenless and SVL token to now using metaboss, which still uses the token program.
00:08:45.690 - 00:09:20.138, Speaker A: It takes mere seconds at this point. All right, so next one we're going to go up is talking about Geyser. So I understand Geyser is a way to read data from Solana as fast as possible. So to understand Geyser, you have to kind of understand like what you had to do before and what some people still do today. So they use, a lot of people use like Git program accounts. It's an RPC call, incredibly expensive. For both the RPC, the user locks up a bunch of information on the RPC.
00:09:20.138 - 00:10:01.320, Speaker A: It's not that great. You could get something like 10,000 records from your program. Or if your program has a ton of different program data counts, good luck, it probably won't come back as an API call. And with Geyser, what you could do is you could have a validator, like a non voting validator, put a plugin, the geyser plugin on it, and output that data to your data store of choice. You can do it like a year ago, the only thing that existed, I think, was postgres database. So you could output all the data to your postgres database. You can build a microservice on top of it, and then it ends up being like what you're normally used to building applications.
00:10:01.320 - 00:11:05.040, Speaker A: You just have your database, your microservice, your front end, you expose it via restful API and you're good off to the races and build this very quickly. You could manage it. And since a year ago, you can actually, geyser plugins actually support multiple different outputs and interfaces, like Kafka, GRPC and more like, it used to be just postgres. So you can use what you're used to building your normal tech applications or your websites in highly scalable form, and use that to read data on Solana. So you can kind of get your web3, the capabilities with what you're used to with the web, two ish speeds. So as I said earlier, like, hey, this geyser plugin, you kind of like have to put it on like a validator or RPC node or non voting validator and output to a database. This is kind of, kind of high maintenance for some teams.
00:11:05.040 - 00:11:35.240, Speaker A: They can't really do this, especially starting out. So there are other avenues that you can actually get these capabilities without having to start your own validator, run it and test it out. So the answer to these today is actually what we call indexers. So indexers are basically like Geyser as a service. They allow you to expose an API. It's actually under the hood using geyser outputting accounts. And it's still doing that, just API.
00:11:35.240 - 00:12:40.824, Speaker A: So it's still doing the data store, the microservice exposed API, and then I, as a user or developer can just call that, get the information immediately and move on. So we can see that throughout like the past year, what the progression of getting highly available read speeds. On Solana, originally everybody was using get program accounts, basically unusable, terrible user experience, like 80 seconds per call depending on the call you're doing. So geyser where you get a little bit more, but it's a bit higher on the maintenance side. A lot of teams can't do that, especially starting out. It's a little bit hard to, as a developer, to reach developer success as fast as possible to now we have indexer solutions to where like, hey, I can just onboard to an API endpoint, get my API key and be able to read data incredibly quickly. So there's a number of other tools that were created, honestly, a ton of tools that were created this past year that I'm excited about.
00:12:40.824 - 00:13:06.234, Speaker A: These are just a few of them that are like really groundbreaking and enable developers a lot more. So to build on top of Solana. So there's actually, I'm going to highlight now one tool that I'm looking forward to coming out. Breakpoints. What I like to call breakpoints. At breakpoint, there's a user, the Twitter user's up there. He is building a way to do debugging applications via breakpoints.
00:13:06.234 - 00:13:53.934, Speaker A: So what you can do with this is you can just run your program locally, you can put your breakpoint there, and then you can replay your transactions locally and see how it interacted with that program, see what the state of your program was at different lines of your code, and be able to step through it. Like if you're familiar with c debugging, it's like GDB. It really is GDB under the hood with a lot of nice ux around it. You can see what data at a specific point was and be able to understand like, okay, I got this error. What did that error like, where did that come from? Why did I get it? Versus having to do your normal console logs everywhere or messages everywhere. That's incredibly powerful. Looking forward to when this finally comes out, just follow that user.
00:13:53.934 - 00:14:25.024, Speaker A: He'll obviously announce it when it comes out. So that's a lot of the tooling that is coming out. If you all have tooling that, hey, I'm really excited about building this, or I have built this tool and it enables developer experience a lot better. Feel free to reach out to me at any point in time. My name Jacob Creech. On Twitter, I'm jacob vcreach. I'm happy to help out, especially if you want to know what more opportunities there are in order to improve the developer experience at devrelations.
00:14:25.024 - 00:14:35.120, Speaker A: We're always happy to help. Thank you. We have time for questions. Yeah, we have time for questions. If anybody has any questions, we're running.
00:14:35.152 - 00:14:41.324, Speaker B: A little bit ahead of schedule, which is great. So if there are questions, there's a couple of mics set up here in the aisles. We can take questions.
00:14:43.024 - 00:14:48.364, Speaker A: Anything, right? Yeah, anything about tooling, anything, developer experience wise. Happy to help.
00:14:48.984 - 00:14:50.924, Speaker B: Come on down to the mic in the aisle. Yeah.
00:14:57.384 - 00:15:21.664, Speaker C: Hi, my name is Sebastian. Thanks for the intro talk. I was having one question about get program accounts and why they seem to be the request for get program accounts, why they seem to be limited for certain accounts like radium, as a perfect example, like the official RPC is limiting the abilities for getting program accounts for radio.
00:15:22.164 - 00:16:42.946, Speaker A: Why that is so some rpCs, like the public rpCs, I have Brian long right here who runs Triton. What they have is they have a bunch of programs, and you have programs that whenever they have tons of accounts, like, for example, metaplex metadata program. And if you're doing get program accounts on it, it's kind of insane because there's like millions upon millions of accounts, and you lock the state on the RPC and it's incredibly expensive, and it basically won't come back because the RPC limits, I think, is like 15 meg of data that can come back. So what happens is in order to improve the developer experience for everyone, they limit the amount of programs that you can use to a sub, like a subsystem amount of all of them. It's to the ones that, hey, you're using SPL token CLI, or you're using the Solana Cli and you're just trying it out so that people that, hey, I'm trying out Solana and trying to learn about it, they can do that in a very efficient manner versus having to go get their own RPC. Now, once they have the ability to know, like, hey, I want to dev on Solana, I want to build something a lot bigger on Solana, then they can go get their RPC and help fund that. There's plenty of other free options out there that allow you to do this.
00:16:42.946 - 00:16:45.282, Speaker A: Thanks. Thank you. Thanks.
00:16:45.458 - 00:16:46.334, Speaker B: This side.
00:16:47.074 - 00:16:55.110, Speaker D: Yeah, I was wondering if you have a blog post kind of version of this so we can reference this on our own time to build faster for.
00:16:55.142 - 00:16:55.998, Speaker A: All the different tools.
00:16:56.046 - 00:16:57.710, Speaker D: Yeah, yeah, that would be super nice.
00:16:57.902 - 00:17:19.332, Speaker A: I don't have the links available, but I can totally get them to you. I'll post something on Twitter with all the links of like the geyser, how to run geyser locally, how to do SPl token. Actually, I think SPl token is right after me, so you'll learn about that as well. Meta boss. I can post it all on Twitter and if you catch me afterwards, I can also help you find them.
00:17:19.468 - 00:17:20.372, Speaker D: Thank you.
00:17:20.548 - 00:17:23.584, Speaker B: Awesome. Anybody else?
00:17:27.364 - 00:17:30.124, Speaker A: All right, very cool. Thank you so much.
00:17:30.284 - 00:17:30.924, Speaker B: One more time.
00:17:30.964 - 00:17:33.804, Speaker A: Round of a, round of applause. Thank you.
