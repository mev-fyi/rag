00:00:05.400 - 00:00:23.734, Speaker A: Hello everyone GMGM. I'm Nick from the Solana foundation devrel team. In this video I'm going to go over how to use the metadata token extension on the new SPL token extension program. So you can see here I have versus code open. I have a blank directory. There's nothing in here. And I can go ahead and ls this directory nothing comes out so we know it's blank.
00:00:23.734 - 00:00:51.510, Speaker A: So the first thing I'm going to do is we're going to go ahead and initialize a project JSOn. So we're going to use yarnit y just to give us the defaults. We can see our package Json Json comes open and then we're going to go ahead and install all of our dependencies. So specifically I'm going to be adding typescript support and Solana web3 js, the SPL token package, token metadata and the Solana developers helper package in order to load some key pairs from my file system. Now that all of these have cleared.
00:00:51.542 - 00:00:53.998, Speaker B: Out, have actually installed, we'll go ahead.
00:00:54.006 - 00:01:29.330, Speaker A: And create a new file and we'll just name this mint tsunami. Let's go ahead and get to some coding. The first thing we're going to need to do is we're going to need to load in a key pair that has some Devnet soul, create a connection to the cluster itself, create our mint, and then we can actually fill in all the metadata we want. The first thing I'm going to do is go ahead and create that connection. Like I said, for this connection we're going to connect to Devnet. We can go ahead and load in the cluster URL for Devnet. Then I'm going to load in a payer key pair that's going to actually pay for all the transactions and the cost of storage on the Solana network.
00:01:29.330 - 00:01:33.770, Speaker A: And I'm actually going to use the helper library for this. And I'm going to load in the.
00:01:33.802 - 00:01:37.706, Speaker B: Key pair from the file system, get.
00:01:37.730 - 00:01:56.538, Speaker A: Key pair from file again from the Solana developers helper package. I just have to pass in a file path here. And this is relative on my file system. Now I have the Solana cli installed on my system so I can run Solana address. And you can see there's this nIc B 1D address and that's the Devnet address that I'm going to use to fund everything. I'm just going to load in that.
00:01:56.586 - 00:01:59.988, Speaker B: Particular key pair using JavaScript, using the.
00:01:59.996 - 00:02:08.504, Speaker A: Helper on Linux that's located in your home directory. So Tilda config Solana Id json.
00:02:10.564 - 00:02:10.852, Speaker B: Now.
00:02:10.868 - 00:02:27.684, Speaker A: That we have our payer and again, this actual address has some Devnet soul on it. So you can see that I don't need to do any airdrops in order to do this because I already have Devnet soul. If you don't already have Devnet Soul, you can go ahead and do an airdrop easy day. So next we're going to actually generate a new random mint. This is going to be the mint.
00:02:27.724 - 00:02:31.206, Speaker B: Address that our new mint that we're.
00:02:31.230 - 00:02:33.574, Speaker A: Going to create, our new token mint is going to actually hold.
00:02:33.654 - 00:02:36.434, Speaker B: So new key pair or key pair generate.
00:02:37.214 - 00:02:40.206, Speaker A: And just for the sake of logging this out, we'll go ahead and log.
00:02:40.230 - 00:02:42.054, Speaker B: It to the console just to show.
00:02:42.094 - 00:02:43.574, Speaker A: That we have addresses here.
00:02:43.614 - 00:02:53.766, Speaker B: So mint public key two base 58 and then we'll go ahead and do the same thing for our payer just.
00:02:53.790 - 00:03:03.606, Speaker A: To log out those addresses. So the next thing we're going to want is we're going to actually start filling in all the metadata that we're going to want to put into our metadata token extension. So we'll go ahead and create a.
00:03:03.630 - 00:03:06.502, Speaker B: New object, call it metadata, and we're.
00:03:06.518 - 00:03:23.670, Speaker A: Actually going to type this to the token metadata format, the interface that comes with the SPL token metadata package. And you can see we already have our type error because we don't have all the required information filled in. And you can see here with versus code, I can see all of the required fields that we need. So we have our mint address, our.
00:03:23.702 - 00:03:26.820, Speaker B: Name symbol, Uri and then some additional information here.
00:03:26.932 - 00:03:33.916, Speaker A: So we'll start with the basics. We'll put in our mint here. And specifically this is looking for the mint key pair or sorry, the public key.
00:03:34.060 - 00:03:35.148, Speaker B: And then we'll give it a name.
00:03:35.196 - 00:03:36.308, Speaker A: And in this case I'm just going.
00:03:36.316 - 00:03:40.572, Speaker B: To call this token opos and give.
00:03:40.588 - 00:03:42.304, Speaker A: It a symbol also opos.
00:03:44.404 - 00:03:49.424, Speaker B: In fact, I'll go ahead and update this to only possible on Solana.
00:03:50.164 - 00:04:14.948, Speaker A: And the last required piece of information that we actually need is our URI. Now this URi is typical JSON file that's going to be located off chain. So in our case I'm just going to load in this metadata JSON file that's stored within the salon developers Opos assets. It's just a generic JSON file has some information in it. That way the explorers will actually be able to display some information. Now the last thing that we're going.
00:04:14.956 - 00:04:18.124, Speaker B: To need within here is we need.
00:04:18.164 - 00:04:20.044, Speaker A: This additional metadata field.
00:04:20.204 - 00:04:22.116, Speaker B: Now this is required to be an.
00:04:22.140 - 00:04:25.556, Speaker A: Array by default and we have to initialize it as a blank array.
00:04:25.660 - 00:04:30.020, Speaker B: But this is actually one of the really cool things about token metadata and.
00:04:30.052 - 00:04:39.772, Speaker A: Specifically the token metadata extension on the token extension program is that this additional metadata is actually stored on chain. It's an account state on the Solana ledger.
00:04:39.868 - 00:04:41.620, Speaker B: So that way you can actually use.
00:04:41.652 - 00:04:44.964, Speaker A: The blockchain to access any and all of this metadata you have in here.
00:04:45.044 - 00:04:50.076, Speaker B: So it's pretty cool. So we'll fill in a couple of bits of information and this takes each.
00:04:50.100 - 00:04:58.504, Speaker A: Of these data, pieces of data within this additional metadata attribute here. It's just a key value, key value pair.
00:04:58.624 - 00:05:02.328, Speaker B: So we need our key here and our value here.
00:05:02.416 - 00:05:31.582, Speaker A: You could put any number of bits of information in here you want. You are going to have to pay for that rent when you actually create your mint. But with a script like this, super easy to do. So now that we have our metadata actually set up, we can go ahead and start doing all of the token extension magic here. So we're going to need to get a couple of bits of information. And specifically we need to know how much space we need to allocate on the Solana blockchain in order to actually use this extension. So we're going to go ahead and figure out what our mint space is going to be.
00:05:31.582 - 00:05:43.142, Speaker A: So let's get our mint space. And we actually can use some of the helper functions within the token extension packages or, sorry, the SBL token packages. And this helper function is called get.
00:05:43.198 - 00:05:46.102, Speaker B: Minlength or sorry, get mint length.
00:05:46.198 - 00:05:58.234, Speaker A: And this actually passes in an array of all the extensions that we're going to be using on this particular mint that we're creating. In this particular case, we're actually only going to be using the metadata extension.
00:06:00.334 - 00:06:02.126, Speaker B: So when we are calculating our mint.
00:06:02.150 - 00:06:15.606, Speaker A: Space, we just need the metadata pointer because this bit of information is going to be stored on chain. It's stored on the mint itself. So the next bit of information is we actually need to figure out how much space our metadata is going to take. So let's go ahead and calculate that.
00:06:15.630 - 00:06:16.194, Speaker B: Now.
00:06:19.774 - 00:06:42.940, Speaker A: With the token metadata extension, it's what's known as a variable extension type. So the actual length and the actual space that you need to allocate on chain is going to differ depending on the actual buffers. The buffer length of your, all the metadata you want to put on chain. So your Uri is a variable. This name is a variable length. This symbol is a variable length. So we actually have to calculate it.
00:06:42.972 - 00:06:45.396, Speaker B: Slightly different than we would calculate the.
00:06:45.420 - 00:07:16.304, Speaker A: Space slightly different than we normally would for all of the other token extensions. And specifically we're going to need a few bits of information here. We need the type size and then we need the size for the length. These two pieces of information, these are constant values that actually come from the SPL token package. These effectively think of these like a discriminator. So that way the on chain program is actually keeping a really big buffer of all of the data. You kind of think of it like that, that you're actually putting on chain.
00:07:16.304 - 00:07:24.608, Speaker A: And this makes it so it can be properly deserialized. So these are constants are actually two bytes each. So two bytes for the type length and two bytes for the length size.
00:07:24.736 - 00:07:25.752, Speaker B: So the next thing we need is.
00:07:25.768 - 00:07:45.816, Speaker A: We need to actually figure out the actual length of our metadata itself. So this metadata object. So from within the SPL token metadata package we can load the pack function. This is the helper function built in. And specifically we can pass this our metadata object. And it's just going to tell us the actual on chain space that is.
00:07:45.840 - 00:07:47.644, Speaker B: Going to be needed for this metadata.
00:07:48.114 - 00:08:06.954, Speaker A: Now that we have these two separate pieces of information. And note that they are separate for a reason and I'll touch on that in a second. We can actually ask the blockchain to tell us how many lamp ports we need in order to allocate our mint. So we can get our minimum balance for rent exemption.
00:08:07.074 - 00:08:09.170, Speaker B: And we need to use our mint.
00:08:09.202 - 00:08:11.250, Speaker A: Space and our metadata space.
00:08:11.282 - 00:08:13.468, Speaker B: So we can just add both of these together here.
00:08:13.666 - 00:08:38.496, Speaker A: Now we'll get our total Lan ports that we need. So now that we know how many Lan ports we need we can actually start building all the instructions that we're going to need in order to create our token with our metadata. So the first thing we'll need to do is we need to actually create the account on chain. So we need to initialize the account. So let's call this the Create account instruction. And we're going to open the system program class and we're going to get.
00:08:38.520 - 00:08:42.554, Speaker B: The create accounts function and we can.
00:08:42.594 - 00:08:45.658, Speaker A: Pass in all the required information here. Our from pub key is going to.
00:08:45.666 - 00:08:49.266, Speaker B: Be our payer pub key because this.
00:08:49.290 - 00:08:59.254, Speaker A: Is going to be the account that's going to pay for all of the transaction costs and the actual rent that we're actually going to need to store on chain. We're going to need our new account pub key. And this is going to be our mint itself.
00:08:59.754 - 00:09:02.018, Speaker B: We need to know the exact space that we need.
00:09:02.186 - 00:09:30.862, Speaker A: And this specifically is going to be our mint space. The reason why this is different, it's not our total space. Our mint and our metadata space is because with token extensions, certain token extensions are required to be implemented directly on the mint itself, like having a pointer such as the metadata pointer. These are required to be initialized before the mint is actually initialized and then after the mint is initialized and we'll go through that instruction here in a.
00:09:30.878 - 00:09:34.264, Speaker B: Moment, then we can actually deal with.
00:09:34.304 - 00:09:46.444, Speaker A: All of our actual metadata. So when you're working with token extensions, you actually have to make sure that you have the exact amount of space required for the mint itself when you are creating the initial account.
00:09:48.224 - 00:09:49.944, Speaker B: We need to tell it this instruction.
00:09:49.984 - 00:10:08.604, Speaker A: How many lan ports we need, and then finally we need to tell it the program id. Specifically, this is going to be the owner program for this account. Since we're using the token extension program, also known as Token 22, we we can pass in the Token 22 program id that also gets pulled in.
00:10:10.704 - 00:10:11.016, Speaker B: From.
00:10:11.040 - 00:10:18.284, Speaker A: The SPL token package. Now that we've created our account initialization instruction, we need to actually start.
00:10:20.184 - 00:10:20.576, Speaker B: Creating.
00:10:20.600 - 00:10:26.604, Speaker A: The other instructions that we're going to need to actually initialize our token. The next thing we're going to need is to initialize our metadata.
00:10:30.724 - 00:10:31.108, Speaker B: And we're.
00:10:31.116 - 00:10:55.652, Speaker A: Going to use this helper function that gets pulled in from the SPL token package. We can go ahead and start passing in all the bits of information we need. The first parameter that we need for this instruction is our mint itself. So that's our mint public key. The next one is our update authority. This can be whatever address you want. In my case, I'm going to set this just to the payer account since I'm loading that in from my file system.
00:10:55.652 - 00:11:15.660, Speaker A: The next one is going to be the actual address that's going to hold the metadata itself, the pointer to the metadata. Now one of the cool things about token extensions and the token 22 program is that the mint itself can be your metadata program. So we're actually just going to do that here. We're going to tell it that our mint public key is our metadata program.
00:11:15.812 - 00:11:18.388, Speaker B: And then we need to tell it.
00:11:18.436 - 00:11:27.784, Speaker A: Our whatever token program we want to use. In this case, we're going to use token 22. Now that we've initialized our metadata, we need to initialize the mint.
00:11:30.454 - 00:11:31.934, Speaker B: And again, we're going to use the.
00:11:31.974 - 00:11:35.114, Speaker A: Helper function for this create initialize mint instruction.
00:11:40.374 - 00:11:44.434, Speaker B: And with the createinitializement instruction helper function.
00:11:44.894 - 00:12:06.770, Speaker A: And with the createinitializement instruction helper, we're gonna pass in very similar parameters we did on the previous one, except for this time we're gonna pass in our public key first for our mint. The next one is the number of decimals we want. So I'm gonna put this at two decimals. And then the next parameter is the actual mint authority itself. In this case, I'm going to use my payer again since I already have.
00:12:06.802 - 00:12:09.254, Speaker B: That account set up and ready to go.
00:12:11.114 - 00:12:34.364, Speaker A: And then the next parameter is the freeze authority if we really want one. In this case, we don't need one. And the last parameter is the token program we're going to use. So now that we have these instructions set up, we can move on to the next one. And we actually need to initialize our metadata itself. And I'm actually going to change this to metadata pointer instruction because that's more explicit of what we're doing. So we'll go ahead and initialize our metadata account itself.
00:12:34.364 - 00:12:48.844, Speaker A: And this particular instruction for initializing the metadata is actually going to come from the SPL token metadata package. And this instruction is called create initialize instruction.
00:12:53.184 - 00:12:54.480, Speaker B: And again, you can see right here.
00:12:54.512 - 00:13:03.530, Speaker A: It'S coming from SPL token metadata. But it takes very similar parameters to all the other instructions we've already dealt with, except for this one is in.
00:13:03.562 - 00:13:05.874, Speaker B: An object notation so we can pass.
00:13:05.914 - 00:13:27.138, Speaker A: In all the details that we need. The first thing is our mint itself, which, like you guessed it, is our mint public key. Now we need our metadata account itself. And like I mentioned earlier, because we're initializing our mint to be our metadata account, this is also going to be our mint public key. Then if we need to provide a mint authority, in this case we're using.
00:13:27.186 - 00:13:30.146, Speaker B: Our payer public key since we already have that.
00:13:30.250 - 00:13:33.946, Speaker A: And now we can actually pass in the metadata information that we want.
00:13:34.090 - 00:13:36.330, Speaker B: So since we already have set up.
00:13:36.362 - 00:14:03.662, Speaker A: Our metadata object up here, I'm just going to use these same exact values. So this name is going to be metadata name. And then we can get our symbol, which is, you guessed it, metadata symbol. And again our uri metadata uri. And then finally we need our program id which is going to be our.
00:14:03.718 - 00:14:07.638, Speaker B: Token 22 programid constant and the update.
00:14:07.686 - 00:14:39.958, Speaker A: Authority which is our payer public key. So now you can see our type errors have gone away. We have all of our required information in here. And notice here on creating this initialization for the metadata itself using the name, symbol and uri from our metadata object up here, we're not actually utilizing any of these additional metadata fields, the on chain metadata, because the way that the SPL token metadata program and interface works is you actually have to initialize each of these in a separate instruction.
00:14:40.086 - 00:14:41.366, Speaker B: So we can go ahead and demonstrate.
00:14:41.390 - 00:14:46.876, Speaker A: How to do that with just one of these fields. So we'll call this say update metadata.
00:14:47.030 - 00:14:57.444, Speaker B: Field and we're going to pull in the create update field instruction.
00:14:57.944 - 00:15:10.364, Speaker A: And this instruction helper actually comes from the SPL token metadata package as well. And we can pass in all the information we need like our metadata account which is our mint public key.
00:15:11.224 - 00:15:13.784, Speaker B: We need our program id which is.
00:15:13.824 - 00:15:23.018, Speaker A: Token 22, the token extension program, the update authority. And this one is super important. This needs to be the exact same update authority that you have on your.
00:15:23.066 - 00:15:27.098, Speaker B: Mint or sorry, on your metadata pointer.
00:15:27.186 - 00:15:29.458, Speaker A: So when we initialize our metadata pointer.
00:15:29.546 - 00:15:32.122, Speaker B: We'Re saying our payer public key is.
00:15:32.178 - 00:15:46.654, Speaker A: Our actual metadata update authority. Same thing right here when we're actually initializing the metadata account itself is the update authority. This is the authority that must sign every single time you want to manipulate any of these on chain metadata fields.
00:15:47.084 - 00:15:48.388, Speaker B: Speaking of the fields, we can actually.
00:15:48.436 - 00:16:01.708, Speaker A: Pass in the information that we want. So like I mentioned, each of these fields you have to update them individually so we can pull them directly from our metadata additional fields. In this case we're just going to grab the first item and the first.
00:16:01.756 - 00:16:05.996, Speaker B: Item at index zero and do the.
00:16:06.020 - 00:16:37.202, Speaker A: Same thing for the value, pull it in from the metadata additional fields. This is the first item in the array and our second item in the array here. So if you look at our additional metadata, the way that this is being structured here is we're pulling in the entire array. Since this is an array, every single item inside of the array is again a nested array. So we have our index zero is our key and our index one is our value. And you could do the same thing for multiple pieces of on chain metadata if you want. You can do the same exact thing.
00:16:37.202 - 00:16:51.438, Speaker A: You'll just have to create a separate instruction and actually include this instruction every time you want to manipulate it. So if you wanted to have two on chain metadata fields, key value fields, then you could have a second instruction do this as index one, index one.
00:16:51.566 - 00:16:52.934, Speaker B: And so on and so forth.
00:16:53.094 - 00:17:16.196, Speaker A: With that we actually have built the very last instruction that we need. So we can actually put all these instructions together in a transaction and send it to the blockchain and actually get it confirmed. So let's create a new transaction loading in from web3 js and we'll use the add function, the add method in here. So we'll pass in every single one of the instructions that we built out, we'll just go ahead and copy and paste them.
00:17:16.220 - 00:17:17.744, Speaker B: So create account instruction.
00:17:20.804 - 00:17:21.940, Speaker A: Initialize our metadata.
00:17:21.972 - 00:17:23.104, Speaker B: Pointer instruction.
00:17:26.564 - 00:17:28.064, Speaker A: Initialize our mint.
00:17:34.644 - 00:17:41.998, Speaker B: Initialize our metadata and update our metadata field. Now the important thing to note here.
00:17:42.046 - 00:18:13.984, Speaker A: Is that the order of your initialize mint instruction is very very important when you're working with token extensions. Some token extensions need to be initialized and set up before you initialize the mint. So for example, this metadata pointer instruction, this has to be ordered before your initialize mint instruction. If the order was changed here, this transaction will fail. It'll kick an error by the SPL token 22.0 program. So it's very very important that it's in the correct order after you have initialized the mint within the instruction.
00:18:13.984 - 00:18:28.452, Speaker A: You can see here we're initializing the metadata account, the metadata data itself, and then we're updating those fields. These can be after you've initialized the mint. In fact, they're required to be after because the mint hasn't been initialized. If you switch that order, this is.
00:18:28.468 - 00:18:29.748, Speaker B: Very very important to do.
00:18:29.876 - 00:18:58.520, Speaker A: So now that we have our transaction built, we can go ahead and send it to the blockchain and get it confirmed, display it back out. We'll do a send and confirm transaction and this function takes in our connection object first and then our transaction itself. And then it's going to take in an array of all of our signers. In this particular case, we need to sign with our payer that we loaded and the mint itself. So we have these two key pairs we're passing in.
00:18:58.632 - 00:19:00.352, Speaker B: It'll sign it and then once this.
00:19:00.368 - 00:19:07.518, Speaker A: Is completed, we'll go ahead and console log it. And we'll go ahead and log out.
00:19:07.606 - 00:19:09.074, Speaker B: Just the signature itself.
00:19:12.334 - 00:19:42.886, Speaker A: Now that once this transaction has actually been confirmed by the blockchain, we can actually use some of the helper functions inside of the SPL token metadata program to actually get that metadata back. In order to do this, you need a couple of bits of information. Specifically, you need your connection to the exact same cluster, in this case Devnet, that we connect it to. And then you just need the mint address because that's the address that we actually put our metadata on. Our metadata lives on our token mint. So we'll go ahead and log out.
00:19:42.950 - 00:19:47.942, Speaker B: This call it chain metadata and we're.
00:19:47.958 - 00:19:49.750, Speaker A: Going to use the get token metadata.
00:19:49.782 - 00:19:50.474, Speaker B: Helper.
00:19:53.254 - 00:19:54.790, Speaker A: And we pass in our connection.
00:19:54.902 - 00:19:58.562, Speaker B: And then our mint public key and.
00:19:58.578 - 00:20:23.990, Speaker A: Then we can go ahead and log this out. Now that we have this entire script written, we can go ahead and open up our terminal. And I'm going to use Esrun to actually run this script. So if I run Esrun, since I have it installed globally, and if you don't have it installed globally, you can do NPX Esrun. And we're going to tell it to use our mint script. It's going to go through, you can see the same payer address. We have this randomly generated mint address called Day JK.
00:20:24.102 - 00:20:27.294, Speaker B: It's a great address that's been randomly generated for us.
00:20:27.414 - 00:20:32.166, Speaker A: And then it looks like it's kind of hung right here because it's actually sending all the information to the blockchain.
00:20:32.270 - 00:20:33.606, Speaker B: But as soon as that's done, you.
00:20:33.630 - 00:20:45.034, Speaker A: Actually have the metadata displayed out right here. So we have our name, our symbol and our Uri. It's the same information that we put on chain. And then we have our additional metadata that was actually stored on chain.
00:20:45.414 - 00:20:46.086, Speaker B: So there you go.
00:20:46.110 - 00:20:58.054, Speaker A: There you have it. That's how to actually use the Token metadata extension on the token extension program. Hope this video was helpful. And check out the rest of the token extension videos on the Solana Foundation YouTube channel. Thanks. Have a good one.
