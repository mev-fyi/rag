00:00:03.280 - 00:01:09.664, Speaker A: Hi everyone. Thanks for listening to us today. I'm Thomas leading Rosat squads, and today I, Valentine and Vova are going to talk you about account abstraction on Solana and how we make it easier with Squad's protocol and all the projects we've built around it. So Valentine is going to start talking about the basics of icons abstractions on Solana and how it natively supports it with this account architecture. Then I'm going to talk about Squad protocol, how we make easier for developers to leverage account abstraction on Solana and enable much more use cases for Dapps and any applications built on Solana. And lastly, Vova is going to talk to you about Fuse, the first smart wallet on Solana, how it leverages Squad's protocol and all the features it's possible thanks to account abstraction on Solana. So now I'm going to let Valentine present you the basics of account abstractions.
00:01:11.884 - 00:01:50.584, Speaker B: Yeah. Hey guys, thanks Thomas, for the introduction. So yeah, I'm Valentin, I'm leading growth, sorry, I'm leading integrations here at squads. I'm going to give you a quick overview on how account abstraction on Solana works, how it works technically. So I'm going to do a very small talk on the technical side and also talk about how it's supported on Solana since the inception on the network. So account abstraction is a very complicated welding. Many guys don't know what it is.
00:01:50.584 - 00:02:32.814, Speaker B: So to explain it, I think it's cool to give you guys a little comparison between wallets that you guys are used to today and account abstracted wallets. So a wallet that you guys are used to today, like for example on your phone or as an extension in your browser, consists of just a keeper. So it's a private key and a public key. And this private key has a seed phrase that you guys know. It's twelve or 24 words and it's a single point of failure. So if you guys lose or use your seed phrase, or it gets compromised, you basically lost your funds. Or you can lose your funds.
00:02:32.814 - 00:03:31.564, Speaker B: So an account abstracted wallet essentially enables you to have custom additional security on top of your wallet. This is thanks to programs on Solana. So it's called also smart contracts on Ethereum. And this program will decide who can access funds or execute transactions, how to access funds and execute transactions, and also set custom security measures for that access of funds. A cool example that I like to give in that case are spending limits. For example, don't want to spend more than $100 per day? You could set a spending limit in your smart wallet to 100 USDC per day. So talking about smart wallets, we have a quick overview here behind me.
00:03:31.564 - 00:04:34.940, Speaker B: A smart wallet or a smart account is just owned by a program, by a smart contract. It can perform any custom logic that a developer wants. So this enables, like I said before, things like spending limits, also shared pockets. And what I find really cool is that you can't do that with traditional wallets like the one you probably have on your phone right now, because you don't want to trust your friends or family members. Some do, but not everyone would would like to with your seed phrase. Let's get to the customization aspect for developers and how they can design their own account structures. So yeah, they can set custom schemes for additional security for smart wallets and the key products and features that you can build on top of account abstraction is multisigs.
00:04:34.940 - 00:05:26.428, Speaker B: We add squads are the leading multisig platform on Solana. They have social recovery. So let's say you have a seed phrase, but you also want to have a social recovery with your Google account, for example, in case one day you lose your seed phrase and you'll be able to access your funds using your Google accounts again. And then the third point that we have here, there's many more of course, is two factor authentication. And it's very similar to how social recovery works. Let's get into a quick technical aspect and also I'm going to show you how Solana supports account abstraction since the inception of the network, which I find really, really cool. So here we have a smart wallet that's owned by a user.
00:05:26.428 - 00:06:03.074, Speaker B: So the user has 1000 USDC in their smart wallet and he wants to send 500 of those USDC out to another user. In this case it's Stepan Sol. He's going to call our custom program that will power account abstraction with these instruction parameters. I want to send 500 USDC, etcetera. This custom programs owns a PDA, it's a program derived address. Essentially it's the program that owns an account. And this program will be the only one that can make changes or even delete that account.
00:06:03.074 - 00:06:46.556, Speaker B: So you can see that the transfer authority in that smart account is the user, which is a public key, and the spending limit is 1000 USDC per day. The smart account balances are 1000 USDC. And to solve now, the custom program logic that I or another dev has written for that flow is that there will be some checks. In this case, it will check if the signer's public key. So if the one that is interacting with our smart contract is really the one that owns the smart account. So that's me in this case, I own the smart account. So it's good.
00:06:46.556 - 00:07:32.114, Speaker B: It checks a passing and then if the send amount is, if the send amount is bigger than the spending limit, it will return an error because we don't want to spend more than the spending limits daily. This then is going to be make, is going to make a CPI to the token program. So on Solana, there's this thing called cross program invocations, where you interact with another program from your own program. It will create a cross program invocation to send 500 USDC from the smart wallet. The smart account is going to sign this cross program invocation and it's going to send it to Stepan Dotol, which is the wallet we wanted it to send to in that case. So yeah, that's all for me and I'll leave it up to Thomas again.
00:07:32.274 - 00:08:26.758, Speaker A: Thanks Valentine. So as we've seen, Solana natively enable icons abstractions to work and through pdis, and to make it even better for developers to leverage these features enabled by icon abstractions, we've built squats protocol, which enable a much better experience for developers. So I'm going to talk to you about squats protocol. What is it exactly and how it looks like. So squats protocols, you can see squats protocol as the base layer where other projects and programs can be built on top of it. So the most known program so far is V three, which we call now squads legacy. It was the first multisig formally verified on Solana, and it has been used by all the biggest teams and organizations.
00:08:26.758 - 00:09:57.948, Speaker A: It helps secure over 600 million in value and it's immutable also. Then we recently built V four, which is a new multisig program for Solana, which goes way beyond what V three enables. And this is where squad, the new app is built on Squad X or Multisig extension wallet, which allows you to connect your Multisig to the Solana ecosystem and fuse. And then we have the module program which goes beyond the simple features of Multisig and enables you to really create, to set up your rules, to customize really your multistick setup. And this is where the transactions authorization policy enter the picture and it will really allows you to create any kind of setup you want on chain around multisig security. And finally, squatch protocols really allow you to deploy easily PDA's on Solana we call them SPDA for squads protocol, and you can more easily leverage all the account abstractions features that val presented to you. And in terms of security, when you use squad protocols, your project, your app inherit all the security measures we've taken.
00:09:57.948 - 00:11:17.824, Speaker A: So squats protocol has been audited by Autosec, Neodym, trail of bits and Celtera, and also formally verified two time so by Autosec and Certora. In terms of what you can build with squats protocols, what are the main applications? We've categorized several use cases, so the first one, the most known, is multisig. So this is what squads is. It's also leveraged by other teams project Consolana, like PiS, that use it for their governance, and it basically allows teams organizations to manage their assets collectively on chain. But there's other use cases that we're starting to see coming up. For instance, for DeFi protocols, they can build on top of squatch protocol and enable the same features, the same experience as what you can find on centralized accentures. Fintech apps enable new security features like two FA spending limits, things that you are already familiar with, but that are yet not really popular on chain.
00:11:17.824 - 00:12:24.354, Speaker A: Same for wallets. They can also enable things like subaccounts, enable people to share accounts to really matches the features you can see with neo banks, with all those solutions, but with the benefits of blockchain technology such as self custody and more. And lastly, we also have what we call techno optimist use cases where we think that this is just the beginning and that account on Solana powered by squats protocol will enable to really compete against centralized projects and offer a much better experience and also better security for end users. And now I'm going to introduce what also we've been working on recently for mobile users and how it basically showcases what is possible to create with squads protocol on Solana so this is Fuse.
00:13:05.774 - 00:13:48.274, Speaker C: Hey everyone, my name is Vova and I'm the lead product engineer for Fuse. Fuse is a mobile first PDA based wallet built on top of Squad's protocol. For each fuse wallet, we have a squad deployed with three keys and two out of three thresholds. The first key is always kept on your device. It is secured with your biometrics. The second one is stored in your iCloud, and the third one is used for recovery. And that one can be your ledger, your phantom, a custodian wallet, like a two FA provided wallet or whatever.
00:13:48.274 - 00:15:26.504, Speaker C: We're building Fuse primarily for retail users who are seeking an alternative for cold storage when it comes to keeping their Solana assets, but they also want more recoverability for their self custody setup. So basically, Fuse is made possible by the latest features of the latest version of Squads Protocol V four and some of its new features which are like for example, we use the V four permissions to make sure that the recovery key, for example, only has the bare minimum of permissions necessary for it to function. This key is normally going to be managed not by you, or maybe by you, but it can be managed by a third party. So that's why it's important to make sure that it can only vote on new transactions, but not cannot create new ones or execute ones. Then also we're leveraging spending limits feature for the fuel layer feature, specifically of the wallet. The fuel layer makes your experience way smoother by removing the needs in any of the three keys to have NSO on it. So basically, all of the fees, rental fees and transaction fees will be covered by your smart wallet account, the main one.
00:15:26.504 - 00:16:21.946, Speaker C: And this is what spending limit allows to implement. Okay, so basically, let me explain real quick how it works. So, as I mentioned, we have three keys and we only need two signatures to sign to do like any wallet action. Normally two out of three are always on your device, your device key, and you always, almost always have access to your icloud key if the Internet is there. So you can send any funds, for example, by just signing that transaction with the device and your cloud key. But why do we believe that use has a better story for recovery? It's because now you can lose one of any one of the three keys them and still be able to get access to your funds. Let's imagine you lost.
00:16:21.946 - 00:16:55.114, Speaker C: The most obvious one is you changing your iPhone. You cannot migrate your device key to the new one because it's guarded behind your biometrics. And as you might know that on iOS, you cannot just migrate to biometrics. You have to reset up everything from scratch. Essentially, you need to create a transaction that will remove your old phone key and onboard the new one. And you can still do that with the other two keys with your icloud key and the recovery key. Another example would be you losing your access to your icloud account.
00:16:55.114 - 00:17:44.434, Speaker C: In that case, again, you have the other two ones. Most likely your device can recover a key, you can still restore access. And obviously swapping a recovery key is trivial because you already have the other two keys on your device. Why we believe it's more safe than just using a regular software wallet or even like a ledger, potentially for daily interactions, is because it is way harder to lose access. Well, basically to steal two keys rather than one. As I mentioned, the first one is basically, it's isolated completely by the operating system, and access to it is guarded by iOS, so it's almost impossible to steal that one. The iCloud key is also secured with end to end encryption and the rest of the stuff.
00:17:44.434 - 00:18:19.234, Speaker C: But let's imagine people get access to their icloud key. They still cannot do anything because they need any of the second keys of the other two. And obviously same goes about the recovery key. Yeah. So this is basically what we have for you today. We're starting with fuse, we're starting with iOS, and later rolling it out to Android and saga. Fuse is currently in test flight with a public release slated for early next year.
00:18:19.234 - 00:18:38.854, Speaker C: We feel like this product takes us much closer to the world with self custody, where self custody is becoming manageable and easy to use. Thank you for attending our presentation. I hope you enjoyed that and see you next year at breakpoint.
