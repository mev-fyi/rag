00:00:00.720 - 00:00:15.434, Speaker A: GMGM. I'm Nick from the Solana foundation dev rel team, and today I'm joined with a couple of awesome engineers. We're gonna be talking about Solang. So I'm joined with John, also from the Solana Foundation Devrel team, and then Shawn and Lucas from Solana Labs. How you guys doing today?
00:00:15.934 - 00:00:17.554, Speaker B: I'm good.
00:00:17.894 - 00:00:27.806, Speaker A: All right, let's go ahead and just dive right in. So we're gonna be talking about Solang and what it is and why people should care. So I guess, first question to you, Sean, like, what is Solang?
00:00:27.950 - 00:01:04.734, Speaker C: So on Solana, you can write contracts in rust and in c right now. And we've been working very hard to add another language to that set, solidity. So there are many solidity developers around, and solidity is one of the most popular programming languages for smart contracts. And up to now, that wasn't available on Solana. We've been writing a new compiler to, to make that happen. And this has been a lot of work, and we've been working on this for a few years, but now we're really ready for it to be used.
00:01:05.914 - 00:01:13.774, Speaker D: So overall, that means Ethereum developers can now build on Solana directly using solidity. Does that sound right?
00:01:14.674 - 00:01:43.574, Speaker C: Yes, it does sound. Yes, that's absolutely right. There are differences between Ethereum and Solana, and there are differences in some details how you would write your solidity code, but the language is the same. There's just some built in functionality, which is different on Stalin than solidity. So if you have an existing solidity contract, you will probably need to do a little bit of porting to make it work on Solana.
00:01:45.544 - 00:02:05.320, Speaker A: Existing solidity programs, you can't just necessarily deploy directly. You might have to make some changes just based off of purely the technical differences between Solana and solidity, or EVM for that matter. So you can't necessarily. There's some limitations of the exact code that ports over, is that what you're saying?
00:02:05.512 - 00:02:06.808, Speaker C: Yes, that's absolutely right.
00:02:06.936 - 00:02:08.392, Speaker A: Can you give us some examples?
00:02:08.568 - 00:02:44.596, Speaker C: So, a very simple example is, and when you use a value or balance in Ethereum, that's a 256 bit value, and on Solana, that's a 64 bit value. So you need to use a different type. So you just need to change the types in your solidity code. For that. An address on Ethereum is 20 bytes and on Solana is 32 bytes. So again, a little bit of porting needed to make sure that still works. The way Solana works is quite different than Ethereum.
00:02:44.596 - 00:03:23.134, Speaker C: Solana is designed for speed and low latency. And that speed is achieved through concurrency. And one way that is done is that accounts are kind of split. So in Ethereum, a single account can have code, data and value attached to it. But on Solana, those will be free, separate accounts. You have one account for the code, one account for the data, and one account for the value. So this means that some code will have to be rewritten to split what is assumed to be one account into several different accounts.
00:03:23.134 - 00:03:40.084, Speaker C: There are also things that makes life a lot easier. So there's, for example, there's a print function, and with print, you can, you can simply provide some text and it will be added to the program log. And this makes debugging a lot easier.
00:03:40.504 - 00:03:55.208, Speaker D: So it sounds like currently Solang enables EVM devs to build on Solana. However, they'll still need to pick up some of these Solana concepts, such as the token program, the account model, et cetera. Correct, because it's not a direct port.
00:03:55.376 - 00:04:31.810, Speaker C: Yes, that's right. You're still using language, but the underlying concepts of Solana aren't sort of hidden. Anyway, you still need to use those. So, for example, the way you upgrade contracts on Solana is you can upgrade the program account. And on Ethereum, you would use a proxy account, which then redirects the call to the latest version of the contract. And on Solana, none of that is needed. You can simply upgrade the program code separately, and that can be done natively on Solana.
00:04:31.810 - 00:04:38.734, Speaker C: So that makes life much easier. It does mean that existing upgrade codes need to be removed.
00:04:39.114 - 00:04:55.174, Speaker A: Okay, got you. So it's kind of like an implementation detail of, you just have to design your solidity code. Like, you have to make some relatively minor adjustments, but there are some adjustments you have to make. You have to, you know, implement it with Solana in mind, I guess, is the idea, right?
00:04:55.874 - 00:04:57.466, Speaker C: Yes, yes, exactly.
00:04:57.530 - 00:05:11.334, Speaker A: Okay. And is, I guess, to Lucas then, is Solang production ready? Like, can I, as a developer, if I know solidity, which, you know, could I just deploy my solidity contract right now to the Solana blockchain?
00:05:12.554 - 00:05:53.338, Speaker B: Yes. We've been working for a few years on making Solang work seamlessly with Solana, and only recently we reached a higher level of maturity and we had our code audited to, a code audited by a third party company. And this audit helped us find points for improvement and certify that we are prepared for a launch. In addition, we are adding new features to the solidity language to better help developers write contracts for Solana using solidity because now solidity was mainly developed for ethereum, and, well, specific Solana syntax is it wasn't originally available in solidity.
00:05:53.506 - 00:06:19.510, Speaker C: So further to that, the audit that was done, that was done by the same company that audits Solana core itself. We've had three separate audits. Two have already completed. The third one is underway and will be completed in, in the next few weeks. So this gives us a high level of confidence that this is production ready.
00:06:19.702 - 00:06:35.638, Speaker A: Yeah, I like it. So it's multiple audits in progress, or some might already be done. It's actively being built. More and more features, more developer tooling, that sort of thing. So it's an active effort is, I guess, the idea.
00:06:35.806 - 00:06:42.254, Speaker D: Lucas, I know you've been working on a lot of updates to how accounts management is done with Solang. Can you tell us a little bit about that?
00:06:42.994 - 00:07:18.674, Speaker B: Yes. So when you call a program on Solana, you need to specify which account you want, that transaction is going to use. And also right now there's no way to do. To do that, we are working on introducing annotations to functions so that you can declare that, assign your account or a mutable account that your function is going to need. Our goal that is to make life easier for developers so that they don't need to specify that account both in the counter rate and pass it as a function argument.
00:07:19.174 - 00:07:24.798, Speaker D: So overall, this would really simplify the process of interacting with the contract from the client, right?
00:07:24.886 - 00:07:26.114, Speaker B: Yes, exactly.
00:07:26.694 - 00:07:45.774, Speaker A: Okay, cool. Yeah, so I love this as an idea. It's just more and more expansion for the Solana ecosystem, more developer tooling, developer optionality, really. I guess my last question is, what's the best way as a solidity developer to dive in and actually start using Solang?
00:07:45.934 - 00:08:15.026, Speaker B: Well, right now to use Solang, you need to download the Solana command line tools. It will automatically install Solang for you. And you can also use the anchor framework. Having anchor, you can install the latest version, the zoom. You can just type anchor init, which will create an example contract for you. And then you can just use all the anchor tool anchor functionality like anchor build and anchor deploy to deploy your contract on chain.
00:08:15.170 - 00:08:42.144, Speaker C: You can even add a utility contract to an existing rust anchor workspace. So if you have an anchor workspace with some rust programs, then you can add a Citi context to that with anchor program, I believe. And then you can have, in your workspace, you can have a mixture of brush contracts, ancillity contracts, and all of them just will work together.
00:08:42.804 - 00:08:59.360, Speaker A: Yeah, that's cool. That's cool. I love that. All right, well, I guess we'll go ahead and wrap this video here. This has been such a great chat. And naturally, we'll have links in the description for the Solang repository and how to find out more information, how to actually get started. So thank you all so much for joining us.
00:08:59.360 - 00:09:04.224, Speaker A: And for all the listeners and all the watchers, check out Solang. Let us know what you think. Thanks for watching.
