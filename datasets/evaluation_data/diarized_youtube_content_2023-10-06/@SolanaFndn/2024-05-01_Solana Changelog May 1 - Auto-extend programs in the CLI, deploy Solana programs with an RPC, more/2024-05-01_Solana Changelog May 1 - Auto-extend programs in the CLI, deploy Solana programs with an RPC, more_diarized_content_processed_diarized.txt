00:00:03.840 - 00:00:08.329, Speaker A: Welcome to this week's Changelog. My name is Jacob and I'm joined today by Nick. How's it going today, Nick?
00:00:08.417 - 00:00:11.617, Speaker B: Hello. Hello. I'm doing well. Excited for the Changelog as always.
00:00:11.801 - 00:00:39.087, Speaker A: Yeah. So let's jump right into it. So this week's Changelog, what we're going to talk about first is the proposal change. So this was actually a previous proposal that was merged in. This is SIMD83, which is relaxing entry constraints. What you can tell here and what this change was is that it actually adds like a feature gate and you can use this to go look up the featuregate and the implementation work being done on each individual simd. So this is just kind of like an FYI.
00:00:39.087 - 00:01:04.925, Speaker A: If you're ever looking for where a SIMD is in implementation or how it's being worked on today, you can always just check the simd. If it has a feature gate, you can go look it up and use that to figure out where exactly it is. In the process. It'll tell you if it's deployed to testnet, Devnet, mainnet, if it's even the code completion, all sorts of things. So definitely check that out if you're ever interested in where SIMD is. And then, Nick, what kind of commits did you see this week?
00:01:05.345 - 00:01:39.395, Speaker B: Yeah, there were a lot of exciting commits this week, especially around the cli. This is probably my favorite one, the Auto Extend program. This was something that we talked about many moons ago when the ability to extend programs and resize programs like became a thing. Once that feature was activated and now a community member open to PR and it's merged where it will auto. The CLI will actually auto extend programs as needed every time you deploy your program. So it's just like a developer improvement, developer experience improvement and nice quality of life. So good.
00:01:39.695 - 00:02:29.339, Speaker A: Yeah, this is awesome. And for those that don't know previously when you deployed a program, it did 2x the amount of space that your original deployed program was. And if you try to deploy programs bigger than the size of the currently allocated space, it would error out. And so this fixes that and actually makes it to where you don't have to think that's what I want developers to do when they're building, not have to think about these little issues, talking about other little issues. Deploying programs has also changed. So if you've noticed recently when you've tried to deploy programs on mainnet, you might have had a little bit of an issue. This is around because of all of the stake weighted quality service stuff as been Going on, making it so that RPCs have virtual, virtual amounts of stake on them and then those virtual amounts of stake give them some x percent of the block.
00:02:29.339 - 00:03:23.013, Speaker A: Otherwise you would get those 20% free for all amount of the block for anybody that's an unstake connection. It made deploying programs a little bit harder because it was trying to just. The CLI was trying to just hit the TPU of whatever the current leader is, making sure that you're always under the unstate connection pool. This change on the CLI by John allows you to use the RPC of your choice or use an RPC that's in your config to deploy in write buffer and quick note on deploying programs. If you want the best way of deploying a program, you would use this plus the flag that does the write buffer. So you reusing the write buffer every time so that if you run out of those retries that everybody's worried about, you can just use the same write buffer and it will continue where you left off and you have no loss of completion on the deployment. Awesome.
00:03:23.013 - 00:03:26.493, Speaker A: Another awesome developer experience improvement.
00:03:26.669 - 00:03:56.915, Speaker B: Yeah, all the program deployments and all deployments are great, especially Turbo. Turbo is super cool. Shout out to Turbo and the Turbo game jam that was just announced. By the time that this changelog episode actually goes live, the game jam will have already started. But if you don't know, Turbo is a Rust based Solana focused game engine so you can build on chain games using Rust and it's super cool. It's built by someone in the community and they're doing a game jam. So if you're interested in game jams, check out turbo@turbo.computer
00:03:56.915 - 00:03:59.987, Speaker B: and check out their docs and participate in the game jam.
00:04:00.171 - 00:04:26.271, Speaker A: Yes. And if you do participate, please stream your development or post on Twitter about your development. We love to see the changes that you've been making and the progress you've made trying to build a game. We might have some people on the developer relations team here at Slanted foundation also streaming. That's true, that's true. So it'll be fun to join together. Another Note is the 118 release schedule, just as a FYI, looks like it's getting moved back a little bit.
00:04:26.271 - 00:04:55.189, Speaker A: This is because of all the different changes that have going into the congestion issues on mainnet. So previously the target date was around. Well the first one was around April 1st got moved and then it got moved again. Um, so right now it looks like, let's see, it looks like they're they're targeting May 27th. Now this can always move depending on whatever issues that are that are coming up. We just need to follow this. So if you're following along, just check if the dates are being hit.
00:04:55.189 - 00:05:29.865, Speaker A: So the next one is what? For April 30, for doing the upgrade candidate. So you can see if an upgrade candidate gets cut and then see if TestNet gets upgraded to that upgrade candidate on May 6th. So as long as those start hitting along, you can trust this type of timeline. Now as a note, this timeline will also not be completely a hundred percent true when you get to mainnet because there's no one button to deploy everywhere. It's up to the validators to choose what version they deploy to. So that could take up. We've seen it take a week before.
00:05:29.865 - 00:05:32.741, Speaker A: So this is just a recommendation.
00:05:32.893 - 00:05:41.693, Speaker B: Yep. All these recommendations are. All these timelines are recommendations. They're best guesses and decentralized network. It takes buy in for people, so it sometimes gets delayed.
00:05:41.789 - 00:06:12.325, Speaker A: Yep. And then moving on to the Stack Exchange. So this is the Stack Exchange rankings this past week. We see a lot of new people here or previous, actually previous contributors. So we see like Chelida and Mark White Seal has always been doing it Nobile. These are people that are contributing to Stack Exchange. So as usual, if you are contributing, if you're wanting to help contribute to the ecosystem, the easiest way both to learn Solana as well as help other developers out is to contribute to the Solana Stack Exchange.
00:06:12.325 - 00:06:28.589, Speaker A: Like the minimum thing that you could do is just upvote good answers and good questions. Otherwise, like answer questions that you want to try out or if you want to learn something along the way. Say someone has a question about thing, you can try to build whatever that thing is and learn Solana along the way.
00:06:28.737 - 00:06:32.225, Speaker B: That wraps it up for this episode of the Changelog and we'll catch you all next week.
00:06:32.565 - 00:06:33.445, Speaker A: All right, adios.
