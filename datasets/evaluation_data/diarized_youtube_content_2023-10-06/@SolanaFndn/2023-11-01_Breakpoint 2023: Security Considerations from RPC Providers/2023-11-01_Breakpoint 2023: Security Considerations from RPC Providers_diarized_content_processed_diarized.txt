00:00:03.320 - 00:00:47.288, Speaker A: All right. Hello, everyone. Thanks for being here. We appreciate this. It's going to be an interesting topic, I think, that sometimes doesn't get as much attention or doesn't get discussed as much, but has a lot of important implications, I feel, for the entire ecosystem. So thanks, Brian, and thanks, Nicholas, for being here. First question, perhaps, is, why does this even matter? Like, what are the potential things that could go wrong when security gets compromised, either from some external party? What if there's a malicious actor? Maybe we could just talk about the various different attack vectors that could occur.
00:00:47.288 - 00:00:49.472, Speaker A: Brian, if you want to go first for us.
00:00:49.648 - 00:01:27.644, Speaker B: Yeah. The why it matters, too. We could even break down into who it matters for, because there's actually two sides here to security. There's the application side, so the application that has infrastructure that they're using to host their app, there's risks there for them due to abuse and or hackers. And then, of course, on the user side to where we need to be thinking about the quality of the data that's being returned, that you might have some opinions on what's more important or some different points of view there.
00:01:28.224 - 00:01:58.958, Speaker C: Yeah, I mean, the kind of classic scenario is if you, an RPC provider, can't serve data reliably to the consumers, and that'll break their applications. Right. But the really dangerous one actually is some sort of attack that would lead to malicious data getting served. Right. People are making decisions in their applications on people's balances, or maybe they're running games or something, where basically the things that users are able to do depends on the data. And as soon as that's malicious, it can completely break business applications. And that's probably the most concerning thing.
00:01:59.006 - 00:02:19.254, Speaker A: Okay. And how crazy could that go? Like, are there any mitigations in place that limit what could go wrong, like in malicious RPC? No, just give back any data. And how could, how could that be checked?
00:02:20.514 - 00:03:16.114, Speaker C: Well, I think so, first off, like, the risk, we'll start there. The risk always depends on the application layer and what they're doing and the consequences of that. So we can't really control what people do. But for, like, the way to think about it, right, is that, like, Solana and the accounts and all the data, basically, in Solana, essentially is a giant public, permissionless database. So it's kind of as if you're running your own system in web two and someone compromised your database and broke everything, how would that behave? That's very dependent on the actual application. But if you were to, for example, actually settle funds or do something, depending on the data, then obviously you could have someone lose thousands or even more. If someone were to implement poor application design, then poor RPC, like an RPC exploit, can then lead to a much greater loss radius.
00:03:16.734 - 00:03:58.748, Speaker B: Yeah. And thinking about an example, maybe from DeFi, assuming I'm wearing a black hat and I'm a malicious RPC operator, which I'm not, by the way, but if I was, I could potentially steal money from you by showing you fake market data to try and induce an order to come in. And when I see the order come in through the RPC node, the transaction, I could front run you. Right. I could hold that back a little bit, set my own orders up and then send yours after mine. And the mitigation there is, one of the mitigations is always know who you're dealing with. Know who.
00:03:58.748 - 00:04:09.828, Speaker B: There is a reputational aspect, RPC providers. If you don't even know which RPC endpoint you're using, that, you know, that might be one way to check and just do a smell check there.
00:04:09.956 - 00:04:52.664, Speaker A: Okay. Yeah. And is there sort of some kind of like process in place that you would suggest for people to do their due diligence? Is it just about like Brian Long is on stage right here, he's happy to show his face and he's been in business some time. Or can people also actually look at, okay, what are you guys doing behind the scenes? Is there some kind of due diligence you could do from a technical perspective to verify that you've been honest in the past? Or like, do people just have to trust, okay, like he's been, it looks like he's been honest for some time. Can we trust him to be honest in the future?
00:04:54.204 - 00:05:13.296, Speaker B: Reputation is a part of it. Of course. We want to work in a trustless environment where we can. You always want to be able to verify, and maybe the better way to look at this is trust and verify that reputationally. I know that helios is a good company. Nick is not going to steal my money. At least I think he's not going to steal my money.
00:05:13.296 - 00:05:33.662, Speaker B: I'll hold onto my wallet. But then at the same time that if there are some of the data availability sampling tools that are out there with tiny dancer, things like that, that you could start to verify that trust and get more comfortable. I don't know what you think.
00:05:33.838 - 00:06:21.586, Speaker C: Yeah, I think that's the main thing. I was thinking about this before the panel too. And in the current model, that's the way to do it, right? You cross reference across other providers and that's kind of the benefit of where you have decentralization is that you can have any number of RPC providers and you can cross reference. And I was thinking about, is there a way that people could actually, within the data returned by a provider, actually check to see if it's correct? And I think we could maybe get there, but there still will. I just want to, as I was brainstorming, I think there's still always going to be some risk for people, especially doing high like things that really require low latency, because as soon as you're doing that, you're trying to shave seconds. So for example, traders, they don't simulate the transactions when they send it because they want to shave every single millisecond they can. So in that case, the trust is very important.
00:06:21.586 - 00:06:33.454, Speaker C: So it might depend on what you're doing. If you are trying to snipe an ARB, then you're going to need trust because you need to shave as much time as possible. Or I guess run your own validator, which you also could do.
00:06:34.234 - 00:07:06.404, Speaker B: Yeah. And to play off of that for sure, that's probably the ultimate mitigation here, is to trust yourself and run your own RPC node. And many of the apps do that actually, so many of the DeFi apps will have their own server fleet that they have some control over, even if they outsource to a provider that's still a dedicated discrete pool of servers. And so trust yourself first is probably the best mitigation always.
00:07:07.064 - 00:08:09.046, Speaker A: Yeah, I would agree with that. If there's one thing you have control over is how do you go about your own security setup? Like for sure, that probably just doesn't make sense for every single retail user. So maybe there's this trade off between how many resources do you want to invest into this yourself? We've been talking about the angle of having a malicious RPC provider. What about perhaps risks that an honest RPC provider is facing in terms of infrastructure security? Like what is a concern maybe from just people in the market trying to game the system somehow, maybe leaching resources. Can we maybe speak a little bit about what's currently happening, maybe even have some real life examples of problems that you're dealing with and how you are mitigating those?
00:08:09.230 - 00:08:59.935, Speaker B: That's certainly the biggest risk that we deal with continuously, to be honest. It's constantly happening where we've got people that are trying to leach resources from the RPC service and there's actually one group that's out there. We don't know who they are, but they go to incredible lengths to steal RPC. They go to such great lengths to steal RPC that we wonder why they don't just get their own RPC, because it would be a lot easier. And we see it coming in in the form of rotating IP addresses through a proxy network. It appears that they are also crawling through GitHub looking for tokens, access tokens that may have been leaked. They're also crawling through front ends again, trying to find tokens that may have been leaked.
00:08:59.935 - 00:09:40.294, Speaker B: And then they'll load those endpoints into their bots. And then the bots will just start rotating through ips and rotating through endpoints. We're able to recognize them based on the traffic pattern that they have, but it's still a game of whack a mole. The consequence for the application that's running those particular servers is that it can result in degraded performance. So it's more of a resource theft issue where they're stealing resources from that application. And the consequence is just, you know, a worse user experience. You guys probably seen something like that too.
00:09:40.954 - 00:10:02.314, Speaker C: Yeah, we've seen stuff like that. We also, I mean, it's outside the scope of rpcs. It's the same sort of problem. We've seen it with other APIs that we run and stuff where people will try to go. And one time actually we've had someone try to even like ransom us essentially indirectly. They were ddosing us and saying like, oh, I found a security vulnerability and we're like, you're just ddosing us. Like this is fully illegal.
00:10:02.314 - 00:10:15.268, Speaker C: Like just go away. Like, all right, but they wanted, I think seven ETH. No, what? Yeah, and they tried to do it as a security consultant front and like it was really weird.
00:10:15.356 - 00:10:16.980, Speaker B: And you immediately agreed and paid them.
00:10:17.092 - 00:10:20.916, Speaker C: Yeah, we paid them 14 as the nice guy.
00:10:21.100 - 00:10:26.092, Speaker B: Yeah, exactly. Yeah, I know what the real answer was. It's not safe for work. Right.
00:10:26.228 - 00:11:07.910, Speaker C: Yeah, but another thing too. Cause like when we're talking about a lot of resource consumption, right, what happens with the RPC nodes is basically they are receiving all the data from the network. And if they're under a lot of stress from serving out requests for customers, then they can fall behind that processing and then the data gets stale. And that is we talked about basically serving malicious data, but also late data kind of can have the same impact to customers. Right. Whether it's someone intentionally returning bad data or just your node is say a minute behind, that will have really bad impact for some customers. So that's also something we have to be very aware of.
00:11:07.910 - 00:11:34.944, Speaker C: And even in normal traffic patterns, you got people come in all of a sudden want to hit really spiky workloads, or people have accidentally turned on jobs and had restrategies or bugs where all of a sudden they're going to be hitting super hard. So it's really important to be at the right limits in place. And also really important too, that what we do is we are always keeping track of how up to date the nodes are, and as soon as they fall behind a certain threshold, they get pulled out of rotation immediately. Then we let them recover and then bring them back in to make sure all the data is always fresh.
00:11:35.644 - 00:11:56.864, Speaker B: Yeah, for sure. And you probably have seen like we have too, sometimes that spike of traffic isn't external. It was actually a software bug that the developers deployed to their front end. So they basically end up ddosing themselves. And so there's never a boring day in our business.
00:11:57.004 - 00:12:14.104, Speaker A: So is there anything interesting being built, perhaps to frustrate those malicious actors and at least make either it harder for them to leach those resources or make it possible altogether, even if it can't.
00:12:14.144 - 00:12:30.566, Speaker B: Be 100% bulletproof, perhaps mitigations being built or in process? Are you guys working on anything now to enhance security? Like coming in from the front ends? That might be something to collaborate on?
00:12:30.750 - 00:12:55.540, Speaker C: Yeah, maybe. I think a lot of it is just standard web two tech. It's nothing super fancy. It's really just having IP based rate limits, checking that, monitoring that having. So for our basically different ways of running fleets like ours is kind of like a global intake system. So wherever you are, it comes in, routes you to the appropriate node. We use that through Cloudflare.
00:12:55.540 - 00:13:24.484, Speaker C: And Cloudflare is a lot of DDoS production in place, so we leverage their security to give us an extra layer. Then we have our own stuff as well. So we have that double protection and they really know what they're doing. When it comes to DDoS attacks and that stuff, that's basically their bread and butter that they've had to deal with. Web two, of course, and their scale is a lot bigger than ours. So that's a good tip as well for anyone actually starting out is basically, there is a lot of stuff done on the web two side for tremendous scale you can leverage as well for your tools today.
00:13:24.604 - 00:14:05.388, Speaker B: Yeah, and we'll also use the rate limits to shut off certain RPC methods if they're not required for that application or that endpoint. And so that's a way to. In a way, if the rate limits were a blanket, you would basically just drop the blanket over the app and then the rate limits would custom fit the application. The idea is to make sure that the user always has a good experience, but the bots have a really bad experience and they go away. And so that, you know, I guess it's layers and it's whack a mole. I mean, Marco and Chris that are here, these guys are on the front line. There's Daniel, too.
00:14:05.388 - 00:14:07.452, Speaker B: They're dealing with this literally every day.
00:14:07.548 - 00:14:28.324, Speaker A: Okay. Do you have any thoughts on the promises of something like data availability sampling? Is there like a place for that where you can prevent certain types of malicious behavior, or at least make it less likely?
00:14:29.344 - 00:14:51.464, Speaker B: To me, yeah. I mean, it sounds great. Trust, but verify. And certainly if there's some of the data availability sampling, if that starts to raise warning flags for a user, then by all means they need to swap. Anything that resembles an audit tool is a good tool.
00:14:53.404 - 00:15:52.364, Speaker C: Yeah, data availability sampling really serves the purpose of being able to run a node and then be able to, as a minority, detect if there is a malicious majority, which we hope doesn't happen. But for at the current time in Solana, that is a trust that's built around that super majority agrees on something, it's basically confirmed, and everyone just accepts that. And that's kind of what the tiny dancer team is doing right now with their stuff. It's basically allowing even things as small as mobile devices to basically be able to verify that. With data availability sampling, I think the similar techniques could maybe be used to some extent to help verify RPC data, but it would require changing some things around and add time to basically the RPC provider or the node itself to basically return that data to provide, say, a proof like how it works with account compression. It would take a bit extra time for that. So again, when I talked about trading and those scenarios, people are just going to skip that because they're going to want it to go super fast.
00:15:52.364 - 00:15:57.500, Speaker C: So again, it's kind of, we could add it, but then everyone's going to turn it off because they want the fastest thing possible.
00:15:57.692 - 00:16:12.564, Speaker B: Yeah, for sure. So things like that will need to be optional. And because there are the low latency use cases like trading in gaming, where it would make sense to shut that off. Totally agree.
00:16:13.624 - 00:16:33.324, Speaker A: Cool. I'd be curious to hear maybe about some more real life stories from the battlefield where you're like, okay, this is something where something could have gone wrong, or maybe did go wrong, maybe attempts at malicious behavior that we're able to prevent, or we're just like wow, what were those guys thinking?
00:16:33.714 - 00:17:13.654, Speaker B: And yeah, you know, I kind of already told one story about the guys that are going to such great efforts to steal free RPC. But in the early days, sometimes it was the app developers themselves that they just didn't fully understand how the backend worked, and they were writing the world's most inefficient code. It's like, how could you know? If they were to design a system that ran as slow as possible? They built it. And so with that, it's important for software devs to really understand the backend and how it works, because you might be your own worst enemy.
00:17:14.954 - 00:17:50.294, Speaker C: Yeah, similar thing and something that I think anyone who's served kind of like a larger scale API that other developers are communicating with. As soon as you have a genuine error, or say you have even 10 seconds of a blip or something, everyone's going to start retrying. All of a sudden you have a flood, everyone just hammering you more, which creates a cascading effect. So you have to basically design your system in a way so that if you do have a genuine problem, you can basically slow things down and then ramp it back up in the best way possible for the user experience the whole time so they're still able to get any they need.
00:17:50.794 - 00:18:08.394, Speaker A: Well, I think that's it for our time. Thank you so much. Highly appreciate it. And if you guys ever have any questions about RPC, like those guys are going to be around, I think at the conference. You can also find me in the neodymium lounge for the rest of the conference. And thanks all for being here.
00:18:08.774 - 00:18:09.214, Speaker B: Thank you.
