00:00:01.280 - 00:00:18.566, Speaker A: Hello, everybody. Thanks for coming. I wanted to start this out because Mert was supposed to be here today. I'm just going to read a little couple text messages from him this morning. Hey, you coming to our panel today? He's like, whoops, sorry, I just woke up. Lol. I was like, bro, seriously, you're a rookie.
00:00:18.566 - 00:00:25.542, Speaker A: That's okay. We got somebody more attractive than you. Anyways. So with that said, george Harrop here from Step finance. Always ready, man.
00:00:25.678 - 00:00:26.874, Speaker B: He's ready to go.
00:00:27.514 - 00:00:51.854, Speaker A: So today we're talking about explorers interpreting data for the masses. We've come a long way from the early days of. We'll get into it a little bit. Just a simple solana explorer and a wallet called Solit. So before we really get into it, I'm going to let everybody give a quick little introduction down the row. I think you know who most of them are, but we'll go ahead and let them introduce themselves anyways.
00:00:52.774 - 00:01:01.314, Speaker C: Yeah. Hey, folks, my name's Armani, developer. I've been in salana ecosystem for, I guess, I don't know, two and a half, three years at this point. Happy to be here.
00:01:02.214 - 00:01:12.834, Speaker B: Awesome. My name's George, co founder at Step Finance. We do portfolio dashboard, analytics, events, all sorts of cool stuff. Crossroads all stars. So, yeah, check out step.
00:01:13.574 - 00:01:21.654, Speaker D: Thanks, guys. Hi, I'm Nick, I'm from Slan FM. I'm one of the co founders there and I basically built and plan the product line.
00:01:21.814 - 00:01:56.784, Speaker A: Yeah, cool. Yeah, so, like I said, I think one way to kick this off is just like at this point, and we've come so far with interpreting data. Like, in the early days, there was just as developers, the Solana Explorer existed and it was essentially sort of, it's really just a debugging tool for core developers at this point. But, like, it did most of its job. Lots of complaints around that. But, like, there was the early days had a lot of stuff. So I'm sort of just like, curious to hear.
00:01:56.784 - 00:02:29.064, Speaker A: Everybody's sort of like, everybody on this panel has been in the Solana ecosystem for two to three years already. So, like, when you guys were first developing, like, Armani was working on one of the OG wallets, George was working on his, like, aggregator, and Nicholas was working on one of the first 1st non explorers that were not created by Solana Labs or foundation. So, like, what were those days like before you started building your products, like on Solana? Like, what was the, like, what was the situation like?
00:02:29.764 - 00:02:52.824, Speaker B: Well, you keep trolling me for using solid. It was the best wallet man. Like, it was, and I held it to the very end until the dark days of defeat. But no, I think it was. It was a bit of a mess, right. Because each token had a different address. You had different token accounts per wallet, right? So you couldn't just send to one address, which was a weird workflow.
00:02:52.824 - 00:03:05.636, Speaker B: And, yeah, it was quite difficult to communicate that to people, and the wallet was sort of very basic. And, yeah, that was the first sort of year of. I guess Solana's really catching on.
00:03:05.660 - 00:03:07.544, Speaker A: So your grandmother couldn't have used.
00:03:08.374 - 00:03:09.470, Speaker B: No, probably not.
00:03:09.502 - 00:03:23.246, Speaker A: No. How about you, Armani? Like, in the early days, like, what was the. I mean, like, I know, what was the experience, like for Solana in those early days for, like, data interpretation or just, like, being able to piece it all together?
00:03:23.430 - 00:04:16.130, Speaker C: Yeah, I think so. First, I would like to apologize to the core engineers for what I'm about to say. I think I have a bit of a. Maybe a contrarian view on this relative to a lot of the early core developers. But when I first came to Solana, the first, most obvious thing that I noticed was missing from the ecosystem, and to be frank, it still is missing from the ecosystem is the lack of consensus at the social layer around serialization and instruction formats. And the downstream consequences of this manifested itself in multiple, I don't know, suboptimal ways in terms of how the network evolved. So maybe the simplest example of this is simply when you go to explorer and you see bytes, this is trivially solvable.
00:04:16.130 - 00:05:19.998, Speaker C: If you have something like Ethereum, they had a standard ethavi format where you can know exactly how to serialize and deserialize all the data. So you can read bytes from the chain and then interpret those bytes in a nice, structured way on Solana. But in the early days, there was a very, very pure stance, if you want to put in those terms, from a lot of the developers at the time, that Solana should be a general message bus. It should not be opinionated. It should simply be bytes flowing through the network as fast as humanly possible, and not the opinions of the developers at the core kind of layer should not influence the opinions of the developers at the application layer. And on the one hand, that made a ton of sense. Core is core, and who are we to kind of give guidance at the app layer, especially if you want to decouple those two things and allow each of them to innovate as fast as possible at each level.
00:05:19.998 - 00:06:21.086, Speaker C: But on the other hand, it made product development quite challenging. And so this has been attention that we've seen kind of all over the place, both in the early days but also even up until today, everything from explorers interpreting data to getting protocol standards into wallets and NFT marketplaces and things like this. And maybe the most recent and contentious topic that is been like a downstream consequence of these types of decisions have been protocols or the lack thereof on Solana, namely interfaces. And I think these are kind of, this is all part of the same conversation that all kind of comes from this fundamental kind of decision or lack thereof, to have unified data interpretation and serialization formats on chain. So I think that is maybe one of the more core topics as it relates to this conversation.
00:06:21.190 - 00:06:45.764, Speaker A: Yeah, Nicholas, so you obviously decided to were not happy with the Solana explorer in those early days and decided to build your own and you were literally coding it and I had to pull you out of there just a second ago to get you on stage. But anyway, so like what was, what prompted you to say, hey, I need to build this thing because what exists today is not useful to me.
00:06:46.424 - 00:08:04.042, Speaker D: So I would say about two years ago, I think anchor didn't have as much adoption as it had today. So it would be pretty hard for you to use idls to deserialize as much as you can today. So sorry to all devs who are new, who are less than a year old inside this space, but if you're a deaf, like two and a half years ago, it was extremely disgusting to work with parsing and deserialization because think if you go back to Solana FM's repository in GitHub, you would see that there's a rust crate that we open sourced about two years ago and it was like just a switch case shitload of like oh wait, I think bin code deserialized and then sometimes you gotta do Bosch deserialize. There's so many different types of deserialization standards that various programs want to adopt and whoa, it's a pain in the ass. And to top things off, explorers at that day in 2021 and 22, they don't really like, it's still not interpretable for deafs. I mean I'm a deaf, maybe I can read by the race, that's fine. But what if like I'm not like into that? Like I'm just very used to reading JSON data.
00:08:04.042 - 00:08:17.134, Speaker D: That's not possible. So yeah, that prompted us to like go head in into working on a parser that can then parse things and then present it in a much more readable way. So yeah, that triggered a thought, right?
00:08:17.434 - 00:08:53.922, Speaker A: So like with all that said, everybody sort of gave some of their sort of, like, thoughts on. On how things were in the early days. But, like, what's the. Compared to two years ago or whatever we want to call it. Like, whoever wants to go first is like, what's the current landscape in terms of, like, how close are we to getting to where we need to be? And, like, what's the current landscape of, like, obviously Armani's working on a wallet. You have an explorer. Step's trying, has building an incredible sort of dashboard so you can see all of your nfts, all your open positions on different exchanges.
00:08:53.922 - 00:09:18.234, Speaker A: The whole goal of all of this is to sort of make sure that every stakeholder, whether it's a user, whether it's a dev, make sure that everybody gets what they want. And, like, I don't know if, like, in the current state is like, is there like, one thing to rule them all? Probably not. Like, should there be things? So we'll dive into that. But, like, current landscape, like, how well are we doing and how much further do we need to go?
00:09:18.654 - 00:09:49.916, Speaker C: Yeah, I'm happy to take that one. Yeah, I think to me, like one of the. It's kind of obvious. One of the most important things is simply protocol interfaces. Kind of just like tagging onto my previous comments, we need the ability to have multiple competing program instances that represent the same asset standard. You saw this. Namely, not to pick on nfts, but you saw this in nfts, right? We had like five different competing NFT kind of protocols that popped up over the past year.
00:09:49.916 - 00:09:57.148, Speaker C: Magic Eden, cardinal labs, metaplex, programmable NFTs, CNFts. It's like literally five right there. What's an NFT?
00:09:57.236 - 00:10:00.332, Speaker A: We haven't got every letter of the Alphabet in front of NFT yet, though.
00:10:00.428 - 00:10:00.876, Speaker D: Exactly.
00:10:00.940 - 00:10:01.844, Speaker A: We're almost there.
00:10:01.964 - 00:10:29.348, Speaker C: Exactly. But an NFT is simply, for all intents and purposes, a set of read and write APIs. Give me the URL, give me the royalties, give me the creators, update the metadata, mint it and destroy it. It's a basic API for nfts. And I should be able to simply implement my own program that maybe does my own thing. Maybe I implement royalties in my own special way. Maybe I add some fees because I'm a business and I need to operate.
00:10:29.348 - 00:11:35.340, Speaker C: I should have the ability and the liberty to make those decisions in a self sovereign way. Right, but that's not the case currently. We're all kind of, you know, at the behest of the people that control the specific program instances. And it's not just nfts, it's any important asset standard. And nfts are maybe just like the best example because it's the most important asset standard or the most widely used asset standard other than the token program itself. And so that's been a point of friction, and it's a very kind of unnecessary source of governance friction that simply doesn't have to exist, right? So you maybe get a lot of technical complexity gone when you have single program implementations, but then you get a lot of social complexity that you get as a trade off, right? So there's no free lunch. And so I think protocol interfaces where you can have multiple competing asset standards, where a wallet can simply read new NFT instances or read new token instances or whatever without actually having to do extra work, is really what you want to get to.
00:11:35.340 - 00:11:39.908, Speaker C: And other ecosystems like Ethereum and others have this with their ERC 20 standards.
00:11:39.996 - 00:11:47.780, Speaker A: And this allows wallets and explorers and everybody to move faster without having to like, knock on somebody's telegram and be like, hey, can, like.
00:11:47.932 - 00:11:48.532, Speaker C: Exactly.
00:11:48.628 - 00:11:51.700, Speaker A: Can you help me do this thing? Because otherwise you can't do anything as a wallet.
00:11:51.732 - 00:12:29.964, Speaker C: We don't have to do anything, right? You can just come as a developer, make your own NFT protocol, and it should just automatically work. That's the whole point of a protocol, that's the whole point of an interface. And it's like fire dancer can come along and hook up to the network, even though it's a totally different implementation of validator code. And you should just be able to give a document of the API, and I should be able to just go implement it. And so I think that is one of the most important things that is an unsolved problem in the Solana ecosystem. That would just be a big one for interpreting information and all the second order competitive consequences that are a nice result of that.
00:12:30.054 - 00:12:30.544, Speaker A: Right?
00:12:30.664 - 00:13:36.628, Speaker B: I think it comes back to standardization and documentation. I mean, we, we've been building passes for all sorts of different weird programs on step to be able to get, you know, how many versions magic Eden has? Six, seven? I don't know, what are the, you know, how do we decode the instructions for version two that's no longer supported, but we need to get that information to show people's positions or whatever it is historically over time. So we've had to deal with a lot of technical debt of trying to do that, and it's still kind of a problem. Certainly anchors helped out a lot over the last few years, but if we're talking about, like, where we were and where we are now, I think we're definitely in a better place right on the standardization front, but there's still a lot of work to go. We would love to not have to be poking people in telegram being like, hey bro, how does this work? Hey, what is this instruction doing? And also standardization of SDKs and all that sort of stuff that people like to provide, often that doesn't have the best documentation all the time. So, yeah, that would be. My comment is just more in the direction of where already going.
00:13:36.676 - 00:13:38.996, Speaker A: People are shipping fast, but they're not shipping docs.
00:13:39.100 - 00:13:39.500, Speaker D: Yep.
00:13:39.572 - 00:13:45.052, Speaker B: No docs, no idea what anything does. And it's just a lot of back and forth, which wastes time.
00:13:45.148 - 00:13:45.516, Speaker A: Yeah.
00:13:45.580 - 00:13:58.768, Speaker B: And it's just, yeah, it can take a day, especially if people are around the world, hear information back, and then that delays decision making and blah, blah, blah. And it can work out to be a week to do something that perhaps should be a lot quicker than that.
00:13:58.816 - 00:14:20.224, Speaker A: Yeah. Nick, how about you current state of things for you? Also, feel free to talk about some of your upcoming things that are happening with Solana FM as well. What's the current state of things for you in terms of data interpretation for the masses, whether it be from the user's perspective or from your perspective? Where are we right now? Alpha alert.
00:14:21.404 - 00:14:56.228, Speaker D: So this is actually very perfect for us because the panel is in a layer, right? You have an explorer, you have a profiling tool, a wallet profiling tool, and then you have a wallet, right? So perfect time for me to say this, which is, there are so many layers for us that we need to build an explorer for. And one big mistake that we probably did together with the rest of the explore provider in a space, would be to base the entire source code based off the open source Explorer. And it's as if just forking solid and then just doing a new wallet by itself.
00:14:56.276 - 00:14:56.412, Speaker A: Right?
00:14:56.428 - 00:15:15.204, Speaker D: It doesn't make sense. So what we did and what we set out to do over the past six months was that we wanted to find a way to layer them out. Okay? So we got to find a way to connect to APIs. Okay, that's one. And then we got to find another layer to do generalized parsing. Right? Find a single unified standard to parse everything that we can. Right.
00:15:15.204 - 00:15:38.720, Speaker D: You can parse rust based programs, but you got to find some guy who wrote the rust code, and then you got to reverse engineer that logic so that you can deserialize the data inside. And then you have idls as well. So it makes so much sense when idls came in, where if there's a way for you to generate an idl based on a rust program, you can then parse and deserialize everything in just one single standard.
00:15:38.752 - 00:15:41.444, Speaker A: If you're not publishing your idls, shame on you.
00:15:41.744 - 00:15:42.344, Speaker B: Please.
00:15:42.464 - 00:16:22.626, Speaker D: Yeah, and we have something coming up on our team tomorrow in another session, so that's something to look forward to for idls. But I don't want to reveal so much yet. But, yeah, it's one unified way to parse and deserialize instructions. And then you have one last layer, which is as an explorer product, the goal for us is to make information as readable as possible for you. Like, dude, it takes us 30 seconds for us to understand an entire transaction. Like, why can't you just, like, look at a bank transaction? Right, your ibanking app, when you read the entire list, it takes you less than 10 seconds to know what you've done over the past six days, seven days. Right.
00:16:22.626 - 00:16:52.028, Speaker D: If you do a lot of transactions. And that's what Explorer's got to be. And that's where explorers can also empower tools like wallet profiling tools and wallets, because we do have to build the foundational APIs, and I think that's the main, core, main mode of our job as an explorer. And that also empowers users who utilize our explorer for day to day use. Like, oh, this is a swap. Like, what's the slippage tolerance? I don't have to scroll down and read the instructions. That doesn't make sense.
00:16:52.028 - 00:16:54.436, Speaker D: So, yeah, that's the current state.
00:16:54.540 - 00:17:36.664, Speaker A: Yeah. I was going to ask another question, like, what are the issues? But I think we sort of outlined a lot of the issues already. But I think one of the big questions is, like, who? I think we care about everybody, but the perspectives that you guys are sort of talking about seem to be more technical and from devs. But at the end of the day, for the masses means more than the 75 devs on Solana. It means that we're talking about millions of people around the world to be able to be like, oh, I get that. And, like, I sort of just had an epiphany and I never really thought about before that a wallet is essentially an explorer in itself. But what's the.
00:17:36.664 - 00:18:13.738, Speaker A: How do you solve the problem of being able to nail all of those profiles? Like, is it a single thing? Is it a single. Like, Nick and I had chatted about this. It's like, what's the sweet spot? Should there be multiple things? Should there be one thing that can be whatever you want it to be, which also adds layers of complexity. So I don't know, like who had some opinions on like how we, what's, where should we get to for that data interpretation for the masses, like, like so that your mom is able to understand what she's looking at.
00:18:13.866 - 00:18:28.456, Speaker C: Yeah, I don't think this is a problem specific to explorers or wallets. You have to have a well defined customer and build for it. I think most explorers as they currently exist are very clearly targeted at developers. Otherwise why are you showing byte code?
00:18:28.640 - 00:18:29.608, Speaker D: Yeah, exactly.
00:18:29.696 - 00:18:56.426, Speaker C: Wallets have kind of gone in the other direction and so maybe that's maybe a nice way to think about it. You know, wallets and explorer for, you know, maybe developers, but you know, maybe less advanced people and explorers are more explorers for developers. That's one nice demarcation. But yeah, I think you have to define the user and not try to build a catch all product when trying to interpret information because people want different things.
00:18:56.530 - 00:19:05.074, Speaker A: Yeah, true. And I mean, I think George has probably a unique perspective out of like YouTube because his focus is core is primarily users.
00:19:05.154 - 00:20:32.976, Speaker B: Yeah, yeah, I mean we think about this a lot, right? And on step on the core product, the dashboard, everything's broken down into different modules that make sense for people. Like we could have just got your user position, shoved it all in a table and said, job done, right? And then it's like, eh, it doesn't really tell you that much. Like what if my, what's the p and l on my perp position in drift or zeta or something right now? Like there's a lot of like little niche things like that, or you know, validator staking. You know, where's my staking? Or I'm staking in this random project somewhere and what's the apy of that? So there are things that I don't think you can just make one table to just shove it all in there. So if we're talking about how do we appeal to the masses, I think there is. The presentation of information is important. And recently we put a lot of effort into debuting our transaction history v three, which recently came out, which is essentially you can export to CSV pass data at the instruction level of a whole bunch of programs that we've been dealing with for years to get an actual transaction history that makes sense because a lot of times if you go to the old explorer or something like that and you look at a wallet, it's like, okay, here's just a bunch of txids with a whole bunch of information which doesn't tell me anything about what I did with my wallet because the average person can't tell that that transaction was actually like, I'm paying back a loan from this protocol over here, and then I'm swapping it for something else over here.
00:20:32.976 - 00:20:38.536, Speaker B: Makes, yeah, that. There's no indication of that. Right. From how things have been with explorers.
00:20:38.560 - 00:20:38.672, Speaker A: Right.
00:20:38.688 - 00:21:10.116, Speaker B: And I think that's what Slana FM's looking to solve. But ultimately, like, we had to put that into the transaction history and present it in a way that actually makes sense for people. And then it comes back to the standardization problem of making sure that it's actually easier to get that instruction level data to find out what's going on within that program. So it's not just a bunch of transactions that are unknown or something like that. So yeah, look, we put a lot of effort into that. We're going to continue to always just be building on that and breaking it down into different modules that make sense for people.
00:21:10.300 - 00:21:10.900, Speaker A: Yeah.
00:21:11.012 - 00:21:51.464, Speaker D: And then for us it's just more of pivot. So I think it's about a year old now that Solana FM has used this library called React flow. So I think Anatoly was presenting in the first session yesterday during the introduction of big point, and he was showcasing Jupyter's diagram of how the hops are going through 30% from orca or 40% from Openbook. That's cool. The use of graphs would be a very visual way for us to understand transactions. That's the reason why we introduced transaction flow as well. But there's a huge problem, which is the underlying mechanism.
00:21:51.464 - 00:22:19.968, Speaker D: So that's why for us this time around we are putting more emphasis on devs. Because if we don't get as much parse or deserialization coverage, we won't be able to do what's above. If you want to present human readable information. At the end of the day, if you don't get the bottom layers done beforehand, you're going to end up in a problem where. Oh shit, like I can cover six out of seven defi protocols. Where's the last guy? Oh, he's not deserialized yet. He doesn't have his iDl.
00:22:19.968 - 00:22:53.544, Speaker D: So that's the core focus on us right now. And we feel that we got to get like the dev centric problem solved first. Then we can hop onto the human readable site. But of course later in the session today on our site for Solana FM, we'll probably showcase like a snippet of like what is going to be human readable for explorers and how we want to bring idls out to the public and the masses, really make sure that open source tooling for decentralization is available for everyone. We're not keeping it closed sourced, we're keeping it open source.
00:22:53.664 - 00:23:50.966, Speaker A: Yeah. So there was another thought that sort of came into my mind and Mert, who's sleeping right now, was supposed to talk a little bit about this, but in the early days, any developer who's been here long enough knows about dreaded Mert get program accounts, calls and all the efforts and all of the changes that have been made. And obviously Mert being one of those people at the forefront of that. So how much has the indexer ecosystem and these new tools that just do all of that work for you changed your lives and experiences with building? Because they obviously indexers can do things more efficiently because that's their sole purpose. But I'm assuming that each of you guys are using those indexers. So like, how substantially has that changed things since those early days?
00:23:51.150 - 00:24:21.244, Speaker B: I might jump in there. That I guess about a year and a half ago we were running into scaling issues and performance with the old way of getting information about a wallet and user's positions is you just smash it through the RPC node. You're just doing a ton of RPC calls to find out what's going on. But you reach a certain point with some wallets that just have so many positions, so many different things going on that it can take, yeah, degenerates. It can take 30 seconds, 45 seconds to load. Right. And that's unacceptable.
00:24:21.244 - 00:24:39.674, Speaker B: So we had to then go, okay, we need to be indexing all of this and we need to be serving it way quicker. And then we had the advent of things like geyser and stuff like that. Right. And yeah, we've been heavily down that path of moving as much as possible to our backend. And in order to serve that really quickly.
00:24:39.754 - 00:24:41.962, Speaker A: Do you do your own indexing? Yeah. Oh, you do?
00:24:42.018 - 00:25:27.990, Speaker B: Yeah, we've been cool rocking our own stuff about a year now, so, yeah, and I guess our use case is a little bit different to everyone else. So often sort of generic indexing solutions can't quite meet the requirements that we need. So yeah, we've had to just be Rambo about it and do our own thing, but it has led to really amazing performance increases. Like I said, like 30 to 45 seconds down to like one to 2 seconds, if that, for like really intense wallets that like our test wallet at step has a position in pretty much every protocol, I think on Solana, we try and make it have that. So that is a really big wallet with a, a lot of stuff going on. And I think it loads within like two or 3 seconds, something like that. That's the benchmark that we need to use, right? Yeah.
00:25:28.022 - 00:25:37.958, Speaker D: For us, we do use indexes, but our perspective is a bit different. It's a pain in the ass. Oh my God, that size was so huge.
00:25:38.006 - 00:25:39.862, Speaker A: So explain a little bit.
00:25:40.038 - 00:26:12.254, Speaker D: Like, if you want to get an indexer up, you've got to hire like what, two devs or one, and then you've got to put his, you got to throw him inside the room, right? Like, oh, go do that, do an indexer. And then sooner or later, when you comes out of the room, right, and he says, oh, I'm done. And then there's another use case and requirement where we got to come up with another indexer and then, oh, fuck, like, we got to go back in. So indexes are great. They improve performance. They solve this specific problem that you want to solve, but it's not really worth the human manpower and resources that we have.
00:26:12.294 - 00:26:12.814, Speaker A: It's not.
00:26:12.894 - 00:26:51.072, Speaker D: Yeah, we could have just taken that to really go forward and go closer towards the masses. Right? Like really for the masses, like not just solving internal problems for the product. So that's my thought. And, but yeah, it did give us a fair share of advantages. Like, for example, we're about to launch, like, I don't think there's a way for you to view all the token and system program transfers, all the token transfers you've been doing since, since the start of time for your wallets with a date time range like filter, but we are about to launch that out. So yeah, there are advantages to indexes, but the manpower requirements are just, it.
00:26:51.088 - 00:27:10.364, Speaker A: Sounds like both of you so far have sort of said that indexers are useful. You're saying that there are a lot of resource heavy on manpower. And the generic ones, like somebody who already has an indexer, doesn't necessarily fit all of your needs. So you have to like spend manpower on that. How about you, Armani?
00:27:11.344 - 00:27:12.584, Speaker C: So if you just give your, just.
00:27:12.624 - 00:27:14.004, Speaker A: Tell us how you really feel.
00:27:14.704 - 00:27:55.108, Speaker C: If you go to the first version of anchor, you will see an index attribute macro inside of the IDL. So you define your account, you put hash index over the variable, and that translates into the IDL. And the intention of that macro was for somebody to create a business out of generalized indexing. And I think it doesn't get you 100% of the way there, but it certainly does get you 80% of the way there. And I think it solves a lot of these tensions that you guys are referring to.
00:27:55.196 - 00:27:56.796, Speaker A: But you need the idls, you need.
00:27:56.820 - 00:28:33.864, Speaker C: The idls, you need the ideals, and you need consensus over some interpretation of the data. And so I guess that's one thing I'm surprised about. I think there's been some companies like, I see vibe network hat in the audience, vibe that have attempted this problem, and I think it's certainly solvable. It's just a matter of engineering work. But we've seen things like the Das API, I never know how to pronounce it. I don't even know what DAS stands for. But the generalized indexing API that came out of metaplex, that tries to solve a lot of these things.
00:28:33.864 - 00:29:19.250, Speaker C: But really, I think for a lot of use cases, I should just be able to give my IDL and I should just get a postgres table with all of my accounts, and I should be able to run SQL queries, join and match things, and build indexes all from an idL, and it should happen automatically. And so I think it's all kind of rooted in the thing I keep talking about, which is generalized interpretation of data via idls and serialization formats. It's all the same problem. But if you get the foundation right, then all these second order downstream effects become a lot easier. But I think that's one approach that would be pretty interesting that I still think is quite compelling to me.
00:29:19.322 - 00:29:47.170, Speaker A: Yeah, I think the interesting thing here is, like, we're talking to some very smart people who have been here for quite a while and talking about how, how much of a pain in the ass that it is to do these things. So, like, like, I spend my days trying to onboard new developers, and then, like, then I'm like, come on, it's easy. It's fun. Like, come over here to Solana and like, imagine, like, the pain that, like, that we, it's not chewing glass anymore. Like, let's be real. Like, you can if you want to. Armani still does it.
00:29:47.170 - 00:30:31.062, Speaker A: A lot of redacted Noah. Like, there's a lot of masochists in the ecosystem that, like, really, truly love to just like, solve hard problems. But what, this can't be the case for devex forever when people have to constantly deal, like, you're talking about having to put, throw a guy in a room that's an entire human being solving one little indexing problem. And, like, how do we, like, what's the next step. I mean, I think maybe you've already alluded to it, idls are going to help solve this, but is there anything else that we can do to get to that next place where it's all, can we get to a place where it's essentially almost all solved?
00:30:31.238 - 00:31:35.636, Speaker C: So this might be, this is kind of a pie in the sky kind of thought. But one thing I think that we haven't seen enough of, and it's mainly because people are afraid to do it, is create tokens around shared open source software. And the reason why tokens are important is because it incentivizes people to actually go do the thing it always comes down to. Are really smart people incentivized to do this because they're incentivized to go do anything else in the world? And I feel like the token mechanism is the most potent tool that you have to incentivize people to get stuff done. But the fact of the matter is that most people are scared, for lack of a better word, because they don't know what it means to create a token. What are the consequences for the legal consequences or the social consequences? What's the proper way of doing it? A lot of well intentioned, really smart people simply don't do it because they don't know how to do it in a way that makes sense.
00:31:35.700 - 00:31:40.380, Speaker A: And then some people do, not realizing the repercussions that can come from creating those tokens.
00:31:40.412 - 00:31:41.036, Speaker C: Yeah, exactly.
00:31:41.100 - 00:31:43.700, Speaker A: And then you have to delete your account and disappear.
00:31:43.892 - 00:32:35.874, Speaker C: But open source software is extremely important and I think tokens are probably the most powerful tool that we have to promote shared open source software. And so I'm really excited to see things like, not to go off too much of a tangent, but like armada, these launchpads. Yeah. For creating a vibrant ecosystem to coordinate humans to solve these problems. The incentive mechanism that blockchains allow is the most interesting, most powerful tool that's truly unique to decentralized networks. It's about incentivizing millions of people all around the world to all care about the same thing. I think that's something I would like to see more of, but it's unclear exactly how to do that in a way that people are comfortable with.
00:32:35.874 - 00:32:37.754, Speaker C: It's compliance and all these things.
00:32:37.834 - 00:32:52.882, Speaker A: There's also some. There's some people that have moved in to this sort of space. There's like, there's cubic who's doing quadratic funding. And like, getbook obviously was the start of a lot, like incentivizing really smart people to solve really hard problems. So I fully agree.
00:32:53.018 - 00:33:26.092, Speaker B: I would love to see, see more of this generalization stuff. Maybe it's with what Solana FM's doing, and I think we'll probably get there at the end of the day. But for us, right now, that doesn't solve our problem today. Like, we have, we have people that are like, I cannot read my transaction history to do my taxes, or I'm not, I cannot feed that into my software, right? Like, I cannot give that to a tax company. Just a bunch of TX ids. They don't know what you're doing. Like, they need to know that that was because you're sending tokens into a staking protocol and what that means, or I'm paying back a loan.
00:33:26.092 - 00:33:58.786, Speaker B: And then we get into the discussion of, well, we need to pass that data, and we need to know the instructions and the idls and blah, blah. So it's like, if we get the more generalized solutions, that'll make everyone's lives better. But I guess for us at the moment, we still have to deal with all of this horrible burden of the past if we're to actually solve people's problems right now, today. And we can either a ignore it and go, sorry, bro, come back in a year, or just use these protocols over here. But people don't do that. And then a new thing pops up tomorrow, and then some new protocol comes along. They haven't published idls.
00:33:58.786 - 00:34:10.294, Speaker B: They haven't got anything open source, no idea. And then they go, my transaction history doesn't work. You're not showing me my token balances, whatever. And then we're like, okay, well, I guess we'd have to get back on this train and get back on the horse.
00:34:10.594 - 00:34:17.405, Speaker A: Yeah. All right, Nick, final thoughts. We got about a minute left, so let us have it.
00:34:17.549 - 00:34:22.877, Speaker D: Just two things, okay. One, please publish more idls.
00:34:22.925 - 00:34:23.513, Speaker A: Please.
00:34:24.693 - 00:34:53.794, Speaker D: It helps everyone a lot. And the second thing is, we are very committed to extending the capabilities of idls. I think idls are a great idea, a great start for generalizing how you can interpret different types of instructions, programs. But, yeah, Solana FM, we are committed to extend that descriptor language to make it more readable and more usable. So, yeah, those are my thoughts.
00:34:53.914 - 00:34:59.506, Speaker A: Cool. Is that it? Any final thoughts from you guys? I'm gonna eat up all this time. We got 12 seconds left.
00:34:59.610 - 00:35:00.426, Speaker B: Gm.
00:35:00.610 - 00:35:01.354, Speaker A: Gm.
00:35:01.474 - 00:35:05.346, Speaker D: Okay, no, two words. Those two words on your chest.
00:35:05.490 - 00:35:09.394, Speaker B: Yeah, true. All right, fuck it.
00:35:11.294 - 00:35:14.134, Speaker A: All right, guys, thanks for coming. Appreciate your time.
