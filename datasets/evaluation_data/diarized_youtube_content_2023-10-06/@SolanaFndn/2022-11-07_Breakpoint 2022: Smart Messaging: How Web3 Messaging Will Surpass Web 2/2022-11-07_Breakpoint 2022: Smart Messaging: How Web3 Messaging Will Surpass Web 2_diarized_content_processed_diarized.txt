00:00:06.200 - 00:00:33.062, Speaker A: Good morning. How's everybody doing? Thrilled to be here. This is definitely the best venue, if you ask me. All right. I'm Chris Osborne, I'm CEO at dialect. We are super excited to tell you about this new specification that we just launched this week called smart messaging. So let's get into it at dialect.
00:00:33.062 - 00:01:27.814, Speaker A: We believe that blockchain is going to eat the Internet and that web3 is going to create experiences not possible in web two. Since March in our launch, our messaging and notifications open source developer tooling has been integrated across the Solana ecosystem. But what we're really excited about and what gets us up every day is what the future is going to look like. And for us, that's smart messaging. Smart messaging is a whole new way to interact. Through messaging, you can do all kinds of new things by making messages interactive. You can transfer tokens, you can mint nfts, you can follow artists, bid on auctions, vote on proposals, buy merch, and anything else you can imagine right from the message.
00:01:27.814 - 00:02:11.948, Speaker A: The reason this is possible is because in web3 we have a universal identity, the wallet. And the wallet gives you signing privileges everywhere. This opens up a whole new mode of interaction for Dapps and projects to reach you remotely and give you an opportunity to interact with their content right in the moment and right in the message. We are thrilled to announce that the smart message specification is officially live as of this week. We announced this two days ago at breakpoint. It is in alpha and it is live on our GitHub open source dialectlabs, smartmessaging. So please go check it out.
00:02:11.948 - 00:03:11.336, Speaker A: We are going to be working on this document live and would love feedback. Over 50 projects across the Solana ecosystem have committed to building smart messages with us across these projects. We're talking about virtually every possible web3 use case you could imagine, NFTs, Defi, social, DAos and multisigs, you name it. We're also thrilled to announce the Smart message grant program. This is 100,000 in total funding to the best new talent building in web3. If you are a new developer and you've got cool ideas across any vertical at all, and you believe that messaging can help engage your users and delight them, we would love to hear from you. You can learn more at developers dialect to but let's walk through the smart message design.
00:03:11.336 - 00:03:48.934, Speaker A: This is a developer venue. Let's get into the development. The case study we want to look at today is the NFT mint. You saw this in our examples earlier. We're going to do a mix of this plus the vanilla token transfer, since that's kind of the canonical transaction on the blockchain. Smart messages extend Solana pay we have been working in close development with Solana Labs building the smart message spec as something on top of Solana Pay. We believe that to build great technology, you have to stand on the shoulders of giants, and Solanapay is one of our favorite pieces of tech in web.
00:03:48.934 - 00:04:41.644, Speaker A: Three smart messages are fully backward compatible, so you can implement simply the Solanapay transaction request spec, but we're extending it to improve the user experience. So on that note, we're going to start with a Solanapay brief overview in the context of messaging. Recall that Solanapay transaction requests can execute arbitrary transactions. This is not just token transfers. Every example you saw before is possible with the transaction request spec. To quote one of our good friends, Jordan, Solanapay is like connect wallet delivered over new kinds of chains channels. It's like stripping out the web app, stripping out the connect wallet button, all of the UI, and delivering the transaction and the signing process through things like nfcs, QR codes, and for us, messaging.
00:04:41.644 - 00:05:29.194, Speaker A: At its core, the Solana pay spec is a URL encoding of the word solana, followed by any URL on the Internet that points to a service that manages the process of building transactions for you. In this example, we're going to take a dummy site, nftexchange dot de v dot. This is not the website, this is a URL powering their API. For example, if you were to hit the mint button on their site, as I mentioned, the URL in the Solanapay encoding is a service out in the world. That's the transaction request service that we're going to call it here. And the client could be your phone, it could be a website, any of that. The transaction request spec starts with a get call that returns educational information.
00:05:29.194 - 00:06:19.688, Speaker A: In this spec, it is a label and an icon. You can think of that as an image and a button, respectively, as you can see here. So we could say send once all, and some kind of educational image. In the mint scenario, that would be the button here, mint now, and the icon of the NFT collection that you want to mint. After reading that information, the client calls a post request, and this builds the transaction and returns it in a serialized format. The client then signs the transaction and submits it to the Solana blockchain and manages the process of checking for the finality and the confirmation of the transaction. Altogether, that's three things.
00:06:19.688 - 00:07:29.708, Speaker A: A get for educational information, a post request to build a transaction and a submission from the client side. Smart messages extend Solana pay in at least four ways. We're starting with four enhanced status, state persistence, multi action support, and multi party support. We're going to cover the first two in more detail now there are five enhanced, ready, invalidated, executing, succeeded and failed transaction request services in a smart message context, do validation to check whether a transaction is ready or invalidated. Ready is equivalent to there being no status in the traditional Solana pay specification. Invalidated is, for example, useful if the Mint has sold out or the voting period is over, or any other use case you could imagine here. Executed, completing, and failed are all managed client side in this context, but the transaction request service has a responsibility to show the client what kinds of displays the user should see in any of those environments.
00:07:29.708 - 00:08:21.378, Speaker A: So we extend the label and icon so that either one of them can be more than just a string. It can also be nested JSON in order to support the various states you see here, as well as because this is a messaging environment, the sender and the receiver. So I'm going to point out one thing here. A sender would see that they've requested 20 Sol from someone, and the receiver would see the call to action to send 20 souls. In this context, the transaction request service is returning all of this information because it knows nothing about the status of the transaction. The transaction is being submitted by the client, and then the client uses the statuses that it sees while interacting with Solana to then render the appropriate information for the end user. Messages are long lived, state should be too.
00:08:21.378 - 00:09:12.270, Speaker A: So we just talked about various statuses, but we didn't talk about how we store them. This is the next major extension to the Solanapay spec with smart messaging, which is the existence of a state service. We introduced this new state service in between the client and the transaction request service to manage many of the processes we just talked through so that the user doesn't have to be present while various steps are being executed. The first part of the state service is adding a get and post passthrough request routes to manage the process of talking to various transaction request services out in the world. I want to clarify that there are many heterogeneous transaction request services in the world. Every project can make one. It is open and decentralized, but there can just be one state service.
00:09:12.270 - 00:10:08.692, Speaker A: We intend to run one, but anyone can. As those calls are made through to various transaction request services, the state service manages storing the metadata retrieved in a database. This is important caching this is important because caching reduces validation load if transaction request services are busy validating whether the status of a smart message is ready or invalidated or otherwise. Once you enter invalidated or succeeded, there's no reason to continue to do validation. So terminal states caching is especially useful for those. And then lastly, the state service manages transaction execution. The reason this is important is because the user can ship off, tap a smart message and then they can turn their phone off, they can delete the app, they can throw their phone in a river, they can do whatever they want.
00:10:08.692 - 00:10:56.416, Speaker A: It's important that that information eventually succeed so that the message status is correct in the end. And the last point we'll make on persistence is how is persistence tracked? Smart messages are uncoupled from messages themselves. The Solanapay spec and the smart message spec are URL encoding of information. You'll see here. The message sent to a user is minting is now live and then a Solana pay URL. What we do is we extend that to add a smart message id and then clients, when they see this id, they interpret that as it is my responsibility to now ship this to a state service which will then manage the process. The last thing we'll talk about here, there's one more topic, is adding additional metadata.
00:10:56.416 - 00:11:32.424, Speaker A: As you saw, the label and icon for Solanapay is relatively simple. It's educational, but we are mostly familiar with link previews in the world. So the smart message spec also supports titles and descriptions to give users a more familiar experience interacting with these smart messages. And on the topic of link previews, users don't send each other API links in the world. We send each other links to websites. But everything we've talked about up until now are URL's. They're APIs that build transactions headlessly.
00:11:32.424 - 00:12:34.084, Speaker A: The smart message specification will also include the ability to add a metaproperty into the URL's on your sites. That is a dialect smart message compatible property. By doing this, and by adding, as you see here, a solanapay URL into your site's HTML in the header, you can add a button to your link previews. We think this is a small but really profound enhancement to how we share information on the Internet. Link previews transformed the way that we share and act socially about the Internet. URL's are the backbone of that experience and now we can not only read them, but we can also interact with them. All right, zooming out, what have we covered so far? All of the things that we've talked about with smart messaging, what we're saying is you can basically take any button, any wallet authenticated button on the Internet and you can share it with people.
00:12:34.084 - 00:13:17.464, Speaker A: This kind of interaction is a small but profound improvement to how we interact with each other, because engagement is precious. Smart messages give your users the fastest way to act on your calls to action coming in the future spec are some of the things that we itemized out earlier on in the talk. Multi action smart messages you saw, one of our examples was for realms. Obviously you wouldn't want to just vote yes. You might want to vote no. I'm sure they want you to vote yes. Multiparty smart messages everything that we talked about so far is one on one.
00:13:17.464 - 00:14:13.276, Speaker A: We are introducing support for group chat, and there are all kinds of interesting smart message use cases for sharing them inside of multiparty environments. And of course, sign message smart messages. If any of you have been paying close attention, there is an enhancement to the Solana pay spec to not only support transaction requests, but to also support sign message requests. And this is powerful because it allows you to now interact with all kinds of resources that are off the blockchain, everything we just talked about. Imagine doing that, talking to off chain services instead of necessarily submitting transactions. So as we wrap up, I want to talk about one more thing here. The smart message, specifically messaging in web3.
00:14:13.276 - 00:14:55.260, Speaker A: And these kinds of new technologies need a consumer grade messaging application. At breakpoint two days ago, 36 hours ago, we were delighted to announce the dialect app. We are open source developer tooling, but we cannot wait for the future and we are thrilled to launch this with all of you. So the Dialect app is our consumer messaging product that we have launched with full support for smart messaging. Dialect is available today on the iOS App Store. You can download it now. This information has not been shared with anyone outside of Breakpoint.
00:14:55.260 - 00:15:30.360, Speaker A: We have been sharing this with our friends and we love the Solana community and we want you all to see it first. It is iOS only. Android will be coming soon. This is a pre release in app waitlist, but we have a really fun experience we think you're going to enjoy here. When you get into the app, if you invite your friends, you will earn a limited run NFT sticker pack these are tickets that will redeem NFT sticker packs. We are incredibly excited about this. I'm just going to take a minute to describe it.
00:15:30.360 - 00:15:58.024, Speaker A: These are NFTs like anything else, but they are animated. They're emotional. They are sticker packs like the ones that you love to use in other messaging and chat products. But you can buy and sell them, you can trade them and you can collect them. Early users of the dialect app will have privileged access to this. We have OG packs, Genesis packs, we've got special edition packs. And we've got some other exciting stuff in there too.
00:15:58.024 - 00:16:21.624, Speaker A: As I said, Android coming soon. But most importantly, we are already deployed on Saga. We have saga phones that we are using here. And we will be launching on Saga on day one. So if you are interested in seeing what messaging on saga looks like, come find us. I am going to point at Kevin in the front row here. He is our mobile developer who has access to our saga.
00:16:21.624 - 00:17:07.446, Speaker A: This is not a website. Dialect is a mobile app built specifically for Saga. And working with the Saga team, we are the first mobile native application on Saga beyond Phantom and Solveflare and the other wallets. It has been an amazing experience for us to work with the saga and Solana mobile teams. Everything that you saw here, this a huge part of the last few months of our motivation was the launch of the saga phone and Solana mobile. So we're thrilled to be able to present today. Messaging is a mobile experience first and foremost.
00:17:07.446 - 00:17:28.854, Speaker A: And we cannot wait to see the proliferation of mobile messaging and mobile apps in general on saga. Thank you. Take questions. We have a couple minutes.
00:17:34.714 - 00:18:08.754, Speaker B: Hey, if I understand correctly, what happened, the state component of this whole system is pretty much mandatory, right? If you add this id into the Solana URL, then it automatically expects that there will be this state component that will be using it. What are the scenarios when you, for example, suddenly do not have access to this state service at all? You just have the URL and for some reason. For example, I know the Internet just dies for some reason. What happens?
00:18:09.764 - 00:18:50.600, Speaker A: So, in general, when you're using the Internet and the Internet dies, things typically go wrong. But this is an excellent question. I mentioned this at the beginning of the talk and could reemphasize it. Smart messages have been designed to be completely compatible with the stateless Solanapay specification. All of what you saw around minting completed success, all of that is an improvement to the user experience, but is not necessarily mandatory. The state service can be removed entirely and state can be persisted locally to phones, anything at all. You can treat any database in the world as a source of truth, or not use anyone at all.
00:18:50.600 - 00:19:24.790, Speaker A: But you'll just have a better messaging experience if you manage state over time. If you were, for example, to store that state locally on your phone. One of the things we're really excited about in the dialect app. And with this, this stateful specification is, let's say I send you a transfer request and you act on it right away. I can actually see in the message that you're acting on it. So I, as the sender can see it completing, processing, and completing. And that wouldn't be possible, for example, if you were only storing state locally on your phone.
00:19:24.790 - 00:19:51.054, Speaker A: That said, we generally think of, let's say security, decentralization, privacy and privacy, performance experience and whatnot as general trade offs. And so we leaned toward create delightful experiences, but we wanted our specification to be as flexible as possible. So yes, you can use a completely stateless system, and that will work just as well. Any other questions? I think we're down to just a few more seconds.
00:19:57.114 - 00:20:07.954, Speaker B: Maybe a small follow up. So you're saying that also any database, do you mean rational database or NoSQL database? What kind of databases are comparable?
00:20:08.294 - 00:20:50.230, Speaker A: I think that's probably entirely up to the developer and whatever problems that they're solving for. In general, messaging is very high volume and needs high performance. And so I would lean toward databases like that should also clarify. Dialect intends fully to run the state service for the dialect app, and any other inboxes that are powered by dialect in the world should probably use that as well. Projects are required to build the transaction request services. You can think of them as like the link preview builders that power all the websites that you love throughout the Internet. But we are developers, we're geeks, and we wanted to share a little bit about it.
00:20:50.230 - 00:20:57.094, Speaker A: Most folks will not have to think about it. All right, I think that's it. I think we're at time. Thank you.
