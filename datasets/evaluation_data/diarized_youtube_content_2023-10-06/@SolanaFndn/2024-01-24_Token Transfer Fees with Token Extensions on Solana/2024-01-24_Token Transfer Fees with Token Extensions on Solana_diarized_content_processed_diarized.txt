00:00:05.200 - 00:00:45.254, Speaker A: GM welcome to this episode of Solana Bytes. In this series, we're taking a look at all of the extensions on the Token 2022 program. In this episode, we're looking at the transfer fee extension. So with any form of transaction, there's often a desire to collect or apply a fee, similar to a small service charge every time you transfer money at a bank, or the way royalties or taxis are collected for particular transfers. The original Token program has no mechanism for this. The workaround was the freezer users account and forced them to go through a third party. With Token 22, you can actually configure a transfer fee directly on a mint, enabling fees to be collected at the protocol level.
00:00:45.254 - 00:01:13.548, Speaker A: So every time you transact with a given mint, the specific fee is set aside in the recipient account. This fee is actually untouchable by the recipient and can only be accessed by the withdrawal authority. So this guide walks you through how to use the transfer fee mint extension to add a transfer feed to a mint, and how to access all of the withheld fees. So, let's take a look. So, in this script, there's quite a few different things going on, so let's.
00:01:13.596 - 00:01:15.516, Speaker B: Unpack exactly what's happening.
00:01:15.700 - 00:01:22.984, Speaker A: So, first, we connect to the Devnet cluster, and we create a new token mint. With the transfer fee extension applied.
00:01:23.514 - 00:01:25.322, Speaker B: We then create two new token accounts.
00:01:25.338 - 00:01:36.434, Speaker A: For that mint, one called source, the other one called destination. And then we mint a certain amount of tokens to the source account so that we can, in our example, transfer it to the destination account.
00:01:36.594 - 00:01:38.186, Speaker B: So we then transfer from the source.
00:01:38.250 - 00:02:03.314, Speaker A: To the destination, and we'll get to see that the transfer fee was actually taken and withheld in the destinations account. So after we've done the transfer these tokens that are withheld at the destination account, we want the ability to find them so we can recover these withheld tokens. So we then iterate over all of the token accounts for that particular mint.
00:02:03.434 - 00:02:07.018, Speaker B: In our case, we just have two. And then we find all of the.
00:02:07.066 - 00:02:14.402, Speaker A: Accounts that have a withheld fee. So we can see that the only account that we can find is one.
00:02:14.418 - 00:02:16.826, Speaker B: Of them, and that's the destination account.
00:02:16.970 - 00:03:11.574, Speaker A: So this is correct, because again, it's the red recipients accounts where the fees are withheld. So then we then go about using the new function to withdraw all withheld tokens from a particular account. And in that case, again, we only have one token account to withdraw from, and we do just that. So in this guide, we're going to walk through exactly how to set up our mint with the transfer fee extension, how to transfer between two token accounts, and then how to withdraw all fees that have been withheld in the various accounts. At the final stage, we'll then look at how we can permissionlessly transfer all of the withheld tokens from an account that we have to the token mint. And then also how this withdrawal authority can transfer tokens that are withheld in that mint to any given account. So let's dive into the code and take a look.
00:03:11.574 - 00:03:13.342, Speaker A: So I'm going to create at a.
00:03:13.358 - 00:03:19.314, Speaker B: New directory, call it SPL token transfer fees. I'm going to CD into this directory.
00:03:19.854 - 00:03:24.542, Speaker A: Going to init a new NPM project. Then I'm going to go ahead and.
00:03:24.598 - 00:03:26.794, Speaker B: Install the required packages.
00:03:34.414 - 00:03:37.514, Speaker C: Now we're going to open this up in versus code.
00:03:40.754 - 00:03:42.666, Speaker B: So we're going to create our index.
00:03:42.730 - 00:03:49.854, Speaker C: File and just add some typescript type checking for us.
00:03:50.754 - 00:04:06.134, Speaker A: Cool. So first we're going to start off by setting up our script to create a new token mint. So we're going to establish a connection to the Devnet cluster. We're going to generate a new pay account and fund it. And then we're going to create a new token mint using the Token 22 program.
00:04:07.134 - 00:04:55.094, Speaker B: So we have our connection. We're going to take cluster API definite and confirmed. We're then going to create our payer who's going to pay for all of our transactions, and then we need to fund this account. I need to wait for this to finish.
00:04:58.214 - 00:05:02.334, Speaker C: Section takes a signature, which is the.
00:05:02.374 - 00:05:10.634, Speaker B: Airdrop, and then it needs a recent latest block hash. Cool.
00:05:11.014 - 00:05:19.314, Speaker A: So now that we have that setup out of the way, we now want to configure the properties that we need for our token mint.
00:05:19.774 - 00:05:23.126, Speaker C: So we have the mint authority who.
00:05:23.150 - 00:05:25.354, Speaker A: Has the ability to mint new tokens.
00:05:26.284 - 00:05:33.244, Speaker B: We have the actual mint account address. So this is just a new key.
00:05:33.284 - 00:05:37.784, Speaker C: Pair and we need just the public key.
00:05:41.884 - 00:05:44.292, Speaker A: We then now have a new authority.
00:05:44.348 - 00:05:50.460, Speaker B: That's the transfer fee config authority. And this is the authority that can.
00:05:50.492 - 00:05:57.644, Speaker C: Modify the transfer fee transfer feed config authority.
00:06:01.144 - 00:06:09.272, Speaker A: Then we have the withdraw withheld authority. And this is the authority that can move tokens that are withheld either on.
00:06:09.288 - 00:06:12.204, Speaker B: The mint or the various token accounts.
00:06:13.504 - 00:06:26.110, Speaker C: So withdraw withheld authority. Then we set up our decimals, which.
00:06:26.142 - 00:06:29.154, Speaker B: We'Ll just leave as nine, which is the default.
00:06:29.614 - 00:06:31.454, Speaker A: And then there's some more configurations.
00:06:31.534 - 00:06:34.550, Speaker C: So we need to set our fee.
00:06:34.582 - 00:06:40.754, Speaker A: Basis point, and this is the percentage fee that's going to be taken from every transfer.
00:06:41.134 - 00:06:46.720, Speaker B: So const fee basis points. We're going to set that to 50.
00:06:46.912 - 00:07:37.784, Speaker A: And this is actually equivalent to 0.5%. And then we're also going to configure the maximum fee. So this is saying that especially like you don't want to add a burdensome tax on transfers of a high value. So what this is saying is that I want to set my fee basis points to 50, but I never want to collect any transaction fee above 5000. So if the percentage works out to be higher than that, we're just going to take the max fee, which in this case is set to 5000. Then we just want to figure out the length of this account. And for that we can use the getment lend helper function.
00:07:37.784 - 00:07:42.604, Speaker A: And we pass in an array of extensions. And in this case, we're only having.
00:07:43.264 - 00:07:48.284, Speaker C: One extension, which is the transfer fee config.
00:07:49.984 - 00:07:51.984, Speaker B: Then we work out the amount of.
00:07:52.024 - 00:08:03.084, Speaker C: Lamports needed for this account size minimum, and that's the mint length.
00:08:04.744 - 00:08:07.672, Speaker A: So with all of that config out.
00:08:07.688 - 00:08:09.806, Speaker B: Of the way for particularly mint, we.
00:08:09.830 - 00:08:13.430, Speaker A: Now need to build the set of instructions.
00:08:13.582 - 00:08:15.510, Speaker B: One, to create a new account.
00:08:15.702 - 00:08:24.274, Speaker A: Two, to initialize the transfer fee extension on that account, and then initialize this new account as a token mint.
00:08:25.174 - 00:08:39.693, Speaker B: So our first instruction is the create account instruction. And it's going to take a from.
00:08:40.553 - 00:08:42.929, Speaker C: Just our payer, it's going to fund.
00:08:42.961 - 00:08:45.345, Speaker B: This new account, a new account public.
00:08:45.409 - 00:08:51.493, Speaker C: Key is the mint. The space required is the mint len.
00:08:52.833 - 00:08:58.761, Speaker B: The amount of lamports. And then finally the program id, which.
00:08:58.777 - 00:09:09.714, Speaker A: Is the token 22 program. The next, the next instruction that we need is to initialize the transfer fee extension. And for that we have a new helper function.
00:09:11.494 - 00:09:21.046, Speaker B: So const initialize transfer fee config calls.
00:09:21.110 - 00:09:28.978, Speaker C: Create initialize transfer fee config instruction, which.
00:09:29.026 - 00:09:32.858, Speaker A: Takes the mint the transfer fee config.
00:09:32.906 - 00:09:40.494, Speaker B: Authority, which we have. It takes the withdrawal withheld authority, which we also have.
00:09:40.914 - 00:09:46.134, Speaker A: It then takes the transfer fee basis points, which we just called fee basis points.
00:09:46.514 - 00:09:49.814, Speaker B: It takes the maximum fee, which we called max fee.
00:09:50.634 - 00:10:01.352, Speaker A: Then it takes the program id, which is the token 22 program. Then the final instruction is just to initialize this account as a token mint.
00:10:01.528 - 00:10:06.404, Speaker C: Const initialize mint instruction.
00:10:07.744 - 00:10:11.524, Speaker B: Create initialize mint instruction.
00:10:12.064 - 00:10:15.136, Speaker A: This takes the mint the decimals, the.
00:10:15.160 - 00:10:18.568, Speaker C: Mint authority, the freeze authority, which we'll.
00:10:18.576 - 00:10:23.464, Speaker A: Just set the same as the mint authority. It then takes in.
00:10:25.484 - 00:10:27.068, Speaker B: The program id.
00:10:27.156 - 00:10:29.184, Speaker A: Which is the token 22 program.
00:10:30.004 - 00:10:30.412, Speaker C: Great.
00:10:30.468 - 00:10:38.332, Speaker A: So now we have the relevant instructions. We can now create a new transaction, add all of these instructions, and send.
00:10:38.348 - 00:11:01.488, Speaker B: It to the network. So const transaction. So we have the create account instruction we have the initialize transfer config instruction and then finally the initializement instruction.
00:11:01.576 - 00:11:05.456, Speaker C: So that should be these three, and.
00:11:05.480 - 00:11:06.792, Speaker A: Then we can just send that to.
00:11:06.808 - 00:11:16.452, Speaker B: The network, send and confirm, which takes.
00:11:16.468 - 00:11:20.652, Speaker A: Our connection, which we have our transaction, which we have the signers, which will.
00:11:20.668 - 00:11:34.540, Speaker B: Be the payer and the mint keeper. And for options we have none. So we're going to go ahead and actually run this at this stage. So at this stage it will create.
00:11:34.572 - 00:11:42.174, Speaker A: For us this transaction. And within this transaction, again, we should see that it created a new token mint with the transfer fee extension applied.
00:11:42.334 - 00:11:43.550, Speaker B: So let's just go ahead and run.
00:11:43.582 - 00:11:44.874, Speaker A: This at this stage.
00:11:46.814 - 00:11:47.886, Speaker B: And if we were to take a.
00:11:47.910 - 00:12:03.446, Speaker A: Look at this transaction signature on Solscan. So again, we see that we created a new account. We initialize the transfer fee config extension.
00:12:03.590 - 00:12:06.350, Speaker B: With the various configuration options, and then.
00:12:06.382 - 00:12:09.518, Speaker A: We initialize that as a new token mint. So if we're to take a look.
00:12:09.526 - 00:12:11.766, Speaker B: At this mint, we should also get.
00:12:11.790 - 00:12:26.846, Speaker A: That confirmation that the transfer fee basis points was added and correctly at 0.5%. So now that we've seen how that works, the next thing that we're going to do is we're going to look.
00:12:26.870 - 00:12:30.094, Speaker B: At how to transfer tokens between two.
00:12:30.134 - 00:12:39.270, Speaker A: Token accounts that have this transfer fee configuration set. So in order to do that, we actually have to use a new helper.
00:12:39.302 - 00:12:42.494, Speaker B: Function that is titled transfer checks with fee.
00:12:42.654 - 00:13:06.946, Speaker A: And this transfer only succeeds if the fee is calculated correctly, to avoid any surprise deductions during the transfer. So we'll continue our script to create new token, two new token accounts that we can transfer between. First, we'll need to create these new, these two new token accounts, mint some new tokens to one of those accounts and then transfer the tokens between them.
00:13:07.090 - 00:13:27.354, Speaker B: So let's go back to our script and we'll leave this here. Now we'll start the transferring tokens portion. So we're going to create some new keys. Then we're going to have our source.
00:13:27.734 - 00:13:36.314, Speaker C: Account, and we're going to use the create account function that takes a connection.
00:13:36.854 - 00:13:40.566, Speaker B: Our payer, our mint, the owner, which.
00:13:40.590 - 00:14:05.414, Speaker A: Is just this keeper that we just created. It then takes a keeper which we'll leave undefined so that we can get the associated token account, the options also undefined, and finally, the token 22 program. This is going to create for us one year account. We now want to mint some tokens to the source account.
00:14:06.234 - 00:14:10.614, Speaker B: So we're going to have the mint amount. It's going to be.
00:14:12.514 - 00:14:13.162, Speaker C: Let'S just make.
00:14:13.178 - 00:14:14.254, Speaker A: This more legible.
00:14:18.374 - 00:14:21.634, Speaker B: And then we're going to say await mint two.
00:14:22.294 - 00:14:27.046, Speaker C: So we're just minting these 1 billion.
00:14:27.110 - 00:14:36.054, Speaker B: Tokens to this source account. So this mint two actually just want to get the autocomplete. Oh great, I've already done that. Now.
00:14:36.134 - 00:14:42.262, Speaker A: So you have the connection. It then takes a payer, which is our same payer.
00:14:42.398 - 00:14:46.316, Speaker C: It takes the mint, it then takes.
00:14:46.340 - 00:14:49.624, Speaker B: The destination, which is going to be our source account.
00:14:51.204 - 00:14:54.944, Speaker A: It takes the authority, which is going to be our mint authority.
00:14:56.444 - 00:14:59.904, Speaker B: It takes the amount, which is going to be this mint amount.
00:15:01.164 - 00:15:05.412, Speaker A: It then takes array of signers. If this was a multisig, which it's.
00:15:05.468 - 00:15:08.332, Speaker B: Not, it takes confirm options.
00:15:08.428 - 00:15:09.372, Speaker A: We don't have any.
00:15:09.468 - 00:15:12.944, Speaker B: And then finding the program id, the token 22 program.
00:15:13.324 - 00:15:25.396, Speaker A: So by this step, our source account will now have a billion tokens. Now we're going to create the secondary accounts that we can transfer a portion of these tokens to.
00:15:25.580 - 00:15:36.344, Speaker B: So we're going to have a new account. Just call this account keeper. Keeper generate. We then create this new account.
00:15:37.144 - 00:15:45.604, Speaker C: Destination count equals await create account.
00:15:47.464 - 00:15:49.328, Speaker A: So for this one, again we're going.
00:15:49.336 - 00:15:56.640, Speaker C: To have our connection, our payer, the mint, the owner, we're going to set.
00:15:56.672 - 00:15:58.124, Speaker B: As the same owner.
00:15:58.704 - 00:16:06.340, Speaker A: And this time the keeper. We're going to use this account, this new account that we just generated, and.
00:16:06.372 - 00:16:09.344, Speaker B: Then options, again undefined.
00:16:10.044 - 00:16:19.060, Speaker A: And the program id is the token 22 program. So this is simply just going to create for us our second account. And now we can transfer from the.
00:16:19.092 - 00:16:32.186, Speaker B: Source to the destination. So we're going to set up how many tokens we're going to transfer and.
00:16:32.250 - 00:16:34.210, Speaker A: We'Re just going to send a million.
00:16:34.362 - 00:16:44.426, Speaker B: Out of the billion tokens that we have. Then again, we need to calculate the.
00:16:44.610 - 00:16:50.098, Speaker A: Fee to use this new transfer checked with fee function. So the fee is going to be.
00:16:50.146 - 00:16:54.054, Speaker C: The transfer amount.
00:16:56.204 - 00:17:02.064, Speaker B: Times our basis points, which we set to 50.
00:17:02.724 - 00:17:11.212, Speaker A: And then we're going to divide this by 10,000. And the reason why it's 10,000 is.
00:17:11.228 - 00:17:17.340, Speaker B: Because one basis point is one 100th.
00:17:17.372 - 00:17:20.916, Speaker A: Of a percent, which is equivalent to 0.01%.
00:17:21.060 - 00:17:22.396, Speaker B: So to get the right amount of.
00:17:22.420 - 00:17:32.204, Speaker A: Fee, we need to times it by the 10,000. So for this we are expecting the fee to actually be 5000 tokens from a million.
00:17:32.864 - 00:17:34.848, Speaker B: So now we can use the transfer.
00:17:34.896 - 00:17:36.840, Speaker A: Checked with fee instruction.
00:17:36.952 - 00:17:46.456, Speaker B: So const. Transfer. Let's get the transfer signature. So await transfer checked with fee which.
00:17:46.480 - 00:17:51.080, Speaker C: Takes a connection, a payer, the source.
00:17:51.152 - 00:17:53.524, Speaker B: Which we call the source account.
00:17:55.094 - 00:17:58.926, Speaker A: It takes the mint the destination, which.
00:17:58.950 - 00:18:05.422, Speaker C: Is the destination account, the owner, which.
00:18:05.438 - 00:18:06.734, Speaker A: Is the owner that we've already set.
00:18:06.774 - 00:18:09.462, Speaker B: Up the amount, which is going to.
00:18:09.478 - 00:18:14.462, Speaker C: Be the transfer amount, the decimals which.
00:18:14.478 - 00:18:18.994, Speaker B: We already set up as nine, the fee which we just calculated there.
00:18:19.734 - 00:18:22.110, Speaker A: Then it takes the signers, which for.
00:18:22.142 - 00:18:26.744, Speaker B: Us is blank because it's not a multi sigma, we have no options.
00:18:26.864 - 00:18:41.720, Speaker A: And then finally the token 22 program. So at this junction, we have now successfully transferred a million out of the 1 billion tokens. But when we look at this destination.
00:18:41.792 - 00:18:45.072, Speaker B: Account, we should see a million minus.
00:18:45.208 - 00:18:46.992, Speaker A: The 5000, which is going to be.
00:18:47.008 - 00:18:48.984, Speaker B: The fee that is withheld.
00:18:49.144 - 00:18:51.192, Speaker A: So let's actually run this at this stage.
00:18:51.248 - 00:18:57.218, Speaker B: Also, we don't need to look at.
00:18:57.226 - 00:19:07.570, Speaker A: The first one since we've already seen the example when we ran this. So the interesting one now is going to be this signature for the actual transfer. So again, if we look at this.
00:19:07.642 - 00:19:15.666, Speaker B: On Solscan, we'll see that we invoked the transfer checks with fee instruction to.
00:19:15.690 - 00:19:28.754, Speaker A: Send from our destination, sorry, from our source account to our destination account. And we can see that the fee indeed was the 5000 tokens. So if we were to look at.
00:19:28.834 - 00:19:30.986, Speaker B: What is now left in this destination.
00:19:31.050 - 00:19:45.106, Speaker A: Account, even though we sent the million tokens, you can see that we are 5000 short because that's the withheld amount. And actually, also we can see in this information what that withheld amount on.
00:19:45.130 - 00:19:46.574, Speaker B: This particular token is.
00:19:47.794 - 00:20:01.800, Speaker A: So that's actually not the end, because now that, if we just look at here, now that there's a withheld amount, we're now going to look at how to actually find all of the token.
00:20:01.832 - 00:20:04.080, Speaker B: Accounts that have a withheld amount and.
00:20:04.112 - 00:20:16.184, Speaker A: Actually how to withdraw these withheld tokens to a new account. So let's jump straight back into our script and see how to do that. So now we want to find and.
00:20:16.264 - 00:20:21.754, Speaker C: Withdraw withheld tokens from accounts.
00:20:23.454 - 00:20:25.198, Speaker B: So, because in our mint there's only.
00:20:25.246 - 00:20:43.550, Speaker A: Two accounts and we've just transferred just once, it means that there's only one account that would have a withheld amount, which is the destination account. But in order to do this, we need to first iterate over all the token accounts for the mint and then filter out the accounts that have a withhold amount.
00:20:43.702 - 00:20:45.886, Speaker B: So to get all of the accounts.
00:20:45.910 - 00:20:48.782, Speaker A: For Mint, we can say cons, all.
00:20:48.838 - 00:20:56.878, Speaker C: Accounts equals await connection dot get program accounts.
00:20:57.046 - 00:21:00.034, Speaker A: We have the program id, which is the token 22 program.
00:21:00.494 - 00:21:18.134, Speaker B: Then for the options, we set commitment to confirmed. And then we set our filters. MemcMp offset is zero.
00:21:18.594 - 00:21:24.494, Speaker C: And then the bytes we want just this mint string.
00:21:25.314 - 00:21:27.026, Speaker B: So this will now actually give us.
00:21:27.090 - 00:21:42.054, Speaker A: All of the token accounts for this mint. And then once we now have all of these accounts, we need to again filter out all of the accounts that do have a withheld amount.
00:21:44.314 - 00:21:44.946, Speaker B: And say.
00:21:45.010 - 00:22:01.174, Speaker C: Constraw from going to say equals all accounts dot filter.
00:22:02.694 - 00:22:04.894, Speaker A: And we're going to get the, oops.
00:22:05.014 - 00:22:17.846, Speaker B: Going to get the account info. And we want to first unpack this.
00:22:17.870 - 00:22:21.714, Speaker A: Account, or in other words deserialize this account info.
00:22:22.374 - 00:22:28.110, Speaker C: So the account equals, there's a nice.
00:22:28.142 - 00:22:31.734, Speaker A: Function called unpack account where we can give it the address, which is the.
00:22:31.774 - 00:22:39.124, Speaker B: Account info pubkey and the info that we're looking for is accountinfo account.
00:22:40.424 - 00:22:51.672, Speaker A: And then we need to pass in the token 22 program. So this gives us the serialized account. Then from here we need to get.
00:22:51.728 - 00:22:59.416, Speaker B: The transfer fee amount. And again, there's a nice helper funk.
00:22:59.480 - 00:23:07.904, Speaker A: Helper function called get transfer fee amount that we can pass in this account. And this simply kind of like extract.
00:23:07.984 - 00:23:12.872, Speaker B: The transfer fee extension data from this particular account.
00:23:13.048 - 00:23:17.088, Speaker A: So we get the transfer fee amount and then we now need to check.
00:23:17.176 - 00:23:22.400, Speaker B: That if the transfer fee transfer fee.
00:23:22.512 - 00:23:30.072, Speaker C: Amount isn't null and the transfer fee.
00:23:30.208 - 00:23:43.964, Speaker B: Amount dot withheld amount is greater than zero, we can return this account info pubkey.
00:23:44.984 - 00:23:48.416, Speaker C: So now this will give us all.
00:23:48.440 - 00:23:53.244, Speaker A: Of the accounts that have a withheld amount.
00:23:56.824 - 00:24:01.904, Speaker C: So just to check. So we filter and we're only returning the public key.
00:24:04.644 - 00:24:07.796, Speaker B: So since we return all of this.
00:24:07.820 - 00:24:11.876, Speaker A: We'Re going to get the pub keys. We want to then just have a.
00:24:11.940 - 00:24:15.228, Speaker C: Map function that's going to get the.
00:24:15.276 - 00:24:20.708, Speaker B: Account info and just return the account info pubkey. That's what we need.
00:24:20.836 - 00:24:21.664, Speaker A: So that.
00:24:24.444 - 00:24:26.044, Speaker B: This would just be an.
00:24:26.164 - 00:24:27.316, Speaker A: Array of pub keys.
00:24:27.380 - 00:24:28.144, Speaker B: Excellent.
00:24:28.874 - 00:24:37.050, Speaker A: Then we can now use the withdraw withheld tokens from accounts function that would.
00:24:37.202 - 00:24:44.394, Speaker B: Allow us to withdraw all of the withheld fees in these given token accounts.
00:24:44.554 - 00:24:46.442, Speaker A: Into a particular account.
00:24:46.618 - 00:24:49.494, Speaker B: So in our case, let's just say.
00:24:51.114 - 00:25:13.046, Speaker C: Withdraw withheld tokens from account signature equals await withdraw token from accounts.
00:25:13.190 - 00:25:39.924, Speaker A: This takes a connection payer the mint and then the destination, which is where we want to send these fees to. And I think actually it's better if we send it just for this example, back to the destination account so that we can see that extra 5000 tokens would actually be added or, sorry, credited back to the destination account. We then need the authority, which is going to be the withdraw withheld authority.
00:25:40.344 - 00:25:43.124, Speaker B: Multisigners again, that is blank.
00:25:43.504 - 00:25:45.604, Speaker A: The sources is going to be.
00:25:49.424 - 00:25:49.800, Speaker B: It'S.
00:25:49.832 - 00:25:52.232, Speaker A: An array of public keys, which is.
00:25:52.248 - 00:25:59.164, Speaker B: Going to be this account to withdraw from that we're just going to rename.
00:26:00.584 - 00:26:03.964, Speaker C: To say account to withdraw from.
00:26:06.464 - 00:26:06.824, Speaker B: And.
00:26:06.864 - 00:26:12.616, Speaker C: Then we take the confirm options and.
00:26:12.640 - 00:26:19.062, Speaker B: Then the token 22 program. So actually we don't even need to.
00:26:19.158 - 00:26:35.314, Speaker A: Log this transaction signature because for us to validate that it's actually worked, we can just look at the destination account and see that an extra 5000 tokens have been sent to that account. So let's go ahead and run this script again.
00:26:36.774 - 00:26:37.542, Speaker C: But you know what?
00:26:37.598 - 00:26:49.642, Speaker B: Let's just log this out for the giggles. Awesome. So now we can take a look.
00:26:49.658 - 00:26:51.174, Speaker A: At this last signature.
00:26:55.514 - 00:26:56.026, Speaker B: And you can.
00:26:56.050 - 00:27:01.374, Speaker A: See again we've called the withdrawal withheld tokens from account instruction.
00:27:02.314 - 00:27:07.534, Speaker B: And if we were to take a look at the destination.
00:27:11.074 - 00:27:15.378, Speaker C: Which is this the fee recipient, we would see that.
00:27:15.426 - 00:27:18.746, Speaker A: The withheld amount is zero and the balance is now one.
00:27:18.890 - 00:27:19.962, Speaker B: But if we had taken a look.
00:27:19.978 - 00:27:33.994, Speaker A: At this account at the point where we sent the transfer, which is at this point would have seen that 5000 tokens were held back and these 5000 tokens were then further credited when we.
00:27:34.074 - 00:27:36.870, Speaker B: Use the withdraw withheld token from account.
00:27:36.942 - 00:28:39.654, Speaker A: Instruction to send the 5000 tokens that were once withheld back into the account. So this is actually quite cool, but we're not done just yet. The final thing that you may need to do, considering that token accounts that hold any tokens, including withheld ones, can't be closed. So therefore a user may want to close a token that has some withheld transfer fees. So there's a new function called harvest withheld tokens to mint that users can permissionlessly clear out their account of withheld tokens. So let's also take a look at how that works. And then the additional thing to that is once users harvest those without tokens to the token mint, there's also a way for that same withdraw withheld authority to transfer the tokens that were sent to the mint to any other account.
00:28:39.654 - 00:28:43.754, Speaker A: So the first one we're going to look at is how to harvest withheld.
00:28:44.054 - 00:28:47.194, Speaker B: Tokens to the mint.
00:28:48.214 - 00:28:53.634, Speaker A: And for us to do that, there's just a simple helper function called harvest.
00:28:53.974 - 00:29:06.714, Speaker B: Withheldtokens to mint, which takes the connection, the payer, the mint, and then the source account. So in this case, we want to.
00:29:08.054 - 00:29:26.236, Speaker A: Transfer all of the withheld tokens from the destination account. So in the previous example that we sent the withheld tokens back to the destination account, we're actually going to comment out this step so that there are actually some tokens that are withheld so.
00:29:26.260 - 00:29:39.692, Speaker B: That we can permissionlessly send them back to the mint. And the last thing to do is, again, now that the user has harvested.
00:29:39.748 - 00:29:43.204, Speaker A: These withheld tokens to the mint. There needs to be a way for.
00:29:43.244 - 00:29:47.380, Speaker C: The withheld authority to be able to.
00:29:47.412 - 00:29:52.994, Speaker A: Transfer the tokens that were sent back to that mint to any other account. And to do this, we'll just say.
00:29:53.034 - 00:29:59.146, Speaker B: This is to withdraw withheld tokens from Mint.
00:29:59.330 - 00:30:01.202, Speaker A: There's a simple helper function that we.
00:30:01.218 - 00:30:17.362, Speaker C: Can use called withdraw withheld tokens from mint, which takes the connection, the payer, the mint, the destination in terms of.
00:30:17.378 - 00:30:21.100, Speaker A: Like where do you actually want to send these tokens?
00:30:21.132 - 00:30:29.220, Speaker B: Two, and we'll send it to the source account and the authority, which has to be the withdraw withheld authority.
00:30:29.412 - 00:30:45.380, Speaker A: So with this, we can now send all of the tokens that were sent to our token mint. We can send it to any given account. So let's go ahead and run this. But we need to just make one minor edit to the script to not.
00:30:45.412 - 00:30:48.064, Speaker B: Withdraw the withheld tokens.
00:30:49.004 - 00:30:50.236, Speaker A: And if that's the case, we don't.
00:30:50.260 - 00:30:53.332, Speaker C: Even need to run this, nor do.
00:30:53.348 - 00:31:05.980, Speaker A: We need to get all of the accounts. So this starts from the point where we have transferred from the source to the destination account. That means the destination account now has withheld tokens.
00:31:06.132 - 00:31:10.388, Speaker B: We then permissionlessly harvest those withheld tokens.
00:31:10.476 - 00:31:25.210, Speaker A: From the destination account and send it back to the mint. And then now we now withdraw the withheld tokens from the Mint to the source account. So at the end of this, to ensure that this has worked, the source.
00:31:25.242 - 00:31:27.826, Speaker B: Account will now have the 1 billion.
00:31:27.890 - 00:31:30.026, Speaker A: Tokens that was originally minted.
00:31:30.170 - 00:31:34.930, Speaker B: Because we minted the 1 billion tokens.
00:31:34.962 - 00:32:02.886, Speaker A: To the source account, we then transferred a million tokens to the destination account. That destination account will now have 5000 tokens withheld. We then permissionlessly send those 5000 tokens back to the mint and then withdraw, or, sorry, shall I say, send those withheld tokens from the Mint to the source account. So actually the source account shouldn't have.
00:32:02.910 - 00:32:12.274, Speaker B: A billion, it should have a billion minus the million. So let's now get that transaction signature.
00:32:16.374 - 00:32:17.874, Speaker C: And log that out.
00:32:20.294 - 00:32:22.034, Speaker B: And let's run our script.
00:32:24.694 - 00:32:37.402, Speaker C: We have been rate limited but fair not let us get a payoh that.
00:32:37.418 - 00:32:46.774, Speaker B: We know has tokens. We then can import.
00:32:52.034 - 00:32:53.374, Speaker C: The read file.
00:32:54.154 - 00:32:56.894, Speaker B: And rather than getting an airdrop.
00:32:59.674 - 00:32:59.986, Speaker C: Or.
00:33:00.010 - 00:33:06.084, Speaker B: Just fund our payer. So now we can run this again.
00:33:09.704 - 00:33:10.896, Speaker C: So we're going to take a look.
00:33:10.920 - 00:33:13.284, Speaker A: At this final transaction signature.
00:33:16.024 - 00:33:17.016, Speaker B: And we.
00:33:17.040 - 00:33:25.624, Speaker C: Would see that at the end of this that the tokens that were withheld.
00:33:25.664 - 00:33:35.708, Speaker B: At the recipient account once they were sent to the token mint, we then use the withdrawal withheld token withdrawal withheld.
00:33:35.876 - 00:33:41.220, Speaker A: Withdraw withheld tokens from mint function to send those withheld tokens that were sent.
00:33:41.252 - 00:33:43.340, Speaker B: To the Mint to the source account.
00:33:43.452 - 00:33:45.476, Speaker A: So the source account should have a.
00:33:45.500 - 00:33:53.412, Speaker B: Billion minus a million tokens, 0.99. So we can see the fee recipient.
00:33:53.508 - 00:34:13.968, Speaker A: At the end is our source account, and this source account has the 0.999 plus the 5000 tokens that were sent back. And you can see in the transaction history, first we created this account. We then minted the 1 billion tokens, which we can just confirm.
00:34:14.016 - 00:34:15.244, Speaker B: So that's the one.
00:34:18.424 - 00:34:40.554, Speaker A: We then transferred a million tokens to the destination account. From that destination account we harvested the withheld tokens to the token mint, and then we used the withdrawal withheld tokens from mint function to get those withheld tokens that were sent to the mint and send it back to our source account. So now we have that's where this.
00:34:40.634 - 00:34:42.466, Speaker B: Five comes from, which we can see.
00:34:42.490 - 00:34:47.194, Speaker A: Again from this transaction signature that the fee recipient is going to be our.
00:34:47.234 - 00:34:48.974, Speaker B: Source account that we created.
00:34:49.394 - 00:35:12.010, Speaker A: So to wrap this up, the transfer fee mint extension makes it much more easier to handle transfer fees because it's integrated them at the protocol level. It offers a superior Ux for both users and dapp developers, opening up new possibilities and use cases. I think the token that I've seen that actually implements this on Mainnet is.
00:35:12.042 - 00:35:15.122, Speaker B: The burn token Bern, and it's got.
00:35:15.138 - 00:35:37.594, Speaker A: Some like cool features and functionalities that wouldn't have been possible in the token program. So thank you for joining us for this episode on the Transox fee extension. Join us again to see other guides on how to use all of the other extensions that have been introduced in the Token 2022 program. I'm Colin from the Solana foundation developer Relations team. Until next time.
