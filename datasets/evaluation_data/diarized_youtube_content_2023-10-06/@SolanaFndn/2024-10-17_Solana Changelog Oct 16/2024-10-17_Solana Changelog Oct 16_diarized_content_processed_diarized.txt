00:00:03.920 - 00:00:10.665, Speaker A: Hello, everyone. Gm gm. Welcome to the Solana Changelog. I'm Nick from the Solana Foundation Devrel team and today I've got Jonas with me. How you doing, Jonas?
00:00:10.825 - 00:00:13.121, Speaker B: Hey, I'm doing great. How are you?
00:00:13.273 - 00:00:21.297, Speaker A: I'm doing amazing. I'm still sad and missing Singapore and break point, but you know, the changelog will continue. Me too.
00:00:21.481 - 00:00:25.649, Speaker B: It was the greatest break point ever. And island was also super nice.
00:00:25.777 - 00:00:27.329, Speaker A: Oh, did you go to Island, Al?
00:00:27.497 - 00:00:32.073, Speaker B: Yes, yes. I've been there for a few days. It was really, really nice. Yeah, yeah.
00:00:32.129 - 00:00:54.029, Speaker A: I'm jealous. I'm jealous. Well, let's go ahead and dive in. Let's. Let's talk about the SIMD for this week. So we've got SIMD180, the leader schedule migration. This is from Justin Starry at Anza, and basically what he's proposing in this SIMD is changing the way that the leader schedule sort of selects which validators are going to be in the leader schedule and actually cast their votes.
00:00:54.029 - 00:01:20.745, Speaker A: And right now, specifically it's using the node id, so the identity of the validator and what he's proposing is switching it to the stake account or the vote pub key of the validators. So in a nutshell, this sort of makes a lot of things easier and faster in the code a lot simpler in the future. And it'll make things like implementing slashing for validators that are trying to produce double blocks that'll be easier in the future, which is cool.
00:01:21.135 - 00:01:25.327, Speaker B: Yeah, I'm excited if slashing will actually come eventually.
00:01:25.511 - 00:01:26.235, Speaker A: Soon.
00:01:26.855 - 00:01:31.087, Speaker B: Yeah. And then we have a bunch of commits. So what is this one about?
00:01:31.271 - 00:02:02.401, Speaker A: Yeah, this one's actually kind of related to that simd. And my sort of assumption here is that Ashwin and jstari were going back and forth and they sort of had this realization and then created the SIMD from it. This basically changes the way some of the calculations are currently happening in the banking stage, using the vote account versus the node pub key, the validator identity. So they sort of changed the way that that code works. And my assumption is that they sort of had the realization and then they opened the SIMD to sort of fix everything later down the line.
00:02:02.593 - 00:02:12.855, Speaker B: Yeah, I think the tool should definitely be a simd since it's like changing also how the reward distribution is done after every epoch. So Firedancer probably also needs to have a say in this.
00:02:13.025 - 00:02:16.107, Speaker A: Yep, that's what the SIMD process is for.
00:02:16.291 - 00:02:20.803, Speaker B: Exactly. Then we have support complete slot status in Geyser.
00:02:20.979 - 00:02:47.341, Speaker A: Yeah, so this is an interesting one. It's relatively straightforward actually. Geyser plugins. You can add a custom plugin within Solana RPC to detect and handle all sorts of stuff. You can set up doing websockets and alerts and whatever you want. And this PR basically just adds the slot status so specifically for completed. So you can now subscribe with Geyser plugins to completed slots.
00:02:47.341 - 00:02:51.325, Speaker A: After every slot's completed, you can do whatever you want within a Geyser plugin.
00:02:51.485 - 00:02:59.469, Speaker B: Super cool. And this is a really funny one by kv. I always love when people put memes into their commits.
00:02:59.517 - 00:03:00.973, Speaker A: A little whimsy. It's good.
00:03:01.149 - 00:03:22.569, Speaker B: Scheduler was waiting for 100 milliseconds for packets during leader window. So apparently what he figured out is that during the leader window there is a parameter which lets the validator wait for 100 milliseconds if there's no packet scheduled. And he just changed this to 10 milliseconds. Right. I think you looked at the commit, is that right?
00:03:22.617 - 00:03:58.725, Speaker A: Yeah, I think there was literally just changing one number from 100 to 10 and basically it's a hard coded value to sort of the validator. The leader specifically would start accepting packets for 100 milliseconds and that's a fourth of the slot time that they have the sort of the amount of time that they have to actually vote and create their block. So if they're just sitting there idle waiting for additional things, additional packets, they could actually be less optimized and creating less blocks and less full blocks. So pretty simple change. It'll make validators just a little bit better.
00:03:59.105 - 00:04:09.889, Speaker B: Yeah, definitely a fun commit. It's good that people still have fun. I think KV is now also running his own validator. So it's very, very good dev to follow for sure.
00:04:10.017 - 00:04:11.385, Speaker A: Yeah, KV is awesome.
00:04:11.545 - 00:04:14.825, Speaker B: Yeah. And the last one, yeah, this one.
00:04:14.905 - 00:04:58.395, Speaker A: Is I think hands down my favorite in this week's commits. So someone from the Anza team added basically example code for how to create a standalone SVM application. So the example code they created was how to create your own JSON RPC that uses the svm. So like the Solana virtual machine, they both implemented the client and the server and an on chain program that can be executed. So they showed how to implement basically a custom simulate transaction. So if you're doing, if anyone's interested in building their own SVM compatible anything, this is sort of example code on how to do a whole bunch of different things, how the different crates and pieces sort of tie together. And this is really cool.
00:04:58.735 - 00:05:08.515, Speaker B: Yeah, I think it's really cool. Now you can use the SVM stack for your own projects basically. And it's actually in the Master of Anza xyz.
00:05:08.835 - 00:05:09.195, Speaker A: Yeah.
00:05:09.235 - 00:05:11.523, Speaker B: Yeah. So first class citizen now.
00:05:11.619 - 00:05:19.795, Speaker A: First class citizen. I like a SVM stack. We've got to come up with a cool name that we start talking about, the SVM stack. What is the stack? What's there?
00:05:19.955 - 00:05:24.051, Speaker B: Yeah, what is it? We should get a. Cool. It's definitely a good topic for a podcast.
00:05:24.163 - 00:05:28.855, Speaker A: Yeah. Speaking of good topics for podcast assembly.
00:05:29.635 - 00:06:08.787, Speaker B: Yeah. So you might have noticed that there is this person called Dean who is a big opponent of writing programs in assembly. He calls his followers the compiler disrespectors. And what he built is like a very nice tool which lets you very easily set up assembly programs. And if you never wrote something in assembly, we made a tutorial on it. And there is also some examples on it in the CU optimizations under Solana Developers. There's for example, a counter which shows you how you can just load an account, basically when you write an assembly, just get a byte array and then you can do whatever you want with it.
00:06:08.787 - 00:06:33.411, Speaker B: And it's kind of beautiful how you just get the raw bytes and then just shove some data in the right places. So it's kind of nice. You don't have any frameworks around it, no compiler that can screw anything up. It's just extremely hard to write. I would probably not recommend it for bigger programs. Hard to read. There's no checks on anything in it, no security checks and so on.
00:06:33.411 - 00:07:08.145, Speaker B: But there is actually use cases for it. So if you have one primitive that at the end of the transaction should like check your token balances or something, or something where you need very high performance, then you can actually write these primitives in assembly and have them be super fast. You can see a comparison. So an assembly program you can actually deploy in only two transactions, which is kind of crazy. And the counter only takes 4 Cu, so this one still says 6, but you can also do it in 4. And compared to an anchor program, which costs like 1.8 Sol almost to deploy, it's also much cheaper.
00:07:08.145 - 00:07:57.297, Speaker B: Yeah, there's another repository from Jean Cinque actually, which has a bunch of these examples. So it's also an assembly example, but there's also a C example, a Zig example, and a Rust example. So if you want to really look into optimizations, you can do that. And in the C optimization there's a few more things that you can optimize. Like there's for example, different entry points into your programs, different heap allocators. So if you really want to optimize your programs to a safe cu, then that's a good resource. And then last but not least, there's one really cool thing that we saw, which is I love that Alessandro, who is an answer engineer, if I'm not wrong about it, he is actually doing open source correctly.
00:07:57.297 - 00:08:34.885, Speaker B: So Zolana, as you may know, uses the QUIC protocol, which was originally developed by Google, and it uses the Quinn implementation of it. And Alessandro is now improving on the Quinn implementation and apparently what he managed to do is that this 500 GPPs, he can get 500,000 max size transactions per second. So apparently this is a very great improvement. And he's now giving it basically back to the public repository. And then Solana is improving the Internet for everybody. So I think that's a really nice thing to see.
00:08:35.315 - 00:08:51.667, Speaker A: Yeah, it's like the ultimate open source dream. Like people start using create open source code and technologies, other people use it and they sort of send those changes back upstream to the original source to make it faster for everyone. This is what open source is all about and it's beautiful.
00:08:51.851 - 00:08:59.555, Speaker B: Yeah. What also is beautiful is your Stack Exchange contributions. What a great segue.
00:08:59.595 - 00:09:01.055, Speaker A: That was a good segue. I love it.
00:09:01.715 - 00:09:21.635, Speaker B: So we have Jimmy here on Top Place. Then we faces, I think Shalda, Dylan and Dev for all. I think Dev4all. I've seen a few times already. There's Black Horse and Radoix. And yeah, thank you for contributing. You're making it easier for everybody to build on Solana for the current and the future developers.
00:09:21.635 - 00:09:23.791, Speaker B: So it's always great to see.
00:09:23.943 - 00:09:28.095, Speaker A: All right, that's going to wrap it up for this week's changelog and we'll catch you next week. Bye. Bye.
00:09:28.135 - 00:09:29.087, Speaker B: Yeah, I'll see you next week.
00:09:29.151 - 00:09:29.327, Speaker A: Bye.
