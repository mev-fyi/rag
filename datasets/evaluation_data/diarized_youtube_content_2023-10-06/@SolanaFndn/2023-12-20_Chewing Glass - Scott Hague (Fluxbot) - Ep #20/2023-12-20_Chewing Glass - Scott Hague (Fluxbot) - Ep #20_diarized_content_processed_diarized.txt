00:00:00.760 - 00:00:01.726, Speaker A: If we can't talk to each other.
00:00:01.750 - 00:00:06.598, Speaker B: We'Re not gonna make it. Sometimes I feel like I've bitten off more than I can chew.
00:00:06.726 - 00:00:10.366, Speaker A: Most of the time, I work in a glass jar and lead a very uneventful life.
00:00:10.510 - 00:00:13.046, Speaker B: A face full of glass hurts like hell when you're in it.
00:00:13.110 - 00:00:15.582, Speaker A: That's weird. That glass looks half full to me. Eating glass.
00:00:15.638 - 00:00:20.414, Speaker B: Eating glass and staring into the abyss. Glass. Who gives a shit about glass?
00:00:20.494 - 00:00:21.754, Speaker A: Who the fuck is this?
00:00:23.094 - 00:00:26.234, Speaker B: It's kind of part of our culture to eat glass.
00:00:27.414 - 00:00:29.594, Speaker A: Get some safety goggles next time.
00:00:39.094 - 00:01:11.662, Speaker B: Hey, everybody, and welcome to Chewing glass, the show where we talk to developers building in the Solana ecosystem. Today I have with me Scott, the founder and creator of Fluxbeam, aka Fluxbot, the grand champion of the most recent hyperdrive hackathon. I'm pretty stoked to have you here. You've been in the ecosystem for quite some time. Um, I think I might have heard somewhere online that you, uh, you've submitted to pretty much every hackathon so far, and then you finally hit the jackpot and just won the whole damn thing. So, um, how's it going, man?
00:01:11.838 - 00:01:18.594, Speaker A: Yeah, great, thanks. Yeah, have. Great. Thanks for having me on. Um, yeah, so, yeah, really looking forward to kind of getting some questions and. Yeah, see what we get up to.
00:01:20.174 - 00:01:50.180, Speaker B: Cool, man. Yeah. Um, so the way we, uh, start this off is sort of just to figure out, like, who you are. Like, uh, before we get into the whole Solana stuff. So just to kick it off, like, how did you get your start in software in general? What's your backstory here? Do you go to school for it? You just some giga brain twelve year old who just started to teach themselves to code at an early stage. What's the Scott origin story in software?
00:01:50.372 - 00:02:19.880, Speaker A: Yeah, not quite. Twelve, I'd say probably 40 and 15 is when I started. So I fully self taught from the ground up. Started originally in kind of some c sharp stuff, some c stuff, moved quite quickly into Java, and that's kind of where I really got my big start in terms of software development, where I really dug into it. So I think I actually started off way, way back in the day, probably about 15 years ago now. Yeah, I think it was. The first thing I built was Maplestory private servers in c hash.
00:02:19.880 - 00:02:47.584, Speaker A: So that's basically taking kind of like old game engines and basically upgrading them, providing additional widgets, doing essentially what we see now as coding tutorials, but started off basically building all of that and building long form content for how to basically module private Minecraft, or, sorry, not Minecraft, maplestory server. And then moved into Runescape, which is where I picked up Java. And that's really the two core languages that I started off in.
00:02:47.744 - 00:02:50.584, Speaker B: Oh, nice. So you started off in the gaming world?
00:02:50.664 - 00:03:11.634, Speaker A: Yes. Yeah, yeah. I mean, it's been a pretty consistent theme, I'd say, over the past, especially in the early stage. It was kind of something I'd always go back to nowadays. Don't have too much time for the gaming side, but I say for the first kind of five years of software development is always a huge interest of mine. I think mainly on the automation side rather than the actual gaming side thing we're on. Huge gamer.
00:03:11.634 - 00:03:24.572, Speaker A: But for me it was all about, okay, we've got this instance or this world that you can interact with. How can I automate it and how can I do as little work while I'm asleep and just let these bots kind of run and play for it.
00:03:24.708 - 00:04:04.088, Speaker B: Have you ever had conversations with Jonas on our Devrel team around gaming stuff? I bet he'd be interested to know anybody who talks about games or built game stuff. He's pretty excited to hear that story. So if he doesn't know that, then I'm sure he'll be happy to hear that there's another gamer, even if it is on the automation side, because I'm sure that's like probably not the easiest thing to build out automation for game. I actually can't even really fathom what that even means, to be honest. But that's a pretty cool story. So you started out in gaming and you were doing that before you were even turned 18, I guess.
00:04:04.136 - 00:04:23.124, Speaker A: Yeah, yeah. So I probably started when I was like 1415, messing around with that. That lasted say probably three, four years. Was having good fun with that then. Yeah, basically bit the bullet around. Well, it's called AI now, but machine learning back in the day. This is kind of very, very early stage machine learning.
00:04:23.124 - 00:04:54.452, Speaker A: So I picked up stuff when I was about 1617. Actually built out a huge. It's huge now, but it's a very kind of small concept back in the day around basically taking roundabouts in cities and obviously everyone stops at roundabouts with the traffic lights and stuff in the UK. So we built out a machine learning implementation that takes that camera feed and basically gives you the number plates out in the back. So that was kind of my first foray into machine learning, is where I kind of picked up kind of how to do it, essentially, and really dug my teeth.
00:04:54.508 - 00:04:55.716, Speaker B: So mass surveillance?
00:04:55.900 - 00:05:16.644, Speaker A: Yeah, yeah. You might hear a fair bit of that over the kind of origin stories. As such, my main background for the most part has been either in the machine learning side for essentially mass surveillance or smart cities, and then equally on the other side around kind of large scale distributed systems to basically support that infrastructure.
00:05:18.504 - 00:05:22.264, Speaker B: So did you go to university or are you just all fully self taught and.
00:05:22.304 - 00:05:32.004, Speaker A: No, yeah, no, I think pretty much started straight fresh out of 18, got my first code new job when I was 18. And then. Yeah, rest is history almost.
00:05:33.164 - 00:05:59.064, Speaker B: All right, well then that's a perfect segue. Let's talk about that. All right, so you did some gaming engines, you were building mass surveillance for your government, and then obviously joking, but not really, you turn 18 or whatever and you're getting your first job. What was your actual first coding engineering job, like your paid job?
00:05:59.204 - 00:06:44.260, Speaker A: So it started off, I actually went to start because obviously no uni, so it didn't really have any credentials to speak of, so I actually had to start right at the bottom. So my first job was hitting a call center, just troubleshooting til systems or point of sale systems. Within a year I was in their uat team. So that's from my kind of help desk line one, and I moved up into essentially just testing their new software releases and from there quickly jumped into kind of a junior software developer role for them. So that probably lasted about a year or 2 hours there, I think, and then moved into a startup company, which I say is probably where I really started my engineering path. Prior to that, it was like, okay, yeah, this sounds fun, I'll do this for a little bit. But that was the real kind of game changing moment, is joining that small company.
00:06:44.372 - 00:06:45.316, Speaker B: What was it?
00:06:45.460 - 00:07:22.374, Speaker A: So it started off as a data center hosting provider. So although there was coding involved to start with, it was mainly around controlling ac units or controlling our fire suppression system. But for the most part, I was actually just going around building small data centers for clients. So running around with cables and servers and stuff at middle of the night, building all of that, and that gives me a really good fundamental understanding of how hardware a from building it and they're equally operating inside works. I think that's really done me wonders over the past couple of years. I know everyone's kind of keen on cloud, but we still prefer the kind of bare metal implementations.
00:07:22.754 - 00:08:10.924, Speaker B: Yeah, that's interesting. Like it's. And like, I think a lot of the younger engineers are coming out like they've never, maybe never even seen a, like an actual cable before to the computer because you're like you grow like you're growing up, wired it like you've got an iPad in your hand now, learning to code on that thing, and never even seen a cable in your life. So there is something because, I mean, I did like all those Cisco classes whenever I was in high school. And just the tangible, seeing these things and learning about that stuff adds this additional understanding about how these networks and systems work. So I can see how that would be helpful. So you were actually doing the physical work around these data centers.
00:08:10.924 - 00:08:19.128, Speaker B: Did you go to a software job from there, or did you continue on doing the more physical infrastructure stuff or what that looked like?
00:08:19.176 - 00:08:59.368, Speaker A: Yeah, it's an interesting story, actually, through the hardware stuff we were doing, working for a variety of clients at the time. I mentioned earlier on that I built this AMPR system for scanning number plates. Just so happened one of our clients was a out of home digital advertiser. So they're quite interested in this software. Obviously, being able to hyper target adverts to people sitting there waiting in traffic with this huge screen in front of them was quite a cool kind of implementation idea. So they approached us and basically said, look, do you want to put this into a production implementation? Said yes. And they spent probably six months taking this kind of very early prototype into a production implementation.
00:08:59.368 - 00:09:08.664, Speaker A: And then we rolled that out across pretty much every roundabout in London. So that was kind of the first big chunk of work that we did. But from there, what code was, what.
00:09:08.704 - 00:09:10.296, Speaker B: Language were you developing in at that time?
00:09:10.320 - 00:09:20.830, Speaker A: That was all Java. Java, yeah, java. And then we moved it to go lang kind of four or five years later when go beta came out, because that's my program.
00:09:20.902 - 00:09:21.630, Speaker B: You're a go, Maxi.
00:09:21.662 - 00:09:23.222, Speaker A: Yes. Yeah, I love it. I think.
00:09:23.278 - 00:09:25.714, Speaker B: Yeah, I thought I've seen that before.
00:09:26.014 - 00:09:50.874, Speaker A: No, it's the cleanest and quickest language, I think, to use, especially from building. Most of my experience is in kind of a startup environment, so most of it's tailored to move fast and break things and then kind of go through with testing afterwards. And it just really fit that bill. Don't get me wrong, if we need to use ROS or we need to use C or Java, still do it, even some Erlang or pol we're pretty happy with. But for the most part, 90% of our stuff's in go.
00:09:51.454 - 00:09:58.074, Speaker B: I don't want to jump too far forward, but like, throughout up until that point, had you had exposure to like, any low level languages?
00:09:58.734 - 00:10:22.014, Speaker A: No, not really, to be fair. No, I mean, I just pick up where, where and as needed, I mean, dap hand with a hex editor. So I'd spent a lot of time kind of just editing binary files with hex editors and basically all the way up and down the stack. It really depended on what the hardware we're using. So whether it's like a low device from Dell or something, user lang or pearl or whatever it may be for their scripting language. So jack of all trades in that regard, man.
00:10:23.114 - 00:10:59.372, Speaker B: Yeah, that's pretty rare. Like a lot of software engineers, especially in the early days, they just pick a language and that's the thing to be pivoting around to, all just basically based on whatever was needed. I've worked in engineering companies where somebody preferred a certain language and the code base was in something else and they just literally wanted to rewrite the whole thing in the language because that's the one that they liked. But like it's pretty impressive to just be like, you know, all right, I'll learn that thing and do that thing based on the needs of it. So what happened after that, after building that?
00:10:59.428 - 00:11:42.742, Speaker A: So that kind of led to essentially what I'd be focusing on for probably the next six to eight years. So we built out this initial proof of concept. I was the only developer in the company at the time and basically hired in as a kind of pseudo script, helping out with the data center side from that. Obviously that went quite well, got rolled out across London. From there we got introduced into a few of the large blue chip advertising companies in the UK or worldwide. So like Sky, Jcdeco, and a few of the other kind of providers that do the software side. So for the next kind of six to eight years, we basically ended up scaling out this development team, or I scaled up this development team from just one person to, I think before I left is about twelve developers all in all.
00:11:42.742 - 00:11:47.966, Speaker A: And the company was about 35 people in total, mainly over those.
00:11:48.030 - 00:12:10.666, Speaker B: Oh, and you were there for you. You basically built that prototype in the beginning and like that team grew that big and scaled that out. Man, that's actually a long stint at a, working at a company. I don't know if I could. Eight years, that's, that's quite the, uh, the longevity for working at a single company. But I mean, like, I guess it was interesting to be building something like, to literally scale for an entire city.
00:12:10.810 - 00:12:45.276, Speaker A: Yeah, I mean, I'd say it was mostly trial by fire. I think that's probably why it's so fun, is because it was a brand new startup. It was kind of me from the ground up building it there was a lot of challenges, a lot of technical stuff that we had to understand, especially around building a team or even just managing a team itself. So there's always kind of these ever going challenges that I found really enjoyable. And obviously scaling the team, you get to work with really great people. We had an insanely good high performance team for the most part. I like having maybe teams split into max of about seven developers per team before it gets a bit unwieldy.
00:12:45.276 - 00:13:22.652, Speaker A: So we had two of those teams running. Yeah, it was just great fun, to be honest. And for the most part we weren't doing anything kind of surveillance wise. We actually pivoted into building and supporting our own digital outdoor advertising infrastructure. So basically you've got, I think Sky's a state with maybe 4000 screens at the time you had all of these and we were kind of basically pioneered real time advertising of whereby you've got all these different screens and at any moment in time you could just pop up a new advert. Rather than having to go through what has historically quite a long process. It often take months to go from getting your creative ready to getting it on a digital advertising screen.
00:13:22.652 - 00:13:48.252, Speaker A: So we really focused on that time to delivery in the advertising sector. But then that led to huge amounts of challenges of getting these 30 gigabyte files down onto these screens in time. So it's really where we focused. Our nation served us quite well. We did some cool stuff with QR codes back in the day before they were wildly popular. So it's nice to see all this technology slowly cycling back around into mainstream adoption now.
00:13:48.408 - 00:14:07.468, Speaker B: Yeah, that's. And now they're being used in crypto for wallets. So that's pretty cool. So you spent that stint there like before you got into the, into the web3 space, crypto space. Did you, did you, you ended that. Did you go anywhere else like in the web two world before you made that leap?
00:14:07.516 - 00:14:43.964, Speaker A: Yeah, yeah, I hopped over into kind of a job it was. I'd say I was there for maybe two years, but this is really what, kind of where I got a taste of the, like you say, large scale surveillance world. So over there I was kind of, well I can't remember what my title was, engineering lead or something. Pseudo CT, doesn't matter. But basically I was in charge of building out a high performance pipeline ingestion stream for all of this data. So say you've got a citywide, let's take Dubai for example. You've got thousands of screens, thousands of sensors, varying different aspects of kind of functionality from them.
00:14:43.964 - 00:15:44.884, Speaker A: So you might have a bunch of old cameras, you might have a bunch of new cameras that do a lot of the stuff on the camera for you. And our task was basically to take all of that data in and then provide a consistent, essentially monitoring plane for these governments to use. So it take existing CCtv camera like you see a petrol station, we'd overlay multiple machine learning models on the background or fast stream data to provide tracking, inference where they might be going, route planning, etc, etc. So that was kind of a good two years and I spent that for the most part. I think thats probably why im now in crypto. It really didnt sit too well with me quite how much data they have on us or quite how much were being watched. So yeah, that really drove me into crypto and its an interesting one actually, because well as part of that job towards the end, I was actually asked to do a kind of twelve months deep dive into blockchain and how it could potentially be used for enterprise at scale, but more specifically smart cities with all of this data jingling around.
00:15:44.884 - 00:15:46.960, Speaker A: And from there I actually discovered Solana.
00:15:47.032 - 00:15:57.304, Speaker B: And what technologies were you looking at when you were doing that? Were you like, was this ethereum based stuff? Or you just look at holistically, a blockchain in general it was holistic for the most part.
00:15:57.424 - 00:16:07.350, Speaker A: For us it was data availability, global state. So the ability to sync large amounts of data globally across the world without having huge amounts of own infrastructure setup.
00:16:07.502 - 00:16:08.238, Speaker B: Sounds familiar.
00:16:08.286 - 00:16:42.444, Speaker A: Yeah, yeah. And that's why actually found Solana through this kind of twelve month process. I think halfway through Solana kind of came out in its initial launch. So yeah, being a big fan of Solana ever since it's launched, we were looking kind of other pseudo, I'd call them blockchains, but they're realistically kind of web two with a blockchain wrapper. Yeah, a few others as well. But I think Solana for the most part after we did this deep dive, was the main one that we saw the most potential with from there was like, well if I like it that much, why don't I jump over into web3 and start building in it?
00:16:43.664 - 00:17:06.250, Speaker B: So throughout that, so throughout your other, like before, like we get too deep into the Solana portion, like throughout that sort of journey of yours, like, were you like before they asked you to do that twelve month deep dive in blockchain, were you like, I'm assuming you're in tech, you're following along. Were you like degenerate trading? Were you doing bitcoin Ethereum, like, were you involved, like, in that aspect of things prior to being asked to do that?
00:17:06.322 - 00:17:32.240, Speaker A: Yeah. Yeah. So, I mean, I'd say I was around probably since bitcoin was about $32, around that. So me and my friend used to mine it on a rough time when you could still mine it without a custom ASIC. So, yeah, there's kind of a few PCs that we'd found from work just sitting in the background mining the stuff. And then I think, probably really started diving into Ethereum around the Ico day. So probably 2014 jumped in there, started buying and selling blocks of dirt.
00:17:32.240 - 00:18:00.414, Speaker A: And the ICos, obviously, dogecoin launched around that time as well. I remember that. The one that I didn't buy into. Quite annoying, but, yeah, so I've been in Ethereum, I'd say, for a while. I mean, I've done a variety of different kind of consultancy gigs in Ethereum. It's never been something I really enjoyed because I find solidity probably one of the most awful languages to work in. But, yeah, been pretty active in crypto since about 2014, kind of on and off.
00:18:00.874 - 00:18:23.714, Speaker B: Let's. Let's dive into some of this Solana stuff. So you experienced Solana throughout that twelve month deep dive? Like, when did you. When did you sort of, like, get active, like, on Solana, whether it was on Twitter or whether it was in discord, like, was that, like, in 2020, or was it, like late 2020, mid 2020? Or was it, like, early 20, 2021? What's the timeframe here for you?
00:18:23.754 - 00:18:45.098, Speaker A: Yeah, I think it was about early 2021. I've been kind of looking at it, toying around with it, but I haven't really jumped in until about, I think maybe February 21 was kind of the time where I set up kind of a positive goal to try and get into Solana, start going into the communities, really starting embedding myself into the development communities as well.
00:18:45.266 - 00:19:20.158, Speaker B: Yeah, and those were pretty tough days. Like, like, I joined and probably met, like, I mean, I was, like, aware and, like, involved with Solana through a bunch of different channels. But when I joined in, like, may of 2021, like, all we had with the core documentation, the only way to get information was to go into discord and ask the core engineers who would tell you to go look at the tests if you wanted to figure something out. That was basically the devx of the early days. So, like, how did you actually learn? Don't tell me you learned through the Paw X escrow tutorial like everybody else out there.
00:19:20.246 - 00:19:47.124, Speaker A: No, I'm a big fan of reading through source code. So I think probably spent better part of two months really kind of getting to grips with the actual Corsa line of validator, how it works, the core execution runtime as well. From there, messed around with a few kind of different smart contracts. Obviously, this is a little bit before anchor, so still messing around pre that. See, when anchor came in, that was an absolute godsend. So I made everything ten times easier to build on.
00:19:47.664 - 00:20:19.948, Speaker B: Yeah, we hear that a lot on the show. Like, it's. This is like, I mean, Armani was essentially trying to solve his own problems, but then he solved problems for an entire ecosystem of developers. I think now, like, I think I saw a chart recently. I can't remember where it came across, but, like, I think it's about the existing smart contracts on Solana. Right now, it's about 50 50 between Rust and anchor based smart contracts. And it could be that anchor might have just recently overtook rust, and some of those rust smart contracts could just be legacy.
00:20:19.948 - 00:20:55.264, Speaker B: I think the majority of people now are pretty much all building on anchor, but it's crazy that just a simple tool to solve somebody's problems turned into an entire framework that pretty much propelled an ecosystem to be able to develop, uh, faster, more efficiently and all this stuff. So. So that's pretty cool to hear. So what were you doing? Like, so you were you basically just, like, you're obviously just a tinkerer. Like, I'm going to go figure out what this thing is and how it works. Like, and to sort of tie it in to, like, from what I've heard. Have you submitted to every Solana hackathon since 2021?
00:20:55.384 - 00:20:57.120, Speaker A: Yeah, every salon hackathon.
00:20:57.152 - 00:20:58.112, Speaker B: You never won a prize?
00:20:58.168 - 00:21:25.406, Speaker A: No, no. Everything we came, we came close in the Helios hackathon. I think it's about a year and a half ago now, but, yeah, no, this is the first one or the first year where we started actually kind of placing in these. These hackathons. But, yeah, prior to that, mainly tinkering, I'd say for the most part, it was in the arbitrage side. Really kind of dug into that. Obviously coming from looking at the validators that, okay, there's some interesting myth to be done here.
00:21:25.406 - 00:21:31.134, Speaker A: So that's really, I think, probably where we got our start was, okay, how do we start doing arp on this chain?
00:21:31.874 - 00:21:32.594, Speaker B: Who's we?
00:21:32.674 - 00:21:42.894, Speaker A: Yeah, so, yeah, there's three of us who've kind of set up a little company that kind of was doing all this tinkering around those guys, more business hops, focused and me kind of leading up the tech side.
00:21:43.354 - 00:22:36.194, Speaker B: So do you want to try to go through, if your brain serves you properly, like the list of like sort of projects you were submitting to the hackathons along the way? Like anything, it doesn't have to be all of them, just like maybe some of the ones that, that you thought were cool and just the things you were exploring. Because I think one of the major points here, and I ran on about this all the time, is like, people enter a hackathon, they lose and like, and they don't win anything. Not realizing that groups like tensor took two years to nail what they nailed, or somebody like you who just kept persistently submitting until you eventually became grand champion without winning any pretty previous prizes. I think people don't realize the kind of grit and grind it takes to be successful, like in web3, just like businesses in general. So what other projects had you been working on throughout these other hackathons and submissions?
00:22:36.354 - 00:23:08.662, Speaker A: Yeah, I'd say probably some of the standout ones that I thought were really good. Obviously not good enough doing the hackathons, but I thought implementation wise, very, very interesting. And we're seeing some of this actually play out kind of two years later. Now were getting into it a little bit more. But the first one was our aggregated NFt platform called liquify NFT. So that would basically take all of the existing marketplaces and provide you the best price for buying or selling in a kind of a Jupiter esque UI. So that was something we did probably a year and a half ago.
00:23:08.662 - 00:23:40.918, Speaker A: We also did Degen CDN, which is tackling the whole issue around finding out where metadata is. So its basically CDN cache for all of the metadata on chain on Solana, which provides everything from dynamic metadata all the way through to just your static stuff. So that was more of a developer tool. Another big one we did was blockhost. So this was, well, probably, maybe, probably one of the starting ones. We built one. This is essentially a concept of whereby we use Solana to be our main logic chain while holding our state.
00:23:40.918 - 00:24:17.848, Speaker A: And then we provide decentralized nodes to provide storage to users, either from a locally CDM cache. So say it could be in your local house rather than to go all the way up to Cloudflare or your local data center. It just goes to your local node if you had the content available. This is mainly to solve one of our own internal problems. We actually started off looking at metaverses in Solana and how we could basically bridge that gap. Obviously, everyone's like, oh, you want the time, million people in a room metaverse back in 2021. That was never going to happen with the infrastructure we had in place.
00:24:17.848 - 00:24:45.174, Speaker A: Just physically impossible to get that amount of assets onto your pc in a reasonable amount of time. So for us, it's okay, well, let's solve the storage layer first. And then on top of that, we built what's called hourglass, which is essentially drag and drop metaverse creator, whereby I can support any local caching content and support, I think, up to about 100 players in an instance. And so that was really kind of where we started dabbling, I think more on the client side with Solana, rather than kind of on the back end. Russ side.
00:24:45.334 - 00:25:29.784, Speaker B: Prior to winning the recent hyperdrive hackathon, you have been here for over two years, like, roughly two and a half years at least, submitting to these hackathons. Why? Like, what made you stick around and keep doing what you're doing? Um, even though, like, you also use, I mean, you can call it failure, you can call it just, like, not the right time or the right product or whatever it is, but, like, why, like, what makes you, why are you still here? Like, what, what's the whole, like, you know, like, this is an important question, and I, and I think you're a prime example because of your history on Solana. Like, the amount of time you've been in the ecosystem, what made you stay?
00:25:30.404 - 00:26:12.244, Speaker A: I think it's probably a two part question. I'd say for the most part it was because I just enjoy coding on so long, or I enjoy the whole hackathon aspect of it, the whole challenge aspect of standing a product up in three months that really weighs as appealed to me. So win or lose, it's like, hey, look, we've got three months. Let's see if we can build something. But secondly to that, I think it's around product market fit for the most part. I think when we were going through all of these different iterations, different ideas, they were good and they had users, but there wasn't any kind of true market fit with any of these. So for us, we want to build something that people are actually going to use, that's going to be useful to the community, and not just something that we think as developers is cool, but perhaps everyone else doesn't think it's cool.
00:26:12.244 - 00:27:01.544, Speaker A: So for us, it was really trying to find what that was. And we've had so many ideas go through the company over the past two years that we just kept at it, I think, finally hit on something that both provides utility for users and is great fun to build on and backs onto a lot of the building blocks we've been building for two years. We build in a very modular way, so there's never anything really wasted from going into the hackathons. All of the stuff we built over the past two years are in little boxes that we can just pick up and place into a new product. And hey, we've got a full NFT integration or a full decentralized infrastructure implementation or even the arbitrage side which is coming into the flux beam implementation now of where we can take all the work we did, the coding idls back in the day for orca and all these different protocols, and that's actually super useful now because now we don't have to spend six months doing it all over again.
00:27:01.964 - 00:27:20.860, Speaker B: So you think it'd be fair to say that, like, you, you guys just like the Solana tech, the global state, all the things about it, and you were pretty much just going to keep building until you figured out, like, until you hit that success. Do you think you, like, if you didn't win this recent hackathon, would you give it another shot?
00:27:20.932 - 00:27:32.934, Speaker A: Oh, absolutely. Yeah. I mean, we've got three or four back burner ideas that are just sitting there waiting. So, yeah, I mean, if we didn't win this one, it'd be the next one or the one after that. Yeah, definitely not short of ideas this side.
00:27:33.274 - 00:28:11.244, Speaker B: Yeah, I mean, like, that's sort of a bit of an incredible inspirational piece of, of information right there. You know, like, not every. I said this the other day, it's like, I'm wishing luck to all the teams out there, like, raising because not everybody has the guts to even do that. Or the energy or, like, whatever, to be a founder. And especially people are like, rejection sucks. So if you think, like, one thing we see in hackathons is people, but their blood, sweat and tears into these things. And when they lose naturally a human's, like, upset because you, like, you are just so absorbed in it.
00:28:11.244 - 00:28:58.568, Speaker B: So a lot of times teams will sort of just be like, they'll go, they won't continue because, like, it's a huge letdown because you just put all that in. So to hear how many times, like, if, like, you've lost, hackathons won zero prizes and then they come back with a sort of like, nice little hero arc here and when the grand Champion prize is pretty awesome. So with that said, let's, let's talk about, let's talk about flux beam. I would say, let's talk about what the inspiration for it was. But I'm pretty sure that, like, you kind of already know, but like, because, like, this, this style of thing, although they don't have all, like, on ethereum, obviously there's unibot. But like. But like, you were one of the first adopters of Token 22.
00:28:58.568 - 00:29:11.400, Speaker B: Like you, there's also an incredible tool set inside there. But, like, what was the inspiration for you to be like, we're going to do that thing on Solana for this hackathon? Like, why, why flux beam? And why a telegram trading bot?
00:29:11.512 - 00:29:37.368, Speaker A: No, it actually came out of kind of a bit of a left field, to be honest. I mean, obviously we've seen unibot that kind of came out around the time, kind of, we were about what we wanted to do. Because actually, I was up in the Lake District in the UK over a weekend, and I really needed to move. Crypto needs to move some stuff around, existent positions. But I didn't have my keys with me. I didn't have any access to a desktop or laptop to do so. So it was kind of like one of those things about, oh, crap.
00:29:37.368 - 00:30:09.134, Speaker A: It'd be really nice to be able to just manage this through my phone without the clunky interface of having to go through the initial wallet. So having my seed phrase inside a phone can be stolen or whatever it may be. Obviously, various security issues with carrying around stuff on your phone. So it was kind of an intermediary of. Whereby we go after. Well, I still want the flexibility of accessing maybe a portion of the crypto ecosystem, but without all of the kind of concerns around having keys carried with me or anything like this. So seeing uniborm, well, that's a wicked idea, especially for f.
00:30:09.134 - 00:30:31.290, Speaker A: You don't need the speed. So it worked really well in their instance, and it's. Okay, well, can we, can we build something like that for Solana? Obviously, there's been a fair few attempts in kind of discord and stuff like that, so it's taking all that inspiration. So a big fan of bots. So anything where you can bot or automate stuff. Right at my street. So, yeah, dug in and then really found that it was just super useful, to be honest.
00:30:31.290 - 00:30:45.050, Speaker A: I mean, I started building it. We initially integrated kind of like Jupiter or something initially, and just a basic swap functionality. And so I use it all the time. So extend that. Okay, we need lending now. That's really useful to have. We've got all the real time lending alerts.
00:30:45.050 - 00:30:55.814, Speaker A: If there's getting close to liquidation. You're not just kind of stuck up a mountain with no way of being able to remediate it. It's like, okay, cool, two buttons press, I'm back in a healthy account state again.
00:30:56.874 - 00:31:44.560, Speaker B: Yeah. And to be honest, like, I was, one of the more exciting parts for me was to actually see your, like, your inventory of tooling within there. And also, like, I think just going into the token 22 token, creator of your toolset, and showing the extensions with checkboxes that actually, and then adding the parameters in there almost just right out of the gate, visually teaches you what the power of those token 22 is. So it was pretty cool to see that. And also for all the listeners, it's fluxbeam XYZ. There's a wide variety of tools available for you. I had recently somebody asked me, hey, how do I airdrop a bunch of tokens? And I was like, check out flux beam.
00:31:44.560 - 00:32:15.122, Speaker B: That'll probably do the trick for you. So it's pretty cool. I think you're also probably partially responsible for the uptick and meme coins because you made it so easy for people to start launching them, because we all know that all of a sudden, out of nowhere, after your project went live, we started to see about 100 different meme tokens being launched. Hey, man, people having fun on chain. It's all good, but it's super cool. Were you shot? Were you surprised to have won the grand champion of that?
00:32:15.178 - 00:32:31.114, Speaker A: Yes. Yeah. Was not expecting it, especially kind of from our prior placements. It was kind of like, oh, yeah, we'll give it a shot. We'll see what happens. I mean, I was at the breakpoint anyway, so it's just kind of a nice thing to do. We knew it was going to be announced around breakpoint, so, hey, why not? Let's give it a go.
00:32:31.114 - 00:32:42.334, Speaker A: But yeah, totally came out of left field for us. Was not expecting it. I was not expecting the amount of users that entailed it as well, because we had a fair few scaling issues as soon as that stuff went live.
00:32:43.074 - 00:33:23.176, Speaker B: Super cool. Congratulations on the win. Like I said already, a couple times already. It takes a lot to just continuously try and not even place at all and just have a backlog of ideas to be like, all right, onto the next one. Congrats on that. And just sort of, if there's any other information that you want to give around, like Fluxbeam or just like give a, give sort of like a TLDR on what you've built and what you're trying to do, like in the future with this and what it enables.
00:33:23.360 - 00:33:53.428, Speaker A: Yeah, so I mean, Fluxbeam itself came out of the desire to use Token 22 for one of our other projects. So we've got, it's going to be kind of fully open source. It's more kind of a proof of concept of how we could build fully on chain ivil games on Solana as we've built out kind of a huge repo of kind of tooling and contracts to be able to support that. But the one thing we were missing was the ability to create slightly more useful tokens. See token v one. Great, but very limited. You can transfer, approve and burn, that's about it.
00:33:53.428 - 00:34:13.320, Speaker A: Whereas token 22, we dived into it probably eight months ago, I think now, maybe a little bit later on, and it kind of ticked every single box we needed for some of our upcoming plans. So we were like, well, hey, no one's really championing this year. At the time it said it was going to be announced and launched in 2022, so a little bit delayed in terms of official release.
00:34:13.392 - 00:34:27.872, Speaker B: But yeah, we just had John Cinque on here, who was one of the big contributors to that. And when we joked around the whole idea that he thought that that was actually going to be launched in 22 and it's a whole thing.
00:34:27.968 - 00:35:02.034, Speaker A: Yeah, we took him as word, or the docs at their word of when he was giving indicative release dates. I think we panicked a few people by actually taking them as gospel. But yeah, we saw it coming up for release. We weren't really seeing much being talked about in terms of the ecosystem adoption. See, at the time, compressed NFTs were being super, super focused on. And yeah, we saw it as almost kind of a challenge internally with devs at heart. So being able to champion a core protocol and actually use some of our experience to then bring that into the ecosystem was really exciting.
00:35:02.034 - 00:36:00.608, Speaker A: So we built out a full suite, end to end tooling from token creation all the way to your pool creation, airdrops like you said, and a few other kind of metadata management tools, and then realized, oh God, this is going to be a nightmare to get actually adopted into the ecosystem. So I spent better part of six months going around chasing various different integrators. Obviously we had great support from Jupiter. Can't thank them enough for how much they've done on their side, but really helped us push that together. Along with fair few of the wallets and the analyst teams got an initial base implementation of token 22, we did a few Dex integrations for people, launched Flux Beam, which is its own token 22 Dex, that's been a large, large focus on this year, but mainly for the most part to enable some of the stuff we want to be doing over the next couple of months to next year. Then from that, that's just spun out a whole ream of ideas as well. Obviously as Token 22 is getting adopted more and more into the ecosystem, it's opening up more doors.
00:36:00.608 - 00:36:36.340, Speaker A: So we recently got Openbook integrated, or 99% integrated. I think we're just waiting for a merge to go through on there, but that basically opens up order book abilities for it. And then we've got a few contracts coming up, hopefully in the next year or so around various ideas. A want to tackle NFT royalty issues. Obviously, for the most part, over the past year it's been you need a wrapper, whereas now we can actually do this at core protocol layer. So there's really cool stuff we can do there. And then on the on chain gaming side, this really opens up what people can do with these tokens in terms of the transfer hooks or transfer fees.
00:36:36.340 - 00:36:52.738, Speaker A: It actually kind of allows you to gamify some of this tokenomics rather than us launching the same token over and over again with slightly different allocations and people expecting a different result, whereas this, it just opens up the playing field for everyone. So really been an exciting journey to get all that integrated.
00:36:52.906 - 00:37:41.304, Speaker B: Yeah, I mean, like, I think this sort of stuff is super appreciated. Like it's, it's always the early adopters that sort of inspire like, the next generation of innovation on a blockchain and like being like, it's somewhat of a risk, like, to put your whole philosophy behind, like this brand new thing and wondering if anybody's even going to care. But obviously people cared enough to give you guys the top prize for the hackathon. So that's super cool. So to round out the show, there's a couple questions I want to ask you, and you can ask them. You can interpret this however you want. And so in your experience, like, what, what sucks about building on Solana? Like, what, what.
00:37:41.304 - 00:37:57.360, Speaker B: What needs improvement for you? Like, what is sort of the bane of your existence as you're building out? Well, as you've built out every project you've built and also what you're building out now, like what, what have you seen out there that's still just like a thorn in your side for Solana development?
00:37:57.472 - 00:38:03.035, Speaker A: I think it's got to be dependency management. I mean, the amount of time we wasted.
00:38:03.035 - 00:38:03.962, Speaker B: Never heard that move before.
00:38:04.058 - 00:38:29.354, Speaker A: I was doing it this afternoon. Even so, that's why it's kind of fresh off the press. But yeah, it's. It's just chaos managing all these dispensing, especially because we've been building for so long, we've got slightly older contracts and stuff that's not in anchor. So upgrading that into kind of getting to SPL 17 or whatever is that's out now has been an absolute nightmare. It's just whenever something new comes out crate wise, it's always an uphill slog. So that's a bit of a nightmare, I'd say.
00:38:29.354 - 00:39:00.764, Speaker A: Everything else is pretty good. I think we're in a unique position because although we've got front ends and stuff, most of our stuff is in Golang. So we build all of our own tooling, all of our own decoders and stuff like that. So that never has really been an issue for us. But I think maybe another abstraction layer would be nice on the JavaScript side of just a really simple point and click implementation for various different protocols. Almost like another plugin system I think would be nice. But yeah, I mean, no real other pain points, I mean rpcs, but that's kind of like.
00:39:00.764 - 00:39:03.240, Speaker A: Yeah, that's just what you have to deal with.
00:39:03.312 - 00:39:15.800, Speaker B: We get the bad, poorly defined errors a lot on this, on the show, like people saying that obviously it's a pain point where people don't know what errors actually mean. That's been one of the ones that a lot of people point out to us.
00:39:15.952 - 00:39:43.574, Speaker A: Yeah, I would say that's getting better now was kind of the RPC abstraction. Obviously, if you're using core RPC layer, it's still a nightmare. And all of that management of that is a bit crazy. But with some of the new das APIs and stuff like that coming out from some of the providers, it actually helps a lot with those issues. We've recently integrated provider that actually helps and solves all of those errors for us. We just get a nice JSON API response with exactly what that error is and then we can take that and pass it through to our users.
00:39:44.354 - 00:40:03.264, Speaker B: All right, now we always start with the bad. Now let's talk about, again, open to interpretation. What's the best part you can, this can be relative to something else or just for you, like what, what's, what's the good, what's the good stuff about Solana building on it or like just anything?
00:40:03.684 - 00:40:38.162, Speaker A: Yeah, I'd say probably the two biggest things for me a would be 400 millisecond block times was just speed in general. Like it's a game changer you can get. Obviously we're not quite close to Nate or not quite native to web two, but you can get pretty damn close. And with some good ux, you can really fill that small kind of time delay. So I think the speed is pretty much spot on for what we want to do. 400 milliseconds sits in that nice kind of timeframe of, whereby it's not too long of where users will notice, but it's not web two speeds. So that's a really nice position where it is there.
00:40:38.162 - 00:41:17.162, Speaker A: But I think the main thing is probably the global state. The amount of time, especially in the previous companies that I've spent dealing with globally synchronizing state across continents, it's just unfathomable how much time and money and energy we spent debugging and resolving a lot of that stuff. So just to have that built into the platform and go, okay, I deploy. As long as I've got IPC provider coverage and I've got a performing front end, I don't have to worry about scaling issues. And I think that's the biggest one for us realistically, is we can deploy once we know it's going to propagate across global state. Anyone who connects is obviously going through ipv six, so we'll get routed to the closest node. And yeah, it just works perfectly.
00:41:17.162 - 00:41:21.482, Speaker A: Like, not having to manage those backend pipelines anymore is just a dream, really.
00:41:21.658 - 00:41:59.064, Speaker B: Yeah. That's awesome. It's good to hear these things. Like, I've always loved to hear, like, the negative stuff and the positive stuff, because like, you know, it starts to give you a paint a picture. Like, especially when I have guests on here and you start to hear the same thing over and over again, your answer was a, like, the, the dependency hell has definitely been brought up before and there's a handful of others, but you start to learn and you start to know where to improve. I view negative feedback as really just a starting point to fix the damn thing. And I think that's why the Solana ecosystem has been so successful.
00:41:59.064 - 00:42:51.938, Speaker B: If something's wrong, somebody's going to complain about it on Twitter and it's usually mert, and then somebody eventually goes and fixes it. But yeah. So to round it off, final question for you and what we like to do is, like, we're going to assume the audience here is there's going to be a handful of people new to the ecosystem, new developers, maybe ones who are about to get started on Solana, or ones that are thinking about getting started. What advice do you give to this group of people that are like sort of getting ready or already have dipped their toes into Solana to just like, to be successful in this ecosystem? Because there's 100 different ways that this could go. So curious what your sort of gut instinct is to tell this new batch of developers looking into web3.
00:42:52.066 - 00:43:18.454, Speaker A: Nice. Great question. I think it's always great to be more vocal. I think that's something we struggled with early on, is not being vocal enough about what we're building. Like you said earlier, the Solana community, especially the dev communities, absolutely insane, unparalleled in terms of how much support you get from there. So I'd say really be vocal on Twitter, get your product out there. Don't just focus purely on the building, although that's super important.
00:43:18.454 - 00:43:53.944, Speaker A: I think getting it out and getting that feedback from other people and getting people to help contribute is a really kind of beneficial thing that slander ecosystem and community offers. And then equally from that, I think maybe just kind of take it piece by piece, really trying to understand those fundamentals right at the core to start with around kind of how accounts are structured, how mutable accounts work, how the Solana stack works, and it just serves you dividends kind of going forward, I think probably where a lot of people maybe skip over and go straight into maybe the JavaScript side, but I really think sitting on the rust side and really understanding that accounts model is probably the biggest benefit long term.
00:43:54.104 - 00:44:38.664, Speaker B: Yeah, I mean, I asked the question, like when I just talked to people and just like throughout my days, like what's the hardest? I even tweet these things sometimes. Like, what's the harder part about Solana? It's like you have on one side you have Solana, and then the other side you have Russ. And typically the majority of people will say that the, it depends on who you ask. But like, I think more often than not, even though my poll was a little bit slightly different, I don't know why that was so skewed. But when you ask people, it's like understanding accounts is like critical to, like, learning salon. Like the rust is just a language. It doesn't have like a, it's not something unusual to most people, it's just a new language that happens to be low level.
00:44:38.664 - 00:45:16.728, Speaker B: But accounts, unless you've ever built on Linux systems, you probably have no idea. Especially when people come from Ethereum, they'll come to me and be like, hey, how do I get started on Solana? Like I'm coming from Ethereum. Like step one, forget everything. You know, and then go read about accounts because like, and you can, I've been talking to some people where you can draw some comparisons to the two. And we actually have like a Solana course for rust or a Solana course for EVM developers. That's going to help that a little bit. Like sort of side by side comparisons for like how you would do something on solidity and how you would do it on Solana.
00:45:16.728 - 00:45:33.110, Speaker B: So that might help, but, but in general, it's a totally different, like Beast, totally different runtime, totally different, like programming model. So it's your best bet to just like reset your brain and then go figure out how accounts work and then that'll probably save you. Would you say that's fair?
00:45:33.222 - 00:46:04.578, Speaker A: Oh, absolutely, yeah. I mean, that account substruction model is kind of the key implementation, I'd say, even if like you haven't done rust before, like look at the Python Seahorse libraries as well. I mean, we've had great success onboarding some developers through that. So they start off in Python where most web two devs can code in Python or have had some experience. So it eases that transitionary period of, rather than trying to learn Solana and Rust and everything else, it's like, okay, cool, I've got my known language. I just need to focus on the bits that I don't know, which is the Solana bit, and that really easily then ports you over into rust when you do want to do a little bit more complex.
00:46:04.746 - 00:46:48.104, Speaker B: I was so excited when you said that, because we hadn't really had any signal that that had actually worked because that was the initial original intention. This was created by Nanon and it's now been overtaken by Anviet from Phantom and Callum and some support from Devrel to revamp it and build. I think it's Seahorse University if you want to learn Solana smart contracts via Python. And then there's another group called Web Three Builders alliance that are currently in the process of building this for typescript. It's called Poseidon. They announced it lightly a couple places around there. So I mean really, like if you capture Python developers and JavaScript developers, there's 28 million developers globally.
00:46:48.104 - 00:47:06.632, Speaker B: You probably capture 95% of them if you get Python and typescript under your belt. So that's the goal. It's onboarding and the real thing is it's all a trojan horse to get you to learn rust and anchor. So like, don't think you're going to be writing Python and typescript for the rest of your lives if I have anything to do with it.
00:47:06.648 - 00:47:16.314, Speaker A: Anyways, best stepping stones that we've seen so far is, yeah, get them in on typescript or Python, and then, yeah, slowly wean them off that into rust seems to be the best way to do it.
00:47:16.614 - 00:47:34.238, Speaker B: Exactly. All right, Scott, I think I didn't mention you like Scott, aka cloak Dev, on Twitter. If you see him around, give him a follow. And thanks for joining, man. Pleasure to have you. Congratulations on the hyperdrive victory and looking forward to seeing what you guys build.
00:47:34.326 - 00:47:35.742, Speaker A: I appreciate it. Thanks for having me.
