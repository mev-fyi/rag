00:00:03.760 - 00:00:09.206, Speaker A: Hello. Welcome, everyone, to this week's changelog. My name is Jacob, and I'm joined today by Nick. Nick, how are you doing today?
00:00:09.350 - 00:00:11.926, Speaker B: I'm doing well. Excited for the changelog. Let's get to it.
00:00:12.070 - 00:00:51.150, Speaker A: All right, so first thing on the changelog, what we're going to do is we're going to talk about the simd of the week. So this simd is given by Caveman Loverboy. He's a actually contributor within the ecosystem. He did simd 130 and he wrote up dynamic block limits. So what that means is right now we have a very static cu limitation. I think it's like 48 million per block. And what we're seeing is that if we're getting full on the block, in order to change that limitation, you have to kind of basically do a whole, like, consensus change, go through the SIMD process, agree on whatever that limitation is, do tons of tests, and then finally get it out there.
00:00:51.150 - 00:01:30.262, Speaker A: So that's a lot of work. And especially if we're trying to, like, improve as hardware improves, we should be able to do dynamically improve instead of having a council or whatever decide on what the next block limits are. So this proposal is aimed at fixing that. It's like, hey, after every epoch, if there is x percentage utilization of the CU, figure out how to change the CU limitations, and then given a very specific limit, don't go above that, that other type of limit. So it's a little bit more dynamic. It can change over time. It's a cool proposal, but it's still being discussed.
00:01:30.262 - 00:01:38.314, Speaker A: So if you're interested in the proposal, go check it out on the SIMD repo and then on the commits of this week. What did you see this week, Nick?
00:01:38.734 - 00:02:11.222, Speaker B: There was this amazing commit by Jay Starry. So this new commit, it adds the ability to actually set compute unit price within the Solana CLI when you're deploying programs. So there's been all these conversations about deploying programs and compute unit priority fees, all this kind of stuff going on. And now with the new version of the CLI in 118 point something, two, I think three maybe, but you'll actually be able to set the compute unit price and actually use priority fees within deploying programs just directly within the CLI. So it's going to be really awesome.
00:02:11.398 - 00:02:52.418, Speaker A: Yeah, I think this is actually 118.8. And this, along with the commit we talked about last week, John's commit with making parallelization makes this, makes deploying programs a lot faster. And on that specific commit, there was actually a bug, and we're going to talk about it in case you ran into issues. So if you ran into issues, and I know some people did, because I talked to some people that did, to where you ran into like it was kind of like a race condition or it was taking too long on doing the program deploy. There's a timeout now so that you can basically get out of that and you can have a better experience deploying programs. So it's been fixed also. 118.8.
00:02:52.418 - 00:02:55.690, Speaker A: Go check it out if you need to deploy programs.
00:02:55.882 - 00:03:37.874, Speaker B: Yeah. And then the next commit is there's a couple of commits around this, but we're just going to focus on this one. But basically it's around the idea of all of the BPF program migration process. So there's these various programs that are enshrined into the Solana blockchain. You've got like system program and some other ones like that, there's a huge effort going on to migrate all of these programs into standard BPF programs that get deployed just like any other program. And it makes it a lot easier for actually the firedancer team and any other validator client to implement the Solana runtime since all the programs just work the same, just BPF programs. And Joe Buffalo, this commit here is doing some assorted chunks to progress along that migration process.
00:03:38.494 - 00:04:20.216, Speaker A: Yes. And if you're interested in reading the full write up on it, I think it's SIMD 72, which explains the reasoning behind of doing this. Just like Nick mentioned, it makes it easier for other client teams to implement this stuff. Moving on to the next thing, there's been a lot of talk about the 118 scheduler. There's also been additional change that went in recently they should be aware of with the upcoming 118 scheduler. So in the current state with the scheduling, your priority is based off of your priority fee per compute over total compute. So you have like the product and you basically have that priority fee per compute will give you your prioritization on the block.
00:04:20.216 - 00:05:02.624, Speaker A: This change that Andrew put in, is that what it'll do, is it'll be the total fee over the compute. So both your base fee, meaning the fees that you pay per signature as well as the priority fees that you pay the priority fee micro lamperts per compute, multiply the product there over the total compute will give you prioritization. So this change, basically it enables you to the scheduler to favor lower compute transactions rather than higher compute transactions because that base fee has a bigger impact on the total fee over compute on the lower end. So it's a cool change.
00:05:02.744 - 00:05:03.952, Speaker B: Yeah, this is really cool.
00:05:04.088 - 00:05:13.658, Speaker A: Yeah. And as always, lower the amount of compute. Make it very easy for people to schedule your transactions on the cluster.
00:05:13.816 - 00:05:15.254, Speaker B: Yeah, this is a really cool one.
00:05:15.334 - 00:05:17.422, Speaker A: And moving on to the resources of the week.
00:05:17.518 - 00:05:21.434, Speaker B: Oh, this. These resources from Caveman lover boy. They're so good.
00:05:21.974 - 00:05:49.714, Speaker A: Yes. So this one right here, he's just showing, showcasing a way that he's doing reverting of state during program tests. So you can do a lot more stuff with your program test and actually reset your test a lot faster. So this is not yet in any crate that you can use, but I'm hoping and I think he will be pushing, trying to do a pr to the program test on the main agave repo. So it's really cool to have. What else did you see this week, Nick?
00:05:50.054 - 00:06:08.398, Speaker B: There's this other project also by caveman lover, probably. There's a lot of shout outs to him. He does great work. But he made this command line tool that's a Solana explorer. So you can do all the typical Solana explorer things directly from your command line, directly from your terminal. So it's a rust crate. You can install it.
00:06:08.398 - 00:06:18.046, Speaker B: It's a Solana Cli explorer. You can just do a cargo install and then it works. You can do all the explorer goodness directly on your CLI, which is so cool.
00:06:18.230 - 00:06:36.158, Speaker A: Yeah, it's really cool. And it's very helpful for people that don't usually use like, browsers. And I know a lot of devs don't. And then this week for the Stack exchange league, we had a few people come to the top and actually a lot of changes of people coming to the top and going forth and answering good questions.
00:06:36.246 - 00:06:37.182, Speaker B: Love to see it.
00:06:37.278 - 00:07:08.190, Speaker A: So we have Ari, who has the number one spot this week with 262 reputation. We have John looks like what? Sasha versus the world? That's a fun name. Ajov, Joey and more so once again, contribute to the stack exchange. It helps out all developers on Solana in the future. And we're more than happy to help you out as well if you have any questions there. But that just about wraps us up for this week's changelog. Thank you for coming to chat with us and we will see you next week.
00:07:08.302 - 00:07:09.054, Speaker B: Catch you in the next one.
