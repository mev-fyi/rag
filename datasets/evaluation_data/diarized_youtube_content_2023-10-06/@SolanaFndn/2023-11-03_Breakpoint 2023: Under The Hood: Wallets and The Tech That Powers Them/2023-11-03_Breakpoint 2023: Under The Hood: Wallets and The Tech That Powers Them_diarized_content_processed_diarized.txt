00:00:03.440 - 00:00:31.758, Speaker A: Hey, everyone. Great to see you again. Hope you're not tired of seeing me on stage. So I have actually gathered the Gigabrain council from a ton of wallets across the ecosystem. But what I thought was really important about wallets in the Solana ecosystem is that they're all. Not all of them are chrome extensions. We have great representation from across extensions, smart contract wallets, consumer wallets, all the above.
00:00:31.758 - 00:00:34.502, Speaker A: So I'm going to actually go through and let them introduce themselves.
00:00:34.638 - 00:00:35.806, Speaker B: Go ahead. Yeah.
00:00:35.870 - 00:00:52.554, Speaker C: Hey, everyone, I'm vidor from Solflare. I dedicated my professional career to building in crypto, discovered Solana in late 2019, built its first wallet, Solflare, and since then, we're committed to keeping our users safe and keeping their assets safe.
00:00:53.404 - 00:01:17.024, Speaker D: Hey, I'm Asik, co founder and CTO of Tiplink. So I spent most of my career in traditional finance and HFT, but in 2022, founded Tiplink to solve some problems. I'd had on side projects. Paying people on the Internet try to make that super seamless. So we've got, you can send crypto to anyone with a URL, and the URL itself is a full blown wallet. You guys might have experienced that at several activations we've done here. So.
00:01:17.024 - 00:01:18.264, Speaker D: Yeah.
00:01:20.024 - 00:01:29.684, Speaker B: Hey. Hey, bright point. I'm Vova. I'm the lead product engineer for Fuse. Been building the future of self custody for the past two years at Squads Labs.
00:01:31.064 - 00:01:57.076, Speaker E: Hi, I'm Francesco, co founder and CTO of Fantom. We're a self custody wallet on Solana and multiple chains. We have millions of users and our mission is to accelerate the adoption of crypto by making it safe and, and easy to use. Brian just spoke about us five minutes ago. So that's the wallet that we build. And yeah, we just launched quests. Brian spoke to it a little bit, but you should definitely check it out.
00:01:57.076 - 00:02:07.824, Speaker E: There's this quest to mint an NFT using your camera. Do that and send it to Breakpoint 20223 Sol, and you'll be part of our breakpoint album. So check it out.
00:02:08.684 - 00:02:50.544, Speaker A: Awesome. So I promise that this wouldn't get super, super technical, but I do want to make sure that we're asking the right questions and making sure that we're having the folks here share more information. I do have a spicy question at the end, so make sure that you are sticking around for that. So for each of you, you have very different ways of handling what I consider to be one of the harder problems in crypto, which is the seed phrase. So for each of you, I would love to hear a little bit about how you think about not just protecting the seed phrase, but how does that affect the consumer and how is that part of the onboarding flow for users?
00:02:51.084 - 00:04:18.734, Speaker C: Yeah, well, for us, we think about the onboarding flow as not just getting the user in, but we want that user to basically trust us. So trust is a really important component here as there trusting their money with some provider they found on the Internet, I guess. And right now, despite the setups that most self custodied wallets have, where we're seeing that the keystore material is stored within the apps, we sort of see this tendency where this key store material will start shifting either to Dapps or to the hardware level. I think Saga is a good example of the key material shifting to a hardware level. And I think all new chipsets, cpu's secure enclaves will support storing key stores and expose these functions to be able to export like show public keys and sign. So in both ways, either if they're moving to the hardware level more down or more up to the that material, we in both scenario see the need for wallets. Because wallets show your balance, provide the discovery mechanism, show you basically everything that you can do within a specific chain, in this case Solana, and also need to safeguard the stuff that you are requested to sign.
00:04:19.434 - 00:04:52.008, Speaker D: Also at Tiplink, we take a bit of a different approach to set up. I think it's unique in that people who typically receive a tip link, they're actually receiving money. They're not just opening up an app to kind of set up a new wallet. And we sort of say your mom isn't the target user, but it is the bar. So you receive a tip link. The link has enough private data in it to expand out to a private key. And we put that on the URL hash param.
00:04:52.008 - 00:05:42.036, Speaker D: So we cannot even see your links. So we consider it a non custodial way to transfer money. So then you can claim the money that you received in a link. If you use an existing wallet, like phantom or soulflare, you can just connect it and withdraw there. Or if you don't have one, you can log in with your Google account and we make a new wallet for you on the Taurus network, which, which is sort of decentralized network with a few guardians that split up your key and we reconstitute it on the client side when you log in. So there's no seed phrases, which is a sort of unique aspect of this type of wallet. There are other examples of NPC wallets, social login wallets that also have this property, but yeah, they have different security characteristics than seed phrase type wallets.
00:05:42.036 - 00:06:12.204, Speaker D: We actually made the decision not to let the user export their seed phrase or private key either, because that also creates an interesting attack surface for the non technical user. We've seen attacks where users like to use the same seed in multiple different wallets because they just want to see their assets, they don't want to make a transaction to move them, so they just do this. Which kind of makes it hard to figure out what's happening when certain attacks have happened in the past on Solana as well. Well, so yeah, I don't know.
00:06:12.244 - 00:06:13.052, Speaker E: I guess so.
00:06:13.068 - 00:06:19.140, Speaker A: This sounds like it's complementary with other wallets and it's more of the onboarding flow rather than the end state.
00:06:19.252 - 00:06:20.104, Speaker D: Yep, yep.
00:06:20.524 - 00:06:20.876, Speaker A: Yeah.
00:06:20.900 - 00:06:56.334, Speaker D: So the end state can go a few different ways, right? So if ADAP, it sort of depends on who sent the link, right, and what their goals are. So if some other wallet were to build a flow or tip links go out, we'll have a new product called Tiplink Pro coming out in a few weeks where we'll have additional customization levers for wallets to drive. The KPI's they care about, give the calls to action they care about, and maybe with their branding. So yeah, if the user doesn't have one and they don't want to set one up in that moment, they can use our wallet. But yeah, they can also use the wallet they like.
00:06:56.674 - 00:07:06.304, Speaker A: Makes sense. Vova. I mean, squad's one of the first smart contract wallets on Solana. How do you deal with seed phrases and all that sort of stuff?
00:07:06.644 - 00:08:28.712, Speaker B: Well, I mean, our stance is we aim for the setup where you don't have seed phrases at all, and we go even slightly further and we make sure that the wallet that you're using for your funds actually doesn't have a private key at all. So with a smart wallet, what you can have is a wallet that's managed by a program. It's like technically impossible to steal the private key of it because, well, it's a PDA, but it is still managed by regular keys. But by having multiple keys managing the same wallet, we increase the security. And even though those keys are still traditional and do have private keys, the chance of losing the key material is lower because you'll need to lose key material for two keys instead of just one. And when it comes to managing the key material of those keys that are controlling the smart wallet, though, we try to rely upon the hardware security provided by the mobile operating systems like things like secure enclave on iOS and end to end encryption for iCloud. So those keys also don't have seed phrases.
00:08:28.712 - 00:08:48.244, Speaker B: There is private key, but we never show that private key to a user. There is another benefit in a smart wallet is that the keys are disposable. You can always rotate them, replace them without changing the main address of your smart wallet. And that's how we think about managing your keys, basically.
00:08:48.364 - 00:09:01.344, Speaker A: Sounds great. Sounds like account abstraction, all that sort of stuff. One question on that, is there any, what are some of the trade offs when you don't have that private key for the, you know, the public key that you're using for the wallet?
00:09:03.604 - 00:09:46.308, Speaker B: Yeah, I mean, you still need to think about your hygiene and like your keys a little bit because like, even, even though you have twice as much security, how I call it, or just twice as much recoverability because of two keys being enough to handle all the operations, there are still situations where you can lose your phone and your ledger and then your phones are stuck basically still. So it's not a silver bullet, but I think it takes the user experience and security of self custody to slightly higher level. Yeah, makes sense.
00:09:46.436 - 00:09:49.304, Speaker A: Francesco, how are we safeguarding users?
00:09:49.964 - 00:10:44.334, Speaker E: So at Fantom we're a hierarchical, deterministic, wallet like software, so we onboard users with a seed phrase, but we also allow you to import a private key, we allow you to connect your ledger. I like to think of us more as a wallet aggregator in some sense, but there are pretty standard challenges when you are custodying the key material on the device itself. So you want to make sure you're custodying the safe way, the key material is encrypted at rest. We actually make sure it's scrubbed from memory when we're using it. So we have all these abstractions around accessing key material in the app. As a developer, everything that the others said apply, I'd say as a self custody wallet. One of the core security challenges is securing the SDLC, which is the software development lifecycle.
00:10:44.334 - 00:11:32.030, Speaker E: So basically our code needs to be super locked down. So we sign all our commits. All access to the repository is two fa with yubikeys, et cetera, et cetera. We have a five person security team, kind of paranoid about this at all times and they do an amazing job on it security as well. So making sure our employees are not compromised, like there's all these things that you wouldn't think about are part of securing a seed phrase, but they are finally, I think the other security piece of custodying seed phrases is like users tend to give them away. You need to make sure users can shoot themselves in the foot. They get phished, they get convinced to paste their seed phrase in a form, and suddenly it doesn't matter how good your security is if your users are doing that.
00:11:32.030 - 00:12:04.586, Speaker E: So we have a lot, we have a whole trust and safety layer. So we have a big support team that is constantly finding and squashing these scam sites. We work with third party providers like blowfish to manage this block list of sites that are malicious. We scan transactions, scan domains, we even scan, or through vlofish, we even scan the markup of sites to see if they're copycat sites and are attempting to phish the user. So I think that's actually a huge part of how we secure seed phrases as well.
00:12:04.770 - 00:12:46.106, Speaker A: Makes sense. This is super important, I think for wallets and for users. People don't understand how important those seed phrases are and the amount of times that they just save that to their apple notes or whatever it is, it is an important process of onboarding, folks. Speaking of that user flow, I'd love to talk a little bit about what happens when you get to a dapp or when you get to a protocol and you're interacting with something. The connection process, the simulation process. People can't read the bytes that are happening in the transaction. How can we safeguard that part of it? To make sure that people are interacting with applications? I'll start with Viro.
00:12:46.170 - 00:13:59.640, Speaker C: Yeah, so what we've seen is that, and I think Phantom also seen this, is that navigating web3 for users is very scary. They only connect their wallet to limited set of dapps and sign transactions from an even smaller set of dapps from there. Although simulating transaction changes could provide some sort of reassurance, it is not that silver bullet. And even more, I think one of the most valuable things that wallets have is the signed transaction before it hits the network. Because that signed transaction can either potentially drain the user. So we are taking proactively measures implemented a bunch of stuff that detects if someone's slipping in a delegation instruction to spend your funds at a further dime, hijacking your stake account and some more like very specific program related and simulation related balance changes stuff inside of wallet and we show and we flag the severity of these potential mishaps that could happen. And sometimes we even require the user to double check, click a checkbox.
00:13:59.640 - 00:14:34.604, Speaker C: There's even more space to improve here. For example, there's a few attack vectors that are still out there. Mostly theoretical, but we see that there's an elegant way of solving them with jitto bundles. So wallets can then take the user's transaction, put some guard transactions after it, and then the whole unrelated transaction, and then the whole bundle of transactions would fail if what the simulation would show did not execute on chain.
00:14:34.984 - 00:14:44.084, Speaker A: That one's interesting. What are the things that you think we should do or add beyond gwenlls to make that easier to detect?
00:14:44.504 - 00:15:16.596, Speaker C: Yeah, I think as Francesco mentioned, obviously there's this shared block list that a few wallets contribute to. That's a core pillar of being able to flag these malicious dapps being able to also flag malicious programs hide malicious NFTs basically provide the user a very safe environment to operate whenever they're inside of the wallet, and then try to provide as safe as possible environment for them when they exit the wallet, because that's when the real danger starts to happen.
00:15:16.740 - 00:15:35.048, Speaker A: Totally makes sense. Speaking of the delegate, I know that some of you have been using the fridges, which we have to use the delegate for, for Ashik. I'm curious how you see those kinds of user interactions, how you accommodate them in the wallet, and how you can kind of prompt the user for what they're about to do.
00:15:35.176 - 00:15:52.564, Speaker D: Yeah, I mean, the delegate one especially is sort of interesting. Like for example, at the fridges, you delegate them the ability to spend like up to dollar 20, which reflects the range of things that are in the vending machine in the fridge, basically. And how many people might take actually specifically solfare wallet. They have like an undelegate function that you.
00:15:54.544 - 00:16:04.736, Speaker C: Oh yeah, you're saying that software has a delegation center. We're able to un revoke the delegation and able to take out of the fridge whatever you want.
00:16:04.800 - 00:16:10.504, Speaker D: No, no, that's not what I'm saying. But we take care of batteries of security.
00:16:10.584 - 00:16:12.644, Speaker A: Yeah, yeah. Please don't steal from the fridges.
00:16:16.384 - 00:16:46.248, Speaker D: But yeah, and we've been seeing with NFTs, we've seen some stuff where the user might in one transaction be receiving an NFT and sending money. But like the way the NFT comes, the person sending you is still the delegate for it. And this is convenient for many legitimate use cases. These are not like, this is not a scam, just like a legitimate company needed to do this as part of their workflow. But in transaction simulation, sometimes tricky to tell the difference really. Right. And these kind of whitelists are important for that purpose.
00:16:46.248 - 00:17:30.063, Speaker D: Our wallet, like we first pay, we sort of like flagged these delegates out of the box and we're sort of, we sort of just, we thought that was fine to kind of work through these exception cases kind of, kind of manually. And I think beyond just transaction simulation, you can also talk about trying to just actually parse the transaction, which gives you a lot richer set of metadata out of it. So it's hard to do that. Right. Because it, for a given arbitrary transaction, you might not have easily available the IDL for parsing that. So I think we've seen things like Explorer kit from Solana FM that might make this a bit more ergonomic for more people to implement. But that lets you get out like, hey, not just am I going to receive an NFT, but like, hey, specifically what is exactly happening, but it's kind of a pain in the, in the vanilla state.
00:17:30.763 - 00:17:46.114, Speaker A: Yeah, makes sense for VOva. I think programs, as they control certain wallets, do you have to put them on a whitelist? How do you treat arbitrary transactions that are going through the wallet?
00:17:46.894 - 00:18:51.808, Speaker B: Well, I would say for squad specifically, it's part of the core of our business, at least it should be. Our users need to understand what exactly they're signing for. Sure. We overall as an industry, I think we should do a bit better in terms of the simulation details and stuff, because important stuff that rarely ends up in the simulation is what are the writable accounts? For example, you pass into the instructions, and this is writable accounts and signers in general, because the rack might not be only about sending, stealing your tokens, it can be about get an authority of some of the accounts managed by whatever, like a drift program or something else. So I think that kind of information is really important. So yeah, that's kind of my stance on the whole kind of simulation state of things. But yeah, for the smart contract wallet, I mean like the idea is the same.
00:18:51.808 - 00:19:08.124, Speaker B: Right? So under the hood you have a bunch of instructions. The only difference is that they're called via CPI call rather than top level instructions. You still need to simulate them. And because of that, the support for simulation is a bit trickier because.
00:19:10.144 - 00:19:10.432, Speaker D: For.
00:19:10.448 - 00:19:55.008, Speaker B: A multisig, you create a transaction and then you execute it in separate phases, completely, maybe separated in time. Even so, when creating a transaction, your regular wallet with one you created, it might not be able to give you all the information about what's going on because that stuff is going to be executed later. So you'll only see the actual simulation from your wallet when you call execute. So yeah, this kind of additional challenges that we have to deal with. But yeah, we try to put transaction simulations to the forefront of our product, I find it extremely important topic for.
00:19:55.176 - 00:20:01.284, Speaker A: Makes sense. Francesco Phantom, 100 million transactions. How are you safeguarding them?
00:20:01.584 - 00:20:41.486, Speaker E: Well, I already spoke to some of it earlier, so. Yeah. Block lists, transaction simulation, message signing simulation, which I think is something that sometimes goes overlooked. So users are not only signing transactions that are submitted to blockchains, but they're sending messages that also have very serious consequences, potentially. There were some pretty high profile hacks on Opensea where people were signing messages and not realizing that they were malicious. So there's kind of a whole suite of things that users are signing with their private key material that need to be scanned and secured. That's it.
00:20:41.486 - 00:21:13.734, Speaker E: I'd say just from a. From a philosophical standpoint, I feel like we've done a good job of not putting everything on the user. I think my mind always goes back to Metamask and showing JSON blobs and showing raw transactions. And it's kind of this don't trust verify philosophy that can exist in crypto, where it's like, hey, we'll just show you the raw stuff and it's on you. And I'm glad that that's changing and that the wallets are taking more responsibility for, you know, security and trust and safety.
00:21:14.594 - 00:21:34.954, Speaker A: Awesome. Yeah, totally agree. All right. Shall we bring the spice? I think let's do it. All right. So one of the more interesting topics to talk about in the wallet space is the role of open source. So I'm really curious to hear from everyone here about how you view open source.
00:21:34.954 - 00:21:43.770, Speaker A: What parts should be open source? Should everything be open source? Should none of it be? How does that affect the consumer and how does it affect your business? I'll start with Vida.
00:21:43.922 - 00:22:14.124, Speaker C: Definitely. Great question. Well, solflare is partially open source. Some of the SDKs that we use fry mentioned for NFT simulation are open source. We also open sourced something called the Unified token list because there was a deprecation of this token list. And then we built an aggregator that permissionlessly consumes multiple sources and provides a selective source of truth. Of what are the relevant tokens on Solana.
00:22:14.124 - 00:23:01.752, Speaker C: I think we. I mean, probably most of the audience here learned from examples of other blockchains, open source wallets. We all see Metamask being open source, we all see a bunch of other wallets being open source. But what's different in Solana is that it's much faster. What I'm trying to say is that the wallet or the client cannot directly communicate with RPC's because that's not scalable. If you want to load 100 nfts, there's like four or 500 HTTP requests, or is an RPC, and clients per se cannot scale. There's a ten year old Android phone which is not able to load all of the nfts the user has if there isn't some scalable part.
00:23:01.752 - 00:24:20.982, Speaker C: So we moved a good chunk of that aggregation and data collection off of those devices and make the clients really light. So I'm getting to my point where this brought us in a space that we have built a lot of proprietary, not uniform read API compatible stuff that we keep closed source, partially because it wouldn't definitely be viable for any developer to spin up all the infrastructure that we build. But we also think that there's very little if no technical knowledge to be able to verify if what's deployed is basically what's within the code base. So although we think that some of the core key handling components should be open source, and that's something that we're looking into doing, all of the proprietary tech that we built is closed source for now. And also it's a question of competition. I mean people will see what you're working on, and if someone is building an alternative, I don't know, blockchain support someone, you might not want someone to see it. So we're Solana maxes, and because we're going to stay only Solana to that extent, but we do see the, I would call it an open source problem.
00:24:21.118 - 00:24:37.062, Speaker A: Sure, sure. I do think the key material storage, that part of it is the part that I think most people are most concerned by the UI, give or take that. But yeah, I think that there are components that really do make sense to open source. Ashik, how does this look like for you?
00:24:37.238 - 00:24:59.594, Speaker D: Yeah, so similar to Soulflare, we have some SDKs that are open source because they kind of have to be for people to use them. Right. And that includes some key management logics. People can permissionlessly make tip links without talking to us. No API keys, no costs whatever. So. But as far as like the core of the application, it is, you know, a web application, right? So like there's a limit to how much you can close source.
00:24:59.594 - 00:25:41.662, Speaker D: A web application, obviously backend is closed source, but you can kind of right click and inspect and poke around and it's pretty, it's somewhat, somewhat scrutable, somewhat inscrutable. You can probably paste it into something and try to legibilize it, but. So I think, yeah, users can poke around quite a bit, even in current state. But I do agree that taking some of the core key management bits, making them open source would be a good thing to work towards. But I think taking your monolithic repo, which everyone is quite productive in, and then modularizing it in service of a philosophical ideal is not exactly the kind of decision that early stage startups, it.
00:25:41.678 - 00:25:43.022, Speaker C: Slows down the business. Right.
00:25:43.118 - 00:26:14.282, Speaker D: Yeah, exactly. I got to like, you know, make this change here, push it here, pull it out in some other place. You know, ultimately, a wallet is a kind of cohesive, integrated sort, sort of, sort of thing. Right. You probably need to make backend changes, key management changes or whatever, you know. But it does have other benefits. Like, for example, you can, if you do do that work, it's easier to communicate with auditors being like, hey, like, this part of the thing is a slow changing, quasi never changing kernel of it that I think squad is quite good at.
00:26:14.282 - 00:26:26.654, Speaker D: This, for example, whereas if you have a more integrated approach, it slows you down. But it also is a little bit. You have to tell the auditors, hey, look at this part or whatever, even though there's parts around it that are changing.
00:26:28.714 - 00:26:36.630, Speaker A: Colton, it's tough to weigh the balance between shipping and giving that, getting everything out there and safeguarding the user squads.
00:26:36.822 - 00:27:06.726, Speaker B: Yeah. So, I mean, if you're building a smart wallet, first of all, make sure the source code of your program on chain is available. Right. So that's like a basic, like just cover your basis. So IDL should be there. The source code of the program should be there because it's like the core logic of execution of transaction of your smart wallet. And second part, I would just like double what guys mentioned before me.
00:27:06.726 - 00:27:32.864, Speaker B: Like the part that manages private keys, I believe it should be open source. So the rest of the stuff is your kind of product details and it's not that important, frankly, for other people to audit and look at. But yeah, this keys management part, I think it should be open source. We haven't open sourced it yet for fuse wallet, but we're going to.
00:27:33.964 - 00:27:39.964, Speaker A: Yeah, I guess it's hard to verify that that open source thing is the thing that you're actually using. Right.
00:27:40.084 - 00:27:48.780, Speaker C: Especially if it's one module and it's like open source at that point. It's like a vanity metric because you're never able to, like, verify if that module is inside of the app actually being executed.
00:27:48.812 - 00:27:49.428, Speaker A: Yeah, yeah, yeah.
00:27:49.476 - 00:27:57.460, Speaker B: That's true. Because, like you can just. Whatever you can say that this is the version that we're using, but nobody can check open source.
00:27:57.492 - 00:28:03.108, Speaker D: Not a monolith. Right. Like open source versus source. Available versus actually having a decentralized development process. All these are distinct.
00:28:03.236 - 00:28:08.396, Speaker A: Sure. Yeah, yeah, absolutely. Absolutely. Francesca?
00:28:08.580 - 00:28:42.468, Speaker E: Yeah, I mean, I agree with a lot with what's already been said. Fantom is mostly closed source. We have started open sourcing certain libraries like everyone else. So we open source the shortcut spec, we open source our wallet adapter implementation and we kind of have this internal playbook. We're also Monorepo and we have this playbook for turning internal packages external. So there's kind of like a golden path there. I would like to open source our vault code, but as others have mentioned, there's kind of competing priorities.
00:28:42.468 - 00:29:39.834, Speaker E: But I do think, I do think it's important. I think when people talk about open source, they're talking about a few things and they get confused. It's like they're talking about security on one end, verifiability and trust in a few different ways. And as you guys have already mentioned, even if we open source all the code, there's no way to verify like that is what is being run. But I do think a good thing that's a nice healthy balance is to run regular security audits and open source those and make those available, because that way you actually see, you know, not everyone's a developer, not all our users can go through our code and verify that we're doing all the cryptography correctly and storing their keys in a safe way. So I actually think the most transparent thing to do is to let professionals, pay professionals to audit your code and open source what they find. And in doing so, you actually get a way more human readable version of what's going on internally.
00:29:39.834 - 00:29:53.974, Speaker E: I also. There's things just talking about what you're doing. Since trust is a part of the equation anyway, you can just transparently say this is what we do internally. And I think that gets a lot of the issues out of the way.
00:29:54.134 - 00:30:04.094, Speaker A: Makes sense. Can I get a commitment from all of us to open source more things? Yeah. That's all the time we have for today. Thank you so much for listening.
