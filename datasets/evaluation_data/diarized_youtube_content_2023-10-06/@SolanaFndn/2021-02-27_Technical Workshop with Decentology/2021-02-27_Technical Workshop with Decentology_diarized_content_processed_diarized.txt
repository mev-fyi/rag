00:00:53.134 - 00:01:29.946, Speaker A: Hi everyone. I'm Nick Kalyani, co founder of Decentology, and I'm here today to tell you about Dappstarter. Dappstarter is an application designed for developers to make it super simple for you to build decentralized applications. Today, our focus is Solana, and I'm going to walk you through how to build adapt on Solana using Dappstarter. We're going to go through all steps, including the front end, the contract, and also library code. So let's get started. So when you go to our website, which is Dappstarter dot de syntology.com,
00:01:29.946 - 00:02:00.030, Speaker A: you're going to go ahead and see this UI. And what I'm going to do is I'm going to make some choices here and I'm going to build the DAP now as I'm building this DAP. If you have any questions, my co founder, Chase Chapman is monitoring the chat and she'll be happy to answer your questions or pass them on to me and I'll answer them as we go through. All right, so we've chosen Solana here. The language that we support for Solana is rust. That's the only language right now. And then you can choose a framework.
00:02:00.030 - 00:02:44.716, Speaker A: So we support a couple of frameworks, vanilla and react. Now because this is currently in beta. The next section here doesn't have a ton of features yet, but there's a lot more coming. So the way this works is there are modules here and you choose the modules that you want for your particular dapp. So today I'm going to work on a simple module called hello Dev, and this is a full stack module. In other words, we're going to go through the web UI, we're going to go through the program code, we're going to go through the library code, and also I'm going to show you what's coming with the server API in the near future. We are in the process of integrating the Solana program library.
00:02:44.716 - 00:03:12.110, Speaker A: So this is a collection of programs that are already deployed on chain. So you don't have to write any rust code. You can just interact with them very easily with JavaScript or other languages and we are going to integrate them into Dappstarter. So it becomes a lot easier. Today we are going to work on hello device. So we start off with giving our dapp a name. So I'm going to call it hello Dev and go ahead and click create dapp.
00:03:12.110 - 00:04:03.010, Speaker A: Now, I'm already logged in, but if you aren't logged in, then you can log in and what it's going to do is it is going to create a brand new GitHub repository with the full stack source code for the options I have chosen. Now, that full stack source code is MIT licensed, so you're free to do with it as you please. We have tried to make it very easy to understand, and we've tried to make it so that you can get started and experience what we call Japaness in as little as 15 minutes or less from the time you you start on our website. So this is almost done here. And there we go. So we now have a repository that was created for us on GitHub. I'm going to go navigate to that, and you can see that the repo is here.
00:04:03.010 - 00:04:38.970, Speaker A: So before I clone that repo, I just want to very briefly go through the readme here and tell you a little bit about the prerequisites. So those are important in order for you to have a smooth developer experience. I'm going to be using visual studio code, but you can use any ide that you'd like. We need to have node JS installed. We also need yarn installed because we use a particular feature of yarn called yarn workspaces. In addition, you will need to install the Solana CLI tools. And finally, you will need to have support for rust enabled on your computer.
00:04:38.970 - 00:05:40.924, Speaker A: So we've got a dependency checklist here where if you can type in these commands and get a version number for all of these, then you're good to go and you can get started. If you don't have some of these, then it's best to make sure that they are installed and configured before you venture to clone and build the repository. When it comes to rust, here at the very bottom here we have a dependency guide so you can follow the instructions for installing it and make sure that your computer is ready to go. All right, so once that's done and you have these dependencies in place, it's time to clone the repo. So I'm going to go ahead and do that, and now I'm going to go ahead and split my screen so you can see the browser and my ide at the same time. All right, so over on the right here, I'm going to go ahead and clone the repo, and once that's done, I'm going to go ahead and open it up. There it is.
00:05:40.924 - 00:06:21.714, Speaker A: All right, so I'm going to talk through some of this code here. But while I do that, what I want to do is make sure that we have the dependencies installing so we're not waiting too long. So I'm going to go ahead and fire up a terminal window here, and I'm going to type yarn. So that command is going to go ahead and install all the dependencies that are needed. For this, we use the Lerna mono repo package, and that does tend to generate quite a few warnings. So don't be worried about those. Those are normal, and you can safely ignore most of the warnings.
00:06:21.714 - 00:06:54.554, Speaker A: All right, so let's look at how our project is organized here. So first and foremost, you have this folder here called workspace. What we do with Dappstarter is provide you sort of a one browser window environment where you can look at and preview your dapper. You can work with your API using Swagger and other features. So workspace is essentially that tooling. You can completely ignore it. There is nothing you need to do with it or work with it in order to build your dap.
00:06:54.554 - 00:07:23.292, Speaker A: It's just there. The action where all the code you'll be working with is in packages. And you'll see that we've got three packages today. I'm going to focus my attention on, on two of them, client and Daplib. Well, let's take a brief detour here. Looks like our dependencies are done installing. So what I'm going to do is come back to explaining those packages, but what I'm going to do right now is type yarn start.
00:07:23.292 - 00:08:16.178, Speaker A: Now, what this is going to do is kick off a number of processes, and as we go through them, I'm going to talk through them. So one of the main highlights of Dappstarter is all the orchestration. So what you're seeing here is that Dappstarter is connected to the Solana Devnet. It has created test accounts for you. It has requested airdrops for, for those accounts, and now it is compiling and building the rust libraries. So all of this orchestration, if you were to try and do it yourself, you could certainly do it, but it would take a fair bit of time and potentially frustration as you're dealing with compatibility, trying to figure out what's the best way to do something with Dapstarter. All of this is done seamlessly for you, and it's done without any intervention on your part.
00:08:16.178 - 00:08:57.214, Speaker A: You just go yarn start and it takes care of everything for you. So in addition to compiling these libraries, the next thing it's going to do is it is going to take the source code for our hello dev program. It is going to compile that, it is going to deploy that to Devnet. And next it's going to take a client web application, it is going to use Webpack to compile that, and then it's going to fire up a browser window for us to look at. Right on queue comes our browser window. So there's webpack, it's doing its thing. And nest on there is the server API.
00:08:57.214 - 00:09:19.798, Speaker A: And as I mentioned, we're still working on that. So that part won't be done. And there we go, we have dappiness. So with just two commands, yarn and yarn start. We have got a deployed Solana program on Devnet, fully compiled and working, and we also have a UI. So now what we can do is start building. Of course I could say the workshop is done now.
00:09:19.798 - 00:09:38.610, Speaker A: It's as simple as that. But no, we won't do that. Let's talk through what's happening here. So I was explaining the packages to you. So let's complete that before we go over to the left to our browser. So the three packages we have here are client, daplib and server. We are going to focus on client and daplib.
00:09:38.610 - 00:10:13.208, Speaker A: Let's start with Dapplib because it is, for lack of a better term, the heart of this whole project. It is the most important part of it. So in it there are two kinds of files you're going to find. One is the actual code that goes on the blockchain, which is the program or smart contract. And then there are JavaScript libraries that interact with that. So in programs you will find that in the source folder here is a lib Rs file. That's the rust program.
00:10:13.208 - 00:10:48.738, Speaker A: So this is a very, very simple program. It is essentially going to allow us to make a greeting and it is going to count how many times we make that greeting. It's got one read function and one write function. So the write is obviously because this is a blockchain, it's a transaction that occurs. Now notice here how we've got this comment line on line 23 that says examples. Hello Dev. So if you recollect earlier on Dappstarter, I chose a module.
00:10:48.738 - 00:11:23.800, Speaker A: So if you have chosen other modules, you would see the code intermingle here. But one of the things we try and do is make sure that you get clean commented code. So it's really easy for you to work with. And that's what you're seeing here. Now, as I mentioned earlier, and I just want to reiterate, because this is kind of important if you are not a seasoned rust developer like myself. I am certainly not then, and you don't want to write rust code. The Solana program library that we are working on integrating is going to be for you.
00:11:23.800 - 00:12:12.120, Speaker A: It allows you to interact with these programs on chain without having to write rust code. You can certainly write code to interact with them if you want to, but you can just use them directly on chain using JavaScript, and that is coming soon. I'm not going to be spending too much time in the rust source code today, but we have at least one Solana engineer I know who's on chat, so if you have a specific question about that, feel free to ask. All right, so that's the rust program, and what happens is in Dappstarter we have done all the tooling necessary to handle the compilation etcetera for you. So this is the programs folder. Let's go look at what's in the source folder. So a couple of things happen here.
00:12:12.120 - 00:13:14.058, Speaker A: As we were deploying this out here, I mentioned earlier that there were accounts created and there were airdrops, etcetera. So one of the philosophies we have with Dappstarter is we don't want developers to get completely hung up with trying to configure a wallet, figure out private keys and all of that sort of thing, which is very common and typical in blockchain app development. We wanted you to experience the joy of actually building a DAP first. And so as a result, what Dappstarter does is it generates those test accounts, and it actually stores the private keys directly in this auto generated file called Dapconfig. So here's your accounts, and here's your wallets, etcetera. When you are ready to deploy your dapper to mainnet or testnet, you would then essentially bypass this and integrate directly with a wallet. And that too will be coming once we are post beta.
00:13:14.058 - 00:14:08.046, Speaker A: But if you're just starting out, this works really well because you can essentially ignore completely everything to do with wallets and private keys, et cetera. You can focus on building an application first. So this file is auto generated, and every time your program is compiled and deployed, it hot loads and hot compiles and regenerates this file for you. So that's another part of the orchestration that Devstarter does for you. So I'm just going to show you a couple more things here that you don't necessarily have to change, but it's good to be aware of. So in the lib folder here, there is a script called Solana. So this is primarily, you can think of it as a bridge to all the interactions that need to happen with Solana.
00:14:08.046 - 00:14:42.944, Speaker A: So this is a good point for me to switch briefly over to my slides here. I want to explain to you how the workflow is, and based on some of these scripts, what exactly is happening. So give me a moment, we'll switch over here. All right, so I've shown you those three folders, client, dapplab and server. I want to take a deeper dive into what those things are and then we'll go back to looking at the code. So let's start with the client. So in the client you're going to see basically three types of things.
00:14:42.944 - 00:15:10.818, Speaker A: You're going to see pages. So these are, as the name suggests, pages. These are so the page that you saw in the web browser with dappiness. That's one of the pages. There are other pages and those are auto generated for you. Those are UI harness pages. So what we do is for every module that you choose in the Dappstarter UI, we will create a beautiful UI for you so that every read and every write function has a UI and you can interact with it directly.
00:15:10.818 - 00:15:48.472, Speaker A: And you don't have to resort to command lines or console logs or things like that. You can see everything right in the browser. And I'm going to show you that in just a few. What we also do is all the UI components, et cetera. You see, we write them as web components, so they are compatible with just about every framework that you will work with, whether it's vue, react, vanilla, J's, etcetera. And we use two libraries, tailwind for CSS and lit element for all our HTML. You don't have to use those.
00:15:48.472 - 00:16:34.296, Speaker A: In fact, this client that we have in here, it's there to help you get started. If you don't like it, plug in your own client and use the next item on this list, which is dapplib. So we have deliberately abstracted away everything that is code centric into this Dapp lib. Our vision is that you will use this for your web client, but also in the future, potentially, if you want to create a mobile app, like with react, native, etcetera, you might use Dapplib. So Dapplib houses the program code and it houses a library file we call DAP library. That's the primary JavaScript interface with the web. Front end blockchain proxy.
00:16:34.296 - 00:17:19.922, Speaker A: So blockchain proxy is essentially a script that is the dividing line between Dappstarter's entire UI and the blockchain. So beyond the blockchain proxy, there is no knowledge of the specific blockchain that is being worked on. As I mentioned when we started off here with Dapstrader, we are blockchain agnostic. So blockchain proxy and below is where the blockchain specific things are about it. It's the UI, et cetera. It doesn't have any knowledge of which blockchain it's interacting with. So we also have unit tests and finally on the server side of things in order to handle things like events, in case you want to do some standard web 2.0
00:17:19.922 - 00:18:03.176, Speaker A: type database updates based on events happening on the blockchain, we have an SJS API. Now that part is not in the beta yet, so I can't show it today, but it is coming very soon. So it looks like there's a question. Is there a wallet integration template demo that is not in the beta, but it is coming very soon? We will have that and I'll just give you some insights into that. That's a really good question. So what we will be doing is including in this template that you're seeing here two kinds of providers. One is a storage provider, so you can easily abstract and use IPFs or SIA for your decentralized storage.
00:18:03.176 - 00:18:44.008, Speaker A: And then there's going to be a wallet provider which will have support for at least one of the most popular wallets there. But you can just add your own if you want to. So because we will have this provider model, you will not need to change any of the code within the application. You would simply plug in the wallet and make sure that it conforms to the interface of the provider. All right, so now let's look at how sort of the architecture is and how data kind of flows through here. So I already kind of alluded to some of this, but I want to go into a little more detail. We're going to start at the bottom.
00:18:44.008 - 00:19:03.106, Speaker A: So we've got our contracts on the bottom. I say contracts. Keep in mind that in Solana we call them programs. So that's off on the blockchain. About that is your dappstarter application. We first have the blockchain proxy. Now I want to tell you a little bit about our philosophy there.
00:19:03.106 - 00:19:36.112, Speaker A: Also, we want to make it super simple for Web 2.0 developers to get into decentralized application development, Web 3.0 development. So in blockchain proxy, what we've done is essentially model the rest API. So you will find that the functions are in fact named get and post or put because those are familiar terms to web developers. So you've got to get for reading and you've got a post or put for updating, and then you've got events. So blockchain proxy then above it is Dapplib.
00:19:36.112 - 00:20:30.884, Speaker A: So most of the changes or customization you would do is in Daplib or DAP library. And also DAP library is what is called when we run our unit tests. So one of the things we decided early on is instead of unit testing directly on the contract, we want to unit test the full stack. So our unit tests, which are based on mocha, and again they are grayed out because they're not yet there in the beta, they're coming soon. So what the unit test will do is exercise both the DAP library JavaScript code, the blockchain proxy, which you won't change, but if there is a bug, we'll find it there. And then the contracts. Of course you are free to use directly test your programs if you wish, but we like this method better because it tests the full stack and therefore you have an assurance that your whole app is pretty solid.
00:20:30.884 - 00:21:07.452, Speaker A: All right, so moving up the stack with DAP library, we have our web components, and in particular there are three components that I want to talk about. The first is an action card. So action card, as I mentioned to you, is a UI that allows you to exercise the get and the post capabilities or put capabilities. And the action card really relies on an action button. So once I get into the demo again, you're going to see the action card and you'll decide that, well, maybe I don't like that UI. In that case, you don't have to stick with it. In fact, as I mentioned, you don't have to use the client at all.
00:21:07.452 - 00:22:05.572, Speaker A: But if you want to, you can use the action button, because the action button makes it super simple for you to take input from whatever UI you decide to create and submit it to the blockchain for transaction, et cetera. We also created a number of UI widgets to help you like input widgets. I'm going to show you how a couple of those work today, and then those web components are used on our pages. And as I mentioned, there's the standard page. We presume that you will create a spa, a single page application, but you don't have to, you can create multiple pages and then you have the UI harness. So that's kind of the architecture, and we'll go right back into the code. But before I do that, I just want to take a brief moment here to remind you of our, to tell you of our discord so if you have any more questions after this session, feel free to, to ask.
00:22:05.572 - 00:22:36.504, Speaker A: We also look at the Solana discord, so you can ask there also, but you're probably going to get a faster response on our discord. But either way, we want to help you. We want to answer your questions. We want you to build the best app possible on Solana. So please do join and ask any questions. All right, so let's get back to code. So before we took our detour into the slides, I was explaining to you how blockchain J's dapplib, et cetera, work.
00:22:36.504 - 00:23:06.100, Speaker A: So this is the code for dapplib. I'm going to leave this on the screen here. And what we're going to do now is go over here to the Ui harness so you can kind of see what's happening. So let's go into UI harness. We have just one module. If we had multiple modules here, you would see multiple panes here, and each of those has its own UI harness. All right, so we go into the Ui harness here, and as I described in the slides, we've got these action cards here.
00:23:06.100 - 00:23:35.064, Speaker A: We've got one for view and one for submit, which is for writing. So let's just go ahead and try some of this out and then go and look at the code. I'm going to make this a little larger here. So the first thing we want to do is call our program to see how many times the greeting was made. Well, we're just starting off, so it should be zero. And you can see that it is in fact zero. So this was a read.
00:23:35.064 - 00:24:01.496, Speaker A: So we didn't see anything happen here. But we're going to do a right now, a commit by incrementing the reading count by one. And what you will see on the right hand side in the console here is a transaction that occurs. So let's go ahead and submit. And that actually that output appears to have been suppressed. But you can see that the transaction result is here. And I mentioned earlier that we are on Devnet.
00:24:01.496 - 00:24:21.928, Speaker A: You can see that here. And as proof of that, let's go ahead and click on the transaction details here. And you can see that we are in fact live. And this is the transaction. And you can even see that in the program log, the comment I had in the code. Hello, Dev, you're looking well today. So that is right here.
00:24:21.928 - 00:25:09.938, Speaker A: So in just a matter of seconds, without having written any code yet, we are able to connect and write a transaction onto the Solana Devnet. So now it's just a matter of taking this process here, these action cards, etcetera, rinse, repeat, and you can build, adapt. So how do the action cards interact? How do the action cards interact? Let's look at the Dapp lib code. So I have here count hellos. So the get greeting count is fed by this particular function. And all of these follow a pattern. And once you figure out the pattern, it gets super simple.
00:25:09.938 - 00:25:43.284, Speaker A: The first thing is we always get the configuration. So this tells us which blockchain we are. What is the smart contract address and recollect the addresses that for the test accounts it has set up. And then we call the blockchain script with a get or in this case a put. So depending on whether it's a read or a write. So the parameters that are passed to here are fairly standard. I'm going to go here into blockchain and show you.
00:25:43.284 - 00:26:43.604, Speaker A: So you're essentially passing the configuration environment and the account name to use. And blockchain j's does all the heavy lifting for you. So you don't have to think about how does that happen. You can see here that this line 16 right now is hard coded, so that's because we don't have the wallet integration done. Once that's done, this will go away and it'll use it dynamically from the wallet that is in play in the browser. One of the things we also have here is helper functions to format things for you so they look nice and you don't have to do console logging, etcetera. Now, having seen this, now you can see why I mentioned that while the action cards are great for development, it's possible that you may not want this to be in your end user facing UI.
00:26:43.604 - 00:27:22.726, Speaker A: So that's where you would probably just want to use the button and have your own UI. But let's go ahead and look at how that UI is composed and how it interacts with dapplib. So it's all wired up for you. So in the client folder, let's go into source here and in the DaP folder, that's where you're going to find the pages that I alluded to earlier. The first page is Dapp JS. That's the homepage that you're seeing here. Over here you can see that there's a fair bit of code highlighting, etcetera, and there's attributes.
00:27:22.726 - 00:28:12.554, Speaker A: So all of that is coming via the lit element library. So what litelement does is make it super simple for us to use attributes in the code and use HTML to be very expressive in our UI. In fact, what we are doing here is using a JavaScript template. You can see that template literal thing there, but we still have code highlighting, which is not something you would normally get. But lit element makes it easy for us to do that. Most of the classes here, if you are familiar with Tailwind, these should not be new, but otherwise it's tailwind. But as I mentioned, you can just rip that out and use your own if you wish.
00:28:12.554 - 00:28:55.342, Speaker A: Let's go look at the test harness and see how that UI is composed. Let's collapse this a bit here. Just like in the source code for the program, the contract. You can see here that this block of code was dynamically injected during Dappstarter project generation and it came from this particular module. All right, so here's our action card. Super simple, it's all attributes. There's not a whole lot to do with that UI and we make it so even adding things like inputs, et cetera are very easy using widgets.
00:28:55.342 - 00:29:52.524, Speaker A: So if you go up here, you can see that there's a few different widgets here, text number account, some of the common things. So what I can do here is I can add a widget. So let's do text widget label equals, let's call it info, placeholder equals enter some info. Let's close that up, hit save and go, go here, and there's our input there. So it makes it super simple for you to develop. Now, I've added this field, but it's kind of useless if I'm not able to get the input data for it. So what do I have to do in order to get that? Well, what you can do is in your action card you can add a fields attribute.
00:29:52.524 - 00:30:39.380, Speaker A: Let's say I'm going to call this field info, and over here I'm going to say field equals info and save that. What we should do is probably, I don't like doing this with Dapstarter, but I'm going to actually console log some of the output for you. We'll go over here to Daplib right now. There is no input coming to say hello. We'll go ahead and throw data in here and then we'll do a console log of data. So we'll save that. By the way, if you notice, I'm so used to this that I don't even notice it.
00:30:39.380 - 00:31:52.292, Speaker A: Everything in Dappstroker is hot loading, so you make a change in anything, it is going to do what is needed in order to give you the freshest thing here. All right, so let's go over and let's show our console here that ran a bit white. All right, let's clear that up and let's stick with our hello dev theme and do hello Dev. And you can see that that UI object is passed and you've got a field called info, which is what we named the field, and you've got the input for it. So now it's super simple for you to pass it on over here. Now if I pass this here, it's going to break because my program is not expecting that data, but this is where I would pass whatever input I received from the front end and it would just carry it forward. All right, so one more thing to show you and then we'll start taking some questions.
00:31:52.292 - 00:32:26.896, Speaker A: This is yet a work in progress, so it's not going to work with the current program. But I do want to show you the reason why we have this workspace. This is the UI and the test harness, etcetera. And over here is a swagger integration with the API. So any events that your program is going to generate, we will have it here and allow you. I just left one method in here so I could demo the swagger integration so it automatically works. It does all of that for you.
00:32:26.896 - 00:32:59.300, Speaker A: Now, one thing you're probably wondering is, do I have to have this whole frame in my final dapp? And the answer is no. Like I said, it's just a convenience thing. You can see this little arrow up here, you can use that to pop it out. And that is your standalone app. You can get rid of the nav, you can do whatever you'd like with it. You can do the exact same thing with the swagger thing. Also you can have it in separate tabs, but we just wanted to make it super simple and easy for you to switch back and forth between the two.
00:32:59.300 - 00:34:00.786, Speaker A: And that's why we put that in there. That's a quick walkthrough of how to use Dappstarter to build. Most of the work you will do is starting out and writing your programs in here, which is the rust program. But once that's done, then most of your work will move into Daplib, where it's a matter of writing the JavaScript code that your UI can consume. So this is our beta. We are working very hard to make it better, and as I mentioned, we are working on integrating these on chain programs, which we are very excited about because it will be very easy for Web 2.0 developers to to build on Solana and take advantage of its wicked fast speed.
00:34:00.786 - 00:35:03.353, Speaker A: So let's see if there's any questions. Looking out for some, right, so I think, I don't see any questions yet, but I just want to put up here again, our discord. It's zoom in a bit here, so please join our discord if you have any questions after the fact and the visit dappstarter dot de syntology.com. Generate your own app and give us some feedback. We are very excited to be working with the Solana team to make it super simple for developers to join this new, exciting world of decentralized computing. And we can't wait to hear your suggestions on how we can make this better and make your life easier. Thanks so much for joining today.
00:35:03.353 - 00:35:14.124, Speaker A: See you online. Bye. Nick, it looks like you have one more question, potentially. I don't know if we're still going, Ryan, we are. Okay. Yeah, sure. Yeah.
00:35:14.124 - 00:35:59.148, Speaker A: So does. There's one question. Does Dappstarter have plans to include rust smart contract starters? So I interpret that question as, will we be adding rust sort of modules here that you can then compose into smart contracts? And the answer is yes, over time. That's the plan. But we're going to first start off with the on chain programs, because those have been written tested by the Solana team, and we know that they are robust and they are great. And they're also in an area that interests a lot of people, which is Defi. So we're going to get those going first, and then depending on what people want, we will create more modules, and those will be rust.
00:35:59.148 - 00:36:07.404, Speaker A: So, yes, we will be doing that. All right. So again, thank you so much, and I'll see you online. Thanks. Bye.
