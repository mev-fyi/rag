00:03:54.144 - 00:03:54.684, Speaker A: It.
00:05:15.194 - 00:05:18.004, Speaker B: Okay. Hello everyone.
00:05:18.124 - 00:05:39.396, Speaker C: Welcome to Taurus Labs presentation. Okay, today the agenda of this meeting is basically to demonstrate the usage of Taurus network with Solana. We are sponsoring this hackathon and then we have a prize whose details will be shared later.
00:05:39.500 - 00:05:40.148, Speaker A: Okay?
00:05:40.276 - 00:05:43.932, Speaker C: And yeah, let me just walk you through the, what Taurus is about and.
00:05:43.948 - 00:05:46.252, Speaker B: Then how to integrate Taurus and then.
00:05:46.388 - 00:05:51.092, Speaker C: How you can get that silky smooth ux in your Dapp using Torx.
00:05:51.188 - 00:05:51.944, Speaker A: Okay?
00:05:52.964 - 00:05:56.892, Speaker C: So I'll go through the demo at.
00:05:56.908 - 00:06:00.164, Speaker B: A later stage right now. Okay?
00:06:00.204 - 00:06:20.238, Speaker C: And in the meantime, let me just talk to you about what the hackathon price is, okay, so the hackathon price is 2000 USDC and the application with the best user experience on Solana, which is built with Taurus, basically will be chosen the price. Okay, you'll be given the price and it's pretty straightforward, okay, you can build.
00:06:20.286 - 00:06:22.954, Speaker B: Any application in targeting any.
00:06:25.094 - 00:06:30.198, Speaker C: Use case. And then what matters for our price is basically just ux.
00:06:30.326 - 00:06:34.118, Speaker B: Okay? Usually Taurus provides you the most unobtrusive.
00:06:34.166 - 00:06:41.742, Speaker C: And most intuitive user experience. So the best way, if you can showcase that ux basically will guarantee you the price.
00:06:41.798 - 00:06:42.446, Speaker B: As simple as that.
00:06:42.470 - 00:06:51.110, Speaker C: Okay, coming to how Taurus works. So Taurus basically has multiple products, direct authors.
00:06:51.222 - 00:06:53.510, Speaker B: One of the products, the company Taurus.
00:06:53.542 - 00:07:01.686, Speaker C: Mainly focused on distributed key generation, okay? So the way it works is, let's say you have a private key, right?
00:07:01.750 - 00:07:02.262, Speaker B: Okay.
00:07:02.358 - 00:07:18.454, Speaker C: And Taurus basically has a bunch of nodes, and then your private key is basically split across all of the nodes on the network. And then when you log in with the Oauth provider, let's say Google, okay, torus communicates with Google to verify your identity.
00:07:18.574 - 00:07:20.510, Speaker B: And then each one of the torus.
00:07:20.542 - 00:07:44.330, Speaker C: Nodes basically returns you the private key share, okay? So that way your private key entirely is only reconstructed in the front end. And then, yeah, it basically allows you to have non custodial storage of your private keys. Okay, that's very high level of how torus works coming to direct auth, right? So direct auth is just so, so.
00:07:44.362 - 00:07:45.938, Speaker B: One of the products of, one of.
00:07:45.946 - 00:07:47.898, Speaker C: The products which uses direct Auth is the Taurus wallet.
00:07:47.946 - 00:07:48.402, Speaker B: Okay?
00:07:48.498 - 00:08:23.028, Speaker C: All of you must have seen Torus wallet, which is a ethereum based wallet. Actually, apart from that, the way direct simplifies your user flow is, let's say if there's a user, okay, he wants to sign into adapt. Okay, so the user adapt can basically simply trigger the sign in, okay, which basically shows the sign in modal. Or you can just directly trigger any one of the myriad of auth providers which you choose to have. And then once the user clicks on sign it, it basically redirects him to the Google login page.
00:08:23.076 - 00:08:26.292, Speaker B: And then once the user does the.
00:08:26.308 - 00:08:45.220, Speaker C: Google login, he'll redirect back with the ID token. And we basically give that id token onto the trust network, basically verifies against Google that you are the user who you are, and each one of the nodes basically gives back the share which it holds. And then your dapp will basically get.
00:08:45.252 - 00:08:51.172, Speaker B: The private key assembled on the front end. And then yeah, as a user you.
00:08:51.188 - 00:08:53.260, Speaker C: Are technically logged in using direct Auth.
00:08:53.372 - 00:08:59.348, Speaker B: Okay, so direct Auth is pretty straightforward.
00:08:59.396 - 00:09:05.534, Speaker C: In terms of integration, it just doesn't take too long. The first step is basically to register.
00:09:05.614 - 00:09:06.434, Speaker B: On our.
00:09:08.334 - 00:09:14.142, Speaker C: Developer portal. This is a developer portal for direct Auth. And let me just log out here.
00:09:14.158 - 00:09:16.874, Speaker B: So that I can log back in and show you.
00:09:17.734 - 00:09:28.334, Speaker C: Once you log out, once you start with the direct off page, you will be greeted with the developer portal. This developer portal internally uses direct auth.
00:09:28.374 - 00:09:32.752, Speaker B: Actually torus wallet with direct authentication. And I just sign in with one.
00:09:32.768 - 00:09:34.644, Speaker C: Of my Google accounts and then.
00:09:37.384 - 00:09:38.096, Speaker B: Yeah.
00:09:38.240 - 00:10:01.506, Speaker C: You can see that I'm logged in. Okay, so at this point, first you create a verifier. Okay, so a verifier is basically a unique identifier on the torus network which allows you, allows you to scope your private keys to that. Okay, so let's say I have a Google Oauth client. Okay, so for all of the private keys on the torus network are scope.
00:10:01.530 - 00:10:02.626, Speaker B: Two and OAuth provider.
00:10:02.650 - 00:10:06.178, Speaker C: Okay, so a verifier is that unique.
00:10:06.346 - 00:10:09.514, Speaker B: String which scopes your OAuth provider to that.
00:10:09.554 - 00:10:38.154, Speaker C: Okay, so let's say this is my Google account, and then console dot developers dot google.com, you can create one. So the way you create a auth provider is basically you just go here and then you can just click on create credential for Oauth client id. And then you select the application type of web. And then you authorize, you add origin, you add a redirect uRi, okay, so on and so forth. Let's say, let me just add example.com.
00:10:38.654 - 00:10:50.574, Speaker B: And then, yeah, I mean HTTPs and then, yeah, HTTPs, let's say, let's use localhost.
00:10:50.614 - 00:11:13.290, Speaker C: So localhost 3000 redirect, I can just use that and then I can just create a client. At this point you need to copy your client id and let's say your client client secret is not necessary with torus. But yeah, you should copy your client id and the client secret you can now go to developer dashboard and then.
00:11:13.322 - 00:11:26.196, Speaker B: You can enter a unique verifier. Okay. Ideally it's like, let's say your example, Taurus direct Google. Yeah, whatever.
00:11:26.300 - 00:11:35.252, Speaker C: So and you can choose the verifier type of Google and then you can enter the client id, which I just copied. And then once you click create, it basically deploys the verifier on torus network.
00:11:35.348 - 00:11:38.024, Speaker B: Currently I was just selecting Testnet.
00:11:38.404 - 00:11:48.346, Speaker C: It takes around five to ten minutes for the net, for the verifier to get deployed. So once it's deployed, it basically looks like this, the status will be live.
00:11:48.500 - 00:11:58.262, Speaker B: And then this is the code which you need to copy paste into your application. So now that you have the verifier.
00:11:58.358 - 00:12:18.746, Speaker C: Okay, you just need to. Let me show you a sample example. Okay, so this is a sample react application which we have the code for. This is on GitHub at Taurus, Solana example. Okay, these details will be shared with you guys. Post the call, by the way.
00:12:18.850 - 00:12:19.370, Speaker B: Yeah.
00:12:19.482 - 00:12:29.898, Speaker C: And the simplest. So the direct authentication is like very simple. First you on component mount, or however you basically define it, or direct SDK, you define your base URL.
00:12:29.986 - 00:12:34.162, Speaker B: Usually this is where you post your app.
00:12:34.218 - 00:12:43.996, Speaker C: And then the network has the testnet or mainnet. So this network is basically the torus network which you're targeting. Okay, Taurus basically has two networks which.
00:12:44.020 - 00:12:45.324, Speaker B: Are Testnet and Mainnet.
00:12:45.444 - 00:12:48.996, Speaker C: Testnet is used for development and testing purposes.
00:12:49.020 - 00:12:51.164, Speaker B: And then Mainnet is used for your production apps. Okay?
00:12:51.244 - 00:13:02.452, Speaker C: And then you do torus direct SDK in it and then it's just set it on state. Then when the user clicks on the login button, basically you just call trigger login with the client id parameters.
00:13:02.508 - 00:13:04.700, Speaker B: And then you get back a login.
00:13:04.732 - 00:13:21.124, Speaker C: Details with the private key. So this is a SEPC two five six k, one key, but Solana user CD, two edd 2519 keys. Okay, so you can just convert, use this as a seed and then you can get back a secret key. And now you can create a Solana.
00:13:21.164 - 00:13:23.292, Speaker B: Account object using that private key.
00:13:23.388 - 00:13:32.212, Speaker C: Okay, so a simple demo of this would be here. So let's say I have this application.
00:13:32.308 - 00:13:34.212, Speaker B: Okay, let's say I want to log.
00:13:34.228 - 00:13:37.212, Speaker C: Into Google and I want to target the Solana testnet.
00:13:37.228 - 00:13:40.624, Speaker B: Okay, I simply log in with Google.
00:13:41.044 - 00:13:58.084, Speaker C: I select one of the accounts, and then boom, you have the public address and private key from direct auth, okay, and this private key can be used to create the Solana secret key. So this is my Solana secret key here. That's pretty much what you need to do.
00:13:58.124 - 00:14:01.140, Speaker B: Okay, that's the easiest integration possible.
00:14:01.332 - 00:14:04.612, Speaker C: Now, if I change to network, and then the account will also change and.
00:14:04.628 - 00:14:06.204, Speaker B: All because.
00:14:08.544 - 00:14:13.928, Speaker C: That'S the simplest integration. For direct auth using Torus, you always.
00:14:13.976 - 00:14:18.416, Speaker B: Start with the auth provider. For now, I just showed you an example of Google.
00:14:18.520 - 00:14:20.960, Speaker C: You can also have proxy verifiers.
00:14:20.992 - 00:14:26.440, Speaker B: Like let's say you can have Apple.
00:14:26.472 - 00:14:38.854, Speaker C: Login, email password login, GitHub, Kakao login line, LinkedIn, passwordless SMS login, Twitter, webauthn, WeChat, and Weibo. Multiple types of logins using a proxy provider called as odd zero.
00:14:38.894 - 00:14:45.114, Speaker B: You can also have cognito or Okta or any other ot provider which you can think of.
00:14:45.614 - 00:14:51.230, Speaker C: All of them are supported. And then you just basically take these client id details onto the Torus developer.
00:14:51.262 - 00:14:54.542, Speaker B: Dashboard, and then you can deploy the.
00:14:54.558 - 00:14:59.178, Speaker C: Type of verifier, let's say one of the most famous ones like Twitter.
00:14:59.226 - 00:14:59.814, Speaker A: Right?
00:15:00.714 - 00:15:03.514, Speaker B: You can just, you can just select Twitter.
00:15:03.594 - 00:15:08.210, Speaker C: So in case of Twitter, you'd use a proxy verifier. So in case of odd zero, that.
00:15:08.282 - 00:15:13.882, Speaker B: Domain would be, I'm sorry, that domain.
00:15:13.938 - 00:15:17.774, Speaker C: Would be Taurus dash test dot auth zero.com.
00:15:18.154 - 00:15:28.074, Speaker B: Okay, where can I quickly see that? Yeah, custom domains. Yes, custom domains. Okay, I already have a custom.
00:15:28.574 - 00:15:36.006, Speaker C: And so if your account name is Taurus test, then your domain will be torus dash test dot zero.com.
00:15:36.150 - 00:15:39.474, Speaker B: Okay, usually you can find that in.
00:15:39.894 - 00:15:42.102, Speaker C: Going to any of the applications and.
00:15:42.118 - 00:15:49.414, Speaker B: Then you can just endpoints. Yeah.
00:15:49.454 - 00:15:55.846, Speaker C: So todostest dot zero.com. Okay, this is your domain usually. Okay, so you just paste that here.
00:15:55.910 - 00:15:58.822, Speaker B: And then get the verifier deployed.
00:15:58.838 - 00:15:59.230, Speaker A: Okay.
00:15:59.302 - 00:16:01.394, Speaker C: Once your verifier is deployed, you basically.
00:16:02.494 - 00:16:22.770, Speaker B: Use the sample code which we have on this example or on Solana break example over here. Okay. You can use either of them. And then, you know, wallet page, I think. Yeah, set up page. And then you can use either this.
00:16:22.802 - 00:16:58.154, Speaker C: Code or the code on the other example, which you have in order to create a Solana account. And then you can proceed with building your app. Okay, so if you guys want more information about how direct auth works and all, feel free to look at our documentation. It is pretty straightforward. And yeah, let me just continue the presentation. So, Torus, I already told you like how torus works, you can have. The way it works is we use Shami secret sharing in order to split your private key into multiple parts and then reassemble them using Lagrange interpolation.
00:16:58.154 - 00:17:11.054, Speaker C: So more details about that can be found in the torus documentation at multiple places regarding here, how torus works. Okay, so this section goes in depth on how the torus works, basically.
00:17:11.234 - 00:17:15.686, Speaker B: Okay, so yeah, you have a, the.
00:17:15.710 - 00:17:32.262, Speaker C: Torus nodes, basically they run a tendermint byzantine VFD layer, and then they have authentication verifiers, which authenticate the user. And then once an authentication request comes in, let's say like you're logging in Google, and then Google is authenticated, they.
00:17:32.278 - 00:17:33.238, Speaker B: Provide you a token.
00:17:33.366 - 00:17:47.456, Speaker C: The token is basically provided to the Taurus network. Taurus network basically interacts with the node list, which is present on the smart contract, and then basically returns you back the share which the nodes hold, and then it's assembled on the iframe.
00:17:47.480 - 00:17:49.256, Speaker B: Okay, that's pretty much it.
00:17:49.280 - 00:17:49.480, Speaker A: Okay.
00:17:49.512 - 00:18:01.404, Speaker C: You can basically go through all of it here. If you have any more questions, you can always reach out to us. We have a developer chat, and we have. It's available on t me.
00:18:02.424 - 00:18:02.816, Speaker B: Okay.
00:18:02.840 - 00:18:38.384, Speaker C: These are developer. So you can always reach out to us here, and then you'll be able to, you know, get any support, what you are, whatever you want. We'll be pretty responsive. So I already went through the steps for torus integration. First, you generate your auth to client id, which I just showed, and then you go to Torus developer portal to register. You create a workspace, and then you generate your verifier id with the Auth client id. And then you also have an example here, torus Solana example, which I just showed the code and also talked about.
00:18:40.084 - 00:18:45.580, Speaker B: That's pretty much it. Okay. To be honest, torus integration is like.
00:18:45.692 - 00:18:54.524, Speaker C: The easiest possible thing. And, yeah, you basically get all the benefits of decentralization and distributed key generation.
00:18:54.684 - 00:19:16.584, Speaker B: With just a few lines of code. That's it. What do I need to do next, Ryan? All right, yeah, I think that sounds good enough.
00:19:16.624 - 00:19:23.332, Speaker C: Yeah, please feel free to reach out to us on the telegram dev chat or where we are most responsive.
00:19:23.448 - 00:19:23.820, Speaker B: Okay.
00:19:23.852 - 00:19:25.908, Speaker C: And I'm looking forward to many people integrating.
00:19:26.036 - 00:19:30.324, Speaker A: Yeah, yeah.
