00:00:00.360 - 00:00:02.326, Speaker A: If we can't talk to each other, we're not gonna make it.
00:00:02.430 - 00:00:12.646, Speaker B: Sometimes I feel like I've bitten off more than I can chew. Most of the time, I work in a glass jar and lead a very uneventful life. A face full of glass hurts like hell when you're in it.
00:00:12.710 - 00:00:14.558, Speaker A: That's weird. That glass looks half full to me.
00:00:14.606 - 00:00:15.182, Speaker B: Eating glass.
00:00:15.238 - 00:00:16.958, Speaker A: Eating glass is staring into the abyss.
00:00:17.086 - 00:00:17.874, Speaker B: Glass.
00:00:18.454 - 00:00:19.974, Speaker A: Who gives a shit about glass?
00:00:20.054 - 00:00:21.314, Speaker B: Who the fuck is this?
00:00:22.694 - 00:00:25.794, Speaker A: It's kind of part of our culture to eat glass.
00:00:26.814 - 00:00:29.194, Speaker B: Gotta get some safety goggles next time.
00:00:38.174 - 00:00:52.246, Speaker A: Hey, everybody, and welcome to Chewing Glass, the show where we talk to developers building in the Solana ecosystem. Today I'm joined with Zano, co founder of Jito Labs Ultimate Gigabrain, and ten x shitposter on Twitter. Zano, how's it going, man?
00:00:52.390 - 00:00:54.914, Speaker B: Going well, man. I get my shitposting from you.
00:00:56.014 - 00:01:16.326, Speaker A: Yeah, man, it's cool. It's cool to have you on. I know. Like, I can't remember when we talked about this. I think I met you in real life for the first time at breakpoint, which was pretty cool to see. To see the whole team there and sort of get to know all the brains behind all this crazy stuff you guys have been up to. And more recently, I only sort of started to familiarize myself with what the hell you guys are even doing.
00:01:16.326 - 00:01:46.206, Speaker A: But we'll get into a little bit that. We'll get into that a little bit later. But as most people know, usually start out this show. This is, like, I've been saying this new thing lately where this is basically behind the music, but for nerds. So we like to sort of hear a little bit of history about, like, where you came from and then, like, sort of where you're going, just to kick it off. Like, how. How did you get into tech in general? Like, were you always a dev or, like, were you a CS student or something like that?
00:01:46.390 - 00:02:05.154, Speaker B: Yeah. So I studied computer science at George Mason. Didn't really have any prior programming experience, like, in high school or anything like that. I just always kind of. I've always been sort of hands on. Like, I like things that require skill, whether it be sports or, like, instruments or whatever. And then computers kind of felt that way.
00:02:05.154 - 00:02:14.088, Speaker B: I knew I didn't want to, like, work in fields either. I didn't want to be, like, a blue collared worker, but I do, in a way, want to be a blue collared worker in computer programming. Feels like the right balance there.
00:02:14.256 - 00:02:36.178, Speaker A: I mean, you got the beard for the blue collar like lifestyle, I'm not going to lie, but like, so the. I guess, yeah. So you weren't actually doing any sort of like HTML or any computer stuff like while you were in high school, before you. Before you decided to do cs that just sort of like, came out of nowhere. You're like, I'm going to jump into computers.
00:02:36.336 - 00:03:07.594, Speaker B: Yeah, it was like, you know, like basic MySpace background stuff, but beyond that, like, I was. Yeah, I was never like a huge computer geek, right. I always knew I was, I was good at math. I was like, decent at math and, you know, enjoyed science, but I didn't want to be like a math professor, like, go deep down that academic rabbit hole. So once I took my first intro to comp sci class, it just, it was like a Java class, super easy, but it was just really cool, like making, making shit work basically on a computer.
00:03:07.894 - 00:03:17.262, Speaker A: Did you, did you do the classic java, like make. Make a, like a blackjack game? Because that was one of the things that I did whenever I was doing my cs degree for Java.
00:03:17.438 - 00:03:34.092, Speaker B: Oh, that's interesting. No, ours was. What was it? Oh, yeah, it was like, it was something with the elections, like something about. Right, right. Some logic around like if the House of Representatives, like the way like a vote goes through the Senate or the House of Representatives, something like that.
00:03:34.198 - 00:03:38.924, Speaker A: Oh, wow, interesting. Yeah, I'm old, so we just had blackjack.
00:03:39.544 - 00:03:40.844, Speaker B: Yeah, that's better.
00:03:41.904 - 00:04:08.778, Speaker A: Yeah. So beyond schooling and all that, you got into tech, like, what was sort of like, as soon as you got out of there, you're like, all right, time to get into this world. Like, what the hell am I gonna do now? Like, what was your sort of job journey? Like, what kind of companies were you looking for? And like, sort of just like, walk me through that, like, path of like, your developer sort of journey, like leading up to, like, pretty much before you got into web3.
00:04:08.946 - 00:04:36.144, Speaker B: Yeah, I think, like, I knew what I wanted to do as far as day to day goes. I always wanted to just be on a computer writing software, dealing with hard problems. But, you know, funny enough, originally I wanted to do more like consumer facing stuff. So, like, right out of college, I started working at this startup called hungry. Basically like a Uber. An Uber model. An uber business model for like, office catering.
00:04:36.144 - 00:05:12.484, Speaker B: So you connect like freelance caterers and whatnot. And they go rent out kitchens. Like, there's pop up kitchens you could just go cook out of, apparently, and then they go, we connect them to like, offices and companies that are, that are looking to rent out caterers. So that was cool, right? That was all like ruby on rails. Typical, that sort of stack. And then we migrate everything over to, like, like, microservices and whatnot. So it was really interesting to be a part of that because I got to see, like, you know, working on, like, this legacy code base to, like, groking it and then, like, tearing it apart and really just.
00:05:12.484 - 00:05:17.572, Speaker B: Yeah, like, migrating it over. So it's cool to get that exposure straight out of college.
00:05:17.708 - 00:05:24.732, Speaker A: Back, like, full, full, full back end. Or were you doing, like, did you do some front end stuff, full stack or what? I'm assuming mostly backend.
00:05:24.868 - 00:05:33.340, Speaker B: No, it's actually full stack. So, like, I used to enjoy doing front end stuff. It felt sort of therapeutical sometimes to, like, get away from just, like, back end engineering.
00:05:33.452 - 00:05:36.460, Speaker A: Oh, yeah, you like CSS? That's. That's therapeutic for you.
00:05:36.612 - 00:05:37.804, Speaker B: No, no, not that.
00:05:37.844 - 00:05:38.624, Speaker A: Not that.
00:05:39.124 - 00:05:44.172, Speaker B: We had a CSS guru. No, I'm talking, like, react. So, like. Like, right in the middle.
00:05:44.348 - 00:05:49.348, Speaker A: Yeah, connect. Yeah, just connecting the front end to the back end. So. Yeah, right.
00:05:49.516 - 00:05:50.996, Speaker B: Just gluing shit together.
00:05:51.180 - 00:06:02.820, Speaker A: So you did the uber, the sort of uber for catering for businesses stuff, and then, like, how about after that? Like. Like, I guess, I mean, you're pretty young, so, like, you had a few other jobs between now and where you are now or.
00:06:02.972 - 00:06:23.952, Speaker B: Yeah, so I was doing that. Well, I skipped over, like, before that. Like, I had a pretty, like, legacy sort of government contracting role. Pretty boring stuff. But, yeah, after the. After the hungry startup, I went over to Amazon, got some big tech exposure that was cool in its own way, but I can only, like, handle that for a year.
00:06:24.008 - 00:06:25.644, Speaker A: What were you doing there at Amazon?
00:06:26.544 - 00:06:31.480, Speaker B: Like, evil ads pipeline stuff. Getting ads on your.
00:06:31.592 - 00:06:32.792, Speaker A: Yeah, nice.
00:06:32.968 - 00:06:41.136, Speaker B: Yeah, and then, yeah, I had enough of Amazon after about a year. And then, yeah, started looking elsewhere, specifically crypto.
00:06:41.280 - 00:06:50.552, Speaker A: When did you actually, like, get into crypto? Not even on, like, the development side. Like, you started ginning on some coins. Like, when did that happen for you?
00:06:50.728 - 00:07:02.604, Speaker B: Yeah, so 2017. I had this buddy who's. Yeah, so I had this buddy who had been in crypto for a while. Right. And he's straight, Djen still is. Love him for it. Love it for him.
00:07:03.624 - 00:07:04.400, Speaker A: But, yeah, he got.
00:07:04.432 - 00:07:26.074, Speaker B: He red pilled me basically on bitcoin. Like, just on the whole, you know, just like, the banking system and everything. Like a trustless, sort of, like, permissionless ledger. Made sense at the time. So I started. I just started speculating on it, speculating on that, and then whatever, like, alt coins that McAfee would show, like, back in 2017, that was the most.
00:07:26.934 - 00:07:29.198, Speaker A: And, like, I remember those days.
00:07:29.366 - 00:07:43.154, Speaker B: Random, like, crypto, YouTube. Yeah, those were. Times were easier. I think they, like, got harder over. Over the years. But, yeah, that's. It's kind of when I started just 2017 degenering on coins and didn't really stop.
00:07:43.154 - 00:07:45.084, Speaker B: Still haven't stopped.
00:07:45.824 - 00:08:02.864, Speaker A: Yeah. So, wait, I think we talked about this, though. But, like, when you were, like, sort of doing your work experience, like, you did get exposed to some, like, crypto. Not. Not actually blockchain development, but you were working on some sort of trading, like some trading system. Yeah.
00:08:02.904 - 00:08:28.554, Speaker B: So this was. You're probably referring to, like, my first job in crypto. So, like, right after Amazon, I quit jump into crypto. This was around 2020. This was, like, my first actual dive into, like, what the hell is everything? You know, it all seems magical from the outside, I think, even for, like, regular developers coming from web two. But really it's all the same. Like, it's all just code at the end of the day, running on computers.
00:08:28.554 - 00:08:47.718, Speaker B: So it was really cool to, like, demystify that. Yeah. I was working at the startup called Parsec finance. Essentially, it's like a. It's like a Bloomberg terminal for Defi. And so, like, what that means is, like, you get really rich charts. You get like this.
00:08:47.718 - 00:09:00.542, Speaker B: Yeah, you get. You get this dashboard with all these charts. The index basically defy data. So, like, defi data being uniswap radium, you know, lending markets that are on EVM chains. It was. It was more EVM heavy. I think there's.
00:09:00.542 - 00:09:06.760, Speaker B: They're starting to look more into Solana now. But that was like, my first dive into crypto.
00:09:06.902 - 00:09:18.900, Speaker A: Yeah. And when we were talking, like, this is basically just charts based on solely defi. Like, they don't even. You're not even tracking the centralized sort of trading stuff, only defi straight up. Right?
00:09:18.932 - 00:09:28.196, Speaker B: It's straight, like, defi power user catered. So you want to see, like, what's happening on Aave. You want to see what's happening on, like, different dexs across different chains. It's perfect for you.
00:09:28.340 - 00:09:38.766, Speaker A: Cool. And you were. You were pretty much, like, doing, like, building what. What languages you were building that in. Like, you were. This was all, like, sort of front end sort of stuff where you were working with SDKs, right?
00:09:38.940 - 00:10:03.054, Speaker B: No, so I was. Yeah, like, I was doing more back end stuff. So, like, the actual data indexing. So we would basically subscribe to, like, an ETH node, subscribe to transactions happening, parse event logs and whatnot, and then our back end would actually, like, ingest that data, normalize it, transform it, put it in, like, a big SQL database. The actual, like, logic was written in this weird programming language. It's pretty cool. It's called elixir.
00:10:03.054 - 00:10:15.552, Speaker B: It's like the ruby on rails for Erling. For the Erlang VM. Yeah, it's a really interesting language. Interesting times. I think so.
00:10:15.608 - 00:10:25.576, Speaker A: So with all that, like, this sounds like we're sort of leading up into your, like, okay, like, cryptos sounds pretty dope. Like. Like, what led you to, like, what led you to Solana?
00:10:25.760 - 00:10:38.032, Speaker B: Yeah, so while we're. While I was there, it was like. Like I said, it was all EVM based. And then we kind of started digging into Solana. I was. I was leading that. I was leading, like, that research a bit.
00:10:38.032 - 00:10:53.088, Speaker B: I started looking into it, and Solana just seemed like it was doing something very different compared to everyone else. Right. All the other l one seemed to be like a for. Well, they weren't. They didn't seem to be there. Actual, like, forks of the EVM chains. Ethereum.
00:10:53.088 - 00:11:13.036, Speaker B: Right. Solana was, like, doing something different. Specifically, what was cool was, like, the parallel. Parallelizable runtime and the programming model. So, yeah, really, like, the challenge and, like, the cool engineering of Solana brought me over and. Yeah, here for the vibes.
00:11:13.060 - 00:11:25.894, Speaker A: Now, did you start playing around and building on Solana? Did you know anything about rust? Or did you sort of just, like, dive right into where you sort of are today? Was there, like, a progression there? Or did you just, like, how did that happen?
00:11:26.044 - 00:11:52.814, Speaker B: Yeah, so there was a slight progression. Yeah. So back in, like, like, 2020, 2021, my friend and I, who's pwn Lord 69. We're running, like, various. Yeah, defi, like, yield farming strategies on chain, mainly on, like, EVM chains. But then we started looking into radium, started having, like, all these interesting farms. By interesting, I mean, like, 69,000% APR farms and stuff.
00:11:53.504 - 00:11:56.044, Speaker A: True degenerate shit. Right?
00:11:56.504 - 00:12:07.672, Speaker B: Yeah. So, like, my first actual exposure to Solana's sort of programming model was just like, from a, you know, from a bots. Bot operator standpoint. Like, how do I actually interface with programs on the chain?
00:12:07.808 - 00:12:10.604, Speaker A: So you were the one that was spamming the network, taking the chain down?
00:12:11.464 - 00:12:14.724, Speaker B: Yeah, just. Just testing in prod.
00:12:15.104 - 00:12:32.964, Speaker A: Yeah, it happens. Cool. Yeah. So, yeah, we can't really do this without sort of talking, like. Like, what happened beyond that? Cause I think I thought it was like, like, I always like to hear this stuff. So, like, you're working at a Mev company right now. And again, I don't want to go too deep into that yet.
00:12:32.964 - 00:12:47.504, Speaker A: Cause I got a bunch of questions for you about how the hell Mev even works. But, like, how did. How did you get, like, to where you are now? Like. And, like, what was the. Okay, now I'm working in Mev, and I work for this company. How did. How did that happen?
00:12:47.964 - 00:13:32.296, Speaker B: Right? So, like, you know, I mentioned the, like, the yield farming strategies and all that. That all felt very Mev adjacent. I was very aware of, like, you know, I read the flashbots diving into, like, the dark forest paper, that when it came out, by the time I had actually, like, understood what Mev was, I felt like it was saturated. Like, I didn't want to compete in that market. But, you know, I feel like, just, like, extracting values, whether it be. Whether it be, like, yield, farming strategies, and just, like, different, like, long tail strategies on chain are all very Mev adjacent, if not, like, under that umbrella. So, yeah, my buddy that I was actually working with at the time, Pwnelord, saw a tweet from Buffalo, who's now my co founder.
00:13:32.296 - 00:13:51.216, Speaker B: It was like, it was something along. Yeah, it was something along the lines of, what does a mev dow look like on Solana? And he tagged me. And, like, we started just, like, chatting, chatting about Mev. I think. I think he had. Buffalo had more, like, actual, like, traditional, what people consider, like, traditional mev experience at the time. So.
00:13:51.216 - 00:13:56.524, Speaker B: So we just started chatting, and we. We're like, well, let's see what we can do from here.
00:13:56.904 - 00:14:23.400, Speaker A: Hell, yeah. I mean, like, it's wild. Like, how many connections like this literally happen on Twitter, especially from a guy named Ponelord 69 or whatever. And, like, and here you are today. So I do definitely want to talk about Mev. Like, I know a lot of my. Like, a lot of people who watch this show probably somewhat understand Mev, and, like, I'm still in that place where, like, I still kind of get it, but, like, explain it.
00:14:23.400 - 00:14:29.404, Speaker A: Like I'm five. Like, what is mav? Yeah, just. What is it? Yeah.
00:14:30.304 - 00:15:16.486, Speaker B: So, like, my definition of it may vary amongst people, but the way I see it is, like, the sequencing of events at a particular point in time affects the profit outcomes of, like, transactors on the chain, and point in time being, like, a specific slot or block on a blockchain. An example I like to use because I was explaining it to my parents, too, right? They want to know what the hell I'm doing. So I explained to them, like, it's like, you know, you go to a nightclub, you know, there's. It's. There's a hot dj in town. There's ten tables inside, and with each person that reserves a table, the price of tables go up. Tables being, like, block space in this case.
00:15:16.486 - 00:15:44.142, Speaker B: So if I really want to see this dj, I'm willing to bid up to, like, some, you know, tip up to some amount to cut the line and get the table before, like, the price actually, like, skyrockets. So you can see, like, you can see that as sort of. That's kind of like Mev, right? Because the. The line is transactions waiting in a queue. The sequencing or the ordering of everyone in the line affects, like, how much everybody pays for a table inside.
00:15:44.318 - 00:15:58.040, Speaker A: Yeah, actually, that's a. That's a pretty good analogy. That sort of helps you sort of, like, visualize, like, what that actually looks like. But there's. I mean, there's. There's obviously a ton more to it, and we'll definitely sort of get to that. So, obviously, Mev was like, this is.
00:15:58.040 - 00:16:27.304, Speaker A: This was a thing that was happening on Ethereum. I remember early in, like, being on Solana, and I don't know if this is actually what people said, but it was something like, there's no Mev on Solana. Can you even do Mev on Solana? Why would you even do Mev on Solana? Like, was there, like, a point, like, was it abundantly clear that this was gonna work and make sense to you? Or, like, what's the difference between, like, Meville and Ethereum versus Solana? Obviously, there's, like, a speed difference, so you have to have some high powered machinery to make sure that you're able to even do that.
00:16:27.884 - 00:17:04.304, Speaker B: Right? Yeah, I think to answer the question of, is there MeV? I think there is MEV on every open blockchain where there is some final arbiter of transaction ordering. Right, so, yeah, so, like, you know, Solana is a public blockchain. There is. There's, like, a leader at some point in time that actually proposes a block. Given those two things, I think you can't really say there's no MeV on Solana. I think the MeV game just a little different on Solana because of the lower block times and just, like, other various properties of the network.
00:17:04.724 - 00:17:13.780, Speaker A: Yeah, I don't think it was actually that, like, there is no MeV. Well, there wasn't currently at the time, nobody was doing it, and it was. The question is, like, I think it was mostly just like, could you even.
00:17:13.812 - 00:17:31.867, Speaker B: Do that I do remember people, like, I do remember, like, chatter about, like, there is no Mev on Solana because, like, the block times are so slow or so, so fast. I remember that. And I still think there's people out there that think that they just haven't looked into it enough.
00:17:32.035 - 00:17:56.536, Speaker A: All right, now let's talk about Mev in terms of, is this good? You just hear stuff like, if somebody is like, that's like, sort of a layman to Mev, and some of that deeper things is like, I've heard people say it's, it's the root of all evil. Not really. That's an exaggeration. But, like, is Mev good for Solana and is Mev good for users?
00:17:56.720 - 00:18:34.344, Speaker B: Yeah, I mean, I think Mev in and of itself isn't necessarily good or bad. I think it's just like an emergent property of permissionless blockchains. I think what you actually do with that MeV, and, like, if you like creating actual systems around redistributing MeV and sharing it with the network, I think that's where, like, you can consider it. Good. I do think the fact that there is Mev on a chain is sort of a proxy signal for that chain being healthy and that chain actually having user activity. I think MeV is like a direct function of user activity without any user activity. There's not really any MEV in the first place.
00:18:34.344 - 00:18:55.744, Speaker B: Now, if you couple the actual presence of MEV with a system to redistribute the MEV to the rest of the network, now I think you can call it a good thing, because now you're incentivizing people to come in and stake to this network because you're able to actually offer a higher yield offering that's sustained over longer periods of time.
00:18:56.044 - 00:19:42.230, Speaker A: Yeah, my sort of just really, the view that I, the things that I used to hear about MeV was always from the Ethereum world and MeV. We probably should have said this a while ago, but we'll go ahead and just say it now. It started as minor extractable value. And the way that this worked was people would go like, not like, walk up to a validator or a node, but they would pay that node to reorder the transactions for them so that they could profit higher off of certain sorts of trades. And they would, and you have to have the funds to pay the money to pay these guys to do that. So that name has been updated since then. It's no longer like minor extractable value.
00:19:42.230 - 00:19:45.938, Speaker A: What's that update? What's the updated term terminology for Mev.
00:19:46.126 - 00:20:02.254, Speaker B: Yeah, it's a more appropriate term now. It's maximum extractable value. So it's like agnostic of a proof of work or proof of stake system. It's just like this is the maximum amount that can be extracted from reordering these sequences of transactions.
00:20:03.994 - 00:20:53.924, Speaker A: You're talking about this being good for users. I want to now. And you also sort of alluded to the facts as if you're redistributing those rewards to the people, then this is really where the goodness of MEP comes in. So you're the co founder of Jito Labs, and you're co founding this with Buffalo, which I think many of you guys know out there. And this is highly technical work at really insane speeds. How is this number one, what is Jito like where I know this, like, everybody's probably watching or listening, like, understands now what MeV is, but what is Jito and what are you guys trying to actually solve?
00:20:54.664 - 00:21:12.044, Speaker B: Yeah, so, like, contrary to a lot of people's beliefs is Jitto is not a MeV shop. What Jito is, is it's providing the MEV like infrastructure to allow efficient extraction of MEV and redistribution of that MEV to the network.
00:21:12.164 - 00:21:41.872, Speaker A: We're going to have to dive a little bit deeper into this to make sure how that works. From what I understand, Geo has a client that validators on Solana are now using. And those clients, that client that they're running, takes everything that you've built, abstracts it away, and allows them to capture MEb value, and they, they redistribute that to their users, giving the stakers of the network a higher reward. Is this right?
00:21:41.968 - 00:22:29.094, Speaker B: Yeah, I mean, yeah, that's basically on the target right there. It's like we shipped this client, added a bunch of code to it to kind of where there's this notion of bundles, which is basically just like a data structure that represents a list of transactions. These transactions will execute all or nothing. So you can imagine a situation where you only want, you know, a certain transaction to execute if, like, everything executes. You don't want any partial, like, successes. So the client supports bundles the way, like the interface for that. The API interface is a GRPC API, accepts bundles and then sort of proposes these, like proposes the proposes this block, like a normal block.
00:22:29.094 - 00:23:00.560, Speaker B: So a block with the bundle just looks like any other block. So there was no consensus modifications to the client solely, just like the ingress. And with that, we had, we ship what we call a block engine. This is the thing that runs the off chain auctions of bundles. So, you know, this thing receives like bundles from all these searchers. We only want to submit the highest paying ones. We don't want to submit all of them because some bundles may invalidate other bundles.
00:23:00.560 - 00:23:42.534, Speaker B: So if you have a bundle a and bundle B, both touching, like, for example, radium market or orca market, then there's a chance that, like if this bundle a succeed, you know, actually gets executed, it'll invalidate the state transition of Bundle B. So we choose whoever's willing to pay the highest, submit that to the validator. The validator runs that, you know, executes that transaction, proposes it out to the network, but now, like step going back to the bid that was attached with the bundle, we take a portion of that, and this is all, like, this can all be tuned by the validator themselves. A portion of that goes to the validator that actually executed the bundle, and then the rest of that goes to the stakers that were staked with that validator. And this runs every epoch.
00:23:42.954 - 00:24:07.674, Speaker A: Okay. Yeah, we're going to have to demystify this a little bit. There's a couple, like, sort of terms that you were threw in there that, that I didn't know until recently. And like, what you're talking about a searcher, and a searcher is essentially, from my understanding, is a user. But in this case, that user is actually a bot. And that, and a bundle is, what is a bundle?
00:24:07.974 - 00:24:12.774, Speaker B: Just a list of transactions where it's like guaranteed to execute all or nothing.
00:24:12.894 - 00:24:47.364, Speaker A: So the all or nothing stuff, this is something that's super interesting. Why the all or nothing? Just sort of, in a simple term, what's that means? You say, okay, we're going to submit a bundle. It has to be all or nothing. What's the sort of like, idea behind that? I think when you and I spoke before, it was more around like, the idea of arbitrage might be like a simple example to explain, like a simple arbitrage and why it's necessary that everything in that bundle actually is executed. Because if it doesn't, there's like, obviously consequences to that.
00:24:47.944 - 00:25:27.512, Speaker B: Yeah, so let's say, let's say there's an arb between orca and radium. For example, you want to buy the asset from orca and then sell it for hire on radium, but you don't want to, like, so let's say those have to be two separate transactions. Just for the sake of this example, if you buy it and then your transaction to sell fails, just because it could fail for many reasons. Right. If it fails, now you're holding this asset that you don't necessarily want to hold. So to mitigate that, like, inventory risk, you want to basically submit a bundle where it's like, okay, well, if that second transaction did fail, then your first one actually fails, too. So you don't ever actually hold the asset.
00:25:27.708 - 00:25:52.832, Speaker A: Right. So, like, if I'm gonna buy over here and sell over there, I want this thing to fail. Because if I bought here and this other one failed, then, like, yeah, just sort of, like, basically just reiterating what you described, but with. Okay, so that makes. That makes a lot of sense. Well, slight sense to me. And in all of this, how.
00:25:52.832 - 00:26:02.284, Speaker A: How is jido benefiting from. From these. This whole situation in terms of, like, obviously you guys have a business model. Like, is it, like, what's the. How does that work?
00:26:02.824 - 00:26:14.992, Speaker B: Yeah, I mean, so our block engine collects a small block builders fee. So, like, with back to the tip we were talking about, we collect a small fee on that, and then the.
00:26:15.008 - 00:26:28.314, Speaker A: Rest really gets redistributed, and that's part of the transaction. So, like, the buy order, the sell order, and the Jito transaction all have to succeed in order for that the whole entire thing to be, like, executed.
00:26:28.654 - 00:26:51.820, Speaker B: Right. So, like, the tip is actually just a, like, solana transfer. We expect there to be, like, a Solana transfer to one of eight public keys. So it's like, if you tip any one of these eight public keys, then you're eligible for this bundle to actually be considered in the auction. If you don't, then it's like, well, you're not tipping anything. Your bundle just kind of gets discarded from our system.
00:26:51.982 - 00:27:04.016, Speaker A: Yeah. And, like, this is. This is probably one of the more technically. Technically in depth sort of episodes I've ever done. But, like, I'm just super curious, and I'm. And I'm sure a lot of other folks are. So we talked.
00:27:04.016 - 00:27:27.328, Speaker A: I don't know if we fully, like, went over the part of the. The sort of blockchain, the off chain auction stuff. So, like, one of these bots or searchers sends this to Geeto's client and says, hey, here's a thing that I want done. And if it looks. And then, like, how does the auction happen once they sort of propose that to you? What does that look like?
00:27:27.456 - 00:28:09.226, Speaker B: Yeah, so the auctions happen at discrete time increments. So, like, we batch these auctions into 100 millisecond time intervals within a slot. So, you know, slots, 400 milliseconds basically you get four auctions per slot now. So we start receiving bundles, for example, like just walking you through like the flow of it. We start like collecting all the bundles for like let's say we're at time zero for the next 100 milliseconds we're going to have all these bundles that we collect and then we're going to, we're going to run them through this auction in parallel. The parallel point is important, right. That's like Solana's, what I think is one of Solana's coolest features with the like parallel execution runtime.
00:28:09.226 - 00:28:41.490, Speaker B: So we know beforehand what state bundles touch. So let's say your bundle touches orca and mine only touches, you know, like, like drift. We're touching different pieces of state and our bundles don't necessarily need to compete against each other. So we would run two separate auctions that run in parallel for our bundles. Meaning like your tip isn't going to compete against my tip. And potentially both of our bundles could actually get submitted as a batch to the validator to get executed in parallel. Okay.
00:28:41.602 - 00:29:16.048, Speaker A: And then they're submitted to the validators that are running the Jito client. And the only way that this actually works correctly is if like when you sub, you submit that, do you have to submit it to, you have, okay, let me, let me read, let me read sort of phrase that because I tripped myself up a bit. But we're basically talking about once all that stuff is decided and those auctions are done, you submit that to the validators. But the only way that that actually works is if the person who is the leader at that time is running the Jito client.
00:29:16.216 - 00:29:50.142, Speaker B: Yeah, correct. So our back end tracks that, right. It'll track like, you know, the leader schedule ahead of time so you can kind of look at, okay, well we know that a Gito validator is coming up so it's safe to like submit. Well it's okay to submit the bundle at this particular point in time. If there is no Gito validator, there is no bundle to like, you can't really submit any bundles. So as it currently stands, there's about 10% of the network stake running a Jito client. So you can assume like 10% of the time you can try to land a bundle.
00:29:50.318 - 00:30:10.884, Speaker A: So just talking about this 400 millisecond block times running for auctions, like doing all these different things like that sounds really, really fast. What speeds are we talking about when you guys are sort of performing all these auctions and speaking with searchers and all that? Stuff. It has to fit within a 400 millisecond window.
00:30:11.044 - 00:30:31.900, Speaker B: Yeah, I mean, I still think it's, like, crazy how fast everything can go and, like, continue to get faster over time. So we. We measure all our latency in microseconds, so we. We try to optimize at the microsecond level. I think searchers always. I think searchers also do the same thing. Yeah, it's wild.
00:30:32.012 - 00:30:34.742, Speaker A: That's one fraction of a millisecond, a microsecond.
00:30:34.868 - 00:30:36.274, Speaker B: It's smaller than a millisecond.
00:30:36.354 - 00:30:52.290, Speaker A: This stuff actually sort of blows my mind, especially on the tech side of things. But to sort of wrap up the sort of Jito conversation, I did want to ask a couple more things, like, how many people are actually working in judo right now, because I don't think I, like, 100% sure.
00:30:52.482 - 00:31:11.916, Speaker B: Yeah. So there's nine of us. Seven of us are engineers, and we're continuing to grow. So for those of you listening, if you. If you're interested in hard engineering problems on the engineering side, then please reach out. And if, you know, you. You know, we're also looking at other.
00:31:11.916 - 00:31:15.172, Speaker B: Other roles, like marketers and. And what have you.
00:31:15.348 - 00:31:23.220, Speaker A: Cool. Yeah. I mean, like, I'm sure even if you weren't necessarily hiring and somebody's brain was big enough, you'd hire them anyways, right.
00:31:23.332 - 00:31:25.100, Speaker B: You can't. You can't say no to talent.
00:31:25.212 - 00:31:41.900, Speaker A: We've talked about. We talked about Cheeto. We talked about your history a bit. I want to sort of dive into sort of. You were working on, like, more higher level programming language, Ruby on rails. I think you talked about go react and all these stuff. After you're going through that process and you're joining Jito, like, you.
00:31:41.900 - 00:32:09.464, Speaker A: You basically came face to face with a very low level language. Also. A very low level language is one, and it's one of the more popular ones, but at the same time, like, it is quite different than all those other languages that you were writing in. Like, what was your experience? Like, what was your glass chewing experience, like to get you to a place where you can actually do mev in rust on Solana? That sounds, like, pretty. Pretty challenging.
00:32:10.084 - 00:32:36.904, Speaker B: Yeah. I mean, I'm a masochist, so. No. So, yeah, I mean, it's tough. Like rust is, especially in the beginning. So it took me a solid, like, six to eight weeks to actually be like, all right, I I'm kind of productive in this programming language. And then, you know, like, once I hit, like, the three month mark, I felt like I actually could get off the ground and start like, just like writing a ton of code without really thinking too hard about it.
00:32:36.904 - 00:32:42.248, Speaker B: I think, like, the thing about rust is like the borrow checker and, you.
00:32:42.256 - 00:32:44.164, Speaker A: Know, we hear this quite often.
00:32:44.624 - 00:32:59.106, Speaker B: Right? Yeah, I mean, it feels like you're fighting the compiler for like the first three months. That's what it feels like. And then after that you're like, oh, wait, the compiler is my friend, because if this thing compiles, like, this thing probably works. Yeah.
00:32:59.250 - 00:33:12.450, Speaker A: Like, how did you actually learn rust? Are you just like start, did you immediately start diving into code? You watching YouTube? You read the Rust book. What's your sort of methodology for, like, getting into a new low level tech like that?
00:33:12.522 - 00:33:45.274, Speaker B: Yeah, I don't find, like, reading the book to be too useful without actually, like, having some experience, hands on experience, so, yeah, just getting my hands on it. And we also, like, source dived the Solana code base for like two to three weeks before we started all this. That helped a bit. Got to learn some of the patterns that they use there, like their pipelining patterns and whatnot. And then, yeah, finally just started writing code and then fighting the compiler, like I said. And then after that, now I have the rust book here, and now it actually makes sense to refer back to it sometimes.
00:33:45.424 - 00:34:09.674, Speaker A: So that's a good reference material for you. Yeah, there's a lot of different types of learners. Some people do like the tutorial side, some like to read, but you, you were essentially saying that you learned rust in tandem with Solana, which, like, most people essentially have to do. Which was the hardest part of that, all the, like, accounts, PDA's and all that stuff, or rust, like, which was the more challenging part side of that for you?
00:34:10.294 - 00:34:32.864, Speaker B: Yeah, definitely think the Solana programming model is the harder part out of the two. Like, the programming model is very functional. It's like a functional programming model. So I think even with, like, functional, functional programming languages, we're not wired to sort of think that way. Like, the schools, schools don't really wire us that way. So it's like, it's tricky on that front.
00:34:33.244 - 00:35:03.956, Speaker A: Yeah, I mean, like, this is, this is the feedback. Like the whole chewing glass meme always, like, comes up and, like I've always told people, like, this isn't learning rust. This isn't actually learning Solana. This is learning both of them at the exact same time is the real sort of glass chewing that takes place, even though, like, Solana, just by itself also might be considered a little bit of chewing glass a lot. There's been a lot of tools built lately. Like, we. To be honest, we almost renamed the show because, like, the chewing glass whole meme started forever ago.
00:35:03.956 - 00:35:23.962, Speaker A: Like, we got people out there building insane, like, frameworks. There's a Solana unity SDK. Like, there's all these different indexing, like, services. There's, like, so much stuff, so it can't. There's still glass chewers out there chewing glass so that other people don't have to. But, like, there is definitely, like, it's. We're not really.
00:35:23.962 - 00:35:46.118, Speaker A: It's not really the same thing anymore, but, like, just for historic purposes, we decided to just keep the name chewing glass, especially when we talk to somebody like you, who literally, like, wait, you. You learned Solana, you learned rust and then, like, had to learn Solana and rust while doing Mev on 400 millisecond block second or 400 millisecond block times at the exact same time.
00:35:46.286 - 00:35:51.074, Speaker B: Yeah, I mean, I have a bowl of glass that I'm about to go eat right after this.
00:35:52.374 - 00:36:21.624, Speaker A: Yeah, that's funny. There's a couple questions that I always ask everybody on this show, actually. There's a few different questions that I like to ask, and one is, like, what. What really sucks about, like, your answer might be different than a lot of people, because a lot of people were, like, working on, like, the DaP layer sort of stuff, or directly smart contracts. So I'd be interested to hear answer, like, for you, like, what really sucks about Solana, like, in your world specifically, or there's, like, anything that sticks out to mind. Maybe there's not.
00:36:21.704 - 00:36:42.384, Speaker B: Yeah, I think, like, I'd be lying if I said everything was perfect. I think Val, like, system administration of validators is still. It's still pretty tricky. We have a guy on the team who made the joke the other day. He said, solana is really not proof of history or anything. It's proof of DevOps. That was.
00:36:42.384 - 00:36:44.824, Speaker B: I thought it was funny, but it's also true.
00:36:45.244 - 00:36:57.300, Speaker A: Yeah, this is. I mean, like, just, like, with all things, man, like, we're. Like, we're evolving over time and things get better. Although, like, for the. For the earlier guys, it really sucks. I. I still say this today.
00:36:57.300 - 00:37:22.568, Speaker A: I have no idea how the Armani's and the daffies of the world actually built on Solana when there was literally only the core documentation and not another piece of information out there on the Internet about this. And they somehow managed to, like, build all this crazy stuff. I mean, it was. It was mostly discord and direct contact with the actual core engineers. And it's still, like. I mean, it was an incredible feat to build on Solana pre. All this different tooling and all these.
00:37:22.568 - 00:37:46.622, Speaker A: And a lot of it's not even just the tooling or the content. It's the access to this massive community of developers where you can just, like, tag somebody on, like, Twitter and be like, yo, man, can somebody answer this? Somebody retweets it, and then they get, like, 15 people, like, on the Solana community just being like, oh, yeah, I got it. And there's. There's a ton of people. Like, I mean, you help people, like, online, and, like, it's. It's pretty. Pretty cool to actually see.
00:37:46.758 - 00:37:50.910, Speaker B: Yeah, those early guys are champs. I mean, I don't know what I do without anchor.
00:37:51.102 - 00:37:57.870, Speaker A: When did you start actually building on Solana? Do you roughly know, like, what, sometime in 2022? No.
00:37:57.982 - 00:37:59.590, Speaker B: So it was June 2021.
00:37:59.702 - 00:38:00.198, Speaker A: Oh, damn.
00:38:00.246 - 00:38:10.610, Speaker B: Where we actually. Yeah, we actually, like, started the R and D and then. But, you know, most of my work's focused on, like, the validator, like, the actual validator code base.
00:38:10.802 - 00:38:34.174, Speaker A: Right. And then the final question. And again, like, just because of the depth of knowledge that you have, like, your answer is probably going to be different in a lot. A lot of people. Maybe it's not, but what is the. Like, what's one piece of advice you'd give to anybody that, like, that, you know, is about to be like, all right, I'm gonna learn Solana. Like, I'm gonna do this thing.
00:38:34.174 - 00:38:43.890, Speaker A: Like. Like, what's your advice to somebody that's, like, thinking about jumping in? Um, it could be technical advice. It could be, like, just sort of, like, any advice that comes straight to your mind.
00:38:44.002 - 00:39:06.714, Speaker B: Yeah, I think, like, if, you know, you want to build on Solana, then don't hesitate. You just got to kind of show up and, you know, at least get. Get 1% closer to your goal every day. Like, do something every day that's related to this, whether it be on the technical front or, like, less technical stuff. And don't be afraid to ask questions. Really. I think sometimes people may feel like imposters.
00:39:06.714 - 00:39:18.834, Speaker B: Like, oh, there's all these smart people out there. They're gonna think I'm dumb or not want to answer my questions. But that's not been my experience with Solana. Just come in with a student's mindset and really just ask questions.
00:39:19.134 - 00:39:36.894, Speaker A: Yeah, man. It's actually good. I have my own philosophy. I love being the dumbest person on the room. That's why I do this show, because I get to talk to people smarter than me all the time and learn a lot of stuff. Like, I don't want to. Like, who wants to be the smartest person? Like, I'd rather be, like, somewhere way below that so I can learn from the masters.
00:39:36.894 - 00:39:57.054, Speaker A: And I definitely learned a lot about Mev today. I just. In the early days, I didn't even put my mind at all towards it because I was like, I don't even have time to try to absorb what the hell Jido is over there doing. So I want to ask one question, like, what is, like, what is Jito? Like, what's the inspiration for this name that, that you guys co founded?
00:39:57.554 - 00:40:25.804, Speaker B: Yeah, so we were thinking about, we were thinking about, like, just in time compilers, and then we thought like, okay, jit sounds cool, but, you know, that's like a Java thing. And then Cheeto just kind of, like, got thrown out there. I forgot which one of us threw it out there, but. And then, you know, we had to work backwards from that. We're like, oh, this sounds cool, but, like, what does it mean? And then we were like, okay, it could mean, like, just in time ordering. So, like, just in time transaction ordering. And then we're like, all right, that's cool.
00:40:25.804 - 00:40:43.104, Speaker B: What else? We need, like, a mascot, maybe in the future. And then we looked up the word cheeto, and it's like, I think it was old japanese landlords. And we're like, oh, that sounds even more badass. Like, can feel like samurais slinging away at code.
00:40:43.484 - 00:41:13.384, Speaker A: Nice. Well, hey, man, it was great to have you on the show. We've been talking about it for a while, so I was glad to. To get a chance to have you on here and, like, give people a lesson in Mav and talk about what Jada's up to. And, like. And honestly, the coolest part about most of this stuff is really what you were talking about earlier is that you guys are actually passing on the rewards to the validators, who are then taking that and passing them back to the users. So they're like, the users at the end of the day are everybody.
00:41:13.384 - 00:41:37.196, Speaker A: Jitos are capturing a little bit of value. The validators are capturing a little bit of value, and then the users are also capturing a little bit of value. So, like, this is what you earlier, when you said, like, like, Mev can be good on Solana, especially, like, if you do it the right way, or, like, or if it's, like, done sort of in an altruistic way. So it's really. It's awesome, man. Thanks for being here. And see you later.
00:41:37.380 - 00:41:39.036, Speaker B: Hey, thanks for having me. See ya.
00:41:39.100 - 00:41:39.644, Speaker A: All right, cheers.
