00:00:03.800 - 00:00:11.478, Speaker A: Hello everyone. GMGM. Welcome to the Solana Changelog. I'm Nick from the Solana foundation dev rel team, and today I've got Jonas with me from the dev rel team. How you doing, Jonas?
00:00:11.574 - 00:00:14.890, Speaker B: Hey, Nick. I'm great. Looking forward to the changelog.
00:00:15.190 - 00:00:18.822, Speaker A: All right, let's go ahead and get to it. Have you seen any commits this week that caught your eye?
00:00:18.966 - 00:00:45.050, Speaker B: Yeah, so there's a bunch of commits about deprecation of like old methods and so on. So yeah. For example, the getstake activation was removed from the RPC client. Then Kevin is removing a bunch of unused dependencies. So he's improving a little bit. So he's moving many dependencies from dependencies to def dependencies. So this improves compile times a little bit.
00:00:45.050 - 00:00:58.370, Speaker B: Then we have cargo build. BPF is deprecated and now removed. So if you're still using this, you need to not do that anymore. So I think now it's cargobuild SPF, right?
00:00:59.400 - 00:01:02.824, Speaker A: Yeah, I think that's what it is. I honestly have to double check in the CLI.
00:01:02.992 - 00:01:17.820, Speaker B: Yeah. And then we have another one removal of deprecated symbols. So some RPC calls are deprecated and now removed, actually. So if you run into any problems there, then you need to update, basically.
00:01:18.160 - 00:01:52.014, Speaker A: Yeah. And I guess that's a good chance to just give like a friendly shout out again, like we did last week on the changelog, that if you're using any Solana code that is deprecated, there's deprecation warnings. They've been there for a while. A lot of them even started around version 1.71.8. We just are officially on 2.0 now, slowly being rolled out to all the clusters. But if you're using anything that has a deprecation warning, you need to make sure that you are upgrading your code to not use those deprecated syscall functions, RPCs, anything that is deprecated.
00:01:52.014 - 00:02:05.730, Speaker A: The Anza team is going through and updating the agave clients and all of the tooling and things to basically remove all of those deprecated chunks of code. Everyone needs to make sure that you're updating your code.
00:02:06.030 - 00:02:20.258, Speaker B: Yeah, exactly. This one is about verify strict. What I saw is that the verification of signature actually became a bit slower. But this is related to this SiMD here. Can you explain?
00:02:20.314 - 00:02:55.340, Speaker A: Oh yeah, yeah, yeah. We covered this on the changelog, I don't know, a couple of weeks ago. It was probably three weeks ago when this was opened, but basically this SimD. And you can see it's merged here, it's already been accepted, and it has this notion of precompiles. And basically what these are doing is they're like the signature verification side of transactions, verifying different types of signatures. Solana uses ED 2519, that curve, and then ethereum like signature, as you can see here on the screen. Not even going to try to say it, but it's different cryptographic curves to do cryptographic verification, the signature verification.
00:02:55.340 - 00:03:40.878, Speaker A: And basically what this precompile SIMD proposes is effectively creating a common interface for all of them, so that way they can be very, very similar. So adding additional support for additional cryptographic curves becomes even easier. Specifically, they actually call out Fido passkeys using a different curve and making it so like in theory, once these are merged, someone could add support for a Fido passkey, a common signature curve for that, making it so you can use things like yubikeys to sign messages and they can be verified on chain using Solana, it's been merged. And Sam Kim from Anza has already made one of the changes to make the existing code base compatible with this new accepted proposal. And basically this interface design.
00:03:41.024 - 00:03:50.074, Speaker B: Yeah, this is really cool. I'm a big fan of Yubikeys and everyone should be like, use Yubikeys for your email, for your Twitter so you don't get hacked.
00:03:50.122 - 00:03:51.714, Speaker A: Yeah, they're super cool. I got one right here, actually.
00:03:51.802 - 00:04:04.074, Speaker B: These are really cool. So the key is to put in your computer, you need to touch it to log in, basically. So they are pretty secure. Yeah. And interesting that they can now use these for signatures. So this might be interesting.
00:04:04.082 - 00:04:34.660, Speaker A: Yeah, I'm really excited to see someone, someone build that for the slant ecosystem. Be really cool. Let's go ahead and dive into some resources this week. One of the resources I wanted to give a shout out to is Wilfred built this thing called light das, the digital asset standard that people are used to using Metaplex. Put this forward. Basically, this is how compressed nfts work. You make these RPC calls that are using the DAS API, like an RPC extension, but Wilfred made a light version of that.
00:04:34.660 - 00:04:57.426, Speaker A: So you can more easily run your own infrastructure, especially great for local testing and things like that. So you can do compressed nfts and a lot of these types of digital asset related things using a lot of the metaplex protocols. You could do a lot of that locally and make it so it's less resource intensive than running a full das node, which can get pretty beefy.
00:04:57.618 - 00:05:02.580, Speaker B: It's really cool. Also for local development probably if you want to do localhost.
00:05:02.690 - 00:05:03.712, Speaker A: Yeah, absolutely.
00:05:03.816 - 00:05:13.900, Speaker B: I think that's really cool. Yeah, DS is nice. I think it's mostly maintained by Metaplex, but Helios is running it and Triton is running them as well. Right?
00:05:14.400 - 00:05:25.176, Speaker A: Yeah, I think all three of them are kind of like the key maintainers of it. There's some variances in their implementations and what they're running in production, I think. But generally it's pretty similar.
00:05:25.328 - 00:05:29.192, Speaker B: Yeah. So the next resource we have here is about fire dancer.
00:05:29.216 - 00:05:29.800, Speaker A: Yeah, this one.
00:05:29.840 - 00:05:34.088, Speaker B: Right. Have you seen the first block was produced by Fire dancer?
00:05:34.144 - 00:05:39.320, Speaker A: I did, yeah, on main. On Testnet. On Testnet, yeah, I think so.
00:05:39.780 - 00:05:50.360, Speaker B: I mean, in the second street they brought, the thing that we didn't see was that it failed directly after. But I think it's a great achievement area that it's now on testnet and working, actually.
00:05:50.740 - 00:05:51.964, Speaker A: Franken dancer.
00:05:52.092 - 00:05:52.420, Speaker B: Yeah.
00:05:52.460 - 00:06:20.226, Speaker A: But yeah, there's a, there's a public bounty program for up to a million dollars. So if, like calling all bug bounty hunters just like this, says, you know, if you're a bug bounty hunter and you're interested in security and like helping to improve a firedancer, but b, the entire Solana network, go take a look at this, read all the information in here and do your own due diligence within the fire dancer codebase. Try to help find some bugs and earn some money, earn some proof of work while you're doing it.
00:06:20.338 - 00:06:34.962, Speaker B: This could actually be fun just to dig into it and see if you find something, make a bunch of money. And you can also run fire dancer yourself if you want, which you probably need. Find these vulnerabilities anyway. So that's pretty cool.
00:06:35.066 - 00:06:35.754, Speaker A: Yeah.
00:06:35.922 - 00:06:40.546, Speaker B: And then we have a new course from web3 builder alliance. Right?
00:06:40.738 - 00:07:03.456, Speaker A: Yeah. Shout out for the WBA friends. Applications are open for their next round, their next cohort for their rust, bootcamp. Basically. Like, it's a very polished developer education program. They have shipped lots and lots of very good developers. Had lots of traction within the Solana hackathons too.
00:07:03.456 - 00:07:14.864, Speaker A: This program is extremely good, completely free to do. I encourage everyone to apply. I think applications are going to close in the next week or so after this changelog episode goes live. So get your applications in.
00:07:14.992 - 00:07:23.224, Speaker B: Yeah, I heard good things about it and I think they're also pretty picky with who they take, actually. So if you're good, sign up here for sure.
00:07:23.352 - 00:07:24.392, Speaker A: Yeah, send it.
00:07:24.496 - 00:07:51.700, Speaker B: And then the game jam ended and you can see all the submissions on each I o. And I think this time all the games are open source, actually. So it's a great resource if you want to see how on chain games are built, how Solana integration works. There's a bunch of Blink games, there's some godot games, there's Unity games, JavaScript games. So yeah, check them out. Some of them are really fun to play as well. So it's very nice.
00:07:51.700 - 00:08:03.260, Speaker B: And talking about Blinks, we have a few Blink Explorers now. So this one is Blink fans. Do you know anyone about anything about this one?
00:08:03.340 - 00:08:23.506, Speaker A: Yeah, there's, there's been a couple of people that are building this idea of like a Blink explorer, helping people discover what blinks are out there. We've got two of them pulled up here, Blinkfans XYZ, and then exploresalana.com. check them out if you're interested in like, trying to figure out what blinks are out there and share your feedback with the maintainers of these. And yeah, build some more cool blinks, send them over my way.
00:08:23.668 - 00:08:55.378, Speaker B: Definitely build more blinks. It's always fun to see here, even have like a little screenshot of them. So yeah, it's really nice to see these people, like, finding all these blinks and putting them into lists because it's kind of hard to find them sometimes on Twitter. And one thing we forgot actually, is stack exchange. So we have Jimmy again, we have John C. We have Abhishek Dimitriv Svetsov. Ekaron is back, Calum.
00:08:55.378 - 00:09:01.630, Speaker B: So yeah, thank you everybody, for contributing to stack exchange. Super helpful.
00:09:01.970 - 00:09:22.390, Speaker A: Yeah, keep up all the great work on stack exchange. A lot of new faces on there. This is one of the best ways we can help improve the developer education and discovery experience in the ecosystem. So ask your questions if you have them on stack exchange and even post them on Twitter, you can probably get some faster responses that way too. But that's going to wrap it up for this episode of the Changelog, and we'll catch you next time.
00:09:22.510 - 00:09:23.382, Speaker B: See you next week. Bye.
