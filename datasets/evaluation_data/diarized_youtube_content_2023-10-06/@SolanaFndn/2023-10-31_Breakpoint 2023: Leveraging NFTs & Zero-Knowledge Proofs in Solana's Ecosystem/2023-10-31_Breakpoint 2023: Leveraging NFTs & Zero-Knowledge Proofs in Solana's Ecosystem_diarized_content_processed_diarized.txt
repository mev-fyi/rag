00:00:01.280 - 00:00:22.262, Speaker A: Hello everyone. Thank you so much. Nice to see you guys. So I will be talking only two points. One is related to software. First of all, let's talk about who I am and what we do. My name is Shakeel and we are software developer as well as investor.
00:00:22.262 - 00:00:55.004, Speaker A: We are in crypto space since August 2017 and it's our first time we are coming into Solana ecosystem. So we are looking for early stage projects for investment. So if you have idea, if you are making up team. So please connect with me. I and our business development head in Europe, Mister Jawad Ahmed is with me. So he is permanently staying in Netherlands. So it is a good chance to meet you guys.
00:00:55.004 - 00:02:04.744, Speaker A: So we are over 100 researchers and developers and as I said, we invest mainly in web3, but we also invested in AI area, especially cancer pathology. So one bigger question. I am in software industries over 20 years, so why software fails over budget are canceled? Why software is not a new industry. We are developing software over several decades and still we have these kind of challenges. We are learning these things like software fails, software over budget are the projects cancel. So what is the reason? What is the key points that we are still missing around this industry? So I am taking some data from the report from Skandish Institute. So they conducted this research over 25 years in us software market.
00:02:04.744 - 00:02:46.844, Speaker A: The data is coming from specifically from us market. So they say in average small, medium and big projects, out of them 16% projects fail over budget or cancel. Sorry, only 16% got complete. They don't go in these three stages, cancel over budget or fail only 16%. That is the success rate. What does it mean? 83% fail. So it's a pretty big number that projects are still failing in software industry.
00:02:46.844 - 00:03:38.316, Speaker A: So and the big size project, they prone to fail more or go in these stages over budget are cancelled. So what is the reason why these projects fail? So let's see our software development life cycle. Usually we all are familiar with this. We have software requirement specification where we do visualize what our software will look like and then we have our architectures, our project management and we do development and then we have a testing. So this is pretty common. We are learning this whole software requirement or SDLC software development lifecycle for over many decades. I am learning this thing from or seeing this thing since two decades.
00:03:38.316 - 00:04:36.618, Speaker A: So what is the challenge? Do we have problem in SRS? Do we have a problem in project management? Do we have a problem in our codes? Still we have a new framework and do we have a problem in testing? So we found out this research and as well as our own experience tell us, usually projects fail in SRS, we have a wrong requirement and still we are not visualizing what we want to build. Same for the big projects and for the small sized projects. And we are getting a lot of rework. And rework is a burden on any software teams. You develop something, then you have to do rework. Same thing, you have to do it again. And this is 84 or 83% LvC.
00:04:36.618 - 00:05:41.226, Speaker A: And from this research and our own experience, we found usually srs or the wrongs, you didn't visualize your product or software requirements very well. So usually startups, what they want to do is they just want to have application because they are looking for funding. The software main motive is not developing good product or solving some problem. Their main focus is mainly on getting investment and they want to ship their product as early as possible and they skip so many parts of the process. So that's why we went into these stages for the startups. So this rework, if we see usually rework is efforts are because of first is srs and the second stage is we don't do any testing. For example, if I just take the big two tech giant, Facebook and Google.
00:05:41.226 - 00:06:13.094, Speaker A: So Facebook was not doing enough unit testing. Can you believe it? That's why if you see the early application of Facebook, they are buggy. They have so many bugs, they even don't write unit testing. And if we see the Google products, they were writing unit test and their products are more stable. So that is a challenge. As I said, one is srs. There are so many other things in srs that we can see the wrong idea.
00:06:13.094 - 00:06:45.564, Speaker A: Not writing any paper about the requirement. When we develop, when people come to us, our early stage projects are coming toward us. We want to develop this thing. They have just one slide, they have a requirement and sign up, sign in. There are so many things on sign up and sign in. We don't care about those, so many parameters, consideration, security goals, our security features. We just want, okay, we want signup.
00:06:45.564 - 00:07:30.114, Speaker A: Pretty standard signup. What is a pretty standard signup? There is nothing, anything that is called standardized signup. So you have to write it down, what you want to do and what it will affect to any other part of your software. So these are few of the things that give us a challenge. When we have a software project, so many people will say, oh, software usually have a project because of the software methodologies, project management methodology we choose. We are lean, we do lean software development, we don't do pairing. For example, somebody is writing code and one person is writing unit test.
00:07:30.114 - 00:08:16.310, Speaker A: Usually when you, I believe you guys know when we are doing software development, most of the time developers are just writing features. They don't write unit test. And for writing unit test you have to do extra effort. It is almost like if your coverage is 90% so it means 90% extra work you have to do and your software developments become expensive. So the software methodology does not have anything to do with the software failures, not major part in software failure, over budgeting or cancel. This is okay. There is slight changes for the bigger projects.
00:08:16.310 - 00:09:09.724, Speaker A: When you have, for example waterfall, our agile methodology are you are doing lean software development, not paying two developers for writing code. And for the test unit test there is a slight number change. In agile you have a 42%. These are for the bigger projects, not for the small size projects, 42% better result. But anyway, so the main crux is SRS. We have to pay more attention whenever we have a development work, software development work. We shouldn't rush to develop until we have write all our documents and we visualize and we consider all the challenges that are lying ahead for any component.
00:09:09.724 - 00:10:17.554, Speaker A: The second thing, zero knowledge. So in zero knowledge I just want to, I'm not going to talk much technical and I'm not that much technical, at least these days. So zero knowledge proves and zero knowledge has a lot of buzz in blockchain industry and it's real, it's not just hype. So zero knowledge are here to stay. They are coming very fast in many applications, in many parts and they're going to solve a lot of our challenges around the industry. So what are zero knowledge? As you know, you have some knowledge you don't want to reveal to third party, but you want to prove that this is truth. For example, I am a CEO of some company that I didn't mention which company you can meet me and you can find out and you want to verify whether I am a CEO of that company.
00:10:17.554 - 00:10:49.684, Speaker A: You can do it through zero knowledge proof, through some third party prover, trusted prover. And this is not new. Basically I am coming from South Korea. I am living in South Korea for many, many years. I did Masters PhD from Korea Advanced Institute of Science and Technology and also running business from there. So in Korea we are using detail certificate. Many people are using details certificate in other part of the world.
00:10:49.684 - 00:11:47.034, Speaker A: But in Korea we are using like literally detailed certificate as our identity for more than two decades when there was Microsoft Explorer and we have so many plugins to download to run those detailed certificate. And still we have to download those plugins, because those are not technical problem. It doesn't become our technical problem, it's become our law related challenge, because we have written those plugin to download in law. So this is a classic example of zero knowledge. You have. There are Alice and Bob, or whatever the fancy name you can think. These are two people, they have two balls, football or any ball, and they want to share, like they have the same color of balls to each other without revealing actual ball to each other.
00:11:47.034 - 00:12:27.384, Speaker A: So what they are doing, they are doing toss head or tail. If the heads come, they share these balls. So this is how the zero knowledge proof works. There is more complex example you can give in a function. You have a secret and you have a key, and then you have a result, and that is your revealing result for the zero knowledge. So basically, there are many algorithms, and the zero knowledge proof algorithms doesn't just started in 2012 or 2013, are with the zcash. They're pretty old.
00:12:27.384 - 00:12:59.662, Speaker A: If we say zero knowledge interactive proof, they are coming since 1980. And if we see sigma protocols, they are coming since 1990s. It's like p two p networks. P two p networks. We got to know because of blockchain. But the basic research for next node discoverability started in late eighties. So similar zero knowledge proof are there for a very long time.
00:12:59.662 - 00:14:03.864, Speaker A: But now they are becoming more aware because of ZK snark. So until now, there are around 60 ZK snark variants. And there is a new work. These the new work mostly related to stockware ZK stark. So who gonna win this race of becoming a de facto standard for zero knowledge proof, because we don't care what is the polynomial, what are the gates, what are the lattice, how they are building this zero knowledge. We want to resolve this privacy related challenge using these algorithms, and we want to see who is a winner, whether snarks stocks, bulletproof sigma plancks or growth 16 or any. So if we see the result, I believe so snark, basically the size is very small, the calculation is very easy, and they're pretty fast to prove stocks.
00:14:03.864 - 00:15:00.062, Speaker A: They are complex in terms of competition. They have their own advantages, I believe, seeing all the data and the innovation, I believe these two will be competing each other. And we saw a similar thing and they might coexist. We saw this kind of trend in tech industry for a longer time. There are two ecosystem, they are competing each other, but they are staying together instead of one got as a winner because of some advantages and some disadvantages. So, yeah, so we need a lot of research for zero knowledge proof to move forward and that research can resolve these difficult computation. The computation, if we just heard anatoly speech in the morning, he's too much passionate.
00:15:00.062 - 00:16:14.912, Speaker A: I am hearing him since 2019, too much passionate for mobile phones are handheld devices for computation. Can these ZK snorts work on these devices? Right now we can see it is very much possible, but a lot of research can resolve our challenges to run on handheld devices are compute deficient devices. So few of ZK snark like gross 16 plonky variations. They are very popular these days. So how can we use on NFT or how can we take these zero knowledge proof that can be useful for us? So right now I am seeing so many component or module, for example, how our software developers are doing. Initially we have lot of difficulty to develop any zero knowledge algorithm or use some algorithm to implement in any software. For example for bridges, that was a challenge.
00:16:14.912 - 00:17:03.316, Speaker A: But right now what is happening we are just making as a module. We are hiding lot of complexity to new software developers only. For example, one experienced software developer, he's working on some module, he developed that algorithm and then he has written some hooks around that module and we just need to call and we have to use. So I believe zero knowledge proof will be very easy to use in coming days. You don't need to dive into the polynomial to understand. You need to know what does it do and how you can use it for NFT or for the gaming industry. For gaming industry, I believe it's required a lot of research.
00:17:03.316 - 00:17:55.894, Speaker A: For example, snarks the size from 288 bytes to if we can go to 30 bytes, that will be pretty amazing. And then we might be using in games. Still the times are good, as we saw in some table, those are in milliseconds. And if we can improve little more time and the computations, for example, in case of Zkstar, it's become more lesser, then we can use it more easily in software. So again, for summing up, but I said I talked about two points, very simple, not complex. As am not complex, very simple in simple city where I am smiling since I arrived, I don't know what is the fact. I am damn confident, I don't know what is the fact.
00:17:55.894 - 00:18:17.978, Speaker A: So two points. One is why software fails and how can we avoid it. The number one is software requirement. Software requirement, software requirement. Don't overlook software requirements. Do as much documentation as you can. That will be also helping you for your software maintainability for writing unit tests.
00:18:17.978 - 00:18:34.482, Speaker A: Don't skip your unit test. I know it's all overhead. Don't skip your unit test. And the second point is zero knowledge proof. It's not just buzzword, those are becoming more usable. You need to know where you have to use it. And they are coming for NFT.
00:18:34.482 - 00:19:14.194, Speaker A: In NFT, for example, you can hide. Right now, everybody knows whatever I own on Ethereum if they know my address. So if I do my transaction, for example here, buying one coffee, they might know what I am holding as a NFT as assets. So we can make private this kind of information. For example, you are playing game. In game you can have some surprise feature or surprise weapon that you can use. Your opponent doesn't know because of this zero knowledge proof.
00:19:14.194 - 00:19:51.568, Speaker A: So there will be many many applications and I believe developers are paying attention. And software developer house like us, our investment teams, they are pretty much investing in this ecosystem. So I will end my talk here. Talking two points why software fails and zero knowledge proof will be used in NFT. So if you have early stage investor, it's our first time in Solana ecosystem. Meet me and Mister Jawad Ahmed. He's here.
00:19:51.568 - 00:20:01.974, Speaker A: He's ahead of Europe in Netherlands. We are here for two, three days. Please come talk to us. We might end up working together. So thank you so much.
