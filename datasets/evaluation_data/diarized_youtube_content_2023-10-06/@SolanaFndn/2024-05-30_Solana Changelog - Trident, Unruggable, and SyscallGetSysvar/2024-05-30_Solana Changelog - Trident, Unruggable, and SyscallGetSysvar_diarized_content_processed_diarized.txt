00:00:03.760 - 00:00:11.886, Speaker A: Hello everyone. GMGM welcome to another episode of the Solana Changelog. I'm Nick from the Solana Foundation Devrel team, and today I've got Jonas with me. How you doing, Jonas?
00:00:12.070 - 00:00:25.054, Speaker B: Jmnk. Yeah, super happy to be here. I'm actually currently at Mountain Dhow in Greece, on Crete, on island. Island. Oh, of course. We are on an island here. It's sunny, it's beautiful.
00:00:25.054 - 00:00:38.412, Speaker B: There's tons of builders here, a bunch of gurus and. Yeah, it's really nice if anyone still wants to come. Yeah, gurus. So nice. It's gonna be here the whole month. Also gonna be here. We're gonna record some videos if you want to shoot.
00:00:38.412 - 00:00:48.596, Speaker B: What are you building video, for example, you can come over. Also, the Berlin blockchain week is at the moment, and they had a 24 hours hackathon yesterday, which looked amazing.
00:00:48.700 - 00:00:49.332, Speaker A: Oh, nice.
00:00:49.428 - 00:00:54.904, Speaker B: They even had tents at the hackathon. So some people slept in tents during the hackathon.
00:00:55.404 - 00:01:07.980, Speaker A: Classic devs. That's really cool. I didn't know there was a hackathon going on. I hope I get the chance to see some of the projects that come out of it. But yeah, let's get to the changelog. What commits did you see this week, Jonas?
00:01:08.172 - 00:01:46.926, Speaker B: Yes, there's some new ZK stuff coming to Solana, actually, which I think is super exciting. You might know that we have these confidential transfers in the new token extension program, and it's using ZK and there's more functionality coming. There's for example, these algorithm hashes here that you can now use to, for example, validate that a pub key is actually valid, and also that the owner has the private key for it. And you can also validate that two messages were signed by the same key. And yeah, this is using this algorithm encryption, which is similar to RSA. And now you can use it on Solana, I guess. Soon.
00:01:46.990 - 00:02:00.832, Speaker A: That's cool. Soon. Tm. Yeah, all those DK stuff. Sam Kim is awesome cryptographer extraordinaire and. Yeah, and then some of the other stuff that's going on in the commits. And the changelog is officially borscht 0.9
00:02:00.832 - 00:02:10.792, Speaker A: has been deprecated. It's been deprecated for a while, but it's actually been finally removed. So it's a breaking change. Just so everyone knows. 0.1 or. Sorry.
00:02:10.792 - 00:02:16.632, Speaker A: Yeah, 0.10 is now the current version. Breaking change, everyone. You're now informed?
00:02:16.808 - 00:02:24.734, Speaker B: Yeah. If you see any problems with it, let us know. Hopefully there's no more problems. But I remember last time Borg was touched was really bad, so.
00:02:24.854 - 00:02:54.028, Speaker A: And then there's anchor. The anchor CI was actually updated. So for those of you who don't know, there's actually a CI job within the agave repo that actually checks to make sure that anchor will still work since anchor is so widely used. But now with anchor 0.30 having been out for a while, John Cinque, the man, the extraordinaire, has updated the CI to actually include anchor 0.30. And actually, I think this is a really great way to do it. So the CI is actually checking for 0.29
00:02:54.028 - 00:03:05.796, Speaker A: and 0.30, which is important to note because there are so many changes with 0.30, not everyone's updated to it. So it's actually going to check both of those versions, which I think is really nice.
00:03:05.980 - 00:03:32.754, Speaker B: Yeah, it's really nice to see, especially that there was a little changes to be made here. Like only SPL part needed to update it. So really good that we have these checks. Yeah. And then we have a new syscall. Like sysvars are changing a little bit. So as you know, there's like sysvas which you can, for example, use in your transaction to check other instructions in a transaction, for example, you want to make sure that there's no other instruction in your transaction than the one that you added.
00:03:32.754 - 00:03:56.380, Speaker B: For example, you can use the Sysva, and now they're improving on this. So it will be way easier, for example, to read like big amounts of data from other accounts. Like, for example, I hit the staking stake accounts here or something. So you will directly be able to read some data from the buffer instead of loading the whole accounts, for example, the whole interface will, I think, become easier, right?
00:03:56.572 - 00:04:13.252, Speaker A: Yeah, I think so. And it's going to be so much easier that actually eventually all the sysfar syscalls. Sounds kind of silly to say. The Sysfar syscalls are actually going to more than likely be deprecated at some point since this becomes like a generic syscall to access Sysfar data.
00:04:13.428 - 00:04:16.864, Speaker B: Yeah, definitely. Very interesting. Good that it's becoming better.
00:04:17.204 - 00:04:23.084, Speaker A: Yeah. And this was all from SIMD 127 if you want to read it and check out some of the details for the more context.
00:04:23.124 - 00:04:24.290, Speaker B: Much more context.
00:04:24.412 - 00:05:05.268, Speaker A: Yeah. With just like Hannah here says, and then some of the other commits actually are two feature gates related to a specific SIMD. So there's the core BPF process, the core BPF initiative is ever ongoing, and there's actually the first two of those programs that were initially enshrined programs, they were in the protocol themselves. They're being converted to BPF. That's the whole initiative there. But the first two of these programs officially have a feature gate to eventually go live on all the clusters. So starting with the config program, which we've talked about a couple of times here on the Changelog recently, and then also the actual feature gate program that will help facilitate all of these upgrades and everything.
00:05:05.268 - 00:05:47.904, Speaker A: And then contributing to this is actually, all of this is from SIMD 89, which is the process of, as Joe says, programify feature gate. And there's actually an amendment that's been proposed to that SImD that's been accepted for a while now, and it's specifically to make it so upgrading the process to upgrade these core BPF programs. Initially, we can even look at the git diff here. Initially, this was actually a multisig with specific key holders at different organizations, but the proposed change is actually to make it so. It's a feature gate within the featuregate program to actually upgrade the core BPF programs, which I personally think makes way more sense.
00:05:48.244 - 00:06:14.546, Speaker B: Yeah, totally. I also think that's better. And maybe for people who don't know why this is even happening, they're rewriting all the core programs, or most of them, to BPF programs. And this is mainly so that fire dancer doesn't need to re implement everything because they can just use the same compiled programs. And now there's like, of course now there needs to be a process how to do this. So that's why I now doing these changes. Like now there will always be a feature gate and to upgrade these.
00:06:14.546 - 00:06:21.514, Speaker B: And probably the validators also vote on it, if I understood it correctly. So, yeah, the process is more maturing now.
00:06:21.674 - 00:06:59.650, Speaker A: Yeah, absolutely. And speaking of things, that firedancer won't have to implement rent collection. So SIMD 84 was officially approved and merged into the SIMD repo and SIMd 84, for those of you who don't know, is to actually disable rent collection. So rent collection has been effectively deprecated, kind of within the runtime itself for quite a while. Every single account has required to be rent exempt, putting two years worth, depositing two years worth of rent into an account when you create it. That's been a requirement for a while now. And as of 6810 months ago, something like that.
00:06:59.650 - 00:07:29.324, Speaker A: Every single account that exists on chain is rent exemption, which means the rent collection, the periodic rent collection code, never gets used. So finally, this SIMD has been approved. And what this is going to allow, the core protocol engineers to do is basically to remove all of that section of the code, do a big refactor, simplify the code base a lot, and most importantly, I think make it so the firedancer team doesn't even have to write that code to begin with, speeding up the fire dancer process. The firedancer development.
00:07:29.814 - 00:07:41.790, Speaker B: Yeah, that's super nice. The program will probably still be there, like how I read it here, because some people are using the code. So the name may also stick around. But actually now it's like more like a minimum balance than a rent.
00:07:41.902 - 00:07:55.434, Speaker A: Yeah. So yeah, hopefully using this, hopefully we'll start renaming rent to something more, more informative, I'll say. All right, let's dive into resources for the week. Were any cool resources that you saw this week?
00:07:55.824 - 00:08:29.682, Speaker B: Yes. So there's a new open source program from Akiblok chain, which is an open source fuzzer. And if you don't know what a fuzzer is like, a fuzzer is basically something that you can use to test your programs. And what it does, it just throws a bunch of random stuff at your program, basically just all kinds of random bytes and so on, and sees if there's problems, if you get overflows or any data problems. And this is open source, so you can just try it out. And I think this is super exciting, will help with all kind of security stuff. Probably always good to just run this, just try it out.
00:08:29.682 - 00:08:31.874, Speaker B: In addition to audits, of course.
00:08:32.034 - 00:08:38.174, Speaker A: Yeah, in addition to. And then did you see this, this issue that was opened by Wilfred from Triton?
00:08:38.594 - 00:08:45.774, Speaker B: Yeah, I saw connections and websockets. Yeah, I saw Brian do a tweet about it. And what is it about?
00:08:46.234 - 00:09:27.774, Speaker A: Yeah, so basically this is even says it right here. This has been an issue for about two years. It's been like basically you would run out of connections when you would try to do WebSocket connections. And because of how node js and some of the JavaScript runtimes, this is all within web3 js, how some of those runtimes would handle connections. Turns out they would basically go to a really high connection count when you really only need one. So Wilford's basically proposed of setting the default connection size, the pool size, to just one, and then just solve so many problems, apparently, which I think is just an amazingly simple thing that took everyone about two years to figure out.
00:09:27.934 - 00:09:40.914, Speaker B: Where has this line been in the last two years? Yeah, I heard this complaints a lot in the beginning, and I couldn't really know why because in unity, the implementation is different. So there it was always working.
00:09:41.534 - 00:09:50.374, Speaker A: Yeah, this is specific with the JavaScript runtimes. And node j's specifically goes to max connections, which is interesting.
00:09:51.114 - 00:10:03.690, Speaker B: Yeah, it's nice. It's super nice to figure out now where this problem came from, because it was hard to reproduce as well. As you see, it was only happening when the connection limit was reached. So that's super nice.
00:10:03.842 - 00:10:36.884, Speaker A: Yeah. And then this other resource that I saw someone created, basically an open source CLi wallet, which is incredibly cool. It's under the GPL three license and the docs guide here, the readme in this repo is actually pretty detailed of how to set it up, which is amazing. And there's a couple of animated pictures, some gifs in here that show it actually being used. And it's basically like a full CLI wallet. You see a QR code here. That's so cool.
00:10:36.884 - 00:10:49.084, Speaker A: This thing is really cool. And if people want more wallets, this one's open source. If you're a hardcore dev and you want to run a CLI wallet or tinker around, give it a look. Take it a look at it. Actually.
00:10:49.124 - 00:10:59.064, Speaker B: It always helps, even with development. Just look at your wallet that is saved somewhere in your local file and see what's actually going on in there. So I think this is super helpful.
00:10:59.764 - 00:11:04.780, Speaker A: That's a good point. This would be a great addition to the local dev setup of having a better.
00:11:04.812 - 00:11:06.264, Speaker B: I wonder how many tokens are.
00:11:07.204 - 00:11:15.344, Speaker A: Oh, there's a lot of Devnet especially. And then you want to give the stack exchange shoutouts for this week, Jonas.
00:11:15.684 - 00:11:36.680, Speaker B: Yeah. So everyone is active on stack exchange. Really nice to see we have Jimmy here, we have Sid, biz Akhtar, and Christian is there Calum, of course. So yeah, it's super good. Like, I heard from many people that they're actually getting their answers faster now and better answers. So. So great.
00:11:36.832 - 00:11:50.656, Speaker A: Yeah, absolutely. Someone said that they, uh. Yeah, collect the points, get your reputation up, boost up the stack exchange. There was, there was some questions that got two valid answers within about five minutes or so of it being initially posted, which is. Is incredible.
00:11:50.840 - 00:11:52.288, Speaker B: That's how it should be. Yeah.
00:11:52.376 - 00:12:01.342, Speaker A: Yeah, it is. Well, that about wraps it up for this week's changelogs. A little bit on the longer side, but, uh, jam packed with information and tons of personality. We'll catch you in the next one.
00:12:01.518 - 00:12:02.526, Speaker B: See you next week. Bye.
