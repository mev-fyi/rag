00:00:00.440 - 00:00:26.224, Speaker A: Hello everybody. I found a cool new tool online. It's an open source tool which is called Sessionkeys, and it can be used to improve the UX of your applications. So I mean, I really didn't find it. Like someone on Twitter told me, hey, you're making games. Why are you using session keys to improve the UX so that you don't need to sign all the time. So what I did, I tried, I built a little game around it to show you how it works.
00:00:26.224 - 00:01:04.552, Speaker A: So this game is called Lumberjack, and it has an energy which refills over time, and it has a wood counter. So what I can do now is I can chop a tree with my phantom wallet. I approve the transaction, my energy decreases by one and my wood increases by one. But the UX around it is like a bit inconvenient, right? Every time the wallet pops up and I need to click it. And so here's where session keys come in so I can create a session. What this does, it creates an FML key pair in the browser and it transfers 0.01 sol into it so that it can pay for gas fees.
00:01:04.552 - 00:01:42.752, Speaker A: And it also creates a PDA which saves us our authority. And this session can then be used to perform certain actions in our program. So what I can do now is I can just chop trees using the session token so I don't need to sign with my phantom wallet anymore. So this is of course very convenient. You can see the last ones here are failing because I'm out of energy. And now afterwards, like I'm done with my game session, then I can revoke the session and I get the soul back. And now I can still continue signing with my normal wallet, which now fail because I don't have energy.
00:01:42.752 - 00:02:08.616, Speaker A: So now I'm going to show you how this, how the code works. And then afterwards we're going to talk about security because the key is saved in the browser. You may already see some problems with that. So let's start in the program. The first thing we do here is in the init player function. We save the authority of this game data account and we set it to the signer. So this would in this case be my phantom wallet.
00:02:08.616 - 00:02:55.086, Speaker A: And then down here we can see if I call the choptree instruction. We have this session macro here, which has an option called session token. So I can either provide a session token, then I use the session token to sign, or I use my normal keyword phantom wallet. And then yeah, there would be an additional check which checks this one. The check is happening directly above the instruction. So if I go here to the shop tree instruction, I have this nice other macro here, it's called session out. Or, and when I provide a session token then it checks if the PDA that is affiliated to this session has the authority, which is the signer, in this case our session wallet in the browser.
00:02:55.086 - 00:03:29.204, Speaker A: And if I don't provide a session token, then it just takes the player authority and looks if that is a signer. So that's what then be by phantom Wallet. And yeah, like this, I can just use the local key pair in the browser to sign for this for a certain amount of time. This is very convenient, especially for games or some social media application where you like scroll something and you want to like or so so you can just start a session and then end again. And they also built a client for it in react. And here you can see I can very conveniently create a session. I can have different parameters like the expiry time.
00:03:29.204 - 00:04:10.084, Speaker A: Like if this time runs out then the transactions would fail if I use a session token and I can also say top up or not. And yeah, if I say top up then a little bit of Sol is transferred into this thermal key pair. So 0.01 solution here you can already see this might be a problem because the browser isn't a safe place, right? There could be cross site scripting attacks, there could be a malicious extension on the player's browser. So you cannot be 100% sure that no one gets a hold of this key or injects some code to do something with it. But you can always revoke these sessions. So everyone can just revoke the session and then the players couldn't do anything with it anymore.
00:04:10.084 - 00:04:44.436, Speaker A: And it's kind of similar to how web two tokens work actually. I will show you later the documentation that gum wrote about this. And you can also not top up the wallet, then there wouldn't be any soul in the wallet. And you could use some gasless solution, like for example having an octane relay, which somehow pays for it also. But for the game, I think for me the UX is really nice, as you can see. See like you can start a session, then you can play a bit, and afterwards you close the session again. And then here you have different options.
00:04:44.436 - 00:05:43.124, Speaker A: Like for example, if I don't set a session key, then I would just set the sign up to my phantom wallet. Could be any other wallet of course, soulflayer backpack or whatever. And if I provide the session token, then I would just put in the session token here. That we got from create session, and then I would put as a signer the session wallet and the session wallet you can just get via a hook the same as any other wallet using the wallet adapter. And yeah, if you want to read a bit more about the security behind it, the documentation of gam is quite nice here. They explain everything, how the user creates the PDA, and then it's validated in the program, how they securely save, how they encrypt the key that they save in the index DB, and some explanations. So it's not audited yet, but I think the team will improve on it, and I think it's a very nice thing to have open source.
00:05:43.124 - 00:05:52.776, Speaker A: Everyone can try it out. I put the links to this example project and to the gam documentation in the comments. And yeah, thank you for listening, and see you next time. Bye.
