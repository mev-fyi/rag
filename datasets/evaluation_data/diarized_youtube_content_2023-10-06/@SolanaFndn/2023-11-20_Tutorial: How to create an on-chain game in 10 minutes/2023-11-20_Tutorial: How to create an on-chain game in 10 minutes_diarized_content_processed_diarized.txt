00:00:00.240 - 00:00:47.104, Speaker A: Hello everybody, let's try to build an on chain game on Solana in just ten minutes. So we gonna start by writing NPX create Solana game, and I'm gonna call mine Lumberjack. And what this will do is it creates us an anchor program, a JavaScript client and a unity's client, and it replaces all the names already with the name that you provide here. So it creates us this folder here, and we have the JavaScript client in the app folder, we have the anchor program in the program folder, and we have the unity client in the unity folder. It also comes with a readme which explains you everything in detail. If you want to follow along. Let's do this.
00:00:47.104 - 00:01:27.502, Speaker A: It comes with a quick start. Let's switch over to Unity. We can just start our game scene here and immediately try the game out. So here on the bottom left we have the editor login button. So I can log into the editor which just creates a key pair within the editor and requests an airdrop. And if you use the Defnet login it will use the wallet adapter and like the browser extension in the browser or on mobile, it will open the browser via deep links, the wallet. So here you can see already I can chop this tree here, and the transactions are very fast as you can see, as you are used to from Solana.
00:01:27.502 - 00:02:38.354, Speaker A: And you can also here on the top left you can look at your nfts and you can mint yourself a dummy nft like one of these little chips here you can select it and yeah, so this is the unit here on the top left, on the top right you have your soil balance, you have a token balance, in this case USDC, you have the current lock, that wood that you collected, and there's also an energy meter which refills over time. And the nice thing is, the same thing also works from JavaScript. So now I open the project in visual studio and I will now run the JavaScript client. So I just did yarn install and now I'm going to do yarn Dev and this will start the JavaScript client. So now I start the JavaScript client up and put it here to the side and then I will show you the nice composability that you have when you build an on chain game on Solana. Since both of these clients like the JavaScript and the unity client are subscribed to the same tree account. Basically you will see that when I chop a tree in the JavaScript client, that I will also be able to see this in the unity client.
00:02:38.354 - 00:03:21.834, Speaker A: And yeah, as soon as this is loading. I'm going to show you that and then we're going to deploy the program so that we are actually interacting with our own program. And then we will also add one more function to the program so that you can see that we are not cheating, that you can actually very easily expand, expand on this program. Okay, so now we can log in with our wallet into the JavaScript client. And here you can see now that I can start chopping a tree with my main wallet. This will pop up the usual browser extension, I can approve this and I chop a tree. And here you already saw that I also chopped a tree in the other game because they are both listening to the same account.
00:03:21.834 - 00:04:14.250, Speaker A: But you saw Nuji do the transactions very quickly, right? Without approving them. So you can also do this in JavaScript by creating one of these sets sessions. This feature is called session keys and it's maintained by magic block. And now you can see that I can also chop trees with this session. So the key pair is saved in the browser and it's like funded with a little bit of sol. And now you can see that I can very quickly chop these trees and I can also chop a tree here on this side and we can see that it updates also in JavaScript client. So yeah, this is a setup for the game, but now let's go, go and deploy our own program because yeah, that's the most interesting part, right? So we go here into the program directory and then we type anchor build and anchor deploy what this will do.
00:04:14.250 - 00:04:36.402, Speaker A: It deploys our program and it builds the program. So this takes a while. So in the meantime let me show you through the program. So the program entry point from anchor programs is always in the LibRs. And here you can see we have two functions. We have the init player which creates the player account and also the tree account. And then we have the choptree function here.
00:04:36.402 - 00:05:12.484, Speaker A: And the choptree function calls the instruction shop tree with amount, one for one tree. And now we go here into the choptree instruction. You can see all the instructions are in the module instructions, and then we have a state where the other functions are. I going to show you later. So in the chop tree function we can see that first of all we update the energy of the player so it refreshes over time. So we just calculate how much time passed, and then we grant the player his energy back. And if he doesn't have enough energy for the amount of tree he wants to chop, we just throw an error, not enough energy.
00:05:12.484 - 00:05:54.834, Speaker A: Then we add an id to our account so that in the client we can easily see which of the transactions at which counter we currently are. Then we call the chop tree on the player. And the player is a state. So we go here into the state and here we can see that here we have the chop tree function. So we put in an amount and we just add it to the wood which is saved in the player and we subtract one amount of energy in the same player. And the player account looks like this, it says an authority that's used for the session keys. Then we have a name level xp.
00:05:54.834 - 00:06:42.206, Speaker A: And what we currently use is like wood and energy. And the last login time is used to recalculate how much time passed so that he can refill his energy. Yeah, and as soon as the energy is subtracted and the wood is added, we on the game data call ontreat chopped. So in the game data on tree chopped we have another counter. This is like this tree currently has 100,000 wood and every client also when you deploy your client now you will chop the tree from the same, they chop wood from the same tree actually. So we subtract this and then we log it out. And yeah, the nice thing is in the meantime our program was deployed and this is our program id here and the program id now we need to paste into a few places.
00:06:42.206 - 00:07:20.724, Speaker A: So first of all we need to put it into the program so that the program knows its declared id. Then if we want to use JavaScript we put it into the anchor utils here. So we just paste it here under program id. And for the unity client we put it in assets, game scripts, Solana and then put it into the anchor service. So, and the nice thing is now already both our clients are listening to our new program. So let's first look how this looks like in unity. We need to actually build and deploy the program again so that it knows its program iD.
00:07:20.724 - 00:08:04.828, Speaker A: This will just take a few seconds, so I can already start up the game and now we can do here log into the editor. And now it asks us if we want to init an account because this is a new program, so we don't have an account yet. And for some reason this failed now. So the declared pro algorithm ID was mismatched. So we need to actually wait until this is deployed here. So now we can initialize this account, now we have an account and we can see there's 100,000 wood in this tree. And now we can chop this again from here and we can also of course it from our JavaScript client.
00:08:04.828 - 00:08:43.824, Speaker A: So this is now our own program that we just deployed to Solana, and now you can improve on it. So now you can do all kinds of things. Like you could for example, now build a city builder in the Solana program examples you can see there is a multiplayer city builder where multiple people build something together. Or you could also let's see if this actually works. So you can revoke the session. And yeah, you can see we have like 999,985 wood in here. So let's, let's say we want to expand on this.
00:08:43.824 - 00:09:30.628, Speaker A: So let's add one more function. So we go here into our program and now we add just one more function, let's call it the super shop. So, and the super job will actually chop a tree, but it will five, chop five trees at once. So we build and deploy this again, and as soon as it's deployed, what this will do. Every program is, has actually an IDL, and an IDL is just a JSON representation of your program. And you can create or generate different clients from this IDL. So you can for example generate a Java JavaScript IdL or C sharp Idl.
00:09:30.628 - 00:10:18.014, Speaker A: And first of all we're going to use the one from JavaScript. So I just go here to the types and I copy the new types and I paste them here into the client. So here in the JavaScript client under IDL we can see here are the types. So we paste this in and now we can only use them. So if we go now to the chop tree function here, for example, instead of chop tree, I can now call super chop tree and that's already it. So now we are calling a new function from our JavaScript client and yeah, let's do the same thing now in the c hash client. So for that it's a tiny bit more complicated because you need to actually call this function here.
00:10:18.014 - 00:11:05.504, Speaker A: First you need to install this tool, it's called Solana unity anchor tool. And then you can just run this script here and it will generate you a new c hash client as well. All from this JavaScript JSon representation. This one you will find under target IDL. So I'm going to copy this, I go to my writer program project for unity, then I'm going to find this file, I'm going to replace the contents, and then in unity we can also already use this. So, and to use it, what we want to do is we will create a new button here. So let me duplicate this button and we move it a little bit to the right, and then we call this super chop tree.
00:11:05.504 - 00:11:38.204, Speaker A: And this should have been loaded by now. So we go here into the scripts into our lumberjack and we copy our new generated c hash client in here. And yeah, now here in our anchor service let's start actually in the game screen. Game screen. So here we add a new button. It's now our super chop tree session button. We duplicate the event listener as well.
00:11:38.204 - 00:12:13.936, Speaker A: Then we call this super Chuck Wood. And we duplicate the normal Chuck Wood button. We paste this in here and here. Now we call super Chop tree. Then we go here into our super choptree function, we duplicate this as well and we call it super Choptree. And now here instead of choptree and our newer generated program we can use super choptree. And for that we also need new accounts.
00:12:13.936 - 00:12:59.160, Speaker A: We need also the super chop tree accounts. So now we have the super chop tree accounts. And now from the game screen we are calling the super chop tree function. And now all we need to do is to assign the button to our new function here on our game screen. And now if we start this we should be able to actually get five words per click. So I start this editor login here, I think I need to quickly reload this and we can already check in JavaScript, it probably already works. So we had 85 before and now if I approve this, we have still 85.
00:12:59.160 - 00:13:41.324, Speaker A: And in here if you click the super chop tree button, you can see we are actually now always subtracting five at the same time. How cool is that? And if you want the same thing in JavaScript, I think we just forgot to save this. So let's reload our JavaScript client and then we should also be able to chop five trees here at once. And then we are already done. So I think we are a little bit over ten minutes, but I guess that is okay. So we create a new session and here we chop the tree. And we can see now we are actually chopping five trees at once.
00:13:41.324 - 00:15:02.848, Speaker A: Yeah, so this is really cool. Let's in the end let's look at one of these transactions on the blockchain so see if they are actually there. So this is our program here and we can see these are our account inputs and it's an unknown program and yeah, it here's the instruction data. This looks a little bit cryptic. So what we can also do now is we can type here anchor idl init and what this will do is that it creates, that takes our JSON representation and writes it on chain. So let me quickly find the path. So yeah, we gonna write anchor idl init target idl lumberjack json then we press enter and I think we were missing the I think this needs to be minus minus file path and yeah, so what happens now is it takes our JSON representation of the program and writes it on chain and then in the explorer we will be very easily be able to look at actually exactly what happens the program name, the function name, and also the instruction data.
00:15:02.848 - 00:15:32.898, Speaker A: So let's reload this and let's here now we can already see Lumberjack super chop tree with our new program id. So yeah, I think this should give you a good start on if you want to build an on chain game. So try it out. There's a bunch of other examples that you can use. There's the Solana 2048 game, there is the seven Seas game, there is this city builder game. You can all find them in the Solana game examples. And yeah, try it out.
00:15:32.898 - 00:15:38.906, Speaker A: And I can't wait for you to see what kind of games you're building. So see you guys next time. Bye.
