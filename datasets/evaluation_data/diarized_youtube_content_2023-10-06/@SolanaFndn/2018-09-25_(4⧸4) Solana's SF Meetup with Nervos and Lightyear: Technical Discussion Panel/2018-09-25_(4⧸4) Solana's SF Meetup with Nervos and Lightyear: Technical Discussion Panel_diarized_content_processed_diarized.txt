00:00:08.200 - 00:00:35.594, Speaker A: All right, so I think it's going to be pretty casual, right, where we could open it up to Q and a first, if you guys want, because I know some people had questions about the individual things. We'll maybe do like one or two questions there, and then we'll go into more of like a discussion, just in case there's like a burning question. Does anyone have any questions for any of the three about their presentations? Yeah, go ahead.
00:00:35.674 - 00:00:46.534, Speaker B: I have a lot of questions. Maybe a good cross cutting one is like, how great you're thinking about data availability and like, specifically in your case, with a verizon node.
00:00:49.034 - 00:00:50.654, Speaker C: And making sure that data is available.
00:00:55.574 - 00:01:21.844, Speaker A: That's actually one of the questions too. But like, before we answer the questions, could I just gauge the room? Who here is a technical, or like a developer? Okay. Who is the complete opposite and completely not technical? Okay, cool. And then everyone else is something somewhere in between. So I think you can answer in a kind of technical way, and we'll.
00:01:23.744 - 00:02:04.114, Speaker D: So again, so, data availability. So I think the incentive to run a horizon node is that you want to make sure that when you need the data, it's there. And typically, if you're one of the partners and you're pushing a lot of data through the network, you want to make sure that your transactions are going through. You don't want to depend on someone else's node, because that's where the consensus comes into play. Because your horizon node has its own trust model of who it trusts. So if you have to fall back on someone else's node, you're not really getting the guarantees that you would get if it was your own node. So then it's kind of on you to run your own highly available node, as well as make sure it's always available.
00:02:08.694 - 00:02:37.414, Speaker C: For us. One gigabit would generate about four petabytes of data a year. So that's a lot of data. It's actually not that expensive. So 150K buys you a petabyte deployed, but it is a lot of data for individuals to store. Kind of like our industry right now is built upon decentralization and what that means that there's low barrier to entry for anyone to participate in the network. So this seemed like an opportunity to me.
00:02:37.414 - 00:03:18.754, Speaker C: And because of our particular implementation, we have this decentralized source of time before consensus. We can actually have a very cheap to verify proof of replication. And that allows us to stripe this enormous data set amongst any number of nodes that want to just simply contribute storage without like, even high availability. But some kind of medium availability. So to me this seems like in my mind, if we're successful, imagine anyone in this space is successful and 100 years from now there's a blockchain that's around. This isn't a data set of all economic activity for the past 100 years. That is probably the most valuable thing we're building right now.
00:03:18.754 - 00:03:21.534, Speaker C: So I'm really excited about that part.
00:03:24.834 - 00:04:00.814, Speaker E: Just to make sure I answer the right question. When you say data availability, what do you mean? Like Fisherman's dilemma, right? Fisherman's dilemma. You talk about that? Yeah. Yeah, basically. Okay. Okay. So there are two parts of the question for interim of normals, right? So first is the consensus of the root chain, and then we use POW.
00:04:00.814 - 00:04:56.942, Speaker E: So the POW consensus basically encourages data to miners to make data available because you want to propagate your block as fast as possible so that other people can build on top of your blocks. If you withhold the data, then you're not going to be the longest chain. So that's the sort of building mechanism on the consensus level to encourage data availability. So that's one. I mean, you can, you can withhold the data, but then you're just gonna fall behind, right? So you're not gonna be the longest chain. So that's in terms of consensus on the root chain in terms of, for us, like layer one, L2, interop interaction. So data availability comes down to, you know, what if the L2 operator, for example, wouldn't hold the data, and then how do you prove fault? Right? So that's, you know, that's not a, not an easy question.
00:04:56.942 - 00:05:42.910, Speaker E: I mean, there is, ethereum is, for example, doing erasure encoding to be able to, you know, recover that data. But even then, I think a lot of time there's no way to prove fault. You can't challenge the operator, basically, right? They can always review the data and then, you know, prove that you're wrong. So it's basically, you can't win. So in that case, there are two solutions. One is to do something like a mass exit to the main chain, like what plasma does. And then the other approach is to have, if you have sort of, we talk about like just side chains, right, not state channels, but if you talk about side chains that are built like in the same form, then we can probably do something smart that migrate data from one side into the other without having to all exit into the main chain.
00:05:42.910 - 00:05:45.434, Speaker E: So that's something also researching on.
00:05:45.854 - 00:06:12.474, Speaker C: Yeah, so just, just to be a little contrarian in proof of work systems, the miners have no incentive to keep the data set. Actually, most of them throw it away, like so you can hash the blocks without actually storing any proof of work because you don't care. All you care about is getting the block. So in Ethereum, it's actually starting to become a problem because the data set is growing quite a bit and bitcoin is still pretty small.
00:06:13.174 - 00:06:22.026, Speaker E: Yeah, I think what I'm talking about is when you do like win the lottery, right, in powder, then you want to propagate that block as fast as.
00:06:22.050 - 00:06:30.786, Speaker C: Possible, but you can throw away the rest of it so you don't have to store the rest of the chain. Right. There's not aligned incentives there.
00:06:30.970 - 00:06:40.122, Speaker E: I think you were talking about verifiers, right? So it's not the miner define the block, but the full nodes that receive the validation then, I mean, you can.
00:06:40.258 - 00:06:43.698, Speaker C: But if no one's storing the full chain, then is it a blockchain?
00:06:43.866 - 00:07:02.314, Speaker E: Well, I mean, that's what we're doing. That's where we have to give incentive for people to store. Right? So this is exactly like for knowledge based platforms. We have direct token economics designed for, encouraged for preserving knowledge.
00:07:03.534 - 00:07:04.990, Speaker A: Maybe could you go a little bit.
00:07:05.022 - 00:08:15.666, Speaker E: Deeper into the general token economic incentives? Okay, so in nervos, for example, you know, if you look at the competition platform like Ethereum, the tokens are used to pay for computation cost or unit of computation cost. So for Norvos, the tokens are used to bond with the storage units and then to measure the space that you use to store, to store data. So in other words, if you're a user of the network and you want to store your data in the decentralized network, in the public blockchain, you have to pay by locking your tokens. And then again, if you're a miner that you do store this data, then you can get this from block reward to be able to store this data. And we want to battle the problem of people like Ethereum. People pay once for transactions and have their data stored forever in a very, very valuable, could be there for 100 years, but it's all free. You pay one time cost.
00:08:15.666 - 00:08:45.207, Speaker E: So what we're trying to do is to say from the user side, you have to pay an ongoing cost. And that's encouraging people to actually not to keep occupying this blockchain. So they can always release their token from the storage and then to get liquidity of their token, they can resell it. So to protect the full nodes and cost of training, would you guys also.
00:08:45.255 - 00:08:56.923, Speaker A: Mind just going very broadly into the token economic structure of your projects and kind of how it relates to maybe like incentivizing behavior that you want to drive towards a certain result.
00:08:58.663 - 00:09:23.814, Speaker D: So in terms of the stellar network, I think the lumen is mostly used just as a reserve when you open up an account. So this prevents people from just opening up accounts and sort of slowing down the network. And it's also used as a fees to prevent people from spamming the network. So I think it's really just to promote good behavior on the network.
00:09:26.114 - 00:09:54.884, Speaker C: For us. It's really like an operating systems resource. If you ever like, I don't know, wrote like kernel code your processes and user space, they want resources from the kernel, you have to build them. So you allocate file descriptors and all this other stuff. But ultimately all that is a resource that accounts for hardware. So when a user submits a transaction, they're asking for storage in the network. When they want to do a computation, they're asking for cpu.
00:09:54.884 - 00:10:16.164, Speaker C: And those are effectively competitively priced, so market priced. And our job is to make this system have as much capacity as possible to reduce those costs. So this is, you know, in our sense, our goal is to drive the fees to be as low as possible by making the software as kind of as fast as possible.
00:10:17.144 - 00:10:43.066, Speaker A: Very cool. So I want to switch it up just a little bit. And instead of talking about this specific projects, maybe go from the perspective of a developer that may want to use your protocol or your platform or your product kind of generally, what differentiates you guys? And why would someone choose to use your product over competing products? Maybe we'll just go this way.
00:10:43.170 - 00:10:43.934, Speaker C: Okay.
00:10:45.474 - 00:11:33.754, Speaker E: You know, for nervous. So. Okay, so there are two, but in other words, the layered architecture. So we have the base layer focused on, it's a common knowledge base, so we can afford to focus not on computation costs. We don't need to provide the lowest competition as possible, and we want to provide security because that's as a common knowledge base, that's what the users demand to be able to securely preserve the knowledge. So at the base layer, we prioritize on security and decentralization, censorship, distance, those are all the values that a knowledge system would demand. And then the second layer is where really people build applications and there will be different types of layer, two solutions.
00:11:33.754 - 00:12:15.144, Speaker E: If it's a cooperative game, then it could be state channels. If it's more of a fast payment network, it could be specific build for that purpose if built for a specific industry, like for gaming. And maybe there is more fungible tokens if it is for financial industry. Maybe it's more about form modification, so there's as little bugs as possible. So all these L2 solutions can specialize, but they can rely on the base layer to produce the decentralization and security, so they can focus on their domain, the requirements of their domain.
00:12:16.284 - 00:12:26.144, Speaker A: Maybe you guys can also, in addition to why would someone choose yours over competitors, maybe go into some of the use cases also about what you can use it for.
00:12:29.244 - 00:13:22.308, Speaker D: So I think in terms of why someone would choose stellar, I did cover a lot of that in the presentation, but I will cover some of the highlights. I think that it's relatively easy to use. So a lot of people don't really know this part about stellar. That if you want to issue a token on the network, it's just a few lines of code and issuing, like comparing this to Ethereum. If you want to issue a token on Ethereum, you're really writing a full smart contract. That's a lot of code you need to write on Stella, a token is kind of just like a distributed counter. So if you just want to track how many people are involved in your project, or how many people, how much value has been transferred over the network, stellar is great for that because it's cheap as well as really easy to code, and you can't really have any bugs in that because it's mostly just data, I think in terms of getting started.
00:13:22.308 - 00:13:43.594, Speaker D: So we do have this project called the stellar build challenge that allows people to contribute to existing projects or start their own projects. And Stellar does fund these projects with Lumen grants to keep the project going. And a lot of people join the community through this path. And we've actually hired a few people out of this as well.
00:13:46.414 - 00:14:41.658, Speaker C: So for us, I think the selling point is performance. In my view, we can actually build a platform that is competitive to a professional deployment on a centralized society. And because it's a decentralized platform, open to anyone, a developer can just jump on it and get all the benefits of very fast finality. So right now our alpha is under sub second, so around like somewhere between 407 hundred milliseconds for finality. And that is close enough to be an interactive on chain experience for humans such that they're not annoyed with how long things take. But for developers, I think we're in like maybe the most interesting, exciting part of the project. All these technologies are coming together and being integrated, and there's a lot of fun opportunities to learn about consensus and scaling and performance, and how to really fine tune and optimize things.
00:14:41.658 - 00:14:55.004, Speaker C: So in my mind, this is like the coolest time to jump in and see what you can do. So if you guys are interested in learning rust or building on really, really fast blockchain, jump on our GitHub.
00:14:56.464 - 00:15:12.872, Speaker A: Maybe following up on that. If someone really did want to just start using you guys today, for all three of you, what is available and what is kind of the first steps, how would I literally start using you using your protocols and products?
00:15:12.928 - 00:15:17.844, Speaker C: Download the rust toolchain, clone the GitHub and go. That's about it.
00:15:20.884 - 00:15:21.196, Speaker E: Yeah.
00:15:21.220 - 00:15:39.184, Speaker D: So I think the best way to get started, I would say, is just go to stellar.org laboratory where you can actually just create a test account with two clicks. And I think using that you can follow the path of creating accounts, doing transactions, and then maybe building apps and whatever your heart desires from there.
00:15:40.444 - 00:16:12.744, Speaker E: Yeah. So for us, we're still building the Nurbul CKB, so the base layer protocol, so that's not testnet ready yet. So people can't really build on top of that. But we do have a L2 solution we call nervous app chain that is ready. So you're welcome to again go to GitHub and try that out. There's EVM compatible sidechain solution, there's blockchain explorer, there's a wallet that you can play with it. Yeah, thanks.
00:16:13.084 - 00:16:38.544, Speaker A: So let's shift back towards the team building this project out. How exactly do you guys go and reach out to developers? Besides things like this? Is there a best practices in terms of ways to build a developer community or just to get people to look at your stuff because there's so much out there. How do you get mind share in the blockchain space towards developers?
00:16:40.164 - 00:16:41.264, Speaker E: You want to go first?
00:16:42.884 - 00:17:11.264, Speaker D: So we try to keep an active channel of communication with. We used to have a slack channel and now we're slowly shifting that over to Keybase. And this allows not just us to talk to the community, but also other community members to talk to each other. And that's how, for example, people form teams for the stellar build challenge as well as that's how we push protocol changes through the community by having those conversations first in the chat channels and then potentially moving them to GitHub into formal proposals.
00:17:14.564 - 00:17:57.834, Speaker C: For us, we've been open source from day one, so really trying to engage developers kind of from the start. And this is the hardest problem in the space, I feel, because we're building an operating system that's hard enough. We're also building a social network around it, which is also a super hard problem. And there is no secret sauce to building that. You just have to do the hard work of engaging people and getting them to try and really focus on solving a pain point that they have. And the pain point that we're really good at solving is performance. So anyone that has problems scaling on Ethereum or any other chain, we can actually help.
00:17:58.834 - 00:18:38.704, Speaker A: So that brings up a question that a lot of maybe first time developers or entrepreneurs may face, is that they see the potential, and there's so much to be done where you can solve a little bit of a problem and then you run into another problem that you're like, I could probably solve that one too. So maybe we'll just do both of those. And then you run into a third problem. You're like, well, I guess if we're going to do two, we might as well do three. And before you know it, you're claiming that you're going to solve every problem under the sun at the same time. Right? How do you kind of limit what your scope of your project is? And have you guys had any issues with that yourselves?
00:18:39.564 - 00:19:15.184, Speaker E: Yeah, it's definitely, definitely a pain, I think, for anybody coming from engineering background. So your tool to attack complexity is abstractions. So for us, I mean, we want to build the natural abstractions for developers, which means for us we have concerns separating compartmentalized in layers, and so that each layer focuses on one specific concern and we can optimize it so it doesn't have to mix together and then forced to make hard trade offs. So, yeah, abstractions.
00:19:17.164 - 00:20:00.724, Speaker D: I think the first step, I would say, is to be aware of that risk and try to not fall into that. And I think that. So what we do is we try to be very conscious about exactly what we want, say in the case of Stella, what stellar should be. And then we say no to a lot of things, because at the end of the day, it's pretty hard to get a lot of people and hopefully the whole world using something like stellar. So if we make it more complicated than what it needs to be to get everyone to use it, then not that many people are going to use it. So we try to just keep things simple and figure out, would some farmer in Africa be willing to use this complicated solution? And if we think that they might not, then we try to stay away from that.
00:20:03.144 - 00:20:48.084, Speaker C: For us, we really focused on performance. And so far, where we had to make trade offs, I think is really going after something like zero knowledge proofs and building a totally different model that requires, I think, really, really huge performance sacrifices to make it work. It is a really fun research topic and I would love to spend a couple of years trying to figure out how to make that work fast, but so far it doesn't seem possible. So when we do make choices in terms of what we're building, we pick performance first, and the second thing, we're optimizing it for privacy. So that is kind of our clear design goals.
00:20:49.424 - 00:20:50.244, Speaker D: Cool.
00:20:51.144 - 00:21:11.536, Speaker A: So kind of going back to the developer side, and you guys have all kind of touched on this, but what developer tools do you think are critical to knowing before jumping into like, working with your projects? Like what, what is like the prerequisites that we should come with, like to.
00:21:11.560 - 00:21:13.084, Speaker E: Build with our project? Okay.
00:21:14.824 - 00:21:16.644, Speaker A: What do I, what must I know?
00:21:17.664 - 00:21:47.034, Speaker E: You know, again, there are our platform, there will be multiple audiences, right? So there are people that are building L2 solutions. I think they're, other than, you know, their own programming languages and so on. They need to understand interactive proof, working with the base layer protocol. So it's more about crypto economics. And then we'll make that easy for people. That's what we want to expose. And then you have people working, building on Dapps on top of L2 solutions.
00:21:47.034 - 00:22:02.294, Speaker E: This is where I think it's really about. It's not so much of building on top of normal CKB, but just knowing the specific platforms and their features, what's their tradeoffs, and pick the right platform.
00:22:05.314 - 00:22:32.824, Speaker D: So I think the biggest thing I would say is have a mindset of security. If you're building a product, the security is kind of on you, and it's up to you to decide how secure your users are going to be. And I think that combined with knowing any of the languages that we currently support, I think JavaScript is the most popular SDK that we have. I think combined with those, you can pretty much build what you want. And I think having that mindset of security is what's going to differentiate your app from any of the others.
00:22:35.924 - 00:23:02.384, Speaker C: For us, I would say the Kirin requirement is rust. So it's a high performance language. So I would say that's a pretty clear requirement right now. But we will enable more languages. Basically anything that has a LLVM front end should be supportable. And our goal might be to be the first debugger for blockchain smart contracts. I'm surprised there isn't one yet.
00:23:03.924 - 00:23:05.500, Speaker A: Well, why do you think that is?
00:23:05.692 - 00:23:29.394, Speaker C: It's just tooling is hard, like developer tools are hard. It's always the last thing in anyone's mind when they're trying to get stuff out. Me coming from a long twelve years of building stuff in embedded systems where tooling is hard as well, I think debuggers are very important for developers to actually get stuff done.
00:23:30.374 - 00:24:02.334, Speaker A: That's an interesting point. I know all of you have really interesting backgrounds. I don't know how much time we have to go really deep into it, but maybe you guys could talk a little bit about your backgrounds and how they relate to your current project. I know you had some really interesting stuff on decentralized extra and I know you have some. So maybe take a moment and then talk about how your past relates to what you're doing now. And maybe also how people with really interesting backgrounds out in the audience, they can kind of find a place for themselves in the blockchain world.
00:24:04.434 - 00:25:09.196, Speaker E: In terms of interesting background, I feel like for most of us coming from engineering background, you know, this entire bitcoin and blockchain, you know, innovation really just the last several years. So you know, for example, I was a work at, a software engineer at IBM Silicon Valley lab down, you know, in San Jose. So I wasn't really doing a lot of, you know, blockchain or, you know, crypto economics research or cryptography research. I was doing more of a data management and big data solutions at the time. So I think it's more just general computer science education and knowing about distributed systems, algorithm, data structure. So I wouldn't put a very high barrier for people who want to come to this world and who want to become a blockchain engineer and developer. If you're interested and you have some spare time to play with it, you're probably halfway there.
00:25:09.380 - 00:25:11.264, Speaker A: What about for non developers?
00:25:12.204 - 00:25:43.576, Speaker E: For non developers, I mean, it depends on if they want to become developers. I think the good place to start is probably Ethereum smart contracts. So it's relatively easy to pick up programming language or they can start the JavaScript, which is kind of similar, and go from there and learn about the base principles of, you know, blockchain systems and start trying to play with the smart contracts. That's probably the best. Yeah.
00:25:43.600 - 00:26:25.024, Speaker D: So for me I came from, I guess more of an infrastructure background. So I was at Salesforce, where I worked in the queuing team, and also at duetto after that, which is a startup that works on dynamic pricing. And with that I sort of wanted to do more, learn more about like exchanges and trading. And that's when I came to lightyear to sort of learn more about how the Dex works. And now, for example, I'm currently building, creating bots to work on the Dex. So I think that was kind of like a very natural path for me. And I think that anyone with a solid understanding of distributed systems would have a good opportunity to get into blockchain and be excited about it.
00:26:27.384 - 00:27:10.400, Speaker C: So I spent like twelve, I think, or 13 years at Qualcomm, basically optimizing operating systems. I feel like I was born to build this operating system because I spent literally twelve years optimizing hardware and optimizing very large deployments of this hardware on very adversarial networks throughout the world. So I think one of the projects that worked was called brewery. If you guys ever had like a CDMA flip phone, like a Motorola Razr, they all run brew. There were 500 million of these devices and the OS ran from like a phone with two megabytes to like 128. So we had to like really count every bit and byte and make it as fast as possible. And that's what we're doing.
00:27:10.400 - 00:27:20.094, Speaker C: We're making a consensus work by just making the single node like really, really fast because they actually can be. We have the hardware to do do. So.
00:27:22.194 - 00:27:38.298, Speaker A: Cool. So I want to wrap up the panel a bit. My last question before we open it up to Q and a is just where can people learn more and what should they focus on to learn more about our projects.
00:27:38.426 - 00:27:38.938, Speaker E: Okay.
00:27:39.026 - 00:27:40.514, Speaker A: Or in life, if you have life.
00:27:40.554 - 00:27:56.536, Speaker E: Advice or something, learn more. Okay, I'll just focus on our project. That's an easy question. So you can just go to our website, nervous.org dot. From there you can join our community. We have a telegram channel and email list, a bunch of forms.
00:27:56.536 - 00:27:59.604, Speaker E: You want to be more involved? Yeah, just go there.
00:28:01.064 - 00:28:10.644, Speaker D: So I think for developers, I think the best place to start is stellar.org developers. And from there you can see the APIs as well as different walkthroughs that we have on how to get started.
00:28:12.284 - 00:28:18.664, Speaker C: Solana.com. You can find all the links there. There's telegram, there's GitHub, there's discord, whatever you guys like.
00:28:19.324 - 00:28:28.904, Speaker A: Cool, a quick round of applause and then we'll open it up to Q and A's. Who has a question?
00:28:35.644 - 00:28:52.272, Speaker B: Yeah, anytime someone talks about scaling blockchains or getting really high transactions per second, I always like to understand to what degree they're choosing just a corner. And the scalability trilemma versus bypassing the trilemma.
00:28:52.408 - 00:28:54.968, Speaker C: The trilemma is b's, it's not cap theorem.
00:28:55.016 - 00:29:18.064, Speaker B: Well, right, you're not. Yeah. And plenty of people are trying to bypass it. Obviously using hardware techniques or sharding, or all claiming to like move in a dimension not in the trilemma. But then there's also plenty of projects that just say, well, hey, we're going to sacrifice decentralization, get really high transactions per second, say we've had a breakthrough, and really it's just they've kind of made a trade off that other people weren't willing to make.
00:29:19.204 - 00:29:47.768, Speaker C: So for us, there isn't a trade off because we're not sharding. So we're not really sacrificing the security parameter of the network. We're still limited by the slowest node in the supermajority. Our goal is just to make that node really fast. And it's actually very doable for very cheap. Our testbed machine is off the shelf. Nvidia GPU's so 410 80 tis, it's under five k.
00:29:47.768 - 00:30:20.024, Speaker C: You can do the full million elliptic or verifications you need per second. The latest generation one card can do 3 million /second so how we're scaling and aligning a project is with Moore's laws. It's working today. Clock speeds are not increasing, but core counts are. So we're making the software as parallelizable as possible. So in two years from now, we'll have 8000 cores and a $700 card. Four years from now it's going to be 16,000 cores.
00:30:20.024 - 00:30:29.614, Speaker C: My goal is to do a billion transactions per second in ten years. And that's all doable as silicon gets better.
00:30:29.914 - 00:30:39.594, Speaker B: You said you're not sharding, but with that amount of transactions per second, I also imagine, I mean, you mentioned yourself that your data is going to scale a lot. So the data you do plan on sharding or striped.
00:30:39.634 - 00:31:16.364, Speaker C: Yeah, the data is striped. So we use a proof of replication technique to basically stripe it and replicate it to a very large number with a very high availability. So imagine like 1000 copies of a single slice that's throughout the network. So with that much availability, there's, you know, 1000 nines of guaranteeing of it being a copy of it somewhere. And that is, I think as close to that is the ultimate like trade off there, right, with pure decentralization when you have a full copy in every node.
00:31:18.264 - 00:31:24.644, Speaker B: So what if I have to compute state that I don't have locally on my node? Do I have to retrieve that through the network first and then.
00:31:25.304 - 00:31:33.296, Speaker C: Yeah, and you would need to effectively pay for it. So there's an incentive model to kind of pay you to store it, pay you to retrieve it so that you.
00:31:33.400 - 00:31:35.352, Speaker B: Can micropayments for retrieving data.
00:31:35.528 - 00:31:36.244, Speaker C: Cool.
00:31:43.164 - 00:32:16.142, Speaker F: Hey guys, so quick question regarding scalability. So a lot of you guys are trying to solve the issue of scalability by coming up with new consensus algorithms. But if you guys had a better kind of underlay network, a better infrastructure so that your packets are in blocks that are propagated, aren't propagated through traditional Internet, do you think there could be changes to your protocol if you can make assumptions around the underlying network that all of your miners and dude, I.
00:32:16.158 - 00:33:04.344, Speaker C: Can talk hours about? Problem with networking. Yeah, multicast, it doesn't work on the Internet. We can send a packet of data that's supposed to go to a bunch of nodes and switches, could actually do all the retransmission for us, but it doesn't work on the open Internet, so we have to build these protocols around that. And there's a lot of difficult problems there in terms of just even verifying UDP packets where they come from. So there's a lot of interesting optimizations there. So if there's projects that are building that, I think that if the space succeeds, those projects could accelerate that and actually like ten x the performance. So I don't know, which project are you talking about?
00:33:04.684 - 00:33:05.892, Speaker F: We can talk offline about it.
00:33:05.908 - 00:33:24.736, Speaker C: Okay. Networking is hard. Yeah.
00:33:24.760 - 00:33:33.604, Speaker B: You mentioned briefly your timing synchronization, I guess innovations and that enabled higher transactions per second. Could you just talk more about that?
00:33:33.944 - 00:34:15.404, Speaker C: Sure. So that doesn't actually enable throughput. What that allows us to do is kind of decouple consensus from throughput. So what we're doing is really, it's called a verifiable delay function. And the verifiable delay function is the ledger data structure itself. So a ledger is the single source of truth in the network, but it's also a clock, and it's a clock that exists before consensus, because you can append to this ledger and any partition that you append to, you're generating time. So this source of time, you can think of it as a water clock.
00:34:15.404 - 00:34:47.684, Speaker C: And nodes in the network can use this source of time to get a synchronous complete view of the entire network. And they know that everyone else has the exact same view, and they can make decisions based on that. And that allows us to shortcut a lot of the messaging overhead. It's very similar to what Google does with its true time in the spanner database. So they have these atomic locks that they synchronize by hand. We're simply using a cryptographic function to generate this source of time simply.
00:34:49.904 - 00:34:58.684, Speaker A: I know we're getting kind of deep into this. Does anyone have a simple, an easy question? Yeah, like, an easy question. Like, maybe from a non developer.
00:35:02.744 - 00:35:16.944, Speaker G: Not for nervos, but for stellar and for Solana. Why such a focus? Well, you said light. You were working at lightning. So this is all to Solana. Why the focus on putting things on chain, not off chain?
00:35:19.324 - 00:35:48.192, Speaker C: Well, it's a cryptographically secure computer. If we can make it fast, we can actually start moving more use cases into this model. And for me, what this model really enables, it is like privacy in the Internet. We have an open database of all these transactions, so we have to build everything with privacy in mind because we can't share your public data. It's shared publicly. Right. We can't share your information because it's all stored in this public ledger.
00:35:48.192 - 00:36:25.884, Speaker C: So we actually have to start building applications with privacy first. And it's ironic that it took an open database to give us a path to privacy and the Internet. So if we can make it fast and we can make it permissionless and keep those properties, we can actually start getting rid of, like, the all these, like, vertical sandbox technologies like Google and Facebook and Apple that are really designed to, like, kind of keep us, like, in a single marketplace and steal our data and, like, really sell it. Right. And it just sucks, like.
00:36:26.184 - 00:36:34.626, Speaker G: So in the interest of privacy, though, why form, like, a single data set that has everyone's information instead of saying, separating it out into off chain stuff?
00:36:34.730 - 00:37:15.252, Speaker C: If as an engineer, you know it's going to be open, you build it to be secure and private. So we use cryptography, right, to hide all this data to actually prevent you from and secure you. In a very simple case, the token is a resource of hardware. When I, like, talk to my thermostat, it doesn't need to know about my Google account. I can just send it a little bit of resource for that one transaction over self generated key pairs that we just created, and those disappear, and we don't have this Google account relationship anymore. It's literally me enabling a piece of hardware to do its job and only that. And that doesn't exist right now, and I don't know why.
00:37:15.252 - 00:37:19.664, Speaker C: Right. But we can actually build that and enable that. Thanks.
00:37:21.924 - 00:37:22.356, Speaker E: Yeah.
00:37:22.420 - 00:37:45.734, Speaker D: So I think for us, what Lytia is trying to do is it's trying, trying to get partners to do a lot of their transactions actually off chain. But if they want to cross the border and talk to another entity that is also dealing with their same tokens or whatever, they would then have to go through the stellar network and then that would have to be on chain. So it's kind of like we're trying to use a mix of both.
00:37:49.394 - 00:38:54.854, Speaker E: Okay, the specific question actually doesn't apply to us, but our view of this is there's no, we can't capture everybody's domain specific requirements. So for some domain they may have privacy concerns, they may have both data and algorithm running on the secure enclave. And then for some other projects it could be something totally different. For enterprise applications they may not, for competitive reasons or regulatory reasons, they just can't put the algorithm on chain. Right. So for whatever reason it is, we allow people to choose their own proper settings and mode to run their computation, and then we don't care about how to generate it, we just look at, we allow people to define their own semantics in terms of what does trust mean? So in terms of data, and then that defines the trust semantics of the blockchain. So yeah, so we totally welcome off chain computation and solutions.
00:38:57.594 - 00:39:25.274, Speaker A: Again, does anyone have an easy question, like a super simple question that you've always wondered, maybe doesn't have to be about these projects in particular? Yeah. How do we get more people to use these things? Like what's missing? What do we collectively have to do to get people to care?
00:39:28.214 - 00:40:11.214, Speaker C: I think that once scale is there, developers will start building cool things for it and people start using it because they're not giving up their privacy. Like I think adoption. So I was building this like CDMA phone, we had 80% market share and Apple came out and within a year it went the other way, 80% smartphone market share. So when there's like a catalyst that like, things become like obvious to people that this is awesome, it'll happen like that. Until that happens, until we actually build all the tools and infrastructure for that to occur, it'll be hard, but when it happens, it'll be very fast and it'll be obvious. In retrospect, yeah, this thing is awesome.
00:40:13.354 - 00:40:34.584, Speaker D: Just to add to that, I think there also needs to be some element of trust by the general public now, I think when that does happen, people are going to trust the blockchain and all of that a lot more. I think right now, people just outside of the bubble that we are in right now, they just think of blockchain as a buzzword and they're not really aware of exactly, exactly where it is. And once that barrier is crossed, I think that's going to help with adoption.
00:40:35.844 - 00:41:10.844, Speaker E: Yeah, I think definitely what they said scalability is definitely a hurdle, but I think it will be solved. So I'm actually kind of optimistic. Right. So I think there are going to be a wave of applications that's coming onto the blockchain platforms, and I'm especially optimistic about financial applications. And a lot of it comes down to whether we can have regulatory certainty and what type of financial products we can use this new platform to enable. I think once we have that, it's going to be a whole new world.
00:41:11.864 - 00:41:52.484, Speaker C: I hope you're optimistic. I think just to add to that, this technology, it's just, it's really cool because it allows us to come to agreement on something without a third party. Right. Like, all of us here can come to agreement on a source of truth without, like, trusting anyone else to put it together. And that is, like, the beauty of it. Like, we can, we can use this plus cryptography to create applications that have never been possible before and they can actually solve real world problems. Like, right now, I send money through my bank.
00:41:52.484 - 00:42:31.004, Speaker C: It costs $25 because they're a bank and I have to use them. Right. But with cryptography, the costs of that are like pennies. It actually is the cost of changing numbers in memory in a computer. So we can take all this wealth that's being spent on sending money around and give it back to the world economy and actually create wealth. And this is, I think for an engineer, this is like the biggest opportunity in the world because I think Gartner said that we spend like $2 trillion in moving money around, which is absurd. Right? Like, why are we spending that much money on money?
00:42:33.504 - 00:43:06.216, Speaker A: Yeah. So I think that highlights an interesting, like, area where suddenly, well, it's been since the Internet, but, like, suddenly as a developer, you can make, like, real world impacts, right. It's not just about, like, like moving bits and bytes. Like, those changes in bits and bytes are really doing things in the real world. Like they're, they're like they're paying someone's renter. Like, you know, like, all that. As a developer, how do you learn all of the different moving pieces about, like, a blockchain business, right? Like, because there's so much.
00:43:06.240 - 00:43:06.376, Speaker E: Right?
00:43:06.400 - 00:43:23.514, Speaker A: There's so much to learn there. Like, it's overwhelming at times, even as a developer. Maybe you'll code something, but then there's a legal issue or something, or how do you even handle that? Or do you have to just kind of do it and run into a wall every once in a while?
00:43:28.094 - 00:44:23.954, Speaker E: I don't think it's different from other types of new brand new technology that evolve very fast. When you go online, you typically find out of date tutorials, you typically found things that are no longer maintained and things evolving very, very fast. So I would recommend going to events like this to meet people and see what people are doing, go to conferences and get the most up to date technology that's probably the best, and then just willing to play with beta software, just experiment. And I think a lot of it comes from that. Just tolerate ambiguity because there's going to be a lot of that. And then if you fall, that's fine, just try something else, ask for help, go to community forums, slack channels and everything.
00:44:25.614 - 00:45:01.214, Speaker D: I think that's one thing that when I entered the blockchain industry, I was completely surprised by positively that a lot of the projects are actually all open source. So there is compared to traditional, I guess, software companies, there's a lot that you can do in this space without actually getting blocked by all these legal issues. Obviously that does come about every once in a while, like for example, Solana trying to encourage people to take their code and do things with it. And I think that if you create a project, I would say let that be open source because you will be positively surprised by how many people contribute to your code base and help your product.
00:45:04.714 - 00:45:24.314, Speaker C: Just you mentioned legal issues. I think that is the biggest gray cloud over this whole space right now in the United States. I think it will get solved sooner or later because there's simply too many smart people working in this technology. Just go build stuff like, don't worry about it.
00:45:26.054 - 00:45:42.234, Speaker A: So I personally find the open source, closed source thing very interesting. Could you guys talk about kind of the design decisions or like the decision in general of making your projects either open or closed source and maybe the thought process behind how you thought it through.
00:45:43.654 - 00:46:52.514, Speaker C: So for me, I started programming when I was like very young. This was in like the Soviet Union, and I really continued in the United States and I started working on Linux and that's an open source project and I just learned so much playing around with it. And I was there for like the legal battle between SEO and IBM. And kind of like as the open source ecosystem matured and I saw projects that were really promising that stayed closed source and they failed even though they might have been better technologies when an open source project had all their code out there and those communities grew and built and kind of created these awesome ecosystems. So from my perspective, I think anyone that's building blockchain stuff, closed source is shooting themselves in the foot because the hardest thing in the space is getting people to understand what you're doing and getting that information to spread and be absorbed by the rest of the world. And if you put any brakes on that, you're just killing yourself. Nobody's going to care about a closed source blockchain ten years from now.
00:46:55.934 - 00:47:37.094, Speaker D: Yeah, I think that's pretty much exactly what I was thinking about. And I think if you're not allowing people to contribute to your code base and you're just harming yourself and you're just giving other people that are encouraging others to contribute a better chance at being successful. And yeah, I think that's kind of one of the things that we keep in mind when we try and open source things. But I think sometimes you do have to keep things closed source. And I think it's also important to consider maybe you can open source a small part of that. And anything you open source, I always believe is going to just get better buyer contributions from other people.
00:47:39.394 - 00:48:43.084, Speaker E: Yeah, I mean, it's not too different here. So blockchain system in general is all about trust, right? So how do you gain trust of your users if you don't let them examine your source code? So what system you're running and also just blockchain system in general for public blockchains especially are running in the open. So there are going to be people that constantly think about ways to attack the network. So you want it to have both. If the source code is open, then anything that happens, you all of a sudden have your own community to try to help you and figure out the problems and evolve and go from there. For us, we're currently temporarily closing source of Neverckb, but we'll open it in a few months. We're running some experiments and once the sort of source code stabilizes, we'll definitely open source everything before testnet.
00:48:45.424 - 00:48:57.358, Speaker C: Just do it now. No one's going to steal your code. Dude. If you actually imagine somebody building a team, team taking your code and running with it, they have way too much time in their hand. I agree.
00:48:57.406 - 00:49:18.994, Speaker E: It's really not for competition reasons, because we're trying a few iterations just to prove things right. So for some, that's not the time yet for people to come in because that's just we're not committed to specific design one way or the other. So once we do know the direction we go, then, you know, we'll make it open and people will come and contribute.
00:49:22.274 - 00:49:42.974, Speaker C: All our warts are in our code base. There's a bunch of ways to knock down the testnet right now. If you do so, we'll give you a t shirt. I'm still waiting for somebody to do so. We did have a contributor that was contributing on the weekends and we hired him because he was awesome and he was like, why don't you do this full time?
00:49:44.814 - 00:49:59.754, Speaker A: Any questions from the audience still? Ok, maybe final question, biggest tip that you have for an aspiring developer in this ecosystem?
00:50:03.334 - 00:50:18.664, Speaker E: Just find a project you like and start contributing. Don't ask for permissions, right? So everything you know is all in the open. Specifications, economic discussions, codes and building smart contracts. Don't wait, just get started.
00:50:19.564 - 00:50:33.344, Speaker D: I think that it would be great if you could look at existing projects, see what people are doing, and then use that to inform yourself about what your project should be doing. And that would allow you to not recreate what other people have already done and maybe contribute to an existing project.
00:50:36.604 - 00:50:59.404, Speaker C: I think it's really hard to kind of get going to find something you really like and like, I don't know, it doesn't even have to be what you normally do. You could be a JavaScript programmer, start working on encryption, you know, like do whatever like really inspires you, because we're in such a really cool early stage in this field that you can do anything. So go do what you really love.
00:51:00.064 - 00:51:16.828, Speaker A: Yeah, I'll add one too. Just read a lot. There's a lot of information out there, maybe too much information. So find a place where you feel comfortable like getting information and just go there regularly and try to learn as much as you can because it's ultimately not that hard.
00:51:16.876 - 00:51:17.156, Speaker E: Right?
00:51:17.220 - 00:51:18.204, Speaker A: Like it's doable.
00:51:18.284 - 00:51:19.588, Speaker C: Yeah, it's all doable.
00:51:19.756 - 00:51:24.764, Speaker A: So I'll encourage you guys to like keep at it and that you can do it. So thank you everybody.
