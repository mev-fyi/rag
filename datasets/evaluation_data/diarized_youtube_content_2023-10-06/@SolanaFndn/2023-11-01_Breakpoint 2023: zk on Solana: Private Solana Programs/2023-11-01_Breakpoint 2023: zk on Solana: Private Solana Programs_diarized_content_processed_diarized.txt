00:00:04.440 - 00:00:04.760, Speaker A: Hello.
00:00:04.774 - 00:00:38.862, Speaker B: Hello, everyone. Yeah, I'm Matt. So today we're talking a lot about ZK. I'll let these people introduce themselves, but to kind of set the stage here, a lot of people talk about ZK in terms of roll ups, but it is actually fundamentally a core technology that is extensible to a lot of different possibilities. And on Solana, we have two projects that are being represented today that have taken much a different approach than that use case. And. Yeah, how about you just introduce yourselves and your projects and, like, how.
00:00:38.862 - 00:00:42.126, Speaker B: And what is the positioning of how you use DK?
00:00:42.310 - 00:01:00.354, Speaker A: Yeah, for sure. So my name is Nico, and I'm one of the co founders of Elusive. And the idea behind elusive is basically that we allow you to create private accounts in which you can hold assets and use those assets to access existing smart contracts without anyone being able to track you on chain. So that's the core idea behind that.
00:01:01.054 - 00:01:22.270, Speaker C: Cool. Hi, everybody. Great to be here. My name is Sven. I'm a co founder at a company building lite protocol. Lite protocol enables developers to build private solana programs. We fittingly call them psps.
00:01:22.270 - 00:01:40.974, Speaker C: And private solana programs are basically like regular Solana programs. But instead of having just public state and public state transitions, you also have private state and private state transitions.
00:01:41.434 - 00:01:54.814, Speaker B: Okay, great. Let's look at kind of the exciting, some far distant future. What is the penultimate case of these? What do you see as the things that we're really heading forward and really enabling?
00:01:55.264 - 00:02:40.822, Speaker A: Yeah, so, I mean, I guess maybe it's a bit of a hot take, but I think in the more immediate term, at least, privacy in Web three isn't all that different from privacy in Web two. Because the thing is, in web two, for most mainstream users, privacy really is just, you have a centralized entity, they encrypt everyone's data. Done privacy. And this doesn't sound very spectacular, but it's something that the average user essentially expects, but that Web three doesn't have yet. And I think this is something that's incredibly important to get to web3 in the first place. Because when I meet people who aren't in crypto and I tell them, hey, I run a crypto privacy protocol, generally, I first have to explain that blockchains are public by default in the first place. And the reaction there is never people saying, oh, I wish this is how web two worked as well, that everyone can see everyone's data without needing to ask for permission.
00:02:40.822 - 00:03:17.434, Speaker A: And it's pretty easy to emphasize with that because no normal person would want their bank account or bank account visible to the entire world. No institution would want their financial flows to be visible by their competitors. So for that reason, I think in the more immediate term, what's really important is that we use the CK programs and ZK privacy to empower the use cases that aren't possible on web3, whether that be DeFi primitives, whether that be more accessible payments, whether that be DPIn or the hundred other great projects we see here at breakpoint. I just think it's incredibly important to have ZK privacy to actually allow to give the price, the guarantees that the average user expects when using these types of products.
00:03:17.934 - 00:03:37.940, Speaker B: Yeah, I'm going to double click on that a little bit. Do that. Ok. What is it actually doing under the hood? Does the user have a choice, basically when they choose? Yeah, when to use a private transaction versus a not. Like when is the transfer private or not?
00:03:38.132 - 00:04:48.524, Speaker A: Yeah. So in the case of elusive, at least the way it works is that the most basic primitive that we have on Solana for proving that you're able to execute a transaction is the signature. Right? Because if you execute a transaction, generally what you do is you modify some staple that belongs to you or you're moving some assets back and forth, and so you need to have a signature so you can say, hey, I'm proving that I'm actually the person that's allowed to modify the state or move these assets. The small problem with signatures is that beside proving that you're allowed to do whatever action you want to take, they have the side effect of also leaking your identity, which isn't ideal. And I think this is where ZK comes in and solves a big problem, because ZK is really nice in the sense that it allows you to prove that a statement is true without revealing anything other than the fact that that statement is true. So in the case of the example I gave executing transaction, you can prove that you're allowed to execute a transaction without needing to prove, without leaking your identity in the process or anything like that. And so with elusive, we built a primitive whereby you then have the option that either you can prove that you want to spend an asset or call a smart contract using a signature or using elusive, do that same thing using a zero knowledge proof which then doesn't leak your identity.
00:04:49.124 - 00:05:00.144, Speaker B: That's great. Let's talk about light so you can do even flexible execution private functionality. Can you talk about one of the things or some of the things that that might enable today?
00:05:01.124 - 00:05:30.338, Speaker C: Today? Yes, yes, right now. Use cases today. It's really interesting and I'll preface this by saying that light protocol and private Solana programs, you can build that on Solana Devnet today. So by today Devnet, and then it's contingent. Mainnet launch is basically contingent on specifically.
00:05:30.386 - 00:05:32.002, Speaker A: Three syscalls that we added to the.
00:05:32.018 - 00:06:28.474, Speaker C: Solana runtime, and they'll go live in 117, which is set for early next year. So having said that, use cases there, it's really, I mean, internally we joke that now you can build basically anything. So I guess the question is rather what makes sense to build nowadays with that stuff? And we do have a couple interesting things that I'm personally really excited about, and we do have reference implementations for that. For all of you developers, you can check that out. It's basically, DeFi is coming in hot for DeFi, you talk about private trade execution. So you have private, aka encrypted matching of bits and asks and settlement if you like. You can have any variation of that.
00:06:28.474 - 00:07:11.664, Speaker C: So I think that's a really exciting use case that you can build with Lite at least. And then there's another big one that I'm personally really excited about. It's gaming. So if you want to have pure on chain gaming and you have some PvP situation where you have fog of war or private hidden state that you need to have on chain nowadays, or without something like light, you would go and run your own web two server to enable this obfuscation. And with something like private Solana programs, you can actually do that all on chain. So that's the two that I'm personally really excited about.
00:07:11.784 - 00:07:13.804, Speaker B: Have you ever played one night werewolf?
00:07:14.184 - 00:07:14.872, Speaker C: Sorry?
00:07:15.008 - 00:07:17.296, Speaker B: One night werewolf or Mafia or like.
00:07:17.360 - 00:07:42.654, Speaker C: Yeah, exactly. So Mafia werewolf. Even if you have something like, maybe most of you guys have played Pokemon before, or Yu Gi. Oh, these are collectible card games, right? Like, if you have trap cards that you don't want the other person to see for a given period of time, you'd want to have that encrypted. And you can now put that on chain as well.
00:07:44.074 - 00:08:39.164, Speaker B: Yeah, I play a lot of poker too, and there's been a talk about how you do a random shuffle in a private transaction. Basically, you have a bunch of people to submit a seed, and you just have to know that your seed is honest. And then you can basically pass around the confirmation that there was an accurate random shuffle, because you can prove that the cards have been shuffled accurately through that program. And then you can just play a normal poker without having to trust the dealer. And it's minimally extractive because it's just done on an efficient blockchain. Solana, let's talk about some other types of, you were talking a little bit earlier about things that exist in web two where you can have some private, maybe a company will obfuscate some things for you. Can you think about a little more examples of how the web3 could maybe even enable some translations between what we see today and web two and how it maybe look a little different?
00:08:43.264 - 00:08:44.576, Speaker A: Could you elaborate on that question?
00:08:44.680 - 00:09:22.764, Speaker B: Yeah, so that's something I'm thinking about right now is like, if I want to just transfer, I can transfer to a bank or something, and they would do the transfer for me and no one else would see it but them. And it's like private to the rest of the world. And maybe they can get audited or whatever, but it's private. My employees don't necessarily have to see how much other employees are being paid or something like that. I'm just trying to think under the hood, most of privacy today in the web two world is kind of just done by hiding some other anonymizing trusted agent doing things for you. So they're doing it. Maybe they can see that and maybe banks can see it.
00:09:22.764 - 00:09:34.670, Speaker B: But how does that differ from maybe like in the self sovereign world, what privacy, like what privacy means, I guess, because this is just done in code. Can you maybe describe the underpinnings of that functional difference?
00:09:34.742 - 00:10:04.814, Speaker A: I guess, yeah, for sure. So, I mean, I think the underpinning of the functional difference there, you already almost got to the point of it, which is really that instead of having to trust the company, basically the company telling you, hey, we're encrypting this data for you and we're keeping this data safe for you. You don't have to worry about it. Instead, all you have to do is trust. Trust math. And inherently, when we think about big companies, at least I think for people who aren't in web3, privacy isn't something that people are that worried about. They sort of just trust that, for example, Google or something is storing your data correctly and is keeping it private.
00:10:04.814 - 00:10:45.582, Speaker A: However, in web3, we have been burned before, especially on Solana with things like FTX, because the thing is, when you have private data, there's always two things that you have to pay attention to. Obviously, the most intuitive one is you have to pay attention that stays private in the first place. But the second part, which is why ZK is also used for scalability a lot, is that it proves that you're executing something correctly and the state of something is correctly. That's something that's very important as well, because, again, with the example of FTX, they might have kept everyone's data private. Okay. But that had the side effect that you have to trust FTX, that they're keeping this data private, but that they're keeping it correct as well. And that's something where I think ZK can really help, because you can have privacy where you really don't have to trust anyone.
00:10:45.582 - 00:10:48.394, Speaker A: Except for some cryptographic assumptions, of course.
00:10:49.174 - 00:11:16.454, Speaker B: Yeah, yeah. You bring up a really good point where the trust in web two almost comes like, well, of course they're not going to mess with little old me. They have so many assets to worry about. But we've seen in web3 adjacent world, even the private companies have, like, that isn't enough of a hold on them to not do something really bad. So it is much better to trust math. So maybe, like, we'll just. This is a short talk, so we're not going to be able to get into it, but, like, maybe.
00:11:16.454 - 00:11:24.204, Speaker B: What is that math? And how do you think that you get a normal user to trust that math, as opposed to Google?
00:11:24.864 - 00:11:56.378, Speaker A: Yeah, I mean, so the math behind it is zero knowledge. Cryptography, or ZK snarks, to be precise. In the case of us, we use groth 16, is the proving algorithm we use. I think Sven can afterwards also explain how they do it. But in our case, basically, the way you get them to trust it is really just, on one hand, just using trusted algorithms that happen in the industry for a while that aren't just something that we came up with ourselves. The standard developer thing of not rolling your own crypto. And then beside that as well, I think explaining the exact specifications of how these ZK algorithms work exactly might be a bit beyond the scope of this panel.
00:11:56.378 - 00:12:42.414, Speaker A: But I think what's important in cryptography always is that most of the time, you don't really say, oh, this cryptography algorithm works because we say for a reason, Xyz. You always try to reduce it back down to some base problem, because oftentimes you say, oh, this works as long as, for example, hash functions are pre image resistance, or as long as some elliptic curve assumptions are correct, and so on. And so in the case of ZK, I think for the average user, basically telling them we use this algorithm, them having the ability to look that up, seeing that that's secure. Indeed, yeah. Should be sufficient for the more advanced user. Open sourcing your programs is, of course, super important so that they can verify that it's not just us saying, oh, we use this algorithm to implement it correctly, but actually being able to verify that. What do you think about that?
00:12:43.034 - 00:13:10.484, Speaker C: Yeah, great. So, all right, I think so. There are two distinctive types of how you can run compute, right? And one is sort of trustless or scaled trust and verifiable, which is sort of what we have with bitcoin and ethereum and Solana, which is sort of really cool because everyone can verify the chain and everybody can veto if something is going wrong.
00:13:10.524 - 00:13:10.964, Speaker A: Right.
00:13:11.084 - 00:14:02.782, Speaker C: The underlying principle of blockchains, on the other hand, you have these trusted execution environments, like if I have a web two server, Facebook or any company in web two, you inherently trust their servers to do the right thing and to store your data well. And so on the one side, you have the verifiability, which echoing Nico here with open source, which is really great, and it comes at the expense of privacy. So taking the web two, encryption and molding that onto the web, three, verifiability and open source. I think that's really the powerful thing about SDK. Yeah.
00:14:02.798 - 00:14:31.846, Speaker B: I really like the framing that making the question simple, a normal user is going to be able to understand. Oh, yeah, this is just verifying that I have this balance. It's above ten USDC. And the questions can be really simple. And the fact that everybody else can agree on that, they don't necessarily need to know all the math behind it, but they just see the social proof and they can see the simple question that is being answered. I think that's a pretty. I really like that framing for the last little bit here.
00:14:31.846 - 00:14:51.854, Speaker B: Let's talk about maybe the future a little bit. How is the space going to evolve? Like maybe there's ASICs or other hardware improvements, or there's fundamental cryptographic improvements, kind of like, what should we look forward to in the next, I don't know, two to two to five years.
00:14:52.754 - 00:15:52.376, Speaker A: Yeah. So in my opinion, in terms of, of course, ASiCs and better hardware is going to come out. However, I think for the case of privacy, Asics and better hardware isn't necessarily the go to thing, just because for the case of scalability, Asics and better hardware is amazing. Just because in the case of scalability, the system you usually have is you have a blockchain, a roll up, basically that roll up, you want to prove it inside of zero notch proof, and then you want to submit that zero notch proof so other people can verify easily that the rules of the blockchain are being enforced. So in that case, you can't just have some super beefy server that has the best ASICs, the latest hardware, generates that proof for you. The thing is, though, in the case of privacy, if you're saying, hey, here's my private data giving it to a server, and you're telling the server, please generate this proof for me, that sort of defeats the purpose, because at that point, you might as well just use some centralized entity in web two because you are trusting a third party to generate those proofs for you. So I think what's really important here is that on one hand, of course, I could then say, oh, the thing that's important is to have more efficient ZK algorithms.
00:15:52.376 - 00:16:05.434, Speaker A: But to be honest, at the moment, I think there's already been enormous progress in the space, and there is still tons of progress being made over the last couple of years with regards to ZK. So I think this isn't. I wouldn't say it's like a fully solved problem, but we're on a great path toward this already.
00:16:06.334 - 00:16:34.876, Speaker B: Oh, so you'd almost say that the barriers now are more like an integration barriers. Basically get enough entities involved that are accepting those proofs as, I don't know, I'm certifying where you live. I live in America or something, and I can just prove that without having to prove my entire address. The barrier today seems to be what is people just accepting that proof to verify that, as opposed to some other identity. It's not a technical barrier, is basically.
00:16:34.900 - 00:17:14.088, Speaker A: What you're saying to some extent. But I think at the moment, it's even more so of a UX problem, because we're still in a case where you sort of have existing programs like Jupyter Gi to, all these amazing Solana programs existing in sort of their own bunker, I almost want to say, or not bunker, maybe not the right word, but in their own world. And then you have the ZK stuff living in a separate world, and there are bridges being built between the two to make them as connected as possible, which I think is what Sven and I are both working towards. But there is some ways to go toward that still, so that the end user doesn't really have to think about, oh, I'm using a ZK protocol instead. They're thinking, oh, I'm using my favorite protocol, and I'm doing so privately because why wouldn't I?
00:17:14.256 - 00:17:16.248, Speaker B: And then it locks this thing.
00:17:16.416 - 00:17:16.720, Speaker A: Cool.
00:17:16.752 - 00:17:38.476, Speaker C: Yeah. I'll just extend that with two things. One is, I think that in the future, the majority of TPS on Solana will be encrypted with ZK. Could be psps could be any. Could it be fhe could be something else. But I. And the second thing is, it's mainly an adoption problem at this time.
00:17:38.476 - 00:18:08.384, Speaker C: Right. So we gotta really find the use cases for ZK that are not necessarily just anonymity for users, but much more. What are the unique things that you can now build with CK where users have this incentive to adopt attack? People have the incentive to build the programs that use CK under the hood. And I think once we solve that, then we can get to that path of encrypting the majority of TPS on Solana.
00:18:08.504 - 00:18:18.536, Speaker B: Great. So any builders out there, if your users care about being private or having some sort of amenity and some of the functionality, couple these guys. Thank you so much.
00:18:18.720 - 00:18:19.264, Speaker A: Yeah, thank you.
