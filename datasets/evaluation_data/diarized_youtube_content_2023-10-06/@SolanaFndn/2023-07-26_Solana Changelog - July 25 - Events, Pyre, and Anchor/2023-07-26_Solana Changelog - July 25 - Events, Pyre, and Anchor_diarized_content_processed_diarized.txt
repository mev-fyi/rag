00:00:00.400 - 00:00:26.318, Speaker A: Welcome to this week's Changelog, where we talk about the changes week by week on Solana. My name is Jacob Creech. I worked for Solana foundation developer relations. I'm joined today by Jonas, who also works on the Solana foundation dev rel team. And let's get started. So this past week we had a bunch of news about different solidity integrations, and one of them was Soling. So Solang was announced by Solana Labs.
00:00:26.318 - 00:00:46.370, Speaker A: It's a way to compile your solidity smart contracts and deploy them to Solana. So no longer will you have to only write Rust C Python. You'll be able to also add solidity, opening up to more developers building on top of Solana. So what do you think about this, Janice?
00:00:46.562 - 00:01:14.780, Speaker B: I think it's really nice. I always get the question from Ethereum developers, how do I use get functions? And now they can just write it in solidity and don't have to figure it out on Solana themselves. And there's like a bunch of examples that you can check out that I think John built. And actually there's a lot of stuff already working that you can build with it, which I wasn't expecting. So it's super nice to see this. It's great for Ethereum developers.
00:01:14.972 - 00:01:46.444, Speaker A: It's really great for Ethereum developers to try out the speed of Solana. I also really like the get calls, the view functions that they have. Kind of wish that this would come over to some of the different, the smart contract development that we already have, like having a view function. It makes it easier for people to just get the calls versus figuring out what am I exactly doing to get the information. And then I think the next thing we have up is the game jam. You want to talk about that, Janice?
00:01:46.604 - 00:02:08.392, Speaker B: Yeah, of course. So next week is the game jam coming up. So it starts on the 26 July. So you just go to this website, you register and you can register for the Luma event. And then you can also register in Cubic which will have some quadratic funding for the game jam for the best games. And there are lots of prizes. I think more even get announced this week.
00:02:08.392 - 00:02:30.214, Speaker B: And yeah, Gamejam is just having fun. In five days, build a small little game, have fun with it, and maybe even win something. I'm very excited. I definitely gonna join. And I also do some workshops and office hours during that time. So whenever you have questions you can just hit me up or the magic block team guys or I think everyone will be helpful. Probably in the discord.
00:02:30.594 - 00:02:38.614, Speaker A: Awesome. Where can someone get started building on games if they've never built a game on any blockchain to begin with.
00:02:39.194 - 00:03:14.364, Speaker B: So there's a bunch of tutorial videos that we have, and there is a link to resources compiled by magic. Block is a repository with a bunch of links with videos. Also some which I made and some example repositories. And there's also the Solana game starter kits, repositories under Solana developers. And there's a bunch of games, there's an idle game, there's a game which uses session keys, there's games which uses nfts and everything. So try it out. There's also the seven seas game from our workshop bootcamp in New York.
00:03:14.364 - 00:03:21.344, Speaker B: So you can just take one of these, compile it yourself, change it up a little bit and you're already good to go. Having a game.
00:03:21.764 - 00:03:33.384, Speaker A: Cool. And I know that you've kind of built a game 2048. Do you want to showcase and kind of like talk how that works and then how people can maybe use this to make their other games during the game jam?
00:03:33.724 - 00:04:08.922, Speaker B: Sure. Like last week it suddenly hit me that maybe we should make a 2048 game. And what I did is I took one of the examples from the game starter kits, the lumberjack example, because it already has a session key implementation in there. How session keys works? They are from gum and they create a tiny key pair in the browser or on the mobile device. This runs on all devices and this is then used to sign transactions. So in this game you are trying to combine these tiles here. Whenever you have two with the same number then they add up and the goal is to get to the biggest tile.
00:04:08.922 - 00:04:49.050, Speaker B: And as you can see, I can just move around, although I don't sign anything. And this is because the session key is used to sign your transactions. And you can also use an NFT as the saved game for your game state and then it will also show up in the ranking here. And then you can also win a little bit of solve which is distributed with a clockwork thread every Sunday. So you can check this out, build it yourself, deploy it yourself. I think that's a great opportunity. This finally use case where you should have your game on chain because you can never trust the client.
00:04:49.050 - 00:04:55.454, Speaker B: And like this, if you have all the logic on chain, then you trust the smart contract which is way better.
00:04:55.834 - 00:05:14.962, Speaker A: Cool. Yeah, this is really cool. And it's a great example for people to kind of like use and reference for whenever they're building the game in the upcoming game jam. So I'm looking forward to seeing what people build during this game jam. That is the Solana Speedrun game jam run by Lamport Dao in Magic block.
00:05:15.098 - 00:05:24.254, Speaker B: Yeah, it's a very fitting name because Solana is incredibly fast. Look how fast I can do these moves here. It's like almost instant. It's unbelievable.
00:05:24.594 - 00:05:51.386, Speaker A: Yeah, it's kind of crazy. Moving on to the proposal of this week. So this was the proposal that was also discussed on last week's core community call. This is SIMD 57. It's doing a different way of doing event logging on Solana. It's got a number of different changes, definitely. If you want to get to the full nitty gritty of what the discussion is by the engineers, check the last week's core community call.
00:05:51.386 - 00:05:55.694, Speaker A: But yeah, this is a really cool new simd. What do you think about it, Jonas?
00:05:56.234 - 00:06:35.214, Speaker B: I think this is a great thing that you have events on chain, like for example, for the seven seas game that we had recently. If you want to have certain events, game events, you need to put them all into an array, into a vector, into an account, and then listen to them via websocket, for example. And now if you have like a proper event on chain, then you can just listen to all these events and use these instead of building it yourself with every application that you're having. So I think this is a great. And I talked with Max about it and I'm very excited that this goes in. So add your comments here and yeah, let's make this happen.
00:06:35.514 - 00:07:09.950, Speaker A: Yeah, it'd be really cool to see what people's ideas and whether or not it actually gets accepted in the long run. It's definitely better than the current state of events where people are logging and then pulling based off of logs. And then sometimes it works. It's not, it's not. And also, like, the logs get truncated, it's not very reliable. So this will definitely change the way that we do smart contracts on Solana in the future if it gets accepted. So put your join to the discussion, put your comments and opinions on it.
00:07:09.950 - 00:07:35.576, Speaker A: Let's see where it goes. Moving on to the commits of the week, there were a number of different commits. One of them was the compilation fix with Solana 1.4 from anchor. This is so that the newest anchor version could be both backwards compatible between 1.16 and 1.14. It fixes some of the things whenever you're building, but it's only specifically with the anchor client.
00:07:35.576 - 00:07:46.564, Speaker A: So it's good to, good to hear. But there are other changes coming that will even fix more of the dependency issues, and I think you have one of them. Jonas, what was the borscht change?
00:07:47.134 - 00:08:26.980, Speaker B: Yeah, first of all, I want to tell everyone, if you're having these problems and you're annoyed by them, you're not alone. I also fought with them a lot in the last week, and this one specifically is implementing the Bosch trades on Pubkey in 1.16, which means you won't have these problems anymore, that you build an old anchor version with the new crates and then you get this weird error which says the trades for pubkey are not implemented. So this is now ported to 116 by John. I think it's not in yet, but yeah, it's heavily worked on to get this dependencies solved. So I think that's good to hear for everybody.
00:08:27.132 - 00:09:06.343, Speaker A: It'll be really good. Once this is added, it should fix a lot of dependency issues. There's also, if anybody does have dependency issues with different crates, like compatibility with different crates in the future, there's also something called anchorgent that you can use to generate the different interfaces to call these different crates. And that way you're not reliant on all these different dependencies that are transitive dependencies and breaking your builds. So definitely check out Anchoragent as well. And then I think there was one other thing about the dependency issues and how they're kind of fixing in the future. What did you have, Jonas?
00:09:07.544 - 00:09:30.084, Speaker B: Yeah, so the Solana labs is pulling out some things out of the Monorepo, specifically the Dev tools and the SDK. And what this means is that there will be different release passes now for different things in Solana. And this makes fixing these issues way faster and way easier because they're independent from big releases.
00:09:30.624 - 00:10:21.860, Speaker A: Right. So this would actually be following semver or semantic versioning pattern, so that whenever there's a breaking change like this borscht, you would actually upgrade the major version versus previously the Solana program crate as well as all the other dev tools were following the release train of the validator client, which has different type of breaking changes, and it was causing issues with the development of Solana smart contracts. So this should make it easier in the future to understand what your dependency issues are and be able to keep in line with different versions and not accidentally pull in transitive dependencies that will break your smart contracts. Hopefully once this is out, which should be in the next month or so, we won't have any of these issues anymore ever again.
00:10:21.932 - 00:10:26.184, Speaker B: That's the goal. Yeah, that would be amazing. Very appreciated.
00:10:27.024 - 00:11:07.352, Speaker A: Yeah. And then on the resource of the week we have Pyre by Helios. So Pyre is kind of a code Academy meets Solana tutorial platform. So what you can do is you can use it to teach Solana, especially right now, it only works with like JavaScript calls or web3 calls. You can use this with the JavaScript to teach people how to interact with the blockchain. Get your accounts and get more information about what is on Solana. It's really cool because it's kind of like if people are familiar with crypto zombies, it can be extended to something like crypto zombies.
00:11:07.352 - 00:11:15.564, Speaker A: It doesn't have full program support like smart contract support, but it keeps, it works on the client side. So you can do a lot with this.
00:11:15.944 - 00:11:27.068, Speaker B: Yeah, that's amazing. If they manage to somehow combine this with a playground, for example, that you can also compile in the browser, then you could build an amazing tutorial tool with this.
00:11:27.256 - 00:11:33.468, Speaker A: Yeah, it would be really cool. And I think that's it for the today. Is there anything else, Jonas?
00:11:33.596 - 00:11:39.828, Speaker B: No, I think that's it. Make sure to sign up for the game jam next week and yeah, see you next week.
00:11:39.996 - 00:11:41.916, Speaker A: All right, see you next week. Adios. Bye.
