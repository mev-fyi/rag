00:00:00.160 - 00:00:21.674, Speaker A: All right, thanks so much for joining us, everybody. I am here with a lot of my colleagues and my name is Hall. I use they them pronouns and run our dev marketing here, but I don't want to go too much into me. I want to pass it off to the amazingly talented Austin Federa, our head of strategy, to introduce the panel, and he'll also be moderating that panel. Austin.
00:00:23.894 - 00:00:30.366, Speaker B: Thanks all, and thanks for everyone for joining us today. This is going to be about an hour conversation on token extensions.
00:00:30.470 - 00:00:30.686, Speaker C: What?
00:00:30.710 - 00:01:12.274, Speaker B: Those are how folks can use them. We'll take some questions as well on this, which you can submit via the Google form that hall will be dropping in a few different places here. Before we get in, I wanted to start out with a little bit of information around the recent outage. There's a five hour outage today on Solana Mainnet beta. Root cause investigation is still ongoing, but the network successfully executed an upgrade to a new version, which really enabled the network to restart and consensus to keep moving, block production to keep going. There will be a big retro post on most likely the Solana foundation blog about this sort of thing, so stay tuned for more information there. But just wanted to let folks know that's coming.
00:01:12.274 - 00:01:34.364, Speaker B: But one of the really important things is even when an adverse situation like this happens, it doesn't mean that development on the Solana network stops. And so we think it's important to continue today with this conversation focused on token extensions and how folks are able to use them. So before we get into that, I want to start off with quick introductions from folks. John, why don't you start?
00:01:35.544 - 00:01:54.524, Speaker C: Hey everyone, my name is John. I run the ecosystem engineering team here at the Solana foundation, and my team focuses on helping folks understand the capabilities of Solana, the network, the protocol, different pieces, and how to fit it all together. So excited to talk more about token extensions and how it might be useful for products and businesses.
00:01:56.674 - 00:01:58.814, Speaker B: Great. Thanks, Jacob.
00:01:59.274 - 00:02:21.854, Speaker D: Hello everyone, my name is Jacob Creech. I work at developer relations at Solana Foundation. A lot of what we do at developer relations is we're working with developers within the Solana ecosystem, make their lives easier, make it easier to also build on Solana. So Solana has token extensions now. Looking forward to chatting about how developers lives are made easier with token extensions.
00:02:23.784 - 00:02:25.484, Speaker B: Thanks Jacob and Shiraz.
00:02:25.784 - 00:02:50.564, Speaker E: Hey everyone, I'm Shiraz Shahr. I lead the payments and financial services vertical for the Solana foundation. And typically in that capacity, I work with larger regulated enterprises in the financial services and payments industries. And that's why I'm particularly excited about token extensions because I think it addresses a lot of the concerns and issues that large enterprises have had in working with public blockchains.
00:02:51.824 - 00:03:38.504, Speaker B: Awesome. Before we start off today, just a quick overview of what token extensions are and how these things are trying to fit into the larger Solana landscape. This is the culmination of about two and a half years of work by the Solana Labs engineering team, which is the engineering group that gets all the credit for creating the token extensions framework, to re envision what's possible on a blockchain by adding new features and optionalities to a new token program that allows developers, token issuers, all sorts of folks building on the network, to build new types of token experiences on it. So I think to start off with Jacob, what are some of the token extensions that you have found developers to be most interested in building on, and what are those capabilities that you find most compelling?
00:03:38.844 - 00:04:26.694, Speaker D: Yes, so the transfer extension is the one that's usually talked about the most within the developer community. It allows you to make custom functionality within the transfer instruction on a token. So basically from before you could just do transfer from a to b and nothing could happen between. So you just transfer value from a to b, you're good to go with token extensions. And with specifically the transfer hook extension, you can now add custom functionality in between that. Really depending on what the bounds of what you can do is up to your imagination, especially if you add something like the permanent delegate extension alongside with the transfer extension. You can do a ton of different things with tokens.
00:04:26.694 - 00:04:47.734, Speaker D: A common use case that people have already done, and we actually have a tutorial on YouTube today on this is how to add a like a check of pay a whitelist. If this someone can transfer from a to b with transfrook, it's very simple to do that. It's extra custom instructions inside the transfer function.
00:04:49.314 - 00:05:07.294, Speaker B: Yeah, so I want to stick on transfer hooks for a second because Shiraz, I know you've been talking to a lot of payments companies that are very interested in a number of features, and transfer hooks is one of them. What type of functionality does transfer hooks let something like a stablecoin issuer do that they can't currently do today on other blockchains?
00:05:07.714 - 00:06:19.406, Speaker E: Yeah, it's a great question. There have been a lot of barriers to large enterprises engaging with blockchains and stablecoins. I think a simple one is as a stablecoin issuer, for example, concerns over sanctioned wallets, for example, touching your stablecoin and the beauty of something like transfer hooks is that it can give you a whitelist or a blacklist or whatever you want to call it, that, that lists, for example, OFAC sanctioned wallets that would not be able to touch that specific token. I think if you think about real world asset issuers that actually want to do more of a closed sort of an ecosystem. So let's say you're a mutual fund issuer and you want to create tokenized shares, but you only want your KYC customers to be able to transact with those tokenized shares of that fund. You can do that very simply with token extensions because you essentially mint the asset using the token extensions and you define the list of wallets. Or you could have a KYC soul bound token and only those wallets could transact in that.
00:06:19.406 - 00:06:29.954, Speaker E: So in short, it provides a level of control that wasn't there before, and it brings the programmability, the promise of programmability, to some of these large enterprises.
00:06:31.754 - 00:06:42.654, Speaker B: Yeah. So John, what are some of the other token extensions that you're particularly excited about? You've seen people looking to build on, and what are some of the products you've seen folks thinking about?
00:06:43.474 - 00:07:35.396, Speaker C: I've seen a whole host of interesting and creative applications and combinations of the different extensions. So we've talked a little bit about transfer hooks. There's a lot of other use cases as well, beyond just the financial part of it. Video games, for example, that wants to have point systems or the equivalent of your in game Gem now can issue that using the same infrastructure that they're doing with a token that might be liquid. Now someone might ask, hey, why do I want to do that? Well, the idea is, hey, if you have an in game jam that transfers within the programs that you've built, and you want to enable a new partnership and you want to bring them into the fold, imagine having to take your off chain point system and having to integrate them and make sure that they could use it in their smart contracts. Well, now you can say, hey, let's just extend our token a little bit further.
00:07:35.460 - 00:07:35.852, Speaker E: Right?
00:07:35.948 - 00:07:47.984, Speaker C: So to me this is really that permission token and a permissionless network. How do you start small and grow as you see fit in terms of that multiplayer type of product that you want to build?
00:07:49.484 - 00:08:52.044, Speaker E: Sorry, go ahead. I was going to say, since we're talking about specific examples, I think one thing to note is that you often get asked a question, what problem does this solve? Like why use stable coins? I think a great example of this, of something that token extensions unique can do, is if you think about the world of accounts payable and accounts receivable. So with the extension that requires the memo peel to be populated as part of the transfer, you can actually bind the metadata about the transaction into the transaction. So if you think about your CFO of a small business and you get all of these wires and payments coming in, reconciliation is a big problem, right? So that's a problem that exists today. With the ability to actually bind the metadata into the transaction itself, you have a path to solve this big pain point in accounts payable and accounts receivable. So I think that's just one example of not only is this giving us parity with the way traditional finance works, but this is actually solving a problem that exists today.
00:08:53.344 - 00:09:31.680, Speaker B: Yeah, these are all really great examples. I think we've gone pretty deep on a few examples already. But I think if you're maybe sitting in the audience and you're thinking, I thought a lot of this was already possible on blockchains. People have been talking about payments forever and there's already some tokens with transfer fee type of things on them and some ecosystems. One of the core differentiators with token extensions is the way the program is constructed as one single token program. Jacob, can you talk a little bit about, from a developer standpoint, how easy it is to actually pick these extensions up and start using them, and the backwards compatibility with existing Solana token programs and tokens?
00:09:31.872 - 00:10:26.214, Speaker D: Yes. So if you're familiar with other blockchains outside of Solana, a lot of those blockchains, if you want to do custom functionality with tokens, you actually have to deploy another program, or commonly known as smart contract outside of Solana onto the blockchain, incurring the larger costs. Because it's a new deployment just to add that custom functionality. With Solana, specifically token extensions, it's one program you're basically just using the mint and you get all the capabilities of the extensions in one basic package. What allows you to do as a developer a lot of the time you don't even have to deal with the on chain aspect of coding. You don't have to know rust to add token extensions to your token or add custom functionality to your token. You can actually do this all via like JavaScript typescript, even just from the UI.
00:10:26.214 - 00:10:45.194, Speaker D: I know there's some other tools in the ecosystem today that allow you just literally click a checkbox to add a token extension to a new token and then hit create token. So it's a lot simpler for developers to get started and get to from zero to one on creating new tokens with custom token functionality.
00:10:45.534 - 00:11:39.054, Speaker E: Yeah, just to add to that, you can't understate the angst that, especially in enterprise, feels if, if you present them with a use case where there's a rich set of functionality. But to make that happen, you have to say, well, we have to rely on this protocol here that's done this and then this other smart contract built by this developer, and you have to piece together all these things and you have to trust all of them. And to really do that in a robust way, you'd want to audit each one of those different smart contracts that were built by different developers. In this case, as Jacob said, it's one program, it's been audited five times. The kind of the comfort in terms of dealing with something that has been reviewed and is trusted is very different where you've got one program versus seven that you're piecing together.
00:11:39.914 - 00:12:10.154, Speaker C: It's also critical to remember here that the token extensions program is backwards compatible with the same instruction layouts as the SPL token. When you're thinking about integrating with an existing smart contract, you swap the program id and it'll handle at least the vast majority of the use cases that you need to use a token for transferring it, minting it, burning it, that sort of stuff, with some, you know, some places where you may need to add a little bit of different behavior depending on the extension that's being configured.
00:12:12.814 - 00:13:10.840, Speaker B: Yeah, I think one of the pieces here that feels at least really different to me when looking at a lot of the stuff is that it's all one token program, as you guys have been, have been saying. And with that comes a certain level of global ecosystem adoption. It might take a month or two for some of the latest tools on the network to add support for a specific new type of token extension. But within a few months of NFTs launching, there was universal support. Within a few months of compression launching, there was universal support. Developers can actually build on top of token extensions with a good degree of certainty that the extensions that they want to use are going to be supported by all of the existing solana infrastructure, Dapps marketplaces, wallets, indexers, et cetera, as you go through that process. But I want to talk a little bit about some of the components here that are really specific to Solana and functionality that you really don't get anywhere else.
00:13:10.840 - 00:13:20.644, Speaker B: I think the permanent delegate token authority is a great example of something like this. Shiraz, do you want to walk us through that and some of its applications in the financial space?
00:13:21.164 - 00:14:20.124, Speaker E: Sure. Yeah. I mean, one very simple example is regulators. I think often there is an old paradigm of thinking where this notion of, let's say, funds go into an account, and a regulator wants a financial institution to have the ability to freeze and seize those assets. I think in the past there were solutions where they're like, well, we can freeze it and remint it. That didn't necessarily grok, even if it was the same functional sort of thing. And so I think one of the, I think, advantages of something like a permanent delegate is that, again, for a stablecoin issuer that's heavily regulated, that has to abide by a set of rules that says, the regulator says, if your stablecoin lands in the wallet of a sanctioned wallet, I want you to have the ability to both seize and, sorry, freeze and seize those assets.
00:14:20.124 - 00:14:27.864, Speaker E: So that's one. Again, I think thinking about it in a regulatory sense, just to level set.
00:14:27.904 - 00:15:28.494, Speaker C: With the audience here as to what is a permanent delegate. On the prototypical token program, there is the concept of a delegate, which allows you to delegate a small balance of a particular token. A permanent delegate basically says that this other key pair, which could be the issuer, it could be a program, is the permanent delegate, no matter what happens in this case, this allows for effectively revocation ability of that particular token. There's a lot of other use cases that are really cool that you could build with permanent delegate. Things like where you need tokens to represent temporary ownership, rentals, subscriptions, even licenses. When we think about the concept of a sole bound credential, what happens if you lose your wallet, but you are still a human that has this credential? What do you do then? Permanent delegate says, hey, we can have a program or key pair go in and take it from that old wallet and put it in the rightful owner's wallet. So it's a great way to express really cool products.
00:15:29.394 - 00:16:25.044, Speaker E: Yeah, and reverse is a good example as well, where I think there are certain enterprise use cases that the immutability might be a barrier of adoption. And just being able to offer the possibility of a reversible transaction, which doesn't, you know, it may not make sense. It doesn't make sense in that notion of digital cash, where we're thinking about a merchant transaction, where we want it to be the merchant, there's no possibility of a chargeback or reversibility. But there are other use cases where maybe you do want reversibility in a merchant context. In a merchant context, for example, today, if you buy a cruise line using your credit card, something that's going to happen nine months from now. If that cruise line goes under, you want the ability to have a chargeback, right? So there are certain use cases where reversibility makes sense, and this can enable some of those use cases that weren't available before, for example, merchant payments.
00:16:26.744 - 00:16:55.464, Speaker B: Yeah, so one of the pieces to tease out here is that this functionality is for one thing optional, and another is it's above the base layer. So just to sort of be clear with folks, this is not saying permanent delegate authority can be applied unilaterally or automatically to something on the network. This is a subset of tools and features built on top of it. John, can you talk a little bit about the safeguards that these sort of, that are built into some of the different token extensions?
00:16:56.044 - 00:17:36.143, Speaker C: Yeah, absolutely. So that's a great point. When the token is being initialized and hasn't been minted yet and you're setting all of these configurations, that's the only time that you can modify the set of extensions that are going to be available on that particular token. You'll be able to see in the mint account to say, hey, this token has XYZ different extensions and how some of them might behave, such as things like the interest bearing ones or the transfer fees and some of these other extensions. Once the token has been minted, that set is locked in. So you won't see new extensions getting added. And as long as the authority has been retained by the issuer, maybe some changes happen.
00:17:36.143 - 00:17:54.424, Speaker C: What's interesting though is that you can always disable those extensions later. Even in the case of a permanent delegate, it is possible to say, hey, we're going to set it and then throw away the key later. There is this ability to, hey, there's some temporary versions of these configurations for some of the different extensions.
00:17:55.004 - 00:18:35.724, Speaker E: Yeah, and just to echo on the point Austin was making, a lot of the things that I'm talking about are very specific implementations that unlock requirements for larger regulated issuers. So this isn't necessarily something that makes sense for a lot of the crypto use cases that we're familiar with. But as we think about requirements of larger merchants and larger bank issuers and things like that, these are tools that as they roll out specific blockchain and stablecoin and tokenized asset solutions to their specific customers, they may or may not need to even make the use case viable.
00:18:38.184 - 00:19:14.394, Speaker B: Yeah. So along the same lines of token extensions that have a lot of applications, not just in financial and payments, but in other sorts of places as well. I want to talk about the confidential transfer token extension. I think this is one that I've seen folks online being most excited about and sometimes not always understanding both the implications and the power of what this actually is. So Jacob, can you walk us through how confidential transfers work, what the difference between a confidential transfer and an anonymous transfer service like tornado cash might be and how folks can be using these different types of features?
00:19:15.074 - 00:19:15.522, Speaker C: Yes.
00:19:15.578 - 00:19:50.694, Speaker D: So something to note real quick on confidential transfer. So when we say confidential, the thing that's confidential is the amount that was transferred from person a to person b. So that will be hidden on the, if you're looking at explorer for the transaction that will be hidden. However, the person a to person b is not hidden. That is public knowledge on the explorer. So that is a like very quick sentence of how confidential transfers look. If you look at an explorer, there's a little bit more functionality that goes on under the hood for confidential transfer.
00:19:50.694 - 00:20:46.104, Speaker D: For example, for those hidden values for a specific token, a token can basically assign like an audit agent for their confidential transfers. In the case of hey, we want to have especially a stable coin issuer or something to audit those transactions and so that they have a little bit more insight of the transaction. However, if you're like shopping, I don't know, shopping at your coffee shop, you want that using confidential transfers because you don't want them seeing what you're transferring and then being able to see. And if you're always using confidential transfer, you can have better, basically better idea of like privacy on your amounts. So that's very quick, like how it works on Solana. And there's also like, there's a lot of other applications that use it. Like you mentioned, tornado, tornado cash, they do a lot more things but those are not enabled just with confidential transfer.
00:20:46.104 - 00:20:51.904, Speaker D: That does not say that they can't be, but that's the way that it works as the extension itself.
00:20:53.684 - 00:21:12.996, Speaker C: Yeah, yeah. I just wanted to add a little bit on here. The, the initialization for confidential transfer is important as well. So as Jacob mentioned, it's non private. So source and desktop destination are public. In this case. Actually both source and destination both have to opt into the capability to receive confidential transfers.
00:21:12.996 - 00:21:49.556, Speaker C: To begin with. You're not going to get airdropped, a random token confidentially that you're not going to know what's happening. You will need to opt in. During that opt in process, you issue yourself an encryption key which is used to encrypt that particular transfer. But what's cool is that you can actually set certain settings in the case that you have, I don't know, merchant, not merchants payroll. And you only want to ever receive confidential transfers. You can actually set that on your token account to say, hey, I only ever want to receive confidential transfers, not public ones or vice versa.
00:21:49.556 - 00:22:01.864, Speaker C: You could say, hey, even though I set this up in the past, I'm actually going to close that off and only get public transfers. There's a lot of optionality that's available for users with the confidential transfers extension.
00:22:03.464 - 00:23:24.714, Speaker B: So a lot of the extensions we've talked about today are very focused on business and enterprise use cases that are a whole class of user that needs additional functionality compared to what exists natively on most blockchains, but also generally doesn't have a lot of smart contract development experience that sort of classifies, I think, most banks, most large financial institutions. And this is where token extensions is a really powerful framework for everything from real world assets to tokenized treasuries, to someday maybe even tokenized stocks and bonds because of the way this allows you to build different types of applications. But I think this is a good moment to talk about where token extensions actually can eliminate the need for private blockchains. I think we've seen a lot of businesses and enterprises go the route of a private or fully permissioned blockchain when for whatever reason, their legal team, their technical team says we can't actually do what we want to do in a public blockchain. If you talk to the folks who actually built the original token extensions framework, a lot of that work was focused on eliminating the need for anyone to ever launch a private blockchain. So how are businesses and enterprises actually looking at this as a solution to launching their own l two or private network?
00:23:25.174 - 00:24:27.270, Speaker E: Yeah, I can start with that. So I think usually when you talk to some of these regulated institutions that are looking at a hyperledger or something like that, and you ask them what are the reasons why? What are the requirements, why you chose a private chain versus a public chain? I think token extensions probably mitigates close to 90% of them. And I think a lot of them are things that are handled by what we were talking about with transfer hooks, for example. So having control over who is touching the asset and where the asset goes. So again, if you're an asset issuer, you've got tokenized financial instrument or tokenized real world asset, and you have an ecosystem of customers and they're KyC. The notion is today that if you tokenize this and it's on a public blockchain, it can just fly around anywhere and you have no control over who's going to touch it. So very simple thing like transfer hooks can, can address that.
00:24:27.270 - 00:25:08.136, Speaker E: Confidentiality is another one, right? So hey, I'm on a public blockchain. All of this stuff is public and like we need privacy, so we need to go on a private blockchain. Again, confidential transfers kind of handles that, you know, the areas where you, you know, that it doesn't resolve is like, if someone is like, well, I want to make sure that all of my validators are in, you know, I'm issuing a CBDC and all the validators need to be in my country can't solve that. But I would say that nine times out of ten, when we see someone going on a private chain, there are things that can be addressed by a lot of this tooling. I think there's a big opportunity to save on capital costs from not having to do a private chain and just having the compliance built into the token.
00:25:08.160 - 00:25:44.474, Speaker C: Itself to add onto that. One of the other things, and this is not related to token extensions, is folks that are considering the use of public blockchains sometimes balk at the cost of transaction fees. And that's where Solana shines. So the combination of token extensions and Solana, where the average transaction fee is 10,000th of a cent or a thousandth of a cent or something like that, means that companies can, it's economically feasible for companies to sponsor those costs on behalf of their users. So you really get 9.5 out of the ten things that Shiro has mentioned.
00:25:45.494 - 00:25:48.088, Speaker B: Yeah, and you also get the. Oh, go for it, Jacob.
00:25:48.176 - 00:26:45.688, Speaker D: I was going to say it's also good to note for anybody that is building with token extensions, you can. Like, just to reiterate, what John said earlier, is that you'll be able to see what all the token has and you can't change it post mint. So those companies that want to create those permission environments within a permissionless network, they can, and they can also, like, it won't change, basically. So, you know, and you have the security in mind that, you know, that this is how it's going to be versus like, maybe you don't have to worry about it suddenly changing to a permission environment when you have that token. So that's just something to note as a developer. But on that, just to also talk about transports a little bit more, because I love them so much. If you were to create, say, an application that you wanted, your customer base and you wanted to know all your customers, you could do that with transfer hooks with just whitelist or KYC, add them to your transport program and then create your permissioned environment within the permissionless network.
00:26:45.688 - 00:26:54.104, Speaker D: You can have off rants outside via different programs that you can create, but ultimately you can have full control of your token environment.
00:26:55.564 - 00:27:30.900, Speaker C: Yeah, I want to build on top of that because I think this is where the product space gets really fascinating. It's not just one extension. By combining the different ones, you can actually express a whole host of different interesting ideas. So transfer hooks plus confidential transfers. Confidential transfers plus fees. Fees, plus interest bearing extensions. What we can express now are economic or economic models for companies that don't just involve having a subscription or having to stake with them, or have different fee things.
00:27:30.900 - 00:28:13.270, Speaker C: It can be baked into the actual economics of the coin itself. For example, a tokenized gold that has five basis points on every transfer means that they're incentivized to help grow the network and all that sort of stuff. Some complex ones there. You combine that with the ability to, to express very specific capabilities within a thing like a transfer hooks extension, like the ability to do a royalty split. And suddenly your tokens can have contractual enforcements of those royalty payments, which has been a concern for many folks that are building products. And then you compound that with, it's really simple to do things like gasless transactions on Solana. So it's a first party property on top of a transaction.
00:28:13.270 - 00:28:32.294, Speaker C: You don't need to wrap it and have a meta transaction, any of this stuff. Here, you add one extra signature and suddenly people don't have to think about Sol, the token. They can think about just the token, the thing that you are creating and issuing and the digital asset that's going around your network. So it really lets you hone in on a really complex product and be very expressive with it.
00:28:33.594 - 00:29:25.794, Speaker E: Yeah, I think the pithy way to just think about it is stablecoins have found tremendous product market fit, but they still have very basic functionality. So if you want to do something richer, the promise of this is programmable money. But the problem is right now the programmability has to be built separately. And a couple of years ago we were talking to large enterprises and there was a lot of interesting use cases. We were thinking about merchant payments and everything we were talking about had to be built from scratch. I think what this does is, I think it takes a couple of years of learnings of what the needs are and it's incorporated it all into this one token program. So when you mint the asset, all that rich functionality is in there and you have the programmability the promise of programmability embedded in the token itself.
00:29:26.494 - 00:30:12.654, Speaker D: Yeah, and also to note that programmability is just starting to get explored, especially the combinations. When the token extensions went live and everybody started using them just last month, you already started to see some people using in very unique ways, like Noah from labs. He built a token that used the transfoc permanent delegate and metadata extension. And with those extensions he was basically built like a game item that after x amount of transfers it could actually either be burned or it can change metadata each time. That's just one use case with combinations. So we're just starting to see what can be built and what can be programmed in a very easy fashion with these combinations of extensions.
00:30:13.314 - 00:30:53.424, Speaker C: And this puts us, at least it puts developers right in the sweet spot. So before token extensions you had effectively a token factory that those tokens were very basic as folks have mentioned, mint, burn, transfer, delegate freeze, that sort of stuff. On the other hand, you have the Ethereum style standardized interface where anything and everything can be represented in that contract, including rugging you and draining you of all your funds. We're right in the middle where we say hey, you can trust the token program because it has this basic functionality that has been vetted and you can add this custom pieces here and there that allow you to get the best of both worlds.
00:30:55.244 - 00:31:52.106, Speaker B: Yeah, I think the power of token extensions is something folks are just beginning to scratch the surface of here. I think we were talking a few days ago about how you can use this to create a functional vesting contract just using default account state and time based unlocks on changes to tokens. These are things that before would have required their own smart contract implementation. And there's some folks who have built fantastic vesting contracts in the Solana ecosystem, but they don't show up in your wallet because the tokens are locked in a smart contract. By bringing a lot of this programmability down to the token level, it creates entirely new types of user experiences that are just going to make it so developers don't have to do as much work to build really cool and interesting things. I want to go to one piece, Jacob, you were mentioning before, which is the metadata pointer. There's a few pretty interesting token extensions around metadata collections and groupings.
00:31:52.106 - 00:31:56.174, Speaker B: Can you talk us through how those work and how some folks are starting to use them?
00:31:56.514 - 00:32:31.842, Speaker D: Yes, the base layer there is a metadata extension has your very basic metadata that you're used to today. It's things like your name, your logo, your things like that. There's only three fields on it. So you can use that and you can be happy with it. There's also mended data pointer, which you can actually point to basically where you can get that information. Meaning I can build my own program that hosts my own metadata and create an account that does the metadata. And you can have your own types of standards for that metadata within that program.
00:32:31.842 - 00:33:27.116, Speaker D: So what we can see here now is that you can have the birth of new standards very easily using the same extension on tokens, and it will be immediately adopted by wallets, explorers, et cetera. You don't have to do any work on it. So if you wanted to create a new metadata standard, you just can just create your new program, have the metadata pointer point to that program, and then you're good to go on the metadata. Sorry, the group, the grouping extension as well. Those are for basically denoting what is my collection of nfts using the token extensions. So if you have a token built with token extensions and you have a collection nfts, you can just add the token group extension. And that can basically help you to note, okay, this is the token group that my token belongs to, which is basically your collection.
00:33:27.116 - 00:34:00.114, Speaker D: So you can get around a lot of the heavy lift of integrating with other types of stacks and create your own standards from scratch while not having to worry about integrations with wallets, explorers, et cetera. So I haven't yet seen anybody promote a new standard other than, I think, the new standard of metadata. So I'm looking forward to especially game standards and how they get built out later on.
00:34:01.054 - 00:34:56.863, Speaker C: Yeah, I wanted to add a couple of things there. So I think there's three examples that I know of when Libreplex metaplex have all built out fairly robust metadata programs and they all have different capabilities. I think the other thing to think about here is the long tail of use cases where NFTs are a critical part of that product, but they don't look like the NFTs that we see on marketplaces and see in our wallets. I'll give you concrete examples like rwas. Real world assets can be represented with nfts and there's not necessarily a creator on that kind of asset. There may be certain restrictions on things like the things that Austin mentioned around a time lock or maybe what thing that it represents, or that there is some additional programmability or other information that's needed on there. All those are standards that don't look like the JPEG NFTs that we see today.
00:34:56.863 - 00:35:11.643, Speaker C: So I'm really looking forward to seeing folks poke at that, but still make sure that those NFTs are interoperable with other smart contracts and other defi type protocols that take advantage of the base layer NFT being a token itself.
00:35:13.383 - 00:35:55.882, Speaker B: Yeah. So let's talk a little bit about program compatibility. If I am someone considering launching a new token, and I intend this to be a widely used token throughout the Solana ecosystem, maybe I want to build some features in, maybe, I'm not quite sure yet, should I just be using the token extension program to mint a new let's just pick a nice token, a nice new meme coin, or how is the ecosystem adoption work for that? Should I be worried about liquidity and compatibility? Walk us through some of those choices that developers are making now, Jacob, when they think about where they should, what extensions and what feature sets they should be looking at adopting, right?
00:35:55.938 - 00:36:59.884, Speaker D: So for the most part, a lot of the swaps and other exchanges within the ecosystem have already adoption on token extensions. Things like Jupiter already have compatibility with token extensions, but they're for some, like for Openbook does not yet have token extensions and the reason being is that they're very, they're being very cautious on the different extensions that they allow on the exchange. Things like permanent delegate. They probably need to be careful with that type of thing. Whenever you're creating your token, you need to make sure that you have a certain subset of functionality that you add that is already adopted within the ecosystem, especially the defi ecosystem. Things like transfer fees already adopted within the ecosystem for the most part on the extension, things like there's also the metadata good to go. It's mostly like permanent delegate transfrog have yet to be disseminated within the defi ecosystem.
00:36:59.884 - 00:37:51.964, Speaker D: That's also because no one's built a very novel token yet using those extensions, but as soon as they are, I would expect more people to adopt them. On the program side. If you are someone that is running a DeFi program on chain and are interested in adding token extension functionality, if you use anchor, there's just a token interface that you can use that will flip flop between the two and you're good to go. It's actually very easy to add. There's also a full guide that you can find on Solana.com for how to add the token extension functionality to your specific DeFi application. We run through a full how to with swaps, and so you can take that and extend it to whatever your program is.
00:37:52.944 - 00:39:00.676, Speaker C: I do want to add a little bit more on the, on the interop and sort of compatibility front. I think teams like Burn and Fluxbeam and Fluxbot have done a great job sort of shepherding and pioneering a lot of the adoption because it is tough to adopt new technologies and they definitely had to go through and figure out all the rough cases. I think this is going to be interesting because on the basic, the super, super basic part of integrating token extensions is swapping a program id. But the long tail of use cases are going to be harder to accommodate for, especially on an extension by extension basis. Or again, the combination and permutation of those combinations of extensions. I fully expect, or maybe ask folks like DeFi protocols that are attempting to understand this, to create some standards around what kinds of token extensions are valid in a pool. Permanent delegates feels like it's quite dangerous, but it's only used in a case where, I don't know, there's a court case and there's some multi sig that has to withdraw something versus it's being used all the time are very different things.
00:39:00.676 - 00:39:15.744, Speaker C: So how can you standardize? Hey, even though this is a stable coin with the permanent delegate, it's never used. You should still be able to have a swap pool, right? So there's little things like that that need some standardization and specification. So definitely welcome more conversation around that.
00:39:16.084 - 00:40:16.896, Speaker E: Hey, that made me think of one comment I wanted to make, thinking about composability and compatibility. I think one of the things that we preach about the benefits of Solana being an l one is the composability across projects. One way I hope that this can evolve is if you look at some of the real world asset issuers that are treading carefully. So the example I gave is I'm tokenizing bonds or mutual funds, but I want to do it in a very closed environment. So like 100 whitelisted wallets and I want to dip my toe in. And over time I realized that, hey, this works pretty well. Running on this on the blockchain works great, I can broaden that, and eventually, if a real world asset issuer says, hey, I want to make this way more open now that that tokenized bond could be used in deFi, it could be used in the entire ecosystem, it could be used as collateral and margin fire or what have you.
00:40:16.896 - 00:40:44.694, Speaker E: So I guess the macro point here is that it allows an issuer to put in a set of guardrails that makes them feel comfortable kind of testing the waters in a very controlled manner. But I think the end goal is this utopia that we hope for of this fully composable world of tokenized assets that you can use across projects, and that will shine in the beauty of an l one where everything is running on the same standard.
00:40:46.074 - 00:41:25.104, Speaker B: Right, well, we're going to transition now into some questions. There's a whole bunch of questions you all submitted to hall. We're going to see how many we can get through here. I'm going to start off with questions around creation of tokens, management of things like transfer hooks. There's a lot of questions that are some version of can I upgrade my existing SPL token? Can these extensions be used for previously created tokens? Do I have to define everything about my transfer hook at the moment of mint, or can I update that later? Then some questions around can you add extensions as you go in the future? John, maybe you want to start off with this one.
00:41:25.484 - 00:42:08.824, Speaker C: Yeah, this is a great question. Token extensions is a separate program. So semantically you'd need to issue net new assets using that program. And so if you have an old one using the token keg, the old token program, if you want to get this extension functionality, you'd have to do some sort of wrapping or burn and mints type approach, of which there are some examples that exist. And so that's how you would have to issue a net new token. Now once you have designed this new token extensions token, you have one opportunity to figure out exactly what extensions you want. So for example, if you want to have the interest bearing extension, maybe sometime in the future, but maybe not right now, you still need to initialize it.
00:42:08.824 - 00:42:53.092, Speaker C: And even if you set that interest rate to zero, because once that token has been minted and there's been a supply, you cannot modify that set of things. So if you say hey, out of the 13 to 15 different extensions, you say hey, I want eight of these extensions that's locked in as soon as you mint. Now the follow up to that is what do I need to do to make sure that, do I need to figure everything out first? The answer is no. For a thing like a transfer hook extension, you can initialize it, but you don't need to configure it to do anything. You could configure it to effectively null, as long as you retain the transfer hook authority. You can use that authority to update that configuration later on. That's the same for many of the other extensions, the interest one or the transfer fees.
00:42:53.092 - 00:43:29.784, Speaker C: All of these have associated authorities that as long as you retain them, you can make updates to that later. Those authorities can be programs pdas, so you can have programmatic interest rates on a global interest rate token. These are really cool constructs that you can take advantage of down the line. You can always disable them too at the very end if you decided that hey, this extension is not for me and I don't want to give anybody the wrong idea, you can set it to null, throw away the key. So some optionality in terms of configuring your extensions after you've initialized it.
00:43:30.404 - 00:43:46.624, Speaker B: Yeah, those options to close extensions or to decide you don't need to use one after the fact, is that just a process of burning keys or is there actually a formal close authority to say we had permanent delegate authority on this token but we'd like to remove it.
00:43:47.084 - 00:44:15.784, Speaker C: I think you can just null it out. So you would say, hey, I'm going to use the authority that I have to null this out and then basically it's gone. I guess one thing to remember here is we recommend folks that if you think that you're going to want to use an extension, initialize it first, do it now and then figure out something later rather than realize ten months down the road that I needed this thing. You can't put it back on, right.
00:44:16.724 - 00:44:51.974, Speaker B: Next batch of questions are all around metadata, metadata pointers and what you can basically do with this. So how can wallets and other sorts of applications read from different types of metadata? Are there folks building new NFT standards on this? Does metaplex support this? Are we getting compressed NFTs built on the token 2022 tokenextension standard? And what are some of the other use cases for this? Can I attach metadata broadly about any token or is this creating an SFT framework? I'm not sure which one of you wants to take this.
00:44:52.914 - 00:45:25.742, Speaker C: Okay, I can start off with this. So there's two extensions Jacob mentioned earlier, metadata and metadata pointer metadata is super simple. It has name symbol URI. That Uri typically goes to some off chain Json manifest. At the very basic level it's just nice to have everything in the mint account. It also exposes the ability to add key value pairs. So if you wanted very simple programmability, I don't know, maybe uses on a ticket or something like that, you could bake that into the metadata and just store it right there.
00:45:25.742 - 00:46:10.890, Speaker C: That's great and easy. As it relates to metadata pointer metadata pointer says, hey, go tell me where the canonical metadata is for this particular token. It points out to some other program that is designed and deployed. As I mentioned earlier, Metaplex token metadata already supports token extensions. If you wanted to issue some of these capabilities, they have support for some of the extensions, you can have the same interop with Metaplex that you've had before. But what's interesting about this opportunity here is that this is at least one of the first opportunities that we're starting to experiment with the concept of interfaces. Interfaces for those that aren't quite familiar with how this looks like on Solana, which is particularly difficult.
00:46:10.890 - 00:47:02.566, Speaker C: The idea here is that an interface is like, if it looks like a duck, walks like a duck, talks like a duck, it might be a duck, right? But it could also be a swan. Right. A swan that sounds like a duck. And the point here is that we want to make it really simple for indexers, wallets, Dapps RPCs and all that sort of stuff to be able to surface information about tokens in a uniform fashion. So using that interface, what that means is that, hey, if you, for whatever reason, have a requirement that you need to own that entire stack of your metadata and you need to deploy some custom metadata for your own use case, and you can't depend on another team to do that, then you could deploy that as long as it follows that interface. A wallet and an RPC can surface that information in the same exact manner. You can have some interchangeability for different use cases, which allows you to have more choice for different constructs.
00:47:02.566 - 00:47:14.694, Speaker C: For whatever reason, one metadata program is not going to accommodate every single possible use case that digital asset is going to represent. Therefore, it makes sense to make it easy to allow for interoperability.
00:47:15.354 - 00:48:14.524, Speaker D: Yeah. One thing also to note on the, especially the key value pairs that you can get out of the metadata extension is you can extend your metadata quite a bit just using that. For example, we ran a workshop earlier this month and we were able to create game items with just the metadata extension that had like HP of value, things like that. So that you can very quickly build these tokens for your game and they have all this information on chain, and then you can use that on chain, like with interacting with some program that runs your game or something. So it makes it very simple. And that metadata extension, especially the base one has, it'll show up on all explorers, it'll show up on all wallets that have any type of token extension functionality because it's a lookup of a single account. If you're familiar with Solana's account model, it's a lookup of a single account that has all the information you need and you don't have to do multiple lookups.
00:48:14.524 - 00:48:20.624, Speaker D: It's actually even faster for developers to integrate into their different applications today.
00:48:22.864 - 00:48:59.864, Speaker B: So I want to talk a little bit about questions relating to real world asset and other types of token issuance. So, Shiraz, there's a few questions around people who are wanting to issue rwas where they can find more information or get in touch around that. But there's some specific use cases, too, where someone's wondering if you can use the required memo and transfer field. Is that cryptographically signed as part of the transaction? Could you use that as a digital signature, for lack of a better term, on something like a transfer of a deed?
00:49:01.404 - 00:49:13.972, Speaker E: Yeah. And John, you can correct me if I'm wrong. My understanding is the memo, it's just a blob. So I believe it can be anything. So it could be an encrypted payload. I think it's defined. So I think in this case, it's between the.
00:49:13.972 - 00:49:30.900, Speaker E: For the specific use case. So, for example, again, if it was AP and AR and it was a consortium of small businesses that wanted to do this, they could agree on a metadata or a standard for metadata, and it could be encrypted and they could all have the keys. But, John, you can keep me honest here.
00:49:31.092 - 00:49:31.596, Speaker C: That's right.
00:49:31.620 - 00:49:32.252, Speaker B: Yeah.
00:49:32.428 - 00:49:34.624, Speaker C: It's just a blob, so you can put whatever you need in there.
00:49:35.884 - 00:49:37.984, Speaker B: And what's the size limit on that blob?
00:49:39.684 - 00:49:44.900, Speaker C: That's a good question. It's probably somewhat related to the transaction size.
00:49:44.972 - 00:49:48.140, Speaker E: Well, when you encrypt something, it gets. It gets small, so.
00:49:48.332 - 00:49:48.860, Speaker C: Exactly.
00:49:48.892 - 00:49:49.060, Speaker D: Yeah.
00:49:49.092 - 00:49:51.548, Speaker C: So you can hash it and just post the hash for sure.
00:49:51.676 - 00:50:19.756, Speaker E: Yeah. In terms of the RWA. Yeah, I think this is something. You know, we have a colleague of mine is named Nick Dukov. He works very closely with capital markets and institutional finance firms that are interested in leveraging token extensions. It definitely seems like it's one of the emerging popular use cases for this, for a lot of the reasons we talked about. So, yeah, I think there's.
00:50:19.756 - 00:50:33.904, Speaker E: I believe we should be sharing links. I think they're all on our website. But there's a white paper developer docs, so all should be there. And there should be some reference implementations coming out soon as well.
00:50:35.164 - 00:50:52.456, Speaker B: Some. Jacob, one question that someone had on transfer hooks. What is the limits on programmability of something like a transfer hook? Is there a specific, like, is it a microtransaction? Can you run a whole program in it? What are the bounds of what someone can do with a transfer hook?
00:50:52.640 - 00:52:17.422, Speaker D: Yeah, so part of transfer hook is you're pointing to a program that adds the custom functionality of your transfer. So if you're familiar with solnoid development, you're basically pointing where should you CPI? And what if you need added additional accounts to that CPI to do, to do any of the custom functionality you're doing in that program at the base? If you were to just use transfer hooks, you are limited to a certain extent, and this is mostly because of security concerns. For example, if you were to just use just the transfer extension and you were trying to add custom functionality to it, you couldn't, for example, you couldn't just drain the wallet. You don't have your signatures to on your basically when you make the transaction you have signatures allow you to do things and with different accounts, basically write to different accounts. Those are deescalated, demoted so that you can't do them in a transfer hook program. However, you can do some things with transfer hook plus permanent delegate because you can make the terminate delegate a PDA that is off of your transferhook program which would have signature authority. So there's some use cases that you can do with those two extensions put there that basically broaden the horizon of different capabilities you can do but just transfer itself.
00:52:17.422 - 00:52:32.074, Speaker D: You can do things like whitelisting, it's basically like checks on hey, can I do this? No, fail the transaction. Yes, keep going. That's how the base transfer extension works. But if you do combinations, you can do a whole lot more.
00:52:34.584 - 00:53:12.604, Speaker B: Awesome. Well, I think that was all of our list of questions today. We can go through some just housekeeping on token extensions. One of the main ones is solana.com. Token extensions is the place you can find all these different developer resources, a video walkthrough, a bunch of information about how you can actually go ahead and implement these sorts of things. Additionally, if you are inspired by this and want to start using token extensions in open source source products you're building and creating, you can head over to Solana.org grants and we have a short term program for some grants related to token extension integration and development.
00:53:12.604 - 00:53:50.604, Speaker B: These are biased towards your typical thing, the Solana foundation grants. Their bias towards which is open source tooling and work that can benefit all, but especially infrastructure support and other sorts of things that build out new token extension primitives and functionality are things we're really excited to be putting some grant dollars towards helping adopt and make possible. So I think with that, thank you all for joining us today. Thanks to Jacob, Shiraz and John for the nice overview of token extensions. And if folks are looking to find more information on token extensions or follow up with you guys directly, how can they get in touch for me.
00:53:51.064 - 00:53:58.978, Speaker C: Twitter unfortunately. Twitter.com jnwng John for myself also twitter.
00:53:59.026 - 00:54:06.514, Speaker D: You can contact me dmz are open jacob v. Creech at twitter same I.
00:54:06.594 - 00:54:13.414, Speaker E: Believe DM's are open and I'll make sure they are. Shiraz share s h e r a z s h e r e.
00:54:15.194 - 00:54:22.534, Speaker B: Nothing better than spelling out your twitter handle on a podcast. Well, thanks everyone for joining today.
00:54:23.794 - 00:54:24.658, Speaker C: Thank you all.
00:54:24.786 - 00:54:25.154, Speaker D: Thank you.
