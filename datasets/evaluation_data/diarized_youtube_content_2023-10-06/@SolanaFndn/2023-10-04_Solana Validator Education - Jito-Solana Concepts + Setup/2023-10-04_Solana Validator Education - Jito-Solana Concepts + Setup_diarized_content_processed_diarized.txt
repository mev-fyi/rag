00:00:02.880 - 00:00:32.534, Speaker A: Welcome, everyone, to the Solana Validator educational workshop. Today we've got Lucas from Jitto leading a workshop on the Gito Solana concepts and setup. So this will be for people who may know some validator concepts already, but are interested in running a geo client instead of the Solana labs client. So with that, I'll kick it off to Lucas from Jito to take it away. Let me stop my share.
00:00:44.714 - 00:00:45.774, Speaker B: You see this?
00:00:46.514 - 00:00:48.314, Speaker C: Yep, we see it. Cool.
00:00:48.394 - 00:01:05.164, Speaker B: Sounds good. Thanks for having me. Excited to talk about Judo Solana and what we're working on at Cheetah. Thanks for shout out as well today and the decentralization report for the Solana network. That was pretty cool. A surprise.
00:01:06.464 - 00:01:07.128, Speaker C: Yeah.
00:01:07.256 - 00:02:13.254, Speaker B: Jito builds high performance mev infrastructure for Solana. Kind of walk over like, what is Judo Solana? I think some of you here are probably running it. Maybe others have heard of it. So, yeah, excited to dive in. I think it'll be a little bit high level, and then we can kind of dive into the weeds and, like, you know, what is this client actually doing and what are the different pieces involved? So, yeah, with that, one of the co founders and CEO at Jito, my name is Lucas, probably see me on Discord, is Buffalo. And, yeah, like, our team currently have eleven people on our team, backgrounds in mev distributed systems, raised vc funding from, like, multicoin, Delphi, Solana Ventures, Framework Ventures, and yet today, I think there's around 175 validators on the Solana network running the Cheetah Solana client. And I think it's right around 32% of stakeholders as well.
00:02:13.254 - 00:02:49.624, Speaker B: Yeah, kind of go through, like, high level summary. Some of the benefits from running the clients, some of the we'll die, like, somewhat deep into the technical weeds and then go through the onboarding process. It's super easy. Anyone can run. It takes, like, less than five or ten minutes to switch over. So, yeah, we built a juice built a suite of, like, mev products to capture mev for ice. For those that aren't super familiar with mev, MEV stands for maximum extractable value.
00:02:49.624 - 00:03:43.228, Speaker B: Some people call it minor extractable value. It's all kind of this similar concept where as a validator, you are producing blocks, and you are the final arbiter of how those transactions are ordered in a block. And by running special software, you can actually make more money with your block space. So we built a lot of tools and infrastructure to do this. The main piece is Shitto Solana. It's a fork of the Solana Labs clients, and it manages some communications with the relayer and block engine and then also has some special code in it to process bundles. Bundles are basically like a thing of it, like a unit of work for like a high frequency trader.
00:03:43.228 - 00:04:38.066, Speaker B: Essentially, it's a list of transactions that execute sequentially and atomically. And I'll kind of dive into, like, why would someone use a bundle in a bit? And, yeah, so today, currently around $120,000 earned for stakers and validators in the last few months. Yeah, this is super high level. Like, what is judo? Solana, how does the system work? Essentially what happens is there's the Judas Lana validator, which is kind of the main piece here. And when you start up the gito salona validator, you tell it a relayer to connect to. So you provide a URL, and when the validator boots up, it will start, it will connect to the relayer. That relayer and the validator start to heartbeat with each other.
00:04:38.066 - 00:05:22.234, Speaker B: And essentially after, I think it's a minute of heart beating, the validator will tell the network to send the non vote transactions to the relayer. Or the relayer isn't touching voting and consensus messages, it's only touching the non vote transactions. So what happens is the transactions go to the relayer. The relayer, it has a very similar code, essentially the same code that the validator has in the TPU or the transaction processing unit. So it will has a quick server running in there. It has signature verification. It will de duplicate packets and transactions.
00:05:22.234 - 00:06:24.390, Speaker B: And essentially what will happen is it will forward packets that searchers are interested in to the block engine, which is a piece of code that we run. And we'll share that with searchers. Searchers can send their trades back to the block engine. We run some fancy simulation logic in there to simulate, determine which are the most profitable trades, and then we send those profitable trades to the current leader, the judo Solana leader. And yeah, this is a super, like, high level overview of how the block engine works. I'll dive way more into, like, the specifics there, how we do that and kind of get into the nitty gritty. But essentially, we kind of leverage some of the read write account locks and things like that, who kind of take all these bundles that we get and kind of like, segregate them based on the state that they touch.
00:06:24.390 - 00:07:00.574, Speaker B: And then we run a bunch of simulation to figure out which bundles are going to succeed and which ones will fail. And you know, from the ones that succeed, which ones are going to pay the most. And it will forward those bundles to your validator. There's also this. The meth payment kind of happens outside of the normal priority fee inclusion. And so essentially what happens is every validator has a can. Think of it like a little like, MeV Piggy bank.
00:07:00.574 - 00:07:50.658, Speaker B: So every validator creates this, like, MeV Piggy bank every epoch, and all the tips accumulate in there. So, you know, like, we run a validator, Jito one. Jito one has a mev piggy bank. Zen Tetsu's shinobi system has a different Mav piggy bank. Everybody has their own little piggy bank that the tips accumulate into every epoch. And essentially what happens is at the end of the epoch, we run a off chain process that will essentially take a snapshot of every validator in their staker's information, and it keeps that snapshot, the staker information. And then we essentially generate a merkle tree, upload the merkle root on chain, and then claim MeV for every staker.
00:07:50.658 - 00:08:22.480, Speaker B: So this happens that after every epoch, all of the MeV is distributed to the validators and stakers automatically. We run a lot of this process. Right now, this process is permissionless. When you start up your validator, you can tell it. You can tell your validator, like, who is the person that can upload this data? So in theory, anyone can do this. And yeah, there's a lot of validators using Gita. Solana, I'll share the slide with you after Tim, but we have a retool.
00:08:22.480 - 00:08:28.764, Speaker B: I think there's around 175 validators currently. Roughly 32% of network stake.
00:08:30.864 - 00:08:31.288, Speaker C: Cool.
00:08:31.336 - 00:09:06.426, Speaker B: So I'll go through some of the benefits. So, yeah, mev, it's a new revenue stream for validators compared to just running the normal Solana labs clients. I guess you could somewhat say that priority fees are a version of, like, MeV fees. This is slightly different. So, yeah, it's, you know, you don't really have to set up any extra hardware if you don't want to. Running the validators free, permissionless, there's no incremental costs. Mav tips are pretty low right now.
00:09:06.426 - 00:09:48.342, Speaker B: I think there's not a ton of on chain activity to what was going on in 2021. We're obviously extremely bullish. Solana, hopefully, if you are here as well, you are and believe that DeFi is going to do very well in Solana. So we hope to see the DeFi volumes increasing. That will create more arbitrage and immediate opportunities will hopefully result in more fees for validators as well. As I mentioned earlier, there's been around $120,000 paid out to stakers in their validators over the last few months. And there is a adjustable meth commission rate that you can set for your validator.
00:09:48.342 - 00:10:40.454, Speaker B: It's another command line argument. And so you can choose anywhere from zero to 100%, and that's in bits, so you can get pretty granular with the commission that you set. And that's completely separate from the vote commission as well. So you can kind of play with those two variables however you want, independent of each other. We've seen some validators get increase in stake as well from running the client as well. There's pretty cool to see, like validators app and Stakewiz and some other websites showing enabled validators. If you run a explorer for validators and want to show which validators are running the Gito software, you can pull that data from on chain, or we have an API that you can use as well to calculate that.
00:10:40.454 - 00:11:39.572, Speaker B: And, yeah, I think one of the big reasons why we started this is because we had this theory that there would be a lot of spam on Solana. Just if you look at what happened on BSC and Polygon early on, and you kind of seeing it on base with, there's an app on base, if you were following, called Friendtech, and there was a lot of spam of people trying to buy shares early. Essentially, if there's money to be made, people will find the best ways to make it. Sometimes the best way to make money is by spamming the chain. And we kind of had this theory that would happen on Solana. If you look at the data on chain, it's definitely true. The failure rates for arbitrage have been pretty high, right around 96% to 99%, and now it's a little closer to 95% as well.
00:11:39.572 - 00:12:03.164, Speaker B: Essentially, we replace that transaction span with, like, a deterministic ordering mechanism. So if you're trying to capture Mev instead of, like, spamming to land behind something, you can tell the system, hey, I want these transactions xYZ to execute 1st, 2nd, third, and here's how much I'm willing to pay for it, and then we kind of handle the rest for you.
00:12:05.224 - 00:12:06.004, Speaker C: Cool.
00:12:06.544 - 00:13:19.034, Speaker B: So, yeah, I'll dive into the technical details here. Yeah, I'll answer this question. Process that works out what transactions the GDA validators will execute is run by you guys, right? So the transaction flow is essentially, it goes from the relayer. There's this small delay, and essentially what happens is the relayer will send the packet off, the transactions off to our block engine. That small delay is essentially give searchers enough time to simulate and predict what's going to happen and, like, what the correct bundle is to extract the money or the MEV and give SAR system enough time. And then if there, I guess to answer your question, we determine what the bundles are executed are, and then every other vote or every other transaction that's not in the bundle, it just passes from the relayer straight through to the validator. So let me go back a few slides because I think this will help.
00:13:19.034 - 00:13:57.982, Speaker B: So essentially, the transactions hit the relayer. There's a small delay, and then the relayer will automatically forward it to the validator. So it's not. The relayer isn't forwarding every packet to the block engine, and the block engine is forwarding it to the validator. Essentially, the relayer is like, you can think of it as, like the transaction, like Custodian, in the sense that is the one determining what to forward. Now, the bundles, that is something that we determine. And, yeah, to answer Zen Tattoo's question, votes just go straight to the Jito Salona validator.
00:13:57.982 - 00:14:09.478, Speaker B: So the relayer does not have a TPU vote or TPU vote forward port on it. You want to ask your questions in Tatsu?
00:14:09.606 - 00:14:24.878, Speaker D: Yeah, I just want to point out that if judo runs a validator, you have to trust that what he's saying is true, which, of course, we all know. Upstanding team, there's no reason not to trust them. But to be clear, if they're running the relayer, you don't know what transactions.
00:14:24.926 - 00:14:25.872, Speaker B: Would have gone through.
00:14:25.998 - 00:14:54.074, Speaker D: If you run a relayer, you can know. So that's why I think it's best for everyone to run their own relayer if they can. That way, you control the code and can inspect the code and can build the code and can be sure that it's not going to filter out which transactions it's going to let you see and which ones are. So depending on how much you trust, the Jitto team is how much you trust that the answer is accurate, and the relayer really does just forward all transactions through. Just want to make that break.
00:14:54.234 - 00:14:55.146, Speaker C: That's good. Call out.
00:14:55.210 - 00:15:18.654, Speaker B: Um, so, yeah, we run a lot of relayers as kind of a service for the network, but I know Zantesu runs his own. There's a few, maybe like, one or two other validators that run their own. You can run it on the same server as your validator. If I remember correctly, that's what Zentetsu does. But correct me if I'm wrong. So, yeah, it's pretty lightweight process. It's running quick server and sigverify and all that stuff.
00:15:18.654 - 00:15:24.324, Speaker B: I wish I was 18 years old.
00:15:30.664 - 00:15:31.232, Speaker C: Yeah.
00:15:31.328 - 00:15:44.244, Speaker B: Let's dive into the technical details. I think as a validator, you have to be pretty technical. I think for a lot of people, it's potentially a black box. So we can kind of dive more into this.
00:15:45.454 - 00:15:45.806, Speaker C: Yeah.
00:15:45.830 - 00:16:37.636, Speaker B: Like, what does, what is Jito Solana? The main thing in judo, Solana, is this thing called bundle stage. And bundle stage, it's a variation of banking stage. What is banking stage? Banking stage is like the main transaction processing piece of code in the Solana labs validator. So banking stage will, it will receive signature verified transactions. It will prioritize them based on the priority fees that are assigned. There's, I think, banking stage, it's like four or six threads I can't remember off the top of my head, but, you know, there's these, like, queues of packets, and banking stage will essentially try to go through them as fast as possible to execute them. So bundlestage is a variation of that.
00:16:37.636 - 00:17:07.364, Speaker B: It knows how to execute bundles. A bundle is essentially just a list of transactions. They execute all or nothing. Today, there's sequential and atomic. So if you have three transactions and the middle one fails, it will just stop executing the rest of it and kind of revert that state. So the state from the first transaction never gets committed. And this is to ensure that there's, you know, we're not wasting block space and all that.
00:17:07.364 - 00:17:56.894, Speaker B: And then it's atomic or it's sequential as well. So, you know, it'll, it won't execute things out of order. It's atomic in the sense that the entire thing is committed, all or nothing, and then it will not go over. It will not cross slot boundaries as well. So you can basically guarantee that this bundle, like this, these set of transactions can be executed within the same slot. My dog out. And, yeah, most searchers, I mentioned this a little bit earlier, but most searchers on Solana are doing arbitrage, and there's no mempool on Solana like prejudice.
00:17:56.894 - 00:19:09.544, Speaker B: So essentially what happens is, like, I send a trade, I make a trade on, like, orca or some other, like, it could be any amm. And let's say my trade goes through, and then it leaves a price imbalance between the exchange I traded on and everything else on Solana. Now there's an arbitrage opportunity. And what happens is someone sitting right next to that server, maybe they see that state first they fire off one or two transactions, someone else a little farther away or with slower code fires off one or two transactions, you have all these searchers that just fire off based on what they see at that time. And that's how we end up with a lot of the arbitrage spam on Solana. So what happens with our system and the block engine and the relayer and all this stuff is we'll send those transactions to searchers and they essentially have a few hundred milliseconds to figure out how they want to order these transactions. So in the case of Jito, what happens is I would send that trade.
00:19:09.544 - 00:19:47.044, Speaker B: A searcher would see it, they could simulate it and be like, oh, this is going to create an arbitrage. And now what happens is they can submit a bundle where it's my trade first and then their arbitrage transaction second, and that would be a bundle. So that's a single, like, unit of execution. And then that validator essentially process my trade, and then the arbitrage trade immediately after. And now it's very efficient. It's capturing the mev essentially like one tick apart in the proof of history hash. So it's capturing as fast as possible.
00:19:47.044 - 00:20:39.534, Speaker B: That's kind of like one use case for bundles where you have multiple transactions from different signers. Another interesting use case for bundles is there's a 1232 byte max limit in the quick packets now. And so we've gotten some interest from people wanting to improve the user experience for dapps and things like that, so they can send bundles and have them execute atomically. There's a lot of filtering stuff that happens in bundle stage as well. The block space will be pre allocated for a bundle, so we can ensure that we'll have enough compute ahead of time so that we don't get to the last transaction. And it's like, oh, I ran out blockspace. I need to, like, roll the state back.
00:20:39.534 - 00:21:16.534, Speaker B: And then there's also some, like, tip account stuff that I mentioned earlier. Essentially, the bundle stage will kind of manage that for you as well. And there's a bunch of other stuff in there, codes open source, so you can read through it and let us know if you have any questions. Two other things in there, relay stage and block engine stage. Essentially, they, they're just right now we send the, the bundles and packets over a GRPC connection. So that's kind of just like managing connections to the relayers and block engines. There's a lot of heartbeats and fallback modes.
00:21:16.534 - 00:22:13.684, Speaker B: So, for instance, if the relayer goes down and the validator misses a heartbeat after 1.5 seconds, it will actually disconnect from the relayer and tell the network to start sending it transactions instead of the relayer. And then it will try to, like, reestablish connection and kind of do that handshake and all that, some other, like, miscellaneous changes. We had a, like, bulk proof of history writing. Essentially, this guarantees that if there's a bundle with, if there's a bundle that contains conflicting transactions, we kind of have to, like, execute stuff and cache the state, and we don't end up in a situation where we, like, write some transactions in the bundle to proof of history, and then we realize we're at the end of the slot. So added this, like, it's kind of like a bulk write through proof of history. So you can write a bunch of things one hash apart.
00:22:13.684 - 00:23:07.174, Speaker B: There's some, like, bundle account locking management, and, yeah, I mean, a lot of this is going on behind the scenes. There's, I think there's around five or six command line arguments that you can add to the Judo salon validator to get it running. And then I guess one other thing that's important to mention is there's no, like, Judas alone. It doesn't touch replay, it doesn't touch consensus, and there's no, like, voting changes or Zantetsu's question earlier, like, the relayer doesn't touch votes. Votes still go straight to the validator. So. Yeah, and then someone asks if a bundle is a bundle all or nothing? Or can people submit partial bundles, which then get built into a bigger non conflicting set? So right now, the way it's currently implemented is that the entire bundle must be all or nothing.
00:23:07.174 - 00:23:30.794, Speaker B: But that certainly, like, a limited use case compared to if you want to, if you're okay with some transactions failing. So that is something we're certainly exploring. Maybe you could add a bit, or maybe there's some bits you can add to every transaction in the bundle where it's like, oh, this is okay if it fails and whatnot.
00:23:36.014 - 00:23:36.794, Speaker C: Cool.
00:23:37.334 - 00:24:11.806, Speaker B: All right, so I'll dive into the relay real quick. Keep the questions coming, by the way. So, yeah, the relayers, it's essentially a TPU equivalent as like, a separate service. It's all written in rust. It's using a lot of the Solana Labs libraries that's using the quick server, the same quick server, the same signature verification stage and all that. It does not touch any of the votes. So votes will continue to go straight to your validator.
00:24:11.806 - 00:25:07.842, Speaker B: So, like, in the, like, very extreme case where, like, something incredibly bad happens and, like, the relayers just like totally screw up. It will not touch the votes, and hopefully the, like, other layers of redundancy we have will affect the problem, but they won't touch votes. As I mentioned, you can run on the same or separate server. It's very low compute compared to the rest of the validator. That's like executing transactions, basically just managing quick connections, running signature verification. And then it also does like the packet deduplication, as I mentioned earlier, it will forward packets to the block engine for searchers, but it also is kind of the custodian for that packet. After what's currently a 200 millisecond delay, it will forward those packets to the validator.
00:25:07.842 - 00:25:43.884, Speaker B: So I think this is pretty important as well, and goes back to what Zantetsu mentioned. Like, you should run your own relayer if you can, and like the block engine cannot censor packets that are going to it. The relayer is kind of the owner of that packet. So if you don't trust us or you want to run your own relay, or you want to customize it or something, you can run your own. And yeah, it's also kind of like this. The relayer is also kind of this router too. So it will forward packets to the current index end leaders.
00:25:43.884 - 00:26:33.778, Speaker B: It relies on the, when you start the relayer up, you can pass RPC servers and websocket servers, and it uses that to keep track of time, where time is essentially like, what is the current slot? And it will route it to the right destination. It will support, can support multiple RPC servers. So I think right now in our relayers, we use around ten RPC servers, so we're essentially load balancing and receiving time updates from all these different RPC servers. So if we need to update an RPC server or something, we don't bring down the relayers. And then something else I was going to mention there. Oh, yeah. And then there's, there's some health checks involved too.
00:26:33.778 - 00:27:22.286, Speaker B: So, you know, it's acting as a router for keeping track of time and routing packets. There are health checks. So if it detects that all of the RPCs are unhealthy, then the relayer will go into this like, unhealthy state where it will disconnect every validator from it. Validator will see that got disconnected, tell the network to send transactions back to itself. Well, so I'll dive into the block engine. The block engine is something that we operate. It's closed source service, pretty similar to, if you guys are familiar with flashbots and like proposer builder separation.
00:27:22.286 - 00:28:12.442, Speaker B: There's an Ethereum network currently around like 90% of the network runs the software called PBS, stands for proposal proposer builder separation, where you have these like block builders that are essentially running code to build blocks. On the Ethereum network, our blockchain engine is like similar ish to that. There's some differences. I don't think they matter enough to get on this call to go around this call. Essentially the goal of the block engine is to connect validators and searchers and maximize the tips for validators for like a set of searcher bundles. So essentially the, you know, the block engine or the relay or forward packets to the block engine. The block engine, every searcher has their own subscription of what they're interested in.
00:28:12.442 - 00:28:53.950, Speaker B: So some searchers, they only run liquidations, so they are only subscribing to protocols that have liquidations. Some are just running arbitrage. So maybe they subscribe to all the dexs and amms and things like that. And essentially a block engine will filter that out, make sure that those packets are routed to the right place. Searchers can submit bundles back to the block engine. We actually have a, we have a, like a custom fork of the validator client that we run a GRPC plugin in. It's not geyser, but it has access to like bank forks and proof of history and all that.
00:28:53.950 - 00:29:45.376, Speaker B: So we can, we have a pretty good understanding of like what's going on with the network and run like pretty custom simulation code in there so we can, researchers on the call are interested. One instance is like current simulate transaction will simulate on the previous frozen block, but inside the validator, you actually have the block that's currently being replayed. So we simulate on top of that, instead of the last one, we have shred stream running. Basically every validator that runs Gina Solana is recommended to send us shreds so we get access to the newest state as fast as possible. And. Yeah, so all the RPC servers in there as well. And then let's see.
00:29:45.376 - 00:30:42.284, Speaker B: Yeah, it's globally distributed set of servers operated by us. We have Amsterdam, Frankfurt, Tokyo, New York, and then, yes, relatively easy to spin up new ones, given the cost requirements for running an RPC. We're currently at four, but we can spin up new ones pretty fast. And then, yeah, we're currently like adding new features to it. One we added recently was you can actually share bundles and packets across region. So essentially this lets like, if you're a searcher, if you're like a trader in Amsterdam, you can receive packets from the Frank block engine and you can be like still pretty competitive with the MEV happening on there.
00:30:47.424 - 00:30:48.016, Speaker C: Cool.
00:30:48.120 - 00:31:21.670, Speaker B: So yeah, happy to answer any questions. Feel free to leave them in the chat. Brian or myself can answer, I guess. How do you actually get started running? It takes less than five or ten minutes. Code is open source. There's no contracts or pre authorization needed for running the validator. Essentially what happens is there is authentication on the block engine side and the relayer side for connecting to them.
00:31:21.670 - 00:31:34.554, Speaker B: But essentially we can look at the leader schedule and do kind of this challenge response thing where essentially we authenticate validators on a leader schedule. So we're only letting people on the leader schedule connect to receive bundles.
00:31:35.894 - 00:31:36.526, Speaker C: Yeah.
00:31:36.630 - 00:32:05.674, Speaker B: Takes less than five or ten minutes. You basically we don't have any pre built binaries yet, but it's pretty easy. If you're familiar with git and the command line and basically clone our repo, make sure you're checked out on the right version. Run cargo install all or cargo b release and it will build it roughly the same time as the salon allows. Out ears. We're always pretty active in Discord. We have our own discord as well.
00:32:05.674 - 00:32:52.414, Speaker B: So if you have any cheetah specific questions, feel free to stop by there. We're happy to help. And then there's also 175 validators that are in the Discord. Well not all of them are in the Discord, but there's a lot of validators that can help you guys get set up. We have a setup guide, git book and yeah, as I mentioned like software must be built from source, don't have a built release yet. And the only other thing would be there's a few new parameters on the command line. It's like if you are running a validator, you want to specify the relayer to connect to that's closest to you, block engine that's closest to you.
00:32:52.414 - 00:33:04.954, Speaker B: All these URL's are available on our website. You can set the commission for your mav and there's a few other parameters as well, but it's pretty easy to switch over.
00:33:08.074 - 00:33:08.618, Speaker C: Cool.
00:33:08.706 - 00:33:56.114, Speaker B: And then yeah, I'll share this doc with Tim afterwards. But we have a git book and then judo website and discord and all that. See I'll let how many times do new releases run behind the salon of binaries? We typically try to get them out pretty fast, within a few days I would say there's definitely been a few times that we've slept or it's more than like three or four days, but we typically try to get them out within a few days. And certainly if there's like a delegation, try to be compatible with the delegation program minimum requirement as well.
00:34:05.474 - 00:34:05.946, Speaker C: Cool.
00:34:06.010 - 00:34:21.294, Speaker B: So that's all I have today. Is there any technical or any other questions related to Vito Solana or Mev or the relayer? Anything Solana validator related?
00:34:31.654 - 00:34:32.394, Speaker C: Cool.
00:34:32.814 - 00:34:34.994, Speaker B: I guess. Zentetsu, you wanted to go?
00:34:35.574 - 00:35:02.233, Speaker D: Just curious what your thoughts are on any changes that the Solana based protocol may make to transaction fees, priority fees, and how you see that impacting ditto. As a concept, is it always going to be applicable even if there are changes to how the base fee mechanism works, to allow some aspects of these things to be handled by the base protocol? Or do you think that there could eventually become a time when the base protocol kind of does everything needed?
00:35:02.973 - 00:36:06.084, Speaker B: Um, I think they're like, deterministic, I think, like, unless the protocol adds bundles, which I haven't heard of anything yet, I think a lot, like, most of this, for, like, this deterministic ordering of multiple transactions is, like, super valuable, and I think it's somewhat separate from the base and priority fees that are happening on the network. I guess maybe one impact would be, could certainly change our calculations on the backend where we have to account. If there's dynamic base fees and priority fees, then it might change the calculation on the backend for like, how much does this validator make? But other than that, I don't think it's separate. Max, gonna ask your question?
00:36:06.624 - 00:36:06.976, Speaker C: Yeah.
00:36:07.000 - 00:36:18.494, Speaker E: Hey, Lucas, thanks for the presentation. Really thorough. I'm just curious, what's your business model? Either now or in the future, are you gonna take fees on the relayer? What are your thoughts there?
00:36:19.154 - 00:36:48.392, Speaker B: Yeah, so that's a good question. Right now, we take 5% of Mev tips. So every time there's a. On a validator's, like, first leader slot, they will essentially rotate the tips out. And as a part of that, the block builder sets a fee. We're currently the only block builder, so we take 5% fee and. Yeah, I mean, that's the current business model.
00:36:48.392 - 00:37:02.284, Speaker B: Obviously, the MEV isn't super high right now, so we're not like, making a killing. So still trying to figure out other, like, business models that are appropriate but not too extractive.
00:37:02.824 - 00:37:16.244, Speaker E: Yeah, I got you. If I can follow up real quick, have you run any kind of numbers on as defi activity increases, as trading increases, as volume increases, what will the increased APy look like for meV?
00:37:18.064 - 00:38:13.374, Speaker B: We have. It's been a while since I looked at that, I think what we found is with the current volume compared to Ethereum, I guess one way of thinking about the MEV fees as a validator is like a function of defi volume. And, you know, Ethereum is definitely a very mature mav ecosystem with PBS, but there's a lot of inefficiencies in the protocols. You know, like the XY equals k curve, they don't have order books, so it's not as efficient. So I think if you look at the dollar of MeV per dollar of volume on Ethereum, I think Solana would be slightly lower. But as far as, like, the ratio, um, I can't remember that off the top of my head. Okay, no problem.
00:38:13.414 - 00:38:15.474, Speaker C: Thanks. Yep.
00:38:21.574 - 00:38:22.714, Speaker B: Uh, yeah, Tim.
00:38:24.454 - 00:38:34.274, Speaker A: Uh, this might be a little too early, but I'm wondering if you've thought at all about Cheeto on fire dancer. What's like, the plan there, if you look into it much?
00:38:34.604 - 00:39:36.640, Speaker B: Yeah, um, we've definitely talked a lot about it internally. I think, um, you probably know better about the progress there. It looks like they are, um, Franken dancer is like almost ready, or maybe ready now. Uh, don't quote me on that. Uh, if any, like, news articles are listening or anything, uh, it's just from like skimming through the GitHub repo, it looks like, you know, they're getting close. So I think, I think it depends, you know, how, what are people's appetite for rolling it out on the network? I think, you know, everything comes down to incentives and economics. So, like, is there enough incentive for validators to run frank and dancers or our validators going to wait for fire dancer? I think in the case of Franken dancer, we could probably get that running pretty fast.
00:39:36.640 - 00:39:57.094, Speaker B: As far as fire dancer goes, that will definitely be way more involved as they are going pretty crazy with the c code. So definitely would like to add bundles in there. I think it just depends on, like, how they're doing in progress.
00:39:58.594 - 00:39:59.734, Speaker C: Yeah, makes sense.
00:40:05.994 - 00:40:28.374, Speaker B: There's a question on how much time does it take to receive delegation from Jito. If you can stop our discord and ask, that would be good. Can coordinate there and then. Yeah, the geo stake pool stakes. Two validators running the Cheetos Solana client, so. And then there's a minimum version requirement as well.
00:40:34.634 - 00:40:35.322, Speaker C: Cool.
00:40:35.458 - 00:40:36.174, Speaker B: Max.
00:40:36.874 - 00:40:37.186, Speaker C: Yeah.
00:40:37.210 - 00:40:46.258, Speaker E: Just on the stake pool, are you just delegating all the stake in there evenly to every validator as long as they are running the right version, or are you doing any performance monitoring or.
00:40:46.266 - 00:41:42.924, Speaker B: Anything like that right now? It's all equal. So to there's, if you guys go on Solana Compass, there's a stake pool dashboard, and then you can click on the Cheeto stake pool. And all of the delegations are currently equal. We are working on some, like, interesting performance stuff, and I don't want to say too much, but essentially moving performance monitoring on chain for every validator. So we've been running this for around 15 epochs, and we can see a lot of detailed performance metrics around validators on chain. And from there, you know, you can potentially handle stake pool delegation and all the algorithmic stuff on chain, but should have more to share on that soon.
00:41:43.084 - 00:42:28.400, Speaker F: And I guess, just to be clear to your question, max, and for anyone listening, just because a validator runs Jito Solana does not mean they will get a delegation from the Jito soul stake pool. And so there's, you know, right now around 175 validators running Jito Solana. There's around 50, 55 validators in the Jito Soul stake pool delegation. Each of those have about 45,000 Seoul. Um, and the reason for that is that Jito Soul is really designed to promote the best interest of the network as well as stakers. And so, for instance, there's no super minority validators in the Jito Soul pool. I'm sure a few of you on this call are frustrated by that, but I mean, it's really, you know, helping to promote the decentralization on the network.
00:42:28.400 - 00:43:13.524, Speaker F: And then also, you know, validators that have either poor performance from a delinquency or other perspective or a commission that is on the high end, then those also are typically the bar for them to get included in the stake pool is quite high just because, again, it's meant to be a curated group of the best validators on a performance and decentralization perspective for the network. And so I think most of others on this call probably are very involved and high performing, but just want to level set expectations that if you switch over to judo, Solana, you will not get an automatic delegation of stake from the stake pool, but you will certainly be considered. And if you're high performing, then you will, then your odds are strong of getting that over time.
00:43:14.584 - 00:43:15.104, Speaker C: Got you.
00:43:15.144 - 00:43:15.764, Speaker B: Thanks.
00:43:23.304 - 00:43:23.680, Speaker C: Yes.
00:43:23.712 - 00:43:43.132, Speaker B: In Tetsu wrote about the, um, not including the super minority piece. Definitely happen to. Happy to talk about that because, um, it's definitely something we talk about a lot internally as well. Um, yeah, I mean, I have a different opinion on it.
00:43:43.268 - 00:44:23.056, Speaker D: I don't want to that, but, you know, obviously it's your decision. It's your pool. You can decide what, how it best serves your interest but you know, not incentivizing people that you, you need stake, right? Like you need stake to make you need stake behind what your validator is running. So you should be encouraging all the stake that could potentially be running your validator but the question of whether or not you really need to is different. Like you may be very savvily deciding the best way to distribute your stake so that it has the greatest impact on increasing usage of your pool of your validator software. And quite frankly I'm probably going to use it either way. So from your perspective you probably don't need to stake me.
00:44:23.056 - 00:44:31.784, Speaker D: So yeah it's. But I don't like the idea of phrasing it in terms of like the best interest of the network. It's really the best interest of Jito, you know, and their use of their stake.
00:44:31.864 - 00:44:32.884, Speaker B: So. Sorry.
00:44:40.584 - 00:45:07.406, Speaker A: Looks like we've run out of questions. So I want to say thank you to Lucas and the geo team, especially big thank you for me because they put this together on short notice. So appreciate the effort and thank you all. This is probably the last educational workshop for the year. We might do one more in November ish timeframe but I will let you know at the, when it gets closer to that time. Yeah, thanks everybody and I'll see you.
00:45:07.470 - 00:45:07.774, Speaker C: See you soon.
