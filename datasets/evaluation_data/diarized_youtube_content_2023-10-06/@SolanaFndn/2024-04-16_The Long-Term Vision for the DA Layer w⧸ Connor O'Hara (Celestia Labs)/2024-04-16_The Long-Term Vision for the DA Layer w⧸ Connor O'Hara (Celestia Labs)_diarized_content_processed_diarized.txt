00:00:04.640 - 00:00:07.174, Speaker A: Connor Austin, welcome to Validated.
00:00:07.294 - 00:00:08.526, Speaker B: Thank you. Glad to be here.
00:00:08.630 - 00:00:31.992, Speaker A: Yeah. So I'm excited to have you here. This has been, I think, a long time coming. There's been a lot of stuff. We've been going back and forth on. On Twitter for years. You and Toli have been going back and forth on Twitter for years, and I think you are in that class of one of the people who is a constant, optimistic critic of the Solana ecosystem in a way that annoys some people and a lot of the engineers.
00:00:31.992 - 00:00:41.696, Speaker A: A lot of people like me, find this deeply appreciative because these systems are nowhere near done. And so it's a process of getting better every day. So I'm excited to have you here today.
00:00:41.880 - 00:00:50.696, Speaker B: Oh, yeah. Thanks so much. And I really appreciate that characterization. Warms my heart.
00:00:50.880 - 00:01:04.714, Speaker A: Excellent. Well, we got a ton of stuff to get to today. I want to kind of start off with a little bit of your interest in blockchain, how you kind of got started in it, and what keeps you interested in working in this space and the technology.
00:01:05.174 - 00:01:34.054, Speaker B: Yeah, so I really. I'm a big cryptocurrency and blockchain enthusiast, and I have been since. Since the only way to use bitcoin was running bitcoin core with the Windows GUI. And the only way to use bitcoin was to run this app, which is a full node in the background and a very crappy, I guess, like a c sharp.net GuI or whatever. I don't know, it looks bad. And it was ugly.
00:01:34.054 - 00:01:51.242, Speaker B: And I got into it because I was a high schooler who was doing web development and making crappy little games and the ability to add a monetary component to my games while being too young to have a bank account. I actually used bitcoin before I had a debit card.
00:01:51.418 - 00:01:52.290, Speaker A: I love that.
00:01:52.402 - 00:02:46.912, Speaker B: And got into how it works a little bit because I knew about hash functions and signatures because of trying to roll my own authentication for my little toy web backends that I was making as a 14 year old. It made sense. I didn't really know how ECDSA works, like, but, like, I could kind of vibes based understanding of how bitcoin worked, and then fast forward like five, six, seven years later. It actually became something you could do for a career, which was awesome. And so I was like, holy crap, I can actually get a full time job learning about and working on this stuff. No brainer. So my first full time job in the cryptocurrency space was 2019, and I've been in and out, but I've been full time for almost three years now.
00:02:47.048 - 00:03:18.834, Speaker A: Yeah. So that original journey from playing around with bitcoin to the work you're doing today at Celestia and other places is a pretty massive change. The technology stack is completely different. The paradigm of how we use this stuff is completely different. And the vision of what these things are has also changed a lot since those early days. What part of the larger, both bitcoin and crypto culture do you feel like youve moved with and youve sort of grown with and what have you grown further away from?
00:03:18.914 - 00:03:54.414, Speaker B: Preston? Gotcha. Yeah. So I still think that bitcoin and just currency and payments and money is the main use case. Its the one use case that im really sure about. There are a lot of other things that people try to use it for these days or are interested in trying to use it for these days. Nfts gaming and all that social I'm a little bit skeptical. To me, these things are a bit unproven and so I'm excited enough about what is proven to commit to cryptocurrency just on the things that bitcoin can do.
00:03:54.414 - 00:05:21.492, Speaker B: All my interest in blockchain technology as it's been developing has been in the interest of improvements to bitcoin. For example, I am interested in DEFi or programmability and the DEFi that has emerged from programmability because you have ways of improving upon bitcoin. You can have decentralized stablecoins, which is a more useful denomination for your decentralized currency than some volatile BTC, which is probably not the best thing to actually pay people with if you live in a country where your currency is a lot more stable than that. So I love the idea that you can have more useful denominations than these random coins that we made out of thin air. And scaling tech is very interesting to me because bitcoin on its own does not scale. And this has been something that we've been talking about since the earliest days of bitcoin was how are we going to scale this thing? And then the other thing that I'm most excited about is innovations doing in privacy. Most interested in the shielded pool based privacy approach used by Zcash, Tornado Cache, I guess lite protocol, because we were on the Solana podcast, Penumbra, and I am really into that, really passionate about privacy and follow that space very closely.
00:05:21.638 - 00:05:23.804, Speaker A: Were you part of the block wars?
00:05:24.824 - 00:05:58.314, Speaker B: I was, yeah. So I was a sophomore in college. While that was going on, I didn't follow it too closely, but I definitely remember like all the arguing on the forums, all the arguing at the crypto meetups that were going on in New York at that time. And eventually the most people's takeaway from it was, we're getting a bitcoin cash airdrop if we hold BTC. And that was kind of like. I feel like that was the middle left curve view of the block size wars. Yeah.
00:05:59.014 - 00:06:04.394, Speaker A: The reason I ask is because bitcoin not scaling was a choice.
00:06:05.734 - 00:06:07.614, Speaker B: Oh, yeah. Because they could have raised the block size.
00:06:07.694 - 00:06:34.510, Speaker A: Yeah. There's this sort of view that some people have where it's like bitcoin is ordained by God and it is not controlled by man. And of course we know this is a software package that a certain quorum agrees to run. And there's nothing inherent about that software package that means changes cannot be introduced. There's just a very strong cultural aversion to change, which, quite frankly, is why bitcoin is still valuable today in large part.
00:06:34.542 - 00:06:34.686, Speaker B: Right.
00:06:34.710 - 00:06:54.494, Speaker A: There's a lot of good reasons this exists, but we do have to accept that this is a norm, this is not a law of the universe. And so I'm kind of curious, as someone who is really like bitcoin brought you in and in some ways keeps you in the space, when you think about scaling, what does that actually mean to you in the context of bitcoin?
00:06:55.714 - 00:07:25.994, Speaker B: Well, as opposed as everyone was to raising the block size, then it's worth mentioning that with the taproot upgrade, the block size effectively got raised. Although it's like, maybe you could argue that because it's a soft fork, it's backward compatible and so you could still be running a 2011 version of bitcoin that hasn't been updated and it would still work. I guess. I think that's how they do things. I'm not completely sure, but yeah. So I don't know. One way to talk about scaling is just to say just throughput of the chain is scaling.
00:07:25.994 - 00:08:10.638, Speaker B: I'm pretty into the meme where we say that scaling in the blockchain context is throughput divided by cost. To verify I said meme because it's contentious, but I'm more interested in scaling that way. I'm more interested in building scaling tech that preserves a low verification cost. Because I think the opposition to raising the block size due to concerns about raising the cost to use the chain trustlessly come from a real thing. You could say that you maybe disagree, you might think that's a bunch of b's, but I think there is like something of value would be lost if we made it too difficult to use the chains trustlessly.
00:08:10.726 - 00:09:15.754, Speaker A: Yeah. You know, it's interesting because like, I think some folks might be wondering why is someone from Solana foundation and someone who works on celestia spending so much time talking about bitcoin. But I think there is sort of a maybe an unspoken paradigm in a lot of people's minds, and you see it less in the Ethereum community because there's more of a rift there with bitcoin, maybe. But that on one side of the spectrum you have timeless, stateless money, and that is bitcoin. And then on the other side you have execution environments and that you can still have your state resistant, nuclear war resistant bitcoin, but that the execution scaling environment for that may well be something like Solana. It's a fast execution environment to do things with wrapped bitcoin or other types of assets and build programmability sort of as a, as an execution layer. Um, even if at the end of the day what you want to do is keep the majority of your value in an asset like bitcoin, or in this case expressly bitcoin.
00:09:15.754 - 00:09:41.424, Speaker A: Um, and, and that's always been an interesting, um, way to look at it. And sort of ethereum came up and said, we want to do both. We want to do the ultrasound money meme and we want to do the infinite scaling meme. And that we can provide that in what used to be one software package and now is many, many, many different software packages. But I'm curious if that is similar or different from how you tend to look at the world.
00:09:42.564 - 00:09:58.744, Speaker B: Yeah, that's interesting. Yeah. I mean, the BTC asset itself being this thing that no one can ever mess with the monetary policy and change, and then it's impossible to build a trustless bridge across two disconnected blockchains. But let's say you could.
00:09:59.684 - 00:10:02.590, Speaker A: Lots of people say you can if they're disconnected.
00:10:02.622 - 00:10:33.544, Speaker B: No, if they share security in some way, then yeah, it's technically possible. But then, yeah. What about Ethereum? Yeah, Ethereum. I guess bitcoin was so opposed to raising the block size because they not so much about wanting to control the cost of running a node or keeping it trust minimized. I think it was mainly about just, we don't want to change it. We don't want to touch the parameters. We want to keep it ossified because it was ordained by God.
00:10:33.544 - 00:10:55.824, Speaker B: Ethereum, their reasoning for wanting to keep it small, because they do change it. They upgrade the chain regularly. So it's not about freezing the block size to what Vitalik said it to in 2014, it's, they have, like, kind of a different reason for it. And also, if you talk to different Ethereum people, you may hear different explanations for why they care about this.
00:10:55.904 - 00:10:56.520, Speaker A: Yeah.
00:10:56.672 - 00:11:13.152, Speaker B: And so I would say, like, when I first started having all these conversations with Toli on Twitter, while I was working full time in the Solana ecosystem, I was asking these questions because I was trying to understand why the Ethereum side cares about this.
00:11:13.248 - 00:11:13.924, Speaker A: Yeah.
00:11:14.464 - 00:11:38.886, Speaker B: And I talked to a lot of ETH people about it, and I heard a lot of different answers. And I think the part of it that is true and that I do sympathize with is just we don't want it to be too difficult and expensive to use the chain trustlessly. I now disagree that you, I don't think you need a full node to use the chain trustlessly. That's why now I focus on building light clients.
00:11:38.990 - 00:11:42.326, Speaker A: I'd say that would be hard if that was your thought, given your current work.
00:11:42.390 - 00:12:17.040, Speaker B: Yeah, yeah, yeah. Our celestial nodes are quite big, and we want them to be huge. So, but then we, we compensate for that by making good lite clients that are nearly as good as full nodes. This is my ultimate conclusion from all those conversations, is I don't care about the cost to run a full node. Some people do. And I could summarize why. For example, Tobrel and a lot of other Ethereum people still want the cost of a full node to be low, even though they agree with some of the lite client stuff that I agree with.
00:12:17.040 - 00:12:45.228, Speaker B: But my personal takeaway is you have to raise the cost of hardware, you have to use bigger machines and more bandwidth to scale. That is inescapable. But we're crypto people, we're blockchain people. Part of the purpose of a cryptocurrency is that there's less trust than other, more centralized things. And so let's build the tech that lets us scale the chains while preserving this valuable trust minimization aspect.
00:12:45.396 - 00:14:07.142, Speaker A: Yeah, this has always been one of the places that I think I stumble sometimes in this, which is the idea that the bitcoiners were right, that proof of work is more resistant than proof of stake networks to all sorts of problems, whether it's outages, whether it's stake going offline. Pretty famously, bitcoin can lose 80% of its hash power, and it just gets very, very, very slow for a few days. But it doesn't actually, quote unquote, go offline. Whereas if 80% of any proof of stake network goes offline, it all crashes. And that is a system that has to be built that way. And I would say the trade offs of proof of stake have very much shown themselves to be worthwhile, especially in an execution environment. But you get down a place eventually where if you say, well, like what you're saying, hey, actually the node requirements don't, I'm going to channel my David Hoffman right now, which would be if you get to a place where the node requirements are more than most people can run, it's just two cycles of employees away from saying, well, let's just run a ten person guardian network and a proof of authority network.
00:14:07.142 - 00:14:47.714, Speaker A: And as long as everyone can validate the like clients, it's actually no big deal. And you get to a place eventually, which is we've basically built centralized systems with a little bit more verification, and we've reduced the amount of trust. But in a situation where something catastrophic happens, the light clients can detect the fault, but they can't actually do anything to intervene with the fault. How do you think about that sort of a situation? And the reason I'm asking you this question is because of the bitcoin history, because bitcoin has been for years, if there's a problem, people can fork it and fix it. And that's not necessarily the case if you have incredibly heavy nodes.
00:14:48.374 - 00:15:10.986, Speaker B: Interesting, interesting. So I mean, there isn't a trade off between node size and number of participants in consensus. And I think Solana is the ultimate example of this. I believe you have 3000 consensus participants in your proof of stake quorum.
00:15:11.090 - 00:15:12.378, Speaker A: It's about 2000 now.
00:15:12.426 - 00:15:52.150, Speaker B: 2000, okay. And 3000, the hardware is still big. So I don't think that like big hardware on block producers necessarily translates to a smaller quorum or even less nodes, although I mean, you may be gesturing towards ETH l two s, which are small quorums and easily verifiable, but like small quorums if even greater than one. But I don't know, I'm a proof of stake. Maxi, this is really. Oh yeah, big time, yeah. I think that proof of work is basically a complete relic of the past, completely obsolete, the one like.
00:15:52.150 - 00:16:01.978, Speaker B: So you said that proof of stake, if 80% of the stake goes offline, the chain halts. You can build proof of stake without that. You can have liveness favoring proof of stake.
00:16:02.106 - 00:16:04.934, Speaker A: Yes, you can have, but it has no finality then.
00:16:05.274 - 00:16:29.024, Speaker B: So you can kind of do both, you can kind of get the best of both worlds. So like you can have a liveness favoring proof of stake and then a finality gadget for that. And this is how Ethereum's gasper works. They have, like, way less than 50. If. If less than, or, sorry, if more than 50% of state goes offline, blocks will still be produced. I think it may be.
00:16:29.024 - 00:16:41.468, Speaker B: I'm not completely sure about this, but I think it might even be like, almost all the nodes could go offline, and then just a few surviving nodes could continue to produce blocks. But finality is lost. And what that means is reorgs can happen.
00:16:41.556 - 00:16:42.224, Speaker A: Yeah.
00:16:43.804 - 00:17:04.954, Speaker B: If finality on Ethereum is lost and the chain progresses without finality, after a certain amount of time, each block will start to slash the people who stop voting. And then after a certain number of reorgable blocks on the liveness gadget, the finality gadget is restored, and then the chain gets finality back after all these people got slash.
00:17:05.034 - 00:17:16.458, Speaker A: Yeah, this is sort of the idea that in a forking event on Ethereum, it slashes both sides, slash themselves down to one side, having enough of the stake to continue finalizing blocks.
00:17:16.506 - 00:17:24.066, Speaker B: Oh, yeah. Yeah, that is true. So, like, if, like, Australia got cut off from the rest of the world, if, like, the Pacific Ocean, like, Internet.
00:17:24.090 - 00:17:27.124, Speaker A: Cable got cut or something, I've seen Pacific rim.
00:17:28.984 - 00:17:46.232, Speaker B: Those validators would, like, they would observe a finality outage, and then only the Australia validators would continue to produce blocks, and then you would end up with just two different completely valid forks of Ethereum that are just going on their own.
00:17:46.328 - 00:17:48.376, Speaker A: Yeah. Kiwi BTC.
00:17:48.560 - 00:17:49.884, Speaker B: Kiwi BTC.
00:17:51.824 - 00:18:05.994, Speaker A: Yeah. I guess this has always been an interesting one, because the Solana view of the world is that execution in the absence of finality is not worth the trade off.
00:18:06.154 - 00:18:28.250, Speaker B: Yeah, many people believe this. That's the same view as pretty much the whole tendermint world as well. They don't have any sort of way to recover if too much state goes offline. I would say, to each their own. Ethereum really likes their thing, and I think it's quite nice at times. We've seen it, like, kick in and work and, like, heal finality outages. Yeah, sort of.
00:18:28.250 - 00:18:48.826, Speaker B: I mean, or, well, we've seen it progress without finality outages. And then the reorgs weren't even that. Like, there weren't really any reorgs during that, like, finality outage. Um, and, like, I think it was because one of the consensus clients had a bug. Yeah, yeah. Actually, if I remember correctly, uh, lighthouse, which is the, the client that's written in rust, it had a bug that dosed all the other clients.
00:18:48.930 - 00:18:49.194, Speaker A: Yes.
00:18:49.234 - 00:19:14.126, Speaker B: And then, so, like, it became only lighthouse because lighthouse, like, inadvertently, like, took out prism and all the other ones, which is very funny. And then I think they patched it or fixed it before anyone got inactivity leaked, which is very nice. And also, if you're running prism and you see that it went down, you can just be like, oh, shit, and then switch out to lighthouse and then wait for them to fix it and then switch back to prism. Yeah.
00:19:14.150 - 00:19:22.346, Speaker A: This is the multi client vision of why it actually matters, which is why the Solana network has a second independent client in the workplaces. Exactly.
00:19:22.410 - 00:19:25.874, Speaker B: Congrats. Firedancer is a great project that I follow closely.
00:19:25.954 - 00:19:31.014, Speaker A: Yeah, Firedancer. I mean, we're hoping we get some version of it on Mainnet this year.
00:19:31.354 - 00:19:33.454, Speaker B: Wow, that's ahead of schedule, isn't it?
00:19:33.914 - 00:19:38.466, Speaker A: I mean, schedules and blockchains are sort of an amorphous concept anyway.
00:19:38.490 - 00:19:39.826, Speaker B: Our plans are measured in centuries.
00:19:39.890 - 00:20:23.972, Speaker A: Our plans are measured in centuries. Trustless roadmaps don't exist. No, I think the way I'd meme that, but, yeah, that's sort of the hope. The end goal of that project is 100 x performance over the current network, and that is a multi year project to get there, of course. But I think that is the highly scalable vision. So I want to talk about trust minimization and the role that that's played in your decisions, both in terms of career choices and the way that you've chosen to spend your time on different types of software projects. You and Torgal, who you mentioned before from scroll, are two people that sort of have the drumbeat of this on Twitter a lot of the time.
00:20:23.972 - 00:20:52.994, Speaker A: What do you, do you see people misunderstanding these terms? Do you see them intentionally misleading people on what they mean? Why do you think there's such a. You would expect trust to be something that we can agree on in networks that are built on not having to trust. But it seems like still a very contentious point of this industry about what qualifies as trusted versus trustless versus trust minimized.
00:20:53.534 - 00:21:00.814, Speaker B: Yeah, I would say that, like, you know, obviously, if you run a full node of your chain, you are not trusting anyone. You're checking every single block.
00:21:00.894 - 00:21:01.158, Speaker A: Right.
00:21:01.206 - 00:21:43.158, Speaker B: And sure, I mean, there's some baseline trust assumptions. For example, like, maybe you trust a two thirds for a stake for liveness. Um, and so some things are inescapable trust. Some things you cannot overcome with blockchain technology. Uh, or, you know, the, the classic, like, uh, what if your intel cpu and your laptop is backdoored right. There are some things that we cannot overcome. But I would say that when I say trust minimized and sort of like my goal for building trust minimization tech for blockchains is get every user equal to what the users with full nodes have, because that is, I think, as good as we can get and a noble goal.
00:21:43.158 - 00:21:52.534, Speaker B: And that would get us to this, back to this place where blockchains are a less trusted version than web two or tradfi things.
00:21:53.074 - 00:22:36.226, Speaker A: Yeah. Now, one of the places that a lot of people go when they're talking about how do we build systems where the average user has non trust based assurances that a full node is operating correctly are zero knowledge proofs. This is kind of one of, there are many examples of how you can use zero knowledge proofs, one of them being succinctness, which is really just a property that gives you scale. But the other one is basically to say, I don't have to verify your computation because there's a cryptographic signature generated as part of your computation that proves that it's correct. This is, to use a analogy you'll probably not forgive me for. This is sort of like hash checking a file or something like that.
00:22:36.250 - 00:22:46.654, Speaker B: No, that's a perfectly fine analogy. Yeah. A hash thumbcheck is the integrity of data and a zero knowledge proof is the integrity of a computation. Yeah. So it's very similar comparison.
00:22:46.814 - 00:22:59.470, Speaker A: So I want to ask a very broad question. Why this many years into zero knowledge provers, do we still not have ones that run anywhere near real time?
00:22:59.582 - 00:23:13.032, Speaker B: Oh, I don't think we're, well, I mean, maybe that's pessimistic, but there's an enormous amount of overhead in Ck proving a computation and real time. Sounds like science fiction at the moment.
00:23:13.198 - 00:23:13.860, Speaker A: Right?
00:23:14.012 - 00:23:21.104, Speaker B: We have some really high performance ones. Well, I mean, like, maybe you wouldn't call it high performance, but we have.
00:23:21.404 - 00:23:30.224, Speaker A: Maybe talk about block time ability, the ability for a ZK proof to execute within one block on most networks.
00:23:31.604 - 00:24:10.180, Speaker B: Yeah. Okay. So depends what you're doing. Like if you want a ZK prove consensus and a whole block worth of state transitions in a ZK proof, that's going to definitely be slower than whatever the block time was, just because like, you know, you have to do so many extra computations for each instruction that you run if you're trying to prove. Yeah, any computation. But what is nice is that it won't fall behind. So you can have the chain progress as fast as you want, and then the proofs lag behind by a certain amount of time, but they always keep up, so that's not so bad.
00:24:10.180 - 00:24:44.020, Speaker B: Right? So suppose we have our 400 millisecond blocks, and then maybe three minutes later, the user gets a confirmation that the height three minutes ago was valid. That's better than what the users have now, which is nothing. Blind trust. So I'm pretty happy with that. If we someday get real time because of some math breakthrough or some hardware breakthrough in the future, that'd be even more cool. But I'm personally just happy enough that we have the ability to give them confirmations at all, even with a little bit of a delay. That's so much better than blindly trust.
00:24:44.020 - 00:24:44.988, Speaker B: Blindly trusting.
00:24:45.076 - 00:25:21.008, Speaker A: Yeah. So I think one of the arguments that you hear is, okay, so let's assume that zero knowledge tech gets good enough that you can get, let's call it a three a minute, a five minute confirmation on something, right? At that point, what is the role that the blockchain is playing? Because I could see a world where someone's like, actually, zero knowledge proofs make blockchain irrelevant. You now can have arbitrary data coming from arbitrary sources that doesn't necessarily need to be verified because the computation is now verified.
00:25:21.096 - 00:25:27.048, Speaker B: That's a good point. Imagine you are using a blockchain, Dex, because you don't trust Robinhood.
00:25:27.096 - 00:25:27.656, Speaker A: Yes.
00:25:27.800 - 00:25:49.978, Speaker B: But then Robinhood rolls out a new ZK proof feature where now you know that Robinhood is executing their code exactly upon the terms that you agreed to when you were using the app. Yeah, still. I still think we need blockchains, even with that. Because blockchains are also. They're more than just removing trust. Right. We're also trying to make these things that no one can take away.
00:25:49.978 - 00:26:25.078, Speaker B: We're trying to make these things that last forever, can't be censored, and, like, no one, even with all the power in the world, could take away from us. So even ZK Robinhood, that could be shut down, that could be seized or have their business license suspended or something like that, but the crypto version of the blockchain version of that lasts forever, runs itself resilient against all kinds of attacks. And so we want that stuff, and then we also want the trust minimization stuff. And I think that's where it gets interesting.
00:26:25.206 - 00:27:18.548, Speaker A: Yeah, I guess I've always struggled with the idea that a blockchain will ever be technologically resistant to state action. I think the reason, and we can set aside, like, if Rhode island bans crypto, I don't think anyone's worried about it. We're talking a massive actual nation state level. Us, India, EU, China, something like that. In that situation, the security of the network from a value standpoint seems to me at least to be much more governed by the social layer than the technical layer. And I guess my analogy here would be, if you make something technically resistant but socially unacceptable, the value of that underlying asset, like, you know, the US bans bitcoin. Bitcoin goes to $3,000.
00:27:18.548 - 00:28:35.680, Speaker A: Oh, yeah, instantly, right. And so, yeah, at some point you have to ask yourself, or the EU, the US and the EU and China, right, the trifecta come together and say, no, bitcoin, you know, blood, blood diamonds still exist, right? There. There are. There are people who, you know, buy assassinations with bars of gold, right, or some other type of, like, highly hard to move physical asset. And the thing there is the social layer of crypto is what keeps it in the good graces of government, at least in democratic or semi democratic systems, as much as the technology. And so I'm kind of, I've always wondered about sort of how, how absolutist we need to be around that layer, considering that at this point, this is the argument that circle actually controls Ethereum. And at the end of the day, if Circle said, we need this change to be made, or we need you to go in and remove this transaction that we've traced back to North Korea, a refusal to comply would have such catastrophic effects for a network that it would functionally not be able to maintain its role and that its players would probably capitulate to that request.
00:28:35.832 - 00:28:54.386, Speaker B: Oh, yeah. So that circle fork question thing, we just talked about that two days ago on another podcast. But I have an answer that I think you'll like. Okay, so I really don't like the framing that circle controls the fork, the hard fork selection of the chain, or circle controls Ethereum, circle controls Solana.
00:28:54.530 - 00:28:54.954, Speaker A: I agree.
00:28:54.994 - 00:29:15.884, Speaker B: Because what happens if circle is coerced into only accepting redemptions on a hard fork of Ethereum that removes tornado cash from the state or otherwise changes the state in a way that's against the protocol, that actually creates a second chain.
00:29:16.004 - 00:29:16.372, Speaker A: Yes.
00:29:16.428 - 00:29:33.664, Speaker B: So there are two chains. This happened before we did the Dao hack. We did Ethereum classic forking into Ethereum. It wasn't that the old chain was deleted. It still exists. And you have funds on both. If you had funds on Ethereum classic, you got funds on Ethereum.
00:29:33.664 - 00:30:11.824, Speaker B: Ethereum classic still has value. It has probably some usage. Still, I don't really know. But if the circle fork happened, you would have two chains, you'd have two tokens, you'd have pirate ETH and circle ETH. And I would say that the value of both would probably be a lot less than the value of ETH prior to that event. I think the pirate ETH chain where all of Defi breaks is probably going to have a lot of problems and a bunch of apps would break and it would not be as useful in some ways, but it wouldn't be worth zero. It wouldn't go completely to zero.
00:30:11.824 - 00:30:46.754, Speaker B: And similarly, on the other side, on the circle ETH fork, that one would not be as worth as much as the original ETH either, because the entire narrative that this is a decentralized protocol is gone. It's now completely centrally captured. This one company changed the state by breaking the rules. Essentially, the validator set of this chain is just for show, the whole decentralized consensus. And like Peter P layer of this, it's all for show. There's one company that now everyone has decided on this chain that they're ok with them just completely having right access to the whole state.
00:30:46.874 - 00:30:54.616, Speaker A: Yeah, so I agree with you that like, Ethereum probably actually would not listen to circle. Not like Ethereum is one person or a corporate.
00:30:54.640 - 00:30:56.120, Speaker B: Well, there would be two chains.
00:30:56.232 - 00:31:33.444, Speaker A: Yeah, there would be. There would be two chains. But I might even go as far as to say that the impacts of it would be such that circle, actually, if anything, that the market forces work the other way, is that you would see a massive exodus from USDC if there was a moment like this. And there's no real great alternative to USDC today, right? If you're looking for highly regulated, stable coins, but we have GMO, we have Paxos. You could see a world where the institutional money moves to something that hasn't been sanctioned and the Degen money just goes back to tether.
00:31:34.184 - 00:31:42.192, Speaker B: Right? I mean, tether is not an american company, but I still think if the US didn't want tether to exist, it probably wouldn't exist.
00:31:42.328 - 00:33:19.344, Speaker A: You think? Yeah, I guess the, the question with a lot of the stuff is always, when is it worth it? Right? Because like an analogy that no one likes to talk about is like, drugs are still easy to obtain despite being illegal in the United States. Pirated copies of movies despite being illegal are still easy to obtain. And it's not like Verizon monitors your Internet traffic. And yes, people use encryption on Bittorrent, but fundamentally, it's not hard to look at your computer and be like, oh, they downloaded 45gb in five minutes and from 100 other people, that's probably a pirated movie file. There is guilt by association that exists within a lot of these things, but the compliance is not strong enough to enforce it. And for me, I see that as the social layer of the politicians who went after piracy in the early two thousands all got voted out of office because it turns out it's pretty popular, and that the actual resistance of blockchain to state action is very similar in that if we actually saw, I mean, we've seen this, that politicians right now in the United States who are very anti crypto, if they're vulnerable, it is enough to make them lose their reelection campaign. And that that's the actual consensus layer, power layer, whatever you want to call it, of crypto is more in the number of people who believe in these networks than necessarily the technological resistance of the networks.
00:33:19.724 - 00:33:20.464, Speaker B: Right.
00:33:21.164 - 00:33:22.700, Speaker A: I'm not sure if you agree with that or not.
00:33:22.772 - 00:33:38.842, Speaker B: Well, I'm kind of. You have an interesting point, but let's go back a little bit to, like, if. So, it'd be one thing if the government banned cryptocurrency. It'd be another thing if they went to war against cryptocurrency.
00:33:38.988 - 00:33:41.374, Speaker A: So you went to war against drugs?
00:33:41.534 - 00:33:42.514, Speaker B: Oh, yeah.
00:33:43.174 - 00:33:44.342, Speaker A: That didn't go so well.
00:33:44.398 - 00:34:01.918, Speaker B: Right. Yeah. So, like, I think that's kind of what we want to do. So, like, we want to make it so we want to design the networks from, like, a technology perspective in a way that we. That the. If there were a war on crypto, crypto would win in the same way that the drugs won the war on drugs.
00:34:02.086 - 00:34:06.030, Speaker A: Right. And the drugs won because the users won't.
00:34:06.142 - 00:34:06.574, Speaker B: Yeah.
00:34:06.654 - 00:34:14.354, Speaker A: Right. At the end of the day, the war on drugs failed because they didn't cut off the demand for the product.
00:34:15.334 - 00:34:16.262, Speaker B: Yeah, I think you're right.
00:34:16.318 - 00:34:17.030, Speaker A: Yeah.
00:34:17.222 - 00:34:45.782, Speaker B: And let's make it easy to get right. So, like, for example, RPC services, like, a lot of RPC providers are businesses, and if they're going to war against cryptocurrency, their business licenses are gone. They can no longer accept money from their clients. They can no longer pay taxes. I don't think RPC businesses are so passionate that they're going to become, like, speakeasies or bootleggers. I think probably they would just find a new. A new, like, job.
00:34:45.782 - 00:34:48.038, Speaker B: They've probably just, like, closed down their business.
00:34:48.126 - 00:34:49.534, Speaker A: Right. Become cdns.
00:34:49.654 - 00:35:02.216, Speaker B: Yeah. So, like, we would, in this world, we would have RPC providers would be sketchy. RPC providers would be like criminal pirate guys. Kind of like the people who are uploading all these torrents to Bittorrent.
00:35:02.320 - 00:35:06.456, Speaker A: Yeah. Or like the very early days of trying to buy a VPN that wasn't through your work.
00:35:06.600 - 00:35:23.176, Speaker B: Yeah. So RPC providers become not trustworthy businesses. They become sketchy criminals. So that's why I'm like, let's not trust them. Let's make the tech so that we don't have to trust them in the event that we end up in this world. Because they might not be. Right now they're trustworthy.
00:35:23.176 - 00:35:35.526, Speaker B: And right now it's very easy to say, oh, Helios is never going to rug me because myrrt is a trustworthy guy. But someday that might change. Someday the trustworthy RPC providers might be gone. Sure.
00:35:35.590 - 00:35:38.954, Speaker A: Or someday helios gets acquired by Oracle.
00:35:39.374 - 00:35:45.158, Speaker B: Oracle? Like Larry Ellison. Oracle. And then Larry Ellison's going to start lying to users about their balance.
00:35:45.246 - 00:35:48.782, Speaker A: Yeah, something like that.
00:35:48.878 - 00:35:49.966, Speaker B: Yeah, something like that.
00:35:50.110 - 00:36:23.474, Speaker A: Or, I mean, so a very different version of this actually sort of happened with bison trails. And when they were acquired by Coinbase, the scope of what they were able to do under a publicly traded, highly regulated entity that owns a exchange meant that the product suite had to change in response to the regulatory visions. And that's not to say that anything wrong happened there. It's just the business realities changed in the products and services that company was able to offer post acquisition were very different than pre acquisition.
00:36:23.634 - 00:36:24.834, Speaker B: Interesting, interesting.
00:36:24.914 - 00:36:35.498, Speaker A: So sometimes not even nefarious use cases, sometimes it's just the business use cases change. And suddenly, what if there's a OFAC block type conversation equivalent for rpcs?
00:36:35.666 - 00:36:44.254, Speaker B: Oh, yeah. I mean, I think that is already confirmed to be happening for Ethereum. I think that there's already major rpcs that are not letting people interact with tornado.
00:36:45.444 - 00:36:46.108, Speaker A: Interesting.
00:36:46.196 - 00:36:46.748, Speaker B: Yes.
00:36:46.876 - 00:37:15.748, Speaker A: So to take a hard pivot here, I want to bring this back to Celestia and data availability. So I want to talk to you a little bit about how data availability works, how it differs from settlement, how it differs from state, and then also where data availability and verifiability intersect as something that you see as necessary for the future of. Of DA products.
00:37:15.916 - 00:37:16.772, Speaker B: For sure.
00:37:16.948 - 00:37:36.972, Speaker A: Great. So let's start with the basic. Let's start with state. So if you're using something that's built on Celestia, where is the execution happening? Where is the state, where is the DA? And where is the settlement? In sort of an example. You want to just pick?
00:37:37.148 - 00:37:47.612, Speaker B: Yeah. So this is a very common source of confusion because there's a lot of different ways that Celeste is being used, and they all have like very different answers to the questions you just asked.
00:37:47.668 - 00:37:49.532, Speaker A: So something like eclipse, let's say.
00:37:49.628 - 00:38:47.394, Speaker B: Okay, eclipse is an ethereum l two, and it uses celestial data availability, ethereum settlement, and it's, I guess, fork of the Solana virtual machine to execute transactions. And what does that mean? Well, that means that transactions go to either the eclipse sequencer or the eclipse network, depending on if it's what stage of decentralization it's at. And they will produce a block or a batch of blocks or whatever, or maybe like it's many blocks that ends up being one huge block. And there will be a merkle route of either. Like the state. And most roll ups we do talk about a merkle root of the state tree being posted on chain. It might be different for Solana VM because the Solana VM doing like clients is more easy with like SPV style, where you have a root of the transactions rather than root of the state.
00:38:47.394 - 00:39:25.018, Speaker B: But it turns out that works just as well for bridging and all that. So let's say eclipse is posting a root of a bunch of transactions onto Ethereum. The reason why you need data availability is because what could happen is the block producer could have posted a Merkle route for a tree that does not exist. And what data availability guarantees is that even though the root is what's posted to the light client, a roll up or an l two is a on chain lite client. So it's the same as like the lite clients that I have been talking about, but it's on chain so that you can use it to have a bridge.
00:39:25.186 - 00:39:29.026, Speaker A: I actually never heard someone describe a roll up as a light client for an l one.
00:39:29.210 - 00:39:37.586, Speaker B: Yeah, I mean, that's an interesting, like an ethereum. Ethereum l two is a trust minimized lite client for one chain running on ethereum l one.
00:39:37.690 - 00:39:38.234, Speaker A: Yeah.
00:39:38.354 - 00:39:42.934, Speaker B: Rather than a lite client that you run on your phone, which is another thing that's very cool.
00:39:44.874 - 00:39:51.010, Speaker A: So, yeah, sorry, we were at a Merkle root has been created that may not actually conform to a tree. Yeah.
00:39:51.042 - 00:40:34.598, Speaker B: So maybe the block producer just created a tree and then put the root on chain, but he didn't. He hid the tree, he kept it hidden. And then that's useless because people cannot challenge it if it's secured by fraud proofs or they wouldn't be able to withdraw because they can't get their merkel path to their balance. And so when the contract is accepting the root, it must also. Or when the light client, more generically is accepting the route from the roll up block producer. It must also verify that the data is available, that the rest of the tree exists somewhere and it's retrievable by the users. Data availability is not a storage thing.
00:40:34.598 - 00:40:47.694, Speaker B: It's not an RPC thing. It's actually this very niche, weird specific problem where it's make sure that the data is retrievable, make sure that it was not withheld, make sure that it was available at one point in time so that it may have been archived.
00:40:47.774 - 00:40:58.326, Speaker A: It's a cache. Is that a fair way to think about it? It is a temporary holding place for data that may need to be referenced for a bunch of other things to happen.
00:40:58.510 - 00:41:24.600, Speaker B: Yeah. So like Ethereum had added the 4844 blobspace to the blocks. And if you are in Ethereum full node and you download a new block, you can download the blobs and then immediately delete them. That would be fine because that is verifying availability. You just want to check that they were there and then it doesn't matter if you store it. You're just validating that they exist at all at one point.
00:41:24.702 - 00:41:25.084, Speaker A: Right.
00:41:25.164 - 00:41:31.144, Speaker B: So cash. Yeah, I mean, that's, that's reasonable. Yeah, that's like a reasonable way to, way to put it.
00:41:31.604 - 00:41:36.104, Speaker A: And so data availability is not considered to be persistent storage.
00:41:36.564 - 00:41:49.748, Speaker B: No. Yeah, no, it's not blockchain. Regular blockchains do not guarantee storage. So there is actually nothing like if all copies of bitcoin, block number seven were deleted right now.
00:41:49.876 - 00:41:50.374, Speaker A: Yeah.
00:41:50.484 - 00:41:58.226, Speaker B: What would we do? Bitcoin is not filecoin. Bitcoin does not guarantee that all of its history will be stored. We just kind of trust that it will be stored.
00:41:58.330 - 00:41:59.002, Speaker A: Yeah.
00:41:59.178 - 00:42:06.654, Speaker B: And on, like, the more scalable the chain is, the more we have to trust that all the data will be archived.
00:42:07.034 - 00:42:23.358, Speaker A: Yeah. I mean, this is like a classic web two problem. Like, I had a friend who was like, in the observability team at Etsy, and they were saying that they throw out 99.997% of their log data because if they stored it, it was something like two petabytes a day.
00:42:23.446 - 00:42:24.894, Speaker B: Oh, my God. Wow.
00:42:25.014 - 00:42:34.990, Speaker A: And there was just, there's. It would break the economies of a very centralized, very profitable company like Etsy, let alone a decentralized blockchain.
00:42:35.182 - 00:42:51.438, Speaker B: Yeah. Yeah. So this is a cool thing that comes up. It's starting to be an interesting, like, recurrent Twitter conversation, which I'm happy about because for a while we had just months and months of the most boring discourse imaginable. And now we're back to some pretty cool stuff, thankfully.
00:42:51.526 - 00:42:52.194, Speaker A: Yeah.
00:42:53.214 - 00:43:29.622, Speaker B: Which is like, now people are arguing about historical sync and data availability, which is really interesting. A lot of bitcoiners still like to sync from Genesis because it's possible the bitcoin chain is not that big. So you can, in a couple of days, I guess, sink the whole chain from Genesis, where he is on Solana. That is absolutely not possible. And I don't think that's a bad thing, because this is, this is actually an inescapable trade off. And if you want to scale, you have to trade off the ability to, like, sync the entire blockchain from Genesis. You can do some cool things with recursive zero knowledge proofs, like Mina.
00:43:29.622 - 00:43:44.750, Speaker B: So Mina, every block includes a proof of the entire chain. And it doesn't matter if the old blocks get deleted forever, not archived, lost, because you never have to trust the entire history of the chain, which is awesome.
00:43:44.942 - 00:44:49.384, Speaker A: So the proposition for data availability, we're seeing a number of different solutions out there that are all kind of trying to address some version of this Eigen layer has their own DA product that's out. Now, Celestia seems to be the DA layer that is most favorite in the Ethereum world. There's other ones out there as well, and there's other ones coming out for other networks. Solana has sort of a slightly different implementation of all of this, where compression uses merkle trees and Merkel proofs, and there's a bunch of that that's stored on chain, but the retrieval to a lot of that is off chain on the RPC layer, although it can be all reconstructed from the data on chain. But over the long term, what is the role that data availability plays? Because I think hearing you describe it here, one can think it's a race to the bottom market, where it's like, oh, we just need somewhere to put the stuff for retrievable for 14 days or something like that. But there's obviously a much bigger vision for what Celestia can be for the next years of blockchain.
00:44:49.764 - 00:46:01.294, Speaker B: Yeah, so the example we talked about was eclipse, which is an ethereum l two that uses Celestia da. And all the top users of Celestia are currently ethereum l two s. And I would say the data availability for ethereum l two s or really just anywhere that settles somewhere besides Celestia is kind of a race to the bottom commodity. That's pretty true for that use case. Now, there's other ways to use Celestia where the specific Celestia block space is important to what you're doing, and it is not a commodity. But for serving l two s in this way, where you have an attestation from the DA layer as a criteria for the on channel light client accepting the batch is you want one that has a high cost of attack or high budget of attack. And besides that, besides how secure it is, the next thing you care about is how low is the price, right? If you have Celestia, which is maybe charging, I don't know, one cent, and then a fork of Celestia with a really low market cap, you might spring for the premium because the more expensive one is less likely to be attacked.
00:46:01.794 - 00:46:17.274, Speaker A: So what does an attack look like on a DA layer? I think we know what those look like on proof of work networks. We know they look like on proof of stake. What is like. I guess maybe we can take a step back. What is security model that a DA layer needs to be worried about? And then what is the attack vector there?
00:46:17.354 - 00:47:22.138, Speaker B: Gotcha. So, again, it depends on how you're using it. So if you build what's called a sovereign roll up on Celestia that is completely trustless, and the only attack against that that could possibly happen is aliveness failure from l one. But if you're using Celestia as da for an ethereum l two, what could happen is a majority attack on Celestia, like a two thirds malicious stake on Celestia colludes with a sequencer, and then you would have, on an optimistic roll up, they could steal all the users funds, because what could happen is the sequencer produces a invalid state transition and then data is withheld. But the validators on celestial lie and say that data wasn't withheld and fraud proofs can be prevented. So the sequencer would be able to steal the entire funds off the roll up bridge. If, of course, it's like a mature, optimistic roll up where fraud proofs and Di are actually the strongest trust assumption in the chain, which right now, it's quite far from being the case on all the popular l two s.
00:47:22.138 - 00:47:22.882, Speaker B: Yeah.
00:47:23.058 - 00:47:39.614, Speaker A: All right, so there's one last topic I want to talk about, which I think is one of the reasons we started Dming back and forth originally, which was you tweeted something to the effect of, I think programmability on blockchains might have been a mistake.
00:47:40.194 - 00:47:40.974, Speaker B: Yes.
00:47:42.674 - 00:48:36.778, Speaker A: Programmability is what got me interested in blockchains. I was one of those people who looked at bitcoin and said, this might be for the bunker boys. But this isn't interesting to me, because at the end of the day, nuclear war resistant money, I feel like I'm probably not going to last out the war. So what do I care about the money after the war? For me, the idea of smart contracts is what got me into blockchain originally. This is how I started working on some projects building on ETH in 2017. That piece has been what's kept me in and what's kept me hopeful about the space that we can build trustless computing environments that can execute any code. And this idea of an on chain program, especially Solana's model, where anyone can hit data up to an on chain program, that on chain program does a known thing and outputs a known value, and that is just an incredible force for good in the world.
00:48:36.778 - 00:48:51.554, Speaker A: But you were sort of saying that programmability is also. It's the reason people lose money. It is the source of hacks as well. So I wanted to have a little bit more of that conversation live with you and get your thoughts on programmability.
00:48:52.254 - 00:49:02.670, Speaker B: Sure. So, like, I'm not anti app, I'm pro app. But the thing that is, well, also like this is I'm up in the air about this. I was kind of, like, workshopping the idea on Twitter, and that's kind of.
00:49:02.702 - 00:49:03.278, Speaker A: As we all do.
00:49:03.326 - 00:49:59.394, Speaker B: Yeah, but so, like, very pro app. I love all the great apps that exist and have been built as smart contracts, but the scary thing is these deterministic virtual machines that the blockchains run, which are really unforgiving. And so if there's a problem in the code for a smart contract, people's funds will be lost, and all the different execution clients, firedancer, Solana Labs, or on Ethereum, Geth ref, Nethermind, they would all execute the hack the same way, and on all the clients, all the funds would be lost. And we've time seen this happen many times. Billions have been lost to smart contract exploits. But every app that runs as a smart contract, you could just take it out of the smart contract vm and make it part of the l one itself. Once it's part of the l one itself, it gets implemented in the execution client.
00:49:59.394 - 00:51:05.134, Speaker B: On Ethereum, you would have five different implementations from Gethrett, Nethermind, Besuke. Yeah, and if they ever diverge, we would catch it very quickly, and we're a lot better at catching diverging client behavior than smart contract bugs. Funds don't really get lost when clients diverge. We kind of just stop the chain and say, hey, guys, something was underspecified, or there's a bug in a client, we got to sort this out, and it works quite well, and I really like that. And then, so, of course, you lose the ability to iterate, and you lose the ability to just run an app on mainnet and just, like, try out your app and launch it and all that. But, like, are there really that many apps? Like, it seems like everybody's just building a new Dex, everybody's building a new lending protocol, everybody's building new perps, everybody's building new nfts, and it's really much and much of the same thing. So I wonder, like, maybe we should stop just rebuilding the same things over and over again, and we should just, like, have an open source Dex that we all work on, and it's part of the l one, and it can never get hacked.
00:51:05.134 - 00:51:09.126, Speaker B: That's kind of like the thesis that I'm toying with here.
00:51:09.190 - 00:51:56.134, Speaker A: Yeah, I mean, look, it's a system where we start enshrining core applications into the core code. The validators get a bit heavier to run, but maybe that's an appropriate trade off. We decide to run committee structures to figure out who can build code for these systems to make sure it's secure. We have annual meetings where everyone votes on those systems. They're now housed in several data centers. And I just, you know, I'm being facetious here, because very quickly we get to HSBC and the Federal Reserve, right? Do we? We do. Because the, the minute we start saying that we're going to move applications out of the permissionless layer into the permissioned layer, the cost of innovation skyrockets, because now suddenly you have to pay seven teams to implement Uniswap.
00:51:56.134 - 00:52:33.886, Speaker A: And the validators get heavier potentially, too, because they now have to be handling more. They're not just handling execution, they're handling ingress of a lot of work. And I just. I'm joking a bit. But I think what I'm worried about is that puts us on a path to, uh, making the cost of starting something on blockchain as high as the cost of starting something has become in web two or higher. Right? Like, if you want to do something that touches money in the United States, you have to raise $2 million. You need mtls in every state.
00:52:33.886 - 00:52:57.414, Speaker A: You need, you know, X or Y and Z. You need agreements with credit card processing companies. You need banking like it is a, it is a very long process. If you don't want to outsource and use service providers for every component to actually start a new business. And this is why theres three clearinghouses in the United States. And thats it. And thats why theres functionally three companies that process all the credit card payments.
00:52:57.414 - 00:53:34.988, Speaker A: It becomes a consolidation moat and these industries become protective the same way. The classic thing about if you know anyone whos ever tried to build a company thats selling a product to the US government, takes you three years to get qualified to sell something to the government. And what I worry about is we'd be building very similar systems where the entry barrier becomes so high that the protocol development teams at these clients become gatekeepers to the execution environment, as opposed to being the more appropriate gatekeepers to adding new features to the l one like they are today.
00:53:35.116 - 00:53:45.688, Speaker B: Well, I mean, like you said, that the VM is the permissionless layer and the l one is permissioned. I don't agree with that.
00:53:45.736 - 00:54:23.914, Speaker A: It's not permissioned, but it is more tightly controlled by, for example, if you want to add a core new feature to Ethereum, you have to get a lot of people to agree with you. This is good to add and then you need a lot of engineering teams to actually implement that feature. This is part of why stuff takes a long time to build on Ethereum is because there's a lot of stakeholders involved. If I want to go launch a new degen meme coin on Ethereum, I don't have to talk to anyone. I don't need to talk to any committee. I just submit code to the chain and the chances of catching on are very low. But the barrier to deployment is functionally zero.
00:54:23.914 - 00:54:25.694, Speaker A: Or it's some ETH.
00:54:25.774 - 00:54:50.074, Speaker B: Yeah, it is certainly very easy to launch meme coins and other things that are maybe not, I mean, not anti meme coin, but I don't know, maybe the fact that I can write a totally buggy, scammy broken Dex and ship it to mainnet and give people points, but then they all get hacked because I never got audited and I'm a complete scammer is maybe not so great.
00:54:50.454 - 00:54:52.034, Speaker A: Isn't that the american dream?
00:54:53.894 - 00:55:21.920, Speaker B: Yeah, I think maybe you're right. Maybe it is the american dream. I don't know. I mean, I write a lot of smart contracts and I have shipped a lot of things this way. So I mean, again, I'm kind of like, yeah, messing around. But like, of course, I think if the feature you want to add to the l one is really popular. So like for example, say, theorem does enshrine index, and you're like, we're a bunch of math economics geniuses and we wrote this like academic paper about like the best optimal Dex.
00:55:21.920 - 00:56:02.994, Speaker B: And you implement it and your thing is popular and everybody wants it, it probably would like, end up getting in there. These things are not like, yeah, in practice, the dev teams who work on all the clients are like entities that get funded, often through grants or maybe through some kind of business model. But like, open source software in general isn't, doesn't have to be that way. A lot of open source software is kind of volunteer based. And like, blockchain started out more like that at first. Now almost everyone who's working on blockchains is full time startup with funding. Didn't used to be that way.
00:56:02.994 - 00:56:39.570, Speaker B: And so I'm sort of thinking of the old way a little bit too much. And so, yeah, I mean, definitely, I think if you accept the new regime of protocols as startups, then I think you're probably right. Uh, keep the, keep the vms. But like, oh, yeah. And then also Cosmos app chains, they're all, all the apps are enshrined in the l one. Like the terra stablecoin was part of the l one, and they could have had different clients that all were implementing it. And like, you never would have had to worry about a bug in that leading to loss of funds.
00:56:39.570 - 00:56:44.978, Speaker B: Instead, it was just the mechanism. And the oracle is also enshrined in the l one, which I think is awesome. I love.
00:56:45.026 - 00:57:00.180, Speaker A: Yeah, there's a lot of good arguments here that say what we eliminated is execution risk. And now this is a similar argument to formal verification, right? That formal verification doesn't prove your design is correct, but it proves that you built the thing correctly.
00:57:00.332 - 00:57:00.644, Speaker B: Yeah.
00:57:00.684 - 00:57:01.260, Speaker A: Based on your design.
00:57:01.292 - 00:57:29.848, Speaker B: I'm also pretty, pretty bullish on formal verification. I think nowadays it used to be really trendy in blockchain in like 20, 1819, you saw like, I think Makerdao, Uniswap, and the Ethereum beacon chain deposit were all formally verified smart contracts, and that was really expensive. I think it took like two years for the Makerdao formal verification thing to get finished. And so people dump on formal verification a lot. I don't know. I've talked to the, it's great.
00:57:29.896 - 00:57:31.336, Speaker A: Squads V three is formally verified.
00:57:31.360 - 00:57:58.606, Speaker B: Yeah, squads, which is awesome. And I've met the founder of runtime verification, which is the company that did all that stuff. And like, he's working on a bunch of stuff to like, improve the process. And also I think, like Mistin Labs, they did the, like the move prover where you can, I guess, like, yeah, probably. I mean, if you don't actually know how to do formal verification, it's probably like bad. If you like, have this tool that you think is formal verification, but actually you're still writing insecure contracts and you just start running this tool.
00:57:58.670 - 00:57:59.254, Speaker A: Sure.
00:57:59.414 - 00:58:00.454, Speaker B: Anyway, yeah.
00:58:00.494 - 00:58:05.718, Speaker A: Formal verification is not some magic bullet. It doesn't prevent you from designing bad systems.
00:58:05.806 - 00:58:17.162, Speaker B: Maybe the path to like, freezing Ethereum L two contracts is through formal verification is. Yeah, probably five years away. But like, not, not like science fiction the way some people talk about it.
00:58:17.298 - 00:58:20.174, Speaker A: Not like real time CK proofers, that is.
00:58:20.674 - 00:58:27.226, Speaker B: That seems like Sci-Fi to me. I mean, there's some, there's some really cool, like hardware based CK stuff that like Ulvatana is working on.
00:58:27.290 - 00:58:28.002, Speaker A: Yeah, I've seen that.
00:58:28.058 - 00:58:35.500, Speaker B: But I still, I mean, like, we don't have anything close to real time proofing right now, today. Yeah, who knows? That would be really cool.
00:58:35.572 - 00:58:49.784, Speaker A: Yeah, I mean, this is one of the things that I love about these type of systems is you can never bet, like, never bet against hardware getting faster and cheaper every year. And then these unexpected waterfall moments of software innovation.
00:58:50.284 - 00:59:42.028, Speaker B: Yeah. And if you look into like the high performance ZK space, like, for example, the planky two and the planky three community, they're thinking about software in the same way that the firedancer team does. They're thinking about every single instruction, every single cycle, not just in the proving systems themselves, which they do, but also with zkvms, for example, the new sp one ZKVM or with risk zero. You actually are looking at every single cycle of your program that you're trying to prove and you're doing fire dancer shit to like remove unnecessary instructions and all that. And it's kind of a very similar way of thinking because it's like we're just trying to get as much prover performance as possible and it's so slow unless you do this. And it's a lot of fun.
00:59:42.116 - 00:59:46.260, Speaker A: Yeah. Awesome. Well, I think that's as good a place to end as anywhere.
00:59:46.332 - 00:59:46.836, Speaker B: Yep.
00:59:46.940 - 00:59:49.228, Speaker A: So, Connor, thank you for coming on the show today.
00:59:49.276 - 00:59:50.252, Speaker B: Austin, thanks for having me.
00:59:50.308 - 00:59:51.308, Speaker A: Really appreciate this.
00:59:51.436 - 00:59:52.614, Speaker B: Great talk. It.
