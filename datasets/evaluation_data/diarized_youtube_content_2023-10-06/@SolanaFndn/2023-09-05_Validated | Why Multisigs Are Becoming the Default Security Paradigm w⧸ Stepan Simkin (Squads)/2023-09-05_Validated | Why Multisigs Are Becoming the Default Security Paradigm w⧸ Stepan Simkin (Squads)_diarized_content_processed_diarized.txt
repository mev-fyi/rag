00:00:04.680 - 00:00:06.174, Speaker A: Stefan, welcome to Validated.
00:00:06.334 - 00:00:08.854, Speaker B: Thank you. Thank you, Austin. It was great to be here.
00:00:09.014 - 00:01:01.220, Speaker A: This is an episode I've wanted to do for a while. We've had the CTO of Ledger on before to talk about hardware wallets and hardware security. We've spent a lot of time on this show explaining a lot of the basic fundamental building blocks of blockchain, how the intersections of ecosystems interact with all sorts of different components. Security is one of those topics that it's a little bit of an eat your vegetables thing, but it's also the foundations of what make blockchain possible. So I'm really excited to talk with you today about security paradigms, operational security, multisigs, how this crazy world got built, how we see it today, and sort of where the future of this stuff is going as more and more of our lives move on chain and more and more businesses kind of start adopting blockchain technology. So, yeah, let's get into it.
00:01:01.412 - 00:01:04.544, Speaker B: Yeah. Amazing. I'm excited to be here. I'm a big fan of the show.
00:01:05.164 - 00:01:10.904, Speaker A: So I want to start today with a deceptively difficult question. What is a multisig?
00:01:11.284 - 00:01:40.092, Speaker B: Right. I mean, we went through a lot of definitions over the years. I think the one we landed on is the more agnostic one, where we talk about multi seg as being this very simple consensus mechanism that allows to execute transaction on the blockchain by requiring multiple signatures. And that is really the final definition we landed on. And then you can really use it for multitude of things. More traditionally they've been used. Multi secant status has been used as a wallet system.
00:01:40.092 - 00:02:19.806, Speaker B: So that allows for a group of people or a single person with multiple keys to manage a treasury, manage different treasury assets like nfts or fungible tokens. And I think as we, and we can talk about the progression of this, but it really, I think went a lot further in the last couple of years in terms of what this consensus can manage. And really right now it is very agnostic. So once Solana, we can see validators, tokens, programs being managed through multisig. And it feels like every few months we discover a new use case that can be managed with this. It keeps evolving, for sure.
00:02:19.950 - 00:03:09.644, Speaker A: Multisig seem like an idea that seems pretty fundamental to blockchain security. This is the classic two factor authentication thing in the web two world, where if I'm going to log into my Gmail account, maybe I need to go pull a code from Google Authenticator. Or if I'm going to send a wire transfer, my bank has me enter another two factor code that comes from an independent device. With all the emphasis that the crypto world placed on self sovereignty and sort of security and all these sorts of things, this seems like something that sort of almost should have been baked into blockchain from the beginning at the protocol level, as opposed to it having to be something that a company like squads builds on top of the protocol. So walk us through a little bit of like, the history of where this idea came from and sort of why it wasn't there at the inception, the way something like a wallet was or an address.
00:03:10.644 - 00:03:56.164, Speaker B: Right. I think it is definitely the necessity for multi sticks really grew with more value, I think, accruing to crypto assets, specifically bitcoin, originally and the very first bitcoin. Multisig isn't actually smart corner growth multisig. It's done completely off chain, where you basically generate a bunch of shards from a single key, and everybody holds that it is really not programmable in the way that we've come to know multi segs today. And that's been this very sort of original version of it that was really about additional security or as you kind of mentioned, all these two FA examples, basically two FA for holding your bitcoin. Right. And I think that's where it really originated from.
00:03:56.164 - 00:04:21.114, Speaker B: And I think as Ethereum started growing and gaining popularity, and it was re emerging as the sort of smart contract wallet, a smart contract platform, an idea for a smart contract wallet where you can secure a lot of this logic on chain really became real and actually happened on Ethereum first, and then we're now iterating on those early primitives on Solana with new ideas.
00:04:21.654 - 00:05:20.150, Speaker A: Yeah, one of the, I think the core ideas that the show is about is that things that used to be technology problems on blockchain are rapidly becoming human problems on blockchain. So you could see a world where you roll back four years and there really are no good multisigs that exist on networks other than Ethereum. And they're still very mature on the Ethereum stage. Now we're at a place where almost anyone who wants to deploy a multisig can either for like a personal wallet or program upgradeability, a company treasury, whatever, whatever it happens to be. But again, one of these core tenants of blockchain is there's no undo button, there's no reset. Like if I hold the keys to something at the Solana foundation and they fire me tomorrow, they can log into my Google account and they can pull a bunch of that stuff out, they can get access to my one password. There's this whole corporate account recovery structure built into the web two ecosystem.
00:05:20.150 - 00:06:06.244, Speaker A: None of that really exists on blockchain. I think for largely good reasons. This is part of the security guarantee is there's no undo button and there's no master override. How does that sort of mesh with these businesses that I'm sure you guys work with that are starting to come on chain and they have to think about like, maybe I'm a protocol team and I want to run payroll for 60 people in 35 countries. And like, the easiest way to do that is USDC. But at some point there are keys that a group of people own that is both an attack vector, a compromise vector, and a potential just general problem if those individuals leave, or the classic one day, unfortunately they get hit by a bus and suddenly we're locked out of all of our accounts.
00:06:07.244 - 00:06:42.508, Speaker B: Yeah, absolutely. I think it's interesting that in web two, this idea of two FA or multiple signatures really came about in the context of individuals. It's more for extra security for my personal interactions on the Internet. It's interesting that in crypto it really started in a different place. It started with organizations, I think more so than anywhere else. And really it's about, as you were talking, groups of people that want to manage these on chain assets together. And we are really the most use cases we see right now are very on chain native.
00:06:42.508 - 00:07:40.398, Speaker B: So it's like we are a startup that's building something on blockchains and we raised funding or we got a grant, or we have a program that we just deployed on Mainnet. It's of huge value to the team, and having it controlled by a single key is a single point of failure. It's an attack vector, and I think it gives a lot of comfort to everyone on the team knowing that there's this immutable piece of code on a decentralized blockchain that's responsible for managing our assets. And that logic is secured there, as opposed to it being secured with trust in an individual that's actually just holding it on their ledger. I think right now we are in a place where it's becoming really customary. And it's the first thing that most teams do when they actually form a team to build something. They actually create a multisig.
00:07:40.398 - 00:08:25.632, Speaker B: That's where they put all the main assets. And I think, as you can sort of, I guess, differentiate all types of infrastructures that they can rely on to cast different on chain assets. Like you can do that on centralized exchange, you can do it in a cold storage hot wallet. I think multisigs are really solidifying as this core primitive for organizations. But we're also starting to see with, like, I guess we can dive into it later, but account distraction is becoming a huge topic. And I think we might see the infrastructure that actually underpins multisigs, get into this more kind of individual facing space as where traditionally it started in web two. With that, I think we are seeing that shift coming to life right now.
00:08:25.632 - 00:08:33.524, Speaker B: And so I think we might see more of that infrastructure in also sort of other realms of asset custody, for sure.
00:08:34.064 - 00:09:23.884, Speaker A: Yeah. I want to get into sort of more about how multisigs are used today. But first, kind of just a foundational question here. There was a point in time when I think most institutions and many protocol teams thought that they wouldn't necessarily need multisigs and that they could do this all through on chain governance, that they could basically say, oh, we're going to form a Dao, and the members of those Dao are going to be, let's just say, the executive team at Jupyter exchange or something like that. That model has sort of fallen away in favor of multisigs. Do you have a sense of why that occurred and why sort of the industry decided that governance was probably not the right application for this, and that a multisig really was the best, the best thing?
00:09:24.944 - 00:10:03.754, Speaker B: Well, I think it really depends, because there were many teams that went with the governance framework originally because they actually wanted to decentralize control over the core assets very early. It was really important for them to signal that as soon as possible. So they relied on the infrastructure and tooling that is really more in the DAO realm, as opposed to it being just a multisig. So that's one bucket of protocols that we saw. The other one is where it really is just, it was centralized, it should have been centralized. They wanted it to be centralized, and they just used the DAO infrastructure to facilitate it. I think that's an important distinction.
00:10:03.754 - 00:11:29.904, Speaker B: I think multisigs are a much simpler mechanism because there's no fungible tokens involved. It's a stricter consensus, and it provides you more certainty about what needs to happen for the assets to essentially leave your control, because it's just, here are the keys, here's the threshold, and it is getting more complex. With granular permission, you can make it a more complicated system, but the very core logic is very simple. I think with governance it is more complicated because also when you have a large supply of liquid tokens involved in this, there's different kinds of attacks that are possible, that are not really possible with the multi site. And so I think the way that's, I think what facilitated the shift, but there's also, I think there was a cultural shift in the last couple of years. I think as more sort of forward thinking blockchains like Solana came online and attracted a different kind of builder to the ecosystem, I think you started also seeing sort of, at least on the protocol side, that there's like on Ethereum, as I remember, like a couple of years ago, everybody wanted to build a protocol decentralized as soon as possible, launch a token and let other people build on top. I think Solana really made it possible for you to build on the blockchain, but be at least at the outset, a company that is iterating at a product, that has a vision, that wants to deliver something and then decentralize.
00:11:29.904 - 00:12:04.562, Speaker B: I think that shift facilitated the need for different kinds of tooling. And I think that's also what made multi segs, I think, more popular. And right now we're also seeing that on EVM right now. EVM, because multi sigs, even when we started, when we would talk about we're building something multiseq related even, it would be like, oh, daos, it's for daos. And right now it really is on both sides. It really is, oh, it could be on chain organizations, could be companies, startups, institutions. So now the pool is really broadened in terms of who can actually use this infrastructure.
00:12:04.562 - 00:12:06.114, Speaker B: Yeah, we're glad about it.
00:12:06.614 - 00:13:09.124, Speaker A: So let's go through some of the both use cases for multisigs, and then some of the examples where teams did not implement multisigs and sort of paid the price for that decision. I think the first one I can think of on that is sort of what happened with serum around the FTX collapse last year, where there was no. When FTX collapsed, there was a credible concern that some of the program keys or upgrade keys for serum may be in the hands of someone who could act maliciously, but that to the date, I don't think there's been any exploit of serum that happened. There was no evidence that anything like that did occur, but the fear there was enough to lose confidence in that protocol. Do you think that was entirely just because no one knew who held the keys? And is there sort of a way that in a situation like that, you can tell if a program is using a multisig or if it's not?
00:13:10.664 - 00:13:54.658, Speaker B: I think serum was definitely a big one for at least Solana ecosystem. I think just to maybe give more context, Solana programs are by default upgradable, and most protocols on Solana are upgradable. And so there is this thing that we call upgrade authority that needs to sit somewhere. It can be, again, controlled by CLI wallet can be controlled by a ledger. When we launched our latest version, a big focus for us was program management. And the idea that this is one of the first things you should really transfer to the multisig to manage, because if I have that with authority to a program, I can ship an upgrade and drain it of all of its TVL or make any kind of malicious changes. It definitely is a high value asset that you have, and you really need to manage it securely.
00:13:54.658 - 00:14:37.806, Speaker B: So when serum happened, when people realized that the upgrade authority is with some kind of wallet, at least I think at the time, through explorers, everybody could say that it wasn't the PDA. So that basically meant that it's not a multiseq. So even right now, looking at, you can type in the address of the program that you're interacting with on Solana into any of the explorers, and then you will see, at least you can identify whether there's, um, owner of the. The holder of the authority is a PDA or just a regular account. I think that's probably the. I think there's definitely room to make it more apparent, at least on the Explorer side. Right? And I think, like Slan FM and I think Soulscan lately also were sort of going in that direction.
00:14:37.806 - 00:15:35.124, Speaker B: I think also x ray. So everybody, I think that is becoming much easier to identify. But really, the zero moment was really important for the Solana ecosystem because I think developers and builders always, obviously, they're dealing with upgrade authority all the time because they need to deploy a program, then they need to upgrade it so they know it exists, they know it's important. And prior to serum, for many protocols, it was like, well, we've been using something for a year or six months. It's a setup that we have, it's either our own multisig fork that doesn't have a UI that's not really audited, or it's a CLI wallet that we keep very securely. That was the, I think, sentiment for many teams at the time. And then when serum happened, people started talking publicly about this issue on Twitter and on discord, and then users on Solana started to really understand that this thing exists and the potential impact that it can have if the upgrade authority is in malicious hands.
00:15:35.124 - 00:16:21.694, Speaker B: And that really, I think, facilitated a lot of the protocols realizing, okay, we now need to deal with it because our users are also, it became a. A question that everybody was asking, like, where is that with authority to my insert favorite protocol. And so I think once that happened, a lot of those teams realized, okay, we need a multiseq solution to manage it. And I think fast forward a couple of months, or I think it's been, what, almost. Almost a year, right? Like eight months, I think since almost a year. Yeah. Right now it is sort of the question that is asked, like, is your upgrade authority in squads or not? Which I think was one of the sort of big initiatives we were trying to make happen on Solana.
00:16:21.694 - 00:17:17.934, Speaker B: But really, program management, I would say, is a killer feature for squads to date. There is a lot of treasuries that people manage all kinds of things with squads, but program management is very important, and I think it is in many ways novel to blockchains. It's the first time we really took it to its furthest extreme, where we have full program management flow, because a lot of programs are upgradable, because on Ethereum, many programs, most programs that are deployed are non upgradable. And so there wasn't really a need for that kind of tooling, at least to the extent that we took it forward. I think Solana is pretty unique in that sense. I think more programs are going to be immutable, and so that's going to be a natural cycle. But also I think it's very important to understand that at very early stages of protocol development program, your program very likely should be upgradable because you want to iterate fast, you want to ship things.
00:17:17.934 - 00:17:50.124, Speaker B: For us, even immutability is very important, but that's a huge pain, because every next version of the protocol, we need to ship a new program, and it's a whole other story. For now, I think that really works well for the ecosystem. I'm glad that serum ended up not being actually a hacker or any issue. It actually only had positive impact on the ecosystem from a standpoint that the issue became apparent, it was raised, it was addressed, and so I think we are out of the woods on that one.
00:17:50.944 - 00:18:40.164, Speaker A: Yeah, it's kind of interesting because we talk a lot about how programs on Ethereum are immutable, but they almost always have a mutable wrapper program where the user actually interacts with. The address for Uniswap has not changed, even though we've gone through multiple versions of Uniswap. That's only possible because there's a mutable wrapper program. And sort of the solution for that from that community has been time locks, where a program can basically say it will be upgraded at this point, or the last time the upgrade occurred was XY or Z. Do you see a need for that tooling on Solana? Do you think the wrapper programs are fundamentally a good approach here that we should see more of on Solana or other alternatives, that since we're dealing with a new architecture that can do new types of things?
00:18:40.864 - 00:19:24.750, Speaker B: Yeah, I think that's a very good question. We've been thinking a lot about this from all perspectives. I think another property of Ethereum programs that we noticed that we've been trying to think about more is that they're inherently more modular. I know that gets into a different discussion, but they are, at least it's easier to make parts of them immutable and then other parts immutable. And that's what we discovered. Thing on Solana is just a bit harder. But I think to answer your question on Solana, we are about to launch time logs for v four, and we've been thinking a lot about how they can work and whether it's actually a good thing.
00:19:24.750 - 00:20:17.860, Speaker B: I think on Ethereum, they've been very. As you mentioned, they've been really adopted heavily by major protocols. From our perspective. I think it's great from a community perspective, because it means if an upgrade is queued up and it's been approved by the DAO or the multisig, and it's about to go live, there's basically a time gap before it can actually be executed. If you are worried about if you don't like what the upgrade is doing to the protocol, you have a timeframe as a user to go and pull your funds or do whatever to address your concerns. The flip side of that, though, is that if there's a bug, and that can potentially lead to loss of funds, to be able to change the program to address it, the time block also applies. And so if somebody is watching the program, that also creates an issue where it's a race against time.
00:20:17.860 - 00:20:29.304, Speaker B: They need to. They will probably be trying to hack the program before the fix is executed. So it also creates certain constraints that are also, I think, important to mention.
00:20:30.244 - 00:21:19.836, Speaker A: Yeah, I mean, everything is a series of trade offs. That's one of the universal constants about blockchain is there's no right answer. There's just a series of choices you have to make. And hopefully you pick the choices that are best for you, because one of these classic examples too, is if you have your funds in a multisig, and then you see something like, oh, the market's moving a lot, I want to sell, or, I have lost confidence in this particular program, I'd like to pull funds from it. There is this sort of asymmetry where it may be hard to do that if you have a multisig that requires three of your gps to sign off on it. One of them might be in Tahoe, one of them might be on an airplane. There's a whole series of things that may occur that would prevent that sort of transaction from executing.
00:21:19.836 - 00:21:53.094, Speaker A: I'm wondering if you guys have thought at all about asymmetric multisigs, or if that's even something that is technically possible, where certain types of actions, I know we've gone through this on a treasury side, where you could create an account where someone could only send funds up to a certain dollar value. But if you thought about this from the perspective of there are certain types of things that might be considered protection operations versus deployment operations, you can set permissions differently based on what the smart contract is trying to do.
00:21:53.914 - 00:22:31.464, Speaker B: Yeah, I think we've been actually diving into that for the last couple of months. I think the institutional NPC wallets, like fireblocks and copper, and the other providers, they had that for a while, because that's been a direct requirement from their users. Institutions do want granular control. They want to be able to say, you can only interact with this program. So just program whitelists, program blacklists, spending limits, just more granular control on what can be done. I think we are. But the trade off there, by the way, with all the NPC wallets, is that all of this logic is done off chain.
00:22:31.464 - 00:23:23.892, Speaker B: From the on chain perspective, it's just a regular account. And then all the transaction policies, including the MPC protocol itself, it's all off chain. It's all hosted in by a private company. In their offices. They have web two infrastructure that scales with how they grow, and it really is much more of a web two, I guess, way of securing assets as opposed to what we're used to. And I think with what's possible on Solana, I don't think it's actually only possible on Solana, but a lot more of it is possible only on Solana is definitely bringing more of that logic on chain. And so I think in terms of asymmetric multi sigs, just more granular controls, a lot of it can be done on chain.
00:23:23.892 - 00:24:09.520, Speaker B: For instance, right now, in terms of program whitelists, that can be done as well. But that, however, potentially makes the program a lot more complex. And so we've been actually thinking about this just last couple of weeks because we've been thinking how much of that we can address on chain to make it compared to offering for institutions that want to trade on Solana and have the same level of control. And some of it is possible, some of it is not. I think as we've been doing some research from institutions, program whitelist is the biggest one. And the reason it's complex is because, for instance, if you're doing a swap on Jupyter, you're also potentially interacting with a lot more programs than just one. I think for now it just might be a bit too early to understand how to, how to actually make it scalable on that front.
00:24:09.520 - 00:24:44.960, Speaker B: I think right now doing it off chain is just much easier, but potentially less secure or at least a lot more centralized. And so yeah, I think right now in terms of any kind of asymmetry and bridging that gap, I think if you look at our previous iteration of squats program has just been signers threshold, and that's pretty much it. The current version is more granular. You can have spending limits, time locks. We now add roles. So you can say, for instance, this key can only initiate or on the execute or only vote on proposals. So I think we are bridging that gap.
00:24:44.960 - 00:25:45.982, Speaker B: But also it's a constant trade off. You don't want to make things too complex. One good thing about multisig is they're very simple consensus mechanism and hopefully they have less moving parts than a lot of other programs you regularly interact with on chain. And that's how it should be. We do see a huge value in it being a very simple and reliable primitive and don't want to overcomplicate it for now. But I think as we kind of, one of my bigger ideas is that all wallets will eventually be smart wallets one way or the other, just because why wouldn't you want that if the access is comparable? And I also think a lot of the MPC offering is very useful. But I think as you can put more of these things on chain and you have an option of trusting a centralized company to secure that for you, or just put all that logic on decentralized blockchain secured by violators, I think the second option has become more attractive the further we develop this.
00:25:45.982 - 00:25:51.714, Speaker B: And so I do expect a shift for more things, at least of that nature, to go on chain.
00:25:52.214 - 00:26:54.654, Speaker A: Yeah, I think that's really interesting to think about that as the NPC wallet or the sharded wallet as sort of a stepping stone to getting all this logic actually on chain. It's an interesting view of that. You mentioned something around the idea that all wallets will become smart contract wallets, and this is something that we've heard from the Ethereum community for a number of years at this point, and the barrier there has often been the cost to deploy the wallet is not zero. The cost to create an account on Ethereum is zero. The cost to deploy a contract on Ethereum can be $20, depending on the gas fee at the moment, depending on the size of the program, et cetera. On Solana, that problem does not exist because transaction fees are quite low, but state storage is still expensive on Solana. In addition to that, you have situations where Solana is a network that values program reusability.
00:26:54.654 - 00:27:17.314, Speaker A: So how are you thinking about smart contracts in a world where most people in Solana do not deploy their own minting contract for nfts that 99.999% just use the metaplex contract and so on and so forth, is the smart contract wallet future for Solana? Everyone's deploying their own programs or something else.
00:27:19.014 - 00:27:27.346, Speaker B: I'm going to talk in more abstract terms, not to reveal things we're still working on, but I think, oh come.
00:27:27.370 - 00:27:28.534, Speaker A: On, it's just us here.
00:27:28.994 - 00:28:23.394, Speaker B: Sure. But if you look at squats protocol, it is very agnostic. What it really does is just it adds extra logic to pdas, which natively exist on Solana and basically allows you to program how a PDA can manage a certain account. And that part is very agnostic. We are using it to deliver a multi seg product where we're talking about organizations and teams and potential institutions managing on chain assets together, but taking the same protocol and using it to power a more traditional vault experience where it's potentially a cold wallet cold storage alternative, or it's somewhere in the middle between cold storage and hot wallets. That's very much possible. I think cost is much less of a barrier on Solana, and it's still not as cheap as just using regular hot wallet.
00:28:23.394 - 00:29:26.438, Speaker B: But I think it is getting close. And so I think the cost can go down because I think in terms of state storage, yes, it's expensive, but there's the idea that you can reclaim things after some time and so get those costs back. I think also I've heard a lot that at least that's how many people see the future, that actually providers and world providers will actually take on a lot of the cost to facilitate that, and I think on Solana is just much more economically viable to do it as opposed to doing it on ETH. So I think we're still not in a place where I can tell you with certainty this is how it's going to work. I do feel like it definitely can work. And so to answer your question more directly, I don't think we're going to see, even with multi six today, we have very sophisticated teams using squads. None of them actually want to deploy their own instance of squads and have the have themselves burn the authority to that fork program.
00:29:26.438 - 00:30:03.294, Speaker B: They just want to basically deploy a squad from our existing program and this way, just because it's a lot more convenient and because they trust the core program. I think when it comes to smart wallets, a couple of years into the future, if you look at Solana, you will see, I guess, a few standards that make account abstraction on Solana more manageable and easier to interact with for developers. And on top of that, you'll see, I think, a few retail facing, user facing products built where each of those wallets, instead of being just a regular wallet, will be a PDA under the hood.
00:30:04.234 - 00:31:03.714, Speaker A: I want to talk a little bit about usability of squads and multisigs in general. Crypto is pretty famous for technically shipping technology, but not practically shipping technology. From a usability perspective, it's great to say, look, we have all of this fundamental code that you can take and you can build really secure multisigs with, but if it requires a very senior engineer to set up and use the system, the user adoption is just not going to be there, even at the corporate level. Talk a little bit about how you've thought about designing the interface side of a multisig program to meet the needs of everyone from a small group of folks who want to multisig, a three person investment fund that they have up to the needs of a company that's deploying, or a project that's deploying mission critical programs on a network like Solana. And their multisig needs are probably very different than that first example.
00:31:04.494 - 00:31:31.718, Speaker B: Absolutely. Yeah, I think that's a great question. Squad's interface today is really an amalgamation of a bunch of familiar flows and products that you see in just completely different realms, that we fit to specific needs of the users that we have. I think the two big things you can separate. There is one, we call them treasury assets. That's your treasury management component. And then there's developer assets.
00:31:31.718 - 00:32:57.244, Speaker B: And I think treasury assets flows are much more familiar to Coinbase or your more advanced fintech or banking apps where particularly in the new UI that we're about to release just multiple accounts, and it's very transparent in terms of what assets you have, dashboards, analytics, all that sort of information that makes it easier for you to manage the treasury. On the developer side, it's closer to Jira and Lanier, and it's really about how do you reflect those complex on chain workflows that developers have to interact with validators, tokens and programs and put them in a familiar flow that can be an extension of their GitHub workflow, potentially can fit into their task management tooling. I think that's where the focus has really been because treasury and programs are really the killer features that we have in terms of what the interface really allows you to do. I think for program management really brought a lot of visibility what we built just from a standpoint that it used to be all CLI and now it's all an interface. There's upgrade history, you can basically see all the upgrades. There's a lot of instruction data that's getting parsed and displayed for everybody to see. I think for me as being I'm not on the developer side on our team, being a non technical co founder, really, it's very convenient to know what's going on.
00:32:57.244 - 00:33:24.084, Speaker B: Whenever we upgrade a program, it's very clear what we're doing. I think it's been, we pretty much, I think Dogfood everything we build just because the core user archetype we're after is really a team like ourselves. And then there's sort of some ancillary users that definitely find squad useful. But I think the majority of the user base today is just teams building things on Solana just like us.
00:33:24.664 - 00:34:11.344, Speaker A: Yeah. So have you guys thought about, or do you have plans to do something along the lines of user facing information? So, for example, if there's a program managed by squads inherently, you know, things like upgrade history, time locks, these sorts of things. Have you thought about like what? Either providing that data to explorers might look like, or creating some sort of like squads checker that's like a more consumer facing side where, you know, if a program has said, hey, we're using squads as our multisig or anyone as our multisig. Like, I can go to a website and see, oh, it was last updated ten days ago and that feels like a good long time, or, oh, is that last updated 30 seconds ago? Maybe I should wait for a little bit and see if anything bad happens.
00:34:11.804 - 00:34:53.468, Speaker B: I mean, that's something that so far we kind of let every project decide for themselves. Squad links are public, so if you have a write link, you are able to see all the squad details. You're able to see basically all the things that are in our interface. Anybody can have access to them if they have the link. And so there have been projects that would put it on the landing page under a button for treasury or whatever it is. We've seen that with some of the NFT daos in the last couple of years that had been reactive. I think right now we see jitto guys would just post it publicly on Twitter.
00:34:53.468 - 00:35:32.918, Speaker B: This is our multisig, where we manage the programs. I do think there's value in maybe making a dedicated place where that can be visible. I think explorers is definitely a good. I think we'd start with explorers just making sure that they potentially can tag if a multisig is. If it's a multisig, if it's a squads one. There's also a flip side to it that a lot of our current users use multisig, but they're not in a place where community has any control over anything. There's still very much centralized teams, companies building something, and they're getting ready to decentralize, but they want to do it on their own terms.
00:35:32.918 - 00:36:09.014, Speaker B: And so I think there is value in some of that being private. And so privacy is. But I think from our sort of last year of active development, privacy came up more than the need for making things more transparent. Interesting, but I think both are very important. But I think teams care about privacy up until a certain moment. Then they want complete transparency, and the community wants transparency sort of as soon as possible. And I always found it funny when a team would raise vc funding and then somebody on discord would be like, so how are we spending the money? And it's just a random person there.
00:36:09.014 - 00:36:50.314, Speaker B: But I think that also is, I think, relevant to the cultural shift I talked about before, where the lines between sort of daos and companies building things on chain are much more blurred now than they used to be. I think we collectively just need to figure out what are the right tools for each stage of development or project. We have been very much positioning ourselves as a tool up until the moment you're ready to start giving up control over certain core on chain assets that you manage, in squads, you use us. And then as you transition to the DAO structure, there are other tools that you can rely on in slon ecosystem. That's realms mostly.
00:36:50.744 - 00:37:24.894, Speaker A: Yeah, I mean, that's an interesting way to kind of think about that connection there. I want to pivot a little bit and talk about formal verification. Formal verification is a little bit of a touchy subject. Squads v three, I think, was the first version you guys did as formal verification. There's a few programs on Solana, I believe, that have been formally verified, but squads is sort of the one most people are aware of. Talk a little bit about formal verification and what it does and also what it does not do.
00:37:25.634 - 00:38:01.946, Speaker B: Right. So I think quick context in terms of how we got there. I think formal verification was the sort of last frontier, as we were kind of building out the sort of v three, the program security is top of mind with everything we do, just because of what's at stake. And so security audits are great. They help you identify vulnerabilities. But I was always asking everyone around me, is there anything else we can do? I want to be 100% certain. How do I get 100% certainty? Everybody would tell me it's not possible to get to 100% certainty.
00:38:01.946 - 00:39:07.228, Speaker B: But formal verification is a holy grail. The last thing that if you do that, you're very much solid. So I think the way, in a very non technical way, how I describe formal verification to people is that basically you mathematically verify what is possible to do within a certain program and what's not, and you really care about it, because it basically allows you to mathematically prove that, for instance, unless you meet a threshold in the multisig, the assets can go out. And I think that's just a very different approach to looking at the code, as opposed to looking at from a stand, because security auditors, they would come in and they would think like an attacker. Neodym auto cycle, all the great ones, they will think about. From a standpoint, if I wanted to attack a program, what would I do? Formal verification is this very different, more mathematical, academic type of approach to looking at the code base, which I thought was valuable in its own right, just because it's different. So I felt like we definitely need to get there one way or the other.
00:39:07.228 - 00:40:17.958, Speaker B: And so I think the biggest complexity we found with formal verification, and we are about to embark on this journey with the next program and with more experience and understanding. I think the biggest complexity is you definitely need to identify the properties correctly that you want to verify, because verifying every single thing in a complicated program is very hard or nearly impossible. And so you definitely need both, and you need your auditors to work with the team. That's from reverifying to really understand what are the core properties that you want to verify to make sure that for squads, actually it's relatively straightforward, just because all you really care about is this consensus. All you care about. Can this be done if consensus has not been reached that the team has set up? When deploying a multisig, there is definitely edge cases that are dangerous, that you need to look out, but they get more in a process, they get more in terms of bricking or social engineering attacks, basically other things beyond pure on chain vulnerability. And so formal verification.
00:40:17.958 - 00:41:44.324, Speaker B: For us to ask your question, what it does and doesn't do, what it did for us is it's been just a very different look at the program, which was really helpful, and also auto side did a terrific job just because they had to develop a framework before they could actually formally verify our own program. And so I think it's been a learning curve for them, but it's also been interesting to go through the process for us and for the next program, we're actually probably going to do two formal verifications just with different teams, to, again, just get as many eyes as possible on it and to basically understand, is there something we're not looking at? But the thing that we notice is once the program is secure, and at least many auditors have looked at it, all the core vulnerabilities have been identified. The auditors also start looking at things beyond that. It's like social engineering. What if there's some malicious actor that is a signer on the multistick and they want to do something there? You can actually go to the top of the stack, to the front end, and see what can be done there. And so the room for you to do security work is sort of endless. And we usually spend at least four months, four or five months total before for all the security processes that we have to say, okay, we're starting to think about immutability now.
00:41:44.324 - 00:41:55.054, Speaker B: And so I think for breakpoint, that's what we're thinking for the next version of the program. That's when we can start thinking about immutability. Until then, it's more audits and formal verifications.
00:41:55.674 - 00:42:32.164, Speaker A: Nice. So I think my last question before we wrap up here today is around the business model. So you guys are venture backed, you've raised rounds before, you've been around for a while. What is the monetization and the business functions around something like squads look like? It's undoubtedly a incredibly strong public good, but today there's not really directly a fee to use squads. How have you seen either other multisigs in the industry be able to establish that? Or and where do you kind of see that going for squads.
00:42:32.504 - 00:43:05.850, Speaker B: So we are, we've been thinking about this a lot in the last sort of six months. Like the first six months since the launch of v three just been very chaotic. And then. And then also those months helped us solidify, you know, product market fit on Solana. And starting from this year, we've been thinking a lot about what's the right path here because we have so many avenues to do it. The question is about doing it right. The options that we landed on are it's either the access to everything is completely free.
00:43:05.850 - 00:44:07.026, Speaker B: In terms of front end, obviously the program is open source, it exists on chain, but in terms of the front end, the experience that we provide is either completely free, but there are internal fees involved because we allow to do native staking, liquid staking, swaps, tons of integration that we work on, and then additional features on the developer side, they definitely fall in the bucket of added value as opposed to being there with the basic version of the product. That's one option, and then the other one is where it's more about some features. The core stuff is free, but then the advanced features are gated through, whether it's a subscription or a more crypto native way of generating revenue. That's more about form, less about substance. But that's where we have landed in terms of other safe OnivM doesn't directly monetize their UI. They're, I think more going in the direction of. They're encouraging protocols to build on top and they encourage more uis to be built.
00:44:07.026 - 00:45:01.830, Speaker B: And I guess I actually don't know exactly what the business model there is. I think at the moment it's not also fully implemented. And then MPC providers and wallet as a service, it's all subscription based subscription. But also there's usage metrics that can lead you to being charged more. I think today, the way we're seeing it on Solana, we can definitely with offering that we have fall in line with RPC providers, on chain indexing, basically all the sort of on chain services that you as a startup building something on Solana rely on. So we do see a potential for us to fit in there. And then as we are thinking about more institutional customers, there's other models because I think MPC, institutional wallets, they charge you a flat fee and then there's also certain bits they charge on volumes and swaps and what you see deals.
00:45:01.830 - 00:45:09.154, Speaker B: So as these things scale, it can sort of become more apparent, but for now, that's sort of the thought process we went through.
00:45:09.974 - 00:45:58.384, Speaker A: It's one of these perennial things in crypto, which is how the most technically valuable and socially valuable assets and protocols built on top of networks can actually monetize. This is not a squad specific or multi seq specific thing, but you see this across the board, where some of the most useful and powerful work, the business models maybe haven't quite caught up yet, or the paying customers haven't quite decided it's worth paying for yet to get there, which is interesting. We sort of have an App Store problem where people will gladly go and spend $20 to go see a movie, but they won't spend $3 on an app. It's interesting to think about a lot of the core infrastructure of crypto is still in that place right now, today.
00:45:59.084 - 00:46:40.176, Speaker B: Yeah, I totally agree. I think when you think about the magnitude in terms of the impact that managing these assets that our users manage for squads, the impact that it can potentially have if there are any issues, and basically the value that's being secured. Same goes for safe. On the VM, we are seeing those some uis on top of safe starting to monetize, and that is looking a lot more. I think it's very much defined by the user archetype you're after. If we're talking about organizations and startups, SaaS model really becomes very familiar to many of these teams. First, everybody's talking about subscriptions, and I think we definitely would like to be slightly more creative there.
00:46:40.176 - 00:46:54.844, Speaker B: But I also think that's something that crypto companies should start experimenting for with as well, because I haven't seen that done meaningfully on Solana ever, and so definitely would be interesting to see how that can work.
00:46:55.424 - 00:47:00.204, Speaker A: Agreed. Well, Stefan, thank you for joining us today on validated.
00:47:01.044 - 00:47:03.364, Speaker B: Thank you, Austin. It's been fantastic experience.
