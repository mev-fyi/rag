00:04:15.774 - 00:04:16.874, Speaker A: All right, we're live.
00:04:22.174 - 00:04:23.114, Speaker B: Hey, everyone.
00:04:23.894 - 00:04:24.874, Speaker C: Hi, everybody.
00:04:25.294 - 00:04:51.972, Speaker B: Hi, everyone. So, who's leading the stream? Actually, that's an interesting question. Oh, yeah, that's a good one. We started getting questions. Not yet. So let's start. So, folks, I'm Anatoly.
00:04:51.972 - 00:05:08.964, Speaker B: I am co founder of Solana Labs, the company that developed the Solana protocol. And you guys are here for a very special twitch stream. We'll be talking about Neon, which is a virtual machine that interprets evie and biker.
00:05:13.344 - 00:05:38.756, Speaker C: I will then introduce ourselves. So I'm Marina from Neon Labs. And the guys here, Vitaly, James, and Simon, they are with me from neon Labs as well. And we're building this virtual machine. Ethereum virtual machine. Because we do believe that the depths need the best from both chains, if they are a man. Solana.
00:05:38.756 - 00:05:51.504, Speaker C: To grow. To grow. And so this is what we have. And we can talk about it a little bit, or we are ready to answer any of your questions.
00:05:53.724 - 00:06:14.034, Speaker B: Cool. So let's kind of start with the what. Like, what actually is neon? Is it like, a smart contract? Is it a side chain? How do I tell the difference? How do I know what it is versus every other way to run EvM?
00:06:15.574 - 00:06:46.884, Speaker C: Okay. The key thing to understand here, that neon EVM is a smart contract on Solana. And because of this, we have all the advantages, all the advantages of Solano, so to say. We're capable of processing the transactions in parallel. And it's crucial, and it's very important to understand. So it's from the tech side. A smart contract.
00:06:48.984 - 00:06:54.924, Speaker B: Cool. Awesome. And then I think I jumped into questions a little too early. Let's introduce everyone else too.
00:06:56.874 - 00:07:04.654, Speaker A: Sure. I guess I can start and then we can just kind of go around. I know everyone's got a different configuration here, but.
00:07:05.434 - 00:07:05.978, Speaker B: Hi, everyone.
00:07:06.026 - 00:07:19.454, Speaker A: My name is James Giguchi. I am head of strategy and business development with Neon Labs. Super excited to engage with you guys and read your questions today.
00:07:21.674 - 00:07:22.934, Speaker C: Vitaly, please.
00:07:23.464 - 00:07:31.404, Speaker B: Hi, all. I'm vitali. I'm product marketing manager at Neon. Happy to be here with all of us.
00:07:32.064 - 00:07:39.324, Speaker C: Simone, please. We can't hear you. Simon.
00:07:41.944 - 00:07:57.674, Speaker D: Hi, everyone. I am Simone Minvedev. I senior developer in neon Labs. I'll be happy to answer for technical questions.
00:07:58.374 - 00:08:09.038, Speaker C: Thanks a lot. So, as mentioned, I marina agri. I'm running neon labs, so we can continue with questions. Anatoly.
00:08:09.206 - 00:08:36.654, Speaker B: Awesome. So it's interesting that it is a smart contract in Solana. Most of the time, when people talk about running EVM, it's run in its own, like, IPC pair, like, IPC chain, right? Like in its own tendermint in a parachain and polkadot. What makes this so important that it's actually just a smart contract on Solana.
00:08:39.634 - 00:09:28.330, Speaker C: As mentioned already, that the crucial thing for us is to have to be able to execute transactions in the way native to Solana. That means in parallel, because the advantages that Solana has, as you might know, they come from this crucial thing. Then you're capable of executing transactions in parallel. And so the throughboot, the low fees, et cetera, et cetera, everything comes with it. And so the standard evms, they process transactions sequentially. And so, and this is the limit that they have. So if you process something sequentially, so definitely you will be in disadvantage in comparison to parallel execution.
00:09:28.330 - 00:09:41.752, Speaker C: And for us, when we tackle this problem, the key thing was to give DApps the opportunity to execute transactions in parallel.
00:09:41.858 - 00:09:44.704, Speaker B: So. So.
00:09:46.644 - 00:10:14.404, Speaker A: I got a good question from, from the chat, if you guys don't mind. I think this would dovetail nicely into some of the value add and like why, you know, why bring EVM to Solana? So this guy, hey Sanji, and I hope I'm saying your name correctly, he says, if ETH based DeFi is bridging to Solana, what does neon bring to the Solana protocol via EVM? So essentially, why neon?
00:10:20.384 - 00:10:22.004, Speaker B: So you guys, tell me why?
00:10:26.384 - 00:11:17.346, Speaker C: So this is what we discussed. Basically it's like it's, it's not a breach. And it's crucial to understand the difference between neon EVM and any bridge available. Also it's not about transferring funds from Ethereum to Solana. It's about being able to process solidity contract on Solana with the speed and robot and fees of Solana. So this is what Ethereum neonadium brings to Solana, to blockchain space, so to say. But then the transfer of tokens per sieve from Ethereum to Solana and back, so has to be done via bridges.
00:11:17.346 - 00:11:20.574, Speaker C: So we will have integrations with the bridges.
00:11:22.914 - 00:12:38.324, Speaker B: So I think, practically speaking, I think the way I think of it is that you have a Linux environment or a BSD or Windows. Solana is an operating system with its own really weird way to execute code, but it can execute generic code. In fact, the code that you execute looks like executable files that they do on Linux. It just happens to be its own bytecode. This port is no different than porting EVM from Linux X 86 to Windows X 86 or Solana BPF. The benefit of this is that you have a lot of folks that have built applications on Ethereum that have done a bunch of audits that trust that code, and it's really hard for them to rebuild that infrastructure in a new language and a new environment. But having EVM means that they can bring it over and now execute it in the same operating system in the same computer as everything else that's running on Solana, which is really cool.
00:12:38.324 - 00:13:10.016, Speaker B: And it's really cool to me that the amount of engineering effort that went into designing this thing that still allows for parallel execution and, you know, high throughput, because normally EVM is single threaded. You know, the way that it executes blocks in Ethereum is it executes one transaction at a time up until the gas limit of the block. So something that I wanted.
00:13:10.200 - 00:13:15.088, Speaker C: Oh, yeah. So remember, we will continue because there are more questions in the chat.
00:13:15.256 - 00:13:15.560, Speaker B: Sure.
00:13:15.592 - 00:13:42.884, Speaker A: Yeah. So basically, guys, I'm tracking the questions in the chat. So if you want to go on and talk about something, go ahead. But I've got a couple questions that I can address here if you'd like. I think one good one here by ninja tribe Venom. He asked, will EvM be composable whistle on adapts? Like for example, will it be able to use serum's order books?
00:13:44.484 - 00:14:35.486, Speaker B: Yeah, this is, it's running in the same state machine. It's as a program alongside serum. So just like Java can access Windows APIs, you can access serum, you can access all the other APIs, but it is a bit of work, and about the same level of work as you would need to write from Java to access the new Windows APIs. You got to like plumb that, that data through. But it's not, doesn't require any additional trust properties, it doesn't require a proxy or like a side chain or transferring assets and like locking them in somebody else's keys. So it's purely trustless, but it's kind of a. I don't know, that kind of work isn't always fun like that.
00:14:35.486 - 00:14:44.234, Speaker B: That's the way I look at it. It's like grunt work, engineering grunt work. Somebody's got to do it. Probably Simone.
00:14:47.494 - 00:15:13.824, Speaker C: Yeah, right. But basically, if you want to run your solidity contract on your own EVM and want to address some functions or access some applications built on natively on salon, definitely you need to, to write down in your code these functions, these call functions, and enable these actions.
00:15:16.284 - 00:15:56.514, Speaker B: The tricky part, I think, that we haven't fully thought through is in that neon supports incremental computation, which allows it to process multiple blocks. And if that computation eventually fails and you're also causing like Solana state transitions that are atomically committed. Dealing with both of those states, you got to be pretty careful. So for some of these applications, you may want to break them up into like atomic pieces. But that's work, right? It's all doable. It's just a bunch of work.
00:16:00.434 - 00:16:33.214, Speaker A: Totally. We got a good question. Maybe it would be helpful for us to so Xerox Dima basically just asks. Well, actually, sorry, before we get to that one, astromartian asks, basically, can we just go into a little bit of more detail on the architecture of our solution? Is it built directly on LLVM? Does a compute limit for neon exist since they can execute transactions spanning blocks? I know some of that you just mentioned, but maybe we can go little bit more into the architecture so they understand that better.
00:16:36.114 - 00:16:39.734, Speaker C: Okay, Simone, do you want to open this question?
00:16:42.034 - 00:18:24.714, Speaker D: Yes, I try to explain as Marina say neon Eve. It's a program running on Solana. But to provide a service for users, we save compatibility with Ethereum protocol and user connect to neon event through web3 proxy. For connect to neon web3 proxy, a user can use any Ethereum wallet like metamask. When user create a transaction metamask sign transaction with private user private key and send it to proxy. Proxy forms Solana transaction. It's doing overwriting Ethereum transaction over one or several Solana transactions and sent to through Savannah core.
00:18:24.714 - 00:18:58.024, Speaker D: Then um. Check signature from user and execute by quote, contract by quote. When transaction finished, the state of contracts commit in Salamo state.
00:19:06.124 - 00:19:46.234, Speaker B: Just to give some examples, let's say one user submits a spend from user a to user b for the same contract. And then another user submits a spend from themselves to user b for the same ERC 20. So two transfers, they're touching the same state. Who wins? And let's say these, these specific transfers are expensive and for some reason need to span multiple Solana transactions. How does that. How does this EVM resolve that?
00:19:55.694 - 00:20:34.524, Speaker D: Do you mean that some user make transfer talking within same contract? Yeah, in this case. In this case we can't execute such transaction in parallel and it will be executed one than another transaction.
00:20:47.104 - 00:20:56.564, Speaker B: So if the proxy tried to do it right, if the proxy failed or there was two proxies that had a collision, what would happen on chain?
00:21:00.794 - 00:21:55.544, Speaker D: If transaction will execute in one iteration, then Solana core will order such transaction. If we can't execute in one iteration and switch to multi iterative execution, then new EVM proxy will reorder transaction but non EVM log account which involves in first transaction. So we second transaction can iran until first finished.
00:21:56.284 - 00:22:47.334, Speaker B: So the second transaction, if somebody tried to initialize it, that initialization would fail. Right? Okay. So hopefully that clears up that question. That's a really good question. The way I understand it is that like postgres or any traditional database, when you submit like a long running job, the database locks a bunch of accounts until that job completes. And similar here you submit a job to evm it logically and those are stay locked until the thing completes. So any second transaction is going to be basically fail if somebody tried to submit it on Solana, but the proxy can delay until that's done and then send it afterwards.
00:22:47.334 - 00:23:00.054, Speaker B: Cool. What other questions do you see that's good?
00:23:04.034 - 00:23:36.164, Speaker A: Not a ton else we did. You know, I think of course we'll probably get this question a lot. So to address, we got a question in regards to tokenomics and when Neon will be available. Neon token will be available. Obviously we've cited that we'll have a token in our white paper if you guys read that. But we haven't firmed up details on when we're launching that or anything yet, so stay tuned there.
00:23:40.464 - 00:24:15.254, Speaker C: So in addition to that, Neon will be governance token only. What do I have right now in mind? So we don't want to disrupt user experience. So user experience should be as smooth as on Ethereum. So the users will be able to pay in ETH Mike tokens and ERC 20 tokens. And so then the operators who are running the proxies, they will be paid to Solana validators in Sol tokens. So the neon token will be just a governance token.
00:24:18.034 - 00:24:31.054, Speaker B: Cool. So just so folks understand, that means that you can pay in any token and for gas, is that compatible with how metamask and ETH kind of work out of the box?
00:24:32.674 - 00:24:50.914, Speaker C: Yeah, yeah, it's 100% compatible. So it should just do the, they will choose the neon EVM network, so to say, and then they will have tokens available and they will pay just naturally via metamask environment.
00:24:53.134 - 00:24:54.114, Speaker B: Got it.
00:24:55.694 - 00:25:06.474, Speaker A: We got a question about bridges. So this guy is asking, you mentioned bridges. Does that mean that there are plans for cross chain liquidity for some protocols?
00:25:10.064 - 00:25:27.764, Speaker B: So there's a bridge called wormhole which you can pass Ethereum assets through, and then those assets are SPL tokens in Solana. And I believe there's an ERC 20 interface that does the plumbing to talk to SPL tokens, right? Is that correct.
00:25:31.964 - 00:25:32.864, Speaker C: Simone?
00:25:36.284 - 00:26:01.424, Speaker D: Yes. Inside Neon AVM solidity contracts can use ERC 20 writer contract, which give access to SPL token balances.
00:26:05.204 - 00:26:16.624, Speaker B: Have you, have you thought about how that would work in reverse? If I define an ERC 20 token inside neon, how do we mint it on salon?
00:26:27.864 - 00:26:42.284, Speaker C: That's Madrid. No nasalana.
00:26:49.864 - 00:27:21.104, Speaker D: For standard 20 implementation. For ERC 20 token, we suggest ERC 20 bridge, which can take token inside new one EVM and pass it to some SPl token.
00:27:25.644 - 00:27:41.544, Speaker B: Got it. So does the bridge, is the bridge smart enough to understand if I take an ERC 20, if I take an SPL token, wrap it into an ERC 20 and then pass it through, is it going to unwrap it to the right thing?
00:28:11.774 - 00:28:30.384, Speaker D: It will be two different per minute. Yes. Bridge.
00:28:56.964 - 00:28:59.864, Speaker C: Then you will have two different SPL tokens.
00:29:01.484 - 00:29:27.384, Speaker B: Got it. That might be. Yeah, we might need to figure out how to make it the same. That's an interesting, that's a challenging problem. Cool. There's a good question. So how long is it going to take? Let's say I have an ethereum application that works in Ethereum.
00:29:27.384 - 00:29:30.924, Speaker B: How long will it take to get it running on the end?
00:29:32.424 - 00:30:02.614, Speaker C: It depends on your deployment skills. So if you know how to deploy your application so you can try to deploy it on your own EVM. Right now, because we did this for Uniswap applications, it took us quite a long time, but we didn't know quite well Uniswap application for us to sell, and then we had to figure out how to deploy it properly. But then. So if you know how to do it, so you can deploy it right.
00:30:02.654 - 00:30:06.874, Speaker B: Now, does truffle work or.
00:30:12.494 - 00:30:14.794, Speaker C: It should work? It should work, yeah.
00:30:20.894 - 00:31:04.890, Speaker A: Okay, cool. You know, another question that I think we sort of touched on earlier, but might be worth bringing back up. Is it, you know, one guy asked Will, will eventually mms compete, so native ones like Sierra mortar books versus, you know, the Uniswap ones that we would help port over. Right. And you know, I think to a certain extent there is some competition, but I think, like we mentioned, there's also the composability and also access to new liquidity. Right. So, you know, right now, many users on, we'll say, like EVM compatible side chains and L2s are, we think of them as happier Ethereum users.
00:31:04.890 - 00:31:15.410, Speaker A: Right. They're just, they've got. But it's the same liquidity versus the liquidity on Solana right now is separate.
00:31:15.482 - 00:31:15.666, Speaker B: Right.
00:31:15.690 - 00:31:36.124, Speaker A: And so the ability to access that as a new market and also compose with any of the native Dapps is kind of the, is the pro there? What else do we have.
00:31:40.384 - 00:31:45.976, Speaker B: Yeah, truffle should work. Yeah.
00:31:46.000 - 00:31:49.924, Speaker C: But as far as I remember, Simone, you used remix as well. Yep.
00:31:51.694 - 00:32:14.794, Speaker D: Yes. For work with Neon, evil salinity and developer can use remix and another tools which exist for ether applications.
00:32:20.474 - 00:32:54.894, Speaker A: More questions, guys. Keep them coming. So he's one. I don't know how to say psych meister. Sorry if I'm butchering that. Is there any of the toolkit that wouldn't be compatible? I'm guessing he's mentioning Ethereum based dev tools that wouldn't be compatible with Neon.
00:33:00.474 - 00:33:08.214, Speaker C: I can't think of anything that wouldn't be compatible. But XMl maybe will not work with neon EvM.
00:33:10.854 - 00:33:20.194, Speaker D: We try to support any toolkit to work with Neon.
00:33:23.454 - 00:33:31.194, Speaker C: Everything should work. But then if something doesn't work and let us know immediately, we will just fix this bug.
00:33:33.534 - 00:33:34.314, Speaker D: Cool.
00:33:36.844 - 00:33:54.944, Speaker A: One question here is on our timeline for the project. So obviously we've deployed on Testnet already and then we are looking to deploy on mainnet sometime in September, probably late September.
00:33:58.324 - 00:34:07.056, Speaker B: Yeah, I think audit. Right? Audit and maybe like a few other things. Performance optimizations.
00:34:07.160 - 00:34:20.164, Speaker C: Yeah, the critical part is to audit our smart contracts in order to be ready to unbot defi applications, et cetera.
00:34:22.624 - 00:34:29.044, Speaker B: Here's a hard question. What happens if ethereum changes? Like Ethereum adds a new feature?
00:34:32.004 - 00:35:10.684, Speaker C: Yeah, it's a very simple question because we thought about it, we've been running different blockchains for several years and we faced this very nice problem, which is called hard forks. So in our case, we have to update neon EVM contract and it's like, okay, we have to update, but then we are independent in this. We will update it easily and the decentralized governance will hopefully approve these updates. And then we will have the up to date neon evM.
00:35:14.704 - 00:35:31.104, Speaker B: Got it. So is there any plan, I guess that there would be an update to the currently running binary versus having an EVM V one and EVM V two and have people migrate. Correct. So you would just update the code directly.
00:35:33.204 - 00:35:35.144, Speaker C: Simone, is it correct.
00:35:50.004 - 00:35:57.924, Speaker D: We can update program in Salana?
00:36:51.794 - 00:37:03.334, Speaker B: Okay, yeah. Okay, so you're gonna. So there's gonna be a direct update to the binary code through a governance vote if there's an update. Yeah, got it.
00:37:04.354 - 00:37:08.014, Speaker C: Sorry, guys, we have to switch to Russian from time to time.
00:37:13.154 - 00:37:16.174, Speaker A: Yeah, I'm just as confused as the chat when you guys do that.
00:37:16.954 - 00:37:23.094, Speaker B: So, yeah, if they've been following Solana, they should all be learning russian and rust.
00:37:32.634 - 00:37:52.234, Speaker A: One question that came back up and I think might be helpful to just revisit. I'm trying to pull this back up here. So can you speak to the experience of interacting with neon apps as a native Solana user? So can I use neon uniswap from a native Solana address.
00:38:06.454 - 00:38:54.944, Speaker B: So I can answer that? So this is going to be somewhat complicated because the wallet, as a native user, like Phantom, when you sign a transaction there, that transaction, the wallet has to understand what it's signing. So it actually needs to know that you are sending Ethereum bytecode, like Ethereum formatted data. It's got to generate that data and then sign it with an EVM compatible signature. So Phantom as a wallet would need to add support for it directly. And this is probably something that is going to happen to every wallet in the world, like support for some form of Ethereum compatibility alongside of Solana as well.
00:38:57.004 - 00:39:08.924, Speaker C: Yeah, but we're in talks with Fantom, so they have their own pipeline in terms of delivering features, but they know about us and hopefully this compatibility will, will appear.
00:39:10.704 - 00:39:11.484, Speaker B: Yep.
00:39:17.904 - 00:39:34.644, Speaker A: Let's see what else here that kind of knocks out two or three of the other questions that are in this chat. What else do you think we are? We might be missing you guys.
00:39:36.544 - 00:40:43.804, Speaker B: So I think some of the cool thing what's really cool about this is Ethereum two is planning to not do any execution at all. It's just there to provide data availability and fraud proofs. But you still need an execution layer. Somebody still needs to run the Ethereum transaction somewhere. What I really like about Neon is that you could configure every kind of roll up on Ethereum with whatever fraud proofs you want and then point all of them to neon as the execution environment and you get the benefit of whatever you wanted out of Ethereum. Plus this really fast, high performance parallel execution engine, which is Ethereum running on Solana as a smart contract. So in a weird way, because of the design decisions we made like two, three years ago, both us and the Ethereum teams have kind of built two very important pieces of the same pie, same puzzle.
00:40:48.224 - 00:41:54.328, Speaker C: Yeah, I see a question here about the integration of and compatibility with ERC 721 tokens and other NFT standards. So we're in discussions with NFT dapps as well, so they need the standard to be present. Right now we don't support ERC 721, but then later on we will definitely have it available as well. Yeah. In terms of demo, yes, we do have Uniswap demo available, so you can look at it on our GitHub. It was available on the first day of testnet launch, so it was live, but then we didn't change anything. Like nothing.
00:41:54.328 - 00:42:35.214, Speaker C: So we didn't change anything in uniswap contracts and we didn't change Uniswap interface. And so Google thought it was a phishing page and phishing site because of these no changes at all. And so we had to remove the Uniswap page demo from our site. So now we are remaking the Uniswap interface in order to let Google be available on web. But then everything is ready and we tested our solution, just playing with Uniswap.
00:42:38.154 - 00:42:40.014, Speaker B: So is there a demo live already?
00:42:46.774 - 00:43:04.594, Speaker C: It's like in terms of it's live, then we can access it, but then it should be live for users as well. So we still have to redo the interface and then it will be live on our side.
00:43:07.474 - 00:43:08.454, Speaker B: Got it.
00:43:11.394 - 00:43:34.574, Speaker A: Maybe one last question we can take here. We got a question to just clarify one part of our infrastructure, which is the operators. I don't know if we went into any detail on what is the role of an operator in the proxy. Do one of you guys want to clarify that for the chat before we call it here?
00:43:36.394 - 00:44:29.854, Speaker C: Yeah, definitely. So the main tool, so this proxy server, web3 server, which we need in order to prepare transactions to be executed by neon EVM. So like we have ethereum transactions in ethereum format and we have to wrap them into Solana transactions and then to do everything that is needed to do in order to execute them in parallel. That means we need to understand the accounts that will be participating in these transactions, et cetera. And these actions are done by this proxy. So it prepares transactions to be executed later by neon EVM contract. And this proxy can be run by neon evm operator.
00:44:29.854 - 00:44:51.754, Speaker C: And then in this case neon evm operator will be rewarded, et cetera, et cetera. But then this functionality, proxy functionality can be built as a client library by applications. And then in this case, so the applications will play a role of these neon EVM operators.
00:44:55.054 - 00:45:45.564, Speaker B: Just to clarify, the proxy itself is trustless that the only thing that it really does is it computes. Which Solana accounts that hold state relevant to this transaction need to be included in running this transaction while the EVM operates on this ethereum signed payload. So that computation, once it does it, if it does it incorrectly, the whole thing fails and anybody can restart it. And it doesn't cost the user anything because the proxy is what's being the actual soul to do it. So the proxy has to do a good job or it's just burning soul tokens for no reason.
00:45:51.404 - 00:46:31.476, Speaker A: Do we do we have time for a couple more? It looks like we got a couple more trickle in when I want to mention that maybe we give it another 510 minutes. Does that work for you guys? So there's one question here. So mocha Cola says, basically, if Solana wallets cannot use neon apps and Metamask has to use bridges without the ability to engage with native Solana contracts, why use neon instead of another layer? Two. So I think there are a couple of things there.
00:46:31.580 - 00:47:16.532, Speaker B: Yeah. So it can engage with native Solana contracts through metamask. So that's one of the benefits is you could actually build a CRM API in Ethereum. Right, in solidity, deploy that program inside EVM, and now you have access to serum from an application like one inch or something like that, that wants to route orders. So that's totally possible. Having a support for signing Ethereum transactions from something like phantom, that's going to come eventually. It's just going to take some time.
00:47:16.532 - 00:48:13.244, Speaker B: But there's a lot of benefit from users that are on Ethereum to have more options, something that isn't binance, smart chain or matic, that has much lower censorship resistance than Solana itself. And probably, I suspect that Solana is going to end up being cheaper for those users and have less congestion in the long run. And you also get the benefit of the liquidity in Solana. So even if you don't access serum directly, a market maker can trade on a state inside the EVM chain and atomically change their position in serum, which would effectively bridge that liquidity. So you kind of, you get the benefit of that just by being in the same state machine.
00:48:17.184 - 00:48:30.164, Speaker A: Awesome. So maybe we can just wrap this up by letting people know where they can find us and follow along with our progress and everything like this for updates.
00:48:32.814 - 00:49:23.210, Speaker B: Well, yeah, there was a question. Is this going to bottleneck Solana? So the cool thing about neon is that the transactions that neon operates, they fit within the Solana transaction budget like anything else, right? So I kind of think radium transactions are the most expensive ones that we're executing because they, like, lock, you know, 50 accounts. So in that sense, like, I don't expect there to be any differences between, like, from the state machine. The state isn't going to care if it's executing EVM bytecode or some other smart contract. It's not going to know. Cool.
00:49:23.282 - 00:49:46.458, Speaker A: Awesome. So thank you, everyone, for your questions. If you have any other questions, obviously you can reach out to any of us on Twitter. We also have a lot more in depth information. If you want to check out our website@neonlabs.org, dot. We have some technical documentation out there.
00:49:46.458 - 00:50:06.694, Speaker A: We've got our white paper. You know, if you want to look through our GitHub that's available there, you know, all of our links, including a Twitter discord, are up there. So please feel free to reach out to us and get in touch. We'd love to hear your feedback and any other, you know, clarifications we can provide you.
00:50:07.914 - 00:50:21.314, Speaker C: And better, better just deploy something using neon EVM and then. Yeah, it's like the best way to check what we have here.
00:50:23.894 - 00:50:24.794, Speaker A: Definitely.
00:50:25.694 - 00:50:29.834, Speaker C: Okay, so thanks a lot.
00:50:30.214 - 00:50:31.694, Speaker B: All right. Thank you, guys.
00:50:31.854 - 00:50:32.334, Speaker A: Thank you, everyone.
