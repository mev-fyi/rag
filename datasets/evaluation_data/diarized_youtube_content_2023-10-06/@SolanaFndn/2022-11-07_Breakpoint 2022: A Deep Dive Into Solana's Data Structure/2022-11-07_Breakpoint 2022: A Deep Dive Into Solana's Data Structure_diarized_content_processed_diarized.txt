00:00:00.360 - 00:00:44.658, Speaker A: Hello everyone. Olivier from Sonarwatch. And today I'd like to talk with you about the Solana data structures. So let's dive in. Okay, first thing first, if you are not really familiar with the Solana blockchain, what we call programs, also known as smart contracts on other blockchains. So as soon as I will speak about program, it will be kind of a smart contract. So on the Solana blockchain, we have three kinds of accounts.
00:00:44.658 - 00:01:33.090, Speaker A: The first one is the data accounts that will store all the data that you need to run your programs. The other type of accounts that we have is the program account that will store the executable code. So basically the program accounts are the smart contracts, and then we have the native accounts. But the native accounts is for the Solana blockchain working well, so we don't really care about it. Right now. We are more focusing about the data accounts and the program accounts. So below here we have the program account, any program account.
00:01:33.090 - 00:02:24.004, Speaker A: So a smart contract is owned by the system program of Solana. And on the blockchain it will say that it's an executable account. It means like it can execute some code and the data is stored on the data property, and it's the executable bytecode that the blockchain will use to execute the smart contract, the program. On the other side, we have data accounts. So this is this one, the data accounts belongs to a program account. So let's say any program account can create data accounts that will store the data. So the owner of the data account is the program account.
00:02:24.004 - 00:03:06.824, Speaker A: And we can see also here that it's not executable, which means that it's only data. We are not running any code on that type of account. It's just for storing the data. And here we have also the data on this example is just a counter set to one, just another example. Here we have the token program. The token program and the token program can create two different types of data accounts. It can create the tokens that we have here on the left, on the right we have the token accounts.
00:03:06.824 - 00:03:58.868, Speaker A: So let's, let's, let's. We can see here that we have the USDC mint, which is a data account owned by the token program, and we can see some data on it. We can see the supply, the supply of the USDT, we can see the decimals, we can see the freeze authority and some other data. And any token owned by the token program is an account of 82 bytes. So this is for the tokens. And let's say you have to hold, maybe you want to hold some USDC or USDC on your Solana wallet. You'll need to create a token account, which is 165 bytes.
00:03:58.868 - 00:04:30.924, Speaker A: And this account data will store some data about who is the owner of this account. So the account GXJT, the owner of this account is hack h. So this is my demo account that I use for hacker houses. So this is why it's a vanity address. And then we have the means. So the mean is EPGF. So this is the same address that we can see here.
00:04:30.924 - 00:05:33.442, Speaker A: So it means that this token account will hold some USDC, and under that we have the amount. So the amount here is 75,000. But you need to keep in mind that you will need to divide this number by ten because USDC have six decimals, because usually we don't want to deal with decimals on the data that we store on the blockchain. So that's why we use big number that then we divide it by ten, six to do not deal with decimals. And you have, you have some other accounts, let's say here we have a second account also owned by me, but the mint, the mint is different, is the mint of the amsoil. So if you don't know the amsel, it's a liquid token, liquid token on the Solana blockchain. So here we can see that the amount is 500.
00:05:33.442 - 00:06:14.824, Speaker A: But you need to keep in mind that you will need to divide this number. So here is how the data is stored on the blockchain we can see here. So here is the structure of the token account. So the token account was this, sorry, was this part on the right. So the data is stored this way. So here we have the 165 bytes, each square is a byte. So we have our 165 bytes, and this is how the data is structured.
00:06:14.824 - 00:07:14.146, Speaker A: 1st, 1st, 32 bytes are dedicated for the mint, next 32 bytes are dedicated for the owner pub key. And then we have the amounts, we have also some other information that we don't really need to understand right now, but we have the mean, the owner and then the amount. So this data use the borch here, the Borg standard, to be encoded and decoded. So yeah, you need to keep in mind that all the data stored on the Solana blockchain, you need to use the Bosch standard to decode it. And if you want to put some data on it, you will need the Bosch standard to put data on the blockchain. Yeah, so one tool that I really like to use is the Solborge decoder. It's a website that will help you to decode the data that you can find on the Solana blockchain.
00:07:14.146 - 00:07:53.540, Speaker A: So you will paste the data account address on the website. It will show you. So the address, it will show you the owner of this data account. So here GXJT is owned by the token program and next we have the data. So here it's a buffer. But the solver decoder will help you to decode this buffer of 162 bytes. So we are telling to Solgebolge decoder website that the first property is the mains, it's a public key.
00:07:53.540 - 00:08:52.458, Speaker A: So a public key is 32 bytes on the Solana blockchain. So you are basically putting the same fields that we have here and the solver decoder tool will decode this for you. Now we'll see some examples on how to directly fetch the data on the blockchain using the Solana websterii JS NPM package. So this is a bit more take slides. But basically what we have to do is to create a connection. The connection will handle the communication between you and an RPC server. Then you need to create a public key.
00:08:52.458 - 00:09:48.664, Speaker A: This is the address of the token account that you want to fetch. And then you just need to use the get acount info method from the connection object to get the data stored on the blockchain. And here we can see on the output that we have a data, a data field which is a buffer. And we can see here like the buffer starts with C six FA and it's exactly the same one that we have here on the previous slide, C six Fa. So yeah, this is, we can also see that it's not an executable. So it means that this is really data, it's not a program that executes code, it's only data. And we can also see the owner which is at the token action program.
00:09:48.664 - 00:10:45.154, Speaker A: So this is how to fetch the data from the blockchain. But as you can see here, the data is not really usable because it's a buffer and you would like to have a real object that we can use. So you need to decode this buffer. So to decode this buffer you can use whatever you want. But here in the example we'll use the metaplex bits NPM package that will help us to decode the buffer that we had previously and it will use the Bosch sender to decode the buffer. So we will create an account structure with the properties that we've seen before and then we'll be able to decode our buffer. So this is here.
00:10:45.154 - 00:11:26.754, Speaker A: So this part of the code is the same as the previous one. So we are creating a connection, fetching the account info. So here on this object, we have buffer, and then we have a buffer on the data property. And then we use the token account struct that we just created on the previous slide to read the buffer. Here is the buffer, and basically the post account will be this object. And here we do not have a buffer anymore. We have a real object that we can use to trying to understand what's happening on the blockchain.
00:11:26.754 - 00:12:41.884, Speaker A: So here we can see that the amount, as we seen before, the amount is 75,000, but you need to divide it. This is what I am doing here. I divide it by ten to have the real, the real amount. And so, yeah, that's a good example, but what we'd like to do is on the previous slide, you can see that here, it's the address of my account, and we paste the address here. But let's say you don't know the address that you want to fetch because this address, it's hard coded and usually you don't know this address. So one thing that we'd like to do is, let's say the token program have a lot of token accounts, and one thing that we'd like to do is maybe fetching all the token accounts belongings to specific user. So let's say you want to fetch all the token account belongings to this owner.
00:12:41.884 - 00:13:52.724, Speaker A: One thing you'd like to do is. Okay, please may I have all the token accounts of 165 bytes, and with the field owner set to this public key. So this is a thing that you can do by using the get program accounts method. And basically you will be able to filter all the accounts created by the token program with specific keys and specific bytes. So I did create a workshop with some exercise and example to show you how to fetch this kind of information. And so this is available on this link. You can also scan the QR code, and by following this workshop, you will be able to fetch any data that you want to fetch from the blockchain, and you also be able to decode this data.
00:13:52.724 - 00:14:25.284, Speaker A: So if you are a tech guy and you really want to try to understand how, how the data works on the Solana blockchain, definitely you can go on the GitHub repository, train the exercise and. Yeah, that's it for me. I don't know if you have any question. I think we have five minutes left. Yes.
00:14:32.844 - 00:14:33.580, Speaker B: Hello.
00:14:33.732 - 00:14:47.556, Speaker C: Yeah, what do you guys do at Sonowatch? Thanks. First of all for the great introduction about Solana's data structures. But I would love to know in context, what do you guys do at Sonarwatch?
00:14:47.700 - 00:15:42.154, Speaker A: Yeah, so what we are doing at Sonar watch is aggregating all your DeFi position. So it's a defi dashboard that tracks all your DeFi position. So let's say you've put some tokens on any DeFi protocol, let's say orca, Solan radium or any protocol on the Solana ecosystem. Your token are not anymore on your wallet so you are not able to see them on any wallet you are using. And it's really convenient to have a single web page where you can see all your DeFi investments. So that's what we are doing. Instead of having, let's say you want to track your investments on Solan or car radium, you'll need to open three tabs to track your investments.
00:15:42.154 - 00:15:53.094, Speaker A: So what we are doing at Sonarwatch is showing all the information on a single web page so that it really convenient for you to track your investments and your performance on the DeFi.
00:15:56.954 - 00:16:11.254, Speaker B: Thanks for the great talk. I would like to I asked that yesterday already. Are you facing get program account limitation problems with what you're doing at Zona watch at the moment? And if yes, how are you solving them or how are you bypassing them?
00:16:11.594 - 00:17:08.422, Speaker A: Yeah, really, really good question. Because it's like a day to day problem that we have. Basically get program account that we that I explained, explained here is really heavily heavy tasks for the RPC's because as I said, it will try to filter all the token, let's say on the example of the token accounts it will try to filter from all the opened token accounts. So it's basically millions and millions of token accounts. So it needs to filter all of that and get you back what you've asked with your filter. So yeah, it's a really heavy task for the RPCs. So right now we are not doing this, we are not running our own air pieces.
00:17:08.422 - 00:17:38.914, Speaker A: We are using some providers and usually what they need to do, the provider needs to index all the account data because otherwise it will be too heavy task to run in real time. So yeah, basically they are using some I think it's the JZer plugin that you can use to help with the program icons method.
00:17:41.014 - 00:17:49.422, Speaker D: Thank you. I would like to ask how does the Gaza and Google bigtable API change the game of querying this account data?
00:17:49.598 - 00:17:52.134, Speaker A: Could you speak a little louder?
00:17:52.174 - 00:18:02.634, Speaker D: How does the gates park in for the validator to invest the data and also the Google bigtable API chip change. How do we get this data?
00:18:04.094 - 00:18:21.998, Speaker A: You mean the data of the. Let me. This kind of thing. The structure. The structure. Like for the token account, the structure is open source. Yeah, it's a really good question because to decode the data you need the structure.
00:18:21.998 - 00:19:13.934, Speaker A: So for the token account it's easy because the code is open source and the structure is available for everyone. You just need to check the GitHub repository. But usually what you can do is maybe trying to reverse engineer the structure. But otherwise, if the program is using anchor, you can generate a file known as an ideal and the ideal will give you all the structure that you need to use. So yeah, if the program use anchor, you will have access to the ideal and the ideal will give you the structure. So it's really really convenient to have the ideal. The ideal can be seen on the ABI on EVM blockchains.
00:19:13.934 - 00:19:24.014, Speaker A: I think that's it. Thank you very much guys, for listening to me.
