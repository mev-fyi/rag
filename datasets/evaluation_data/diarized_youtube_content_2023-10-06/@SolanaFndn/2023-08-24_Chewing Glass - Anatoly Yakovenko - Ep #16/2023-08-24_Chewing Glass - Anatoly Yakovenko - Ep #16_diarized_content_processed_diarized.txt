00:00:00.760 - 00:00:02.742, Speaker A: If we can't talk to each other, we're not gonna make it.
00:00:02.838 - 00:00:06.574, Speaker B: Sometimes I feel like I've bitten off more than I can chew.
00:00:06.694 - 00:00:12.094, Speaker A: Most of the time, I work in a glass jar and lead a very uneventful life. A face full of glass hurts like.
00:00:12.134 - 00:00:13.046, Speaker B: Hell when you're in it.
00:00:13.110 - 00:00:29.594, Speaker A: That's weird. That glass looks half full to me. Eating glass. Eating glass and staring at the abyss. Glass. Who gives a shit about glass? Who the fuck is this? It's kind of part of our culture to eat glass. Gotta get some safety goggles next time.
00:00:39.094 - 00:01:01.132, Speaker B: Hey, everybody, and welcome to Chewing glass, the show where we talk to developers building in the Solana ecosystem. Today, once again, another special guest, professional surfer, glass chewer, and the underwater hockey specialist. We have with us today, Anatoly Yakovinko, founder and CEO of Solana Labs. How's it going, man?
00:01:01.308 - 00:01:04.020, Speaker A: It's great. Good to be here.
00:01:04.172 - 00:01:18.172, Speaker B: Yeah, it's been. It's been a while, I think. I don't know, maybe it's been a while, 84 years. But in reality, like, the last six months have also been pretty wild. But the networks held up. It never stops. The network's held up.
00:01:18.172 - 00:01:45.314, Speaker B: We've had some really cool mints lately, just lots of stuff. But the way we normally start to show out is really just to, like, hear the. The origin story of Anatoly. You obviously founded Solana. You built this incredible technology. But I want to go back as far as we can to when Anatoly actually started writing his first line of code, or just got interested in software in general. Was this always something you were into, or how did that whole thing start?
00:01:45.934 - 00:02:12.514, Speaker A: My first line of code. This is kind of funny. It was like, I think, fifth grade in the Soviet Union, they had somehow gotten these, like, computers that could do basic. I don't even remember what they were, but I think they might have been like commodores. They got them from some special donation, and we had a programming class, and I hated it, and I switched to theater.
00:02:13.654 - 00:02:16.834, Speaker B: Okay, I don't think anybody knew that, but that's interesting.
00:02:19.494 - 00:02:33.770, Speaker A: And then. And then I got into it while I was already in the states. Kind of like in my middle school, teenage years, like middle school to high.
00:02:33.802 - 00:02:39.554, Speaker B: School, dabbling around with HTML and jquery and all that fun stuff. Or were you a little bit deeper than that?
00:02:39.714 - 00:03:17.912, Speaker A: Oh, this was, I think, before. Well, the web was kind of like, this was what, 95, 94, 95. For whatever reason, I, like, found some other, I think, friendless teenagers. We started messing around with Linux and the hackers movie came out. It just became something that I became more and more interested in computer networks, open source, and learned a little bare basic bones fc. And that was like my start actually.
00:03:17.968 - 00:03:43.424, Speaker B: I remember when you were like started to tweet, there's like that hackers channel on Twitter. And I started like I followed it because they'll just show those little clips or whatever. Actually, hackers was the start of my sort of interest in computers, even though most of that shit is just completely unreasonable. But like that was sort of my intro into it too. Like, it was like, wow, this is pretty crazy. But I still watch it at least once a year still.
00:03:43.764 - 00:03:50.824, Speaker A: I had like a friend that had like 2600 magazines and we would try to figure out how to like mail bomb.
00:03:51.804 - 00:04:20.064, Speaker B: Oh, I had net things that we're not supposed to. Yeah, we had Netbus, which was just this basically a Trojan horse that you sent to your friends over ICQ so you could open up their CD ROM drive and all kinds of weird stuff like that. So, so you did that, like, did you. So I guess the trajectory for you, like you, you think at that time you were like you're going to go to college and you're going to dive deep into computers and you got to, so I'm guessing like cs degree.
00:04:21.044 - 00:04:59.624, Speaker A: Yeah, I was actually split between doing cs and like bioengineering. Like I like biology, microbiology and chemistry. And like, I don't know, this was, I was a bad student in high school, meaning I didn't have like good habits when I got to college. I thought I could ride on that. And I overloaded my first year with all the really hard bio classes, all the really hard cs classes, and that was hard. And I decided to drop the bio stuff and focus strictly on cs.
00:05:00.324 - 00:05:09.556, Speaker B: And then when you were, I mean, I'm assuming like when you were in school, you weren't just taking the classes, you were sort of experimenting on the side, just like building random, tinkering around with random stuff.
00:05:09.620 - 00:05:58.018, Speaker A: Yeah, I met up through underwater hockey. This is like through like some friends, like a couple of folks who were working in a startup and I joined them. And this is, we're trying to build voice over ip systems that could basically take like run your phone switching network. This was before vonage or Google voice, but kind of did the same thing we had. We didn't have this like global phone switch idea that would have been better, but we were trying to build these systems for people to put in their businesses or whatever and build these programmable phone dispatch systems that you could. I don't know if you remember those really cheesy menus. You press one to do this, press two to do this.
00:05:58.018 - 00:06:31.456, Speaker A: But you could generate all of this stuff really easily with XML and whatever, make all the phones switching pure, completely software configurable. And this was like 2000 before and before the.com crash. But then we continued building through it, like, through college, but we weren't in the middle of Illinois. It's really, really hard to get funding in the middle of Illinois after the.com crash. So, like, while we were in college, it was pretty easy to keep it running on ramen, and then it just kind of collapsed.
00:06:31.560 - 00:06:47.142, Speaker B: Yeah. So after that, I think a lot of people know where you ended up prior to Solana. Sort of. Let's start with your trajectory after college and the jobs that you had and what you were actually doing.
00:06:47.278 - 00:07:10.692, Speaker A: Yeah. So Qualcomm was using the same kind of software stack to build a bunch of phone systems. One of them was like a push to talk system. And they basically hired me on the spot because I was, like, a college kid that knew what the hell was sip was and, like, all of cheap labor.
00:07:10.868 - 00:07:12.144, Speaker B: Who knows the shit?
00:07:12.444 - 00:07:49.142, Speaker A: Yeah, all of these, like, really, like, rfcs that are, like, very, very, very erudite and, like, full of weird jargon about, like, phone systems and switching and all this stuff. So I had a bunch of interviews. What I really liked about Qualcomm is that when I. They flew me out there and they. Everyone in the office was, like, wearing board shorts and flip flops. And this was in Solana beach. This was in Carmel Valley.
00:07:49.142 - 00:08:30.438, Speaker A: So not Serena Valley, so not Solana beach, but in San Diego. Pretty close. Close enough to the beach. Um, so I was more. I was kind of like, okay, this is, like, way better working environment than anything else that I had lined up. So I ended up working. Then I kind of immediately, for whatever reason, I just, like, was into benchmarking and, like, profiling and digging through the code and figuring out where the bottlenecks were and trying to understand, like, the software, why it was written poorly or, like, in a certain, like, inefficient way.
00:08:30.438 - 00:09:22.040, Speaker A: And optimizing it was just for whatever reason, that was always kind of where my instincts went, how do I make the system faster and better? So I always kind of ended up with those problems. And eventually I started working on the. This kernel that they built called Brew, which is the, I think the acronyms for binary runtime Environment for wireless. But it was basically the application mobile os that Qualcomm built for all the flip phones. And I forget, what year was this? Maybe 2004 or something like that. 2005 phones were, you know, they were flip phones. Like, I don't know if anyone remembers that, but basically, at that time, the only thing that people used their phones for were calling and downloading rank tones.
00:09:22.040 - 00:09:26.600, Speaker A: And even, like, SMS hasn't really taken off in the United States.
00:09:26.712 - 00:09:29.124, Speaker B: I remember that for sure. Yeah. Yeah.
00:09:30.824 - 00:10:02.334, Speaker A: So, but we were building this, like, application thing and, like, pitching to the world that, like, look, your phone's gonna be a computer that you hold in your hand. In less than a decade, it's going to have a full featured web browser, but right now it can't. So we have to build this janky mobile, mobile web thing, a whole bunch of stuff, just to make it run on these small devices. But every year, the devices literally got twice as fast. It was faster than Moore's law, like, acceleration.
00:10:03.074 - 00:10:20.364, Speaker B: And so when you're doing all this stuff, I remember you talking about, I've heard you here say that a few times. It's like you said, you became an actual software engineer when you. I can't remember what hard. What was the thing that you were doing? You said, like, that's when I actually became an engineer, when you were, like, trying to solve some sort of problem.
00:10:21.584 - 00:11:10.228, Speaker A: Yeah. Because these are very memory constrained devices. Everything was written in c, but because we wanted some decent software architecture, the structure of the code was laid out with c compatible virtual tables. We had basically implemented a rust trait system with inheritance that had a structure with function pointers and reference counts. It was very bespoke and hand tuned, but could run in a sub two megabyte ram device and would load your context app in less than 50 milliseconds. If you go to your saga or your iPhone right now and try to load contacts, it takes a while. Like, it's it.
00:11:10.228 - 00:11:43.314, Speaker A: You can actually, like, see it, like, churning through stuff. So that was actually, like, kind of, like doing all those optimizations, trying to fit everything in memory. And, like, these were, like, 16 bit devices, not even 64. Like, the byte codes were 16 bit. It was pretty fun. Like, just, you were always, like, fighting the hardware as it was doubling at the same time. So it was kind of, like, interesting, weird challenge there.
00:11:43.734 - 00:11:57.398, Speaker B: And I feel like you always talked about, like, basically you're, like, in that job, your whole entire job was to basically cram around as many bits and bytes as you could to transfer at one device to another at the speed of light. Like, that's, like, the optimal goal there right?
00:11:57.486 - 00:12:50.074, Speaker A: Yeah. So as these devices got more complex, they started calling them system and a chip. This is, you take all the stuff that's in your pc. I think modern day laptops are closer to system on a chip, but you look at your pc with all the cards on the motherboard, all of that stuff is shrunk down to the chip itself, and it's just all put on a chip directly as different components, and you got to still build communication protocols between them. There's message buses and all this stuff. And you want to minimize the amount of time you've spent sending data and waiting for things and build the right kind of protocols or deal with consistency and all of this other things. So one of my last projects was part of the Advanced Technologies group.
00:12:50.074 - 00:13:50.674, Speaker A: Very fancy name, but we were basically trying to figure out how to use all these extra systems on a chip that were on a Qualcomm device for other things. So there are all these dsps that are mostly used for voice, but they're super efficient, super powerful dsps. So we figured out how to make them work from the OS, like from Android, and got people to start writing augmented reality and VR AR stuff and sound and all these high level processing features. It was like the first device that had AR was built on that was like Google's project Tango. So a lot of work went into that, low level optimizations, trying to analyze how things work, and also at the same time, building a platform for developers. So, yeah, all my big projects ended up somehow I'm building something between the bare metal and the developer.
00:13:51.374 - 00:13:58.034, Speaker B: But you stopped before, like, the abstractions that were built on top of that, though, you were sort of like, you stayed pretty low.
00:14:00.534 - 00:14:19.134, Speaker A: Tend to actually go like. I would try to actually get pretty vertically integrated, like, from some interface that the developers would use directly down to the metal, because there's a lot of spots there where, like, a poor abstraction can, like, add, you know, massive overhead.
00:14:19.514 - 00:14:37.654, Speaker B: Right. So I want to. I want to save a lot of this solana stuff for later. So I sort of want to hear, like, the. Actually. So, so you're doing, like, you were basically talking about one of the last projects you worked on. So, like, what year was that, roughly?
00:14:39.514 - 00:14:41.810, Speaker A: Shoot, maybe like 2013.
00:14:42.002 - 00:14:50.120, Speaker B: So you worked at one job your entire life before Solana, out of college. You worked at Qualcomm your entire career, basically, in the. In those early days.
00:14:50.192 - 00:14:57.284, Speaker A: Yeah. Then. Then they, like, bounced to a couple companies in Silicon Valley after that. So I went to Mesosphere and then Dropbox.
00:14:57.944 - 00:15:13.896, Speaker B: Now I'm curious to hear, like, pre Solana, any of this stuff. Like, what was your, like, I'm assuming, like, what was your first intro, introduction to crypto or just like, all the things you found along the way? Was it bitcoin? Was it, like, did you trade shit coins? I know Ethereum had some things to do. So.
00:15:13.960 - 00:16:38.108, Speaker A: Yeah, so I think everyone that was a curious engineer had heard of bitcoin. And especially during the financial collapse in 2008 when the fan with finances and Greece was going to melt down and take over people's banking accounts, bitcoin actually came into the forefront. But I heard of it a bit before that, and my interest in it was I could mine it and I was like, I was trying to. I mined it on my cpu and then I was trying to figure out how to build a faster miner that would run on GPU's. But before I got that project going, somebody released a GPU miner. And then shortly after, people were building stuff on FPGA's and designing asics. And the best memory that I have of that period was that there was a company that promised to be the first ASIC in the market, and you send them money and they delayed shipping the ASICS so they could mine bitcoin with the ASICs that they built and extract all their hash power supremacy out of the network, because then a bunch of other ASICs came in line and it was no longer like, alpha to have that ASIC.
00:16:38.108 - 00:17:40.484, Speaker A: Yeah, it was like, I think the definition of a rug, right? Like, that was my first true experience with crypto was that I didn't, even though it was in the forefront during the 2008 crisis, and I was born in the Soviet Union. And the idea of having self sovereign money that the state can't censor is actually, like, I don't know, somehow burned into my skull. It's pretty important. I didn't really take it seriously. And I remember the Ethereum announcement and people funding it and deciding to go build it. And again, I didn't really think of it, think too much of it, except that from my perspective, both of those systems were like, kind of very slow. They were like, designed like, you know, with, like, high performance, low latency in mind.
00:17:40.484 - 00:17:47.404, Speaker A: So I didn't think that they were going to kind of scale to really have much global impact because of that.
00:17:48.024 - 00:18:09.708, Speaker B: Yeah. So this is pretty. This is a pretty good segue. So, like, I, like, I know you've told this story a lot, but, like, maybe you've left out some details along the way. When you tell it, it's just like, okay, you saw that they were slow. Eventually you were like, hey, I could do that, but way fucking faster, because I know how wireless systems work and GPU's. And then, like, I guess if that's the way that it went, like, I know that you.
00:18:09.708 - 00:18:28.348, Speaker B: It wasn't just anatoly who did all of this. Like, there was a team behind this, like Greg's, Fitzgerald, and, like, these, like, these guys that you recruited. So, like, how did that whole thing work once you. That idea? Was it two coffees and a beer when you built Solana? Or was it two coffees and a beer when you, like, had the idea that, hey, I'm going to do this.
00:18:28.476 - 00:19:22.368, Speaker A: This was 2017, so there was this, like, the first big bull market, and the idea of smart contracts actually came into the forefront. And at that time, there was, like, all sorts of crazy possibilities of what smart contracts could be, but the primary thing people are using them for is just raising capital. Like, and what I thought was really cool about it was that it's a new developer platform, that there's a way for devs to go, like, write new kind of code that's in a new environment. And that environment was very, very much computationally constrained. So it reminded me of the two megabyte flip phone. Like, this thing is very slow, there's very little amount of memory and storage, and you gotta, like, optimize every byte. So that's really what inspired me to think about this stuff.
00:19:22.368 - 00:20:06.892, Speaker A: And at the time, Steve Akridge is one of the co founders and is the master of optimizations at labs. Him and I were building this side project that was mining crypto in the background, but we were building GPU's for deep learning. We could have stuck with that. This would have been a totally different podcast. So, uh, but because it was mining crypto in the background, I, like, started thinking deeper. Okay, what is this stupid thing worth anything? Like, why? What's the point of mining what. What is the actual proof of work doing? And literally two coffees and a beer.
00:20:06.892 - 00:21:03.986, Speaker A: Cafe Soleil. I couldn't sleep, and I had this, like, and we were talking about, like, is it possible to build something like single threaded mining? And I had this Eureka moment that there's a way to encode passage of time as data. And I didn't know what these things were called, but these are called verifiable delay functions. From a high level, we can argue whether this proof of history or the way that Solana is constructed is a true VDF or not, but it very similar conceptually and it's a very rudimentary one. And these super smart people at Stanford and all over the place have been working on much more sophisticated versions of this, but I couldn't Google for it. It's not like the words verifiable delay function came into my head at four in the morning. It was the idea that there's a way to encode passage of time.
00:21:03.986 - 00:21:39.184, Speaker A: And that's what gave me the instinct that if I have a source of time in the network, in this permissionless network similar to bitcoin, then a very hard problem is solved, which is the way to synchronize clocks and keep track of time in a permissionless way. Therefore you can probably get it to work and construct something similar to time division multiple access, which is what I'm very familiar with, which is what most wireless protocols use is the first way to divide.
00:21:39.684 - 00:21:48.068, Speaker B: So you ended up, so you ended up convincing a bunch of nerds you worked with to give up their careers to go build this thing with you. Is that, is that the way that it worked?
00:21:48.236 - 00:22:32.994, Speaker A: Um, no. Like actually, like I was kind of manic and super excited and eventually talked to my wife and she's like, okay, either, like, I vote. Basically. Like for all my life I've always had a side project. So since that, like, whatever fateful day that I started messing around with Linux in high school, and I've always been tinkering. So my wife told me that this isn't a project that you can just tinker because you got to actually go full time or you're not going to be able to just build a company as a side project. The space is too hot and moving too fast.
00:22:32.994 - 00:23:45.344, Speaker A: So she kind of like pushed me to quit my job and like actually design and think about like what the company is going to be and like actually like create a product that I could pitch and like go get funding for. And the idea that I had was that like, at that time, like, I didn't even know that I could even use a VDF to do anything useful in a blockchain. I just had this like instinct, I think I can construct a clock and it'll probably work. And somehow that was like enough. I think it was enough because I was able to get very smart people from Qualcomm that I worked with for over a decade and convinced them that the most interesting part about all this is that there's now a software platform that devs are going to write code for and it's a new kind of platform that's just not possible on AWS or anywhere else, that it's a new kind of code that you're writing. It has to be trust minimized, auditable, provable and reproducible. And that's something very, very new and unique.
00:23:45.344 - 00:25:36.340, Speaker A: So that idea of building an operating system was, I think, what got everyone together and what we thought we could focus on was that because of our experience, we could build, like, the most optimized, fastest version of it. And what I thought was useful out of these systems that come to byzantine agreement is that they can guarantee fairness with regards to how information propagates through this network. And that's very important for finance, because I don't know if you ever traded, like, when you submit an order, like a bunch of people get to look at your order before it hits an exchange, and when you get to see a quote, a bunch of people have looked at that quote before it got to use, you're seeing stale information, and none of that is very fair, right? So you get to see very kind of delayed reads of what the market is when you try to do a write. A lot of people can write in front of you. So both of those problems, I thought were solvable by something that looked like Ethereum, but much, much faster and optimized to the hilt. So that was the idea that I had, and that's what convinced, I think, a bunch of my colleagues at Qualcomm to join me. And that was pretty lucky, because I was able to pull principal engineers, really, really smart people that have worked on compilers, GPU architecture, network protocols, the LTE standard stuff that fundamental technologies that make all cell phones work and have a lot of experience and gut instincts and.
00:25:36.372 - 00:26:04.534, Speaker B: What'S fast and what isn't, yeah, it's funny, whenever we. And I just want to say, when you see online and people arguing about the knowledge that some people building Solana have, and I sort of laugh in my head sometimes, thinking these guys were building systems on legacy phones that nobody thought was possible. So it's really cool to see how long did it take to build the very first version of the Solana protocol?
00:26:10.014 - 00:27:01.666, Speaker A: So we got like, we were trying to do it incrementally. So we first proved that we can process that many signatures per second on a single node, and that required four GPU's, and we're like targeting a million signatures per second. So that was showing that if you have a single node that can do that much, if you have a network of these, it's going to run as fast as the slowest node in that bunch. But if the slowest node is doing a million things per second, that's pretty fast. That was to demonstrate that you don't really need sharding in any other technologies. You just need to demonstrate that you can do that many signatures per second and that you can propagate the data out that quickly. That actually got something running in six months.
00:27:01.666 - 00:27:38.010, Speaker A: That was single leader, like a bunch of validators that were receiving the data, but like turbine sort of working, but totally busted and no consensus. It was just single leader. Everyone receives the data and then votes, and we could see that they were doing stuff. And then we had a way to, like, load C. We could write C code. Like, we found a BPF virtual machine, and we got C compiler to generate. And we were actually writing our first smart contracts in c just to demonstrate that it works.
00:27:38.010 - 00:27:55.904, Speaker A: That took about six months, which is pretty fast, but then it took almost two years to get consensus and everything else working. Luckily, it was like depth of the bear market. It wouldn't have mattered if we were delayed or not.
00:27:56.684 - 00:28:15.504, Speaker B: But you guys, you guys, I remember this conversation, like, sort of taking a big risk. You guys really didn't, like, weren't super proficient in rust, as far as I know. And this was like a game time decision. You're like, should we do this or shouldn't we? And you just said, like, screw it, let's try it in rust. Or how did that work?
00:28:16.484 - 00:28:28.254, Speaker A: I mean, that was like, rust was an up and coming language. I think the biggest risk there was that is rust gonna be sticky or not for us to go use it.
00:28:28.414 - 00:28:29.406, Speaker B: It was.
00:28:29.590 - 00:29:09.054, Speaker A: The alternatives were go or like, and go still, like, people weren't sure at the time if go was gonna be sticky or not or like c. And just none of us wanted to code in c because it felt like work. And, like. So I think we picked Ros because it's was mostly performant and, like, closest to C and, like, some high performance language. And that worked out. I think you kind of see a lot of blockchains are built in rust, which is funny, even though. And, like, a few of them are programmable in rust.
00:29:09.554 - 00:29:25.792, Speaker B: I remember, like, Dan Alpert at Solana foundation recently was sharing, like, when you're talking about doing these tests, and he shared a photo recently of those guys building those bare metal boxes. Like, was that what you were testing on at the time, or were you guys testing on cloud stuff?
00:29:25.928 - 00:29:46.674, Speaker A: Yeah, we were testing in Google Cloud, but we wanted to test in bare metal because Google Cloud doesn't simulate the real Internet as much. And having bare metal systems, you just have more control and you could see the difference between, you can change the switches up, you can change the mix, things like that.
00:29:47.454 - 00:29:53.114, Speaker B: And how many of those bare metal systems did you guys have whenever you set that rack up?
00:29:53.574 - 00:30:11.698, Speaker A: It wasn't that much. I think it was maybe around 20 or something like that. I think at most it's only later when the whole foundation delegation program we got going that we got access to 1000 boxes and this whole.
00:30:11.786 - 00:30:25.858, Speaker B: So like that v one, the one. Or I guess like before Solana went live on Mainnet, how many engineers were actually, had worked on that protocol? Like, I mean, I know the original founders and like, I know some twelve.
00:30:25.986 - 00:31:45.674, Speaker A: Okay, yeah, it's not that many twelve engineers for like two years. So yeah, 24 months of engineering time, we're able to go from nothing to brand new everything, brand new runtime, brand new consensus mechanism, brand new gossip protocol, block propagation protocol, all that stuff. And, like, it definitely, like, we launched as fast as we could and we felt that it was safe, that there weren't any safety bugs. But liveness bugs were something that it's just really, really hard to test unless you're out on the open Internet and you're interacting with every kind of system that's just doing the thing that you don't expect. So even though we had like a tour de soul, which is like a program for validators who join the network and then try to crash it and all this other stuff, and like, if we incentivize like malicious behavior in the network, it's really, really hard to actually test it the way that the real world does.
00:31:46.814 - 00:31:55.994, Speaker B: Yeah. So, like the experience of like building Solana. So you say you did that in what, in 24 months?
00:31:56.674 - 00:31:57.454, Speaker A: Yep.
00:31:57.914 - 00:32:29.224, Speaker B: And you earlier you mentioned sort of like, like you were talking mostly about like order books and how, and how that works. And so was your, like, obviously right now, there's nfts, there's gaming, there's social. Like, when you were actually building this, was your whole mind sort of focused because I think the original sort of marketing was like, like Nasdaq, like on the blockchain, essentially. So was that your whole idea, that this was going to be a financial system without all this other stuff that lives there on the blockchain now?
00:32:29.724 - 00:32:31.612, Speaker A: Blockchain at Nasdaq speed?
00:32:31.748 - 00:32:32.424, Speaker B: Yeah.
00:32:33.404 - 00:33:27.624, Speaker A: We actually talked to a bunch of different use cases, but I thought that was the hardest use case to get an order book working. And if we could get it to work, it meant that everything else was going to be easy because the demands from an order book are really low fees, really fast finality, like, confirmation times, and, like, the high throughput. So if that was our kind of test case and it works, then we probably solved all the other problems. And then we were almost right there. Like, the one problem that I missed was that, like, how quickly different kinds of use cases and different kind of demands sprung up in the network. That just was totally different than youd expect out of an order book. And that required a different kind of fee model than we initially anticipated.
00:33:28.164 - 00:34:23.926, Speaker B: Yeah. And also, the thing that I didnt realize until somewhere pretty far into 2021 or early 2022 was just the complexity of DeFi transactions and the ramifications of some of that, which is, like, it's hard to really know that. But you see the TPS of Solana, which most people call useless metrics, because when you actually factor in what is happening on a DeFi transaction, it's pretty incredible. It's not just sending a token from Chase to Toli. There's a lot that goes behind all of that. So moving on a little bit, it was cool to hear the whole sort of idea about Solana, but, like, a lot of the stuff that we like to do on this show is talk about, like, some things about Solana. And I always ask this question, and I actually ask the question very pointedly.
00:34:23.926 - 00:34:40.264, Speaker B: And I know you don't necessarily build on Solana anymore, but, like, what sucks about Solana development? Like, I know you have some opinions on some of this stuff, and they're probably a little more, like, lower level than some of the engineers building dapps. But, like, like, what sucks right now about building on Solana?
00:34:40.424 - 00:35:27.432, Speaker A: I would say that, like, the lack of interfaces is probably, like, the biggest pain point, and that's being addressed. There's, like, a whole project there, and it's a very technical thing. I mean, there's kind of two pain points. One is a lack of interfaces. The other one is that developers have to specify all the accounts, account constraints. The latter one is, you can't really get rid of it without incurring a performance cost because we forced the devs to specify all the dependencies up front, because the runtime forces devs to do that. The runtime can then take advantage of that information and schedule everything in parallel and optimize all the prefetches.
00:35:27.432 - 00:35:34.994, Speaker A: And that percolates up to the fee markets. You can actually run local fee markets. So all of those things are really important.
00:35:35.294 - 00:35:43.542, Speaker B: But that was your thing for, like, that was the trade off, make Solana faster by forcing the devs to like rip their hair out.
00:35:43.718 - 00:36:53.112, Speaker A: Yep, it's getting better because what happens is that one dev rips their hair out, then they write a JavaScript library that does it all for you and like to mint a compressed NFT, which is a very, very complex stack, massively complicated. Good stack of things if you really think of it from end to end, is like two lines of JavaScript at this point. Yeah, this is like kind of something that a lot of people like when they come. Like what? I think a lot of people misunderstand about developer experience. It's not about making everything simple, it's about solving a really, really hard problem that would block a dev like either indefinitely or for six months or for a very long time because it requires coordination with many people or something like that to fix. But you really want, you can actually give devs problems that they can punch out in the weekend. All the stuff that you don't do that devs can complete in a weekend is not actually, it's okay.
00:36:53.112 - 00:37:14.644, Speaker A: Those problems are okay to leave to developers. What's really painful to leave for devs are things that they cannot fix. And one of those things are expensive fees. If the fees skyrocket, there's nothing a dev can do. They're blocked. Same thing with congestion. Those are reliability and those kinds of issues, we got to fix those.
00:37:14.984 - 00:37:46.792, Speaker B: Well, there's been a lot of work done there the past year and a half, two years. There's been some ups and downs. And like, I, I don't think people realize the undertaking that it was to number one, like identify that quic and local fee markets were the solution, like that. It took months for that to even be proposed as an idea. And then like the actual work behind it that made that happen was just like, I don't, my brain doesn't comprehend what went on behind that personally, and I think probably that's true for most people who watch this show.
00:37:46.888 - 00:38:54.174, Speaker A: Yeah, this was like a problem that is obvious in retrospect, but at the time we assumed that all transactions or a very large number of transactions we're going to see in the network are going to look like serum or open book transactions, which are orders in an order book. They're very fast, they're small, and they don't touch a lot of state, but as soon as you have DeFi, you start seeing people create arbitrage transactions that basically try to touch as much state as possible and maximize the value out of that. So they are submitting these very big giant transactions on the network, and those were not properly scheduled or prioritized, and that caused runtime congestion. That was one set of problems that we had to fix. So we had to create a compute budget and gas metering and all this stuff. And then the other side of it is when NFTs took off, you'd have an NFT. And literally people spin up like bot farms that would submit 100 gigabit worth of requests to be first to mint.
00:38:54.794 - 00:38:59.454, Speaker B: Yes, those are some pretty dark times, to be honest, for most of us around here.
00:39:01.594 - 00:39:45.484, Speaker A: And we have to fix those problems too. The cool thing is that I don't think we would have had the solution had we not taken this more painful road. I think the naive solution is to just globally raise fees, make the fees go up, and then that causes the spam to back off. But that's very problematic, because that means that if you have a system with DeFi, it cannot support payments at the same time. Those are non overlapping use cases. And if Defi causes fees globally to go up, or NFTs cause fees globally to go up, it actually means that you should split the network into three one that's only does payments, one that only does Defi, one that only does NFTs.
00:39:45.984 - 00:39:54.564, Speaker B: Otherwise somebody goes to the grocery store on a huge defi stuff, and they swipe their card and they're like, what the hell was that? That costs more than my coffee.
00:39:54.864 - 00:40:42.222, Speaker A: Exactly. So figuring out that that problem existed and that we had a unique solution was like painful process, but I think resulted in like, I think a really awesome product at the end of the day, because we had all of these fixes, all of these things that we added to the runtime to make it parallel, meaning that the devs had all their state dependencies declared ahead of time. You could actually trace this up to where transactions that are added to a block producer, and that block producer can look at all the transactions that are trying to access a hotspot. This is why this is embarrassing. In retrospect. It's a classic database hotspot problem. Everyone's trying to access the same hotspot in a database.
00:40:42.222 - 00:41:21.904, Speaker A: We can actually prioritize those separately from everything else. Once you do that, you have these very nice isolation for fees, and these local fee markets that can charge access to the state locally, they don't impact any other fees. So once that was in place, the network massively stabilized. We start getting these big DDoS attack vectors and defined liquidations would reliably clear, and everything's working. So I wish we could have launched with that, but sometimes you don't have control over that.
00:41:22.484 - 00:41:46.340, Speaker B: Yeah. So the next thing I love to ask is, so we talked about what you think is really not good stuff about development on Solana. Like what? Like for, in your opinion, like what. What is great about developing on Solana? It could be a wide spectrum of, like, your choice. You interpret that however you want. Like, what's great about building on Solana for developers? It could be the tooling. It could be like just anything.
00:41:46.532 - 00:42:45.184, Speaker A: I think you have, like, now really good set of tools and like ecosystem companies like Helios and Metaplex and like Tensor and Magic Eden. And for whatever kind of thing that you want to build, there's already a very robust, sophisticated API that can get you going and really cut your development time by a factor of time. A lot of the stuff that you need to do has already been written. All you need to do is just manipulate it from the client side with JavaScript, including even things like governance, with every kind of voting scheme you could imagine. Use compressed nfts for votes, using regular nfts for votes, or whatever you want to do. A lot of the stuff basically exists. What we're seeing now are people then taking these pieces and then creating new, innovative products.
00:42:45.184 - 00:43:17.174, Speaker A: Veebo is not a super systems engineer. He's more like a consumer application developer. The app that he built has minted more nfts than, I think, any other app in crypto. It's like, yeah, drip house has minted more nfts than, I think, every other application combined. Yeah, it's potentially.
00:43:17.474 - 00:43:47.258, Speaker B: It's incredible. And like, also now we have helium with the hotspots and like, there's just like, so much cool shit going on. And also, like, even though this might make you cringe, like, we do have seahorse lang, which you can literally, like, write Solana programs, and that actually works. And that we also are working on some things around the typescript version of this. Like, the whole goal here is just to, like, make this as accessible as possible to anybody. And, like, every day there's like some new abstraction, there's a unity SDK for Solana. People are building on chain games now.
00:43:47.258 - 00:44:57.554, Speaker B: So to watch. So I've been here for a little over two years to watch the days when I came in and like, discord was, somebody would ask how to, like, transfer a soul, and the core engineers would just tell somebody to go look at the tests go on, are those days because we actually have the, have the resources and like, like you said, APIs and like Webtooth style SDKs that do the indexing and like, all the stuff for you. Like, it's like there's only a few glass chewers left in this world. Like Noah Prince and a handful of these guys that actually are masochist who love actually pain. So they're still some wild cowboys out there that actually love just figuring the shit out that nobody else wants to do. So to wrap all this up, man, there's one final question that I want to ask you. And just for all the listeners on this show, it's a lot of younger devs, older devs, but the real question is, what about that guy who's just thinking about getting into web3 and building on Solana, or the guy who just started who's sort of unsure about, like, what the future looks like? What sort of advice would you give that person who's like, really passionate about this but, like, not quite there yet?
00:44:58.654 - 00:45:34.824, Speaker A: Like, we've had a ton of companies start out through hackathons. Like, just go, like, submit. And even if they don't, even if your project doesn't make it, you can get hired, you can meet like, an awesome team and then work on your next hackathon submission. There's a ton of stories of people that are like, hey, we met during a hackathon and then we continued building. And if not built like mango markets or whatever, it just takes a bit of perseverance and iteration, but that's what starting any company thinks. A lot of it is just plus. But in tears and iteration.
00:45:35.444 - 00:46:02.992, Speaker B: Yeah, and I talk about this a lot. Like, I tell people, the ones that grind and stick around eventually find success if they work hard enough. Like, obviously that's not 100%, but I tell the story sometimes. I met tensor two years ago and they had no idea what they were building. It was something not tensor. And then like two years later, multiple iterations later, they didn't just find success overnight. They spent two years figuring out what the hell they were going to do, and then they crushed it.
00:46:02.992 - 00:46:32.424, Speaker B: And here they are basically just really doing an amazing job with their marketplace. Anyways, I think that's good advice. Global hackathons are the big opportunity. Find the right teams, the right people, and just start collaborating and trying to build something fucking cool and just keep at it. Well, thanks, Tolly. Appreciate your time jumping on the show. It was really, I know you're pretty busy guy.
00:46:32.424 - 00:46:43.824, Speaker B: I think you're on more podcasts than Joe Rogan at this point in time. So we'll just go ahead and wrap it up. But again, man, thanks a lot. Thanks to everybody. To watching and see you next time.
00:46:44.364 - 00:46:55.124, Speaker A: See you. Our.
