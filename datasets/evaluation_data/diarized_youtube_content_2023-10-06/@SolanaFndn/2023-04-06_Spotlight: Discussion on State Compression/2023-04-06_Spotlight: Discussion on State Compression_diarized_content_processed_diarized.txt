00:00:00.320 - 00:00:20.422, Speaker A: Gm. Gm. Everyone, welcome to this spotlight video on state compression on Solana. I'm Nick from the Solana Foundation Devrel team. I'm joined with here today. Jonas, also from Devrel at Foundation, and Noah Gundatra, who is from Solana Labs and the primary developer for the state compression program. How are you guys doing today?
00:00:20.526 - 00:00:21.590, Speaker B: Great, thank you.
00:00:21.710 - 00:00:22.630, Speaker C: Doing very well.
00:00:22.750 - 00:00:30.930, Speaker A: Awesome. Let's just dive right into it. Noah. We're here to talk about state compression on Solana at a high level. Can you tell us what it is and how it works?
00:00:31.050 - 00:01:44.260, Speaker C: State compression is a new technology that we've developed here at Solana Labs, primarily for use in compression of t's, but it works for a whole host of generic applications. And it's a technical innovation that allows us to move data from accounts into transaction logs. And we do this by securely logging your data, rather than writing your data to an account. And so what this means is that rather than having to query your data from a Solana account, you instead have to find the log or the transaction with the most up to date log about your data. The benefit in doing this is that you get dramatically reduced costs because you don't have to stake SOl into accounts in order to store data on Solana. Now you can take advantage of indexing services, which keep track of all of the transaction history on Solana in order to find your data, find the most up to date version of your data. And when we talk about the secure log program, we provide a method to actually verify that the data returned by indexers is correct.
00:01:44.260 - 00:02:00.356, Speaker C: And so that naturally mitigates against malicious behavior from your indexing services, prevents against centralization risk, and might even provide some additional services that we just don't know about yet until developers take a hold of this technology and get off the ground running.
00:02:00.508 - 00:02:17.704, Speaker B: Oh, that sounds great. So it basically means the data on chain is way less, and the validators or the RPC providers just cache the data for me so that I can easily query it. But if I really wanted to, I could still always get the whole data from chain, right? From the logs.
00:02:17.832 - 00:02:26.952, Speaker C: Yeah, exactly. So long as you have access to the logs, you can recreate all of this data just like you can with Solana accounts.
00:02:27.096 - 00:02:36.200, Speaker B: That sounds great. Like, my next question would be, why would people, what would they use it for? I mean, the clear benefit, it's cheap, but what else is there?
00:02:36.360 - 00:03:20.106, Speaker C: Yeah. So some of the applications that we're seeing developed right now, obviously, the most notable one right off the bat is compress nfts. This was just like the obvious case, because we want nfts to hit like a web two scale. We want them to be able to support current existing applications while also being able to have transparency around data ownership provenance. And this technology dramatically reduces the amount of cost in terms of stake soul to still achieve transparency, clear functionality around changing ownership, as well as providing links to metadata. This is a perfect natural application. We get web two scale for web two cost.
00:03:20.106 - 00:04:44.204, Speaker C: The new applications that we're seeing arise are extensions of that. For example, gum is working on putting social links, for example, likes retweets, putting those sorts of actions on chain via this compression program. Additionally, we're also seeing decentralized physical infrastructure providers, or infrastructure like helium and a few other companies and projects. They're actually working to put their relationships on chain, which are number in the millions through compressed nfts and through more compressed programs in the future. And actually an additional use case that we are researching not only here, but I'm sure in the developer community at large is probably like using compression for regulatory adherence. So like transferring tokens and updating, basically emitting a secure log that allows you to prove that you actually did send a token or receive a token. And that might be useful for companies that have stricter regulatory environment than other companies or protocols.
00:04:44.372 - 00:05:07.078, Speaker A: Yeah, that's all so very, very cool. There's so many cool use cases that are just rattling around in my brain now. Of all sorts of things you can use that you can build on top of just general compression. So I guess the next question that I would have is as a developer or as a business, as two separate questions, what would you say you would need to know to get started? We'll take it the developer route first.
00:05:07.254 - 00:06:20.136, Speaker C: You basically get reduced on chain cost for your accounts by trading off transaction size. One of the things that when we talk about securely logging data, the way that we secure, the way that we think about this is that we would securely log an account. And if you want to make updates to that securely logged account, you actually have to provide proof, a Mercotree proof, to the on chain program, the compression program. And so for programs that are storing a million accounts, or are like securely logging up to a million accounts, that's probably about like, that's probably around like 500 bytes of transaction data that you are allocating solely to the proof. And so for developers, I think that there is a trade off in composability and it's just going to take a little bit of time to adapt program and infrastructures around that constraint. But otherwise they can retain all their functionality for updating accounts, mutating state, all of that still works perfectly fine.
00:06:20.288 - 00:07:03.368, Speaker A: So to make sure that I understand it right. So because it's using a merkle tree where you're taking the actual data itself, or in this case we'll say compressed nfts, you're taking the data, you're hashing that, and then as you climb the merkle tree, you're just going to continually hash all the data together until you get one final piece of information, the root hash of the tree that gets stored on chain. And you have this entire like list, like a, like a list of proofs that you, a list of proof addresses that you have to actually give to the blockchain if you want to change your tree, right? Is that what you're saying? And then because of that amount of extra data you have to send with your transaction, you run the risk of potentially exceeding your transaction limits.
00:07:03.504 - 00:07:53.804, Speaker C: Yeah, exactly. That mercury tree proof, that takes up 500 to 600 bytes, obviously it's a little bit of a handwave estimate because it'll vary by application, but exactly what you just referenced, which is that path of the Merkle tree, that's what has to get passed in the transaction. And I assume that for most DeFI applications, transaction sizes are generally already pretty maxed out. And so if they're trying to use this, they're going to really have to adapt or find specialized little ways of using it for NFT applications as well. They're already pretty large in the transaction size, so just additional constraints to think about. There's ways that we innovated to kind of mitigate the amount of data that proof sizes will consume. But that's what you described, the miracle tree proof.
00:07:53.804 - 00:07:56.620, Speaker C: That's exactly what's being put into the transaction.
00:07:56.700 - 00:08:04.124, Speaker B: That all sounds quite complicated, but if I now want to mint nfts, I guess most of the stuff will be abstracted away for the users, right?
00:08:04.252 - 00:08:47.846, Speaker C: Yeah, exactly. The reason why that works is whenever you're creating a new account state or creating a new record of something that's actually free in terms of transaction size, creating something securely logging a new piece of information, it's always free. That's an innovation that we just call appending. We're just appending data to a Merkle tree. And the proof that's generated from that is generated by indexers. So that way if you want to modify that new piece of information, for example, for transferring a compressed NFT or changing the metadata on a compressed NFT, that's when you have to provide the proof.
00:08:47.998 - 00:08:54.730, Speaker B: Yeah, sounds great. So you talked a lot about costs. How much does it cost? Say I want 1 million nfts.
00:08:55.070 - 00:09:19.728, Speaker C: Yeah, that's a great question. So for a million nfts, it costs about five soul, five and a half soul, in order to stake that data. Stake your soul to guarantee the merkle tree. And so that's what allows us to verify, that's how much account space it takes for us to verify proofs for a million nfts.
00:09:19.864 - 00:09:35.116, Speaker A: Five soul for a million nfts. That is a drastic reduction. I think before compressed nfts, it would take something like 12,000 soul to stake all that data for non compressed nfts. So that is a significant cost reduction. That's crazy.
00:09:35.228 - 00:09:39.524, Speaker B: And I heard if you even make more nfts, it becomes even cheaper.
00:09:39.692 - 00:09:49.654, Speaker C: Yeah. So for, like, a tree, that in order to verify data for, like, 10 million nfts, it only requires, like, ten and a half sol.
00:09:49.772 - 00:09:50.290, Speaker B: Wow.
00:09:50.410 - 00:10:01.218, Speaker C: So that's only a two x increase in cost for a ten x data increase in terms of our ability to verify all of that data.
00:10:01.394 - 00:10:12.634, Speaker A: So, speaking of how much it actually takes to create this 1 million nfts, Jonas from foundation, Devrel, he's been working on a cool project. Jonas, you want to go ahead and show off this 1 million NFT project?
00:10:12.802 - 00:10:37.622, Speaker B: Yes. Actually, at Devrel, we were thinking about this problem that Solana has now that nfts are way too cheap. So we came up with a solution. The solution is that every pixel of an NFT, we just mint as an NFT. So what this page does, it has thousand times thousand pixels. So 1 million pixels, and every pixel. Now we can just mint as an NFT.
00:10:37.622 - 00:11:10.374, Speaker B: So I just pick a color, I click somewhere on this big canvas, and then I sign the transaction, and then you will see how cheap it is. So it only costs, basically, the transaction cost 0.001 sol. We approve this, and after one or 2 seconds, we will have our NFT minted, and then we can also transfer it, send it to other people. And if you hover over it, you can also see who owns these nfts. Like, I'm not an artist, but I made this little tree. This NFT is owned by someone else.
00:11:10.374 - 00:11:14.606, Speaker B: And. Yeah, now, like, let's see what you can mint out here.
00:11:14.718 - 00:11:24.566, Speaker A: That's very cool. Very cool, Jonas. All right, I guess we'll just. We'll wrap this video up here. Noah, is there anything else about state compression or compressed nfts that you want to tell people?
00:11:24.678 - 00:12:18.234, Speaker C: Yeah, I think just a call back to the businesses developing like on Solana that are using nfts. I think this is like the perfect time to basically experiment with nfts en masse. Whether it's for social applications, for whatever the application of nfts for your businesses. I think this just dramatically reduces the cost. It makes things feasible that were definitely out of scope before. And honestly, I think I'm really excited because as time goes on, we're only going to get more tooling better SLA's, better guarantees for the behavior of this technology across data providers and across tooling. So I think for businesses that are building on nfts get started, get running.
00:12:18.234 - 00:12:37.418, Speaker C: For businesses that are blockchain curious, that are Solana curious, I think now is a great time to start investing into learning about how the Solana runtime works and how transactions get sent the basics. Because when this technology takes off, I think it's going to dramatically change the entire landscape.
00:12:37.594 - 00:12:41.378, Speaker A: Yeah, for sure. And that's a when, not an if takes off.
00:12:41.474 - 00:12:42.370, Speaker B: Great future.
00:12:42.530 - 00:12:45.922, Speaker A: Thank you so much both for joining me today, and we'll see you all later.
00:12:46.026 - 00:12:46.450, Speaker B: Thank you. Nick.
