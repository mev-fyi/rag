00:00:01.400 - 00:00:07.274, Speaker A: Hey everyone, today I'm going to talk about how Phantom integrated with Solana Mobile in React native.
00:00:09.094 - 00:00:09.834, Speaker B: So.
00:00:11.614 - 00:00:51.794, Speaker A: First off, my name is Nick. I joined Phantom two years ago to build out Phantom Mobile. Before Phantom, I was a native Android engineer at Airbnb and verily life sciences, the life sciences division of Alphabet and other major projects I've worked on. I've worked on our multi chain expansion, our ledger support, and most importantly our Solana mobile stack integration. So Phantom Mobile is a react native app, and this is actually a language breakdown of our Monorepo. This includes the extension. It's both the extension and the react native code for the iOS and Android apps.
00:00:51.794 - 00:01:22.424, Speaker A: If you notice, it's 99.5% typescript or JavaScript, and there's a little bit of Kotlin in the entire Monorepo. And that 0.5% Kotlin is actually what we're going to talk about today. So at Phantom, we love Solana Mobile and we love saga. I'm actually rocking the Solana mobile swag today. But today we're going to talk about one example, which is a seed vault transaction when we sign a transaction on Solana using the seed vault.
00:01:22.424 - 00:01:29.064, Speaker A: So this is the developer stage, and what does that look like under the hood? And I'm going to dive really deep into it.
00:01:29.404 - 00:01:31.020, Speaker B: This is a high level overview of.
00:01:31.052 - 00:02:10.164, Speaker A: A single signed transaction on Phantom with a seed vault. It starts in the react layer in typescript where UI code we'll call sign transactions. We'll bridge to the native layer in Kotlin where we wrap an intent, which we then send to the seed vault. The seed vault then does its thing. It shows signingui, we get an approval from the user and it actually signs the transaction, which then. And the whole process goes backwards where it goes back to Phantom. We unwrap the intent and then we send it back to typescript for sending to Solana.
00:02:11.854 - 00:02:12.950, Speaker B: Yeah, that's it. That's the whole talk.
00:02:12.982 - 00:02:42.734, Speaker A: No, I'm just kidding. We're actually going to dive into every one of these parts very deeply, the first part being the native modules. So this is what makes react native native. It's this first part of the graph or the diagram. Then we're going to talk about the seed vault API, what we use and how it actually works. Then we'll put it all together. So first part of this diagram is the native modules, and this is what makes react native native.
00:02:42.734 - 00:02:48.786, Speaker A: It starts in the typescript side, like I said earlier, and it starts in this.
00:02:48.850 - 00:02:50.522, Speaker B: We have this utils file called seed.
00:02:50.538 - 00:02:57.274, Speaker A: Vault ts, and they're just some plain old functions, async functions. And the three main APIs we use.
00:02:57.314 - 00:03:01.114, Speaker B: With the seed vault are request public.
00:03:01.154 - 00:03:12.590, Speaker A: Keys to get your public keys, signed transactions and sign message. And these APIs should look really similar to the rest of for dapps and also for when you're integrating with a hardware wallet.
00:03:12.742 - 00:03:14.918, Speaker B: But this is typescript code.
00:03:14.966 - 00:03:19.394, Speaker A: It's called from typescript and react, but the implementation is a native.
00:03:20.934 - 00:03:22.270, Speaker B: If you take a look, you'll see.
00:03:22.302 - 00:03:45.334, Speaker A: That the functions aren't actually doing anything, they're just all going to this thing called seed vault module, which, and it just passes the params into that. So what is this module? This is actually our native module, and it's the implementation in Kotlin. But what is a native module? I keep saying that, I've said it a bunch of times already. This is a technology in react native.
00:03:45.454 - 00:03:47.510, Speaker B: Or a tool in react native that.
00:03:47.542 - 00:03:51.926, Speaker A: Lets us execute arbitrary native code from within JavaScript.
00:03:52.110 - 00:03:54.502, Speaker B: So with our react native app, you.
00:03:54.518 - 00:04:21.716, Speaker A: Can'T just do everything in JavaScript. Sometimes you just need to go to Apple Pay or Google Pay or saga to execute some native code or just do something. So that's what native modules do. They let us go from JavaScript to native and back. Now, the seed vault module, its only purpose is to communicate with the Solana mobile stack. Seed vault. There's really not a lot of logic in there.
00:04:21.716 - 00:04:48.144, Speaker A: All we're trying to do with it is wrap in an intent or unwrap an intent, and I'll go over what that is later. But we're just trying to get to the seed vault at this point, and that's this middle stack in the middle. So I covered native modules at sort of a medium level, but next we're going to go over the seed vault, which is in saga. And what happens when we bridge all the way down into that.
00:04:50.684 - 00:04:52.554, Speaker B: So the seed vault at a high.
00:04:52.594 - 00:05:16.854, Speaker A: Level is built into the sagaphone. It comes with a saga phone and is only there right now, and the keys are stored in a secure enclave in the phone hardware, so they're not actually in the phantom wallet. And the signing is all done there. We just work and ask for permission to use things there. The main way we communicate with the seed vault is with native Android APIs, so not JavaScript.
00:05:19.214 - 00:05:21.118, Speaker B: So the C vault API at a.
00:05:21.126 - 00:05:56.660, Speaker A: Low level is powered by intents. And this is where I'm going to talk about intents. Now, with intents are basically messages, they're serialized structs passed around by the Android operating system, and you can think of them as just a message with a bunch of data that we're going to set and then pass on to the next service. So I'll go over what those parts are right now. So the first part of an intent is the package. This is sort of like an address of where we're going to send this message to. It tells Android where the intent should go.
00:05:56.660 - 00:06:40.058, Speaker A: And here we're actually saying it should go to Solanamobile seedvaultimple, which is the package of the seed vault implementation. It's sort of this app or service that runs the seed vault. Next we're going to say that we're going to sign a transaction. We set an action on the intent to say, okay, this message is of a signed transaction message, and we'd like to do that. We then pass an auth token to the seed vault. This is an auth token we got from onboarding earlier in the app. If you onboard with just saga, the seed vault gives us an auth token to tell us which seed you onboarded with.
00:06:40.058 - 00:06:58.174, Speaker A: So we tell them it's sort of like a session token, but with this seed vault API. And finally we add the signing requests. These are the actual transactions we need to sign, and we can actually sign multiple transactions. So every item in this array is a different Solana transaction.
00:07:00.354 - 00:07:01.946, Speaker B: So that was all Java code, and.
00:07:01.970 - 00:07:51.104, Speaker A: It was actually just example code from the seed vault or the Solana mobile stack code. But our version is written in Kotlin and it uses the same intent API, same package action, all that stuff. And that part is still in this middle layer where we're wrapping intent. So this is what I meant to wrap an intent. We took all this data and we put it in this intent API, the intent message, and now we're going to send it to the seed vault. So what does that look like in Android when you send intents to different services or apps? One way to do that is activity startactivityforresult, and we take that intent and we just kind of throw it in the message. And eventually, at some point, because Android loves callbacks, we'll have another place to detect what the response was.
00:07:51.104 - 00:08:10.512, Speaker A: But for right now, this one function is going to suspend because it's a Kotlin co routine, actually, and we're going to meet the other function in a rendezvous channel. So this coroutine is now waiting for a response from the seed vault. So once we sent the intent to.
00:08:10.528 - 00:08:13.280, Speaker B: The seed vault, where the two previous.
00:08:13.352 - 00:08:58.454, Speaker A: Processes are kind of waiting for a response, and we're now in seed vault territory. The seed vault at this point will show signingui and the user will see if they actually want to approve or deny this. If they want to approve it, they'll use their fingerprint or enter their passcode, and if they do, we'll get some signatures back. So let's say they're approved and we have some signatures. The signatures actually come back in a different function called onactivityresult, and we have to meet our different co routine on a rendezvous channel. So we sort of unwrap this intent that we get back from the seed vault, put it in our own Kotlin data model and send it back in that same channel.
00:09:00.714 - 00:09:05.258, Speaker B: Once we have the signatures, we have to deserialize it, or, sorry, we have.
00:09:05.266 - 00:10:03.184, Speaker A: To serialize it in base 64, which is a string encoding format that we send over to the react side, just because base 64 is very available in both mobile in Kotlin and in typescript. So we just made a really fast encoding, our user really fast encoding, and then we send the signatures back to react. So there's this little annotation at the very top there that says method, which means the return of this will be called in react. And finally we're back to this very initial file that I showed you, Seedvault ts, where we're actually fulfilling this promise. Now the end of that one, that next line in return just is from that last function I showed you. The signatures are actually serialized signatures, and we got them from the native side. And now we're back in J's land, so we're ready to send the transaction to Solana.
00:10:03.184 - 00:10:18.234, Speaker A: So I'll show you that diagram again. That was the whole process we went started from the typescript side, and after getting through all of the intent hopping, we got back to JavaScript to send it to Solana.
00:10:20.854 - 00:10:23.462, Speaker B: So that was a lot, but what.
00:10:23.478 - 00:11:15.044, Speaker A: Does it look like? So here's just a demo of how it would look like in the fanc map. When you're sending from just a little bit of bonk to another token we basically have in our send flow, we'll package everything up and the whole process actually happens almost immediately, because serialization and passing intents is actually very fast. But at the very end of the transaction, when we're ready to send, we know the amount, we know the token we're about to send, and we know who it's sending to. We can package that all up in an intent to send to the seed vault. When the user approves it, we get the signatures and then you see the little view transaction comes up. That's when it's sent to Solana, and then Solana is very fast, so the confirmation is very fast and we just send some buck. But.
00:11:15.044 - 00:11:40.104, Speaker A: So this is the last time I'll show this diagram, I swear. But, yeah, that was the whole process. With native modules on the left side interacting with seed vault on the right side with native Android. So some takeaways I have.
00:11:40.524 - 00:11:42.100, Speaker B: React native is pretty cool.
00:11:42.252 - 00:12:06.914, Speaker A: You don't need to be a fully native app to integrate with the Solana mobile stack. You can be react native with native modules. You can get the best of both worlds of the dev, velocity and react and typescript, and you get all of the fun stuff you can actually do in native land with Kotlin or Swift. Now, we don't have any swift code yet because we haven't done a swift integration, but we might soon. So.
00:12:08.694 - 00:12:11.994, Speaker B: Yeah, that's all I have for you today.
00:12:12.494 - 00:12:15.334, Speaker A: Thanks so much for taking the time. My name is Nick. Thanks so much.
