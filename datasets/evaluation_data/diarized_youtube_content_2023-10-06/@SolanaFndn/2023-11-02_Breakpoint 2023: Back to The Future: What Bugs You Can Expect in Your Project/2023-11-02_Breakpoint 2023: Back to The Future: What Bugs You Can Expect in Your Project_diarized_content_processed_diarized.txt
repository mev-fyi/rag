00:00:01.400 - 00:00:32.704, Speaker A: Hi, everyone. Super happy to see you all here. That's my third breakpoint, and I'm always happy to come and see all the builders, all the security people, if there are any here. I think I'm gonna need the clicker. Cheers. Thank you. And so what I would like to talk to you today is share a bit of our research on what types of bugs you can expect in your projects.
00:00:32.704 - 00:01:30.170, Speaker A: Cause, you know, like, kind of like in the title, you know, back in the future, we see, you know, like, time and time again. Like, there are similarities across projects. There are similarities across, you know, implementation, or at least components of the implementation. And so the bugs that we see, they do seem to occur in projects regardless, even on the industry and where the product fits in the market. So that's what I'd like to talk to you about in the next 15 or so minutes. I'm head of enterprise security at Halborn. I also do Solana, hands on security engineer, dev advisor to project, started blockchain 2019.
00:01:30.170 - 00:02:41.974, Speaker A: And I've been working on Solana since 2021. And so there are a couple of steps that we need to take to fully try and understand what we can expect in the future, because there's this one concept in mathematics called bayesian probability, and it's basically around how we can project and forecast probabilities based on the data that we already have. And so the number one step in our little exercise is to get the data. And so, well, the fact is that whatever scoring system your security provider, security services provider is using, there's a pretty good chance that it's not actually working too well. And there's a very good reason for that. And so if you look at any of these matrices here, they have one thing in common. They're two dimensional, and you have scales on each axis.
00:02:41.974 - 00:03:43.498, Speaker A: Why is this? And it's super simple, and it tells you quite a lot. And if something is red something, it's 25. If this scales up from one to five, that means usually it's pretty bad. But the y axis here is likelihood, and then we have consequences, which can be thought as impact. You might want to ask yourself, what is likelihood? Well, likelihood is just probability. And so what's impact? What's a consequence? How do you measure that? Does consequence five is two and a half times as bad as consequence two. How does it scale? And so know back to the high school theory, probability.
00:03:43.498 - 00:04:45.194, Speaker A: Like, we have apples, you know, on one axis and oranges on the other. And, you know, the reason for that is you can't really, you know, mix two universes of discourse. If you have probability, you can only work on probabilities. If you have, you know, any other unit or any other universe of discourse, you can't really mix them up with probability because if you multiply something by probability, you end up with a scaled probability and not some hybrid type of monster unit. So there are no mathematical laws that would govern these types of operation. But seems like no one really cares as long as it's visible and easy to understand, because convenience matters more. It's easier to convey the message to, you know, people that are not so fixed on mathematics and, you know, scientific correctness of the metrics.
00:04:45.194 - 00:06:14.114, Speaker A: And so while, you know, it may not be mathematically correct, there surely is some middle ground between convenience and correctness. And seems like there are some people that have it figured out and there are some who are still yet to do that. And so when we compare how we collect data about vulnerabilities in a web two world, that's the multidimensional plane that I have on the right side of the slide, whereas all we know about vulnerabilities in web3 is this little two dimensional scale. Now if you compare the wealth of information that you can extract from the multidimensional plane versus two dimensional plane, now there's only so much you can see in a flat land. And so what the next step should be is to try and redesign the system just so it's usable and you can project from that to the future. Because back to one of the earlier slides with the matrix. Now when you see score 25, the issue is bad, but you don't know anything else about it.
00:06:14.114 - 00:07:44.834, Speaker A: That's as much detail as you're going to get from it. Whether it's deposit affected here, yield, availability, integrity of your data, you have virtually no idea just by looking at this metric, even if it says catastrophic or something. So basically what we try to do at Holborn is bring order to the data set. And there is a pretty robust and well recognized system called CVSS that stands for common vulnerability scoring system, which is really popular and really commonly used in web two security. But the thing about CVSS is it lacks some, I guess, metrics that capture things that are quite important to us in the web3 world. So in its current form, it might not be the perfect tool, it might not be the perfect system to use that to apply to blockchain, to smart contracts, to programs. And so we sort of took the best of both worlds and came up with a blockchain vulnerability scoring system by leveraging the design of cvss, but enriching it with blockchain specific metrics.
00:07:44.834 - 00:09:06.044, Speaker A: And so here's like a super short breakdown of what the metrics are. So back to the two dimensional metrics, we have likelihood and we have impact. Now, because that does not really tell us much, we decided to break it into more descriptive categories. And so for exponential exploitability, which is basically telling us how difficult, how complex it is to exploit a vulnerability, we have attack origin as to who's the actor that can exploit or trigger the vulnerability or the bug. We have the cost, as in, well, does it really, is it economically beneficial to the attacker to even try and exploit this vulnerability? And we have complexity vis a vis how difficult it is for the attacker to exploit the vulnerability in the sense of external factors that are outside of his or her control. Now, for impact, we decided to also go into a bit more detail. And so we have the CIA triad, which stands for confidentiality, integrity and availability.
00:09:06.044 - 00:10:10.316, Speaker A: And so three basic attributes of information security. And as to more blockchain specific metrics, we have deposit, as in how other funds that were deposited in the contract are affected. And so your user deposits your treasury and what have you. And the fifth parameter is yield. And so how rewards are affected, you know, if you do yield farming, you know, anything that's not supplied by the depositors. Another metric is reversibility, as to whether, you know, whether this attack can, the consequences of the attack can be reversed or not, and whether the issue is isolated to one project only, or whether it is perhaps systemic. And once we have our data set, once we organize our data set, we can proceed to analyzing the data.
00:10:10.316 - 00:11:05.194, Speaker A: And that's what like to focus on for the next couple of minutes. And so if we look at the vulnerabilities that we've identified, looks like every one of five vulnerabilities has impact on deposit, whether it's insignificant, as in very small, or whether it's a bit worse. And if there is impact on deposit, how bad it is. So we can see that most of the time, if there is impact on deposit, actually, you know, rather bad. So it's not like you're gonna lose, you know, 10% of your treasury, it's more like 80%. And similarly, yield. Yield seems to be, you know, a bit more protected than deposits, surprisingly.
00:11:05.194 - 00:12:00.524, Speaker A: And so, you know, about 80% projects are unaffected. However, if the impact is non zero on yield, like 40% of the time, it's devastating to your treasury, to your project. And so seems like yield is affected rarely. But if it is it's really bad. Ok, so considering impact on deposit and yield, so, you know, both the rewards, both the deposits are affected. Only 9% of all vulnerabilities are that bad. And if we look at, you know, like an extinction level event for a project, fortunately that's just 1% of all the cases.
00:12:00.524 - 00:13:13.294, Speaker A: But, you know, it's still 1% that shouldn't even be there because within those 99% we have this chart, we have the previous charts that I showed you. So there's a lot. So just looking at what's most affected by vulnerabilities, definitely integrity. And so you can think about it as data, like the right operation that's affected the most, then we have deposit. Sorry, I might be confused a little about colors, so take it with a grain of salt, but confidentiality, because it's not that much of an issue for a project. If it's not leveraging ZK or, you know, privacy capabilities, it doesn't happen too often. Now, difficulty we can see at the equation in the top, complexity means the external factors for an attacker are not too.
00:13:13.294 - 00:14:18.424, Speaker A: Putting it another way, the attack, there must be something happening that the attacker does not have control of to be able to pull off attack. And so cost is medium and lower than medium, and so it's reasonably cheap to exploit. And so most of the attacks are rather simple to exploit. So environmental impact, that is a metric that shows us whether the issue is systemic or local. So most of the time, the issue is isolated to this one project and similarly to attack origin. Most of the time the attack debug can be triggered by anyone, any public key, any address. And in 30% of cases it's some sort of a centralization issue, either ownership or role management, or more generally, role based access control, so as to reversibility.
00:14:18.424 - 00:14:58.968, Speaker A: Unfortunately, most of the attacks are irreversible and there's nothing you can do to recover the funds. And the severity chart. Definitely most of the issues are informational. And so, you know, that's an improvement suggestion rather than a security concern. And the most critical vulnerabilities, they are about 10% of all the vulnerabilities that we identify. It's still one in ten. It's a lot still.
00:14:58.968 - 00:16:21.066, Speaker A: So ideally, as the ecosystem grows, we'd rather see the blue field becoming more and more, you know, present in the chart. So now that we know what types of vulnerabilities we can, you know, expect, most of these are business logic related. Like every single auditor that I've talked to, like the very first advice that they give is, you know, never to forget the common Solana vulnerabilities, the ones that we at Halbourne and other companies, we've been trying to educate the ecosystem on how not to make the same mistake. And so let's just review them real quick with a bug and fix way. And so the first one account owner check missing. We all know that every program can read any account in Solana, but there are cases where you'd rather know who created this account. And so it's better to check the owner matches the expected owner matches the owner key.
00:16:21.066 - 00:17:08.546, Speaker A: It seems like the description is not actually right, but that's, that's the gist here. The owner must match your expectations. And so again, sign a check missing. Like we don't have this capability in Solana, we have to validate the signers manually. And to this end we can use the is signer field. Now there's obviously a disclaimer that all this applies to native programs and it a specific subset of encore programs too. And so the is signer field in account info struct, you can use it to verify if the sender of the transaction is one of the signers of the transaction, because that's not going to be always the case.
00:17:08.546 - 00:18:23.404, Speaker A: And if you need to confirm the identity of the sender, that's what you need to check. Now, if you integrate with other programs, like for example, you know, you want to make a transfer and you require either the delegate or the owner of the token account to send the funds. Now, SPL token will happily do this sort of validation for you, but if you do not, you are definitely better off checking it yourself. Plus it's not too expensive in Solana, so why not do that? So arbitrary program invocation. So CPI's cross program programming vocation. So they're basically, you know, in a cybersecurity world, you could even call it remote code execution, which means that you delegate, you know, the identity per se and the context to a separate program, separate piece of software that executes this code. And so if we, you know, obviously we have to provide all the account infos and so, so the destination of the instruction is going to be included in the account info slice.
00:18:23.404 - 00:19:39.394, Speaker A: If you don't validate the destination, again, you might want to, you know, an attacker can redirect the flow of the application to a program of their choosing. And, you know, it can be as simple as, you know, bypassing validation, or, you know, can be something a bit more, more sophisticated, as was in the case of the warm call hack by reconstructing the entire signature that the program was expecting, and a bit related to arbitrary program invocation. We have PDA signature hijacking. It's similar in the sense that it also leverages cross program invocations, but it also propagates the signature of the program. And so someone, if you don't validate the destination of the instruction, someone could hijack the signature of the program. And two other bugs that I wanted to talk today are from Ankor, I'm sorry, we've got account type confusion left. So with account type confusion in Solana, serialization format is context unaware.
00:19:39.394 - 00:20:51.068, Speaker A: And so just to put it quickly, once you you have to know what you're serializing and deserializing the data to. If you do not, those random bytes are just going to be interpreted according to the schema. The serial the deserializer is going to expect unless you verify it by, for example, account identifiers that encore provides you out of the box. And talking about encore, two of my favorite types of vulnerabilities. So remaining accounts and account infos in contexts with you have to remember that these remaining accounts, or anything that's account info is not validated. No encore security checks are going to be applied, and if there are none, you have to check all these common for these common vulnerabilities yourself, because you can introduce some very nasty bugs to your code if you're not doing that. So thank you so much for being here.
00:20:51.068 - 00:20:56.044, Speaker A: Appreciate the attention. Enjoy the rest of the breakpoint. Thanks guys.
