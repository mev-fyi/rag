00:00:12.960 - 00:00:28.984, Speaker A: Alrighty. Hi, everybody. My name is Courtney Jensen. I am an ecosystem engineer at Solana foundation. And I'm going to go ahead and have everybody introduce yourself with your name and the organization that you work for. Chris, I'll start.
00:00:29.564 - 00:00:52.744, Speaker B: My name is Chris Wong from Sec three. We are a security research firm. We do a few things. First of all, we do security audits, which is more relevant to today's discussion. We also building a set of automated security solutions for smart contracts, including one is called x ray. Basic is scanner. It scans your smart contract for vulnerabilities.
00:00:52.744 - 00:01:06.014, Speaker B: The other side we're building is called Watchtower. It's an online real time security monitor. It monitors the threats and hopefully do something to stop threats before it actually happens.
00:01:07.114 - 00:01:08.054, Speaker A: Joseph?
00:01:08.394 - 00:01:31.006, Speaker C: Hi, I'm Joseph. I'm co founder and CEO of Akiblokchain. We are also auditors. We are auditing two chains, of course, Solana and Ethereum. And besides auditing, we are strong believers in the community. So we are creating a lot of open source projects, some tooling and some education projects. And I'm very happy to be here at breakpoint.
00:01:31.006 - 00:01:32.750, Speaker C: So thank you for having me.
00:01:32.902 - 00:01:34.238, Speaker A: Awesome, Pietro.
00:01:34.406 - 00:01:44.914, Speaker D: Hello, everybody. My name is Peter. I'm a lead practice manager at Halborn, and we offer a full suite of security services and products to web3 and blockchain companies.
00:01:46.104 - 00:02:01.280, Speaker A: Awesome. Thank you, guys. All right, so we're just going to go ahead and jump right in. The first question that I have is, why would I get an audit if there have been successful projects that have not been audited? So whoever wants, we'll start with you, Chris, go ahead.
00:02:01.312 - 00:02:26.297, Speaker B: Sure. Thank you. Thank you. I definitely think it's possible some protocols can be successful even without an audit. You know, especially if you put in the work audit, essentially just a code review. So if you have done a lot of code reviews along the way, maybe you can get away from a audit, that's for sure. But I think the data points otherwise.
00:02:26.297 - 00:02:51.434, Speaker B: There's a website called recnews. So if you go there, they have a lead board for all the protocol has been hacked in the past. I think the data overwhelmingly points to that. The lead laws on that leaderboard are unaudited. So I guess from my standpoint that security audits is something that everybody should do.
00:02:54.094 - 00:02:54.558, Speaker D: Yeah.
00:02:54.606 - 00:03:19.184, Speaker C: On the other side, security audit doesn't mean the code is secure. Of course, it's not easy to tell this news, but of course it's like reducing some kind of probability of getting hacked. And there's a lot of projects that are not audited. So they are like battlefield tested. They are alive without the audit. But the best practice, of course, is please, guys get audited. And maybe I would like to question.
00:03:19.184 - 00:03:50.174, Speaker C: It's not like audit yes or no, but I think it's like how many audits? So like the process that take security some kind of seriously. They always audit every release and usually like by multiple companies, because every auditing company has a different skill set, it can look at the audit from different angle. And the confidence, of course, grows with many more audits. So I would be like the guy who tells, it's not a decision between one and zero is a decision between two to five.
00:03:51.394 - 00:04:30.178, Speaker D: I mean, it's all about me. It's all about minimizing the chances of getting hacked. I mean, you can't get away without auditing your project. But then again, it does not really send a good message to your users and to your investors. That doesn't really mean it's either you're very confident about the quality of your code and you're confident enough. You don't feel like there's a need for anyone else to have a look at, perhaps have some insight on what you guys implemented. And so, just like Chris said, I mean, there's a lot of successful projects that they did not get an audit.
00:04:30.178 - 00:04:46.414, Speaker D: But if you do look at the rect list, I mean, it does say unaudited in italics at the first five, I guess so, you know, it's kind of a common sense question whether, you know, you feel confident enough or not about the quality of your work.
00:04:47.154 - 00:04:47.818, Speaker A: Nice.
00:04:47.946 - 00:05:13.884, Speaker B: Yeah. Also I just want to add, you know, by successful, I guess we have to define what is successful. If that means that you have not been hacked, well, that means that does not equal your secure. You could be insecure, but just not being hacked yet. So always good to put in the measures there, do the work, make sure you are secure.
00:05:14.664 - 00:05:26.954, Speaker A: Yeah, definitely. I think that kind of leads into the next question that I have. And that's what tooling has been created to help automate audits. And why is this also not a panacea for organizations?
00:05:29.894 - 00:05:34.582, Speaker C: Yosef, would you like to start about automating stuff? Right? That is the question.
00:05:34.678 - 00:05:43.662, Speaker A: Exactly, yeah. So what tooling, what open source tooling is available for developers so that they can at least verify some of the main things on their smart contracts.
00:05:43.758 - 00:06:16.464, Speaker C: Like as I see the whole ecosystem, it's like a pyramid. And at the very top, like the fifth level, there's the audit that's like the top of the tooling. And everything that's below that and the stages below are even, let's say, maybe more necessary than the audit. And audit is a bottleneck that's very hard to automate audits. I think it's impossible. Manual code review is always the best, and it's the thing that should be at the end. But what we can improve, we are all auditing companies, is, for example, by the tooling provided tooling to developers.
00:06:16.464 - 00:07:01.902, Speaker C: It helps them to do the steps that they can do themselves. And in that case, the bottleneck is smaller because a lot of the work can be done by the devs. To be concrete, like the, I would say the ground level is, of course, you need to have quality code. That's the ground. The second level is tests, still mainly in the solar ecosystem. A lot of projects don't write that much tests and don't have such test coverage as it should be. We are thinking about this, why is happening, and like my, or our point of view on that is that on Solana, you have to write tests in typescript, which for a lot of people is kind of annoying.
00:07:01.902 - 00:07:31.638, Speaker C: So what we are trying to do is that we have created an open source project called trudelnik, which is a testing framework. It's still in development. And with this testing framework, people can write tests in rust, which I think helps to increase the test coverage in the solar ecosystem. And it's, let's say the level two, level three, it's static analyzers. That's something like you guys are doing with your software. And level four for me is fast testing. Fast testing is something that currently I don't know about.
00:07:31.638 - 00:07:43.854, Speaker C: Any big open source project that can be used on Sony for fast testing, we have it on our roadmap. And as we have all these levels of the pyramid, the top level is the manual code review. And that's the thing that people pay us for.
00:07:44.634 - 00:09:42.628, Speaker D: So, following up on what Joseph just said, I mean, web3 can learn a lot from web two. I mean, there's pretty much an automated scanner of some sort for every layer of the technology stack, but still, there are regular scary word regulations in place that require, on top of all those automated scans that run almost constantly in real time, you always do need to do manual audit, and there are different types of automation per se, because you have tools that do run on their own, but there are also tools that assist you with whatever you're doing. So testing frameworks for the language, for the technology that you create your product in, that's one of the tools that one of the class of tools that can definitely help you catch in early stages of development critical mistakes or bad business process design, or just incorrect implementation. And so the problem with automation though is it makes developers and in general engineers kind of lazy. Because if you depend on automated tools that print out a really nice report, you feel like there's no need to do anything else because it's a ready product, you can put it on your website, but then automated tools are only as good as the set of rules that govern them. And those rules were not designed to test your business logic. So therefore, by definition, they won't be able, or there's a very slow, chances are very slim they're going to catch errors in your business process design.
00:09:42.628 - 00:09:48.544, Speaker D: And this is where arguably the most critical vulnerabilities often are.
00:09:49.004 - 00:10:05.698, Speaker C: Exactly. I think the automated tools are the thing that are not meant to catch all. It's like it can help you that it catches some issues, but still like it's not another thing that will cover the security, at least in our opinion. Maybe you are far ahead with virtual.
00:10:05.746 - 00:10:44.262, Speaker B: But yeah, we are a big believer. Let me first just say that we're big believer in tools. We actually came from a background building tools. So we do believe that security is holistic. Security is not just one thing, yet you wait until the end, right before you deploy and do a security audit, check the box and feel you are safe. I think security is along the whole life cycle, starting from you program your smart contracts and your front end, you putting everything together, and you deploy and post deployment. So every point there is an element of security.
00:10:44.262 - 00:11:17.344, Speaker B: So it's just not one thing. So tools can really help. Humans are human, we all make mistakes. There are well known cases that huge loss was due to some very simple errors. I think that tools can be very efficient and consistent and 24/7 within their capacity. So we're a big believer of building tools in terms of. I guess, I guess it's worth mentioning a few great tools that in Solana ecosystem, I think on top of the list is anchor.
00:11:17.344 - 00:12:15.304, Speaker B: Anchor not only help to improve programming efficiency, but anchor actually does quite a few security checks as well. So devs like you don't have to do those manually. There are also other tools that my panel mentioned from scanning tools. We happen to build one, it's called x ray, all the way to testing tools. There are also post deployment tools that we also happen to build a piece. So if you know what they can do, if you're willing to invest in resources and time to bring in those tools into your process to really make it work for you, that over time our experiences can get better and better and it can be really effective. And at the same time, I wouldn't be complete if I don't speak on some of the limitations.
00:12:15.304 - 00:12:36.790, Speaker B: I'll just pick on our own tool. So it's more fair that way. So our x ray is a scanner, basically it's a software as a surface. So you upload your smart contract within seconds. It gives you a report. It tells you what kind of vulnerabilities are, or. Sounds cool, right? But there are limitations.
00:12:36.790 - 00:13:10.650, Speaker B: And assuming you have a dial right, you can dial all the way to the left. The tool will leave nothing unreported. Anything suspicious will report to you. That's one way. Dial to the left and you can dial to the right, which is that we only report to you when we're 100% confident this is something. What would you use that dial? But I would use dial to the left because I want to see everything. That's a limitation, because within that result there will be false positives, which is that when you further investigate it turn out to be okay.
00:13:10.650 - 00:13:31.398, Speaker B: It's not a real issue, right. The issue is that the limitation is that when you see 25 or 35, 50 issues, you have to investigate. That's real work. That's the limitations. It's not a silver bullet. It doesn't give you the definitive final result. However, it put you in a pretty good spot.
00:13:31.398 - 00:13:57.730, Speaker B: If you're willing to put in effort and time and do further investigations and tell the tool over time, the tool can get better and better, especially on a stable code base, it can get really good. So I encourage everybody if you. There are tools, there are great tools out there in the ecosystem. There are some even open source tools. It's worth mentioning. There is called vrust. It's an open source scanner.
00:13:57.730 - 00:14:10.138, Speaker B: It's completely free. I encourage everybody to check it out. But invest in tools. Invest in using tools. I think that's definitely something worth doing.
00:14:10.306 - 00:14:11.690, Speaker A: Yeah, that definitely makes sense.
00:14:11.722 - 00:14:49.584, Speaker C: Maybe if I can just add to it. The problem with the static analyzers or the scanners is that exactly like you mentioned, they are generating lot of false positives. So it's about the level of things you want to have reported and the things you miss, the ratio between that. Our, let's say the approach to tooling is basically that we are always writing tools that we miss ourselves. So we are like the first users of our tooling. And when we are happy, we just release it as open source and it's the way we go from the ground upper. But every piece of the puzzle helps the ecosystem to be more secure.
00:14:50.244 - 00:15:22.022, Speaker D: Just one last thought on the tooling. So what I believe is quite, really important is the tool creators, like all of us, we should be very much open to the feedback that we get from our users. Like the testing framework that we use, it's fully open source. Like, anyone can go on GitHub and propose a new feature or suggest that perhaps there is a bug. We're not. We are just human. And every human being makes a mistake every now and again.
00:15:22.022 - 00:15:45.194, Speaker D: And there's. The whole venue is full of smart, talented people that can definitely contribute to security of the entire space. So just please don't be afraid to reach out to us. We are more than happy to listen to your feedback, because ultimately we're all working towards the common goal, which is increase the security of the entire space.
00:15:46.134 - 00:16:16.374, Speaker A: Yeah, that's great. I didn't know that there was open source tooling that was out there as a developer building. So that's awesome. And then we're going to kind of pivot to continue on. What Robert was talking about just now earlier about the mango hack, which we all know wasn't a mango hack, it was more like an economic manipulation. But how can we work together to figure out how this can, how can we prevent this from happening in the future by working together? And what does that look like? So, Pietro, do you want to start?
00:16:17.634 - 00:17:14.744, Speaker D: So that was a very interesting incident because it would never happen in a regulated market, because there are, again, the scary word, regulated, because there are restrictions that prevent that. It was a combination of favorable or unfavorable market conditions. And there are actually three factors to it. So first of all, unfavorable market conditions. Second of all, what you might call conflict parameters of mango. And the third was, it's really interesting because an issue very much relevant to the incident was reported in community discord to mango a few days before the hack. And so there was a really detailed explanation provided in one of the messages.
00:17:14.744 - 00:18:10.774, Speaker D: And, well, unfortunately, it wasn't acted on by the developers, and so it ended up the way it ended up. So I guess to what I said just moments ago, it's, again, community feedback, smart, talented people that, you know, everyone should listen to and not just dismiss because they don't have a profile pic on a community discord. And that could, I mean, and if the recommendation given by the anonymous person on that discord would be actually addressed by the mango markets, that would not happen. So that only sort of underscores how much, how important it is to listen to the users, because ultimately they are the most affected in all those hacks.
00:18:12.514 - 00:18:34.904, Speaker C: Maybe how to prevent these kind of hacks, or at least what we are trying to do, is always when there is some kind of complicated economy, it's good to mock a model, for example, in Python and see what's happening in the economy and create some graphs, things like this. So it's possible to audit the economy by mocking up a model.
00:18:36.324 - 00:19:30.074, Speaker B: Yeah, it seems to me, I guess the lesson learned, for us at least, is that from a security audit standpoint, maybe we need to take even a bigger holistic view. The hack was not a code bug. But do end users care? I mean, they probably don't care, right? So that seems to me the space moves very quickly versus tradfi. So if you open a stock trading account with one of the brokers, I mean, even if your stock went up ten times, your stock broker wouldn't allow you to withdraw cash on margin. So certainly there's an element of risk control partners. I guess in theory, it could be part of the security audit consulting. So that's, I guess, lesson one for me.
00:19:30.074 - 00:20:10.414, Speaker B: Another aspect is, I think, to prevent that from happening, there almost seems to be a need for web3 to have some sort of credit system. Right? I mean, if somebody borrowed that much, and if you in web, two words, in traditional world, you will know who that person is, what kind of credit. So before a broker is able to extend that credit to you, they need to check on your credit. So I think somehow that element in web3 is missing. So it's certainly an event that I think we can draw a lot of lessons on.
00:20:11.474 - 00:20:20.526, Speaker C: Yeah, I think I'm still more like code is the law guy, but I get your point that in this case, it was quite extreme. Sure.
00:20:20.670 - 00:20:47.742, Speaker A: Nice. All right, and let's go ahead and hop to speaking of bad actors, as soon as my phone wants to unlock. Let's see here. All right, so what are the things that auditing firms can do to help prevent bad actors and whoever wants to take this one, Chris, you look like you have something to say.
00:20:47.878 - 00:21:46.680, Speaker B: Sure, let me take on that one. I think, first of all, if you have a lot of total value locked, I would encourage you to go through multiple audits with multiple auditors. By multiple, I mean that not only you have one audit right before your launch, every change, incremental change, if you have the resource, I would strongly encourage audit them. Right. Because there has been incidents happened in the past that even one small change can open doors to big losses and also having multiple auditors to do audits and their benefits. I believe a lot of auditors do excellent job. So if somebody missing one piece, other people can pick up also different independent auditors certainly as the safety and security of a protocol.
00:21:46.680 - 00:22:21.984, Speaker B: If that's something in your mind, if something in the back of your mind is whether you can trust this auditor or not, that's certainly one way to mitigate that. I guess from our standpoint that it's really how we build our team. You need to know your team, investing in them, not just a name on Internet. You need to know this person as a person. You need to really understand them, what motivates them and really invest them into training, all the stuff. So the compliance, the background checks so on and so forth.
00:22:24.904 - 00:23:12.744, Speaker C: Yeah, like the main message here is like don't look at the audit, it's just like check on the website, you know, it's a process and this process needs to be done properly. And the more people are involved in that, the better. And the better people that are involved in the process even better. So like for example when we are, when we are like hiring people, we always, at least I always look like for the really smart guys because like when you are the auditor you must be smarter than, than the developers. So for me it's like the question is not how long has been the guy in the ecosystem or whatsoever, it's like about outsmarting other people. So by that I think we can produce and find some issues that the other missed and this is what's about.
00:23:13.884 - 00:24:26.854, Speaker D: So the important thing I suppose is to involve security in your developmental product pipeline as soon as possible because like an audit should be a validation of what you already found yourself. So like there's, I think what would improve security posture would be a shift of a mindset. Whereas you go to your auditor and you know, you're, you expect them to find two, three low issues because you've already addressed all that in the development pipeline. And so, you know, before you know, consider getting an audit, just try and think what other, you know, layers of the technology stack you need to secure. So what is, what's involved? What do you need to, you know, launch your product? I mean smart contract is, you know, arguably very important component but it's just one of the components of the entire stack. And so it would be like it's quite important to have in mind that all these components and we've seen it in multiple hacks recently, like even this year a couple of months ago that it's not the smart contract that was flawed. It was the rest of the stack.
00:24:29.314 - 00:24:52.804, Speaker A: And that kind of leads into my next question, and that is, how does somebody become a smart contract? Auditorium whenever I host workshops, that is the number one question that developer asks me. It's like, how do we get into this? There's not really tooling. There's not anything out there. Where do you direct us? And I'm like, oh, man, this is such a good question. So can somebody answer this for me? Can all of you answer this for me?
00:24:53.624 - 00:25:42.264, Speaker B: Sure, we'll try. That's a great question. First of all, I like to say that we're hiring, so if you like to be an auditor, if you're good, I mean, feel free and definitely get in touch. Well, certainly we have written a few blogs out there, so I encourage everybody to read about it. I mean, the purpose of the blog is to give an overview of what we audit, what's the approach we take, I guess on a general level. Right. But it seems quite popular, those articles that devs, at least by reading those articles and can get into a mindset of what auditors are looking for.
00:25:42.264 - 00:26:26.288, Speaker B: Right. So you can put that into, you know, you can integrate that into your development work. Right. But going from there, it probably takes some training, takes through some lessons learned that we have accumulated in the past, and really getting to the nitty gritty, the weeds. So I'll say it takes a lot of training, but a lot of smart people really getting to computer science and security side, I think you will have a very good foundation there, too, if you go through that rigorous training program like our internal folks have. I think we're pretty confident that we can train people to be good auditors.
00:26:26.376 - 00:26:32.424, Speaker A: Oh, that's great. Okay, so you guys provide training, and then, I know we only have a couple minutes left, but Yosef, I already.
00:26:32.464 - 00:27:07.518, Speaker C: Said, like, we believe in smart guys, so if you think you're smart, we have testing tasks. Of course, we are hiring, too. So it's like hacking challenge, you know, and then we will see. But basically, the process is quite long for us. In our training program, it takes like, six to nine months to basically create an auditor from a developer. But of course, it's the time they need to spend on the education. And maybe if I touch the topic education, I'll just pitch here that we are starting in January, our, it's called School of Solana.
00:27:07.518 - 00:27:24.210, Speaker C: It's for free. We are doing it because of the grant from Solana foundation, which we are grateful for. So if anyone would like to be not an auditor, but Sony developer, just apply on our website, and it's every week, like university lecture for two months, and it's for free. So just, I wanted to use this space. Thank you.
00:27:24.242 - 00:27:25.546, Speaker A: Nice, Pietro.
00:27:25.690 - 00:27:57.934, Speaker D: So, to me, it's all about. It's about getting to a thing. So, first of all, getting into the right mindset and then getting and simultaneously getting resources. Now, there's, although there might quite not be, on the surface, there's a ton of resources available, because, first of all, a resource is basically blockchain. All the decentralized applications out there, they work in some way. You interact with them, you have to click. So just get into the right mindset and just think what happens when I click it.
00:27:57.934 - 00:28:31.158, Speaker D: Every browser has developer tools. Just open them and see what happens when you click them. So there's a lot of publicly available reports. I mean, almost all blockchain auditing companies publish them. So you can get insight into how professional auditors work, so you can learn from their research. I mean, all auditors also post their research online, so it's freely accessible. And so you can see, like, if you open any report, you can see there are code snippet.
00:28:31.158 - 00:29:33.414, Speaker D: So that means you need to understand how code works. At the very least, you need to understand how to read code, not so much how to write it, although develop a background definitely helps and helps you understand. So, one side of the equation, and once you back to the mindset thing, once you like the origins of the word hacker comes from. From someone who understands a concept very well, and they can just hack it into pieces and see how those pieces would work if assembled in a different way. So the starting point is getting to understand how a feature works. And once you ask yourself questions, okay, so I know how it works. So what if? It's all about what if? And there's a lot of what ifs in auditing, and it's not reasonable to expect from auditors to just cover all the what ifs, because there are so many of them.
00:29:33.414 - 00:29:45.894, Speaker D: But as you learn, as you read bug bounties, public reports, you interact with the space. You can learn a lot just by doing and in practical areas, great information.
00:29:46.014 - 00:29:57.684, Speaker A: I'm sorry, running out of time. Thank you so much to each and every one of you. Chris, Joseph, Pieter, and thank you, audience. Hopefully this was informative to everybody and have a great day. Thank you.
