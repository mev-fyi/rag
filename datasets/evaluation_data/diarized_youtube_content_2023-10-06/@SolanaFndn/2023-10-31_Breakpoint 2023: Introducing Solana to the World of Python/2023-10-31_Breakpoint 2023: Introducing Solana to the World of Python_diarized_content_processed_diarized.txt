00:00:01.280 - 00:00:46.534, Speaker A: Welcome everyone. I'm thrilled to see so many familiar and new faces in the crowd today. I hope everyone is having a great time at this year's breakpoint. Yeah, today I'll be speaking on the topic of introducing Solana to the world of python. Before we delve into this exciting talk, allow me to introduce myself. My name is Anvit and I'm currently working as a developer experience engineer at Fantom, where my journey is all about enhancing the interaction between developers and the Solana ecosystem. Previously, I've worked as a software engineer at Amazon and as a community developer at Metaplex and at Fantom.
00:00:46.534 - 00:01:42.524, Speaker A: I work on integrations for I've worked on integrations for several Solana ecosystem initiatives such as version transactions, priority fees, and more recently, sign in with Solana. Cool. Let's dive into the topic. So, as we all know, developing on Solana is not the most easiest thing to do working in external facing roles. I've had the privilege of interacting with hundreds of developers in the past two years, and the developers range from absolutely novices to the programming world to veterans of the tech space. And one feedback I constantly receive is that the learning curve, when you're just starting with Solana, is very steep. Yeah, Solana programming often encounters two major roadblocks.
00:01:42.524 - 00:03:02.164, Speaker A: The first one is the unique Solana account model, which diverges significantly from other blockchains, and this unfamiliar territory can indeed be challenging to people. And the second one is, of course, Rus, which is the programming language sitting at the heart of Solano, and its intricacies around memory, safety, and management often steepen the learning curve for developers even more. So, however, the goal of any good technology should be accessibility. So how can we make Solana more approachable for developers? How can we reduce this steep learning curve when they're just starting with Solana? And the answer lies in providing a familiar programming language medium that most developers can readily engage with without compromising on the robustness and the features that Solana offers. So meet crank. I guess many of you might have already heard about this search. Lang acts as a translator, allowing you to communicate with Solana in a comfortable dialect of python while still respecting the deep nuances of rust.
00:03:02.164 - 00:04:03.964, Speaker A: So it's just not a bridge, it's a whole new pathway, making developers journey into Solana smoother and more familiar. So this is where complexity is meeting simplicity, in a way, thanks to Seahorse. So now let's talk synergy. Seahorse is bringing simplicity of Python into the Solana ecosystem. And what kind of features does it have? So it has compile time type safety, it's fully interoperable with rust code, it is compatible with anchor, and it has built in integration with Python. So this framework is basically allowing you to bypass the nitty gritties of low level memory issues that Rus meticulously handles, freeing you to focus purely on your business logic and your creative solutions. So imagine the innovation that this could foster.
00:04:03.964 - 00:04:37.684, Speaker A: And one such example of a very cool or wild innovation that seahorse unlocks is shown in the slide. This is an example of an on chain neural net for OCR. Shout out to wireless for this awesome example that shows the power of seahorse. I'm not. Obviously, you can't see the code here, and I don't want to go through that. I just want to show the difference between what seahorse looks like and what anchor does. And as developers, we often hear the phrase that less is more.
00:04:37.684 - 00:05:37.154, Speaker A: And brevity in code is not only it not only reduces the complexity, but also enhances readability, making maintenance more easy and collaboration more effective. So this is where seahorse truly shines. And on one side, we have the Seahorse program, which elegantly captures the task in just 70 lines, whereas we have anchor on the right side, which accomplishes the same thing in 200 lines. So this is nearly three times the length of. However, any innovation isn't without roadblocks. And earlier this year, Seahorse's journey was paused by its original development team, and we encountered some compatibility issues as well, like with enoms, due to updates in anchor. So recognizing these challenges, we committed to a revival of this language, ensuring Seahorse not only returns, but comes back stronger and more reliable.
00:05:37.154 - 00:06:24.650, Speaker A: So, yeah, I'm very happy to announce that with support of Solana foundation, we've reignited this innovative framework with a revitalized folk. And, yeah, this is. We've made it Seahorse Dev. We've rejuvenated every aspect, GitHub repositories, comprehensive documentation. The rust creates clis, ensuring everything you need is up to date and at your fingertips. And we've not just fixed bugs, we've expanded the ecosystem. Our refreshed resources are comprehensive, user friendly, and excitingly, Solana playground also supports this and extends this Seahorse dev.
00:06:24.650 - 00:07:45.174, Speaker A: So, which reinforces this forked frameworks, versatility and integration. But we didn't just stop here. So, yeah, I'm excited to introduce Seahorse University, which is a dedicated platform where learning is just not about understanding the Seahorse code, it's also about mastering the art of Solana programming and building full stack, decentralized applications. So this endeavor marks a significant leap towards making Solana and blockchain in general more accessible to developers everywhere, regardless of their coding prowess. This course takes developers to the depths of Solana account models, developing Solana programs, and the art of building comprehensive applications. And by the end, developers not only understand the Solana basics, the seahorse basics, but they also understand how to write basic programs using anchor through the seahorse lens. This is very important because we believe Seahorse is just a starting point, and it is important for developers to continue on to build more consumer focused, production grade applications on Solana.
00:07:45.174 - 00:08:56.366, Speaker A: And what does it take to embark on this journey? It's merely basic understanding of Python. So if you're familiar with Python, you're already ready to start, you're already on the starting block. And we've designed everything to ensure that while the learning is robust, the starting point is still accessible. And now, yeah, what do we want out of this folk and Seahorse university? The thesis behind this effort is that we see Seahorse becoming to Solana what iconic frameworks like Tensorflow and Keras were to AI in the last decade. And yeah, we envision a world where Solana development is a mainstream scale nurtured by Seahorse. Imagine the day when introduction to programming courses all around the world, in universities all around the world, proudly include Solana projects, contributing to a more decentralized and inclusive digital future. So now I can talk about Seahorse for hours about the advantages of Seahorse.
00:08:56.366 - 00:09:41.454, Speaker A: But sometimes a real testament of the success of a framework comes from those who've actually used it and witnessed its impact firsthand. And on the screen you'll see a tweet from a founder I talked to recently of a developer team in the ecosystem. And what he says is that it's absolutely huge. We onboarded our first non rust dev to seahorse and made it so much easier to become proficient and get a decent understanding of the Solana runtime without leaving his native language. And this is the true essence of seahorse. It's not just about simplifying code or enhancing developer experience in isolation. It's about breaking barriers, making onboarding smoother, and expanding the Solana ecosystem.
00:09:41.454 - 00:09:57.794, Speaker A: So when a non rust developer can quickly adapt and contribute meaningfully, it's a win for the entire ecosystem. Thank you. Any questions or insights or reflections you have will be invaluable. Happy to chat after the talk. Thank you.
