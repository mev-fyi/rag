00:00:02.960 - 00:01:26.598, Speaker A: Okay, so this is what we're considering as, like, the first core community call or the first Solana core developer sync. What we're kind of hoping that this turns into is a way for developers on the Solana protocol to kind of, like, sync on, like, hey, what are changes that are. That are being made? What are future developments that they're thinking of? What are different? Like? So we also have, like, a SIMD process as well. Like, how do I propose changes on Solana so that we can kind of more collaborate together as a whole? Ultimately, like, it's up to y'all as the engineers to make up as you like, best wish of what this call looks like. So, yeah, in the future calls, we'll, like, call for an agenda if people want to put forth what they want to talk about on the agenda side. But, yeah, for the first, like, item and that we won't kind of want to discuss is like, what do you all think that this call should look like? And then later, we'll also talk about SIMD's and what that process looks like so that we can make proposals and actually use it to make changes that and keep aligned on changes on Solana. Go ahead, Richie.
00:01:26.766 - 00:01:27.414, Speaker B: All right.
00:01:27.534 - 00:01:44.366, Speaker C: I think generally this would be mostly useful to have, like, an online forum where client teams can discuss changes that affect everyone. That's mainly, I guess, protocol breaking changes that Solana labs, Jitto and finance and so on will have to implement.
00:01:44.470 - 00:01:48.074, Speaker B: But I think we should probably start.
00:01:48.114 - 00:02:00.534, Speaker C: With a process where we first specify something in AssIMD and then go forward. Guess other things would probably be things that actively concern mainnet and require call intervention to be fixed.
00:02:01.234 - 00:02:04.514, Speaker B: I guess that would be like, quality.
00:02:04.554 - 00:02:16.132, Speaker C: Of service related incidents and so on. I think you also, was there like a written agenda or like, proposal for agenda of this call? I think I saw someone ask something.
00:02:16.188 - 00:02:18.844, Speaker B: But don't fully remember. Yeah.
00:02:18.884 - 00:02:30.404, Speaker A: For this specific call is kind of just like one talk about, like, what we both most want out of this, as well as, like, talk about the SIMD's and then anything else that y'all.
00:02:30.444 - 00:02:38.184, Speaker B: Want to bring up. Okay.
00:02:40.384 - 00:03:01.440, Speaker D: Yeah, I think just kind of this reflecting on something I've been sharing with the team internally. Like, you know, there's been a lot of calls from the calls for action from the side of the community for what I see is, like, more people wanting, I'll say, like, read access and then write access for, you know, the Solana protocol.
00:03:01.592 - 00:03:01.928, Speaker B: Right.
00:03:01.976 - 00:04:53.684, Speaker D: Read access being there's a lot of teams, core devs and non core devs that want better visibility into like, hey, what's coming down the line, right? How is this going to impact me, particularly like RPC operators or Dapp developers that are going to be impacted by any breaking changes and things like that and so like that, I think maybe doesn't need to be like in scope for this call, either today's or in general. But I mean, it's something that as the core developer community, like, I think we can do a better job of communicating like, hey, what's obviously engineering roadmaps for a technology like this are incredibly difficult to nail down and I think people understand that. But figuring out a way as a community, or maybe it's more as an organization, labs or foundation to put out more visibility to the broader community. And then as far as write access, who can make contributions? Or rather how does one go about making contributions? By engaging here, making an informal proposal in discord or in some other forum, followed by getting feedback here or in SIMD comment threads or anything like that, and then trying to figure out what does that approval process look like? And should anyone really be owning an approval process when. Sure, anyone can build from source and run a client with whatever changes they desire, just sort of trying to feel out what people think is best there. And then as we go on to be able to dig into the actual details of, okay, what do people actually feel about this particular proposal or that code change, etcetera.
00:05:03.964 - 00:06:00.954, Speaker A: And then kind of like further jumpstart, like the conversation I'll drop in the chat, the SIMD's that we currently have or that we're working on. So we recently kind of launched this process of like, how we can propose protocol changes to Solana, of like, that would be breaking changes or like something that's big change, like economic wise. And what we can do is like, everybody here can create a proposal that will change how Solana works, and then we can use this to discuss what a different, how different change works, how it affects all of us, especially between like firedance or jitto. And then like working with the mango folks, like how we can create or keep in line of the big changes coming on, so on in the future, especially when they're like feature activations, like how do we do that across teams, etcetera?
00:06:08.534 - 00:06:15.274, Speaker E: So I'm just going to say a bunch of things that are kind of in the space. And some of these are things that we also discussed with Dan a little bit earlier.
00:06:16.754 - 00:06:17.706, Speaker B: And I think a lot of this.
00:06:17.730 - 00:07:07.188, Speaker E: Is just related to work going on internally and how we've thought about a lot of these problems. None of this is anything I've really prepared remarks on or anything, but one of the things that already exists in this, we talk about specs is part of our job is to essentially come up with specs for what the existing protocol is from the current code. And there has been some repos set up in places like the Solana Foundation. I know there's a lot of kind of comments on that, and, you know, that's also somewhat a prerequisite for work we're doing internally, where we've engaged with various experts in formal verification and whatnot. It's very difficult to formal verify if we don't actually have a spec for doing that. So at least from the kind of specs repo read, write, access, and whatnot, I'd kind of direct things in that direction. Unless there's a broad consensus in the community, we don't want to have those.
00:07:07.188 - 00:07:51.696, Speaker E: But I don't really see that as not being an option for long term if we want to have multiple validators or whatnot, and kind of put people in that direction. I think when it comes down to those, that's not the only repo. Like, there's the internal repos that we're developing. There's obviously the Solana Labs repos, and people's repos that are kind of sitting around here. We spent a lot of time in the initial discussion when we were asked to look in this area as to what was the right model for doing the engagement, and we were deathly afraid that we had two different organizations, different cultures, different development styles, different languages and all that. That if you were to try to do stuff in the same repo, it'd be disastrous. And it wasn't just that kind of abstract concern internally.
00:07:51.696 - 00:09:15.008, Speaker E: Jump has a lot of internal communities with the various trading groups and so on and so forth, and doing everything in a common repo just tends not to work. So we've done a lot of stuff internally, just for non crypto related things, where we essentially develop stuff at boundaries between repos and come up with interfaces, be they shared memory interfaces or whatnot. A lot of the stuff that we've been planning on here is to essentially iterate independently in our own repo. Let Solano iterate in their repo, use the specs that we're doing to essentially define boundaries both for how the protocol works, but also ways that we can divide stuff up and componentize the existing validator, and then swap out various parts as we go and do that, and a lot of that is being done at process boundaries. So we don't have to have a whole lot of friction or tight integration between organizations and those kind of logistical problems that that can do with respect to protocol breaking changes. As we've been going through a lot of stuff and checking more stuff in, we have a lot of ideas and we've spent a lot of time thinking about how we might bring them to the community. I think one of the things that already exists that we were planning on is we do have some scope in our development plan for essentially doing proof of concept designs.
00:09:15.008 - 00:09:46.774, Speaker E: And some of the stuff that we were thinking about doing is just, we'll set up a proof of concept over here to essentially come up with reference implementation and then bring that to a community as opposed to just having an open ended, abstract discussion to the effect, we don't like this. Maybe we could do it this way, then have everyone just be kind of like, well, it's not obvious that'll be better or not. And so at least as far as protocol breaking changes, our at least intent is we would make recommendations, but only make those recommendations after we had some working code to show how those things work.
00:09:48.154 - 00:09:49.258, Speaker B: Sorry for a bunch of random, I.
00:09:49.266 - 00:09:54.170, Speaker E: Don'T know if that necessarily addresses the points that you mentioned, but, you know, I think it's things I was making.
00:09:54.202 - 00:09:56.574, Speaker B: Notes on as people were talking about.
00:09:58.714 - 00:10:22.002, Speaker C: I think we can take a lot of inspiration from the Ethereum process because that has proven to work quite well at scale. And the way they do it is fairly similar so far. Any non trivial change to these specifications and whatnot. Usually when you check in an EIP or in our case, an SIMD, you also have a proof of concept in.
00:10:22.018 - 00:10:24.474, Speaker B: Your own repo, and then at least.
00:10:24.514 - 00:10:27.214, Speaker C: Start to think ahead how another team might implement that.
00:10:32.954 - 00:11:08.356, Speaker D: Yeah, I think in my mind, I see, like, the bar for actually getting a SIMD merged should be quite high. I see that as the tail end of the sloppier, less formal sort of debate process. People, you know, testing things, trying to figure out what's, you know, what makes the most sense, do the prototyping, you know, and get some sort of initial, like, social consensus from, you know, the validators, the developer community that like, hey, this idea, like, not only do we think it's a good idea, but, like, someone on the team is willing to.
00:11:08.420 - 00:11:10.388, Speaker B: Go ahead and implement it, right?
00:11:10.436 - 00:11:54.104, Speaker D: If Solana labs, you know, think some SIMD is great, but fire dancer team thinks some SIMD is a you, the same symptom is a terrible idea, and each client in the future has 50% of the stake on the network. Well, both teams need to implement it in order for it to actually come to fruition. And so yeah, I agree with your proposal, Richie, on having the proof of concept, and I guess I would just want to call out not as we're discovering it, not to jump to assimdi for any random new idea. I think this kind of forum stuff in discord GitHub issues is more appropriate where people are trying to suss out interest and feasibility of a new process.
00:11:58.964 - 00:12:37.838, Speaker C: As much as I don't. To belabor the point, the Ethereum community does check in a lot of eips that are never actually deployed on Mainnet. It's nice to having some sort of proposed standard when you get to implementing the idea, but often you have something sitting around for three years and then you might implement it at some point in the future as lots of different branches of these implementations. But I think if we restrict ourselves to saying anything that's an accepted SIMD will eventually be implemented and activated, then a lot of this political discussion I think will actually prevent the engineering efforts of standing up a proof of concept.
00:12:37.966 - 00:12:41.454, Speaker B: So it's, I would maybe have less.
00:12:41.574 - 00:12:51.274, Speaker C: Restrictions and then say, well this, this is a like, maybe not accepted standard, but at least it's checked in and it's there if someone wants to implement it.
00:12:54.454 - 00:13:22.344, Speaker D: Okay, yeah, I guess I'm not crazy about the idea of having like a simd repo of like a bone yard become like a boneyard of unimplemented proposals. So there needs to be some kind of filtering mechanism. But I agree we can have a spec or a proposal that everyone agrees is a good idea and is going to take twelve months of work, or there's just more urgent issues to be addressed sooner.
00:13:23.444 - 00:13:45.284, Speaker F: The problem with those long ideas is that they usually die or by the time you get around to building them, something has changed to where they're no longer valid. So like, I think that I would prefer that the specs that do get checked in have like a path to implementation within six months.
00:13:48.024 - 00:14:21.924, Speaker A: To take from ethereum as well. I believe what they have is they change. Like if, if there's a certain point where it's just, it can't be implemented due to a number of changes that happened previously. Like for example, if it took six months to implement and things change, it's no longer a viable option. They do change in like the status to stagnant and they kind of just throw it out at that point. Are we like marking statuses is there like a mechanism for this?
00:14:24.344 - 00:14:25.064, Speaker B: Okay, yeah.
00:14:25.104 - 00:15:07.964, Speaker A: So there's kind of like a process as outlined in like the first simd of like what you do is you draft it, so you'll be in just in draft phase, and then you, you kind of like work with people trying to get like consensus on the actual, like, should we move forward with this? Should we not? And then like once that, once you get like that consensus, you can move into like, accepted, but get to implementation phase requires like process around like feature activation or whether or not like where, who, who's owning the different feature activation in each client, things like that. It's like, okay, who's building the feature, what's the status of it, and how do we get it to actual activation across the network?
00:15:11.744 - 00:15:14.448, Speaker B: I guess this begs the question where.
00:15:14.496 - 00:15:39.826, Speaker C: You get to decide to press the merge button and define what consensus is. I think for now it's perfectly valid if Solana Labs and Solana foundation have this authority since I guess for the exception of Cheeto, we're just starting out hitting mainnet. But in the long term, it would be nice to maybe define a set of people. I know this always tends to be.
00:15:39.970 - 00:15:43.314, Speaker B: Exclude people, but I would maybe define.
00:15:43.354 - 00:15:52.974, Speaker C: Consensus like, there is no big agreement. There's general acceptance of a change, even if it's not a direct confirmation from each team.
00:15:56.124 - 00:16:50.304, Speaker A: Yeah, as part of the first SIMD, it's like, hey, there's just no, like, obvious, like out outspoken disagreement and that there is agreement from the, seems like the majority of core contributors. You can move forward on, like who has access to do write or triage or maintain the repo of SIMD's. I did write up a kind of like an access policy that is very similar to like how Mozilla does it and how they give access to write or to triage different issues. So that is under review, not for review, so that we can create that list of possible merge access people. And really it's both a social consensus as well as a technical consensus. So if someone abuses that power, it can easily be taken away as well.
00:17:05.054 - 00:18:16.152, Speaker D: I think there's maybe also been some questions like, and tell me if you think this is often the weeds are out of scope here, but, you know, I think it's good to, for us to kind of like, feel out, you know, what this kind of processes feel right here. But I think there's also a lot of less process heavy and more just navigating the space questions some folks have come up with, just like, hey, I have this pr open against, say, the Solana labs repo because I'd like to fix a bug, or I want to make a change, whether it's a small thing or a bigger thing, but they're a community member, or maybe it's someone from Jitto wants to push something back to labs. Maybe it doesn't require a simd because it's just not a protocol thing. I'm curious, maybe Anatoly or someone from the labs team who's on the call, do you guys have a sense, either written or informal, of. I know the quality has been very mixed over time because anyone can open a pr against the repo. How does the labs team view receiving and merging changes?
00:18:16.328 - 00:18:43.324, Speaker F: I think if it has like a feature activation, it should probably have an associated proposal, because the feature activation implies that there is something breaking in the client, that it's not like a change you can easily roll in. And it should probably be, it definitely needs to be communicated to all the other, to the fire dancer client, and we should use the proposal process for that.
00:18:45.384 - 00:18:49.184, Speaker D: Meaning anything that requires feature activation should have a corresponding SIMD.
00:18:49.304 - 00:18:50.896, Speaker B: Yeah, okay.
00:18:51.000 - 00:19:03.884, Speaker D: Yeah, I think that's good. I think about like, the changes that we've made to the validator, where they're not necessarily related to consensus, but they are like pretty significant changes.
00:19:04.664 - 00:19:29.326, Speaker F: I would love to have like a proposal to. These are the API hooks that you guys need that for all conforming clients to implement. And then the fire dancer team and us, we can just conform to that standard. These are the hooks that guito needs, and this is how we load. I really want to load a dynamic shared object instead of loading a separate guito client.
00:19:29.390 - 00:19:31.314, Speaker B: Yeah, same.
00:19:32.854 - 00:19:51.374, Speaker D: Okay, cool. I think Richie and Kevin on Firedancer had kind of similar plans, is that right? To basically kind of design or spec out these interfaces that aren't necessarily protocol defining, but it's just more of like an implementation detail.
00:19:51.914 - 00:20:48.544, Speaker E: Those are definitely fresh on our mind as we're getting very, very close to getting the last bits of plumbing put together on our end. And I think the big things, you know, far, I'm going to re answer this maybe more mechanically, because there's different ways you could approach this from a process standpoint or what it means from a repo standpoint. But our intent is to take the existing validator at Solana and do all the plumbing that's needed on that side to interface with our component one. And we already have basically those points where we want to go and how to do those boundaries and whatnot. And then just like proof of concept like work it out and say, okay, we worked it out and then essentially kick that to you guys to then say, what is the proper way to do that? I think part of the call here is getting some idea what those processes are now, since that wouldn't be something that'd be a protocol breaking change or whatnot. Doesn't sound like there's a SIMD involved, but we'd say here are some changes. We'd like those to go in, we'd like to be respected going forward.
00:20:48.544 - 00:21:28.504, Speaker E: That defines those internal API hooks. Those API hooks, then any other organization, jito whatnot, could go ahead and then be using those for doing their development against two, and they could interface at those points. We also are trying to minimize the complexity and the surface area of those interfaces so we aren't too particular about it. So if we get it wrong or somebody wants some other kind of change on that, it's not that big a change. We're not trying to find the max cut and create the most complex interfaces across, or trying to find very, very minimal points to simplify this kind of organizational interfacing that we're talking about here.
00:21:30.394 - 00:22:15.304, Speaker C: I remember as part of the three repos we created for these interclient local APIs, it was first of all these specs, the SIMD, but there's also our validated APIs repo, that Solana foundation created. And originally that was the plan to have all the C structure definitions and so on hosted there. But I think this can quickly get quite complicated if that needs to be compatible with three different CI processes and build systems and so on. So I'm not too sure what the best path forward would be here. Maybe we just copy headers between clients and socially ensure that they don't get out of sync instead of using any complicated tools.
00:22:19.044 - 00:22:35.314, Speaker D: Yeah, I'm happy to remove that validator internal API repo. It hasn't seen any activity since we kicked that idea around a while ago, because it's really not, like you said, it's not a protocol definition thing. It's more of an implementation for convenience between multiple teams.
00:22:39.774 - 00:22:59.974, Speaker A: And then a question for the specs. Whenever we have SMD proposed and it's accepted for updating the specs, do you all want to wait until after it's actually implemented across the different clients? Like when? When does the specs change in accordance to like, upgrades to the network?
00:23:06.514 - 00:23:15.658, Speaker C: I mean, as far as I can tell, SMS SMG proposed changes and specs are authoritative sources of what the protocol.
00:23:15.706 - 00:23:19.826, Speaker B: Actually is, and merging that before and.
00:23:19.890 - 00:23:23.802, Speaker C: Anything is activated on mainnet is, I guess, technically wrong, but I don't know.
00:23:23.818 - 00:23:27.770, Speaker B: If we want to split hairs here. It's.
00:23:27.842 - 00:23:36.534, Speaker C: It's hard to tell, but I would like when. When it's clear that a feature is about to be activated. I think that's a good point when we want to merge things into the specs wrapper.
00:23:43.874 - 00:24:14.640, Speaker A: Okay, so we're coming up a little bit on time for this call anyways. So I guess for future calls, what we'll do is we will kind of, like, put out calls for agenda items. Future could be including, like, an sIMD that someone proposed or like, hey, we're kind of talking about changing this in the validator client. This restructure. What do you all think about? So we'll do that for the new year, but, yeah. Is there anything else that people want to bring up before the end here?
00:24:14.832 - 00:24:25.008, Speaker G: Yeah, another thing that would be good on these calls, let me know if you guys agree, is, like, having a spotlight for, like, large changes that have been merged in and kind of.
00:24:25.096 - 00:24:25.384, Speaker C: Yeah.
00:24:25.424 - 00:24:29.564, Speaker G: Spotlighting that maybe just like, giving a brief overview of what happened there.
00:24:31.024 - 00:24:31.920, Speaker B: Yeah, that's a.
00:24:31.952 - 00:24:33.044, Speaker A: That's a really good one.
00:24:33.744 - 00:24:34.200, Speaker C: Yeah.
00:24:34.272 - 00:24:43.720, Speaker D: I wonder. I'm just thinking because, like, that's a, that's a topic that I think a large audience would be a larger audience than the speakers on this call might be interested in.
00:24:43.912 - 00:24:44.240, Speaker B: Right.
00:24:44.272 - 00:25:06.926, Speaker D: So, like, this is sort of what I was going back to earlier. Right. Like, there's more people than the core devs that are interested in, you know, I'll say, read access to how new changes are coming in. This would certainly be a good forum to spotlight. I'll say, like a debate or discussion on said content. But I'm wondering if, like, the initial presentation could be like a, you know, a separate thing that's like, you know, put out to. To the public.
00:25:06.926 - 00:25:16.074, Speaker D: And then we say, hey, on, you know, this core dev call, we're going to, you know, pick it apart or provide feedback or whatever. I'm just saying, based on the number of people here and.
00:25:18.114 - 00:25:18.706, Speaker B: You know, number.
00:25:18.730 - 00:25:32.374, Speaker D: Of opinions that I'm sure could be voiced, we will want to make space for the debate. Right. Because a presentation could just be like, hey, I, like, recorded this 30 minutes thing, deliver it to the public, and then we have a review period after.
00:25:37.834 - 00:25:40.414, Speaker H: I have a point, probably for the next call.
00:25:42.134 - 00:25:46.558, Speaker B: And it's to design a process for.
00:25:46.646 - 00:25:49.834, Speaker H: Security patients, which I think is quite tricky.
00:25:55.894 - 00:25:59.714, Speaker F: What do you mean for security patches, like zero days.
00:26:01.454 - 00:26:02.262, Speaker B: Yeah.
00:26:02.438 - 00:26:04.274, Speaker C: At the moment, we don't have a.
00:26:04.694 - 00:26:10.954, Speaker H: Structured way to deal with GitHub security issues. It's always like situational.
00:26:12.294 - 00:26:16.382, Speaker B: Sometimes you fetch them immediately, sometimes we.
00:26:16.398 - 00:26:22.994, Speaker H: Feature get them, sometimes we try to hide them, sometimes you have it really obvious about them. It's total chaos.
00:26:25.574 - 00:26:25.958, Speaker B: Yeah.
00:26:26.006 - 00:26:40.764, Speaker F: The top validators should all be building from source and we should be able to send them the patch directly in an emergency, like, so it doesn't need to be revealed in the GitHub repo.
00:26:44.984 - 00:26:48.288, Speaker B: We want some sort of more structured.
00:26:48.456 - 00:26:52.124, Speaker H: Process that everybody on the core and team is aware of.
00:26:52.464 - 00:27:25.654, Speaker F: There's like two kinds of attacks, right? Like one is a light, like one is a safety issue, and those you can get out as a patch to the top 33% of the validators. So if that is exploited, the network halts. The limestone are harder because you need two thirds to upgrade and that requires basically a general release. So that one is really hard for us to get. Two thirds of the validators upgrade via a secret patch that has to go through, I think, the general release process.
00:27:27.634 - 00:27:35.764, Speaker H: Yeah, at that point it would be now in this category of simds because that is probably also tied to a feature activation.
00:27:37.224 - 00:27:40.120, Speaker B: That's why I brought it up. Yeah.
00:27:40.152 - 00:27:46.004, Speaker F: If there's a liveness issue that needs a feature activation, it's just like really unfortunate.
00:27:52.904 - 00:27:56.844, Speaker D: I do think for the first category though, there's an opportunity to really.
00:27:58.714 - 00:27:59.170, Speaker B: Prove.
00:27:59.202 - 00:28:08.962, Speaker G: The ad hoc process that we have. So that's, I think talking about that would be good.
00:28:09.098 - 00:28:10.014, Speaker D: At some point.
00:28:13.474 - 00:28:14.226, Speaker B: I really do want.
00:28:14.250 - 00:28:43.382, Speaker C: To get the file answer client to a point where it can continue the chain without having two thirds vote. I think you can probably optimistically confirm without finalizing. That would probably relax some of the emergency patching that we hopefully don't have to do. I also think we should definitely fast track the SIMD process and not be held up by approvals or things like that. If there's a very obvious change, I think that can be both implemented on the two or three clients we currently.
00:28:43.438 - 00:28:55.338, Speaker B: Have without having to put the rubber stamp on it. Yep. All right, cool.
00:28:55.386 - 00:29:24.524, Speaker A: So what we'll do is for the future call coming in up in the new year, we'll grab all this information from you all and kind of work with you all to figure out what the full agenda is, and then we'll just go through it each time and feel free to give either me or anybody feedback on the call, like, hey, do we need this? Do we, do you, do you want to continue it? Like, how could we make it better? We're more than happy to help facilitate that and help you all work together as developers on the Solana protocol.
00:29:26.984 - 00:29:27.964, Speaker B: All right, cool.
00:29:28.744 - 00:29:31.484, Speaker A: Thank you, everyone, for coming today.
00:29:32.224 - 00:29:33.224, Speaker B: Thanks, everybody.
00:29:33.344 - 00:29:36.844, Speaker D: Looking forward to figuring all this out. Hope everyone has a great new year.
00:29:38.264 - 00:29:38.868, Speaker B: Happy new year.
00:29:38.906 - 00:29:39.648, Speaker C: Thank you.
00:29:39.816 - 00:29:42.128, Speaker B: See you, guys. Yeah.
00:29:42.296 - 00:29:42.864, Speaker D: Thanks, Jacob.
