00:00:03.920 - 00:00:38.566, Speaker A: Hello. Hello. I've got the very hard and difficult position right now to be the last talk, and I'm the last person standing between you and the food, so I'm going to try to make it interesting and interactive. Who has a ledger, by the way, before I start babbling? All right, most of you, actually, so cool. So you should pretty much know what I'm going to be talking about, then. Well, we all know, actually, I should probably change the slide to blockchain. Technology is already changing the world, but this revolution won't happen without security.
00:00:38.566 - 00:01:25.480, Speaker A: We've been hearing about this the entire day, and we talked with Thomas earlier this morning, talking about security on contracts, or the panel right before about security on rpcs. But it's the same with the key storage management. If you lose your keys, you lose your crypto, essentially. And this defeats the whole purpose of blockchains and digital ownership, which it enables. You all know the story, but I think the key point with that slide is, at each generation of the web, it was always powered with both software and hardware. Web one was the ability to connect to a remote server, and that couldn't exist without a personal computer. Web two is the same with cloud computing and social networks.
00:01:25.480 - 00:02:17.444, Speaker A: But I think the thing and the hardware that really powered this revolution was mobile and this ubiquity. There's no uber without a. Without a mobile and digital ownership, that's web3. That's what blockchain allows us to do. But if you can't securely and easily manage your digital assets and store them and manipulate them, then same defeats the entire purpose. This is why at Ledger, we're working on hardware wireless that's going to help and secure digital revolution. So you got it working at Ledger, I've been coding Sy's web one and going through all this, and really, the idea is to share with you guys what we've learned along this way of how to build a wallet, how to manage keys.
00:02:17.444 - 00:02:42.984, Speaker A: And I know that because I'm doing that full time. A ledger. So why aren't we using web two technology to store keys? And I think the best example of this is a spyware called Pegasus. Who knows about this one? Do you remember that one? That's actually quite old now. Yeah. Minority. So that's a spyware that was developed and released in 2016.
00:02:42.984 - 00:03:26.610, Speaker A: So it's pretty old now by a group named the group. And so essentially, that spyware, what it allowed you to do is you could send either a text or an email to a mobile device, and without even the user interacting with the text. It could then harvest all your data. It could read the text, it could read your emails, photos, it could turn on the camera or the phone, the microphone as well. So that was crazy. And Pigasus was actually built initially for counterterrorism to infiltrate and retrieve data from different groups. But you actually end up being used by governments and dictators to actually spy on journalists, political opposition, all that kind of stuff.
00:03:26.610 - 00:04:02.438, Speaker A: And that's actually piggybacked on flaws that exist in current operating systems. So I think what it goes to show is that web two is about publishing information, consuming information, but not so much about storing secrets. That's not what web two technology is made for. And this is where it falls short, actually, to store keys. It's where it falls short for web3. So please do not store your keys in Gmail, do not store your keys on the cloud. It's probably the worst thing that you could do.
00:04:02.438 - 00:05:13.154, Speaker A: It's very easily extractable by technology as, and so blockchain technology. Obviously, all blockchains are actually really secure, using cryptography to secure the chain and proper consensus mechanisms to ensure that nobody can actually alter the blockchain. So all your transaction, all the data that's seen there, is immutable and stays immutable. So that actually shifts the security challenges to the endpoints, the endpoints being us, essentially, the users as well as exchanges. So where are we at from that perspective? Exchanges, we're actually seeing on a monthly basis that they are the victims of attacks and they are heavily, heavily targeted by groups. And we've heard about this the entire day with Thomas this morning, talking about security on contracts, or actually the panel before talking about rpcs. So this slide is actually a year old, but this happens over and over every month.
00:05:13.154 - 00:06:01.436, Speaker A: And then the other endpoint is the users. And there was a great talk earlier today by Voshi. I don't know if you heard about this one with a greed experiment, phishing is everywhere. We got scams, airdrops, where you're actually going to end up interacting with a fraudulent contrast, going to drain your wallet or loss of fake customer service are going to trick you into getting your security recovery phrases. So we are under attack. And when I say we exchanges and end users, really, so how can we prevent from this? There are two types of securities, really the security at rest. So that's the idea that if someone finds my wallet, even within unlimited amount of time, they're not going to be able to extract the secret that it contains.
00:06:01.436 - 00:07:02.488, Speaker A: So it needs to protect my secret at all costs. And it's usually a device that is pin or password protected. And by the way, I just want to talk about one of the most, the questions I get most often is why don't we use Face ID or Touch id? Well, that's actually a terrible way, because that's actually a login, it's not a password, and a good property of a password is the ability to rotate that password. You can't change your face, you can't change your fingerprints, or at least not easily without a lot of pain. So let's not do that. And then the second part is security at use, which is your key is stored in a secure place, but you need to be, the way your key is used needs to be malware or spyware or virus proof. If it's used by an app that has a fake implementation of an elliptic curve so that it always generates the same address, then you lost, and you're going to lose your crypto and same when signing a transaction.
00:07:02.488 - 00:08:04.254, Speaker A: How do you know that what the app is actually saying is actually what you're signing? It's another way to do it in fraudulent apps, what we're seeing on the market. So I think with that in mind, what we're seeing, the most wallets that we're seeing on the market are actually full software wallets, and that's probably the worst that you can do because they have no security at rest. If you remember, Pegasus is very easy to extract data from an iPhone or an Android phone or a laptop, and there's also no security at use because it's just, you don't know how those cryptographic curves were actually implemented. And here on the side is Android, but it's the same with iOS, it's just an example. So we got a video here, and I'm just going to try to run it. Yeah, cool. So here's Metamask mobile, but it's the same with any software wallet.
00:08:04.254 - 00:08:53.087, Speaker A: Just an example. We'll just use Metamask because it's probably the one that's most used in the Ethereum ecosystem. And here it's just unlocking. Metamask mobile is going to show you the security recovery phrase so you can see what it is. And metamask mobile in this, it actually stores the seed and the mnemonic in memory. And so what we've done is our security lab, the donjon, created a malware application that acts as a cryptocurrency, a crypto ticker, but in reality, it's a malware. So it's actually going to scan, look for metamask mobile and go into the app container and retrieve the data and send it to the server, which you're seeing right there, which is then going to brute force and decrypt the c.
00:08:53.087 - 00:09:48.496, Speaker A: So it's actually, when you're using a software wallet, it's just as if you're restoring your key in notepad or whatever, because it's just, it essentially is as secure as the OS. And so any flaws that you have in the OS can actually be exploited by malware or a virus to actually extract, then the data, send it to a server, and then brute force it peacefully. So that's where it falls short. So I think now what we're seeing more and more is in our devices, we're seeing trust zones and tee which are used at key stores. And that's the great advance. That's probably the first thing that you should do because it provides security at rest. Your key is stored in that zone, which means that if you send the wrong instructions or you can extract it by just plugging into a server and sending random instructions to it, they are built to protect your secret.
00:09:48.496 - 00:10:47.112, Speaker A: That's great, but the thing is that there's no security at use. If the cryptographic functions are actually not built at that layer, they can be tampered with and changed to actually generate a specific address or do things that are not necessarily what you wanted. Which actually leads us to the second part of the slide, the second one, which is the trust zone, and the implementation of cryptography in that zone, which is the next best thing that you can do. The issue with that model though, is that it doesn't scale. So if you're relying on the cryptographic implementations that are available into the yen cloud, there's only so many of them. And so if you have, as a blockchain developer, you want to update your cryptography, or as a wallet, you want to support multiple chains that have different elliptic curves, then you're screwed. You can only support the ones that are supported by the secure element, or you're secure or a secure zone.
00:10:47.112 - 00:11:32.684, Speaker A: And then last but not least, you need a, you know, when I was talking about security at use, I was also mentioning the, ideally you want to be in a situation where you can actually validate, double check that the transaction that is asking you to sign is actually the one that you're really signing. And so that's the need of a trusted display. So you can double check and say, okay, this is really what I want to confirm or reject. So that's how we built a ledger. And it's really with those three properties in mind that we built it. The first one was security at rest. And so to do that, we're actually using a secure element that's built by StMicro, and they've been building secure elements in small cards for decades.
00:11:32.684 - 00:12:37.556, Speaker A: It's actually the same ones that are credit cards or the chips that we have in our passports, except that instead of storing a government secret or a bank secret, we're actually using it to store your private keys and our private keys, and then it's also security at use, because what we've done then on that secure element, we built an operating system that runs in there, and then we built an SDK so that anyone in the world can actually build their own applications on top of. Of that secure element. Because actually developing a secure element is quite tricky and quite hard, because if you send the wrong instructions, it wipes out the memory to protect your secret. That's actually a feature. And then last but not least, the trusted display. So I think the difference with everything else is that then the OS that is in the secure element, and as well as the applications running in the secure element, actually do control the trusted display. So no one else can actually show anything that's uncontrolled on that display.
00:12:37.556 - 00:13:40.004, Speaker A: So when you're in your software wallet and you want to sign a specific transaction, it's going to be sent to the wallet. The application running on the wallet is going to parse that transaction and actually show it to you on the screen in a human readable manner, which you'll then be able to either accept or reject. And so that's how it's with those three properties. A secure element that stores your private key securely and protects that secret is having an os running in the secure element that is malware proof and ensures integrity, as well as a trusted display, which ensures that what you see is what you sign. It's with those three properties that we actually are solving for that key management challenge, really. And this is for all blockchains, including the Solana ecosystem. Ledger works with Fantom, and there's a phantom integration.
00:13:40.004 - 00:14:33.458, Speaker A: So for all of you that are using Phantom, please don't leave your key in the software, put it in a hardware wallet. We also have full support for the Solana Stack in Ledger Live, and Ledger live in the Ledger ecosystem is also available on the saga. So any of you that are actually using the saga, that security is available to you guys. And last but not least, a key thing about scalability and security is that it's not linked to single blockchain and there's just too many blockchains, too many dapps for all of it to be done by ledger. So I think the key thing and what's unique with our ecosystem is that we actually build those SDKs. So we've got a developer portal on developer dot ledger.com. And actually, the Solana stack that I was telling you about was actually not built by Ledger.
00:14:33.458 - 00:15:13.994, Speaker A: It was built by the Solana foundation on the Ledger technology. So if you're working on a protocol or L2 and you need some new functionalities or you want to improve the real readability on the ledger wallet, you can actually all do that yourself and self serve, thanks to the developer portal and our technology to make sure that we can actually clear sign what you built. And that's it. This is how we're doing security around keys and key management. If you have any questions, I'll be hanging around over there to continue the discussion. Thank you very much, guys.
