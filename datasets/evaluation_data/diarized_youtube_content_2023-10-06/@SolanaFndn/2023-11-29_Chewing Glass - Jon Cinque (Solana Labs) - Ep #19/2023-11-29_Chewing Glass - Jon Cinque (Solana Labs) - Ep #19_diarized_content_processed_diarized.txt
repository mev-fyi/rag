00:00:00.680 - 00:00:02.662, Speaker A: If we can't talk to each other, we're not gonna make it.
00:00:02.758 - 00:00:05.366, Speaker B: Sometimes I feel like I've bitten off.
00:00:05.390 - 00:00:06.518, Speaker A: More than I can chew.
00:00:06.646 - 00:00:10.262, Speaker B: Most of the time, I work in a glass jar and lead a very uneventful life.
00:00:10.398 - 00:00:12.966, Speaker A: A face full of glass hurts like hell when you're in it.
00:00:13.030 - 00:00:17.302, Speaker B: That's weird. That glass looks half folded. Eating glass. Eating glass and staring at the abyss.
00:00:17.438 - 00:00:21.674, Speaker A: Glass? Who gives a shit about glass? Who the fuck is this?
00:00:23.014 - 00:00:26.154, Speaker B: It's kind of part of our culture to eat glass.
00:00:27.134 - 00:00:29.514, Speaker A: Gotta get some safety goggles next time.
00:00:38.774 - 00:01:01.574, Speaker B: Hey, everybody, and welcome to Chewing glass, the show where we talk to developers building on the Solana ecosystem. Today I'm joined by John Cinque, an engineer for the Corp Solana protocol. He's worked everything from the token swap to stake pools, and more recently, the poorly named Token 22 program, which I'm sure many of you guys are familiar with. Hey, John. How's it going, man?
00:01:02.114 - 00:01:03.814, Speaker A: Yeah, pretty good. How about you, Chase?
00:01:04.154 - 00:01:24.674, Speaker B: Not too shabby, man. You and I go sort of way back. I think I probably started. I started like, mid 2021, I think. I think recently just found out that you did. You started, like, not too long before that. I think maybe shortly after the launch of Mainnet or something like that.
00:01:24.674 - 00:01:25.774, Speaker B: Is that right?
00:01:26.254 - 00:01:36.670, Speaker A: Yeah. So I joined in August of 2020. That was the official start date. It was around the time when Solana Mainnet was launched. Starting to pick up some steam.
00:01:36.822 - 00:02:02.374, Speaker B: Nice. Well, cool, man. The way we usually like to start this show out. Obviously you've been around here for now, coming up on three years, chewed a ton of glass, but want to find out a little bit about John. And historically, were you. Were you a CS major or were you. Were you an engineer by trade in the early days of your career? Like, how did it all get started for you?
00:02:02.754 - 00:02:22.398, Speaker A: I actually studied physics in college, took a few computer science courses, and the whole time thinking like, oh, this computer science thing is pretty cool. And then coming out of college, you see everyone getting six figure job offers, and you're like, that's pretty cool, isn't it? Right out of college. So I found a way to parlay the physics into more cs work.
00:02:22.566 - 00:02:44.974, Speaker B: Yeah, there's actually. There's a couple in the ecosystem. I know Mert is a big physics physics guy, TJ Littlejohn, who helped with Solana pay lot. There's lots of big physics guys, like, in the ecosystem. What's. Okay, so you were physics. You saw all your friends making a lot more money in you out of college, and you were like, well, shit, I should probably go see if I can do that thing.
00:02:44.974 - 00:02:47.006, Speaker B: So, like, how. Where'd you go from there?
00:02:47.190 - 00:03:18.716, Speaker A: Actually, it was pretty funny. It was specifically, and I know this is maybe going to make me sound a little tooly, but it was seeing the social network, the movie, I was like, oh, man. Yeah, that is really cool. You just make things with code and then it becomes this big, huge thing. I was like, I kind of want to do that too. So, yeah, my first job was at Bloomberg in New York. They have a special program where they take people that studied math or physics or electrical engineering, and they take you through four months of training and then they put you in a team as a junior engineer.
00:03:18.716 - 00:03:22.524, Speaker A: So it was really like the perfect job for me.
00:03:23.024 - 00:04:01.794, Speaker B: Wow, I didn't realize that was a thing. So basically they just like, because, I mean, I went to school, I paid a lot of money for my computer science degree. And then, like, pretty much right as soon as I graduated, these, like, boot camps and, like, all these sort of, like, learn to code things where people paid substantially less money and got the same jobs as me started to spin up. But I didn't realize groups like Bloomberg sort of take, like, relative relatively, like, mathematical or scientific people and then taught them how to code. That's. That's actually pretty interesting. How was that? Like, did they start you out on, like, JavaScript or, like, is it pretty, like, intensive?
00:04:02.814 - 00:04:27.494, Speaker A: It's pretty intensive. I mean, it's. It's like getting paid to go to a one semester of college. And the, the way that they thought about it, and I thought it was, it was brilliant. Cause, like, you think you go back to the early 2010s, that's when Facebook is becoming huge. Like, LinkedIn had a record ipo in 2011. This is a time when computer science, people majoring in computer science coming out of college were at the highest premium possible.
00:04:27.494 - 00:04:50.294, Speaker A: And Bloomberg knew that they were competing with the likes of Google and Facebook and Amazon and all of those. And they were like, hmm, we're not as big a name as they are. Like, we're big, but we're not as going to be as well known to them. Instead of paying ridiculous amounts of money for CS majors, why don't we pay a little bit less money for math and physics majors and then just teach them to code in four months? I actually typically.
00:04:50.674 - 00:04:51.994, Speaker B: Yeah, go ahead. Sorry.
00:04:52.154 - 00:04:57.506, Speaker A: They typically know you have to know how to code a little bit. At least it's not just like total newbies.
00:04:57.650 - 00:05:31.764, Speaker B: I actually really like that. And not just for the, like, oh, this will pay people less because, like, they don't know how to code. It almost like adds a little bit of loyalty. Like they're giving you something that you would have had to pay for outside of that. So there's like, that's actually incredibly smart thing to do, which is somewhat what I'm actually doing right now by helping build education globally and making sure that that's free to everybody. So that sort of rings true. And that's actually a pretty cool piece of information.
00:05:31.764 - 00:06:12.824, Speaker B: I had no idea that's how Bloomberg, in the early days, trying to get some really good engineers, didn't have to compete with that. And they probably got some quality engineers out of that strategy just by, like, focusing on, like, specific groups of people such as yourself from, like, physics, because obvious, I think. I think, I don't know, you could probably argue this, but I feel like physics is much harder than most software engineering. But you tell me this, you've been working on Solana core protocol stuff. Was your toughest physics class harder than the work that you're doing right now?
00:06:13.684 - 00:06:44.198, Speaker A: Yeah, of course. You think about, I mean, there are different types of, I shouldn't say it's completely as easy because sometimes you need to look at an entire architecture of a system, and especially for things like the gossip protocol in Solana, where it's like every single byte makes a difference, the most constrained resource that you have on the validator is going to be bandwidth. So you have to, like, really figure out the optimization problem there. But it's still not, you know, it's not quantum mechanics, right?
00:06:44.246 - 00:06:53.630, Speaker B: So, like. But one is sort of based in math and the other one's a little more based on logic. Is that fair or is that sort of off the mark yet again?
00:06:53.662 - 00:06:56.154, Speaker A: No, no, that's, that's actually probably the best way of putting it.
00:06:56.494 - 00:07:15.314, Speaker B: All right, so Bloomberg taught you how to code. Um, what happened after that? Did you stick around there for a while or did you have like. But like, let's like, leading up into. Before, like, you even like, cared or knew much about crypto. What was the career arc for you after Bloomberg?
00:07:16.174 - 00:07:21.190, Speaker A: So after Bloomberg? So I was at Bloomberg for five years total between New York and London.
00:07:21.302 - 00:07:24.554, Speaker B: And what languages were you coding in? Sorry, I wanted to get in.
00:07:25.094 - 00:07:47.554, Speaker A: Oh, yeah, sure. It was c for the most part, and then some JavaScript for the front end. Cool. And then actually some python too. They sort of brought everything in, but it was c zero three, which was not very fun. They kept talking about being like, oh, were going to do c eleven soon and it was always like, this isnt going to happen. I wonder now should ask some of my friends that are back there to see if they ever finally went 64 bit and things like that.
00:07:47.554 - 00:08:27.346, Speaker A: So after that its a bit of a non traditional path. Around the time that I was in London at Bloomberg, this was end of 2015. Yes, end of 2015. I started teaching yoga while I was also working at Bloomberg. And so that was going really well. I was picking up more and more classes to the point where I was really burning out badly because having a full time job and then picking up another job that was becoming full time wasnt very fun. So eventually I was like, I think I can do this and just be a yoga teacher full time and maybe pick up 20 hours of programming a week.
00:08:27.346 - 00:08:57.430, Speaker A: So that was sort of the plan. And eventually I quit. Bloomberg did the yoga teaching full time, picked up a little job, a little job for a website didn't really work out. And then eventually funds started to run a little low. And then start of 2016, I was starting to look for some other jobs and randomly, a guy I knew from way back when, my brother's best friend gets in touch with me, he's like, hey, are you looking to do any programming work? I said, sure. He said, it's PHP. I'm like, yeah, sure, I'll do it.
00:08:57.430 - 00:09:16.674, Speaker A: He's like, yeah, it's for this crypto guy. I'm like, okay, whatever. And that's sort of what got me into it. He was building essentially a Bloomberg terminal for crypto, so bringing together all sorts of exchange information. He was doing arbitrage in 2016, which was a very profitable strategy for certain very well known figures in the crypto space.
00:09:17.814 - 00:09:33.464, Speaker B: Wow, okay. So before you had that conversation, being in somewhat nerdy circles, were you already aware of bitcoin in the prior years? Did you buy bitcoin or were you like, what the hell is this thing?
00:09:33.964 - 00:09:48.912, Speaker A: I didn't. We talked about it back when I was at Bloomberg quite a bit. I remember in 2013 having a conversation being like, oh man, maybe we should buy into this. I'm just like, okay, whatever. I didn't. Probably should have. That was around the time where people started talking about it.
00:09:49.068 - 00:10:00.764, Speaker B: So that was 2016, and you joined a team to start building PHP stuff to do arbs. And you did that for a while or what?
00:10:01.384 - 00:10:35.550, Speaker A: So, yeah, I did that for all of 26. Sorry, all of 20? No, we're in 2017 now. So it was, sorry, end of 2017 that I've been working with them for a while. They wanted to actually bootstrap a company out of it. And so they brought me on board as CTO for this company, which was making the terminal, which was fetching data, which was allowing you to write scripts in essentially c sharp, which would then execute on our server. So sort of like a platform provider, automatic trading, things, like, pretty a project that actually turned out. A lot of other people was using.
00:10:35.622 - 00:10:46.864, Speaker B: An early stage Oracle for this. How was that working? What was reading the prices for, to create this terminal?
00:10:47.444 - 00:11:04.340, Speaker A: Sorry, you said an early stage what, Oracle? Oh, no, no. It was all just exchanges. None of this was on chain. You know the joke. I had a friend who was, like, really into Ethereum, and I would talk to him about what I'm doing, and he said, oh, yeah, centralized exchanges. He's like, that's kind of the least interesting part of crypto.
00:11:04.372 - 00:11:21.304, Speaker B: And he was right, nice. So, like, you to jump back into it like you were there, you became CTO. Like, did you, like, leading up into Solana was like, was that the lead into it, or was there anything else after that?
00:11:22.004 - 00:11:40.892, Speaker A: No, that was pretty much it. I worked with them for, I guess, 2018, 2019. They pulled the plug in early 2020. And so at that point, I was just doing more odd jobs. I decided to pick up rust in that time. It was 2020, March of 2020. And I was like, oh, I think this rust thing is going to be a big deal.
00:11:40.892 - 00:11:43.616, Speaker A: Why not? I've got a little more free time.
00:11:43.780 - 00:11:54.684, Speaker B: How did you come to that conclusion about rust at a time, like in 2020? Yeah, how did you come to that conclusion?
00:11:55.904 - 00:12:18.084, Speaker A: I can't exactly remember what my thought process was. I think it was because I did the recurse center in fall of 2017, which was eventually how I got connected to Solana. And while I was there, a lot of people were talking about rust and being like, oh, yeah, this is the next big thing. This is going to be huge. And I saw that it kept gaining more and more steam. It hit 1.0, and I'm like, all right, let's finally see what all this is about.
00:12:18.084 - 00:12:30.424, Speaker A: I had done some ocaml before, and I was like, okay, this is kind of like a mix of ocaml and c and sort of like the best parts of modern C. I'm like, all right, let's. Let's give this a shot. I got nothing else going on. Let's see what happens.
00:12:30.844 - 00:12:41.944, Speaker B: So you must have been hanging out, hanging around in some really nerdy circles. Was this, was this from your yoga classes that you were meeting, these people that were into rust, or was this just like random Internet forums?
00:12:42.474 - 00:13:23.760, Speaker A: No, no, this was well started, like I said, in 2017. This was at the recurse center, which is a self directed sort of sabbatical program for developers, where you typically do a stint of either, oh, boy, I think it's six or twelve weeks, or maybe it's eight or 16 weeks. I can't remember the exact number. And so you go there and it's completely free form. You just do whatever you want. For that time, I decided to get into some open source contribution, learn a tiny little bit about ML, but really more about doing some open source work, which eventually I used for the work in the crypto trading company Preston.
00:13:23.792 - 00:14:04.774, Speaker B: Cool. All right, now, this is my favorite question to always ask. I've never done it because you're the first core protocol engineer we've actually core contributor, really, that we've ever had on here, at least a substantial core contributor. Like you joined Solana Labs in late 2020. Who found you, and how did they convince you to go build on this thing that nobody had any clue would ever work, or even further than that? Lots of people were claiming that they had no chance in hell to ever work. Like, like who? Who found you and how did they convince you to do it?
00:14:05.394 - 00:14:39.794, Speaker A: Yeah, I mean, this was back in the day, so it was through the recurse center. I had been interviewing for jobs. I was looking for some rust jobs because I was like, oh, you know, I spent all this time learning this thing, may as well try and use it. And it sort of was like the perfect combination of things. They were looking for someone that had sort of built crypto trading applications. Essentially what we had done at the previous place was create a runtime for people to create their own, um, automated trading bots. And so then that was a really nice sort of.
00:14:39.794 - 00:15:08.386, Speaker A: And we'd also worked on creating an exchange, and we were eventually going to just hook it up to a smart contract on Ethereum. So there was like a lot of correspondences that they were looking for in someone who worked in rust as well. So the recur center was like, hey, do you want to talk to this company? I think Anatolys wife did it, but I cant remember when exactly. So it was through Anatolys wife that the recurse center found me and put me in touch with Anatoly and Greg in July of 2020.
00:15:08.570 - 00:15:33.880, Speaker B: That's a brand new one for me. Intro to Solana via Anatoly's wife. Like, that's first I've heard that that might have been the first. Yes, that is the first. So that's a pretty interesting story. So you met them. You met with Tolle and Greg Fitzgerald, one of the early co founders of, for some of you listening, who don't realize that there were multiple in the early days, and Greg was one of the huge contributors.
00:15:33.880 - 00:15:48.120, Speaker B: I think he actually did a large amount of the documentation, from what I. From what I recall, and the early stage documentation that wasn't perfectly readable to.
00:15:48.152 - 00:15:51.720, Speaker A: Learn how to build. Solana. Very clear, though.
00:15:51.912 - 00:16:11.554, Speaker B: Yeah, that's a story for another time. What happened after that? You met them. Um, did you actually have. I. I know in those days there wasn't any sort of real, um. Like, I think when I started, the coding challenges was like, here's a pr, go do this, come back when you're done, and if you do a really good job, we'll hire you.
00:16:12.774 - 00:16:37.196, Speaker A: Yeah, that was. That was actually it, uh, at that point, too. So they gave me, um. I can't remember exactly what it was, but it had to do with the, uh, the bank's client, which is only really used for testing at this point. And they were using TArPC, which is an RPC framework written by Google in Rust. And it's a bit of a finicky framework. Their macros do a lot for you without you knowing.
00:16:37.196 - 00:17:15.384, Speaker A: So there was a problem that they couldn't reuse a client twice for two requests at once, so they wanted to figure out how they could write it to do that. And as it turns out, the way that TArPC was done back then, you sort of had to use a workaround in order to do it. So I was fiddling around with async lifetimes. Async rust at that point was really, really tricky. If you think it's tough now, back in 2020, it was way harder. So figuring out how to make everything work in order to reuse this client. And so eventually I posted an issue with a workaround to the Google GitHub, and I guess that was enough to convince Greg.
00:17:16.064 - 00:17:57.348, Speaker B: That's awesome, man. This is just another one of those stories where web3 is much different process for hiring than pretty much any other industry. It's just like, do you have what it takes to solve some problem? Really hard problems? And if the answer is yes, you'll probably get hired. So that's a super cool story. I'm trying to think what else would be. Yeah, so after you. So you got hired, and then, like, I sort of alluded to this in the intro of the show, but you started with token swaps.
00:17:57.348 - 00:18:09.544, Speaker B: Was that like, day one, they're like, hey, John, did the token swap program exist or did you, or did you, did you create it and then, or did you take it over?
00:18:10.034 - 00:18:33.370, Speaker A: So it existed in a really broken way. I think it was something that Anatolia had thrown together in a couple of hours. And they're essentially like, hey, we need to have uniswap on Solana. Go ahead and do it. And build tools didn't super exist. It was just like this build sh script that we used. There was no documentation really about how to write programs.
00:18:33.370 - 00:18:45.514, Speaker A: So I had to learn how to write Solana programs. I had to constantly bug. It was like Jack and tiara for the most part. I had to bug them constantly because there was no documentation about how to do things. And they would, like, point me to the right places.
00:18:46.054 - 00:19:13.368, Speaker B: Well, I think for you, you gave back substantially. Like, you might have had to bug those guys. But when I first joined, I tried to bug everybody and you were like one of the very few engineers at the time that would give me the time when I was asking a million questions. I had no idea. I was like, dawn, like, there's no documentation for how to do XYZ. It was like, yeah, we just tell people to go look at the tests. And I'm like, that's not going to work.
00:19:13.368 - 00:19:56.984, Speaker B: So we have to figure out a better way. But anyways, to your credit, you spent countless, I don't even know how many days this would add up to. In the early stage, you and the rest of the core engineering team, like, answering questions, just one off the same question every day over and over and over again. And, like, that's actually how I learned, like, what the actual issues were. Because it's like, how do I transfer soul? Like, that's like how little information was out there on the Internet, or how do I create a token? How do I send an SPL token that didn't exist? Unless you were somebody who just gonna dig into the code and look at the tests and figure it out. So, like, it was a very interesting time, but you were definitely there to help me out. So that token swap program, did you pretty much.
00:19:56.984 - 00:20:05.704, Speaker B: That thing is not really under. It's not still being worked on. Right. This was just like an early days program. Like, once. It was good. It was good.
00:20:06.284 - 00:20:27.660, Speaker A: Yeah, pretty much. We haven't really touched it in a long time. It's funny, every once in a while there's someone from the Jupiter team who will reach out to me and be like, oh, by the way, X project is still using it. X project is still using it. Like, you'll just tell me about all these different projects that are somehow still using it. I'm like, great. Hey, as long as the worst feeling is as a developer is when you work on something, you write a bunch of code and it never gets run.
00:20:27.660 - 00:20:33.064, Speaker A: That's the worst feeling. Even if it's like old code, that may not be perfect. I'm happy that it's still being used.
00:20:33.364 - 00:21:31.492, Speaker B: Yeah, I think, like, I partially agree, but, like, let's say you build something, reference implementation that never actually gets used by itself, but somebody forks it, keeps it open source, and then, like, morphs it into this massive beast of a program. Sure, it's like, nice to somebody use yours, but, like, obviously your swap program was a reference implementation for pretty much every defi protocol out there today. You know, like, I doubt anybody didn't look at that to build out their own swapping mechanism. And if you did, like, what are you even doing? Like, at least take a look at it. So it's, I think the ripple impact of something like the stake or the swapping program is, is, is far greater than it might feel like. Even though you do hear about people still using it today, which is interesting. So after, so in parallel or after that stake pools, um, maybe you could explain just, I know most people understand what staples are, but, like, you, you were working on that program.
00:21:31.492 - 00:21:34.876, Speaker B: Did you build that one from scratch? First off, no.
00:21:34.900 - 00:22:19.184, Speaker A: So this one, actually, it was funny. We had a developer from Everstake that was kind of on loan who would, like, send me these, like, thousand line prs, and we would go back and forth on them for a long time in order to get them merged in. And so this developer, essentially, he got the base of it, excuse me, working. And so once the base of it was working, I remember having a conversation with Anatoly and Michael where I was like, this is what you like. We'd spoken about it before and sort of talked about the design for it, and they were looking at it and like, oh, man, this isn't really going to be very usable, is it? I'm like, this is what we talked about. I said that it wouldn't be usable. And they're like, we probably need to get this to be usable.
00:22:19.184 - 00:22:24.072, Speaker A: So then I spent all of 2021 getting it to be usable, pretty much.
00:22:24.248 - 00:22:35.164, Speaker B: And so just for the listeners who hear the word stake pools all the time, but don't know what they are, could you describe what that is and what's its function?
00:22:35.464 - 00:23:10.118, Speaker A: Yeah, sure, sure. Sorry. Now they're often referred to as liquid staking protocols. Liquid staking is, I would say, a bit more specific version of a stake pool. But the idea is that people pool together their soul into a protocol, into one so called pool that's managed by one entity, and that entity would be the one that actually distributes their soul to be delegated to validators. So a thousand people can come in, deposit some soul into the pool. They get back a token which represents their percentage of owner or their share of ownership in the pool.
00:23:10.118 - 00:23:32.154, Speaker A: Then the manager goes off and stakes the soul to whichever validators they want. And then over time, the soul in the pool accrues. The number of tokens stays unchanged. So this way, whenever they want to go get their soul back, their share of the pool stays the same, they get back more soul. It's the way to get your rewards through a token.
00:23:32.654 - 00:23:46.904, Speaker B: Yeah. So, I mean, that was a good explanation, but essentially, this is a mechanism to help with decentralization. Like, effectively, it can be, it also cannot be, right.
00:23:47.244 - 00:23:48.604, Speaker A: It can be all sorts of things.
00:23:48.684 - 00:24:00.064, Speaker B: It depends on who and what they're trying to accomplish. But, like, it can be an effective way to decentralize the network without having to manually, individually stake to every validator by yourself.
00:24:00.764 - 00:24:01.996, Speaker A: Correct? Yeah.
00:24:02.100 - 00:24:22.164, Speaker B: Okay, cool. So next, my favorite topic is going to be, as I mentioned again, the poorly named Token 22 program. So, first of all, before we get into all of that work that I think you mentioned you worked a couple of years on, how was that name decided?
00:24:23.704 - 00:25:01.864, Speaker A: You know, it's funny, I can't remember exactly. I think it was end of 2021 after the first breakpoint. And I remember having a conversation with, well, first, Michael and anatoly were separately reached out to me being like, hey, we've got this idea for this new token program. Do you mind working on it? I didn't realize I had other ideas of what I wanted to work on, but I was like, okay, this sounds like it's important. I'll go ahead and work on it. And we didn't really decide on a name. We were just like, all right, well, we know it's going to be something that we work on in 2022, so let's just call it token 2022, and we'll eventually come up with a better name.
00:25:01.864 - 00:25:17.824, Speaker A: 2022 came and went. No one came up with a better name. And now here we are, end of 2023. The thing is still not, like, officially recommended on Mainnet, and we'll only really have everything in place for the marquee feature. Confidential transfers in 2024.
00:25:18.804 - 00:25:39.484, Speaker B: Yeah, so it's. The Token 22 program has had a lot of buzz on Twitter about that name. Actually, I just have to tell this story because somebody was saying the core engineers should have the option to name at least one program once per year. And Jacob Creech tweeted that's how you get Token 22, which was hilarious.
00:25:41.264 - 00:25:42.644, Speaker A: That's very funny.
00:25:43.664 - 00:26:00.814, Speaker B: But anyways, so tell us a little bit about maybe just how that was. You spent two years developing this and how that was and sort of what's the impact of Token 2022?
00:26:02.234 - 00:26:49.368, Speaker A: Yeah, it wasn't like two years straight. It was a lot of off and on stuff as other stuff came up. When projects get a little slowed down or are in a pretty good place, sometimes I'll go and look at the core team and see what's needed. On the core validator side, one of the things that we're thinking about is eventually increasing the transaction size in order to accommodate the confidential transfers in Token 2022. So there's like, wasn't two years straight. But I guess to give you the big picture of it, the concept is we wanted to give more functionality at the token protocol level. People have done very clever things in order to make tokens more functional, able to do more things.
00:26:49.368 - 00:27:36.334, Speaker A: Like for example, the metaplex metadata program does a whole lot of extra stuff on top of it. Very cool, super complicated for them. In order to do all of that work, to freeze tokens and then do all the things that they need to, we wanted to add functionality directly back at the protocol level, but whatever we add, it can't necessarily impact those who don't want the new features. So the idea is you opt in to new features on your mints through extensions. So that's the big thing is you can add extensions for closing your mint, for confidential transfers, for making your tokens non transferable, for putting in a transfer fee, for making it look like it's garnering interest, all sorts of stuff.
00:27:36.874 - 00:28:16.044, Speaker B: So basically token program is, the new token program is allowing an ALA carte list of different functionalities on top of just the traditional, being able to mint and send tokens and do a couple extra things. And how, how, how complex was that work? Was it just a matter of time? Or was like there's, or was it a matter of complexity? Like what was, what was the sort of TLDR on? Like why it, like, obviously you were on and off different things. Was it like challenging to build that specific program? Or was it just like a matter of like, this is gonna take some time, we need to get it, right. Or, or was there more to it than that?
00:28:16.864 - 00:28:54.454, Speaker A: It wasn't. I mean, the most complicated part is the confidential transfers. Like, that is like really complicated stuff. Although I will say, like, if you have a moment, read Sam's white paper, which describes the whole protocol. I'm not a cryptographer, but reading through it and like, oh yeah, this makes perfect sense. This is, it's not that complicated, but it requires a lot of new runtime functionality in order to do it. Things like curve operations, which is mostly curve operations, and then another native program in order to check that proofs are valid that people upload for their transfers for whatever ZK stuff they want to do with their tokens.
00:28:54.454 - 00:29:09.774, Speaker A: But then the rest of it, not that complicated. It's more of a, like once you have the extension system in place. I was actually looking at that pr the other day. It was a bit of a monster getting the extension system in place, but then once that's there, the rest of it really just flows through easily.
00:29:10.864 - 00:29:57.888, Speaker B: Yeah, that's, yeah, so I mean, like, I think from everybody else say like, thank you. I think a lot of people were like, one of the big reasons I've seen, there's a lot of reasons people were excited about the new token program, but one of them is that how much this will impact the ability for people to start doing a little more with ZK. Zero knowledge on Solana, which, which is a huge unlock, obviously, for people to be able to do that. So like, it's super exciting. Are we, so are we as token program? The new Token 22 program is officially live in. Like is running on all the validators now fully audited or just not yet.
00:29:58.056 - 00:30:28.832, Speaker A: It's undergoing its final two audits currently, and it's going to require 1.17 on Mainnet, plus some features to be enabled before we'll give like the full, like, okay, this is good to go. We don't want to recommend it without confidential transfers. That is, to me, one of that is the marquee feature that we want to showcase. So until that's available, we won't go ahead with the full. Yes, official main net recommendation thing. It is available on all networks for testing purposes.
00:30:28.968 - 00:31:01.244, Speaker B: Testing purposes only, folks. Well, yeah, man, that's exciting. I know this has sort of just been like, you'd hear it would like buzz up, be like, what happened to Token 22? And then like, it would like not be talked about and then somebody else would randomly say it again and just like it was like this wave and now we're sort of right around the corner, which is super exciting. All right, so let's token 22, let's say, all right, shipped, I got some capacity. What's John gonna do next?
00:31:02.384 - 00:31:11.484, Speaker A: So the next thing that I'm really excited about, and it's funny, we could almost call it Token 2024 or maybe 25. We'll see.
00:31:12.424 - 00:31:18.804, Speaker B: Do that. And make sure you're allowed to say this, like, on the Internet and like, right now.
00:31:19.744 - 00:31:46.740, Speaker A: Yeah, yeah, yeah. I mean, the idea is, the idea is that there's a new runtime being constructed by the runtime team. We're going to need programs for that runtime. We're going to need an SDK for that runtime for people to build their programs and link against others and things like that. That, to me, is probably going to be the next thing that I'm going to be really excited about. And as part of that, we're going to need a new token program that works on runtime V two. Right.
00:31:46.892 - 00:31:54.380, Speaker B: And we're going to also need new educational content for all this stuff. Oh, so my job starts over. Great.
00:31:54.532 - 00:32:05.700, Speaker A: Yeah. And so I was thinking, if we're going to make another new token program for runtime V two, we're going to have to give it a name, token.
00:32:05.732 - 00:32:07.984, Speaker B: 2069, just for safety measures.
00:32:08.884 - 00:32:14.300, Speaker A: Yeah, we could do. I was thinking 2025. Right. Because then you're totally sure you're.
00:32:14.452 - 00:32:24.504, Speaker B: Please, please, John, stop. Because you're not, like the, the deadline will be missed specifically because you said that out loud.
00:32:25.044 - 00:32:31.504, Speaker A: Yeah, I know. I could say token 24 because it probably wasn't say probably, but it would be nice if we got something out next year.
00:32:33.724 - 00:32:57.420, Speaker B: Well, that's cool. That's exciting. Runtime V two, ladies and gentlemen, this has been talked about for a while. Lots of stuff is changing. Obviously. I did want to ask you, runtime v two, fire dancer, all these sort of incredible things are happening all at the same time. Maybe this isn't your world, but there's always a lot of questions out there.
00:32:57.420 - 00:33:38.134, Speaker B: Be like, well, once fire dancer is live, won't everybody just use that? Or. But I think the part of the thing that's missed, and maybe you're involved in some of these discussions, but, like, the idea was essentially fire dancer can be built without having to test in fraud. But the core lab, the core engineers will take a lot of the lessons learned from fire dancer to also enhance the Solana labs, like validator. Right? So it's like you're watching somebody else build something more efficient than you, and then you take those lessons and translate those into rust and then, like, optimize, like, and parallel.
00:33:38.474 - 00:34:03.214, Speaker A: Yeah, yeah. I mean, that's sort of the big idea is, like, they're. They have. The fire dancer team has the luxury of being able to build things with some time from the ground up and know what the bottlenecks are in the current validator. Like, the current validator was put together in order to be. To work as quickly as possible. And they've identified a lot of the bottlenecks, and we can start to integrate some of their findings, be it.
00:34:03.214 - 00:34:22.316, Speaker A: Yeah, I don't know, actually. I shouldn't say because I don't know specifically what the team is planning on doing, but any sort of techniques, like using different instruction sets for signature verification or perhaps using different syscalls in order to more efficiently handle network packets, things like that.
00:34:22.490 - 00:34:34.284, Speaker B: And this. And, like, I'm assuming that the. Those that are, like, heavily focused on that are all. But that have been following very closely along with the fire dancer team and all of their optimizations.
00:34:35.944 - 00:34:38.404, Speaker A: Yeah, yeah, they're. They're pretty close on that.
00:34:39.784 - 00:35:26.528, Speaker B: What's exciting, man? Specifically done, though, new token program, new runtime, new validator. Like, just. It's a little bit anxiety inducing just because new stuff means, like, a little bit more unknown things in the future, but, like, also at the same time, like, crazy exciting. Yeah. The way we like to. I wouldn't say we're not ready to end the show yet, but I do have a couple questions for you. And, like, it's a little different coming from a core engineer because, like, one of the questions I ask and, like, what sucks about building on Solana like, this, just straight up, like, answer this in any capacity that you want.
00:35:26.528 - 00:36:12.436, Speaker B: Like, maybe being low level, your challenges and the things that suck for you are way different than somebody that's building, like, a layer or two above that. This is open to interpretation. Like, what would make your life better? Like, what's not great about, like, building on Solana? It could be as much as just, like, building in such a greenfield space and, like, not have anything to compare it to, just as, like, a. Like, a proposed thought. I know this is harder for a core engineer because you're building infrastructure, like, for how things work versus, like, building on top of the things that, like, that are building down low. So maybe. Maybe you don't have something specific that sucks for you.
00:36:12.630 - 00:36:56.844, Speaker A: I mean, the thing that comes top of mind, which is maybe something that people might not consider, which is this thing is, like, the network is live. We cannot break things. That is the toughest thing. It's not like before Mainnet was launched, where if you want to make a consensus breaking change, it's like, yeah, no problem, you just make a ten line code change, you're good. Now, if we want to make that ten line code change, we need to wait six months for it, but to actually hit main net, if not longer, or we need to support, like, all sorts of old use cases because the network's running, we can't just, like, rug anything that's going on. As I'm sure you were aware, with the upgrade to 1.16, we made a breakage somewhere.
00:36:56.844 - 00:37:14.844, Speaker A: And who, boy, did we hear about it? And, like, trust me, I felt that pain, too. I had to spend a week in order to do it for SPL, and that's already knowing all of the code and knowing, like, ahead of time what the changes were going to be. I can't imagine, like, for others, how much more difficult it was for them.
00:37:15.704 - 00:37:44.300, Speaker B: Yeah, well, that's. That's a good answer. Like, I guess, like, now that I'm thinking about it, speaking to a core engineer that I can probably refer, like, the next question is typically, like, what's great about building on Solano? Which is. Typically means building on top of the stuff that you do? So let me rephrase this. Like, what excites you about building what you're building right now? Like, for Solana? Like, what's, like, you're still here, man. Like, you're. You're still here.
00:37:44.300 - 00:37:45.292, Speaker B: So there's a reason.
00:37:45.348 - 00:38:13.860, Speaker A: Yeah, I mean, this, uh, this will probably go back. I didn't get the chance to say this, but, like, one of the reasons that I was really into joining Solana all the way at the beginning was I looked at this thing and I noticed that it just fricking worked. Like, that was the coolest thing. There are so many. I'm not going to throw shade on any specific blockchains or anything like that. There's just, like, something that just works is really incredible. And also seeing sort of how hyped people can get about it.
00:38:13.860 - 00:38:36.194, Speaker A: Like, hearing from my brother's friend who didn't even know I was working at Solana, hearing him talk about it and him being like, oh, man. Yeah. I follow anatolia on Twitter. He's so cool. Just, like, seeing how much excitement there is, it makes things really exciting. And there is still such a big open space, like runtime v two. We have a vague idea of what that's going to look like, but I don't know what programs are going to look like for it yet.
00:38:36.194 - 00:38:51.074, Speaker A: I don't know how they're going to get linked against the runtime, things like that. They've got plans for it, but eventually, when you want to make an actual composable blockchain, there's so many other things that need to be done. So, yeah, we don't know where it's going to go. That's probably the most exciting part.
00:38:51.114 - 00:39:38.598, Speaker B: No, that's a cool answer. Also, we're pretty honest, and I'm pretty honest on this show. And when you say it just works, there were some times where it just didn't work, and those were not very fun times. But this is why I like to talk about it, though. It's because, and I had Brian long on here recently, and we were discussing some of this stuff, and it's like the amount of just up like that. I think it was early 2022, the first sort of little hiccup that uncovered so much that took six months of research just to understand what it was, and then probably another six months to decide how it was going to be implemented. And then, like, all of those things like Qwik and global fee markets and all those things like that work took a long time, but it got done.
00:39:38.598 - 00:40:19.744, Speaker B: And, like, holy shit, that was like a stressful year and time. But, like, to the core engineers credits, to the validators credits, to all the ecosystem engineers that actually, I know that there was a handful of them, and I don't want to call anybody out specifically, came in and also offered support to help figure that stuff out, write some code, solve some problems. But that's what happens when you're building something that nobody's ever built before. Well, build it before this fast and at this level of decentralization, that's the stuff that's really cool to me. But in those moments, they are not fun.
00:40:21.624 - 00:40:24.684, Speaker A: I mean, you know, the network goes down, it happens.
00:40:25.584 - 00:41:01.214, Speaker B: So, final question for you, and, like, again, you're a core engineer, so it's going to be a little bit different of an answer, maybe, than some people. But, like, what advice would you give to anybody that's looking to come and build either at your level or just like on Solana? Like, what sort of advice would you give those people? Because it's not like something that's going to necessarily come easy. We're in a whole new world here. Like, it's barely cared about by the majority of the world. Like, what advice would you give somebody who wants to get in to building the types of systems that you're building right now?
00:41:02.274 - 00:41:23.332, Speaker A: Honestly, the number one thing, and this is what I always tell people, is just read the source. Like, just read the code. That is, like, by far the best thing. That is how you'll be able to do the best contributions. That is how you'll understand what's really going on half the time with people like, oh, how does this work? I'm like, I don't know. Just got to read the source. It's extremely daunting when you're first starting, because you're like, where do I start? That's where.
00:41:23.332 - 00:41:51.390, Speaker A: Typically, reaching out to someone over maybe the Solana tech discord in order to ask where things are in the validator. I know we don't have a perfect space in order to ask these questions just yet. The stack exchange is a good place. If you're wondering where do gossip packets get routed, it's like, okay, well, I can point you to that file. You know, where, where do transactions get replayed? Well, that's. It's in replay stage. But, like, if you don't know that, you don't know that.
00:41:51.390 - 00:41:56.310, Speaker A: So I would say read the source, submit prs. That's, like, the best way to get engaged.
00:41:56.422 - 00:42:07.634, Speaker B: And if you are engaged on stack exchange, John has probably answered at least one of your questions. I'm pretty sure you're like, where are you right now on the leaderboard for, for Solana? Do you get, have you gotten leapfrogged yet by a bunch of people?
00:42:08.334 - 00:42:13.038, Speaker A: No, I always, I do check it every once in a while. Hold on, let me, let me check over.
00:42:13.086 - 00:42:20.754, Speaker B: Yeah, I do. Like, let's do it live. Let's see where, where you land on the Solana dot stackexchange.com leaderboard.
00:42:21.134 - 00:42:36.382, Speaker A: In terms of contributions, I'm at 7500 points, and John is behind me at 5100 and Trent at 5200. Oh, sorry, I meant John from the other. John from Devrel. We see on Devrel.
00:42:36.478 - 00:42:43.724, Speaker B: Yeah. Okay, awesome. And then Trent, top three. Anybody watching this? You need to step up your game.
00:42:44.744 - 00:42:48.844, Speaker A: I'm always surprised that Trent is that high. Cause he has way fewer answers than I do.
00:42:49.184 - 00:42:51.444, Speaker B: Maybe he just has better quality than you, man.
00:42:51.864 - 00:42:54.524, Speaker A: Yeah, that. That is what it is. I didn't want to say it, but.
00:42:55.744 - 00:43:16.824, Speaker B: All right, man. Well, that's the end of the show. Thank you for finding the time to come on here. I'm sure I'll get yelled at by the rest of your team for stealing you away from your actual job and coming here. But it's not always easy to get a core engineer to agree to come put their face on the Internet, so I really appreciate it, man.
00:43:17.724 - 00:43:20.544, Speaker A: I mean, you could probably get Trent to do it, but he wouldn't show his face.
00:43:20.844 - 00:43:29.624, Speaker B: That's. Yeah, exactly. I actually think I sent him a message and said, I know you probably say no, but will you do this? And he just never replied to me, so I took that as a no.
00:43:30.724 - 00:43:37.290, Speaker A: Hmm. Maybe Carl would do it if you. Again. If he wouldn't show his face. It.
00:43:37.482 - 00:43:42.346, Speaker B: All right, man. Well, again, thanks for showing up. Thanks for being here. Thanks for everything you do, man.
00:43:42.530 - 00:43:43.786, Speaker A: Thanks for having me.
00:43:43.970 - 00:43:44.794, Speaker B: Cheers. Bye.
