00:00:05.360 - 00:00:39.640, Speaker A: Hi guys, I don't know if you missed me. Will it show up? Oh, sweet. It's right there. So I'm going to go over four common problems we ran into when building foresight, and some of the most common issues I've seen devs run into in general. So just to be pretty transparent, I don't think this workshop will work for everything. Foresight is truly committed to being 100% defi. So we don't have a database.
00:00:39.640 - 00:01:32.014, Speaker A: We will probably never use a database. And there are also some things that I know people ask about that I won't really go over too much that are pretty clearly bugs. One of the most common issues that people run into, I think, is websockets when they try to connect to an RPC pool. So I'll just bring that out there, but I'm not going to go into too much detail in those. So one of the problems that I ran into when I first started building it is that I would do a buy order and the transaction wouldn't really change at all. And it was really frustrating because I would press approve and nothing would change. And the primary reason for that is the confirmation levels.
00:01:32.014 - 00:02:04.452, Speaker A: So when you do a new connection or you call an RPC, there's a different type of commitment that you can put in, and the default one is finalized, which is pretty great. It means that it's waiting for the supermajority to be confirmed, but that takes like dozens of seconds. What I've also seen people do is use processed everywhere or recent was before processed, and the problem was using processed.
00:02:04.508 - 00:02:07.224, Speaker B: On your is my mic dead?
00:02:07.884 - 00:02:14.692, Speaker A: The problem with using processed on your DAP is that you'll always get errors.
00:02:14.788 - 00:02:16.208, Speaker B: Way more than normal.
00:02:16.396 - 00:02:30.816, Speaker A: So it's great for doing things like let's say you want to do 20 30,000 transactions and you don't care about if the data is correct or not, but it kind of sucks on adapt.
00:02:30.960 - 00:02:36.072, Speaker B: So after months I just figured out.
00:02:36.088 - 00:02:37.816, Speaker A: That you're supposed to use confirm and.
00:02:37.840 - 00:02:41.884, Speaker B: It'S kind of in the middle of the two.
00:02:42.764 - 00:02:45.892, Speaker A: It's slightly slower than processed, it works.
00:02:46.068 - 00:02:48.344, Speaker B: Good enough, but.
00:02:50.444 - 00:03:39.544, Speaker A: It still has some risk. It's not finalized. If a lot of validators are slashed, it will break, but it's an edge case. This is an example of how you would do it in an RPC call. Normally I primarily use RPC. We see endpoints in the web3 library in our codebase, and each time you have to send the commitment level in a parameter, otherwise it will default to, I believe, finalized. Another issue that we ran into is that we want to pre populate lots of market information all at the same time.
00:03:39.544 - 00:04:39.214, Speaker A: And in order to do that, sometimes it's like 50, 60, 70 RPC requests. So the way we solve that is we basically batched all of the RPC requests that we would need to do. So this is kind of one of the functions we have, and we have like five or six of these that just get all of the info and then we decode it later. So this will get all of the yes tokens and all of the no tokens from all of the markets that we have in one go. And we'll just send a structure that looks like this and an RPC call, and we'll have all of the yes and no token balances filled out in just one request. And I haven't noticed an issue until you get more than 300 of these, where it starts to break sometimes, and this is how the end result will look. Cool.
00:04:39.214 - 00:05:44.794, Speaker A: So another thing that we had in foresight was we didn't want to have a create an account button, which you'll see on a lot of different programs. You might not even notice it, but there's always like this hidden approval step where they try to hide away that you have to create an account before you can actually use the product. We really didn't think that would be a UX that is ideal to users. So we only have one by yes button. And we solve this by. First we check for the PDA of the account, we fetch that data, and if that data exists, we basically either do an update or we run the instruction with an anchor to create the account and do the update at the same time. I know that anchor built something called init account if needed.
00:05:44.794 - 00:06:50.184, Speaker A: I'm not sure on the correct terminology, but that's primarily not to solve this issue. It's to solve the issue when two transactions go into a block hash at the same time and you're trying to create an account twice and one will fail. So while it does do this, I would kind of recommend still using this pattern, but maybe Armani can talk about that more. And then the final thing that I want to talk about is that we wanted to get rid of this concept of settling. So this crank that I'm going to show you doesn't quite have it. We actually have a custom crank, but I did not get a chance to put that in this presentation. But essentially in order to abstract the idea that something else is happening on the blockchain that doesn't require a user input, you need a third party to run transactions and move the order flow across the time.
00:06:50.184 - 00:07:30.634, Speaker A: And the way I think that's most common is a crank, and a lot of people just don't. You don't need it for every type of program. Like in Amm, the transactions are settled instantly. But if you're on market order and your order is like 15 minutes waiting to be filled, you can't really do that. So we use cranks to clear up the CR market events queue and process market order. And there are some kind of downsides. You need people to run the cranks constantly and you also need to pay transaction fees every time you run it, and they get quite costly.
00:07:30.634 - 00:08:21.662, Speaker A: So they do need to like, people who run cranks do need to be monetarily rewarded. Otherwise why would you just spend money for no reason? At foresight, we have a bunch of little teddy Sears at the bottom that do it for us. And this is an example of the CRM crank. The only difference with ours is we have a custom consume events instruction, which I think you can see at the TX add that also settles the market orders for us. Cool. Just a little bit about what we're doing at foresight in general. If you want to help out, we primarily started foresight as a governance.
00:08:21.662 - 00:09:19.064, Speaker A: We are all really passionate about creating a new form of governance and we think prediction markets are the best way to do that. So if you guys have an interest in daos, we would like to talk to you. We have some spitball ideas for storing historical data cheap and efficiently. On Solana, it involves using multiple ring buffers to do it, but I'm hearing there are probably better solutions. So if you guys have strong opinions on that, we'd love to talk to you too. We want to do a dress up NFT game just because we think it'd be really fun to dress up our teddies here in lots of different ways, and I'm really excited about being able to do that myself. And we love auctions, and rewarding people who are referring other people is something that we're also really, really interested in doing.
00:09:19.064 - 00:09:38.744, Speaker A: If you want to follow me, I'm Tom Gishuri and there's the foresight market, Twitter as well on the bottom. And you can check us out with this QR code. Yeah, I think I'm done, but if you guys want to take a photo of that, that would be great.
