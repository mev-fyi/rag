00:00:00.320 - 00:00:34.734, Speaker A: Alright, guys, welcome back to the changelog once again. And today we actually have a very special changelog shoot. This is going to be our kind of like year in review session here. So we're talking about some of the cool stuff we saw and covered in the last year and kind of like what we might be looking forward to in the next year. So I'll start out with one, Jacob. Basically, I think one of the coolest things that I saw last year that we covered a little bit was some of the dev tooling that we, that we looked at. So like we had seahorse, we had like also some educational, like dev tooling related stuff.
00:00:34.734 - 00:01:04.804, Speaker A: You know, there was also the newest reveal that I don't know if we covered in the video or not of the JavaScript library where you can write Solana programs, SolPG also for dev tooling. So really cool stuff. Like, I feel like the dev tooling community keeps getting stronger and we keep seeing more people pop up with ideas and like building cool stuff and like more and more useful ways to write Solana programs, to build dapps, to kind of like practice and learn. What do you think?
00:01:05.224 - 00:01:54.768, Speaker B: Yeah, in the past year there's been tons of improvements in tooling. It's like, if you think about a year ago at this time, we maybe had three different clis that could like build a basic anchor program, build the Solana program and create an NFT. And then if you look at where we're at now, like we could write Solana programs in the browser, we can write programs in Python with Seahorse. We can build and generate our own Dapp from scratch, like boilerplate, just with a single command. So really the tooling has upgraded dramatically and just props also to Solana Playground. That's probably my favorite tool in the past year. It just has unlocked so many different opportunities for, especially new developers building on Solana to quickly get set up.
00:01:54.768 - 00:02:11.974, Speaker B: And not only that, there's also a, there's a versus code extension now to where you can use just versus code along with your rust analyzer and a bunch of other extensions that you like to use, and be able to write your Solana program code immediately in there.
00:02:12.094 - 00:02:20.994, Speaker A: That's a good shout out. Yeah, that's a good shout out. Shout out to Acheron and to anybody who worked on that project, because SolPG is a big deal.
00:02:21.494 - 00:03:08.014, Speaker B: Yeah, huge deal. And then some other big changes that happened in the past year is like, hey, there are some changes of like, hey, you can now use version transactions. So if you were to previously try to use a transaction that had like a ton of accounts. You're kind of limited because you, I think you're only limited max 30 pub keys, but you probably use more than that. So that was a big deal. And then there's one other like big deal is that like hey, you could also do priority fees now, so like you can basically prioritize your transaction amongst all the other ones on the network by just adding a little bit of soul to the transaction to put it yourself ahead. So that was really cool as well.
00:03:08.674 - 00:03:37.770, Speaker A: Yep, those are huge ones. Also some changes like to Solana source as well. We saw the new token program, token 2022. So I don't even think that's really been unlocked completely yet. As far as the potential for what you can build on it, I think it's still so new. And you know, we're hopefully going to be releasing a video talking to one of the engineers, John Sink, about some of the new features about that. So that'll be super cool and we want to see some more projects with that.
00:03:37.770 - 00:04:07.024, Speaker A: But we had that come out and yeah, I think the priority feed stuff is really cool that we got to see that in the version transactions. And also the obvious one that we saw as well is quick, we heard and I think we covered on this video series or whatever you want to call it, that we had like a vendor that we were working with that right after Quic was implemented, they were extremely impressed with some of the reliability as far as throughput and things like that. It's kind of cool. Worth mentioning.
00:04:07.324 - 00:04:39.190, Speaker B: Yeah, and another thing that happened is that the compute unit caps increased dramatically on transactions. So at the beginning of the year you had 200k compute units and that was it, that you're set and stuck at that you can't increase at all. And now we have a max of 1.4 million. So between that and being able to do like address lookup tables with version transactions, you have unlocked so much more potential on what you can do in your Solana program. So that is awesome.
00:04:39.382 - 00:04:42.834, Speaker A: So Solana throughput is getting even larger and larger.
00:04:43.294 - 00:04:50.714, Speaker B: Yes. The amount of things that you can do and causing throughput to change is getting a bigger, having a bigger impact.
00:04:51.254 - 00:04:52.354, Speaker A: That's amazing.
00:04:52.974 - 00:05:48.274, Speaker B: Yeah, so there are some other changes that we're looking forward to in relation to that. Those things kind of unlock the ability to do more with your transaction. And there's still more coming in the future of being able to give you more breathing room to do more actions in a single transaction. So in the future where there's a lot of, well, right now, there's a lot of research on how to increase a transaction size. So we know, like today transaction cap is capped at 1232 bytes, really 1280, but there's some header room there. So in the future, there's a lot of research on, like, how do I increase that and have like double the transaction size or even like more. The exact amount that you might have in the future is still to do, to be determined, but, and like, also how that increase happens.
00:05:48.274 - 00:06:03.044, Speaker B: But it's going to unlock even more potential for Solana programs on what they can do, how they can interact with the user, and the amount of different actions that someone can take on chain in a single transaction.
00:06:03.864 - 00:06:43.006, Speaker A: That's super cool. I'm really glad you called that out because it's really like we're kind of almost just getting started in a way, about the potential that you'll be able to build on Solana and some of the different kinds of apps that you can build with, what they can handle, like what kind of transaction size, what that relates to how the app operates and how the user experience kind of is, and how much stuff maybe costs for your users that have wallets connected. All that stuff is going to be subject to change for the better. So that's really awesome. Good to call that out. An obvious one, too, that we're looking forward to is obviously anything mobile related because we've got saga on the rise. Right.
00:06:43.006 - 00:07:12.388, Speaker A: SMS and we've talked about it many times. There's the saga. Yeah, we talked about it many times. And, like, there's just gonna be so many cool things that we're gonna be able to do with, like, crypto apps that are native to mobile phones. Right. Like, not only are you gonna be able to put your crypto apps in people's hands via the saga device, but you also, like, we talked with Andrew, which we got a video coming soon on some saga stuff. We talked about how, like, these apps are really mobile native, not just saga native.
00:07:12.388 - 00:07:34.018, Speaker A: So, like, it lays some really cool, like, foundational groundwork for mobile crypto. And obviously, apps are kind of, like, engineered differently as far as their design and how they reach people and do things when they're on a mobile device. So it's cool to see that being able to become a reality in some engineers minds and some of their design flows. Yeah.
00:07:34.066 - 00:08:14.654, Speaker B: For so long, crypto has been just like desktop, only. You gotta lug around your laptop or, like, go home to get things done on your crypto. Like, it just doesn't make sense. So looking forward to that changing. And actually people building, like, really cool mobile applications that really can bring crypto to the masses. So some other changes that will probably be happening in the future is that like, hey, there's also bankless leader and asynchronous slot leaders as well. So bankless leader allows you to have basically the bank created elsewhere.
00:08:14.654 - 00:08:47.376, Speaker B: And so basically, the leader doesn't have to worry about packing the blocks. It only has to worry about, like, validating the blocks and validating the transactions. So this is kind of seen as a way to increase throughput on the network dramatically. So currently, like, the way that people are estimating each slot time is 400 milliseconds in the future with bankless leader and more, it might be less, it might be even be like 200 milliseconds per slot, which is twice as fast.
00:08:47.520 - 00:09:18.374, Speaker A: Wow, that's awesome. That's a super cool one to look forward to. There's also the changes that are coming to the proposal process, too. So there's going to be a more, arguably more transparent, but probably a little bit more robust process for introducing proposals to the Solana network and kind of going through them and making them something that people are comfortable with, kind of like drafting and talking about and weighing in on and stuff like that. And it'll be a little more formal. You're kind of involved with that process, aren't you, Jacob?
00:09:18.714 - 00:09:57.294, Speaker B: Yeah. So the Solana improvement documents, or SIMD, they're very similar to what you would expect, like EIP, but a little bit more relaxed and allow you to work faster. So you can see that today. If you go to the Solana foundation, GitHub.org, and sauna improvement documents, you can see all the different documentation and improvement proposals being put out right now. I believe as of recording, there's, like ten of them being built right now. It's like, hey, there's a lot of really cool things to read about and changes that could come onto the network, and you can read about them all right there in one single place.
00:09:57.294 - 00:11:12.324, Speaker B: And in line with that, in the new year, there is actually going to be a core community call as well. So there is one. As of recording, it'll be this week, but whenever this goes live, it'll be previous to now of like, hey, you can have a, there's a place where the core contributors on the Solana protocol can discuss and talk about new improvements and technical details, and then it's open to the public so that public can view it and give questions and, like, have a q and a session at the end where like, hey, what happened on the Solana? What is this? What does bankless leader mean? Could you go in depth of that? Like, what are your plan? What are your plans for that? All of that is coming and it will be a much more open way of, one, being able to see insight of how development on Solana is happening, and two, it's an avenue for people that maybe they're not a contributor today, but they can see these are the problems people are voicing in the core community call, and maybe they can go try their hand at building it or fixing the problem themselves. So it's a new avenue for people to become contributors in the future as well.
00:11:12.864 - 00:11:41.944, Speaker A: Awesome. That's huge. That's going to do a lot for people that, because there's a ton of people who really just want to be involved in any way, shape or form, and that'll make life a lot easier for them. Before we wrap up, I want to just ask you what as far as like, dev tooling, that was the first thing that we talked about. What do you think would be some of the coolest, like, dev tooling improvements or enhancements or even just like all around new tools that you would want to see in 2023? What do you think?
00:11:42.364 - 00:12:40.574, Speaker B: Cool. So one thing that I'll first mention was out today, and then like, a thing that we can even improve on is anchor has a way that you can list all the accounts to within a, I believe it's like the YAML or the toml, so that you can list all the accounts that you want to copy from Mainnet on your test load or something like that. So that's, that's really awesome. You can also do this with the Solana CLI today. Whenever you load up a test validator, you just add all the arguments to load your separate accounts. Awesome. A way to kind of improve among that and like, more create a better tool that will allow development and testing and also composability on different programs is like, hey, what if we had a framework that allowed you to one, like, just in a single yaml, say like for Openbook, I want to, in a single yaml, give all the accounts to trade on the sole USDC market in Devnet.
00:12:40.574 - 00:13:39.882, Speaker B: And so I put that all in a single yaml, but then also give instructions on how to run the crank and say it comes with like a docker container next to it. And so whenever you load it from like a root directory, it'll load up Openbook with the cranks and you'll automatically be able to use basically what Openbook is on mainnet on your local. And so you can do this with multiple programs. So like you have your yaml for Openbook, you have your yaml for Mango, you have your yaml for Jupyter. And that way like, hey, as protocols that want people to build on top of them, they can just publish that yaml and like the associated web two infrastructure in a dockerfile and then anybody can test on those different applications or programs on chain immediately on your local. You don't have to go to Mainnet. You have a lot more power on what you can build locally.
00:13:39.882 - 00:13:45.614, Speaker B: So that would be something really cool that I am looking forward to seeing coming out in the new year.
00:13:45.934 - 00:13:52.558, Speaker A: Dang, that's a good one. So if you had multiple cranks you wanted to include, you could just have multiple docker containers.
00:13:52.726 - 00:13:53.206, Speaker B: Yep.
00:13:53.270 - 00:13:58.194, Speaker A: And then Docker, Docker meets Solana. Let's go.
00:13:59.854 - 00:14:23.254, Speaker B: But it's more like, hey, you can basically, you can just say you have a framework that in the root directory, you just run it and it will look in all of your child directories for or this yaml and the associated docker and it creates a docker network, runs all the cranks and loads all the accounts and programs whenever you load your local test validator. Just a simple way to put it.
00:14:23.554 - 00:14:27.974, Speaker A: Yeah, that's a really good one. Very detailed too. I like it. Somebody should be taking notes.
00:14:28.274 - 00:14:29.914, Speaker B: Been thinking about it for a while.
00:14:30.034 - 00:15:11.432, Speaker A: Yeah, I could tell. For me, I've got, I think, two that are a little more general than that. I think the two things I would like to see get some love for dev tooling. One is going to be like dynamic, like relational data on Solana. So like the way PDA's and like the seeds and everything you use to create them or set up, it's actually poised to have really good relationships between your data. And mind you, some people are already using this and probably doing a great job of it. But I think for somebody who maybe doesn't have experience with that kind of stuff, for somebody who's like a little newer and like still figuring out how to write like Solana programs and deal with all these program derived addresses, it'd be kind of cool to see like some tooling around.
00:15:11.432 - 00:16:03.752, Speaker A: Basically, I don't want to consider it like an Orm, but like almost like, basically you're kind of like helping abstract away some of the mapping of your data. Maybe you use like some ids or whatever and you can sort of relate different tables, almost like SQL, SQlana, something like that. So that would be kind of cool. And then I also think it would be neat to see some better interoperability between what's in your program and what's in your client, like, in your app. So we've already got idls, and that kind of changed the game, but I would love to see, like, more stuff being built on that concept. Right? Like, when I build this, this rust program, whether it's anchor, whether it's native, whether it's Seahorse, you name it. Once I'm finished, like, I should easily be able to create code in my client side and get everything from, like, type sensitive, like, versus code, like messages or whatever.
00:16:03.752 - 00:16:18.964, Speaker A: Right? Like autocomplete, things like that. Like I said, I know there's a lot of good stuff with anchors IDL stuff already, but I think there can be a lot more built on that that would help. You can just whip together client side code for your program a lot easier and other programs, too.
00:16:19.544 - 00:16:39.528, Speaker B: Yeah, that would be really cool. I know there's a lot of work being done right now to, like, standardize the IDL to actually make these types of things possible in the future, but, yeah. So thank you all for viewing and being with us with Changelog this year. Looking forward to the more changes and more developments on Solana, the new year. Y'all have a good one.
00:16:39.656 - 00:16:41.384, Speaker A: Yep. Enjoy the holidays. Later, guys.
