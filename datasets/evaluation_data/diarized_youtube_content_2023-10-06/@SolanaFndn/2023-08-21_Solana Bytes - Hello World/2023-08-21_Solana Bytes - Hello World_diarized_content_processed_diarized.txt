00:00:02.040 - 00:00:32.886, Speaker A: We're gonna write our first Solana program. So, to get started, let's take a look at what a transaction looks like. We got a list of signatures and a message, and inside that message is a list of instructions. Now, these instructions are what actually go and hit programs, right? So those are what clients send to programs that live on chain. A program is just a bunch of bytecode that has been put into an account on Solana's chain, and it can be invoked with instructions. So pay attention to these parameters. Here we've got program id.
00:00:32.886 - 00:01:24.294, Speaker A: That's the program that this instruction is intended for, the accounts, which is just a list of public keys of accounts that are going to be involved in whatever operation this thing is conducting. And finally, the instruction data, which comes in as bytes, but it can serialize into actual rust instructions to tell these programs what to do. Now, let's go see this actually implemented in a program using rust. This is the Solana playground IdE. So this is a web based ide, and that means you don't actually have to install Solana rust cargo or anything else. All you need to do is go to beta SolPG IO, go ahead and connect a wallet, and then you can get set up. So we're going to set up a new project here, and you can see that the different frameworks you can actually write Solana programs in come up as options.
00:01:24.294 - 00:01:58.036, Speaker A: So we're going to just go with hello world, and we're going to choose native. We'll cover the other two in some future videos. So let's take a look at this hello world code here and see what's going on. Now, the first thing you guys should notice is this function down here, process instruction, right. We're marking that as the entry point of our program using this macro. And that just tells Solana that that's going to be the program's entry point, which is pretty straightforward. It's where those instructions are going to go to, and that's exactly why they have the same exact parameters that we saw on the instruction setup.
00:01:58.036 - 00:02:36.662, Speaker A: Makes sense, right? So now we've just got some logging going on here. Nothing crazy, but let's go ahead and actually add some logic to read in and maybe do some stuff with some accounts. So as you can see, we're reading in these accounts using an iterative. Right? So we're going to iterate over this vector that comes in of account info types. And as we do that, we're going to just render each one as an account info object. That's, of course, if it's been successfully read in. Now, what's going on here? Well, these public keys come in, the runtime goes and retrieves these accounts, and then if it all checks out, we can actually load them into our code.
00:02:36.662 - 00:03:10.906, Speaker A: So in this situation, we have a payer, which is like somebody who just paid for the transaction fee and signed for the transaction. And then we also have the system program, and this is going to be the public key of Solana's system program, which looks like all ones. We'll talk about the system program in a future video. It'll actually come up a lot as you do stuff on Solana. But let's go actually deploy this program and let's hit it with a test. So if you hit this wrench and hammer tab up in SoLPG, you see we have this build option. Go ahead and build the program.
00:03:10.906 - 00:03:47.172, Speaker A: And once you've built that successfully, you can go ahead and click deploy. And that's it. We just deployed our program to Devnet, and notice how fast that was to build with SoLPG. And it was even pretty quick to deploy as well. Also, what we can do here is we can check out this program credentials tab, click that, open, grab our program's id, and we can use it in our test, which looks like this. So the first thing we're doing is setting up a new connection to Devnet. We use this create key pair from file function to load our local key pair in as our payer, who's going to be paying for the transaction fees.
00:03:47.172 - 00:04:07.910, Speaker A: And then we can drop our program id right here. And then, of course, here we're just building an instruction. And take a look again. This is the same exact format that we've seen twice now. So we've got our program id, which is going to be, of course, our program. We've got a list of accounts, so the public key and then a little bit of information about them as well. Right.
00:04:07.910 - 00:04:33.096, Speaker A: So the payer in this case, pass in their public key. But we also have to tell Solana that the payer is in fact the signer and their account is writable. And that's because in order for them to pay for a transaction, we have to be able to debit them a little tiny amount of soul to pay for the transaction fee. Right. So we have to tell Solana that this account is going to be writable. We're going to be changing its balance. Now here we also go.
00:04:33.096 - 00:05:02.354, Speaker A: Grab the system programs id, which I mentioned. It's all ones, it's a constant, so we just can reference it like this, but it's not the signer and it's not writable. This would be our instruction data here, but we don't have any. So we're just allocating using buffer zero. And finally, we're going to send this transaction and we're going to sign it with our payer. So now we're just going to pop open a terminal here, and we're just going to do Solana logs. And now we're going to scan for our program id using this command right here.
00:05:02.354 - 00:05:13.834, Speaker A: We run the test, and there's our output. Hello, Solana. So that's it, guys. That is how you write a hello world Solana program. We covered a lot of stuff in here. Stay tuned for more byte videos.
