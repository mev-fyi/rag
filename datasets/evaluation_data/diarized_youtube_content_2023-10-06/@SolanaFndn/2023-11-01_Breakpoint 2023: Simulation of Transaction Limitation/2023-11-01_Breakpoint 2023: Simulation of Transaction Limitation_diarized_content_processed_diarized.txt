00:00:03.560 - 00:00:41.544, Speaker A: Morning, everyone. I hope everyone's having a great day, too. At breakpoint today, I'll be talking about a topic which is very important in the wallet ecosystem, but not a lot of thought is given to it. Transaction simulation and its limitations before I proceed, let me introduce myself. I'm anvit. I'm a developer experience engineer at Fantom, and my focus has been to improve the interaction between developers and the Solana ecosystem. Previously, I was a software engineer at Amazon and a community developer at Metaplex.
00:00:41.544 - 00:01:57.054, Speaker A: At fandom, I've worked on integrating many Solana ecosystem initiatives, such as version transactions, priority fees, and more recently, specing the sign and with Solana standard. All right, let's get to it. So, transaction simulation. What is transaction simulation, and why do we need it? What is it useful for? Transaction simulation is not only useful for users to understand what assets are being transferred to and from their wallets, but it also helps them understand what kind of vulnerabilities are they exposed to. As you can see on the right, sometimes when you're signing a transaction, you see these red boxes or yellow boxes that indicate what kind of vulnerabilities you're exposed to when you're about to sign a transaction before you sign a transaction. All right, so what's the issue with transaction simulation? Before we understand what those issues are, we need to take a step back and understand what durable nonsense are. So there are two broad ways of signing a transaction on Solana.
00:01:57.054 - 00:02:53.194, Speaker A: One is using a block hash, wherein you have around 150 blocks, or around 90 seconds to send the transaction after you've signed it. So there's a forced mortality to the transaction, and then the other way is durable nonsense. So durable nonsense are very interesting. After you sign a transaction, you can send them at any time in the future as you want. So, driven on this provide a way to create and sign a transaction that can be submitted at any point in the future. And on the right, you see this transaction expired pop up, which sometimes you see when you get this transaction signature signature request, and you don't sign it right away. And then you wait for ten or 15 seconds, and then you see this pop up, which shows that either the dapp or phantom added this block hash to the transaction, but it got expired.
00:02:53.194 - 00:03:59.200, Speaker A: So, yeah, this is usually using recent block hashes. All right, so this is really interesting, but you might be thinking, isn't that risky that we're signing the transaction and not sending it right away? What if someone misuses it? And the answer is, yes, it is kind of risky. So once the user signs a transaction, a durable transaction. A malicious attacker can potentially, they have ample time to alter the bits using writable accounts in the transaction. So the next question is, can't wallets predict this and simulate these attacks in advance? And unfortunately, there is no easy way to accurately predict what the attacker may do. Um, but there is something that wallets can do. So wallets can detect if the user is getting a request using durable transactions, um, and display critical warnings for corresponding signature requests.
00:03:59.200 - 00:04:50.308, Speaker A: So, uh, currently, most wallets in the ecosystem already show these warnings for durable transactions. Uh, you can see like, you know, this is an example dapper where the user is getting a durable transaction signature request, and then they get this red warning that this transaction could steal your funds in the future. Do not proceed unless you trust this website. So this is very important that wallets show this warning to the user. And most wallets do currently shout out to Solandy for actually raising awareness about this. Okay, so do not sign doable transactions. Is that enough? Unfortunately not.
00:04:50.308 - 00:05:31.424, Speaker A: So normal transactions. And by normal, I mean transactions using recent block hashes, signed using sign only RPC methods like sign transaction. Signall transactions are prone to these attacks too. Although the malicious attackers get less time to alter these bits, they still have ample time to do so. And on the right, you see this flow of events, how it happens. So the Dapp creates these, and this flow of events is for explaining what sign and signall transactions are. So the DAP creates these transactions or transaction.
00:05:31.424 - 00:06:12.044, Speaker A: They use the RPC methods for signed transaction and signal transactions. As soon as the wallet gets this request, the wallet shows this signature request to the user, the user approves it, and then the wallet sends back this signed transaction or signed transactions back to the Dapp. And then it's the Dapp who actually sends these signed transactions to the RPC endpoint. That is how sign transaction and signall transactions work. And as you can see, it is the DAP who is sending these transactions. So this DAP could be a malicious attacker as well. And as they have the signed transaction, they could potentially alter the bits.
00:06:12.044 - 00:06:49.184, Speaker A: So what's the path forward? How do we resolve this? The only safe way to resolve this issue is deprecation of sign only methods, and that is sign transactions and signs. Sign transaction and signall transactions. Yes. Yeah. The only safe path forward is to deprecate these methods over time. And the Ethereum community kind of had the same path over a few years back where they deprecated ETH sign. And you see this dialogue in metamask as well.
00:06:49.184 - 00:07:41.664, Speaker A: Where you have an option to turn it on potentially, which is not recommended. So yeah, the Solana community also needs to reach this point at some point in the future. Okay, so if we have to deprecate these methods, we will need to have alternatives for these methods, right? We can't just deprecate them. So we already have sign and send transaction to replace sign transaction. But what about signall transactions? We don't have any alternative method for this. So yeah, introducing sign and send all transactions. And yeah, this is being currently specced out by Phantom and by other wallets with the help of Solana Labs blowfish Jito.
00:07:41.664 - 00:08:23.734, Speaker A: This is a very collaborative effort. And yeah, using this method, Dapps can potentially trigger a sign and send all transaction requests. So you can sign and send greater than one transactions concurrently. And now you see the updated flow of events. So the transactions are being created. They use the RPC endpoint for sign and send, or sign and send all. The wallet shows the signature request, the user approves it, and it is the wallet who then sends the signed transaction to the RPC endpoint and not the DAP.
00:08:23.734 - 00:09:24.202, Speaker A: So the tentative spec is going to be this. The input is going to be an array of transactions very similar to signall, and then the output is going to be an array of signatures which are going to be strings or it's going to be null. And we're currently debating on. We should also return some errors in case the transaction submission fails. One important point to note here is that wallets also need to confirm the transaction before they send it back to the DAP, before they send the signature back to the DAP. Because if the transaction is not confirmed, then it is as good as just signing it and not sending it by themselves. So yeah, if you're a DAP using sign only methods, we recommend migrating to send also methods, and we'll be explaining how to do that over the coming months, years, whatever.
00:09:24.202 - 00:09:45.374, Speaker A: And yeah, and if you want to participate in our early rollout and testing of this new provider method and want to participate in actually driving this initiative in this ecosystem, please do reach out. Yeah, and thank you. If you want to reach out, you can message me on Twitter or you can have a chat after this talk. Thank you.
