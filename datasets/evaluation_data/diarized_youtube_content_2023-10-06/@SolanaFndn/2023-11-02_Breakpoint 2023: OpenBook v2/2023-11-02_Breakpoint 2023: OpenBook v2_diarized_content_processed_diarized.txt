00:00:04.560 - 00:00:32.460, Speaker A: All right. All right. Yeah. I hope you don't remember last break point too much. It was definitely a very different vibe from this year. I still remember it quite badly. And for those who weren't around back then, basically, there was this idea once FTX broke down, that there might be compromised keys involved in the deployment of serum.
00:00:32.460 - 00:01:09.312, Speaker A: And serum was a backbone of liquidity for Solana Defi. Lots of projects were integrated with it, were relying on it. It's the centerpiece for centralized, decentralized exchange arbitrage, because most traders on centralized exchanges are used to order books, and, well, it was the main order book on chain at that point. People weren't sure what's happening. People were pulling their quotes, and a small community was forming around it immediately ready to pick up. And I think it was within hours, 200 people were working on it. A bunch of protocols integrated straight away from day one.
00:01:09.312 - 00:01:46.952, Speaker A: And it was amazing to see the community in this absolute bottom point of motivation in the aftermath of FTX, come together and build something new. Right. This is like a chart, basically, of trading volumes on openbook. I think you can point at where 2022 is, right. That's basically when we transition from serum to Openbook. At its peak, serum was trading $700 million a day in daily volume. Openbook is far from there, but it's constantly growing.
00:01:46.952 - 00:02:35.750, Speaker A: More people are integrating, and because it was such a short notice, there was no time to change the code. It was literally just deployed, as is community, governed by a large multi seq of key stakeholders in the ecosystem. And since then, of course, there was an idea, what can we improve? Right? What can we do better? And the idea to make a second version, taking all the learning from all the different protocols in Solana that came out since then, creates something that is completely free to use for anyone. It's a completely unmonetized protocol. The only way to monetize it is build your own UI for it and charge fees yourself. But the protocol itself doesn't retain anything. It's a pure public good.
00:02:35.750 - 00:03:02.192, Speaker A: It's completely open source. We're lucky to be able to sponsor some prizes. So we did that for the hyperdrive hackathon. We gave our $25,000 prize pool. The moment we announced it on Twitter, someone came up and was like, hey, I already have token 2022 integrated. Where can I send a pull request? It was just like one of those magic moments you can only have on this project. It's incredible.
00:03:02.192 - 00:04:18.714, Speaker A: There's so many people integrating, and it's not only, you know, small projects coming in a hackathon, new developers also established projects like Jupiter, Mango, radium were integrated. And a huge shout out to all these people who took the time, right? Like dual finance, metadao, sole, ape, prism, tab trader. See some of those people here in the audience. This is amazing, right? So the big question that everyone asked, right, and kept commenting about, obviously because Phoenix went with a crankless design, was why are you guys using a crank? Again, what's going on? What is that idea? And I mean, it was like one of those things we just couldn't talk about before releasing the final version of the code. I mean, if you were eager to read the source code and see what exactly the new hybrid crank is, then you could know before. But we didn't really want to explain everyone while it's being built, why we need it. The basic idea here is the moment you have a crank, obviously there's some latency problems.
00:04:18.714 - 00:04:57.876, Speaker A: Throughput can get limited in heavy trading sessions, and a crankless design really handles that well. But there is fundamentally a crankless design is a degradation in parallelism. The maximum parallelism you can achieve is higher on a crank design just for the fact that the matching needs to be settled afterwards. And not everyone needs to be on the same account. It's technically a bit involved to explain. We only have ten minutes, so I can't go into detail, but everyone that is like into the debate, I would say like read the source code, look at the new hybrid design. I think the guys came up with it.
00:04:57.876 - 00:05:47.870, Speaker A: Amazing solution there. Probably 90% of the traits won't need to be cranked, they will just be instantly settled. And the crank is just there to handle those few edge cases that can't be solved completely crankless. But it ensures that the market is completely open to anyone and that anyone can match at any time. Still, this is really important, right? We need to have the matching engine on chain. And people also discuss that, like why you're building on chain order book, why are you doing that? And I think the first time we saw a decentralized exchange that was based on limit orders, that was based on order book was Ether delta. And the biggest issue with it was that the matching engine was client side, which severely limited the throughput.
00:05:47.870 - 00:06:15.546, Speaker A: It didn't rely on trusted hardware. You just need your own client, ethereum, the blockchain. But the only way to scale that design is by adding trusted hardware to it. You need a centralized matching server. And once you start doing that, you can just go all the way and build Nasdaq, put a big mainframe, somewhere fully trusted hardware, and you have full control. But this is not what DeFi is about. We want more throughput and we don't want to rely on trusted hardware.
00:06:15.546 - 00:07:05.234, Speaker A: And the only way to achieve that is build a matching engine on chain, build it on the fastest chain we can find, which is Solana as of today. And so people continue with that idea. I think the optimization that went into OpenBook V two was incredible. I remember some of the developers were sitting there looking at the bytecode as a decompiled assembly and trying to squeeze out the last compute unit possible. So it's an incredibly optimized design, and that's also the only way to make things faster. Either you do the hard work, you look in the code, you try to see what you can optimize, or you do it from the other side, which I'm also a big fan of. It's like, let's just optimize Solana, let's make the platform faster so we don't rely on trusted hardware.
00:07:05.234 - 00:07:38.274, Speaker A: A few projects that came up in the current hackathon, I think they definitely need attention, need feedback, so I want to highlight them. Arcana basically allows you to build your own trading bot. It's a tool built by someone who already contributed previously to mango, to serum. It's a great team. I love the guys. They started doing this a few months ago while Openbook V two was still in development and finally released during hyperdrive. There's also root.
00:07:38.274 - 00:08:21.350, Speaker A: Basically they want to make a vault, automated training strategies, but even more accessible. You don't need to build your own bots, you don't need to build your own strategies. These guys also released during hyperdrive. Definitely worth checking out. And then lastly, I think one of the more controversial projects discussed on Twitter, metadao, the Prophet has ascended is a very interesting experiment in Futokey. Kind of like so wild that most people don't understand it, honestly. We were also a bit puzzled when this guy came abroad and started contributing, sending pull requests.
00:08:21.350 - 00:09:04.336, Speaker A: He launched his own order book in the meantime, just as a side project to show us some of the optimizations that could go into Openbook. Great guy. He's also here in Breakpoint, if you can find him. He's very unknown. And yeah, so if you're a developer, you want to have an orderbook in your application involved somehow. Definitely have a look at Openbook. I think one of the learnings that we took from overtaking a code base that we worked peripherally on, but never really worked as core maintainers on was that there is some tools that are really, really helpful in building good open source projects and fuzzing is one of them.
00:09:04.336 - 00:09:29.544, Speaker A: I really recommend it to everyone. The developers loved it. It found so many bugs. And one thing that was really a problem with the previous integrations was that fuzzing stopped at this club and we want to have the integrations also fuzz. So reach out to the developers, make sure you fuzz your contracts because security is really important. Don't want you to fuck up. So that's it.
