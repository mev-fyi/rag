00:00:13.960 - 00:00:45.838, Speaker A: Awesome. It's good to have you here. Yeah. So it's been a crazy year, right? I think everyone's kind of blown away by the fact that Solana has grown so much despite not having EVM support. And me personally, I'm super excited to see how that changes once EVM support goes live. And I know you're working on something called neon, which is EVM for Solana specifically. And from what I know, not all EVM implementations are built the same.
00:00:45.838 - 00:00:58.638, Speaker A: And I'm kind of curious, can you talk us through neon and how it's different and how the journey's been so far and your vision for it on Solana? Okay, let's start with one. Actually, let's. Hold on, let's bring that back.
00:00:58.726 - 00:01:40.024, Speaker B: It's funny to hear this question from human for the audience. I will tell the story. So we started building neon EVM last December. And why? Basically because we all know the issues that Solano faces and the issues that ethereum depths are facing. So basically rest developers are scarce, and Solana is struggling to find a lot of devs to build on Solana. And it's not that easy, believe me. But then, so in terms of theorem depths, they want to scale, and for this they need like high throughput and the low cost.
00:01:40.024 - 00:02:49.924, Speaker B: And so they are looking and choosing for any L2 solutions, like around the crypto world, so to say. And for us, it was evident that Solano is huge, like in terms of tech, and the throughput can be amazing. And then the costs are low, but at the same time, just not succinct, not curve, not anybody can come because it's totally different from ethereum and it's like they just can't part of the contract. And so the solution was evident. So we have to bring EVM to Solana somehow. But then, so we need to bring it nicely, like without disrupting the experience of the users and without making dabs to rebuild their contracts. Otherwise it's like, okay, what's the difference if I have to change my contracts and the security is an issue and that, like, okay, so what we did, we decided to use and build neon EVM as a smart contract native to Solana, basically written in rust.
00:02:49.924 - 00:03:54.482, Speaker B: And in this case, we needed something that will interpret Ethereum like transactions and wrap them into Solana transactions. Because like normal contract on Solana works with Solana transactions and deals with Solana transactions, not like Ethereum like transactions. So and we build a proxy which serves and does exactly that. It wraps Ethereum like transactions into Solana transactions and Solana transactions ascend to Solana node. And basically Solana validators just validate them and process them. And so then the neon EVM contract is called and the magic is happening at that point, because if it's sushi deployed or curve deployed on neon EVM, in this case the firm like transactions, they are processed because neon EVM contract is called and everything is done natively. And then the data, they are saved and pushed back to Solana state.
00:03:54.618 - 00:04:12.842, Speaker A: Got it. And in terms of what it looks like for the developer, from what I understand, you guys have optimized for ease. And that means most developers will be able to directly port their smart contracts across without any modifications for most ethereum or solidity smart contracts.
00:04:12.858 - 00:04:46.194, Speaker B: Is that right? Oh, yeah, definitely. So this is what we started from. So we didn't want to disrupt any experience, not users, not developers. And we wanted to build something that could be used like out of the box. So not similar to optimism where you have to rebuild your contracts. So, and we literally, and we did this exercise, nice exercise, we forked Uniswap version two by ourselves. And then we didn't make any changes to the contracts or user interface.
00:04:46.194 - 00:05:22.128, Speaker B: And we deployed a new EVM, which is on Solana Devnet and Testnet right now. And it worked okay. So, and this is what we really want for each and every Ethereum dev, we want it to be able to be deployed on your own EVM without any changes using these standard ethereum tools like truffle remix, whatever. So, and we are right now working and optimizing like our proxy server, basically because it's the corresponding part between ethereum like transactions and Solana Wall. So in order to enable this. Exactly.
00:05:22.216 - 00:05:39.284, Speaker A: That's awesome. So beyond that as well, I understand that neon is you've done some optimizations to allow it to be a little bit more performant. So how does that work exactly? So can you talk us through how you guys do parallelization and why that's important?
00:05:40.584 - 00:06:32.990, Speaker B: It's important because through depends on it. Yeah, exactly. So it's like something that we really like that exists on Solana, this parallel execution, because it's very similar to your real world, traditional world, like dealing with computers. We accustomed to having these processes done in parallel computational things, but then just coming to blockchain. So you own Ethereum and then everything is done sequentially and you, why? So it's like not common. And in our case, as mentioned already, so when we are sending Solana transactions from proxy, basically the validators, Solana validators get them and they get them in parallel. And so then the neon EVM contracts in this, they are executed on many Solana nodes.
00:06:32.990 - 00:06:41.926, Speaker B: And so this is the parallel thing that Solana has. And so in our case, we just have a natural, so to say what.
00:06:41.950 - 00:07:09.818, Speaker A: Is in some of the early tests, I'm not sure if you're comfortable sharing or not. What are some of the early results on how the throughput looks like in practice? So for the demo, maybe that you did for Uniswap, or maybe some of the other applications you've tried porting across, what are some of the early numbers look like? And can you talk us through whether you see that being constant or something that might continue to improve over time with more optimizations?
00:07:09.946 - 00:07:52.958, Speaker B: Oh yeah. So we measured the performance on this fork of Uniswap version two. And so we got 4.5k for, for the transfer of ERC 20 tokens and we got seven five k tps for the transfer of neon tokens like SPL token. So, which is huge, like in comparison to normal, led to serum solutions. Like they have, they talk about 500, but then in the reality they have 100 5160 gps and soon we have this huge amount for transfers. So we're still optimizing the execution of iterative transactions.
00:07:52.958 - 00:08:35.262, Speaker B: And this is something that I have to explain. I believe because Ethereum transactions, they can be very, very long. You all know, I believe because you have used theory and in Solana case, we are limited by the number of instructions. So we just can't wrap the loan Ethereum transaction into one Solana transaction. So we have to split them and wrap them into several transactions, but then we still have to finalize one ethereum transactions. So for these, we need to finalize all these Solana transactions and just get the final result. And we call this iterative execution because of transactions.
00:08:35.262 - 00:09:39.534, Speaker B: And so, and then when dealing with swaps, for example, we deal with this process, we have to split and then just execute these transactions, all of them. And this is what we want to optimize, because right now we want this iterative transaction to be run in parallel as well. So you might know that when parallelization happened, we have to block the accounts involved in the parallel execution. Basically Solana blocks the accounts. And so, and in our case, like with this iterative transactions. So definitely they are calling the same accounts and they dealing with the same accounts and to prevent the blocking at this stage. So we will use rate functions only and we will just execute the Solana transactions without just finalizing the thing, without writing the state until the last transactions.
00:09:39.534 - 00:10:31.450, Speaker B: And if we will see that something happened in between on any of the steps, and we can check this, because we can check Solana state and see data, etcetera, so we can go back and just start from where the data changed. So if something happened in between while we execute in this iterative transaction. So in this case, we will enable, like, the optimistic parallel execution of transactions. And this is something huge. Cause the ethereum guys, basically, they've been talking about something, and we were amazed because we found a tweet from Nathan guy in summer talking about enabling the parallel execution of serum just in the similar way. So. And it was like, okay, we're doing it right now, and they're thinking about it, and it's cool.
00:10:31.522 - 00:11:01.714, Speaker A: That's awesome to see. Yeah, it's nice when ideas start to proliferate through a space like that. And then what's your vision like? I think there's. People have different opinions on, well, I've heard different opinions on how things will evolve once EVM does come to Solana. Some think that it's better, some think that it's worse and that it's better for Solana to continue to be rust native. But what's your vision for this? Because I have some thoughts as well, but I'd love to hear yours, too.
00:11:02.214 - 00:11:06.222, Speaker B: Okay. I hope you will share yours.
00:11:06.358 - 00:11:27.600, Speaker A: Sure, yeah. I can start first if you want. Sure. Okay. So, yeah, early on, when. Early on, when we were talking to multiple projects and, you know, slaughaners and what it is today, a lot of the projects I was speaking to were Ethereum projects, actually. So I guess the blue cheap defi projects, Aave curve and so on.
00:11:27.600 - 00:12:20.174, Speaker A: And like you mentioned earlier, a lot of them said that the fact that we didn't have EVM support was just a major block for them. Rust was completely new language. Most weren't familiar with it, the tooling wasn't there, and hiring was not easy. Hiring is never easy. Finding good developers is always a tough resource. And it kind of felt like we kept kind of banging our head against the wall, and obviously, at the end, we bit the bullet and we started building, running our own hackathon and trying to build a community ourselves, which fortunately worked out. But realistically, the friction for having soliloquy smart contract developers port across the Solana and have to maintain, like, multiple code bases in different languages was just this massive, massive barrier.
00:12:20.174 - 00:12:34.924, Speaker A: So I'm personally bullish. I think having EVM is going to be exciting and beneficial and bring in a broader range of developers than we have even today. So, yeah, thanks.
00:12:35.084 - 00:13:08.224, Speaker B: So what I really want to have eventually on Solana. So basically, we don't think about neon EVM ecosystem as something like running in parallel to Solana World. It's not our vision and it's not our desire. So we want it to be integrated within Solana ecosystem. And this is a huge task because we have to enable the full interoperability between Solana native contracts in this case, and the contracts that are deployed on your own EVM. So it's not simple. There are some bugs we have to fix.
00:13:08.224 - 00:13:42.878, Speaker B: It's in our architecture. But then we checked it and we have to build on it and we will do it in the next months. But then, so we really want these devs deployed on your own EVM to be able to interact with Solana native contracts and the tokens to flow from these contracts to Solana ecosystem and backwards. And so, and for us, it will just huge for everybody. Like for ethereum depths coming to Solana because they don't want to be isolated. Like for them, it's been on Solana. Okay, it's fine.
00:13:42.878 - 00:14:17.174, Speaker B: They will just be better in terms of throughboot and, but then the liquidity is on Solana, so they really want to grab this liquidity as well. So for them it's huge to have these opportunities. And I do believe that Solana native devs, they will gain as well from Ethereum that's running on your own Ethereum in this case, because for them it will be okay. Our ecosystem is boost because of the depth coming with their users and with their base, et cetera, et cetera.
00:14:18.664 - 00:14:36.324, Speaker A: I agree. I think composer enabling composability is going to be a massive part of it. And you definitely don't want to have two separate islands that don't interact with each other where we're just creating more and more clones. Got it. So I also heard that you guys had a fundraiser recently. Tell me a little bit about that, actually. And congratulations.
00:14:36.744 - 00:14:54.656, Speaker B: Thank you. We have closed. Yes, the round. And it's our first big round because we had a convertible note from Solana given to us in order to finalize. The MVP is done and our first round is done as well. And we raised 40 million.
00:14:54.760 - 00:14:55.488, Speaker A: Damn.
00:14:55.616 - 00:15:04.804, Speaker B: So. And I do believe that we will build everything, what we have in our minds and that it will be success.
00:15:05.384 - 00:15:13.576, Speaker A: I'm looking forward to it. And what's the roadmap look like? When do you think, when do you guys plan to go to Mainnet? And what are like some of the.
00:15:13.640 - 00:16:02.568, Speaker B: Near term milestones that we wanted to be on Solana Main and before this conference, but then something happened, like the Yotek team, it was back to us just telling that we have to switch to Solana 1.8 version, not like they will not enable our features on Solana 1.7 version. And it was like, oh, come on, guys, we can test it in two or three days. We need more time in order to do proper testing. We decided to have the conference first and then go to Solana Mainnet because it's good to do the proper job. Like in terms of testing, it's not good to just to be alive, but then everything crashes because of us coming live to Solana Mainnet without proper testing.
00:16:02.696 - 00:16:33.654, Speaker A: Yeah, yeah, I completely agree. Sorry for the hold up. We'll make it happen. Hopefully Anatoly's listening here right now. Awesome. So in terms of some of the tooling and like, in terms of some of the partners that you guys are looking to bring on early on, once you guys actually launch, what are some of the partners that you are looking to bring on or speaking to at the moment? And what do you think some of the challenges are with getting it all up and running early during the early stages to bootstrap it?
00:16:34.594 - 00:17:34.820, Speaker B: Okay, in terms of Ethereum devs, we talk to almost everybody from the top DeFi protocols, for example, NFT protocols, and they're eager, but then, so for them, we have to enable infrastructure. Like they're not isolated per se, so they need infrastructure, the indexes, the oracles, et cetera, et cetera. And then those indexes, oracles, they're not on Solana yet. Like some of them are on Solana testing, but then not on the main net. And so, and we have to build some, some stuff for our proxy in order to, for graph, for example, to work properly with the application deployed on your own EVM. And so it will take time to one or two months. But then, so once we are done, then the infrastructure will be ready for sushi, for example, because Maki is eager to come, but then, like, he can't come, you need the infrastructure.
00:17:34.820 - 00:17:35.860, Speaker B: Yeah, yeah, yeah.
00:17:36.052 - 00:17:54.052, Speaker A: And this probably, maybe this is a dumb question, but is it possible for other oracle solutions, like say, for example, pith, to integrate with what you're building at neon or a switchboard, for example? Or does it need to be necessarily be, say, chain link, as in, that's.
00:17:54.068 - 00:18:29.574, Speaker B: The issue that we're discussing with all ethereum depths. Like, guys, there is some infrastructure in Solana, like native to Solana very good. We talk to everybody. Like we talk to people, talk to sils can, to everybody, literally. So they are good. Like, can you please start working with them because they are ready to do everything for us and for you, basically. But then what we hear from them, the big guys, they're afraid of using new providers because like for them, for example, for other.
00:18:29.574 - 00:19:04.120, Speaker B: So they have been working with the chain link and it's like, okay, guys, we are good. But then we've been working with chain link. We know chain link, but PF is new. We have to test each other. It's like we can't just switch because PF is there and Chainlink is not there. So we, because they afraid like to switch. But then what I do think that the not top Ethereum dapps, so they will use the infrastructure.
00:19:04.120 - 00:19:30.582, Speaker B: They will be more risky, basically. So. And they will start using infrastructure available on Solana because people, guys, they are ready to provide their services to Ethereum dapps. And it's like common, just do it and it's quite easy. So in this case, I envisage then we will have two sets of infrastructure providers, basically one set from Solana and the second set from Ethereum.
00:19:30.678 - 00:19:52.420, Speaker A: In terms of actual deployment, the ones that are native to Solana is there. Do they need to write an entirely new set of smart contracts to be composable with neon ones at a specific. Can they be in native rust and still be compatible with neon applications? Or would they need to write a set of solidity smart contracts just to be.
00:19:52.572 - 00:19:57.844, Speaker B: Do you mean infrastructure providers? It's us who have to build something for them.
00:19:57.884 - 00:20:00.224, Speaker A: For example, like an adapter essentially.
00:20:00.764 - 00:20:30.854, Speaker B: Like, for example, the graph. They need us to build markel three. We don't do it because we are native to Solana. So. And our data in Solana state. So why should we build Merkle tree? It's like it's no use for us. But then for them, they need merkle tree and we have to build, to build merkle tree in order to provide data to them because they're dealing with proper Ethereum, not like something non salon.
00:20:31.014 - 00:20:32.638, Speaker A: Yeah, yeah, makes sense.
00:20:32.806 - 00:20:33.950, Speaker B: This is it. Yeah.
00:20:34.062 - 00:20:40.952, Speaker A: That's super insightful. Well, thank you. It was a pleasure chatting to you. Okay, this all plays out.
00:20:41.038 - 00:20:42.116, Speaker B: Yeah. Thanks a lot.
00:20:42.180 - 00:20:42.460, Speaker A: Thanks.
00:20:42.492 - 00:20:42.764, Speaker B: Thank you.
