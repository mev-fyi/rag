00:00:03.080 - 00:00:25.498, Speaker A: Hello. How's everyone doing today? Last day of breakpoint. Cool. Hi, my name is Nick. I'm the founder and CEO of Clockwork, and we're here today to talk a little bit about blockchain automation. So can I get a show of hands, actually, who here is a developer or an engineer? Okay, there's actually quite a few. Awesome.
00:00:25.498 - 00:01:22.054, Speaker A: So we have a lot in show today, but actually, to give a little bit of background before we get there, I kind of want to give some context around how we decided this was a problem worth solving. And so we got our. We started our journey on Solana about a year ago at the last breakpoint, and we started in payments, actually. So I'm, like, super bullish on Solana's potential to disrupt the payments industry, because I used to work in that industry for about four years. In a prior life, I helped build one of the largest payroll systems in the world during my time at Uber, the ride sharing company. And we built a system that distributes income to about 4 million employee contractors doing multiple lines of work in every currency and country imaginable. And so during that time, came to see just about every possible payments bug you can imagine.
00:01:22.054 - 00:02:07.324, Speaker A: I used to get woken up at 04:00 a.m. In the middle of the night all the time, because some file transfer failed somewhere. We were about to miss a batch payments deadline, and so we had to email a 40,000 line CSV file to a banker on the other side of the world to make sure that drivers would get paid on time. And it was really that world that I was coming from when I first saw Solana. And so the thing that really struck me about Solana was just that this thing is cheaper, it's faster, and it's easier to use than any existing payment drills in history. So instead of settling in business days, Solana settles in seconds. And instead of charging a percent of your payment volume, Solana transactions cost a fraction of a cent.
00:02:07.324 - 00:03:22.288, Speaker A: And so my head, when looking at the system, just kind of immediately went, well, we should obviously build a payroll system on this thing. And that's what we started with. And almost as soon as we started building that, we began to run into another problem, kind of a more fundamental problem, which was, how do we schedule transactions? So what we wanted for the product we were building was just to schedule a token transfer to happen every day or every week or every month. And we were kind of looking for this, like, native transaction scheduling API to be able to say, I have a transaction, I want to run this on Monday or every Monday, but that didn't exist. And so the only thing that really made any sense to us was to kind of spin up some web server in a cloud service provider like Google or AWS, and code that thing to schedule and submit transactions however we needed them. But we obviously really didn't like that solution because it introduced a whole bunch of risk. It introduced this centralized single point of failure, and we were trying to build a decentralized app.
00:03:22.288 - 00:04:30.486, Speaker A: And the idea that it was going to be dependent on some backend, some centralized backend, really didn't appeal to us and felt like it went against the ethos of even building on blockchains in the first place. So it's just like, if every smart contract needs some backend to actually power it, what's kind of the point of building on blockchains? And we kind of began to realize that a number of our friends who were also building the space were kind of running into similar problems because we were actually at Mountain Dow at this time in February. So I just want to give a quick shout out to Mountaindao and all the amazing people who helped put that together, because that experience really changed our lives. And it was this vision of trying to build a decentralized transaction scheduler for Solana that we eventually won the riptide hackathon with a few months later, just earlier this year. After that, we, of course, raised a seed round and we changed our name to clockwork. And we kind of got to work on trying to solve this problem once and for all. So, yeah, let's get into it.
00:04:30.486 - 00:05:46.734, Speaker A: What is clockwork? Clockwork is an automation engine for Solana. And so what that means is that developers can use clockwork to schedule transactions and automate smart contracts without relying on centralized off chain infrastructure. And so if you want to do something like automate the token transfer or mint something, or do a swap on a Dex or account calculation or kind of any arbitrary state change you can imagine, you can automate that without having to write some off chain bot. The only thing you need to be able to do is write a smart contract and deploy it to Solana, and clockwork will take care of helping automate that contract and bring it to life. You may be wondering, how do we do this? And so we've been working really hard for the last nine months to develop this new primitive for Solana developers that we like to call threads. And if you're a software engineer, you actually already know what threads are, right? I mean, just as a traditional application uses threads to execute some series of instructions on a computer. Clockwork is introducing transaction threads to allow Solana programs to execute a series of instructions on Solana.
00:05:46.734 - 00:06:26.594, Speaker A: And so what does that really mean? And, like, how does that work? I'm going to dive into the code a little bit. If you're not an engineer, don't worry, we're not going to stay here too long. But when we're developing smart contracts on Solana, we tend to do two things right. We define some state our account model or data model that our users are going to be interacting with. And we define some instructions that, you know, define the rules around how that state can change and how it can mutate. And typically, when we're writing these instructions, we don't really return anything. We have this empty response value, and we just say, okay, at the end of our functions.
00:06:26.594 - 00:07:22.124, Speaker A: But Solana is actually way more flexible than this, and we can actually return things from our instructions. And we got the idea that we could leverage this to do some nifty things with the clockware gets decay. We're actually introducing a new return type that you can add to your instructions to make them threadable. And we call that the thread response. I'm not going to go through everything in the thread response, but I particularly want to highlight the next instruction property there, because what the next instruction does is it allows your program to point to some instruction that should be run immediately after you, your instruction is done. And to say that another way, you can actually create a chain of instructions, or a linked list of instructions, where once instruction a runs and it does some work, it can actually point to instruction B. Instruction b runs and it does some work, points to instruction C.
00:07:22.124 - 00:08:50.304, Speaker A: C runs, does some work, and points to instruction D, and so on and so on, until you eventually return a null value and say that our work is done. And what's happening behind the scenes here is that we've been working with a lot of the validator and RPC node infrastructure providers to create this worker net, or a subset of RPC nodes that can actually simulate this chain, take all those instructions, pack them into a transaction, and then submit that transaction to the chain on your program's behalf, essentially bringing it to life without you needing to, obviously write any off chain bot. And so one thing I kind of want to highlight is, like this chain, for example, it might be really long, and it might not fit into a single transaction. And so what the workernet will do is when it recognizes this, it will be able to split up that chain into multiple transactions and submit them across many slots or many blocks, and this is partly why we call them threads, is that you can have a long running process on the blockchain. It's just one transaction submitted after the other indefinitely into the future. In fact, there's no reason why you couldn't have a chain that just goes on forever and you're just running a background process on Solana. And what we think is pretty interesting is that this is obviously all happening on chain.
00:08:50.304 - 00:10:24.244, Speaker A: And so within your smart contract, you can obviously read some account data and write branching logic that says if price is above 100, then return instruction a, and if price is below 100, then return instruction b. And you can even take that a step further and get cyclical logic where instruction a points to b, points to a, points to b, and so on until your job is done. But the main idea here is that by combining this, this thread of instructions with a worker net that can pack those instructions into transactions and submit them to the chain, we can help bring smart contracts to life and really make them run and get a lot closer to that vision of a world computer where we can deploy programs that actually just exist, where they run on their own. You may be wondering, how does the thread start and how do they kick off? You know, how does that work? And for that, we support three different trigger types we have, and I went through these briefly, but the first one is an account trigger type, where you can effectively subscribe to some account, and whenever the data in that account changes, you can kick off a thread to process that new data change. The second trigger type is kind of where we started, which is just the cron schedule. You can schedule a one off thread or a recurring thread to come every whatever schedule you need, every 5 seconds or hour or month. And then the last one is just on demand threads, which is if you need to kick off some long, complex chain of instructions just right away, you need to run.
00:10:24.244 - 00:11:04.256, Speaker A: So this interface is really flexible and allows for all sorts of different types of use cases. It unlocks a lot of different applications. So I want to get a little bit more concrete and talk about some of the teams that we've been talking to and are working with today. And so all of the examples that I'm about to run through are either live today or will be live in the coming weeks and months. So I'm going to start with Oracles. So of course, on Solana we have two really great oracles, which are Python and switchboard. And one thing you can do is going back to that account trigger.
00:11:04.256 - 00:12:18.698, Speaker A: You could set up a thread that can process some incoming oracle data feed. And you could do this to, for example, calculate some statistics or a time weighted average price, a twap over some incoming price feed or any sort of technical indicator, like maybe a volatility index that you might want. And then you could take that a step further and execute some action based off that price, like maybe you want to execute a swap on serum or on some other Dex. So this is just kind of one thing that these clockwork threads allow for, and that kind of gets us into deFi, of course, like we have a few different lending protocols and of course, like DeFi applications on Solana. And, you know, one thing we could do, if we can automatically execute some swap, we can also automatically, like, repay debt on a lending market. And this allows for building automated DeFi protection mechanisms where, say, as your collateral price is approaching a liquidation threshold, you just want to auto repay your debt rather than get liquidated. But you can also get a little bit more aggressive and rebalance your collateral positions based off relative yield rates of those different pools.
00:12:18.698 - 00:13:15.994, Speaker A: And you no longer need to go to your favorite lending markets and refresh the page every morning and move assets around just to try to capture the maximum yield. A smart contract can basically just automate that for you. Of course, there's payments and a few different, I mean, lots of people are working on payments in Solana, and we're excited to kind of help them all achieve that vision. And so, of course, going to where we first started, scheduling token transfers and automating recurring subscriptions or auto claiming for investing contracts, this is all very possible, very real today, actually. Of course, you can mint new tokens automatically if you are trying to distribute rewards to your users. Or maybe those rewards are based off some incoming oracle feed, based off some off chain work that they've done. You can get very flexible in the types of reward mechanisms that you can build with these threads.
00:13:15.994 - 00:14:08.644, Speaker A: And then the last team I want to touch on is squads because we really want to make threads multiplayer. And for example, there are a number of teams that manage their validator through a squad, through a multisig. And so it's kind of annoying to have to have everyone in that multisig sign off on a transaction just to claim that yield. Or instead, what you could do is sign a thread that basically is approved to auto claim that yield for you, and then that just runs in the background and you don't need to worry about it. And then a few things I want to touch on last are just the price so this obviously is not a SaaS. This is powered by a decentralized network of RPC nodes, and the minimum price that we start with is 1000 lan ports per instruction. So this is incredibly cheap.
00:14:08.644 - 00:14:56.438, Speaker A: It's just an extra fee that's tacked onto those transactions. Of course, if you're a developer, you may know that the base fee per transaction is 5000 lamports. So this is kind of an incremental fee on top of that. But there may be use cases where you're running a really important thread that you want to make sure gets into every slot. Maybe you're cranking a serum market with a particular thread, and so you may want to prioritize that thread with the workers, and you can bump that fee and pay a little more to make the workers prioritize it and make sure those transactions get in to the block. The last thing I just want to announce is that this of course, is not like vaporware. This is live on Mainnet today and has been for a few weeks, and it's 100% open source.
00:14:56.438 - 00:15:23.594, Speaker A: And so if you're curious to check it out, we're on GitHub. We are kind of continuously publishing new example programs that are built with clockwork. So examples, Repo, these are free to fork, anyone can use them and build products off of them and start companies off of them. And then of course we're currently under audits by some of the best auditors in the industry at Ottersec, and we're super excited to see what you guys build and just happy to be here. So thank you.
