00:00:07.640 - 00:00:35.014, Speaker A: Everyone, welcome to another ignition workshop today. Joining us we have Tristan from Zeta, who's going to be taking the reins for the next hour and showing us some awesome stuff. So here you go, Tristan, and enjoy the stream. As always, ask your questions in twitch chat and Tristan will try and get to them alongside his presentation.
00:00:36.234 - 00:00:57.794, Speaker B: Awesome. Thanks a lot, Ryan. Appreciate the introduction and very glad to be here. Let me share my screen quickly so everyone should be able to see this, hopefully. Hopefully. Yep. Cool.
00:00:57.794 - 00:01:31.014, Speaker B: Can I get a confirmation from twitch chat that everyone can see this? Yep. Fantastic. Okay, we can kick off then. So I guess to introduce what this presentation really is about, we're trying to drop a bit of hackthon alpha here for everyone given that we went through the last hackathon. Want to give people some tips going through this, this current hackathon on best ways to maximize your success and hopefully win your first hackathon. So jumping right into it. 1 second.
00:01:31.014 - 00:02:09.712, Speaker B: So on the agenda for day, the contents that really want to cover. Just a bit of an intro on who we are, what we're building at Zeta, and our experiences with the last hackathon. And then essentially jumping into some of the different components that you want to get right during this hackathon, going through, I guess, all the different iterations of your launch and bootstrapping your community. We want to get into the development, building and engineering side of things. So getting your code out there and actually shipping product. Then there's the whole deployment section of it, which was something we definitely underestimated the work involved. Then the final bit is your submission in your presentation.
00:02:09.712 - 00:02:55.744, Speaker B: And hopefully if you've done all these steps really well, you might come out of the hackathon with a nice win and really kick start your project. So jumping into it, I just want to go into a bit of a quick introduction on our background. So who are we? So where Zeta? We're building a super fast liquid and under collateralized Defi options platform on Solana. If you haven't come across options before, they're actually a really popular financial derivatives product that you tend to see in tradfi a lot actually does like trillions of dollars of volume in traditional to find a lot of markets. And yeah, we're basically taking the Defi angle on it. You see stuff like Darabit, which is kind of crypto options, but hasn't really been done super well for Defi yet. So we think there's a great opportunity there.
00:02:55.744 - 00:03:51.404, Speaker B: And also, if you're familiar with platforms like Robinhood, they kind of excessively people trade options on there. So it's pretty popular, there's a big market for it. And so essentially what we're doing different is we're combining the best of the serum order book and we're bringing that with an options market maker. To quote on this derivatives market, we think thats a really intuitive and nice way to bootstrap liquidity and have a really optimal trading experience. And so if youre a protocol out there that wants to do any kind of risk management position hedging or build structured products on top of options such as say a volatility product, wed definitely love to chat to you guys and support you or integrate in any kind of way possible. That's enough about us. Um, why should you be listening to us in terms of hackathon experience? Uh, and what do we have to offer here? So I guess, uh, we think we're kind of like in a good position to give a bit of advice here.
00:03:51.404 - 00:04:22.586, Speaker B: Um, for context, we actually went through the last hackathon. That's how our whole project got started. Um, I guess the, the long and short of it was that we were all kind of working our respective jobs in like tech and trading. We saw Solana, we started reading up a lot on it. Like I read the white paper many times and was like fortunate enough to meet Anatoly in the super early days. And then, yeah, we basically thought, hey, this hackathon is going to be an incredible way to kickstart our journey and get our platform off the ground. And that's why we signed up.
00:04:22.586 - 00:05:17.368, Speaker B: And it was three weeks of really hard work. We put in a ton of effort, but we're rewarded at the end of it, managing to actually take away the grand prize out of 13,000 plus builders and definitely 326 ecosystem projects that came out of that hackathon. So it was a really exciting time and had a ton of fun with it, as I'm sure everyone on the team and many of other projects can also attest to. And so I guess our general take on it is these hackathons, especially Solana ones, are a really fantastic way to kick start the growth your project, start building that team and have that early success and those early wins to really build a super good protocol out of this. And so this ignition hackathon, I think, is going to be even cooler. It seems to be on this exponential trend, as you can see over time, with more and more builders joining every consecutive hackathon. And so this one is going to be really exciting.
00:05:17.368 - 00:05:54.304, Speaker B: I can see there's a lot of teams that are going to come out of it with lots of really, really interesting protocols. So very keen to see what happens. So I guess kind of jumping into it. Some of the really high level tips that I think are critical to get right, uh, just how you kind of manage your time and manage your resources. Uh, time management, we found, was definitely one of the critical, uh, keys to success in any hackathon, not just Solana ones. I've been through a couple of hackathons myself, and it definitely tends to be a lot of time pressure. You tend to have less than five weeks like you have in this one.
00:05:54.304 - 00:06:38.352, Speaker B: Um, but as you know, with any kind of engineering timelines, uh, the deadlines tend to blow out. And so something that we found is a really good practice, is to set these kind of aggressive deadlines, try and essentially, yeah, set these aggressive deadlines, try and get stuff done a lot earlier than you expect to ship. So if it's a five week hackathon, try and get stuff done in four weeks and give yourself that week long buffer. Really important. That's something that we did for our three week hackathon was aim to ship by end of week two, and it definitely took us until pretty much the last couple of hours of the full three weeks. So be very conscious of that. It's also like ruthlessly prioritizing and making sure that you make the right engineering trade offs.
00:06:38.352 - 00:07:12.118, Speaker B: So you're obviously not going to be able to build everything in the full five weeks. So think about the things that are most important, the things that get you to your minimal viable product. And then. Yeah, the other point is alignment is really critical. We're working in a distributed remote environment for the most part. Everyone's kind of not able to work necessarily in person, and so you've got to coordinate your team, potentially across lots and lots of different geographies. So it's definitely a bit of a organizational challenge getting everyone to work together, especially if you have a fairly large team.
00:07:12.118 - 00:07:47.040, Speaker B: So working in real life is definitely preferable. This is something we were fortunate enough to have been able to do. And you can see us basically in our mates department all working on this hackathon together for three weeks, which was a hell of a lot of fun, all just being in the same room. We set up a bunch of monitors and had whiteboards and everything, and could really move quickly on the product and ship stuff. Build a full product in essentially under three weeks, which were still kind of blown away by. But if you're doing all this remote work stuff, working with the distributed team. Definitely good to look into some of the project management tools, stuff like notion and trello.
00:07:47.040 - 00:08:23.348, Speaker B: Actually pretty awesome once you get to know how to use them. And I think being good with messaging, either with Google Meets or having instant messaging like telegram and slack, and being in the loop with people, I think, gets the wheels rolling pretty well. And so, in terms of the timeline to kind of break down how you should structure your hackathon journey, you've got five weeks to deliver on this. I would say we're roughly at the end of week two now. So I've kind of indicated that here. And so it's good to kind of plan out where you want to be, I think, at the end of every week. So the way that we see it is week one.
00:08:23.348 - 00:09:11.432, Speaker B: You guys should already be through this, obviously, but it's really getting your team together, looking at the Solana job board and basically talking with a bunch of other people out there, trying to find the right synergy of people you want to work with, finding those co founders, and start building a really good team. The other bit is then, obviously, learning the tools for the job. Learning rust is really important. As you already know, a lot of the smart contracts on Solana, all the smart contracts on Solana are written in Rust. And so if you don't have a background in Rust and some of these lower level languages similar to c, I guess, then it's really good to do some of the courses on there before you jump into Solana. And Solana has a bunch of great docs and some other resources, which I'll cover a bit later. Week two is a really good time to start kicking off your socials.
00:09:11.432 - 00:09:49.664, Speaker B: Look to do a launch as well as do a bunch of design of your architecture, do a bunch of whiteboarding, figure out exactly what you want to build before you really start putting code to paper. It's probably not the best to rush things and start coding off the bat unless you work like that. And then I highly recommend learning the anchor framework, which Armani actually did a bit of a talk on before. And this would probably take you one to two days doing that tutorial. But something that I will stress is setting up your socials. Launching to the public nice and early is something that's really underrated and something that's really important. A lot of people think, hey, just push that back to, like, the last possible moment.
00:09:49.664 - 00:10:14.500, Speaker B: Um, but definitely wouldn't recommend that you want to bootstrap that community really early. And so the last couple of weeks, uh, is when you really want to get into the coding. That's what we're here for in the hackathon is, you know, putting the code out there and building the thing. Um, so get building. Smash out your backend and front end. Um, now that you've designed it, something that's also really important is write your tests early because they take a lot of time and they will find a lot of bugs for you. Nice and early.
00:10:14.500 - 00:10:42.984, Speaker B: Very important. Week four, starting to get into the crunch zone where things are definitely getting a bit dicey. Keep the momentum of building. You want to start focusing on integration. Something not to, I guess, brush under the rug is you're going to have a front end and a back end if different people, different teams have worked on it. Bringing those two together and making sure they're not completely separate code bases that a pain in the ass to integrate last minute. Try and do that nice and early is really important.
00:10:42.984 - 00:11:19.654, Speaker B: And if you're working with stuff like anchor, you can actually use stuff like the ideal to basically communicate between the front and the back end and have that spec between them. So you can almost work independently. And something that I highly, highly stress is try and have your hackathon project more or less in a ready state by the end of week four. Um, you don't think, you know, you think like, hey, I can get it done nice and quickly. Um, but these kind of deadlines tend to get a lot longer than you actually think that they'll end up getting. There's like more work, more kind of hurdles that you don't expect. So have it ready, like a week early is definitely a very good recommendation.
00:11:19.654 - 00:11:51.190, Speaker B: Um, then week five, hopefully that takes a bit of pressure off if you've got most of the core competencies kind of nailed. And this is a really good time for optimization. So optimizing your front end and back end for like RPC calls, stuff like that, as well as just like making it more responsive and faster, all helps with the experience. You don't want to be doing, I think, too much core product work, but sometimes that's. And that ends up happening with timelines. Another good thing on the kind of non product side is starting to put out those sneak previews. Showing it out to community.
00:11:51.190 - 00:12:26.694, Speaker B: Getting it in people's hands is a really good way. Get yourself in front of the judges, you know, and in that mind, share is super important. And I guess a stretch goal to set yourself is to try and run some kind of closed alpha. I think by the end of the hackathon, this was our super aggressive goal, was try and get something that was on Devnet that people could actually trade on for our options platform. And we managed to get there in the last day or two, but it was extremely hectic and difficult to deliver on. But I think it's really nice if you get a product in people's hands that they can actually trade just makes it way more tangible. So that's kind of the introduction on how you should stagger your timeline.
00:12:26.694 - 00:13:03.554, Speaker B: Uh, now, going into the meat of the presentation, which is like, what should you actually be doing at all these different stages? And what are some of the, the tips and tricks that we wish we knew going into this? So, first one, I think, goes kind of unsaid. Community is pretty king in crypto, if you haven't realized that already. Um, you, you will definitely soon. Um, and so, yeah, Solana has one of the strongest communities in the space. I think most people can attest to that. Um, there's a lot of really good chatter going around, and people are really willing to help out their fellow projects. So getting a strong community, really important, and I think that's something that helped us with a lot of success.
00:13:03.554 - 00:13:46.154, Speaker B: And so why should you really care about a community? There are a few really important aspects to it. One of them is validating your product market fit. So you want to know you're building the right product, solving the right kind of problems, and having this core base of users is a really nice way to do that. It's almost like a b, two c model where you can go straight to your customer. You can basically interview them in your discord channel and ask them what sucks about your product, what's good about it, get that feedback really quickly, and that helps you iterate and start building that really good product nice and early. The other thing is, this is going to be your core user base. These are going to be the majority of people who end up using your protocol, who end up buying your token or your nfts or whatever it may be.
00:13:46.154 - 00:14:31.600, Speaker B: So you really want to be close with them, know what they're kind of keen for, and I guess, um, make them enthusiastic, and you really want to lift these people up, empower them, and they become your kind of power users. And a really good blog here is from Peter pan, from one kx on how to grow decentralized communities. And he kind of has a few of these charts on how you actually increase, I guess, like the contributions from your community, you're in this kind of bootstrapping phase. Uh, and then as more people start to get involved, uh, you essentially have more calls to contribute. People contribute, and then you basically want to reward them. Maybe it'd be discord roles or kind of early, I guess, token allocations, or just being able to get people on like your closed alpha and trying out the product. And people really appreciate that and become kind of evangelists for your product.
00:14:31.600 - 00:15:15.260, Speaker B: Once you get into this later stage, probably post hackathon, maybe they end up being the core people who are stakeholders in your dao or something. So growing those core fanatic users is super important. And then the last two points, one, definitely don't underestimate hiring from the community, I think is pretty important. We ended up hiring a lot of people in our team, just kind of like friends and people we'd worked with before, but a bunch of our community managers actually came from the community itself. These are kind of people we found who really love their product and we're super passionate about crypto, and they've just been like, awesome people on our team that have bootstrapped all that. But, yeah, there's also builders out there, like, a lot of devs looking to do open source work. Very keen on Solana.
00:15:15.260 - 00:15:45.292, Speaker B: You got artists, people who've helped us do like, banner designs and logos and things like that. So even if you're not a professional designer or artist, it's a really good way to tap into that potential and then obviously get the community managers and, yeah, I see the comment in the chat. Grape on top. Definitely great protocol has done community extremely well, so kudos to them. And then the last bit is just growth. Like, if you have people who are, I wouldn't say shilling your product, but, like, you know, really behind your product that love it. Look at mango.
00:15:45.292 - 00:16:27.634, Speaker B: Like, people just love mango to death. It has, like, literally such an infectious community of people who are just really obsessed with the product, and they will just go on Twitter and just shill the hell out of it. And, you know, everything mango, they just, like, live and die by that, which is super cool. So that's really important in terms of getting that set up. The ways that we would recommend is, yeah, social media is just a great way to get out to people in general. Um, the way to get new users, you know, basically build your, your kind of branding and your outreach, uh, and then start attracting this core user base. And as I mentioned before, doing this earlier rather than later, also, like a recommendation from the Solana team, you know, this is what they told us to do.
00:16:27.634 - 00:17:04.520, Speaker B: And so we basically tried to launch, uh, earlier, uh, as early as possible. And the reason is you have the snowball effect. Your community kind of grows and grows over time, and you want that network effect to compound. The more they kind of talk to other people, the more people get on board your kind of project. And that's how you get this rocket ship going up. And so, once again, from the same blog from Peter, he's got this really great illustration of the funnel here, which is kind of, you have this awareness of opportunities to discover in the community. So it's always basically like media exposure and social media stuff.
00:17:04.520 - 00:17:43.634, Speaker B: And then you're starting to get into, like, the lower ends of the funnel, which I guess directing more of the core people in there, people who already know about the protocol and who want to contribute to the community and keeping them kind of involved and engaged. And, yeah, the ways that we found to do that, kind of practically was having a landing page is super important. That's like the front page of your product. Everyone's going to see that. And first impressions kind of matter, I would say. So having all the important stuff there, like your team, your mission, your roadmap, um, is really good, and you can essentially start sending this out to people. Um, the second bit, uh, if you don't know already, everyone's on crypto Twitter.
00:17:43.634 - 00:18:12.974, Speaker B: So even if you're not a big Twitter person, definitely recommend getting a Twitter, either for yourself or definitely your project itself. Um, pretty much every Solana or crypto project that we know has a Twitter account, and that's where a lot of the audience ends up being. Uh, and so good things to do there. Follow the key opinion leaders, follow Anatoly and Raj and the rest of the Solana team. Listen to what they have to say. There's a bunch of judges, look on the page, search them up on Twitter. It's a good way to figure out what they're interested in.
00:18:12.974 - 00:18:33.746, Speaker B: And at the end of the day, you're building for this hackathon. They're going to be judging it. So it's good to know what they're looking out for. And then, yeah, there's a bunch of other projects like ourselves and many others out there who post updates regularly. So it's good to be in the loop there. And in terms of active stuff, try and post threads, do Twitter spaces and do announcements. Super important.
00:18:33.746 - 00:19:09.244, Speaker B: You get a ton of engagement from doing good threads. So you're building some innovative NFT platform that's doing art in some specific way. If you can write up a good thread on how you're delivering this, the unique value proposition and all that kind of stuff, and people see it, they'll retweet it, and those things can blow up pretty quickly and get you a great following. Then the last bit, essentially, is how you engage that core communities, the bottom of the funnel. Two good options are Telegram and Discord. We ended up not using Telegram because it was a bit of a double up and more work. So we went with Discord, but either one's great.
00:19:09.244 - 00:20:00.750, Speaker B: This is really good for updates. If anyone has any support issues, say we're running a Dex, so if people run into issues, errors, bugs, stuff like that, we can easily help them debug. Good way to fix stuff very early, and then any kind of, like, events that you want to run, like, we're running community calls now, which is like, getting feedback from the community and updating them on, like, our progress and roadmap and running stuff like a closed alpha for us was really good. We just had a specific channel, essentially, where anyone can. We signed up like 50 to 100 of our users during the hackathon for our closed alpha, and people just kind of gave feedback there, and we just collated this huge spreadsheet of feedback that ended up going into our product roadmap and a lot of fixes we made, so super useful. Cool. So now you've heard a lot about the social media stuff.
00:20:00.750 - 00:20:52.770, Speaker B: How do you actually put this into practice? What's your hello world moment, which is getting out into the public and doing a proper launch. And so might not sound that crazy, but you really want to do a good job of this, because I think it makes a big impact, and that's your kind of springboard into the, the wide world of crypto. And so a good way that most teams do is writing up a bit of a medium article on essentially, like, what is your project? Or, why are you doing this? What's the problem you're solving? Why should anyone care? Are you the 50th borrow lending protocol on Solana? How are you differentiated? You want to at least have something, I guess, unique and not just be like everyone else. What makes you different, I think is really important. That's what gets people excited. Um, go into the details, like the elevator pitch of what you're actually building. What are the different components are you using? You know, the serum order book or a few other things that could be interesting.
00:20:52.770 - 00:21:41.406, Speaker B: Um, and then the how is, like, your roadmap? We want to see what you're building after the hackathon, what's, like, going to be going for, like, one, two years after this? That's super interesting. Who's the team? Uh, you don't have to dox yourself, obviously, or put any kind of, like, too much personal information, but it's kind of good to hear if you're say, building, um, you know, a trading product. If your backgrounds in trading or technology, I think that's, like, really nice to see and gives people confidence that you actually know what you're doing. Uh, and then at the end of it, look to lead with some call to actions. So put your social links, your Twitter discord telegram, and kind of redirect people to your community so they actually know where to go and know how to contribute and support you guys is really important. And so, yeah, definitely can't stress enough how important this is, like, getting this right. We, I think we're super lucky and fortunate that ours went super well.
00:21:41.406 - 00:22:12.864, Speaker B: And it was a bit of a wild story where we launched. I think it was like, on a Friday. We're lucky enough that we got some retweets and it just kind of really blew up for us on Twitter. We ended up getting, I don't know if you can see, but we got over like 3000 retweets and likes, which was pretty insane. And just so many people just filtering into our discord. We had over, I think, close to 20,000 people within, like, uh, 24 hours, which was nuts and funny story. We just stayed up, like, the entire night discord moderating ourselves because we were just so excited.
00:22:12.864 - 00:22:49.180, Speaker B: And it was just literally thousands of people joining every hour. It was pretty mental, but a lot of fun. And it kind of blew our minds how, like, quickly this, uh, crypto stuff can blow up. So we got a bit of an example of our medium intro blog, if you want to read through that and take some ideas. And so, as I said, yeah, cross post that medium post on Twitter. Um, if you can get a Solana retweet, um, that's awesome because they have a following of like, 500,000 people. So that will take you from, like, our protocol probably only had like, maybe like 30 or 50 Twitter followers and then suddenly we had a couple of thousand within like, a day or two, um, which was really cool.
00:22:49.180 - 00:23:15.060, Speaker B: And that was a really nice way to get over that initial sluggish period of trying to bootstrap your community. And you really want to get people excited for it. And as well as the project, it's good to have a personal Twitter account. A bit of personal branding goes a long way. People love to see the team behind the dream, the people there, and it's always good to engage with other founders. I think it's really underrated. And then there's stuff like you can look at your Twitter analytics.
00:23:15.060 - 00:23:54.624, Speaker B: I just put this here just to show us we had a really strong launch, we had almost half a million impressions, which is pretty nuts, and a ton of people who look through our thing. And we just had a really strong community from day Zero, which was really good and I think helped us a lot. The last bit which I wanted to mention was obviously discord. Discord's great to have that core community really engage with people. And something I think to be prepared about which we were in for a rude awakening was the amount of interest that we got was pretty insane. And I think with Solana post this bull run, I think it's so hot right now. Everyone wants in on Solana, so expect a lot of interest, especially if your project is really good.
00:23:54.624 - 00:24:32.242, Speaker B: So something highly recommend doing is setting up verification, says mee six, which is like a bot, as well as there's capture programs that you can put in and you're just going to get potentially a lot of bots or like spam there. So this filters out a lot of the crap. A lot of people are just looking for Solana, airdrops, stuff like that, and you don't want to waste your time trying to filter it out. It just adds to the noise and I think kind of ruins the community. So if you can put these in, super important so you get a lot of this like when token, when airdrop spam. So feel free to ban or try and verify them. You got a lot of people expecting it to go to the moon.
00:24:32.242 - 00:25:25.218, Speaker B: So it's good about the enthusiasm, but in moderation. Another thing which just will save you a lot of time is if you're a developer and you're building the core product, you don't want to spend 24 hours a day just being in the discord, replying to people and doing that kind of stuff, the engagement that takes a lot of time and you want to be spending it doing the right stuff. So hiring or basically just finding, I guess, enthusiastic mods for your discord, or even getting dedicated community managers who are full or part time super good in the early days because you're going to have a lot of inbound interest and you need someone to actively engage with that community. So I highly recommend. Okay, getting into development. Someone asked in the twitch chat, is there a token visaida yet or is it just going to be the platform? Slight tangent. So yeah, we're just doing the platform now and I guess is a good point.
00:25:25.218 - 00:25:50.926, Speaker B: I would say focus on platform first. That's what really matters. I know a lot of people launched a token early, which is a good way, I think, to get a lot of excitement, but it also adds a lot of overhead. You got to worry about this token launch. There's a lot of stuff going on with it. If you have token price kind of dumps or pumps, that's going to add a lot of, I guess if it dumps, then it definitely can ruin your project if you haven't done a launch properly. It's something, I think, to put a lot of thought into, and that's what we've done.
00:25:50.926 - 00:26:15.666, Speaker B: We've decided to launch our token for later in the year because we want to get our platform right first. But I guess there's no real answer to that in terms of development. This is obviously, I guess, probably the core focus of the hackathon. So it depends on your background. Some might need more learning than others. Depends. My background was in computer science, so I'd done a bunch of coding, see, and that kind of stuff before.
00:26:15.666 - 00:26:52.874, Speaker B: So Rust was still a little bit new to me. But I knew, I guess, most of the general paradigms of, say, like, object oriented programming and doing some like, the more low level stuff, uh, like byte manipulation, stuff like that. Um, but definitely, if you're less familiar, spend more time on the learning bit. Um, it's going to help you in the long run. Uh, so don't skimp it. Uh, and the thing to know with Solana, I guess, is it does have a bit of a, um, development learning curve that's just kind of how it is. But the tooling is definitely getting a lot more sophisticated, and I think with stuff like anchor, which I'll go over a bit more, that's actually bringing down the barrier to entry a lot, which is really good.
00:26:52.874 - 00:27:25.090, Speaker B: I guess there are a few different components. You've got the backend, which I've gone into a little bit before. So all your smart contracts written in rust highly recommend. Doing the rustlings course is a really popular one. You can just clone that on GitHub and go through it. You don't need to do it to death. There's a lot of more complicated stuff, but I think as long as you know the general syntax and some of the more, um, I I guess some of the standard stuff, like, you know, traits and macros and I guess how to work with all the, the different error handling, that's kind of pretty important.
00:27:25.090 - 00:28:00.424, Speaker B: But if you're getting into like Mutex and like all the different, you know, types of pointers, probably like, you know, a bit overkill for what you might need to do. Um, so take that with a grain of salt, um, for learning Solana itself. Solana has a bunch of documentation on their website, which I'd recommend checking. And then I'm sure as you've come across, there's the Paul X blog, which was basically one of the OG blogs on how to write an escrow program. And pretty much, I think this is like the, um, right of passage for Solana. Everyone pretty much goes through this, uh, and it's like super well known now. Um, so that blog is really great and explains like the programming model and a bunch of different stuff.
00:28:00.424 - 00:28:44.184, Speaker B: So I think get through the basics, understand the account model, how all that kind of works, how programs and accounts function. It's basically like a file system was how Bartosz explained it to me, which makes a lot of logical sense. And then getting into the more advanced concepts like program derived addresses, cross program invocations, also pretty important to learn. And then once you've done that, anchor is this amazing framework written by serum guys, specifically Armani. This just helps, I think, abstract and make the development experience a lot easier. So it's definitely good knowing Solana and what happens under the hood, but this really helps you crank out code super quickly. And so he's got an amazing set of tutorials on how to do a lot of the core anchor functionality.
00:28:44.184 - 00:29:10.870, Speaker B: Another good thing is anchor examples. So this is in the GitHub as well. Basically, I would recommend not writing all your code from scratch and just trying to come up with the idea and write everything from zero. That's going to take you a lot of time. Probably not worth it. Anchor examples and even the SPL library have a bunch of really nice use cases. It's like say you want to do a lending program, you want to do a governance program, you want to do an escrow program.
00:29:10.870 - 00:29:58.434, Speaker B: There's so many different examples in there that you can probably tailor to what you want to do. That's a really good base of how to get started. And just reading that code and understanding what's actually going on helps a lot, I'd say once you've of done that, Paul X one shout out to our CTO who actually wrote, I guess, the anchor version of the escrow program. So he pretty much took this blog rewrote in anchor, and that's a really good way, in my opinion, to get started with anchor in development. That's the backend in terms of the client, the client's basically how you interface with your on chain program on Solana, and pretty much everything's done in typescript and JavaScript. So if you don't know that already, to be honest, I didn't know it before this learning, it's not that hard, I would say. There's a bunch of YouTube videos, I didn't put any specific links.
00:29:58.434 - 00:30:25.380, Speaker B: It's pretty well known language. Feel free to read up on it, it's not too bad. And then anchor as well does a bunch of client stuff. It generates a client for you and makes it really easy to access through the front end. That just saved so much pain. Highly recommend then in terms of your pure front end, the interface that people work with. Once again, writing stuff in typescript pretty standard, and then using frameworks like React, also very popular.
00:30:25.380 - 00:31:00.380, Speaker B: Bartosz actually wrote this DAP scaffold, which a lot of projects seem to use, and that does a lot of the core functionality of how you set up adapt, stuff that's annoying to do like wallet integrations and a bunch of stuff. You can basically just pinch the code from there. So that should save you a bunch of time. And then the last point I want to make, I guess, is that yeah, keep in mind sometimes the documentation can be a bit scarce, especially when you're working on the bleeding edge. So don't be afraid to troll discord. Read through the source code when you have to. It's not too daunting, I guess, and it's good practice to get into, I would say.
00:31:00.380 - 00:31:53.264, Speaker B: Stack overflow isn't too developed for Solana yet, so the intermediate solution is just literally go on discord, read through the stuff, control f any kind of issues or errors you're having, and there's 99% chance that someone else has run into it. So I've found that incredibly helpful. Personally, before, I just want to do a bit of a feature on anchor. I'm not going to go into too much detail because Armani has already done a whole workshop on this a couple of days ago. Legit anchor saved us so much time and so much pain. So highly recommend. People actually using anchor for their backend and their client is just really good and just really nice abstraction over Solana what does this save you? It saves you a bunch of time, so it abstracts a lot of the boilerplate and a lot of this deserialization of accounts, which can be a bit of a hassle and just really add to the bloat of your codebase.
00:31:53.264 - 00:32:27.088, Speaker B: So that's really nice. It basically lets you focus more on the logic and work at a bit of a higher level. So if you come from solidity, I think the way it's structured is a bit more reminiscent of that. And you just kind of have almost like all the different endpoints or methods that you can call, and then the kind of accounts that you'd have to pass in through the context. Another really great feature is that it creates this client IDL. The IDL is basically like a translation between your backend and your front end. So it just allows your client essentially in typescript to be able to talk to your backend.
00:32:27.088 - 00:32:58.396, Speaker B: So this is really underrated and means you don't have to write your own stuff for this. It's just like generates this JSON file, which basically tells the client how to talk to it. Um, and yeah, as I said, probably a bit more familiar to solidity devs how this is kind of set up. Uh, another thing that saved us is a ton of sanity. Uh, anchor does lots and lots of checks, uh, and helps with the transparency of your program. So with Solana, if you haven't found out already, you have to do a ton of input validation. And so a lot of this is baked into, uh, anchor already, which is really good.
00:32:58.396 - 00:33:43.690, Speaker B: Uh, it also does this like logical separation of, like, the program logic from the actual state, like all the accounts where you're storing the data. And so having that, I guess, separated a little bit is definitely nice from a programming experience. And you can decouple this input validation from what your program is actually trying to do. And I would say with Solana programs, 70% to 80% of your program ends up just being this kind of like, check if this person signed it, or if this person did this, or if this account is validated when it's passed in a bunch of different stuff. The testing and deployment is also easy. You just run anchor test if you want to test stuff, anchor deploy. If you change your anchor toml, you can basically deploy between local Devnet, Testnet, mainnet just makes life really easy.
00:33:43.690 - 00:34:12.314, Speaker B: So a big fan of that, then it'll also probably save you a lot of money in the long run, because it stops you running into a lot of the typical bugs that happen in Solana, because people don't do input validation, which is a big trip up for people. It does a lot of checks under the hood, and you can easily define your own when you're doing the accounts. There's a lot of checks that you can put in there. Yeah. So really important. If you don't want to get hacked, use anchor. It's definitely going to save you a lot of pain.
00:34:12.314 - 00:34:44.632, Speaker B: Cool. So that's the development side of things. I know that was a lot to go through. As always, feel free to drop any questions in the chat, more than happy to answer them. Yeah, and the last two sections, deployment and presentation. This is getting more towards the end of the hackathon. So once you've built most of the product, how do we actually get it out there? How do we get it deployed on Solana? How do we get people using your product? So in terms of deployment, you can easily change where you want to deploy.
00:34:44.632 - 00:35:26.710, Speaker B: If you're using anchor in the TOMl file, anchor Toml has a bunch of config, nice and easy to change. I guess the three main networks to be aware of are your local net, your devnet, and mainnet beta. Local net is basically you're running your own validator node, and that's just like locally. And you can use this for testing small changes, which is really great to iterate on small products. But I think when you start building more fully fledged products and you start using third party services, stuff like oracles, you're not really going to have that available on your local validator. So it's less useful in those kinds of cases. Devnet is really great, highly recommend.
00:35:26.710 - 00:35:55.854, Speaker B: Pretty much everyone uses this for the hackathon. That's because it's pretty much the exact same as Mainnet beta, except all the Sol on there is just paper money. You're not actually paying real money for it. So there's a really nice way to basically test what it'd be like to do stuff on Mainnet beta. But you don't actually have to fork up a lot of cash to deploy programs because it can be pretty expensive. I think if you try and deploy a bunch of programs to Mainnet and they end up stuffing up. Devnet is a bit of a staging environment.
00:35:55.854 - 00:36:38.386, Speaker B: You can say pith or I imagine switchboard have their oracles on there as well. So you can call their Devnet program and actually get price feeds from there, which is a really nice way to test those integrations. As I said, you don't have to pay real Sol, which is just a big plus. It's really good to run low risk alpha deployments. So I highly recommend this. And this is something that we did was run a version of our program. Instead of doing it to mainnet straight away, you run it on Devnet, people can essentially play with fake money that they get from the faucet and you can test out your product and people find bugs and you don't actually have millions of dollars at stake that you could potentially use due to early bugs.
00:36:38.386 - 00:37:17.970, Speaker B: So that's a really nice one to get the product in the community's hands and have it as pretty low risk. One thing to keep in mind, Devnet will probably get a little bit congested during the hackathon. I think it did towards the end of the last one for us, so just keep that in mind. There's probably going to be a bit of load, but maybe they've kind of sorted that out a bit. And yeah, Mainnet beta, I don't think you're going to touch this too much during the hackathon unless you're very on the ball and you get stuff out to Mainnet in a month, which is pretty nuts. And congrats to you if you can do that. But just keep in mind, if you're deploying a program and you end up screwing up a bunch of deployments, you're going to be paying real soul for it.
00:37:17.970 - 00:38:00.680, Speaker B: And it can add up pretty quickly. In terms of the hosting stack that we saw as pretty popular and that a lot of people are using, it tended to be backend on Heroku, which is what we were using. It's pretty easy to use, it's not that expensive and you can auto scale it pretty quickly. I highly recommend you can just hook it up with your git repo and then you can essentially push that remote and it just deploys it for you. Pretty painless. Definitely think about scaling. I know teams such as DJ and apes just basically put a bunch of their stuff on Heroku hobby instances and were kind of blown away when thousands of people tried to join their website and crashed everything.
00:38:00.680 - 00:38:25.884, Speaker B: So think about the kind of resources you need to deploy. But yeah, this is a great way to run your back end scripts. If you need to run a service like we needed to run liquidation bots, essentially we would just run this on a timer on Heroku if you need a hosted web app as well. Great way to do it in terms of the front end. Once again, you can use Heroku, which is what we did. Some alternatives. Versal is really nice.
00:38:25.884 - 00:38:50.204, Speaker B: I think it's using next js and then you've got GitHub pages, which is pretty straightforward. Probably the easiest thing to do to be honest. Just connect straight up with your GitHub repo and then you can push using GitHub actions to GitHub pages. Use a custom domain and whatnot. Get it up there really quickly. Yeah, basically down to personal preference. Whatever works, I think does the job.
00:38:50.204 - 00:39:25.616, Speaker B: Something which is really important, which I think a lot of teams underestimate and we 100% underestimated. Ours was RPC infrastructure. So rpcs are remote procedure calls if you don't already know. And that's how you essentially execute instructions on the network. You send it to an RPC node that executes it for you on the network. Problem is, yeah, sometimes if you're using the public nodes, they can get congested, or if you're hitting them way too hard, you can get rate limited. This is a huge problem that we ran into in the hackathon, so just be very wary of it.
00:39:25.616 - 00:40:10.324, Speaker B: And so I'd say look into this earlier rather than later. So like I was saying, with the timeline, start looking at this maybe a couple of days or ideally a week before the end of the hackathon, because it can definitely make or break your entire platform. So yeah, we hugely underestimated rate limiting. We basically created our backend, whipped it up in a couple of weeks and just chucked it out there and we're like, hey, let's run an alpha and try and get 100 people on it. What we didn't fully appreciate was that we hadn't optimized our backend. So everyone was polling from all these different clients and it was just really slamming our back end. Especially a lot of the scripts that we were running on our backend, like liquidation scripts, they would very quickly hit the rate limit because we were making a lot of requests.
00:40:10.324 - 00:40:45.142, Speaker B: Yeah, you've got a ten request per second limit, so keep in mind it's pretty low, and if you're building any production application, probably not suitable. But this is like a public free to use resource. I think for anyone kind of testing their application, it's very useful. So yeah, the ways around that look into RPC providers, potentially a few good ones, are RPC Paul, Genesis, go figment. I'm sure there are a bunch of others, but these are the ones that we've kind of seen being pretty popular. They have different tiers, depending on how many requests you need. So I recommend like talking to them, seeing what's reasonable.
00:40:45.142 - 00:41:28.250, Speaker B: And that's usually, you know, you can go anywhere from probably like $50 to like $500, or even have dedicated services, depending on how much you want to pay and how intense your application is. Other option, uh, if you really feel like it, which I highly do not recommend, um, is self hosting, because it's probably going to take a lot of time. It's like running your own bare metal instance, probably. And there's just going to be a lot of setup and maintenance. So I reckon just honestly, just fork out for a provider. It's probably going to be cheaper in the short term and it's going to save you a lot of valuable time. And so what we did, I guess, back to the story, we got our whole back end working and the problem was we hit the rate limits really quickly and we were on the public endpoints.
00:41:28.250 - 00:42:03.212, Speaker B: We hadn't actually tapped into an RPC provider and so we were getting rate limited really, really hard. Basically couldn't launch our platform because of this, because we would just hit the rate limits within a couple of seconds and it was just impossible. So our 02:00 a.m. Hacking engineering decision was, hey, let's just get everyone's laptops, let's just hotspot them on different kind of ips for like tethered to our phones. And then we kind of run that and that basically gave us a bunch more requests per second. But really don't recommend doing this. Probably a waste of time and definitely go with an actual RPC provider.
00:42:03.212 - 00:42:42.524, Speaker B: But this is a temporary solution that we could just run in alpha for a couple of hours. So that was a bit of our mistake, but we learned our lesson. The other thing is, we've refactored a ton of our backend after that, just to make our application faster. You want to use stuff like websockets, so you can use websockets or polling websockets open up more of this long term connection, which means you won't be spamming with a bunch of RPC calls when you're polling, so it's a lot less expensive. You're probably not going to hit those rate limits as quickly, and it's really good for kind of like listener services if you're trying to listen to an oracle whenever the account changes. Definitely recommend using something like that rather than polling. Cool.
00:42:42.524 - 00:43:04.914, Speaker B: Yeah. Going to get through the rest of it. Yeah. So another thing which I just thought I'd mention as a passing comment, charting, probably less relevant if you're like an NFT project, but if you're in DeFi, it's probably a pretty good chance that you're going to be using some kind of chart, I would imagine, if you're a Dex. We certainly did. There are a few options for that. One is serum history built by the mango markets team.
00:43:04.914 - 00:43:37.144, Speaker B: It basically just listens to Dex trades indexes and redis. And this basically powers a lot of the charts on mango markets. They've open sourced it, which is very kind of them and amazing as always. We've also used that as a bit of a template for our pith history repository. It's based on that basically instead of using serum, we're taking it from pith Oracle. We optimize it. So it's pretty fast and you're getting these high frequency updates into your charts basically every block.
00:43:37.144 - 00:43:59.278, Speaker B: So this is really cool. Feel free to use it. We basically open source this pretty recently and it powers all our charts on Zeta. So highly recommend if you want charts and you don't want to spend a lot of time trying to set it up. These are two great repos for that. Someone asked in the chat, hi, can I register hackathon and join a team? Sure. I think you can just join the website and try and find some teammates and register for that.
00:43:59.278 - 00:44:31.984, Speaker B: Or probably go on the discord. There are, I'm sure, a bunch of people looking for teams. And then the last bit, I guess, which is probably the most underwhelming bit, is the presentation. But it's definitely something that's important to get right. If you build a really incredible product like a CLI tool, but you just like really can't display it in a nice way. Like, unfortunately, as nice as your engineering is probably not going to come off super well with like judges or people who look at it. So a bit of like window dressing at the end is, is definitely nice, I think, to put yourself in a good spot for the hackathon.
00:44:31.984 - 00:45:04.450, Speaker B: Um, so yeah, one, one part of that, spreading the word is super important. Don't hold everyone in suspense and just kind of like build out of sight and never share anything, you kind of want to do the opposite, like post product updates. If you've got like new UI previews, like we did, post them on Twitter. If you have like new product launches or you figured out a new innovative mechanism, try and get that out there. Write a little bit of a thread about it. We did that with pith when we were integrating in the super early days. We used their confidence interval.
00:45:04.450 - 00:45:15.794, Speaker B: We wrote a bit of a thread about it. They loved it, they retweeted it. Stuff like that is really good for traction. Yeah. Twitter threads, highly recommend. Sneak peeks, really good. That gets people really excited.
00:45:15.794 - 00:45:49.884, Speaker B: And then probably the best thing you can do to get people really, really excited is do a closed alpha launch. So if you have a product out there, people can just visit your link go and trade on it or mint nfts or do whatever you want on it. I think that's really cool. People see it's a proper product and they can actually use it. So I think that goes a long way. And I think that was something that was a good differentiator for us in the hackathon was one of the teams that actually had a product out there that you could actively use. And what are the advantages of, I guess, spreading the word and getting it out there? You get people excited on Twitter.
00:45:49.884 - 00:46:20.858, Speaker B: People talk, they retweet it, they spread it out. You get this product feedback. So people might grill your product, say this could be better. You get this feedback early and then you can get it fixed before the end of the hackathon. I think that's really good. Rather than building everything and then leaving it to the last minute, then, yeah, if people really like your product, like we had here with Mister Degen trading here, they actually might write up their own thread and this gets like a snowball effect. More people write stuff out, more people share it out.
00:46:20.858 - 00:46:40.580, Speaker B: I think that's really good publicity. So Degen trading here was on our closed alpha trading competition. He actually did pretty well. He did. He took a bit of a screenshot of our thing. He basically wrote up, didn't think that binary options were going to be out there so quickly. And he kind of wrote up like, what are binary options? How do they work? How are we kind of doing it? And this is like totally unprompted by us.
00:46:40.580 - 00:47:22.804, Speaker B: And I think that's the really cool thing about community is like people go out there and evangelize the product and that's how it scales really well. The last bit, obviously the judges are going to be the ones judging this, so you really want to get out in front of them and in their kind of mind share and get it in front of them. So the good news, I guess, is pretty much every judge probably uses Twitter and is pretty active on Twitter. So posting on there is definitely going to get in front of them if you get a good bit of traction. And then, yeah, as I said, having a demo ready that people can use, pretty awesome. The last bit that I'll kind of go over the submission. So obviously you're going to have to submit on the Solana website at the end of the hackathon.
00:47:22.804 - 00:47:52.350, Speaker B: Good starting point is I've linked here the submissions for the last hackathon. You can kind of go through there, see what you, you know, some of the other protocols, including ourselves, submitted, get some ideas. And so the two components around that, which I think are important, it's like a bit of a slide deck, not too dissimilar from the medium post, but I guess like, yeah, just outline basically what you built. What are the different components? Like, how far you actually got in the hackathon is really cool. Yeah. Talking about the team and that kind of stuff. Your traction is really good.
00:47:52.350 - 00:48:20.932, Speaker B: If you have numbers around, like your community, I think that's a really good sign of growth as well. Um, and then, yeah, like the long term roadmap, you know, you want this thing to be going for the next couple of years. It's not just the hackathon. These couple of weeks, you're going to be building it. Hopefully, if you want to do this long term, like, people want to see where this project's going. Like, how are you going to dominate defi in this one particular vertical? That's what gets people excited and I think people want to see that, that long term vision. And so, yeah, definitely having a nice presentation works wonders.
00:48:20.932 - 00:48:54.904, Speaker B: Um, as you can see, we put a bit of effort into, you know, designing some of our PowerPoints. I don't really like doing PowerPoint presentations, um, but definitely helps putting a of thought into it. And you can use, like, I'm definitely not a super creative design person, but using tools like canva, a really nice way to, I guess, make things look definitely a lot nicer in other people's eyes. Video demonstrations are another really good thing. If you have the time. It's definitely a little bit more work, but it's definitely worth it. Just record a little bit of a YouTube video, a demo of how the product works.
00:48:54.904 - 00:49:29.890, Speaker B: I think that is a lot nicer than just reading a webpage or a slide deck. A bit of video that steps in through how it works and all the different functionality, I think is quite engaging and that's something that's a couple of minutes and anyone can watch. So highly recommend that. We had our YouTube video for that, which I've also linked, so feel free to read through that. We post on Twitter and got, I don't know, probably a couple hundred people that liked it and looked through it and people got pretty excited. Highly recommend. And then kind of wrapping up, I guess this presentation is, it's not all about just the hackathon, obviously.
00:49:29.890 - 00:50:02.774, Speaker B: Like, this is what the presentation's about. But think long term as well. There's the post hackthon period as well. Make this your opportunity to, I think, start mingling with other teams and other co founders and hopefully this will kickstart your really long term Solana journey. So one of the main things is making friends is really important. We, I guess, collaborated with a lot of other protocols during our kind of hackathon time, which is really cool. We met a lot of other cool founders, other cool projects, and this is really nicely dovetails into potential product integrations.
00:50:02.774 - 00:50:31.198, Speaker B: We talked to other people and they were like, hey, we're doing a stable coin, or hey, we're doing lending. And those are people that we can natively try and integrate into our own platform. So that's really powerful. That's kind of the power of DeFi is this composability. Another thing is cross marketing, working with other projects and kind of sharing. I guess your audiences and being able to put out posts between one another is pretty good and helps, I guess, mutually beneficial. Another thing is just like idea sharing, Dev collaboration, just throwing around ideas.
00:50:31.198 - 00:51:07.744, Speaker B: Like, for example, we will just throw around ideas with Norbert from synthetify because he's a really good, Dev has lots of good ideas and we'll just be like, hey, how did you do this in anchor? Or what's a good way to do this? Or he'll tell us about this particular library or other things. Someone in the chat gave me a very nice comment. You're ugly. Thank you very much, mate. And then the last one says, ride the wave. So you want to make sure that your hackathon is well publicized, so use it to get your project's name out there. This is a really good way, I think, to blow your project up, get a lot of people, I think, excited about it and bootstrap your growth.
00:51:07.744 - 00:51:59.296, Speaker B: Then the last one is, if you're looking to raise funding, maybe you're looking to just go fully community and do the ido stuff like mango has done. Maybe you're looking to get investors on, uh, what I would say is a lot of investors really watch this hackathon winners within ten, uh, they look to definitely like invest in a bunch of these projects. So really good way to get yourself in their eyes, uh, and potentially raise around following that. Um, and yeah, you're in a really good position to hire any kind of top talent. Um, I think people want to come to your protocol if you're a hackathon winner. So it's a really good way to, to get really skilled people. Uh, and I guess the good thing to know is, like a lot of the top projects in the ecosystem, you got like saber and jet in the first one, mango psyoptions, synthetify marinade in the next one and then like ourselves, Solend, switchboard, defi land, solfarm all kind of came through the last one and they've all become like highly successful projects.
00:51:59.296 - 00:52:32.084, Speaker B: So I think it's just like a really good way to go to go through this hackathon. And yeah, most of all, have fun. It's going to be a good opportunity, a good way to get into a really interesting space and very excited to see what everyone can deliver. If you have any questions, happy to stick on here for the next couple of minutes and answer any else. If you have any other burning questions that don't get covered, feel free to reach out to us on Twitter or in discord data markets. Or we might be in like the Solana discord chat. And just feel free to, feel free to ping us there.
00:52:32.084 - 00:53:10.006, Speaker B: Cool. I'm going to have a look at the twitch chat, see if there are any questions. So someone says, I think questions on mining on website, smart contract creation, blind minting. What do we use? Do we use Metaplex or writing own code? I would say, yeah, if you're doing an NFT project, I would say definitely look at Metaplex. Standards are really good for NFTs. I think that's the gold standard for what's been done for Solana NFTs. Jordan's written a bunch of awesome code if you're looking to do a launch.
00:53:10.006 - 00:53:33.634, Speaker B: I was definitely looking through the candy machine code. That's a really nice way to do generative NFT drops. So would highly recommend checking that out. They've got a bunch of great stuff there and I know they're working very hard. Is there a link to all the submissions for the last hackathon? Yes, there is. You can find it here. They just basically have a big airtable submissions thing.
00:53:33.634 - 00:53:56.250, Speaker B: You can also Google, I think it was like Google the last hackathon. There's like a blog post for last hackathon winners and then it should basically list all the different submissions there. So feel free to look through that. Cool people love the accent. Yes, if you can tell, australian accent. Cheers. Well, sweet.
00:53:56.322 - 00:54:20.454, Speaker A: Thank you so much Tristan for joining. This was fantastic. Really appreciate the insights and thank you for pulling all of this information together. You can find SATA markets as you can see here on Twitter and discord. Definitely check them out. They are incredibly sharp and yeah, excited to hear from you again soon. Otherwise, thanks again so much.
00:54:20.794 - 00:54:23.314, Speaker B: Awesome. Thanks a lot for having me and thanks everyone for tuning in.
