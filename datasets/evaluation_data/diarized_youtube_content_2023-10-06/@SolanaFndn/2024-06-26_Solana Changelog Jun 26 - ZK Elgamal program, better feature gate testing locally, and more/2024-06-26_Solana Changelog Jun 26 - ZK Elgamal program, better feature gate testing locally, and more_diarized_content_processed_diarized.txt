00:00:03.760 - 00:00:10.662, Speaker A: Hello everyone, GMGM. I'm Nick from the Solana foundation dev rel team and welcome to the changelog. Today I've got Jacob with me. How you doing, Jacob?
00:00:10.766 - 00:00:12.094, Speaker B: I'm doing well. How are you doing?
00:00:12.222 - 00:00:37.868, Speaker A: I'm doing amazing. Let's get into some commits here. The first one I wanted to shout out is this commit from about the CI, specifically within the agave repo. It's updating the build script to make it incredibly mo fasta, which is like real words, I swear. The build script basically makes it so everything builds like 200 times faster, which is really great, including building C, which is awesome.
00:00:38.044 - 00:00:40.644, Speaker B: Yeah, that's specifically like the C compiler, right?
00:00:40.772 - 00:00:49.440, Speaker A: Yep, the C compiler. So it'll build the code with the C compiler to make it so it's building the rust and C version of like the SDKs as a player.
00:00:49.940 - 00:01:31.696, Speaker B: This is awesome. I always like to see things building faster. Oh yeah, saves a lot of time. Another commit that we saw is verifying elf with active feature set before attempting deployment. What we've seen recently in the past couple of months is that when people are deploying or they're testing their programs locally or on Devnet, and then they go to deploy on Mainnet. They were using a feature that was not activated on Mainnet, but was activated on their lower environment and they didn't realize it ahead of time, so it ran into issues and they couldn't figure out what the errors were on Mainnet. This is to help you fail fast, understand that.
00:01:31.696 - 00:01:45.504, Speaker B: Oh, I was using a feature that's not yet activated on Mainnet and then move forward. So glad to see this. It helps the developer experience greatly rather than just leaving you in the dark with very vague errors.
00:01:45.672 - 00:02:42.596, Speaker A: Oh yeah, it'll be much more better. And speaking of really awesome things, this post from Blockiosaurus here talks about this GitHub issue and work that's being in progress to update how CPI calls are actually required to pass in all those additional accounts. So if you're used to the typical salon development flow, when you're sending a transaction, you have to include every single account that you interact with within the transaction. This includes all the programs. But what this new change will do once it's activated and everything when you're doing CPI calls, you actually will no longer be required to pass in program accounts. So the actual program ids that the CPI is calling so you can actually remove those so you can have your transactions. You're like trimming the fat, just like Blachiosaurus said there, you're trimming the fat of all the program ids that you're executing within CPI, making it so you can have even lower, even smaller transactions that you are sending to the cluster.
00:02:42.596 - 00:02:45.710, Speaker A: And that way you can have more things in those transactions.
00:02:45.900 - 00:03:16.470, Speaker B: Yeah, generally this limitation of what, 1232 bytes on a transaction is like the biggest limitation to what you can do on Solana. So it's cool to have these improvements that further expand the ability to do things within your transaction. And then we have a couple of resources of the week. I'm going to start with this one. So this one is a tool called validate by turbine. So it's a really cool tool, actually. I really have been excited for this one to be launched.
00:03:16.470 - 00:04:31.090, Speaker B: What it does is kind of allows you to load up like different ledgers locally on your local test validator very quickly, as well as if you're trying to get a specific program out from, let's say you want to do openbook testing locally, you can basically give the program id to it. It'll load a bunch of different accounts for it and allow you to kind of work locally on Openbook without having to guess all the accounts. What's really cool is then you can export these configs. They basically validate jsons for your state locally and just hand them to people on your team or something that they can then very quickly build using your same local state. You can think of this and what this going to turn to at some point is a plugin system to where if you have, say you want to use metaplex today, you have to load all the metaplex accounts to do nfts locally. In the future, you could just have this plugin of the custom validate JSON for Metaplex and you immediately can just start building. You don't have to reinvent the wheel every time.
00:04:31.090 - 00:04:40.924, Speaker B: This is a very exciting tool. I've been super looking forward to this coming out. If you want to try it out, go to turbine validate and test it.
00:04:41.092 - 00:05:14.010, Speaker A: The next resource we've got for the week is Metaplex core. This is one of the new NFT standards that Metaplex has put together. It's a pretty interesting take on what NFTs can be and how they work specifically, at least for my understanding, is metaplex core NFTs do not use the SPL token program or token extensions. It's a little bit different of how NFTs work, but with that they get a lot more flexibility of building an NFT standard from the ground up without using an existing program. So it's pretty interesting. Give the docs a read.
00:05:14.350 - 00:05:20.678, Speaker B: Yeah, I think this way of doing nfts was probably how it should have done in the first place.
00:05:20.734 - 00:05:21.370, Speaker A: Probably.
00:05:22.310 - 00:05:47.442, Speaker B: But it was very hard to do it in the early days because they were trying to figure out, okay, how do we bootstrap an NFT ecosystem very quickly? This one, it's like less accounts, less space on the network, reduced minting costs. It's really cool, but it doesn't have super high adoption just yet. But definitely check it out and try using it and let us know what you think about it. And then the last thing was the stack exchange.
00:05:47.626 - 00:05:48.578, Speaker A: Stack exchange.
00:05:48.674 - 00:06:14.062, Speaker B: The Stack exchange league. Here we have our top of John, Jimmy, Ari, Joey. It's good to see these people and basically contributing to Stack exchange, helping out the developers for the future. Definitely. Please help out like answer questions, upvote like upvotes. And especially help out on Stack exchange. Upvote the good questions, up for the good answers.
00:06:14.062 - 00:06:24.182, Speaker B: And that way we can make a better experience for all developers in the future. But that closes out for this week's changelog. Thank you all for joining and we will see you next week. Bye.
