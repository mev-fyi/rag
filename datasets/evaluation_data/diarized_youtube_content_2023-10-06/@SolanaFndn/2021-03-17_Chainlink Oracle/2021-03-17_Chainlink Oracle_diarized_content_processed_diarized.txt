00:00:11.200 - 00:00:32.104, Speaker A: Everybody, welcome to a Friday night stream. If you're in the east coast, on the America side today, I have Harry joining us today. He's prepared a presentation about oracles and about Chainlink and all sorts of fun stuff. Thanks for joining the stream, Harry. Take it away.
00:00:33.084 - 00:00:57.124, Speaker B: Cool. Thanks, Ryan. Very happy to be here. Okay, let's get started. So I'm just going to share my screen. Sweet. Hopefully you guys can see that.
00:00:57.124 - 00:02:16.996, Speaker B: So today we're going to talk about Oracle's defi and decentralized data, or price data specifically. So, my name is Harry Papakurisu, and I'm a developer advocate for Chainlink Labs. And we work on Chainlink, which is a decentralized Oracle network. So before we continue, I just want you to stop for a minute and just have a think about some of these really big game changing companies or startups or platforms or whatever you want to call them, and think about some of the things they have in common, right? One thing they have in common is they all came into their respective spaces with this new radical idea that leveraged technological innovations and the Internet, right? And because they offered so much value for the end customer or consumer, and such a superior customer experience, despite an initial setback and push back from the industry, they were all able to be successful in the end. And not only were they able to be successful, but they actually completely turned around their industry 180 degrees right upside down, and they changed the way that their industry worked. And not only that, but they actually forced others in their industry to also adapt, otherwise be left behind. So this was the power of showing the world something that was a strictly better solution for the end user or consumer.
00:02:16.996 - 00:03:41.736, Speaker B: So Netflix and Spotify changed the way in which we consume audio and video content completely. Companies like Uber Eats and food delivery completely changed the way in which we get our takeaway food and things like that. And they convince tens of thousands of businesses all around the world not only to just to take a 30% haircut on a bunch of their sales, but forcing them to have to do it if they want to stay competitive, right? So these are good examples of if you show the world something that's strictly superior for the end user, and once that can be implemented in a secure and feasible and implementable way, then capitalism will eventually help that to become the way that that industry works. So today we're actually at the intersection of this happening right now with smart contracts and blockchain and decentralized finance, right? And over the next few minutes, I'm going to explain this to you and hopefully at the end you've got a really good idea of why you should want to build a DeFi protocol or decentralized application as part of this hackathon, and how Chainlink can help to enable this strictly superior version of finance in the emerging Solana ecosystem. So just a quick agenda. So the way this will go is I'll talk for a little bit, maybe about 15 minutes, and go through a few things. We'll talk about the hackathon, specifically smart contracts and cryptographic truth.
00:03:41.736 - 00:04:23.812, Speaker B: Then we'll talk about the Oracle problem, Defi and Chainlink price feeds, and then where you can go to learn more. And then we'll go through a bit of a demo of how to deploy and interact with a smart contractor program on Solana that uses chaining price feeds. Solana ignition Hackathon. We're very excited to be here. We're big fans of Solana, as you guys have probably already seen. We love how it offers developers a fast, low cost, scalable blockchain that can be used for building smart contracts and decentralized applications. It really is an ideal breeding ground for building the game changing defier protocols that will go on to change the way that the financial world works.
00:04:23.812 - 00:05:34.738, Speaker B: This is why we have our price feeds live on the Devnet cluster now, and we're looking to deploy them on the main net as well in the near future. So based on all of this, we're contributing five prizes of $6,000 in link towards this hackathon for the five best projects that use Chainlink price feeds in their hackathon submission. So to be eligible for consideration for one of these five prizes, all you need to do is use Chainlink prize feeds in your submission and make some sort of state change based off the data in the price feed, right? So that's all you have to do. So now that the hackathon part is out of the way, let's talk a bit about today's digital agreements. So whether people realize it or not, we, a lot of our lives is underpinned by these digital agreements that we have today. Right? You have an agreement with your insurance company, with your bank, with your, you know, your social media accounts, etcetera, right? And these are what we call these just trust us paper promises. The reason we call them that is because there's actually no real firm commitment or guarantee that these are going to be fulfilled other than a choice or desire for them to be fulfilled.
00:05:34.738 - 00:07:00.400, Speaker B: Right? And everyone's used to the world working this way that, you know, we don't really think that there's an alternative. The fascinating thing, that there is an alternative that came around in 2009 in the form of bitcoin, and that's since evolved into more advanced versions of blockchains and things like that, that have capabilities, such as smart contracts or in the case of Solana programs. But we prefer to think of a smart contract as a highly secure, tamper proof digital agreement. The difference between a traditional agreement and a smart contract is that a smart contract runs on this decentralized infrastructure, such as a blockchain, and it's enabled us to rethink and change the way in which we enforce and execute our digital agreements. So the big shift is that the contract execution and enforcement is done by this decentralized infrastructure that has nothing to do with the participants in the digital agreement, right? It's this completely separate thing that can't be gamed, modified, hacked, coerced, bribed, blackmailed, etcetera. So smart contract, or in the case of Solana programs, are more advanced versions of what we call cryptographic truth. So cryptographic truth is the ability to guarantee an outcome based on maths, cryptography and physics, right? And what you see here in this diagram is a bit of a spectrum that represents the financial agreements as they exist today.
00:07:00.400 - 00:08:03.896, Speaker B: And on one end of the spectrum, you have a document that, you know, some people might do something and you hope they might do it. And on the other end, you have cryptographic truth, right, which purely relies on maths, cryptography, physics. And this cryptographic truth has evolved into many useful things that we see today, such as, you know, defi. So here's a modern example of a just trust us paper promise guarantee, right? So Robinhood is a trad five product where you can sign up, trade, do whatever you want. You know, people think, great, cool, I'm gonna go trade some stocks, crypto whatever, until, whoops, Robin Hood says, sorry, guys, we can't actually let you trade anymore because, you know, our friends aren't making money anymore, or the people that are meant to be making money are no longer making money. And in the agreement, it actually says that we can halt, block access from you trading for whatever reason we want. So, you know, tough luck, right? So this is a good example of a just trust us paper promise where nothing was forcing Robinhood to deliver on their promise other than their desire.
00:08:03.896 - 00:08:57.074, Speaker B: And they didn't want to, you know, and they didn't. So smart contracts or programs, in the case of Solana, are strictly superior digital agreements compared to these just trust us paper promises, right? And it basically boils down to five reasons. So the first one is security or tamper proofness. They're highly secure, that can't be influenced by single party because these smart contracts are only on this decentralized infrastructure. Two, reliable, guaranteed execution. Once again, because these agreements are running on this decentralized infrastructure, none of the parties in the agreement have control over the execution or enforcement, and you could be guaranteed that it's going to execute. There's not going to be a case where this server or API is down.
00:08:57.074 - 00:09:32.244, Speaker B: We can't actually process this transaction. Three, transparency. With traditional digital agreements, transparency is usually opaque and kind of hidden away, and it led to things such as a 2008 financial crisis. With a smart contract scenario, transparency of the agreement and its enforcement is unavoidably built in on a blockchain scenario, generally. Four, trust minimization. So we actually have reduced counterparty risk to neither party in the agreement having direct control over the enforcement and execution. Right.
00:09:32.244 - 00:10:22.966, Speaker B: So in the case of Robinhood, you know, they won't be able to stop people from trading unless it's directly codified into the agreement. And five, efficiency due to some of these other things I've described, such as, you know, security, guaranteed execution, etcetera, we can create more efficient automated processes that can save businesses and people cost. Right. So in the end, having things like trust, it's an expensive thing to have and to maintain and to have at a sufficient level. So I just wanted to summarize this section by saying that this cryptographic truth is strictly better than just trust us model that we have today. Right? There's no person somewhere that decides what happens. There's maths, there's cryptography, and there's physics.
00:10:22.966 - 00:11:30.886, Speaker B: And as long as these three things continue to operate in the way they operate today, which is probably one of the best guarantees you get in this world, then you're going to get the expected behavior and outcome from your financial product or instrument or whatever it is, right. So instead of having the possibility something is going to happen, you have assurance that it's going to happen. So now that we know why smart contracts are so awesome compared to their traditional digital green counterparts, let's talk about their biggest limitation. Smart contracts are not able to connect to external data or off chain resources on their own. So if as a developer, you might ask, well, why can't a smart contractor or Solana program just, you know, make an API call? The answer to that is the blockchain deterministic, and everything needs to be in perfect sync in terms of all the nodes on the blockchain. And if making an API call is part of that validation, then each node could get a different result, or some could get no result, etcetera. And then you lose your determinism and your smart contract essentially becomes broken.
00:11:30.886 - 00:12:53.254, Speaker B: It won't know how to proceed. So this is defined as a smart contract connectivity problem, not being able to connect to external data systems and events. And it limits the use cases for on chain programs or smart contracts purely to things that can be only done on chain, right? But the majority of financial digital agreements that exist today outside of the blockchain and crypto space actually require some form of external data or input or computation. So interact to interact with the outside world, we need what's called an oracle. An oracle is any device that interacts with the off chain world to provide external data or computation, right? So they report the result of that data on chain so the blockchain can stay deterministic, right? So instead of a blockchain saying, give me the price of Ethereum, give me the price of Solana, it gets told by one or more oracles, this is the price of Solana, and then every single node has that input and they can continue operating the program in the correct manner and we keep that determinism going. Now here's where things actually get a little bit interesting. Using a single centralized oracle actually creates a single point of failure for an on chain program, right, and compromises the overall security of the digital agreement.
00:12:53.254 - 00:14:18.526, Speaker B: Because if you've got this highly secure decentralized blockchain here, but then you're running a single centralized oracle to feed data in, then the end to end security of your overall system in all cases is only as good as its weakest link. In this case it's going to be this oracle feeding and data here, right? So how do we get around this problem? So the answer to this is a decentralized oracle network. So chain link is done, designed to be a modular, decentralized oracle network for getting data in a decentralized manner and feeding it on chain. And by doing this, we solve the problem by extending the decentralization and trust minimization properties of a blockchain and taking that out and applying it to the data delivery layer where the oracles are, and also to the data source layer where the data is obtained from. So to try wrap your head around this visually, here's a bit of an example that shows a number of chain link nodes fetching price data from multiple sources. As you can see by the different prices there results are then aggregated and sent on chain onto an on chain reference contract there or program. And the thing to note here is that not one single oracle here or data provider even is directly responsible for the outcome that's fed onto the on chain program here.
00:14:18.526 - 00:15:53.818, Speaker B: You take a sufficiently number of malicious actors to influence that by a certain, like a large amount, basically. Now, by combining on chain smart contract or program code with off chain resources such as oracles, you have what we define as hybrid smart contracts, right? So this is contracts that rely on existing on chain code and combine it with these critical off chain services like an oracle. So you can kind of think of them as more turbocharged or supercharged versions of a normal smart contract, which is just the on chain code part, right? And we're already seeing these in play today in the form of various Defi protocols, live across various chains, and they're going to continue to go on and redefine, you know, what our industry is about. Okay, let's talk about data feeds and defi now. So going back to the traditional digital agreements that I discussed earlier, and, you know, the Robinhood example, you know, people are getting sick of scenarios like that happening, right? And they're becoming more and more disenchanted with these just trust us paper promises. And, you know, more and more people are seeking alternatives, and things like DeFi are perfect alternatives for this, right? So if you don't know already, DeFi is taking any existing financial product or instrument, putting it on a blockchain like Solana, and running in a decentralized manner with smart contracts where people can then use it in a peer to peer manner. So that's a very different way for the financial world to work.
00:15:53.818 - 00:16:59.216, Speaker B: For example, how does DeFi work in the Robinhood scenario? In DeFi, you have a private key. You have on chain smart contract code. As long as someone controls their private key, not Robin Hood, not a bank, not anyone is going to be able to prevent them from having access to their assets which are running on this smart contract, right? So, and they can be guaranteed that the financial protocol is going to operate in the way it was codified. There's not going to be someone that decides to stop it at any given moment unless it's codified in there, right? So never before in the history of financial digital agreements, we had this level of guarantee, right? One that just depends on maths, physics and cryptography. So how does chainink help to enable DeFi then? So, as I explained earlier, when you have a decentralized protocol such as a DeFi protocol, you can't just get data from a single data source or using a single oracle. And a lot of DeFi protocols and applications of DeFi require external price data. You know, they need to know the price of bitcoin, price of gold, price for stock, etcetera.
00:16:59.216 - 00:18:00.312, Speaker B: So this is why you need to get data from multiple sources, and you need to kind of feed it on chain in a decentralized manner so that you have that cryptographic guarantee that everything is going to operate in the way it was codified, as I explained earlier. So by providing this high quality price data on chain in decentralized manner, it gives the DeFi protocols the data that they need to operate successfully. Right? And the more data we find that gets put on chain, the more that it enables more DeFi protocols to come online. And the more DeFi protocols that come online, we find that it gives us the opportunity to put more data on chain. So it kind of becomes this, you know, continuous feedback loop. So this is what we've done with our chain link price feeds. The way they work is that we have on chain reference contracts or programs which basically represent the price of something, the price of bitcoin in USD, the price of Ethereum, price of gold, etcetera.
00:18:00.312 - 00:18:50.664, Speaker B: And then we have a number of nodes or Chainlink oracles that all commit to updating this on chain reference contract. And those chaining oracles source data from multiple data providers and aggregators as, as well as multiple exchanges. So, well, they create a market wide price that's reflective of the entire market and not just a single exchange. And they use a volume weighted method of aggregation. And then once that aggregation is performed, we have an on chain value that's representative of that asset across the entire market at that point in time. So as many as you, as many of you already know, our price feeds have really accelerated and helped DeFi to grow into what it is today. And this is why we serve some of the largest DeFi protocols out there.
00:18:50.664 - 00:19:48.194, Speaker B: Our price feeds actually power the majority of DeFi today. So why is it important to have such highly secure and decentralized price data? The reason is basically DeFi attacks. We see them happening all the time across various chains where projects lose literally millions of dollars due to using centralized oracles or not having sufficient market coverage in their pricing data and things like that. And I know Solana is quite young in its Defi journey still, but the bigger and more popular it gets, which is going to happen, we're going to see more DeFi protocols coming online, more getting used, more TVL etcetera. But it's also going to attract attention, more attention from people wanting to exploit these contracts and protocols. So this is why we need to ensure that the data source and data delivery layer of these protocols are 100% bulletproof and hyper secure. So here are the price feeds currently deployed on Devnet here.
00:19:48.194 - 00:20:35.506, Speaker B: We'll go through more of these in a minute. We're looking to add more, and we're going to be kind of looking to deploy price feeds on the Mainnet soon as well. So each node in the network for these oracle networks that deliver data on chain, get data from some of the highest quality data providers and APIs, and they report their answer on chain. And yeah, this is just a slide to show some of the DeFi protocols that we support. These are on other chains predominantly, but as you can see, various DeXs lending and borrowing and synthetic asset protocols. And in terms of existing DeFi adoption, where in the overall space, we're still very early here. So DeFi is less than 5% of old value in crypto at the moment.
00:20:35.506 - 00:21:36.180, Speaker B: We kind of think that over the next few years, that's going to vastly accelerate, and you can probably add another zero to that. So we'll be approaching half of the value in crypto we think will be locked up in various DeFi protocols. Right. So that's why we need to be build hyper reliable systems here. That is a world we expect and what we're building towards, we think there'll be a real influx of people wanting to get crypto assets to access DeFi, especially for things like lending and borrowing, because cash in the form of a stable coin getting, you know, 6% or something is obviously superior to cash in the bank getting, you know, half a percent. So this, this will be accelerated by inflation and the continued systematic failures of these just trust us paper promises that we have today. So, just wanted to summarize on things here to say that, you know, we've shown you how this new model of cryptographic truth is a strictly superior way for us to create, enforce, and execute our financial digital agreements that we have between each other.
00:21:36.180 - 00:22:28.604, Speaker B: And we've explained how by combining chaining price feeds with Solana on chain programs, we enable these hybrid smart contracts to be built on Solana, right, to achieve this. So you now have the knowledge and tools to go on as part of this hackathon to go on and build a game changing DeFi protocol that will go on to change how the financial world works, just like how some of these other tech companies or platforms went on to change the way their world worked. So you know, the advantages you have, the tools you have, the motivation in the form of this hackathon, and the prize bounties. So now it's completely up to you. Where can you go to learn more? So the first place you should go is our docs, which we'll go through in a minute. At Docs Dot chain Dot link we have some specific Solana sections that have been added, including a section on how to consume price feeds on Solana here. So definitely check that out.
00:22:28.604 - 00:23:05.466, Speaker B: If you head to our blog, we've got some really great articles there. A lot of the technical ones are EVM focused. However, we're always adding new stuff and there's actually a lot of good fundamental type articles there as well that discuss network agnostic things such as you know, what is an article, the levels of data aggregation in chain price feeds, or discussing data quality for Defi smart contracts, etcetera. We just actually added a new blog post recently to here as well. To the blog. Definitely recommend checking that out. How to build and deploy a Solana smart contract.
00:23:05.466 - 00:23:51.074, Speaker B: There's an explainer video there as well. We're going to kind of go through some of that in a minute, but definitely recommend checking that out later. And if this talk has inspired you to start building something for your hackathon but you're not sure what you want, there's a really great blog post that we have on our blog called 77 smart contract use cases enabled by Chainlink and there's a great section on defi here. I'll just zoom in a bit. If you need some inspiration on what to build, there's a whole bunch of stuff you can kind of go through here. Stablecoins, algorithmic stablecoins, futures options, synthetic assets, etcetera. So a whole bunch of reading there to kind of get some inspiration if you need.
00:23:51.074 - 00:24:08.074, Speaker B: So definitely recommend checking that out. And yeah, that's kind of it. So if you need help as part of this hackathon, reach out in the Solana discord. We'll kind of keep an eye on things there. We'll kind of love to interact with you, with you there. Definitely reach out in our discord as well. There's a link provided there.
00:24:08.074 - 00:24:49.328, Speaker B: We have some technical channels as well where we'd be happy to help you out. So yeah, just don't be afraid to ask for help if you need anything. Cool. Let's get into the demo now. So the first thing I'm going to do here is I'm at the docs here at Docs chain link. And then if you head to get latest price Solana, this is kind of the entry point here for this demo. So the first thing I'll do is I'll just explain how the price feeds work on the Solana blockchain.
00:24:49.328 - 00:25:39.440, Speaker B: So we have a number of feeds deployed here. So if you go down a little bit more, you're now using data feeds section. You can see there's a Solana data feeds page here. So these are all the feeds that are deployed on the Devnet cluster. And the way they work is there's one program deployed on Devnet and then each of these feeds is an account that kind of uses that program. So for example, if we go to the Solana USD account here, you can kind of see it deployed and that's the way it works. So you interact with these accounts, you get the latest price, etcetera, and then they use the kind of main program as well.
00:25:39.440 - 00:26:27.748, Speaker B: So going back to our getting latest price Solana, we've actually pre created a demo program for you guys to play around with to give you a good idea of how to use price feeds on Solana. So it's in our repository at smart contract kit here. So I'm just going to go to. There we go. So smart contract kit, Chainlink Solana demo and I think it's actually linked in. Yeah, it's actually linked here in the docs too. So what this demo does is it's just a simple demo for deploying a smart contract that uses chaining price feeds and that does like a state change on an account.
00:26:27.748 - 00:27:02.304, Speaker B: And then there's like a simple client written in typescript, I think it is, to then interact with that deployed program on chain. So nothing too complicated here. There's dependencies that you're going to need. Rust, obviously the program is written in Rust Solana Cli obviously, and git here as well. So let's have a bit of a play now. Cool. So hopefully you guys can see that.
00:27:02.304 - 00:28:06.948, Speaker B: So the first thing we're going to do is clone the repository. Awesome. So the repository has two sections, right? We have an on chain rust program here in the source folder. We'll go through that in a minute. And then we have a client for interacting with the on chain program. So in terms of the on chain program here, maybe let's just go through it a little bit. So the first section is just kind of substandard imports type stuff here.
00:28:06.948 - 00:28:38.804, Speaker B: And we're using Bosch for serializing and deserializing parameters being passed to and from the deployed program. And we've defined a couple structs here that we're going to use for our data here. So here's where kind of the, the latest answer kind of gets stored here in this price feed account in here. So we've got some stuff to deal with. Precision and decimals here. That's not too important. So the main protocol here is this process instruction function here, which is the entry point for the program.
00:28:38.804 - 00:29:31.914, Speaker B: And here's where the main logic for the program is. So we take the program id, take some accounts. In this case, it's only going to be one account. And what we're doing is we're first getting the account that we want to interact with, and that gets kind of set here. And all we're doing here is we're calling this get round function, passing in the program id and the account here that shouldn't be there. Sorry. We're calling the get price function here, passing the program id and the feed account.
00:29:31.914 - 00:30:09.344, Speaker B: And this get price actually gets imported via a library. So in our cargo tunnel here, you could see, see, we have a dependency chainlink Solana here. So if I go back to our GitHub here, we can see the Chainlink Solana library here. If you take a look, you can see the get price function is here. So this gets the current price for the price fee account that we're looking at. Right. So that's all kind of that does.
00:30:09.344 - 00:30:51.724, Speaker B: I think there's another couple functions you can use here as well, if you want. But the main use case for price feeds is to get the latest price. However, you can call getround as well, and you can pass in an extra parameter in the form of a timestamp, and you can actually get the price of that price feed at that point in time. So what it does is it iterates over past rounds in the feed and it finds the first value before the timestamp. So I should probably explain rounds, actually. So the way price feeds work is they work in rounds. So a round is basically just literally a round.
00:30:51.724 - 00:31:34.740, Speaker B: However, for it to transition to a new round and say, all right, that was the price of the old round, it's time to start a new one. Generally, there's two ways in which that can happen. There's usually a heartbeat period that can expire, or when the price deviates by more than a certain percent or threshold. In the case of Solana, I think we don't have a deviation because it's so quick. And we have the heartbeat currently set on Devnet to 1 second. So that's completely configurable and it depends on the speed of the underlying blockchain. So in this case it could be set to as fast as Solana kind of produces blocks.
00:31:34.740 - 00:32:07.664, Speaker B: But, you know, for now in the Devnet we've got it to 1 second. Cool. So let's go back to the code. So once we have the price, it kind of just puts it out here. And once that's done, it just stores the price in this price feed account, you know, struct here. So we're storing it and serializing it. So that's kind of it for the, for the on chain program part.
00:32:07.664 - 00:33:10.680, Speaker B: Nothing too complicated there. So let's try and deploy this one now. So the first thing that we need to do is we're going to set our instance to look at the Devnet cluster. Cool. That's done. The next thing we want to do is we're going to create a new key pair to create a new public private key for interacting with programs. So I'm going to create a new folder and I'm going to create a new keygen in this JSON file here.
00:33:10.680 - 00:34:02.722, Speaker B: Oops, typo there. Okay, that's done. So the next thing we need to do is we need to airdrop ourselves some sol tokens or some lan ports into our new generated key pair. So I'm going to do airdrop five because we need some to perform deployments, etcetera. Cool. That's done. So now we're ready to build our program.
00:34:02.722 - 00:35:31.804, Speaker B: So we're going to build it using cargo. Now we'll just wait for that to complete building. Cool. All right, that's done now. So now we can deploy our programs. So we're going to Solana program deploy. Specify the key pair we want to use.
00:35:31.804 - 00:36:08.704, Speaker B: Alright, we'll wait for that to complete. Cool. So that's done. So now we have a program id. You can go and have a look at it on the Devnet Explorer if you want, and then kind of see all the details here. Cool. So that looks good to go now.
00:36:08.704 - 00:36:52.126, Speaker B: So now we've deployed our program to the Devnet and now we need to kind of interact with it. So this is where the client comes in. So let's have a look at the client next. So the client is, like I said, it's a typescript implementation and it uses the Solana web3 web3 JSSDK, the Solana web3 API as well. It basically just provides us a way to interact with a deployed program. So got three files here. Hello world main and utils.
00:36:52.126 - 00:37:31.190, Speaker B: Utils is just a bunch of helper functions. Probably don't need to worry about that too much today. So main TS is our entry point here. And essentially this just executes a bunch of different functions in the hello world file here. So establish connection, payer check program, get price, and then report price. So let's kind of go through that. So the first thing we've got here is established connection.
00:37:31.190 - 00:38:16.624, Speaker B: It's just established establishes a connection with a cluster here. Then we have the establish payer function here. This ensures that there's an account available to pay for the transactions, and if not, I believe it will create one. Yes, that's right. And then check program is called. This basically loads the key pair of the deployed program from the Solana demo key pair JSON file here. And basically what it does is it uses a public key for the key pair to fetch the program account.
00:38:16.624 - 00:39:09.190, Speaker B: If the program doesn't exist, it will stop with an error. If it does exist, it will create a new account with the program, sign that as its owner to kind of store the program state, as you can see down here, and then it sends that transaction. Cool. So once that's done, it calls our get price function. So the get price function, this is the kind of main part of the client, I guess, if you will. So in this case, it sets a public key that we defined earlier and the price feed account. So I think in this case, which one are we using here? The solusd account here.
00:39:09.190 - 00:39:53.564, Speaker B: So in this case, we want to get the latest price from the solusd price feed. So we set those two things and we basically create the instruction and then, you know, send it and wait for a confirmation. So once that's done, the last thing it does is it calls report price here. So all this does once again gets the account info and gets the latest price stored against that account and deserializes that. And once that's done, it just reports it to the screen. So that is it for the client. So the first thing we need to do to get that going is we need to install the dependencies using yarn.
00:39:53.564 - 00:40:52.044, Speaker B: Cool. Once that's done, we can run it with yarn start. Awesome. We're done. So as you can see, that is the current price of SoluSD on the Solana USD price feed running on the Devnet environment, and it's stored against that account, and you can kind of do whatever you want with it in your defi protocol. So there's just a simple demo for using price feeds on Solana once again, you can go through this yourself by going to our docs and going to get the latest price Solana or by going to our blog, blog chain link. And there's a article that was just put out today that kind of goes through this as well.
00:40:52.044 - 00:41:11.394, Speaker B: So that's kind of it. Yeah. Best of luck to everyone. We really look forward to seeing what everyone can build. We can't wait. And definitely if you need help, definitely reach out to us in the discord in the Solana discord or in the chainic discord. Thank you.
00:41:11.394 - 00:41:12.990, Speaker B: I'll have a look.
00:41:13.182 - 00:41:26.834, Speaker A: I think we didn't have any questions there, Harry. Thanks so much for joining today, everyone. This will be uploaded to YouTube, so please check it out. And yeah, really appreciate you being on Harry. Have a great weekend.
00:41:27.374 - 00:41:30.154, Speaker B: Yeah, thanks for having me, guys. You too.
00:41:30.694 - 00:41:32.134, Speaker A: Bye now. Cool.
