00:00:00.320 - 00:00:23.534, Speaker A: Hello, everybody. Thanks for joining our talk. My mic just fell off the back of my pants again like it did yesterday. But anyways, so how many people here know what SVM is? That's what I thought. Anyway, so before we get started, with awe for this talk, I'm gonna go ahead and let the panel sort of introduce themselves and what they've been working on, and then we'll kind of dive into this a little bit more.
00:00:23.694 - 00:00:39.594, Speaker B: Hey, everyone, I'm Jerry. I'm back from the previous talk. My background is I used to work at Solana Labs, and now I am one of the co founders of Ellipsis Labs. Towards the end of my time at Solana, one of the things I worked on was this project called Account Compression, and I'll be talking a bit about that today.
00:00:41.614 - 00:00:42.278, Speaker A: Dima.
00:00:42.366 - 00:00:54.684, Speaker C: Dima. So I'm Dima, and I'm building layer N. Layer N is the first hyper performing L2 on Solana with the goal of scaling Solana to millions of users and finally bring entire financial infrastructure to Solana.
00:00:55.784 - 00:01:08.724, Speaker D: My name is Constantin. I am chief operation officer at Neon Labs. Neon Labs is EVM on Solana, and our platform make it possible for each and every Ethereum Dapp to run on Solana natively.
00:01:09.624 - 00:01:48.610, Speaker A: Thanks, guys. Yeah, so anyways, extending the SVM, which is the Solana virtual machine, is just a way of sort of saying the different ways that parts of Solana can be used. So to make a comparison, Ethereum's virtual machine is what is used to execute smart contracts and compute state on Ethereum blockchain. Solana's virtual machine, which is c level, is a very similar thing. And it's actually one of. It's probably the first blockchain virtual machine outside of EVM that's actually gaining some adoption right now. We are on the big ideas stage.
00:01:48.610 - 00:02:18.846, Speaker A: So we're going to kind of talk about, like, how the Solana virtual machine is being used by a lot of different groups. Obviously, we have Constantine here, who's on the EVM side, so it's a little bit different. But we're just going to talk about all the possibilities with the tech that has been created on Solana. So I am going to have Jerry, who has been around and probably knows this better than anybody, to kind of deeper, deeply describe the Solana virtual machine and what sea level is and sort of like the power of it.
00:02:19.030 - 00:02:48.804, Speaker B: Yeah. Thanks, Chase. So I think a number of developers here might have heard of the term c level before. It is kind of just a broad term that describes the Solana programming model in general. So in Solana, it's a very interesting system where when you want to modify pieces of state, you need to tell the runtime exactly which pieces of state get modified. All of this state gets copied and loaded into some virtual machine. So this is like a mini computer inside your computer that runs on every single one of the validators.
00:02:48.804 - 00:03:16.334, Speaker B: That minicomputer takes in all these pieces of state and performs some sort of operation against them that modifies what happens after the action has been taken. And in addition to that, there's certain constraints that are built into place that only allow certain modifications to be made. The Solana sea level sort of wraps together a lot of the security protections along with the really efficient execution of this programming model.
00:03:17.354 - 00:03:42.132, Speaker A: Cool, thank you. And I did really, I'm going to jump over to Constantine because he is the sort of, he's the man here doing the EVM stuff. And I wanted to kind of mention that he just on a previous stage announced that neon is actually going live next month. So congratulations on that. This is a really big win for Solana. Now lots of solidity developers will be able to come over and see what's going on over here. So that's pretty awesome.
00:03:42.132 - 00:03:52.724, Speaker A: And sort of with that said, I'll jump over to you and talk about sort of like what neon is and what you guys have been up to over the last year as you sort of brought this thing live.
00:03:54.464 - 00:05:06.200, Speaker D: First of all, for us, it's a huge day and it was a long journey for more than a year and a half and a year and a half ago, a bit even more, we decided to unite to ecosystem Solana with huge power and growing ecosystem, different culture and ethereum probably the most popular ecosystem for the developers. Thousands of dapps, thousands of developers sustained ecosystem. And yeah, we decided to unite to this big worlds. And it was a long journey and technical and untechnical to make it possible because from the architectural perspective, Solana and Ethereum is so much different. And more than a year, we and all our engineers were very focused to match solidity and rust technology together. So we are ready the next month, on 12th, in December will be the main net. Actually you can try any Ethereum Dapp on the Devnet already.
00:05:06.200 - 00:05:32.344, Speaker D: And the main idea behind this is kind of fast track, one click experience. You take your Dapp deploy and behind the scene, your dapp will run on Solana natively. It means the Solana validators will verify solidity smart contract without knowing that solidity is inside. And this is what we did, yes.
00:05:32.744 - 00:06:13.168, Speaker A: Just as the other panelists are sort of extending or working with the SVM like neon and what you guys have done, we're sort of like working inside of it or trying to get EVM to work with the SVM, which I'm assuming was quite challenging for you guys. But yeah. So also we have Jerry again here, who came up with this insane idea. I believe he came up with it, and if he didn't, he'll let me know if he's, he's not going to take credit for that if he didn't do it. But account compression is something that's been talked about throughout this event. They're able to. Could you describe how much the account compression has been able to the impact it's going to make?
00:06:13.256 - 00:06:52.114, Speaker B: Yeah. Yeah. So I came up with the idea of account compression with no Gundotra back in New York City earlier this year. I think it was around March or April. And the idea there is essentially we want to minimize the amount of stakeholders state usage that's needed for Solana accounts, because on Solana you pay for every single byte that you use. And when you want to represent hundreds of millions of assets, it's not really efficient anymore to use the accounts model. So what we did was we used a Merkle tree to store all of the state, and we stored the hash of the root node as well as some additional metadata to allow for concurrency.
00:06:52.114 - 00:07:30.774, Speaker B: The overall impact here is that we, when you utilize a countercression to store NFT assets, you can get upwards to a 10,000 time improvement on the cost of storing the state on chain. The flip side though, is that now you need to manage a database of all of the leaf nodes of this merkle tree off chain. So it's an interesting paradigm where now your systems look very much like web, two systems where you store the data in off chain SQL tables. But what you have that you never had before is you can take the data in that SQL table, you can apply some special function to it, and now you can verify that the on chain state matches one to one.
00:07:31.394 - 00:07:38.202, Speaker A: And so what would be the sort of relationship here to the Solana virtual machine as it relates to account compression?
00:07:38.258 - 00:08:09.304, Speaker B: Yeah, that's a great question. So you utilize the Solana virtual machine to update the state of this merkle hash. You still need to transact with the Solana blockchain. It still runs on Solana Mainnet. But the difference here is that what you have on chain, you don't utilize the accounts model at all or you don't really utilize the account to look up data. All the data is looked up in a web two server, but what web3 has enabled here is the ability to validate the data in that web two server. Basically, you have a lot more transparency and making sure that things do not get censored or removed.
00:08:09.924 - 00:08:33.252, Speaker A: Cool. Yes. And dima, so you guys are working on a L2 on Solana, something that I didn't know if I would ever see in my lifetime. But you are. And I guess the question is, you saw the SVM. Why did you choose to use the Solana virtual machine for your l two? And sort of, how was that experience for you? I guess.
00:08:33.388 - 00:09:20.214, Speaker C: Yeah, absolutely. I mean, we saw that SPM is incredibly powerful when it comes to running nodes and running decentralized network. And our question was like, can we take it to a step further and finally enable more applications to be built on top of it and more performant ones, and enable millions of users to use. And actually, we're not just taking SVM and copy pasting it and running it on a server, but you're actually looking into the code. How can we scale it even further and enable better smart contracts to be run with low latency and insane throughput 100 times faster than Solana? And SVM just made a ton of sense because of its modular architecture and a lot of the security checks that were added. Makes it really easy and convenient to use for decentralized network.
00:09:20.554 - 00:09:30.654, Speaker A: Yes. So we were having a conversation in the back, though, and you mentioned that SVM needs ZK rollups, I believe. Is that how you described it to me?
00:09:31.434 - 00:10:10.844, Speaker C: Not totally. So we are actually doing optimistic roll ups, but our goal is to maintain optimistic execution, just to be always as performant as possible. But what we are thinking when it comes to zero knowledge, it's a great tool to use and even boost even further the security of optimistic roll ups. Eventually, next year after our mainnet launch, we plan to integrate ZK fraud pros, meaning that we'll maintain optimistic execution, but we will be able to use zero knowledge probes to enable verification of the state if something goes wrong. Essentially, we are leveraging the max performance while still relying on on very secure mechanisms to validate that the state updates are as valid as possible.
00:10:11.224 - 00:10:31.056, Speaker A: Cool and Constantine. So again, I know that you weren't necessarily working or extending the SVM, but what was the choice for Solana specifically to be able to build this in here? I know it was one of the more and only high performance blockchains at the time. And what was that experience actually, like.
00:10:31.160 - 00:10:35.728, Speaker D: In doing that, you mean to build neon integration with.
00:10:35.816 - 00:10:36.964, Speaker A: Yes, exactly.
00:10:37.424 - 00:11:23.652, Speaker D: Yes. I mentioned two different architectures, two different standards, ethereum pretty large with resources, Solana pretty deterministic and very conservative of using each and every byte of storage. So yeah, it was a huge challenge to take ethereum transaction, to transform it to Solana standards, and to work with the Solana itself. A couple words about neon EVM. So we actually created EVM smart contract on Solana based in rest almost. We took Sputnik and did a lot of work and a lot of changes. Optimizations.
00:11:23.652 - 00:11:53.304, Speaker D: Some of the optimization we will still implement to make it more faster and to be close to the finality of Solana. But yes, the challenge was to combine these big worlds, and we work very intensively with your team, and we have a slack and back and forth. We need small storage. Okay, just so it was a long journey we did together with your team.
00:11:53.764 - 00:12:02.344, Speaker A: So one quick question is actually, how fast is neon going to be on Solana when it's rolled out next month?
00:12:03.044 - 00:12:12.508, Speaker D: It depends on a number of things, but 2000 of TPS, this is what you can expect already from us.
00:12:12.636 - 00:12:13.396, Speaker A: Awesome.
00:12:13.580 - 00:12:14.904, Speaker D: And it's not the limit.
00:12:16.484 - 00:12:36.836, Speaker A: Yeah. So, shifting gears a bit again, having some conversations in the back, I guess one big question is, what were the challenges when you're working with the Solana virtual machine outside of its normal use case? Again, account compression for Jerry and then also building an l, two for DEMA.
00:12:37.020 - 00:13:02.136, Speaker B: Yeah, I can start here. I think that building account compression was very much like building any other Solana program, and that it had many of the same challenges. Solana's account model is not super intuitive to use because you need to do a lot of things like bytepacking. You're working with pretty low level systems. You need to pass in every single piece of state to the transaction. So that kind of management step has to be really wrangled properly. So that's certainly quite tricky.
00:13:02.136 - 00:13:52.404, Speaker B: But what the SVN actually offers you is this ability to not have to think about a lot of the more difficult problems in programming. Some of the most challenging things that most programmers have to think about are things like thread management, concurrency, synchronization, also like access and security. You do need to think about access and security in the c level context, but a lot of the other problems are sort of just given to you for free. You can just operate in this system that is purely single threaded, and you don't have to worry about any of the more challenging monsters that are hiding in the background. So it is certainly challenging to get a sense of what the interface is. It's certainly challenging to know the constraints of the system and operating under those constraints. But the trade off there is that you don't have to think about some of the really, really difficult problems that the Solana core engineers ended up solving for us.
00:13:52.824 - 00:14:02.104, Speaker A: Yeah, and just like to follow up really quick with you, Jerry, as well. What could actually, since you've dealt with it so much, what could actually be improved in the Solana virtual machine?
00:14:02.144 - 00:14:45.964, Speaker B: Yeah, there are a couple of things. I think one thing is that, and this is going to be a little bit technical, but the Solana virtual machine requires you to copy all pieces of state every single time you begin some sort of instruction in a program, and this includes when you make calls to other programs within programs. So this excessive moving around of bytes is quite inefficient. And in reality, there could be a far more, like a far more efficient way to do this computation wise, if you just kind of loaded up a single virtual machine with all the programs and separated things, like very, very, very carefully. Obviously, the trade off here is that this becomes quite difficult to implement. There are some security implications that get introduced that might not be the greatest to work with. And when you have these isolated systems, it's easy to say that you have certain guarantees.
00:14:45.964 - 00:15:00.784, Speaker B: It might not be the most efficient thing in the world the way that it's currently implemented. But I think that you clearly want to make a trade off here between security and performance sometimes. Ultimately, if you want to scale, this is almost definitely one of the first things I would look into.
00:15:01.314 - 00:15:20.874, Speaker A: Cool. Pass the same to you, Dima. What are the challenges and what could be improved, and especially under the context of building an l two on Solana. I know you also had mentioned that you guys did some different things with c level under the hood yourself, so it's not just a direct sort of fork. You actually made some of your own improvements or modifications.
00:15:21.034 - 00:15:56.804, Speaker C: Yeah, totally. So, as adult, too, we no longer need to worry about distributed network, because we are relying already on Solana validators. For that matter, for us, the key question is, how can we push execution to its limits? And I think a few things that we take into account, that Solana was designed to maintain the payments networks, so it's all peer to peer transfers. We are thinking more about smart contracts. So we are doing a lot of optimizations on that level. And how can we match the execution of any web two app in existence? And that's a question that we are asking ourselves. For example, one area where we definitely worked on improving is computational limits.
00:15:56.804 - 00:16:24.904, Speaker C: Every transaction on Solana has a computational limit, which is really hard to deal with when you're building your really compute heavy applications. And that's where we are working on improving, unlocking more computational units for applications who require that when it comes to finance options, et cetera, or even gaming, for that matter, as well as unlocking more potential for higher transactional throughput for smart contracts, whether it comes to games or order books.
00:16:25.654 - 00:17:10.786, Speaker A: Cool. Yeah, so we've gotten pretty technical so far, and, like, this is the big idea stage, and we're sort of in the weeds a bit, I guess, like, one question that I sort of want to pose to this group, like, who knows? The Solana virtual machine is like, we've kind of discussed. It's being used in different ways. Actually, somebody recently is using the Solana virtual machine in the cosmos ecosystem. They're porting over this sea level technology into their own ecosystems because of the architecture and because of possibility it brings. So a big question I want to pose to the group is, like, what possibilities does c level sort of present, or the Solana virtual machine present outside of what's been explored already? Obviously, Jerry's using it for account compression. We have, like, we're seeing l two s now.
00:17:10.786 - 00:17:20.103, Speaker A: There's other chains that are bringing this into this technologies. Is there anything that hasn't been really talked about that we could see in the future that's being used for.
00:17:21.683 - 00:18:05.904, Speaker B: I do think that the app chain idea is quite an interesting one. Mainly that now we have a bunch of code that's readily available and should be relatively seamless to port over to a different chain Solana as a monolithic l one. You have to share block space with a lot of other applications, and sometimes that's not a super desirable feature. Oftentimes it is. You trade off this idea of composability for bandwidth. So for the people who are really interested in not having to share bandwidth with other people, having some sort of app chain that utilizes the Solana virtual machine, where you can execute your smart contract as you would normally, but without having to share the network, could be very valuable. So I see it as kind of like you have this new programming paradigm.
00:18:05.904 - 00:18:13.024, Speaker B: It's like an operating system. You can have the operating system run on multiple different devices, Solana L1 being one of those devices.
00:18:15.174 - 00:18:15.702, Speaker A: Actually.
00:18:15.798 - 00:19:16.994, Speaker C: Yeah, that's really good that you mentioned that, because that's exactly how we are thinking as well, is that we are starting with one layer and instance for all L2 applications. But eventually what we realize is that financial applications, they don't really want to fight for bandwidth with gaming apps, because you can imagine that there will be hundreds of thousands of players playing some web3 game, and they will be fighting for bandwidth to place an order in exchange for some market maker. And for that matter, we do see that eventually it will go towards multiple layer, two instances on Solana, and each one of them leveraging SVM in their own ways and be making some different changes depending on what kind of applications they're doing. What's more important for them in terms of tags that they're using? And I do see this will be the next generation of applications coming up next year or year after. I think it's already exciting to see even first generation of Solana apps have tried so many new things which are absolutely impossible on any other chain. Just order books on chain is wild ideas. That was not possible until now.
00:19:17.454 - 00:19:35.128, Speaker A: Yeah, and also we were supposed to have somebody from Pith network here, but Pith is actually using SVM for their Oracle price feeds as well. Jerry and I were talking about this before the stage. I don't know if he has much more detail about how that's actually working, but it would be nice to just chat about it for a moment.
00:19:35.216 - 00:20:28.340, Speaker B: Yeah, I'm definitely not the expert on this, but to my knowledge, one thing that you can do, and what I believe PIP network is doing, is essentially spinning up a local Solana cluster with a number of nodes, maybe even just one node, and publishing prices there, and then using that to distribute across multiple other chains. So I guess the idea here is that because this execution environment is somewhat portable, you could potentially use it for a number of different things. You can imagine that a Solana application doesn't necessarily have to run on the blockchain. You could certainly have a web two server that runs a Solana validator and uses it for its state storage, and really just treat it as a single RPC node in a single isolated network. You obviously lose a lot of the actual powerful features of blockchain, namely the decentralization, namely the trustlessness. But fundamentally, the way that you can think about the sea level in isolation is that it's just like an execution environment. It's really nothing more than that.
00:20:28.340 - 00:20:40.784, Speaker B: And so if we believe that this piece of this particular execution environment has some merit to it and there's ways to reuse it, I think that it's really interesting to see teams in the ecosystem find ways to play around with it.
00:20:41.284 - 00:20:57.464, Speaker A: Cool. And Constantine, I guess, did you have any thoughts, obviously, you've been working on the EVM, bringing that to Solana. Did you have any sort of insights or thoughts during this conversation that ideas that could happen outside of what you guys have already been working on with neon?
00:20:58.404 - 00:20:59.540, Speaker D: Come again with the question.
00:20:59.652 - 00:21:10.428, Speaker A: Just basically you've ported over Evm into SVM. Just generally, if you had any sort of ideas on ways to improve what you had done.
00:21:10.476 - 00:22:00.674, Speaker D: Currently we have a big list of improvements. We actually discussed about this list from the EVM perspective, I can share the challenges with before. The main idea for the Ethereum Dapps, not only to use the power of Solana, I mean, the fast transaction chip, gas fee and everything, but the main idea is the interoperability with the Solana Dapps. And this is the big, big challenge. Our team work on it, how to make it possible that Ethereum Dapps in Solana can call Salana program. And this is the next thing for us and for the whole actually industry thing. And who knows? Maybe.
00:22:00.674 - 00:22:10.514, Speaker D: I mean, yeah, the goal is that each and every dapp will run natively on Solana, but the next stage for us is vice versa. Also.
00:22:12.274 - 00:22:51.064, Speaker A: Cool. Yeah. And in general, like, the whole idea of this talk was to sort of explore the different things that the Solana virtual machine is capable of. Like, in the beginning, it was like, this is one of the core innovations of Solana, along with a long list of like seven others as well, that all kind of work together to make Solana as fast and performant as it is right now. And like, this big idea talk was to show that, like, we, we have l two s coming here, we have other use cases for the virtual machine. These are composable pieces of technology inside of Solana that other people are actually seeing value for. And there's probably going to be a ton more use cases for this in the future.
00:22:51.064 - 00:23:03.874, Speaker A: And unfortunately, pith is not here to join us, who was going to talk about some really cool stuff with us. So we're going to give you guys some extra break time today, and we're going to get out of here. Thanks, everybody.
