00:00:03.760 - 00:00:33.064, Speaker A: All right. All right. Well, thanks, everybody, for taking the time to come here. We'll try to make this fun and entertaining. We don't want to make it dry, you know, auditing, something that people in the community don't really put too much attention to, but it's pinnacle to the TVL and to the security of the landscape. We need to make sure that we're writing unit tests, that we're using formal verification and fuzzing tools to really secure our programs. And these are the folks that build those tools and work on one on one manual audits.
00:00:33.064 - 00:00:35.420, Speaker A: Want to introduce yourself, Adam?
00:00:35.452 - 00:00:53.864, Speaker B: Yeah, hi, I'm Adam. I'm Solana auditor and I'm from Eki blockchain. So it looks like we provide a new blockchain or something, but not. We are a security company. We're doing audits and developing open source tools. So I'm happy to be here.
00:00:55.344 - 00:01:11.844, Speaker C: Hi, everyone. Super happy to be here. My third breakpoint. My third panel at breakpoint, actually. So I'm Peter. I'm the director of security for enterprise. And we at Halbourne do all sorts of security across your entire technology stack.
00:01:12.984 - 00:01:20.044, Speaker D: Hey, I'm Robert. I'm the founder of Ottersec. We do a lot of Solana security and are really excited about helping protocols stay secure.
00:01:21.964 - 00:01:30.944, Speaker E: Hi, I'm also Robert from neodymium, and I'm a security researcher, mostly doing Solana audits.
00:01:32.244 - 00:01:49.364, Speaker F: Hey, everybody, my name is Jack, also known as vibes. I'm from Sec three, and unlike most of these big brains here, I work more on the bd side for SEC three. Our company provides smart contract audits for a lot of projects on Solana, as well as other ecosystems. And we also build automated security tools. Really happy to be here.
00:01:49.524 - 00:01:49.884, Speaker E: Awesome.
00:01:49.924 - 00:02:02.544, Speaker A: Cool. Yeah, thanks for taking the time. All right, Adam, first question, why does auditing matter? Why can't security tools be the only thing that we use in the ecosystem to secure our programs?
00:02:04.684 - 00:02:43.064, Speaker B: Good question. So, I mean, we believe that you can use whatever tools, right? At the end of the day, it's really good to have another check. So even the tools you need to know how to use it, when to use it, then the tools are maybe tailored for a specific use case. So it's important to have someone have another look on your code to basically verify that everything that you have done works correctly.
00:02:43.164 - 00:02:43.440, Speaker D: Yeah.
00:02:43.472 - 00:02:47.080, Speaker B: So that's my first thought.
00:02:47.192 - 00:02:56.444, Speaker A: Makes sense, Peter, second question, what tools exist to actually help auditors audit contracts?
00:02:58.104 - 00:04:27.944, Speaker C: So there's a couple, actually. So your tool sets should begin at a really good linter so fortunately, even if you're using open source tools, there are still some that are pretty powerful. If they're good for rust programmers, they're good for Solana developers as well. So the second tool that might not be too obvious is your compiler. That can be quite frustrating at times, but all those little yellow and red messages are there for a reason. It makes sense to pay attention to what the compiler is saying, because there's a pretty good chance it's saving you from something nasty further down the road if you choose to ignore it. And once we are kind of sure that at least syntactically speaking, our languages, our code is correct, we have, thanks to some of the people that sit to my left, we have several tools that can help you at least do a preliminary scan of your programs that you can do yourself and act accordingly based on the output.
00:04:28.764 - 00:04:30.132, Speaker G: Yeah, it makes a lot of sense.
00:04:30.228 - 00:04:44.992, Speaker A: Robert. One, Robert won. So how do devs actually work with auditors to get their programs audited? Right. Like, what do they need to prepare to actually work with you guys and make sure that you can get them secure?
00:04:45.168 - 00:05:20.414, Speaker D: Yeah, I think one really big thing that people underestimate is how much time it takes to deploy a program. Right? I think people think you write your program and you deploy it, you pass it off to an auditor, they spend two, three weeks and they're done. That's it to Mainnet. I think one thing that really stands out between products that we work with that are newer versus products that are more mature is just the amount of time they're willing to put into the program. So let's say you finish the code. Really what you want is you want another week or two of unit tests or integration tests before you even pass it to the auditor. You probably want to make sure that the code is as secure as you can get it.
00:05:20.414 - 00:05:59.046, Speaker D: I think auditors don't catch everything. I think people on this panel hopefully agree with me. I think the correct way to think about auditing is as a pass, and they hopefully will find most of the bugs. But if your code is really, really buggy, it's going to be impossible for auditors to find everything. And I think doing your best to write tests or to deploy on Testnet, or have users try it out, really goes a long way to making sure that your product, after the auditor is finished, is secure. I think really the correct way to think about this interaction with the auditor is like a team effort. It's not a one way communication where you just throw your code base at an auditor.
00:05:59.046 - 00:06:04.794, Speaker D: It's a partnership where you work with your auditor to hopefully try to get your code base as secure as possible.
00:06:05.254 - 00:06:06.462, Speaker G: Yeah, makes a lot of sense.
00:06:06.558 - 00:06:16.114, Speaker A: Robert, too, what do devs not do enough? What do you wish devs did before they came to you? Are they not writing unit tests? Are they not writing their assumptions down? What are they not doing?
00:06:17.474 - 00:07:30.542, Speaker E: I think devs should concentrate on writing very good code, first of all, which means very well documented code and very understandable code. Oftentimes, devs and Solana, because of the nature of rust, will write code that's a bit complicated, maybe hard to read, even though it's perfectly fine. But I think it's oftentimes maybe a better idea to write code that's easy to read, even though if it's not the most elegant way to do something. Secondly, I think what's important is to use git, for example, in a very strict manner so that auditors can, for example, after a fix has happened, or if you want to audit a change since maybe last audit, that this is as easy as possible for the auditor and makes actually the code more understandable, like what changed and why was this change done, for example?
00:07:30.678 - 00:07:31.638, Speaker G: Yeah, that makes a lot of sense.
00:07:31.686 - 00:07:47.442, Speaker A: And Jack, I'll ask you a process oriented question for the BD folks in the room. How do you get people in the door? We need more devs to secure their contracts. We need them to use the tools. But how do you actually incentivize them to get on board, get in the door, and have your folks actually go and audit their programs?
00:07:47.578 - 00:07:48.266, Speaker D: Yeah, for sure.
00:07:48.330 - 00:09:02.873, Speaker F: I think the biggest hurdle right now is a lot of times it's education, a lot of times it's also funding. Right. I think most projects these days do understand the importance of getting a security audit, kind of like on a conceptual level, but it might be difficult for them to actually come up with the funding required to actually get there before they have product market fit, before they kind of figure out where the product fit in the ecosystem. That's why for us at Sec. Three, we try to lower the barrier to entry by providing different kind of security coverage with automated tools with the launch audit, so that at least they get some kind of coverage if they're unable to do so with the full launch audit. Obviously, I don't think any of these tools is ever going to be able to replace human audits, at least not right now, but it'll at least help you get the coverage you need for lower hanging fruits, things that you should really be looking for, but you might not be aware of, because you're not just security minded off the top of your head. So having these educational panels, talking to these guys, having a good ecosystem of people that are insecurity, constantly telling people this is important, you should get serious about this.
00:09:02.873 - 00:09:05.053, Speaker F: I think that's what's really important.
00:09:05.193 - 00:09:06.302, Speaker G: Yeah, that makes a lot of sense.
00:09:06.398 - 00:09:20.834, Speaker A: I guess this is the question for everybody. Most on the technical side, how do auditors actually do their job? A lot of tools exist. Some auditors use fuzzers within their workflow. But how do they actually do the program? How do they actually secure the programs?
00:09:23.334 - 00:10:14.704, Speaker B: Tommy, question. Yeah, so, you know, so when we are auditing, we are actually, or we are, let's say, fans of manual audits, because having the experience, this is the best way how you can discover bugs. But on the other hand, we think also that it's important to have tools. You mentioned fuzzers, so this is exactly also one thing that we try to do. So we are currently developing an open source safe fuzzing framework also for developers to help them use fuzzers. Because right now, fuzzers, I think Robert had a very good presentation in the morning that it's pretty difficult to set up. It's also difficult to write a test.
00:10:14.704 - 00:10:43.664, Speaker B: So we are trying to make it more accessible for the developers. So yeah, having fast tests and test cases, very high coverage is important. And this is what we try to also, let's say, do during our audit. So we do the manual review and if we have some, let's say, suspicions, then we can write the fastest, for example.
00:10:43.784 - 00:10:44.800, Speaker G: Yeah, that makes sense.
00:10:44.912 - 00:10:56.694, Speaker A: I'm going to switch it up to a little more of a fun topic. Peter, what's the favorite bug you've ever caught? Sorry, can I get what's the favorite, what's the most interesting bug you've ever found in somebody's program?
00:10:57.314 - 00:12:08.966, Speaker C: Oh, well, it's both about quantity and quality of the bug. So you have all your regular protocol drainers that are due to missing signage, check or mishandling of uncle remaining accounts. But to be honest, I have five favorite types of bugs. And those bugs are common Solana vulnerabilities. Because you might think that educating over and over and over since the beginning of Solana, I think all of us have done it at some point. And here we are almost three years later, and those bugs are in every third project still. And so the devs must really love them if they keep putting them in their code.
00:12:08.966 - 00:12:13.594, Speaker C: And so I think they might be right. And so those are my favorite books.
00:12:14.174 - 00:12:15.278, Speaker G: Yeah. Yeah, I would say a lot of.
00:12:15.286 - 00:12:37.914, Speaker A: People don't sanitize their inputs, and that's a big thing people really need to focus on. And Robert, one, I guess on that point, a lot of different verticals have very commonalities in the bugs that you find defi deep in nfts, what's, at least in the DeFi world, a type of bug that usually comes up a lot.
00:12:38.494 - 00:13:07.622, Speaker D: I think in 2022 we saw a lot of account check bugs. For example, wormhole, I think was an example of a failed account check. I think if you look at the, probably for the first half of 2022, at least, most of the exploits, I would say, are related to some sort of failed account check. You failed to compare the pub key to something that you should have compared it to. You failed to check the owner. This allowed people to create fake accounts and spoof data and then steal all your money. I think this is the sort of thing that really shouldn't be a salve bug.
00:13:07.622 - 00:13:48.674, Speaker D: This is the sort of thing that hopefully would have been caught through frameworks like anchor, if people use it properly. And I think what we saw in the later half of 2022 and 2023 is that it was caught. And if you look at 2023, a lot of these bugs were more design related and more specific to a particular protocol type. And I think that's really promising for Solana security because it means that hopefully there's no more, I call them dumb bugs, which is a little mean, but there's no more repetitive bugs that everyone's making the same mistakes. And instead we can focus on as auditors focus on stopping more interesting, unique and protocol specific vulnerabilities that are probably generally harder to find and harder to exploit overall.
00:13:48.974 - 00:13:50.214, Speaker G: Yeah, that makes a lot of sense.
00:13:50.334 - 00:14:05.054, Speaker A: Robert, too. So anchor, maybe 95% of the programs deployed on chain are anchor programs. Are there any interesting tools that are built around anchor fuzzing formula verification that you can't actually get from other chains?
00:14:06.554 - 00:14:07.274, Speaker E: Sorry.
00:14:07.434 - 00:14:28.094, Speaker A: I would say in terms of anchor, a majority of the programs launched on Solana are anchor programs today, usually for fuzzing and for modification. It's really rust based, but not anchor flavored rust based. When it comes to the types of tools that you build for anchor, what specific things can you do to actually secure an anchor program?
00:14:29.734 - 00:15:35.984, Speaker E: I'm not sure if any tools, really, but I think anchor provides a lot of very nice ways of writing the code where you can put in security from the right, from the beginning, essentially. And if you use anchor correctly, for example, for every context instruction, essentially you can put a guard in front of the call and you can control how the function is called. And you can very nicely have everything in one place. And at the same time you can, for example, use other features where you maybe have a set of invariants that you call after every instruction to make sure that certain things are always true. And yeah, I think if you use these tools that anchor gives you, then I think that's already sufficient. You don't need anything extra.
00:15:36.284 - 00:15:37.692, Speaker G: Yeah, it makes a lot of sense.
00:15:37.828 - 00:15:53.380, Speaker A: And Jack, so there's pre program launch and post program launch. How do you help the founders that you work with once they're launched and once our programs are live, and once they need continuous monitoring and help when things are live and they have high TVL?
00:15:53.532 - 00:15:59.020, Speaker F: Yeah, so our approach is kind of to, before the launch is kind of where you want to find the bugs.
00:15:59.052 - 00:15:59.244, Speaker E: Right.
00:15:59.284 - 00:16:48.370, Speaker F: And during the iterative process, you know, making sure that you find the edge cases. But post launch, there's always uncertainties. You never know for sure 100% that your programs are going to be secure. So what we do is we have a product called Watchtower that allows you to monitor smart contracts or wallet addresses in real time. This way that you can actually keep an eye out on these smart contracts on the way that people interact with your smart contract. We've been implementing machine learning in large language models in order to look at the historical transactions of these smart contracts and build out what we like to call a normal pattern behavior. So anytime that someone actually interacts with your smart contract in a different way, potentially malicious way, at least you get, you know, a notification in your discord, SMS, wherever you want to get your messages, so that you can actually get an alert when these interactions are happening.
00:16:48.370 - 00:17:01.178, Speaker F: I think that's a really important part of protocol's arsenal in protecting against potentially malicious attacks, because you just never know how people are going to start attacking your protocol.
00:17:01.266 - 00:17:02.386, Speaker G: Yeah, that makes a lot of sense.
00:17:02.490 - 00:17:20.143, Speaker A: So on that point, machine learning, that's a huge, huge thing. Usually people call it AI, air quotes. Pretty important. But I'm curious to the entire crowd, do you think there's a place in the Solana security ecosystem to use llms for an auditor workflow?
00:17:22.123 - 00:17:58.084, Speaker B: Yeah, so I think for sure there is a place. Lately, it's really kind of a hype, right? Because machine learning has been around for 20 years, or maybe even more. Maybe now there is much more data. Everything is faster, so it's easier to exploit this concept. But the essential problems are exactly the same. So need a lot of data to train your models and so on. So these are all the challenges that are still present.
00:17:58.084 - 00:18:27.064, Speaker B: So I think for sure there is a use case for machine learning in Solana. But yeah, you need good data. Also, if you maybe the runtime will change or something like that, then you probably need the new training set for your models and so on. So there are different challenges that must be overcome. The place is definitely there.
00:18:30.084 - 00:18:30.444, Speaker E: Yeah.
00:18:30.484 - 00:18:32.004, Speaker B: Let's see what the future brings.
00:18:32.084 - 00:18:32.804, Speaker G: Yeah, it makes a lot of sense.
00:18:32.844 - 00:18:38.424, Speaker A: I actually want to ask every one of you that question. So Peter, what are your thoughts on AI and ML in the security ecosystem?
00:18:38.884 - 00:19:49.968, Speaker C: So one thing to keep in mind is to remember the difference between AI and generative AI. Because what most, at least most people associate now with artificial intelligence is JA GPT helping you with your homework. So it, but even generative and AI has its place. But currently I think it's good as an introductory tool. In my experience, it performs decently in explaining the foundations. But every single information you're being given, that's something you're better off verifying, because again, it's security. Another thing to keep in mind, especially when using open source AI tools, is you're better off checking if the repository that you're auditing now is private or public.
00:19:49.968 - 00:20:31.624, Speaker C: Cause putting private data covered under millions of NDAs into tools used by millions of people now, you might be subconsciously creating a new vulnerability that someone on the other side of the world is going to exploit at some point. AI as it's now, it has its use, but there's a million caveats that you need to keep in mind and so just use it responsibly.
00:20:31.744 - 00:20:35.320, Speaker A: Yeah, right. I feel like you have a hot take, Robert. I want to hear it.
00:20:35.472 - 00:20:54.364, Speaker D: Yeah, I mean, when I think of auto sec, I really think of a vertically integrated AI company. And we really use AI in every part of our workflows, from generating the blog post images to writing the reports. The only thing that we haven't really figured out how to use AI for is doing the audits. But we're going to get there eventually.
00:20:54.804 - 00:20:55.372, Speaker G: Yeah.
00:20:55.468 - 00:21:00.344, Speaker A: All the ops, none of the actual auditing work is my take from that. Do you have any thoughts on that?
00:21:00.884 - 00:21:14.676, Speaker E: Yeah, I think the day that AI can understand the rust borrow checker will be the day that we have proven that AGI exists. So, yeah, I think it's going to be a long time until then.
00:21:14.820 - 00:21:15.596, Speaker G: Yeah, that makes a lot of sense.
00:21:15.620 - 00:21:51.904, Speaker A: And we started with you on the AI, so I think we'll go to the group on the next question. So today, really, you don't know when you're interacting with a program if it's secure or if it's been audited before. Right. Today there's tools like blowfish that can do some sort of transaction simulation. A lot of wallets do transaction simulation, but today, if you look at a program, who knows if it's safe or not? So what tools can be built for the everyday user to actually interact with the program and know that it's safe to use? Robert, I'll start with you because you guys at neodymium have security TXT, so I want to start off with that.
00:21:53.004 - 00:22:56.014, Speaker E: So first of all, the first line was making sure that the contract on chain is the contract that you think it is. So there used to be the verified builds on Solana where you can check that some kind of code compiles to exactly this. And yeah, this has kind of disappeared because it was kind of broken. And we should definitely reintroduce this because I think it's a crucial feature because Solana compiles two byte code that no one can really understand as a user. So you really have to make sure that there's a way to make sure that code compiles to what's on chain. And other than that, developers can use Riverguard, for example, to find vulnerabilities in code. But it's not something that users will see externally, if that's what you were asking about.
00:22:57.234 - 00:22:58.186, Speaker G: Yeah, makes a lot of sense.
00:22:58.250 - 00:23:00.254, Speaker A: Any other thoughts or comments there?
00:23:01.714 - 00:23:34.272, Speaker D: Yeah, I guess one thing that we're doing, and I don't think this is public yet, but we're trying to bring back verified builds, which I think would be really cool, sort of just as a public good for people. I think better explorer integration if you have public goods. I think the end state really here is you have the verified source build integrated directly with the Explorer. So if you're a user, you can check out the source code, you can find an audit report, hopefully. And all of this is directly on the explorer itself, and users have it right there for them. I think we're a little bit away from that, but hopefully we can eventually get there.
00:23:34.468 - 00:23:35.496, Speaker G: Yeah, makes a lot of sense.
00:23:35.560 - 00:23:45.284, Speaker A: Anybody else? All right, we're at three minutes and 30 seconds. Hot takes. What hot takes do you have that you don't think anybody else agrees with?
00:23:51.784 - 00:24:28.528, Speaker B: Yeah, so I would say, you know, for example, like the fuzzing, you know, there is a lot of people there. They think like, okay, it's super complicated, it's not very useful and so on. So we do not agree with that because we think it can be somehow simplified and generalized for at least anchor programs. So, yeah, that's why we are building the fuzzer framework. So we have two minutes left. So I will.
00:24:28.616 - 00:24:30.204, Speaker A: Yeah, any takes.
00:24:30.904 - 00:25:39.872, Speaker C: So, one thing, I guess we always try and, you know, stress with how we work with our clients is communication, because you can't even recollect how many times you hear, it's not a bug, it's a feature. But the opposite is also true. It's not a feature, it's a bug. As an auditor, you might be a ten x engineer, but you only have so much time to understand the code and to get into the specifics, whereas the project might have been developed by 15 people with multiple phds. And so just claiming that you understand their product better is a bit of an. It's a bold take. So I guess my advice is just make no assumptions at all, and if you have to make them, just double check, triple check, quadruple check with everybody that you can, because there's a lot of vulnerabilities in the assumptions that you make.
00:25:40.048 - 00:25:41.124, Speaker A: Yeah, makes sense.
00:25:41.984 - 00:26:35.054, Speaker D: This might be a little bit hot, but I talked about this a little before. I think Solana foundation should play a more active role in ensuring ecosystem security. Because I think whenever stuff gets hacked, it's not just the project that gets hurt, I think it's the entire ecosystem. Whenever there's news and people see yet another slanted protocol gets hacked, I feel like the entire perception of the security or the usability of Solana Defi goes down. And I think the ecosystem really, I think, takes the responsibility and should play a more active role in forcing people to get audits, sponsoring audits, potentially working with projects to, for example, properly sunset their protocols. And I think there's a lot of things that foundation can do to help people, especially newer protocols, who aren't really as familiar with how to properly navigate the security lifestyle, but to help them get familiar and actually do it safely.
00:26:35.714 - 00:26:36.394, Speaker A: We'll talk later.
00:26:36.434 - 00:26:37.194, Speaker G: We'll talk later.
00:26:37.314 - 00:26:38.654, Speaker A: All right. Your turn.
00:26:40.434 - 00:26:45.614, Speaker E: Yeah, I think every contract should be open source. That's my.
00:26:47.074 - 00:26:50.682, Speaker A: And publish your idls. Make sure that stuff's all alive.
00:26:50.858 - 00:26:51.842, Speaker E: Any outtakes?
00:26:52.018 - 00:27:25.598, Speaker F: I think I'm going to riff off Robert's idea. I do think that it's important for not just the Solana foundation, but also the community to really get involved when it becomes vocal about security. I think a lot of users just start using Dapps. They don't question whether or not they're secure. They don't ask whether it's been audited. They don't do any sort of check before they just start depositing 50 grand into a smart contract. As users, as retail users or fellow builders in this space, we have to take responsibility as well to kind of demand more from our fellow developers.
00:27:25.598 - 00:27:29.366, Speaker F: Say, hey, are you guys really serious about thinking about these kinds of things?
00:27:29.510 - 00:27:29.838, Speaker E: Yeah.
00:27:29.886 - 00:27:30.830, Speaker G: Makes a lot of sense.
00:27:30.982 - 00:27:44.804, Speaker A: All right, we're at time. I hope you guys all thought this was an interesting and insightful session. You don't really have these people in a room too often, right? We only see them on Zoom, on Telegram. So it's great to get these insights from the people that are boots on the ground now, securing these contracts.
