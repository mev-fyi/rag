00:00:00.520 - 00:00:01.974, Speaker A: Welcome back to this week's Changelog.
00:00:02.054 - 00:00:04.390, Speaker B: I'm Joe here with Jacob and Colin.
00:00:04.502 - 00:00:08.334, Speaker A: We're going to break down last week's changes in Solana. Right.
00:00:08.374 - 00:00:42.184, Speaker C: So one of the big changes that are coming up and that everybody's excited for is transaction size are doubling at some point in the future. Currently, transaction size is at 1232 bytes, so you can only pack so much into a transaction. At some point in the future, it'll be at least double. The core engineering team that is working on the Solana protocol is working on figuring out how to increase that. This is required. First is quic. So quic has to go live before we can double it.
00:00:42.184 - 00:00:47.084, Speaker C: And then once Qwik is live, we can double it and you can use it for a lot more things.
00:00:48.624 - 00:00:57.110, Speaker D: Interesting. What kind of use cases do you think would actually require a transaction size that's double what it currently is, right?
00:00:57.142 - 00:01:37.054, Speaker C: So there are a lot of defi use cases. So whenever you need more bytes in your transaction, it's probably because you're trying to use more accounts to store state or change state or do swaps, etcetera. For example, Jupiter is a big one that, hey, I see Pierre is working with testing it with address lookup tables, which are also coming up soon, and he's making transactions that could have been previously like 17,000 bytes and compressing it with address lookup tables. And he's still like, he's hitting the max and he could do more with a double transaction size.
00:01:38.354 - 00:01:49.794, Speaker D: Sounds super interesting. And I guess kind of the combination of the address lookup tables and doubling the transaction size even opens up like a wider variety of use cases as well. Sounds good.
00:01:49.834 - 00:01:53.484, Speaker C: Yep, you can fit a whole lot more into your transactions.
00:01:54.544 - 00:01:58.724, Speaker B: Awesome. Super cool. Colin, how about you?
00:02:00.304 - 00:02:37.950, Speaker D: Yep, kind of some quick changes that happen on the web. Three J's repo is the ability to actually get a transaction version. I think in the last couple of weeks we spoke about version transactions being added in. Now there's just a quick getter method to actually retrieve from the transaction class what version this particular transaction is for. Another change that kind of caught my eye was some documentation for the pub subclient API, which is, again, it's kind of like to document on the rust side how to use the pub sub client. So those are what I found interesting.
00:02:37.982 - 00:02:40.838, Speaker B: This week just on that first one.
00:02:40.886 - 00:02:42.782, Speaker A: What does that response actually look like?
00:02:42.838 - 00:02:44.102, Speaker B: Is it just a number?
00:02:44.278 - 00:02:46.314, Speaker A: What do I get back when I make that call?
00:02:47.244 - 00:02:54.904, Speaker D: I believe you would get either a zero to signify that it's version zero or you'll get legacy for the current transactions.
00:02:56.404 - 00:02:58.864, Speaker B: Okay, seems pretty useful. Nice.
00:03:00.964 - 00:03:01.324, Speaker A: Cool.
00:03:01.364 - 00:03:04.944, Speaker C: And then Joe, what kind of resources have you seen this past week?
00:03:06.324 - 00:03:17.210, Speaker A: So actually we saw a whole bunch of resources because summer Camp Hackathon just ended. We just announced all the winners. So you guys can take a look on the summer camp website. You can see the winners, there's a little button that you can click.
00:03:17.372 - 00:03:24.286, Speaker B: And the grand champion was ironforge, which is going to be super useful for basically all kinds of like deployment operations.
00:03:24.350 - 00:03:33.862, Speaker A: When it comes to building programs, taking a look at what they might look like and trying to like integrate with client side stuff. So go take a look at ironforge. There's some awesome videos actually on the.
00:03:33.878 - 00:03:38.150, Speaker B: Submission page where the winner was announced. So you can watch James's presentation.
00:03:38.262 - 00:03:57.116, Speaker A: Gives you the whole like bit of information you're going to need to see what ironforge is and how to actually use it. And that's a really exciting build. There's a lot of awesome, like really awesome projects too that either got prizes or got honorable mentions. So huge shout out to everybody from summer camp. That was great. And also huge shout out to the judges too, because it was some hard work.
00:03:57.140 - 00:03:58.784, Speaker B: We had a lot of submissions this year.
00:03:59.084 - 00:04:46.574, Speaker C: Yeah, and I'm also really excited for Ironforge. I feel like once we have ironforge, it'll be really cool to, one, it's like it brings another way of going through all the different idls and using different programs and understanding how to interact with them. And two, it adds another abstraction layer to where you could actually just use API calls and you're calling the methods on a program instead of having to create the transactions yourself and do all this extra work. That is a lot more difficult in today's terms. So looking forward to having that tool for developers. And that concludes our salon change log this week. Be sure to check us out next week as we go through the changes every week that happen on Solana.
00:04:46.574 - 00:04:50.074, Speaker C: My name is Jacob, joined with Colin Joe, and I'll see you all later.
