00:00:17.920 - 00:00:37.834, Speaker A: Hey everyone, thanks for joining this second ignition Hackathon livestream. Today I have Guillaume and Daniel from Figment Learn, who are going to walk you through some of the great Solana tutorials that they've built and their new website that they've been crafting over the past few months. Take it away, you guys.
00:00:39.494 - 00:00:59.754, Speaker B: Hey everyone, my name is Guillaume. I'm a product manager at Figment, which is a web3 infrastructure company that does staking as a service and building a bunch of developer tools around web3 and around proof of stake protocols, including Solana. Daniel is. You want to introduce yourself quickly, Daniel?
00:01:00.054 - 00:01:06.874, Speaker C: Yeah. Hey guys, I'm an engineer at Figment. I work with Guillaume as well, building the whole learn experience for all you guys.
00:01:09.134 - 00:02:00.184, Speaker B: And so Figment does a lot of things around web3, including some infrastructure, some staking as a service, some explorer products, and one of those products that we are working on is mi developers and it's called learn, or Figment learn. And we're trying to build an educational platform to help web two developers like me, like Daniel, like tens of millions of web two developers in the world trying to help them onboard on web3. And it can be a super, it can be really hard and disorienting at first. The mental models are so different and there's like a million different protocols and their docs are a little bit esoteric. And what we try and do is build the simplest and most powerful, like, educational experiences to try and help you go from like, I'm an intermediate, advanced, experienced web two developer and I'm curious.
00:02:00.224 - 00:02:01.480, Speaker C: About web3, but I don't really.
00:02:01.512 - 00:02:56.746, Speaker B: Know where to start. And one of those products that we have been now working on for the past like six months are called pathways and they're basically just courses that take you from zero to one on any of the, I think, eight protocols that we're supporting right now, we have polygon avalanche near, we have like eight of them and including Solana, which is actually our most successful one. And the idea of this pathway is, and we're going to do a demo, we're going to spend like maybe 1015 minutes going through it together and I'm going to be sharing my screen. I'm going to be going through it like you guys would if you started from scratch. And the idea with those is we want to introduce the mental models of web3 and of Solana in a way that is easy for a web two dev to understand. The container of this educational experience is the next JS app. And a lot of, you know, react.
00:02:56.746 - 00:03:49.456, Speaker B: A lot of, you know, next js, you've written JavaScript and typescript, so you should be comfortable. Those are basically the only requirements. And we've written like maybe 90% of the code and the last 10% the last mile, the last thing that basically bridges the gap between web two and web3. It's up to you to write it. Um, and I think there's nine steps right now in this pathway. Um, it starts with simply connecting to a node, um, to then creating a key pair or an account, uh, funding that account, using a faucet, which is another like very web3, like primitive, um, et cetera, until deploying a smart contract in rust and using the UI to interact with it. And then at the end, all those interactions you've done, uh, are visible on the blockchain through the Solana explorer.
00:03:49.456 - 00:04:22.094, Speaker B: Every transaction that you've made from the deployment of the program, by the way, is like a smart contract. In solidity and ethereum world, we say smart contract. In Solana they say program. So everything is visible on the blockchain explorer from deploying the smart contract to any interaction you have with the program. So we're going to do a demo. Let's just jump right in the demo, I think. Let me share my screen and Google Chrome.
00:04:22.094 - 00:05:01.364, Speaker B: Actually, maybe before I jump into the demo, let me just show real quick what figment learn is. This is the homepage. We are basically gateway to learn about all those protocols, avalanche, Cosmos, Celo, you sort of name it. We have the most popular ones, and I think Solana is actually, I don't think, I know Solana is the most popular one. We have, you have this page here, which will, and we're going to go through the pathway in a second. And we've also created a list of resources to sort of start going with Solana. If you're not sure, start.
00:05:01.364 - 00:05:33.436, Speaker B: Sometimes just, you know, going on Solana devs is going to be the best way. But for some people it's a little bit esoteric. It's a little bit hard to just start with, like developer documentation. And so we've trying to really curate from, you know, just the whole web what we think are the best resources to start. So there's some things from the Solana docs and there's also some things from ledger, which has a great introduction or medium or, you know, some other people who are in some great stuff, and then some tutorials. And we'll talk more about tutorials later. But first, let's actually talk about the pathway.
00:05:33.436 - 00:05:58.784, Speaker B: So those are the steps we're going to click here to get started on the introduction. I'm not going to go through the whole intro. It's explaining what the basics of sonar are. So I'll let you guys have a look at this and setting up the project. I've already cloned it and I've already set up the end because I just wanted to go a little bit faster. But this is very easy. You just have to follow the prompts and the commands.
00:05:58.784 - 00:06:38.274, Speaker B: I think that I'm actually going to stop sharing Chrome and I'm going to share my whole screen so I can switch between Chrome and my terminal. So here I have the app, which is if I go back up here, it's actually this app here. So it's hosted on GitHub. It's this app called Learn Web Three Dapp. You can get clone it and you can yarn and then yarn Dev and then you'll get on this homepage. Those are the eight pathways that we have, and Solana is the one we're going to be doing today. So this is what you see when you arrive here.
00:06:38.274 - 00:07:07.846, Speaker B: And you can see you have like the 12345. You have nine steps. We're going to start with the first one, obviously, and the first one is telling you you're not connected with Solana. So let's click on the view instructions. This is going to open the instructions for that step. There's a little bit of text here explaining sort of what the Solana blockchain is we're going to be using throughout this pathway, this NPM library called Web three js. And it's Solana who wrote Solana wrote it.
00:07:07.846 - 00:07:41.972, Speaker B: It's basically a wrapper around the API of Solana written in typescript. So it's really like just any other NPM component. You install it using NPM or yarn and then boom, you have access to all the sun RPC methods, but basically just with JavaScript objects that you can call functions on. This is the repo. Again, I already opened it. There are two parts where you have to look in components. You'll have Solana components, which are here, and all the steps.
00:07:41.972 - 00:08:29.632, Speaker B: Then if you're familiar with next JS, you know that next JS also gives you the ability to have API routes, and those are usually under pages and API. And then you go and Solana and here you go. So we're basically going to be going back and forth between those two. At the top it's going to be the client side components, at the bottom here, inside pages, API is going to be those express J's functions, serverless functions that you can run on the node server. The first challenge is to connect to Solana to a Solana node. We're going to go in pages API, Solana connects JS, which is here, and we see that there's a bunch of errors, and those errors are attached with errors because we haven't implemented those objects. They're still undefined.
00:08:29.632 - 00:08:47.004, Speaker B: And that's on purpose. It's going to be your job to actually fill this in the first two, three steps. I'm going to do them with you guys. You can watch me and then we'll stop in the last six steps. You guys can do it on your own time. So let's start with this one. This is the piece of code that we have to update, and we're giving you some hints.
00:08:47.004 - 00:09:09.564, Speaker B: You can look at this one, creating a connection instance. So let's see how Solana explains. It's a construction, it's a class, and you have to pass an endpoint. We've already written where the endpoint is for you, so you didn't have to. Basically I can just do connection, use the URL and then here we go. I have my connection object. Now I have to use my connection object.
00:09:09.564 - 00:09:45.838, Speaker B: If I click on, I'm already on a connection, so I can look at all the functions that are here, and there's one called get version. Get version is simply an asynchronous function that returns a promise. So we're going to write wait, because that's how we deal with asynchronous JavaScript and then we're going to use our connection object. And I think if I do, yeah, get version is already there. I'm not sure why. Probably because visual studio is just super smart and it knows that I want to use get version, but here we go. And by the way, if you do that, you can look at all the other functions that are available on this connection object.
00:09:45.838 - 00:10:25.146, Speaker B: If I type get ver boom, here we go, get a version. And it's a function. So I have to call, I have to add the brackets, let's save this and then go back in the pathway page, the one where it said not connected to Solana. Then we're going to open the network tab so we can see a little bit what's going on. I'm going to refresh this page. While refresh this page, we see that it's making a request to connect, which is basically going to go straight from the pages API Connect. If you look at the headers here you can see it's going to API Solana Connect.
00:10:25.146 - 00:10:55.242, Speaker B: So that's going to be routed by next JS, straight to connect JS. And we're not passing anything here. And in the response we see that we get one 7.10, which is what we're sending back the version that we're sending back to the UI to the client side. And here we go. Boom, it's actually connected. Now if you actually go in the UI within Solana components step and accounts, you'll see that this is the call we're making.
00:10:55.242 - 00:11:31.514, Speaker B: We're using axios to make a call to this. Oh, actually, sorry, to connect, I was on the wrong. We're using axios to make a call to API Solana Connect. And upon success, aka when the promise is fulfilled, we parse the response, get the version, set the version in the react states, and then somehow in the rendering logic we're going to actually, if it's not fetching and if we have a version, we're going to render an alert. This is using ND, we're not going to go into details, you can do it on time. Connect to Solana and we're going to show the version. And this is what's going on here.
00:11:31.514 - 00:12:04.934, Speaker B: So this is the first step. At this point we have a connection object and this is going to be the JavaScript object we're going to use to do every interaction with Solana. Let's keep going to the second one and we're going to go a little bit deeper in the rabbit hole. So I'm going to hit next step. And now we're going to create an account or a key pair. A key pair is the data structure that sits behind an account and it's made of a public key and a private key. And we're going to talk about this.
00:12:04.934 - 00:12:32.382, Speaker B: If I click on generate key pair, nothing's going on. There's actually an error because we have to first implement this function. It's not implemented as is create a key pair. We're explaining what a key pair is basically is just what I explained. It has a public key, which is an address, which is something you can share. It's basically like your username in web two world. And then it has a secret key and the secret key is something you don't want to share.
00:12:32.382 - 00:13:09.574, Speaker B: It's more like your password. And in the same way that like a user account, when you want to log in in web two, you have to use usually your username or an email and a password it's the same thing, public key, secret key, really. I think it's a pretty good metaphor to sort of like translate web two into web3 or vice versa. So let's actually go through this challenge again the same way we did for the previous one. So I'm going to go back in visual studio. I'm going to close this to connect and connect Ui. I'm going to open key pair, which is the file here that we're supposed to change, and we're going to implement the key pair function.
00:13:09.574 - 00:13:44.206, Speaker B: We need to create a key pair from this key pair. We need to extract the address and then we need to send those two back to the UI so that we can display on the UI the address. So I think here we have a bunch of tips. Yeah, same thing as the first step. Here's a link to connecting to generating a key pair. So the Solana docs are telling us that to create a key pair we have a constructor. So I'm going to use this constructor, I'm going to say new key.
00:13:44.206 - 00:14:07.456, Speaker B: Oh, sorry, new key pair. Cool. So now it seems like I have a key pair. I can hover it on visual studio and it's telling me that. By the way, there's a typescript definition which is going to be super useful. Then this next thing I need to do is extract the address from the key pair. If I scroll down a little bit, I see that on this key pair there's an accessor to get the public key.
00:14:07.456 - 00:14:33.306, Speaker B: So I'm just going to do, I'm going to call my key pair, I'm going to call this accessor and I don't need to use brackets because this is not a method, it's an accessor. So it's more like a property. Methods are under, and those would actually need to use the brackets. Don't be fooled by the fact that you actually see a bracket here. You shouldn't use it if you do. My guess is typescript is going to yell at you if I hover. It's saying this expression is not callable because it is a get accessor.
00:14:33.306 - 00:15:19.736, Speaker B: Did you mean to use it without the brackets? So boom, I'm removing it. And then once I have my address, it's not over. And that's a super important thing in web3, the public key and the address are not exactly the same. The public key, if I hover over it, it's going to be a public key type, which if I click on this, I don't know if there's a lot of information here. But it's sort of, yeah, the value is like a buffer, so it's sort of not a string representation and we're not going to go into detail about what it is exactly. But think of it as a long, long list of numbers, which as is, is sort of like really hard to decipher. So actually one thing I can do, this was not planned, but let's improvise a little bit.
00:15:19.736 - 00:15:55.254, Speaker B: I'm going to console log the key pair and then underneath I'm going to console log key pair publicing. Then once we've extracted the address, I'm going to console log the address. This is going to help us understand the differences between all those three things. If I look at the public key from the public key, I can get the actual address by using the tostring function. This guy here, let me click on this. And it's as easy as calling tostring. And this is, if you scroll up, this is a method.
00:15:55.254 - 00:16:16.318, Speaker B: So we actually have to use the brackets here. So I'm going to do two string. This is going to be my address and I'm going to console log. Those three console logs are in the node js side, so they're going to be not in the console of my browser. They're going to be in the terminal. Super important. Okay, so I saved this line 17.
00:16:16.446 - 00:16:19.734, Speaker C: I think you need to console log address just the variable.
00:16:19.854 - 00:16:20.246, Speaker B: Yes.
00:16:20.310 - 00:16:21.590, Speaker C: That way they can actually see the.
00:16:21.662 - 00:16:32.726, Speaker B: Yeah, cool. Yeah, good call. Thanks, man. Okay, so I cleared the terminal. Good call. I'm going to put this on the left. I'm going to put this on the right.
00:16:32.726 - 00:16:47.024, Speaker B: I'm going to clear this. Sorry. A little bit of screen gymnastics this. I don't need a lot of space. Okay, cool. So we've implemented this and I'm going to refresh just to make sure everything is, we're not using style code. And I'm going to call generate key pair.
00:16:47.024 - 00:17:18.724, Speaker B: Okay, it worked. So we have three things. We have the key pair object, which has a public key and a secret key. We've just talked about this. Then we have the public key, which is when you do key pair public key. And you can see it's like a BN. Bn means a big number and we're not going to go into cryptographic details, but basically the way this public key and the private key is generated is through this ellipsis algorithm.
00:17:18.724 - 00:17:52.054, Speaker B: And it's basically just trying to find a unique number among a huge domain space. And big numbers are not natively supported by JavaScript. So we need to use the library to actually convert it to a string, and then we actually get this address. So it's sort of like a distillation key pair. Then you distill it to a public key, and then you distill the public key to an address. And the address is like your email, like your username, or even like your mailing address. It's something that you can track everybody to say, hey, you can reach me at this address.
00:17:52.054 - 00:18:20.324, Speaker B: And by the way, here now you can see the key pair was generated. It's a string representation of the publicly, we just explained that. And it's accessible and copyable at the top right of the page. So if you click on storage, we've created this little react states that tells you you're on Devnet. This is your address. We sort of created a little ellipsis in the middle and you can see the secret. Cool.
00:18:20.324 - 00:18:54.376, Speaker B: By the way, Daniel, let me know if there's any, because I don't see the chat. But if there are any questions about the step, we can just pause and talk about it. We don't have to wait to the end to do an ama, so let me know. Okay, so at this point, we've used the connection to create with the Solana node and we've created an account. By the way, not even using this connection. The creating an account is totally local. There's no network request, or at least there's no network request to the Solana node.
00:18:54.376 - 00:19:27.514, Speaker B: It's something that can be done completely locally. And so now we have an account and we can start doing a little bit more fun stuff. So let's click next. Step past the address you generated to fund your account. We're right now on Devnet, which means that the tokens you're going to be getting are like fake tokens. It would be too fun if you could just use the faucet to get real tokens. Those tokens don't have any value in terms of being able to transfer them to like us dollars.
00:19:27.514 - 00:19:56.134, Speaker B: They only exist as like a fake currency on a simulation of the real Solana mainnets. There's Mainnet and then there's Devnet. For devs to be able to just have fun. So I'm going to go in storage, I'm going to hover on the address, and I'm going to paste it here. And my guess is, if I do this, the address is funded. And so why is it funded? Let's go and see the code that actually does this. Oh, no, actually it shouldn't be funded.
00:19:56.134 - 00:20:37.702, Speaker B: So maybe you have a little bug. Okay, so let's click on this step to try and understand what we need to do to make this work. We still have the node URL, we still have our connection, and we have an address. And what we got to do is then we have to get the public key, get the hash, and that's the way we can actually use the function called request airdrop. So this one, I'm going to go a little bit faster, but basically from the address earlier, we actually went from the public key to the address by using tostring. This time we're going to do the opposite from the address. We're going to go the other way and get the public key.
00:20:37.702 - 00:21:21.194, Speaker B: So I'm going to do this, and then we're going to use the connection and the request airdrop on this connection, and we're going to say, I'm requesting an airdrop of three tokens to this public address, and then we're going to talk about this constant in a second. Okay, so lamperts per salt is. Okay, so lamperts are basically a unit of soul. So the same way you have like a dollar is 100 cents, one solana is, I think, ten to the power, nine or 19. Oof. I don't know. Daniel, do you know this actually, how many lampards are in a soul?
00:21:22.614 - 00:21:23.554, Speaker C: I don't.
00:21:24.744 - 00:22:07.524, Speaker B: Okay, well, me neither. Oh, wait, it was here. Second one, terminology. If you google this. Okay, a fractional native token with a value of 1231-2312 so it's a billionth of a soul, ten to the power, minus nine. Okay, and it's sort of the unit in which you're going to actually do commerce on. Right? The same way, if any of you are, if any of you have built anything on Ethereum, usually you can use waze instead of ethers, especially when ethers is like 4000 or $3,500.
00:22:07.524 - 00:22:43.494, Speaker B: Like right now, it's annoying to always be working with fractions of ether. So instead of working with fractions of ether, we work with thousands or millions of of ways. And it's exactly the same web lamprey. So now that we have our hash, we're going to confirm the transaction, because this is building a raw transaction and we have to actually confirm it using this hash. Then once it's confirmed, we send the hash to the UI. And so let's see what happens when we do this. So I'm going to refresh, I'm going to use this address again.
00:22:43.494 - 00:23:13.102, Speaker B: Storage. Boom, boom, boom fund. Okay, so now the address is funded. But earlier we didn't have the Solen explorer because the call actually didn't work. But now if we click on this, and before we click on this, have a look at the address. It's 34 two RB, ends with two e's. Okay, now we're going to go on the select Explorer and the signature, the address.
00:23:13.102 - 00:23:42.546, Speaker B: So 34 two rbs. So this guy, this string is the address and it's basically saying that this address now has a balance of one Sol. So our airdrop works if we click on this address. Now we go to explore Solana.com address slash this our address. And what is this actually? Is this a QR code? Wow. We actually, that's cool.
00:23:42.546 - 00:24:14.082, Speaker B: The Google actually chrome supports QR codes, detects that this is a crypto address and actually it shows you the QR code. I didn't, I never noticed that. So I can see for this page that this address is the one that I had on in the storage. I can see its balance and so, and that's sort of it. It's also not executable because this address corresponds to an account, not a pro. That's really important. As you go through the pathways you'll hear more about this.
00:24:14.082 - 00:24:32.554, Speaker B: So actually let's do something. Let's be a little bit greedy and fund and ask for more money. I'm going to ask once and I'm going to ask twice, maybe even four times. Okay, I'm going to go back on here and I'm going to refresh. What I expect is that I'm going to get three or four, I don't know how many times I did it exactly. I'm going to refresh. Boom.
00:24:32.554 - 00:24:52.284, Speaker B: Four. So it's basically free money. Free money, but sort of free fake money. So here we go. We basically now have an account and this account has money on it. So we're going to stop here. We don't want to do the whole thing, otherwise we would spoil all the fun for you guys.
00:24:52.284 - 00:25:21.918, Speaker B: But basically we'll just talk about what's coming next. If you keep going, we'll teach you how to get the balance for any account. Remember that blockchains are public, so for any public address you can know how much tokens they have. Then we'll teach you how to transfer soul from one account to another. Super important. Then that will be the end of the pure Ui JavaScript side. The steps after that will be more on the smart contract.
00:25:21.918 - 00:26:16.528, Speaker B: So that's going to be a little bit harder, but also that's super important. We've written a very simple contract. We'll explain, you won't have to write it, we'll just explain what it does. We'll teach you how to use the CLI, which means command line interface on your terminal to actually deploy the program, to actually compile it, to deploy it. Then we'll create storage for the program, because the program actually has some state and it will be stored on an account. And then we'll request data from the program, and then we'll do the opposite, which is we'll write to the state, to the public state, which is hosted on the blockchain. Then we'll complete this circle of you have a little client side application written in JavaScript, which you can deploy and that anybody can interact with.
00:26:16.528 - 00:26:43.682, Speaker B: And then you have a smart contract which is running on every node of the Solana blockchain. And then we'll make them communicate, and we'll see that we can very easily write to the blockchain and read from the blockchain. So that sort of concludes this little demo of the pathway. The first three steps and then the last takes are up to you guys. Do we have any questions? I'm going to close a bunch of times, yeah.
00:26:43.698 - 00:26:52.994, Speaker C: So looking at the question log right now, Guillaume, are you familiar with any companies that might be hiring specifically for Solana devs or any projects that might need help, open source or dao based?
00:26:54.574 - 00:27:41.766, Speaker B: I'm not. This is more of a question for the Solana team. I don't know if there's any of them right now, but there's a hackathon going on right now. So my guess is you guys should be able to probably just ask them on discord if they can point you to any company that's actively hiring. But here's my recommendation would be before doing this, go on their GitHub and look at any open source project they have and try and get involved. The best way to do this is just, for example, go on like Metaplex. So if you google like Solana Metaplex or Solana anchor or Solana Dappscaffold, you're going to be able to find their GitHub, their open source projects, and look at the issues and try and fix an issue.
00:27:41.766 - 00:27:51.254, Speaker B: That's the best way to get involved. And who knows, maybe that's going to lend you a job at Solana. So I think that's probably the best way to do it.
00:27:53.594 - 00:28:03.654, Speaker C: Super helpful. I think the next question is, is it recommended to set up a node or cluster on the local dev machine to allow for testing or debugging the program. The smart contract.
00:28:06.394 - 00:28:38.264, Speaker B: Is it recommended to step in to set up a node cluster on the local dev machine? I think you can. You definitely can. It's going to allow you to be able to compile it locally and get, you know, and interact with locally. You can do it on the Devnet directly. The devnet is sort of made for this, so I'd say try both. Like, setting up a local cluster is going to be a little bit harder, but it's going to be more gratifying. You'll be able to look like sort of inside the belly of the beast.
00:28:38.264 - 00:28:47.744, Speaker B: Devnet will probably give you access to more tooling, so it's really up to you. It depends how deep you want to go.
00:28:49.044 - 00:28:56.356, Speaker C: Yeah, I'll second that. And I think also having done a couple of these myself recently, I think if you spend more than an hour trying to set it up and it's not running, just use the Devnet.
00:28:56.500 - 00:28:57.828, Speaker B: Yeah, that's a good information.
00:28:57.916 - 00:29:11.044, Speaker C: Beating your head against the keyboard if you don't have to. Just get the build. Let's see. That's it, I think, for the questions, although I think somebody's asking whether or not this will be on YouTube. I think it will be. I think this will be posted.
00:29:11.824 - 00:29:20.376, Speaker B: Yeah, my guess is it will. I'm pretty sure it will double check. Just maybe come back hereafter and there will be some information.
00:29:20.560 - 00:29:30.714, Speaker C: Check this out. This is a good question. So this is a great foundational question. What's the story with Testnet? It sounds like most teams go from dev to mainnet directly.
00:29:32.454 - 00:29:36.074, Speaker B: So that's actually a question I don't have the answer to. I'm not sure if someone else.
00:29:38.174 - 00:29:38.486, Speaker C: On.
00:29:38.510 - 00:29:59.104, Speaker B: The form or the chat has the answer. Some. I know, I've noticed that some protocols actually have a devnet. Some protocols only have a testnet, some have both. And I'm actually not really sure. I believe testnet is for stress test validators. Yeah, maybe, actually, I don't know if devnets have like, validators.
00:29:59.104 - 00:30:24.144, Speaker B: I'm actually not sure testnet is. I'm reading the answers because some people seem to have this knowledge that I don't. Testnet is for testing new features? I think. So then what would the devnet be? Because I guess you could work against the devnet to also test new features. I don't know if I know, actually. We don't have chase here. I don't know if Ryan has an answer to this, but I'm actually not sure Testnet is just for testing your features.
00:30:24.144 - 00:30:34.004, Speaker B: Actually, let's check. We have a little bit of time, so let's testnet Solana clusters. Let me show my screen again. Let's actually learn all together.
00:30:34.784 - 00:30:37.304, Speaker A: Okay, I can tune in.
00:30:37.344 - 00:30:38.124, Speaker B: Yeah, go ahead.
00:30:38.544 - 00:31:15.944, Speaker A: And also the docs here do help. Devnet. Testnet and mainnet are three different clusters that have different personalities, I suppose. You obviously have way different behavior on the mainnet cluster compared to devnet. Testnet is the intermediary step to test your code and program an app for an environment that is more similar to the actual main net. As the clusters behave very differently, the skip rate is different. How to handle transaction erroring is different.
00:31:15.944 - 00:31:34.424, Speaker A: I think you might have said this testnet is just the step above Devnet that is actually mostly focused on just contract programming and really understanding how to get your logic correct. Tesna is more prepping for that deployment.
00:31:35.324 - 00:32:09.252, Speaker B: Let me suggest maybe an analogy because I think a lot of people here are from web two and I think they know what staging is. My understanding would be that Devnet would be more like a testing environment where you can really just break things. It's totally fine. It's a good place to just push, force, push whatever. Staging is more like what we call testnets in terms of clusters. And by the way, cluster is probably an analogy to environments. Again, in dev two world, staging would be like Testnet, which is the goal is to replicate as much as possible the environment of production.
00:32:09.252 - 00:32:34.744, Speaker B: In terms of in web two, it would be database setup and maybe you would have redis running or it would have the same architecture, the same services, and it would mirror production, which in this case is mainnet. Does that sort of this staging analogy make sense to you? Cool. Awesome. Yeah, so I think that's probably a good answer. I hope that's satisfying.
00:32:35.604 - 00:32:38.250, Speaker C: You want to talk a little bit about data hub for a second?
00:32:38.412 - 00:32:39.782, Speaker B: I think we sort of went over.
00:32:39.798 - 00:32:45.234, Speaker C: That really fast at the beginning on the setup, but it might be good to dive into that a little bit and how they can leverage it to build on it.
00:32:45.734 - 00:33:46.684, Speaker B: Yeah, so datahub is another product. So we've talked about Figment, which is a company, and learn is one of the products of the company Figment. And we have another product which is called Data Hub. And Datahub is basically giving you access to nodes that are on the Solana blockchain with a bunch of guarantees and some services like analytics, monitoring, like just SLA's, that means uptime. And so you can basically use us as a proxy to be, to talk to the solenoid network and our nodes are like part of the network, they actually stake Sol tokens, et cetera. So you can sign up on I think, Datahub Figment IO, and there's a free tier which has a limit in terms of request. I'm not sure what the limit is, but my guess is if you reach that limit, it's probably a great sign, means you've built an awesome dapp and people are using it.
00:33:46.684 - 00:35:13.586, Speaker B: And so for those who were there in the first step of the pathway, the connection step, we wrote something like Const URL, new connection with a capital c, which is like the class, the JavaScript class, and then we passed the node URL. You can pass either the Solana node, which is reachable at API Devnet Solana, or you can use data hub as a proxy or intermediary. I'm going to share my screen again real quick, because if you go in this code here, you can see that we have a function called Getsafe URL. And you can basically see that we can either point you to the devnet or we point you to the Solana URL of data hub. So if I then command click on this, I'm redirected here and you can see that depending on the network and the protocol, you will go to a data hub, Solana Mainnet, RPC URL. So if you go in envision, I'm doing this live, if you go in your end file, you'll see that you have Solana environment variable, and so you have a mainnet RPC, which is data hub's way of accessing the mainnet of Solana through RPC, the mainnet of Solana through websockets or the same guys, but for Devnet. Okay.
00:35:13.586 - 00:35:45.074, Speaker B: And so I don't know if I have, if I'm logged in on Datahub. Okay, I should have this. Okay, so this is what data hub looks like you would go on Solana and then you have a tour, we're going to skip it. You have your API key here and then you have all the different URL's that you need to be able to access Solana through data hub. Does that answer a little bit the question of what data hub is? I'm going to go back in the chat, what is data hub? Wait, when was this?
00:35:45.704 - 00:35:59.120, Speaker C: This just came up, but I think that was a good overview and I think if anybody has more specific questions on data Hub, feel free to pop them in. But I think that was a really good overview. Do you want to mention how? Sorry, go ahead.
00:35:59.272 - 00:36:39.184, Speaker B: No, we also have a discord which at the end we'll give you a bunch of links. But I keep sharing my screen, maybe I should keep sharing it once and for all. If you go on learn figment IO, which is the homepage that I showed earlier where you have access to all the protocols, all the tutorials and everything. Um, there's a discord link here. So uh, check this out and if you have any questions once the stream is over, if you have any questions about Figment specific products, either learn a pathway or datahub, come in our discord and ask us if you have any questions about Solana, go on their discord. Or we can redirect you or answer any questions. But this discord has like 3000 developers right now.
00:36:39.184 - 00:36:45.124, Speaker B: Uh, like, like I think 400, like actively connected. So you'll get answers to all the questions you have.
00:36:45.904 - 00:36:48.004, Speaker C: Nice. That's exactly where I was going to go.
00:36:48.384 - 00:36:52.424, Speaker B: Cool. And if you. Yeah, go ahead. Go ahead then.
00:36:52.544 - 00:36:57.520, Speaker C: Well, I was going to say do you want to share with them how they might be able to help out extend these things?
00:36:57.712 - 00:37:34.904, Speaker B: Yep. So read my mind. So next to discord you have a little tab called contests. We're going to click on contests and we're going to explain a little bit what's going on here. So actually before we explain what this is, we are going to show some part of figment learn that we haven't shown yet, which is our tutorials. All those tutorials have been written by community, not by us, but by developers who have earned tokens for writing on solana, on avalanche, celo secret tezos, et cetera. So one, let's say if you want to, you can browse all of those.
00:37:34.904 - 00:38:29.420, Speaker B: There's topics you can search for technology if you want to learn, for tutorials about react, for let's say either maybe polygon and avalanche. And Celo, if you're interested in, you know, react and you want to learn about those three, boom, here you go. You can figure out how to build a social media dapp on polygon, how to create a decentralized exchange on avalanche, etcetera. And we have maybe like 70 or 80 tutorials. And to give you guys an idea, each of those, we paid for each of those, we rewarded developers between $300 and like $700 in native tokens for all of those. So if a month ago you contributed on Solana by writing a tutorial and we gave you $500, so this would probably be worth like 200 or 300. Sorry.
00:38:29.452 - 00:38:30.684, Speaker C: Yeah, sorry.
00:38:30.724 - 00:39:07.564, Speaker B: 2000 or 3000. It's so crazy that I can't even like, say it properly. If you basically made $500 writing a tutorial on Solana, now, this could be worth 2500 or $3,000. So, I mean, this is one of the greatest things about web3 is that like, we're not making any money from this. Figment and Solana are not making money from this. Developers are writing and sharing knowledge and writing tutorials about what they learn, and they're rewarded in tokens. And as the network gets more option, their tokens become more valuable, which is completely different than any web two incentive scheme.
00:39:07.564 - 00:39:52.594, Speaker B: Like, if you wrote something for like Codecademy or like Udemy, right? You would actually get like dollars. And if the technology underlying like, you're right about react, well, you don't have any react tokens here. You can have sole tokens. So you can basically create this flywheel. You can write tutorials for other developers to learn about Solano, create dapps, regenerate, adoption, generate traffic, and increase the value of the soul you earned by initially creating those tutorials. So the reason why I'm sort of explaining and really trying to get you guys excited about those incentives is because we have a contest for writing the best tutorials for Solano. And we have three categories.
00:39:52.594 - 00:40:34.234, Speaker B: I think we're starting today. So literally right now, it's official. I'm just, you know, I'm officially launching the Solana tutorial contest, and it's ending at the end of the month, on the last day of the month. And we're distributing $15,000 in Seoul, which one day will be worth like a million dollars, basically. And there are three categories, and for each of the three categories, there will be three winners. And they each sort of like, go, you know, turn up the level of technicality from the previous one. So the first one is explaining Solana's innovations without any technical jargon or with as little technical jargon as possible.
00:40:34.234 - 00:41:38.374, Speaker B: This is for all you guys, learners who like to explain things with simple words and are a bit tired, like us, of all those like, blockchain explanations that are like, very indulgent in jargon, you know, and saying, like, high throughput and like, scalable and permissionless and all those words that don't resonate with people who haven't been in web3 for a long time. So we're looking for people who can explain Solana to your uncle who doesn't know about blockchain, to your friend who works in tech but doesn't know who, like, who read an article about web3, and it's a little bit confused and intimidated because a lot of people are intimidated. Feel free to use visual drawings, illustrations, animations. If you want to have an idea also of the tone that we're looking for, click on this thread, which is a thread that Daniel and I wrote about the graph, and we sort of try and explain the graph without any jargon. So a little plug read this. This will give you a really good idea of sort of what we're looking for. So this is the first category.
00:41:38.374 - 00:42:19.590, Speaker B: The second category is building an explorer. So something similar to the, I think, Explorer Solano, but obviously not as designed and not as like, not with the same features, but. And that's the condition using the Dapp scaffold. The Dapp scaffold is sort of to Solana what the create react app framework, or, you know, like, I guess boilerplate. Boilerplate scaffold are sort of synonyms here. So it's to Solana what the create react app was to react. You go on GitHub, you clone it, you run yarn dev, and boom, here you go.
00:42:19.590 - 00:43:13.964, Speaker B: You have basically a working front end that connects to Solana. The goal here is to create a clone of the Solana Explorer. It's super simple, using the scaffold, and build a tutorial for this to explain how you've done it. And the third category, a little bit more advanced. Although I said beginner is trying to use the anchor framework, I should probably rename this framework, explain to other Solana Devs how to use the anchor framework. I think from what I've understood, 90% of the developers who are working on Solana right now are using anchor to build those dapps. It has a front end, it has utilities for writing smart contracts, for deploying, for compiling and deploying them.
00:43:13.964 - 00:43:51.284, Speaker B: We've linked to the docs, to the project GitHub, and what we want you guys to do is to build a blog platform. Super simple. Again, don't overcomplicate it. The goal is to make an end to end blog platform. So you arrive, you log in, you write a bunch of stuff in a text editor, you save, it gets saved in a decentralized storage, and then it's shown on the UI. The simplest bug platform you can using anchor and writing a tutorial around it. If you also want to make a video, that will probably buy you some bonus points.
00:43:51.284 - 00:44:31.594, Speaker B: And we are being super generous with the rewards we're giving. As of today, we should probably actually write this. As of today, $25,000 in SOL and 1500 for the second and $1,000 for the price. So in total we're distributing 15 grand of Solana tokens, and there's a bunch of stuff to participate. And again, if you have any questions on this, you can come on Discord. And we're officially launching this today. And again, just to reiterate, it's until the end of the month, September 30, I should probably bold this.
00:44:31.594 - 00:44:37.634, Speaker B: Any questions on Twitch around this?
00:44:38.294 - 00:44:50.434, Speaker C: Nothing on twitch, but I bet a lot of people out there are thinking about Figment's an awesome company. They're thinking, I want to go build infrastructure, I want to go build indexers, I want to go build learning stuff for blockchain, for web3.
00:44:50.814 - 00:45:16.650, Speaker B: Where should they go? Where should they go? That's a great question. Do you have the link? Because I don't have it. Yeah, I'll drop it in. Yeah, drop it in the twitch. So we're a web3 company. We are completely distributed. I am in New York, Daniel's in Houston, we work with people in India and Canada, in Poland, we're basically a completely remote company.
00:45:16.650 - 00:46:11.068, Speaker B: We build, we have openings for, did you, oh yash, perfect. Yash, who's our Devrel posted? Yash, actually, if you can hear me, can you post the jobs link? If anybody's interested in learning more about figments, we have openings for developers, we have openings for protocol analysts in the developer category, we have full stack, we have smart contract developers, we have a bunch of stuff. Check it out. If you love working on Solana and you want to keep like building the open infrastructure of web3, come and work with us. Anything else? We're good. Any questions? We're good to wrap. What is live conference about? If you guys have any questions.
00:46:11.068 - 00:46:25.748, Speaker B: Again, as we said, we dropped a discord link. It's the best place to come and reach out to me, to Yash, and to Daniel and Olivia, other people in figure. Wonderful. And Ryan is back.
00:46:25.916 - 00:46:41.864, Speaker A: Thank you both so much for joining. I really appreciate you hopping on the stream. It was great to have you. And yeah, like they said, join their discord, check out the great tutorials that they've built, and we'll see you all next time.
00:46:42.524 - 00:46:45.004, Speaker B: Cool, thanks, Ryan, thanks for having us. Bye, thanks.
