00:00:04.560 - 00:00:07.342, Speaker A: Jerry, welcome to validated.
00:00:07.518 - 00:00:09.398, Speaker B: Hey, Austin. Really nice to be here.
00:00:09.526 - 00:00:48.324, Speaker A: Yeah, thanks for coming in today. This is a conversation I've wanted to have for a while. I think what you guys are building with Phoenix is very interesting. It's kind of a different approach to how an order book can work on blockchain. You guys have had a ton of success recently in volume and adoption. I want to talk a little bit about your experience, both as a developer building very hard tech on Solana, but then also the process of growing a new DeFi application that's taking a little bit of a different bend on, I think, what many other folks are building in Defi.
00:00:48.984 - 00:00:56.932, Speaker B: Yeah, happy to talk about that. I think I'll first start with the latter half of your question, because I think that's kind of the more interesting piece.
00:00:56.988 - 00:00:57.180, Speaker C: Right?
00:00:57.212 - 00:01:27.508, Speaker B: Like, why did we build Phoenix in the first place? Or why does something like Phoenix need to exist in this whole class of Dex design? So, I think we should go all the way back to 2017, when Uniswap came out, because that was kind of like the initial. The initial innovation for defi in the first place. You have this state machine on some blockchain that is validated or mined by a number of distributed nodes, and then you can use it to trade.
00:01:27.636 - 00:01:28.116, Speaker C: Right.
00:01:28.220 - 00:01:38.740, Speaker B: Um, but I came from a background in. In trading and, like, high frequency trading. Um, and in traditional finance, uh, markets don't really work like uniswap v two or uniswap v one.
00:01:38.812 - 00:01:39.260, Speaker C: Yeah.
00:01:39.372 - 00:01:47.124, Speaker B: The design there is effectively, you have this math equation that governs the way that the price moves around and the amount of tokens you get when you.
00:01:47.164 - 00:01:47.316, Speaker C: You.
00:01:47.340 - 00:02:16.576, Speaker B: When you make a trade. Um, so that was like, the initial, uh, like, defi surge is when, uh, you have these ideas of how you can transact on blockchains with minimized compute. So ethereum has this model where effectively the throughput is kind of limited, sort of artificially. I think that they've chosen a different point in the trade off space, but given the constraints of that system, it's really not possible to build financial primitives similar to what you'll find in the.
00:02:16.600 - 00:02:20.310, Speaker A: Real world because of the compute limited nature.
00:02:20.382 - 00:02:20.566, Speaker C: Yeah.
00:02:20.590 - 00:02:24.958, Speaker B: So compute limited nature is one piece of it, and also the cost of gas is another piece of it.
00:02:25.006 - 00:02:25.382, Speaker C: Right.
00:02:25.478 - 00:03:04.802, Speaker B: I think both of those are important. So maybe it's important or interesting to talk about how a lot of trading works in traditional finance. Most of it happens on order books, like, almost all of it. The Nasdaq does hundreds of billions, if not trillions, of volume a day in, like, notional volume for equities. Uh, and all of this happens on central limit order books, where you have effectively two sides of the book, people who want to buy and people who want to sell. And if they disagree, there's a trade, because naturally the prices are going to cross. And if they don't agree, then you have like, basically a book structure where there is some amount that people are willing to buy at a certain price, and some amount that people are willing to sell at a higher price.
00:03:04.802 - 00:04:02.644, Speaker B: And importantly, this changes dynamically, because prices are not the static thing. Prices are extremely dynamic, and they move around all the time. And the people who are making these markets, they need to anticipate basically the direction of flows. And this is a process that requires you to constantly monitor the system and place lots of orders, orders being the orders to buy and sell in the book. So this particular mechanism is quite nice, because you effectively need these active market participants to do all this price setting to provide liquidity in these markets. The design that uniswap and these amms presented all the way back when DeFi was getting started is effectively the roles are reversed, where you don't have professional market makers providing liquidity. Your liquidity is being provided by this math function effectively.
00:04:02.644 - 00:04:35.296, Speaker B: And I guess there's a reason why the math function doesn't really govern the way that markets and tradfi work, because a lot of sophisticated market makers like to make these sort of dynamic decisions based on how funds are moving around. So let's move towards how Solana fits into the picture. I mentioned that on Ethereum. It really isn't possible due to some artificial constraints. Um, and also the high gas cost to support a mechanism like an order book.
00:04:35.480 - 00:04:43.992, Speaker A: Yeah, I want to hang on that just for, for a second. So what is it about an order book that is so much more computationally intensive than a traditional amm?
00:04:44.048 - 00:04:58.000, Speaker B: Yeah, that's a really good question. So a lot of it isn't necessarily like, the computational expense or like, how expensive it is to do a specific action on the order book. It's the fact that the participants need to be active and they need to place a lot of transactions.
00:04:58.072 - 00:04:58.632, Speaker A: Ah, okay.
00:04:58.688 - 00:05:52.956, Speaker B: So there's, there's nothing about the design of the order book itself that is particularly detrimental. It's really the fact that how you interact with it matters a lot. And that's the key point here, where there are a couple factors that matter a bit. One is the fee, and the other is effectively the throughput of the chain. How many actions can happen within a short amount of time, right. The fees are important because when you provide markets, when you make markets on an order book, or in general, really the way that you should think about it is a revenue maximizing model, where if you provide quotes, you expect to collect the bid, ask spread over a series of a number of trades. However, in order to do this properly, you also need to be able to cancel your orders to avoid adverse selection.
00:05:52.956 - 00:06:36.064, Speaker B: Like whenever prices change, whenever someone has more information than you do, it's likely that the trade that you'll be making by filling someone else's order is actually not good for you. And those situations you want to avoid being adversely selected. And order books allow you to do this by basically making the cancel operation extremely cheap. In tradfi, it just costs $0 to form any of these actions. Um, in defi, if it cost $1 to cancel, and you need to place 1000 quotes an hour, uh, effectively your, if your, if your revenue model, uh, doesn't allow you to make more than that. Sufficiently, more than that, it just makes no sense to provide liquidity in the first place. Yeah, so this is why low fees are important.
00:06:36.064 - 00:06:55.560, Speaker B: Low fees basically allow you to make the opportunity cost of providing liquidity worth it, uh, because it's strictly an operational cost whenever you place and cancel orders. And, and replacing and canceling orders is a necessity. Effectively, it allows you to sort of follow the true price to avoid adverse selection. So that's why fees are important.
00:06:55.672 - 00:06:56.328, Speaker C: Right.
00:06:56.496 - 00:07:27.014, Speaker B: The other thing is throughput. So throughput is a little bit more difficult to understand, like why, why it matters. But a lot of it comes down to, like, where price discovery happens. So price discovery really is like where, like which venue dictates the actual movement of prices for assets. And for most crypto assets, this happens on centralized exchanges as opposed to indexes. There are obviously meme coins and long tail assets that have. Most of the price discovery happen on chain.
00:07:27.014 - 00:08:01.402, Speaker B: But for a lot of the majors, like bitcoin or ether or sol, a lot of the price discovery actually happens on decentralized venues like binance. And so what happens fundamentally when you have a really long block time, is that the prices on chain are more likely to diverge with the true price discovery venue than on a Dex or on a blockchain where the blocks are a lot shorter. This is just due to the fact that you can think of it as you have this random moving price that's happening somewhere. The deviation is going to be larger if you wait a longer period of time.
00:08:01.538 - 00:08:02.858, Speaker A: It's just a tracking problem.
00:08:02.986 - 00:08:32.646, Speaker B: Yeah, effectively a tracking problem. If you have these short block times, you effectively can, in conjunction with the low fees, you can effectively move your quotes around. Um, and have this situation where you get adversely selected. Uh, and trading, this is often referred to as getting picked off. Like your quotes getting picked off. Because I'm offering to sell at $10 but the price moved to $10.20. And uh, I really don't want to make that trade because I know what the price actually is.
00:08:32.646 - 00:08:49.198, Speaker B: And, and so I think the environment is effectively one where everyone actually knows, all the sophisticated actors know what the true price is. But in order to avoid trading against other sophisticated actors, when you know your price is stale, when you know your price is bad, you need to send a cancel order in.
00:08:49.286 - 00:08:49.582, Speaker C: Yeah.
00:08:49.638 - 00:08:59.366, Speaker B: And the point with the high throughput is if there's higher throughput, this particular scenario should happen less just in expectation. Uh, is never, you can never.
00:08:59.430 - 00:09:00.678, Speaker A: This scenario of getting picked off.
00:09:00.726 - 00:09:00.934, Speaker C: Yeah.
00:09:00.974 - 00:09:04.242, Speaker B: Like, or the scenario where a pickoff exists.
00:09:04.338 - 00:09:05.538, Speaker C: Right. Yeah.
00:09:05.626 - 00:09:33.746, Speaker B: And you can never avoid this. Like in traditional finance, pick offs happen all the time. It's not, it's not a thing where you can entirely just eliminate it, but you want to minimize it. It's really important to try to minimize it effectively. Try to reduce these scenarios where you're in a situation where you're like most likely going to lose money and expectation because what's going to happen is that you know that these things are going to happen. They should get priced into the spread that you offer. And in the situations where the price isn't moving past the threshold, you should be collecting edge on your trades.
00:09:33.746 - 00:10:12.296, Speaker B: And this comes back down to the bottom line problem of effectively just revenue maximization. You have this strategy where you're providing quotes on an order book and you expect to make money doing this. You expect to make some amount of money doing this. But you also know that there's some operational cost. So the operational cost is effectively the fees that you pay to place and cancel orders, um, on, on this venue, so on. I guess in traditional finance your operational cost primarily comes down, at least on the, purely on the technical side, purely on the, on, on the piece where you actually need to send infrastructure. Uh, it, it's basically the cost of your, your hardware.
00:10:12.296 - 00:10:30.238, Speaker B: Right, um, right. And like, and sometimes there's like a cost to connect to a particular exchange. Um, but with respect to blockchains, that cost comes down to like how much gas you're paying to send your orders to the network. Um, so that's, that's strictly negative. No matter what it is on your bottom line. That's, it's going to cost some money to do this.
00:10:30.286 - 00:10:32.142, Speaker A: Everything on blockchain has to cost something.
00:10:32.198 - 00:10:32.702, Speaker C: Yeah.
00:10:32.838 - 00:11:14.694, Speaker B: And then for, for the, I guess, expected revenue portion, you have the spread you're going to collect, and you also have this like average selection you might be encounter. And so those, those two summed up like you, you have some good trades, you have some bad trades. You're hoping the good trades, um, like overpower the bad trades. So you expect to make money, and then the combination of these two gives you sort of like what you expect to make if you provide liquidity on a dex. And in total, this number should be greater than whatever your opportunity cost is to deploy that capital. And you need the unit economics to work out, which is why Solana, at least today, is one of the few chains where this problem works out. It's really just a problem of economics more than anything.
00:11:14.694 - 00:11:17.234, Speaker B: And so the high throughput enables this.
00:11:17.394 - 00:11:52.084, Speaker A: Yeah, it's interesting because there's a few pieces there that are, I think, fairly common critiques. You hear of a lot of Defi applications. One is that they're not actually that good for LP's. And the other piece being that with a high interest rate environment, some of the economics of providing liquidity, especially in something like USDC, has really changed in a lot of these venues. And that seems to be why it seems like a lot more market makers are picking to make markets on centralized exchanges than maybe anecdotally it felt like they were doing in 2021. Do you think that's accurate?
00:11:52.244 - 00:12:46.806, Speaker B: Yeah, I mean, I definitely think that the fact that LP's need to be sustainable is like a huge sticking point. And that's one of the major reasons why we decided to build Phoenix in the first place, because I think that the only reason why a market should exist is if there's sufficient demand for buying and selling and someone in the middle willing to facilitate those transactions, and that individual needs to make money. Like, if the market maker is losing money, they should just stop. Like people are rational actors in crypto. And with like AMM provision in particular, I think more likely than not, this adverse selection problem should, should go against them because their prices should be stale. If price discovery happens on binance and the prices are moving and the amm providers are not shifting around where their liquidity is, they're going to be on the wrong side of the trade basically every single time.
00:12:46.950 - 00:12:54.006, Speaker A: Right, right. Interesting. So let's get into Phoenix right.
00:12:54.030 - 00:12:54.478, Speaker C: Yeah.
00:12:54.606 - 00:13:02.714, Speaker A: You guys have built something that on the surface is just another order book, Dex, but underneath it actually runs in a pretty different way.
00:13:03.454 - 00:13:10.508, Speaker B: Yeah. I mean, I'm happy to talk a little bit about the history of order books on Solana and sort of how that influenced the design of Phoenix.
00:13:10.596 - 00:13:10.796, Speaker C: Yeah.
00:13:10.820 - 00:13:13.460, Speaker A: Cause the first one, really, to launch was serum back in the day.
00:13:13.492 - 00:13:13.972, Speaker B: Exactly.
00:13:14.068 - 00:13:14.340, Speaker C: Yeah.
00:13:14.372 - 00:14:04.784, Speaker B: So serum launched, and serum was a pretty. I think serum was one of the first things that interested me about crypto and about defi in particular. Same, because when I thought about what's possible on these blockchains, what came to mind was really just this, like, xY equals K uniswap model, which I think is, like, really elegant. It's really. It's really elegant. And clearly, like, it made use of the fact that you want to, like, there's clearly this demand to make trades, but there isn't this throughput that it's, like, required to make something really sophisticated throughput or, like, low fee to make that happen. And serum came around, and that actually seemed like one of the first products or one of the first smart contracts that really demonstrated what on chain finance could look like.
00:14:04.784 - 00:14:38.294, Speaker B: Really, it just like a pretty vanilla order book. And I thought that was really interesting. But I guess if you wanna go into the technicals of serum, I think there were a couple things that made the design a little bit. I think there were things that I would have wanted to improve with the design of serum. The main thing that I thought was very frustrating to deal with is the fact that serum has this cue for events. So effectively, the way that you can think about this is that every time you make a trade on serum, your trade actually goes into this pending state. It's not actually settled.
00:14:38.294 - 00:14:50.466, Speaker B: And in order to settle the trade, some third party needs to go in and effectively clear the queue of all the pending actions or all the pending trades. And this process is known as cranking.
00:14:50.530 - 00:14:51.106, Speaker C: Yes.
00:14:51.250 - 00:15:22.058, Speaker B: In order to run a crank, you basically need to spin up a server, and the server needs to constantly listen to the chain. And as new events come into this queue, you effectively need to clear the queue of all the trades to settle all of the events that are in there. And this process basically adds a speed bump into the effectiveness of how this order book operates. Because in order for everything to really clear through, in order for you to be able to withdraw your balances after you get filled out a limit order, you need to wait for this cranker to come in and settle your trade.
00:15:22.246 - 00:15:22.570, Speaker C: Right.
00:15:22.602 - 00:15:33.866, Speaker A: So you're effectively, it doesn't really impact the ability to execute a trade on serum. But if you want to actually settle funds out and make new trades or withdraw it to your wallet, that's where the crank really comes into play.
00:15:33.930 - 00:16:12.790, Speaker B: Exactly. Whenever your trades are in this waiting queue, your funds are in limbo, which is kind of frustrating to deal with because you basically need to wait for this cranker to come in and imagine there's only a couple crankers running. Or maybe in the worst case, there's only one cranker running and the server just crashes. Um, now all of the trades are in limbo, uh, for as long as it takes for that server to spin back up. Obviously, like this, in theory is a solvable problem. People can run their own crankers to do this, but just from like a, I guess thinking about trading in a vacuum. Um, this design basically, like abs, like, a lot of the things that are abstracted away from you as a trader are now like thrown right in your face.
00:16:12.902 - 00:16:13.574, Speaker C: Yeah.
00:16:13.734 - 00:16:29.186, Speaker B: If I'm market making on serum, I need to think about the fact that like sometimes my funds are going to be stuck in limbo. And if my funds are in limbo, I need to sort of recalibrate the way that I manage my capital because I know that I have some inflow, capital inflowing, but at this point in time, I actually cannot access it because it's in this queue.
00:16:29.290 - 00:16:29.818, Speaker C: Right.
00:16:29.946 - 00:17:12.902, Speaker B: And so with Phoenix, I think, like, or I guess with serum, the engineering design flaw that I see here is effectively like putting this, like putting the speed bump in what's known as the hot path, right? So you have this, like, you have this, you have this system where you want it to move really, really, really fast. Uh, you want it to be like pretty seamless and then right in the middle you throw this massive speed bump in there. Um, and to me this feels like just, uh, like flawed design where if you can avoid this, that's probably going to make the experience for, uh, all the users. So that includes like the retail traders who are interacting with front ends that interface with the smart contract as well as the market makers who are providing liquidity on this venue. Uh, both their lives should be a lot easier, um, if you remove the speed bump, right?
00:17:12.998 - 00:17:31.774, Speaker A: So I think, you know, anyone from the outside can look at serum and be like, oh, the cranks were a problem. What was the reason, as far as you understand it, that cranks were in the system? And again, as you guys go and built Phoenix, Phoenix famously is crankless. So what did you guys have to overcome to actually remove that restriction from the system.
00:17:31.854 - 00:18:17.944, Speaker B: Yeah, that's also a really good question. So the main reason for the crank in the first place is you have this fundamental problem of dealing with asynchronous requests to trade on the venue, the order book. The way that it works is that it's ordered by price and by time. And so if a new order comes in with a price that's better than the best offer or the best bid. So just for the example, let's say that I'm trying to buy on serum or on an order book with a crank, when I place my buy order, I actually don't really care who I'm getting matched against. I just want to get the price. Let's just say at the same time that I make this buy order, you come in and you make a sell order, and that sell order improves the price that I would get.
00:18:17.944 - 00:18:23.248, Speaker B: Effectively, if the best offer is currently at dollar ten, you place a sell order at $9.99.
00:18:23.376 - 00:18:24.084, Speaker C: Yeah.
00:18:24.464 - 00:19:01.294, Speaker B: When I go and I make this trade, at least with serum's design, if I don't know the identity or, like, the. Like the person or the actor who placed all those orders, I can't get matched against those orders. So if I were to get matched against your order, and I would, in this scenario, if your order was placed before mine, executed before mine, I would actually not be able to settle you, because I don't know who you are. I basically just see that there's an order on the book, and I matched it. And serum doesn't know who you are either, because one thing about Solana is that Solana requires you to pass in the state of all the counterparties that you're interacting with.
00:19:01.334 - 00:19:01.678, Speaker C: Yes.
00:19:01.766 - 00:19:09.526, Speaker B: And given that this constraint exists, effectively what happens is that your order won't get settled until the queue gets processed.
00:19:09.670 - 00:19:11.590, Speaker C: Right. Okay. Yeah.
00:19:11.782 - 00:19:24.886, Speaker B: The way that Phoenix handles this is instead of requiring you to pass in literally every single counterparty's account that you interact with, everything just goes into basically one big account.
00:19:25.070 - 00:19:25.510, Speaker C: Right.
00:19:25.582 - 00:19:46.684, Speaker B: So instead of in serum's model, you have these things called open orders accounts. And really what it is is just a kind of a. Like a list of your balances. Like, this is the balance. This is the amount of coins I have on the book. This is the amount of coins I have, sort of ready for withdrawal. And every user has one of these open orders accounts to sort of dictate what their balances look like.
00:19:46.684 - 00:20:38.250, Speaker B: With Phoenix's design, effectively, we say instead of having one open orders account for every user, we have one per market. So that one just contains everyone's information. And the really nice part about this is that you can settle everyone's balances intra matching. So as I make a trade, I know I traded with Austin and so I'm going to look up Austin's open orders data and modify it as I get matched against other orders on the book. And this can eliminate the crank because now you don't need to have an in limbo queue to allow for balances to get settled. Balances get settled immediately because, or they at least are ready to withdraw immediately because after I make this trade, the open orders object that sort of stores your balances will immediately dynamically update as well.
00:20:38.322 - 00:20:38.954, Speaker C: Yep.
00:20:39.114 - 00:20:52.510, Speaker A: So how have you gotten around? I would assume storing everything in one account, you run into two things. One is account storage limits on Solana, which do exist, and the second is potential throughputs for write operations.
00:20:52.622 - 00:21:35.594, Speaker B: Yeah, I think both of these are pretty good questions. So, in terms of running out of storage space, I think one way that you can think about an order book in general, and a problem that is going to exist for any order book is that you have this fixed supply of space, you have a fixed number of orders that you can place in the book at any given point in time. I think that's just inevitability when you have a design that works like this. One really nice thing about the Amm guys or the AMM implementation is that you actually just don't need to. Or at least the problem of dealing with finite space is more tractable. So that's certainly something that is beneficial there. I think it's probably possible to build an order book that has similar capabilities.
00:21:35.594 - 00:22:09.310, Speaker B: But at least with this v one design, we haven't really thought through what that might look like. But yeah, you're certainly right that um, you have this like space limitation. Uh, our solution is effectively like, you can, you can prove that if you have, uh, a finite number of orders, let's say that you have like a total of 1000 orders on the book. Um, if I have 1001 trader positions, there's always one trader that exists where, uh, that trader has no orders in the book. And so I should be able to permissionlessly take that trader's posit, uh, spot.
00:22:09.402 - 00:22:10.086, Speaker C: Yep. Right.
00:22:10.150 - 00:22:34.022, Speaker B: So I have 1001 slots for traders and 1000 slots for orders. Um, this is known as the pigeonhole principle where if you can locate or given this, posit, given this, like this, uh, construction, there always exists one trader has no orders. Which means that like if you were to go and take that trader's position in inside this, like, list of traders, um, you aren't actually canceling anyone's existing orders.
00:22:34.078 - 00:22:34.318, Speaker C: Right.
00:22:34.366 - 00:22:34.790, Speaker A: Okay.
00:22:34.862 - 00:22:42.608, Speaker B: And so that's kind of a nice little trick that we use to make sure that if we come across this capacity problem, there is a way around it.
00:22:42.656 - 00:22:43.568, Speaker C: Yep, yep.
00:22:43.656 - 00:22:44.416, Speaker A: That makes sense.
00:22:44.520 - 00:23:25.946, Speaker B: So your second question was about compute, and I think that's a pretty good question, too. This is more of just like, how do you write code that doesn't be really, really inefficient when you're dealing with a large amount of, when you have to deal with a pretty large amount of data, but you only use a small piece of it. Yeah. And so the most expensive piece of all of this is really going to be like data movement. So if I want to, like, copy a full order book into the smart contract and use it, that's actually extremely expensive. And, like, one thing that you can think about is like, let's say I'm interacting with orderbook. The operations itself should be pretty fast.
00:23:25.946 - 00:24:16.128, Speaker B: Like, I'm only interacting with, like, a finite number of orders. But if I had to copy the whole thing in the first place, that actually just like, trumps the cost of literally every operation I did. So even I have the world's most efficient data structure to work with here. The fact that I have to move data around is actually more expensive than any operation I perform against the book. And so the first thing that we need to do is let's get rid of all the copies. And this is a pretty solvable problem where effectively, there's just some tricks that you play with how you write the code to make sure that you aren't actually copying everything into memory when you perform these operations. Once you do that, I think that you solve the primary bottleneck, which is the cost of moving around a linear amount of data will overpower anything that involves looking at a really small slice of that data.
00:24:16.256 - 00:24:16.808, Speaker C: Right.
00:24:16.936 - 00:24:22.718, Speaker A: Definitely. Interesting. I guess you guys are probably pretty excited about runtime v two.
00:24:22.856 - 00:25:14.108, Speaker B: I think that it's, in theory, exciting, but in practice, the way that I view it is when you're trying to build products, you really want to rely on existing infrastructure as opposed to rewriting things from scratch. I think a lot of application developers probably feel this way, where you have these really, really cool tech innovations coming out. I think that what generally happens is that if there are incentives to do this, incentive has been like, it turns out that if you use this new system or new framework, your programs run more efficiently and the users pay less. That becomes a very, very valuable thing to consider doing. But if the benefit of rewriting the system is not a ten x improvement, then there's a lot of friction to effectively do everything to get from scratch.
00:25:14.196 - 00:25:30.872, Speaker A: Yeah, yeah, that's fair. The same thing is true of token extensions, too, where this is a very powerful new framework, but it requires people to think about how they deal with tokens, both on something like an order book side, very differently. When you have things like transfer hooks.
00:25:30.968 - 00:26:32.048, Speaker B: Yeah, exactly. You have all of these things that are, I think, in theory, extremely interesting, and you could build probably some really great products around them. But for people who are building applications or have existing applications, there needs to be a very concrete reason why they need to sort of take on this additional one is risk, right? Yeah, like, risk is big. I think that, like, smart contract developers should always be thinking about risk. Security is like, number one. And so evaluating the risk of adding a new feature change is really important and also, like, weighing the impact. Like, if they were to go and make this change to their smart contract or the application is, do they actually expect to see the results they were looking for? Really, is it worth the risk that they're taking on by making this change? I think that's sort of how I view it, where you have a lot of these interesting innovations, but in practice, there needs to be something that pushes people to make these changes that benefit them and their product in the long term.
00:26:32.136 - 00:26:32.832, Speaker C: Yeah.
00:26:33.008 - 00:26:40.204, Speaker A: So some people have described Phoenix as a hybrid defi system. Would you agree with that characterization?
00:26:40.624 - 00:27:04.928, Speaker B: I would not agree with that characterization. I think it's pretty much. Excuse me. I think it is full defi. It's full defi in the sense that the matching is fully on chain. That's something that you can't get from a centralized order book, Dex, where one thing that you can stay confidently with Phoenix is that you know exactly how the matching engine logic should work. The code is verifiable.
00:27:04.928 - 00:27:37.728, Speaker B: So if you went and pulled the Phoenix source code, compiled it, and compared the bytes with what's on chain, it would be identical. So that means that if you understand the properties of the source code, where it came from, you can replay exactly the behavior of the matching engine. This is not something you can do with any centralized exchange in the world. That is a black box. I think that people, basically, a lot of trading firms, a lot of their edge comes down to how well they understand how this black box matching engine works. With Phoenix, that's not really the case. It's not a black box uh, all.
00:27:37.728 - 00:27:51.408, Speaker B: All the information is there. Um, so I would classify Phoenix as a full defi system. Um, everything happens fully on chain. All of the matching, all. All of the. All the logics to do fund settlement, all of that happens entirely on chain.
00:27:51.496 - 00:27:51.792, Speaker C: Yeah.
00:27:51.848 - 00:28:03.146, Speaker A: So what are the. What are the components that you guys have decided maybe don't need to be on chain as much, and that's because that's part of how you guys are able to get a higher performance than a most existing order books. Right.
00:28:03.240 - 00:28:15.782, Speaker B: I think there are, like, actually just no things with Phoenix that are, like, totally off chain. I think there are some things that you need to do, like, kind of off chain, but this is, like, mostly for, like, cosmetic purposes or, like, data indexing purposes.
00:28:15.838 - 00:28:16.182, Speaker A: Okay.
00:28:16.238 - 00:28:19.366, Speaker B: For example, indexing events.
00:28:19.430 - 00:28:19.862, Speaker C: Right. Yeah.
00:28:19.918 - 00:28:26.262, Speaker B: So, like, keeping track of everything that happens on the order book, especially trades. Like, there should be a way to do this.
00:28:26.318 - 00:28:26.790, Speaker C: Yes.
00:28:26.902 - 00:29:03.502, Speaker B: And so Phoenix built in this, like, this logging system that basically records every matching engine event that occurs. So all the things that happen against any market, an event is mitted to the chain, and that event is picked up by, or can be picked up by an indexer that can go into database, and you can use that database to serve information about things that happen. So, for example, candles, if you want to build candles for Phoenix, that's not going to be stored on chain, but the data is all on chain in the ledger. So you would be able to sort of pick up that data and construct the candles from. From things that were extracted directly from. From the RPC.
00:29:03.638 - 00:29:03.982, Speaker C: Right.
00:29:04.038 - 00:29:08.574, Speaker A: And to be fair, most RPC's are not, strictly speaking, storing data on chain either.
00:29:08.654 - 00:29:08.870, Speaker C: Right.
00:29:08.902 - 00:29:16.174, Speaker A: If you're pulling archival data, even from an Ethereum archival node, that's not coming from on chain. That's coming from a private copy of a ledger somewhere.
00:29:16.254 - 00:29:16.686, Speaker C: Yeah.
00:29:16.790 - 00:29:24.444, Speaker B: But I guess in terms of, like, the actual state snapshot, like, what exists on the book, everything that, like, touches the market itself is totally on chain.
00:29:24.534 - 00:29:25.164, Speaker C: Right.
00:29:25.624 - 00:29:56.410, Speaker A: So there's a bit of a trend going on in some of the, like, OG DeFi protocols. You see this on Ethereum. You've seen this a little bit in cosmos where people are very seriously talking about moving core components of what we think of as fully on chain defi protocols off chain. Right. You mentioned your matching engine's fully on chain. There's a trend where matching engines are maybe starting to move off chain, and the. The function of the blockchain is now becoming purely settlement.
00:29:56.410 - 00:29:59.338, Speaker A: Do you have any thoughts on kind of that process and.
00:29:59.426 - 00:30:56.492, Speaker B: Well, I think for one thing, it sort of just shows you that like when you want to build like a real venue for a financial exchange, for economic exchange, having the resources to enable active liquidity is just kind of a, it's like a non negotiable thing to have. Um, yeah, and so like I think people are trying really hard in the Ethereum world or uh, in any world where active liquidity is a tough problem to solve this magically with some, some type of new Dex design. Um, and the way that I see this whole like moving off chain thing is effectively saying that like, yeah, I think that uh, it's definitely true that you need this active liquidity. We don't think we can solve this on the l one. And we need to take this strategy to effectively make a compromise here. I don't think it's necessarily bad. I think there are a lot of off chain systems work very, very well for this.
00:30:56.492 - 00:31:11.818, Speaker B: And the design for something like an RFQ makes a lot of sense. Effectively, you give both buyers, sellers, takers and makers the correct infrastructure to have a positive sum trademark.
00:31:11.876 - 00:31:12.118, Speaker C: Right.
00:31:12.166 - 00:31:44.526, Speaker B: Because the takers want to do something they don't really care about paying a little bit of spread. And the market makers, they know that they'll be taking a little bit of risk, but they'll charge for it. And because they cross both sides should be pretty happy when the system happens. In fact, when you have an RFQ where someone expresses their intent, it's very likely that the maker should be more competitive too, because they know that the flow coming in is likely not going to be super toxic and they'll compete with each other to provide like a tighter value for the end user. A lot of things end up working out with this kind of like economic system.
00:31:44.670 - 00:31:59.190, Speaker A: Yeah, I guess the question I would have is like why bother doing it on blockchain at all at that point? Why not? Are there real advantages from a settlement perspective compared to just trusting a totally centralized venue at that point?
00:31:59.382 - 00:32:15.926, Speaker B: Yeah, I mean, I think at that point it's like basically just a centralized venue. Yeah. So I think that like having, having the full system exist on chain is really quite nice because like you cannot get rugged by like a matching engine that's like immutable and verified.
00:32:16.110 - 00:32:29.418, Speaker A: Yeah, definitely. So what you guys are thinking about now with Phoenix, like walk me through a little bit of like where it is, what's what some of the usage has been so far and kind of where you guys are headed now.
00:32:29.526 - 00:33:10.916, Speaker B: Yeah, that's, that's a really good question. So I think like Phoenix has done quite well in the past couple of months, I think primarily due to the fact that, uh, volumes are picking up activities picking up on Solana. Uh, and that, that's, that's been really good for, I guess like all the liquidity venues on chain for spot. Um, so that's been quite, quite nice to see the surge of user activity. Um, it really sort of like, um. It gave us a lot of confidence in the thesis we had when we started the company where we thought that order books made sense as a liquidity primitive on chain. I think the main place where this demonstrates itself is the fact that the TVL on Phoenix is just far lower than any other major Dex on chain.
00:33:10.916 - 00:33:38.464, Speaker B: The only one that comes close is ifinity, which uses, it's kind of like basically a market maker built into an amm. But for the traditional amms, the TVL is extremely high and the volume they do is also higher than Phoenix, but they do it on far more volume, far more actual liquidity locked. If you think about the ratio between volume and liquidity, Phoenix's is way, way, way higher.
00:33:38.624 - 00:33:38.968, Speaker C: Yeah.
00:33:39.016 - 00:33:41.760, Speaker A: How do you think of that? Is that a capital efficiency metric?
00:33:41.872 - 00:34:14.802, Speaker B: Yeah, I think it's kind of a capital efficiency metric, though it's not perfect. For example, if you go in and you place a stink limit order bid on Phoenix for a lot of size, uh, that adds the TVL and that liquidity isn't really doing much. Um. Right. But like, I think it's a pretty reasonable proxy for capital efficiency effectively. Like the money near the top of the book, basically, the money that's uh, actually being interacted with, uh, the capital being interacted with that is uh, being utilized more efficiently. So you don't need hundreds of millions of dollars of TVL locked in the protocol to facilitate, uh, trading volume.
00:34:14.938 - 00:34:33.894, Speaker A: Yeah, this is like a piece that, at least for me as someone who does not have a professional trading background, seems very obvious that the places that can give greater capital efficiency of volume with less TVL are going to be both more profitable for liquidity providers and more attractive to trade on.
00:34:34.054 - 00:34:47.328, Speaker B: Yeah, so I think there's like, there are a couple ways to view this. One thing is that like if you have this system, it's just like very difficult for retail liquidity providers to come in, um, and like deposit their capital.
00:34:47.416 - 00:34:47.784, Speaker C: Yeah.
00:34:47.864 - 00:35:15.302, Speaker B: And one thing that's nice about um, like amm pools is uh, because they are by default passive, it's possible to run an active strategy against like an amm pool. Um, and like you could probably make money if you do this. But a lot of it just comes down to, like, familiarity with the interface and also, like, what does that, like there. There are certain characteristics of the. The venue itself that lend itself to, uh, more. More like, efficient market making. Um, but I.
00:35:15.302 - 00:35:21.598, Speaker B: I guess, like, they have this retail facing interface where people are able to deposit their capital, whereas Phoenix doesn't really have this.
00:35:21.686 - 00:35:22.150, Speaker C: Right.
00:35:22.262 - 00:35:35.838, Speaker B: And I think that's, like, the major trade off. And, like, this also contributes to the fact that there's a lot of TVL in these. These protocols because, um, these protocols don't have, like, sophisticated ways of, like, moving this capital around. It kind of just still gets governed by this math equation.
00:35:35.966 - 00:35:36.270, Speaker C: Yeah.
00:35:36.302 - 00:35:39.612, Speaker A: Like, people will treat it almost like it's a staking position. Position.
00:35:39.708 - 00:35:40.020, Speaker C: Exactly.
00:35:40.052 - 00:35:51.892, Speaker A: They'll be like, oh, I want bitcoin and I want Solana. And I don't really care about impermanent loss between the two because I'm happy holding either asset for the long term. I'll dump it in here and collect some amount of fees.
00:35:52.028 - 00:35:52.744, Speaker C: Yeah.
00:35:53.444 - 00:36:07.364, Speaker B: I think that sort of framework is how a lot of these lp's or retail lp's think about it. But, yeah, I think that almost, like, every single sophisticated market maker does not view the world in this way.
00:36:07.444 - 00:36:07.972, Speaker C: Right.
00:36:08.108 - 00:36:41.600, Speaker B: In terms of, like, what we're planning with, like, the future of Phoenix, I think a lot of it comes down to how can we extend the matching engine beyond what an order book in traditional finance can do. Because right now, if you look at Phoenix, a lot of what it does is, like, quite similar to, like, a vanilla order book. There's nothing really special about it. I think the fact that we got it to be crankless is kind of a cool innovation where no one else has really done it before, but really, every single order book in the real world is also crankless. So that's not like a step. There's not a step function improvement on, like, how. How these things operate, um, outside of.
00:36:41.600 - 00:36:42.864, Speaker B: Outside of, like, crypto.
00:36:42.944 - 00:36:43.208, Speaker C: Yeah.
00:36:43.256 - 00:36:51.704, Speaker B: One thing that you could do, though, is you can add in these little, uh. It's kind of like with uniswap V four where they have these, like, pre hooks and post hooks.
00:36:51.744 - 00:36:51.920, Speaker C: Yes.
00:36:51.952 - 00:37:25.662, Speaker B: Which I think is a pretty cool idea. Effectively, you almost make your orders themselves programmable. I think that with Phoenix, that's a pretty interesting idea to explore where your orders can have pre effects and they can have side effects after they get filled. Yep. And this is something that we're thinking a lot about for v two. What types of hooks or side effects make sense to place in these limit orders. And a lot of it kind of the intuition behind it kind of sims back to how the environment for these market makers and for the takers, right.
00:37:25.662 - 00:37:34.906, Speaker B: You have this environment where, um, people are making trades and you, you have these prices that are moving around. And, uh, there are always the situations where you encounter this adverse selection.
00:37:35.010 - 00:37:35.394, Speaker C: Right.
00:37:35.474 - 00:37:41.314, Speaker B: Where, uh, as a market maker, I know what the price is and I know that my quote that's on the book right now is not the right price.
00:37:41.394 - 00:37:41.610, Speaker C: Yeah.
00:37:41.642 - 00:38:22.006, Speaker B: Um, and I want to avoid the maximum loss possible in this scenario. And so if you can, like, write some effectively, like program your orders to, uh, be a little bit smarter against some of these situations. And it's very clear to me that you can't solve everything. Like, you can't write a hook that will, like, prevent you from getting picked off ever. But it's possible that you can write like, these helper, helpful things inside the matching engine to give these market makers a little bit of a boost. Because I think it's important for these liquidity providers in particular, to have a good experience trading. Because, like, I think one of the differences between Phoenix and I think a lot of other venues is that we think that the market maker is the most important participant.
00:38:22.150 - 00:38:22.994, Speaker A: Interesting.
00:38:23.334 - 00:38:32.094, Speaker B: Takers are important too. Takers are obviously extremely important too. But I guess takers are going to have a better experience if the market makers are happy. That's sort of how I view it.
00:38:32.174 - 00:38:32.414, Speaker C: Yeah.
00:38:32.454 - 00:38:44.110, Speaker A: It's funny because I think a lot of people view it the opposite way, which is like liquidity providers and market makers are table stakes, but they don't really matter much. What really matters is the buy side.
00:38:44.222 - 00:38:44.678, Speaker C: Yeah.
00:38:44.766 - 00:38:48.222, Speaker B: And I think that we think this view should be flipped on its head.
00:38:48.318 - 00:38:48.638, Speaker C: Yeah.
00:38:48.686 - 00:38:53.630, Speaker B: Interesting, because it is this chicken and egg problem. It fundamentally is.
00:38:53.662 - 00:38:53.782, Speaker C: Right.
00:38:53.798 - 00:39:17.872, Speaker B: If you don't have takers, you don't have makers. Right. And so you need a way to bootstrap some. But I think that if makers are unable to competitively provide quotes and be profitable, like without additional incentives, then it shouldn't. Like, I think the theme should just basically disintegrate over time. Yeah. There's no way that these things can exist in the long term if this equilibrium is not met.
00:39:17.872 - 00:39:51.736, Speaker B: And so we think that blockchains are stacked against makers no matter what. Everything's stacked against makers. Because you have this problem, as mentioned before, where the prices deviate and you need a way to cancel, you know, your prices run as a maker and also do all your adversaries and you have this like n versus one problem, right? Where like you have like 50 people trying to pick you off all at once and you're just trying to cancel. And like if you flip a coin like 50 to one, like, you're probably going to lose that. Yeah. And so if you can, if you can sort of like stack the deck in favor of the makers a little bit.
00:39:51.760 - 00:39:51.896, Speaker C: Right.
00:39:51.920 - 00:40:37.184, Speaker B: Like just sort of tilt towards their direction, that should be extremely useful for making their lives a little easier. And I think that comes down like is a bit on the protocol design side where we need to come, come up with like the right ways to sort of make their lives easier, like which types of hooks need to get implemented, which types of side effects need to get implemented. But there's also a little bit on the product side where like one thing that's always going to be true for makers is they're going to want flow. So making like a good trading interface for people to want to go and like kind of their like number one destination for making trades. Right now. That's Jupiter I think, on Solana. And honestly that's, I think it's been really positive for all spot Dexs that there is this number one aggregator to go to.
00:40:37.184 - 00:40:44.080, Speaker B: It really does make a lot of sense because now you kind of have intra Dex competition too to provide better prices for the takers.
00:40:44.192 - 00:40:59.024, Speaker A: Yeah, I mean just trading on Jupiter, it's fascinating how quickly the routes change too. It'll be like 2 seconds later, press refresh and it'll go from 80% Phoenix to 30%. It's really interesting how quickly those systems respond.
00:40:59.144 - 00:41:20.040, Speaker B: Yeah, and I think it makes a lot of sense from like just a product perspective because I think frankly as a retail user, you generally just don't care about like your slippage. It's like not a very, like, it's not something that you think about. Like you start thinking about things when they go into single digit percentages. But anything in the basis point range, I think most people just don't even think is like a, like something that like matters at all.
00:41:20.112 - 00:41:20.408, Speaker C: Yeah.
00:41:20.456 - 00:41:43.250, Speaker B: Um, but I think that like having a place that like guarantees that, or I mean maybe not guarantees, but like uh, you feel like you're more likely to get a better price on is super valuable and, and that also provides like a really great venue of competition for people who are trying to provide liquidity because like when you're, when you're quoting on an order book, you kind of know that like you need to be competitive with all these other venues in order to get flow in the first place.
00:41:43.322 - 00:42:06.196, Speaker A: Yeah. So one of the hallmarks of serum was that it was a trading pair for everything. Um, and it was permissionless to go out and actually spin up new pairs and pools. And you'd see, you know, two minutes after a meme coin launch, there'd be a pretty thin market. There'd be some market on serum. You guys have taken a very different approach. There's actually not a ton of pairs trading on Phoenix.
00:42:06.196 - 00:42:07.332, Speaker A: Walk me through that a bit.
00:42:07.388 - 00:42:29.886, Speaker B: Yeah, that's true. I mean, I think that, like, Phoenix is permissionless, so anyone can launch a pair. So that's not something that we are gatekeeping in any way whatsoever. We think that kind of goes against the whole, like, it goes against the DeFi ethos. I think it basically just, like, makes sense to, like, I think for. For market makers in particular, like, the capital is pretty valuable.
00:42:29.990 - 00:42:30.398, Speaker C: Right.
00:42:30.486 - 00:42:35.354, Speaker B: And so you should allocate capital towards where it makes sense. That's, like, the primary reason for this, I think.
00:42:35.854 - 00:42:45.674, Speaker A: Have you found that the way you build the product or the concerns of market makers has changed in going from a 0% to a 5% interest rate environment?
00:42:46.054 - 00:43:32.612, Speaker B: I don't think that has really mattered too much, because I don't think people are primarily, like, borrowing capital to market make. I think most people for spot, especially on spot dexs, are basically just using inventory they already have. I think this changes a little bit when you introduce things like leverage, which I think is something that I'm personally kind of against. For spot markets, where I think that the spot Dex itself should not manage any leverage whatsoever, leverage should happen outside the system. So if someone wanted to borrow capital and, like, use that capital quote on Phoenix, I think that's, like, totally okay, because Phoenix, the venue, or, like, the smart contract, doesn't know about this. It just treats like. It treats like $1 as $1.
00:43:32.788 - 00:43:33.164, Speaker C: Yeah.
00:43:33.204 - 00:43:43.716, Speaker A: I used to think I was not smart enough to leverage trade spot, and then I realized I was just smart enough not to, which feels like a lot of people's experience, having gone through the last bear market.
00:43:43.820 - 00:43:56.676, Speaker B: Yeah, I mean, I think that the high interest rate environment certainly affects the macro a lot, but especially in the context of spot markets on chain. Most of the people who market make on Phoenix are just using their own inventory.
00:43:56.780 - 00:43:57.212, Speaker C: Right.
00:43:57.308 - 00:43:58.104, Speaker B: Interesting.
00:43:59.124 - 00:44:05.584, Speaker A: So what's next? Are you guys thinking about new types of things that could also go on order books?
00:44:06.804 - 00:44:54.260, Speaker B: Like I mentioned, I think the main thing that we're thinking about is basically, how can we add features that sort of boost, I guess, like on the product side, how can we get more users to try the product? And then on the liquidity provision side, how can we make the experience for market makers even better? That's on the contract level. We're thinking a lot about how Phoenix V two is going to look, what things should be added into the next iteration of this product. We think that we innovated quite a bit with the first version, but I don't think we got everything right. And so really what we're thinking about is like, what do we need to do? What do we need to add into the system to make a step function improvement on top of Phoenix V one, which I think is a pretty tall order, but I think there are some things that we're thinking about that could make a lot of sense here.
00:44:54.332 - 00:44:54.756, Speaker C: Nice.
00:44:54.860 - 00:44:57.104, Speaker A: Are you thinking that's a 2024 project?
00:44:57.404 - 00:44:57.780, Speaker C: Yeah.
00:44:57.812 - 00:45:07.044, Speaker B: So we're definitely still very much in the ideation phase for how this looks, but it's definitely on the roadmap for what we're going to do this year.
00:45:07.164 - 00:45:09.900, Speaker A: Awesome. Well, I'm excited to see how it goes.
00:45:10.092 - 00:45:12.204, Speaker B: Yeah, I'm excited to build this out.
00:45:12.284 - 00:45:12.812, Speaker C: Yeah.
00:45:12.948 - 00:45:20.948, Speaker A: So if folks want to keep up to date on what you guys are building, check out code. Learn from you guys. Where should they go to learn more?
00:45:21.076 - 00:45:41.634, Speaker B: Yeah, that's a good question. So our Twitter page is Phoenix trade. That's probably the number one place to learn about updates to Phoenix, the product. You can track all of our GitHub activity on ellipsis Labs. So Ellipsis Labs is the R and D company responsible for core contributing to Phoenix.
00:45:41.714 - 00:45:42.210, Speaker C: Yeah.
00:45:42.322 - 00:45:44.746, Speaker A: And Phoenix is its only product at this point.
00:45:44.810 - 00:45:46.094, Speaker C: Yes. Cool.
00:45:46.434 - 00:45:50.290, Speaker A: Awesome. Well, Jerry, thanks for joining today on validated.
00:45:50.402 - 00:45:51.354, Speaker B: Yeah, thanks for having me, Austin.
