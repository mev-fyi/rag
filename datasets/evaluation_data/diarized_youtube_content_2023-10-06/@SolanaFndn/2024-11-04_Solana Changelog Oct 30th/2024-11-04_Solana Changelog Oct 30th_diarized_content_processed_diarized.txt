00:00:03.760 - 00:00:10.625, Speaker A: Hello everyone. Gm gm. Welcome to the Solana change log. I'm Nick from the Solana Foundation Devrel team and today I've got Jonas with me. How you doing, Jonas?
00:00:10.785 - 00:00:12.185, Speaker B: Hey, Nick. I'm doing great.
00:00:12.265 - 00:00:15.697, Speaker A: You ready for the changelog? You want to talk about some of the commits you saw this week?
00:00:15.841 - 00:00:42.037, Speaker B: I'm ready. So yeah, we found a few commits. So remove outdated Solana Ledger UDEV binary. That doesn't sound like super interesting, but what you can see here is that someone is trying to build in nixos, which is really cool, which we're going to talk about later as well, because currently it's very hard to get deterministic builds on Solana, but there's a few options. You can use Docker and you can also use nixos. So I'm very excited people trying this out. I also tried it last week.
00:00:42.037 - 00:00:55.527, Speaker B: Maybe we come up with an example at some point. Yeah, nixos is really cool. It's a very small Linux subsystem, basically where you can run your built in the next thing we had.
00:00:55.591 - 00:00:57.675, Speaker A: It's not my operating system, don't get me wrong.
00:00:58.055 - 00:01:16.271, Speaker B: After everyone builds their programs now in Nix operating system, we have a very small change here. John Cinco is moving the logging functions into its own crate just to clean up a little bit. But you may need to use a different import now in your programs. It's like Solana message syscalls.
00:01:16.303 - 00:01:59.727, Speaker A: Now this one's not quite a commit this week, but it's an open pull request for the Agave installer. So as everyone's going through the process of updating to Agave and all the version 2 kind of stuff, you need to update your local CLI as well. When you run the Agave installer in order to use the Agave tool suite, as opposed to the previous tool suite that was put out by Solana Labs, there's a chance that it could remove your local key pairs. So your config Solana directory, I think it wipes the entire directory. But make sure you backup your local key pair. So your ID JSON that your Solana CLI uses by default, back that up before you do the installation, just in case. Hopefully this PR will get merged and the script will get updated to sort of not do that.
00:01:59.727 - 00:02:02.695, Speaker A: But yeah, yeah, I heard a few.
00:02:02.735 - 00:02:09.755, Speaker B: People that it happened to, some others didn't. But yeah, be careful. Just pick up your key pair from your cache folder.
00:02:10.135 - 00:02:55.733, Speaker A: All right. And then onto some of the resources for this week. We've got this one Old Faithful, we've talked about Project Yellowstone and Old Faithful on the change log before, but. But last week actually Brian Long from Triton and the organization that's sort of behind Project Yellowstone, he was on the core dev call and he gave this amazing demo of Project Old Faithful. Specifically, what Old Faithful is, is it's storing the entire Solana ledger history on filecoin. And what Old Faithful now supports is you can run an entire RPC node off of Old Faithful and Yellow and filecoin as your ledger history. So you can do all of the things like get signatures for account and all of those historical access sort of RPC methods.
00:02:55.733 - 00:03:18.693, Speaker A: You can actually do that directly off of filecoin. It is definitely slower than having access to a full bigtable instance, but you can sort of pick and choose what information you want to pull in and the amount of data you have cached locally as opposed to having the entire bigtable instance. So this was super cool. And the core dev call was also recorded. It should be published, I think, and so everyone can check that out.
00:03:18.869 - 00:03:55.175, Speaker B: Cool. Yeah, maybe we can put a link in the description as well. But this is so cool because at the moment everyone uses the same table thing basically and now you have it decentralized and filecoin, everyone can use it, you can run your queries to it. It's really amazing. And then we have a new version of Steel, so you might have heard the native SDK that Hardhat Chat is working on and he has now a version 2. So I think this is really, really cool. We have some program examples for it as well now in the Solana program examples under the developer repository.
00:03:55.175 - 00:04:07.815, Speaker B: But what it's missing still is an idl. So if any one of you feels like coding over the weekend, maybe you could just add an IDL for it. I think it would really help its composability.
00:04:08.225 - 00:04:11.201, Speaker A: Oh yeah, you could use something like Kodama to add idls.
00:04:11.273 - 00:04:12.329, Speaker B: Did you try it out already?
00:04:12.457 - 00:04:16.737, Speaker A: No, I haven't tried it out yet, but I think I might this weekend. I might tinker around.
00:04:16.921 - 00:04:18.681, Speaker B: Yeah, it's definitely nice.
00:04:18.833 - 00:04:51.287, Speaker A: So then we've got these updates here to the Solana Explorer, Noah Gundotra now at Solana Foundation. He's been chugging away making all sorts of really useful updates to the Explorer. So huge shout out to Noah. But if you notice here we're looking at the Token program, specifically token 22 token extension program and there's some new information in here. We have verified builds displayed here that this program has been verified. And then we have multisig support so the multisig, this program has an upgrade authority that's a multisig. And you can see here it's in particular using the squads V3 multisig program.
00:04:51.287 - 00:05:08.133, Speaker A: You see all the multisig information, all the signers and everything. So this is super cool. And then there's also Verified builds are now displayed in the Solana Explorer, which is totally open source, so anyone can see how this works and look at it under the hood. But Jonas, do you want to talk about these verified builds?
00:05:08.309 - 00:05:51.137, Speaker B: Yeah. So this is a feature I'm actually super excited about. So it's being built by OtterSec and Ellipsis Labs. And what it allows you to do is basically to verify that your program that you deployed is actually built from its source code. So what you basically do is you build your program in a Docker container, or maybe later in a nix container or something like this, and then you can verify your repository towards a repository. So you put your URL of the repository and then it creates a PDA on chain that writes all the data that's needed to verify the program. And then you basically check that what you built from the repository has the same hash as what is uploaded on chain.
00:05:51.137 - 00:06:23.317, Speaker B: And this is exactly what you also see in the Solana Explorer. Now, basically what the Solana Explorer does, it does a call to get this hash, this binary hash, and then it compares it to the on chain hashtag. And then there's also a remote API for it. So you can basically send it to the auto SEQ API. And what they do, they also build it in the same Docker container in the backend and make sure that the hashes are correct. This is completely permissionless. Everyone can verify a program if you go to the next one.
00:06:23.317 - 00:06:59.699, Speaker B: Here you can see this is the PDA that is created on chain. And if you expand the arguments here, then you can see that actually all the information that you need to build this program from the repository link is here. And then you can just call the command like Solana Verify. Verify from Repo, I think it's called. And then you can actually be 100% sure that the code on chain is exactly the same as you have in the repository. So this is really cool and gives you way more. First of all, it shows more open source projects.
00:06:59.699 - 00:07:11.711, Speaker B: And then you can also be sure that the code is running that is actually in the repository. It shouldn't be necessarily more secure, but it's definitely more verifiable. And I think it's a super cool thing.
00:07:11.863 - 00:07:23.315, Speaker A: Yeah, having all these verified builds and all this work, it's been a lot of work from a lot of different organizations and having it displayed directly in the Explorer and getting more adoption within the ecosystem is going to be really, really great to see.
00:07:23.615 - 00:07:30.675, Speaker B: Yeah, try it out and see if you have any bugs. It's still a little bit in progress, but it's already very well usable.
00:07:31.175 - 00:08:00.779, Speaker A: Absolutely. All right, onto the SIMD for this week. We've got SIMD 186 that's opened by Hana from Anza and it's transaction data size specification. This is sort of actually an uneventful simd. It actually should be relatively simple to get approved. Basically this problem statement here is the way that transaction, the total size that a transaction uses, the way it's calculated is sort of non standardized, non specific. There's no specification for it.
00:08:00.779 - 00:08:32.319, Speaker A: And Han was basically proposing a specification for it and including handles some interesting things that currently exist now where sometimes certain accounts will get double counted. So it'll solve some of those problems, but then it'll make it. So the account data calculation, the algorithm, super simple algorithm, actually the way that's going to be calculated can be standardized across validator clients, which will make it a lot easier for any validator client to implement it. So that way all the information can be correct because if there's any mismatch, then the transaction just fail.
00:08:32.447 - 00:08:41.103, Speaker B: Yeah, makes sense. That's nice. So if you have any comments to this, you can always comment on the simds. I think there's some discussion already.
00:08:41.239 - 00:08:42.775, Speaker A: Yep, absolutely, yeah.
00:08:42.815 - 00:09:11.917, Speaker B: And last but not least, we have our Stack Exchange heroes. So this time leading is Mitch, actually. And then we have Jimmy, we have Childer, we have Callum and Wickham is back. And yeah, so whatever you help here, it helps the current developers and the future developers. So super happy to see so many people participating in Stack Exchange and you get these nice points. So I was happy when I get these little green points at the back, actually.
00:09:12.101 - 00:09:16.225, Speaker A: All right, that's going to wrap it up for this week on the Changelog and we'll catch you next week.
00:09:16.525 - 00:09:17.885, Speaker B: See you next week, everybody. Bye.
