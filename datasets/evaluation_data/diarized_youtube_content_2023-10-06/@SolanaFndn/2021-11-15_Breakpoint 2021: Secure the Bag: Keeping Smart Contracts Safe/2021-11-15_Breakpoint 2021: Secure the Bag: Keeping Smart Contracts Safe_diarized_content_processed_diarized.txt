00:00:20.080 - 00:00:57.590, Speaker A: Awesome. It's great to have you guys all here, and it's kind of crazy to see where we are today. And I think all of you here have, or probably will play a massive impact on the future of Solana's growth and just helping it remain secure and helping up skilled developers as well, to write better code and help us create better infrastructure that can hopefully create positive value in the long term. Maybe I'd love to start off by maybe just some quick intros by each of you, just to give some background on yourselves and what you've been working on, and we can maybe dive into some specifics afterwards. Yeah, Scott, sounds good.
00:00:57.742 - 00:01:12.514, Speaker B: Hi, everybody. I'm Scott Carlson. I'm the head of the blockchain center of Excellence at Nagra Kdowski. Nagra Kudelsky owns Kadlesky Security. Personally, I'm a 30 year cyber guy, so I've been doing this for a long time. Formerly of PayPal and some large american Fortune 500 companies.
00:01:13.814 - 00:01:34.154, Speaker C: Yeah. Hello, everybody. My name is Piotr Delas. I'm an offensive security engineer and Solana lead at Halborn, an offensive security company. I moved on from the traditional cybersecurity field to something that way more exciting if you're a hacker. Yeah.
00:01:35.574 - 00:01:46.354, Speaker D: Hi, I'm Patrick. Patrick Reich. I'm from Neodym, a newly founded cybersecurity firm that started out doing security audits for Solana.
00:01:47.214 - 00:02:17.198, Speaker E: Yeah. My name is Vitaly Evlachov. I'm pr relations and communication manager at Happy. We are basically tackling the cybersecurity protocol and the incidents after the fact of the, let's say, exploits of the smart contracts. And, yeah, I think we are kind of tackling the pivotal. And we are undertaking the pivotal role in the kind of workflow and the pipeline of the hacks and incidents of hacking.
00:02:17.366 - 00:02:54.070, Speaker A: Awesome. Thanks. So, obviously, this new ecosystem, new vm, and there's a lot of potential attack vectors, and I know some, if not all of you here have probably looked at, if not audited, smart contracts from other ecosystems before. And I'm kind of curious to pick your brain and understand what the differences have been coming from either traditional software or other defi ecosystems, or just other ecosystems in general within blockchain. And coming to that transition towards Solana, do you mind talking me through how that journey has been?
00:02:54.142 - 00:03:39.214, Speaker B: So maybe we joke about this thing called compensating controls in the traditional security world, and there's generally a stopgap if you mess up your traditional security system. And as these blockchains have gotten built in whichever one, they build the feature first, not the compensating control first. And so when you lose on a blockchain, you lose that fast. And in the traditional world, you have to hop through a bunch of hoops to actually game the system. And that, I think, is the biggest realization for a traditional security company is to realize that your exploit happens now, not I can look at dwell time and I can find them in the network and I can chase them around, because it takes a while to hack a traditional thing, and it takes instant to hack a blockchain.
00:03:39.994 - 00:04:28.174, Speaker C: Yeah, exactly. I'd like to echo that, because in traditional security, you have an army of security devices that guard the whole infrastructure, whereas if you wanted to hack a bank, you have to hack possibly dozens of people in order to get to the vault, which is guarded by five big guys with guns. Whereas if you want to hide when you want to hack a vault, crypto vault, all that's required to do that is one missing access control in the smart contract code, which is supposed to be immutable. So if it's not there, it will never be there. So it just takes one guy to spot the pitfall and trade the funds, and they're gone, and they're beyond recovery.
00:04:29.394 - 00:05:09.578, Speaker D: Well, it's actually a bit different for us because everybody at neodymium is a hacker, a CTF player, like capture the flag. Those are hacking competitions, and everybody has a different skill set. So approaching Solana wasn't that different from approaching anything else because, of course, it's vastly different compared to a lot of other things. But with everything we approach, we have to get into it, have to familiarize ourselves, have to develop tools like gain the proper understanding of the technology. So we are skilled in doing that. We've been doing that for years. And so it was.
00:05:09.578 - 00:05:18.774, Speaker D: I wouldn't say it was easy to get into Solana, but it was just a normal progression, getting into Solana and breaking things, because that's what we're good at.
00:05:19.894 - 00:05:53.240, Speaker E: Yeah. In our case, I think when we deployed on Solana from the Ethereum, the kind of essence of the Solana is higher throughput and the speed of Solana is higher. And for our use case, it's really the importance lies in the speed throughput and that we can store our database. That we can store database without paying much of the fees. And Solana kind of checks off all of these conditions.
00:05:53.392 - 00:06:01.204, Speaker A: Yeah. And the vision for you guys specifically is kind of hopefully to build this repository and be something like an open zeppelin of the ecosystem.
00:06:02.264 - 00:07:04.112, Speaker E: Yeah, I would say our kind of the utility of happy is storing the database on wallets, compromised wallets, so we can actually propagate the information about the compromised wallets in instance. So let's say a centralized exchange gets hacked. We can immediately notify other kind of connected to our protocol, other entities about the hack. And this is crucial since, let's be honest, security audits are not end all, be all solution. And I see people kind of frequently talk and blame smart contract auditors that they haven't done a great job auditing a contract, but you actually can do the, you know, the comprehensive work on the smart contract audit, and there is always an omission that you are kind of facing. So, yeah, we are kind of acting on the potential incident that can happen after.
00:07:04.248 - 00:07:38.888, Speaker A: Got it. And actually that leads into something I'm curious about as well. You know, as auditors. There's obviously a lot of pressure and expectation, and there are teams out there who kind of see getting an audit as just getting a stamp and maybe don't have a high expectation. But how do you guys feel about that? And how do you guys try to manage that and ensure that the quality remains top notch? And do you think that's, how do we change that? How do we improve the quality and ensure that we really are adding a ton of value here?
00:07:39.076 - 00:08:15.224, Speaker B: I think when you hire a security expert, you hire people who are really good at logical flows and complex systems, because if you look at what we're building today, these defi pools and these reusable, stackable things, most of the big compromises lately haven't been the encryption. They haven't been the chain. They haven't been the reusable things. They've been. I stacked this on this and I swapped that for that, and then I put it over there. And once you chain that, you know, it breaks. And that's hard for a human being to go through every possible permutation, especially when it's a one way transaction, that if you get it wrong, the money's gone.
00:08:15.224 - 00:08:47.534, Speaker B: And so we're human, right? Humans make mistakes, and the best you can hope for is that the right people have looked at it and made it safe to use, that it's really, really, really hard to make it not safe to use. Like, I think that's the goal here. And it's not just about that one contract. It's about this whole layer of stuff. You gotta watch out for the people, the front end, the wallet, the chain code, the encryption, the chain. You know, it's this whole stack of things. And without people thinking through all those layers, it's tricky.
00:08:47.994 - 00:09:44.760, Speaker C: Yeah, like, exactly. That's what we're trying to do at Halborn. Like, we try to take the holistic approach because smart contract is just a piece of a puzzle. You can ddos a front end web app through a contract because the input is not validated. One of the things that I guess would increase the security of the whole space is to just have people realize, have the developers realize, because in the end, it's up to them how secure the contract is. We've seen it, like, you hire an audit firm and you say, this is the comet you want to audit, but then there are some other changes introduced right after launch, but also after the audit, and then the auditors get blamed. And that's not kind of right because we did our job.
00:09:44.760 - 00:10:05.800, Speaker C: We checked everything. But we can't anticipate the future. We can anticipate what hackers will do on the code, on the piece of software we were given. We don't have a crystal ball, and we can't tell what are the features that are going to happen if they're not there as we audit them.
00:10:05.912 - 00:10:12.640, Speaker A: Yeah. And the community doesn't go and check the report and say, oh, the commit hash is different. They just go, oh, money was stolen. It's your fault.
00:10:12.672 - 00:10:15.324, Speaker C: Yeah, there's a stamp. It's secure.
00:10:16.304 - 00:10:54.296, Speaker D: Well, the thing is, there's a major problem because just checking the committer is just different. You can't really check what's on the chain because there's no. Currently, there's no viable reproducible build where you can match the source code to the actual smart contract that's running. I mean, that's possible on ethereum, which is really nice and which I believe is something we definitely need in Solana. Because let's say we at neodymium ordered something, we give out the report, or perhaps even on chain. We assert that, yes, we have audited this. It looks safe and sane.
00:10:54.296 - 00:11:19.194, Speaker D: To us, that means nothing because pretty much every contract includes the upgradeable loader. There might be Dao. There mightn't. So you can just change the code at any time, and there's no way to verify what's actually running there, then that needs to change. That's. I mean, yeah, it's difficult managing the expectations as, yes. You audited this.
00:11:19.194 - 00:11:57.474, Speaker D: You ordered this. It needs to be perfectly safe. We're all humans. We make mistakes. And like Scott already said, the main thing you hire auditors for is not what we call the low hanging fruits. That's the software you wrote a blog post about. But the actual logical box, the books, the interactions between different parts of the contract, between different contracts, and all the books you only see if you actually spent your time thinking about the contract and investing a whole lot of time and energy into it.
00:11:57.774 - 00:12:25.164, Speaker B: If I can add something to that, it's really important that you have a decentralized team of different skill sets, different ages, different qualities. Some are hackers, some are not. Some do post incidents, some pre incident, because that's the whole story you need. You should never trust the user to get it right. So please don't do that. You should never trust that you're the smartest one in the world because there's probably somebody smarter who has more money than you trying to break into your thing. So remember those two things.
00:12:25.164 - 00:13:05.928, Speaker B: When you're building and you have spent weeks or months or years developing this. We looked at it for two days or five days. We're certainly not experts like you are, so you have to remember that too. So when you come to us, it will take us a while to figure out what you are intending to do. Did you do it? Did you get it right? I think we've talked about this a lot, a couple of times now over the last couple of days. So help us understand what you've been trying to build. And I think part of security, and here is, if we know what you intended to do, it helps us decide if you're doing it safely and if it ends up not going safe.
00:13:05.928 - 00:13:09.444, Speaker B: Right, then what do we do after the fact? Right?
00:13:10.164 - 00:14:05.654, Speaker E: Yeah. I think from the perspective, like myself, I'm not a smart contract auditor. And I see that being in the space, cybersecurity space in general, I see that people kind of underappreciate the kind of effort that is being put in, in the reviewing of the contracts. And especially I had like two days ago browsing Coinmarketcap and I noticed that there are a lot of like doggy coins, kind of copycats, and they tend to actually use forged smart contract audits that are actually reviewing of the contract itself, but rather the kind of website content and how website looks. And yeah, it's kind of funny actually, to look through these funny and at the same time also excruciatingly painful.
00:14:07.434 - 00:14:09.778, Speaker A: Just when you think you've seen it all, you see something near.
00:14:09.866 - 00:14:41.272, Speaker E: Yeah, and the funny part is that they don't take it seriously. Although the real smart contract auditors actually are meticulous in the kind of review phase they need to. They deal with a lot of kind of, especially if it's a landing protocol, you're dealing with the large chunks of assets that worth a lot of money. So, yeah, it's kind of pitiful to see exploits of the, you know, and forgeries like that.
00:14:41.408 - 00:15:22.494, Speaker A: Yeah. So, you know, this is the developer stage. I'm sure there's a ton of devs in the crowd as well, like kind of diving into something a little bit more tangible. It's probably hard to get into the details, but as a mental framework or things that you've seen as issues within the Solana ecosystem while auditing or just simply doing peer reviews, like what are some of the key low hanging fruit issues that you're consistently seeing or things that maybe some of the developers here can keep in mind to hopefully write safer code and by the time it gets to an auditor or goes to production, hopefully is a little bit more robust.
00:15:24.554 - 00:16:05.200, Speaker B: This blog post that you guys did are some of the top ones. One of the strengths of Solana is its upgradeability, the ability to assign rights, the ability to allow people to operate with permissions. And that is also super scary. And if you let anybody do anything they want to your contract, they will. And that's, I think the biggest thing we find over and over and over and over is, hey, did you check to see that? That's actually your program, right? These things, these are the common ones. They've become the known things now, but they're still not. You don't just click a button and it puts it in for you.
00:16:05.200 - 00:16:11.352, Speaker B: So you still have to think, what did I write? How do I verify it's true? That's kind of what you find every time the same.
00:16:11.488 - 00:16:59.524, Speaker D: Yeah, that's what you see a lot. And like I already said, those are the low hanging fruits. What we also see a lot is people like the developers not thinking about a threat model. Like, if you have operators, how trusted are your operators, really? Because we've seen a bunch of contracts where operators are not really restricted. And if your trust model is not that you trust them, ultimately they can just rock pull the whole contract. And that's not really the way to go. So maybe when designing your contract, you should always keep in mind that you want to actually figure out your treadmill before you go to an auditor.
00:16:59.524 - 00:17:26.574, Speaker D: And another thing I want to say is that I implore to the developers, please use nice format as nice coding styles. It doesn't just make it easy for us, but if you have a good code quality, it also helps you write better code because certain patterns are always discouraged because the automatically lead to worse and more vulnerable code.
00:17:27.274 - 00:18:30.504, Speaker C: If I can add to that, as someone who has some full stack dev experience, what really highlights Solana is the separation of the say execution layer from the data layer. So we have the account model and I can understand for a dev that comes from say traditional software development, that can be exotic, let's put it this way. And it's like a database. So when you execute a program, it's like you're plugging in a database, and if you don't validate the database, if you don't know what to expect from the database, you might end up executing some data that shouldn't be there. So we're saying blockchain is really different, but if you think in terms of principles, so we all know the CIA triads, so we have confidentiality, integrity and accessibility. Or access control depends on where you find it. It's all down to the rare because the money is stolen, because access control was not implemented.
00:18:30.504 - 00:18:47.564, Speaker C: And it's just as true for Solana as for Ethereum and anything else. But it's more difficult in Solana because you have to think about the execution layer and the data layer and the controls that you have to implement are different for both of these layers.
00:18:49.164 - 00:19:07.184, Speaker A: In terms of how much of this low hanging fruit do you think we can solve with automation? And how far does automated smart contract tooling get you? And is there some tangible point you could point to?
00:19:08.564 - 00:19:46.774, Speaker B: I don't know if it's tangible yet, but there's static and dynamic analyzers which have implemented best practices over the years in other languages. You used a variable and you never called it. You used a variable but you never checked it. Like these sorts of things will show up in our Semgrep rules or whatever toolkits come along that support this. We're still learning rust as a community and how to apply it to the use cases. The tools will come next. It won't tell you that your logic is bad, but it might tell you that when you run it in safe mode that you have matched wrong or whatever you want to call it.
00:19:46.774 - 00:20:02.014, Speaker B: But we as developers commonly turn off safe mode because we hacked it together and we broke all the rules. So we can't expect the tools to help us when we don't want to use them. So please use them if they exist.
00:20:03.594 - 00:20:25.930, Speaker C: Like even if you start with compiler warnings, they are there for a reason, your program will build. But if the compiler, compiler is pretty smart. So if the compiler says there's something, there could be something wrong, not even like immediately wrong. But there's something like a variable you're not using. The compiler understands the language, possibly even better than you do.
00:20:25.962 - 00:20:26.178, Speaker E: Even.
00:20:26.226 - 00:21:07.494, Speaker C: You're a really brilliant developer, so just please don't ignore it like Rust is. Rust is a difficult, but it's also a great language. It has, I guess, like the best community in the world according to stack overflow. And you have all these automatic tools, you can find outdated dependencies. You can find like all sorts of stuff. It's out there for you. So I can't see any reason why you wouldn't do that, because it will ultimately make your life easier, and it will make our lives easier as auditors as well, because then we see you take security seriously.
00:21:08.514 - 00:22:09.224, Speaker D: Yeah, I have to totally agree. We personally wish that there were more, that there were more and better static analysis tools, because pretty much all the low hanging fruits can be prevented by using static, like missing signage checks, missing owner checks. All that stuff can be prevented not just by using the automated scanners, but use libraries like anchor. They go a long way to helping making your code more secure. I mean, they are not a replacement for audits though, because as we already established auditors, they need to check your logic that the way you do stuff is actually safe and sane and all the other de trivial box is something that of course we audit and we tell you about it and we want you to fix, but that's not what we actually want to focus on, because having a logic checked is way it's not, I wouldn't say way more important, but it's important and you can't automate it. You could never automate it.
00:22:09.764 - 00:22:42.140, Speaker E: Yeah, I think it's kind of fair to stress that the automated tools are more of a complimentary stuff rather than being, again, Bo and o solution. And if I were to draw a comparison, it's like making an incision. There are tools that can help you make an incision, but you actually need to go in the midst, so to speak, and actually deal with the issue yourself and make sure that the kind of intricacies are resolved.
00:22:42.262 - 00:22:43.408, Speaker A: Got it? Yeah.
00:22:43.576 - 00:22:53.800, Speaker B: There's an interesting comparison here real quick with math. We don't ever question using a cryptography library anymore. Every auditing company on the planet has audited it, so it's probably okay to use.
00:22:53.872 - 00:22:54.584, Speaker A: So don't.
00:22:54.704 - 00:23:05.488, Speaker B: If you invent your own math, then you come again. But now we trust it because it's gone through this process for 20 years. This stuff has not gone through the process yet. We're in the middle of that process.
00:23:05.616 - 00:23:31.078, Speaker D: That's actually a big point. If the tools, if there's libraries there that are well established and tools are there, just use them. Don't reinvent the wheel because you will make a mistake. Writing software isn't easy. It never has been. And even, even as an auditor, it's way different. Knowing that software is bad and writing good software, it's a skill that not many people possess.
00:23:31.166 - 00:24:27.564, Speaker A: Yeah, got it. And I guess, how do we, I think all of you probably are probably swamped. There's obviously a ton of requests. I feel like every audit I speak to has a backlog of several months at least. And obviously there's a bottleneck there. And I'm curious, how do you think we can, number one, encourage more security researchers from either the traditional space or ones who are interested just learning to become developers and interested in security research to come toward or come into the blockchain space? And I guess the other one as well is just trying to raise the bar for existing developers with an ecosystem through education or other means such that hopefully the workload is less in some way or a bit more manageable.
00:24:28.144 - 00:24:59.474, Speaker B: We are in this build phase, so everything needs to be audited all at the same time. The last hackathon had, what, 400 projects that all finished at the same time and send requests to three companies that do this. Of course, the backlog is months. There will be educational seminars. People will get better at this over time. There is something that people need to understand is human time reviewing is much slower than dev time building. So there's some things you should probably think about when you're launching.
00:24:59.474 - 00:25:22.452, Speaker B: If you built it in a weekend, it still might take five weeks to audit because it's some complex thing. Like that's the reality of the situation. Right. But maybe slow roll your tlv, maybe add a couple of features before you finalize. Like think about how you're doing releases so that your release ends up when we're done. Right. That kind of makes sense.
00:25:22.452 - 00:25:25.524, Speaker B: Do a module at a time. If it makes sense, you know, break it apart.
00:25:25.644 - 00:25:46.636, Speaker D: Yeah. And plan ahead. Like, don't just tell us you want an audit next week. Yeah, well, sorry, but that's not gonna work. I mean, we do need the complete completed code or at least modules, like, like separate modules. We can audit because we can't just audit it and you make changes and we don't audit the changes. That's not how it works.
00:25:46.636 - 00:26:16.288, Speaker D: So when you plan for release, always, always plan for the audit like at least a month ahead, two, three months ahead. And if you request an audit, maybe also send your timeline so we don't have to waste time requesting all the information. Don't just ask for an audit, but give us actual, tangible information about your project so we can better schedule you and cater to your needs.
00:26:16.416 - 00:27:35.138, Speaker C: Yeah, we also like to see that you actually, as developers, as project managers, because these people also reach to us. You really care about security. It's not like you want only a stamp of approval so you can launch on this or other exchange. Like, we work with some pretty big layer one protocols like Terra Avalanche, and we like to see all these people, they treat security seriously and they actually put a lot of effort themselves to make their own stuff secure, rather than just because we as auditors, we don't want to step into your shoes and tell you how the code should be written because you end up reviewing your own code. And you should never do that as an auditor or even as a developer, because if you create something, you're not really the best person to try and look for weaknesses at it because you have rose tinted glasses and everything's perfect and it just works. But then again, you have someone who might not be that involved in it from the start and they might see something that's not quite right with it. And you shouldn't get all defensive when somebody tries and points some, you know, pitfalls in your code because they're not your enemy.
00:27:35.138 - 00:27:41.802, Speaker C: The enemy is out there. We're trying to, you know, secure you from the enemy. Yeah, yeah.
00:27:41.898 - 00:28:21.780, Speaker E: I think to harken back to the encouraging, encouraging people to get actually interested in the cybersecurity and auditing smart contracts. I think the kind of concept of crypto in general is to reward. So you actually need to reward people to get into this cybersec. So since kind of crypto hinges on the idea of tokenization and so on, you actually need people to, if you want people to get engaged, you need to reward them. So I think making bug bounties and something along those lines are kind of useful in this regard.
00:28:21.852 - 00:28:22.908, Speaker B: Yeah, that helps.
00:28:23.076 - 00:28:47.004, Speaker D: Well, book bounties are an essential part of getting, like, security research into the field, researchers into the field board. Also from what I've gathered from other researchers is a lot of researchers are freelancers and they need money to pay the bills. So maybe offer an option to not pay them in tokens that are locked for a year because you can't eat lock tokens.
00:28:47.044 - 00:28:48.544, Speaker A: That will be Solana.
00:28:51.044 - 00:29:24.368, Speaker D: I mean, an example model we've seen sometimes is offer a set reward in stablecoin or whatever, you can cash out on offer twice the amount, twice the current rate in log tokens. That's one way. So it's always cheaper for the project to hand out a token. We understand that, but it's also better for the security research. If they have an option to pick the, the lump sum, that's better for them at the moment.
00:29:24.496 - 00:30:08.406, Speaker C: One thing that we also encourage people to participate in, because bug bounty is basically working, but before you start working, you should actually learn it. And what's best for learning in hacking ctfs platforms like Hackthebox, things like that. We have these for Ethereum. We can't see all that many in Solana, and they're great because it's like taking baby steps. You learn access control, you learn all the basic stuff. We do find issues with business logic, but usually the issues are quite simple and they could be easily avoided if you did like basic training that's user friendly and explains each and every step as you go through it. So that's something I'd love to see in the space.
00:30:08.590 - 00:30:27.988, Speaker E: Yeah, I think partially the initiative should come from Solana itself, so that actually projects that deal with the security have a leeway to actually work in this field and actually expose their expertise in this kind of regard.
00:30:28.036 - 00:30:52.466, Speaker A: Yeah, yeah, fair enough. Well, good feedback for us as well. And you know, there's a workshop tomorrow I think the neodymium team will be hosting. I've also seen like paradigm start to launch like some ctfs earlier this year. You guys, obviously neodymo did a CTF as well. And I hope to see more, you know, whether it be Halbourne or Kudelsky, get more involved with workshops and ctfs longer term. I think that'd be awesome to see.
00:30:52.610 - 00:31:02.690, Speaker B: I did want to say thank you to you because you individually helped most of these projects come be safer. You sent them to us. And so thank you for being a leader in that because.
00:31:02.882 - 00:31:10.826, Speaker A: Happy to help. Happy to help. Yeah, that's pretty much a time for us, but really, really enjoyed it. Thank you so much, guys.
00:31:10.930 - 00:31:12.840, Speaker D: Thank you. Thanks for talking.
00:31:12.912 - 00:31:20.744, Speaker A: Thanks. Alright.
