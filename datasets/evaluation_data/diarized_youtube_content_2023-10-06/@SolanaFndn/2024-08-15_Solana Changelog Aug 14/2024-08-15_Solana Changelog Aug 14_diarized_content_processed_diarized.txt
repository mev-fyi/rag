00:00:03.840 - 00:00:09.070, Speaker A: All right, welcome everyone to this week's Changelog. My name is Jacob. I'm joined today by jonas. Jonas, how are you doing today?
00:00:09.190 - 00:00:11.782, Speaker B: Hello. I'm doing great. Looking forward to the changelog.
00:00:11.886 - 00:00:34.754, Speaker A: All right, so the first thing that we're going to jump right into is SIMD 164 extend program checked. So what they're doing is they had an instruction for extend program in the past. It's live today. You can use this to increase the size of your Solana program. This one, I'm guessing is just doing. It's basically, you have a check size and it's adding some information to check it, right?
00:00:34.922 - 00:00:51.210, Speaker B: Yeah, it's basically just adding an owner check. So now only the owner of the program can actually extend it. So you can't annoy your friends anymore by extending their programs. So that's sad, but I think it's a good change, especially for consistency, that they all now check for the correct owner.
00:00:51.370 - 00:01:01.732, Speaker A: Yeah, so it's a good change. This is just simd. It looks like it's going to pass pretty quickly. It was only created a few days ago at the time of recording, but it's a pretty simple change.
00:01:01.876 - 00:01:15.520, Speaker B: Then we have a bunch of commits. So first of all, runtime core BPF migration ed checks for executable account. So I think that this flag was actually removed, but now it's going to be reverted and coming back. Right.
00:01:15.980 - 00:01:20.740, Speaker A: I was wondering how they were going to check executable accounts when they were moving.
00:01:20.780 - 00:01:30.532, Speaker B: I was thinking they would always just check. The owner would be the BPFloader program. But I guess there's some edge case where they can't do that and that's why they have to revert it. That's how I understand it.
00:01:30.636 - 00:01:50.800, Speaker A: Yeah, that makes sense. I guess that makes sense. But yeah, they apparently found smudge case. They reverted it. This is in the runtime core BPF migration, so it's not there yet. We don't have the core BPF migration for a while now, but it will happen eventually.
00:01:51.140 - 00:01:58.728, Speaker B: Yeah. So the one bit will stay in all the accounts, I guess. It's not too big of a deal.
00:01:58.904 - 00:02:32.104, Speaker A: No. And then in other updates they made some changes or they made some examples using the SVM API. For those that don't know, there is an external crate for the SVM. This is the Solana virtual machine. It's basically the runtime of everything that you can do to do stuff with the runtime. Things like Eclipse and a few other projects are trying to use this type of thing to extend the SVM so this is an example that was created by Joe of how to use the SVM. There's some kind of like it's a.
00:02:32.104 - 00:02:41.380, Speaker A: What is it, a payment channel example, I believe. So it's really, really cool. Definitely go check it out if you're interested in building on the SVM.
00:02:41.880 - 00:03:05.514, Speaker B: Yeah, I think it's good for all of these projects that try to build roll ups or L2s or ephemeral roll ups like magic blocks, Sonic Eclipse and so on. So yeah, it's nice that this is going to be easier. And I think the next one goes into the same direction. Right. So add flag to clone features set from a cluster. No, it's actually not. This is for the local validator.
00:03:05.514 - 00:03:52.268, Speaker B: So the cool thing is now when you run your local validator and there were a bunch of problems recently, like there were some people who had like a program which worked locally, then they deployed it to Devnet and then it stopped working with some stacks frame errors. And this was because there was a feature which was activated locally but not on Devnet or Mainnet. So you would only see the error when you actually deploy the program. Of course it's really bad because you are testing in production and now you can very easily locally just have a clone feature set and then you can just get all the features. How are they currently activated on Defnet or Mainnet? And yeah, this makes it very easy because before you had to figure out the flag feature, Flag ID then deactivate only that feature locally or activate it. So yes, a really nice change, I think.
00:03:52.364 - 00:04:14.362, Speaker A: Yeah, it makes it to where all the people that had confusion about this don't have to have confusion anymore. You have to be very specific when you want to use the development. Or I guess in a future change it will be very specific to when you do the development feature set so that, you know, I'm activating all features versus just what's on main beta.
00:04:14.556 - 00:04:18.370, Speaker B: Yeah, or if you want to test like a feature before it's on mainnet or something.
00:04:18.670 - 00:04:58.330, Speaker A: Yep. In other local cluster news, there's another commit for custom genesis size. This is so that people could make basically put more accounts than would have previously been able to fit in the genesis to speed up some of the setup process. So it's pretty cool that this is being added. This kind of helps out with both local testing as well as potentially like extending the SVM as well. Like if you do, what is it, the permissioned permission environments, the SBE, salon permission environments, so that you can do more customizations on your cluster so it's cool to see this change.
00:04:59.070 - 00:05:08.286, Speaker B: It's really cool. I think it's like also when you start up your SVM you could already load a bunch of programs or something like this, so that what lucid does, I think, right?
00:05:08.398 - 00:05:18.894, Speaker A: Yeah, Lucid does this. You can also add a bunch of BPF program flags on your Solana test validator. One startup, but apparently you could hit limits, which I was not aware of.
00:05:19.062 - 00:05:32.510, Speaker B: Me neither. But it's good that this is fixed. And then we have a new version of the platform tools and it's version 1.42. And what's new here.
00:05:32.670 - 00:06:17.450, Speaker A: So what was new in this one is that you could build with the compiler tools previously and now not know that you were going to run into a stack frame limitation until you deployed and started running your instructions on production, which is a huge issue. Right. You want to know at compile time that you're going to run to these stack frame issues instead of when you deploy and you write all the code to interact with your smart contract, and then you finally get those stack frame issues. So this is a great change. It also, when you run into stack frame issues, you can, it could potentially not tell you that it's a stack frame issue on the runtime. Because it's a stack frame issue, you might hallucinate some errors. I've seen that before.
00:06:17.450 - 00:06:22.838, Speaker A: So this one will tell you on compile time and you'll never run to those hallucinations.
00:06:23.014 - 00:06:38.300, Speaker B: This is way better. I saw a bunch of complaints about this recently and tried to investigate with people, and it's so much better to have this at compile time instead of testing in production. This is really, really fun. When will this go live? Like, do you know?
00:06:38.460 - 00:06:45.964, Speaker A: So we got back ported to 1.18, so it's going to be in the new version of 118.
00:06:46.132 - 00:06:56.124, Speaker B: Perfect. That's really nice. And talking about new versions, we have web3 JS has a release candidate.
00:06:56.292 - 00:07:40.620, Speaker A: Yes. So all the different changes that you've probably been aware of or we've talked to about throughout the year, it's actually more than a year at this point on the new web3 JS 2.0. So there's a ton of changes too long, didn't read. It's a very tree shakeable, it's very small, and it can be like the I O speed is like 700 x better than the old web3 js. Yeah, it's kind of crazy, but it's a little, it is a little bit earlier. It is a release candidate, so if you want to test out the new version 2.0 before it's fully tagged and give feedback to make it better.
00:07:40.620 - 00:07:56.100, Speaker A: Definitely check out the release candidate and see what you can make of it. See how you can build on top of it. Because once that 2.0 gets tagged, we'll have to work with it and update the devx later. But yeah, it's exciting to see this finally happen.
00:07:56.440 - 00:08:24.276, Speaker B: Yeah, give feedback early and there will also be a new wallet adapter for this. And what it also does is it makes the web3 J's package way smaller. So now that you have all these different packages here, you can only use the one that you actually need. And I heard before like the loading times for really long, if you just use web3 js and now you can actually only use the stuff you need, which makes your pages faster in loading times and probably use let's have memory. And yeah, overall it's going to be good to try it out.
00:08:24.308 - 00:08:50.862, Speaker A: Yeah, some of the packages are like tools as well, within it, like there's the errors. What I've, I've used that before and what you, what it can do is it can you given a specific error that you were that was thrown in your smart contract, you can use the slash airs package to then give you a more verbose information about the specific error. So it's pretty cool to see.
00:08:51.046 - 00:09:22.322, Speaker B: Yeah, I saw that. It's really, really cool before you had to pass the result string or something, and now you can actually check for a certain error. So it's really nice. And last but not least, we have a deprecation warning for everybody. So the getstake activation function will be deprecated in 2.0, but it's not a big deal. I mean from some of them maybe it is, but you can replicate the functionality of getstake activation actually in the client in JavaScript, and that's why they removed it.
00:09:22.322 - 00:09:54.246, Speaker B: There is this repository now under Solana developers where you can find a JavaScript example and a rust example. If you go in here into examples, you will see an example and then you go into source and RPC, you can see this getstakeactivation function here that you can use, and it does basically the same logic as before via the RPC call. And now you can just do it in the client, which makes sense. They just removed it because it actually was never needed, or I'm not sure if it was never needed.
00:09:54.398 - 00:10:13.126, Speaker A: It was probably just really heavy on the RPC side, it's things like get program accounts is also very heavy now git programs, it's not deprecated, but it will be at some point in the future. But it's very heavy on the RPC. So there are better solutions than these on the client side than putting in the RPC.
00:10:13.278 - 00:10:25.622, Speaker B: So that's another nice feature. If you use getstake activation, make sure to update read through this example and maybe we also got to release a guide on it to show you how you can do that.
00:10:25.766 - 00:10:45.010, Speaker A: And the last thing we have is the stack exchange league. So this is the top stacking exchange contributors that we've had the past week. In the top one, we see Jimmy on top. He's been doing tons of work. Actually, he's gone up. I think he's doubled his reputation in the past month or two, which is kind of crazy. I see.
00:10:45.010 - 00:10:54.750, Speaker A: Also we see John, Mike, what is that believin? So a lot of good contributors on stack exchange. I see you, Jonas, on the top.
00:10:57.650 - 00:11:00.234, Speaker B: Nick. Yes, everyone is here. Really nice.
00:11:00.282 - 00:11:15.212, Speaker A: Yes, it's great to see contributors on Stack exchange. Remember, this helps out all developers, both current and future on Solana. So definitely contribute up, vote good questions, good answers, and make Solana development better for everyone.
00:11:15.316 - 00:11:16.828, Speaker B: And it's fun to collect points.
00:11:17.004 - 00:11:22.640, Speaker A: Yep. So that's about it that we have for today. Thank you for joining us and we will see you next week.
00:11:23.060 - 00:11:24.332, Speaker B: See you next week. Bye.
