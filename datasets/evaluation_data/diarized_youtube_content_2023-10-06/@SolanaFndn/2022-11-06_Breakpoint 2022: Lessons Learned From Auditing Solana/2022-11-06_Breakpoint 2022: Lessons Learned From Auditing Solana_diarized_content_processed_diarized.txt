00:00:04.600 - 00:00:32.014, Speaker A: Hello, everybody. My name is Piotr. I work at Halbourne. Offers full suite security services for blockchain companies. And what I'd like to show you today is what I'd like to talk about today is lessons learned from Solana program audits that we did at Holborn. So let me see. Okay, so I have some background in it.
00:00:32.014 - 00:01:09.874, Speaker A: So web3 cybersecurity is like one of the recent things I've taken up. And what I'm going to show is what we've seen, what you guys are building. What is the security impact of all your work? Let's just start with, I'm going to show you a bunch of charts. And just please remember this is data you guys created. I'm just showing it to you. You created those slides. I'm just presenting them, starting with, I suppose, most important metric of them all.
00:01:09.874 - 00:01:48.518, Speaker A: So just looking at this chart, we can immediately tell that one of, like we see, like, there's, on average, there's like about eight vulnerabilities, eight findings in every project, and like one of five is really, really like critical or high. So the severity is, you know, is very high in this case. So like eight up to ten. So you can see there's a sum of likelihood. This is our metric, how we measure severity. So likelihood one to five, five is like most likely and then impact one to five. Again, five is like the most devastating impact.
00:01:48.518 - 00:02:27.774, Speaker A: So we can see like, you know, from eight to ten. So like really, really bad, bad issues, bad vulnerabilities. It's just one in every five. So this is something concerning, I think. And then looking at the another chart, we can see what's the ratio between users and protocol in terms of the affected party. So it does seem like users are impacted way more often than protocols. Again, if a protocol is impacted, then users are usually impacted as well.
00:02:27.774 - 00:03:20.014, Speaker A: But in general, users are way more vulnerable to attacks than protocol vaults or config parameters. And just looking at types of impact, we've noticed. So what we can see that almost one in ten issues is loss of funds. Now that's obviously like the most devastating thing that can happen to a protocol, losing their users funds or the protocol funds. Then we can see that we have. If you look at the issues here, for example, denial of service, that's a web two problem. So you might think that it's not applicable to web3, but it is.
00:03:20.014 - 00:04:09.346, Speaker A: It's not that common, but it's still there. Same thing goes for a loss of privileged access and some other types of vulnerabilities like susceptibles, which means it may happen, but not necessarily going forward. Now, we can see why those vulnerabilities pop up in the programs you guys develop. So we can see that one of the most prevalent causes here is sanity check missing and sanity check. It's just usually one ifs statement. So one if statement is something that, you know, prevents bad actors from accessing your protocol funds. And, you know, like, it's almost 20%.
00:04:09.346 - 00:04:39.702, Speaker A: Again, it's almost one in five. Next, we have edge cases not handled. Again, it's a really simple if statement checking. You know, if a value does not exceed, like, like, you know, something you guys can expect. And then we have poor business process design. So, meaning the logic that was implemented could have been implemented, you know, in a more robust or better way. And again, it's like 15% in 15%.
00:04:39.702 - 00:06:04.474, Speaker A: So it's as we can see in the, at the other issues, it's still quite common, which is interesting because, like in traditional web security, usually insufficient input sanitization. So basically, input validation is the number one cause of vulnerabilities, whereas in Web three, it's like somewhere in the middle, which, you know, which, you know, paints really nice picture how, you know, different root causes of vulnerabilities in Web three are to web two. And just looking at the critical vulnerabilities, so obviously, like, the most often we see like almost three out of four critical vulnerabilities are about loss of funds. So there are different types of fund loss vulnerabilities. So one obvious, like one is draining use of protocol vaults, but also stealing and bypassing fees. And something that might not be that obvious is rent stealing, meaning closing accounts on behalf without proper authorization, and in consequence losing the rent. Then we have loss of privileged access, meaning you guys just lose control over config accounts over the entire protocol.
00:06:04.474 - 00:06:56.658, Speaker A: Users, in turn may also lose access over their own accounts, incorrect processing results. That's a sort of a consequence of poor business process design. Meaning like, for example, mathematical formula was implemented incorrectly. Or, you know, there's like a step in business logic that can be bypassed in certain circumstances. And we have also denial of service in just 7% of cases, meaning your users cannot access, they cannot interact with your programs. So this is quite critical because it threatens the entire business model. Now, looking at root causes now, we can say this is pretty evenly distributed here.
00:06:56.658 - 00:07:38.154, Speaker A: So insufficient input sanitization, somewhat similar to web two, is the most common cause. So we have 36%. So more than one in three root causes is exactly insufficient input sanitization we have poor business process design. So again, implementation issues, insufficient access control, the famous signage check missing, or more generic identity check missing. And we have sanity check missing. So just one if statement that should check, that ratio should be lower than 100%, that's missing. And that's why fees are charged way over what it should be.
00:07:38.154 - 00:08:33.794, Speaker A: Now to something even more interesting, we're going to have a look how encore framework improves or how anchor framework affects program security. So I imagine right now most of you, if you're building, you're building with anchor. So you know, you might think that because it's a framework, like it implicitly makes your project more secure. So let's have a look if that's exactly the case. So looking at vulnerability severity, so how many issues that we found were critical or high. So, you know, it's not a copy paste, those charts are very much similar. So looking at that, especially those most critical issues, so the highest severity, we can see that those values are pretty comparable.
00:08:33.794 - 00:10:02.068, Speaker A: So, you know, again, this might mean there might be an issue in, you know, sort of understanding how you can utilize framework in your protocols. And when we look at the sort of lower severity issues, then again there are pretty much the same. Like, I guess the key takeaway from here is, I mean, regardless if you develop a native Solana without any frameworks or you develop with anchor, there's like the chance you're going to make a mistake and someone may exploit it or an auditor is going to catch it. Well, it's pretty much the same. Now, looking at what issues are, you know, most, you know, common, so low, obviously we have low quality of service and that's a very broad term. So low quality of service means, you know, for example, generic error messages or missing on wraps or, you know, just sort of a very complex instruction, data sets that make it a bit awkward for users to interact with. So then that may in turn means there's a loss of revenue or, you know, some other projects may not be willing to work with your project because interacting with it is, it's not fun, it's not, you know, it's like the user experience is something that could be improved on.
00:10:02.068 - 00:11:22.880, Speaker A: We have also corrupted data and we can see that it happens more often with anchor programs than with native programs and corrupted data, meaning you end up saving state that is pretty much invalid. Then we have increased operational cost. Now this covers like two categories because we have protocol operational cost and we also have client or user operational cost. So if you have increased user operational cost, that means users pay more fees, transaction fees for using your protocol because like the implementation is suboptimal, whereas if there is a protocol, increased operational cost, that means you might have implemented some dead code. There may be some tautology expressions, there could be some redundant state variables, which means it's more expensive for you to deploy the program, and if you want to upgrade it, it's going to cost you more too. Looking at lots of funds, we can see that it happens twice as often in Alcor programs compared to native programs. Loss of privileged access, it's more of a problem in native Solana, low Ci CD rating.
00:11:22.880 - 00:12:25.372, Speaker A: That's something that comes from the web tool world, and that means your guys might be using components with known vulnerabilities, outdated packages, crates. So if someone were to plug your project as a dependency, so in a CI CD pipeline the score would be appropriately lower. Loss of privilege access. Again, more of a problem in native programs. Same goes for denial of servers, missed revenue increase opportunity. So for example, you know, you give an opportunity, you give the possibility to users to, you know, for example, set fees to a value that's too low, so your protocol earns less from user interactions. Ineffective business process that might be kind of cryptic, but pretty much what it means is you implemented a feature that does nothing, and it might sound like something that doesn't happen, but it actually does.
00:12:25.372 - 00:13:26.970, Speaker A: And we also have lots of rewards. So this is quite different to lots of funds because funds are something that someone entrusted to your project, and if they lose it, they lose something that entrusted to you. However, lots of rewards, something, you know, optional. You know, you, it's like a yield farm that, you know, you can get some tokens from it, but if you lose those tokens, you technically don't lose your funds, you just lose the rewards. So it's not, it is critical, I definitely agree, but it's not as critical as using you as losing your capital. So looking again at root causes, we can see how Angkor abstracting away most or many of low level operations help mitigate the feature not implemented root cause. It's almost twice as, almost half as common as in native programs.
00:13:26.970 - 00:14:05.196, Speaker A: Because obviously in native Solana, in edge case you have to implement your own serialization format. Anchor does it for you. So feature not implemented is not that much of an issue. However, insufficient input sanitization. Now you might think anchor does so many things for you, it's virtually impossible to accept invalid input, but it seems like it actually is. And compared to native Solana it happens a bit more often. Could be because you have to implement some so many things when you develop the native solana that you do it sort of automatically.
00:14:05.196 - 00:14:46.536, Speaker A: Again, insufficient access control is more of a problem in native programs because encore does a lot of that for you. Business process design, it's pretty much comparable. Sanity check missing happens a bit more often in encore programs. Edge case not handled again happens more often in native programs, again, probably because encore does so many things for you. However, if you've ever run cargo expand on an encore program, you'll see a lot of code. So that means there may be some redundant state on transmission data required by encode program. Best practice is not followed.
00:14:46.536 - 00:15:35.714, Speaker A: Well, it's kind of natural. It happens more often in native programs because best practices are somewhat automatically implemented by encore. Missing documentation. So that's, you know, that's what that means is error messages are not verbose enough, or in general, documentation is lacking some quality, or the error messages are misleading or too generic. It's bit more often in encode programs, but still it's a very low value anyway. And components with no vulnerabilities, that's pretty much the same in both. Now, looking at root causes for loss of funds vulnerabilities.
00:15:35.714 - 00:16:33.872, Speaker A: So this is something that happens in almost half the anchor programs that we've audited. So insufficient input sanitization. So even though you have all the constraints, all the conditions you can implement with anchor attributes, still you could do better with input sanitization. However, access control is a bit more of a problem in native Solana programs. Same goes for poor business process design. However, sanity checks and edge cases, that's a problem in encore program, albeit it's not that common. So like guess key takeaway in native Solana programs, what you really need to pay attention to is just doing that signer check and just looking at your business process implementation.
00:16:33.872 - 00:17:13.392, Speaker A: If you did handle all the cases, even though you did not think of initially just having tunnel vision or on the happy path. So like, you know, you might think what are, what could be common issues in encore. I mean, it does so many things for me. And like there are two, which basically boil down to one thing. So we have those two properties of encore context, which, and one is remaining accounts. So remaining accounts. So with Angkor programs, you basically know what accounts you expect.
00:17:13.392 - 00:17:54.286, Speaker A: So you define the context, but you might have some, you know, edge, some business logic edge cases where some account might be optional, and that's where it goes. It goes to the remaining account slides. And what's important is what, what we can see here, this is account info. Account info is like barebones Solana account metadata. So that means all encore security checks are not applied to a remaining account. So if you do use remaining accounts, please remember to do the signer check, do ownership check. Please try and avoid type confusion.
00:17:54.286 - 00:18:55.684, Speaker A: So all the five common Solana vulnerabilities, they can apply to remaining accounts. And same goes for unchecked accounts. Now, the name is quite verbose, but it still happens that unchecked accounts remain unchecked in the code. And unchecked account means, basically, you don't know in Ankor, you cannot specify the type of the account because you don't know it, or there are no ankor types for that account. So if there are none, if that's the case and you do have to use unchecked accounts, please check them, because, like, all those, you know, five common Solana vulnerabilities apply to unchecked accounts too. And just, you know, looking at, you know, how the findings that we reported were addressed. So looking at, you know, there's some.
00:18:55.684 - 00:19:41.380, Speaker A: Some bad data here, but we can see that, like, in general, findings are fixed. Like, one of three is acknowledged, meaning, you know, it's not a feature. Like, it's a. It's not a bug, it's a feature, or you're just accepting the risk. And just 1% of findings are pending patches, meaning a program was deployed, but the vulnerability was not fixed. And it's pending, it's going to be fixed in a future release and getting to the last slide. So, breaking down finding studies by severity, we can see that 100% of critical findings are fixed.
00:19:41.380 - 00:20:17.814, Speaker A: So no loss of funds, no loss of privileged access and deployed programs, almost every high finding is also fixed. Just a very small part is acknowledged. Now, I guess we all can see a pattern here. So as severity decreases, so does decrease the ratio of fixed to, well, not fixed in general issues. So we can see that with medium, it's three out of four, they're fixed. With low, it's 50 50. And informational is also pretty much just as low.
00:20:17.814 - 00:20:26.994, Speaker A: So that's all I had for you today. Hope you guys enjoyed it. Hope it was informational. Thanks so much for your time and see you around. Thank you.
