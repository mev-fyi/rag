00:00:01.280 - 00:00:46.406, Speaker A: Hey, guys, my name is Nico and I'm one of the co founders of Elusive. And today I'll be talking about compostable privacy. Just kidding. Compostable privacy and how we make that happen using a type of primitive called sandwiching. But just before that, real quick, just to expand on that a little bit, why do we need privacy and web3 in the first place? A nice little anecdote I always like to tell when talking about this specific topic is that whenever I meet someone who doesn't work in crypto and I tell them that I work for a crypto privacy company, the usual reaction is just confusion. Because most everyday users or most non crypto people expect that crypto has the same privacy guarantees, or even better privacy guarantees than normal web two does, when in fact it doesn't. And when I explain that to them, I really have a reaction where someone's like, oh, I wish web two was like that.
00:00:46.406 - 00:01:21.438, Speaker A: Usually it's the exact opposite. That's quite easy to understand, because if you're an individual, you don't want your bank accounts be visible to the entire world. If you're an institution, you don't want your trading strategy or your financial history or anything to be visible to competitors. And data protection laws are a thing. And there's about 100 other reasons. So why don't we have it in web3? Because if we think about it in terms of centralization, if we have a centralized system, which we commonly do, in web two, privacy is very simple to do. You have a centralized entity, everyone sends their data to them.
00:01:21.438 - 00:02:05.040, Speaker A: They encrypt it, don't reveal it to the people who don't own it, and you're basically done. So it's very simple to do. But as we know, web3 isn't centralized. On the contrary, it's decentralized, which essentially makes privacy a lot more challenging, right? Because if you have a distributed network, you already don't have someone who you can trust to correctly encrypt everyone's data. And if you have encrypted data, which you know, you share across a number of nodes, who's to enforce that? The rules for modifying that encrypted data are being done correctly. So for that reason, big surprise, enter ZK, which is the crypto primitive that makes all this happen. But before we talk about how the technicalities work, I think one nice little example I always like to go through to explain how ZK works at a high level is this example.
00:02:05.040 - 00:02:40.306, Speaker A: Because what ZK basically allows you to do is it allows you to prove that a statement is true without revealing anything else about that statement aside the fact that it is true, which sounds a little bit counterintuitive. So I think this example is quite cool. So let's say I now make the claim. I make the statement that on this big picture here I know where Waldo, a little guy with a red and white striped hat, is. Now generally if we weren't in a distributed system, the way I could just do that is I could point someone on the picture and I could be like, he's right here. And that way you would know. Oh, the reason Nico is able to point him out is because he knows where Waldo is.
00:02:40.306 - 00:03:12.938, Speaker A: But let's assume. I only want to prove to you guys that I know where he is. But I don't want you guys to know where Waldo is on this picture for whatever reason. And one way I could do it is like this, simply covering every part of the picture except for the part where Waldo is. Because in this way the only way I could have known where to place these black squares to essentially hide Waldo or reveal Waldo and hide everything else is if I was the person that knows where he is. Except I could have also done it like this or like this. And through that, essentially you have no way of telling where I moved the initial picture in the background.
00:03:12.938 - 00:03:58.032, Speaker A: And through that I was able to prove to you that I know where Waldo is. I know that it's a given statement, but I don't have to tell you where he actually is. So again, reiterate, ZK allows you to say the statement is true without revealing anything else about that statement. Now proving where Waldo is is, you know, kind of interesting, but not that useful. So what's more useful is how can we use this type of CK technology to actually make transactions or money private in a blockchain context? So the usual primitive that's often used for this is called a shielded pool. And the idea behind a shielded pool is generally that we have a blockchain which is public by default and on a public by default blockchain. The way that you're able to move assets back and forth, the way that you're able to modify state is using signatures.
00:03:58.032 - 00:04:56.530, Speaker A: Because with a signature you can say, oh, I'm proving that I own this asset. But it has the side effect that you don't just prove you own the asset but also you reveal what your public key is, which isn't ideal and which is what we want to avoid. So we introduced a shielded pool which is a centralized, which is a smart contract whereby everyone sends their funds to that using a signature. And then later on, we have the nice property of essentially allowing to transfer funds out of that shielded pool, or within that shielded pool using a zero knowledge proof, which means an outside observer, in this case, we have the green, orange and purple actor, sorry, blue actor, who confused the centralized observer because they all transfer the funds into the shielder pool. But then later on, when they transfer them back out, they use a zero notch proof, which essentially hides all links to them. This sounds pretty cool on paper, but in terms of Solana, where we all love composability, it has the sort of bad side effect that it kind of breaks composability in a lot of ways. One of these ways is liquidity fragmentation.
00:04:56.530 - 00:05:45.358, Speaker A: And what I mean by this is that if we have the centralized pool in the current model, all that we can do is transfer funds in and out, which is kind of nice. But ideally, we'd want to do a lot more things. We'd want to swap, we'd want to lend, we'd want to have nfts in there and so on. And if we would want that to happen, we would need everyone to deploy their smart contracts on top of our shielded pool. But this would, again, in our public blockchain system, kind of suck, because that would mean we'd have a Dex, and then that Dex would have to make two versions, one version outside of the context of our shielded pool, and one version on top of our shielded pool. And this, admittedly, would then mean that half the liquidity, in theory, would flow to the one on top of our shielded pool, and half the liquidity would flow to the one outside of our shielded pool. Which means both of the DEXs would work about 50% less good, just because they have 50% less liquidity.
00:05:45.358 - 00:06:46.484, Speaker A: Additionally, the third point, asking a Dex to do this in the first place, is a pretty big ask as well, because you have to modify your smart contract, you have to get it audited again, you have to get used to, you know, how to build on top of shielded pool, and so on. And finally, the last part, if we don't have. If we can't convince all Dexs and applications that currently exist on Solana to build on top of this shielded pool, well, then you have an inherent opportunity cost from using this type of system in the first place. Because in defi, anytime you have USDC or Sol or any other asset simply sitting in your wallet and not doing anything, you're losing money to opportunity costs, because you could be putting that in a Camino pool, or doing a margin fi strategy or anything else, which would net you more funds than just having it inside of that pool withering away to some extent. So how do we solve this while avoiding these pitfalls? The answer, sandwiching. So the way sandwiching works is we take an arbitrary transaction, which is the filling of that sandwich. And this aria transaction could, for example, be a swap on a Dex.
00:06:46.484 - 00:07:55.928, Speaker A: And now, the way we can make this private without breaking all the things I was talking about previously is stupidly simple, but very efficient and very powerful. We think all we have to do is we just put the bread around our arbitrary transaction and essentially put a shielded pool at the beginning and at the end of this flow, basically allowing us to say if we have some existing Dex, which says USDC flows in, soul flows back out. For example, instead of saying we put a public key and a signature as the mechanism that invokes and receives the result of that swap, we say we put a shielded pool at the beginning to invoke that swap, and the output of that we put back into the shielded pool. Now, if we quickly go back to this, if we now compare this with the three problems I mentioned earlier, we notice it solves all of them. The first one, liquidity fragmentation, is solved because our swap, our Dex that we're swapping with, doesn't have to deploy version in our shielded pool at all. So instead of building on top of it, it's simply at the same horizontal layer, because the funds now flow out of our shielded pool into the same Dex that already exists, and back out of that Dex into our shielded pool. So no liquidity fragmentation, all of it stays inside the same Dex.
00:07:55.928 - 00:08:19.742, Speaker A: Second, funds and pool are dead. No longer the case. We can use those funds in the pool to, you know, do strategies and certain lending protocols, call other primitives and so on, to generate yield for our funds. Cool. And the final one, building on top, requires significant change. Isn't the case anymore either, because again, the protocol stays the exact same. All that changes is that we sandwich it within our shielded pool.
00:08:19.742 - 00:08:38.974, Speaker A: And yeah, that basically gets to the point of it already. So, in case you're interested in privatifying your existing public smart contract without needing to change any, anything about that, given smart contract, aside from how you construct the transaction, feel free to check us out at elusiveprivacy on Twitter and elusive IO. And yeah, pretty much gets the bon of it. Yep.
