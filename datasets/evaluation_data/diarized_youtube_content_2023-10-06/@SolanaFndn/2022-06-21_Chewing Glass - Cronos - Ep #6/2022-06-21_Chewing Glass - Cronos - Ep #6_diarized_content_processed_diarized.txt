00:00:00.480 - 00:00:05.166, Speaker A: If we can't talk to each other, we're not gonna make it. Sometimes I feel like I've been on.
00:00:05.190 - 00:00:13.294, Speaker B: More than I can chew. Most of the time, I work in a glass jar and lead a very uneventful life. A face full of glass hurts like hell when you're in it. That's weird.
00:00:13.334 - 00:00:15.278, Speaker A: That glass looks half full to me. Eating glass.
00:00:15.326 - 00:00:16.950, Speaker B: Eating glass is staring into the abyss.
00:00:17.062 - 00:00:21.274, Speaker A: Glass. Who gives a shit about glass? Who the fuck is this?
00:00:22.854 - 00:00:25.914, Speaker B: It's kind of part of our culture to eat glass.
00:00:26.854 - 00:00:29.314, Speaker C: I'm gonna get some safety goggles next time.
00:00:38.494 - 00:00:50.422, Speaker B: Hey, everybody, and welcome to Chewing glass, the show where we talk to developers building in the Solana ecosystem. Today we have Nick and Elias from Kronos, the recent winners of the Riptide Hackathon. Welcome, guys. How's it going?
00:00:50.478 - 00:00:51.590, Speaker A: It's going well. Yeah.
00:00:51.622 - 00:00:52.574, Speaker C: Great to be here.
00:00:52.734 - 00:00:58.074, Speaker B: So let's start with you, Nick. So what's your history? How'd you get into this whole thing?
00:00:58.514 - 00:01:39.374, Speaker C: My background is basically, I worked on the payments team at Uber for about four years or so, helping build out the payroll system there. And so I was working on a lot of international banking integrations and just became very aware of how broken the current legacy payment system is. I can't really even tell you the number of times I got woken up at 04:00 a.m. Because some system failed somewhere and had to email a CSV file. Some banker to push money through the system. It happens all the time. And so I heard about Solana and just became.
00:01:39.374 - 00:02:01.758, Speaker C: Had a light bulb moment, really, where I just realized that this thing is cheaper, faster, and easier to use than any existing payment rails that I know about. I got quite excited about the potential for disruption there. This was all pre kind of Solana pay stuff. And so, yeah, I mean, we dove in during, like, the ignition hackathon.
00:02:01.926 - 00:02:17.942, Speaker B: Oh, you did? Cool. Yeah. I didn't realize that, actually. I was. I was actually, when you were talking, I was thinking in my head, I was like, payments? I was like, wow. Didn't even build anything on Solana pay. So, like, you guys were already kind of rolling a little bit before that, so that's cool.
00:02:17.942 - 00:02:20.074, Speaker B: Yeah. So, Elias, how about you?
00:02:20.614 - 00:02:40.414, Speaker A: I'm pretty fresh as far as experience in industry. I did have an internship in college as a data scientist in Argentina for a bit. I then transitioned into front end development that following year and had been a frontend developer up until when I got into Solana development, but that's pretty much it.
00:02:40.494 - 00:02:55.204, Speaker B: Cool. Yeah. So with all that said you guys backgrounds. How did you guys end up meeting each other? What's the story? Are you guys both, you guys are in the same place? You guys are in the same city? How did that work?
00:02:55.704 - 00:03:09.600, Speaker C: We're both in Austin. Alias is like a few minutes north of Austin. I'm kind of like downtown. And we meet up down here a few days a week. We basically met on Twitter last summer.
00:03:09.752 - 00:03:47.884, Speaker A: Yeah, I was at Samsung before I met Nick. I was basically a site reliability engineer for this semiconductor facility here in Austin. I didn't love it. I absolutely hated it. So I was creating toy projects on GitHub just for front end development purposes just to better my skills because I wasn't really progressing that well at Samsung. I was then tweeting about it and just my philosophy was, well, what's the worst that could happen? Someone's going to see this and maybe look at my repo, who knows? Yeah. Randomly I get a DM from this guy named Nick.
00:03:47.884 - 00:04:00.428, Speaker A: He was like, hey, I like what you're doing. I looked at your GitHub. We're looking for front end developers at this front end or at this product studio that we have in Austin. Would love to grab a beer. And that's really where it started.
00:04:00.516 - 00:04:10.504, Speaker B: Oh, wow, that's awesome. I thought that stuff only happened in web3, but I guess it's happening outside of that too. So how did you find that tweet Nick in the first place?
00:04:11.584 - 00:04:55.688, Speaker C: Uh, I don't remember, honestly. It's like scrolling the timeline, you know, it's like, don't really remember what you saw ten minutes ago. But yeah, I think I saw alias tweeting maybe like a GitHub link or something. Saw he was a dev and yeah, I was just kind of looking through his projects on GitHub and found his resume actually, and everything there was kind of focused around like next js and react, which we were doing a lot with at the time. And so I figured sending a DM couldn't hurt and just kind of realized that he was based in Austin. I just moved here I think like a week or so prior. And yes, we met up and grabbed a beer and just kind of like hit it off from there.
00:04:55.688 - 00:04:57.384, Speaker C: And I've been working together since.
00:04:57.464 - 00:05:09.144, Speaker B: Very cool. There's actually, I think there's a couple other people in Austin. I believe Castle finance is there. There's actually a pretty decent university, like Solana builder presence at like University of Texas at Austin. So.
00:05:09.224 - 00:05:10.648, Speaker C: So the cheeto team is here as well.
00:05:10.736 - 00:05:11.280, Speaker B: Oh, nice.
00:05:11.352 - 00:05:14.032, Speaker A: I think Buffalo is also here, Buffalo.
00:05:14.088 - 00:05:17.568, Speaker B: The famous buffalo is in Austin. Are we doxxing him over here?
00:05:17.616 - 00:05:18.864, Speaker A: No, he's tweeted about it.
00:05:18.944 - 00:05:34.784, Speaker B: I'm just kidding. So that's pretty cool to hear this story about how you guys met. Now, let's kind of dive into a little bit, go a little bit further. Where did this idea kind of get birthed? Or what were you building and started ignition and kind of lead up to how the idea of Kronos came about?
00:05:34.864 - 00:05:56.824, Speaker C: I mean, as we were kind of saying before, we were looking at Solana initially from that perspective of payments and coming from the payments industry, we started in the ignition hackathon, building an on chain Venmo, where users could send and receive invoices and pay those back on chain. And then that rolled into a token streaming service.
00:05:57.604 - 00:06:00.828, Speaker B: Was that called Chronos, or did it have a name at the point in time?
00:06:00.876 - 00:06:56.646, Speaker C: Yeah, that was called factor at the time. What we were specializing on was the use cases of subscription payments and payroll. And specifically, we were trying to figure out how to schedule token transfers because there's these inefficiencies in the vesting contract model where the sender has to lock up future payments upfront into a vesting contract. So there's some inefficiency there, and the receiver has to go out of the way it's claiming from the vesting contract. So we thought if we could schedule token transfers, maybe that would be a better user experience. And we were working on that for a few months, got the whole system up and running. And then around February 1, 2022, when Mountain Dell was kicking off, we realized that we could generalize that protocol from only supporting token transfers to being able to automate any arbitrary instruction.
00:06:56.646 - 00:06:59.570, Speaker C: And from there, it just kind of, like, took on a life of its own.
00:06:59.762 - 00:07:01.450, Speaker B: So you guys were at Mountain Dow?
00:07:01.522 - 00:07:39.694, Speaker C: Yeah, I mean, I was at Mountain Dow before it was Mountain Dow. There was a version of it in 2021 called Mountain Compound. It was way smaller, but it was 14 of us or so just kind of, like, locked down in a house trying to escape COVID in Salt Lake City. And that was where I first met Edgar and Barrett and Baritz at the time was already working on Solana, and Edgar and I were kind of working on separate startups, but I think we both kind of got the Solana pill during that time.
00:07:39.814 - 00:07:52.406, Speaker B: Man, that's a. Wasn't expecting that one. That's a really cool story, actually. Those guys are involved in red pilling a lot of people on the Solana, so I'm always happy to hear these stories. They just keep coming up randomly wherever I go.
00:07:52.590 - 00:07:53.926, Speaker C: Yeah, yeah.
00:07:53.950 - 00:08:13.830, Speaker B: So that's awesome. So you, when you were building this payment stuff, you kind of, the idea came around. And, like, at mountain dow, and like, that, that was like, right at the beginning ish, I think of riptide. Like, TJ was just on the show. That's when he started to talk about building out mountain pay. So you guys were like, okay, we, we were doing payments. We just came up with this thing.
00:08:13.830 - 00:08:20.326, Speaker B: Like, we think we have solved a really big problem, and we're gonna kind of build this out. Like, tell me a little bit more about that.
00:08:20.390 - 00:09:14.430, Speaker C: Yeah, it started with just a proof of concept, so we just had this basic question of, can you even schedule arbitrary instructions on chain? And how do you do that? So we started by building just a basic anchor program where users could create tasks, and each task is a different account. And inside those accounts, we would store serialized instruction data with a schedule. We basically had set up a separate off chain bot process, also written in rust, but using the RPC client, which basically just watched for task accounts and then would trigger transactions whenever the tasks came due, we found that we could invoke those inner instructions as cpis that then unlocked this whole, like, okay, we can schedule any arbitrary instruction.
00:09:14.532 - 00:09:32.134, Speaker A: Yeah, I remember whenever he called me on our sync, I think it was a Monday, because he built the proof of concept during the weekend. He told me, he was like, we have factor, and it's really cool, but imagine if we just generalized it to allow for any arbitrary instruction. And I was like, oh, yeah, let's do that. That's a good idea.
00:09:33.434 - 00:09:46.134, Speaker B: Yeah. I mean, I was really stoked. I remember seeing it the first time and I saw what it was, and I was like, wow, people are really going to like this. By the way, you guys are both your technical founders. You both built out Chronos, correct?
00:09:46.474 - 00:09:47.242, Speaker C: Yeah, correct.
00:09:47.298 - 00:09:49.866, Speaker A: Mostly. Nick, let me just say.
00:09:49.890 - 00:10:04.514, Speaker B: Nick, actually, this is probably a good point to talk about what Chronos actually is officially kind of like a TLDR for everybody watching what you guys built and kind of how it actually works. At a high level, the basic concept.
00:10:04.554 - 00:10:53.960, Speaker C: Is just a keeper network for Solana. Every blockchain, at least, that we're aware of right now, kind of has this fundamental limitation in that you can't schedule transactions with a validator network. And there's a few different reasons why that's the case, but it creates challenges for teams that have background jobs or tasks that they need to run just to make their programs work. Kronos is a keeper network. To be able to facilitate that and service that. But the main difference is that kind of turning the Solana validators into the keepers for the system, rather than relying on some external off chain opaque bot network, that's required a lot of deep integration with the validator code base in order to enable that.
00:10:54.072 - 00:11:05.862, Speaker B: That is actually very, very cool. I wasn't officially 100% certain how it worked. You're using the validators as the keeper network to run these jobs on the network?
00:11:06.048 - 00:11:16.894, Speaker C: Yeah, exactly. Our v one proof of concept version was not integrated into the validator network. That hadn't even had that idea at the time. Really?
00:11:17.754 - 00:11:24.194, Speaker A: I didn't even know we could do that. Yeah, knowing that we can just build a plugin for a validator is pretty cool.
00:11:24.274 - 00:12:15.818, Speaker C: Yeah, it was around the same time we were building that initial bot that we started seeing some tweets about the accounts DB plugin framework, and that is since been renamed Geyser Plugin Framework. We just realized that there is all these scaling problems when you rely on these off chain bots and that they have to submit transactions through the RPC network, and that can take up a whole bunch of bandwidth and you have to compete with other traffic to get those transactions through. We realized there was this interface that Solana was providing and the guys at plugin framework, that we could actually spawn transactions from there. And it was much more efficient and made the system a lot more reliable. And so we basically copy pasted our bot code into the geyser plugin framework, and it mostly just worked out of the box.
00:12:15.906 - 00:12:29.910, Speaker B: Oh, wow. That's quite unusual for things that just work. So did you guys actually have to work with the validator community, or did you guys have ever set up or run a validator? What's your knowledge there?
00:12:30.082 - 00:13:15.618, Speaker C: Yeah, we have a few notes that we got through the Solana server program, which that is a very useful program. Is anyone that's looking to set up a node on Solana? We have some servers running on Devnet and Testnet right now that we're using to stress test the system. But, yeah, we've been reaching out to all the node operators we can to talk with them, and we're looking to get this thing rolled out on Devnet and Testnet quite soon. Actually, by the time this is published, it should be out on Devnet and Testnet, and we'll have quite a few integrations going on those networks.
00:13:15.746 - 00:13:51.554, Speaker B: Yeah, I'm not going to lie, just leading in the sense. Congratulations, you guys won the reptied hackathon. This was super incredible. And for me personally, I was so insanely excited to see some tooling win because, you know, like, this is just, developers need this tooling. And to see that people like watching a hackathon and, like, a lot of these, like, other in the past, like Defi protocols, which are amazing out there winning. But, like, to see developer tooling take the grand prize, like, just kind of says a lot about what you guys had built and, like, what the judges thought of it. So, like, that's quite amazing.
00:13:51.554 - 00:14:03.574, Speaker B: So congratulations. But tell me, like, what was that, like? Were you guys have any idea, any expectations? Expectations? Like, were you, like, what was your thoughts, like, going through all that, man?
00:14:05.154 - 00:14:59.284, Speaker C: Yeah, there was a lot going on at the time, even outside the riptide hackathon, but, yeah, it was quite a journey, I think, to get here. Kronos was what we wish we had when we were building factor, we kind of came upon the idea for Kronos because we were trying to build factories, scheduled token transfer service, and we're like, how do you schedule a timer on chain? And then we found out you couldn't schedule a timer on chain. There just isn't a way. So we were talking with some other teams, and I think it was, it goes by doctor blocks at switchboard. He described for us what a crank function was and how they were running their automations. And from there, we just kind of started pulling on that thread and realized that, yeah, there was all this kind of dev tooling that was missing that, like, we could build out and just started running with it.
00:14:59.364 - 00:15:07.300, Speaker B: Were you expecting to win the grand prize of the hackathon? Like, were you, like, how did you react whenever you actually found out that you guys had won? That thing was there.
00:15:07.372 - 00:15:39.288, Speaker C: Yeah, I didn't know we were going to win. We had been getting tips from a few people that, like, we were on these ever shorter short lists, but we didn't know until, like, the moment of that, the blog post went out. Someone sent it to me, and then a moment later, Twitter started blowing up. And from there, it was just like a flood of inbound messages coming in from all directions. And last few weeks have been a lot of dealing with that.
00:15:39.456 - 00:15:46.040, Speaker A: Yeah, a lot of dealing about knowing what is spam and what isn't from people. It's pretty difficult to do.
00:15:46.112 - 00:15:51.132, Speaker B: So did you guys celebrate? Did you guys go out for beers like you did the first time you met? Did you do anything true?
00:15:51.148 - 00:15:52.064, Speaker A: Did, yeah.
00:15:53.924 - 00:16:20.138, Speaker B: That's awesome, man. Like, it's. It's it's like I said, it's really great to, like, see some developer tooling win and, like, that value in that, like, this is without. Whenever I started at Solano Labs, like, a year ago, there was no developer tooling out there. This was like, then comes Armani, and then here's anchor. And then, like, now we have all these, like, indexers, and then now we have chronos and they just keep piling on. And, like, eventually we're going to reach a place where, like, every little kind of narrow gap is covered and.
00:16:20.138 - 00:16:36.474, Speaker B: And developers are going to be able to just jump in and do all the things that they could do in web two, in web3. And it's going to be a huge game changer for everybody not quite there, or we're not. Like, we're pretty far off from there. I would say every tool like this really, really matters.
00:16:36.934 - 00:16:57.228, Speaker A: Yeah. To piggyback off that, the most exciting part about this job is not only building it and dealing with really interesting engineering problems, but knowing the impact that it will have to developers and how empowering it is to allow them to automate things on chain. That's a pretty wild idea. So I'm really excited for that. Yeah.
00:16:57.236 - 00:17:26.164, Speaker B: And I think that's why, like, a lot of engineers get into building out developer tooling instead of products, because they're engineers themselves and they're like, man, like, if I was, like, on the other end of this and somebody built this tool, I'd be so stoked. And, like, how many people that outwardly impacts is probably, like, just a really incredible feeling and it's just really awesome. So, sorry, factor, but I'm glad that Chronos ended up winning, by the way. Like, was factor is just kind of sitting on a shelf somewhere right now, just like, never to be reopened again.
00:17:26.324 - 00:17:34.868, Speaker C: Yeah, we kind of just rolled factor into Kronos. Actually, the Twitter account is the same. Twitter. We just changed the name.
00:17:34.956 - 00:17:36.624, Speaker B: Nice. Okay, so it's that.
00:17:37.364 - 00:17:38.144, Speaker C: Yeah.
00:17:38.484 - 00:17:40.252, Speaker A: Dead but very much alive.
00:17:40.428 - 00:17:41.676, Speaker C: Yeah, yeah.
00:17:41.700 - 00:18:13.018, Speaker B: You would have been like, if Kronos would have never came alive, you would have been sitting at the mountain dow with TJ directly competing against each other. So that's awesome. Like, so basically, two of these projects were kind of, like, came, like the winning of the payments track. And then the grand champion of Riptide, they both came out of mountain Dow. Every time I hear about Mountain Dao and we talk about this, it's like, one more reason why, like, understanding how incredible it was out there and how many builders were out there. Building really cool stuff.
00:18:13.156 - 00:18:40.954, Speaker A: Yeah, the community in Salt Lake was amazing. Just knowing that you were in the same boat with all these developers either just getting into Solana or being in it. Just recently learning rust and learning the runtime environment and what is possible on Solana is really crazy. And everyone was trying to help each other and answered questions, and if you didn't know the answer, they would direct you to somebody else, and everyone just like, yeah, let me help you with this. Which is my favorite part about that.
00:18:41.774 - 00:19:04.462, Speaker C: Yeah, it's been really cool to see communities pop up. Also happening right now is Athens, now in Greece, and unfortunately, we weren't able to make it there. But I think we'll see over the coming months, a few more of these communities start to pop up that are a bit more longer running than just the week long hacker house format.
00:19:04.518 - 00:19:46.706, Speaker B: Yeah, I'm a big fan of the community run hacker houses and all these sorts of things like Mountain Dao, just because whenever it's built out of the community like that, it kind of just forms this other type of bond with everybody. And, like, it's just really exciting to see all that happen. This is the kind of point in the show where we kind of shift gears a little bit. We talked about that excitement, how Kronos came alive. Like, you guys went in riptide, and now I want to talk about what that experience was like for you guys. Cause this is the very important part of the show, where we talk about what kind of, like, sucked and, like, what was good and, like, and what could be better sort of thing. So I want to start with Elias this time.
00:19:46.706 - 00:19:56.370, Speaker B: Like, you came from a front end engineering background. Like, what's actually the languages that you had touched before you kind of came to start building own Solana.
00:19:56.522 - 00:20:23.784, Speaker A: Yeah. So even before I was a front end developer, I was dabbling in data science for a bit. It was a lot of fun, but a bit too meticulous for my taste. So I was dealing with a lot of python. Fast forward to when I graduate. I was really interested in front end development. Got pretty good at helping with some friends and building toy applications, and typescript react some toy web apps with next js.
00:20:23.784 - 00:21:03.564, Speaker A: And then that's when I, like I said, met Nick, joined the team. And, yeah, I was building front end applications for a while, like six months, and then I found, like, a lot of people who started their web3 journey. Nader Dabbitt's Ethereum article on how to, you know, it was like, a super simple. I forget exactly the context of what the project was, but it was on dev two and read through it and tried to understand, like, what is this environment? Like, what is this dev environment? What's going on? Not too long after I found Solana, and Nick also brought it up, like, hey, we should maybe look into this.
00:21:03.604 - 00:21:06.076, Speaker B: And then did you do Dapa's tutorial on Solana, too?
00:21:06.140 - 00:21:07.676, Speaker A: I did. Yeah. I did. Yeah.
00:21:07.820 - 00:21:08.284, Speaker B: Yeah.
00:21:08.364 - 00:21:25.540, Speaker A: It was a lot simpler. I don't know, but also more difficult in some ways. When we were working on Factor, Nick gave me the talk, like, hey, we may not need front end developers, so there's a chance that, like, I need you to flex over to becoming a rest engineer, which is, you know.
00:21:25.572 - 00:21:26.812, Speaker B: So he didn't fire you?
00:21:26.948 - 00:21:27.292, Speaker A: No.
00:21:27.348 - 00:21:28.424, Speaker B: No, he did not.
00:21:28.844 - 00:21:55.924, Speaker A: Luckily. Yeah. So fast forward to Mountain Dao when we finally realize Kronos has a lot of potential. I buy the book that a lot of people seem to have, and I have it on my desk right here, the programming rust book. And it's been my north Star, I would say, as far as growing my skills as a rust engineer, as well as living in the Solana repo and anchor reposition.
00:21:55.924 - 00:22:00.454, Speaker B: So you guys are building this and straight rust. Are you guys also using anchor?
00:22:00.874 - 00:22:23.482, Speaker A: Yeah, in the core of Chronos, it's a lot of anchor, a lot of what I deal with, I'm building and optimizing the geyser plugin that we have to listen to Kronos accounts and execute tasks when needed. That's just built in rust and other asynchronous libraries and things like that, but not anchor specifically.
00:22:23.618 - 00:22:38.974, Speaker B: So how hard? Like, so this is the part, like, the glass chewing. What was your learning curve, like during that process of, like, learning rust coming from front end? Like, was it, like, was it as painful as everybody said? Everybody's different on this front. So, like, what was that like to learn rust?
00:22:39.354 - 00:22:39.874, Speaker C: Yeah.
00:22:39.954 - 00:23:18.830, Speaker A: A big mistake that I would advise people attempting to get into the space would be, first of all, just learn rust by itself first. At least start there and understand that it is different from anchor, and it's just a framework that lives with rust, and then try to understand the Solana runtime just a little bit. And those are three separate entities, but they all coexist, and you need the three in order to, you know, make a simple to do app and rest on chain. So differentiating between those three different entities is really important. And if you just jump straight into a Solana anchor project, not knowing rust, you're going to get really confused and pretty frustrated.
00:23:18.932 - 00:23:24.866, Speaker B: So, like, for you, was it hard or was it just kind of time consuming? You kind of just had to grind it out and just like you learned along the way.
00:23:24.970 - 00:23:52.834, Speaker A: Yeah, yeah. It's one of those things that you just have to do every day. You have to. You know, for me, every morning before we would go to the mountaintow glass for breakfast, yeah. I would literally just sit on the couch and wait for Nick to finish showering before we drove to the office. And I would just read a chapter of the programming rest book, and it would just go over, like, super simple things like structs and basic functions and. And if you're a software engineer, it's not too difficult to transition into rust.
00:23:52.834 - 00:24:08.842, Speaker A: It's just another programming language just in a different context. And it looks a little weird with, like, two semicolons next to each other or whatever syntax, but it's not too bad. You just one of those things you just got to do every day, and before you know it, you just hit the road running. It's pretty nice.
00:24:08.938 - 00:24:32.074, Speaker B: I think a lot of people talk about chewing glass. It's actually Solana that's the real jig class, chewing about learning the native concepts using PDA's and these things. And there are people out there who just don't ever end up learning rust. And, like, they never actually tried it. They never kind of just, like, sat down and did it. It's, you know, it's. You can get a little bit resistant to it just because it looks so foreign.
00:24:32.074 - 00:25:14.110, Speaker B: And then the other part is, I've had, I've done a couple of Twitter spaces around this exact same thing about you saying start with rust. That's my recommendation. Always start with the base layer before you're, like, using any sort of framework or anything that's, like, intertwined in it. But there are people out there on the other side of the camp that say, just start with anchor. I obviously disagree because I think, like, learning that first bass language is always going to be the best, and it's going to save you down the road when you're running into issues kind of thing. I'm going to go ahead and ask you, Nick, kind of the same question, like, what your experience was, like, what did you do to learn it? Was it similar to Elias? And, like, was it hard? Was it easy? Was it. Was it kind of just time consuming? Like, what would that look like?
00:25:14.282 - 00:25:53.516, Speaker C: I had some background working in backend systems from my time out in California. I had worked mostly with go prior and actually first tried picking up Rust in 2020 because I had seen. It was the most popular language on GitHub, and it was just like, what is this? And I actually hated it the first time I looked at it because I was coming from that go world, and go is designed to be super ergonomic and easy to read and talk about and communicate. And rust is more optimized for performance.
00:25:53.660 - 00:25:54.984, Speaker B: Performance and pain.
00:25:56.604 - 00:26:36.764, Speaker C: Yeah. So I hated Rust when I first looked at it, and I pushed it off to the side and didn't actually look at it again until we dove into Solana. I've since come to love it. It is a little bit steeper of a learning curve, and there are some extra pieces to the mental model that you need in terms of understanding memory and ownership of variables and how all that stuff works. Lifetimes, for example, that other languages don't have. That makes it a little more complicated or harder to learn, but it's not anything that can't be overcome. I think it's just another programming language.
00:26:36.764 - 00:27:17.354, Speaker C: But, yeah, definitely breaking apart. As Aaliyah said, the difference between rust problems, anchor problems, and Solana problems, and understanding that these are all three different systems. Yeah, it's probably the hardest thing when you're first diving into Solana, because it all looks the same and all the error messages are cryptic and it's hard to really, if you don't have a whole lot of debugging experience, it can be hard to pull that thread because all this stuff is quite new. And a lot of devs, I think, have the pattern of you get an error message you don't understand, copy it into Google and see what stack overflow results come up. There's just a lot of, usually we're running into problems that no other devs have run into yet.
00:27:18.014 - 00:27:31.868, Speaker B: It's actually pretty cool, though, to be one of the first group of people on the planet. You guys are going to be the ones who answer these stack overflow questions in the future, because that always starts somewhere. The first guy had to just figure it out.
00:27:31.956 - 00:27:56.026, Speaker A: It's cool, but you're like, I don't know what to do now. I guess we're just going to have to figure it out. So that's where I would just go to the Solana code base, and Nick has recommended multiple times, just go live in there. You'll understand the runtime environment better. Your errors will be easier to debug. It's a lot. The Solana code base is a lot, but there are parts of it that really help you understand what is going on underneath.
00:27:56.210 - 00:28:19.894, Speaker B: A lot of people come from a web, too. And again, I'm one of those people. Like, we're used to having our hands held. We're used to being able to find the answers we want. We're used to all these pretty amazing tutorials and all these different things. And when that's not the case, it makes it a lot harder. Not everybody, sadly enough, not everybody's just this reverse engineering code diver that's going to go do that sort of thing.
00:28:19.894 - 00:28:38.070, Speaker B: It takes a lot of time and a lot of effort. And sometimes, at the end of the day, there might not be considered the greatest payoff for all that work. But the true engineers, the ones who just like to figure shit out, are going to go do that, and then they're going to figure it out, and then they're going to build Chronos. So it's awesome.
00:28:38.142 - 00:28:44.134, Speaker C: It's definitely how, you know, you're on, like, bleeding edge is when Google doesn't come up with any results for your error message.
00:28:44.254 - 00:28:52.554, Speaker A: Zero results, the beautiful no search results for that Google search. And, like, well, okay, cool. Whatever.
00:28:54.094 - 00:29:26.258, Speaker C: I would say to any devs kind of like that find themselves in this situation. The anchor discord in particular has been like, is my new Google for trying to find solutions to these problems. And usually, like, 70% of the time, someone is kind of asked about some of the error problems, like we're running into in the anchor discord somewhere. And there's been, like, someone that is able to chime in and help. And Armani and the team that's there is extremely helpful in terms of answering questions generous with your time.
00:29:26.346 - 00:29:26.974, Speaker A: Yeah.
00:29:27.314 - 00:30:02.298, Speaker B: And Alan and everybody that's out there. And Jacob, who's on our Devrel team, and Donnie. There's so many people, and these are kind of guys that are actually working on serum and anchor and Solana labs and all that stuff. But outside of that, the community of people just helping each other solve these problems is pretty, like, it's amazing to watch it happen in real life. We've been going on for a while now, and I want to really understand, like, I want both of you, if you can, to tell me, like, what is missing from Solana right now. Like, in tooling. Like, you guys just created one that was missing.
00:30:02.298 - 00:30:08.334, Speaker B: Like, we're seeing a lot of tooling come out. Okay. All right, we'll start with you, Elias. Like, what are we missing right now?
00:30:09.774 - 00:30:43.204, Speaker A: I'm probably stealing this from Nick because he's probably thinking about it. But one thing we've run into recently is DevOps pipelining. It's pretty difficult to handle versioning from so many different projects. When we're developing, we're having to stay ahead of Mainnet and work on Testnet. It's a very complicated and different projects do it differently. But right now in our repo, we have a forked version of Anchor, just so that we have up to date versions of anchor, but using some different.
00:30:43.824 - 00:30:45.712, Speaker C: The latest Solana dependency versions.
00:30:45.808 - 00:30:55.336, Speaker A: Yeah. So that right now is something that we have to build. But if there is a way to do that at scale for a lot of other teams, that'd be great.
00:30:55.400 - 00:31:20.098, Speaker B: Yeah, that's not the first time I've heard that one, but that's a good one. I don't think actually most I hear it just because I'm always paying attention to a lot of different places. But I don't know if everybody except the ones who are coming into this problem actually know that this is something that's kind of necessary. It's not one of the ones that people are most vocal about. It's usually like error codes and indexers and all these things. So, Nick, did alias steal yours, or do you got something else for us?
00:31:20.186 - 00:32:10.942, Speaker C: No, I mean, I think that's a great one. There's at least for what we're doing, where we have both on chain programs and a plugin that we're trying to ship the DevOps challenges around. Keeping just the versions in sync between those two pieces can be challenging. And then, yeah, I guess something that's kind of been on my mind a little bit is how there was a de git project in the rift tide hackathon, the decentralized git, which I think stuff in that space, like decentralized DevOps processes. And how does a decentralized global team of engineers contribute to a protocol, and how do you keep that system open, that community open but also secure, is like, I think, an unsolved problem at this point.
00:32:11.038 - 00:32:15.314, Speaker B: Well, I look forward to the Chronos team actually building out this suite of tools. All of it.
00:32:17.454 - 00:32:19.154, Speaker C: A few pieces, but yeah.
00:32:19.654 - 00:32:38.546, Speaker B: Yeah. So I usually wrap these shows up, just kind of like asking, what advice would you give to somebody who's thinking on the other side, being like, hmm, maybe I'm about to jump into Solana. I'm not sure, like, if I want to, like, put in the effort to build something just, just like what, what general advice would you give somebody who was going to build or is building on Solana right now?
00:32:38.610 - 00:33:13.674, Speaker A: If you're frustrated with learning rust, but you're really wanting to just build on Solana, then you're doing it right. You're not doing it right if you're not frustrated. That's the chewing glass part. Yeah, just keep going, because at some point, you'll be able to look at other projects and their smart contracts and go, oh, I see what they're doing. Right now, I'm looking at the holoplex. That's called RabbitMQ plugin, or Geyser plugin. Shout out to the Holoplex team and trying to understand why they made certain engineering designs with their plugin and see what we can take from.
00:33:13.674 - 00:33:23.938, Speaker A: And that's just the beauty of open source, of course. But, yeah, if I wasn't chewing glass consistently and I wasn't looking at code and other repos, then I wouldn't be able to do that.
00:33:24.106 - 00:33:41.618, Speaker B: Yeah, that's awesome. And like, it is. I wish everybody would start open sourcing their code out there, but we'll get there eventually. How about you, Nick? What kind of advice do you have? And again, we've kind of talked about a few good ideas for the community. So what do you think?
00:33:41.786 - 00:34:37.301, Speaker C: Yeah, I think probably two things. As Elias mentioned, spending time in the Solana repo has helped a lot. There's a lot of patterns in there that if you're trying to get familiar with rust, it's a great resource to learn from. And the second thing is to actually read the error messages that you get back when you actually pull on that thread. They are very cryptic error messages a lot of times, but they do have information that leads you to the bug and the problem or points you in the right direction is the best way to put it. I find that skill, that debugging skill, is a muscle that needs to be trained and learned and doesn't always come supernaturally, because it's just hard. Yeah.
00:34:37.301 - 00:34:48.661, Speaker C: Like, reading error messages and trying to decipher, like, what they're telling you is kind of like a fundamental exercise to dealing with, like, large, complex systems.
00:34:48.757 - 00:34:48.941, Speaker A: Yeah.
00:34:48.957 - 00:35:05.118, Speaker B: And it's also just like a really cool skill set to have to be able to kind of just, like, do these sort of manual debugging stuff and just like. Yeah, like you said, it's a mental. It becomes like a natural kind of mental muscle like that all of a sudden. Now, it just happens quite naturally once you get to a certain point.
00:35:05.246 - 00:35:41.010, Speaker A: Yeah. One thing for those interested in just in general, like, distributed systems, trying to understand Solana a little bit better from a higher level. There's a great YouTube course from MIT. If you just search distributed systems, MIT, it's an open courseware, like twelve lecture series just to understand rpcs, multithreading, concurrency, consensus and things like that. It's really beneficial to understanding distributed systems. Blockchains? Well, not necessarily blockchains, but at least for Solana, distributed systems. Awesome.
00:35:41.042 - 00:36:00.242, Speaker B: Yeah. There's a lot of people that come into blockchain and they don't even really know what a distributed system is. And a lot of the times it's like, hey, go actually read about what this thing is before sort of diving into this. All right, guys, well, that's going to be it. Really? Really. Thanks for coming on the show. I'm glad that we got to catch up.
00:36:00.242 - 00:36:03.954, Speaker B: Congratulations. Winning whiptide. I'll talk to you later.
00:36:04.034 - 00:36:04.810, Speaker C: Hey, we'll see you in Austin.
00:36:04.842 - 00:36:06.370, Speaker A: Sounds good. Yeah, see you in Austin.
00:36:06.442 - 00:36:07.674, Speaker B: All right. Cheers.
