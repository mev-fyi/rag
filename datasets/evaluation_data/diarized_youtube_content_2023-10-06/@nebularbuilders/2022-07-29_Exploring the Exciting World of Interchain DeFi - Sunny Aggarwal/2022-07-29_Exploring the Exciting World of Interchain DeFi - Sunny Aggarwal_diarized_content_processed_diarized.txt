00:00:10.840 - 00:00:32.244, Speaker A: Thank you so much. Yes, indeed. Mev, very hot topic. So, yeah. Want to talk a little bit about exploring osmosis. Mev. I was, I kind of came up with this slide last night because I normally have a prepared pitch deck, which is like Cosmos 101, exploring app change.
00:00:32.244 - 00:01:22.436, Speaker A: And I realized that that's probably not what this audience wants. Right. You know, I feel everyone here already believes in cosmos, so I was like, okay, what's an interesting topic to talk about? What's a relevant topic right now? And so I think Mev, especially cross chain Mev, is really growing as a, a point of interest for a lot of people. So very relevant today. So I want to talk a little bit about how MeV is growing in osmosis and how we are sort of planning on approaching it. So what is Mev, first of all? Right, so it stands for minor extractable value. Realistically, the term was created in a bygone era back in, like, you know, Phil, Diane, he created the term back when, like, everything was proof of work.
00:01:22.436 - 00:02:02.500, Speaker A: But really what, what it really is is proposer extractable values. Right? So we're, you know, obviously, in all these causal change, we're all running proof of work, but, you know, we're not using proof of, you know, we're not using proof of work. It's all proposer extractable value. What is this, like, proposal extractable value, though, right? What I define Mev as is the ability. What sort of powers do proposers have that they can single handedly do to extract value? And there's actually a number of different things that they can do. Right. You can do things like censoring other votes, or you can do timestamp manipulation.
00:02:02.500 - 00:03:03.106, Speaker A: But we're going to focus very specifically on transaction related Mev, right. So what are the powers that a proposer has when they're creating a block? When it comes to transactions, and I think there's, like, three main ones that we have to consider. There's, they have the ability to read the transactions from the mempool. They have the ability to choose which transactions come into the block, and they have the ability to choose what the order of the transactions in the block are, and thus what the order that they execute in. And via these three powers, they can kind of achieve a lot of interesting, do a lot of interesting value capture, where you can do things like sandwich attacks, front running, generalized front running, which dark forest attacks, if you heard that term before, which we'll get into in a bit. But you can also do, and these are things I would classify as bad meV. Right.
00:03:03.106 - 00:03:57.666, Speaker A: This is very extractive of value from users, but I would say there's also good Mev that exists. The ability to do liquidations. This is good for protocol health. You want liquidations to be happening, or you have cross chain arbitrage happening. You want the arbitrage to be happening, because that's how you get your dex's prices in sync with external markets as well. We have this interesting, like, I actually, I've been a very like Mev minimalist, but I've realized over time that there's actually, there are some types of bad, there's a lot of types of bad Mev, but it's also good mev that exists as well. And so what we should be doing as an ecosystem, general, is we should be trying to, one, minimize the bad meV, but to internalize the good meV.
00:03:57.666 - 00:04:43.916, Speaker A: And so I'll get into. So we're going to start with talking about how do we minimize bad Mev, and then we'll talk about how do we internalize good meV. So what is bad Mev? Sandwich attacks? Generalized front running? Censorship. You'll notice that a common trait around all of these types of bad Mev is the ability to read transactions from the mempool. And so if we can solve that, we kind of actually end up eliminating most of the bad types of bad meV. And so how do we do that? Well, before we get into that, what, you know, walk through some examples of how front running works. So, normal front running, what it is, is Alice will send her transaction to the block proposal.
00:04:43.916 - 00:05:16.244, Speaker A: In this case, it's sicka, which is a very bad validator. Never delegate to them. They're evil, the validator. What they'll do is they'll add it to their mempool. And what they'll do is they can read all the transactions in the mempool, and maybe Alice is doing a trade or something. So what sicko could do is they could insert their own transactions into the mempool and put their transactions before Alice's. And basically what happens is you usually set a slippage bound when you're training on a Dexe.
00:05:16.244 - 00:06:27.110, Speaker A: And what a malicious validator could do via sandwiches, that is, make sure they take all the value from that trade. You also have these issues like generalized front running, which is also called a dark forest attack, because this blog post that Dan Robinson Georges wrote. But basically, the idea is, imagine a toy example where there's a $5 that goes to the first person that can show a solution to a puzzle it's not really a puzzle. It's like some sort of arbitrage opportunity or something like that. But what happened is Alice, she spends a lot of time finding the result to the answer, and she can broadcast her transaction. But the problem is that the validators could read whatever solution she submitted, copy the exact solution, and submit their own exact transaction, and they can make sure that their transaction gets in first. And so they get to whether do the liquidation or do the arbitrage opportunity or whatever it is, and steal that value from Alice.
00:06:27.110 - 00:07:56.266, Speaker A: To solve this, both of these situations, there's a simple solution, which is encrypted transactions. You want to make sure that the validators can't from the mempool. And so what we actually do is we have a system where what we're going to do is all the transactions that are being submitted to the blockchain are encrypted, they get sent to the validators, and then all the, and then what happens is we need a way for us to come to, we create blocks of fully encrypted transactions, and only once a block is finalized and the inclusion in a block is finalized and the transaction ordering is finalized, then we, sorry, animations don't work on this, I guess, but that's when we decrypt the transactions and then execute them. So that way it's too late for anyone to front run it, because we're creating blocks of, no one can read the transactions before the block is actually finalized. So there's actually a couple of ways of achieving this system. I guess there's three main ways that I'm aware of, or there's a couple more, but the other ones have very far out cryptography needs. So the three current ways of doing this are trusted hardware, which is the SGX system, time lock encryption and threshold encryption.
00:07:56.266 - 00:08:49.460, Speaker A: And so we spent a lot of time evaluating these three systems. When it comes to SGX systems, I think sgxs are pretty cool. I think secret network is doing cool stuff, but I don't think it actually solves. It doesn't work for defi applications where every two or three years the SGX ends up getting broken. And if you really wanted to break the SGX, how much would it cost? You could probably hire a team of like ten top notch researchers, pay them like $20 million, and you'll probably break the SGX in like six months. Right? And the thing is, Mev is worth way more than $20 billion on Ethereum right now. And so it's a economically rational thing to do to go break the SGX.
00:08:49.460 - 00:09:24.538, Speaker A: And today on SGX based systems, Mev might not be worth that much. So it's not worth doing it, but once it gets to the point that it is, people are going to end up breaking it. So the security budget of SGX based systems are just not that high. So we'd rather rely on cryptographic systems rather than these black box trusted hardware systems. So then we're left with basically time lock encryption and threshold encryption. And I'm not going to go too much in detail, but time lock encryption is quite cool as well. But the problem is that it has a lot of ux concerns.
00:09:24.538 - 00:10:27.730, Speaker A: Basically all transactions get delayed. You make a transaction, then it gets executed a few minutes later, which is maybe not that bad. But I think the UX that we've come to expect is you want transactions to be executed almost as soon as they're created. So we're left with threshold encryption. And how threshold encryption works is basically today in tendermint we have this BFT system where two thirds of validators have to submit transactions, submit votes on a block before it gets finalized. So how threshold encryption works is similar to threshold signatures, if people are familiar with that, where you have a quorum that says, hey, these set of people can sign a transaction, it's the same thing, but with decrypting data. So what will happen is all users, they create transactions that are encrypted to this shared key that all the validators have.
00:10:27.730 - 00:11:19.040, Speaker A: And then the proposer will create a block of the block, it has encrypted transactions in it. And then as part of their votes, validators will include their decryption shares. And as soon as you have, and to make a valid vote on a block, you also have to have a valid decryption share. And so as soon as you have two thirds valid votes on a block, you'll also have two thirds decryption shares. And that means you can decrypt the data. And so as soon as a block is finalized, that's when you also have enough decryption shares that you can decrypt and execute the transactions in a block, meaning that decryption is fully atomic with block production. And there's not this like weird delay that you get with things like time lock encryption or out of protocol systems.
00:11:19.040 - 00:12:08.082, Speaker A: So yeah, this, you know, basically what we do is like, you know, by making sure that no one can read anything from the mempool, we get rid of things like sandwich attacks, generalized front running, all this sort of stuff. And we effectively, for the most part, I think minimize bad Mev's this. Bad Mev is really a privacy failure, right. When you want to make a transaction, you expect like, you know, you have some sort of privacy until time of execution. And today I feel like every single blockchain is basically a leaking, leaking that information. So with threshold encryption, we solve this problem. But what about the second part? Right? This is the, and you know, I feel like I've talked about the threshold encryption stuff a lot before, but I guess the new part today is this internalizing good mev.
00:12:08.082 - 00:13:04.860, Speaker A: What does that mean? So Anatoly had this good tweet a couple of weeks ago where he said that really the value of l one tokens is their ability to capture Mev and the value they can extract by doing that. This tweet actually stuck with me for a little bit. I've been thinking about it for a while. Then what I realized was it's like, as an app developer, why are you leaking that value to an l one token when instead that full value could be captured as part of your, this is part of the pitch of app change, I guess, which is like, you should be capturing that value as part of your protocol and distributing that value to your app's token holders. So how can we take that Mev? That is inevitable. The good mev in osmosis and give it to Osmo token holders. So there's a couple of ways of doing this.
00:13:04.860 - 00:13:37.222, Speaker A: Right. So what are the types of good mev? We have things like liquidations on chain arbitrage opportunities, and there's all sorts of sort of things you can do. So let's start internalizing them. So step one, let's build an on chain liquidator. So I guess one thing to note is that there's quite a bit of mev in osmosis today with just the trading, but it's going to get more and more over time. Right? Like, we are moving away from, you know, we're moving from the AMm model towards order book systems. Right? Like, that's definitely a plan.
00:13:37.222 - 00:14:25.760, Speaker A: You know, you're going to see order books on osmosis within three months. And once we have that, we're going to have way more mev opportunities. Or, you know, once Mars launches on top of osmosis, you're going to have like a lot of liquidation opportunities. The amount of mev on osmosis is inevitably going to go up. So how do we deal with this? So you can build things like on chain liquidators. So if anyone's familiar with liquitey on Ethereum, they have this on chain stability pool that gets like, first access priority to liquidations. And so they end up, instead of things like maker and compound, they end up leaking a lot of value to the off chain liquidators and giving that value to them, when instead that value can be internalized to the protocol.
00:14:25.760 - 00:15:15.608, Speaker A: Because we have these cool app chains and stuff, you can actually have these liquidations happen automatically in the protocol. In the begin blocker, you can make a bunch of very easy checks and say, hey, we're going to check to see if these things can be liquidated. You can do them. And this is good for protocol health, because you want to get rid of bad debt quickly. But also, it's protocol revenue for the protocol, the full value of liquidation, instead of giving it to whoever's triggering it, it can go all to stakers. For example, the same thing with on chain protocol arbors. When people in osmosis, there's a lot of pools, and you can route through different ways, and what inevitably happens is pools become out of sync.
00:15:15.608 - 00:16:17.276, Speaker A: And what's happening today is people are submitting arbitrages where they want to be the first one to sort of, you can do these circular arbs where they can trade on pool a, b, and c, and you go through the same thing, and you can get some profit from that. Well, what we could be doing is in the begin blocker of osmosis, we should be running a basic arbitrage protocol. The problem is that solving these arbitrage opportunities is actually an np hard problem. So you're not going to get all of the profit. But even if we can get 50%, 75% using some basic system, basic tools, that should be protocol of revenue that could be going to all osmosis stakers. I think that's another source of protocol revenue in the long term. And then finally, like you mentioned, there's things that you can be like, application specific that we understand, things like liquidations and on chain arbitrage, but there's things that we just won't understand.
00:16:17.276 - 00:17:29.860, Speaker A: There's mev opportunities that people are going to be discovering all the time. And so how do we capture the tail end of the, I think through things like on chain liquidators and on chain arbors, we're going to get most of the MEV and internalize it into the protocol, but eventually there's going to be, there's this tail end of things that we might not be able to understand. And so how do we internalize that, basically? So how is this done today? Is you have systems like flashbots, which are these off chain transaction prioritization systems. And what happens is searchers, people who are finding MeV opportunities, they submit these, what they call bundles, which are like sets of transactions to a centralized system like flashbots. And what they do is they basically simulate the transactions and say, like, hey, if this, you're basically bidding for the first slot in the block. And what it's doing is there's really two auctions that are going on inside blockchain today for blocks where you, there's one auction which is, you know, you just want to be included in a block. You're just making, you know, let's say you're making a payment.
00:17:29.860 - 00:18:18.184, Speaker A: You don't care where in the block it's happening. And then the other is people are competing to be like the sort of the first spot in a block. You know, they want to be the first ones to pull off the liquidations or arbitrage opportunities. And you have these, like, off chain systems, like flashbots, which are like, exploiting this, like, discrepancy and saying that like, hey, here's a centralized system where you can bid for the first slot in a block without messing up the auction for the rest of it. But what we realize is you can actually build all of this on chain, so you can do these full on chain transaction prioritization systems in protocol. So what we can do with, especially post threshold encryption, we can say that, hey, transactions can make bids. They want to be the first to execute in a block.
00:18:18.184 - 00:19:16.894, Speaker A: They want that first slot. And so what we're going to see is transactions are bidding to be like the pull off these arbitrage opportunities, and all the revenue from those bids can actually go to all stakers. With these off chain systems, you have situations where all transactions are going through these very centralized mempools, and the value is going to validators, when really what we want is this to be internalized as protocol of revenue to all Osmos stakers. And by building these systems in chain, rather than relying on these off chain centralized services, we can internalize that protocol revenue. And so we see that we actually have a rise of more of these off chain systems in Ethereum and stuff. They definitely have taken a big rise. They're starting to show up in cosmos as well.
00:19:16.894 - 00:20:09.582, Speaker A: And my general take is that we should be trying to avoid them. I think, functionally, they are effectively validator cartels. If you look at things like threshold encryption, it's not safe against a two thirds collusion of validators. So threshold encryption, it works by two thirds of validators, sort of. You require two thirds of validators to decrypt data before it's done, before the transactions are created. And I'm just slightly worried that these things are like, these systems, like flashbots are like a foot in the door towards validator cartels. And what happens when these systems decide like, hey, it's revenue maximizing to bypass threshold encryption, because it will increase revenue for these systems.
00:20:09.582 - 00:20:43.960, Speaker A: So that's something we're a little bit worried about. It's something we've really started thinking about in the last few days. And what do we do about this? And this is kind of like a question just, I want to kind of open the discussion up for people. Hopefully, this will raise interesting discussion throughout the rest of the day. But what do we do about these validator cartel systems? I think there's different levels. I think one is just in the protocol, we can do things to make sure that they're not as effective. Build the on chain prioritization systems.
00:20:43.960 - 00:21:24.200, Speaker A: The on chain in protocol prioritization systems will always sort of win out against the off chain ones, but other things we can do otherwise. Dev, for example, he wants to build slashing conditions for like, if people are caught using these, like, you know, these off chain validator cartel systems, he wants to like, start like, slashing validators, you know, I'm just interested to hear from people of like, what are ideas of what we can do about these validator cartel systems? So, yeah, that's it. Thank you. Thank you. Sunny. We have one, we have time for one question.
00:21:29.230 - 00:22:07.232, Speaker B: Thank you. Thank you, Sonny, for the great presentation. It's going to be hard for me to follow on with mine. I do have a question, actually. I think it's a great thing to think about. How do you create value for Osmos takers and the participants of the OsmO ecosystem? But my fear, if you integrate the arbitrage directly in the protocol, maybe you won't be able to attract professional market makers that also provide liquidity in these kind of systems. So you kind of take away parts of the revenue that they would generate, obviously to protect the ecosystem.
00:22:07.232 - 00:22:29.480, Speaker B: But at the same time, maybe it's also a trade off to leave those professional arbitrageurs that come build the whole tech to connect to your system and then also provide liquidity, maybe LP, and also, you know, like, just benefit and provide also value to the ecosystem. What do you think about, like, this potential, like, double edged sword?
00:22:34.700 - 00:23:23.872, Speaker A: Yeah, for sure. You know, I feel like the MeV game has been one of the best, like marketing systems. And just like, you know, it actually has brought in a lot of talent. Like the number of people who I know who started with like MeV searchers and stuff and then ended up building like, you know, getting bored of that and started actually building interesting protocols instead. And like doing, you know, real value add stuff has quite a few people have done that. So I think that's a valid point. But I do think that like, you know, when it comes to like market making stuff, I think like the arbors are a pretty different class of users than market makers, right? And so the people who, I don't think reducing ARB profit and internalizing that into the protocol will actually reduce the number of market makers necessarily.
00:23:23.872 - 00:24:19.800, Speaker A: And also what ends up happening the way to, if you want to realize that profit from those ARB opportunities by internalizing into the protocol, it brings up value to OSmo stakers. And this is kind of why incentive systems are so important and why we make sure that OSMO is like majority distributed to LP's and market makers. So it kind of aligns those incentives in that way by making sure the market makers and stuff, the best way for them to realize that the ARB opportunities and MEV profit from their market making activity is by owning Osmo. Big applause for Sonny. Please channel.
