00:00:00.160 - 00:00:44.830, Speaker A: Hey, everyone. Today I'm Federico. I'm the founder of Evmos. And today I'm excited to talk to you about how we can achieve the fastest go to market through evms. And I'm also going to start talking today about a little bit of history lesson on what the problems in cosmos when it comes to interface and how that has affected our ecosystem more broadly. Myself. Being one of the early team members of the Cosmos ecosystem working on Cosmos SDK, I'm also very familiar with the challenges and what we need to do in order to get more users, which is the most important thing.
00:00:44.830 - 00:01:53.922, Speaker A: So let's get started. So last year we introduced this concept of fmos during nebular 2023 about evolving and transitioning into becoming the Ethereum counter chain. And more particularly, how can we enable developers to do more with their evms, so highly customizable, cutting edge research that comes from Ethereum, magicians and other eips. How can we enable that for developers and eventually transition into a highly experimental environment where more innovation can happen and we can foster this ecosystem of innovations within evms. And so in addition to that, I also presented last year that in order to get there, we needed to have like certain. We needed to address certain filters for the adoption. And here last year, I outlined four different filters, onboarding, utility, liquidity and discoverability, for enabling retail users to jump into crypto in the first place.
00:01:53.922 - 00:03:23.700, Speaker A: So the first part was onboarding. And I think, like looking back in this last year, we've done important work, like important, we've taken important steps towards that direction. But ultimately, we've failed in some way to even capture the mindset, even from our web3 ecosystem, which is very niche compared to the longer term objective of onboarding retail users. So I saw this on Twitter the other day and wanted to add it to the presentation. But this has been more or less like the mindset of members of the overall community when it comes to cosmos, where people are in for the technology and there's not much utility or there's not much users overall because of these fragmented environment due to the sovereign nature of application specific blockchains. And if we start thinking about, okay, how can we enable left curve more retail users? Right now we're in a very far, far right curve where we are building top notch technology, but we're failing to capture onboardings to users. We need to make the transition and start doing things in order to get more users.
00:03:23.700 - 00:04:54.898, Speaker A: One of the main reasons why we haven't been able to capture as many users, as many developers or had as many wallet integrated is due to the nature of the transactions on cosmos versus the transactions on Ethereum. For context, on Ethereum you have only one single transaction type that is backwards compatible, which makes the integration for EVM wallets and clients altogether significantly easier. Many of you that have been founders in the space or have been interacting with institutional providers, usually they charge an additional fee to get you integrated to Anchorage to fire blocks and the basic infrastructure requirements that VC's and more industry providers will require. So due to this design choice, we've been getting less users. Compare that with the sheer amount of transactions that we have on Cosmos. And here I'm only outlining just the very minimum and the most classic transaction types, which makes it really hard for standalone wallet to get integration with Cosmos ecosystem. Because for every single application specific blockchain in the cosmos ecosystem, you need to have and define new transaction types, which makes the integration even harder.
00:04:54.898 - 00:05:46.500, Speaker A: So that barrier of adoption has created this main difference. This is a list of wallets sorted by number of app installs. So you can see here then on the self custody. This is publicly available on Ser live C e R live. So the number of downloads, see the number of downloads from metamask alone, over 30 million downloads on the EVM ecosystem. And we're not even counting like Coinbase Wallet and Rainbow Rabi, et cetera, which are already extremely popular even within ecosystems like Coin 98 and Vietnam, or like more regional applications that are integrated. Compare that with Kepler.
00:05:46.500 - 00:07:31.350, Speaker A: Kepler has almost 2 million downloads versus 30 million on the EVM metamask wallets. So what I'm trying to say here is that the maximum number of users that we can acquire is kept by Kepler, which is a from the self custody side, and that prevents us to get to more users, get more developers into the ecosystem, and basically hurts everyone in this ecosystem. And also why we've been having these sort of like tweets and posts on x. The other big reason that what that has created from like this design choice of like one single transaction time versus like many a limited transaction time through custom messages is the amount of TVL in the EVM ecosystem versus outside. So how can we fix this? We need to go to market, we need to acquire users, we need to onboard more people. Today I'm really excited to introduce the Evmos alpha version. We've been talking with a lot of teams in the space, including Cosmos, in addressing this particular problem of how do we address more, how do we address onboarding, how do we allow them to get more users and we build amazing piece of technology over the past year since Nebula, until today that I'm going to be explaining how we are building a framework for EVM blockchains that are completely sovereign and highly customizable, going in direction of the Ethereum counter chain.
00:07:31.350 - 00:09:03.700, Speaker A: So the main things that we are introducing are EVM extensions that we've had live, stateful precompiled contracts that you can use to have the cosmos native actions interact with smart contracts. We're also introducing EVM access control, custom EVM upcodes, and EVM OS execution extensions, similar to what Reth is doing. So just to get a high level overview, what we're doing with precompa contracts, there are contracts that are executed natively, that you have a predefined address for that. What it enables is you can target a specific smart contract that is a precompiler, and it executes native code that allows us to connect the cosmos side of things of the stack from the Cosmos SDK, which is extremely powerful. Everyone from the ecosystem loves and admires from our cosmos ecosystem, and we enable that to be fully compatible with EVM wallets through pre compiled contracts. So this enables smart contracts to talk to governance, IVC staking, and whatever custom functionality you want to have in your application specific blockchain. And what's more, we've used this design to drastically improve the token user experience.
00:09:03.700 - 00:10:25.440, Speaker A: So for context on cosmos, you have these native coins, native tokens that are completely different and a different standard than what Ethereum is already used to. So you have the same problem that you find on Ethereum with wrapped assets, where we find it ourselves in this ecosystem of Cosmos IVC compatible tokens that are not ERC 20 compatible, meaning that they're not able to be surfaced and viewed by wallets in the ecosystem. So what we did, we took this design from the EVM wallets, sorry, from the EVM extensions. So by taking the cosmos native asset and the EVM extensions, we're putting an interface on top with the IERC 20 asset interface. What this enables us is to have the best user experience from a developer standpoint, in the sense of you don't need to have indexers anymore, because the Cosmos SDK already supports this amazing functionality of able to, with just your address, see all your tokens around. So that alone completely removes the need of additional infrastructure from the development side. But at the same time, from a user point of view, allows you to see all your tokens in one single wallethead.
00:10:25.440 - 00:11:45.546, Speaker A: So how we're doing this is like we're taking the IVC for the ones that are familiar with, we're taking the IVC hash that is 32, we chunk it at 20, and that's the address of the contract of the native coin that has been onboarded. For that reason, we're really excited to start introducing this sort of behavior in a token abstraction way in order to serve our users better. So this is really powerful. We're onboarding users into Metamark's wallet from a native cosmos asset. But here's the problem, and we had this conversation with a lot of people, is that what about the native assets you're able to have? Instead of having wrapped assets like ETH, unwrapped ETH, you can have exactly the same assets by giving the native token, the Navy gas tokenization, the same denomination, or like this ERC 20 interface to it. So there's a standard ethereum for which the native assets, or in this particular ETH, has a specific address that is emitted on certain events, which is zero x eee until the end. So that's the address for ETH in the smart contracts.
00:11:45.546 - 00:12:46.378, Speaker A: And we're taking that same approach. I forgot the name of the EIP, but we're basically giving that address to the native asset. So now you can see your fmos token and any asset that implements this with just that single address. But what's more important is like, okay, we've been talking to so many teams in the space, they want this functionality, they want to serve those tokens to their users, but they don't want to have EVM compatibility. They don't want to have smart contracts, they don't want to go for the hassle. They don't really want to have anything with additional state that they need to manage, potentially adding additional surface area for attacks, et cetera. There's a wide range of EVM compatibility when it comes to being completely EVM equivalent, exactly like what Ethereum has to EVM compatible.
00:12:46.378 - 00:13:19.930, Speaker A: That means you can have compatibility with EVM wallets while at the same time supporting forward compatible functionalities, new opcodes, new precompiles, et cetera. We want to go in that direction because that's ultimately what matters. We need to have the integration with wallets. We need to lower the cost of infrastructure. Lower the cost of integration of infrastructure. This is only possible by integrating JSON RPC and EVM compatibility. Going now into the deep dive.
00:13:19.930 - 00:14:28.362, Speaker A: How do we enable this functionality for Cosmos chains and for the broader ecosystem? So on the EVM virtual machine, the EVM, or the ethereum virtual machine, you have two paths that are outlined in the white paper. So on one side you have the standard execution environment or the general execution where you have your smart contract, you execute it, and it goes to the interpreter that executes smart contracts with the corresponding opcodes. But there's also an exception to this rule. It's called the exception or the precompiled route. What it does is you can build native contracts in go or what have you and execute this functionality. And this is exactly what we're doing for EVM extensions today. So what teams actually want from this design of abstracting the tokens away and building a better user experience is this part the native execution, the precompiles, not the smart contracts.
00:14:28.362 - 00:15:30.938, Speaker A: They don't want to have this. So we built the first ever EVM access control so that you can have a permissionless, permissioned or restricted EVM. So by implementing restrictions on the call and create, you can easily customize the design of your application specific blockchain to be EVM compatible without supporting smart contracts. So this allows you to be able to surface tokens in a better way to have full compatibility with EVM wallets. Or even better, you can have some POA designs. So this enables us to onboard Cosmos chainsaw want to be EVM compatible. These allow us to import enterprises that want to have private evms or consortium evms, and also generalized permissionless EVm that want to be onboarded into the ecosystem, completely obstructing the cosmos layer.
00:15:30.938 - 00:16:28.218, Speaker A: But having the EVM on top. I will answer the questions afterwards. But yeah, so this is basically allowing us to build light evms. Light evms is this concept that we coined for evms that are compatible with the standard EVM wallets, but they don't have any smart contract support. What this allows you to have like imagine and goric, you have your JavaScript environment for executing smart contracts, but on the top you have the interface for JSON RPC, and you have the interface for the EVM wallets who natively integrate with your tokens by adding this top level surface. If you think about it, this is not new in the industry, or it's new in our industry, but it's not in history. Take southwest for example.
00:16:28.218 - 00:17:18.000, Speaker A: Southwest was a regional airline that was not able to compete with the big giants back in the last century. What they did is they went for this strategy of only having one single type of airplane that reduced cost. You only have to train one type of pilot for one specific stewardess. You don't have to have different type of hangers. And so this allows us to streamline all their resources into one single environment, one single airplane, serving their users better. And then they were finally able to catch up with the big ones because their costs were so low and they were able to scale faster. So this is the same approach that we should take in the environment, in our ecosystem.
00:17:18.000 - 00:18:37.434, Speaker A: And then these guys, the Toyota family that they were doing heirlooms back in industrialized Japan, so what they did is instead of building their car from scratch, what they did is they took the Chevrolet engine and they build a custom chassis for it. So they were able to streamline their resources and completely forget the post servicing part, because you could go to any Chevrolet compatible mechanic, but just like the outside was different, so you can actually do the same. Sticking into back to what we're doing in the sense of you can have the top layer interfaces be ethereum compatible, whilst underneath you can have all the cosmos latest technology. This is exactly what we're doing. We're taking exactly the same approach to onboarding more users. This is what we enable. We enable permissionless public without central authority, permissionless chain, hybrid chains, private chains and consortium chains for enterprises.
00:18:37.434 - 00:19:42.462, Speaker A: We have teams that are reaching out to us that they want to ditch JPMorgan quorum for their consortium chains, they want to migrate away from hyperledger because our technology is superior. So we are enabling so many design possibilities, so many possibilities for the ecosystem just by having this design. And in order to facilitate onboarding, there's new authentication methods that are significantly superior in order to get to mass adoption. One of them is passkeys. So with our custom EVM opcodes, and this is far superior than any of the other authentication methods because for crypto users, you don't need to have a private maintain the mnemonic and seed phrases. You can just have a binding between the private key and the on the web application or in this case a wallet. So everything remains in the secure enclave of your device.
00:19:42.462 - 00:20:43.720, Speaker A: If you have iPhone or if you're using one password, you can keep the private key there and then you can sign on any device. And with our custom opcodes, you can define custom opcodes in just a few lines of code. And what this enables is like account of structure in ten lines. 3074, the latest technology that you can find on the latest research that you can find is readily available to you, for researchers, for teams that want to expand the capabilities of the EVM in just a single lines, it's all in a configuration file. You can define and customize the gas, you can define, customize the opcode operation itself and basically enable more use cases for your EVM. Of course, we're not alone in this ecosystem. Interoperability is key.
00:20:43.720 - 00:22:03.310, Speaker A: So one of the major things that we're doing is integrating IVC with ADR eight, which basically enables for callbacks. Now, what you can do with this, and this is the interface that we built for transferring atmos tokens to stride and liquid staking them and getting them back. It's basically orchestration whatever has been pioneering in this space. So we're taking this design and using it with the smart contracts with the EVM extensions, allowing smart contracts to perform orchestration in an EVM compatible way. So not only you can do more from like onboarding more developers and more users, but now you can build complex workflows, enabling you to have basically going from n applications to n factorial applications. You can combine them in multiple ways, and that's what orchestration is allowing us to do through IVC. Finally, we're also starting to introduce evmos execution extensions.
00:22:03.310 - 00:23:11.990, Speaker A: What this allows you is to have a sidecar processes directly and easily configurable on the environment. So you can run, for example, the IVC relayers on the same node, or you can run an indexer. We plan to expand this into more execution extensions in the future, but if you are interested in hearing more, please reach out. Finally, what this is enabling us to have a multiple battery of design possibilities. With AVM, you can have general purpose evms, forward compatible evms, category specifics EVM like real world Asset or nfts or I or what have you, Dapp specific evms for one particular Dex or oracle or whatever. Modular evms in the sense of like completely compatible with ABS's modular layer three s for settlement, et cetera. The light evms that I mentioned before, and enterprise evms with the EVM access controls with a weird rolling out now.
00:23:11.990 - 00:23:54.340, Speaker A: And we're proud to introduce our partners that have chosen us over all the other stacks. And we're starting to build an ecosystem of chains similar to the op stack ecosystem, but we're building it on the cosmos ecosystem. We're onboarding more teams into this experience, working together with them and ensuring their success. So thank you very much. Behold, the IE VMS ecosystem is just getting started, and we're ready to onboard more chains, more users into the cosmos ecosystem. Thank you very much.
00:24:08.250 - 00:24:26.962, Speaker B: That sounds interesting, because it is interesting to sound for the permission thing. That's one I didn't understand. Okay, you're not adding permissions to EVM contracts. This is outside at the cosmos talking to a level or where do these go? Is that sort of layered on top of.
00:24:27.026 - 00:24:55.266, Speaker A: Yeah, yeah. So we enable like parameters for the EVM in the sense of like you can have the EVM be completely restricted as in not allowing any interaction with or any deployment of contracts or anyone calling any smart contracts that are, that are not the ones that are of.
00:24:55.288 - 00:24:58.774, Speaker B: Tips.
00:24:58.902 - 00:25:35.072, Speaker A: Anyone? Yeah. For EVM, yes. So like restricted evms is basically just the native actions, the native pre compiled contracts without supporting the interpreter. Like smart contracts in solidity. That's what we mean by restricted. Now, permissioned means that no one is able to deploy smart contracts, but a certain amount of whitelisted addresses. So what this enables us is to have, maybe you don't want to have a fully available EVM, but you just want to have some bridges, for example, EVM compatible bridges.
00:25:35.072 - 00:26:03.370, Speaker A: You want to have some safe deployment, for example. So a multiseq that is traditionally only available in the EVM. And so you can enable the address of those teams to deploy their smart contracts. And so you can have a bridge or a safe instance, et cetera. Now the permissionless is like everyone can deploy but a certain. Or call smart contracts, but a certain. Yes.
00:26:04.230 - 00:26:10.374, Speaker B: I just want to check, is that. So you're running the EVM model which normally you check message sender.
00:26:10.422 - 00:26:11.010, Speaker A: Yeah.
00:26:12.960 - 00:26:19.592, Speaker B: This is on top of that. So you would end up with contracts that normally shouldn't be checked in message.
00:26:19.656 - 00:26:58.630, Speaker A: Sender, but they're not anymore because how we implemented this is through hooks for call and create opcodes. So we're checking every time that a smart contract is deployed or a smart contract is called. We're just checking whether or not the parameters of the chain allow you to be calling those smart contracts. So this enables us to have the restriction part, which is really interesting from light evms and for enterprises as well, they don't have a limited.
00:27:01.490 - 00:27:10.308, Speaker B: My reaction to it is that's one of those annoying things, architecturally is horrible because now you've got redundant mechanisms that if you usually want, you don't.
00:27:10.364 - 00:27:45.150, Speaker A: So yeah, it's annoying and practical. Yes, exactly. So think about it this way. From an access control point of view, you have consensus level access control, EVM access control and smart contract access control. Consensus level is proof of authority. Then EVM is who is able to create and deploy smart contracts or who is able to call smart contracts. Then you have the access control which traditionally is using role based actor model.
00:27:45.150 - 00:28:33.890, Speaker A: You have admins or owners on the smart contract level that you can perform certain actions using smart contract modifiers we have. Those three levels of access control were just like, or the top and the bottom one available in cosmos today and in the EVM. And now we're introducing the EVM access control to tackle this particular use case. Yeah, permission is like everyone can deploy except a handful of address. You might want a blacklist in case you're spamming the network, etcetera. But that's like more on governance side if you want to enable that. Yeah.
00:28:34.750 - 00:28:37.970, Speaker C: So I want to agree with you that.
00:28:41.590 - 00:28:48.450, Speaker A: EVM compatibility doesn't matter. Indeed.
00:28:52.280 - 00:29:03.768, Speaker C: Kepler. My question is, how does ethmos benefit from other chains integrating with their solution?
00:29:03.864 - 00:29:52.070, Speaker A: Yeah, so what we're doing is first building the ecosystem. And so what we're doing here is creating bespoke partnerships, tailored partnerships according to, like, the specific needs of each, each of the companies, each of the businesses, they might be like at a later stage with a lot of venture funding already, or like at a smaller stage where you're just like getting started. So what we're doing is like creating bespoke partnerships, because in the past, what we had is a zero sum game. Like, we started Ethermin, which was the first instance of a production ready EVM that didn't work out because we saw a lot of competition between Etherman chains. And now what we did is like, we put in a business license, or it's called a non commercial license. You can use it for Testnet. As long as you don't deploy it on Mainnet, you can use it for free.
00:29:52.070 - 00:30:24.750, Speaker A: And so what we're building is like value alignment. It can be in multiple ways, but basically what we're doing is funneling those value alignments. And we're going to be announcing a way to funnel those incentives back into our community, back into our ecosystem. But that's still in progress. We want to build the ecosystem first. We want to build these partnerships, work with our long term friends in solving this problem of acquiring more users.
00:30:25.250 - 00:30:31.946, Speaker C: And then the second question regarding, I'm sure you've seen the debates of what.
00:30:31.978 - 00:30:32.750, Speaker A: The best.
00:30:39.460 - 00:30:41.560, Speaker C: And there's a few different alternatives.
00:30:44.140 - 00:30:44.996, Speaker A: Yeah.
00:30:45.188 - 00:30:52.880, Speaker C: What would you say, for instance, which is.
00:30:54.260 - 00:31:38.170, Speaker A: So the main difference is that we've been battle testers for years now. I myself have been long, long term contributors. And that, that means that we have knowledge that compounds over time. On top of that, we built this design working directly with businesses from design choice. You can do more in the sense of, say, it doesn't allow you to have restricted or light evms, it doesn't allow you to have custom precompiles in the same way that we do. It doesn't allow you to have execution extensions. You can do actually less with those alternatives.
00:31:38.170 - 00:32:26.300, Speaker A: And what we do best is also because we have it integrated in a Cosmos SDK compatible way. We actually help you save development time, crucial development time that enables you to go to market faster. We've designed, and I forgot to add it here, but we've designed a wave also for tokens that are six decimals in precision to be used as gas tokens in an environment that is traditionally only available for 18 decimal tokens. We've been able to fix those things because we're working with partners. And hey, I would love to integrate AVM, but my token only has six decimal. What do I do about it? We working on this? Let us figure out a way for us to come up with a solution that would allow you to get more users. That's what we're trying to do.
00:32:26.300 - 00:33:07.100, Speaker A: That's why we're coming with the solutions as well, because we've been talking to all these partners, and I don't want to have smart contracts, I don't want to have solidity. I just want maybe like one bridge integrated, one chain. And so that's what we're doing. We working close to those teams and developing with them on the solutions that they want and need for their businesses. That's the most important thing. It's not just like, oh, integrating another solution, but we're actually building together. So you can have IVC staking governance like the traditional modules.
00:33:07.100 - 00:33:58.742, Speaker A: We also have p 256, which allows you to have passkeys. You can integrate 3074 with the custom opcodes and passkeys, sorry, p 256 on the EVM extension. And you can have passkey compatible signing so that you can onboard your users without having mnemonics. So that just is incredible from an onboarding point of view. And then we have, yeah, you can sign with anything. And so basically what you can do is have more value for the user. If you are into cryptography, you can add custom elliptic groups for proof verification with the execution extensions.
00:33:58.742 - 00:34:43.330, Speaker A: You can also have the IVC relayers directly in the node. If for you, you want to have an application on top, you can run a node with an indexer from the get go. That indexer is allowing you to offboard all the Ethereum type transactions into a database. So now you can serve your users faster. And so those are the decisions that ultimately are and the teams that chose us, and we're onboarding way more. These are only the ones that we've announced. So these guys are like Ripple, one of the largest market cap chains ever created.
00:34:43.330 - 00:35:25.066, Speaker A: Sick chain signally was trending for so many months and then announcing their chain because they want to build custom behavior aura as well. Like hack is for the islamic community. Reality is working on a specific RWA specific EVM compatible chain. Live three settle is working on gaming. So we're building these evms specifically for the business use cases of these companies and of these like, networks. So that's what we're allowing them to do with our stack light evms.
00:35:25.138 - 00:35:34.170, Speaker B: Light evm. So you're reflecting like token balances up as address, and then it just looks like a ERC 20 kind of API.
00:35:34.210 - 00:35:37.830, Speaker A: Yes. IRC 20s. Yeah. Traditional.
00:35:38.900 - 00:35:48.884, Speaker B: You have a similar mechanism for reflecting up, not just like the staking operations, but additional operations, like on stride. There'd be a liquid stake operation.
00:35:48.972 - 00:36:04.930, Speaker A: So there are essentially. So, okay, let me show you how we do it. I have the code here. So here's eips. You can do it in a few lines. Here's we're changing the constant gas of the create opcode. You can do that.
00:36:04.930 - 00:36:12.650, Speaker A: And this is all on main. It's already available and you can define. So let me go pre compile.
00:36:14.190 - 00:36:19.222, Speaker B: Does that reflect up into something that someone could invoke in a normal fashion wallet?
00:36:19.326 - 00:37:14.984, Speaker A: Yes. So how we do it and how the design works is that basically you define an AVI interface so that wallets can know what action you're doing. You define the bank interface, you want to have all the balances of the users, or you want to have the total supply of the entire chain, which removes the need for indexers or other providers so completely decentralized. Or the supply of a specific coin, you can build this interface. And basically what we do is we have the query that just, someone executes a balance underneath. We just like get the here, like get the balance of the account or get the total supply or the supply of a specific coin. So like we.
00:37:14.984 - 00:37:19.904, Speaker A: Exactly, exactly what it's against.
00:37:19.952 - 00:37:22.000, Speaker B: The vault has an operation that was exposed.
00:37:22.080 - 00:37:37.170, Speaker A: Yeah. So you will define an AVi. Very simple. You're going to find it in five minutes. You build these query. Basically this is the standard. We want to build this using a template.
00:37:37.170 - 00:38:22.390, Speaker A: But then you define your query. Go, you have a mint bolt operation, and then you call the module. That's how it works. It's super simple. Instead of, the goal here is instead of having the message server GRPC, you would define it using a pre compile. So instead of the chain, having these module routers, you have the EVM that acts as the router. And you actually want that because you want more compatibility with EVM wallets, which is basically what I was doing saying here on a historical context, you do want to have the same interfaces that are supported by others without having them to integrate your chain.
00:38:22.390 - 00:39:10.690, Speaker A: Yeah, it's so much, yeah. So what we want to do is start talking to ignite. They have this scaffolding thing, and we're also in contact with roll chain spawn, also like the new scaffolding tool, so you can build it using minutes. And so what this will allow you to is you quickly define your module in a standard way, as any cosmos chain would do. And then instead of. Yeah, like in, like the ones in the cosmos, I say, yeah. I mean, and then you would have like the pre compiled, created for you immediately.
00:39:10.690 - 00:39:40.440, Speaker A: So that saves you so much develop, so, so much developer time. Yeah, yeah. You can do that. Yeah, you can. Doesn't matter. You can define the, for the. If you're building a custom buck module, you can just as long as the interfaces remain the same.
00:39:40.440 - 00:39:51.390, Speaker A: Or if you want to add a new operation, you just add that into the Avi. So it's really easy to do because the wallets really don't care what you're doing under the hood. Yeah.
