00:00:00.680 - 00:00:24.014, Speaker A: Looks like we have some characters today. We've got a penguin, a dinosaur, and what is that a. Looks like a crypto punk. But I'm Andy. I am the co founder of the roll up. We do a lot of media and education around, like, modular blockchains and scaling and these types of things. Today we have alt VMs versus evm with David, Dino, Rahat, and Dima.
00:00:24.014 - 00:00:27.170, Speaker A: So come chill and let's have some fun.
00:00:33.810 - 00:00:36.430, Speaker B: He's on. What up?
00:00:36.770 - 00:00:42.258, Speaker A: What's going on? All right, so let's do some quick intros. Start with you, Dima, and then we'll go down the line.
00:00:42.434 - 00:00:42.746, Speaker B: Yeah.
00:00:42.778 - 00:00:47.950, Speaker C: Hey, everyone, I'm Dima, co founder of layer N Building, the most powerful blockchain out there.
00:00:49.210 - 00:00:54.620, Speaker D: Dino, one of the co founders of Fluent, and we're building the first execution network.
00:00:55.160 - 00:01:02.100, Speaker B: Hey, I'm David Mihal from Fuel Labs, and we are building a operating system for high performance roll ups on Ethereum.
00:01:02.840 - 00:01:10.820, Speaker E: Hey, I'm Rahat Devrel over at movement Labs, and we're building the first move based VM chain on Ethereum.
00:01:11.360 - 00:01:36.210, Speaker A: Awesome. I think we're all pretty familiar with the next gen VM or Alt VM versus EVM conversation. We've been having a lot on the roll up the last six months, and, you know, I just kind of like, would like to understand from your perspective, actually, this is kind of like a meta question. What. What do you guys want to get out of this conversation? Like, what will make this conversation productive for you guys? This is. If it. If there's anything in particular that comes to mind.
00:01:36.210 - 00:01:42.582, Speaker A: If not, I can move into the actual questions, but, like, hot takes, I don't know. Okay.
00:01:42.726 - 00:01:44.470, Speaker B: Trying to float some, maybe just like.
00:01:44.510 - 00:01:52.574, Speaker D: The trade offs, like the actual trade offs in that design space of choosing EVM versus different types of all vms.
00:01:52.702 - 00:02:19.640, Speaker A: Okay, cool. Well, that's great. My first question is aligned with that. It's kind of understanding the pros and cons of the EVM, I think is a really good place to start for this conversation, so we can kind of build a foundation from that. So, yeah, in the world of execution, why is the EVM been kind of the leader? And what are some of the downsides of the EVM as we know it today?
00:02:21.380 - 00:03:06.230, Speaker B: I mean, network effects, I think, is always the reason the EVM is so dominant. This is something we always see in software, is the best technology, is almost rarely the most popular technology. It's why everything is built with JavaScript. We've talked a bunch before about PHP had its time as the dominant technology today, if you want to build an application, I still think if you can build something on the EVM, you probably should because it's got a lot of good tooling, it's got a lot of great security ecosystem. We're getting pretty decent scale with it. So I think if you can do something with EVM, you probably should. But I think what we're hoping, what I think a lot of us on stage here are hoping is that we can enable a whole bunch of new types of applications that weren't possible with EVM.
00:03:06.860 - 00:03:53.160, Speaker D: Yeah, just, I mean, similar thread. Just to build on that. I kind of think about it as, like, the EVM has, like, I put all that in the bucket of, like, almost like, go to market benefits or, like, ecosystem benefits, because, like, through the lens of, like, a dev, like, what are you trying to do? Like, yes, you're looking at different technical attributes, but you're also building a startup. And, like, sometimes it just, like, you can iterate faster when there's, like, a lot more, like, building blocks to just pick off the shelf, when there's, like, integrations out of the box, when you could type some in a chat GPT and just get an answer. And, like, those are, like, much more, like, efficient processes than, like, having to, like, find the one dev on the one new EVM, the alt VM team. So, like, there's clearly, like, go to market benefits for the EVM, even though, like, clearly it also has technical limitations. And those are all, like, there's a lot of valid criticisms technically, but those go to market things are important.
00:03:53.160 - 00:04:01.620, Speaker D: Like, these are startups too. So, I mean, but that does, it's just kind of offering more color on the, the network effects that he was talking about. Really?
00:04:02.280 - 00:04:34.950, Speaker E: Yeah, I think piggybacking off of what they both said, it's like, if you want to build something quick, fast, with a lot of community support, whatever, sure, go on the EVM. But if you want to build something a little bit better, go a little bit beyond, like, what's capable right now, you got to venture out a little bit, which will be harder, less devs. I guess in the arena you won't be. You'll have a challenge of just, like, onboarding new folks onto whatever tech you have, which is, I guess, what some of us are doing here.
00:04:36.530 - 00:05:18.070, Speaker C: Yeah, I'm pretty much in agreement with everyone I think we all recognize here. Is that okay? If you're building something new, it will be much harder to onboard more developers, more people on board to it. And I would say even on performance side on a smart contract platform, you will have so many solutions by the end of this year is that if you're just building another generic smart contract platform, EVM will be comparable in performance given you see what Areth is doing, what Monad is doing, mega ETH is doing. But at the end of the day, the question is like hey, can we do some unique use cases with lpms and do these use cases unlock next 100 x applications? And that's what we're trying to ask and try to build for.
00:05:18.780 - 00:06:11.050, Speaker A: Yeah, and I think this idea of the technical limitations being the reason for these kind of next gen vms coming to market. But the network effects, as you said David, is kind of like the bigger issue at hand. If you flip it for each of your environments and kind of projects, I'm thinking about how you guys plan to kind of access network effects from EVM and kind of broadly also solve this interoperability problem where interoperability providers have to make dev stretches to bring a bridge from fuel to fluent to movement because they're different environments. How are you guys thinking about kind of accessing the network effects of EVM and building those interoperability solutions?
00:06:12.270 - 00:06:54.990, Speaker C: Maybe I can start. The way we think about it, is EVM kind of one or at least going to be the dominant player in a smart contract world? If you want to build a general smart contract application, it's probably the best solution. So that's why we going to have our own EVM environment where people come build on it. What we are trying to figure out is what use cases are not possible on general smart contract platform. What can I not do? Let's say on movie and SVM on EvM. In that case, that's where we want to provide a unique environment where you can optimize for a specific use case. That's how you can achieve for an exchange, for example, hundreds of thousand transactions a second, which is going to be a lot harder even with really performant EVM iterations or moviem or SVM iterations.
00:06:54.990 - 00:07:19.022, Speaker C: Our answer to this is that we want to onboard EVM developers all the EVM smart contract into general EVM environment. But we also want to provide people to build an application from zero to one and build something that's not possible in EVM vms VM. And so you essentially don't need to fight over like hey, build your smart contract. On our platform we are telling you you can build something that's not possible on EVM. That's the only place where you can.
00:07:19.046 - 00:07:26.890, Speaker A: Build what you want so thesis is, users will know that they can get access to different apps on your execution environment, and that's good enough.
00:07:27.550 - 00:07:58.170, Speaker C: So essentially they will have access to both EVM platforms enabled. But we want to enable essentially next iteration. And let's say we build this app, which is never going to be possible in a VM environment. In that case, we can have this unique value prop for people to come and avoid playing zero sum games where you're trying to convince people rewrite your code in move, rewrite your code in rust or any other language, but instead build something from scratch, build something new that's not going to be there on any other chain.
00:08:00.510 - 00:09:29.180, Speaker D: So I think our version of that is a little context like fluent we're building. I think I mentioned a first blended execution network. At the core of that is what we call blended VMD, which for those more technical under the hood is just a reduced version of web assembly as our vm. But what we're doing with that, I think is more interesting where the blending comes in, because we're using some precompiles to facilitate a number of different apps from a number of different, traditionally a number of different vms to deploy on our one state machine. So EVM apps, SVM apps and WASM, the way that we're approaching that problem within for use cases that need to be in kind of like one sandbox or want to be for whatever reason, you get much more expressivity. And I think the way so you can copy paste some EVM apps over, but the way you can kind of progressively start to differentiate from a lot of the other EVM, mostly solidity. So just because they solidity apps is maybe you would build some type of app like maybe you do like fork a Dex or something like that, but you innovate with it using some rust libraries or some C libraries and enable parts of that application that otherwise would either be infeasible completely in an EVM environment because it's very inefficient or just what we were saying before, just the rate of innovation, because there's just that many more building blocks you basically pick off the shelf and that just fosters more innovation.
00:09:29.180 - 00:10:14.654, Speaker D: That's the way we see meeting the market where it is right now. And I helping people like progressively build more and more and more interesting things and eventually to the point where maybe for net new use cases people aren't or people new developers, maybe you are just building something in JavaScript and using rust smart contracts or something like that, using the wasm part of the system so that's kind of how we're approaching it. One thing to clarify, though, is even though we're saying, hey, we could blend all these environments together, we're not trying to make the case that. That we're just going to be like one big fat roll up and everybody else can go home. That's not what we're thinking. We think it's just a better way to design execution environments. So we'd envision many, many different blended execution networks with all different types of trade offs.
00:10:14.654 - 00:10:16.370, Speaker D: So it's not like there are no trade offs.
00:10:17.550 - 00:10:51.250, Speaker A: Yeah, I mean, the original thing that we settled on was that the EVM was better with this go to market in terms of network effects and accessibility, but not as. As, like, strong, if you will, as some of these next gen vms on the technical side. But the first two answers so far have been all about the technicals and nothing about the network effects or the go to market. Like, is there a way that we're going to be able to kind of solve more for that weakness of the other network effects? And I'm just picking a bone with you, but, yeah.
00:10:53.390 - 00:12:01.838, Speaker E: Yeah, I would say, I mean, the way we're kind of approaching that at movement is if you look at our Devnet right now, if you want to start building on move, you can. We also have a Devnet specifically for EVM developers. So what we're trying to go for is, like, if you want to, yes, you can bring your EVM apps here, and we've spoken to, like, a few EVM builders in that sense of, like, bringing them over to our ecosystem or whatever, but to, like, really tap into move VM itself as like, a benefit for your app, where I'm telling people, okay, you can do that, but that's really there. More for just getting on the ecosystem. But at some point, you can kind of, like, start moving over to the movie, right? So, like, giving that opening for folks to come in use, you know, what solidity, smart contracts that opening is there, inviting people, inviting folks to the ecosystem. And I think that's a good way to tap into some of the network effects and everything that we're talking about here. But ultimately, you have to kind of present what your benefits are.
00:12:01.838 - 00:12:18.040, Speaker E: So in our case, it'd be like, better security and faster transactions, whatever, what have you. But I think taking a little bit of that phased approach, you catch some of those network effects, but you can start converting folks in that way.
00:12:19.340 - 00:13:13.610, Speaker B: Maybe we take a little more of, like, an extreme approach in that I know with fluent with movement, you have EVM alongside more modern vms at fuel. We considered that. We decided that we really want developers to, we want to rip the band aid off and developers that want to build an ecosystem, make them learn, sway and build apps with the way that we think apps should be built on blockchains. And yeah, it's like a tough, certainly a tougher, like, onboarding process. But we wanted to kind of try to get people to realizing the benefits of kind of the architecture that we're building in in terms of like the, you know, trying to tap into the network effects. I mean, it's always going to be hard to like, try to fight against the network effects of all the tooling and everything in the ecosystem. So I think the best we can do is like just have the late mover advantage of.
00:13:13.610 - 00:13:40.980, Speaker B: We've seen many different toolkits come through on the EVM space. We've seen many different indexers, many different block explorers, things like that. We don't need to rerun that whole cycle. We can try to take the best of trying to make clis that look like foundry, trying to make indexers that take the best things we see from different things in the indexing space. Certainly not easy, and it's a lot of work to do, but that's, I think the best that we can do at this point.
00:13:41.320 - 00:14:25.300, Speaker D: Just to like add a couple more points on that, just on this topic through just like a more, again, this is more of like a startup, like operator lens. Right? Like, so if you're saying, all right, you know, I think both of our scenarios with movement and fluent, we're saying, okay, well, you know, you can maybe tap into the network effects by getting like solidity dapps or existing apps. But it's like, okay, how do you, you know, like, is there any more color you can offer on that? Why would they. Right. It's a good question because you can also just deploy those same apps on EVM only chain. So it's like, okay, what's their interest? And I think at that point there's a little bit of a dance between just educating on what's possible with these new primitives in this new environment and getting people excited enough. That, number one, that's going to be an interesting value prop for other devs.
00:14:25.300 - 00:15:00.702, Speaker D: And this will be a successful chain, just purely a bet on, okay, these guys are going to succeed. I should get a job on that. But also, this is also forward looking. So it takes a lot of, we end up speaking to people who really get it from the solidity and EVM side, but when they do, it's really cool because they're like, oh, wow. You have these net new apps that will appear in this environment with this new successful chain, and I want to be able to access that. I don't get access to that on EVM only chains that hopefully just offers a little bit more color on just like what that actual go to market looks like.
00:15:00.886 - 00:15:35.572, Speaker C: Yeah, for sure. I think wanted to add as well on a network effects outside of technicals. I think our strategy is figure out not how to onboard new people to some different programming language. Our question is, how can we make our environment the only place where you can do something? Because when you look back at Solana, everyone thinks about how people on boarded people to rust. But I was one of the first developers on Solana, and we came as a team to Solana because we saw that the Solana was the only place to build certain applications, right. That was the main selling point. And everyone was willing to learn Rust because of it.
00:15:35.572 - 00:16:04.360, Speaker C: Not because everyone was preaching Rust is the next big thing, but because they told us, you talked to founders, you talked to Devrel people, hey, you can build this only on Solana. Only possible on Solana. Meme is real. And that's what we are trying to achieve. Not to sell on programming languages, not to sell on some small features, but tell people that certain products are only possible on our platform. And in our point of view, this is the best selling point, especially given how crowded infrastructure space is.
00:16:06.060 - 00:16:30.422, Speaker A: Yeah, so the when apps question, which is now like a consensus take of we need more apps, less info, which I finally kind of think that we still need to build more and more infrap before we are ready for apps, which is. But you guys are saying that that question might be solved or at least pushed forward away from the EVM, much more so than within the constraints of.
00:16:30.446 - 00:16:52.794, Speaker B: EVM, in terms of how do we get apps. Yeah, I don't know. And that's like, how do we get apps? I think, first of all, I'm one of the people who will always argue against the people who are like, oh, crypto has no use case. I'm like, there's some really amazing stuff you can do with crypto. Crypto. I live my life with my finances on crypto. I get paid with crypto, I spend money, I save money, all these things.
00:16:52.794 - 00:17:43.914, Speaker B: I think that's amazing. And I think the superpower of crypto is, especially in the defi context, is being able to provide the most efficient, open, permissionless markets to the world. One way I look at what we're trying to do with fuel is make those markets even more efficient. You can do that by both lowering fees, you know, trying to be more high performance and by lowering latency, because that's how, that's how, like, centralized markets work in the world. You know, aside from kind of those things you can do on the infrastructure layer, I think one of the barriers to apps is outside of the infra space. It's bringing more assets on chain. You know, if this is really a really great space for assets, for markets, for assets, then some of this is just going to come from like the legal side, right? Like of how do we onboard? Is it whether it's real world assets, whether it's getting more companies to natively issue assets on chain, on chain equities, things like that.
00:17:43.914 - 00:17:50.950, Speaker B: Those, I think will the things that will really bring kind of more usage on chain outside of just like people coming up with new ideas.
00:17:53.010 - 00:18:39.230, Speaker D: I do think, I mean, the reason why we're excited about what we're doing, and frankly, what everyone on this stage is doing with novel VM designs is because I do really think that the more, like, expressive you can make the environment for developers or familiar expressive for power users, and then just kind of familiar for people coming in, maybe with languages they already know, or just with more tools in the toolbox, better things pop out. And that takes some time. And honestly, you don't want to be complacent. But also, I think this whole wave of next gen VMS is probably within this past year. And so we're seeing really exciting things start to get built and exciting ideas. And so I'm still bullish on that. It's not like it's like when apps, but also like, we're getting there, the work is being done.
00:18:39.230 - 00:19:16.220, Speaker D: And I'm sure you guys are all seeing some really cool use cases that couldn't be built on EVM only environments or by EVM only expertise. And I think it's just also a more complicated question because there's so many other parts of the stack and the education just like all across the board, we're rewiring a lot of. We're basically building these stacks from the ground up. It's not like AI, where it's coming in and just building on top of the web stack. We're building full things. So you can have these amazing apps that people want to use, but then, oh, you still make them use metamask. There's a little bottleneck there for user adoption.
00:19:16.220 - 00:19:20.640, Speaker D: So there's hard problems, and we're trying to. We're at it.
00:19:20.800 - 00:19:37.026, Speaker B: It reminded me of yesterday. I forgot the name. Someone from optimism was talking about their interoperability, and they were explained the whole their interoperability thing. He's like, well, this is basically like UDP, so to say. Like, that's kind of like where we're at in terms of infrastructure. It's like we're like, okay, guys, we finally invented UDP. I guess the cosmos.
00:19:37.026 - 00:19:41.430, Speaker B: People will probably disagree, and they say, no, IBC is UDP, but maybe TCP.
00:19:42.570 - 00:20:17.900, Speaker A: So with each of these environments, there's, like, core reasons that you guys find out on the technical side, that you have an edge on, on the EVM, or potentially on each other, in terms of how you guys are viewing your environments. What do you guys think, from your perspective, is the most important aspects of an execution environment that can scale to a lot of users and high TPS, low latency, what is going to be the key features of an execution environment that will enable that?
00:20:18.800 - 00:20:59.624, Speaker E: Just like, enabling better ux for people, right? So it's like, if you look at, like, Solana versus Ethereum, or like, Solana has a better ux than Ethereum, it's. It's a little bit easier to use, it's faster. So bringing, like, a lot of these, all vms, we're just trying to bring better ux. Better. Like, if you want to, like, this even goes back to the last question. If you want to bring apps, you have to just have a better user experience overall with whatever tech you're using. So I think that's ultimately what we're all trying to unlock, just the ability for people to actually build a lot of these apps on these new environments.
00:20:59.624 - 00:21:06.780, Speaker E: So that I think everything that we say or do really just leads up and bubbles up to that.
00:21:08.320 - 00:21:49.472, Speaker C: Yeah, I think in general, how we try to think about it, like, how can we enable new use cases? How can we bring more users? And try to ask our question, like, how can we make the sandbox of what developers can build much larger? I think you look at progression. You have EVM, a bunch of first layer ones. They have ten tps, let's say, or whatnot. And they unclogged a ton of use cases. And you have next gen vms, you have sui Solana, aptos. They provided another 100 x. And our question is, maybe by providing 100 x more, compute 100 x more tps, solving a lot of key bottlenecks problems, and really doing it, not ten x, not 5% better, but really 100 x.
00:21:49.472 - 00:22:37.090, Speaker C: That's where you can bring developers and try to build completely new things which people haven't imagined even building before, or making things that existed in the past 100 x better than they were before. Our question is not only on execution environment level, but even in hardware level, how we can scale it by next two magnitudes and see what we can do in this space. And coming back to your previous question as well, in our opinion, is that, yes, we don't think that infra is at the end state. We haven't solved this problem yet, but we also feel like right now maybe we have so much new resources, maybe it's time to play in the sandbox and figure out the next applications and the next unlocks. And it feels like throughout this past six months we haven't seen that many new nat applications which weren't possible like four years ago.
00:22:38.910 - 00:23:31.410, Speaker B: I'm gonna give a little more like technical response to the question of because if you were asking like what properties does a next gen vm have to have? A lot of our work feel recently has been exploring the state growth space. Because if you say blockchains consume three resources, which is like DA bandwidth execution, like kind of basically cpu time, and state your kind of persistent storage. We've kind of recently kind of flipped to the world where DA is kind of cheap and abundant, especially from a theoretical level. We now have 4044, we have celestia that have already given us probably more DA than we need. And both of them have a long way to go, and we have all these other DA solutions. Execution I think everyone's doing an awesome job at innovating on execution, including in the EVM space. We're seeing more paralyzed evms and stuff like that.
00:23:31.410 - 00:24:12.050, Speaker B: And that leaves state as the last bottleneck to address. And a lot of times when you improve execution, it actually makes state a bigger problem. The more you remove one bottleneck, the more something else becomes the new bottleneck that I think is going to be a really key attribute of, you know, next gen virtual machines for blockchains. It's also something that's not as much of an issue kind of outside of the blockchain space, whereas like execution is generally like a standard computer science problem. A lot of, you know, we've got decades of people trying to make programs run faster. So state is kind of a really interesting, like unique blockchain problem that still needs to be addressed and that we're doing a lot of like research into trying to address.
00:24:13.400 - 00:24:51.498, Speaker D: So I think you had somewhat mentioned almost like what? Like ways we're like almost like what, maybe like competitive dynamics or something like that. And like, I think there's like different dimensions to compete on. And like that's. You guys are both doing amazing work on kind of like the speed and like performance dimension. And that's like phenomenal, I would say, for fluent, like our main, while, you know, clearly it's going to be like perform, actually more performant than like EVM chains, but that's actually not the focal point of the project. It's more of like, you know, I'll say the main dimension we're competing on is like, I'll say expressivity. Just like I want to build a device.
00:24:51.498 - 00:25:34.970, Speaker D: Like when a dev steps into that sandbox, like I want to be able to, for them to just easily pick up dozens of programming languages, like millions of more libraries and just in an easy way be able to just like, you know, think of all of those as just tools and pick whatever best tool is good for best part of your app. And I guess our thesis is that ends up with much better apps. That's just what we're hyper focused on. There's some cool stuff that a blended VM can do in the area of parallelization stuff. We've actually just started researching parallelizing the base layer wasm VM and then being able to support, paralyze EVM and some cool stuff. Cool stuff on top. But for now, I really think for us it's about developer experience.
00:25:35.430 - 00:25:56.170, Speaker A: Awesome. Is there any questions in the crowd? We have time for one question. Cool. Any tiggers? All right, my last question is where is. I don't have a question.
00:25:58.230 - 00:26:34.040, Speaker B: I'll give the Kumbaya moment. I think what's super cool about the modular space of this next gen VM space is we do have a lot of different projects offering very different stuff. I'm excited about all the projects that I'm sitting here with. I think different types of applications will benefit most from different types of VMs, different types of architectures, and that is, I think what will give us a lot of the new applications, the new use cases, is that you're not constrained to trying to shoehorn every type of use case into the EVM, just like you probably wouldn't want to do every type of web two application in JavaScript. So I think that's super cool.
00:26:34.820 - 00:27:00.026, Speaker D: Yeah, no, echo that. And I mean, just like the rate of exper, the fact that we're building these as roll ups and just that rate of experimentation on top of things like Ethereum and Celestia. Is just really cool to see and I think ends up becoming just net better for, I mean, us just like, smashing our heads against all these problems and competing with each other wound up, I think, pushing things forward in a cool way. So, yeah, awesome stuff for sure.
00:27:00.178 - 00:27:00.610, Speaker A: Thanks, guys.
