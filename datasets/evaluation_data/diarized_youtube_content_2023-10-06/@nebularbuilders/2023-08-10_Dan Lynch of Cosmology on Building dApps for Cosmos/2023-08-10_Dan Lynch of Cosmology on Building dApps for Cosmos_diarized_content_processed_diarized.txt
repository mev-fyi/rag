00:00:08.280 - 00:00:34.178, Speaker A: Hey, guys, let's get started. Well, good morning. I'm Dan lynch, the founder of Cosmology, and I'll start giving you a quick background. I've kind of been at the intersection of design and technology for a little over a decade. I started a small startup in San Francisco. The domain was famo us. Hundreds and hundreds of thousands of apps were actually built on it.
00:00:34.178 - 00:01:15.620, Speaker A: It's like Figma in the browser, but actually builds web applications way before. No code was a hashtag. And after that, I actually built a website builder called brandcast.com. ended up getting sold to Time magazine. So really, my focus has been on enabling non technical people to do what technical people do. And I've since kind of transitioned into helping developers become more advanced developers so effectively. Just my goal is not only to bring the technology stack and the developer experience from web two into web3, but also bring more developers from web two into web3.
00:01:15.620 - 00:02:19.230, Speaker A: Effectively, it's really about getting ideas to execution. Oftentimes you have this great idea and you want to build it, but to get from your idea to your execution, you get lost in the weeds. Especially if you rewind back a year ago or more in Cosmos, you'd have this brilliant idea, you want to build it, and before you know it, you're getting lost in protobuffers, amino encoding, all these technical details that really have nothing to do with the idea that you were conceiving. So the problem with this is that sometimes developers might get so lost in the weeds, they forget their original idea, they may even give up. Or now they just start working on tooling for protobuffers, which is actually what happened to me. So minimizing this gap of execution, minimizing the gap between the idea and execution, or getting as quickly as possible from your intention to the execution of your ideas, that is the core of cosmology. Real quick, I'll talk about the anatomy of Cosmos.
00:02:19.230 - 00:02:50.336, Speaker A: A lot of you probably already know, but we have the go SDK modules. We've got the Cosmos smart contracts. Generally, these are interoperable and modular. The Cosmos SDK has over 265 apps in the Cosmos, 60 plus IBC enabled app chains. The idea is that every app chain serves a purpose. And with IBC, these are already interoperable and modular. And also with Cosmwasm, there's hundreds and hundreds of contracts in the cosmos already.
00:02:50.336 - 00:03:21.152, Speaker A: And these contracts can actually call each other. So they're also composable and modular as well. And my question to you is, what about the modularity of the front end? Well, before cosmology came in, there was a lot of complexity. We had Akash J's, we had secret J's. Every chain had to make a new J's. And actually, these teams had to manually build these libraries themselves. Now, imagine a world where every single company or team builds their own APIs.
00:03:21.152 - 00:04:24.120, Speaker A: It's kind of like the web two world. And if you guys remember what it was like to integrate with web two technologies, I mean, it's kind of an end squared problem, like the number of communication channels where all these different apps have to kind of interoperate with each other, but it's not interoperable. And that was the problem that we had before cosmology came in, before about a year ago. So if you think about all these sort of, like, connecting things, all these processes we're doing, I encourage us to think about when we're building software, like, what are we doing today that in 510 years, 20 years from now, we're going to think, wow, I can't believe we were doing that thing. That was so archaic. So what are we doing? How can we innovate and not end up doing software construction? We should be doing software engineering, software art. And so one metaphor I like to think about is, in many ways, a lot of what happens is you've got to build an app.
00:04:24.120 - 00:05:10.124, Speaker A: Is sort of like asking Jimi Hendrix to grow a tree, harvest the wood solder some circuit boards wield into his own guitar and music studio before he could even write a song. Would we even be experienced? And so my question is, how can we give Jimmy his guitar right, so we can be experienced? And essentially. So, I introduced to you the cosmology suite. So we aim to be the Adobe for web3. We have a suite of interdependent products. That means, just like with Adobe, you've got Photoshop, illustrator, and after effects. You can use them by themselves, you can use them together to make bigger projects, but they're all sort of modular, interdependent, and serve different functions.
00:05:10.124 - 00:05:37.980, Speaker A: So I'll talk a bit about these and kind of the purpose behind them. But first, we have an announcement. Taren one has join cosmology. So super excited. William Chen is now our head of R and D. The reason this is super exciting is that we've been primarily focused on front end tooling and catalyzing developers to minimize that gap between intention and execution. And now we can also do that for cosmosm.
00:05:37.980 - 00:07:03.004, Speaker A: So, with the acquisition of the team, we've also brought on their tooling and will be supporting the cosmosm developer ecosystem the same way we've been developing tooling and supporting the ecosystem for the front end. So CW script, it is a new language that actually compiles to cosmosm. So if you think about it, we've got, I don't know, something about 1000 or some thousands in the small numbers of cosmosm developers, there is something about 17 million JavaScript developers. So if we can make a language that actually is something that is much more easier to use, much more simple to express, zero boilerplate actually compiles to rust and compiles to cosmosm, we can abstract that complexity and open the floodgates to these tens of millions of developers in the JavaScript and Python communities. So our goal here again is to, you know, help these folks from web two coming to web3. And we think CW script is one of those technology solutions that actually solves a people problem and bringing in all these developers from other communities. And so the way we do it, the way we do it effectively, is that we really, well, actually, William really thought deeply about the semantics of what a contract is.
00:07:03.004 - 00:07:56.976, Speaker A: You know, we have our state, we have our queries and our executions, and so how do we bake that semantic into the syntax of the language? So that instead of having this super, you know, general purpose rust based system, we have encapsulated it to something very simple. We also have CW simulate. This means you can actually run cosmwasm based contracts in the browser. What's also great about this, we have visual debugging, time travel, and no chain required. What's also really cool for some of you cosmwasm folks out there, you can actually debug nested sub messages. So not something possible before with the current Cosmosm tooling, but with the Terran one team and cosmology now joining forces, we've got these tools that we'll be also supporting and innovating on. So I have a question for you guys.
00:07:56.976 - 00:08:32.140, Speaker A: The first thing you do, write a test. Yeah, okay, cool. Well, you should be. So that's great. But we've launched a new tool called Starship, and again, it's really about you write a piece of code, and now you want to see the result of that code. Some developers might end up writing a line of code, refreshing a browser, clicking on some elements on the page of creating a transaction before they can even see the result of the edit that they just made. That is a super terrible feedback loop.
00:08:32.140 - 00:09:08.534, Speaker A: It creates developer fatigue. The amount of development that you can do in your cycles will be very slow. But imagine a world where you write a piece of code, there's a watcher, it's running a test, and you instantaneously get back feedback of whether that code has passed or failed your test cases. So, introducing starship, we have a development environment. We can simulate n number of chains, one chain, two chain, three chains, n number. We have different clients for rust go, as well as typescript. It also serves up a local chain registry and an explorer IBC relayers.
00:09:08.534 - 00:09:54.804, Speaker A: And it's actually being used in production for osmosis. We're testing all the amino encoders and protoencoders, all of the lp functionality and pool functionality in Osmo js. So what's also really cool about this, it works in GitHub actions. So we have a very lightweight system. It simulates all the things. And in the future we hope to get not only for testing, but also for running production infrastructure. So one question I also have is, have you guys ever bike shed or wasted time talking about UI frameworks such as whether you want to use react, Vue or Svelte? I know we launched Cosmos kit and some people are like, hey, we love Cosmos kit, but you're only supporting react.
00:09:54.804 - 00:10:28.392, Speaker A: Well, we heard your feedback, we've listened to you and we think that people evolve, technology evolves, so should our software. So we introduced to you interchainui. It's an interoperable UI kit, it's framework agnostic. We have prebuilt blocks, branding and theming effectively. You can write once and render everywhere. So supporting react, vue, angular, svelte, web components, among others. And it's in collaboration with the designdao.
00:10:28.392 - 00:11:07.236, Speaker A: Julius here is also part of the team. So we're really excited about this. We're going to launch interchain UI in the coming weeks. You'll have an explorer where you'll be able to just literally like in the bootstrap days, where you can just copy paste components in. We're going to have a whole set of categories of components for dexs, nfts, wallets, utilities like chain dropdowns and these kind of things to make it very easy to build applications and front end applications in addition to all other tooling that we have. So this also brings us to Cosmos kit. You guys might be familiar.
00:11:07.236 - 00:11:52.324, Speaker A: If not, it is a unified wallet adapter. So you've got one interface, but you have many, many wallets. We're supporting 15 plus wallets so far. We have contributors from all the top teams, such as like the CTO from Cosmo station, team members from Kepler, and Chainopsis so this is a community driven project, and we're actually, it's just very simple. You connect modal, you can do either from mobile or from your extension, and it gets you connected. This process, if you rewind about a year ago, could take multiple days, probably up to a week, to even connect to a wallet and make a transaction. Not to mention you have to end up encoding these transactions manually in the past.
00:11:52.324 - 00:12:19.914, Speaker A: So again, it just goes back to the core of what we're doing, minimizing that gap between your idea and the execution of your idea. Connecting to a wallet and signing transactions should be the easiest thing. You shouldn't have to think about it. You should think about the types of messages you want to create and the applications you want to build, not dealing with connecting with wallets. So let's just make that simple. We're announcing Cosmos kit 2.0. We have a bunch of new features and improvements in Cosmos Kit 2.01.
00:12:19.914 - 00:12:52.428, Speaker A: Of the exciting ones is you can natively connect to Ledgeregh so that whether a wallet supports ledger or not doesn't matter anymore. You can actually just, right from Cosmos Kit, connect to your ledger via USB. We also have reduced the bundle size to one six the original. So any folks that were worried about tree shaking or bundle size, we got you. And if you're ever wondering where to start, look no further than crate Cosmos app. So run one command and you get a full boilerplate. You get a next JS application.
00:12:52.428 - 00:13:27.358, Speaker A: You've got Cosmos kit for connecting to wallets. We've got documentation to all the libraries. If we're using specific examples, we might have telescope or TS cogen for converting your Cosmos SDK or contracts into typescript code, and it literally just takes seconds to install. We also have a bunch of really great examples. Let's say you're a small startup and you want to, and you can't necessarily get listed on some of these more popular staking dashboards. Well, literally in 3 seconds you can install our stake tokens example. And now you have a fully functioning staking dashboard.
00:13:27.358 - 00:14:08.410, Speaker A: This is not just the UI, this is the UI and the telescope transpiled libraries. It's also connecting with Cosmos kit, and the transactions are fully functional. So if you guys launching a chain want to have your own dashboards, 3 seconds later you can have one that's fully ready to deploy. We also have swapping tokens. This is based on osmosis, and we're probably going to be also doing some partnerships with SCIP to make some more swap uis as well. We've got providing liquidity. So if you guys want to make some alternate osmosis uis and maybe integrate with SCiP or some things right now, you can use these examples to start from.
00:14:08.410 - 00:14:36.262, Speaker A: We also have asset lists and IBC transfers. A new fun one I'm really excited about is the NFT example. So you just literally in 3 seconds can launch your own NFT website powered by stargaze. So what's cool about this is if you're a creator now, you can customize and make your own experience for people to mint nfts. So I think this is something that you see a lot in Ethereum. And now we can do this in the cosmos. So create Cosmos app.
00:14:36.262 - 00:15:24.676, Speaker A: It's an NPM install globally and 3 seconds later with one of these examples, you can start having fun. Essentially, cosmology is a factory for apps. It's like a web3 printing press. Effectively, we convert the Cosmos SDK go modules or the cosmosm smart contracts into these really neat package, multi chain client packages. And effectively what this does is it allows us to bring more web two developers into web3 because it abstracts all the complexities of the cryptography, the math, all the blockchain technicalities away. So that if you're a web two front end junior react UI developer, you can now start building apps in the cosmos today. This was not true about a year ago.
00:15:24.676 - 00:15:56.862, Speaker A: So effectively, this is what our tooling, the God us in the cosmos, does. I'll quickly tell you about some of these products. The first one is telescope. This helps you convert cosmos SDK chains into typescript packages. It's downloaded over 5000 times per week. It's being used by the top projects such as osmosis, Stride, even DyDX. Effectively, what it does is it converts all those protobuffers and the technical stuff that I won't get too into these really neatly typed packages.
00:15:56.862 - 00:16:32.422, Speaker A: And as you can see here in your iDe, it will give you full autocomplete so you can explore all the modules in the cosmos decay. All of their messages that you can create are just easily cradable. Also, their arguments are also fully autocompleted here too. So the idea is now, as a developer, you can just start to explore all the APIs in the cosmos or all the APIs and the contracts without having to go to any documentation. The telescope will basically fully create this self documenting, self exploring system. So that again, as a developer, now you want to build a DaP. You don't even know what the modules are.
00:16:32.422 - 00:17:11.190, Speaker A: Well, they're fully explorable for you. So just doing everything we can to help people move faster. Query the chains and the contracts and getting us the contracts, that's where Tscogen comes in. So actually, small story, I built telescope and I went to a web3 event in San Francisco and met Jake Hartnell and he was like, hey dude, what you did for telescope you gotta do for contracts. Like it's actually gonna be ten times easier than Protobuf. So we got together in the mission at a coffee shop. I think we actually put the prototype together in about a half a day.
00:17:11.190 - 00:17:58.130, Speaker A: And anyhow, so T's cogen is now the de facto tool for cosmosm for the front end. It's downloaded over 4000 times per week. It's used by top projects such as Daodao, Osmosis, Juno, Mars protocol, Stargaze probably. If you're not using TS cogen for your cosmosm projects, we don't know what cave you're living in, but you should definitely be using this. It will save you tons and tons of time. So talk to me or Jake or anyone else that is working on Cosmos and we'll be glad to help you guys out effectively. What it does, same kind of thing, it just types all of your contracts to give you that really easy to use, fully explorable, self documenting way of interacting with your contracts.
00:17:58.130 - 00:18:19.224, Speaker A: I mean, look how easy it is. Now you just instantiate a client and call mint. That's it. So no cryptography, no understanding blockchain, no encoding, no protobuffers. That stuff gets completely abstracted away. So really just trying to simplify it for developers. A cool new thing we launched at awesome.
00:18:19.224 - 00:19:03.138, Speaker A: Awesome. If you are using cosmosm, we have this and react specifically, we have this use contracts hook. It transpiles all your contracts into a nice hook. And the beauty here is what it does is it automatically will asynchronously fetch all of your RPC URL's. It will fetch all of your async cosmos and query clients and sign in clients under the hood. So that when you're using a contract, look at this, this is all synchronous. So if you're in a react component, you want to write synchronous code, you use this hook here we get the marketplace signing client synchronously and we can just literally call this, you know, method that I believe is updating the ask price for an NFT.
00:19:03.138 - 00:20:09.370, Speaker A: So again, this is something that I think a lot of developers were wrestling with because they wanted to write a, they want to update the ask price. But then they're burying in their code this use effect hook for getting the RPC URL, getting these clients, and before they know it, like they're struggling with react hooks and not even getting to call the method on the NFT object. So the idea here is like, hey, let's just get from zero to calling your NFT contract in zero to 3 seconds. So under the hood what it does is it wraps the TSCO gen clients with all the information that you need and there's a use effect hook that kind of manages all that for you so you don't have to deal with it anymore. I think this will probably five x your current t's code gen development if you're already using TS cogen, and if you're not using TS cogen, you'll probably ten to 50 extra development. Another cool one that I'm still surprised people don't know about this package, the chain registry, which actually there's the cosmos chain registry. This is where we get all this information.
00:20:09.370 - 00:20:52.506, Speaker A: You can NPM install this library that will effectively get all the chain information, all the asset lists and tokens from the Cosmos chain registry into a nicely bundled package. But if you're building dexs, if you're building anything to do with tokens, which I imagine a lot of you are, you should probably check out this library. And this is downloaded about 6000 times per week. So it's very popular library. You can depend on it, that is for sure. It also has all the IBC information. There's another thing that you should know because some people are wondering, well, hey, should I keep installing this NPM module? Well, if you install our client, you can dynamically fetch these things.
00:20:52.506 - 00:21:40.400, Speaker A: So if you want, you can just pass in the chains you're working on. You can then get these asset lists dynamically so that they fetch it from the Cosmos chain registry while the user is actually using the app. So that way when we're in the bull run and new tokens are being listed, if you wanted to, you could support those dynamically. So the last thing I'll end this on is in 1983, Tripp Hawkins and the electronic Arts team launched this really awesome campaign. Can a computer make you cry? And, you know, they really talked about the aesthetic of building software, the software artist. And you know, I think that in recent years, like technology and software has gotten so complex that we've forgotten that the software engineers were the musicians, the artists, the creative people. And I think a lot of us obviously are really creative.
00:21:40.400 - 00:21:59.920, Speaker A: And just remember that it's the aesthetic. It's that creative genius, that excitement and an inspiration that I think brings us all here. And so I hope to help catalyze all of you to execute your ideas and build really amazing things for the cosmos. Thank you, guys.
