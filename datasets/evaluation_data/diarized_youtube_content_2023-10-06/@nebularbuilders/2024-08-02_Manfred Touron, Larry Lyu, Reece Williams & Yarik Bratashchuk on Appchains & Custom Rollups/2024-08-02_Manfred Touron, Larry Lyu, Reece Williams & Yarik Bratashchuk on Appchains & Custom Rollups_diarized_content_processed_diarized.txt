00:00:00.440 - 00:00:22.570, Speaker A: All right, all right. Well, first of all, I'd like to thank Interop for putting this enabler summit together. Super excited to host this panel today on app chains and custom roll ups with a very spicy lineup. To tackle the topic. Without waiting more, I would like you to introduce yourselves first, and then we'll dive straight into the topic.
00:00:23.510 - 00:00:41.020, Speaker B: Hey, my name is Larry. We are building a new execution layer called Grag. So if you are launching a new app chain, you can possibly choose grag as your execution and pick your favorite consensus to go with it.
00:00:42.000 - 00:00:55.850, Speaker C: I'm Reese. I work at roll chains and strangelove. We build good ux tooling for building out your custom layer ones or roll ups, and making that super simple to do and upload that to TIA, improve the cosmos overall.
00:00:57.390 - 00:01:08.130, Speaker D: Hi, my name is Jarek. I work at Rolekit, and our goal is to empower developers to create new types of roll ups easily, as it would be launching a smart contract.
00:01:09.350 - 00:01:21.960, Speaker E: Hi, I'm Manfred. I work at Noland, where we try to create the most interoperable language where you can interrupt multiple contracts in the same chain, but also between chains.
00:01:23.140 - 00:01:42.916, Speaker A: Okay, cool. Would you make a case for building your own app chain today in a space where it is actually possible to deploy your business logic on a highly scalable chain that has, let's say, fee markets or. Yeah, bootstrap your own roll up.
00:01:43.028 - 00:02:17.294, Speaker C: Basically, I would definitely say that level ones, we still want to create those. If you want the full control and you don't want to have, let's just say Celestia went down and you're rolling up to them, you still want to have your own network. And that's been important for institutions who they want to run it in house. They don't want to have a roll up where if they were to, they would roll it up to themselves on their own infrastructure. And that just doesn't make sense. So I think that it definitely does make sense to launch your own l one s, but also have the opportunity to, to run a roll up if your application can benefit on that, since you're already on chain anyway, probably I.
00:02:17.302 - 00:02:47.678, Speaker D: Can add that with rollkit, for example, it's easy to. You may try bootstrap it with the rollkit with the roll up, because it's easy and fast. Like maybe in a week or maybe a few days, and then maybe if you want, you can switch back to. If we're talking about common BFT, you can just replace rollkit with a common BFT. It doesn't make any sense, right? But theoretically, if you, if you have some stakeholders which would require you to have your own consensus and what they said, you can just do this without any coding, you just replace.
00:02:47.774 - 00:02:48.610, Speaker A: That's it.
00:02:51.390 - 00:03:09.240, Speaker E: I think the main reason to launch new chains, app chains, with or without roll ups, is for scalability first, intent, specialization. With the rise of smart contracts, maybe it will be more about just scalability and specializing some token or peer to peer network, but basically are the two main reasons.
00:03:10.620 - 00:03:36.330, Speaker B: Yeah, I think some applications, it just depends on the specific application. Some apps are more better, like be in a general purpose execution layer together with all the other apps. For some apps they are just better alone, being their own app chain. Maybe some apps have special requirements of the layer one they are on. Being an app chain is super easy to customize those for yourself.
00:03:36.910 - 00:03:50.210, Speaker A: Okay, would you mind casting some light on the different features and let's say elements that you have in your tech stack that reduce the cost of actually bootstrapping the chain and making it reasonably secure?
00:03:51.550 - 00:04:28.990, Speaker B: I can go first at grach. One of the design principles we have is that if there is something we expect people may want to customize, that part is abstracted as a smart contract. So for example, gas fee is managed by a smart contract. Every user account is a smart contract. The chain's native token is a smart contract. Only those components that we don't expect anyone ever to want to customize those things are native rust code embedded in the chain. But everything else is a smart contract.
00:04:28.990 - 00:04:55.450, Speaker B: Anytime, if you want to customize certain things on your chain, you don't have to delve into the chain level code. All you need to do is to write a smart contract. And anytime, if you want to change your things, you don't have to fork hard fork the chain, just upgrade that contract and that's it. So I think this makes it super easy to tailor the chain to the experience you want.
00:04:56.050 - 00:05:35.010, Speaker C: What we do at role chains is in our tool called spawn. We allow the user to select even things that we may not agree with is the best for them. We want developers to build out what they think is best for them, and we just give the opinion of do we enable that by default or not? And so allowing them to select what they really do want, whether that be different types of consensus, proof of authority, proof of stake or interchange security, which is kind of like a level one roll up or a roll up itself directly to Celestia, allowing them to decide that on their own, and we just give them those options and then they can customize that as we give them. So give them a same default and then allow them to be a power user after that to fit exactly what their use case is.
00:05:35.670 - 00:06:24.526, Speaker D: Well, in case of Rolekit, we do have customizability as a feature as well. So for example, as Manfred said, you can just don't touch, for example the engine and just improve your app, which is a smart contract. With Rolekit, for example, you can play with different vms, for example, we can use the grug, then we can, if you abc I compatible, we can use some custom awesome or just Cosmos SDK app. So you asked about features. One of the features is module architecture. And in terms of software, it's also a lot of decoupling stuff. So you can have, you can play with, if you don't have you just starting, you can play with the local DA, which is a local implementation of data availability.
00:06:24.526 - 00:06:45.320, Speaker D: Then you can switch to a veil over Celestia. So everything is like, it's basically giving developers an easy way to go to market really fast, maybe in a week. And then if they want more and more and more, they can just change components. And I dusted.
00:06:46.260 - 00:06:47.480, Speaker E: Nothing to add?
00:06:48.220 - 00:07:20.806, Speaker A: Nothing to add. Okay. And I think that an interesting thing that we see with the emergence of Eigen layer and other solutions is a different notion of the cost of security to actually, let's say, to make an arbitrary system secure. Let's put it this way. How do you, how, yeah, what kind of options do you offer to any prospect to get maximal security while ensuring the minimal overhead?
00:07:20.838 - 00:07:48.748, Speaker C: If that makes sense for us, security is no longer a problem. Really, in crypto, where we've got all this money, we have all this restaking, it's really more. What other features can we add on top of that? That benefit the end user? So sure, we can have security to avail. And Sunrise and Celestia Das and have Cosmos hub and they're chain secure chains. You have all these billions of dollars, but really the focus should still be more apps. And so if your app is not using tons of Defi, you probably don't need all that. Yes, it's going to be very cheap to do.
00:07:48.748 - 00:08:09.170, Speaker C: You're adding complexity and really the real cost is the developer time that's going into that. So really it's more. What features does, say sunrise have that avail? Doesn't that your chain can utilize or something with Celestia, with like RPCs for example, and sharing that load with them, then that actually has a benefit more than just the direct security that you get of having that roll up there.
00:08:10.430 - 00:08:28.330, Speaker B: Yeah. So for us Grok is just an execution environment. It does not concern security. However it has a modular design, meaning you can put a number of different type of consensus beneath it. It can be tendermint, it can be roll chain. I'm not sure about rollkit. Maybe you can.
00:08:28.330 - 00:08:39.580, Speaker B: Well it can also be op stack. If you want to be a roll up with a centralized sequencer, you can also do that. Yeah. So it's up for you choice.
00:08:40.200 - 00:09:07.720, Speaker D: Well, as Reese said, regarding the inheriting security from the DA, which is the case for Allkit, one point to add is that we have a full node which would execute everything. So we offload the trust assumptions from the sequencing layer or centralized sequencer, let's say. So, yeah, that's it. Basically the main point is that it's inherited from the DA layer, the underlying l one, basically.
00:09:08.740 - 00:09:39.890, Speaker E: Yeah. Basically you need to choose if you need more security or more future or more speed. I think another example which is not exactly roll up, but where you want something similar is if you have like a light client that want to get some Merkel proofs. In practice it's up to the client to decide if they want to be more up to date, et cetera. And we are building also very secure alternative to roll ups with IBC ICs. Technically we can have the security with compromise or the features with less security. And it's just a question of choice on your needs.
00:09:39.890 - 00:09:45.210, Speaker E: And I think at the end I read approach with a mix of everything happening on your case.
00:09:47.070 - 00:10:10.150, Speaker A: You just mentioned that there are certain use cases that have higher security requirements or would ideally benefit from more security and some that require less. What would be the for high value financial business logics and use cases? Would it still make sense to go with a solution that does not inherit security from a very safe, let's say?
00:10:11.090 - 00:11:09.070, Speaker C: Yeah, the way that I think about security is more like just an audit log. So for something like, let's say you're launching a proof of authority chain. This is something like noble that's in the cosmos where each validator has a set amount, everyone has an equal amount of stake. If you want to think of it like proof of stake, it's important for them to have a backup log to something like a celestia, for example, where you have that. Continuing to do that over and over, there comes a point where you're paying more than what you're actually getting, both in terms of cost directly to the DA layer as well as to the developers that are spending time focusing the handling those partnerships, continuing with that development work and is it really worth it? So I think that as long as you have one DA layer, you're probably more than good going over and above that. It may be nice just from a marketing perspective to say that hey, we're backed up here and the slashing mechanisms, et cetera, that are built on top of that. But I think that really if you just have one, that's probably good enough for most of us and most chains may never need that.
00:11:09.070 - 00:11:14.660, Speaker C: But I think it's a nice option and it's cheap enough, that easy enough to do that today that it makes sense to do.
00:11:16.160 - 00:11:24.620, Speaker A: Okay. I'll be curious to know also what other frameworks you like aside from your own when it comes to bootstrapping your own chain.
00:11:25.040 - 00:11:49.830, Speaker C: So the other framework is ignite. This is built by the binary builder or by the all in bits team, and it's what we based spawn off of how to create that new chain. And so they're kind of the entrance into doing this. We took it to the next level. We're working with them, collaborating with them in the future and then also now rolekit, I've not used yet, but I'm looking forward to using that soon and seeing how that works and then incorporating some of those features into spawn as well.
00:11:51.170 - 00:12:15.450, Speaker B: Yes, so a few other players in the alternative execution layer space, alternative means that is not EVM, besides us, our movement or just move in general. There is sovereign labs and there is fuel. Their smart contract language is called sway. They all have different characteristics. So yeah, big fan of them.
00:12:16.630 - 00:12:25.530, Speaker D: Well personally I would say rolekit, maybe fuel as well. We do have app on ignite as well. Ignite is cool.
00:12:26.790 - 00:12:58.240, Speaker E: I don't know and I don't know exactly, but I would have target something about any new ICS evolution. I think this is where people are trying to fix this notion to make it. For instance, if provides these features for every consumer chain by default, I think yeah, we can basically have this notion of backups by default and then extend to light clients optimization or scaling, backup strategy, etcetera. So I would look for upcoming projects in the ICS evolution field.
00:12:59.540 - 00:13:40.460, Speaker A: Okay. And another thing that we have is a bunch of roll up as a service frameworks popping up a lot of different stacks that are like, let's say easily forkable to deploy your own chain, your own roll up. And that's a lot of block space. There's an abundance of block space that you can create, an abundance of systems that you can create that spawn block space in an abundant fashion. Yet there's one thing that's likely to happen is that a lot of this is not going to be used and a lot of systems are going to end up vapor. What would the congestion event look like according to you guys? I'm sorry, congestion. Yeah.
00:13:40.460 - 00:13:52.464, Speaker A: More of how would all these systems emerge eventually as they do not manage, for instance, to find a reasonable amount of use of users, if that makes sense.
00:13:52.512 - 00:14:36.844, Speaker C: Yeah, the main issue you bring up is really there's just a lack of applications. As we've been here this whole week. Everyone is infrastructure, everyone's building infrastructure. And really we need more aggregators of this infrastructure to make it easy for applications who actually build where. I've got an idea, I'm a base level programmer and how do I actually get started here? And I think that making it easier for there's multiple aggregator tools that don't have a added service tax on top of them. Like where you're building on an l two where you don't have that extra cost there, where you can just deploy your application, get users, try to find product market fit and continue to expand in the traditional business way. That's really the problem that we need more of and making easier infrastructure for all of these great solutions that we've seen over the past week into a single place that we can just select.
00:14:36.844 - 00:14:45.080, Speaker C: I want to use this and that's the way that we need to go forward with this. So that way more apps can come up and more people can take their ideas into production and see them work.
00:14:45.200 - 00:15:18.362, Speaker D: Actually maybe I can add that it's been like at the era of l one s this stage is passed already. So the adoption went really well. And as we all know, in 2010 for example, Microsoft started accepting bitcoin, but when the congestion went up it all went down. So it was unusable. So that was a problem. So I think rollup solves this problem. Like app chains should be easy to build.
00:15:18.362 - 00:15:27.310, Speaker D: And yeah, I really think that what is lacking is really good use cases. Hygriders as well.
00:15:29.650 - 00:16:20.312, Speaker E: I think one case I definitely looking forward to building the future is basically scalability but not in terms of pure like composing a network of chains that make something great together. But mostly about making Web 2.0 style sharding where a single chain can have several shards or subchards, having this aggregator on all the part of the stack. So at the end you can scale horizontally. Your chains rely on ics, roll ups, whatever to basically have a tree of source of truth. And you have the top level mercury proof which is aggregation of all your sub chains, but in the same ecosystem. So rollups can solve inter VM collaboration, but I think in the same VM, especially if it can preserve type safety and everything, it can basically allow to have web 2.0
00:16:20.312 - 00:16:24.380, Speaker E: style sharding, which is one of the ways to fix scalable blockchains.
00:16:25.640 - 00:16:54.030, Speaker D: I want to add one thing is that, one thing is that I think as you said, the good proof system and the trade off between security and scalability is the key. For example, you have inherited security from the DA layer, you don't have your own validator set, for example, just even in case with a centralized sequencer. And you have a good proofing system, for example like fraud proofs, and I think that would be sufficient.
00:16:55.210 - 00:17:09.520, Speaker A: So that's. Yeah, I could foresee some kind of consolidation event and I just wanted to bounce back to Manfred's answer here. And I'll be very curious to know what's the agenda of Gnoland in order to scale the actual chain.
00:17:10.100 - 00:18:23.056, Speaker E: So the plan was discussing basically launching the first chain, which has a way to not only transfer simple primitive types. So basically being able to forward a call with a name of function and parameters, but re providing the structure themselves, providing the proof with Merkel trees at the end you are limited to the same VM or VM using the same standard because technically we can also make a standard to have multiple vms. But if you have this and then you have a hub responsible to facilitate creation of sub chains using the same mechanism. Having this notion of top down and bottom up approach between the children, the parents chain and this notion of having to basically backup every 50 blocks or whatever, this is one of the ways to solve smart contract scalability in a single ecosystem. We still need interoperability with other chains, but in practice it's easier to launch sub network of 5100 new servers, keep the storage in a limited space. So yeah, this is one of the things we are looking for. We take a shortcut of just thinking about our own VM or on data type.
00:18:23.056 - 00:18:50.400, Speaker E: In practice implementation is a spec, so anyone can try to make an EVM compatible or compatible storage. But if we achieve this, we are on paper able to scale infinity. And in terms of timeline, first we launch a chain, then we launch a second chain and then we integrate with the hub that will facilitate creation and link between a chain and the sub chains. So next year, I don't know.
00:18:51.680 - 00:19:17.420, Speaker A: Interoperability is definitely key in closest roadmap in order to have it function the way you described. And I was really curious to know, yarik how do you see, did the space change basically in the next coming years how you would basically position rolekit in perspective against other roll up as a service frameworks out there?
00:19:18.410 - 00:19:39.990, Speaker D: Okay, well right now, first of all, rollkit is the alpha stage, so we still do it. We started from the things that are easiest to implement, for example centralized sequencing. Right. But it will not end there. So we will have shared decentralized sequencing. We are doing this right now. We will have proof schemes.
00:19:39.990 - 00:20:11.482, Speaker D: We are at the stage of the pessimistic stateability so we execute it all. So this is also work in progress. What else? We have implementations for the different DA layers like bitcoin. Da bitcoin is just to showcase basically avail celestial the ones we use. So what's the question was how do I see in an upcoming years rolekit in the space of up chains and.
00:20:11.666 - 00:20:13.554, Speaker A: Yeah, I guess like other roll up as a service framework.
00:20:13.602 - 00:20:59.080, Speaker D: Basically roll ups as a service, yeah. Well I think this year we will find our product market fit. First of all we have decent amount of clients and people start using it. I hope that we will do well in development and breakthrough from, from the stage of using the centralized sequencer. And what else? Let me think. Yeah, I think the key would be the adoption. Like if there is an adoption, okay, we're right, if like something in the industry pivots and you know, something else is popping up, like we can predict that.
00:21:00.060 - 00:22:13.076, Speaker A: Yeah, you can adjust. I think that's, yeah, I mean any like extra remarks you guys would like to add? Yeah, I mean I think that custom roll ups and app chains are like we're getting to a point where it just comes down to almost having the same thing to a certain extent. I mean you have an app chain with a proof of authority, or you have that roll up that settles on x with leverages, either like validity proofs or fraud proofs in order to offer x guarantees. It all comes down to becoming the same thing and you're bound to just network effects or liquidity or just some kind of vibe sauce that will make someone choose a system over another. So I'll be very curious to know what's your take on the future of, of all these roll up frameworks and what are the key aspects that would make them stand out between each other? Because it's like, yeah, they're just a bunch of solutions and it would be really nice to have your insights on what makes a roll up as a service system really relevant according to you.
00:22:13.108 - 00:23:03.300, Speaker D: Or just like, yeah, I want to start, I want just to mention the most important thing that I think is for us is that the technology that is proven to do well is, for example, Cosmos SDK. So being compatible with that is very important. So it's basically like plus on top of that, as long as other projects start to use some technology, it might be of their interest to contribute to it. So it's also like a network effect stuff like how it's called engine API is something we also keep in mind instead of just say BCI. Yes, sovereignty is important for some people. They want to have their own settlement.
00:23:06.960 - 00:23:42.670, Speaker C: Keeping it modular, allowing people to select what they really do want is extremely important. And letting them decide what is it that they want. There's going to be no winner takes all in a majority of these cases. And we want them to use what is best for their use case. And that's going to be specific depending on what protocols they want to implement. So again, it's back to the app issue of whatever fits best for your app is where people are going to go for the roll up as a service of if this one is easier to use, then people are going to use that one. Even if it doesn't have all the features and bells and whistles that others do, people are going to gravitate towards what is easiest to get started.
00:23:43.850 - 00:24:30.224, Speaker B: Yeah, so I'm building an execution layer. So my thoughts on execution is it ultimately comes down to, for certain apps, if these apps can only be built in this vm, but not in that VM, then that is a differentiation factor. So if you're building a new execution layer, as I do, I would focus on the, on that. So build some differentiating features such that there are applications that can only be built in yours but not in others. And that in the long term I think that's how execution layers are differentiated. And also another factor is you can have different philosophies. Some executions, like EVM are fairly ossified, so they are predictable.
00:24:30.224 - 00:25:07.640, Speaker B: You can be sure that any apps you build today will still be running 1025 years from now. But some other vms may want to, well, standing on the bleeding edge to add all the new features, all the great ideas coming up. So it's kind of like Linux Distro, you know, they are like Ubuntu or Red Hat, which are enterprise focused. They are very stable, very predictable, and there's arch that uses a rolling release. Everything is blending edge new. Yeah, so I think these are two factors you can differentiate from others.
00:25:09.380 - 00:26:04.344, Speaker D: I personally agree with both guys and my addition would be that scalability is very important piece and lost the thought I had. Basically adoption. Adoption would decide to, what do I want to say? Yeah, people will build something and the developer experience that they will have, if it's poor, people will not switch to it. They will stick either with web two or they would just know about the ethereum only. So it should be easy. I think that's what we're trying to do, actually. If you go to a website, for example, you can see that we build a CLI, which makes it super, super easy to launch no op state machine, for example, just roll, get started and that's it.
00:26:04.344 - 00:26:18.180, Speaker D: And then you can easily substitute this no op state machine with, for example, custom wasm, for example. Yeah, I think this is it. That's my plan.
00:26:19.000 - 00:26:46.696, Speaker E: Definitely an adoption. Adoption is what will make the framework win. I see two potential winners. One would be the one with the best UX and features mostly for the client part. The other one could be the whole offer. So if you provide equivalent of rollups, but with service behind, for instance, ics, once again associated with the hub, can secure your chain. So it's something you just don't connect because your users are asking.
00:26:46.696 - 00:27:16.916, Speaker E: You just want to be secured if you have built in. If blockchains are secured by something that makes sense and implement this protocol, the protocol becomes a standard thanks to the adoption. So definitely, I think adoption, whether it's good ux for a bunch of developers, maybe in very high level languages, or because whole service makes sense and is adopted by blockchains and just, it's a feature available everywhere you are looking for. So you can start connecting to chains because they all have the features built in.
00:27:17.108 - 00:27:55.548, Speaker A: Yeah, there's also like, there's this question of total addressable market. If you choose to build on that, I don't know, layer zero system, you know that you'll basically be able to tap into this liquidity or make your system available to a broader audience, or you can actually decide to go down the sovereign roll up path. Maybe you have some more customizability like you can, you can change some more parameters, but you're a bit enclaved. You can deploy hyperlane module on top of your roll up and then get disenclaved, but you still don't have the same kind of economic perspective by making that choice. And I would be curious to know as the last question, what do you think is the best way to place the cursor among these two extremes?
00:27:55.684 - 00:28:32.970, Speaker E: Between these two extremes, I think we need the two extremes at the same time, actually. So when you are looking for ics. Definitely what we are offering is not just the solution, but solution with economics within. Something that just makes sense and is secured by everyone wants this protocol to be adapted to works to maintain it. So on this point, it's definitely about the service offer with everything involved and monitoring incentive and the other field. It's basically adjust the best features, the best ux, the best adoption, and providing your software to the mass and expecting a market fit.
00:28:34.150 - 00:28:47.150, Speaker A: All right, any extra like concluding remarks you'd like to add? All good. Well, I think that wraps up this panel. Thank you everyone for being here, and I hope to see you soon. Cheers.
