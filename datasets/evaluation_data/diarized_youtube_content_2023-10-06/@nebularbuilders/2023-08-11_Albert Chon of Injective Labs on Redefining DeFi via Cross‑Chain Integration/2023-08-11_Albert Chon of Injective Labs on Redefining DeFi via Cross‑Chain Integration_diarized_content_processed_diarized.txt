00:00:09.040 - 00:00:35.768, Speaker A: Hello, everyone. My name is Albert Chan. I'm the co founder and CTO of Injective Labs. And today I'll be talking about the app chain revolution, redefining DeFi through cross chain integrations. So, Injectiv is a blockchain built for finance. Our focus is on powering the next generation of DeFi applications and providing powerful advanced defi infrastructure and primitives for builders. So first, I'll talk a little bit about the injective ecosystem.
00:00:35.768 - 00:01:29.520, Speaker A: The injective ecosystem is one of the fastest growing ecosystems in all of cosmos, with numerous DeFi applications and integrations building on top of injective. And I'll speak a little bit about interoperability. So, interoperability is at our core, injective connects with numerous blockchains, from numerous blockchains through IBC, through with axilar and wormhole, and even our own native Ethereum bridge. But for us, interoperability extends beyond just blockchain bridging, but also within the chain itself. And most importantly, compared to other limit order book Dex protocols, the order book on injective is fully composable with smart contracts in cosmonwasm. Now, CosmwaSm is a great framework and has native compatibility with injective. But we found that for new developers, the learning curve for onboarding cosmosm, even if they already know rust, is quite high.
00:01:29.520 - 00:02:19.462, Speaker A: There are many concepts specific to cosmos and cosmosm that you have to learn. And as we spoke to many developers, especially those coming from Solana, we heard these criticisms and difficulties. For them to even deploy their basic application, basically, they'd have to not only rewrite their application code, but, you know, have to learn all these new concepts and security guarantees. So we took these considerations to heart and tried to build a solution for them that they could use. And that is cascade, which is the first interchange Solana SVM rollup. So with Cascade, developers from Solana can utilize all of the benefits of the SBM and create applications that leverage IBC and cross chain interoperability, which I'll explain in more depth. So, first, I'll speak a bit about integrating rollups from an app change perspective.
00:02:19.462 - 00:03:21.548, Speaker A: So, first, why should we integrate a roll up, particularly an SVM roll up? And why does this make sense for injective? The first is that it provides a diverse programming environment, and it lowers the barrier for entry for developers coming from the SVM or even the EVM world, with EVM roll ups on injective, and second, horizontal and vertical scalability. So on the horizontal scalability side, you can charge your execution essentially between different execution environments. One is of course the SVM. The other is the native injective layer. And on the vertical scalability side, the SVM of course is renowned for its multi threaded runtime and offers parallel transaction processing, which is very powerful for scaling modern applications. And the final but I would say most difficult piece is on interoperability, making essentially these SVM contracts be able to compose with injective through IBC, and currently with rollups. You have a seven day fraud proof window, which makes it very hard to compose in a vanilla implementation.
00:03:21.548 - 00:04:17.030, Speaker A: And of course modern defi applications require fast finality. You don't want to place an order for a trade, wait seven days before it gets filled. That's simply ridiculous. So how can we do this? I can summarize the current approaches to cross chain interoperability. As I mentioned, for optimistic roll ups you have a fraud proof dispute, period, that you must wait for, which results in terrible UX. There are also solutions that use what are called committee based committee based interoperability, and these include wormhole, axilar, hyperlane, and I would also categorize these as not ideal. They embed a security assumption in the validator set, and while they are useful for applications that wants to take advantage or adhere to that security assumption, I would not use them as a foundational model for, let's say, the roll up.
00:04:17.030 - 00:05:26.740, Speaker A: There of course is also ZK and validity proofs, which for example ZK rollups or ZK proof of consensus by 16 labs are developing. But these also have pitfalls of mainly slope proof generation and just the general challenge of creating a circuit that is arbitrary and generalizable. There is some interesting work with DKIBC, which Jack Zampelin and I believe another team is working on. That deserves a note that's still in development, though. And finally, there are escrow based approaches, for example, dimensions escrow IBC or EIBC, which essentially uses a market maker or some liquidity provider to take on the risk of having these tokens be bridged over, or basically vouchers and purchasing or giving the tokens up on the other chain. And this approach, while it's more of a band aid solution, it's limited and it incurs extra fees. So the next approach that injective is exploring and want to take a is called essentially a consensus roll up, and let me see if I can get the next slide.
00:05:26.740 - 00:06:24.350, Speaker A: Ah, thanks. And the idea here is that how can we bypass the fraud proof window of optimistic roll ups, since this is a major impediment towards IBC interoperability. And the idea here is injected validators will run a roll up full node and attest to the roll up headers on the blocks on injective. So the mental model analogy you can use is suppose you have a ZK rollup, but you replace the ZK proving system with just the validator signatures and you essentially get the same security guarantee. And what's different here is that because it's an l, two of an l, one with a fixed validator, or not fixed, but a smaller validator set, you're not making any incrementally worse security assumptions than you were already making. And that's also why Ethereum would never do this, because you could never get Ethereum to sign off on their entire validator set. To have to be burdened with this requirement.
00:06:24.350 - 00:07:27.080, Speaker A: And just to go over the mechanism a little bit in more depth, the validators continue to track new headers of the roll up, tested them on injective, the mechanism of which can be done as an implementation detail using vote extensions, which are nice because they allow you to do this in process or just with normal transactions from the validator. And once two thirds of these validators have attested to the correct header, the header is committed to the state on injective. And now because it's on the state of injective, the header can be proven using a lite client, and the IBC packet inclusion can run as normal because. And this allows for you to have IBC connectivity with a roll up. I'm also very excited to announce the partnership with Espresso systems on bringing decentralized sequencers to injective. So Espresso systems has, I would say, the most state of the art technology in the roll up sequencer space. And our overall goal is to work towards atomic composability for Espresso's decentralized sequencer.
00:07:27.080 - 00:08:21.434, Speaker A: For its shared sequencer, actually you can have fast finality with secure transaction ordering and strong data availability guarantees. What's interesting is that in a roll up to roll up setting. So in this scenario, where you have multiple roll ups on injective, you can have atomic cross roll up transactions. And this allows for, in some cases, cryptographically guaranteed cross roll up transaction bundles, and in other cases crypto economically assured cross roll bundles. And that's using a block builder with proposal builder separation. And the final boss to conquer, I would say would be shared sequencing or atomic composability between injective layer one and a roll up. And there's an open question about how this can be done, it's actually unsolved, and whether it's even feasible to have shared sequencing with the sovereign l one.
00:08:21.434 - 00:09:17.570, Speaker A: There are some ideas based off heterogeneous Paxos, and some other ideas like perhaps we can bring PBS to tendermint and use ABCI prepare and process proposal for this. Or maybe we can even not aim for atomic composability but have a more best effort or optimistic atomicity. These are questions that we are now pondering in this design space to of course eventually improve the UX for cross chain interoperability. And taking a step back, I'd like to remark on the power of self sovereign, interoperable application specific blockchains. You know, some of the design choices or things within our consideration would never be possible on layer one. Ethereum, right? The concept of having validators do work for, let's say, attesting to roll up headers that would never be acceptable in Ethereum. Not to mention the slow pace of movement of development and the ossification of standards.
00:09:17.570 - 00:09:45.560, Speaker A: And this is the sort of thing I guess I would like you guys to take away about when you can build on. When you build with an application specific blockchain, you have a lot more freedom on every layer of the stack, from the application layer to consensus to networking and all these other requirements that you may want to impose. And it's become a lot easier to do with ABCI. So that's it. Thanks for listening. You can follow us on injective on Twitter. And yeah.
