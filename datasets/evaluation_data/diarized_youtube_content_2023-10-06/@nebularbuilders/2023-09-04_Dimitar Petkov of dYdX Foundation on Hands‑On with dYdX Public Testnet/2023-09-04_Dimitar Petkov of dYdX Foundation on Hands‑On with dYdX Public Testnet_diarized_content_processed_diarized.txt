00:00:08.800 - 00:00:45.068, Speaker A: Hello. Hello everyone. My name is Dimitar and I am a Defi technical project lead independent contractor with UiDX foundation, our host on this talk and also supporter of Nebula. And I'll be more than happy to help you introduce yourself to UidX V four. I'll tell you more what V four is. I'll tell you more what our testnet is in just a second. But before we start, really important slide.
00:00:45.068 - 00:01:06.162, Speaker A: This is not a financial advice. Do your own research. All the good stuff. See, I had a really nice conversation yesterday with a gentleman. We identified that in our space we kind of have three focuses. One is technical, of course. We must discuss block space, we must discuss consensus.
00:01:06.162 - 00:01:29.000, Speaker A: The other is purely philosophical decentralization, building the future, being fair. And the third one is of course, money. Dj and stuff. Now this is no dj and stuff. A little bit of philosophical stuff, a lot of technical stuff. No djen. So make sure that you click on I agree over there.
00:01:29.000 - 00:02:13.661, Speaker A: What are we going to cover today? We'll start with une petit entrez, with some history about V four, with some data on why we are coming to V four, what's happening here. We'll also have some high level overview on the system, on components, on architecture. Then I'll deep dive into Testnet and what exactly you can do right now with it. There's more things coming our way. I will point you to where to look at for more information as things progress in the future. So hopefully we can see each other in discord and most important, in GitHub lock. All right, let's get to it.
00:02:13.661 - 00:02:53.884, Speaker A: Oh, and for dessert, we have some questions and some small surprise. Let's get to some deep dive on the history of V four and how we became what we became right now. So we got a testnet, right? So why? What are we testing? V four or dy? DX started on Ethereum as many, many good things. 2017 perps trading smart contracts. Gas was cheap. Life was good for a while, then not so much. So we had several products there, or I think two products there running at one point.
00:02:53.884 - 00:03:31.536, Speaker A: As many products do, they go on L2. The YDX exchange went on Starkx from Starquare where it actually performed and still performs pretty well. We got about $466 billion of volume last year. I can tell you that right now the daily volume is about a billion. So not so bad, right? And next we are going to Cosmos. So probably some of you are asking why, you know, I got you covered. Why do we have v four? What are we doing all these changes.
00:03:31.536 - 00:04:11.910, Speaker A: Why? What's happening? First and foremost, we need more decentralization in the space right now that V three, the previous version, is centralized too much. There is a centralized component, as with many L2s, and big part of this is the matching engine and the order book with v four, we want to have them decentralized as well. Now I'm just opening this. If we forget about that, we have v four on Cosmos. Let's think about if we want to have a decentralized system, fully decentralized. What about if you want to have decentralized fee distribution, no one entity benefiting, but rather community? Right. Let's think about that for a second.
00:04:11.910 - 00:05:35.646, Speaker A: What about if you want to scale all the throughputs? V three had pretty good, or has pretty good all the throughput? But still, when we want to improve this, what do we do? Do we do our own L2? What do we do if we want to keep the finality and fairness, of course, because that's really crucial and important. We want to have immediate finality. We want, especially on trade outcomes, what if you want to incentivize or align all incentives across the entire system protocol, and not only one entity benefiting from any part of it? And of course, it's a really, really, really hot topic right now, Mev. How about if we discourage or avoid harmful form of MeV on top of it? And finally, not least, what if we wanted to upgrade incrementally and seamlessly, like adding new markets, like introducing new products on top of what we have already, and do that as a community? What if you want to have more, improve more advanced margin and collateral options? That's why here we are, V four moving to Cosmos. Pretty brave. I know many of you probably will ask at the end, more questions to why this is happening. Go ahead.
00:05:35.646 - 00:06:01.740, Speaker A: Don't shy away. Right. So we have cosmos coming. How does this look? We have an exchange that has central limit order book, that has the dust prop training, perpetual trading. How does it look from, this is more high level overview. I know that most of you would like to see some code that's coming our way soon. Let's have a look at the high level overview.
00:06:01.740 - 00:06:37.556, Speaker A: Of course, on top of it, or some look at the bottom of it, we have the node itself. The important about Dy DX V four is that the node is running two things. It's running in memory order matching engine. All nodes are running one. And at the consensus level, we have final transactions happening. So the final order transact when a transaction, transaction gets matched it goes to the state. Things would have been much easier if everything was on state, especially on the second component in the system, which is the indexer.
00:06:37.556 - 00:07:09.220, Speaker A: So we see plenty of indexer that are just a service running with a database in our case, and we have our friends for imperator giving a talk on Tuesday about it. The indexers are first of all quite important, and second of all much more complicated. Dylan will dive into that details more, just some sneak peek. An indexer runs a set of services. It has two types of storage. One is Redis, which is in memory. The other is postgres for more state oriented stuff.
00:07:09.220 - 00:08:21.016, Speaker A: It also has several aips running to provide data availability and final but not least, it has its own full node. Very important for anyone who will try to do something with the API and with the clients and all the available things. When things go open source, you should know what's the life cycle of transactions. First of all, they, as expected, originate at the clients or at the libraries, and they go to the full node or a validator. That full node will gossip those transactions to its peers, and transactions will enter the order book signed by the user. Once they get matched, they of course get picked up by the indexers and become available for the frontends. Has anyone tried testnet so far? Did you notice something with the testnet so far? Okay, we'll see at the end.
00:08:21.016 - 00:08:43.609, Speaker A: All right. Yeah, you'll get a chance to ask or raise a hand. Yeah. So yeah, indexers pick transactions. They provide them to the front end, they provide them to the APIs. The APIs display them on the screen for the testing, for example, for the web front end, and everyone's happy. This flow is going to be like for Mainnet as well, obviously.
00:08:43.609 - 00:09:50.040, Speaker A: Some more I'd like to show you some more information about governance and what's happening in that regard. Things are, on the surface pretty simple. Uidxv four is using Xgov module. It is not utilizing Oz at the moment. It's not utilizing evidence free grant mint NFT circuits or gender genital, utilizing Exgov to build the flexibility needed for now, for stakers to actually vote and to participate in governance. What can stakers do? Submit transactions, submit proposals, vote on proposals and the standards ex golf stuff like inherit the votes of their validator if they don't participate or override the vote. Aside from the standard XGov parameters or standard SDK parameters, we also have a set of UIDX specific parameters, for example, and this is not an extensive ex host list.
00:09:50.040 - 00:10:47.450, Speaker A: We can add adjust modifying delete markets. We can control the set of third party oracle price sources, we can adjust the trading and gas fees, we can adjust the rewards mechanisms and so on and so forth. I'll provide some more information later down the line on where you can look on the list of things we can adjust and update. But that's pretty much the gist of it. We have the standard text golf spam permission mechanism which is using the minimal deposits parameter. Basically whoever is proposing a change should take care of putting enough deposit value in it so that it becomes life and well actually anyone can be contributing to a deposit for a proposal. How does voting go? We have the basic operations, voting yes or voting no.
00:10:47.450 - 00:11:18.314, Speaker A: We have a no with veto which we'll cover in a second. And we have abstain, which is a really good one because you are acknowledging the vote itself. You're not participating actively in it. So you're still active participant in the community. Not on this proposal in particular. Now something more about the vetoing. Well if enough vetoers, which is one third veto the vote, you actually lose a deposit.
00:11:18.314 - 00:11:55.612, Speaker A: In other cases you are able to withdraw it or to get refunded. Pretty standard stuff, pretty robust stuff. We know that's good stuff. Where we are right now with all these amazing things, devtestnet is way behind us. It was something internal, it was something that the core team did some time ago. Internal testnet also happens some time ago. We went out of private testnet into public testnet about three weeks ago and we are here for the public testnet.
00:11:55.612 - 00:12:43.324, Speaker A: That's the main player right now. We'll cover some things about the public testnet. You're more than welcome to pick up your phones. We'll have some QR codes for you to actually scan and try stuff out beginning with how to connect and what's where. Moving into some more information about the API clients and finishing with well it's a testnet so we should be able to troubleshoot before we begin with the how to connect the current state of the testnet. We have pretty big names as participants. We have node guardians, state club, informal Galaxy Coros one and yeah you can see pretty much everyone here.
00:12:43.324 - 00:13:13.110, Speaker A: Good names, some statistics from yesterday. You are free to prove me wrong on them for today it's fine. We had a pretty solid block time, quite a lot of transactions happening already in pretty good state. So here's some more information on what exactly to expect right now on Testnet. What set of features. I can give you the preliminary information. It's basic trading functionality.
00:13:13.110 - 00:13:44.956, Speaker A: It is. Yeah, you can scan the link. This is a list that's going to be probably updated soon with more stuff coming our way. And this is something like your way to actually feel how the state is right now with functionality. Very important link this is web application client. Web client, pretty easy to use. There's a four set in there.
00:13:44.956 - 00:14:16.690, Speaker A: Just connect your metamask, get Rekt. It's free, it's fun and I do recommend it. It's free money and you can actually experiment with shorting stuff. Leverage we already have a iOS test lite app. You can try that one out. You can ask me later for the Android version. Now we have this ready again, pretty easy to use, no hassle.
00:14:16.690 - 00:14:41.900, Speaker A: Here's where all the repositories are going to be initially made available public. This location will probably change over time. However, do pin it up. It's coming our way. I'm not sure when exactly what is coming our way. This is the good stuff happening. I want to give you now some more details about the APIs themselves.
00:14:41.900 - 00:15:25.856, Speaker A: First of all, well, on this link you'll see a link for the indexer that's currently running. This will be changing over time, probably as we progress with the testnet. Have in mind that you should check this page every now and then. V three APIs, or rather v four API, is kind of very much inspired by v three. But v three is living on Ethereum and stark x, so we cannot have the same thing on cosmos. For example, the authentication mechanism on stark x is quite different. We have the Ethereum key going to stark x key going to an API key.
00:15:25.856 - 00:16:11.326, Speaker A: With v four we have a simple signing mechanism for how we participate and how we sign transactions. There's an Easter egg here. You can have a look at what's happening right now with the block height, and it's not the same. You can try to figure out where I went wrong, but yeah, this is something you can use to ping the indexer and see what's this current state. Pretty easy, pretty convenient API with the indexer. Nothing too tough here. Some more information on the testnet itself, like the genesis JSON, the seed nodes, the validator URL.
00:16:11.326 - 00:16:58.210, Speaker A: There's a link to a network's repository here in this page that's going to come our way, hopefully soon as the repositories become public. So something to keep an eye on as well. And let's dive into the API clients. Okay, the goal is to have in the beginning what trading is going or the core team is going to provide is two sets of clients. One is of course Python for those that are prone to writing bots, and the other is typescript. For example, the frontend is utilizing the typescript script clients pretty robust way to download and install. Now it's not available, it's going our way, don't worry about it.
00:16:58.210 - 00:17:34.879, Speaker A: And these libraries or these two packages provide us with a set of clients we can utilize for whatever we want. First of all, it's the indexer client. As I mentioned, the indexer API is separate from the evaluator API, and this is something that's quite different between v three and v four. So we have a separate set of ways to fetch data from the indexer. For example, fetching the block height from the command line before that happens pretty easily. As you can see, we just need the indexer configuration file or indexer configuration JSON to instantiate the client and just call the function. That's it.
00:17:34.879 - 00:18:35.820, Speaker A: The indexer also provides a Websocket API for more subscription based data fetching, for example candles or subscribing to candle updates. Again, as easy as the previous one, we just need several callbacks to handle the callbacks to handle the incoming data. The validator client, the one that's used for many things, including for posting transactions. I've deliberately not given an example for posting transactions because we have a better way to do this. The validator client has a separate API set up separate set of clients for it, separate configuration per object. Again, easy to instantiate, easy to use. And finally the good stuff, which is the composite client, which provide us with a more easy, human readable way to actually post transactions and do all the other stuff as well.
00:18:35.820 - 00:19:13.480, Speaker A: So I would actually prefer to use this one if I were you, for all the things. It provides some more information about how we can actually debug or how we can make sense if something's wrong with the testnet, because this is a testnet after all, it is supposed to break it. We are supposed to have outages on it. We already had several. Again, we want to have outages on Testnet, not on minutes. So this is the time we actually observe this. So if you decide to try out any of the things I showed before that and see it's not working, first thing to do, status page.
00:19:13.480 - 00:19:53.080, Speaker A: It will show if you're right now in an uptime position, or if something's wrong with the indexer, with some of the validators, with the network overall. It also provides information about historical uptime, and it has some incident log as well to see what has been happening with the testnet right now. I think the uptime is above 95%. Still, we had some issues, right? It's normal standard stuff. The min scan, the block explorer, pretty easy to use. We all in cosmos know how to handle this one. We all know what to find there average block time, for example, I'm not sure what it is right now, but anyone can check.
00:19:53.080 - 00:20:37.656, Speaker A: And the Kepler dashboard for in addition to what's the other one show governance proposals, some preliminary dates about what's happening with Testnet. Those are subject to change, have it in mind, but we expect several network resets as we go. That's completely normal. The last one is not yet defined. It's probably coming as mainnet progresses. So yeah, if you find your testnet stuff gone, that's okay, don't worry about it. We also envision or anticipate several network upgrades quite close by.
00:20:37.656 - 00:21:12.192, Speaker A: But the core team will want to join to add more stuff to the testnet as we progress. So we'll see some upgrades as we go, some hard forks, very important link. This is where feedback happens. It's a Google forms form. I do welcome you to participate and to provide anything you notice as the best way to actually improve a product. And some more information about the ecosystem you can find on the ecosystem report. It's quite visual, quite beautiful.
00:21:12.192 - 00:22:07.720, Speaker A: You can actually get a sense on whose participants in our ecosystem and to get a sense of what's going on in the big picture, I'm guessing we'll have one of these each year. How to participate? Well, top to bottom. First one is our is Dydx Foundation's Twitter handle where you get most of the information, most of the updates. You can be really up to date all the time following this Twitter handle. Second is the community dashboard information about staking information about your participation. Currently for V four or V three, Dydx forum is where the discussions in the community happen. I've also posted some information gathering, a wiki like post there, so it's a good source of information as well.
00:22:07.720 - 00:22:26.800, Speaker A: We have a robust DAo setup. You should also be checking this one. We have a big dial, core dial. We have a setup of subdals. For example. The op sub dial is responsible for running some of the accountable for running some of the components. And finally we have the Dividedx foundation website.
00:22:26.800 - 00:22:53.590, Speaker A: I do encourage you to join Dylan's talk on Tuesday and also do encourage you highly to test and to try out DyDx exchange v four. And so yeah, find bugs and just have fun. Finally, you can grab your cred here and ask questions. Thank you very much.
