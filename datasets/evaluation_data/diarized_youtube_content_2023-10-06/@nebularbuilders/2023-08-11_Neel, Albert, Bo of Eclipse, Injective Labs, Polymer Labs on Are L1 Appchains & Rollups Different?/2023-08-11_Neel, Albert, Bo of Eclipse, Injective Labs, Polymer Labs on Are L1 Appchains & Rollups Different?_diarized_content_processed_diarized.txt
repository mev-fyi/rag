00:00:09.080 - 00:00:23.890, Speaker A: Hello, everyone. Welcome back. So we will talk about app chains and roll ups. We will see the difference between them, and we have a great panel to talk about it. So just first of all, could you guys please present yourselves and tell more about what you're doing.
00:00:25.190 - 00:00:31.730, Speaker B: Everyone, my name is Bonnite. I'm a co founder at Polymer Labs, and we're connecting everything with IBC.
00:00:33.350 - 00:00:40.410, Speaker C: Hi, everyone, my name's Albert. I'm the co founder and CTO of Injective Labs. Injective is a layer one blockchain built for Defi.
00:00:41.470 - 00:00:55.180, Speaker D: And I'm Neil building eclipse. And we're building app specific roll up infrastructure, one of which is a chain that we've deployed for injectiv called Cascade, which will connect to the rest of the inner chain via what Bo is doing at Polymer.
00:00:56.080 - 00:01:37.922, Speaker A: Yeah, and so let's take a little step back. A few years ago, we only had some solutions. We only had you basically build a protocol on Ethereum, or you build an l one, which is more scalable, which is faster, which is cheaper, et cetera, et cetera. Today, we have more solutions. We still have the l one s, but we have l two s. We still have protocols, we have cross chain protocols now, and we are seeing some up chains within some ecosystems, like Cosmos, Avalanche, Polkadot, Polygon. However, the first question that I have for you guys is that with all these developments, all these new chains launching, we're still seeing a lot of fragmentation of liquidity.
00:01:37.922 - 00:01:43.310, Speaker A: Do you think that is a problem for the ecosystem and how could we solve it?
00:01:44.900 - 00:02:19.380, Speaker D: Yeah, well, to me, the best apps for app chains are ones at this point that don't require a lot of composability outside of their chain. So that's things like games, physical infrastructure, networks, there's some defi applications like exchanges, that make a lot of sense to be on their own chain in the future. Of course, what Bo is doing, and a few others, like catalyst, is some kind of shared liquidity primitive across different chains. I think that can do a good job of reducing the liquidity fragmentation. Right now, I typically advise that those types of apps that really need to go cross chain on a regular basis just probably stick to a shared chain.
00:02:21.880 - 00:03:01.400, Speaker C: Yeah, I think it's quite interesting to see how fragmentation will evolve. And one recent example will be, I think, the kava USDT versus noble USDC. And I think adoption of either of these two in the short term will be driven by incentives, but in the longer term will be driven by network effects. So it's kind of that classical race to see who can get more adoption in the short term, maybe with incentives that are unsustainable. And yeah, we'll see then that, like, whether that could drive network effects such that the switching costs for these assets is too high because they're too sticky or not. But yeah, it's an interesting space to see.
00:03:02.980 - 00:03:34.060, Speaker B: The liquidity fragmentation problem is definitely exacerbated by growing number of like, app roll ups, roll up frameworks. It'll continue to fragment. It's somewhat solved at the lower layers by standardizing on interoperability between chains. It can be solved on the upper layers by liquidity networks. As Neil had mentioned, you can have like connects like protocols. You have protocols like catalyst that can kind of bridge liquidity across chains. Native issuance of tokens like USDC is also very important.
00:03:34.060 - 00:03:40.920, Speaker B: The security and the safety of that liquidity as it moves across different networks is paramount.
00:03:41.620 - 00:04:03.720, Speaker D: Yeah, I think stuff like account abstraction has some potential to better solve it in that now you just authorize user ops to be executed on different chains rather than actually moving your money. Because right now I think we're in this weird situation where especially if you end up with hundreds or thousands of app specific roll ups, your money is going to be all over the place, which is just going to be really cumbersome to keep track of.
00:04:04.620 - 00:04:32.160, Speaker A: That was a nice conversation I had with Irene from layer zero. So they are working with AavE to develop portals which would allow you to have collateral on one chain and for example, borrow on another chain, which solves the problem of bridging assets, creating smart contracts which can then be exploited. Do you think that this fragmentation of liquidity could be solved through protocols directly rather than bridges or blockchains themselves?
00:04:35.940 - 00:05:16.470, Speaker B: That sounds like a very different thing from like, you know, the native issuance like liquidity networks. I mean, the question of security comes into mind as well when we talk about layer zero, but I think you can solve some of these things at the protocol level in terms of safety. If we can have state validating or transition validating bridges between different chains, that's one up. If you have trust, minimized interoperability between bridges that settle onto a single layer one, that's also very nice. If in the future we're able to do some sort of cross chain atomicity, that can also help this as well.
00:05:17.370 - 00:05:44.380, Speaker C: Yeah, I think solutions like escrow, IBC, where you essentially have a liquidity provider, a market maker, for these tokens to take on some risk, are more band aid, short term solutions that are expedient, but they have their set of trade offs. There's a fee associated with it, and black swan events do happen, so it's not really. I wouldn't view it as part of a foundational system that we should base our bridging off of.
00:05:45.560 - 00:05:59.680, Speaker D: Yeah. On the point about atomic composition, I think that works for multiple. Like, if you're okay with the atomic composition occurring over multiple blocks, but single block atomic composition probably won't exist, at least in the near term for now.
00:06:01.860 - 00:06:21.490, Speaker A: So let's get back to this object. Do you think that users are more likely to use a roll up that has its own blockchain rather than relies on the security of an underlying blockchain? Or do you think that users will use it if there is a value proposition?
00:06:23.110 - 00:06:25.198, Speaker D: Could you rephrase that question one more time?
00:06:25.334 - 00:06:51.370, Speaker A: Yeah. So, for example, let's say you have an app specific roll up which has its own blockchain, or you have a roll up which relies on another blockchain. For example, NL two, on Ethereum, which relies on the security of Ethereum and only scales the blockchain and lowers the cost. Or an app specific Dex, for example, which has its own blockchain. Like we have Crescent, we have injective. Actually, we have some other protocols as well.
00:06:51.690 - 00:06:58.266, Speaker D: Yeah. So whether there's any preference on the part of users for layer one app chains versus app specific roll ups.
00:06:58.338 - 00:06:58.898, Speaker A: Yes.
00:06:59.034 - 00:07:29.922, Speaker D: Yeah. I think as an app specific roll up, like, the way that I used to think about it was, it's essentially the same. It's its own chain. But it's true that there's, like, implications on the social sovereignty if you're an l, two directly on Ethereum or something like that. And that might actually be desirable if you want your users to be more Ethereum aligned or something like that. But in general, I still do think of it as a separate chain, meaning that you have to bridge money to the chain. All the same issues.
00:07:29.922 - 00:07:37.950, Speaker D: Or, like, the bottlenecks that l one app chains experience are the same ones that app specific roll ups experience, too.
00:07:39.170 - 00:08:27.394, Speaker C: I think that end users don't really care. And two good examples are one, the axie Infinity Ronin sidechain. You know, thousands, millions of Filipinos and others used axie infinity without knowing or caring that it was, you know, a validator set of seven of which, you know, one of their engineers, you know, were just running on their. On their cloud servers, which actually got hacked. So it matters until, you know, it doesn't matter until it matters, which is when the protocol gets hacked because of weaker security guarantees. But conversely, I think two other examples that didn't get hacked are polygon, the POS system and binance smart chain, which isn't an l two, but can be viewed in that similar lens. And what we see is that end users don't really care.
00:08:27.394 - 00:09:05.780, Speaker C: But I think the people that do care are developers, because you don't want to launch a protocol on something with a shaky security foundation. And you can even see that materialize in the choice among developers between arbitrum versus optimism. Right? Even though the difference here may be minor with the recursive fraud proof system versus executing the entire transaction, you can see that because of this marginally better security property, that developers choose to go there, which in then turn creates network effects, which in then turn incentivizes users to go there because of various availability of new things to use.
00:09:07.040 - 00:09:55.750, Speaker B: Yeah, I think to comment on the security point, there's some trauma with bridging, like there's some liquidity trauma with all the bridge hacks, and there's, with greater liquidity safety, we'll see like liquidity flow outwards a bit more. I think. I think we see a lot of liquidity flow to L2s, and it kind of dries up as you get into app chain land. And on the UX front, I would say users care a lot about UX. That's what they interact with. If an app chain or an app chain ecosystem has greater ux, it can get there faster or more quickly than working off of an l one or an l one rollup, then it could make sense. An l one rollup optimizes for cost as a UX factor.
00:09:55.750 - 00:10:12.980, Speaker B: An app chain optimizes for the ability to experiment and iterate faster. So if you can innovate and experiment faster on the app chain side, you can make a competitive product to bring in those users. Or if you already have users and you want to further optimize the experience, like a Dydx.
00:10:13.280 - 00:10:28.500, Speaker D: Yeah, I think that Bo is right in identifying that the real risk is just a bridge. Because in some sense, the l one app chain has security advantages, because you can roll it back and you can fork it, and you just can't roll back assets that were already bridged out of the chain.
00:10:30.030 - 00:10:54.832, Speaker A: And let's get on with this. So, polymer and eclipse, you're both working with Celestia. One of you is providing IPC services, one of you is providing roll up services. And so as the question is, what is the difference between the roll ups and l one up chains? What are the different services that you provide here for Celestia, for example, the.
00:10:54.856 - 00:11:21.020, Speaker D: Difference is primarily the unit economics of the chain, where for a full layer one blockchain, you have to get 100 validators, and they're all spending money to run each month. And you have to, for a proof of stake chain, you have to actually put up stake, whereas for a roll up, it's more cost efficient from that perspective. But there's a marginal cost associated with each transaction, where now you have to post it to a layer one blockchain on Ethereum. That's a base cost of maybe like ten to transaction.
00:11:22.130 - 00:11:50.876, Speaker B: Yeah. To add on to Neil's point, it's the difference between needing to execute one program instruction over a single node or over a large number of maybe, let's say 150 nodes. The cost of that is different. And you have to add in consensus. You have to add in all these other mechanisms to add real costs, real computational costs, not arbitrarily priced costs, but real computational costs. Also, rollups, inherent security from the DA layer that they pose to.
00:11:51.068 - 00:12:04.120, Speaker A: What are the trade offs that you have to face today when you're building an l one up chain? Because obviously you talked about validators before. So what are the risks that you're facing when you have your own l one up chain?
00:12:04.580 - 00:12:09.820, Speaker C: You mean trade offs versus building on like a L2 or like your own roll up?
00:12:09.860 - 00:12:12.302, Speaker A: Yeah, compared to a roll up, yeah.
00:12:12.326 - 00:12:42.100, Speaker C: I mean, I think it's quite clear. One is security. You have to bootstrap your own validator sets, and instead of relying on common infrastructure like rpcs or tooling, et cetera, you have to create all of that yourself. Much of that is expedited by using the Cosmos SDK, for example, on the tooling side. But you basically are now responsible for your own network. That's the burden that you bear. But in contrast, you get many benefits.
00:12:42.100 - 00:13:38.146, Speaker C: You have the full control over the network at injective. We, for example, can make many optimizations, like, for example, doing matching orders in parallel. We can leverage concurrency and go routines to use all the CPU cores. You can do things like use GPU's even. And for example, you can have compatibility with metamask and Ethereum accounts because you have control over what is defined as an account on your chain. So you have the flexibility to introduce all sorts of new things that would be very challenging to do if you were just using the EVM as an example or an EVM based roll up, because you have control over every layer of the stack, from consensus to your application layer, to even lower level networking. If you do want to modify things there, but of course, with great power comes great responsibility.
00:13:38.146 - 00:13:42.270, Speaker C: You could also fuck things up. So that's mainly the trade off that exists.
00:13:43.370 - 00:14:01.300, Speaker A: Is it? Something which is really close to the roll up thing today, especially with shared security, because you have to rely on the customer security, which makes your validator still useful, but you have this additional security coming from the cosmos. Validators.
00:14:03.160 - 00:14:37.340, Speaker C: Yeah, I mean, it depends on the design of the roll up. It could just be a sovereign roll up. For example, one design that we are exploring is for the validators on injective, to kind of enshrine the roll up by keeping track of the block headers of the roll up and then attesting to them on injective. And one reason we might do that is so that we can have fast finality, essentially, and not have to wait for the optimistic fraud proof window. But yeah, of course, different roll ups. You can take different designs.
00:14:37.800 - 00:14:45.220, Speaker D: Yeah. Bo, maybe you could even chat a bit about what are the options for a roll up to get fast finality or to be compatible with IBC?
00:14:46.200 - 00:15:53.650, Speaker B: Yeah, there's a few options. If you have a roll up, then if you want to verify that the state transition was correct, you can either, let's say, use the sequencer, which I believe a lot of protocols do. And the other option is, as Albert mentioned, you can enshrine essentially a client, an IBC client, for that roll up that does the verification. For this approach, you would need to run, as Albert mentioned, a full node of that particular roll up. If you don't want to do that, if you don't want to incur the cost of doing that, you can trade off a little bit on the security side and cost side by saying, I'll trust the signatures from some attestation committee, whether it's the sequencer. Additionally, you can have like additional validation mechanisms like Eigen layer, where you have some third party attester that perhaps if you're in the ecosystem already, you already trust. So for rollups on Ethereum, perhaps bridging over, you can say, I can have Eigen layer restakers attest to the roll up transitions, so I can use the safe l two head or the l two head of the roll up that has already published DA and leverage l one finality instead of a true roll up finality for bridging.
00:15:54.230 - 00:16:14.844, Speaker D: Yeah, I guess for the Eigen layer solution there, you would still need some way to verify an incorrect state transition on chain in order for the Eigen layer slashing to work. Whereas for the committee ideas like the attestation committees, there's not really slashing that occurs per se. It's more just that all of those full nodes are also running a full node of the roll up.
00:16:15.012 - 00:16:18.160, Speaker C: You could still have slashing for the committee based approach as well.
00:16:18.980 - 00:16:21.640, Speaker D: Okay, yeah, I guess the rest of the committee slashes.
00:16:23.980 - 00:16:43.730, Speaker A: And so let's talk about the blockchain trilemma. So we have the three elements, decentralization, scalability and security for the roll ups, which don't have a token. So this would be a question for you, Neil. How would you implement governance within the roll up that doesn't have a token?
00:16:44.790 - 00:17:36.798, Speaker D: Yeah, kind of like two separate questions. But on the first part, on the trilemma, I think the right way to interpret that, because there's a lot of wrong ways, I think, to interpret the blockchain trilemma. But the right way is that if you measure decentralization by the cost of running a verifying node, then in general, to handle more throughput, you need a beefier node, and therefore it's more expensive to run a fully verifying node if a full node is your only option. Now we have other ways to verify, so I think we actually have expanded the blockchain trilemma, or we've expanded the efficient frontier of what's possible on chain. So that's one thought. And then the second part is, how do you have governance without a token? You'd have to have some kind of elected governance or delegated government. You have to just choose some folks, some group of entities, or maybe Bo or Albert, if you guys have thought about that a little bit.
00:17:36.798 - 00:17:38.450, Speaker D: I'm not sure what that would look like.
00:17:38.870 - 00:17:47.210, Speaker B: I'm not sure. You need a token for roll up bridging, you can verify roll up for governance. Oh, for governance.
00:17:48.230 - 00:17:48.494, Speaker C: Yeah.
00:17:48.502 - 00:18:24.730, Speaker B: I don't have too many comments on the governance side, but I think the token governance maybe can be used for, like, elected voting. So like, you can have by like stake weight. It's kind of like a meta Pos system, a voting system, where if you accrue a lot of tokens, you can accrue like different, like stake weight to like, move the roll up, decide the roll up settlement, decide to roll up internals on. Do I settle to eth one, which I'm paying a higher cost? Do I settle to Ivan Deer, which would be a lower cost, or. Sorry, do I publish DA to any of these locations? Yeah.
00:18:26.190 - 00:18:47.210, Speaker A: And today, if you want to build your own solution of scalability, so it can be an up chain or a roll up for which one would you choose for upgradability? Which one would you choose for scalability, where you have to have high output throughput? Sorry, which one is more suitable for each category?
00:18:48.710 - 00:19:23.890, Speaker D: Yeah, it depends how you define scalability, but if you're defining scalability by throughput divided by the cost of running a node, then I don't think it really matters whether it's an l one versus an l two, like either. I guess you could rely on. Sometimes when people have an l two on ethereum, they're saying, oh, cool, I don't have to run a full node of the ll two anymore. But implicitly it's because the l one nodes are the ones doing that verification. So if you want to directly verify yourself, you still have to run a full node. So yeah, I think they're equally scalable. And then the second part was upgradability.
00:19:23.890 - 00:19:33.970, Speaker D: I think in either case you'd also have to get. It's probably easier to upgrade a roll up, I think, because it's fewer nodes that need to update.
00:19:38.400 - 00:20:34.100, Speaker B: I think as a developer building an application, if you care a lot about scalability, rollup is probably a better approach. If you care about customizability, you want to build on a platform where the cost of innovation is low. The cost of innovation on roll up, exceptionally roll up frameworks, as they are today, is quite high. I think there's a lot of marketing that goes behind stacks like the op stack. It's not clear to the developers what they can build. How flexible is it? How easy is it to build? If you wanted to, let's say, add a virtual machine, a new one that's not the EVM to the op stack, it'll be incredibly difficult. There's a whole number of things that you need to do, because in order to prove fraud on chain, you need to have stateless access to read all the state, both in memory and on disk, in the fraud proving VMDez that sits on the Ethereum L1, there's a whole pipeline of infrastructure that you have to build to make this happen.
00:20:35.640 - 00:21:08.190, Speaker C: Yeah. So I think you can even argue that upgradability in l one s would be easier just because, like, for example, a cosmos based l one, because you have sovereignty over the system, you aren't constrained by, you know, having to live in the constraints of having something be fraud provable. And particularly, I think the, the scope of modifiability kind of really relies just on opcodes that you can add to the evm, which is extremely limiting versus any arbitrary code in cosmos. As an example.
00:21:09.050 - 00:21:35.880, Speaker D: Yeah, but I guess the way that op stack, for example, is written right now, you could theoretically add anything to it. The fraud proving, I think, is actually the easier part, even though it's not enabled right now, in theory, that's not like a constraint. I think the only difference in upgradability is what you're able to upgrade, whereas for your l one, you can upgrade things related to the consensus much more easily, whereas for a roll up, you're pretty much restricted to the execution layer.
00:21:37.860 - 00:22:20.222, Speaker A: Yeah. And so last year we had this narrative of the l ones, that alternative l ones, which were going on for a long time, but today the focus has shift to the l two s. And the thing is, we have all these incentives, we have all these companies building l two s. Now we have consensus, we have Coinbase, which are building l two s. And so people are starting to look away from the l one s. And so how do you bring the intro, how would you bring the interest back to these l one s, which already exist, which already have a solution that has proven to be secure. But today everyone is looking at TVL, everyone is looking at where developers are, everyone is looking at where the innovation is.
00:22:20.222 - 00:22:26.250, Speaker A: So how would you bring back the interest to these l one s which are already in place?
00:22:30.670 - 00:22:59.820, Speaker C: I mean, I don't know if that's a good characterization. I think developers should find the solutions that work best for them. For some. Some teams, an app chain is the right thing to do. It's the right set of trade offs for other teams, especially if you are building on, let's say, polygon or arbitrum, and you want to have your own roll up. And that's easier because you can just port all of your code over and you want to have an ecosystem that's also in solidity. It makes sense to do your own l two.
00:22:59.820 - 00:23:27.010, Speaker C: I think more than a top down, this is what the cool thing is. It'll be more of an emergent phenomenon where individual projects and teams will decide what makes sense for them. I would say until now, building your own app chain seems to be more accessible to individual teams versus creating your own roll up. But that will soon change over the next twelve to 24 months, with companies like eclipse making it easier and easier to do.
00:23:27.870 - 00:23:48.960, Speaker D: Yeah, I agree with that characterization, that for a given type of application, like given their throughput expectations and what their ambitions are for their project, there is a correct solution on whether it should be an l one, an l two deployed to a shared chain. And it's all about just what do they prefer? Given the objective differences in those architectures?
00:23:49.780 - 00:24:39.084, Speaker B: Yeah, there's a cost of innovation and a cost of security perspective here. Cost of security is related to liquidity. Cost of innovation is related to how fast you can iterate and develop more innovative features than your competitors. I don't think many of these non generalized roll ups onto ETH L1 are going to make it. I think a lot of it comes from the Devx standpoint. I kind of spent a lot of time working on the infrastructure side, so I think more about developers first. So for developers, you want to pick a framework that's easy to develop with, I think Cosmos SDK, where it sits now in terms of Devx, in terms of customizability, how clear is it to do the things that you want to do and how easy is it to do the things that you want to do is still like leaps and bounds ahead of these other role of frameworks that are on ETh L1, like Opstack, arbitrum, nitro.
00:24:39.084 - 00:25:13.440, Speaker B: I think there's a four to five year lead on the SDK side. I think if the SDK continues to innovate and we're able to customize it so that we can deploy to different environments, kind of like a build once deploy anywhere approach. The L1 app chain ecosystem and the roll up ecosystems are going to merge and be highly compatible with one another. If you want to configure your app to be a roll up, sure. If you want to configure your app to be an l one, just change the configuration and it will happen and developers will be able to build the things that they want and have the flexibility and freedom to do so and innovate.
00:25:14.580 - 00:26:02.830, Speaker C: I think one interesting development may be that with the advent of shared sequencers on L two s, if this gives way for atomic cross roll up composition, then will the benefits of deploying on a roll up versus an app chain be much greater? Because even with app change, right now you have an asynchronous programming model with IBC that's quite awkward and clumsy and you depend on relators to interact with. Perhaps if you have 5000 roll ups on the same shared sequencer and you have atomic composition, this will be compelling enough for applications to choose to be their own roll up versus being on an app chain, but that is yet to be seen.
00:26:03.810 - 00:26:09.100, Speaker A: Ok guys, we have to wrap it up, so please give it up for the amazing speakers. It.
