00:00:05.920 - 00:01:04.908, Speaker A: Using saga. One of the things that I want to talk about is how we want to remove barriers for builders. And so my name is Jim Wonderful, founders of the project. And before go find the sorry, I was talking about pyramid films. One of the things that I've been always thinking about throughout the years, the last four or five years, is if everyone in platforms ecosystem knows that apps feature, that's a very common belief that it's more scalable, it's better infrastructure, and it's more customizability. Why are developers not launching more app genetics? The fundamental questions that I've been kind of brought around before a few years, and the answer can come pretty simple. So there are many requirements to launching your own chain besides just developing your application.
00:01:04.908 - 00:01:39.680, Speaker A: So on top there's the application development, but you also need to worry about infrastructure deploying. So there's the validators you have to go talk to. You have to convince the validators that your application is worth posting. You have to convince them that your application will have some value, so they will dedicate infrastructure onto it. In order for you to do that, you need to create a safe infilt. You need to google sell the safe, infiltrate to the public so that people will see and secure the actual network, and then counter links to validators. Because the validators seem to be convinced that your safety login is workful beyond.
00:01:39.680 - 00:02:32.876, Speaker A: So ultimately, and then on top of that, there's more infrastructure that needs besides just the blockchain because RFC, index, wallet search and these are whole things that the developer has to think about and procure before they actually deploy their own app chamber and then our content. Because your app change is your own space that you set up. You need to set up bridges, relayers, all this other infrastructure that most Cosmos folks I kind of drew on default. But for most developers there are things that generally they not pay them up, they want to just worry about. The application welcomes related to bridges, et cetera. There you boost your community for your tokens because as mentioned, the way that you convince validators to come in and the way that you secure your chain is ultimately the saving token. You need that to have some kind of value.
00:02:32.876 - 00:03:20.980, Speaker A: So you need fundraise to USDC, maybe osmosis, right? Dexs, central exchanges, etcetera. And then obviously you can do even more on top of that, because now you have people required to have a token. You need to think about token distribution, you need to think about marketing for your vocab distribution. In some cases you might not want to know your force because you have to launch the saving token on. So the fact of the matter is, most developers can follow these. And I just kind of outline a very small subject. There's a lot more to this to launch your own app, shame openly, but I've outlined essentially some of the requirements that you immediately launch.
00:03:20.980 - 00:03:55.490, Speaker A: But when you go and deploy on someone else's layer one and L2, it's a lot simpler. So let's kind of go down to this point. So validators don't need to worry about validators. The layer one is already kind of figured out for you. You don't need a safety token, you don't need to security. So that signals John, you don't need RTC indexes, wallets. But layer one has already procured a list of these services for you, right? So they have investors, they have wallets and services that universally work for lateral chains.
00:03:55.490 - 00:04:40.428, Speaker A: And then Bruce's new layer is neat because the other apps like Jackson and all this stuff is already in the same way. So you don't need to worry about some of these conditions. Then the same thing happens with over five extensions. The bootstrap connections to USDC, ETH, other chain, etcetera, is already set by the one, so you don't have to worry about that. And then the next number are already integrated. So everything that I just mentioned, essentially the developers are looking at this is like, instead of me having to do all this myself, I would rather just go and throw out someone else's. This is like a mentality of how developers are thinking about the trade offs of Boeing apps and then obviously going to market.
00:04:40.428 - 00:05:21.076, Speaker A: There's some complexity. Token distribution. The nice thing about going to layer on the L2, a lot of the times you don't need a token and you're relying on someone else. You don't need to worry about distribution and then marketing. You kind of have the community of the layer once you have p backed off, which in actually saying why are the frames going to happen? So these are, these are the reason goal I universally, there's a lot of reasons here why people don't end up creating apps. They end up instead just deploying on someone else's chain that has been set up already. And while this is great, what ended up happening a lot of times, everyone always said, hey, there's not enough losses.
00:05:21.076 - 00:06:03.626, Speaker A: The economics is all too far. We don't like it. It's like, well, you took the path of least resources, now you have to run with the outcome of having these kinds of trade offs that you can say, I don't think developers fully think about them. They try to think about belief. Resistance, usually like half ends up being a later one. So what do you do? So, one of the things that we're doing at Saga is we're trying to remove each of these barriers, one of the five. So I'm going to go down the list of these and specific, but problems essentially, that app chains generally run into and how Saga is slowly getting rid of all these one at a time.
00:06:03.626 - 00:06:49.200, Speaker A: So, let's go through all of this. So, step one, automate validators and change the point. So, for those who don't know what Saga is, essentially what cyber does is it automatically spins up a costless chain for developers automatically. So how does this function? So a developer goes and goes through our silo platform, essentially, and it's actually in our chain saying, hey, I look like a chainlethe. And then there's supposed to be, but the validators essentially are all launching the stock platform, monitoring it. And when chainlet request pumps, our validator spins up a node, essentially, for a chainlet automatically, and then feds them all into the machine. So the idea here is it's designed to be completely automated.
00:06:49.200 - 00:07:34.830, Speaker A: So the process of a developer coming in and requesting that chainlet is, is the only manual with the rest of the process, essentially, it's all done through software. And so where are we right now? So, cyber platform is currently in date of March. So what does that mean? It means that our chain validators are not currently running all the chainlets. We have a foundation that's currently operating four validators at launch. The reason why we're doing this is we're battletesting this automatic chain launching software, essentially, and making sure that there isn't a problem here. As soon as you start decentralizing, problem solving becomes a lot harder. And so, right now, so far, since about October of 2023, we have launched about 1500 chains and closed them down.
00:07:34.830 - 00:08:22.702, Speaker A: Some of them have essentially spin off since the beginning of October, essentially, and some have gone over there. And so the status right now is with this platform that we have right now that we're battle testing. It takes about two minutes to launch a chainlet, and the two minutes is around when you put the transaction into the saga platform. And then it takes time for the validators to start provisioning all the actual hardware in the background and then connecting them all into and then launching that chain, essentially. So it's probably about a minute, but it's about a minute or two, depending on what's the next steps. This is the kind of next steps. We want this step to be fully permissionless, done by your validator, essentially set for our mainnet.
00:08:22.702 - 00:08:55.791, Speaker A: So that's happening as you see right now. So this week, we started a pilot program with select validators in our mainnet to start running this cycle platform software and choose launching software. So within the next few months, the idea is to have all of our main evaluators running this. And then now we have an automatic way of launching the chain with our. So now this is step one. We have like 19 different things we talked about earlier that we want to automate. So this is kind of like where we are in.
00:08:55.791 - 00:10:19.902, Speaker A: So, so the cool thing about this is, in Saga, when you do this, right, the chainlet and our saga, every chain within our system, saga, has an identical set of validators. And so the nice property about this is then we can start automating, bridging, essentially, between each of these chains that we're launching. And the, all we're thinking about, IMC, is that there's generally you're negotiating between two chains that have different value sets, but actually introduce this, like, relayer that's worked for you. Sometimes it's not correctly exact, we don't know, because the difficulty is that each chain has a different set of validators that are running in our system that doesn't exist. And so what we can do is, because every chain chain method has identical validators, we can actually plug the relayer logic into our validator flow, such that the relayer responsibility is included in the actual validating logic method. And so what does this mean? This means that when a developer goes and requests a chainlet, essentially launch the natural chainlet itself, but also have the vrayer logic essentially invented into itself. So instead of bridges between the saga mainnet and the chainlets are automatically set up so that they don't have to go.
00:10:19.902 - 00:10:56.512, Speaker A: And actually, no contact specific. Nowadays, we run relay from me to this chain. It's all automatically set up. And the second thing that really nice about this is generally, when you have two different chains or two different validator sets, the destination chain of the IVC transaction requires the gas field, the destination chain filtering. However, because within our system, everybody is kind of the same, we should just get rid of that. We can inject it transactions directly into the destination chain. So now you get rid of for any kind of transactions, then updating essentially within the sign it was a system.
00:10:56.512 - 00:11:26.338, Speaker A: So you bring up the infrastructure on the actual bridges automatically, and then now, economically, it's all automatic. And so this is one bergman with James log. They have this concept in China. You see this is kind of embedding this, this layer structure directly into the validated node structure. And then we have a group of concepts actually, that we've been testing with our software to make sure that we get this infrastructure. So this is step two. The cool thing about this is now you launch a chain.
00:11:26.338 - 00:12:07.360, Speaker A: The chain essentially is proof of stake chain and also has automatic bridging to every other chain within the socket ecosystem. And you don't have to worry about any of that. So that's step three is automating security. So this is pretty simple because you have an IDC connection between each and every chainlet and the sign you can essentially run CCE, which is the same CCe that the cosmos load uses CC validation. It's kind of like energy security. Slash restrainting cause those users to secure a challenging ecosystem. But you can use the exact same, the bridges are automatic.
00:12:07.360 - 00:12:53.122, Speaker A: Now the nice thing about this also is that as mentioned, there's no gap fees for any kind of IoT access to data, compensate all that needs a lot of. So now not only can someone go and launch a chain bridges between that and the socket maintenance, you can actually automatically secure that. So you're in varying the entirety of the socket maintenance. Each of the chainlets, each of the chain deserves and secure. That's step three. So step four, automate first. So one of the things that appchain developers kind of running to very quickly after they launched chain is that the services like RTC, explorers, indexers, snapshots, storage, et cetera, trillion, they have to go.
00:12:53.122 - 00:13:47.992, Speaker A: And each chinese operator, hey, we go and run RPC for me, we go and run an explorer for me. There's a process that. And so what we've done essentially is what we call the service provider set and it kind of runs to the side. Whenever a developer goes and requests a chainlet from the startup platform and a new chainlet is launched, our service provider stack goes and it spins up necessary services on the server. Right now we are provisioning simple services like RBC and floor or every chain. What we want to over time is to expand this out to all the services. That, number one, would be not the foundation, but service providers come and then we want to bring technology flows to get third party revenue to projects that are using this.
00:13:47.992 - 00:14:29.096, Speaker A: So maybe similarly to how the foundation is currently running, and they will run like a free version for evil. And then more chains essentially that require further services, they need those things. And so mentioned, we want to ask to index server storage, any kind of services that you need, essentially. And so as mentioned earlier, the process of having a developer request the chain that change comes alive to automate bridges come alive automatically. And then the security is automatic and you also get service is automatic. These are kind of like the step four of where we're doing now. Step five is automated liquidity.
00:14:29.096 - 00:15:33.226, Speaker A: And this is something that, but this is the next step of how to make lives easier for appchain developers. And so the idea is, if a chain that can be deployed on aggregate, you can deploy a new chain that call, let's just call it liquid real chain, any other chain in our ecosystem. But we've got chain that essentially adds the canonical including URL chain limit. Essentially what we can do now is we have a contrite layer IBC architecture that automatically spins up the connection from the chainlet to the main net. But now we can also automatically try IBC connections from the chain material. Every chain that saga launches automatically connects to this included layer using the infrastructure that we set up. And so the idea here is to have all cross chain transactions through this rather that unifies the liquidity of possible chainlets.
00:15:33.226 - 00:16:10.558, Speaker A: And so because this entire process then now is automatic, now chainlet to chain that, conversations are always possible through this automatic IDC with the layers. And then we add further services on pub chapter. The next step for this is, once all this is ready, it really takes about two minutes to launch a fedchain. That's super easy to do. You just have to do that. Then we can start thinking about how to on them. So developers, app chain developers want an ability for outside assets to flow into their chainlets.
00:16:10.558 - 00:17:02.106, Speaker A: And so if we automatically go and do the bd of connecting to all the other ecosystems out there. So this is pretty simple to do and just go to XLR and say, hey absalr, right now XLR is currently connected to this on the platform, but we should like to connect to the fluidity rail. We do the integration the one time and everyone can share these, these rails essentially automatically. And so USDC esmosis stargates all these ecosystems. Can you help connect them to that encoded braille and then centralize that? Started sending over screen a little. So the nice thing about this is instead of each individual app chain is kind of going and negotiating with each of these ecosystems and these risk partners one at a time. It's a one time thing that we have to do.
00:17:02.106 - 00:17:56.002, Speaker A: And that every chain that can automatically use this system without worrying about talking to people and joining and so that's the stuff that we're doing right now. We're onboarding risk partners to have pan to our own. And then obviously, the last thing we want also is to have application injection on top. So bring an assets that we can also, you can imagine we can directly connect other ecosystems and denses and other ecosystems. We can also have denses and entry marketplaces within saga, right? And so either in another chainlet or even in the equipment, some dexes in there, essentially. And so now every chain that launches has an automatic connection to an access to a Dex. But this is generally not enough, right? So if you take a look at how bridging Ui and ux works today, it's not great.
00:17:56.002 - 00:18:32.320, Speaker A: So imagine if we just did this, what would happen is, let's say I'm a user on one of the chainlets that have launched, and I like to go somewhere, like maybe go somewhere, some preaching transaction. You say, hey, I'm going to bridge e two machine. You did this step, essentially. And then maybe one day you're like, okay, I want to go and do a swap transaction. Then what you need to do is you need to now be able to bridge UI, move the asset to the DAX, essentially. And then in the DAX, you need to go and change the DAx UI now do the swap. And then you have to go back to now the vision UI and say, hey, I want to go through some.
00:18:32.320 - 00:19:34.164, Speaker A: In order for us to make this a little bit more simple, what we need to do is start improving the rest. How do you do this? There are ways to unify experiences where the technology works together with the user experience where all this is automated. What we're trying to design now is the user experience. Let's say I'm a user or a developer that's deployed something that's on a chain that you are using a singular API to be able to essentially, let's say I've been to an asset on my chainlet. I want to push this asset down to the liquidity layer, up to a dex, swap it, and then there's another asset, that asset to push it down to the liquid layer and back up to my chainlet bullet with a single transaction, essentially. And that's been done off the common. This is the step afterwards that we're developing right now, especially what we want to do is this is great within the socket, but you can have extend this one step further.
00:19:34.164 - 00:20:28.638, Speaker A: So if the liquidity rail is a temporal asset passing. So if you can do the same thing where as a chain holder, I could say I want to go off the liquidity layer. Go off Axel, or go to E, make a trade there, come back down to the liquidity layer and up to my chain that I've bought in areas, depending on which liquidity that you want to tap into, there's a single API that the developers can use. Essentially get access to all of this. And so this is for the last few slides you can see we're building up this architecture of what we're building out. And a lot of this is really interesting because in Cosmos, there's, I would say there's a piece of all of this is spread across everywhere. Like, some teams are developing small parts here, other teams are developing other parts that are needed.
00:20:28.638 - 00:22:01.138, Speaker A: And really somebody just needs to come and just integrate all these features together into one to make it into a package where this automatic liquidity relatively created all the harder that goes on the EDM side, Shane's love on the IDC side, and bridge partners, et cetera. To unify this experience that developers don't have to think about, do I want to launch my own chain or do I want to launch a layer one? Do this Kan saga and get your own layer one and kind of get the same experience that you would get if you just launch on another layer one. And so on top of all the technical solutions and all the breaching and stuff, there's gonna market services that teams actually can help. And so these are things like this liquidity, bootstrapping hands and celebrating that tools, technical integration, these are all things that once they have this automatic way of setting up all these experience proof for actually developer. And so one of the things that we're doing is look what we call the saga open and doesn't. The point of this is it's a marketing distribution campaign for partners building on site. Now, I mentioned earlier that if they choose to have a token, essentially one of the things that's pretty difficult is you need to be able to tap into a community, essentially, to market your actual tokens.
00:22:01.138 - 00:22:41.094, Speaker A: What we allow people to do is have airdrops, campaigns, things like that. Essentially that allows people to go and tap into the entirety of the file. We want this. So vault two was the second vault that we had got about 285,000 claims. We have about 100 different partners signed up, and so we have so many that we're not checklining them right now. So we're in currently in vault two will be kind of planning out what we're trying to help the saga ecosystem grow together. Other thing we're doing is saga origin.
00:22:41.094 - 00:23:39.686, Speaker A: So if you guys haven't heard Lexaga, we're very focused on gaming entertainment as a team right now. And one of the things that web3 game developers have a lot of problems is getting traditional, traditional blend blending work very differently than where in crypto. It's a lot of grants and milestones. And the way that traditional meme companies have actually funding in their space is through a publishing branch which is structured saga Origins. We've kind of started a publishing company essentially that was kind of more in line with the way that game companies are used to. And so soccer origins, a place essentially where provocative, extensive, uncompromising game experiences are coming. We want to make that a so grant was publishing grants generally is supposed to be about fun.
00:23:39.686 - 00:24:16.098, Speaker A: It's not just a dollar. Although written now in this current snapshot, gaming funding is difficult. The difficulty in gaming is really not. I think that's a it's simple to do is dollar off what a lot of publishers do on public. All these other stuff user plus the mobile market, user acquisition published in media influencer live service. These are all things that generally crypto companies and foundations don't think about for their users. But it's one of the ways essentially where Massaga is also thinking about how to make reliance the developers kind of the same way.
00:24:16.098 - 00:25:01.760, Speaker A: Ingrid we're building out this product that allows anybody to use actually it's kind of the same way that we're trying to pay essentially the experience launching on site as universal and easy as possible for this is along with the absolute going back. This is the same slide that I talked about before, but summarize this one more time. So as mentioned, barriers to entry to app chains are kind of outlined on the and then how we're solving this essentially for developers over time. So deploying on sign up you don't need to worry about validators. Our platform handles that. You get the same validators that RVCM uses staking company security. You don't have to worry about that.
00:25:01.760 - 00:25:39.670, Speaker A: CCP will handle that automatically. RNGC index or wallet services etcetera. Don't need to worry about any of that. Silent service provider stack automatically in the long run should be able to spin out anything similarly to how most layer ones has a default solution that we can use. Resource denier is automatic. I use the relayer structure essentially brings itself automatically and then on ramps and DaX integration for liquidity. Liquidity chain that we mentioned essentially solved a lot of that problem and then go to market problems that are created by savings that mostly exist because you don't have a savings domain with Nissaga and then we have a whole slew of services.
00:25:39.670 - 00:26:24.156, Speaker A: The summary really is that we want the best launching experience for developers and our thesis is that eventually as we build this experience in this way, going and launching on Ethereum for example, as smart contracts versus employing us on channels, I should look almost identical when the developer says, hey, I'm going to take the time to use assistance. You don't need to worry about these initial trade offs essentially then to experiencing the best developer platform in the world. And so that's me. This is a chart of smart websites and you're curious about what's our games and what we're doing. Come contact us.
00:26:24.188 - 00:26:25.280, Speaker B: Come back to me.
00:26:25.900 - 00:26:40.150, Speaker A: We have a interesting chat about how uh, other processes can plug into some of the famous clone. Yeah.
00:26:45.330 - 00:27:07.954, Speaker B: I think you can kind of separate from two parts. Maybe the source for such a. You could say you're addressing a bit the mass market and the smaller teams who just didn't want to put something they don't miss, want to deal about. And then there's the bigger teams story. Football, DyDx or plant our projects that they want to migrate. Cheers. But they need to get a feel for house brand.
00:27:07.954 - 00:27:41.860, Speaker B: What are all those insights now? I'm not sure if you, I think there is a market there. I don't know if you're trying to address that. But I think for that specific point, what seems to be curious, so it seems to me relevant. It's free to hold their hand a lot in the beginning because like you said, all of this complexity is higher. The wish, I think it is important for them. What is the complexity? What is even more important, how are they going to eventually phase out all of these content so that you get a hold of the different parts of the site. Because ultimately what they want is to control their variants, right.
00:27:41.860 - 00:27:55.280, Speaker B: Was to control parts of the stack, maybe to change the IC protocol and different models. Maybe they want to use Z game, maybe they want to become robot, I don't know, but it's kind of like phasing out of a lot of hand folding. Less and less time.
00:27:56.380 - 00:28:26.220, Speaker A: Yeah, yeah. Yes. Fundamentally, yes. I saw a physically, actually when that's not the way that we think about Saga ultimately is the same way. I would say the analogy is to build your own data center versus. So let's say I'm giant web two company and I'm like, hey, I'm going to create this. You would think that by going for AWS control all the details undergathing but it really does, right.
00:28:26.220 - 00:29:09.018, Speaker A: The point of it is the huge problems can figure out data center management, how cooling works, how all of that's the center themselves, which is irrelevant to what they're doing, and just use AWS. It's the reality of how things have gone. So, Netflix, back in the old days, there was no cloud providers, and they built their own data centers everywhere. And then they quickly realized, wait, this is actually easier if you just use AWS and just migrate over to that. So from our perspective, that's what we are. The saga essentially is AWS, our economic model, kind of minutes cloud. And we think in the long run, maybe some people will want their own app chain to do crazy stuff.
00:29:09.018 - 00:29:43.464, Speaker A: And that's great. Even those companies who build their own data centers, I bet you they use analogs some have on the side, right? And the idea here is data centers don't scale. Build these, like multi million dollar structures to build it. And then let's say your capacity is falling, what are you going to do? Like most people, they end up borrowing capacity from AWS. And this is a model that we generally talk to, even with better ones, essentially. So let's say a layer, one wants to extend the block space. The block space is getting congested.
00:29:43.464 - 00:30:33.398, Speaker A: Plus, right, we, as anthropomorphic model, I didn't talk about this since we don't collect gas from the actual chain as an infrastructure. And so from the perspective of the lateral, they can actually sharp all their applications onto chainlets and still use the same toolkit that they used earlier on, essentially. And so, to the experience of their users, it looked exactly the same as if they're interacting with the later on, but it's shorted out into sidewalk. And so we think there's a place to go. And I mean, we can't design our platform to do everything, essentially, but we can make our platform flexible enough where most people will eventually either mine it or use both, essentially. And that's the next state that we're trying to build. So hidden ethereum and roll ups, there's some stuff.
00:30:33.398 - 00:31:07.782, Speaker A: What, centralized sequencer training. So if they're super fast and they're super performant, what's the trade off? Java. That's not where you bring for us. How are you thinking about the train of, especially with gaming, I've heard about the chains need very, very fast speed. They need a lot of TPS. So how are you doing that? Yeah, yeah, yeah. So the role of space, as you mentioned, has specific designs and specific trade offs, and our mind a lot of the times when a developer starts going into roll up.
00:31:07.782 - 00:31:55.950, Speaker A: And actually, so the problems with roll out is this problem that validated saving phones. You're actually breaking apart some of these problems and you're introducing like nine different problems, essentially or associated with it when you start going down the modular existence. And this is where the Ethereum land is running into, where they're like, oh, the usability of this is pretty terrible because not only do we have to worry about this, there's like, now there's things that you have to worry about. And so from our perspective, the idea is whether or not roll ups is the winner or later on in appchain is the winner. From our perspective, doesn't matter. We're like, oh, let the market figure that out. Right now we think the design decision of app change are relevant and so we are going to automate that.
00:31:55.950 - 00:32:51.192, Speaker A: And when Rolex do become better, and they are faster, cheaper, more efficient, then we will convert our software essentially to do Rolex. But we don't see that, at least from our perspective. And so that's number one then number two is for scalability and for CDH. Yeah, I mean, everything has a downside. So as soon as you go into a wall to get better single sequencers, you run into bridging problems, other finality issues. So how do you solve those problems? You come back to exactly the design that we have. And so I'm not really sure if I have a feeling all these solutions are going to converge back to something we are designing anyways.
00:32:51.192 - 00:33:02.080, Speaker A: Why do we want to bring a player first and then come back in? We'll just start with it all integrated and just go forward from there. So that's our design philosophy. Thanks for the question.
