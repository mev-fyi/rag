00:00:00.840 - 00:00:42.624, Speaker A: All right, thank you. So I'm going to try to do something a little bit hard. I know that not everybody knows what the bitcoin protocol is and how it works. So I'm going to try to introduce you to the protocol very quickly. I hope I won't end up confusing you too much. And then I want to get to more advanced topics. And specifically I want to highlight how algorithmic game theory and other related issues are very important for bitcoin and why you should all start to look at this problem, which is very applied on the one hand and I think theoretically deep on the other hand.
00:00:42.624 - 00:01:22.646, Speaker A: So let's get started with what bitcoin basically tries to do. I see. So here's what happens. Usually when we send money digitally, right? If we have a bunch of people or agents who are interested in sending money to each other, there's usually a bank in the middle, and the bank has balances, right, of everybody's accounts. And when we want to move money, we basically create these messages saying, okay, I want to move money. I'm the red guy, I want to move money to the blue guy. You send them to the bank, the bank says, ok, this checks out.
00:01:22.646 - 00:01:49.474, Speaker A: I see your signature. This is very much like a check. And the balances are changed in the account. And banks, of course, can do all sorts of checks on your requests. So, for example, if the red agent now would try to move again, maybe $1 to the green guy, that would get thrown out. He has no money in his account. And so we have to make some consistency checks here that the bank does for us.
00:01:49.474 - 00:02:19.274, Speaker A: Now, bitcoin really wants to replace this bank with a peer to peer system of nodes. These are now computers that will do all that work for us. So the way to think about it is that each of them is now going to be a bank. They're all going to hold all the balances, they know everything. And they're going to basically take turns authorizing these transactions. That's what they're going to do. So we're going to simulate the same experience for people from the outside.
00:02:19.274 - 00:03:03.530, Speaker A: And the real problem that we now face is that where before we had just a central entity that could check consistency, things are now more complicated. And you can think of the red agent maybe trying to pull some tricks on us. He's either moving money to the blue guy or moving it to the green guy. So he creates these two messages and he sends them to different parts of the network at the same time, trying to confuse us. So this is the real challenge this is very related to the byzantine generals problem, if you know it from distributed systems. And so this is what bitcoin has to solve. And the problem was actually solved in all cases where we did have identities of nodes in the system.
00:03:03.530 - 00:03:43.718, Speaker A: The new part here is that this has to be an open system. Now we want it to be open to any participant in order to increase competition in transaction transmission. So we're allowing everybody to enter. We have no way to verify how many identities we have in the system. We have sybils, we have any other form of attack, people might try and abuse the protocol. So the way that bitcoin really handles this is through a data structure called the blockchain. And the way to think about blocks is they're basically collections of transactions, these transfers that have been somehow accepted.
00:03:43.718 - 00:04:22.746, Speaker A: Think of the bank that was previously accepting some transactions and maybe throwing some out. And every block is just the set of transactions that a node has accepted when it was its turn to be the bank, basically when it was its turn to verify things. So when a node basically wants to add new transactions, it'll build a new block. Okay, so one thing that I maybe should say here, these things form a chain. There's an identifier here of the previous blocks in the chain. That's a cryptographic hash. But if you don't know what that is, then just think of it as an identifier of the previous block.
00:04:22.746 - 00:05:18.174, Speaker A: So these arrows really go back in time and they say, ok, this block is now extending this history of transactions, and I'm going to include a new transaction. Maybe red is giving money to blue. And now that we have this, I mean, this represents a history that we can read from start to finish and understand where all the money is and what happened. And we can adjust the balances just as the bank did it centrally before. Now the main problem of course, is that when this block was created, when a node thought that it was its turn to be the bank, some other node in the system, I'm sorry, some other node in the system may have done the same thing. And while this node could have rejected a certain transaction like we saw before, maybe they received these messages in a different order. And money going from red to green was actually approved here before that transaction.
00:05:18.174 - 00:06:29.674, Speaker A: So there could be a conflict in what we think had happened in the recent batch of transactions. So these are basically two points of views that nodes hold. And the real challenge to the protocol is how to reconcile these, how to eventually come to agree on one point of view. And then we know where all the money is and so on. So, bitcoin basically uses a bunch of rules to help settle these unfortunate events. The first rule is to first make the block creation itself a very hard thing, to delay it kind of artificially by adding the requirement that you're going to have to do a lot of computational work and embed inside each block the answer to a very hard puzzle. Okay, so these blocks also contain solutions that are dependent on their contents and on the history, so they change from time to time, and you have to really find a solution to a hard problem, which is, if you know what it is, basically inverting a cryptographic hash function partially.
00:06:29.674 - 00:07:00.514, Speaker A: So this now throttles the block creation, makes it really slow. So we create a block every ten minutes or so through the entire bitcoin network. That means that there are batches of transactions that are being processed, accepted altogether. And this is a very. Right, it's a very long period of time to wait, but the end result is that we almost never have these sorts of collisions happening. Right. If two nodes create blocks, it's usually not at the same time.
00:07:00.514 - 00:07:34.542, Speaker A: It takes about ten minutes for one of them to solve this computational problem. This is only an expectation. It has to basically guess inputs to the problem. So we don't know when the solution will appear. So these conflicts are very rare. The next thing that bitcoin tries to do is, of course, once we do create one of these blocks, we send it out to everybody in the network very, very quickly, so that when the next one is built, it'll be built on top of it. And we can tell that red has already given money to blue, and we should reject transactions like this.
00:07:34.542 - 00:08:26.574, Speaker A: So if blocks are propagated really fast, that also helps us to avoid these conflicts. And the final rule is perhaps one of the most important ones states that if we do end up with two blocks that have been created almost at the same time by nodes, maybe by accident, this could still happen. We have to somehow, again, resolve this issue. Then what we'll do is we'll have nodes accept the history of another node only if it presents a longer chain than what it currently sees. Okay, so these two chains, we basically have two chains of the same length. So two nodes will not accept the other one's point of view. They keep on working, they keep adding transactions to this, to their own version.
00:08:26.574 - 00:09:03.768, Speaker A: And at some point in time, another block will be formed, either here or here. And when the other part of the network sees this longer chain of events, they will abandon what they're doing and accept the longer sequence. Okay? So, that's basically the core of the bitcoin protocol. This is how things are currently done. So now what we really need to worry about is this form of attack called the double spend attack. Double spending, where somebody really tries to misuse funds and pay with the same money twice. So, let's suppose I'm the red guy.
00:09:03.768 - 00:10:02.494, Speaker A: I have a transaction here somewhere that was accepted into the bitcoin system. Some blocks may have been built on top of it, and now I want to move the funds somewhere else. So, if you remember, the last rule that I just mentioned says that if I show you a longer chain, you're going to have to write, every node in the network is going to have to abandon this one and adopt my longer chain. And here I can embed a transaction that basically moves the money to a different location. So this is the bad thing that might happen if we change our mind about some transaction happening and we switch the destination to a different place. So, the intuition is that this is very hard to do. Okay? Because in order to create this long chain of blocks, I have to solve many, many computationally hard puzzles, right? And I have to do it faster than the network is building its own chain here.
00:10:02.494 - 00:11:06.594, Speaker A: So this is something that I've kept hidden, and at some point, I just release it for everybody to see. But in the meantime, this chain keeps growing by nodes in the network that are solving these puzzles and keep adding more and more blocks on top. So, the basic theorem that stands at the core of bitcoin is basically one that its inventor presented in the first paper that he wrote about this. In 2009, he restarted the system. But in 2008, late 2008, he released a paper that explains how it works. And he basically has one theorem there, one central theorem that says that if we have these two assumptions, that nodes can really send blocks quickly to each other, and that attackers only the attacker. Whoever is trying to switch where money is going is controlling only 50% or less of the computation, strictly less than 50% of the computational power, then we can essentially be safe.
00:11:06.594 - 00:11:57.722, Speaker A: The probability that the block will be replaced once we see it in the chain, decreases exponentially as the chain slowly grows, basically because the task of replacing it gets harder and harder. And so what we really have to do, in order to think of funds as having been moved and secured, we wait for them to enter the blockchain. We wait for the blockchain to grow, and the amount of growth really is specified within this theorem. How much security do you want? And you basically gain exponentially fast. This irreversibility of transactions. So one of the problems is that when you look at this assumption, it's very hard to know what to make of it. We don't know what the attackers that are out there are doing, how much computational power that they have.
00:11:57.722 - 00:12:44.614, Speaker A: So this is not something that we can easily work with. So bitcoin really replaces this assumption. We very often think of something that, instead of thinking of how much power the attacker really has, we try to get the network itself to be very large and very. In the sense of having a lot of computational power invested in solving these computational puzzles and building blocks. So we need to have nodes incentivized somehow to participate in the system. Now, this is where incentives come into play. And really, every time that the protocol somehow gets into trouble, it's because this main theorem somehow is compromised because of this assumption or this assumption.
00:12:44.614 - 00:13:07.962, Speaker A: These are the places where most attacks on the protocol come from. Yeah. Assumption that communication networks are secure, safe, everything. Right. So here there's an underlying assumption that we are connected, we can send quickly. Right. Communication networks are not interrupted with, and so on.
00:13:07.962 - 00:13:39.350, Speaker A: And when we try to attack the protocol, one way is to attack this assumption another way. Another line of work has really worked on this one, basically showing that we can break the incentives of nodes, and therefore, we will have large attackers come up very easily, and the protocol will not be safe. Okay, so these are two avenues for attack, and I'm really going to talk a little bit about both of them. Right. Each one of them. So are you going to give examples of, like, famous attacks? Yes, I'm going to say how to attack here. I'm not going to talk about attacks here.
00:13:39.350 - 00:14:17.084, Speaker A: But there is some sense in which this assumption degrades when you speed up the protocol. And I am going to talk about that given enough time. So let's talk about the incentives. We need to incentivize a lot of nodes to enter the system to join us, and to invest computational efforts in creating blocks. So the best way is actually to pay them. So whenever somebody creates a block, it has all these transactions inside of it, and we're going to collect a little bit of money from each one. This is kind of a fee for using the system.
00:14:17.084 - 00:14:49.184, Speaker A: And to that, we're going to add money that we're creating out of thin air. This is the way that money is created in bitcoin. And this is going to go directly to the person or to the node who built this block. So here's your reward for building blocks in the system. So basically, every time you solve this very hard computational problem, you get a little bit of bitcoins. And this is why this process has been named mining. You work really, really hard, and you mine a little bit of gold, or digital gold in some sense.
00:14:49.184 - 00:15:26.190, Speaker A: So people often refer to this as mining and to the nodes who work at it as miners. All right, so this seems really nice. Here's, by the way, the rate of money printing in the bitcoin system. You may have heard that bitcoin is only going to have a limited. Is going to have a limited supply of coins, basically 21 million units of bitcoins. And they can be fractionally, they can be broken up to smaller fractions. But basically, we are creating them at a very fixed schedule, which is converging.
00:15:26.190 - 00:16:06.882, Speaker A: We started in 2009, and the rate is halving every four years. So it's a little bit hard to see, but this is a straight line, and the slope here is halved, and so on until this converges. And so the money supply is eventually fixed. Once we get to this point, all of our incentives will be just from the fees, from transactions, and not from minted currency. Okay, so this is an overview of how bitcoin was set up. And, of course, people really quickly understood that this thing that they usually tell us on the Internet that you can make money with your computer, is not a scam anymore. It's really true.
00:16:06.882 - 00:16:41.394, Speaker A: You can make money with your computer. So they started hooking up a lot of them to the network. Right. These are incentives that work. Right. Very quickly, people understood that the problem that we're trying to solve with bitcoin hashing, cryptographic hashes, running them many, many, many times, is basically something that you can do with custom hardware. And the state of bitcoin mining today is that it's done in these huge warehouses where people really pour millions of dollars into specialized hardware that does it much, much faster than regular computers.
00:16:41.394 - 00:17:29.857, Speaker A: But there are also solutions. If you want to be a miner at home, you can actually buy on Amazon, there's a new computer that's just been sold by a company called 21 Bitcoin. 21 million bitcoin, that's what the name refers to. And you can buy for maybe $400, something that hashes, or does this computation a thousand times faster than a regular PC. So the investments in these are, I think these typical mines are tens of millions of dollars worth of hardware, but some of the operating costs are really more about the electricity and efficiency of just doing the computation. My question is, does these guys expect to actually get this 10 million back. Yes.
00:17:29.857 - 00:17:58.290, Speaker A: And they actually do get those 10 million backs. Okay. So some of them have been very profitable in the past. So as a result, what you'd expect is really happening. The computational power invested in bitcoin is growing very fast. It's grown really exponentially as we were slowly transitioning to stronger hardware that does this. And what we really wanted is the network to be more secure.
00:17:58.290 - 00:18:32.092, Speaker A: So in some sense, we've done it. There's a lot of computation going on. All of it is somehow supporting the security of bitcoin. And anybody who wants to attack and do a double spend attack has to match the investments, basically, in hardware and electricity that go into the bitcoin network anyway. So this is why many people tell you that bitcoin is very wasteful, because it does all these computations, and really, the result is thrown out. Nobody really cares about what it is, but that's the state of things. Yeah.
00:18:32.092 - 00:19:06.872, Speaker A: David. Rather than the compute rate, it's really the cost of that, the dollar cost that I would like. Is that also increasing? So that's a good question. So, first of all, I think the cost depends on a lot of things. The value of the currency. For example, if we're printing a certain amount of bitcoins per day, then, of course, when the value of the currency goes down, your earnings go down. So I know that the market basically matches to that.
00:19:06.872 - 00:19:52.142, Speaker A: So we know that miners, or we estimate that miners are pretty much breaking even. Some are actually running at a slight loss. There are good reasons to be creating bitcoins at a loss. For example, if you're in China and you want to convert your money into something that you can then send across borders very easily. One way to do it is not convert it into dollars and smuggle it, but rather to buy a lot of basically hardware, mine bitcoins out of that, and then send the bitcoins abroad. So if you're willing to do that at the loss, that's why we see a lot of bitcoin mines in China, and the heaviest miners are really located there. So it's very hard to say if this weight is really increasing, but it depends on the cost of electricity, where you're mining and so on.
00:19:52.142 - 00:20:24.874, Speaker A: But there are other incentives at play here. But definitely the hashrate has gone up. And I think the most significant thing is that now, if you want to compete with any serious bitcoin miner, you have to invest in specialized hardware. This is a sunk cost to you. If you somehow break the system, if you attack it, you don't just win the coins that you've cheated, you also lose expected earnings that you could have gotten from your special hardware that is now useless for any other purposes. There's nothing you can do with it. It's dedicated for bitcoins.
00:20:24.874 - 00:20:57.774, Speaker A: All right, so one more thing that I want to show you is that the use of the currency has been very, very slowly growing. So you might have seen it in the news. The price of bitcoins goes up and down. There have been maybe four bubbles up to now. But in terms of how many messages are sent to the bitcoin network, people requesting to move funds, this is basically the number of messages. This doesn't say anything about the amounts, the amount of money being transferred. But basically we've reached around $150,000 thousand transactions per day.
00:20:57.774 - 00:22:04.494, Speaker A: And it's been slowly growing since the very start of bitcoin. And what I'm going to later show you is that this really causes trouble for the protocol if it keeps, you know, if we keep growing, you know, this is what bitcoin is intended to do. We want to process more transactions, but the protocol is starting to slowly reach a point where it might be in danger. Okay, so this was the introduction to bitcoin. And now I want to try and get to some of the more interesting results about incentives and how we've been looking at them. So one of the earlier works that I was part of with Moshe Babayof, Sherrod Obzynski Seagal, Oren was first to realize that a lot of things in, in the bitcoin system are not incentivized correctly. So one of the first things to notice is that when you want all the nodes to act as a bank, you have to get the transaction requests propagated to everyone so that everyone can approve transactions and everybody can compete for the fees.
00:22:04.494 - 00:22:56.102, Speaker A: This is a very important part of the bitcoin mechanism. If you want competition, you have to have them all on equal footing. So bitcoin includes basically an underlying layer that distributes transactions and blocks to everyone. And really, nodes don't have an incentive to send transactions and blocks to their competitors. Why would I ever do that? So we suggested a few fixes, but we're still not really satisfied with the results, because these, if we implement them, will take up too much space on blocks, and they're still not practical enough for us to really push for them to be put into bitcoin. Another thing that was very quickly noticed is that the bitcoin protocol itself is not incentive compatible. I mean, we're giving out money to people as part of block creation.
00:22:56.102 - 00:23:39.754, Speaker A: The question that you might ask is, what would I do to get more money? I mean, is following the protocol a good idea, or should I deviate? And there's a wonderful paper by Italy, Emine gun sirer from Cornell, who noticed that there is a strategy that allows you to gain more by not following the protocol. So, basically, what they noticed is this. Let's say I'm the attacker, and I build a block, one of the blocks, as usual. But instead of sending it out, I just keep it. I withhold it to myself for use at a later time, maybe. Now, this could be very bad for me. If the honest network builds another block and maybe the second one, before I do anything else, I'm going to basically lose that block.
00:23:39.754 - 00:24:00.626, Speaker A: If I transmit it now to the network, it's not part of the longer chain. This is the longer chain. Nobody will adopt it. And I've lost a lot of money that I could have made. If I'm off the chain, I'm not getting paid. On the other hand, what could happen is that I build another block before that event happens. Now, I'm in a very good situation.
00:24:00.626 - 00:25:12.616, Speaker A: If the network builds another block, I can release my chain and basically destroy what they've built. I can get them to lose money. So why do I care about knocking out the competition if I also lose myself? Well, really, one thing to know about the bitcoin system is that it has an automatic mechanism for throttling the speed, for changing the speed of block creation, so that we create blocks every ten minutes in expectation. So even if you add more computational power to the network, you're basically solving these mathematical puzzles much and much faster. But the difficulty of the problem is automatically raised so that you're not doing it too often to do it only once every ten minutes. So, in this case, when we're knocking each other's blocks out, the mechanism will automatically speed up so that just as many blocks are on the chain as should have been if we were creating them every ten minutes. And so the end result is really, that I really care about is what fraction of the blocks on the chain are mine and what fraction belongs to the opponent.
00:25:12.616 - 00:25:43.710, Speaker A: Right. So, if I manage to knock out many more blocks for everyone that I lose, then in terms of the fraction of blocks that I'm winning, I'm getting ahead. Okay, so, that was the realization of Yale and Sierra. And really what you should see here is that if I have built two blocks. Right, of course, the next block, that will be built by the honest miners will definitely fall. But there's also a chance that I'll build a third block or a fourth block before they do anything. And then I manage to knock out more blocks of theirs at the same time, simultaneously.
00:25:43.710 - 00:26:25.204, Speaker A: So, this is a very clever, non intuitive result that shows that the attacker can destroy more blocks than he loses and gain as a result. Luckily for us, perhaps this attack only works if the attacker has enough computational power. He has to be large, or he needs to communicate very quickly. So, if you have an attacker with over one third of the computational power in the network, they can do this attack successfully. If they can compute. I'm sorry. If they can communicate fast and send their blocks really faster than the blocks of the honest network, then somehow they can do it with far less computational power.
00:26:25.204 - 00:26:59.100, Speaker A: So, we became really interested in this result, mainly because we wanted to solve it for reasons that I'll also go into a bit later. And the question is, how to fix this. What do we do? Yeah. So, you mentioned byzantine general's argument problem right at the beginning. Beginning, I was wondering, I mean, what prevents people from saying they never received a message? Things like that. So, most of the things in the protocol are signed cryptographically. I mean, when I move funds, I have to have to sign them, so the digital signatures have to check out.
00:26:59.100 - 00:27:29.124, Speaker A: If the block is somehow containing things that are weird, everything gets thrown out. Everything that I write here as an arrow is really a cryptographic hash, so it's secure. If I change a single bit in. In one of these blocks, the hash will no longer match. So, this is all built on tamper proof data structures. And this is, of course, a very important part that I don't have time to go into. But this is all a very cleverly built data structure here.
00:27:29.124 - 00:28:06.082, Speaker A: So we are interested in fixing the selfish mining problem anyway. But maybe the first step to fixing it is to understand, how do we know if we have the right solution? What we need to do is to be able to compute the best response to protocols in the bitcoin space. So, the thing to know about a Sierra's result is that it doesn't show the best response. It doesn't show the optimal deviation. It shows you some deviation that works. It's a better response. And some people have made the mistake of thinking that when they fix the protocol to cope with the Alan Sierra's strategy, the specific one that they gave, they actually fixed the protocol.
00:28:06.082 - 00:29:03.734, Speaker A: And this is wrong, because the attacker, of course, will adjust whatever changes you make in the protocol. So really, it boils down to what to do when you see a, some situation where the attacker has some side branch. The honest network has a certain amount of blocks. Do we adopt what the honest network has done and throw out our effort thus far? Do we keep working? Do we release blocks, or do we withhold them? So basically, we have to have decisions. So we started to look at this problem and try to think about utility. So, like I told you before, what we're really interested in is the fraction of blocks that we built out of the total. So if we have some policy PI to handle how we behave, then rt of one here is the number of blocks that we've entered into a chain, and we're looking at a fraction of that out of the total, and we're looking at some sort of an undiscounted infinite problem.
00:29:03.734 - 00:29:45.394, Speaker A: And if you're worried about the expectation and the limit here, we can actually prove that they can be interchanged here in this problem. So we have this weird reward into our problem, but everything else looks a little bit like an MDP in the sense that we have a state. We know how many blocks are here and how many blocks are here. That's just a two dimensional state. And we have actions that we can take at any point in time. Basically, we can keep building a block on our secret branch. We can throw this out and start working on the main chain, or we can maybe try and release blocks and overrun whatever the network has done.
00:29:45.394 - 00:30:10.480, Speaker A: So it turns out, and this is very nice, that we can still, even though it's not exactly an MDP, we can reduce this to a problem where we solve mdps in sequence. Yeah. So how do you know what the state is? Because you don't know what the others have been doing in secret so far. So this is. I'm not looking at it as a game. I'm thinking of the network as all composed of honest players. Right.
00:30:10.480 - 00:30:31.614, Speaker A: I'm trying to see if I can deviate from this equilibrium. Right. So the network is basically honest. It's publishing everything, it does everything nicely, and it's of course, very interesting to think of what happens when we have a game. But we're interested in even a simpler question. Do we have a protocol that is incentive compatible? So is it in equilibrium? Right. It's even simpler.
00:30:31.614 - 00:31:20.850, Speaker A: So we know how to reduce this to mdps. And what we get out of this is these policies that basically do optimal selfish mining in bitcoin. And the way to read this, of course, is this is the length of the chain by the honest network, this is the length of the attackers chain. And here you just have your action of what to do. So if I have a chain of length four, and the honest network has a chain of length two, I will wait, which means, basically keep building. My secret branch override here basically means that this is off the secondary diagonal here basically says, I will send my blocks out. And again, as a result, I destroy some of the blocks of the honest name network and adopt means that I give up my chance.
00:31:20.850 - 00:31:59.804, Speaker A: I'm too far behind. There's no way that I'll profit if I continue. So you might notice here a very curious thing. Sometimes it's worth it to still work on a problem even if I'm behind. Like, if I am the attacker, and I have four blocks and the network has maybe even six, I can still keep working and gain as a result. This is kind of surprising, and this is something, a feature that Aero's strategy did not have. So why don't you also have releasing partially my chain? Sorry, why didn't you have partially releasing your chain? So every time I do override, I really.
00:31:59.804 - 00:32:24.562, Speaker A: This is a partial release in the sense that I release just one block more than the honest network. It happens to be here on the diagonal. So all I have is one block more, because if I have two blocks more, I can just wait until the network builds another block and I release. Then I do more damage. There's really no reason to release everything too early. So we've thought about all of these situations. Yeah.
00:32:24.562 - 00:33:06.704, Speaker A: Are the policy parameterized by the computational power that I have in my network? Yes. Yes. So we actually have to basically run this solver for whatever value of computational power that the attacker has. And there's also another parameter that I didn't talk about, which kind of captures the speed at which the attacker communicates. And actually, when you look at speeds that are better than zero, which is what I wrote here, the state space that you need actually has more bits to it that I'm not talking about here. So this is our basic result, and this is a paper that's upon archive, so you can all have a look at what. What we do there.
00:33:06.704 - 00:33:34.564, Speaker A: And part of the results as well. So some of the results, of course, are that smaller miners than Erlen Cyrrer really thought can profit from bitcoin attacks. But we still. But now we can say that this is really the optimal attack. So we do have bounds. We can really say that you have to be bigger than some fraction in order to gain. We've done analysis of several fixes that were proposed, Aurora had a fix that they proposed.
00:33:34.564 - 00:34:23.980, Speaker A: In their paper, we showed that it's slightly worse than they thought. You can adjust your strategy to it. And there were other papers that have basically suggested fixes to selfish mining that we basically showed that have done much more damage than good. Basically, they removed this bound on the size of the attacker altogether. So, another piece of really bad news that comes out of our paper is that in networks with delays, where we start to think of messages taking time to propagate through the network, selfish mining becomes profitable for all miners of all sizes. Okay, so this is just a second. This is something that we care about, mostly because when blocks start to grow, when we try to send more transactions through the bitcoin network, deviation becomes easier and becomes more profitable.
00:34:23.980 - 00:35:05.704, Speaker A: This is a problem. Yeah, Kevin, I imagine that what you're really saying is every miner would profit from unilaterally deviating. Not everyone would profit from deviating at the same time. No, that's right. So all I'm saying is that the protocol itself is not in equilibrium. If you just take the model of, and you say everybody's really bad at communicating, we can say something like, the protocol is in equilibrium as long as miners are below a certain threshold of size. Have you thought about whether deviation stops being a good idea when a lot of other people are deviating? Is it kind of correct at some point? Well, the question of what it does is, I think, very difficult to do.
00:35:05.704 - 00:35:32.134, Speaker A: It's very hard to figure out what happens when people don't follow the protocol, because basically you have chains that are hidden from you. Releasing them doesn't even mean that they're accepted by anyone. So I think the protocol basically falls apart. And what we really want is not to think of a new equilibrium. We want to establish the protocol as an equilibrium. That's somehow my intuition of what's going on. If you have a way of finding a different equilibrium, that's also somewhat good, that'll be wonderful, but I doubt that will be found.
00:35:32.134 - 00:36:08.702, Speaker A: Okay, so there are many more incentive issues that I'm not going to have time to touch on. Some of them are related to the fee markets. Bitcoin stops slowly to print money and starts to rely more and more on fees. So these are very important. So I'm going to skip this because I want to use my last five minutes to talk about something else. And this is a recent work that we're going to upload to archive again in maybe a week or two. And it's talking about basically changing the core of the protocol, of the bitcoin protocol.
00:36:08.702 - 00:36:40.234, Speaker A: And the reason that I want to show you this is because I think there are hidden links here to computational social choice or to social choice in general. And at this point, this is just intuitions. I want to show you these intuitions and how they help us build better protocols in bitcoin. So what we're trying to do is get rid of the longest chain rule and replace it with something better. And the intuitions to how to do this, I think, come from social choice. So I'll quickly explain what's wrong with the current protocol. It's very, very slow.
00:36:40.234 - 00:36:59.610, Speaker A: We're currently processing 3.3 transactions per second at maximum. If we stress the protocol, visa is doing maybe 2000 or more. That was in 2010. It was doing 2000 transactions per second, reportedly. So we need to scale up maybe three orders of magnitude. Bitcoin blocks are also built once every ten minutes.
00:36:59.610 - 00:37:50.498, Speaker A: We don't want to wait ten minutes until a transaction is approved, even a little bit. We want faster confirmation times. These two problems are really related, so why are they related? Because when we try to increase the blocks rate or the block sizes, we start to have these conflicts. Basically, nodes start to solve the puzzle nearly at the same time, without hearing about each other's blocks. If blocks are really created quickly, before they can propagate, or if we propagate them really slowly, then we start to get more and more forks in the blockchain. It doesn't look like a chain anymore, more like a tree. And now what happens is, when an attacker shows up and he wants to switch our worldview, he needs just a very small number of blocks to do this.
00:37:50.498 - 00:38:41.024, Speaker A: So, in this case, three blocks will displace the longest chains here. Even though the network has spent a lot of computational effort building basically five blocks here, they're only easily displaced by three. We need our protocol to be somehow more tolerant for delays, so it will allow these forks to occur, but still secure. So how can we do that? So, I want to show what is the intuition of the link to social choice? Right. So, think of the longest chain protocol for a moment, facing these two chains. Let's say there's a transaction here where somebody wants to buy pasta for some reason, and a different transaction here, not necessarily by the same person who wants to buy pizza. So I'll call these pasta and pizza just because it's easier.
00:38:41.024 - 00:39:17.112, Speaker A: Now, when we build another block on top of this chain, what are we supposed to do? So, the rule basically tells us to extend along this chain. But I want to show you a different way of thinking about it. Let's think of blocks as voters for a moment. And we have three blocks that say pasta is better than pizza and two blocks that say pizza is better than pasta. Okay, so what do we want this block to do? Basically, we tell him, run the plurality voting rule. You get the result. The result is pasta, and vote for the winner.
00:39:17.112 - 00:39:41.068, Speaker A: Right. Join the longest chain means basically join, in this case, the majority or the plurality. So this is very nice, but where does it get us? I'll show you in a second. Another very nice thing that we can do that comes also with an inspiration for mechanism design. Right. This block shows up, and we have a rule. You need to pick the longest chain.
00:39:41.068 - 00:40:07.552, Speaker A: So that's one way of thinking about it. But what if we apply the revelation principle? So we tell them, okay, don't pick a chain. Just tell us everything that you know, and we will push the decision into the. Into the rule itself. So when I see this block pointing to these two, if I want to follow the longest chain rule, I can say, okay, this is obviously the longest chain, and I can forget this link. Right? So this is the revelation principle in work. In work here.
00:40:07.552 - 00:40:41.522, Speaker A: And I can basically say something like, if I now have this extra information, maybe I have a larger design space of protocols. And actually what we can do is we can incorporate the contents of these blocks. Now, even though they were previously, would have been thrown out by the longest chain rule. We can say that maybe there are transactions here that don't conflict with the ones that we have up there. We can still process them. There's no reason not to, instead of having to transmit them again within our block. And also we can tell the difference between these two scenarios.
00:40:41.522 - 00:41:09.004, Speaker A: This is now very different than this. This is a block that may have been delayed but is reported. This is a block that is delayed but may have not been reported yet. So it could be still kept secret by an attacker. So this looks more like an attack than that one. So this is a very interesting thing that we can leverage off of. And now what we have is instead of a chain, we're basically down to a direct acyclic graph.
00:41:09.004 - 00:41:32.540, Speaker A: Let me push the protocol a bit more. Let's not output a chain. Let's do something else. We have a director cyclic graph. What I suggest is that we output a linear order over all the blocks instead of a chain. So we call this property chainless protocols. Basically, what we say is we want now an order of all these blocks think of it might be a topological order.
00:41:32.540 - 00:41:58.464, Speaker A: This is what we end up with anyway. And now, how do I think about the transactions that are processed here? I'll read them from start to finish, and I'll do what the bank did before. Every time I see something that doesn't work with the history, I throw it out. So I process transactions in order. Just ordering transactions is enough. So, a chain is a way to do this, but this is a better way because it includes all the blocks. And now I'm even closer to social choice.
00:41:58.464 - 00:42:22.424, Speaker A: I'm outputting orders from my mechanism. Right. This is already very interesting. So here's maybe the last insight from social choice that I want to show you. And this really gives us a brand new protocol. So, think again of pasta and pizza showing up here. And we're in a network with delays where blocks might show up.
00:42:22.424 - 00:43:03.874, Speaker A: Right. And I've written here all the arrows that they have, but. But the longest chain would have picked this one. So, for you, following the longest chain protocol, we basically have a tie between these two chains. Because every one of these blocks has Caesar ties, they might be breaking ties differently. Now, the question that we must ask ourselves, can we think of these transactions as secure? If they are secure, if we have accepted them, then we need to do so without fear of changing our mind in the future. How secure are they? So, of course, what we've seen is that an attacker might show up with a slightly longer chain and change our mind.
00:43:03.874 - 00:43:36.252, Speaker A: Now, I want to give you the social choice analogy for this problem. So, here's the analogy that plays out in my head anyway. So I wanted you to ignore these blocks as voters for a second. Just think of the ones that follow. So, what I'm going to claim is that we have a voting situation where there are these two guys who really want to have pasta, and their second preference is pizza. Okay. Why do they like this alternative? It's because this is a block that they've seen versus a block that they haven't.
00:43:36.252 - 00:43:50.596, Speaker A: Right. A block that you haven't seen might be an attacker. The block that you have is not an attack, because if there was a conflicting transaction here, we would know it because we saw the block. So this is an attack. Right. And we like pasta over pizza. There are two votes here.
00:43:50.596 - 00:44:28.938, Speaker A: Pizza over pasta, these two guys. And this is the attacker. Basically, he wants to change our minds. So he puts burgers in front of pastas and pizzas. So, the thing that we know from computational social choice is that the Condorcet loser, in this case, wins so what is the Condorcet loser? Burgers. Basically, if you compare them burgers to pasta, these four guys are going to say, we prefer pasta to burgers, pasta to burger, and pasta to burger, and three guys are only going to say, we prefer burgers to pasta. So this is a choice that loses in all pairwise elections, but gets elected here.
00:44:28.938 - 00:45:15.018, Speaker A: So this is a very rough intuition into what's right. These two guys are basically fighting amongst themselves, and this guy takes the whole prize. So the result that we basically have that we're going to put up, and I'm not going to formally state it, is that we have a chainless protocol that picks an order of blocks, and it's resilient in the presence of these delays to double spending attacks and to confirmation delay attacks. It's based on voting with ranked pairs, which just doesn't pick the Condorcet loser. That's the basis of the approach. And really, blocks have preferences where they prefer the things that they saw over the things that they didn't. So this is the intuition that led us.
00:45:15.018 - 00:45:51.744, Speaker A: I cannot really draw the really clear line between computational social choice and these protocols, but all these intuitions have really guided us forward when we were working on this. And I think there is something deeper there. And unfortunately, the protocol is actually more complicated than I've described here. There are votes going from the past to the future to the past. It's very hard to do. So I have no time to show it. I'm actually past my time, am I? Okay, so I'll conclude this is an israeli shekel.
00:45:51.744 - 00:46:04.244, Speaker A: This is regular money. It's very simple. I give you a coin. You have one, I don't. This is really complicated. It's a system with a lot of moving parts. We can attack it in many, many different places.
00:46:04.244 - 00:46:25.526, Speaker A: In some sense, bitcoin already exceeds expectations. I mean, a system this complex could not have been standing this long. It should not have been. Right. And it's not a surprise that we find a lot of these issues with it. So we still need a bunch more work on incentives, and I'm really optimistic. I think it can be done.
00:46:25.526 - 00:47:08.994, Speaker A: I think the system can be made to work. And there maybe are more deeper connections between what I've shown you in social choice that we're still working on figuring out. All right, I'll stop here. Thank you. Yeah. Quick questions. Are there any provisions in the protocol to detect any sorts of such attacks and perhaps analyze these attackers? So, basically, what the protocol tries to do at the moment is if your block is outside of the main chain, you don't get paid for it.
00:47:08.994 - 00:47:43.234, Speaker A: So one way to think about it is this is a penalty for attackers. If you try to do this attack and you failed, and you usually will fail, then you've lost the money. But really, when you think of the selfish mining result that the Al and Sierra have shown, it really shows that you can keep blocks to yourself, maybe potentially build long chains. As you do this, you are still profitable in expectation and you can still launch attacks. So solving the selfish mining problem also will help a lot in solving, in making attackers pay for double spending in some sense. So there is an attempt to do it. It just didn't work out.
00:47:43.234 - 00:48:27.278, Speaker A: Yeah. In these chainless protocols, how does the block or the coinbase transaction work in terms of who you're distributing it to? And have you looked at selfish mining in this context at all? So, at the moment, we haven't been looking at selfish mining. Every protocol that's ever been suggested to replace bitcoin has had its own selfish mining issues. We're just hoping that once we move to this direct revelation sort of thing, basically what we're looking for is truthfulness. Now you just have to report all of the links that you have. And one more thing that we need is that you don't delay the release of your blocks. So it might be that there's no protocol and we have indications that it's hard to set up the incentives.
00:48:27.278 - 00:49:14.072, Speaker A: It could happen, but we'll be satisfied with just getting a bound. I mean, if all miners are below size and we are immune to selfish mining, that would also be good for us. Yeah. Something strange in the attack, in that many blocks are being released essentially at once, whereas. Right, so people have been looking, have been doing this monitoring of the network to see if the selfish mining attack is occurring. What they've looked at is exactly the statistics of inter arrival times of blocks. The problem is that once you try to look at your own clock in a distributed protocol, that already gives you problems, because clocks are not synchronized.
00:49:14.072 - 00:49:42.314, Speaker A: You're subject to all sorts of attacks by doing that. I'm not saying, but it could be a good idea to look at the local clock and just try and measure time between different blocks. But this could also be used by attackers. So everything that you do is very sensitive, and especially when you. When you're looking at clocks in the protocol. Thanks again. Thank you.
