00:00:02.080 - 00:00:14.294, Speaker A: So welcome everyone, to the second lecture in our series on PCP theorems. So today we're very happy to have Daniel Moskowitz from the University of Texas at Austin, an expert on PCP theorems and their applications, to tell us how to prove a weak version of the PCP theorem.
00:00:14.454 - 00:00:59.944, Speaker B: Okay, thank you so much, Joe. Okay, so I would show a proof of a weak PCP theorem, a proof that will hopefully more or less fit in 1 hour. I'll try to do it the traditional way, questions and answers. I'll do the traditional way this time. So after I discuss something, I'll just pause for questions and try to answer the ones that accumulated. Okay, so Irid presented the PCP theorem yesterday. So PCP means probabilistically checkable proofs, and it has many, many different formulations.
00:00:59.944 - 00:03:09.068, Speaker B: And the formulation that she gave was as follows. You can take a graph, any graph g, and you can in polynomial time convert it into a graph g til and such that if g, if, if g is what's going on. If g is three colorable, then so is g field. And meanwhile, if g is not recolorable, g tilde is far from a three color ball in the sense that for every coloring of the vertices at least 0.01 fraction of edges monochromatic. So they witnessed that this is not a good coloring. Okay, if the graph is not recolorable, it just means that for every coloring there exists an edge that is, that is not colored.
00:03:09.068 - 00:04:09.134, Speaker B: Right? And suddenly here for g tilde, not only there exists one edge, there exists many, many edges. So constant fraction of the edges are monochromatic. And in this transformation from g to g, t this polynomial, polynomial time, it means in particular that we consider g tils that are polynomial size. No one knows how to efficiently figure out whether g is three colorable or not. And yet we have this transformation that makes the fact that the graph is not recolorable manifest in a very large way. Okay, so for g, you're given a coloring. You really have to go over the intel coloring to check it.
00:04:09.134 - 00:04:55.414, Speaker B: And for GT, you don't need to go over the entire coloring. It's enough to pick a random edge and check if it's good. Check if it's multichromatic. And if it's good, then you're reasonably likely that we're in the first case of detail is recolorable and not in the second case. And of course you can repeat this test many times, repeat it like 100 or thousand times, and you can get pretty much sure that this will probably in the all colored, right. All those random edges. Then you get pretty sure that you're in the three horrible case and not in the second case.
00:04:55.414 - 00:05:47.444, Speaker B: So this is this amazing theorem. More generally, what's happening here is that we have a global property. And the global property here is g is three color ball. This is a property that is right. You have to given a coloring, you have to go and check everything, and then you somehow are able to test it with a local test. Okay, so the local test here is like pick a random edge in and N Chen. Okay.
00:05:47.444 - 00:06:51.988, Speaker B: Now, there are many different formulations of the PCP theorem, many different PCP theorems and different PCP theorems. Consider different global properties and also different local tests, and accordingly, they achieve different parameters. So we can start with talking about the global properties. Also here, g is three colorable. But more generally, Rick mentioned it's every property of the form that exists, some solution for your input such that it satisfies something that can be checked in polynomial time. So anything that can be formulated like that, this is what we call NP languages, you can choose as your global property, right? So GSP color rule. There exists a coloring such that all the edges are colored, right? But you can pick anything, right.
00:06:51.988 - 00:07:31.164, Speaker B: Your input can be a number n. And your y can be some possible mathematical proof. And ay can check whether this is valid proof of size n to the Riemann hypothesis. So this is also applicable if someone comes to you and says, I found a proof of the Riemann hypothesis with maybe a computer, and the proof is many terabytes and you want to check it. And kind of. We don't know how to go about checking the original proof. It's so large to even just store.
00:07:31.164 - 00:08:20.466, Speaker B: But suddenly, with this specific theorem, if only this person wrote the proof, apply this transformation, you can now test it in a local way. And here we, right here it was coloring with G Tilde. But in general, we can try to have all kinds of local tests. And local tests can differ in what we call the number of queries or the number of proof locations that we consider. Here it's two, but it doesn't have to be two. It can be three or four or ten or maybe even more, though usually two is enough. It can be different in what we call the Alphabet, which here is the number of colors and it's three.
00:08:20.466 - 00:09:11.962, Speaker B: But the Alphabet can be larger and it can differ in which predicate you test. So here it's whether the edge is like chromatic or not, but it could be any predicate you want on those queries that you make. The issue is that it's local. The issue is that we look at a small number of places in this transformed graph or transformed input. Okay, so I see a question. Can the PCP theorem itself be formulated in the NP language? Yes, I think that this is something that appealed questions. I'll try to answer it.
00:09:11.962 - 00:09:57.272, Speaker B: I'm not sure that I understand it. Right. But yes, in particular, right here we're talking about the three coloring problem, right? So in particular here we're talking about an NP language. And this proof, which is a three coloring here, right, is also legitimate NP. Poof. Okay, so yes, right, so we start with an NP, with an NP property here, and we end up with an NP property here. But it's a much more robust property right here.
00:09:57.272 - 00:10:53.246, Speaker B: It's enough to check randomly small local tests and still know whether this big global property holds or not with good probability. Okay, so I hope that this answers the question. If there are any other questions. Let me say one more thing that people asked yesterday. What's the point with this 0.001, right? Obviously it's arbitrary, but, but you couldn't put here something much, much larger when you talk about three coloring. So once you decide on what's your number of queries and what's your Alphabet and what's your prey kit, there is some number that you can put here that is the right number.
00:10:53.246 - 00:11:46.990, Speaker B: So for example, for three coloring, if I just picked my coloring completely at random, right? So each vertex I assigned a random coloring, then with probability, the probability that if I look at one edge, that the edge is not colored, right, it's just one third. Okay, so it's very, every graph basically has a coloring that with one third here. So I mean, I can't put this for something better than that. Okay. But yeah, if you want to put here something very, very close to one, you can. But then the number of queries, the Alphabet and the predicate should be, should be accordingly. And the amazing thing is that you keep, that you can keep the number of queries two and finally increase the Alphabet.
00:11:46.990 - 00:12:50.584, Speaker B: If this is epsilon, maybe the Alphabet needs to be one of the epsilons or something, but the predicate needs to be different, predicament recoloring. But you can actually achieve here whatever the error probability can be extremely, extremely small even with just two queries in the local test. So let me see what new questions I got. Are the monochromatic edges in g til evenly distributed among the edges of the graph? So what I told you, it's a 0.01 fraction. So you pick a uniform edge and you have this constant probability to get it. And you can pull all kinds of theorems that show that you can do all kinds of transformations that ensure various even distribution of the bed edges.
00:12:50.584 - 00:13:38.484, Speaker B: Right. So different, different PCP terms also differ in, you know, you can get all kinds of extra properties on properties of the graph, like degree or properties of the, you know, where the bed edges are they supported on, on most, on most vertices and so on. Yeah. So you can assume even distribution. Yeah, I'll explain right now, I only stated the normal PCP theorem. I can actually even explain it now. So the weakness would be that I won't show a polynomial transformation.
00:13:38.484 - 00:14:19.796, Speaker B: What I'll show is that I can generate a random edge here within polynomial time. Okay, the graph itself that I'll construct today is going to be of exponential size in g, but I'll be able to pick a random edge from g field in polynomial time. Okay, so this is not what's promised. We can actually prove what's, what's promised. But, but. Right. I'm trying to do something that can fit in an hour.
00:14:19.796 - 00:14:59.884, Speaker B: Okay, if this didn't answer the question. Yeah, okay, hopefully. Question, yeah. Right. I answer the question of what's week? It's not going to be a paranormal time transformation today. Just random edge is going to be generated in. Good, okay, so hopefully we know what, what we'll try to, I want to say something more about what I'll try to prove.
00:14:59.884 - 00:16:11.164, Speaker B: How do you, so as I said, you can change the global poverty and the local test, and different PCP theorems differ in different choices of the global poverty and the local test. The choice of the global poverty, yeah. So this is just a kind of a matter of convenience, the kind of equivalence between different global properties, at least up to polynomial time computation. This is the magnificent theorem theory of anti completeness that we have in theoretical computer science. The specific global property that I'm going to consider both as global and as local is quadratic equations, quadratic equations over zero one. So what I mean is mod two. Okay, so the computational problem I'm going to consider.
00:16:11.164 - 00:17:10.314, Speaker B: So you're given a bunch of quadratic equations, polynomials of degree at most two things like x one times x two plus x two times x three plus maybe x one plus x five and so on and so on, plus one equals zero. So I'm given a bunch of equations like that and I'm trying to find the solution. So an assignment of zero one. So everything is mod two, right. That's why I never have x one squared? Because x one squared is just x one. I never have minus right? Because minus is plus right. So I walk over mod two, I have n variables x one to xn, and I have a bunch of equations like this, of degree at most two.
00:17:10.314 - 00:18:17.404, Speaker B: And I'm trying to figure out whether they have a solution. So this is the problem that I use. And what I'm going to show is start with this system of quadratic equations like this, and I'm going to transform it to this squiggly distilled system of equations. And the thing is that here each equation depends on three variables, okay? So for the initial system of quadratic equations, the equations can depend. Each one can depend maybe on all variables or many of the variables. And in the new system, each equation is, right, it's a sparse system. So each equation only depends on three variables of three beats, just minimum.
00:18:17.404 - 00:19:17.164, Speaker B: And as I said, so this transformation that I'm going to define is not going to be polynomial. In fact, right, this is the week. This e tilt is going to be huge, going to be exponential in the size of e. But, but each equation will be generated, a random equation will be generated in a way of time. Okay, so we'll show, so this is the weak aspect. We show how to generate equation in tilde in polynomial time. And instead of not logarithmic time.
00:19:17.164 - 00:20:43.564, Speaker B: And if you actually want e til to be the same, to be polynomial size, you really need to be able to, to generate it in order log n time, order log e time. And this I want, I won't be able to do with the construction I'll show you today. But what I'll show is again, those two bullet points. If e is what we call satisfiable. So there exists some x, some assignment to the variables that satisfies each and every equation. Then also it is satisfiable fully, whereas if it is not satisfiable, then it is satisfiable. That is, for every assignment, assignment to x one and x two, xn and at least 0.01
00:20:43.564 - 00:21:39.734, Speaker B: fraction of equations of force. And by kind of standard ideas of NP completeness, you could have, I mean, I'll show you this theorem, but you could have cast it in the language of pre coloring light like in its formulation, maybe with some loss to parameters. Let's see what, what are my questions? Each equation in e tilde is generated in polynomial time. But e tilde itself takes exponential time to generate, because I explain few more equations. That's true. Good. Polynomial does polynomial here refer to polynomial in the number of variables.
00:21:39.734 - 00:22:34.236, Speaker B: So the law of number of variables. Wait, so polynomial, where did they use polynomial in the, it's polynomial time in the size of e. So I assume that they start with the system of equations with n variables and say order n equations. And now I can generate each equation in polynomial. Hopefully this answers the question, is there any relation between the satisfying solutions of e and e till? Yes. So what we'll show is that we can start with. So if we start with a satisfying solution for e, we can use it, encode it to get a satisfying solution to e til and vice versa.
00:22:34.236 - 00:23:26.206, Speaker B: If you have a solution to e tilt that satisfies many a huge number of the equations, then we can construct from it a solution that fully satisfies e. All the proofs I'll show you are constructed. More questions? Yeah, I think that I answered the questions. Okay, can g tilde it is be allowed to satisfy at least 0.99 fraction of edges instead of being three colorable? So this is what I said in the previous slide. So three coloring was some choice, aesthetic choice. And here it will be more convenient for me to work with products quadratic equations.
00:23:26.206 - 00:24:04.834, Speaker B: So this is what I'll do. And you can move from quadratic equations to coloring. From coloring to quadratic equations. So this is the nice theory of NP completeness transformations between each two. If you don't care about what happens to the fraction, it's quite easy to, to move between the two. Okay, good. So hopefully now we are all sure what we are going to do today in the, I guess a bit more than half an hour that I have.
00:24:04.834 - 00:24:38.636, Speaker B: Okay, good. So let's start a new whiteboard. Okay, so I'm just going to jump to it and show you the construction. Let me say a few more things before I do that. So I'll show you quite simple construction. It gives you some flavor for the actual proof of the PCP theorem. But to actually prove the PCP theorem, you need to work much, much harder.
00:24:38.636 - 00:25:25.604, Speaker B: This is one thing. There are two more reasons to show you this simple construction. One is that the simple construction, there are actually implications of PCP like in practice to verify things quickly and right. You can find it on, you know, Mozilla and you know, people try to put it in blockchains and stuff. So often what's used in practice is actually this simple construction that I'll show you. And the other thing is that each and every proof of the PCP theorem actually has inside of it. Either the construction I show you all related construction.
00:25:25.604 - 00:26:17.784, Speaker B: Okay, so I'm not showing you something that is unrelated to anything. It's actually essentially inside each and every PCP construction. See that? There are more questions. Is the actual construction of e Tilde important or is the mapping from e to e tilde important? The fact that there is a mapping from e to e Tilde is the PCP theorem. I will show you the construction. I think there is a lot to learn from it, and it gives you kind of a feel for whether, for how this can be true. Okay, the PCP theorem says something quite extraordinary that, I mean, someone has a huge proof, Poseidon Riemann hypothesis.
00:26:17.784 - 00:27:32.734, Speaker B: They can write it in a different format and suddenly you'll be able to check it probabilistically by looking only at a few bits in the proof, right? This is this crazy, crazy statement. And then it's unclear that it can be true. And hopefully you'll get a feel for why, how it could be true on this lecture. So let's do the construction. So here is the construction. Okay, so I assume that e, the system I started with, of linear equations. So we start with e, and I assume on the variables are x one to xm, and with equations e, one equals zero until Em equals zero.
00:27:32.734 - 00:28:55.194, Speaker B: Okay? And without loss of generality, m and n of the same order with magnitude. And now I want to define for you eT. So et has a variable for every quadratic polynomial, q vertic zero one to the n, and n gives zero one. Okay, so here quadratic means degree at most two. So it can be linear, it can be, constants are not very interesting, but. Okay, so every quadratic polynomial, and let me just say quadratic polynomial is given by, is given by this coefficient, right? So qx equals some qijxixj and it's possible, let's define that x zero is defined to be one. So this encapsulates also the linear function.
00:28:55.194 - 00:30:24.846, Speaker B: Okay, so for every quadratic polynomial, I'm going to have a variable, right? So you already see that e Tilde is huge with respect to e, right? Because the number of quadratic polynomials, this is like two to the n squared. Okay? But fine, I can generate each one in time, and I'm going to denote it qx. And what I mean is that what I want this variable to be assigned is there is x. That is supposed to be the satisfying assignment to e. And what I'll ask, the proverb is take this x, a good assignment for e, and evaluate q on this x that you have in mind. It's supposed to be q of x cosm x, because what the prover can do is completely ignore what I ask him to do, how to do and give me any assignment to qx. But I remember, I put it in quote to remember that this is what I expected to be there.
00:30:24.846 - 00:31:21.404, Speaker B: And the quote mean that maybe this is not what's going to be there. So this is a notation that I find useful. So these are the variables in Et. Okay, so now I need to define for you the equations. And what I do is I'll just show you how to pick a random equation in Et. Okay, so pick random equation equation in e tilde by doing the following procedure. So I'm actually going to have like three four types of equations and the first type.
00:31:21.404 - 00:32:49.822, Speaker B: So this is with probability coulter I do the following. I'm going to pick linear l one and l two from zero one to the n to zero one. And I'm going to check that the linear polynomials, right, I said that quadratic polynomials for me are any polynomials of the great most two in particular linear polynomials. So the linear polynomials are linear. So I would expect l one of x plus l two of x to be l one plus l two of x, right? I mean, if, what approval actually did, if the assignment is actually, you know, you have your x, you give each polynomial, each l just gets l of x, then indeed this equality holds. So let me test that this happens. Okay, is there any questions? The second test, again with probability.
00:32:49.822 - 00:33:38.194, Speaker B: Everything is going to happen with probability a quarter. So we do the same thing. Also, the family of quadratic polynomials is linear. So I'm going to do the same thing. Peak quadratic and q one and q two from zero one to the n to zero one. And I'm going to check the same q one x plus q two x equals q one and plus q two. I mean, maybe someone might wonder why do I need both one and two? Because obviously two subsumes one.
00:33:38.194 - 00:34:50.984, Speaker B: But the issue is that when you pick quadratic polynomials, most of the time you don't pick linear polynomials because there are many more higher degree than the linear and kind of one guarantees that there will be good properties for those linear polynomials. And two just will guarantee something for the degree two polynomials. So this is my second test with probability a quarter. I'm going to, now I'm going to check the relation between the q's and l's. We're going to pick linear l one l two. But now I'm going to check that l one x times l two x equals l one times l two, x. So finally, I do this, right? On the right hand side, I have, I have a quadratic polynomial.
00:34:50.984 - 00:35:35.498, Speaker B: On the left hand side, I have the multiplication of linear polynomials. So kind of compare the consistency between the linear and the quadratic polynomials. Right? And obviously, if everything, if there are no quotes, then everything should hold. So it makes sense to check it when there are quotes. And finally, so notice that so far, what I'm trying to do is I'm trying to make sure that the assignment to the variables of it looks indeed like what it's supposed to be like, q of x. Right? So every pronoun q is assigned the evaluation of q on this. Good solution.
00:35:35.498 - 00:36:14.754, Speaker B: Right? So I'm trying to force the assignment to actually resemble the intended assignment. And I haven't checked at all any of the equations in E. So this is what I'll try to do now. So again, with probability a quarter, I'm going to pick. So I'm going to pick two things. I'm going to pick r1.01, and I'm going to pick a quadratic q.
00:36:14.754 - 00:36:33.254, Speaker B: And I'm going to check. So I'm going to look at the linear combination ri, Ei. Right. So all my eis. Right, so these are the equations from e, the original equations that I actually care about. Oh, wow. You can see the.
00:36:33.254 - 00:36:53.734, Speaker B: The bottom of my screen for some reason. Hmm. Right. This is. Okay, let me. I can try to write it on the side. I did not expect that you won't be able to.
00:36:53.894 - 00:36:57.350, Speaker A: So I can see up to and including the bit that says sum of Ri and Ei.
00:36:57.462 - 00:36:58.518, Speaker B: Oh, you can see, I don't know.
00:36:58.526 - 00:37:00.558, Speaker A: If there's anything below that, but that's what I can see.
00:37:00.646 - 00:37:04.274, Speaker B: Oh. Because I cannot see on my screen.
00:37:04.974 - 00:37:06.394, Speaker A: I can only speak for myself.
00:37:07.214 - 00:37:17.874, Speaker B: Okay. So let me. Let me use. Yeah. On the iPad, right. I can actually, there is another line to write. Let me use it.
00:37:17.874 - 00:38:06.650, Speaker B: So I'm going to look at this random linear combination of my equations from e, and I'm going to look at this plus q, right? So this is some quadratic polynomial and which I want to evaluate on x. And I'm going to make sure. So remember that I assume without loss of generality, that all my equations are e one equals zero, e two equals zero, and so on and so on. So really this linear combination is supposed to be zero if I actually have an assignment that satisfies all the equations. So this is supposed to be qx. So let me check that. Okay, good.
00:38:06.650 - 00:38:22.370, Speaker B: So now let me answer questions. How to randomly pick some equations that satisfy certain properties. I don't understand. Right. I just defined for you how to pick a random equation. So we probably quarter you do what's in one. We probably quarterly do what's in two.
00:38:22.370 - 00:38:39.398, Speaker B: So. Right. Each one of them is an equation on its most three variables in my system. Okay. So I just defined for you everything. Can I ask you a question? Sure. Please.
00:38:39.398 - 00:38:56.822, Speaker B: I thought you wanted to make the new equation sparse. So one, two and three are sparse, but the fourth one seems to involve just as many variables as there are equations in the original. No, it involves only two variables. Right. Notice I thought that each EI would have been its own variable in your. Yeah, yeah. Each e.
00:38:56.822 - 00:39:07.834, Speaker B: I least m variables in this equation. Right. Wait. Each EI is its own variable. However, also the linear combination of all the eis plus q is also its own variable.
00:39:08.214 - 00:39:19.798, Speaker A: Okay, so I think maybe a point of confusion for some people, because I've also had some chats, is that when you write a polynomial in quotes, it's not really the polynomial, it's the input variable to the e tilde, to the equation detailed.
00:39:19.886 - 00:39:35.380, Speaker B: Right. So, so, so e tilde. So everything in quotes, every quadratic polynomial, and I denoted by this. And it's just the name of the variable. Right. The variable is getting a bit. The bit can be anything.
00:39:35.380 - 00:40:09.484, Speaker B: But what I expect. I do this because I want to say I expect this variable to be assigned the quadratic polynomial evaluated on the good x that's supposed to exist. Great, thanks. Okay, we have more questions. What does l one plus l two x means, it seems to me that l one plus l two x. Yeah. Again, so all the equations I wrote down are equations that without the quotes obviously hold.
00:40:09.484 - 00:41:06.976, Speaker B: But the issue is that when I put the quote, this is just the name of the variable that is supposed to be assigned this. So. And the variable could be assigned anything. Right. So with the quotes, I mean, it's not clear, but hopefully what I'll show is that if it holds with good probability, with high probability, then my assignment actually can be decoded to a good assignment for either. Okay, how does the variable in it yield? Depends on the input x, though. So let me, I understand there is one variable for each one quadratic, but is there also one for each assignment to the variables? No.
00:41:06.976 - 00:41:39.856, Speaker B: No. So we take e and hopefully he has one assignment to the x's that satisfies all the equations. It may have more. Right. But it should have at least if we're in the situation where there is a solution to e, then there exists some x that satisfies all the equations. So what I'm going to ask the assignment to e tilde to be is, you know, fix this x and answer about this particular x. Okay.
00:41:39.856 - 00:42:31.104, Speaker B: We don't answer about every possible assignment to the variables. We answer about this one assignment that is supposed to be satisfying to e, which in the good case it exists, in the bad case, there is no such thing. Okay. Is the intuition for doing each check with probability a quarter, that this effectively checks all four conditions simultaneously? Very much so. This is exactly what we're trying to do. Right? So if I have a check that I do everything with probability one, four, and I know that this test, except with extremely high probability, probably very close to one in particular, each one of the four, except with very high probability. And this is what I use.
00:42:31.104 - 00:43:16.684, Speaker B: Yes, good. Yes. Any other questions? Okay, good. So this is the construction, okay, so if you are happy with a weak PCP theorem, this is the entire transformation. This is pretty amazing. What I'm going to do in the next 15 minutes is explain to you how you analyze this construction. Let's start a new whiteboard.
00:43:16.684 - 00:44:30.884, Speaker B: Okay, so analysis, and of course I'm going to not do it like all the way. Hopefully you will come out of it knowing how you analyze it. Why is the last equation some I e I plus q q and not just some? We'll talk about that. It's a good question. No? Okay, I can answer. So if I can go back to, so there was a last question, which is why in the fourth, in the fourth test, why do I need this extra q? And the issue is that I don't control the is the is arbitrary equations and then, you know, is a random linear combination of them. But also the random combination is a very small portion of all my quadratic equations.
00:44:30.884 - 00:45:49.774, Speaker B: So we'll see this. I mean, it's possible that the assignment for just this linear combination, sigma ri ei, it's possible that this assignment is completely wrong. So to show that this equals zero, I mean, the proverb may achieve that without any kind of consistency, with some global assignment. And that's why I have the queue to kind of queue is completely random on a random quadratic, I'll show that it behaves well and. Okay, let's see it in the next slide when, right, we'll see the analysis and we'll discuss all those things. Okay, so analysis, okay, so the kind of, the bulk of the proof, and also the one thing I want to have time to, to show you in full is what, what we call linearity testing. So, linearity testing is exactly this test one, right? So, so l one x plus l two.
00:45:49.774 - 00:47:03.194, Speaker B: X is supposed to be l one plus l two x. Okay, so this is what I call linearity testing. They do it for random linear functions l one and l two. And what I'll show is that if test one, which is this, right, ss with probability, at least one minus delta. Delta. Think of it as a very small constant .001. Then there exists x in zero one to the n such that for at least one minus delta, a fraction of ds, we have lx, actually equal lx.
00:47:03.194 - 00:47:46.824, Speaker B: Okay, so, right, so before I ask the provers to ask the assignment to give me, supposedly the evaluations for quadratic. No. Or linear functions on, on some x. But, but they didn't know that they did it. And in this part we're saying, yeah, but if we check this test one and it passes with high probability, it means that there exists an x such that they had to answer accordingly. Okay, then we fix this, this x. So this is, this is kind of the bulk of the, of the proof.
00:47:46.824 - 00:48:42.616, Speaker B: Why, if you have those local tests, right, l one plus l two equals l one plus l two, why actually corresponds to a global linear function. I know two proofs for that one is that this is one of the easiest proofs you can get with four analysis. If you just write everything in Fourier, you can think of this test as checking the correlation of function with a convolution of the function with itself. And you end up just getting there. The sum of the cubes, of the Fourier coefficients, and each Fourier coefficient corresponds to a different x. And if the sum of the cube is large, then there must be a dominant x. Right.
00:48:42.616 - 00:49:06.224, Speaker B: So it's a, for those of you who know, for analysis, I mean, this is very easy. And also, you can just pull one. Right. In an elementary way. Yeah. So, right. What would, you would say is, yeah, I don't know if I.
00:49:06.224 - 00:49:32.920, Speaker B: Maybe you can. You can prove it elementary. And not, let's not actually do the proof right now, because I'm running out of time. But, but in a way, maybe this is the kind of the bulk of the, of the puff. Okay. If I have time, in the end, I'm happy to answer questions about, about linearity testing. So this is the first thing.
00:49:32.920 - 00:50:12.094, Speaker B: So this is the kind of, for the one thing with the one part of the test. The second is, again, linearity testing. Similarly, we do this test not just for the linear functions, but also for the cues. And. Right, because of test two, two. If test two passes. So test two was q one plus q two equals q one plus q two.
00:50:12.094 - 00:51:36.314, Speaker B: Tests with probability, very large probability. Then there exists, um, now it's going to be z in zero one to the squared such that for at least one minus delta fraction of q and we have qx equals. Let's suppose that q is some qij xix. This is sum qij z ij. Okay, so we can also deduce linear structure on the queue, because we also do this linearity test on the, so this is for some z and zero one to the n squared. So it's the same, it's application of the, of the same lemma. Once applied on the l's, one's applied on the q right out of different dimensions, n versus n squared.
00:51:36.314 - 00:53:03.650, Speaker B: But otherwise it's exactly this. So now let's go over the third test. So this is what's called Reval's test. So the claim is if additionally two one and two test three passes with probability at least one minus delta. And let me remind you that test three is the one that checks that l one times l two equals l one times l two. So if this tells the check consistency between the linear functions and the quadratic functions, if this passes with probability one minus ten delta, then in fact we have with probability at least one minus, then with probability, please, one minus, although delta, we actually have that qx equals qij. Right? So a conclusion similar to what we had for one.
00:53:03.650 - 00:53:59.484, Speaker B: For one, we had it for linear functions. Now we can get it for the quadratic functions. Qx actually behaves like q I j x I x j for the x that we fixed in one part of this analysis, this actually happens for most qxs. Okay, okay. So I can actually explain the proof of this. This is quite easy. So what we have from, so what we have from two is I have this matrix zij that I know corresponds to, to the queues.
00:53:59.484 - 00:55:10.754, Speaker B: And the question is whether this matrix actually equals the matrix xi xj. And if it equals, then exactly, I get this q behaving the way it's supposed to behave. I see a question. Is the PCP algorithm practical algorithm that could be used in settings such as automated verification? Yes, it actually is used in verification. The issue is, you know what, maybe I'll let me return to this when we do the summary in the end. And let's finish the analysis in two. Checking a delta proportion of zero one to the n squared requires still exponential time, right? So why it helps again? Right? So this is a weak PCP theorem e tilde is of exponential size.
00:55:10.754 - 00:55:40.894, Speaker B: Okay, so yes. However, to actually generate an equation, you can do it in polynomial time if you are able to access bits of this huge exponential size. Proof. If you have random access to them, you can just check and put in a real time. But yeah, it's an exponential construction. That's why it's weak. That's why I'm not proving the full PCP theorem.
00:55:40.894 - 00:56:30.194, Speaker B: Okay? Yeah. Now return to, you know, applications. Okay, so in three, all we were trying to do is show that the Zij matrix is the same as the xi times xj matrix. And if it is, then three follows from two. Okay, but let's remember what test three does. So you can think of test three as taking, right here, right, we take l one and l two. You can think of l one and l two as, think of them as vectors, right? Put the coefficients of l one and the coefficients of l two as vectors, right? Each of them, these are matrices that are n by n, and each l, each linear function has n coefficients.
00:56:30.194 - 00:57:23.474, Speaker B: So really what we're doing in test three is checking this equality. This is what test three is all about. And one can see that if zij is different than x I xj, then with, right, you're going to have here, they're going to be different with probability half, and they're not going to be the same with probability close to one. So this is the proof. Good. So this is the third portion, and now finally the fourth portion. And I remember that I still owe this answer for why we're adding this world queue in the end.
00:57:23.474 - 00:58:15.864, Speaker B: And hopefully you'll get your answer here. So this is what we call self correction. So let's talk about our situation in this point of the analysis. So we asked the assignment to e tilde to actually evaluate each and every quadratic polynomial on this good x solution for e. And because all those one to three tests happen with high probability, I now know that I pick some x already in step one. And I know that when I look at qx with the quotation marks, I actually get q of x without quotation marks. For most x's, sorry, for most q's.
00:58:15.864 - 00:59:00.154, Speaker B: Okay, so this is what we achieved so far. Okay, but this is true for most queues. This is true for one minus order delta of queues. It's not true for every single queue. Okay, so if I pick a random queue with high probability quotation qx equals qx. But if I look at any particular quadratic form, this may not be the case. And the issue is that some ei ri is very specific quadratic form, right? Ei are my equations from e and r I are just like random coefficients, zero.
00:59:00.154 - 00:59:28.294, Speaker B: One coefficients. So this is a specific quadratic form. I cannot rely on this being what it's supposed to be. So here is the trick. So this is what we call self correction. Instead of looking at this, I'm looking at this plus q, right? In. And I'm looking at this entire quadratic form.
00:59:28.294 - 01:00:08.320, Speaker B: And now I just. Because of this q, I made this quadratic form just a random quadratic form. So with high probability, this is going to be equal. So with probability one minus omega of delta, this is actually equals to some ei ri plus q of x, right? This is what I achieved in one, two, three. And now I check, right? So this is test four. I check whether this equals qx. And again, with high probability, this equals to qx.
01:00:08.320 - 01:00:31.024, Speaker B: This is what I achieved in one plus three. And the conclusion from both of those things being equal is that the sum ei ri actually equals of x actually equals zero. I don't know. I mean, I can't see it on the screen. I can see it on my iPad screen. I can't see it on the. On your screen.
01:00:31.024 - 01:01:11.124, Speaker B: I hope it's fine. Okay. And this is what I wanted to check, because if one of the is wouldn't have been satisfied, would have been equal zero, then a random linear combination of them would have been zero, just with probability half. But if it's zero with probability close to one, then it must be the case that all of the Eis are zero, each and every one of the many, many eis. That's it. This is the analysis, the PCP theorem. Okay, so I'm very happy to answer questions.
01:01:11.124 - 01:01:40.724, Speaker B: Questions about the analysis. We started a bit late, so. And if there are no questions about the analysis, I'll answer the question that I was waiting to answer. If I move my closer away from the zoom window, where is my courser? Yeah, but then I won't be able. If I move my closer away from the zoom window, I won't be able to show. To. To see your questions and answer them.
01:01:40.724 - 01:02:16.764, Speaker B: But, yes, you're right. Let me answer the question of. Is the PCP theorem practical? Okay, so, okay, the piece, right. I showed you this this week. Proof. It's a very simple, short, nice proof, but. But it's this huge, huge construction, right? You need to walk much harder if you want to show an actual polynomial size construction of GT or E T.
01:02:16.764 - 01:03:41.854, Speaker B: For many years, people were saying, oh, it's not practical, because even if it's polynomial size, it's a large polynomial size. This is no longer true. I mean, for 20 years, we have constructions, extremely good constructions of pcps transformations where g tilde is almost linear in the size of g. We also have nice, simple, you know, relatively simple, simpler proofs of the PCP theorem. And we have kind of good understanding of how to prove PCP theorems. So, I mean, I would say that it's basically practical. Interestingly, what's actually being used by people in security, by people in systems? You know, there are people in academia who, who tried to apply those, those tools, and what they ended up using is mostly what I showed you today, just this exponential size construction that still has like a very simple check.
01:03:41.854 - 01:04:19.456, Speaker B: So, yes, it can be used. It is used. I hope that it will be used even, even more. Wait, is the PCB theorem used to construct efficient proof search? No. So the PCP theorem kicks in when you already have a proof, and the proof is written in completely formal way. You have the solution. Right, if it's recoloring, right? You have recoloring.
01:04:19.456 - 01:04:45.214, Speaker B: It's very clear. What's the procedure if it's a proof? It's written the axiom system. And, you know, there is a clear procedure to verify if there is a proof. Now you can, you can go and check it very, very fast, but it doesn't tell you anything about how you find the proof. Okay. Just a way to check. I mean, I guess if you're looking for a proof, you can try.
01:04:45.214 - 01:05:42.664, Speaker B: Right now you have this quick way to rule things out, but, I mean, but you still need to search for the proof, which is hard. What additional steps are necessary to get to the point where pcps are actually used to verify claimed proofs of the Riemann hypothesis? Again? So the problem with verifying hooks for the Riemann hypothesis, you need the original proof to be written in the axiom system completely, completely rigorously, right in the axiom system, and then you can apply everything in an automated way. No one writes proofs in the axiom system. No mathematician writes in such low level way. But if you do write things in low level way, because maybe you use the computer to find your proof or something, I mean, then at this point, you can use the PCP to verify.
01:05:43.844 - 01:05:48.184, Speaker A: Okay, can I ask a question also? Vicky, popping more questions in the chat.
01:05:48.964 - 01:06:27.348, Speaker B: Yeah, I think I may be having a hard time keeping up, but can you give a high level summary of what we proved and how it is related to what we wanted to show. Okay, let's go back to the whiteboards. So, this is the proof of the. Of the PCP theorem, right? There is a transformation from every three color ball graph to three color ball graph. Not three color ball means far from three quarter. What we showed is this. So we showed it for quadratic equations, that it's very easy to move between quadratic equations and tripolar ability.
01:06:27.348 - 01:06:58.024, Speaker B: This is what theoretical computer science did in the seventies. And, I mean, if you want to talk about more, we can talk about it more. But the main thing is that we didn't show a polynomial transformation from g to g til. So what we showed is that every. Right, g tilde is exponential size, and every edge of it can be computed in polynomial time. Okay? Which is, which is nice. Which is useful.
01:06:58.024 - 01:07:14.220, Speaker B: It's truly useful. It is used in every, even every proof of the PCP theorem and also in practice, but. Right. It's not fully polynomial. Okay, so this is.
01:07:14.332 - 01:07:43.924, Speaker A: Can I ask a related question, actually, which is actually sort of a question from Nike. You mentioned the connection between having a polynomial size proof and having a system where you can generate a single equation in olog n time. Is this an if and only if and also, I guess, is there any other motivations for wanting to do, to generate a single one instead of generating the whole proof?
01:07:46.644 - 01:08:15.974, Speaker B: Okay. The fact that you have a polynomial number of local tests, which corresponds to logarithmic randomness. I mean, this is if and only if you want g t to be polynomial in the size of g. The fact that you can generate by the PCP theorem. Some of the strongest PCP theorems show how to generate it in polygonic time. I mean, for this, you need to work. This is not clear.
01:08:15.974 - 01:08:51.044, Speaker B: And there are PCP theorems that don't generate a single test in polylog time. They generate it in polynomial time. They first generate the full GTL, and then you can go and pick edges from it. Okay, more questions. Actually, Dana, maybe just. I'm still not sure I understand. So, in your construction, e tilde is actually the collection of all equations that can arise in year one, two, three and four.
01:08:51.044 - 01:09:08.344, Speaker B: Okay. And it's a gigantic exponential, like, two to the n squared size construction. Yeah, but. But it's locally. Locally is efficient. Like, you can. You can generate one equation in .0
01:09:08.344 - 01:09:58.672, Speaker B: time in the size of the. Okay, let's see if I have more questions to answer. Why is quadratic sufficient? Do we need higher order equations? So. Right, so this is one. Okay. Quadratic is sufficient because you can formulate end or, and not with quadratic, with quadratic equations, right? If you want to say the end of two things or the o two things or it's all you could, it's just quadratic. So you can take any property, any property that you can express in logic, and you can express it as a system of quadratic equations.
01:09:58.672 - 01:10:47.588, Speaker B: That's why quadratic equations suffice. Okay, so in particular, right? So this is true for anything. It's true for recoloring. It's true for any property that you can express, right? This is the cook's theorem by the basis of NP completeness that being able to express property in first order logic. So in propositional writing, just end or not. This is equivalent to the property being checkable that you can formulate the checking with just a logic expression. Yes.
01:10:47.588 - 01:11:57.796, Speaker B: This is why quadratic equations are enough. We don't need higher order equations. We can formulate higher order equations with quadratic. I didn't understand why only few equations in e are unsatisfied. Many more in e tilde are unsatisfied. This is exactly what, so this, this magic happened, happened in the very last part of the analysis where somehow we started, right? So in the entire analysis, we only know that a large fraction of the equations are satisfied, and yet we, the result in the end was that a random linear combination of all equations is satisfied with high probability, which means that each and every one of the equations is satisfied. Right? So this is this kind of easy probabilistic claim that if you have e one to en and one of them is not satisfied, even if just one of them is not satisfied, the random linear combination is going to be zero, just with probability.
01:11:57.796 - 01:12:39.984, Speaker B: Hat. So this is where this magic happened. Well, all the equations should be satisfied in e to just many of the questions are satisfied in it. Okay, wow, lots of questions. Okay, discuss more. The equivalence of three coloring and quadratic system and potentially three sat. Again, hopefully it's clear that with quadratic systems, you can encode end, right? Because and is x one times x two, right? And if you can do and then you can do not and not is just one plus x, right.
01:12:39.984 - 01:13:35.434, Speaker B: And if you have and then not, then you also have or, and you have, you know, full boolean logic. So now three coloring, right? You can write a positional formula that tells you that, right, it takes, you know, those two beads that represent the coloring on one end and the two bits that represent the coloring of another end. And, right. You need to check that whether they are not equal, you can write a formula for that. So either the first bit is not equal or the second bit is not equal. Everything can be described in propositional calculus and as a logic formula and enhance as a quadratic equation. Okay, hopefully this, this explains it.
01:13:35.434 - 01:14:32.122, Speaker B: Can a more efficient algorithm be obtained? If there is some known structure in the provided proof, it is decomposed into lemmas somehow. Wait, are we. I'm not exactly sure if provided proof means the assignment to itilt or it means my proof that argues about itil. I don't know how to improve, how to get a more efficient proof than the proof that I showed you, right. And obviously getting a more efficient construction of ETF is kind of would be a huge right. If we had a proof of the full PCP theorem that was this level of difficulty. Right.
01:14:32.122 - 01:15:17.692, Speaker B: Would be great. So if you could get a more efficient construction, that's great. I just don't know how to do it. Let's see what happens when you apply PCP construction to problems with obvious decisions, but no known solution finding problems like factoring. Okay, so notice, let's go to the first whiteboard. So we start with checking some property here. It's recollerability.
01:15:17.692 - 01:16:16.756, Speaker B: The question is, what if I check if something has factoring or not, right. If I check something easy, or at least it has a decision and doesn't. I mean, to check whether something is prime or not, right. We have a decision procedure. The issue is that if I can distinguish between those two efficiently, then my transformation can just distinguish. Understand what's the answer for the input, and then just have two different gt's of constant size, that one is polar ball, one is prime and one is not prime, I'm not sure what does it mean? Far from prime, but whatever you want to map it to. If you can decide this in polynomial time, and you have those two constant fixed instances, one that is colorable.
01:16:16.756 - 01:16:46.904, Speaker B: Actually, now that I think about it, I should use some highlighter. Yes, good. If this property is easy, if you can distinguish between this and this in polynomial time, then you can do it within your polynomial time procedure. And then just have two fixed instances here. And if the answer is this, output this. And if the answer is this, output the other one. Right.
01:16:46.904 - 01:17:25.284, Speaker B: So everything trivializes. If you have a decision problem with an efficient, with an efficient solution, at least the theorem as stated here trivializes. Okay. I mean, could answer this. What is the resulting analog of GTL for factoring? I don't know. Right. I mean, you have to map to something.
01:17:25.284 - 01:18:03.274, Speaker B: Well, there is local structure if you don't have local structure. I don't even know what to do. Is the reference filling in the proofs of correctness of the tests? Yes. So there is a book by Sajiva Ora and Boz Barak, modern complexity theory, I think it's called, and I believe that it has the construction that I showed you today. The book. The book is available online. You can go and read it there.
01:18:03.274 - 01:18:13.862, Speaker B: I think that this was the last, last question. So this is it.
01:18:13.998 - 01:18:25.126, Speaker A: Okay. So thanks very much for your talk and for your patience in answering all our questions. So now we go to a short coffee break, and you can join further discussion with discord. And I believe we resume in ten minutes.
01:18:25.230 - 01:18:25.774, Speaker B: Okay, thanks.
