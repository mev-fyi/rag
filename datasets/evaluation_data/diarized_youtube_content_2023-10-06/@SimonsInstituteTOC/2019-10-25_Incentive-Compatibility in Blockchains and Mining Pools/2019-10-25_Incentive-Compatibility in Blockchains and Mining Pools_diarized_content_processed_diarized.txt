00:00:02.000 - 00:00:25.274, Speaker A: So welcome, everyone, to the last day of the Simons workshop on the blockchain consensus. Our first speaker of the day is Professor Tim Roughgarden from Columbia University. He was previously a faculty at Stanford. For almost 15 years. He works on game theoretic techniques in computer science. And today he's going to be telling us about some of its applications in the context of blockchain.
00:00:26.554 - 00:01:00.634, Speaker B: All right, thanks very much. Good morning, everyone. Thanks for showing up early. I want to talk today about two results concerning incentives in blockchain. So I'm very interested in incentive compatibility. So in a blockchain context, that would mean, you know, is the protocol designed to properly motivate the participants to behave in the way that it's intended? And I'm particularly interested in techniques from a field of economics called mechanism design and technology transfer between the two. So before I talk about either of the two specific results, let me just tell you a couple slides about, like the big dream, what I hope to see happen.
00:01:00.634 - 00:01:27.738, Speaker B: All right, so mechanism design is often described as inverse game theory. So what is game theory? So this is where you study Nash equilibria and that kind of thing. So you set up who are the strategic actors. So in our context, that might be, for example, the miners. You have to specify what actions are available to them. So that might be like honest mining plus various deviations, and you have to specify their payoffs. For example, what's the mining reward earned by the miner? So that's you set up a game.
00:01:27.738 - 00:02:12.856, Speaker B: And traditionally, game theory is descriptive. So you set up a mathematical model of your strategic situation, you identify its equilibria again like Nash equilibria, and then you draw inferences about your game based on its equilibria. So mechanism design, like I said, is inverse game theory. Meaning what? Meaning you don't actually start with a game. In mechanism design, you start with a desired outcome, and then you put on your engineer's hat and you try to reverse engineer a game in which that desired outcome is, in fact, an equilibrium. So this general idea, sort of designing the rules of a game to incentivize people to behave to lead to a particular outcome. I hope that sounds super relevant for blockchain protocol design, and I think it is.
00:02:12.856 - 00:02:51.596, Speaker B: And again, I'm particularly interested in technology transfer between the two, both in terms of specific technical tools that mechanism design might offer. But also it's a pretty mature theory. And so I think it can offer a kind of blueprint of what we might hope a theory of incentive compatibility in blockchains. Might look like, say, ten years from now. So what's so great about mechanism design? What have they done over the past many decades? Well, let's start really simple. I mean, they've articulated sort of the appropriate design space. So if you walk up to a random mechanism designer on the street, and you use the phrase the space of all mechanisms, that mechanism designer will actually know what you mean in a precise and mathematical sense.
00:02:51.596 - 00:03:35.144, Speaker B: And wouldn't it be great if we had some proposed definitions for what the space of all blockchain protocols might mean? Those are definitions that we still lack. Now, once you've articulated the design space, all kinds of doors open up. So, for example, you can do optimization over your design space. So posit a metric that you care about and ask, is there a protocol which is optimal with respect to that metric? Maybe subject to some constraints. And now, once you're sort of in the optimization mindset and exploring the design space, just inevitably it leads you to new points in that design space you hadn't considered before with the focus provided by an objective function. So I think ultimately, this exercise should lead us to some new and interesting protocol designs as well. So that's kind of the high level, you know, the big dream kind of what I'm interested in.
00:03:35.144 - 00:04:19.664, Speaker B: This talk is going to be about sort of two different places where I took a really tiny, bite sized piece of the overall puzzle and applied this mindset. So the settings will be fairly narrow, but in exchange, we will be rewarded with very crisp mathematical results. All right, so the first thing I want to talk about is an axiomatic approach to block rewards. This is joint work with a couple of my Columbia colleagues, Xi Chen and Christos Papadimitru. And I just presented this in Zurich on Tuesday at the AFT conference. So you can analyze incentives and blockchain protocols at various timescales. And in this paper, we're going to look at sort of the simplest imaginable timescale, that of a single epoch, that of the creation of a single block.
00:04:19.664 - 00:04:55.678, Speaker B: Most of the most famous incentive attacks on blockchains operate at longer timescales, like selfish mining, for example. That's about miners deviating over a period of multiple epochs, not just one. In this paper, we're focusing just on a single block creation. So what kind of design decision do you even face at the level of sort of a single block? Well, we're going to be interested in how the reward for the block is distributed to the miners. So I'm thinking about a proof of work type setting like bitcoin and when a block is created, I'm assuming there's some reward that needs to be distributed to the miners. Could be a block reward, could be transaction fees, whatever.
00:04:55.726 - 00:04:55.902, Speaker C: Okay.
00:04:55.918 - 00:05:20.182, Speaker B: There's just some amount of currency that needs to be allocated back to the miners. Now, as a proof of work blockchain, what is this distribution going to be a function of? It's going to be a function of the computational power that the different miners bring to the table. So the miners various hash rates. So, as a function of the hash rates that miners contributes, we're looking at the design decision of how do you redistribute the rewards once you've successfully authorize the block?
00:05:20.318 - 00:05:20.994, Speaker C: Yeah.
00:05:23.454 - 00:05:24.854, Speaker A: Does not mean it is committed.
00:05:24.894 - 00:05:27.222, Speaker C: Right. Yeah.
00:05:27.238 - 00:05:51.426, Speaker B: So, again, I mean, I think it will become clear exactly what my desiderata are. So we're going to be going towards stuff like, what do you need to be civil proof or collusion proof? Those are going to be the kind of questions I'm getting to. So, again, all this stuff about, like. Again, like forking attacks, it doesn't even make sense for this first part of the talk, because we're just looking at the timescale of a single block. So it's going to be incentive issues that are probably different than most of the issues you've seen in the blockchain space.
00:05:51.530 - 00:05:52.214, Speaker C: Yeah.
00:05:52.914 - 00:06:30.252, Speaker B: So, again, it's sort of simpler, but again, as a reward, as you'll see, we'll sort of really be able to nail the question. Okay, so that's the design decision we're going to look at. Miners bring a bunch of hash rates to the table. A block gets created, there's some reward to be distributed. How do you do it? Well, how is it done now? Well, I want you to think about the way it's done now is what I'm going to call the proportional allocation rule, which just means that, in an expected sense, the block reward is distributed amongst the miners proportional to their hash rates. So if you bring 20% of the hashrate to the table, then your expected reward in this epoch is going to be 0.2 times whatever the reward is associated with this block.
00:06:30.252 - 00:06:58.304, Speaker B: So that's what I mean by the proportional allocation rule. You distribute the rewards proportional to miners hash rates. And the point of this first paper is to ask, can we do better? What else could we do? Is there any reason why we would want to do something else than the proportional allocation rule? All right, so to investigate this question, I need to say, what are the alternatives? What are we allowed to do other than this sort of proportional redistribution. And so, in general. Yeah.
00:06:58.384 - 00:07:00.004, Speaker D: What do you mean with better?
00:07:00.704 - 00:07:16.192, Speaker B: Yeah, it's not defined yet. So I should say in any sense. So can we do better in some sense? Or alternatively, can we prove that the proportional rule is optimal in some sense? Any sense I'd be pretty happy about. So those are the two successful outcomes, as far as I'm concerned, asking this question.
00:07:16.288 - 00:07:16.536, Speaker C: Yeah.
00:07:16.560 - 00:07:18.192, Speaker B: So this is definitely not defined yet.
00:07:18.368 - 00:07:19.444, Speaker C: Thanks for the question.
00:07:21.344 - 00:07:39.624, Speaker B: Okay, so what's the design space? I'm going to look at? Okay, so I'm just going to look at all. I'm going to call them allocation rules. So an allocation rule is just a function. It takes as input a tuple of miners hash rates, and its output is a tuple of the same length of the expected block rewards that get distributed to the miners.
00:07:40.444 - 00:07:41.276, Speaker C: Yeah.
00:07:41.460 - 00:07:47.420, Speaker E: What is the private information that each user has here? The hash rates are your private input.
00:07:47.532 - 00:08:01.912, Speaker B: At the moment, it's just a function. So at the moment, I haven't set up a strategic situation. So we're just thinking about these functions from hashrates to rewards. Later, we'll ask, what properties might we want these to satisfy? And that's when the incentives will come in.
00:08:01.968 - 00:08:05.064, Speaker F: But we really don't know what is age one and age n?
00:08:05.104 - 00:08:40.558, Speaker B: We'll get there. Yeah, that's a big part of the talk. Where was I? Okay, so, good. So proportional allocation rule, that's obviously one example of an allocation rule, but of course, there's many other functions one could write down. Okay, now, in our context, in this reward redistribution context, it's natural to focus on what are called budget balanced allocation rules, which just means the protocol distributes all of the reward that it has to distribute, nothing more, nothing less. So, after scaling, I'm just going to say that the expected rewards given to the miners sum to one. You could look at variations.
00:08:40.558 - 00:09:29.314, Speaker B: You could look at so called weak budget balance, where the protocol can keep some of the reward for itself. But for the most part, we'll focus on the sort of exact budget balance case. Okay, so this is what else is allowed. Now, you might say, that's fine as a mathematical definition, but if you think about implementation, you might say, well, what's the meaning of this? Does the proof of work framework kind of force us to do the proportional allocation rule? After all, if a miner has 20% of the computational power under the random oracle assumption, there's simply 20% likely to be the first one to. To solve the crypto puzzle. But what I want to argue next is that at least in principle, within a proof of work context, you could implement pretty much any allocation rule that you want.
00:09:29.694 - 00:09:30.434, Speaker C: Question.
00:09:30.774 - 00:09:41.954, Speaker F: But the voucher balance, does it capture all this strategic mining where you see, I want to re mine because there's a new transaction going to pay me much more. So I have to. It's better to re mine because I get more money there.
00:09:42.294 - 00:09:46.794, Speaker B: So again, so the timescale is that of a single block. So I'm not thinking about, say, a forking attack.
00:09:47.734 - 00:09:49.954, Speaker F: Adaptive block choosing is not.
00:09:50.454 - 00:09:55.478, Speaker B: So I'm not thinking about a timescale. Multiple blocks. So, for example, forking attacks are sort of not part of the vocabulary of.
00:09:55.486 - 00:10:01.314, Speaker F: This model, but choosing even within a block, there's this thing of choosing what I want to mine on.
00:10:02.854 - 00:10:03.934, Speaker B: I see what you're saying. I see.
00:10:03.974 - 00:10:04.198, Speaker C: Good.
00:10:04.246 - 00:10:15.178, Speaker B: Okay, so I'm just. Yeah, so I'm not modeling the different miners might choose different blocks to propose with different transaction amounts. For example, assume. I'm just going to assume that the minors. I mean, in some ways it's not going to matter.
00:10:15.226 - 00:10:15.362, Speaker C: Right.
00:10:15.378 - 00:10:25.178, Speaker B: So if you think about the proportional rule, it tells you how to redistribute it, whatever the reward winds up being. So it's true. I've sort of set it up as if it's kind of ex ante, but really exe post, but it's not going to matter.
00:10:25.226 - 00:10:25.386, Speaker C: Yeah.
00:10:25.410 - 00:10:26.410, Speaker B: Thanks for the question.
00:10:26.602 - 00:10:27.334, Speaker C: Yeah.
00:10:28.154 - 00:10:32.014, Speaker A: The hi should be thought of as the actions of the delegates.
00:10:32.794 - 00:10:46.274, Speaker B: So again, I haven't set up the strategic situation yet. So I would think of the actions as basically whether or not you Sybil attack and whether or not you collude. Ultimately, that's where we're going. So hash rate, you just have a hash rate. You just come to the table with a hashram.
00:10:46.694 - 00:10:47.214, Speaker C: Yeah.
00:10:47.294 - 00:10:51.062, Speaker B: So you buy your machines. So we're not modeling investment. You just have some hashrate.
00:10:51.198 - 00:10:51.914, Speaker C: Yep.
00:10:56.934 - 00:11:19.370, Speaker F: And we want to keep it simple and we don't know h one and hn. We can think over time as the more blocks you submit, probably you have and reward. If I want to do, for example, square, I just go at it with time and increase euro if you. Many times.
00:11:19.442 - 00:11:21.506, Speaker B: Yeah, exactly. That's exactly the second half of the slide.
00:11:21.570 - 00:11:23.934, Speaker C: Exactly. Right. Yeah. Yes.
00:11:24.794 - 00:11:36.722, Speaker B: Talking about mining pools here. Not yet. So it's related to mining pools. The second half of the talk will be square about mining pools. Let me finish what I'm going to say about this slide. I think that'll head off a lot of the questions. Okay.
00:11:36.722 - 00:12:10.534, Speaker B: So again, remember where we were. I said, you know, does the proof of work set up force us to do the proportional allocation rule? And I'm about to argue that, you know, at least in principle. No, I'm not saying we should implement something other than the proportional rule, but if we really wanted to, we could. Okay, the reason is the law of large numbers. Okay, so I want you to think about the way bitcoin works now, is that in each epoch, it takes a single sample from a probability distribution, the distribution that's proportional to miners hash rates. You sample it once, that's sort of your leader election. That's whoever proposes the block and collects the full reward.
00:12:10.534 - 00:12:27.580, Speaker B: Alternatively, we could take 1000 samples or 10,000 samples from that distribution, at which point, as was suggested, we would have a very accurate estimate of exactly what miners hash rate was over that period. And once you actually do know the h sub is, you can implement whatever reward scheme you want.
00:12:27.692 - 00:12:29.268, Speaker C: Okay. Yeah.
00:12:29.436 - 00:12:36.024, Speaker A: How do you make sure that the selected leader does not just drop all the samples that slower is payoff?
00:12:36.324 - 00:13:20.824, Speaker B: Well, so imagine they're on chain. For example, imagine you publish partial solutions to the chain. Again, I sort of want to, I want to, let me say a little bit more about the implementation here. So the next question might be, you know, how would you get these thousand samples or 10,000 samples? And this is where the connection, I'm not saying this is the only way you can implement it, but one way you could implement it is the same way this kind of thing is done in mining pools, which again, we'll talk a lot about in the second half of the talk, which is in addition to having your difficult crypto puzzle, you have an easier version of the crypto puzzle, where you expect solutions to be found at a much higher rate, 1000 times as frequently or 10,000 times as frequently. Then once the difficult crypto puzzle is found, at that point you have these other 1000 or 10,000 samples from the same hashrate distribution.
00:13:21.484 - 00:13:51.624, Speaker E: So there should be conflation of proof of work with longest for opinions or necromotive consensus. But there are protocols, proof of work based protocols out there, quite a few of them already. PriSM and Yao, ghost based data protocols. Even Ethereum rewards Omar blocks. So not only the main leader block gets rewards in many of these consensus protocols.
00:13:51.664 - 00:13:51.816, Speaker C: Right?
00:13:51.840 - 00:13:58.204, Speaker B: So I'm looking at a model where there's a reward associated atomically with each block, and that's what you're responsible for redistributing.
00:13:59.464 - 00:14:03.248, Speaker E: Yes, but there's not necessarily a single chain of blocks. We're only one.
00:14:03.336 - 00:14:13.740, Speaker B: I'm not claiming I'm modeling all protocols in the world. The whole point here is to say, can we take a bite sized piece of the puzzle and get something that's really crisp as a conclusion? And we will.
00:14:13.932 - 00:14:15.064, Speaker C: Other questions?
00:14:17.564 - 00:14:33.856, Speaker D: Yes, so you said we could model all mechanisms, but there's a problem with basically estimating this topple of identity hash rate, because I think any mechanism that would allow you to get a benefit by actually splitting your identity potentially cannot be modified.
00:14:33.940 - 00:14:42.320, Speaker B: That's exactly where we're going, actually. So Sybil attacks is going to be something I care about. So right now, the miners are just identified by public keys. So there absolutely could be symbols out there.
00:14:42.392 - 00:14:42.608, Speaker C: Okay.
00:14:42.616 - 00:14:45.284, Speaker B: And that's, again, what's going to be the main part of the result.
00:14:47.864 - 00:14:48.752, Speaker C: Okay, good.
00:14:48.808 - 00:15:09.844, Speaker B: So again, point of the slide, proportional rules, how it's done. You know, in principle, if we really were motivated, we could implement other rules as well, if nothing else, by doing this multiple sampling trick like you see in mining pools. Okay, so that's the question I want to study. Okay, so this is our design space. All possible budget balanced allocation rules. Proportional is one example. You can write down any number of other functions.
00:15:09.844 - 00:16:11.434, Speaker B: Is there any reason you might want to deviate from the proportional rule? So we're going to attack this using the axiomatic approach, which is a tried and true sort of method for reasoning about design problems in economics. So it's a two step recipe. So in step one, you kind of gather up the courage to write down some formal requirements for your allocation, what you want. In the second step, you investigate the consequences of the conditions you wrote down. Is there anything in the design space that satisfies all of those conditions? And if so, what are they? So we had in mind role models, like just sort of basic classical expected utility theory, where you characterize utility based on axioms over consistency of people's preferences over lotteries, arrows and possibility theorem of social choice, which says when you have at least three candidates, there's no voting rule, which satisfies a natural set of three axioms. Or in cooperative game theory, is Shapley characterized to Shapley value as the unique value satisfying a particular list of four axioms. So those are the kinds of things we were hoping to follow in the footsteps of.
00:16:11.434 - 00:16:51.206, Speaker B: And why do this? Well, one of the big benefits of the axiomatic approach and the uniqueness and impossibility results that you wind up getting is it really clarifies what kind of compromises you're going to need to make in your design problem. So, for example, an arrows theorem, it's an impossibility theorem. Does that mean nobody ever runs an election with three or more candidates? No, of course not. We run them all the time. It just clarifies. Any way you do it will violate one of three conditions you would want to have, and it is then up to you to pick one of those three, which of those three axioms you're most comfortable violating, and then designing accordingly. So that, in my opinion, is really the way to think about these types of axiomatic results.
00:16:51.206 - 00:17:18.864, Speaker B: Sort of saying, what are the fundamental compromises you will need to make in your design problem? In this case, fundamental compromises for deviating from the proportional allocation rule. Okay, so we're going to have three axioms for the first two. Let me sort of introduce them by proposing a crazy allocation rule that's not proportional, and we're going to hate all the proposals. Then we're going to make precise the sense in which we hate the proposals, and those will turn into axioms.
00:17:18.984 - 00:17:19.816, Speaker C: Okay?
00:17:20.000 - 00:17:59.052, Speaker B: Example number one, the uniform allocation rule. You take every minor you know about, okay? All the public keys, you choose one uniformly at random, and that's your leader election protocol, okay? They create the block, they create the whole. They collect the whole block reward. How do we feel about that? We hate it. Why do we hate it? Because it totally misses the point of a permissionless blockchain setting where Sybil attacks are cheap. If this was your allocation rule, you would absolutely create multiple identities because each identity would then have its own probability of winning and making you the leader and collecting the whole reward. So we don't like this because it's not.
00:17:59.052 - 00:18:20.706, Speaker B: Because it's vulnerable to Sybil attacks, we're going to reject all other protocols that are similarly vulnerable to Sybil attacks. Which brings us to axiom number one, which is Sybil proofness, okay? Which says what you would think it would say. It says if a miner ever splits themselves up into a bunch of sybils whose combined hash rate is at most what they started with, that miner winds up only worse off.
00:18:20.850 - 00:18:21.442, Speaker C: Okay?
00:18:21.538 - 00:18:40.004, Speaker B: So formally, if you start with some hashrate vector h, and one of the miners splits themselves up into a bunch, then again, they can't make up hash rate from nowhere, so the sum of their Sybil's hash rates is most what they had at the beginning, then they were at least as well off before the civil attack as they were after the civil attack. So that's simple proofness.
00:18:41.304 - 00:18:41.728, Speaker C: All right?
00:18:41.776 - 00:19:00.944, Speaker B: So fine, next one. Here's another crazy allocation rule. Winner take all where you give the entire block reward, always to the biggest miner. So suppose you've taken your 1000 or 10,000 samples, you know who the biggest miner is with high probability, and you give them the whole block reward.
00:19:02.164 - 00:19:16.964, Speaker G: Sorry, I have a question about the preceding slide. Do you ask that every single, for every I, the reward is higher than the total reward or than the total reward divided by the size of s, the total reward.
00:19:17.084 - 00:19:17.340, Speaker C: Right.
00:19:17.372 - 00:19:23.028, Speaker B: Because everyone in s represents you. Right. So you split yourself into s, they each get their reward.
00:19:23.116 - 00:19:23.604, Speaker G: That's the sum.
00:19:23.644 - 00:19:24.740, Speaker C: Okay, I see, I see. Yeah.
00:19:24.772 - 00:19:27.982, Speaker B: No, so it's definitely the sum. So this is the sum and this is also the sum.
00:19:28.038 - 00:19:28.206, Speaker C: Right.
00:19:28.230 - 00:19:34.534, Speaker B: So the combined hash rate of your sibyls is at most what your hash rate was, and you want the total reward to your sybils to be at most what your original reward was.
00:19:34.574 - 00:19:36.594, Speaker G: I see, ok, thanks.
00:19:37.974 - 00:19:38.518, Speaker C: Yes.
00:19:38.606 - 00:20:07.858, Speaker E: So I guess the Sybil proof, like really it's because of the unfairness, right? It's not because like if it were fair, like you wouldn't have cared if people created many identities. Let's say if it's distributed to my country according to the proportion of my contribution to the system, then maybe you wouldn't have cared that people created many identities.
00:20:08.026 - 00:20:22.830, Speaker B: Well, certainly. I mean, so if you were rewarding proportionally, and I should have said this earlier, the proportional role certainly is civil proof, right? So if you're a minor with 20% of the hash rate and you split into 210 percent minors, it does not change the expected reward you're going to earn. Okay, so you don't.
00:20:23.022 - 00:20:31.110, Speaker E: What I'm saying is maybe simple proof is not like a fundamental concern that you are cared about. The fairness is.
00:20:31.262 - 00:20:48.534, Speaker B: Okay, so we need to define fairness, and I don't want to define fairness as proportionality, right? I want to derive proportionality as the unique solution to some other set of criteria. And so that's why, like I deliberately want the axioms to be weak, because that's what gives my uniqueness result for force. Okay, why fairness?
00:20:49.114 - 00:20:52.306, Speaker F: You have one goal, right? To prevent double spending.
00:20:52.370 - 00:20:53.106, Speaker C: That's it.
00:20:53.250 - 00:20:56.014, Speaker F: No fairness, no civilization, all tools to get.
00:20:57.314 - 00:21:04.490, Speaker B: Yeah, okay, but so I don't know what to tell you. I mean, I'm looking at the, I'm looking at incentives at the time scale of a single block.
00:21:04.602 - 00:21:04.882, Speaker C: Okay?
00:21:04.898 - 00:21:09.914, Speaker B: So I want to avoid civil attacks, for example, at the level of a single block, no problem.
00:21:10.034 - 00:21:14.034, Speaker E: I guess my question is like why is this a fundamental accident?
00:21:14.154 - 00:21:15.214, Speaker H: I don't see this.
00:21:16.364 - 00:21:31.140, Speaker B: I am just claiming that we might be unhappy with protocols that failed to satisfy this axiom. That is the only argument I'm making on this slide. Okay, so that's axiom one. We want to be civil proof.
00:21:31.252 - 00:21:31.812, Speaker C: Yeah.
00:21:31.948 - 00:21:44.712, Speaker G: The classical argument is that if you can split yourself in arbitrarily many parts in a cost less fashion, and then the sum of what you get in every single game is more than the sum what you got before.
00:21:44.768 - 00:21:45.248, Speaker C: Like.
00:21:45.376 - 00:21:48.752, Speaker G: So I'm just saying the negation of your thing, then there's a problem.
00:21:48.808 - 00:21:49.000, Speaker C: Right.
00:21:49.032 - 00:21:50.960, Speaker G: Because people will split in many pieces.
00:21:51.112 - 00:21:51.352, Speaker C: Right.
00:21:51.368 - 00:22:08.044, Speaker B: So I agree. That's exactly, I mean, so that is the one thing I'm asking you to go along with me with on this slide. So I'm asking you to. I'm asking you to agree that it's worth thinking about rules that don't suffer from civil attacks. I mean, I'm not, I don't even, I'm not claiming it's a fundamental axiom, but it's going to be.
00:22:08.224 - 00:22:12.108, Speaker E: So bitcoin is actually, I have created many identities as I want.
00:22:12.156 - 00:22:41.328, Speaker B: Absolutely. But doesn't it say that decentralization is bad, like this axiom or the next axiom? Well, so good. It kind of is sort of neutral, I would say, on centralization and then the other axioms also, we'll sort of see how that goes. But I mean, civil attacks and centralization kind of push against each other. And it's going to be unusually, kind of vividly illustrated in the main result today.
00:22:41.456 - 00:22:42.164, Speaker C: Yeah.
00:22:42.464 - 00:22:48.992, Speaker H: Between hashrate and identity. Right. Like you've sort of assumed hashrate means identity here.
00:22:49.168 - 00:23:07.654, Speaker B: I'm assuming you can key. I'm assuming you are aware of public keys and that you can count, say, the number of partial solutions that people have submitted according to their public key. So these vectors are indexed by public key, not by identity, but n. Like, what is n? N is the number of public keys that you are aware of.
00:23:07.994 - 00:23:14.514, Speaker G: So if there was a cost to introducing a new public key, then I could be civil proof and not violate your axiom.
00:23:14.634 - 00:23:49.634, Speaker B: Right. And that's an excellent point. So, you know, remember I talked about one of the reasons for this exercise to clarify sort of compromises. And if, for example, you know, you were in a permissioned world and you didn't have to worry about civil attacks, then you're going to be able to escape the uniqueness result that I'm going to present in a couple of slides. But the theorem that I'm going to state for you will assume that you don't like civil attacks. In this sense, I'm not saying that's always going to be true, but certainly there are cases where it's going to be true we don't like. So that's Sybil proofness no one should be able to gain from a Sybil attack.
00:23:49.634 - 00:24:06.294, Speaker B: Second, crazy allocation rule, winner take all. Give the whole block reward to the biggest minor. Okay, if you think about it. Okay, so how do we feel about this? Probably your gut reaction is, this is nuts. Also notice it is civil proof.
00:24:06.714 - 00:24:07.506, Speaker C: Right.
00:24:07.690 - 00:24:27.674, Speaker B: If you only reward the biggest minor, you're never going to do better by shattering yourself in a small minor. So it's problematic, but for a different reason. What is the reason? It's because of the sort of unstoppable force torque centralization that this creates. If you implemented this, what on earth would miners do other than form a 51% pool to guarantee themselves that reward?
00:24:27.754 - 00:24:27.962, Speaker C: Okay.
00:24:27.978 - 00:25:11.634, Speaker B: It's just a very strong force toward collusion. So we're going to reject winner take all on the basis of this push toward centralization toward collusion. So that gives us our second axiom, collusion proofness, which says that whenever you have a hashrate vector and a bunch of the public keys band together and form a single, sort of merge into a single miner, then the reward that that merged single miner receives should not be any larger than what all of those miners were receiving collectively before they colluded. Okay, so a bunch of miners collude, obviously, their combined hash rate is at most the sum of the hashrates they started with, and they should not be better off. The reward that the single merged miner gets is at most what they got collectively in the first place.
00:25:12.794 - 00:25:21.538, Speaker E: I haven't seen the axiom three yet, but only with axiom one and axiom two. I got this feeling that they are really pushing against each other almost.
00:25:21.586 - 00:25:21.810, Speaker C: Yeah.
00:25:21.842 - 00:25:23.294, Speaker B: We only need one more axiom.
00:25:23.634 - 00:25:29.602, Speaker E: So you actually know that with only these two axioms, it's not unique or there are, correct?
00:25:29.658 - 00:25:30.906, Speaker C: Yep, yep.
00:25:31.010 - 00:25:34.130, Speaker B: And I'll illustrate that when we get to the definition. That's the best place to illustrate it.
00:25:34.162 - 00:25:34.450, Speaker C: Yeah.
00:25:34.522 - 00:25:36.218, Speaker B: What's the assumption if two and three.
00:25:36.266 - 00:25:41.956, Speaker D: Merge and they always win? You make no assumption about how they'll split that highest reward between themselves.
00:25:42.020 - 00:26:06.000, Speaker B: That's an excellent question. So the question is, what's the side payment structure within the coalition? And actually, if you look in the paper, it's sort of a subtle point, and we have three different definitions for the uniqueness result. It's actually going to be true for the weakest of the definitions. So we're actually going to. For the theorem, we're going to assert we're ok, or sort of, we're going to allow basically arbitrary transfers within a coalition. Ok. And actually, no.
00:26:06.000 - 00:26:07.208, Speaker B: So we have even weaker versions.
00:26:07.296 - 00:26:07.848, Speaker C: Sorry.
00:26:07.976 - 00:26:19.564, Speaker B: I don't want to get into the three different flavors, but you have to define that. And pretty much you get the same results, no matter how you define it. Either arbitrary internal transfers or proportional internal transfers doesn't matter for the results.
00:26:20.504 - 00:26:24.960, Speaker C: Yeah. Any question? Okay. Yeah.
00:26:24.992 - 00:26:52.296, Speaker B: So Jing rightfully asked, do we really need an axiom three? And we do. I mean, it's not, you know, it is what it is, an anonymity. Or you might also call it symmetry. This just says that your allocation rule should not use the name of a minor in deciding what its reward should be. What would be an example of a non anonymous allocation rule? Take the lexicographically smallest public key you've ever heard of and give them the whole block reward. It's obviously crazy. You'd never do it.
00:26:52.296 - 00:27:09.262, Speaker B: But that's an example of something that satisfies those first two. That's why we need another axiom. So in other words, a rule can differentiate between different miners only in as much as they contribute different hash rates to the protocol. So those are our three axioms about.
00:27:09.438 - 00:27:13.286, Speaker E: Remapping and promoting the names of the users.
00:27:13.350 - 00:27:21.430, Speaker B: That's right. So another way of saying it is if you permute the vector of hash rates, the rewards get permuted in exactly the same way. That's another way to define it.
00:27:21.462 - 00:27:29.648, Speaker F: Yes. You disallow giving different miners different rewards depending on how much coins there, how much money they have in the system.
00:27:29.736 - 00:27:46.124, Speaker B: So this is why I want this. I mean, so to avoid this issue is why I encourage you to think of it as a proof of work chain. If it is proof of stake, actually, the result is still going to be, still going to hold if the rewards depend only on the current amount of stake you have, as opposed to more detailed aspects of the history.
00:27:47.024 - 00:28:00.616, Speaker D: But you do allow randomized algorithms for allocations, because, for example, one would be, we run a lottery that is keyed on a VRF on the name. And that's okay. That's not really losing the name in your world, right?
00:28:00.760 - 00:28:02.400, Speaker C: Yes, correct. Correct.
00:28:02.512 - 00:28:03.324, Speaker B: Good point.
00:28:05.304 - 00:28:19.472, Speaker A: I think you're saying this is, this accident is necessary because you argue this is civil proof and solution proof. But it sounds like if I use this rule, I want to create a yet even smaller.
00:28:19.528 - 00:28:19.800, Speaker C: I agree.
00:28:19.832 - 00:28:48.550, Speaker B: So there's sort of another attack vector. So, I mean, that's just to prove the point that there do exist non anonymous rules. So I don't want to go through sort of a detailed proof of exactly what it is, but I just want you to internalize what I'm disallowing with the anonymity assumption. And that is the kind of thing that I'm disallowing. That's the only point to take away from this. Okay, let me just state the theorem so you can all look at it, and then I can take some more questions. So, I promise a uniqueness result and indeed the proportional rule, as we've discussed.
00:28:48.550 - 00:29:01.554, Speaker B: We discussed it. Sybil proof. It's obviously coalition proof. If 210 percent minors collude and become a 20% minor doesn't change their expected rewards, it's evidently anonymous. And in fact, it is the unique budget balanced rule that satisfies all three of those conditions.
00:29:02.214 - 00:29:03.142, Speaker C: Questions?
00:29:03.318 - 00:29:11.394, Speaker E: I still wonder, without axioms three, can you prove that proportional rule is unique up to permutation?
00:29:13.254 - 00:29:27.262, Speaker B: I don't believe so. You can weaken anonymity to what's called equal treatment of equals. I'll have to skip the proof, probably, but if we did the proof, you would see that really all that matters is that if two minors have exactly the same hash rate, they should get exactly the same reward.
00:29:27.438 - 00:29:28.794, Speaker C: That's what drives the result.
00:29:35.454 - 00:29:36.758, Speaker B: I'd have to think about it.
00:29:36.926 - 00:30:07.686, Speaker D: So, in the collusion axiom, what you hated is slightly different from what you disallowed. So it's clearly what you said we should hate is okay, you know, winner takes all. But maybe saying we have a target set of winners, let's say 1000, let's say 10,000, I mean, we can argue what that number should be. It's not something we would hate so much and would actually violate.
00:30:07.790 - 00:30:27.278, Speaker B: Excellent point. And so, and again, I think this is one of the big benefits of sort of this whole exercise, right? So we wind up somewhere, right, with this uniqueness theorem, and then, you know, we could do two things. We could, we could celebrate. We say, well, hey, this is how we do it. And it's giving us a precise sense in which it's a good way to do it. Or you could say, no, I want to be more creative. I want to do something else.
00:30:27.278 - 00:30:46.500, Speaker B: And then this guy. So this is guiding you to exactly the right question. How do we take one of the axioms? Relax it, keep it reasonable, but let the design space blossom a little bit and have more than just this single point. So this is exactly the starting point for those kinds of investigations. Okay, let's see.
00:30:46.532 - 00:30:46.676, Speaker C: Right?
00:30:46.700 - 00:31:04.604, Speaker B: So I guess I just said this, right? So one interpretation is as a prescriptive result, saying you really should do proportional sharing. I think of this as more just like if you want to deviate from it now, you understand sort of what you have to drop. Okay, I think I'm going to skip the proof. Well.
00:31:06.464 - 00:31:08.404, Speaker C: Let'S see. 25 minutes.
00:31:09.544 - 00:31:38.476, Speaker B: 25 minutes. All right, maybe we'll do the proof. Okay, because the proof is not hard. It's just a couple slides. So I'll go ahead and show it to you. I should say I just found out last week that this basically exact same result was proved independently by Jacob Leshnoe, who's right here in the audience and speaking later today at Chicago and also Philip strack at Yale. All right, so the proof, how are we going to do it? All right, so for the exposition, I'm going to assume that all of the minor hash rates are positive integers.
00:31:38.580 - 00:31:39.060, Speaker C: Ok?
00:31:39.172 - 00:32:04.644, Speaker B: One, two, three, etcetera. By scaling any rational hash rates would be fine for this theorem. The proof, no surprise. It's going to be by induction. By induction on what? Well, first thought might be maybe by induction on the number of miners. But actually that winds up being kind of annoying because we're thinking about these Sybil attacks and we're thinking about these collusive attacks, and then the number of miners changes under those attacks, which can kind of mess up. Applying the inductive hypothesis.
00:32:04.644 - 00:32:40.074, Speaker B: So instead, the correct inductive parameter, it turns out, is the number of miners which contribute a hash rate larger than the minimum. The minimum here is one. So the number of miners that contribute a hash rate of two or more. Turns out once you have this inductive parameter, the rest of the proof writes itself and you basically just watch with satisfaction as the teamwork between the three axioms builds up to the result that you want in a natural way. Base case. What does base case mean? That means there's no minors contributing more than the minimum. So we have an all ones vector of some length.
00:32:40.074 - 00:33:18.014, Speaker B: Now, anonymity, remember, that says you can differentiate between minors only in as much as they have different hash rates. So for the all ones vector, they all have to get exactly the same reward. We have budget balance, which says the sum of the rewards equals one. So we even know what that common reward has to be, has to be one over the number of minors, which in the base case is also one over the total hash rate. That is the proportional allocation rule. So that's when there's no minors contributing more than the minimum. Let's look at when there's one or more, say, t minors with hashrate bigger than one, pick one of them arbitrarily, call it minor I.
00:33:18.014 - 00:33:55.174, Speaker B: Capital H denotes the total hash rate. Two cases, we're going to see that Sybil proofness kind of imposes a lower bound on payments and collusion proofness imposes an upper bound on payments. And proportional is the only thing that's going to thread the needle, kind of as was suggested by the audience. So, case one, the rule tries to get away with underpaying this minor relative to what it would obtain under the proportional rule. Well, in this case, this is an opportunity for a Sibyl attack. Minor I, if it wants, could break itself into h sub I sibyls, each with hash rate one. Call that vector h prime.
00:33:55.174 - 00:34:26.194, Speaker B: Notice in h prime, the number of minors has GOne up, but the number of miners with more than the minimum hash rate has GOne down, putting us into the inductive hypothesis. This is exactly why we set it up the way we did. So the inductive hypothesis applies to h prime. It has to be proportional on that vector. So in particular, each of those Sybils gets reward one over capital H. There was h sub I, Sybil. So collectively, they get H sub I over capital H, which is more than what minor I was getting before the Sybil attack.
00:34:26.194 - 00:34:32.082, Speaker B: In other words, this vector h witnesses the failure of Sybil proofness of this particular rule.
00:34:32.238 - 00:34:38.334, Speaker A: Okay, it might be easy to handle, but can hi be a non integer?
00:34:39.194 - 00:35:04.840, Speaker B: It can be rational number. Yeah, rationals are Fine. I mean, it needs a little extra argument, but it's a boring argument, so I'm going to skip it. All Right, so that's where simple proofness comes into play. So, case two, very similar. Suppose the rule tries to get away with overpaying minor I, paying it more than little h sub I over capital h. Well, now, think of h prime, the same h prime as before, after the Sybil attack.
00:35:04.840 - 00:35:39.604, Speaker B: But now imagine those actually aren't Sybils. Imagine all those hash rate one minors are bona fide minors. Now, starting from H prime, that set of hashrate one, miners have an incentive to collude, because if they colluded and then went back, they would get this. Sorry, first of all, so in H prime, what are they getting? Each of the symbols is getting one over capital h. So collectively, they're getting little h sub I over capital h. If they colluded, then they would get back to what this rule is giving them, which is bigger than that, little h sub I over capital h. So that's where collusion proofness comes in.
00:35:39.604 - 00:35:42.344, Speaker B: So proportional is all that remains.
00:35:42.504 - 00:35:42.968, Speaker C: Yeah.
00:35:43.056 - 00:35:47.712, Speaker D: The proof so far seems also to rely on this anonymity requirements.
00:35:47.768 - 00:35:47.936, Speaker C: Right.
00:35:47.960 - 00:35:52.504, Speaker D: Because otherwise you form a group, you just get rewarded.
00:35:54.484 - 00:36:14.544, Speaker B: Certainly all three axioms are necessary in the sense that I can give you examples of non proportional rules that satisfy each pair of the three. And moreover, I mean, certainly if you look at the proof, it's very clear that each of them plays an essential role in the proof. And that's it. You said the proof so far, but that's the whole proof. So we're done.
00:36:16.664 - 00:36:20.044, Speaker F: Threshold, and say you pay only about one.
00:36:21.784 - 00:36:22.456, Speaker B: Say it again.
00:36:22.520 - 00:36:23.704, Speaker C: If proportional.
00:36:23.784 - 00:36:33.800, Speaker F: Yeah, it's a threshold like elections, you know, we don't want the little ones.
00:36:33.832 - 00:36:41.416, Speaker B: Oh, so this is going, you're saying go back to winner take all. You're saying it's not winner take all. No, but you're saying generalize winner take all so that there can be multiple winners.
00:36:41.480 - 00:36:42.148, Speaker C: Right?
00:36:42.336 - 00:36:43.984, Speaker B: Is that the nature of the proposal?
00:36:45.524 - 00:36:48.364, Speaker F: I don't say make it too big, right?
00:36:48.524 - 00:37:02.144, Speaker B: Yeah, so, right, so I mean, this was sort of like the discussion we had before. So you will violate one of the axioms, maybe in your application, it's going to be in a way that you can tolerate. So tell me the rule exactly.
00:37:03.644 - 00:37:18.590, Speaker F: I take some computing power. I don't want, you know, people sitting here and mining. So I'm taking some value, threshold value, not too big of computing power, and I don't pay for this computing power, I just pay for something higher.
00:37:18.662 - 00:37:23.206, Speaker B: So I think I switched. So that threshold would become your one, basically, yeah.
00:37:23.230 - 00:37:41.876, Speaker F: But you pay one, you pay for people with one. And I say not, not pay for people with one. Yes, I want you, but once you come, once you join, you don't have incentive to join at infinity. You going to go above the threshold?
00:37:41.940 - 00:37:42.596, Speaker C: Yeah.
00:37:42.780 - 00:37:44.092, Speaker B: That's which axiom it violates.
00:37:44.148 - 00:37:44.508, Speaker C: Right.
00:37:44.596 - 00:37:49.828, Speaker B: It violates the collusion proofness one, because you'll collude to get above the threshold exactly as was proposed.
00:37:49.876 - 00:37:53.476, Speaker C: Yeah. Okay.
00:37:53.540 - 00:37:55.744, Speaker B: Other questions about the, about the proof.
00:37:59.844 - 00:38:00.584, Speaker C: Great.
00:38:01.604 - 00:38:39.016, Speaker B: So the paper has a couple variations. Maybe I'll just mention one. So you could think about relaxing budget balance to weak budget balance. So this is the case where the protocol is allowed to keep some of the reward for itself if it wants. What could you do with that extra flexibility? Well, I guess a trivial thing you could do is you could scale the proportional rule and still satisfy the three axioms, like always, keep half of it for yourself, distribute the other half proportionally. More generally, you could scale by different constants at different times. So we call a generalized proportional allocation rule as a scaled version of the proportional rule, where the scaling factor depends only on the sum of the contributed hash rates.
00:38:39.016 - 00:39:12.560, Speaker B: And moreover, it needs to be a non decreasing function of the sum of contributed hash rates. This definition, you know, you don't have to remember this definition. The point is just, you know, you can again use this exact same methodology to exactly characterize which rules satisfy the three axioms and are weakly budget balanced. And it is precisely these. Every rule of this form, no matter what non decreasing f you pick, does indeed satisfy all three axioms. Any rule which is not of this form violates at least one. So again, this is kind of showing that, you know, the setting is narrow, right.
00:39:12.560 - 00:39:49.260, Speaker B: But the things you can prove are very sharp. Okay, last thing I want to say about this, in this first part of the talk, I want to talk a little bit about risk aversion. So I've been glossing, sort of shoving this under the rug all along, of assuming that miners are risk neutral, meaning indifference between having a 20% chance of getting the entire block reward or having a 20, sorry, 100% chance of getting 0.2 times the Brock reward. So far, I've been assuming that those are exactly the same thing. Now, you look out there in the world, and there's a lot of evidence that miners are not actually risk neutral. And we'll sort of again expand on this in the second part.
00:39:49.260 - 00:40:32.494, Speaker B: Mining pools are a pretty strong suggestion that there's risk aversion among miners. Mining pools act as insurance policies, smoothing out your reward, lowering the variance, and having a steadier payout. So I view that, that the assumption of risk neutrality is not a very good one in this setting. There's a standard way to talk about risk averse decision makers using expected utility theory. You just set it up so that miners are now going to act to maximize not their expected reward, but their expected utility of their reward, where that utility function is some strictly concave function, like the square root function or the logarithm function. Again, all this is saying is that all else being equal, agents strictly prefer more certainty to less certainty. That's sort of the rule of risk aversion.
00:40:32.494 - 00:41:07.100, Speaker B: And unfortunately, that uniqueness results that we had becomes an impossibility result, at least for the standard randomized implementation of the proportional rule. Randomized implementation. I mean, you pick one sample from the hashrate distribution, that one miner collects the whole reward for that version of the implementation. It does not. It no longer satisfies collusion proofness. If you have risk averse miners, you have a 10% minor and another 10% minor. They actually want to collude, form a 20% pool, split the proceeds equally.
00:41:07.100 - 00:41:43.082, Speaker B: It keeps their expectation the same, lowers their variance, so higher expected utility, so you lose collusion proofness with risk aversion with the randomized implementation. Now, something you could do, again, at least in principle, is you could do a near deterministic implementation of this exact same allocation rule, where you again take your thousand samples or 10,000 samples to learn everyone's hash rates. And now you deterministically split the block reward fractionally amongst the miners according to their hash rates, which you now know this is a deterministic reward rule, essentially.
00:41:43.138 - 00:41:43.906, Speaker C: Okay?
00:41:44.090 - 00:41:59.186, Speaker B: Now, with deterministic rewards, there is no difference between being risk neutral or being risk averse. It's exactly the same thing. So you actually recover the collusion proofness from our risk neutral analysis. If you do this kind of exotic deterministic implementation of the proportional rule, is.
00:41:59.210 - 00:42:04.854, Speaker H: The granularity with which you need to measure the hash rate related to the risk aversion?
00:42:05.554 - 00:42:20.274, Speaker B: That's a good question. Yes. I would say you could work out that trade off if you wanted. So, I mean, so in some sense, I mean, if the utility functions are very, can change very sharply, then small errors in the hashrate estimation could be problematic. So.
00:42:22.454 - 00:42:23.594, Speaker C: Any questions?
00:42:25.294 - 00:42:30.358, Speaker G: Is that not what's happening in the world? Like the mining pools to that?
00:42:30.486 - 00:42:31.014, Speaker C: Oh, right, right.
00:42:31.054 - 00:43:15.356, Speaker B: Sorry. Thank you. I had more to say here, which I totally forgot, actually. So how should you think about this? First of all, a reviewer pointed out to us that if you look at the fruit chain protocol and you look at it with sort of the right parameter settings, it's actually more or less simulating exactly this kind of idea. And another way to think about it is basically, we've taken what historically happens in a mining pool, as you said, and we've brought it into the protocol itself. We basically put it on chain. So at least for a mechanism design nerd like me, there's an amusing metaphor with what's called the revelation principle in mechanism design, which says there's a sort of generic way to turn non truthful mechanisms into truthful mechanisms by taking the deviations agents would have done and bringing them into the mechanism itself.
00:43:15.356 - 00:43:23.504, Speaker B: And that's basically exactly, sort of what's happening here, bringing the mining pool into the protocol so that there's no longer a need for that mining pool.
00:43:25.334 - 00:44:00.258, Speaker A: So I'm going to talk about those related things. I would like to make a comment on the. With deterministic rewards, this equal for an individual minor, which seems to be true, but there's a risk still in the pool. So there has to be someone that's taking the risk. Suppose you form a pool and a lot of people are working on it, entire poor, to have a remaining risk somewhere. And if you give all these a miners a deterministic payoff, there has to be. The manager is taking the real risk.
00:44:00.346 - 00:44:03.530, Speaker B: Well, so at this point, there's literally no manager anymore. Right.
00:44:03.682 - 00:44:08.826, Speaker A: I think what you're assuming is basically there's a. Let the manager take the risk while they're.
00:44:08.890 - 00:44:12.834, Speaker D: There is a single pool. In this case there is a single pool.
00:44:12.914 - 00:44:19.034, Speaker A: In this case there is a single pool. Then there will be. Over time, it will still a little bit of risk.
00:44:21.374 - 00:44:24.554, Speaker B: Maybe we should take it offline. I'm not following him. Apologize.
00:44:26.614 - 00:44:27.354, Speaker C: Good.
00:44:29.134 - 00:44:32.086, Speaker D: What stops the miners for colluding to more than 51%?
00:44:32.190 - 00:44:34.926, Speaker B: Say it again. What stops the miners from creating a.
00:44:34.950 - 00:44:36.742, Speaker G: Collusion to more than 51%?
00:44:36.878 - 00:44:50.386, Speaker B: Yeah, well, I mean, there's probably people in this audience who could answer that better than me, but I. I view it that there's kind of a gentleman's agreement in effect. So cultural norms would be another way to talk about it.
00:44:50.450 - 00:44:51.094, Speaker C: Yeah.
00:44:51.714 - 00:44:55.734, Speaker B: Although I say, like, if you implemented that winner take all rule, all bets would be off, in my opinion.
00:44:56.354 - 00:44:57.534, Speaker C: Other questions?
00:44:58.314 - 00:45:00.094, Speaker B: That's the first part of the talk. So.
00:45:05.474 - 00:45:50.420, Speaker E: Somehow, under all the. My area, so sorry. There's some kind of assumption of ration, some kind of rationality underneath rationality. But, you know, this is a byzantine environment and the rationality is not always the real assumption of minors or maybe incentives that are hidden. Is there some kind of resolve implicit about the kind of incentives that would break any. You know, there is something about rationality built here, or you just have a step function in a sense that it's good.
00:45:50.452 - 00:46:07.574, Speaker B: That's a good question. I'd have to check this offline. But you could imagine trying to extend the results by saying you only want civil proofness among rational parties and you only want collusion proofness among rational parties, and you don't care what the other people do. It's possible something similar would be true, but I'd have to go through it.
00:46:09.914 - 00:46:17.970, Speaker H: There's some kind of cost to doing this mining pool. Right. And minors have different levels of risk aversion.
00:46:18.162 - 00:46:21.154, Speaker E: So have you thought about how those.
00:46:21.194 - 00:46:29.950, Speaker H: Different levels of risk aversion might influence whether my want to join in this way or not, or someone could make more money in the long term by deviating.
00:46:30.022 - 00:46:37.394, Speaker B: That's a good question. I think that question probably becomes particularly interesting when you have multiple mining pools and you're thinking about how do people decide which one to join?
00:46:38.054 - 00:46:42.914, Speaker H: Or if there's one pool to leave the pool, is what I was thinking to.
00:46:44.374 - 00:46:56.370, Speaker B: Right. I mean, so here in the pool version, the degree of your risk aversion actually no longer matters in the limit. If you're getting deterministic rewards, there's no uncertainty to prefer or not prefer slightly.
00:46:56.402 - 00:46:59.578, Speaker H: Lower rewards because the overhead of creating this pool.
00:46:59.746 - 00:47:04.090, Speaker B: Right. So there's going to be some transaction fee, which I'm sort of ignoring, but.
00:47:04.242 - 00:47:07.122, Speaker H: That'S the difference, I guess. That's what I'm asking.
00:47:07.178 - 00:47:07.394, Speaker C: Sure.
00:47:07.434 - 00:47:21.404, Speaker B: So, I mean, I guess in a sense you could, you know, if it was costless to bring it into the chain, you could say this is eliminating the middleman. And now people would strictly prefer actually to just go direct to the protocol as opposed to a mining pool, for example. So that was not in my model, but I agree with it.
00:47:21.564 - 00:47:24.380, Speaker A: Even if it's costly to do this on chain, there's no way to avoid.
00:47:24.412 - 00:47:27.764, Speaker B: The cost, even if you go on another. That's true.
00:47:27.884 - 00:47:33.464, Speaker H: I guess competing chains, for example, a miner would make more reward in a chain that didn't do this.
00:47:35.284 - 00:47:41.752, Speaker D: So there are situations where people are just the opposite, where they really prefer risk.
00:47:41.868 - 00:47:42.952, Speaker B: We're seeking. Yeah.
00:47:43.088 - 00:47:44.324, Speaker D: Playing the lottery.
00:47:44.944 - 00:48:04.104, Speaker B: Yep, yep, yep. That's true. So, actually, I was tempted to put this on the slide, but I didn't, so I'm glad you brought it up. So there's also the notion of a risk seeking agent, which just means you was convex instead of concave. And in fact, the uniqueness result is still true for risk seeking minors, actually. So it's really risk aversion that breaks it.
00:48:04.224 - 00:48:10.820, Speaker C: Yeah. Should we move on? Great.
00:48:10.932 - 00:48:44.326, Speaker B: Oh, my goodness. All right, so a tiny bit about, again, incentive compatibility. That's kind of the mantra, but this time in the context of mining pools, directly studying mining pools, and specifically, we're going to be looking at a single mining pool and incentives for the participants to report or not report partial and full solutions. We've already talked a lot about mining pools. I think I'll skip it. This is the usual distribution of the bitcoin mining pools circuit yesterday. I want to think about implementations which are along the lines of what we talked about in the first part of the talk, where miners report both so called partial solutions and full solutions.
00:48:44.326 - 00:49:05.614, Speaker B: Full solutions are what you really want. So that's going to be like a block which can be added to the bitcoin blockchain. Right now the hash has at least 75 trailing zeros or whatever. Now, when the pool. So the pool has a bunch of miners working together, striving to find a full solution. When a full solution is found, everybody celebrates. The pool gets to get the block reward and then distribute it somehow.
00:49:05.614 - 00:49:54.984, Speaker B: The incentives, it's intuitive that you want to distribute it in a way that encourages people to bring as much mining power to the pool as possible. But how do you measure how much mining power someone brought to the pool? Well, that's what you use the partial solutions for. So those are just solutions to an easier version of the crypto puzzle. Say you want at most 65 trailing zeros of the hash. So now, if you're a non trivial miner, even if you're not the lucky one that finds the full solution, you'll find a bunch of partial solutions along the way, and you have the opportunity to show your work to report those partial solutions to the pool, who can then use that in determining what fraction of the block reward you get. So I'm going to use capital D to denote the difficulty between the easy and hard versions of the crypto puzzle. So, in between two different full solutions which really do authorize a block, we're expecting d partial solutions in between.
00:49:54.984 - 00:50:40.234, Speaker B: And again, the question won't surprise you now to hear that. I want to know what are the incentive compatible ways of doing this? And again, I'm going to look at that question quite narrowly. I'm going to think about just a single pool, so there's no pool hopping or anything like that. And I want to think about the only two strategies that a miner has is they can either report all of their solutions full and partial immediately, or they can do a withholding attack. I'm only going to address withholding attacks. Your intuition may say, why would you ever withhold a share a solution in any reasonable mining pool? But we'll see that even with very natural ways of doing it, you do not have even this form of incentive compatibility. So this definition is already interesting to ask about when you have it and when you don't.
00:50:40.234 - 00:51:32.694, Speaker B: All right, so what's the design space? Well, think of it as basically the same as the first part, although we'll go a little bit beyond this if there's time. So, you know, so in an epoch, a number of partial solutions come in, followed by a full solution. For now, let's think about reward functions, where the reward depends only on the number of partial solutions contributed by each of the miners. This is throwing out some information that the mining pool has, like for example, the order in which they were reported. But for now, let's just accept that, okay? There's plenty of natural rules where you only look at the partial solution counts. And by the way, a full solution counts as a partial solution as well. So within this family that do not depend on the ordering of the reports, just on the numbers on the counts, you actually can give an exact characterization of which reward functions are incentive compatible and which ones are not.
00:51:32.694 - 00:51:53.186, Speaker B: I'm not. So this is in the paper. In the interest of time, I'm going to skip this and instead I'm going to move on to some specific reward functions which are very natural, some of which are incentive compatible and some of which are not. And just know that in the background there's some general condition which tells you when such a function is incentive compatible and when it isn't assumed that there's.
00:51:53.210 - 00:51:54.734, Speaker F: No cost in mining, right?
00:51:55.554 - 00:52:04.894, Speaker B: Yes. I'm assuming you have a sunk cost as far as your mining equipment. So you're there, your machines are on, you're going to leave them on. And the question is just what do you do with what you find?
00:52:06.354 - 00:52:07.174, Speaker C: Correct? Yeah.
00:52:07.274 - 00:52:10.246, Speaker B: So there's nothing about investment or effort.
00:52:10.350 - 00:52:15.766, Speaker F: Not reporting, I'm not losing the power, there's no costing what I wasted for.
00:52:15.910 - 00:53:03.684, Speaker B: So the reason the delay is not to save on electricity costs or something, it's going to come from other places. So I think what will be easier to understand is some concrete examples, some of which are ic, some of which are not. But there is a general characterization, if you want it. All right, so one very natural thing is exactly the same allocation rule, the reward function we were talking about in the first part. So eventually a full solution comes in and terminates the epoch. And so here the mining pool looks at the number of partial solutions contributed by everybody and splits the block reward accordingly. Is this incentive compatible? Well, perhaps counter intuitively the answer is no, actually this is not incentive compatible and it's a little bit subtle.
00:53:03.684 - 00:53:26.556, Speaker B: So let me sort of slowly explain why. Remember what incentive compatible means. That means whenever you find a partial solution, you should report it. Whenever you find a full solution, you should report it immediately. There's no problem with partial solutions. If you ever find a partial solution and you delay it, the only thing that can happen is you might get scooped. Someone else might find a full solution terminating the epoch and your partial solution is lost.
00:53:26.556 - 00:53:42.992, Speaker B: So there's no upside, there is a downside partial solution is not a problem. So it's really about full solutions. So to think about this, I want you to think about all of the solutions reported by all the miners in this pool, partial and full, over some period of time.
00:53:43.128 - 00:53:43.952, Speaker C: Okay?
00:53:44.128 - 00:54:16.824, Speaker B: There's once in a while a full solution. We expect there to be capital d, say 1000 partial solutions between each consecutive pair of full solutions. Now of course some of them will be bigger, some of them will be smaller just out of the variance. Now here's the question I want you to think about. So we have a bunch of epochs in a row. Suppose I told you exactly one of these partial solutions is yours. Do you care which one it is? Yes you do.
00:54:16.824 - 00:54:48.344, Speaker B: You're rooting that your partial solution happens to be in one of the unusually short epochs with not many other partial solutions. That's because it's the proportional allocation rule. So if you're in an epoch that has only ten different partial solutions, you get 10% of the reward, as opposed to if you were in a typical one that had 1000. So that's an observation. All else being equal, miners prefer to have their partial solutions appear in short blocks.
00:54:48.784 - 00:54:49.176, Speaker C: Okay?
00:54:49.200 - 00:55:34.024, Speaker B: So how can you take advantage of that? Well now suppose you're happily mining away and you find a full solution. Moreover, you find a full solution very early within an epoch, because you're expecting 1000 partial solutions to be found before a full solution. But you find one after only 100 partial solutions have been reported, you have the option of reporting the full solution immediately. That would terminate the epoch, start a new one, new epochs. So any partial share that then you then report find later will belong to a new epoch which has expected length, capital D. So the partial solutions you compute in the future will have an expectation, a payoff of one over capital D. That's if you report immediately.
00:55:34.024 - 00:56:27.182, Speaker B: What else could you do? You could say, you know what, let me stay quiet. I'm going to wait till there's 200 partial solutions reported and only at that point will I report my full solution. How is that helpful? Basically what that does is it smuggles whatever partial solutions you would have found at the beginning of the next epoch and brings them back into the current short epoch. So whatever partial solutions you would have found in the first hundred slots of the next epoch, now all of a sudden, because you've delayed your reporting, it's actually in this current epoch which is still going, and this epic is short. Even after the extra 100, you're only waiting 200 slots, factor of five better than the average. So you're super happy that you've smuggled these partial shares from a sort of typical block into a block that you know is short. So that's the basic.
00:56:27.182 - 00:56:51.864, Speaker B: That's what really drives the failure of incentive compatibility. There's other details you have to take into account, so there's also the risk that you get scooped that someone else finds a full solution. So you have to incorporate that. Turns out it also matters what fraction of the current partial shares are yours compared to your hash rate. But there are settings of all of these parameters so that indeed, you are strictly incentivized to wait as opposed to immediate reporting of a full solution.
00:56:53.044 - 00:56:54.252, Speaker C: I mean, there's also a very sort.
00:56:54.268 - 00:57:02.824, Speaker H: Of selfish mining thing, right, where I just want to keep going until I see that someone else might have found a block and then I can broadcast mine and hope to race.
00:57:02.944 - 00:57:14.604, Speaker B: Right, so this is even orthogonal to a selfish mining attack? Yeah, I mean, you sort of need the. I mean, it would be at the pool level that you'd execute the selfish mining attack, I think, most effectively.
00:57:15.384 - 00:57:20.600, Speaker H: Like mining extra blocks here. I'm talking about mining partial shares, like continuing to mine partial shares.
00:57:20.712 - 00:57:22.920, Speaker B: That's exactly what I'm talking. That's exactly the reason you withhold.
00:57:23.072 - 00:57:25.652, Speaker H: So, yeah, sort of the same as solvers.
00:57:25.788 - 00:57:37.024, Speaker B: Well, you're working on the same crypto puzzle as before, right? So the new partial shares you're trying to generate are still for that same crypto puzzle. So it's not. So you're not tricking anyone else into solving the wrong problem. So that's kind of a basic difference, I would say, yeah.
00:57:38.124 - 00:57:39.052, Speaker C: Okay, good.
00:57:39.108 - 00:58:09.192, Speaker B: So not incentive compatible. Could anything be incentive compatible? Well, yeah, sure. Consider the pay per share reward function, where the payment you get for a partial solution is just fixed. What do you fix it at? Well, for example, you could fix it at the amount so that the expected payout in an epoch is equal to the reward you have to pay out to one here. There's really no reason to ever delay. It's all downside. The only change that could happen is that your partial solution gets invalidated by someone scooping you.
00:58:09.192 - 00:58:49.590, Speaker B: So it's definitely incentive compatible. The obvious weakness is that it is only budget balanced in expectation. In short epochs, this pool will run a profit. In long epochs, this pool will run a deficit. The expectations are okay, but it's not guaranteed to be budget balanced epoch by epoch. And actually, if you think about it, there's actually a pretty serious sabotage attack against this as well, because of the expected budget balance property so that leads us to the natural question, can we get the best of both worlds? Incentive compatibility like we have in pay per share and guaranteed budget balance like we have in the proportional rule. And so this paper, I forgot to say.
00:58:49.590 - 00:59:25.534, Speaker B: So this is joint work with Dan Bonet, who's at Stanford, Joe Bonneau at NYU, and ocher Shriver's, who's at Facebook. Okay. Appeared in financial crypto a few years ago. So that paper includes a proposal for getting both, for getting both IC and budget balance. And it's very simple hybrid scheme of the two we've seen so far. When an epic starts, you start out doing paper share, you just pay one over d for each partial solution that you see. If you get to the point where you are about to run a deficit, if you've seen capital D partial solutions so far, you flip a switch and you change over to proportional.
00:59:25.534 - 00:59:36.226, Speaker B: So proportional was not IC. So why should this be IC? I mean, the paper share part is fine.
00:59:36.290 - 00:59:36.522, Speaker C: Okay.
00:59:36.538 - 01:00:00.634, Speaker B: No incentive issues there. But remember, the whole reason proportional failed to be IC was because miners wanted to smuggle shares into blocks that they knew were going to be short. We only switch over to the proportional rule when we know the block is going to be long. It's going to be d or more. So that incentive goes away because the current block is guaranteed to be long. There's no reason to not report immediately. So that's where IC comes from.
01:00:00.634 - 01:00:27.010, Speaker B: There's an obvious complaint that this is not budget balanced. It's only weekly budget balanced. In short epochs, the pool will run a profit. So if you don't like that, if you want exact budget balance, you need to somehow redistribute that residual reward as well. One way, not the only way. One way you could do that if you wanted, would be anything left on the table. The residual prize, you could give that to the miner who reported the full solution and ended the epoch.
01:00:27.010 - 01:00:49.280, Speaker B: For example, it's again not a perfect solution because now you've reintroduced some of the variants you were trying to get rid of. But it's still the case in this hybrid scheme that roughly 65% of the rewards or so get smoothed out just as well as they would in any other mining pool. All right, so I think I'll put the open questions on the slide, but otherwise I think I'm out of time and I'll stop there.
01:00:49.352 - 01:00:49.964, Speaker C: Thanks.
01:00:57.244 - 01:01:16.544, Speaker D: Yeah, so I think I understand, but I wonder, what about if you make the reward proportional to how hard it was to do it? Like so for example, you made all these partial things the same, but you never gave more for getting the full thing. And you can imagine something between where you kind of get more zeros than you get.
01:01:18.564 - 01:01:35.858, Speaker B: I'd have to think about it. That's a very nice suggestion to have sort of, you know, as many levels of difficulty as you want. No, so you're right. So I mean in this model the assumption is all you have are partial shares and full shares. And so it would enrich the design space to use more information, possibly in an interesting way.
01:01:36.026 - 01:01:36.734, Speaker C: Yeah.
01:01:37.754 - 01:01:39.466, Speaker D: Do you have concrete numbers?
01:01:39.570 - 01:01:42.434, Speaker F: How much miner can improve the situation?
01:01:42.554 - 01:01:47.534, Speaker B: Oh, good question. No, that's a very natural question that we did not do that.
01:01:48.954 - 01:01:50.040, Speaker F: Can you repeat the question?
01:01:50.122 - 01:02:07.864, Speaker B: The question was did we analyze? So all I showed you was a failure of incentive compatibility. The only claim was there exist situations where it's strictly better to withhold than to report immediately. And Itai's question was can you quantify how much more, which is types of questions I really like to study, but we didn't study that for this.
01:02:08.884 - 01:02:13.904, Speaker D: There's like reward schemes, like for example paper last and shares. This.
01:02:16.804 - 01:02:38.164, Speaker B: Paper last and shares has some, some of the similar problems is proportional actually. In what sense? Why there's again, there's some incentive compatibility issues with paper elastic. It's related. So it's, again, we should talk about it offline. It's a little technical, but part of what's going wrong with proportional is also going wrong with paper last n shares.
01:02:41.304 - 01:02:47.326, Speaker D: In the first part of the talk, where did you use that? It was not a proof of stake, but it was a proof of stake.
01:02:47.470 - 01:02:47.870, Speaker C: Yeah.
01:02:47.942 - 01:03:29.032, Speaker B: So in the first part the theorem would hold for any proof of stake system if the way that you distribute rewards depends only on the current stakes as opposed to some richer function of the protocol history, like whether you had staked something in the past. Because if you think about it like the input to our reward function was just the hash rates. I didn't give you the information to talk about the history. Say it again. Sure, yeah, so, right, so even in a proof of work context, the assumption here is that you're using only the hash rates of this epoch to do the reward redistribution. That's really the key thing. I guess I would just say that.
01:03:29.032 - 01:03:37.068, Speaker B: So I think you're right. That's probably a more natural assumption in a proof of work context than a proof of state context. But you're right, it's not proof of work proof of stake per se. I think that's a good point.
01:03:37.156 - 01:03:39.292, Speaker D: The rewards only depend on what happened.
01:03:39.308 - 01:03:42.744, Speaker B: Just now, the fraction of whatever we agree is important.
01:03:46.484 - 01:04:14.554, Speaker F: The second part is essentially you touched on. There is this notion of random incidence, random variable. When you come to some process, and the process itself has intervals. Okay? If the intervals are all the same size, then you don't care if the interval is a variation. You expected time until the end. Now, this is all the analysis, and that's what's essentially.
01:04:14.594 - 01:04:20.494, Speaker B: Yeah, no, it's a little like an optimal stopping problem or something. What was the name that you said? Okay, thanks.
01:04:23.914 - 01:04:25.954, Speaker C: How about a break? Thanks.
