00:00:00.200 - 00:01:07.056, Speaker A: Thank you. So I will be basically continuing talking about some things that Paul already started talking about, which is the kind of deferred acceptance auctions that we proposed for FCC, but more general theoretical properties or whatever properties we have been able to find. Now, if you missed Paul's talk and you can ask questions, but maybe it's even better if you can catch up later with me. Okay, but just to summarize briefly. So the problem of FCC was, one part of the problem is designing a reverse auction where you will accept broadcasters bid to go over the air. And there are about 2500 broadcasts, tv stations in the US that are eligible to participate in the auction. And those stations that we don't buy have to be retuned to different channels, and they have to satisfy a bunch of interference constraints when we retune them.
00:01:07.056 - 00:01:45.274, Speaker A: So the constraints may also, there's kind of like a graph, but they're also adjacent channel constraints, and the constraints depend on which channels they're assigned to. So there are about 600,000 constraints if you, I describe all of them carefully. So that's a problem for the FCC. Now I want to introduce some general notation and talk about the problem more generally. So you have a set of end bidders. So they're going to be single minded bidders and stations for the FCC, the payoff of each bidder here. So the bidders are bidding to sell.
00:01:45.274 - 00:02:24.274, Speaker A: Okay, so if they lose the auction, that means they don't sell anything, but they keep to enjoy the value Vi from whatever they don't sell. So in our case, they just keep. The losers are the ones who remain broadcasting, and Vi is their value from broadcasting if they lose the auction. So that's what they lose. If they win, they get to sell. And instead of enjoying value Vi, they just get the payment PI from the auctioneer. Okay, so now the bidders here have very simple utility functions, but the complexity comes from the broadcasters, from the auctioneer's feasibility constraint.
00:02:24.274 - 00:03:24.014, Speaker A: So this is this complicated set. It's a set of sets. So f is the family of subsets of bidders that could be feasibly accepted. But here, what it means is that the sets a, such that they're complements, can all be simultaneously assigned to some tv channels that remain while satisfying all the interference constraints. So that's this complicated set we have to deal with, which we cannot even describe very well. So now, of course, as Paul said, can we run an approximate victory auction for this setting? That really seems problematic, because the problem, of course, in the auction, you want to choose winners to maximize the total value. Given this constraint that we have to be in this complicated feasible set, and then we have to calculate the payments to the winners by subtracting two different values of this problem.
00:03:24.014 - 00:04:13.268, Speaker A: This cannot be calculated exactly. The approximation is okay, but really creates big noise in the prices. And furthermore, even if you somehow were so smart that you were able to, some people suggested, let's do some kind of calculation like NASA does, where people in their home computers could be running programs that do the computations for optimal channel assignment for stations. But I think there's some problems for the government doing it. But also, people would not really understand or trust that the government is doing it correctly. And in experiments, people don't understand, even if it's like the simplest possible victory auction, which is just single item sealed bid, second price auction, people still don't bid truthfully there. They don't understand that it's optimal to bid truthfully.
00:04:13.268 - 00:04:44.592, Speaker A: Okay. But also this auction, another problem that I will actually focus on. This kind of sealed bid auction will require bidders to announce the exact values which they may be reluctant to do, or they may not even know what their values are. So we would ideally prefer an auction where bidders don't have to reveal everything about their values. Okay, so the solution that we're considering is a clock auction, where we start with opening prices we hope are sufficiently high to attract almost everybody to participate. Okay? The prices are reduced to all stations. There's a big question.
00:04:44.592 - 00:05:25.696, Speaker A: Okay, how do you reduce the prices? But the simple suggestion by Astro FCC, what they decided is the price will all be just reduced proportionately. So it's a very simple algorithm. However, you can only reduce price to a station that could still be feasibly assigned a tv channel, while the other stations already assigned channels could be repacked. So this is actually a hard problem. And this is where Kevin and his team come in, and they have really worked really hard to solve this problem, most of the time within seconds. Now, of course, sometimes you may still not know the answer to this problem. Is it yes or no? In that case, we just treat it as no.
00:05:25.696 - 00:06:09.912, Speaker A: And we cannot reduce a price to somebody if we cannot find a feasible way to assign them if they reject the price reduction and exit the auction. Okay, so this actual design was proposed by a group of economists already in 2012 to FCC, and that was eventually adopted. Okay? Now I want to give you a simple example of this auction. But unlike Paul, I actually want to just throw an example that's a non metroid example. So just to see how it works in this kind of strange situations. So this is a case of complementarity, where these are the three stations and there's only one channel to assign them. And they, you see that the central station interferes with both a and b, and a and B are each interfere only with the central station.
00:06:09.912 - 00:07:07.124, Speaker A: So here, in a sense, it's a complementarity between stations a and b, because, you know, we can assign them together, or if we assign c and then we don't assign a or b, these are basically our two best options. Of course, we could try something else, but it could be worse. So basically, the choice is between a and b together or c. Now, in this clock auction, we offer, there's a value of a clock that starts, let's call it q, starts at a high level, and the stations are offered prices that are proportional to the clock. So the proportionality constant, we call them volumes, w a w b w c. So as the clock falls down and eventually one of the stations will say, no, I don't like that price anymore, I want to exit, drop out. So each station, each bidder I has a dropout point qi clock value at which it wants to exit, which is simply its value divided by its volume.
00:07:07.124 - 00:08:00.578, Speaker A: Okay? And now, of course, the outcome depends on this point. So if the station that drops out first is station C, then that means a and b become winners because you can no longer feasibly add them, and their prices are determined by the dropout point of station C. But otherwise, if one or b exits first and basically c becomes a winner, then the other of the stations will be able to exit. And so that's how the clock will run down to something to zero, and then the other one of those peripheral stations will exit, and that's the end of the auction. Okay, so that's how the auction is supposed to work in this very simple setting. In this setting, is it obvious that if a exits first, that C wouldn't exit next? Wouldn't allow it because it wouldn't be feasible? So at that point, if somebody is not feasible to exit, then the price is no longer dropping, it's frozen at that point, and they become winners. So it doesn't follow the clock.
00:08:00.578 - 00:08:22.702, Speaker A: Yeah. We are not allowed to reduce it because otherwise, if it also wants to exit, we are in trouble. Okay, any questions about this? Supposed to be wc times the maximum in the last row. In the last row. This is over here. Yeah, it's wc times the maximum. Yeah, wc times.
00:08:22.702 - 00:08:27.022, Speaker A: Okay, sorry. Okay. Yeah, you're right. You're right. Sorry. Okay, both. That proves that you read it.
00:08:27.022 - 00:08:55.370, Speaker A: So that's good. Okay. All right. So now, what are the nice features of this kind of auction? Well, obviously stradgy proof, unlike the weaker auction. And Shang will talk more about this. Also, it's group strategy proof. Now, how do we see it, actually, if you think about this example? So, the kind of problematic case for group strategy proofness is when two winners can affect each other's prices.
00:08:55.370 - 00:09:25.056, Speaker A: So they could still be winners, but each winner could increase the price of the other winner. So that would be Pareto improving deviation. So this here cannot happen. So when stations a and B win together, their price is determined only by station C. So they cannot really find any way to find this apparatus improvement. Also, these auctions preserve business privacy. So loser will actually have to basically report his exact value, because the point at which he drops out determines his value.
00:09:25.056 - 00:09:47.746, Speaker A: However, winners only need. They don't need to report exact values. They just need to say, yes, I'm willing to accept that price. And in some sense, we can show this is actually. So I'm going to show that this is the best way, really the most we can do about preserving revenge privacy. Okay. Now, these auctions, also, this auction does not require exact optimization, so it can be done relatively fast.
00:09:47.746 - 00:10:32.156, Speaker A: And also, Paul talked about the efficiency of this auctions. They could get close to efficiency. But another thing that's kind of important to us is that they can accommodate goals other than efficiency reasonably well. For example, this auction can be tweaked to make sure that we satisfy a budget constraint. So remember the supply demand picture that Paul talked about? So it actually can implement it very easily by saying, well, if you run this auction, given some revenue target and the cost turns out to be higher than the revenue that we obtained from the forward auction, then we can just add more channels and continue running this auction, just reduce prices. So that preserves strategy proof. The overall thing is strategy proof, okay? And with that way, we guarantee that we always have budget balance.
00:10:32.156 - 00:11:29.170, Speaker A: Okay? Now, you can also add some expected cost minimization, because maybe you care about costs, not just about efficiency, because efficiency might be too costly anyway. And you know the Myers and stuttersweight theorem, that if, because this is a two sided market, you cannot expect to get perfect efficiency here, because that would require you to subsidize. So if you cannot subsidize, that would be, you will start caring about cost reduction, and so that we can tweak the auction for that purpose. And also, there is a sense in which the auction's cost is not too high in the sense that if you, there's a kind of revenue cooling result, that if you use a paid as bid auction, then you'll get an equilibrium with exactly the same cost. Okay, so let me. So these are all the features, but I'll focus just on some of them. And now one, I think useful, very simple but useful thing is just to compare it to the victory auction for exactly the same simple setting.
00:11:29.170 - 00:12:04.830, Speaker A: So what does the victory auction tell us to do here? Well, the victory auction tells us, of course, to optimize. And basically, if stations a and B joint value exceed station cs, then station C should win. And we assign station a and B to broadcast, and station C will get the payment equal to the sum of the values of the two stations. In the opposite case, stations A and B will win. Each station will be paid the externality it creates on the broadcast value of the other stations. So station a will get paid vc minus VB and B will get paid vc minus VA. So that's a weak auction.
00:12:04.830 - 00:12:31.564, Speaker A: It's very simple setting the. No computational problems. Okay, what are the problems with that? Well, actually, it turns out, and I will prove it, that this kind of outcome cannot be implemented with the clock auction. So there's no clock auction that will implement this outcome. And basically, whenever you have a complementarity, you cannot implement it with a clock auctioneer. There are no doubls. Or even more complicated, I'll give you a whole family of clock auctions and none of them will be able to implement this outcome.
00:12:31.564 - 00:13:13.944, Speaker A: Okay. Also, this is not group strategy proof. Why? Because stations A and B, when they win, they could actually make sure that they get the maximum possible prices by bidding zero, because they affect how much each other is paid. Okay. Also, this actually could be pretty expensive because in total, when stations A and B win, they actually get paid more than station C's value. Okay? Which seems like, why should they? Because we would just be able to buy station c. So actually, if you had a paid as bid optimizing auction, it's called the menu auction by Bernheim and Winston, then any Nash equilibrium cost cannot exceed VC, because in station c, we'll say, wait a minute, you would be able to buy me and I would make a profit.
00:13:13.944 - 00:13:32.332, Speaker A: It will just undercut stations in b. But this wicker auction does not allow that. So it becomes kind of too expensive. Okay? So also, it doesn't ensure budget balance. So we don't know in advance how much it will cost us. And now if you try to say, well, if the cost is too high. Let's reduce the clearing target.
00:13:32.332 - 00:14:08.876, Speaker A: Then the overall strategy proofness will become violated, so there is no way to tweak it to achieve guarantee some budget balance. Okay, now here, as I said, I'll describe a whole family of clock auctions. So this is a general family descending clock auctions, or they're not the only kind of clock auctions you can think of, but we call them deferred acceptance clock auctions because they all have this feature that bidders are active. They sort of provisionally accepted until they rejected. Once they're rejected, it's a permanent rejection. Okay, so here at denotes a set of active bidders in round t. Initially, everybody is active.
00:14:08.876 - 00:14:27.100, Speaker A: So a one is n. Now, h is set of all histories. A history is just in period t. Which bidders were active in period one and period two and so on. So basically it describes all the behavior of the bidders up to today. And it's denoted by a superscript t. Okay, and bidders can only exit, they cannot come back.
00:14:27.100 - 00:14:36.846, Speaker A: So the set of active bidders will only shrink during the auction. There's a pricing rule, basically says, given the history, what price are we going to exit?
00:14:36.910 - 00:14:38.514, Speaker B: They take their good with them.
00:14:39.614 - 00:15:06.104, Speaker A: Yeah. So here that means they get to broadcast, right? So that means they don't sell anything, they don't get paid. Okay. Okay, so the pricing rule, so it says, given every history, this will be the price offers to all the bidders, and the price has to be non increasing. So it's monoton declining. So today the price cannot, to any bidder cannot exceed the price that it received yesterday. Okay, now in each round, basically there's a stopping rule.
00:15:06.104 - 00:15:41.084, Speaker A: And so the way we formalize it, if the prices don't change to any bidder, then we stop, the auction is done. And the set of bidders who are now active are exactly a set of bidders, and each bidder is paid its current price. Otherwise, so somebody's price is reduced and the bidders can choose whether to exit. I mean, rationally, bidders whose prices are reduced may want to exit. The ones who haven't exited will be the set of active bidders for the next period. So that's a general mechanism. And actually all the results will allow arbitrary information disclosure to each bidder, as long as each bidder needs to observe his own price.
00:15:41.084 - 00:16:15.120, Speaker A: And actually the results, like strategy proofness, will not depend on what else they observe. They could observe everything or nothing in addition to the current price. Okay, now why is it obviously stradivity? It's obviously, obviously struggle proof, right? So, but actually turns out it's not so obvious how to formalize it. And that's where Sheng Wu will come in and tell you how to actually to formalize general gains. Now, in this auctions, it's actually easy because why would you exit when the price is above your value? You can always exit when it drops. So there's no reason to exit when it's above your value. Also, there's no reason to stay when it's below your value because it's never coming back up.
00:16:15.120 - 00:16:31.476, Speaker A: So you might as well exit right away. And for this, you don't need to understand how price are computed, only the price are going down and they cannot go back up. That's minimal understanding. That's required to figure out what you should do. Okay, now why is a group strategy?
00:16:31.620 - 00:16:33.172, Speaker B: People change their mind, they realize, oh.
00:16:33.188 - 00:16:57.164, Speaker A: No, I have my license, my wonderful license, and maybe I should have. Yeah, no, no. This of course seems that you know exactly your value. If you don't know your value, that's a whole different game. And maybe you, now, if you don't know your value, then if there's some maybe common value element, then you would learn from the information disclosure to figure out all other bidders are doing this. Then I'll update my value and all that. So that's not in the current model, but we have thought about this.
00:17:00.664 - 00:17:07.168, Speaker B: All right, can the value change with. Sorry. Value can change with time. When I see what other people did.
00:17:07.256 - 00:17:25.004, Speaker A: Not in this model, in real life? In the real model, it could. In the real life it could. And that will make it more complicated. But I'm not going to talk about it now. We can talk about it later. Okay. There are many things in real life that, as one somebody said, you get the reality for free.
00:17:25.004 - 00:17:57.332, Speaker A: So this is. Okay, so, all right, so now why is a group strategy proof? It's weakly group strategy proof. So there is no strictly parade improving deviation here. Why? Basically, when the coalition deviates, look at the member who deviated first in the auction. So how did he deviate? He either exited when the price was above his value or he stayed in the auction when the price was below his value. In both cases, he will not get the positive payoff. So he will be a guy, a member of the coalition who didn't benefit from the deviation.
00:17:57.332 - 00:18:15.636, Speaker A: Maybe he suffered, but he didn't benefit. Okay. Okay. Now the next thing that I want to focus a little more on is witness privacy. So this auction reserves witness privacy. Okay, so how do we formalize that this is a little bit computer science. I thought it might be interesting.
00:18:15.636 - 00:19:05.060, Speaker A: So, so here we have an allocation of alpha, which says for every value profile says who should be winning. So Alpha V is a set of bids who are winning for value profile v. Okay, so that's what we want to implement. And we have a communication protocol, which is extensive for mechanism and status that computes its allocation rule alpha. So the definition is this protocol satisfies unconditional winner privacy. If for any bidder and any possible values of the other bidders, for any pair of values of this bidder, for which this bidder would still win, given the other values, the protocol will finish in the same terminal node. That means, given that the bidder is winning, we don't learn any more information than what's necessary to prove that he is winning.
00:19:05.060 - 00:20:17.322, Speaker A: So if a bidder has two possible types, and both types should be winning, then the other bidders, even if they get together and they learn everything about what the bidder did, they would not figure out anything more than what's necessary to prove that he should be winning. So this notion was called unconditional privacy by brand and sandholm. Now, why is it unconditional? Because here we don't allow any kind of cryptography, so there are no private communication channels here, there are no bounded rationality that bidders cannot invert some functions or anything. So it's a pretty strong notion that even if the bidders, other than I can get together and everything can be shared, they still, their eye still does not reveal anything unnecessary about his value other than that he has to be winning. Okay, so the proposition is part one, a clock auction satisfies unconditional wind and privacy, and two, any allocation rule on the finite state space that is implemented on domain strategies with them. Unconditional winner private protocol is implementable with a clock auction. So basically, clock auctions essentially exhaust what can be done with this kind of requirement in mind.
00:20:17.322 - 00:20:59.980, Speaker A: Okay? Now why does a clock auction satisfy a conditional winner price? It's kind of obvious, because a bidder doesn't send basically any message until he becomes winning, so nothing is revealed about him other than that he is willing to sell at this price. Okay? And so that's why it satisfies us. Now, why is it true? Why is the converse true? Part two, that any allocation rule that's implementable in domain sages and has this in such a way, is implementable in the clock auction. So I'll just give you an idea of the proof. Well, we start with any protocol that implements allocation rule. And we're going to. The protocol is privacy preserving.
00:20:59.980 - 00:21:44.154, Speaker A: So it satisfies this UWP condition, and we replace it with a clock. Auction implements the same allocation rule, and we do it sort of in a forward induction kind of way by going on the histories of this protocol starting from the beginning. So I'll just show you kind of a typical history. So typical history of the protocol is reached on some product set of states. So that's kind of an important idea in communication complexity, right? So this is a rectangles idea, right? So that when people communicate information about the types and sequence. So what you have learned at any point is a product set, okay? So let's say bidder eye is the one who is moving at the 60, so he reveals something more about his value. Okay? Now here we make one more observation.
00:21:44.154 - 00:22:21.208, Speaker A: So the location rule must be monotonic because it's implementable on the nostalgia. That means that bidder eye is more likely to win when his value is lower. So here it's a procurement auction, so lower value is more likely to win the auction, okay? So that because of this monotonicity, there will be some kind of threshold value for bidder I, such that all this value and lower values could still win on the auction. And then all values above it are sure losers. They can never win anymore. I mean, of course, it could be an extreme case where everybody is a sure loser, or everybody could still win, but in general, there's some threshold like that. Okay? So let's put it in the picture.
00:22:21.208 - 00:22:37.124, Speaker A: So this is a set of. This is the product set. So the possible values of bidder I. And this is the possible values of the other bidders, okay? And so this is a product set. So it's a three by three set here. And the red dots are where bidder I could still win. And the blue dots are where bidder I is a loser.
00:22:37.124 - 00:23:46.926, Speaker A: So here. So this vi hat bidder could still win, okay? Bidder with values below vi hat would still win bidder. If his value is above va hat, he is a sure loser. Okay? Now, so this is, we partitioned the set of possible values in these two parts, okay? Now, basically, we can, instead of bidder I, sending some general message here, we can just use a clock auction approach where we reduce the price, drop the price of bidder I down to va hat. So what happens? And we do it step by step so that because everything is finite here, remember, this is a finite state space, so that the bidder, if his value is above va hat, he actually, if he drops out, the dropout point will exactly tell you what his value is. Ok, now the point is that the bidders whose type is below va hat, they must send the same message at this history because they could still be winning and they're not allowed, because we started with this privacy preserving protocol, these bidders are not allowed to reveal anything about their value because they could still be winners. Now because of that, really, when we do the clock auction thing, the clock auction stops.
00:23:46.926 - 00:24:19.104, Speaker A: We learn nothing about the bidders whose value is vihat or lower. But in the original protocol, we didn't learn anything about them either, because it was a privacy preserving protocol to begin with. So therefore this clock auction will reveal exactly the same information as the original protocol. Maybe more information. It might reveal more information about the losers, but it will reveal exactly the same information about the winners. Does it make sense? Somewhat intuitively. All right, so that's how the clock auction will reduce the price.
00:24:19.104 - 00:24:52.136, Speaker A: So now we learned if the biddish value is above va hat, so we learn exactly what it is. If it's va hat or lower, we learn nothing about it. Okay, now just a little bit. So the clock auction is of course a sequential auction. Now you might ask what is an equivalent direction mechanism? And okay, that may not be very important, we can skip it. But that's kind of how we started thinking about this problem. We can think about direct mechanism where the bidders just report their values with some allocation rule to be implemented and the payment rule, which pays something to the winners and nothing to the losers.
00:24:52.136 - 00:25:59.660, Speaker A: Now of course this mechanism, we know that the allocation rule has to be monotonic for the mechanism to be strategy proof. And also each winner has to be paid his threshold price, which is the maximum price under which he would still win. But of course, not every mechanism like, yeah, that would include everything, including wickery, but not everything like that can be implemented with a clock auction. So what can be implemented are mechanisms that are described by scoring, by an algorithm that uses scoring functions where for each, in every step of the algorithm, you calculate the scores of all bidders based on the bidder. I score is calculated based on his own value and the values of all the bidders that are already rejected, not on the values of bids that are still active and the score is not decreasing in your own bid. And what happens is that initially everybody is active and then in each round you iterate, rejecting the highest scoring bid. So you reject the high incorring bid and you do it until all the remaining bidders have zero scores in which case, you stop.
00:25:59.660 - 00:26:54.844, Speaker A: So, it turns out that this class of algorithms exactly characterizes what the clock auctions. Of course, these are direct mechanisms, and those are extensive form games, but the equivalent. So basically, you can think that these extensive form games correspond to a particular kind of heuristic algorithm, kind of like a greedy rejection rejection algorithm. Okay. All right. So now, so what are, what are the objectives for which these mechanisms could work? Well, well, as we said, at least, you know, we want to make sure that the solution is feasible. So here, as long as we have a feasibility checker that never makes a mistake where something is feasible when it's not, so then we are not going to reduce prices to guys who are not feasible to it, and then we ensure the solution is feasible.
00:26:54.844 - 00:27:46.646, Speaker A: Now, of course, also, as Paul said, and that was found earlier, if the set constraints had, or the set of bids that could be feasibly rejected as a metroid, then we just offer the same price to all the bidders and the price would be declining, and you actually implement exactly efficient allocation. So that corresponds to a greedy algorithm for a metroid. Okay, now in other case, like the knapsack problem, then you don't want to offer the same prices. Actually, the knapsack problem, you want to offer prices that are proportional to the volumes of these bidders. And then if the set of bids that can be feasibly rejected. Here is an abstract, and you can get a pretty good approximation. Now, in general, you can do lots of other things, minimize expected cost with independent values or with correlated values, as some papers on that.
00:27:46.646 - 00:28:29.564, Speaker A: Also, Tim Ralf Garden has several papers on various settings in which, examining how well you can approximate efficiency in various settings. Now also, in addition to efficiency, you can have budget constraint. And there are papers on budget balanced or budget constraint mechanisms, going back to, I think maybe the earliest, is Makafin 92 on double auction, that is budget constraint. So that would be an example of this grid here, because it can be represented as double clock auction. There are procurement papers under budget constraint that uses kind of greedy algorithm. There are cost sharing algorithms of Mulan and so on, which also are kind of special cases of this kind of clock auctions. Gradient algorithm.
00:28:29.564 - 00:28:47.324, Speaker A: Okay, now here, maybe like a few minutes left or two minutes. Two minutes. Okay, so just. Okay, so one more result. I'm done. So, optimizing clock auctions. Suppose you want to get an exact optimization in this setting.
00:28:47.324 - 00:29:25.542, Speaker A: So which optimal allocation rules? When is it true that an optimal allocation rule can be implemented with a greedy clock auction? So this is the question I asked in the beginning, like when you have complementarities, is it possible to use a clock auction to find an optimal allocation? So it turns out the answer is no. So basically, you need to have substitutes. So the proposition says, if an optimizing allocation rule is implementable with a clock auction on some finite set, then it has to have substitutes. Basically, as long as there are no ties. I don't want to deal with ties. So whenever there are no ties, the solution is unique. It has to have substitutes.
00:29:25.542 - 00:30:17.064, Speaker A: And just a very simple idea of the proof, why does it have to have substitutes? If it actually has complements instead of substitutes, then you will be able to find this situation where bidder I, when reducing his bid, will cause bidder j to win and because he would also be winning. So here, if bidder I reduces his bid from this point to this point, it would make him win, also would make bidder j to win. Now, because it's optimization, that means that bidder in j should also be winning. Here, when the sum of their values is the same, they shouldn't be losing. And so we have the situation where the clock auction doesn't work because starting at this point. So here I and j shouldn't be winging. But you cannot reduce the price of bidder I or bidder j because if you do, then bidder I would drop out when his value is here, bidder j would drop out on his values here, but they could still be winning.
00:30:17.064 - 00:30:32.524, Speaker A: So it's not safe to reduce the price because then we would lose somebody who is supposed to be actually winning. So the clock ocean doesn't work. Okay, so, all right, so that's it. So basically I'm done. All right.
00:30:45.824 - 00:31:08.372, Speaker B: So it's not exactly what you're talking about. But why could my value, my value depend? So suppose my value is 100. Are two stations, my competing station. Once the other station is out, my value is 140. And the other stations sold out at 120. Now my value is 140. I'm never going to sell out because the clock is 120.
00:31:08.372 - 00:31:09.548, Speaker B: How do you handle that?
00:31:09.676 - 00:31:18.824, Speaker A: Yeah, so if you have. So I don't have lead because here in the model, you own only one station in real life, so. Right. If you have.
00:31:21.004 - 00:31:25.090, Speaker B: My station, depends on how many other stations are there.
00:31:25.242 - 00:31:27.114, Speaker A: So the station sold out.
00:31:27.154 - 00:31:30.058, Speaker B: I have a much bigger market, and my value now is 140.
00:31:30.146 - 00:31:32.250, Speaker A: So it's not 120.
00:31:32.322 - 00:31:34.214, Speaker B: That's it. I'm never going to go out.
00:31:35.114 - 00:32:12.472, Speaker A: Well, it's not in the model, but in those situations, it's very important what the information disclosure policy is. So you may or may not know what exactly the others did. And so I haven't thought about your specific example, but there's a question of how much information. I mean, this model is completely relevant, what information you disclose. But in those situations it becomes important. You may tell them something, and or depending on what your assumptions are about values, you may want to tell them something, but not everything. Yeah.
00:32:12.472 - 00:32:20.632, Speaker A: The explicit answer will tell them some partition of like, how many stations exited in your area, roughly, but not exactly how many stations.
00:32:20.688 - 00:32:24.524, Speaker B: Even though there are no stations, my values go up and you're in trouble.
00:32:24.824 - 00:32:28.944, Speaker A: Yeah, yeah. No, I haven't thought about this particular thing, but definitely it's not on the module.
