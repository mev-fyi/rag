00:00:06.280 - 00:00:49.954, Speaker A: Hello, my name is Shaddin Dugmi, and I'm going to tell you how the matriarch secretary problem is equivalent to contention resolution. Let me start with a somewhat vague description of my main result. I show that two statements are equivalent. The first one is the matriarch secretary conjecture, which says that there is a constant competitive algorithm for the matrix secretary problem. The second statement concerns what is known as contention resolution, and it says that contention resolution is approximately as powerful in the online random order model as it is in the offline model. And this should hold for all correlated distributions, not just for product distributions. You might ask why this is interesting or useful to know.
00:00:49.954 - 00:02:10.924, Speaker A: Well, first of all, it tells us that the matriarch secretary problem, even though it features these adversarial weights, is actually equivalent to a natural stochastic problem, in particular the problem of contention resolution. Second, it tells us that online contention resolution, in the presence of positive correlation is actually the core challenge of the matriarch secretary problem. And hopefully this opens the door for a lot of the recent progress on contention resolution to be applied to resolving the matrix secretary conjecture. And finally, this tells us that the hard part of the matrix secretary problem, even though the problem features cardinal weights, the hard part uses only ordinal information about those weights. Now, to prove this result, I build on my recent work, which appeared in icalf 2020, and there I proved the forward direction of this equivalent, namely that the matriarch secretary conjecture implies correlated contention resolution in the random order model. And also I proved a weak converse of that which restricts contention resolution to a more restrictive model. So in this paper, I strengthened this weak converse.
00:02:10.924 - 00:02:52.270, Speaker A: I basically removed this clause, and therefore this establishes full equivalence of these two states. Now, for some background, the matriarch secretary problem was introduced by Babaev, Morlika and Kleinberg. Here you're given a matriid up front, and then an adversary assigns weights to the elements of the matriid. The elements then arrive online in a uniformly random order. And when an element arrives, the algorithm learns its weight and must decide on the spot whether or not to accept the element. The algorithm is constrained by feasibility. In particular, the accepted set of elements must be independent.
00:02:52.270 - 00:03:52.564, Speaker A: In the majority, we see an algorithm is alpha competitive if the expected weight of the elements it accepts is at least alpha times the weight of the offline optimum. Here, the expectation is over the random arrival order. This problem generalizes the classical secretary problem of Dinkin and captures many online settings that feature adversarial data arriving in a non adversarial order. The same authors stated the matriarch secretary conjecture, which says that there's a constant competitive algorithm for this problem for all matriids. A lot of work has gone into designing competitive secretary algorithms for many natural classes of matrioids. This includes the classes in this list and many more. But the general conjecture remains open, and the best known for general matroids is a competitive ratio of o of log log rank due to lachish.
00:03:52.564 - 00:04:47.524, Speaker A: I'm going to note that the Metroid psych injector is an information theoretic statement and doesn't say anything about computational complexity, and the same is going to be true for the results I'm going to present in this talk. So I'm going to relate the matrix secretary problem to something called contention resolution. Informally here, your task is as follows. Someone gives you a draw from a random set which is guaranteed to be feasible on average for your constraint, also known as feasible ex ante, and your job is to convert it to a set which is feasible always or feasible x post. Let's make that a little more formal. There are three sets of inputs to a contention resolution problem. First, you're given the set system, which for us is always going to be a matriid.
00:04:47.524 - 00:05:19.704, Speaker A: Second, you're given a distribution capital D over sets of elements. And I don't really care so much about how this distribution is represented, because my results are all going to be information theoretic. So think of it as some description of the distribution, but we don't care so much about what it is. And third, you're given a draw capital r from this distribution D. So R is a set of elements. I'm going to refer to it as a set of active elements. So if an element is an r, I say that element is active.
00:05:19.704 - 00:06:13.680, Speaker A: Now the output here is supposed to be a subset of the active elements that is feasible for the set system. So for us it'll be independent of the matrix, independent in the matriid. So you can think of a contention resolution algorithm as throwing away some of the active elements in order to ensure feasibility. And remember here we're only considering packing set systems. So by throwing away elements you recover feasibility. Now, the simplest setting here is the offline input model where the set of active elements capital r is given all at once. Also interesting are online models where the elements arrive in some order PI, and when an element arrives it shows up tagged with a bit that tells us whether or not the element is active.
00:06:13.680 - 00:07:11.104, Speaker A: And this is a stochastic bit, because a set of active elements is a stochastic set. Now, if an element is active, the algorithm gets to decide whether or not to accept it, and it must do so on the spot. Our focus in this talk is going to be the random order model, where this PI is a uniformly random permutation. An algorithm for a contention resolution problem, whether it's online or offline, is usually called a contention resolution scheme, and we judge such an algorithm by its balance ratio. In particular, we say the algorithm is alpha balanced for a particular distribution, capital d. If it satisfies the following guarantee for every element of the set system, the algorithm must select the element with probably at least alpha times the probability that the element is active. So, conditioned on the element being active, it should be accepted or selected with probability at least alpha.
00:07:11.104 - 00:07:57.930, Speaker A: Now, I should mention some notation here. So I'm going to use x sub I to denote the probability that the element I is active. So the vector x is a vector of marginals, okay, of the distribution capital d. So the probability that I is selected should be at least alpha times xi. Now, a contention resolution scheme is typically defined only for some distributions that are of interest, right? So, most prior work has focused on distributions that are feasible on average or ex antifeasible. And those are just. And what that means is that the vector of marginals is in the polytope associated with the set system, and restricting to these distributions is necessary for a constant balance ratio.
00:07:57.930 - 00:08:38.734, Speaker A: And that's not too hard to see. Well, it's necessary that this is be true, at least approximately. I guess most prior work also assumes that the elements are active independently, so these xi's are assumed to refer to independent probability events. And this, it turns out, is not necessary. And that's going to be a theme that's important for this talk. Let me now summarize some of the prior work on contention resolution. Contention resolution was formalized by Cicori, von Drakkens and Clusen, and it's been studied a lot since for various set systems and online and offline models.
00:08:38.734 - 00:09:42.134, Speaker A: However, most of the work so far has focused on product distributions, in particular ex antifeasible product distributions. However, those results typically extend to negatively correlated distributions for a suitable definition of negative correlation. Now, the reason there's, the reason contention resolution really took off is because it turns out that it's the technical core of a lot of stochastic decision making problems. And this is shown in a lot of reductions in literature. In particular, there's been reductions for many families of problems to contention resolution, and this includes all the families of problems in this list here. Now, if you read through the literature on contention resolution, you can glean the following summary theorem. If your set system is simple enough, then you can get a constant balance ratio so long as the distribution is ex antifeasible and it's a product distribution.
00:09:42.134 - 00:10:43.812, Speaker A: This turns out to be true whether offline or in any of the online models that have been studied, and these guarantees also typically extend to a negative correlation as well. For matroids, the picture is fully understood. So the best balance ratio offline and in random order is one minus one over e, and for adversarial order it's half. Now recall that we said that x anti feasibility, at least approximate x anti feasibility, is necessary to get a constant balance ratio. Therefore, one way to read the summary theorem is the following. Online contention resolution is as powerful as offline contention resolution up to a constant if all you care about is product distributions. Now, if you remove this qualification to product distributions, you would prove the matroid secretary conjecture.
00:10:43.812 - 00:11:33.774, Speaker A: That's one interpretation of my results in this paper. Now, even though a lot of this work has focused on independent distributions, it turns out that there are some interesting positively correlated distributions where you can get constant balance ratios. That's going to be important for my results. Let's now look at what happens when you have positive correlation. Let's look at worst case positive correlation first and convince ourselves that for arbitrary positive correlation there's not much you can do. So let's now think of we have a rank one matrix on n elements, and let's say all the elements are active simultaneously with probably one over n. Otherwise, none of them are active.
00:11:33.774 - 00:12:19.264, Speaker A: This is feasible on average, because the margin loads are one over n, which is in the matrix polytope here. But it's pretty easy to see that nothing nontrivial is possible. The best you can do is pick one of the active elements uniformly at random, and this gives a balance ratio of one over n, and it's clear that you can't do any better than that. However, there's some very interesting and useful examples where you have a lot of positive correlation, but still you can get a constant balance ratio. I'm going to show you one of those examples right now. Let's say again we have a rank one metroid, and let's say the elements have names one through n. Let's say the set of active elements is the set one through I with probability two to the minus I plus one.
00:12:19.264 - 00:13:17.372, Speaker A: Now, a simple calculation shows that this is x antifeasible because element one is active with probability one, two, element two, the probability quarter, and so on, and the sum of these numbers is at most one. However, you can also see that there's a lot of positive correlation in this distribution. If you take two elements, I and j, where I is less than j, the probability that j is active is to the minus j. But then if you condition on I being active, the probability that j is active goes up by a factor of two to the I, which is quite a bit of positive correlation. Even though there's all this positive correlation, you can still get a constant balance ratio, in particular a balance ratio of one, two, at least with an offline contention resolution scheme. And here's such a scheme. Just choose the largest integer in the set r of capital of active elements.
00:13:17.372 - 00:14:03.854, Speaker A: Okay? So when the set of active elements is one through I, just select element I. Now, to see that this is half balanced, all you have to notice is that when you condition on I being active, it's actually the largest active integer with probability roughly one, two. And this is just a consequence of these exponentially decreasing probabilities here. Not too hard to see. Now, even though this is offline, it turns out you can approximate it online up to a small constant using Dinkin's secretary algorithm. And this is also not too hard to see, because notice that you're trying to pick the largest of a bunch of integers that show up online. And it's exactly the kind of problem that is solved by a secretary algorithm.
00:14:03.854 - 00:14:57.234, Speaker A: I'm going to ask you to remember this example distribution, because it's going to be important for the rest of the talk. Okay, now this brings us to some of my recent work on characterizing offline contention resolution in the presence of correlation. Let me first establish some terminology. Let's say I fix a set system. I'm going to call distribution over sets alpha and contentious if it permits alpha balanced offline contention resolution. So this is just my shorthand for a distribution that allows alpha balance via a offline contention resolution scheme. Now, it turns out that alpha and contentious distributions admit a nice polyhedral characterization, and that's important for our results.
00:14:57.234 - 00:15:47.734, Speaker A: So here's a theorem that appears in my iCalp 2020 paper building on a very similar characterization of Chikuri, von Drach and zinclusin. Let's say you fix a matroid. Um, a distribution on distribution d on sets of elements is alpha and contentious if and only if it satisfies a finite system of linear inequalities. And this system of inequalities is indexed by a sub, by subsets of elements. So I don't want you to focus so much on the form of the inequalities. Just know that this is a polyhedral characterization of uncontensitive distributions for matrix. Now, one nice thing about this characterization is that if you stare at it long enough, you'll notice that it's a generalization of a famous theorem by Edmonds known as the matriid covering theorem.
00:15:47.734 - 00:17:04.454, Speaker A: So let's now get back to our main result and outline how we prove it. Let's remember the main result as I stated before, namely that the matriarch secretary conjecture is equivalent to the statement that contention resolution is about as powerful in the random order model as it is offline. So I'm going to change this second statement to a slightly more convenient form. I'm going to say that every matriid admits what I'm going to call a universal contention resolution scheme in the random order model. What does universal mean? It just means that you do about as well in the random order model as you can hope to do offline for every distribution. So there's a universal constant c between zero and one greater than zero, such that if you give this algorithm the description of an alpha and contentious distribution, and a draw from that distribution, then that algorithm achieves a balance ratio of c times alpha again when the elements arrive in a uniformly random order. So there's a weaker form of the second statement that's also equivalent, which basically says that all you need to do is do well for a specific alpha.
00:17:04.454 - 00:17:50.214, Speaker A: So here I say there exists an alpha and beta, a specific constant alpha and beta, such that every matriarch admits a beta alpha universal contention resolution scheme in the random order model. And beta alpha universal means that you achieve a balance ratio of beta for every alpha and contentious distribution. So it's enough to do well for a specific alpha, achieve constant balance for a specific alpha. So it's pretty easy to see that the second bullet implies a third bullet. The third bullet is just a special case of the second one. And what happens is that all you need is this weaker form of contention resolution for a specific alpha in order to establish the matrix secretary conjecture. And this is how all these three statements are equivalent.
00:17:50.214 - 00:18:49.224, Speaker A: I'm going to note that this result is information theoretic, and our reductions may or may not be easy to make computationally efficient. And it's not even clear at this point what computationally efficient means, because I didn't even tell you how you represent these distributions as input. So here are the two reductions, and these arrows are in the algorithmic sense. So the arrow from the top to the bottom just means that I use an algorithm for matrix secretary to solve universal contention resolution. This arrow on the right from the top to the bottom was already in my previous ical paper, and uses the fact that matriarch secretary essentially solves a dual of contention resolution. In this paper, I show the arrow here on the left from the bottom to the top. In particular, I use a universal contention resolution scheme to solve the matriarch secretary problem.
00:18:49.224 - 00:19:52.494, Speaker A: Turns out, to get this reduction to work, I need to break it up into three component reductions, and this is to overcome a series of technical barriers. So first I reduce the matriarch secretary problem to the matriid profit secretary problem, and then I reduce that to a generalization of a contention resolution, which I call labeled contention resolution. And then I reduce labeled contention resolution to the traditional unlabeled form of contention resolution. And I'm going to define these problems as I need them. Okay, let's now get to the proof. So I'm going to show you how to reduce the matriarch secretary problem to universal contention resolution, or alternatively, how to use a universal contention resolution algorithm to solve the major secretary problem. I mentioned that I have to break up this reduction, but for now, let's try and do it directly and see what happens.
00:19:52.494 - 00:20:37.994, Speaker A: I'm going to need an important definition due to cargo. This is the definition for the set of improving elements. Let's say you have a matroid with weights on the elements. I'm going to define the random set capital r of improving elements as the set that you sample as follows. First, let s be a set of half the elements chosen uniformly at random. I'm gonna call the set s the sample, and now define the set of improving elements as the elements that improve the offline optimal on s. So I is improving if it improves the offline optimal if you add it to s, or in other words, if it is in the offline optimal of the set s union.
00:20:37.994 - 00:21:26.244, Speaker A: I. Okay, so here's an easy fact about the set of improving elements. Basically, the set of improving elements hold half of the optimal weight in expectation. It holds half the weight of the offline optimum, and this is in expectation over the sample capital s. And this is easy to see by the fact that every element in the optimal is improving with probability one, two. So we can ask ourselves, what does the set of improving elements look like? What is its distribution? The easiest version of this question is what happens for the rank one matriarch? And let's say we have weights w one through wn in decreasing order. We already saw this distribution.
00:21:26.244 - 00:22:18.864, Speaker A: This is the distribution we saw earlier, where the set of elements that are active is the set one through I with probability one over two to the I plus one. So it turns out that the improving elements are one through I with exactly this probability. Now, we also saw that this set features positive correlation, but nonetheless it is half uncontentious. It turns out that that's not a coincidence. In my ical paper, I show that for every weighted matroid, the distribution of improving elements is half uncontrollable. And this is even though the improving elements feature non trivial positive correlation. The proof of this uses the polyhedral characterization of uncontentious distributions that I mentioned before.
00:22:18.864 - 00:23:07.264, Speaker A: I'm going to note that there's nothing special about the number half here. I could have defined improving elements for an arbitrary sample probability of alpha, and that's important for the result. But for illustrative purposes, I'm going to stick with alpha equals one two in this talk. Okay, let's now try to use contention resolution to solve the matriarch secretary problem. Let's say we're given access to a contention resolution scheme in the random order model that is universal in the sense that it gives us a constant balance ratio for all half uncontentious distributions. And this will include distributions like the improving element distributions we described before. Here's what you do for the matred secretary problem.
00:23:07.264 - 00:24:01.454, Speaker A: First, you do something that's pretty familiar for secretary algorithms. You observe the first half of the elements as they arrive online, and you don't select any of them, but you note their weights. We call this first half of the elements capital s, and we refer to it as the sample. Then in the second half, as the elements arrive, you try and note the elements capital r that improve the offline optimum on the sample, and you try to use your contention resolution scheme to resolve contention for the set capital r of improving elements. Let's make this a little more precise. So as the elements in the second half arrive for each one of them, you can check if it improves the offline optimum on the sample. And if so, you call it active, and you feed it as active into this universal contention resolution scheme.
00:24:01.454 - 00:24:51.474, Speaker A: And then you accept the element if and only if the contention resolution scheme accepts it. Now, let's remember that improving elements hold half of the offline optimum value. And also let's remember that improving elements follow a uncontentious distribution, in particular, a half uncontentious distribution. So our contention resolution scheme should therefore work for them. It should select each of them with constant probability. So since the improving elements hold a constant fraction of the optimum, and we select each of them with constant probability, then we should get a constant competitive algorithm for the matrix secretory problem. Or do we? It turns out there's a bug in this idea.
00:24:51.474 - 00:25:50.834, Speaker A: Here it is. So the traditional definition of contention resolution requires that you give the scheme a full description of the distribution upfront. In this setting, we don't have a full description of the improving element distribution because it depends on these unknown adversarial weights w on the elements. So for this reduction to work, we need our contention resolution scheme to work in a more restrictive model, where it only has a partial description of the distribution of improving elements at any point in time. And this is how things stood as of my ical paper. The first thing we do in this paper is that we fix this bug. So the problem was that the distribution of improving elements was unknown because we have this adversarial weight vector.
00:25:50.834 - 00:26:44.114, Speaker A: So we're going to instead assume that the weight vector is drawn from a known prior, and what that gives us is what is called the matriid profit secretary problem. It's the same as matrix secretary, except that we're given a prior capital w on weight vectors and we're guaranteed that the vector of weights, little w, is drawn from capital w. This problem was introduced and studied for independently distributed weights by signing et al. But we're going to need to allow arbitrary correlation in the weight vectors. It turns out that this relaxation actually doesn't change the problem too much. In particular, the matriarch secretary problem reduces to this correlated matriarch profit secretary problem at a loss of only a constant in the competitive ratio. So the problems are essentially approximately equivalent.
00:26:44.114 - 00:27:45.034, Speaker A: The proof is actually pretty easy here. It's just min max duality. We know that to do well for an adversarial weight vector, it's enough by duality to do well for a stochastic weight vector with an arbitrary but known prior distribution. Now, there are some technical details I'm ignoring here, but these only use us a constant factor. So now we've reduced the matrix secretary problem to the matriarch profit secretary problem, where we have prior information on the weights and therefore prior information on the distribution of improving elements. And hopefully this now makes it easier to use a contention resolution scheme to solve the matriid profit secretary problem. So we're going to now use the same blueprint we had before.
00:27:45.034 - 00:28:59.892, Speaker A: So we're going to assume we have this universal contention resolution scheme and use the same kind of algorithm, except that now we know that the weight vector is drawn from a prior distribution that we're given up front. So this is the same algorithm we saw before. Let's see now what happens. So, for a fixed weight vector, we know that the set of improving elements is drawn from a particular distribution, and we know that the expected weight of improving elements holds half of the offline optimum, and also the distribution of improving elements is half uncontentious. Now, when the weight vector is drawn from a priority, we just get a mixture of these improving element distributions, and linearity of expectation preserves the property that we still hold half of the offline optimum. Now, what happens to the uncontentiousness of the distribution when we mix it? It turns out that's also ok, because it's easy to show, using the polyhedral characterization, that uncontentious distributions are closed under mixing. So everything kind of is preserved.
00:28:59.892 - 00:30:05.204, Speaker A: All the properties that we need are preserved. But now we've bought something. Now we know that the vector of weights is drawn from a prior capital w and we're given this prior upfront. So what that means is that we now know the distribution of improving elements up front, and this is what we need for contention resolution in the traditional definition. So now we can instantiate the contention resolution scheme with this distribution of improving elements, and we can use it to resolve contention for the set capital r. And since the set capital r holds half of the offline optimum and it's also half uncontentious, this contention resolution should work for it and should select improving element with constant probability. So therefore we should get a constant competitive algorithm for the matriarch profit secretary problem.
00:30:05.204 - 00:31:00.104, Speaker A: And by the previous reduction this should translate to a constant competitive algorithm for the matroid secretary problem. Does this work? It turns out that there's a bug here as well. Okay, here's what happens. The weights now are no longer fixed numbers, but they're now random variables. If you have an improving element I, selecting it with constant probability is no longer a guarantee that you're going to recover a constant fraction of its contribution to the weight of improving elements. And the way to see this is to look at this blueprint for a bad example. Let's say I is always improving, but it has small weight equal to one with probability 90% and large weight equal to say a million with probability 10%.
00:31:00.104 - 00:32:04.374, Speaker A: You could have a 0.9 balanced scheme that selects I precisely when its weight is small. And this scheme would not recover most of the weight of I. So we actually fully describe examples where this phenomenon happens naturally and it can result in a contention resolution scheme losing most of the weight of the optimum. So the takeaway here is that even though a contention resolution scheme is balanced, it might favor low weight improving elements when these weights are stochastic. The way I'm going to fix this problem is just by changing the definition of contention resolution. I'm going to define labeled contention resolution, where each active element also comes with a label, and I'm going to allow these labels to be arbitrarily correlated with each other and with the set of active elements.
00:32:04.374 - 00:32:52.274, Speaker A: Now, I'm going to say a scheme is alpha balanced if it's balanced with respect to the labels as well. So for every element I, it should be the case that the probability that I is accepted when it has label l is at least alpha times the probability that it's active with label l. For the improving elements, I'm going to label them with their weights and require the stronger notion of balance. And what that does is it gets rid of the examples we talked about before where an element is selected mostly when it has low weight. It's not clear that we did anything interesting here, though. All we did was kick the can down the road. And what we did is just defined a new, possibly more difficult problem and required the solution of that problem.
00:32:52.274 - 00:33:36.754, Speaker A: However, now we have this picture. We reduced matrix secretary to profit secretary, then reduced profit secretary to this stronger notion of contention resolution labeled contention resolution. And it remains to reduce labeled contention resolution to plain vanilla contention resolution. The first question to ask here is whether adding these labels makes contention resolution fundamentally more difficult. In the offline setting, the answer is no. And this is actually pretty easy to see. Let's say you have a metroid like this graphical matroid on the left, and let's say elements of the matroid show up with labels.
00:33:36.754 - 00:34:37.838, Speaker A: And let's say the labels can be one of three colors, let's say green, blue or red. What you can do is you can define an expanded matriid like this one on the right, where for each element of the original matrioid you create a bunch of parallel copies, one for each possible label. And now labeled contention resolution for the original matroid is the same as unlabeled contention resolution for this new expanded matrix. So if this element shows up labeled with the color red, that's the same as the red copy of the element being active. We can now ask whether we can do something similar online. So let's think of the labeled contention resolution problem, where elements appear in uniformly random order, and let's focus on a particular element e. Imagine that time goes from zero to one, and e shows up at a uniformly random point.
00:34:37.838 - 00:35:32.474, Speaker A: On this timeline, when the element e shows up, you get to learn its label. So let's say it's labeled with the color red. Now, let's think of what happens in the corresponding unlabeled version of of the problem here. It's not just the red copy of the element that shows up, but instead, all the different colored copies have to show up in a uniformly random order, and all of them have to be inactive, except for the copy that corresponds to the true label of red. Now, if you're trying to reduce the problem at the top to the problem at the bottom, you'd have to somehow produce this stream of data using only online access to this stream of data. This, it turns out, is difficult. Okay.
00:35:32.474 - 00:36:24.910, Speaker A: And the reason is you'd have to know not to accidentally hallucinate the inactive red copy somewhere here before the true active copy shows up. So if the active copy is colored red, you'd have to make sure that you don't accidentally guess the inactive red copy before the active red copy shows up. We can show that this is actually information theoretically impossible to do. We also show that if you're trying to reduce this problem to this problem, you actually have to do something like this to get any guarantees. It might seem now that we're in a bind, but luckily, it's a bind that we can get out of. The solution is going to be to blow up the matroid even more. So, let's think of an element e.
00:36:24.910 - 00:37:17.994, Speaker A: Instead of creating one copy of the element for each color, what we're going to do is we're going to create many, many copies for each color. So we're essentially going to duplicate each label many, many times, and the number of copies of each label is going to go to infinity. So instead of having one blue copy of element E, I'm going to have many, many blue copies of element e, and I'm going to randomly splatter them throughout the timeline. So now if you do this for every color, what you're going to get is a continuum of colors where every color is pretty much everywhere. And now this order is going to be essentially deterministic. So it's easy to hallucinate the order of inactive copies online. Now, whenever element e shows up, we can look at the time that it shows up and look at its label.
00:37:17.994 - 00:37:52.954, Speaker A: Let's say its label is red. Now all we have to do is take whatever red copy of the element is at that time and make it active. And this approach with a lot of calculation we can show works. So that's it for the proof. This is a picture we end up with today. I showed you everything on the left here. I reduced the matrix secretary problem to universal contention resolution, going through the profit secretary problem and labeled contention resolution.
00:37:52.954 - 00:39:01.224, Speaker A: If you combine that with my result here from two years ago, you would conclude that all these four problems are equivalent up to constant factors. So in closing, we showed in this paper that the matriarch secretary problem is equivalent to contention resolution in the random order model for these uncontentious distributions. This is interesting, because contention resolution is fundamentally stochastic in nature and fundamentally ordinal in nature. Now, the contention resolution problem we get is particularly challenging because of the positive correlation in the input. However, this positive correlation is not arbitrary. It's seemingly more benign than a general positive correlation, and this is captured by our polyhedral characterization for uncontentious distributions. If we can somehow exploit that characterization to resolve contention in the random order model, then we would be able to resolve the matriarch secretary conjecture.
00:39:01.224 - 00:39:04.394, Speaker A: And that's all I have. Thank you for listening.
