00:00:01.040 - 00:00:10.078, Speaker A: Yeah. Hi. I'm Bento. I'm here. A postdoctoral fellow and usually a judge. Attack. And I want to speak about mazes.
00:00:10.078 - 00:00:41.410, Speaker A: So, let's say we have a maze. We are at the top right corner. We are in some domain in RD, something euclidean, and we want to find a treasury at the bottom left corner. How complicated is that? Well, this would be a path, and I can, of course, make that arbitrarily complicated. So, if you want to solve a maze, then we need to have some assumptions. And I work generally in convex optimization. So, let's, from now on, say we have a convex body.
00:00:41.410 - 00:01:02.400, Speaker A: We are still in the top right corner. We want to find a treasure. And because of convexity, that's too easy. So we went from far too hard to far too easy. So we need to find something in between that is interesting. And you can do that by saying, okay, I still tell you that there is a treasure, but I don't tell you where. I just tell you where to find it.
00:01:02.400 - 00:01:47.080, Speaker A: And this is just classical convex optimization. And for that, we have tools to do it efficiently. There's deep theory how you can solve convex problems. And the question that is still out there is, okay, I can now very efficiently approximate my treasure, but I cannot find it exactly. At least the question is, how many steps do I need to find that exactly? And there are natural barriers to that because I didn't tell you how I define my convex body. It can be defined by some very annoying convex polynomials where even describing the treasure would. Yeah, there's no closed form expression for describing the treasure.
00:01:47.080 - 00:02:19.128, Speaker A: So we even have to make a bit more assumptions. And so, let's say our polynomials decrypting the. The body, describing the body are just linear functions. So we end up at linear programming. But still, there is something that you have to take care of, and that is I can give you irrational numbers that define your polytope. And if you want to find an exact solution, then classical methods wouldn't apply here because they can go arbitrarily close. But you cannot really jump to the solution, to the optimal solution.
00:02:19.128 - 00:03:52.594, Speaker A: Okay? And it turns out that if you have these irrational numbers, then classical methods, like interior point methods, have the same behavior as the original maze that we saw, and that you can require up to two to the n many pieces to find your optimal solution. Okay? So the question I'm interested in is, okay, what assumptions can you more make on the structure of your constraints that you're able to find the optimal solution in polynomial time? And this you can nicely parameterize by some notion of complexity, of the normal vectors of your constraints. And one nice result is that if all these normal vectors lie on a nice grid, then if at Taros has shown almost 40 years ago that you only require a polynomial number of basic arithmetic operations to find that optimal solution. And what we figured out in joint work with Daniel Dadush, Cedric coefficient, Neil Oliver and Laszlo Veeck, is that if your vectors are sparse, as in your support is only two dimensions, then you can solve that problem also in polynomial many steps, which, for people who know the strongly polynomial birth would mean strongly polynomial time. Okay. And as a note, all linear programs can be formulated with at most three nonzero entries per normal vector. So this is sort of the end of the line of parameterizing by number of non zeros between before you solve the whole problem of strongly polynomial LP.
00:03:52.594 - 00:04:30.224, Speaker A: Okay. And maybe one application in the end, whereby application, I mean, a theory problem that can be reduced to two non zeros per normal vector. And these describe sort of all graph problems. What you can have is, okay, we have a bipartite graph, and we want to assign workers to tasks, and we have costs of assigning workers to tasks. And these workers, let's say, have different ability to do these tasks. And these would be these blue gamma factors. And sort of now we have the first strongly polynomial time algorithm to solve this problem.
00:04:30.224 - 00:04:35.344, Speaker A: Exactly. And I guess that's the end. Thank you.
00:04:41.384 - 00:04:57.684, Speaker B: Any questions? Just one clarification. With that result, we know that we have a strong polynomial, because you say poly obtain many basic arithmetic operations, and I'm not sure if you are speaking about simple numbers.
00:04:58.224 - 00:05:08.604, Speaker A: Yeah, I didn't want to go into computational models. The idea is that you have irrational numbers, and the model would be, you can add them, multiply them, compare them, and that's all you can do.
00:05:12.044 - 00:05:13.364, Speaker B: The number of operations.
00:05:13.484 - 00:05:19.364, Speaker A: The number of operations is. Yes. And the space that you use as well. So, yeah.
