00:00:00.200 - 00:00:16.394, Speaker A: Next guy is Lun Wang. His website is out, so I had to do proof of work to find him. He's a PhD student here at Birkeland. He's going to talk about SERP, another protocol that uses asymmetric varied polynomials. Thank you.
00:00:52.874 - 00:01:29.474, Speaker B: Okay. Hello everyone. I'm Lun and I'm a second year PhD student working with Professor Danson at UC Berkeley. So today I will talk about our new project, which is dynamic Metis practice secret sharing scheme, namely Chirp, and this is a joint work with Canal University. So first let's go through some motivation. So, decentralization is widely seen as a very important step in the democratization of resources. So this is strongly facilitated by the rise of blockchain systems in the past decade.
00:01:29.474 - 00:02:20.524, Speaker B: So these blockchain systems are used in various applications. So the most well known application is cryptocurrency. Some other sensitive application include identity management and voting system. So a common thread across all the applications is a requirement that the users need to maintain their own private key. And this is not easy because it is reported that top failing of cryptocurrency is lost because of lost keys. So people turn to an alternative, that they turn to store their keys with centralized entities such as Coinbase. But this kind of centralization of keys actually undermines the very decentralized nature that defines blockchain system.
00:02:20.524 - 00:03:23.812, Speaker B: So our idea is that why not we decentralize our keys like other resources. So the hell of idea is we want to use secret sharing techniques to distribute the private key. So although our original intention is to secret share the keys, our protocol actually can be used in many other applications, such as private smart contracts, manage encrypted documents, and threshold credential issuance. So first, let's take a brief look at secret sharing, which we have already gone through in the previous slide. But yeah, so a secret sharing scheme is actually composed of two algorithms, a share algorithm and a recovery algorithm. So given a secret, the share algorithm outputs the secret shares, and the recovery algorithm input all the secret shares and output the secret. So the two algorithms need to satisfy two requirements.
00:03:23.812 - 00:04:32.564, Speaker B: So the first one is correctness, that the secret recovered from secret shares should be the same as your original secret. And the security requirements requires that given less than t secret shares, it's impossible for any people to distinguish two secret shares of two different secrets. And this indicates that the secret share scheme actually is a threshold protocol. You need at least t of the secret shares to recover the original secret. So maybe the most widely used secret sharing scheme is sharemere. Secret sharing so the high level idea is you set the constant term of a polynomial as your secret, and you evaluate the polynomial on some other points and use these points as your secret shares. So when you want to recover the secret, you just interplay t points and recover the polynomial, and then evaluate on zero to get your constant term, which is your secret.
00:04:32.564 - 00:04:39.944, Speaker B: So the threshold of Shamir's secret sharing is the degree of the polynomial plus one.
00:04:40.444 - 00:04:58.784, Speaker C: In what way? You're going to be different than what Tal talked about your aim. She talked about the problem of keeping recovering your secret, and you are posing the same problem in what way? You are going to diverge. From where?
00:04:59.504 - 00:05:23.892, Speaker B: Actually, I missed the previous talk part of it, so I'm not sure. Like, yeah, but, yeah, I guess there's some difference. So. Okay, I will try to look at the video of the previous slides and see if there's any difference. So. Very intuitive.
00:05:24.048 - 00:05:25.244, Speaker D: Sorry to stop you.
00:05:25.284 - 00:05:25.628, Speaker E: Okay.
00:05:25.676 - 00:05:49.116, Speaker D: It's a story. Okay, Dalia, you have to extend his time later. So Shia Levy had his first paper with crypto with Silvio. And the night before the talk, Joe Killian came up to him and said, you know, the result that you have dungeons. Had it a few years ago, even at crypto and so on. Cheyenne, Silvio didn't know. Shy was devastated.
00:05:49.116 - 00:06:02.084, Speaker D: He was first few years grad student. He calls up Silvio. I mean, Silvio is the master of everything. Okay. Shai starts the talk the following day. Good ideas are worth repeating.
00:06:04.664 - 00:06:05.552, Speaker B: Okay.
00:06:05.728 - 00:06:06.080, Speaker E: Yeah.
00:06:06.112 - 00:06:08.484, Speaker B: Thanks so much for the explanation. I like it.
00:06:10.064 - 00:06:10.392, Speaker E: Yeah.
00:06:10.408 - 00:07:05.398, Speaker B: But I still believe there's some difference. Okay, so a very intuitive solution will be to directly apply chamier secret sharing in the key management scenario. So in this scenario, private key is shared to multiple parties using shamir secret sharing. And you need at least t plus one parties to cooperate to recover. The secret system provides two properties, which is very good. The first one is security that the adversary needs to compromise enough parties to steal the secret. And availability means the user is always able to fetch his own key when he wants, because the adversary also needs to compromise n minus t parties to prevent the user from getting her own key.
00:07:05.398 - 00:08:01.574, Speaker B: So the n is the number of the parties in the committee. However, here is a problem, because actually, these two properties is based on an assumption that the adversary cannot compromise the parties in committing infinite time period because we never update the secret shares. However, this is not true in many scenarios. For example, if there's some vulnerability in all the servers of all parties, and adversary is able to compromise these servers in a constant rate, then this will break the assumption, and the system is no longer secure. So in order to address this issue, people propose practice secret sharing. So it is defined based on the conventional secret sharing scheme. The difference is, these schemes periodically refresh the secret.
00:08:01.574 - 00:08:47.564, Speaker B: So there are two kinds of practice secret sharing. The first one is aesthetic, which means we only update the shares but do not change the members of the committees. And the other one is called dynamic practice secret sharing, which means we change the committee and the shares. So the assumption in the dynamic practice secret sharing is actually changed to the adversary cannot compromise enough parties in a fixed tab period, which is much more practical. So, with this intuition in hand, we choose to design chirp in practice, dynamic secret sharing of labor. And this is a common workflow of dynamic practice secret sharing.
00:08:47.984 - 00:08:50.312, Speaker F: Communication model yet, right?
00:08:50.488 - 00:08:53.464, Speaker B: Oh, so the synchronous communication model.
00:08:53.584 - 00:08:54.338, Speaker E: Partially, yeah.
00:08:54.416 - 00:10:02.932, Speaker B: So we assume a synchronized communication channel that every message sent will be received within a certain time period. And there is some research going on, trying to extend chirp to some synchronized channel, but at a very young period. So, yeah, that's a very good question. So the common workflow is, first you need some setup and the share phase, like some decentralized key generation protocol. Or the user can just compute the secret shares at his own computer and send to the parties he wants to share in a secure channel, like TL's channel. So the assumption here is the same as the previous slides, as adversary can only compromise up to t minus one parties in the committee in one epoch. But one common challenge when you try to design a dynamic, proactive secret sharing scheme is when you try to update the committee members, you need to hand off the secret shares to the new committee.
00:10:02.932 - 00:10:47.574, Speaker B: And in this phase, actually there are two committees, one old committee, one new committee. They simultaneously exist. And according to assumption, the adversary can compromise t minus one parties in each of them, which is two, t minus one in total. And this actually exceeds the threshold. And this means the adversary may be able to steal or destroy the secret in this handoff phase. So whenever you design a dynamic practice sharing, you always need to find a way to go through this problem. So in chirp, what we use is a very polynomial and technique called dimension switch to avoid this problem.
00:10:47.574 - 00:10:51.440, Speaker B: So can you go back to previous.
00:10:51.552 - 00:10:52.392, Speaker E: Okay, yeah.
00:10:52.488 - 00:10:57.564, Speaker F: So there, when the handoff is happening, is your protocol live or not live?
00:11:01.904 - 00:11:23.334, Speaker B: Oh, yeah, because the old committee is still there. You submit a request. The old committee can always, like, give you the secret shares they have. So during the hand office, the whole thing is still alive. Yeah, but during that period, it's more vulnerable. So that's what we want to solve.
00:11:24.634 - 00:11:30.014, Speaker G: Are you assuming that the communication between the processors is authenticated?
00:11:30.914 - 00:11:41.414, Speaker B: Oh, so actually we abstract that part and assume there's some secure channel between each node, between each pair of the nodes.
00:11:43.284 - 00:11:48.804, Speaker G: If nodes get corrupted, that's something that it's really hard to set up again.
00:11:48.964 - 00:12:40.124, Speaker B: Yeah, so actually, yeah, that's very good question. So actually we have a scheme to use blockchain system as a p two p communication channel described in our paper. So the high level idea is that, so when you submit transaction in the blockchain system, it will first be stored in some memory pool, and when it's not accepted, you can always rewrite it. So using this property, you can always send a transaction to override the previous one and send another to override the second one. And using this thing, you can actually transfer a very large message using the existing blockchain system.
00:12:42.024 - 00:12:42.664, Speaker E: Yeah.
00:12:42.784 - 00:13:53.668, Speaker B: So, okay, so our solution to solve this problem is to use bivariate polyw as a dimension switch. So the good thing about Bavaria polynomial is if you still see the constant terminal as a secret, then actually there are two ways that you can share the secret. So the first way is you can fix Y equals zero and do share secret sharing along the x axis. And you can also fix axis x zero and share it along the y axis. And because the highest degree of x and y can be different, so the threshold of the secret sharing is also different. So if we can find a way to switch between x and y, then we are actually switching between two secret sharing schemes that have different threshold. And the good thing about this is because if we have such a scheme, then actually we can switch to higher threshold SQL sharing scheme before the handout phase and switch back after the handoff phase.
00:13:53.668 - 00:14:45.614, Speaker B: And that will solve the problem. So let's see how we can actually do this. It's very, yeah, so let's use a grid to represent a barrier polynomial. And this line is the y axis and the vertical line is the x axis, which is a kind of anti intuitive, but it's fine. And let's say we use a two three polynomial, which means one threshold is three and another threshold is four. So when we are not in the handout phase, so each party in the committee actually hold four points along the y axis, which means it's three threshold secret sharing. And oh, it's not a three threshold secret sharing.
00:14:45.614 - 00:15:46.692, Speaker B: Oh yeah, accessory threshold secret sharing. And when we want to do a handoff, the parties of the old committee will send its secret share to the new committee, but rearrange the ownership of the secret shares in this way. So the new committee will hold secret shares along the x axis. And because the degree of x axis is to, then it's actually a false secret sharing. Yeah, I think I didn't make a mistake. So by this way, we implement the dimension switch, and now we are good about the handle face. So after we do the dimension switch, the next thing is we want to update the sacred shares.
00:15:46.692 - 00:16:27.120, Speaker B: So the basic idea in a one dimensional is because the only term matters is the constant term, then it is always good for us to add zero whole polynomial to our original polynomial. It will change the secret shares, but it will not change the constant term. So this is example. So the original polynomial is x squared plus x plus one, and the proactive polynomial is three x squared plus five x. And add them together, we get the updated polynomial. And you can see that the constant does not change. Oh, sorry.
00:16:27.120 - 00:16:31.804, Speaker B: The constant does not change, but the secret share actually change. So.
00:16:33.544 - 00:16:33.944, Speaker E: Yeah.
00:16:33.984 - 00:16:46.034, Speaker B: So by adding zero whole polynomial, we are able to update the secret shares. But in chirp, because we use a bivariate polynomial, we need to extend this technique to a bivariate case, and.
00:16:47.814 - 00:16:48.190, Speaker E: It'S.
00:16:48.222 - 00:17:47.278, Speaker B: Kind of very intuitive. So there are two steps in the beverid zero secret sharing. So, first of all, you need to do one dimensional zero secret sharing along the y axis, and each of the nodes will get its own secret share here. And then we do shamil secret sharing again on these secret shares. And this will generate all the points on the grid, which means we are good now, because we have beverid polynomial, whose constant is zero. Actually, the last step of the handoff phase is that we need to switch back the dimension to the lower threshold secret sharing scheme, and we are done in the handoff phase. However, we didn't talk about the security of the handoff phase.
00:17:47.278 - 00:18:29.594, Speaker B: What if there is some malicious party in the committee and try to send some incorrect share to other nodes to. To corrupt the whole protocol? So our solution is to use commitment scheme and some consensus protocol. And actually, we use blockchain in the paper to solve this problem. So the commitment scheme, I think most of you are familiar with it, but let me introduce it. It's a cryptographic primitive that allows us one to commit to a chosen value, but keeping it secret, and the person can review it later.
00:18:31.294 - 00:18:31.766, Speaker E: Yeah.
00:18:31.830 - 00:19:23.644, Speaker B: And we use a polynomial commitment scheme called KZG in chirp, and it has a very good commitment size complexity, which is o one for any degree polynomial. So the hell of idea of the solution is whenever you want to send a message some other node, you always need to submit a commitment on the blockchain. And afterwards if something goes wrong then oh sorry, then everyone can verify the share and the commitment to see if you have send a share that is different from your commitment. And people may ask that what if the commitment is committed to a wrong value? So the commitment in high level.
00:19:27.144 - 00:19:27.696, Speaker E: Is.
00:19:27.800 - 00:20:15.608, Speaker B: The secret to some number, and using the algebraic property of these things, we are able to verify some property of all the commitments on chain. For example, we are able to verify that all the commitments committed to values that sum up to zero. So if you want to submit wrong commandments, then you will also be caught because of this thing. So if every verification goes fine, then we are in the optimistic path and everything runs good. But if some of the verification fails, then we will deviate to path. So there are two kinds of passnic path in chirping. So if a normal verification fails, then we are in path a.
00:20:15.608 - 00:21:14.142, Speaker B: And our solution is we will require the auth committee to do the handout phase again. But this time, besides commitment, you also need to submit a verifiable encryption of the message you send on chain. And with this thing we are able to find exactly which party is a malicious party and expel it and do the whole handoffice again. And recall that we use a commitment scheme called KZG in our protocol. So KZG require a setup phase and the setup phase may fail. So if the setup phase fails, then the adversary may be able to make up some wrong value with the same commitment as the correct value. So we also have a verification step for this kind of failure called the state verification.
00:21:14.142 - 00:22:11.000, Speaker B: And if this verification fails, then we will debate it to pass b. And the solution we use to solve this problem is just we will redo the handle phase, but do not use KCG commitment, but Patterson commitment with some sacrifice in performance. So here's performance comparison with a state of art called the Schurz NPss. So the on chain complexity means how many bytes we put on the blockchain, and off chain complexity means how many bytes we transfer in the p two p network. And the threshold is a threshold of secret sharing scheme. Um, so we can see that compared to the optimistic path of npss, uh, the on chain complexity is the same, but the off chain complexity is uh, is improved to o. So, uh, this improvement is due to two parts.
00:22:11.000 - 00:23:08.134, Speaker B: The first one is we use KzG, which has uh, o one commitment size. Uh, well npss use some o commitment scheme. And another reason is we use Bavaria polynomial and dimensions which deal with a handoff problem. So in npss, they use some blinding polynomial which requires them to generate a blinding polynomial for each of the nodes in the new committee, which will also increase a factor of o in the total complexity. And we can also say that threshold of the optimistic path of chirp is half of the committee size. Well, Schultz is only able to guarantee one third of the committee size. And we can see that even the pacinific path, we are no worse than the Pacific path of Schultz and pss.
00:23:08.474 - 00:23:21.150, Speaker F: So, question. You did not add the setup, the communication assumption. The Schurz protocol was defined asynchronous communications, or at least partial synchronous communication setting.
00:23:21.222 - 00:23:22.598, Speaker E: Oh, yeah, yeah, yeah, that's true.
00:23:22.726 - 00:23:26.254, Speaker B: So that's when they have one third, right?
00:23:26.294 - 00:23:27.274, Speaker F: N by three.
00:23:28.334 - 00:23:29.314, Speaker E: Oh, yeah.
00:23:30.134 - 00:23:35.582, Speaker B: But even in synchronized situation, they also have this threshold.
00:23:35.638 - 00:23:41.254, Speaker F: Right, but probably that's your version. I don't think the paper has synchronized version.
00:23:41.374 - 00:23:45.614, Speaker B: Oh, okay, I see.
00:23:48.314 - 00:23:48.690, Speaker E: Yeah.
00:23:48.722 - 00:24:18.314, Speaker B: So our statement here is that if we apply the npss in the synchronized version, it still has this kind of threshold and you need some modification to change it to half of the committee size. So in this scenario, we are better than them, but in a synchronized version, I'm not sure if we can still achieve half of committee size. Maybe we will be able to.
00:24:18.734 - 00:24:20.646, Speaker E: Yeah, yeah.
00:24:20.670 - 00:25:07.398, Speaker B: Thanks for pointing that out. And last, I want to talk a little bit about the implementation evaluation. So we implement chirping around 2000 lines of gold code and we run the protocol on 100 eC. Two instances, we run into scenarios. The lan setting, we start all the instances in one data center, and in one setting we start instances across the world. So difference is in one setting we can see the influence of the network delay, while in the land setting we will more focus on the computation cost. So, yeah, our first experiment measures off chain communication cost.
00:25:07.398 - 00:25:20.950, Speaker B: And we can see it perfectly conforms with the theoretical analysis. The shorts and PSS has zero four complexity and our has zero two index.
00:25:21.062 - 00:25:31.614, Speaker F: So what blockchain do you assume there because you have blockchain, how much time within how much time your things will be agreed on blockchain for your numbers.
00:25:31.914 - 00:25:37.374, Speaker B: Oh, so just how many bytes you put. So this is the off chain complex.
00:25:38.754 - 00:25:41.374, Speaker F: There'll be something that go to blockchain, right?
00:25:42.194 - 00:25:42.770, Speaker E: Oh, yeah.
00:25:42.802 - 00:25:45.534, Speaker B: So the complexity on blockchain is the same.
00:25:46.794 - 00:25:52.394, Speaker F: Okay, this is Schulz assuming blockchain based construction.
00:25:52.514 - 00:25:53.298, Speaker E: Oh, yeah.
00:25:53.386 - 00:26:51.930, Speaker B: So schultz assume there's some consensus protocol right. And we plug blockchain in there and we use CRM in the evaluation. So actually we achieve like 2000 times improvement on the off chain cost. And we also measure the latency of the two protocols and we can see that in the one setting our protocol only takes 5 seconds to finish in the yin 100 nodes. Well shorts and PSS takes up to 12 seconds in only land setting which means our protocol is actually more fast than shows npss. Okay, so here are some important points I want to repeat at the end of talk. So the chirp is a turn robust interactive secret sharing protocol.
00:26:51.930 - 00:27:22.670, Speaker B: So by churn robust we actually mean that we can also change the size of committee. I didn't cover that part in the talk but actually we can do that. And the biggest improvement of chirp is it achieves much better synthetic communication cost. And we implement chirp and in practice it also performs good. Okay, so that's everything for this talk. And if you have any questions please you can see our paper at CCS this year or visit our website or send me an email.
00:27:22.742 - 00:27:23.354, Speaker E: Yeah.
00:27:31.134 - 00:27:32.674, Speaker D: Any more questions?
00:27:37.054 - 00:27:46.350, Speaker G: I have a really not technical question. Is this kind of protocol actually used anywhere in the world at the moment?
00:27:46.462 - 00:27:47.094, Speaker E: Oh yeah.
00:27:47.134 - 00:27:54.374, Speaker H: So yeah, so yeah, we are seeking.
00:27:54.414 - 00:27:56.726, Speaker B: For real world deployment of training for.
00:27:56.750 - 00:28:22.362, Speaker H: This protocol and there is a startup of blockchain at San Francisco called Oasis Lab and actually they are trying to implement this protocol in their blockchain system. I'm an internship there this summer and I implement the initial version of them and I think the engineering team will continue work on that and integrate it in their real system. Yeah, and I think JPMorgan is also.
00:28:22.458 - 00:28:25.306, Speaker B: Trying to find out any opportunity if.
00:28:25.330 - 00:28:30.074, Speaker H: This is possible to use in their system that I'm not sure some people.
00:28:30.114 - 00:28:31.586, Speaker G: Are thinking of using it.
00:28:31.690 - 00:28:33.934, Speaker H: Yeah, because this paper just come.
00:28:36.894 - 00:28:52.886, Speaker I: Forgive me if this is a naive question because I'm almost sure I missed something, but how did you come up with 2000 times better? Because you showed that Schultz was taking like 12 seconds and it's taking like 5 seconds.
00:28:52.990 - 00:29:20.370, Speaker H: Yeah, maybe I confused a little bit in that part. So the 2000 performance boost on the off chain communication cost. So remember the theoretical complexity of o four and o two. So as in mpss, they in one hand office they need to transfer about 5gb in the p two p network and our flow only needs to transfer like several megabits.
00:29:20.562 - 00:29:21.250, Speaker A: Oh, okay.
00:29:21.282 - 00:29:21.466, Speaker E: Yeah.
00:29:21.490 - 00:29:23.854, Speaker H: So that's where the problem is.
00:29:29.534 - 00:29:32.114, Speaker G: So was it the same idea or is it different?
00:29:33.774 - 00:29:43.310, Speaker D: First of all we also have a proactive solution. I mentioned it yesterday but of course it described different things. But you should have been able to discern.
00:29:43.382 - 00:29:46.654, Speaker G: No, sorry, because I'm too naive a listener and I try hard.
