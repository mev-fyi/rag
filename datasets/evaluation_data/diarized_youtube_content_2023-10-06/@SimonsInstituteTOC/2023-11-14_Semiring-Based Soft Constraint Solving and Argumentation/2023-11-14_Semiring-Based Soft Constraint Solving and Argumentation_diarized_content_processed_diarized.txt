00:00:25.934 - 00:01:55.980, Speaker A: It okay, it seems to work. This is working fine. So thanks a lot for the invitation and I hope to stay in the time, because I try to speak about two topics today, about the use of semi ring in constraint and also in argumentation. Please, when two minutes are left, let me know. Thank you. So I'm working in using semiring, starting since 1995. And the work that I'm speaking about are the use of Semirigon constraints, that is, let's say a work that I made in my PhD thesis a lot of time ago.
00:01:55.980 - 00:02:31.974, Speaker A: It was presented HK 95 and then on the journal ICMA 97. And I also will try to give some insight about the use of same ring in argumentation. This is another important topic today is. Is, let's say, I think is important because it uses to give explanation to machine learning results. And also other topic that we will not speak about that. So at the end, usually when I speak, people doesn't know a lot about semi ring. I have to explain semening and they already know constraint and argumentation, but this time is the opposite one.
00:02:31.974 - 00:03:03.806, Speaker A: So I will try to speak some that to. To jump on some detail about the same thing. But I will try to give it at least some definition on constraint solving the argumentation. So some new topics that you can take on. Okay, so constraint solving is, let's say by the way, is a whole topic. People are working on this starting from the seventies. And the fifth approach was to try to solve some, let's say graphical problem.
00:03:03.806 - 00:04:13.010, Speaker A: And the first one was to try to interpret a 3d scene starting from a two dimensional graphical and the same work in a different fashion. Still in the graphical team was made by borning trying to apply some geometrical constraint to this interface. But the fifth scientific work on constraints are made by Hugo Montanari in 74, by the way, he's my supervisor, and by Mark Quartz in the 80. In one paper is defined the framework, in the other paper defined the basic algorithm to solve this type of problem. So first, let's try to give to you what is the question of this fashion problem that perhaps not everyone knows. So a constitution problem can be seen a set of variable v, a domain for each one of the variables. So in this example are the color here, red, blue and yellow, plus a set of constraint.
00:04:13.010 - 00:05:08.904, Speaker A: This is the basic, the basic brick of the other framework. So a constraint is defined in terms of primitive constraints. Changing the primitive constraints change the language that you can use inside the constraint, and change also how much powerful is the constraint system. The primitive constraints can be given in an explicit way. So saying, for instance, what are all the admissible top of each one of the constraints. So if I want to say that the connected connected variable has to have a different color, I can explicitly say that the admissible top are red and yellow, red and blue, blue, blue and yellow, and so on. Or I can express the, I can define the constraint in an implicit way, just define some relation.
00:05:08.904 - 00:05:59.534, Speaker A: So the element has to be piwise different. Each constraint is defined by two functions, the function con, the connection variable. This is called, sometimes it's also called the type of the constraint or the support of the constraint that they define for each one of the constraints which are the variable involved. So for instance, for this constraint here, the con function give x two, x two and x three. The other function to define a constraint is the definition function to say what are the possible assign for these constraints. In this case, given an explicit way, the possible one will be the different colors of red, blue, red, yellow and so on. So, solving the problem means to find an assignment to all the variables that satisfy all the constraint.
00:05:59.534 - 00:06:53.094, Speaker A: Sometimes there is also another element in the problem is called the distinguished constraint, and is introduced when we are interested to know the assignment of all subset of the variable of the problem. In this case only we want to know only the assignment of x one and x three. So how to solve the problem? We have to find the assignment for the variable to satisfy the constraint. In this case there are two possible assignment that is to assign for the variable x one, x four. The operation that put together the constraints is called the combination. And in case you have to project over the subset variable, I have to call the projection operator. Okay.
00:06:53.094 - 00:07:28.958, Speaker A: Many problems can represent as this one. This is the classical graph coloring problem and many other problems can be represented. So how to solve this problem effectively, because the problem space that you have to explore is this is an solving TCP is an NFP problem. So it's very difficult and the many technique can be used. The 20 use a lot of time is the search with backtrack. So the idea is that I try to instantiate the variable in a specific order, in a specific order. By the way, this will be another talk.
00:07:28.958 - 00:08:21.654, Speaker A: There is a lot of heuristic in deciding what is the order of assignment of the variable and which domain element to assign to each one of the variable. So let's say I assign the element to the, to the variable until we have a complete assignment that satisfy all the constraint. If a certain point, an assignment cannot be found, I have to backtrack and choose a different element of the domain. So the main idea is that if I want to improve the search, I have some to find a way to reduce the search space. The things to do that is called the local consistency. Many type of local consistency, in particular, when two variables are involved by a binary constraint, is called r consistency. And this was defined by Markworth in the eighties.
00:08:21.654 - 00:09:05.868, Speaker A: So the idea is that looking locally with the polynomial algorithm, I can try to reduce the domain of each one of the variables. So for instance, looking at this relation between x and y, I easily can remove three from the domain of x, because there is no way to assign epsilon to assign y, such that there is a consistent assignment between x and y. So I can remove x from here, reducing the search space, this is the goal. This is very important. If I want to say motivation that say, let's say why CSP are used is because there exists local consistency. So let's say a polynomial methodology to reduce the search space. This is most important things.
00:09:05.868 - 00:09:21.236, Speaker A: And moreover, consistency is also important because if you are lucky, you can also try to use this polynomial algorithm to completely solve the problem. Okay, if you are lucky, yes, like.
00:09:21.260 - 00:09:26.384, Speaker B: A symmetry reduction, and it will never, is never guaranteed to work on a cycle. Is this correct?
00:09:28.124 - 00:10:21.158, Speaker A: It works. By the way, you are not sure that you find a solution in the sense that you can reduce the search space. But it's only case is all a first chance that in this case is solved problem usually is not enough. You have to use local consistency during the search with bedtrek to reduce the space as much as you can. Okay, so this is constraint satisfaction problem. What to do with the same ring? This is the motivation I'm here, by the way, is that sometimes is not enough to solve a problem like this one, because or there are too many constraint, I want to find a way to anyway give a solution. Also, if some constraints are not satisfied, or there are so many solutions that they want to select, someone that is better will spread to another one.
00:10:21.158 - 00:10:55.686, Speaker A: So the idea is to do the same, meaning, in order to guide the search for the best solution. So the problem like this one is an answer giving some weight to the, to the assignment of the constraint. In this example, I assign, I assume that I give some some cost to each one of the assignment. When they perform the combination, I have to. When I perform the combination, I have to. In this case, I sum the cost and each one of the solution have a specific cost. Okay, again we are expert of same link.
00:10:55.686 - 00:12:24.654, Speaker A: This is just the case because we can do mean sum of it but many other type of seminaring can use to solve this problem. So instead of just minimizing the sum of the cost I can search for the solution that the eigen probability to exist or many others and in particular there is a mapping on the Boolean using the Boolean semening that map this simulink based SCP to the classical one no good result at the moment everything is very easy. Okay, important things we use the same ending with the plus operator at the important we already say many things about this today. Indeed they want the plus operator to be the point because they want to define a partial order between the element in order to select which one is the better element of the same meaning I say better in order to make confusion with respect to the order. Okay, so I say b is better than a if a plus b is equal b. Okay, so when mini uses the I have to invert the odd in any case. Okay, so which property should be required for CSP's associative and commutativity of the combination operator because we consider a set of constraints, we don't care the order of the constraint absorptiveness of times because when adding constraints I want to have a word solution.
00:12:24.654 - 00:14:03.024, Speaker A: There exists an element that represents the total dislike of a solution, the zero, this also the annihilator of the times and an element that is the top the best that represents a what is a good solution. Okay, so at the end I have the absorptive semi ring. So a commutative seminaring let's say that a plus zero, a plus one are committed to humanoid and it just stops absorptiveness. The absorption is needed because of the parcel order they want to define on the using the plus we already have speaker have spoken about this today. Okay, so try to give me some detail. So a constraint system is enhanced using same link not only the constraint domain, the variable a constraint is again a pair the type of the constraint, the definition function, but this time the definition function for each assignment of the domain give a semi link value and the do operation combination and projection are defined in such a way the combination take in account the time is operator of the same ring and the projection choose the best one which is the sum operator of the same ring. We can make the same things define using some functional way and where is a constraint? Take a mapping from v to d and then to a and so on.
00:14:03.024 - 00:14:40.916, Speaker A: Okay, the good things of the same ring that when we define this one we was able to represent what was already defined in the past. So using specific semi ring. We was able to represent probabilistic CSP, the fuzzy CSP, the classical one and many, and many others. Okay, still open the question if you can represent this one. So if you want some, some play with this stuff. We can do example how to do this easily and quickly. So combining the constraints means to take in account the combination of pareto.
00:14:40.916 - 00:15:03.318, Speaker A: The simil in this case for the fuzz is the minimum. Put together the element. So I perform the minimum between 0908 and zero nine. For this tuple we have zero eight. We can do the same for the others. And if you want to know the assignment for x equal a, you have to project over a. So you have to perform the maximum between these three values, that is zero eight.
00:15:03.318 - 00:15:44.928, Speaker A: Okay, so classical definition of the classical Csp extended to same. The next step is to try to define local consistency. Also for this framework this is most important things. So how to do that? Look at consistency, how it works. You take a subset of the variable, in this case x one, x three for instance, and try to project over x three the information taken from this constraint in order to reduce the domain x three. So for instance, looking at this example, we know that red here cannot be present. So the idea is combine this information and reduce the domain of history.
00:15:44.928 - 00:16:33.110, Speaker A: This is what is done in the classical CSP. We have to do something similar in the soft CSV some. In this case we are not to remove the value, but we have to read, sorry, we are not to remove the domain element, but we have to, we have to reduce the simulating value associated to the, to the, to the, to the, to the, to the domain element. So the idea is that, notice that zero means have the same meaning. That is an assignment not possible for the developer. Okay, taking these two variable project over x three means to perform this operation. So performing the combination of the two constraints with the variable, with the, with the, not with the variable with the unary constraints of the variable and then perform the projection over x.
00:16:33.110 - 00:17:04.720, Speaker A: Notice the distributed distributive property of the times and projection. I can write the parentheses in a different way. Okay, so the idea is that here we have similar value assigned to each one of the assignment. The same ring is max mean, the fuzzy one. In this example I perform the combination, let's say the mean between all the value. Obtain this one and then you have to project over the variable. The value that was assigned to the blue color was 0.5.
00:17:04.720 - 00:17:33.475, Speaker A: After the project is 0.2. So I obtain a better approximation. What will be the real assignment at the end of the computation to the assignment of x three. Okay, so this is the idea. In the classical case, you want to reduce their space. In the soft case, I want to have a better approximation of what will be the final assignment of the variable and performing the global combination, the global combination of the constraint. Okay, good.
00:17:33.475 - 00:18:28.904, Speaker A: Everything seemed very easy, but for fuzzy to work, I will skip it. But for the probabilistic one, again, the properties of the same meaning are different. In particular, the plus operator, that is the max is not, sorry, the combination operator, this is the times of the same ring is not that important. Okay, if I perform the rule that I define in the previous slide, let's say I combine the constraint and project what I obtain obtain, let me see. Okay, I obtain an, I obtain a value that does not satisfy, that the solution does not change. So it means that I cannot apply local consistency. But we have a workaround on this.
00:18:28.904 - 00:19:18.184, Speaker A: The idea is that we can multiply. I say multiply because it's the times operator of the same ring. Any way we can instantiate operator to any other other operator, we can multiply all the element for any any value, in this case zero eight, and obtain zero seven, two on this one, and then divide for the same value, zero eight, the other element. Okay, so the overall solution does change. Indeed, you will say how you can divide because you have a semi ring, the division is not defined. Okay, well, what we will do, we extend how to do this. We use the residiation theory.
00:19:18.184 - 00:20:05.242, Speaker A: With residiation theory we can approximate the solution of the question. B times x is ya, with the maximal of this subsolution. So the set of x such that b times x lower egal a, we are sure that if such element exists, and if an element exists such that the equation is equal, this is the maximal solution. So when the division can be defined, we have the perfect solution. When we are not, we have some approximation. It means that let's say instead of make the division perfectly, we will have something, some not so good approximation, or we can do something similar. How was defined the division by the situation in the different semi ring.
00:20:05.242 - 00:20:41.934, Speaker A: So the division, so the opposite of the times in the classical CSP is just implication for the fast. For the weighted are just s, one is b is lower than a, it's just a. If a is lower than b for the weight CCP is just a. In the weight CCP we have, the plus operator is just a minimum. Only when you perform, you can perform the minimum in this semi ring. So only when a is greater than b. So when only when you can perform the subtraction.
00:20:41.934 - 00:21:08.908, Speaker A: Okay, this is a good idea. This is the idea that we use it to extend the local consistency to also non potency mirroring. Good. How much time? I have eight minutes. Good. I try also to give some detail on how to extend this time in non constant satisfaction. But argumentation with stammering.
00:21:08.908 - 00:21:55.940, Speaker A: So what is argumentation? Argumentation is a framework where we represent argument that each one that can be used when we have a discussion, a debate among user. In this example, we are two user a and b that say some argument are debating. So hey, you say something that attack the argument of the other guys and so on. So we have situation like this one. In this case, what argumentation do usually want to find out which are the argument that they stay well together. Okay, so who survived? There are two president, two candidate president that make a debate. You want to, at the end of the debate understand who say the good things.
00:21:55.940 - 00:22:39.084, Speaker A: Okay. So you have to find which argument survive. Adding same ring here means that you want to give a weight to each one of the attacks. Some attacks may be stronger than another one. So if in the classical case, a defend itself from the attack to b, if you give weight, could be that defend could be enough. Okay, more formally, an argumentation framework is again a graph. This time, the connection between the nodes are direct edge, because it's the direction of the attack and is defined by the set of argument.
00:22:39.084 - 00:23:21.972, Speaker A: The node a relation represent the complete the attack. So we say that a attacking b, there is a direct edge from a to b. With this framework, we have to find, I say the argument that stay well together. So the more easy semantics, they conflict free. So in this example, ace, they will say well together, because every singleton stay well together. But for instance, ab cannot stay together because there is an attack, ac can stay together, CD cannot say, and so on. Another step is not to find only the conflict preset, but to find the argument that are able to defend by the other.
00:23:21.972 - 00:23:50.514, Speaker A: So for instance, Ac is able to defend to the other, because C is attacked by D, but defend itself. Ad the same. But Bd, for instance, cannot stay together because D is attacked by C but defend itself. B is attacked by a by C. The attack coming from C is defended by his friend D. But the attack coming from a is not defended. So BD is not an extension that is admissible.
00:23:50.514 - 00:24:44.794, Speaker A: Okay, many semantic are defined. We don't care about that many. But the most important thing is how we work when we extend the framework to wait on the attack. Again, the weight are any element of the same ring. I use here the weight of the same ring where the weight is compared with the other with respect to the minimum. And if there are two guys saying that there is sunshine or rain, stronger the attack, stronger the pot, five minute more. Okay, so instead of just having argument and the relation results of a semi ring and a weight function that assigns the same ring element to the attack, many similar, we know about that.
00:24:44.794 - 00:26:03.224, Speaker A: We can define the defense function just considering the weight of the attack. So for instance, c defends itself from D because nine is greater than 8d, does not defend from the Abdac OSI because the weight is not enough for the admissible extension. Okay, we have to put together, we have to combine the way together. So for instance, the attack that they that go from a to b seven is defeated by the defense of dc together. When you say together means that I use the combination of electrodesimiting and again the attack that go from f to this set, let's say to d and a, that is five plus three eight is not defeated by the set because the attack from d to f and from c two f is five plus two seven. Okay, so I combine the both the weight of the attack and the weight of the defense. This is a different approach from what already defined by the other proposal, where they does not combine the weight, they have not the notion of submitting and combination operator and so on.
00:26:03.224 - 00:26:37.056, Speaker A: Good. I'm pretty going to the end having the weight. We can give a relaxed definition of complete free, permitting some attack inside the set. Okay, so this one could be not conflict free, but we have relaxation of two units. This could be conflict. Three, we have a relaxation also from outside. So in this case there is an attack of five defend zero two, if we omit relaxation of three unit, this could be enough.
00:26:37.056 - 00:27:32.004, Speaker A: Okay, two minutes. So I finished time if we want to play with this one. We implemented argumentation framework as a tool using CSP, by the way to put this together and you can find it here the reference to talk also on the slide results, a book with many details about user simmering based constraint and many open problem questions that we can discuss on this later on. I thanks for the attention. We do have time for questions, why should I just go to the very, very dense talk? Yeah.
00:27:34.984 - 00:27:58.624, Speaker B: Are there any similar, any variations of this framework that is efficient to calculate and maybe so then you know. So these are gate to us. Soft logic is basically a relaxation of normal logic. So she also needs to do some relaxation. But it is always solely the examples we saw now and seem to be found.
00:28:02.964 - 00:28:05.332, Speaker A: Logic is Lukasevich logic.
00:28:05.428 - 00:28:06.944, Speaker B: I think it's not a semi ring.
00:28:07.844 - 00:28:10.132, Speaker A: But it's one particular semi ring.
00:28:10.308 - 00:28:17.184, Speaker B: There are some semi rings for which you can solve optimal solutions and other ones which you cannot use.
00:28:17.684 - 00:28:52.044, Speaker A: Okay. For sure. One thing that we can say that if the, if the timing superiorities are important, is easier to perform, a local consistency. So this is an advantage when we want to solve it. Indeed, I brought this among the possible study to study to do, because trying to study the complexity with respect to the specific, specific semi ring could be a topic to study, because the change in the operator could change the complexity of the framework.
00:28:54.504 - 00:28:55.884, Speaker B: Any more questions?
00:28:57.304 - 00:29:05.304, Speaker A: Good. Then I think. Let's thank the speaker once again. Thank you. So now we have a coffee break. Andre.
