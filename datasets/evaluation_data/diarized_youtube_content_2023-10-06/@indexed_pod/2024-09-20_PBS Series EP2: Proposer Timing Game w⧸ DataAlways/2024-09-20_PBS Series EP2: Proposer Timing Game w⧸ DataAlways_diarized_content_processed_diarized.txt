00:00:00.200 - 00:00:32.291, Speaker A: If we factor in all rewards. So, like everything you get for running your validator, whether you propose a block or not, these games kind of mean nothing at this point. Consensus rewards are something like 80% of value. So that extra 10% from timing games is actually only 20% of 20% or sorry, 10% of 20%. So you really only get like an extra 2% in total. And if we're putting the network at risk for an extra 2%, like, we're kind of just being stupid.
00:00:32.443 - 00:00:53.035, Speaker B: Welcome to another episode of the Index podcast where the three of us come together every couple of weeks to discuss on chain data chart crimes and metrics that move to crypto industry. And today it's actually the four of us. So the four of us being denning on chain Corgi at flashbots. Hi, Hildoby resident Data Halls, Elf at Dragonfly.
00:00:53.495 - 00:00:53.903, Speaker A: Hello.
00:00:53.959 - 00:00:54.595, Speaker C: Hello.
00:00:55.255 - 00:01:00.115, Speaker B: Our special guest today, Data. Always just call me Data, always at flashbots.
00:01:00.775 - 00:01:02.235, Speaker A: Hey, nice to be here.
00:01:03.655 - 00:01:22.405, Speaker B: And I am Boxer and I am the community powerhouse at Dune. Before we start, nothing we say here should be relied upon as legal, financial, investment, tax, or even life advice. We are acting independently of our respective professional roles here. And with that out of the way. Yeah. Welcome, Data. Always very glad to have you here.
00:01:22.405 - 00:01:57.163, Speaker B: I've kind of seen you around crypto Twitter for the last, I want to say, one and a half, two years. So very excited to actually hear your voice and get to meet you here at this podcast. So maybe as a start, if you could just give us a rundown of how did you end up here being in E3. And I think you emerged on Twitter kind of out of nowhere and you immediately went into the deep end. So, like, how did that emerge? Like, I'm just interested in the story here.
00:01:57.339 - 00:02:33.487, Speaker A: Yeah, sure. So what I would start off by saying is that I don't think I did emerge out of anywhere. I probably just wasn't part of the on chain community. And for a long time I was a bit more focused in the bitcoin space. So I've actually been around for probably four to five years, if not a bit longer in crypto for longer. But sort of one day a couple years ago, I fell in love with dune and eventually MeV data and sort of just kept diving deeper and deeper down. Here we are today.
00:02:33.631 - 00:03:01.303, Speaker B: I see. So you were kind of part of another. Like you were part of the bitcoin camp, right? I remember you did some ordinals like work and you spotted like you did great work on. I think I even referred to this in the podcast a bunch of times where it's like, how was this called? Like somebody was blocking like a bunch of ordinals. There was like a special name for it which was related to this three body problem. Like there was some connection there, but whatever. So you actually.
00:03:01.303 - 00:03:11.521, Speaker B: So you come from the bitcoin camp and then eventually you were like, okay, there's nothing really interesting happening on bitcoin. Let me see what else is out there. Is that kind of the story?
00:03:11.673 - 00:03:27.245, Speaker A: I mean there was a very brief period of my time where I was like a bitcoin laser eyed maxi and luckily those days are behind me. But I still, I still really do love bitcoin. I just find Ethereum much more interesting. That's where I spend my time.
00:03:28.425 - 00:03:44.307, Speaker B: Yeah, there's actually stuff happening here, stuff to analyze and is your background, did you study this? Is this all self taught and without doxing yourself you can give however much of a vague answer you want to.
00:03:44.451 - 00:03:59.855, Speaker A: Yeah, so my background is physics and after that into tradfi, as all failed physicists go. And then eventually tradfi just got boring and I found bitcoin and the rest is history.
00:04:01.015 - 00:04:26.565, Speaker B: Okay, I see. Yeah, Cool. Interesting. I think that explains a bit of your style of communication. And your communication style strikes me as very structured and physics background. Seems you seem to have to have a very straight mind or very ordered or that mind in order to be able to understand physics. Okay, interesting.
00:04:26.565 - 00:05:08.875, Speaker B: So today we've invited you to talk about block building on or like this is kind of a continuation of the block building series that we started last. I guess it's not last week but last episode with Burak and now Dobby and me are going to learn that there's also a timing aspect to all of this block building and Data always has kindly prepare the presentation to actually just walk us through the high level topics here. But maybe if I can throw a cheeky question to Dobby, what do you know about latency games or just the timing of block proposing on Ethereum today?
00:05:09.035 - 00:05:38.225, Speaker C: Honestly, I'm not that deep. What I know is what I've seen from Data Ways and Tony Wolfalter on Twitter and it's. Yeah, I think, I think I've got a lot to learn. I understand the basics about how, you know, like delaying a bit and waiting for like MEV to build up in a block before you actually propose it can lead to more MEV for you. So yeah, I understand the basics, but I don't know how deep the rabbit hole goes.
00:05:39.765 - 00:05:49.139, Speaker B: I think it goes very Deep, and I'm excited to dive in there. So, yeah, data always. If you just want to share your screen, start the presentation.
00:05:49.267 - 00:06:32.245, Speaker A: To sort of understand where we are today, I think the best thing to do is to go back to the beginning. And the beginning is proof of work. And it's actually Bitcoin. So proof of work has what we call exponential block times. And for anyone who's like, not a big math guy, basically that's the idea that the protocol and bitcoin mining is memoryless. So when bitcoin miners are competing for a block and they get the wrong answer, they don't actually really gain any information. So you have like, when you're trying to figure out the next block, you have infinite right answers and infinite wrong answers.
00:06:32.245 - 00:07:30.365, Speaker A: So what stems from this is like the protocols design. So you have 10 minute block times, but if people have been guessing for five minutes and they don't have any more information, there's still 10 minutes on average until the next block. And I mean, that's really cool, but it also means that you have this really long tail behavior where a couple times a week you end up with like an hour or more between blocks. And Ethereum had the same thing right when Ethereum was proof of work. So even though Ethereum block times were something like 13 seconds from time to time, you'd still have like two to three minutes. And if you're trying to build like a DeFi ecosystem with two to three minute block times, it's a bit of a mess. So about two years ago, there was this big event called the merge, and Ethereum switched from proof of work to proof of stake.
00:07:30.365 - 00:08:15.695, Speaker A: And what happened for block times is they switched from this random mess to 12 seconds. Always 12 seconds. Or, well, at least usually 12 seconds. If there's a missed slot, then you can have 24 seconds or 36 seconds between blocks, but the normal case is 12 seconds. And this is a chart from back when Kyle Waters and Nate Marjorie were running Coinmetrics. And it basically just like really quickly shows that there's this immediate switch from the noise distribution to invariant block times with the blocks being 12 seconds apart. And then you see the second line above that's.
00:08:15.695 - 00:09:02.773, Speaker A: Oh, man, my cursor works. You have the second line where block times are 24 seconds, and those are right after a missed block. But the reality is that this chart's a little bit of a lie. And to understand why it's a lie, we need to look at the boundary of blocks. So the way that the system works right now is basically everyone uses MEV Boost. And I mean, often you'll say that it's like 90% of the validators use it, but the reality is that's like 98%. And the difference in this is things like min bid usage and client misconfigurations.
00:09:02.773 - 00:09:46.041, Speaker A: So sometimes the system just like falls back to normal usage, but the number is closer to like 97 or 98%. So we really should just assume it's everybody. From a timing perspective, the way the system works is that at the end of the block, t equals 0. On this chart, the proposer goes and requests a block from a relay. The block takes a bit of time to get to the relay, or sorry, the request takes a bit of time to get to the relay. The relay then returns a block. And so, I mean, the proposer calls for a block from like five or six different relays.
00:09:46.041 - 00:10:54.915, Speaker A: Each of them returns the block. The proposer chooses the best one, signs the header, and then once the relay sees that the header has been signed, they propagate the block to everywhere. But from a timing game's perspective, what we see is that this initial latency step before the relay returns the request means that it's not always actually 12 seconds. And you have some noise here and you can play around with it a bit. So when we sort of model this, what we find is that. Right, sorry, when we model this, especially if we look at data from maybe like a year ago, we see that the distribution of these times, that's the time that the relay gets the block that wins the auction, the profile is actually really wide. And over the last year there's been some big shifts in this that we'll probably talk about.
00:10:54.915 - 00:12:01.295, Speaker A: But if we go back a year, the median winning block time was something like 400 milliseconds and the most common one was like 100 milliseconds. So it's pretty low and it's not really a big deal, it's the system working as designed. But basically that's where this divergence between blocks and basically if we take any two random times on this profile, some will be more than 12 seconds and some will be less than 12 seconds. So if we take that and now we construct a bit more of a real picture of what block times are, we get this profile. So instead of this normal 12 second line, instead we have a bunch of blocks that take between 9 seconds and 15 seconds. And this is sort of the real version of the coinmetrics chart. So even though the timestamps on chain are 12 seconds, you get some blocks that are like 8 seconds and some blocks that are 16 seconds.
00:12:01.295 - 00:12:47.855, Speaker A: And if we take enough of this data, we can create a distribution of this and we get this nice symmetric distribution around 12 seconds. It's not quite normal, but you see that like the vast majority of blocks are between 11 and 13 seconds. And it's not really a big deal. But once you start to get these outliers that are like 9 seconds versus 15 seconds, all of a sudden that's like a 66% difference. And if you're on the winning side of this versus the losing side of this, it's a big deal. So how are we doing so far? Have I already lost you guys or are we doing okay?
00:12:48.315 - 00:13:20.545, Speaker B: I love this. This is great. I was just about to jump in kind of following, but can you make like an actual example of like what happens if a block gets accepted after eight seconds? Because like on the blockchain they're all like. If you look at the timestamps, it's like 12 seconds. 12 seconds, right. So how does that actually. Is it just like, okay, the winning bit has been submitted at four seconds before the actual block got included.
00:13:20.545 - 00:13:22.203, Speaker B: How does that work?
00:13:22.389 - 00:13:39.807, Speaker A: Yeah, so with the 8 second block, what that would mean is that the block before you took close to 16 seconds. So then when you're building your next block, you're starting four seconds late and you only have eight seconds worth of data. If you're being like an honest proposer proposing blocks at zero seconds, maybe the.
00:13:39.871 - 00:13:47.315, Speaker D: Diagram is very helpful. The first one you were showing about how the timestamp within the slot work.
00:13:51.145 - 00:14:29.015, Speaker A: This one, if you imagine sort of like two of these plots back to back. Right? So this is the first slot here. And then you have another slot that starts here and extends past to the right and extends all the way to 12 seconds for the next block. So what you see if you have a really late block and we shift this sort of process later to maybe like over here, it starts at like 3000 milliseconds. Then all of a sudden the sort of bits at the start of the block over here are kind of being cut off and you see a shift in this whole profile over to the right.
00:14:31.435 - 00:15:07.805, Speaker D: Yeah, My way of reading this chart is basically like as indicated here, you see like the X axis is a T. And we know that Ethereum is operating on like 12 seconds block auction. So like every 12 second is a slot. And the T equals to zero here I think doesn't really have any enforcement. Right. Like the only thing that you will get punished or like slashed for or not really slashed. But the only hard rule here is the T equal to 4, which is labeled as attestation deadline.
00:15:07.805 - 00:15:53.423, Speaker D: So my understanding, correct me if I'm wrong or confirming if there is, it's correct. It's like the proposer will have to get the block before the T equals to 4, otherwise then it's a missed slot. And so T equal to zero is more like a suggested time for you to basically start to get the block. But there's no real law or anything to enforce you to do it at the t 0. So you technically can do it across the 12 second slot as long as it's before t equals to 4, right. And then on a 12 second horizon t equals to 4. If as a benchmark, the start of the slot is T minus 8 and the T minus 8 is the last slots, T equals 4, right.
00:15:53.423 - 00:16:39.213, Speaker D: And so to box question, what happens if a block at T minus 8 get confirmed? That would mean if the last block t equals 4 just got accepted, say at t equals to 1, t equals 2, then there's only one or two second of pending transaction comes in that can be included in the next block that you're building. So this block will be fairly empty or like fairly low value. And it wouldn't make sense for any proposer to really just like accept a block at T minus 8 because supposedly you could have had a lot more transaction even in the mempool to come in to have a higher block for you to get higher rewards is my understanding.
00:16:39.309 - 00:17:12.789, Speaker A: Yeah, that's right. And sort of the reason the system works like this is just because it's like a decentralized P2P system and you sort of have to factor in latency. Right. So I mean if you have a bunch of people in Australia and some people in North America and some people in Europe, like you need to allow some time for these signals to propagate. And under sort of like traditional non MEB boost, that system makes a lot of sense. But because the MEB boost system is extremely highly optimized, we really don't need this four second gap.
00:17:12.957 - 00:17:34.027, Speaker C: Do you know the rationale behind block time being 12 seconds? I'm guessing it's very much tied to hardware limitations and trying to make sure you can run this on as low as possible hardware. But do you know why 12 seconds specifically or. Yeah. Any reasoning behind it?
00:17:34.091 - 00:17:58.755, Speaker A: I don't think there's necessarily a firm reason. Right. There's a lot of discussions today about changing it. Some people want to move to shorter block times. But the downside of that is most apps have been created assuming that block times are 12 seconds. So if you cut that in half and who knows what you're trying to time in that, you just run into big problems.
00:17:58.875 - 00:18:14.931, Speaker C: And I have another question, but that's actually tied to the first slide you had. How does a block happen before? Like, you know those blue outliers in the first part? What causes those to not follow the trend? What happened there?
00:18:15.083 - 00:18:49.599, Speaker A: That's a really good question. So basically what happens with Bitcoin is that everybody works in these pools, and when a block is found, it takes a little bit of switching time for pools to transmit that information to all their miners so that their new miners can start working on the new blocks. So, I mean, this is a logarithmic chart on the x axis, in case you didn't notice. So most of those outliers are at like 10 seconds, 15 seconds. And during that time, you just, you don't really see that many blocks.
00:18:49.767 - 00:18:51.039, Speaker C: Okay, cool.
00:18:51.127 - 00:19:03.269, Speaker A: For Ethereum, on the other hand, when Ethereum was proof of work for you were to create the same chart for that, the most common block time was like 0 seconds or 1 second. So it's kind of crazy.
00:19:03.397 - 00:19:17.797, Speaker D: Why is that? I have one assumption. I remember there was a lot of miners trying to create empty blocks when there was 2e rewards for block level. But I don't know if that's why or what you referred to.
00:19:17.941 - 00:19:35.105, Speaker A: Yeah, so the incentives for creating an empty block were almost as strong as creating a full block. And the idea is that if you found a block right away and you didn't fill it, all of a sudden somebody else might come around and find it. Right. So if you waited too long, you'd lose all your rewards.
00:19:35.565 - 00:20:18.675, Speaker B: So if I understand this correctly, so I get picked as a proposer, like I'm a validator, and then I get a proposal slot, Right? And then basically what you guys have just explained is I then have kind of 400 milliseconds to actually fulfill my promise or fulfill that duty of proposing a block. And in that timeframe, most often, this will kind of take 200, 300 milliseconds or something like this. But in extreme cases, and because of global network latency, I have a slot of to actually 4000 milliseconds. Is that like, did I understand that correctly?
00:20:21.735 - 00:21:12.091, Speaker A: Okay, so you know ahead of time when your block's going to be. So it's not like you just find out and instantly you have to create this, right? They assign slots a bit in advance and then they're 12 seconds apart. So 12 seconds being 12,000 milliseconds. And when a block finishes kind of thing, you sort of have this 4,000. You have this four second period in which you must propose a block, otherwise it's missed. And usually like if you have a highly optimized system, you can take care of that inside of a couple hundred milliseconds and then the block will propagate to the network really quickly. But if you're not a well connected validator, then you're right, it could take up to the 4000 milliseconds and that's why the buffer is this long.
00:21:12.283 - 00:22:02.966, Speaker B: Okay, so basically after like the previous block has been included in the chain, then I kind of like my Target time is 12,000 milliseconds, but in extreme cases I can take up to 16,000 milliseconds. And basically what we are discussing here is people abusing the fact that you have this kind of like, like it shouldn't even be because like the block before me can also be delayed. So like then my problem, then I get less time basically. So, but then I, so there's some, there's some like kind of boundaries here where it's like this should happen at a certain UTC time or like how does the blockchain like internally even keep track of like this time? Like is it like the target is always 12 seconds? I guess?
00:22:03.053 - 00:22:16.423, Speaker A: Yeah, the target's 12 seconds. I think the only thing that keeps track of it is every individual nodes, timestamps on their local machine and you kind of create this global consensus out of that.
00:22:16.519 - 00:22:33.067, Speaker B: Okay. And then from the time of the merge until infinity, or like a protocol change, I guess it's always like within that 12 second interval there should be a new block that is propagated and, or like validated across the network.
00:22:33.251 - 00:22:33.995, Speaker A: Yes.
00:22:34.155 - 00:22:46.495, Speaker B: Okay. And then if the person before me, or like the validator before me, the proposer before me misses there, like they kind of steal time from me to submit my next 12 seconds epoch.
00:22:47.355 - 00:23:02.095, Speaker A: Yeah. So if you're right after somebody who steals time from you and you're an honest actor, that means you could have as little as eight seconds. Whereas if you're somebody who's doing the stealing, you could have up to 16 seconds.
00:23:02.435 - 00:23:35.311, Speaker B: Now I think we can continue. Now I've understood why some blocks can take eight seconds where it's like, okay, somebody has stolen four seconds from. I don't know. It could also be network connectivity issues, but arguably that's probably not the case. So then I only have eight seconds. So that's how we get to eight seconds block. And the extreme case of 16 seconds is somebody who just plays those timing games and now we're going to learn how kind of far spread they actually are and why it matters.
00:23:35.311 - 00:23:37.719, Speaker B: Okay, cool. Thanks.
00:23:37.887 - 00:24:26.853, Speaker D: To point out as how this chart nicely noted that proposer has two steps to get the block right. So the green one here shows that first they need to get header. And, and for get header the proposer only sees what's a block hash and what's the value. And so that's like a rational decision step, basically saying, okay, I'm going to know what's the block value I'm going to get and then I'm going to do the signing process to actually say I'm committing this and I'm going to then get payload, which is like get the full block. And I think the two rules here is that you want to get as high value as possible for the block. So you want to. My understanding is you want to delay the get header call as much as possible, assumingly the block value is going up.
00:24:26.853 - 00:24:45.323, Speaker D: And then the second rule is you can't get payload later than t equals to 4000 milliseconds otherwise you're missing slot. And so with this two rule then how the proposer will play to their best interest is basically the timing and I think the data always going to tell us. Yes.
00:24:45.379 - 00:25:12.925, Speaker B: Okay, hold on, we opened another box of Pandora here. Get header is me as a proposer calling a relay and getting basically the metadata about the block. Right. It's like I get the block hash and then I get how much in rewards I get. And then once I actually commit to okay, I'm going to pick this block and I'm actually going to do this, then that's the get payload call. And then I actually kind of propagate the book.
00:25:13.425 - 00:25:16.245, Speaker D: Yes, that's like commit reveal scheme.
00:25:16.905 - 00:25:18.289, Speaker B: Okay, yeah.
00:25:18.337 - 00:26:24.035, Speaker A: And with a get payload call, the original sort of idea is that they return it to the proposer and the proposer propagates the block. But because relays are so interconnected with everybody, usually with the get payload call, the relay is just like, okay, we've seen that the block is signed, now it's safe to distribute it everywhere and the relay actually does the propagation. Okay, so we got a bit ahead of ourselves with that conversation and now we're going to talk about how block values change. And there's, there was this great post from Thomas Cherry from the EF that Modeled this about a year ago, and he basically showed that the median increase in a block is linear with time. And this is the model that people use, mostly because it's very simple. And we see that if you wait an extra two seconds on a 12 second block, then you get like an extra 20% of value almost. So basically what happens is proposers are incentivized to wait as long as possible to get their block.
00:26:24.035 - 00:26:58.283, Speaker A: And this is kind of the basis of timing games. The longer that you wait, the more value you get. But then as Danning suggested as well, on the other hand, the network balances this out by adding some risk with the attestation deadline. So basically, if validators wait too long, then they risk their entire block, not just the little bit extra that they're getting. And then the block doesn't make it on chain. So you have these two competing forces. One is the longer you wait, the more money you get.
00:26:58.283 - 00:27:42.971, Speaker A: And the other is that if you wait too long, you lose all your money. And if we combine these two profiles, then when I ran the numbers about six months ago, I found that the best time to propose a block was at just after two seconds. And by doing that, you get an extra 15% in value. But of course, the downside again is that if you're slow and you wait too long and you're already playing these games, then you lose all your money. And that's kind of the theory about optimizing timing games. And yeah, so that's why these actors are doing this. And when I say these actors, I really only mean two or three entities.
00:27:42.971 - 00:28:24.535, Speaker A: You have Kiln, who's playing very aggressive timing games. And we'll focus a bit more on them later. We have P2P who has been really public about their timing games, but they're really not playing aggressive timing games. And Chorus 1 sort of falls into the same group, but Chorus 1 is a pretty small validator set as well. All of those three are also actually lido node operators. But PDP and CHORUS don't play timing games on their lido nodes, although Kiln does. So when P2P began playing timing games, their profile shifted like this.
00:28:24.535 - 00:29:39.545, Speaker A: And it's really clean diagram. Basically, before P2P started playing timing games, they had their maximum at about 0 seconds, which is actually probably more than honest behavior. Right? I mean, back at this time, the median block time was, or the median bid arrival time was something like 400 milliseconds. So by P2P being such a heavily optimized and interconnected validator, what they actually found is they were losing money compared to just like a normal home staker who's using MEV boost. And I mean that's kind of a screwed up system. So what they decided is that if they started delaying their blocks, they could catch up to the rest of the system and not really add any risk onto the network. So they started, so they started introducing artificial latency into the system and everything was good with the exception of a lot of community backlash, people complaining about why are you doing this, why are you trying to damage the system, why are you adding risks? But the reality is that they were just losing money compared to everybody else because they were too efficient.
00:29:39.545 - 00:30:28.905, Speaker A: And you still do see a lot of node operators like that today. Some of the ones like Block Daemon or I don't know, basically if you think of any of the like, well behaved professional operators, they're actually losing money compared to somebody like a Rocket Pool staker just because their setup is faster. So if we look at the chart for Rocket Pool around the same time though, we actually see some interesting stuff too. So Rocket Pool, if you don't know what they are, is a decentralized validator set and it's not really possible for them to coordinate. Yet we still do see similarities in the profile. Starting in December their profile changed a lot. It started to shift later.
00:30:28.905 - 00:30:47.335, Speaker A: So the question that kind of comes from here is if it's not even possible for them to play timing games, how did they start playing timing games? And I mean, I'm sure Danning knows the answer, but do Boxer or Hildabi have any ideas what started happening?
00:30:48.555 - 00:30:58.415, Speaker C: I'm not sure whether it was there like and I know, I actually have no idea what happened. Rocket Ball is very intriguing given, like you said, it's impossible to coordinate.
00:30:59.155 - 00:31:05.855, Speaker B: Can we quickly unveil what rocketpool is? I think I know, but one of you will be better explaining.
00:31:06.675 - 00:31:44.225, Speaker C: So Rocket Pool is essentially anyone can run his own node, but since the requirements for terms of eth are very high, 32 eth, there's a way to kind of someone can like pull eth into a pool and then someone else can say, hey, I'll run it, but only commit certain portion of that eth and take some of the rest of the eth from that pool to essentially run a node at lower costs and then distribute the rewards in the end. And that's all decentralized.
00:31:45.245 - 00:31:55.883, Speaker B: Okay, and now we're saying they can't play timing games because they're all bound to this. Like the rules of this decentralized peer to peer network, which basically makes up one validator at a time, right?
00:31:56.059 - 00:32:06.139, Speaker C: I think anyone can. But it's weird to see all of them coordinate at once when there's really no communication channel between all of them. Really.
00:32:06.307 - 00:33:04.439, Speaker A: Yeah. So, I mean, in theory they could play timing games like each operator can choose to, but because they just like talk in discords and stuff, they're. They're not out here modifying consensus clients to intentionally delay things, or at least in theory. So the answer anyway is relays. So starting right after PGP decided to introduce delays into their blocks, Blockzer realized that if they started to do the same thing, then all of a sudden they could win more blocks and get more value for their validators. So you see the shift in the profile where all of a sudden the yellow line moves particularly quickly to the right and that's Bloxroot. And then after Bloxroot started to increase their share, sort of Ultrasound realized.
00:33:04.439 - 00:34:01.939, Speaker A: Ultrasound's another relay. They realized that if they didn't start doing the same thing, they were going to lose all their market share. So you have these two major entities who started doing this and they became much more powerful. Whereas on the other hand, relays like Flashbots or Agnostic, they decided not to play these games. And all of a sudden the Flashbots relay market share dropped from something like 30% down to less than 10% often. It's clear that the system is working for Bloxroot and for Ultrasound, but they're kind of behaving strangely, right? They're not doing what the validator asks, they're doing what is best for the validator. And I mean, this is, it's not like necessarily a great situation, but also like, who's going to complain about making more money? Right?
00:34:02.067 - 00:34:24.337, Speaker B: Just to make sure I understand this, like, if I call get header, is there now a 500 millisecond delayed response? And that's how this works. Or like, how. Because the relay is essentially just like, they're collecting all the bits from the block builders and then like they just get called. Right. But where do. Do they just delay that call? Or like, what, what happens?
00:34:24.521 - 00:34:55.645, Speaker A: Yeah, so relays have a bit more information on who's actually calling. Right. And they know where the validator is located. So they can determine that, like, okay, if we add an extra 500 milliseconds of latency, it's not really going to add any risk to the network. They're not going to be more likely to lose the block. So they can Add in like a 500 millisecond delay and there are some limits on this. The big one being that consensus clients have a timeout in case a relay is down or is returning data.
00:34:55.645 - 00:35:10.565, Speaker A: And I think the most common one is at like 1000 milliseconds. So at that point, if relay is trying to lay any longer, they're just not going to have their bits considered by the proposer.
00:35:11.985 - 00:35:32.075, Speaker B: Okay, wow. So I got to assume there also is competition between relays. And now the relays have basically found. Okay, if I configure my validator, do I configure multiple relays that I call or do I just call one relay?
00:35:32.855 - 00:35:36.407, Speaker A: You have the option, but most people configure multiple relays.
00:35:36.591 - 00:35:59.237, Speaker D: Yeah, I run a home validator and when I plug into mapboost, I'm like, why not all the relays? Because the more relay I will get more values to compare and the higher value I may get. Unless there's a layer of social credits there. I guess if we know that relay is well known to be not a good player, then I may not.
00:35:59.301 - 00:36:40.605, Speaker B: Right, okay, but now then you get chosen for slot and then your relay starts calling your validator starts calling all of the different relays. And then some relays will answer fast and some relays will answer slower. And then like how, like so, and then you said there's a timeout of a, or like there's a client timeout of a thousand milliseconds. So basically in that one second, like whichever like relay returns the highest get block is like the highest, the highest value block, then I choose that, then I choose that one. Is that kind of the logic here?
00:36:41.265 - 00:36:52.505, Speaker D: Yeah, yeah, yeah. And like if I only get a bit from flashbots and blocksprout haven't responded, I might as well wait until I have to respond, right?
00:36:54.285 - 00:36:54.845, Speaker A: Yeah.
00:36:54.925 - 00:37:15.895, Speaker B: And then because those relays like they just wait for more bits of block builders to come in which linearly increase with time, they're just like, okay, we can just push the system to its thresholds, get the actual latest bits that are physically possible. Oh man, this is. Okay, I understood.
00:37:16.475 - 00:37:16.939, Speaker A: Yeah.
00:37:16.987 - 00:37:38.163, Speaker D: I guess if proposer asked before T equals to 1000, the blocks really be like, you should have not asked that early because whoever asked earlier is kind of dumb in this case because you always wanted to wait for longer and then they're like, let me do this for you and I'll wait until T equals to one to give you the blood because it.
00:37:38.219 - 00:39:15.365, Speaker A: Yeah, exactly. And even before relays started delaying it, there was still this like big difference, right? So Boxer, you're in Europe, if you're proposing a block and let's say you're using ultrasound and Flashbots, when you make that request to ultrasound, if they're not adding any delays, then you're going to get your response in like 50 milliseconds. But because the latency over to the west coast of the United states is like 200 milliseconds, you're going to get a block back from flashbots like 400 milliseconds later and flashbots is going to have sort of that latency time to build a better block than you. So blockthrough basically saw that because they're a very well connected validator set, they were just losing money or, sorry, they weren't winning blocks because people had their requests traveling further. Okay, so now what we can do is we can sort of look at the data for all blocks at one relay and we can start to normalize what's actually happening. So if we take like a rolling one day average, I think this was based off of a 12 hour average or something, and we compare the winning Rocket Pool block times to the median winning block time at the relay where the block was first found, we see that the profiles once again match up. So the big change for Rocket Pool was a change at the relay level.
00:39:15.365 - 00:40:05.277, Speaker A: And the validators for Rocket Pool aren't actually coordinating. Everything's good, system works again. But on the other hand, if we try to do the same thing for P2P, we see that although the profile does shift and there's a bit of a change, there's still this big gap. And maybe the nice part about this GIF is that it shows that before PTP started playing these timing games, their profile was well before 0 seconds. So this kind of gives a bit more credence to this idea that PTP was this really well connected validator and they were losing money and now they're adding this artificial latency and they're actually making more money than everyone else. Okay, so I was going to stop for questions again. I know we've talked a lot.
00:40:05.277 - 00:40:09.945, Speaker A: Are we still doing okay or where are the pain points there like two GIFs.
00:40:10.565 - 00:40:18.079, Speaker B: Can you express in words what is the difference that we actually see now?
00:40:18.277 - 00:41:17.115, Speaker A: Okay, so for the gif that doesn't say normalized in the top right hand corner, that's the same as the P2 as the original P2P profile, which is completely unnormalized and just shows the winning block arrival times at the relay so this is. If we imagine this, like, long chart back way back when we'll go back there quickly. This is where P2P showed up in that chart, which is somewhere like this after their change. And initially was somewhere, like, over here. And then when we start to normalize it by the relay, we look at here where, like, the average time for the relay came in. And when we account for that, the two profiles, I guess for pgp, they don't come together, but for Rocket Pool, they come together.
00:41:18.735 - 00:41:38.805, Speaker B: Now I see what normalize is basically, like, you're adjusting for the delay that the relay has introduced now. So it's like this is now purely isolating the actions of p2p.org which is like the validator operator. So they are additionally introducing a timing delay here.
00:41:39.585 - 00:41:40.405, Speaker A: Yeah.
00:41:42.465 - 00:41:48.285, Speaker B: Okay. Sorry. Sorry if that was. If I took a bit long, but okay, I see.
00:41:51.145 - 00:41:52.725, Speaker A: But other than that, we're good?
00:41:54.305 - 00:41:55.473, Speaker B: I think so. Yeah.
00:41:55.609 - 00:41:55.921, Speaker A: Okay.
00:41:55.953 - 00:41:56.565, Speaker C: Yeah.
00:41:58.825 - 00:43:21.305, Speaker A: So the last thing I really want to talk about is Kiln. So Kiln is the one validator that's actually playing the most aggressive timing games. And if we look at their block profile, it's very obvious the average block for them is at, like, two seconds. But for everyone else, it's still before one second. And the natural question that follows is, like, how much of a benefit is Kiln getting from this? And how much damage are they doing to the network? So Tony from the EF has actually kind of led the charge on this, and he basically looked at the attestation data for blocks by Kiln and by other posers and found that for kiln blocks, about 10% of validators don't attest to the right block in time. For everyone else, it's basically just a couple of percent. But Kiln is clearly pushing things, and the question sort of becomes like, is Kiln pushing things too far? Like, obviously, the people that are using Kiln are really happy, but is this okay for everybody else? And, I mean, I think there's still a little bit of debate in the ecosystem, but I think there's very few people that are kind of happy with Kiln at this point.
00:43:21.305 - 00:44:03.945, Speaker A: Right. They're clearly starting to affect other people, and it's probably time to be a bit more aggressive in calling out their behavior. But, I mean, that's obviously just a personal opinion. Everyone's entitled to their own thoughts. So how much money is Kiln actually making from this? We do see that they're getting a pretty good edge. But basically, if instead of using MEV Boost, Kiln built their blocks locally, they would only get something like 19% of their current rewards. And then from opting into MEV Boost, they get an extra 72%.
00:44:03.945 - 00:44:44.797, Speaker A: And obviously it makes a lot of sense to do that. And that's why MEV Boost is really popular. But the timing games part is only like 10%. And even though that's still kind of a lot, and I guess that's why Kiln does it, it's not like that much. So one person who's really been talking about this a lot is Yuri from Bloxroot. And he kind of tries to drive home the point that MEV rewards are actually really small. And maybe putting some words into his mouth, it doesn't really make sense to play these games, which is a little ironic considering that Bloxroot is delaying blocks.
00:44:44.797 - 00:45:27.105, Speaker A: But he's certainly somebody who's been pushing that we should focus less on ME rewards. So if we factor in all rewards. So like everything you get for running your validator, whether you propose a block or not, these games kind of mean nothing at this point. Consensus rewards are something like 80% of value. So that extra 10% from timing games is actually 20% of 20% or sorry, 10% of 20%. So you really only get like an extra 2% in total. And if we're putting the network at risk for an extra 2%, we're kind of just being stupid.
00:45:27.105 - 00:46:21.235, Speaker A: And as much as I think these games are really cool and they're a very fascinating thing to look at in data, people realistically just we should stop playing them. The problem, of course, is that, I mean, we're in a decentralized network and there's not really good ways to stop people from doing it. So people tend to revert to social pressure. But there are a couple of possible mitigations and things that people have proposed. So one of the original ideas came from Casper at the ef and it was basically to turn relays into policemen. And unfortunately, this really isn't something that relays want to do. They already aren't making any money, so giving them more duties is kind of a non starter.
00:46:21.235 - 00:47:22.925, Speaker A: And I mean, as soon as one relay doesn't behave and tries to do their own thing, all of a sudden they just start to beat all the other relays. So unless you can have this perfect social coordination that never breaks down, it's really just an idea. Another idea was an option that's been pushed a lot by Max Resnick from SMG is to start adding missed slot penalties. The idea Here is that if we punish validators more for missing blocks, it kind of changed the risk calculus and it makes people want to play less aggressive games. But the problem with this is that solo stakers are kind of notoriously bad for their uptime, so it would hit them a lot. And overall, it's probably just not a good option. The sort of more nuclear option is people are discussing changing the entire auction design.
00:47:22.925 - 00:47:59.851, Speaker A: And regardless of timing games, this is probably something that's going to happen anyway. I mean, there's lots of discussions about moving to slot auctions and people talking about things like execution tickets. And there's lots of research ongoing about the issues with these things and whether they'll actually help the situation. But if things got bad enough quickly, I mean, in theory, we could just swap the entire auction out that nav boost uses or enshrine something else in protocol. But those are really big changes. So it's kind of scary. And that's kind of where I fall, where none of these are good options.
00:47:59.851 - 00:48:39.975, Speaker A: So the best thing to do is kind of just to sit back and do nothing. Like, at this point, even though Kyle isn't really being a great actor, they're not really doing any damage to the network. So until more people start playing these games, good to actively research solutions. But whether it's actually time to implement a change, it's probably not in my mind. It's probably not a priority. But also, like, I don't know, some people like to freak out over this stuff, so maybe, maybe we'll see a change. But I don't think that there's anything proposed for the next couple hard forks.
00:48:39.975 - 00:48:50.945, Speaker A: And that's kind of my story around timing games. I mean, I have extra slides if you guys want to see more things. But.
00:48:53.085 - 00:49:05.385, Speaker B: I got questions. If Kiln is losing, like, 10% of their blocks are, like, if you. If you don't fill your slot, you also don't get the consensus rewards right?
00:49:06.245 - 00:49:08.317, Speaker A: So, yeah, so Kyon isn't missing.
00:49:08.341 - 00:49:11.355, Speaker B: I'm factoring that in. You. Okay, so they're not.
00:49:11.735 - 00:49:58.105, Speaker A: So what that means back here is that 10% of validators aren't voting on the right block. So because you're in, like, a decentralized consensus, you still have 90% that are voting for it being the right block on average. And that's enough for it to make on chain. Obviously, 10% is just an average here. And it's actually a distribution where, like, I don't know, sometimes it's only 50%, and often it's 100%. But as long as you reach some point, which I think is, I mean it's probably more than 50%, you end up making it on chain. And the calculus is a little bit more complicated because of this thing called proposer boost.
00:49:58.105 - 00:50:30.099, Speaker A: So basically the next proposer in the system gets an additional 40% weight for their choice. So I mean they're like, they're the one driving the ship, so they have a bit of an extra sort of thing. So if at least 30% of the network misses the block and then they also miss the block, you could all of a sudden have like this 30% plus 40% voting for the wrong block. And then all of a sudden we're at 70, 70 and you could get a reorg quickly.
00:50:30.267 - 00:50:46.555, Speaker B: Okay, so they're just propagating their blocks so late that then on average 10% of attesters kind of have the wrong, or like they attest to the wrong block. Is that, did I understand that correctly?
00:50:46.675 - 00:50:47.795, Speaker A: Yeah, that's the right idea.
00:50:47.875 - 00:50:54.215, Speaker B: Okay, I see. And who, who is, who is killing even or however that entity. Yeah, kill.
00:50:54.395 - 00:51:07.463, Speaker A: I mean they're, they're just a validator set. They run validators for a lot of other entities as well. For Lido, I think they run some for swell, but they're, they're just a node operator basically, and that's what they do.
00:51:07.559 - 00:51:53.855, Speaker B: Okay, so the social pressure here would be lido being like, okay guys, cut the crap, otherwise we're going to cut you from our validator set or whatever. But I guess that's on Lido governance or something. Or like, yeah, I guess the end user social pressure would be not using Lido because lido uses kiln. But that's a very long road and I guess it's not very feasible to actually do this. But remind me of the. Or tell me about the risks that kiln is introducing to the network here. What is the actual downside of them? Or I don't know if I see this and I'm like, yeah, 10% of people attest the wrong blog, what's the big deal? Maybe, maybe shed some light on that.
00:51:54.475 - 00:52:52.995, Speaker A: So maybe the most interesting part about this is that when 80% of your rewards come from consensus, if 10% are all of a sudden missing this, then you get something like 8% of rewards missing. Or sorry, the consensus rewards are like, are broken down into many parts. So voting for the correct block is only like 20% of the 80%. But all of a sudden if 10% of people are voting for the wrong blocks in this 20% of the 80%, all of a sudden you see that something like 2% or 3% of value is being missed by other validators. So when there's a block that's actually longer, that's coming from Kiln. The funny part is the entire network as a whole sees fewer rewards. Even though like Kiln is getting an outsized share, everybody else is getting less.
00:52:52.995 - 00:53:00.031, Speaker A: And on the whole, even though they're using 14 seconds instead of 12 seconds, the rewards for everybody are smaller.
00:53:00.143 - 00:53:12.253, Speaker B: Okay. So they are just deploying. It's kind of a maximum greedy strategy. And it seems like very short term, I don't know, short term greediness for long, like just for nothing essentially.
00:53:12.389 - 00:53:48.779, Speaker D: My understanding of like the kiln situation is basically sounds like they're trying to get the 1.9 extra percent from timing game. But as Dida always said, they're also losing money from the miss to vote for like the 80% times 20%, which is almost also like 2%. And so they're like, they're trying to like they have a full bucket of things and they're still trying to like pick up something else from the ground. And meanwhile they're doing that. They're like, it's like, you know, had to drop some stuff on their hands already, so it's like, doesn't make sense at all.
00:53:48.867 - 00:54:00.235, Speaker A: Yeah, so I definitely think it makes sense for somebody like P2P to just like add a little bit of latency. But when you get to the point of like Kiln actually delaying this long, it's kind of crazy.
00:54:00.395 - 00:54:05.442, Speaker B: Okay, so the state of Ethereum today is basically, we now have 13.5 second blocks.
00:54:05.546 - 00:54:10.653, Speaker A: Some people have 13.5 seconds and some people have 10.5.
00:54:10.829 - 00:54:31.901, Speaker B: Right, but okay, so, but yeah, there's now kind of like a band around like the block thing. It's like the shortest is 8 and yeah, the largest 16 like you showed in your, in your slide. But like we, we've like significantly deviated from the, the standard 12 second that it should be by the system's design.
00:54:31.973 - 00:55:02.295, Speaker A: And I think particularly if we look at just inside these extra slides, if we look at what Bloxroot is doing, they have their average at like 750 milliseconds, which is kind of funny in how it carries through into this profile because all of a sudden if we drop the binning, we actually see these strong spikes at blocks roots times where they have their hard cut off.
00:55:02.915 - 00:55:56.695, Speaker C: I have a question that's not necessarily related to any particular slide, but I think more of like protocol, design, decision and for proof of stake, it was designed with mev. Not much in mind, I guess. There was no entrainment of anything like ME Boost, although it later became very prominent in terms of percentage of rewards. Much more so than timing games. And for a while there was a discussion about maybe in training it was and it seems to have dissolved off or at least from maybe. That's my Twitter timeline. But do you know what the state in this is? Is there any discussion of entraining into the protocol? Are there any pros, any cons? I think the discussion seems to have shifted to timing games being much more of an urgent matter.
00:55:56.695 - 00:55:59.075, Speaker C: Yeah. What do you think on the topic?
00:55:59.155 - 00:57:09.125, Speaker A: Definitely still something that people are trying to do, right? So we call it enshrined proposer builder separation. And POTUS from Prism is kind of the person that's pushing it the most. The main difference that they're trying to do right now, I guess, or maybe not the main difference, but the big change is that they're considering moving to slot options instead of block options. So with the slot auction, instead of a proposer committing to a block or to a block hash, they commit to a builder's pub key. And with that you just say like, okay, like Beaver build is going to build the block and then Beaver Build just like all of a sudden has complete control over it and they can play their games however they want. But you sort of like you shift away from proposer timing games to kind of builder timing games which like the question is, is this better or is this worse? And it's probably a little bit better because Beaver is very well connected and it sort of equalizes the playing field for proposers, but it's just another can of worms that we're opening.
00:57:09.785 - 00:57:51.875, Speaker C: Okay. And there's a more recent discussion around Layer 2s and how MEV plays a role. I think in their current state most if not all layer 2s are have a centralized sequencer and therefore the type of MEVs is slightly different because you can have like back running, you can have single transaction like Atomic Arbitrage, you can have Sextex arbs, but you can't really have front running or sandwich tax. Have you looked into any layer 2 data and do you have any thoughts on it? There's also. Yeah, I'll first start with this.
00:57:52.775 - 00:59:00.355, Speaker D: I would say the state of art is still there is no number that is in consensus as measuring L2 MV. Like Dolby has this data set on Dune and there were a few papers from academia side but There are more like just a static capture and are fairly outdated which is our two years ago kind of data. Besides that we don't really know any other L2 data. So yeah, Dolby is the only one who actually curated a live capturing of MEV data. But we will have to see what the searchers say or if something like libvm kind of data to come up and compare because like even the L1Mev data is a mess today. Like we have eigenfy, we have MAP inspect, we have libmev, but no one agrees with each other including even the new one from Server Labs. Yeah, so and like everything seems to be based off like heuristics and when the heuristics is slightly different the numbers can look really different.
00:59:00.355 - 00:59:27.285, Speaker D: Yeah, so we'll see. I think it definitely requires a lot of like searching experience to make it really good. Like for example people appraise LIBME data set to be seems to be the most accurate. They themselves was a searcher and they're also a builder these days. So I'm looking forward to that. Flashbots is trying to fund like L2MEB projects. So yeah, also a call out to any person listening.
00:59:28.625 - 00:59:45.281, Speaker C: Okay, I still got work to do on my data sets and maybe you can help a little bit. I think Librem EV was praised by in an interview with how's it called From Subway. I forgot his name.
00:59:45.313 - 00:59:46.681, Speaker D: Jared from Subway.
00:59:46.873 - 01:00:17.645, Speaker C: Yeah, there was an interview with him where he was saying Liberty had the best data set and I think that kind of boosted the confidence in the data set. But yeah, I agree there's work to do. I think there's also different types of mev like sex Dex arbitrage is like the hardest I think to really single out properly and it's also the biggest in terms of mev. So it's a big thing that we need to work on, I guess.
01:00:18.405 - 01:01:30.733, Speaker D: Yeah. And I feel like I wrote a L2M EV discussion post in Flashbots forum a while ago using Adobe's dataset and I think like the dataset at least like pent a fairly fine benchmark at least to start with where I'm seeing a lot of like arbitrage or atomic MEV happening and mostly arbitrage. But I don't see many sandwiching which kind of makes sense with the state of L2 today because there's no mempool, it's single sequencer. There was sandwiching happening I think for a while for optimism which was in line with the info I have where I think the mempool was leaked for a little bit of time so that kind of makes sense. So yeah, that's I think where we're at today and I guess to expand on the topic here is I think there's no really like PBS research done for L2 because just because the whole setup is different today right now it's like single sequencer and there's no mempool really and there's no like proposal builder separation. So yeah, I don't think there's timing game there neither to talk about.
01:01:30.829 - 01:02:22.913, Speaker C: Yeah, I have a slight follow up question. I think a discussion lately with Justin Drake and Dan from Blockworks and other people about mostly base and how a lot of its revenue comes from mev and some were saying that there was incentives to essentially not decentralize because they would actually lose out on mev. Do you, can you, do you understand that argument? Can you explain it or. Because my understanding is that the coinbase probably making it more towards themselves rather than individuals by not decentralizing whereas decentralizing would mean more people can participate and kind of take some of that mev. But maybe I'm wrong here. Yeah, yeah, yeah.
01:02:22.969 - 01:03:46.659, Speaker D: To bring to also just to provide a little bit more context of what I saw on my timeline and I also don't understand pretty much the discussion. I also would look for anyone who understand here. Marnison is like first of all like Max Resnick come out and says the current EF roadmap doesn't make sense because it's L2 centric and L2 is you know like it's not really like how to say beneficial to like the east value Capture neither and L2 would want to make money. And then there is discussion with Justin Drake and I think he quoted something wrong in the beginning he was saying like most of the actually rewards or like basically fee for L2 comes from base fee and that is trying to show that like most of the revenue fail to validator comes from like block space demand or like basically congestion rather than I think a MEV fee. But then somebody used a Michael chart saying no that's not true like 90% of the L2 fee comes from priority fee. So then at this point afterwards I'm lost and first of all there's a bunch of assumptions so there's the segmentation base fee and priority fee. Why certain fee comes to base, certain fee comes to decentralized validator.
01:03:46.659 - 01:03:58.345, Speaker D: Why cannot both of them come to decentralized validator is my question and I don't know if anyone else here was following the whole debate or we're just confusing people here.
01:03:58.685 - 01:04:16.345, Speaker B: I think we're, we're largely confusing people but like maybe one one. Like how like did somebody accuse Coinbase of actually ordering blocks within their sequence or like making like MEV profits from their own sequencing activities?
01:04:17.185 - 01:04:31.633, Speaker C: No, it's not like BASE just is the example because it's like the biggest blockchain in terms of revenue. I think maybe Arbitrum is close by, but I'm not sure. I think Base is pretty high up obviously and therefore it comes up as.
01:04:31.649 - 01:04:40.365, Speaker B: An argument, but there's no MEV boost for Base. How would Coinbase be making MEF profits?
01:04:40.665 - 01:04:59.035, Speaker C: So the way Base works or I guess maybe most L2s these op stack is that it's not really an EIP 1559 market and it's. There's kind of a first come first serve kind of style of things and therefore they have more control over where the.
01:04:59.155 - 01:05:56.803, Speaker D: Sorry, you're talking about Arbitron or Base. I think Base is gas priority fee auction. Arbitron is first come first serve. To answer back, connecting to Boxer's question, there is MEV even without MEV boost where like now Base basically is the only proposal or you can think it as like the only miner in the proof of work day and they basically see all the transactions coming in and they can just order it by their want, right like and they, they can order by priority gas fee from high to low but they can also try and like arrange them to have the maximum like value extracted or add anything. It's just like theoretically it's possible but we're not saying like they are doing that. But I think the accusation of saying like most of value comes from MEV would be saying a lot of the gas fee paid out or like the builder tip. I mean yeah, you're right, there's no ME boost.
01:05:56.803 - 01:06:02.749, Speaker D: So everything will be attached to priority fee are coming from MEV profits of the searcher.
01:06:02.867 - 01:06:56.885, Speaker A: So one of the interesting things that sort of comes up is that people sort of believe that Ethereum staking yields would be much higher and particularly from priority fees. So if we look at sort of how these rewards evolve based off the number of validators, what we see is that when more validators enter into the system, the issuance of the network goes up. So you kind of get this like slower drop off and basically the rate that issuance goes up is proportional to the square root of the number of validators. But then there's also that many more validators. So you end up with a profile that drops off at 1 over the square root of N. But the MEB rewards, they don't increase at all. So you're just distributing those over a larger validator set.
01:06:56.885 - 01:07:40.295, Speaker A: So a lot of the predictions in the early days were made when there were only like 5% or 10% of validators participating. And basically what that means is that execution rewards were far more important at the time. But as we see now, with something like 30% of the supply staked instead of most of the rewards coming from execution rewards, all of a sudden we're back to consensus rewards being this more important part. And that's kind of why timing games and even block proposals in general just aren't quite as important anymore. Sort of what matters in terms of the long term optimization is just having consensus clients that work really well.
01:07:40.635 - 01:08:28.307, Speaker B: How is the, I guess, total MEV revenue that searchers are making or in general, the math must decrease as eth L1 activity decreases, right? So there must be a few big paydays every couple months when there's a bunch of liquidations and stuff. But overall it seems like Ethereum L1 is no longer that important. And all of the games that Jared from Subway was playing with the Meme coins and stuff, they're very heavily dependent on there actually being a lot of economic activity on eth. Right. And I honestly haven't looked at the Dex trades volume chart in quite a while. But like people are getting more sophisticated, there's more sophisticated tools. Like people are protecting their transactions.
01:08:28.307 - 01:08:39.535, Speaker B: Like all of this stuff, like doesn't. Like are you hearing from searchers who are just like, ah, this is no longer worth it. Like what's the, what's the overall situation with these kinds of things?
01:08:39.955 - 01:09:14.578, Speaker D: I think in general, like L1MEV. So we still don't have L2MEV number, but I think in general I want MEV still probably larger than L2MEV in general. Just because one is. The chain is more delayed because it's like 12 seconds. And so there is more likely a, how to say, price difference compared to centralized exchange. And so like Sextex transactions I would assume is like more likely happening on L1 and slower blockchain. And second of all is like there are still people like trading on Ethereum for Meme coin for some reason.
01:09:14.578 - 01:10:02.011, Speaker D: And I mean today's gas fee is not that crazy. I guess. Like I feel like back in the 2020, 2021 time, a lot of time I spent $100 for a complicated trade, but these Days I feel like it's mostly a few bucks. And so it seems like yeah, there's still retail activity going on and sure, a lot of meme coin things going to Solana, but telegram bots seems to be paying big bucks meaning, you know, coming from the users for those. So there's also atomic amoeb going on on top of that. But yeah, I think it's, it's still going but again like comparing with the consensus rewards, it's only around like 10 to 30%.
01:10:02.123 - 01:10:22.955, Speaker B: So the like basically searches are still fine. Like I, I'm just making this up in my head that economic activity on L1 is actually declining. Maybe it's just like moved outside of like a field that I understand or it's like, I don't know, like really long tail meme coin traders and stuff like that. So like maybe I just don't hear about it anymore. But it still keeps happening.
01:10:23.895 - 01:10:36.189, Speaker D: I, I think like one point is that like I think it's still happening, but it's possible as to, to your point is that they're making less money like because more and more money needs to be paid out to a proposer is my assumption.
01:10:36.237 - 01:11:30.765, Speaker C: Yeah, it's, it's very dependent also on like Dex volumes in general, I guess, where, you know, the more volume there is, the more there's to sandwich sex. Dex arbs is also dependent on pools having high liquidity and being, you know, heavily traded on. So that there's arbitrage options and atomic arbitrage is all the same. You know, you need discrepancy across pools. And on L2s there's actually a few pools that are very high in terms of liquidity and trading that allow for atomic arbitrage to take place. Whereas on L1 there's just a lot more things going on. But I guess as things move slowly off of L1 and onto L2s as the current roadmap kind of leads us, maybe that MEV moves off to being higher on L2s.
01:11:30.765 - 01:11:49.285, Speaker C: I just don't think it's the case yet. And the data we have is like we said, is always some far not super complete. Especially since there's parts of me that are just much harder to identify. But yeah, there's work to do there for all data people.
01:11:49.705 - 01:11:55.285, Speaker B: I see. Do you have another insight for us? Data always?
01:11:56.075 - 01:12:16.859, Speaker A: No. I mean I think that you guys are kind of right. As gas fees drop, yes, it does mean that there's less activity. But the other thing it means is that searchers have to pay Fewer fees. Right. So I mean they're still going to be transacting and still making money. It's just a bit of a shift in where that comes from.
01:12:16.987 - 01:12:58.599, Speaker B: Right. The operational cost of the search is also really goes down so they can take care of like much smaller, like whatever value they find. Oh, that's interesting. Yeah, I didn't think about that initially. Yeah, it's kind of interesting how the Blob space has now freed up Ethereum L1 space again for actually just doing defi or actually just doing meme coin trading. Yeah, it's still way more expensive than Solano or any of these other things. But as Danny mentioned like a minute ago, it's like, yeah, I was paying like $500 for transactions in the height of defi summer.
01:12:58.599 - 01:13:27.961, Speaker B: It's like now we're like, yeah, you could actually reasonably trade meme coins again, which is. That's kind of interesting. But I guess nobody has anyone seen projects dedicatedly kind of launch on L1. Nowadays I only see stuff launching on Days or Zora or Blast or stuff like that. And it's like on L1 I mostly see like restaking. Okay. But they, they can't really.
01:13:27.961 - 01:13:56.375, Speaker B: I mean they could like do bridged ETH and then restake over somewhere else, which I think Mantle is kind of trying to do that. But yeah, okay, I see. Yeah, I guess this is actually kind of good for the restaking ecosystem. But yeah, at the same time low fees are also bad for the rest staking user system like in general, like ETH not being utilized properly is not great. But okay, cool.
01:13:56.915 - 01:14:25.065, Speaker C: There's still quite a few launching on the L1 because it has the most mind share still over L2s. And there's also a tradition of launching on the L1 and then maybe wrapping on L2s or bridging onto L2s as an expansion of the protocol. I don't know. I don't have any specific example. That's not the point. But that's the trend I've been seeing. But maybe that trend shifts over time and we see more and more L2 native protocols.
01:14:25.445 - 01:15:10.585, Speaker B: But that's what I'm saying. I don't see anyone launching L1 anymore, every new project. And even if I look at Dune internal data, we get more contract submissions for L2 stuff nowadays than we do for L. And like, of course there's like a sum of L2s that's much greater than the L1s that we index. But I think in general it seems like. It almost seems like the consensus of the industry now is to not launch on L1 anymore because the bad, like the congestion could always start again. You know, like, you don't, like if there's a day without traffic in Jakarta, you're like, you're not going to be like, oh, let me build my house here, it's probably going to be fine.
01:15:10.585 - 01:15:39.175, Speaker B: And then like, I don't know, like next day you got traffic again or something like this. So yeah, I, I, I guess that must be the rationale. I, like, I don't know. That would be. I, I, I should look into this on, like try to find out what, what are even people doing still on. I don't understand. Except if you're a whale, then it's obviously like, okay, you don't care about the fees and all of that stuff.
01:15:39.175 - 01:15:51.987, Speaker B: But yeah, back to the script. Do you want to continue your presentation data? Always. Do you have another interesting insight for us?
01:15:52.131 - 01:16:18.933, Speaker A: So this is from Bitwise's last report. And it definitely seems to indicate that there's been some sort of deviation between the number of validators and the amount of ether staked. But the reality is that they're just equalizing the axis here. And because every validator has 32 ETH instead of 30 ETH, there hasn't actually been a divergence at all.
01:16:19.069 - 01:16:21.745, Speaker C: Yeah, that's weird. That's very weird.
01:16:22.325 - 01:16:27.185, Speaker B: That's a horrible chart crime. This is hilarious.
01:16:28.765 - 01:16:37.061, Speaker D: Wait, so each validator has a 32 ETH and they're just like shifting the axis to make it look like dimensions?
01:16:37.093 - 01:16:59.795, Speaker A: No, because they're plotting it on sort of both axes with like one line on one and another and the fill on the other side. But they're just trying to make the axes look nice by having like a 30 times multiplier on each side. But every validator is 32. You just see this growing divergence between the two. Oh.
01:17:02.255 - 01:17:40.171, Speaker B: Yeah, they should have left out the lines on the, like the, I don't know, the guiding lines and just had the like clean access. This is horrible. Okay, interesting in how many ways you can fuck up data? Because this genuinely looks like there's a higher, yeah, a higher growth in validators than Mount east, which wouldn't make any sense. Interesting, Interesting. Good find. All right. I think with that we have the chart crime.
01:17:40.171 - 01:17:51.655, Speaker B: I want to point out that in the paper of data always or in the, in the blog post that you least on playing latency games or what's the real title? I kind of forgot.
01:17:51.735 - 01:17:53.075, Speaker A: Latency is money.
01:17:56.215 - 01:18:13.377, Speaker B: Yeah, in that blog post there's beautiful, beautiful gifs in there, some of which we were also able to see in this presentation. So maybe how do we actually make those? I'm genuinely curious how to. How to produce charts?
01:18:13.441 - 01:18:36.285, Speaker A: Yes. I mean, if you're working in like Python or Dune or something, all you have to do is capture sort of like snapshots at like, different steps. Right. So for those, those GIFs, right, the idea is just to shift the interval by a couple of days, and then if you want to make it look nicer, you can add some like transition effects or something, but just throw it into a GIF maker afterwards.
01:18:37.635 - 01:18:53.539, Speaker B: Yeah, but how do you actually make the GIFs? Like, it's easy. Like, I can conceptually kind of conceive of this. But then, like, do you, I don't know, walk me through the process? Like you have the raw data and then is there like a Python package for this that just does this for you? Or, like, how do you stitch those together?
01:18:53.667 - 01:18:58.035, Speaker A: But you could just as well, like use any online tool or something if you wanted to.
01:18:58.195 - 01:19:13.695, Speaker B: I gotta look into this. This would be a blog post I would read. Wink, wink. No, always. Always a fan of chart art. And you definitely produce chart art. I think with that.
01:19:13.695 - 01:19:18.215, Speaker B: Dobby, what do you know about latency games now?
01:19:19.275 - 01:19:29.975, Speaker C: Well, quite a bit more, I think. I both know more. I know there's a fuck ton more to research, so I think. I don't know if we come out better or not, but we got work to do.
01:19:32.435 - 01:19:50.713, Speaker B: Okay. I for one, feel very illuminated, I guess is that word? I don't know. I learned a lot. I really like this. This presentation style is a bit weird. For podcasts, we usually do more of a presentation, but you did a great job, Data. Always.
01:19:50.713 - 01:20:16.035, Speaker B: Thank you so much for presenting this data to us. And it almost felt like I was in a lecturer in university. It's a very good experience. Some good memories from that. So thank you for providing this experience and I certainly learned a lot. Yeah, kiln should stop their shit. Like, what are they doing? The next time you see a kiln guy, just tell them stop.
01:20:16.035 - 01:20:30.921, Speaker B: And. Yeah. Thank you so much for coming on. All right, with that, you have listened to the Index podcast. Thank you for listening. Share this with your friends and yeah, we'll catch you all in two weeks. Bye.
01:20:30.921 - 01:20:31.525, Speaker B: Bye.
01:20:44.265 - 01:20:49.481, Speaker D: Secrets in the blockchain Shape Bag Chiller.
01:20:49.633 - 01:20:57.315, Speaker B: Cherry picking liar we call them out a set shot. Chris Index Podcast Cryptocurrency.
