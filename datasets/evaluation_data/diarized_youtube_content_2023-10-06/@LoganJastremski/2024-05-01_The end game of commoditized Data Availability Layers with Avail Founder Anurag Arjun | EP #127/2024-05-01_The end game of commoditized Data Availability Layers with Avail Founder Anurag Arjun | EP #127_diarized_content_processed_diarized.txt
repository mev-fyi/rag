00:00:00.320 - 00:00:32.338, Speaker A: Like, to be very frank, because there's so much DA or ordering bandwidth that is coming to the market. Like, all DA is going to be very commoditized. Like, it's a no brainer. I mean, fees are going to be low, for example. And so essentially, once you kind of choose your tool stack, once you kind of spin up your chain, right, like, you're not going to have to figure out or worry about the exhibition environment or the DA reliability, for example. Like, all of the systems are going to be pretty robust. For example.
00:00:32.338 - 00:00:53.866, Speaker A: What you need to figure out then is where are your users going to come from? Where are you going to bring full liquidity from? How do users bridge to your chain? Do people have to bridge via Ethereum from other roll ups? Like, how do you bring liquidity to your chain? You know, like, how do, how do you ensure that users have a very smooth onboarding to your chain?
00:00:53.898 - 00:00:54.042, Speaker B: Right?
00:00:54.066 - 00:00:59.906, Speaker A: Like, you cannot be the hundredth evm roll up with no differentiator.
00:00:59.938 - 00:01:00.106, Speaker B: Right?
00:01:00.138 - 00:01:02.110, Speaker A: Like, I mean, it's very hard.
00:01:05.490 - 00:01:22.602, Speaker B: Anurag, thank you for coming back on the podcast. I've had very few second time guests, but when I got the opportunity to chat again, I really enjoyed the first time and so I jumped at it. So thank you so much for coming on the podcast and excited to have you back.
00:01:22.786 - 00:01:23.530, Speaker A: Yep, yep.
00:01:23.610 - 00:01:23.938, Speaker B: Thanks.
00:01:23.994 - 00:01:27.110, Speaker A: Thanks, Logan, for having me and very excited to be back.
00:01:27.720 - 00:02:02.950, Speaker B: Awesome. Well, maybe to kick it off, I think we spoke last in September of 2023, and a lot has happened since then. At that point in the time we were in the depths of the bear market, deep depression and despair, and now we're coming out on the other side. A lot of interesting things have probably happened in the last eight, nine months. Can you maybe talk about just the progress that avail has made since kind of we last spoke and some of the news things that the team has been working on?
00:02:03.290 - 00:02:40.484, Speaker A: No, absolutely. Yeah. So I think the last time we spoke, we mostly spoke about the Da product, much in detail in general. So a lot of things, as you said, have changed over the last six months or so. We announced that in Denver, the additional components of what we call the unification layer that we are building at avail. This is comprised of Avail Da, but also avail nexus and avail fusion. So this is in line with where we are thinking the blockchain world is going in general.
00:02:40.484 - 00:03:44.620, Speaker A: So to zoom out a bit. So we started with avail by building this data availability layer with database sampling. And essentially this is validity proof based. And so this is basically in the direction of where Ethereum is headed, in general, from a roll up centric roadmap perspective. And how I like to view this, as is the evolution of how blockchains are constructed. We began with Ethereum and maybe bitcoin in some sense, but in general, it was a very l one specific landscape of building new blockchains. So with l ones, actually, I just did like a tweet in the morning today, trying to kind of figure out, like, figure out my mental model of how to look at l one s roll ups and the new and shiny avss from Eigen layer, for example.
00:03:44.660 - 00:03:44.812, Speaker B: Right?
00:03:44.836 - 00:04:42.940, Speaker A: Like, so, so in general, um, so from that point of view, what, what we can do with l ones is you kind of create this new exhibition environment, new data modeling, for example, new ways of authentication, access, for example. And you kind of create this new l one s. And so we can see, like, of course, after Ethereum, there's been Solana, sui, aptos and bunch of other l ones, a lot of them on the cosmos side as well, for example. And so these have been different ways of doing blockchains roll ups. We kind of begin with the assumption that we don't want to start with the l one security bootstrapping problem. Like, we don't want to create new economic security. We just have a shared notion of crypto economic security at the base layer and any roll ups on top inherit this security.
00:04:42.940 - 00:05:29.500, Speaker A: Now. I mean, of course, we can get into the weeds about how current roll ups are implemented and so on. So let's go past that. But essentially, theoretically, roll ups that are properly implemented inherit the entire security of the base layer. And so that's another way of creating blockchains. And of course, we have now this curious mix between l one s and roll ups is, you know, like Avss is, you know, like coined by Eigen layer, which kind of allow you to kind of bootstrap this chain with restrict ETH, for example. Today this is with Eigenaire is doing restrict EtH, but Babylon is trying to bring bitcoin security, for example.
00:05:29.500 - 00:06:19.142, Speaker A: And like, bitcoin and ETH are the big two assets in the industry already valuable. So these are projects that are looking to repurpose the use of these assets into creating new chains, for example. And these can be any sort of chains. These could be, you know, like EVM or SVM sort of roll ups, but these could be as, as diverse as, you know, like we had one team creating an intent solver roll up on avail a couple of weeks back at a, at a hackathon, for example. And so on. So essentially what I'm trying to say is, you know, like, blockchain architecture has been evolving. Like, it was a very l one centric methodology before roll ups came into the picture around 2020.
00:06:19.142 - 00:07:02.072, Speaker A: And so the, the entire effort around avail has been to build this infrastructure around roll ups. Now, like, roll ups are pretty great for, you know, like, mitigating the bootstrapping crypto economic security problem, but they also end up fragmenting the user experience. Like, so if I consider, like a Solana, Solana is like this very scalable chain with lot of apps. But users, you know, like, the experience is pretty straightforward. Just interact with one chain and you can have access to all the apps. The roll up paradigm, on the other hand. Right, like, says that, no, we are not going to have this one.
00:07:02.072 - 00:07:37.440, Speaker A: All the apps on one single blockchain. We are going to have this base layer. There is going to be thousands and millions of roll ups on top. Very similar to how, let's say. I like to think of these as microservices in that sense, asynchronous microservices and in general. But the user experience gets pretty bad because now users have to think about different chains, different rpcs, bridging, so on and so forth. And so if we have to kind of arrive at the user experience that that is, you know, enough for this technology to go mainstream.
00:07:37.440 - 00:08:31.916, Speaker A: You also have to build a substrate around this roll up centric future, right? You can't just expect wallets to solve this or, you know, like other places solve it. It has to be solved from the foundational bit, right? Like, so that's why our thinking at avail is, let's start with this. You know, it's very scalable. Datab layer database is a very misunderstood term, right? Like, it's essentially an ordering layer. And with, you know, like, very easy ordering verification via lite clients on top, you can have as many roll ups as you want. And the. The intent of Avail Nexus, which is a product that we announced very recently, is to allow a shared notion of validity across these roll ups, or basically a framework that connects all these roll ups together.
00:08:31.916 - 00:09:17.900, Speaker A: So that, you know, I like to kind of say this is bringing the monolithic experience to the modular world, right? Like, that's how we. I like to frame it. Of course, you know, like, as with everything, there's a bunch of stuff that we still need to build, create, for example, and so on. But that is how the, we envision this in general. And one part of this that we announced again a few weeks back is something called a will fusion, which is, I think, very promising, is I go back to the earlier conversation where, you know, people are trying to figure out how can we use something like a BTC and ETH, which is already valuable. Well entranced. And how can we repurpose it to securing other chains.
00:09:17.900 - 00:09:53.138, Speaker A: And so avail fusion is our strategy to kind of utilize BTC, ETH, maybe even Sol, for example, to kind of add more cryptocurrency to the base layer so that all the roll ups on top can inherit this security. So we are trying to kind of take a more foundational principle to solving these problems that the roll up centric future brings in. So we first, you know, like you can say, we enable roll ups and then we kind of try to solve all the problems that come along with it as well. So I'll just stop here for any questions.
00:09:53.274 - 00:11:03.990, Speaker B: It's a lot to dive into, I think maybe to start with how. I think the market is still trying to figure out what works from not the technical standpoint, but more where the future is going to go. Because I think the higher level is the roll up center. Roadmap has very much been the predominant scaling methodology for the last three to four years. And it's been interesting now that Solana particularly has kind of caught wind, at least on the retail side, with meme coins, TBD on kind of breakout products, but at least for the meme coins today. And there's kind of this one version of the future where you have these like high throughput integrated chains, and then you still have the roll up chains, and then you have now the eigen layers or even the cosmos. There's a lot of different methodologies going on.
00:11:03.990 - 00:11:28.750, Speaker B: Where do you kind of see this all? I mean, and you kind of touched upon it in the end state. Do you feel like there is like 100% probability, 50% probability that they have to end up in kind of the roll up centric landscape, or where do you envision that kind of future playing out as we're kind of progressing towards that and the market's still trying to figure that out as well today?
00:11:29.730 - 00:11:45.738, Speaker A: Yeah, I think. See, basically, see, we have to kind of understand where blockchains come into the picture in terms of a technology evolution play. Right? Like where, where, where does, where do blockchains truly fit in in the overall lines landscape?
00:11:45.794 - 00:11:45.962, Speaker B: Right.
00:11:45.986 - 00:12:09.566, Speaker A: Like, and so this is basically the best framing I can give is, is basically the trust in disintermediation problem. Right? Like, I mean, there's a, there's a way in which trust has evolved over the centuries and technology has accelerated the way how trust is kind of, you know, like, managed in that sense.
00:12:09.598 - 00:12:09.766, Speaker B: Right?
00:12:09.798 - 00:12:35.292, Speaker A: Like, so for example, like, today, you let a stranger into your house on Airbnb, for example, right? Like, I mean, it's, of course, it's not only technology, but, you know, like, there's a bunch of things that, that goes along with it. You kind of buy products off an Amazon, you know, like halfway across the world, you know, like sitting in us from China, for example, and so on.
00:12:35.316 - 00:12:35.452, Speaker B: Right?
00:12:35.476 - 00:13:06.886, Speaker A: Like, so this is all ways and means in which trust has evolved over the centuries and technology has created a huge part. And so I think blockchains play a part in kind of increasing economic and social coordination, right? It's just basically how do we let people interact with people, right? Like, does it have to be through private financial rails? Government financial rails, you know, like, or through blockchains, for example.
00:13:06.918 - 00:13:07.062, Speaker B: Right?
00:13:07.086 - 00:14:22.820, Speaker A: Like, so that's, that's kind of the framing, I would say. And in general, like, when, when you ask me, like, where this is all going to end, right? Like, so we have to kind of zoom out a bit and ask, where are we? Like, what is the step function? What are we kind of giving a solution to? Like, if you kind of look at, like, let's say, using a bank, for example, or let's say Venmo, like, I don't want to get into more the regulatory bits or the government, like, where it is more controversial, but let's say look at Venmo, for example, right? Like, so when you are, you know, transitioning from again, right? Like, I don't really mean using global venmo, for example, because venmo works best within a country, for example, and so on. But you get the point, right? The trust assumptions that you use for using a Venmo and compared to a blockchain solution. So that is the delta interest assumptions that you are taking as a normal user. Now, how do we explain this to normal users? That is a separate point. Most users, I am pretty sure, don't understand the difference between using a venmo and using, let's say, a venmo clone on a blockchain, for example. But there's a huge delta interest assumptions.
00:14:22.820 - 00:14:50.094, Speaker A: Now, some people like to kind of give this opinion that, you know, okay, bitcoin security or ethereum security is by far the best security you can get. But see, ultimately, you have to go past the rhetoric and figure out, like, what are people really indexing on the so high amount of crypto security is very important. But how high? Who defines the number in general? Right, like, I mean, when you mean.
00:14:50.142 - 00:15:01.206, Speaker B: Like, crypto, not cryptographic security, just for the listeners, is that just like, the stake weight amount to get to the one third and two thirds thresholds to start messing up the network?
00:15:01.398 - 00:15:05.222, Speaker A: Yeah, sorry, just to be. Just to get. Just to clarify.
00:15:05.246 - 00:15:05.406, Speaker B: Yes.
00:15:05.438 - 00:15:25.500, Speaker A: Crypto economic security means, you know, like, how much stake we amount we put into securing a system. Generally, it is. Most systems use a proof of stake weighted methodology for doing this. There is a two by three assumption. It can be different. Like, you know, like, BTC does proof of work. There is a 51%, etcetera.
00:15:25.620 - 00:16:01.970, Speaker B: But maybe to dive into that a little bit, because I feel like, I don't know if it was eigen layer, maybe babylon have kind of really been pushing for this economic security. Do you feel like that economic security, I guess, is more useful in the world where you have 100 million L2s or kind of restaking applications that need to bootstrap or app chains versus, like, I think.
00:16:02.710 - 00:16:20.790, Speaker A: I think maybe, like, let me. I think. I think since you, you know, like, come. I mean, I'm. I'm not trying to slot you, but, like, you, like Solana very much in general. Right? Like, so in. In that sense.
00:16:20.830 - 00:16:21.006, Speaker B: Right?
00:16:21.038 - 00:16:43.306, Speaker A: Like, let's frame Solana as an example here. Like, so the Solana, like, you could actually theoretically break it into two parts, right? Like, so there is a more crypto economic consensus part of, or the proof of stake part of Solana. And then there is the SVM, for example, the actual execution environment, for example, and so on.
00:16:43.338 - 00:16:43.506, Speaker B: Right?
00:16:43.538 - 00:17:34.012, Speaker A: Like, of course, it's not, you know, like zero or one or. I mean, there's. There's quite a bit of overlap between how these two work, but there are teams now that are kind of trying to take the SVM and then trying to build a roll up, for example. And so it's actually really, if you kind of think of it like, it's really. It's difficult to kind of get all the transactions onto and get it executed by one system. Like, that's just how traditional microservices work. I mean, that's how traditional apps, app architecture has moved over the times, is that you have one system and you build it as a monolithic system.
00:17:34.012 - 00:18:31.026, Speaker A: You kind of get it, like, get a lot of transaction throughput out of it. But someday you'll have to think about breaking it up, adding more layers, for example, and so on. And it's just microservices are on the Internet for example, are built separately, scaled independently based on demand, for example, and so on. So there's a lot of great ideas that, that Solana has been working on. But in general, the, I like to kind of see this is as like a security bootstrapping thing and an execution environment thing, right? Like, so there are two things here. So there's a security layer and an execution layer. The security layer is the more difficult to bootstrap because with any new token that you launch, it's going to have zero value on day one, for example, or some non zero, low value on day one.
00:18:31.026 - 00:18:49.960, Speaker A: And then it takes time. Bitcoin has been there for so many years, and that's why it has cemented its place. ETH also has been for so long. Solana also now been for some time. But if you want to do an l one today, it's going to be, it's very hard.
00:18:50.000 - 00:18:50.152, Speaker B: Right.
00:18:50.176 - 00:19:20.010, Speaker A: Like, I mean, I mean, of course projects do it, but. Right, like, it's. It's going to be becoming increasingly hard for hundred other l ones to come, for example. So essentially, that is basically. So there is this bootstrapping problem and then this execution layer problem. The bootstrapping problem is what Bibylon and Eigen layer, for example, is, are attempting to solve. It's also, you know, like osmosis from the cosmos ecosystem.
00:19:20.010 - 00:19:59.134, Speaker A: You know, like, they did something called mesh security that that was, you know, like one of the attempts on this, for example, how do you kind of use security from other chains on, on a cosmos chain, for example? So I think, so those are all good attempts of trying to get this security because necessarily, you need to have more innovation on the, on the, on the exhibition side or on the application side, because, like, you will never get mainstream adoption if you want your application developer to kind of also worry about the protocol side.
00:19:59.182 - 00:19:59.342, Speaker B: Right?
00:19:59.366 - 00:20:48.756, Speaker A: Like, I mean, it's just too tough in general. And so, so, essentially, I think, I think what this will, going back to your previous question, what this will, I envision this is that it's not going to be an only a roll up centric world, right? Like it's, it's, there's going to be like, l one s as well, some l one's with roll ups on top. I, of course, I am a biases. So I think there will be lot of application specific roll ups because, see, the mental model of roll ups is also not very well understood. Right. Most people assume that a roll up is either an EVM roll up or an SVM roll up. These app specific roll ups right now the tooling is not mature, but these are getting increasingly better and better to use.
00:20:48.756 - 00:21:51.258, Speaker A: Like I said, someone built out an intent solver roll up a couple of weeks back on stacker, for example. And we are seeing newer and newer examples, I think, where this will be. This will closely mirror what you see in the, on the Internet, right? Like there are like big monoliths or big app companies like the Facebooks and the Instagrams, for example, that are pretty big, have huge user activity. But there are also small, you know, like one page websites, one, you know, like single simple mobile apps, for example, which start off at as very small apps or droplets or something like that, and then they grow, right? Like so that's how I feel. We will certainly see a bunch of l ones. I'm pretty sure Solana is going to be very successful, even more successful in general. But roll ups are basically a shortcut to bootstrapping security in general.
00:21:51.258 - 00:22:42.142, Speaker A: And one very underappreciated way thing of roll ups, especially, you know, like avail using this database sampling, is that if we have like a database sampling lite client and an execution lite client, you are able to now then talk to each other and that kind of connects all of these together, right? Like, so, like if you want synchronicity, for example, you go to Solana, you have, you can have access to a thousand other apps. But like, otherwise, you know, like with most apps, you start off standalone. You kind of create your product market fit and if it grows, you kind of expand. And then when it requires you to access some of these apps, you, then you connect them through something like an avail nexus, for example, and so on. So, yeah, sorry for the monologue, but.
00:22:42.246 - 00:23:44.838, Speaker B: No, no, no, I agree with a lot of that. I think the microservices to me is a kind of interesting analogy. I definitely think of new or L2s as new execution environments. My mental model now has been like, you have these high performance layer ones even avail that's really focused on the data synchronization at the layer one. And then you have these L2s as new execution environments where you can take arbitrary large amounts of compute, run a supercomputer, create a proof, and then have that be asynchronous. And if you win, or if you want to post that on kind of that synchronous layer one, that will synchronize that data with all the applications there or all the other l two s to post that information. And so in one world, I kind of see you have these high throughput chains that are focused on the data synchronization.
00:23:44.838 - 00:24:11.280, Speaker B: In the other part of the world, you have the asynchronous world where it's l two s that can create large proofs and then post them. That's more asynchronous, but that's totally fine because it allows you to create new execution environments or new arbitrarily large amounts of compute that you wouldn't be able to normally run on an integrated layer one.
00:24:12.060 - 00:24:44.276, Speaker A: Absolutely, absolutely. And you know, like you also, I mean, so generally most people talk about better execution environments, better data modeling, better, better data structure implementations. I'm also kind of very bullish on authentication access measures, for example. Right? Like so right now you have gas markets, for example, for, for accessing any blockchain. Why can't this be traditional web two style access tokens, for example?
00:24:44.348 - 00:24:44.580, Speaker B: Right?
00:24:44.620 - 00:26:08.522, Speaker A: Like so in general, because you know, all of this can be done, right? Like see essentially fees on blockchains are a spam mitigation strategy, right? You, you want some fees so that people don't spam you. But that is just one way you can have, because you disassociate the, from this, from the base layer, right? Like the base layer needs to have some standard notion of, you know, like a gas token, for example, which used to coordinate activity. But when you have these roll ups on top, right? Like you can have, all of these roll ups also have different access mechanisms. So theoretically you can have like a roll up with an, you know, like which you can subscribe to, say let's say thousand transactions at $1 for example, or so on the, and this is, you just get like a API key, for example, and then you access these, right? Like I'm just, this is just one example. There can be better ways of doing this, but I'm trying to tell you that you can, because of this layering, you can actually come up with these new sorts of access measures because ultimately the roll up on top, right? Like doesn't have to be as, you know, like doesn't have to be exact copy of the base layer, right?
00:26:08.546 - 00:26:11.810, Speaker B: Like that's, that's, I think it should be differentiated.
00:26:11.930 - 00:27:21.186, Speaker A: Yeah, of course, right? Like so, so that's, that's kind of, that's kind of my mental model in for some of these app specific roll ups, right? Like why can't we make transactions via subscription model, for example and so on, right? Like so, so those kind of things I think we will see, we'll start seeing over the next six months, twelve months, and, and you have these roll ups now being written in typescript in rust, for example. Like, if you look at Stacker, it's written, you can write roll ups in typescript, for example. You know, like helps you write roll ups in rust, for example. And so these are just, these are much more accessible to the average developer is what I feel. Right, like. And so you also have to index on the friction of lowering the friction that a mainstream developer brings to the table because, see, we talk to various project teams, for example. And so, of course, crypto native developers are, you know, pretty, you know, like fast to kind of take up all of these on.
00:27:21.186 - 00:28:09.056, Speaker A: But if you're talking to like, let's say like a developer in an, in a, in a regular company in Web two, for example, and they're just trying to look at this stuff and it's like, oh, I have to learn solidity and, you know, like, I have to learn this data model. I have to put my, like, I will create my data model and then I have to retrofit into the model that the blockchain wants me to, for example, to read the data. I have to kind of index the data, index the whole blockchain, then parse my data out of that, for example, and do it on a continuous basis, for example. So it's a, it's, of course, I, there's more and more tooling coming out that kind of simplifies this. But even today, it's not a very easy experience for a application developer.
00:28:09.088 - 00:28:09.256, Speaker B: Right?
00:28:09.288 - 00:29:31.710, Speaker A: Like, so, yeah, so these are all things that we need to index on. Because, see, basically, like if I, if you kind of look at the mobile app development stage at the moment, right, like today, like, there are like thousands or maybe tens of thousands of apps that are submitted to the app store daily. Only one of them or maybe ten of them break out in some significant way in general. Right? Like, so, I mean, the transition from era where there were only a few mobile app developers to one where there are thousands of apps being submitted to the app store is because now the friction, the friction of, you know, like developing a mobile app has, has become so low that, you know, like, you have all kinds of apps being created and submitted. And so in blockchain you need, we need to get to that place because, you know, like, I like to take example a lot where something like an Uber or Instagram was not built on day one when the mobile os were launched. It took a fair bit of experimentation and iteration for someone to figure out, yeah, I mean, the gps the user carries around the mobile everywhere. And you have this gps capability.
00:29:31.710 - 00:29:48.894, Speaker A: How can I apply this to the passenger driver, taxi matching problem, for example? Or, you know, like Instagram, where, you know, okay, the camera is now going everywhere with the user. Can I do a social filtering sort of mechanic on top?
00:29:48.942 - 00:29:49.126, Speaker B: Right.
00:29:49.158 - 00:30:21.354, Speaker A: Like, so these are all applications which we. I don't think the mobile os developers really thought of. Like, application developers had to do a lot of iterations to get to this point. Now, I think, like, if you kind of think of Uber, Instagram, they're very commonplace, but, like, it's not very. It's not very easy to come up with an Uber on, you know, like when first. The first mobile os came out, I still remember I did my first mobile app, like back in 2007 or something like that. Eight.
00:30:21.354 - 00:30:45.870, Speaker A: I think maybe this was on a Windows mobile. And the best I could think of, Washington that let me write a survey app, because at the time, survey app surveys used to be filled out on paper, for example. And so it was a. So, I mean, I'm just trying to kind of frame this in general.
00:30:46.210 - 00:31:39.900, Speaker B: Yeah. And I think when we spoke in September of last year, I think avail was very much ahead of the time because I think it was very still kind of non consensus at that point to build a high throughput DA layer. I think it will seem obvious in retrospect that you need more data to make more scalable applications. But at that point in time, the market did not reward that thinking. And so congrats on the recent raise and being able to continue out building out the vision. I think today there are now in every kind of bull market, so to speak, the noise gets louder. And I think both VC's and engineers can sometimes get distracted with the shiny new thing.
00:31:39.900 - 00:32:11.290, Speaker B: Previously is probably app chains. Now it's been l two s in the past. And it doesn't mean that the shiny new thing is bad, it just means it's shiny. And that's where the tension is today. It's probably Eigen layer and re staking as we've talked about. And I think with all these ecosystems, the most important thing is actually getting engineers to build applications so we can get to products. What is kind of the pitch from the avail side to say, hey, come to avail, deploy your L2.
00:32:11.290 - 00:32:24.610, Speaker B: We have the tooling, the infrastructure, whatever you need to build the best product possible. Don't build on an Eigen layer. Don't build on a Solana. Don't build on swe or Monad or whatever. Build here.
00:32:25.910 - 00:33:08.670, Speaker A: Yeah, I mean, I think that's an interesting question, right? Like, I mean, in general. So, so let me kind of rephrase this. As you know, like so avail is like who is available for? Like first in general? Like we build very low level infra, right? Like it's not, it's not for developers directly. Of course developers can build directly on avail, but essentially we are. Our first primary consumer is the roll up stack, for example. So we work with all the major roll up stacks. Arbitrum, optimism, Polygon, Starquare, ZKC, Stacker, sovereign labs, like all the newer application specific roll up stacks as well.
00:33:08.670 - 00:33:12.314, Speaker A: You know, like move movement lives, for example, and so on.
00:33:12.362 - 00:33:12.546, Speaker B: Right?
00:33:12.578 - 00:34:19.346, Speaker A: Like so first of all, that's. And so, like our pitch to developers is like we, we kind of work very closely with these roll up stack developers. And then when we are talking to developers, like, I think actually I just talking to someone before this podcast and, you know, like I was discussing this point, right? Like developers don't ask really us whether to use avail da or celeste da or eigen da, for example, to be very frank, right? Like that's not the first question they come from. They say they ask us about their, what roll up stack do you recommend? You know, like that is the primary question that comes to us. And we spend a lot of time educating people about the state of the roll up stack, for example, what it is good for, how much expensive it is, how inexpensive it is, what options you can have, for example. So first part is, you know, like it's, it's, it's primarily the roll up stack that we end up kind of recommending. And then of course the choice of Da comes after that.
00:34:19.346 - 00:34:55.650, Speaker A: Because like the, essentially the developer, the role of developer is choosing their tool stack. And DA is an important part wise. But, but it's, it's one part of the whole thing. So that's why, you know, like essentially our, you know, we kind of, the pitch is primarily via the roll up stacks. That is number 1. Second is essentially like, to be very frank because there's so much DA or ordering bandwidth that is coming to the market. Like all DA is going to be very commoditized.
00:34:55.650 - 00:35:38.660, Speaker A: Like it's a no brainer, right? Like, I mean, fees are going to be low, for example. And so essentially, and it's very hard to reason about, you know, like the security assumptions, for example, right? Like, like, or the implementation. Like whether we, like we do validity proofs, you know, something that, like based on KJ polynomial commitments very close to what Ethereum wants to do on its langsthutting roadmap. But like, so, I mean, yeah, okay. You also have Eigen da, celeste DA, for example. So I mean, it's very difficult to kind of, you know, like, for people to differentiate because it's necessarily a very, very low level infra. In that sense.
00:35:38.660 - 00:36:46.702, Speaker A: I think how we kind of try to say this is that, okay, you have to think beyond the initial technical tool stack choice. So once you kind of choose your tool stack, once you kind of spin up your chain, right, like, you're not going to have to figure out or worry about the exhibition environment or the DA reliability, for example. Like, all of the systems are going to be pretty robust, for example. What you need to figure out then is where are your users going to come from? Where are you going to bring full liquidity from? How do users bridge to your chain? Do, do people have to bridge via Ethereum from other roll ups? Like, how do you bring liquidity to your chain? You know, like, how do, how do you ensure that users have a very smooth onboarding to your chain? Like, you cannot be the hundredth evm roll up with no differentiator. I mean, it's very hard. And it cannot be that we were the first roll up to use a particular da solution or a particular roll up stack. It has to be much more.
00:36:46.702 - 00:36:55.400, Speaker A: You have to bring in users, keep those users, build useful, ensure that there are useful apps so that users stay on, for example.
00:36:55.470 - 00:36:55.652, Speaker B: Right?
00:36:55.676 - 00:37:40.590, Speaker A: Like, so it's much more than that. And so I would say it's, there's, there's a lot of business building that we kind of do along with our, you know, like, people or projects that work with a wheel, right? Like, I've gone through this cycle now. You know, I've been seven years here, back in 2017 when I founded Polygon, right? Like, I've gone through various cycles, talked to a bunch of developers, and essentially, you know, like, they, what they want to do is build useful businesses and projects, and it requires a lot of handholding. It requires a lot of insight, for example. And so, of course, technically, we build solutions. It meets a need. They do it, for example.
00:37:40.590 - 00:38:14.710, Speaker A: But you need much more than that. You need, like, venture building, business building skills, access to investors, access to the right strategy changes, for example. There's a bunch of things that happen, right? Like, and so we certainly, you know, like, help a lot in that. But having said that, right, like, having said that, see, as I said, like, DA is going to be a common commodity and you really have to focus on building out value accrual of the stack for. And this is, I'm speaking more from an avail perspective.
00:38:14.750 - 00:38:14.926, Speaker B: Right.
00:38:14.958 - 00:38:57.592, Speaker A: Like so. So we of course provide the DA, but as you, as I mentioned before, we also build nexus and fusion because we are very conscious of how to think about value accrual. We think value approval will happen not only on the DA side, but also on the execution side, for example. And if you want to have accrue value on the execution side, you also have need to have some hook onto the there. And that's why we build Nexus, which is basically roll up connecting roll up play as well as, you know, like some sort of sequencer coordination play, for example. And so we have hooks there so that, you know, like, so that we build that useful infrastructure.
00:38:57.616 - 00:39:49.648, Speaker B: Maybe that's a good segue into Nexus because I think going back to your earlier point, people are trying to understand the infrastructure of the L2 ecosystem. Should they use base, should they use arbitrum optimism polygon as well. It's not necessarily the DA layer, so to speak. And so I think, as you kind of pointed out, some of that roadmap decisions have ultimately resulted in fragmentation. And I think one of the cool things about Ethereum in the early days was defi summer and everybody wanting to use Ethereum and having that kind of coordinated layer. And then once you fractured that, then the communities also slightly became fractured as well. And then it was like, all right, build on arbitrum, don't build on base, et cetera, et cetera.
00:39:49.648 - 00:40:03.780, Speaker B: But it sounds like Nexus is the key that would allow this unification not only for applications, but also on the community side. Can you dive deeper into Nexus and kind of what you're doing there?
00:40:04.080 - 00:40:32.490, Speaker A: Yeah, absolutely. Absolutely. So just to step back, right? Like, what is Nexus? Nexus is. So with AvlDa, we kind of enable a lot of roll ups on top, but as Logan said, that these makes the user experience pretty fragmented. So now you have to build some sort of interconnectivity layer. So you can call it like an interoperability layer, for example, and so on. I like to call it the unification layer.
00:40:32.490 - 00:41:32.904, Speaker A: And interoperability in a roll up context is slightly different from a conventional l one to l one interoperability, like a bridging kind of thing, because roll up interoperability is best done on a shared dla. So that's the premise which we begin with, like, but the shared dealer is not. Not enough. You need to build more components on top, right? Like, so we do this via Nexus using this clever combination of data availability, sampling, or the ordering verification and the execution proof aggregation bit. Right? Like, so that's how we kind of use to construct this. But Nexus also has a relatively well less documented thing called, which, you know, kind of do handles the sequencer or the operator coordination bit, which I will, I will skip for the time being. But like, these are the two architectural components of Nexus.
00:41:32.904 - 00:41:49.808, Speaker A: And the really, the way is, I mean, technically it might sound simple, but the really, the way, as you know, like Logan likes framed it is, okay, we went into the frantic future, but now it's fragmented. Now how do we kind of, you know, like make this better?
00:41:49.864 - 00:41:50.032, Speaker B: Right?
00:41:50.056 - 00:42:18.138, Speaker A: Like, so you figure out a way how to connect these roll ups together. But how do we connect these roll ups together? Right, like, it's not, you know, we cannot go back to multi sig based message passing, for example. Right? Like, so you need to have a better way. So, so the shared delayer is one precondition. And then you need to have these like clients, especially these volatility proof based, like lands that can kind of prove the state of one roll up to another roll up.
00:42:18.154 - 00:42:18.306, Speaker B: Right?
00:42:18.338 - 00:44:00.860, Speaker A: Like, so there is, you have to prove the ordering and you have to prove the execution. These are the two bits, the order we have ordering like client on availability. And then we have this execution like client based on all execution proof state proof based on, let's say ZK piece, for example, and so on. And so we use this to kind of construct this shared notion of message passing, which then you can eventually get to a position where you have users having funds on various roll ups, for example. And let's assume that there is a, like an SVM roll up on there and there's just a lot of defi apps here and you have like app specific roll up where. Which mostly works independently, but you know, like someone wants to fund the account and so then they can, you know, like talk to the SVM roll up and then get the funds back. For example, you can think of the mental model of this is probably like a Venmo in the US, wherever the Venmo you can think of is this one big payment roll up with millions of users and, but when they want to kind of fund the account, they have to talk to the bank account or the credit card, for example, to top the wallet balance from, right? Like so, so you kind of, you know, like you have this big financial system which can be synchronous, for example, and so on, and, but you have this pockets of application space where you can go deeper, right? Like, and you can have various different mechanisms here, for example, you can sign on with Twitter, for example.
00:44:00.860 - 00:44:14.280, Speaker A: And so I'm just kind of trying to give the idea. So that's. That's kind of nexus, right? Like, I mean, roll ups lead to fragmentation, for sure, but, like, this is our attempt at solving the fragmentation issue.
00:44:14.830 - 00:44:37.290, Speaker B: And I probably just had one of your old colleagues on from polygon with Brendan. How does this ultimately, what would you kind of highlight to either the engineers or just people that are trying to learn the differences and nuances between Nexus and what polygon and the aggregation layer is doing there?
00:44:38.270 - 00:45:25.334, Speaker A: Yeah, I think the aglaya is also a pretty neat solution. I think it originated primarily from the aggregated proof of the polygon CDK. So because Polygon CDK is all use the same proving system, it's very easy to aggregate proofs from different polygon CDK chains. That's where it started from. But I saw a recent draft of the. The proposal, for example, and it has morphed a bit into kind of also allowing for inclusion or validity, inclusion checks, for example, from other roll ups. I still need to kind of see the design there in detail to kind of make a very direct comparison.
00:45:25.334 - 00:46:40.218, Speaker A: But essentially, how avail Nexus works is we kind of work with these different ecosystems, essentially. Like, if you look at zksync ecosystem, for example, there they. The hyper chains there have a proving system, for example, and all their hyper chains will have the same proving system. It's easy to aggregate these together. Similarly, Starquare has their own mechanism, and, you know, like arbitram optimism have their own mechanisms for coordinating chains between each other, like the super chain from optimism, like the orbit ecosystem from arbitram, for example. And so if you kind of look at this, right, like they are different ecosystems evolving in different ways based on the implementation, based on the proving system, for example. And it's like that, the tool stack in general, it's very specific to the project, and it's very difficult to kind of come up with the protocol that sits in between and has to have everyone to opt in and connect these chains together.
00:46:40.218 - 00:47:49.630, Speaker A: So the best way to think about avail Nexus is more like a permission less sort of unification layer in the sense that, and we are doing actually releasing a prototype of connecting a Zk sync chain with a polygon ZK EVM chain, you know, like this quarter sometime. What we really do is we take in these proofs from these different cooling systems and actually verify them in a common program, for example. And so we are verifying the state of these chains together. And essentially, in some sense, you know, like, aggregating this into a single proof, for example. And so, essentially, if you kind of think of it, these ecosystems are, all of them are friends, for example, but they are, to be honest, very competitive and don't really collaborate with each other very deeply. And so, essentially, I think we need this third party available to kind of sit between these teams and enable them to connect to each other.
00:47:49.800 - 00:48:27.490, Speaker B: Since they are competitive. What do you think are going to be, like, the competitive feature set that makes one win over another? Is it going to be the data synchronization? Is it going to be the amount of throughput that they can do? Or is it the economic security, having large, full nodes, since they are going to at least try to compete with each other, even if they're friendly on the front end? What do you think those unique product features are going to be to really differentiate the technical stacks between each?
00:48:28.590 - 00:48:59.376, Speaker A: Yeah, I think essentially, it all comes down to what sort of quality applications you engender on in the ecosystem. That is my foreign beliefs. Right. Like, I mean, of course, you can say an optimism stack is different from an arbitram stack in terms of implementation. So, of course, right, optimism didn't have fraud proof for a long time, but they are now releasing that pretty soon. So once they. Once they put that into production.
00:48:59.376 - 00:50:01.340, Speaker A: Right? Like, how do you really differentiate between, you know, like, developing on an EVM chain on optimism versus that of an arbitram, for example? Right, like, so. So I'm saying those are the small delta differences that a lot of developers will gloss over. So I think what. What these ecosystems have been doing, like, if you look at arbitram, for example, they came up with stylus, which is like, a very under appreciated move that. That arbitram has done is how can we allow people to program in arbitrary Rosam compatible languages, for example, and also allow for arbitrary high amounts of computation to be packaged, for example. So starware has been doing their own thing, like with Cairo, for example, coming up with a different tool set and making it easy for people to do large amounts of computation. You can actually, like, I was looking at this ML toolkit from.
00:50:01.340 - 00:50:12.570, Speaker A: From in the stockware ecosystem, which can, you know, like, do a lot of analytical inference, for example, and so on, and, like, all the others, for example.
00:50:12.610 - 00:50:12.762, Speaker B: Right?
00:50:12.786 - 00:50:58.330, Speaker A: Like, so I think it will boil down to what sort of application ecosystem, developer ecosystem you can actually bring about, whether that is via the technology, whether that is through access to users liquidity, for example, whether it is through, you know, like, actual, as I said, business building or, you know, in that sense, for example. Right. So I think it will be on how these people attract a great app developer community. I think all infrastructure, including availability, including others, for example. Right. Like if we are not able to bootstrap a great app developer community, it's going to be very, very difficult.
00:50:59.160 - 00:51:49.310, Speaker B: Yeah, well, Anurag, maybe shifting slightly, you were at the forefront in kind of the space thinking about avail, thinking about how to do high throughput DA. The landscape has shifted quite substantially since we spoke in September. A lot of the early things that you mentioned about requiring high throughput came true. It's also, as we're recording, Token 2049 is also going on. What would be your call to builders, engineers in the ecosystem that you would like to see built on avail or utilizing some of the more high throughput nature, that avail offers to really push the industry forward.
00:51:51.260 - 00:52:30.542, Speaker A: I mean, see in general. Okay. I mean, I certainly avail is a very high throughput DA provider for sure. I think I just kind of differentiated a little bit by saying that it's not only a high data throughput thing, it's also, you know, like we actually spent considerable effort in building out the databuty sampling part, which is actually the crown jewel, because of course you can build highly scalable apps on top of Olda, but database sampling, it, you know, like it's, it's, it's a fragmented user experience. So just, just wanted to kind of.
00:52:30.686 - 00:52:45.450, Speaker B: Do you think that data availability sampling will be kind of required on all throughput chains going forward, or do you think it'll be less common, but it'll still, like, will still migrate to high throughput?
00:52:47.350 - 00:53:45.476, Speaker A: I think all chains, like any important chain that does data is focusing on databuty will need to implement database sampling. That's going to be pretty standard because essentially you can increase the data throughput as much as you want, for example. But it also has to have some sort of easy verification by other blockchains. Not only not for like, I think the verification part has been like a little bit misunderstood. Of course, users can verify ordering, for example, and execution by, like, clients, but it's not only for their users, it's for other blockchains to understand what is the state on your blockchain, really? What is the ordering on your blockchain? And so that is pretty important. Like essentially, so if you have, if you are going into a multi chain world, how do these chains talk to each other?
00:53:45.508 - 00:53:45.676, Speaker B: Right?
00:53:45.708 - 00:54:33.490, Speaker A: Like, I mean, that's the fundamental, like do we want to have multi sig bridges or do you want to have, like, lite client level message passing, for example. So that's. That's one. One thing. In general, I would say application specific roll upstack tooling is something that I would like to really see much more progress on in general. Like, this could be like, it's a whole new way of thinking of app building, right? Like you had the original app builders where like, of course, smart contracts on Ethereum and Solana, for example. But if you kind of look at it, a Cosmos app chain is also an embodiment of an app, right? So you have an osmosis, which implements a Dex on a chain.
00:54:33.490 - 00:55:04.502, Speaker A: You have dy DX as a chain, for example. These are all app specific chains. Now, initially, the whole process of bootstrapping an app chain was so cumbersome, so daunting, that only few did it and not many survived to say, the tail. Right? Like, so, so in general. But I think now the whole paradigm has changed. The whole concept of shared security is changing. Now you can do much more experiments.
00:55:04.502 - 00:55:51.390, Speaker A: Like, as I said, coming back to, like, the point that I made, right? Like, why can't someone build a roll up with no, no, no. Conventional gas metering, for example, like, with no fees, with, let me buy subscriptions, thousand transactions subscriptions with $1, for example, and so on, right? Like so. So that is a kind of tooling that I really look forward to people building. So that even see, essentially you need, as I said, I am kind of repeating myself like a parrot, is that we need useful apps on this. And the only way to kind of make this more and more easier is to build better tooling, app development tooling. And then, of course, getting them access to users, getting them access to liquidity and those. That's the least with which we can do.
00:55:51.930 - 00:56:18.782, Speaker B: Yeah, I'm very excited for users. I think we've seen kind of the boom and bust of user cycles. I think in 2020 and 2021, a lot of it. Some of the hardships ultimately came from higher gas fees. I think with the high throughput blockchains today, that exists, that's no longer the case. Well, now salon is going through some issues. Hopefully they can resolve those.
00:56:18.782 - 00:57:25.560, Speaker B: But it doesn't seem like fees is the predominant bottleneck anymore. We have high throughput da layers. We have parallel processing and different vms that can process a lot of transactions simultaneously. And now what I'm excited about, especially for the remainder of 2024, is consumer applications and actually using blockchains, because I think that is the missing piece. And I very much appreciate all the engineers that kind of stuck, kept up with it throughout the bear market because they're the ones now that are really at the forefront trying interesting experiments, whether it's on l two s, l three s, on eth, on integrated chains, and someone's going to crack the nut, so to speak, of that first breakout consumer application. And I'm excited that that iteration process continues to happen and the infrastructure is becoming less and less of a bottleneck over time.
00:57:26.500 - 00:57:57.350, Speaker A: Absolutely. Absolutely. Absolutely. I think you are very right in the sense that there's a lot of capacity going online and in general, like, things are getting better and better in general. And so I think the thing is that we also sometimes underestimate the kind of industry or the global access that crypto brings us. Because crypto also brings you a global user base from day one.
00:57:57.390 - 00:57:57.542, Speaker B: Right?
00:57:57.566 - 00:58:36.222, Speaker A: Like, I mean, nowhere, no other technology stack really at least gives you, it doesn't necessarily guarantees it, but it gives you an access to a user from any corner of the world. And of course, bunch of things needed to make that much more easier, for example. But structurally, that's the only infrastructure that gives you access to users from across the world at any given time, for example. And so now how do we kind of make use of it best via our consumer app? Via B two B app? Like a B two C app, for example, and so on.
00:58:36.246 - 00:58:36.382, Speaker B: Right.
00:58:36.406 - 00:58:42.870, Speaker A: Like that. That is up to the, you know, like all the community, for example, and all the new developers that are out there.
00:58:42.910 - 00:58:43.062, Speaker B: Right?
00:58:43.086 - 00:59:51.446, Speaker A: Like, so I mean, even if you look at something as simple as USDT, for example, right? Like in countries, like, like I spent a couple of weeks in Turkey last year. Turkey experiences probably 20% to 30% inflation. And it's, it's, it's, it's not possible to keep your cash in a bank because it's just going to depreciate away, right? Like you have to find other things and so you'll see in, in, you know, like people keeping cash in USDT, BTC and other assets, for example, and stable coin like this. Like, so this is one of the ways, right? Like, I mean, essentially, outside of the US, people don't appreciate, sorry, inside the US, people don't appreciate the role of the us dollar playing in emerging economies, for example. Right? Like, so just people just want to get their hands on it and things like a USDT or a USDC or a stable coins. And so that, that itself is, is one of the features where, you know, like how can you kind of take one localized aspect and give it to people from a global audience. Right? Like, so USDT or stablecoins are one example of this.
00:59:51.446 - 01:00:06.050, Speaker A: But what are these other examples? How can we enable newer behavior patterns to access this global user base? That's a good tough nut to crack.
01:00:06.710 - 01:01:53.488, Speaker B: I think that is the magic of blockchains, accessing these global markets, having the shared liquidity, being able to really unify markets where historically they are very fragmented, unlocking really bank accounts, stable currencies, the things that the traditional first world countries have really had access to for a long time. But expanding that globally and really treating everybody in the world as a first class citizen in terms of bringing this kind of archaic financial market to everybody in the world. And then when you financialize some of those, what unique incentives can be brought online to enable even better coordination and better applications? It is a very exciting world that we're heading towards and one that frankly, I just can't wait to see what builders enable because there is a lot of ideas. And I think to your point earlier, when you have an iPhone, when the app store comes out, it takes a while for people to realize, oh, I have a camera, I have a gps, I can do things like Instagram and Uber and Lyft. And conceptually those were not even in my wheelhouse prior to thinking about that. But it just takes some time for engineers to continue to iterate, find what works and what doesn't work, and leverage the unique capabilities of the underlying infrastructure. Really appreciate you coming on the podcast, sharing the wisdom that you brought on about avail all the different updates to the avail ecosystem and what you guys are planning for the future.
01:01:53.488 - 01:01:54.660, Speaker B: So thank you again.
01:01:55.000 - 01:01:57.400, Speaker A: Yep, thanks, Logan. Fantastic.
01:01:57.440 - 01:01:57.920, Speaker B: Thank you so much.
