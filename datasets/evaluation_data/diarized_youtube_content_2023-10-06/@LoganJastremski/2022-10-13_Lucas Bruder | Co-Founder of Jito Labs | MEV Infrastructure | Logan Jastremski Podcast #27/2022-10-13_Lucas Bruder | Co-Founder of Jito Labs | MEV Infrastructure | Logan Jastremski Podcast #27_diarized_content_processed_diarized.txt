00:00:00.160 - 00:00:26.530, Speaker A: Cool. I think we're live. So thank you so much, Lucas. Super excited to chat about everything that you're working on at Jito Labs and what you're building. I think this was one of the most requested podcast episodes. So excited to finally get to chat and kind of hear your story and all the good things that your team's working on.
00:00:27.080 - 00:00:28.904, Speaker B: Sweet. Thanks for having me.
00:00:29.072 - 00:00:50.940, Speaker A: Very cool. One thing that I think you and I have a unique background on, just to start the conversation, was Tesla. I know you did an internship there working on the Model X, and I would just love to get your quick experience on thoughts at working at Tesla and the learning lessons from that.
00:00:53.430 - 00:01:36.030, Speaker B: Yeah, I think a lot of Silicon Valley startups look sexy from the outside, and you think they have their stuff together, and then you show up and you're like, oh, this is chaos. I think that was kind of my introduction there. Super cool place to work. Worked on the model X, Falcon, wing doors, anything that moves or lights up on that cardinal, the second row. That car was just, like, super fancy, way over engineered, but super cool. Yeah, I was saying earlier, it's the biggest startup that I've worked at. Just everything's always on fire.
00:01:36.030 - 00:01:53.260, Speaker B: Everyone's moving super fast, but everyone loved it there. They did a good job hiring people that were super passionate. And I think I. That's definitely important when you're building a startup, find people that are super passionate and work hard.
00:01:53.380 - 00:02:19.670, Speaker A: I fully agree. Yeah, it was a unique experience, for sure. You definitely learned a lot and always lots of fire drills, but that was interesting. Awesome. To get your perspective, maybe to start off the conversation, I would love for you just to maybe touch a little bit more on your background as an engineer and then kind of your quick journey and how you got interested in crypto and blockchain.
00:02:20.770 - 00:02:56.270, Speaker B: Yeah. So computer engineering, Carnegie Mellon always just kind of interested in, like, computers, things that, like, move or light up. So kind of went down this, like, firmware and embedded systems path. So, you know, embedded systems are like, working on things like AirPods or just small microprocessors, things like that. So, yeah, I guess working at Tesla was a super cool experience. Worked on some really hard stuff. Things that moves are light up.
00:02:56.270 - 00:04:07.476, Speaker B: Just right up my alley. Got into consulting for a bit, so a drop in hardware team for teams that didn't know how to build hardware. So writing anything from bare metal c to working on real time operating systems to an Amazon Alexa type device that had voice recognition, I just got exposure to a bunch of different stuff, worked on ten different products in a year. Just had to learn super fast about different domains of computer science, computer engineering, anything from programming python to getting out oscilloscopes and probing spy lines to figure out why this led won't turn on. That led me to this company called built robotics. They are trying to solve construction labor shortages through automation. So, basically, the first, I think it was the second week I was there, we bought, like, a $300,000, 50,000 pound bulldozer.
00:04:07.476 - 00:04:38.056, Speaker B: It's like, okay, figure out how to, like, hook into it and control it. So did everything from, like, ripping apart the cab, figure out how the joysticks work. You know, it's like, PWM, this duty cycle, this frequency to, like, okay, let's hook an Arduino into it and get, like, an Xbox controller and kind of, like, drive the bulldozer with my Xbox controller to, like, sourcing sensors, hardware, writing the robotics controls for it all.
00:04:38.088 - 00:04:45.380, Speaker A: That's awesome. Wild times. How is it driving that with an Xbox controller?
00:04:46.280 - 00:05:01.862, Speaker B: It's pretty scary, especially when you're not in the cab. They took safety very seriously, so there was several layers of safety, and we had a remote e stop for it, but it's super cool to. It's like being a big kid.
00:05:02.046 - 00:05:15.570, Speaker A: So how do you go from kind of a lot of more focus on the hardware aspects and kind of that front to getting more into the software and blockchains?
00:05:16.870 - 00:05:29.340, Speaker B: Yeah. So I think I discovered crypto and blockchain towards the end of the 2017 cycle. It was like, litecoin, verge, bitcoin, Ethereum.
00:05:29.800 - 00:05:31.336, Speaker A: Wild times back then.
00:05:31.488 - 00:06:07.340, Speaker B: Yeah, stuff was going up, like, two x in a day. I was like, oh, this is cool. It's cool. Until I lost all my money and held it down, but kind of stayed in the. In the know, like, on Twitter through, like, 2019, 2020. Saw Defi start to pick up, got into that a little bit. The moment when I decided to switch from just being, like, a speculator to, like, a builder was.
00:06:07.340 - 00:06:36.002, Speaker B: I read Dan Robinson's dark Forest article. So it's talking about, like, ethereum's mempool is a dark forest, and kind of how they were trying to white hat hack some funds that were lost, and there was a bot that kind of front run them. It's kind of just going over all the mev stuff happening on ethereum. So I was like, oh, this is super cool. And I think I started working on mev bot that night.
00:06:36.186 - 00:06:37.030, Speaker A: Crazy.
00:06:37.530 - 00:06:50.298, Speaker B: So then, yeah, I stayed up to, like, worked my day job and then stay up to two or three in the morning, on the spot. And that's when I got hooked into coding on blockchains.
00:06:50.474 - 00:06:55.230, Speaker A: And was that first bot implementation on Ethereum?
00:06:55.850 - 00:06:56.870, Speaker B: Yeah, it was.
00:06:57.370 - 00:07:18.620, Speaker A: And ultimately, now Jito Labs is more focused on the Solana front. What kind of learnings did you have from creating that first bot on ETH and what ultimately kind of inspired you to, like, after building it, that this was something that you wanted to do full time?
00:07:20.520 - 00:07:58.350, Speaker B: Yeah, so I guess the learnings, like, I had mainly been in, like, embedded systems and robotics before that. So just, like, learning how to run infrastructure, how to set up this, like, automated trading system, how to, like, monitor the mempool, like, what kind of strategies people are running. It was just like a really good learning experience to kind of just dive into something different and figure out how to make it work. And then. Sorry, what was the second question?
00:07:58.810 - 00:08:41.120, Speaker A: Kind of like, yeah, like, the learnings from, like, building on ETH and maybe even, like, touching upon, like, solidity or how that worked. And then maybe after that, like, I think one thing Mev, more holistically, is kind of a very technical topic, and a lot of people, I would say, are still trying to wrap their heads around it. So maybe kind of just, like, wrap up kind of your learnings and then go into what is Mev, why it matters? And I think I saw some of your recent tweets going back and forth with people saying Mev is gravity, and I agree, but describe kind of that thought process as well.
00:08:41.660 - 00:09:34.686, Speaker B: Yeah. So, yeah, I kind of just put together the bare minimum bot on Ethereum. I didn't really understand solidity. It's kind of like, right as flashbots is taking off. So some of this being super, super gas efficient wasn't absolutely necessary like it is today. But then, yeah, I got into, I did the salon hackathon, got into Mev through that. I did something completely different from MeV, and then kind of saw what was happening with flashbots, the success that they had just reducing gas prices and the congestion on Ethereum, kind of saw what was happening on bsc and polygon, and then came up with the idea for Jito Labs.
00:09:34.686 - 00:10:18.194, Speaker B: Kind of had this theory that the same things would start to happen, Solana. Yeah, I think weve seen that come true. And then, yeah, I guess on Mev. Mev is maximum extractable value. I saw, like, yesterday, there's a few other ways that people are phrasing it as well, but basically, it's like your power is a block producer to insert reorder sensor transactions to profit. So on some differences on Ethereum Mev and Salamander, Solana Mev. I guess there's a few obvious things.
00:10:18.194 - 00:10:41.908, Speaker B: Like, Solana doesn't have a mempool. Basically, transactions go from your wallet to RPC server. And then it looks at the leader schedule. It's like, oh, Logan's a leader now. And then Anatoly is the next leader. So I'm going to send it to those two and wait for it to confirm. The next one is, like, throughput and latency.
00:10:41.908 - 00:11:02.244, Speaker B: Like, you know, salon is very fast, very low latency. Slot times are 400 milliseconds, and you might be in Germany and for, you know, the current slots, and then you'll be in, like, New York the next, and then Miami, and you're kind of just, like, bouncing around the world every 1.6 seconds.
00:11:02.332 - 00:11:14.420, Speaker A: Yeah, it is pretty impressive how quickly they've been able to, well, one the block times, but then also on the latency front, it's very impressive what Solana has been able to achieve.
00:11:15.000 - 00:11:23.648, Speaker B: Yeah, it's. Yeah, it's a crazy piece of engineering, especially for it's been like two or three years at this point.
00:11:23.744 - 00:11:44.190, Speaker A: So maybe kind of continue on the topic of just like, more holistically MeV and kind of why you wanted to specifically focus on this, like, the MEV problem, and then we can talk about more. The Solana Mev problem.
00:11:45.170 - 00:12:40.072, Speaker B: Yeah, I wanted to focus on it because it's just like, very, I feel like it's like an area that I feel like there's constantly more to learn in. I just like learning about things and especially complex engineering things. So it's kind of just like that curiosity that got me hooked. And then also after participating in the salon, a hackathon, and building something on there, I just realized how much of a better experience it is than Ethereum. I wanted to see that succeed. I want to continue to see that succeed and have it so that everyone has a good user experience.
00:12:40.256 - 00:13:45.980, Speaker A: I fully agree. It's been interesting just watching the progression of blockchains over time. I think what now is interesting to me is getting that user adoption, personally, to have that continue to actually grow and get people, like, interacting with smart contracts, you kind of have to have that web two, like, experience because that's what people are used to while maintaining kind of like, the censorship resistant pieces and decentralization, but keeping that high kind of performance. And so I'm very interested, and I really do like Solana's design just because I think they've optimized for the correct things. So it's very cool maybe to talk about why or like, what is the state of kind of Mev on Solana and why you've decided to focus kind of jito labs and the engineering efforts on MeV there.
00:13:46.720 - 00:14:02.400, Speaker B: Yeah. So SATA Mev on Solana. Uh, we have a mev dashboard. It's on our website. Uh, judo. WTF. And, uh, there we collect stats on like what's going on in Solana.
00:14:02.400 - 00:14:26.560, Speaker B: So, um, if you look there, um, I think the, it's like over 99% of liquidation attempts fail. It's like 99, 98% to 99% of arbitrage attempts fail during very high volatility times. There's a significant portion of the block space that's dedicated to those transactions.
00:14:28.220 - 00:14:34.840, Speaker A: And why do a majority fail? Is that because other people are also attempting to liquidate certain things?
00:14:35.500 - 00:15:11.850, Speaker B: Yeah. So it's kind of just like a spam game. Like, labs is doing a lot to fix this, and now I'm like extremely optimistic on quick and fee markets to kind of fix this. But the fees are so cheap right now that theres not really a penalty for failing transactions for sure. Like on ethereum, if youre trying to land an arbitrage, you basically need to cover the price of gas, which is like dollar 50. So if youre constantly failing dollar 50, thats going to add up very fast.
00:15:11.930 - 00:15:12.710, Speaker A: For sure.
00:15:13.530 - 00:15:17.770, Speaker B: Solana, you know, it's like a hundredth or a thousandth of a penny, whatever it is today.
00:15:17.890 - 00:15:18.590, Speaker A: Yeah.
00:15:20.370 - 00:16:15.534, Speaker B: So, yeah, that's kind of like the state of Solana quick is like being rolled out. Now. There's a lot of validators that are running quick and that will help kind of give some back pressure to bots. So basically, if they start, if they exceed their allowed throughput, you can tell them to back off or disconnect them. And then I think the fee markets will help a little bit as well. But I think there's still this need for very fine grained transaction ordering that essentially like flashbots introduce with bundles. So that's what we're focusing on with all the stuff that we're working on is more flexibility on the transaction ordering to basically make the whole chain run more efficiently.
00:16:15.702 - 00:17:10.200, Speaker A: Very cool. Yeah, I'm very excited for the network updates as well. I think kind of the innovation of doing fees per contract versus the global fee markets is a massive one. As I've talked with other kind of layer one protocol architects, they're very interested in implementing this design as well because I think, I mean, holistically, it just designs a much better user experience, and honestly, just makes sense as you're kind of pricing resources accordingly. But very cool. I think maybe one thing that we could also touch upon is why is, like, the no mempool important and Solana versus, like, I mean, I think, I'm not sure of any other blockchains today that do not have a mempool. What, what about that functionality makes it unique?
00:17:13.020 - 00:18:30.450, Speaker B: So, yeah, I guess it's unique in the sense that if your transaction doesn't, like, basically you, there's no, like, pool to send things to. And so it adds some layers where each layer is kind of responsible for potentially retrying that transaction to land it. I think that a mempool would be very, very hard to build at this throughput, and it's also super inefficient given how fast Solana is moving to. Yeah, like, it wouldn't really make sense to have this mempool that every node on the network has for, especially when there's a lot of transaction activity. There is this kind of, it's kind of like, you know, there's no global mempool, but you could almost view it like a rolling mempool where like, RPC servers and like, wallets are sending transactions to the current leader in the next three. So you kind of have this sliding window mempool, which seems to be way more efficient than the global mempool.
00:18:30.790 - 00:18:45.720, Speaker A: Definitely. And was this kind of, I mean, again, the main, was the main reason, again, for building on Solana was just kind of that user experience, or was it more just like the technical novelties that the design enabled?
00:18:47.140 - 00:19:20.376, Speaker B: I would say all of it. The user experience is amazing. I think that it has probably the highest chance of onboarding the most people. So from that standpoint, we want to see it succeed. And obviously, it's extremely technical. We spent almost a year at this point building our system, so it wasn't a trivial thing to work on, which is fun for engineer like me.
00:19:20.488 - 00:19:21.580, Speaker A: Yeah, for sure.
00:19:22.040 - 00:19:31.832, Speaker B: And then there's also a lot of interesting Defi composability that you can do on Solana that I think isn't possible in other chains.
00:19:31.936 - 00:19:54.950, Speaker A: I fully agree, maybe to touch upon two things there. You mentioned the slots and kind of like the one and a half seconds or so of the single mempool. Could you talk upon that? And I think you did briefly about how those kind of move about worldwide and kind of those pros and cons of that, and then touch upon the composability aspect as well.
00:19:56.210 - 00:20:41.520, Speaker B: Yeah, so the mempool or the, I guess the moving mempool. Essentially what happens, let's say you're on orca or some other Solana dapp, you do your interaction, you sign the transaction. That transaction is then sent to an RPC server. That RPC server is keeping track of time. It knows what the current slot is. It knows the leader schedule. Essentially what happens is it looks at the leader schedule and the current time, it's like, okay, who are the next three validators, or who are the next four validators? And it sends that transaction to those four validators.
00:20:41.520 - 00:21:29.510, Speaker B: So those four validators, the current one will attempt to process it. If it doesn't, the second one will attempt to process it, and so on. You also have, the validators are like, forwarding. If it doesn't process those transactions, it'll forward them to the next validator in line. So between all that, you get pretty high reliability on transaction being included. So, yeah, I think that is way more efficient than you're only sending to four validators, or however many the kind of look ahead is. So it's way more efficient than sending it to every single validator on the network.
00:21:29.890 - 00:22:29.010, Speaker A: Yeah, no, it's very clever. Anatoly ultimately wrote, I think, eight medium posts about the key innovations of Solana's design. And I've read all of them multiple times. And every time I go back and reread them, I feel like I learned something new and just how clever the engineering actually was. So it's very cool to hear them in your words and then kind of, I think, one of the other novel aspects just about Solana. And then we can kind of touch upon, like, some of the things that make it a little bit more, or get into a little bit more of the technical stuff, and then kind of go into how Judah labs is kind of ultimately working within that is the composability aspect and all the unique things that kind of building on a single shard with high throughput and low latency enables. So, in your words, could you kind of talk about what composability is in your eyes and how you're kind of thinking about it?
00:22:29.550 - 00:23:55.540, Speaker B: Yeah, composability is just like the interactions between different DeFi protocols and how you can essentially build on top of them to do complex things or potentially simple things from the user standpoint. But there's a lot going on behind the scenes that is kind of abstracted away. I think another unique thing about Solana is the transaction format and how transactions have multiple instructions inside of them. And so you can imagine on Ethereum, if you want to compose transactions, you have to, you potentially have to write a lot of on chain code to compose those things. So you have your main function that you're calling, and then it kind of calls into multiple protocols as it's being executed on Solana, you can just pull that out into instructions and do it in your transaction. So it's kind of like each transaction is a bundle. Like a bundle in a sense, where you have these things that are being executed sequentially.
00:23:55.540 - 00:24:08.348, Speaker B: I think the cool thing about that is if you're an application developer, you don't really have to write any code on chain to do anything.
00:24:08.504 - 00:24:11.000, Speaker A: Like, to take advantage of the composability.
00:24:11.780 - 00:24:30.156, Speaker B: Yeah, like you're kind of just calling instructions, like, you know, swapping something on orca to, like, depositing and mango, like, you don't really have to write any on chain code to do that. Like, you're kind of just building a list of instructions. Yeah, I think that's super cool.
00:24:30.268 - 00:25:02.810, Speaker A: I agree. I'm personally extremely excited, kind of, for, for the single shard architecture. I think a couple other blockchains will eventually do it as well, but just all the unique things that composability ultimately will enable. I think today we're still in the very early days and exploring those primitives, but as these applications continue to mature over time, how they start to compose within each other, I think will be fascinating. And really the secret sauce that holds the network together.
00:25:03.940 - 00:25:32.598, Speaker B: Yeah, definitely. I think the whole l two and cross chain experience, I think it's going to be like today. I think it's pretty hard for a user to figure that out. I'm optimistic. There's a ton of smart people working in that space, and hopefully they abstract it away from the user. But I think from a user standpoint, if everything is just on the same chain, it's way easier to think about.
00:25:32.734 - 00:25:33.530, Speaker A: Definitely.
00:25:33.910 - 00:25:37.970, Speaker B: And then way easier to compose, like you said, definitely.
00:25:38.350 - 00:25:56.650, Speaker A: Awesome. Maybe just to touch on a couple other of kind of Solana's innovations, and then we'll jump into jitto. Is turbine kind of like how they stream blocks? What are your thoughts on, like, each of those from the technology perspective and what they enable?
00:25:58.320 - 00:26:58.460, Speaker B: Yeah, so turbine is like Solana's block propagation. The way of thinking about it is like ethereum will emit, essentially emits in every blockchain that I know of. Essentially emits the entire block at the end of the slot. Solana, it's like constantly streaming blocks out, and they call them shreds. So essentially you have this pipeline where it's like, you receive the transaction, it does signature verification, de duplicates it executes, it adds it to proof of history and then basically breaks it up into packet sized chunks and then sends it out to the rest of the network. This is constantly going on. So like you can, the really cool thing is that like other validators will start replaying that slot.
00:26:58.460 - 00:27:02.656, Speaker B: Like mid, they'll start replaying that slot midstream.
00:27:02.768 - 00:27:03.152, Speaker A: Yeah.
00:27:03.216 - 00:27:15.440, Speaker B: So like, you know, if, if you're a leader, right now you're streaming out slot 100, I can be like a few mills, like tens to 100 or 200 milliseconds behind you in the same slot.
00:27:15.520 - 00:27:16.046, Speaker A: Yeah.
00:27:16.168 - 00:27:21.070, Speaker B: Um, so I'm not waiting for the very end to like replay everything.
00:27:21.370 - 00:27:49.600, Speaker A: Um, yeah. Turbine, I think is fascinating. And I, the only blockchain today that I know of that is doing kind of unique data propagation outside of the gossip protocol. And I've been trying to find like other blockchains that do something similar and it's just been hard to do, hard to do that. Um, but I think it's super unique, kind of piggybacking off. What is the protocol that it's based on? Bittorrent.
00:27:51.620 - 00:27:52.680, Speaker B: I'm not sure.
00:27:53.500 - 00:28:21.930, Speaker A: I think it's Bittorrent and just how they see information, but the fact that they're able to continuously stream data just gets me super excited. The fact that there are no pauses. Every block is streamed in real time and that's just a continuous process just seems like how ultimately going forward these systems should be designed and there's never like a pause in between things. It's just continuous data and validation going forward.
00:28:23.150 - 00:28:40.308, Speaker B: Yeah, it's pretty crazy when you think about that. And then the fact that you might be in like Frankfurt, 1 second, and then you're in Tokyo and then New York, like all within the span of like 5 seconds, and it's just this like never ending stream of stuff. So super cool.
00:28:40.444 - 00:28:52.800, Speaker A: Definitely. And how does that kind of affect rolling back state for different bundles and blocks more holistically?
00:28:53.980 - 00:28:58.240, Speaker B: So yeah, we're focused mainly on rolling back state for bundles.
00:29:01.220 - 00:29:06.800, Speaker A: Can you also just describe bundles as well? I think you did, but maybe a little bit deeper.
00:29:07.810 - 00:30:20.640, Speaker B: So yeah, bundles are a list of a set of transactions that you want to execute sequentially, atomically, so sequentially meaning in order, atomically meaning all or nothing. And they only get committed if they all succeed. So if we run into at least the current state, we can change that in the future, but that's the way that things are currently coded. So essentially if you have three transactions and the second one fails, it will just roll back the entire thing and finish executing. So some good use cases for bundles, like if you're using orca or some other DAP on Solana and you run into the transaction limit, the user experience kind of leaves something to, there's room for improvement on that user experience. By using bundles, you could essentially sign both transactions and send them through our system to Ajito Solana validator. And that validator will just execute those in a row and commit them to proof of history.
00:30:20.640 - 00:30:27.806, Speaker B: So that's one good use case. A good use case for searchers is atomic arbitrage. So.
00:30:27.958 - 00:30:31.462, Speaker A: And what are the searchers doing, uh.
00:30:31.526 - 00:30:33.366, Speaker B: For when they're like building bundles?
00:30:33.558 - 00:30:40.366, Speaker A: Okay, so I'm just asking like, more holistically, like, what is a searcher? What is its role? What is it application?
00:30:40.398 - 00:30:40.998, Speaker B: Oh, yeah.
00:30:41.134 - 00:31:08.260, Speaker A: I think a lot of people are like, super interested in MeV, and obviously you guys have thought extremely hard about this and have spent a long time like, setting up the engineering process, but maybe like even like backing up further on, like, what is like the, like, maybe step by step of like, what's happening in judo labs from like, the technology perspective, just so people can like, follow along with like your thought stream.
00:31:08.760 - 00:31:46.622, Speaker B: Yeah. So I guess I'll start at the top. So Mev Searcher is essentially someone that's searching for these opportunities to make money. So that can be like arbitrage, liquidations, minting nfts, whatever it may be, where they think that they can make money. And I think that they're extremely critical for blockchains to function like these high frequency traders. They keep all the prices in line, make sure that protocols are solvent and all that stuff. So right now in Solana, we went over this earlier.
00:31:46.622 - 00:32:37.520, Speaker B: It's a latency race. Basically, you have validators that are sharing their turbine streams with RPC servers, skipping multiple hops to get low latency access. People are tuning their RPC servers to make them run faster. It's basically who can get processed first. This results in a lot of wasted block space that we talked about earlier. Essentially, what we're trying to do at GiTo is build more efficient infrastructure to enable MeV, like, more efficient, make it happen more efficiently, make the network run smoother, help it scale. And then also it's super important that MeV is distributed to stakers as well.
00:32:37.520 - 00:32:40.998, Speaker B: So we've built all that infrastructure.
00:32:41.134 - 00:33:11.820, Speaker A: Awesome. Maybe going a little bit deeper into that. How does MeV more holistically help increase their performance of the network. I think one aspect that's unique is it's basically incentivizing node operators to upgrade their requirements to help process more transaction and more throughput. But I'd be curious, in your words, how does it make the network better and why? Do you describe it like gravity?
00:33:14.320 - 00:33:57.724, Speaker B: Yeah, I described it like gravity because it's like inherent. Like you can't get rid of me. And distributed systems like blockchains, it's just kind of like a property that exists and, yeah, you just can't, like, I know, uh, Kyle was kind of shitposting there, but um, I was shitposting back at them. Uh, it's like you can't really get rid of gravity. Yeah, um, like you can't really get rid of Mev. Um, I think, you know, mev, it's important to, like, I think it's um, it's important for like Dapps to minimize the MEV that they expose their users to. Like, you know, when you go on uniswap, you set your slippage too high.
00:33:57.724 - 00:34:36.850, Speaker B: Or Orca, it's like you might get front run. Like there needs to be a lot of that happening on front ends for people that don't necessarily know what MEV is, so they have a good user experience. But everything else, like Mev, is impossible to get rid of. So for everything else, like, we should officially extract it. And I think it needs to be distributed to stakers. I think it's a good way to encourage more people to stake and secure the network. And then it also provides like a little extra revenue to validator operators.
00:34:36.850 - 00:35:02.660, Speaker B: So it has a potential, like you said, for them to potentially have more money to upgrade their hardware so that they can process more transactions to, to bring more validators online as well. So if you're making a lecture more money, you need less stake to break even. You can spend more money on your operations.
00:35:03.560 - 00:35:29.620, Speaker A: Yeah, that totally makes sense. I like the point of view of being able to distribute that back to stakers. I think if you are able to optimize something and other people are able to contribute to that vision, everybody is kind of aligned and incentivized to push that forward while making the network healthier. Pretty cool idea.
00:35:30.480 - 00:35:56.178, Speaker B: Yeah, that's super important to us. These users are helping secure the chain, and they're also users of the chain. We believe that that should be distributed to them for sure. I think that they will use it to stake more Solana as well, definitely, which increases the security and decentralization of.
00:35:56.194 - 00:36:36.790, Speaker A: The network for sure. One thing that you mentioned was today, because the network doesn't have fees by contract, um, some of the block space can just get flooded. Uh, fees per contract will ultimately get implemented on Solana. Hopefully that reduces some of the spam. Um, I think you both, uh, we both are aligned on that. But how does Mev specifically kind of use block space more efficiently? Because block space, I think, more broadly on every blockchain, is kind of that scarce or valuable resource. How does Mev plan to use it more efficiently?
00:36:38.330 - 00:37:21.404, Speaker B: Yeah, I guess. I guess Mev will always be there. It's just about how do you capture it and how efficient is that process? Right now it's this game where you see an update. I see an update ten milliseconds later and so on. All these people kind of just send transactions. They all get there at different times, and that's kind of how you end up with this wasted block space. Ultimately, I think it's because there's like this aspect of, like, probabilistic ordering where you don't necessarily know if you're first to respond or not and you know the ordering you want.
00:37:21.404 - 00:38:24.936, Speaker B: Like, I want to, if I see some opportunity to create an arbitrage, I want to be directly behind that. So a system that we built with bundles in our block engine lets high frequency traders and searchers be very granular about what ordering they want. And we will kind of take care of the simulation, making sure that people are paying the most for some set of state and only sending things that succeed. So right now you might see an arbitrage, and then 100 milliseconds later, you see a ton of packets come through that once the first one succeeds off, the rest fail. We're offering essentially guaranteed ordering and atomic ordering as well. You can see that packet come through. Submit a bundle with that arbitrage, and we will essentially make sure that it pays the most and submit that one to the validator, and then the rest won't make it to the chain.
00:38:25.048 - 00:38:26.080, Speaker A: Very interesting.
00:38:26.200 - 00:38:35.144, Speaker B: So there should be one transaction that creates arbitrage, one that captures it, and then that's like the most efficient version.
00:38:35.272 - 00:38:51.250, Speaker A: Awesome. Well, maybe that's kind of a good jumping off point into kind of what you're more building at judo labs and some of the products you're offering. So we go into kind of what you're working on at Jito and some of the things that you're excited about today.
00:38:51.750 - 00:39:24.486, Speaker B: Yeah, yeah, we've been super busy. So excited to kind of talk more about some of this stuff. Yeah. So, yeah, we have, I guess our big thing is like Jito Solana. So this is a fork of Solana Labs validator client, and that unlocks a few things. It unlocks transaction bundles that we were talking about earlier. It unlocks, there's some mev tip payment and tip distribution code in there, which I can get to in a bit.
00:39:24.486 - 00:39:55.354, Speaker B: Then it also unlocks connections to relayers, which I'll get into in a sec as well. We've added a few thousand lines of code. We have our own transaction execution pipeline that allows you to execute these things and potentially roll back state. And then we also change proof of history so that you can essentially batch write bundles to proof of history.
00:39:55.482 - 00:39:55.842, Speaker A: Interesting.
00:39:55.866 - 00:40:23.126, Speaker B: You can imagine a situation where you're at the very, very end of your slot. You have five things to write, and you only have enough time to write four of those. You don't want to commit the first four and leave the fifth one out. You just want to drop the entire thing. So we kind of have all that stuff to make sure that the entire thing is shared with the rest of the network. So the rest of the network doesn't even know that stuff's being rolled back. It's just being handled internally.
00:40:23.318 - 00:40:35.290, Speaker A: Very, very cool. So is this going to be the third client on Solana? The Solana client, fire dancer and judo Solana?
00:40:35.650 - 00:40:36.282, Speaker B: Yep.
00:40:36.386 - 00:40:37.050, Speaker A: Very cool.
00:40:37.130 - 00:40:38.970, Speaker B: Yeah, yeah, we're super excited.
00:40:39.130 - 00:40:46.990, Speaker A: Yeah, I think hopefully between all three of those, we'll have less downtime going forward.
00:40:47.650 - 00:41:06.956, Speaker B: Yeah, I hope so. Yeah, that's kind of, like, been our baby for the past few months. We've gotten an audit, and then we're just doing another, like, double check audit right now. So we should be releasing that very, very soon.
00:41:07.068 - 00:41:07.476, Speaker A: Awesome.
00:41:07.548 - 00:41:47.080, Speaker B: We just want to make sure that, you know, it's very scary to release something like that. And Solana is, like, very complex, technically, so we want to make sure that we release it, and we're very, very comfortable about the reliability of it. Yeah, that's geo Solana. We also have a relayer. The relayer will essentially work with Jito Solana, so you can run. It's essentially like a TPU proxy tpus transaction processing unit. So validators gossip out.
00:41:47.080 - 00:42:32.792, Speaker B: Hey, here's my ip, here's my port, here's where you send transactions to, and there's a lot of volatility or a lot of mev going on. They just get slammed with packets. We essentially added this relayer where you can run it on a different server, and it works with UDP and the quic that's being rolled out, it runs the filtering, sigverify, all that stuff, then it will forward those packets to the validator. So it's kind of like a proxy that does some filtering and things, but it also plays a core piece of our block engine and the mempool stream.
00:42:32.816 - 00:42:40.780, Speaker A: That we have, essentially, for the vast majority of people. Could you also just explain what a relayer is and what it does?
00:42:43.000 - 00:43:14.002, Speaker B: Yeah, so I guess this relayer is a little bit different than the flashbots relayer, but you can think of it like a proxy. So essentially, we're putting the relayer in front of the validator, and instead of the validator receiving those packets first, the relayer does. So the relayer, it lets you run the same algorithms on the validator to filter packets and things like that and deal with potential spam and stuff like that to a different server.
00:43:14.106 - 00:43:14.950, Speaker A: Gotcha.
00:43:15.330 - 00:44:07.564, Speaker B: Um, so, yeah, and it also plays a core piece of our block engine as well. So, um, packets will essentially hit the relayer. Uh, they get forwarded to the block engine, and the relayer keeps those packets in there for super short amount of time, like less than a blink of an eye. Um, and that, that time is how much searcher the. That time is how much time searchers have to submit bundles and give our system the time it needs to figure out what's the most profitable bundles to submit. And then after that short amount of time, the relayer automatically forwards it to the validator. So this is like a very censorship resistant way to design the system like we like us.
00:44:07.564 - 00:44:23.720, Speaker B: And any future people that use a system will not be able to censor transactions. So it's just kind of like removing that whole potential area of, like, flood and even the ability to, like, do that as well.
00:44:24.060 - 00:44:43.470, Speaker A: Interesting. Very cool. And the block builder is kind of what you ultimately submit as your bundle to, to kind of the leader node and trying to get that included to be validated by the rest of the network.
00:44:44.210 - 00:45:24.658, Speaker B: Yeah. So the block engine is the interface between validators and searchers. So searchers can connect there, you can subscribe to pending transactions there, and transactions at the relayer send over are forwarded to searchers. Searchers can then bundle stuff up, submit, bundle. We do like, a ton of simulation. So basically trying to, we run a bunch, and we also run like a bunch of parallel state auctions as well. So, you know, because of the Solana transaction format, you know, the read and write locks that a transaction holds.
00:45:24.658 - 00:45:27.490, Speaker B: So you can actually run these auctions in parallel.
00:45:27.610 - 00:45:28.430, Speaker A: Interesting.
00:45:29.820 - 00:45:51.840, Speaker B: Someone trading on Sol USDC on Orca can be executed at the same time. There's no dependencies between that and BTC USDC on Orca, we can basically split up all these auctions and run them in parallel and simulate to figure out who pays the most for some given set of state.
00:45:52.380 - 00:45:53.324, Speaker A: Very cool.
00:45:53.492 - 00:46:19.360, Speaker B: That's a very hard problem because we're also trying to simulate, we're doing all that, and the stream thing that I was talking about is like the, like, the shreds are constantly being streamed and the RPC servers are constantly trying to replay and like, be as close to the tip of the network as possible, and we're trying to simulate on that state. So it's a very, very hard problem.
00:46:19.480 - 00:46:48.130, Speaker A: To work on, I bet. Yeah, I'm super curious just over the long term too, how, how the hardware continues to progress as more data gets submitted to nodes. Yeah, so it's definitely a hard engineering problem, but I appreciate what the Jito labs team is doing to be at the forefront of that. And again, just super excited by what you're doing with the Cheeto client. Yes, that's super exciting.
00:46:49.070 - 00:47:19.806, Speaker B: Thanks. Yeah, we've worked a lot on it. A lot of those changes. Like we want to get into upstream as well. So some of the replay stuff that I was working on a few weeks ago, we want to get that into Solana Labs client because that will just massively increase the throughput of those validators. We're definitely extremely dedicated to our own client, but also getting things into labs.
00:47:19.838 - 00:47:22.846, Speaker A: Client as well, contributing back to the ecosystem.
00:47:23.038 - 00:47:24.126, Speaker B: Yeah, for sure.
00:47:24.278 - 00:48:00.710, Speaker A: Awesome. No, it's very exciting work, and I think a lot of people are fascinated by what you and the team are doing at judo Labs and ultimately how it will help benefit the network. And eventually, I mean, even with distributed staking, how they'll kind of earn money from what you've been building there as well. So out of those core three products, is there any one specifically that the team is focusing more on holistically, or are they all kind of pretty intertwined with the client, with the relayer and the block engine?
00:48:01.930 - 00:48:27.790, Speaker B: Yeah, I'd say most stuff is working on the block engine and just infra around that. So everything's running on bare metal. So there's some unique challenges there, adding features to the block engine and kind of just like being able to like fluidly move from one thing to the other and figure out what the bottlenecks are and fix it.
00:48:28.690 - 00:48:33.350, Speaker A: And when you say bare metal, what does that mean for people watching?
00:48:33.650 - 00:48:55.050, Speaker B: Yeah, run your info on bare metal, especially if it's Solana, you'll see tolly talk about that a lot. Bare metal is basically like you're not running on top of a virtual machine or any virtualized environment like you are running on Ubuntu that's running on the metal itself.
00:48:56.110 - 00:49:02.846, Speaker A: The reasons for not running on the virtual machine and just running on the actual hardware itself is just extra performance increases, correct?
00:49:02.918 - 00:49:35.420, Speaker B: Yeah, it's extra performance increases. Sometimes when you run on vms, you can run into situations where you're sharing it with. Could be sharing a vm with Google and they're just abusing it and taking away compute from the VM that you're running on because you're sharing the ram and all the memory and SSD's with other people. By running on bare metal, it's only you, no virtualization.
00:49:35.580 - 00:49:53.000, Speaker A: And I'm curious on like, what hardware you guys are running today to do all the like, keeping at the tip of the network. And then as we continue, I'd say to onboard, more users, where do you kind of see that progressing over time?
00:49:53.700 - 00:50:10.232, Speaker B: Yeah, so we're in the process of moving to like the third gen AMD chips. So we found a good provider that has that and those run way faster.
00:50:10.376 - 00:50:11.100, Speaker A: Nice.
00:50:12.120 - 00:51:14.878, Speaker B: So that will be pretty cool for just our entire system, our validators, our RPC servers, block engine. As the network onboards, more people you're going to start to see, I think, fire dancer and the jump team, this is their kind of bread and butter. Like, if you look at the fire dancer repo, it's like, what is this? It's super, super low level. It's kind of reminding me of embedded systems I used to work on where you are working very close to the metal. So I think you're going to continue to see that, and then you're also going to continue to see people upgrade their servers to maybe the newest gentle processors. There's definitely a future where things go to FPGA's. More stuff running on GPU's just these dedicated programmable circuits that have one purpose and they do one thing very, very well.
00:51:14.974 - 00:51:44.270, Speaker A: Yeah, I asked holy this question as well to get his thoughts. He said he was unsure about FPGA's, and he said maybe GPU's, but he was like, he thinks ultimately they'll kind of satisfy all the population with like a 512 core. He said 256, but potentially 512. And so what are the, what are the AMD core counts today or the new ones that you guys are going to be working with?
00:51:45.490 - 00:51:49.034, Speaker B: I think they're like 32 core 32 64 thread.
00:51:49.162 - 00:51:50.980, Speaker A: Okay, interesting.
00:51:52.120 - 00:52:25.438, Speaker B: Yeah, I guess, I mean, I guess you could. Most people are running on like, single core motherboards, but they do have like dual core or even like quad core motherboards that you can get issue with those is the clock speeds are usually slower, so they can't keep up with proof of history. But there's certainly a world where I think I could buy that if I, um. There might not be like the absolute need to run on FPGA's, but something's definitely. Something needs to change to get there.
00:52:25.534 - 00:52:26.238, Speaker A: Yeah.
00:52:26.414 - 00:52:28.062, Speaker B: Startup software and hardware.
00:52:28.166 - 00:52:56.930, Speaker A: Yeah, I. I definitely. I think one of the biggest misconceptions that I see is that, like, Moira's law is kind of dead. I think in some sense it's true with like the clock speeds, but ultimately, by adding additional cores, you still get kind of the extra performance increase. So I'm very excited to watch kind of the hardware progress, but also the software, what you're building, what firedancer is building, to kind of take advantage of those additional cores. So it'll be fun to watch.
00:52:57.510 - 00:53:05.934, Speaker B: Yeah, yeah. The fire dancer team's doing really cool work with. Just like, you know, they're very, very close to the metal.
00:53:06.022 - 00:53:32.540, Speaker A: So to me it's surprising just, I mean, their goal of 10gb/second is just so more ambitious than I would say, like any other of kind of more. The legacy blockchain architectures like Ethereum, that to me, it's just like a totally different world. But I'm excited that someone's trying to do something as ambitious as that.
00:53:33.440 - 00:54:00.326, Speaker B: Yeah, I think I. There's a lot of people that just kind of like wave their hands and they're like, oh, we need scaling or like l two s and stuff like that. But I feel like we haven't hit the limit of what hardware can do exactly. I mean, yeah, I think there's a lot more to squeeze out from there before I would feel comfortable saying that we need to do this stuff.
00:54:00.438 - 00:54:34.340, Speaker A: I fully agree. Um, yeah, no, uh, I. The limits, we're not even close. Uh, I would say we're just scratching the surface. And so it's cool to, uh, have, uh, some blockchains, attempts to find those limits. Um, very cool. Uh, maybe touching a little bit more on, uh, kind of the mev distribution, like the tip payment, um, and how you guys plan to distribute kind of the mev earnings by the software that you've developed.
00:54:34.960 - 00:55:23.220, Speaker B: Yeah, super good question. This is the thing that I think a lot of stuff we talked about is pretty technical and maybe the average user cares or they don't, but I think the people really care about this. We have these two on chain programs, we call it tip payment. Tip distribution. Tip payment lets you tip validators for essentially priority access to transaction processing. There's eight accounts that you can tip. We did eight so that you can potentially multi thread or have multiple bundles executing in parallel that touch that state.
00:55:23.220 - 00:56:18.554, Speaker B: And essentially what happens is people tip those eight program, those eight accounts. When the validator is done processing, when the validator is done with their slots, they transfer the money from there to this MEV or Tip distribution program. Every validator has their own tip distribution account per epoch. So like you'll have one for Epoch 100 101, all of my own for 100 101. So essentially like splits up the validators, MEV profits per epoch into the single account. So then from there we have code running and we'll open source this. That takes a snapshot of everything at the end of the every epoch.
00:56:18.642 - 00:56:19.122, Speaker A: Yeah.
00:56:19.226 - 00:56:47.802, Speaker B: So very last slot in the epoch, it will take a snapshot of all the stake accounts and then we essentially generate like an airdrop for, the software will generate an airdrop for each stake account that contains mev. So if you're staking to a validator running judo, Solana, you will get an airdrop every epoch that contains your pro rata share of mev on that validator.
00:56:47.906 - 00:56:48.218, Speaker A: Nice.
00:56:48.274 - 00:57:24.586, Speaker B: The validator can take commission, so we have a open commission percentage that they can set so you can see what other validators are taking and make stake decisions on that. And then the validator can upload their own airdrop or they can delegate it to others. We'll be running this code. If they don't, like, if they want to do it themselves or they don't trust someone to do it, they can do it themselves. We tried to design this in a way so that the validators don't have to touch the money at all.
00:57:24.738 - 00:57:47.780, Speaker A: I'm curious, over the long term, with this additional benefit and money that you're returning to the people, what percentage of market share do you think you'll get to with like Jito Solana, just as validators kind of opting in for this additional kind of attribute that you're providing?
00:57:48.280 - 00:57:51.580, Speaker B: Yeah, I mean, I hope 100%.
00:57:53.560 - 00:57:54.424, Speaker A: That'd be pretty wild.
00:57:54.472 - 00:58:21.750, Speaker B: Yeah, that would be pretty cool. But I think that these systems will work with firedancer, they'll work with like we can port this into labs validator and pull out the critical pieces of our system, like the connections to relayers and block engines and stuff like that. So there's no reason that it just has to be our client running it. We're just added layer on top.
00:58:22.770 - 00:58:24.490, Speaker A: Makes sense. Very cool.
00:58:24.530 - 00:59:05.996, Speaker B: Hopefully fired answer. We'll use this in the. Yeah, hopefully we get to most of the network running it because I think that there's a really good article by someone at reciprocal ventures. It's called MPSV. It's like MeV profit sharing validators. And I think we definitely buy into that thesis that there's going to be competition for validators that share the most mev. You're seeing this with validators running with zero commission or some are modifying the voting code to get better voting performance so they show up at the top for they're earning more money for their stakers.
00:59:05.996 - 00:59:08.844, Speaker B: And I think that you're going to see this with Mev too.
00:59:09.012 - 00:59:26.370, Speaker A: So you think that's kind of like the end goal for node software in terms of providing back that value to the stakers?
00:59:26.910 - 00:59:31.690, Speaker B: Yeah, exactly. I think it's really healthy for the network too.
00:59:32.910 - 01:00:14.690, Speaker A: It's very exciting. Lots of cool things that you and your team are working on. Obviously it's super technical, but I'm glad that you guys are doing it. It's definitely much needed. I think ultimately healthy for the network, healthy for the users, and just being able to align all those incentives to kind of push the space forward is fabulous. I know you guys are pretty focused on Solana today. I think taking kind of the more pinpointed view on doing like a single chain is unique in the space versus like a lot of applications are trying to do multi chain.
01:00:14.690 - 01:00:25.510, Speaker A: Do you guys have plans ultimately to explore different chains? Are you guys just going to double down with Solana? Because of its unique attributes and high probability of scaling?
01:00:26.570 - 01:01:02.320, Speaker B: We're definitely like 100% focused on Solana for now in the foreseeable future. There's definitely, there's a lot of work to do on Solana. We love the community and the Solana team and nice. We do as well see the network succeed. I do think that there's like a poss. I think we will expand to other chains at some point in like the far future. It's not super clear to me what those chains are and how long it will take.
01:01:02.320 - 01:01:12.102, Speaker B: I think it's just kind of inevitable that we do it, but we have to stay focused on Solana right now.
01:01:12.206 - 01:01:12.846, Speaker A: Definitely.
01:01:12.958 - 01:01:18.206, Speaker B: So that's the main focus for at least the next several months or years.
01:01:18.398 - 01:01:36.050, Speaker A: Totally makes sense. And then what would be kind of your advice to say, people building applications on top of Solana or just other kind of comments on if people want to learn more about MeV more holistically?
01:01:38.060 - 01:02:25.900, Speaker B: Yeah, I guess my advice would be like, please take Mev seriously. I think that, how do I say this? I think there's room for improvement on taking mev seriously on Solana across Dapps. So please be careful about the way that you design things and like, keep it in mind when you first start. Like, we're seeing this with like teams like drift, and there's other teams that are reaching out to us that are like, hey, is this like sound, is this a sound mechanism? Is this like exploitable by validators or mev or whatnot? So I'd definitely say, like, please be aware of that.
01:02:26.200 - 01:02:41.500, Speaker A: Is there any way for kind of the Jito lamps team to abstract those mev complexities from like, the application engineers? Or is it something that application engineers in your mind will just always have to kind of be thinking about in the back of their head?
01:02:43.000 - 01:03:27.198, Speaker B: We're certainly like kind of researching areas on how we can help, but we can only do so much. Like, you know, the validators can do whatever they want and I guess, uh, searchers can as well. Um, I think the, the best way to prevent me these, like through like sound application design and like when that user signs that transaction, like, make sure that they are not signing something that's gonna expose them to unnecessary Mev. Yeah, it's like the front run example that I mentioned earlier, or Orca, if you put your slippage like 10%, it's like, hey, you might get front run. Like that is, that's like the perfect example.
01:03:27.254 - 01:03:34.170, Speaker A: Like, you know, just designing applications to kind of limit or prevent that as much as possible.
01:03:34.870 - 01:03:51.276, Speaker B: Yeah, and like, you're starting to see applications do that better. Like Jupyter aggregators. Like aggregators are amazing for reducing mev. Things like d flow are also great for reducing mev.
01:03:51.468 - 01:04:07.200, Speaker A: Awesome. Cool. Well, I think we kind of hit on a long list of things, but is there anything specifically that we did not cover that you kind of wanted to talk about or anything that I miss?
01:04:10.580 - 01:04:28.864, Speaker B: I guess one thing, it's kind of like a little sneak peek, but I guess when we started this company, we were thinking about what an MeV DaO would look like. So stay tuned for more news on that coming in the next few weeks.
01:04:28.912 - 01:04:30.544, Speaker A: Perfect. Looking forward to it.
01:04:30.592 - 01:04:36.860, Speaker B: Yeah, there's been some really cool work that has been going on on that front.
01:04:37.200 - 01:05:26.636, Speaker A: Nice. Awesome. Everybody will definitely keep their eyes out for the DAO. All the awesome things that will come with that. But no, really, just appreciate your time again. Lucas awesome to be able to break down some of these more complex topics with MeV, but ultimately what user benefits those provide. And I think along with just making the network more efficient, but by also how it incentivizes people to update their nodes and then ultimately being able to return some of that capital back to stakers and that MeV that you do capture, it's really fascinating and very exciting to follow along with.
01:05:26.636 - 01:05:29.860, Speaker A: So thank you again for your time and it was a pleasure.
