00:00:00.360 - 00:00:15.446, Speaker A: Yeah, this whole app roll up thing is a huge anti pattern. And my first argument is really just aesthetic. I just think it's really ugly to have thousands of app specific roll ups on top of Ethereum. I think that's not a first principles architecture, and that's likely not what they would have built if they knew that's how it was going to end.
00:00:15.518 - 00:00:31.930, Speaker B: I think we all want to get to a point where we have tens of millions, hundreds of millions of people interacting on chain. And in that world, I feel like you have to have parallelization, you have to have local fee markets and really kind of move in the way that eclipse is kind of pushing forward.
00:00:32.030 - 00:00:54.710, Speaker A: I feel like people always talk about EVM compatibility, but my view is that it's a totally backwards looking way of thinking, because EVM compatibility is trying to get people to use your newer, more advanced tech by allowing them to hold onto their bad principles from before. So instead I think it's about building mind share among the intellectual elites of Ethereum and making sure that the researchers are aware of what's going on.
00:00:56.170 - 00:00:58.970, Speaker B: Awesome to have you back on the podcast. Round two.
00:00:59.090 - 00:01:00.510, Speaker A: Thanks for having me, Logan.
00:01:00.970 - 00:01:32.566, Speaker B: The first time we did the podcast, we deep dived the technical stack of what you're building at Eclipse, but you've pivoted slightly and we're going to be talking about that today, about what you're doing. I mean, still utilizing the Solana virtual machine, but really focusing on creating the best virtual machine experience on top of Ethereum. Can you talk a little bit? Just about some of the thought process around going from a generalized solution to specifically building on the Ethereum tech stack?
00:01:32.758 - 00:02:26.806, Speaker A: Part of it was technical reasons. When we initially were building out eclipse, it looked like settling on Ethereum would prove to be very difficult. But what happened in practice was our ZKVM for the Solana VM progressed so quickly that a lot of the pitfalls that the optimistic method would have had were just kind of obviated by virtue of the fact that we had this ZKVM proof of execution for the BPF bytecode. So that was one reason why Ethereum became much more viable. The second reason was just by learning from actually deploying app chains or app specific roll ups for a variety of customers and understanding why were they really deploying this chain and was it actually needed a lot of the time they wanted to do things like gas abstraction. They wanted dedicated throughput. And what we found in practice was that a single Solana virtual machine chain was actually sufficient to capture a lot of these use cases, so spinning up like 1000 op stack chains was no longer necessary.
00:02:26.806 - 00:02:33.102, Speaker A: If we had one SVM eth L2, and we decided that that was such a nice architecture that it should be our main net.
00:02:33.206 - 00:03:02.004, Speaker B: Awesome. Well, maybe before diving a little bit deeper into what you guys are doing now, maybe let's just start again with why the Solana virtual machine? Because you've done pretty extensive research on the different types of virtual machines, and ultimately with eclipse, decided to use the Solana virtual machine. Can you talk a little bit more in depth, specifically why the Solana virtual machine stands out from the other virtual machines that you've looked at?
00:03:02.132 - 00:03:30.388, Speaker A: Yes, of course. The big thing is that we want to provide the highest throughput, fastest, most powerful chain possible for our customers. That's the big underlying message behind eclipse. The first solution is we always look at the EVM, because everyone's used the EVM anything. Do we want to parallelize the EVM? Do we want to keep it single threaded? Single threaded is a complete non starter, because even what we've seen on arbitrum, you get these massive fee spikes if there's any amount of substantial activity. So single threaded was off the table.
00:03:30.524 - 00:03:53.084, Speaker B: Can we double click into that for a second? Just because I put out a recent tweet about this, and I think it's still underappreciated in general, can you talk just broadly about the differences of single threaded virtual machines, why you don't think maybe they're sustainable long term versus the parallel processing virtual machines that exist today?
00:03:53.252 - 00:04:40.514, Speaker A: Yeah, it's the simple fact that if you have 100 applications all submitting 100 different transactions, those must all be executed sequentially in a single threaded virtual machine, and one core can only move so fast. So that's one reason. And the second is that single threaded virtual machines just don't benefit from the decreasing cost of cpu's over time, because right now a lot of the scalability benefits that we see in the web two world, or just in general, come from adding additional cores. And now we have machines that have like 200, 300 cores. We want to take advantage of that fact. So by leveraging a parallelized virtual machine like the Solana virtual machine, we can actually take advantage of cheaper cores. We can also implement things like local fee markets more effectively, because theoretically you could parallelize the EVM and you could do some sort of heuristic to get local fee markets with the EVM.
00:04:40.514 - 00:05:01.302, Speaker A: But one option is you break backwards compatibility, so you could specify dependencies upfront, just like the SVM or the other option is you end up basically introducing attack vectors or additional inefficiencies. So the SVM is pretty much what you'd want. And that makes a lot of sense given that Toli and the team pretty much designed this from the ground up in order to solve this use case.
00:05:01.446 - 00:05:56.152, Speaker B: Yeah, the whole single threaded virtual machines, they are interesting. My whole tweet was recently about really focusing on the localized fee markets, because just as you were mentioning, in the past we've seen arbitrum optimism have these fee spikes, and I think everybody really enjoyed the world of where Ethereum was, this cohesive experience where you could deploy your smart contract and forget about it. But it became prohibitively expensive for the average state person. And now we're almost kind of like moving those same problems to a lot of those EVM L2 s where they're not localizing the fees. And this is exactly what you're kind of touching upon and what eclipse hopes to solve, where you can localize the fees and still do really awesome data compression.
00:05:56.256 - 00:06:44.496, Speaker A: Yeah, it's interesting because it's so unintuitive to the Ethereum community at this point, because they're so used to the fact that one, the Ethereum virtual machine is single threaded, and two, they're used to having this mercallization after every transaction. So having this global merkle tree first state means that things can only get so fast, since it's very hard to concurrently update that. And it's also used for settlement for the vast majority of L2 EVM chains, whereas our settlement process has to adapt around that. And it's inspired by this post by John Adler, where he avoids intermediate state serialization, and he used that for fuel. But yeah, that's pretty much the big insight, which is that in order to effectively have a parallelized virtual machine as a L2, you have to remove that Merkel tree, and that's something a lot of the Ethereum community has not really considered.
00:06:44.648 - 00:07:34.508, Speaker B: Yeah, I think, I mean, my whole point of view is that kind of these paralyzed virtual machines, the local fee markets today are really kind of a nice to have, just because the industry is relatively still small in the grand scheme of things, there's not very many users on change. I think we all want to get to a point where we have tens of millions, hundreds of millions of people interacting on chain. And in that world, I feel like you have to have parallelization, you have to have local fee markets and really move in the way that eclipse is pushing forward and specifically on the Ethereum ecosystem. And if you can have them adopt this newer, next generation technology stack. What is enabled is ultimately, from the engineering point of view, is much more interesting applications, and applications we haven't seen deepens.
00:07:34.564 - 00:07:48.748, Speaker A: For example, on the Ethereum, from the Ethereum community, we haven't seen clubs, we haven't seen a lot of really interesting DeFi applications. They've been relegated to Solana, which is, I think, a pretty good place to be. But the Ethereum community and all that liquidity isn't able to tap into it.
00:07:48.844 - 00:08:16.644, Speaker B: So maybe I cut you slightly off. So you're looking at different virtual machines. You settled on the Solana virtual machine uniquely because how they do parallelization and also local fee markets. Was there anything else that got you excited about the virtual machine specifically and how they do either parallelization or how they built the technology stack?
00:08:16.772 - 00:08:51.058, Speaker A: There's some security benefits, too. One is that there's just no reentrancy allowed within the Solana virtual machine, or there's some reinteracy, but only self recursion. Basically, if you're a smart contract, you can invoke yourself, which prevents an entire class of bugs. And now we have stylists with arbitrum, so you can code rust for the EVM, which that phrasing is not quite right because arbitrum doesn't really compile to EVM. But yeah, the point stands, which is that historically, rust could only be pretty much run on Cosmos chains or Solana. So there's a lot of existing code that's already written there.
00:08:51.154 - 00:09:35.250, Speaker B: Interesting. Cool. Also, backing up a little bit a part of these blockchain architectures. One is how you do the state transitions via the virtual machine, and then the other part is ultimately where that data lives. Eclipse is really now focused on the Ethereum world, being able to do the parallel processing, doing local fee markets, but also doing ultimately settling to Ethereum, but using different data availability layers. Can you talk about kind of the entire tech stack of eclipse and how you're kind of viewing the scalability long term?
00:09:35.410 - 00:10:08.720, Speaker A: Yeah, I feel like this is probably the biggest constraint as to why no one took the ASPM and turned into an eTh. Two, historically, and ethel two is a term that's fraught with contention because a lot of people say it's only an l. Two, if you use Ethereum DA, and that's because theoretically, if you use some non Ethereum DA, then that other DA provider could theoretically withhold the block. That would require celestia validators to collude. In the case that you're using celestia which we feel is an unrealistic situation. And also users can directly verify whether blocks are without in celestia. So that's another reason why we feel that it's a reasonable risk to accept.
00:10:08.720 - 00:10:28.462, Speaker A: But my point is that because there were no main net scalable DA solutions, there was really no reasonable way to turn the SVM into an ethal. Two, you could try to make it into a validium requires ZK proving the entire Solana VM, which we've made substantial progress on. But it's certainly not as developed as a lot of these ZKE vms, which people have been developing for several years.
00:10:28.566 - 00:10:42.316, Speaker B: So ultimately, can you dive a little bit deeper? You mentioned that you're using celestia, the background on using Celestia as the data availability layer instead of just core Ethereum.
00:10:42.428 - 00:11:04.440, Speaker A: Yeah. Well, right now, the way that people use Ethereum for DA is kind of hacking it. So they use this call data field in a transaction. So it's not like there's a DA function on Ethereum. It's not really built for that. But the call data field lets you write arbitrary bytes, and it's 16 gas for a non zero byte. It's four gas for a zero byte, just because you can compress zeros more efficiently.
00:11:04.440 - 00:11:26.448, Speaker A: But the point is that this ends up being quite expensive. Maybe you're posting 200 bytes to Ethereum on a good day. Maybe it's like 50 for gas or something. This will end up costing you about $0.15, let's say, to post a 200 byte transaction to Ethereum for DA. That's why if you use arbitrum or optimism, the transaction cost never gets lower than $0.15. But that can also get saturated.
00:11:26.448 - 00:11:50.772, Speaker A: So there's some upper bound on how many transactions Ethereum can even accommodate. And that's true after dog sharding, too. So after the DA plans for Ethereum, you could probably reasonably upper bound all the transactions on Ethereum on the order of like single digit thousands. And that's a loose upper bound, slightly lower than that. And that assumes that you have compressed transactions and they're not doing anything non trivial. So with that in mind, we wanted.
00:11:50.796 - 00:12:09.604, Speaker B: To why do you feel like everybody's general thought processes? With 4844, there'll be like roll ups that doing thousands of tps, and with think charting, it's going to be 100,000 tps. Do you think they're just over optimistic? Have they not run the math like.
00:12:09.692 - 00:12:31.828, Speaker A: What is it colloquially? I think it's cope. Yeah. They just haven't really thought it through too much, and there are validity on that. You could do off chain Da, and I think a lot of people are anticipating people use that, and that's what Polygon is doing with their ZK evm. But they open themselves up to these dunks like, oh, that's not a real l two. And the Ethereum puritanism is going to end up hampering the adoption of some.
00:12:31.844 - 00:12:35.172, Speaker B: Of these non Ethereum Da solutions not being ethereum aligned.
00:12:35.316 - 00:12:37.652, Speaker A: Right. It's not enough, I guess.
00:12:37.796 - 00:13:11.206, Speaker B: Interesting. Yeah, I often run into this as well, where people just kind of give overly optimistic estimates. And I mean, I hope they're right, but I just haven't seen that in practice. And so, yeah, very interesting. So ultimately, there's these different data availability committees you like, the different virtual machines have scouted out which ones work well and are very interested in Celestia and what they've been doing. Can you talk a little bit more about Celestia's approach to data availability?
00:13:11.398 - 00:13:59.798, Speaker A: What's cool about Celestia is that it beats the data availability committee because you can actually slash people for misbehavior, whereas something like eigenda, on the other hand, you can't attribute a data availability fault on chain, so as a result, you can't really slash them for misbehaving. And that introduces an additional trust assumption. So that's the one reason why I felt like Celestia, I think at this point makes a lot more sense for somebody. Eclipse. It's also going to be mainnet sooner, so that's a big benefit of it. And we included them in this announcement, which we're going to be posting, I think, before this podcast is posted, posting this tomorrow morning, which is kind of an open secret at this point, but it's our eth l two architecture. So that includes what we're using for DA, how we're doing the proving, what's the settlement methodology, and it also includes all kinds of other details.
00:13:59.894 - 00:14:16.596, Speaker B: Amazing. Congrats on the upcoming launch. I know how much work just being in the product world, how long it takes to actually go from an idea to implementation to reviewing all the code to actually getting it live. So congrats, Charlie.
00:14:16.628 - 00:14:56.548, Speaker A: It's one of those things where if you knew everything you knew at the end, you probably could have done it a little bit faster, but it's like you had to try those different approaches. One of the approaches we tried was we actually tried putting a merkle tree back in Solana, and that, of course, made it very sequential and it hampered the parallelism of the virtual machine. But it's a valid approach, right? It's the first thing you do because that's how all existing l two settlement works. But we scrapped that approach. Then we tried approaches like, we tried different ZKVM methodology. We had to just benchmark everything to make sure that we're picking the absolute best tag stack. And then when we present this publicly, it seems like it's like, all right, these guys just picked a few things, but actually it's a process of evaluating every single option, deciding this is what our main net is going to look like.
00:14:56.548 - 00:15:00.116, Speaker A: And we feel that we've settled on basically the best pieces in the modular stack.
00:15:00.228 - 00:15:31.648, Speaker B: Amazing. So just to recap everything for the viewer, you're using the Solana virtual machine for execution. What that ultimately enables is parallelization and local fee markets. So you don't have this noisy neighbor problem. You can have multiple applications ultimately deploying to that single virtual machine. They can play nice with each other. You're using Celestia for data availability because Ethereum has relatively small data throughput compared to these next generation architectures.
00:15:31.648 - 00:15:36.832, Speaker B: But then you're posting that stateroom back down to Ethereum for kind of final settlement.
00:15:36.976 - 00:16:11.298, Speaker A: Yeah, it's like the Solana virtual machine produces a bunch of information, so it'll produce a block, and then we also have to include some additional information in this block for settlement. That's all made available through Celestia. The root of that is relayed to Ethereum via, in the future, quantum gravity bridge, which is some tech by Celestia. But you can just think of it as just verifying the Celestia quorum signature and providing that route that was posted, that's posted to Ethereum, and verifiers can re execute those transactions that were made available. If they disagree with that route, then they can dispute it on chain, on Ethereum.
00:16:11.394 - 00:17:04.720, Speaker B: Okay, amazing. I guess so in the end state, really, I think today, one of the points of view in at least the modular world, or particularly in the Ethereum side, with Ethereum virtual machine, is that you have multiple different roll ups or multiple different L2s, because they are all sequential. They kind of need their own application per or individual roll up per application. But when you paralyze that, that is no longer the case, and you can have that state all kind of logically centralized, which just makes it play nice with each other. Can you kind of talk about maybe diving a little bit deeper into that and really explain from the developer point of view, why is it so much more advantageous to build kind of logically centralized and having specific applications. And they're single L2s.
00:17:04.840 - 00:17:36.768, Speaker A: Yeah, this whole app roll up thing is a huge anti pattern. And my first argument is really just aesthetic. I just think it's really ugly to have thousands of app specific roll ups on top of ethereum. I think that's not a first principles architecture, and that's likely not what they would have built if they knew that that's how it was going to end. So the Solana architecture is just so much more elegant in its design as an execution layer, because it's a single composable execution layer, which is really what these robots are trying to achieve with things like shared sequencers. And the reason why they want that is because of first liquidity fragmentation. You end up with a bunch of cash and all sorts of different chains.
00:17:36.768 - 00:17:58.642, Speaker A: So now users need to keep track of it. There's more complexity for developers. You have to bridge it. There's additional trust assumptions associated with bridging. Then the third thing is, it's just from a user experience perspective. I saw some tweet where some guy said, hey, can metamask please make a way to search chains? Because I have like 40 chains on my metamask. And he showed a video clip of him scrolling through.
00:17:58.642 - 00:18:39.172, Speaker A: I was like, this is just ridiculous. And this is just going to get so much worse with all these app specific chains like ribbon. And I think that there are some cases where app chains make a lot of sense, like Dydx is doing great work, and I think those cases are generally rare. So that's the reason why we still continue to support some of those other injectives. Cascade chain makes a lot of sense for them, given that they want to bring SVM compatibility to their ecosystem in the same way that we're bringing it to Ethereum, and that's a chain that we've deployed for them. But in general, if someone, especially an application, they probably don't need their own chain for that, especially if they want to do things like recapture value. There's a lot of ways to call Samani's point the integrated blockchains piece.
00:18:39.172 - 00:19:10.804, Speaker A: I actually thought that I was very sympathetic to the arguments that were made in that post. I didn't even sent that to him because for the most part the argument's true. There are cases where you can capture value that are not possible if you don't have your own chain, but those cases are quite rare. I think base is a good example of that. If Coinbase didn't have their own chain, they wouldn't be generating millions in revenue because they can't capture the surrounding value that they've created. They have these positive externalities for bringing developers into their chain. But these cases, I mean, how many coinbases really exist? There's one, as far as I know.
00:19:10.804 - 00:19:53.514, Speaker A: And these other guys, I don't know if any other chain could really be so successful on day one as Coinbase was. So with that in mind as an application, if you really want isolation, or if you really want a lot of dedicated throughput, you pretty much just want to deploy to the Solana virtual machine and capture that key property of the VM. What we want to do in the future is even deploy multiple neon EVM instances to the same chain. And that's how scalable this vm is. It can have ten neon EVM instances, and that's basically mimicking the experience of having your own EVM app specific roll up. Because you get your own dedicated address space, you get your own local fee market, you're not congesting anyone else. You can set your own fees, and you can even set your own gas token with Neon EVM.
00:19:53.514 - 00:19:59.770, Speaker A: We've done that for some folks, like for Zabbix chain. But you don't get any of the downsides of forcing users to bridge across chains.
00:19:59.890 - 00:20:09.378, Speaker B: Can you talk a little bit more for those that are not familiar with Neon, what Neon is and why it's uniquely compatible with the Solana virtual machine.
00:20:09.474 - 00:20:38.642, Speaker A: So neon Evm lets you execute eVM bytecode within a smart contract on Solana. So that smart contract is a fork of Sputnik VM, which is an EVM implementation written in rust. They took that and it's rust. So they tried to make it into a rust smart contract. And then there's additional surrounding infrastructure like proxies, that implements the Ethereum JSON RPC. Now you can use metamask wallets, you can use truffle, you can use remix. So that's one way, if you're a solidity developer, then now you can access the SVM.
00:20:38.642 - 00:21:11.500, Speaker A: Then another way is you can just compile that solidity smart contract to SVM bytecode. Or really, it's called SBF Solana bytecode format, the variant of BPF Berkeley packet filter. So that's one other way of doing it. But then of course it would still be a Solana wallet. But what we're really excited about is bridging the gap between these two solutions. Because to us eventually, because all this tooling is converging in some sense, it's not really going to matter. For example, metamask snaps drift has done incredible work, and to me that's the best metamask snap implementation that I've seen so far for the SVM.
00:21:11.500 - 00:21:19.804, Speaker A: But you can interact with Solana programs natively within a metamask wallet, and that's really the biggest barrier to getting Ethereum people to using solana.
00:21:19.852 - 00:21:38.136, Speaker B: I think simply just adding better metamask, it's pretty impressive, actually, how Metamask has so many users that have actually downloaded the wallet, considering for the longest time you couldn't even view your nfts, uh, in Metamask.
00:21:38.248 - 00:22:00.976, Speaker A: Yeah, I totally agree. There's simple stuff that they could do, like I don't know if this would be received well by the Ethereum community, but log in with Twitter, for example, into a metamask wallet. It introduces a ton of additional trust assumptions, obviously, but I think that's fine for a lot of people, and I think that's that would be a huge unlock to getting moms and dads to use metamask wallets, or grandmas or grandpas, whatever, however you want to phrase it.
00:22:01.048 - 00:22:47.452, Speaker B: I think it we share the belief that ultimately these will be more there will be kind of natural power laws within the L2s themselves. The ones that isolate allow you to actually have multiple applications on L2 will actually be the ones that live long term. What do you feel like, though, is needed to get the Ethereum community to be able to adopt this new technology stack? Or do you feel like maybe they're already set in their ways, they're okay with having applications be individual for their specific L2s? What do you think, from the developer point of view, is going to be needed to get new people to build on these newer virtual machines?
00:22:47.556 - 00:23:34.274, Speaker A: I feel like people always talk about EVM compatibility, but my view is that it's a totally backwards looking way of thinking, because EVM compatibility is trying to get people to use your newer, more advanced tech by allowing them to hold onto their bad principles from before. So instead, I think it's about building mind share among the intellectual elites of Ethereum and making sure that the researchers are aware of what's going on. And I think it fueled in a lot of that initial paving, given that they're a paralyzed virtual machine, it's a different language. I think sway might just be one step too far, just because it's highly unintuitive for people to learn a new language. But rust is highly accessible, and people have been doing rust even in non crypto communities. So I think that's going to be a big part of it. And then a second part is also demonstrating the technical merits and practice.
00:23:34.274 - 00:24:13.476, Speaker A: So people might not even realize why arbitrary still has fee spikes, and it's just because they haven't looked at Solana seriously enough. But by bringing the SVM to Ethereum, I think they have to. They're forced to take us a closer look. And I think if this could even turn into an NFT hub for Ethereum, given that NFT mints are often the cause of these massive fee spikes or global fee congestion, it could turn into a defi hub. And that was a lot of the initial narrative behind Solana is the Nasdaq for blockchain. So there's a lot of directions that can move in, but it's going to be proof is in the pudding and showing these new types of applications that can only exist in a parallelized vm. I think that will be one impetus to adoption.
00:24:13.476 - 00:24:40.682, Speaker A: And then the second thing is, I think we need to see the failure of a lot of these op stack chains. And one reason is going to be because of unit economics. A lot of them just are not economical to run. Part of that is because of the design of op stack. The trickiest part is keeping the l two timestamp in sync with the l one timestamp. And doing that requires the sequencer to post fairly frequently to the l one. And that posting ends up imposing a cost of six figures plus annually, even if you have no transactions on your op stack chain.
00:24:40.682 - 00:25:10.076, Speaker A: So that's one issue that I think for a lot of applications, it's not going to be profitable for them to have their own chain. And you see these guys like small NFT projects, or sometimes proof of concept account abstraction projects. And I think those are really great pieces of research and they run them on test net, but running that in main net is never going to be economical. So seeing those examples not graduate to Mainnet, and I think it's going to force people to wonder why is no one running this stuff in Mainnet? They'll realize this because it just doesn't make sense from a financial perspective.
00:25:10.228 - 00:26:00.838, Speaker B: Do you think ultimately, I mean, kind of breaking that apart a little bit further on the op stack specifically they have focus on the ethereum virtual machine being backwards compatible. They will into this noisy neighbor problem where they don't have fee isolation. So one application will ultimately make other applications less usable if one starts to get traction. But then the second part of that is really kind of posting that data to Ethereum, and we kind of alluded to this in the beginning, is even with 4844 and kind of ding, charting, the Ethereum throughput will still be relatively limited on a grand scheme of do you think people will ultimately just use different data availability layers like you're doing with Celestia and then ultimately just post that route back to Ethereum? Or how do you envision kind of that long term game?
00:26:00.974 - 00:26:35.432, Speaker A: Yeah, I think so. And basically the folks that are stuck to using Ethereum, only DA, the folks that are trying to stay as EVM compatible as possible, they're making a almost, or like, it's like a completely different bet than eclipse, which is eclipse is forward looking. We're thinking what's required to reach a mass scale on Ethereum and we're building what's required in order to do that. Whereas something like scroll, on the other hand, or optimism, the whole philosophy is stay as native to the EVM as possible. And optimism literally just forked gap and tried to make as few modifications as possible. They have this change list of each modification that was made. You can see it's pretty minimal.
00:26:35.432 - 00:27:09.666, Speaker A: It's like less than 300 or so changes. And that's something that's not really consistent with our philosophy, actually, in some sense, we try to make as minimal changes to Solana as possible because we just don't want to, we want to continue to benefit from the developments on that virtual machine, so we want to keep merging those in. But to some degree, Solana is a much newer code base, so it just doesn't have the same vestiges. It's probably fine to try to depend on the latest version of Solana as opposed to the latest version of the EVM. And I think that's attested to by the fact that maker was looking at the Solana VM as their first option for their own chain.
00:27:09.818 - 00:28:04.640, Speaker B: Yeah, that was super cool. And I think slowly but surely, I mean, it obviously, to me, feels like the sentiment is changing on the timeline. People are becoming more open minded, and I think bear markets almost force you to be a little bit more pragmatic and look at it a little bit more objectively and say, all right, what is this used for? And why am I paying so much money? Or what practicality does this actually provide me in my day to day life? And I remember in kind of the 2020 timeframe, 2021, to use any other blockchain other than Ethereum was, like, sinful. But that feels no longer the case today. There's obviously multiple different ways to kind of approach the scaling problem. And Solana has really been pioneers in that front, and people are becoming much more open minded to maybe Solana is the thing that will help get us to mass adoption much quicker.
00:28:04.760 - 00:28:41.568, Speaker A: Yeah. And I think there's even roles for Solana as an l one within a modular world. Even if roll ups end up really taking off, Solana as one could be used as a shared sequence, as a shared sequencer. And we're working with a team that's actually building that out for, I probably shouldn't say the other roll ups, but eclipse and a couple other roll ups will strongly try to implement Solana as the sequencer. So people would post transactions there actually, and then they would be globally ordered. You can get composition between roll ups, but the reality is that in a world with, let's say, four or five roll ups, or four or five altus, with serious adoption, the idea of shared sequencers is probably less relevant.
00:28:41.664 - 00:29:06.952, Speaker B: Yeah. In that world, I mean, it seems fairly obvious to that each of those virtual machines or L2s have to be paralyzed. Can you envision a world where that is not the case? Or like, if you had to take the opposite side and say, all right, for whatever reason, the single threaded virtual machine won, is there anything that comes to mind where you're like, all right, this somehow won?
00:29:07.136 - 00:29:37.054, Speaker A: I could see one of the l two s still remaining single threaded for sure. I could even see a couple because of just legacy reasons. So scroll, I think, has a really good advantage in that sense, given it's so native to ethereum. It's almost the closest thing as possible to scaling ethereum block space. In order to really meet that requirement, they'd have to also allow for invoking things on the l one from the l two. And I think that's something that they have in the works as well. And that's actually a key innovation of l two s in general, the fact that you can do this inbox outbox type stuff.
00:29:37.054 - 00:29:50.582, Speaker A: So that's one reason why they might stick around. But yeah, I think by placing a bet on a parallelized l two right now, you're ahead of the pack. And ultimately we welcome more parallelized vms to exist as l two s. And.
00:29:50.606 - 00:30:12.760, Speaker B: One thing that you ultimately said as well was that you can pay in your native token, um, or like eth if you wanted to. Can you talk about that? Because I think that's a little bit contrarian to what majority of the L2 s have done in the space where they have gone out, raised a bunch of venture money and then ultimately launched their own token. And then you pay in that token.
00:30:12.840 - 00:30:33.096, Speaker A: Yeah. So right now for our chain, the gas is just eth and we want to stay as ETH aligned as possible. Just given and by EtH aligned, I know that's like a controversial phrase. What I mean is that we want to make it as seamless as possible for Ethereum users to use this chain. So we want to use Ethereum for saddlebag, meaning the bridge is right there. We want to just use eth for gas. We don't want to make you buy another token.
00:30:33.096 - 00:31:16.866, Speaker A: We want to use Ethereum wallets. So that's what I mean by that phrase. But anyway, so yeah, we won't have our own token for this, but in that neon evm architecture that I was getting to earlier where we could deploy multiple neon EVM instances, neon EVM gets its own native token. And right now the native token for neon is the native is neonat. But you can set that to anything. So you can set that to zebex token, which is what we did for Zabbix nautilus chain, which is basically a way that we were able to dog food or test out or eclipse chain architecture, make sure that it's stable, work out any kinks before we launched our main net. And the idea is that when you bridge in a token, then you just mint more of the neon native token.
00:31:16.866 - 00:31:28.930, Speaker A: That's one way of architecting it. Or another way is you just mint it all. At Genesis you have a smart contract that identifies when something was bridged in and then you send the tokens to the correct address, but they're structurally equivalent.
00:31:29.050 - 00:31:52.636, Speaker B: Interesting. Very cool. Yeah, I appreciate that the design space is continuing to broaden. It felt a little bit too rigid for some time. And I would say it was more like an ideology thing than it was really a technical point of view. I'm glad that you and the eclipse team are coming along and being like, look, we have a different point of view. We think this is objectively better.
00:31:52.636 - 00:32:02.240, Speaker B: And over the long time frame this space kind of will go in this direction. It's not kind of a question of if, but when.
00:32:04.820 - 00:32:05.868, Speaker A: Yeah, sorry, go ahead.
00:32:05.964 - 00:32:09.100, Speaker B: It's great to just see that you and the team are pushing that forward.
00:32:09.220 - 00:32:39.380, Speaker A: Yeah, I think the only reason why these single threaded EVM app roll ups have had any adoption at all is just purely narrative reasons or vibes. And there were some teams that we even talked to. We said, why are you deploying your own chain for this? You're going to run one transaction, a day or something stupid like that. They're like, yeah, but there's just a really good narrative around it. And we think optimism might give us a big grant. That's such a bad reason for deploying to a chain because that's not a long term architecture and they're going to regret that in a year. And especially if they don't get a grant, then it's like they really shit out of luck.
00:32:39.460 - 00:33:21.724, Speaker B: Yep. So it is interesting. I think one of the lesser talked about parts of crypto is just how prevalent the grant ecosystem is. Not saying that it's bad, it's just it is a part and it does actually play a fairly large decisioning power from the entrepreneurial point of view to say, look, if this chain gives me money, then I'm going to build on them because I know that's guaranteed money and I have more resources to ultimately stay alive, try to find product market Fitzhen. It's a little, not under the table, but a little hard to figure out, but many chains do it and it does play a big decision in entrepreneurs deciding where to build.
00:33:21.852 - 00:34:09.266, Speaker A: Yeah, from an ecosystem perspective, it's a bit of a bell curve where the really small projects, if you give them a grant and they're probably going to deploy to you anyway, or you could replicate it yourself and it doesn't have a lot of value because it's not going to create a lot of traction anyway. And then on the other side, the huge projects like the Dy DX's, the uniswaps of the world, they might receive an airdrop or something, such as Uniswap received a fairly large arbitrum airdrop, but that's not why they deployed to arbitrum. They don't make their decisions based on advanced if they're big enough. So it's really that in between spot that you want to capture. And that's the way that I think about it is it's about ecosystem alignment. We want them to do well, and if we do well, then we want them to benefit as well. So it just aligns incentives that they're comfortable co marketing the ecosystem and where we have a little bit of ownership and sometimes in the opposite direction.
00:34:09.408 - 00:34:39.656, Speaker B: Yeah, definitely makes sense. I think maybe if all goes well, the next like three, six months, eclipse is starting to become the number one place that Ethereum focused developers are deploying upon. You get the benefits of parallelization, you get the local fee markets. What type of applications would you be uniquely excited for? Or even what type of ethereum applications that already exists. Would you love to have built on eclipse?
00:34:39.768 - 00:35:11.578, Speaker A: I love decentralized physical infrastructure networks. I know you do too. Projects like React Network, and now it's called daylight projects like Arkeen. I just moderated a panel over at the deep end summit, which is a really great summit by EV three. And I saw Diego over there and I just thought that those projects are definitely the next wave and they're going to be a critical path to mass adoption for crypto because it's real world stuff. And just given my background, I used to do commodities at Citadel. A lot of these guys come from non crypto backgrounds too.
00:35:11.578 - 00:35:32.536, Speaker A: So that's our opportunity to educate them in turn and tell them, hey, look, there's a variety of architecture options. People are pointing you in different directions. Don't build an avalanche subnet. Build something that actually makes sense and you don't want to manage all that complexity. Deploy to a highly composable single state machine. And that's the pitch that we've been giving a lot of them, and it's been pretty effective.
00:35:32.658 - 00:35:49.212, Speaker B: I would love to dive into deepen. I mean, I'm super bullish at it as well. I think it's a really unique category and one that ultimately is going to probably help kick off the next bull market. But can you dive a little bit deeper into why deepen is an exciting category for you?
00:35:49.356 - 00:36:25.980, Speaker A: One is that there's always the dunk in crypto. What is this good for? When you look at something like daylight energy, where what they're doing is they incentivize people to install solar panels or batteries in their home. And just given my background, specifically in commodities with power batteries and solar is a huge issue, especially here in California. So what happens is in the daytime the sun is out and power is really cheap, but in the evening comes along and the sun goes down, everyone comes home. So there's a ton of demand and the supply is not very high. So you have to turn on these really expensive gas generators. The price spikes really badly, and the solution there is batteries.
00:36:25.980 - 00:37:16.966, Speaker A: So how do you incentivize people to do that? Not many people have a battery in their home. But if you can give them some kind of token incentive and reward them for almost subsidize them in the initial stages, within the long run you can make that money back, because by stabilizing the grid, there's some overall surplus that was generated and that gets a little bit technical into power details, but it's because of startup costs of gas generators and all this stuff. So if you can capture that surplus, then you can return it back to the network, and it's actually a profitable investment to be placing all these batteries in a very decentralized way. So examples like that I find very compelling. And the problem is that it's very hard to explain to laypeople because it's oftentimes these very specific supply chain or commodities needs, but they actually are solving a serious problem. And it has a name in California, it's called the duck curve. And I mean, I don't know if anyone's following the Texas power market right now.
00:37:16.966 - 00:37:42.998, Speaker A: There's all these reliability issues with power going out, and it's hitting the price cap. It's like $9,000 per megawatt hour. So there's all kinds of issues about energy reliability. So I like that sector. I like things like Jensen. I don't know if that really qualifies as DPN, but I think the AI crypto intersection is going to be really interesting. I know that sounds extremely grifty, but I think there's also going to be a huge need for a ton of GPU's.
00:37:42.998 - 00:38:20.988, Speaker A: And verifying the behavior of those GPU's is going to be really important just because there's obviously mass utility that's generated from these AI models. I've been using chat GPT very regularly, and I'm just thinking about how we could make that more scalable and make it so that it no longer censors the answers. It's obviously self censoring quite a bit. And I don't know if you've checked out those things like jailbreak chat GPT, but I've been using those a little bit. I don't know if that's going to get my license revoked for saying that, but those are, we have to do these weird workarounds. Whereas if we could just directly pay a network like Ethereum or something in order to, to get that same functionality, I'd probably do it.
00:38:21.124 - 00:39:08.432, Speaker B: Yeah. I mean, for me, that functionality, being able to coordinate humans, I think, is vastly underrated. I mean, and really, if you look back historically, has really kicked off a lot of the bear markets to like something new. And in 2017, that was icos, where you kind of were in a prolonged bear market, has had some new way to coordinate humans. And that icos ultimately was that thing. It kind of got a little bit out of hand, but in that there were some unique companies ultimately born. I believe maker launched during that time, BNB, quite a few in fast forwarding to 2020.
00:39:08.432 - 00:39:47.578, Speaker B: I mean, compounds launching liquidity mining, kind of kicking off that entire new wave, really kind of spearheading, I would say the bull market in 2020. And I think going forward, these decentralized physical infrastructures and how they formate capital, how they ultimately incentivize people to do things in the real world, like you were saying, whether that's energy, whether that's gpu compute, whether that's hivemapper with data, helium, they're all fascinating ways to coordinate humans in the real world. That will kick off, in my opinion, or at least push forward the acceleration of the next bull market.
00:39:47.714 - 00:40:05.626, Speaker A: Yeah, totally agree. And you always hear these crypto skeptics. They'll look at things like helium and they'll point to the cash flows flowing into the network. They're like, oh, it's too low. It's like they're completely misunderstanding what a token even is. They're trying to treat it like a stock. That's not what we're even looking at.
00:40:05.626 - 00:40:22.050, Speaker A: There's so many other mechanics that are going on. There's even. Not to get into too much of this in a public podcast. But yeah, I just think that people don't understand tokens at all, and they're definitely thinking about them incorrectly. That leads them to have unfounded skepticism toward deepens.
00:40:22.170 - 00:40:46.498, Speaker B: Yeah. So outside of deepen, what other type of like, are there any ethereum native projects that you would love to see kind of expand into either eclipse via native, like to Solana SPF code, or just either utilizing neon to have higher throughput in those localized few markets?
00:40:46.594 - 00:41:19.170, Speaker A: So we put a post out on the Makerdao forum on their new chain proposal. We think of one alternate architecture. Could be if they deployed that as an l two, because it still allows the forking that they really wanted for sovereignty. So that was one idea. As far as Ethereum native projects in general, though, I think a lot of them are best kept on the Ethereum l one. I think Uniswap is a good example of that, because all the liquidity is there already. I don't know if it's so easy for them to fork and just move to an l two, because if you look at arbitrary, for example, Uniswap is not the number one amm there.
00:41:19.170 - 00:41:41.892, Speaker A: I mean, it's not even the number one exchange. There's GMX, there's all these other winners. So that tells me that people don't just deploy to these marquee apps just because they move to a new chain. They have to be the category KiNG there. And you can be a category KiNg on one chain and you're not on another. And people have their money on the Ethereum l one because they want it there, because they don't want to bridge it somewhere else. And they like the completely minimal trust assumptions a lot of the time.
00:41:41.892 - 00:42:24.138, Speaker A: And as a liquidity provider, it's like you're already taking on so much risk, you don't want to add on additional idiosyncratic risk on top of that. Whereas things like order books or perps exchanges, I think, are extremely well suited to a chain like this. So I almost want to see new types of apps brought to the ethereum ecosystem, rather than seeing them trying to retrofit their existing stuff. And I think that's a huge advantage of not having EVM compatibility, because I just know that if we were an EVM compatible chain, we'd get so many forks in the same way we saw in BNB and in Polygon, and we got like Sushiswap, there's like a million of them. So I don't want to see that in our ecosystem. I'd actually rather see net new zero to one applications in the same way that the Solana community has continually produced.
00:42:24.254 - 00:43:09.904, Speaker B: I fully agree. I mean, it's interesting as the tech stack progresses, and the analogy that I always use is going from like dial up to broadband to fiber optics, what type of new applications are enabled, especially when you have the localized fee markets. Once you have parallelization, you have high data throughput. It allows you to build kind of on chain order books where in the past, when you're stuck to, um, twelve transactions per second have relatively limited throughput, that's almost impossible. And people tried it, it just didn't work. And so the amm was ultimately created. But when you remove those limitations, when you increase the throughput, when you isolate fees, new possibilities come about.
00:43:09.904 - 00:43:21.736, Speaker B: And I think that's really where to your point, like this new wave of innovation will really come from, is by unboxing the engineers and giving them a much larger sandbox to play in.
00:43:21.808 - 00:43:40.712, Speaker A: Yep, totally agree. Yeah. Removing constraints and then also giving them like a big pool of money to tap into. I think that's why I like being on Ethereum, frankly. Just there's a lot of people that are there, and I think that they're looking for things to do with that eth. It's just sitting there like dry gunpowder. So I think we're excited to create new use cases for that.
00:43:40.776 - 00:44:01.190, Speaker B: Do you think so? You mentioned a lot of the liquidity currently lives on Ethereum. Zero one. In this kind of and state vision, do you think that liquidity continues to stay on the layer one for Ethereum, or do you think that ultimately gets bridged over time into these L2s that predominantly have majority market share?
00:44:01.770 - 00:44:30.040, Speaker A: Well, what's good about Ethereum on a L2, though, is that it still remains on the l one. It always stays in that bridge contract. It's just like synthetic, either some non native representation that's minted somewhere else. So I think that's probably the version of the Ethereum ecosystem that I see playing out. Definitely a few chains. The ETH is all still sitting there. People could theoretically interact directly with the ETH l one, or realistically they're likely going to benefit from just posting directly to that l two.
00:44:30.160 - 00:45:16.626, Speaker B: Makes sense. Another thing that you mentioned earlier on, I think particularly that caught my eye was around either the optimism chains or building your own subnet against building, particularly focusing on a L2. Can you talk about some of the trade offs, about either spending up your own zone or super chain versus a subnet versus particularly just focusing on a L2 and bootstrapping that with an ecosystem that's a the team has less resources. How am I trying to say this? You as a kind of engineer have to build less of the resources and house versus bootstrapping all those yourself.
00:45:16.738 - 00:45:30.350, Speaker A: Yeah. So you're saying comparing, if someone spun up their own l two versus spun up their own sub nav versus cogniz chain, and then also in comparison to deploying to a shared l two, or is this more about just like a straight up l two versus l one?
00:45:31.130 - 00:45:53.042, Speaker B: Not like l two versus l one, just kind of like the different trade offs, being able to not some of the benefits of having an l two that is shared with what eclipse is doing. You guys are running that infrastructure versus having to build out the entire infrastructure, all the nodes yourself.
00:45:53.186 - 00:46:40.660, Speaker A: Yeah, totally agree. That is pretty much the fundamental decision that someone needs to make, whether they're willing to incur that cost, and in exchange they get more ownership. So the reality is if you do have your own chain, you can implement custom pre compiles, you could fork the chain, you can roll it back, you could implement a KYC only policy where all the wallets have to be KYC. You could theoretically implement all these things. And those are the examples that folks like Avax or I think opstack basically need to lean on. They need to say, hey, you can do all these things theoretically. The question is just how often do apps actually need that? And if they do is there some way for them to achieve it on a shared chain so that they don't have to incur that cost of worse liquidity, liquidity fragmentation, worse ux, all this dust sitting on a bunch of different chains.
00:46:40.660 - 00:46:51.100, Speaker A: Just because users won't, when they bridge off, there will be a little bit leftover. Do they want to incur all that, or do they think that they can get all that functionality that they need on a shared on, too?
00:46:51.220 - 00:47:19.352, Speaker B: Yeah, do you think, I mean, going back to kind of what we were talking about earlier with kind of modular versus integrated, do you feel like that extra customization is really beneficial to people? Like, I mean, there are those small use cases, but do you feel like, in general, people just over optimizing, having flexibility for the sake of flexibility? Like, can you dive a little bit deeper into that?
00:47:19.456 - 00:47:52.444, Speaker A: I think the cases were customized. I think the cases where customization matters, it matters a lot. So it's cases like DyDx or maker, or these absolute whales of projects, but there's just so few of those. And usually, if people are asking us whether they should have an app chain, if they're even wondering, then it's probably a no, because that means that they're in the early stages. They're probably not that big of an app. A large enough app typically is seriously considered all the possibilities using their existing infra, in the same way that when you're solving an algorithms question, always use your existing tools. So use what's already there.
00:47:52.444 - 00:48:33.706, Speaker A: And it's one of the ways that I usually explain a lot of algorithms to people. I'm like, well, you're already familiar with this one. What if you adapted the problem statement, or you adapted the algorithm to do x, y, or z, and then just extrapolate from there? So just doing those small changes incrementally is typically how I recommend developers think, too, as they're figuring out the right environment for their application. With that in mind, maybe there's an app that's on the ethal one. The most natural place for them to go next is probably in the ethal two, depending on if that suits their needs as an application. And to some degree, this SVM Ethel two is so generic that should pretty much suit every need. But if that seriously doesn't work for them, then they could consider spinning up their own l two.
00:48:33.706 - 00:48:52.728, Speaker A: Consider an l one. But they should be seriously asking, what are they trying to get out of it? Is it value accrual, or is it functionality and customization? And Sydney on my team actually wrote a really great piece on the cases where it does matter and Coinbase is an example of a case where obviously it did. But yeah, there aren't that many coinbases to that point earlier.
00:48:52.824 - 00:49:06.328, Speaker B: Do you think on the Coinbase front, do you think long term they add parallelism or do you think they keep with the EVM tech stack and do not add local fee markets? I'm super curious by this.
00:49:06.464 - 00:49:19.770, Speaker A: I think that Coinbase is very intellectually earnest. I think eventually they're going to come around to parallelism, but that's going to require some kind of fork. I think it might be very technically difficult to make that migration.
00:49:20.150 - 00:49:50.330, Speaker B: Yeah, I'm very curious. Even with Frontrack, the fees have started to spike a little bit and so I really appreciate what Coinbase has done and pushing the space forward. I'm curious specifically with base, what they end up doing long term, because I don't want base to become so successful that it kind of suffers from its own success because it doesn't have the parallelization in the local fee markets.
00:49:50.450 - 00:50:04.426, Speaker A: That's a great way of phrasing it. Yeah. Suffering from known success. From one, the tech which could hamper it, but the other part of it is when it's successful, they have very little reason to adopt new tech. Like it's working right. People are using it. Yeah.
00:50:04.426 - 00:50:21.964, Speaker A: The fees are high, but in some ways it's kind of like the Eth L1. As it exists right now. It works. Right. So it's like they don't need to change a lot of the things and they have a roadmap that theoretically, if things like eclipse and other parallelized vms pop up, then I think it can accommodate a lot of scale.
00:50:22.092 - 00:50:56.024, Speaker B: True, true. Interesting to see how things will unfold maybe as we're kind of like wrapping up the podcast. What other things that excite you? I mean, you mentioned deepen, obviously, the things that you're pushing forward on the eclipse front, but anything else in the industry, I feel like we've been in the bear market for some times now. People are kind of sad, depressed. It's been dragging on for quite some time. Any particular alpha or things that are interesting you outside of what you're building and the deep end category as a whole?
00:50:56.112 - 00:51:32.112, Speaker A: Yeah. So Friedtech, of course, was very bullish. I think we were all really excited about that on Twitter and elsewhere. But another thing that I think is really interesting, but it's just so early and I want to see more detailed public specs. But all the intense stuff, applying that to consumer apps, I think is a much more interesting use case because right now it's being applied to defi and that makes sense too, right? You get to directly sign like, oh, I'm willing to swap eth for bitcoin with this much slippage and that's good, but that's already what amms provide to some degree. Like you already specified them in the UI, you're not directly signing that, right. It generates a transaction, but the experience is still the same.
00:51:32.112 - 00:52:03.146, Speaker A: Whereas for consumer apps, I think it's going to be completely different. Like actually being able to say, I want to upload this photo to my profile and signing off on that, that's a zero to one difference. And I think that could make transactions a lot more intuitive, especially given that consumer apps are going for a wide adoption audience. So having some kind of intent centric wallet or infrastructure, and I know that there are several being built right now, but I haven't really seen one that's really hitting the use cases that I think are really provocative and these cases that could really turn the Switch on some new use case.
00:52:03.338 - 00:52:43.424, Speaker B: What are your thoughts around different games or just getting people more on chain? It has been interesting just watching fintech, but it captured the mind share of crypto Twitter. But if you look at some of the metrics, I think it's only a couple hundred thousand. I would love to figure out what really figure will catapult us to, say, 10 million daily active users on chain. And it's hard. I think everybody kind of points to social or gaming, but everybody's really trying to figure out what works. And historically that's just kind of been like USDC transfers.
00:52:43.552 - 00:53:05.388, Speaker A: Yeah, true. And payments are a killer use case for crypto. That's true. But I do agree that other consumer apps are needed on the gaming front. When I first started eclipse, I was so bullish on gaming. And part of that is because games typically don't have a lot of composition needs. So given that we're spinning up so many roll ups, like, well, what doesn't really care about all this liquidity, fragmentation.
00:53:05.388 - 00:53:34.556, Speaker A: The reality is they do care a little bit, but not enough to really move the needle. But the problem is that the economics of the game, because it's posting so many transactions, the value of the transactions is very low. So it's like every time you move your player in a game, you're not willing to pay like a penny for that. So as a result, it just doesn't make sense to be decentralized, really. So a lot of that has to occur off chain, or it needs to be stored in some kind of validium type, optimum type construction where the DA isn't really decentralized.
00:53:34.668 - 00:53:59.328, Speaker B: Yeah, it's. It is interesting. I mean, people are playing. I always hear, like, games are coming, but I haven't seen, like, any that have, like, broken out in terms of one that just people enjoy playing, that have some kind of crypto element. Like, games are very hard, and games are either, like, fun or not fun, in my opinion. And then adding that crypto element, too, makes it a little bit more complex.
00:53:59.464 - 00:54:19.464, Speaker A: Yeah. Paradigm wrote a pretty good piece on. On chain gaming. I think it was specifically fully on chain gaming. And it's one of those things that I think it's very easy to, like, middle curve it. And I. It's possible that I'm middle curving it where I've just, like, passed the left curve phase, but I haven't quite reached the right curve, so we'll see where that takes us.
00:54:19.464 - 00:54:38.684, Speaker A: But, yeah, gaming's cool. Social networks like friendtech, I think experimenting more with that in, like, LinkedIn, for example, something where you have to pay to send someone a message or something like that. And Sol linked was doing something like that. It's more like email. Yeah. Those consumer apps, I think, could really drive a lot of adoption because it's like, a real thing. And I think I've had that idea even outside of crypto.
00:54:38.684 - 00:55:08.960, Speaker A: Like, can I just, like, pay someone? And if they just open the email, they get $5. I think that can incentivize. It can also put your money where your mouth is, right? It shows, like, I. This email will actually have value to you. And maybe the receiver has the option to send back the $5, and that creates an interesting new type of messaging in the same way that read receipts did an iMessage, where when you open a message, you get to choose whether you send the red receipt. And that has its own connotations if you choose to do it or not. So whether you send back the $5 can mean something.
00:55:08.960 - 00:55:10.816, Speaker A: I don't know what that could imply.
00:55:10.968 - 00:55:38.788, Speaker B: Maybe last couple minutes, what were some of your biggest learning lessons from? I would say the passable market? I feel like in 2017, for me, going through that kind of euphoric rally, and then 2018, 2019, I had many learning lessons as a founder. What were some of the big takeaways for you that you could maybe impart onto other founders? Listening to this podcast, one is that.
00:55:38.844 - 00:56:14.220, Speaker A: Reflexivity can kill, especially given that I was building on Terra before I was building some EVM on Terra. And I was partly attracted to Terra because it went up so quickly. But that's a reflexivity. Reflexivity means if it goes up really quick, it can collapse really quickly, too. That's something that I think everyone should be keeping an eye out for in their own tokenomics. You don't want to build in reflexivity, at least not in the end game for your token. I think in the initial phases, that might be fine, but there needs to be some sort of actual structure for that growth to support.
00:56:14.220 - 00:56:29.268, Speaker A: So in the same way with Uber, right, they subsidized Uber initially, but if there were no cars on the network and passengers in the end game, then Uber wouldn't have worked. And I think Uber has actually proven the model, in some sense, in the web two world. Now we need to prove the model in the web3 world.
00:56:29.364 - 00:56:40.940, Speaker B: Yeah, I remember when Uber first launched, I was in Los Angeles, and I could take an Uber, like, all the way across town for $5. This is amazing.
00:56:41.020 - 00:56:52.416, Speaker A: I was ubering to high school. I was ubering everywhere. Like, it was as a kid. I was able to afford this stuff. So it was like literally dollars. Yeah. And they were giving $20 off every time you had an Uber account.
00:56:52.416 - 00:56:59.620, Speaker A: So then as a kid, you're gonna gamify the hell out of that. I had like 20 Uber accounts, $400 in credit. It was just burning vc money.
00:57:00.560 - 00:57:47.940, Speaker B: Awesome. Well, Neil, thank you so much for coming on the podcast. Appreciate all the wisdom. I appreciate the pragmatism in kind of evaluating the difference. Tech snacks, whether that's on the virtual machine level, at the data availability level, I think what we all really want in the industry is to move it forward, to really get past, like, the tribalism, look at the space objectively, build applications that people really want. And I think this is a refreshingly nice breath of fresh air to kind of view things from a more objective lens and just say, what can we actually build on this tech stack? And does it push the space forward? And I think that's exactly what the eclipse team is doing. And so I really look forward to seeing how eclipse does on Ethereum.
00:57:47.940 - 00:57:52.832, Speaker B: On paper, it makes a lot of sense, and I think people will hopefully see that as well.
00:57:52.936 - 00:58:06.728, Speaker A: Thank you, Logan. And we hope to capture the Solana audience and the developers. And if there's any Solana developers out there, feel free to reach out on Twitter. We're eclipse fnD. I'm Neil Sawami on Twitter. So my DM's are open. You can always reach out.
00:58:06.824 - 00:58:07.760, Speaker B: Awesome, thanks again.
