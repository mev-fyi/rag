00:00:01.120 - 00:00:12.726, Speaker A: Awesome. Well, thank you so much, Nick, for coming on the podcast. Super excited to have you on, and it was a pleasure to ultimately meet at the breakpoint event in Lisbon.
00:00:12.918 - 00:00:15.942, Speaker B: Yeah, absolutely. I mean, great to be here. Thanks for having me on.
00:00:16.046 - 00:00:58.400, Speaker A: No, I was super impressed by your talk that you gave at breakpoint, and ultimately, all the team members that I met in person in Lisbon. Definitely excited for this conversation and excited for other people to follow along. I always like to start the podcast with just a little bit more background about you and who you are and how you ultimately got into crypto. So I would love to just start with how you got into tech. I know you spent some time at Uber, maybe start from there, and how you kind of ultimately got started and what you're working on.
00:00:59.300 - 00:01:09.004, Speaker B: Yeah, absolutely. I actually got started a little before Uber. Like, my first interaction with tech was building iPhone apps in high school.
00:01:09.172 - 00:01:09.956, Speaker A: That's awesome.
00:01:10.068 - 00:02:03.144, Speaker B: Just random games and, I don't know, different productivity tools and stuff like that. So I knew I actually wanted to study cs when I went into university and ended up going to Champaign Urbana, University of Illinois for that. I was kind of doing startups, like, various side projects during all of college, and then senior year rolled around, and the product we were working on, like, we weren't making enough money. We had no idea how to raise, and so we all just started applying for jobs. And, yeah, I ended up kind of finding my way to the payments team at Uber out in San Francisco in the middle of summer of 2016. And, yeah, I don't know. I really came in on a hiring wave of interns and college students that Uber just had, like, a million problems that they were trying to solve and a bunch of fires to put out, and they were just kind of, like, throwing bodies at the problems.
00:02:03.144 - 00:02:31.370, Speaker B: And I was one of those bodies, and so I ended up kind of surviving there. And, yeah, really was working on, like, sort of back end payment solutions, primarily the payroll system that pays all the drivers. And I'm not sure how many people realize, but it really is one of the largest payroll systems in the world, with around 4 million employee contractors in every currency and country on the planet.
00:02:33.150 - 00:02:57.928, Speaker A: At Tesla, I was on the supercharger team, leading to global expansion. I can only imagine, because we went through a lot of the similar problems with how to accept local currencies, and it is a mess. So. And that we. We didn't have. I mean, we're accepting money from a lot of Tesla drivers, but that was nowhere near. I can imagine how many people were ultimately driving Uber yeah, but that was.
00:02:57.944 - 00:03:59.230, Speaker B: Just the payout side. The collection side was a whole nother, like, crazy world where, I mean, to support credit cards in different countries was like, you have to do integrations with all sorts of different payment processors. And then there's a lot of countries in the world that don't really use credit cards, like, say, Saudi Arabia and Egypt, for example. It's like credit is kind of outlawed to an extent there. And much of Latam is a very cash based society, so finding ways to allow users to use the products and the app in those countries was definitely a bit of a challenge. And we had to integrate with some different payment processors on that front, be on the driver payout side. There was a lot of international banking integrations with Citibank and Wells Fargo and Deutsche bank and HSBC and others, to be able to find different rails and routes to the drivers that live in all these different countries, like Taiwan and Trinidad and Tobago and everywhere around the world.
00:03:59.230 - 00:04:51.070, Speaker B: So I spent a lot of my time working on those systems, and, yeah, just really came to see, like, every possible payments bug you can imagine. I don't want to get, like, too deep into the weeds, but, I mean, everywhere from, like, you know, late payments to double payments to, like, we had one situation where we paid, like, an entire city's worth of payments to a single driver at points. It was like, all sorts of, like, craziness. And so it was really working on the systems that I kind of, like, I guess, sharpen my skills. And I think payments is, like, a great industry to really learn hard engineering or the problems in payments. We used to say, if you give someone an ETA that's two minutes off, they don't really care. But if you pay a driver $2 less than they're expecting, it's a huge deal.
00:04:51.070 - 00:04:59.360, Speaker B: And so the margin for error is very tight. And working in that environment, it just requires a different kind of engineering mindset.
00:05:00.020 - 00:05:21.630, Speaker A: I agree. I can only imagine, ultimately, all the fees that kind of accrued from doing payments worldwide, dealing with credit cards, that was one thing that we were also trying to figure out with Teslas. How ultimately, can you reduce the credit card overhead? Because those fees add up quite quickly.
00:05:21.790 - 00:05:25.350, Speaker B: Yeah, yeah, for sure. I mean, it's like 3% of every transaction.
00:05:25.430 - 00:05:26.050, Speaker A: Yeah.
00:05:27.190 - 00:05:30.998, Speaker B: It's going to these middlemen with their hands in the cookie jar, really.
00:05:31.134 - 00:05:49.820, Speaker A: So you spent a good amount of time at Uber, but ultimately, somehow you ended up at Solana breakpoint last year. What kind of inspired you to go to that conference? And I guess, like, even more. So what got you into crypto?
00:05:50.600 - 00:07:36.830, Speaker B: Yeah, I first started looking at crypto in February of 2021, just last year, and it really came out of just a conversation I was having with some friends who took me on a deep dive through Ethereum, and I'd obviously heard about bitcoin and Ethereum before and knew what they were, but it never really made any sense to me why someone would want to spend $20 in fees to transfer $5 to a friend. I didn't really get what the systems were for, but once I really understood the idea of this world computer on a decentralized compute platform, that was interesting and just immediately saw Ethereum had all these scaling problems. And a friend of mine, Barrett, who is working at a company called Cypher, which is a Dex on Solana, he was working on Solana at the time and really was pushing this idea that Solana solved all these scaling problems solved on a blockchain trilemma issue. That's what got me interested in it. It spent a few months dabbling in Defi on Ethereum, and then around August of that year, 2021, I really decided to take the dive and start building, and really started with Solana. And the thing that attracted me to it was coming from that payments world, the idea of a payment rails that settled in seconds and had a fraction of a cent for fees. My head immediately went through a payroll system on this thing.
00:07:36.830 - 00:07:43.066, Speaker B: That was where we started. I just figured should go to breakpoint and see what it was all about.
00:07:43.218 - 00:08:33.504, Speaker A: That's amazing. Yeah, I got in a little bit earlier, I got in 2017 and was super excited about things ultimately. Thought I knew a lot more than I did at the time, but kept with it throughout the bear market in 20, 1819 and 2020, and kind of came to the same conclusions. Ultimately, after a little bit more time, I personally paid like $1,000 plus for uniswaps. And I was like, this is ridiculous. Even if it's on a decentralized exchange and all this stuff, the fact that it's paying so much, especially even on just transfers, like 50 plus dollar transfers, and when the bull market was happening, it was crazy. And then I don't know if you've.
00:08:33.512 - 00:08:36.824, Speaker B: Ever gone to that site. I think fees, WTF sites where I.
00:08:36.832 - 00:09:02.786, Speaker A: Don'T want to look at it, I don't want to look at it. A lot of people, I wasn't too bad. I try to conserve just most of my eth. But I totally agree though, ultimately finding Solana doing a lot of the due diligence on the technical aspects. But then how quick to transaction settled, the low latency. Ultimately being able to do transactions that are fractions of a penny. Like, I was amazed.
00:09:02.786 - 00:09:33.570, Speaker A: And the more I dug into it, I was like, all right, we're actually kind of from, like, the product point of view. Like, at a point where, like, people can build cool stuff that normal people can use, where it doesn't, like, take multiple minutes to settle and don't have to pay so much money. So that's awesome. What were kind of some of your biggest takeaways from that Solana breakpoint of last year, in 2021 that made you want to go further into the sauna ecosystem and start building on it full time?
00:09:34.350 - 00:10:19.260, Speaker B: Yeah, I think the biggest thing was, honestly, just the caliber of the people and the talent of the people building in the space. It seemed everyone was very talented, very skilled, and coming from a hard kind of engineering backgrounds. And I think part of it was this self selection bias. Where we're building on Solana, particularly at that time, is very difficult. So it attracted a certain type of engineer. I just thought it was really cool. The idea of this distributed, decentralized compute platform where it could run any arbitrary application or any arbitrary logic, I guess, is maybe a better way to put it.
00:10:19.260 - 00:11:01.290, Speaker B: It was super exciting to me. It still seems like kind of an alternative to the AWS model, where we say, deploy applications to some single instance in a single region. And it was really, I guess, understanding how Solana works and how the network hands off the leader role between different nodes was kind of in this constant state of failover and distributes downtime risk across all the nodes, it was really wrapping my head around that. It's like, okay, this thing is insane and super cool, and I just couldn't imagine building on anything else.
00:11:01.670 - 00:11:46.460, Speaker A: That's awesome. Yeah, that 2021 breakpoint was super cool. Ultimately, with COVID happening and then everybody actually getting together in person, and then, yeah, like you said, the technical architecture, it is insane. And once you are able to wrap your head around it, you're like, holy shit. What Anatolia and team have done is extremely impressive. That's awesome. At what point, ultimately, you decided to initially start with a payroll system? At what point did you start working on that full time? And then at what point, also, did you realize that possibly this was not the thing that you needed to build and ultimately pivot to clockworks?
00:11:47.320 - 00:13:01.530, Speaker B: Yeah, we were building that payroll system for a few months. I'd say from August of 2021 to about February of just earlier this year, 2022. And along the way, we're basically just running into this challenge around how do we schedule transactions? Because what we wanted to build was a system that could, say, schedule a token transfer every Monday or every day or every month, really according to whatever the company had configured the schedules to be. What we were looking for was some sort of native on chain scheduling, transaction scheduling API, but that didn't exist. The only thing that made any sense to us was to spin up a server in a cloud service platform like Google or AWS, and then code that thing to submit the transactions to the chain according to our schedules. And we did that, and it worked. But we weren't very happy with it as a long term solution because we're a bit by the idealist bug of, we wanted to build a DAP, like a decentralized system.
00:13:01.530 - 00:13:44.358, Speaker B: And so the idea that it was all going to be dependent on this kind of off chain scheduling system, I don't know. It didn't appeal to us because it introduced all sorts of risks. And primarily it's just this centralized single point of failure where if that system are compromised in any way or goes down, it defeats the point of building on the blockchain in the first place. In the back of my mind for those months while we were building, I had always thought, well, after we build this payroll system, maybe we'll look at a general purpose scheduler. And then showing up at Mountain Dow in February, just kind of hanging out with Edgar and Barrett and the folks there.
00:13:44.494 - 00:13:49.530, Speaker A: And for those that are not super familiar with Mountain Dow, could you just explain what it was?
00:13:50.470 - 00:15:05.892, Speaker B: Yeah, it's basically a kind of self organized group of founders in the Solana ecosystem rented out a co working space in Salt Lake City and just blasted it on Twitter and say, hey, come through. And a bunch of people showed up and we were all there for like a month, hanging out, like going into the shop every day, building. And then on the weekends we'd kind of go skiing and hanging out in the town in salt lake. And yeah, it was really like an escape from kind of like Covid or really getting to meet up with people on Twitter that or only ever jpegs to us before. It was in that environment that we got to the urge to, okay, well, let's just see if we can do this general purpose scheduler, because a lot of the people we were talking to there also were running into similar problems where they had a smart contract and they had to build an off chain system to automate it. And it was like seeing that pattern so many times with every team we were talking to, it was like, okay, maybe there's some sort of, there seems to be some sort of problem here. And so we set about to try to like solve that.
00:15:06.036 - 00:15:42.980, Speaker A: That's awesome and very cool. That mountain Dao ultimately kind of like confirmed or highlighted that problem. Again, I was bummed I didn't get to go, but I heard it was fantastic. So maybe on the automation problem and why is this? Or why was it kind of a solved problem in the more centralized, like Aws, Google cloud? But it was not a solved problem where people continue to run into the issue on like decentralized blockchains such as Solana.
00:15:43.320 - 00:17:02.060, Speaker B: Yeah, yeah. I mean, in a centralized system, it's, scheduling is not too hard because you just need some process somewhere, either on the same server that your application is running in, or in some other server to keep track of the time and then send a request to your application when you need a particular process to run. And that's not too hard to do in a centralized system because compute is very cheap. You can just spin up a server. What made it hard in the decentralized world? Washington, not setting up a single point of failure somewhere. So with the ideal of like these distributed compute environments or blockchains, is like Solana, for example, distributes downtime risk over all these different servers that are validating transactions. And the goal of the general purpose scheduler was to try to do the same for transaction scheduling, where instead of relying on some single point of failure somewhere that could schedule those transactions, how do we distribute that across the network and also make it efficient, where not every node in the network is like spamming transactions, but there's some sort of coordination there.
00:17:02.060 - 00:17:11.536, Speaker B: And it was not very straightforward. It wasn't a trivial problem, basically to solve. So I don't think.
00:17:11.728 - 00:17:34.180, Speaker A: Yeah, yeah, no, I love to kind of dive deeper into the details of how you, in clockwork solve it. Maybe just to back up a little bit before we get into some of the technical details, talk about what is clockwork, more broadly, what is your goal? And then we get happy to jump into the tech stuff.
00:17:34.760 - 00:18:09.444, Speaker B: Yeah. Clockwork, put short, is an automation engine for the Solana blockchain. What that means is that developers can use clockwork to schedule transactions and automate smart contracts without relying on centralized infrastructure. If there's any sort of token transfer or mint or swap on a Dex or calculation or really any arbitrary state change you can imagine, clockwork provides an API for automating that without having to write some off chain bot. It can be done simply through smart contracts and security.
00:18:09.492 - 00:18:29.110, Speaker A: Awesome. And this was a big technical challenge to ultimately make this work. Talk about some of the problems that you ran into and how the team went, kind of tried to address those or were able to circumvent those.
00:18:29.850 - 00:20:04.880, Speaker B: Yeah, the big thing is basically how do you delegate responsibility to some server to submit the transaction to the chain? And if that server goes down, how does that responsibility fall back to some other server? What we ended up doing was we realized Solana provided this interface called the geyser plugin interface on the validators and RPC nodes, where you can essentially build a plugin that runs as a sidecar process on the validator itself. We realized we could leverage that to add superpowers, so to speak, to the nodes. We built this plugin that could monitor on chain smart contracts and then build transactions and submit them to the chain on those contracts behalf, and then worked with a bunch of node operators to get that plugin deployed across the subnet of RPC nodes on the network. And it's that subnet that we call the worker net that really powers the service. In that way. Clockwork is not like a SaaS, it's not some, I don't know, you're not just shifting, kicking the can down the road to some other single point of failure that we're running in AWS. The idea was to get these contracts automated by the Solana chain itself, such that moves a step closer to that goal of a world computer where we can just deploy applications that, that run.
00:20:05.700 - 00:20:16.800, Speaker A: Yeah, that's, and I mean, so is the biggest challenge just having kind of a plethora of RPC nodes just to make sure that there aren't the failovers.
00:20:17.700 - 00:21:54.900, Speaker B: Yeah, that's doing it cheaply and efficiently. Like in the naive case, you could say deploy this plugin out to a big subnet of nodes. And if there's some sort of task that needs to be executed on chain, and you have 1000 nodes in the network, if those thousand nodes aren't coordinating in any way, and they're all just spamming the chain to try to execute that one task like they're all racing effectively to get their transactions in, it ends up you have this economics problem where your node is only going to win 1000th of the time, the other 999 times your node is going to fail and you're going to pay network fees submitting that transaction to the chain. That actually makes it an ev, negative strategy. It's running a node where the only real solutions there are to, if you're paying out a fee, like an automation fee to the winning node, you either have to crank that up really high to offset the negative cost. That actually gets worse as the system gets more decentralized, which is not ideal. Or what we ended up doing was constraining that race in a way where we have 1000 nodes that are on the network, but we have an active worker pool of three nodes that are allowed to submit transactions to the chain at any given time.
00:21:54.900 - 00:22:01.912, Speaker B: And we used a stake weighted sampling to sample nodes through that active worker pool.
00:22:02.016 - 00:22:02.616, Speaker A: Nice.
00:22:02.768 - 00:22:04.992, Speaker B: And that's how we solved that problem.
00:22:05.176 - 00:22:20.300, Speaker A: That's awesome. For those that are not super familiar with the Solana ecosystem, would you be able to break down or just compare the difference between a traditional RPC node and then just a Solana validator?
00:22:21.240 - 00:22:55.880, Speaker B: Yeah, they're effectively the same thing. It's the same codebase under the hood. The only difference is that the validators have some soul staked with them, and the RPC nodes don't have any soul. And so the validators participate in consensus, and they vote on blocks. And, yeah, just work in that consensus protocol. And the RPC nodes are basically data replicas of the chain. You can query them for account states or use them to submit transactions to the chain.
00:22:56.660 - 00:22:57.440, Speaker A: Perfect.
00:22:57.820 - 00:22:58.600, Speaker B: Yeah.
00:22:59.020 - 00:23:39.450, Speaker A: Awesome. I think a lot of people, the Solana network, unfortunately, I think you kind of get your head around it. It's relatively simple. But just getting over that initial hurdle, there's a lot to take in. But no, it's super interesting that you guys are able to. I didn't really think about ultimately submitting multiple votes and then only one of those votes from the validators. If you're running it on every single RPC node, they're all competing against each other, and ultimately, you just need one of them to submit for that process to run.
00:23:39.450 - 00:23:42.850, Speaker A: So this is super interesting how you guys figured that out.
00:23:44.290 - 00:24:25.830, Speaker B: Yeah, it wasn't obvious. It took many steps to say different versions of the first version didn't even run on the validators. It was just a box in AwS. And our initial plan was to get everyone running these boxes, but that ended up having a whole bunch of issues where the transactions then had to go through this RPC network and then lend to the validators themselves. It was very slow, and we realized that once we realized we could build a plugin, it was like we can just move a step closer to the actual final destination and basically bypass the whole network. Hop.
00:24:27.770 - 00:24:28.762, Speaker A: That's amazing.
00:24:28.946 - 00:24:29.710, Speaker B: Yeah.
00:24:34.610 - 00:24:53.940, Speaker A: You're able to ultimately figure this out with the stake weighted from the RPC nodes. And what functionality now have you unlocked from the developer API point of view that did not exist prior to clockworks existing?
00:24:55.040 - 00:25:47.206, Speaker B: Yeah. So the API we provide developers we call threads. And what they are really is, if you're a software developer, you kind of already know threads are like traditional applications, use threads to execute a series of instructions on a computer. And so clockwork threads provide a mechanism for Solana smart contracts to execute a series of instructions on Solana. And it really is an API for smart contracts to build transactions or define the transactions that they want to have submitted to the chain. The API, in short, allows for like when you're building a Solana smart contract, you do two things. You define your state and some instructions that define how that state can change and mutate.
00:25:47.206 - 00:27:09.316, Speaker B: And the clockwork threads API allows your instructions to point to another instruction that should be run and build up a chain or a linked list of instructions where instruction a runs and it does some stuff and then points to instruction b, and instruction b runs and does some stuff and points to instruction c, and so on and so on. And that worker net is able to simulate that chain and then pack all those instructions into a transaction and submit that to the chain on your program's behalf. And that's really what brings it to life. And the threads allow, they expand the design space for smart contracts, like quite dramatically. Where, for example, I mean, going to the payments use case just off the bat is like you can define with your smart contract a way to just schedule a transfer transaction to happen according to whatever schedule you want, like every Monday or every other week. Or you could execute like a dollar cost averaging strategy just through a smart contract. And they even get a bit more flexible where you could monitor a particular incoming price feed from pith and execute the swap based off that price feed, or even do some defi protection mechanisms.
00:27:09.316 - 00:27:20.472, Speaker B: Whereas if your particular position on Soland is approaching liquidation, you could auto repay that debt rather than having your, your loan get liquidated.
00:27:20.616 - 00:28:16.760, Speaker A: I think this is fascinating. Ultimately being able to automate a lot of the Dapps built on Solana to just kind of customize for certain events, as you mentioned, or triggers liquidation oracle prices. Ultimately, there's really kind of limitless possibilities in once you can automate a lot of the stuff. So I'm definitely excited for developers to continue to integrate with clockworks because it is super fascinating. And right now I would say there are a lot of developers on the ecosystem, but it's still ramping up and it's still so early, and there's still so few users that as all these things can continue to ramp up, I'm super fascinated to watch what it ultimately will unfold into.
00:28:17.700 - 00:28:31.676, Speaker B: Yeah, me too. I think there's. I think we're thinking like, still the ecosystem as a whole is very like, narrow in its thinking about what we can do with blockchains.
00:28:31.788 - 00:28:32.440, Speaker A: Yeah.
00:28:34.180 - 00:29:46.332, Speaker B: To my mind, I think blockchains are just a small part of a larger kind of distributed compute market where right now many, many companies build applications that they deploy out to AWS, Google Cloud. And there really isn't any reason that you couldn't rebuild some of those programs, or all of them as smart contracts and deployed them to the blockchain. And then the question is, what benefits are there to doing that? And for one, many applications are just payments. Applications being able to settle payments in a fraction of a cent and instantly in USDC on chain is huge and would save many companies tens of millions of dollars a year. But then beyond that, we're actually currently trying to do a bit of cost estimation for compute, where if you could rewrite some programs that currently run in AWS and run them on salon as a smart contract, how much does your monthly compute budgets actually change? And I think that will be very interesting to build up a case for why companies should maybe think about moving some of their back ends to the blockchain.
00:29:46.476 - 00:30:06.714, Speaker A: I fully agree. Payments, I think are the most obvious use case today that's actually working live in production. Being able to send pretty much instantaneously global wire transfers for fractions of pennant use that settle and sometimes less than a second, is amazing.
00:30:06.882 - 00:30:11.322, Speaker B: Yeah, it's unheard of for people in like traditional payments world.
00:30:11.426 - 00:30:36.310, Speaker A: Yeah. Instantaneous settlement globally for fractions of a penny. It's hard to beat. Yeah, that's amazing. So maybe kind of continuing on that thread, what are kind of some of the more novel applications or integrations that you have seen built using the threads product.
00:30:37.290 - 00:31:22.756, Speaker B: Yeah. So one that's live today and just launched a breakpoint a few weeks ago was our integration with squads, the multisig product on Solana. And squads is kind of building the standard for open source multisigs on Solana. And one thing you can do with your squad is manage a validator. There are a number of brand name validators that do all their operations through a multisig for the security reasons. To just distribute the risk of private key, compromised private key. One thing you can do with that is deploy a thread through your squad to auto claim yield from your validator.
00:31:22.756 - 00:31:39.990, Speaker B: That way you don't need everyone on your multisig to sign off on a transaction every time you want to claim. You could just set up a background process that claims the yield for you. And we're working to make that front end a bit smoother with the squads team, but I'm super excited to actually roll that out and just kind of support the ecosystem.
00:31:40.650 - 00:32:49.362, Speaker A: That's awesome. Now, we love the squads team and kind of ultimately, I think, especially after recent events with FTX fiasco, being able to hold your own private keys and doing it in a safe manner by doing a multisig is paramount. And so anything that you and the clockworks team can ultimately do to accelerate that and also is amazing. But no, I think more fascinating, more broadly is the power of that, like, composability of being able to integrate the clockworks with other applications. And I think the squads and being able to autoclaim the yield for staking is fascinating. Yeah. Is there any products that, I mean, that you would love to see built but just haven't, are integrated with blockers that just haven't started yet or that do not exist yet?
00:32:49.466 - 00:33:54.630, Speaker B: Yeah, we've actually. I mean, the great part about the blockchain is a lot of this stuff is permissionless. We can build these contracts and deploy them without necessarily having to ask permission from some of these teams. We do work closely with a lot of teams to coordinate the building, but one we're in the middle of right now, I'm super excited to get out, is a debt protection smart contract with Soland such that it, it's actually kind of a cross integration between pith and Solend, where we have a thread that can monitor a price feed and is also watching your solent accounts. And if that price feed is, say, approaching a liquidation level, we could auto repay your debt from a pool that you have set up in that way. In many cases, users find that preferable to having their collateral liquidated. Being able to deploy these native on chain defi protection protocols, I think will be huge for the ecosystem.
00:33:55.170 - 00:34:46.639, Speaker A: I totally agree on the topic of more broadly the Solana defi ecosystem, especially after FTX, what is the. I think today, if I were to back up, a lot of teams are going multi chain. They start off at one chain, they're like, all right, I'm going to jump to another chain and try to re execute a lot of the things that I did on this first chain to expand market share in some sense. What is your team's point of view on these other chains? Are you going to double down on Solana going forward and recent events, how are you communicating with your team and externally to people that are FTX blow up? Solana said, yeah.
00:34:49.699 - 00:35:54.640, Speaker B: I'm very optimistic on the slant ecosystem. I think, for one, that the main thing that keeps me optimistic on the ecosystem is just the developer community and the work that the folks at foundation are doing to kind of grow the developer community. And we've looked at some other chains. I think it would be hard to rebuild the clockwork system on something like Ethereum or even like some of the l two s for that matter. For one, the fees are just very high, and so running these background processes is like an estimate, like an exercise. And how comfortable are you with just spending outrageous amounts of money? Because when transactions don't cost a fraction of a cent, these threads become very expensive to run. And for some of the newer chains like Spia and Aptos, we are keeping our eye on them.
00:35:54.640 - 00:37:31.860, Speaker B: I think right now, it seems like a lot of the developers in this ecosystem are still the same developers that are on Solana. And so there's not like, we're not tapping into new markets there, and we are supporting or working on an integration with wormholes such that you would be able to potentially trigger a thread from one of these other chains, or like from your thread call out to another chain. And I think that will be quite exciting. But in general, my approach to this, or my thesis on this, really is that usage on these compute platforms tends to follow like a power law distribution, where if you look at the distribution of desktop operating systems, Windows accounts for 80% of all desktop OS, usage on mobile, Android accounts for 70% of all mobile osite. And so I think in terms of just being like a compute platform, blockchains will follow something similar, and there will be multiple chains, but I think the activity will not be evenly distributed across those chains. And so our thesis is that Solana, I mean, looking at the data, does have the majority of transactions today, and that's why we are quite committed to Solana. And due to the growth of the developer ecosystem, I feel like Solana will continue to maintain that lead.
00:37:31.860 - 00:38:13.620, Speaker B: We're working to kind of grow, basically grow the market for Solana, in particular, find companies, existing companies that have user bases already, and talk to them about what the benefits are of migrating their back end systems to a blockchain. I think that is how we will actually reach mass adoption much faster than waiting for users to magically find their way into crypto. In some ways, I don't think you can just crypto we need to bring it to them.
00:38:14.000 - 00:39:18.948, Speaker A: I personally, we, after the FTX stuff, I mean, obviously very sad with all that. But I mean, now I think what we've been more continuously impressed by is the Solana community and the Solana builders doubling down on the Solana ecosystem. And really just, I mean, for the fact that you stated like clockwork's trying to run on ethereum when the gas fees, even as they stand today, could be extremely high. And that's not even in a point of contentious or high use of a blockchain. I think you and I, both coming from companies that have built products at scale, you have to have a backend infrastructure that can actually scale to run some of these type of applications. If that backend infrastructure does not support that, or is very low throughput or high latency, that's just extremely hard. And so even with the new chains, we're following them as well.
00:39:18.948 - 00:39:49.760, Speaker A: But I think even outside of that, there's no kind of shortcutting a lot of these blockchains and their growth and adoption. You have to start from point a and walk the line and all the way to z. You can't just jump to z. You have to build the community. You have to bootstrap the validators. So, no, it's cool to hear that you and the team are still very excited about Solana and given all the recent events, because it has been tough.
00:39:50.700 - 00:40:45.620, Speaker B: Yeah, absolutely. We certainly have our work cut out for us. Solana has definitely distinguished itself as the chain with cheap and fast transactions, and is doing a lot to attract indie developers and builders to the space. I think where we could do a lot more is reaching out to the ctos and staff engineers at large tech companies that aren't as much more risk averse and help make the case to them that these technologies are actually worth building with. A lot of that is marketing. It's communicating about reliability, a lot of his engineering about making sure the chain is actually reliable and not going down. But yeah, I mean, we're extremely bullish on the ecosystem, slander ecosystem in particular.
00:40:46.080 - 00:40:46.488, Speaker A: Awesome.
00:40:46.544 - 00:40:48.220, Speaker B: So, yeah, we continue to build here.
00:40:48.760 - 00:41:16.210, Speaker A: Awesome. Jumping back to some of the things that you're doing at clockworks. So we talked about threads of maybe kind of pulling upon that thread, diving deeper into how you can do a chain of instructions with clockworks triggering multiple events. I think you did it, but maybe diving slightly deeper into that.
00:41:17.230 - 00:41:54.640, Speaker B: Sure, yeah. The basic interface that we provide, sorry. The API is what we call the thread response. And so, yeah, jumping back to like, when you're doing Solana developments and writing those instructions. Commonly, we never return anything from our instructions. We have these empty response values and just say, okay, at the end of our functions. But Solana is actually way more flexible in that it provides or allows for instructions to return data.
00:41:54.640 - 00:43:05.050, Speaker B: And we decided or realized we could leverage that to do some nifty things. With the clockwork SDK, we provide a struct that we called a thread response. The thread response has a couple different properties there that developers can use to manage threads and work with them. But the big one is the one that is called the next instruction. And yeah, it's a way for your instruction at the end of all of its work, after it's done everything, to point to some instruction that should be run next. And what that looks like is basically, I mean, exactly what it's like to build an instruction or a transaction on the client side is you define the program, you want to call the accounts that you want to pass in and the data, and you can build that dynamically. And so part of what we find quite exciting is you can build dynamic logic into your smart contracts that takes like branching decisions and say, looks at some on chain account state and says, if price is above 100, then return instruction a.
00:43:05.050 - 00:43:44.690, Speaker B: If price is below 100, then do instruction b next. And to take that a step further, like, I mean, you can do branching logic. You can also do cyclical logic where like instruction a points to b, points to a, points to b, points to circum, depending on whatever type of workflow that you're trying to run and whatever kind of job you're trying to do. And those chains can even run on forever. There's no reason that they have to end at any point. You could build a smart contract like computes PI on chain if you wanted to. It would be practical, but you could.
00:43:45.230 - 00:43:58.150, Speaker A: And are some of these, is there a limitation to how often you can refresh these? So in sonic case blocks are like 400 milliseconds, can you do it every block?
00:44:00.050 - 00:44:42.930, Speaker B: Yeah, you can. We're working to get that latency to like a per slot basis. But basically the, what will happen is you can build these long chains, and the workers will simulate those chains and then pack those instructions into a transaction and submit that to the chain. And if that chain is long enough, it will be too large to fit in a single transaction. And so the worker net will be able to cut that chain at whatever the limit is, pack it into a transaction, and submit that to the chain, and then continue processing with another transaction continue processing with another transaction, and those transactions could be submitted across multiple slots.
00:44:44.150 - 00:44:51.010, Speaker A: Could you talk more about, from the technical aspect, the simulation and the block packing?
00:44:52.070 - 00:45:08.766, Speaker B: Yeah, this is an area where there's a lot of optimization to do, but basically we simulate those threads and we can keep track of how many compute units your instructions are using, how many accounts they're using, and if you've hit.
00:45:08.918 - 00:45:12.510, Speaker A: Those limits, and that's all happening on the rpcs.
00:45:13.010 - 00:45:52.980, Speaker B: Yeah, exactly. Yeah. As a developer, you don't have to worry about it. We do provide an API where you can specify the rate limit of the thread. And so if you say want to only include three instructions per slot, you could set your wraith limit at three. And when the workers are building those transactions, they'll have will stop at three and just submit that to the chain and submit transactions in chunks of three if you want. But the default is set to ten, which generally is about like for an average transaction where you kind of hit like the account limits.
00:45:52.980 - 00:46:24.250, Speaker B: And one area of optimization we're working on right now is to basically bake the version transaction like the lookup tables into that, where we could allow for much larger transactions, like much higher rate limits. As a developer, you wouldn't have to worry about the lookup tables. The clockwork would take care of creating the lookup tables for you based on the accounts that you're using, and then optimize the transaction building that way.
00:46:25.070 - 00:46:54.860, Speaker A: That's awesome. Very cool. And ultimately, all that simulation can be spread out upon multiple slots, and then you pack it. Why ultimately, can you explain the block packing and why you have to pack them all together versus just sending them instantaneously?
00:46:55.630 - 00:48:00.940, Speaker B: Yeah, the reason is that the chains can be dynamic, and so instruction a might have some logic that depending on the current state of the chain, it returns some instruction b next. But if that state was different, it might return instruction c. And so we actually have to simulate that chain right at the point where the transaction is going to be submitted in order to figure out what the correct logical path should be. That's what that simulation is for. And it really allows for dynamic transaction building where in your smart contract you can have rules around what accounts you want to pass into the particular transactions, because sometimes you don't know until the point that you actually want to run. The clockwork APIs provide a smart contract, an interface for smart contracts, for you to define that logic within your smart contracts. Really.
00:48:02.640 - 00:48:17.670, Speaker A: It'S super fascinating. I'm glad the clockworks team is abstracting a lot of that complexity. And just allowing developers to just hit the API makes the building in the ecosystem a lot easier.
00:48:18.450 - 00:49:05.438, Speaker B: Yeah, for sure. I mean, that was like why we thought it was a problem worth solving is that building those bots, those off chain bots to automate your smart contract is a non trivial challenge, and it's way harder than it seems. As soon as you do it, you run into all sorts of problems with transactions that time out and fail. And you got to have retry mechanisms and optimizations around how you build that stuff. And for every team to be solving those same problems, they're just like, there's got to be a better solution there. And so that's what the goal of the worker net and Clockwork in general is, to provide that automation network for blockchain developers just to be able to write their smart contracts in a way where they run on their own.
00:49:05.614 - 00:49:25.880, Speaker A: Perfect for people, either people that want to learn more about clockworks or developers that want to use clockworks. What is the best way to get familiar with the threads and what you're building at clockworks?
00:49:26.420 - 00:50:04.800, Speaker B: Yeah, absolutely. Everything on Clockwork is open source, 100% open source. And so we're available on GitHub at just GitHub.com clockwork xyZ. You can also go to our page at Clockwork XYZ and find our links to GitHub there. You can also find our docs on this page there. So docs clockwork XYZ and there there's deep dives into the programming model and how threads work and how the worker nets kind of builds those transactions, those are all docs are very much a work in progress.
00:50:04.800 - 00:50:28.310, Speaker B: You'll continue to see them improve overdem over the coming weeks and months. But yeah, basically our landing page and discord as well. We're pretty active in discord. And so if there's any developers out there with questions or just trying to wrap their heads around like what clockwork is and how to use it, you can jump in our discord and find the developers channel and just fire away. Someone will be there.
00:50:28.350 - 00:50:35.120, Speaker A: Answer is the clockwork team hiring at the moment? If anybody wants to join the yeah, absolutely.
00:50:35.900 - 00:50:39.500, Speaker B: Just ping me on Twitter and we'll set up some time to chat.
00:50:39.660 - 00:51:15.920, Speaker A: Cool. Awesome. No, I generally really think this is a core infrastructure that is needed, that touches pretty much every project. And so I'm glad that you and the clockworks team have ultimately taken on this challenge to help make the ecosystem more friendly for all the engineers. Because like you said, it is complex and often the simple things or being able to create a simple solution is much harder than it seems.
00:51:16.660 - 00:51:24.876, Speaker B: Yes, very much so. Getting something working is easy. Making it elegant and easy to use is the ten X challenge.
00:51:24.948 - 00:51:53.030, Speaker A: Yeah, for sure. Maybe. So. You went to breakpoint last year. You went to breakpoint this year. How kind of, would you describe kind of the differences from now and then, and then going forward to, say, 2023? What are the things that you're looking forward to and the Solana ecom systems or even more broadly with like clockworks in like a year timeframe?
00:51:53.540 - 00:52:57.016, Speaker B: Yeah, forecasting a year out is hard. Yeah. Well, first break point, I was brand new to the ecosystem. I mean, I felt like an outsider kind of looking in to a world I didn't really understand, but was just super impressed by the talent of everyone there, like projects that everyone was working on. So, yeah, coming in this breakpoint, it was kind of surreal, I guess, to be like a speaker, to go from, like, I don't know, not knowing anything to, like, standing on stage. But, yeah, we were super thankful to all the judges in the riptide hackathon that voted on our project and helped us get there. I was super impressed by this year's breakpoint and all the announcements between Instagram supporting nfts, Google cloud supporting Solana validators, and the bigquery stuff, to be able to query on chain data.
00:52:57.016 - 00:53:41.610, Speaker B: I think it's huge. As well as the fire dancer talk, obviously, that seemed to be the keynote that everyone took away is just how cool firedancer is, and the ability to support a million TPS will be huge for the network. And so, yeah, forecasting a year out from now, we have our kind of internal goals for clockwork in terms of the integrations we want to get done and all the teams we want to partner with. And, yeah, I'll be most excited by kind of the companies that you, maybe we're able to pull into the ecosystem over the coming year.
00:53:44.190 - 00:54:25.830, Speaker A: I would say jumping off that, obviously you left a not a, well, I would say cushy web two job in Silicon Valley. Ultimately, what would your advice, especially given how much progress you've made from going last year to feeling like an outsider to this year being on the main stage at breakpoint, what advice would you give to developers or engineers or product marketing? Anybody that wants to get involved in crypto and web3, what would your advice be to those people looking or interested to join the ecosystem?
00:54:27.290 - 00:55:34.220, Speaker B: Yeah, I think the big thing is just to start to reach out to people and show up to the hacker houses Mountain Dow changed everything for us. I think we wouldn't have had the insights that we needed to start clockwork if we hadn't gone to Mountain Dao and just been talking with developers in the ecosystem, just starting to build and getting out there making friends is really like the big thing. Yeah, I mean, there's nothing if not the community. And so, like, making friends, I feel like, is probably the most valuable thing in terms of, like, both aligning and, like, like, testing your own hypotheses and ideas off of, like, what other people think, as well as having just a support group there for, like, when things turn, turn south, it's like, you know, who are you there to hang out with and help you through it? And so, yeah, I mean, just kind of super appreciative and thankful to everyone in the ecosystem that kind of helped us get to where we are.
00:55:34.800 - 00:55:38.540, Speaker A: So spend an obscene amount of time on Twitter and discord.
00:55:39.760 - 00:56:03.276, Speaker B: Twitter discord and the in person meetups. Like, I think the hacker houses that the, I think its foundation are putting together. Like, theyre amazing for kind of seeing the people behind the Twitter accounts and actually getting to know them in person and sit down and have a drink with them and laugh. That's kind of where the real connections get made.
00:56:03.468 - 00:56:43.930, Speaker A: Yeah, I fully agree. Definitely. I've been to now quite a few different ecosystem or layer one hackathons, and I'm continuously impressed by the level of the high standard that the Solana ecosystem kind of hold itself to now after being able to, having done so many hacker house, like you said, it is so important to actually go to some of these things, meet the people and be like, all right, this is not just Twitter or discord or jpeg pictures. They're actually real people. It does make a big difference.
00:56:44.400 - 00:57:16.600, Speaker B: Yeah. And everyone's way more accessible than it seems like when you're first diving in. I don't know, like, I think when you're a newcomer to an ecosystem, it seems like there's all these, I don't know, personalities that are like, so hard to get in touch with. But everyone's just like people behind a computer, and most of them have their DM's open. You can send them a message. They're on discord, and everyone's like, very willing and willing to help, accessible. And that's what I think makes slant ecosystem so great.
00:57:17.260 - 00:57:49.300, Speaker A: I definitely agree. Perfect. Well, I try to end the podcast on a spicy note. My go to spicy question as of recently has been what ecosystem do you think is doing things that you're not excited about long term. And what outside of, say, like, the Solana ecosystem or even project, do you feel like is doing things, like, really that excite you and motivate you to keep building?
00:57:54.280 - 00:58:15.030, Speaker B: Let's see. So you want the positive one. Which one excites me most? Yeah. The one I'm kind of skeptical on is some of the SVM roll up stuff. I don't really get it. I don't get why it's needed. Totally.
00:58:16.330 - 00:58:19.230, Speaker A: Just because Solana does have high performance already.
00:58:20.290 - 00:58:53.716, Speaker B: Yeah, exactly. The throughput and confirmation speeds are already there. Um, and, yeah, I think in the future, like, we, we will see kind of, like, multiple leaders on Solana. I think long term, like, we could even see the slot times start to decrease and go, like, below 400 milliseconds. And so. Yeah, like, the, the performance improvements by l two on top of Solana. Like, I'm not sure I fully understand where they're coming from, but maybe there's something like, I don't understand.
00:58:53.716 - 00:59:25.862, Speaker B: I don't know. I'm not, like, in that space. And then stuff I'm excited by. I think there'll be a bit of overlap or integration between this recent AI stuff and the blockchains. I'm pretty excited by all the AI tech that's out there. I'm curious to see if someone could deploy an ML model on chain and, like, I don't know, run. What, like a true ghost in the shell or something.
00:59:25.862 - 00:59:43.810, Speaker B: Like, it'll be like a weird crossover. No, I think all the stuff that's happening in AI is, like, very impressive and mind blowing and, yeah, I mean, I'm excited. I'm working in crypto, but I kind of want to dabble a little bit in the ML space.
00:59:44.230 - 01:00:37.796, Speaker A: Yeah, machine learning stuff is fascinating. I mean, I kind of went down the rabbit hole ultimately when Tesla started revealing more about how they're training their neural networks and how it is fascinating how they've trained or essentially have the model set up. But now the machine learning world is very, very cool, and you definitely need a lot of compute to train those models. I think that's one reason why I kind of gravitated. I mean, as fascinating as it is, the fact that you owe an eye or anybody with an idea, especially how early it is today, can ultimately jump into crypto, not have a lot of money or not need. You don't need a lot of resources and can build something cool. So definitely a fascinating field.
01:00:37.796 - 01:01:03.260, Speaker A: AI, machine learning, and even crypto. I mean, it's fascinating how this won't fold as well, but definitely appreciate your time. Nick, thank you so much for coming on the podcast, sharing more about clockworks. Definitely extremely excited for what you and the team are building and happier that you're making it easier for all the other developers in the ecosystem.
01:01:04.080 - 01:01:06.672, Speaker B: Yeah, absolutely. It's great to be here. Thanks for having me on.
01:01:06.856 - 01:01:07.720, Speaker A: Awesome. Thanks, Zach.
