00:00:00.200 - 00:00:21.410, Speaker A: Super excited to have you here. We. Funny enough, I originally met you in Spain. I think it was during the Avalanche conference, and we are both at a event together. And I came up to you and just started badgering you with questions on how blockchains work and decentralization and. So excited to have the conversation here again.
00:00:21.830 - 00:00:33.074, Speaker B: Yeah, no, thanks so much for having me and it was a great chat. I hope you didn't get too sick after they have launch conference. I know there's a lot of folks that got Covid following it, myself included.
00:00:33.242 - 00:00:53.834, Speaker A: Oh, no, I. Well, I went to the breakpoint event in 2021. That was in the November timer frame, so a couple months before the avalanche event, and I got super sick after that. And so I think just going through that first initial round and traveling overseas kind of spared me from the avalanche event. But it was a good event overall.
00:00:53.882 - 00:00:56.470, Speaker B: I had a lot of fun, for sure. Yeah.
00:00:56.910 - 00:01:20.410, Speaker A: So I would love to start the podcast with a little bit more about yourself and kind of just in general your background and then kind of your journey into crypto. I think everybody has a unique story. The rabbit hole can often go pretty deep. So I would love kind of for you to explain in your words, how you got involved in tech and then how that brought you into the blockchain and crypto industry.
00:01:21.110 - 00:01:57.498, Speaker B: Yeah, no, for sure. Myself personally, I've been kind of always fascinated by security and networks. Right. And I think you can see that throughout various projects that I worked on after my undergrad, I did a little bit of work in research in software defined networking. So our goal was to build distributed controllers to manage decentralized networks effectively. And we're not talking about a second or five second blocks there. We're talking about microseconds, nanosecond responses there that we needed to get this pretty fun afterwards.
00:01:57.498 - 00:02:45.108, Speaker B: I did grad school, so I did PhD at MIT doing a lot of cryptography work and protocol design. Started to play in the blockchain space by the end of my grad school. So some first projects with Sylvia Micali from MIT, and we started to collaborate on some of the early works that led to now grant effectively at the end of the day. And I spent a bit of time as a faculty at the University of Waterloo in the middle. So did a lot of research there in the systems, cryptography, but then took a leaf to focus on startups, so help to take the algorand to the market. And we launched that platform. And then afterwards, just trying to understand what is the ecosystem going and what are the important problems that we have to solve.
00:02:45.108 - 00:03:21.620, Speaker B: And I think one of the problems kept on coming up is the spread of different blockchains, ecosystems, and it's been kind of morphin over the last few years, different activities and different chains and how they interact with one another. But I think no matter what kind of underneath all of this, you really need robust communication across different primitives in the blockchain space. And I think that's a problem that is technically very, very challenging, as you probably know. But to me, that's super exciting to work on and been working on AXlR on this problem for the last couple of years.
00:03:22.840 - 00:03:48.000, Speaker A: Perfect. Well, before we dive deeper into Axelr, I would love to learn a little bit. Well, let's. I would love to learn. Let's start with kind of some of your learnings from Algorand. Like, I think that's super unique in being able to kind of bootstrap like your own, like, layer one and building that from the ground up. What were some of the biggest lessons that you learned while kind of bootstrapping and building that ecosystem?
00:03:48.740 - 00:04:16.694, Speaker B: Yeah. The single lesson that I think I like to stick to now is that innovate on a new problem once a year. So I think one of the things at outground that we try to is kind of innovating across the stack, right. Everything, like from consensus to smart contracts to economic principles, go to market distribution and everything else. It was a really creative team. Right. Everybody came from various strong backgrounds, everybody's ambitious.
00:04:16.694 - 00:04:52.590, Speaker B: We all want to solve important problems, but I think as a result, we kind of took a little too much, a little too fast. Right. But you have to focus on something. You really have to say, what are your core objectives and what are the core value that you provided to users, whether or not it's developers or end users. And you have to explain what you're doing. Even if it's a complicated stack, it doesn't take you three months to explain what you're doing. It takes years of education and tooling and everything else that has to be built around it.
00:04:52.590 - 00:04:58.670, Speaker B: To me, that's a principle that I like to follow. Now, one major innovation per year.
00:05:00.070 - 00:06:06.110, Speaker A: I love it. And, yeah, unfortunately, the blockchain industry is highly technical, and there is lots of small nuances that often you do have to have some type of technical background or computer science degree, and it even helps to have a PhD in distributed computing to understand these. And so I really look forward to the day where we kind of abstract a lot of the complexities similar to, like, what AXLR is building to make these easier on the end users because it is hard to understand and definitely hard to communicate sometimes. But going, one of the things that I think would be maybe interesting to start with too, before we jump into kind of more of Axelar is maybe rehashing some of the conversation that we had in Spain and just like talking, I think, I can't remember exactly, but like high level, what are some of the biggest bottlenecks that you see today? And just kind of like blockchains and blockchain scaling in the industry.
00:06:07.290 - 00:07:49.104, Speaker B: Yeah. So I think our conversation was around kind of a vertical versus horizontal scaling, right premises and kind of which way should we go and kind of what the stacks need to look like and related questions. So to me, I think this is still one of the core questions that's still not solved today, which is how do you scale kind of blockchains? There are various analogies that people are making for blockchains, which is some of them say it's a database, some of them are saying that serve a network, but maybe it's a hybrid. To me, what blockchain is, is actually a beautiful combination of both server database and networking properties, but also high distribution properties. How do you scale these environments? Do you optimize this read write requests at the database level? Do you optimize how fast the messages propagate? Do you scale horizontally and have more different solutions from layer ones to L2s and things like that? And I think it's still a question, and it's not only from a, you know, what do we need to achieve millions of transactions per second or things like that, but also, how does the user experience change in all this? Because no matter which path you take, you are either making better user experience or you actually making some trade offs, and then you have to build some other architectural components of building blocks to solve that user experience. Some of the things we're working on as well. And so I think these trade offs are still been investigated.
00:07:49.104 - 00:08:08.380, Speaker B: But I would say even since the last conversation that we had, the horizontal scaling direction's been actually exploding more and more with L2s, I think, now getting traction, zero knowledge technology and roll up technology and things like that. So I think that trend continues pretty strong.
00:08:10.080 - 00:08:50.500, Speaker A: Yeah, I love to hear this, just because you've spent so much time in the deep technical sense, doing your PhD and even teaching courses. So in your mind, do you think, I mean, you said the horizontal trend will continue. Is this kind of like what you think will be better for the end users or I guess ultimately, where do you think it ends up? And maybe this is kind of a good segue into Axelar and what you decided to build there. But yeah, what do you think is the end state of these blockchain networks to scale to say, 100 million plus people?
00:08:52.360 - 00:09:35.490, Speaker B: Yeah, I think my pretty strong hypothesis, conviction that it is going to be horizontally scaled. Now, when I say horizontally scaled, it doesn't mean it needs to be. That could mean different things. You could have many chains, you can have many roll ups, you can have sharding that some protocols have near and things like that. There are, I guess, fundamental physical limits, I think what you can do on a single, you know, on a single threaded environment, no matter what that is. Right. And, you know, for the same reasons as like the Internet, it doesn't actually run on one database, it doesn't run on one network.
00:09:35.490 - 00:10:31.654, Speaker B: Right. Having systems that can independently evolve, independently fail and independently mature is actually benefits everybody in the long term. It allows some people run on their own speeds, it allows innovation to continue happening faster. And that's what we're seeing actually right now with L2s where you have innovation like things like account abstractions being pushed by L2 way before Ethereum is adopting those technologies. So, yeah, I think strongly for scalability issues, the system has to scale in a horizontal way. That does introduce difficulties for developers and users at the same time. So developers have to think about how do you build in this paradigm with asynchronous communication and things like that? Users need to think about how to interact across all the systems.
00:10:31.654 - 00:11:15.040, Speaker B: At the end of the day, technical problems for developers and for users, all of that can be solved. It's just a question like what are the layers that need to be built to solve those things? But yeah, I don't see a single environment that can possibly process very, very high throughputs, and we can't do that with regular networks and databases. It's just there are fundamental limits that you have. You have resource constraints that start happening. One application all of a sudden has a burst of traffic and then everybody else drops. You won't be able to deliver quality of service to the users unless you're able to isolate system resources from one another for different workloads.
00:11:16.180 - 00:11:51.140, Speaker A: Definitely makes sense. Yeah, I'm super fascinated by this. I'm curious to see how it ends up long term and the different trade offs of these different systems and how ultimately it does affect users and the engineers as well. But maybe that's a good jumping off point to talk about Axelr and scaling horizontally. Could you share the vision for what spurred Axelar, why you decided to pursue building this protocol?
00:11:51.960 - 00:12:58.620, Speaker B: Yeah, so the first motivation actually came shortly after we launched Algorand platform. After launching it, we wanted to connect it with some of the major ecosystems, Bitcoin, Ethereum and a few others. And then ideally, like I said, we've been innovating on the stack so much that in an ideal world, we would be able to call someone up and say, could you connect our grant with all these other chains? But unfortunately, there is no protocol, there is no company, there is nobody that was solving the problem. And the existing solutions like IBC, it was clear that they would take years of engineering, and frankly, we'll have to rewrite pretty much the consensus to support those types of approaches. So there have to be better, what I call plug and play protocols that would work. And you can continue innovating, you can continue improving them, but you need connectivity like tomorrow, so you can spend three, four years kind of designing some of these things. And so that's what led to some of the early motivations behind axillar.
00:12:58.620 - 00:13:49.900, Speaker B: And then it was clear that the protocol and the system that we designed to solve the issues for the ecosystem needs to be chain agnostic. So it needs to be able to, to plug in, it needs to be able to scale, it needs to be able to evolve as different ecosystems evolve. It needs to be able to deal with failures with different ecosystems. So when one ecosystem goes down, for instance, we lived through this, through Terra, when it was going down and up and up and down. And so you have to have very strong properties at the core consensus layer to deal with some of these failures, to deal with some of the connections going live with efficient routing, message translation, like path discovery and things like that. That's what led us to think about axillar. The end goal of what we're trying to do is to empower developers to build chain agnostic intra chain applications.
00:13:49.900 - 00:14:44.774, Speaker B: So changing the developer paradigm, as opposed to saying, build on this one chain, and then think about connectivity, how do you take a step back and say, how does my architecture and how does my application need to be built maybe from day one, so it can scale up and down as new ecosystems are discovered, as new connections need to be made, as new users, or liquidity needs to flow from another connection. So that requires different tooling, requires different protocols underneath it. And at the end of the day, we want to empower developers to build scalable intra chain applications. And finally, we want to be able to allow users to access all these ecosystems with one click. Today, if you are a blockchain user, you have to change wallets all the time. You have to think about, how do I get gas on this changes because I want to play with this application. Do I need another wallet? Because it's cosmos or solana or ethereum? And so those things are very complex for the users.
00:14:44.774 - 00:15:03.730, Speaker B: And so empowering developers with the right stack ultimately enables users to interact with all of these different applications, all of these chains with one click. And much, much simpler, which I think is also a key problem to solve, is really, like you said, simplicity. Otherwise, it's kind of very hard to use today.
00:15:05.350 - 00:15:29.200, Speaker A: And being able to kind of instantaneously deploy kind of multi chain. Could you walk us through that? Because I think that would be really interesting from developer perspective, or at least have with the mindset of when I launched this application, I wanted to be on multiple chains instead of just a single ecosystem.
00:15:29.660 - 00:16:28.738, Speaker B: Yeah. So we have a blog on our website which at the very core explores two extremes of architectures in a multi chain world, kind of give you examples. So one is what we call as like peer to peer multi chain deployment, meaning that you have an application, contracts that talk to one another in a completely kind of a peer to peer identical way, and then you can scale those contracts as different ecosystems are discovered. Right? So today, deployed on three different chains, you know, another two chains are available tomorrow, you want to access them, you can deploy the same contracts. They all have peer to peer relationship with one and one another. So one example of this would be something like an interchange token. So if you have a token, you want to be able to send this token not just within the same users of the same blockchain, but you want to send it to someone else who has a wallet or wants to play with an application on a different chain, or you want to use this token in a different application on a different chain.
00:16:28.738 - 00:17:35.462, Speaker B: So you can design a contract for this interchain token to be in a completely like a peer to peer symmetric relationship with one another. These contracts effectively burn and mint tokens as they travel from one ecosystem to another. So that's one architecture extreme. And then the second one is what we call as a home base and satellite model. So you have a home based chain where you can deploy a smart contract where most of the logic lives, and then you have satellite contracts that don't do much other than sending messages to your home based chain, getting approvals for those messages and then sending messages back to the satellite chains. And certain actions can take example so examples of applications that need these types of architectures are things like borrowing and lending. And I think prime protocol is one example of this is where if you want to take a loan against your asset in a different asset, then it's actually somewhat hard to synchronize what the pricing of this loan should be, how much collateral is available in the system, and things like that.
00:17:35.462 - 00:18:19.430, Speaker B: So you want to synchronize all that state as much as possible in this like home based kind of contract, but still be able to authorize requests from different chains on the user so they don't have to think about those back and forth interactions. So this is the second extreme. And then there's more chains are available, then you can say, okay, I can deploy more satellite contracts to all these different ecosystems and kind of continue tapping into those users and those assets. And you can, of course, have something in the middle. Right. In the hybrid model, where some things are completely symmetric in terms of relationships, some messages have this kind of home base and satellite approach. But those are kind of the two core, I would say, architectural decisions that you have to make as you build in this application and then scale from there.
00:18:19.810 - 00:18:35.630, Speaker A: And maybe for the less technical people, could you a high level map those two different architectures to two ecosystems that exist today?
00:18:37.860 - 00:18:41.520, Speaker B: To ecosystems? You mean like to specific applications or.
00:18:43.460 - 00:18:55.760, Speaker A: I guess either applications or blockchain ecosystems? Do those map more to a layer one ecosystem in one sense, or do they better map to applications?
00:18:57.620 - 00:19:57.580, Speaker B: Yeah, from my perspective, I guess I'd like to think about application deployment model. And maybe what you go into is that some ecosystems really have evolved in a, I guess like peer to peer or hub and spoke models, right? And, you know, like Polkadot is a good example of a kind of hub and spoke model, right? That, you know, has a main relay chain and then you have all these parachains that talk through the relay chain to one another. But the logic, you know, I guess to your point of when a parachain is allowed to join the system, right? What happens when it fails? And communication is all done through this maintain kind of polkadot relay chain and. Yeah, kind of, if you take that from an ecosystem and then map it to the application deployment model, right. That would be something similar where you have kind of home base. What I called is your main logic of an application. And you have these satellite contracts on other chains that talk to this home based chain.
00:19:57.580 - 00:20:35.650, Speaker B: And then when it comes to peer to peer, I guess the analogy, if you're familiar with ecosystem, would be something like Cosmos, right? I would say pretty much everything within Cosmos has a kind of peer to peer symmetric relationship via the IBC protocol. It's starting to change a little bit with this, like interchange security narratives and things like that. But, you know, so far it's been mostly peer to peer relationships. Anybody can connect, anybody can talk to one another in a symmetric way through the IBC protocol. Right. And now if you map that back to the application, like I said, I think a good example would be like an interchange token that talks to one another. You can define a packet format for this interchange token.
00:20:35.650 - 00:20:44.550, Speaker B: It's all symmetric. New tokens can be deployed and still talk with existing token deployments on other chains. So completely symmetric model.
00:20:46.090 - 00:21:05.820, Speaker A: Gotcha. Yeah, very interesting. And so wrapping it back to, we initially started with this blog post and how it relates to developers and the ecosystem. Could you tie that back to AxLR and what you're trying to accomplish there?
00:21:06.640 - 00:21:45.176, Speaker B: Yeah, so what we're trying to do at AXLR is really build this kind of a connectivity tissue across all of these different blockchains. And when I say connectivity tissue or infrastructure, it's really a combination of three different layers. In the stack, there's Axlr network itself, and you can think of it as a decentralized network powered by proof of stake consensus. This job is to connect other blockchains and route packets back and forth across them. The protocol has inherently been designed to support things like many to many routing. Every time a new ecosystem is added, it's automatically interoperable with everything else. It's not a pairwise bridge relationship.
00:21:45.176 - 00:22:10.052, Speaker B: It's really a many to many hub that you are connecting yourself into. There are things like translation of packet formats. We process a lot of traffic between Cosmos chains and EVM chains. Cosmos chains have one type of a stack. It's consensus based around Cosmos SDK. Some of them have Cosmo or smart contracts. EVM chains have a very different language.
00:22:10.052 - 00:23:00.148, Speaker B: So it's solidity, it's things that developers write inside of smart contracts, not at the consensus layer. So how do you translate messages between these two ecosystems? So you need to put that logic somewhere. And if you don't put it in the, in the network at the consensus layer, then it would have to be like at the application edges and the users and the developers would have to pay all the associated costs with them. So it's a lot more efficient to do it at the consensus layer and finally provide security, the Accel network itself, and various strong robustness properties. Like what happens when an ecosystem goes down. What happens is there's an attack. So we employ things like rate limits to make sure that even if one ecosystem is down and it starts faking packets, you know, you can't pollute that into all other ecosystems.
00:23:00.148 - 00:24:06.216, Speaker B: So that's a lot of work at the network layer, right? It's a blockchain that connects other blockchains, you can think of it that way and you can program it to do a lot of those interesting things. And then on top of it we have what we call as like service layer, right? So things like relayers, things like execution of messages by paying gas with one click on the source chain. So if you have a transaction that needs to touch five other chains, how do you do that? So the user only pays gas once and never has to think about execution on other chains. Right? So things like gas services, things like relay services, things like monitoring of transactions across chain to give you precise understanding, like what is the state of the transaction, where it's at? Does it revert on destination or source chain? Things like that. So that's kind of a infrastructure layer that built on top of the excel network. And at the very end of it, what we expose to developers is actually really, really simple. It's like three function calls at the smart contract layer that you can just call to send a message, but underneath all this is complexity, how to execute it.
00:24:06.216 - 00:24:13.740, Speaker B: But from a developer's perspective, it should be, I want to send a message where this needs to go, what is the destination I sent and I forget.
00:24:15.040 - 00:24:35.800, Speaker A: Perfect. Well, I would love to. A lot to break apart there. Let's start with the message passing. I think of that from a technical standpoint is very interesting. Could you maybe go a little bit more in depth and how Axelar specifically does the message passing between these different blockchain ecosystems?
00:24:36.540 - 00:25:11.930, Speaker B: Yeah, great question. So AxLR network connects with blockchains by effectively deploying what we call as a smart contract known as a gateway. So a gateway, you can think of it as a router. You probably have at home. A router, what does that router do? It receives messages from your home computer or your laptop, and then it figures out where they need to go to reach the destination. So if you're talking to Google or Netflix, those messages need to be routed. And things like routers are responsible for this.
00:25:11.930 - 00:26:12.132, Speaker B: So then on every chain that we connect, there is a notion of the smart contract, which is a gateway, aka router, and that exposes an interface for applications that they can write and read from. So you can send a message to this router and you say, I want to go from ethereum to avalanche as an example. Underneath that, then their Accel network will listen for events coming into this gateway router and then take those events and then process them. It doesn't process in any centralized way. The network itself is decentralized. So there's a consensus that takes place across all of the actual validators that decide what needs to happen with that message. As an example, if you send in from ethereum to avalanche, it's confirmed by the validators first, they all agree that this is the message, they all agree where it needs to go, and then they generate another outgoing message.
00:26:12.132 - 00:26:48.170, Speaker B: You can think of it that way, that is then posted on the destination gateway, and from there it can be executed by the application inside of that message. You can, of course, have all kinds of code or smart contract interactions. You can call other contracts, you can min tokens, you can burn tokens, you can perform callbacks and things like that. So it's a completely, what I call as a cross chain, Turing complete communication environment. You can write an arbitrary program, you can deploy an arbitrary program through this message passing paradigm. And that's what makes it pretty powerful.
00:26:49.390 - 00:27:07.490, Speaker A: One thing that you mentioned earlier also was the different programming language, or virtual machines. How does being able to connect with the different virtual machines and these different ecosystems affect the message passing? Or does that add additional complications for the team on the engineering side?
00:27:08.670 - 00:27:53.136, Speaker B: Yeah. So we made it so that our network effectively can translate messages from one ecosystem to the other. Right? And I think the most famous example, like I said, we're translating across like Cosmos chains and EVM chains, right. The messages. Now, how it's done, it is some work on the engineering you have to do to accomplish this. And we designed the network to have a lot of the right kind of building blocks to do that as efficiently as possible. So things like registering validators, to be able to subscribe a different chain via RPC endpoints, having things like cross chain voting gadget that is completely uniform across all the different stacks, and you can reuse them no matter what the consensus you have.
00:27:53.136 - 00:28:25.550, Speaker B: Having things like multiparty sign in, where the majority of validators need to sign a message one way or another, whether or not it's multi sigs or things like that, but agree on that format and then generate a message and post it at the destination chain, of course. So, yeah, adding new ecosystems, it does come with additional, I guess, engineering work. If it's, if it's not a VM or like IBC and things that are programmed, things that one time, it does require work, but all the building blocks are there and you can compose them as easily as possible to make those connections.
00:28:26.730 - 00:28:50.830, Speaker A: Makes sense. And one other thing that you mentioned was the composability aspect, or being Turing complete. How, I guess in the perfect state or end state, in a perfect world that you envision, would the ideal state be deploying just to Axelar initially, and then you're being able to take advantage of like all these different ecosystems.
00:28:52.210 - 00:29:34.676, Speaker B: Yeah. So the deployment process, you know, something we're still kind of working through, but yes, effectively, Axlr having a programmability allows you to do those things in a, you know, in a uniform way. Right. So for instance, one service that we actually exposed, which a lot of developers like, is this notion of a constant address deployer. So the idea is that if I have a smart contract, it needs to live on different chains. How do I actually refer to it in the same way? Having the same contract address, it's not that hard to do, but you have to take care of balances and things like that. Given a developer this environment and saying, yes, you can deploy a contract, it's going to be the same contract across all the chains.
00:29:34.676 - 00:29:47.480, Speaker B: So it's easy to aggregate information from it, it's easy to parse it, it's easy to scale it as new chains are added types of kind of features and properties we'll provide at the network and around it.
00:29:49.060 - 00:30:21.110, Speaker A: Interesting. Very cool. And then one other component that you mentioned that I want to talk about was the node validators just running the proof of stake network. And then I want to jump into some of the services. But on the validator, how does Axelr in general view decentralization? By running its own proof of stake network? Do you have to have super beefy nodes? Are they small nodes? Do you have a lot? I would love to get your thoughts.
00:30:22.010 - 00:31:09.520, Speaker B: Yeah, so Axelar itself is built around tendermint consensus. The nodes that you run, they're not that beefy. They're pretty standard going to serve for great machines. For the most part, excellent validators also do connect with other chains. And so those connections can sometimes mean that developer or validators need to register for RPC endpoints of those chains. And if you go to things like Axelorscan IO, which is an explorer, you could go to a validators tab and you can see which validators registered on which chain. So it's kind of opt in protocol, but enough validators need to register to actually vote on the events from those chains.
00:31:09.520 - 00:32:04.106, Speaker B: So it's not the core validator itself is not that beefy. It's not that hard to run. But if you want to get rewards and incentives from other chains, you do have to run adjacent nodes on the side for the chains that don't have clients or things like that. So, yeah, in terms of your broader question, like how do we view decentralization? I think it's the core of everything we're trying to build in the blockchains, and not just for any type of philosophical reasons. I think decentralized systems give you the strongest safety and liveness properties, period. And I think we've seen that over and over again in the ecosystems. We've seen all the attacks on centralized bridges over the last year where you have very small multi sig and people going down and attacking those things.
00:32:04.106 - 00:32:28.930, Speaker B: So, yeah, if you want to build something that lasts, if you want to build something that people can rely on for years to come, you have to have decentralized protocols, and you have to work on scale in those decentralized protocols. Today, you start with one number of validators. How do you get more validators? How do you make the requirements for joining being a validator? Lower and lower? You have to continuously think about those questions.
00:32:29.710 - 00:32:52.690, Speaker A: Lots of hard engineering problems, that's for sure. So maybe wrapping up some of the tech stuff. The other component that you mentioned was the services and how those kind of take advantage of what the AxLR team has built. Could you talk about the different services that Axelr provides?
00:32:54.000 - 00:34:07.044, Speaker B: Yeah, so the basic ones are things like relaying while the network itself. And I think that's actually a pretty critical point to understand. So the Accel network is effectively responsible for validation of the messages. But relaying of physical packets, like from one network to another, is completely permissionless and can be done by anyone on top of the network itself. And that's actually critical, because that means that you have much stronger isolation between these two core properties of liveness and safety. So you get safety from the network itself, liveness, you actually need much weaker properties there, where you need just one person to relay your messages for liveness, and then you can achieve very strong live NAS properties by having a few redundant nodes if you need to. This basic service that I think we provide is like, okay, we just relay packets for the people, but having the permissionless relay means that we have somebody, some other folks build independent relayers where we can say, okay, this is completely different component, and I would rely on that.
00:34:07.044 - 00:34:30.382, Speaker B: If something happens, we actually expose an SDK where the user can relay their own messages. Right. If they want, again, like for whatever reasons, if you have, if you want to relay it. And we have, we have some partners that are doing that and like leveraging. Leveraging. So this is the basic one. The second service, which I think is really important for usability, is what we call as a gas service.
00:34:30.382 - 00:35:36.710, Speaker B: So the basic idea is, I already mentioned, we want to allow a user to execute a cross chain or multi chain transaction with one click by paying gas only once, and then execute this transaction on different chains. So the gas service effectively says, okay, you can pay to the smart contract and this kind of a relayer architecture will take your transaction, make sure it's executed on all the other chains. Right. And for some messages we have developers that actually write in like back and forth calls, right? So I want to make a call to another contract on different chain that returns back a result to my original chain and then executes a function if and only if this other contract authorized my decision. So how do you program all this interaction with one click from a user perspective? So that, I guess the point is that we don't have synchronicity when we're doing multi chain interactions. We are working in asynchronous environment, but we can build these service and building blocks to allow users to still experience synchronous city in some sense. Right.
00:35:36.710 - 00:36:13.010, Speaker B: And that's what we're trying to do with all those services and then a lot of services for developers that allow them to monitor transactions like hook up into their front ends. Right. You know, so we have axel scan, which is effectively like interchain Explorer. Right? And that allows you to say precisely how much time it takes for a transaction to execute across chains. You know, has the gas been paid, why it's not executed, allowed to resubmit and retry and things like that. Right? So those are, those are kind of a, again, like experiences that we're enabling for the developers to then build these types of, I guess, synchronous primitives and building blocks.
00:36:13.350 - 00:36:37.390, Speaker A: And out of curiosity, I guess you're ultimately kind of bottlenecked by the slowest blockchain for the different two that you're interacting. Do you have some data around like the average confirmation times in between chains and how much some of the message passes in passing costs in between these individual systems?
00:36:37.850 - 00:37:20.510, Speaker B: Yeah. So again, if you go to XR scan and then there's a GMP tab and there's a tab with statistics and you can see, let me actually pull it out so I can tell you some statistics. But you're right that in the worst case, we are always waiting for the slowest chain and the confirmations on it. You know, let's say we look at like last seven days, then we see like from avalanche, you know, an average transaction take like a minute to execute, right. That includes all the way right from, you know, finalization in avalanche to like relay and. Right, and then execution on like destination chains. And I don't know in this case what does the destination chains are.
00:37:20.510 - 00:37:43.712, Speaker B: You know, Ethereum is the slowest. Oh, I guess like Arbitrum is the, you know, the slowest right now because it's like L2. So it has to wait a for its own finality. Plus it has to wait Ethereum finality. Ethereum finality with the merge is actually lower than it was before. I mean, sorry, higher latency that you get from Ethereum now on average. So.
00:37:43.712 - 00:37:56.860, Speaker B: Yeah, but that being said, we actually have a couple interesting things that will come up to that would allow to speed up a lot of these things for some applications. So kind of a stay tuned, but in a couple of weeks we'll be able to share more.
00:37:57.530 - 00:38:00.230, Speaker A: Any little sprinkles you could share today?
00:38:01.290 - 00:38:31.320, Speaker B: Yeah, let me just say for some applications you don't need actually to wait for full finality. So the idea is that for some applications you can design it in such a way that you can take a risk with much lower finality. But that risk is completely justifiable from an attack and economic perspective. There's certain objects that we're working that would enable that and then you can pretty much settle things with almost instant finality.
00:38:32.100 - 00:39:14.620, Speaker A: Very interesting. Looking forward to that. Excellent. One thing that I like to go deep into the technical aspects, but then be able to wrap that back around to some of the user facing perspective. One of the things that we've seen last year is some of these attacks. People, I would say a little hesitancies to use some of these systems. How would you describe the real world use cases of Axelar and what the user could experience and why or why not? Should they be nervous about these things that have happened in the past?
00:39:16.040 - 00:40:09.194, Speaker B: Yeah, so I guess like great question. There's many, I guess, sub questions, there's security user experience than the accelerated self. So let's start with security aspects, I think. And that's kind of quite important. I think security at the end of the day comes down to actually having a combination of the right architecture and decentralized stack, good engineering practices and all kinds of safety features or application safety feature add ons and what we have seen in the past, as you said, most of the attacks in the space bin because protocols have been designed just completely centralized. You have a five multisig or something like that. So keys are compromised, so there's a bug in the smart contract and then all the funds can be leaked.
00:40:09.194 - 00:41:06.508, Speaker B: So having the right design, the design that is actually secure and can continue scale in a permissionless and decentralized way, I think it's critical, if nothing else then what we have seen through decentralized protocols and design is that you have diversification in terms of deployment. So every validator takes the job very seriously. Like they decide how to protect their systems, how to protect the keys behind the validators. And so the more diversified you have software deployments, the more practical security you can get because the cost of attacks keep on going up. So that's one, the second thing are kind of engineering practices, right? You could never spend, I guess, enough on the safety of those things. So you have to have tests from end to end to unit tests, you have to have bug bounces, you have to have audits. So we run over 2 million bug bounty, we've done duty audits plus on the network throughout the stack.
00:41:06.508 - 00:41:57.274, Speaker B: And all the major features are going through multiple code audits and things like that. Then there's things like what can you do for applications to even make it safer to use and buy all these primitives. And that's sort of no different than like in the early days of exchanges or DeFi applications that were shipped. Like it didn't have all those design principles, they didn't have audits, and people ended up losing a lot of funds. Right. So an application perspective, you can do interesting things. You can say, I have things like rate limits, basic things, right? So an ability to be able to say my network needs to process this much or my application needs to process this much per hour, maybe I'm still in the early phases of development, maybe this is a beta so I can set some of those limits.
00:41:57.274 - 00:42:43.670, Speaker B: We're actually seeing a lot of interesting security companies, I would say being formed and developed now that are entering the space that given applications even additional checks. So you can run sophisticated firewall or AI engine behind your application transaction and you can allow it to, you know, authorize or kind of put, put delays on some of the transactions if they look suspicious. So I think the application layer kind of security add ons is still early, but will with the last years particular continue to mature and scale across the whole stack. Yeah. So that's the first on the security and again, like we do have a blog on our website, people can go kind of check it out and see how we think about it. Right. And how we approach it.
00:42:43.670 - 00:42:56.890, Speaker B: It's a very serious problem. Problem. You can never be too safe. You just have to continue investing funds with it, continue building a better technology. Does that make sense?
00:42:59.710 - 00:43:11.490, Speaker A: Yes, it does. So from the user perspective side, what was the user experience and using? Axel?
00:43:12.490 - 00:44:26.646, Speaker B: Yeah, so today I would say there's still not the user experience that we want to get to, primarily because I think today users are used to using things like bridges to move tokens around, which I think is completely nonsychal way that has to go away. Using bridges to transfer tokens around is making a user be a human router or a human air traffic control agent that says this packet needs to go from a to b. So that's not what we want to end to. But we're still seeing a lot of that build on top of AxLR and being used when the applications with these new architectures that we talked about earlier go live, they will completely redefine the user experience and allow effectively the user to just simply say, I have a token in my wallet, I see this application, I click and I go and use the application. You don't have to think about where that application is even hosted, how to get gas on this destination chain, like all the message routing, token transfers in the middle and all that. This does require new application architecture build outs like we talked about earlier. But this is the end goal.
00:44:26.646 - 00:44:44.460, Speaker B: This is the end state, is where as a developer, you can build, you can scale with all these different ecosystems, but as a user, you can just go from your wallet, you see an application, you go and use it, and that's it. As simple as that. And so we are kind of actively working towards this experience with a lot of the developers.
00:44:45.520 - 00:44:58.496, Speaker A: And you mentioned the differences today with Axelr versus bridges. Could you touch upon it or go a little bit deeper into that topic? Talk about wrapped assets versus just message passing. Yeah.
00:44:58.528 - 00:45:43.000, Speaker B: So traditionally bridges came about to just solve the need in the ecosystem to move value. A lot of them were shipped very rapidly. So you end up with all these pretty poor technical approaches, like centralized approaches that wrap token in one format to another. Maybe you have one or two nodes in the middle that are allowing them to mint representation of this token on other chains like a wrapped asset. I think the only reason we have seen this is because all these ecosystems were born very, very rapidly and there was no connectivity within that. So we ended up with like patch solutions. Many of them were compromised throughout the last year, unfortunately, as well.
00:45:43.000 - 00:46:54.058, Speaker B: And the message passing paradigm kind of takes it a step further and then just says, now applications can talk to one another directly. So in the same way, if you are coding an application on Ethereum, you can call other functions in other smart contracts on Ethereum, and you can execute functions with respect to them. So, like, you can call a uniswap contract to do a swap for you, right, and return you some result, and then you can borrow against it, lend it against it, liquidate it, whatever you're doing. And so in the same way your application can, with the message passing paradigm, can talk with other application. And so what that allows you to do, to kind of back to your point about the user experience, it allows you to take all the user interactions that they wanted to do previously, write down a program behind those interactions, and then run the program across chain that gets executed. So before your experience was, I have a token on chain a, I want to get a token corresponding to it on chain b, I want to use this application, let's say I want to swap it, and I want to end up with another token that I go and withdraw on another application on chain c. Right? So before with the bridges, you have to do all those things manually.
00:46:54.058 - 00:47:26.050, Speaker B: You have to like flip your wallets, you, you have to pay gas. So all those 30 sequences of steps. And so now you can take this and say, okay, this is just the sequence of instructions or a message or program, and you can ship that around and Excel will help you ship that message around, execute it across all the contracts. And you don't have to do all those steps manually. And so that's the difference, right, where the traditional bridge in token paradigms is put in all this work on the user. And now you can automate all that and you can and ship that around.
00:47:27.030 - 00:48:08.330, Speaker A: I think that's a great explanation and definitely helps simplify it going forward. Or I guess in some comparisons to other, I would say also bridges or messing, passing kind of solutions in the industry, like, for example, layer zero or wormhole, even like IDC or what avalanche has launched recently with avalanche messaging, how would you compare your technology solution that the Axelar team is building to what other ecosystems or tech solutions offer?
00:48:08.990 - 00:48:54.080, Speaker B: Yeah, so it kind of depends. But on the very core of it, I would say most of the kind of bridging protocols that you see, other than maybe avalanche or IBC, there are pre centralized sort of a layer zero wormhole. Like, I think layer zero is kind of running a small oracle like two or three nodes. I think wormhole is running like 19 validators that they have selected. So that's kind of a core difference. Actually being able to connect ecosystems that speak very different languages in a decentralized way is a hard problem, and we're the only ones that are doing it within ecosystems. You do have some protocols that are, that work, right? You have IBC, you have avalanche protocol that only works again because the subnets and everything that they're building understands one another.
00:48:54.080 - 00:49:48.948, Speaker B: So you can build this protocol across homogeneous systems pretty efficiently, but across ecosystems with diverse stacks and deployments and choices that developers make. XLR provides the most decentralized approach. That being said, the second piece that I think is very different in how we approach is that itself is a blockchain that allows you to build a programmability at the network layer that goes way beyond of what a message passing protocol semantics guaranteed between a and b. So you can always have a message pass in semantics, and you can have a protocol between a and b. But interoperability doesn't stop there. Interoperability is about, like I said, many to many routing. It's about message translation as you get to, it's about path discovery and things like that.
00:49:48.948 - 00:51:03.666, Speaker B: Having axillary as a blockchain allows us to then build a lot of these network types of primitives and objects at the network layer and execute them a lot more efficient for developers. One example of this to be very concrete things that we're doing to allow token transfer or deposits directly from centralized exchanges or dumb wallets. The idea is that accel network can generate a, what we call as like an address, which is a smart address, meaning that when a transaction hits this address, let's say you can withdraw a token like a USDC from Coinbase, then the network itself will know what needs to happen with that USDC. So say it needs to be routed to this destination chain. You need to call the smart contract on the destination chain, you need to execute it and return the result to the user. And so now you have Coinbase users that can just like execute a withdrawal and never have to have metamask, never have to even pay gas on Ethereum, never have to think about it, but it automatically then executes some decentralized program behind the scenes. So why we can do this is because we program this path for the specific address and we program the action behind it on the excel network itself.
00:51:03.666 - 00:51:09.794, Speaker B: These are examples of properties you can do at the network and layer. Once you have this concept of smart.
00:51:09.842 - 00:51:22.310, Speaker A: Interoperability that's very interesting. And the Ethereum example, I'm assuming you have to pay for the computation or block space somewhere. Are you doing that on axlr directly?
00:51:23.250 - 00:51:47.550, Speaker B: I mean, it depends. We can have a very simple model that we're doing right now where if you withdraw USDC, then maybe a certain fees taken from USDC is automatically converted to pay for the computation on both accelerator but also destination. If you execute smart contract on destination chain, somebody needs to pay gas for it, but that can be withdrawn from the asset that you interact with directly.
00:51:48.010 - 00:51:57.830, Speaker A: That makes sense. Then on the decentralization front, do you have more concrete metrics on validator count that you can share for Axelar?
00:51:58.450 - 00:52:51.540, Speaker B: Yeah, so I think right now in the main network we're running with something about 60 validators, but the other important property that we actually did, we for the cross chain message passing, we implement things like quadratic voting. So one of the issues with a lot of proof of stake validators, even if you have a lot of validators, but stake gets to concentrate it, and so you end up with a slower, a smaller attack surface. So things like quadratic voting effectively say that we can reduce a validator stake in a particular consensus mechanism in order to, you know, have more validators that need to reach a consensus, essentially. And so we implement like quadratic voting specifically for those things because in practice we see, you know, state concentration being a real problem, and that ends up, you know, I think the pretty good, diverse and kind of large validator set that, you know, you would need to compromise.
00:52:52.200 - 00:52:59.500, Speaker A: Is there a kind of like, angle here with like a number that you would like to get to on the validator side?
00:53:01.890 - 00:53:19.386, Speaker B: Yeah, no, great question. I mean, you know, hundreds. Right. If not thousands down the line for sure. You know, I think also various technologies like zero knowledge proofs. Right. Availability of live clients across different ecosystems and so on and so forth, allow you to make, you know, even safer individual like connections.
00:53:19.386 - 00:53:43.310, Speaker B: Right. So, you know, and maybe you need like fewer validators in that case. Maybe you run like zero knowledge computation across, across some of them where only one person needs to run it, but many can verify. So, yeah, we're kind of exploring a lot of those directions as well and. Yeah, like, the more the better, right? That's the final. That's what we're trying to get to.
00:53:44.050 - 00:54:18.860, Speaker A: Yeah, very cool. I definitely appreciate you kind of deep diving all the different technical nuances and also kind of being able to relate that back to the user experience. I guess maybe just wrapping up the Podcast 2022 was a pretty wild year in a lot of regards. How is the team doing? Are there any big lessons that you guys had while building in this chaotic market or things that you're looking forward to for this year in 2023?
00:54:20.600 - 00:54:55.684, Speaker B: We are doing fine. Thankfully, we're not affected by the things directly and, you know, we're pretty well capitalized for, like, foreseeable future. And this is one of the things we, you know, deliberately done over the last few years is making sure we have capital to continue building what we're doing. That being said, you know, it's been a wild year, a lot of overnights, you know, just. Yeah, a lot of gray hair as well. So I think we're fine. You know, I think the team is really strong and we have an amazing YouTube problem that we're solving.
00:54:55.684 - 00:55:50.766, Speaker B: And as I tell to everybody, look like we have seen effectively FTX and Celsius and all those things collapse because you could not have built decentralized applications like that before. You could not build an equivalent of FTX in a blockchain, because inherently, FTX requires things like interoperability. It's basically trading tokens from one blockchain to another. And unless you have decentralized connectivity across all these stacks, you couldn't build that. And so I think that just reinforces how important it is to solve this problem. So we can all the kind of front ends and all the centralized systems that have been built over the years in this space, we can now go back and say, how do I offer the same level of connectivity, the same level of user experience that those web two systems offered on top of blockchains, but in a more decentralized, more transparent way? And so I think that's incredibly important. Right.
00:55:50.766 - 00:55:54.478, Speaker B: And, you know, I think whereas the team just staying focused and true to.
00:55:54.494 - 00:56:13.596, Speaker A: That mission, I fully agree. And 2023, is there any specific items that you are looking forward to or that you want to see built either on XLR directly or in the more broader ecosystem? Yeah.
00:56:13.628 - 00:57:24.280, Speaker B: So I wrote a short to it, I think, about a couple of weeks ago that I said, let's 2023 be the year of boring crypto. And the concept of boring crypto is from boring cryptography, right, where it's like you want to design systems based on fundamentally strong and robust cryptographic primitives that withstood the test of time. And so I think as we get into the next phase, I think it's important to take that step back and really think about what are the infrastructure pieces that we're missing? What are the building blocks that still need to be there to scale in a long term, in a sustainable way. So to me, I think, you know, you asked a lot of the right questions, which is like, what does the user experience need to look like? Right. And the user experience need to look better. And you know, as I think as we're working with a lot of developers, those are like specific things we want to, want to think about. Right? Like how does the wallet experience need to look, how does the application experience need to look in this process? And, yeah, no, I think, you know, I'm just encouraging, I think everybody to just, just take a step back.
00:57:24.280 - 00:58:14.060, Speaker B: Let's understand what the building blocks that are missing. In some sense, it's a good problem to have because we have demand, but we don't have this infrastructure answers yet. I think if you look at the history of the intranet and everything that's been happening is actually reversed. The interoperability communication protocols were worked out 20 years before a single application used them. There was all researchers and military use cases testing and trying to design technology that can withstand nuclear attacks and things like that. So a lot of thought went into it and I think in blockchain space we'll find ourselves in a reverse position where you ship something and get actually millions of users tomorrow, or millions of value, not millions of users, but millions of value at least flowing through these protocols. So it is scary.
00:58:14.060 - 00:58:22.168, Speaker B: You have to be careful. And I actually look forward to hopefully at least this year being at a.
00:58:22.184 - 00:59:15.250, Speaker A: Slightly slower pace, for sure, kind of refocusing back on the builders and as you said, focusing on the basics and the infrastructure. One thing that I've also been super fascinated by is there has been quite a bit of TVL, or as you said, millions kind of flowing even billions in these ecosystems. But there hasn't been as much user activity as I would like. I think when I look at like doing analytics with OpenSea and Uniswap, each of them respectively have like less than 5 million lifetime active users interacting with their smart contracts. What do you think we need to do as an industry to get that to say 100 million? Because that was kind of the original thing that really excited me about crypto is like having this technology and the power of like many, many people.
00:59:16.710 - 00:59:55.744, Speaker B: Yeah, yeah. I mean, I don't think there's a single thing, but it's both like, like scalability issues on the networking layer, the consensus layer. You can't throw 100 million of users at today's instantiations of blockchains. We're going to collapse frankly, you still need a lot of infrastructure work. You still need to continue answering these scalability issues, whether or not it's vertically improving your stacks or horizontally and things like that. Second big point is what we talked about is the user experiences. So things like account abstractions.
00:59:55.744 - 01:01:09.180, Speaker B: I think I'm pretty excited about a lot of the directions in those works. Is that how do you allow a user to just use the application without having to think about gas payments latency and things like that? So account distractions properties help you, things like wallets that have multi factor authentication and or wallet recovery properties. So I think one of the things that you find, especially people enroll, is that they, it's a new world for them, right? And the question is, do you want to learn this world? And so having user experiences that are easier and easier, I think is very important. And then I think the third point, which I think is quite important, is that kind of the whole web3 industry, you know, it's or blockchain industry, it serve runs completely in parallel with everyone else in the world, right? That's different users that mostly don't like other systems, right? It's different funding, it's different communities, it's its own world. And so I actually think like finding bridges, right, and finding use cases. Like, back to the point like, you know, here's a real problem, right, that needs to be solved. Like things like payments, right, giving access to financial instruments to people.
01:01:09.180 - 01:01:51.250, Speaker B: You know, we have not solved any of those things we've been talking about for the last ten years, right. But I think the infrastructure is now, you know, getting to a point of being mature enough that you can go back to a lot of these questions. I think payments is getting renewed attention as well. So, yeah, I think finding the bridges with other communities, with other real problems that people have and the problems we've been talking about solving but haven't really solved, I think is still important. Yeah. Unfortunately, there's no single answer. Everything from the, from the stack that has to be solved, you know, I think that's why it's so exciting, right? Like there are opportunities, there are things we can solve.
01:01:51.250 - 01:01:53.630, Speaker B: We just need to continue staying focused.
01:01:54.570 - 01:02:11.030, Speaker A: I fully agree. Well, I think that's probably a perfect place to end it on. Thank you so much, oge. Really appreciate your time again, appreciate you having the conversation with me in Spain and let me badger you for a little bit. And thank you so much for coming on the podcast.
01:02:11.450 - 01:02:14.030, Speaker B: It was great. Always a pleasure chatting with you.
01:02:14.330 - 01:02:15.090, Speaker A: Perfect, thanks.
