00:00:02.480 - 00:00:03.128, Speaker A: Awesome.
00:00:03.254 - 00:00:03.862, Speaker B: Thank you.
00:00:03.926 - 00:00:05.630, Speaker A: Good to see you and meet you.
00:00:05.790 - 00:00:23.890, Speaker B: Likewise, likewise. No, I really appreciate the entire missing Labs team sitting down with me. It's been super fun to get to hear each of your stories and backgrounds and what you've been working on.
00:00:25.480 - 00:00:27.420, Speaker A: Happy to make it excited as well.
00:00:28.520 - 00:00:42.400, Speaker B: Awesome. Well, maybe we could just do like a brief kind of overview of who you are and then dive more into kind of your background on the cryptography side.
00:00:42.480 - 00:01:00.760, Speaker A: Yeah, I will try to keep it at a high level, but yeah, you can go deeper. If you will ask me. I will do so. I'm Costas. Costas Salkias. Greek is called Halkias, but anyway, I got used to it. You will find me on LinkedIn as Costas, Cryptos and Twitter.
00:01:00.760 - 00:01:38.808, Speaker A: And why Cryptos? Because my sons name is Kryptos, literally. Anyway, im a cryptographer. I work at Mystin Labs, obviously as a co founder. And I lead cryptography here, like chief of cryptography as everyone else in the company. Im coming from Facebook as well, like working there for three years. I was leading the cryptography part at Facebook blockchain, also with some experience on the WhatsApp payments, and I was working on security. I was a guy of breaking things at Facebook and outside Facebook, I will explain what did we manage to figure out and find some serious attacks in different protocols.
00:01:38.808 - 00:02:05.908, Speaker A: Before that, I had the opportunity to work with one of the first developers of Satoshi. His name is Mike Harn. Maybe you know him, like, people from the community know him from some debates. And actually he's a very, very smart guy. And I was happy to work with him. I started on 2016, 2017 in London. Mike, after he left bitcoin, he was a former Google guy.
00:02:05.908 - 00:02:36.330, Speaker A: And then we created, I mean, he created three, which was the Corda blockchain, if you're familiar with. Bunch of bankers tried to create like a new blockchain. I guess they were going against the bitcoin revolution, like building something new between banks. We had, like, very, very good progress at the very beginning, I think still profitable. And then what happened is Facebook grabbed me. I met with Sam in a conference. This is very interesting that I had to travel to Canada, my son.
00:02:36.330 - 00:03:00.810, Speaker A: It was the day that my wife was giving birth. And actually I managed to convince her I have to go there. Like, I'm presenting like a new protocol about post quantum cryptography and all of this kind of stuff. I convinced here the word quantum somehow works with my wife at least. And I left, I went there, I met Sam. Sam introduced me to Facebook. And then after a while, Facebook invited me to go to the US.
00:03:00.810 - 00:03:49.866, Speaker A: Even before that, I actually started very early. I finished my PhD in Greece and I had some work to do on France with technology that is used now in blockchains, like zero knowledge proofs and the more complex cryptography here. And I also worked on projects around biometrics, like touchless biometrics on the airports. This was in France and Paris with Philips and some other companies. And the reason I went to cryptography was originally I was not a cryptographer. 2004, I had kind of an official trading firm and it was hacked. Oh, who is there? And I then said, why I got hacked? And then I started to learn more about security.
00:03:49.866 - 00:04:28.270, Speaker A: And then I jumped from machine learning to cryptography. 2000 320 ten, I got my PhD. I worked on all of these projects that I told you. I had two startups working on time lapsed cryptography, like sending encrypted messages to the future. And they have some good applications, especially on national exams where we all gather to the same rooms, but in different places around the world. And we have to ensure that, hey, we're receiving all of the topics of the exams together at the same time, so there is no leak in between. And you need some type of cryptography here to ensure that even slow Internet can actually do not give a fairness advantage to someone else who is faster.
00:04:28.270 - 00:04:34.534, Speaker A: Yeah, this is interesting. I think the most interesting part that affected my life was working with Mike.
00:04:34.662 - 00:04:35.094, Speaker B: Really?
00:04:35.182 - 00:05:09.020, Speaker A: Yeah, it was super, super important. I mean, this guy is a machine and he got me very deep into the details of how you're building blockchains. And I think this helped me also on the confidence side, and I owe him. Then I met Sam, the current CTo of misten. This is the other guy I admire a lot of, to tell you the truth. After Facebook, we all expected what will happen with Libra. And we decided that, like every individual had their own plans to do.
00:05:09.020 - 00:05:52.880, Speaker A: And I was thinking, I mean, for the last few months before I go, I have to try something by myself. I have some great ideas here. I used to work on many complex protocols, including ZKP, and you will see later what I'm working on at the moment. And then we joined our forces together, all of us like leaders on the crypto space, like at Facebook. And it was a timing event, right? We all met together one day at, I think it was somewhere, well, one by one, originally. And then we have some very good, like, cafes nearby, cafe Venezia, and some other nearby at Palo Alto. I think all of the deals are happening here, and we decided that let's do it together.
00:05:53.020 - 00:05:53.800, Speaker B: That's awesome.
00:05:53.920 - 00:06:12.328, Speaker A: And this is how we are today. I'm super happy, actually. Facebook is a great employer. I think I learned a lot from there. But then I went to misty, and I can actually fill all of this, even the liability part, which you have, like, building teams. I really enjoy it. I mean, I'm moving forward with my own ideas.
00:06:12.328 - 00:06:20.408, Speaker A: We have some stellar people in the company, and I'm so happy that I did this move in my career, at least.
00:06:20.504 - 00:06:22.512, Speaker B: That's amazing. That's a crazy story.
00:06:22.696 - 00:06:39.000, Speaker A: Yeah. I hope it will go well. I think. I'm super confident. You never know, right. But I think we have this touch of, like, innovation that I don't think someone else has seen in the industry at the moment, at least in this spectrum that we do.
00:06:39.160 - 00:06:48.940, Speaker B: No. All you guys are building here is very unique, and the world's very excited to learn more about it. So, again, thank you. Super excited to kind of parse apart that.
00:06:49.020 - 00:06:59.532, Speaker A: Yeah. Good to go even on deeper. Like, more juicy questions. I don't care. I mean, we're open sourced. We have a remote flexibility, like planning. Everything here is open at the company.
00:06:59.532 - 00:07:02.540, Speaker A: So even on this podcast, feel free to ask anything.
00:07:02.700 - 00:07:12.132, Speaker B: Let's do it. So you studied your background or did your PhD in cryptography? Correct. And that was based on you getting hacked?
00:07:12.196 - 00:08:01.690, Speaker A: And indeed, do you know what happened, actually? So there was some, like, we had users in our platform where all of these users contributed to the data we needed for, like, doing trading, and they had passwords. And I guess it was kind of malware that was actually stored in my computer or in my university's computer. We were using the universities, but anyway, I realized that they stole all of the passwords. And then imagine some people are using passwords along different services, including PayPal, and, I don't know, some different things. You know, for a while, you feel like, oh, my God, I'm exposed now. Right. It happened to my website, and fortunately, we managed to only have, like, a very small loss.
00:08:01.690 - 00:08:17.652, Speaker A: I was a child by then. I was 20 years old. It's like half of my life, but, yeah. And then I realized, oh, my God, I don't know anything about cryptography. I do basic security. I do some basic hashing. And then we were using, like, some old algorithm.
00:08:17.652 - 00:09:00.758, Speaker A: Back then, it was MD. Five people were not familiar with strong passwords, and what the attacker did is actually breaking everything, trying to do brute forcing on the passwords. Most of the passwords were less than eight eight digits. And many of them were exposed, unfortunately. And then, okay, what is better than a hash function? I said, I found a professor on mathematics. You know, to be a cryptographer, you need both to be like, on the mathematics part, but especially for me that I'm more on the boundaries between applied and theory. I had to head both like strong mathematical, like, basis on like number theory and everything, but also be able to code.
00:09:00.758 - 00:09:13.702, Speaker A: This helped me. I was in a uni that there was some good guy with good mathematical background that helped me, I'm telling you. I mean, most of us are here because of some people being in our past, key elements of our.
00:09:13.846 - 00:09:23.846, Speaker B: For sure. I always appreciate those people that kind of had a stronger early belief in me. It definitely kind of changes your.
00:09:23.958 - 00:09:31.350, Speaker A: They change your career as well sometimes, right? It's not. I mean, a simple thing can actually drive you in a completely different way that you wouldn't imagine.
00:09:32.250 - 00:10:23.020, Speaker B: That's awesome. And then that ultimately kind of led you to Facebook and meta and on the early kind of team that was building out the blockchain infrastructure there, maybe at a higher level. What did you learn specifically trying to hack away at blockchains while in your past? And then how have you kind of actually. Let me back up. Let's start with the most basics where I like to normally jump off what are in your point of view or holistically, the key cryptography components of blockchains. I know a lot of it's cryptography, but maybe just start very basic of cryptography applied to blockchains.
00:10:23.180 - 00:11:18.444, Speaker A: Yeah, there are many, there are many things, right. I can see even from the interviews that we're taking here and even in my previous places, I think something that is super, like, important for a company at this stage. At this stage to have is someone who is literally having the theory part of the cryptography, but not necessarily too advanced, that can convert this into code. I think this is the most difficult thing to find in the space. Maybe there are not too many people here even, I mean, global. So I will say that you definitely need to understand zero knowledge proofs now if you want to go to the next step, for example, at least understanding them and know how to use them. And obviously there are people who are more, I mean, deeper into this, like very advanced cryptography, like in the last few years that is applied.
00:11:18.444 - 00:11:59.764, Speaker A: Right. But this is like the most difficult thing to find. It doesn't mean that it's the only thing from cryptography that you need to know to go to the blockchain space. You need to understand this digital signatures, right? I mean, I'm taking some interview sometimes and people don't even know what is RSA. And obviously, I mean, it's a red alert for me. I mean, if you're joining as a cryptographer and you only know, I don't know the algorithms by the, probably the acronym, but you don't know exactly what technology behind it. You can probably work like on the backend part, but not part of the cryptography team that is interested for innovation and also applying optimizations on top of the algorithms.
00:11:59.764 - 00:12:37.572, Speaker A: So has functions, signature schemes, I would say. Now, some of the modern technology there on cryptography is multi party computations and zero knowledge proofs that I explained there is new concrete protocols. A lot of effort is given into random beacons. How you're creating literally randomness using the blockchain infrastructure or some other external services. There is also technology around creating new primitives. For example, we have like Fotini. Fotini is like a professor at George Mason, and she's an expert on mixing.
00:12:37.572 - 00:13:47.402, Speaker A: She's an expert on like anonymous credentials and this kind of stuff. It's good to have this knowledge, to be able to excel and actually be a leader on the cryptography team. But obviously you're hiring juniors as well, right? There was a particular case in my team at Facebook. This guy works for a competitor at the moment, but he's super skillful and one of the best I've ever worked with. And this guy is actually an expert on a particular protocol, on zero knowledge proofs. He might not be like a generalist and knowing different, like, things, but this one makes him like a diamond hire for any company. And this is the people we're looking for, right? Sometimes you need generalists to build like the core platform, but then you need, for the particular innovation points, you need some experts on, like, especially NPC and ZKP, which might be like, not a handful of people, but when I asked on Twitter the other day, how many people can actually be trusted to be part of a zero knowledge proof like team and lead this team, being capable of actually having new ideas and use this stuff, it might be less than 100 across the world, right? How do you find these guys? It's very difficult.
00:13:47.402 - 00:14:09.894, Speaker A: I mean, there are so many companies. You can see from the advertisements I receive on LinkedIn as well. Hey, we need the new ZKP leader in our team. And then I say, where would you find this guy? I mean, especially with this salary and especially without already having a team, right? ZKP is complex. You need another team, actually, to support you. And for this one, it's something we're building a lot at mistem. Yes, we have juniors.
00:14:09.894 - 00:14:22.770, Speaker A: We have, like, other people who know the basics, but you need the foundation of some very core, like key engineers plus cryptographers to apply this stuff. Otherwise there is no future. You have to depend on other companies to also provide you services.
00:14:23.150 - 00:14:39.850, Speaker B: Yeah, no, I fully agree that foundation and those core components have to be in house. And the more knowledgeable you are, definitely the higher probability of being the leader in the space. But it's awesome to hear that you're kind of building out that team here.
00:14:40.630 - 00:15:07.682, Speaker A: I hope we will find actually, experts on this. We're still looking. I mean, it's a never ending process. I'm very happy when I'm interviewing with these guys, but all of these guys are very popular and they're getting offers from everywhere. But we think here we're building. If you see the core like, structure of our research teams plus applied, because many of them are theorists plus applied, we have some of the biggest brains in particular elements. Right.
00:15:07.682 - 00:15:45.764, Speaker A: We have Alberto. Alberto is like, for his aids and leftaris, they're. Leftaris and Alberto are pretty much, I don't know, some of the leaders in their, at least their class of their age bracket. I haven't seen other people or just a few handful of people being at this level. We have Fotini, we have like, Francois, Francois Garillo, who is an exceptional applied cryptographer plus an engineer. There are so many other people even soon that I was talking to yesterday, like soon Lee, who is building our core protocol, he's not a cryptographer, but he has done so much, like, progress in understanding consensus. Sometimes I'm even, like, surprised by myself.
00:15:45.764 - 00:15:57.706, Speaker A: Wow. There are a few brilliant minds here. Some of them are better than me. Yeah, I love it, actually. And this is what we offer here. Right. Innovation is probably something that you cannot easily find the competitor with.
00:15:57.706 - 00:16:01.154, Speaker A: Miston, at the moment, there are obviously a few companies, but only a few.
00:16:01.242 - 00:16:38.092, Speaker B: Yeah, I do agree. Awesome. Maybe kind of jumping off that. I definitely want to touch upon the multiparty computation and zero knowledge proofs, but maybe coming back to that a little bit later. So, like hash functions and all kind of like the basic cryptography stuff. Did you feel like you kind of. I mean, obviously you did your PhD and were super knowledgeable prior, but what were kind of like some of the key learnings or extrapolations that you kind of learned while building out, like the Libra project?
00:16:38.236 - 00:17:37.310, Speaker A: Oh, my God, you are getting into the like the untested waters here, even at Facebook. And that will explain why we personally found many attacks on this, on the signature schemes that people were using for decades. Yeah, I don't know if you noticed, but in the last like two years and especially two months ago, our team actually found so many bugs on the implementation site, and some of them like critical on the RFC description of the protocol on for example, the EDDSA algorithm, that is the modern version of ECDSA. And most of the new blockchains are actually using this algorithm. I can tell you for sure that I didn't sleep for a week or two weeks. If you search on Twitter or even Google about the unsafe libraries on ed 25519, there are so many wrong implementations out there. I found 50 50 implementation and some of the.
00:17:37.310 - 00:18:11.116, Speaker A: I won't mention names. You can go and check our repository on GitHub. Yeah, it's some of the most popular wallets that might be prone, but they were quick. I will give them this, that most of them who actually realize that they are vulnerable, I'm not saying the next day, but it took them one or two months to actually fix the problem. It's not always easy. And then I realized there were even banking institutions that were affected. You can ask my CEO Evan.
00:18:11.116 - 00:18:45.754, Speaker A: I didn't sleep for weeks. And there is also pressure, right? Do you reveal this stuff or this might be like a potential, I don't know, vector of attack for other protocols and then you are liable and then you're getting into the situation. What do I do now? Do I protect people or do I mention the attack to public? And I was in a limbo for a while. I mean, I literally, I mean, I was talking to my wife. I cannot properly function now. It's, I don't know, I don't know what to do. And then we realized that this bug was everywhere and you cannot hide it anymore.
00:18:45.754 - 00:19:20.570, Speaker A: Right. And then we had to reveal it. So how a signature scheme, how anything from the paper is transferred to code, I can give you my guarantee. I've seen 30 different ways of applying the same thing and actually having a different result. There is a gap there, there is a gap in the community on how the rfcs and the standards are created. We personally at Facebook even proposed to like NIST, the National Institute of Standard and Technologies in the US, to make fixes on this particular algorithm. There were a few inaccuracies there.
00:19:20.570 - 00:20:21.078, Speaker A: And actually when you see in an RFC do this or do that, or optionally do the other, then the developer doesn't know what to implement, right? I mean, there is no standard now, and if this mode is not like a combined with an id, like if you use id zero, it's this version, if you use id one, it's the other version, and so on, then it complicates stuff. And we literally named one of our papers taming the different flavors of EDDSA, the many EDDSA, because there were so many different implementations. And then two months ago I found another bug with 50 affected libraries. And then we found some other bugs on the base 64 encoding, like that. They are not checking the padding. If you see most of the libraries out there, they are not checking the padding version. And if you care about malleability, like what you are putting on base 64, it's the output that you're expecting to be deterministic, it's not on the verifications on the decoding side.
00:20:21.078 - 00:20:55.138, Speaker A: And you will be surprised. Actually we won the best paper award on Asia CCS this year about this paper. And yeah, it was a funny, you cannot find these things if you're not working with big data. And this is the main basic lesson I got from Facebook. We had access to big data because we could, I mean, when Novi was created, obviously we wanted to build, when I say access, we knew we had to design this to work with millions and billions of people. And Novi was completely independent. We didn't have like Facebook access and everything.
00:20:55.138 - 00:21:32.650, Speaker A: It was a different organization inside Facebook. But because we, we had a huge team working on this stuff and having to run like. And you had the opportunity to use servers for all of this stuff, as many as you want. We could run experiments and the base 64 was very lucky how we found it. It's like, personally I did a mistake on like removing the equal symbol, you know, the base 64, they have some equal symbols at the very end. And then I said, oh my God, this signature verified. How is this possible? And then we went back to a guy that this guy actually works for a wallet company now.
00:21:32.650 - 00:22:04.250, Speaker A: He also left Facebook, fortunately or unfortunately. But hey, there is a bug here. And then we realized all of the even Facebook APIs and others were using this buggy version, and when malleability was important. Oh, this is actually breaking the system. So it's a good thing when you're working for fangs for this kind of companies, the fact that you're having all of the resources to do whatever you want with experiments and they're giving you this ability, helps you to grow and actually go to levels that nobody else even an academia can reach.
00:22:05.950 - 00:22:23.250, Speaker B: I mean, there's a lot of learnings in there. I think one interesting takeaway is there's. Do you think it's always going to kind of be a cat and mouse game between cryptography and introducing bugs, hackers and everything?
00:22:25.400 - 00:23:03.150, Speaker A: Yes, indeed. Especially for the new schemes. You realize now we had some competition about the post quantum algorithms, and someone, after a week after the announcement of NSA or NIST, they found a bug for new algorithms. It's 100% sure, I think, that people will find ways to actually reduce the security level. I'm not saying full attack, but we need some times for the protocol to be mature. Imagine that the EdDSA algorithm for which we found the tags, it's already ten plus years old, right? People are using it and it's now used on SSL and everything. Maybe for some other things that are like.
00:23:03.150 - 00:24:08.188, Speaker A: More like. There are many companies that are working on them and they are simpler on the construction side. For example, the hash function itself, because we learned from some previous examples like MD five was cracked and I, SA one was cracked, and now we know that SA 256, or SA three, or even Blake two and three, it's like, I don't see how we can find like quick attacks there unless we go to a post quantum world where somehow we find like a very fast way to do it differently for new protocols like ZKP and TemPC. I feel we're going to see some breakthroughs on new systems and breakthroughs on attacks as well. Yeah, there is something that I'm considering now. For example, they did the SA algorithm that I told you there is NPC for this, for like multi signatures being compressed into one key. But I want to see how people are actually implementing this stuff and maintain the determinism part that EdDSA, by default, guarantees.
00:24:08.188 - 00:24:15.320, Speaker A: Maybe they don't and they slightly change the properties of the algorithm. Is this an attack? I'm not sure, because in some particular cases, this is important.
00:24:15.950 - 00:24:21.366, Speaker B: Makes sense. Yeah, it is.
00:24:21.518 - 00:24:39.390, Speaker A: It's a cat and mouse game, I believe, many times. Who is the cat? Right. Assuming the cat is the one who is chasing like the hacker, they will win the mouse, who is a lot of the cryptographers. I say they will try to find new nests and new places to hide.
00:24:39.470 - 00:25:21.860, Speaker B: Yeah, definitely. Yeah, it's an interesting game, for sure. There's definitely a lot on the line and hopefully I'm interested in the bounty programs and how over time those continue to evolve. I know different companies are doing those, but yeah, it is interesting in the crypto world, because when there's so much, or can be so much money online, when one of these bugs, or even one of the bugs that you found, I. What is the appropriate route to kind of highlight it? It is kind of a hard choice whether it's to just put it in the public initially or just let the teams know so they can patch it super quick.
00:25:23.360 - 00:25:45.646, Speaker A: There is an unknown rule here. Ideally you have to give 90 days and inform the affected people before you announce something. The problem with my attacks there was, it was applied everywhere. I couldn't control where this is actually can be exploited eventually. Imagine 50 libraries being affected. How many people are using these libraries? Might be thousands and many. I mean thousands of.
00:25:45.646 - 00:26:31.582, Speaker A: I don't know. No, it might be like definitely thousands, but I would say, I mean, guessing from the stars on the GitHub and how many references they get, it would definitely be thousands. And then where do you go, right? I mean, you will lose all of your time just by going and reporting to different people. Hey, you're using a potentially like vulnerable algorithm and all of this open source makes sense. You know, from the recent example with the fandom wallet, which, it wasn't its fault, right, that this thing happened. It was another wallet slope that probably, according to what we know, there was like a logging service that was sending the password for free. And now what's happening, right? People are sending and are using the credentials, the mnemonics, from one wallet to the other.
00:26:31.582 - 00:27:03.464, Speaker A: And then you can be vulnerable without you being vulnerable. And now it's very tricky. What do you do here? You have to change the way that the wallets are interacting with each other. Definitely open sourcing works. Sometimes it can be, I don't know, sometimes we're going faster. And if you see non maintainable open source projects, it might be a bad thing to have it open sourced because I mean, there is no someone who can actually find the bugs from the, from the team that created the software and then the hackers. For them, it's a magnet.
00:27:03.464 - 00:27:27.320, Speaker A: They can go there. This is not maintained for like two years now. People are using it and now the open sourcing is not like a feature anymore, it's the opposite. So I think to have like a good open sourcing project with good maintenance and people actually being on top of this is probably the best strategy at the moment. Non maintained open source might be, might have the opposite effect.
00:27:27.480 - 00:27:49.580, Speaker B: Yeah, it does make sense. It's interesting because now even with different communities, they kind of have different EO perspectives on whether everything should be open source or if some things should be closed source. So it's kind of interesting on the community side how things are starting to unfold.
00:27:50.510 - 00:28:45.410, Speaker A: That's another good question, right? I mean, with the fandom case, we realize fandom is close source, right? Nobody knew what happened there. And then there was always a question, what is, what if it's an internal issue? So close source has this problem. You cannot easily identify internal threats. And how common is the, like the internal threat? I don't know. When the money is on the table, I can tell you that there might be like employees who were fired by the company and then they don't have like the best of like relationship anymore and they can accidentally leak stuff. So is closed source like a means of protection? It might be and it might not be, in my opinion, after it gets mature enough, you are getting an advantage of having, especially for the primitives in crypto to have them open source. Because if you keep them close source, you will see the same problem that we've seen with the signature algorithms and base 64.
00:28:45.410 - 00:29:02.214, Speaker A: People are going to implement it differently. There is no standard anymore. You might have a bug, you will never notice. And I think for the primitives at least it should be open source. I don't know about concrete constructions. I agree. Sometimes it might also be an ip of the company.
00:29:02.214 - 00:29:52.606, Speaker A: For example, Starquer is doing the proverb being secret for them and nobody knows how it works. By the way, at Facebook we were probably the first company, the first like team who created a prover for starks, right? Like the Winterfell prover for Stark, zero knowledge proofs. It's like it was under my umbrella at Facebook. And it's the guy that I told you who left Facebook and went to a competitor now, right? There was a two of us and a few others like at Facebook, all of them great brains, great minds that we had, open source prover. Nobody found a bug until now. But at least we also tested the closed source implementation of someone else, right? Does it really work or it's just rumors that it might work? So for me there was a benefit. I mean, working on the open source space, I personally learned a lot and I also fixed bugs because it was open source.
00:29:52.606 - 00:30:20.958, Speaker A: If it wasn't, I don't know what would happen in the future. And also people are coming and go, right? There is closed source. And then some of your developers, the first developers go away. How do you maintain this software? It might work for one or two years, but I don't think it's like I don't know why is to keep everything close source if it's going to provide some transparency, especially in the blockchain world and with your people going outside your company after two years.
00:30:21.054 - 00:30:37.214, Speaker B: Yeah, it's funny. You can look at the old GitHub repos and look at some of the code that hasn't been touched for a while, and then there's no comments in the code and you're like, how the hell did this it up like this? And how do I change it?
00:30:37.382 - 00:31:05.760, Speaker A: I will tell you for sure. We're all falling into the trap of when something is open source, maybe even because you're not exposed to the public. Even your documentation and comments might not be so rigorous because it's coming. I mean, it's staying internally. Right. You might have a presentation, you present it to the team, and this is like a deck somewhere in Google Docs or Google Slideshow, and then it's lost. Nobody remembers where this file is and it's not reflected on code.
00:31:05.760 - 00:31:16.980, Speaker A: There is no more contributors there. You lost this information. So, yeah, there are pros and cons, in my opinion. I would vote for open source, at least for primitives.
00:31:17.880 - 00:31:36.860, Speaker B: Maybe shifting slightly on like, the cryptography side and taking all the learnings from Facebook and working with all the brilliant people that you have. What interesting kind of applications are you now kind of taking from those learnings into SWE and mist and labs?
00:31:37.480 - 00:31:58.792, Speaker A: Great question. First, one of the things that I felt like, super proud that I created at Facebook was we found a way with some, like the CTO and some other people, again, like great brainstor, to solve the problem of when you're losing your key, what do you do with your assets?
00:31:58.856 - 00:31:59.848, Speaker B: It's a very big problem.
00:31:59.944 - 00:32:25.984, Speaker A: It's a very big problem. Right. I mean, if you search about our protocol, it's called kelp, like this plant in the sea. Right, the thing. Yeah, it's called key loss protection. And it's the fact that we found a way, using an atomic swap plus a fraud proof way when you're losing your key to actually claim that you lost your key. And eventually you're getting back all of your assets if nobody challenges you.
00:32:26.072 - 00:32:28.160, Speaker B: Interesting. So it's kind of like password reset.
00:32:28.240 - 00:33:10.602, Speaker A: Yeah, it's very similar to password reset. And this one actually made me do some extra, like survey search on what are the algorithms involved in this particular situation? People are going to pass away. People need to have wheels to transfer these assets to their families and all of this stuff, you need this, this type of, especially if eventually crypto is considered security. And there are, like, regulations. If you cannot transfer your assets, then why? It's equivalent to real, like fiat money there you have the option to transfer them to your family. Now you're dead and you cannot do anything, right? Yeah, exactly. So I think we should work on these kind of like, protocols.
00:33:10.602 - 00:34:05.364, Speaker A: And I'm telling you, there is like a path on the cryptography side where for this one, you didn't need to have very deep knowledge of cryptography. You need to be able to create a puzzle of existing primitives and actually build something that is solving the problem. So I love this idea, and I think we're going to do a lot of good work on providing agility on the crypto stuff. So in sue, for example, now we can even verify Ethereum signatures inside sui, even if we're not using the algorithm of Ethereum. Right. Why do we need this? Because there is a way, and obviously we hope the environment will be in a state where there will be some dominant blockchains, but you will need some interaction between them with bridges and everything. You know how bridges are actually affected lately with all of these attacks, you need to do it properly.
00:34:05.364 - 00:34:46.974, Speaker A: And what we're trying to do now is let's put the base of, like, the primitives required to have inside the core protocol bridging capabilities without necessarily having third parties implementing everything. You need third parties for the bridging, but you need to help them to do it correctly. And then we decide to have this crypto agility, as we call it, and we're going to add more algorithms down the road. And I realized it from Facebook when we had, like, some partners that they were familiar with the old algorithms and they had hsms. Imagine your hsms is hardware, secure modules. There is a bank that has an HSM which is like five years old. It doesn't have support for the modern algorithm.
00:34:46.974 - 00:35:14.872, Speaker A: What do you do? Do you exclude them from a potential client? The other thing is, okay, let's support this algorithm as well. It's not broken. And now you have two algorithms that people can choose the key that they want to create. And there is a benefit here. There is multiparty computations on the old algorithm because it's more mature and people are using it for ages now. And there is a modern algorithm for which people are building MPC now, and it might take two years to come. What do you do? Do you exclude MPC? Right.
00:35:14.872 - 00:35:30.820, Speaker A: So for me, it was a precious lesson at Facebook that you have to deal with Antar three, you have to deal with partners that are not so technical, they are using more conventional technology. Let's put them on the game.
00:35:33.920 - 00:36:12.710, Speaker B: Maybe to unpack it a little bit more. I would love to learn more about kelp. I think that's super interesting how you're doing that for the password, the like private key management recovery. Because I really do think ultimately that is like one of the biggest design and user experience challenges is if you put private keys into the hands of like the average day person, how does that ultimately? And it gets lost or just general private key management? I think that's a hard challenge. And so super interested to learn more.
00:36:13.770 - 00:36:40.536, Speaker A: Yes. Let's go step by step. Right. One is key management, the other is find ways to recover your key. If there is a problem for key management at the moment, the community, if we're going to self sovereignty, like protocols, you own the key, it's not owned by a custodian. You have to define some protocols to protect you by your own mistakes. We all lost our passwords in the past and we're the familiar with, hey, I lost my password.
00:36:40.536 - 00:36:58.552, Speaker A: I forgot my password with an email. I know how to get it. So the strongest password you want is the password for your Gmail. And then you're good, you're going to restore everything. But now we're getting in a situation where this is not an option. Right. If you don't want to put your keys on a custodian, if you don't trust them.
00:36:58.552 - 00:37:34.118, Speaker A: There are cases where people, where some of the exchanges got insolvent and actually have done some like attacks on the solvency part. I will explain later. People have to be familiar with mnemonics and there are some good protocols right now that they either use from the phone, for example, the enclave that iPhones and modern phones have. So you don't even need to. You can remember the mnemonic, but in fact there are new protocols that you don't even need. You don't even need the key. You're putting your key in your iPhone and then there is another protocol that has some of your shares in different services.
00:37:34.118 - 00:37:46.942, Speaker A: Like the custodian has one part of your key, so it's not a fully custodial now, right? You can do NPC and now you can have two out of three. And this is one way to actually protect your keys in cases we don't trust yourself.
00:37:47.046 - 00:38:06.906, Speaker B: Yeah, I know a lot of the custodian, like semi custodians, right? This type of professional, like kind of asset managers to kind of bifurcate the key or separate it into multiple components. It is an interesting point of take, but it is kind of a lengthy process to set up.
00:38:07.018 - 00:38:31.656, Speaker A: Yeah. The problem here is you have to take action before the event happens. Right? That's the thing. And what we solved here with kelp is, okay, let's assume people don't have all of this functionality or for some reason, the company that supported this, I don't know, dissolved or. There is no. There is no more like, for the modern algorithms, there is no support for these NPC protocols. What do you do here? And then the kelt protocol works as follows.
00:38:31.656 - 00:38:57.080, Speaker A: I'll try to be a bit deeper here, but not as deep that someone who is not like a cryptographer can fail to understand. So, with kelp, what's happening is, what is the information that the person who lost the key knows first than anyone else? I'm asking you now, what is the thing that you know first than anyone else in the space? Like.
00:38:59.700 - 00:39:00.760, Speaker B: Decoration?
00:39:01.500 - 00:39:19.770, Speaker A: The fact that you lost your key. Right? I mean, you. You will learn one day. You're going to search your. I don't know, your desk. Where is my key? I lost my mnemonic, right? I had it written here or something. What do you do? So maybe because you are the first one, you can do the following.
00:39:19.770 - 00:39:48.136, Speaker A: So you can actually send the message to the network, to the blockchain that I lost my key, but because there is erase conditions and people will see for which address you are referring, I will steal it. Right? And I will say, no, no, no, I lost this key to avoid this. You're hiding it. You're putting it into a has with some randomness. So it's a commitment. And you are sending to the network the transaction that says someone lost the key. You're paying a small fee for this.
00:39:48.136 - 00:40:25.122, Speaker A: Like, let's assume it's $10 or something. And then after you see this transaction going on chain, you are 100% sure that nobody can overrun you now. I mean, they cannot surpass you. They cannot just grab your transaction outside and put their own transaction in. You reveal for which address this was, and now you're 100% sure you were the first who said, okay, I lost my key, and I want to be refunded in this address in a different address because I lost this key for this particular address. Then you give a period, like a fraud, proof that people can challenge you. If you were faking like that, you lost your key.
00:40:25.122 - 00:40:58.228, Speaker A: I can, and it was my key. And you try to impersonate me, I will say, no, no, no, I didn't lose my key. I just signed one transaction, and you all see as an evidence that I have the key. And then this guy, when they revealed for which address this was, they might also add the fee there. Like, for example, 10% of all of the assets that you have. And if you are faking it and I submit a transaction to challenge you, I will get this on my account. So there is no incentive for the attacker in the long run to actually fake, like, addresses that lost their keys.
00:40:58.228 - 00:41:25.056, Speaker A: And this is the way to actually get your money back. You have to wait. This period might be, like, long enough, it might be one year or two years, but I personally asked a lot of people, do you care if it's one year? I mean, you lost your key anyway, right? And then. No, no, no, it's okay. Even if it's three years, it's like an investment. I just put it on a vault and I'm waiting. But at least this is a way to do it, right? And imagine on court orders or where people pass away and there is a will.
00:41:25.056 - 00:41:39.270, Speaker A: Yes, the family can wait for a while, but eventually they will get their money. And this is like the way to do post event solution for the problem, right? I didn't have to prepare anything at the beginning. So this is a solution and there are a few extensions.
00:41:40.250 - 00:41:56.086, Speaker B: No, it's definitely needed in this space. I think being able to recover assets is an extremely important problem. It's cool that you've figured out a way to kind of break it apart and make it into kinderg of a usable product.
00:41:56.278 - 00:42:07.606, Speaker A: Yeah, let's see. It's still early in the space, but we feel that we have one of the solutions at work at the moment without taking actions up priority. That's the main benefit.
00:42:07.678 - 00:42:31.236, Speaker B: Yeah, no, it's super cool, maybe shifting slightly. I'm also super interested in the multiparty competition and would love to kind of hear the kind of you talk a little bit more about that and maybe even on a higher level for the majority of people. Just explain what multiparty computation is.
00:42:31.388 - 00:43:34.510, Speaker A: Yeah. So let's first explain why do we need them, right? The previous example that we referred to was, how can I split my key into three different places? And then two out of three can actually construct the key, and then you don't want the other parties to learn about your share of the key. Your secret information there is like you're splitting your key in three different places, and then you want them to run an algorithm without learning my personal share and the other people share. And then we can create like this two out of three algorithm that creates constructs the final key, this algorithm that actually gives you these operations without learning the secrets of all of the participants, is the multiparty computation. This is one type of multiparty computation. So you're running a function, there are some inputs, public inputs, there are also some secret inputs, and the outputs and the function can output the result, the final result, without learning all of the individual secrets. That's MPC.
00:43:34.510 - 00:44:11.402, Speaker A: There are many algorithms to do that. There are particular algorithms, like concrete algorithms, algorithms for problems like splitting a secret. And there is generic MPC where you're using literally a circuit. These are more expensive to implement, like literally writing the circuit part of the program that you want to solve any logic. And this outputs after a few interactions between the parties, outputs the expected result. We need it for sharing a secret. We also needed to have a random beacon.
00:44:11.402 - 00:44:59.350, Speaker A: So imagine we have multiple people who want to provide some entropy to a particular outcome, which be like the accumulated entropy of everyone, but you don't want to learn the private keys of all of these individuals. And we know that the algorithm is deterministic. So if nobody knows the secrets, even seven out of ten, if no, like BFT, like byzantine fault tolerance agreement, they don't collude between themselves, you know? Exactly. Without learning the secret, the seven out of ten can always produce some randomness. So this is one extra way to do MPC. And I think these are the most common ways of using MPC in our blockchains at the moment. And there is also privacy preserving.
00:44:59.350 - 00:45:21.720, Speaker A: One of the things is maybe someone wants to run in the future. I don't know, some DeFi protocols where you don't want even to know who is betting on what, who is the backend, lay all of the prices so you cannot overrun them or you cannot play games there. And maybe you can use some NPC or some secrecy there to hide all of this information.
00:45:22.020 - 00:45:43.608, Speaker B: That makes sense, I think. Yeah, they're definitely an interesting kind of thing to explore, and definitely the benefits are. It's interesting just to see all the different cryptography stuff. And when a lot of this stuff is much older, but interesting being applied.
00:45:43.664 - 00:46:11.284, Speaker A: To blockchain, the idea is older. Some concrete protocols are really new. It might be two or three years old, especially for key setting on new algorithms like the DSA. Some other like random beacons are still new, I would say, in the sense that they are used for, again, a handful of years. Is it old? No, it's not super old, right. And also they're not massively used. They are used, but it's not like everyone is using them.
00:46:11.284 - 00:46:41.660, Speaker A: And there, because it's blockchain, you need optimizations, right? You need to be fast. Imagine you're putting a gambling service into the blockchain. You need to run a lottery. You cannot wait for one day until you get like an output, right? I mean, you have to do it fast. And NPC interactions. Plus, you know, there are a few NPC protocols that require some ceremonies at the very beginning. Well, you need to assume that some people are not colluding in the first place.
00:46:41.660 - 00:46:55.790, Speaker A: This is where cryptography is going in and says, okay, I will remove ceremonies, I will make it faster. I will use a new primitive that is post quantum secure. There are many avenues to actually improve the computation cost and efficiency.
00:46:56.090 - 00:47:37.988, Speaker B: Yeah, maybe to switch slightly. I would love to talk a little bit more, maybe on optimistic roll ups or just fraud proofs and then zero knowledge proofs. Because I think now, I mean, I know in large part the rest of the blockchain industry is kind of going to the optimistic or zero knowledge flavor of like roll ups, having the background that you do what is kind of your, I mean, maybe kind of explain the tech as a whole and then kind of your thoughts on, like, them being applied to roll ups first, I.
00:47:38.004 - 00:48:25.962, Speaker A: Would say that all of these techniques, especially optimistic roll ups, and then zero knowledge proofs, are used to actually compress the transaction size that you're putting on the network and then reduce, especially with optimistic proofs, reduced execution costs. You don't need to run everything, only if there is some challenge. I'm putting aside the privacy part that zero knowledge proof is offering. This is only for compression and increase the throughput of the blockchain. So some of the former blockchains, including Ethereum, and I would say some even modern, like blockchains, they're slow, right, until they go into a state where you have like thousands of transactions per second. You need an l two. These l two s are, as you said, they're using two types of.
00:48:25.962 - 00:49:11.536, Speaker A: There are four types of technologies, by the way. There is like the zero knowledge proofs, as we know, but they're like two flavors. There is also like fraud proves, but there is also like multiple flavors there. But the idea between the two main categories is on zero knowledge proofs, you're actually computing everything off chain. And then using some cryptography, you're providing a mathematical proof that you actually did what you said, and this proof goes on chain. And then there is fraud proofs where you're saying, I will send something. And if nobody complains, in one week you don't execute anything, right? I'm just saying, for example, this transaction is valid, so you save some computation costs from the validators.
00:49:11.536 - 00:49:50.598, Speaker A: If nobody complains, then I got my money back. So these are the two major technologies. One of them requires a zero knowledge proof to have a faster prover. And this is where cryptography is working. Can we make it faster? Can we parallelize it? And the other of fraud proofs, it's requiring when you have a fraud proof first to be fast enough. If someone challenges you, this is fast enough. And also, can we play with the timing? Can we play with who can actually report about the fraud proof? Can we create fraud proofs for all of the vms? Not only like EvM, like for ethereum, can you do for move, can you use for a different language? So you have to work on all of this stuff.
00:49:50.598 - 00:50:43.562, Speaker A: So one is a theory, and then you have to apply it to create on top of vms. And this is where people are usually paying attention and you need engineers to actually perform this stuff. So for Sui in particular, though, sui is a fast network, right? Do you necessarily need l two s? Well, the future will show, but at the same time, if you can process like a huge number of transactions, you don't necessarily need at the same level, l two s as it's required on slowness works. And does this mean that we are like against zero knowledge proof? Of course we're not against, right. We, I mean, we want like technology to be built on top of Sui. Something that we have at the moment is very recently we had, for example, bulletproofs for arrange proofs, but this is not for execution. Like benefit is to have eventually some privacy on the blockchain.
00:50:43.562 - 00:51:32.772, Speaker A: This is also a type of zero knowledge proof, like hiding the amount that are transferred between parties. We also have, like, regarding the optimistic roll ups and all of this stuff, Sui has a particular difference between all these and all of the other blockchains. We have a fast path. We have like a way to avoid full consensus. You know that, right? And this one can actually give us some parallelization that nobody, well, other protocols have to do different things than us to achieve, but we believe we can do better because it's linear, scalable, and we're not reducing the security level. All of the validators, again are participating on every transaction or like two f one. To get advantage of this, you can use special types of fraud proofs.
00:51:32.772 - 00:52:13.530, Speaker A: For example, I can tell you an example of lotteries. How can you do a lottery now without having full consensus? We all buy tickets for the lottery, and this is going through the fast path, the parallel path, and only at the very end you can have your ticket, which is an NFT with us, and say, I won the lottery. And if nobody challenges you in one week, you won the lottery. So we can actually create protocol based fraud proofs in sue very, very easily because we're object centric. We can actually have creating objects, as many as we can, and then eventually, only at the very end, we can actually have a type of fraud proof to convince the smart contract that I was the winner.
00:52:14.350 - 00:52:15.398, Speaker B: Interesting.
00:52:15.574 - 00:52:25.606, Speaker A: So, yeah, there are many ways. In our case, another benefit of fraud proofs is to not go through full consensus, something that doesn't exist on other protocols.
00:52:25.678 - 00:52:37.330, Speaker B: Yeah, I do think that's a very unique property that Sui has enabled. I'm excited to see how that engineers ultimately take advantage of it.
00:52:38.750 - 00:53:11.492, Speaker A: Yeah. In general, something that I realized, by the way, is we're having Ethereum engineers that are coming to sue, and obviously they don't have in their mindset the different way of object centric blockchain. And they're trying to put everything under a contract, and we're trying to provide some recommendations for patterns. We're not authenticate. People can do whatever they want. They can do the Ethereum way, but if they are smart enough, they can actually parallelize the transactions, reducing the cost and take advantage of this fast avenue that we are offering to them. We need to educate people.
00:53:11.492 - 00:53:11.932, Speaker A: Right.
00:53:11.996 - 00:53:21.780, Speaker B: Yeah, I agree. I think kind of the blockchain ecosystem more broadly is starting to wake up to this parallelization.
00:53:21.940 - 00:53:22.720, Speaker A: Yeah.
00:53:23.300 - 00:53:36.902, Speaker B: And just how, how many benefits there actually are. And I'm super excited by that. Swe just tries to maximize that to its full potential.
00:53:37.086 - 00:53:55.362, Speaker A: Exactly. And I would say that all of the other techniques that you see on the other blockchains can be applied to Sui. That's why I'm saying we're not against zero knowledge proofs. And Telltu's on top of Sui. Right. We're just offering some parallelization vertical from the core protocol by itself. And this is different from what you've seen in the past in other protocols.
00:53:55.466 - 00:54:07.586, Speaker B: It's not explicitly required because it's already high throughput change, but it could still potentially be added in the future. I mean, it's permissionless. So ultimately, if someone wanted to build it, they could.
00:54:07.738 - 00:54:08.418, Speaker A: Exactly.
00:54:08.514 - 00:54:40.326, Speaker B: Nice. Very cool. I feel like we've just started to kind of scratch the surface, a lot of your knowledge, but maybe kind of like transitioning again to, like, what would your kind of be, like, your words of wisdom or advice that are people that are looking to get into, like, the sweet and the missin ecosystem and then maybe even further kind of. Yeah, maybe just start with there.
00:54:40.438 - 00:55:09.352, Speaker A: Yeah. So something that I personally try to convince all of the marketing team and even our engineers is, let's put examples out there with Sui and show the advantage of building something with Sui or with another, like blockchain. I think we learned from, from the past that people sometimes are not checking the documentation and they work by example. We know this from stack overflow and everything. People are lazy. People are lazy. This is what it is.
00:55:09.352 - 00:55:48.778, Speaker A: And then I'm talking to Damir, one of our developers, who, who is working on very cool dapps, like, decentralized applications. Let's port some of the most interesting protocols, smart contracts we see out there to sue and then have one by one comparison with them. And these will actually help them in learning SUi without reading the documentation, nothing. So you can see, for example, I personally, I'm a cryptographer, right? I'm not decentralized application developer, but I like building cool applications. And then I created a Twitter version in this. Did you show that? Yeah, yeah. Did you see that? Yeah.
00:55:48.778 - 00:56:07.716, Speaker A: The thing is, I did it with 50 lines of code, right? And then I said, oh, my God. In Sui, everything is an NFT. What is it to it? It's an NFT. And then I say, let's create an example. I called it chat move. And then we have a chat version of everything, right? Say that this is a tweet. This is a WhatsApp message.
00:56:07.716 - 00:56:57.034, Speaker A: This is like a signal message. You can have a public key as NFT. And for all of these things, let's create examples. This is how we're going to have developers coming from the object oriented community and from Ethereum on the other side to see, oh, these are the differences between Sui and Ethereum. So we're working under this mindset. I know people are liking this. A lot of, I've seen cases where some are starting just from copying, pasting on the examples, and they might not even look at the documentation and they create applications, which is super cool, right? If you see it, I mean, you can start with a Twitter and you can just say, oh, how about not having a Twitter? I will change the minimum amount of characters from, I don't know, the number that I had there, 512, to a big post that is now Facebook.
00:56:57.034 - 00:57:23.038, Speaker A: And it's now, I don't know, thousands of likes and now have a medium post, and now you have like Facebook. And this is how people are starting to innovate on top of Sree. So we believe this will help along with all of the other like common like techniques you are doing, like hackathons and obviously going to conferences. We're publishing a lot here. Like innovative, like ideas build by example will be like a motto of Sri. I think it will work a lot.
00:57:23.094 - 00:57:25.724, Speaker B: I like that a lot of. I think that's.
00:57:25.772 - 00:57:29.520, Speaker A: I want you to write a smart contract we can do together if you want.
00:57:31.540 - 00:57:45.668, Speaker B: Very cool. No, I think the cryptography rabbit hole goes very deep and I really do feel like we're just kind of scratching the surface. Is there anything in particular that you want to touch upon that we haven't talked about?
00:57:45.764 - 00:58:26.338, Speaker A: Yeah, there is something really interesting that we are doing at the moment. If you take our GitHub now, there are many prs that you will see offering primitives for cryptography. We're not going to be like a chain where we expect from third parties to build everything from scratch. As I told you, we're porting stuff and we're actually innovating by building new stuff. But at the same time, you can see bulletproofs now being applied in our, like you have range proof in sue right now. You can see like PlS compression, you can see verification of Ethereum smart contracts. You will see elliptic curve primitives that you can build a VRF eventually in Sri.
00:58:26.338 - 00:58:54.454, Speaker A: So we are trying to put the foundation of the most important primitives that someone can use to build cool cryptography on the blockchain. And this will include, I don't know API from doing KYC credentials, anonymous credentials. You don't need to know how it works. Right. We're going to give you an example. That's the benefit here. We're not going to write the full application.
00:58:54.454 - 00:59:32.294, Speaker A: We're not a company who is actually, at the moment at least, monetizes from applications on top of C. We're building the L1, like a good foundation for L1. But because I personally felt it in my blood when I was trying to do some more complex cryptography on Ethereum, I, I didn't even know how expensive my implementation would be in solidity and all of this. And I said, oh, guys, we have to provide primitives, all of the primitives that I can personally imagine as a cryptographer. And we have a huge team actually giving us inputs and partners. We want this particular primitive. If it's something that it's not even in our roadmap we will consider it.
00:59:32.294 - 01:00:05.070, Speaker A: So you will see in sue many, many primitives that people couldn't even imagine are going to be supported by the core protocol. So this is something we believe a lot, and because some of them will take advantage of, as I told you before, changing slightly like the topic here, a public key can be an NFT. On Sui, it's an NFT. It's something that you own. Right. And it's a public key. Now you can actually have all of the operations over a public key being already supported by the standard, like library, the API.
01:00:05.070 - 01:00:25.850, Speaker A: I think this will give an extra bit of even researchers or some partners to build cryptographic protocols faster than in other protocols, than in other, like, blockchains. I totally, I see myself actually struggling to do in some other blockchains, and I think I will change that with Swift. Yeah.
01:00:27.960 - 01:01:15.650, Speaker B: No, there's a lot of kind of avenues that we could continue down, but I think you've left the guests a lot to ponder. And I think ultimately what SWE and Mist and labs is building is very unique. I'm very excited for the parallel execution, all the things that you're doing on the cryptography front, building those base of primitives and allowing the high throughput so you don't have to kind of compromise on the user experience from either sharding or the l two standpoint. So, yeah, just very excited for what you're building and excited to see you guys go live, hopefully eventually with Mainnet, and then start seeing those users flowing.
01:01:15.730 - 01:01:39.286, Speaker A: Yeah, thanks a bunch for this. We want the support from the community. Right. And I personally try to, to put a lot of people into guys, go and compare us. We are offering something we believe we're better than this. Go and actually do your own digging. And I think you will see in the next few months even publications happening on top of Sui, comparing us with different protocols.
01:01:39.286 - 01:01:44.846, Speaker A: And I hope I will see the cryptography part of sue to be at the top of the matrices.
01:01:45.038 - 01:01:59.188, Speaker B: Excellent. Thank you again, it's been a wonderful conversation and, yeah, appreciate your time. Three part series with everybody. It's been a journey.
01:01:59.364 - 01:02:08.884, Speaker A: Yeah. Thanks so much for having us. And I really enjoyed it as well. If you ever want to go even deeper, deeper into, like, super mathematics stuff.
01:02:08.932 - 01:02:10.124, Speaker B: And we can do a part two.
01:02:10.172 - 01:02:14.300, Speaker A: Yeah, let's do that. I'm super happy to accept the challenge.
01:02:14.420 - 01:02:15.400, Speaker B: Let's do it.
01:02:15.780 - 01:02:16.260, Speaker A: Awesome.
01:02:16.300 - 01:02:20.188, Speaker B: Well, thank you again. No, it's been a pleasure. Thank you.
01:02:20.244 - 01:02:21.220, Speaker A: Thanks a lot. Yeah.
