00:00:00.560 - 00:00:49.150, Speaker A: The way I really frame it to myself these days, which I think is like the most accurate framing, is the ability to send a packet, which is basically computer a does some computation, generates a payload, payload gets sent. Computer B ingests the payload or interprets it in some manner. So you have compute, payload, compute. The goal was really just to build that core primitive that allows that an end experience for the consumer should be sign a single transaction, have the entire flow get executed, including the results. And ideally that you can eventually abstract away even some of those pieces. You can imagine a wallet, a consumer wallet that you only have USDC in and you look at whatever, 15 farms across eight different chains, and you can just arbitrarily hop between them without needing to know the underlying chain, the underlying gas asset, any of the infrastructure.
00:00:52.890 - 00:01:19.420, Speaker B: Well, super excited for today's podcast. Today I have with me Brian, co founder and CEO of Layer Zero, and Eric Tornberg with me as well. So I think this is going to be a super interesting podcast. I would love to maybe just start off a little bit with who you are, Brian, jumping into a little bit about your background and then how you got involved in the crypto scene.
00:01:19.880 - 00:01:42.622, Speaker A: Yep, sure. Absolutely. Okay, so, as you know, background is like a little bit windy, a little bit, a little bit eclectic. I'll try to give kind of a condensed version of. But grew up in a town of 900 people in rural New Hampshire. So just like set the scene as in, like, literally nothing to do in the middle of nowhere. I had to drive an hour to school on a bus each way.
00:01:42.622 - 00:02:09.070, Speaker A: Like, that was the environment that I was growing up in. I got a computer when I was five years old. Just like, fell in love with it. Originally I was just playing video games obsessively, but eventually found programming. But I was just glued to my computer for most of my early life. Went to school for computer science. Ended up dropping out after three years to play poker professionally, which was like a pretty controversial decision inside my family.
00:02:09.070 - 00:02:38.088, Speaker A: But did that, did eight years, 80 countries during that time. Just kind of took my laptop and went all over the world. Played the highest stakes you could possibly play, played every major tournament you could play. Moved back to the states, Austin, Texas in 2010. And then April 15, 2011, Black Friday happens and online poker gets banned in the US. Well, I'm out of a job at that point. I hadn't written code in eight years.
00:02:38.088 - 00:03:12.836, Speaker A: I really didn't know what I wanted to do. I ended up starting a company with two of my closest friends from university, who are actually the two co founders of Layer Zero, so we'll kind of get there. But started a company, ended up getting acquired two years later. So whole industry kind of rolled up, and that acquisition happened, and again, didn't really know what I wanted to do with my life. Had just had my first kid. Ended up taking him on twelve months, twelve countries when he was one and a half. Realized three months in, and I couldn't spend twelve months without doing anything.
00:03:12.836 - 00:03:32.880, Speaker A: So I just started writing code for fun. I just see in DeepMind's Atari agent demo, and I was like, okay, reinforcement learning. At the time, it was pure blue skies. Just really unbelievable. And I was like, this seems really amazing. So I started doing some predictive modeling around baseball. Actually hated the sport, but had this really amazing data set.
00:03:32.880 - 00:03:59.104, Speaker A: That's what I'll do her out with that. Showed it to a friend who said, okay, I know this group of PhD, MIT PhDs who had basically done very similar research when they were at school. You know, you have to show it to them. I showed it to them and they said, this is like the coolest thing in baseball we've ever seen. We have to put you on the phone with somebody. I was like, sure, it sounds great. The person on that phone call was Billy Bean.
00:03:59.104 - 00:04:25.312, Speaker A: So, founder of Moneyball, GM of the Oakland days, ended up with them selling the baseball models and doing some more modeling work, but selling it to a bunch of the pro baseball teams after that. So I've been in crypto since 2013 ish. This was 2016 was rolling around. Got very, very high conviction, strictly on bitcoin. I was bitcoin maxi at the time. Put a large chunk of my net worth into bitcoin. Preston.
00:04:25.336 - 00:04:29.840, Speaker B: I think we all have that maxi stage at some point, or not 100%.
00:04:29.960 - 00:05:00.146, Speaker A: That was pre. Really a lot of stuff happening on Ethereum, but, like, I did that, and then, of course, like, six months later, you know, I was playing with everything, so it didn't last very long. But, like, that was. That was the impetus. And I got connected to a mutual friend through the first engineer out of Andreessen Horowitz, a couple guys at Google, comma. And we got together and built a company kind of early, early stages of end of 2016. Early 2017, more like kind of like.
00:05:00.146 - 00:05:37.130, Speaker A: Kind of like coinless, like democratization of just, like, broad access with what this investment class would look like. That company pivoted twice and got acquired two years later. Took a year to do independent research with AI on AI research. Ended up showing it to Noam Brown, and he was like, this is awesome. You have to come publish this with us. Ryan, Caleb and I went and published that with Noam Brown through Facebook. AI research subsequently got cited by DeepMind, which I always mention as a fun full circle for a college dropout from inspiration to them citing your work.
00:05:37.130 - 00:06:20.760, Speaker A: So that was really cool. And then around that time was just like, things were actually happening on chain, like, really interesting things. So then we started writing contracts for external groups. We got asked by a hedge fund to write contracts for automatic trading between the first on chain. Dexs realized that was a really interesting space, and nobody knew what they were doing. In our backgrounds, we had spent a bunch of time in pure optimization, and so then we started doing arb and triangle arb hyper competitively, where it was just like you had to be the fastest. So we're, like, stripping apart geth for custom node discovery, like, doing all of these things just to try to propagate messages faster and just, like, have sort of, like, closer or more efficient access to mempool.
00:06:20.760 - 00:06:41.380, Speaker A: And then eventually, one day, we just started seeing. We started seeing transactions pop up, whereas, like, perfectly placed transactions with zero gas paid. Like, if they would have just paid gas to themselves, like, I wouldn't have noticed for a very long time. They would have completely crushed me. But we're like, oh. Like, the miners are literally colluding against us. Like, this is not a game we can win at.
00:06:41.380 - 00:07:08.276, Speaker A: And, like, eventually, you know, flashbots comes in and commoditizes this entire process. But this was pretty that. So this was like, just miners strictly colluding, and we're like, okay, well, time to do something else. And then, you know, through. Through just kind of like, playing around, really, and messing with some of the emerging stuff. We settled on, on wanting to solve this problem largely for ourselves, and then that became layer zero. So I said I'd keep it short.
00:07:08.276 - 00:07:11.220, Speaker A: That was not very short, but that is the windy way that we got here.
00:07:11.340 - 00:07:40.020, Speaker B: Perfect. Perfect. No, I appreciate all the color. I always find it very fascinating. Just like, I think because crypto is such a deep rabbit hole, whether you're technical, whether you're coming from the traditional tradfi world, there's so many different angles to approach it, and it all leads itself into crypto. Super fascinating story. I want to make this podcast a little bit more technical than you have in the past.
00:07:40.020 - 00:08:16.300, Speaker B: Just given that I think we can add a little bit more color here. I would love to dive right into it. I think on a high level, you've mentioned in the past maybe a North Star for layer zero itself is connecting pretty much all contracts on all chains and kind of creating that Robin Hood like experience where you're abstracting the underlying infrastructure. Could you talk, I mean, on a high level, just to like, that North Star and the vision. And then we can dive into, like, some of more of the technical details of how you do that.
00:08:16.460 - 00:08:51.096, Speaker A: Yeah. The way I really frame it to myself these days, which I think is like the most accurate framing is early Internet had a bunch of intranets that sit around. You have Stanford, you have DARPA, you have whatever you want to run computation somewhere. You have to literally take a disk, fly across the country and run out of their computing cluster there. Eventually, we build the Internet stack. All the technology enables that. And now you have broad Internet and you can connect everything and sort of like the fundamental unit within that is like this packet, right? The ability to send a packet, which is basically computer a does some computation, generates a payload.
00:08:51.096 - 00:09:28.382, Speaker A: Payload gets sent. Computer B ingests the payload or interprets it in some manner. So you have compute payload. Compute layer zero, specifically is arbitrary contract invocation with a bytes array. So it's literally invoke a contract here, some piece of compute, generate a bytes array or payload, interpret the payload on the other side. So a packet in the beginning seems like incredibly trivial and dumb in terms of what you can do with it, but now it enables us talking and streaming and literally everything that we do. And so the goal was really just to build that core primitive that allows that.
00:09:28.382 - 00:10:34.800, Speaker A: And then you have all these things that come into it in terms of like, okay, great, you have this, but now you're going from, like, I don't know, eth to Solana in like, oh, great, like the prior, when I was using bridges, prior, the experience was like, sign eight transactions on Solana. Wait, switch your wallet to Ethereum wallet, go get eth somewhere. So, like, go to a centralized exchange, get eth in your wallet, claim the transaction, and then, like, maybe you get to see the result, right? And, like, it was very clear that we needed the ability to, like, abstract a gas array from the end user. So, like, if you're on Polygon and you're going to whatever avalanche, like, you don't need to have both matic and abax, right? You don't need to have both source and destination gas end experience for the consumer should be sign a single transaction, have the entire flow get executed, including the results. And ideally, you can eventually abstract away even some of those pieces. You can imagine a wallet, a consumer wallet that you only have USDC in and you look at whatever, 15 farms across, eight different chains, and you can just arbitrarily hop between them without needing to know the underlying chain, the underlying gas asset, any of the infrastructure.
00:10:36.300 - 00:11:36.542, Speaker B: Amazing. Yeah. I mean, a lot of it ultimately kind of boils down to the design experience that users have to kind of jump through. And as you were mentioning, I mean, today that process is, or previously, it was pretty cumbersome. By signing the multiple transactions, making sure you have gas on both sides, and being able. I think as much as I love the crypto industry, we've done, historically bad at abstracting these complexities, and so very excited about what you're doing and kind of handling some of these technical things in house so that they're not really face or customer facing, so to speak. So, on that note, I think the team that you have built with layer zero takes a much different approach to traditional bridging of axecs or even message passing.
00:11:36.542 - 00:11:46.370, Speaker B: Could you maybe just to start off, talk about other approaches in the past and how you have taken a different approach today?
00:11:46.820 - 00:12:20.320, Speaker A: Yeah, 100%. So when we started, there were a couple of forms, basically pretty centralized. So really the two forms were middle chains and like clients, those were like the prior. So, like, clients were kind of like IBC style system, where you say, hey, some group is basically going to pass a block header to the other chain. They're going to pass every single block header. So very computationally expensive in terms of like, writes to the chain, and so you're going to pass every block header. And then once you have that, you can just arbitrarily submit a transaction and verify that it's basically a valid transaction.
00:12:20.320 - 00:12:44.128, Speaker A: You can do the Merkel inclusion proof or whatever server loan inclusion proof you're going to do. This was fine when you're talking between cosmos chains. Tendermint extremely cheap. When you wanted to go to Ethereum, if you're going to write every transaction from Cosmos to Ethereum, you're going to spend $50 million a day or something, and you're going to fill up every single block. It's just completely infeasible to do. It was the first approach. It's a pretty good approach in general.
00:12:44.128 - 00:13:29.986, Speaker A: It's just not computationally efficient. The second approach was basically a middle chain, which was like, you're going to write a transaction on source chain. This chain in the middle is going to arbitrarily read and interpret whether it's a valid or invalid transaction, and then it is going to write a transaction out to the destination chain. The big problem with this and general problem messaging is the destination chain has no observability into the true state of the source chain. So that middle chain really, if it is ever small collection of nodes, can be anywhere from five to 21, is basically a state of the industry. If that is ever corrupted for any reason, it can arbitrarily write messages to every single application on every chain. So maximal damage inflicted everywhere.
00:13:29.986 - 00:13:44.642, Speaker A: And it's not even like there's a certain type of message. It can just make up whatever it wants in terms of, like, payload data. Like, hey, give me everything in your bridge, give me, you know, swap every pair in your decks and, you know, give me out the liquidity because don't worry, I definitely did it on the other side. Right.
00:13:44.746 - 00:13:47.428, Speaker B: Effectively creating a very large honey potential.
00:13:47.594 - 00:14:15.692, Speaker A: Yes. Yeah. You know, at some point, the largest honey pot the world has ever seen. In terms of that, you know, you're talking, you know, potentially hundreds of billions of dollars at scale. Our opinion in the beginning, as we're making layer zero, which actually has been like a pretty contentious point, we like, it is our opinion now that there is no system that you cannot get true trustlessness between messaging. So, like, that is, that alone is a very controversial opinion. And we've totally swung the pendulum.
00:14:15.692 - 00:14:45.464, Speaker A: When we started building layer zero, the intention was that basically from the application perspective, you can get this ability of trustlessness by adding your own keys. But from the user perspective, basically, you always have some trust assumption that sits in this act. Same when you use anything. There is no true generic trustlessness. Even though the term gets thrown around a lot. Those were the prior state of the world. I don't remember if you wanted me to dive into layers of approach, but happy to do that as well.
00:14:45.492 - 00:14:46.940, Speaker B: Well, please do.
00:14:47.400 - 00:15:05.920, Speaker A: Yeah. Okay, so layers are approach, really. When we built like we wanted, when we were building this, we didn't want to build it. Like, we were trying. Like, the inception of this was us trying to build a game between two chains. Like, BSC came out, got a lot of hype, and we're like, oh, like, that's interesting. There's an execution environment that's fast and cheap and, like, sits on the EVM.
00:15:05.920 - 00:15:42.474, Speaker A: And maybe we can do something interesting between, like, BSc and Ethereum. And we just started to build it, and then we were like, you literally need a centralized coordinator here that just, like, triggers events and, like, that sucks. Like, somebody has solved this and then nobody had solved it. And so, like, we started to build this. And the two things that, like, we really, really care about when we're building, like, the two guiding principles are basically, we're building a protocol, not a service. So we see a service as, like, you subscribe to us, you basically delegate your trust to us, and we provide the service. And if we get, I don't know, a government shutdown notice or anything happens to us, like, oh, service is done, we can't do it anymore.
00:15:42.474 - 00:16:10.146, Speaker A: Sorry, guys. And then you're out of luck, right? We're building a protocol like layer zero. If the entire layer zero team disappears from the face of the earth today, dies, whatever, layer zero will exist until the end of time, or Ethereum makes breaking changes. That was very fundamental to us. So every single contract is entirely immutable, totally open and permissionless from day one. Anybody, even if we stop doing everything we're doing, anybody can run oracles and relayers. Anybody, basically, like, the network, can bootstrap itself and exist.
00:16:10.146 - 00:16:46.660, Speaker A: So that was the first thing. And the second thing was basically, if we wanted to be maximally malicious, our only goal in life was to be adversarial to applications and try to rug everything. Every application should have a way to protect themselves, because at the time, bridging was being used in, like, very small niche use cases. But we knew very early on, like, if you want the uniswaps of the world, aaves of the world, et cetera, to adopt this and expose their 1020, $30 billion of TVL, there is no world. They're delegating that trust to a third party system. And so they will need to have a lever of control of securing that. The goal from these systems is like, there is some surface of risk right now.
00:16:46.660 - 00:17:36.094, Speaker A: Like you talk lending protocols, it's usually they have a multi sig, and the multisig defines risk parameters. And if they messed up those risk parameters very bad, like, a lot of things could go wrong, right? The goal, when moving over to a messaging architecture, is that you extend that surface as little as humanly possible. Ideally, it's the exact same surface of risk now controlling the sort of, like, second mechanism as well. Layer zero has a single endpoint on each chain. Any application can interact with that endpoint, and the endpoints can interact with any application. Now we deploy an endpoint on Ethereum. Any incoming message can now trigger and wrap any defi protocol, even if it's not built on layers or you want to come in from serum, you've done a swap there, you move money over, and you want to do a swap on uniswap v three.
00:17:36.094 - 00:17:55.434, Speaker A: No problem. You can make that entire pathway, expose that. Even a wallet or other app like aggregator or can wrap that pathway. You want to have an NFT that you move across chains, mutate the metadata, and then list on opensea. Fine, do it in one entire flow. So layer zero is these endpoints that live on each chain. Applications only think about send and receive.
00:17:55.434 - 00:18:30.860, Speaker A: So they send some, create some arbitrary bytes array that's being sent and interpret those bytes however they want on the other side. And then the message itself needs to get moved. Transaction happens on source chain, that data gets broken up into two components, which is basically the block header or receipt root and the transaction proof. Both get moved across chains by these two parties, oracles and relayers, that the applications define themselves get submitted a destination chain. And then you do the merkle inclusion walk. So basically the proof walks to the roots. It shows that these two things are matched, and then assuming that's valid, message is passed on to the application on the destination chain.
00:18:31.800 - 00:19:12.870, Speaker B: Very interesting. And I mean, maybe to wrap it back to what we were talking about earlier with how people, how you specifically in the Lazier team have taken this different approach is kind of exactly this like generalized message passage which allows you to effectively minimize these honey pots that the previously solutions kind of, in effect, kind of exacerbated to, like really not, not provoke. But there was definitely a lot of money that was potentially at stake where the generalized messaging passage minimizes that as much as possible.
00:19:13.220 - 00:19:58.910, Speaker A: Yeah, I think the real risk minimization in our framework comes from, rather than having one central authority with x nodes that basically decides everything in the network, you now have basically have risk charted. So you might have take some big prominent oracle and say they were going to pass every message. Maybe it costs $2 billion to break their security and you have $5 billion of economic gain. You can do like eventually one day maybe that will be broken. In this model, you have the ability to basically take that same construct but shard it across a bunch of relayers such that even if so, in the other system, like Oracle gets broken, everything is gone. In this system, Oracle gets broken and is colluding with relayer a. Only this very narrow shard of exactly, Oracle and relayer a are impacted.
00:19:58.910 - 00:20:27.668, Speaker A: So everybody using relayer b through z, everybody relaying their own transactions, anybody using any other oracle, completely unaffected. So you have the same core component, but now you give applications the ability to say, hey, I'm pancakeswap. I've moved cake over to an oft, now we're moving it across. There's x billion dollars worth of cake. We're going to run this relay ourselves. If you do that, if you run one of those components at the application level. So the Aave, multisig, whoever, right? Anybody who controls the surface of risk of some application, you run one of these components.
00:20:27.668 - 00:21:02.810, Speaker A: Even if 100% of other participants in the network are malicious, there's nothing anybody else can do. You have 100% absolute guarantee, so you cannot unilaterally do anything. So there is not risk of like, you've lost your control, something bad happened, and now you can rug everything. You can't unilaterally do anything, but you have veto rights on every single message that gets. And nothing goes through without your sort of signature. Like participation within the network, which is a very unique architecture, versus existing systems, which really are just like, here's a set of nodes. Like, trust those nodes with everything and just like, you know, they will be good actors, hopefully.
00:21:03.150 - 00:21:30.724, Speaker B: Yeah, I think maybe going slightly deeper onto that. One of the unique approaches that you also took outside of oracles and relayers was pools versus wrapped assets. Could you talk about that as well? Because I think you guys took many novel approaches and I think this one is unique. And to be honest, the optimal solution long term.
00:21:30.902 - 00:22:06.150, Speaker A: Yep. Yeah, 100%. So this, when we launched layer zero, we realized that if we launched very early on as just messaging with no application built on top or no liquidity layer, you ran on this problem where like imagine a yield aggregator is a very simple example. Like there's a farm on chain a and a farm on chain b. And I want to unstake $10,000 and like go stake it over there. So you unstake here, but then you don't have inventory on chain b to like stake over there, right? You need something to abstract away or move that value in a way that actually makes sense. Historically, you had done this through wrapped assets.
00:22:06.150 - 00:22:34.932, Speaker A: You would lock up an asset on chain A, you mint it sort of like synthetic IOU on chain B. And the problem is that the end user carries that risk in perpetuity. So if something happens to the contract on chain b, infinite mint or whatever, they basically now are worth zero. They take over the underlying. Now your iou is worthless. If chain a gets hacked and all the underlying assets are removed, great, you have an iou that's backed by zero. And same with the messaging protocol is corrupted.
00:22:34.932 - 00:22:50.354, Speaker A: This is just a bad thing where the user carries a risk. A user is used to. I absorb some risk when I use uniswap that the contracts work, are functioning. Nothing bad is happening, etcetera. But as soon as I'm done it, I never think about it again. As a user, I go on with my day. I have my assets.
00:22:50.354 - 00:23:30.104, Speaker A: I'm in a static state. And wrapped assets created this component where, like, you're never in a static state. Like, at any point in time, that wrapped asset can become useless. And so we had this very strong thesis that wrapped assets are really terrible. And the existing method of using pools was really bad, because our general thesis was that 95% of bridging volume was going to come at the application level, not at the user level, because you have these big sushiswap existed on 16 chains. What they didn't want is a user to do a swap here, leave, go to some third party bridge, bridge across, and then like, hopefully make it back to sushiswap again to execute the other leg. Like they want to own the whole leg.
00:23:30.104 - 00:23:55.560, Speaker A: And then the wallet's like a layer above. They don't even want you to go to sushiswap. Metamask makes $400 million on the swap function within metamask. Right. Every world is like, I want you to go to any Dex or yield aggregator, like, we want to own it all here and abstract it away from you. And so you have this real battle for eyeballs. And so one thing that is troublesome with having static pools, so the way they did it before is you'd have a thousand here and 1000 there and connected to chains.
00:23:55.560 - 00:24:22.414, Speaker A: And I say, okay, great, I want to take 500 over there. But by the time I got there, the pool had been drained from other chains. And so how do you handle that revert case? I won 500, but it's not there. So, okay, do I wait until the pool fills back up? Do we revert and come back? And if so, who pays the gas? Does the user pay the gas? That sucks. Now they need the destination gas asset. Does the application pay the gas? Now I can drain the pool and spam it and force them to revert everything. So there's all of these issues.
00:24:22.414 - 00:25:13.420, Speaker A: So we created this concept of instant guaranteed finality, which is basically you need to guarantee on source to the application that this transaction will go through on the destination chain. So sushi, when it executes a swap here and the bridge is happening behind it, it needs to know that it will get the results on the other side so it can execute the other leg. That concept was very, very novel at the time. We created Stargate, which is standing pools of liquidity, 100% in native assets. The user basically adds here, subtracts there, and there's all this interesting math in terms of this curve style pricing at the bounds and pools are being drained, and there's excess demand where one person is charged an excess fee, and then that's being rewarded to the person who's rebalancing the pool. But ultimately you have this concept of native assets everywhere. So no wrapped asset risk, you get instant guaranteed finality.
00:25:13.420 - 00:25:42.036, Speaker A: So every application can easily compose this. And then the most important thing is this now shifts the risk from the users to the LP's. The LP's are being compensated for the risk. So LP's get paid to stake there, they earn yield, they get fees, they do all of these things. So like, the LP's are used to pricing risk, that is their job. But the end user, now, when they bridge across, they put in 100,000 USDC here, they get out 100,000 USDC. They're exactly in native USDC on both sides, and they never think about it again.
00:25:42.036 - 00:25:47.940, Speaker A: Exactly like when they uniswap. So there is no risk carried by the user. And I think that was like a shoot shift.
00:25:48.920 - 00:26:38.784, Speaker B: It really is. I mean, being able to get rid of wrapped assets, which as you were mentioning, is virtually an IOU that could potentially be there or not be there, and moving fully to native assets on chain is a massive, massive leap forward. And so applaud you and your team for figuring out the engineering to make that possible. One thing that I also think quite heavily about is latency and finality. And there, I mean, when I've spoken with previous kind of people in the industry, how, I guess from the technical approach, you said it's almost instantaneous, is that kind of bottlenecked by the slowest chain of the two? Or like, when you say instant, what do you mean?
00:26:38.962 - 00:27:22.954, Speaker A: Yep. So instant guaranteed finality, not instant finality, right? So most of these change prior proof of work had this probabilistic finality. And so ultimately latency is like a measure of security, right? And so with Stargate specifically, we use like reasonably conservative risk parameters, but we allow every application, like at the end of the day, the application itself bears all of the risk. Like the risk is I'm mutating something on source chain, I'm doing an executing something with a belief state of the world, of the source chain, that is some way. And so, like, if I do something over here, and the state that I believed was true was not, then there's no way for me to like pull that back on the destination chain. So a very simple example is like a bridge. Like, if I'm okay, great, I got 20 million over here.
00:27:22.954 - 00:28:08.870, Speaker A: I'm giving out 20 million there. Like, if this gets reorged and never got committed, like, I can't get that 20 million back. So you want to be really certain or as certain as you can be that that 20 million is, like, very there on source chain. And so we allow every application to define this instant guarantee of finality is that as soon as it is committed on source chain, you have a guarantee that the end result will be there. So if you commit 20 million here and the system tells you, okay, you are guaranteed to receive 20 million on the other side at the exact rate. And for it to be there, there is no world other people can come in and drain. There is no world anybody from faster finality change, you will always have the end result, and so you still have to wait for an appropriate measure of finality, but you will never have a situation where you land and the amount is not there, basically.
00:28:09.250 - 00:28:25.786, Speaker B: I see, for example, you're bridging $10,000 from Ethereum to avalanche. Once it has been secured on the Ethereum side, you're guaranteed to receive that $10,000 on avalanche.
00:28:25.818 - 00:28:37.342, Speaker A: Yes. Going outbound from Ethereum right now, you'll wait about three minutes and 15 seconds. So that is the latency going outbound for avalanche. It's like 8 seconds or something. 6 seconds, something very fast.
00:28:37.526 - 00:29:14.530, Speaker B: Interesting, very cool. And maybe, I think on that front, you kind of touched upon it initially with IBC, but could you maybe recap some of the differences, especially now, I think, because bridging is becoming a very hot topic. I think you're kind of early to the game in that regard. But now that it's and kind of become front and center, could you compare, like, again, like, what IBC is doing with, with the cosmos ecosystem and then also what avalanche has been doing with kind of their native bridging as well?
00:29:14.870 - 00:29:45.214, Speaker A: Yeah, yeah, 100%. So a couple. Couple of things are, IBC basically, again, uses this, this concept of, like, clients very effective within, like, extremely cheap, fast finality chain. So, like, because you can write so many transactions on tendermint extremely cheaply, you can basically log every blockader from every other chain right within the ecosystem. So, fine, you want to write every blockader from ethereum to cosmos. It's like a total joke. You want to write every blockader from Cosmos to ethereum.
00:29:45.214 - 00:30:19.666, Speaker A: It's, like, basically impossible or, like, it would be exponentially expensive. So we think the, like, client system is extremely good. But again, it just doesn't scale economically outside. There's a reason why basically you don't have IBC right now to Ethereum. You don't have IBC to all of these other chains because you just can't write, I don't know, a million block headers a day to other chains or whatever it is. So that is the primary great system. Hard to scale in terms of cost efficiently.
00:30:19.666 - 00:30:40.326, Speaker A: In terms of avalanche. Avalanche has two things. They have a native bridge which is Ethereum to avalanche. That is this sgx cluster that basically it does that. So it's strictly like bring assets from Ethereum to avalanche and then basically return them. Right? So you know, this is effectively a wrapped asset bridge. They wrap assets on Ethereum, mint them over here.
00:30:40.326 - 00:31:34.644, Speaker A: But it's kind of like secured to avalanche or like buy avalanche and then like return them back. Then they also just introduced, I need to think if I can remember the name Warp, I think is it called warp messaging bsls, which is basically this BSL signature that you can go so prior once you land in avalanche, now they have all these subnets so these application specific blockchains that are being spun up and we are on almost all of those. So we do like you can imagine a world where you have ETH as a single l one and then you have like 1000 L2s above it, right. You still need horizontal composability in that world because like imagine even just arbitrum, nitro and Nova. Like you don't want to like do a swap on one. Like on Nova, I think. I don't know if I'm mixing them up, nitro and Nova, but do a swap on one of them and then like need to wait seven days to go back to like then buy an NFT with like the money that you sold for.
00:31:34.644 - 00:32:05.448, Speaker A: Right? Like you need the ability to have horizontal scaling. You need the ability to have like asset composability. So we do that between all the subnets, Avalanche made a way to natively take BLS signatures and basically verify them on another subnet. So they're not doing any sort of like bridging directly, but they allow people like us to now use that primitive to do verification in a way that is like more efficient. It's super interesting. We spent a bunch of time with Pat Grady who's like the primary architect behind it, diving into it. It's really cool.
00:32:05.448 - 00:32:09.760, Speaker A: My laptop's on 8% so we're going to get a quick tour of the office while I grab my charger.
00:32:09.840 - 00:32:10.580, Speaker B: No worries.
00:32:11.840 - 00:32:13.820, Speaker A: But, yeah, go on.
00:32:14.720 - 00:32:44.640, Speaker B: No, I've talked with Patrick quite a bit, and I'm always impressed with his depth of knowledge and some of the clever ways that they figure out how to kind of either scale or with the bridging solution that they came up with. One topic that I've also kind of seen pop up more recently is kind of the topic of mev and bridges. Any thoughts on Mev specifically?
00:32:44.940 - 00:32:59.246, Speaker A: Huge amount of thought, yeah, this is actually super, super interesting and I think wildly, wildly under discussed topic right now. Let me plug in this laptop and then we can dive in.
00:32:59.438 - 00:33:00.022, Speaker B: No worries.
00:33:00.086 - 00:33:27.264, Speaker A: But it's like amazing topic to discuss. So basically, there's a couple framings of Mev around bridging. Well, one, in pure bridging, there's not really mev, because what are you going to do? You're just putting in an assets, like think of wrapped asset bridge. You put an asset on chip side a and you get out an asset on side b. So wrapped asset bridge, there is no mev. But in terms of cross chain messaging, there's a ton of mev. I think it comes out in a couple different ways.
00:33:27.264 - 00:34:04.874, Speaker A: In pure Mev, if you. Okay, there we go. In pure Mev, if you have a. Basically, MeV is measured in milliseconds, typically extremely fast, extremely low latency, not in seconds or minutes. If you're doing a dex swap from chain a to chain b, having like ten minutes of heads up, that the deck swap is coming in doesn't really buy you anything, right. It is ultimately like you create. Like Mev in most cases is like you disjoint the price on chain a inside some slippage band.
00:34:04.874 - 00:34:52.319, Speaker A: The person then executes at the highest end of their slippage band, and you're arming it out on some other chain. This is typically what people are doing, is basically there's some value to be captured within the parameter of the transfer, and then you're capturing that value, and it requires you to be perfectly positioned within the block. So transactions happening here, you're going to be here, and then you're going to be either here, orbiting it out somewhere else. So basically, you need that perfect block positioning. So even if you had ten minute heads up that it's coming in, you can't disjoint the price ten minutes early, because then you've just created Mev for somebody else and they're like, oh, great, they'll sell on you and they'll arbit out on some other chain. So you still need perfect block positioning. So ultimately, the surface of MEV remains exactly identical basically to getting in the mempool.
00:34:52.319 - 00:35:36.440, Speaker A: So you're coming into Ethereum, it doesn't matter if you have 1 minute, ten minutes or you know, ten milliseconds. It's like you submitted the mempool and then mev is like generated there. Now where this is a little bit different is that the latency matters. So now if you are waiting ten minutes, then you don't want to have this experience where like you go and you know, because of natural volume within the asset, you're now outside of your band of slippage and you revert because that experience sucks. We like come back and then what do you do? You wait ten minutes again. So typically slippage bands are like a little bit higher with latency because like, because you want to avoid reverts, which means there is a wider amount of MEV that can be extracted. But the way more interesting surface of MEV is effectively two things.
00:35:36.440 - 00:36:22.008, Speaker A: In most middle chain models, actually in all middle chain models right now, they have the ability to view the underlying contents of the messages. So there's a massive surface of like the ability to censor. I know a governance message is coming through from something that's adversarial, or could be adversarial. Like you have the ability to view that and then withhold it, toss it away, submit it, and submit a transaction when. But more importantly, you have the ability through all incoming transactions through that chain to reorder transactions. So layer zero actually is something like we very very very strongly believed in. One thing that is fundamentally enforced at the technology level is non sorter enforcement, which means one, no real oracle can see anything about the message before they pick it up.
00:36:22.008 - 00:37:07.972, Speaker A: So they have to agree ahead of time to guarantee to deliver that message without being able to see any of the contents of it. And everything must be non sorter enforced, which means it must be submitted to the destination chain in the exact same order was submitted to source chain. So you have zero ability to censor, right? So in a world now where you have all of these sort of like ofac compliant nodes, all these other systems where like people are being forced through external parties to, whether it be censor things or do things, there is no ability within the layers or technology stack to do it. You cannot discard a single message. You must either entirely stop processing messages. So imagine you have a thousand swaps and you for some reason want to censor three of them. You either submit none of them or you submit all of them.
00:37:07.972 - 00:37:49.144, Speaker A: There is no ability once you hit that one that you're not going to submit. Everything breaks. An application can basically choose a different oracle and relay. So at the technology layer there is no way to do that. But the more important thing is when you're talking about MeV, is any system that doesn't have that, which is currently every other system in the world, they have the ability to reorder all transactions as they come in and extract the maximum. Ask yourself, why do, I don't know, the most mercenary high frequency trading fund in the world want to own the messaging layer? It is the ability to basically reorder every single transaction, extract the maximum from within. And so that is like the biggest surface of risk from all messaging systems right now is exactly, that is reordering and centering transactions.
00:37:49.312 - 00:37:58.728, Speaker B: And from a technical point of view, how are you able to guarantee the ordering and that no matter what the message is, that it's passed on.
00:37:58.864 - 00:38:07.540, Speaker A: Yep. So it's strictly enforced within endpoint. Every single message has a nonce and nonces must be submitted in the exact same order. Right. So you can never, you can never break nonce.
00:38:08.780 - 00:38:55.910, Speaker B: Interesting. Very interesting. Maybe, yeah, I think we could probably do like an entire podcast just on like Mev alone, but it's a really, really interesting topic. Definitely. But I guess in the interest of time and kind of chatting on a couple more topics, maybe moving on. I think one of, I mean, I would say a surprise to many of the kind of the past cycle since really bridges took center stage has been the exploits and hacks that have happened. Can you kind of comment on, in your point of view, and I think you probably touched upon this earlier, but maybe rehashing it is why these kind of bridge attacks were so prominent throughout the past couple of years.
00:38:56.330 - 00:39:44.214, Speaker A: Yeah. So when I talked about what layer zero cares very deeply about in terms of like how we were building or like the fundamental principles of how we built a, it is that every contract is immutable, every validation library is immutable. We have the ability to publish new ones that people can opt into, but everything prior is completely immutable. And so we are one of the definitely of all of the major messaging systems, the only one who does this. And so the problem has largely been this. The problem has been every messaging layer has the ability to basically change the code on the underlying applications above, so change all the security properties by uploading, updating their, most of them, they're like, they're trying to do this in a way that is well intentioned. They're trying to improve things they're trying to do things, but at the end of the day, code is hard.
00:39:44.214 - 00:40:10.442, Speaker A: Code can be buggy, and ultimately, security should basically be measured by how big is a honeypot ban and how long has it existed for. That should be the measure. As soon as you upgrade that code, you're back to zero. You're back to effectively zero security. If you look at the Nomad hack. Nomad hack happened because the Nomad team pushed its code to the validation layer, basically changed the security properties. For every application above, there was a bug like everything.
00:40:10.442 - 00:40:33.250, Speaker A: Rugged wormhole got hacked for 325 million. Then they pushed a piece of code and basically forgot to initialize it, which put 1.8 billion at risk. Would have been 100% TvL loss. White Hat found it had to pay out of bug bounty. Three weeks later, they made the exact same error and literally pushed the exact same thing again. Had it paired, a 10 million buck dollar bug bounty would have been 100% systemic risk.
00:40:33.250 - 00:41:03.422, Speaker A: Like, it doesn't matter how good the engineers are, it doesn't matter how well intentioned, nothing matters. If you have a surface of upgradability in your contracts. Eventually somebody will make a mistake and basically everything will be at risk. That, I think, is by far the biggest issue within the industry is upgradable contracts, which is funny, because it is seen as absolute death within DeFi. It's not fun for Uniswap to have to migrate billions of dollars to tens of billions of liquidity, like uni v. One to uni v. Two, and uni v.
00:41:03.422 - 00:41:23.990, Speaker A: Two to uni v. Three. But you do it because that is the way you need to build within the industry to give users some semblance of security and be able to actually trust the code and use it at scale. But at the messaging layer, basically nobody is adopted at this. They all continuously pushing code. That by far is the biggest issue. There are a bunch of.
00:41:23.990 - 00:41:47.896, Speaker A: At the end of the day, most of it is just flaw in code. Like, in almost all cases, it has been that. I think upgradability is by far the biggest. And then there's just like, other than that, you just have to have great standards, you have to have the ability for like, review process. We spent the most money of any company in the entire world on audits last year. I believe we're at like $5 million we spent on audits, which is insane. We have the two largest bug bounties in the entire world.
00:41:47.896 - 00:42:11.630, Speaker A: Not even like within crypto, like $15 million independently for both layer zero and stargate of separate bug bounties. So, like, yeah, I mean, it is an amalgamation of a bunch of different things, but at the end of the day, like, security matters and the way that you build matters, and I think people are still just doing in a way that is super fast and loose when you're dealing with billions to tens of billions of dollars.
00:42:11.970 - 00:42:56.300, Speaker B: Yeah. And I mean, even, like, I mean, going back to, like, some of the design choices that the layer zero team took initially to really minimize those honey pots as much as possible, a lot definitely goes into it, but I appreciate you adding color there. I think maybe going back to the initial vision and creating that robinhood like experience, what would your pitch be to builders or engineers in the space to build or use layer zero? And then I would love to tap Eric in as well and have ask a couple questions from someone that's rapidly learning about the space as well.
00:42:57.440 - 00:43:47.918, Speaker A: Yeah, sure. I mean, I think the biggest, so the biggest pitch for us, which I think has been, like, kind of the unique, like, the end goal for layer zero. Like, at the end of the day, we're a messaging layer, right? It's like the volume of messages is like our measure of success. Right. How used as a protocol, how ubiquitous is a protocol? But it would be very easy for me to, like, trick people into trying to build something that does a lot of messaging, but ultimately is, like, not really that, like, that good for the product. And then, like, over time, you know, whatever they're like, it will be bad for them, they'll end up not using it, etcetera. So, like, the goal for us has always been, we work with every builder is like, what is the thing, like, what is the dream state for you? What is the thing that you're building that will make, like, your protocol significantly better, that will make your end user basically have, like, a more seamless experience.
00:43:47.918 - 00:44:14.518, Speaker A: And I think this comes out in, like, a ton of different ways. For NFTs has been hugely different than it has been for gaming projects, than it has been for, like, lending protocols, which I think is super interesting. So there's all these different surfaces. The biggest thing for us has been build those primitives that enable them to do this easily. So that is, again, gas abstraction was like, the number one thing. Like, our user is going between a bunch of chains. Like, we don't want them to have to have both assets.
00:44:14.518 - 00:45:07.890, Speaker A: And that's where you get buy in from the chains themselves too, right? When you're saying, like, okay, we're going to build for applications on your chain, but they're going to need to go to all these external parties and get all these different assets. Now you can build something where like, say, Polygon was the fastest and cheapest chain. You could build an application that lives on Polygon only interacts with all of the rest of DeFi, right? We're on 30 chains right now, interacts with, with 30 different chains. Every single DeFi application you have. And you never have any asset other than medic and USDC, right? Like, you don't ever touch or see anything else. When you talk about the wallets, when you talk to centralized exchanges, with how they manage deposits of like, long tail assets across different chains, when you talk to, whether it be the front ends, whether it be trad five, like, there's all of these different verticals. And I think each of them have like, uniquely different needs.
00:45:07.890 - 00:45:27.310, Speaker A: But I think end goal is just how do you make their lives as easy as humanly possible? And I think most of the lens of what we build, like, we are a developer tooling company, at the end of the day, that is how we see ourselves. That is what we focus on building. And I think our end goal is just always build the things that make lives easier for developers.
00:45:28.650 - 00:45:53.810, Speaker B: I love that. I think crypto needs more of that. Being able to abstract complexities. Not enough appreciated yet. I think Web two has definitely mastered this, so can definitely take some lessons from you and the team, I guess. Eric, is there anything. Obviously, we've dived super technical and a couple aspects.
00:45:53.810 - 00:46:04.450, Speaker B: There's the bridging components, there's different layer ones, there's different L2s. What I guess for you as a crypto user has been some of your biggest pain points.
00:46:07.040 - 00:46:35.880, Speaker C: I don't have a great answer to that. I kind of want to ask a broader question if. Okay, Brian, I'm curious if you come back on the show two years from now, I'm curious how you think this interview will be different in the sense of what are the things that you're still trying to figure out, or the big questions you have, or things that could play out in the broader ecosystem that would affect layer zero and its development. What do you think is still a big question mark?
00:46:36.980 - 00:47:21.650, Speaker A: Yeah, it's funny, the way that we build. The question I always got asked the most by far is, are we going to have a bunch of L2s? Sorry, a bunch of individual orthogonal layer ones, or stark design trade offs between them? Are we going to have only Ethereum with a million L2s? These were like existential questions that people asking. My answer is always that I don't need to really care. I might have an opinion on it, but at the end of the day I'm just building the base primitive that is used in both of these cases. All the L2s will need horizontal composability. All of that is needed. I think the goal in how we built is really to be relatively agnostic to how the space develops.
00:47:21.650 - 00:48:18.126, Speaker A: Like I've been in the space for a long time, like over ten years now. I was minting gen zero cryptokitties, did not see the NFT boom coming. I was like farming yams at 300 million% Apy, did not see defi summer coming, right? Like I don't necessarily have the inherent ability to like predict where the space will go with things in the way that like Vitalik probably didn't think the dominant use case for Ethereum over a bunch of periods would be like meme coins, right? And like dog money and you know, whatever else. Like at the end of the day you build a thing that enables all this stuff to be built and then people will surprise you in a bunch of different ways. So things that I think could be different. I think data availability layer stuff right now is super, super, super interesting and has some really interesting implications. I think the zero knowledge stuff is super interesting and I have a hyper contrarian viewpoint on it that we are well known for saying we're right now ZK, at least in messaging.
00:48:18.126 - 00:48:38.766, Speaker A: ZK very interesting. And roll ups in like atomic settings. And messaging I think is literally like does not provide what people say it provides right now. And I think there's like a very interesting debate there. I think you can still do some things with it, but like the state of like this is pure trustlessness. Like does not exist. I think there are a couple different angles that are interesting.
00:48:38.766 - 00:49:33.272, Speaker A: You know, the question is like wherever does end adoption come from? But like my five year goal is that literally we don't have this interview in five years and nobody thinks about us ever. But like we're just ubiquitously using the underlying layer, right? Like what modern web developer these days like thinks about the OSI model or the way Ethernet and TCP IB are written? They're just like not reading IeeE standards. Like this is not happening. I think that is like the end goal is like to make enough abstraction that like the end developer and the people creating things don't need to think about this. And chains are like different execution environments are seen as largely commoditized in the way that they are now. Right? When you build on your web stack, your end user does not care whether you're using AWS lambda or like, you're using these things that are hyper optimized for storage or computer like, whatever. It just doesn't matter to the end user and it hardly even matters.
00:49:33.272 - 00:49:40.920, Speaker A: There's that much to your average web developer, maybe once you get to a level of complexity. And so I think that is really where we hope to go.
00:49:43.580 - 00:49:46.868, Speaker C: So success is if we never talk again. I'm just kidding.
00:49:47.004 - 00:49:54.760, Speaker A: Yeah, for sure. It'll be very polarizing success. It'll be at one boundary or the other, but I still think that's the optimal outcome.
00:49:57.540 - 00:50:28.920, Speaker C: I love that answer. Zooming out a bit of we're in this AI moment where there was a lot of energy on web3 stuff, and now it's time to build, etcetera. I'm curious what you say to people who got in when it was hot and are now maybe second guessing. Maybe they're deeply technical, maybe they should have spent more time in AI stuff. What do you say to those people in this moment?
00:50:30.260 - 00:51:40.110, Speaker A: So again, having gone through 2013 and 2014, 2017 and 2018, and then now, like, this has just been a repeated cycle. And even me, I guess I became one of those people in AI where I got in, again, total blue skies, super interesting. It felt like anything could be done. And then when I left, it was like, all we're building is like, mediocre characteristics and like, what the heck are we doing here? And then now, you know, now it's just like, okay, LLMs have made things, like, very, very interesting again. So I think ultimately, the only way you have real success with what you're building is like, and I told this a lot to people who are building is like, you need to have just unfathomable amounts of conviction. And, like, the thing that you're doing right, like it is, by, like, by the time you get to any measure of reasonable success, like, you will have had eight different opportunities to give up and quit, like, along the way. And so, like, if you don't have extremely high degrees of conviction, you're going to find one of those excuses to quit ahead of time in, like, you need to just be completely certain outside of everything else that you like, one, can build this thing and two, want it to exist in the world.
00:51:40.110 - 00:52:29.596, Speaker A: And so I think anybody who doesn't have that measure of conviction, anybody who's just like, sort of, and it's fine to be like, this generalist who kind of chases what's interesting and like, there's lots of people who just like, spend a lot of their time trying to learn, like, learn a little bit about a lot of different things, be up to date on relevant topics, and like, oh, this is actually more interesting. So you have these, like, bands of where you're spending your time. And I actually think that's totally fine. But I think, like, if your goal is to build a world class company or, like, build a piece of technology that really gets used at scale ubiquitously, like, you have to have the most obscene amount of conviction that, like, you probably, like, it should be a litmus test, like, before you actually begin the company. Not like, in the middle where you're like, oh, actually, I guess I didn't care that much about this thing. Like, there's something else that's more interesting now. Like, it's a conversation you should have with yourself ahead of time.
00:52:29.596 - 00:52:38.360, Speaker A: And I think anybody who's doing that, like, is severely, severely dampening their chances of, like, actually building something at scale. That's really great.
00:52:43.940 - 00:53:18.430, Speaker B: Yeah, maybe on that front. I mean, I think famously you've said when you were raising money for layer zero, you never had a pitch deck, you just had a product. Now, obviously, because crypto has gone through these various cycles of up and down, sometimes fundraising is easier, sometimes at the moment, it's much harder. Can you talk personally just about your fundraising process? Being able to actually show a product and advice to founders and builders today that are in a more challenging fundraising environment?
00:53:19.610 - 00:53:51.750, Speaker A: Yeah, so I will definitely say that our experience was, like, very atypical. So I'm not sure that it's, like, hyper repeatable, but, like, again, the inceptions of the company were like, me and my two closest friends in the world just building something we wanted to build. For us, the goal was just like, build the thing so we could use it. We never set out to, like, make a company. Right? And so, so at first we had this thesis of what this bridge might look like. There was a better bridging. This was effectively stargate, but in a purely pairwise manner.
00:53:51.750 - 00:54:26.840, Speaker A: That was the earliest iteration was like, ok, that was the thing that we were going to build. And then we realized, hey, we're still reinventing this transport layer that sits beneath it. That is clearly the generalizable problem and what we should be spending our time on. And so then at that point, once we started to do this, we had some really good friends of ours who basically were like, please let us give you money. And we were like, okay, we took this small amount of money early on and we're like, okay, we're going to launch something. And so we took that. And then after that, we just kept building.
00:54:26.840 - 00:55:01.786, Speaker A: Basically put out our white paper, we put out a couple other things, and then we got interest. Like our first conversation with somebody else being like, let us take this entire round. Somebody externally basically preempting us. And we said, okay, but like, maybe, but we don't really want one person to have the entire round. So then we said, what do we actually want to accomplish from this round? And so at this point, they came in, or they had, like, said they wanted in, and a couple other people had got wind of it and they said they wanted in. So now we're oversubscribed. And we said, what is the thing that we actually want to accomplish here? And it was like a very defi focus.
00:55:01.786 - 00:55:33.180, Speaker A: If you look at our cap table for that round, it was co led by binance and multicoin, and then it was sino defiance, Delphi Digital robot Ventures, which basically take the largest stakeholders, people who are doing interesting things in every major defi protocol in the world. Those were the people we want to be talking to because that was what we were building at the time. Then again, we just kept building. We thought that round of 6.450 would be the last round we ever. We're like, okay, we don't need anything more. We're just going to go through and launch the product.
00:55:33.180 - 00:56:06.106, Speaker A: Then we put out a demo, which was my original ten minute demo, just showing Stargate and what is possible on top of layer zero. And shortly after that, we were preempted. We had eight term sheets in eight days. So we were preempted by this massive group of people. We had term sheets rating from 300 million to a billion five. We ended up turning down a billion five to go with a billion at the time. Again, it was like we had $1.6
00:56:06.106 - 00:56:35.806, Speaker A: billion in commitments for like $135 million round, right? So wildly oversubscribed. And our goal at the time was, again, what do we want to actually accomplish here? Like, what are we getting out of this? We didn't care about the money at all. It was purely like, what are we doing? As a technologist? We're like, we're very comfortable with what we're building and how we're building. We know the problem we're working on. We don't need help in that. That's not what we're bringing in. What we needed, or we didn't know, is basically how to build a world class company.
00:56:35.806 - 00:57:31.336, Speaker A: So, like, we turned down the billion five to go with to get this tri lead of, like, Andreessen, Horowitz, Sequoia and FTX, who at the time we thought we're building world class company. We're like, oh, we can learn a lot from these guys. But that really was, like, the lens of that round is like, how do we leverage, like, this group of people to build a world class people have been through it then adjacent to all of these orgs? And so that was really the goal of that round. And again, was just this series of preempts and was a mixture of, like, okay, so going through all of this, the biggest thing I will say is, like, one have to have undying conviction that comes off from founders. Founders who are like, I don't know, wishy washy. Like, oh, maybe we'll build this thing, but, like, maybe this thing would be more needed so we could pivot there. The bet that v's like, I am as atypical in background as it gets for, like, a sequoia backed company, right? Like, it's just, it just isn't there.
00:57:31.336 - 00:58:21.448, Speaker A: So, like, what did, what did I do that convinced, like, this partnership and Andreessen, all these other groups to, like, make a bet on us? And one thing is, again, that that conviction, there was no, like, oh, maybe we'll do this, maybe we'll do that. I was like, this is the thing that we're building. This is how we're building it. And, like, even if we don't raise around or never raise around, like, we're going to build this thing because this is a problem that we're solving, right? So, like, we had that high degrees of conviction. The other thing is, Ryan and I, my co founder, like, the way that we work in, the way that most of layer zero was, like, created, was us sitting in a room for, like, 10 hours a day just, like, yelling at each other. Like, our wives thought we hated each other, and we're like, no, no, this is just how we, like, how we discuss things. And so, like, we are as adversarial minded as possible when, like, comparing ideas and how to actually design a system, but the goal is always ground truth.
00:58:21.448 - 00:59:01.232, Speaker A: And I feel like having done that for so long, the questions we got asked in diligence across the board from every most technical groups to anybody, were literally basically trivial at that point. Like, we had already considered those things 100 times before in every angle of that surface. And so, like, it seemed when people were talking to us that we had thought of every trade off, every technical, like, you know, we had really, like, gone through. And so, like, think, like, having a grasp, like, a real grasp on. On what you're building. You don't need to be like, oh, well, we'll figure it out, right? We had very clear answers on, here's why we made this decision, or are going to design it this way. Here's the set of trade offs.
00:59:01.232 - 00:59:32.420, Speaker A: And I think those two things can get you incredibly far in the fundraising process, because just having those two things alone really separates you, I think, from the average group of founders by such a high delta that I would say, like, that is the biggest thing. Also, by the way, as an aside, am I chopping a ton? Like, it's super choppy on my side? I don't know if there's something I can do to kind of, like, address that or if the recording on our end will be fine. So you guys tell me if it's coming through fine for you.
00:59:33.520 - 01:00:19.866, Speaker B: It should. I mean, it's a little choppy, but it should be fine on the recording. So cool. But no, I mean, to your point there, I mean, I fully, fully agree. I mean, I think I 100% echo the statements of ground truths. I feel like people do not spend enough homework to actually try to establish those ground truths. I feel like I was manic in a similar way on scaling in blockchains for a year and trying to really articulate the ground truths of figuring out how blockchain scale, then that conviction, whether it's a founder or a fund, being able to unwaveringly kind of hold that point of view unless kind of new information comes to light that, like, directly refutes those points is very rare.
01:00:19.866 - 01:00:51.700, Speaker B: And so I definitely appreciate the strong opinions that you hold and the homework and all the research that you and layer zero team have put forth to build your product and kind of make steps towards really getting to that Robin Hood like experience of abstracting a lot of the underlying layers and unifying kind of the entire ecosystem. So, no. Thank you again, Brian. I really appreciate you coming on the podcast. Thanks for joining Eric and I, and appreciate what you're building.
01:00:53.040 - 01:01:19.434, Speaker A: Yeah, 100%. Thank you for having me. And nice to dig in on some of the technical stuff. I always, like. I like having conversations that, like, feel different than the other. I know people have heard me talk a bunch about whether it be my background or, like, what layers are doing, and the last thing I want to do is just, like, keep presenting the same information to people. So I like the different surfaces of conversation, and I think the more technical the conversations are, the better.
01:01:19.482 - 01:01:24.570, Speaker B: So I fully agree. I like talking with engineers. They're the one building things.
