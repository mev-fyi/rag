00:00:00.120 - 00:00:12.606, Speaker A: Eric, thank you so much for joining me today. Excited to have you on. The founder of Injective and deep Diving, not only your ecosystem, but the technical stack and really what the community has been up to. So thank you so much for coming on.
00:00:12.678 - 00:00:15.502, Speaker B: Hey, thanks so much for having me. Really appreciate it.
00:00:15.646 - 00:00:55.386, Speaker A: Of course. Well, maybe to start off the podcast, I think today there are now lots of different engineering solutions to kind of scaling blockchains. You have ethereums of the world, which was the first iteration of smarteen smart contracts. Then that roadmap kind of expanded to L2s. Now you have some layer threes, kind of the full gamut with app chains, integrated chains, the modular thesis. I would love for you to maybe start out high level on what was the background context with injective and why did you set out to start something different in this space? Yeah.
00:00:55.458 - 00:02:41.320, Speaker B: So for sure, the landscape back in, I would say, 2018, 2019, when we first started ideating on basically our infrastructure for injective, it was very, very different, but at the same time, not too different from what people were envisioning and expecting. Basically, at that time, what we had in the space were mainly just basically infrastructure people trying to reinvent the wheels, trying to optimize different types of consensus designs and also different types of VM designs to try to paralyze various aspects of things, or just generally doing some like, micro optimization. And that kind of spawned for, I would say, various takes on, like, evms. EVM also powered by, you know, different types of underlying consensus mechanisms and, you know, completely different consensus mechanisms coupled with like, a different types of VM environments such as like solana, et cetera. But at the same time, we were also seeing, you know, a lot of the early design and iterations around L2 solutions, module architecture, et cetera. So we kind of got like a sense of basically being speculative about the innovation trends and some of the ground truths that seem to overlap time and time again. And so for starters, like for Injective's case, it was meant to be kind of like this sector utility focused infrastructure that tries to steer certain protocol level bias on a certain set of use cases and certain set of stripping all the way to the bottom operations.
00:02:41.320 - 00:04:03.152, Speaker B: For injective's case, we realized that in order to build a future proof and also forever competitive type of protocol and network, the best way to do this is to kind of forgot the generalized or the monolithic aspect of things and focus on creating an optimized stack or from a future developer's perspective, a set of interface that allows for future optimization that you can plug and play, incorporate different types of innovative consensus mechanisms and different types of scalability solutions. And that became a very, very natural marriage with the current infrastructure that injective is built on top of which utilizes tendermint, common BFT, and also various Cosmos SDK modules. And it's because at the end of the day, there is a foremost expectation of all these messages and their behaviors and the storage commitment that comes with it. But at the same time, the actual mechanism underlying and actually the software basically, or the process that kind of calculates that is pretty open and it really allows for anything to happen.
00:04:03.256 - 00:04:44.120, Speaker A: Yeah, it's been fascinating just how much progress has been made since those early days in 2018, 2019. I remember joining a little bit late towards that tail end of 2017 and feeling like I missed the trend. I feel like as you come into crypto your first cycle, you always feel like you're a little bit late. But in the grand scheme of things, in global adoption, we're still very much at the starting line, even today. You mentioned ultimately tailoring injective a little bit more to specific use cases. Can you talk a little bit more in depth about what use cases you're particularly excited about with injective?
00:04:44.200 - 00:06:03.690, Speaker B: Yeah, certainly. Like, previously I was like going a little bit too, like a low level on, like, the design choices and philosophies. So it just like going back up on like a high level perspective. What that kind of like ended up happening is create injective kind enough has like a set of like out of box plug and play module that powers a lot of, you know, common or overlapping types of defi or general financial primitives or any type of like financial related computations. So out of box there's an exchange module that powers the spot and derivatives order book exchange process that allows for, you know, the query, aka access of these type of shared centered drives to on chain order books, and also the ability to place order matching against it and creating tracer against it. Then on top of that, there's also a lot of other complimentary modules such as Oracle module, different types of on chain nice little features such as what the cosmosm environment, which is smart contract environment that's optimized for injectives infrastructure. It also has a auto executing feature that removes the need for a crank and that allows for a guaranteed execution at a slight cost premium compared to obviously doing an async transaction on chain.
00:06:03.690 - 00:07:00.086, Speaker B: That's also a very, very useful feature for any type of execution guarantee for different types of actors because that's always processed at the beginning of every single block for a cost premium. And that removes a lot of the mvv related issues on top of the exchange mechanisms. On top of that, a bunch of new stuff getting incrementally added, like the recent, very exciting RWA module, et cetera, with that entire module stack that interoperate with each other, and also being plug and play with a greater Dapp ecosystem. It creates this very, very unique advantage where I, um, you know, a set of contract or set of protocols built within EVM simply can't create this naturally plug and play and compatible, uh, layer, uh, because of the, you know, innate restrictions within EVM that tries to set like a, you know, general, generally acceptable rule for everyone to play.
00:07:00.118 - 00:07:07.542, Speaker A: By using Cosmos, did you have to ultimately rewrite the virtual machine, or what did you guys do on the virtual machine side?
00:07:07.646 - 00:08:12.650, Speaker B: Yeah, so, so, basically, we managed to, you know, without kind of reinventing the wheel, which adds a lot of, you know, like, necessary attack surface area. We managed to add a lot of complimentary features such as auto execution layer to basically allow for compatibility with all the other projects that also adopted cosmosm smart contracts to immediately deploy, et cetera. But at the same time, the entire cosmosm layer is also containerized almost as one of the modules, amongst many others. And what this allows for us to do is to have paralyze VM environment junction with Cosmosm down the road to have EVM, et cetera. And currently, we're kind of doing this via different roll up solutions, which allows for optimization or saving a lot of space and allowing for room for experimentation without congesting the core chain, et cetera, due to rapid iteration. And this basically spawns inevM, SVM, etcetera.
00:08:13.030 - 00:08:31.046, Speaker A: Nice. Very cool. To me, it seems like these modular modules are really the secret sauce behind injective that allow some of these unique innovations to happen on chains, whether spinning up unique applications or being able to iterate faster.
00:08:31.158 - 00:09:13.112, Speaker B: Yeah, for sure. I wish modules as more of a framework, and these are precompiles within EVM, et cetera. And modules very much containerizes them, organizes them in a more, like, functional way. So instead of just like, oh, it's that kind of address identifier by co identifier, it's like, oh, this is the exchange module. That's the Oracle module, et cetera. Really, at the core of it, it's really just a bunch of precompile that has more optimized processing and computation or more efficient access to storage, compared to just stripping everything away, compared to an EVM layer.
00:09:13.306 - 00:09:33.620, Speaker A: Gotcha. Very cool. And so maybe like, jumping back a little bit, you ultimately set out to build injective after 2017. What was that unique point of view that you wanted to really bring on in the world that allowed you injective, really, to come to light? Yeah.
00:09:33.660 - 00:11:33.368, Speaker B: So I think one of the common consensus at that time, and I think that has been, you know, challenged quite significantly, but at the same time kind of played a part in terms of defining injectives ecosystem's identity, is that the multi chain world, at least at that time, based on what was around, doesn't make a lot of sense if you're just trying to create a EVM, but slightly faster EVM, but different types of trade off on the cap spectrum EVM, but this and that. That created this viewpoint. Wherever I. It certainly oftentimes makes sense to build, like, a base or infrastructure built like a decentralized blockchain, but it has to have a very much defensible and irrefutable purpose and utility. And this is kind of what allows for injective to really, really steer into the sector focused angle in terms of infrastructure design, et cetera, because all the components that are built within injective, it kind of breathe life into a lot of different types of very innovative mechanisms trying to, you know, create these type of, kind of scalable functionalities or, you know, dealing with different types of, like, surge in, like, usage and adoption and trying to, you know, come up with very, very novel mechanisms that parallel different things and do things that, you know, other people didn't. But, you know, like, I basically, the reason why I feel like, you know, like we managed to accomplish a lot of those is that we were working within, like, a controlled or, you know, constrained surface area where it's more about, like a formal function that's very, very well defined, that's within, like, a pretty deterministic type of behavior expectation instead of being extremely generalized, where, you know, this iteration cycle understandably is just a lot slower.
00:11:33.464 - 00:12:23.572, Speaker A: Yeah, I very much appreciate specialization to kind of find a unique wedge because I think it's much, much harder today to be more general purpose with all the different general purpose chains that are out there today. As the space gets more competitive and competitive, I'm very curious just where the end landscape ultimately is going to be. Whether it is going to be more of a modular world or chains, or is it going to be a few kind of high throughput integrated chains and your kind of, like, vision of the world. Where do you see, like, things playing out from like, a 510 year time frame from, like, the infrastructure stack.
00:12:23.676 - 00:12:35.356, Speaker B: Yeah. So I think, actually, interestingly, a lot of the cynicisms coming from 2018 where, like, a lot of people started steering into, like, ETH maximalism, like BTC maximalism, etcetera, I was part of the ETH.
00:12:35.388 - 00:12:37.294, Speaker A: Max, you camp for a little bit of.
00:12:37.452 - 00:13:33.280, Speaker B: I mean, honestly. Yeah, like, start off, like, very much the same. Right. It's mainly because, like, at that time, the innovations that were happening, the different types of competitive solutions that were under development, it seems like, functionally, kind of, like, very difficult to differentiate against a base layer other than kind of like a marginal scalability properties, et cetera. That has very, very clear trade off where it's presented almost as, like, a choice rather than a definitively better solution. And now I think people really, really understood that. A lot of these cases, it's oftentimes a choice, and it's about under that scenario where they decide to veer into high computation, low data store, et cetera, or different angle, which is modular architecture, trustless execution, et cetera.
00:13:33.280 - 00:15:01.462, Speaker B: Bye. Kind of narrowing down innovation with kind of like, this context of, oh, like, basically you can't really escape from, like, the fundamental, like, limitations of cap theorem, et cetera, other than, you know, being able to, like, marginally improve over time. Really, you have to, like, come up with the most optimal solution under, like, a certain set of trade offs. And that's what really briefed life to a lot of very, very strong and, you know, like, long term defensible type of, like, these type of base layer, layer ones, L2s, and who knows? Maybe layer three down the road and creating this really what now seems like a multi chain world that makes sense and that is honestly, like, really, really kind of amazing to see all the builders naturally kind of converge into a cooperative ecosystem. What's becoming very, very clear now is that basically there's a very good reason why chains like Solana has kind of like, a problem market fit in certain verticals and strong defensibility in certain verticals. Obviously, certainly very much of a chain that's under rapid iteration and development. And obviously, it also makes sense why there's modular architectures, modular stacks, and various different takes on a layer, two solutions via different types of stacks.
00:15:01.462 - 00:15:38.108, Speaker B: You really start seeing different types of application to thrive and really gain adoption thanks to its base layer, and oftentimes only enabled by the capabilities of its base layer, like a lot of different types of account abstraction mechanisms enabled by the base layer, such as, well, base, and allowing for different types of application to really brief life and really jump out of what is typically considered as a constraint of EVM or ethereum blockchain limitations.
00:15:38.244 - 00:16:56.208, Speaker A: Yeah, it's very interesting. I mean, I think what I'm excited now is it seems like a lot of the infrastructure is maturing. We have, in my opinion, the ability to scale with sufficient infrastructure that should allow applications to build meaningful products, where from the engineering point of view, you don't have to focus as much on the underlying underlying infrastructure, and you can focus more on applications. And I think from the layer one, L2, or layer three, layer four, right now, it's about understanding. I think, from the engineering perspective, why would I build one place versus the other? And I think some of those boil down to some of the technical trade offs that each of them make. But I think ultimately, it's what those technical architecture designs allow you to build that I think is kind of the unique magic sauce and injective. What do you feel like is your bread and butter or maybe your elevator pitch to get engineers to come build an injective versus everywhere else that they could possibly build?
00:16:56.304 - 00:17:43.385, Speaker B: Yeah, so I'd say there are oftentimes a lot of applications that we've experimented, that we've seen the various builders trying to bootstrap and build out. And the whole pitch for the longest time was, and actually is that you can build a lot of different types of financial applications that are not possible elsewhere. And this is only possible enabled by the modules. The infrastructure on injective, basically, before, it was oftentimes pretty tough to point out. It's like, oh, you can do this, that's fully on chain, that's super, super cheap, et cetera. Or this. Plus this is only possible on injective.
00:17:43.385 - 00:18:33.094, Speaker B: But with adoption and traction around helix, around Mido, around Black Panther, around dojo, et cetera, it's becoming very, very clear that users simply won't be able to tap into or access different types, a very, very interesting mechanisms, or like, you know, like on chain strategies, or, you know, placing, like, highly advanced order types, or engaging it with, like, super, super novel kind of like on chain primitives, like pre launch futures without the injective infrastructure. So the pitch has become fairly easy over time, which is like, you know, like it is the only place to enable different types of developers to build events, financial protocols, primitives, and apps.
00:18:33.222 - 00:18:49.010, Speaker A: Are these modules maybe from a slightly more technical perspective, are they being built in house by the injective engineering team? Can anybody build the modules? What's the rundown there?
00:18:49.590 - 00:19:35.998, Speaker B: Yeah, it's been very much of an open contribution because every single module is containerized almost in a sense. Basically, a lot of developers ended up incorporating a lot of very interesting mechanisms onto the injective core chain. I think SCIP has been working on various very, very cool on chain modules for different types of oracle usage, package forwarding, middleware usage, et cetera, to enhance interoperability. So we started to see more and more different types of teams and projects, and developers start to incorporate and kind of enhance the capabilities of injective blockchain and really and excitingly, like a very much exponential way.
00:19:36.094 - 00:20:24.632, Speaker A: Yeah, it's fascinating. I think the rise of kind of these parallel processing chains has really only begun. And in the past, I would say it was kind of a nice to have where you didn't have much scale. But as scale gets larger and larger, being able to do parallel processing process multiple transactions simultaneously instead of everything sequentially, it's dramatically better. It's not a small thing, and I think it helps with fees. With isolation, engineers can build more unique applications. And I think being at the forefront of that has to be interesting internally.
00:20:24.736 - 00:21:38.802, Speaker B: Yeah, certainly. So basically, injective is one of the earliest, quote unquote boring adopters of parallelization. And for longest time we thought that it was expected, and it's part of a natural optimization process when you try to paralyze, basically functionally, paralyzable transactions. Obviously, EVM has various restrictions that prevents or that enforces sequentiality, so it prevents really parallelization. And a lot of very, very innovative work done by the Monad team, et cetera, is to create this optimistic process to parallelize them. But for injective cases, because of these functional, and almost in ethereum terms, like pre compiles that are very much formalized in a way where you know exactly what's parallelizable, you know exactly where like, sequentiality is important and that allows for, like, you know, very much naturally, like, as part of work to paralyze them. And, yeah, like also like, more importantly, like, bitcoin core has been paralyzed well, since like pretty much day one.
00:21:38.802 - 00:22:59.834, Speaker B: And sequentiality is actually decoupled from the overall processing to enable that. Right. And I think over time, we started really veering into it and noticing the end to end stack on the tendermint layer, on the cosmos layer, and on other ecosystem, they all start to create different tools and different protocols to allow for more dynamic parallelization. What enables injective now to really heavily explore and venture into parallelizing different types of vm environments, allowing, let's say like EVM on injective alongside cosmosm, or allowing for hyper optimization of exchange batching to scale up to hundreds of thousands of orders, hypothetically speaking per second. That's all enabled because of various build extensions, ABCI being developed on the base layer, and that allows injective to easily, without creating future compatibility issues, to basically be highly interoperable, be very, very hands off while reaching an optimal point in terms of parallelization and optimization.
00:22:59.962 - 00:23:44.162, Speaker A: Yeah, I think people still underappreciate it today, even though it's kind of now. One of the newer hot trends that kind of emerge within 2024 is being able to paralyze execution. And I think engineers have taken a while, probably in my mind, to figure out when you go from sequential processing to parallelization, what unique kind of capabilities you can kind of unlock. You mentioned the order books. Can you go a little bit deeper into what injective enables for applications like order books?
00:23:44.226 - 00:25:34.062, Speaker B: Yeah, so order book is kind of like a chain level primitive in a sense, containerized by obviously the concept of a module. And that allows for very, very simple functional definition of what an orible is meant to do, and thereby you can easily extract and identify a parallelized and different parts are optimized without having to worry about non determinism or different types of forking issues triggered by unexpected cases of sequential assumptions for injectives, order booklets. Quite simply put, it's actually utilizing an exchange mechanism called frequent batch option, which out of box removes any type of mvv related issue from running sandwich attack related issues. But more importantly, it's a matching mechanism that's very much innately compatible with how a blockchain works. Basically, the whole consensus process of finalizing a block and then creating a lot of deterministic computations at the end, and more importantly, undergoing one shot type of kind of like a exchange. Matching computation is a lot more sensible and gas efficient from a user end perspective than a traditional order book exchange mechanism, which is called a continuous double auction, which means that as you input an order, it undergoes a matching process. And that's where the sequentiality really comes in, is that whoever comes in order, first they're the winner, then frequent batch auction obviously removes the concept of time and instead has an auction interface where everyone is free to like post in orders.
00:25:34.062 - 00:26:20.520, Speaker B: And order posting process is extremely light as a result, and they just do matching in one shot in like a pro rata fairway at the very, very end. So what this introduces is a highly, you know, like, like a huge opportunity and leaves up for a lot of, you know, future room for like, parallelization for like, optimization, because basically it's almost like, you know, you can theoretically undergo the entire matching process in one shot type of computation. Obviously in practice it's not, but it gives you a lot more upper bound in terms of trying to optimize them and allows you to paralyze them, even simply just by paralyzing them across markets.
00:26:20.940 - 00:26:58.216, Speaker A: Yeah. The sandwiching tack and mitigating that has then become a more prominent issue in Solana. I believe it will most likely become a larger issue on other chains if there's not things like payment for order flow. I think as far as my knowledge, there's one other chain, say, that is ultimately doing the order matching on chain. Can you describe any of the differences between unse on the order matching from the techno class technical side?
00:26:58.368 - 00:27:52.840, Speaker B: I'm not too familiar with safe, specific exchange matching mechanism because it's been a while, for me at least, because we've been working on it, we've been improving it and iterating upon it for a few years when, say, launch into mainnet. And basically there were a lot of very, very interesting functionalities and features powered by say, and I think also a lot of stuff that was missing within the say stack. So it was very hard from research and development perspective to compare apples and oranges just because of the intended feature set, et cetera. So this remind me to check in on their code base and check out some of the new development around their core order book infrastructure.
00:27:54.180 - 00:28:43.948, Speaker A: Yeah, yeah, I think trying to. It's hard enough to kind of keep up with your own stack and everything going on the ecosystem, let alone other, other ecosystems. Maybe if we back up though a little bit. I think to me, what is very impressive, Eric, about you, is the fact that you took on something extremely ambitious. I think doing a layer one is probably one of the hardest technical feats within all of blockchain and all of crypto. How did you get to this point where you felt comfortable from a technical aspect to be able to start this journey and say, hey, I think I can do it better than others, let me go out and do it myself?
00:28:44.084 - 00:30:21.328, Speaker B: Yeah. So I think, first of all, it's certainly a calculated approach, because we know the scale of chain development, we know how complex it gets. Given that a lot of my background is around consensus protocol research, et cetera, and even during my time dealing with cryptography stuff, one of the big no nos, one of the things you definitely are not supposed to do is rolling your own crypto. That is similar to chain development, where it's one of the big no nos, is if you're trying to build something that's a more high level, non monolithic, or basically more non generalized one, a big no no is messing with the consensus mechanism. So I think by picking your own battle, you work on the consensus mechanism and nothing else, or you work on the layer above it and kind of take out of the box for various consensus solutions out there. It basically gives you a very, very strong first step to start your iteration cycle, and it allows you to build without having significant blockers and other layers or exponentially increasing your scope and workload. Basically, we always are very, very soberly aware of our own capabilities and our own man, our resources, et cetera, and the productivity, like, every single, like a team member.
00:30:21.328 - 00:31:07.980, Speaker B: And we do always, you know, are going to have a very, very ambitious goal and vision of, like, you know, building, like, different elements. But it's also very equally important for us to look back. It's like, okay, you know, lately, like, we have like, you know, like, like three guys in a garage trying to build something. Here's what we can build. You know, honestly, you know, like, like, we have to accept that, you know, we're not genius or gods. We can't just, you know, build what, like other, other teams of like 20 people tried spending like, two years to build. And so it's time for us to pick our battles and do what we're best at and, like, build it out in terms of stages and tackle different types of problems or build different types of custom native layers later on?
00:31:08.060 - 00:31:47.230, Speaker A: Yeah. Knowing your expertise and doubling down on that, I always find extremely important and not very many, I would say, are able to figure out their specific niche and double down, let alone going through that bear market. You guys actually launched last crypto bull market. Can you talk about as an engineer, as a builder building a community, the ups and downs that really came along the way with building injective and going through that bear market to where we are today in the last six months.
00:31:47.330 - 00:32:36.082, Speaker B: Yeah. So I generally like, in like, a very, very weird way, enjoy bear market a lot more than like, a bull market because bull markets typically when, you know, you have, like, a weird type of competitive environment where, let's say, in like, a agent based, like, lifecycle. Right. You know, over time, like, it's a known set of people, let's say, like, you know, 100 different types of agents, like iterating, et cetera. They have a budget in terms of resource, and they would have to spread it out for longevity, et cetera. But bull market is when that entire picture gets disrupted where you added ten x more agents into the mix. And resource budgeting is ten x also shorter than everyone else.
00:32:36.082 - 00:33:52.392, Speaker B: This creates a very, very strange type of, like, a resource allocation challenge or a roadmap challenge, where no matter how fast you build or no matter how many things you build, you will always lag behind different types of narratives that spawns out. You will always lag behind different types of innovations coming out from different types of verticals or most importantly, different types of user friend that, you know, gets recycled, like, every month. So from, like, guys who are like, you know, like, it's their first time around. Yeah. You know, like, building into space during a bull market, it ends up kind of being, like, a super counterproductive and being fairly distracting. And it's a very, very important lesson, I think, for a lot of, like, the builders in space to learn is that, like, you know, really much come and go during a bull market. And over time, you either build a platform or an infrastructure that can allow for low cost enablement or integration of these type of narratives, because oftentimes they just rhyme in the end.
00:33:52.392 - 00:34:11.170, Speaker B: Or you got to pick and choose and be able to preemptively build around a certain narrative that you firmly believe in, instead of hearing people telling you, oh, yeah, no, the hottest thing is this right now. You should build that, because by the time someone tells you that, it's already pretty late.
00:34:11.510 - 00:35:09.179, Speaker A: Yeah. The narratives are generally a lagging indicator. I found them maybe sometimes directionally cracked, where people get excited about a certain area where dollars should flow into that certain ecosystem, but then people get way too excited, and then there's probably five or ten projects that should have gotten funded, but then it's 100 or 1000, and then everybody starts competing, and VC's kind of FOMo engineers try to go to the hot new thing. And to your point, the bear markets are a lot more peaceful. To be able to really focus and double down on the things that you have a unique edge in. Because once bull markets come around, there is a lot of noise, a lot of distractions, and a lot of shiny new objects.
00:35:09.259 - 00:36:16.626, Speaker B: Yeah, for sure. I mean, like, injective history or, like, the lifetime of injective, obviously, you know, like, naturally speaking, like, the majority of time is in the bear market where, you know, like, everyone is just, like, heads down building. Everyone is, you know, making, like, long term investments on, like, infrastructure that can create very much exponential impact. Kind of like working on stuff that might be boring to the public, but we all know the long term value of it. Resolving tech debts, basically, quote unquote, in a sense. And I think that's honestly the most exciting part as a team to build stuff that, you know, paves the way for something that's going to be extremely impactful in the future. Almost like you're kind of building stuff that's going to undoubtedly go around and prove everyone is like, oh, like we had foresight or we have belief instead of during the bull market, which is everyone rushing to kind of adapt to different types of narratives, different types of consumer trends, et cetera.
00:36:16.626 - 00:36:47.610, Speaker B: And then after a while, you probably get different types of. Of affirmation on like, oh, you guys do a great job and, like, build really quickly, but you don't necessarily, you know, get to enjoy, like, kind of like the gratification from, like, being like a great builder in a sense, or a great, quote unquote, like, engineer where you had foresight in terms of building something that people didn't anticipate. And I think that is honestly oftentimes the greatest choice.
00:36:48.080 - 00:37:11.280, Speaker A: Yeah, it's going one direction when everybody thinks you're crazy, and then after a while, being proven correct with the design decisions that you make is very satisfying. Can you talk about the team today and, like, what you guys are excited about for, let's say, 2024 on the injective roadmap?
00:37:11.360 - 00:38:03.630, Speaker B: Yeah, so I think a lot of them are about, you know, like, kind of like divide and conquer in a sense of amongst our teams. Like, one team focuses on, like, a lot of base layer stuff. Focus on building out, like, an infrastructure that can scale to, like, a massively growing ecosystem. Building out, like, the best possible, like, developer tool set. Building out different types of modules that can ten x enhance various use cases and various, like, consumer signs that we kind of noticed. And then on the other hand, it's about, like, eating our own dog food. Innovating and building on different types of application verticals, not only as a demonstration to other builders on the capabilities or like, hey, we've done like 10% or 20% work.
00:38:03.630 - 00:39:09.306, Speaker B: You can imagine, like, how big it's going to be when it taps into, like, maybe even just 80% and building out different types of apps where it's like, yeah, it's very hard to be the first mover on this, but don't worry, we help you guys do the first mover part. And we ate the shit, sometimes made mistakes. And here's a product after various iterations by interactively dividing your mind between the application layer and also the base layer, you kind of are forced upon yourself to have the realizations like, oh, like different types of infrastructure or different types of base layer. You make some very gracious or optimistic assumptions like yeah, they can't be that dumb where they don't want to work around that or address the solution. And then you start to realize, you started to face reality, which is like, okay, this is actually a lot more important than we thought. There's no solution around it other than addressing it from the baseline. So yeah, that's been consistently a theme.
00:39:09.306 - 00:40:13.128, Speaker B: So we have a lot of output in terms of application developments, et cetera, different types of renovations or improvements on existing products. But more importantly on the base layer, there's a lot of exponential impact via various chain upgrades, different types of module upgrades, et cetera. And a lot of very, very long term developments like paralyze smart contract environments or adding a roll up slash, parallelize interoperability environments for all those ecosystem environments. And it all boils down to synchronously moving towards a specific, very palpable use case and making long short medium term investments into the roadmap.
00:40:13.264 - 00:40:49.730, Speaker A: I think on that .1 of the things that has been difficult for various ecosystems, l one s or l two s, has been the community side and getting that rapid community to live and die kind of by the sword. How has the community within injective really rallied in like the last six months and come together? And what are maybe even some of the exciting applications that you've been seeing built on injective that are either not built elsewhere or just feel better in the injective ecosystem.
00:40:49.810 - 00:42:47.016, Speaker B: Yeah, so I definitely stopped keeping track of, you know, like all the ecosystem development and all adapts, et cetera. Definitely all the information, all the stuff I can talk about is probably a few months old because, Jesus Christ, there's just so many every single day, so it's very tough to remember them by name these days. So I think one of the interesting part is that we've certainly had a massive surge in terms of ecosystem projects and developer activities, I think like first half of, or second half of last year, et cetera. And honestly, like most people think that like, it's because of, you know, various tools, et cetera, or it's because of, you know, certain like spark of event, but it's really like a long term, you know, like, you know, like, like a very, very long, like, building and you know, various upgrades and various improvements, a lay down a foundation to enable like a, you know, some surge of like developer activity and most importantly, sustaining them and retaining them to be constantly iterating and reasonable pace. Because I think one of the interesting part about the injective developer ecosystem we noticed throughout the years is that oftentimes it will have pretty strong spikes in terms of developer interest, user interest, et cetera. But oftentimes it doesn't spike exponentially like a lot of generalized environments such as Solana, etcetera. And that's mainly because it has a certain application angle, it has a certain focus, and a lot of different stacks or different types of tools are built with UX centric rather than super super developer or generalized type of opinion in mind.
00:42:47.016 - 00:44:13.628, Speaker B: This allows for basically, let's say it could have gotten 1000 developers or projects to deploy, but instead we got 200, 500, et cetera. But what's interesting, and we didn't notice the upside of this until very, very recently or this time around, is that the retention of a lot of these projects are extremely sticky and much more sticky than a lot of the spikes in other ecosystems that we noticed. That's mainly because people managed to see or leverage different types of native mechanisms, you know, leveraging the oracle module, leveraging the order book, leveraging, you know, like different types of derivative primitives or different types of auto executing kind of like functionalities to a point where they actually manage to like get a lot of different users, get a lot of different kind of like value props out there to different types of, you know, ecosystems and really bring on users, you know, from like a kind of like non like self referencing way where it's like, oh, like, we built this tool and it's only injective users, but it also allowed them more importantly interface with the greater ecosystems. Like, oh, like there's this app that's meant for like Ethereum users. It just happened to be on the injective chain. A lot of users might not even notice that they're interacting with the dab on top of the injective chain. And a lot of users get onboard that way.
00:44:13.628 - 00:44:17.666, Speaker B: And I think that's like truly what's really, really exciting and fascinating. Me.
00:44:17.738 - 00:44:59.530, Speaker A: Yeah, being able to build that organic community takes time. And then once you kind of hit that cambrian explosion, you're like, holy shit. There's actually a lot of stuff going on in the ecosystem and it's really hard to follow personally, do you have any area of focus that you're excited about? Whether that's within the defi ecosystem? Crypto AI, deepen that. You're just excited to see more innovation, more continued experimentation within the injective ecosystem.
00:44:59.610 - 00:47:38.566, Speaker B: Yeah, so I think in terms of building, and one of the most interesting part is I certainly overestimate it or underestimated the complexity, going from a very, very well spec paper or different types of docs into an actual final product, etcetera. Because in terms of a lot of ecosystem development, we're still digging into past research posts from a year ago or two years ago on how we envisioned, or the more advanced utilization or different types of applications of injective modules. And a lot of the Dapps on top of the injective ecosystem are digging into it. There's a bit of research brainstorming, shooting shit backlog that we're catching up to with all the developers in the ecosystem. So a lot of very, very novel mechanisms and a lot of what's available already within the CFI stack, like general global margining or portfolio margining, or different types of open margining in the sense where basically it becomes a credit based marketplace for borrowing and collateralization or a lot of my time is spent on figuring out different types of institutional permission products and how it can be, how do I call it, retroactively and more importantly, seamlessly integrate with the existing Dapps and also liquidity, more importantly and coming up with various mechanisms and various tools to be compliant with a lot of different types of regulatory frameworks or compliance frameworks that are set up by a lot of these massive institutions and still manage to get the product out, get the liquidity or issuer liquidity out while making use of it, instead of just having a glorified on chain minted token, that's really just a web two platform. Honestly, a lot of my time is just spent on also just coming up with different types of interoperability solutions, creating different types of very much hands on, really steering into the fact that injectiv is this multi chain platform engine to do a specific set of activities or satisfy specific set of needs. And really once you finish the needs, you can go back to your ecosystem.
00:47:38.566 - 00:48:24.944, Speaker B: It's not meant to be an entrapment per se. And coming up with different types of interoperability solutions like outpost contracts, Ethereum, etcetera, or coming up with different types of vm layers to kind of exponentially grow the developer ecosystem, and more importantly creating this facet for them to build different types of interoperability tools, where in ideal world, users on Ethereum can access different types of tools, exchanges, defi apps on top of injective all through Ethereum without even having to realize or having to deal with any type of directions, actions on top of injective.
00:48:25.032 - 00:49:09.642, Speaker A: I think some blockchain communities to either bootstrap the community side or the engineering side, have kind of taken different approaches, some with varying results. We've seen Polygon and now some large partnerships, I would say Solana and Ethereum, more focus on the grassroots, other larger protocols focusing on partnership announcements. How does injective or the foundation really approach building both the institutional adoption side and the crypto native side in terms of helping foster that community?
00:49:09.786 - 00:50:58.190, Speaker B: Yeah, so I think the foundation has really excelled at like engaging with the institutions and working on bridging the gap for the institutional tradfi type of infrastructure and how it can be incorporated within the injective, more defi centric infrastructure and primitives. And it's to a degree where, like me, injective labs are just a bunch of mechanics trying to come up with different types of tools and solutions, or build the solutions to satisfy the foundation's needs for that respect. And I think generally for different types of blockchains and for different types of ecosystems, there's really like a optimal playbook at different stage, different scale, different setup, and most importantly, different amount of money that they have. And perhaps polygons approach is a long term optimal approach down the road. But certainly the very, very clear answer for injectives, ecosystems, cases that this was never considered or even fathom because the ecosystem doesn't have that much money. I think it's really about coming up with the optimal solution over time. More likely to not via trial or an error, to come up with a different approach in terms of growing the ecosystem on the general consumer end user base or via different types of rails, which most importantly, at the end of the day is meant to expand the reach to the end users and end consumers.
00:50:58.800 - 00:51:15.420, Speaker A: Yeah, I don't know if there is a correct way to do it yet. I think the jury is still out. Whether partnerships or kind of focusing on grassroots community or some combination of both is the secret sauce. But it takes some time regardless.
00:51:16.800 - 00:51:21.672, Speaker B: It took, what, two decades to come up with a proper growth marketing playbook?
00:51:21.776 - 00:51:37.110, Speaker A: We got time, definitely. In terms of, if you could wave a magic wand from the engineering point of view, what was something you would love to see happen within the injective community?
00:51:37.930 - 00:53:45.640, Speaker B: Yeah, I think that's going to require a whole book for that. I feel like by creating native infrastructure, by creating kind of like a blockchain, practically speaking, like from scratch, we end up missing out and kind of like making it difficult for like various infrastructure that the Ethereum ecosystem or Ethereum, kind of like EVM based environments kind of take, take for granted in a sense, such as like different types of like tracking solution, out of box integrations, different types of infrastructure to allow for archival data, archival index data, et cetera. And more importantly, it's just a sheer amount of mind share tools and different types of development activity around optimizing around integrating with a lot of different types of existing web, two web, three solutions that oftentimes a developer certainly care a lot about, but gets skipped over by end users. And from end user perspective, it probably only manifests as why is it so difficult to get a historical data, or why is logs or contract interaction so ugly and all just raw data. I want to see more fancy visualizations, et cetera. And I think over time this is certainly a hidden challenge or difficulty that oftentimes other developers within the cosmos ecosystem or other developers within various layer one blockchains or L2 solutions. Anyone who's working out of box in a non out of box approach where a lot of tools are just non existent and you have to build it yourself.
00:53:46.340 - 00:54:16.088, Speaker A: Yeah, Ethereum being the first, there was a lot of infrastructure around tooling, developer experience, ops that was starting to become very much more robust compared to these other ecosystems. And I think it just takes some time for that community to kind of gain steam and build some of those longer tools. But Ethereum is definitely ahead of the game there.
00:54:16.184 - 00:54:19.500, Speaker B: Yeah, and Ethereum has a lot less tech debt, that's for sure.
00:54:20.480 - 00:54:26.660, Speaker A: Perhaps more. I don't know. They do have a good amount of tech debt in my mind as well.
00:54:28.280 - 00:54:30.632, Speaker B: You guys are at a much higher starting point.
00:54:30.816 - 00:55:07.640, Speaker A: Yeah, well, Eric is, as we're kind of wrapping up, is there anything from like a engineering or kind of like final thoughts that you would want people to take away from the podcast as they watch this, listen to it, and want to learn either more about the injective ecosystem, about foundations, about labs, and they saw this podcast and they're interested to dive deeper. What would be the takeaway for you and where would you point them to?
00:55:08.060 - 00:55:57.650, Speaker B: Yeah, so basically the starting point is injective.com dot. That will basically be this master directory for you to find a lot of things that you're looking for, a lot of things that you need. I'm definitely type to never read a website or look into it and just go for Google, whatever. Interestingly, for Injective's case, the website is actually very much up to date and a lot of stuff that's very, very difficult to locate through Googling with proper keywords. It actually would have saved you a lot of time if you just go through a website really quickly in the beginning. On the other hand, for injective labs case, there's been a lot of work around Helix, around Mito, around various different types of developer tools, etcetera.
00:55:57.650 - 00:56:25.204, Speaker B: That would be kind of like a very, very great first step example for you to check out for you to get a sense of what the injective ecosystem is capable of as a bit of a reference implementation, et cetera. And above all else, like a follow injective on Twitter or x these days getting started to develop, especially if you know, Rust is easier than ever.
00:56:25.332 - 00:56:51.356, Speaker A: Yeah, awesome. Well, maybe we'll end it there. Thank you so much for coming on the podcast, Eric. Thanks for nerding out with me on the technical side, going deeper into what that enables on the product side. I think those two are extremely important. The trials and tribulations from launching in 2020 to going through the bear market to now today. I wish you and the injective team all the success.
00:56:51.356 - 00:56:53.040, Speaker A: And thank you again for coming on.
00:56:53.460 - 00:56:55.260, Speaker B: Yeah, appreciate it. Thank you so much.
00:56:55.380 - 00:56:56.240, Speaker A: Thank you.
00:56:56.860 - 00:56:57.140, Speaker B: Bye.
