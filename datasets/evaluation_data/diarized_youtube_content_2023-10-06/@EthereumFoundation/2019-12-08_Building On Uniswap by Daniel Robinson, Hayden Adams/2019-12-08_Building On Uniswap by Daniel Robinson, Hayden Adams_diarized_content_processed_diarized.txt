00:00:14.010 - 00:00:44.394, Speaker A: All right, my name is Hayden Adams and I'm the founder at Uniswap. This talk is called building on uniswap. So what is this talk about? It was going to be a talk about Uniswap, but now it's weather advisory. A hurricane is a tropical cyclone and North Pacific and eastern North Pacific. A typhoon is a tropical cyclone that takes place in the Northwest Pacific. Super typhoon Hagib is a category five hurricane. There it is on its way.
00:00:44.394 - 00:01:14.594, Speaker A: All right, what is this talk about? This talk is about uniswap. It's about what can be built on it today. It's about how we can expand its utility in Uniswap, version two, and then how we can scale Uniswap while retaining its utility. So what is uniswap? It's first and foremost a decentralized exchange protocol. It makes use of automated market making. It makes use of pooled and tokenized liquidity. And what that means is, in a traditional exchange, you kind of have buyers and sellers matched up on an order book.
00:01:14.594 - 00:01:44.442, Speaker A: In Uniswap, you sort of automate that whole process and then you give people a token that sort of represents their position. It's easy to understand and use and that's one of the most important things. So why is it needed? First? It lowers the barrier of entry to the participation and finders. So in Uniswap, anyone can be a market maker. This is the current distribution of market makers on Uniswap. As of a few weeks ago, about 25% of people in the $2.5 million die pool come from users who use less than 1%.
00:01:44.442 - 00:02:12.966, Speaker A: So it basically allows you to pull together a lot of small market makers and do what used to be only a whales game. Anyone can create and list an asset. This is super important in Uniswap. Right now there's over 800 tokens. About 100 to 150 have actual usage. It's a lot easier to get listed on Uniswap than on Nasdaq or even on a centralized exchange or even on sort of off chain order book decentralized exchanges. Anyone can build on top of it.
00:02:12.966 - 00:03:06.614, Speaker A: And this is more of the topic of this talk. Part of the reason for that is it's all open source. It has an open source, front end documentation, smart contract SDK. And so since they launched last November, there's been a number of projects have started building on top of it. So what are the use cases right now? It seems like a lot of people are using it for trading tokens on Ethereum, so trading interfaces, wallets, Dex aggregators, and then we have some people want to use it to earn interest as a market maker. What they're doing is they're maintaining a 50 50 ratio of e and the new T 20 token, and then they're earning fees on trades between the two. One option you could do is you could use that liquidity as collateral, take out a loan against it to basically be able to leverage up on market making another option is create a liquidity source for an application you care about.
00:03:06.614 - 00:03:50.280, Speaker A: So MakerDAO put in a lot of, there's a lot of MKR, there's a lot of spank. And the reason is tokens like spank have a really hard time getting listed on exchanges because they have to do with the adult industry. Some people, and this is the one that I'm more interested in, is like integrating Uniswap directly inside of applications. So for example, you could lock up ETH in MakerDAO, borrow Die, swap that dye for ETH, lock that up in MakerDAO again and you can kind of loop through protocols to leverage out. So there's been some projects that have tried this out like open new adjustment, stuff like this. But what we really want to do is we want to improve Uniswap so they can serve more use cases than it does today. And we're going to do that with Uniswap version two.
00:03:50.280 - 00:04:45.814, Speaker A: Okay, so the first and most, and one of my favorite features is decentralized price Oracle. The second is direct ERC 20 to ERC 20 pairs. Now Uniswap forces all tokens to be paired with deep and there's a big advantage there. But then there's also some versatility that you can get out of allowing arbitrary pairs. And finally we refactor the entire code base to make it a lot more flexible. Isaac more secure and sort of better for the long term. Okay, so how does these Oracles work? Well, the idea of the Oracles is that it provides a maximally decentralized on chain price fee for any ERC 20 token with a very clear incentive structure, very easy to reason about like the cost of attack, how secure it is, and it can be useful for things like synthetic lending, automated trading, stuff like that.
00:04:45.814 - 00:05:36.150, Speaker A: One example use case that we're looking at is auger needs a REPT to eat prices for their version two. So actually before I get on, I'm going to maybe explain a little bit of how these Oracles work. So the most meaningful price right now there's already projects to use Uniswap as an Oracle where they try to checkpoint the price for maybe some sort of lending system or some sort of synthetic asset. But it can be firm. Run any transaction that checks the price on uniswap. Someone can manipulate the price right ahead of that transaction and basically mess up the Oracle for relatively cheap for a pretty cheap it doesn't cost that much, especially since you could synchronously front run it, move the price, let an Oracle transaction go through, and then push the price back. Synchronously.
00:05:36.150 - 00:06:45.198, Speaker A: So what we're going to do is we're basically going to have every transaction on Uniswap check the price and if it's the first transaction of the block, restore that price. And what we can do is we can basically average prices across multiple blocks. So that manipulating the price on uniswap, you might be able to manipulate it for one block but for manipulating across a thousand blocks or across an hour or a day, what we're ideally wanting to expose is allowing people to build pretty much arbitrary timelines oracles on top of uniswap. So if you check the oracle once at the beginning of the day, once at the end of the day you can get a perfect 1 hour time weighted average price of the price on uniswap at the beginning of the block. The reason we do it at the beginning of the block is basically because in order to manipulate the price at the beginning of a block, you have to do the last transaction in the previous block, which means you're opening yourself up to an arbitrage in the next block and doing that of costs. 1000 blocks can be very expensive. Can you use the microphone? Oh, you can't hear me? Yes.
00:06:45.198 - 00:07:20.966, Speaker A: Okay, thanks, sorry about that. Okay, the other feature we're working on is ERC 20 to ERC 20 pairs. The main idea here is to allow liquidity providers to take on a wider range of positions. Also allow for lower slippage and fees on direct ERC 20 to ERC 20 pairs for ones that have a lot of liquidity on them. Right now when you go ERC 20 to ERC 20 you have to go ERC 20 to eat ETH to ERC 20 you pay 0.3% fee on both sides and then the slippage on both sides. This in general we think increases the protocol flexibility.
00:07:20.966 - 00:08:08.150, Speaker A: So an example for the use case where this is maybe most interesting is allowing tokens to be paired against stablecoins or even stablecoins paired against each other or just very highly correlated assets. There's all sorts of different projects where they create assets that are meant to be correlated with each other. For example, you can imagine like CDI and dai, you can create a liquidity pool between the two. You're going to have very low loss. Basically losses in uniswap come from the prices diverging in the assets. So an example use case would be a CDI to cUSDC pair on uniswap. A while back we were thinking about the idea of like a die to USDC pair as an example use case for this.
00:08:08.150 - 00:09:03.050, Speaker A: But one thing that kept coming up was the opportunity cost of lending stablecoins. So right now if you lend die or USDC you can make about a 15% return versus if you were a liquidity provider on the system in uniswap you would have to be making a 15% return for it to be worth it. But if we have the sort of ability to create arbitrary ERC 20 or C 20 pairs we could create a pair between CDI todc where when someone wants to trade the trader is abstracted from them, they just send some die to the contract. The Dai goes through compound, converts to CDI and then CDI goes through uniswap converted to cUSDC, cUSDC back to compound or USDC and then USDC back to uniswap in a single transaction. And what you have is for the liquidity provider, they're basically leveraging up. They are earning interest on compound while earning fees on uniswap. For the trader, all they deal with is Dai and USDC.
00:09:03.050 - 00:09:31.214, Speaker A: And so there's a much lower opportunity cost in this case for being a liquidity provider. Yeah. So there's no LP loss as long as tokens maintain their peg in this case. Now, this is not true. You should be telling me that's wrong because technically they can have a different interest rate. So there might be a very small, very small potential loss between the two, but not very much. So yeah, users can swap die for USDC at very low prices.
00:09:31.214 - 00:10:26.470, Speaker A: And then you could also even imagine the C to IMC USDC liquidity pool tokens then being used as collateral because it's very stable. And then not only have you leveraged up by lending and market making at the same time, but then you're taking out a loan against that same collateral again. Yes, the money legos get kind of crazy, but we have a lot of fun with it. Okay, so one of the things, the thing that this has been focused on so far is like the idea of building on top of uniswap. And we also want to improve the UX of uniswap. And one of the best ways to improve UX for a single application is using L2. But with most L2s that have existed up until this point, it's always made this sacrifice where we can no longer interoperate cleanly and smoothly with other applications.
00:10:26.470 - 00:11:04.274, Speaker A: So there's a few different applications out there. There's plasma, there's Ek roll up, and now there's optimistic roll up. Maybe I'll very briefly, very quickly, high level explain optimistic roll up. You post blocks, you execute them optimistically, which means you assume everything is valid unless it's proven invalid. And then basically there's some data off chain that users can have that proves whether or not a transaction is valid or invalid. Very, very scalable because you basically execute everything off chain and you don't put any data on chain. Then you have ZK roll up.
00:11:04.274 - 00:11:38.278, Speaker A: This is the idea that you can put data on chain, very minimal data per transaction, and then you do a snarf proof that all that data was executed properly. Optimistic rollup basically combines the two ideas. We execute everything optimistically. There's blocks that are posted and you assume that they're valid, but then you post the data that you need for the fraud proof to ethereum. Okay, so optimistic roll up is lit. Optimistic roll up can scale uniswap. We can do generalized smart contracts.
00:11:38.278 - 00:12:22.586, Speaker A: Oh yeah, an optimistic rollup can scale generalized interoperable smart contracts on ethereum, so we can continue to build stuff on top of uniswap while scaling it. Some credit to plasma groups. There's Carl over there. I don't know if anyone else from plasma group's in here, maybe not, but made up of jinglen wang, carl push, ben jones, will meister, and then credit to vitalik group, who has also done a lot of most of the research. Not most of the research, but know there was the plasma research, the role of research for sure, and creating ethereum. So can optimize it roll up do uniswap? Yes, it can. And we built it.
00:12:22.586 - 00:12:55.550, Speaker A: It can do about and by we, I mean uniswap created a front end and plasma group created a back end. It can do about 250 transactions per second, or it can if we optimize the client on Istanbul. It has native metatransactions, so you can queue up multiple transactions. And it was built by uniswap and plasma group. So now I'm going to ask you all to pick a team. This is really important. Are you team unicorn? Unicorns are majestic.
00:12:55.550 - 00:13:15.914, Speaker A: They're shy, they're beautiful, and they love long walks in nature. Or are you team pig? Pigs are cute. They're very smart. They're the life of the party, and they love eating until they fall asleep. Okay, raise your hand if you're team uni. This is sad. Come on, a few more people.
00:13:15.914 - 00:13:36.980, Speaker A: Raise your hand. Okay, raise your hand if your team pig brutally. Okay. It seems to be 50 50 mathematically, but not in this room. Not in this room. I guess the pigs like my top one. Okay.
00:13:36.980 - 00:14:27.934, Speaker A: It's called Unipig exchange. I'm going to demo it right now. I think I have time. I have time. It's good. All right, one secondary, actually, I'm gonna quickly hard refresh second. Okay, cool.
00:14:27.934 - 00:14:50.590, Speaker A: All right. Unipeg exchange is a demo of uniswap on optimistic roll up. We've been working on it for the last month. All right, so the first thing, we need some form of civil resistance because the money is all fake, so we can't charge you fees. All right. So you can go get tokens from twitter. We have a pretty great twitter profit.
00:14:50.590 - 00:15:11.710, Speaker A: All right. It brings up this tweeting at Unipig exchange. Tweet. Waiting for my tweet. Tweet yay. Okay, so we just got sent 30 unitokens and 30 piggy tokens on our L2 wallet. This wallet is a burner wallet built into the browser.
00:15:11.710 - 00:15:44.122, Speaker A: You see, you can open it up. There's a wallet. Now, unlike most demos, I'm not going to be waiting very long for these transactions to confirm. And it's done. Layer two, you x. We want to sell all our pigs so that it increases the value of uni. Okay.
00:15:44.122 - 00:16:16.920, Speaker A: We also have trigger an AirDrop. Let's do this. The idea of this is basically to encourage participation. So if two people match up and they both have wallets on Unipig, they can scan each other. Ready? Just like that report. There you go. And I got ten tokens on this account and ten tokens on the other account.
00:16:16.920 - 00:16:40.986, Speaker A: Yeah. So the real thing with optimistic roll is it's a massive, massive UX improvement over using the beta chain. You can get instant confirmations. You can get 250 transactions per second. You don't need to do the approve and transfer. You can basically queue them up together or it basically doesn't exist. Yeah.
00:16:40.986 - 00:17:02.878, Speaker A: Let's see our stats here. So we've done about 2100 transactions throughout DevCon. We've had a bunch of people try this demo. I didn't realize this. I always pay a really high gas price for all my transactions. The average gas cost of a transaction on the average wait time of transactions on Ethereum is over a minute. So we've saved 3600 minutes on these 2000 transactions of people just sitting around waiting.
00:17:02.878 - 00:17:47.438, Speaker A: So that is a lot of time. Yeah. All right. Anyway, I think I'm going to open up your questions if you have any questions about this demo, about unicorn too, if the transactions are automatic, how soon will people know that I'm lying? How soon will people know that you're lying? Okay. As soon as they hit the basically so you have someone forming a block, they submit that block. So it's a block header and just a hash with Oracle group and then some data. Anyone in the world, as long as they have an Ethereum node, they'll see all that data and that's all they need to sort of validate every transaction on the block.
00:17:47.438 - 00:18:18.170, Speaker A: So ideally, someone is watching the chain. Anyone who cares about it can watch the chain catch invalid transactions. Basically as soon as it's submitted, someone's watching should find it. Any other stuff, you know what, trading baseball cards or something like that would be really cool. Now you can really do it just like the old days. Do you happen to work at a crypto startup that involves baseball cards? No. I agree.
00:18:18.170 - 00:19:26.574, Speaker A: One thing I really like about this, sort of what has felt really validating about building this demo is that I do feel like you could create something kind of like the way CryptoKitties went viral and it just kind of shut down Ethereum. We could create something like that where Unipig is not necessarily like a super viral game because it doesn't have that many elements to it. But you can create something CryptoKitties like that could reach a much wider audience of people without completely using up the entire capacity of the network. But do you still think it's going to break liquidity because it's going to create a lot of human bears? That is a good question. I think that the way that I see it playing out is that for the vast majority of tokens that would still be paired with ETH, the only really ETH or maybe some stable coins. I think that there are very specific use cases. I don't know if you've heard of, like, yield protocol that maybe makes usage of the arbitrary pairs, but for most of them, I just see them being paired with, like, maybe eat, maybe dai, maybe USDC.
00:19:26.574 - 00:20:09.854, Speaker A: You have a couple, and if you're only routing through a couple, it's actually not that difficult to kind of check the price on a couple different ones. Yes, actually, if you want to. So the idea of the yield protocol is that you take Y tokens and you pool them with their respective tokens. If you have like, Ymkr to MKR on Uniswap and you have the Oracle features, then you could create an interest rate Oracle that can be used in systems like Compound. Yeah. Any other questions? I've heard discussions about determining the transaction fee on Uniswap as a meter have a constant slippage for a given price. Has there been any research on like, instead of using a 0.3
00:20:09.854 - 00:20:39.640, Speaker A: percentage of having something that's more dynamic that could reduce there has been research, actually, a lot of that research. I don't know if you know if you've heard of Charlie Noyes at Paradigm. He's been investigating that. At the current moment, I don't have any sort of formula that I think is better. One option is you could just really create pools of few different denominations. And the problem there is once again, fracture liquidity. It's definitely like an important area of research.
00:20:39.640 - 00:21:38.170, Speaker A: Some of my intuition around this is basically if you had a different fee, all it would really mean is maybe almost like a different liquidity level where it meets equilibrium. There's sort of a point where the volume, like the kind of natural volume and the liquidity kind of matches up. And I think that that point just kind of changes based off the fee level. But for certain pairs, it's true that if you can have a specific pair that's really, really I think that's my 20 minutes. But basically, if you could have a specific pair that's really tightly, very tight margins on another exchange, obviously uniswap becomes less efficient for that. Can you touch on the Metatransaction model you were using? So this doesn't use Metatransactions, actually. Unipig uses an in browser burner wallet, which is nice, so it can sign from your private key.
00:21:38.170 - 00:22:28.040, Speaker A: It's stored in your local storage or your companies or of when I said native Metatransactions, what I really mean is native account abstraction. Basically the idea is in Bitcoin, for example, you can sort of take multiple UXOs and you can kind of send them. You can basically paralyze or say these three transactions all need to happen on Ethereum. You have to use a smart contract to do it. So it makes it a little bit more complicated to kind of queue up. For example, if you want to do an approve and then a transaction that you just transfer from, you can't naturally queue them up directly from your wallet. But something like optimistic roll up would essentially allow you to queue up transactions so that you can all right, I think we're out of time.
00:22:28.040 - 00:22:29.860, Speaker A: All.
