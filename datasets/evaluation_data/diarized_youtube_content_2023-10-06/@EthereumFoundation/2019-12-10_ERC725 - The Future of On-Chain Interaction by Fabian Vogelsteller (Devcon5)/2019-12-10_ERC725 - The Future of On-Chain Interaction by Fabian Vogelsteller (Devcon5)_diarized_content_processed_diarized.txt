00:00:13.770 - 00:01:19.878, Speaker A: This is the UX breakout room and it's all about like, you know, how do we do blockchain easier and better? I think I will go quickly through the slides because it's not that complicated get I guess most people will get the problem, definitely. So we have obviously I will start with two statements. Statement one is I think 2019 is the year of Web Three UX. I mean, that's kind of mostly the questions we had so far in the last year, in the last few months was how can we make this Web Three easier and better? And a lot of actually solutions already tried out. But it doesn't really unify in a very common thing people use and to make it better. The other thing is, I guess that's my assumption is that next year actually we will see the first applications that will be used by the mainstream where blockchain might not be even in the forefront and will not be about blockchain. It will be about some cool app or some cool thing to do.
00:01:19.878 - 00:02:03.090, Speaker A: And by the way, who also uses blockchain to some degree the big problems we have with Blockchain UX or the Web Three UX is maybe actually I should start shortly about my background. Everybody knows my background here. Again, who does not okay, so quickly. So I actually been part of the SIM Foundation since 2015. I joined in January 2015, have built the Mist browser. The newer people have not heard about that, but back in the day it was the first decentralized app browser. We kind of coined that term DApp.
00:02:03.090 - 00:02:42.058, Speaker A: The Ethereum wallet was one application within this Mist browser. And I have worked on Web Three JS, kind of like the JavaScript library I guess most of you use. That is the library kind of like we defined the first way of how you interact with smart contracts and on chain. And I guess Web Three JS is one of the first tools that made building on blockchain rather easy and more fun to do. I hope so. My kind of bigger work, besides being in the Web Three team since a long time actually was the 1.0 build which was recently developed, released.
00:02:42.058 - 00:03:20.890, Speaker A: So I have kind of like came up with this API to make it the way how it is and I hope it's intuitive. Say yes. If it's intuitive or better than before, it's an improvement. Let's say it's an improvement. So the big problem actually okay, there is also ESC 20 which I proposed 2015, that's kind of like what the non tech people know. And also something which I will be speaking today, which is ESC Seven to five. So big problems for Onchain is obviously this is probably one of the biggest ones.
00:03:20.890 - 00:04:05.850, Speaker A: You want to do a cool app which uses blockchain and the first thing people encounter is gas. And especially, even if you come from the blockchain or bitcoin community non Ethereum, you're totally puzled. What that even means is gas an extra token. And now with the gas token, actually people think it's a token. So what is gas? And most of the people don't know why they now need something called Ether just to do something in a blockchain based app. And the other big problem is everything is stored on keys today. So the way of how we interact with the blockchain is we generate a private key, or we have a private key in some wallet, and this one signs the transaction and we send it to the network.
00:04:05.850 - 00:04:56.970, Speaker A: The problem with this is we are dealing here with the lowest level component of how you can interact with a blockchain. And we store all our assets and our things on that lowest level tool or access point. By doing that, we run in a few problems. You have to back them up. You have to actually ask your user to create a very secure backup, which in today's terms means writing down words on paper people don't have. So we force them to make screenshots and storing an Icloud, which is the worst form of safety, just in case we have a bit more security. The problem is you make people go through hurdles and complications at the time where they don't even care, or no one know if they ever want to use the app in the first place.
00:04:56.970 - 00:05:41.420, Speaker A: So you end up with basically a lot of drops out right in this point of time. So only the tough one who really wants to invest or do something in this app will go through this lengthy process and you end up with many apps, many backup keys, and you somehow have to manage them. Don't lose them. Guess what? Maybe in case we have some value in the future on that. And it actually happened a lot of times. Think of CryptoKitties who had thought that this would be worth anything until it did. So Es 75 kind of initially was in 2017 or something.
00:05:41.420 - 00:06:36.186, Speaker A: The idea, okay, how can we make basically an onchain account? Or back then I called it on chain Identity until the whole identity community backslashed on me. Oh, my God. You kind of call it Identity, basically to actually unify this whole thing of how I manage better my account on chain and how could I have an account which can receive actual information. And this led to the Es 75 proposal, which was in 2017, october, actually. And another thing called seven three four. It was rather complex, but I think what it did was for the first time showing of how can I make a smartphone based account with some sort of key management logic and some sort of claims I can attach to this account. And it kind of showed the full picture of how can this look like in smartphone language? It spurred on.
00:06:36.186 - 00:07:31.706, Speaker A: It kind of like activated the whole discussion around identity blockchain. And so on, even though there were predecessors like youPort and others who did that before me. I kind of proposed this out of the feeling of had the urge to do it, like I had also the urge to propose ESC 20 in a more public place rather than this Wiki page which we had before. And it kind of like was the right timing at the time and it dirt this discussion. So out of this came people say, oh great, definite identity standard, we should all use it. And the origin protocol. Or guys launched the alliance around it and then we had a telegram channel and a lot of people joined this alliance and kind of everybody cuddled around this standard but not really developed it further or actually started to use it.
00:07:31.706 - 00:08:22.720, Speaker A: So one thing is having a standard, the other thing is having alliance for a standard. But the actually important thing is having people use it and make sense of it. There are also problems, especially with the earlier version of seven to five, is that it's very complex and it's very specific also in how you do key management and how you do certain things. And that kind of led a little bit to, I would say, a stifled progress or speed of adopting it. So we had some discussions with people there and we came up with Es seven to five. Actually, Taylor came to me and said, hey, here I have some ideas and let's talk about it. And that kind of led to the ESC Seven version five, version, version two.
00:08:22.720 - 00:09:08.010, Speaker A: And the interesting thing about it, it completely made it simple. And I think if one thing is key to success for a standard, it is simplicity. So ESC 20 was kind of the reason of why it was simple to use. And Es 20 and ESC 75 version two in my opinion, is also key of why it could be very successful because it's so simple. So in effect of what this does, it's like, okay, this is a smart contract which has an owner and there's some key value store in there and there's a generic execute function. So it's actually not a lot of things. The execute function is actually important because that allows you to do a lot of things on the blockchain.
00:09:08.010 - 00:10:01.742, Speaker A: But in its core essence, what is YearC seven to five and not forget there's more to standardize on top of that. So it's not the all in one golden solution, but it is a very key piece because it is the core piece of an onchain account. So basically we store everything currently on keys. If we replace this by a smart contract based account, we can add a few properties which we didn't have before. And one is obviously I can use my account from different places, which is exactly right now the problem. So we all end up having MetaMask, maybe having some ledger, maybe having some other five apps. And what happens? We all use different accounts in all of them, have different amounts of ether or assets on all of them, and some, we don't even know them anymore that we have.
00:10:01.742 - 00:11:13.906, Speaker A: And we tend to basically not use our on chain accounts often. Right? You basically have one account per app which can be useful but can be very hard to manage especially when it comes around dealing with different type of games or wanting to access your account in different places. So the smartphone based account basically allows you to manage it because it has this owner address. So owner means that there's one address that can control this account and this one address could obviously be a simple key, it could be a very simple private key which could be even the first one you generate in your application. So think of application starts, it generates a key under the hood. This key does not need to be safe because it is a throwaway key you just use initially and the moment you get more value to it you can make it more secure. So you could even think of taking this key and send it via email as a backup process so that in case you lose the app or the phone in the next few days you can easily reinstantiate your previous account.
00:11:13.906 - 00:12:36.702, Speaker A: I mean if we think about it we use email today for setting our password all the time, right? That's our security measure we have. So email, if you have access to emails, you have access to everybody's accounts. The email is the username and the way to reset the password, that's already a funny thing. So that's the security measure we have. So why not sending a private key or some kind of generated link or so directly to this email? The moment you get actually value on your account or you use it more often for something, then you can actually attach a multisig and have that multisig being the controller of the account and that multistick could be ignosafe. It could be a complex permission contract that allows certain parties to do certain things through the seven to five account and others not so think of like you are a company and the seven to five is your company's official address. If you have a commission contract where the intern can actually talk through the official address but only can talk to certain accounts or certain smart contracts and call only certain functions, you can have your intern use the official account without any kind of security loss or it could be just a simple multi SIG on top of this, this allows also social recovery schemes and whatever else.
00:12:36.702 - 00:13:39.522, Speaker A: Because whatever we come up with better ways of managing keys, we can attach the same existing account or to multiple of those. The important thing also is we can have metatransactions we can use the gas station network or other relay services within those key manager accounts and suddenly completely hide the fact that there is a fee to be paid. The future of Blockchain should be the way of how the Web Two works today. Meaning the application developers or the company who does it should build the should pay for the usage at least to some degree until there's a way to recoup the payment. I mean today nobody is paying for servers of applications that we just download them and use them all the time. It should be the same with Web Three. The relay transaction service is actually the key piece to make it easy, but this allows a lot more things.
00:13:39.522 - 00:14:42.840, Speaker A: So this in the first instance creates a manageable account. So now I not only have one key, but I have a key or an account that I can manage in all kind of ways and we can invent a lot of new things and how we manage those, but I can also attach information to it and that's what this key value store is for. So the key value store is bytes 32 and bytes as value. This means we can come up with all kind of things that we allow to be attached to such an account. And this can be completely random things of links to reputation systems or whatever. For example, you could simply attach an avatar to this account to make it somewhat cool and identifiable or the company's logo or whatever. But you can also link to all kind of other off chain, more identifiable data that you don't want to reveal on chain but it somehow should be referenced and linked to this public identity or the public account you have here.
00:14:42.840 - 00:15:20.420, Speaker A: And whatever we come up with batches reputation systems, linked tokens, whatever. I mean you can just on this address have a lot of NFTs sitting or batches whatever, but you can also link to an extra reputation system sitting in another smart contract that allows a lot of flexibility. And because there's so many more things we don't know what is coming. Having a key value store really allows for all kind of new things. We don't need to think about everything right now. And having defined these five things you can do on an onchain account. It's an open ended system.
00:15:20.420 - 00:16:07.374, Speaker A: Yeah, that's the point. So that actually creates a manageable verifiable account. So using this as the default and the beauty here is you can start out with a key in your application. The moment somebody purchases something or does an action which somehow creates value or money spent, you can on the fly just create an account for him where this key is the owner. The beauty is that now this person could actually take this account and take it into another application. So if we all start to use the same default account standard, you can take your account across all of these different applications and it's a lot more manageable and it's a lot more easy to interact with on chain things. So that can be rather cheap to deploy.
00:16:07.374 - 00:17:03.554, Speaker A: I mean, Ether transactions 21,000 gas 32,000 for deploying a library. That can be as cheap as it can get and it basically could be a long lasting manageable account. And because it's a smart contract and smart contracts can talk to other smart contracts, that's the big, big magic thing which I guess a lot of people outside of the Ethereum space have not fully understood why Ethereum is awesome. And the EVM in fact is because of that fact that you can talk to other smart contracts that kind of makes your on chain account the actor on chain. This means for other systems outside it's the same like before. If a key is talking to you or a smart connect, you don't care. In fact, here you can even check the smart connect, read some information you need, maybe some verification or maybe some attached claims you somehow need and do something with them.
00:17:03.554 - 00:17:29.660, Speaker A: So message sender. It doesn't necessarily need to be your person. This could be one account you use. You can have 50 if you want to. I guess we end up with just a few. But you can use them for different personas. You don't necessarily need to upload your picture and then go to the government and put a proof on your on chain account just to prove that this is your account and then show everybody what you do.
00:17:29.660 - 00:18:54.774, Speaker A: But one of the biggest pieces in our society is actually transparency. We are on Twitter and on Facebook and all of these platforms because we want to express ourselves. So that expression needs a identity you can actually or an account you can actually take around which you create, right? You take care that whatever is on there is what you really want to put out there and seven to five can be that also for companies, also for organizations. Technically speaking, the Ethereum Foundation should have a seven to five account and not the Ethereum multistick from three years ago being the official address which we all look at, right? So it's your onchain account and it should be your gateway to decentralized world. And if you want to do identity then you rather look into off chain solutions like Verifiable claims. Three C does great work on that and there's a lot of projects like Three Box and Ident, three and Uport and Yolocon which are working on making these kind of like real world identities work which are not necessarily on the blockchain or only have slight pieces on the blockchain. So what we have done is there is the easier 75 alliance obviously there is the official or the current implementation of the seven to five version two as well.
00:18:54.774 - 00:19:37.800, Speaker A: There's obviously the issue where we discussed currently the main thing we are doing. So the standard scenario. So I'm working on this project, Luxo. So this is a blockchain for the new creative economies, how we call it, or for the lifestyle space. One important thing here is this is the crowd of people who does not know tech nor want to understand blockchain, but they might want to create tokens or own things physically and digital. So you need to make it easy for them to interact with the blockchain. So we are developing and iterating on standard scenarios means like different standards, like seven to five, like digital certificates and others.
00:19:37.800 - 00:20:22.878, Speaker A: We are kind of like trying things out, how this could work in a whole flow together, how it can own token. There's a new standard we proposed which is the lowest one. It's actually a universal receiver standard that probably is a whole discussion itself. But we have in very short, we have this problem of many tokens implementing different type of receiver functions. So 77 has token received USD two, two, three has, I think also something with token fallback function or whatever they call. So everybody has different function names. If I want to have a generic account, like in seven to five, I run into the problem that I have to implement at least like five different functions to receive different type of tokens or NFTs.
00:20:22.878 - 00:21:05.646, Speaker A: If we use a universal receiver, basically one common function name that has a type and some data you pass with it, you are able to receive everything, even future assets, because you could upgrade either this part that receives stuff or just let your interface deal with whatever you received. So the universal receiver is a very incremental piece in an on chain account, for example. And that's something we proposed in our standards repository. We call it Luxo Standards Process LSP. So that's very much like the EIP repository, just that it's. Oh no. Oh, your password.
00:21:05.646 - 00:22:07.670, Speaker A: Sorry. So the only difference is that it's the blockchain around this lifestyle arena so we can discuss in a more calm space and it's not already so totally busy with a lot of competing standards. We are in the standards war. Everybody has the better standards and we don't talk anymore about more complex interaction models. And the thing about the standard scenario and also the LSPs we promote here is that we think not only about the individual standards, but how this works in concert. How can I make sure that I can easily read a portfolio of a given address? How tokens interactive identities, how identities can receive, for example, different tokens, including future ones. So there's a lot of things we should think more about how stuff works together and not just everybody comes up with their standard and now we have one little more building block, but five of them and then they all don't work together.
00:22:07.670 - 00:22:21.034, Speaker A: And accounts reading tokens, for example, is super complicated, totally hacky. So we want to have composability means, we need standards that kind of fit together. There's already a question here.
00:22:21.152 - 00:22:56.180, Speaker B: Please, just idea for ERP that we get real world application and reported as a county and then people solve the technical problems to help in the real world thing. And the other thing I'm asking about, what about doing a library? I don't know how it's going to be injection in the smart contract but it's way like when you use this you are going to have verification in a decentralized email.
00:23:00.250 - 00:23:03.830, Speaker A: I don't know how certification verification.
00:23:06.090 - 00:23:13.160, Speaker B: Maybe one of us can start working on it to have a digitalized certification as it gets more level of security.
00:23:14.830 - 00:23:18.300, Speaker A: I mean you're talking about example exiting your onchain account.
00:23:21.950 - 00:23:31.806, Speaker B: I just contract and I use the library so implement it with different so.
00:23:31.828 - 00:23:54.582, Speaker A: Basically libraries for smart contracts. I mean Open Zeppelin is kind of like the biggest library for standardized smart contracts we have. I don't really understand the question. Is this something like an open source? I mean Open Zeppelin is kind of open source but you're talking about how can other people contribute with different pieces or how do you have a how.
00:23:54.636 - 00:24:16.270, Speaker B: We are going to have verification, doing email verification in one line of code. I want my ERC 725 to have email verification. So I just added like we are doing, we are going add level of verification.
00:24:17.970 - 00:25:18.706, Speaker A: Okay? So if you want to kind of attach information like this, it obviously belongs into the set data, the key value store. If you want to have email verification you always have to think about this is your on chain account so you have to teach your user of what they should and shouldn't do. I mean, for example through interfaces we know that when we post something instagram it's pretty public so people are not posting their private naked pictures. So here we have to treat it the same. You're posting it on chain so it could potentially be read by people. So also making sure that what you put that this is a public persona you're creating here versus maybe your private persona. If you want to verify your email address then I guess there's a service which should verify that and you could simply attach a signed message into one of the key value store which says okay, we checked the email and that's yeah, that's what you would do.
00:25:18.706 - 00:25:55.440, Speaker A: I mean either this or there's some kind of like registry which does like a verification. For example, your service could have an extra smart contact with just verification and then in the key value store you simply link to that registry. That could be another way. So the beauty of this key value store is it can contain data on its own but it could be also simply referencing other places to go look. And if we standardize these processes we exactly know what to do. Unless each key value store we define can be very different. We can come up with a lot of cool things to build on top of an onchain account that's the beauty of it.
00:25:55.440 - 00:27:08.182, Speaker A: Yeah, there's a question. So before you're talking about using seven three four to activate controller contract contracts presentation, you're more saying, okay, we can use like say no to state. Yes, but I guess my question would be what would be the advantage instead of just having Gnosis safe be both the proxy and controller contract still on chain? Because you can upgrade your key management, but you could also upgrade the Gnosis. I mean, you can build it that it's all in one contract. For example, the owner address could be itself, you could make enough I mean actually hatrian from wallet built exactly a seven to five upgradable contract where you basically have one address which contains the key value store and owner and then additional management key systems you can build it as well. On the end your wallet only needs or your interface only needs to know that's the address that's the owner either it's the same address or it's a different address and then it has to look up what standard this is, what kind of key manager thing it is, so you can deal with that as well. And then you can interact with this account in a simple form.
00:27:08.182 - 00:27:41.774, Speaker A: It's just a key which you have in your wallet, but yeah, could be in the same account. I think keeping it separate makes a lot of sense because what I see is happening is you have and I know the time is up just to keep it short. This permanent account 75 is probably something we want to keep for a while and use it in maybe some games or whatever else. So it's a permanent thing. We want to be secure. The key manager is maybe something we can upgrade over time. So having this in a separate smart contract keeps the risk lower.
00:27:41.774 - 00:28:36.430, Speaker A: For example, the Universal Receiver contract, the contract which knows how to deal with stuff you receive, should also be a separate module because I assume people will upgrade that very frequently. And if you all pack into one account, then suddenly all of this code can write into the same slot, potentially overriding all of your important stuff you have in there. So keeping this in separate addresses, which cannot really do things on the other side, makes it more safe. I mean, I assume there will be a future where people go to website and say hey, download this new Universal Receiver contract because now it's called blah blah blah blah blah blah and then you just go ahead and upgrade your account with this. And if this would be the same account, you could maybe just move your assets around or override your storage values like this. The worst thing it can do is notify your interface wrong with a wrong lock or something like this. Cool.
00:28:36.430 - 00:28:38.460, Speaker A: I think that's it. Time is up. Thank you so much.
