00:00:00.250 - 00:00:35.922, Speaker A: Ow. That's so much easier to be loud. Oh, my goodness. Okay, so before we have any slides, I'm just going to tell you a little bound about me. I'm Carl. I'm a contributor to the optimism collective work at op Labs. And today we're going to talk about the op stack.
00:00:35.922 - 00:01:02.794, Speaker A: It is op and the super chain, which you will hear once and you will never forget, because it is a sticky meme. Sticky meme. Now. Well, my slides have arrived just in time, like Uber eats. Okay, this is going to be a fun talk, let me tell you. Let me tell you. So, as usual, I have a bajillion.
00:01:02.794 - 00:01:30.826, Speaker A: Bajillion slides. So in 2018, we set out, I use. We very liberally, we set out to build plasma group. Plasma Group was a nonprofit focused on scaling Ethereum with layer two technology. We wanted to unlock tons of applications, bajillions of transactions per second. And so we sailed out on Ethereum cyberspace, following Vitalik's doctrine, following his advice. We knew what to build.
00:01:30.826 - 00:02:13.714, Speaker A: And so we went, and in fact, we did some cool stuff last Devcon, we talked, we introduced optimistic roll up, and we introduced the Unipig, which was like the first implementation. And it was pretty sweet, if you do ask me. So, Ethereum, we did good things, good things for Ethereum public goods. This was open source software. It already got forked immediately. But guess what happened? We could not get funding for it because we were a nonprofit, and Ethereum did not have the public goods funding infrastructure that we needed to support the building that we were doing for the public good. No bueno.
00:02:13.714 - 00:02:41.310, Speaker A: No bueno at all. Anyway, so we formed optimism and we set out to not only scale Ethereum, but also fund public goods. Fund Ethereum, public goods. Optimism, public goods. Build the community, push the community forward. And so that we did not realize it, we thought it was going to be like twelve people at the, you know, doing optimism. That was an absolute rabbit hole.
00:02:41.310 - 00:03:39.426, Speaker A: And so this is a story all about how the op stack was formed. And now I'm going to tell you about how the op stack became the super chain and that powered the optimism collective, the social technology, which I hope we can use to fund public goods, to align people, to really make a serious difference and dent in the way that we live our lives in the future. Millions of people, and really billions, in my humble opinion, maybe trillions if we go multiplanetary. Billions of AI, really more than that. Trillions of transactions, actually way more than trillions, that's for sure. All of these things promoting humans over capital and impact, making impact profitable, right? We need to be expressing what we want as impact and make that profitable. That's public goods funding really, at the end of the day.
00:03:39.426 - 00:04:03.386, Speaker A: So optimism collective, that's why we're here. But that is not the story. Let's go. Leroy Jenkins, the rough start. So this is the whole journey. A whole journey, rough start, right? We formed some, terraformed some land in ethereum, cyberspace, and created your little community and built an Ethereum layer two that was EVM compatible. And it was pretty cool.
00:04:03.386 - 00:04:37.522, Speaker A: But to be honest, it was not easy, not at all. We had built a roll up, we had built a fault proof, but it was complicated, it was hard to maintain, it was difficult to onboard new people. This was not the easy sailing that we thought we were going to do. We were like, yes, we know how to build it now let's put it into production. Wow, this is really hard. Really hard. And so by the grace of Ether's Phoenix, the God of rationalist retroactivity, we happened to be eating dinner.
00:04:37.522 - 00:05:24.546, Speaker A: And we saw in the back corner of our eye George Hotts, literally the, you know, founder of Comma AI, builder of really, really good open source production software. And we were like, george, yo, come through. And it turns out he knows Ethereum and like new Ethereum layer two. It's pretty, you know, George on his little journey, kind of stopped by our little island, said, what's up? And he looked at our code, and I'm not going to lie, he gave us a hard pill to swallow. He said, one, he said, you have 100 times the lines of code that you actually need for this. Two, every line of code should be worth at least $100. That means the cost of maintaining it, the cost of people learning it.
00:05:24.546 - 00:06:14.354, Speaker A: It is expensive to write lines of code, even a comment. And finally, the goal, your goal should be to upstream to Ethereum and build software that is so simple that it can be standardized and built on top of. That's your goal. And so to kind of prove his point, he was like, okay, let me take this compiler that you have, that was thousands of lines of code, and let me rewrite it in, do it right and turn it into 300 lines of code. That was the beginning of the formation of our north Star towards simplicity and standardization. And so, of course, as jihad does, he left. And then chapter two, we finally had our north star, and so we could start measuring progress towards it.
00:06:14.354 - 00:06:38.694, Speaker A: We were going to boil our code down to its essence. We were going to reduce our guest diff to less than 1000 lines of code. That was basically our whole roadmap at the time. And so we went to coding our little gerbil selves. All these are gerbils. Well, they're really hamsters, because hamsters actually are cuter than gerbils. Anyway, I'm sorry, gerbils.
00:06:38.694 - 00:07:02.594, Speaker A: Okay. We started making improvements to our l two island, right? We terraformed the land further. We started making real progress, simplifying our code. It was easier, and we became fat gerbils off of our great successes. And so we had made some serious progress. And in 2021 Q four, we released our EVM equivalents upgrade. And that thing has served us well.
00:07:02.594 - 00:07:22.140, Speaker A: We have been EVM equivalent for basically a year now, and fast as Ethereum. And it has been nice. It was a beefy release. It was fantastic. But our job was not over. We still hadn't finished because Johat came back. He just popped in and he said, all right, let me tell you something else.
00:07:22.140 - 00:07:33.918, Speaker A: Well done. You got rid of a lot of your code. That must have hurt. That is hard. But your proof system is way too complicated. Still, you're going off the deep end here. I can help.
00:07:33.918 - 00:08:06.310, Speaker A: And so what he did well, he contributed canon. Just this really simple proof system. And why was it so simple? Well, it was because it separated the client software from the proof software, from the proof layer. You compile the client down to the proof. And in fact, Vitalik at the same time was suggesting the same kind of architecture. But George actually took that and created a pretty solid version that people have been playing with ever since. And that showed us something else that we hadn't thought about before.
00:08:06.310 - 00:08:43.522, Speaker A: That showed us the power of modularity. The fact that he was able to achieve this EVM equivalence was because he split it out into two different components. And so, right, EVM equivalent fall proof, less than 4000 lines of code. The client compiles to the proof, and it showed us that power. Now we had a north star, but for our goal of reducing our geth diff down to less than a thousand lines, now we had a path to achieving it. And so we also, at the same time, happened to be listening to some nice Lex Freeman episodes. And this is one of my favorite moments in every podcast that I've listened to.
00:08:43.522 - 00:09:21.370, Speaker A: Basically it's just this line is when things are beautifully done, usually there's a well thought out set of abstraction layers. It has the thinking about the problem space, slicing it up and then going at it. That mentality, it changes the game for software development and architecture. So he's off again. And next up, the last mile, right? We had just made this ten x line of code reduction, but we still had five x too many lines of code in Geth. It was crazy. And we still had ten x too many overall.
00:09:21.370 - 00:10:06.638, Speaker A: So what did we do? Well, turns out that we started coding, and we noticed that e two was coming to the same realizations that we were having as well. They realized that they needed to modularize the e two clients and make them talk to each other via the engine API. They realized that currently it was too tightly coupled, too monolithic. And so what did they do? They took the client software and they split it further into consensus and execution. That's why we have these consensus clients and execution clients so well. We saw this eth two consensus. We were like, we could just write a roll up consensus client and boom, slot it in in the same way.
00:10:06.638 - 00:10:40.558, Speaker A: And now we can reuse all of these other execution clients, like Geth, like Aragon, et cetera. There's so many. And this gives us that multi client ecosystem that is absolutely critical for securing a chain which has billions of dollars. We cannot stop with one client unless you're going to formally prove your client. And good luck. And anyway, formal proofs are like two clients anyway. Okay, point being, we finally had our golden ticket to a less than 1000 line of code diff in gas.
00:10:40.558 - 00:11:08.862, Speaker A: And so we got to build. And in 2022, terraforming, building cool things, and boom. In our bedrock release, our upcoming bedrock release, we finally have that commit, that single commit that turns normal geth into op Geth with less than 1000 lines of code. So 821, less than 1000. We achieved our goal. We got to have a little hamster celebration. Gerbil celebration.
00:11:08.862 - 00:11:37.580, Speaker A: We include all rodents in this talk. The bedrock release. Finally, we had created this code in a simple, modular way. We split up consensus, execution, and the proofs, and we renamed the proofs to settlement because it's more mimi. And boom. We had achieved that goal of simplicity and standards. But then something unexpected started happening.
00:11:37.580 - 00:11:54.578, Speaker A: I did this from memory. I have not refreshed the actual sound. I just know the sound anyway. Ratata. Okay. No. We started getting forked literally all over the place.
00:11:54.578 - 00:12:46.210, Speaker A: It is absolutely mind boggling, right? Multiple people set out, took our code base, forked it, set up their own settlements. And further, it got crazier. Some were modifying EVM, were modifying the EVM and the execution layer in Geth, and some were modifying the actual roll up part of it to make it a plasma so that you don't post the data up front. Like all of these forks. And I'm not talking about like pet project forks, I'm talking about like mega. You look at l two b, you got the little ops shout out, we got some forks in the room. So we had created the consensus layer, execution layer, split, and then things got crazier.
00:12:46.210 - 00:13:23.818, Speaker A: Guess what next? Guess what next? Well, if you were at a talk like 5 hours ago, you would know what next. Someone literally took the code base, forked it, and made a 3d survival game that is fully on chain. Literally playing something that is unrecognizable, brand new software and literally every single block I just got to momentarily. We're not talking about like, oh yeah, you get an asset and now you have an NFT or something. No, I'm talking about like you mine a block and that's a transaction. Or you put something in your inventory. That's a transaction.
00:13:23.818 - 00:14:04.838, Speaker A: That is crazy sauce, right? Stuff we had never thought was possible. And they're modifying it, right? Like we modify the roll up to become a plasma for extra scalability and modifying the execution layer and wrapping it with mud. Shout out to mud, making it super fast, right? And we get to reuse the whole settlement layer code base for that process. And next, someone took canon, literally made it prove a game Boy emulator so that they can then literally play Pokemon and fault prove it. Literally having a Pokemon roll up. It doesn't make sense. It's like ridiculous.
00:14:04.838 - 00:14:39.886, Speaker A: What you can really do with this code. The sky really is the limit, right? You have the rust programming. They turned canon into rust, all of these things, because we were building open source, we were building foundational modules that stand alone and are elegantly built. So we got all these new forks, all these new little islands out in ethereum l two. And then our north star of simplicity started bearing fruit. Great, exciting. So end.
00:14:39.886 - 00:15:03.146, Speaker A: Thus this begins a new era. It creates. It was time for branding because our code base had no name, it was just the code base. It's like, that's kind of boring. So we're like, hey, let's turn this, let's flip it, let's make it cool, let's make it fun. Let's call it the op stack. Now everyone is using the op stack.
00:15:03.146 - 00:15:41.398, Speaker A: They're contributing to the op stack, they're giving back to the stack. We're all building on the stack. And so build the stack, build open source public goods, push the ecosystem forward. So the op stack, what is it? It's our open source software stack, designed to power blockchain ecosystems built for the optimism, collect. So that includes, of course, what we've been talking about this whole time, the whole chain software, right. The decentralized stack required for spinning up chains, the consensus layer, execution layer, more layers to come. Literally, this is just the beginning.
00:15:41.398 - 00:16:09.198, Speaker A: Additionally, it also requires a governance layer. Things that we're building, such as the identity layer, the retroactive public goods funding, all of these things need to be built in a modular way so that they can be reused. And all on top of ethereum, of course. Where are we right now? Come on. What's on my shirt? Now we are in Devcon. Actually, that was a great transition I did not mean to make. We are in Devcon, in case you didn't know, talking about the op stack.
00:16:09.198 - 00:16:38.294, Speaker A: And so this is kind of the time that we're just really talking about it. And that means that this story is bridging into the future. Okay, now we're in the future, y'all. Okay, so everyone in this future, in our future, everyone's future contributing back to the stack, right? With shared modules. This is the lesson I literally came from, a talk on practical pluralism. Everyone is able to share base layers, share modules. That's how innovation happens in this space, and we can all benefit.
00:16:38.294 - 00:17:04.942, Speaker A: We can literally push the ecosystem forward. And so there's lots coming down the pipeline, literally so much. We have this really nice code base that we're releasing very soon with bedrock. It's super hype. It's clean. It's like the cleanest. But there are things that we can make improvements to, such as introducing multiclient fault proofs, such as introducing multiclient ZK proofs.
00:17:04.942 - 00:17:53.966, Speaker A: And critically, this means that deploying one of these op chains, we're calling them, it doesn't tie you to a single proof system. It doesn'tie you to a single technology. You can have a ZK roll up with a seamless upgrade so that no one even has to notice. You're just lowering the withdrawal times in the background, right? These kinds of things happen because you have clean APIs where you can separate and plug things in. And additionally, we got plasma, consensus for some ZK plasma for super scalable, you know, we got Pokemon execution, apparently for a ZK Pokemon plasma, bitcoin, whatever. The sky is the limit, really. So everyone can benefit from these shared modules.
00:17:53.966 - 00:18:29.610, Speaker A: Really nice. So one person creates a little greek statue, which is, of course, a great contribution to the op stack, and boom, now it's in the op stack, and boom. Everyone can adopt it, no problem. It's great. And by the way, and retroactive public goods funding, right? We're not doing this. And the whole reason why we got into this thing was because we wanted to contribute back to the open source software, the stack, and then make sure that we would get paid even though we were building public goods. And so, of course, people got to get paid for their great greek statues.
00:18:29.610 - 00:18:47.880, Speaker A: So with everyone contributing, everyone gets paid. Everyone's happy. Let's go. Plasma group's dream is starting to be realized. All right, well, that's not all, y'all. That's not all. Because right now it's like, oh, there's these little islands, these op chains, and they're doing their own thing.
00:18:47.880 - 00:19:33.406, Speaker A: But the reality is, we are in this together. Experimentation cannot, should not, must not equal fragmentation. At the same time, as we're experimenting, we need to unify, we need to bring the user experience, the developer experience, everything together, because it's better, right? So that means that we're standardizing off chain security. When you reuse these modules, you don't have all these crazy bridge hacks literally every week, because everyone is running the same software, benefiting from the same Lindy effect of that software. It's all proven, formally proven, multi client. Whatever it is, we need to standardize because it makes everyone stronger. Additionally, standardizing off chain tooling, we noticed this with the EVM equivalence upgrade.
00:19:33.406 - 00:20:22.718, Speaker A: Everyone got to use their tooling from before. And standardizing off chain governance, everything from building governance modules to even introducing people into the collective through an identity layer so that we can have democratically run governance, all of those things are absolutely critical for people, for us to share as a community. And it's important to note that just because you have two different op chains does not mean that they cannot communicate atomically with one another. Right? You can send a transaction to one op chain and have a flash loan atomic swap. This is something that is very possible, and it is enabled when everyone is running the same software and even shares a sequencing layer. So no bridging. Bridging is lame.
00:20:22.718 - 00:20:45.260, Speaker A: I don't like bridging. I like doing things. That's not a doing thing. That's a doing thing, to do a thing anyway. Very, very. That's how we design things. I mean, really, it is actually, in some sense, okay, the op stack is not about pushing people apart, it's about bringing people together so we can all have a gerbil party together.
00:20:45.260 - 00:21:28.322, Speaker A: And so, talking too loud now, the final evolution, right? We are doing all these standards, we've got all this composability. We're getting to the point where the software stack is maturing. It is this one thing we're all contributing to. What does that mean? That means that we are starting to form a superstructure, not just defined by this or that op chain doing this thing. We're actually bringing people together with the network effects of cooperation to form something that is entirely new. And what is that thing? Well, if you remember the beginning of the talk, you might start to find out. As the islands configure.
00:21:28.322 - 00:21:46.126, Speaker A: Bona do. The super chain. We're back, baby. The super chain. I told you I was going to do it. That would be weird if I didn't. Anyway, the super chain birthed through the op stack, through these standards, through the shared compatibility, the atomic composition shared sequencer set.
00:21:46.126 - 00:22:27.690, Speaker A: We start seeing this thing, the replacement of the web, two infrastack with decentralized alternatives that can power horizontally scalable applications. Like, we're talking about the Internet's computation. And this is not multichain, right? Op chains are not app chains. Everyone is a part of the collective. We're all part of this network. Additionally, this is not the monochain, right? Because at the same time, as we're all interconnected, we're also not the same, right? There is still multiplicity. There's still biodiversity, and it's horizontally scalable, so instead, it's all connected by the same technical and social fabric.
00:22:27.690 - 00:22:37.278, Speaker A: It is not the multichain. It's not the monochain. Tell your friends, y'all. It's a super chain. Let's go. But wait. But wait.
00:22:37.278 - 00:23:01.842, Speaker A: I just went ham on some tech. Let me just real quick bring it back to why we are here. Because I forget that literally, I get so into the tech, it's so much fun anyway. But we are here because we are forming new technological social institutions. We are forming the optimism collective. Why? We want humans to be valued over capital. We want identity, citizens, et cetera.
00:23:01.842 - 00:23:46.726, Speaker A: We want impact to be profitable. We want to build the optimism collective and just contextualizing this. Why now, right? Why is this so critical now? It's because we are entering a new era in the Internet, and as a species, period. Because I'm going to tell you right now, I'm a species in the Internet right now. My life is crazy. So today, we are living in a world where profit maximizing corporations, they are the ones that are operating our social public infrastructure, right? I can't post on the Internet without going through a privately owned corporation. Also, literally, we are confronted daily with global coordination failures, from conflict to biological stuff.
00:23:46.726 - 00:24:15.422, Speaker A: Like, it is getting terrifying. And we're doing this in this crazy melting pot world, very misaligned, all while we're about to birth a super intelligence that's going to look at our economy and be like, oh, yeah. The things that we reward in this system is extraction and bad behavior. Right. This is terrifying to me. Our future is not guaranteed. We need to build this thing.
00:24:15.422 - 00:24:35.970, Speaker A: This is not an isolated problem. So. Right. Unprecedented times require unprecedented social technology. The end of the day, blockchain is a social technology. It's what brings us together. It's the social problems that we're fixing on the Internet today, reframing those incentives.
00:24:35.970 - 00:25:04.766, Speaker A: So that's why we're building the op stack as an open source public good. Right. We're funding public goods retroactively. We need to be doing this on a massive scale. Our social institutions for funding public goods are not adequate. And we need to be providing people identities. So we measure human utility, not just shareholder profits, so we can maximize impact and give profit to people.
00:25:04.766 - 00:25:33.734, Speaker A: And that's why we're building the optimism collective. And that's because together we can make impact, equal profit and summon ethers. Phoenix. It's like the rationalist God that will give you money for making it come to be, and you're building public goods and you're being a good person anyway. It's just like the pull towards utopia, our better selves, ethers Phoenix. So that's how. Right.
00:25:33.734 - 00:25:56.640, Speaker A: We started out as building out. We built out this op stack because we realized that's how we push open source forward. That is going to become the super chain, and that will all power the optimism collective, which will align incentives and y'all please come contribute, align your incentives with us and stay optimistic. And thank you very much. All the loves, all the hearts. I'm out of time.
