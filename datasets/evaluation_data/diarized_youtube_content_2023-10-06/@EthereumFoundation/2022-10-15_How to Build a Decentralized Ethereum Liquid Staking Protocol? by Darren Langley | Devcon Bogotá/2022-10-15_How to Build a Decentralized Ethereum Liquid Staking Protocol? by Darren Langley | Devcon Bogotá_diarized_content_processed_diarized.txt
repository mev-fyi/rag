00:00:19.200 - 00:01:05.028, Speaker A: Hello, everyone. I am Darren Langley and I work on Rocket pool, which is a decentralized liquid staking protocol. So at rocketpool, we've spent the last six years building our liquid staking protocol. So today I'm going to take you through some lessons that we've learned along the way. So in this talk, we're going to break down what is a liquid staking protocol, what are some of the design choices, what are the challenges of building a truly decentralized protocol? And then what are the opportunities? So, liquid staking. So liquid staking is built on Ethereum's proof of stake system. A little tangent.
00:01:05.028 - 00:01:41.996, Speaker A: I couldn't be more excited that ethereum is now a proof of stake chain. And congratulations to all the researchers, core developers and coordinators that have made it happen. It's fantastic. So when you stake, you are participating in Ethereum's proof of stake consensus. Why would you want to do that? So the most important thing is that you're contributing to the security of ethereum. You also earn staking rewards for being a good node operator. So Ethereum has a couple of kind of barriers.
00:01:41.996 - 00:02:19.840, Speaker A: Sorry? Ethereum staking has a couple of barriers. First of all, you need technical experience to run like a validating node. You also need a fixed 32 ETH per validator. The staked ETH is actually kind of naturally illiquid. It exists on the beacon chain earning rewards, but you can't really use it for anything else, which is by design. But most of the 32 ETH that you stake is not actually at risk except under the kind of most dire of consequences or situations concurrently. It's also a one way thing.
00:02:19.840 - 00:03:04.296, Speaker A: So withdrawals are coming soon, but at the moment you're staking and that's it. So the rewards from staking ETH come in two juicy flavors. The first one is consensus rewards, which comes from new ETH inflation. And then you get that by kind of performing your node operator duties. So that's attesting being part of a sync committee and proposing blocks. As I said before, withdrawals aren't available at the moment, but they will be potentially after the Shanghai hard fork. The next type of reward is the execution rewards.
00:03:04.296 - 00:04:01.280, Speaker A: They come from users, so they come from priority fees, which are the non burnt part of a transaction fee, and then potentially mev, if you're extracting mev that's actually available today and pretty much in real time. So how a staking protocol captures and then distributes those fees or those rewards is key to its design. So how does liquid staking work? A liquid staker deposits any amount of ETH into the protocol and in return, they receive a liquid staking token. The ETH that they deposited gets matched with the node operator. The node operator interacts with the protocol and deposits the ETH into the beacon chain. Node operators then earn rewards by being good node operators. And the liquid staking token accrues the value as yield.
00:04:01.280 - 00:04:47.020, Speaker A: So to unstake a liquid staker burns the liquid staking token and gets back their ETH or actually more ETH than they put in generally. And you can either do it kind of in a primary mechanism, or you can do it on a secondary market. So, this is the very basic outline of how liquid Staking works. But as we'll see, every step has some design choices and trade offs to be made. So why liquid staking? So, it's kind of important to know why you're doing this. What benefit does it serve? So, it turns out that there are significant benefits to ethereum as a whole. So, liquid Staking encourages greater participation.
00:04:47.020 - 00:05:48.480, Speaker A: That, in turn, provides greater security and decentralization. There's a little star there because it only contributes to decentralization if the validator set or the node operators are decentralized and not just one entity. Liquid Staking facilitates unstaking through, like, a primary mechanism, through the protocol itself or on a secondary market. So it reduces validator churn. It also fosters innovation and capital efficiency through the use of these liquid Staking tokens in DeFi. Okay, so, on this section, I want to focus on liquid token design, but there are some equally big design spaces on the node operator side and some definitely some interesting challenges on that side, as well. So, first thing you realize when you're designing a liquid Staking token is that node operators earn rewards at different rates.
00:05:48.480 - 00:06:28.296, Speaker A: They may also be penalized, and in worst case scenarios, they can be slashed. So, there's a couple of ways of handling this. The first way is to have a fungible token that shares rewards and losses across the entire protocol. Or you can have a non fungible token where rewards and losses are specific to each node operator or each validator. Then you can kind of have this hybrid of the two, although you got to be careful you don't end up in a worst of both worlds. Each of these approaches have some different tradeoffs, and you have to kind of weigh up which ones. So, the next one is safety.
00:06:28.296 - 00:07:27.440, Speaker A: So, there is ETH backing the liquid Staking token. So what mechanisms are in place to protect that collateral ethereum's? Proof of stake system is a very forgiving protocol, but it is possible to lose your stake either partially or, in the extreme cases, fully. Safety mechanisms built into the protocol need to account for things like slashing protection, aligning incentives, and general risk management. So, rewards. So, how are rewards delivered to token holders? How does the token reflect the yields that the protocol actually is producing? So, generally, there are two approaches to this. There's rebasing and non rebasing. So, a rebasing token, its exchange rate is like a notional one to one with ETH, but the quantity increases.
00:07:27.440 - 00:08:02.520, Speaker A: So the token increases in quantity over time. That's how the yield represents itself or gets delivered with a non rebasing token, the exchange rate increases, but the quantity is the same. Quantity stays constant. So the actual token increases in value over time. And there's definitely some kind of pros and cons of each of these, mainly that. So with the rebasing token, it's very simple to understand. You're literally getting more of the token, but it's extremely hard to integrate.
00:08:02.520 - 00:08:39.236, Speaker A: So if the quantity is changing all the time, that's not really compatible with most DeFi protocols. With a non rebasing token, it's harder to understand. And if you go down that route, you'll spend most of your life explaining to people what a non rebasing token is. But it is much easier to integrate. It's just a standard ERC 20, and it's supported by most D Five protocols. It actually turns out that a non rebasing token is more tax efficient as well. So it depends on your jurisdiction.
00:08:39.236 - 00:09:33.560, Speaker A: But with a rebasing token, you have like a taxable event every single day, whereas with a non rebasing token, you have a taxable event when you stake and when you unstake. So liquidity by tokenizing staked ETH, it can be traded on secondary markets, such as exchanges. This provides liquidity for people to unstake their ETH. So the price you pay on secondary markets is dictated by the market. So it may present a liquidity discount or potentially a liquidity like a premium with large orders. There can also be slippage. And so staking protocols can offer, like if they can offer a primary mechanism for unstaking ETH so that it can allow liquid staking token holders to actually swap back without the discount and without the slippage.
00:09:33.560 - 00:10:01.568, Speaker A: Both of these mechanisms of unstaking kind of reduce the need for validator churn. Okay, so now you've got your token out in the wild. Everyone's going crazy about it. You need to start building utility. These come in the form of integrations with other DeFi protocols. So there's kind of like a Maslow's hierarchy of DeFi integrations. It goes something like this.
00:10:01.568 - 00:10:32.792, Speaker A: You integrate into wallets and explorers first, then you build up some liquidity. This is the bit that takes time, a lot of time. To build up liquidity. You need to get breadth of liquidity and depth of liquidity. That's important to kind of get to the next phases. You also need to get good liquidity on layer twos because you want to build up support in those ecosystems and also provide good UX for stakers. So then the next layer is Oracles.
00:10:32.792 - 00:11:22.670, Speaker A: So once you've got some liquidity, you can get Oracles. The next one is DeFi protocols, particularly lending platforms, but also kind of options and index platforms and fixed income products and loads of things. The last one is vaults. So vaults are kind of like yield optimization platforms. They sit over top of loads of different D Five protocols and optimize that yield. So a decentralized staking protocol is a set of smart contracts that mediates between depositors and node operators, kind of escrows funds into the ethereum's proof of stake system and then back again on withdrawal. The protocol transparently distributes those funds and ensures that each party receives what they expect.
00:11:22.670 - 00:12:05.560, Speaker A: In short, withdrawal is aware of most of the action happens. Okay, so it's at this point in the presentation that I need to give a bit of a disclaimer. The information on this slide is not final. The Capella specification is still being kind of drafted, but at this point, this is what it looks like. So after the Shanghai hard fork, hopefully consensus rewards will be fully withdrawable or partially withdrawable. So fully withdrawn is a node operator initiated thing. So a node operator submits an exit message, they get processed by the beacon chain exit queue, they come into this withdrawable state, and then their funds are returned to a withdrawal credential.
00:12:05.560 - 00:12:45.510, Speaker A: At that point, they are no longer validating. They're done as a validator, okay, that's full exit. With partial withdrawn, you're still validating. And in fact, this is like an automatic and ongoing process. So this essentially SKIMS the rewards off the top. So you have 32 e is your kind of initial deposit, and then anything else you make on top of that will be kind of continually skimmed and sent to your withdrawal credential automatically by the beacon chain and the consensus clients. So withdrawal credentials are a key element of the Ethereum spec.
00:12:45.510 - 00:13:36.916, Speaker A: And they come in like two types. There's a zero x zero, which is this BLS signature credential, and zero x one, which is an ethereum address that receives the withdrawn funds. So most credentials in use today are zero x zero. And that's because they were introduced first and then much later, xerox one came ahead. So in the current plan, xerox zero credentials, we need to be converted into a xerox one to allow you to withdraw. And there'll be like this special kind of migration process that will facilitate that. So xerox one is important because it facilitates the development of these noncustodial staking protocols, essentially because the zero x one address can be a smart contract.
00:13:36.916 - 00:14:32.380, Speaker A: And so that smart contract can take custody of funds, it can deposit them into the beacon chain, into the deposit contract, and then when it withdraws, it can then distribute the funds to all the parties. So building a decentralized staking protocol is easy? Not so much. There are significant challenges to developing a truly decentralized staking protocol. First of all, permissionless, being an open and public piece of infrastructure is key to a protocol's success. And it's also important for its alignment with Ethereum. Being permissionless is a noble pursuit and it's critical for Ethereum for retaining its credible neutrality. So being permissionless subsequently leads to trustless designs, which I believe are much more resilient in the long term.
00:14:32.380 - 00:15:19.950, Speaker A: Like Ethereum itself, decentralized staking protocols have to rely on a combination of cryptography and crypto economics to balance incentives and penalties, ensuring that the participants have aligned interests. But it is challenging. But personally, this is what makes it interesting work. So scaling being a competitive market participant is important to ensure that Ethereum remains decentralized. Scaling a decentralized staking protocol is much harder than scaling a centralized provider. The two aren't even really comparable. A decentralized staking protocol has to rely on ingenuity to scale, but never lose sight of its kind of core value.
00:15:19.950 - 00:15:58.360, Speaker A: A decentralized staking protocol is actually a community, a community of node operators who are passionate about securing Ethereum. Scaling is certainly a challenge, but it is one that can be overcome. So reliance on Oracles so semi trusted oracles are essential for decentralized Staking protocols. Today, the consensus and execution layer are separate concepts. They've only just been merged together. So oracles are required to aggregate and report validator performance information to the protocol. Smart contracts.
00:15:58.360 - 00:16:53.102, Speaker A: There's actually an EIP that's being considered for Shanghai, and it's EIP 4788. What it does is it adds access to the beacon chain state route to the execution layer so that smart contracts can verify proofs about the beacon chain state. This is key to reducing the role of these semitrusted Oracles in decentralized Staking protocols. But it is important generally to combine those two concepts and allow innovation, particularly around validator status and finality on the execution layer. So what are the opportunities? Okay, so this might be a bit counterintuitive, but Ethereum doesn't need more stake. It needs more individual node operators. So I believe this quote is from Superfiz.
00:16:53.102 - 00:17:36.370, Speaker A: So. Thanks, Fizz. If you're watching, decentralized Staking protocols have an opportunity to redress the balance. So by lowering the collateral requirement for node operators, there are more potential node operators available. By streamlining setting up a node and running a node, it's easier to onboard new node operators. And if you lower the barrier to entry for spinning up a staking business built on top of a decentralized staking protocol, this allows a whole ecosystem of niche staking businesses to compete with large providers. More node operators.
00:17:36.370 - 00:18:19.690, Speaker A: The more node operators we have, the more decentralized Ethereum is. Being a node operator is not as hard as you think. Okay, so execution reward smoothing. So execution rewards. So the ones that come from transaction fees and potentially mev are extremely variable. This is because block proposals are chosen at random. So at this time, if you have like one validator, you'll receive approximately five proposals per year on average.
00:18:19.690 - 00:19:01.158, Speaker A: But you could get two or you could get ten. So this variability hits small node operators harder. Actually hard the hardest. As a decentralized staking protocol, there's an opportunity to provide a reward smoothing pool that participants pool their proposals to achieve a consistent return rather than this highly variable return. So a smoothing pool actually levels a playing field for small node operators. They can kind of compete with the larger node operators. This is particularly interesting when you think about mev.
00:19:01.158 - 00:19:33.566, Speaker A: Mev, you can have on average, you can earn a decent amount from mev. But every now and again there'll be one of these lottery blocks. The highest block I think that's recorded was 100 E block. That doesn't happen very often, but hence why it's a lottery block. But if you do get one of those blocks, then this is what the smoothing pool helps with. So I'm Darren Langley, I'm from rocketpool. You can catch me on Twitter.
00:19:33.566 - 00:19:35.780, Speaker A: And that's me. Thank you very much.
00:19:54.060 - 00:20:16.850, Speaker B: Hi, my name is Benjamin with Rubicon Finance. I wanted to ask, I understand rocket pool nodes are collateralized with RPL. How do you protect against a tail risk scenario where if the price of RPL ETH is dropping, the average collateralization of the network starts to fall? And how can the protocol become robust in light of basically relying on RPL ETH price to guarantee security?
00:20:17.300 - 00:20:57.496, Speaker A: So in actual fact, RPL is used as a backstop. So the first thing that they we so with a rocket pool node, the node operator supply 16 ETH and the liquid stakers supply 16 ETH. And then the node operator also supplies some RPL, like it's minimum of 10%. So it's about 1.6 ETH, but the ETH is hit first. So if they get slashed or if they're an absolutely terrible node operator, then it's actually their ETH that gets hit first. And then RPO is used as a backstop because you can actually lose a little bit more than 16 E in like the worst, worst case scenario.
00:20:57.496 - 00:20:58.270, Speaker A: Yeah.
00:21:03.680 - 00:21:19.824, Speaker C: Multipart question. Okay, so first part, how hard is it to run rocket pool node? Like, do you need to know Unix, or can you just run a script and it installs everything? Second part, how many nodes can you run on one powerful PC?
00:21:19.952 - 00:21:40.540, Speaker A: Right, cool. Okay, good question. So running rocket pool node, you do need to know probably a little bit about Unix. Maybe you can run it on different things. We don't necessarily support Windows, but you can run it on a Linux box. You do need to know a little bit about Linux. Spinning up a rocket pool node is, I think, pretty much four commands.
00:21:40.540 - 00:22:18.410, Speaker A: It's four commands and you've spun up a validating node. So we've streamlined the process. We have this thing called a smart node stack, and it streamlines the process of actually spinning up a node. We connect everything up for you, we handle upgrades for you. It's really easy. The other part of that question was that's all right, that is a hard question to answer. So terminology wise, a node is like the box that's running it, and then you have validators, so you can have a lot.
00:22:18.410 - 00:23:02.570, Speaker A: Now, whether that's a good idea or not is another matter. So what you would tend to do is you probably want to distribute across multiple nodes if you had a lot, but you can run a lot. Different clients, different consensus clients, and different execution clients have different performance profiles. But you can run a lot on I don't think we haven't modeled it, but it's in the hundreds. It also depends on the box. If it's a powerful machine, then you could do that's. Cool.
00:23:02.570 - 00:23:06.410, Speaker A: All right. Awesome. Thank you very much, guys.
