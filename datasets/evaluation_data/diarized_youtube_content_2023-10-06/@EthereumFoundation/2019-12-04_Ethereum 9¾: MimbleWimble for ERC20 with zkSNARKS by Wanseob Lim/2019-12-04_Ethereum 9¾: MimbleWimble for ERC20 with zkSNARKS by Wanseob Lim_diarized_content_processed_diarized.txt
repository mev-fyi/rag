00:00:25.170 - 00:01:58.180, Speaker A: For Nuns, which is a crypto community in Seoul where 70 people are living and working together. Recently I like a college and recently I organized Local Communities Developer Conference, which name is ETCo. So first, the 70 people in Nuns are all the crypto related people, but including me, we do not use MetaMask and Dai to split the bill after we have dinner together. It is because it is really hard to find my friend using MetaMask and use actually, in Korea we use Kope which is equivalent to Venmo to place the bill because those services are providing the features to find my friend using the messenger feature. So however, as the UX continuously enhances, it is becoming too easy to send my crypto to my friend using the ENS. So how many are using ENS here? Yeah, so many people are using ENS. Then how many hastas to use ENS? How many hastas to use ENS? Yes, not many, but people who use ENS frequently definitely feel that it is really private list.
00:01:58.180 - 00:03:06.840, Speaker A: So if I know your ENS, then I can very easily know how much eid you have and how much dai you have lent from MakerDAO or even how much you got liquidated from the maker dow. By just typing your ENS into the Ether scan, either nine and three quarters comes up as a lightweight private transaction solution. So would you please figure out does this either 93 quarters means it's a kind of a Harry Potter. It's a gateway to the magical work where we can use the Mimble muscle. So let's see how it works. The users can enter into the magical world by depositing years 20 tokens and then they go into the magical world. And using the Mimble in book bulb, they can make some confidential transaction each other.
00:03:06.840 - 00:04:26.340, Speaker A: And the relayer can aggregate the member in book transaction and submit the transaction to the Ethereum using ZK roll up. And the important thing is that the relayer also aggregates the fees and finally, the users can withdraw their money back to the Muggle world, submitting a valid proof. This is just a brief explanation about how it works. And now we're going to talk about the technical details about Ethereum three quarters. So the first priority of the design was how much Sikhishners friendly it is, and the second one was how much friendly it is, and the third one was how much business friendly it is. So I started to use the Mimble protocol first, because Mimble wimble is one of the lightest forms of building confidential transaction. So each transaction output consists of a randomness and a value.
00:04:26.340 - 00:05:27.106, Speaker A: And it expresses the TXO as a point on the elliptic curve using a Peter's commitment. So it can hide those secrets while it allows the homomorphic cultural agent. So it is a hidden life to send elliptic point of the curve. Therefore, using its homomorphic hiding features, we can verify that the sum of the inflow values and the sum of the outflow values equals. So you can see that the coefficient of the base point h equals zero becomes zero. Consequently, so we can also construct a transaction using this equation. But it's not enough to make a robust transaction.
00:05:27.106 - 00:06:43.278, Speaker A: Therefore, first because the zero sum verification works on a cyclic group, to prevent the overflow and the underflow inside the homomorphic calculation we need to restrict the range of the value inside the tso. And secondly we also add some metadata. In our case we concatenate the eschain address of the token we want to send and the expiration height. So the expiration height means that the contract will not accept if the block number exists the expiration height. And finally, to make sure this transaction is confirmed by the both parties, we add a schnorr signature by the sender and the recipient. But the problem is that actually it's not prevent the tracking of the transaction flow. So actually Green, which is the most popular memory implementation, secures the privacy by having no account and cut through it.
00:06:43.278 - 00:08:00.738, Speaker A: But on Ethereum we cannot prevent the check of the transition. So therefore nine and three quarters uses z cache's commitment nullifier scheme to hide the input TXL. So with the commitment nullifier scheme CK's nurse allow us to generate an inclusion proof without revealing the commitment and also prevent the double spending by using the nullifier which is deterministically derived from the commitment. Finally, so we append two more ZK snark proof. The first one is inclusive proofs of the span text which are inclusive proofs of the nullifiers. And the second is that the Mimble limbo proof it is because we hide the input TXO value. So it's not anymore able to verify the Mimble wimble using the homomorphic calculation.
00:08:00.738 - 00:09:23.550, Speaker A: So we need to make some ZK snurse proof that guarantees that all the hidden values are following the Mimble wimbled protocol correctly. The next part so next part is ZK rollout friendly data structure. Peter proposed Merkel mountain range for an efficient pan only Merkel tree data structure and Green is now using that in Ethereum 93 quarters it uses a slightly tweaked version of a Merkel mountain range that uses elliptical curve cryptography to compute the old node. So most of all in Peterson Merkel mountain range every node is the point on the baby jutu curve. So we calculate the leaf node by the scholar multiplication of the leaf position and the leaf item. And we calculate the branch node. The branch node value becomes the left node y value and the right node the multiplication of the left node y value and the right node.
00:09:23.550 - 00:10:35.910, Speaker A: Finally, the root value becomes the scholar multiplication of the width of the Merkel mountain range and the product of all peaks. We call this peak vein in Merkel multi range. So with this construction, a 16 bit Peters Merkel tree, which has 65,000 leaves, achieved 10 million constraints for rolling up 64 items at once. Additionally, because from Istanbul, the gas cost for electrical calculation reduces a lot, so it will be able to verify around 256 rolling of 256 items at once. So finally, we can jump up to the total performance of the roll up with the optimistic roll up. Just like plasma, we can use a challenge. System to skip the zksnard computation.
00:10:35.910 - 00:11:27.750, Speaker A: So therefore, we can reduce a lot of gas codes to verify the ZK snare computation in the on chain computation. Therefore, in Petersburg, Persian rolling up costs around 3 million gas per transaction. But optimistic roll up only costs about 147,000 gas per transaction. And in Istanbul, it only costs around about 50,000 gas per transaction. Actually, it's much expensive than the General Lola. It is because it contains a lot of secret. Snars proof to make the transaction as some confidential transaction.
00:11:27.750 - 00:13:18.966, Speaker A: But it is still very reasonable because the bear es 20 token transaction costs around 50,000 guests to 100,000 guests. So as a result, what we can expect through ethereum 93 course is a dow and some defined product using that. So first, anyone can be a relayer and they can decide their own transaction fee policy. But to submit the optimistic wallet, the relay should depart some stakes to secure the private stakes for the challenge system since therefore, being a relayer can be considered as a kind of a financial product which gives some revenue for the aggregated transaction fee regarding to the deposited state. Therefore we can also make a kind of a Dowel system like delegating some states to receive some dividends of the transaction fee revenue. So the future work is first one is optimization and the second is layer client and mobile client because we can also get some instant binality if we roll up without the optimism roll up. I mean, it means that if we compute all the sequencer computation, then we can get the instant binality.
00:13:18.966 - 00:14:11.578, Speaker A: But if we use optimistic roll up. We need to give some challenge period so we lose instant finality. Therefore, if we can construct a network of the relayers, then we can not exactly an instant finality, but we can provide some security of instant. Finality with the states of the relayers network. And what we have to do is definitely destroying the heart process, destroying the toxic base. So here's the summary. Ethereum three quarters uses Mimble Wimble protocol and coming, one nullifier scheme.
00:14:11.578 - 00:14:49.450, Speaker A: Together. And it uses Peterson Merkin Mountain Range for an efficient secure wallet. Therefore, it is able to pan up to 256 items at once. And the Optimist Wallet provides deterministic fraud proof without any DA problem. And also it reduces the gas cost down to 50,000 guests per transaction. So this is the implementation. So if you like that, please give me some GitHub stars.
00:14:49.450 - 00:15:39.110, Speaker A: Or thank you. Or if you like that. I'm looking for teammates or teams who can support this project. So if you're interested in this project, please let me know. So thank you have four minutes left, so you can ask some questions if you want. Yeah, we have four minutes. So you can go up, but there is a demo in terminal version.
00:15:39.110 - 00:16:53.806, Speaker A: Yeah. Show the demo. Yeah, but only a terminal version. You but yeah, I already prepared the generated proofs, centering proof and some sample transition. It soldier positive. Some years 20 and roll up some transactions. So the first round is roll up two memorable transactions which spend one coinbase.
00:16:53.806 - 00:17:55.990, Speaker A: So we can make some coinbase by depositing some years Chinese. And the second round is spending two hidden transaction outputs which is derived by the first round. So it means we can use two input CXOs for one transaction, one transaction. So if you have some memoimot transactional outputs, then you can aggregate them to use for a one transaction. So as I know many some protocol uses two inputs and two outputs. So there was the rolling of 64 items at once. So this is the result when we roll up 32 member transaction in Petersburg version.
00:17:55.990 - 00:18:27.820, Speaker A: Yeah. How long did it take to build? Pardon? How long did it take you to build it? I started to design from the June and finished specifications around July and started to build from August full time? Almost full time. Sure.
