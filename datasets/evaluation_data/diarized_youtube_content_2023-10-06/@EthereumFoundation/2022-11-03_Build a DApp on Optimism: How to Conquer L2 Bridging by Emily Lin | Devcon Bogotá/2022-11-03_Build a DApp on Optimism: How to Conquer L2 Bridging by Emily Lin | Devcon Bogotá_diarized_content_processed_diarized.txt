00:00:12.650 - 00:00:37.720, Speaker A: Hi, I am Emily. I am the truffle developer advocate. Today we're going to be talking about building a DAP on optimism, specifically talking about how to incorporate bridging into your optimism. Dapps, just want to give a brief disclaimer. I do not work for optimism, nor do I represent their opinions. However, I really love the project. Truffle and optimism have been doing a hot collab, and that is why I'm here today.
00:00:37.720 - 00:01:19.698, Speaker A: So, briefly touching on the agenda, I'm just going to give a crash course on l ones and l two s, assuming we have beginners in the audience, touch a bit on bridges, go into optimism contracts for bridging specifically. And then the best part of the demo, I guess a live demo maybe, with Devcon, Bogota, Wi Fi, building a DAP together. So let's start off optimistic roll ups. Here's a crash course. So for those of you who don't know, just brief introduction, right, what's a layer one? What's a layer two? Layer one, Ethereum bitcoin. That base layer. Layer two, that separate blockchain that's focused specifically on increasing transaction speed, scalability.
00:01:19.698 - 00:01:48.000, Speaker A: And what's really interesting here as well is utilizing Ethereum for data availability. So specifically, the point of posting transaction data and getting it from Ethereum. I do want to note one specific thing you might wonder. Layer two, specifically are defined by deriving its security from Ethereum. So if you think about something like a side chain, for example, they don't. So those are not qualified as a layer two. So that is basically the key caveat you need to think about.
00:01:48.000 - 00:02:28.042, Speaker A: So why do I even care about this? Why am I here again? If you've been around in the space, you've probably heard blockchain trilemma. It's a pick two out of three, decentralization, security and scalability. For those of you who in the Ethereum community, I hope we have all agreed that decentralization and security is the most important thing. Right? So what happens about scalability? Well, this is something we still really need to care about, because scalability affects gas costs and gas costs is going to affect the adoption of Ethereum. So this is something we really need to think about. And who's here to help us? Layer two. Okay, thank you.
00:02:28.042 - 00:03:08.822, Speaker A: Right, so definition again, of a layer two is to decrease l one congestion by bundling up transactions and submitting that to Ethereum. Again, things to note, right, gets its data availability from Ethereum, specifically deriving its security from Ethereum and helping us maintain that decentralized aspect so next piece, we're going to talk about optimistic roll ups because that's what we're focusing on today. I am not going to touch on zero knowledge. There are so many talks at Bogota about zero knowledge. So talk to them, not me, but to briefly touch about optimistic roll ups. Again, pretty self explanatory. You roll up a bunch of transactions and you submit it and post it once to the l one.
00:03:08.822 - 00:03:39.230, Speaker A: Again, this comes in two primary flavors right now, optimistic roll ups as well as zero knowledge to touch upon optimistic roll ups. What makes those different is they are optimistic. Right. So when we submit these transactions to Ethereum, we just assume they are valid. And you might say, wait, that seems kind of bad, right? Well, actually there's this thing called the challenge period. So essentially during this challenge period, anybody can come and say like, hey, I think this is wrong. And if they do that, they have to submit a fault proof.
00:03:39.230 - 00:04:16.542, Speaker A: And basically the fault proof basically either validates, hey, actually it was correct, and then it gets submitted to the chain. Otherwise, no, actually, yeah, some shady person did something and this transaction is incorrect. And so let's backtrack. So that's optimistic roll ups. Again, the challenge period is the part we need to focus on here right now. For mainnet, it is seven days, which is kind of long, which is kind of why people have started thinking about zero knowledge roll ups, because that is something that you just post the validity proof for. Okay, so I think that's covered everything in optimistic roll ups in hopefully less than two minutes because that's what I planned for.
00:04:16.542 - 00:04:38.514, Speaker A: So let's talk about bridges now. Again, bridges, I think pretty self explanatory. If you've ever walked on a bridge before connecting to blockchain ecosystems, things to note about bridges. Right. Again is this transfer of assets and information. So a lot of times we talk about transferring eth tokens, but you can also transfer arbitrary data. The other piece is we're moving towards a multichain world.
00:04:38.514 - 00:05:28.294, Speaker A: Basically, the point of that is to take in the pros of one chain to alleviate the cons. So when we're talking about l ones and l two s, we're talking about the pros of decentralization and security of ethereum, while alleviating the cons by using an l two chain for that scalability aspect. The important part with bridges is it allows us to call an l one contract function from the l two and vice versa. So if I'm on like optimism contract and I say, hey, ethereum contract, I want to call your function bridges, say, okay, we can do that. The typical way of doing this right now is this idea of locking assets. So it kind of looks like user one will lock assets in a bridge contract. The equivalent amount of token will be, I guess, created on the l two, and then when we want to put it back, all of that is burned off and then released for the person on the l one.
00:05:28.294 - 00:05:50.282, Speaker A: Again, big disclaimer. There is no bridging standard that exists yet. Again, a lot of research has gone into this. I think also probably one of the reasons bridges are a little bit unsafe, because it's totally a new frontier, right? So when we talk about unsafe or security, right. Bridge hacks happen all the freaking time. I don't know if you're on crypto, Twitter. I'm like, okay, cool.
00:05:50.282 - 00:06:37.642, Speaker A: I mean, as of August 2022, there is a study done basically 69%. I don't know if that was, like, fake number, but 69% of attacks have been on bridge hacks. And then very recently, actually, right before I was creating this presentation by BSE Bridge, rest in peace. But you did good for my presentation, because I got to talk about you on the next slide. But anyways, why does this happen again? As I had mentioned in that previous section about how bridges are typically run is it locks up liquidity, and that is like, a prime centralized location for bridge hacks. So something people might also think about when creating bridges is the idea of decentralized bridges. I don't know too much about it, so I'm not going to go into it, but you can kind of think about, like, that is a consideration you need to take.
00:06:37.642 - 00:07:10.034, Speaker A: And centralization is, again, a big part of why bridge hacks are so intense. So how do you fix this? Again, disclaimer. I am no security expert, but number one, learn from BSC. So, currently, the way these bridges identify and authenticate target and source blockchains is through its chain id. And the BSC case specifically did not check the chain id through the cross chain message. And again, something to think about. So, obviously, if you're building a bridge, maybe read up on all your predecessors and do everything they did, but better private keys.
00:07:10.034 - 00:07:48.642, Speaker A: Again, that's something we really care about, different ways of handling it, hardware, wallet, multi key chain system, et cetera. And then I think something people don't necessarily always think about is there's always that web layer, right? So the way bridges are surfaced right now is often through a UI. We talk about hardening your smart contract. Maybe one way to also think about how you harden security is at that UI level. There's a lot more. I added a link of some research that people were doing, but you could probably just Google and then read every single page because it's intense, guys. So anyways, yes, like I said, bridging is hard.
00:07:48.642 - 00:08:18.540, Speaker A: What are we doing here? We're actually going to go over Optimism's bridge contracts. They have already written a few contracts as well as provided an SDK for us to do this for a simple use case. Again, I think it's awesome because basically bridge contracts probably require a lot of security auditing. I am poor. I'm not a student anymore, but I'm poor. I can't do that. So optimism kind of has provided that ability for us to incorporate bridging through battle tested contracts as well as an SDK if you don't want to do any solidity at all.
00:08:18.540 - 00:08:42.862, Speaker A: So let's actually walk through what optimism has provided. So that first thing I talked about was transferring of data. So this is kind of the base level of what it looks like. There's two contracts called l one cross domain messenger, l two cross domain messenger. Again, these are pre deployed by optimism. So if you're bridging on optimism, you will be interacting with these contracts. You can get their addresses from their GitHub repo.
00:08:42.862 - 00:09:07.434, Speaker A: They will have one for each, one for each chain id. So there's an address for Gurley optimism. There's an address for Gurley, Ethereum, Mainet, et cetera. Kind of diving into this deeper. The way this works is essentially we have, I'm going to highlight probably the two most important functions in this interface. Specifically, the first one is send message. So that is what allows us to say, hey, I'm l one contract, but I want to call contract function on l two.
00:09:07.434 - 00:09:30.162, Speaker A: The way this works is, let's start over. I am ethereum contract. I am calling l two contract. That's the target address. So I'm going to input that in there. The second piece is call data, right? So if you don't know how, basically, solidity calls functions. Right now it's encoded into bytes, specifically by the function string name as well as the inputs that go into it.
00:09:30.162 - 00:09:51.434, Speaker A: So in order to call it on the l two, I have to encode that function name and inputs to be passed over to the l two contract. And the gas limit actually is pretty complex. It seems simple to understand, but it's how much you're willing to pay. So I'm going to go into the math here. Specifically, posting from l one to l two requires gas on the l two. Section. Right.
00:09:51.434 - 00:10:35.702, Speaker A: In order to do that, optimism says we will provide 1.92 million l two gas for you for free. However, in the case, and this is pretty rare, assuming that maybe you actually need to spend more gas than that, you actually would have to specify that ahead of time and that gas is coming from your l one gas at a one to 32 ratio. So in this specific example, suppose the transaction actually took 2 million gas on optimism, you have 80,000 l two gas you need to cover, which is equivalent to 2500 l one gas. I hope that made sense. If not, we can talk about it and I will just say the same thing over until you understand it. On the other hand, we moved from l two l one.
00:10:35.702 - 00:11:06.434, Speaker A: This is going to be more expensive because there's two transactions we're posting, specifically the l two fee to initialize a transaction and then the l one fee to actually finalize it on the chain. So this is more expensive. L one is significantly more expensive than l two, but that's because scalability. Wow, okay, good. Next piece is cross domain messenger sender. Okay, again, for those of you who don't know, when you call contract functions on a smart contract message sender is how you know the address that is calling it. Right.
00:11:06.434 - 00:11:47.546, Speaker A: But for example, when we're thinking about bridging, right, say I'm like l one contract, calling l two contract function message sender is actually going to, what do you call it? Surface, the address of the l one contract domain, cross domain messenger contract. Right. I don't know if I said that correctly, but you know what I mean, the pre deployed optimism one. So what do we want to know? Actually, I want to know my address. I want to know the l one contract address. The way this is implemented actually allows to say, okay, when I call x domain, blah blah blah blah blah, I'm going to return my address, not the address of the deployed messenger contract. Again, the next piece here is transferring eth and ERC 20 tokens.
00:11:47.546 - 00:12:23.258, Speaker A: This is probably the most common way of doing bridging, which is why optimism has kind of put that behind an SDK. I'm not going to get into it because I only have 50 minutes. Thank you, Dev Vakoda or Dev con, but there is a really great ethereum tutorial written by a person on there that actually steps through the contract step by step. So if you are interested in understanding how the token bridge works at a smart contract level, I suggest going there. If not, I will be diving into more of the part about using the SDK itself. I want to note as well, there are some things to note. You cannot bridge every ERC 20.
00:12:23.258 - 00:13:02.834, Speaker A: So the way the token standard bridge works is it identifies both the, let's say, ERC 20 token address on the l one and then a token address on the L two. However, there are many ways, I guess you could have the ERC 20 token represented multiple times on the l two. So how does the optimism standard bridge know which one to use? Well, that is specified specifically in this token list. So if you want to add to that token list, you have to create a pr so that the token bridge knows which contract to bridge between. And then two keywords here, deposit. So deposit means I'm depositing eth going from l one to l two. Withdraw.
00:13:02.834 - 00:13:27.114, Speaker A: Is going to be withdrawing. So going from the l two to the l one? Yeah. Okay, so let's do the build portion. What are we building? So, starting off, I think one of the most common use cases where you might want to embed a bridging UI is an NFT marketplace. So we're building one on optimism. And I want to talk a lot about bridging because of the UX problem. So if you've interacted kind of with bridging right now, oftentimes it's a separate UI.
00:13:27.114 - 00:13:43.294, Speaker A: So you go to another website or something, do the bridging and then come back. We're smart here. We're at Devcon. We understand how to do that. Not necessarily the best UX for, I don't know, my mom. So what's the solution? Her name is Bridget the bridge widget. Hopefully you understood that pun.
00:13:43.294 - 00:14:02.394, Speaker A: If not, I will explain it to you many times until you understand it. But anyways, the point is to embed this kind of Ui. It is just a component. So imagine if I took the time to put this on NPM. You could just NPM download into your app. I didn't do that because I don't have time. But anyways, this is kind of the UI of what it's going to look like.
00:14:02.394 - 00:14:52.470, Speaker A: You can create mint and list an NFT, mint your nfts, see what you do, you can buy them. And specifically, one of the views is going to be that bridging component, which is what we care about today. So what you'll need is we're actually starting. This is where the truffle collab comes in, guys. Okay, so truffle has these thing called truffle boxes, which essentially create, I guess, scaffold code or educational code to help you start your dapps quickly, I wanted to talk today, specifically about the optimism Bridgebox, because it is basically an empty project that configures a project ready to be deployed on optimism. In addition to adding smart contracts that will do the transfer data portion as well as writing a script that will demonstrate how to do the SDK. And so in part of the smart contract portion, what it does is it actually allows you to figure out how do I deploy across multiple chains in one go.
00:14:52.470 - 00:15:16.142, Speaker A: Right. I need to pull on l one, l two, and then I'm calling a function on l one, and then I call a function l two. How do you do that? Truffle box. Right. Okay, what else will you need? We are going to be connecting to the Gurley testnet as well as the optimism testnet because we are working with these deployed contracts. So you will need that information from infura. You'll create a project separately to that because this is an NFT marketplace.
00:15:16.142 - 00:15:31.090, Speaker A: We will be uploading metadata up to ipfs. You can do that through infuria as well. They have an dedicated ipfs gateway you can create for yourself. As always, metamask. You need that for everything. And then girly eth. Optimism.
00:15:31.090 - 00:16:10.834, Speaker A: Girly eth. And specifically, I was going to mention girly dye. So when I was talking about the part where we're going to do the script with the SDK when we're transferring tokens, the one we decided to choose was Dai. So if you want to actually run the scripts, you will need some dai in your wallet in order to do that. The process for doing it, I'm just going to quickly say is take Gurley eth, go to uniswap, change your testnet over to Gurley, and then do the swap between Gurley Eth and girly Dai. And that's how you do it. So are we doing this live? No, I'm just going to walk through all the contracts and hopefully you will understand.
00:16:10.834 - 00:16:44.810, Speaker A: If not, I can't explain it to you over and over again because the wifi is not my fault. So let's move forward. I'm going to go ahead and open up the first part. So this is kind of small. Yeah, you're welcome. I'm unimpressed that your eyes are that bad. Anyways, okay, so like I said, the first thing you would do, assuming, let's say we're not in this UI, is a truffle unbox optimism bridge.
00:16:44.810 - 00:17:08.642, Speaker A: And then if I wasn't here, I would have called it Defcon demo and it would manifest this box. Right. And so I'm going to step through what's in this box that makes it optimism compatible. So the first part here is going to be your contracts. So in a multi chain world, you're going to have different contracts. We should separate that logically into ethereum contracts as well as our optimism contracts. This contract is a meaningless contract.
00:17:08.642 - 00:17:41.262, Speaker A: We just have it there as an example for you to look at something. I will explain that later. Migrations is how we're going to do our deployment. Specifically, in truffle, you have the ability to number your migrations or your deployments, which is really helpful for multi chain deployments, because then you can decide, I care about this migration in this order, et cetera, which is why they're prefixed by numbers. The next piece is scripts. So this script is actually just calling the different migration functions or doing the different deployments. I want to speak specifically to this syntax right here.
00:17:41.262 - 00:17:59.750, Speaker A: Right. So the first thing that we're doing is going to be deploying to l one. We choose the network which I've defined in a truffle config. And by default. Actually, you know what? Stop. This is really hard to explain until I've explained something else. So let's pretend that never happened and move on to this portion right here.
00:17:59.750 - 00:18:18.970, Speaker A: Okay, truffle config. This is the last part for configuring a optimism dap. Right? So we have two different configs. The first one is your vanilla config. This is what truffle will default to if you don't specify a network or a config. Essentially all it does is define your build, directories, whatever, and then your networks. I want to note one thing.
00:18:18.970 - 00:18:49.766, Speaker A: The default would just be like a build to normal contracts. But in this case, we have two different types of contracts. We will need to specify the build path. So that's build Ethereum contracts as well as, hey, truffle, what contracts do I use? Well, you pull it from contract Ethereum. And then here is just identifying the network and as always, specifying your private keys. That sucks. But I'm not going to show you.
00:18:49.766 - 00:19:15.146, Speaker A: But I can show you the way to circumvent it later, which is cool. That's a sneak peek. But anyway, so that is what our truffle config looks like. Let's move back into our migration script. Now that we understand that this is the first part, we're using our first truffle config. We are deploying to our l one on the network. Gurley, like I said, with that 1234 process, we actually have the ability to specify which deployment we care about.
00:19:15.146 - 00:19:53.046, Speaker A: In this case, we care about the first one, the second case, if you notice here we are choosing optimistic girly as the network we're going to deploy to and then specifically specifying this configuration. So that way when we run this migration we know hey, we're going to pull our contracts from the optimism folder. Hey, we're going to pull, or we're going to build everything into this, build optimism and again, kind of this specification of whatever. And then skip dry run self explanatory, you're just skipping the extra part. These two pieces as well. I want to do note is kind of anti pattern. I am sorry, but this is the part where we will actually be calling the messages on each contract.
00:19:53.046 - 00:20:33.170, Speaker A: So if you look in the actual deployment, you can see right here we're getting the instance of the greeter contract on the other l one and setting that greeting. Typically stuff like this where you're interacting with your contract might exist in your DAP or in a separate script. Migrations are for deployments. I just put it there to show you, hey, you can put four migrations in, right? So it still works, but don't do this anyways, so that's the structure of the truffle box. Let's actually now talk about how to integrate optimism contracts into your DAP. So let's start with the contracts. This is the transfer data section, not the SDK.
00:20:33.170 - 00:21:02.898, Speaker A: So optimism has already deployed this example contract onto their various testnets and mainnets. So again you can find those addresses in their GitHub. Essentially this is super easy. All it does is this contract which does. A version exists on l one and a version exists on l two has the function set greeting. So if you set the greeting, say hello, and you call contract greet, it will say the hello that you had put in there. Cool.
00:21:02.898 - 00:21:41.386, Speaker A: And then this part here is just getting the appropriate cross domain messenger sender address. So each of these, what do you call it? Addresses are the cross domain messenger solidity file that exists on each chain id. I guess these kind of don't matter because all of it's deprecated, but it doesn't matter, we only care about 425. And then this is kind of how you're going to get the actual domain sender. So the OG contract that you care about. So that's kind of the base contract of what's already deployed. Now say we want to create contracts that interact with that.
00:21:41.386 - 00:22:10.806, Speaker A: So we have this greeter which exists on l one. Again, all it does is have this function called set greeting. So if somebody calls set greeting, what we care about is, number one, the message. This is how you're going to encode that message. So this is set greeting from whatever message you're sending in. And then specifically you could put a different contract address here. This is the permanent address of the greeter contract on the l two.
00:22:10.806 - 00:22:30.198, Speaker A: So essentially, if you call set greeting on greeter l one, it will call the set greeting function on greeter L two. Hopefully you digested that. L two does the same thing again. Talk to me afterwards. I have so much free time. Anyways. Greeter l two does the same thing.
00:22:30.198 - 00:22:54.306, Speaker A: Set greeting again, right here is going to be calling this function on greeter l one and telling it, hey, this is my target, blah, blah, blah. And then gas. Like I said, gas limit is irrelevant. We have up to 1.92 million gas for free. Calling stack reading on optimism. Hopefully, I'm going to say 100% does not take 1.92
00:22:54.306 - 00:23:40.430, Speaker A: million gas. So that's where we're at, essentially, to run this, we would have just done run the script. I'm not going to run it, but you could see the output essentially looks like this, where it will compile your contracts and then start the migrations. Right. So this is the first one where we're deploying it, the l one contract, and then deploying the l two contract, as well as then doing the fake part where you actually call the greetings. And what is interesting about this is it is calling the greeting on a deployed contract on the girly testnet as well as the optimism Gurley testnet. So what can we do when that happens? We can go to Etherscan.
00:23:40.430 - 00:23:59.494, Speaker A: Yay. And see it in action. I'm not going to open up ether scan. I took a screenshot, that's what happens. We opened up one of the contracts on Etherscan called the greeting function here. So it says, greetings from truffle. I do want to note, if you do follow this tutorial, like I said, this is a public pre deployed address.
00:23:59.494 - 00:24:30.994, Speaker A: So if all of you decide to follow this tutorial afterwards and you decide to change the greeting, you might see somebody else's. I have definitely gone to this and it's like all in chinese and they're like, wow. Web three is global, but you can just go back and find your transaction hash in the history and then be able to read whatever you had specifically decided to set the greeting as. And just to prove to you this is the one from l two. Setting greeting on l one. That's what it looks like, it looks the same because it's basically the same contract. Where are we moving on? Okay, cool.
00:24:30.994 - 00:25:00.634, Speaker A: Let's talk about the script. So, this is complex, but I don't know how much time I have left, so I'm just going to talk faster because that's my style. Okay, so here is basically a script of how we decided to use the SDK. I'm going to point out a few important parts here. Right. So the first part is pretty self explanatory. We're just setting up all the things that we need to get our cross domain sender thing set up.
00:25:00.634 - 00:25:38.198, Speaker A: So you're going to need a signer for each l one, which is l one signer, l two signer, as well as here. This is specifically for if we wanted to do the SDK, withdraw and deposit functions for the ERC 20. So you're going to have to pass in what ERC 20 addresses you care about. Like I said, we are interacting with die. So that die address for l one address, die address for the l two is from their list here. So you can find it. It'll say, like, chain id five die, and then there's the address.
00:25:38.198 - 00:25:55.994, Speaker A: And that is what you'll be using in the SDK if you specifically want to do die. Wanted to die. Okay. But anyways, before I dive into the functions themselves, let's actually talk about what this is going to do in the end. Super simple. Like I said, it sets up stuff. We're going to deposit eth.
00:25:55.994 - 00:26:21.894, Speaker A: So just calling the SDK, deposit eth, SDK, withdraw eth, and then also deposit and withdraw ERc 20 and deposit whatever. I said both already. They're basically the same thing, except for one caveat. So we'll dive into each of the functions and then we'll discover what's different. Cool. So after setup, I'm just going to go from top to bottom, even though logically that might not make the most sense. But that's okay.
00:26:21.894 - 00:26:39.354, Speaker A: I am a bit frazzled. Report balances. Okay, this is just a helper function. All it's going to do is log what your balances are for your eth balance or your dai balance. This is just for tracking purposes in the script, so you can see that. Hey, it actually transferred. Wow.
00:26:39.354 - 00:26:52.320, Speaker A: Good job. Optimism. Okay, no one clapped. Cool. So that's kind of just helper methods. We're going to actually dive into the deposit function so specifically to deposit eth. Super simple.
00:26:52.320 - 00:27:24.406, Speaker A: You just call deposit eth and then put it on. One thing to note here is there are these things called statuses. So the problem with bridging is it takes time to move back and forth. How do you know when it's done? So optimism will provide different types of statuses to allow you to know, hey, when it's done with relayed, that means it's been properly, I guess, committed or posted or whatever. So you need to watch out for that. And then you just report it before and after. Okay, guys, ready? What's different here? No one knows.
00:27:24.406 - 00:27:55.300, Speaker A: Okay, cool. This is different here. Right here. So again, like I said, we have that caveat of the l two optimism standard token bridge. Needs to know what l two address you are interacting with. And specifically, in order to do this, you need to give approval to say, hey, I approve that we are using this l two address because if you had given it a random address, it doesn't understand all that token is gone. So this is a very manual step that you have to take in order to complete an ERC token transfer.
00:27:55.300 - 00:28:30.110, Speaker A: And then we go into the withdrawal. This is exactly the same thing between the two. I just want to call out specifically, we've added in a new status. So when we talk about going from l two to l one, I had talked about that thing called challenge period because that's when things get real, right? It goes to main net. So I'm just logging that to say, hey, I'm in the challenge period. So if you run the script, once we get to the withdrawal part, that takes a lot longer than the part where we're just depositing because we have this part where we have to wait for people to be like, no, that's wrong. Or, yeah, that's right.
00:28:30.110 - 00:28:52.566, Speaker A: So yeah, that is using the SDK. Let's move on into actually building a Dap and seeing how we can integrate the SDK into our application. Wow, I did so much live coding. Here it is. Okay. Essentially, I'll tell you two things I did, or I did a lot more things than two things. First off, right now we have a client in.
00:28:52.566 - 00:29:29.890, Speaker A: So when you're building like a full end dap, you probably want to. Not probably, you should be separating your folders into your client section and the part you care about, which is your contract session. So essentially what I had did in this process was just copy paste all the relevant smart contract or truffle code into this truffle folder. We didn't need any ethereum contracts anymore because that was for the greeter example. I just replaced them with optimism contracts. So this is specifically just a optimism Nft contract as well. As a marketplace contract that handles all of the transfer of list, buy, et cetera.
00:29:29.890 - 00:29:57.846, Speaker A: One thing to note here is if you notice, nothing really looks any different. Optimism is EVM equivalent. So when you start writing your EVM or optimism dapps, you can pretty much copy paste. There is a caveat, though, with, like, four opcodes that are a little different. You might not run into them. I'm not going to get into it, but please be aware, I am not preaching, like, the golden standard of EVM equivalents. It's like the golden minus four opcodes equivalent of EVM standards.
00:29:57.846 - 00:30:27.240, Speaker A: Anyways, in this case. Right. So now we actually have to deploy our contracts. I hope this will work. This is the part that I wanted to say was really cool, so I don't have to show you my environment. Keys is specifically, there's this idea called truffle dashboard, and it will open up this Ui that basically allows you to connect to your metamask account. Wow, everything is so small.
00:30:27.240 - 00:30:41.814, Speaker A: Hopefully you can see it. No, that didn't do any. Oh, no. Okay, well, anyways. Dang, this is loading. Oh, okay, cool. Okay.
00:30:41.814 - 00:30:52.990, Speaker A: So it's committed to my. Oh, man, this is going to take a long time. How much time do I have left? It's 1130. Oh, dang. I finished all this in 30 minutes. Wow. We have 20 minutes for questions.
00:30:52.990 - 00:31:08.990, Speaker A: Okay, sorry. So surprised it's not connecting. Okay, I'm just going to explain what would have happened here. Right, so essentially. Oh, actually, I never deployed it. That's why nothing has happened. Let me go backtrack.
00:31:08.990 - 00:31:43.318, Speaker A: So, truffle dashboard, this is usable with any project. If you notice, it is open up on localhost 240 one two. I'm sorry, I see someone squinting in front of me. Yeah, whatever. Where is it? It opens up on 240 one two. So if you are using like, a hard hat config, for example, the way you do it is you just specify one of your networks as dashboard and that local host, and it will open up this UI specifically. What's cool about this here? Is this my terminal? Oh, it is my terminal.
00:31:43.318 - 00:32:05.490, Speaker A: Nice. Okay. I don't know where I am. I have truffle dashboard open somewhere. Okay, cool. So you would just do a truffle migrate and then this time we're choosing network dashboard, and then the config is going to be truffleconfig OVM Js. And I think that's it.
00:32:05.490 - 00:32:34.720, Speaker A: I do want to know as part of this box, we have provided, like, NPM scripts that you can just run, but I always forget what they are. Dang. Where am I? I don't remember what I'm doing here. What is wrong here? Cannot find. Oh, did I not migrate it in? Oh, did I spell it incorrectly? Guys, did I spell it incorrectly? Truffleconfig OVM. What am I in the. Oh, I'm not.
00:32:34.720 - 00:32:56.726, Speaker A: Yay. Live coding. Okay, so now if this works, I have 30 minutes for this to wait. Guys, I really want to show you this. Damn. Something else happened. Please check that.
00:32:56.726 - 00:33:14.140, Speaker A: Your ethereum. Oh, does my local host died? Oh, I did. I did this on purpose. So you guys know how to use it. Ha. Jokes on you. You thought I didn't know what I was doing.
00:33:14.140 - 00:33:31.594, Speaker A: I do, because I work for truffle. Okay, so I think it's connected now. Okay. No, what happened here? Oh, heard someone trying to suggest like, hey, you just opened a new terminal. That's why it's not working. Okay. Compiling your contracts.
00:33:31.594 - 00:33:55.222, Speaker A: Nice. Okay. Wow, fancy. I'm so happy you guys clapped without me coercing you. This is awesome. Okay, cool. And then if you notice here, actually, I did want to point out in this migrations contract, we are deploying both of them.
00:33:55.222 - 00:34:33.522, Speaker A: The marketplace contract is dependent, sorry, the NFT contract is dependent on the marketplace contract. I did that specifically because when we mint and transfer nfts, you need to add approval for it. To do that, I got lazy and said, hey, NfT just set approval for anything that is a marketplace contract. And that is why that is there and that is why we have a second transaction to approve. Nice. Okay, very good. And then we deployed it.
00:34:33.522 - 00:34:58.314, Speaker A: And, oh, I forgot to mention one more thing. When we were doing this, right, if you remember, the first time we did it, we specified the build path of contract or build whatever. But now that we are using it inside of our client, you have to replace that build path to be used in your client directory. This was a pre configured project, so I forgot to do that. But I remembered and it's already done. Wow. Okay.
00:34:58.314 - 00:35:16.910, Speaker A: I'm not going to make you clap again, even though I really like it. Cool. And so the client portion, this is also pretty, it's a lot of code. I'm not going to dive into it. It is a next JS project. Just kind of the steps to do that would just be like a create next app. And then I'm using Tailwind because I suck at CSS.
00:35:16.910 - 00:35:35.880, Speaker A: So that's like in it tailwind. I have instructions somewhere I'm not going to show you. I'm going to blame it. On the wifi again. But essentially what that looks like is we have a bunch of different pages. And I think because this is going to be local, I can just actually just do this. Cool.
00:35:35.880 - 00:35:52.782, Speaker A: Wow. Local development is so good. If only there was something called ganache forking that could fix this. Okay. Anyway, so this is kind of like the different views that we have. And I want to talk specifically about the girly bridge. So I embedded it here.
00:35:52.782 - 00:37:01.970, Speaker A: What does this actually look like in terms of code? Right, so let's open up girly bridge, and actually, let's also open up the sky right here, and you'll see the magic of how much code I did not write because of a truffle box. Let's say split left. So all we cared about in that bridge was transferring east between the two, right? So if we're here on the girly bridge, here's all the gross HTML stuff that I hate because I was never a front end dev. But we have two things we care about, right? Depositing eth and withdrawing eth. So if we look at the deposit eth function here and deposit eth function here, don't they look almost the same? Yeah. Wow, very cool. I copy and pasted that, except added some other things that you need because state matters and whatever, but you get what I'm saying, right? It's exactly the same, right? The same thing with withdraw eth here as well, or I don't know where it is eth.
00:37:01.970 - 00:37:36.830, Speaker A: Yeah, and it looks virtually the same as well. The only piece I took out here is going to be report balances as part of my UI. I pulled that out into just a get l one e and a get l two east specifically so that we could demonstrate this information right here. I guess we could try. Okay, well, everyone pray for me. Why did I do this? Inspect console. Okay, so if I do something like zero one, I deposit.
00:37:36.830 - 00:37:57.814, Speaker A: You can see, like, the console stuff that I had before was. Damn it. Oh, this is something that. Yeah, okay, sorry, I forgot to configure some stuff. So let's pretend I configured everything properly and then it understands the RPC URL and everything, but I have a screenshot and that's all that matters. So. Ha.
00:37:57.814 - 00:38:21.290, Speaker A: Emily did everything correctly. This is what it looks like. And this specifically is the version of moving it from. Oh, that's highlighted in blue. Awkward. Okay, anyways, this is the part where we're migrating over optimism, girly eth over to girly eth. I do want to note one thing, actually, now that I remember, when you're moving from l two to l one.
00:38:21.290 - 00:38:50.674, Speaker A: And you remember I said it's, like, more expensive because you have that double transaction. Right. So in the script, when we move it over, we actually add a little bit more eth than we directly are transferring because otherwise that would be burned as part of the process and you would probably actually lose Eth. So that's one thing to notice. But anyways, this is when I did everything correctly this morning, and it failed now. But that's what it looks like. And that is, I think, our full dap.
00:38:50.674 - 00:39:11.590, Speaker A: How much time do I have left? Wow. Good job, Emily. I have 20 minutes left, so we can talk about what's next. So what's next? A crash course and what's next? Just kidding. That is not the definition of a crash course. So we're just going to talk about it. I went through this really fast, right? And this was like the NFT marketplace, utilizing the SDK scripts.
00:39:11.590 - 00:39:37.522, Speaker A: I would challenge you guys to actually take this information and build something on your own. Right. So maybe like a chat messenger between l one and l two s, right. Because you can transfer that data. In this case, you will be needing the truffle stuff to be deploying information back and forth. We have a vanilla optimism box that doesn't have any of these additional scripts and environment variables and everything. If you don't want that, it would just be a truffle unbox.
00:39:37.522 - 00:39:57.162, Speaker A: Optimism. But other things is like Bridget, there's a whole bunch of bugs with Bridget. I didn't do any data validation. Fix those for me. Alternatively, it only does eth right now. Only on Gurley, you can configure it basically to select the network. And then always I was talking about optimism because that's what we have.
00:39:57.162 - 00:40:14.110, Speaker A: We have other l two boxes. Specifically, arbitrum exists right now. What's in the works is actually a starknet box, which is super cool. How is truffle working with a non EVM compatible language? I don't know. We'll find out. That's in the future. But it's happening and it's exciting.
00:40:14.110 - 00:40:46.634, Speaker A: And then just in general, I want to talk about what our plans are for multichain. So again, like I said, multichain dapps are hard, complex. I said a lot in 40 minutes. I don't know how I did that, but what are some kind of pieces that we thought was difficult about our demonstration that we are fixing? So first thing is declarative deployments. So if you remember, in that scripting portion, it was very simple. I just an l one and an l two. Right? But imagine if now things were dependent on each other's addresses, or now we've introduced like a new l one or a new l two.
00:40:46.634 - 00:41:15.550, Speaker A: These scripts in production can get really intense, and that's hard to maintain. So declarative deployments is essentially you saying like, hi, I have a JSon or a Yaml file. We're still figuring out the actual structure of it yet. But you'll say like, this is kind of what I want it to look like. And then truffle's like, wait, I'm so intelligent, I can do it for you. And that's kind of how it goes. And along those lines of what comes with declared deployments is being able to declare environment based configurations.
00:41:15.550 - 00:41:50.080, Speaker A: So again, if you remember when I was talking about the network configs, it's just like a bunch of lists of like Gurley, Mainnet, sepholia, et cetera. But what if you could actually bundle those up into your own environment? So you'll say, I care about these networks only in testing. I care about these networks only in production. Instead of doing like a truffle migrate and specifying every single network, you could just say truffle migrate, testing environment, and that's how you would get there. So that's pretty cool. Ganache plugins. I'm actually probably the most excited about this because the wifi was bad here.
00:41:50.080 - 00:42:46.202, Speaker A: It would have done everything locally, right? So the reason I had to go on Gurley and optimism Gurley is because we were interacting with pre deployed contracts. So if you do like vanilla Mainnet, I mean ethereum development right now we do have forking, right, where you can basically copy the state of the chain, mainet Gurley, whatever you want locally, you can unlock wallet addresses. So you can pretend like you're somebody and interacting with those existing contracts on your local environment. But right now you can't do that for l two s because there are very slight differences that, I mean, you technically can. I would not recommend it because of those slight differences. Right? And so imagine in a world where we have ganache plugins, and essentially you can say, hey, I want to create this plugin to create a optimism flavored ganache or an arbitram flavored ganache or whatever. And then because of that, you can bring up multiple instances of Ganache, your optimism ganache, your mainnet ganache.
00:42:46.202 - 00:43:14.570, Speaker A: Put those in a workspace that will interact with each other. All of those pre deployed contracts were actually also copied locally because of the forking. And I could have just done this all on local host. And because it's not on local host, Ganache is compatible with our other development environments. So again, I'm here to say we do not require you to work with other or be married to truffle itself. We are co op edition is what I call it. And the last thing, I think I've caveat of this so many times.
00:43:14.570 - 00:43:45.474, Speaker A: I am not an expert, but we are bringing on an expert. So if you don't know, I do this weekly live stream called web three unleashed where I basically say, hey, I'm interested in this. Who do I know? Or can I figure out will teach me about it? So we're bringing Annie. She does like partnership protocol, partnerships with optimism to come talk a bit, a little bit more about bridging security. And then specifically, if you guys don't know, optimism had, like, a huge announcement about bedrock changes. I don't know what's in it. Annie will tell you.
00:43:45.474 - 00:44:07.574, Speaker A: But this is coming up on November 3. It will be, what do you call it? Recorded so you don't have to join live if you don't want to. But that is everything. So thank you so much for joining. Follow me on Twitter. That is a QR code to more of links that are important to me. Man, I'm so scared.
00:44:07.574 - 00:44:39.494, Speaker A: I'm not ready for 13 minutes of questions. Usually I just take the full 60 minutes and then run. So if you have any questions about this, my life. Okay. Yes. You spoke a lot about calling the smart contract from one chain to a roll up and back way. So the question is, is it possible to call the concert from one l two chain to another between l two s and l two s? Okay.
00:44:39.494 - 00:45:08.858, Speaker A: I don't work for optimism, so I don't know my guess. And actually, I'm going to write this down so I can ask Annie. My guess is probably no, because we are interacting with those pre deployed cross chain Messengers and that is what is doing, like, the communication. Right. So maybe they have deployed ones on other l two s. The l two space is really crowded and they're fighting each other. So I don't know if they would actually do that, which is antithetical to the spirit of Ethereum.
00:45:08.858 - 00:45:24.034, Speaker A: But, yeah, that's my guess. Let me write this down. Oh, my God, my notes are so messy. Where's my phone? I'll write it on my phone so you guys don't see it. Oh, shoot. Where's my phone? Okay, I'll just remember in my head, but yeah. Cool.
00:45:24.034 - 00:45:56.110, Speaker A: Do we have any other questions? Yeah. Is there a way to hold build directories for different chains? Yeah. So different build directories. So if I bring up the code again, basically for each chain, you would write your own truffle config. And then why is this not opening? Oh, yeah, it is. Here, each config, you would just specify which bell directory you would have different configs. And that's the problem.
00:45:56.110 - 00:46:14.980, Speaker A: Or that's what's painful about it. Right. And that's what we're trying to fix with declarative deployments. Yeah. Yes. Are there case where I should not use. What? Are there case where you.
00:46:14.980 - 00:46:55.190, Speaker A: Oh, like when should we use l one versus l two? I guess my specific thing is like, I think l two s are the future of ethereum. The problem with l two s, like I had mentioned, is probably the UX problem as well as the adoption problem. So when we are building like, say your first dap, right. The biggest kind of cohort of people you could take on is probably going to be just main net or ethereum development. Right. But if you're trying to do like plan ahead and stuff, I'm thinking layer twos are important. Okay, let me backtrack.
00:46:55.190 - 00:47:21.046, Speaker A: Let me just talk about what I would think about when I'm choosing where to develop. Right. So it's, who is my audience? How big is that? Right. The second piece is dev support. If I am building this, how good is that layer two at providing support? How good is their documentation? Stuff like that. And then the third piece is also just like general adoption of developers. Right.
00:47:21.046 - 00:47:51.790, Speaker A: So if you look at that space, is there anyone who can even code with you? Is there anyone you can build with? And layer two s are new. Right. And so there is going to be some trade offs there, but it's kind of what you want to do in the future. I know optimism is doing really cool stuff with promoting l two dapps. And I think in general, if you talk or I'm not going to say words for other people, but the general consensus. Right. And the way I see the ecosystem moving is in this direction.
00:47:51.790 - 00:48:17.014, Speaker A: So that's my opinion. Yeah. Cool. Any other questions? Yeah. Related to what you just said, optimistic roll up, right. It is going to change eventually your knowledge, because all of this time, right? Yeah. The challenge period is a big con, right.
00:48:17.014 - 00:48:43.940, Speaker A: Eventually, all these process sets, layer one, layer two going to change. I don't think it would change in the sense that if you want to interact with a layer two, like a zero knowledge roll up. Right. You still care about where those contracts are coming from. So that build directory is still important. The network ids are still going to be different where you're deploying to. So all this different configuration is going to change.
00:48:43.940 - 00:49:19.680, Speaker A: Actually, I did mention so we have starknet is zero knowledge. We are working on a Zk sync integration as well, which is also zero knowledge. So I think regardless of where you choose to go, this is going to be a configuration you still need, unfortunately. But hopefully if you have submissions or like, what do you call it? Suggestions, whatever. We're open source. Why don't you just contribute to our code base or create an issue? We have GitHub discussions as well. Join our discord community.
00:49:19.680 - 00:49:38.882, Speaker A: Blast me on Twitter, whatever is most comfortable for you. But yeah. Yes. Yeah, sorry. Okay. You said I love. Okay, disclaimer.
00:49:38.882 - 00:49:56.890, Speaker A: Part of my personality is I really like fried chicken. It's on my Twitter. That's what he mentioned. If you didn't hear that. Okay. Yes. Wow.
00:49:56.890 - 00:50:16.042, Speaker A: We're getting professional, like personal here. Dang. Okay, we have seven minutes to answer questions about Emily Lynn. Okay. Why did I choose to go into Devrel versus be a core developer? That's a great question. So if you want to talk a bit about my background. So I graduated college with a Cs degree.
00:50:16.042 - 00:50:37.174, Speaker A: I went immediately into backend development. I did that for like two years and then was like, oh, this is kind of boring. What's cool and fancy? And I was like, wow, DevOps is such a sexy word. It is the worst word ever. I hate kubernetes. Anyways, I moved into DevOps, right? And I think I was. So I'm in my twenty s.
00:50:37.174 - 00:51:06.178, Speaker A: I don't know why I'm getting into this tangent, but I was kind of in that space of figuring out, I'm not totally satisfied with my job. Part of the reason I moved into DevOps was one thing. It was sexy at the time, but also I really wanted to learn something new. Right? And I haven't got to the Devrel portion of it. I promise we'll eventually get there. I'm just filling seven minutes. But where was I? So I knew I wanted to do something where I was always learning something new.
00:51:06.178 - 00:51:44.602, Speaker A: Right? I felt like within my engineering job, there was a lot of communication internally with my team and building projects. And I really like that. But at the end of the day, I think when you are plugged into a big tech company, for example, I felt to an extent like I was, I don't want to call it code monkey, but the impact I had was not as big as I would hoped so when I was thinking about what are my next career steps. So I actually didn't get into web three or Devrel until this year in March. So I'm relatively new. But the thing I cared about again was work environment. I wanted to be around builders.
00:51:44.602 - 00:52:42.810, Speaker A: It was really important to me to be around people who really passionate about their work. And maybe unfortunately crypto is usually our twenty four seven and our nine to five, but I seek that kind of environment, you know what I mean? And the second piece was the thing I enjoyed the most about my engineering job was the cross collaborative communication. When I got to kind of background wise, when I joined the DevOps team, we were really focused on reaching soc two compliance with security. So I was working very closely with a security team and so being able to translate technical concepts on our side to other team members was something I really enjoyed and knew I wanted to take into the next job. So when I was considering my different options, developer relations came up and I thought it was this perfect marriage of I get to keep my technical skills. I am required to learn something new all the time. So that's why I'm not an expert in anything, obviously, but I know a little bit about everything and I think that is something I really liked.
00:52:42.810 - 00:53:13.210, Speaker A: And then in terms of the impact part, just being able to interact with devs, my job is figuring out what pain points people have, what they're working on, et cetera, and trying to fix that felt more tangible to me. Right. And I think that's why I kind of fell into Devrel. I'm going to say one more thing and I always say this, and she's in this room and she hates that I say this. My sister actually started in Devrel first and then also works in Devrel. In web three. Yeah.
00:53:13.210 - 00:53:31.470, Speaker A: Wow. Crazy. And she is like one of the biggest inspirations in my life. And so maybe that's part of my motivation as well. Or maybe I'm just like the bratty little sister. I think my tagline is like, do everything she does, but better. So maybe that's also why I got into Debrel.
00:53:31.470 - 00:53:48.434, Speaker A: Cool. I don't know if we have any more time. We have, oh God, four more minutes. Dang it. Okay. Otherwise, feel free to go wait in line for other talks or come catch me. Where? Be at the conference.
00:53:48.434 - 00:54:03.940, Speaker A: I'll be at Nearcon consensus which truffle works for is going to be having an event this Friday, so feel free to stop by. We have a lot of different panels and things like that. Yeah, cool. Thank you so much.
