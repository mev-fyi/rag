00:00:13.290 - 00:00:46.806, Speaker A: I'm honored to be here. I'm Jordy Valina. I'm a developer, an ethereum fund and founder of Giveth. I'm a little distracted today because just now in Catalonia, there were eight members of my government detained for defending democracy and my people right of self determination. We have a huge opportunity to bring decentralized tools stream in Catalonia. We need it. But I am here to share a bit of my passion for smart contracts.
00:00:46.806 - 00:01:44.590, Speaker A: In this presentation, I will first talk about the Minime token contract, then give you some highlights on how I see the future of token contracts. And finally, I will briefly introduce my latest development the Liquid Pledging contract, which we are currently using at Giveth. Let's start with the Minimi contract. Minimi has been developed a year ago. It follows the ERC 20 token standard and has been used extensively by many important projects in the theorem space. Here you can see some of these projects swarm City, Aragon status Gibbeth District Zero X and many others. So what makes Minimi contract different? It's more than just a simple ERC 20 token contract.
00:01:44.590 - 00:02:36.240, Speaker A: The token has many functionalities that any DAP may need. These functionalities includes creating and destroying tokens, black or white listing addresses, freezing transfers, among others. But let's get to the real innovation of what this smart contract. The contract tracks the token distribution history on the blockchain. This property is what makes Minime contract different and allows this token to be clonable forkable if you want. That means that you can create a new token whose initial distribution is the same as the original token. This cloned fork can be done at any given block in the past or can be set for the future.
00:02:36.240 - 00:03:27.950, Speaker A: After the fork, each clone token is independent of each other, much like Etc fork or bitcoin cash fork. All these properties do not come for free. And the main disadvantage of choosing Minime token is that the gas cost of each transfers is a little bit higher than the non clonable ones. All these functionalities are important for the next use cases. The first one, and one of the most important one is the boating application. Use it in many governance systems. This means that at the beginning of a voting process, a clone token is generated and burned after the token holder votes, making it impossible for him to vote twice.
00:03:27.950 - 00:04:31.460, Speaker A: Using the token contract this way prevents having to lock the mine token while the voting token while the voting takes place. Another interesting application is the distribution of rewards among token holders. When you want to distribute rewards on a regular basis, it's possible that you run in the problem that the distribution of the token may change as token holders trade the coin. Minimi solves this problem because you know the balance of any token holder at any time in the past. So you can easily create a contract that distributes rewards according to the holdings that each token holder had at the moment each reward was issued. The same way you create a voting token, you can also create many functionalities like discount token or reputation token. A discount token would work this way.
00:04:31.460 - 00:05:30.502, Speaker A: The discount token may be used to buy another token at a given discount, and it will be redeemed when the new tokens are purchased and the discount is applied. Another usage is to create a token for a spinoff dao. The minime token also makes your project future proof, making it easy to upgrade to a new version of the contract. But probably the most incredible facet of this token is that anyone can create a clone token in permissionless way so that anyone can add value to the community. Let's talk now a little bit about the future of the token smart contracts. The future clearly points to the ERC two to three standard proposal. There is mainly one operation in this standard.
00:05:30.502 - 00:06:09.780, Speaker A: That operation is transfer. And with this transfer you can attach data. Once a transfer is done, if the recipient is a contract, the token fallback function of the recipient is called with this extra data. As you can see, the main idea of this standard is to work very much like Ether works. Right now, this standard is not ready yet to get there. The two main points that needs to be resolved are first, backwards compatibility, which I think it's solvable. For example, you can always create wrapper contracts in the worst case.
00:06:09.780 - 00:07:16.470, Speaker A: And the other point that is necessary, in my opinion, is to define a pseudo introspection standard. Mainly pseudo introspection means that you can ask to a smart contract about the implementation of a specific interface to standardize this, we currently have two very different proposals EIP 165 and VIP six seven Two. EIP 165 is very straightforward. You just define a support interface function that is the smart contract may implement. Then anyone can use this function to query if this contract implements a specific interface or not. The other proposal, EAP Six Seven Two, in my opinion, makes more sense and it's much more scalable. The idea of EAP Six seven two is to use reverse ENS to keep a database of interfaces implemented on each existing contract.
00:07:16.470 - 00:08:06.050, Speaker A: Let me give you an example of how this would work. Imagine that a contract implements itoken fallback interface. The constructor of the token would add this entry into reverse ENS. For people that don't know how reverse ENS works, it mainly defines a domain for each address. Normally, this address is assigned to a human readable name, so you can set a name for your address. But you have full control of this special domain assigned to your address so you can create subdomains. In our case, we define a subdomain with the interface name that the contract implements and make it point to the address responsible for implementing the interface.
00:08:06.050 - 00:08:50.280, Speaker A: In most cases, this will point to itself if the contract implements the interface. But that not strictly necessary. And this is where the standard gets interesting. This entry can point to a different proxy contract. Think about it. This allows for future functionalities and future interface to be easily supported when they come coming back to the ERC Two to three standard. One of the biggest shortcomings is that it cannot transfer tokens to the current multisig implementation because they are contracts that don't implement the token fallback function.
00:08:50.280 - 00:10:05.426, Speaker A: To work around this, a new version of the multisig should be deployed. But this can be solved easily with EIP Six Seven Two by creating a reverse ENS entry for the Itoken fallback interface that points to a proxy contract that just accepts the transfer. And this is very exciting. This also gives the possibility of executing some code not only when tokens are sent to a contract, but also when tokens are sent to a regular account. If you assign a proxy to a regular account, you can, for example, prevent receiving a payment you don't want or trigger any code you desire when regular account receives tokens. At this point, if you put together all the minimi functionality and the ERC Two Two Three token with the EIP Six Seven Two, we get a super flexible contract. This is the new token contract Gibbith is working on right now.
00:10:05.426 - 00:10:56.130, Speaker A: We call it internally yoga. Token. You can imagine inquire in my opinion, this yoga token could be a perfect candidate to be considered for a standard Ethereum token, especially if ethereum based government systems like carbon voting or protocol voting are to be developed. Of course, the gas problem may still be an issue, but this can be minimized by enforcing only epoch snapshots instead of block snapshots. Now, the last topics to finish this talk I would like to introduce Liquid Pledging. This is one of the main open source smart contracts that have been developed at Gibeth. While not exactly a token contract, it extends some powerful functionality that can be applied to any token.
00:10:56.130 - 00:11:33.946, Speaker A: What's liquid pledging about? Liquid Pledging is where liquid democracy meets fund management. Essentially, you can manage your tokens or let someone else manage them with oversight. With a normal wallet, you manage your tokens. You have a balance. You have transfer functions, inputs, outputs and that's effectively all. With Liquid Pledging, not only you can manage your own tokens, but you can also manage someone else's tokens. You do this by creating a hierarchical chain of delegation.
00:11:33.946 - 00:12:16.300, Speaker A: You can give the authority of the tokens to a delegate. The delegate can do the same with a subdelegate and so on. The most important feature is that after you delegate the tokens, you are still empowered to make decisions regarding the use of these tokens. As the owner, you have the complete oversight. To make it clear. Let me give you an example. Gap is a community member that's very concerned for security in the blockchain and wants to donate 100 Ether to projects that improve security.
00:12:16.300 - 00:13:17.802, Speaker A: He wants to do good, but he is very busy person and don't have the time to analyze all the projects in the space. On the other hand, we have Buki, who is very active member of the community and also very much concerned with security. He has complete overview of all the projects in the space and know which key projects should be supported. With liquid Pledging, Gav can delegate the authority over his 100 Ether to Bookie so he can select the right project. Bookie decides that the best one to support is the two factor authentication project for Myether Wallet. So he pre commits the Ether. At this point Gab has three days or any time pre configured to veto if he does not agree with Bookie's choice.
00:13:17.802 - 00:14:26.002, Speaker A: But if he does nothing, my other Wallet project earns a great supporter. This can be a normal account or can have a smart contract plugin attached where a reviewer let's call this reviewer Griff. If Griff decides that the work is done, the Ether go to Taylor for successfully implementing two factor authentication. But if the project does not meet the conditions in the given amount of time, he can cancel the project and the money goes back to Bookie and Gap has again oversight over how the 100 Ether can be used. As you can see, this contract has many advantages. The owner has full control of the tokens, full transparency and knowledge of where their funds go. I want to mention that this contract is also extensible contract via plugins.
00:14:26.002 - 00:15:22.870, Speaker A: In these plugins you can add a specific condition like token allocation. When a project is phoned or setting a hardcap for a given project, the liquid Pledging contract can be used not only for donations, but also for organization's management. In an organization the investors delegates the funds to CEO, the CEO should delegate the budget to the directors, the CTO subdelegates to the system department and so on. And the investors still have full control on where the funds are spent and invested. The same idea applies in fund management where a delegate precommits the Ether to a specific projects and the investors has the last word on where the investment goes. There are many other great ideas. One that I like a lot is liquid lending.
00:15:22.870 - 00:15:59.064, Speaker A: And by the way, this is done from a startup from Mexico. It's called auro libre. In this concept, a microcredit is made via a hierarchical delegation chain of trust. To wrap up, I would like to leave you with three key takeaways. First, if you need an advanced token contract, consider the Minimi contract, which has been fully tested and implemented. Second. The yoga token.
00:15:59.064 - 00:16:58.990, Speaker A: It brings together the features of Minimi plus the ERC two two three with EIP six seven two. This is a powerful token to be considered as a standard for the theorem community once the standards are approved. And third, the Liquid Pledging contract could be ideal for many usages, it's especially suited for blockchain based donation systems that can make the world a better place. But it could also add interesting functionalities for many DApps and now we have reached the end of my talk. I welcome comments and feedback. Please feel free to reach out to me, to Grieve, or to any given team members. If you want to learn more about our open source contracts, you can always check our Gibboth IO website.
00:16:58.990 - 00:17:09.040, Speaker A: Here are some links. And thank you to the foundation for having me here. And thank you to all of you for your attention. Shin.
