00:00:12.250 - 00:00:39.878, Speaker A: My name is Chang. I'm developing blockchain platform in Grand Lex. In this presentation, I will talk about how we extended Ethereum Jacob and tension borders in printing. Have you ever heard about Click before? Please, ladies and gentlemen. Okay, many of you, thank you. I want to talk about first is what Click means. Click is a blockchain platform built by GroundX.
00:00:39.878 - 00:01:12.420, Speaker A: GroundX is the blockchain subsidiary of Kakao which is Korea's largest mobile platform. And kakao talk is one of the kakao service. And this is number one messenger service in South Korea. It has more than 96% of user penetration. So this is better big services in Korea. And credit is from Co Ethereum. So this is Ethereum based project and we launched Mainnet in June this year.
00:01:12.420 - 00:01:48.720, Speaker A: As you can see on the left hand side, Clayton is an open source project. So you can check out source code via this GitHub.com and you can get some documentations about Clayton via Dose Clayton.com. We want to support Enterprise Trade Services as a blockchain platform. In this presentation, I want to talk about High Usability. So there are some usability limitations. First, and the foremost one is Immutable private key.
00:01:48.720 - 00:02:43.810, Speaker A: When you create a key pair in Ethereum, the Ethereum address is determined. So if you create another key pair, it means you create another Ethereum account. So what if your private key exposed accidentally? Only you can do is to create another account, but it incurs more additional problems. So you should tell the new address to your friend to make sure that those your friends do not send the hitter to the old address. In addition, you should transfer your old assets of the old addresses to the new addresses. If you use any digital trust applications, if you expose your private key accidentally, once again, you should follow this process again. So this is very inconvenient and unexpected user experiences.
00:02:43.810 - 00:03:20.330, Speaker A: Let's compare to the bank account. You can think of an Ethereum address as a bank account number. Also, you can think of an Ethereum private key as a password of your bank account. What if you expose your password? Only you need to do is just change your password. You don't need to create Pango card. So this limit of private key becomes much more user reputation. The second thing is level multisig mechanism.
00:03:20.330 - 00:03:56.630, Speaker A: If you increase your account security, you can use multisig mechanism. But on Ethereum, you cannot use multisig mechanism. On the Platform standard, you should create multisig smart contract and you should know how to use it. So this is very inconvenient. So it should be better if we have protocol mechanism on the Platform level. And third one is ethereum does not have type information for accountant transitions. So it is very hard to extend new functionalities.
00:03:56.630 - 00:04:38.710, Speaker A: And fourth one is there's no transition type. So there's some unnecessary fields should be included in the transition. For example, think about value transfer. If you transfer value, if you have some Ether to your friend. You don't need to set data field but it should be always because there's a single transition form and there's no fee delegation mechanism. Fee delegation means that you can pay transition fee instead of a sender. There's no such thing is implemented on Ethereum.
00:04:38.710 - 00:05:37.474, Speaker A: So let's think about these scenarios. First one is what if you as a user should pay whenever you tweet? This is very uncommon, right? But all the decentralized application requires you to pay some fee. The second one is what if you as a software developer, service developer, want to give users free trial period? This is very common service strategies but is not possible on the Platform level on Ethereum. So if you provide easy negation mechanism on the platform level, those scenarios will be solved very easily. So let's talk about what we design new features of Click. First we provide change your private key. To do this, you can change your private key.
00:05:37.474 - 00:06:29.378, Speaker A: If you expose your private key one, then you can use your account number continuously. And also we support different private key on the platform level. So you don't need to know how to create and how to use a smart contract for the mechanism. And also we found that there are several rules in an account when you design this account model. So you can assign keys to each role and you can control the account more specifically. And in terms of transition model, we provide multiple transition types so that you can easily extend new features on the transition type. Also you can remove some unnecessary feedback.
00:06:29.378 - 00:07:16.360, Speaker A: And also we provide feed elevation mechanism on the transition model. But one thing I want to emphasize is that we preserve compatibility with Ethereum which means Ethereum transactions can be executed on Clayton without any problem. So for those extensions we use common techniques. First one is introduce type. So we design three data structures account key and transaction. For those or data structures we have type information and we use double encoding function. So we encode data at first, then the encoded data is included once again with type information.
00:07:16.360 - 00:08:11.490, Speaker A: So when we decode this when we decode this kind of data structure, we first decode type information and then we decode once again based on the type information. So let's talk about a little bit more about account moment. In Ethereum, there's a single account type here, so there's no type information. And you can see we have four fields here. But Ethereum has distinguished two account types smart contract accounts and externally owned accounts or EOA. But as of September of this year, we found that more than 80% of Ethereum accounts are EOA. In EOS, there is no information required for root and quote hedge.
00:08:11.490 - 00:09:17.200, Speaker A: So for EOAS, these are search overhead. So to remove this kind of search overhead, we design comps model in the comp type. So we have two account types here and you can see in the UA there's no route and code hash field so we can reduce search cost and additionally we have a key field as you can see here. And this account key field also have type information. So key field can be configurable of those four key types of key types for like an Ethereum account which has no key, this is provided for compatibility with Ethereum and also you can set public key in the key field. In this case, transactions of this account can be signed by the private key that corresponds to this public key. So you can change any keys pitched to the account.
00:09:17.200 - 00:10:14.642, Speaker A: So we provide multiplication mechanism on the platform itself. So you can set multiple public keys into this key. The last one I want to talk about is Roger keys. We have found three roles first one is transaction and second one is account update and the last one is Prepayer. Keys for the transition role are used to use for transfer, smart contract deploy and smart contract execution. And keys for the account update role is used to update account key and the last one Ppayer role is used to change a key only. So if you have only keys for this P payer role then you can pay attention fee only.
00:10:14.642 - 00:11:52.720, Speaker A: If you want to transfer value then you need to know you need to have the keys for transition. Let's talk about transmort similar to the account model, ethereum does not have type information on transition model but it has three functions bill transfer, smart contract deploy and smart contract execution. In our crypto transaction we introduced four more fields first one is sender address. This is required to due to the change of private key so we should explicitly specify the sender address and on the platform we provide multi mechanism. The sender signatures can add multiple signatures and also P payer address and P payer signatures are related to the fee deletion mechanism but they are not occurred for all sentence shows the Ethereum transaction verification mechanism. As you can see we can get signatures from the transaction and then we can get public key from the signature and we can get the address from the public key but in Clayton we change its account model and transition model we should some more tested to verify the transaction. So for the Ethereum transactions we can use the same mechanism but for other newly introduced transaction types we can follow the right hand side.
00:11:52.720 - 00:13:16.410, Speaker A: So we can get signature from the transaction and we can get public key from the signature. So we can get public key from the left side and we can get account key from the sender address of the transaction. So we get two public keys and you can compare both keys and if they are matched then you can say that this is valid transaction. If they are not matches, then you can say that the transaction is invalid. This one shows two examples of our translation types left one shows value transfer and right one shows feed transfer and value transfer transaction does not have fee delegation mechanism so it does not have to have Fee payer address and fee payer signatures. So when we execute better transfer transaction, the transaction fee will be charged by charges to the sender address and the amount of tokens will be transferred from sender address to the recipient. And when you execute a Fiddly value transfer the attention fee will be charged to the fee payer and the amount of tokens will be transferred from the sender alias to the recipient.
00:13:16.410 - 00:14:41.800, Speaker A: And this shows some of our plate intention types and second column shows the page intention types which has no fee delegation and third column shows fee delegation trench types which provide feed deletion and each row shows different functionalities. First one is leverage transaction, this is provided for compatibility so all Ethereum transactions will be mapped to this leverage transaction and those functions are also provided in Ethereum. But we separate transition types and we also have new functions such as account update and so on. So if you are interested in the transient types you can find more information in our documentation site and let's talk about the performance in this chart on the xxpc shows the functionalities data transfer, smart contract deployment and smart contract execution. And Y axis shows relative execution time over legacy. As you can see, our new transient time performs slightly slower than the legacy. It means Ethereum transaction less than about 10%.
00:14:41.800 - 00:15:42.102, Speaker A: This is due to the doubling, coding and transition verification but we have more benefits. First one is Usability enhancement which means we provide change of private key and vertic mechanism and robust key. So there are much more visibility enhancement and due to the Thai information we can password to that undispowered need. So if we have more types or functions required in the future, we can easily implement those kind of types without incurring severe hardcore. And we also got search reduction at the time when we get the data. As of September of this year we found that there are 75 billion users billion accounts in Ethereum. So if we have high information into that, then we get one byte overhead for all accounts.
00:15:42.102 - 00:16:49.680, Speaker A: This takes 75 megabytes but we can reduce 64 bytes for EOAS. As you can see, we use route ten photo hash for those four bytes. If we assume that EOS takes 80% of total elemental count then we can reduce 3.8gb of storage cost. You can see this is obvious, we can get much more storage reduction. So let's summarize my presentation we found several isolated limitations such as invitable private key and legal and so on and we find solutions by extending account model and transition model. Also, due to the change of these kind of models we should change the transition verification mechanism which compared to Ethereum but we get trade off.
00:16:49.680 - 00:17:34.798, Speaker A: There's slightly negligible performance degradation, but we can get more penalties of improved visibility and extensibility, and we also reduce search cost. So I hope that this extension and these new models can be applicable to either Ethereum compatible chains or Ethereum standards. Okay, we always welcome to contribute our open source project Platinum. As you can see, you can check out our source code in the GitHub site. And you can also find some more information about Clayton in the documentation site. And you can see the right hand side. There's a QR code.
00:17:34.798 - 00:18:07.410, Speaker A: I don't know what it is, but you guys should want it to attach it in the last slide. You can find my email address. If you have any more questions, then please ask me this email address. Another thing I'll talk about is that there are some stickers and bags just in front of the entry. If you interested, you can take some of them. Thank you for receiving my presentation.
