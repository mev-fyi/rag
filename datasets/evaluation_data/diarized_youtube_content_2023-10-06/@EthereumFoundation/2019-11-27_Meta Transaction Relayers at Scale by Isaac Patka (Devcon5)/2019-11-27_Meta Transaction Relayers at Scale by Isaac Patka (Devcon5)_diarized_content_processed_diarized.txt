00:00:11.370 - 00:00:50.330, Speaker A: Hello everyone. I work for Bloom and today I'm here discussing our Metatransaction relayers. So what are metatransactions? First, metatransactions enable fundless key pairs to use smart contracts rather than spending gas. They sign their intended actions, is using their private key and then a relayer broadcasts on their behalf and pays the associated fees. So at Bloom in the past year we submitted over 250,000 meta transactions on Mainet, sometimes as high as 6000 metatransactions in a single day. During this time we were spending up to one to three east per day just to keep our Meta transaction relayers going. This has to do with like identity credential issuance.
00:00:50.330 - 00:01:38.906, Speaker A: So what we learned pretty early on is that simply broadcasting the transactions does not scale. You can't just call web3 Send or web3 Smagap and hope that it's going to work. Confirmation times are long and they're inconsistent. Gas prices can be volatile and there are frequently chain reorders which drop transactions. So the first thing that we encoded into this service, which handles very high volume of transactions, is non forecasting. So in this simple case on the left, you can see that we broadcast one transaction with nons 1001 and everything else is blocked so they can't all be mined in the same block. Instead, what you can do is use the non field of send transaction so that you can do 1001 through 1005.
00:01:38.906 - 00:02:13.522, Speaker A: And you can have all of these happen to the same block without waiting for mining when there is a non that's blocking the next one. So if we're waiting for 1002 to mine, we need to aggressively rebroadcast that transaction with a higher gas price until it goes through. So this happens in the service every 30 seconds. It rebroadcasts with a 0.1 way higher gas price in order to force it through so that every other transaction is no longer blocked. We found that on average, each transaction needed to be broadcast twice to go through. So I set up this in elasticsack.
00:02:13.522 - 00:03:04.854, Speaker A: When I looked in the morning, this looked healthy to me. There were transactions being created on the bottom and then they were being committed or rebroadcast on the top. Gas prices sometimes spike very high, but it's important to set a cap and wait it out because gas prices are volatile. But if we filter out everything above 100K, it's actually pretty consistent. So if you were spending, maybe somebody had some arbitrage opportunity way back in February, you didn't want to be competing with Emperor Gas, just wait a little bit and then you can get your transaction through. Our actual spending ended up being far less than the average, but we still had very high throughput. Also during when the network is very congested, mining will sometimes lag by many hours and you might be concerned that it'll never catch up.
00:03:04.854 - 00:03:44.530, Speaker A: But as soon as the network congestion goes away, the backlog clears and then your broadcasting and mining times get much closer together. One last thing that you also should look for is chain reorders. So if first you think that something was mined but later your transactions are not being broadcast, you should go back and look at the most recent transaction. See if it was dropped. And then you can either fill it with a dummy transaction, a zero value transaction or you can actually go back and rebroadcast that one. So finally, I just open sourced this about 10 minutes ago. It's this service that actually handles all this logic for you and it's very bloom specific.
00:03:44.530 - 00:04:03.906, Speaker A: Now you actually have to encode a lot of the contract logic. But I would love to try to get some other companies set up with this service. It handles a lot of took us a while to figure out. So please take a look. It uses PG boss for the queuing. It's all TypeScript. We use Typechain for contract typings.
00:04:03.906 - 00:04:25.850, Speaker A: Check it out and I'd really like to help you with it. Thanks, Sam.
