00:00:14.090 - 00:00:56.320, Speaker A: Hey, all right, so I'm Hudson Jameson. I work on a startup called Oak and Innovations and also work for the Ethereum foundation part time. Quick about me just for a few seconds. Been involved in blockchain since 2011, worked for a bank called USAA, doing their blockchain stuff for a few years, and then eventually worked for the Ethereum foundation and Oakland, which is what I currently do today. I have one wife total on the top left, and then I also have three cats. Is this for my wife or for my cats? All right, either way, if you like cats, you would love Vivian, Fry and Lilo. So that's just a little bit about me.
00:00:56.320 - 00:01:50.042, Speaker A: So solidity is a high level language for the Ethereum protocol. What I mean by that is usually when you get down to the low level parts of programming languages, you have bytecode, you have assembly and stuff like mips and all this other confusing stuff that people generally don't know how to write. It's not human readable. So what we've done is the Ethereum foundation has created solidity, which is a human readable language for smart contracts. So if you've been coding in solidity or been involved in the Ethereum community for a while, this talk might be a little bit boring. So I've decided to add a trivia question. The question is, how many high level languages does Ethereum have? We're counting defunct languages, but we're not counting things like ewasm.
00:01:50.042 - 00:02:32.410, Speaker A: So like you can't say rust and c and other ones that would compile to ewasm. So be thinking about that and we'll get the answer in a few slides. So solidity looks like Javascript, but it has types and the contracts kind of seem like classes. So it's about two years old, maybe a little bit more than that. And it's very easy language to pick up because it has a lot of the qualities that web developers might be familiar with. The code that is written in solidity is compiled to the Ethereum virtual machine. Once it's deployed to the Ethereum virtual machine, it's a closed environment that runs on every node on the entire Ethereum network.
00:02:32.410 - 00:03:31.182, Speaker A: So you can write a smart contract and deploy it, pay the miners to mine the contract, and when you deploy code, it's deployed across every single node in the Ethereum network, which is really cool. Issue with that is you can't have outside sources of information, so you can't have sports scores unless you put them in manually and have to trust the source. So if you want to get more information on that. Look up oracles or trusted data feeds into blockchains. So contracts in solidity are easy to write, but they're very difficult to make secure. There's a number, I'm just touching on this briefly, because there are many flaws and contracts that have caused a lot of lost funds. It's a very nuanced thing to understand, and there's growing resources for creating secure contracts, but it's not completely there yet.
00:03:31.182 - 00:04:06.902, Speaker A: Everyone's doing a really good job trying to come up with best practices and create things in the language to provide security, but we all have to keep up with that. And I encourage you to look at the solidity documentation under some of. There's a section about security considerations that you all can look up if you're interested. So here's the answer to how many high level languages Ethereum has. It is six. There's Mutan, which is a c like language that was deprecated around 2015. Serpent and Viper are Python like languages.
00:04:06.902 - 00:04:44.182, Speaker A: Serpent is deprecated. Ll is either called low level language or lisp like language, depending on who you talk to. And that's one of the lowest level, high level languages we have. There's solidity and then there's a new one called bamboo, which is supposed to be very safe, written by Yoichi and some other contributors from the community. If I got this question wrong, please go online and yell at me on Reddit, because I love feedback and I love Internet trolls, so please tell me if I'm wrong about this one. So contract standards are beginning to emerge. We have ERC 20, which many of you have heard about.
00:04:44.182 - 00:05:26.126, Speaker A: It's just a set of standards for having a token on the blockchain that's interoperable with other tokens. There's also security, or smart contract security best practices. I put the URL on the bottom and I'm going to publish these slides to Twitter so y'all can look it up after. But this is from a company called Consensus, and they have this on their GitHub. So I'm going to walk through a contract from creating it to deploying it to looking in a blockchain explorer about it just really quick. In order to do this, all the tools that you need to do this are online right now. The Fox logo is for Metamask, which is an online plugin for your browser.
00:05:26.126 - 00:05:58.330, Speaker A: I believe it's in Chrome and Firefox, at least it's in chrome. And what you do is when you have a transaction that you need to push to the Ethereum network. It acts as a bridge between your browser and the Ethereum network. We also have Remix, which is an online solidity integrated developer environment. What that means is that when you want to write and test code, it provides a lot of debugging features. You can run static analysis on it, you can call functions. It's a really helpful tool for writing contracts.
00:05:58.330 - 00:06:33.002, Speaker A: And then finally we have Etherscan. Etherscan is a blockchain explorer, so you can see the contracts you've created and the transactions you've processed. So first, let's go to Etherscan. So this is an example of pulling up contract code on Etherscan that's been verified. As you can see, we have the contract source, the amount of ether that's in the contract, and how many transactions have occurred. So let's just dive in and write our first smart contract. So this is a very, very simple contract right here.
00:06:33.002 - 00:06:58.846, Speaker A: I'm calling it simple store. And the only purpose of this contract is to store an unsigned integer or to retrieve an unsigned integer. So it's very easy to start a contract. You just declare it as a contract. You go in and then you declare your variables at the top, like many programming languages suggest you do. And then you can go in and create functions and events. Events are just like log files.
00:06:58.846 - 00:07:52.610, Speaker A: So as you're going through and debugging your code on the blockchain, you can have these log files spit out events whenever something happens in your code. So in our case, we have the set function. We made the set function payable, so we're able to send ether to it. That's another important security consideration. In the old days you would have to have a lot of workarounds in order to prevent your contract from keeping ether and not letting it be able to be sent out. But now we have this payable modifier that makes it so that functions have to have a payable modifier in order to receive ether, which makes it a lot safer if you're accidentally sending ether to contracts in the set function, I'm calling an event after I've stored the data that says the data that I've stored. And then on the function git I add something called constant.
00:07:52.610 - 00:08:28.590, Speaker A: On a blockchain you can do a transaction where you pay gas and you pay transaction fees in order to change the state of the blockchain. There's also something called a blockchain read or a constant function. There's now newer grammar, I guess, or newer function keywords around that. I think it's pure and a few other ones. So look that up, but you can still use constant for the time being. What it does is when you have a constant function, you can do a free blockchain read to retrieve your data, which is very powerful because it's just like reading a database. And I don't want to spend money if I'm just reading a database.
00:08:28.590 - 00:08:56.694, Speaker A: So that is the smart contract in a nutshell. What I'm going to do now is I'm going to hit the create button that I had on the other screen. And when I create the contract, a metamask confirmation box pops up in your browser again. You didn't have to download anything. The only thing you had to install was a chrome plugin and open up a website. So we're opening up this metamask box and we're hitting submit. We're putting in a gas price.
00:08:56.694 - 00:09:22.750, Speaker A: That kind of sets up the transaction fee. And now we go to etherscan to see our transaction being mined. So it shows that the contract's been created. It gives the input data how much the gas fee was and a bunch of other neat data for you to see. Now we're going to go to the contract itself. Before, we were just in the transaction that made the contract. Now we're in the contract itself.
00:09:22.750 - 00:10:06.458, Speaker A: And Etherscan provides a lot of other really cool tools. So we have transactions where you can see transactions that are happening between the contract and the user or the contract and other contracts. We see if there's any ether in the contract, we can see who created it, and we can even go and publish the contract code. So say I have this simple store contract and I want other people to be able to look up my contract and see the code. I can go into Etherscan and publish that code inside of Etherscan in a way where people can read it. So now when I go to contract code, it'll actually show me the code that I wrote. And you can look up functions much more easily in Etherscan.
00:10:06.458 - 00:11:06.610, Speaker A: It's a really powerful tool that's widely used for transparency purposes. So going back here after that transaction is mined, we have basically a blockchain log under there. And what it does is it shows you that you transacted with the browser, that you had a transaction mined in block 194-6928 and it shows you a bunch of other details, a lot of other interesting things. If you look here, we're going to go ahead and set a variable so on the right side of the screen from there before you can call the set function. So we're going to set it to 100 so again, we call Metamask, send the transaction. And now when you read the smart contract on Etherscan, you can see that instead of having a value of x equals zero, we have a value of x equals 100. So we've successfully stored an unsigned integer into a smart contract.
00:11:06.610 - 00:11:52.554, Speaker A: We have many integrations inside of solidity remix is one that I mentioned. We also have visual studio, we have intellij, vim, emacs, sublime. I think that's Adam. Basically, I went in and if you're using whatever iDe, whatever kind of browser you want, you can go in and plug it into whatever is comfortable for you. And it has a lot of things like syntax highlighting, it has a lot of things like syntax highlighting. We have tools like Solgraph and solidity replenium and a disassembler. And then at the bottom there's populous, embark and truffle.
00:11:52.554 - 00:12:36.714, Speaker A: Those are really cool tools. They're programs you download. They're usually under over NPM, so it's like a node JS program. And you can write tests for your solidity contracts in things like mocha. You can also have them automatically compile your contracts and redeploy them on the blockchain. There's just so many cool tools in there. Ethereum package management was a collaborative effort by a number of ethereum software developers that involved having an NPM like interface for the Ethereum contracts that are very widely used, such as ERC 20, we also have Solgraph, so contracts.
00:12:36.714 - 00:13:08.602, Speaker A: Talking to other contracts are very hard to visualize. So Solgraph takes your contract code and your functions, and it tells you all of the inputs and outputs and potential things that can happen within your contract. Selenium is a tool to use. I think it's a linter for solidity. I don't use it myself, but it's very popular on the whole. Sublime package manager. Oh man.
00:13:08.602 - 00:14:02.188, Speaker A: So that should be saying love solidity, but it looks like something is unknown less than solidity. And now it's covering up my slides. So you can go to jameson no go toengagements to see my slides. You can go to Witter at Hudsonjamison or edit usuptacular and you can find all my information on there. I have a couple of minutes, so if anyone wants to yell a question, I'll repeat it back through the microphone and feel free to ask any questions. Who has one? Raise your hand. Yes, I've seen some beta or alpha versions of eclipse plugins.
00:14:02.188 - 00:14:45.120, Speaker A: It might be further along than that, but I'm kind of unaware if there is a plugin for that or not. Just because it's not on this slide doesn't mean there's not a plugin for your iDe. These are just the ones that I've been able to very quickly find, so it's definitely worth looking up. Good question. And the question was, if I didn't repeat it already, is there something in the eclipse ide that works with solidity? Next question. Yes, what do I think is the biggest problem with solidity? The biggest problem is that it is a young language, and the problem with young languages in general across the board is that they don't have a lot of features that programmers are used to. So that causes a lot of frustration.
00:14:45.120 - 00:15:21.390, Speaker A: There's a lot of basic primitives and a lot of things that make it easy to start out, but otherwise there's not a lot of advanced tools. Also, the safety of solidity has been brought into question and a lot of people are like, solidity is super unsafe. Look at all this money that's been lost. But I mean, this is all a big experiment, guys. This is a super new language, and if anyone's complaining about solidity being insecure, they should come up with a way to make it more secure and start getting involved in these discussions and these tools. So that's kind of the approach I take. With that, we have time for one more question.
00:15:21.390 - 00:16:01.490, Speaker A: Yes, what upcoming feature am I most excited about? So if anyone saw the presentation on Zocrates yesterday, there are pretty new features to get cryptographic primitives inside of the EVM and therefore solidity to do ZK snarks which are called zero knowledge proofs. Zero knowledge proofs enable semi private and private blockchain transactions, and I think it's a really powerful thing for the Ethereum ecosystem. I'm Hudson Jameson. Thank you all so much for listening to me. Feel free to visit those websites and I'm going to have Christian come up after this.
