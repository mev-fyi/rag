00:00:04.350 - 00:01:03.990, Speaker A: Yeah, my name is christian and I would like to at least just introduce a bit into the language server protocol and the potential idea of having a language server for solidity. So what is the language server? What is the LSP? This protocol basically is a standardized communication protocol between the client, which is the IDE usually, and the server, which is typically some kind of compiler inside. And it does provide some facilities not just for diagnostics but also code completion. I mean, we all know it. And code refactoring, semantic highlighting is something I also really appreciate that you see, whatever symbols are also the same symbols as the one you are currently hoovering. Go to definition and find all references as well as code documentation and signature when you hoover a symbol. This is also something that I really appreciate.
00:01:03.990 - 00:01:50.254, Speaker A: Another thing. Yeah, I just wanted to give a very short overview of what an LSP message lifecycle looks like. So it's JSOn RPC, and basically the client just sends a message over the JSoN. It's a JSON protocol in form of JSON to the server, and it is then going to be decoded into a LSP high level object. This is how I call it. So I don't want to deal with native json objects, but with native C structs in my case, and it's then going to be handled and optionally we are going to encode a response LSP object into json RPC and then just send it back. That sounds trivial.
00:01:50.254 - 00:03:30.702, Speaker A: And that's also later I can show you some live demo, by the way, if I didn't decide to go for some json RPC library. Okay, so motivation, why do we actually want to have that? I mean, definitely real time compilation validation is really nice, and I believe Vmix is also having it, right. Real time code completion is something I would also like to have in my vim, but probably something not every editor is having for solidity is assisted code factorization so that you can rename symbols and that it is going to rename wherever it is also mentioned quick code navigation such as go to definition and code introspection with just one click is actually something that I really appreciated now with the life of intellisense, also in Vim for example. And at least from my point of view, that's my motivation to have it for solidity, to make some things easier. Real time auto correction for common developer mistakes. That's a more sophisticated goal that I would think could also fit into a language server, since the language server can propose code changes, so usually only the editors. Of course editing the code, but the server itself can say, look here, you typed if and what about an eight? I mean that's a trivial one, but just imagine the guy forgets to specify the visibility of the function he's currently writing.
00:03:30.702 - 00:04:24.614, Speaker A: Then this can be proposed like autofixing code. There's actually more about LSP and that's called LSIf. So usually the LSP works, let me go back one slide. The LSP works in a way that the LSP has to be running, your language server has to be running. But what if, for example, you have a web page such as GitHub or other tools? And lately GitHub for example introduced a way to also navigate through the code, and that is basically done with some kind of language server indexing format that I particularly find very interesting because maybe we could have something like this also for solidity inside of GitHub. And I also believe why this is the reason why Microsoft behind has been introducing this feature. But that's kind of future talk.
00:04:24.614 - 00:05:16.146, Speaker A: So as I said, analysis tools as well as websites such as GitHub can benefit from this. And I don't see any other users here, but I guess only time, which is kind of new still. Okay, so where are we now with weguts to solidity? I would say we are in a research and development phase. So I was bootstrapping tiny bits already, and I call it Sols, like solidity language service. It's currently a branch inside of the solidity GitHub repo. And what can you do? I can show you if you want to in a second. But let me first go into the challenges I had while trying to implement something like this.
00:05:16.146 - 00:05:31.030, Speaker A: First, our internal kernel API was, our internal compiler API was a little bit not really made for LSP in mind for tooling in mind and also error reporting. We report precise error numbers instead of ranges.
