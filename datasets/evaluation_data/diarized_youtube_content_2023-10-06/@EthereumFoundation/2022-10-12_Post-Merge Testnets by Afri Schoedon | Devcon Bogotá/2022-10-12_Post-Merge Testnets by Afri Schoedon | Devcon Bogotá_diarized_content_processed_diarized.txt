00:00:13.130 - 00:00:59.390, Speaker A: Protocol at ChainSafe Systems. Thank you. I'm also one of the co organizers of East Berlin and I used to work on various EF and ESP grants in the past for both Execution Layer and Consensus layer clients and among others. As Francis already mentioned, I launched the girly testnet with a bunch of cool people that are also sitting here in the room in 2019. So what I'm going to cover today is I want to briefly dive into the Ethereum protocol history prior to the merge and then specifically take a close look at the implications of the merge on the testnets and finally give a quick guide to selecting a testnet for your project. So, yeah, let's dive right into the protocol history. Everything started with a testnet.
00:00:59.390 - 00:01:59.102, Speaker A: Does anyone here know what the meaning of the Ethereum Genesis Extra Data is? You might know the bitcoin extra data. Genesis extra data contains a news headline. Does anyone know what the meaning of the Ethereum Extra Data is? It's actually a block hash from a testnet. Ethereum was publicly fairly launched by announcing a block number on Olympic testnet that was 1,028,201. And once this testnet was mined on the test, once this block was mined on the testnet, this hash could be inserted into the Ethereum Genesis and the public mining on Ethereum Mainet could start. Olympic was the last prerelease testnet before the Ethereum Mainnet was launched, and the first public Ethereum testnet after the launch was Morden. Morden was a proof of work testnet using the same Eshash algorithm as Mainnet.
00:01:59.102 - 00:02:54.270, Speaker A: And interestingly, it had a custom starting nonsense of two to the power of 20 to prevent transaction replace on Mainnet. Most of us probably remember the Shanghai attacks during Defcon Two in 2016. An attacker exploited the long discrete time of the Xcode size Opcode in one of the client implementations which caused a denial of service of the Ethereum Mainnet. Here's a photo of the amazing guest team investigating the issues and coming up with a solution to address this issue. Two subsequent hard forks were scheduled for Ethereum the Tanguine Whistle Fork to fix the attack vector and the Spurious Dragon Fork to allow cleaning up the state afterwards. However, this protocol change caused a consensus failure on Morden. This was specifically caused by the different ways how the clients handled this custom starting nons.
00:02:54.270 - 00:03:37.890, Speaker A: And it was then decided it's not a good idea to have a custom protocol on a testnet. And therefore Morden was discontinued and replaced by a new testnet called Rupson. Rubeston was the first testnet to launch with Shine ID right from Genesis. The Shine ID served the purpose of simple replay protection according to EIP 155, so the Rubeston testnet was also powered by the ESA proof of work engine. We all know proof of work is fairly permissionless, so there is no good incentive to secure a zero value proof of work testnet. So attackers moved to DRS. Rupstin and the testnet was unusable for weeks.
00:03:37.890 - 00:04:28.530, Speaker A: In response, Parity launched the coven proof of authority testnet and guests launched the rinkbee proof of authority testnet. For the first time. Ethereum had a way to have a more stable testnet environment. However, Coven used the Parity Aura Consensus engine and Rinkby used the Gas Click Consensus engine and they were not compatible. Coven was therefore only accessible through the Parity Ethereum stack, whereas Rinkby was only accessible by Gas or tooling that relied on the Gas stack. So in 2018, the Girly initiative attempted to address this by ideating a cross client Proof of Authority testnet. In the end, the initiative managed to implement click in Parity.
00:04:28.530 - 00:05:17.614, Speaker A: And subsequently, in 2019, the Girly testnet was launched as a first cross client Proof of Authority testnet with validators from both Gas and Parity Ethereum at the same time. Coincidentally, after defcon in Prague, I believe the Pantheon client was released. So there was even a search client available for running validators on this testnet and soon after also nezamind joined the validator set. Yeah. Later the same year, Parity exits Ethereum and leaving Coven fairly unmaintained. Unfortunately. Now going fast forward in time, just earlier this year, to prepare for the merge, some of the older testnets had to be deprecated.
00:05:17.614 - 00:06:16.550, Speaker A: The Protocol support team announced the end of life for Rupson and Rinkby on the amazing Ethereum Foundation block. They argued the older testnets are harder to maintain due to growing history and state and the growing complexity to run the testnet setup. So in foresight, however, a new testnet was launched, sipolia. Interestingly Sipolia that was just launched not even a year ago. It was launched as proof of work testnet using the same Eshash algorithm as Main net. Back in the day, there was the first time since the Rootstone launched in 2017 that we actually launched a new Proof of work testnet. The reason was potentially to have another testnet similar to Mainnet to allow for once again testing the merge under mainnet conditions.
00:06:16.550 - 00:06:45.390, Speaker A: Okay, so let's recap the testnets. Prior to the merge, Morden is fairly dead. It was replaced by Rupson in 2017. Rupson, then again, was just deprecated. A couple of weeks ago, COVID died with Parity leaving Ethereum. Rinkby was also deprecated just a couple of months ago. And that leaves us with Gurley and Sepolia as the latest testnets for Ethereum.
00:06:45.390 - 00:07:34.334, Speaker A: And now let's just take a look at what it actually means to merge. I took a lot of time to build these slides. So in Ethereum, the merge stands for an event where two blockchains are literally glued together. You need a consensus layer beacon chain that takes over finality and fork choice considerations here shown in blue. And this consensus layer beacon chain replaces the legacy proof of work consensus or other consensus mechanisms on the execution layer here depicted in red. So this slide shows the timeline of the testnet merges. And I added a lot of details here.
00:07:34.334 - 00:08:10.250, Speaker A: I'm standing in front of it. I added a lot of details here, but let's revisit this slide in a bit after talking a bit about the implications. So, just to recap, a Proof of Work consensus mechanism is permissionless as per Nakamoto Consensus. So you can just turn on your CPU Miner and hope for a block in theory. On the other hand, proof of Authority is permissioned. Obviously, only authorized accounts may take part in consensus. And then again, Proof of Stake is fairly permissionless.
00:08:10.250 - 00:09:12.490, Speaker A: You have a token and you can stake it to take part in consensus. So what does it mean for ISO Mainnet the merge? Obviously, moving from proof of work to proof of stake just does not change much in this perspective, it was permissionless before the merge, it is still permissionless after the merge. But how does it look like for the testnets? So Gurley was merged with a Prada beacon chain testnet and to get access to the consensus on the Gurley testnet prior to the merge was permissioned. So Gurley was running a community maintained validator set. However, after the merge, it transitioned to a Proof of Stake consensus. Interestingly. And suddenly everyone can participate in Consensus given you have access to Gurley.
00:09:12.490 - 00:09:51.690, Speaker A: So Gurley used to be permissioned, is now permissionless. But what about Sepolia? As I mentioned, prior to the merge, it was powered by the Permissionless ESEs Proof of Work algorithm. Here you can see my Sepolia miner. I was happy that I once again can mine a testnet. And yeah, I did not ask for permission, I was just able to mine the blocks. I got a lot of Sepolia ether. But now there's something unique about the Sepolia beacon chain.
00:09:51.690 - 00:10:53.520, Speaker A: Since it was apparent that Gurley will no longer be permissioned, there was actually the quest for having another permissioned testnet to have certain stability guarantees. So it was decided that Sipolia gets a beacon chain with modified deposit contract that does not accept regular ether deposits, instead attracts the validator sets through an ERC 20 token. So in that case, Sepolia is Proof of Authority version of the beacon chain and therefore the access to Sepolia consensus is permissioned. So let's take a look at this overview again. This is a timeline actually on the x axis. The first testnet to merge was Rubeston. Rubeston was fairly similar to Mainnet, it was proof of work.
00:10:53.520 - 00:11:42.190, Speaker A: And after the merge it was proof of Stake. Right? So permission less, permission less. Then Sepolia transitioned with this modified beacon chain. So technically, the consensus algorithm is still proof of Stake, but through this permissioned ERC 20 token that you require to take part in consensus. I call it, for simplicity, proof of authority here, because the access to this consensus is actually permissioned. And then Girly merged with Prada and testnet, where exactly the opposite happened. The Proof of Authority Girly testnet became a Proof of Stake girly testnet after the merge.
00:11:42.190 - 00:12:28.810, Speaker A: And then, yeah, we are here eventually, just a couple of weeks ago, the mainnet merge occurred. So yeah, just take a look at the post merge testnet landscape. I showed you that Rubesen merged. However, it has been deprecated by the Ethereum Foundation's protocol support team and it leaves us with Gurley and Sepulia as the only long standing public post merge testnets. So I will conclude my presentation with a testnet selection guide. I mean, it's only two testnets. How hard can it be? I mentioned how amazing the Ethereum block is.
00:12:28.810 - 00:13:28.270, Speaker A: It's just a great resource. I found this slide on the Ethereum block. Basically, just recaps what I just said, the open validator set for Gurley on the one hand, the closed validator set for Sipolia on the other hand. Obviously, since Gurley is much older, it has a large state that gives some better network effect. So if you have an application that you want to deploy on Gurley and you require other applications or interfaces, you might find them on Gurley but not on Zepolia because Zapolia is fairly new and not many applications and libraries are deployed yet. However, it's also longer to sync and more involved to run Gurley infrastructure. So to summarize this, please do use Gurley testnet as it is most similar to the Ethereum mainnet.
00:13:28.270 - 00:14:24.846, Speaker A: Gurley is especially interesting for you if you plan to test a beacon chain validator, if you want to test your setup, if you want to test upgrading client versions, if you want to test going through protocol upgrades, gurley is potentially the best or if not even the only testnet where you can actually conduct this. Yes, please also do use the Sepolia testnet. Sepolia comes with the best stability guarantees due to the permissioned validator set. Since it's fairly new, it is fastest to sync and also has the best long term guarantees. So I would lean towards recommending to test your applications or even migrate your applications to Sipolia instead of Gurley at this point. Yeah. Do not use rubeston.
00:14:24.846 - 00:15:02.330, Speaker A: Obviously, when I prepared my slides, I realized that we are just in this transition phase where big service providers already start shutting down infrastructure. So you have to expect interruptions and downtime. Don't use Coven for obvious reasons. And yes, also I would not recommend using Rinkbe even though there is some long term support planned for Rinkbee for almost another year. But you will potentially not get more protocol upgrades on that network. So I would also not recommend using Rinkbee in that regard. Yeah, right.
00:15:02.330 - 00:15:30.950, Speaker A: There are some caveats though. As I mentioned, the Gurley testnet has ether supply issues due to the sheer amount of users trying to test their validator setup. Each validator requires 32 E's, and if you want to have a more involved setup with, I don't know, 1000 validators, it quickly becomes a huge burden, huge problem to access these required testnet tokens. This is something we still need to figure out going forward. So if you have an idea. Please hit me up. Yeah.
00:15:30.950 - 00:16:16.662, Speaker A: And in terms of testnet age, Gurley is also fairly old. So it comes with a fairly big rich history and state and is therefore more difficult to synchronize, especially now that it's merged with Prata which also comes with a fairly old beacon chain in combination. And yeah, Sipolia is relatively new. As I mentioned. I wrote down lack of infrastructure. I put it in brackets because it's changing really rapidly right now. I just noticed while preparing my slides that even MetaMask has Sepolia testnet switch now.
00:16:16.662 - 00:17:00.542, Speaker A: So it's happening. I'm really happy that we get all these integrations now. Okay, this is my subjective recommendation. If you want to test infrastructure, if you want to test your validators, I would recommend you to run them on Gurley. If you want to test your applications, I would even encourage you to skip Gurley and go straight to run your stack on Sepolia. Okay, this was my talk. Please use Gurley or Sepolia going forward, find me for some spare Ether cards from East Berlin.
00:17:00.542 - 00:17:14.200, Speaker A: They are preloaded with Gurley and Sipolia ESA. So if you want some, I will not throw them into the audience but just find me after the talk. And yes, since we have a couple of minutes left, please ask questions.
00:17:15.610 - 00:17:27.370, Speaker B: Thanks for the presentation. Is there any tutorial or manual how to be a validator in Sepolia? How to help in the infrastructure?
00:17:29.470 - 00:18:00.150, Speaker A: Short answer is you can't because as I mentioned, even though it's proof of stake, you need a special ERC, 20 token to get access to this valid data set. And you would basically have to google Sepolia GitHub repository. And there is an issue where you can request to be added to this validator set but in general not many teams will be accepted just to keep it really small. Validator set, maybe.
00:18:00.220 - 00:18:42.098, Speaker C: Two questions here. One, when EIP 1559 came around, it was very hard to test that in advance because you'd have these proof of authority networks that had no fee market and then you have these proof of work networks that had like kind of a fee market. You could kind of reason about sort of what that change would do. Sorry, I am leading into question here. I'm just giving some background and then COVID if I seem to remember right, was like parody technologies, maintained it for the old open Ethereum parity client, sort of the idea. And I think now the execution layer is a spec. There's some value behind testing clients, I guess.
00:18:42.098 - 00:18:55.560, Speaker C: Just to sum it up to a question, both testing features and execution layer specs, has there any thought then behind testing those kind of things moving forward, spinning up testnets or forks of testnets to do that?
00:18:58.970 - 00:19:05.770, Speaker A: I'm sorry, I don't think I got the question. I don't have the speakers. If you could just try to speak up a bit.
00:19:05.920 - 00:19:42.950, Speaker C: So testing specific features of Ethereum forks like a fee market changes or testing or validating the execution spec was sort of the goal because you had open ethereum or Parity and geth and whether they synced up or not in terms of where they're executing EVM basically correctly was always a question. Right? If they ever split, that's what I'm asking. Where is the testnet infrastructure sort of going in terms of forks and things are just going to spin it up whenever or whatever. I don't want to beat this to death.
00:19:44.650 - 00:20:28.274, Speaker A: Yeah, I hope I understand the question correctly. So I was talking about public testnets today and public testnets is always the really final stage of testing everything. So if you want to test execution layer changes, consensus layer changes and whatnot, you usually go from local simulations to permissioned deaf nets through a lot of hurdles until you actually get to a public testnet. And these testnets, like when I recommend Gurley or Sepolia, they will only get protocol upgrades that have been sufficiently tested before. I don't know if this answers your question. Okay. Hi.
00:20:28.274 - 00:20:29.090, Speaker A: Afre.
00:20:29.430 - 00:20:39.982, Speaker B: It's loud. Do you know why did the mergers happen the way round they did? Wouldn't it have been more logical for Gauley to continue as a proof of authority?
00:20:40.066 - 00:20:41.420, Speaker A: I think I have to come down.
00:20:44.670 - 00:20:55.850, Speaker B: I'm just wondering why the merges happened the way around that they did as opposed to Gauli continuing as a proof of authority and Sepolia transitioning.
00:20:56.190 - 00:22:15.830, Speaker A: Yeah, thank you. That's a very good question. The reason is that it merged with the Prada testnet, which used to be a consensus layer testnet for a very long time, where many teams already tested running validators for more than a year or one and a half year. So it was already this proof of stake testnet available and it was decided not to launch a new beacon chain testnet for Gurley specifically and just use the existing one. So that's why we had this flip. It was also discussed to maybe have a new deposit contract on Gurley but in the end they decided it's actually worse for testing the merge to do the big merge because Prata was also the only consensus layer testnet that had about approximately the same amount of validators in mainnet as mainnet long history. Yes, and it was very valuable for specifically the consensus layer teams to have to not sunset this Prada testnet and you cannot move this Prada testnet to another execution layer because it's all linked to the deposit contract.
00:22:17.130 - 00:22:43.342, Speaker D: Have validators or the external participants on these test nets and you need to do a bug fix. When you need to do a bug fix on the testnet code, are the external participants such as validators, having to rebuild their validators on a new machine image or a new version of the code base? And how often does that happen during.
00:22:43.396 - 00:22:52.450, Speaker A: The testnet phases was a question. If there's a bug fix on a testnet, how often you have to rebuild your clients?
00:22:53.030 - 00:23:12.230, Speaker D: Yeah, what's the workflow when there is bug fixes applied to the testnets? If you are a Validator, there might be a protocol bug. So does the Validators get coordinated and they redeploy their nodes multiple times during the testnet rollout?
00:23:14.010 - 00:23:27.680, Speaker A: Yes. This is basically the answer is yes. But this happens very rarely because most bugs are usually not caught on testnets, but much, much earlier. Thank you, everyone.
