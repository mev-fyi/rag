00:00:03.340 - 00:00:30.360, Speaker A: Okay. We are recording. Yeah. So, Trent, I see you shared the agenda. One thing also you mentioned is that a couple of teams have mockups and whatnot that they've been working on and I think they've shared with you. I don't know if it maybe makes sense for teams who've actually prototyped stuff to maybe take five minutes or ten minutes to walk us through it. I feel like that might be a good way to set the context.
00:00:30.360 - 00:00:55.360, Speaker A: I don't know if now that it's recorded, that changes things. Otherwise we can kind of go through the agenda or just like the questions that people had, but, yeah, I feel like if a team kind of wants to walk through what they've thought about so far and how they've kind of approached things, that might be useful to make it a bit more concrete than just talking in the abstract.
00:00:56.100 - 00:01:14.484, Speaker B: Yeah, no, I think that would be great. And I think we have two mockups from Jake, and I've. I know I mentioned it to Carl, but Jake, I don't mean to put you on the spot, but if you wouldn't mind just walking us through what your team has put together so far, I think. Yeah, that would be a good way to start.
00:01:14.682 - 00:01:16.010, Speaker C: Yeah, for sure.
00:01:19.100 - 00:01:20.360, Speaker A: Yeah, let's do it.
00:01:20.510 - 00:01:23.592, Speaker B: Share your screen if you have it pulled up or I can share it.
00:01:23.726 - 00:01:24.952, Speaker D: No, I got it right here.
00:01:25.006 - 00:01:56.644, Speaker C: Just give me one secondary. We've had a lot of conversations. This is very much a rough draft. We're hoping to do some user testing really soon, probably by the end of this week. So we'll probably be iterating. There's probably a lot of things that are going to change or things that don't make sense, but here's where we're at. So the scenario, this is sort of a stripped out view.
00:01:56.644 - 00:02:20.220, Speaker C: Just to keep it simple. The scenario is focused on swap. So we're showing uniswap here. We're thinking about what changes in different network conditions if traffic is increasing versus decreasing. So this scenario is kind of focused on an increasing traffic. So we're sort of estimating that fees are going to be going up. There's a little bit of a wider range.
00:02:20.220 - 00:02:45.248, Speaker C: So you go through, you hit swap on uniswap. This is the revised transaction screen. So there's really only two pieces we've changed. We're calling it an estimated gas fee. This is what we expect you to pay. And then there is a range. So that range would be if the network traffic didn't continue in the direction we did.
00:02:45.248 - 00:03:30.736, Speaker C: Maybe it's a little bit less and then the top end would be sort of your max fee. And then down here we're showing the total, we're highlighting the estimated amount. I think a lot of that's going to depend on how confident we feel about that number. We don't want to show a number and then pay something else, but we feel confident about it highlighting that number and then showing it up too. And then if you hit edit, that brings you over into the edit view. The way we're thinking about it now is trying to shift focus from speed and more towards purpose, like what type of transaction are you doing and then how much should you be paying based on that? So we're going to have to have a good fallback. So we're not always going to know that scenario of what somebody's doing, but our hope is we can sort of understand what they're doing.
00:03:30.736 - 00:04:11.240, Speaker C: So in this case they're doing a swap and then we'd be recommending a higher setting since it's time sensitive. So we have high, medium, low. And I can dig into more details about some of these numbers if that makes sense, but I'll just kind of skip over that for now. And then if they override that, just trying to inform them, hey, maybe that's not a good idea, we're still allowing them to do it, but part of it is just like education on what setting you should be picking and so you're not just setting it to low every time. And then we have advanced, we've spent less time on the advanced, but here's where it is now. Your gas limit, max tip per gas. Max price per gas.
00:04:11.240 - 00:04:48.570, Speaker C: I still think there's some room to improve this a little bit, specifically between how the max tip rolls into the max price. I don't know if it's very intuitive here, but we are going to need some error states. We just have one showing here, but there's definitely going to have to be some more thought on how we talk about this to the user if they're putting weird settings in. So we're showing some of those stats that we have on the main screen. So the fee range, the estimated fee wait time. I'm just kind of putting in numbers here right now. I'm not sure exactly how big those swings are going to be, but the idea is the lower your fee is, at some point we're just going to have to say unknown, like we're not sure when it's actually going to process.
00:04:48.570 - 00:04:59.950, Speaker C: So I can pause there. There's some more thought in the actual numbers, but a lot of them, I'm just kind of making up for the time being, stress testing the designs, but I'll pause there.
00:05:03.860 - 00:05:23.620, Speaker B: Awesome. This is really helpful to have. Does anybody have any initial questions or things that they want a clarification on? Are you updating every 20 or 30 seconds?
00:05:24.280 - 00:05:26.020, Speaker E: Update those ranges?
00:05:27.080 - 00:05:40.344, Speaker C: Yeah, absolutely. That's one thing that we haven't tackled yet, and to be honest, it's been in my head. We haven't actually talked about it, but this will. I mean, it will have to update pretty quickly and that's something we definitely need to take consideration, especially on this screen.
00:05:40.382 - 00:05:40.536, Speaker A: Right.
00:05:40.558 - 00:05:50.944, Speaker C: If you open this up and you just sit here and it's just like quietly updating and maybe you're not really paying attention. So I think we're going to have to put some animation or some fade in, some fade out, something to make that a little bit more obvious guess.
00:05:51.142 - 00:05:51.504, Speaker A: Yeah.
00:05:51.542 - 00:06:06.340, Speaker C: How we estimate the range. We could potentially pad it a little bit so there's a wider window where those numbers make sense, but at the same time, it's like a balancing act. We don't want to show too big of a range, so still a bridge to be crossed.
00:06:10.520 - 00:06:18.600, Speaker A: Are you going to allow people to submit legacy transactions? I'm not sure there's a use case for it, but they'll still be possible on the network?
00:06:19.260 - 00:06:20.680, Speaker C: Yeah, totally.
00:06:21.180 - 00:06:25.850, Speaker A: Okay. Yeah, this is really cool.
00:06:28.060 - 00:06:42.640, Speaker F: One question. Do you somehow detect if the current base fee on the network is really high and alert the user somehow, or you always get send the maximum fee that's greater than the current base fee without alerting the user?
00:06:43.300 - 00:06:50.876, Speaker C: Yeah, that's a good question. In some of our earlier mocks, we did do a little bit more messaging around the current network status.
00:06:50.908 - 00:06:51.104, Speaker A: Right.
00:06:51.142 - 00:07:14.600, Speaker C: Like, hey, it's really busy right now. Fees are really high. We did consider sort of prompting people to add a lower max fee and waiting for it or running the risk of it. So that's not shown in these mocks. Like, we're not testing that. I think we're kind of trying to strip it down to MVP, but that is certainly something that I think is worth considering.
00:07:15.740 - 00:07:16.152, Speaker A: Yeah.
00:07:16.206 - 00:07:21.100, Speaker C: And if that feels important, I might circle back and bring those back into the mockups.
00:07:25.600 - 00:07:58.616, Speaker A: Yeah. There's a comment about should we allow opt out at the user level to send legacy. I think it might make sense to preserve that. But the main advantage of sending legacy transactions for the users is the fact that it's like if 1559 is not supported, say they use, I don't know, like Ledger and Ledger doesn't update. We want the network to be able to have their transaction or say they signed a transaction a year ago, right. They've been waiting to broadcast it for a year and they threw out whatever thing they use to sign it. We want them to still be able to send it.
00:07:58.616 - 00:08:47.044, Speaker A: So I don't see a use case for allowing users to never not have 1559 transactions as a default. But there might be some weird edge cases where in the advanced settings you want somebody to be able to dig up and send a legacy transaction. But if you're constructing the transaction on behalf of your users, there's not really a good reason to send a legacy transaction because that means they're just going to pay more gas. They won't get a refund, they won't get the difference between their fee cap and the base fee, the tip refunded to them. That all goes to the miner. Yeah, absolutely. We've been talking about keeping the old UI experience around for networks that don't support EIP 1559, et cetera.
00:08:47.044 - 00:09:33.780, Speaker A: Yeah, sorry, that's the for sure. If you're obviously supporting like Ethereum classic or XDI and they haven't integrated yet and whatnot, you'll need to keep the old UI. One question that we have, and maybe if we have time at the end of the call after we get through some of the UX stuff, is just how do we detect support? I know there's like an EtH magicians forum thread that Dan Finley had opened about this, but. Yeah, the short answer to there. So there was a thread in the agenda about that. I think at this point the easiest way is you look at the block header and see if there's a base fee in it. Unfortunately, there's no way to know that a network will support something in the future.
00:09:33.780 - 00:10:06.816, Speaker A: So you can't say, we announce the fork tomorrow. You can't look@main.net and know that 1559 is going to happen on fork block x. But once the fork block passes, every single block will have a base fee. So that's probably like the most reliable way to check it. Well, thanks. Cool.
00:10:06.816 - 00:10:20.020, Speaker A: Anything else on the metamask? Marks and Trent, I believe you said there was another team that had let me.
00:10:20.090 - 00:10:22.128, Speaker B: I think Carl is here from status.
00:10:22.224 - 00:10:25.648, Speaker E: Yep, I'm here. I'll start sharing now.
00:10:25.834 - 00:10:26.570, Speaker B: Great.
00:10:30.060 - 00:10:31.930, Speaker E: Okay, can everybody see?
00:10:34.060 - 00:10:34.712, Speaker B: Yes.
00:10:34.846 - 00:11:55.670, Speaker E: Okay, great. So trying to keep things initially as close to what exists now, rather than giving people ranges of fees when they're choosing their priority, we're only showing them the maximum that they're going to be paying for that transaction. And then kind of behind this, we do have all of the custom stuff. So we're giving them information about the current base feed gas limit, per gas tip limit and per gas price limit, and then calculating their maximum fee. But as a part of this, there are then a set of edge cases that we need to kind of handle and watch for. So if the user sets a tip that is below the currently accepted tip, then we're showing them a warning around the minimum tip of the last x blocks and the average tip that is being given to the miners if it's above the minimum but below their average. Here we're giving them information about that.
00:11:55.670 - 00:12:26.940, Speaker E: If their per gas price limit is below the current base fee, then again, we can guess that it's going to block that transaction initially anyway, if I go ahead a little bit further, and then there are an additional set of edge cases where if somebody sets.
00:12:30.240 - 00:12:30.664, Speaker A: A.
00:12:30.722 - 00:13:30.690, Speaker E: Base fee that is above the current base fee but lower than the current tip, then again we can assume that that transaction won't be accepted initially. And then again an edge case for when the calculated tip is going to be below that average. So there are lots of more edge cases here that we need to be watching for. And all of these edge cases then feed into the actual kind of simple interface where somebody just has a scale. Because on that scale, honestly, we have no idea what these ranges should be. We don't know, for example, what the overall limit should be above the current base fee. Taking into account the tip, should it be wongwi or should it be like ten gui over that we don't really know.
00:13:30.690 - 00:15:21.360, Speaker E: And then if I just go a little bit further, if the base fee plus tip is going to be below the current base fee plus tip, then we introduce some extra friction in this transaction to basically get the person to either go change the tip or change the limit. And then yeah, there are also kind of combinations of these edge cases as well. So if the tip is too low, sorry, I'm reminding myself of these screens as I'm running through them. If the tip is too low and the overall limit is too low, then we need to also show them information about what is happening in those specific situations. And then I guess the most helpful part of this would be, yeah, these are the edge cases that we're looking for inside that custom fee interface with regards to rollout. We had a discussion about this earlier today, and after reviewing the document around how it's going to be released and kind of initially having the wongwee base fee and still having the auction mechanism. We at least imagine that keeping the current gas interface is going to be the best thing to do for the initial, let's just say 50 blocks and then switching to this new interface.
00:15:21.360 - 00:15:44.270, Speaker E: But really we don't really know what is going to be best on day one or from the first block onwards. We're very much just kind of throwing ideas out there at the moment and seeing what will work. But yeah, I'll go back to the screens and if anybody has any questions, happy to jump in.
00:15:49.680 - 00:16:04.290, Speaker A: Hi Samuel here, thanks for this. I was wondering since there's a lot of part dependencies and different options are not known, do you have any plans to a b test this to your users or would it be a big.
00:16:09.460 - 00:17:19.950, Speaker E: Mean? What I imagine as doing is basically being on call when this goes live. Ideally we chatted about this today as well is we'd have a test run to make sure that all of this is going to work. We're not in a position to a b test this interface against the current interface because it is going to go live and we need to accommodate for it. We can't have the current gas interface tested against the new interface just because the current gas interface doesn't cover all of the parameters that people can manage themselves. That being said, somebody mentioned earlier being able to switch the interface to use the current gas format. And I think that is something that we don't have in here and that's something that we probably should have in here. But yeah, a b testing, I don't think we're in a position to do that with this.
00:17:22.640 - 00:17:39.520, Speaker B: I think one thing maybe we could help organize is just user testing for people. Once the test nets start to fork, we could probably get you some people to just start poking around and looking at things and I think we could try to do it for most teams, but no promises.
00:17:40.900 - 00:18:50.810, Speaker E: Yeah, that would be really helpful. We are going to run through this, make sure that everything's usable and make sure that people understand what is happening after we've got an initial build ready. But the main things that I imagine is changing are going to be the copy that we're using in these edge cases. What we still don't know are if I go here, we don't know how to estimate the priority fee. So what is low priority? What is high priority? We still need to figure out that part of it and I'm not sure how we're going to do that. That isn't really something that I'm qualified to talk about, but, yeah, I think it's big unknown until we start to learn after it goes live.
00:18:51.980 - 00:19:36.710, Speaker A: So we have some values, I don't know if you saw the cheat sheet that Trent and I put together. We have some rough values for the priority fee that we've used. So, basically, the challenge for the priority fee is you want to compensate miners enough that it's worth it for them to add their transaction. And the more transaction miners add in the block, the higher their risk of being uncled is. And this used to be quite simple to calculate, but now a large part of the uncle risk is MEV bundles. So if a miner has an MEV transaction in their block, that's like a high value, time sensitive transaction. So the opportunity cost of these transactions is much higher.
00:19:36.710 - 00:20:29.800, Speaker A: So, in the cheat sheet, you can see there's, like, a graph, basically, that shows, like, a linear relationship between what the average MEV in a block is and what should the tip be. Flashbots has a dashboard that kind of tracks this over time. There's no great library, there's no great way to plug in that dashboard in wallets. But if you want, like, a ballpark value to start, what I would do is looking at the flashbox dashboard a week or two before the eep goes live, and you can kind of ballpark what's the average MEV in blocks then. And then you can go back to the graph and figure out what's the right tip. Right now, that value would be about two. They've.
00:20:29.800 - 00:20:46.460, Speaker A: Anyway, splashbots rolled up a bunch of optimizations that will allow for more mev in each block. So I suspect by the time it goes live, like, a decent tip for most transactions is probably going to be, like, three guay again, subject to how the MEV evolves.
00:20:50.340 - 00:21:07.924, Speaker E: Yeah, the MeV stuff is another. I haven't really touched on that, but that was honestly a big unknown, like, how MeV would interact with this and what that baseline tip should be. So that's really helpful. Thank you.
00:21:07.962 - 00:21:37.320, Speaker A: Yeah. And looking at it, you can be fancier. I'm just taking, like, an average, right. But if you are like, a wallet and you want to be a bit fancier, you could say, maybe your fast transaction should be worth it for a minor to include in the 95th percentile of mev blocks. Right. And then maybe your optimal is, like, the average, and you're slow. I think right now, there's only something like 30 or 40% of blocks that have mevs.
00:21:37.320 - 00:22:03.910, Speaker A: So you're slow. You can probably set, like, a tip to like two Gwe. I forget if it's one or two guay. It says that the spreadsheet, but that'll compensate basically for blocks with zero mev. So your slope can basically just be, you're wailing until there's a block that doesn't have mev in it, which on average should be two, three blocks. It does complicate things a lot.
00:22:04.680 - 00:22:22.940, Speaker E: So there's that, and there's also the base fee, whether that base, I mean, I know we can determine whether the base fee is going to go up or down based on activity, but also we then need to make a call on what a low priority base fee is going to be versus a high priority base fee.
00:22:25.600 - 00:22:27.388, Speaker A: And then hopefully in the future we.
00:22:27.394 - 00:22:52.550, Speaker E: Can estimate time based on that. But there are so many variables and so many moving parts that it's really difficult. I can't right now say, okay, we know what is going to happen ahead of time. So this is very much kind of the absolute minimum that we can do initially to cover for the parameters and everything that's required as a part of it. And then hopefully in the future we can introduce estimation on time.
00:22:55.660 - 00:22:56.184, Speaker F: Just because.
00:22:56.222 - 00:23:00.680, Speaker E: There'S so many different things to include.
00:23:01.260 - 00:23:23.040, Speaker A: Yeah, and I think having on chain data, even like a few weeks of onchain data, will be massively useful to see what the right defaults are. I don't know how much tracking you do of user data, but if you're able to see these transactions failed or got stuck pending and whatnot.
00:23:24.260 - 00:24:02.670, Speaker E: So that's a situation that I'm a little bit nervous about. And that would be, let's just say day one, there's suddenly high congestion, lots of people are trying to transact and essentially have a bidding wall then between users of different wallets. On the safer side, we don't want to be in a situation where our estimation is totally off and nobody can get a transaction through from state. Let's use it using the simple interface. I guess that's for us to figure out.
00:24:04.080 - 00:24:43.864, Speaker A: Yeah, and I think that's a really good think about. Yeah, that's a really good point. So this was like the last thing I put in on the cheat sheet, but when 1559 goes live, the base fee is actually set to one GUI, which is tiny. So that means there will be a period where blocks will be full just because there will be this biding war. So I suspect the easiest way for wallets to get around that is to actually wait to display the 1559 UI. And you basically want to wait until blocks are not completely full again. And I had some rough ballpark numbers there.
00:24:43.864 - 00:25:02.930, Speaker A: It's probably something like 1530 ish minutes. And I had some better criteria. I think once you have that initial spike, you'll probably get to a spot where you are no longer in a bidding war and prices are stabilized. And so the 1559 UI should work.
00:25:07.620 - 00:25:28.200, Speaker E: At the start of the call I mentioned, we're going to possibly keep the current interface or the current estimation interface for the first 50 pox and then switch. Hopefully that keeps things simple, but obviously want to double check that. That sounds right with everybody here.
00:25:28.350 - 00:26:16.692, Speaker A: Yeah. So the trade off there is, if you leave it just too long, users might overpay slightly on their transactions. So I think you could say like you want to be really safe and you put it for 100 blocks. So that means for those 2nd 50 blocks, maybe your users are overpaying you a little bit, but they're not potentially getting their transactions stuck. So I think that's just like the trade off every wallet basically needs to figure out, I guess. Yeah, we're almost like halfway through the call. We did have a bunch of topics on the agenda, but I don't know if just to make it as useful as possible, are there urgent questions or things that people here really wanted to bring up? Otherwise we can run through the different topics.
00:26:16.692 - 00:26:17.610, Speaker A: But yeah.
00:26:21.980 - 00:26:54.800, Speaker G: I guess I had a question. So I assume most people are relying on gas APIs right now just to determine kind of what the best price is. And there's various APIs. I know that the wallets are on this call. I was wondering if you guys were having conversations with these various gas APIs to help provide estimations for tip calculations when it gets to the point where we need to start bidding again against each other or if there are plans for that. Does that make sense? Maybe.
00:26:54.950 - 00:27:03.750, Speaker B: I know Eth gas station is on the call, so they're thinking about how they're going to treat this. I don't know if there are other ones you had in mind.
00:27:04.120 - 00:27:08.520, Speaker G: Okay, cool. Yeah, I guess like the Etherscan API also has.
00:27:08.590 - 00:27:20.750, Speaker B: Etherscan is perfect. Who's here from. Is it Harif from Etherscan? If you want to talk about what you're working on at all or what your approach is.
00:27:22.640 - 00:27:27.244, Speaker A: To be honest, we don't really have a clear approach right now.
00:27:27.282 - 00:27:31.020, Speaker H: So if anyone who potentially will rely.
00:27:31.100 - 00:27:36.172, Speaker A: On our API have any suggestions or any comments.
00:27:36.316 - 00:27:38.370, Speaker B: Happy to hear that.
00:27:40.660 - 00:27:57.880, Speaker A: And I think Barnabay had done a bit of work looking at how oracles should adapt after 1559. So I don't know, maybe, Barnabay, there's like a few things you can share either here or after the call. Yeah, that can be helpful.
00:27:58.300 - 00:28:41.904, Speaker H: Sure. So first, the thing to remember is, well, we don't have data yet, but there is a very strong intuition that these bidding wars, they will be very infrequent. And when they do happen, they will be very short lived because if there's a lot of pressure, basically raises and after some point, it kind of stabilizes the system. So the role of the oracles, to give you the tip, is very different. Like the oracles as they exist right now, they do this very long historical kind of analysis, the last 200 blocks of data here. I don't actually think it's necessary. First, I think it's good enough to look at the 510 latest blocks and kind of look at the median fee.
00:28:41.904 - 00:29:42.120, Speaker H: How people are, let's say, overbidding each other. You don't need, I think, the complexity that currently exists in these, if gas station oracles or any other oracle, it might be useful to have something where you actually see the pending transactions and you can see what people are currently planning to tip. But apart from that, I feel that oracles under 1559, they really don't serve the same purpose as they used to. And my point about oracles was more that these legacy users who maybe use outdated software, if they still rely on oracles, the oracles will start very much converging towards the current value of base fee. And that makes it a pretty bad estimation for users who are still using legacy transactions. But otherwise, I think oracle should either be sunset or very much like refuge from scratch into the 1559 environment.
00:29:43.740 - 00:29:51.100, Speaker B: Just to be clear, we're talking about off chain APIs, not on chain oracles.
00:29:52.480 - 00:30:16.310, Speaker H: Yeah, that's correct, but okay, at this point, it seems very much less sophisticated on chain. By on chain, I really mean like the wallet itself could just keep in mind the last 510 blocks and make the estimation itself. I feel that might be good enough for 1559 and you wouldn't need all the machinery that exists in the current of chain oracles that we have today.
00:30:24.920 - 00:30:38.988, Speaker B: Okay, thanks for that overview, Samuel. I'll try to find a link for you. I think Barnaby has done some research. He has a big body of work on this stuff.
00:30:39.154 - 00:31:04.464, Speaker A: Yeah. I'm looking through Barnabay's notebooks, repo right now, but there's like 20 of them. I remember, Barnabay, you had one kind of walking through the oracles and how the data from even how the data from the 1559 usage could even help set better oracles for the legacy transactions. I just have no idea which notebook that is.
00:31:04.662 - 00:31:40.060, Speaker H: I can share the link, I guess right now, transactions, they have very wide range, even within blocks. And so oracles, they quote like the slow versus medium versus fast. There can be like a very large variance between the three different levels. And I don't think we'll see that in 1559. Because by the nature of a mechanism, which is like this base fee that everyone is paying plus a premium that everybody pretty much pays the same, you should find that youracles start converging to a good enough value. Yeah, I'll share the link in the chat.
00:31:42.580 - 00:32:05.060, Speaker B: And for the people asking about gas now, I've had some difficulty communicating with them or just like getting them on board with this stuff. Not that they're not interested, but I think they're just doing other things. So if anybody has an existing line of communication with them and you can tell them to talk to me or connect us in some way, that would be really helpful.
00:32:08.700 - 00:32:09.450, Speaker F: Cool.
00:32:09.900 - 00:33:11.612, Speaker D: One thing I was wondering is it feels like pretty much everyone is on the same page. That from now on most of the estimation side will be on the wallet side, right. Just looking at the latest block, I feel like that's kind of okay. But at the same time it will be cool if any API like Etherscan or whatever could provide that estimation as an API do, because polling blocks is fine, but at the same time might be a bit intense or depending on network connections, not everyone has perfect wifi when there is more chances to fail. If you have to be polling constantly to know something versus just fetching one API, call to an API and just get the number of what you will pay. Right now, I don't know, just bring it up. Could be useful for the apps too.
00:33:11.612 - 00:33:16.910, Speaker D: So I don't know, something that will be good to have around.
00:33:20.420 - 00:33:24.790, Speaker B: And I imagine it would be good if all these APIs follow the same standard.
00:33:25.800 - 00:33:26.550, Speaker D: Yes.
00:33:28.360 - 00:33:29.110, Speaker A: Okay.
00:33:31.320 - 00:33:49.560, Speaker F: Sorry, I'm circling back to what Barnaba was mentioning about oracles. I understand that all the discussion about gas price oracles for 1559 is around the minor tip, but does it make sense to also have an oracle for base fee to know if the current base fee is extraordinarily high or something.
00:33:49.630 - 00:33:51.950, Speaker C: That we're on a situation?
00:33:53.360 - 00:34:33.050, Speaker A: I think, yeah, that would also be pretty simple to build, right? Because you just need to look at the gas used if more than n blocks are full, basically the amount of completely full blocks tells you how high the gas fee is on like an exponential scale. So it's like if you see one full block, it's probably not worth it. Two is pretty high and five is extremely high. I don't know that there's oracles right there, but again, it would be pretty straightforward to implement given that you just need to look at the gas used.
00:34:37.820 - 00:35:01.570, Speaker H: Yeah, I think if you observe five blocks full previous, you know that the gas fee is very high because, or at least not very high, but very much. There's a very strong demand pressure because otherwise you couldn't have these double full blocks now that you have this slack mechanism. So yeah, five full blocks is definitely like an indication that a lot of people want to transact at the same time.
00:35:03.640 - 00:35:46.800, Speaker A: And so the challenge there is obviously you don't know how sustained that demand will be. Right. If you've seen like five full blocks, it's hard to estimate whether or not you'll see five more full blocks or not. But at the very least you can know that you need to put like a very high tip. You're basically back to a spot where you need to do kind of a bidding war on the tip, which is kind of our current system. So that probably makes sense as a default response or to tell the user, look, submit this transaction and it's likely to be pending for a while. Until this clears.
00:35:49.060 - 00:35:58.900, Speaker B: I think we should probably just try and get through the agenda. I hope it's not a ton of things, but we should probably just go through it quick and then we can get back to open discussion.
00:35:59.560 - 00:36:42.652, Speaker A: Sure. The first off was the JSON RPC changes. So basically I'll share the JSON RPC spec in the chat just to make sure everybody has it. But we've added the changes to JSON RPC there. In short, it adds the base fee to the block header and it adds the max fee and max priority fee to the transaction object if the transaction is type two. So like a 1559 style transaction. And that's basically the API that the different clients will implement.
00:36:42.652 - 00:37:38.180, Speaker A: I think guest has a different version of this and they have an open pr to implement something in accordance with the spec, but that's kind of what all the clients will implement in the next couple of weeks. I don't know if there was any questions or comments on that's recommended minimum priority fee. So we touched on this quickly again there. I think the case where there's not like a sudden spike in demand. What you probably want is to just look at the ballpark average MeV in the last seven days. Follow barnabase graph that's linked in that, and you can use that to kind of set the default tip. So right now, with the values that we're seeing, we would be around like 1.5
00:37:38.180 - 00:38:38.616, Speaker A: way per gas. Again, I mentioned earlier, flashbots is doing some optimization work to include more bundles. So I suspect by the time 1559 goes live, like two guay per gas as a default tip, probably makes sense to get your transaction included in 75% of blocks, unless it's like extremely high mev. So just as a default option to Guay as of today is probably the right amount, I'll just run through it. If people have questions, just please interrupt me. Transaction replacements okay, so this is something, again, guest has an open pr for, but the one challenge with 1559 is you can replace transactions kind of costlessly. So if you just raise the fee cap, it doesn't actually mean that the user will end up paying more because they just pay the base fee and the tip, they don't actually pay their entire fee cap.
00:38:38.616 - 00:39:30.292, Speaker A: So because of that, it could be like an attack vector where people could just stand the transaction pool, raising the fee cap every time, and it's cost less for them to do that. Whereas today, if you raise your gas price on every transaction, obviously you're paying that highest price. So in order to avoid that, I believe what guest and other clients are going to go with is you need to raise both the fee cap and the tip by, I think, 10% for it to be rebroadcasted. So it'll be worth just like looking at the guest release notes for that. But roughly, if you're resubmitting a transaction with a higher fee, you want to increase both values, not just the fee cap. I've got a question in regards to that. Is this going to be part of the ETH protocol or a client? Because people could just jailbreak their clients.
00:39:30.356 - 00:39:32.952, Speaker F: To take that out and still attack them.
00:39:33.006 - 00:40:16.250, Speaker A: Yes, just part of the clients. So like, sure, you can jailbreak your client to submit the transaction, but then nobody, I guess other nodes will not replace the transactions in their transaction pool if they see that it hasn't been raised enough. Right, and they'll probably just mark you as a bad peer or something. So it's like you can obviously hack Geth and propagate whatever you want on the network, but then other nodes will just not update their status based on that, and they'll eventually disconnect you. Does that make sense? Yes, tenfold. Thank you. Of course.
00:40:16.250 - 00:40:26.456, Speaker A: And then we had London rollout yeah.
00:40:26.478 - 00:41:11.060, Speaker B: We touched on this earlier. I had just added it so we don't need to necessarily go over it again. But definitely ideally, if you're making the transition properly, like regular users who aren't fee sensitive or are just sending basic transactions, they don't always care about the advanced gas estimation tools. So ideally you've worked out a transition plan. But in the case of a lot of crypto users, they want to know how these advanced features work. And I'm sure everybody's already thinking about this. You will need to communicate what all these fields are and maybe like recommended practices for how to set things during congestion.
00:41:11.060 - 00:41:18.700, Speaker B: Yeah, I don't need to tell people this, but I'm sure you're already thinking of how to communicate this to your users.
00:41:20.320 - 00:41:53.184, Speaker A: Yeah, and for the actual kind of UI switch. So we talked about it earlier. I think there's different approaches you can take. Easiest and most naive one is just like adding a blocks buffer between the hard fork and when you turn on the UI, so you'll know the hard fork block well in advance. And you do like that, plus 100 or plus 50, and then you just switch it on. If you wanted to actually base it on network condition, there's a couple of metrics you can look at. The first is just the gas used in a block.
00:41:53.184 - 00:42:41.620, Speaker A: So when we start seeing the gas used actually represent like 50% of the gas limit. So right now the gas limit is 50 million, it'll be 30 million after the fork. So you'd want to check, have I seen like a couple of blocks of the gas used being around 50 million rather than 30 million? That's telling you that we've basically processed all of the transactions for a certain base fee. And the base fee is now like a good gauge of demand on the network. If you want to just look at the base fee. One way to do that is maybe just waiting to see one or two base fees where the parent space fee is pretty close to the current base fee. So whether that's like 5% roughly, it's telling you that the blocks are pretty stable.
00:42:41.620 - 00:43:23.308, Speaker A: If you do want to just go with a number of blocks, I think I would just look at what the gas price is. Basically when you're cutting the release for whenever your product is going to go live, and then you can calculate how long does it take to get from one guay to there. If the blocks are full, it increases by twelve and a half percent every block. So when I did the math, it was, I assumed like a 250 guay, which is obviously higher than the gas price today. And I gave 50 blocks. But you can just look at the blocks whenever your release is close. And if you want to be extra sure, you can use a combination of those rules.
00:43:23.308 - 00:44:03.280, Speaker A: You can set yourself like maybe a fairly short block limit, like saying like 50 blocks is the fork and you want the gas used to be between those two ranges before you flip on the 1559 UI. And I guess what's nice is all those parameters are just in the block header, so you don't need to actually look through the full block to determine this. So it should be fairly straightforward to estimate if you have access to the block header. And if you don't, then I think just like a ballpark number of blocks is probably the simplest way to go. I think that's all we had on the proper agenda.
00:44:07.300 - 00:44:10.130, Speaker B: While we're here. You might as well just say the last one.
00:44:10.820 - 00:44:59.184, Speaker A: Sorry. Yeah, so ERC editors. Okay, so this is not necessarily related to 1569, but kind of a quick pitch. We are going to be splitting the EIP repo between eips and erCs, because there's just like such a different skill set from folks working on core eips and folks working on the interface level. If you are interested in helping to be like a potential ERC editor, please reach out to Trent or me after the call and we can chat about that. But basically it would help maintain the repo, make sure that there's like a good process for people to add new standards and whatnot. Light client is on the call, he's like a EIP editor, so he can maybe also give some context on what it's like.
00:44:59.184 - 00:45:11.990, Speaker A: But yeah, it's something we're looking for. And I think where the application layer can really help, because you folks have way more context on ercs than most of the core devs who are working at the protocol level.
00:45:14.280 - 00:45:19.770, Speaker B: Cool. The other thing which is now slipping my mind.
00:45:23.340 - 00:45:43.470, Speaker A: So there was this big conversation on the agenda about detecting that a network supports 1559. Realistically, I think the only way to do that for now and likely for the next few months will be looking at the block header, seeing if there's a base fee in there, and if so, that tells you the network is supporting 1559.
00:45:43.860 - 00:46:20.750, Speaker B: Okay, I remembered it sounds like from discussion in the chat and just generally is that we may need to have another call or just coordinate a little bit better with API providers. I know Etherscan is here and eth gas station, but if that is a need and people want us to organize another call, we can do that. I know this was more focused on wallets, but obviously that's very tightly linked to how you're serving data to people. So maybe just after this I'll reach out to those teams and see if we need to organize something.
00:46:22.240 - 00:46:23.630, Speaker G: Yeah, that'd be great.
00:46:26.960 - 00:46:32.160, Speaker B: Yeah. And then we can just get back to open discussion. If people have any questions or comments.
00:46:37.450 - 00:46:42.920, Speaker A: Just want to be.
00:46:46.510 - 00:47:14.710, Speaker B: It's pretty hard to hear you, Brendan. Maybe type it in the chat or if anybody heard that, please translate. Anybody else? Any type of question? Go ahead.
00:47:15.320 - 00:47:38.872, Speaker F: Yeah, two things, basically, the one thing was checking the block feels a bit brittle. To find out if ERP 1559 is supported, the question is, is the train for London already left the station? Or could there be like a simple EIP in there? Basically. So it's already done.
00:47:38.926 - 00:47:42.956, Speaker A: There is no core EIP that will be added to London and it could.
00:47:42.978 - 00:47:43.964, Speaker F: Be quite a simple one.
00:47:44.002 - 00:47:44.252, Speaker A: Right.
00:47:44.306 - 00:47:53.676, Speaker F: So just return basically if EIP 15 EIP and then install start and an optional end block number.
00:47:53.858 - 00:48:06.848, Speaker A: So the challenge is that that actually doesn't help for all the networks that don't support it, right? Because it's like, first of all, I don't think we can add any consensus change to London right now. But even if we could, it wouldn't.
00:48:06.864 - 00:48:11.430, Speaker F: Be consensus change, right? It would just be an RPC command, an extra.
00:48:12.440 - 00:48:13.590, Speaker A: So then the.
00:48:16.280 - 00:48:26.970, Speaker F: Extra RPC command, basically that returns an EIP and an optional start and an optional end number.
00:48:30.160 - 00:48:37.070, Speaker A: So you call like, does this chain support 1559? And it tells you yes or no.
00:48:37.840 - 00:48:45.330, Speaker F: It would make it more general, basically. Not just 1559, but basically we will have the same problems in the future. Basically.
00:48:47.380 - 00:49:26.220, Speaker A: The challenge with EIP based. So the reason this is a hard problem is that clients, at least not all clients, have the concept of like an EIP being activated, especially with Mainnet. And having that concept has led to bugs before. If you can know, I want EIP X, Y and Z. The problem is there's often a lot of interplay between them. And so what clients will do is they won't say I support an EIP, they'll say I support a certain hard fork, right? They'll say I support like London or I support Berlin or whatever. And the challenge with that then is like say ethereum classic adds 1559.
00:49:26.220 - 00:49:47.300, Speaker A: Their hard fork is not going to be called London. And even if they, you know, their hard fork is not going to be called London, and it might not be the exact same hard fork as 1559. So for example, in London, we're also changing a bunch of gas costs refund.
00:49:50.040 - 00:49:55.536, Speaker F: From the forks, just really from the eips, which eips are supported from which block.
00:49:55.648 - 00:50:32.370, Speaker A: So it would say the clients don't know. So the clients themselves don't keep track of which Eips is activated, they keep tracks of which hard forks are activated. Right. And you could probably create a mapping from that, but I doubt that happens for London. But right now if you wanted to easily expose some data, you could say does get have London enabled? But then on the wallet side you need to have some mapping that tells you, well, London is actually 1559 and Berlin is actually 29, 30.
00:50:32.820 - 00:50:41.056, Speaker F: I don't really think that would help. Basically the defaults because there are so many chains out there and they don't go around these folks in the combination.
00:50:41.168 - 00:50:51.320, Speaker A: Yeah, I think, yeah, it could be done, but what I'm saying is it's not going to be an easy thing for client to implement and so I don't think it's possible for London.
00:50:52.460 - 00:51:27.030, Speaker F: All right. And the other thing was, when implementing 1559, access list is currently on the end and it would make it nicer if access list is basically before the gas limit, because then you could share a little bit more code like in the RP and currently like access list is basically on the end and that makes it that you need basically it's more difference.
00:51:30.660 - 00:51:31.888, Speaker A: So the code would be a little.
00:51:31.894 - 00:51:39.620, Speaker F: Bit nicer if access list is before gas limit in the list. Is that too late to change it now? I just noticed.
00:51:41.480 - 00:51:46.710, Speaker A: Does that impact how the transaction is? If it impacts how the transaction is encoded, then the answer is yes.
00:51:48.200 - 00:51:51.440, Speaker F: Yeah, it impacts how the transaction is encoded.
00:51:51.520 - 00:51:55.400, Speaker A: Yeah. I don't think we can do any consensus changes now for London.
00:51:57.580 - 00:51:59.476, Speaker F: All right, thank you for the info.
00:51:59.588 - 00:52:10.190, Speaker A: Yeah, and there's a question in the chat about eat gas price. I'm actually not quite sure how it's been implemented. I don't know. Light client, if you have a mic.
00:52:11.440 - 00:52:45.290, Speaker D: The only way that I implement it was I look at the last base fee for the block and I set just a pretty naive fee cap for the transaction as two times the last base fee. And that can be configurable with a flag to your guest client. And then for the tip, I'm just looking at what are the tips in the last block and I try and calculate what sort of the average, the median tip is in that set and then I return that. So you'll have a very high chance of being included in the next block or two.
00:52:50.870 - 00:53:04.550, Speaker I: Sorry, but what are we doing? So are you modifying the existing ETH gas price endpoint or is that going to maintain on the legacy gas GPO calculator?
00:53:06.410 - 00:53:32.080, Speaker D: Right now I have the endpoint returning two different things depending on what the fork configuration is on the client. So if it's not 1559, it's going to continue to return just the gas price. If it is 1559, it will return the estimated tip and fee cap.
00:53:33.250 - 00:53:38.020, Speaker I: Okay, so for get then, EtH gas price specifically is a breaking change.
00:53:45.980 - 00:53:48.904, Speaker D: Yeah, if you're relying on gas price, it would be breaking.
00:53:48.952 - 00:53:49.550, Speaker A: Yeah.
00:53:50.880 - 00:54:04.210, Speaker F: So any wallet that currently uses that RPC call and still sends legacy transactions will start sending with the wrong gas price because that endpoint will return the data for 1559.
00:54:04.980 - 00:54:06.530, Speaker I: Yeah, that's why I'm asking.
00:54:07.140 - 00:54:07.504, Speaker A: Yeah.
00:54:07.542 - 00:54:16.630, Speaker D: So I mean, should we have two endpoints? I don't think we've done that with any other JSON RPC endpoints to have a 1559 specific.
00:54:17.880 - 00:54:37.870, Speaker I: Personally, if we're going to maintain legacy transactions, we should probably maintain the legacy endpoint for them. We've had a lot of issues at chainsafe because of GPO like miscalculations and stuff due to the sampling, especially due to MeV, and I think we should probably just not fuck with that.
00:54:38.320 - 00:55:05.890, Speaker D: Yeah. If you want to keep the same endpoint, then you can apply a parameter that at least you requested the new way and by default stay the way it is if it makes things easier. I'm open to whatever consumers of JSON RPC would like to do. I don't have a strong opinion.
00:55:08.870 - 00:55:19.222, Speaker I: Personally. I just like it to be in before because right now, not London Berlin didn't have the access list or endpoint ready. So it'd be nice to have this ready.
00:55:19.356 - 00:55:20.760, Speaker A: Well, before we go.
00:55:22.170 - 00:55:37.020, Speaker D: Okay. Are people okay with adding a new optional parameter that sort of signals I'm looking for the new 1559 information and if not just default to returning just the gas price.
00:55:39.710 - 00:55:43.766, Speaker I: It breaks less code that way. I'm okay with that. Personally.
00:55:43.958 - 00:55:52.026, Speaker A: Apologies for being naive. What correlation does the access list have on the UX and gases?
00:55:52.138 - 00:56:07.960, Speaker I: Sorry, I was just making a reference to the fact that we forgot about our pc and it's being dealt with after the fact. And I've got users complaining that they've got broken contracts and they're trying to figure out how the hell to pull it off. So I'm trying to avoid that early.
00:56:09.450 - 00:56:33.950, Speaker A: No worries. Thanks. So basically, just to summarize, we add an optional parameter in ETH gas price which specifies that you actually want the 1559 style transaction the 1559 style estimation. And if you don't have that parameter, you just return the current behavior.
00:56:37.010 - 00:56:38.286, Speaker D: Sounds good to me.
00:56:38.388 - 00:56:44.270, Speaker E: Yeah, it's a little bit messy to start kind of making breaking changes through parameters.
00:56:47.090 - 00:57:08.150, Speaker I: The alternative, but it's backwards compatible, which is nice and also gives flexibility to you guys because you can do some sort of flag configuration beforehand to understand which one you want to actually trigger. If you want to trigger legacy or if you want to trigger the current one, the code changes. Like one if statement and maybe a flag.
00:57:08.650 - 00:57:17.740, Speaker E: Yeah, so I just meant in terms of having a parameter versus another function name like we're starting to basically version an API by putting parameters on things.
00:57:20.830 - 00:57:21.434, Speaker B: Yeah.
00:57:21.552 - 00:57:35.054, Speaker I: Also in favor, wouldn't be too bad of an idea to actually implement it on its own. I'm easy, but I know there's a discussion kind of around this with Tim on an issue. Oh, wait, no, that was something totally different.
00:57:35.172 - 00:57:35.840, Speaker A: Yeah.
00:57:37.010 - 00:58:00.566, Speaker B: So we only have 1 minute left, and I just want to hit a few things really quick before we wrap. First, thank you everybody for coming out, whether it's early or late for you. Really appreciate it. We've got a ton of people, ton of different wallet teams around the world. So again, thanks for coming and trying to resolve this stuff synchronously. Then a few other things. So this wallet cheat sheet, we've mentioned.
00:58:00.588 - 00:58:01.302, Speaker A: It a bunch of times.
00:58:01.356 - 00:58:09.914, Speaker B: This is where we're trying to gather resources aimed at people like you who are working on interface layer. So please make sure to bookmark this.
00:58:09.952 - 00:58:11.318, Speaker A: And check it pretty frequently because we're.
00:58:11.334 - 00:58:43.282, Speaker B: Going to be updating it with resources as people surface them or answering questions there. The R D discord is where a lot of this discussion is being hashed out. So if you haven't joined there already, please join. I'll grab a link and put it there, unless Tim has already done it. And we'd really appreciate if people could engage there. There are 215, 59 channels and that's where a lot of this is happening. And then Tim, really quick, do you want to give like maybe people already know this, but like the timelines, tentative timelines for when this is?
00:58:43.336 - 00:59:03.254, Speaker A: Yeah, sure. So we're going to actually confirm this on awkward FPS Friday, but assume this is the most aggressive timeline. So probably what you should plan for. So we suspect the first testnet will fork on June 9. So that'll be Robston. Then we would fork Gordy a week after that. So June 16.
00:59:03.254 - 00:59:56.814, Speaker A: And then we would fork Rinkabee a week after that, June 23. Assume all that goes well and we don't find a big consensus issue. We're tentatively planning 1559 for July 14 on main net, but we want to see the first testnet go well before we actually initiate, before we actually set a block number for main net. And yeah, it's not 100% sure that clients will be ready for the June 9 date, so it might slip like a week or two. This is what we're going to be discussing Friday. But if you want to be ready for the most aggressive timeline, then being ready for June 9 should be the goal. And I think most client teams have mentioned to me they should have a release with 1559 ready and whatnot by next week.
00:59:56.814 - 01:00:09.120, Speaker A: So like a week before the test net fork, and then we'll have the main net releases probably closer to like a month before the main net fork. Yeah.
01:00:11.250 - 01:00:21.910, Speaker B: And that's it. Thanks again for everybody coming. We did record this, so we'll upload it somewhere and then send out an email with sort of outcomes and link for next steps.
01:00:23.450 - 01:00:24.520, Speaker A: Thanks, everybody.
01:00:25.850 - 01:00:27.380, Speaker B: Thank you. Thanks.
