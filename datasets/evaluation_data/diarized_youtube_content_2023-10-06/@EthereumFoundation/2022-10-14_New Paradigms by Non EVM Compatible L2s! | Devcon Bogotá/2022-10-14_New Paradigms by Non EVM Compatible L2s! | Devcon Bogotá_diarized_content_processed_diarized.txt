00:00:13.290 - 00:00:42.258, Speaker A: But I do. I see these L2s not just as a scalability solution, but rather a way to extend what Ethereum can be, could be, or perhaps should be. Some very delighted that I have with me these three amazing people who are running like what, in my bias opinion, is perhaps the most unique and coolest L2s in the space. So I would love for three of you to just introduce yourselves, talk about what you're building very briefly before we get into the cool things of your systems.
00:00:42.434 - 00:01:00.350, Speaker B: Yeah. Hey, everyone. My name is Joe. I'm one of the co founders of Aztec, and I lead product Aztec's, a privacy layer for Ethereum. And we currently have Aztec Connect Live, which is a VPN for all of DeFi. And we're working on a fully private VM, which has private smart contracts.
00:01:01.250 - 00:01:22.454, Speaker C: Hi. My name is Louis. I'm ecosystem at. I've been at Starkware for over three years and a half. So Starkware is building scalability solutions using zero knowledge proofs. More specifically, Starks, our first product you may have used is called Starkx. It is the one powering sorre immutable dYdX diversify and plenty of others that are going to announce soon.
00:01:22.454 - 00:01:34.890, Speaker C: And in the last year and a half almost, now we starting to work on StarkNet, which is a general purpose L2 on top of Ethereum, enabling scaling using a complete language called Cairo.
00:01:35.950 - 00:02:03.940, Speaker D: Hello. So my name is Nick. I'm the CEO of Fuel Labs. And to describe Fuel in a simple way, you can think of it like a L2. We launched the first optimistic roll up to Ethereum that was a fully trustless, optimistic roll up. No multisig anything. And to describe what we do, we have a new kind of transaction processing system.
00:02:03.940 - 00:02:37.626, Speaker D: And this can take the form of something like a validium it can take the form of something like a L2. We use UTXOs for this. We use a different paradigm from typical ethereum systems. We have our own language called Sway, which is used to target this system. We have our own tooling. We have basically a revised version of everything Ethereum offers. And, yeah, we're here to help Ethereum scale and basically incorporate all of the lessons that we've learned from production.
00:02:37.626 - 00:02:49.966, Speaker D: Ethereum over the years. Provide Ethereum a new and different kind of pathway to scale that isn't the EVM tool chains and EVM processing systems.
00:02:50.158 - 00:03:13.862, Speaker A: Very cool. All right, so we have a good mix of people here. We have, like, two companies building zero knowledge. We have two companies using UTXOs. But all of you have such unique branding and products. So let's go for a very first principle approach. Before I ask why you chose non EVM, can I ask why should Blockchains just not use normal VMs? Like, I don't know, x 86 or Ram.
00:03:13.862 - 00:03:16.460, Speaker A: Why is it so necessary to build something new?
00:03:18.190 - 00:03:53.762, Speaker D: I think I'll take a stab at that one. So X 86 and these other instruction sets are really designed for different computing architectures. So when you're designing X 86 or you're designing Arm, you're designing them to target a hardware system. And so that's going to come with its own criteria and its own restrictions and physics. Whereas with a blockchain virtual machine you're designing for a different kind of physics. So you're pricing every operation, you're designing for adversarial scenarios. And because of this, you end up having odd design constraints that really put you in a corner.
00:03:53.762 - 00:04:39.240, Speaker D: And you have to really understand those physics to design a good virtual machine that will both be great for processing but also be great for security. So it really is kind of an art designing some of these systems. And we've learned a lot since the kind of inception of bitcoin in 2008 all the way through to now. And basically those instruction sets are for different purposes, whereas virtual machines for blockchains are categorically a different thing. Now, you can do it, but you do lose some of the nice things. Whereas if you had designed it from scratch, you basically can kind of design a better world.
00:04:42.490 - 00:05:06.830, Speaker B: I was just going to add I think compatibility is one of the main kind of reasons why we have to limit the feature set on blockchain kind of VMs. Like you have multiple clients trying to all get to the same kind of state update and that doesn't exist in the world of kind of like intel chips. So it's a much harder problem. And that usually means we get a limited feature set like we have in the EVM.
00:05:09.620 - 00:05:14.140, Speaker C: No, I don't really have much to say. The technical aspect was very defined.
00:05:14.300 - 00:05:31.290, Speaker A: Blockchain VMs is an art is really a good way to put it. So what are your expectations from A blockchain EVM then, from A blockchain VM? What are the things you've learned from the EVM? What are the things that you wanted couldn't get built? Your own things?
00:05:32.300 - 00:05:54.530, Speaker B: I think just a starting point is probably the more complex the VM is, I think the harder it is to scale. We're seeing this with kind of people trying to prove computation of EVM and you need like giant data centers to actually construct that proof. So a simple kind of maybe tailored feature set at the VM is probably going to result in more scalability is maybe the first point.
00:05:55.220 - 00:06:00.172, Speaker A: What are your expectations from A blockchain VM? And this goes to things you can get from EVM.
00:06:00.236 - 00:07:13.508, Speaker C: Yeah, so the thing is that what we were expecting from a VM, a blockchain VM before now changed and changed significantly between the origin of bitcoin and ethereum and what we know now. And I guess one of the main difference is that we now realize more than ever that we need scalability. And we now discover that there are tech that gives that scalability while preserving the core principle of blockchains. And the core principle of blockchain is trustlessness and verifiability. And before, and I'm going to toot my own horn, obviously and talk about ZK here before the arrival of ZK as a practical technique to bring faster verification. We just went to the shortest, to the simplest, which was the EVM. And now that we are looking at this new tech and this new knowledge that we're learning what Fury is doing or what Solana is doing and what others chain are doing we are bringing the new, more top notch computer science to it which are providing more feature sets that we are looking for to develop good product, good DApps on top of crypto, on top of blockchains.
00:07:13.604 - 00:07:17.530, Speaker A: Very well said. Yeah, I guess over time our expectations have changed quite a lot.
00:07:18.220 - 00:08:45.910, Speaker D: Yeah, I would say so. Coming from sort of like 2015, 2016 blockchain to now. I've been using Ethereum almost since it started so for me it's been like a long road and I would say that the expectations have completely changed I think. But just as well the community didn't fully understand all the design constraints when they were putting it together and there was decisions made over time particularly with the kinds of architectures that Ethereum chose that ended up being really costly for just compute and for all the different kinds of design potential that you want. And as well, backwards compatibility was something that was not really kind of in part of the picture and I think it's ended up locking us into a design that wasn't really educated on what could potentially happen if we had this design and so we're just sort of stuck with it. So I think the expectations are that, again, you design a safe VM, you design a virtual machine that can provide all the behaviors we like for Ethereum, but as well open up a lot of new kinds of designs that we currently don't see, that we'd like to see. And then on top of that, just designing for a lot of different scenarios where if you could have done it a different way, you would have factored in all the research that we have.
00:08:45.910 - 00:08:52.010, Speaker D: You can create a new reality for blockchain that I think is much stronger than what we have now.
00:08:53.420 - 00:09:23.456, Speaker B: I was going to say one example is probably like the curve that we all sign over. So we've all got a seed phrase and it hasn't really changed in a while. People have tried doing smart contract wallets but if you control the VM everyone in the room's got an iPhone or an Android that's got a TPM in it and you can actually build that into the VM and help get adoption. So yeah, recreating all of the EVM I think would be a mistake and just trying to kind of focus on adoption in the feature set would be.
00:09:23.478 - 00:09:55.340, Speaker C: A good know specifically about the change that we are expecting now from the VM. There are a couple of examples which are just so significant, so clear that the gold target moved. Aragon when they launched, they were like this massive OS for Dow was very well filled out. The point that it was way too expensive. I mean, back then, no one know when they know. Using a whole block for yourself was like, who cares? No one's. Now.
00:09:55.340 - 00:10:41.380, Speaker C: You know, you try to optimize. Like, we owe all those people on Twitter doing those gas golfing to a point, which is just and so one thing that we're observing specifically in the context of StarkNet and the new language that we have, is that when you provide new feature set and new capacity to the chain, you get a combination of creativity, like new things that don't exist before. And so Joe here was talking about the curve we're using or the fact that we have EOAS. EOAS was a mistake in retrospect. And the problem that EOAS is that they put us in a local equilibrium. There is no way smart contract wallet will pick up on Ethereum today because it's always cheaper to use EOAS. It's always cheaper to use my private keys.
00:10:41.380 - 00:11:16.564, Speaker C: And so there is no incentive for the DApps to actually build their application to be very well compatible with Red Connect or just to work well with smart contract wallets. And even some just reband them because they're smart contract. And so in the connectstarknet, because we don't have EOS, we only have smart contract, therefore, only smart contract wallet. We have people using the native curve of the network called the Stark curve. And now we are also people trying to build using the trust in enclave of your iPhone. So within the same wallet, you can actually use your iPhone. You can use any curve that you want.
00:11:16.564 - 00:11:28.216, Speaker C: You can use your browsers that has also a curve in it. And so once you unlock the limitation that we know, you start having new things that get created basically right away.
00:11:28.398 - 00:11:40.750, Speaker A: Yeah, I agree with you. I think asking engineers to gas golf instead of thinking about innovative things to do is a big waste of time and probably prevents a lot of innovation that could have happened in the space by far.
00:11:41.280 - 00:12:11.492, Speaker D: Yeah, just to speak to that too. So I've done my share of gas golfing. I want to say I'm like, you can check my GitHub. It's sort of like an art for me. But it was more of a therapeutic thing to gas golf than it was like, this is a good use of my time. Mind you, that was before I worked with Fuel so started Fuel so essentially, yeah, the thing is, you can gas golf all you want, but it's not enough. And it's never enough, because when enough people use the system, it just gets congested.
00:12:11.492 - 00:13:19.788, Speaker D: And then you're back to where you started and you keep asking the same questions like, well, how could we do this? How could OpenSea run in this way. And then the thing is, you lock yourself in so much to just trying to support this thing, which, by the way, I mean, there's some controversy around it, but the EVM was sort of designed a little quickly and was put together a little fast. And at DevCon One, there was some conversations about that particular thing. If you want some spice but anyway, the reality is I've been sitting here looking at this machine for years. Like, years and years and years, and it's held a lot of different kinds of designs back because it can't move forward. Like it really is very difficult to move forward. So the fact that these teams are sort of bold enough to still be part of Ethereum, but try to do it differently just for the sake of getting to global adoption and getting somewhere else, I think it's a sign of how good the Ethereum community is, because we're not afraid to challenge what people have made a culture of the system.
00:13:19.788 - 00:13:33.360, Speaker D: And I think that's a very beautiful thing. But yeah, it's not all just Vitalik and Gavin's design that gets to run the show. I mean, we can try to do other things and with L2s we can now. So it's great.
00:13:33.510 - 00:13:40.420, Speaker A: Exactly like L2s should be seen as a way to extend everything that we can't do in Ethereum. Not just a cheap transaction machine.
00:13:45.400 - 00:14:25.148, Speaker C: Everyone comes to say about it's always about cheap. No, it's not about cheap. Really not about cheap. I can give you a few examples of things that are being built that you just dream of anywhere else in Ethereum. And so, for instance, smart contract is most specifically like an important one because smart contract wallet is no. Okay, crypto if will not get global adoption, if we have to keep a key and if the EOA's mechanism like having a private key remains, basically we are going to go back to the financial system where we have five global custodial and that's not what we want. And so on the smart contract part we are now things that are getting unlocked.
00:14:25.148 - 00:14:59.784, Speaker C: For instance, Argent around here actually it's working extensively on StarkNet and they are working on a plugin system. Meaning you can actually install an app in your wallet. Meaning that for instance, every time you spend 10% goes to saving or every time you want to play a game you actually don't have to sign every transaction. You can open a session key that's going to last 6 hours and that is only authorized to do a set of operation. And so really the cheap transaction is like an afterthought, it's just a requirement. And honestly, to be honest, I don't think it's going to last long. Like l two themselves will not be cheap.
00:14:59.784 - 00:15:23.284, Speaker C: I have a theory which is you can't have a cheap, successful, economical layer because there is no reason in the universe that my ticketing app that is trading where I can change my NFT of my ticket, be impacted by the fact that the price of ETH dropped by 20% and all of a sudden my app doesn't work anymore. And so that just doesn't happen. That just won't work.
00:15:23.482 - 00:15:40.170, Speaker A: Insanely refreshing to hear. Maybe I want to go into a pivot over here. And what enables all of your architectures to actually be able to do these things? I think everyone here would love to know more about these architectural decisions they've made that enable these new paradigms here.
00:15:40.700 - 00:16:06.368, Speaker D: Okay, so we all get what you're saying is we can all shill a little bit. Just like a little bit for each project. Okay. All right, I'll try to permission to okay, I'm going to try to keep my shilling in a kind of a dome. So some highlights. Okay, so first of all, the Fuel VM is highly inspired by the EVM. So all the lessons that we've learned with the EVM over the years, it tries to incorporate, it doesn't leave that behind.
00:16:06.368 - 00:16:41.704, Speaker D: It doesn't try to say we're arrogant enough to rebuild everything. So that's the first thing. We've basically taken all the great EIPS all the great research that the Ethereum community has done and other blockchain communities have done and put it into a virtual machine. Now, we've made some very interesting decisions and they all impact the kinds of things you can build, the kinds of experiences you can create and as well, the scale that you can achieve with this particular system. So some highlights are it's UTXO based. That's the first thing. Secondly, you get smart contracts just like Ethereum.
00:16:41.704 - 00:17:07.332, Speaker D: There's no loss in any kind of behavior from a developer. Secondly, scripts is another one. So in Ethereum you have to go through a smart contract to make multiple calls. It's ridiculous. It never should have been that way. So we have scripts and then as well, we have account abstraction via what we call predicates. And so this allows you to send to the hash of a script and essentially if the script returns true, then you can spend the output.
00:17:07.332 - 00:17:29.224, Speaker D: And this gives you all kinds of things you can do. For example, we can support signing with a solana key over a UTXO that is USDC from Ethereum. That's pretty nuts. And that can happen. It's cool. And then that can happen in an output. You can also do things like Basic.
00:17:29.224 - 00:18:06.036, Speaker D: Well, some other cool stuff is we've redesigned all the processing within the virtual machine as well such that when you make a smart contract call with Fuel instead of having to serialize and the engineers will know this I'm sorry if you're not an engineer, so just bear with me. But when you make a call, you don't need to reserialize the data between smart contracts. It's all in one chunk of memory. But the memory is segmented per call frame. And what that does is it allows you to go, I'll write 5000 things to memory here. I'll call this contract over here. And that other contract can just reference any one of those items.
00:18:06.036 - 00:18:49.412, Speaker D: So you can imagine trading engines, things like this, would love that. Because you can write so much to memory, you can really abuse memory and you can abuse compute, which we have a lot more of and not storage. So we give you far more options to use that are not storage oriented. So these are all part of the processing model. But lastly, for the last bit of shill, this also, because it's a UTXO model, you get all the nice things of Ethereum, but you get full, complete parallel processing. So you can basically have all the benefits of some of these newer ecosystems that have parallel processing. But because the fuel VM is designed to be arbitrated, it can also be a roll up or L2 on Ethereum directly.
00:18:49.412 - 00:19:01.290, Speaker D: And on top of that, it has trust minimized light clients. So you're not leaving behind the nice security properties what we have with ethereum. So that's my shill on the VM. Yeah, you go. Beautiful.
00:19:03.100 - 00:19:30.688, Speaker B: Okay. Ours is also UTXO model. Big fan of UTXOs. They're very difficult, but they do enable kind of some important features which the account model lacks. And in our case, that's privacy. So it's very hard to do privacy in account based model because every time you update an account, you leak which account you're updating. So in UTXO model, we can create and destroy UTXOs and they all look random.
00:19:30.688 - 00:20:11.276, Speaker B: So it's one of the key kind of design choices we had to make to get privacy and then kind of more into the VM. We also have account abstraction built into Aztec. So we have this concept of a viewing key and a spending key. When things are encrypted, there's a different set of people who may need to see the data to those who can spend it. So I think being able to control that has been super beneficial for our architecture. Today, the VM only supports kind of circuits or programs that we've written. But we're expanding it with a concept called Aztec Three, which Mike from Aztec is actually talking about tomorrow on one of the other stages.
00:20:11.276 - 00:20:49.230, Speaker B: And the main kind of improvements there are that every program is actually a client side generated CK snark. So we've built a language called Noir which enables developers to write these programs. And then users will actually, instead of sending this to be executed on kind of a node, they'll actually compute the snark in the browser in Noir, prove the correct running of the program, and then send that kind of packaged up kernel circuit to a roll up provider. And that means you actually get really cool features like code, privacy, confidentiality and anonymity. So we're excited about that.
00:20:50.320 - 00:22:04.710, Speaker C: So in the context of StarkNet and Starkware we also created our own VM and focusing only on scaling kind of similarly to Fuel I just want to sort of make a differentiation in term of scaling between the Fuel approach which is basically Parisation enabling the execution layer to do more and the ZK approach which is basically requiring less from the verifier. And those are orthogonal, completely orthogonal. So you can get both potentially. But the reason why I'm making the differentiation is because in some way the way darknet scale is by saying you know what, validators can have stronger machines than the rest of the world today when you look at Ethereum or any blockchain like Bitcoin, the scaling is limited by the weakest machine in the network. And so when we compare the TPS or whatever, I mean the throughput of Bitcoin versus the throughput of Ethereum versus the throughput of Solana we are comparing Apple, Oranges and Ferrari. And the reason is very simple. Bitcoin targets a Raspberry pi which is roughly the cheapest computer you can find.
00:22:04.710 - 00:22:46.404, Speaker C: Ethereum says okay, we are targeting this is a bit too constrained for the real world application. Maybe we can have like a $2,500 machine. So for instance, I synced Eve completely on my 2021 M one Apple book, my book like a month ago, two months ago. And Solana is like you know what, $2,000 machine is very constrained because companies, they pay that for a flight for their employees to Bogota. And so maybe we can have a 2500 machine per month. That's a practical cost for servers, for an entity, for corporate. And so we are really not comparing the same thing.
00:22:46.404 - 00:23:58.868, Speaker C: And so when you're looking at the limitation of scaling for all those blockchain is the weakest point. What is the minimum machine the network needs to have? And so when you use a regular traditional execution layer without using cryptography to scale it, you basically don't really change this symmetry. The guy who makes money is still requiring the same machine that the guy who's verifying it in his garage. And regardless of the fact that these miners, this validator can spend millions of dollars at stake or millions of dollars in machine, it will roughly run on the same laptop that you have at home. And so ZK breaks that parallel. All of a sudden it doesn't matter what kind of machine the validators have, I can verify it on my phone in a millisecond and so they can have a data setter for what I care, I can still verify it on my phone. So Starkware created its own VM called Cairo because the problem that we have with existing VM is that they are optimizing for different programming paradigms that ZKPs.
00:23:58.868 - 00:24:59.340, Speaker C: So the best way to explain it is that you talked before about X 86. So your regular VM is optimizing for basically your CPUs and your transistors. And transistors know one thing very well, which is boolean logic and bits and bytes. The thing is what you're underneath the KP environment you are working in an arithmetic environment where the base element you're working with is what we call a field element which is basically a big uwind and the cheap operation that you get is multiplication, addition, division, subtraction and boolean. Logic is expensive. So you move the model on its head and there is other differentiation that I can expand on like nondeterminism or something like this. But roughly speaking, to make a chain that is Verifiable, cryptographically verifiable and using ZKPs or valet proof depending on what you call it, you prefer to have a VM that is optimized for that computing paradigm.
00:24:59.340 - 00:25:53.490, Speaker C: And so this specific dimensionality, as I said, is orthogonal to the execution layer. And so StarkNet right now is basically roughly taking the same structure execution model than Ethereum with a few distinctions like we try to do optimistic parallelization. We are looking into different data structure while remaining the data structure of ETH also expanding and what's the new state of the art is coming like things like SWIO, Aptos, we are looking into what they're doing because it's cool, it's useful and so what matters is that is a separation. So StarkNet is focusing on the separation between the validators and the rest of the word and then afterwards we are looking into optimizing the execution layer to provide the throughput that they would expect.
00:25:54.500 - 00:27:07.920, Speaker D: I'll just say one last word because node requirements came up. So I'll just make one comment which know we're in Latin America and this is a new place for Ethereum to think, you know, having been through a bunch of them, there was a bunch in Europe, et cetera. I think with Fuel and the way that we interpret node requirements, we want people here, not like in Switzerland, like people here, to be able to afford to run a node in this global peer to peer network. Not only for their own research, for building, for interoperating with the network, but we want them to be able to afford it just for the global security of the system itself. And so I think with Fuel we've been designing the best system we can possibly think of. But we're also making sure that when we talk about node requirements which ends up being really important because it really dictates how much throughput how much processing you can put through the system, I think this is like a very key factor. So for us, we would like someone in Colombia to be able to actually verify this and not have to pay an enormous sum like someone's whole year's wage or whatever it might be to be able to just run a node.
00:27:08.080 - 00:27:17.448, Speaker A: Exactly. Yeah, I mean to that point, the genius of having roll ups like the ones you all three are building is not everyone has to run their own node. So that really adds up.
00:27:17.534 - 00:27:55.108, Speaker B: Yeah, I think it gets worse for privacy because there's like a censorship component. So if you kind of restrict your kind of nodes to AWS, Google, Cloud and Microsoft quite quickly. You don't have a decentralized privacy network, you have Fang. So yeah, our node requirements we do the same as Fuel and we have to kind of think about how do we get it working on a laptop, how do we get roll ups actually being built in a peer to peer network and actually some of the Alt l ones are doing a really good job here. Like Mina's got a model which is kind of like a Federated prover. So I think there's a lot to learn from some of the other chains as well.
00:27:55.274 - 00:28:18.844, Speaker C: And by the way you said that not everyone has to run node. I 100% disagree with that. We should be able to run node on your phone. You should, you should be yeah, that's the target, that's what we should achieve. Maybe it's not practical and the fact that it's not practical is irrelevant. The fact that it's a goal is what matters. That's what drive us, that's what bring us towards one point.
00:28:18.844 - 00:28:35.120, Speaker C: And so I really want ideally in the future infuria would be make redundant to some extent of course not but to some extent at least on your phone or you should be able to run the network locally.
00:28:35.640 - 00:29:01.640, Speaker A: That makes sense. So we spoke about all of the UTXOs and stuff and I know you mentioned about how fuels paralyzation and the stuff you're doing with verification is orthogonal. We all over here obviously are Cardano maxis and we all obviously were quite sad when Cardano couldn't work out with UTXOs. How are you guys doing? It possible what Cardano couldn't and I guess for Starquare for Louis when UTXOs.
00:29:02.860 - 00:29:48.248, Speaker B: Yeah, I can go mean I think it's the elephant in the room. So currently an Aztec client has to sync every single UTXO, test it, see if it's your UTXO, try and decrypt it and clearly that doesn't scale. So at the moment we kind of use brute force and we have some very advanced multithreaded WASM. So like pushing the browser right to the edge of what it can do and that gets us kind of the current throughputs that we can kind of think about today. To get to kind of I guess world adoption we actually have to look at kind of the network layer of privacy. So we're moving to looking using something like NIM. So you can actually request UTXOs from a kind of more centralized data store without revealing who you are.
00:29:48.248 - 00:30:05.600, Speaker B: And if the UTXO is completely random when you request that through like a network layer, privacy layer, you get the same anonymity as kind of a full sync. So there's ways to do it but it requires kind of the whole privacy stack in our case and some pretty advanced web browser computations.
00:30:06.420 - 00:31:13.604, Speaker D: So I'll address that one pretty simply. So basically this is one of many things Charles has done to damage the reputation of something completely. Innocuous to this particular thing basically just for some spice for the panel. Yeah, just a little spice. So the main thing is cardano's model, at least from the way we can interpret it and this is sort of how we think about it too, is it was implying a certain kind of determinism across the system that was basically blocking or bottlenecking how they were using the UTXOs. For example, if you built something like uniswap, what would happen is and again, this is just my, you know, let's fight on Twitter about it or something, but basically you have something like uniswap, well, you can't really have it because with their model you had to sort of sign off on the change state. But what if you don't know the change state? So what if there's a bunch of people in front of you and behind you in the mempool who are actually manipulating the state of this one thing? Then when you produce the result of the UTXO, well, you don't know what it is.
00:31:13.604 - 00:31:55.632, Speaker D: So in their model they couldn't do that. It caused this issue where you would use uniswap and there'd be like one transaction per block for that one app because you didn't know what the state was. So you had to just use it one after the other. Obviously this is horrible. Imagine one TX or whatever per block for uniswap on Ethereum probably wouldn't even be doing DevCon or something like that. So basically the reality is that that was more of a design decision on the whole system and it doesn't actually relate necessarily to UTXOs per se. UTXOs are just a way to notate and define the transaction model, which is something that you can do in various ways.
00:31:55.632 - 00:32:44.416, Speaker D: So with Fuel, if you have a smart contract as an input, you can have like, say a uniswap like system, that's one input. When the state is manipulated, we basically have an output. So it is noted that it changes a state. But like ethereum, there is this kind of reasonable malleability of what could happen under the constraints of the system, such that this output basically is notating there's a change, but it's under certain constraints and certain conditions similar to what we expect with ethereum and uniswap. When you use uniswap, you don't always know what the state's going to be or what it's going to change to. But in Ethereum we're willing to accept that reality under certain constraints. So I use the word determinism here, maybe the academics don't like that particularly, but it is sort of how I would interpret the situation.
00:32:44.416 - 00:33:01.044, Speaker D: But with Fuel we don't have any of those problems at all. You can build a uniswap like system or whatever. You can use the transaction UTXO model. We get all the parallelism benefits. There's no downsides to that. And it's not an issue. It's really just it was publicized as an issue and UTXOs were related.
00:33:01.044 - 00:33:06.296, Speaker D: But in our case we have different designs that don't feature this issue at all.
00:33:06.478 - 00:33:15.100, Speaker C: In the context of Fuel, is there any problem with Composability or is because of scripts? How do you manage the coding multiple state at the same time?
00:33:15.170 - 00:33:38.272, Speaker D: Yeah, so basically Fuel has just normal smart contracts. So you can have a smart contract that calls many smart contracts. If it does, then you're notating those various other smart contracts as UTX does as well. They're inputs to the system. You're outputting potential changes. So it's very simple in its design. We've inherited a lot of the work that was done in research for state access lists for Ethereum.
00:33:38.272 - 00:34:14.368, Speaker D: So really this is just a reinterpretation of that research. But it's in a cleaned up model which is in a UTXO setting. So we again get all these nice benefits from UTXOs but we don't lose the user experience or behavioral elements of what we get with Ethereum. So it's a really nice model in that sense. And then scripts just allow you to make a transaction and you could say call multiple contracts. So for Approve and Transfer From you have to make two transactions in Ethereum from the origin sender which is ridiculous. Why are we doing that? That makes no sense at all and it should never have happened.
00:34:14.368 - 00:34:46.250, Speaker D: And the main reason why is because of just the design of Ethereum itself is funneling everything through single accounts and that restricts you. So with, again, a UTXO model and with scripts you can just have a script that calls, approve and then Transfer from in the same transaction and that's it. You don't need to deal with that anymore. So it's really not crazy. It's really actually pretty simple. And again, just you can read all of our work and our research on this. So it's all public and available.
00:34:46.250 - 00:34:51.770, Speaker D: You can try the testnet. In our testnet we do that already. Anyway.
00:34:52.460 - 00:36:08.580, Speaker C: So the question was how do Starquare look at this question of state management? And basically the question we're asking is here is how do you parallelize how do you parallelize stuff, roughly speaking so StarkNet at the moment, do not do Parisation as of now because we were focusing on making the whole thing work, right? We had a new VM, a new language, we focused on make things work. And so we went for the simplest model which was the one that was used and bulletproof by Ethereum. And now that we have all the features set, we are focusing on actual execution scaling. So I want to separate verification scaling from execution scaling. And so one of the things we are going to have relatively soon which would dramatically improve the throughput of the system is optimistic execution. So it's not an ultimate solution. It has some downtime, it has theoretical negative adversarial reaction that could be impactful of the network.
00:36:08.580 - 00:36:58.964, Speaker C: We are planning to solve it one after the other. It's not. Right now we're focusing on bringing scale. Another thing that we're looking into, which is within the line of parallelization that enables we are looking at various data structures, like a model that exists in the space. We look at Solana, we look at Aptos, we look at Sui, we looked at all the sort of chain that are actively building through Parisation and look at how they did it. We still wanted the account model because a lot simpler and we already have enough mind change with the new language. So we focused on keep it simple in that sense but we are looking, as I said, into the new ways or they are doing and take the best idea that exists there.
00:36:58.964 - 00:37:07.140, Speaker C: So you should expect more on that front in the coming month. But there is nothing to announce because it's still in the research phase at the moment.
00:37:07.210 - 00:37:13.988, Speaker A: Alpha drop no, but stockware does have parallelization but at the verification level through recursive proofs.
00:37:14.084 - 00:38:07.844, Speaker C: Right? So we are focusing on the scaling of the execution and the VM itself. The recursion enables you to do paralyzation of the verification but you have to know today on StarkNet, verification is not an issue whatsoever. Like the verification proving is not the issue right now. Our problem is the sequencer. Our problem is that our execution layer is pretty bad at the moment and we are working very actively to improve it by 100 x roughly in the coming months. And so recursive proof does enable you to scale the proving. It also enables you to scale the execution by basically going into fractal scaling which is basically the ability for instance, to have a StarkNet over a StarkNet.
00:38:07.844 - 00:38:52.648, Speaker C: And so what before was talking about this ticketing solution that shouldn't leave on the same environment than uniswap. Then using an L three you can have this ticketing with the same requirement, the same trustlessness that you would expect on the regular two, but in an environment where the fees are more stable because there is no sort of like strong economical incentive to build like decks and so on. So to answer your question, all those Parisation topic is very high up into a roadmap. They are still into research and we should expect to have things coming to production in the coming month but have nothing to show today that makes sense going.
00:38:52.814 - 00:39:22.608, Speaker A: So speaking from the perspective of say a DAP developer, not a protocol developer who is trying to use one of your systems throughout the panel, all of you have dropped some really interesting paradigms. Let's talk a bit more. Like I know Fuel spoke about having these scripts and Starquare spoke about having no EOAS whatsoever and direct contract wallets and you use the term programmable privacy. I'd love for everyone to think about what these new features are, but thinking about it from a developer or a.
00:39:22.614 - 00:40:23.680, Speaker D: DAP developer perspective yeah, I mean, from a developer perspective. At Fuel, we look at it mainly from a few different points of vision. My own, which again, is reflective of many, many years of trying to build apps on Ethereum and struggling with a lot of key things in the system that make both the developer experience horrible. But secondly, the end result being a sort of odd disjointed experience between the wallet, what the wallet can do and then what the application can do, and then as well, the kinds of applications you can design. So with Fuel we open up a lot of the compute. So you have far more available to you, you have far more memory to use, you have far more just general compute to build anything you want. You have more options for user experience with things like account abstraction and with kind of other aspects like native metatransactions.
00:40:23.680 - 00:41:17.024, Speaker D: So in Fuel you can have a party that just builds a piece of a transaction. Then you can have another party that just tags on the fee on the other and just send it and that's it. And you don't need to have this situation where it's like you have to wire through five contracts to have some form of account abstraction. So I think from a developer perspective or looking at the space, the thing is there is always going to be hurdles with a new execution environment, with a new development environment, with something that's bridging liquidity. So you're bringing your USDC and everything from Ethereum into Fuel. But the result is that once you're there and once you're actually using it, and once you're actually seeing what's possible, I think developers can open their minds a little bit to where Ethereum should go and where it will be soon. Once we go to Mainnet, yeah, native.
00:41:17.072 - 00:41:29.592, Speaker A: Metatransaction is pretty cool. I know quite a few companies would kill for something like that. But also, I assume when you said memory, you didn't mean like how in Solidity we have string memory ABC, you meant more like Ram or something.
00:41:29.646 - 00:42:04.628, Speaker D: Yeah, I mean literal Ram. So just having a lot more access to Ram and memory and being able to do a lot more with it and across many other contracts. So just having that kind of access is enormous. It's huge. It gives you so much more flexibility because with the EVM and Solidity paradigms, you're so constrained by so many factors, the kinds of designs you can do are extremely limited. So from my personal perspective, I've walked around DevCon a lot, I've heard a lot of new designs for a lot of new DeFi. And to be honest, it's still okay, but it's not what is possible.
00:42:04.628 - 00:42:11.190, Speaker D: There is so much more and it's good, but there's a long way to.
00:42:13.340 - 00:43:06.900, Speaker B: Yeah, I was just going to say, I think it's maybe healthy to kind of also tell developers that not every kind of VM is going to be suitable for them. So we focus on privacy. And you work for Reddit and Reddit has a point system that's public. So that's not really a good fit, but a high throughput VM that kind of focuses on public data may be a better fit. So some of, I think, our competitors in the Zke VM space kind of pitch everything as possible all the time. And I think that wastes a lot of dev time because you have to kind of go through the testnet, try and build something, and you realize kind of a while later that it's not possible. So for Aztec, what we really care about is applications that have private state that could be things like CK games, consumer finance, which just doesn't exist on DeFi today we have overclaterised lending.
00:43:06.900 - 00:43:30.316, Speaker B: You can't really have consumer finance unless you're willing to have a public passport, salary, address on chain. So privacy is kind of what we care about. You're not going to build an AMM on Aztec because by definition, it's the ratio of two public pools. So being really transparent about what you can and can't do, I think, is something we all need to do to help attract the right developers.
00:43:30.428 - 00:43:36.916, Speaker A: So, like, instead of storing variables in the contract itself, you'd store it in your address kind of thing?
00:43:37.018 - 00:44:02.040, Speaker B: Yeah. So each user basically controls their UTXOs, which are encrypted, and you can feed those into an Aztec transaction and prove something about it. And then kind of in an Aztec program, if you prove that your salary is above X, you may be entitled to a loan or not entitled to a loan. So having that data, being able to be fed in as an encrypted input to a program is really powerful. In our case.
00:44:02.190 - 00:44:10.604, Speaker A: You mentioned how some zero knowledge VMs are now realizing some of the things they ran into. Can you expand a bit more just for all of us?
00:44:10.722 - 00:44:16.690, Speaker B: I just mean, like, I think you need to kind of let me think a second.
00:44:17.220 - 00:44:18.130, Speaker C: Go ahead.
00:44:20.100 - 00:44:24.608, Speaker B: It's hard to do privacy in some applications, is all I'm going to say, and then I'll see what Louis has.
00:44:24.614 - 00:45:05.504, Speaker C: To say about that 100%. And so StarkNet is not built for privacy whatsoever, but that's not nature. What's true is that you can build privacy protocol on top of it. And so I was literally saying in a random idea yesterday to Joe here, why not Aztec and Noir as an I mean, there is no reason to not you could have this kind of composability, just not the same purpose. So you ask what kind of things you can build. So the main thing that you can build on StarkNet, I always give as a dev. The only thing you care about.
00:45:05.504 - 00:45:54.252, Speaker C: Three things. Which are you get cheap computation, cheap code data and icon abstraction and you get like a three and a half, which is a long term vision of scaling, which means that even if you are priced out of this layer itself, you can go a layer up which would be cheaper. So what you get when you get those three things you start having new project. So I named before the ability to kind abstraction gives you the ability to sign with your phone without having private key per se. It's your phone deteriorate a private key. So now when you combine, for instance cheap computation, you start to have people making physics engine on the blockchain. So we have someone a company called Topology on Stocknet that is building a physic engine.
00:45:54.252 - 00:47:11.196, Speaker C: So you can prove collision, you can prove like games that existing in the 80s or 90s worms, you can make that happen directly on chain. You can implement things like infinite risk, like an infinite map using perlinoise or advanced algorithm that generate maps and we have those people making it today on the ecosystem. So when you get cheap code data and cheap computation, you get things like that are not possible on ethereum before like practical storage proof. So if you're not familiar with storage proof, storage proof enables you to prove the state of if in the past to if in the present. So why is that useful? So it's useful for instance for voting. So when you vote, you basically vote using the token balance that you had at that proposal variation and so this company called Erotus is building this and they already have a snapshot trying to create L One voting through L two using their tech. Now, the amount of what else I think very exciting, I feel we have a lot of onchain gaming because on chain gaming was completely moved out, priced out of ethereum and the proof is the only existing on chain game today on ETH is basically on this chain, it's called Dark Forest.
00:47:11.196 - 00:47:24.820, Speaker C: So we have seen a massive boom of projects that were priced out that couldn't build on if building on us things and even flagship like Loot literally building their own universe on StarkNet right now.
00:47:24.910 - 00:47:55.348, Speaker A: Thank you so much. Yeah, I know we're running out of time. All I'll say is to all the DApp developers, I think because we work in crypto, we kind of owe ourselves to test and prod. I say that as a meme. But what I really mean is I think we are here to experiment and try these new languages like Sway and Cairo and Noyer and stuff. So I hope you all actually go out and at least read up on what these cool things are doing. I don't know if you have time, but we are happy to take one or two questions if anyone has hello.
00:47:55.434 - 00:47:58.960, Speaker C: Very interesting, very interesting talk.
00:47:59.050 - 00:48:00.984, Speaker A: I have a question why create why.
00:48:01.022 - 00:48:09.290, Speaker C: Each one create their own different language instead of using something more standardized like Circum or even, I don't know, C plus plus?
00:48:09.900 - 00:48:33.250, Speaker B: I'll just say for our case, none of the languages other than Circum are built for kind of private state and we found that Circum was too low level and we're trying to target kind of web two developers or solidity developers, and they shouldn't have to kind of know how to be a cryptographer. So our language abstracts the cryptography part so you can just write an application and nothing was out the box.
00:48:33.700 - 00:48:56.090, Speaker C: So is it working? Yeah, circum is not true and complete, as simple as that. And so if you want to do an if statement, which you kind of need for so StarkNet is an OS. The real name of StarkNet is an operating system. Right. StarkNet OS. And so everything, every sys code in StarkNet is written in Cairo. So if you don't have a if statement, your program is going to be quite big.
00:48:56.090 - 00:49:25.200, Speaker C: Another thing that circumstances allow you to do is being able to prove multiple programs within the same proof, which is something that Cairo through Sharp enables you to do. And so we needed to create our own language for that purposes. And finally, Circum is I mean, I guess is that true target since Narc, but that's not remove that part. But yes, noturing complete, not being able to prove multiple programs using the same proof.
00:49:26.440 - 00:50:00.844, Speaker D: Yeah. In our case, we really didn't want to create a new language. We looked at a lot of options. The main reasons are some of the existing programming languages, like C or Rust, for example, they're really not designed to target a blockchain. And there's a lot of different ramifications around targeting a blockchain system that you want to catch in different stages of the compiler. So that was one strong motivation for us to have our own language. Secondly, the compiler and the tooling have to work really hand in hand.
00:50:00.844 - 00:50:53.612, Speaker D: So in a blockchain environment, you want the developer to have extreme control over every aspect of the system so that they can really simulate everything. So the developer experience was another. And lastly, we wanted to create a Rustish like language that really targets blockchains, not just the Fuel VM. So the way that our compiler is designed is such that and this is unlike others in the space, it's designed to be very modular. So if we want to target a backend like Cairo, or we wanted to target the minevm, or we wanted to target a different language, the language ecosystem will be set up to target many different kinds of blockchains, including the EVM. So one we're working on right now is targeting Yule, and that's with Foundry. So you'll be able to use Sway and maximize its value and its design without having to want to rebuild languages again.
00:50:53.612 - 00:51:10.710, Speaker D: Now, mind you, I think some of the ZK teams have different criteria at different stages of the compiler that they really have to factor into their design. So we can't speak for all ZK VMs or anything, but it's a good harness of a blockchain language that's Rustish that people will like. Yeah.
00:51:12.200 - 00:51:14.070, Speaker A: Thank you. Any other questions?
00:51:15.000 - 00:51:52.480, Speaker C: I'm not sure how relevant the question is to your environments, because I haven't looked too deep into it. But if you build something like an uniswap on it, which excludes Aztec already, would Map be a problem on those networks as well, because the indexes could sort transactions differently? Or is it somehow solvable we have right now on StarkNet, I think, top of mind, five different uniswap B two. So the answer is no, it's not a problem. That was a joke. But no. StarkNet currently uses exact same data structure model than Ethereum.
00:51:52.900 - 00:52:25.960, Speaker B: It doesn't really exclude Aztec. We have swaps from Aztec connect to uniswap, and probably the most liquid uniswap because it's on main net, so liquidity doesn't get fragmented. We just have to kind of acknowledge that uniswap is a public application. So we can't make it private, but we can make the users private. So users come to Aztec and in this case, they bridge out to l One in a batch to get scaling and privacy. So, yeah, it's possible, but it just requires a different kind of paradigm to normal scaling.
00:52:26.120 - 00:53:14.360, Speaker D: Yeah, and then for us, we don't make any claims about Mev, so you could probably extract it in a decentralized sequence setting. But I will say that we actually take a slightly different approach in the sense that we actually want to give the node as many abilities as possible to extract as much Mev as possible, or provide teams that either try to fight mev or actually try to advantage. It the best tools that they can have because we don't have a solution for it. But we know there's incredible teams either advantaging it or trying to reduce it or solve it. But either way, doing Mev facility and fuel should be very interesting for internal Aztec transactions.
00:53:14.860 - 00:53:35.760, Speaker B: If they're fully private, you can't see what's happening. So our approach is usually to try and push it to l One, and then you can use something like Flash Lots to kind of solve it in the way we currently know how. But if there was kind of public components to an Aztec l Two application, then there would be Mev on the network. But, yeah, I think trying to push it to l One is a good strategy.
00:53:36.100 - 00:53:37.490, Speaker A: Thank you so much, everyone.
