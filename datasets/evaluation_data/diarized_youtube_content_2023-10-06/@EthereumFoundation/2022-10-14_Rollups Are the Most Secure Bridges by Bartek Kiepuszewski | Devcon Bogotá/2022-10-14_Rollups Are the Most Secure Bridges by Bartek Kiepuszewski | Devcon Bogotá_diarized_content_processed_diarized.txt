00:00:12.890 - 00:00:39.942, Speaker A: That's a big stage. Thanks so much for showing up. My special thanks is to make a dao fam, obviously. And I. I'm going to talk a little bit about bridges. You might have heard a lot of talks about bridges. This one might be slightly different because the subject of the talk is actually quite serious.
00:00:39.942 - 00:02:07.862, Speaker A: I mean, we had a lot of problems with bridges recently. So before I actually go into the crux of the matter, let's just go back and look at a bit of a history. So how come I'm here? Two years ago, more or less, we started to work at the multi chain strategy for the makerdao and we asked ourselves a question, how do we actually move Dai to different chains? So it was actually quite hard and for us. Let me go back. So two years ago, we started to work on the multi chain strategy and we had to look at all the other chains and we had to find out how secure they are to actually be able to move Dai in a very secure manner and to do that, to look at the security of all the other chains. So basically, I created the spreadsheet and I posted the spreadsheet on the forum and frankly, after a while not a lot of people looked at the data and looked at what we had to say. So I figured that we need to make this information more broadly available to the broader audience and we basically created a website called L two P.
00:02:07.862 - 00:03:06.806, Speaker A: And the reason for us to actually do that was to make people aware that security of Dai on all the other chains is very, very different. If you hold Dai on, let's say, polygon. If you hold Dai on phantom, you'll be looking at a very, very different dai. And the security properties of the dai will be very different. For makeadao, it is of the utmost importance that Dai is censorship, resistance. And if you hold Dai on all these other chains, you should really ask yourself a question, is this really a dai that you hold on Ethereum? Does it have the same properties or is it actually different? Right. And can you make all these different dais fungible? And what is it really needed to be able to mint Dai on all these other chains? So these are actually quite hard questions and that's why it took us so long to get all of us to where we are here.
00:03:06.806 - 00:04:00.598, Speaker A: And once we looked at all the other chains, we want to publish all the results. And this is how l two b it was born. L two Bt was essentially initially created as a website to disclose all the risks for all the different chains. And it took us really by surprise how important this thing was. Everyone was really looking at the risks and the value locked and at all the information that we actually uncovered, in a way. So let's have a very quick look at the state of the bridges and where we are today. So essentially, when we look back at the last year, it was a bad year, right? We had a hack at the polynetwork.
00:04:00.598 - 00:04:27.966, Speaker A: We had a hack at the chainswap. We had a hack at the any swap. So last year was really, really bad, but that doesn't really compare to what we witnessed this year, and it's really shaping up to be much, much worse. So it all started with the wormhole hack. Then we had run in network. It was like huge. $600 million was taken from that bridge.
00:04:27.966 - 00:05:02.266, Speaker A: Then we had the harmony, Nomad. This one was particularly bad. I personally really liked nomad architecture. I was actually trying to convince my peers at maker to have a very much closer look. And unfortunately, to a bug in a smart contract, it was hacked literally two weeks after I pitched Nomad. So that was really intense. And then probably a week before Defcon, you might have heard about binance.
00:05:02.266 - 00:05:44.138, Speaker A: And I even had to correct my presentation because of what happened literally yesterday. Right? And it's not just the bridge. Some other Defi protocols were hacked as well, but yet we had another bridge hack. So bridges are scary, and bridges seem to be really weak point in all of this. And we had to take a closer look at all of them. So far, we spent the last two years looking mostly at the roll ups. And now it was time for our team to have a look at the other bridges as well, and how we published this information.
00:05:44.138 - 00:06:36.330, Speaker A: Like I said before, we basically looked at all the escrows, we looked at all the values that was locked in all the bridges. But looking at other, not just the roll ups, looking at other bridges was essentially requested by the community. And if Josh Sark from Ethereum foundation asks you to actually do something, you should consider. So without the further ado, I mean, this is actually my pleasure to announce that at l two beat, we also are covering all the bridges. You can check it out, it's actually up and running and live since yesterday. And I'm going to tell you a little bit how we look at these bridges. And what are the findings that we uncovered by looking at these bridges.
00:06:36.330 - 00:07:30.330, Speaker A: So, to put it simply, we obviously track total value locked in these bridges. So we can see more or less the same type of list as for layer twos. We track total value locked, and you can see how much value is at stake. This is all that value that potentially can be hacked. And the bridges are like these huge pinatas for potential hackers, right? So we really need to understand what are the risks and what are the security assumptions behind all these bridges. And then you can look at the bridges to roll ups as a type of a canonical bridge. So you can combine this information and you can see the total value locked in all of these systems and all of these bridges.
00:07:30.330 - 00:08:27.578, Speaker A: But as you know, LTB is primarily about the risks. We want to disclose the risks. Like you can see on this particular example, most of you probably know that optimism does not have fraud proofs right now deployed, and this information should be known and available to everybody. So, you know, when you move your funds to optimism, what are the security assumptions? I mean, we are in a close contact with optimism. We know that they're working on the fraud proof system, but as it stands right now, you have to trust them, right? You have to trust the team and you have to trust the sequencer. So I guess we thought that we need a proper risk framework for bridges that would work more or less the same way as we did that before for roll ups. We believe that risks should be disclosed.
00:08:27.578 - 00:09:20.910, Speaker A: We believe that we should make everybody aware of the underlying security assumptions. We should constantly monitor infrastructure for upgrades, and we should really monitor the other security parameters. And this is tough, this is hard because some of these constructs are actually quite complex. And you need proper automation, you need proper tooling, you actually need to be able to read from storage diffs, which if you have ever tried to do that, it's not particularly easy. And thankfully, right now there are some tools that actually allow you to do it much easier. But generally what you need to do is you need to replay all the potential ethereum transactions that change the particular slot. So that's tough.
00:09:20.910 - 00:10:13.406, Speaker A: But this is our task, and we believe that once we do that, we'll actually make multichain infrastructure more transparent and secure, while keeping teams honest. And it is all about honesty, right? It is all about proper disclosures. It is all about making sure that users do understand the risks. So what are the risks when you're actually using bridges? And you would be surprised how a few people actually do understand. Most people kind of think that when funds are in transit and once they arrive to the destination, they should be safe, right? So it's almost like crossing the bridge across the water, and once you made it to the other side, you're safe, but you're not. You're definitely not safe. And I will try to explain why.
00:10:13.406 - 00:11:10.494, Speaker A: But before I do that, I will actually show you a few interesting findings that you might actually also find surprising. The first one, and I think it's actually quite a big one, is the multichain. Multichain is one of the biggest bridges with the biggest TVL. Turns out that last year they actually removed from escrow quite a lot of funds, like literally millions of dollars. So normally for that type of bridge, you expect that you put your funds into escrow, and on the other side of the bridge, some funds will be minted, right? And when you go back the funds from the destination, they will be burned and the validators will release the funds from the escrow. Turns out that in this particular case, validators actually took funds out of the escrow without actually burning them from destination. So that was odd.
00:11:10.494 - 00:12:30.830, Speaker A: And the amount was very significant, and it seems like no one cared, like people were not really aware that that was happening. And just the fact that it is possible for the validators to take funds out of the escrow, this is the risk assumption that you should be all aware of, right? If you're using the bridge that's externally validated, that's the thing. They can all take your funds. So in this particular instance, apparently the funds were used to provide liquidity to any tokens on a lot of different chains. And to make sure that this is exactly what happened, you would have to go to all the other chains and check it out. But my question to the multichain team is, was this part of the contract? Right? Were users aware? And what is the consequence? Can actually, users withdraw all their funds? And more importantly, what is this additional trust assumption? Because the validators can remove funds from the escrow, they can do all sorts of things as well, right? And how do you actually monitor what they're doing? So that's one, then you have something called plasma bridge. Some of you, again, might be aware of, because this is one of the two bridges that you normally use to move tokens to polygon.
00:12:30.830 - 00:13:27.514, Speaker A: And this particular one has a very interesting documentation. It says in the documentation that it provides increased security guarantees because there's a seven day withdrawal period. And during that period, you can challenge validators from Polygon. So it's kind of like a plasma exit mechanism. However, to the best of my knowledge, this was actually implemented and deployed on a testnet, but it was never deployed on a main net, right? So if you look at the main net code, and by the way, who's looking at the main net code of the bridge of the contract, probably very few of you, you'll see that the method that allows you to actually challenge the validators is empty. Right? You can't do that. So, frankly, the plasma bridge right now has the same security assumptions as the POS bridge, the main bridge that you normally use to the polygon.
00:13:27.514 - 00:14:08.966, Speaker A: And it's got this user nuisance of seven day withdrawal period. And the last one that I wanted to mention, which, in the documentation, the risks were properly disclosed. But again, I think that the user should be aware of that. If you use the omnibridge to move your funds to the Xdai chain, they might invest some of these funds. They might actually put the funds that you normally expect to be in the escrow, into Ava, into compound, or wherever they like, actually. Right? So normally it's called rehypothecation. This is the practice where banks are using your funds to actually invest them, and you're running into liquidity risk.
00:14:08.966 - 00:14:51.222, Speaker A: Potentially, if you were to withdraw all the funds, they may not be available. They might be, like, locked somewhere in, say, ava or whatnot. Right. So the whole process is very transparent. But the power of validators to actually do that may be surprising to some of you, because again, it's a question, what are the security assumptions? Right. And what do you normally expect when you put the funds into the bridge? So now, with all these examples, you may wonder, how do you actually collate all this information, and how do you actually make it available to the users? And this is a challenge. We've got hundreds of bridges, we've got hundreds of different destinations.
00:14:51.222 - 00:15:36.230, Speaker A: We've got hundreds of tokens, and every single transfer may be actually different. Right. And this is a challenge for us as well, because we really wanted to make it very transparent to everybody, and we wanted to make sure that users are actually aware what exactly is happening behind the scenes. So we tried to kind of make it the whole framework user friendly. And I will quickly summarize what you will be seeing on the l two beat bridges section. So, first of all, we kind of differentiate primarily two different bridge types. The first one is a token bridge, and that's the bridge that mints tokens on the destination.
00:15:36.230 - 00:16:30.774, Speaker A: So this is something that normally you should be intuitively expecting, right? You put tokens into the escrow, the bridge mints tokens on the destination. However, a lot of bridges cannot mint tokens. Right? Like take dai as an example. I mean, most bridges won't have access to dai minting facilities, so they have to do something different on the destination. They have to create a liquidity pool, they have to mint something or maybe through some other mechanism, and they will swap whatever they minted for the dai that is sitting and waiting for you on the destination. And we call these types of bridges liquidity networks. And I think what is the most confusing for end users is that if you go to Ui of almost any bridge, you will not know if you're actually using token bridge or a liquidity network.
00:16:30.774 - 00:17:13.634, Speaker A: In fact, some of the bridges are hybrid. Sometimes for some tokens they may actually mint you tokens, sometimes they may use liquidity pools. And as is the case for the multichain, you can have some mixed results. Some of the tokens may be minted for you, and some of the tokens may be actually coming from the liquidity pool. So these types of bridges we will call hybrid. And again, if you compare token bridges to liquidity networks, they have a very different risk profiles. So for the end users, I think it's very useful to actually understand the difference between the two, right? You have unlimited liquidity for the token bridge.
00:17:13.634 - 00:18:13.146, Speaker A: You have tokens that if you keep the token at the destination, you will face the risk of the validators of that bridge. And generally, token bridges can be quite slow and expensive, while the liquidity network is almost like the opposite, right, it has limited liquidity typically. So you may end up with your tokens being stuck, but tokens held on the destination are not at risk of this network. They're actually at risk of the token bridge that was used initially to move tokens to the liquidity pool. So again, this is the risk that is actually quite difficult to disclose. And finally, they can be fast and they can be cheap, right? So this is the column on the l two beat, which you can check very quickly. And this is something that should be essentially easy to read for all of you.
00:18:13.146 - 00:19:28.542, Speaker A: And if you use any particular type of a bridge, I do encourage you to check it out and understand the consequences. More importantly, from the risk perspective, and this is like maybe a little bit more technical, is the question how the messages are actually relayed between the source chain and the destination chain. So technically we use all sorts of terms for this, like arbitrary messaging bridge or some other terminology. But because we wanted to make the framework sort of user friendly, we just want you to understand, what are the four, in our opinion, primary mechanisms that are actually used to relay the messages. And again, these messages are important because when you lock your token at the source, the destination somehow has to be informed, how do you mint the token at the destination? Right? So what are the four different categories. Well, first of all, you've got the third party, meaning that you have to trust someone to relay this message, and that particular party can essentially break you, right? So you put full trust on that party. Then you've got what we call the optimistic scheme.
00:19:28.542 - 00:20:38.902, Speaker A: We relay the message, we trust that the message is correct, unless someone actually proves that the message is incorrect. So your intuition should be like, who's watching the relayers? Right? Who are the watchers? And what is the length of the fraud proof window? Because optimistic message bridges, they always have watchers and they always have the fraud proof window. Then we've got bridges that we normally call as secured by light clients. And essentially what it means is that we trust the destination chain to tell us what happened, right? So when, let's say, polygon validators say that something happened on Polygon, I don't check that this is exactly what happens. I just trust the Polygon validators. And on Ethereum, I just need to build software that will check the signatures essentially, right? So you're putting your trust on the validators, on the destination chain. And the most secure bridges, in our opinion, are the trustless bridges that use Ethereum as the ultimate source of truth.
00:20:38.902 - 00:21:10.660, Speaker A: So we don't trust anybody. We build smart contracts on Ethereum that will validate if the destination chain is not lying to us. Obviously, there are two techniques right? Now. You can use ZK proofs or you can use fraud proofs. That's why we've got ZK roll ups and optimistic roll ups. And if implemented correctly, these are by far the most secure bridges, provided that there are no bugs in the implementation. Right.
00:21:10.660 - 00:22:04.174, Speaker A: So what can go wrong? I mean, you've got the external validators, everything can go wrong, right? They've got full access to the escrow, they can mint whatever they want to mint. If there's a bug, you can have billions of tokens minted out of thin air. And validators can censor, they can steal, they can freeze funds, they can do whatever, right. You have to fully trust validators for optimistic validation. As I said before, you need to make sure that watchers are actually active, because if no one's watching, the fraudulent message can be relayed for the light client validation. If you're transferring your tokens to a chain that's weak, that has very, I don't know, it's a low value chain, and validators can be potentially 51% attacked. Then your tokens, again can be stolen from escrow.
00:22:04.174 - 00:22:56.894, Speaker A: So you have to really understand how strong is the chain that you're moving your tokens to. And finally, for roll ups, for full client ethereum validation, in theory, nothing can go wrong, right? So funds cannot be censored, funds cannot be stolen as long as there are no bugs in the implementation. And this is how we actually show who is validating all these bridges. And I think this is the most important column that you should all focus if you want to understand how a particular bridge operates, then we have upgradability. So this is essentially the information whether the bridge can be upgraded and who have got the upgrade power. And again, we kind of have to assume that whoever's got this power is honest. So this is a very important security assumption.
00:22:56.894 - 00:23:56.310, Speaker A: If you can upgrade the bridge, you can steal all the funds. That's as simple as that. And finally, and I think this is the most interesting aspect which is often overlooked, is who's got the minting power on the destination, right? So take again Dai, as an example, if you move dai via three different bridges, let's say you use the Makerdao bridge and move your dai to arbitram, Optimus, starknet, your dai will be essentially minted by makeadao contracts, right? And it will have exactly the same properties as your dai on the main net. But if you move dai through the Polygon bridge, then your dai on Polygon will be minted by polygon validators, and they might actually have the upgrade power of the dai. And finally, if you move dai on Phantom, it will be minted by multi chain, multi sig. Right? So again, it's a question to you. I mean, how secure you feel with your dai in your wallet.
00:23:56.310 - 00:24:41.170, Speaker A: So this is the last column that we show on our framework. And as I said before, I guess the end game for all of us should be to build trustless bridges, because everything else, we need to put our trust on some other parties. And these bridges are very, very hard to build. We had some problems with arbitrary bridge. There was a bug. It was essentially, fortunately, uncovered, and the bridge wasn't hacked. But as you can see, the roll up bridges can be buggy.
00:24:41.170 - 00:25:26.370, Speaker A: Same situation happened in optimism. And this is one of the reasons why these bridges are right now, not fully yet permissionless, and I hope they will be very soon. But even more importantly, as you can see from this transaction that's actually moving. How much is it? This is actually over 700,000 ether from one version of the bridge to another version of a bridge. And that power has arbitram multiseek. Right? So even though you may think that arbitram has fraud proofs and whatnot. They still have a multi sig that can move all the funds from the bridge, and they did in this very transaction, and it didn't really raise any alarm.
00:25:26.370 - 00:26:07.418, Speaker A: So that was kind of interesting. We saw this transaction, and we analyzed this transaction. It was an upgrade, and everyone knew that arbitram was about to upgrade. But seeing such a transaction moving essentially billions of funds in one move, it's kind of scary. So, to sum up, we kind of think that we have no choice. We have to put engineering effort into building those roll up bridges. I don't think it makes a lot of sense, moving forward to rely on third parties in the long term.
00:26:07.418 - 00:26:42.186, Speaker A: In the short term, they might be quite useful because we need that functionality. But in the long term, eventually, we need to find a way to actually make sure that the code behind all these roll ups is actually secure. And as I said before, the code is very, very complex. Right. These bridges are actually very hard to analyze. I guess for a while, none of these roll ups have shed the training wheels. So you should really also understand what are the current assumptions.
00:26:42.186 - 00:28:16.360, Speaker A: But every single team that we talk to, they have promised us that eventually these training wheels will be shed, so there's some hope for the future. But how do we make sure that such complex software is bug free? And how do we make sure that these roll ups will not be hacked in ensuing months? And I think this is probably one of the hardest questions from the engineering perspective and from the perspective of the whole community, we don't seem to have a solution for dealing with discovery of potentially critical bugs without actually relying on some honest actor. Right? If the bug is found, we all want some good guys to shut down the bridge, fix the bug, and restart the bridge without the bug. That's quite obvious, right? No one wants, really, the bridge to be drained by malicious actor. However, right now, it just seems that the best we can do is to sort of create a multisig of some trusted security engineers, I guess, or a security council of sorts, and these guys can perform these sudden upgrades and to make it permissionless and to make it immutable, that also mean that we are exposed to potential problems. So thank you so much for listening, and I do hope that the future is bright and hack free.
