00:00:00.650 - 00:00:39.730, Speaker A: Those of you who were here last year and happened to come to our talk might recall Ethermint 10. Well, we're back, and Ethermint is back. But this time it's better. So I'm going to talk about Ethermint 20, which combines the best features we think of Ethereum, the EVM, and the best features of the Cosmos SDK and tendermint in this presentation. First, I'll give a quick overview of Cosmos, explain the network model, the topology, why we think it makes sense. I'll talk about the feature set of the Cosmos SDK in particular, and how it can be combined with the EVM. And I'll give a quick background on tendermint consensus and how it facilitates this model of interconnected blockchains.
00:00:39.730 - 00:01:14.610, Speaker A: Then we'll talk all about Ethermint 20. I'll outline the architecture, the chains that we made from Ethermint 10, and why. I'll talk about how the EVM and the SDK can work together to give you native code and EVM contracts all in one blockchain. I'll talk about, finally, how you can move your dapps or move parts of your dapps onto the Ethermint chain while preserving seamless UX. And I'll take any questions. So, first, the Cosmos model envisions a network of interconnected blockchains. In many ways, these blockchains will be application specific.
00:01:14.610 - 00:01:43.066, Speaker A: They will do lots of different things but talk to each other. In order to facilitate this, we need to make it really easy to build an application specific blockchain. To do that, we've built the Cosmos SDK. The Cosmos SDK is a framework for building custom state machines. It contains all the glue library code of blockchains, AVL trees, message handlers, all the logic to knit modules together. Super developer friendly. It's written in Golang, which many of you are probably familiar with.
00:01:43.066 - 00:02:38.458, Speaker A: It's all open source on GitHub. The Cosmos SDK is designed in particular to be secure, to make it easy to use different modules which do different things which can interact with each other, but where you can control the ways in which they interact, so you can mitigate unintended consequences. To do this, we use something called least authority permissioning. So you pass around keys from one module to the other, keys that control which stores can be read or written to. Unlike, for example, a call between contracts and the EVM, a call between modules and the Cosmos SDK can only execute, reads or writes to the stores for which you give it permission to do. We're trying to model the SDK as a sort of ruby on rails for blockchains, a way to take existing modules, add your own custom flavor for your particular application, and end up really fast with something that's production ready. In order to do this, the SDK needs to be modular.
00:02:38.458 - 00:03:42.270, Speaker A: We've built a system by which we can build particular components that you might want in your state machine as modules. And eventually not only us, we hope, but many other people who are building these application specific blockchains. They can build modules as we've built for governance, staking, fee distribution and inter blockchain communication. They could build a different module for a DeX, or a different module for a different kind of proof of stake algorithm. Then you can, using the Cosmos SDK, pick and choose which modules you want to use in your blockchain, glue them together and connect them using the least authority permissioning system to run your state machine. We hope then when you've done this and when you've added your application specific flavor, the custom module for whatever your blockchain is going to do better than anyone else, you will share that or share parts of it upstream so that people upstream and downstream so that people can build upon what you've done, improve it, and send it back. In order to facilitate this network of interconnected blockchains, we need a consensus algorithm with particular properties.
00:03:42.270 - 00:04:18.010, Speaker A: So we've built tendermint. Tendermint is the state of the art, generic byzantine fault tolerant blockchain engine. It encapsulates the consensus in peer to peer layer, coming to consensus on which transactions ought to be applied in which block, and when. A block needs to be appended to the chain and it provides vertical layer one scaling for your state machine super fast, two and a half second block times. Tendermint is fully peer reviewed and it offers one block finality. As soon as a block is confirmed, it will never be reverted. Most importantly, for this model of application specific blockchains, tendermint is generic.
00:04:18.010 - 00:05:22.546, Speaker A: It can connect to any state machine. You could write using the Cosmos SDK or using a different SDK, any kind of state machine you like operating whatever sort of application you want to operate, and run it with tendermint. So here's a picture of what the tendermint stack looks like so you can see this in visual form. The large green rectangle is tendermint consensus, and each of the circular disks is a validator participating in the consensus algorithm, sending messages to each other to vote in BFT rounds. Then, in the smaller blue rectangle, we have the ABCI application. That's your state machine, written using the Cosmos SDK and perhaps featuring the EVM, which is talking to and from tendermint, telling tendermint which transactions are valid and executing the transactions once they've been confirmed in a block. So, in order to make it as easy as possible for developers to start working on full function blockchains using the SDK and tendermint, and in order to build the particular blockchain we're working on the Cosmos hub, we've built some core modules, which I'll talk about now.
00:05:22.546 - 00:06:05.714, Speaker A: The first module is bonded proof of stake. Bonded proof of stake is the proof of stake mechanism, which will be used by the cosmos hub and which we invite any blockchains in the cosmos ecosystem to use themselves with their own staking token if they like. Bonded proof of stake has delegation, as we say, with skin in the game. So delegators are liable if their validator commits a protocol fault, their validator double signs or fails to participate in consensus for too long. The delegators, too, can be slashed. Bonded proof of stake addresses the nothing at stake problem with an unbonding period. Both validators and delegators, when they want to participate, to vote in consensus, have to lock up tokens, for it will be three weeks at launch for the cosmos hub, but for a configurable amount of time.
00:06:05.714 - 00:06:42.566, Speaker A: And as long as those tokens are locked up, if an infraction is discovered, they can be slashed. We've tried to build this module to be batteries included, but extensible. You could import it as is and have a fully functional proof of stake algorithm for whatever state machine you're running. Or you could modify it. You could add custom slashing conditions for different kinds of application level guarantees you want to provide. Or you could change the way we've parameterized our slashing and staking conditions to alter the logic of delegation or punish people differently for committing protocol faults. The second core module is governance.
00:06:42.566 - 00:07:32.846, Speaker A: Like our proof of stake module, governance is designed to be pretty flexible, so it will work for lots of different blockchains. Our governance module has different kinds of what we call governance proposals, proposals to change some way the chain works. The first are simply text proposals. They don't do anything in protocol in band, but rather allow for the network to come to social consensus on maybe some change to make in a future software upgrade or on some way in which we want to change the way we're operating this blockchain. The second are parameter change proposals, which are in band. So if a parameter change proposal is passed, that might change the amount of stake which is slashed for double signing, or it could change the annual network inflation rate. Third, and finally, we have software upgrade proposals which actually upgrade the state machine which the chain is running.
00:07:32.846 - 00:08:20.118, Speaker A: So upgrade in the case of your application specific blockchain, maybe the logic of an exchange. Once everyone has come to consensus on that proposal at a particular block height automatically for governance, we've elected to use liquid democracy. So in tendermint blockchains there will be a few hundred or so validators. Those validators can vote, and by default they will carry their delegators vote with them. If your validator votes for in favor of a proposal, and you as a delegator elect to do nothing, your stake will count in favor of the proposal. But delegators can also elect to override the vote of their validators if they disagree, and they will have time to do that if they see what their validator votes for and decide they don't like it. Next up on the list of core modules is fee distribution, rewards and fees.
00:08:20.118 - 00:09:06.154, Speaker A: We have decided that we need to use a pretty different system for fee distribution for tendermint than for most existing blockchains. We can't just give all the fees to the proposer because it would make it too much of an incentive to bias proposer election or dos, the current elected proposer. So we distribute most rewards proportionally to stake held by all the delegators and validators on the blockchain, like the staking module and the governance module. Our fee distribution module supports any token, so you could integrate it into your application specific blockchain with your own token. Easy peasy, just change one string. And it also supports multicoin fees. So we think the economic model of proof of stake may be a little different.
00:09:06.154 - 00:09:44.226, Speaker A: For example, for the Cosmos hub, we plan to accept transactions, or we plan to encourage the validator set of the cosmos hub to accept transactions which pay fees in lots of different denominations. They don't need to be atoms. The final core module and my favorite is inter blockchain communication. So this is the key part of what makes the Cosmos network model tick. We've exposed the IBC interface, which is a payload agnostic way of sending authenticated messages exactly once to another blockchain. It's a little like TCP IP for blockchains. On top of this, authenticated exactly once, message delivery primitive.
00:09:44.226 - 00:10:18.334, Speaker A: You can implement lots of different application level guarantees. You can implement token transfer, which means that you're conserving supply across two different blockchains. You could implement transfer of unique tokens, which means you're conserving the existence of the particular unique token on only one chain, in only one account at a time. You could transfer data, or you could even transfer code parts of your smart contracts in some kind of sharding. Then the special module for this presentation is the EVM. So in Ethermint 2.0, we've taken the EVM.
00:10:18.334 - 00:10:54.954, Speaker A: The Ethereum virtual machine, which is the core part of the Ethereum blockchain that runs all your smart contracts, and put it in a Cosmos SDK module, has all the features you're used to, an account database and a state tree. It can run Ethereum transactions. That's how we've been testing our EVM implementation, by running the actual Ethereum transaction history. But most interestingly, it can call to and from Cosmos SDK modules. So if you have a blockchain with the EVM module, with the governance module, with the staking module, contracts you write for the EVM module can talk to the staking module. Maybe they could delegate. Maybe they could query balances.
00:10:54.954 - 00:11:47.994, Speaker A: Maybe they could see when people got slashed or do things when that happens. Similar for governance, for fee distribution, and for IBC. So if you have an EVM contract on a blockchain in the Cosmos SDK along with the IBC module, contracts running on that EVM module can make calls through IBC to and from other blockchains. In order to enable this, we need, and we have implemented a shared state view. So there is one token, or only needs to be one token on this blockchain, which will be ether quote unquote, in the EVM message value for those of you familiar with solidity, but which will be the token used for governance, possibly for proof of stake and fee distribution, and the other Cosmos SDK modules. So Ethermint, the whole package combines the Cosmos SDK, all of these core modules. We've built the EVM module and a web3 API layer.
00:11:47.994 - 00:12:28.646, Speaker A: We think this provides a pretty compelling deal. You get the scalability of tendermint, byzantine fault tolerant, consensus, two second block latency, incident finality, the power of the Cosmos SDK lease capabilities, security, the ability to integrate all these modules and contribute downstream and the existing ecosystem of Ethereum contracts and development, tooling, truffle, metamass, solidity, you name it. But we've even done more than that. We have not just ported, as in Ethernet 1.0, the EVM module from Geth. We've ported the EVM module from Turbogeth, which Alexei is working on that features a lot of improvements over the base EVM. It's faster.
00:12:28.646 - 00:13:14.518, Speaker A: We've changed up how the database works, of course. It connects through the SDK module interface, so you can have what are like pre compiles in the EVM, but which would really call into other Cosmos SDK modules, or vice versa. Turbogeth I will encourage you to take a stop at Alexi's talk, which is tomorrow afternoon, same time. But in brief, Turbogath, which is being developed in parallel as an Ethereum client along with the Cosmos SDK module, has numerous improvements over the current available EVM implementations. It supports any binary search tree. It has structure preserving custom serialization, as opposed to RLP, which is much faster. It allows you to use the same data structure for database indexing and Mergal Hasting, also faster.
00:13:14.518 - 00:13:59.820, Speaker A: And it implements some new caching strategies, in particular for state sync using the benefit of hindsight. So using the fact that you know what future transactions are, or future states when you're trying to sync past transactions and verify them. Now, there are two ways to use the EVM module. As I've alluded to, Ethermint will exist as a particular blockchain, as a proof of stake chain with all the core modules, with the EVM module, and with a web3 interface for running smart contracts. But the EVM module will also exist as a library. The EVM module as a library will allow you to deploy your own Cosmos chain with EVM support. Add in other SDK modules in whichever combinations and parameter choices you like, and choose whatever token and economic model you want.
00:13:59.820 - 00:15:15.662, Speaker A: The Ethermint chain will also be launched with a term you might have heard, the hard spoon. What's a hard spoon? A hard spoon is to copy the token distribution, including multi signatures, from another chain, onto a new chain. So in particular for Ethermint, we're planning to copy balance, subject to approval by cosmosub governance, to copy balances from the Ethereum chain, possibly also atoms from the cosmos chain, and use that to seed the photon token, which will be the native token on Ethermint. Ethermint will have we plan, shared security with the Cosmos hub, meaning that anyone who wants to attack Ethermint would have to pay the combined cost of attacking two blockchains. Of course, this will all need to be approved by Cosmos hub governance, so we're focusing on building the software to enable hard spoons in any configuration you want, or maybe even a hard spork, which dices up state and rearranges it. But we do expect to propose this particular plan, and we expect photons will be accepted as a fee token on the hub, which is super important for user experience as I'll get you later. So Ethermint is a blockchain is designed to be like Ethereum one chain for many EVM applications at once.
00:15:15.662 - 00:16:04.990, Speaker A: We'll hard spoon account balances so users can start out with tokens to start using the chain. Ethermint will be a sovereign chain having photons. You don't need anything other than photons in order to use Ethermint. It will also have the governance, staking and slashing modules from the Cosmos SDK using tendermint consensus. It will be fully web3 compatible so you can use truffle metamask solidity all your existing tooling. Change a drop down slider on metamask and connect to Ethermint instead, and it will have IBC connections to the Cosmos hub and to future zones which will inhabit the Cosmos network. The EVM module for SDK zones provides some different trade offs, so in this case you could elect to deploy a Cosmos chain which includes some of our base modules and some modules of your own, and also an EVM module.
00:16:04.990 - 00:16:46.154, Speaker A: You could even add our web3 interface if you want. This means you can utilize existing solidity contracts as part of the logic on your new application specific blockchain. And it means that if you're trying to port an application which was previously targeted towards the EVM to an application specific blockchain, you can do it gradually. You can start out with your solidity code, perhaps deployed to an EVM module, and you can replace the performance critical parts of that code one at a time out with native code. Maybe all the way, maybe not. But we come to a problem. What if we do that? You launch a new application specific blockchain, but now your users are split, or your potential users are split.
00:16:46.154 - 00:17:42.266, Speaker A: Some people are on Ethereum, they have state on Ethereum tokens, collect crypto collectibles. And some people want to start using the new Ethernet chain. We need a way to connect them. We need a way to transfer state and assets in a two way bridge where it's possible both to deposit, if you will, from Ethereum onto Ethermint or onto a sovereign zone with the EVM module, and to withdraw from the sovereign zone back to the Ethereum main chain. Then you can select which parts of your logic are most improved by the new features of Tendermint and the SDK, and put those on Ethermint, or put those on the sovereign chain and allow your users to retain assets or wallet balances at least for a little while on Ethereum. How do we do this? We've developed at Cosmos a technology called inter blockchain communication, which allows for this kind of generic two way bridge. In order to bridge Ethermint to Ethereum, we need two separate IBC connections.
00:17:42.266 - 00:18:31.738, Speaker A: We need one IBC connection between Ethermint and the Cosmos hub, which is a blockchain that we're launching soon. And we need another IBC connection between the Cosmos hub and Ethereum. Then tokens can flow through those two connections so someone can deposit from Ethereum some ether. That Ether will head over the IBC connection to the Cosmos hub, and then it will be bounced on from the Cosmos hub to Ethermint, where it can be used in smart contracts operating on the EVM module on Ethermint. What does this IBC bridge allow for? The answer is pretty much anything. IBC is payload agnostic, so it will take some byte string from one chain to another or across two bridges from Ethereum to Ethermint. Then IBC modules on Ethereum and on Ethermint will expose this primitive to contracts.
00:18:31.738 - 00:19:23.998, Speaker A: So you can write contracts which transfer tokens, which transfer assets, or which do much more complicated things like execute cross chain dependent smart contract logic or move code between chains. Hopefully this will allow Dapps to put parts of their logic that are most fee sensitive or most time sensitive in execution speed on Ethermint and leave some parts on Ethereum for existing. Dapps we think like I said, this is super compelling. You can move parts of your contract logic over time. When you need to execute an expensive transaction, you shift over to Ethermint and the UX for users can be pretty seamless abstracted over in all the web. Three tooling. A particular example would be porting a Dex porting a decentralized exchange protocol like Xerox or Wyvern to an ethermint zone.
00:19:23.998 - 00:20:28.946, Speaker A: So you could copy the protocol contracts onto Ethermint, deploy them to the EVM module, get them running, then allow users to deposit tokens over the IBC bridge or even non fungibles from Ethereum to Ethermint. Once they're deposited to Ethermint, they can be used and traded in the stacks and kept there indefinitely if you like. And if users want or want to have the option to withdraw back to the Ethereum main chain, they can do so with no permission on your part. You could also implement a DAX as a sovereign zone using the EVM module with the same initial starting procedure of porting the contracts from solidity and deploying them onto the EVM module on the sovereign zone, but then you could add some improvements. First of all, you would have no competition for block space. So if you run a sovereign chain for just the DEX, only your Dex's transactions would be settled there. You could prevent anyone else, any cryptokitties hit of the month, from crowding out your block space and making it expensive for your users to trade.
00:20:28.946 - 00:21:13.406, Speaker A: You could also start porting parts of the DeX protocol, probably trade settlement execution the super gas expensive parts to native code as SDK modules, which would make it much cheaper. And you could change more complex things. You could alter staking mechanics, maybe add new slashing conditions to prevent front running, or implement alter the state machine, implement threshold decryption so the transactions are encrypted when they're submitted to the blockchain and decrypted later so no one can front run on the decks. All of this is possible if you have a sovereign zone. So what's the state of all of this? Ethermint is not vaporware. You can find it on GitHub. Development is progressing exceptionally quickly, worked on by Bez, who's sitting in the audience, and by Alexey, who will be giving a talk tomorrow.
00:21:13.406 - 00:22:02.754, Speaker A: We're anticipating a developer preview release which will have a functional or 99.9% functional web3 API by the end of Q four this year, and which will allow you to deploy solidity contracts to the EVM module and play around with Ethermint. And we encourage you to check it out. Send us feedback, tell us what you would like, tell us what the challenges facing this kind of application deployment process are. There are, of course, many questions we haven't answered yet. We're not quite sure how contract balances ought to work in proof of stake there are lots of contracts, say, on the Ethereum main chain right now which hold a lot of ether. Should they be able to delegate? What happens if they get slashed? What happens if you deposit your tokens to a Dex contract? That Dex contract delegates, then they get slashed? Are you responsible? Maybe we want to figure that out.
00:22:02.754 - 00:23:12.874, Speaker A: We haven't decided what the exact token models for fee only tokens since we have delegated security ought to be will they be the same or similar as proof of work rewards with a declining exponential? Maybe they will be flat 500 tokens per hour until the end of all time. Lots of opportunities to experiment, of course. I just went this morning to the Ethereum 2.0 talk, which was super interesting, and I haven't had a chance to update this slide, but it sounds like they're now switching to a version of proof of stake, which will provide very fast finality, which we're thrilled about because it will allow even faster IBC connections from Ethereum 2.0 to Ethermint to Cosmos to any other chains which implement this kind of interchange protocol. So first, my pitch, or ask is that you head on over to Cosmos network devcon four, fill out the survey, maybe mention that you came to this talk, ask us any questions, and that you head on over to our booth for a chance to win a sweet Cosmos hoodie. But even more importantly, ask us questions about Ethermint, how you can use it, what we're up to, how we can help, any questions? Thank you very much.
00:23:12.874 - 00:24:21.470, Speaker A: We have five minutes for questions. When is Ethermint going live? When is Ethermint going live? When is Ethermint going live? Excellent question. So we anticipate developer preview release at the end of Q four, and then the actual deployment of Ethernet will be up to Cosmos hub governance. So that might be you. If you're voting the development of the bridge between the Cosmos hub and the Ethereum main chain fully specified, partially implemented, you can find the spec on the Cosmos SDK GitHub repository, and you can also find a prototype implementation. Are you planning to support inter blockchain communication with chains that are not part of Cosmos? Yes, absolutely. The spec for our IBC is already open source, and we encourage anyone to contribute, and we absolutely encourage people who are not cosmos chains, not using tendermint, not using the SDK to implement that protocol.
00:24:21.470 - 00:24:58.902, Speaker A: How portable is your EVM? Can I use it from, for example, a hyperledger project or something else? It will depend a little on the project. If the project doesn't go, it will be super easy. If the project is not on go, it will be slightly harder, but still possible. If you deploy an EVM module. Is the idea that you would restrict what contracts can be deployed into that blockchain? Essentially. So you're not competing for resources with other contracts that your users? Yes. So you could deploy an EVM module and not allow contract deployment at all after you've launched the blockchain, which might be what you want to do in a sovereign zone.
00:24:58.902 - 00:25:34.902, Speaker A: Or you could allow limited contract deployment to require that it be approved by the validator set or something like that. Cool. Sorry if I missed this, but can you memorialize the ethermint state on the root chain? So, for example, you could use the sole EVM to invalidate state transitions on the root chain. Is that possible? That is an extremely interesting question. In principle, yes. Cosmos IBC model doesn't have that doesn't need state fraud proofs to work necessarily. But if you wanted to implement something that did, or you just wanted them anyway for extra security, I think that wouldn't be too hard.
00:25:34.902 - 00:26:18.850, Speaker A: The EVM is spec compliant, so if you have a spec compliant interpreter on insolidity on the Ethereum main chain, it should work. Hi, if I want to make a transaction between two blockchains built with Cosmos SDK, do I need atoms? Oh, right, thank you. I alluded to it and then forgot to answer that question, so thank you for asking it. That's one of the reasons we think the photon hardspoon is super compelling, because it will make that unnecessary. Because if photons are accepted as a fee token on the hub and on Ethermint, then users can transfer assets over both of those IBC bridges without needing to acquire any new tokens. Last question I'm curious what the user experiences like when you're moving across these chains. We hope that it will be seamless.
00:26:18.850 - 00:26:33.810, Speaker A: It's not going to be seamless at first, but it's possible in principle to abstract over most of the transactions. And because IBC already provides this cross chain state verification, you can basically pay fees once and cover all of the transactions.
