00:00:13.690 - 00:00:44.646, Speaker A: So we're going to kick things off. Thanks, everyone, for coming. My name is Ryan. This is Mike. We work for the Rimble team at Consensus, and we're going to be talking today about about transaction states, specifically the UX of transaction states. We don't have much time to go into what Ruble is right now, but if you're interested, scan the QR code, go to our website or follow the link, I guess, to set the scene of why we're talking about this today. Our main user group are developers.
00:00:44.646 - 00:01:32.330, Speaker A: In the space, we build components and write guides to try and help DAP development get quicker and sort of improve UX at that level. So we speak to a lot of developers, we do a lot of research, a lot of interviews. And something that came up sort of again and again as a pain point for developers was transaction states and how to design them effectively. So instead of wanting to sort of theorize around what might potentially make good transaction state UX, we thought we try and uncover the secret to transaction UX by rolling across these, getting our hands dirty, going out into the field, doing some research, led design. And this kind of reminded me getting out into the field with the hands dirty of a childhood hero of mine. And there's no beef for guessing who that might be. It's Indiana Jones.
00:01:32.330 - 00:02:45.410, Speaker A: So we're going to use Indy to sort of help us talk through some of the main problems around transaction jacks. So, first off, no ETH, no transaction. So what happens if a user trusts a transact but doesn't have the required funds? How do we help users get ETH? And how do we educate them on why it's needed? And the fact that you need ETH to pay for fees can leave a bit of taste. And although transaction fees might be normal to your eye, this is something that's quite often unexpected, a little unsettling for new users. Transactions can drag. So compared to the sort of web two experiences we're used to, when a transaction might take sort of minutes, hours, even days, how can we help communicate what's happening to users? And on that note, how much should we actually explain about what's happening? How much should we be explaining about why it's taking that extra time? How much of the blockchain in general should we be showing to the users? And how much should we leave behind the scenes? Cherry on top of the cake is that of course they're irreversible. So that's quite scary, especially for new users.
00:02:45.410 - 00:03:45.814, Speaker A: If something goes wrong, there's no chance to call customer service, get things changed, and we don't want that leading to transaction regret, or even worse, ethereum regret. Regret where people end up leaving the ecosystem and sort of giving up altogether. And this leads to an interesting sort of dilemma we come across quite often around the notion of education. So this dilemma of do users know what they're doing. And if they don't know what they're doing, are they incentivized sufficiently to go and sort of educate themselves and make their best effort at it? So that's some of the main problems. And we completely understand why this is such a sort of big issue and such a pain point, but I think it's important to also talk about the opportunities for sort of spending more time on designing transaction states. And hopefully this will convince any teams out there to maybe sort of pick this up as a priority after they leave.
00:03:45.814 - 00:04:48.620, Speaker A: A sucker. Bear with me. So first up we can talk a little about a little bit about some of the behavioral science sort of justifications in doing some of this. The first up is the halo effect, so that's if it's horribly complicated to set up an account for a service and that bad user experience will rub off on people's expectations for the rest of the service. Now this quote references account creation, but you can certainly sub in transactions and still have the exact same meaning. So if your user is exposed to some really bad copies, like this for example, it doesn't really explain what to do, why you need to unlock a token to sell it, have this sort of quite confusing approval function in the wallet. It's going to create a bad experience even if your DAP has the coolest tech out there, if it has the smoothest connecting the wallet experience.
00:04:48.620 - 00:05:30.440, Speaker A: I think a great analogy for this is the Kingdom of the Crystal Skull movie, which one bad movie has tarnished the reputation of an entire franchise. The peak end rule is very similar. So this is a cognitive bias that impacts how people remember past events. So these intense positive or negative moments, e g peaks and the final moments of an experience at the end are heavily weighted in our mental calculus. Transactions are doubly important here. They quite often represent the sort of end part of an experience with a DAP. And again, they also have a very high likelihood of being either an intense positive or intense negative experience.
00:05:30.440 - 00:06:17.958, Speaker A: So again, this could really sort of again, if you have the nicest DAP leading up to the transaction, then it's going to really impact how a user remembers your DAP and erode that sort of trust that you might have fostered up until that point. I'm going to shit on smoothie again. But that fridge theme coming at the end of the movie, coming at the end of the franchise has certainly tarnished that for me. Okay, Millie, now right, users don't even trust Web Two either. So in a study conducted by Baymart Institute in 2018 for Amazon, they found that 28% of users abandoned their tasks because of complicated checkout UX. Now that study also found that the main reasons for that abandonment was an overuse of jargon and a lack of visual design. And I think at the moment.
00:06:17.958 - 00:07:17.160, Speaker A: Obviously in this experimental phase of Ethereum and DApps, this is quite often the case in Web Three applications as well. So again, a really good opportunity to sort of spend some more time thinking about the design of transactions and make that reduce that abandonment and increase that trust in your debt. Okay, so we've spoken about some of the problems, talked about some of the opportunities. We're going to show you a quick demo in a minute. This has sort of come out of the sort of research and the design exploration I mentioned earlier. We spent the last two months speaking to some Savvy blockchain users, some not so Savvy, to try and understand what that secret source to transaction UX might be. Just to caveat slightly, we focus mainly on DApps that might be trying to appeal to a more mainstream audience and try and reach that sort of outside this bubble that we operate in.
00:07:17.160 - 00:07:26.460, Speaker A: So the demo is for potentially a DevCon application where you might be able to purchase your tickets as NFTs. So Mike's going to talk us through that.
00:07:28.270 - 00:08:07.670, Speaker B: So, like Ryan said, we build a lot of demos for user testing. For this one. We're using open Zeppelin's ERC, 721 contracts. We're using Truffle for the contract management and deployment. And then on the client side, we're using Drizzle to keep the Blockchain data in sync with the client side. And we're using our own component system, Rimble UI, and some Web Three components that we built just to keep things easy and fast for us to build. And then we're extending Drizzle with third party data that comes from just regular API services.
00:08:07.670 - 00:09:11.034, Speaker B: We're using E gas station's API to get a gas estimate that we can use to calculate a transaction fee and an estimated wait time based on just like what the average price of gas is going to be right now. So we're using those two kind of key important pieces of information on the UI here. The transaction fee is what we're calling it instead of talking about gas, and we're estimating that just based on what method the contract is calling and the average price of gas at the time, and then same for the estimated wait time. We can just kind of see how long transactions are taking at a set gas price and we're just assuming things and we're just kind of guessing for the most part. Obviously, users can change how much gas you're paying per transaction, but just giving that expectation up front is really helpful. So I walk you through a quick diagram. Also another technique that we're using here which is trying to keep Web Three away from the user as long as possible.
00:09:11.034 - 00:10:09.360, Speaker B: We don't want to hit somebody right off the bat with a connect dialogue or we don't want to minimize functionality of the DAP until they've done some sort of proof that they are on chain or they're connected to blockchain. So once the user has expressed an intention that's when we start doing our pre flight checks for making sure they're in a modern browser, that they have a connected wallet, that they're on the right network. Once we're sure those things are good, we can check their balance. We could run a simulation on the call that they're doing to get that transaction fee, then we can check their balance to make sure that they're going to have enough money for what they're trying to buy and the transaction fee. And then we can give them steps right there to even prevent them from even starting a transaction that we know is not going to work. So once we have all that, we'll give them not relying on the Wallet UX is also something that we're big believers in. So we want to show the user before or right at the time of the transaction, like as much of that information as possible.
00:10:09.360 - 00:10:40.700, Speaker B: So once we've given all that data over to the user, they can make the informed decision to be confident that what they're doing is actually going to work and it's going to work the way that they expect it to, and then they have an idea of how long it's going to take. So we'll just go through the ad and it's basically like they'll get errors along the way if there's any problems that will help them remedy. And then we finish it up with a summary of the transaction details that tell them exactly how much it costs and where they can get more information either linked to Etherscan or OpenSea or something like that.
00:10:43.230 - 00:11:22.870, Speaker A: Thanks. So I'm going to dive a little bit deeper into sort of some of the more actionable tips that came out of this research and this demo. So I think the first lesson that we came up with was to not rely too much on Wallet UX. A lot of DApps out there sort of think, oh, the wallet can handle the transaction, we just need to get the user up to that point. The issue here is that wallets can't be specific. They're naturally designed for lots of different use cases within the DAP itself. You can talk much more clearly about the task at hand that the user is trying to achieve, which should help reduce the sort of cognitive load on the user.
00:11:22.870 - 00:12:08.614, Speaker A: So for example, we talk about the fact that once the transaction started is the process of the ticket being sent, rather than just sort of generic your transaction is pending or progress. This is specifically important for error messages. So you might be familiar with seeing sort of just generic insufficient balance messages in some of the wallets you might use. This doesn't really help new users or less confident users to actually help Sorry get back on track with what they're trying to do. That assumes a lot of preexisting knowledge, which not all users are going to have. So again within your DAP. You need to be able to make that effort in order to help users get past this obstacle and talk again in context of what the user is trying to do.
00:12:08.614 - 00:13:22.030, Speaker A: So you're not having enough transaction fees in order to pay for your ticket in this instance. Second lesson is around prevention. So we spoke previously about the irreversibility of blockchain transactions, so it's super important to be sort of anticipating and designing for these sort of end user errors that might occur. So that could be like passive UI, such as the indications in the top right corner about the wallet the user is using, what their balance is, so they don't try and transact with an empty wallet, but it also might be actually intentionally designing some friction into this process. So kind of it's weird to say this, because we're quite often told to be reducing friction, reducing clicks, reducing the nature of irreversibility. We felt it was important to give the user this final opportunity to double check everything written in a language that they understand compared to a wallet, which will be more technical and less specific doing. And we actually feel this is like a super important way that a user can check that everything was correct and they could be 100% confident transacting.
00:13:22.030 - 00:14:01.430, Speaker A: Thirdly is to set user expectations. So I guess the main places you want to set expectations here are around fees and time. So again, on this sort of checkout screen, we reference the transaction fee and the time. I think it's important to reference the fee before the wallet. Again, this prevents it from feeling a bit like a hidden fee, which might end up, eroding, trust in your DAP. And I think a lot of the users we spoke to didn't have really great knowledge of what a transaction fee was. So again, it gives you an opportunity to sort of give that sort of explanation.
00:14:01.430 - 00:14:55.594, Speaker A: For users that don't understand, there seems to be quite a general misconception that transaction fees go to the DAP teams themselves instead of the network, which obviously isn't going to help their understanding what's going on. Also the estimated wait time. So Mike explains how we sort of go about providing that to the user. I think that's really important, that although users may not mind the wait, they don't like being left in a sort of limbo where they're not sure how long it's going to take. So I think it's really important to provide this information up front so they can better plan what they might want to do next, whether that's going off to complete some other tasks or sit and wait and watch the transaction go through. The most important thing we want to do is give us a ballpark figure, at least. So that instead of just a sort of static message or like a spinner, as we heard that some users felt or thought that meant their transaction may be timed out.
00:14:55.594 - 00:15:40.386, Speaker A: That obviously result in the user trying to initiate the transaction again, which we also don't want to do. Happen. So that will incur another transaction fee cost or an error. Lesson four is to provide just enough feedback. And I think that the message here mainly is just because you can get that information from the blockchain, just because you can sort of poll and find out when the transaction is in the mempool, it's being mined, that doesn't mean the user wants to know that or at least doesn't mean the user doesn't want to know up in that way. So we liken this experience that we demoed to. Like if you purchase a movie on Amazon or something, you purchase it, it gets downloaded from the cloud onto your device.
00:15:40.386 - 00:16:37.260, Speaker A: Now you don't get a play by play of exactly where that content is in the sort of the journey that it takes down to your device. And that's because a user just wants to know, okay, has that process started? Is it happening as expected? And when it's finished, essentially, and we found that a lot of the users that we sort of put this in front of didn't sit and watch the transactions go through anyway. So it's kind of redundant to waste time crafting those messages about when the transaction has left and then pulled, et cetera, et cetera. Finally design for the next step. So we talk a lot in Web Two about post purchase experience. That's not as applicable in Web three, necessarily, where we have less marketing channels where you might have success confirmation emails. So I think the transaction transaction success message is like a really good opportunity to do that.
00:16:37.260 - 00:17:18.390, Speaker A: And in order to design a successful post purchase experience, you really need to know what the actual end goal that your user has. So for example, in our demo, the end goal wasn't to just complete that transaction, the end goal was to go to the conference. So this message is crafted in a way that explains to the user what they need to do once the tickets met their wallet. It also anticipates that the user may have been buying the ticket on behalf of a friend or colleague. So again, you get this springboard button at the bottom here, which is like gift your ticket. So you're anticipating what the user might want to do next and helping them achieve that problem. And again, assuming they have the knowledge to be able to go into their wallet, send the NFT to a friend or colleague.
00:17:18.390 - 00:17:52.020, Speaker A: And I think this is a really good opportunity to support the ecosystem more widely. A lot of DApps out there have interoperability in mind. So for example, if your DAP allowed you a user to generate dai, for example, let's not just have a message that's great, you've got your dai. Why don't we say, great, you've got your dai, go earn interest on that. At compound there's a really good opportunity to sort of cross pollinate, I guess, users between the DApps out there. We're all working towards a similar vision here. I'm just going to hand back over to Mike in just a second.
00:17:52.020 - 00:18:27.470, Speaker A: I can't believe you saw my desktop. So a lot of this doesn't sound too novel, might all sound quite familiar, and I think that's the case. We don't necessarily need to be reinventing the design or the UX wheel for Web Three. I think we might just need a bit of a collective nudge to sort of remember some of the lessons we already familiar with in Web Two. So I'm just going to pass over to Mike to talk a bit about what some more technological advancements in space currently might mean for transaction UX.
00:18:28.450 - 00:19:30.894, Speaker B: So we went through traditional transactions and all that being said, it's great that we put time and energy into figuring this stuff out, but honestly, if you can get away with not dealing with these problems, that's the best design solution. So if you can abstract gas away, if you can get rid of transaction fees, if you can make transactions happen faster and that's within your capabilities, absolutely do that. So Metatransactions is one example where you can just pay the gas on behalf of your users. Something like the gas station network or the Metatransaction relay that lets you pay for users gas would get rid of one of the problems and friction points L2 solutions side chains, child plasma chains like Loom and POA. They're great, they're fast, they have really basically free transaction fees. So again, you're not having to even deal with the whole transaction issue. Design with the developers from the very beginning.
00:19:30.894 - 00:19:54.650, Speaker B: So when you're architecting your smart contracts, use a proxy pattern that lets you chain multiple steps together into a single transaction for the end user. There's future things coming, state channels, DK starts that will also let you do things off chain. Again, if you have the ability and the time and the skill to get rid of transactions from even happening, that's the best way to deal with transactions.
00:19:56.910 - 00:20:23.780, Speaker A: But that doesn't necessarily mean that our advice belongs to the museum. So just to recap, because I think the overarching heuristics and the sort of the foundation behind all this advice is still very much, still very much applies. And that's to always communicate with context. Be specific about what the user is doing, the tasks that they're trying to achieve. Plan for errors, anticipate errors, design error states. Help users out of the jam. Don't just tell them that it's happening.
00:20:23.780 - 00:20:53.882, Speaker A: Set the user expectations. So always try and keep them in the loop. Make sure that they're aware of any sort of nasty, potentially nasty surprises such as fees or long wait times. Provide just enough information. Just because you can provide the content doesn't mean that you should try and think about the actual information the user needs at the time in order to progress through whatever journey of flow you're designing. And remember, next steps, try and avoid dead ends. We don't want the user to be sort of okay, great.
00:20:53.882 - 00:21:08.670, Speaker A: Well, but I'm lost. I don't know what to do next. So consider next steps. Whenever you're designing a flow, there's probably another step afterwards. And that's it. Again, if you're interested in finding more about Rimble, scan the QR code. There's our Twitter.
00:21:08.670 - 00:21:10.300, Speaker A: Thank you.
