00:00:14.410 - 00:00:59.790, Speaker A: Hi everyone. My name is Felix. I'm working with an awesome team of people at Cowswap and I want to talk to you today about how we can design fairer trading mechanisms Ethereum. And I want to frame this vision based upon an idea of just having a single price per token per block. And we'll explore a little bit of why we think this is the most fair way of trading on Ethereum. The reason why we're talking about this is if we look at main adoption of decentralized trading we can see we've made some progress in the last couple of years but we are just seeing the tip of the iceberg here. Even digital asset trading as a whole, including centralized exchanges, is many times larger than Dex trading today.
00:00:59.790 - 00:02:11.750, Speaker A: And when we want to get into more interesting markets like the US securities market or maybe the Holy Grail of trading, global foreign exchange trading, then we really need to step up our game. And I think personally that Ethereum has as this credible neutral settlement layer the potential of enabled trading of all different parties across nations, supernatural actors. So I really think this global foreign exchange trading is a goal that we can strive for. So to talk about how we get there, let's first revisit a little bit the brief history, honestly that we had in the context of decentralized exchange trading. And I want to frame this history based upon an article from Alvin Roth who is an expert on market design and won a Nobel Prize in Economics a while ago, who wrote this essay on necessary requirements for a market to function in Harvard Business Review a while ago. And he mentions three properties that a market needs to at least fulfill in order to function properly. The first one is a good market needs to be thick thickness, just meaning that there is enough liquidity that when a buyer and a seller come, or even just one side of them, they can actually interact.
00:02:11.750 - 00:03:07.310, Speaker A: The second point that I will put a lot of focus on is what Alvin calls safety. And by safety he means the market has to incentivize its participants to truthfully reveal their preferences. They shouldn't be holding behind the Bush and Haggling and kind of hiding their true preferences but instead be incentivized to commit them kind of openly. And then the last point touches more on the scalability aspect, which I will not go into much detail here because we know Ethereum as a whole is focused on getting scalability done. And we have all these great talks at this conference about Zkvms Sharding. And so the hope is that with Ethereum figuring out scaling, we can basically piggyback on that scaling for dex trading as well. And so if we look at how everything started a couple of years ago, the first DEXs on Ethereum were Ether Delta IDEX or asus basically on Chain Limit order book DEXes.
00:03:07.310 - 00:04:04.406, Speaker A: And those worked fine for some token pairs like Etherustc maybe worked quite well. But they had a fundamental flaw which was that they required active market making participants to constantly update the quotes and the bids and basically keep the market flowing, keep the market in sync. And with the explosions of tokens in the space, it made it very difficult to bootstrap markets for new token participants or for new pairs. And so what the problem with on chain limit order books was that it was just eventually very hard to create thickness, create thick markets. And this is where AMMS came along. AMMS really solved the problem of liquidity provision and allowed every one of us to become a liquidity provider just by staking two assets into a smart contract that would then automatically sell them on our behalf based on some curve, based on some preference curve. And all of this started in the context of prediction markets.
00:04:04.406 - 00:04:56.042, Speaker A: Way before blockchains were born, robin Hansen had a paper on logarithmic basically AMMS. And then in the context of Ethereum, we had many different teams pioneering more or less complex functions. Everyone of course knows x times y equals k. But really the key thing that AMMS brought to the space was overcoming the liquidity bootstrapping problem and creating thick markets even for long tail tokens. So what's the problem with AMMS? The problem with AMMS and again, we have heard many talks about this at this conference is mev, or how I will call it in this presentation, pay as bid pricing. And pay as bid pricing comes from the fact that what you're seeing on, for example, uniswap, if you're trading some tokens, is not actually what you are sending into the mem pool to be executed. This is a trade that actually happened a couple of weeks ago.
00:04:56.042 - 00:05:48.140, Speaker A: Somebody was selling $1 million on Uniswap and probably saw in the UI that they would get 750 E. But the thing that you need to add on Uniswap is a discount to the current fair market price, which is referred to as slippage tolerance. And you can think about slippage tolerance as basically how much volatility are you willing to accept in order for your trade to still go through. Blockchains are asynchronous by design, so there's race conditions. And so the moment you click swap on Uniswap, somebody else might also be clicking swap somewhere else and therefore you need to price that volatility tolerance or slippage tolerance in. Now, the problem with it is if your trade is large enough, if the slippage tolerance is large enough, the block builder proposer, validator, miner, call them what you will, has an incentive to actually manipulate the prices and execute your trade exactly at your bid, at the bid that includes your slippage tolerance. And so this is what happened here.
00:05:48.140 - 00:07:10.526, Speaker A: This person got sandwiched and lost $10,500 to the in this case, this was after the merge to the block producer or validator. And so this is really what makes AMMS fundamentally unsafe by design? The fact that you cannot be honest about your slippage tolerance. You basically have to lie to the AMM and say, hey, just set this small slippage tolerance because I know if I really tell you what I'm willing to accept, somebody is going to sandwich me and run over me. And so maybe to go a step back and revisit why is it important to have a safe mechanism design here a safe market? The first reason is that safe markets are just fundamentally simpler to reason about and make conclusions that basically the system is secure and that the allocations is optimal and you find the right answer. The second reason why safe markets are better or important is that they are fundamentally more efficient than unsafe markets. Because if users are incentivized to reveal their true preferences, you can just look at the preference and find the globally socially optimal education in one round trip rather than doing multiple bids and asks and basically haggle around the table. And then the last point is maybe a more altruistic argument that safe markets are just fundamentally fairer to the least sophisticated participants.
00:07:10.526 - 00:07:51.620, Speaker A: Tyrone was talking about stealing from grandmothers. I personally think more about people that visit Reddit and find a new coin and then go on uniswap trying to trade it and basically get wrecked. And yeah, the least sophisticated participants are automatically protected in safe markets. And so I agree with Maureen O'Hara who's a professor at Cornell, who says, especially on this problem of mev, that blockchain is not going to succeed if it's not viewed as fair. And so let's revisit the slide that we saw in the very beginning. If we want to get larger market adoption, we need to design fairer and safer market mechanisms. So how do we build safety on top of AMMS? This is what the second part of this talk will focus on.
00:07:51.620 - 00:08:39.294, Speaker A: The first thing that I want to kind of revisit is what we think is probably the fundamental root cause of most of the mev that's out there, maybe even all MEB. And that is that a single asset today on ethereum can have many different prices within the same block. Here's an example block from, I think, a week and a half ago, where the most liquid pair that exists on ethereum, ETH USD, was traded eleven times within the same block and at eight different prices, the difference between the lowest and the highest price in this block was more than 1%. And imagine the block really just happens at a single moment in time. That's what blockchains do. They freeze kind of the state of the world in a specific instant of time. And yet that instant of time told people, well, there's eight different prices for the most liquid pair.
00:08:39.294 - 00:09:22.442, Speaker A: And for example, latency arbitrage. When you see a price change on Binance and you try to arbitrage it away against an AMM, that is an example of mev. That comes from one asset having multiple prices, because the first person that gets to trade in the AMM still has the outdated price available, and then everyone else in the block trades at the fair market price. We have one asset, many prices. The reason that liquidations cause mev is because that whoever triggers the liquidation gets to trade at a discount, whereas the rest of the market trades at a different price rather than using the liquidation volume and put it into the fair price finding and just settle everything at a single price. And then the last point, the sandwich attacks we saw on the last slide is very obvious. There was three different prices the opening, the victim and the sandwich.
00:09:22.442 - 00:10:05.338, Speaker A: Again, one asset, many prices. And that's why we have MEB. So I argue that any market structure where prices depend on arbitrary, the block producer can choose it basically at their own will. That arbitrary interblock ordering just makes these mechanisms unsafe by design. And so what is the solution? Well, you might have guessed it from how I've started this chapter, but the solution is to just have one price per token per block. And so how would this look like? We basically associated with every Ethereum block, have a price vector for every asset that is traded in the block. And that asset just has a single price at which it can be accessed within that block.
00:10:05.338 - 00:10:58.858, Speaker A: And this price here is denominated in dollars. It could theoretically be nominated in any currency you'd like. But the idea would then be that the participants that are trading in this block would be trading according to this single price clearing. So if you're trading ETH against Bitcoin in this block, you can basically get your exchange rate by just looking up the two values here and that defines what is your exchange rate in this block. And so this idea of uniform price clearing is very tightly coupled to the idea of not executing trades sequentially one after the other, but batching them together and executing them in one single batch. So now I want to talk about how we at Cowswap have built a batch auction system on Ethereum. We've been live for a year and a half now and yeah, you can actually achieve this with everything that Ethereum offers today in just six simple steps.
00:10:58.858 - 00:11:56.010, Speaker A: The first thing that we need to do is we need to stop people from sending raw Ethereum transactions because that's just a fundamental limitation of the protocol layer today. When a user signs a raw transaction, you cannot open up this transaction, batch it together, do anything with it, the user signed it, so it has to be executed as is. But trading can also be done on an intent based really what you do when you sign a transaction on uniswap. You're just saying, I want to sell token A for token B at a specific limit price and so what we do is we collect user trades as trade intents rather than as raw transactions and we collect them over many different token pairs. So we basically have this multidimensional order book of signed trade intents which we then combine with the entirety of on chain liquidity that exists on Ethereum today. So all the AMMS you know about, all the RFQ systems you know about and that together creates a thick market. We saw earlier that AMMS are really responsible for the thickness.
00:11:56.010 - 00:12:58.270, Speaker A: And so by adding user orders to that liquidity pool we have the first criteria which is a thick market. We then go ahead and now trying to find a settlement in which ordering doesn't make any difference, in which at least all user trades are executed according to one single price clearing vector where each asset just has a single price. And so basically we want to find a uniform price clearing and we also need to find a concrete execution path. So basically meaning where do the tokens flow so that demand and supply equal basically that we reach an equilibrium. In this case, for example, the maker token that the first user wanted to sell would flow directly to another user. That user would sell their USDC maybe on curve to die and then give it to the third user. And so we can, in so called ring trades mix and match AMMS together with direct peer to peer trading with the only basically the only the only constraint that everything has to happen, at least everything between those hands has to happen at this uniform price creating.
00:12:58.270 - 00:13:44.702, Speaker A: Now, the problem is that this poses a pretty hard optimization problem. It's basically an NP hard problem because we're acting over multiple dimensions, not just on a two dimensional order book. But this problem can be quite well approximated or the optimal solution can be quite well approximated if we just maximize the total user surplus. User surplus is basically the price improvement you get on the user's limit price. So if a user was willing to buy Ether at one $300 and you were delivering it at 1250, you would have given $50 of surplus to that user. And if we sum all the surpluses up together we get one value which we can optimize for. And by having this optimization criterion we can now dispatch this hard problem to a network of what we originally called solvers.
00:13:44.702 - 00:14:42.822, Speaker A: Now we are starting to call it batch builders who are basically tasked to try to find the most optimal solution to this problem. And they could employ very different strategies or heuristics here we saw the settlement from the previous slide. But you could have a solver that just goes and tries to settle every single user trait with the most liquid AMM on that pair. But by virtue of having this approximation criterion or optimization criterion, we can now rank the different solutions and find the one that settles the user trade at the best possible price and then that solution will get chosen and the proposer for that solution gets a protocol reward. And so we kind of moved into a consensus scheme where the leader selection is not based on work, not based on stake, but based on optimality. The UI looks very much similar to what you might be used from your favorite AMM front end. But here's an example of a batch that we saw, I think around 20 days ago where two users were trading in the same.
00:14:42.822 - 00:15:28.718, Speaker A: So we can see there's one high level Ethereum transaction, but in that single transaction, we have two people trading two trade intents. So we have one person that is selling the manifold token and another person that is buying the manifold token. And the first thing to notice here is that both people were executed at the exact same clearing price. Whereas if they had gone through a more traditional Dex mechanism, one of them would have to go first and get a different price than the second one. In this case, it was actually better to be the second because the trades were against one another. So you want to first have the other person move the price in your favor and then trade. But basically by matching those at a single uniform clearing price, we moved all the games that the people in the batch could have played against one another and made the system more simple, fair and safe to reason about.
00:15:28.718 - 00:16:22.598, Speaker A: The other thing that is cool is that because these tokens were traded exactly in the opposite direction, which is what we call a coincidence of wants. You want the exact opposite of what I have. We actually saved about $40,000 in trading volume that we didn't have to send to Uniswap and SushiSwap because it could be settled directly peer to peer. So here we have one person buying 40,000 USDC and one person selling 48,000 USDC. And so in this specific example, we actually not only got fairer pricing, we also got a structural price improvement that only batching people together and trading people peer to peer can accomplish. Because we saved so much money that didn't have to go to the AMM. We saved about $800 in reduced LP fees, and we also saved about $1,500 in reduced price impact, which stems from the fact when you trade against an AMM, you're moving the price up, and then when you sell against it, you will move the price down again.
00:16:22.598 - 00:17:36.446, Speaker A: And so this is how the solver competition I talked about is looking at the moment. As of last week, we had twelve solvers in production. As of this week, we have 13 solvers in production that are competing for finding the best solution. So we actually have quite a yeah, quite a heterogeneous landscape of different solver entities. And then there is an entire presentation from our data engineer Gent that was given at Depcon, which I highly recommend watching, which compares the performance of cowswap in terms of how much of the slippage can we actually give back to the user compared to other Dex aggregators in the space? And we can show that we have substantially better performance compared to some of the other Dex aggregators. So for the last couple of minutes, I want to talk a little bit about proposer builder separation or kind of the general direction I think that the ecosystem is taking with regards to mev and why that could be or why I think this is dangerous. And I want to start this by quoting one of my favorite columnists, the Money stuff, BBC writer Matt Levine, who is from time to time repeating that, well, crypto is in the business of constantly rediscovering the basic ideas of financial history.
00:17:36.446 - 00:18:35.022, Speaker A: And why I think this is true specifically for PBS, is, well, I'll talk about this in the next few slides, but you might have seen this graph before. This is basically trying to resemble the mev supply chain going from a user that wants to make a trade, and the trade being something like I want to sell USDC for ETH, opening their favorite wallet or opening their favorite DAP, which converts that trade intent into a transaction and sends that transaction and PBS to a network of block builders. The transaction will be something concrete like use uniswap to sell $1,000, for example. And then those block builders will try to collect transactions from a bunch of different places and propose a block to the actual leader of the consensus protocol, the validator for the next block. And so the validator is posed with a bunch of choices of blocks that they can pick from. And basically the block builders are bribing the block, proposer to accept their block by doing a max biding kind of war. This meme is from John.
00:18:35.022 - 00:19:15.998, Speaker A: I have to give credits. So how does a block builder actually get the money to perform this bidding? Basically, block builders try to extract as much mev from the transaction order flow they get and then pay back some or most of that in this max biding ward to the block builder. So what might a block builder do in order to get an edge in this game? Well, they might try to find deals with wallets to get exclusive access to order flow. If they are the only one who can extract value or even just pose this transaction for its transaction fee into the block that they propose, they have an advantage over other block builders. And so it could be that the flow just stops here. Wallets are starting to receive an extra income. That's nice.
00:19:15.998 - 00:20:03.286, Speaker A: They might take that. That would be very terrible for the user. Maybe in a slightly better world, the wallets will pay some of that returns to the user and maybe give the user something like free transactions or commission, free trading at least. But if we're in this world, then we've literally just reinvented traditional finance because the brokers such as Robinhood receive payment for order flow from market makers or wholesalers such as Citadel Securities, Jump, Jane Street, but it's just really a handful and then offer commission free trading to their end users. And I'm not saying that PFOF is bad. Actually in traditional finance there's arguments on each side. But what I try to stress here is that we've learned from traditional finance that this mechanism doesn't work in a decentralized fashion.
00:20:03.286 - 00:20:38.578, Speaker A: Market maker, there's just a handful of them, they're highly regulated. Without the SEC, users would be run over. There's basically this law that requires market maker to give people a price improvement on top of the official bid and ask that they see on Nasdaq and New York Stock Exchange. So you require regulation in order to make this market safe for the user. And it is just a centralized system. So if we really want to get ethereum to be this credible neutral sediment layer, we cannot reinvent this system and work with traditional finance. The other thing that I hear a lot is this narrative around mev maximization is great, we all have to focus on mev maximization.
00:20:38.578 - 00:21:40.074, Speaker A: Sure, we should minimize, but we need to maximize the shit of what's out there. And I just want to pose the question of these two philosophies. Mev maximization and minimization can coexist at the same time because at least in my mind, mev maximization leads to very dangerous incentives for the participants and creates an extremely hard coordination problem that mev minimizing protocols such as cowswap need to overcome. Right now we are in a you could think of a mev reducing protocol or an mev reducing builder to having to play a repetitive prisoner's dilemma where in the current status quo everyone is extracting mev. So everyone is making a little profit. If you now were a block builder that wanted to operate without the rent from mev, you would deflect from the extraction, but you would basically not get any rewards from mev and everyone else would get slightly more. And it would require the entire space, all builders, to cooperate in order to achieve a new equilibrium in which we'll actually, hopefully are all socially better off.
00:21:40.074 - 00:22:32.720, Speaker A: Definitely the people that are trading because they are not getting wrecked, but even the people that are validating. I'd argue that in this system can make much more money from transaction fees and just adoption. But really this requires all builders to cooperate, otherwise we'll not get into this new equilibrium. And what we see today is that basically everyone is focusing on the top left corner and the status quo is to fight over the existing MEB that's in there and potentially even fight against new entrants that are trying to propose MEB reducing protocols because basically that's eating the searcher's lunch. And so my call to action here at the end is let's not focus on mev maximization and split the pie that's out there because it's tiny compared to what we want to unlock. Let's work together and grow the pie and try to get Ethereum to the next order of magnitude of adoption. And with that, thank you very much.
00:22:32.720 - 00:22:34.862, Speaker A: There we go. All right.
00:22:34.916 - 00:23:16.294, Speaker B: Hey, great talk, by the way. So I have kind of a quick question. Right? What you've done is you've taken a hard problem. You have made it an NP hard problem. You have an NP hard problem, which is like this very complicated auction, which brings a bit of a difficult situation because NP hard problems kind of, by definition, are very sensitive to people kind of manipulating things and adding solutions. And I think if I recall correctly, bancorp had some interesting issues with this. So why not, for example, one simple condition to have one price for many assets, or, sorry, one price for many DEXes for specific assets is just to do optimal routing.
00:23:16.294 - 00:23:22.298, Speaker B: And optimal routing is a convex problem. You can do it efficiently. It's very simple to solve. Why not just do that instead?
00:23:22.464 - 00:23:56.850, Speaker A: Yeah, so I think just having one price per token pair per block is, I think, what you're suggesting that would already be a huge improvement to the status quo and it would be very computationally feasible to solve. I totally agree with that. I think the reason why we're aiming for multidimensional batch auctions is to make the life of our solver team harder, of course, but also to because we know that, or we've seen that the token space is just absolutely fragmented. Right? There's no cost for somebody to launch a token. And so even if we just look at US. Dollars, there's ten or 15 different stablecoins that are all trying to resemble the US. Dollar.
00:23:56.850 - 00:24:32.690, Speaker A: And so, sure, we might have then one price per token pair on USD ETH and Die, ETH and LUSD ETH, but we would still have this implicit fragmentation and this implicit arbitrage. And so we think the most efficient way of arbitraging the if USDC to die is eleven and then ETH Die is 1300 and ETH USDC is 1200. You still have some imbalance in that, right? And so, I mean, I agree with you. It's a good first step, maybe, but we kind of already aimed for the second. The Holy Grail is re aggregating the fragmented liquidity space that we have on Ethereum, and therefore we went multidimensional.
00:24:33.430 - 00:24:54.342, Speaker C: Great talk. I think one question on kind of like seeing liquidity fragment between l ones and l two S. How do you see it? Kind of like, is there a way on how swap could settle cross layer one like cross layer twos? Because I think it's probably like the next problem in MVP.
00:24:54.486 - 00:25:37.160, Speaker A: Yeah, I think one problem that we're trying to solve rather sooner than later is to just access liquidity on another chain through the solver abstraction. So right now, if you're, for example, trading on polygon a large amount, you have to potentially bridge to Mainet, trade there, bridge back. And that's kind of annoying from a user perspective because we already have this abstraction of solvers that can just happen under the hood. Right. The solver can do the Bridging swapping Bridging back for you and just needs to let you know that you might have to wait a little bit longer, but you as a user don't have to worry about it. But then, of course, the true Holy Grail is to just have one price per token per block across many chains. I think it's a very interesting research problem which we've touched the surface on, but not gone super deep yet.
00:25:37.160 - 00:25:53.980, Speaker A: Synchronosity between chains, maybe you have to do some locking of funds. Mohammed is sitting in the crowd. There's actually a hackathon project at ETH Amsterdam that looked a little bit into this. But, yeah, it's very early days for that, so nothing thing that you could build on right now. Thank you, Felix. Thank you.
