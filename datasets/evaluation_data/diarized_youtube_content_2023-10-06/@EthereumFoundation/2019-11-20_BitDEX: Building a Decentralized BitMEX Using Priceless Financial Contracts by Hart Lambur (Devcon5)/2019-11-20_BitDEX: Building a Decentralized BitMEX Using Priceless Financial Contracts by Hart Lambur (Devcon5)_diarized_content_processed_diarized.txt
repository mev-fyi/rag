00:00:16.890 - 00:00:52.590, Speaker A: My name is Har Lambert. I'm here for a project called Universal Market Access, or uma And I'm quite pleased to present to you guys this research paper we just put out. It's fresh, it's a draft. We're calling it bitdex. And this is our design for a decentralized BitMEX using what we're calling priceless financial contracts. So, goals of this talk, just to give you an overview, I want to explain to you guys how Bitdex works. I want to explain this concept of priceless financial contracts and then go into some details of what we think that can enable.
00:00:52.590 - 00:01:52.106, Speaker A: So as a starting point, let's just talk about what BitMEX is. And I'm not really picking on BitMEX here, I'm talking about any centralized futures exchange, anything that has levered transactions. And so BitMEX, like the CME trading futures or any CFD provider, is a lever derivative trading platform, huge exchange. And the Exchange itself provides a bunch of functions that make it usable to the people that trade on it. Those functions require a trusted third party operator. And so those are things like custody margin for all the positions, moving margin back and forth, clearing and ensuring the solvency of all the positions in the Exchange. What's really important to note, just remind everybody of is that when Bob and Alice trade on BitMEX, bob and Alice might actually end up having offsetting positions.
00:01:52.106 - 00:02:14.790, Speaker A: But they don't face each other. Everyone faces the exchange. The Exchange functions as what's called like a central clearing counterparty. And they're the ones that ensure the solvency of all the positions. So BitMEX does some good things. All these exchanges, fast, high performance trading, we like that with high leverage. This is things that people want.
00:02:14.790 - 00:02:40.922, Speaker A: BitMEX is growing with big business CME, huge exchanges, big businesses. These are services people want. But they are completely custodial. And the Exchange sets the rules of game. So the Exchange decides what leverage you get, how to trade. But importantly, they also decide when positions get liquidated, unilaterally have that power. And so this is like really centralized.
00:02:40.922 - 00:03:46.290, Speaker A: It's not just like a centralized coinbase or whatever where that's just custodial. There's also this whole aspect of centralization around trusting BitMEX or whatever exchange to monitor your position, solvency correctly and to not liquidate you at the wrong time. So this is bad, this is not what we want. So the question is to start with, why is decentralizing BitMEX so hard? What makes it so difficult? Why can't we just run this on the blockchain? And the fact is that there's just so many damn transactions we have to check. So the idea is that Vivnex functions as this somewhat of a black box that has all the position and margin data for everybody, all the trades in the system and they go through and they check the solvency of all trades with each price tick. So every price update, they're checking the solvency of every position in the system and that's just a lot of transactions. You can't run that on the chain and the data isn't available to do so if you get habits.
00:03:46.290 - 00:04:55.020, Speaker A: So what are we going to do? So we're going to try to solve this with blockchains, but more importantly with some layer two thinking, some layer two concepts that we're going to put into financial contract design. Okay, core idea here. Our observation on a futures exchange like BitMEX position data does not change that often. The data can actually it changes infrequently enough that it can be recorded on chain, allowing anyone to monitor positions to verify their solvency. And so this is pretty interesting, right? If we can actually put the position data on chain, we can design a system where anyone can monitor the solvency of that data off chain, allowing us to have a design with no centralized proceed and no centralized arbiter of proper collateralization. So Bitdex does this by allowing any counterparty to dispute any opposite position. So any long can dispute any short, any short can dispute any long.
00:04:55.020 - 00:05:32.738, Speaker A: And an Oracle is only used to resolve these disputes when they happen. So this is very much like an Oracle minimized design. We only use an Oracle when a dispute happens. And I'll go into more detail on that in a second. Penalties are then paid to the dispute or by the disputed position if the dispute is deemed valid by the oracle. So there's economic incentives here to correctly dispute or enforce the way the suspicion trades. Okay, so core idea here, we're going to ask people off chain to monitor the exchange to see if it's properly collateralized.
00:05:32.738 - 00:05:58.830, Speaker A: That's like the big idea. And there is no on chain price fee. Important point. All right, so let's just talk about what's happening on chain and off chain. Kind of go through some details here and why this can be fast. So Bitdex only puts data on chain that needs to be on chain. Let's break down the kind of the core exchange functions.
00:05:58.830 - 00:06:31.530, Speaker A: So margin deposits and withdrawals, those happen very rarely. People contributing to margin or withdrawing margin from their account. Like on BitMax, that happens very frequently. That can easily be supported with on chain transactions recording new trades. How many new trades actually happen a second? It's hard to deduce exactly what happens on BitMax here, but it's like low single digits. Arguably that'd be tough to support on Ethereum right now, but you could get pretty close. So we can also record that data on chain.
00:06:31.530 - 00:07:08.210, Speaker A: The interesting part and where this scales is all the measuring trade solvency. So checking all the positions, bizmex has like tens of thousands of transactions per second to check all the positions in their system with every price tick. But we are pushing that off chain because now we've recorded that trade and position data off chain. So anyone off chain can check the solvency position. That's where our scalability comes from. The one point I want to make clear is that Bizdex does not solve like a decentralized order book problem. That's not what we're starting out to solve.
00:07:08.210 - 00:07:55.060, Speaker A: Longs and shorts in this trading system still need a mechanism to find each other. That would be an order book. We aren't building that. There's great semi trusted designs or peer to peer order book designs like Zero X Mesh that are pretty interesting approaches to solving that problem. Okay, so let's go into an example just to try to illustrate what's happening with this design. So remember, the trade in position data is recorded on chain, and anyone can check the positions. So what starts here? We're going to name all of our longs, l One through Ln over here and our shorts, S One through SN.
00:07:55.060 - 00:08:24.222, Speaker A: Important point. L one does not face s one and s two does not face l two. They all face the contract of the exchange. So they're not directly offsetting. But we're going to record we're going to also define a market year where we're going to trade the price of bitcoin. And let's just say there's a starting price of bitcoin at $10,000 per coin. And so our NPV function for what longs and shorts get paid out is going to be the current price.
00:08:24.222 - 00:08:54.582, Speaker A: -10,000 so at our initial price of 10,000 longs and shorts both made $0 flat. And we have a margin requirement here of 10% of the current price, which means we can have ten X leverage for $1,000. You can get $10,000 exposure. Jump into some details. Okay, so we go and we record this data on chain. Everybody agrees that the price of bitcoin is $10,000. They check the NTD and margin, and everybody looks good.
00:08:54.582 - 00:09:22.414, Speaker A: They all check out. Everybody thinks everyone is correctly margined. The system is solvent. So let's now say that L Two thinks the price of bitcoin might drop to 9500. And if that were to happen, l Two knows that they will be under collateralized. They'll lose $500 because they're long. They'll lose $500 and they'll no longer meet their margin requirement of 10% of the price.
00:09:22.414 - 00:10:01.734, Speaker A: So what L Two does is deposit additional margin. They're doing this to make sure they don't get disputed and liquidated in their position. Cool. Easy. This is exactly how it works on BitMax too, where if you're right against your margin requirement and you don't deposit more margin, you'll get liquidated. Let's go through another example where l Two does not deposit additional margin, but X One does indeed think the price of bitcoin has dropped to 9500. Note that I said this is X One's opinion.
00:10:01.734 - 00:10:42.780, Speaker A: There is no on chain price feed for them to point to. Basically, it's like a bring your own price feed concept. S One is looking at the world and says, hey, I think the price of bitcoin is 9500. They're then going onto our on chain data and they see that at a price of 9500, l Two would actually be under collateralized according to our NPV and margin functions. And so what S One does is they go ahead and dispute L Two. They say, hey, I think you're under collateralized, you're in default. And at that point that dispute goes to an Oracle that's going to resolve this disagreement or this issue.
00:10:42.780 - 00:11:26.360, Speaker A: And if s one is right l two will pay a penalty to s one this default penalty, if S One was wrong, according to the Oracle, the penalty will go the other way to compensate L Two for being unfairly disputed. Okay, core design, core idea. So these are the core function signatures in our just initial simple design. I'll actually just jump ahead to the slide and go back in a second. That green is pretty bright, so you can't read that. But it basically says we've got a happy path situation. So imagine you're now a position in this bitdex system.
00:11:26.360 - 00:12:19.050, Speaker A: At any given time, you can do one of four things. You can do nothing because you think you're correctly collateralized and you want to just sit there. You're happy. You can deposit additional margin in your position, which you would do if you think the trade is going to move against you and you might get liquidated. Or you can withdraw request a withdrawal of margin. So if a trade has moved a lot in your favor and you're up a lot of money, you can make a request to withdraw that money. Note that you cannot immediately withdraw the money because we need to have a time lock to allow other participants to verify that that request is valid, that you're not trying to take out too much money out of your position, or you can dispute somebody else's position and say they're under collateralized.
00:12:19.050 - 00:13:05.800, Speaker A: So the core argument here is that in the optimistic path, in the happy path, you're just depositing or withdrawing margin and making sure your position stays perfectly collateralized. There is no need for an Oracle and Oracle price while you're staying in that happy path. The only time we need an Oracle or an Oracle price is when there's a dispute, when somebody says, hey, this position is under collateral license. So just to go back to that last slide for a second, these are like the core functions of this simplistic design. Deposits happen anytime. Withdrawals can happen anytime. Again, time locked by this delay, this liveness requirement, and once that passes, then anybody can withdraw that.
00:13:05.800 - 00:13:53.974, Speaker A: The withdrawal request goes through disputes. Remember, any long can dispute any short and vice versa. What's interesting about this is that because we have many watchers of the system, we've got many longs and many shorts and they're all watching each other, we can actually have a pretty short liveness requirement. Our time lock on disputes can be pretty short because we can be pretty confident that somebody's going to be there to watch the system. The last two things here are really about entering and exiting trades in the position. So we have a simple design where anytime you want to enter a new position, you can create a pair. So any long and short find each other, say, hey, we want to do a trade this price and negotiate that option.
00:13:53.974 - 00:14:37.730, Speaker A: And then they come to the system, they're like, hey, here's our new pair of longs and shorts, we want to enter the system. The Bistex contract just has to check that that new pair of longs and shorts is correctly margined. And we can do that with a clever trick. This is a little bit of an implementation detail, but we do it with a clever trick of having that new pair point to an existing long and short position that it is equally collateralized to or more collateralized than. This was detailed in the white paper. But really it's a shortcut for us to have an instant entry to the system. And then we have a simple mechanism where you can instantaneously exit trades in the position and withdraw your margin.
00:14:37.730 - 00:15:17.780, Speaker A: If you're a long, you do that by buying an offsetting short position and then you're immediately able to withdraw the combined long and short deposits. So those are detailed in a bit more detail in the white paper. Just a quick overview. So again, back to the slide. This kind of looks like layer two. And that's the idea. This is meant to be a bit of like a layer two for financial contract design, where we are assuming that things stay in the happy path and we are only using our Oracle when there is an unhappy dispute, when sort of something goes wrong.
00:15:17.780 - 00:15:59.470, Speaker A: So we're calling this priceless financial contract design. And the core idea here is that if everyone behaves as they're supposed to, if everyone doesn't default and add margin appropriately, then we don't actually need an on chain price. Hence priceless. This is the happy path. We stay in the happy path. We need no prices on chain. Other core kind of concepts of this framework that we're proposing is that when someone behaves badly, it needs to be observable off chain.
00:15:59.470 - 00:16:57.940, Speaker A: We need rewards to correctly reward participants for disputing bad behavior. And if that dispute is proven valid, we need the bad behavior to be punished, to be penalized. And we only need on chain prices to resolve disputes. Which means that the Oracle functions as a sort of dispute resolution mechanism, which should be relatively infrequently used. So these ideas, the sort of priceless financial contract design, this is something new that we're going to write more about. We would really love feedback on this idea, but again, it's all about how we can minimize Oracle usage to allow us to do higher leverage, higher speed things with DeFi and with financial contracts. So going touch deeper on what this means for Oracle design itself.
00:16:57.940 - 00:17:39.630, Speaker A: So, writing contracts, pricelessly, I'm repeating the point from the last slide writing contracts. Pricelessly means Oracles become dispute resolution mechanisms that only need to be used when counterparties fail to agree. That we think is kind of interesting and kind of novel. And the example here is to point to the fiat world where me and would enter into a legal contract. Financial contracts, a lot of them are like legal contracts. We could enter into legal contracts, and we do that privately with no intention of litigating that contract. We only litigate it if something goes wrong, if we fail to maintain the terms of trade.
00:17:39.630 - 00:18:40.334, Speaker A: The same concept is being applied here where we're saying, hey, let's enter into a financial contract that we both know the terms and we're going to do what we've got to do, but we're only going to dispute, we're only going to use an Oracle if something goes wrong. Framing Oracles as dispute resolution mechanisms arguably opens up the design space for decentralized Oracles. Since we can do things a little bit differently, we no longer need like an on chain price feed that's constantly pushing a lagged or real time price to the chain. We can instead let Oracles be relatively slow and expensive and potentially far more decentralized because they should be relatively rarely used. Again, like using the court analogy, you don't go to court for every contract you write. You only go to court when there's a major dispute. And it also lets our Oracles be asynchronous.
00:18:40.334 - 00:19:36.630, Speaker A: We don't need the dispute resolution process to be happening at the same time as the rest of the contract system. So Uma has built a design for this type of Oracle that we call our Data verification mechanism that actually puts economic guarantees around corruptibility that design. We've got a white paper and it's actually been built, it's on testnet. It's well suited to support this type of priceless financial contract. So, just to wrap up really quickly, we introduced this idea of Bitdex, which is decentralizing BitMEX, something that has been really hard to do in DeFi. And we did this using this concept of priceless financial contracts where we are pushing all of the work off chain. So we are getting greater scalability by having positions, their solvency being monitored off chain and enforced via disputes.
00:19:36.630 - 00:20:05.838, Speaker A: We're doing this without an on chain price feed. People, bring your own price feed off chain and we're minimizing Oracle usage. So we're reframing the use of an Oracle as purely a dispute resolution function. This lets us build what we're calling like fast DeFi products like Bitdex and exchange with leverage. It also lets us build synthetic tokens. We're big on synthetic tokens. You guys can go to our website and read about that.
00:20:05.838 - 00:20:43.020, Speaker A: But we could do this with lower collateral requirements because we could be much more efficient with our margin usage by not having a lagged price feed or any kind of delay. And we could build all kinds of swaps options also to other financial contracts. And this is sort of stuff that, frankly, we love. Talking to all you about what you want to build and how we can go about building it. Okay, so wrapping up. We've got a lot of research out there that we would love feedback on. This biddex paper we just published last week.
00:20:43.020 - 00:21:29.970, Speaker A: It's a research paper, and it's a draft. We would love feedback on this design. We also have our design for our Oracle, our dispute resolution style Oracle that we published a couple months ago that we would love feedback on. And there's five of us here at DevCon. Please join our developers lab links in our GitHub, links to where you can find various things and come find us. Thanks very much. WAM.
