00:00:01.410 - 00:00:30.074, Speaker A: You all right? We're going to get started here. I know we have limited time, so I want to make the most of it. Welcome everybody to this 4th 1559 coordination call. Fourth and probably the last ahead of the London fork, which is next week. I'm sure you're all aware of it. It's going to land around, I think, twelve utc on Thursday, August 5, depending on block time. So I'm sure we're all very excited.
00:00:30.074 - 00:00:57.026, Speaker A: I know I am. So I believe I put the agenda in the chat. You can check that out if you want, but this is a very open session. I think we have a few wallet teams here. I don't know what it makes sense to start with. If anybody has any pressing discussion points they want to bring up before we get into some demos. I'm open to hearing that, Richard, you're right.
00:00:57.048 - 00:00:57.870, Speaker B: I said one quick comment.
00:00:57.950 - 00:00:59.782, Speaker A: I'm going to take that as you want to talk. Go ahead.
00:00:59.836 - 00:01:08.906, Speaker B: I mean, it was just a very quick thing. I think it's useful if everyone changes their name in this chat to the project they're working on. Sure, if you want to. You don't have to.
00:01:08.928 - 00:01:57.376, Speaker A: It's just a suggestion. Oh, I see Tim is joined. Tim, I don't know if you want to lead off with any general comments or links to anything I can share the RPC doc that you put together. Yeah, I mean if anyone has questions or things they want to bring up first, we can do those, but otherwise, yeah, we can kind of share some updates I guess from our end and start that way. Yeah, go ahead. Whatever you've got, start with. Okay, so there's a question from San Diego.
00:01:57.376 - 00:02:16.056, Speaker A: We can start there. So whether there's any gas price oracles eat gas station gas now. Gas now working on 1559. I don't know if any of them. Oh yeah, we have someone from eat gas station on the call. Two people. Yeah, Mandrel here working for Itagas station.
00:02:16.056 - 00:03:04.668, Speaker A: So yeah, indeed we are looking to this. We've been working on this this month. We probably won't make it exactly to the next week, but pretty much like maybe the week after or something. So yeah, the idea is to give some minor tipping estimation for the coming blocks to get included. So pretty much what we got so far. But yeah, with the tipping change, I'm curious if you can share this publicly, but how are you approaching, how are you approaching estimating the tips and if you can't share it, because that's like your secret sauce, that's fine. Yeah, I think it's pretty much what's being shared on.
00:03:04.668 - 00:04:00.430, Speaker A: What's this page? I can't remember this. Yeah, it's basically pretty close to the pros approach. We have like checking the last 100, 200 blocks and then trying to find the quantile out of it for the tipping field. And given certain quantile we will share for given standard or fast or ultra fast line for next block for transaction to get included in the block. These details, we still need to tweak some stuff. And those details, the implementation detail, we most likely share some of it. So as we get the thing more clear and more in shape, then we have more resources to share.
00:04:00.430 - 00:05:08.230, Speaker A: Cool. Yeah, I think it was Barnabay who brought this up before, but that potentially looking at a shorter block horizon makes more sense after 1559 because of how quickly the base fee moves. So I'm not sure if that's something you're able to back test, but I think that would be really interesting to see. Do you get better estimations if you look at like ten versus 50 versus 100 versus even something like five? Because the base, she can basically double, I think, in six blocks. And that means if we're in a spot where it's doubling really quickly or going up really quickly, the tips will be going up quite fast, obviously, and you'd want to adapt quickly to that, whereas if that demand spike is over, the tips will probably go back down quickly and again, you'd want to adapt quicker. It'll be interesting to see the actual live data for that. But I think as you're maybe working on a v two or an upgrade to it, like comparing different history ranges and trying to see what's the best estimator could be really interesting.
00:05:08.230 - 00:05:34.236, Speaker A: Completely. Yeah, completely. Thanks for sharing, Chris. I see you have your head up. Yeah, I'm with block native and we've updated our gas platform to support 1559. It's also triggering on the 1559 fork block. So that'll go live when 1559 goes live.
00:05:34.236 - 00:06:28.620, Speaker A: And it basically adds to our API fee cap recommendation as well as a tip recommendation. It also reports on the base fee, just if you want to get it through that source. Instead of asking the block initially, it's a little bit heuristic based, but then very quickly it's going to switch to our full models. We just need to get actual data on those models and the behavior that we saw for 1559 on the testnets really didn't give us anything that we could build a model off of, so it just wasn't used enough. But that's the plan for block native's gas platform support. Nice. Out of interest, do you have anything on Bobston for that available already? Our gas platform only runs on main net.
00:06:28.620 - 00:07:16.610, Speaker A: We don't really provide an API for the test nets for that, but what we haven't done yet is show what the API changes are for that. So hopefully over the weekend we'll have that. We're just doing some testing now and I want to make sure the API is reasonably solid, the payload changes are reasonably solid before we publish that, but hopefully by Monday that'll be available for anyone to see the API, not to actually get the data. Cool. Anyone else have comments or just thoughts on oracles they wanted to share before we move on?
00:07:21.620 - 00:08:25.700, Speaker C: Yeah, sorry, I also have some experimental code, but yeah, that's been shared. The link has been. I see now. I see and the link has been shared. There's this fee history API and I wrote some Javascript oracle using this fee history API that's also supposed to be capable, so it's also theoretically capable of making suggestions for more urgent or less urgent and more economical fee options and everything. But yeah, so I believe we really need the main data to test these things. But once mainnet launches I'd be very happy to see some comments or issues opened on that repository if anyone wants to try this fee oracle.
00:08:34.820 - 00:09:19.920, Speaker A: Thanks for sharing. And yeah, I feel like a lot of this stuff, the Data on mainnet will be kind of a much better indicator just because all the testnets don't have sustained like more than 50% full blocks usage. Yeah, cool. Anything else on the oracles? I was just going to surface. If anybody from gas now or Tai Chi or spark pool is here and you wanted to ask any questions, now would be a good time. No pressure. If you don't have anything.
00:09:19.920 - 00:10:09.830, Speaker A: Yeah, we do not have anything. We have finished all the code revising and reviewing so we are just waiting for lunch and currently no from our side. Okay, thanks. It all right? Yeah, let me double check the agenda again. This is open, so if you guys just have a question and you want to bring something up, just go ahead. We don't really have to rely on the agenda strictly. Are there any wallets here who would be bold enough to share any screens or demos of what they have so far? I know we have metamask and status here.
00:10:09.830 - 00:11:00.280, Speaker A: I don't mean to put you on the spot, but it would be really amazing if we could see anything from you guys. I'll go first on our end, our kind of fee estimation stuff is expected to be ready on Monday. So that's not ready right now. And yeah, as soon as that is ready, I will share a link to the branch along with any build instructions for anybody who wants that information so they can jump in and play around with it. The kind of interface side of things is done, it's just not plugging into anything. So that's no different to what we shared a few weeks ago inside the Figma files. So all of that stuff is pretty much exactly the same.
00:11:00.280 - 00:11:51.270, Speaker A: Gotcha. Thanks, Kevin from Metamask. Here we are live on private beta on our mobile apps, which is iOS and Android with our desktop extension version. We should be live next week sometime on private beta as well. And when the London hard fork happens, we'll go to prog soon after. I was reminded we have rainbow and my crypto here, so if either of you would like to share some thoughts or quick update, that would be cool.
00:12:03.270 - 00:12:55.110, Speaker D: Hey, this is Jen from Rainbow. We decided to hold off and wait until we get more data to be able to figure out what sort of decisions we want to make for our users, just because our goal is kind of to limit the range that we're going to be exposing to users because there will be kind of like a vast range going up. And so we've kind of mapped out a few different scenarios and situations and are still debating what our UI we want to show, essentially kind of trying to limit the multiple on the base fee and being smarter about the tip instead so that we don't have this long tail or this huge range of like, oh, your gas price could be some large amount that might be way bigger than what it ends up being in practice.
00:12:57.930 - 00:13:47.282, Speaker A: Okay, yeah. And I think Tim has mentioned this before, it's not unreasonable to wait and see how it plays out a little bit before deciding how to present things, making changes in your UI. So that's good. Sorry, I can only see a few names on this screen, so apologies if I keep missing wallets who are in attendance, but if there's anybody else who wants to say something, just go ahead. I would just say briefly, argent. We're doing the same thing as rainbow, so we're holding off for now. I think we need to be a bit confident what kind of data sources we can use for the oracles, and it sounds like most of them are kind of fine tuning things and will be probably for a couple of days at least afterwards.
00:13:47.282 - 00:14:45.224, Speaker A: Anyway, we're eager to get it in with the UX that we already have. We believe it suits the same model, but it's probably going to be, I'd say at least a week or so afterwards. A week or so from here or from the after? Yeah, I think until we can start looking at it properly and we've got gas oracles with good estimation models there's not much we can do. So I think we'll come back to it probably about a week after London's gone live and then start digging into it and seeing what technical changes we can make. Great. So it sounds like it also might be helpful to have another call in two weeks just to share everybody's learnings, but we'll plan that after the fork league. Do you want to talk at all about.
00:14:45.224 - 00:14:53.036, Speaker A: I see there's some discussion going on about decimal to hex. Does anybody want to bring that up verbally, just so everybody's aware of it?
00:14:53.058 - 00:15:28.256, Speaker E: Yeah, there is a change basically in the fee history. It's just for the fee history, so not for submitting. And it's a bit, a sad situation because for the clients it's a bit hard because you don't really know what to use. So if you use the wrong one you get an error. And so you need to check the client version and depending on your model that's a bit strange. I hope we can accept both. So the current released 110 six still uses decimal, and the master currently, which then will be released to 110 seven, uses hexadecimal.
00:15:28.256 - 00:15:41.550, Speaker E: That's actually better, using hexadecimal. It's more streamlined because hexadecimal is used for blocks in other places. But the problem is the transition basically because as a wallet, what do you actually then use? You know what I mean?
00:15:41.920 - 00:15:45.992, Speaker A: Sorry, which values are being changed?
00:15:46.136 - 00:16:26.810, Speaker C: Actually, one of them is input value, and the other is the block count input value and the oldest block return value are both changed from decimal to hex. Now and this is tricky because on one side the Javascript code could accept the return value both in both formats, but then also the client has to accept the input parameter, the block count input parameter in both formats, which is possible, but it's also not how it's specified now. So yeah, I'm not sure, but maybe that's the best way to go.
00:16:29.180 - 00:17:06.000, Speaker E: I think the main problem is basically the input values, because as a client I can basically check the value I get, I mean the output values I can check basically what value I get and then decide on that. But the problem is if I need to send a request and not really know what to send, that's a bit of a sad situation. If the node can accept both just in the transition period, basically for a while. We can also switch that off at some point. That would be nice, because otherwise it's quite problematic.
00:17:06.160 - 00:17:53.990, Speaker C: Yeah, but right now the currently released version that only accept decimals, so then the proposed script should also use decimal value. So maybe that sounds like we might just get stuck with that, but yeah, also, if Openetherium and Bisu already use hex and quen I think wrote that just now, then it won't be good either. So that's the problem that right now we have a release version of get that only accepts decimal, and we have other clients that accept hex or, I don't know, maybe. Do they accept both?
00:17:55.000 - 00:18:01.000, Speaker A: No they don't, at least not in Ethereum. When I tested it, it was breaking.
00:18:01.500 - 00:18:04.264, Speaker C: They only accept hexadecimal, is that right?
00:18:04.382 - 00:18:05.050, Speaker A: Yeah.
00:18:09.020 - 00:18:37.380, Speaker C: Then it's bad either way, unfortunately. Yeah, and it was probably my mistake, and I'm sorry about it. Then I don't think we should release this Javascript code in a way that it uses a decimal value in the call because I mean for the fee history input value, the block count, because that will only work in Geth then and won't work in the other clients.
00:18:39.320 - 00:18:47.152, Speaker B: Are you referring to the JSON RPC API? Are you saying that the inputs to get, or are you meaning the results?
00:18:47.296 - 00:19:23.410, Speaker C: The input now I'm talking about the API, I'm thinking about from the node side, from the get implementation side. So by input I mean the fee history API's input value, the block count, the currently release version of get accepts a decimal value there, and the other clients accept a hex value. And the master branch of get only is already updated to hex. So maybe.
00:19:25.560 - 00:19:32.950, Speaker B: I think most clients accept a quantity which is just a non zero prefixed hex, right?
00:19:35.000 - 00:19:39.160, Speaker A: No, the standard is everything to be hex.
00:19:42.220 - 00:19:44.650, Speaker B: Yeah, that's what quantity values are, right?
00:19:46.220 - 00:20:54.740, Speaker A: The quantity is a hex value to me they do with an ethereum. Is that really if seven is not released, I might have to, as Geff is the most popular client, I might have to recreate a new version with Ethereum that will support the six and then release again when seven is out, because I cannot do this guessing stuff like in JavaScript because it's all tight. So ideally if seven was out before, that will be great. Is there a plan to release ten seven before the hard fork, or would this be after the hard fork? I believe after, but somebody closer to the guest team can maybe respond.
00:20:59.750 - 00:21:01.460, Speaker C: Actually, I don't know yet.
00:21:10.800 - 00:21:16.190, Speaker A: Okay, I will reach out to the rest of the team and find that out.
00:21:19.220 - 00:22:20.324, Speaker C: Yeah, but yeah, I will try to find it out too. But yeah, I just don't know it right now. But yeah, for this issue, it would be nice if we could do a fixed release at least because yeah, I don't think that accepting both formats in get that just won't solve this situation because the situation is already there. And if we can do a release, then we can just change it to hex and then it will be hex everywhere and that's the best outcome. But yeah, I think the only way to fix this is to do at least a hotfix release for this issue. And yeah, I will try to talk to Peter and the guys and maybe we can do it. Or maybe they have this plan too.
00:22:20.324 - 00:22:21.300, Speaker C: Yeah, I don't know.
00:22:21.450 - 00:23:15.124, Speaker A: I have been testing on ten seven and to me it works perfectly. Hence I've released ethereum thinking that was going to happen. But yeah, so if you just let us know in the discord chat so that I can plan ahead and I really think that being compatible with guest at least will touch more clients than the other question for rigmo related to this. Is it possible that the get feed data method from ethers does not accept any parameters right now?
00:23:15.322 - 00:23:21.510, Speaker B: So right now I don't use fee data at all for ethers. I'm still using Micah's suggested hard coded one way.
00:23:22.840 - 00:23:23.830, Speaker A: Got it.
00:23:24.680 - 00:24:22.664, Speaker B: But what I plan to do in the future is that there's that fee data structure, and so that's also rolling up. So in v six, there will no longer be a provider get gas price that'll be rolled into fee data as well. So if you look at the result of fee data, you get inside that the gas price, if it exists, the max fee per gas and the max priority fee per gas, if those exist. So in the future, at some point, once the dust is settled and we know exactly what fee history is going to return, there'll be something else in there for that. But I'm also planning to make that object an actual object that has, for example, a method so that you could, for example, have get priority fee per gas. Like get priority fee as a method that you can then pass in. And that's still up in the air, whether it's going to be a number that represents a number of seconds you're targeting or whether it represents fast, slow, medium, cheap, something like that.
00:24:22.664 - 00:24:45.090, Speaker B: But yeah, for now, none of that exists. That's just kind of like future plans. For now, there will be a max priority fee per gas, which is kind of like the best estimate we have, which is currently hard coded to one GUI. But soon it'll start pulling fee data and making some sort of educated guess based on that, if that makes sense.
00:24:45.780 - 00:25:00.790, Speaker A: Perfect. Sounds good. Thank you for clarifying anything else on this topic.
00:25:03.530 - 00:25:11.962, Speaker B: Actually, that does bring up one quick question. Is that currently sufficient is the previous advice of hard way?
00:25:12.096 - 00:26:11.866, Speaker A: Still, I would say the the background here and I can share Barnabase post for people who want to read it. Uncle MeV is in my most read things. One GUI covers the opportunity cost of your block being uncled if you just look at transaction fees. But the challenge is that since 1559 was developed, MEV is now a big thing. So the opportunity cost of being uncle is not only you lose the transaction fee revenue and the block reward, the delta between an uncle reward and a block reward, but you possibly lose kind of your MeV bundle that's included in your block, right? So what, you want the tip to basically offset that potential loss as well. And that gets much trickier for two reasons. One is MEV rewards are very variable, right, they're not evenly distributed.
00:26:11.866 - 00:27:16.740, Speaker A: And two is you don't actually want to compensate for 100% of possible MeV, right? Like when there's 100 East MEV bundle, it's probably fine for a user to wait a block to not overtip that. So last time I checked, a two guide default gives you basically compensates for roughly 50% of historical MEV blocks. And MEV blocks are only 60% of blocks right now. So that means that if you compensate for half of those, it's like there's 40% of blocks without mev, and then you're good in 38% of blocks. So, like roughly 70% of the time, two guay should be enough, and I think three guay was enough to compensate something like 80 or 90% of mev opportunities right now. And that probably means something like 90 plus percent of blocks. So two to three probably makes sense, depending on how aggressive you want to be compared to the prevailing mev numbers.
00:27:16.740 - 00:28:05.690, Speaker A: And the link I shared from Barnabay has kind of the formula that you can use to plug in that I don't think. Does it link the flashbots dashboard? It does not. So the other thing that I've used is there's like this dashboard, if you just want to eyeball it, there's this dashboard flashbots. Net website, and that'll actually show you historical mev. So that's what I kind of use. And I've just very roughly eyeballed it, and at the end of the day, you're kind of debating between one to three gwe, so it's not like it has to be a perfect estimation. But, yeah, unless Mev changes a lot, I think those numbers make sense.
00:28:05.780 - 00:28:13.830, Speaker B: I'll probably follow Frederick's example then. Or, Frederick, I don't know how to pronounce your name. Sorry. Example of using three for now, and then we can dial back later.
00:28:13.980 - 00:28:30.940, Speaker A: Yeah, I think, yeah, one is likely to be too low because it won't take Mev into account at all. And two is, if you had the concept of a slow transaction, two is probably a good value.
00:28:34.270 - 00:29:01.406, Speaker D: I had a question for Frederick. Sorry if I'm also mispronouncing your name from my crypto. So you mentioned in the chat that you default to three gray for the priority fee up to a given base fee, and then you start using the fee history. I was wondering, how do you determine when that switch happens up to a given base fee? Is that hard coded or is it based on some trajectory or trade?
00:29:01.598 - 00:29:29.440, Speaker A: Yeah, you didn't butcher my name. That was all good. Basically, we've set some hopefully sane defaults. So basically hard coding it. But we will be monitoring it and changing them on the fly if it turns out that we are completely wrong. But we've just tried to come up with something that would hopefully make sense.
00:29:31.410 - 00:29:32.960, Speaker D: Okay, cool. Thank you.
00:29:34.450 - 00:30:18.618, Speaker A: Worries if anyone wants to read it. I put it in the chat. I can post it again. Definitely work in progress. But our current fee estimation strategy. All right, I know Tim had requested that we add the discussion about requiring. Sorry, I lost the agenda again, requiring gas price and the expected deprecation.
00:30:18.618 - 00:31:16.160, Speaker A: Let me link to the discussion, Tim, if you want to touch on that. Sure. So right now, guest and I think all other clients currently return a gas price value for 1559 transactions in JSON RPC. So to be clear at the protocol level, 1559 transactions do not have a gas price field, but because a lot of tooling depends on it. So guess originally kept it in the JSON RPC, and I think other clients have added it so far. And basically what it does is before a transaction is mined, we can't actually know its effective gas price on the network because it depends on the base fee. So before a transaction is mined, that gas price yield in a transaction will return the max fee so the maximum the transaction could ever pay.
00:31:16.160 - 00:32:16.254, Speaker A: And then after the transaction it's mined, it'll return the effective gas price, which is basically the base fee plus the priority fee that was paid. So the goal in adding that was to kind of act as a sort of backstop to minimize breakage in the ecosystem. But it's obviously not ideal for a few reasons. Like one, this field doesn't actually exist in the transaction. Two, it's a bit sketchy that the field changes based on the status of the transaction. So on all core devs last week we were talking about what do we actually do about this? When do we possibly deprecate it and whatnot? And one idea that we have was that we would deprecated the first release after the next hard fork. So not London, but we're going to need to have another hard fork in December, even if just to push back the difficulty bomb, so that that hard fork would still contain the gas price field for 1559 transactions.
00:32:16.254 - 00:32:33.654, Speaker A: Then the first release after that you kind of deprecate it. So that means if you want to stay on the old kind of release, you can do so basically up to the two hard forks from now. So I was curious, I guess, to get all of your thoughts. And Rick has his hand up, right.
00:32:33.692 - 00:32:42.266, Speaker B: So I definitely want it in place much longer than that. The second that's removed, every version of ethers prior to 5.4 will fail for.
00:32:42.288 - 00:32:42.986, Speaker A: A lot of things.
00:32:43.088 - 00:33:13.798, Speaker B: If you just try getting a transaction, just get transaction will fail if there's not a gas price there, because the response is validated to make sure all the fields exist and are correct things. And that was a required field back then. So I definitely want it longer than just the next hard torque. If you put a dummy value, like if you put negative one in there, it'll work, it'll be fine. It's just, it has to be there.
00:33:13.964 - 00:33:22.680, Speaker A: Okay, so it would work. Would it work if it returned like null, or it has to be like an integer value?
00:33:23.450 - 00:33:33.340, Speaker B: Yeah, I'm pretty sure that was one of the changes in V 5.4 was that it used to be big number. Now it's allow null big number.
00:33:33.790 - 00:33:45.680, Speaker A: Okay, and what do you think would be like a reasonable deprecation schedule to remove it completely?
00:33:46.530 - 00:34:07.560, Speaker B: I mean, in my mind, if you're changing the JSON RPC, I mean, this is also probably a discussion, I think you're part of the other JSON RPC steering API calls as mean. That's almost something I would expect. This is one of the reasons, I guess, why we also need a version field or something inside.
00:34:10.650 - 00:34:11.206, Speaker A: Because you can.
00:34:11.228 - 00:34:36.240, Speaker B: Imagine if you went to right now, you go to your URL, whatever, and you just post something if it was your URL, v two, if there was some sort of versioning on the API. Because the problem is right now there's no way to detect backwards that the backwards compatibility is going to be impacted. So I mean, in my mind until there was some sort of versioning, it should still be present.
00:34:36.690 - 00:34:37.246, Speaker A: Okay.
00:34:37.348 - 00:34:55.800, Speaker B: Like removing fields is backwards breaking, whereas adding fields is kind of safe. This is one of the first times I can think of where there's been an issue. I can't remember for the state route, when we added status, we did some state route. I think state route still exists, right?
00:34:56.330 - 00:34:57.030, Speaker A: Yes.
00:34:57.180 - 00:35:43.238, Speaker B: So I mean that's the important thing is it still exists and is like a thing. So I guess in my mind I don't really want to see this go away until there's some sort of version field. Because that way if you start receiving JSON or PC requests that are not versioned, if they're not appending a v two on the end, you know this thing is broken, at least return them something gas price related. But again, I was looking the other day, there's still, I think, about 50% of the users that are still on antiquated versions of ethers. And so it will break a bunch of, and it's also very spotty. Like you'll see like version 4.4.47 has a ton of downloads, but 4.4.48
00:35:43.238 - 00:35:52.200, Speaker B: doesn't or 4.0.48 doesn't. So there's obviously a lot of these are probably deep nested dependencies in other things.
00:35:52.570 - 00:36:41.720, Speaker A: Got it? Yeah. What? Yeah. Oh, go ahead. Yeah, I was going to say if, say we introduced something like version JSON RPC around the merge, right? Like we said, because there won't be a ton of JSON RPC changes around the merge, but there will be, and the block format will probably not change, but some fields are kind of being set to zero forever and whatnot. It feels like logically there is kind of this big step change in terms of functionality there. Do you think that would be kind of a reasonable time and probably say like Q one next year if we have a new versioning system?
00:36:46.510 - 00:37:51.070, Speaker B: One of the advantages of having a versioning system is so for example, if currently your URL is 127-001-8545 if that's the URL, then the geth node should just still continue returning a bunch of legacy values in these things. But if it's v one, then you have the opportunity to exactly like you can drop state root, you don't even need to include it. You can just throw it at the window, you can then drop gas price. And then at some point, at least then when I'm requesting without the slash v one, you can feed me back an error saying unsupported geth no longer supports version zero or legacy version APIs. At least then there's an error that the user is going to see when their application blows up because some deep dependency is using an old version of ethers and it can no longer get the gas price. At least they see a human readable thing seeing like the back end you're connecting to is a flaky upgrade.
00:37:51.730 - 00:38:06.754, Speaker A: Got it. And in the meantime, if we wanted to kind of soft deprecate it, right? Like if you start returning minus one, then it means nobody can actually rely on that field, but you potentially don't break things, right?
00:38:06.872 - 00:38:20.614, Speaker B: For me, minus one is fine. I can imagine a lot of scenarios where minus one is going to cost people money because now they might be taking that and adjusting the fee for something, and now they're subtracting, subtracting. So they're actually adding some value.
00:38:20.732 - 00:38:23.110, Speaker A: So maybe zero is a better zero.
00:38:23.180 - 00:38:25.100, Speaker B: Might be the least worst option.
00:38:28.990 - 00:38:39.806, Speaker A: Yeah, I can see minus one, or even the worst case is like if it creates some sort of underflow and you're adding all your balance as a max priority fee or something.
00:38:39.988 - 00:38:40.720, Speaker B: Exactly.
00:38:41.250 - 00:39:10.710, Speaker A: That would not be yeah, okay, yeah, this is really useful, so I'll share that back on the JSON RPC thread. Does anyone else have comments on that? Yeah, let's hope nobody divides by zero. I mean, at least at that point it should fail, right? And not send your entire balance.
00:39:14.010 - 00:39:24.460, Speaker B: Divide by zero either gives you nan or if, I actually don't know, it might give you negative if for a negative number, but yeah, divided by zero is going to be bad.
00:39:28.990 - 00:40:27.910, Speaker A: Cool. And I guess, yeah, talking about JSON RPC, I think Trent, you mentioned this just at the beginning, but we put together a quick document that specifies all of the changes coming in London related to JSON RPC. So if you just want to have one place to look, this is pretty final going forward. Now that we have a separate repo for JSON RPC and whatnot, we'll probably be able to use branches and whatnot to track those changes, but we just didn't have those in place for London. So there is this hack MD doc which kind of just explains for every type of field what's changing for 1559 transactions and mentions. Obviously fee history being the new API that's been added. Um, aside from that, there's another thing about the roadmap.
00:40:27.910 - 00:40:58.902, Speaker A: I'm not sure what the question was. I think you added that. Yeah, I'm not sure. Let me see. I think it was about planning for Shanghai or what's next? Just getting thoughts on that. Yeah, I'm not sure this is like the most valuable thing. So I feel like if people have utter anything else they want to discuss, we should probably get through that first.
00:40:58.902 - 00:41:43.020, Speaker A: Yeah. If not, there is something else that's even more valuable. So the ethereum.org website wants to try to highlight which wallets support 1559, which ones don't. So they're kind of looking for a list of wallets that plan on supporting it around launch. If that's the case, if you can just leave a quick comment on the issue and say we're wallet x and we will support it. Yeah, that would be pretty good because then users can come and know kind of at a glance if their wallet supports 1559.
00:41:43.020 - 00:42:14.574, Speaker A: Yeah. So if people just want to leave a quick issue there. A quick comment on the issue there. Yeah. And then for the roadmap stuff, I mean the thread is linked in the issue and I think it's probably not worth spending time on this synchronously. But Frederick, just on literally the issue, I just linked above your zoom comment. So the ethereum.org
00:42:14.574 - 00:43:47.710, Speaker A: issue, if you could just know we support it from my crypto, that's good enough. And if we can get a couple of those, yeah, it'll be at least a good start. And then it's much easier if there's like four or five already there. You can just tell people to submit a pr to add their wallet in the future, but just so we can start with a handful of wallets. Um, yeah, and I guess, yeah, for the roadmap itself, just some context, like we were discussing this on all core devs, basically, how should we go about naming upgrades, whether there's value in trying to stick to a very strict schedule or trying to like, I guess, yeah, this is probably the best question to ask here when we're planning upgrades from an infrastructure or just like tooling perspective is the biggest pain point, actually adding support to the upgrade, which in this case feels like it is. But I'd be curious, just like more generally if you look back at Berlin or Istanbul or whatnot, or is the biggest pain point kind of the timing of the upgrade? Because some people think we should kind of have upgrades happen at these times, one upgrade in June, 1 upgrade in December, whatever, no matter what. And this way we can provide kind of more predictability in terms of the tooling that's dependent on Ethereum and whatnot.
00:43:47.710 - 00:44:57.230, Speaker A: And there's the other point of view that's basically if you're doing an upgrade, most of the work is actually adding support for the EIP. So we should just ship, say, London whenever 1559 is ready and make sure we give plenty of time to adapt. So, yeah, I'm curious if the predictability of the time is more important for anyone here than the kind of focusing on the biggest or most complex thing in the upgrade and potentially delaying the upgrade over that. And yeah, this is the east magician stream. If people have thoughts they want to share on this later, it's definitely a big discussion, so no pressure if you want to provide your thoughts. Async yeah, cool. I think that's all we had on the agenda.
00:44:57.230 - 00:45:14.440, Speaker A: Yeah, I think we covered everything, including a couple of other things which weren't in the agenda, which is great. Does anybody else have other discussion points or lingering questions that they wanted to bring up?
00:45:17.930 - 00:45:46.654, Speaker B: I'm Sid from Coinbase. I work on Coinbase wallet. We have a couple of colleagues here as well. Thanks for organizing this call. Super helpful listening in. We noticed that we are also amongst the wallets that are still working out our plans. I think it's a combination of working through what we think the best UX might be, but also having a bit of reluctance in the sense that when the fork happens, we want to see what the actual data and the gas price oracles are saying.
00:45:46.654 - 00:46:26.010, Speaker B: And so we're holding off maybe for a couple of weeks post launch. And it sounds like there's a few other wallets in that boat as well. We wanted your feedback on a little bit of downside planning and risk planning. Do you feel that there are any red flags here around something could go wrong and cause massive disruption to our clients or to our users, or anything that we should watch out for from the do nothing path for the first week or two, where all of our users are either getting stuck transactions nonstop or they're massively overpaying.
00:46:29.570 - 00:47:18.880, Speaker A: There's two different things, right? One is just like the hard fork itself, and just like any hard fork, if I were Coinbase, I would freeze deposits an hour before and monitor the situation and wait and see that everything is running smoothly, and then turn deposits back on. And obviously, if you see a consensus issue, the thing with consensus issues is sometimes they'll take hours or days or whatnot to happen. So I'm sure you all have processes for freezing everything if you detect one. So at a high level, I just say monitor the hard fork closely. If you see anything weird, you're better off freezing things and waiting for more information.
00:47:21.570 - 00:47:30.354, Speaker B: Just to clarify, we have obviously the main exchange and then we have Coinbase wallet, the noncustodial wallet. Told me about the noncustodial wallet app.
00:47:30.552 - 00:48:04.618, Speaker A: Okay. Yeah. So I think then with regards, if you keep using legacy transactions, the experience will not be worse than it is today. Right. And all of the gas price oracles, I think, will still keep reporting gas price estimates based on the historical data and blocks and whatnot. So you will still be able to submit legacy transactions. What happens is when we say your users will end up overpaying, they're overpaying today.
00:48:04.618 - 00:48:43.206, Speaker A: Right. They will not get the benefit of 1559, but they shouldn't overpay by more than they already are. Yeah. Just because you can still kind of estimate based on the data that was included in historical blocks and you're basically back to a first price auction. And the only difference is when you have a 1559 transaction and you set your max fee, the difference between the base fee, your tip and the max fee goes back to your user. Whereas if you're just using legacy transaction, that all goes to the miner. It's not the end of the world.
00:48:43.206 - 00:49:32.434, Speaker A: If you want to wait a couple of weeks, there are some comments in the chats about if everybody waits, then we don't get good data. That's not necessarily true because what you do get data on is the block utilization ratio and how frequent stuff like spikes are and whatnot. Like we were talking at the very beginning of this call. How far should you look back in terms of blocks to estimate the base fee? Sorry, the priority fee and whatnot. You'll get all of that data. Even if nobody was using 1559, you would kind of see that we get spikes and we see that the base fee goes up on average every hour or every day. And these spikes tend to last an average of like three blocks or five blocks.
00:49:32.434 - 00:50:07.730, Speaker A: And that's all pretty useful. And you'll still be able to look at blocks. There is an economic incentive to use 1559, so some people will use it. And you can still look at blocks and look like what's the lowest quartile of priority fees that miners accept? And if you just want to use that as a reference, that'll be possible. I think it's not the end of the world. If you wait, it definitely doesn't block the rest of the ecosystem. You're basically kind of stuck at the status quo.
00:50:07.730 - 00:50:13.640, Speaker A: Yeah, unless I'm missing something, but that's pretty much how I understand it.
00:50:14.090 - 00:50:15.702, Speaker B: That's really helpful. Thank you so much.
00:50:15.756 - 00:50:30.738, Speaker A: Yeah. And Barnaby, I see you have a comment in the chat. I don't know, do you want to share some thoughts as mean.
00:50:30.764 - 00:51:21.580, Speaker F: Yeah, briefly, if you don't want users to overpay and you want to keep using today's infrastructure, but you still think 1559 is pretty nice, you could just set the max fee parameter to whatever you were going to set the gas price of a user and then tune down the priority fee to two or three. So what you're doing if you're not using 1559 is your legacy transaction is just converted. Like the gas price is taken for the max fee and for the priority fee, so you're not getting the benefit. So you could just. Yeah, whatever gas price you were going to set, just set that as max fee and use a very small priority fee, something like two or three, and most likely you will never pay more than the max fee, which is the gas price anyways, and most likely you would pay less as one.
00:51:33.920 - 00:52:09.210, Speaker A: Any other questions? I have a question about timing. I just want to confirm, I think Trent mentioned earlier that the hard fork will happen on twelve utc on the fifth. Is that correct? Yeah. So it's always tricky to estimate those. The closer we get to it, the better the estimates get just because of the proof of work drift. Right. But right now it's scheduled for, I think, less than twelve utc.
00:52:09.210 - 00:52:27.910, Speaker A: More like ten utc. 10:00 p.m.. UTC. Yeah, it's actually moved a bit in the past day. So it's moved that much? It moved by 2 hours, yeah. Okay. I thought you said P-M-I was like, whoa, that's quite.
00:52:27.910 - 00:52:52.000, Speaker A: Oh, sorry. Actually wait, no, that's still twelve. No, you're right. It's still scheduled for twelve utc. Scheduled, yeah, scheduled. But yeah, definitely check this, like within 24 hours of the fourth. Usually you have a pretty good estimate down to the hour.
00:52:52.000 - 00:53:32.074, Speaker A: Got it. This is helpful. Thank you. And there's two ether nodes, also has a countdown. I think they kind of vary in which data they look at because they tend to be off by one or 2 hours each. So if you want a good window, you can basically set both the ether nodes and the ether scan one and you have a high probability that it's between those two. I'm just seeing a comment from Matt about the testnet stuff.
00:53:32.074 - 00:54:12.200, Speaker A: So we did spam the test. Like definitely the mechanism to change the base fee was tested, but it wasn't consistent, which is what we'll see on main net, which is like consistent usage and then spikes on top of that and not run by a spam bot. Organic demand is always going to be a little different. Sorry, I think that's everything. And we're right at time. We filled up the hour with delightful discussion. Thank you everybody for coming.
00:54:12.200 - 00:54:50.134, Speaker A: I really appreciate it. And I think we turned up some points which I don't think we had seen before. So this has been really helpful. This will be uploaded where the other videos are. I think that's the Ethereum Foundation YouTube channel, and we will also have notes for it as well for you to share with your colleagues who were unable to attend. So yeah, the last thing I think Tim mentioned a while ago is if you are a wallet that is supporting, or when you do, just leave a comment on the ethereum.org repo mentioning that you support this, just so users are aware of their options.
00:54:50.134 - 00:55:36.814, Speaker A: And then the other thing was, it sounds like it would be helpful to have a call in a few weeks after London when we can have some data, maybe have a presentation from Barnaby. I'm sure he's got all sorts of great ideas about how to present this stuff, and we'll have a much better idea of how this is actually working out in the wild and get everybody to share their progress. And then there's the other things of the discussion on fee history, and I think maybe that was the only thing. Tim, was there anything else? Yeah, well, the JSON RPC gas price stuff. So I'll make sure to update that thread based on your comments. Rick, cool. Yeah.
00:55:36.814 - 00:55:55.270, Speaker A: Thank you so much everybody for coming. And if I emailed you, that means I have you on a list. And if you want to add any of your other colleagues, just let me know and we'll make sure to invite them in the future. Cool. Cheers everybody. See you. Bye.
00:55:55.270 - 00:55:56.610, Speaker A: Thanks. Bye.
