00:00:19.620 - 00:01:21.836, Speaker A: So hello ladies and gentlemen. I'm here today to share my our experience on creating the pluggable crypto provider for Ethereum nodes and which we used in Masterchain project. So who we are? I'm Mitri Boschko. I am the Cryptocur developer at Masterchain Project. And the one man who I want to introduce, who unfortunately couldn't come here to this great conference, it's Aleksey Trozachev and he's Masterchain architect. So what is masterchain? Masterchain is Russian national platform for storing and exchanging financial data based on blockchain technology. So the two key words in this definition is national and blockchain.
00:01:21.836 - 00:02:10.220, Speaker A: So we've choosed the public Ethereum protocol as a basis for Master chain project. Why we do that? Because the first Ethereum protocol have large experience with work in the wild. Of course, it has a smart contracts and it had a big community and has big community. And this community grows and solves many, many new issues so this platform wouldn't be abandoned. So what is masterchain? It's a fork. It's a fork of public Ethereum protocol. It also supports, of course, smart contracts.
00:02:10.220 - 00:03:04.240, Speaker A: And the main difference is based on ghost crypto. Ghost crypto stands for government standards Crypto. It is the main standard in Russian Federation for all cryptography. If you're interested, you could just read the white paper from Masterchain Project. This link is for this white paper. So why we have to use the custom cryptography? The first and main it is because only government standards crypto algorithms have legal power. So if you want to build any system which involves any kind of cryptography, your cryptography in Russian Federation should be the Ghost.
00:03:04.240 - 00:03:57.824, Speaker A: And not just only your own implementation of Ghost. It has to be certified by Russian Federal Security Services. Not even your only step or your solution has to be certified by FSB yet. But cryptography is definitely that kind what you need to certify in Russian Federation. So there are only few, only certified crypto service providers have to be used. And you can say, whoa, I can implement the ghost myself and get and certified it. No, you could probably do that, but it's extremely, extremely difficult.
00:03:57.824 - 00:04:35.710, Speaker A: That's why only a few vendors of CSPs are presented in the market, in the Russian market. So we used for our project is cryptoprodc. And what's the main difference? What does Ghost crypto algorithms family consists? The first one is the hash function. The hash function is Ghost R 30 411 212. It calls. Strebeg calls for Slavic. God.
00:04:35.710 - 00:05:35.840, Speaker A: And it has two modes, 256 bits and 512 bits. But in our project Master chain, we used only 256 bits. So the second is the ECDSA algorithms for digital signature. It calls Gaust R 34 Ten 2012 and it doesn't have the specific nickname. It supports 256 bit curves and 512 bit curves with different param sets. For each curves we used 256 bit curve with the Param set A. Also it has a symmetric K blocked cipher still running ghost 24, 147, developed in 89 in 1989 it calls Magma.
00:05:35.840 - 00:07:27.556, Speaker A: There is a new modern algorithm which were built in 215, it calls Kuznechik, but he still doesn't have the certified implementation, so we couldn't use it. And the last operation it's the bunch it's several operations for transport security, the Diffie Hellman scheme and it works with it's a DSA Ghost algorithm and with symmetric K block cipher with magma. And in cryptoprote CSP there is certified implementation of TLS protocols. So we've decided to choose this one for our project. So what was Ethereum crypto undercover before we started? We started at version 15 and looks like it was a big mess because there were crypto module which had a wrapper for crypto hashes for its DC AC implementation and for implementation of curvesec P built for bitcoin and it wraps all those functions in one crypto model. But suddenly there were redundant calls from P, two P communication system, from mining system, from EVM directly calls to those functions. So we decided to redesign it.
00:07:27.556 - 00:08:54.752, Speaker A: We've built single crypto adapter which were transparent for all business logic nodes, business logic calls. This crypto adapter have unified calls to a wrapper interface and each library like CSP Wrapper, like Go Star Wrapper or any other wrapper you can write by your own. So each each of this wrapper implements this wrapper interface and wraps the exactly library. So first we choose the open source source Ghost R, so we can just test that all functions that were present in the original Ethereum are switchable to the new cryptography. And then after that we've built that CSP wrapper for third party library cryptoprod CSP which is a black box for us. And this theme is kind of work very good. It builds like that.
00:08:54.752 - 00:10:08.328, Speaker A: So you can implement your own crypto wrapper which would wrap your own crypto library. In fact, you can do the mixed mode, use the NIST cryptography or GOs cryptography in the same way. So what have exactly? We switched from Ethereum to master chain, the three types of hashes Sha, 256 Sha, three in two modes, 256 bits and 512 bits. We switched it to Streebog, it's CDSA and SEC P. We've switched to Ghosted CDSA with 256 bit curve with param set A and we've redeveloped the ECRI function. I will tell you bit more later on the next slide about this, but we've implemented the compressed signature for Ghost algorithm family. So Ecrecover works now very good.
00:10:08.328 - 00:11:31.830, Speaker A: It recovers the pub key from compressed signature, but then you have to verify it with the certified verification function from that CSP. So it also works with 256 bit curves with param set A on master chain. The symmetric cryptography which were used in earl peaks encryption between the communication of two nodes. It was ace. It switched to magma symmetric ciphers with 256 bits K and block size of 64 bits for magma switched from 124 bits from ace. And of course we've read out of Earl Pigs encryption. Why that? As I said, if you have certified implementation of one part of any cryptographic function, it doesn't mean that the whole solution are certified by itself.
00:11:31.830 - 00:13:00.130, Speaker A: So that's why we have two ways. The first way is trying to certify in FSB the whole Earlpicks encryption protocol or just switched it to certified tele. So we've choose the second one. And the Ethereum protocol in communication LP is so we just switch the encryption, anything which is going through our stands, like in the original Ethereum. So about compressed signature, because of the different algebra, when you're working with curves in Gauss standard, we have to reproduce compressed signature which was used in NIST curves, in bitcoin and in Ethereum. So we did find a way, but it was something interesting because IQ recover function was created without modification of original certified CSP. But that's why we have to call the verification function on this.
00:13:00.130 - 00:14:41.760, Speaker A: So first of all, you're going to restore the pub key from the compressed signature. And then you have to give the verification function the original signature and the restored pub key so that solution would be certified. And the last one, we've implemented nodeswiplist as a smart contract for authorized communication and for authorized mining. It was a requirement for fintech association. So crypt algorithms complained with these requirements can be used with our crypto adapter transparently for the rest of Ethereum logic. And again, the hash function in 256 bit modes, et CDSA with 256 bit curves, your compressed signature support with 256 bit curves and symmetric block cipher with key with 256 bits and block size 128 or 64 bits. And if you implement your own TLS protocol, you should do it because you cannot communicate with Nodes in master chain without this implementation.
00:14:41.760 - 00:15:01.970, Speaker A: So it was glad to talk about some cryptography. So you can ask some questions for me right after this presentation. Have a nice day. You.
