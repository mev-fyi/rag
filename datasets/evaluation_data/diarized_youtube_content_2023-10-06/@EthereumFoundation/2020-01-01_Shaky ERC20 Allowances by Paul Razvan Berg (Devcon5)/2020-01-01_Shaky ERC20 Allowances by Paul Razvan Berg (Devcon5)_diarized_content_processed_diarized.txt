00:00:12.250 - 00:00:48.060, Speaker A: Paul and I will be talking about ERC 20 tokens. I guess every Korean developer has been through the ERC 20 code base, probably used Opens upon code. And yeah, I'm going to be talking about a very specific feature, which is the max approval thing. Many DApps have been using it and it's way less secure than we may think a bit about me. I'm building this project called Sibier. An app and real time payments. Imagine getting your salary every second.
00:00:48.060 - 00:01:16.162, Speaker A: And I published a beta version of the project in early this summer and of course, I looked at other DApps and I saw that they have this max approval thing. So I said, let's do it. Sounds cool. It's easy because you have phone apps, you ask your resource once and then that's it. So this is like how it looked. You have to approve the savior contract once and that was it. All things work went fine for like one or two months.
00:01:16.162 - 00:01:43.882, Speaker A: I had like 50 people posting 100 die in total. So it was not like a big deal. I was like, It's fine. If there is a bug, it's fine. No, because of this thing. There was a bug, and quite a big one, because even if in the contract you only had 100 die at risk, I put by mistake more than 10,000 in total. Because there was a bug in the contract that allowed people to create streams.
00:01:43.882 - 00:02:18.146, Speaker A: What I said, like real time payments, using the Ers 20 allowance and pay themselves, basically using the money that was not in the contract. Funny enough, the money in the contract was safe, but the money outside the contract was not safe. So that's why I like to call this thing Missing the Forest for the Trees. So that tree is your smart contract. Beautiful, secure and whatnot. But the Er 20 allowance is basically in the back and you're not seeing it. So how can we solve this at the UI level? We have to build better wallets.
00:02:18.146 - 00:02:40.266, Speaker A: I know it feels kind of like early days, but this is like bad UI. There's no way I can easily explain this to anyone. It's a big number. It looks like some app wants to steal all your money from your wallet right now, even if it's just like an approval. Right? So there's that. And in the back end, this is what we can do as developers. There are three solutions.
00:02:40.266 - 00:03:23.758, Speaker A: The first one being that you can use a different token. It's like a big because most tokens are ERC 20 and yeah, just we are stuck with this standard at the moment, but hopefully in the future we will be using more standards like this. Then you can use a metal wrapper that physically custom guide, I think, developed a way to deposit die and use it in a safety manner. I think they use this with so they use it with the new standard developed by Engine called 1155. Pretty good, but still it requires user input, so that's quite troublesome. And the optimal solution is to sign two transactions. So you go to your DAP and you have approve and then spend.
00:03:23.758 - 00:03:47.170, Speaker A: And even if that is slightly better, you act you can sleep better because you know that in case there's something bad, the forest is fine before it's safe, right? So kudos for Kickback for doing this. I think UI is good enough. I didn't have any problem with allowing and then spending, so thank you for listening.
