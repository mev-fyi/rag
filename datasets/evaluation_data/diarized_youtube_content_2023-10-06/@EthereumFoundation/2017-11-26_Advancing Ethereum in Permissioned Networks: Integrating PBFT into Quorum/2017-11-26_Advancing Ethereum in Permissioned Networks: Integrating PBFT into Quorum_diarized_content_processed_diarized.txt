00:00:15.930 - 00:00:53.670, Speaker A: Thank you. Yeah. I'm Tyrone Lovin. I work at Morgan and I'm the technical product lead for an Ethereum based client called Quorum. I'm going going to be presenting with Ute today on basically consensus mechanisms and permission networks and how companies like Morgan and startups like AMI are coming together to really help advance Ethereum both in the permission space and also in the public enterprise space. So the nexus of all these themes is really Quorum itself. And for those of you who are not really familiar with Quorum quite simply it's a lightweight fork of geth.
00:00:53.670 - 00:01:54.974, Speaker A: And so by that I mean you can take a smart contract that you have written and deployed to the main net and you can deploy it to a Quorum network in exactly the same way without any changes which is amazing but also not very exciting if that's all that Quorum did. So we'll go through some of the additional features that Quorum provides as well. Quorum is designed to operate within permissioned networks so we know who the protocol is geared towards, we know who the participants on the network are and this gives us some leeway from a consensus perspective as well. It gives us the ability to have faster consensus effectively. Ultimately, though, the reason why Quorum exists is to provide enterprises who want to use Ethereum with the features that they need to operate within a production environment and because they want to use Ethereum one of the goals that we have as a result is to make sure that Quorum stays as close to public Ethereum as possible. And this week actually we just upgraded to Geth 1.7.2 which is actually really great news.
00:01:54.974 - 00:02:26.010, Speaker A: And if you're using Quorum I think this is something that the user community have been looking at for a while. So we're really excited about that. But it's more than just that. We're also helping provide standards under the umbrella of the Enterprise Ethereum Alliance and really making sure that we are contributing back to the community. But again, really the ultimate goal is to have Ethereum available to enterprises within a production environment. But to do that we have to solve for requirements that enterprises need. And the first one, of course, that always comes up is privacy.
00:02:26.010 - 00:03:16.218, Speaker A: And from a Quorum perspective what we have is the ability to have private transactions, private smart contracts and also the ability to exchange assets in a private way. And the way that this is achieved is effectively utilizing two services within the Quorum architecture. The first is Constellation which is effectively the core privacy service that Quorum implements. And the second is a newer one called ZSL which stands for Zero Knowledge Settlement Layer which is a full implementation of Zero Knowledge proofs within Ethereum. It's something that we've done in collaboration with the Zcash team very recently and we'll go over what ZSL gives us in a moment. But from a Constellation perspective if you think about I have an insurance contract, for example, that I want to deploy with yourself. And I don't want anyone else on the network to know what the details of that contract are.
00:03:16.218 - 00:03:57.206, Speaker A: This is where we can use the Constellation features to actually obfuscate that information. And so effectively, what happens is when I send that transaction into the network, I make a call to Constellation. Constellation will replace the payload of that transaction with a hash of the encrypted payload. And that hash is then globally distributed across the network. There's nothing that's revealed about this information, but what this does is it gives us some really nice resiliency properties, which we're not going to get into today. But the key here is that we actually also have a shadow Constellation network that runs in the background. And so what happens here is you have point to point communication between these Constellation nodes of that private information.
00:03:57.206 - 00:04:56.326, Speaker A: And so you never are globally distributing private information to parties that shouldn't see it. But you do end up with this very strong Pragmatic privacy solution. The side effect, though, is that if you are not actually part of, for example, a chain of asset transfers, then if you're trying to sell me an asset, I don't necessarily have guarantees that you are the rightful owner of the asset or that you haven't sold it on to someone else. And so this is where we leverage the ZSL implementation. So if you think about public ethereum, where balances and amounts are globally visible, clearly from an enterprise perspective, this is not really something that's going to fly. And so with the ZSL implementation, what we have is a full obfuscation and shielding of balances of positions of transaction amounts and also of who has actually taken part in the transaction in the first place. And so this combination of Constellation and ZSL gives us this really nice hybrid privacy environment within the quorum network.
00:04:56.326 - 00:05:39.834, Speaker A: But of course, privacy is not the only thing that enterprises need. They have high performance requirements very often given the high volumes that need to be processed and as a result, the high throughput. And they also need to make sure that those transactions are not only processed quickly, but also definitively. So once a transaction is actually written, they don't want to have it reversed such that the transaction all of a sudden didn't take place and is only going to be included in the chain in a later point. And finally, they need to know who they're actually transacting with. We can't have this in an enterprise environment, this pseudonymous or anonymous participation network. And so the way that quorum solves for these things is on the performance side, quorum is pretty quick.
00:05:39.834 - 00:06:17.406, Speaker A: We have blocks that are created every 50 milliseconds transaction throughput around 1000 transactions per second for simple value transfers. And we ensure that transactions are finalized immediately. So the consensus mechanisms that we use don't actually allow for forks. So you have a guarantee that once your transaction has been committed to the chain, it's not going to be reversed. And then from a permissioning perspective, we have a strong protocol that ensures that you have to be authenticated and authorized onto the network. And if you are not, then basically you cannot actually communicate with any other node. And it's probably a good time to actually talk about permissioned blockchains.
00:06:17.406 - 00:07:35.438, Speaker A: In general, the question always comes up why do you need a permissioned blockchain? Why not just use a regular centralized database or distributed database? When you start to look at the properties of traditional distributed database technology and you have this trust among nodes, this closed network, you have strong consistency. This starts to sound very much like the things that we need from an enterprise perspective, all the requirements that we've just kind of gone through. So why would we consider this public blockchain or this blockchain implementation where you have only eventual consistency, you don't know who's on the network, you don't have a high throughput environment. And really the answer comes down to the fact that even in this permissioned environment, in this closed network, we still only have partial trust. We don't have this unconditional trust amongst network participants. And so actually, from a permissioned network perspective and from a quorum perspective, we kind of land somewhere in the middle and we end up taking the best of both worlds from both the distributed database technology environment as well as the public blockchain space. So we have guarantees around Immutability, we have guarantees around auditability, and we have the ability to have multiple writers write to the chain without having to cede control to some central party to manage conflict resolution, for example.
00:07:35.438 - 00:08:31.514, Speaker A: But the question of course is, well, what do you do from a consensus perspective in a permissioned environment? We don't need proof of work, we don't need proof of stake, we don't have the same incentivization model that you have in public ethereum. So what we can do is start to implement some different and quicker consensus mechanisms. To date, we've had two in quorum. We have a configurable consensus environment. On the one hand, we have quorum chain, which is a smart contract based protocol that has voters and block makers, kind of akin to proof of authority, which is something that we're going to be looking to implement. And then we have Raft on the other hand, which is obviously a formally proven protocol, it is actually based on the CoreOS etcd implementation which is used in things like Kubernetes and Cloud Foundry. And this is the consensus mechanism that gives us a lot of the properties that we've already spoken about, but neither of them are Byzantine fault tolerant.
00:08:31.514 - 00:08:50.390, Speaker A: And so when we heard that AMI had written a Byzantine fault tolerant consensus mechanism targeted at Geth, we got very excited and quickly started collaborating with them to have their consensus mechanism implemented within quorum. And so with that let me hand over to Ute, who can tell you a little bit more about AMI and also Istanbul.
00:08:57.290 - 00:09:33.890, Speaker B: Good morning everyone. My name is Lin from AMI. To get started, I would like to quickly introduce AMI and what we are doing there. AMI is a blockchain service company based in Taiwan. We provide blockchain services include blockchain infrastructure, blockchain applications and blockchain research. Our most well known projects are Istanbul BFT, which we are presenting today, and the decentralized ledger for cross bank transactions in Taiwan. While doing this project, we found current POW design doesn't quite meet our need and that's why we implemented Istanbul BFT.
00:09:33.890 - 00:10:16.100, Speaker B: Istanbul. BFT or IBFT was inspired by Castro Liskov's Practical business in Fortran's paper published in 99. Without blockchainized implementation, it has the following key features. First of all, blocks in IBFT are final, which means no fork is possible and no confirmations are necessary anymore. In terms of governance, it has a manageable validator set so that validators can add or remove other validators dynamically by voting on performance. It can process around 800 transactions per second. At the same time, it has the same no scalability as its dash does.
00:10:16.100 - 00:10:59.850, Speaker B: And in order to make blocks self verifiable, we put consensus proof into block headers, which also means implementing litecline will be quite simple. Last but not least, IBFT implemented gossip network. So strong connection are not required to make the consensus work. IBFT is a three phase state machine replication algorithm. Here I like to use a simple network setup to demonstrate how IBFT works. Say there are four validators in this network. In the first step or pre prepared step, one of the validators will be selected as the proposer.
00:10:59.850 - 00:11:50.430, Speaker B: Who is in charge of proposed a new block proposal? The validators can accept that. To ignore that or start a wrong change, say they all accept that. Then they will broadcast prepared messages to other validators. When they receive more than two thirds of prepared messages and agree on committing the block into blockchain, they will broadcast commit messages to other validators. Finally, when they receive more than two third of commit messages, they can install the block into blockchain and broadcast the block to other nodes. And this concludes a consensus round. So in the next round, the next proposal will be selected and propose the next block.
00:11:50.430 - 00:12:37.450, Speaker B: IBFT can take up to one third of 40 nodes. Here I like to use a simple example to demonstrate how the network react to malicious behaviors. Say there is a dishonest proposer who always propose invalid block. The network would detect that and start a round change process. The round change process is trying to find out who becomes the next proposer. Once this is decided, the next proposer will propose a new block and the block generation consensus will continue. IBFT can explicitly detect a couple of malicious behaviors.
00:12:37.450 - 00:13:11.734, Speaker B: To name a few. They are store validators, mixed message codes, forged signatures, proposal disguise, round change spamming and invalid Block proposal. All right, back to Quorum a little bit. Why did army pick Quorin? There are a couple of reasons. First of all, Quorin is compatible with and close to public Ethereum. Actually, we have implemented our IBFT on top of Pluggable Consensus engine. So we have used the Senco base, sent a pull request to public go Ethereum.
00:13:11.734 - 00:13:43.490, Speaker B: Please check out EIP six 50. Again, EIP six 50 for more detail. Also, Quorum and army are trying to solve the same problem not only for banking systems, but also under regulatory environments. Quorin has supported three consensus options which are really useful in these cases. They are quarantrend reft. And now IBFT as well. Last but not least, with Morgan backing quarantine, it builds up trust while working for banking systems.
00:13:43.490 - 00:13:53.000, Speaker B: All right, we have skipped a lot of technical details. If you are interested in learning more, please come to us. Our team is here and we are wearing Armin T shirts. Thank you.
00:14:00.250 - 00:14:49.430, Speaker A: So, yeah, Istanbul now is available in Quorum, which we're extremely excited about. It gives us that all important Byzantine fault tolerant consensus mechanism that's really been on the roadmap since day one. But I think the story is much bigger than just consensus here. So if we look at what's happened in Quorum over the last year, we really have this nice collaborative environment that has taken place. So the Istanbul implementation has actually resulted in me submitting a PR back to Geth to improve the Pluggable Consensus interface. And we've also partnered, obviously, as I said, with Zcash for the first full zero knowledge proofs implementation in an Ethereum client. And what this really gives is a really nice reference implementation for zero knowledge proofs going forward within public Ethereum.
00:14:49.430 - 00:16:09.818, Speaker A: We've also collaborated with BlockApps who developed a tool called ETH Pruner, which allows us to archive off historical state, which obviously reduces Blockchain Bloat, improves the performance of the network and as the name says, ETH Pruner. This is not just something that's targeted at Quorum, but also something that's targeted and usable for the actual mainline Ethereum code base. And then finally with Comet Technologies, who developed Perocity, which is an EVM decompiler decompiling bytecode into solidity contracts that helps from a Quorum perspective to identify vulnerabilities in smart contracts. And of course, given that Quorum and Ethereum are very close together, it's directly usable within public Ethereum too. So I think what you have is this really nice two way movement of innovation between the public Ethereum space and also from the permission environment back to public Ethereum. And when you couple that with the number of companies that are now looking at Quorum building on top of Quorum, building projects, on Quorum, building tools around Quorum, this is all directly relevant and useful to public Ethereum as well. So we have an increase in focus on Ethereum, we have an increase in acceptability within enterprise of Ethereum.
00:16:09.818 - 00:16:21.858, Speaker A: And ultimately, I think in terms of what we're collectively trying to do that can only be a good thing. So that's our talk today. Thank you so much for listening. If you want to have more information, go to these places.
00:16:22.034 - 00:16:22.500, Speaker B: Thank you.
