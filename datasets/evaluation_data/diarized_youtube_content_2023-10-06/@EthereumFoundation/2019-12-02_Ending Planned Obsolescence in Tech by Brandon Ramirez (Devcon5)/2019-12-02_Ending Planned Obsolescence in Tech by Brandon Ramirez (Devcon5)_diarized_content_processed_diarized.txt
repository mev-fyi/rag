00:00:11.450 - 00:00:43.906, Speaker A: Morning, everyone. I'm Brandon Ramirez. I'm the research lead at the graph. Today I'm going to be talking about ending landopsolescence in tech. One thing that I find when I'm meeting people at these conferences, at meetups is that everyone kind of has their own vision for what makes blockchain and decentralization exciting. And for me, what really captured my imagination for the first time was this quote from the original theorem.org website, this idea of building unstoppable applications.
00:00:43.906 - 00:01:49.470, Speaker A: And this fascinated me because this is not something that we're used to thinking about in the real world, right? Like, this is kind of the stuff of fantasy, right? Like some mythical sword that you read about that lasts forever. But in the physical world, we deal with the cycle law of thermodynamics, right? That entropy is always increasing, and we kind of come to expect that physical products will fail and degrade over time. But I've actually put to you that we do have some products today that last forever. And specifically, they're information products. So things like books, music, movies, and not in their physical form, right, because pages on the book will degrade, but in their pure essence, these things are just information. And information doesn't have any intrinsic expiration date, right? Like, maybe the hard drive that something's on will fail, but the information itself just requires a medium to be played through. But really, it should last forever.
00:01:49.470 - 00:02:56.580, Speaker A: Now, another type of information product that we have that we don't come to expect is properly from is software, right? But software really is, at assessment still just information. So why is it that the apps that we love and apps that we use all the time, we've kind of just come to accept that these things fail, right, when these things are at their core just information? I would contend that software is just like music, except that the boombox that you play it through is just way more complex, and we haven't figured out how to give it the same properties. And so I think you can trace this all the way back to the Great Depression. This is when the idea of planned obsolescence was first produced. And at the time, it was seen as this breakthrough in economic thinking, right? People were kind of desperate. There was this sense that the economy was failing because there wasn't enough purchasing power in consumers'hands. This is the same time that John Wiener King said that it would be better to bury a bunch of money in glass jars to drive employment than do nothing.
00:02:56.580 - 00:03:43.730, Speaker A: I think this idea has actually stuck with us and has become part of the zeitgeist of what we expect from consumer products over the last century. So shortly after those ideas were put to the test, a cartel of light bulb manufacturers were realizing that the light bulbs they were producing were lasting way too long. And so they formed a cartel called the Phoebus cartel, where they decided to collectively limit the amount of hours that any given light bulb would be designed to last. So on the right, this is actually a picture of what's called the centennial light bulb. This is a light bulb built before that era that's still burning in a fire station in Livermore, California today. So it kind of gives you a sense of what these products could have been like. There's a bunch of forms of planned obsolescence.
00:03:43.730 - 00:04:36.100, Speaker A: Today, I'm mainly focusing on contrived durability. I think this is the one that we tend to identify with the most with that term, but it's not one that we tend to identify with software products. So let me explain what I mean when I say contrived durability for software. And specifically, it's that the apps that we use aren't designed to outlive the companies that built them. And this wouldn't have been a problem maybe 100 years ago when the average lifespan of a company was closer to 60 years, at least on the SP. Today it's closer to 20 years, and it's projected to keep decreasing. So we need to accept it as a reality that companies are going to last less and less time, and we need to start thinking about what that means for the products that they create.
00:04:36.100 - 00:05:44.106, Speaker A: So there's a lot of reasons for this. These are just like a couple of ones that you see a lot, which is that for a long time, the playbook has kind of been go big or go home for especially consumer applications, like, even big success stories like Instagram or Snapchat didn't even start thinking about monetization until years into their growth plan. And those are kind of the success stories. But many, many companies fall far short of that, and they get maybe tens of thousands of users, and they decide that's not enough scale to drive a business off of. And so they shut down, or they become strategic acquisitions for large conglomerates that then shut them down or try and migrate their users onto other products. So I'm going to argue that this is a form of planned option lessons, because these businesses are basically planning for this world where only in the case of massive success will their users be taken care of, rather than planning for their products to outlive the companies themselves. So there's a lot of reasons that we should care about this.
00:05:44.106 - 00:06:11.314, Speaker A: And so I'd like to kind of build some empathy for the people that are affected by this, which I would contend is everyone in this room. So I have a few teammates here. Just this year, a couple of products that we used and relied upon were kind of shut down against our will. One of them was our project management app. We had spent hundreds of hours and tweaking it, tuning it, putting our data into it. We were happy to pay for it. And that was shut down.
00:06:11.314 - 00:07:03.710, Speaker A: Right. So you're talking thousands and thousands of dollars worth of engineers time that is kind of stolen from us against our will. You can go to this website that I like, killedbygoogle.com, and you can see like 150 plus projects that they've killed over the years. And so I just want you to think about the users that kind of gave those products a shot, spent their time getting excited about it, playing with it, and then were later also punished for kind of taking that chance and think about what that does to user psychology. Right? Like, we want startups to be successful, but if we train users that taking a risk on a new startup project is a fool's errand, then we're going to see a lot less innovation and adoption of new projects. Another dimension to this is technological stagnation.
00:07:03.710 - 00:07:43.070, Speaker A: So this is something that Peter field talks about a lot. He says that we have a lot of innovation in the world of bits, but not atoms. And I'm going to argue one part of this is that we're redoing the same work over and over again. So if we go back to that list, I was shown before one of these products, one of the left that's highlighted is mailbox was this kind of mail app that came up with this nice set of Ux features. It was acquired by Dropbox and shut down. Then inbox came around later, basically just copied the exact same set of features. And then, so I switched to that, and then that was shut down.
00:07:43.070 - 00:08:36.186, Speaker A: And I'm sure that in a year or two, we're going to find another startup that says, hey, those two apps are really great, let's rebuild these same features. And so I would argue that in ten years from now, we're still talking about the latest calendar app to do list app, mail app. Then we haven't done our job correctly. So a common denominator that you'll see with a lot of products that are designed to be obsolete is what I call bundling. And specifically bundling of parts that have different levels of durability properties. So it's very common to see parts that have really strong durability properties, the greatest green information, which is infinitely durable with parts that are more brittle. So you see this across the board when it comes to plant obsolescence.
00:08:36.186 - 00:09:52.234, Speaker A: So you see physical components. So like LED lights, for example, there was a study that showed that for outdoor LED bulbs, in only 10% catastrophic failures, was the LED bulb itself responsible, and then the other 90%, it was either the power supply or some other parts that were kind of bundled into the LED bulb. But they don't design these things to be like, swapped out atomically. And so we're just throwing working led bulbs in the trash and buying new ones every so often. You see this with the latest edition of MacBook Pros, right? People were very upset that they soldered and glued the ram battery onto the motherboard, meaning that if one of these parts fails now you're swapping out your entire motherboard instead of replacing one of these things piecemeal. We kind of talked already about information and physical media, right? So if we were still in a world where we were printing all our books on only pen or paper and binding, then we would still be in a world where books were designed to fail, right? Less intuitive is information and resources. So a lot of people don't realize we don't think about what happens when we navigate to a web page.
00:09:52.234 - 00:10:28.754, Speaker A: We put the URL in the browser text input field. But really what that thing is doing is it's mapping to an IP address through DNS. So like if you're going to Wikipedia, for example, it's going to go to your DNS provider, you're going to get the IP address. And what that IP address really represents is a physical location on the network. So we're taking this thing that's just information, Wikipedia, and we're tying it to this physical spot on the network. And if that location fails, then the information is gone. We see that all the time.
00:10:28.754 - 00:11:11.294, Speaker A: By the way, it's called link rot if you want to look it up. When we get into the realm of software, like web apps, it becomes a little bit more complicated. So we're bundling software with the compute, storage and other services required to make that software work. And not only that, we're also bundling those compute, storage resources to specific business and economic entities right through these kind of complex value chains. So if you're using many applications today, like Facebook, you might have the end user watching ads. That's the monetization strategy. That kind of indirectly goes to Facebook.
00:11:11.294 - 00:11:50.800, Speaker A: And then Facebook reroutes that value to its compute and storage resources to keep that product or service running. And so we're in this world today where if the business stops working and stops paying for those resources, then everything stops working. And that's kind of what I want to focus on today. But to give you an analogy, this would be like if when you bought a television from a company, you were also buying the electricity to run that television from that company. That's kind of the world that we're in today with software. So the answer to this, I would argue, is full stack decentralization. And this is what a lot of us in the space are working towards.
00:11:50.800 - 00:13:01.480, Speaker A: And right now, we're kind of just at the bottom of the stack, right? The networking layer of the stack is what we've come to think of as operating like a utility, which is to say that the value flows that keep the network running aren't directly tied to the businesses that run applications on that network, right? You pay for your Internet service based on your metered usage of that service and the future. That's how we think every part of the application stack should work. So I'm going to focus on two major parts of this. One is data and storage, which we saw in the previous slide. So instead of having web pages like Wikipedia be tied to specific locations on the network, like a physical box, we can address these things by the information that they contain. So this is called content addressing. And then you can use that content address to go to a decentralized network of node operators and say like, hey, who has this piece of information? But no longer have we bundled the information with a specific location where you could find that information.
00:13:01.480 - 00:14:08.698, Speaker A: With services, it becomes a little bit more involved. Not only now do we want to decouple the information from the physical location, we also want to decouple the value flows. So what I'm shown in this diagram is that the developer who builds the application deploys the logic to this decentralized network of service providers. But then the value flows that keep that service running are direct between the end user and the network, right? So if this developer wants to walk away, wants to work on something else, goes out of business, this piece of infrastructure continues to operate. So this is how Ethereum works, right? Like the developer deploys a smart contract, but unless there's some weird logic built into it, you wouldn't expect it to stop working. Once that developer walks away, it kind of becomes public infrastructure. This is how L2 service protocols, like the graph or live peer work, where for us you deploy a subgraph to the graph which defines the query and indexing layer for your application.
00:14:08.698 - 00:15:05.870, Speaker A: But once that's deployed, it's these value flows between the graph and the end user that keep that piece of infrastructure working. So the goal here is full stack decentralization, right? And this is what we're going to see over the next few years, is that for every piece of the stack we're going to see an equivalent service network, either at the base layer, L2, layer three, that kind of adopts these properties where really the only thing that's a product is this very top level thing like front end application. And everything below that is kind of based on the metered usage of the end user. So this is part of a long path that we've been on for some time. This isn't something that started with decentralization. So we've talked before about the physical media and information. So that kind of started with the advent of digital computing.
00:15:05.870 - 00:16:53.200, Speaker A: Ben Thompson runs this popular tech and business bloggery where he talks about aggregation theory and how the Internet unbundled products from distribution channels and all the ways in which that shame start economy. And we can kind of think of this as being like a logical next step to aggregation theory, where now we've not only unbundled products from distribution, but we've also unbundled information and software from the compute and storage resources required to operate it. And the end game here is in addition to getting unstoppable products, we move towards an economy that starts recognizing the time and labor, that time, data and labor that we put into the products that we use, I guess as labor, right? So these things have value that we confer to it by virtue of the fact that we used it. And so we shouldn't accept a world in which the businesses that we buy software from have the power to steal that labor from us arbitrarily. I think this is going to lead to unlocking a lot of innovation and entrepreneurship, not just because consumers will be more amenable to trying out new products with the knowledge that these things won't fail if the startup fails, but also because going back to that full stack slide, there's going to be so much more shared infrastructure for new developers and new businesses to build on, right? Like imagine if today a developer wanting to build an Internet application also had to rewrite TTP and the rest of the networking stack, right? Think of how much less innovation we would get. But that's what we're doing with the rest of the application stack today. Right.
00:16:53.200 - 00:17:35.002, Speaker A: The other thing that we're doing here is we're unbundling ideas and labor from corporations. So this is going to change the nature of work. And so I think it's actually going to change work to be much more like the work that we see done on other information products. Right. So, like the way movies get built, for example, you kind of have an idea, you assemble a team, there's kind of many contractors or consultants involved, and that team gets together to build this information product and then they dime. Right. We wouldn't expect the team that built like Jurassic park, for example, to stick around for 20 years as a corporation that monetizes and extracts value from Jurassic park.
00:17:35.002 - 00:18:31.422, Speaker A: Instead, we have studios that come together and build many different information products. And the other thing I think we're going to see here is that as the amount of shared infrastructure grows, we're going to see building software as much more of a small business activity. We're going to reduce the barrier to entry, to building useful and niche applications that maybe wouldn't have worked in a world where you had to rebuild entire parts of the stack just to build something new and useful. And kind of as a closing thought. The reason I want to talk about this today is just that I think we tend to get caught up a lot on the idealism of web3. And I think that sometimes that creates a disconnect between people in this space that are really excited and when we try and talk about web3 and blockchains, people out in the real world. But I think this is something that's really tangible and concrete that we can all rally behind.
00:18:31.422 - 00:18:48.820, Speaker A: Right. Like, everyone's used a product or spent time on a product that's failed. And I think the solutions to this are becoming very real today. And so this is something that I'd like to see spoken of more as part of the promise of blockchain and web3. Thank you.
