00:00:13.370 - 00:00:54.978, Speaker A: Today I have the pleasure of moderating a panel that is going to technically challenge me. So I'm just going to be really good at asking questions. Hopefully this is about account abstraction, which has been been part of Ethereum as a topic for a very long time. And now that we are post merge, maybe we can actually redistribute some developer resources to building something that has always been talked about as something that is fundamentally crucial to the future of Ethereum. And every time I talk to somebody who's technically minded, they all say that we need account abstraction. It's not an option, we have to have it. So we're going to explore why everyone who's more technical than me are always like, yes, account abstraction.
00:00:54.978 - 00:01:11.694, Speaker A: Good. So we have Julian Nissa, the co founder of Argent. He is here in the middle. There we go. And then on the far end, we have Joab Weiss, the security researcher at the EF. And then in the middle here, sitting next to Vitalik, is Light clients, aka Matt, he's on the guest team. And then there's also vitalik.
00:01:11.694 - 00:01:12.740, Speaker A: What's up, guys?
00:01:13.670 - 00:01:14.238, Speaker B: Yo.
00:01:14.334 - 00:01:16.034, Speaker C: Yep. Great to be here.
00:01:16.152 - 00:01:24.920, Speaker A: So you guys can each introduce yourself better than I can. So Joe, we'll start with you. Want to give a little bit of your background and your relationship with account abstraction and why you think it's so important.
00:01:25.930 - 00:02:35.438, Speaker D: Well, sorry, I think account abstraction is something that we must have both for some technical reasons, such as obstructing signatures for a future quantum resistance, but more importantly for usability. If you want to really go bankless, then you need to get to a usability where the user never sees a private key user never sees a seed phrase so that my mother can use it, and if she loses access to it, she has a way to recover. You need to have different security policies in the account. Such as, for example, you wouldn't expect your bank account to be the same if you are a large corporation or an individual customer. Maybe you want to have some different spending policies so all of these things become possible. Anything that a bank account can do for you and more can be done using account abstraction. I think this is a must for UX purposes, certainly.
00:02:35.524 - 00:02:44.502, Speaker A: And going down the line, of course, we have Julian from Argent. Julian, can you explain a little bit about what Argent is for those who aren't familiar and how it relates to account abstraction?
00:02:44.586 - 00:03:20.854, Speaker C: Sure. So, Argent, it's a smart contract in our company. We've been building smart contract based wallet since 2010. And basically we started on a mission to actually solve exactly what account abstraction is trying to solve, recognizing that the user experience of Voas will basically never scale. And so if we keep that paradigm, I think we'll remain in the bubble that we are in, but we'll be unable to reach the next hundred million users or billions of users because the user experience of self custody is too complicated. And so we started building Argent based on to try to fix that. And we did that at the application layer on Ethereum.
00:03:20.854 - 00:03:58.466, Speaker C: So trying to build a smart contract based wallet, enabling different security flows to actually fix the issues that you have mentioned. So for example, we introduced social recovery, which is a way to get rid of seed phrase, we introduce some kind of fraud monitoring and so on. That has been a great experience. But of course, we build that at the application layer, meaning that smart contract wallets are second class citizen because the entire ecosystem is still built around this paradigm of voas. I mean, DAP developers, the tooling. Everybody is thinking in terms of UAS, which mean that there's some compatibility issues. If you're a smart contract wallet, we like to say that we've been second class citizen.
00:03:58.466 - 00:04:06.010, Speaker C: And so of course, the goal of account abstraction is to make smart contract based wallet first class citizen. And of course that gets us very, very excited.
00:04:07.070 - 00:04:24.640, Speaker A: Matt, I've got a special question for you, but also feel free to introduce yourself and tell us what you do at Geth. But also, could you, after you do that, explain why do we call it account abstraction? What are we abstracting? Why is the abstracting word here? Just to really get things at the very basement level.
00:04:25.250 - 00:04:55.098, Speaker B: Sure. So I recently joined the guest team, actually. So I'm kind of like looking for my home amongst the guest team. I think that there's many different things that the guest team has focuses on. And so I'm trying to find where my very specific focus will end up being. So before that, I was part of this team called Quilt and we did a lot of research and development on future ideas in Ethereum. And the first place that I became involved with account abstraction was back in the earlier days when we called the beacon chain E Two.
00:04:55.098 - 00:05:41.014, Speaker B: And we talked about the different phases of the E Two deployment. And so the Quilt team was working on phase Two for E Two for a while. And we were trying to think about how to define execution environments in a way that you could abstractly define all of the execution semantics about the virtual machine that was executing on Ethereum. And of course, one of those things that you needed to define abstractly was like the account logic. And so this is where we first started running into this problem that Vitalik had already talked about in the relation to the EVM earlier on in 2016. And so and so I guess for me, the meaning of account abstraction is actually maybe not the perfect way of defining what account abstraction actually is. It's a term that has many meanings for many different people.
00:05:41.014 - 00:06:33.030, Speaker B: And for me, whenever I understand account abstraction, I think of it more as like validation abstraction. I think of it like we're trying to abstract what it means to validate an account in Ethereum. And so today, if you want to validate a transaction in Ethereum, you're going to recover some address from a signature, look at that address in the state, determine if the nonce is okay for the transaction that's been sent and if the account has enough balance. And so that's one way of validating a transaction. But there's many different ways you could have a multi signature, you could use different cryptographic primitives to validate a transaction. And so when I think of account abstraction, that's what I first and foremost think about. But I also understand accounts abstraction is used more generally now to think about smart contract wallets and how can we add more functionality to the protocol or give users a better user experience when they're interacting with the protocol.
00:06:33.030 - 00:06:36.154, Speaker B: And so now I understand that there's many ways of thinking about it.
00:06:36.272 - 00:06:53.330, Speaker A: Vitalik every time you introduce yourself, you always come up with a new, funny, different way of doing it, depending on what era of Ethereum you are. So I'd love for you to introduce yourself and how you relate to Ethereum these days and also answer the question for you. Why does everyone say that account abstraction is yeah, yeah.
00:06:53.400 - 00:07:50.754, Speaker E: So, hi guys, I'm Vitalik. I'm a fashion influencer and travel blogger at the Ethereum Foundation. Yeah. So account abstraction has been a topic I've been really trying to push for almost since the beginning, right? Even actually when Ethereum launched, the original vision I had been hoping for was to try to get people to use smart contract wallets by default, right. Because we wanted people's money to be secure and we thought it would be really nice if people could just have the default type of account be a two of three multisig wallet, right? And that ended up not happening, I think in part because the community was just so fed up by incessant kind of delays on top of delays for the Ethereum 1.0 launch that at some point we just put our foot down and said, okay, no more features. Unfortunately, we have to just cut everything and launch something.
00:07:50.754 - 00:08:59.362, Speaker E: But then, since then, we've been trying very hard to come up with the right way to actually get to the point where smart contract wallets can be the default type of wallet that people can use and try to get all these benefits, like security for multisigs social recovery, other types of cryptography if you want, quantum resistance. More recently, thanks to Joavanjuro and the others, the topic of kind of trying to get aggregation to be in there as well, to try to kind of save gas and save data. So basically trying to find the way to bring smart contract wallets in and make them actually be as convenient and have all of the properties. Censorship resistance is another important property that externally owned accounts. So the default type of accounts that most people use now have today. And it turns out that there's actually quite a bunch of challenges. And there have been a whole bunch of various efforts.
00:08:59.362 - 00:09:50.738, Speaker E: There's like EIP, I think it was 86. And then 210, and then 29, 38, and then there's a kind of grab bag of different proposals separately, the strand of kind of enabling a kind of delegation, which is basically allowing people to pay for transactions on behalf of other people, which I think is part of the motivation of both 3074 and some other proposals. Basically, there has been this really long strand of research of trying to really optimize and figure out what is the cleanest and what is the most sensible and secure design to get to what's actually satisfying these goals. And that's what we're trying to implement and roll out today.
00:09:50.844 - 00:10:23.102, Speaker A: I want you to check my understanding on this because I actually had to do some homework to prepare for this panel because this is technically challenging for me. After kind of figuring out when people explain account abstraction, they were like, oh, it enables you to do this, and then it unlocks this feature and it lets us do that. But it kind of feels like we're feeling that elephant metaphor where somebody's feeling the tail and it's like a snake and somebody's feeling the leg. It's like, oh, it's like a tree without actually seeing the whole thing. So I want you to check this metaphor with me. An externally owned account. There's only two types of accounts on Ethereum.
00:10:23.102 - 00:10:54.666, Speaker A: You have an externally owned account, which is probably what you use when you buy your NFTs. You have a private key and it unlocks a wallet. And then there's a smart contract. And account abstraction is putting what we currently use, which is our ledger or our private keys, that unlocks a specific wallet, and it makes that wallet a smart contract, which more programmable. My mental model for this is that account abstraction is like putting a chip into a wallet. And what I mean by that is that we have, like, Bitcoin, which the meme is like, Bitcoin is a calculator. Ethereum is a smartphone.
00:10:54.666 - 00:11:11.890, Speaker A: And I kind of apply that to externally owned accounts and smart contract wallets or account extraction wallets, where externally owned accounts are like Bitcoin, they don't really do too much. And then Account extraction wallets are like Ethereum where there's a chip in it. Is that metaphor land?
00:11:11.960 - 00:11:14.402, Speaker E: Yeah. No, that's a really fun metaphor. I like it.
00:11:14.456 - 00:11:24.920, Speaker A: Is there anything incomplete about that? And Matt, I want to throw this one to you where you were talking about validation abstraction. Can you connect these two metaphors? How do those things?
00:11:25.770 - 00:12:15.574, Speaker B: So I think if you're thinking of the concept of putting a chip into a wallet, there's two important pieces that the wallet is doing. And the way that I think about is that the chip is dealing with the validation logic. Like, I mentioned when I spoke a minute ago, it's determining is this message and signature that's coming from account valid in the context of this account. You could also imagine the chip did other things after you do the validation you would have, like the execution portion. And so a lot of times when we think about account abstraction as like a general concept, we also think it's doing a lot of other stuff now. And so that chip is now determining, like, I want to send a bunch of transactions from this account, or I want to send a bunch of calls from this transaction, from this account, all in one transaction. Or I want to recover using some social recovery group that I've come up with.
00:12:15.574 - 00:12:18.470, Speaker B: So that's like another part of the beautiful, beautiful.
00:12:18.540 - 00:12:44.270, Speaker A: And I want to throw this one to Julian. As somebody who's responsible for actually putting some smart contract wallets in people's hands, thank you for your service. How do you think this is going to get rolled out? People generally, and we'll get into the topic as to why people think that everyone will have a smart contract wallet rather than externally owned account in the future. But what's your idea for how this gets rolled out into how do we replace private keys with account extracted wallets?
00:12:44.930 - 00:13:17.770, Speaker C: So that's a very good question. I think the way I see it is that I think Vitalik has been pushing for account abstraction for a long time. And every single proposal has some enable some of the features of account abstraction, but none of them, I think, is the end game. And personally, for example, I like the last proposal, 43 37. But the problem is that it's at the application layer. So we are not fixing what I think is the real problem is getting rid of EOS. And I understand that on ethereum there's so much at stake that such a drastic change will take time.
00:13:17.770 - 00:14:03.194, Speaker C: I think people are recognizing that account abstraction is the future. I think it will happen, but on ethereum, I think it will take time. What we've been pushing at Argent is that I think now we are seeing the emergence of layer twos. And I think layer twos are an amazing opportunity to actually try to test some of these and try to fix some of these limitation of the EVM that we have on l one, because there's much less at stake. And then each layer two, they may favor a different type of trade off so we can explore on different pattern and actually bring account abstraction at the layer twos right now. So this is what we are pushing and that will enable us to better understand the limitations, what we can do. And following that, I think then we'll have everything in hands to actually bring that to layer one and push for account abstraction at really the protocol level on layer one.
00:14:03.194 - 00:14:04.966, Speaker C: That's the way I see the roadmap.
00:14:04.998 - 00:14:24.190, Speaker A: Of account abstraction unfolding beautiful and Joav you're a security reacher at EF so I want to tap into your security mind why are smart contract wallets more secure? Like what security benefits from a user perspective or whoever might else whatever entity might also use a smart contract wallet why is it more secure than our current wallets?
00:14:24.930 - 00:15:25.990, Speaker D: Well, there are many different ways in which it makes you more secure. First of all is a key management. Users don't know how to manage keys, even expert users. And just I think that five years from now if we recall that we used to secure our assets by writing twelve words on a piece of paper, it will seem unreal to us. So I think, for example, being able to add devices to add devices to your wallet so the wallet is no longer associated with some seed phrase you never actually see it but instead you add your phone, you add your computer then if you lose your phone, you remove it and add a new one using your computer. This obviously improves the security because you don't need to manage keys. And then there are things like for example you could say that your wallet is that you can have good usability and spend small amounts easily using your phone.
00:15:25.990 - 00:16:26.082, Speaker D: But if you are doing something out of the ordinary such as sending a very large amount in that case you have to go get your ledger or something, you have to add another signature. So it allows you to have security policies to protect yourself and there are the security benefits of switching to a better signature scheme which we're going to have to do in the future anyway. And since it's programmable you can add any security mechanism you come up with and different users will have different requirements. So having just a single security policy for accounts, which is what we have with mean the security policy for an EOA is if you have the key, do anything if you don't have the key, do nothing. This is not granular enough. So I think being able to have personalized security policies will make Ethereum overall more secure.
00:16:26.226 - 00:17:08.722, Speaker A: And I think the way that I see account abstracted wallets, smart contract wallets, there's this unique relationship with devices and we all have a bajillion devices in our homes. Like when I sit at my computer, I have my computer in front of me, I got my phone and then maybe there's an iPad and those are three devices, each with different levels of security assumptions around them. Like my computer is at home, it doesn't go anywhere, my mobile phone can go anywhere in the world. But all of these things can you talk about the relationship between a device and the wallet and how that can relate to a different level of security, of control, of access, right? So maybe I only want to send $100 with my phone but I can send all of my money with my computer. Can you talk about the relationship with a device and a smart contract wallet?
00:17:08.866 - 00:17:59.590, Speaker D: Yes, this should definitely be a part of the security policy for your wallet. So, yes, you could say that you can use your phone to do small things, but your computer for bigger things. I'm actually not sure. Sometimes your phone could actually be more secure because your computer may or may not have the capability of secure enclaves, but modern phones usually do. Now, the problem is that at the moment, you couldn't use it with an EOA because it doesn't support the signatures that ethereum use. It doesn't support the same curve, but with account obstruction, it becomes possible. And someone actually just built a nice demo of such wallet at the Hackathon here in Bogota.
00:17:59.590 - 00:18:45.730, Speaker D: If you can associate a fingerprint of a specific device and you can have a fingerprint on your device, which is actually verified by a secure enclave on your phone, and then the signature happens inside it, so your phone actually gives you a pretty good security. But in any case, you have to evaluate that. For example, your phone is coming with you, your computer stays at home. So you have to evaluate your unique situation and set up a policy where you decide which device can do what. And maybe sometimes you need to use two of the devices. Maybe sometimes you need to go also get your ledger from the safe. So it's up to you to say to decide how each device is going to be used in your wallet.
00:18:46.310 - 00:19:34.430, Speaker A: I think the important thing to take note from here is that we're using devices to relate to a wallet differently rather than having a different wallet on every single device. And so, Julian, I want to throw this one to you and how you guys are thinking this at Argent. And check my understanding here is like, I've got a wallet here on my phone, I've got a wallet on my MetaMask, on my computer, I've got a wallet on my ledger. There's three different wallets. But now we're talking about three different ways of interfacing with the same wallet, which is a different kind of just organizational structure. So do you think that we're just going to be able to kill most of the wallets, all these throwaway wallets that we use, and instead of having a little bit of cash in some wallet and a medium amount of cash in another wallet, and then, like, cold storage, it's actually going to be the same wallet. And we just have different levels of security of how to access these things.
00:19:34.430 - 00:19:38.290, Speaker A: How are you designing Argent to work inside of this paradigm?
00:19:38.370 - 00:20:08.142, Speaker C: I think the first thing for me and the beauty of account abstraction is that you can choose as a user. So I don't think there's one model that fits for anyone. There are users that may want to have different accounts for privacy reasons. For example. So I think there's not one model that fits all. But of course, in terms of Argent, we like to see the Argent wallet, the main account, if you want, as your identity on chain. And so, yes, having the ability to choose the security associated to the key that's in a different device is of course, very important.
00:20:08.142 - 00:20:49.846, Speaker C: And so at Argent, we are researching a lot of different IDs. For example, now we're exploring something called session keys. It's the idea to have an ephemeral keys to which you can attach very strict policies. So you can literally say this key is valid for 24 hours and it can only call a certain method on a certain contract. And so you can imagine, for example, if you consider that your phone is more secure, because I agree with you, off, I think my phone is more secure than my laptop, but maybe I can actually have a key on my laptop that has restricted policies. And so that key, yes, can do certain action, but I define exactly the type of actions and the rules that are associated to that key. But to answer your question, for me, it's really about giving the choice to users.
00:20:49.846 - 00:21:19.270, Speaker C: And I think that's, again, the beauty of account abstraction is that it opens a completely new design space for what an account can be. And I think we are only scratching the surface of what can be done. At Argent, we see it as your identity, it's your core account. You may have multiple accounts with different rules. For example, it's a good example. If I'm playing an onchain game, I may not want to play an onchain game on which I have, say, $50. In a certain token, I don't want to play that game with the same account on which I have all my savings, for example.
00:21:19.270 - 00:21:26.390, Speaker C: So I think having the ability to have different account with different rules and different logic is actually what account abstraction brings.
00:21:27.290 - 00:21:58.158, Speaker D: I think I just wanted to add that even if for privacy reasons, you want to have multiple wallets because you don't want to DOX yourself everywhere, the fact that we decouple the device and the keys from the wallets means that you can have all of them associated with a fingerprint on your same phone. So you choose which one you're using based on whatever privacy you want to have, but you still use the same device. You don't need a different device for each wallet.
00:21:58.254 - 00:22:22.050, Speaker A: I want to turn this conversation to how we actually get account abstraction implemented at the layer one, because this is going to take an EIP. This is going to take a hard fork to get this into Ethereum. And I want to throw this one to Vitalik, our resident crypto philosopher here. Crypto loves tribes. We got like the layer one tribes. We got the layer two tribes. Are there like account abstraction tribes? And if there are, what do they fight mean?
00:22:22.140 - 00:23:34.378, Speaker E: I kind of feel like the tribeness of account abstraction is a bit overstated, in that I don't really see many competing camps of approaches for, let's say, how to solve the problem of I have a smart contract wallet. And I want to be able to send things from that smart contract wallet without needing some third party to wrap my transaction and pay 21,000 gas overhead or whatever. Right. But the different camps, I think, are more kind of just groups of people that came into the space of improving accounts with different emphasis, right? So the emphasis that I came with is solving the problem of how to make it easier for people to have smart contract wallets with arbitrary validation. Other people came in with the emphasis of solving the problem of how to let people pay for other people's accounts or how to let someone who has USDC only pay their fees in USDC instead of paying fees in ETH. And then there's also the problem of how to let an account do many operations in one transaction and they're not competing goals. Right.
00:23:34.378 - 00:24:35.410, Speaker E: I think they're goals that everyone here agrees that we need a solution that covers all of them. Right? And I think there's different ideas that are slowly kind of converging toward some architecture that actually does is getting better and better at actually fitting together. And in terms of how to get from here to there, one of the differences between EIP 2938 and ERC 4337, right, is that 4337 is an ERC. 29 three eight is an EIP 29 three eight is a kind of boil the ocean. Let's change the protocol now and let's set things right in the protocol sort of solution. 4337 is an extra protocol solution, right, and it's kind of analogous to sort of the roll up centric roadmap in some way, right, which is part of the motivation. There is like the core developers are busy, there's the merge and there's the search and there's the splurge and the purge and some people wants to call single SWAT finality the George.
00:24:35.410 - 00:26:15.554, Speaker E: Because 4337 is an ERC, we can kind of work on it separately, have a small amount of usage, start fairly quickly, get it in tail twos and improve it from there over time. But I guess the one kind of big difference here is that I think over time, especially over the last year, there has been this realization that we do want EIPS, as in things that hard fork changed the Ethereum protocol eventually because we do want to upgrade existing EOS. We want to let existing users that don't want to go through the expense of just completely moving everything from their current account. We want to let them enjoy the benefits of the new system and we want benefits like, say, any censorship resistance guarantees that we get from inclusion lists. So we want that to apply to account abstracted operations. And if we want these different things to happen, then that does require making protocol changes, right? But the good news is that kind of the ERC comes first and the EIPS come later and there's a lot of these kind of great proposals for how to do these EIPS. And there is definitely kind of a deep multi year, multi stage roadmap involved where it starts off in kind of making it friendly for the people that kind of wants to pioneer and really care about getting these properties early and then expanding more and more until finally EOAS may actually finally kind of go away.
00:26:15.554 - 00:26:19.222, Speaker E: And we really do just have smart contract wallets and all the benefits are available for everyone.
00:26:19.356 - 00:26:36.954, Speaker A: So, if I'm understanding correctly, like the current state of account abstraction development is that we haven't yet come to consensus as to what the EIP that we want to put into the ethereum base layer is. We know EIP 1559. We totally wanted that. I don't think there is an equivalent EIP for account abstraction that we have.
00:26:37.072 - 00:27:06.606, Speaker E: There is an ERC. And to be clear, right, it's important to remember that with just the ERC, we can already get to the point where if people wants to replace their entire activity and run it off of account abstracted wallets instead of regular ones, they can do it and it works reasonably well, right? But the EIPS for the second stage of the roadmap, indeed, we do not have those EIPS yet. They're under development. There's lots of different ideas and it's still solidifying.
00:27:06.718 - 00:27:42.634, Speaker C: If I can add to that. I think I was saying some layer twos are actually experimenting on that. For example, if you look at StarkNet and ZK Singh, they are launching with native account abstraction, which is actually inspired by ERC four, three seven. So even if it's just an ERC for the ethereum, it's actually inspiring layer twos that can actually try to implement the next step, which I think will come in a later EIP when we will change it at the protocol level on layer one. But I think it's interesting to realize that it's already there on certain layer twos. If you look at StarkNet, it's still in alpha, but actually it launched with native account abstraction, so there's no more eras. It's actually trying to be the end goal.
00:27:42.634 - 00:27:52.820, Speaker C: And I think that we learned a lot on the Starcrade ecosystem that we can then bring back to the next EIP that will put hopefully 4337 to the one layer down to the protocol level.
00:27:53.430 - 00:28:13.690, Speaker B: If it's okay for me to just make a comment on this, I think that this idea of layer twos experimenting with future potential core changes to the ethereum protocol is really interesting. And I think things like StarkNet is a very interesting place for it to happen because it's very different than what the EVM actually looks like. And I think it's probably the right place for those things to happen.
00:28:13.840 - 00:28:14.598, Speaker E: But I'm.
00:28:14.694 - 00:28:35.786, Speaker B: Still hesitant about understanding how this is going to play out across all of the different layer twos, because we've seen over the last 18 months, there's been a huge push for things like EVM equivalents and having something that's exactly like Ethereum and trying to bring things like four, three, seven into the protocol. I'm not sure how it's going to play out on those different types of systems.
00:28:35.898 - 00:29:36.660, Speaker C: Yeah, that's a very good question, but I mean, we're discussing with some of the team, like Arbitrum, optimism, want to have that EVM equivalence, but they all recognize that they'll also need to have account abstraction at some point. And so they want to capture the EVM ecosystem, but at the same time, they would want to have account abstraction. And so that conversation is on right now, and hopefully we can find a path to make that happen on these layer twos that want to be as close as possible to EVM equivalents. UFC Casing V two, for example, that wants to be EVM equivalent but also wants to have account abstraction. So I think even if you're going for the EVM equivalents, I think it's good to try to push the I mean, modify the EVM a little bit so that you can still capture that compatibility and the fact that you have a common standard with different layer twos, but still try to fix some of these issues if you can. So I think this conversation is on right now. There's no clear path yet for sure, but I do think it will probably happen on layer twos before it will happen on layer ones.
00:29:37.030 - 00:30:19.042, Speaker E: One way to look at how much equivalence you need is kind of from the point of view of the user. Right? So I have my Ethereum wallet, like zero, x, D, eight, DA, blah blah blah. And one of the nice things that the EOAS offer is that one with just the same wallet, the same code, the same key scheme, the same everything, I can just switch to optimism and with send a transaction on optimism, switch to Arbitrum, send transaction on Arbitrum and so forth, right? The other benefit is that I get the exact same address. Like, you can go and send things to zero xdada, blah blah on optimism, and I'm going to have them. Right. Or you could send things to zero, xdada, blah blah on Arbitrum, and I'm going to have them. Right.
00:30:19.042 - 00:31:06.398, Speaker E: And EIP 4337, it does try hard to make that possible. It definitely makes it possible to use the same code and have the same type of contract wallet on all of these roll ups. And because the singleton is created with create two, the singleton is going to have the same address on all the roll ups. And so you're going to be able to anything derived from the singleton, including people's individual wallets, are also going to kind of have the same addresses. Right. So one thing that people ZK, StarkNet and similar systems could do is try to achieve kind of that code and address equivalence. For example, even while experimenting, was trying to make the way they handle operations much cleaner and different.
00:31:06.564 - 00:31:31.866, Speaker A: And I want to go back to what Matt was saying and just to really drive this point home about how layer twos are going to be like the testing bed for account abstraction. Matt, can you just kind of walk us through into the future about how you think this may play out? Like, Zksync does some sort of flavor of account abstraction, StarkNet does a different one, the market decides what they like. We sort of come to consensus as to what features should be pushed down to the layer one. How is this going to work out in the future?
00:31:31.968 - 00:32:36.670, Speaker B: I mean, honestly, I'm just really curious to see how it plays out in the future. I think my perspective is I'm very worried about fragmentation of different approaches. And I think if we think about maybe on a longer time scales, ten years, maybe eventually we'll come to some solution, that's great, and everybody will do it just because all of the other companies will have run out of money and left the ecosystem. But I think I'm very worried about the shorter term, like three to five years. How are we going to be able to bring millions of people into this ecosystem and have really good experiences using applications if every single protocol has a different way of doing account abstraction? I can't imagine trying to support ten different ways of doing account abstraction in Ethers, JS or Web three JS. And so that's kind of like my perspective is like, how can we do this in a way that we avoid the fragmentation? And that's why my perspective is that we should really consider using the EVM on the Ethereum main net as the shelling point for coordination amongst all of these different protocols.
00:32:37.170 - 00:32:52.818, Speaker A: Is there going to become a moment where at some point this turns from like, oh, we'll talk about account abstraction and we'll ideate on it to like, oh, we need to pull the fire alarm and ship this thing? Is there like a fire alarm event potential in the future where we need to get this done?
00:32:52.984 - 00:32:54.420, Speaker E: Starting to ship already.
00:32:54.870 - 00:33:25.866, Speaker B: Yeah, we've had nosis safes for a long time as well. So smart contract wallets have existed. We want to improve the experience of using them. And I wanted to say earlier, I think it's really cool understanding all the different security perspectives of account obstruction and the different policies of different devices. But the way that I think about it a lot more is how can we improve the user experience of using Ethereum? And that's something that I think we're still really lagging behind. And to me, the reason that we're lagging behind is because there is fragmentation across different wallets, different protocols.
00:33:25.978 - 00:34:01.014, Speaker C: From my point of view, I do see some kind of urgency. And for me it relates to self custody. I think self custody today, because of yours is really hard. We all know that. And because of that, a lot of people are actually turning to centralized solution. I mean, if we ask the audience, most of us here, we have a Binance or an FTX or a Coinbase account, even though we are the builders and the early adopters. So my fear is that if we don't find a way to have a good user experience for self custody, then my fear is that the next wave of users may turn more and more to centralized solution and then we'll fail as an ecosystem.
00:34:01.014 - 00:34:14.110, Speaker C: And in my opinion, account abstraction is actually the only way to enable this user experience that can bake self custody, but still make it simple for user. So I do feel a certain sense of urgency.
00:34:15.010 - 00:34:41.974, Speaker B: That's a good point. And I feel like for me the urgency is like how do we make smart contract wallets the default everywhere? Because defaults are sticky. And so if I go to Minta NFT on OpenSea and I create a MetaMask following some tutorial, that's the default that I'm stuck with for a long time. It's very hard for me to migrate to the smart contract world. And so figuring out how to make that the first thing that people see whenever they come onto all of the different protocols is very important.
00:34:42.172 - 00:34:43.240, Speaker C: Fully agree.
00:34:45.690 - 00:34:58.940, Speaker A: Okay, so to my knowledge, the current state of DeFi is unfriendly to account abstraction and smart contract wallets. Can one of you guys explain why that's the case? Why is that the case and how do we fix it?
00:34:59.390 - 00:35:33.318, Speaker D: So I wouldn't say that DeFi in general is not friendly. There are some DApps, some DApps that make it difficult. For example, they assume that you can sign directly with the address and contracts cannot sign. Contracts do not have a private key. So if you need to log in, for example, to openc, if you need to log in by signing a message with your address, then you're unable to log in. And we have an ERC to solve. That a very old one, actually.
00:35:33.318 - 00:35:59.194, Speaker D: 1271, which defines how a contract can validate, can say, is signature valid. So some DApps support it, some don't, and assume an EOA. We need DAP developers to stop doing this sort of thing and assume that some of the addresses are actually contracts. That's like the minimum requirement in order to make it a first class citizen.
00:35:59.322 - 00:36:25.458, Speaker A: So I want to run through some potential use cases just to make things really concrete in the imagination of the people in the audience here and the listeners. So I want each of you to think of the most powerful use case that account abstraction unlocks and how that onboards new people, new utility into ethereum. You each get one, and whoever is going to go first is going to have the opportunity to have the best one. Yo, I'm going to give it to you. What's the best use case that account abstraction unlocks?
00:36:25.554 - 00:36:50.990, Speaker D: Well, there are millions of use cases, some of them quite exotic. I'm tempted to talk about them, but instead I'll just repeat that. Being able to obstruct the signature and to have authentication and authorization obstructed and let the user control it, that's the single most important thing, in my opinion.
00:36:51.330 - 00:37:16.786, Speaker E: I think just to make the concept of abstraction more concrete for people. Right. One of the big use cases is multi SIG wallets and social recovery wallets, right? So multi SIG wallet is pretty simple. You have N keys and you need some N over two or some number of them. So, for example, you have six keys and you need four of them in order to sign a transaction. Right. Most of my money is in a four of six Gnosis safe.
00:37:16.786 - 00:37:51.026, Speaker E: Right. It's public info, it's on ether scan. But then the social recovery wallet is like a wallet where you can sign things and send transactions with one key. But if you lose your key, then there is some other mechanism which itself probably could be a multi SIG. Right. So one thing you could do is choose five friends and three of them can kind of make it up, and that mechanism can change the key of your account if you lose it.
00:37:51.048 - 00:37:51.378, Speaker D: Right.
00:37:51.464 - 00:38:26.606, Speaker E: So the philosophy there is, like in practice, people's accounts getting lost. It happens much more often. It's a bigger problem than accounts getting stolen. And so you can solve that problem without sacrificing any convenience. And that makes sense for a lot of smaller and medium value use cases. Right. So the challenge though, is that if you want the benefits of either the protection against theft and the really hardcore security of multisig wallets, or the easier recovery of social recovery wallets, you have to put your funds into a smart contract wallet, right.
00:38:26.606 - 00:39:12.506, Speaker E: And smart contracts exist and you can do this today. But the problem is that if you want to actually send a transaction, then you have to also have money in an EOA and the EOA has to pay gas or you have to work through an intermediary and then you have to rely on that intermediary. And then what if that intermediary starts censoring or even just disappears or whatever, and you end up wasting gas and there's just a lot of extra complexity involved, which is basically what we're trying to get rid of here. Right. So I think multisigs and social recoveries are one easy use case of abstraction, but then another one is being quantum proof, right? Like when quantum computers come, we all have to get out of ECDSA entirely.
00:39:12.698 - 00:39:14.320, Speaker A: Is there a timeline on that?
00:39:15.010 - 00:39:16.110, Speaker E: Unknown.
00:39:17.970 - 00:39:41.702, Speaker D: It's unknown. But what's great about our current process, even with the ERC, is that we can start moving away from it. We don't have to do it one day. We can start moving gradually, and over time, you'll see less and less wallets relying on ECDSA, so we can start moving there. It's not a one day thing.
00:39:41.836 - 00:39:45.814, Speaker A: Matt, any utilities that Vitalik and Joe didn't mention that come to mind about.
00:39:45.852 - 00:39:49.530, Speaker B: Account abstraction, batch transactions?
00:39:50.910 - 00:39:53.050, Speaker A: Why is that such a big deal? Why do we need that?
00:39:53.200 - 00:39:55.450, Speaker B: Have you ever used the blockchain?
00:39:57.070 - 00:40:04.074, Speaker A: A few times I've been known, yeah. Can you give us a user story about how this is a UX improvement?
00:40:04.202 - 00:40:23.970, Speaker B: As a good core developer, I don't use the blockchains very often, but when I do use the blockchain, I have to sign so many messages to send anything. I have to prove my tokens to go to a contract I have to send them, then I have to prove more tokens to go to a different contract, all for the same application. And to me, it's like we could be making this all a single message to go on chain.
00:40:24.710 - 00:40:36.582, Speaker A: So you're saying that account extraction allows us to produce the UX that people kind of expect there to be in the long term that we don't have today? More or less.
00:40:36.716 - 00:41:23.222, Speaker B: I don't think it's just account abstraction. I think that we could be living in this world today. What I would really like to see is some sort of mechanism for DApps to let the wallet know that I would like to send a batch of operations, and the wallet can determine whether or not it has the capability of sending those in an atomic batch. And so I would imagine that you go to uniswap and you need to approve and then do a swap rather than having that pop up as two dialogues. If you have MetaMask, it could show and say, I want you to sign two different transactions to do these two things to complete the operation that you would want, and MetaMask would send off those two transactions and verify that they both happen. If you have a Gnosis safe or an Argent wallet, it would get that message and it would say, I want you to do two operations, but you have the ability to send them all in one transaction. So now you just sign one transaction, send that off.
00:41:23.222 - 00:41:26.630, Speaker B: That's something that we could just have today that I think we're totally missing.
00:41:27.370 - 00:42:02.674, Speaker C: And actually a good example of that in practice is on the Stagnate ecosystem. There's like NFT Marketplace, and there they've introduced the concept of a shopping cart. So when you go, you can actually do your shopping, in a sense, you want to buy that NFT, that one, that one, and you pay different token. And at the end of your session, you go to your shopping cart, you say, Buy these items now, and your smart contract will orchestrate all these operations. So it will do all the approve on the RC 20 token that are needed, and then purchase all these NFTs exactly. I think the MultiCode is a great example, social recovery is another great example. So I come last.
00:42:02.674 - 00:43:02.406, Speaker C: But I still think something that I find very interesting is the idea of offroad monitoring because I think the problem with the blockchain is that we make users or there are bad actors and it's sometimes very complicated to know exactly what you are doing as a transaction. Typically you'll see some call data or something that is very obscure and it's very complicated for us as a human to actually know the actions that we are making. And with a smart contract or account abstraction you can imagine for example, that you program a second key on your account that must co sign every transaction. So you turn your account in a two of two multisig but then you can choose to give that key to a service that may monitor the operation that you are about to do. And so that service, if it detects that the call data is legit, it's something that is secure, it can co sign automatically, it's transparent to the user. But now you're making a large transfer to an address that you've never interacted with. Maybe it can just ask you to confirm who you are with a second factor like email and SMS or Google Ad or something.
00:43:02.406 - 00:43:23.050, Speaker C: So using account abstraction we can actually bring the flows that normal user are expecting, bring the best of web Two or of the banking world, but actually reproduce that purely on chain. So I think for me it's really multicolored. Social recovery and fraud monitoring are three ways that we can greatly improve the user experience for users.
00:43:23.650 - 00:44:06.540, Speaker A: One thing I'm still uncertain of is how we want everyone to have a smart contract wallet. We assume that everyone will eventually have a smart contract wallet us, everyone that's in this room and also all future users of Ethereum. How does that actually happen? As in who are the service providers? We have somebody like Argent who's producing a smart contract wallet. But what are the other categories of how smart contract wallets get into the hands of users? I could imagine, for example, I'm logging into some web3 game and I need to use a wallet for that. Where does that wallet come from? Who provides that wallet? And maybe that's what Nosisafe is, but maybe not. What are the categories of who's providing all of these wallet wallets to us, all the users? Are there different categories out there?
00:44:07.070 - 00:45:29.780, Speaker E: I think my philosophy on this is that one of the really strong ideas here is that we want to be as kind of active intermediary minimized as possible to the point of basically in an ideal world not requiring any active intermediaries that don't already exist in EOA land. Right? There are kind of act once and intermediaries that could do their thing and then disappear, which are smart contracts wallet authors, wallet developers and people like that. But we don't want to depend on active kind of relaying actors of some kind, for example, right? Which is the status quo, is that you do need to talk to a specific relaying actor if you don't have your own EOA and you want to use a transaction through a smart contract wallet. Right? And I think censorship resistance is a good reason to minimize active intermediaries, just kind of simplicity, but it takes a while to get there, right? So, ERC 4337, it works through an mev ecosystem, so it relies on builders to act as intermediaries. And then the goal of the various kind of longer term EIPS is to kind of constrict that more and sort of protocolize that more and more over time.
00:45:32.170 - 00:45:57.178, Speaker A: Five minutes. We're going to try and find some time for questions. So if you have questions, start thinking of them now. But as we wrap this up, I want to do some call to actions, and there's various different stakeholders in this world of account abstraction. We got core devs, application devs, layer two, teams and users. Each of these people have their own sort of responsibility for getting account abstraction out into the world. So let's start with the core devs.
00:45:57.178 - 00:46:03.200, Speaker A: What do the core devs need to do to get account abstraction done? What do they need to pay attention to? Vitalik? I'll throw that one to you.
00:46:04.130 - 00:46:07.522, Speaker E: L one core devs, I would say not much yet.
00:46:07.576 - 00:46:07.890, Speaker A: Okay.
00:46:07.960 - 00:47:16.546, Speaker E: L two core devs I think, are important for them to be kind of on the ball earlier because I think there's a lot of reasons why L two S are a very natural kind of testing ground for account abstraction. First, because there's just lower fees on layer twos and lower fees especially for computation. So the overhead of account abstraction matters less. They can iterate and they can develop and build a lot of things more quickly. Also, one thing we didn't touch on in this panel yet is that ERC four three seven has this aggregation feature in it which allows basically different signatures of different transactions to get aggregated together into one. It's the same sort of stuff as the aggregation technology that powers the Ethereum beacon chain and that allows so many validators to make their attestations and for those attestations to be kind of packaged together into one little thing that can be verified very quickly. And that's super important on lawyer twos, right? Because on lawyer two is computation.
00:47:16.546 - 00:48:03.080, Speaker E: Data is even more expensive than computation and aggregation really saves on data, right? So for those reasons, layer twos are an even more natural kind of first use case for abstraction than layer ones. And there's a lot that layer twos can do, right? Like layer twos, they run sequencers and they're in the process of figuring out how to decentralize those sequencers. And as part of those processes, making their layer twos support account abstraction and account abstracted transactions. And accounts natively is something that's really important. Right. And then in the longer term, once the layer one EIP start coming in, then monocore developers need to start paying more and more attention to it.
00:48:03.450 - 00:48:08.502, Speaker A: Matt, what's your big call to action to the world? What do we need to do to move the needle forward on this one?
00:48:08.636 - 00:49:03.000, Speaker B: There's two things I would really like to see. My colleague Sam Wilson has started a bi monthly call called All Wallet Devs. I think that if wallet developers are not aware of it, it's an awesome thing to see what the current discussions around improving wallets are and account abstraction is obviously one of them. And I think the second thing is something that we can be doing today to improve the user experience of DApps is this is like creating a new interface for DAP developers to define that they're trying to do a batch of operations together and then allowing the wallet on the back end to decide whether to send that as an individual transaction or as multiple transactions. I think if we do that, then we start to show the core developers that we're really serious about batch transactions in smart contract wallets and I think that that will really improve their feelings about changing the protocol to support that type of technology.
00:49:03.370 - 00:49:05.174, Speaker A: Julian, what's your big call to action?
00:49:05.302 - 00:49:37.550, Speaker C: Yeah, I agree with that. I was going to say I think DAP developers as well. Of course, layer twos, I've mentioned that and Vitalik mentioned that. But I think DAP developers today could start to embrace patents like EIP 1271 just to verify off chain signature. I think just making sure that your DAP today is compatible with smart contract wallet. And as you mentioned, we can extend that to multiple, but I think that would give already a good sign. And that also means that if, ERC, four, three, seven picks up and people build more and more wallet on top of that, they will become more and more first class citizen.
00:49:37.550 - 00:49:50.070, Speaker C: Even on L one, I think they've never reached the point of having full first class citizen. But making sure every single lab is compatible with smart contract wallet I think will make it easier to go on that journey towards full account abstractions.
00:49:50.410 - 00:50:05.454, Speaker A: Yoav, take us home. And also, Joav is the person that actually helped educate me a lot for this panel because I was definitely not prepared more than a week ago. So, Joav, thank you for your help. What's the big call to action that you have to how we get account abstraction into the hands of everyone?
00:50:05.572 - 00:51:26.120, Speaker D: Yeah, so the first thing is what everybody here already said, that DApps need to be compatible with it and not get in the way by requiring signatures. And they can start thinking about ways, of course, batching, as Matt already explained, but even beyond batching, start thinking about ways in which a contract wallet could improve the UX of your application and work with wallet developers in places like All Wallet dev the discord. Start working with wallet developers to add the features to add the features that become possible with this, and for wallet developers to start thinking about interesting ways to use this to improve the life of your users, such as using gas obstruction models. Maybe allow users to allow users who do non financial stuff to pay with a credit card and not buy crypto at all. And there are many things that the wallet could be doing using account obstruction to make the user's life easier. So start thinking about that. I posted a presentation with many cool use cases that you could build using it.
00:51:26.120 - 00:51:35.770, Speaker D: So I think going through this list and seeing what could help your wallet become better may be interesting.
00:51:35.920 - 00:52:05.018, Speaker A: And I think just again, to really just drive this point home. Ethereum is a technology that is working on expressing itself. Starting in 2015, it was limited and now we have proof of stake. Now we have layer twos. Ethereum can express itself a little bit better, but it's not going to be done expressing itself until wallets themselves are expressive as the Turing complete nature of Ethereum itself. And so we will actually not see a complete Ethereum until we all have smart contract wallets. And that is how I will finish this panel.
00:52:05.018 - 00:52:22.618, Speaker A: Panelists, thank you so much for helping me explore this world. I assumed that we actually did not have time for questions, but apparently we do. So I'm going to let somebody else steward that.
00:52:22.784 - 00:52:23.610, Speaker D: Hey, thanks.
00:52:23.680 - 00:52:28.998, Speaker E: I'm just wondering when is Origin planning to become ERC four three, seven compliant?
00:52:29.174 - 00:53:02.694, Speaker C: I guess that's a question for me. So for the moment that's something that we're exploring, that we want to research. But our focus is really on, I would say on native account abstraction on layer twos. And that's why we're building on StarkNet and ZK Singh and I think we kind of have our hands full with that already. Still discussing with other layer twos to see if we can convince them to move forward with that as well. So for the moment we are exploring with four three seven. But again, just to highlight that on Stocknet and ZK Singh, it's actually heavily inspired by 4337.
00:53:02.694 - 00:53:13.130, Speaker C: So it's actually what we are already supporting but on this chain. So at the moment, no plans, but that's for sure something that we are discussing internally and researching.
00:53:14.110 - 00:53:23.360, Speaker B: Jov, this question is for you. I tried reading ERC 4337 the other day and could you explain a bit why it's such a hard read?
00:53:23.970 - 00:54:06.220, Speaker D: Well, first of all, because we are not very good writers, I guess, but we could have written it in a clearer way, maybe even split it to more than one ERC. But the other reason is that it really is complicated. It really is complicated because we paid a lot of attention to keep things decentralized by having a mempool and keeping the mempool protected to prevent Dos attacks that would bring the system on his knees. This made a difficult read. I understand that.
00:54:06.750 - 00:54:22.846, Speaker C: Hi, everyone. I work at Diagon and we're working on bringing subscriptions on Ethereum. We're currently using Metal transactions. Do you think Metal transactions will be less relevant when account abstractions will go live?
00:54:23.028 - 00:55:18.980, Speaker E: So the issue with meta transactions, right, is like one, you need some kind of mechanism to figure out who's going to pay on your behalf and connect you to the person paying on your behalf. And if this depends on specific actors, then that becomes a censorship vector and they might disappear and all of these things. And also a metatransaction requires this extra gas cost of 21,000 per transaction right on top of a smart contract overhead. It's important to remember that, ERC, four three seven, it is similar to meta transactions in a lot of ways, and it uses very similar ideas. But it does add this open mem pool to solve to kind of remove dependence on specific actors. And it adds this kind of batching problem to basically cut the 21,000 overhead to one per block. So I view it as a kind of iteration on the same idea.
00:55:20.950 - 00:55:50.550, Speaker C: If I can just add on that. I think with native account abstraction, there's no more metatransaction because the account can pay transaction fee by itself. So the day if we bring four three seven to the protocol level, there's no more meta transaction because you just sign with the keys, you send your transaction, and then the account will automatically validate. And if he validates the transaction, we'll pay the fee directly to the miners. So if we go to full account abstraction, there's no more need to have a meta transaction and relayers.
00:55:50.710 - 00:55:52.986, Speaker E: Hey, everybody. Yeah. Firstly.
00:55:53.018 - 00:55:53.546, Speaker C: Thanks, David.
00:55:53.578 - 00:55:59.600, Speaker F: I'm a big fan of Bankless. These are great conversations and Vitalik, I'm a fan of Ethereum, so thank you for that.
00:56:00.130 - 00:56:01.790, Speaker A: Also a fan of ethereum.
00:56:03.090 - 00:56:14.722, Speaker F: Somebody mentioned that more wallets are lost than are stolen. So I kind of want to zoom in on the social recovery aspect. I think if we're going to onboard the next wave of users, we can't expect them to have crypto friends or hardware wallets already.
00:56:14.776 - 00:56:15.380, Speaker E: Right.
00:56:16.630 - 00:56:43.050, Speaker F: So I know that Argent has some functionality where you can kind of back up a share of your key to Google Drive. I'm from Ultimate Money. We do something similar with Apple icloud accounts because we've read that 95% are two FA encrypted. So do we as a community kind of accept that we're going to stand on one leg of either Google Drive or Apple icloud if we're trying to onboard people that are really new to crypto? Is that something we accept?
00:56:43.470 - 00:57:48.766, Speaker D: Yeah, I think once you have a recovery built into the wallet, you could use different mechanism. First of all, if you don't have crypto friends and you don't mind some centralization, you could have a. Service like a professional guardian, someone who can verify your identity and then recover your wallet. And you could use centralized solutions like Google Drive or Apple, that's also fine. But if you had to use this with an EOA, it means that Google has control over your account and maybe they lock you out of it at some point. But since you can have as many keys as you want for the recovery, you can use a centralized way for login, like log in with Google or anything of this sort, and still keep a more complex recovery mechanism for the case where they decide to send you, for example. So you can benefit from both worlds.
00:57:48.798 - 00:57:52.050, Speaker A: Here my question was for Julian.
00:57:53.190 - 00:58:36.318, Speaker C: The way we see social recovery is kind of in a sense it's a protocol, so every user will want to use different mechanism to get back access to their wallet. So yeah, we don't expect people to have crypto friends and to rely on your friends. But maybe if you are more crypto expert, you may just want to use a hardware wallet that you control and you can put that in a safe in a bank and if something bad happens, you can use that hardware wallet. So that's one option. You can actually give that key to a centralized service that you trust, but the day you don't trust it, you can just remove it or you can actually combine. So you can use a centralized service and a hardware wallet. I think it really depends on the user.
00:58:36.318 - 00:59:06.250, Speaker C: If you have $50, it's probably okay to give that recovery key to ask a centralized service that you trust to act as your guardian. But of course, if you have millions, that may not be acceptable. So you may want to use two, three hardware wallets that you put in different saves. So the way we see is that recovery is really a protocol and depending on users, we can build on top of that the user experience that they need depending on the use case and where they are in their crypto journey.
00:59:06.990 - 00:59:27.874, Speaker A: Hi, my question is for Julian about the fraud detection option for the urgent wallet. And my question is, does it apply to mev type attacks like bot suites, for example, where if a user has.
00:59:27.912 - 00:59:30.482, Speaker D: Engaged with a phishing attempt and then.
00:59:30.616 - 00:59:39.526, Speaker A: Every transaction after that goes to a multiplicity of different wallets, would that feature be able to detect things on the.
00:59:39.548 - 00:59:42.390, Speaker D: MEV level in the pool, in the mempool?
00:59:42.970 - 01:00:18.740, Speaker C: That's honestly a very good question and something we haven't really thought about. So just to make sure I understand your question, you're saying if we enable this cosigner, for example, can this cosigner anticipate some kind of mev extraction? I guess the answer is probably yes, but to be honest, we haven't researched that. So that's a good question. I don't see why not. Because based on the type of transaction, you can probably assume that some mev will happen. But yeah, that's an interesting point of view and something interesting to research. I don't know if someone else actually a smarter answer than mine to that question.
01:00:18.740 - 01:00:26.126, Speaker C: Feel free to shoot really quick one about MPC wallets. So the use cases that you described.
01:00:26.158 - 01:00:37.186, Speaker E: The main ones with multi sigs social recovery can be solved a bit in a bit of a hacky way with MPC EOAS.
01:00:37.298 - 01:00:38.886, Speaker C: Like the one that I think Coinbase.
01:00:38.918 - 01:00:40.300, Speaker E: Wallet is working on.
01:00:40.990 - 01:00:43.466, Speaker C: Is that good or bad? And if it's bad, what do we.
01:00:43.488 - 01:02:04.834, Speaker E: Do about like one specific thing that the NPC approach can't solve is key changes so they can't really solve social recovery well, right? And the reason is that even if you take your key and you split it into five secret chairs and you give each chair to one of your friends, the problem is that if your friends get hacked even five years later, there's basically no time limit. You have no way to revoke. Once enough of them get hacked, they'll be able to take control of your key in your account, right? So that's one very big problem. And then another problem is that just from a UX perspective, that kind of approach would require the users who participate in basically it will require your recovery partners to have custom software and account abstraction done with smart contracts is cleaner because it doesn't require custom software, right? Like to add a bunch of recovery partners. You just put in what their addresses are, and so whether they don't need to hold some separate thing and make sure that some separate thing is kept safe and accidentally lose it, because the only thing they ever use it for is helping you recover your account. And they just forget. This is something that once literally happened to even me when I was using the HTC wallet that was using NPC recovery, by the way.
01:02:04.834 - 01:03:22.762, Speaker E: Right? I almost lost it because a couple of my recovery friends just upgraded their phones and forgot to carry over the recovery app. So those are the two problems that at least I think the AES smart contract based approach solves better and then also just like theoretical cleanness, right? Like ECDSA is just a fundamentally bad algorithm. The only reason it has any prominence at all in this world is because of stupid stuff involving a Schnorr patent. And ECDSA was invented to just basically get around the patent and that patent has expired years ago and ECDSA has a lot of bad mathematical quirks to it that make it much harder than needed to MPC and much more complicated than needed and we really should be upgrading to Schnor or other things anyway. So just from that kind of theoretical trying to kind of make the ecosystem cleaner over time perspective, I think a smartquatric world approach is better. So for solving dealing with people's needs now, it's definitely valuable in some cases, but I do think there's value, like there are serious value adds that a smart contract based approach adds on top.
01:03:22.896 - 01:04:04.438, Speaker D: Yeah, and wanted to add that an MPC aims to solve maybe recovery or managing the keys, but it doesn't give you things like adding can. It helps you with the authentication of the account, but nothing else. And there are some MPC wallets that run a policy on a centralized server. So you have a server participating in the MPC and the server will make sure that you don't do certain things. But this means that the policy management is done off chain in a centralized way. And I think being able to enforce a policy on chain is a powerful thing that MPC cannot achieve.
01:04:04.534 - 01:04:05.834, Speaker E: Hey, real quick question.
01:04:05.952 - 01:04:08.906, Speaker A: I've been informed that's actually all the time that we have, so we have.
01:04:08.928 - 01:04:10.582, Speaker E: To sadly can I just ask 2 seconds?
01:04:10.646 - 01:04:13.034, Speaker G: Just real quick, just wanted to ask.
01:04:13.072 - 01:04:17.102, Speaker A: I'm not the one writing rules. I don't know one more. All right, cool. We're good.
01:04:17.156 - 01:04:50.154, Speaker G: We can appreciate that. That's love. I'm Russ from 40 acres Dow. We're trying to create self sustaining communities of color utilizing blockchain. And obviously there's a lot of big brains in the building right now, but for the people that have no idea what you're talking about, I'm super curious. There was a wallet out and you could aggregate, you could use DeFi NFT Marketplaces. I'm curious, is there space for things and products like this in the ethereum space? And how do we kind of aggregate that information for people who don't even know what a smart contract is? Of course.
01:04:50.154 - 01:05:11.840, Speaker G: So basically there was a wallet out, right? And you could put there was DeFi protocols in it, there was NFT Marketplaces all in one stop shop. And so I'm curious, are there other products or anything like this being built again to help those who have no idea what smart contracts are or those who just need this information the most?
01:05:12.370 - 01:05:59.710, Speaker A: Yeah, I think smart contract wallets are how we get to a point where we have just intuitive UX. And so there's something called like the grandma test, where if you can give your grandma the thing and she can do it, then it passes the UX test. And smart contract wallets are how we get there. And so to make things intuitive, to get rid of the whole signing with a private key and making wallets behave in the way that we expect them to, just as humans, smart contracts wallets are how we get there. And so I'd say that smart contracts wallets are kind of how ethereum kind of fits into every single corner of the Internet. And it's because we find ways to hook ethereum into some sort of web3 app game NFT Marketplace. And it doesn't feel like ethereum, it just feels like the Internet.
01:05:59.710 - 01:06:04.030, Speaker A: And smart contract wallets are definitely how we get there. I hope that answered your question.
01:06:04.100 - 01:06:04.334, Speaker E: Cool.
01:06:04.372 - 01:06:05.200, Speaker A: Thanks guys.
