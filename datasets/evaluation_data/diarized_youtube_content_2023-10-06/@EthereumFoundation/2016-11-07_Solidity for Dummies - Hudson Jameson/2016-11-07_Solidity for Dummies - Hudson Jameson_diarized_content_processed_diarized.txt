00:00:19.850 - 00:00:42.154, Speaker A: Hello everyone, the ones who are back from lunch. I'm Hudson James. I work for the foundation doing DevOps documentation. Kind of a DAp developer, just kind of organizing Devcon, doing all that stuff. So I'm really excited to be here, and if you've seen me online, my nickname is suptacular on there. And then, Piper, you can go ahead.
00:00:42.192 - 00:00:59.470, Speaker B: Sure. I'm Piper Merriam. Some of you met me yesterday. At the end of the day, I maintain a lot of the python tooling for Ethereum. I've worked with Vitalik a bit on proof of concept implementations for Casper and just kind of general Ethereum developer.
00:01:00.050 - 00:01:31.130, Speaker A: Cool. All right, well, let's get started. We're going to teach you about solidity today. So solidity is a high level language for Ethereum contracts. So what that means is we don't have to go and do like ones and zeros or like low level assembly code or things like that. We have a high level language that makes it much easier for humans to be able to code at a level they to understand and then put it through the compiler into what will come out into the Ethereum network.
00:01:34.110 - 00:02:01.490, Speaker B: Solidity looks a lot like JavaScript, but with types. It's sort of this interesting amalgamation of the two. This is a very simple solidity contract. The highest level thing that we reason about in solidity is the contract object. You can think of a contract kind of like a class if you're used to object oriented programming, and contracts expose some number of functions.
00:02:04.680 - 00:02:37.504, Speaker A: All right, so the code is compiled to the Ethereum virtual machine. You all have probably been hearing about that a lot today. Pretty much. It's just like it takes the human readable code and then puts it into a bunch of garglygook like ones and zeros, and makes it so that the Ethereum network can read it in a way that the computer can understand. Once it's on the EVM, it's completely isolated. So that's something a lot of people forget. But once contract code is on the ethereum network, it can't do things like go and ping the weather.com
00:02:37.504 - 00:02:45.700, Speaker A: and get the latest weather. They have to have a human intermediary. Because it is isolated, there's no outside network or other types of connections.
00:02:47.880 - 00:03:32.560, Speaker B: And the reason for that isolation is that everything that executes in the EVM has to be completely deterministic, which is why you can't generate random numbers easily inside of the EVM. It requires some outside interaction. Contracts are very easy to write, but they're very difficult to write securely, especially if you need to house value or other people's funds. This is a pretty straightforward looking function. We've got a withdraw function for some wallet contract. It checks to make sure that there is enough in the account to withdraw. It sends the funds that they asked to withdraw and then it sets the balance to the new balance.
00:03:32.560 - 00:04:16.050, Speaker B: This will let somebody completely drain this contract of funds. This is exactly what happened to the Dow. I have this line underlined because what actually happens here is that this executes, can execute code on the address that this is sending to. And since the account balance is only deducted on the next line, that means that that contract can call back into the withdrawal method, which will execute that line again. And it can do this circularly, at least until it runs out of gas, which means that if it can get through 100 loops of doing this, it means it can withdraw 100 times the amount that it has.
00:04:22.800 - 00:04:53.092, Speaker A: Oh yeah, I guess this is me. Public functions, let's go over these. They're callable by anybody. So you have this wallet that has an asset on it, and you're like, I'm going to make a Hudson coin, huds coin. And you go in there and you're like, I want anybody who has access to HUDs coins to be able to check their balance. So you make that function public. That means anyone can call it, as we'll see in a second, internal functions are only callable from inside the contract.
00:04:53.092 - 00:05:08.590, Speaker A: So as you can see, there's a lot of parallels to many other programming languages here. Internal functions are good for things that you only want other functions to call so that people can't manipulate them and do weird things with them.
00:05:10.160 - 00:05:44.470, Speaker B: Cool. Your public functions are the API that you expose to the world. You can think of these as your API endpoints. They're the things that you allow outside actors to interact with your contract with. One of the interesting things that is happening right now is that some standards are beginning to emerge for how we write contracts. You can think of these like HTTP web standards. This is the ERC 20 standard.
00:05:44.470 - 00:06:12.110, Speaker B: This is the standard interface that token contracts should implement. There's this small set of functions, but this interface is implemented across all of the major token contracts that are live on the network right now. And that common interface, that standard that has emerged is allowing some pretty awesome things to happen.
00:06:13.840 - 00:07:06.130, Speaker A: So if anyone's been to the etherscan website, it's a very popular Ethereum blockchain explorer. You can go there and they actually have a search feature where if any other contract is using the ERC 20 standard, you can search for tokens within that contract. You'll just be able to put the contract address and it'll tell you your balance and give you everything you need, because it's a standard that's set across any smart contract that implements it. It's very interesting. What we have right here is actually maker tokens, I believe, because they implemented the ERC 20 interface. And there's some variations people use to do different things with ERC 20, but for the most part it's pretty standardized. A lot of people are using the same standard, which is great that the community can come together and do something like that.
00:07:07.780 - 00:07:19.700, Speaker B: One of the cool things that these kind of standards enable is this, which is a completely decentralized exchange where you can trade token pairs on the Ethereum blockchain.
00:07:24.760 - 00:08:04.176, Speaker A: Yeah, so the cool thing about this, why would we want something like Etherex? The reason is it doesn't have a middleman. It's instant settlement, or pretty close to instant settlement, and you control the assets. So a lot of the time you forget things like this happening. And the reason this happened was because it wasn't decentralized. Mount Gox was a bitcoin exchange. They had a lot of people's bitcoin, and then they got hacked and the bitcoin stolen. If we were using something like Etherex right here, that is less likely to happen because the contracts just all talk to each other autonomously.
00:08:04.176 - 00:08:37.720, Speaker A: Within the Ethereum network. Let's see. So solidity is about two years old, and since then the community's come together and made a ton of tools. You've seen a lot of these today from other presenters, and you're going to see more. What we have here. On the left is some integrated development environments. So some of the more popular ones are browser solidity, that's a compiler, and basically full solidity suite for debugging and everything within your browser.
00:08:37.720 - 00:09:18.924, Speaker A: We also have Ethereum studio and visual studio, which are ides and plugins. And then if you look at the bottom, if you recognize any of those symbols, that means that your text editor has support for solidity syntax or solidity compilation or things like that. If you look at the right, we have tools. Rain earlier today went over Soulgraph, which is a really powerful tool. We also have selenium, which is a linter truffle, dapple populace and embark, which are frameworks for building dapps. So really you have a ton of different tools to come in and help you learn because it can be a rough ride at. So yeah, go ahead.
00:09:19.042 - 00:09:54.064, Speaker B: So this is browser solidity. This is magic. You can go to this in your browser right now if you can get the Internet to work and write a contract, compile it here in your browser without any tooling on your machine, deploy it to a test EVM running in your browser without you needing to install anything on your machine and interact with it right here on this website. Browser solidity is an amazing tool and it is a really easy way to get started tinkering around with Ethereum contracts.
00:09:54.192 - 00:10:35.904, Speaker A: Yeah, definitely. So I was going to put a list of resources like, okay, I'm out there in the audience or watching online, I want to get started. What do I do? What we've done is if you go to the Ethereum subreddit, it's like an online form. There's a post that's at the top of the homepage of the Ethereum subreddit, and it has all kinds of links, it has a getting started guide, some of the things that people are going to be familiar with and that are real easy to use. We have our own stack exchange. So if you're a developer with different languages and you use stack exchange, Ethereum has its own stack exchange that actually has over 3500 questions answered. We also have fdocs.org,
00:10:35.904 - 00:11:06.220, Speaker A: which is a community built documentation site. We're looking all the time for people to come in, help out with that effort. And we also have of course ethereum.org, which has a short getting started. And then on top of that, we have plans in the future to expand on maybe things like examples, tutorials. And then of course for solidity there is a solidity documentation that is constantly updated with every release. So it's very good resource.
00:11:06.220 - 00:11:32.292, Speaker A: On top of all that you're in there. It's going to be kind of hectic at first. If you've never used solidity, there's a little bit of a learning curve. So come to our gitter chat rooms and that's going to be, I think, gitter im Ethereum. We have developers and different channels there at all times that will be happy to help you get started with Ethereum. So I think with that, the only other thing I have to remind you guys, go ahead and talk about your.
00:11:32.426 - 00:11:47.252, Speaker B: So I've signed up about 10% of the conference for Devcon, two identities. I'd love to get a much deeper sign up. So send me your information. I don't know if we can get the slide.
00:11:47.316 - 00:12:00.610, Speaker A: Yeah, the slide can come up. But I will say this, if you walked out early yesterday you missed the most amazing announcement, because what we have here is a memento on the Ethereum blockchain that you can pull up or you can.
00:12:00.980 - 00:12:49.868, Speaker B: So I am issuing one of these to every person here that wants one. They won't be issueable after Thursday morning at 08:00 a.m. And the idea is this is an experiment to see what can we do with the ability to let people interact with something knowing that they were here at this conference. There are some interesting ideas that I have for what you could build on top of this. One of them might be if there's another hard fork proposal at some point we could use this as the permissions for voting in one vote to see what this community thinks about that idea, as opposed to the entire community of people who own ether. Might be interesting to see what the difference between those two votes are.
00:12:50.034 - 00:12:51.500, Speaker A: That is really interesting. Yeah.
00:12:51.570 - 00:12:53.970, Speaker B: All you have to do is send me your information.
00:12:56.340 - 00:13:15.344, Speaker A: Yeah, Piper's camped out, like outside at a desk with some stickers. And if you come over there with your Ethereum address, you'll be in a once in a lifetime opportunity. Smart contract to be able to provide your input in future events. Potentially. So super exciting stuff. I'm really excited about solidity. If you need any help with it, find me on Reddit.
00:13:15.344 - 00:13:25.732, Speaker A: My name is souptacular on there. It's a great name. And then Piper's on there as Piper Miriam. Piper Miriam. Find him on there too. He's super helpful. We're nice guys.
00:13:25.732 - 00:13:27.710, Speaker A: Come see us. Thank you.
