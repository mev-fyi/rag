00:00:13.930 - 00:00:41.000, Speaker A: Very exciting to be here. Defcon is just such amazing event. And, you know, the energy here, it's incredible. And just excited to be able to talk to you guys today. So, yeah, I'm Harry, I am the CTO and one of the co founders of Offchain Labs, the company that built arbitrum. And I'm here today. I'm going to kind of walk you through a bit of the history of arbitram and how we got here, where we are today, and then talk some about sort of where we're heading and what the future looks like.
00:00:41.000 - 00:01:36.060, Speaker A: So Arbitram is actually originally came up with really cool history in 2014, actually, before Ethereum had even launched. One of our co founders, ed, had the idea of, hey, this thing is really cool, but it doesn't seem like it's going to scale now. At the time, it was very early, and the idea ended up sort of forgotten to history for a little while until in 2017, we started working on it. At the time, we were at Princeton University, academics thought, hey, this is really cool and interesting, and it seems like there might be something that'll really grow here. And we started out, we wrote a research paper back in 2018. It's crazy because it feels like yesterday to me, but it's almost ancient history in crypto time. And then managed to somehow, and I still am not completely sure how to found a company around it and share it with the community.
00:01:36.060 - 00:02:21.450, Speaker A: So at that point, we had this idea we were building back in February 2020, just around East Denver. We actually had the first arbitram testnet. It was a lot different than it is now, actually. We started with technology that looks a lot like, looks more like and included features like our Nova chain has today, which I'll mention a little bit. But it was not a roll up. It had a committee, it had sort of off chain agreement, but it had a lot of features like it has now and doing application specific chains. So, interestingly, sort of a lot of where we are now, it was too early then, but there was sort of a lot of ideas that have been bouncing around that I think are now sort of coming out as really popular.
00:02:21.450 - 00:02:38.542, Speaker A: And then we went from there. We launched testnets. We figured out arbitrary contract deployment. We figured out arbitrary messaging. We actually got our main net out. And this was back in May of last year. We launched our main net to developers only.
00:02:38.542 - 00:03:04.370, Speaker A: We had a great few months there, and then in August. So over a year ago now, we launched on Mainnet. And that is how we ended up building Arbitram. One getting it out there. It's been an incredible time since then, but the building never stops. If you stop in crypto, you might as well, you know, you're done. Nothing is ever sort of, you know, research always continues.
00:03:04.370 - 00:04:32.414, Speaker A: No technology today will be sort of, it'll all look ancient in five years. And kind of arbitram, when we launched, already looks ancient compared to arbitrum, where it is today, because this last year we worked on our nitro upgrade, which I'm going to be talking about some today. We launched our Nova chain, which, as I said, sort of actually takes a lot of ideas from our original paper, and sort of the world is now, I think, in a position where they make a lot more sense than they did then. We went through a really sort of challenging and interesting thing, which was the live upgrade of our arbitrum chain to an entirely new technology stack. And it was really interesting to us. We did it kind of a couple of weeks before the merge, and it was essentially our merge in that certainly not the same amount of coordination necessary, but the idea of kind of taking a technology stack and somehow, while with a running system, actually kind of replaced the technology underneath it with a newer version, with a more powerful version that allowed it to be cheaper, faster, all sorts of good stuff, which has made it for a really exciting year for us. So arbitram, one just to kind of jump into like, well, what is this thing I've been talking about? I walked you through the, you know, it's nice to sort of dig in a bit more, talk high level, what does arbitrum provide? Why should you care? Hopefully most people here already know, but it's certainly nice to say low cost transactions security rooted in Ethereum.
00:04:32.414 - 00:05:22.020, Speaker A: So inheriting security, rather than trying to have independent security, which is really powerful, which is what roll ups give us, and really full compatibility with Ethereum, which is the thing that only optimistic rollups, at least today, can provide, and means that sort of tooling languages, everything just works. And it's been really huge for developer adoption. It's meant that the learning curve and the difficulty of applying on Arbitrum has been incredibly low, and it's how we've been able to get so many people involved and have so many people benefit from the technology that we're building. So just a couple of stats, and this is actually slightly out of date because the market is down, and this slide was made before the. So I think it's more 2 billion plus now, although the amount of value in ETH, I think has increased. So it depends how you look at it. But Arbitrum is going strong.
00:05:22.020 - 00:05:50.614, Speaker A: We have a huge amount of adoption, huge amount of projects, huge amount of users, and it's just been sort of incredibly thrilling to watch. It feels as though it's been like forever now, but it was only a little over a year ago that this all became possible. We have a huge ecosystem. We have kind of native apps. We have Ethereum Dapps that have been on l one and started out there, but then have migrated. We have tons of infrastructure support from all sorts of different companies. Shout out to tenderly.
00:05:50.614 - 00:06:48.862, Speaker A: That just launched full arbitrum support recently, which was very exciting. And Arbitrum is becoming a major part of Ethereum. Two kind of interesting charts here, one being, oh, and it's not rendering very well, but you can look on Etherscan yourself. One being that the arbitrum sequencer is one of the biggest gas spenders on Ethereum, that we are now sort of using a significant amount of l one resources in order to power the roll up, which is really exciting and also very exciting. That that will hopefully go way down with 4844, which I won't get to talk about too much in this talk, but is extremely exciting. That, and the other thing being the amount of ETH that's just in arbitrum, that our bridge escrows funds that are deposited in the system, and the amount of funds in that bridge is a very kind of very significant chunk of eth, which is crazy exciting. And then the other thing to look at, and this is sort of just very exciting and also has been kind of vastly improved with nitro, is how cheap it is to use.
00:06:48.862 - 00:07:21.638, Speaker A: I think we're on average coming in at somewhere between kind of ten x and 50 x price reduction compared to Ethereum. This has gotten better with nitro as we added compression. L two costs are quite low because of all of the efficiencies of the system and the fact that kind of the gas limit can be quite high. And so you can see we have here just l two fees, which is a very nice site to look at. You can see that we are coming in sort of just a couple of cents to transact. In the simplest case, we're doing eth transfer. And even smart contract execution is very cheap and easy.
00:07:21.638 - 00:08:08.450, Speaker A: So, I mean, that's one thing always to look at, is essentially eth transfer. It's easy to be cheap, but also to be cheap with contract execution, where users can use a lot of gas and it still comes in cheap, is really important. And I think one of the areas that I'd say is sort of, especially, of course, this presentation and the last one, obviously, for people who saw both, are covering kind of similar ideas. And I think this is one place to distinguish optimistic roll ups, is that we can do a lot of computation, a lot of execution at very low cost, and just sort of for roll ups in general. And this is sort of general across ZK rollups, across optimistic roll ups. But I think it's really important to talk about is just looking at sort of what roll ups can give you versus side chains. So with roll ups for data, we are using Ethereum, and we're depending on Ethereum for data availability.
00:08:08.450 - 00:08:42.820, Speaker A: All transactions get posted, unlike side chains, where kind of the data is separate. Maybe they're posting headers back, but it's an independent system. I might cut for a second, but I'm back. We have l one to l two bridging that's enforced through the security of the roll up. And that's sort of one of the most important features of roll ups to me is the fact that the bridge is part of the system. There's no sort of independent multisig, no independent bridge mechanism. The bridge is the roll up, which is really fundamental, as opposed to sort of needing some sort of messaging layer that's independent from the security system.
00:08:42.820 - 00:09:17.338, Speaker A: Roll ups use fraud proofs. Well, validity or fraud proofs for optimistic roll ups. Fraud proofs, of course, which means that anybody can prove the correctness of the chain. And it means that basically you don't need two thirds honest. You don't even need half honest. You only need one honest validator in order to secure the system, which is an incredibly powerful property, as opposed to needing. And then just to mention a little bit, I'm mostly talking about the roll up today, but I want to also mention Nova, which is sort of our kind of version of arbitrum.
00:09:17.338 - 00:09:59.238, Speaker A: But with the data availability committee, there's some really interesting trade offs here. And it's kind of a very active design space that I think the whole roll up community is exploring, which is ways to make data cheaper. Posting to Ethereum is the expensive part. And so being able to move that off chain by having a committee where you're not worried about a majority, you're only worried about a couple on that committee. Being honest is a really powerful thing, and it's what allowed us to be able to offer a platform that can really be competitive with sort of other non roll up systems which don't have the cost of posting to Ethereum. And it's an interesting trade off. It does make some sacrifices in the way we think about it, is that we're not competing with roll ups.
00:09:59.238 - 00:10:31.750, Speaker A: We think if you can afford a roll up, you should use it. What we're competing with is other solutions that don't have that level of security and trying to provide something more secure than they are now. Just a little bit about sort of how nitro works and sort of how to imagine the system a lot of times with roll ups because it's so compatible. It's kind of a black box. You have the RPC, you point at the RPC, you use it just like Ethereum, and that's it. But it's really, I think, valuable to understand what's going on and really important. So we've split it up into a number of steps and we have iterated on this a lot.
00:10:31.750 - 00:10:55.520, Speaker A: How do you explain this thing? It's complicated. There are a lot of different pieces. I think the latest iteration is one that we're pretty happy with. So we start off by talking about sequencing. And this is probably the role of the sequencer is one that's sort of most well known in how roll ups work. Sequencer is a node that orders transactions. It receives transactions in, it puts them in an order and then it runs them.
00:10:55.520 - 00:11:33.254, Speaker A: It evaluates state transition function and it produces blocks. Well, that basically sounds like how Ethereum works, if you replace sequencer with miners. Although for the sequencer there's one entity rather than a lot of them. The interesting part is in parallel or slightly trailing the ordering of transactions, the sequencer is also batching and compressing those transactions and posting it to the l one chain. Now one key thing to understand here is that the sequencer is not attesting to state routes. The sequencer is not making claims about what the result of executing those transactions are like, what the result is. All it's doing is saying these are the transactions.
00:11:33.254 - 00:12:30.682, Speaker A: So there's no such thing as sort of claiming something valid. Sorry, claiming something invalid. You could post an invalid transaction, certainly, but it would just be ignored by the state transition function and rejected, and the sequencer would be out some money, but it wouldn't have any other consequence. And so that gets posted to the l one chain and then picked up by the actual roll up security mechanism, which I'm not going to be able to get too much into in this talk, but there's some great material about online. So what does this mean in terms of finality? Which is one of those important questions because you have these systems and you have, when Metamask says, okay, the transaction is in a block, but that's not enough. Finality is this really important question, which is when can your transaction be reversed? It's one of the things that, with the merge, has changed a lot for Ethereum in very interesting ways. And sort of arbitram has its own notion of basically how you can tell when a transaction is final.
00:12:30.682 - 00:12:55.746, Speaker A: And so we split it up into three phases. We have soft finality where the sequencer said it's the order. If the sequencer is honest, that's what the order is, but you're trusting the sequencer. And so for many applications, this is actually pretty good. Currently the sequencer is being run by us. Long term, the sequencer will be decentralized over a number of parties. No need to trust it, but you can, and a lot of people do.
00:12:55.746 - 00:13:56.402, Speaker A: After that is kind of the really important mark, though, which is when can you actually not trust the sequencer? Because trust, if you just trust it the whole time, it's a centralized system, and particularly for kind of exchanges for anybody doing cross chain stuff, you really don't want to introduce any trust assumptions. And so for that, basically the idea is that after the sequencer has posted a batch on chain, the order is set. Once the transaction posting that batch itself has l one finality, the system is completely deterministic, so any node off chain can get a guarantee of what the current state of the chain is based on batches posted. And so if you're familiar with optimistic roll ups, we have, and this is the last phase, the certification process, which takes seven days. The only thing that's for is to prove back to Ethereum what the result is. Because after ten minutes, after a batch is posted and finalized on l one, anybody in the world looking at the chain other than Ethereum can know, and the reason for this is really simple. Ethereum can't actually run all the transactions because then it wouldn't be a roll up and then it would be expensive.
00:13:56.402 - 00:14:55.194, Speaker A: Ethereum is not running them, we're using fraud proofs. But off chain, anybody can just run the transactions themselves and calculate the result. So now that we have that down, what is the state transition function? I mentioned it quickly, but it's sort of a very core part, and that is basically with nitro. We now have essentially a wrapper around the kind of core geth implementation of Ethereum state transition function, which means our functionality can be essentially identical with geth. We don't need to worry about corner cases, we don't need to worry about weirdness and about matching implementation specs, because the guest team does an amazing job of that. And we can just lean on their work and on guest's correctness for our correctness, which is really valuable because it's incredibly hard to get all of those corner cases correct, and we don't need to. And then I think the last part that I'm going to talk about today is how execution and proving are different, which is really interesting and really where we can get most of our performance from.
00:14:55.194 - 00:15:38.358, Speaker A: And this is something actually that changed with nitro. Before nitro, there was a VM, it ran transactions, a result was produced, and that was also a proof that's very inefficient, because proving tends to be something that's very slow with nitro. Instead, we split up these processes. And so we have basically one core code base compiled in two different ways. One to run at native speed on your computer at exactly the same speed any EVM chain can, and one compiled to WASM and used for proving both from the exact same code. So there's no need for kind of multiple implementations. There's no need to worry about is the client in sync with the prover and all sorts of weird edge cases you can get into there, it's using the same code.
00:15:38.358 - 00:16:34.310, Speaker A: And this is, and I like to show this slide just because when we first started showing it, I think it was sort of very recent. Now it's two years later, which is kind of insane, which is really kind of how we ended up here and how I think the Ethereum community came to this path, which is the idea that roll ups are the way that Ethereum is going to scale. And I think that's sort of really important to us. And really the way we think about it is that, yes, there are multiple different technologies. Yes, we're all building, but kind of really what we're doing is we're empowering Ethereum to actually kind of be competitive against other alternative blockchains, since those two systems in combination can do much more than other blockchains can do alone. And then just at the end, I wanted to mention, so what is Nova? I mentioned it once, it's got this other system. All Nova is, and this is really cool, is adding this data availability committee.
00:16:34.310 - 00:17:15.814, Speaker A: So otherwise the diagram is exactly the same. It's just what I explained. But rather than batching and compressing and posting to l one, we instead batch and compress, hand it to a committee, have them generate signatures, and post those signatures to Ethereum, which is how you get so much cost savings when using the Nova chain. But why it has an additional security assumption compared to Ethereum. And then I just wanted to wrap up a little bit by talking about sort of, I talked a lot about where we are and sort of what's great about the technology. I want to really talk about sort of where the technology is not yet and what still needs to be done. And this is something that's been sort of a huge effort for us to try to figure out.
00:17:15.814 - 00:18:04.082, Speaker A: There's so much going on, there's so much complexity that really sort of keeping people aware of kind of the status of this technology, of where we are, is really important. L two beat for anybody familiar has done an amazing job with this, and I would highly recommend anybody who hasn't to read through their security analysis, which they've done on all the major roll ups, but just to talk about kind of where arbitrum is in this regard. So arbitram is, I think, right now, fair to say, the only optimistic roll up in production with fraudproofs, which is incredibly exciting and which was, we have been since launch and is really core to us to actually lead tech. First. We come from an academic background. The tech is important, but it's not a full roll up yet. And I wouldn't want to consider it that because for arbitram, validation is currently permissioned, which is one of our big priorities for this coming year, is to drop permissioning.
00:18:04.082 - 00:18:33.770, Speaker A: Now, it's not just us. There's a great set of validators. I think, actually in the coming weeks, we're going to do an announcement where we list all the different entities that are currently validating the arbitram chain, but having it be fully permissionless so you can truly make good on the promise. If anybody can force it to be, correctness is critically important. Next is the sequencer. Fast finality guarantees. They're very useful and in practice, rear running the sequence now, which is fine as a short term solution, but these guarantees only hold if you trust that sequencer.
00:18:33.770 - 00:19:56.538, Speaker A: And so getting a more distributed system where you can kind of have a much stronger guarantee that the ordering you get quickly will definitely be the ordering you get when those batches are posted on chain, is a really important step forward to, again reaching sort of this real promised future. And the last one, and I think this is sort of the hardest issue, and I think the biggest sort of discussion and one that's sort of really important and has been happening a lot here, is how do you think about handling critical bugs in these systems that fundamentally, this is sort of a really scary process. If Ethereum hits a bug or bitcoin hits a bug, they will fork and fix that bug because it's in the core protocol, and those protocols can fork. But what do roll ups do? Roll ups are smart contracts, and so figuring out sort of if Ethereum would fork and fix an issue in arbitram, that would be amazing. But I think that's a long way to come, and that's sort of what you get into when you imagine enshrined roll ups, which is a whole nother conversation, but how to do sort of without that in a way that maximizes decentralization while also protecting ourselves from the risk of bugs. Because anybody who's sort of extremely confident they don't have bugs today, I think is overconfident. And sort of figuring out what the balance here between sort of necessary critical emergency paths and security for users is a really important question.
00:19:56.538 - 00:20:41.850, Speaker A: And I know just sort of shout out to one idea that Vitalik's been running with a lot recently. There's some really cool work being done around the ideas of having multiple provers, and having a majority of those provers need to all agree, because then if one of them has a bug, as long as the other one doesn't have the same bug, then they can be checked for each other. And if you have multiple independent implementations, then you get a lot of the same security benefits that client diversity has for Ethereum, as for roll up security, which would be a really big thing. So, yeah, thank you all for bearing with me through this, and I hope it was interesting. Been a total blast being here. And, yeah, I think we should probably have a few minutes for questions. Hey, thanks.
00:20:41.850 - 00:21:36.460, Speaker A: This was great. Do you see? Optimism's bedrock and arbitrum's nitro converge in the specifications? So there's absolutely been a lot of kind of very interesting convergence between arbitram and optimism over the years. Both projects, obviously, that have been building for quite a long time. I don't think this is happenstance that we've learned from each other and kind of design models have shifted. I'd like to say, and take this with a grain of salt, because I'm obviously biased, that sort of our initial design was much more influential, particularly interactive fraud proofs, which were a mechanism that we have been kind of arguing for, for years and finally won out on, versus the alternative, which was on fraud proofs, which kind of was the original optimism design. So I think there's a lot of alignment there, and a lot of coming together, and I think there's a lot of room for standardization. Yeah.
00:21:37.150 - 00:22:00.100, Speaker B: Hi, Harry, thanks very much. Just on the last topic you were talking about, about critical bugs and how you could fix them and the sort of issues that raises. I was thinking about what Danny was talking about in his talk in the opening day. Minimizing governance. Do you see any prospect of breaking out the arbitrum design into multiple components where a bunch of them are immutable and you're able to restrict the governance to just a small part?
00:22:00.710 - 00:22:59.798, Speaker A: No, it's a really great question, and I think it's something that sort of, as we are now kind of in, and I'll say kind of for context, nitro was our biggest priority for a very long time because it really kind of was solving key performance issues that users were having on the network. I think our next priorities are all around really deep diving on these questions of exactly how much can you minimize. Upgradability is a really tricky thing because a lot of the time, if anything is upgradable, then that component could be captured. And so really figuring out sort of like if there are ways to sort of modularize your security in a way to create protection is sort of a really interesting open ended question. So, for instance, a modular stack, which is just a set of layers on top of each other, doesn't really help there if some of them aren't upgradable, because if you control an entire layer, chances are you can do whatever you want. So figuring out sort of what arrangements there are to minimize that, I don't have a great answer, but it's a really interesting area for work. Hey, thanks for the great talk.
00:22:59.964 - 00:23:09.906, Speaker C: So asking kind of like a spicy question, what is the core reason why you are still maintaining a whitelist on the fraud proofs? And then if that's for gath reasons.
00:23:09.938 - 00:23:11.446, Speaker A: Or like DOS reasons or whatever, is.
00:23:11.468 - 00:23:23.420, Speaker C: There a reason you wouldn't deploy a version of arbitrum on something like Gorely that has non whitelisted fraud proofer so that you can increase kind of the confidence of people by able to generate fraud proofs or at least run that mechanism themselves?
00:23:23.790 - 00:24:02.906, Speaker A: No, it's a great question. No. And I really appreciate when people ask critical questions, I think a lot of times in this space there's too much trust that's put into teams, and it's really important to be skeptical. So there's a few different reasons. I think kind of both the sort of performance of the roll up protocol as many parties come in and sort of confidence in sort of the underlying fraud proof mechanisms, which have been growing over time, are sort of kind of core reasons. I think that in this coming year, and I fully expect within the next six months, we will have permissionless fraud proofs on Mainnet. As to why not? Gorilli it's an interesting question.
00:24:02.906 - 00:24:34.750, Speaker A: We totally could. I think the main argument against it is that having the code on testnet and the code on Mainnet be exactly the same is the best way to sort of minimize the chances of bugs we have. If you're interested, a large amount of fuzzing that sort of has been done on the fraud proof mechanism itself, which is obviously sort of not very visible to users. But there is quite a bit of it. Would be definitely happy to point at that. Thank you so much, Harry Kalaner. Please give him a big applause.
