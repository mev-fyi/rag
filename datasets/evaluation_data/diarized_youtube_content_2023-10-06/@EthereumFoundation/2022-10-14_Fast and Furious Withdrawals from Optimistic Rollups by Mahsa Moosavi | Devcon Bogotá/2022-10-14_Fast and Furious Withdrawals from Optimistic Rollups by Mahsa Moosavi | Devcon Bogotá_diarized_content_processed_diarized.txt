00:00:13.370 - 00:00:46.566, Speaker A: My talk today is going to be about fast and furious withdrawals from optimistic roll ups. So a little bit about myself. My name is Massa and I'm a PhD candidate. I'm doing PhD at Concordia University with Jeremy Clark in Montreal, and I'm also integration engineer at the Offchain Labs. All right, so what I'm going to talk about today is research that I was doing during the PhD. And it kind of co located with the time that I was doing the job at the off chain. So it's kind of a collaboration between the folks at the Offchain and Korea.
00:00:46.566 - 00:01:32.730, Speaker A: So it's a research we are particularly interested in solving a research problem. But before I dive into the details of the problem, I want to take some time and talk about how roll ups work in general and how optimistic roll ups work. So you might have already heard from other folks during the conference, but it's always good to keep refreshing and make sure everybody's on board. So let's start with the question of why is ethereum slow and expensive? So we know ethereum is slow. There is an scalability problem with ethereum, and it's really a fundamental issue. And why there is a problem is that let's say you have a function that you want to get executed on an input x. And if it was a cloud environment, the cloud service provider would give you the closest node in the network.
00:01:32.730 - 00:02:20.602, Speaker A: And then what happened is you send a function to the node, it would execute the function for you, and it would give back the result, and you learn what the result is. But on a blockchain, because we care about trust and integrity, we can't really rely on one node to execute everything for us. So what happens on a blockchain is you send your function to a node, and what that node does is actually relays your function together with the input to all the nodes in the network. And what happens is then all the nodes in the network execute your function. So it's literally like you have to pay for each and every node executing the function for you. And then it takes some time because they have to run a consensus algorithm among each other so that they could all agree on the same output. And it's only that moment that you can learn the result.
00:02:20.602 - 00:03:18.070, Speaker A: So that's really why it's so inexpensive. Okay, but why is it that every node has to compute everything? So the answer is because they have to make sure that it's the correct thing. So let's say I have a function, I execute it for you, and then I come to you and I'm like, here's the output. So what is the most straightforward way for you to actually verify if I'm saying the correct thing? So you have to go and compute the function yourself, right? So the question people have been asking in terms of scalability of ethereum is that. Is there any way I can convince you that I've done the execution correct without you having to go and execute everything yourself? So there are two main approaches to tackle this problem. The first one is you can actually throw some math at a problem and you create kind of a mathematical proof. So you run a function, you get the output, and then you kind of create a cryptographic proof.
00:03:18.070 - 00:04:07.370, Speaker A: You hand it to me and then I can actually verify the proof and see if it's the correct thing or not. So if verifying the proof is less work than actually having to execute everything, then I actually save some money and time, right? So this is how ZK rollups work on a high level. So the way a ZK rollup work is you actually send a function to a node, the node would execute it for you, and then they create a cryptographic proof saying that this is the correct output. Now, generation of this proof takes a long time. It even takes like thousand times or even million times longer than when you have to compute a function yourself. So that's kind of a hidden cost. But once you have the proof in hand, you can actually go and send it to the network and then verifying the proof is really nothing.
00:04:07.370 - 00:05:14.080, Speaker A: So it's really a cost effective solution, especially if you're one of those nodes that have to verify those proof. And the second solution is to use kind of like economics. So I'm like, I execute this function and here's the output and here's a million dollar worth of ETH backing my assertion, and it's open for you to dispute. Anybody can come along and they can prove that it's a wrong output, but they have to stake money as well. So the way it works is, let's say Alice is saying what output is right, bob is saying the other output is right, and then there's a dispute and disagreement, right? And it's only in that point that ethereum goes back to a normal blockchain mode where every node has to execute everything. So this is how optimistic roll ups work. And we call it optimistic because we're really optimistic that not every node has to compute everything because really nodes always assert the right output and you see why.
00:05:14.080 - 00:05:51.034, Speaker A: So the way an optimistic roll ups work is that I execute a function and I put an assertion, I stake on that. And let's say Bob is coming and he says this is the wrong output. So he files a dispute. So what happens is ethereum would be like, hey, I know you guys are disagreeing on this output. I want you to pinpoint me to the exact step inside the computation where you started to disagree. So maybe you were fine for the first 30% of the computation and it's only this little step where you started to disagree. So it's actually going to verify that little step.
00:05:51.034 - 00:06:35.930, Speaker A: So it ends up being very cost effective, even if Ethereum has to step in. And that's why, actually, it's really not easy to get away with a wrong output because everybody knows that at the end of the day, ethereum can come along and it can settle things and you can lose money. Actually, the only way you can get away with a wrong output is that nobody's watching the protocol. So at least one honest party watches the protocol, then you can never get out of it. And yeah, this is how optimistic roll ups work. And in real world, it never happens. The dispute in Arbitrum, there's never been a dispute before.
00:06:35.930 - 00:07:35.770, Speaker A: So let's see how it works on Arbitrum on a smart contract level. So what happens is Arbitrum puts two smart contract on the L One inbox and outbox. And what Alice does is she wants to execute some function, right? So what she does is instead of putting the function on L One and having the L One to execute everything, she puts a message saying that, I want this function to be executed on layer one. And it's only the inbox contract is going to record the fact that Alice wants this function to be executed. So what happens is somebody outside L One comes along, they dump the contents of the Inbox smart contract on L2, and then they going to execute everything on the Robos. And it's really based on how they were sorted inside the Inbox smart contract. And then they're going to update everybody's account on the Robos and then they put the output of this execution inside the outbox smart contract in the form of an assertion.
00:07:35.770 - 00:08:07.490, Speaker A: So an assertion is basically a fingerprint of the latest state of the ARBOs. So Ethereum doesn't care what is ARBOs or how ARBOs works. It actually works a lot like Ethereum. It runs a blockchain, it has blocks, it has miners, we call them validators, it has block explorers. But Ethereum doesn't care about anything about that. It only cares about, like, here's the list of functions that I'm seeing that are going to be executed on layer two. I want to see the output of this execution.
00:08:07.490 - 00:08:42.306, Speaker A: That's all it cares about. So we have to wait for seven days because we want to make sure that everybody have time to come along and they react to it if there's any dispute. And if there's not no dispute, it's going to be finalized. So let's say Alice wants to do something slightly different this time. She wants to withdraw 100 ETH from l Two. And to make that happen, Arbitrum has to introduce a smart contract which is called Bridge. So Bridge's job is basically to escrow whatever tokens or Ethers people want to move to the L2.
00:08:42.306 - 00:09:02.202, Speaker A: So if Alice wants to withdraw 100 Ether from L2, it means that she has previously moved 100 Ether to the Ros. So what Bridge does is, hey, Alice, I know you're moving 100 ETH to the L2. That's fine. Just give me 100 ETH. I'm going to screw it for you, and then I'm going to mint 100 ETH on L two out of ten air. You'll be the owner. Do whatever you want.
00:09:02.202 - 00:09:49.938, Speaker A: Go ahead, transfer it to Bob. And the end of the day, what I care about is somebody comes along and they want their Ether back from me, and that's called a withdraw transaction. Like any other transaction I just described, alice puts a message for the withdrawal transaction inside the inbox, and Arbitrum does it things. So, yeah, somebody dumps the contents of the inbox on the robos, it gets executed, and then the assertion would be placed inside the outbox. Now we have to wait for seven days so that we make sure that the assertion is finalized and our withdrawal transaction can go true. And only in that case, when it is finalized, alice knows that her transaction is in assertion number 20. She can go to the outbox, and she'll be like, hey, Outbox, this is the assertion.
00:09:49.938 - 00:10:08.986, Speaker A: It's just finalized. It's sitting there for you to go and see. Go check it, please. And then if you're happy with that, I want my hundred ETH back from the bridge. So outbox is happy. Bridge would give back the Ether to Alice, and then it's going to burn those on deal two. So here's the problem I'm sure you've noticed.
00:10:08.986 - 00:10:39.420, Speaker A: Withdrawals take seven days to be finalized, and it could be even longer if there's any dispute. And although there's never been a dispute before, but there could be, and people really don't want to wait for seven days. Sometimes they have a pressing reason. They want to really do something with their Ether. But intrinsically, you don't want to wait. And then seven days is just really an arbitrary number. But there should be some time window for people to pay attention to the protocol and react to it if something happens.
00:10:39.420 - 00:11:28.040, Speaker A: But something interesting that we noticed is on Arbitrum, let's say there's an assertion that you're just looking at it for the first time, and you're trying to figure out if it's going to be finalized or not. So it actually happens. If you run a validator on Arbitrum, what happens is what is validator? It's just a software that goes through the inbox transactions one by one. It's going to execute those, and at the end of the day, it's just going to compare the output of this execution with the state that is being asserted. So if you run an Arbitrum validator, you can be 100% sure that this transaction is really going to be finalized. The assertion is going to be finalized. So we found that this is really interesting that we can leverage to get a relief of this pain point of having to wait for seven days.
00:11:28.040 - 00:12:42.890, Speaker A: So the question we were asking in this research is, can Alice withdraw 100 east from L2 back to l One without having to wait for seven days. So we have come up with four different solutions in this work and I'm going to go through them one by one and they actually get better as we go through. Okay? So the first solution is Alice can actually use centralized exchange like Hop, right? So what she can do is she can go to the exchange, she can trade her 100 ETH on L2 with the One on L One and it's really easy. So these centralized exchanges, they have piles of ETH on both L2 and L One and you can actually trade with them. So this solution works, a lot of people have been using it, but the problem with that is it's centralized. So now we ask ourselves, is there any way we can do it in a decentralized way? That's where we go to the second solution. So the story is Alice is holding 100 ETH on L2, right? So if it happens to be somebody somewhere that has the exact same amount of ETH on L One and is willing to trade that with Alice, then they can do something called atomic swap.
00:12:42.890 - 00:13:35.034, Speaker A: So I'm not going to go through the details of what atomic swap is, but it's basically like a little of crypto combined with smart contract that allows you to basically do transactions on two different chains at the same time. So it's like Arbitrum here is a different chain than Ethereum, right? So it's like both Ellis and Bob, they agree on atomic swap, so they have to lock up some money. And then there is a secret somewhere that if it's revealed on one chain, then you can use it to send a transaction on another chain. So it's either like either both transactions goes through at the same time or they don't go through at all. So this is the beauty of atomic swap. So it's perfect, it works. But the problem with that, that you might have noticed is that Bob can agree to do the atomic swap, but then he can just disappear in the middle of the protocol.
00:13:35.034 - 00:14:23.598, Speaker A: So there is some time window for Alice to go back and get whatever she has locked up before. But it's actually very awkward because she's not getting what she wants and she's actually losing some time here. So we go to the third solution. So we're like, hey, Alice, we know that you initiated your withdrawal transaction on l Two from l Two and then now you're waiting for your assertion to be finalized. What we can do is we can give you a ticket actually, that says you are actually the owner of this Hundred East and then you can do whatever you want with the ticket. You can go ahead, you can transfer it to Bob, that's fine, even though the seven day has not passed. So it's basically like we're giving a Tradable ticket or a claim of whatever is going to go out of the breach after the seven days.
00:14:23.598 - 00:15:07.806, Speaker A: And as I said, these are tradable. They can transfer it. So if Bob happens to be an Arbitrum Validator, it means that he can be sure if the assertion is going to go finalized or not. So what Alice does is that she can actually go to Bob and she'll be like, hey, Bob, I know that you're actually validating everything, and you might not even care about my withdrawal, but what I can offer you is that I have this ticket that worth 100 beta in seven days. So what you can do is I give you a discount or a bonus, you can buy my ticket because you know that this assertion is going to be finalized, and then you get the ticket. You get the ticket, you get the bonus, and then at the end of the day, you have profit. So Bob can do that is great.
00:15:07.806 - 00:15:50.422, Speaker A: But as you may have noticed, bob here is having two roles. So first off, he has to have the liquidity, meaning that he has to be sitting on a pile of east, and he has to be willing to trade it with Alice. The other thing is, Bob needs to run a Validator on Arbitrum, so he needs some assurance. He needs to know that this assertion is going to go finalized someday. Otherwise, he's not really willing to trade with Alice. So the problem this solution is really great, but the problem with that is there's not probably a lot of Bops in this world. So there could be some people, they have the liquidity, so they have a lot of ETH, but they're not necessarily arbitrary validators.
00:15:50.422 - 00:16:30.406, Speaker A: Or there could be some arbitrary validators, but they're not sitting on a pile of ETH, or they're not even interested in participating in these kind of markets. They're just doing that because they want to be part of the Arbitrum ecosystem. So that's the problem. Finding these Bobs that work for the both side of equations is not really easy. Okay, so we are at our last solution. So we were like, is there any way we can split Bob? So is there any way we can have Alice? She wants to withdraw 100 east from L two. Then we have David, who is the Arbitrum Validator, but he doesn't have the liquidity.
00:16:30.406 - 00:17:19.094, Speaker A: And we have Carol, who has the liquidity, but she's not a validator. So is there any way these three can arrange something that can give Alice what she wants at the end of the day? And it turns out that, yes, there is a solution for that. We have this solution, and our solution is not necessarily the only one, but we think it works great. So the solution is to set up something called a prediction market. So what is a prediction market? So a prediction market is basically a betting market, but with a difference that you can get inside and outside of your position. So in a betting market, what happens is you can place a bet, but then you cannot transfer it, or you cannot get out of your position. You have to sit on it, and then you have to wait for the event to happen.
00:17:19.094 - 00:17:50.114, Speaker A: But on a prediction market on the other side, what happens is, let's say you think the ODS of Joe Biden being the next President of the United States is so high. So what you do is you're going to go place a bet against it. In three months, the ODS are actually going down. So what you do is you can actually sell your position. You can get out of your position. So this is the difference with a betting market. And then it's really like a betting market, but it's designed more kind of like stocks, I'd say, okay, so we have this prediction market.
00:17:50.114 - 00:18:11.914, Speaker A: The way we set up it is we put the market it's really like a vending machine. There's no bookkeeping or anything. It's autonomous, smart contract. We put it on l one. So a user would go to it. I can go to it. I deposit one Ether inside the market, and it would give me two shares, one yes share and one no share.
00:18:11.914 - 00:18:50.550, Speaker A: And these shares are betting against if the assertion is going to be finalized or not. So at the very beginning, I'm actually covered for both cases. So if the assertion is finalized, my yes share is going to be worth one Ether and my no shares actually worth nothing. And on the other side, if the assertion fails, there's a dispute, then my no share is going to be worth one Ether, and the gestures are actually nothing. So in any case, I can go and redeem my one Ether back. Okay, so how does it work? So let's say Alice is the one who wants to do this withdrawal, right? So she initiates the withdrawal, and she's like, okay, I want my Ether now. I don't want to wait for seven days.
00:18:50.550 - 00:19:36.590, Speaker A: So what I do is I come along, I go to this market and pay attention to this, that she wants to withdraw 100 Ether. So what she does is she deposits 100 ETH inside the smart contract, the market. And what market does it actually gives Alice 100 shares of yes and 100 shares of no. So if Alice actually believes that this assertion is going to be finalized and at the end of the day, her Ether is going to get out of the bridge what she would do. So she would keep the yes shares for herself because it's a bet against the assertions being finalized, and she would get away the no shares right out of the no shares. But she's not going to do that, and I'll tell you why. What she does is she actually keeps the gestures for herself.
00:19:36.590 - 00:20:09.914, Speaker A: The no shares for herself, and she's going to give the gestures to David, who's running the Arbitrum validator. So she goes to David and she's like, hey, I know that you're already validating the Arbitrum chain. And David doesn't care about this withdrawal at all. He doesn't even know what that is. So Alice is like, I'm giving you these hundred no shares. It's a bet against this. Assertion number ten is going to be finalized or not, and I'm giving it to you for a discount or bonus so you can give me shares.
00:20:09.914 - 00:20:31.494, Speaker A: So at the end of the day, you pay 99 Ether, and if it's going to be finalized, you can always go back to the market, and you can redeem it for 100 east. So Bob's going to profit, right? So yeah, sorry. David's going to I was keeping saying Bob. Right, sorry about that. So I meant David. Yeah. So David's going to profit, right? So he's willing to do that.
00:20:31.494 - 00:20:58.910, Speaker A: That's fine. So what she does with the no shares that she kept for herself, now, she can actually go to Carol, who has the liquidity, but she doesn't know what's going on on Arbitrum chain. And Alice would be like, hi, I'm willing to trade my ticket with you. This is the ticket. It's worth 100 if it belongs to me now, but I can sell it to you. And I know that you don't have any idea about this. Assertion number ten, you don't know if it's going to be finalized or not.
00:20:58.910 - 00:21:34.538, Speaker A: That's fine. You don't have to do anything. I provide insurance. So what I do is I'm going to give 100 no shares to you for free. So, in any case, if the assertion is going to be finalized and my withdrawal is actually confirmed, what I do is what you can do is you can go to the market and you can go to the outbox. And then you can redeem your ticket for 100 E. And if no, if there's a dispute happen and these assertions happens to be not finalized, what you can do is you can go to the market and you can redeem your no shares for 100 E.
00:21:34.538 - 00:21:58.914, Speaker A: So in any case, Alice is ensuring Carol so Carol would be able to do the trade with her. There's no risk for her. So this is great. This is the best solution that I guess we have come up with. And for the implementation, this is a work under progress. So what we did so far is we modified Ibitrom Nitro to support our solutions, and we provide measurements. We fully implemented solution three.
00:21:58.914 - 00:22:31.222, Speaker A: So far, it's a proof of concept. So what I did was I implemented an l one market. It's really like a vending machine, as I said, so there's no bookkeeping or anything. And we modified the outbox so that it would support our market. And for the solution for the prediction market one, it's still under progress, but we modified the roll up and outbox mark contracts. So they could be prediction market friendly. Okay, so I'm going to walk you through the protocol of solution three, how it works and what are the functions that we added to the Arbitrum protocol.
00:22:31.222 - 00:23:03.010, Speaker A: So let's say Alice wants to do a withdraw. So she puts her withdrawal transaction inside the inbox. And then what she does, this is the function that we added to the outbox. She wants to participate inside the market. So market needs to know that she actually locked up her ether inside the market. So what Alice needs to do first is she has to go to the outbox and calls the transfer spender function. What basically it does is it transfer her exit, her withdrawal to the market smart contract.
00:23:03.010 - 00:23:37.262, Speaker A: So it's like it's collateralizing her exit. And then once that's done, she can go to the market and she can actually open a market on her exit. And market would check if Alice has really deposited her exit inside the market or not. And if yes, that's fine, she can open a market, then the market is open for some time until there's a trade. Bob comes along, he's a trader, he's willing to trade it with Alice. What he does is he submits a bid that actually is greater than what Alice is asking for. And that's when the trade occurs.
00:23:37.262 - 00:24:15.902, Speaker A: So the trade happens, everything gets settled down. What market does it first is going to send the ETH back to Alice. So Alice is happy, she got her ether. And then what it does is because it's owning the exit now what it can do, it can actually go inside the outbox and change the owner of this exit. So it reached inside the outbox and it changes the owner to Bob. So now Bob owns the exit. We wait for seven days and then what happens is he can now go to the outbox, smart contract, execute his withdrawal transaction, and then because he's the owner, the bridge would send 100 e back to him.
00:24:15.902 - 00:24:50.806, Speaker A: So easy peasy, everyone's happy. And then we ran some measurements too to find out how much L one gas it would cost us to run this function. So it turns out it's really cheap. So for transferring the spender inside the outpox, smart contract, it's around eighty six k. And it's really like the most expensive one because it's the first transferring of spender. So it's actually, you're paying for creation of a mapping because there's a mapping that keeps track of all the owners of an exit. So this is really expensive.
00:24:50.806 - 00:25:21.930, Speaker A: The first one is really expensive, but the second one and the third one, I guess they were around like 40K away, which was really great. And for opening the market, we had to pay around three hundred k. And for submitting the bid I had to pay around one hundred k. And then for executing the transaction, it cost ninety k. And that sums up the talk. I hope you enjoyed it. It's really a work under progress.
00:25:21.930 - 00:25:33.140, Speaker A: So the repo is not really public yet. But I urge you to reach out to me on Twitter if you need to learn more. We're going to submit it somewhere soon and the report will be public.
