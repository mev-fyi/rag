00:00:15.210 - 00:00:50.498, Speaker A: So hi everyone. My name is Patrick McCorry, and today I'm going to hopefully come across or give across a better mentor model for roll ups and bridges. So just before where I begin, has anyone used the roll up? Has anyone used, like most people here? Awesome. And when you used it, did you feel like it was more secure than using Coinbase? Or raise your hand if you think it's secure. Maybe that's a good phrase. Only one person that's great clearly Djens here. Okay, so hopefully by the end of this, you'll have a good idea of what it means for these systems to be secure.
00:00:50.498 - 00:01:25.122, Speaker A: And whether they're actually secure or not is a whole different world. So the whole point of roll ups and everything we're trying to build is really just bridge engineering. All we're building are bridges. So let's consider the Coinbase bridge. You're on ethereum. You lock your funds into this bridge and then it magically appears on Coinbase. You go on Coinbase, you transfer your assets, you buy some coins, you sell some coins, you lose some money, you make some money, and then eventually you want to get your coins back to Ethereum.
00:01:25.122 - 00:02:14.210, Speaker A: And so you'll ping Coinbase and say, Coinbase, let me withdraw my 1000 ETH because I'm a wheel. And then what you'll imagine is that Coinbase will send a message to the bridge. They say, bridge, let Alice withdraw her 1000 ETH. Now, from the perspective of the bridge, the bridge has to be convinced that Alice is entitled to this 1000 ETH. So how does the bridge check this? In the Coinbase example, the bridge will just blindly trust Coinbase. If Coinbase says Alice is entitled to 1000 ETH, then Alice will get her 1000 ETH, and then it gets sent off and we're all very happy. Now, generically speaking, what's happening in this type of interaction? Generically, there's this off chain database.
00:02:14.210 - 00:03:04.440, Speaker A: The off chain database records the account balances, the program state, the program, smart contract code, everything that a database should probably have. But most importantly, it's recording the liabilities of the system. If you have ten coins in the database, then you are owed ten coins from the bridge, and the bridge has the assets. And the whole point of these roll ups or these layer two systems is to guarantee that the assets in the bridge can cover the liabilities in this off chain system. And so we have to consider everything from the bridge's perspective because it's up to the bridge to protect your funds. But this trust assumption has evolved over the years. After all, we've all used bridges for the past ten years in order to use these cryptocurrency exchanges and services.
00:03:04.440 - 00:04:14.478, Speaker A: The first way to build it was this single authority, the Coinbases, the bit stamps and the Krakens. I lock my funds in the Coinbase and they have custody of the funds and they're responsible for protecting the assets. And today, I think they protect about 10% of all cryptocurrency assets. Then we moved on and thought, well can we have a multi authority bridge? Instead of just trusting coinbase, could we trust five out of nine validators to protect the funds? And then we went a little further and thought well what about these crypto economic bridges? What if I could stake assets and then become a validator and appoint myself to protect the funds? Now in all three cases, especially these crypto economic bridges, they're still just multi authority. So in late 2021 around six entities represented I believe 85% of the stake on polygon. And it's these six entities that you're trusting to protect the assets in the polygon's proof of stake bridge. If they collude, they can steal your funds but so far they've actually done a pretty good job.
00:04:14.478 - 00:04:46.342, Speaker A: But in all these cases it sucks. We're trusting less than ten people or ten parties to protect billions of dollars. The whole point of cryptocurrencies was to remove the intermediaries and now we've just reintroduced them. Now there's ten of them that will protect most assets but it doesn't suck from an ideological perspective. It sucks practically because they keep getting hacked. I mean maybe a good raise of hands here. Who's ever lost money with a third party service? Look at this.
00:04:46.342 - 00:05:03.646, Speaker A: Yeah. Calm the Dgens. Let's hope you didn't use Luna. But anyway but basically they all keep getting hacked. The biggest hack was Mount Gox. They lost nearly 6% of all bitcoin that will ever exist. Around 800,000 bitcoin or about six to 800, give or take.
00:05:03.646 - 00:05:53.246, Speaker A: And now we sort of just put it under the table and we just pretend it didn't happen. But it's very frustrating. But why did this happen? These hacks occur because in reality we're taking a set of human processes, we're implementing these human processes and we're trying to protect billions of dollars and humans don't scale. So every time we take the human processes and instantiate it somewhere else to protect more funds, this increases the likelihood that it's going to fail and then they get hacked. What about a multi authority bridge? They are a little better in practice, there's more targets to hack. But of course the roan on bridge, five out of nine validators were compromised and they lost their funds. Although in reality it's not really five validators because four of them belong to one company.
00:05:53.246 - 00:06:36.454, Speaker A: But you get the idea. Multi authority bridges and I feel like over the past ten years when we're designing these bridges we've sort of forgot about our old school motto not your keys, not your coins. We're a blindly just given our coins away and just hoping they can protect the funds. So the question for these bridges is can we build and transact on an off chain system while still allowing users to maintain custody of their funds and not have to trust the operator to protect the funds? And this was the original goal of the sidechain paper in 2014. They don't use the word bridge. They call it a two way peg. But the idea is very straightforward.
00:06:36.454 - 00:07:08.610, Speaker A: You take your bitcoin, you lock it into a bridge, and it appears on an experimental blockchain. So this is like the ethereum example. You're on ethereum, you lock it on an experimental blockchain, you transact away. Then eventually you bring your funds back to ethereum. Now, in the side CHM paper, the idea is that there would be a smart contract on ethereum. In this case, that would check the consensus protocol off the other system. That may be its proof of work, maybe the validators of that system.
00:07:08.610 - 00:07:48.738, Speaker A: But there's a smart contract here with the assets, just checking if the other blockchain agrees that the funds should be withdrawn. But the issue is that when you have a consensus protocol, you're still trusting the judgment of a set of parties. And there's two ways this is trusted. The first case is, what if the consensus protocol agrees to an invalid block? You send it to the bridge, the bridge gets the invalid block, but all of the validators agreed. Again, your funds get stolen. Now, you could use a validity proof or Xer knowledge proofs to make that a little better. And there's a lot there's about six years of work to make that better.
00:07:48.738 - 00:08:26.480, Speaker A: But the real issue with the side chains or the sidechain paper was availability. What if the experimental blockchain goes offline and the operators disappear? If the operators disappear, the consensus protocol stalls. It can't make any more decisions. And then your funds get stuck on the bridge and you can never get your funds out. So that was the issue with the sidechain paper. So again, I'm going to ask a better question. Can we build a bridge that can protect us from an all powerful adversary? So even if the entire system goes offline, I can still get my funds out.
00:08:26.480 - 00:08:53.494, Speaker A: And this was the goal of Plasma back in 2017. The plasma paper came out. Has anyone tried to read the paper, by the way? Okay, maybe a better question. Did anyone read it and understand it? No. And look at that. I spoke to Joseph recently, and he called it aspirational in terms of his writing because it's a very difficult paper to read. But the idea in the paper was amazing.
00:08:53.494 - 00:09:23.594, Speaker A: It tried to solve that availability problem, that liveness problem. So even if the entire system goes offline, you can still get your funds out. It tried to do better than the side chain paper. And for about two years as a community, we had all these different variants of plasma plasma cash, plasma partial spending, whatever, plasma MVP. But none of the solutions were satisfactory. They only supported payments. They all had these nitty gritty details that made it not practical.
00:09:23.594 - 00:09:59.190, Speaker A: And in a way, we sort of wasted two years, but we didn't really waste two years. Then eventually Barry WhiteHat came along and he's just released his GitHub in total Ethereum style. That really helped simplify the design space. He separated out data availability and making sure the updates to the database are valid. And the way he solved it was the roll up where you roll up the transaction data and you just post it to Ethereum. Then all you've got to solve is making sure the data is correct and valid. And this led to the roll ups, this wonderful little GitHub.
00:09:59.190 - 00:10:32.070, Speaker A: Now, if we're going to categorize this as a bridge, we would call this the validating bridge because now the bridge will indebt independently protect the funds. So let's give an example. We have an executor and they want to update the off chain database. So they do this 1990 animation. They update the database and they'll propose an update to the database, to the bridge. Now, the bridge will not blindly trust the executor. Regardless of who's authorized this update, it will not trust the executor.
00:10:32.070 - 00:11:02.906, Speaker A: It must independently be convinced that this update is valid and correct and that updates frequently occur as well. So then the executor has to send convincing evidence for why this is valid. And then the bridge will check the evidence, check how frequent it is and say, yes, the off chain database is correct. The liabilities are fine. I can let the user withdraw their funds. And this is what the roll ups are trying to know. The loop rings optimistic.
00:11:02.906 - 00:11:23.094, Speaker A: Ethereum ZK sync stark Arbitrum. They're all trying to build a validating bridge. And if they can build this, then that's really exciting because now we can have a bridge that runs in Ethereum. And it's Ethereum that's protecting your funds from the adversary. If they try to steal your funds, no. They try to censure your transaction. No.
00:11:23.094 - 00:12:00.690, Speaker A: It will always try to defeat this all powerful adversary. It's a great punch, isn't it? But this sounds cool. It sounds really exciting, but is it too good to be true? Can the roll ups really satisfy this? And clearly no one in the room earlier trusted the roll ups at all apart from one person. You're a good soul. Okay, so let's try to define the environment a bit. We're going to talk about who are the agents who's involved in the protocol. We're going to provide a high level overview of how it works, then the threat model and of course, the security properties for what it means to be secure.
00:12:00.690 - 00:12:39.950, Speaker A: So who's involved in the protocol? First, we have the honest user or an honest party? The honest user really just wants to lock their mooncat into the system, buy and sell their mooncat and then get their mooncat back out. They don't really care about the system itself. We have the sequencer who will take the user's transactions, order them and then pass them on. So they're a transaction ordering service. Then we have the executor who will take the transactions, execute them and then propose an update to the bridge. Let's watch this in action. So we have Alice, and Alice will deposit one coin into the bridge.
00:12:39.950 - 00:13:02.962, Speaker A: Then this will magically appear in the off chain database. Then Bob comes along. Hi, Bob. And Alice is going to send one coin to Bob. So he'll sign a transaction and give it to the sequencer. Now the sequencer can notify Bob and say, bob, you're going to receive one coin. But what's important is that that's only a promise.
00:13:02.962 - 00:13:24.320, Speaker A: The transaction isn't public, it's not final, it's not even pending. It's simply held by the sequencer. So when you send a transaction in Arbitrum, it's the sequencer that's getting it. And it's making a promise to you that it will be executed. But it's just a promise. The sequencer waits around for a while. More transactions come in.
00:13:24.320 - 00:13:52.690, Speaker A: Then eventually the sequencer will order the transactions and pass it on. In this example, the sequencer will give the transactions directly to the bridge. The bridge will order the transactions, but they're not yet executed. We need someone to come along to execute the transactions. So the executor comes, he picks up the transactions. Again, the wonderful 1990 animation. He executes the transactions.
00:13:52.690 - 00:14:29.474, Speaker A: Then he'll post a checkpoint to the bridge and he'll say, bridge, here's an update to the database. And this is why it is valid. And this happens continuously. We order transactions, we execute transactions, and then we convince the bridge that this is correct and valid. And that convincing is, again, the most important part of a bridge or a validating bridge. So who's the adversary? Who are we trying to defend against? Who's trying to steal our funds? So there's two aspects to consider. First, the message flow control.
00:14:29.474 - 00:15:08.830, Speaker A: The adversary can view, reorder and drop all messages on the layer two system. The only guarantee that an honest party has is that they can send a transaction to Ethereum and to the bridge. That's the only guarantee they get for messi's delivery. The other one is that the adversary can corrupt nearly every single party on the offchain system. We simply assume that the bridge cannot be corrupted and there's one honest party who can assist the bridge. That's the only guarantee we get in terms of honest parties. Everything else can be corrupt and evil and out to steal our funds.
00:15:08.830 - 00:15:50.294, Speaker A: And this is the most powerful adversary that you have to defend against. They literally control the entire off chain system. And if you look at l Two Beats, you will notice that no roll up today, that smart, contract enabled, can actually defend against this beast. It's a very, very difficult adversary to beat. And there's probably going to be another year or two before a roll up can defeat this beast. So what's the security properties then? What does it mean to be secure for a roll up or a validating bridge? The overall goal, the overarching goal, is that there's this off chain database. We have to protect its safety and its liveness.
00:15:50.294 - 00:16:34.300, Speaker A: And there's three sub goals. And again, these sub goals are from the perspective of the bridge because all that matters is the Bridge. The bridge has to have a guarantee. Is the data available? That's data availability. Can anyone get a copy of the data? The second property is state transition integrity. From the bridge's perspective, are all proposed updates to the database valid and correct? And finally, censorship resistance. If the entire system goes offline, can the bridge independently forcefully order and eventually execute transactions? That makes you can unwind your position and withdraw your funds from the system.
00:16:34.300 - 00:17:30.774, Speaker A: So what about data availability? What is this problem? And there's three questions we're going to answer. Why does the data need to be public? What data needs to be public? And how do we guarantee that it is publicly available? So why do we care about the database being public? Remember, we had one assumption. There's one honest party out there who can assist the bridge. So anyone here ideally, could help the bridge protect from the all powerful adversary. So the only way the honest party can help is if they have a copy of the database. They need a copy of the most recent database so they can take the transactions, execute them, and actually propose an update to the bridge. If the adversary can withhold one update and prevent anyone from getting an up to date copy of the database, then they win the game and you can't propose an actual update.
00:17:30.774 - 00:18:04.530, Speaker A: So that's why it has to be public. For one honest party, what data needs to be public? And this sort of varies between the optimistic roll apps and the validity roll ups. But generally speaking, enough data has to be public so the honest party can compute the database. So it needs all the updates to the database. And there's two types of data. One is transaction history. Get the entire list of ordered transactions, sort of like a blockchain, execute the transactions and then you'll create a copy of the database.
00:18:04.530 - 00:18:44.254, Speaker A: Or you have database A, database B, you get the state diff, the difference in the storage values, and you could post the state diff. And so as a user, you get the state diff apply to your database, and then you compute the new database. So there you hide the transactions. You only see the result of the transactions. But in both cases, that has to be valid. And finally, how do we guarantee the data is publicly available? So in plasma, the focus was this challenge process. Could I challenge the operator that make the data available? But for many years, it was considered too complicated, too complex.
00:18:44.254 - 00:19:21.950, Speaker A: Today, I think you could solve that problem in a reasonable manner, but most in the communities just ignore it. The other way to solve it is a committee. This is like the StarkNet committee or the Antitrust committee. I think is Arbitram Nova. They have a Data Availability Committee and the committee will sign a message to attest to the fact they will make the data available. Or you do the roll up, you just post the data to Ethereum and Ethereum guarantees that the data was available at one point in time. So what about the state transition integrity problem? Well, this is very straightforward.
00:19:21.950 - 00:19:54.700, Speaker A: If one update to the database can include an invalid transaction, then the adversary can seal all the funds in the system. We've seen this time and time again with all of the bridges, the most recent one being binance. This is how they keep stealing the funds. Now, there's two different ways to solve this problem. There's optimistic or ZK, fraud proofs or validity proofs. You're going to hear about this topic over and over and over again because this is the one thing they all talk about. This is the most important problem in their mind.
00:19:54.700 - 00:20:43.574, Speaker A: So I'll skip it for now. But to me, the most important problem that no one talks about, and this is really the difference between the side chain paper what is a side chain? And what will be a roll up or a layer two protocol is censorship resistance. If the entire system goes offline, can I still get my funds out? And that is really the biggest important topic for roll ups and no one likes to talk about it because it's really hard. So what is censorship resistance? Imagine that Alice wants to sell her Mooncat. He gives the transaction to the sequencer and the sequencer is like, no, no, I'm not going to let you sell your Mooncat. How dare they? The user should be able to forcefully order this transaction. So the user will simply take their transaction and send it directly to the bridge.
00:20:43.574 - 00:21:29.910, Speaker A: This is what we call forced inclusion. They send it to the bridge and the bridge will force its ordering. And now it's ordered for execution. And this is really cool because then if we consider Liveness, how do we guarantee this eventually gets executed? We can assume that the sequencer has absolutely nothing to do with censorship resistance whatsoever. You can have a centralized front end, a centralized sequencer, but the back end is decentralized and that's cool. That provides an amazing user experience because you know exactly what sequencer they interact with, but they are not responsible for protecting the system. We really assume there's one honest executor who can join the system, take the transactions, execute them and then post the update to the bridge.
00:21:29.910 - 00:22:10.882, Speaker A: We just need one honest party to protect the system. So to summarize, if you can solve all three problems, then maybe we can slay the beast and deploy a secure layer to your system. And for the OGS out there, this is the Bear Wheel from 2014, I think the three bear markets before. And I replaced the Bitcoin shield with an Ethereum shield because ETH is money now. But anyway, what I want to finish off with is there's these three core problems. They're not the only problems. There's a whole host of other problems that you can get your teeth into if you're interested in solving cool problems about roll ups.
00:22:10.882 - 00:22:32.070, Speaker A: As I mentioned, censorship resistance is nontrivial. There's a lot of nitty gritty details that makes it difficult. What I am excited for are those experimental virtual machines. This was the original goal of the Sidechain Paper. We lock our coins in Bitcoin and we unlock it on this experimental blockchain. And now we have this. We have Cairo for StarkNet.
00:22:32.070 - 00:23:10.746, Speaker A: We had the arbitrary virtual machine, we have the optimism, bedrock. We have Fuel in their Sway language, all these really cool virtual machines and custom languages and software, but we're still retaining the security of Ethereum. And that's probably the most exciting part of these roll ups as well. And finally, I guess the last point I'll highlight is fragmentation of assets. A lot of people are worried that if you have ten different roll ups, the assets get fragmented across the roll ups. Is that not a problem for liquidity? Well, we've always had this problem with crypto exchanges. You have Coinbase, Crack and finance, so it's not a new problem.
00:23:10.746 - 00:24:13.706, Speaker A: But now anyone in this room can deploy a solution on something like Arbitram, we could quickly move your funds. The optimism, this cross chain transfers interruptability, this is now a venture that anyone can build where if you tried to do that on Know, coinbase is going to probably tell you to go away. So that's also really exciting. We can really solve that fragmentation issue now. But is it worth it just to finish up? Is this worth it? Is it worth all the work to build this validating bridge? Now, Web Three is a bit of a buzword. If you're all developers, we're all sort of like, oh, well, Web Three, is this a real thing? But to me, my vision of Web Three is that if you consider the Web Two world, web Two, we've always had to trust the off chain system. I take my coins, I lock it in the Coinbase, and I really have to trust Coinbase to protect my funds in the Web Three world, I would hope we can have a user experience that's similar to the Coinbase.
00:24:13.706 - 00:24:47.378, Speaker A: I lock my funds in a nice UI, I get instant confirmations. But the difference is that I don't have to trust Coinbase for my funds. So the actual service is exactly the same, but the difference is whether I trust the operator or not, or what I trust the operator to do. And that's really web three. So when use these roll ups, eventually it will feel like using a Web Two service, but much better security and trust guarantees. And I hope, and this is a quote by Vitalik, who has a wonderful blog post on this. Custody is becoming a liability.
00:24:47.378 - 00:25:19.458, Speaker A: And what do I mean by that? So if you consider, if you were to do a startup maybe five years ago, you could be the new mongox or the new Bitstamp or binance, you run your service, you get these human processes and you have to secure billions of dollars. That obviously doesn't scale. It's very scary. Who wants to be liable for protecting billions of dollars? I mean, let's raise hands. Does anyone here want to be responsible for protecting billions of dollars? No one? Look at that. Exactly. Screw that.
00:25:19.458 - 00:25:53.862, Speaker A: That's way scary. So what I'm excited for is the rule ups. If there's one rule up that can get a good implementation, that's easy to deploy and reinstantiate, that has a good developer experience, such that anyone here can build on it, then we've solved the problem. We replaced those human processes with software. We all know software skills. So you deploy your roll up, you offer a really cute UI, I can go on there and buy and sell my Mooncat, but I don't trust you with it. So I believe it's worth it because I don't think users care about custody.
00:25:53.862 - 00:26:19.654, Speaker A: Now, we all still use custodial services, but it's the operators who care. No one here raised their hand when you wanted to protect billions of dollars. So if you're all going to do a new startup, you're probably going to look into the rule up to say, could I reinstantiate this and reuse the software? That's the layer three goal. And so that's why I think it's worth it. Custody is an unnecessary ability. And that's the end of my talk. I have three minutes left, I believe.
00:26:19.654 - 00:26:28.930, Speaker A: So thank you guys for listening and have a great time. Cool. Awesome. Bye.
