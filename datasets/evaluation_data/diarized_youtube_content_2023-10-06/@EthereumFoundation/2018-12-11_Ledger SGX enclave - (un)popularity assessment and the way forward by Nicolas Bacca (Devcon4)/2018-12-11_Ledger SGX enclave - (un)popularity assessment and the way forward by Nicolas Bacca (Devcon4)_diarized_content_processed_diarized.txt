00:00:00.410 - 00:00:46.774, Speaker A: Hi everybody. So maybe you are not coming for this talk so I have an explanation for that which is right there. So well, I can try to convince that this is the talk you are coming from, you are coming from but it will probably not work. So my initial talk was rejected and I got a notification like yesterday at midnight that in fact it was not rejected. So I decided to recycle some slides I had for SGX, add a bit more content and that's what the talk will be about. So if you have a medical condition and you can't listen to an SGX talk, you might leave, I won't be offended otherwise it should be interesting. So with that we are going to talk so a little bit more about our enclave.
00:00:46.774 - 00:01:48.522, Speaker A: The idea is to keep talking about what we did last year previously, which was not very successful. We will discuss why and we will discuss how we can improve that and well, if you want to follow something, for example, during the talk and to read something during the talk the Fret model we have in the README is interesting to read and it's still up to date even if the code is not. So first question you can ask why are we making an enclave as a hardware wallet manufacturer? So the first thing is that ledger has been developing into several industries and created several business units today. So we are not only making hardware wallets with the Se on which we can code our own OS, we are exploring the Custodian model where we work on HSMs that are not built by us. So in that case, we need to work into something that looks a little bit like an enclave. And we want to transition from a company manufacturing hardware devices to a company selling operating system licenses. And for that, enclaves are a very good target because they already exist.
00:01:48.522 - 00:02:29.834, Speaker A: They are already in the market. And the main obstacle today for people to use a ledger is actually to buy a ledger. So if we could find a way to download a ledger and have an interesting security on an existing computer it would be quite interesting for us and so that's why we are digging into those models and we are evaluating the security very toughly for that. So we have a reusable operating system code base. Working on an enclave and changing from a secure element to an enclave for us is quite easy. So we are using this expertise. And another important thing is that, well, we have a strong expertise in hardening cryptographic code.
00:02:29.834 - 00:03:04.886, Speaker A: And this is something that's difficult to do. I mean, that's something that you don't usually do because a lot of people using secure elements will just reuse a vendor cryptographic library. We build them from scratch and we reuse everything that we have on the chip to make them harder. So we did a popular CTF this year on our device that was won by a company called Ninja Labs. They liked the CTF. They didn't describe everything yet, but it is related to side channels and to template profiling on side channels. So that's the kind of things we want to do in SGX as well.
00:03:04.886 - 00:03:59.794, Speaker A: Improve it and provide the result to everybody. So if you want to transition from a hardware wallet to virtual secure device so to an enclave you have to consider a few things first you want to focus on the key protection so key protection is the most important part of a hardware wallet. It's going to be very important for an enclave as well. You don't want an attacker to be able to extract keys. So here for an enclave, we will focus on software threat models, so we will not consider hardware threat models where an attacker has access to the enclave, because that's pretty much out of scope. I mean, enclaves are quite complex and it's difficult to focus on securing the whole thing against a physical attacker. Then user confirmation is extremely important as well because if your enclave is holding keys but users can, an attacker or malware can sign anything, it's not very secure.
00:03:59.794 - 00:04:54.314, Speaker A: So you should be able to confirm what you are doing and it shouldn't be possible to fake this confirmation. If you're malware, then flexibility, you should be able to do software updates on your hardware wallet on Clave, anytime. So even if your computer is compromised, which is quite important, and as a developer, you should be able to test new functionalities, typically for Ethereum. If your Enclave is signing an Ethereum transaction, it should be able to support smart contracts and it should be able, if possible, to display specific UX for specific smart contracts in order to provide always the best and the clearest message to the user to know what you are doing. Finally remote attestation. We should have a way in an enclave or like we have in the device to verify that the code is running on a healthy platform and that you are running the right code. So you should be able to verify which code you're running.
00:04:54.314 - 00:05:47.994, Speaker A: And we'll see that this comes with some difficulties on HTX, but we can help solving that as well. So today, in our architecture, the way we achieve source code portability between secure element and enclaves is quite simple. We focus on C source code portability, so we write the code once with the same API. When we work natively on a secure element, we are compiling to arm because our secure elements are based on secure core, so which is kind of a secure arm and when we are working on an enclave all kind of enclave, so it could be HTX Te or an HSM we are cross compiling to Moxie, which is an open architecture which was used usually, which was used previously. Sorry. In the Bitcoin project as an experiment by Jeff Gazik back in the days. But it's very simple, it's very easy to review, easy to secure as well.
00:05:47.994 - 00:06:41.700, Speaker A: So it's a good target if you want to have a simple VM regarding the architecture itself. We will try to reuse this model as much as we can. So we want to protect the user secrets. So the user secrets will sit between a kind of a firewall, applications will be firewalled between each other as well. And when an application wants to access some cryptographic material, it will use a service call, so service call on Arm or something else in a virtual machine to access the secret. So applications can't touch secrets unless they enter privilege mode, which is run by the kernel, and applications are isolated and of course can't touch the kernel. So if we look at the state of our SGX stack in 2017, we had good points and bad points.
00:06:41.700 - 00:07:29.764, Speaker A: So the first good point is that it works. So if you want to try it today, you can do something. You can run some simple applications we demonstrated on chain Attestation, so you can verify that your Enclave is legitimate on chain. After you pass Intellect, you can verify that your code is the code that is supposed to be on chain, and we have an open source SDK. Even if the code is deprecated, it's still completely usable and you can still play with it on the bad side. On the negative side, we had no user confirmation possible since we didn't have a display API, so you couldn't use it really as a wallet. All code that you wanted to run on the Enclave had to be signed by us.
00:07:29.764 - 00:08:38.140, Speaker A: So that's the biggest thing that deterred people from using the Enclave, because at some point if you wanted to run in a protected environment, you had to send us the code. We had to sign a key, which was more convenient, but still a lot of people didn't want to contact us for that. So that's why, in my opinion, it wasn't very popular and of course we did no security audits, so the code is really sent to you to be tried and without any kind of guarantee. So how can we improve that? Of course, regarding the attestation, well, people have been talking about Intel Attestation a lot. So the thing is, intel Attestation today is still very useful in my opinion, because you need to validate the platform health from time to time. For example, when there is a new security exploit that involves updating your BIOS or updating the microcode of your CPU, the only way to know that is to have a centralized API at some point. So it's still used today, but you can select different setups depending what you want for your application when you are using your Enclave.
00:08:38.140 - 00:09:00.668, Speaker A: So if you don't want to use Intellectation, you can it works. The code is still secure because the code is signed. So you can verify, you can rebuild the code on your side and verify that the code is correct. But in this case, you don't get remote attestation at all. It's a choice. If you want to run your wallet on your side, you can do that. Maybe not the best choice, but it's a choice.
00:09:00.668 - 00:09:41.696, Speaker A: You can run intellection once. If you do that, you get a weak ledger attestation. I put weak here because it will not be up to date regarding the health of your platform, which can change. So again, it's a choice. But if you run intellect from time to time, then you can get a stronger attestation. And the biggest difference here according to compared to is attestation today, is that it's something you can validate on chain. So a good news is that with a new intel API called protected transaction display, we can solve two problems.
00:09:41.696 - 00:10:29.004, Speaker A: So we can solve the confirmation issue and we can solve the fact that you couldn't run anonymous code so far. So now you won't have to contact us to run your code on the enclave once this is released. So if we want to summarize very quickly, get an overview of protected transaction display, it will be a way to create a secure display to display something securely. So on your own device that will be prepared by the enclave. So the way this works is that PTD will allow you to create confidential output on display. So the display here is a mixed display. In this window, you have a mixed display, so some is done by PTD, so can't be spied on by the host.
00:10:29.004 - 00:11:14.280, Speaker A: The pinpad here is done by PTD. This line is displayed by PTD, and this line is displayed by PTD as well. The buttons are not and this label and string are not. So the output is confidential because the host cannot read anything. And with the fact that you can display pin code that is randomly swapped by PTD, you can achieve confidential input as well. Because if, for example, here you type your pin code, the host has no way to know that you typed 1234. If you click that, I mean, the host will just see that you clicked some patterns on your screen, but this way you can manage to have some secure input even if it's not very convenient.
00:11:14.280 - 00:12:11.084, Speaker A: And here we have a way to display some additional data on PTD. So you see an amount which is an amount of zero point 96 etters. So here you see the number of decimal below, which is again not the best UI, but, well, that's what you can do today and part of an ethereum address. So after you do that, after you enter your pin wallet, could send an ethereum transaction. The limitations we have repeatedly today, the output is confidential, so the output cannot be spied on, but it cannot be trusted because you can still display something on top of the output. So in this case that's why you have to do this user confirmation twice. So it's not the best UX possible, but I would say it works with what is available there.
00:12:11.084 - 00:13:17.380, Speaker A: So the I O primitives are very limited today, that's probably something that can change but you don't have the flexibility of global platform te trusted UI if you want. So one thing that's popular with this API is to basically register an image on a server and then display this image so you can be sure that nobody can intercept the image and a malware on the host could not replace the trusted UI but you can't in that case. So that's why you have to have the user type again and confirm twice, which is not the most convenient thing, but it works. So the alternative options you can think of, or at least I can think of, are worse. Typically if I want a user to verify that the trusted UI is genuine, you would have to train your users to try to take screenshots, for example, and see that they can't take screenshots. So that's not something extremely realistic, I mean geeks can probably do that but not the regular user and so far it's Windows only. So if you want to run those tests you can't run them on Linux.
00:13:17.380 - 00:14:15.360, Speaker A: That will probably change over time as well. So one part we are still missing compared to 2017 is the security audit and that's what we will be focusing on right now and that's the reason why typically I didn't update the code because we didn't run our security audit yet. So on the first part of the security audit you want to run that like a standard security audit. So you want to verify that your enclave is not vulnerable to typical bugs, buffer overflows and so on. So that's very normal. Then you want to verify something more, you want to see if your key can withstand several side channel attacks because SideChannel attacks got very popular during last year. So more and more people have been able to have been demonstrating ways to extract keys from enclaves either by attacking the enclave from another one or from the host.
00:14:15.360 - 00:15:38.400, Speaker A: And today there is still a state of the art to be written to know if keys are correctly protected in an enclave and we are very interested to answer this question, we are very interested to publish result and we want to advance the state of the art of protecting key and enclave. So good news is that we are, I think, good at it at least we already did it on hardware, so we should be able to do it on bigger hardware as well as an enclave. And that's just a random advertisement which is not totally related to SideChannel on a cache but it's a general side channel API that we published a few days ago that will let you test state of the art state channel on Templating. So how will we proceed with this audit? So, first we'll focus on a single curve. We'll focus on SEC p, which is a curve used by a lot of cryptos today, so at least Bitcoin and Ethereum. So for the time being, that's the curve we are the most interested in. We will review the state of the art library used today by multiple projects coming from bitcoin core, so leapsecp two hundred and fifty six k one, and we will test it against state of the art side channel attacks that we have on SGX.
00:15:38.400 - 00:16:51.760, Speaker A: We will publish a review on that detailed report. If there are patches to be written, we will do that as well. If we have some well, parts to rewrite, we will also do that. And in the end we want to know if and when, how long we can store keys on SGX. And I think that using this research we will be able to finally have a workable hardware wallet on an enclave and with strong guarantees that the keys are going to be available and that the keys are not going to be stolen for a given amount of time. So for this, we chose not to use the intel proprietary cryptographic library because we figure that working on an open source code and providing some review of that will benefit more to the community by knowing how we can work and design new side channel protection attacks which could later be applied to other curves. So, to finish summary of what is coming next in 2019 for our enclave, first we want to start with the CTF.
00:16:51.760 - 00:17:55.350, Speaker A: So after our review we will test so we will publish what we did with our hardened API and well, standard CTF. So if you win, you get Etter, because, well, we'll put some Et in our enclave, so we will usually increase the amount and we'll see if people are interested in if people manage to extract something that worked for our cryptographic API on our hardware wallet. So that worked on, well, two bitcoins, I think, on one bitcoin, nobody steal it, nobody stole it. On two bitcoins we found some motivated parties, so maybe we'll see the same here. After we do that, and we are convinced that our security is fine, then we will be able to release a wallet. So we will release a simple wallet that will work first for Bitcoin and Ethereum, and then we can move forward and release an SDK that will let people write their own applications and use PTD to secure their own applications. So that's it.
00:17:55.350 - 00:18:00.570, Speaker A: And we still have minutes for questions if you want. Thank.
