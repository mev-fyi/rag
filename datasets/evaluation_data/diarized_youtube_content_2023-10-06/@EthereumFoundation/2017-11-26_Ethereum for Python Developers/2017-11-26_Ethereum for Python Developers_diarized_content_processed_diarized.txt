00:00:15.850 - 00:00:45.734, Speaker A: Hi everybody. My name is Piper, and I've been making tooling and things like that in the Python ecosystem since about, well, since the Frontier network launched. And today we're going to do a really fast run through of the entire Python tool set that I've been working on and talk sort of about the roadmap there. And then at the end I'm going to talk to you about Pyevm, which is the project I'm most excited about right now. Cool. So, Python Ethereum. First, let's talk about why Python Python is slow.
00:00:45.734 - 00:01:13.038, Speaker A: People have complaints about Python. There's the global interpreter lock, things like that. But the big thing here is that diversity matters. Ethereum is not a language specific tool, and if developers can pick up tooling in languages that they are familiar with, then it will speed up adoption, and that's a big deal. So we need more tooling in more languages, and Python is a big deal. Python is used for all kinds of stuff. It is an extremely accessible language.
00:01:13.038 - 00:01:36.890, Speaker A: It's used heavily in data science and in web development and all these things. And so we need good tools in Python because lots of people use it. And this is my favorite. Python is the second best language for everything. This rings so true to me. Python's got its warts and its problems, but it's also a wonderful language. Also, we have tons of cute animal pictures in our GitHub.
00:01:36.890 - 00:01:56.282, Speaker A: Cool. So the Python Ethereum toolchain. First we'll start with web3 Py. Thank you, web3 JS team. We literally copied your code base, converted it to Python, and then took it from there. So web3 Py is your sort of way to access the blockchain. It handles all of your RPC communications.
00:01:56.282 - 00:02:31.546, Speaker A: When you want to talk to a node, it does things like converting the responses to Python objects so that they're nice and friendly for you, things that you don't want to be working on when you're building your product. It has tons of built in utilities for doing conversions, converting things to Hex and from Hex, and between bytes and text formats, as well as currency conversions. Again, things you don't want to be implementing. You can focus on your product. We have abstractions for contract objects that give you really convenient. All you have to do is feed us your ABI, tell us what address you're at, you can interact with your contract. This does deployment.
00:02:31.546 - 00:03:22.670, Speaker A: All of the ABI encodings of arguments and things like that. Again, things you don't want to be building. We also have an accounts API. This is currently in sort of a alpha stage if you're familiar with the web3 js new accounts API. Again, we've generally kind of copied this. You can do generation of accounts management of private keys from right there within your python code base, loading key files, signing messages, sending signed transactions, things like that. And we have this great middleware API, and this is a much lower level API, but it enables a lot of really powerful things, caching, interception of requests and signing them in flight, things like that, that you can build using this metalware API.
00:03:22.670 - 00:04:02.086, Speaker A: All right, let's talk about populous. Populace is a development framework written in Python, and it should be pretty familiar for Python developers. The biggest thing that it focuses on is testing. But populous will handle all of your compilation and deployment for you, which means finding all of your contracts, scraping them all up, feeding them into the solidity compiler, and giving you the results. Same with deployment, deploying those and then recording those deployments so that for future deployments you can still reference old deployments, things like that. It handles library linking. So when you use libraries, you end up with something like this in your bytecode.
00:04:02.086 - 00:04:33.220, Speaker A: You see that thing at the bottom there? That's a placeholder. And what needs to go there is the actual address of the deployed version of that greeter library. And this stuff, you need to get it right. And populous just automates and does all of this sort of stuff for you. And package management, we have this sort of unmerged branch that has all of the ERC 190 package management stuff in it. It is a high priority for us to get this stuff in real soon. And well, package management is a big deal.
00:04:33.220 - 00:05:19.202, Speaker A: All right, there's also a bunch of other tools. There's an Ethereum utils library that has a bunch of low level stuff that's just functional functions that you can use, that do all kinds of nice, convenient, useful things that prop up commonly when you're doing Ethereum development, we have an ABI utils library that does all the ABI encoding and decoding. So if you need to do low level stuff, pulling old transactions, seeing what data they sent, stuff like that, you can do that. We have a keys library that handles the elliptical curve cryptography stuff for you. So if you want to do low level message signing, things like that, it has a native Python implementation. It'll also detect that coin curve is installed and use coin curve, which is much faster. And it has a backend system.
00:05:19.202 - 00:06:09.970, Speaker A: So if you have some other implementation of ECC that you want to use, you can plug it right in. Ethereum key file, loading key files off disk, generating key files from private keys, key stretching, that sort of thing. It's all handled for you. We have this library called Pycel C, which is a wrapper around the solidity compiler, which is nice because you can do compilation from your python code, feed in just the source as text, or reference some files, and do compilation. But the thing that's really great here is that we have automation built into it for installing specific versions of solidity from source. So if you have a CI environment and you want to run your stuff in Travis, and you want to run it against a specific solidity version, this library will let you do that right off the bat. We use it in almost all of our other repos that need solidity, and it lets us test against specific versions of solidity.
00:06:09.970 - 00:06:50.430, Speaker A: Ethereum tester is a library that we've been working on. It's a sort of wrapper around using test blockchains. So right now it supports the Py Ethereum blockchain, but sort of an older version of it. We're working on more back ends for more options for testing. Specifically PI EVM is the one that we're focusing on, and it has really nice web3 integration. So if you're using web3 Py in your application and you want to test against a blockchain, all you have to do is swap out the provider rather than changing a bunch of your code, and you can run your application against a test blockchain. And we've got a bunch of more things.
00:06:50.430 - 00:07:33.790, Speaker A: There's this Pygas library that has some nice wrappers around the go. Ethereum command line, an implementation of the patricia tree and implementation of the bloom filter. Lots of tools, wide array of them. They're all supported, they're all actively developed, and you should give them a try. But what I really want to talk about is Pyevm. Pyevm is a new implementation of the Ethereum virtual machine in Python, and it came about sort of in this roundabout way originally there's pyetharium, and pyetharium and Pyevm are not the same thing. Pyetharium is a library that's been around as long as I can remember.
00:07:33.790 - 00:08:12.410, Speaker A: It was written by Vitalik. It's a library dependency in a ton of our code bases, and it is used heavily right now by the Casper research team. Python is a great research tool because it's so mutable. You can just reach in, do whatever you want. And pythium has been key for so much of the research and things that have been done for the Ethereum network. However, it has not been a very good library for us to build on top of, and I'll go into some reasons there, and then there's Pyethap, and Pythap is the Python Ethereum node. So if you want to run connect to the network, then Pyethapp is the thing that in theory could do that.
00:08:12.410 - 00:09:11.578, Speaker A: However, for a very long time it has not been able to sync with the main net network. So we had these two existing libraries, and they've facilitated a ton of research, but over the last two and a half or three years, or however long it's been, these libraries have also been a huge thorn in my side, because there's no definition of what is a public and private API, and they're big and they're monoliths, and things changed out from under us, and they're just not the foundation that we needed them to be. So about a year ago I started tinkering with, okay, well, what if I write my own anyway? So I started this experimental project called PI EVM, and it sort of festered and kept going and kept going. And let me tell you some of the origins. So one of the big things was don't bother Vitalik. That was one of the main motivations here. I didn't think that I could fix PI Ethereum without interrupting his work.
00:09:11.578 - 00:09:56.538, Speaker A: There was so much that needed to be changed that I felt the scope of the changes was so large that I assumed that it would be impossible for me to fix PI Ethereum without disrupting Vitalik's work. I wanted to better understand the EVM, and it's that thing that I need. I needed a foundational library that I could build on top of. We are shooting for something that is the easiest to install client. It'll be primarily focused on being a lite client, although we will support being a full node, and we're hoping that it's going to facilitate research really well. But we have every intention of this being a full node or a lite client node that you can run and use in production. This is our status right now.
00:09:56.538 - 00:11:08.158, Speaker A: We've got most of the fork rules done. Byzantium is still in progress, and we've got the Les protocol in progress. Right now we're probably a month or two from a very alpha stage version of this that can sync up with the main net and run as a light client. So we're very close on a. This project is intended to be sort of a foundational piece to the Python ecosystem. I'm very proud of this library, and I think it's going to be one of the cornerstone pieces that helps bring the python ecosystem up to par with some of the other Ethereum tooling out there. And that's really sort of part of a broader goal of mine, which is I set out earlier this year with the sort of abstract goal of maturing all of the python tooling because we needed better tooling and so many people were flocking to the JavaScript stack, which is fine because the JavaScript stack has been the superior stack for a long time and it's a great stack, but people need choices, and so I wanted to set out to actually give them those choices.
00:11:08.158 - 00:11:33.462, Speaker A: All right, one last note, Python three. Starting in 2018, we will begin dropping support for Python two. So if you're using these tools and you're using Python two, you need to upgrade because they are going to break on you. It's time. You need to upgrade your code base. Python three is great. Upgrading to it is very easy.
00:11:33.462 - 00:11:51.020, Speaker A: There are a ton of resources out there. We are dropping support for this. If this is a problem for you, please come talk to me. But the answer is likely to be that you need to upgrade your code base. Thank you all for your time. Thank you.
