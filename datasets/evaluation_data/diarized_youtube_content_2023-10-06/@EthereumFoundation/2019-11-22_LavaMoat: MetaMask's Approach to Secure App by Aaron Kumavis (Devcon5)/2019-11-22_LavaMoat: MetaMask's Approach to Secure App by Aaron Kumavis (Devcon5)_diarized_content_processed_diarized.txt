00:00:11.530 - 00:00:37.910, Speaker A: Hi, I'm Kamavis from Metamask. Today I'm going to be talking about lava mode. It's a set of security tools for JavaScript apps. I'm going to be talking really, really fast, so if you don't catch everything, please come out me. Questions later. Newmont Jung yeah, I quit. I quit.
00:00:37.910 - 00:01:50.590, Speaker A: Okay, so is anyone you're building anything with JavaScript? Front end, back end wallet, Dap, anything? A couple of people. Okay, you really need to understand the security situation with JavaScript and dependencies. Recently there was the Bitpay open source wallet copay. A bitcoin wallet was hacked by its dependencies and a few vulnerable versions of the wallet published, and there were some loss associated with that. Okay, so I'm going to be talking about Logmode. Logmode is a set of security tools for any JavaScript app to mitigate software supply chain risk. And we'll talk about Google Dependent.
00:01:50.590 - 00:02:20.386, Speaker A: It's relevant for any JavaScript app, but it's especially relevant for Dappuis and wallets. So let's talk about event stream. This is the copay wallet hack. It made it a big splash. That happened in 2018, essentially. Jack and Palmer, founder of Dogecoin, summed it up very well. Bitpay essentially trusted all the upstream dependencies.
00:02:20.386 - 00:02:55.070, Speaker A: It's the MPM dependencies and their developers to never inject malicious code into their wall. So if dependencies can go bad, how can we fix that? There's a bunch of discussion around it. Some people say never use dependencies. I think this is kind of terrible because the joy of technology is that it builds on technology and we all get to move forward and it kind of maybe ruins the whole like don't implement your own crypto. So dependencies can be nice. The other side was audit all dependency always. And of course this is a good idea, but it's not always practical.
00:02:55.070 - 00:03:30.586, Speaker A: Especially, let's say you have some potentially loss causing bug in production and you got to push a hot fix. Do you have time to add all the dependencies and how they interact with other dependencies? Hopefully, but we don't. So is there nothing else that we can do to improve the situation? So Mark Miller from Agoric has been working on security and languages for over 30 years. He's been working with JavaScript for over ten years. If you've heard of promises, weak maps, strict mode. Miller called, you're familiar with some of his work. Here's a straight quote.
00:03:30.586 - 00:03:52.810, Speaker A: Don't add security, remove insecurity. This is referring to object capabilities. Said maybe less gracefully remove everything and then only add what you need to do. Your features, because features in the hands of guide guys are basically attack vectors. So they're working. He's one of the chief scientists at Agora. They're working on secure ECMO script, also known as sets.
00:03:52.810 - 00:04:46.546, Speaker A: And it's basically a secure eval statement where you can control what that code has access to, what it evaluates, and it works through frozen intrinsic, so it freezes down like things, like objects that arrays. You may not know it, but you can override what array map does and that might ruin your assumptions about what has access to what data. And so the simple version of the solution is just to freeze it at runtime so your dependencies boot, so your dependencies can't mess with things. And then also explicitly downloads. Like I said, when you do evaluate, you get to pass in what it has access to. So that might look like you're evaluating module and you pass in just the platform APIs that are relevant. Okay, so lava mode builds on top of that to provide some runtime protections for bundles.
00:04:46.546 - 00:05:01.580, Speaker A: So you get those basic candidates for like object and array, you get per package platform API access controls, and you can protect modules from corrupting each other. Moving through dependency graph and I'm totally out of time, so come ask me about this more. Thanks.
