00:00:12.490 - 00:00:27.778, Speaker A: Everyone, we're here to talk today about our journey from solidity Dev to ZK Dev. Talk about how we went from solidity, developers got introduced to zero knowledge cryptography and what on to implementing battleship. So my name is Ian.
00:00:27.874 - 00:00:28.946, Speaker B: And I'm Jack.
00:00:29.058 - 00:00:53.260, Speaker A: And yeah, like we said, we're going to walk you through our journey and how we got to where we are today. But first off, I want to start by thanking the Ethereum foundation. Just over a year ago today, battleships was just an idea. And to go from presenting at E. Denver, receiving a grant from the Ethereum foundation up here presenting at Devcon today, it's a pretty surreal experience. So none of us expected this. So thank you.
00:00:53.260 - 00:01:01.680, Speaker A: So before jumping into our journey in ZK, first let's start off with a question. What is web3?
00:01:03.270 - 00:01:03.954, Speaker B: Shout it out.
00:01:03.992 - 00:01:04.994, Speaker A: Yeah. Please raise your answer.
00:01:05.032 - 00:01:11.250, Speaker B: What is Web three? I think decentralized.
00:01:12.790 - 00:01:34.090, Speaker A: All right, answers. I think to really get an appreciation for what the definition of web3 is, though, it'd be helpful to look at what some of the titans of the industry have said. So, Satoshi. Wait, that's not satoshi, I guess. Okay, we'll go with that. Satoshi and I just want to preface real quick. Blockchain predated web3 by about five years.
00:01:34.090 - 00:02:34.922, Speaker A: So this is defined in Satoshi's terms of what bitcoin was. But he basically said bitcoin is a purely peer to peer version of electronic cash, which would allow online payments to be sent directly from one party to another without going through a financial institution. Next, someone we probably all recognize here as well, Vitalik Buterin. In the context of Ethereum. His definition of web3 was what Ethereum intends to provide is a blockchain with a built in, fully fledged, turing complete programming language that can be used to create contracts that then can be used to encode arbitrary state transition functions. But none of this would be possible if it weren't for the work of Nick Zabo, who coined the term smart contract and came up with the idea in 1994. And his idea of what this ecosystem represented was the obscurity of a large random number so vast that a lucky guess is unlikely, and if desired, the lifetime of the universe.
00:02:34.922 - 00:03:10.060, Speaker A: And that's the foundation on which cryptographic protocols and in turn, smart contracts are built. And then finally, appropriately ending at the founder of the coiner of the term web3, Gavin Wood. His definition was, in short, we engineer the system to mathematically enforce our prior assumptions, since no government or organization can reasonably be trusted. So that leaves us with our own definition web3 is sovereignty in cyberspace. And following from that, cryptography is the authority, the enforcer of the laws in this new and said space.
00:03:12.110 - 00:04:10.442, Speaker B: So now that we have a definition, a little bit of the etymology of Web three, let's talk about the actual state of this industry and specifically some of the issues that are plaguing it. Personally, we see the biggest issue as being the almost zealous conviction in tokenization of all assets. And perhaps this might be a little America centric, but you could just take a look at the housing market as an example of an asset class that maybe you don't want to hyper financialize. And what we essentially are seeing is that as time has gone on, protocols focus more and more on financial prosperity rather than the actual core tenets of what web3 is supposed to be. As we just went over. And beyond that, I'm sure a lot of you here have heard a lot of talk about privacy and scalability over the past few hours. Again, from an individual perspective and from an enterprise perspective, it's unusable a lot of the time.
00:04:10.442 - 00:04:53.254, Speaker B: So, I mean, if you tried to make a swap when ether was at $4,800, you probably paid $50 for a swap. That's bad. That hurts. And while some of us have gone ahead with web3 despite privacy concerns, there are a lot of ways that private information can be leaked. And then on the front of enterprises, they've just full blown written it off. For these reasons, a $50 transaction fee is a non starter, and the fact that certain information is public on a public blockchain, again is a non starter. So we saw the rise of private blockchains, and those were also ruled out as while they are private and scalable to the outside, you are still sharing critical business information with the other validators who happen to be competitors in the industry.
00:04:53.254 - 00:05:47.350, Speaker B: So what we've seen is essentially, at least until recently, the solutions were just not there. So really we think that we can summarize this issue in a single way, that web3, which has mostly become synonymous with DFI decentralized finance, has lost the plot of web3. Cryptocurrency has become this mechanism for profit generation, whereas that's not really what bitcoin was supposed to be. Bitcoin, while it has appreciated considerably from being worthless back in 2000 2009, it appreciated because of its financial agency instability relative to fiat currencies. It was designed to be not censorable or manipulatable. You can print more than 21 million. And the fact that it appreciated in this economic condition is a consequence.
00:05:47.350 - 00:06:38.550, Speaker B: It wasn't explicitly engineered to go up. And then we have protocols like Terra Luna, where there wasn't too much innovation on the side of the decentralization or peer to peer networks or cryptography. But they did present a novel algorithmic stablecoin, which turned out to be a financial weapon of mass destruction. A lot of capital was destroyed, both for retail investors and institutional investors lost a lot of money. And not only is this bad for the industry, just because there are resources that are suddenly taken away, it actually causes a recession in decentralization in this industry. And this is, I think, something even Vitellik has brought up. As we create these insane volatile liquidity events, governments notice and they decide their mandate is to exert force or exert power over these industries.
00:06:38.550 - 00:07:50.222, Speaker B: So as we create more of these opportunities for them to notice, we lose decentralization. Essentially, what we want to say, or we want to see, to have web3 grow to where I think we all see it being in the future, is for web3 to break out of decentralized finance and become something more than just a monetary tool. And we kind of see that with like decentralized science, decentralized social media. Some governance tools are definitely more focused on information rather than the financial aspect. But what we really believe is that zero knowledge cryptography is going to cause an explosion in these tools. So, specifically, if you're a little unfamiliar with zero knowledge, you might think of tornado cash, and how zero knowledge can be used as a tool of anonymity, or potentially even subversion of central authority or surveillance. However, it's actually important to note that at pretty much its inception, one of the thought experiments for justifying the need for zero knowledge was denuclearization between bitter enemies, the United States and the Soviet Union.
00:07:50.222 - 00:09:02.774, Speaker B: They needed to prove to each other that they were actually denuclearizing, but they didn't want to send or they didn't want to allow inspectors from each other's countries into their nuclear bases. So to have disjointed or adversarial parties that are able to coordinate and prove things to each other is incredibly valuable, both in the decentralized context, where parties are just disinterested, and perhaps in more centralized contexts, like the relationship that individuals often have with central authorities, where incentives are very much misaligned, we can start to build solutions that kind of bridge that gap. So going into the specifics again, on one end we have tornado cash coin mixers, which are ultimate tools of anonymity. And on the exact opposite end, of the spectrum with very similar code. We have tools of compliance, know your customer anti money laundering, and moving on. There's also, and I'm sure a lot of you have seen, like the temporary anonymous zone, all the semaphore stuff. There's the ability to create anonymous social media programs that again, allow coordination without any sort of central authority.
00:09:02.774 - 00:10:02.510, Speaker B: And on a completely unrelated vertical, we can construct IFF signals, which many of you probably don't know what those are, but essentially identification, friend or foe signals go on combat aircraft, and when they're flying through an airspace, you can basically, with a zero knowledge ifF, you would prove that you're allowed to be flying in that airspace without actually revealing the details of that mission. Again, we can start to fortify trustless computing, even bulletproof hosting. And again, on the other side of things, we can be fortifying centralized processes. Specifically, let's take the IRS. There's a little bit of entropy that goes into the audit lottery, so we want to make sure that entropy is sampled correctly as well. All of the parameters that are used to choose how someone is audited, we want to make sure that those are all correctly chosen, improved. And then finally, something that is not so new.
00:10:02.510 - 00:10:51.298, Speaker B: Chainlink has been working on proof of reserves for a while, but facilitates the unbanking of populations. And again, on the other hand, we can have centralized supply chains. So take the distribution, let's say, of alcohol. When you go to a bar, you need to prove that you are of age, and the bartender needs to prove that they are only distributing alcohol to people who are of age. And this takes the form of literal cops sending in minors to actually test these places. And that is a reactive solution that uses resources. Whereas if we were able to have a system where you can't even get in the door, if you can't prove you're 21, we free up resources for, obviously, the people who are checking the cops.
00:10:51.298 - 00:11:49.360, Speaker B: And then, as well, it makes the lives of both really the distributor a lot easier, given the compliance is managed in a programmatic way and a provably correct way. So just to summarize it, we have semaphore again, which is something that could be used for anonymous coordination, or kycaml. So what you should really be thinking is that zero knowledge is an incredibly versatile tool and how it is actually molded into whatever product that's up to you. So, specifically, if you are kind of intrigued by semaphore and you think that you have some way to contribute, there's actually a grant round going on right now. It said 14th on an earlier thing, but I'm pretty sure that this link says the 20 eigth. So I would highly encourage you again, if this is remotely interesting, to look into that grant, because there's a huge community of like minded people.
00:11:51.250 - 00:12:27.782, Speaker A: Awesome. Yeah. With the background of some of the applications of zero knowledge, let's jump into the actual history and how this came into being. So no doubt zero knowledge has very much been much somewhat of a zeitgeist this past year. Everyone's talking about it, how it could be used for privacy purposes, scalability. But what not many people might know is that actually you can trace its genesis back to 1985, two years after the founding of TCP IP, and six years prior to the first website on the World Wide Web. It was first published in an obscure paper by Goldwater, McAuley and Rakoff.
00:12:27.782 - 00:13:24.598, Speaker A: And really, with this paper, it first introduced the whole entire concept of zero knowledge cryptography. But it'd be about three decades until we actually saw some additional work on this. In 2013, we saw the first ZK snark implemented through something called Pinocchio. We saw the first example of a ZKVM through tiny rem. These weren't blockchain specific per se, but three more years, we would begin to realize the opportunity that zero knowledge cryptography really could provide in terms of scaling and providing privacy to Ethereum. And this happened through the proving mechanism called Grot 16, which was really the first practical ZK snark, something that could handle almost any arbitrary computational problem and encrypt it. Two years later, we would see a golden year in zero knowledge cryptography.
00:13:24.598 - 00:14:04.138, Speaker A: Barry White hat implemented the first roll up. As far as we were able to ascertain. Circum, a language made specifically for writing ZK circuits were released by an organization called Ident Three, the foundation of the ZK Stark, which is a different type of zero knowledge proof. Apart from snarks, that stands for scalable, transparent argument of knowledge. And what it really provides that snarks don't is it's quantum resistant. And it also removes the need for a trusted setup, which up until this point has been a major complaint of implementing zero knowledge proofs. Fast forward to 2019.
00:14:04.138 - 00:15:04.174, Speaker A: And Aztec released a new proving scheme for Starks called Plank. This didn't totally get rid of the trusted setup, but what it did allow is a universal trusted setup. So instead of needing to perform a lengthy trusted setup for every single snark you implement, you only have to do one that can then be applied to many a year after that, Starknet released their own ZKVM called Starkx with its native language called Cairo. Importantly to us, Zcash started work on the Halo two proving scheme which is foundational for battleships v two. What we want to accomplish there, and we'll talk about that a bit later in our presentation. A year after that, Mina came along with the idea of snaps zero knowledge applications or zero knowledge daps as well as circum released or identi released Circum 2.0 which really with that, that's what made it possible to release battle zips v one and present at ETH Denver back earlier in 2022.
00:15:04.174 - 00:15:58.560, Speaker A: Then fast forward to modern day a year later. 2022 Planky two, the successor to plank, allows proving speeds that are 100 times faster. ZkevMs are beginning to enter the mix in the experimental stage that include polygon Hermes scroll, which actually implements Halo Two, and then ZK sync as well. And then finally, an interesting application that exists now is zPrize, which is a zero knowledge analog of xprize. What it basically aims to do is provide a list of bounties so that those interested in improving the efficiency which with zero knowledge algorithms compute, can go and claim these prizes. But yeah, no, now that we've gone through the lengthy history, let's talk about how you can actually apply zk to the EVM. And to do this, you really have two options.
00:15:58.560 - 00:16:56.446, Speaker A: You have the option of applying a domain specific language or utilizing a ZK virtual machine, and both methods have their own pros and cons, their own trade offs. And ultimately what it comes down to is what are you trying to achieve with your application? What's the scope of it? But we'll go through the pros and cons right here. This pointer is tricky, so when it comes to a DSL, scaling requires expertise. But with a zke EVM, the entire purpose of this other network is really to allow scalability of your applications. With DSL, its computation is verified directly on layer one, but with ZKVMs, technically they are a L2. So all computations take place on said L2. And then consensus for DSLs comes from the root Ethereum network of your choice.
00:16:56.446 - 00:18:10.410, Speaker A: And then again, touching on the point just before CKVM being a L2, you're relying on an entirely separate set of security and validators that you trust will eventually reach consensus on layer one. But ultimately it's up to this external network. And then when it comes to DSLs, the software development kits that exist right now do their best to abstract away complexity but really what ends up happening is you kind of have to put on another thinking cap for those of us who are used to developing in standard languages. When writing zero knowledge proofs, can't get away without learning some of the cryptographic principles underlying elliptic curves, finite fields, constructing arithmetic circuits. So there's definitely a lot of overhead and a lot of investment you have to put in before you can actually get to writing your own program. Whereas in a VM, it's specifically abstracting a lot of the ZK overhead away. So you can get in with knowledge as a developer and get ahead and running your apps like that, and then finally talking about portability between DSLs and VMs.
00:18:10.410 - 00:19:16.638, Speaker A: What a DSL basically allows you to do is it's a way of constructing your files for proving and verifying zero knowledge proofs, and then it's up to you where you want to deploy them to be it a solidity smart contract on the root ethereum chain. It's really up to you where you deploy to. But when it comes to ZKvMs, you face vendor lock in risk. You might have a specific idea of what chain you want your application to end up on, but down the road, if the scope of your project changes, you can end up being locked in and lose some flexibility that way. But the route we ended up going on is the DSL route, and for that, we chose Circom. Circom was an obvious choice because it intuitively provides a language that closely mirrors the cryptography you have to learn. So after going through that headache, learning the ins and outs of the underlying cryptography, you can pretty much write out everything you've been working on the past weeks or months, however long it takes you.
00:19:16.638 - 00:19:43.560, Speaker A: But anyways, as much as we love circum, we found it difficult to actually go from beginner ZK developer to releasing battle zips. We actually have crafted our own gitbook called awesome Circum, and you can reach it there by scanning the QR code or go to battlesips.com resources. But just want to preface that, it's not quite done yet, but come this Friday, it should be complete. Yeah, check it out for sure.
00:19:46.010 - 00:20:33.990, Speaker B: Yeah. So again, we are working to get that just about finished, but we have basically taken the topics that we think are important from someone who's absolute newbie to basically be introduced to borderline spoon fed. And there are some that are really well documented, be it the proving systems gross 16 and Planck and the powers of Tau ceremony that is trusted set up for gross 16. We don't really need to do a lot for that. We are really just aggregating existing documentation and putting it in an easy to access format. On the other hand, we have multiplexing in circom. This is a little hidden tidbit that took us a while to figure out.
00:20:33.990 - 00:21:15.406, Speaker B: If you read the Circom documentation, you will be misled into thinking that you can use if statements. You cannot use if statements the way you think. If you try to use an if statement to compute condition, to select a conditional statement in circum, you will get an error called non quadratic constraints. Not allowed, very dreaded. And to circumvent it, essentially you need to do something called signal multiplexing, which is where in zero knowledge, you compute both cases. Or let's say you have n different branches of logic, you compute all n branches, and only once you've computed every single branch in zero knowledge then can you select which branch you want. And this is an analogy from electrical signal processing.
00:21:15.406 - 00:21:58.290, Speaker B: I believe this is how TV channels and cable even works. But the point is, if you aren't familiar with this, I know I wasn't when I was looking through various code bases and looking at multiplexing. And while you see an if statement in the documentation, it can be very confusing. So that's an example of something we go more in depth on. For the sake of time, I'm going to speed through a little bit of this, but we have some stuff that's again more documented, which is the arithmetic friendly implementations of different hashing algorithms, which then underlie the signing algorithms. So, Shaw three and ecdsa out the window. We're now using Poseidon or MIMC at the very least, and EdDSA, which are far more efficient.
00:21:58.290 - 00:22:29.206, Speaker B: We have Merkel trees, which I'm sure a lot of you are aware of, but they are one of the most powerful tools both for privacy and scalability. We can take a massive, massive data set and compress it into a tiny hash. And not only is this clearly a method for scaling, but we're also taking that data set and obscuring the data within it, while still being able to operate on it. So this gives us both privacy and scalability. So you will definitely be working with Merkel trees. And then there is first and third party devtooling. The first party devtooling.
00:22:29.206 - 00:23:21.230, Speaker B: You literally just have to use circom relies on snarkjs to actually put proofs in the EVM. And then there's also circom tester, which, unless you want to spend 2 hours running tests every single time you're going to want to use something that simulates the logic rather than actually running the entire overhead. And then there's also third party tooling, which is maybe not as required, but still is very important for having a good time developing. So there is the Shield CLI, which was just released, I believe, two weeks ago. They released their first non beta version. And you can think of Shield as hard hat or maybe truffle for it takes. You'll see in the battle zips code base there are a couple of bash files that handle the generation of circuits, and this is something that requires an understanding of what you're doing, whereas the shield CLI will just do this for you.
00:23:21.230 - 00:24:08.010, Speaker B: So whether you're already experienced with the Circom Snarkjs and solidity stack, or you are brand new especially, it's going to be very helpful for kickstarting a new repository. And then there's also the circumspect static analyzer. And this is another thing in Circom, the debugging and error messages leave a little bit to be desired. So having a tool like circumspect to analyze your code, point out areas where perhaps you're misconstraining something or you're just not correctly writing code is very valuable. So again, circumspect and shield CLI, very important. And then finally, implementations. We've done a couple of videos and we've got stuff on there, so I'm not really going to go into it, but the actual specifics of using Circom.
00:24:08.010 - 00:25:04.670, Speaker B: So now that we've kind of gone through all of what that is, again, I think there's like one more minute, so I'll be quick. But we built our original version of Battle zips as purely a privacy preservation tool, and this is mostly what we've been speaking to you about today, Circom. So this essentially allowed us to prove an adversarial interaction between two parties where they could still trust each other without revealing all this information. So it was a great proof of concept for us to demonstrate private information on a public blockchain, but it fell short in a lot of ways. The scalability is pretty trash, to be honest. And the intermediate state, so you're still hiding the ship positions, but hits and misses, all the different turns in a game, all that's public. So, moving on, what we're now working on, with the assistance of the Ethereum foundation through the grant, is battles of speed two.
00:25:04.670 - 00:25:38.522, Speaker B: And this is a little more exciting and novel, we think. Essentially we want to demonstrate, using battleships, the generation of state in a state channel off chain. And then we summarize the entire state channel in a single transaction using zero knowledge. And what this allows us to do is produce these interesting proofs so you get this almost immutable or indivisible object. A battleship game. A valid battleship game occurred between Alice and Bob, where Alice won and Bob lost. We'll talk about that in a second.
00:25:38.522 - 00:26:30.730, Speaker B: But essentially this benefits both privacy in that you have the intermediate state, shielded, and scalability in that you're batching all these transactions. And we intend to demonstrate how that can be used to drive qualitative insights without revealing a ton of personal information using ELO scores. So I think we'll just skip to the next slide because it's kind of the same thing again. Battle zips and zips, as a kind of data structure is basically state channel summary, where we're rolling up all of this state that we generate in like an ephemeral L2. We collapse it back onto layer one as soon as the state generation is done. And we already talked about the battleship proof, but there are a couple of more real world examples that are exciting to us. Take proof of a valid delivery.
00:26:30.730 - 00:27:10.262, Speaker B: There's a bunch of different parts that go into it. Perhaps there's iot temperature controls, or perhaps there's an inertial sensor on something that's fragile and can't be moving in transit. Chain of custody. Whatever you decide is necessary for your supply chain. You can then package that into a single proof of delivery. And the consequence of that is that the participants in this, say the delivery drivers who have no interest in being doxed on chain, don't have to be doxed on chain. You can start to involve them in these economies without them being exposed to all these negative externalities that web3 currently exposes us to.
00:27:10.262 - 00:28:01.640, Speaker B: And again, just another example, which is a little less novel. Obviously there's a snapshot which is somewhat centralized, but essentially we can take this entire voting process off chain. I assume it probably looks a lot like Macy too, actually, in premise, but instead of it occurring, all of the state accumulating on chain, where in Malik style, it's all even public, we are accumulating the vote off chain and then rolling up a proof that a vote occurred on this proposal where 65% of stakeholders approved it, or 65% of governors or whatever. So it creates these kind of indivisible proofs that can be used for various things. If you guys have any.
00:28:08.650 - 00:28:09.206, Speaker A: Question.
00:28:09.308 - 00:28:29.150, Speaker B: Sure. Yeah, really quick. Any desire to be working on this and you're struggling to get started. We have, I think, in the battleships, resources. We have a link to our discord. You can go in there and drop literally any question. We'll do our best to answer it with the QR.
00:28:29.150 - 00:28:36.654, Speaker B: Yes, sir. And then are there any questions?
00:28:36.772 - 00:28:39.360, Speaker A: We maybe have time for like one or two?
00:28:41.250 - 00:28:41.806, Speaker B: Okay.
00:28:41.908 - 00:28:43.674, Speaker A: If not, another huge round of applause.
00:28:43.722 - 00:28:44.830, Speaker B: For Jack and Ian.
00:28:45.210 - 00:28:45.620, Speaker A: Thank you.
