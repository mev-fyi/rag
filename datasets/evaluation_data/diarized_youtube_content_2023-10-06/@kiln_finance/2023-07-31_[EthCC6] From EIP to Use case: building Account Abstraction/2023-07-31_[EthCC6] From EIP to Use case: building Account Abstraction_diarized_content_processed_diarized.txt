00:00:06.890 - 00:00:09.134, Speaker A: But we're mostly here because of you. Like, you invited us.
00:00:09.172 - 00:00:12.142, Speaker B: So for the invite, this is because of Marie first.
00:00:12.276 - 00:00:13.470, Speaker A: Thank you, Marie.
00:00:14.850 - 00:00:18.574, Speaker B: She says something, I execute. That's how it works.
00:00:18.692 - 00:00:19.726, Speaker A: That's how it works at home.
00:00:19.748 - 00:00:42.540, Speaker B: For me as well here, it's like home. So let's start right, um, with you, Tom, and obviously, you know, Jerome or Adam. Like, please go on. If you had to explain EIP 43 47. Sorry, 43 37. And account extraction, in simple words, how would you describe it?
00:00:43.070 - 00:01:09.554, Speaker C: I would say that currently what we have in ethereum is too unforgiving. And there are systems in place in the existing, let's call it web two, traditional space that are there for a reason. Like, for instance, checks and balances. If you by accident sends $100,000 with your bank account, your bank will be like, wait, stop, this seems weird. Let's do two fa, let's make sure it's right with eoas. That's not the case. You'll just send the money.
00:01:09.554 - 00:01:33.546, Speaker C: That's it. It's gone. With account abstraction, we're putting back those things in place that allow you to have those checks and balances. We can abstract gas, we can have an experience which is like web two, but this is the big thing. It's decentralized and you can always opt out. You can always change who you decide to trust and how much you're not locked into your bank like you are in web two. So I would say, if I had.
00:01:33.568 - 00:01:36.620, Speaker A: To say one sentence, I love it.
00:01:37.150 - 00:01:43.526, Speaker B: So having web two ux in web three, Jerome, do you want to add anything to that specifically?
00:01:43.558 - 00:02:13.686, Speaker A: On the uX, web two login is usually two clicks. So we tried very hard with our implementation of account abstraction. And also that's the goal for everyone. We try very hard to bring the number of clicks before you onboard to the minimum amount. If we get web three is three click, that's going to be pretty good overall for us. Second abstraction also translated to numbers. We tried different ways to onboard people into the games that we support, like you do your customer acquisition cost, you run campaigns on Twitter, on Facebook and so on.
00:02:13.686 - 00:03:00.366, Speaker A: And you see that there is no real way to actually have a normal churn at the onboarding. I wouldn't say who is ranked the second best on our onboarding, but we do 90% better with account abstraction because just you remove the friction of installing a wallet. And from a web tree point of view, do you have an eoa? I imagine so. If you've installed metamask or something, you went through this hassling of draining down the 24 words, getting into it and so on. In the early days we were thinking about it like you install a node and then you tap get that account and now you have an account like, well, okay, where is my account? Your account is in this folder with this password. Okay, whatever. And we told the web three developers, the people have Webtree account, they have eoas and those eoas are their profile.
00:03:00.366 - 00:03:17.242, Speaker A: And you don't have to care about your CRM, you don't have to make them create an account. So just we'll log in with this. What if they don't have an account? Oh, then make them install a solve party app. Okay, works for me. Amazing. 99.99% of the web is doing something elsewhere, something in another way.
00:03:17.242 - 00:04:05.978, Speaker A: They will tell you like, well, you come to my application because you heard about us. Now you are creating an account. I'm knowing something about you, I'm respectful of your privacy, maybe potentially, I don't know, GPR, whatever. And now I'm telling you, well, now you are one of my customer and I'm trying to sell you stuff or give you some content or whatever. With account abstraction, we also have a way to say to the applications, like keep your model, but abstract the accounts on the blockchain if you want to make them use the blockchain. So we have easy ways now to associate an account in a proper account database to an address in Ethereum. And depending on how you handle the keys that control those smart accounts, you are more or less decentralized, more or less forgiving, and more or less letting the consumer opt out.
00:04:05.978 - 00:04:10.646, Speaker A: But it's also bringing a very easy way for the web two applications to onboard into web three.
00:04:10.768 - 00:04:13.038, Speaker B: I love it. So no more 24 words, right?
00:04:13.124 - 00:04:16.686, Speaker A: No, it's only up from there so.
00:04:16.708 - 00:04:20.320, Speaker B: My grandmother can start to use.
00:04:22.850 - 00:04:31.986, Speaker A: We have an implementation that's up and working. If you want to try it and show it to your mother and see if she can actually onboard, it's a.
00:04:32.008 - 00:04:33.780, Speaker B: Picture of that because she's not there.
00:04:35.110 - 00:05:01.882, Speaker A: It's one implementation and there are many other teams. We have some here that are working on the same thing. So we can imagine that we are going to have fruitful competition on approving this. Technically you're on board with your web often, so pass keys that are stored into your phone so they don't leave your phone. The key is created client side. We deploy your nodes safe, you control this safe, you can do whatever you want with it. Well, it's a trickling of money and that's what we've been waiting for.
00:05:01.882 - 00:05:10.734, Speaker A: Like not okay, connect with magic, link with web crews with I don't know which kind of MPC your flavor most and what it connect and so on.
00:05:10.772 - 00:05:12.026, Speaker B: We'll talk about NPC afterwards.
00:05:12.058 - 00:05:41.642, Speaker A: No worries. These are good solutions, but good solutions for people that are already aware of what they are doing. Like in this case, you just put your fingers and you have a safe and you are onboarded to your Webtree journey. So that's for us, good ways to do it. We support those assigners as well, but we want to make sure that the first step of newcomers into Webtree are done in a way that they don't get this bashing at the end. Hey, you're in charge now. If you lose something, it's done.
00:05:41.642 - 00:05:59.726, Speaker A: If you send it back, it's done. Just give it the taste of web three without giving all the responsibility at the get go. And also don't have to buy the native currency. You don't have to do all of those kinds of things. It's extremely powerful and we've been lacking that for years.
00:05:59.908 - 00:06:00.782, Speaker B: Like it.
00:06:00.916 - 00:06:04.394, Speaker A: Adam, I don't want to chill the to.
00:06:04.452 - 00:06:18.454, Speaker B: Do you want to add anything and maybe explain how do you think account abstraction is changing the ethereum ecosystem and how alchemy is trying to make developers and users accessing it?
00:06:18.572 - 00:06:48.762, Speaker D: Absolutely. So I think the way I see account abstraction, it brings three sort of fundamental changes to the ecosystem. One is proliferating contract accounts, and we've sort of seen that before. Two is abstracting away the signing mechanism that determines transaction validity. And three is abstracting away gas. So contract accounts. The biggest fundamental change that we need to consider is that with externally owned accounts you can essentially think of like in web two lenses, you have a username and a password.
00:06:48.762 - 00:07:30.010, Speaker D: And with an EOA, the password determines a username, you can never migrate that, you can never change it, you can't recover it. Now, notably, this has been solved already with safe and other implementation of contract accounts. But what four, three, seven and account abstraction really solves is the latter two. So abstracting away the signature validity and the gas abstraction, what that looks like in four, three, seven is there's a bundler that relays things on your behalf so you can use new signature mechanisms. So that's like pass keys. Other examples include like bls that people are experimenting with for l two s or schnor as like another cryptographic scheme. And on top of that you have delegated sort of permissions or stateful validation that can exist.
00:07:30.010 - 00:08:18.778, Speaker D: The next step is the gas abstraction. And this is essentially finding a way to abstract away like who's the onboarding flow of having to go to coinbase or having to see your wallet with ETH. In the case, like the safe example, you have to initiate the transaction from an EOA despite using a contract account. And with four, three, seven, you can use either like sponsoring paymasters or token paymasters that essentially allow the DAP to take control of that aspect of the transaction flow and just simplify the onboarding experience. So, like, when you signed up with this link, I imagine there was some flow that you didn't have to pay for the gas, it was sponsored. Yeah. And I think these features also come together to enhance what an account can do with much more flexibility and power than a simple ECDSA account.
00:08:18.778 - 00:09:04.458, Speaker D: And sort of this makes the account exist as this new programmable entity, which is why one of the things we're doing at alchemy is contributing to and co authoring a standard called ERC 6900, which specifies a modular account. And this basically takes these sort of chunks of features that you can embed within the wallet and makes some sort of relation that exists between the account and a plugin that implements this logic. So we're testing it out and working with collaborators on spreading usage of that, and it sort of fulfilled some of the goals of, like Vitalik stated about reusing code as much as possible, minimizing complexity, and having sort of established boundaries between these things. And so it all sort of comes together to create a better user experience. In, like you said, onboard, people who.
00:09:04.464 - 00:09:37.926, Speaker A: Aren'T familiar, we get also some side benefits. Like imagine you have received a lot of things on your smart wallet and you want to give it away in one go. Well, you can transfer this smartwatch to someone else. There are ways to sell your smartwatch to someone else. So you are just giving everything away. In the context of gaming, it's very powerful because you can use smartwatch as a character and hold a lot of things on your character and then give it away. By giving it away, you're replacing some of the owners, which means that you are also able to roll the different keys, like replace a key that's compromised or whatever can happen.
00:09:37.926 - 00:10:27.086, Speaker A: So that's also a very cool features. But regarding the title of the panel, we say EiP to use case. We went to use case because the history of ecosystem, which was covered by Vidalik and yesterday's talk, there was a lot of eips, there was a lot of attempts to actually implement account abstraction at the very protocol level compared to ERC, which define just the interface of a token for a specific use case. So what you're doing is an ERC on having a better way to implement those kind of thing, but we still lack some eips. ERC 43 seven was a great way to put everybody in front and say like, okay, we can now do this. This is the right approach. This covers a lot of different type of use case, whether you implement the whole interface or you implement some of the interface.
00:10:27.086 - 00:11:10.750, Speaker A: Depending on your use case, we can actually do that. That triggered a movement over several different teams to actually work on that matter. And also on our end, we like to use web often because it's a really easy way to onboard someone with a key, but we still have to verify the signature on the blockchain so they create an overhead which makes the solution more suited to l two s. But nevertheless we will probably get an EIP on trying to implement this curve as a precompile, which will be an EIP. So there's still a lot of improvement to be done at the protocol level. So this thing works, right. But we are slowly getting into a situation where we are crystallizing the use case and the core interfaces of the contract.
00:11:10.750 - 00:11:16.062, Speaker A: And as an ERC 47 holder, what do you think about this movement?
00:11:16.126 - 00:11:29.510, Speaker C: Just to be clear, I'm not one of the authors. The author is the Avdor Shahfan Alex. I'm a PM for the Ethereum foundation, working on the 43 seven. Very familiar with the ERC itself and EAp. I want to touch a little bit about the difference between EAP and ERC.
00:11:30.090 - 00:11:42.730, Speaker B: So eap, just quick point is like, of course we went to the use case a bit too fast. Can you also touch on what 43 E 37 changes in the account abstraction ecosystem?
00:11:43.230 - 00:12:08.046, Speaker C: Yeah, that's what I want to explain. So first of all, to kind of understand an EAp is a change, which is like a breaking change. Like EAP 1559, right. At some point you're either with us or against us, so to speak. You don't like it, go make your own ethereum classic two whatever. It's a breaking change from taking a classic software kind of like term ERC is. Well, people think about ERC 20, but it's not like a token.
00:12:08.046 - 00:12:39.898, Speaker C: It's just we all agree on a standard for a feature, because think of ERC 20 for instance, or 721, which is the NFTs is you can adopt it if you want, but you can ignore it. You can ignore the concept of the ERC 20. What's the benefit? If we didn't have a standard around what is a token? We wouldn't have the proliferation of stuff like dexes and everything because everybody would make their own. One would have like a deposit. Another person would say, no, you don't do it this way, you do it the other way. And then we don't have this great interoperability. So the benefit here is standardization.
00:12:39.898 - 00:13:31.918, Speaker C: But why do it as an ERC is not an EAP. And like it was said, eaps for account attraction have been tried before and they didn't really take off. My personal belief is that opposed to something like gas fees or number of transaction or something which you can simulate beforehand, get some metrics and show the core devs here. If we do this, EAP 1559, then we can simulate, and it's a lot easier to kind of see what will happen and see that it will actually make gas fees more stable or whatever. But when we're talking about account abstraction, this is mostly user experience. It's not as easy to just kind of say, yes, this will work, and we know it will work. So the ERC concept is something that allows us to rally everyone around.
00:13:31.918 - 00:14:03.820, Speaker C: First of all, I want to make it absolutely clear, we do intend to make it as an EIP at some point for various reasons, around gas fees, around speed, around other stuff. And the migration from an ERC to EAP would be basically seamless. Maybe a small change for wallets. But the idea is that you will not need to migrate to the EAP standard and. Sorry, I was going to say.
00:14:05.550 - 00:14:08.554, Speaker A: You were saying that you are going to implement it as an.
00:14:08.672 - 00:14:42.978, Speaker C: Yeah, yeah. Not myself, but it's already in the work. It's already in the work to implement an AP, but obviously that will take time. So the secret sauce, so to speak, around what allows this to be an ERC. How can we do this without breaking changes? This is the user op, mempool. So the way the ERC works is that instead of regular transactions, user creates something called a user operation, which is like a transaction with some additional metadata. That's called a user operation, which is put into a separate mempool that is then looked at by all the bundlers.
00:14:42.978 - 00:15:08.526, Speaker C: Just like how block builders look at the regular mempool. You now have this alternative mempool, this user operation, Mempool. The bundlers then grab all the user operations, create a regular old transaction because the network still works the same. It still works with regular EOA transactions. It doesn't submit by the way. This is a common misconception. It doesn't submit that big transaction that includes a lot of user operations into the mempool, because then it can get front.
00:15:08.526 - 00:15:29.960, Speaker C: It actually proposes a new block with that big transaction. So bundlers either have to be block builders themselves, or work closely with block builders, which also plays into MEV. They're working closely with MeV providers to create those blocks. So that's kind of like where the story is around the ERC. Four, three, seven.
00:15:32.170 - 00:15:44.310, Speaker B: Can you give us some of the impact of this specific dedicated main pool before and after? What are the advantages for the users?
00:15:44.390 - 00:16:31.370, Speaker C: I think the main advantage is the fact that we can do it as an ERC, meaning that we can do this now without having to have a hard fork in order to support a kind of abstraction. If wallets start adopting, using the, start using ERC 43 seven by using the bundler APIs, et cetera, that we have currently around seven or eight different implementations for bundlers, because that's also very important to us to have, just like block builders, we want to have a robust infrastructure, which means that we want to have multiple implementations of a bundler. So we don't have a situation where one bundler has a bug and suddenly the network comes to a halt. Right. So the main benefit of this user operation, Mempool is to allow account abstraction to exist as an ERC. That's, I would say the main.
00:16:31.520 - 00:17:20.866, Speaker D: There's one additional point I want to bring up about having a mempool and for context, prior to the EIP, or I guess concurrent with the other eips, there have been this concept of a meta transaction, and that's some sort of contract that under some conditions does a similar style of relaying, like what the bundler does. Four, three, seven standardizes. The problem with these setups though, was that they're sort of bespoke and packaged as a product, and that led to issues around censorship resistance. Like if a particular relay didn't like your transaction, they could just exclude it and you sort of had no other option because it was constructed under this proprietary metatransaction framework. So with 4337, we use the ERC mechanism as a way to standardize it in a way that the different bundlers can share with each other. And there's just general consensus around how to format these and how to propagate it.
00:17:20.988 - 00:17:35.680, Speaker C: Yeah, that's also very important. It's that the relay itself is not centralized, so anyone can set up a bundler in relay, which means that there's no single point of failure. There's no risk of censorship, which is obviously very critical if we're talking about some sort of ethereum standard.
00:17:36.210 - 00:18:11.126, Speaker A: As a user, you have to understand that an abstracted transaction, you wouldn't have to pay gas. There will be a mechanism on the side that will pay the gas for you. Maybe it's the app sponsoring the thing, maybe it's bundlers really liking your face, like, oh, I love this guy, let's pay for his transaction. Never mind. But also, one of the great benefits you will get is that if you have a token, it's the first time you hit uniswap. You can potentially bundle several transactions at the same time, like approve and then execute and then send. Those used to be like three transactions and you have to wait for one, and then the production pass, then the price have changed.
00:18:11.126 - 00:18:43.700, Speaker A: Like, what the heck? Now you will be able to say, I want to do all of those three actions at the same time. Because from the Etron virtual machine point of view, you're executing this, this and that in the same transactions, right? So it's going to improve the user experience, that's for sure. Both at not having a pop up to answer to and to the understanding that all of those steps are one after the others. Yeah, but it takes a lot of plumbing in the back for sure.
00:18:44.070 - 00:19:33.346, Speaker C: But speaking of something like that, there's also another benefit you can have since you now have a smart account, like a smart contract wallet, is that you can also have automation happening behind the scenes inside the wallet, like you want your wallet to listen to when an event happens, you want something else to happen, or you want something to happen every x amount of time. You can have those automations in place, which opens up a lot of new possibilities, like subscriptions triggering, et cetera, which right now you can't really do it in EOA unless you're giving away trust, like I'm giving away someone else, my private key, and I'm telling them, sign for me when this happens. There's a lot of benefits when you're adding this layer that gives you a way to cycle keys, add programmatic functionality into your account, everything that you would expect by having this additional layer in place.
00:19:33.448 - 00:20:14.622, Speaker B: I guess that's a good transition for use cases, right? So what I've heard is that you can forget the 24 words, you can trade your wallet with another person or do social recovery even easier. You could have a paymaster, so have a great application that pushes you not to pay the gas fees, but they're paying for you first of all, is that how you see, and obviously do automation on the wallet? Is that how you see account abstraction benefits? And coming back, what are the various applications that happens? Maybe starting with you, Jerome and Tom and Adam.
00:20:14.686 - 00:20:33.990, Speaker A: So just first, private key and passphrase hygiene. Don't try to remember your passphrase, that's what you forward. Don't try to remember them. Write them down, keep them in a safe place, don't lose them, but don't try to remember them. It's a very bad onboarding in the first place.
00:20:34.060 - 00:20:35.350, Speaker C: Don't make too many copies.
00:20:38.570 - 00:21:17.794, Speaker A: This hygiene is complicated, right? You have to understand it's a security model. And as a first step into web three, that's okay. You really have to be dedicated to get into crypto, right? So to come back to your questions, here's a very common use case that we see with games and traceability solutions or loyalty solutions that we start to work with. They come to us saying like, okay, we don't transfer any value, we don't transfer anything. We just keep track of collectibles and keep track of things. So how do you handle the key of your users? Well, we run our own key management solutions. So they open like Azure vault or something like this.
00:21:17.794 - 00:21:49.418, Speaker A: They just ask their ID to deploy something and say like, tom, okay, it's this key. Adam is this key, and so on and so forth. They hold the private key of the users and they're like, well, now we have a private key for your users and public key as well. And then how do you transaction? Well, every time we have to do a transaction, we airdrop some native currency on all of those accounts and we do the transaction after. So we have to wait for one transaction to go in so the transaction can be go out and we leave a lot of dust on the thing. It seems like, well, where did you go with this thing? At first because we didn't know how to do it elsewhere. And it seems just natural.
00:21:49.418 - 00:22:43.322, Speaker A: It's a lot of overhead and it poses big problems in our overall user experience. So all in all, I feel like any web to minded company, and I don't mean to say that being web to minded is bad because for many reasons it's pretty good. It's like they take what they had for granted and just apply the template that they learned was good, except that force specifically key, it's not good. So I can abstraction make the current framework work with web three. And that's a big game changer. So specifically for games, it's super important. I kind of have a feeling that until we get really scalable l two, like a lot of cheap l two, a lot of l two s, that doesn't really push that data into the layer one to bloat the state we will continue to have every time we have a good l two with traction.
00:22:43.322 - 00:23:30.862, Speaker A: A lot of defi applications that will just push away applications that don't really do defi. But if we end up having cheap l two s, people will be like oh, let's innovate and do some cool stuff with blockchain directly on the public chain and on public stuff. Example, gaming, it's direct application that you can feel already as a webtoon, users collecting nfts, having tokens and so on, that games should adopt this kind of model. Except that getting a wallet in the hands of the users, oh my God, it's super duper difficult. Account abstraction is a very good way to do that. Our next game is being published on Epic Game store with account abstraction and said oh yeah, it's good enough solutions. We work with an MMO that's already alive and pretty big and moving into web three.
00:23:30.862 - 00:24:18.794, Speaker A: They use a solution that you install the client, the actual XA of the game. In the XA of the game they have a wallet that's being generated and stored in the folders of the game. And they say like hey, on top of that we want to do like an abstraction. Can you help us on the smart wallet? Like what are the good implementation? What could we do? And we will just sign with this and then we want to have a backup or maybe have a social recovery. Like what are the mechanism on that? It's opening up a really safe way for them to opt into this. And when you're doing it on l two s, you have a form of not security, but a consistency on the gas that you are going to pay, you're not going to be exposed to a super high gas price and so on. So it makes blockchain way more accessible to those type of applications.
00:24:18.794 - 00:24:26.900, Speaker A: And that's extremely good to see because we are migrating away from just transfer of value into real utility and real use cases now.
00:24:28.070 - 00:25:11.722, Speaker C: Yeah, Tom, I would say in terms of accessibility, one example, for instance, that's something that's possible with account, you know, up to the basic how exactly it will be done. But this is something that's been discussed is something called ephemeral keys, like session keys. So this is really useful for gaming. What you can do is basically generate with your account a new key, a temporary key, and you're saying this key can only transfer up to a certain amount of value, has a time to live of like, let's say two days, and can only speak to this contract, to these methods. Then I give it to the game. I trust it to use in the game for those specific methods, for that specific amount of time so it's not going to be abused anyway. And this way I don't have to sign all the transaction.
00:25:11.722 - 00:25:47.082, Speaker C: They have the private key they sign for me. So that's a really use case for accessibility. If we're talking about like, it makes the blockchain a lot more forgiving. There was a hackathon project in Tokyo. So in Japan, around 70% of the population has a government issued id that has an NFC chip inside and can be used to sign, just like cryptographically signed stuff. So you can use that as a hardware wallet, basically with your phone as an NFC. That key is, your account approves that key for whatever, whenever you want to sign for something, you just do this with your government issued card.
00:25:47.082 - 00:26:15.582, Speaker C: And if you lose it, you can get a new one from your government. And there's a mapping between different, it's a new key that the government doesn't know, but there's a mapping between the public keys when you change it. So yes, you need to trust the government for recovery, but again, it's your choice. You can opt out. You want to hold your own key, hold your own key. And it's just like, in general, there's so many use cases. We saw a hackathon project where a Dow will allow anyone who is part of the Dow, they will sponsor their gas fees.
00:26:15.582 - 00:26:48.650, Speaker C: So that's a really useful use case because you can have people in a Dow not even know what ethereum is, whatever. They just know they got 10,000 Dow points, doesn't even be called tokens. And then the fact that they have 10,000 tokens indicates that they're a meaningful part of the Dow. And when they go to sign a transaction, the paymaster will look, the Dow's paymaster, that is the treasury of the Dow, will sponsor those gas fees. The code of the Paymaster, which is just a smart contract, right. Will look at the user that made the transaction. See? Oh, okay, part of the Dow.
00:26:48.650 - 00:27:02.386, Speaker C: Fine, I'll pay the gas fees. As far as the user is concerned, they signed in with Webothn and they don't have to buy eth. They don't know anything. And that's like a really, it makes everything so smooth. Compared that to three years ago when.
00:27:02.568 - 00:27:04.574, Speaker A: You have to trust your government for social recovery.
00:27:04.622 - 00:27:06.758, Speaker B: Oh, my God, you don't have to.
00:27:06.844 - 00:27:08.120, Speaker C: You want to hold yourself.
00:27:08.730 - 00:27:15.480, Speaker A: What you mentioned is extremely interesting. Imagine someone like, let's say a big hardware wallet company.
00:27:18.270 - 00:27:19.626, Speaker B: Not naming anyone was.
00:27:19.648 - 00:27:55.974, Speaker A: Selling you an NFT, saying, oh, if you have this NFT and you sign a transaction, I'm willing to pay for your gas up to, like, ideally, we are part of the back in the early 2000s where you are taking a subscription on your mobile phone and you have x amount of text and x amount of minutes. But like, okay, how many gas? I'm going to pay for you $10 a month. $10 a month? Okay, I'm going to pay $10 a month of gas for you. But you know that with this, you don't have to care about anything. I'm going to pay the gas for you. I'm going to pay the gas that you will expend, that. You just sign.
00:27:55.974 - 00:28:14.134, Speaker A: Just sign and you don't care. So I'm pretty sure that a lot of people will be like, hey, I'm doing ten transactions per week. So very happy to take this subscription. $10 is not that much. And then the bundler, the MeV guys and all of those core protocol magicians can figure it out. Like, yeah, please, you can have, like, ads.
00:28:14.182 - 00:28:20.780, Speaker C: Have the paymaster get competent by you watching ads. I know these are very dirty words that I'm saying, but there are ways to get around that.
00:28:22.110 - 00:28:31.918, Speaker A: You were at the echo scan page where you have the will. It's like, no, wait, not here yet. And then you see things opening and a big video coming up. And if you look at this video, we give you this back.
00:28:32.084 - 00:28:38.178, Speaker B: So is that what's happening? You're giving us $10 of ease. Now we can play with.
00:28:38.264 - 00:28:50.760, Speaker A: That's completely an application you can build, like saying, I'm sending you NFTs as a subscription or shortlisted NFT as a subscription, where if you have those NFTs, I'm going to bundle your transaction for free.
00:28:51.290 - 00:29:09.226, Speaker B: Yeah, of course, Adam, I would like to. Of course. Please give us some application. You see, and also because you've launched, I think, your feature a couple of months ago now, can you explain to us the growth you've seen and how developers are using it?
00:29:09.328 - 00:29:37.406, Speaker D: Yeah, absolutely. So Alchemy recently launched two account abstraction related infrastructure products. One of them was the bundler. So it's basically a bundler as a service. It provides the RPC methods for submitting user operations, getting their status and conforms to the 4337 spec there. So it's a sort of just like necessary step to interact using four three seven. And we actually wrote that in house in rust, like leveraging all of Alchemy's extreme efficiency with distributed systems.
00:29:37.406 - 00:30:11.962, Speaker D: And we're going to open source that soon. The second product we launched is what we're calling the gas manager and that uses ERC four three seven paymaster contracts to sponsor gas on behalf of Dapps. So basically Dapps can create policies that specify the conditions under which that sponsorship will occur. As users come to the DAP, they make a request out to alchemy. Alchemy generates a signature and then they can use that signature when they submit their user operations at the bundler. And they don't have to think about gas, they don't even have to think about asset onboarding. And in terms of general adoption and usage, it's heavily sort of trended towards l two s and side chains.
00:30:11.962 - 00:30:24.990, Speaker D: Given the sort of, there is an added gas cost to this, it's not terrible by any means, but it is substantial enough to shift the focus towards what we've seen, primarily polygon. And then behind that optimism and arbitram.
00:30:25.150 - 00:30:55.886, Speaker B: Right. Because I know we are, I'm asking way too many questions and it seems you're responding very well. So it's like we close to the time, but still there's one question that remains to me, and I really would like to know, where do you see smart contract wallets in the security landscape? If you take hardware, MPC, brother wallets, where do you see that? Maybe, Tom, starting with you, where do.
00:30:55.908 - 00:30:57.066, Speaker C: I see smart contract wallets?
00:30:57.098 - 00:30:57.598, Speaker B: Yeah, exactly.
00:30:57.684 - 00:31:26.214, Speaker C: So when you're talking about other wallets, I don't see that as a replacement. It's like they're all operating on top of that layer. So if you want to use MPC, that can be part of like. So you have a logic for your account, right? Different signatures can do different things under different permissions. If I want to do this transaction with this contract, then this key, if I want to do that transaction, I need three keys so I can decide. NPC is for this functionality. Hardware wallet is for this one.
00:31:26.214 - 00:31:49.582, Speaker C: Web authentic for this one. Think of your smart account like ACL, like access control. There's a reason these things evolved in the regular software space, because that was needed. And the average person cannot handle a private key themselves. Developers cannot handle a private key themselves. So we're asking like users to keep a secret and everything. That's not possible.
00:31:49.582 - 00:32:07.230, Speaker C: So we need to be, like I said, much more forgiving. So MPC or schnor or hardware wallet, they're not instead of a con abstraction, they're just like different signing mechanisms, different cryptographic algorithms on top of account abstraction.
00:32:07.390 - 00:32:08.014, Speaker B: Right?
00:32:08.152 - 00:33:00.086, Speaker A: We noticed for years that smart wallets were a much better user and user friendly method of onboarding people. We just didn't agree or didn't see the whole picture of how they should be implemented. And both of your ERC are tackling this very well for me. There's no going back to something else due to the ease of use of those kind of applications and also some form of privacy preserving as well. Like in the demo that you tried, every single application is going to deploy a safe for you and have at first a pass key or web of or whatever you want to use in terms of onboarding the person for the first signer. So they won't know anything about what you have on your wallet. What do you have on your things?
00:33:00.188 - 00:33:15.306, Speaker B: So would you store and of course, Adam, I would like to see your view on security, but would you store all of your eth? And that could be a question for you as well. In a smart contract wallet, know, getting rid of your hardware wallet, I'm sure.
00:33:15.328 - 00:34:05.622, Speaker A: You have no, I'm already storing most of my crypto wealth in smart contract wallet. I'm using Nosisafe. I'm a big fan of the safe team, but the signers of those nosisafes are some are metamask, some are rainbows, some are ledger hardware wallets, some are like you create your own security features, you create your own ways of storing it. But there is no doubt that an implementation such as Nosisafe is safe to use for me, even in terms of TvL locked on those nosisafe. That's the go to solution for any dao. We are talking about polygon. The way the selection of the polygon validators is and all is through a multi sig.
00:34:05.622 - 00:34:14.150, Speaker A: That's a nosisafe. Okay, so that's the kind of responsibility we make the contract like nosisafe handle.
00:34:14.310 - 00:34:43.106, Speaker C: I think it's a question of terms here that we just have to consider that you have keys, you have wallets, you have account. In my eyes, a wallet is more like the application where you can see all your assets or whatever. It's not you. The key is just a specific key. It could be a hardware wallet can be your metamask, it could be where you store a key. It can be web of end, like your device. The account is where you kind of have everything all of your different permissions, your identity, like your rules on how you want to interact.
00:34:43.106 - 00:35:07.150, Speaker C: So when you say throw away your hardware wallet for an account. No, I'm augmenting my hardware wallet by not just having an EOA key that does everything, I'm putting an account in front of it. So I kind of rules in place that if I suddenly send a lot of money, you know what, I need to sign twice with my hardware wallet. I don't know what. Whatever. Something to just kind of make sure that I didn't make a mistake. Something like that.
00:35:07.220 - 00:35:10.942, Speaker B: These different wallets are different signers, and then you have the rules on the account.
00:35:10.996 - 00:35:11.598, Speaker C: Exactly.
00:35:11.764 - 00:35:13.518, Speaker B: Makes sense. And Adam, for sure, the last part.
00:35:13.524 - 00:36:11.714, Speaker D: I wanted to touch on, a lot of these focus around the user space, the security of how you configure these. Some additional point of call out is that as these new features get built into wallets, there are additional security considerations around how do you audit this new account that adds this new feature? And that's generally sort of like purpose that we're trying to serve with ERC 6900 is, like you said, taking a stab at addressing the more complicated structures where it's not just a multi sig, but you have, let's say it's a dow with a subcommittee, or the session keys are again further permissioned and further structured, limited keys. And the net result of this is creating an account that represents some more complex moving parts, but the individual plugins, the individual behaviors, still have security assessments that apply over the code that implements them. And this is generally sort of like developer focused thing about bringing together DAP developers and account developers to form a standard like this and strengthen the security principles behind it.
00:36:11.752 - 00:36:16.660, Speaker A: Yeah, to add up on what you said. And maybe that's coming back to the first question, what is like an abstraction in the.
00:36:18.090 - 00:36:22.406, Speaker B: Actually, I'm sorry, but I think we won't have time for questions.
00:36:22.508 - 00:36:38.906, Speaker A: Go ahead. You have a metamask. Your eoa is both your account and your signer. Like, you see the x, blah, blah, blah, and it's a scan. It's my account. It's my account. But why do you sign it? What is my private key that's signed the account of science tools tells you like this smart wallet is your account.
00:36:38.906 - 00:37:05.842, Speaker A: The signers, you define them. The application that deployed the smart wallet, maybe you that deployed the smart wallet, you choose an initial configuration. Some wallets are customizable. Like you can do whatever you want, you can tweak them, you can add modules and so on. But at its core, they let you choose between different flavors of signers. At the beginning, they onboard you in very smooth wave with those signers in the beginning. They can create accounts for every single applications before you are willing to say, like, hey, this is my eoa I want to sign with.
00:37:05.842 - 00:37:31.558, Speaker A: And, oh, it turns out there's $10 million on this eoa, so, oh, we are going to push you some different things to buy than just cheap nfds. This is the change of mindset. Now it's becoming clear that you have accounts, you have signers. Eoas are account and signers, so they come with more responsibilities. But since we are able to separate between account and signers, now we can bring the complexity into the accounts and keep it simple for the signers.
00:37:31.654 - 00:37:50.834, Speaker C: Yes, that's a very good way to summarize that. And we can also cycle the signers. That's an important deal. Without losing your account, because right now, if your account is compromised with any way, you have to change your account, and that's not always possible. Like, it's maybe on some dow that doesn't let you move it here. It's the same address. You're just moving away the keys, but you're keeping that same layer, the same.
00:37:50.872 - 00:38:07.042, Speaker A: Which is horror stories. Horror stories. You stole the private key. They took off all my EF, and I want to recover my nfts. How do I do? You send a transaction to fund the account. Well, the EF will be taken away immediately. This doesn't happen with accounts.
00:38:07.042 - 00:38:07.874, Speaker A: Smart accounts.
00:38:07.922 - 00:38:21.660, Speaker B: I love it. Unfortunately, I think we have to wrap up, so we won't have time for questions. You can still stay and come to these guys, asking them question directly, but please give them a massive round of applause for.
