00:00:07.210 - 00:00:31.910, Speaker A: Hey there and welcome to the latest episode of Again Layer ABS Edition. I am your host today. I'm Edgyard, political specialist at Kyon. We're the leading enterprise grade staking platform based from France. I'm your host today, but I'm not alone. I'm with Loik, who is product manager in everything. Maybe Luigi, you want to do a quick intro?
00:00:31.980 - 00:00:39.206, Speaker B: Yeah, I'm Louik. I'm product manager at Kiel, working on our smart contract project and on the integration of Egolio across our stack.
00:00:39.398 - 00:00:45.370, Speaker A: And we're welcoming today Ismail from Lagrange Labs. Ismail, how are you doing today?
00:00:45.520 - 00:00:49.180, Speaker C: Doing great. Pleasure to be here, guys. I appreciate you having me.
00:00:49.790 - 00:01:13.060, Speaker A: Thank you so much. So just to give a bit of context, Lagrange is one of the Avs that will be live on Eigenair and this is what we're going to talk about today. So Christine wanted to have you introduce yourself at the beginning. Give us a bit of context on what's your background and what led to work on Lagrange and blockchain in general.
00:01:13.670 - 00:02:12.502, Speaker C: Yeah, so I'm one of the co founders of Lagrange. I focus mostly on the business side of the company. My background, I was a venture capitalist before founding Lagrange. And before that I was an engineer and an engineering leader. And I started my career very early on working on engineering for digital asset strategy for a large financial services company before being a venture investor. And when I started Lagrange, really the core idea we had was if there is a certain amount of state that your contract and predicated state transitions on, in reality, what you can build on chain is constrained by the access to that state and the amount of state that your contract can process in a given function. Call and we believe that you could kind of take the same data driven computing paradigms that we've seen in web two, and we can apply those both in terms of single chain and cross chain state access, you're able to build things that are more complicated, more robust and are more efficient all the way around.
00:02:12.502 - 00:02:16.440, Speaker C: We can take the ten things you can do on chain today and you can make them 100.
00:02:18.090 - 00:02:48.290, Speaker A: Great. And I saw that you studied in Montreal. That's funny, because I did. I was on the other side of the Monday and I was in HSE Montreal. You were in McGill. How does one start working in blockchain? And how do you end up working with something that's at the forefront of innovation again, Leah Avias is probably like one of the hottest topics right now. So yeah, talk a bit about this yeah.
00:02:48.360 - 00:03:41.470, Speaker C: So firstly, I feel like, I love that you studied the Montreal as well. The thing I always say to people in the US is, if you haven't been to Montreal, you have to go. It's one of the few cities I would say in North America that has just a really rich and diverse culture that's not anglo centric. And it was probably one of the greatest places I could have gone to. So when I was there, that was really when I first got into kind of entrepreneurship broadly. I had my first startup when I was in college, raised a small amount of capital, not like what we see some of the Stanford kids raise now, but it was meaningful at the time. And as an ecosystem and kind of as a city, Montreal has some very deep roots in entrepreneurship and in startups.
00:03:41.470 - 00:03:53.538, Speaker C: And there's been some great companies in the last decade, sonder for example, that have come out of Montreal. So it was a great place kind of to get my feet into what Lagrange would end up becoming.
00:03:53.714 - 00:04:17.342, Speaker A: Nice. One question I think that to start off the technicalities is Lagrange with Eigen layer is something that's aiming to service optimistic roll ups. Can you explain to us what is an optimistic roll up and how does it differ from a ziggy roll up, for example? Yeah.
00:04:17.476 - 00:05:10.846, Speaker C: So an optimistic roll up is a roll up where the canonical bridge does not generate a validity proof of the correctness of a state transition from the transactions wherein it asserts its state on an L1 through a bridging mechanism that is optimistic. The sequencer writes the purported block header or purported state to the L1. And then there's a fraud proof window wherein watchers of that network can submit challenges if the state purported by the sequencer is incorrect. So really, zk roll ups and optimistic roll ups are both bridging mechanisms for validity roll up signs for sovereign roll up designs. And so a validity roll up or a ZK roll up have the use proofs in essence to assert their state on the L1. And an optimistic roll up use an optimistic design.
00:05:11.028 - 00:05:33.782, Speaker B: Okay, interesting. So do you think the Ethereum space will be composed of many roll ups in the future? Do you think there will be more and more zk and optimistic roll up? Yeah, we've seen at Devconnect, for example, that there is kind of this symptoms of a thousand roll up. And do you think it's the future for Ethereum? What's your opinion on that?
00:05:33.836 - 00:06:57.254, Speaker C: Yeah, we're incredibly bullish on both optimistic and ZK and software roll up design, as well as even base roll up design. And across the board, I think the ability to have more and more block space that inherits security from a canonical bridging layer just creates an incredibly powerful paradigm to allow developers to have more flexibility in the application that they build. And so what I honestly believe, and this is maybe a controversial statement, is I don't think ZK roll ups are going anywhere, and I don't think optimistic roll ups are going anywhere, at least for the foreseeable future. Both of them do have very specific advantages that allow them to be used for different types of applications that have different requirements. And at scale, an optimistic rollup can process many more transactions, nearly unbounded amounts in theory, with a significantly lower overhead on the proving of the correctness of a state transition. Because in essence you require an actor to challenge the validity of a proposed state transition, rather than requiring every transition to be proved. So at scale, there's things like micro payments, UGC applications, games that I believe would more inherently lend themselves to an optimistic rollup, as well as maybe more financialized applications, things like order books, dexes and derivatives protocols that might lend themselves more to a ZK rollup.
00:06:57.254 - 00:07:05.310, Speaker C: But at the end of the day, we think both those paradigms stay, and both require robust tooling to be built to allow them to have a parity in features.
00:07:05.390 - 00:07:25.942, Speaker B: Very clear, thanks. And within this vision of 1000 rollups for the sham ecosystem, do you think it makes sense for every decentralized application to have its own blockchain, meaning its own block space behind? What do you think are the advantage of that versus the opposite version that would be on your layer one for all these applications?
00:07:26.086 - 00:08:08.490, Speaker C: Yeah, that's a tremendous question. To start with. I think not every application needs its own blockchain. I think this is what we've seen in the cosmos, where you do see a gravitation of a lot of developers to build on the smart contract blockchain of their like the Juno or the Evmos, et cetera. But there are applications that are really on the forefront that are pushing the boundaries of what can be done in execution spaces. These are the things that might need custom lanes for transactions. These are the things that might need a higher TPS to be able to sustain spikes in activity that could otherwise clog a general purpose execution space.
00:08:08.490 - 00:08:59.494, Speaker C: And this is where the application specific roll ups or application specific chains really take over. What it allows is for a developer to have agency to customize their application and the block space that they use for what they require for what they build. And this is something that you don't get on a general purpose chain. If the chain spikes in activity at a period of time, it's possible that your users will have to pay substantially higher gas fees, even if that is something that's intrinsic to your protocol. And on that specific chain, you don't have that issue, right? If your order book can have a much more predictable fee structure and pricing structure for trades, because it's only based on the volume on that given roll up and not based on the volume on the overall execution space. So that type of customization is really good for applications that have very specific requirements and want to be able to meet those requirements for their users.
00:08:59.622 - 00:09:25.050, Speaker B: And so if you have a lot of roll ups with a lot of protocols, don't you think that the liquidity will be kind of fragmented in each blockchain? How do you think we can still make the whole system efficient? Maybe by communicating between these roll ups. What do you think? Are the changes there to improve the liquidity and not fragment it on 1000 roll up?
00:09:25.140 - 00:10:45.334, Speaker C: Yeah, so I think interoperability is a very personal question. The question of what is the interoperability protocol that you want to use? How much security versus how much cost versus how much latency are you willing to take? These are all very personal questions to application developers. And specifically, with the current state of crosschain interoperability, there really isn't a single winner or single answer to all of this. There's a plurality of mechanisms that developers can choose between that are once again similar to the customization of execution spaces, give developers the ability to customize their cross chain position and their application's cross chain state access and asset transferability. And this is really why at Lagrange, we've focused on what we have, which is not a cross chain protocol, it's not a mess chain protocol, it's not a bridging protocol. It's a mechanism to assert security over an execution space, like client trial jurisdict roll ups. Because what this allows is for a developer to say, this is a secure representation of my state that I want protocols to use, at which point the protocols who can accept that, give you a plethora of transport layer features that you can then use downstream teams like Layer zero, that were a default distributed value network for folks like polymer, who we work with, Axler, et cetera.
00:10:45.334 - 00:10:53.130, Speaker C: So a developer can say, this is my state, and then everything downstream of that can inherit security regardless of what you want to use for your cross chain activities.
00:10:54.990 - 00:11:06.480, Speaker A: Nice. Okay, I think this is a great segue into our next session. Which is what is brockly like Lagrange and what does it do with.
00:11:07.830 - 00:12:17.586, Speaker C: Yeah, that's a great, you know, as I mentioned a little bit, Lagrange state committees are a light client for optimistic roll ups. So what does that mean? Well, an optimistic roll up does not have a representation of state that can be interpreted by anyone besides a watcher who executes those transactions and finds the resulting state from the execution. At which point you can think of the optimistic mechanism as a way for Ethereum to interpret the finality of that roll up or the state of that roll up based on a period of time that passes from when the first state is submitted and giving users a period of time of challenge that in game theoretic manner secures the state that's represented on the L1. But this is not very efficient of a paradigm for crosschain. So if you are sitting on, let's say arbitrum and you want to receive a message from optimism, you don't really want to wait two weeks for ethereum to interpret your finality. Well then what's the other end of the spectrum? Well, you can trust a network with nine validators to say, okay, sure, here's the state our nine people told us this is the state which is not very secure, right. It's a very easy to compromise and hack mechanism.
00:12:17.586 - 00:12:53.186, Speaker C: And so what you want is a middle ground often where you can say okay, this is the representation of state of my roll up with some amount of safety that asserts that this is the block header at this point in time. And so what Lagrange state committees are on. I knew layer is a mechanism to do that. That says on block height X, the block header is Y and there is 40 million 1 billion of restaked Ethereum that in a very similar model to the Ethereum sync committee has attested to and asserted this block header is correct, that is slashable and attributable in the event that it's not interesting.
00:12:53.288 - 00:13:05.880, Speaker B: And why did you kind of keep the design that ESRM has on the consensus of the sync committees? What are the advantages of.
00:13:07.130 - 00:14:01.346, Speaker C: Yeah, yeah. So if you think of the sync committee and you were thinking of proving the sync committee, it's really an inductive proof. There's a start point where the initial sync where you have in essence you have a point of trust, either Genesis or the instantiation of your contract. We say I'm going to trust that this block header or this beacon route is correct. And then there's a committee in that route that signs in essence the next beacon route of a fixed size. And in order for that next beacon route to be correct with respect to like client protocol, it needs to be signed by two thirds of the correct committee, and that committee contains, or that beacon route contains what the next committee would be. So in essence, there's a recursive step of each committee signing off a next committee all the way to a current slice of that, right? So let's say block B is defined insofar as B minus one has, the committee in B minus one has signed the committee for B, and B minus one has been proved valid.
00:14:01.346 - 00:15:00.486, Speaker C: And how does B minus one prove valid? Well, based on B minus two, all the way back to whatever your genesis point is. And so what you can construct is with that recursive step all the way back to your base case in inductive proof. And so you can define a very similar mechanism to that with restaking for alphabetic roll up, something that inherently defines their canonical bridging. With respect to Ethereum validators, anyway, we take some subset of the Ethereum validators and you sample them and you require them to now attest to the state of an alphabetic rollup at a point in time in a very similar structure of current committee, next committee than blockheader that you would have with the sync committee. And on top of those attestations, you can take an existing bridge design that uses, let's say Ethereum like client based ZK proofs, and you can apply that to this new type of lite client design that's extensible to off pistol roll ups or really any execution space that defines itself by Ethereum.
00:15:00.598 - 00:15:23.746, Speaker B: Okay, basically, so the whole library system produces proofs of eviction of states. And how do you see this proof used inside the rollups? Do you expect, for example, dexys to use this proof to see the liquidity on the chains? Or do you expect the integration of this proof to be more at the protocol level?
00:15:23.848 - 00:16:28.930, Speaker C: So, Lagrange is not in the business of transporting proofs or doing cross chain messaging or cross chain bridging. This is a really good question. This is a really good point that we always try to make sure we make clear that we think of crosschain as something that's also modular. And this is the way that crosschain has been shifting in the industry. Look at layer zero's work, hyperlanes work, Axler's work, and kind of creating more prolific ways to define state in a larger number of ways to define state where you, in essence, in cross chain have three components. You have an assertion of state, which is what is the state of chain a? At some point in time you have a transport estate, which is who is going to take that assertion of chain A and move that to chain B. Then you have computation on that assertion, which is once we're on chain B, what are we going to do? Are we going to check for an event? Are we going to check for a transaction? Are we going to check for a storage slot? And how is this going to integrate with the end user application? It in reality, all we do is the first part assertion and we work with major crosschain protocols to have them integrate this type of safety and this type of crosschain security into their existing designs.
00:16:28.930 - 00:16:56.500, Speaker C: So you can use a layer zero or a polymer or an axler or any of these crosschain protocols that you've grown to love. And you can just base your security now on what is probably in our view the most powerful and the most representative mechanism of that state that exists prior to the front of window. So in short, you don't have to change anything. You can use the protocols you love and you can use them the way you like, just with a little bit more security behind them.
00:16:58.630 - 00:17:12.040, Speaker A: Perfect. I do have one question. You've made it clear that what's your exact state within everything, but who do you think you compete with today?
00:17:14.330 - 00:18:09.938, Speaker C: We compete with monolithic cross chain protocols. Monolithic cross chain protocols compete with every part of the stack. A monolithic cross chain protocol is one that has the assertion of state, the transport of state, and then the computational state just bundled together into one application. And you see these, I'm not going to list them off, but there's a lot of protocols that we all know that are very monolithic, right where there's a specific set of K of M of us say this, and then we're going to tell Ching B that K of n of us said this and then you get your message. But a lot of these protocols have kind of started to see the light and are becoming modular. This is why I don't really want to mention them because a lot of them will likely in three months, six months, start looking to adopt mechanisms like this because it's much more secure. Because right now the thing that a lot of people who don't really necessarily build a roll up still kind of realize until they build it is that it's very, very hard to get your roll up supported by all these cross chain protocols.
00:18:09.938 - 00:18:44.210, Speaker C: You have to lobby them, you have to call the founders, you have to help your investors, call the founders and you have to get enough volume to make it worth their time to run your nodes and to attest to your state. A state committee functionally shift the imperative away from them to run your improve your state and onto you to build security around your state. So once you build that security around your state and around your state committee, it's very very easy for an existing protocol that can support these types of proofs. Just plug into the proof doesn't require that now it's operational list of having to run 400 of your validators or watchers.
00:18:45.430 - 00:19:13.840, Speaker A: Super Jr. Just to give you also context, this podcast is mainly tailored towards a risk taker audience and an operator. So we're always very curious on our side, know what would mean like to be a good operator for launch, like what type of involvement you're looking for on the operator side. And we can talk about the restakers, right?
00:19:14.290 - 00:20:15.594, Speaker C: Yeah. So from an operator standpoint, both restakers and operators are the foundation of the state committees. As kind of I mentioned a little bit before, the state committees are entirely based on restaked operators, restaked nodes on Ethereum that attest to the execution of these optimistic roll up blocks. So in order to be a gold tier operator, you need to be able to have the Lagrange node, that's a very, very light piece of infrastructure, connected to an optimistic roll up watcher and then connected to Ethereum state. And if you do that and you correctly sign the state of the optimistic roll up, you in essence can help secure the cross chain messaging and cross chain bridging of whichever roll up that you want to work with, want to support. And so you really don't have to do very much computation, you just have to be honest. And if you're honest with your attestations and run the software properly, you'll receive rewards.
00:20:15.594 - 00:20:53.930, Speaker C: And this is something that we've kind of called in a few of our presentations, operator minimalism. So what does that mean? It means that there is a very, very simple and transparent set of slashing conditions. In this case, don't sign the wrong state, that are nearly impossible to fall foul of. If you're an honest actor, there's no complicated liveness guarantees, there's no extrinsic risks where your slashing condition is predicated on the price of ETH in some way. All you have to do is just sign the correct thing and you'll receive a rather steady and a rather material payment from the downstream protocols that pay you for these attestations.
00:20:54.090 - 00:21:09.710, Speaker B: Yeah, no, just a question on the operator setup, you mentioned that there is basically this sync community design. Is it therefore like one node per operator, or can an operator run multiple nodes? Do you have any policy regarding that? How do you view this setup?
00:21:09.870 - 00:22:15.830, Speaker C: Yeah, that's a fantastic question. And so the feeling that we have is that there's no need to have only one node per operator, because functionally this mechanism is designed to really guarantee high safety behind state. And the liveness of these committees is really a product of the independent parties that are running these nodes, and not really a product of the number of nodes outright, where if one of an operator's nodes goes down, it's likely that the older nodes will go down because there's an issue with their setup across the board. And so we believe that operators have right now the capacity internally to be able to manage their own safety and their own correctness of the execution of software, as well as guaranteeing their own lightness. And we think that there's not really a need to tell an operator you have to run 5100, 200 of the same node, when in reality they can get the same result by just delegating to their one node. And so that's why we've designed it to really not really require an operator to lose the opportunity to run only one node. They can really run however many they want and decides themselves the number that's best for their own replica requirements.
00:22:17.630 - 00:22:45.440, Speaker A: Great. And talking a bit about our risk taker friends, there's one thing they're always very interested about is revenue. So what can risk takers expect to get from Lagrange? In what form will you guys be paying in your token? Will roll ups paying their own token? How will all of that work?
00:22:45.910 - 00:23:39.890, Speaker C: Yeah, that's a fantastic question. So the fees will be paid by cross chain protocols that are downstream and they're consuming use proofs, and that includes most of the major ones that we can talk about, like layer zero and polymer and some of the best teams in the space. And the types of yield that these operators will receive is really just directly in, I would say a low volatility asset like Ethereum or USDC or whatever we decide to remit the payment in. But this is not going to be an inflationary yield. It's not going to be a yield where operators are getting some highly volatile speculative coin at a steep inflation rate that could be worth nothing in three weeks. This is really designed to be a mechanism that pays a material yet steady and predictable yield.
00:23:41.990 - 00:24:00.390, Speaker A: Great. I think our risk takers will definitely be very happy about this. It might be ETH, it might be something else. Would there be basically like a governance committee to decide on which token is allowed to go in this pool?
00:24:01.130 - 00:24:19.760, Speaker C: Yeah, it would likely either be ETH or we'd swap ETH into USDC to revet the payment. It just depends on what we think makes the most sense for the operators we work with. But I would consider probably an ETH payment would be clearer since it's basically just Ethan ethnomination, right, where you restake ETH and then you're nominated payments ETH as well.
00:24:20.530 - 00:24:45.880, Speaker A: Okay, talking a bit about now the timeline for launch, if you have the information. Of course we know that Avs Mainet is expected about around April. Maybe it will be later. Do you feel like you'll be able to launch in conjunction with IGDa and the other first ABs?
00:24:46.810 - 00:25:36.210, Speaker C: Lagrange will without question be in the first tranche of both Testnet and Mainnet. ABS is launching. Our infrastructure right now is at a point that we're ready to launch. We have been building this thanks to a lot of the collaboration with the Eigen layer team for the better part of the last year. And right now our infrastructure is in a place where I would consider it Mainnet Ray. And so obviously we're working closely with the Eigen layer team continually to make sure that our timelines are as closely aligned with their timelines as possible. We recently announced last week that one of our optimistic rollup partners, Mantle Network, who's been on the forefront of working with Eigen Layer and working with very emergent primitives and roll up design, has decided for Lagrange to be their light client, then the Lagrange state committee to be their light client.
00:25:36.210 - 00:25:51.770, Speaker C: And they'll be seeding that with 10 million of capital from the treasury. And so that gives us a very strong early integration that really in our view legitimizes this design as a core primitive in roll up more and roll up architecture.
00:25:52.110 - 00:26:18.660, Speaker A: Great and perfect segue into my next question, which is you've mentioned at least one wall up that will launch with Lagrange when the AVs goes live. And will there be other, and so ultimately, how many roll ups can we expect Lagrange to be supporting? Let's say in six to eight months.
00:26:19.110 - 00:26:37.260, Speaker C: Six to eight months. I hope it's a few thousand. But we have to get there first. On people launching those roll ups at launch will support most of the major ones. Optimism, arbitrum, base, mantle and any other ones that we work with and feel like we're in a good position to launch concurrently with.
00:26:40.240 - 00:26:41.630, Speaker A: Like you had a question?
00:26:43.860 - 00:27:12.760, Speaker B: Yeah. So in terms of operator, then when Slosh, will it be kind of open to any operator or do you plan to have kind of a first set of operators like we know, for example, again, DA had like 60 operators on testnet. Do you expect to have this kind of cap at the beginning or would it be open to anyone to propose growth, to risk takers?
00:27:13.180 - 00:27:45.920, Speaker C: Yeah. So we intend to have it be for the first version, a set of operators that we have a good rapport with. There's a few that we're working with now. We obviously would love to have you guys on there as well, kiln being I think one of the premier operators in the space. And we intend to really begin to open this up to just a very permissionless set of operators over time, as we think the safety and the maturity of all of this restaking architecture continues to iterate.
00:27:49.220 - 00:28:08.010, Speaker B: Nice. What's next for launch? After the launch of the. Yeah, you mentioned more world up support. Are there any features, any other development paths you're taking?
00:28:08.460 - 00:28:58.760, Speaker C: Yeah, so we didn't necessarily touch on this earlier, but a large part of what Lagrange focuses on is zk coprocessing. That's what our business foundationally does. And so the state committees is an application level or application layer activity of our ZK coprocessor. And we target specifically very large mapreduce style computation that runs over on chain data in a way that is data parallel. So we can target things like SQL, Mapreduce, Spark RdD that we can compute over large subsets of historical and present on chain state. And so we have a lot of things coming out this year that are in line with that, that take some of the primitives that we're able to do and able to leverage with our state committees and really allow that to be used for a broader set of use cases not built by us, but built by other of our partners. This will eventually be something that we integrate as an ABs on top of Eigen layer as well.
00:28:58.760 - 00:29:02.910, Speaker C: And it's something that we're very excited about continuing to iterate on this year.
00:29:03.600 - 00:29:29.350, Speaker A: Okay, so that means that AVs will be the state committee. Do you know when you'll have the ZK AVs launch? Will it be like a different AVs or maybe will it be added to the original range Abs? Or maybe this would not really match with your AVs minimalism view.
00:29:29.720 - 00:30:05.200, Speaker C: Yeah, so I think we would like it to be separate, likely as a deployment, because I think that would give operators the ability to specialize into one or both how they see fit. And we think that gives us more flexibility across the board. And then yields will obviously stack based and opt in. But we haven't really contemplated fully whether or not, and how we're going to design that. And it's going to just be an iterative conversation on our team and then with the ibill and our team as well. But we're very committed to continuing to leverage the technology that we build within the AVs ecosystem and the modular ecosystem.
00:30:07.860 - 00:30:38.730, Speaker A: So, talking a bit about this avs minimalism vision that you had to very clearly explain when we saw your pitch in, and do you think you're paving the way for other aviases to build a simpler version of themselves? Basically, how come do you have this empathy towards operators to make your abs simple?
00:30:39.820 - 00:32:00.992, Speaker C: I think that there will always be a need for very complicated mechanisms or very simple mechanisms in the designing of an AbS. And I think that it's very important to, as an operator or as a restaker, to be, to understand the dynamics and the mechanisms of the ABs that you support or that you delegate into, so that you can make sure that the yields you get are commensurate with the risks that you face. At the end of the day, there's no free lunch. So if you are using an ABs that is high risk and is not minimalistic, then there's likely going to be a commensurate yield with that, and it's going to be a higher rate of return on capital. But the flip side is you're much more likely to be slashed and something like what we build, which is trying to really champion kind of this concept of ABs minimalism is something that we think is really capable of not being a large lift for operators to support and being very easy to kind of be a first step into working with an ABS where it's a light infrastructure, the operational overhead is very low, you can run nodes for very little cost. The only cost that you're functionally offsetting with fees is the cost of capital, not the cost of operation. And that's something that we think really makes compelling early on.
00:32:00.992 - 00:32:17.450, Speaker C: And I think there's going to be operators who want to go higher ladder of risk, and there's some who are going to want to go lower. It's going to depend on the sources of capital and a lot of dynamics. So we hope other operators, we hope other Avs kind of take this principle, apply it when it's relevant to their application needs.
00:32:20.570 - 00:32:40.540, Speaker A: And do you think this will maybe trigger a segregation of AVs. So you could be like one team wanting to build one AVs on eigen layer, but just to make things simpler, like, you end up building five Avs, different abs.
00:32:43.150 - 00:33:27.930, Speaker C: Yeah, I think it's very possible that someone might fragment out abs into specific feature sets. And then I think the question will be whether or not the market prices the overall security differently across it. I imagine if there was 510 slashing conditions on an ABs, it would be very difficult to price an aggregate where you effectively would have to pay returns that are the sum of the risk, or that offset the sum of the risk across all of these, as opposed to if you're able to fragment it out, you'd be able to have operators who had different risk profiles be able to delegate partial amounts into different mechanisms without requiring the overall mechanism holistically to be supported by an operator. Would it likely be a premium on the overall risk versus just a sum of the individual risk?
00:33:31.020 - 00:33:32.570, Speaker A: Luke, do you have a question?
00:33:36.940 - 00:34:23.400, Speaker B: No, I think it's pretty clear. It's something we kind of excited to see as well, is how these AVs designs evolve with. So again, layer is still in this kind of testnet phase, AVs, which is kind of the main feature of the platform. What do you see? Let's say if we move same to six months, even two years around the Egonia evolution and avs evolution there as well. And you already mentioned you plan for lab launch to add more AVs, but how do you see maybe more competition, maybe towards getting the rest of. How do you see this evolve?
00:34:23.900 - 00:35:27.020, Speaker C: Yeah, I mean, there's always a concern that competition is going to push up the pricing of restaked ETH. But at the end of the day, I think we don't find that a concerning dynamic, because whatever the price is for restaked ETH is going to be set by the market, the demand for restaked ETH versus the value that's generated from that. So I imagine early on the excitement is going to push up the cost of capital, but eventually that's going to converge to whatever the equilibrium dynamic is for the market, or however much safety of restaked ETH costs is, however much we're going to have to pay. And that's something that we're very comfortable with. Because the end of the day, if you build a mechanism like this, you have to be confident that you can be able to support both the operational cost and then the cost of capital of your partners. And if you can't do that, then the thing you're designing doesn't really have longevity. We've designed the state committees to be something that we're confident can derive sufficient yield to offset both those costs, not just in the short term with inflationary mechanism, but long term through real substantive yield.
00:35:28.560 - 00:35:59.930, Speaker A: Perfect. Just being conscious of time, we're a little bit over. So I'm going to ask my last question, and I think this is a question that actually I almost feel bad for not asking. The other alias that we already got on is, do you think there is a risk for AES in general, that if they become too big, they might want to get independent from Agilea and start building their sovereign chains, for example?
00:36:01.980 - 00:37:07.340, Speaker C: We would have no interest in doing that. I think what we believe, and this is why we've targeted the design that we've designed, is that there's going to be no cheaper cost of capital than restake ETH. That if we look at how much is required to incentivize an operator on a cosmos chain versus what we expect to be required to incentivize a restake operator, it's going to be substantially higher. The cosmos, because there's no principal validation task like Ethereum validation is offsetting the underlying cost of that instrument. And so we think long term that it doesn't necessarily make sense for anyone really to take the integration they have with Eigen layer and try to pull that out and move their capital elsewhere. We really think that Eigen layer is the perfect platform to be experimental, to build great things and to scale those things to really be in impacts on the space. And I tend not to think that moving off of Eigen layer is going to have any positive benefit for an ecosystem, for the company itself, or for the broader assistant landscape.
00:37:08.720 - 00:37:18.716, Speaker A: That's clear. Thank you so much. Isbell. Where can we send our audience to learn more about Lagrange and maybe follow you on Twitter?
00:37:18.908 - 00:37:36.810, Speaker C: Yeah, so if you want to learn more about Lagrange state committees or Mapreduce co processor, we'd love for you to follow us on Twitter at lagrangedev or to go to our website at LeBron's dev.
00:37:38.460 - 00:37:44.520, Speaker A: Perfect. Well, thank you so much, Ismail, and to the audience. See you very soon for next episode.
00:37:44.940 - 00:37:46.870, Speaker C: Thanks so much. I appreciate you guys having me.
