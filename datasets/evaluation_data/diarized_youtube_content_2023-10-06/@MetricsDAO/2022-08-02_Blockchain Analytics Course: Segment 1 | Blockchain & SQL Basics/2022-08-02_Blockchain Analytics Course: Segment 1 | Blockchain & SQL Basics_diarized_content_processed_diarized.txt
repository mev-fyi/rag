00:00:07.800 - 00:00:49.190, Speaker A: All right, welcome, everybody to blockchain data 101. The first session, we're very excited to be putting this on. There's an idea that kind of came about, you know, early mid summer that what should we do with these workshops that we've been running so far? We wanted to put together kind of more of a long form course for helping people get from kind of zero to one. So I guess kind of first and foremost, quick note, this is a live session, and while we'd love for everything to go off without a hitch, reality does often have other plans. So if there are any technical difficulties, please just have some patience with us as we work our way through them. But hopefully that will not happen. Throughout the course.
00:00:49.190 - 00:01:54.760, Speaker A: We will be monitoring the progress of the course as it unfolds, making the adjustments as deemed necessary. If we need to speed up, slow down, add more opportunity for engagement, then we will. Is anyone else hearing a big. Okay, sorry about that. Right on cue. As I talk about any potential technical difficulties, we have a small one. Hopefully now things will go off without a hitch.
00:01:54.760 - 00:02:22.730, Speaker A: So blockchain data 101. This is a series of workshops that focuses on exactly those two things, blockchains and data. Our overall goal here is to teach students the requisite foundation to be an analyst in web3. This is really intended to be your first step. So it is structured as such. Today is going to be very foundational with the content we cover and will build up each week. This is truly a 101.
00:02:22.730 - 00:02:55.592, Speaker A: We're going to start from step zero, but a slight assumption is going to be made. Everyone here in this live stream found metrics dow through some channel and is interested in crypto. Data analysis is a very large industry, but you're here now to learn about crypto domain specifically. So even if you've not yet interacted with the blockchain or with web3, you've heard of it enough to be here today. What this course is not. We're not going to dive into how Ethereum works on a deeply technical level. We won't be setting up a node, we won't be learning how to deploy a smart contract.
00:02:55.592 - 00:03:38.812, Speaker A: But we do need to understand how these things interact and what they are from a high level to understand and analyze what's happening on chain. So the targeted outcome here is that you walk away from these sessions able to build out analytics. You're able to set up and continue to follow your own curiosities to the next step in your own development. While understanding that web3 is a huge industry, that there will be plenty to learn after these workshops, ongoing, frankly, forever. But our goal here is to help you really crush those first steps. So if you've not yet had a chance to take a look at the git book and some information that we had up there, that's totally fine. The format of this is going to be live.
00:03:38.812 - 00:04:13.796, Speaker A: Sessions are going to be streamed to YouTube every Monday. Please feel free to ask questions in the chat. We have a couple moderators monitoring that the description of the stream for any information that you need there. So like I said, weekly on Mondays. The plan is for this to be a four week program. There is a fifth Monday in August that we can use if needed. But for all intents and purposes, this is going to be a four week program starting with these workshops, starting with this one here and now after each one, I will drop course notes following the lab session within 24 hours or so.
00:04:13.796 - 00:05:08.438, Speaker A: That will include any code, examples that we went through, simple queries, notes about each functions that we discuss, and links to further readings for those that want to dive deeper on a specific topic. And then following the live session on Wednesdays, we're going to be holding office hours weekly in the discord. So kind of important note there live sessions on YouTube, office hours and discord, which will be much more open forum for question and answering. And with each session at the end of it, we're also going to have an assessment for that week that will bring in concepts discussed in the live session sessions. Important note here is a passing score does matter. Passing score is 70% and why you want to get a passing score is because for those that do, we'll be collecting a wallet address at the end of each one. So use a public address that you are okay giving out to people and people knowing and we are going to issue a POAP.
00:05:08.438 - 00:05:52.826, Speaker A: If you don't know what a POAP is, it stands for proof of attendance protocol. And it's becoming an interesting way to experiment with credentialing and recognizing achievements in an on chain way. So let me actually take a quick detour and switch over to my live stream. Thank you. So coops, I call them the bookmarks of your life. If you were curious about what those are, they're a special type of NFT that are issued not on Ethereum but on gnosis, which is an EVM compatible chain. So just as an example, here are a lot of the PO apps that I've collected.
00:05:52.826 - 00:06:41.010, Speaker A: You can see that they are all from metric style, and you may have some yourself from community calls if you've joined those. We were giving co ops out for attendance at some of those within curation. We were experimenting with poaps to recognize contributions to the repository there. And then there's actually a very interesting protocol that's coming about called GitPo app that connects in with web3 development that hosts their code on GitHub. So let's take a look at like Ethereum, they're issuing po apps for. If you've had a pr or commit or something like that in the solidity repository, then you have this very cool git poap that directly ties to the work that you're doing. So what we're doing here is we're just trying to experiment with that.
00:06:41.010 - 00:07:11.328, Speaker A: Can you flip me back to the slides, please? Thank you. So that's what a pull up is. We are going to recognize work that you are doing in the form of correctly passing the assessment. It would be on type form. If you don't get it a seven out of ten, you will be able to answer it again and go look, figure out where you fell short. And then finally, we do have channels set up in the discord. Include a screenshot here under the education section.
00:07:11.328 - 00:07:47.860, Speaker A: Please use these liberally. We want, we'd love to see a very engaged community of you all. And that includes the voice channel. If you want to hop in and just talk with another student for a couple of minutes about a question that you have outside of the scheduled office hours, we'd love to see that definitely interact with each other as much as possible there. So any general questions about what this is going to look like? And here's a link to our discord. If you are not yet in it and need to find it, I believe it's also down in the description below. Discord gg metrics.
00:07:47.860 - 00:08:56.000, Speaker A: All right, so today and the agenda of what we're going to be going through within the next about 50 minutes, we are going to target an hour for each of these sessions walking through the blockchain basics. What is Ethereum? What is adapt some of the leading dapps on Ethereum and then if this is something that is very new to you, that's totally fine. We are going to do a quick live demo of setting up a wallet using metamask and then jumping into data analysis. Why SQL, why we're using the tooling that we are going to be utilizing throughout this. And then we're going to jump right in with learning SQL with live examples. So with that, let's jump on in to blockchain basics. So web3, what and why it's a term that I'm sure everyone has heard thrown around in some capacity on Twitter, in articles.
00:08:56.000 - 00:09:37.912, Speaker A: Why are we constantly hearing about it? Ashida writes here in Twitter, very succinctly, that web one read, web two read write. Web three read write own. So I will link to a longer forum writing of hers. But kind of important takeaways of that is that in web one, majority of users on the Internet in the nineties were consumers on static web pages and seldom produced. Content creation was dominated by journalists and professional writers, and people entered the Internet to consume. Enter web two. Evolving in the early two thousands to a new model where read write came about, web two made space for anyone to become a content creator and consumer.
00:09:37.912 - 00:10:17.308, Speaker A: Personal blogs flourished. Social media platforms capitalized on this creation aspect and cannibalized the space. The current web two, as we know it, is incredibly platform developed, dependent, excuse me, and those platforms rake in ad revenue on the hard work of creators. So the goal of web3 here is read write own, where ownership is one of the biggest features. In web3, participants have full ownership of their content, their data, their assets. But it's important to note here that today's Internet, as we use it, has not reached what we consider to be web3. But there are products and services being built that are considered to be web3 that underpin important tenets.
00:10:17.308 - 00:10:47.502, Speaker A: So they adhere to the following principles. Openness. They're decentralized, censorship resistant. They're immutable, trustless and permissionless. So how do blockchains play a role in that lofty web3 goal? Well, a common definition we may have heard of is that blockchain is a decentralized ledger. It is an interconnected set of transactions stored on a network of computers all around the world. It is as core decentralized cloud computing that can do quite a bit.
00:10:47.502 - 00:11:29.180, Speaker A: So three most important tenants of blockchains are that they are, as I mentioned, decentralized transactions on a network of computers, as opposed to a single server farm. They are immutable. They cannot be changed by anyone. Once committed and they're open, they can be viewed by anyone. And that's where the work that we're looking to do is enabled, in that we can take that open data and analyze it, and we can look at it, and we can parse it and do all sorts of fun stuff with it. Decentralized networks have no core authority, really, to dictate what a transaction contains, what has happened that simply reflects what users and individuals are doing on the chain. Each block of information is stored across the network.
00:11:29.180 - 00:12:20.750, Speaker A: Ethereum is the largest ecosystem and enables rapid app development through a number of different token standards, which we'll touch on briefly. Conceptually transacting on the network. What does that mean? So someone requests a transit, someone interacts with the chain, and they request a transaction, which we are going to see a little bit more closely later. Their request is broadcast out to computers, aka nodes, that are supporting the network. These nodes verify the transaction and come to consensus among each other on the block to be formed with the tranche of verified transactions. This is then written to the head of the chain, which is the current state in the chain, and then the nodes move on to processing the next set of transaction requests. It's a very distilled simple version of what is happening there, kind of zooming in on blocks there.
00:12:20.750 - 00:13:02.920, Speaker A: Blocks are written in the order they occur. It is chronological, and the nodes securing the network agree on this order. Each block refers to the prior with a hash of the data secured in that preceding block. Any node that incorrectly or maliciously tries to write a separate set of transactions and blocks is deemed invalid and the chain they are writing is proved. So the chain that moves forward and the chain that we use is the set of blocks that the network agrees upon. No one node can alter that transaction data and it will get overruled by network consensus. So these blocks, the data that they contain, are transactions, which are a list of instructions and events that have happened.
00:13:02.920 - 00:13:40.298, Speaker A: At a most basic level, this can be something like Alice sends $50 to Bob and that flow of $50 is recorded. But networks have evolved to be more complex than that. Hence the ability to run applications on blockchain layers. They use smart contracts and dapps, and are able to interoperate because of set of standards that developers use. So we'll take a look at what some of those are. At this point, we don't need to fully understand what an ERC 20 is or an ERC 721 is, but we need to be familiar with them as well. If you've sent or received a token like uni, you've interacted with an ERC 20.
00:13:40.298 - 00:14:29.430, Speaker A: If you've hopped onto Opensea and bought an NFT, you've used an ERC 721. And these are going to be terms that we're going to start to see all over the place and that we're going to need to know as we move forward. But we don't need to go in and actually read, okay, what does the ERC 20 say? What are those standards that make up a token so for now, that is enough slides and that is kind of the bare bones introduction to blockchain that we're going to go through. But we are going to pop over to the browser and take a look at Metamask. Thank you. So let's start by creating a wallet. For those that have not done so before, there are number of wallet providers.
00:14:29.430 - 00:14:57.200, Speaker A: Metamask is definitely not the only one that is out there. It is the one that I prefer, and it is a very popular one. So it's what we're going to go with. Now, there's a mobile app for it and there's also a browser extension. So I'm going to go with the browser extension today as I'm sharing a computer. So if you need to Metamask, IO is their website and you can follow the link there to the chrome web store. Hopefully this will not take too long.
00:14:57.200 - 00:15:32.090, Speaker A: When you install it, I'm going to pin it up here so I can see it. The browser will prompt you to start setting up your wallet. Now, if you have one already, you could import it into metamask. You could take the secret phrase that some other wallet provider has created and bring it in and start interacting with that wallet and managing that wallet from here. And that's going to be important to remember in a second. We, for all intents and purposes, do not have one. So we're going to create a wallet.
00:15:32.090 - 00:16:15.518, Speaker A: Sure. And give it a password. Now, I'm not going to play this video, but it is something that you should definitely pay attention to, and that is going to be a very important theme throughout interacting with crypto in any regard. There is no customer service, there is no one to help you recover your funds if you lose your wallet. And most importantly, there's no one that's going to help you get anything back. If someone accesses your secret recovery phrase, it is very important that you keep this safe. Do not store it in Google Drive.
00:16:15.518 - 00:16:51.616, Speaker A: Do not tell anyone this. There is all sorts of so you can read about how to keep yourself as safe as possible. So what we are doing here with metamask is installing a browser extension. These are commonly referred to as hot wallets because they live in the cloud in your browser here. The private keys are not stored on hardware anywhere. If effectively someone could, if they picked up your computer, start interacting as you. These are the on the less secure way to interact with crypto, but it is on the more convenient side.
00:16:51.616 - 00:17:45.370, Speaker A: So that is some of the trade off there. So I never recommend keeping a lot of funds in a hot wallet and absolutely read up on how to properly secure your funds if you are going to be doing a lot of transacting in crypto. So now I'm going to commit a cardinal sin and reveal my secret phrase, because I'm not going to use this wallet and will probably delete it immediately after. So this is what it looks like. When you create a wallet, you should write this down, presumably, and ideally using pen and paper, as opposed to putting it somewhere that is online. When we'll go through, it's going to ask you to confirm so that basically they know or have at least provided a little bit of due diligence that you went through. Sorry, I'm multitasking here and at least wrote it down or something to that extent.
00:17:45.370 - 00:18:15.640, Speaker A: And with that, hopefully I remember my password. And with that, we are online. This is that metamask wallet that I just set up. The address is stored up here. If I were to go to either scan and take a look at this, there's nothing in here because I've not transacted yet. There's no wallet initialization transaction. When you create metamask, it's live.
00:18:15.640 - 00:18:58.440, Speaker A: If I were to send funds to this wallet from an exchange, for example, then I would see that show up there and I could start interacting. But for all intents and purposes, I can go to uniswap and connect my wallet using metamask. Authorize that. You can't see the pop up extension because I'm only showing one browser screen right now and showing this here. So now if I had Ethan here, I could swap between ETH and die and do a bunch of stuff on there. So that's setting it up. If you had not done that before, congratulations, you are now set up to operate in the web3 ecosystem with a metamask wallet.
00:18:58.440 - 00:19:41.176, Speaker A: It by no means has to be your only one people use, okay? That is showing up. People use wallets for a bunch of different purposes. You can have one that is public, that maybe you collect PO apps in, that you submit to metricstyle for some PO apps as you complete a course. That's one idea. And then you could create a second wallet that's a little bit more private that you don't want people to use or people to know about, rather that you do a bunch of private transactions on. Because recall that a tenant of blockchains and ethereum is its openness. If someone has this address here, they can go in and see any transaction this wallet is making.
00:19:41.176 - 00:20:27.842, Speaker A: So you presumably want to pick a subset of wallets that you know are going to be public and that you want to show off what it has. So that's poap. Libraries are becoming a thing. It's showing that you've gone to conferences or you've gone through different courses or you've contributed to repositories and picked up po apps along the way as an on chain resume of sorts, almost. So that's the abridged super high level introduction to web3 interactive method, or at least setting up a wallet on it. We will interact with it later, but now you've got a wallet set up. If you want to take a step further and fund it and start exploring it, feel free to go ahead and do so.
00:20:27.842 - 00:20:52.740, Speaker A: But we are going to take a step over to this data analysis. So if you give me 1 second to get my next screen set up. Great. Thank you. So data analysis is an industry. It's a skill set. And crypto will be our domain of knowledge.
00:20:52.740 - 00:21:22.830, Speaker A: What we're performing the analysis on, it's the box and the transactions or the data that we look at. But what tools do we use? We have lots of options. The crypto data industry has been growing. One in front of you is flip side. We have Dune. The graph is another one of the other primary data providers for crypto data. But what we're going to be focusing on is more these first two.
00:21:22.830 - 00:21:59.684, Speaker A: Why? Because they use SQL based data sets. SQL, if you don't know what it is, is structured query language. It's a programming language used to interact with relational databases. And databases are a way to store and organize data, which sounds familiar. Aren't blockchains doing very much the same thing? And why wouldn't we just want to go in and analyze chain data? So it is largely true that blockchains store data. Companies like Flipside and Dune are storing copies of what's available on chain, but they're also solving a problem. The data, frankly, is pretty messy.
00:21:59.684 - 00:22:34.830, Speaker A: It is built for machines. It's hard to back out and track analytics. You need some pretty technical skills to be able to ping a note and grab all that raw data for yourself. And most importantly, these companies clean it up, make it fun and easy to work with and provide you with something that is a much nicer set to work with. So we could use a number of tools and languages like the graph. We could import that data into Python using some tools or r and do statistical analysis. But we're going to stick with SQL for the curated clean data available, most importantly for free.
00:22:34.830 - 00:23:35.620, Speaker A: And that is something that down the line. If you find yourself wanting to apply different tools to the data, then by all means there are a number of resources out there to get up to speed with those, but I find that this is one of the best places to start. Finally, the why? Why would we learn to do this? Why should we do this work? What value are we providing? It's essential for these blockchains and protocols to have this information. Providing metrics into what their users are doing, parsing out genuine activity from bots, tracking, marketplace metrics, etcetera. That's all necessary for them to direct engineering resources to the right areas, to assess the health of their network, to view growth or traction in certain areas, especially in a bear market. We're here to pull back the curtain and go beyond price and volume charts and frankly, it's incredibly interesting. At least I find so there's plenty of demand out there for this type of work.
00:23:35.620 - 00:24:38.470, Speaker A: I'll do my best to showcase some top notch work examples along the way. Metric style itself has a showcase of the bounty programs that it runs and you can flip through these if we wanted to see just the stellar submissions that have been submit put forth through their program. On just taking a random one, Uniswap gas guzzling and the type of work that other people are doing, I do find that taking a look at what everyone else is doing is a very helpful way to learn. What's great about both this and oon is that you can open up and see the SQL that they're actually writing. How did they get the data to create some of these visualizations? So yeah, the metric style showcase is a great place to find some. You also tend to see Dune flipside all over Twitter. So that's the why I think it's time to get in and start using SQL.
00:24:38.470 - 00:25:11.296, Speaker A: So both of these, if you've noticed, look a little similar. There's this flax in the middle here we have a list of what seems like blockchains on the side and then a message saying that it's ready for us and they're waiting for our SQL. So what does that mean? What is SQL like? What is a query? I see up top flip sides calling it untitled query dunes. Got new query. What are those? Well, it's a SQL function. A full query is a SQL select statement. It includes two essential keywords.
00:25:11.296 - 00:25:51.494, Speaker A: The first one select and the second one from. So select precedes a list of columns that you want to be returned. Well from is used to indicate where the data lives. So what we have over here on the left side are a bunch of databases. If we open it up, we'll have a schema and we'll have tables. So let's just preview the arbitrum transactions. If you've never interacted with data in a database before, it should be fairly familiar, because one of the most popular tools out there in any industry is Excel.
00:25:51.494 - 00:26:51.038, Speaker A: And you can kind of think of a table in a database as a table in Excel. There we go, where we have our a, b, C columns and then we have our rows one, two and three, where within this table they're numbered and designed to fit whatever the data is. So we've got transactions in here with the block number, timestamp, the hash for the block that it's in, the hash for the transaction. I could copy this and take it over to the arbitrum blockchain Explorer and find the transaction data. And this is just another way of presenting all of that information. And we pull out everything that the block explorer would be showing or that the nodes themselves are returning and they're in this x y axis of data here. So this overall structure is database schema table.
00:26:51.038 - 00:27:23.560, Speaker A: So let's take a look at what's going on in Ethereum. So start with the select, and we're going to use the keyword here, the star, because we just want to take a look at everything. And from Ethereum, so we have to tell the SQL editor where the data is. So it's in database schema table. So Ethereum core fact transactions. And then we always want to put a limit on there. And basically that tells it only give us 100 records.
00:27:23.560 - 00:27:51.236, Speaker A: We do not need every single transaction in the Ethereum back transactions model. That would be far too many. So I'm going to hide the sidebar with this button over here and we're going to take a look. It's very similar to Arbitrum. They're both evms. We have blocked and transaction hash nonsense different from and to addresses a lot of information that may or may not be familiar here. That's ok if it's unfamiliar.
00:27:51.236 - 00:28:14.970, Speaker A: Now, it's kind of supposed to be, but we will figure that out as we go. So a little honing in on gas. So every ethereum transaction costs something. Block space is not free. There's demand for it. And when there is a lot of network congestion, that demand will increase and gas will go up. That'll be the gas price column here.
00:28:14.970 - 00:29:01.920, Speaker A: And the gas that we are actually using in that transaction indicate the complexity of the transaction. If it's a simple transfer that's usually pretty cheap because it's not doing all that much. But if you are routing a swap through three different pools, that will end up being more costly because there are more steps that are taking place. So let's say we only want to take a look. We don't need all this, right? Not yet. And it's in this fact table, fairly raw and tough to work with some of this input data. So let's back out and just say we want, when it happened, that transaction hash, we can look it up, who sent it and the fee that they paid.
00:29:01.920 - 00:29:46.652, Speaker A: So here what we're doing, instead of that star, we're just listing out the individual columns and saying, just return me all these four. If I forget what the columns are, I could always go over here, click on the, if I can find it back transactions and see, all right, here's everything that's included in that. But right now that's not my target data. I'm just looking for the fees that different users are paying at what point in time. And so the select statement returns this down here. This is a result set. So we can only return one result set per one select statement.
00:29:46.652 - 00:30:50.190, Speaker A: And the way that this is configured is, if I were to say, well, actually I do want to take a look at the blocks as well. And I run this, let's add our limit, 100. This is going to be a problem because we can only run one select statement at a time. If we want to call data from two different databases and two different tables within a database at a time, we can do that, but we can't just say, all right, we want to get 100 transactions and 100 blocks and that's it. We'll get into how we actually do that later. But for here we can only tell the query, wait, well, I didn't like that top one, but we can select the one that we want to run and have just that one run. And again, use the limit.
00:30:50.190 - 00:31:47.950, Speaker A: It significantly reduces the waiting time for these tables. So there's a lot of tables here, and often one of the hardest things is figuring out what do we actually, what do we use? There's 15 or 20, I don't even know how many tables here in Ethereum core, what data is the quote unquote correct data? And for the most part, it depends what you're looking at. But doing something like this and actually taking a look at what's in the table is going to be one way that you can start with data exploration, and that's going to be a very essential part of this. Process is figuring out what data looks like, what we're actually using. And one thing that flip side in particular does is they build out these easy tables. So let's say we wanted to just look at swaps. We can hit that, put just Dec swaps in there and run that and see what it looks like.
00:31:47.950 - 00:32:11.414, Speaker A: And we see we've got hash origin from address. Who would, who's initializing it? Origin two address the contract, which. Not quite sure what that means, but maybe we'll look that up later. Pool name. That's pretty clear. We have different syn wrapped eth pool. They're swapping.
00:32:11.414 - 00:32:22.708, Speaker A: We have them out, in and out. So that's great. Like now we know that. Oh, okay. I can also see the platform that's in here. What I want to build up some metrics around swaps. This seems like the table that I would want to go to.
00:32:22.708 - 00:33:06.822, Speaker A: But I can only guess that based on the name of it, taking a look at the actual data is going to be essential there. And so that's the derivative of the transactions table, which, if I remember to actually highlight it before I run it, it doesn't like that. So, so it's derivative of the transaction table. I just hit preview here. So we're just getting ten back, which is considerably easier to use. So what that's happening, what that is doing is it's going through a lot of this cryptic encoded input data and output. And we always get these jsons here.
00:33:06.822 - 00:33:52.890, Speaker A: So what it's doing in the easy deck swaps table is it's taking this and it's finding where I swaps are based on the content of this. So if this looks hard to parse through, that's because it can be. But you don't need to worry about that right now. It is one of my personal goals that by the end of this, we are able to go into the fact tables and start parsing through these jsons ourselves and finding transactions of a different type that are not readily available in the easy tables. But for now, a great place to start is with a lot of these easy tables. Because this work has been done, we don't have to worry about what in the heck do I do with this? So let's figure out how we want to filter data. So we have all these transactions.
00:33:52.890 - 00:34:24.620, Speaker A: And let's say we want to see, instead of all of the transactions, we just want to see transactions for a specific address. So we have this table here. I think there was field from address. Yeah. So that probably is where we get now. I can input someone's address there where from address equals. I found this nice one over here which a website labeled as one of the a 16 z addresses.
00:34:24.620 - 00:35:18.510, Speaker A: I forgot a very important where if you don't have the actual name of what you're trying to do, then it will not run. It doesn't know what to do with it. So I have to say where from address. So now this is simply applying a filter on transactions where this column from address equals what I put in here. So it's been, I don't know, 15 minutes of SQL, maybe ten minutes of SQL here. Do we have any questions? Minimize the private chat how to get preview results select results. All I see online is results.
00:35:18.510 - 00:36:05.630, Speaker A: So here on this. So the preview panel is going to be. So if I want to take a look at the token transfer is going to hit the preview button here, which is a little magnifying glass that's going to update. And right here it'll tell you what table it's previewing. If I want to go back and be like, wait, I actually want to see blocks, you see this changes, it will take a second and then it'll give me an example of ten different blocks. The results here are the results for my full query up here. So that's the one I just ran, which are all transactions where the from address matches this parameter and the select results.
00:36:05.630 - 00:37:11.570, Speaker A: I believe that is when it's just selected text. But let's find out, show you how you can run some selected. I don't actually know. So I'm finding out with you right here what that selected tab is. And when you do things live, you have to wait sometimes. Oh, what is taking so long? I wasn't listening to my own rules so I forgot the limit 100 which means that it is currently trying to pull all the blocks that is my Badlandhouse. So we're going to pretend that didn't happen.
00:37:11.570 - 00:38:28.210, Speaker A: So when I run a query that shows up under results and let's say I want to take a look at blocks, but I don't want to delete what I have up here, let's pretend that's a lot longer and I can select that only run what I've highlighted and that's going to show up under select results. So selected query is being run. We're seeing the selected results here, which is actually pretty nice. I didn't know that features implemented and I can go see the original results here. So say I have an aggregation going and I want to see, oh, did I mean, did I miss something else? And let's run a quick query over here, and I can go back and forth and compare two different result sets in the same browser. And then to bring that last one in, let's say I wanted to take a look at a preview of NFT transfers. That's when preview shows up.
00:38:28.210 - 00:39:16.010, Speaker A: Any other questions? Moderators? Yes. Castacrypto says, can you please briefly describe what type of data are in the easy tables versus the type of the data that are available in the fact tables? Absolutely. So you notice there's dim, easy, in fact available for the actual tables that we have in here. So fact tables are, you can think about it as records of things that happen. It is a table of transactions in here. So when that happens over time, we'll have August 1 at 02:00 p.m. they'll have this transaction here.
00:39:16.010 - 00:39:51.184, Speaker A: August 1 at 02:01 p.m. we'll have another transaction in there. And these are pretty raw. There's not too much transform that's happening. And when, I mean there's not much transform, I mean it's being presented largely how the flip side team gets it from the node. And that's why we end up with undecoded input data and scrolling all the way over these big long raw JSON files. So transactions follow, for the most part, a certain type of pattern, and we can discern different activity based on those patterns.
00:39:51.184 - 00:41:00.054, Speaker A: So we have a bunch of different decentralized exchanges on Ethereum, we have Uniswap, we have sushi balancer, all sorts of pools, so we can go through and see how they write their transactions, and we can find all the activity that's happening within those, take that out and clean it up. And across all dexs, kind of, no matter what it is, we know there's a subset of data we might want to know. When we're analyzing decentralized exchanges, we're going to want to know what's coming in and out amount in the raw token amount, and also that much in us dollars, if that's what we're looking at as well. So we don't have to multiply it by the price block number and timestamp, indicate when it happened. Contract address is going to be the pool that it happened in the. I won't go through and read every single one of these. We'll want to know the sender who started it, who initiated this transaction here, so we can build out these basically very custom set of columns to this set of activities.
00:41:00.054 - 00:41:58.804, Speaker A: So these are going to be very different from easy NFT sales where we're going to be much more interested in the buyer. Can we discern the creator fee? What currency did they use? What was the NFT address, origin from address? Who was the one selling it? What was the price? All these types of things. So these columns are going to be very different than what we're looking for in deck swaps. So these are curated, supposedly easy to use data we go through and it's cleaned up very nicely. Whereas before, here's just the transactions table. All this was available but deeply nested in JSON here and presented in kind of this dictionary format where you'd have to go through and figure out what it, what it looks like. Hopefully that answered the question on differences between what's fact and what's easy.
00:41:58.804 - 00:42:59.310, Speaker A: Dimensional tables are ones that don't necessarily change over time. They don't represent a linear transition of activity. So we look at contracts. This is going to be a repository of contracts with maybe a symbol and a name and some metadata for it. Labels is another great example of what a dimensional type of table is, where this doesn't represent a timeline of events. It's a reference ledger, if that makes sense. Anything else? For now, can you please explain what each of those tables have and can be used for? Yes, I'm not going to go through each one at this moment because we are going to do that over time.
00:42:59.310 - 00:43:55.690, Speaker A: Later on in this session, I will go through an example of taking a look at two similar but different tables. So I would say if you're curious about what's in each table beyond the name, if you hover over it, you'll be able to see what description of it fact blocks contains. Block level data for the Ethereum blockchain and the person writing this also can be used to analyze trends at the block level. Gas fees versus total transactions. If you want to see more about these, we can go up to flip side documentation here. Tables and documentation will be kind of listed in the sideline here. So if we go to the theorem core tables, we'll have a list and each individual table should have documentation for it.
00:43:55.690 - 00:44:49.134, Speaker A: Let's go to event logs and that's where we can see description for the overall table if we needed to know what, what do they mean by contract, address, address, interactive with for a given event. What about like transaction status and the data? And we can see descriptions of each columns if we are not sure what this actual data is. Documentation is always a fantastic place to go. Let's continue. And if I don't get to your questions here. I will answer that one later if the documentation, sorry, I got sidetracked for a second. If I don't answer your question here in the session.
00:44:49.134 - 00:45:45.310, Speaker A: That is why we are also doing office hours and live Q and a in the chats and just frankly are going to be active in the chat. So all these questions can continue to be asked and answered elsewhere. But so we don't get totally sidetracked, I'm going to continue going back to where we were before so we know how to get data. We can run select all from Ethereum back transactions and we see a bunch of this stuff and that's great, but we often don't want everything available. So we had put in a where clause and where basically lets us pick any of these and say I want the results of this field to equal something that I'm looking for. So for transactions, I'm looking for transactions, bye. This particular address and I'm limiting it 100.
00:45:45.310 - 00:46:47.308, Speaker A: So while that's running, let's do. Oh, there we go. So now this is still that transactions table, but if you notice the from here is only this zero x 66 address. And that's because that's what we told it we wanted to look for. So we can start filtering down and taking a look at like all right, I only want this parameter to be met, but let's say I wanted to only look at the most recent transactions because we want to see some something that happened recently. We could add to the where filter where block timestamp is greater than a date. Or we can also continue to continue to add a couple different operators.
00:46:47.308 - 00:47:32.554, Speaker A: This one order by it does exactly what it sounds like. It will order the data set by a column of your choosing. And what I'm doing here is I'm putting the number two in because block timestamp is the second column in here. And I could alternatively write block timestamp and these will both achieve the same thing. This will tell SQL say go through and put the highest block timestamp first. And the reason it's highest is because I put this descending parameter here. Let's run this and then I'll show you without that because orderby will default to ascending, which will be low to high, a to z, past to present.
00:47:32.554 - 00:48:15.328, Speaker A: But I'm looking for the most recent ones. So that's why I'm using order by two descending. And I'm choosing to do this over choosing to do to add another where clause because I don't necessarily know when the last hundred transactions were. If I'm only looking for that number, then this makes the most sense and cut it off after 100. If I want to see everything since a certain date and time, then we can add to the where clause here. So that should match more or less data in these tables. Both flip side and dune are not exactly up to the minute, but we can take a look at this address on Etherscan as well.
00:48:15.328 - 00:48:52.230, Speaker A: The zero x 66 you can see, and their last transaction was 12 hours, 41 minutes ago, so we should presumably have it. But they have almost 8000 of them in here and they're holding on to quite a bit of funds in here. This was identified as one of the a 16 z wallets. So we can see a bunch of stuff that they're doing. So we don't have that one yet, but we have the one right after it. And if we were to go in, Ox 8970 x 897 is the last one here. Doesn't tell us much yet.
00:48:52.230 - 00:49:42.030, Speaker A: Right. We're still kind of just exploring the data and figuring out how to go in and find different things that we're looking for in here, with the ultimate goal of being able to do something kind of similar to providing information nice and cleanly, like what Dbank does. So this is taking from the block explorer. They don't use flip side, they grab that directly. And they're counting up assets on Ethereum. If you go into their history, there's a very similar structure of here's everything that they've done. Here's that transaction from 12 hours ago where they received by ETH, but they also show cross chain, not too many metrics, though.
00:49:42.030 - 00:50:18.570, Speaker A: So we would want to probably go in and go through this history and figure out can we find any trends of stuff that they're doing. So we're just starting to think about, you know, potential. What can we do with this data? So let's say we didn't want just the past 100, we wanted to add another where clause. You can do that with. And you don't write where again, because this is already. Anything following the where is already within the where, if that makes sense. So we can do within, excuse me, and.
00:50:18.570 - 00:50:58.100, Speaker A: And say we want everything that happened in the past couple of days. So block timestamps, the date column we can use greater than. And how about 2028? That was three or four days ago. And we have to follow this format here. This is datetime format in the block timestamp. I am not including a time in the timestamp here. And it should go through and say everything greater than this which would be the 29th, 30th.
00:50:58.100 - 00:51:45.360, Speaker A: Maybe it defaults to zero and it will show us in the past three days they've had eleven transactions. And here they are here. Let's say we wanted to continue and be like, all right, so this is interesting, but maybe a 16 z has more than one transaction. How do we put like another from address in here? So maybe we go and from address equals this other a 16 z and nothing. So here's a question for the chat. Why did nothing return?
00:51:45.450 - 00:52:10.680, Speaker B: It's.
00:52:16.390 - 00:52:52.808, Speaker A: Let'S see. Vermouth says can't be both wallets and Luluxa says there are no matches between both addresses. That is, if I'm interpreting those correct. So, and is a logical operator. So it is looking for where from address equals this and where from address equals this as well. There's not going to be a record wherever the address equals two things because these are separate. So if I were to change this and say where from, it's duplicative, but it should still come back with the same eleven transactions because these are basically saying the same thing.
00:52:52.808 - 00:53:40.550, Speaker A: So if we wanted to find one where it was either or, then we're going to use or. And now we're going to get something a little funky. Again, I should have put a limit on this. I'm going to cancel and put a limit just in case. Always good practice because you never know how many are going to come back. You can always expand the limit out after the fact, but I'd rather get 100 results pretty quickly and take a look at those and expand, expand it out than be waiting for tens of thousands of results because I don't know how much data I'm asking it for. Okay, so let's look at from address.
00:53:40.550 - 00:54:09.010, Speaker A: We have this ox 66 here, but we only have zero X 66. That's kind of weird. Let's see if we can figure anything else out. Noticing the date is not adhering to this. So we're not just looking at things greater than July 7. We have something from the 15th. We have something from June.
00:54:09.010 - 00:55:12.186, Speaker A: Let's ask the audience, do we know why that could be happening? I'm going to close the sidebar. So basically what we're looking for is think about it as two condition, two logical statements. We are looking for where from address is something and where block addresses something. So when we're looking at the from address to be one of two options, we need to block that out and put that into a parentheses here. So now this is telling that this whole thing is one logical statement. So where from address equals this or this. That will return true where it equals neither of them.
00:55:12.186 - 00:56:00.130, Speaker A: This whole thing will return false and we just won't get those records. And then on the other half of that logical statement, we have block timestamp. And then that's going to look at only where it's greater than July 28. So before when we did not have this, we had three things going on. We had where from address equals zero x 66 b, blah, blah, blah, or where from address equals this and block timestamps greater than zero, 728. So that's not going to return the data we want because what we're looking for is just where it's one of these two addresses and it's greater than July 28. When we run this, we should get a unexpected greater than.
00:56:00.130 - 00:57:04.646, Speaker A: Did I mess up something? Select all from address equals address. Or let me put that in parentheses. All right, so not getting that error this time. Sometimes there is a slight nuance with some of these online editors that I've noticed where if you hit run immediately when you're done typing it, necessarily it won't pick up the rest of that because there is a slight delay between when you finish typing and when the server actually understands what's in the editor. So I think that's what happened there. So now we have 100 rows, date for the most part, eyeing it up. Looks good.
00:57:04.646 - 00:58:10.148, Speaker A: We only seen some recent data and in our from address we have this, c 54. Oh, I saw one in there, 66 b. So just kind of quickly clicking through. It looks like we have what we're looking for. So now we've been able to filter through these transactions going from the whole set of Ethereum transactions to recent ones and also applying this nice little filter for just these two addresses that we're looking to analyze. All right, any questions here? I'm sorry if there's a lag after I answer that. I think between when a comment's posted and when it shows up to me, it is about a minute or so.
00:58:10.148 - 00:59:20.572, Speaker A: So it is tough to see them immediately after. I ask sometimes, can you differentiate between flip side and dune analytics since both use SQL from a high level? Yes. So they both do very similar jobs where they are taking and transforming data from the blockchains. They both have a number of blockchains available, ethereum, gnosis, polygon, etcetera. In terms of detailed nuances, there are going to be different functions that you're able to run between, excuse me, between the two because of the backend, which I wouldn't worry too much about now dune runs on postgres, flipside runs on Snowflake. So the flavor of SQL is going to be a little bit different, but the overall syntax of SQL statements is going to be the same. But where they differ is that dune focuses very heavily on the like protocol specific tables.
00:59:20.572 - 01:01:03.586, Speaker A: So if you see I'm scrolling through here, we're seeing a lot of aave, a lot of aave. I was hoping to ask the Abe by here aave two where they will take contracts and parse out a lot of the events that are happening there on a very granular level for projects and protocols that are built on, whereas for some of these not high level, more broad basing tables that are available on flip side. So the deck swaps table is going to be everything on Uniswap and sushi and a number of other dexes, but it's not going to necessarily be quite the same as what you're going to find on here. In terms of the curated data sets that you're looking at. You will still be able to take a look at the transactions. Excuse all my typos while I type lag, am I logged out? So if we were looking at just transactions like we were looking at fact transactions on flip side, this is going to look very familiar where we have a block time from and to our hash. One thing that they do differently is instead of zero x, there's a backslash x.
01:01:03.586 - 01:01:45.248, Speaker A: We'll have our gas limit price used and then, you know, this is similarly the transactions table is going to be fairly cryptic and raw data to work with and you can go through and have to find kind of the right tables that you want to end up using. If we were to analyze Uniswap data, we could search for Uniswap in the sidebar here and find everything if. Yeah, I think we should. If we want to kind of go too like not much deeper into the nuances between flip side and doing. We can do that in office hours or something like that. But I'll continue for here. So we are at the 1 hour.
01:01:45.248 - 01:02:23.040, Speaker A: I'm going to continue going. This will be recorded if people need to drop off for one reason or another, but I'm going to continue with some SQL basics and continuing to filter data and look for some stuff. I anticipate maybe another 20 to 25 minutes here so we can get through some great content. And then like I mentioned earlier, there will be notes posted after the fact. So if something is not quite making sense, I've tried, you know. Alright, I am writing some notes about it. So if you're not sure how or really works, there will be a page you can reference after.
01:02:23.040 - 01:02:46.010, Speaker A: So we're going to continue filtering data. So we've got our where clause set up, but transactions is a little messy, so maybe we don't want to continue with that too deeply. Let's go. Let's take a look at Dex swaps. I've been talking about that, so that is easy. Dex swaps. I'm going to delete this whole thing here.
01:02:46.010 - 01:03:14.630, Speaker A: I'm going to keep this in here just in case I forget it again, so I don't have to deal with that. So maybe sometimes we don't know the full name of a term in the transactions data. We knew exactly what address we were looking for. We could put where address equals zero x abc. That's not always the case. Say we're looking for Dex swaps and we are interested in the ENS token Ethereum name service. And we want to see what people are doing.
01:03:14.630 - 01:03:52.556, Speaker A: Are they buying it, are they selling it? What's the overall volume of it? What's happening in Dexswap's table? So first, let's take a look at the Dexswaps table again, see what it looks like. Remind ourselves, go to the preview column. I'm going to hide that. Bring this up here so it's a little bit bigger. We have the general block and transaction data we have an origin function from, so we can see who's starting it. The fees they're paying, the gas is this. I was going to say this is the Dexbox.
01:03:52.556 - 01:04:22.894, Speaker A: Table block and transaction data still have origin from. And to. Then we have a contract that's likely the pool. I think if we remember, we can take a look at the documentation together, confirm that. So we are in deck swaps. Took me a second to find it for a given event. Little bare bones.
01:04:22.894 - 01:04:44.298, Speaker A: So let's presume that the given event is a Dex swap. And then we have pool name. So that might be a place to start. If we're looking for EnS swaps, presumably it has to happen in an ENS pool, right? And then we have amount in dollars for it if we have a price for it. Shockingly, we don't have a price for sheep. Vegas. Mount out.
01:04:44.298 - 01:05:47.958, Speaker A: How much do we pay? All right, so let's start there. I want to see, I don't know what the EnF pool is or what that asset's like. So let's say where pool name like ENS, nothing. Well, that's weird because I would have thought that ens would be in there. So what, like, does, is it, if you're familiar at all with Regex, it searches for slug, but you're presumably also applying some wildcards in there. So if right now this is equivalent to where pool name equals ens, because I'm not telling anything else other than this is the three things that I'm looking for. So I can use a wildcard that is a parentheses, which basically stands in for any character in any number.
01:05:47.958 - 01:06:08.858, Speaker A: So there could be, this could be in the middle of a sentence, or it could be at the start of the sentence. There could be nothing in that wildcard spot. So I don't necessarily know what's going to come before and after. So I'm just going to wrap it in parentheses here. And we have something back. That's great. Tenshi.
01:06:08.858 - 01:06:33.884, Speaker A: That's not Enshin. Okay, here's wrapped eth. Ens. That's something that we want. But there's a lot of other stuff that. Why is this showing up in here? Well, it turns out the simple letters e and s are kind of a common string of letters that can happen to gens. They can happen in the middle of a sentence or in the middle of a word.
01:06:33.884 - 01:06:56.934, Speaker A: So it's going to pick those up. So we're going through here and we're looking. All right, we don't want ones that have ens in the middle of the name here. Right. We just want it to be. Let's take a look at the structure. We seems like a fairly common pairing and just ens.
01:06:56.934 - 01:07:46.516, Speaker A: So maybe it's where we have a ens. But could it ever be at the start? It would be ens. So how do we account for both of those? Well, let's say if it's the first one, we know it's going to be ens, some other pairing, and we can use what we were using earlier. We're still going to keep the wrap front. Oops, the wrapped, that is a percentage, not a parentheses. But this one will be the second one, so presumably it would immediately follow a dash. So we're getting a lot here, and that's great.
01:07:46.516 - 01:08:14.720, Speaker A: But do we. Okay, utens, tens. How do we know what's really in here? We don't necessarily need all the transaction data right now. We're just exploring what's in here and we're hoping to pull out just the pool names that we want to find. So I'm going to hone in on just that right now. Okay. Kind of solves it.
01:08:14.720 - 01:08:42.090, Speaker A: We are only looking at the pool name. But now we have all these duplicates. We just want maybe the unique pool names in here, or rather the distinct pool names of. So there's a modifier in SQL that we can add to this where we can put in distinct before it. So this is going to go through this exact query. The only things I've changed is added distinct. It's going to run through easy deck swaps where the pool name matches this or this slug.
01:08:42.090 - 01:09:19.110, Speaker A: And it's going to return this big old record set here. But then distinct is going to go through and say, all right, well, we have wrapped ETh, ens, LP, we have tens, comes to the second one that's already been displayed. We don't need to show the user that again. So it's going to ignore this because we're already representing it. We only want each individual unique record. So now we have 16 rows. That's great.
01:09:19.110 - 01:10:25.434, Speaker A: Where we've got u tens, friends, mittens, extens, bens. So ens is pretty common, but we're getting closer. We've got we ens, USDC ens, any other ens we. So when it's only 16, we can, you know, frankly read through those and find exactly what we're looking for here. But we're learning the only one. So anytime it's the second one, we don't have a problem with that because ENS looks like it's the end of word. So maybe if we deleted this here and said there's no wildcards before ENS dash, but for this one there are, because that's the other pairing in the liquidity pool, even closer.
01:10:25.434 - 01:11:10.790, Speaker A: So there was one that I missed. And that's why checking with your eyes manually can be tough sometimes because I pass right over this, didn't notice whatever that one is. So maybe we do add a space, or at this point we know that it just ends with LP and we don't need the wildcard anymore. So it either starts with ENs dash or ends with EnSLP. And now we only have the three Ens pools that we're where we're looking for here. So like is very helpful. It's very useful, it's great for data exploration.
01:11:10.790 - 01:12:08.054, Speaker A: Or if you're going through back on some of those fact tables and you know that a message starts a certain way and then whatever comes after it might be parameters like amount, but you're looking for the way that it starts to identify a certain subset of message. It's a great way that we can parse through some of these records and pull out exactly what we're looking for. So now if we were to delete this because we don't need the full name anymore, now we just want to see what's happening with those three. We know what three full names are going to be returned and now we have the full transaction data for all of the ENS liquidity pools. So we can continue with this or if we know this is never going to change. Right? Let's back up for a second. We can write this another way.
01:12:08.054 - 01:13:13.830, Speaker A: Let's say we found this out via data exploration, but we don't want to write it with a like anymore. Or we only want it to be specifically these two. Or we just want to limit it in some way, shape or form. We can use another operator where we explicitly spell out each one. So we could either do web pool name equals USDC ensLP and pool name equals wrapdeep enslP, or we could use in. And what happens here is that we basically give it a list of items that we're looking for and this will take the place of writing pool name equals a and pool name equals b. Instead, what we can do is it's a string, so I have to put a parentheses around it and then I'm going to delete these here.
01:13:13.830 - 01:13:56.180, Speaker A: We're still looking for distinct pool names, right? Because we want to confirm that this worked. And there we go. So now we found it by using like, but now we can just simply write it out. And all of these are potential responses for pool name. So we can just list them out in a parentheses, comma delineated list. And now we'll get the same information here. The caveat is that if someone creates another EnS liquidity pool that ends up in here, we won't pick that up because we're explicitly stating what we're looking for.
01:13:56.180 - 01:14:38.300, Speaker A: But that might also be good. Maybe we only want to look at ethereum based liquidity pools. So we're just looking for these two. That's going to show us just where ETH is, one of the two token pairs. Promise only one more operator that we're going to go through. So finally, let's say we want to see buck timestamp, just trading data available in June. So before, when we limited time, we did where block timestamp was greater than July 28, 2022.
01:14:38.300 - 01:15:29.004, Speaker A: But we could also add to the where clause and block timestamp familiar so far between and then we can pass in two dates and it will. It's just a little more succinct. Way of writing amblock timestamp greater than June 1 and block timestamp less 130th. We can just say 2022-0601 so now we have all the ENS swaps on the available platforms. I don't know, caveat. What every platform is in here. We could run a select, distinct platform if we wanted to.
01:15:29.004 - 01:15:48.060, Speaker A: That's something that you can go do as you're exploring with this data. And we have all them for the ENS pools in the month of June. So, you know, analysis isn't just listing transactions. Right. We found the transactions. What do we do with them? Well, we start applying functions to them. So let's say we were curious.
01:15:48.060 - 01:16:25.630, Speaker A: Is it very active? We can do a count, right? We can count how many transactions happen. Right now I'm limiting it at 100. So a very informal way of doing this would be, oh, God, don't run forever. Taking the limit off. It's still going to run those filters on it. And we have, okay, 2598 rows. How do we get that as a number? Well, we can simply say, count how many transaction hashes there are.
01:16:25.630 - 01:17:22.026, Speaker A: And we've got 25, 98. And then what we should probably also do is just double check. Are there any duplicates in there? There are. Now, are those duplicates or are they transactions that have multiple steps that are pulled out and represented in the table? That's something we would want to explore. Okay, whenever we see a discrepancy like that, I'm going to table that for now. And I'm just going to say, all right, there are 25. We have 2600 records, 88 transactions that may have either a duplication or multiple steps to them, which is possible if you've used Uniswap and you're transacting from one asset to another that don't have a specific pool for them.
01:17:22.026 - 01:18:19.398, Speaker A: It may route it through another pool that will come through as a swap. So now let's say count is nice, but like, what is, let's see, let's remind ourselves what columns are in here. Easy. Swaps. What might be, what might we be curious? What about platform? It's kind of nice. Full name, sender symbol in. Well, let's maybe, let's drop ens for a second and look at nfTs, because what I want to do is I want to sum something up without it being too complicated.
01:18:19.398 - 01:19:50.930, Speaker A: And token out is going to be both ens and wrapd because people could be buying or selling. So let's take a quick detour here, and let's take a look at NFT sales, we're going to set it up. Similarly, we're still going to look at June while I'm typing this out. Any questions worth popping up? Is there any syntax to differentiate arguments from another besides parentheses? So within a where clause like that, that's a good question. I don't think so. I don't actually know because I am just so used to using parentheses because it's easy enough to block it out. You know, this, this or parameter is in a parentheses separate from the.
01:19:50.930 - 01:20:50.510, Speaker A: And that's happening over here. If you're talking about within the where clause, I use parentheses and that, and you're going to see that very commonly it's possible with other flavors of some SQL, but I don't actually know. And that might be one that's worth asking in the the discord. All right, so we are in a similar place to where we were before, but we're looking at NFT sales in June instead of deck swaps in June. So similarly, let's say we want to compute some metrics and we are wanting to look at. How about Opensea? Let's not go so granular as to pick one project, but let's go platform. Do we know that it just equals opensea? We don't.
01:20:50.510 - 01:21:54.080, Speaker A: So let's check what it could be. All right, only five here open circumental. So again, we've got Opensea transactions here. Let's count transaction hashes. What's that, 1.8 million? That's large sales. I don't think there should be multifies, but there can be if you're batch buying it, quite a few batch buys within the easy deck swaps.
01:21:54.080 - 01:22:33.194, Speaker A: We've got total sales, 1.87 million over, what was that? 1.45 mil? Separate transactions. So it tells us that there are either protocols, individuals, or contracts out there buying more than one NFT in a transaction. So maybe that's something we want to look at. Average sales per transaction. But let's go through and let's see what might Opensea care about.
01:22:33.194 - 01:23:04.628, Speaker A: Probably the fees that they're bringing in. So that's something to be mindful of. I clicked NFT mint. So for NFT sales, always make sure you're looking at the right data there. So platform fee and platform fee USD. So we can also use another function, sum. And this will, as just the way count goes through and counts each individual iteration of a transaction hash sum will run across a column, and presumably it's a number column because you can't really sum up characters.
01:23:04.628 - 01:24:01.030, Speaker A: It will take the sum from the entire data set. That data set being everything in NFT sales in the month of June where the platform's open sea. So let's sum up their platform fee and then, so just because it's easier sometimes to see things in a common denomination, let's take a look at their platform fees in us dollars. So we've got that. Let's just round up 1.9 million transactions, something with the platform fee totaling 12 million. For all intents and purposes, $12 million in platform fees for Opensea for the month of June.
01:24:01.030 - 01:24:44.820, Speaker A: And this. What do we do with this? Let's put some comments in the chat. This seems weird. Why? And what would you maybe go investigate further? I see Feasar and Gwey. It's decimals. The blockchain reading of the value needs to be converted. Orion says divided by ten, five, eight.
01:24:44.820 - 01:25:17.978, Speaker A: Okay, so those are good thoughts. How would we figure that out? So let's see. Sometimes the hover over doesn't work, but we have the docs up from earlier. So we are looking for easy NFT mints because I want to know what this table is. Right. That would make sense if we cut off however many zeros we need to cut off there. So let's see, what are we looking for here? Again, I went to mint over sales.
01:25:17.978 - 01:25:43.862, Speaker A: Always read carefully. There we go. Platform fee, the decimal adjusted. Okay, so it's not that, because right here it's telling me it is. Decimal adjusted amount of fees paid to the platform for this NFT event in the transactions currency. That's a hint there. For Opensea, we assume a two and a half percent fee on marketplace purchases.
01:25:43.862 - 01:26:12.820, Speaker A: Further adoption. Private sales do not have platform or creator sales fees on Opensea. Okay, so my first thought was decimal Justin, two. But apparently that is so the NF easy tables, they do that for you. But here's something that's interesting to me. In the transactions currency. So are there other currencies that they're using without deleting that? I'm going to go select distinct.
01:26:12.820 - 01:27:16.030, Speaker A: And what column do you want? Currency symbol is what we're looking for and then we're just going to keep to the same timeline. So I'm just going to copy this, paste it down here. We're going to run selected. So we have a lot Elon Rari, intel USDC dye ape wrapped eth looks so's rise. So there's a lot of potential currencies in here that we potentially need to convert. Staked ETH. You can buy stake deep so that's why we all right, so we can't use this as is.
01:27:16.030 - 01:28:01.490, Speaker A: We would either need to adjust it, figure out all right, what is it in each individual currency or let's just take a look for my domain knowledge. From what I know about Opensea, most sales happen in eth. So let's just for here symbol only look at ETh sales. And I have to highlight this because I wrote another query in there, sometimes doesn't like it. So I'll just delete that because we got what we needed out of it. Okay, so now we have 10.3 million in us on 6500.
01:28:01.490 - 01:28:40.980, Speaker A: Does that make sense? 1582 I think that's about what ETH was in June. So that kind of makes sense to me. So now we figured out that we can't just take the number as is. We got to do a little bit of digging in it. So there was still that number was close to 12 million. I think it was 11.8. So there's a million and a half in sales that are not beef.
01:28:40.980 - 01:29:14.758, Speaker A: Some might be rap deep, some might be USDC. You know, we can figure out what those are by continuing to explore the data, but we were able to determine based on what we know, it's probably mostly eth. So let's figure out just the ETH sales. So platform fee don't want to mix terms here. So the platform fees that Opensea brought in in June were 6500 ETH for a us base of $10 million. Not too bad. So we're going to end there today.
01:29:14.758 - 01:29:49.890, Speaker A: It has been an hour and a half. I don't want to keep going for too long. There are definitely more functions and aggregations to pick up on and that we will go through, but I think this has been a good base. I will be in the discord for maybe about 30 minutes after this for any questions that were not asked. It is hard to get to all the questions on the side while I'm also driving in the live share. So if I did not get your question, join us in the discord. I'll be there for a little bit, but I hope this was a helpful start.
01:29:49.890 - 01:30:29.160, Speaker A: I will also work on putting up the notes for what we've done so far that will go on the git book docs Metricsdao xyz that will be up before the day is done. Give me a couple hours there and I will get it up. So if you want to dive in with what we've learned so far, then you can go ahead and do so. But thank you to everyone who tuned in. We will pick this back up next week and the oh yeah, the assessment. We will be dropping the link to the assessment in the discord. I will also make it available with those notes that I'm going to post on the git book, so keep a lookout for that.
01:30:29.160 - 01:30:45.750, Speaker A: That is going to be the best place for more information about this course and to interact with other instructors and students and mentors would be to meet up in those channels. So once again, thank you all for showing up. Hope this was a helpful first session and we will pick it back up next week.
