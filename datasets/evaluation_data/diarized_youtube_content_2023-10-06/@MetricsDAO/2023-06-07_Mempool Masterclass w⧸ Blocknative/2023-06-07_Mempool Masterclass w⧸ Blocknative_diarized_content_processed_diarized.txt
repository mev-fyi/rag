00:00:00.640 - 00:01:01.920, Speaker A: Welcome to the Memphul Masterclass that we will be hosting today with Block Native. And today's workshop is going to be really interesting because we are going to be exploring ManPU. With ManpU, we can really understand what happen on chain and why it happened as well. And we have today Julio with us, who is from Block native, and Block Native is a leading Ethereum blog builder and provider of programmable infrastructure for builders and searchers. So very excited to be presenting you this workshop today. Apologies for for the delay due to some technical difficulties, but here we are, we are starting. And Julio, over to you.
00:01:02.940 - 00:01:07.320, Speaker B: Thank you. Hi. Hopefully you can all hear me. Yes, thumbs up.
00:01:10.820 - 00:01:22.550, Speaker A: Let us know in the chat if you can hear us, and also if you have any questions over the course of this presentation, just drop them in the chat and we'll just get back to them.
00:01:23.850 - 00:01:47.286, Speaker B: Cool. So welcome to the masterclass. My name is Julio. Friends call me Jules. I am head of content and education here at Block Native. So today we'll be covering Mempool 101. I'll first go over what the mempool is, why it matters.
00:01:47.286 - 00:02:28.024, Speaker B: I'll cover an example of some mempool analysis, and then we'll go hands on with some block native mempool tools so that you can get the full experience. If you have any questions, just post them in the chat. I'll try to get to them. If not, I'll be in our block native discord as well as the metric style discord. So always happy to chat there. So, a little about block native. We work on real time web3 infrastructure.
00:02:28.024 - 00:03:17.980, Speaker B: We focus on the pre chain layer specifically, which is often overlooked but very critical, as you'll find out today. Over the last four years, we've been collaborating with some of the best networks, wallets, protocols, dapps, to make our infrastructure best in class. And we have a dedicated infrastructure team that allows us to have unparalleled visibility into a comprehensive set of mempool data, which you'll learn all about. And this mempool data basically powers everything we do. Now, all of this infrastructure wouldn't be possible without great discussions and knowledge sharing. So I really hope that this masterclass is the beginning of a new journey for you, and this is the start of many fruitful conversations. And with that, let's get started.
00:03:17.980 - 00:04:13.802, Speaker B: So we have a lot to go over. We started a little late, so I'll go through this pretty quickly. Before we start with the mempool, I want to get started with a fundamental understanding that all transactions, regardless of type, not just blockchain but in the fiat world as well, involve incredible complexity. So, for example, every day we scan our credit cards, we swipe them, we put them online, what have you, and in just a few seconds, the transaction gets cleared. And nobody really thinks about what happens in those few seconds. I ask people, hey, have you ever thought about what happens when you swipe your credit cardinal, and what's going on while you wait? And like 99.9% of people say no, they've never really thought about it.
00:04:13.802 - 00:04:52.410, Speaker B: And why do you have to? But it's actually pretty interesting. So it turns out there's at least six different commercial entities involved in credit card transactions. Here on the screen, I have an example of Visa's 14 step process for confirming a credit card transaction. And it's amazing because it's not very transparent to the consumer, right? All of these amazing things happen in the background. They're happening globally. There's these fraud checks, these verifications, these merchant checks, consumer checks that all have to happen before your transaction is settled. So everything happens in that small second window.
00:04:52.410 - 00:05:34.272, Speaker B: Same thing, by the way, largely happens when you're trying to do any kind of equity trades. So you can use your favorite traditional stock trading app and you can. Here we go. Sorry. So you can use your traditional stock trading app, for example, and buy some Amazon stock, for example. And this would be the transaction flow for that. So this was taken directly from the SEC, and it shows the various parties who are involved in every single stock transaction.
00:05:34.272 - 00:06:32.158, Speaker B: So you have several different entities with several different transaction flows. And I share those two because we live in a world of blockchain. We're here to talk about blockchain, and the processes behind the scenes are just as complicated. Here's a very straightforward interface from uniswap we all know and love. And when I ultimately click to send my transaction, you wait a little while and then what happens? Turns out, okay, you can all still hear me, right? Cool. So after you submit, your transaction turns out lots of complexity that's going on. Sorry.
00:06:32.158 - 00:06:50.594, Speaker B: Trying to monitor the chat here. Perfect. Okay, so lots of complexity goes on transactions. Like I said, inherently complicated. Blockchain transactions are no exception. Each type of transaction requires different processes. There's different entities involved, different sets of concerns.
00:06:50.594 - 00:07:41.836, Speaker B: And so blockchain just represents new types of transactions with new types of concerns. And that's what we're going to talk about today. So this is a snapshot of the current Ethereum network from just last night. And the time that I took this, there was 8593 unique nodes that were part of the Ethereum network. And every single one of those is part and party to your web3 transactions. And the reason for that is because of the way each and every one of those 8500 plus nodes is involved with the mempool, and therefore your transactions. So what exactly is the mempool? Well, at a high level, the mempool is just a gateway to the blockchain.
00:07:41.836 - 00:08:34.802, Speaker B: Before anything can be written on a block, it first has to move through the mempool. Unfortunately, this important piece of web3 is often overlooked. People don't really think about how complicated things can actually get in the mempool. There's a reason why it's been called the dark forest of web3. So mempool, the short for memory pool, the term itself, mempool, actually comes from bitcoin, and it refers to the set of in memory data, a set of in memory data structures that are inside of a node that store candidate transactions before their mind, or I guess, technically on Ethereum. Now validated in this presentation, we'll be focused on web3 and the Ethereum ecosystem. As such, I would like to point out that geth doesn't actually call it a mempool.
00:08:34.802 - 00:09:23.500, Speaker B: It calls it a transaction pool, and open Ethereum actually calls it the transaction queue. But regardless of the name, it's a pool of transactions sitting in memory, waiting to be included in the block. You can think of it as kind of a waiting area for unconfirmed transactions to be accepted into a block. Here is a more formal definition for you. So when we think about the mempool, there's sort of eight key things you need to understand. One, mempool equals pre consensus. So the first thing that people find very disorienting about dealing with mempool data is that it is, by definition, pre consensus.
00:09:23.500 - 00:09:52.086, Speaker B: It's the place where transactions go while they're waiting to be confirmed as a network. Basically forms consensus around which transactions to include in the block, because the mempool is. Before that happens, it's literally pre consensus, which basically means there's no consensus. And that brings us to number two. There is no single mempool. What does that mean? So there's no single mempool. Truth.
00:09:52.086 - 00:10:46.502, Speaker B: There's just many, many, many, many unique copies of the mempool, all of which are slightly different and slightly with slightly different characteristics. As such, many of the rules that we expect around blockchain blockchain transactions don't actually apply to the mempool. In fact, the opposite rules apply, which can be very interesting. And unfortunately very disorienting for a lot of folks. Okay, so there's no single mempool where all of these multiple, where are all of these multiple mempools? Right? Why do people call it the mempool if there's more than one? Well, we often talk about it as the mempool because it's easier than saying anything else. Right. In reality, like I showed earlier, there's about 8500 plus nodes on the network.
00:10:46.502 - 00:11:38.670, Speaker B: That means there's 8500 plus unique mempools, because each of those nodes has its own mempool, and each node mempool is different than the nodes around it. Sometimes that's a little different, sometimes it's majorly different depending on where those nodes are located. And as a result of those differences, we have number three. Each mempool has its own unique set of transactions. Now if you submit a transaction directly into a node, it inspects it, it inserts it, and then it broadcasts it to its peers. And so what basically happens is all of the nodes on the network create these peering relationships and they share pending transactions with each other basically across their different memos. And there's all sorts of interesting characteristics and rules that apply to how transactions actually get propagated across the network.
00:11:38.670 - 00:12:15.030, Speaker B: Which nodes, except which transactions and why? For example, nodes can do things like drop transactions or reject transactions that other nodes accept. So when you ask the question, what is the status of my pending transaction? Right. You submit something and you're curious. The honest answer is you have to ask like over 1000 unique nodes on the network to give you a solid answer. You can't just do that. You can't actually just access all of them. So anytime you're figuring out the state of a pending transaction, it's kind of a best guess about what's going on.
00:12:15.030 - 00:13:13.860, Speaker B: Most of the time your guess is pretty good, but under specific network conditions, that guess could be actually quite inaccurate. So just realize that any node that you operate, any node that you have access to, and even any network of nodes or set of nodes that you have, any cluster, only have a portion of the mempool and only have a limited view into all of the transactions that are pending in the mempool at one time. This could be very disorienting for people because they're used to there being one universal truth on the blockchain. And that's true. There is one universal truth once things are confirmed. But prior to being confirmed, there's a whole bunch of weird wishy washy stuff that can happen. Okay, number four, each mempool has its own unique characteristics based on client type, configuration and peers.
00:13:13.860 - 00:14:10.730, Speaker B: Now significantly, nodes are not atomic units, they're just computers running software, right? And significantly, that software can be of different client types. Now, the two primary client types on Ethereum today are going to be, I believe, at least for execution, clients geth and open Ethereum. But there's others, right? And those two clients, they behave differently as it relates to mempools and mempool data. So you actually have some variance between nodes based on the clients they run, and then both of those. And all clients can have various configurations. So they exist on different classes of hardware with the capacity to have different settings associated with them. So how a node is deployed and on which hardware with which the, and with which configurations is going to affect how that mempool behaves.
00:14:10.730 - 00:15:13.014, Speaker B: We also have, each node has a set of peers. By default, I think the peers are about like 20, and they can go up to maybe 100. And those peer relationships actually change quite a bit on the fly. So which transactions you get in which transactions you get in what timeframe and what order is also a function of the peering relationships your node has on the network. So you have all these degrees of freedom that affect how the mempool actually looks at any one part of the network. So again, not just one mempool, but it's actually lots of distinct nodes, lots of distinct mempools, each with their own unique characteristics and unique behaviors. Okay, number five, so we talked about blockchains being immutable, while the mempool is literally the opposite.
00:15:13.014 - 00:15:42.814, Speaker B: The mempool is totally mutable. Any pending transactions, the mempool can be replaced with replacement transactions. There are most often things like speed ups and cancels, but there's other types of replacement transactions. And so any transaction which is in the mempool can actually be overwritten by the, the originating wallet at any moment. So just because it's pending in a certain state doesn't necessarily mean that that's the state it's going to end up at. You can zero it out. That's a cancel.
00:15:42.814 - 00:16:18.134, Speaker B: You can add gas to it. That's speed up. You can actually change any parameters as long as you reuse the nonce and add more gas. So things are constantly changing underneath you within the network. And by the way, they all have the same characteristics that I mentioned before, right? They change across the network, but not all at once and not necessarily consistently. So you can actually have a single transaction which can exist in multiple states inside the mempool simultaneously, which gets to be kind of interesting when you try to figure out what the heck is going on with your transaction. Right.
00:16:18.134 - 00:17:04.280, Speaker B: This set of nodes, with their own set of mempool might have received one version of your transaction, while this set of nodes might have received a separate version of your transaction. And depending on what the minor or the validator is doing at that time and who they're connected to, can determine what state your transaction ultimately ends up in. Okay, number six, we like to think about the mempool as this inconsistent fabric that is lumpy, meaning you have areas of the mempool where you have one view of the network and areas of the mempool that you have a different view of the network. Right. Kind of what I was just saying. Sometimes those views are geographically based. So you might have nodes in Europe that have a different set of transactions than nodes in, let's say, China.
00:17:04.280 - 00:17:47.430, Speaker B: Maybe it's a little different. Maybe it's a lot different. And this is largely due to conditions of network congestion. Memphis pressure. Specifically, as congestion builds, and as that pressure builds, the fabric gets lumpier and lumpier. So any one node might start to have, might start to have less and less representative census level view of the entire network during periods of high congestion, which sucks, because that's usually what we need to know the most about what's going on with our transactions. Right? Because they're slow, gas prices are high, there's money moving around really quickly, and now you don't know.
00:17:47.430 - 00:18:26.888, Speaker B: Now you don't know what exactly is happening in the memo. So, very tricky to figure out. Okay, number seven, effectively, your transaction is always competing for block space. What do I mean by that? Theoretically, under proof of work, a block was confirmed, on average, every, like, um, 15 seconds under proof of stake. Now it's 12 seconds. And each proposing block contains typically around, I believe, 150 transactions at a given moment. But there's usually between 80 and 100,000 pending transactions across the entire ethereum network.
00:18:26.888 - 00:19:14.730, Speaker B: So literally every 12 seconds, your transaction is competing to be one of the top 150, going against, like, 80 to 200,000 other pending transactions. It's kind of amazing how it all works, really. And that's really the nature of this, right? There's all these transactions that are competing against each other to get confirmed as quickly as possible for the lowest possible transaction fee. Which brings me to our last key. Number eight. Competition among transactions in the mempool determines both gas pricing and time to confirmation. And so during periods of heavy network congestion, gas price goes up, and it might be harder and harder and harder to get a transaction confirmed.
00:19:14.730 - 00:20:42.740, Speaker B: Okay, we covered what the mempol is, but why does that matter to you? Well, on chain is what happened, but the mempool is why it happened. So what does that mean? The mempool impacts every single transaction, every user, every trading strategy, every wallet, every dapp, every protocol, everything in web3 is influenced and impacted by the mempool. How so? Whether you're a trader or a developer, you or your users expect your transactions to go through without a hitch. You sign your transaction, and a few seconds later, it's on chain. Quick, secure, no funny business, right? That's at least the expectation. And it's interesting because blockchain technology, it gives users the freedom to transact in ways that have never been possible before. Rather than rigid transaction rules that were defined and enforced by centralized institutions, web3 actually enables these new, truly programmable transactions with possibilities that are really only bound by developers imagination and creativity.
00:20:42.740 - 00:21:18.920, Speaker B: But this also introduces a lot of unexpected complexity into transactions. So what through transactions are actually much more complex than, you know, traditional transactions that many might be accustomed to. We talked about those credit card transactions before, right? Nobody really thinks about what happens in between. The whole intent to transact versus finality phase. And same thing happens to web3 transactions. You just kind of expect it to go through. You might have a little more transaction anxiety.
00:21:18.920 - 00:22:09.200, Speaker B: And the reason for that is there's all this complexity that's happening. You know, that it might not settle the way you want it to. Right? And a large part of this is because web3 users now have that ability to take complete control of their transactions. But that comes with a lot of complexities, a lot of risks that can actually prevent your transaction from reaching your intended outcome. We'll talk a little bit more about those risks. So, spoiler alert, these risks are coming from the mempool, right? This is Mempool masterclass. So you've all heard of off chain and you've heard of on chain, right? Everybody knows those two words.
00:22:09.200 - 00:23:17.100, Speaker B: But there's this new thing that we like to think of. I guess it's technically not new, but this area between off chain and on chain, we like to call that the pre chain layer. In this pre chain layer that I have broken out here, it's in this layer that what three users need to decide what kind of transaction they want to make, set their own transaction fees, right? So include gas price and gas limits. They have to understand how these gas prices ebb and flow. They have to preview their transaction to ensure it executes as expected. They need to know what to do if a transaction gets dropped or stuck, among countless other factors. Right? It's a lot to take on for new users, and a lot of these things I just talked about are all affected by the mempool, even if the actual mempool part of the whole pre chain layer is, you know, this tiny little thing right after transmitting your, your transactions, it influences everything.
00:23:17.100 - 00:25:19.780, Speaker B: For example, when composing a transaction, right? Many traders might be using real time mempool data to power their strategy, but any information is emitteries, any information asymmetries can enable a whole host of problems, like front running, sandwiching, and a bunch of other transactional marine attacks for gas right when you're pricing a transaction, network congestion and the current makeup of transactions in the mempool will determine just how competitive a user's transaction is going to be and what price you need to set your gas, as if you want to be a candidate for inclusion in the next block, or maybe the next two or next three blocks. When previewing a transaction, simulations are held against the current block state to get accurate estimates of what your transaction outcomes are going to be, which means a broad census level view of the mempool is key. Simulating transaction against a single nodes mempool could yield completely different results than if you were to simulate your transaction against a more broad census level view of the mempool. Users can also monitor the mempool during their transaction transmittal process to determine if there are any errors due to non scaps maybe, or if the transaction is not propagating to the wider network. And then lastly, we have any kind of lack of mental visibility during any of these stages, right? Prohibit you from having any kind of inflight corrections. You're not going to know you need to readjust your gas price because you had it wrong, or you're not going to know that your transaction isn't going to execute the way you expected it to. So this can cause a lot of increased user friction from fail, drop or stuck transactions.
00:25:19.780 - 00:26:14.410, Speaker B: And we'll talk a lot more about why those fail, drop and stuck transactions really suck a little later. So fortunately, the path from transaction intent to transaction finality doesn't actually have to be linear, right? What's cool is this flexibility enables users to revisit the different phases of their transactions lifecycle to make sure it's executed as expected, right? Don't like the outcome of your simulated transaction? You can just regass it or change what you're trading. If your transaction is pending too long in the mempool. Right. You can speed it up and you'll know exactly what gas price to use to be included in the next block. When you do that speed up. And to be most successful at all of this, you basically need the right tools and you need a low latency, census level view of the mempool, which fortunately, we have block native do offer.
00:26:14.410 - 00:26:55.136, Speaker B: So going back to our theme, right on chain is what happened. The mempool is why it happened. I know many of you are researchers and analysts, so let's take a look at one example. Okay, so a great example I like to think of when I think of the mempool is why it happened. Right. Is Black Thursday. So this was a significant event in the Makerdao ecosystem, specifically that occurred on March 12, 2020.
00:26:55.136 - 00:27:38.880, Speaker B: The event actually led to a loss of about. Yeah, right there. $8 million. And it was a major stress test for DeFi, highlighting vulnerabilities in both the design and operating operational procedures. So let's take a look at what the mempool data shows us. Okay, so on this day, the price of ethereum actually dropped dramatically. It fell about 40 to like 45% due to primarily, I think it was broader market turned down caused by Covid-19 related issues.
00:27:38.880 - 00:28:18.546, Speaker B: Now, a little background on Makerdao. You don't need to memorize anything I'm about to say, but it does paint a picture for those who are unfamiliar with how liquidations work. Right. So Makerdao facilitates the creation of a stable coin called dai. And DaI is typically, it's generated when I users lock up collateral, which is usually going to be eth in a smart contract. And this creates a collateralized debt position, a CDP. And when the price of eth drops rapidly, the value of the collateral that's held in these CDP's fell below the value of the DaI that it had been, that had been generated.
00:28:18.546 - 00:29:04.054, Speaker B: And as a result, the system becomes uncollateralized, which is going to threaten the stability of DaI. So typically when this happens, Makerdao has auction systems that will liquidate the CDP's and sell the collateral for dai to basically cover their outstanding debts. And this is typically done by arbitrage and liquidation bots. Makerdao calls them keepers in their ecosystem. But in this case, some tricky mempool conditions actually prevented this from happening as it is expected to, and that resulted in that $8 million loss. So let's take a deeper look. Now, this is a Mempool 101 class, so I'll go over this at a very high level.
00:29:04.054 - 00:30:30.630, Speaker B: If you want to learn more, we do have a fantastic blog covering the entire black Thursday situation, and I highly encourage you all to read it. So the rapid price change in ETH created congestion in the mempool, and here we can see the massive spike in count of unique transactions and through the mempool at that time. Right? You can't see what I'm pointing at, but I'm pointing at the spike. So this rapid surge of transactions congesting the network actually forced a lot of nodes that had default mempool configurations to actively protect their systems and their system resources by basically dropping and rejecting a lot of valid transactions. So here on the second chart we can see the dramatic spike in drop transactions in the mempool during the same time period. As a result of these drop transactions, many new transactions actually became stuck due to non scaps and basically ethereum transactions from if you don't know what a nonce or a non scap is, basically ethereum transactions from the same account need to be executed in numerical order according to their nonce. So a transaction with a nonce of 32 can't be executed until the transaction with nonce 31 clears, right? So it doesn't matter how high the gas fee is on this new transaction, it's basically stuck.
00:30:30.630 - 00:31:28.210, Speaker B: And these stock transactions can have a huge impact on, especially on addresses that issue. Many new transactions, such as those automated trading payment systems from makerdao, also exchanges or other payment networks, can be severely impacted by these stuck transactions. And that's precisely what happened to Makerdao. There are keeper bots that were involved in these liquidation auctions got stuck due to these non scaps. So a huge contributor to these drop transactions was gas. As mempool congestion rose, the gas price required to actually get on chain climbed, which you know, happens when there's congestion. However, the rapid rise wasn't actually tracked equally by all of the network participations, including including a lot of the price oracles that these bots use to price their transactions.
00:31:28.210 - 00:32:43.372, Speaker B: So the average price to get mined began to diverge from the average price of transactions that were actually entering the mempool, which we can see in this chart. Now, usually you can submit a replacement transaction with a higher gas price if your transaction is pending for too long. However, many users and automated systems with unmarketable transactions weren't able to just replace their transactions with higher gas fees this time because a series of malicious bots were purposely consuming significant mempool resources through repeated underpriced by flooding the network with like, repeated underpriced transactions. And we can see all that in the mempool. That kind of information is never going to end up on chain. So unless you have mempool data, it's not something that you're going to be able to see. So here, looking at the mempool data, we can see that these bots successfully increased congestion and distorted the gas price distribution in the mempool, right? This had, this had a net effect of increasing stock transactions and skewing oracle prices, like I said.
00:32:43.372 - 00:34:03.336, Speaker B: So if we look at these pink overlays in the diagram, we can see that our mempool data detected rapid increase in pending transactions that would never be mined, right? We see that it's relatively flat. Then all of a sudden we have this rapid increase in this first pink square. The rate of those transactions then doubled about 35 minutes later, and then dropped off a little before entering a linear escalation pattern at about, what is that, ten utc? So we can see here that even though the volume of transactions entering the mempool increased dramatically, right. There was a lot of congestion. The gas price of a significant portion of the mempool actually collapsed to an artificial low value because of these, these bot transactions flooding the network. So the blue line right here show the counter transactions that eventually finalize on chain in correlation to what their gas price was. And then the orange line, right, counts transactions that were never actually finalized on chain.
00:34:03.336 - 00:35:17.486, Speaker B: So we see this, this large influx of low gas transactions, and then taking a look at one of these malicious hammer bots mempool activity. In particular, we can see hundreds of unique replacement transactions that were used to flood the mempool and ultimately increase congestion. And these replacement transactions occurred about every 7 seconds on average, with the smallest gap between transactions being 0.1 second between some of these replacement transactions. So most of these replacement transactions, as we can see in chart two, used an identical, artificially low gas price. When the mempool nodes started dropping transactions at an unusually high rate, many of the keeper liquidation bots transactions were impacted by stuck transactions that couldn't. So they were impacted by stuck transactions so they couldn't compete in the real time window auctions that were initiated by these zero bids.
00:35:17.486 - 00:36:35.190, Speaker B: Even though keeper bots correctly detected the zero bid auction start and responded with a much higher bid. So their transactions were stuck because their transactions were stuck because they basically failed to appropriately interpret the rapid gas price increase, which means their transactions were evicted from the mempool because their gas was too low. And then this created the conditions for there to be transaction non scaps. With these non scaps, any subsequent bids that these keeper bots made were basically stuck because the previous transactions had already been evicted. This completely prevented a lot of these keeper bots from participating in the auction, which allowed a lot of these zero bid transactions by these malicious actors to win because nobody can compete against them. And we saw, by analyzing the data, we saw that this pattern was basically repeated probabilistically throughout the day, resulting in that $8 million loss. That was just one example of the kind of analysis you can do with Mempool data.
00:36:35.190 - 00:38:00.396, Speaker B: Using Mempool archive data, you can also better understand things like additional hacks and exploits. There's censorship, mev, private order flow, gas wars. You can even model behavior of planned future network upgrades by using real world mempool data at scale. Okay, so now that we've learned the basics, how exactly do we master the Mempool? So like I mentioned before, block native actually offers some really great resources, really great solutions to help users at every step of the transaction lifecycle. Today specifically, we'll be focusing on our transaction monitor and how we can use that to become Mempool masters. Okay, so our transaction monitor does come with both an API and SDK, as well as a visual interface called Mempool Explorer. The visual interface, Mempool Explorer is what we're going to be working through today just to get you all a little more familiar with Mempool data this time.
00:38:00.396 - 00:38:53.654, Speaker B: Our Mempool Explorer does only show real time data feeds, so if you're a researcher, it's definitely a great way to get your feet wet and understanding what mempool data looks like and how it works. If you're a DAP or a trader, it's a great way to monitor your transactions or your users transactions, or you always know what's going to happen and your transactions don't get stuck. Okay? So if any of you are following along live, you can go to explore dot blocknative.com. if not, you can just watch this, rewatch this, and do it in your own time. So let's get hands on. I'm going to rattle through this pretty quickly for the sake of time because we are almost out of it, but I'll be sure to. This deck will be shared with all of you guys.
00:38:53.654 - 00:40:31.400, Speaker B: This video is recorded, so no worries. All right, so when you go to explore dot blocknative.com, you're going to have the option to log in or sign up. If you don't have an account, it's super easy, and it's completely free, so no worries there. And the first thing I'm going to walk you through is how to monitor addresses and smart contracts. Okay, sorry about that, my computer froze up. Okay, so for traders, you might be interested in monitoring your own hot wallet, right? Either for instant transaction updates when you're transacting in the ecosystem, or maybe you need to send those trades somewhere to maybe a slack or discord or somewhere to update others.
00:40:31.400 - 00:41:36.474, Speaker B: One way you can easily watch your own wallet is by adding your address to that subscription feed right up there. We do support ENS domains, or if you look at the box on the bottom right, you can just connect your wallet directly through our system. And then that's when you would just select your wallet and choose any relevant accounts that you want to monitor. For the purposes of this class in particular, I'm going to walk you through how to monitor one of the simpler smart contracts. So to do this, you're just going to click on the subscription field highlighted here and a bunch of quick start suggestions are going to pop up. We can go ahead and click on tethere and then just like that, wham. We'll have a feed of all new transaction tethered transactions, specifically pending or confirmed.
00:41:36.474 - 00:42:43.744, Speaker B: So it's quite a lot of information, there's a lot of noise that you might not care about. Right. So what do we do? Well, we offer some really cool advanced filtering tools so you only see the information you need. So going back to our example, we can see the little filter button on the right, right there. Just click it and select what you want to see. So in this example, I'm going to filter by contract, call decimal value greater than 500 and that should update my feed and only show me USDT transactions with USDT contract transactions over $500. And if we do that, you'll probably notice it's still pretty noisy because there's going to be a lot of USDT transactions over 500.
00:42:43.744 - 00:43:44.210, Speaker B: So to clean it up a bit further, let's only filter the information that you want to see. A lot of this JSON payload you probably don't need to see from here you have a ton of different possibilities. To get there, you're just going to click the select feature. So under subscription selects, just click select and you'll see all the possibilities. And from for this case, I think I'm going to select the from the to timestamp and contract called decimal fields. See if it shows right here. Yep.
00:43:44.210 - 00:44:36.450, Speaker B: So from to time step contract called decimal field and status. And as you can see after you do this, apply this filter. My feed is a lot cleaner, right? It's only going to show the information that I really want to see. And all of this is customizable to your own preference for whatever fits your current needs. Then, if everything looks good, you can always save your configuration, and that's going to give you a whole host of new and exciting features actually, by saving those configurations. So that's going to be this button, it's plugging in, but there's a save button at the bottom right of that'll open up this. So you'll create a new API key.
00:44:36.450 - 00:45:20.626, Speaker B: You can name it whatever you want. I named this one USDT over 500, and then you'll just click generate new key and save. Now, you do need an account to do this, but like I said, accounts are completely free, so you can always just create a free account. So here you'll see. If I go to my settings, you can see the new API key for USD over 500. And what's really great about this now is I can do a lot of composability via webhooks. So Slack, for example, is a super popular one.
00:45:20.626 - 00:46:29.380, Speaker B: It's fairly user friendly, albeit slightly complicated to set up and it's newer iteration. But once you create your Slack app, there's this convenient ad webhook button. So you're just going to add whatever URL that pops up into your ad webhook. So when we click on add webhook, you can input your Slack webhook and then it will automatically feed into your Slack channel. Boom. So because the, this is really great, right? Because Mempool Explorer currently, like I said, is only a live feed of the mempool. So if you're looking to monitor in real time and collect and save data for any kind of research purposes, this is one way to start collecting a lot of that data and monitoring any of those smart contracts that you're interested in observing.
00:46:29.380 - 00:47:11.870, Speaker B: Likewise, we do have that archive data, so if you're interested in accessing any of our archive data, you can just ping me. I have all of my information at the end of this slide. Oh yes. I'd also like to point out that you can export your subscription as a JSON for whatever project you might be building. So you don't necessarily have to do webhooks. You can do a lot more with it. You can do that from the settings page, or you can export the configuration right in the default Mempool Explorer page.
00:47:11.870 - 00:47:57.366, Speaker B: Final thing I'd like to point out is custom. ABI is for smart contract monitoring, so we do auto decode for most of the top smart contracts. So we already have abis added to those. This gives you a lot more ability to filter out deeper into the contract data. We didn't really need to use an ABI for anything we did because the tether contract is pretty simple with its functions. But if you're trying to analyze any more complicated smart contracts, you can easily upload their Abi's into here so you can start decoding it. You can usually find the Abi's on either scan.
00:47:57.366 - 00:48:36.802, Speaker B: If you look at the smart contract, a lot of smart contracts will post their abis. All you need to do is save that Abi as a JSON, and then you can upload it to the mempool Explorer by clicking this Aba button that I have highlighted. And then lastly, like I already said, for historical mempool data. If you're interested in playing around with that, just let me know. My contact information is right here. So Acberrigan on Telegram. And then if you join our discord, you can do it with this QR code right here.
00:48:36.802 - 00:48:57.090, Speaker B: Join mental masterclass and I respond to all questions in there. And that's all I have for you. Thank you, everybody, for attending. I don't see any questions in the chat, but if you think of any, let me know. I'll be on discord.
00:48:59.110 - 00:49:30.620, Speaker A: Thank you so much, Leo, for your excellent presentation. I think everyone learned a lot today, and we will be sharing the presentation as well later in the education chat in metrics Dao Discord server. So you will be able to look back at it and. Yeah. Thank you very much, everyone, for attending. And Julio, are there any last words I'd like to mention before we finished?
00:49:31.990 - 00:49:43.490, Speaker B: No. I hope you all had a great time. I can't see who's actually here, but I hope you all stayed. Thank you, everybody.
00:49:44.750 - 00:49:48.718, Speaker A: Thank you, Julio. And I just see that there is one question in the chat.
00:49:48.774 - 00:49:49.610, Speaker B: Oh, I see.
00:49:50.990 - 00:49:55.010, Speaker A: Yeah. Don't see a mobile master native discord.
00:49:55.430 - 00:50:18.070, Speaker B: No, it should be created. Brian, if you want to send me a message, either on Twitter, my Twitter account is Jules, or if I go back, JC Berrigan was my telegram handle. I can make sure that you're at it. Let me see, can I. Am I allowed to write messages on here?
00:50:18.770 - 00:50:23.590, Speaker A: You can write me a message in the private chat, and then I can send it over to YouTube.
00:50:25.010 - 00:51:00.638, Speaker B: Okay, here we go. Text message. Perfect. This is Jules on yeah, at this isjewels on Twitter and acberrigan on telegram. Just let me know, Brian, and I'll. Oh, and Laurence has already beat me to it. Yeah, try the link that Laurence sent.
00:51:00.638 - 00:51:14.490, Speaker B: That should work. Okay, thank you, everybody. If you have any questions, please don't hesitate to reach out. I'll also be checking the metric style discord as well if you're hanging out there.
00:51:17.790 - 00:51:30.366, Speaker A: Amazing. Thank you, everyone for attending. Do ensure to check out the education chat for the presentation and we'll see you in future sessions. Bye.
