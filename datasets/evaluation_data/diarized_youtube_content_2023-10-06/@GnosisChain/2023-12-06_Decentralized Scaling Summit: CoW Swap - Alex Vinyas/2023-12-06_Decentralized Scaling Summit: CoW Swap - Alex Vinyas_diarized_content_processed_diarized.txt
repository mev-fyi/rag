00:00:00.330 - 00:00:34.200, Speaker A: Hello. Good morning. So as Dave said, I'm not going to repeat the title because it's very long, but I'm here to talk about how you can bring your dao to the next level. And I'm Alex Vinas. I do product marketing at Cowswap and the talk is breaking down in four topics. It's a little history of how cowswap thinks of its users. Then what are the problems today with DaO or smart contract trading than what we thought originally was the solution, but then what we actually think it's an even better solution because it's kind of the solution as a service.
00:00:34.200 - 00:02:10.578, Speaker A: But first, a bit of history of how cowswap was actually developed to tackle the three main users of Ethereum. Sorry, well, a bit of background first, cowswap is the famous UI for the underlying protocol, which is cow protocol, which cow protocol is a thin batching layer on top of AMM and aggregators, which uses a batch auction mechanism as the price finding mechanism. And this solution actually allows us to execute multiple intents into a single Ethereum transaction instead of treating orders individually. And because of this, cowswap is able, or cow protocol better say, is able to actually offer better prices through cows, because cows are peer to peer trades in which the two counterparties can overlap and therefore you don't need to go to an amm and pay the liquidity pools or even the gas fees of interacting with the smart contracts. Then it also has its own flavor of account abstraction, even though it's not using the famous standard that is now the 4437, the delegated trading model execution. It's in its form another flavor of account abstraction, because the user is actually just signing a message and someone else is executing the transaction on their behalf and the user is completely abstracted from the technology. It also, because we're batching on top of amms and aggregators, allow us to be sort of like the sky scanner of crypto liquidity, because we tap into all the on chain liquidity available and as well as the aggregators.
00:02:10.578 - 00:03:14.826, Speaker A: So in a sense, the worst price that you can get in cowswap is the best price that you can get elsewhere. And additionally we are also specialized in protecting users from MEV because the mechanism in which the batch auction runs, if you have cows, for example, it's a hundred percent protection because instead of having a swap, it just becomes a transfer between users. But in the case that you go on chain, the batch informs a uniform clearing price, which means that it breaks the order dependency of the settlement and therefore there's no incentive to actually try to reorder the transactions within the settlement. And lastly, it completely abstracts any user for the pain of knowing what gas is. And because of this, users are able to pay within the cell token. And because all of this cowswap is very well suited to target three type of users. The first one is retail, right? Because, hey, in general, Defi has achieved a level that is very complex and ethereum as well.
00:03:14.826 - 00:04:35.342, Speaker A: So users are getting more and more wrecked every day. But with cowswap, instead of having the user create their own transaction and be responsible for all this complex of gas and estimations and knowing where the best price is, essentially the user delegates this to a professional party, which are called the solvers, and they are the ones who kind of have to deal with all these problems. And there's no issue with them dealing with this because they're a professional party, that they kind of earn money based on that. The second one is that when you're dealing with smart contract accounts, right, the status quo of trading was that you actually had to commit to a path the moment you were creating the swap. And what this means is that the first time someone of the smart contract wallet signs the transaction, then you're already committing to the specific path. Meaning that unless you're very fast to actually gather all the signatures, most likely by the time that the actual transaction hits the chain, the path is completely going to be outdated and it's not going to be the optimal path anymore. And cowswap, what it does is instead of actually calculating the path at the moment of the first signature creation, it just calculates the path the moment that all the signatures are gathered, so that you can actually rest assured that the optimal path is calculated.
00:04:35.342 - 00:05:53.914, Speaker A: And then for dows, because daos, since they're based on smart contracts, there haven't been an easy way for them to kind of lease these powers because of the same problems of smart contracts, right? There's not an easy way to compromise what is the correct path. And especially if you add governance, then things gets more complicated. And yeah, today the topic is focusing on how cowswap actually enables the Dao renaissance. So what is the problem? Right? If you're a Dao, how does a Dao hit swap on the UI? There's no easy way for a dow to actually go into IUI, or even if it's a smart contract, there is no easy way to actually enforce the transaction that you're going to submit. But this problem is actually broken down from the execution side of things, but also of the technical side of things from the execution, right? If you're a Dao, the four main problems is, the first one is the MEB. As I said, if you're already committing to a transaction, you're committing to a minimum amount out, which means that then everyone else on the chain is actually knowing what your lowest tolerance is for the amount that you're willing to accept. And therefore, if they already know this, they're most likely to exploit it because they know that the transaction will go through as long as they give you that lower bound.
00:05:53.914 - 00:06:52.474, Speaker A: Then the second one is signing the transaction, right? Like if you take time to sign the transaction, by the time that you have committed to an actual path, then probably you know that you're not going to get the best price. And the third is the on chain guarantees, because there's no way for a dow to actually have an updatable limit order. Like the worst case that you can protect yourself is if your dow sets a limit order. But if you actually want to update the limit order, there is no easy way to do this, right? So it would mean that you would have to restart the whole process again if you wanted to update and create a new transaction and a new governance proposal. And then the last point, right, if we use a governance process, then all these problems get actually, like, times tense, get worse. And then we also have the technical issues. Because as you know, cowswap is the first intent based Dex trading, and they allow eoas to use intents.
00:06:52.474 - 00:07:55.122, Speaker A: But for eoas, this is easy because they have a private key, right? And a private key can sign a message saying, I authorize this third party to do something on my behalf. But the issue with smart contracts is that there's no private key. So if there's no private key, how can you actually sign the transaction saying, I authorize someone else doing this on my behalf? And then this means that dowser smart contracts are actually forced to trade on chains via the actual pre signature, where they have to record the details of the order on chain, which is not bad, but it's not the same experience and it's a bit more cumbersome. But when there's a problem, there's a solution. And even though cowswap was already originally available to work with ERC 1271 orders, it wasn't until November of last year that we actually integrated them to the fully open public. And this is why I'm going to talk about the rise of smart orders. Because if you think about it, we have been talking of Ethereum about the programmability that Ethereum offers to be able to program anything and automate anything.
00:07:55.122 - 00:08:33.242, Speaker A: And contracts are smart and everyone is very excited about what they can do. But in essence, we have only really scratched the surface of the programmability. All the actions that the users are facing still require human input, right? I still need to execute the transaction, sign the transaction, or do something. There is not fully like an automated version of interacting with finance. So this is why ERC 1271 is supposed to actually be a rocket for Ethereum finance. And ERC 1271 is basically intense for smart contracts. It's basically allowing smart contracts to sign transactions.
00:08:33.242 - 00:09:47.366, Speaker A: And the difference is that regular orders that you sign with an EOA use the system for ericover. But since smart contracts don't have the private key, you actually need to implement an interactive signature verification which is based on Esvalid signature. And what this does is that it allows someone else to basically place the order on your behalf. And then at the moment of the transaction getting validated on the chain, the smart contract gets asked, are you okay with this order that someone else placed for you? Yes or no? And in the case that the order respects the on chain parameterization that you have done, then it will execute, and if not, it will revert. And this is very interesting because it allows you to actually add these on chain guarantees from the smart contract point of view, that your order will only execute with the certain parameters that you're comfortable with, like for example time, what is the oracle prices? Or only if the balance of the contract is above or below this amount that you have specified. The first use case for ERC 1271 orders that we deploy was the native eflow that we call it. And this is because, as you know, ETH is the native token of Ethereum, but it's not an ERC 20.
00:09:47.366 - 00:11:09.534, Speaker A: So then it becomes quite cumbersome to actually program what the ETH has to do, because the token itself is not a smart contract like an ERC 20 token. So now when you're trying to sell your ETH directly on cowswap instead of using web, basically there is this intermediate contract that place the order on your behalf on the cow protocol order book, and does the whole wrapping and everything for you on the background without you having to notice. Then the second solution was actually like the one that has been so far used by most daos, which was milkman, which was developed in collaboration with Yern and the Cal grants program. And the amazing thing about Milkman is that from the DaO point of view, instead of specifying a minimum out or via your slippage, you actually specify an onchain data source from which the prices can be pulled for. So this way, for example, when you create a Dow proposal, you're saying, hey, I want to sell 10,000 e and I want to get the best price, but I actually want my dow to vote on them. So if you went the regular route, then you would have to compromise what amount you were already getting out from the swap before going through the entire governance proposal, which means that you're completely exposed through MEB. But with Milmac, what you can do is you can say like, okay, I want to swap this 10,000 e, but I only want to get the price from whenever a week in advance.
00:11:09.534 - 00:12:09.862, Speaker A: Chain link oracle or unib three liquidity pool says the price is. So in essence, your slippage is based to an oracle price. And this way you can safely kind of go through the voting instead of having to be worried that your swap is going to be eaten by MEb. And once the time arrives for executing the actual swap, then the milkman bot just picks up the order, places it on the protocol order book on your behalf, and at the moment of settlement, your contract checks. Hey, is the amount that this swap that is being placed on my behalf that I'm getting within the parameter that I did, is it within 1% of the chain link oracle? And if it's yes, then it goes through. And so far, dows like Ave ens and Nexus Mutual have already traded more than 50 million through this and through their respective governance proposals. But there is a problem that single ERC 1271 orders are kind of a little bit of a pain because of these three main pain points.
00:12:09.862 - 00:13:19.610, Speaker A: The first one is you can't really see, but high gas fee cost, deploying everything on chain is quite costly. The second one is that you need to actually have trust on the Milkman intermediary contract because your funds are being deposited in this intermediary contract where they're custody for a very short time just for when you're placing the order, but they're actually custody there and then you have to withdraw them. And then the third one is that you actually have to sign every order every single time. So this, in the case of automation, becomes quite painful because it requires this manual input of someone having to actually sign the transactions. But this is why we develop this new framework called the programmatic coorders. And essentially the programmatic coorders is a conditional smart order framework that allows your smart contract to turn into this autonomous agent and because it's based on its valid signature, basically it allows your smart contract to sign their intent to trade. And the benefit is that the entire order, the structure, is specified on chain, so that you can rest assured that there are no surprises for when the actual order executes.
00:13:19.610 - 00:14:20.666, Speaker A: So what does the programmatic proof? It's a weird acronym, but Puff enable is you can actually automate any order type that you're able to code. You can execute unlimited orders in parallel, which this, in the case, if you're using a save, becomes quite handy because you don't depend anymore on nonsense. So then if the order becomes tradable, then you can just execute it. It doesn't matter if there is a pending nons to be executed. And then it also allows you to achieve gas efficiency, because all the conditional orders are summarized into a single Merkel route, which means that then it's going to cost you the same to actually deploy 10,000 or 100 orders, and the same for updating or deleting them, because you just have to replace the Merkel root of the top of the conditional orders and then that's it. And then, most importantly, is that you're safe or your smart contract all the time owns the asset. There is no trust in this intermediary contract that you have to deposit.
00:14:20.666 - 00:15:56.910, Speaker A: It's simply a direct action from your smart contract. And to go a little bit through the architecture, if we have the safe or the Dow or the smart contract, basically the only part that the developers need to focus is on the order creation, because all the rest of the stuff that you see in this picture is provided by the framework. Because what we wanted to do is enable developers to only focus on what matters, which is the use case that they're trying to unlock with their logic, and not have to know all this back end technology and how protocol works and how the order rule works, et cetera. But if we look at it right, the safe create the orders, and then the contract itself is the one that creates the order and then uploads it to a decentralized storage network. So that then the watchtower, which is similar to the milkman bot, is a bot, is the one that when it's time to execute the order just taps into the network, goes against the contract to see the validation and the signature validation from the contract, and then posts the order on the order book, and from there is the normal flow of the order. And what are the use cases that programmatic order framework enables. So if you're a dow and you have to do like fee or crop collection, for example, you can actually automate the recurring swaps from a monthly or a weekly basis, saying that, hey, once the balance of this contract or my wallet goes above this threshold, just automatically swap this into eth and then provide it back to another contract or to another address.
00:15:56.910 - 00:17:01.540, Speaker A: And you don't have to do anything, simply, you just deploy, let's say the twelve year monthly swaps. You signed all that at the beginning and then automatically the watchtower, when the conditions are met, which in this contract is, hey, when it's above a certain balance, it will pick up the order and put it on the couch up order book. The second one, very similar is if you're trying to pay your contributors, you can actually do payroll in the same way. You upload the entire merco route with twelve conditional orders saying, hey, every month swap these amounts and distribute the proceeds to these users. And then the watchtower, just basically when it's the time at the end of the month or the beginning of the month, will simply just execute the swap and distribute it to the Dow contributors. And in the case that, for example, some of the contributors leave like mid year, then instead of having to cancel or update every single order, you simply have to create a new Merkel route and then upload it. And then the conditions will be picked up already with the new conditionality that you order.
00:17:01.540 - 00:18:18.570, Speaker A: The third one that you can do that is very interesting is, for example, portfolio rebalancing via weight distribution. So say you're in finance, right? And you have five assets in your wallet and you have a distribution of 20% of weight per asset. But because of the prices in us dollars are moving constantly, maybe your portfolio, the weights get rebalanced. So basically you could automate an order saying like, hey, keep the weight distribution exactly 20% for each asset. And as soon as some asset goes up or some asset goes low, actually just create the swap so that each time the weight is constant at 20%, another one you could do is collateral position manager, right? Like for example, what happens if I have a CDP open and I'm right now here talking and suddenly eth crashes? Well, I'm at risk of losing my collateral and I don't want to do that. But if you use the programmatic of their framework, you could create an order that says, hey, at the moment that the EtH price is falling below and my risk factor is actually at risk, just simply swap from the assets I have here and put them directly into the CDP so that I don't get liquidated. And this way I can be very comfortable here talking to you without having to worry of getting liquidated.
00:18:18.570 - 00:19:15.040, Speaker A: You can also do Twap or DCA, which is this is already live in the Kauswi that you can try today. And basically twap just creates good after time orders based on the parameters that you've specified. Right? Hey, I want to enter in this position with this amount and I want you to break the order into five n parts. And basically you also specify at the same time the time between each parts and the Watchtower when it's the good time for executing the order, picks it up and puts it on the order book. And another one that's very interesting is that you could do like private conditional orders, stop loss. So basically you can program this stop loss order. If you run your watchtower, for example, then this is completely private and then no one else in the market knows kind of your strategy and where your numbers lie, right? No one knows what lower bottom price you're trying to sell eth at.
00:19:15.040 - 00:20:32.820, Speaker A: And of course, the one that is very cow swap aligned, you could also specify for wait for cows. And this becomes very interesting because if you're doing stable to stable swaps, you don't really care if you're waiting time because in a sense you're trading one dollars to $1. But because cowswap always gives you surplus, then you're signal to the contract that, hey, I only want to get more surplus because I know that I'm going to get matched via a counterparty, via another person and therefore we're both going to get a better price because we're not going to be paying the LP fees and therefore I'm going to get instead of one dollars 1.1. And this is beneficial because then if you're doing these type of swaps for stable to stable, you're not that much in a rush that you actually have to be forced to hit the AMN. So in conclusion, the sky is the limit because with programmatic order framework, you can turn your smart contracts or your dow into your personal autonomous butler and you can actually place simultaneous conditional orders without any worries of them being dependent on each other for executing. And if you're interested in building or integrating, please reach out. Thank you.
00:20:32.820 - 00:21:32.740, Speaker A: Awesome. I think we have time for a couple of questions, if there are any better. There we go. Currently, who runs the Watchtower? And is there an open source implementation where you can fork or build your own watchtower? So the Cal team runs its own watchtower, but anyone is free to run the watchtower if they want. I think the code is open source, so you can just basically fork it and run the watchtower for yourself. This is interesting if you want to do more private use, Case says, and if you have the knowledge to actually run the infrastructure, it's not very complex, but it still requires a bit of knowledge. But in general, the Cal team is running the Watchtower just for the sake of having these orders executed, because we want to make it easier for people to use this.
