00:00:00.080 - 00:00:09.554, Speaker A: CEO and founder of Novis. You'll be sharing with us about untangling AGI data on account instruction. Thank you so much.
00:00:09.974 - 00:00:38.878, Speaker B: Thank you. All right, thanks for that. Hello, Singapore. Happy to be back at Infracon again. And I'm going to talk about one of my favorite topics, which is ugly data. Let's see if I can find the buttons. I've been talking all day, so my voice is a little bit shy, but I'm going to do my best.
00:00:38.878 - 00:01:29.170, Speaker B: Okay, so let's talk a little bit about the problem that we have. The problem we have is we have lots of data in our uis, lots of data in our applications, but it's not really data that we care about. I've never wondered or very rarely wondered about all the different details of the gas that I spent on a transaction or what I'm about to spend on the transaction. What I really want is something simple. I just want one piece of information that tells me what I actually care about, which is what was this transaction? Or what is this transaction going to be? Likewise, when I'm looking at the history of my transactions, the data that I'm getting from block explorers or from wallets is generally not information that is useful to me when I'm trying to look stuff up. What I actually want is this. I want to know what I did.
00:01:29.170 - 00:02:00.834, Speaker B: Just tell me what I did so that I can get on that Monday. Even worse, we have this. We're making decisions about approving people to do things with our money without having any idea what we are actually approving. We just want people to trust us, and that has often not worked out well for people. Really. This is what we want. We want to know before we do something, what is it that I'm going to do? We just need one simple piece of information, but it's the one piece of information that we don't have.
00:02:00.834 - 00:02:50.662, Speaker B: Okay, so who's Nobez Novaz? We are crazy about blockchain data, and we're serious about making that blockchain data usable because right now the data that we have available to us is generally not useful in the form. And we need to spend a lot of time and energy to get to something we can actually use. So what we do is we translate raw data into meaningful information, some that's categorized and standardized and easy to work with. So we do data day in and day out. Why do we care? We care because we think blockchain is going to change the world. But in its current state, it is difficult, it's ugly, it's unorganized, tough to work with, and it's just a lot of wasted time and energy for people. All right, so let's get back to the problem.
00:02:50.662 - 00:03:25.704, Speaker B: So the problem seems like it shouldn't be that hard, right? So we have events, we can look these things up and we can say, oh, this is the swap. All the data we need about this is right there. So it should be pretty easy to deal with. But in reality, that's only true in the very simplistic cases. Sometimes we have complicated transactions like this one. It's a multi call, and so it's a lot more difficult to determine what happened there because we can't just look into the events that pop out of here. This is what we really want to know, but it's quite difficult to go from that to that.
00:03:25.704 - 00:04:08.956, Speaker B: So why is this a problem? The reason it's a problem is because people keep building new stuff. If we just had the one original thing that people built, we can map it all. We'd be done and we'd be off and running. But people can keep building new things, and that causes problems, especially when we started producing stuff like 4337, which makes everything a whole additional degree more complicated and ugly because we got this and this is a real thing. All right, so let's look at some specific examples. So this is how we approach in our systems, how we approach classifying transactions. First, we need to identify what the function is.
00:04:08.956 - 00:04:32.624, Speaker B: We have that mapped something to tell us what the purpose of this function is. Then we need to decode all the information once we know what it's supposed to be. And then last, we take the data that we found and we map it into the right places in our structure in order to tell what it is. So here we've got a swap transaction, basic swap. This is what we want it to be. We want it to be that. We swap from Cx curve to curve.
00:04:32.624 - 00:05:05.240, Speaker B: We find the function, which is exchange. We have a map somewhere that says anytime there's an exchange, that's a swap. So we've got that part done. Now we go look for the events, we find this thing, and we say, hey, there's an event of this token moving in and out of transaction. And then we're off and running when we run into a multicol that short circuits this entire problem. So now we find the original function. The function is a multicol, which means we don't know what it is.
00:05:05.240 - 00:05:49.966, Speaker B: We can't say that it's a swap or that it's a proof or whatever, because there's multiple steps, we don't know what it is. So now instead of this process, what we need to do is we have to go inside multipole and run this process for each step. So we have to recurse one level down so that we can go find out what each step in the multicol was in order to figure out what the transaction is. So here's another swap, except this one, instead of being exchanged, the function is multicall. So like I mentioned, what we do is we look at each of the steps in the multicol. This one in the middle happens to be exact input, which is a swap function. And when we interpret each of these, we find that we've got three swaps, we put it back together.
00:05:49.966 - 00:06:27.774, Speaker B: Three swaps together is actually just a swap. So then we can pull the data together. Okay, so now to the good stuff. Smart contract wallets. So here we don't have a function that we know what it is, we don't have a multicall, but instead we have handle ops, which is basically the same thing as a multicol. So for this, it looks like this, right? We've got handelops and we've got a whole bunch of data and we can't tell from here what this is. So what we need to do after we've identified that it is an account abstraction transaction, is we need to go dig and find out where the smart contract wallet is that we are interacting with.
00:06:27.774 - 00:07:13.754, Speaker B: So in the data for the handle ops, we can identify the sender, which is the actual address of the account that we're handling here. And then we can see in the call data there. That first bit is the function hash that tells us what we're going to call on the smart contract wallet. Once we've identified the smart contract wallet, we know where we're going. Now we're back to this same problem where we say, okay, let's figure out what the function is and decode the events and find the data so that looks like this. On the smart contract wallet, you can see we're calling exact transaction from endpoint, which basically just tells the smart contract wallet to run this transaction that we want it to run. And there's the function hash and the contract where it's supposed to run that.
00:07:13.754 - 00:07:47.570, Speaker B: And if we decode all that, we can find out that it's in uniswap v three swap. So at the end of the day, that whole stack is just back to a swap. It's in Zobo. So we just need to recurse our way through the steps to get to this. Now, of course, that doesn't end there, because sometimes our smart contract wallet is actually going to take a batch. So instead of just saying, go run this transaction, it's actually going to take a group of things that we're supposed to run. So in that case, for each item in the batch, we need to execute these same steps.
00:07:47.570 - 00:08:47.686, Speaker B: So that looks something like this. Instead of calling the smart contract wallet to execute a single thing, we actually call the smart contract wallet and say, execute all of these steps. And you can see in the inputs there, you can see the inputs there that they're all running on the same contract. And it's going to run those functions against sometimes. Sometimes the function that our smart contract wallet is going to run is actually a multivariate, which means even once we've identified the wallet and we've identified what the wallet is going to run, we still have no idea what it is because it's just multicolored. That doesn't answer anything for us. So now we have to recurse one level deeper, and for each call we have to figure out what the function is.
00:08:47.686 - 00:09:41.630, Speaker B: And if it's a multicol, then for each of those we have to go down, find the contract, find the function, decode all the units, and roll back up from there. And this is actually a little bit of a simplification because in fact, often between the smart contract wallet and the function, there's actually a proxy there. So you have to decode through the proxy to find the actual contract that we're calling. And oftentimes there'd be another proxy in between as well. So this is how we're approaching decoding smart contract transactions. So we've actually automated this process, of course, because this is what we do, this is our business. So for a transaction like this one, which is a smart contract transaction on Arcturm, looks like this, there's a handle ops and all the usual call data in there.
00:09:41.630 - 00:10:22.018, Speaker B: When we process this transaction, we would come back with, it's a swap. We produce a nice little description like that, and we break down the transfers into the cent receipt that were actually vacated out of that wallet. We handle all kinds of different types. So, like, for total group, looks something like this, again with a nice description. Unstakes work the same way, where you can see in the background there how many things that were going on in that process. And we just eliminate all that stuff because it's not part of the relevant transaction for this wallet. Also, I just wanted to do a quick plug.
00:10:22.018 - 00:11:04.494, Speaker B: We recently launched linia for humans. You can see the URL up there. It's just a quick our take, I guess, on what we think people actually want out of a block explorer. So instead of presenting you with a whole bunch of data that you don't care about and probably don't need for anything, we just provide a very simple, simple experience that has most of the data stripped out that shows you just the exact text descriptions of what each transaction was. If you guys would like to talk about data, we're always up for it, so feel free to stop. Bye.
