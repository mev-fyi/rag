00:00:00.360 - 00:01:02.094, Speaker A: I'm the head of growth for essential, and I am going to talk to you today about not getting cucked by on chain complications and what exactly that means. So what is essential? So what we do at essential is we build intent specific tooling and infrastructure. So that means working on a wide variety of different products, different ideas, concepts, to make intents more accessible by both application developers and subsequently, users. So a few of the things we're working on, we have yurt, which is our domain specific language that's designed with solvers in mock. So ultimately, like Yerk, will make it easier for solvers to be able to pick up intents, execute them on behalf of users. It's a fully EVM compatible language. This is not something that you would necessarily write a smart contract in, but you use it as a smart.
00:01:02.094 - 00:01:44.634, Speaker A: We have ERC 7521, which is an intent execution standard that we've introduced, which is designed to bring more composability and interoperability to the intense ecosystem on theory. So ERC 7521 is currently, currently live and merged. You can go and play with it if you want, just go to ERC 7521 dot to check it out. It's also a fully community owned standard, so anyone who wants to contribute to it, add to it, share their thoughts, please let us know. We're happy to chat with you on that. Yeah, we're also working on a modular, intent based execution layer. And so this environment would be just for intents.
00:01:44.634 - 00:01:52.444, Speaker A: And so within this, like, solvers will be able to work more efficiently, aggregate more transactions, achieve, like, better order flow.
00:01:53.264 - 00:02:03.400, Speaker B: Yeah. Okay.
00:02:03.472 - 00:02:09.844, Speaker A: And so I guess, like, actually, everyone here probably already knows what intents are. If you don't know what intents are, raise your hand.
00:02:10.724 - 00:02:12.344, Speaker B: Sick. I'm gonna skip this.
00:02:16.004 - 00:03:07.032, Speaker A: So gonna talk a little bit about specificity of execution versus specificity of outcome, and kind of where we want to sort of push users to go. So ultimately, what happens in the current environment is you have to be very specific with what you want to do. One chain, you have to say, like, if you're going to uniswap cowswap, or any environment where you're trying to achieve an on chain action and to achieve a specific end state, you need to specify all of the potential variables that you want to achieve. So let's say you want to swap token a for b. So you have to swap a for b. You have to set the slippage, you have to set the time, you have to decide what app to use, unless you're using, like, an aggregator or something, but then you need to be aware of what an aggregator is. You need to decide which aggregator you're going to use.
00:03:07.032 - 00:04:00.380, Speaker A: It basically puts a large burden on the user to figure out exactly what they want to do. And the opposite of that would be going with specificity of outcome, which would be I want to swap a for b. Now ultimately what ends up happening is the more specific you are with execution, the more burden you put on solvers to fulfill. So if you're specifying like all these different variables, the solver has to then go and say, okay, I need to do all of these things, I need to fulfill all of these. And that reduces the likelihood that the solver will efficiently and within a reasonable amount of time be able to fulfill that intent for you, which is not good. Ux on the flip side of that though, if you just say I want to swap a for b, then the solver is just like fuck it, we're done here, take your, take your tokens. And that leaves a lot of things to change, such as like the place of swapping, slippage, all kinds of stuff.
00:04:00.380 - 00:04:48.244, Speaker A: So where you really want to be, is this a laser pointer? It is is you want to be where this guy is right in the middle here. You want to find, you want to be just specific enough around how you want it to execute with the, just specific enough with what you want your outcome to be. And that area is where a solver is most efficiently able to feed, figure out what you want and get it to you. So like, let's use ordering a burger. For example, if you just go to McDonald's and say, I want a burger, then they have to ask you all these questions like do you want lettuce on your burger? Do you want tomatoes? Like whatever. Whereas if you go to them and say I want a cheeseburger, then they have to ask you less questions, they have to get less information from you on what you actually want to do. So that's like the best area to be in.
00:04:48.244 - 00:05:18.614, Speaker A: And so let's talk about what getting cucked on chain looks like. So Bob wants to fulfill an order, right? He wants to buy 100 ETH on uniswap. And now Bob is going to get cut because he has to figure out all of these different variables. He has to figure out the slippage minimum take that. He's going to get lp fees and all these different preferences that he has to set add up and leads to a more negative outcome for Bob. And he is not happy about this. He's an unhappy character.
00:05:18.614 - 00:05:44.390, Speaker A: But what does not getting cupped looks like, look like Bob wants to fill an order by 100 ETH. And Bob submits an intent to a solver that gives like a few variables to add on to that. Maybe he says, like, I want it done. Maybe I'm willing to accept like 0.5 to, to, or 0.5 or so percent slippage or something like that. The solver goes, oh, okay, I can do that for you.
00:05:44.390 - 00:06:15.434, Speaker A: And now Bob's a happy guy. He's chilling, he's just hanging out. And the solver will also get him the best price, because it will go, instead of just going to a single application, like a single Dex, it can look at a very wide range of different sources of liquidity, different dexs, and find him the best price for what he's trying to do. So this also can be more than swaps. So these are some more examples of getting cut down chain. So you're looking for the best place to stake your ETH. Maybe you want to go Lido or something like that.
00:06:15.434 - 00:07:04.294, Speaker A: But if you're an unsophisticated user who maybe has joined crypto in the last year or so, or is just getting started now, you need to know one, what staking is in a complex form. You need to understand, like, what all of the different avenues for staking are. You need to know how trustworthy all of those are, and you need to go do a bunch of research on your own. And I think one of the major issues we have with, like, with our industry, for lack for, to put it bluntly, is that we all, to some degree, are sophisticated users, and we have a strong idea of what all these applications are, what all of these ideas are, what these, these concepts and mechanisms can do. And so we can just go and do this. Like, if I wanted to go state, eat somewhere, I would go, okay, I'm going to go lido, or lido or whatever they're calling it. I feel like they change it every week.
00:07:04.294 - 00:07:39.740, Speaker A: And that doesn't lead to good outcomes for new users. So really what you want is for that user to say, you give them specific parameters, the solvers I need, and I'll show that in the next slide. So let's say you want to take a loan on your ethanol, which means, you know, obviously you can hedge, you take out like an 80% cr loan or something. But then you as a user, need to be aware of, okay, what is Cr, what's my liquidation point? Like, how am I going to get cuffed on chain? And you need to be aware of all of these different places to take out loans, figure out which one works for you and everything like that.
00:07:39.852 - 00:07:41.024, Speaker B: It's not good ux.
00:07:41.684 - 00:08:17.008, Speaker A: And then maybe you're just trying to swap shit coins because, you know, it's, it's that time of the market. And so you're looking at Dex tools, you know, all these different places, you have no idea where you're gonna get the best rate. That's slippage, whatever. You're gonna get cucked. You're just gonna get cucked. So what you should really do is be specific with how you want to submit this intent. So instead of just saying, I want to take out a loan or stake ETH, you want to say, I want to stake ETH in the highest yield environment that I can reasonably get, let's say 20%, and then potentially add an unstaking variable as well.
00:08:17.008 - 00:09:23.764, Speaker A: You say, okay, I'm going to unstake my ETH, or I want my ETH to be unstaked when it hits a certain threshold. And that will give the solver a much better idea because they'll be able to look at all the contextual state around all these different apps that stake your ETH for you and find you one and execute that on your behalf. The same thing could be done for loans. If you were to go to alchemics or something, and you hear about this idea of self repaying loans, and you're like, oh, that's pretty nifty. I like that you could specify an intent and put that out there to the network and say, I want to take out a self repaying loan that will pay itself off within x time. And now time is a very complex concept with intents, because then you start to deal with a bunch more variables, such as, is that time a fixed time, or is that going to change based on the APR I'm getting? Is the APR going to shift so you can still get cucked, but you're less likely to get cucked a little bit. And then maybe you just want to swap your ETH for a low cap gem that your friend sent you and that you didn't get last night because you were really tired and decided not to swap for it.
00:09:23.764 - 00:10:25.482, Speaker A: You could do that. And so where do you go as an application? And why would an application want to implement intents for their users? This is really small. So ultimately, if you provide intents as an application, you enable interfaces that allow users to put out specific actions that they want to be fulfilled without requiring them to actually necessarily take those actions themselves and follow the routes of those actions, there's just no more sub optimal execution. Like, your users are more easily able to interact with applications because it's a simpler, it's a simpler interface for them. It abstracts away transaction construction, which would be stuff like having the user to manually set, like slippage fees, all kinds of this other stuff. And then also with that, transactions can be aggregated in a more simple way, which improves order flow. And order flow is more efficient than users are just going to have.
00:10:25.482 - 00:11:05.514, Speaker A: They're going to be fulfilled and satisfied more often. The solver network handles that order flow for you. So an attempt only solver can work much more efficiently. And if we have, as we were sort of discussing on this previous panel, like a solver network that also has dedicated solvers for specific, maybe like edge cases, like doing loans or something like that, then, you know, you can ensure that even if you are a Dex, you can still provide that option to a user. If you're a wallet, you can provide that option to a user. You, as an application, can just do significantly more actions within your application, which allows you to gain more users, which everyone wants. So we all want more users.
00:11:06.174 - 00:11:06.550, Speaker B: Yeah.
00:11:06.582 - 00:11:14.194, Speaker A: So you can just do more complex in app interactions. And so it's short and sweet. Thank you very much. Any questions?
00:11:15.394 - 00:11:15.874, Speaker B: Sick.
00:11:15.954 - 00:11:16.854, Speaker A: Oh, cool.
00:11:18.394 - 00:11:28.506, Speaker C: Could you talk more about the intent based execution layer? Where do you see that fitting in? Is that like a competitor that flashbots mempools or what's the idea behind that?
00:11:28.530 - 00:12:04.468, Speaker A: Yeah, so it is similar to having, like, a dedicated mempool, but one of the ideas is that we have this intent execution standard, like ERC 7521, that's being used across, like, a lot of memory of applications. And if many applications are using ERC 7521, then ultimately you can get significantly more efficient workflow and better access to intents and users in that. So when you're able to aggregate, like, a wider number of these intents, it's just, it leads to a better outcome for both the users and the applications, because more people can get more of.
00:12:04.476 - 00:12:09.352, Speaker C: A marketplace, they can't just filter for those transactions in a bigger manual.
00:12:09.528 - 00:12:36.068, Speaker A: They could, but I mean, well, if you think about it, in that different applications have different ways of getting their intents settled. So if one inch fusion has the one inch fusion solver set and Cal swap has the Cal swap solver set, they're all using essentially different software. So this way of aggregating them all into a single place leads to more efficiency, I guess.
00:12:36.196 - 00:12:36.904, Speaker B: Yeah.
00:12:39.204 - 00:12:41.396, Speaker D: What's the current level of complexity of.
00:12:41.420 - 00:13:34.964, Speaker A: Intents that you can emit as a signal. Like, how granular can you go? I mean, you can get as complex as you want. You could say, I want to swap a for b at this specific time with this specific slippage on this specific marketplace. But I think the idea is that with intents, you don't necessarily want to be hyper granular with how you're approaching them. Because if you're getting that granular, then it's likely you're already, you would already know how to execute that on your own. And so then you're adding like a fee on top of that to use the network and take advantage of the solvers. So, like you, if we were to use UDP three or something where you could set limit order or something like that, which would be an example of a complex intent, then it's more likely you just execute that on your own.
00:13:34.964 - 00:14:09.464, Speaker A: But you could, as a user, just say, maybe you just want to set and forget something and you just throw it out there. And you say, I really want to buy $1,000 worth of ethnic, when ATC hits like 0.5 or something like that. And you could just set that up there and wait. It would just hang out in that mempool and chill until a solver is like, okay, I can get this now. And maybe depending on the time that the intent has been in there, there could be a larger incentive for a solver to pick it up over time.
00:14:14.144 - 00:14:35.168, Speaker D: Any other questions with the staking example in particular? Right. It kind of seems like that's assuming that any staking service is a commodity, right? To be able to take between them or have some objective way of comparing when the trustworthiness and the assumptions that the thing you're staking it makes might be radically different.
00:14:35.296 - 00:14:43.792, Speaker A: Right. That's fair. Yeah. Yeah. I mean, potentially you could, a solver could look that say, like, oh, you want to stake and get like 1000% apR.
00:14:43.888 - 00:14:45.992, Speaker D: Like, sure, here is straight into Wonderland.
00:14:46.088 - 00:15:15.904, Speaker A: Yeah, yeah, let's go, maybe. No, that's totally, that's totally right. And so I think there is, to some degree, a burden on the user to be aware of the action they're taking. So, and that's ultimately up to, like, applications. And I think the industry as a whole to be responsible for what, like a quote unquote trustworthy application. But we also don't want to, this is also just an example. We're not trying to direct people into crazy staking pools.
00:15:16.484 - 00:15:17.624, Speaker B: Ha ha. Unless.
00:15:21.124 - 00:16:21.534, Speaker A: But yeah, there should be a burden on the user for them to be aware of what they're doing. We never want them to just throw it out there. And to a degree, there is a burden on the soul. If the solver takes an action and like very quickly solves an intent that throws it in a unverified brand new project that's offering crazy rewards, then I mean, maybe there could be some type of slashing mechanism if a solver continually throws stuff away. But it's still an area of research that we're figuring out exactly what a trustworthy versus untrustworthy action would look like. And also we would want to restrict users from taking certain actions or something like that, or if an application wants to. Because technically there could be an application that is set up and has some type of setup of hooks that says any intent that goes through here needs to be qualified by a white listed series of applications.
00:16:21.534 - 00:16:53.434, Speaker A: In theory, you could say if you use blockchainapp.com, then if you can submit an intent and it goes, will like you say what you want to do, and our network of applications and like the solvers that we're sharing will fulfill that for you. And so that could be construed as like a safe environment, whereas there could be like a Wonderland oriented type deal which is just like, let's find all the crazy projects and say, you want to get in on these, like tell us what you want to do and we'll figure it out for you.
00:16:53.594 - 00:16:57.306, Speaker D: There'd be like a safe solver pool and then like a Djen solver pool.
00:16:57.370 - 00:17:04.974, Speaker A: Yeah, I mean, yeah, potentially there could be some type of setup like that. Any other questions?
00:17:05.514 - 00:17:16.934, Speaker D: Just curious. I know it's still an area of research, but in terms of, I guess incentive systems alignment for slower and if you see any discrepancies or like immediate issues that these neuron companies.
00:17:17.114 - 00:18:37.844, Speaker A: So I think one of the things that actually was brought up on the previous panel is that for many applications who are trying to incentivize solvers to work on their application, specifically there's like with one inch fusion, for example, they require like a million dollars in a view to buy one inch tokens, which then puts you in a vulnerable position. And also with the fragmented solver network, solver networks we have now, where there's like a wide range of solvers reporting on different applications. Like those solvers were basically having to bet on which applications they think are going to do well. And they also then want like to achieve sufficient order flow through those applications to make sure that there actually is like a reward enough for them. I think Connor was saying that many solvers don't actually like, they are not profitable right now as a result of either, like low volume, low fees. So one of the things that potentially 7521 aims to accomplish is if we have this like generalized standard for intents and also a match, then we can sort of aggregate incentives across like a large number of applications and that can be more evenly distributed. So you can like sort of combine all the orders across these different apps and go for that.
00:18:37.844 - 00:19:58.146, Speaker A: How far away are we from adding like real world assets in Oracle and making a deal rather than just swapping financial assets? Interesting question. I don't want to give like a specific time horizon because I think that's it's dependent on how real world assets will perceive the idea of intents because, like, to a degree, it's like our responsibility to ensure that we're like, make them want to join this ecosystem. So I would hope to see things start to happen within a year where RWA, like applications maybe like ticketing stuff or whatever. I mean, obviously, like the focus right now is on like purely financial applications because it's like the most obvious use case. But as like that starts to fill out, we start to get a wider number of apps. Like if it's like staking, lending, like all kinds of stuff, pick up the idea of intent and implement them, then I think, you know, Rwas deepin stuff will be seen to follow. And actually, I think like, d pain could be an interesting example because if you say like, oh, maybe there's like a, what's that? Really cool.
00:19:58.146 - 00:20:17.494, Speaker A: Not healing. There's another very chirp. It's like a deep end, like cellular thing. So it's a totally decentralized cellular network. You could say like, I'm going to Turkey and I want to ensure that. I want what? Hive map. I haven't heard of that one.
00:20:17.494 - 00:20:55.048, Speaker A: Wait, I want to tell me about it after. I'm curious. Deep in stuff is cool, but you can request like specific like, data from that network. And if you have like these like decentralized, where you could even request like priority data from like hotspots in the area you're going to, and you could just say like, I'm going to be traveling from a to b and I want to ensure that my phone works. Can you can solve everything that happen in a solver could then, like on the back, like specialized solver because it would have to be, could make that happen for you. So I think there's like a ton of, a ton of ways to sort of just like abstract away. Like, I don't say, like, human to human interaction to achieve intense.
00:20:55.048 - 00:21:21.190, Speaker A: But the more we see projects and individuals kind of just, like, take advantage of being able to use a software network to be able to just, like, explain, express their desire and then have it fulfilled, look to their, to the maximum satisfaction. Any last questions? No? Okay.
00:21:21.222 - 00:21:21.454, Speaker B: Sick.
00:21:21.494 - 00:21:22.734, Speaker A: I hope none of you get cuffed on chain.
