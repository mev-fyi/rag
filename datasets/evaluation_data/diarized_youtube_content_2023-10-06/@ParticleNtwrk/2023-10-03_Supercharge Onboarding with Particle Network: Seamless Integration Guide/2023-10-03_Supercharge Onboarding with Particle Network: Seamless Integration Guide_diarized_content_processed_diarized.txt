00:00:00.200 - 00:00:53.988, Speaker A: In just a few minutes, let's supercharge user experience by learning how to integrate particle network. It really only takes a few minutes to integrate particle network, regardless of if you're using Rainbowkit, particle connect, web3 modal, Solana's wallet adapter, etcetera. And in doing so we can unlock a next level of onboarding accessibility through login and wallet creation facilitated by web two social account like your email, Google, Twitter, etcetera. And then all of this is packaged into a wallet that's embedded within the application and is totally modular and customizable, which means you can integrate it in whatever way that meets your specific use case. If you'd like to learn more about this, I'll have the introduction to particle network video linked below, although for now, in just a few minutes we'll be going through three examples of integration, the first of which will be adding particle network to a pre existing application that's using Rainbowkit. The second will be similar, but adding particle network to a pre existing application, leveraging Solana's wallet adapter and then to end it off, we'll quickly make this demo application from scratch that leverages particle connect. So let's jump right into it.
00:00:53.988 - 00:01:23.420, Speaker A: So for this first example, I want to go through integrating particle into a pre existing application currently leveraging Rainbow kit. As you can see, I've already set up a very simple demo app. We have a standard rainbow kit set up here with things like Rainbow Metamask, Coinbase, Argent, trust wallet, etcetera. As we can see here, if we go ahead and click on Connect wallet, we have the super standard UI. Like I mentioned, Rainbow Metamask, etcetera all available right here. In this case, we're going to add four different connection points to this list. We'll add a shortcut to Google, we'll add a shortcut to Facebook, Apple, as well as a general particle option.
00:01:23.420 - 00:01:57.998, Speaker A: So to start, we'll need to import two libraries from particle. We can go ahead and stop the application and let's start by importing particle network, which is sort of the master object that in this case we'll use primarily for configuration. So we do import particle network from particle Dash network auth. This component comes directly from our particle Auth SDK. We'll also need an object from our rainbowkit extension to add to the list of wallets here. This will just simply be particle wallet, and that will come directly from particle dash network slash rainbowkit extension. Okay, so now with these two base libraries from particle imported, we can now move on to defining our master particle object.
00:01:57.998 - 00:02:23.542, Speaker A: In this case, this will be used, like I mentioned, primarily for configuration. We can do this at the very top of our page rainbow kit definition, and we go and create a variable called particle and set that equal to usememo. And we can do return new particle network, which is of course the object that we just imported. And then in here we'll need to set a few of our configurations. But before we get to this, we'll need to quickly head over to the particle dashboard and create a project so that we can fill in some of the parameters here. Let's go ahead and create a new project. I'll name this video.
00:02:23.542 - 00:02:45.246, Speaker A: And here, as you can see, we have our project id and our client key. These will be two of the three parameters that we'll be filling out within the particle network definition. For the third parameter, we'll need to head down here and create an app. In my case, this will be a web app. And I'll also go ahead and throw in the domain of the web app itself. I can now copy our project id, our client key, as well as the app id, and then I'll go ahead and throw them all into environment variables. Okay, so with those now defined, we can go and fill out project id.
00:02:45.246 - 00:03:10.198, Speaker A: This will just be process env and in my case react app project id. Let's also go ahead and set the default chain. This will be Ethereum with a chain id of one. Additionally, I can open up the wallet parameter. This will allow us to do some initial configurations. In this case, I'll just do one configuration which is display wallet entry, and I'll set that to true. Okay, so now we've defined our particle object.
00:03:10.198 - 00:03:36.260, Speaker A: We've created a project on the particle dashboard, build out all of the base configuration parameters and done some preemptive configuration on the wallet side. Let's move on to actually adding this to our application. In this case, like I mentioned, we're going to throw four different options for particle into the list here. It's as simple as just throwing the particle wallet object that we imported previously directly into this list. So let's start with Google. We can do particle wallet, then chains and auth type Google. We can also do one for Facebook, and we can also do Apple.
00:03:36.260 - 00:04:00.522, Speaker A: Finally, we can just do a general particle option that will open up the overall particle auth menu. In this case, it'll be just as simple as adding in chains and leaving it at that. And then to close it off, we can just throw the particle object right here. Let's now just go ahead and run it and see if it works. Okay, so now you see we have the normal connect wallet menu that we looked at earlier. And as you can see now we have four new authentication mechanisms we can click on Google, and I've signed with my Google account here. Let's move on to doing a similar thing, but with Solana's wallet adapter.
00:04:00.522 - 00:04:32.738, Speaker A: Okay, so now for the second example, I want to very briefly just go through direct integration of particle network within the Solana Wallet adapter. There's a lot of extra functionality that we can introduce here, but I'm going to save the more complicated things for the video that I'm going to be publishing next week. For now, let's just go through a very basic example of getting bare bones particle auth functionality within your Solana application. Leveraging the Solana wallet adapter. As you can see here, I have a pre built application. This is just a generic react demo for the Solana wallet adapter. As you can see from here right now, all I have is the unsaved burner wallet adapter, which is the testing developer wallet adapter from this package.
00:04:32.738 - 00:05:01.034, Speaker A: Solana wallet adapter wallets alongside unsafe burner wallet adapter. We can just very simply import particle adapter and then in here in our wallet list, right under unsafe burner wallet adapter, we can throw in new particle adapter and add that into the list. Within this object you have the ability to introduce configurations like linking it to the particle dashboard for example, like we did within the first piece of code, but it's not required. You can actually get started just with this object alone. So let's just go ahead and click run and see if it works. And as you can see, it is running. We have the select wallet button here.
00:05:01.034 - 00:05:17.114, Speaker A: Let's go and click it. And as you can see we have two options. This is the unsafe burner wallet adapter from here, and we also have particle. We can click on particle and the particle Auth window shows up natively. So I'll go ahead and sign in with my email, click on send code and I'll throw the code into here. Now my wallet is connected and I'm signed in with particle. It really only takes 30 seconds.
00:05:17.114 - 00:05:45.738, Speaker A: Basically one import to integrate particle into a Solana wallet adapter application. And we're introducing full social login functionality. Although keep an eye out for the video next week, which I dive into a far more detailed example of particle integration within a Solana application. So within this final example here, I want to take some time to create a sample application. I showcased it briefly earlier in the introduction. It will essentially leverage particle connect, create a standard connect UI, leveraging a few different wallet providers, with particle included of course, as well as a few functions to test the wallets themselves. First we'll need to import the different chains that we want to support.
00:05:45.738 - 00:06:26.598, Speaker A: In this case, we can do Ethereum Ethereum go early theorem Sepolia as well as Solana and Solana Devnet and we can import this from apparticle network slash chain. We'll also need to import a few modules from particle connect. In this case, we'll need EVM wallets. This will be a collection of existing EVM wallet providers. We can also import is EVM provider as well as Solana wallets, which primarily in this case just includes Phantom, and we can import that from particle network connect. Additionally, we can import a few components from our connect React UI SDK Connect button, the modal provider use account, use network, use particle connect, use particle provider and use particle theme. And then this will all come from apparticle network slash connect React UI.
00:06:26.598 - 00:07:02.670, Speaker A: We can also go ahead and import our CSS just from slash app. We can also go ahead and import the CSS for the React UI components just and then index CSS. We can also go ahead and import button space and notification and d and then we can do use effect from react and finally we can import web3 from web3. Okay, so now with all of our base libraries imported, we can go ahead and start building out the page itself. Let's do this in a variable called page connect kit. In this case we can throw everything into a return statement and open this with modal provider. This is of course what we imported up here.
00:07:02.670 - 00:07:30.196, Speaker A: And we can start by deciding what web two platforms we want to be available through this UI when it comes to social login. So we can do this within a parameter called particle auth sort and we can just open up a list here. We can do email, phone, Google, Apple, Twitter, Facebook, Microsoft, LinkedIn, GitHub, Twitch and Discord. All this will be listed directly within the UI and it'll be listed within this order. You can also set our main configuration parameter. This will be options and do project id. We can define the different chains that we imported above.
00:07:30.196 - 00:08:01.418, Speaker A: We can also determine if that wallet entry component within the application will show up or not. We can do this within particle wallet entry and set display wallet entry to true within this options parameter. We can also set the other wallets that will be available within the connection UI. We can do this in wallets and do EVM wallets with the project id. This is just standard configuration for the other wallets facilitated through wallet Connect. And then we can also include Solana wallets which is just phantom in this case. Finally, we can just set the automatic theme to auto and here we'll also want to open up connect content and we'll be defining this below page connect kit.
00:08:01.418 - 00:08:28.610, Speaker A: All right, so now we've defined page connect. Additionally, within this demo application, I want to add a few other components to test the wallets as well as showcase some other possibilities within particle connect. Let's do this within a variable called connect content and we can start by defining a variable called provider. This will just very simply be use particle provider. We can set account to use account. We can set theme and set theme to use particle theme. You can also set connect and disconnect to use particle connect as well as chain to use network.
00:08:28.610 - 00:09:14.226, Speaker A: Before you move on, let's quickly define our web3 object. We can do this with useeffect and then go through a conditional that checks if provider exists as well as if is EVM provider with provider passed in returns true. Then if the conditional passes, we can just very simply set window web3 equal to new web3 and pass in provider as any. And then we can close this off here by passing in provider. This is taken directly from use particle provider which will essentially just connect three using particle RPC nodes. Let's also quickly set up a button independent from the connect wallet button that directly connects with Google. Let's call this connect particle with Google and we can just call connect and then id particle and preferred auth type of Google.
00:09:14.226 - 00:09:41.240, Speaker A: We can also go ahead and create a button for disconnecting. We can name this on disconnect and just call disconnect with hide loading set to true. So let's also go ahead and create two buttons, one for getting the balance and one for doing a sample signature to test the connection to the wallets. We can start with the balance button. We can just call this get balance. We can quickly go ahead and get the accounts and we can just do that with window web3 ETH get accounts. Let's also go ahead and grab the balance.
00:09:41.240 - 00:10:24.124, Speaker A: You can save that in a variable called result window web3 ETH getbalance and accounts. And then we can go ahead and push a notification to the front end with notification success and just simply set the message to get balance accessible and just set the description to web3 utils fromway and then pass in results. This will convert the way value to a more readable ether value. All right, so now with the get balance button created, we can create one for doing a sample signature. We can define this with personal sign. This will look very similar. We can just go ahead and start by pulling the accounts and we can save the result of the signature in a variable called results and set that equal to await window web3 ETH personal sign.
00:10:24.124 - 00:11:32.992, Speaker A: And then we can set the signature to something simple like GM particle and pass in accounts zero as well as an empty string here. Same as last time, we can just push a notification success and set the message equal to personal sign successful and the description set to just results. Now of course we'll need to actually map these to the front end. Let's do this in a return statement and just start with some simple HTML. All right, so I've gone ahead and created the Connect button as well as the custom direct Google Connect button. I also want to quickly set up a theme selector so we can do current theme, set that equal to theme and then we can set up some buttons here that uses set theme which we defined up here to change the theme around depending on if the user selects auto, dark or light. Also quickly add three buttons for opening the Connect modal, opening the account modal and opening the switch network button do account open account modal open Connect modal and open chain modal and then we can return the button contents here and then now we can build the get balance and personal sign button so we can set that on the condition that provider exists is EVM provider returns true as well as the chain dot name dot to lowercase is not equal to Solana.
00:11:32.992 - 00:12:02.704, Speaker A: And then we can also create a one off button here for disconnecting and then we can close it out here. Okay, so now we're done. We've imported all of our networks from particle network chain, imported various components from particle connect as well as particle connect react UI, imported our CSS as well as some components from and react and import web3. We've defined page connection kit with all of our configurations, we've defined connect content with all of our extended functionality and we've mapped all of it to the front end here with various different buttons. So let's go ahead and run it and see if it works. And as you can see, it looks like it worked. So we now have this page here with our connect wallet button.
00:12:02.704 - 00:12:39.174, Speaker A: Our individual Google button can dictate the theme of particle and we have all the individual connect account and network buttons right here. As you can see here we have everything from particle, Auth, email, phone number, Google, Apple, Twitter, and so on, as well as our balance, personal sign and disconnect buttons that we created right here. So there you go. In just a few minutes, we went through three large examples, the first being integrating it into an existing rainbowkit application, the second being very simply just adding particle as an option within Solana's wallet adapter. For the third, we created a full demo application from scratch. If you'd like to learn more about particle, then you can do so through the video linked below. And if you'd like to visit our web demo, which a lot of this was based upon, then you can also do that through the link found below.
