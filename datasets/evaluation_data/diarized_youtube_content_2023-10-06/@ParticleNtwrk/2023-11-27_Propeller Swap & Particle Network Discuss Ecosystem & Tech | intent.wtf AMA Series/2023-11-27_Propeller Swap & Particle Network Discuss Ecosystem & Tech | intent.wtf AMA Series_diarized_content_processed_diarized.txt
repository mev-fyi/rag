00:00:00.440 - 00:00:29.334, Speaker A: All right, let's see. Is my microphone coming through here? We can get a thumbs up in the, in the audience if my mic's coming through. Ashwin, you can shoot me a DM too. Perfect. Sounds good. Apologize for the slightly late start here. We were having some slight technical issues.
00:00:29.334 - 00:00:57.418, Speaker A: As is customary with Twitter spaces. It's not a traditional space without some issues. I'm actually on the browser version right now on my computer, which is a first for me. I think I did one maybe a month or so ago, but they just added the feature to desktop to do spaces. I used to run a whole virtual machine and all this stuff, and finally now they have it natively enabled. So I'm giving it a try today and hopefully it's. Hopefully it works out.
00:00:57.418 - 00:01:02.586, Speaker A: Let's see. Marcus, can you hear me? Are you up here, speaker one? I can hear you.
00:01:02.690 - 00:01:03.738, Speaker B: Can you hear me?
00:01:03.866 - 00:01:27.302, Speaker A: Yep, yep. Sounds perfect. I think we are all set to go then. Let's see. I think we're going to go. So I guess for everybody here in the space, we'll give everybody a second to hop in here as we get started. But what I can begin by doing is potentially give a brief rundown into what we're running here today and sort of the theme of the space and the topics we're going to be talking about.
00:01:27.302 - 00:02:00.524, Speaker A: So this is our first space within a series of spaces that we're going to be running over the next few weeks called our intent WTF Space series. This is a space series that is essentially leading up to an event that we're going to be running in Istanbul in a little bit over 30 days. I believe that'll be on the 16 November. So we're coming up on it. That'll be during Devconnect weekly. The point of that event in a sample will be essentially learning all about intent centric design, intent centric infrastructure, powering this next generation of web. Three applications with intents.
00:02:00.524 - 00:02:53.698, Speaker A: Now, if you're in the audience and you aren't familiar with what intents are, the hope is that by the end of the space, you'll have potentially a better idea. But also what I'd highly recommend is going to the particle network Twitter profile. We have a lot of content that we've been producing recently about intents, and we're going to be producing a lot more going into the future. But the space series is sort of meant to prep everybody and sort of create that initial understanding of intent centric design. And I think we're starting off with a really strong guest today. We're talking to propeller heads today, which we'll talk a little bit more about what they do in a moment. But I'm really excited for it because as I was doing my research over the past few days and today, um, on propeller heads and really diving into it, I feel like they represent the ethos, almost of intent centric design, um, specifically in the solver that they build.
00:02:53.698 - 00:03:32.594, Speaker A: So we'll get more into that in a moment. But essentially, um, to set some expectations, the way that we're going to format the space today is it's just going to be essentially diving into propeller heads. We're going to try to understand the different components of what they're building, how that ties into intent centric design, as well as set the stage for what we're going to be doing in Istanbul. I guess, as we get started here, Marcus, maybe I can give you a chance to introduce yourself and tell us about maybe your journey in web3. How long you've been in the space for? Let's start by maybe understanding your path in web3 so far. How long have you been in the blockchain space for?
00:03:34.854 - 00:04:05.078, Speaker B: Thanks for the intro. We've been working on algorithms one way or another in blockchain for two years now. And what pulled us in initially was the MEV space and looking for ways to solve the problems that MeV posed, which ultimately led us to intents and seeing solving as the best way to solve MEV, but also many other things. This is really where everything got started.
00:04:05.246 - 00:04:43.882, Speaker A: Yeah, I love it. That's a solid origin because I've ran a decent number of spaces and I usually try to understand what the motivation was for starting. And it's interesting with you guys because you guys run a very specific type of technology. I think usually when you seek organizations that do broader things, it's a less intentional vision. But with you guys, you're solving a very specific problem within the space, which we'll hopefully understand more about today. But I think that's awesome. We'll get into the mvv side as well.
00:04:43.882 - 00:04:59.744, Speaker A: I have a lot of questions around there. Maybe, Marcus, do you want to give us a quick introduction to maybe tell us at a high level what propeller heads does, maybe a little bit about the different components of the business as well as your role at propellerheads.
00:05:01.604 - 00:06:04.570, Speaker B: Sure. So, as you said, we're very much focused on one particular topic, which is solving, and solving really means to help anybody optimize what they would like to optimize for today. Most of the time, that seems to be price but I think our understanding of what people want to optimize for when they do blockchain transactions will be much more subtle and will differentiate more very soon. And as solvers, this is exactly what we provide as a service, is to find ways to optimize, meaning to maximize the objective function that the user defines. And that's a fancy way of saying the user says what he wants, and we try to do our best job to give him as much what he wants as we can. Given all of the different building blocks that there are. The interesting things in blockchains is that there are an increasingly number of very heterogeneous building blocks, meaning there are many, many ways you can do things, which is the great thing about permissionless systems.
00:06:04.570 - 00:06:54.524, Speaker B: There's no limit to the innovation and new players entering the market. And we see that in amms there are constantly new ones. And that is what makes this a complex but also interesting problem. How can you actually optimize for what you want when the ecosystem keeps becoming more and more complex and the choices become increasingly larger? And that's exactly what we do. We are that provider that helps keep this simple by abstracting away all this complexity. And you ask what my role is. I'm the founder of Propellerheads, and day to day I switch between research on different topics or intents, but also on algorithms and product management, which means defining all of the features that we're building and helping the engineering team to understand the space.
00:06:55.864 - 00:08:08.794, Speaker A: Yeah, I love it, and I love how you kind of touched on, I mean, like I mentioned, you guys align very closely with the ethos of sort of the intent vertical in terms of like, specifically, you know, abstracting away complexity to make it not only easier for people, but optimizing in the process and making it the actual quality of interaction is significantly higher. And we'll talk about this in a moment. And I think in terms of DeFi and specific, so optimizing trade routes, this is especially true, this optimization piece, in that it's not only simplifying the actual trading process, but creating a lot of value in the process for the people utilizing the solver. So I think what I want to start with is the goal of the space is to build a solid picture of what you guys are doing, and then of course, tying that into intense centricity. I think you've done a fantastic job opening. Let's maybe try to talk about the different specific components that make up propeller heads. We can start with the solvers, and we talked about that briefly, but maybe for those in our audience who are unfamiliar with the concept of a solver.
00:08:08.794 - 00:08:23.754, Speaker A: Specifically in the context of trade routing, could you dive a little bit more into what that essentially means and maybe contextualize it in a way that is accessible for newer people?
00:08:24.254 - 00:09:24.460, Speaker B: Sure. I think the easiest way to understand a solver is to imagine an aggregator and then build from there. I think many solvers today are very similar to aggregators and aggregators like one inch Paraswap, Kyber Swap, and so forth, whose job it is to do what traders like. If you were doing a trade today, and it was a significant trade, and you really wanted to make sure you get the best price, because you don't want to be trading on the wrong pool, maybe the price at the moment is much worse than on another pool. You might go and open up the different Dex interfaces in different tabs and just check, where do I get the best price? And this is a very simple form of order routing. You're basically looking for the single best decentralized exchange that will give you the best price. And this is actually what many traders do.
00:09:24.460 - 00:10:08.084, Speaker B: You open different apps and different tabs and look where you can get the best price, and an aggregator does the same thing and a little bit more. An aggregator also checks the prices on all the different exchanges and all the individual pools on those exchanges. But then they also consider not trading everything on one exchange, but also splitting between exchanges. The thing with any liquidity pool is that the more you trade on it, the more you move the price. And so in many cases, it's optimal to not only trade on one, but on multiple exchanges. And then you end up splitting your order maybe 50% on Sushiswap and 50% on a uniswap pool. And this is the job of aggregators.
00:10:08.084 - 00:10:24.204, Speaker B: And it's also exactly the same basic job that solvers start out with. And then from there, I think, to understand what differentiates solvers from aggregators is that solvers do that plus more features, which I'm happy to go into.
00:10:25.624 - 00:10:44.104, Speaker A: Yeah, I think that was, a lot of us have used, for example, one inch before, or a few other of these aggregators that you're mentioning, where it's looking at best prices and stuff like that. But I like to hear more about how solvers take that a step further and, and further optimizing that core user experience.
00:10:46.524 - 00:11:56.948, Speaker B: Yeah, so I think the time when aggregators were initially conceived and built, the ecosystem looked quite different. You had very few dexs, maybe only two or three, very few tokens, few pools, and aggregation was more or less the best that you could do to optimize price. Now, though we are and quickly changing living in a quite different ecosystem, where, for example, you also have professional liquidity managers, market makers also quoting prices on chain through solutions like cash flow, airswap, Epop and the like. And you also have market makers making markets directly on the Dexs. And this in one step already complicates the issue of routing a little bit more. Integrating these market makers is not the same as integrating a Dex, because you don't have a permissionless smart contract with a defined state. You have a counterparty with an API, and there already the job of aggregation becomes a bit more complex.
00:11:56.948 - 00:13:09.274, Speaker B: But this is only the beginning, I think one good example of what a solver does that differentiates it from an aggregator, and this is again and again, but a very good example is coincidences of ones. So if you've used cowswap before, cowswap popularized this concept, the most probably that you can save a lot of fees and also a lot of market price impact if you trade directly with someone else. So if you are selling USDC and buying ETH, and someone else is selling ETH and they want to buy USDC, then you can both get a much better price if you just swap the tokens peer to peer, and you would be saving on the Dex fees and you would be getting both the same price, meaning the market mid price at the time. And this is already one of the first ways that solvers differentiate from aggregators. We all actively look for exactly these kinds of optimizations that go beyond just aggregating Dex sources, but using all other states, including the intents of other traders, to optimize your trade.
00:13:11.494 - 00:13:23.824, Speaker A: Makes sense. Yeah, that's a good way of putting it. So I mean, I guess then, like if we're trying to understand specifically the propeller head solver, which I guess you guys call the propeller solver, am I correct in that?
00:13:25.204 - 00:13:26.224, Speaker B: Yes, correct.
00:13:26.964 - 00:14:58.564, Speaker A: So with that, I guess the best way of describing it would be an evolution of traditional aggregation into, I guess, truly optimized swap routing. And I guess, could you maybe give us some more information about these specific problems? This is solving beyond just providing users with an optimized trading route to a higher degree than something like an aggregator. What other problems is this solving? I know that you guys have talked a little bit about liquidity, fragmentation, and of course mev and stuff like that. Maybe could you touch on beyond just the core user experiences unlocked here right now? Of course, traditional trading, like you mentioned, if you want to optimize your route, you know, you have a few options. You can use aggregator, you can open up ten different Dex tabs and hope that you can find the right price or the mix between different trades like that. But having a single place to express that intention and then have that be executed, I think is a significant evolution in user experience, but not only user experience, but just generally, like how we see interaction with the blockchain and moving past this sort of like sequential base level interaction that exists in most applications today. But if we look past that into additional benefits and additional problems being solved by solvers, would you say that there are any others that are important to be considered here?
00:15:00.064 - 00:16:03.244, Speaker B: Yeah, for sure. I think that there is a lot of education that still needs to be done and is now happening through the development of different intent frameworks on really the breadth of parameters that you can optimize for in a swap. We treat it as a given that a swap is about getting the best price, even though just that by itself is not very easy to define what really is the best price. I don't think that that's really true. I think that when we swap there is many other implicit preferences that we express or don't express, but that we have and that often don't get taken care of. And we are not used to this yet in Defi that we can express these additional preferences because the interfaces and the Dexs that we know, they just didn't have them yet. But I think as the space matures, this will very much be understood as something that is very valuable.
00:16:03.244 - 00:16:59.856, Speaker B: And for example, when I swap and I send a swap on Uniswap, I'm not just saying I want the best price on Uniswap, I'm also saying I want it now in the next block, because that's what any transaction that I'm sending to a builder is implicitly expressing. I want this transaction to be included right now, and there is a price to this immediacy and the price I'm paying implicitly if I know it. If I don't know it, I'm also most likely have the intent that I do not want to be run over by an MEV bot. I don't want to be sandwiched, I don't want to be front run. I don't want my information about my trade to be used by someone else who maybe uses that as a signal to trade the asset ahead of me. And these things are sometimes or most cases not explicitly. And because they're not explicit, then in many interfaces you are exposed to these risks like, for example, meV.
00:16:59.856 - 00:18:00.330, Speaker B: And I think very soon more users will understand, or the interfaces will take care of it for themselves, to express these additional preferences explicitly in the intent. And that will overall make interactions with defi much safer and produce more of the outcomes that users actually want without them having to know or say all of these things. But beyond that, I think that there are many types of users who don't, who are not served fully by their current interfaces, who maybe have other preferences. So maybe I care more about paying less gas than I care about fast execution. And if I dollar cost average into ETH, maybe I invest every month $100 into ETH. I don't really care if it executes on Monday or Tuesday, but I do care if I pay $10 less or $5 less or $1 less in gas. And if a solver can take care of that, for me, that is of great value.
00:18:00.330 - 00:18:32.824, Speaker B: And this alone, for example, I think there are solutions that are tackling exactly. This can save millions of dollars in transaction fees every week if you just optimize the moment of making these transactions. And that's just one of many examples. But I think that there are these other parameters, most prominently speed and privacy, that also impact how you execute and how you should execute a trait to help the user do what he wants to use.
00:18:34.124 - 00:19:14.002, Speaker A: That's really interesting. This entire time, I've been thinking about optimization with, I guess, a sort of narrow definition of optimizing for price. Right? But you're right in that optimization isn't always price. I mean, optimization in this case is optimizing for the intention, the underlying intent of the user executing the trade, whether that be like you mentioned, gas fees or speed or anything else. That's something really interesting to consider that you guys are enabling with, with the propeller solver. Yeah, I'm just thinking about that now. I didn't consider that when I was doing my research.
00:19:14.002 - 00:20:06.264, Speaker A: That's super cool. So I guess now that we understand a little bit more about the propeller solver and what a solver is, and some of the problems that it solves over other traditional solutions of aggregation, stuff like that, now that we have that context, I think it's also important to understand the actual process of utilizing the solver. So I guess maybe before we jump too far into that, could you give us a little more detail about the underlying backend of the solver? So, for example, whenever I submit an intent to a solver, and I'm requesting a route or something, a lot of time, it can feel like these things are sort of like black boxes. So, could you maybe give us a little bit of, of insight into what actually happens in the backend there to achieve what I'm submitting to the solver?
00:20:08.284 - 00:21:10.484, Speaker B: So, most solvers are built the following way, so you can simplify to three components. The first is to know where the market is at every one of the different exchanges. Basically, any of the options that I have to swap, the tokens that you want to swap, I have to be aware of them, and I have to be aware as fast as possible. What exactly is their state at the moment. By state usually means which price do they have and how much liquidity do they have? And to be more specific, I could have a uniswap v two pool on ETH USDC, and that has particular price at a particular block. And as a solver, I cannot solve for a correct transaction without knowing all of this information. And that's one of the challenges the solver has, is to always integrate every single Dex and know about all their pools and all the tokens.
00:21:10.484 - 00:22:07.128, Speaker B: And this is a job that every block solver needs to update themselves on what's going on on chain. And then the second layer is that you have an algorithm that now needs to find the most efficient path over all of these pools. The simplest question that you could think of is which pool has the best price? But as I explained earlier, that's not really the answer to how do you get the best swap? Meaning how do you get the most tokens for what you're trading? Because prices move as you trade most of the time. For bigger swaps, you have to split between multiple sources, and then solvers start building these graphs. You might have seen them before, for example, at one inch, where you split your tokens over all these different pools. And these graphs can get arbitrarily complex. It's not just splitting between two or three pools.
00:22:07.128 - 00:22:46.878, Speaker B: You could split into one pool, and then split that pool again, and split that pool again, and the rabbit hole can go as deep as you as you want. And this is really a problem that has no optimal solution in fixed time, meaning that there are no algorithms that find you the absolute best path for any given situation. So this is a very interesting research problem that solvers have to work on. How do you actually find in a given amount of time? And you don't have so much time. You have maximum 12 seconds. Depending on the chain, you have much less. And in that time, Oswald needs to find you the best path.
00:22:46.878 - 00:23:42.244, Speaker B: And whatever he can find, he gives you back. And that's like the first step. Basically you get sent back the path that the solver found and that's what's happening in the background when you using a UI and there's a solver behind the UI, gets back a package of data and that data basically includes all of the different routes, all of the different pools that are included in the route that gives you the best price and it's just any other call data that you could get from any other UI. But in this case it encodes all the routes that give you the best price. And then when you click swap, you as the user sends that package of data through your wallet to an RPC node and like any other transaction executed on chain. So it's basically all in your hands and the solver just found you the route and encoded it in Cordata, if that makes sense.
00:23:43.184 - 00:24:43.384, Speaker A: Yeah, that makes sense. That's pretty interesting. I guess the natural next question would be within that process, of course that's a lot of complexity to abstract away into one API. But whenever as a user, let's say I want to submit, in this case, let's say I'm interacting with propellerswap as an example, I submit an intent in that case and then that gets sent to the solver API. What does that interaction process look like on the user level? In terms of what are the steps that happen from the point in which I submit that intent to the point in which that is actually executed at a high level, I'm talking the route computation, which then gets put into call data for execution. Could you maybe tell us about the actual developer oriented process of submitting that to the API, receiving a response and then eventually that leading to execution?
00:24:44.844 - 00:25:15.884, Speaker B: There's usually two endpoints. It could all be done in one endpoint, but for optimization you usually use two endpoints. One is a quote endpoint. There you only send the in token, the out token, and usually the in amount and the min out amount. Min out amount. Because you are specifying a slippage implicitly by the min out amount, you're saying okay, I definitely want at least that much, Eve. Otherwise I don't want that swap to execute.
00:25:15.884 - 00:26:25.804, Speaker B: And then you get back a response from the API with the in amount and the out amount that we can achieve. And the solver basically states this is a price that at least I think I can achieve in the current block given the current chain state. And if this quote is something that you, or in this case the user wants to execute, then there's another second call made to the solve endpoint. And this then initiates the final actual solving. And the reason that there's a second endpoint is that that endpoint will use more time. Maybe the quote endpoint returns in 100 milliseconds, but the solve endpoint takes 2 seconds to return because the solve endpoint then runs more optimizations, runs the algorithms for longer to find an even better route. So what the solve endpoint returns should in almost all cases be either the same or better as the code, and only the solve endpoint actually returns the call data to the front end, and then the front end can give it to the wallet and the user can sign the transaction and execute it.
00:26:27.144 - 00:27:27.594, Speaker A: Makes sense. So that seems like just from the developer perspective, basically at this point, just handle a handful of API calls and then you are sort of executing that with the call data. So that's pretty interesting. I mean like when it comes to actual integration complexity, would you guys consider leveraging? So like, actually I want to talk about this concept, like tying into this topic of like direct to solver swaps, if that makes sense. So this is, I believe, something that you guys actually outlined in one of your blog posts regarding propeller swap, if I remember correctly. Could you tell me about from a developer standpoint, maybe define that direct to solver swap idea? And then do you guys usually target towards developers? Is this something that you guys are trying to see? Widespread integration and more of these direct to solver channels existing across the ecosystem.
00:27:29.094 - 00:28:16.474, Speaker B: This is how much, how this plays out and how prominent these direct to solver endpoints will be is still to be seen from a developer's perspective. And that's how we built it. There is no difference. So whether you integrate with an aggregator like one inch, or whether you integrate with us is practically no difference. We have very similarly structured endpoints, very similar parameters to some extent, largely overlapping parameters. And whether you are talking to an aggregator or a solver doesn't make a big difference. It does make a difference to whether you talk to an auction, because if something that actually runs an auction after the fact, you don't get the call data.
00:28:16.474 - 00:28:47.790, Speaker B: So if you're talking to Kausop, you don't actually know the swap that the user will execute. The whole flow works differently. But from comparing it to normal aggregators like the one inch legacy, it's exactly the same. There is no difference. The difference is in what happens in the background, direct to solver versus going to an auction. Make sure that your intent is completely private. We don't send it out to other solvers, and there's no public API to listen to your intents.
00:28:47.790 - 00:29:40.492, Speaker B: And this is very important for trades where you have signal, meaning you don't want others to know about this trade. And you expect that others, if others knew about the trade, your trade wouldn't execute, or maybe would execute worse. So maybe you're selling a large position, or you're buying a large position in a low liquid token. If this buy would be public ahead of time, some bot would front run you and try to push the asset price before you are able to buy it, hoping that they can sell it back to you at a higher price. And this information leakage is at the moment unavoidable in auction based systems. In the future, there might be solutions to keep it entirely private, but at the moment it's unavoidable. And that's one of the advantages of going directly to solver, is that this privacy is guaranteed.
00:29:40.492 - 00:29:57.314, Speaker B: There's no one that can frontrun you, and there's also a strong incentive that we never do so. Because if there's only one endpoint, that's only one solver that you're talking to, it's very easy to assign blame, and we have a strong incentive to never abuse that information.
00:29:59.094 - 00:31:02.144, Speaker A: I think this is actually a perfect segue into this idea of trade privacy, because when I think of the DeFi ecosystem, especially surrounding actually making and executing trades, you have a few components, so you have the general user interaction, which is how easy is it for me to achieve my intention to actually get to this outcome that I want? And is that process optimized? Am I getting the highest quality route to that intent? These are sort of the interaction side of it, and then you also have the risk of MEV front running, back running, stuff like that. And this is as a result of a lack of privacy, typically, like you mentioned. So it's interesting to hear that you guys are sort of offering a solution to this with this direct to solver swap. Could you maybe tell me a little bit more about the approach you guys take to privacy, especially surrounding trades and the different components within propellerheads that enables the private, completely map protected trade submission?
00:31:04.004 - 00:32:08.368, Speaker B: I think that what I'm going to mention is probably too many not complete news. But before I go into, one thing to note is that with all these private endpoints and privacy preserving and math protection solutions, there is actually no perfect privacy at the moment. At the end, you're always trusting some parties, no matter which solution and pathway you're using. If you are trading on a CRM mainnet, you ultimately have to trust the builders or the validators. And what you can do though, and that is as close as you can be to totally private, is you can avoid the public mempool. The first place that MEV boards look for transactions to exploit is what is being gossiped by the nodes, and that is the public mempool. And those are all the transactions that are already signed, but they're not mined yet.
00:32:08.368 - 00:33:00.946, Speaker B: They're not included in the chain. They haven't been mined or haven't been validated. And those transactions can be either front run, sandwiched, or back run, depending on how they impact the market. So if you, for example, have a trade pending, and you have a very high slippage tolerance, lack 10%, and it's rather trivial of for a bot to recognize that they can buy the asset ahead of your trade without your trade failing, because you have that tolerance, and then sell it back to the dex pool, for example, right after your trade. So they buy, you push up the price and they sell, and they make a guaranteed profit on this trade. And this is a classical normal sandwich. This is only possible if your trade is visible, though.
00:33:00.946 - 00:34:08.478, Speaker B: If the MEV board doesn't know about your trade, then they cannot sandwich it. And if your trade is not visible to the bot, then you can only be seen once your transaction is already mined. After your transactions mined, it's of course public. But that doesn't help the bot, because by that time, it's far too late to sandwich you. So to avoid the public mempool is the same thing as avoiding most of the MEV risk, and the most critical one is being front run or sandwiched. And to do that, you can use a rather simple solution, which is the currently not enshrined PBS built by flashbots, where you have an endpoint to the builders, and you have specialized parties, the builders who build blocks and then compete against each other to submit the most valuable block to the validators. And these builders are known entities to some extent, and also have a strong incentive to not abuse their information.
00:34:08.478 - 00:35:05.949, Speaker B: And so they don't, or they don't in very obvious ways. And so if you send them your transaction directly, you are not going to be front on assemblage in almost all cases. And this allows us and anybody to make transactions very private and to be able to protect our users and ourselves. We build an endpoint that does exactly this. So the propeller RPC is an alternative RPC endpoint, that if you send your transaction there, the transaction doesn't go directly to the public mempool, but the transaction goes to all of the biggest builders who then build blocks of that transaction and submit it directly to the validator. It also monitors whether your transaction has been included and after some time, if it hasn't been included, sends it to the public mempool to make sure that there's no censoring going on. On the builder side, for example.
00:35:05.949 - 00:35:07.233, Speaker B: Does that make sense?
00:35:08.013 - 00:35:56.766, Speaker A: It does make sense. And, you know, it's really interesting that you mentioned the trade off between when you switch from reliance on just sending to public mempool. I mean, there's of course, like major issues with that, like you mentioned. I mean, it's, it's all of the, the lack of privacy and the consequences that comes with that. But then it's not like you mentioned, it's not like a perfect privacy preserving world going to things like, you know, like you mentioned, like these builders, right? Because then you're also introducing some sort of vector of trust. So, you know, it's interesting to hear that there isn't a 100% perfect solution to that just yet. But it is good to hear that this is something that is possible at least to like a certain degree, with some level of trust in those builders.
00:35:56.766 - 00:37:22.760, Speaker A: And of course, introducing these additional components for like, automatically pushing it to the public men pool to eliminate any possibility of censorship, stuff like that, is also a good strategy to further reduce that level of trust. So that's super interesting and I guess now that we understand a few things about the solver that you guys have built and specifically some of the components of it. So to recap for our audience here, especially those of you guys that are joining us just now, we've talked a lot about propeller swap up to this point. We've been live for about 40 minutes now. Talked about propeller swap and the solver API and essentially what it actually means, what solvers do, achieving the optimal route to an intent, whether that's the best price, whether that's some alternative method of expression, but achieving a desired outcome in a way that is routed through all these super cool algorithms like this, to have a really special solution to not only achieving intense, only the interaction side, but also liquidity fragmentation. What we just talked about, which is including this into privacy preserving state with the addition of private rpcs and stuff like that. So there's a lot of moving parts here, but the vision that we're trying to build in the space today is that the DeFi space, especially with solutions like this, is moving really quickly.
00:37:22.760 - 00:38:23.724, Speaker A: And I think if you just look at it two years ago, three years ago. Solutions like this are massive evolutions and not only usability, but actual utility of DeFi, especially for general audiences. And I think as we continue to move down the sort of, you know, innovation and evolution of the intent space, we're going to see that in tandem, hopefully grow as well. Sort of the specific intent vertical within DeFi. But before we talk more about that, I want to understand a few final components of propellers propeller solver that I'm not 100% on just yet. So you mentioned very briefly, we're talking about here and there, the sort of liquidity fragmentation issue and how you guys pull and constantly monitor liquidity sources from everywhere, off chain, on chain, across multiple different chains like that. And if I remember correctly, you guys do this primarily through a technology, through, I believe you guys call it the market graph.
00:38:23.724 - 00:38:37.564, Speaker A: Could you maybe dive a little bit more into specifically how the propeller solver approaches liquidity fragmentation and how it essentially constantly monitors the movement and changing of liquidity state across the ecosystem?
00:38:39.304 - 00:39:28.640, Speaker B: Sure. So you mentioned the market graph. What we do in the background is we take every single liquidity source and then normalize, meaning put it into a common interface over which the algorithms that I mentioned in step two can then solve for the optimal solution. And we call this the market graph, because if you look at all of the different venues where you can trade, you can think of them as a graph structure. And graphs have only two components, edges and nodes, meaning nodes that connect with the different edges. And nodes in this market graph are tokens, and edges are pools. Pools.
00:39:28.640 - 00:40:25.476, Speaker B: For example, what I mentioned earlier, a uniswap v two wrappitcoin USDC pool, would be one edge between the two nodes of wrappitcoin and USDC. And of course, there is not only one edge, there are many edges between these two particular nodes. And every place that you can trade on chain, be it a curve pool, be it a market maker, or even the maker PSM, where you can mint die. All of these are essentially places where you can get from one token to another token, and we abstract them or map them into this market graph where each of these pools becomes an edge. And you could think of the entire set of liquidity on chain as a large network of these nodes. And there are tens of thousands of tokens. So this network has tens of thousands of nodes.
00:40:25.476 - 00:41:22.324, Speaker B: And then there are probably like 100,000, more than 100,000 edges pools. And then this actually makes up a picture of the entire market, a computable picture, which is the interesting part, because this is a computable data structure that you can then use to feed it into your algorithm to find the optimal path through the network. And then if you already have it in that form, finding the best trade is sort of a path finding problem where you have one node, the node that you want to sell mean maybe USDC and the a second note, the token you want to buy, maybe wrap bitcoin. And you're trying to find the best route along the edges between these two nodes in the network. And yeah, this is why we call it the market graph, because it's the data structure that you use to represent all of DeFi liquidity.
00:41:23.544 - 00:42:22.626, Speaker A: Gotcha. That's interesting. I love the, the depth of what goes into kind of cultivating this experience. And I think for what we've talked about so far, probably, at least from my perspective, I'm listening to this, and correct me if I'm wrong, I guess maybe the best thing, the best way to describe this in a few words would be that at its core, the solve that you guys are building on, and just deFi solvers in general are solving three main issues, maybe four if you include an additional one that we just finished talking about. This would be core usability of DeFi through essentially solving for an optimized route to achieving an intent, which then leads into flexibility. So, improving core flexibility by, of course, like you mentioned, introducing additional parameters to potentially be expressed in something like an intention. Like you mentioned, like the dollar cost average exam averaging example.
00:42:22.626 - 00:43:14.934, Speaker A: I thought it was awesome. You know, maybe you want to optimize your trade route for the lowest fees possible, and you don't care if it takes an extra day or two. Having that additional flexibility is also big, and then you also get into the quality side, right? So, like, if we kind of go back to the original example of like, price optimization, then you also have increasing the quality of Defi and the quality of trades through intense optimization of trading routes. So, usability, flexibility, and overall quality. And then, of course, additionally, a big part of what you guys have built out here is that you're also tying in privacy, which solves a lot of issues that are kind of tied in with that into the mix here. Is that a decent way of describing the main problems, or is there a few others that I missed there in terms of some of the core things that are being solved by the probably solved solver?
00:43:17.994 - 00:43:41.894, Speaker B: Sure. Yeah, I think that's a good characterization. I think that if you look at the intent space overall, I'm hoping that there will be at least one other component which spans over all of those. So, yes, the usability will be more, will become better. Yes, it will. There will be much more flexibility in what you can express and what you can achieve with. With less effort.
00:43:41.894 - 00:44:39.266, Speaker B: The quality of your swaps will improve a lot. And if you look at the swaps today, I did an analysis yesterday looking at the average cost paid by retail users on Dexs, and it's somewhere around 20 basis points from that first analysis. So that means, on average, users are losing 0.2% on every trade that they do. That, of course, adds up to quite a large number, and that's at least what you can improve versus market price, but you can do a lot more than that. But I hope that there's another aspect that intents will help us see, which is a shift in how we think about transactions. And this is hard to articulate precisely because it is a shift in what we believe transactions or the expression of intents can really do to us.
00:44:39.266 - 00:45:57.134, Speaker B: I think we are very much bought into the model of first having to know what we want precisely before we express anything. And I think intents might be a chance for us to loosen or to relax this condition a little bit, so that we also know that it is beneficial to express intents way before, long before we know exactly how we would do it. I think anoma has a very good example, which is way outside of DeFi, out of current deFi, where they say that you want to go on a trip with your friends. We usually never conceptualize that holiday with friends before. We have an idea of where we would want to go, and maybe a time of the year, and maybe a hotel, or maybe a particular area or somewhere. But it is perfectly reasonable and doable to conceptualize something like a trip of friends without these details, and then have another party, maybe an AI supported by solvers, fill in the missing details, and give you options that you would have never found otherwise if you didn't allow for this flexibility. And maybe, but this is a big maybe.
00:45:57.134 - 00:46:26.544, Speaker B: These flexibilities and usability improvements will lead to a new way of how we think about what we can do in coordinating with other people and professional counterparties to get the things done that we want to get done. And yeah, that's ultimately also something that's very exciting to me, is the possibilities that that will enable, once we are starting a journey on that shift, of how we look at how we express what we want.
00:46:27.684 - 00:47:49.530, Speaker A: Absolutely. That was the perfect segue. You basically answered my next question, and I think that was perfectly articulated in that, like, you know, I think that we actually just released a big article about this last week, I believe because, you know, we announced v two a few weeks ago, in which one major component of particle network, v two is our intent fusion particle, which essentially tackles this sort of generalized expression of intents, and then solving those through the means of either something like our zero knowledge wall as a service, or like you mentioned, like some sort of like large language model or some retail wallet or something like that. And the way that we see it is that at the moment, like in the state of the ecosystem, and this includes DeFi 100%, you know, we've come a long way in terms of solving core issues with user experience and quality and flexibility of interaction. I would say that probably the major stride that we've seen recently is account abstraction and MPC for the onboarding component. So for a long time over the past few years, actually getting in to web3, and just like getting past that initial barrier to entry was a massive issue. I mean, saving a seed phrase down, writing it down and creating a password, all this stuff.
00:47:49.530 - 00:48:32.674, Speaker A: And for a very long time, actually getting into web3 was largely inaccessible to 99.9% of the population, which is why even today, web3 is still largely an in group of enthusiasts and engineers and stuff like that. So I think that we've come a long way in solving that component of user interaction. We've done it in tandem with MPC. That's what of course we do in a large capacity at particle as well as account abstraction. That's been another big component of solving that first half of the user journey, the onboarding to the actual expression of what you want to do. That 1st 50% I think has come a long way, and we've done a pretty decent job in that case.
00:48:32.674 - 00:49:56.822, Speaker A: I think what the major challenges right now is the second half, which is what intent solve. That's a big part of what you guys are solving with the propeller solver, is that once you actually get to the point where you want to express something, doing so right now is like you mentioned with that example, if you want to do something in web3 at the moment, you have to know the exact steps that you want to do to get there. I need to do step one, step two, step three, step four, until I achieve what I know I want to do. That's a problem, because when you're looking at it from the sense of web3, those steps can be complicated when we're expecting consumers and normal people, if that's the right word, to use, to use web3, expecting that they're willing to go through that. A cognitive load of understanding every step and the complexity that goes into that to achieve a certain outcome, especially with things like I want to get the best price on my swap or something of that nature, most people won't go through the effort, and if they do, then it'll be extremely complicated and difficult. So having these solutions where it is as simple as I know what I want as a user, I need a solver or some sort of something assisted by AI or something of that nature. A big part of the infrastructure that we're building with the intent fusion protocol.
00:49:56.822 - 00:50:49.134, Speaker A: I want something to take my general intention, figure out what needs to happen to achieve that, and then execute. For me, that doesn't exist today. And that's, I think, a big part of the ethos of intent centric interaction. One thing that I read on your documentation that I thought was a really perfect recap of this is on your docs. I'm going to read it word for word. It said it's now near impossible even for sophisticated users to find and execute the exact combination of trades or the route that gives the best price. I think this as a concept is basically exactly what we just talked about in terms of it's very difficult to find exactly what you need to do to achieve your specific intention, which is why I think solutions like the propeller solver exist and why this whole intent vertical is starting to spit up today.
00:50:49.134 - 00:51:09.044, Speaker A: So I'm really excited about it. And as we kind of end the space here, I think for our audience, it'd be awesome to know what you guys have in store on the set of propeller heads for the next few months, for the next rest of this year. What can the audience look forward to from you guys over the next six or so seven months?
00:51:11.664 - 00:52:05.144, Speaker B: Yeah, on the last point that you made, I completely agree. It's very unrealistic that even if you do know what you want, it's too much effort and too treacherous to do. And what we built in Defi has to be simpler than tradfi. And even in tradfi it's too complicated. Even a, a savings plan in an index and a stock index is too complex for most people to actually do and have the time for the headspace to delve into in terms of what we have planned. So there is a lot of foundational work still being done to make sure that we have the absolute best price, that there's no question and no inefficiencies left unexplored on the algorithm side. On the liquidity side.
00:52:05.144 - 00:53:15.664, Speaker B: This is still something that needs to be improved and we're very excited about the improvements that are coming the next month. So you should be seeing a lot faster responses on our front end, even better prices, and some benchmark tests that we will publish on the quality of the prices. And then there are some other surprises coming in the next weeks around exactly what we talked about today. How can you build a swap that goes beyond just a single block aggregation and gives you a price that is only possible if you relax some of the other features, such as speed, so you can improve your price drastically. I don't want to spoil the surprise there too much, but you can improve your price drastically if you bring a little bit of time and say, okay, I can wait for the swap for a few minutes or an hour. That's a feature that we're bringing and we are integrating into a number of other intent layers and wallets. So you will be able to use propellerswap also in wallets.
00:53:15.664 - 00:53:42.614, Speaker B: And if you're using Uniswap X, for example, you're also using propellerswap. If you're using one inch fusion power swap, you're also using propeller swap. And we're also coming to Starknet very soon. I don't have an exact date, but it's within the next two weeks that we will be launching on Starknet as well with our propeller swap front end. So if you're using Starknet, you can also use propellerswap.
00:53:43.994 - 00:54:07.514, Speaker A: That's awesome. That's a lot of super exciting stuff. I can't wait to see what you mentioned regarding being able to potentially control some of those alternative conditions to further optimize price. That's super interesting. So as you guys start to move through these next steps and these next announcements, what's the best way for the audience to keep up to date with propellerheads?
00:54:09.014 - 00:54:24.924, Speaker B: The best way is really Twitter. If you follow our propeller swap account, this is Twitter and then the user is propeller swap. We'll post all bigger announcements and our research on our Twitter.
00:54:25.864 - 00:54:52.716, Speaker A: Perfect. Well, I appreciate it. Other than that, for everybody here in the space today, this was our first episode of Nintendo WTF the space series leading up to our in person event in Istanbul in a little bit over a month. That will be, I believe on the 16 November during dev Connect week. If anybody here will be out in Istanbul during that time, definitely love to have you drop by. I will be out there. Of course.
00:54:52.716 - 00:55:27.794, Speaker A: I love to meet in person. We're going to be doing a ton of stuff out there including infracon and a few other events which we'll all of course be posting about on our Twitter articlenetwork. Of course with the space of intents. We also just announced V two, in which we have a very significant component of v two dedicated towards empowering, intense centric interaction and sort of leading us to this next generation of web3 applications. If you'd like to learn more about that, we should have a article pinned to the top of the particle network Twitter profile that dives all into that. It's super interesting. 100% recommend to read if you found the conversation that we had today.
00:55:27.794 - 00:55:34.854, Speaker A: Propellerhead is interesting, but other than that, I think that is about it for the space. Marcus, any final thoughts from you before we end it off here?
00:55:35.554 - 00:55:43.174, Speaker B: Nope, nothing to add. I'll also be in Istanbul and our team will be there, so see you there.
00:55:44.154 - 00:56:08.854, Speaker A: Perfect. Well Marcus, thank you so much for hopping into the space today. We will be back, hopefully next week, I believe, with another space also around intense, but with a different guest hopping into a different sort of vertical of the intent industry, and I believe that's about it from our side. Everybody in the audience, thank you so much for hopping in today and be sure to follow at particle network and join us for the space next week and Ash would be able to end it off.
