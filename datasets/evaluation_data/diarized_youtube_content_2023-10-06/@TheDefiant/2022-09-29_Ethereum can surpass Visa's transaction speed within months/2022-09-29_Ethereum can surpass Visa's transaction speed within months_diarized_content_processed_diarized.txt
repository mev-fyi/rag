00:00:00.330 - 00:00:00.880, Speaker A: You.
00:00:04.530 - 00:00:44.966, Speaker B: Eli Ben Sasson and Uri Kalodny are the cofounders of Starkware, one of the leading scaling solutions for Ethereum. Starkware is based on a type of technology called Stark proofs, and it has two platforms, Starkx and Starknet Postmerge. Ethereum continues to rely on L2 scaling solution like Starkware, and according to the network's long term roadmap, it will continue to do so in the foreseeable future. In our conversation, we discussed the future of scaling solutions defi and NFTs. But first, let's hear more about how our guests went from longtime friends to co founders.
00:00:45.158 - 00:02:33.694, Speaker C: I was doing research in math and theoretical computer science, and around 2008 I started dabbling in actually applying some of this theory and writing it down as code with no good reason in mind. And as I was progressing and building these things, still not really knowing why, at some point I started giving talks at academic places and people were sort of yawning and not quite understanding what it's about. And I also heard there's a blockchain, a bitcoin conference taking place. This was in 2013, so like five years after going down the implementation route. So I spoke there and that's where I was red pilled, because it dawned on me first, I felt it in my stomach, and later on I could articulated that these kinds of cryptographic proofs, that back in the day, no one really saw any applications for them, that these proofs and blockchains are a match made in heaven, both for privacy applications and for scalability. So after that I was one of the founders of Zcash, which uses the privacy angle and had some further improvements to the technology, some better, more future proof stuff. So around 2018, I reached out to my good friend from many years ago, Uri, and two other co founders, and said, basically, yeah, let's do something with this.
00:02:33.694 - 00:02:35.070, Speaker C: This time for scalability.
00:02:35.730 - 00:02:43.202, Speaker A: Yeah, my version is simpler. I got a phone call and this guy said, let's start a company. And so here we are.
00:02:43.336 - 00:02:47.330, Speaker D: Nice. Did you know each other from university?
00:02:48.790 - 00:03:13.718, Speaker A: Even before university? We've known one another since the late 80s. Unfortunately, that long ago. And then we're undergrads together and have been friends for many, many years. And I've been an entrepreneur for the past 20 some years in a whole bunch of different fields. But going back to my undergrad in CS, that was sort of the foundation for me, like the technical foundation.
00:03:13.814 - 00:03:26.480, Speaker D: This is completely kind of separate from Starcore and tech, but just curious what it's like to start a company with such a good mean, does it make the friendship better?
00:03:27.090 - 00:03:28.400, Speaker C: Don't get us started.
00:03:30.770 - 00:04:15.630, Speaker A: Marriage counseling is useful, I'll say that. No, but seriously, I was actually talking to one of the new folks at Starquare today, and I said that starting a company with an old friend in particular, someone that we've known one another sort of in our formative years, a lot of the nonsense and noise that I think could end up affecting the plot in startups in general is just sort of completely out of bounds because you know one another and you trust one another so deeply. By the way, it's not just the two of us. It's a whole bunch of us that have known one another for many years at Starquare. So it's a lot of fun and it's a lot more efficient.
00:04:15.970 - 00:04:37.574, Speaker C: I'll say. It's like marriage without the sex. And actually, it's actually his joke. So, you know, I'm like, anyways, okay, it's definitely intense, but it's well worth it, I guess.
00:04:37.612 - 00:04:58.380, Speaker D: It's like you said, it's more efficient. Uri. I guess it's because you have that trust that you're able to maybe speak more directly and without kind of the fear of having a major fallout, because you know that there's a really strong foundation there that will kind of keep things together.
00:04:59.310 - 00:05:32.070, Speaker A: Yeah. I mean, going back to our seed round in early 2018, a bunch of VCs said to us, one token, and we just looked at one another and said, this makes no sense. We need to build this technology. We need to build this company. That's just noise. And this was sort of at the height of the ICO boom, and it was a trivial decision. A lot of people asked us, was it a painful decision? It was a trivial decision, I think because of that longstanding sort of friendship and knowing one another so well.
00:05:32.070 - 00:05:34.230, Speaker A: So it helps.
00:05:34.650 - 00:06:18.006, Speaker D: Okay, now on Starkware itself. Interesting that you started, Ellie, with Ccash, and I had Sukha on the podcast recently, and we spoke about zero knowledge, proofs, and privacy and all of that. You decided to go kind of a different direction from CCash. Can you go into what you were innovating upon? What's the difference here? And then if you can kind of both explain what Starquare is in just like the simplest terms.
00:06:18.188 - 00:06:55.054, Speaker C: Yeah. So these cryptographic proofs, they are useful for two main things. One is privacy. And I urge the listeners to go listen to the podcast with Zuko. And Zcash is arguably the first demonstration of the privacy aspect of proofs. A very powerful and good one. But there's this other magical aspect of these proofs in which they can sort of compress the process of knowing, of checking integrity.
00:06:55.054 - 00:08:23.418, Speaker C: Integrity means doing the right thing, or knowing that the right thing was done even when you're not watching. And these proofs allow you to sort of inspect a computation at a very small number of places with minimal effort, and yet magically and surprisingly know that all steps of that computation and all transactions in that computation were processed, every single bit and piece of them was processed with integrity. The right thing was done even when you were not watching. So if you for a minute assume that someone has this amazing ability, this sort of genie, this extremely powerful genie, you rub it out of a bottle, and suddenly it can inspect and assert the integrity and correct execution of a huge computation, then now you can see the immense potential for blockchains, because you could have a blockchain which is a very trusted but very slow and congested computer. You could use that computer to be a verifier of these cryptographic proofs, and thereby, through the power of math, assert the integrity of a much larger and much greater amount of computation that is proved to you. So it's this exponential boost in the ability of blockchains to scale. And all of this comes again from these cryptographic proofs.
00:08:23.418 - 00:08:31.920, Speaker C: And basically that is what Starcore is basically innovating on and spearheading and is like the vanguard of that area.
00:08:32.470 - 00:08:59.094, Speaker D: Okay? So it's the idea that there are these cryptographic proofs called starks and why they're important. And what they do is that they make it faster to verify the integrity of transactions for distributed networks, for blockchains.
00:08:59.222 - 00:09:24.090, Speaker C: Yes. It's not just for blockchains, but it's right now deployed on blockchains using a stark. You could have the government assert to you that a whole day's worth of transactions on whatever CBDC or something else was done with integrity. And you could still, even though the government is very powerful, you would still know that it operated with integrity.
00:09:24.250 - 00:09:32.194, Speaker D: So is this something like some piece of code that you run on top of some other program? Is that how it works?
00:09:32.232 - 00:10:09.306, Speaker C: It's a protocol. From a very formal point of view, it's a protocol which means actually it's a pair of algorithms or programs that interact with each other. One is called the verifier, and that is what the blockchain runs. And the verifier is what verifies the integrity of these computations. And the other part of the protocol that talks to it is this thing called approver. And approver can essentially be executed by anyone, and there are no trust assumptions about the prover because of the nature of this protocol that allows you to know that the right thing was done. So maybe a little bit like an analogy.
00:10:09.306 - 00:10:58.314, Speaker C: When you go on the browser and you want to shop securely, there's some process, something is like working for a little bit, and then you see this little lock at the top of your browser. And what happened was there was some protocol called an SSL handshake, where your computer, and, let's say the vendor's computer, exchange messages through some protocol, and now you have a secure channel. So that's an example of a protocol that we all use a gazillion times. So a stark is a different protocol where the blockchain will play one party and it will interact with another party, which is the prover, and you will get this sort of lock symbol or some analog of the lock symbol, where now you know that a huge number of transactions were all done correctly.
00:10:58.442 - 00:11:13.490, Speaker D: Okay, that's interesting. And so for this to work, would, like an Ethereum client have to be running the verifier, and then maybe is it like an app or whatever is kind of running.
00:11:13.560 - 00:11:48.030, Speaker C: It's a smart contract. So as long as those of your listeners who happen to be running an Ethereum node have been running on it a whole bunch of smart contracts, and for the past, over more than two years, sometimes a few times a day or sometimes a few times an hour, they processed a transaction on Ethereum that what it did was call a stark verifier smart contract, which verified a proof. So this is happening all the time. So by running an ethereum node, you are also running a stark verifier.
00:11:48.370 - 00:12:11.666, Speaker A: In fact, anyone who's done that since June of 2020 to date, has verified over 230,000,000 transactions processed, proven by stark proofs, verified, settled on Ethereum, and over $600 billion. So a fair bit of action proven with these proofs by now on Ethereum.
00:12:11.778 - 00:12:17.080, Speaker D: Wait, so is starkware used kind of by default by.
00:12:20.010 - 00:13:07.960, Speaker C: You know, on Ethereum, anyone can call any smart contract. So Starcore, a long time ago, as we said, more than two years ago, deployed a verifier smart contract, and since then updated it a few times. And then once in a while, our systems for Serra, DyDX, immutable rhino, they basically call this verifier smart contract to send a transaction that says, oh, please allow me to update the state of, let's say, the immutable system with a million new mints of NFTs. And now we submit approved for that. So yeah, once in a while we are immutable. We sort of invoke this smart contract just like someone else might invoke uniswap or compound. So we invoke the stark verifier as a smart contract on.
00:13:08.430 - 00:13:28.270, Speaker D: See? Okay, so this smart contract is running on Ethereum, the starkware smart contract. And then there are applications, there are protocols built on Ethereum who can choose to run this smart contract and verify their transactions.
00:13:28.690 - 00:14:11.510, Speaker C: Exactly. Ask Ethereum to act as sort of the gateway for integrity. And these applications will actually operate mostly off chain and process millions of transactions. And they still have the same security as Ethereum because they cannot move the system into a state that doesn't have integrity. So for instance, take DyDX, for example. There's roughly half a billion dollars of USDC locked in that token, sorry, in that application. And these half billion dollars of USDC should be under various accounts of the various traders.
00:14:11.510 - 00:14:37.960, Speaker C: Even if DyDx or starcore or someone wanted to move the system to a new state of accounts where someone. I have all of these funds. This is impossible cryptographically because it would be impossible to generate a proof and Ethereum wouldn't allow it. So you use the security of Ethereum to assert the integrity of a huge computation that is not done on Ethereum. It's this really magical thing.
00:14:38.730 - 00:14:50.490, Speaker D: Got it. And then what is the requirement for a protocol to be able to use this? Do they need to be built on some kind of special network?
00:14:54.030 - 00:15:54.490, Speaker A: How can they use it here? The question is whether they're using Starkx, which is the SaaS service that serves, as Ellie mentioned, Surrey, or immutable Dydx rhino, or whether they're using Starknet, which is the open network that we're building. If they're using Starkx, they need to integrate with the API that we offer. Think of this as a SaaS service that supports a finite set of sort of business flows, like minting and trading of NFTs or spot trading, et cetera. And so they integrate with our API and those applications. For example, right now, immutable as we speak, are integrating two AAA games onto their platforms. So those games or the users of those games would interact with the immutable platform. Immutable would batch transactions, and every so often send us a batch of those transactions.
00:15:54.490 - 00:16:27.282, Speaker A: Each one of those transactions is a small computation. That batch being a batch, constitutes in its totality a big computation. And then we in turn produce a proof attesting to the integrity of that entire batch. And now we send that proof to the verifier smart contract on Ethereum. And if it's verified, you could view this as the application progressing from its previous state to the new state, which reflects the state of affairs following the processing of these transactions of dispatch.
00:16:27.426 - 00:16:43.150, Speaker D: Got it. Okay, so for protocols to use this stark technology, they need to be built on top of or using the Starkx engine or Starknet.
00:16:43.650 - 00:17:13.560, Speaker A: So what I described here was the flow for Starkx. For Starknet, the experience for developers and for users is very much like Ethereum, meaning developers deploy their smart contract, in our case, written in the language that we developed called Cairo. So those smart contracts are deployed on Starknet and then users send transactions to the network, very much Ethereum style for both developers and users. We of course aim to mimic that experience.
00:17:14.410 - 00:17:34.846, Speaker D: Starkx, which I guess was the first development, right, of this technology. That's where most of the protocols using Starkware are dealt. Like DyDX Sorre, like the biggest one.
00:17:34.868 - 00:17:40.922, Speaker A: You mentioned in terms of numbers of transactions, say processed weekly. Yes, at this point. Indeed.
00:17:40.986 - 00:17:52.690, Speaker D: Okay, so can you give us a sense of just the amount of volume, the number of transactions that are being processed right now on Stargx?
00:17:53.670 - 00:18:04.600, Speaker A: Something like anywhere between say three and 6 million transactions a week. So a significant number more than bitcoin, for example, on a good week.
00:18:06.490 - 00:18:06.758, Speaker D: A.
00:18:06.764 - 00:18:08.970, Speaker A: Non trivial number of transactions. Yeah.
00:18:09.040 - 00:18:18.220, Speaker D: Nice. Is the majority of that coming from trading? Like I'd imagine a lot of that activity is on DYDX, right?
00:18:19.070 - 00:18:25.082, Speaker A: No, actually many weeks it's minting of NFTs actually that dominates.
00:18:25.146 - 00:18:32.830, Speaker C: Yeah, minting trading of NFTs. Sometimes it's spot trading or transfers for Stargex.
00:18:34.450 - 00:18:49.800, Speaker D: What are the limitations? Is Stargex able to handle any sort of program that developers want to build or is it built for a specific use case?
00:18:50.250 - 00:19:49.400, Speaker C: Theoretically it can handle, wait, Starkx? No, Starkx is sort of a SaaS system with a very limited set of highly used things like NFT, mints and trades, asset swaps and transfers, ERC 20 swaps and transfers, and perpetual trading on Starkx, not any kind of program works. And Starknet, you can write any kind of program in terms of scale. Any system will have some scaling upperbound. We are very far right now. The bottleneck is demand, it's not capacity. And we don't quite know what the upper bound on the scale of the stark X system right now is. But we still have, I guess a couple of order of magnitudes that we can go up without changing significantly anything.
00:19:51.370 - 00:20:30.726, Speaker A: Worth mentioning, Elliot, at this point, that we just pushed that scaling limit, that ceiling, we just pushed way farther out by introducing, a few weeks ago, we introduced recursive starks into production for general computation. This is the first time ever. And I personally take tremendous pride in the fact that this went from being a theoretical idea to being a production system. In fact, a production system that was introduced without a minute of downtime for both Starkx and Starknet. They all now benefit from recursive starks. And so by introducing this, that ceiling, so to speak, is pushed farther out.
00:20:30.908 - 00:20:35.240, Speaker D: Can you explain what that is? Recursive starks on kind of simple terms?
00:20:36.010 - 00:21:12.814, Speaker A: Simple terms. So, let me try this. So, you could take a batch of, say, 100,000 transactions, okay? Say these represent spot trading, or minting of NFTs, whatever it is, and generate a single proof for all those. And you would need a big machine generating that proof. And it's a heavy computation. It would take a good number of hours. Alternatively, you could split up that batch of 100,000 transactions into 100 batches, each one of 1000 transactions, and now you would generate 100 different proofs, all attesting to the same business logic.
00:21:12.814 - 00:21:48.222, Speaker A: Say it was spot trading, and you would run this on much smaller machines, and they would compute much faster. It's a much smaller computation. And at the end of this process, which runs in parallel, importantly, it runs in parallel, you end up with 100 proofs. Now comes the recursive step. Now you generate a proof for a different computational statement. Now, the computational statement that you set out to prove is not that you've processed these spot trading trades, but rather that you have simply verified 100 such proofs. And so this is the recursive step.
00:21:48.222 - 00:22:18.060, Speaker A: And once you've generated a proof for that, you've basically completed the process. In fact, you can do this in two steps. You can parallelize the generation of this recursive step into ten batches of ten with a final batch of proving the last sort of ten recursive proofs. I hope that sort of recursive explanation was something you guys could follow.
00:22:18.750 - 00:22:38.560, Speaker D: Okay, I guess it's a mechanism that allows to batch many transactions together, right? To be able to verify them at once, or just like, faster than would otherwise be possible.
00:22:39.490 - 00:22:45.582, Speaker A: It allows to parallelize the process of proving, and then prove that you've proven.
00:22:45.646 - 00:22:49.314, Speaker D: Okay, over and over and over. That's why the recursive comes.
00:22:49.512 - 00:23:14.810, Speaker A: Exactly. Instead of saying, I prove to you that I computed whatever, that these spot trades are valid, I will prove to you that I proved something, that I proved something, that I proved prosecuted. That's the recursive step, and by doing so, you can save yourself. It's actually one of the rare cases where you get better scale and better latency in a system. Typically, these things are traded off in computer systems.
00:23:17.870 - 00:24:35.230, Speaker D: I guess, just to take a step back on kind of why it's important to have these proofs of. Proofs of transactions. And it kind of gets to the why of blockchains themselves. Right. The reason why we need all these just complicated cryptographic technologies and proofs is to be able to let these systems verify transactions on their own or in a decentralized way, instead of having to rely on a centralized entity. Right. So I think kind of this technology might, when you start kind of going down the rabbit hole, it might start to sound like very esoteric and extremely technical, but in the end, it's what allows blockchains to actually be decentralized, permissionless for this financial system that we're building to not need decentralized entities to confirm these transactions that are happening.
00:24:35.230 - 00:24:39.480, Speaker D: Right. It's kind of the very core of what blockchains are.
00:24:39.930 - 00:25:14.718, Speaker A: It is what allows one party to do a heavy computation which processes a lot of sort of the transactions that need to be processed. And by generating a proof and submitting that proof to the blockchain, everyone else can really benefit by not having themselves to conduct this original computation, but rather simply verifying the proof. And the math is such that if you verify the proof, you are convinced, for all practical purposes, that the original computation was done properly.
00:25:14.814 - 00:25:29.990, Speaker D: And that improves scaling, because it doesn't now require each of the nodes in the network to have to verify these complicated computation anymore.
00:25:30.490 - 00:25:49.850, Speaker A: Not exactly. It's because all computers running Ethereum no longer have to compute the original batch of transactions. All they need to do is to verify the proof. And it turns out that verifying the proof is exponentially less computational work. That's the big deal. That's why it scales.
00:25:50.610 - 00:26:14.882, Speaker D: How much exactly do these technologies help Ethereum and other blockchains who want to use this technology scale? Like, say, if Ethereum can process 14 transactions per second, how many transactions per second could it process using Starquare instead.
00:26:14.936 - 00:27:09.190, Speaker C: Of what it could? We can give a lot of metrics on things that actually did happen. So there was actually one particular week, roughly half a year ago, around March, where we processed just for Duidx. More than sorry. Across all the systems, we processed 33% more transactions than Ethereum during that week. And the footprint in terms of gas consumption on Ethereum was far less than 1%. That's one notable metric that was over the whole week. So I think Ethereum was doing something like 8 million transactions over the whole week when we processed around 12 million transactions over that week, and some of them very complicated transactions, and we took much less than 1% of the gas cost.
00:27:09.190 - 00:28:07.030, Speaker C: Other metrics are that for NFT minting, when minted in a large batch that covers hundreds of thousands of NFTs, we have a saving factor of roughly 20,000 x, depending 10,000 x in gas costs. So instead of something costing roughly 100,000 gas, it costs roughly ten gas per mint of NFT. So that's a factor four orders of magnitude. And for DydX, which is a different system, it's around two orders of magnitude. So the amortized gas cost is around less than 500 gas. And probably if you wanted to do the same computation on Ethereum, would have been closer or would have been several hundreds of thousands of gas. So you save sort of a factor of roughly 100 to 1000, somewhere in between orders of magnitude across different systems in production.
00:28:07.030 - 00:28:12.620, Speaker C: This is something we're doing constantly over many years.
00:28:13.550 - 00:28:41.170, Speaker A: Yeah, I want to emphasize that point around production. Right. Sometimes these demonstrations can be sort of on this test bed that you run for a few hours and there is smoke coming out of every which way, and you quickly turn it off because you're done sort of demonstrating some heroic feat. And the numbers early quoted are actually from production systems that have been running week in and week out. Tens of millions attacked, hundreds of millions of transactions.
00:28:41.750 - 00:29:16.426, Speaker B: To swap crypto, a user has to choose among hundreds of Dexes on multiple networks, all offering different rates and fees. Do you want to avoid that hassle? Swap on one inch. A Dex aggregator built to get you better rates than any single Dex. Enjoy unlimited liquidity across multiple networks and top level security. Get one inch on your phone now, or swap on Oneinch. IO Oasis app aims to be the most trusted entry point to the maker protocol and to defi. Today on Oasis app, you can do much more than just borrow Dai.
00:29:16.426 - 00:29:51.270, Speaker B: You can also use multiply to change exposure to your collateral and earn to increase units of V three trading fee earnings with your Dai. And if you're an Oasis app user already, you can refer friends and get 5% of fees they generate in dai forever. The number that's often quoted as the holy grail that a blockchain should be able to process to become a viable settlement layer for finance is how much visa processes which is 1700 transactions per second. Is that something that can be achieved with the help of starkware?
00:29:52.270 - 00:30:10.478, Speaker C: It can be done like if visa knocks on the door tomorrow and says we need a system that processes on Ethereum, settles 20,000 transactions per second. We'll need to work hard, but it's doable within a small number of months.
00:30:10.644 - 00:30:59.406, Speaker D: Nice. So what Starknet is supposed to do now is to allow for other sorts for applications to be built with this technology, right? Because Stargex I guess, had a more limited set of programs and transactions that could be done and then start will allow a wider range, which that kind of limit to the programs that can be done has been an issue with many other scaling solutions. So interesting to see that this is being kind of rolled out. What's the stage of development there?
00:30:59.588 - 00:31:57.586, Speaker A: So the public testnet has been out for over a year, since June of last year, supporting general computation and composability and sort of all the goodies that you would expect. And the alpha has been live on Mainet since November of last year. So at this point, going on ten months, we've seen many hundreds of developers start building Cairo applications in everything ranging from games to d five projects to machine learning and AI. All sorts of crazy ideas. And I say crazy not because they're crazy, they're not at all crazy. In the web two context, in the web3 context, they've been considered completely out of balance in terms of computational complexity, things that you could never conceivably run on Ethereum. And thanks to the notion of scaling with proofs, you could now start doing these things.
00:31:57.586 - 00:32:05.140, Speaker A: And we're seeing people making very bold moves in this regard, which is very exciting, very exciting to watch and support.
00:32:06.250 - 00:32:13.510, Speaker D: Can you say examples of projects? What are some of the crazier.
00:32:15.210 - 00:33:27.982, Speaker A: Topology? The team of Starknet OGs have built Isaac, which is this engine for gaming that does all sorts of physics simulations, but no one could ever run on Ethereum. In cryptography, people have done computed, verified all sorts of cryptographic protocols that also once again, are extremely useful in the context of web two and out of bounds on Ethereum, in Defi, and in machine learning. We've seen projects like Apibera who have started building tooling for machine learning and AI computations that you could run on L2, generate a proof for those, and verify that on Ethereum. So every week they have folks coming in with quote unquote crazy ideas and building them on Starknet in a permissionless fashion with tooling, that if they're missing the tooling, what's beautiful to watch is that they go and build the tooling themselves. And so the software stack is fast.
00:33:28.036 - 00:33:30.686, Speaker B: Evolving and fast maturing is started.
00:33:30.788 - 00:33:37.518, Speaker D: Something like a side chain. What's the right way to think about it? Is it like its own blockchain?
00:33:37.694 - 00:33:40.862, Speaker A: It's a L2. It's a L2 that settles on Ethereum.
00:33:41.006 - 00:33:41.700, Speaker D: Okay.
00:33:43.350 - 00:34:24.774, Speaker A: Permissionless L2, built on Ethereum at the moment, still with a whitelist, much like other L2s that have been sort of deploying like arbitrum and optimism. But it's a L2 that caters to all developers. And we've seen over the past few months, we had a hackathon in Amsterdam with hundreds of developers. We had startnet CC at the tail end of East CC in Paris a few weeks ago with 500 devs coming in and numerous workshops running in parallel, all sorts of wild projects being built on startnet.
00:34:24.922 - 00:34:35.860, Speaker D: Nice. How is this L2 being secured? Or does it have like a number of validators? Or how does it work?
00:34:36.250 - 00:35:44.246, Speaker C: Yeah, here's a really amazing thing about the way the stark system works. And what is the meaning of a L2? A L2 means that as long as you trust Ethereum, and you need to trust only Ethereum, then everything that transpires on the L2, even though it has much greater scale, is done with integrity. Now, if you think about it for a second, imagine on DYDX, you have half a billion dollars of USDC locked, and the Ethereum nodes don't really see what's going on there. So how do you know that funds aren't stolen? What assures you? I mean, do you need to trust UIdX? Do you need to trust starquare? Do you need to trust some community of validators? And the answer to all of these questions is no. No trust assumptions. So how can this be? Let's just pause there and think about it, right? If there are no trust assumptions. Meaning if tomorrow we and DyDx hand over the control of the systems to Darth Vader.
00:35:44.246 - 00:36:12.686, Speaker C: Right, or to the government of North Korea, and they would like to seize all funds. They can't. Ethereum prevents them. Now what in Ethereum prevents them? It's just this smart contract that is called the Stark verifier smart contract. Wait, so there are no validators, no signatures, no nothing? The answer is no. No, there is a cryptographic start proof. And to generate this proof, you must operate with integrity.
00:36:12.686 - 00:36:39.434, Speaker C: So the funds on DYDX and all our systems are held self custodially. So if you're a DyDx user, the funds in your vault are controlled by a public key. And you're the only one who knows your secret key. Dydx doesn't know it, Starcraft doesn't know it. There are no validators who know it. And for your funds to be transferred from your vault or something to be done with it, you're going to need to sign off on it. And we in the way.
00:36:39.434 - 00:37:12.694, Speaker C: Yes, we can. So it's really an astounding fact that I think folks don't realize so much. And it's a really great question that you asked, Camila. People think that there's some other consensus layer and you trust it and so on. And I think it makes sense that they're confused because some of the other scaling solutions out there, that's how they work. So Polygon and Solana, you do need to trust the nodes of that network. If those nodes are compromised, then your funds are gone.
00:37:12.694 - 00:37:44.510, Speaker C: In our system, that's not the case. There is the need to generate a proof, and it's cryptographically impossible to generate a proof for anything but for the right thing, that was done. So our system has no validators, no consensus layer, and yet it has the full security of Ethereum, even though it operates at exponentially greater scale. It is quite an astonishing and amazing feat. And the magic behind it is all math.
00:37:44.590 - 00:37:59.270, Speaker D: So how does the system know that what it's being verifying is actually secured and decentralized and hasn't been corrupted?
00:38:00.570 - 00:39:18.126, Speaker C: Well, that's where the math comes. Suppose I would like somehow to move the set of accounts to a new state where let's say all the funds lie in UI's account because he's my friend. In order for that to be valid and for him to be able to withdraw that half billion dollars of USDC on Ethereum, he needs the Ethereum state to accept this transition to this state. But in order for the Ethereum smart contract to accept this new state, it will ask for a proof, and I don't know and none of us know, and we can actually mathematically prove that it is infeasible to find a proof, a sequence of bits that when this verifier will see, it will say, okay, you know what? We accept this and let we have all the funds. It is as impossible as finding a collision in Chateau. I don't know how to do that, even if I really want. And I believe that no one knows of a collision of mean even don't I believe no one knows how to do that.
00:39:18.126 - 00:39:48.140, Speaker C: So it's the same order of hardship to basically steal funds from the system because of the math. And if it sounds surprising, yes, it is quite surprising and astonishing. And we worked very hard to actually mathematically prove that you have this level of cryptographic and mathematical security. It's a big deal that we're extremely proud of and this is the basis for integrity in our system.
00:39:50.830 - 00:40:06.126, Speaker D: Okay, so with starting it now in Alpha, what's next? When is the whitelist going to be lifted? When is it going to be just fully live?
00:40:06.308 - 00:40:45.206, Speaker C: It's fully live. It's in alpha, which means that things are less performant and not as stable. But there are funds moved over the bridge, people are deploying smart contracts. It's mostly for developers to build stuff right now. And gradually we're going to lift things and make things even more performant. And it's this continuum that is happening all the time. So through the end of this year, there'll be some very major improvements that developers are going to find much easier to program in Cairo.
00:40:45.206 - 00:41:07.650, Speaker C: That's Cairo 1.0. There'll be a regenesis sometime in hopefully Q one next year that will make things even more secure and efficient for everyone to use. So I would guess that you'll see more and more production grade systems being deployed over the first half of 2023.
00:41:07.800 - 00:41:54.720, Speaker B: In the last ten years, over $100 billion worth of crypto has been lost or stolen, specifically because of poor key management scams and hackers. My new sponsor, Zengo Crypto wallet, wants to change the game entirely. By creating a crypto wallet with no private key vulnerability, Zengo aims to be the most secure web3 wallet and the best place to keep your crypto NFTs and assets secure. After all, with no private key to steal, your crypto assets and NFTs are much more difficult to hack. Get started@zengo.com defiant and use code Defiant to get $20 back on your first purchase of $200 or more. That's Cengo.com
00:41:54.720 - 00:41:58.386, Speaker B: defiant. Terms and conditions apply, so check out.
00:41:58.408 - 00:41:59.758, Speaker D: Their site for details.
00:41:59.854 - 00:42:12.150, Speaker B: In the early stages of building Starkware, Uri and Eli had decided not to launch a token. After two years of running Starkware and Starknet being in Alpha, what's the status of the token?
00:42:12.890 - 00:42:47.714, Speaker C: Starknet token? Yes. We've announced it roughly three months ago, and it will basically be the ERC 20 version of it will be deployed over the next few months. And we released a series of three blogs about it. Our intention and the explanation of why now is the time to do it. I can say one thing, it's not about. It's not about anything remotely close to fundraising. We're very well funded, and from the start, this was not ever something we needed.
00:42:47.714 - 00:43:14.102, Speaker C: It really is about true decentralization of the sequencers and provers. So that basically right now we're in a single operator mode where starker is that operator, and we need to further decentralization and have a world where there's a large set of teams and individuals that are operating the L2. And for that you need a token.
00:43:14.246 - 00:43:15.834, Speaker D: So how will it work?
00:43:15.952 - 00:44:04.134, Speaker C: The token will be used as a staking mechanisms in order to select the next sequencers. Improvers will be used probably also in whatever data availability solutions, we'll have decentralized validiums and things like that. It's also a governance token, so decisions are going to also be voted using this token. And finally, it's also going to be required for paying fees in the network, because we really need token, which means staking and governance power to flow to developers. And one thing we're very proud on innovating on, is on mechanisms by which portions of the fees are going to be flowing automatically at the protocol level towards smart contract developers and core developers.
00:44:04.262 - 00:44:14.080, Speaker D: Right now you're going to be paying future fees with the Starknet token. How are fees being paid right now?
00:44:14.450 - 00:44:21.834, Speaker C: Right now in Ethereum? In ether. Over time, we'll first allow it and then require it to be in the startnet token.
00:44:21.962 - 00:44:35.678, Speaker D: Got it. Why did you go with a specific programming language, Cairo, rather than try to use something that was more well known with developers?
00:44:35.774 - 00:45:34.838, Speaker C: Well, often when you have a new set of computational constraints, often the best way to get the most efficiency out of it, out of this platform is by using a new language that is best suited towards those constraints. And there are many examples for that. So when GPUs came around, I mean, there were very convenient programming languages, and you could even use them to program things using parallel nodes, which is what GPUs are about. And yet, the best way to utilize this marvelous hardware is using programs such as CuDa. Another example that all of your listeners are probably familiar with. When Ethereum came around, there was a large number of programming languages that everyone knew and loved, Python and C and Rust and a whole bunch of others. But you have this new computational model and new constraints, and the best way to utilize that is to come up with a new computational model.
00:45:34.838 - 00:46:35.914, Speaker C: That is the Ethereum virtual machine. It's a brilliant, ingenious contraption and a programming language that is best suited for it. Now, when you introduce something that is very compute intensive or algebraic computation intensive in ways that I don't want to bore the listeners, such as Starks, you suddenly find yourself in a different set of constraints that you want to operate under. And once again, it's not surprising that the best way to sort of squeeze that lemon and get the maximal amount of scalability from this new framework is by designing programming language that is suited for it. So we're basically just reiterating on this thing that was done many, many times. New set of constraints or new architecture sort of forces you almost always to, if you want to really use it to its maximal capabilities, it kind of forces you to go with a new language almost always.
00:46:36.032 - 00:46:38.854, Speaker B: The Alio blockchain allows for zero knowledge.
00:46:38.902 - 00:46:41.082, Speaker D: Smart contracts that are private by default.
00:46:41.146 - 00:47:21.478, Speaker B: And executed entirely off chain. With its development tools, Alio is making it super easy to build private and scalable applications. Developers without previous cryptographic knowledge can take advantage of Alio Studio and of Alio's own smart contract language. Leo builders and users alike should not have to make compromises between convenience and privacy. Learn more by joining the discord@alio.org slash discord or heading directly to WW Allio Studio. As of now, Starkware is solely used for scaling Ethereum.
00:47:21.478 - 00:47:26.620, Speaker B: Do Uri and Eli have plans to bring Starkware services to other layer ones?
00:47:26.990 - 00:48:19.210, Speaker C: I'll say something that may sound like a paradox. So even though we have an amazing team that is right now more than 100 folks strong, and we're very confident of our abilities, it's still a very small and focused effort, and we can only do one thing well for us. That one thing, it must be Ethereum, right? That's the right place. It has the best ideology, the largest developer system. It's really where we need to be. So no doubt about that. Now, the other side of the paradox is that since we believe and know that this is the right future proof technology that everyone's going to use, it sort of follows logically that you'll see Starks and Starknet and Cairo and this whole thing everywhere.
00:48:19.210 - 00:49:11.486, Speaker C: But even though it seems like a paradox, I don't think this is a paradox. You'll see both things happening now. How will it happen and what Starcore will do? Will it have capacity to support other things? I don't know. I should say like all people in blockchain space, we have a very warm spot for bitcoin because that's like the mother of all blockchains. And there's a way to get our technology also deployed on bitcoin. We'd love to see that happen, but other than that, really very hard for us to defocus from Ethereum, which is the second most important, or certainly bitcoin and Ethereum are jointly the most important platforms to operate on.
00:49:11.668 - 00:49:28.880, Speaker D: So is the decision based on how big the networks are and where the activity is happening right now that it just makes sense for you to focus your efforts there, or does it go beyond that?
00:49:29.650 - 00:49:45.638, Speaker C: We can only do one thing. Back in the day when we picked where we're going to deploy, we could only deploy on one thing. Now on bitcoin, we cannot deploy our technology. Bitcoin is very limited in what kinds of computations it supports. Ethereum is not. It's turing complete. You can deploy anything.
00:49:45.638 - 00:50:10.000, Speaker C: So it was an obvious choice to go with Ethereum, and we're sticking with. We're very, very happy. Ethereum has an amazing leadership, Vitalik, but also the rest of the leadership know Danny Ryan and Tim and Justin, and like this is an amazing team to have leading this project. So we're very happy to be part of that.
00:50:13.750 - 00:50:25.558, Speaker A: Worth mentioning that the Ethereum foundation has supported Starquare going back to its very beginnings. So we were born and raised within the Ethereum ecosystem, very proud to be.
00:50:25.564 - 00:50:53.854, Speaker D: Part of it, talking about Ethereum and its leadership and so on. Curious about your thoughts on the merge just happened last week. It seems like it was a huge success, even though the price isn't celebrating, but it just seemed to have been gone without a hitch. So just curious, from your perspective, how did you see it?
00:50:53.972 - 00:51:09.294, Speaker A: No, it's just a remarkable feat of engineering and coordination and decentralized sort of governance and social consensus building and leadership. It's been a joy to behold.
00:51:09.342 - 00:51:29.030, Speaker C: Yeah, I think it also gives us a lot of confidence in the ability of Ethereum to carry out the next important things in its plan. That is, by the way, L2 and roll up centric. So this is like really great news also for us from the point of view of Starknet.
00:51:29.110 - 00:51:54.930, Speaker D: Yeah, and on that point, I mentioned it at the beginning of the podcast. The merger that just happened, of course, is a change from proof of work to proof of stake. Unlike kind of, what maybe was kind of this myth was that it would improve scalability, but it doesn't at this stage.
00:51:57.030 - 00:51:59.022, Speaker C: That's okay. We got that covered.
00:51:59.166 - 00:52:14.710, Speaker D: Yeah. Right. So that's on L2. That's on you guys. What are kind of the next steps going forward now that the merge happened? Does anything change for L2 and for you specifically?
00:52:15.130 - 00:52:55.060, Speaker C: Not for now, but we're anticipating the next step. I think it's 44 80. I mean the numbers are an eap with four numbers and some combination, and that will include some sort of data availability solution that is slightly more better utilized for L2s. And we'll utilize that. And I think after that there's even sharding and dunk. Sharding and other things. So that's also going to be a lot of fun.
00:52:55.670 - 00:52:59.320, Speaker A: An eap with all sorts of powers of two. I think it was.
00:53:00.730 - 00:53:09.590, Speaker D: How does sharding play into L2s? I know that's kind of far out in the roadmap, but do you expect it to compete?
00:53:10.250 - 00:53:53.670, Speaker C: No. Something like think of Starks. What we do very well is scale computation, which is like the steps of computation, but what Starks don't address as well, or not directly and still needs a solution is basically data. So just storage. And storage is also clogged in Ethereum and sharding is all about increasing that storage. So basically sharding takes care of computation, Starknet takes care of, sorry, sharding storage, storage, Starknet takes care of computation. And these two things combined give you much greater scale.
00:53:55.370 - 00:54:45.560, Speaker D: Awesome. And then just to wrap up, interested in kind of in your view on what's coming up for Ethereum and for the blockchain space in the next few months, just what you're seeing in kind of all the hackathons and what's being built on Starkx and Starknet. We're in the midst of this bear market, but those of us who have been in this space for a while and stick around when things get rough, price wise, of course, there's a lot of building going on. So from what you're seeing being developed, what's kind of exciting, what should we be looking forward to?
00:54:48.110 - 00:55:17.810, Speaker A: In my opinion, one thing that sort of stands out is that we see no lull in sort of the development work going on in the ecosystem. Unlike, I think, from one bear market to the next, as larger community of builders realizes this thing is here to stay, people just build right through these bear markets and that's actually fun that people aren't sort of sitting there wallowing.
00:55:19.750 - 00:56:18.418, Speaker C: I would say the two metrics we care most about in starcore and in Starknet, these two metrics, and they're connected, are developer activity on Starknet. And it is just tremendously inspiring to see the amount of developers just coming over and starting to deploy and build. And I think they see that this is a future proof, scalable technology that can actually, that is not limited by one big computer or something like that. It really has a very large potential to scale ethereum. So I think developers, true developers, are seeing that and coming in the dozens and the scores. So one metric we're tracking and it just doesn't even recognize the existence of a bear market is just the amount of developers that are coming and onboarding. It's really just drinking from a fire hose.
00:56:18.418 - 00:56:52.538, Speaker C: And the other thing that we're looking at and is also very, we don't see a winter. There is the amount of computation covered by stark proofs. So maybe the volumes and dollars are not as high as they used to be, but in terms of TPS and transactions and so on, and systems being deployed on Starkx and things also being developed for. See, what we see is not winter. So those are the two metrics that we care about or that I care about. And what I see is basically spring.
00:56:52.714 - 00:57:25.254, Speaker D: Awesome. Yeah, I think that those are really important signals. We're seeing it as well. Just developers keep developing, builders keep building. So, yeah. Excited to see what new applications and protocols are going to get built and deployed with Starkware and Starknet in the next few months. Thanks so much for joining me.
00:57:25.254 - 00:57:32.480, Speaker D: This was super interesting, fascinating and yeah, it's been a pleasure learning more.
00:57:33.010 - 00:57:33.582, Speaker A: Thank you.
00:57:33.636 - 00:57:36.074, Speaker D: About what you're doing. Yeah, thank you, Camilla.
00:57:36.122 - 00:57:37.660, Speaker C: Thank you so much. Thank you.
