00:00:03.880 - 00:00:47.532, Speaker A: Okay, welcome everyone to the sequencing and pre conformation call number ten. Today we have an exciting topic, namely commitboost. And there's going to be three different presenters, Drew Cubii and three RaM. But before that, I want to give you a super quick update on the based ecosystem. So I have updated my slides, which I will share in a moment. Okay, so a snapshot of the base ecosystem. There's been quite a few changes.
00:00:47.532 - 00:01:39.954, Speaker A: So first of all, we have the roll ups that have committed to become base rollups. We now have a new player on the scene, Puffer, who is committing to build a base roll up in addition to Coinbase with their key value store, rise and Tyco. And actually, another piece of news here is that Tyco is now live, and since yesterday is actually technically a base roll up. We have various chains, existing chains that might migrate to base sequencing in the future. These are the ones that are most actively considering becoming a base roll up for various reasons. We've had Aztec give a presentation in one of the previous calls and Ens is very interested as well. And this mystery top roll up, which hopefully will be announced at some point.
00:01:39.954 - 00:02:33.074, Speaker A: We also have gateways that are interested in helping out with pre conformations. So estes on the last call signaled that they want to run a gateway, I guess. In addition to Titan and ultrasound on the startups side of things, we now have six projects that are helping out build infrastructure for pre conformations. Chainbound, Espresso, Lubin, Monea, Primev, Inspire. So two new names here, Lubin, which is basically a rebrand of Qi protocol. It's the same team, I think they're rebranding to focus on preconfirmations. And Monea is a team that was in stealth, I guess, until today.
00:02:33.074 - 00:03:23.344, Speaker A: And they are also working on preconfirmations. And I also added Primev, which was, I guess, an omission on my end in the previous version of the slides. And then on the R and D side of things, we have the two consultancies here, limechain and Nevermind. And the exciting thing with Nevermind is that they have now a dedicated team, sub team, I guess, within Nevermind, called switchboard. So it's switchboard, nevermind IO, I believe, for more information. And this subteam is dedicated to sequencing and preconfirmations. And we also have yet another team, which was in stealth until today, which is Commitboost, which will be doing the presentation today.
00:03:23.344 - 00:03:32.164, Speaker A: So without further ado, I guess I'll open the floor to drew to talk about commitment, commits, boost.
00:03:34.944 - 00:03:59.172, Speaker B: Awesome. Thank you, Justin, and it's awesome to see all the new names getting added every week. And I'm personally very excited for Zubril and next week, which I think a lot of you will be at, to dive for almost full two days on these topics and workshops and everything. So I'm excited for that. Before we get started on what commit boost is, just wanted to give a bit of background. My name's Drew. I love Ethereum.
00:03:59.172 - 00:05:02.366, Speaker B: I've been involved in it in different ways since 2016, and six weeks ago actually quit my job to work on something in Ethereum. I wasn't really sure what it was going to be, had some ideas, ended up being down the rabbit hole of my boost. And here's where I am. Part of how I got here was, I don't know if it was Justin told me directly or if he said it in a podcast, but at some point he said something like, if you want to work on something interesting in Ethereum, find new ways to use it. And ever since this post around base sequencing, like many of you all started to see more broadly, for me potentially the unlock around proposers making commitments, and that really unlocked an avenue for me. I had been writing research while I was in my previous role and just speaking with the community more broadly. And it was fortunate enough that Eigen Lair, when I left, was willing to give me some short term funding, which I'm working with.
00:05:02.366 - 00:05:37.464, Speaker B: And then I had also known Kubi at Titan for some time, and they're just a great dev shop. And so he was willing to lend some resources to take this idea and framework that we've had in mind to start putting in production and putting specs around it. So we'll talk about what Commit boost is, but I do want to give Sriram and Kubi an opportunity to initially talk about their motivations and thinking behind the initial backing of this. But before they start just up front. Commitboost is intended to be a public good. It is intended to be open source. That's the direction we're headed, and I'm super excited about that.
00:05:37.464 - 00:06:05.824, Speaker B: Well, we started with these initial folks. The idea is to get many more people involved and rally behind this. We see proposal commitments as a huge unlock, but some risks, which we'll talk about and commit boost is our attempt to try to mitigate those risks, but still see the innovation happen on the proposal commitment side. So with that, I'll kick it over to Sriram to give a little bit about motivation, vision and everything from his side, and then pass it over to Kubi and we'll get started.
00:06:07.984 - 00:07:20.404, Speaker C: Thank you Drew. Thanks Justin, for putting this call together. Proposal commitments has been one of the, one of the directions we've been interested in at Eigen layer from pretty much the very early days. I gave a talk at Stanford in 2022 on MeV Boost, which was a mechanism to split, to split auctions for MeV using restrict commitments. So we think of proposal commitments as a broad unlock to the Ethereum ecosystem, because now proposers can make promises that they follow a new set of logic when they build their blocks. And I think there is a lot of new innovation to be unlocked here. Pre confirmations is one direction, but there is, I think, even more things like block space futures, things like event driven actions where like proposes promise that if a certain event happens, they can actually go and trigger a series of actions.
00:07:20.404 - 00:08:58.820, Speaker C: You can have many, you can have things like threshold encrypted mempools where a proposal promises that they only include encrypted transactions. I think all of these create like a swiss army knife of tools to expand Ethereum more broadly. When you think of these different kinds of proposal commitments, there is a complexity where there are definitely multiple clients, multiple middlewares, and how all of these interact. I think this is a question, and many of us all are here building different pieces of it. And the vision that we had, and when Drew wanted to start something in this area, we were excited, because the structure of this is commit boost is focused on bringing together multiple teams to develop an open source public good that is agnostic of various dimensions, agnostic to propose the commitments, agnostic to pre conf, the type of reconf, agnostic to restaking, agnostic to relay, agnostic to the particular transaction flow. And it fits in with our vision of actually expanding the scope of innovation in the Ethereum ecosystem. Why are we involved? We are, as Drew said, a short term funder for Drew's independent work.
00:08:58.820 - 00:09:10.444, Speaker C: But broadly, the reasons we are involved are, number one, we see these are major innovation for Ethereum. We have had this vision that.
00:09:12.744 - 00:09:13.056, Speaker A: There.
00:09:13.080 - 00:10:02.062, Speaker C: Are different ways to modulate and contribute to the MEV ecosystem. We wrote papers on other kinds of mechanisms to address me. We like, for example, using how do you get consensus protocol to share distributed first in, first out commitments, for example. So this is a direction we've been interested in for a long time on a research basis. And finally, commercially, if there is a broader suite of standards that enables proposal commitments, it helps Eigen layer play a small part in it, in proposing restraint commitments. So that's, you know, clarifying our interest. I'll stop with this and hand it back to Drew.
00:10:02.158 - 00:10:09.314, Speaker B: Yeah, maybe Kubi too, if you can give your initial perspective. Thank you, Sriram. And it's 06:00 a.m. his time, so appreciate you tripping to get up.
00:10:11.414 - 00:10:55.704, Speaker D: Cool. I'll try to keep it short. So I probably know a bunch of you already, but for those of you who don't, I'm Kubi. I'm one of the co founders at Gattaca, and we are probably most well known for our block builder titan, which is one of the larger block builders on Ethereum, but we also recently launched a relay. I guess Gattaca more broadly is really focusing on building highly performant neutral Ethereum infrastructure, which is one of our endeavors with the blockbuilder. So we are the only larger blockbuilder, for example, that's not a trading firm. And as I mentioned before, we recently expanded into running a highly performant relay and actually developing a new relay from scratch.
00:10:55.704 - 00:11:33.494, Speaker D: And just as part of an effort to sort of expand and develop different kind of ethereum infrastructure, we naturally also came across the meth goose client we had been thinking about. Proposal commitments more broadly in general, have been part of. Obviously their pre conformation calls pretty early on, and I've known drew for a while, so when he got really excited about it and asked for some engineering resources, given that that's one of the things they're really good at, we, I guess we're willing to lend a hand. So yeah, that's where we're coming from.
00:11:36.114 - 00:11:53.336, Speaker B: Awesome. Thank you, Kubi. Let me share my screen here and we'll get into the that go full screen in 1 minute. All right. Should be full screen now.
00:11:53.480 - 00:11:54.764, Speaker A: Yes, perfect.
00:11:55.264 - 00:12:47.418, Speaker B: Nice stock photo from the EF website, but some of the agenda we'll talk through, we already got three introductions. Talk a little bit more about like from my personal perspective, what I see around proposal commitments, the potential challenges I initially saw, and I think others are starting to see around, even just within pre confs, and then how commitboost tries to help unite folks and still see the innovative vision, but maybe create a safer environment for proposers themselves. Some of the design principles that we have when we were thinking about this initial framework, and then some more boxes and arrows that Kubi will go through. Just open questions in timeline that we have in mind. You know, I will say not all this is baked. It's early. There's advantages and disadvantages to fully baking things and bringing out.
00:12:47.418 - 00:13:36.592, Speaker B: I think our main mission was to engage the community as early as possible. So maybe a lot of the questions we won't have answers for a lot of the designs. It's still an open thing. This is just an initial framework and so just if the folks can keep that in mind, we're keen to engage and get feedback from the community. This is how I kind of see proposer commitments. I've got a nice meme, I'm really bad at memes so I feel like this is top of my game that I've got but sort of three quotes that I've seen recently in publications and even outside of pre comps, just more generally. You have the first one from Barnaby who I think paints an awesome mental model of it's can we potentially give the proposers back some autonomy to create a template that others fill? I think thats a very powerful image of at least how I personally see proposal commitments.
00:13:36.592 - 00:14:13.184, Speaker B: And then Julian touched on this in his publication where he says maybe they can just specify some portion of it in some way. And then the last quote is from Vitaliks, one of his recent posts. A little more of a leap, but again its kind of this mental model shift of can we think about the block itself in a different way. And that's how I kind of see proposer commitments enabling some of that vision. Yeah, that's how I view it. Here's some examples of today's proposal commitments, obviously from Austin. Still got the cowboy hat around precomps because I think it's where a lot of the focus and energy is around.
00:14:13.184 - 00:14:59.856, Speaker B: But we've already had proposal commands, things like PBS. We've been talking about inclusion lists, which I see as some form of a proposal commitment. But there's other things out there beyond this. I think Shuram talked a bit about this, but there's going to be, at least in my view, and I hope others share this, a broader set of ideas that come out that we just aren't thinking about. And some of them actually may have nothing to do with block construction, maybe make proposals, make commitments for other things. Yeah, it's a longer term vision, but still some of the things that I thought about. But when we dive into just hyper focused on precomps, and many of you have been on these calls, there are quite a few teams building all the precomps different standards that they're pushing, different ways to think about how they connect with the proposer.
00:14:59.856 - 00:15:49.680, Speaker B: And with this, what we started to see was potential risks for proposers, specifically in the ethereum network more broadly. Number one, fragmentation, which can come through in a couple of different flavors, one being proposers running multiple sidecars that all support these different precomps or proposer commitments more broadly, we see some risks around this, or at least I personally did. Number one, core devs already have a hard enough time. If they're then going through upgrades and hard forks and having to think about the five different implementations, it may be difficult. Yeah. Number two, it could be very difficult for proposers themselves to manage all these side cores. I think sophisticated actors, I'm sure, will figure it out, particularly homestakers.
00:15:49.680 - 00:16:44.826, Speaker B: And so it was, you know, how we thought about is how do we kind of unite that into at least just one sidecar where they can opt into all these things? And then number three is just a potential lack of transparency around what's actually happening in network. You know, when things go wrong, how do we respond and even proposes themselves, you know, tools and standardized, out of the box engineering things that help them have transparency into their own box. So let's say one proposer commitment has an issue, spits out a bunch of logs, overloads their box, and they miss a slot. It's creating standards around how proposers interact with the outside world to reduce those types of risks. These are the things we saw. And so, with all that in mind, we came up with this concept of commitboost, and there's quite a bit of text still forming. This probably will create into some kind of mission vision statement for what commits boost will be.
00:16:44.826 - 00:17:50.724, Speaker B: But in essence, it's standardizing the last mile communication between the proposer and the proposer commitment protocol. And the focus for Commitboost is to make it as seamless as possible for a proposer, if they choose to opt into any proposal commitment. So, like Tree Rahm was saying upfront, it is designed to be agnostic to anything that entrepreneurs and builders want to design. It doesn't limit that design space, it just is the interface of how proposers interact with those teams and provide different things. And with that, what we're thinking a lot about and talking with validator design is what types of tools off the shelf would you want to monitor? What you're opting to, what you're opted into is doing, how you're opted into it, when you're opting to it, you know, how your signature is provided a whole host of things that we're trying to think through. And so this is really a middleware for proposers to interface with the outside world, or proposal commitments more broadly. And that's the main part we're trying to standardize and think deeply about and then have unification around within the community.
00:17:50.724 - 00:18:31.964, Speaker B: So the design principles that we've sort of at least initially thought about this framework from, we've pyramid on this a lot, but this is going to be a public good open source. I think broadly the vision is in some way for what commits boost becomes is like a client team. It's a good bad analogy because acquisitions in the past, but that's kind of the mission. And vision is it would be grant funded, non vc funded type of structure. Well, there'll be a couple people. All they do is fully focus on this middleware and support things around upgrades, ebbs and flows of ethereum as they come and go, and think deeply about that. The other thing we thought a lot about, and I emphasize this, was optionality.
00:18:31.964 - 00:19:18.244, Speaker B: So we don't want to design something that immediately eliminates some path for proposed commitments. We just think we're really early and we don't want to enshrine a certain full transaction flow of like let's say a pre comp. So trying to leave that open. The latter four on the slide, they're all kind of tied together, but a lot of it I hit on, which is around safety and just OpSec, but making it easier for proposers to understand what's happening within their box and what they're opting into, how they monitor that, you know, event loops to ensure their safety and soundness. And these are the types of things we're hitting on. I won't go through all these, but you'll see modularity, observability and transparency as a, as a key thing throughout the design. So I'll pause there.
00:19:18.244 - 00:19:30.592, Speaker B: I'm going to hand it over to Kubi to actually go into the meat of what this is before we take questions. But yeah, let me stop sharing here.
00:19:30.648 - 00:19:31.444, Speaker A: Kubi.
00:19:32.664 - 00:20:34.154, Speaker D: Yep, just before I get started, just wanted to say again that this is like an initial high level spec and none of it is written in stone. And generally also from an engineering perspective, the question we are kind of trying to ask ourselves is like how do we move? Or how do we evolve the current proposal commitments that we do? So I guess the subset really is a proposal committing to a header by a Mavboost. How do we evolve the current infrastructure to something that's more generalized so we can support new forms of proposal commitments, that is pre confirmations, for example. And can we do that in a way where in the short term, for example, we don't need any consensus layer client changes or things like that? So just to keep that in mind, I'll share my screen now and let me know if you can see this.
00:20:35.634 - 00:20:36.414, Speaker A: Yep.
00:20:36.874 - 00:20:37.706, Speaker D: Okay, perfect.
00:20:37.770 - 00:20:38.306, Speaker B: Nice.
00:20:38.450 - 00:21:27.744, Speaker D: So I guess just starting from a very high level, the idea is that commitboost is essentially one sidecar, and this one sidecar can basically instantiate multiple modules. Now, each of these modules would essentially represent a proposal commitment protocol. And for example, a proposal commitment protocol could be mathboost. So vanilla mathboost, or it could be, let's say, partial block auction. It could be a pre conformation module. And each of these modules basically could also be implemented by different kinds of teams. So the idea is not to enforce any standard of specific protocols, but more create a generalized platform for developing these kinds of protocols.
00:21:27.744 - 00:22:47.486, Speaker D: Then the other part is, I'm just going to switch to the other slides before coming back, that as part of developing commitboost, we basically envision developing an SDK. So from a developer's perspective, in order to build a commitment module, you have a tool set of certain primitives that are standardized that on one hand make it easier for the protocol to then interface with the proposal. But on the other hand, for the proposal, the node operator also to have more confidence to actually instantiate such a module. And I'll go into some of the specifics which drew also covered that we are thinking about now. So for example, one of the key things is telemetry and logging. So even think about, let's say, Mavboost today. Let's say you instantiate a module that implements the MavBoost protocol you would want to have some insight into, let's say, what kind of get header requests you're making, who you're making them to, what is the latency, for example, when you're getting responses from the relay and a bunch of things that basically can be nicely abstracted away from the developers of the module.
00:22:47.486 - 00:23:59.724, Speaker D: And then on the node operator side, you can envision them just simply running something like Prometheus, plugging it into a Grafana dashboard, and you have real time insights into what your sidecar is doing, what kind of specific modules they are running, not just what specifically the modules are doing, but also things around resource usage, like cpu disk and a bunch of other things. The other part is, some of the other primitives would include requesting a signature. Because at the essence of making a proposal commitment is basically the proposal committing to something via signing something. And so a lot of the thinking will be around, how do we request a signature? How can we do that in a safe way and abstract it away nicely, so that multiple different kinds of implementations or protocols can actually tap into that. And then there'll be a bunch of other just primitives around, like responding to certain events. So you can think about like a get header event that might be exclusive to a specific module or get payload event and things like that. So then going back to the sidecar itself.
00:23:59.724 - 00:24:57.322, Speaker D: Now there are other two key components. So one is something we now call a system manager, which will basically be responsible for instantiating each of these modules. And as part of that, some of our research conversations with some node operators revealed that they, for example, really, really care about resource usage. So specifically thinking about a context of instantiating models that might be newer and less proven, there's like a lot of concern for about, around there being bugs and it going out of bounds. And I think one of the examples that drew mentioned, which is actually very common, is like too many logs are being printed safe to disk, the disk is full and the entire node goes down and you miss this. Just simple, very operational things around operational security. Then the other key part is the signing manager.
00:24:57.322 - 00:26:21.862, Speaker D: And as I described before, this is going to be the interface of how these different modules will request signatures. Again, this is one of the key parts that we really want to engage with more people about and get insights into how we do this in a safe way. So what kind of things can we sign? What kind of keys will we use? Will it be proxy keys? Will it be the direct private key that the proposal uses? So there are lots of questions around that, but the idea is how can we move towards the world of more standardized proposal commitments? How can we request signatures for things without doing any consensus layer client changes? And currently, after having had a few conversations, a lot of the node operators actually use remote signers and key managers. So some of these widely used ones are freesign and Dirk, which are there as an example. But basically the signing manager will be able to provide interfaces to request signatures to these key managers today out of the box. And this way we would be able to not have to go through the current consensus client and force any kind of changes. Like a key part of this is basically that is fully backwards compatible and in theory could get 100% adoption.
00:26:21.862 - 00:27:53.406, Speaker D: While still for a subset of proposal that have a more sophisticated setup with these key managers actually request signatures for new kinds of commitments like pre confirmations. And that should hopefully also get us to a stage where at a certain point we have enough learnings of how we actually want to do this in a safe way and potentially even push a CL change, then I think the final bit I want to talk about is as part of this commit boost effort, we're also working on developing a testing suite. So as Drew mentioned, one key resource, one part of this endeavor, which usually is resource intensive, is when hard forks or upgrades happen to make sure that nothing breaks and everything works. The idea is basically when you have multiple teams building on top of this common standard, that there will be tools and test suites, that the base layout will be fully supported as the testnets will, for example, start upgrading. Then as long as your module logic is compatible with whatever the hard fork or the upgrade actually affects, you can just plug it into this commit boost sidecar, run the test suite, and you can have enough confidence around being compatible and supporting the change. So let me see. Yeah, those are the final bits.
00:27:53.406 - 00:27:54.674, Speaker D: Back to you, Drew.
00:27:58.014 - 00:28:23.862, Speaker B: Awesome, thanks, Kibi. Let me just share my screen again. Sorry, some logistics here. All right, awesome, thanks. We hope that gives folks a little more context to the abstract we're talking about. And, you know, that I've been talking about. And again, our goal and we'll get into this is just we're early stages.
00:28:23.862 - 00:29:13.598, Speaker B: We don't have all this figured out. We are working on some devnets to even put more context around this and trying to get, you know, as much documentation around us out. It's just practically like trying to meet people, aggregate research, think through things and engage with folks. This is kind of the stage we're in. Open questions that I'm continuously asking myself and, you know, welcome others to add questions slash help answer these slash, you know, provide their own answers. But are there any added risks with Commitboost? And the way I see it is it reduces risks versus the direction we're headed. But one of the core questions I think we as a community need to ask ourselves is are we comfortable with the current route we're going down? Which is a lot of teams building these things, which again, I personally don't think is the right route to go down, but rather create a platform that all of them can build on that standardizes it.
00:29:13.598 - 00:29:54.904, Speaker B: But there are trade offs with that and fully acknowledging that. And that's one avenue. Standardization is not always good. Sometimes it does limit innovation that can come and also can create things like tech debt down the road. Hopeful we're able to learn from historical things and think about this, but it is one of the downsides. Centralization. The one thing I'm asking myself is can we actually use this as a way to promote and improve standardization? In particular, other proposal commitments that find ways to reward home stakers and can this enable that and can that unlock that for them and make it more seamless for them to opt into that? That's one of the key things.
00:29:54.904 - 00:30:36.658, Speaker B: Challenges with current design emphasize this. We're early and keen to get feedback. One of the core questions I wake up in the morning when I'm sipping my coffee, staring out the window, I think about is would Vitalik run commit boost? I think that would be the dream mission we would have and the North Star we're trying to head towards as we think about this and would encourage the rest of the community to challenge it in the same way. Next is timeline. This is kind of Justin's same timeline. Just changed the wording when he talked about this in call number seven. We got started to think, well, maybe we can align with that and help support these shelling points and push the product community as well.
00:30:36.658 - 00:31:33.180, Speaker B: So that's what's here. Zuberlin next week we talked a bit about this, but we will have a Devnet and we've been working with a couple of precomps teams for initial stages of that, engaging with folks like what Justin had a slide chain bound Primev espresso, like all the guys, I can't name them all, but these people on the slide. And hopefully we'll have a couple modules actually live. And the goal in Zubri lan, at least from my perspective, is to try to understand what every team's doing. We have a lot of presentations on that. I know this is Justin's grand vision too, but have a lot of teams present and then understand the differences in how they're approaching things. And then the second day have a lot of workshops to discuss where is there overlap? Where can we standardize even outside of Commitboost, but commitboost being part of that conversation post Zubrin to ECC, we're hoping to do a lot of iteration, actually write more code, get more specs out there, engage with a broader set of people I think is really important.
00:31:33.180 - 00:32:05.264, Speaker B: So having others contribute to the code, the effort, testing things, and devnets a whole host of things and then post that ideally by end of summer actually have audited commit boosts ready to go and testing in production and hopefully we're landing pre comps by the end of the year. That's kind of Justin's vision and we're here to try to help push that forward with that. I think that's all we got. Happy to take questions. Here's the initial post we have. There's going to be more coming, particularly in the next week, week and a half. We're just sprinting towards Zuberlin.
00:32:08.884 - 00:32:16.064, Speaker A: Amazing. Thank you so much. Truth for the presentation and as well as QB and three Ram, we already have a question from Ben.
00:32:17.344 - 00:32:45.392, Speaker E: Hey there. Hey. First of all, I think this work is awesome. As you know, Drew, I wanted to maybe just re ask one of the questions that we talked about in our call the other week, and also maybe before I ask the question, since you did mention it, also here advertised that after Zubrin there's going to be another workshop on this that Drew is going to lead at ECC sequencing day.
00:32:45.448 - 00:32:45.570, Speaker B: So.
00:32:45.592 - 00:34:25.784, Speaker E: So for those of you who will be attending ECC sequencing day, there will be an opportunity to workshop this or anything that wasn't already answered at Superlin. So the question that I have is one of the motivations of standardizing this stuff is, as you said at the beginning, is to not have a plethora of different sidecars that validators have to choose from. And that's going to be really inconvenient and annoying. And I think that the question that I have though is that is it enough to standardize the part that you are talking about here, which is sort of a protocol for signing a commitment when there could be many different ways of enforcing those commitments, that we see many different proposals from enforcing things with collateral that will be slashed to potentially some form of insurance that a user can collect from, to something very different, like building a SU app or just using SGX to enforce the commitment. And I'm not to mention that there's many different types of commitments and ways of formulating those commitments, sort of a language for user intents that the proposer is promising to satisfy. Are we inevitably going to end up with many different implementations that, you know, that proposers will have to run all of them in order to be able to support the various wallets that are being built. That's my sort of open question or challenge for this work.
00:34:27.964 - 00:35:26.702, Speaker B: Yeah, I think that's fair. And if I'm understanding right, I think you're saying there's a whole host of standardization beyond just the last mile communication that the ethereum ecosystem and many would benefit from. Yeah, I don't have a strong answer to that other than I think commit boost isn't focused on that specifically. But I am committing myself to work full time with Justin and as independent in a way as I can. I mean, ideally, again, sitting a bunch of people are supporting this through grants and can help drive community overlap and alignment around that I think our first initial take at this is Zubrillin, and then probably something between Zubrin and ECC and then ECC to get some of this going. I don't know if Justin has more, but that's kind of the best I got, is to try to understand what are the differences between what all the teams are taking. At least identify those initially, where is their overlap and alignment in how we do this, and then at least use that as a starting point in the more contentious spots.
00:35:26.702 - 00:35:34.634, Speaker B: I'm sure it will take a bit of time. Yeah, I don't know, Ben, if it answers your question, or Justin, if you have more, but I don't think there's a perfect answer for that today.
00:35:36.254 - 00:36:41.264, Speaker A: Maybe Kirby can also share his intuition, but my model is that what is very, very difficult to change is the consensus clients. And so for the time being, we're just going to assume that the APIs of the consensus clients are not going to change. And so the question becomes, what can we do with the signatures that we already have? And I think the idea here is to be maximally unopinionated. Whatever you can do should be expressible within commitboost. Now, it is possible that in the future there will be some commitments that require changes to the consensus clients, at which point we can either try and lobby the consensus clients to do the changes, or, I don't know, I guess that's a bridge to be crossed then. And I think one of the things that commitboost is trying to help with is this idea of containerization. So I think about it a little bit like, damn, the word escapes me.
00:36:41.264 - 00:37:13.088, Speaker A: Kubi, you can help me. The name of the module. There you go. Thank you. So it's a bit like Docker, right? It's Docker for proposal commitments. And I think the idea is to try and shield accidental bugs where one of the services just uses too much memory or too much disk or whatever it is. And maybe if we want to be super paranoid, we can also think about a model where the module is actively adversarial.
00:37:13.088 - 00:37:38.744, Speaker A: The model wants to try and sign messages and access access the secrets from other modules, and maybe docker containers can help there. But yeah, I think what we're trying to do here, I mean, I'm not trying to do it. This is Drew and Kyuubi's project. I think what they're trying to do is to do as much as possible with the constraint of the consensus clients.
00:37:40.364 - 00:37:50.154, Speaker B: I will say it's not Kubi's project. I've just suckered it into hell. So it's definitely kind of my mission of leaving and focusing on something in Ethereum and trying to get the community to rally.
00:37:53.214 - 00:38:47.954, Speaker F: As a previous consensus client, Dev, you can change things at the consensus level, but you need to fix the issues or ensure that the issues that happen following mev boost don't happen anymore. So if you want to read more, you can read about what portal mentioned regarding epbs and those kind of things. So, yeah, but with all the 2d KZG for EIP 7594 and those kind of things, they are quite busy with very novel cryptography. And now if you add risky protocol changes, it indeed becomes quite an ordeal to convince and push change.
00:38:53.774 - 00:38:57.014, Speaker A: Divas, you have your hand up. Hey.
00:38:57.054 - 00:38:57.342, Speaker D: Yes.
00:38:57.398 - 00:39:33.756, Speaker B: Yeah, just quick question and apologies if I missed this because I came in a bit late. I was wondering where the code is living for these efforts, especially because I hear that you mentioned there being a Devnet coming up soon. Yeah, I think next week we'll be ready with that. We're just trying to get things going tested, at least. Idea as I don't know when you joined, but there's no devs devoted to this. And initially, what we had just, or at least what I had gone through and done is tried to create a framework to start engaging with folks early on. There's a trade off between engagement early and engagement late.
00:39:33.756 - 00:39:59.794, Speaker B: If we came with fully baked code, a whole host of solutions, that isn't the intent of what we had. So the trade off we made is we just don't have that ready right now, but Zubrillin will have it. I don't know if you're going to be there. I don't know where you work. Hi there. Sorry, but hopefully someone from your team's there and we're going to have a whole hackathon go through it. We'll have a presentation for about 30 minutes where we'll actually do the demo of it and then we're putting together repo and things like that for people to go through.
00:39:59.794 - 00:40:06.774, Speaker B: So apologies is not ready today, but it's just part of community and open development, I think.
00:40:09.554 - 00:41:00.784, Speaker A: Yeah, just a few more days. We're going to have some DevOps and testing people at Zubalin. So, for example, Paritosh DevOps lead and testing lead will be there. And I believe Kubi and his team and Lorenzo have been doing a bunch of legwork behind the scenes and chain bound as well, and maybe even other teams. So I think the ideal outcome would be that we have a testnet and we have multiple pre conformation systems that are built on top of Commitboost. And then we have these nice projector screen with all sorts of terminals and we take a nice picture and we declare it a success. And then a few weeks later at EFCC we actually have a longstanding testnet as the next step.
00:41:02.924 - 00:41:03.904, Speaker D: Okay, cool.
00:41:05.204 - 00:41:52.360, Speaker B: I love the vision, the terminal screens just to follow up. Question, is there a reason not to develop it out in the open from the start or what's the reason against that? I think that's what we're doing on this call is we've got this framework and we're trying to get feedback and thinking and Zuberlin is where we're going to be developing open source and talking about it. There'll be a lot of people there to all sit around. We've devoted, I think it's like 13, 14 hours of Zuberlin to talk about not only this, but what everyone else is building around it. So I hope. Yeah, that shouldn't answer the question, but that's the way we've approached it. We're following Justin's timeline and trying to work towards it, I guess.
00:41:52.392 - 00:41:59.256, Speaker A: Yeah, there's going to be a dedicated GitHub repo, right? Yeah. Slash commitboost.
00:41:59.440 - 00:42:00.204, Speaker D: Yep.
00:42:02.824 - 00:42:03.644, Speaker A: Perfect.
00:42:04.944 - 00:42:10.484, Speaker B: So I don't know if your name is Daniel, but I will find you and I will, as soon as it's ready, send it to you directly.
00:42:11.344 - 00:42:15.724, Speaker A: Apologize. Alex, you have your hand up.
00:42:16.294 - 00:42:16.630, Speaker B: Yeah.
00:42:16.662 - 00:42:57.354, Speaker G: Hey, I think this is more of just a comment, but yeah, I think this is super exciting. I'm still getting up to speed with a lot of the pre conformation stuff everyone's doing. But what I'd really like to avoid is having ten forks of netboost where everyone has their own little sort of idiosyncratic ways. They're doing all of these and APIs and interactions and all of that. So yeah, I think commit boost is a way to move forward here where we can kind of have this common layer. And yeah, the obvious tension is making sure that commit boost doesn't privilege or advantage like one set of people over another, but as long as it does, that seems really exciting. So, looking forward to seeing how this develops.
00:43:01.774 - 00:43:03.114, Speaker B: Awesome, thanks Alex.
00:43:07.714 - 00:43:08.614, Speaker A: Connor.
00:43:09.914 - 00:43:11.066, Speaker D: Yeah, I guess maybe this is a.
00:43:11.090 - 00:43:21.734, Speaker B: General question, but any intuition why this hasn't been done before? By the way, there's been no forks of map views before.
00:43:22.474 - 00:44:22.914, Speaker A: Oh, there have been forks in use. In use, yeah. So as a relay operator, you know, we have visibility as to what the various staking operators are doing and there's many forks of methboost playing all sorts of timing games, doing all sorts of different things. And yeah, it tends to be like the more sophisticated operators. And I guess part of this effort is to try and lower the barrier to entry, to be sophisticated, to be able to earn the full yield and try and make the playing field a little bit more fair also with this. Go ahead George, I don't know if anyone else was speaking. Can go ahead.
00:44:22.914 - 00:44:52.832, Speaker A: I wanted to say something. I just wanted to say that with the recent looking into base sequencing pre confirmation and proposal duties, I think it has been more and more noticeable of new use cases where mav boost extensions might make sense. Whereas previously I'm not sure whether too many such use cases were plainly visible as I guess the group here and leaders in this group here has made it so obvious.
00:44:52.888 - 00:44:53.484, Speaker F: Now.
00:45:02.514 - 00:46:30.564, Speaker H: Justin, you mentioned that there are lots of people that have, that are running different kinds of forks of mev boost and are interacting with the relay. I was wondering whether there has been an effort in standardizing those changes because you have a different interaction between the proposer mev boost that are running and the relay. I guess that some of those changes are not timing changes, timing differences, but rather changes in the APIs. So something that we think that would accompany the commit boost initiative and trying to standardize what such a software would do for proposers is to standardize the interaction between the proposals and the relay, basically the builder API. So we have a draft APO on that which is related to commit boost, because when you give commitments, et cetera, you would need to communicate that with the PBS pipeline, etcetera. So I guess we'll discuss more that next week in Zumber then. And my question was, have you seen such requirement for standardizing or updating the builder API based on those mev boost forks that you are seeing?
00:46:34.464 - 00:47:17.176, Speaker A: So I think the idea is that we preserve the APIs to the consensus client, but everything else can be changed. So in particular the communication with the relay could change if that's what's required. I think one mental model that I have is like, okay, who's sophisticated in the pipeline? The relays are sophisticated, the builders are sophisticated, the gateways are sophisticated. They can change from one week to another. The APIs evolve, the strategies evolve all the time. On the other hand, the consensus clients, they're just super slow. There's five of them and they all need to change in unison.
00:47:17.176 - 00:47:49.414, Speaker A: And we have to go through the Oracle devs process or similar process. So that's what I see as very, very difficult to change. But in terms of APIs, in terms of communications with the relay, or with a gateway or builder directly or whatever entity it is, I think that's totally open in the design space. Kaido, you have your hand up?
00:47:50.954 - 00:48:40.940, Speaker B: Yeah, this two questions. The first one is for everyone, but very curious, is there any so called map boost fork that are maintained or mainly maintained by an entity that's not venture funding backed? And the second one is, since I've you drew here, do you have any plans in the future to make this a for profit business and think about venture funding and things like that? Yeah, we didn't. I probably should have to touch on this a bit more. The latter question I'll talk about first. The former, I think is for everyone. But yeah, this is the mission of this. And goal is it to be a nonprofit? I don't want to call it a foundation because I don't know if that's the best legal entity, but I think the best mental model I've got is a client team.
00:48:40.940 - 00:49:49.094, Speaker B: And so ideally independent, the team itself fully focuses on this full time. It becomes maybe part of the core devs, meetups, all these things that they do. I don't know all the intricacies of those things yet, but that's sort of my mission and vision that I've gotten to, and this has been through a couple of journeys to get to this point, but think this is what's best for both Ethereum and the most likely opportunity to get adoption and succeed and help reduce the risks that we discussed initially around fragmentation, all these forks and everything like that. So that's the idea, and I'm open if the community supports it, I'd like to devote a couple years of my life to this and doing it. It doesn't have to be me also, you know, but at least some effort around this and getting it started, I think is an awesome, awesome thing to do. And then the former, I don't know of any nonprofits loving that boost, but certainly a nod to the whole flashbots team, the community, and their ability to stand it up and support this with the resources they've had and really push ethereum forward. So.
00:49:52.204 - 00:50:46.394, Speaker A: In terms of alternatives to Mathboost, there is vouch which in some sense has re implemented Mavboost, and they actually handle the logic slightly differently. So I believe they do two get header calls as opposed to one. They do one at second zero and then one at second one. And they take the highest values, something like that. There's also bloxroute that used to have an open source modification to Mavboost, where they play timing games for validators that pay bloxroute for that privilege. I believe it's no longer open source, but it's basically a modification of mathboost, this time from, from a relay. But I'd say most of the modifications have come on the operator side of things.
00:50:46.394 - 00:51:38.384, Speaker A: There's maybe half a dozen or maybe ten different sophisticated operators that have made modifications to mifboost. So there's one of them, for example, that's making a request every 200 milliseconds or something like that. So instead of calling getheader once within a slot, they call many, many times. And one of the things they observed is that their IP address gets banned because they make too many githead requests. And so they have even more sophisticated infrastructure where they split the IP addresses. And so, yeah, it can get really sophisticated, and I think it would be good to add transparency to the whole thing, add competition, and lower the barrier to entry to be sophisticated. William, you have your hand up.
00:51:41.124 - 00:52:41.490, Speaker B: Yes. Great presentation, guys. Thank you. Given all of these forks of mev boost that we've seen, and just the PBS roadmap, broadly, how are you thinking about concerns with, like, one just getting validator parity for this over time, if that is really a concern, and then also things like bypassability and people forking their own strategic versions of this on top of what the plans are currently for Commit boost? Yeah, not sure I fully follow the question, but let me add a bit and maybe let me know if I didn't answer it all the way, but, yeah, this isn't a fork of Metboost. Commit boost is not that it's a different way to think about it. PBS would be a module on top of this. The way I've.
00:52:41.490 - 00:53:37.750, Speaker B: I think you're, you know, I don't know if you're getting at like, how do we not have additional forks of boost out there and standardization towards it? Don't really have a strong answer around that specifically, other than the ideas. If we can unify as a community, at least initially, get all the proposal commitments to build to this standard. So at least then, no matter what, there is a standard of how nearly all proposers will interface with proposal commitment protocols. And if we have a crack dev team sort of pumping out open source software that has top notch features, it will at least help reduce the barriers. If there is a really sophisticated team that forks commit boost and does their own running of it, I think that's one of our defense mechanisms or thinking around that to help ensure that the open source version is used by all. Does that answer your question?
00:53:37.782 - 00:53:38.070, Speaker A: Will?
00:53:38.142 - 00:53:42.034, Speaker B: Sorry. Yeah, definitely.
00:53:44.514 - 00:53:45.454, Speaker A: Mami.
00:53:48.074 - 00:54:10.494, Speaker F: So the FRM foundation sponsored last year PEPC boost for protocol enforce proposal commitment. And I was wondering if commit boost would cover the same goals as PEPC boost as well.
00:54:13.874 - 00:54:51.448, Speaker B: I think it somewhat does at least the initial expressions of what I understood PEPC boost and the efforts to be. I think PEPC Boost is also a lot more focused on the enforcement mechanism like the protocol being aware and this is agnostic to how that is. As we discussed, we're agnostic to the enforcement mechanism. So some nuances there, but I don't think PEPC boost is a bad mental model of somewhat what we're, we're thinking through here. And I should note we're going to apply. Go ahead, Kibi. But I'm going to apply for like EF grants for this, this thing, this entity, this nonprofit.
00:54:51.448 - 00:55:02.484, Speaker B: So hopefully maybe get some additional research and thinking around PEPC boost in addition to commit boost and trying things out there too. So that is the thinking as well, at least initially.
00:55:03.984 - 00:55:14.604, Speaker D: Yeah, we're just going to add that PEPC boost would be like a module that you could build on top of commit boost because again it will be like a subset of a type of commitment that you can make.
00:55:19.584 - 00:56:02.726, Speaker A: Stefan. Yeah, hi. So I work on Teco, one of the CEO clients and yeah, first of all, thanks for the presentation. And I've been wondering, well, first of all, it's good to hear that we don't have to do anything for now. And is the idea of commit boost to be a separate sidecar, I mean listening to a different port and then stakers need to install the software or mev boost, like the current software would be extended to support the new APIs and everything. What is the. Or it could be either, I guess.
00:56:02.726 - 00:56:04.754, Speaker A: Like what is the current idea?
00:56:07.054 - 00:56:10.198, Speaker B: Maybe it could be. So I don't butcher this, I'll let you walk through it.
00:56:10.246 - 00:56:49.674, Speaker D: Yeah. So like from a technical perspective it will be a different sidecar. And I guess the way to think about it is like Mythboost is a protocol of how to source blocks through the current PBS supply chain. And this, the current methboost client is the sidecar of how to talk to that protocol. And what Commitboost is trying to do is create one sidecar that could instantiate different ways of making commitments. And so Mathboost, conceptually the protocol could be implemented as a module on top of Commitboost, if that makes sense.
00:56:51.774 - 00:56:57.554, Speaker A: Okay. Yeah, I guess. Thank you, Tina.
00:57:01.654 - 00:57:45.968, Speaker I: All right, well, I'm super excited to see. I feel like so much excitement around this middleware stack and finally some movement. So I'm currently putting on my head as a contributor to the PBS foundation as Flashbust is a pretty small party there and I massively failed my job in terms of being on some of the committees. So I feel like I wanted to kind of share some of the things that we mentioned. I think PBS foundation, this is commitment, is definitely an effort that PBS foundation should. I hope it can support. On a funding perspective, this is exactly the type of upgrading and leveling up and standardization that we need in this space.
00:57:45.968 - 00:58:45.266, Speaker I: I love the clarity of the positioning of the medboost as a protocol. And in fact, I think the failure of the Mapboost protocol development, as in community, when the intention was set out after the merge to have community co creation has in fact stagnant it precisely because it wasn't. We weren't, none of us were thinking of it like a protocol. We were oftentimes confused ourselves, whether it's like core maintainers on the map, this community call, or like, you know, it's flashbacks itself. Which one are we talking about? The sidecar or what? So this is a really great, I think, next step. I think one of the things that we had our first meetup in Berlin last week, I think some of the folks who came by is also on this call. I think one of the direction we would love to see is we would like to direct funding to comparing the trade offs of the various EPBS designs.
00:58:45.266 - 00:59:26.784, Speaker I: And we have identified a couple of teams to grantees to actually work on that. And separately is comparing the different forks of web boost as well as double clicking on the standardization effort. And I think one idea mentioned was that, like Stoke mentioned that maybe it would be a good idea to kind of keep map boost lean, but upstream what is needed for what makes sense. So I think that's something, just ideas out here. I don't want to put words into folks mouth, many of them are literally on this call. But I just wanted to share the ethos and I'm very excited to see what comes out of this next.
00:59:32.184 - 00:59:50.856, Speaker A: Amazing. Thank you Tina, for the support. George, I think you muted mine is comment rather than questions. So if you want to close the public part, I'm fine with that. Okay, perfect. Let's do that. That's the end of the public part of the call.
00:59:50.856 - 00:59:58.864, Speaker A: Next up we have the private part of the call, which is more open discussion and it will last up to half an hour.
