00:00:28.610 - 00:00:46.290, Speaker A: Okay. Welcome back to episode three of writing smart contract with Mutant and the go Ethereum client. We left it last time just after installing the client, and today we have Wells, Jeffrey joining us. Welcome, Jeffrey.
00:00:46.450 - 00:00:47.640, Speaker B: Thank you very much.
00:00:48.090 - 00:00:50.470, Speaker A: So what are we going to do today, Jeffrey?
00:00:51.410 - 00:01:04.422, Speaker B: Well, the idea that I had was we're going to create an altcoin. We're going to create our own currency, and we're going to call it Steph Coin.
00:01:04.506 - 00:01:05.090, Speaker A: Awesome.
00:01:05.240 - 00:01:07.154, Speaker B: So you're going to get your own coin. How's that?
00:01:07.192 - 00:01:08.094, Speaker A: To the moon.
00:01:08.222 - 00:01:08.900, Speaker B: Yeah.
00:01:10.470 - 00:01:28.550, Speaker A: Right. So we've installed, just to make sure everybody's on the same page, we have the ether real GUi running. We've installed oversee all the necessary software. Here it is looking beautiful. And you were telling me earlier, Jeffrey, that this is going to change this interface, isn't it?
00:01:28.620 - 00:01:59.998, Speaker B: Yeah, absolutely. Ian, one of the graphics designers is going to come over and we're going to redesign the entire thing. We're going to look at the browser. We're going to see how widgets can interact with the browser. We're going to see how we're going to develop and design the entire Ethereum browser and Ethereum App Store, whatever you want to call it. So the interface is definitely going to change. The interface that we're currently looking at is a test interface.
00:01:59.998 - 00:02:13.942, Speaker B: It allows us to do sending transactions, creating contracts, and sending transactions towards contracts and calling arguments on them. So it does the important thing.
00:02:14.076 - 00:02:23.434, Speaker A: Okay, can you give us a little maybe rundown of the various icons and what they do as of today? Obviously, we understand it's going to change, but for the purpose of today, maybe.
00:02:23.552 - 00:02:46.318, Speaker B: Yeah, absolutely. On the left here, you're going to have three icons. The top one is the transactions that you have sent shows to which address it has been sent to, the value of it, the value. The denominators are going to change anyway. I have an updated mine. These are going to change. So we have the value, we have the address and whether it was sent to a contract.
00:02:46.414 - 00:02:47.060, Speaker A: Okay.
00:02:47.990 - 00:03:32.302, Speaker B: The middle one is creating a regular transaction, a simple send, as we call it. So you put in the address and the amount you want to send, and that's it. Then we have the contract part, which is the amount, the gas, the gas price. Whether you want to create a contract or run a contract, when you run a contract, you get an extra field which just specifies the contract address. And the largest field that you see on the screen is. It can either be the arguments that you're going to kind of like the data that you send to the contract and if you would put it on create contract, you can put the actual contract code in here.
00:03:32.356 - 00:03:33.450, Speaker A: Okay, brilliant.
00:03:33.610 - 00:03:41.780, Speaker B: And that's it? That's it. And the last thing would be the in, that's going to show you the blocks and the law. That's it, nothing more.
00:03:42.230 - 00:03:58.326, Speaker A: Okay. And one thing that will be useful for viewers is that this tab at the moment doesn't automatically refresh that. Well, mine shows block 24 and I can see on your screen you're on block 34.
00:03:58.428 - 00:03:59.080, Speaker B: Yeah.
00:03:59.610 - 00:04:05.930, Speaker A: Even though that technically we're currently on 48 according to the console. Maybe you can show the console if you have it open.
00:04:06.080 - 00:04:08.618, Speaker B: Yeah, it's right here. It's kind of small.
00:04:08.704 - 00:04:09.146, Speaker A: Oh yeah.
00:04:09.168 - 00:04:35.714, Speaker B: Okay, there you go. So we have 48. On top of here we have the minor. So the right on top is the minor that I'm currently mining. At the bottom one is actually ethereum running there. And I have another one which is currently running on one of our servers. And that is just a node that you can connect to.
00:04:35.714 - 00:04:38.578, Speaker B: The go client will actually automatically connect to this one.
00:04:38.664 - 00:04:42.534, Speaker A: Okay, so you're running two instances locally and one remotely then.
00:04:42.572 - 00:04:42.966, Speaker B: Yes.
00:04:43.068 - 00:05:00.026, Speaker A: All right, cool, brilliant. So for the purpose of this exercise, people don't need to mind, they just need to have the client open. And if there's not many people running that chain at the moment, is there a way for them to connect to maybe a peer and try it that way?
00:05:00.208 - 00:05:13.022, Speaker B: If they connect, they automatically connect to the seating node. So you connect to it and then whoever is currently connected to it, you will just get passed along and share each other, peers and then they will automatically connect to each other.
00:05:13.076 - 00:05:18.594, Speaker A: And here we can see you're running version zero point 50. Release candidate four.
00:05:18.712 - 00:05:19.234, Speaker B: Yes.
00:05:19.352 - 00:05:22.418, Speaker A: Brilliant. Okay, well, let's get started then.
00:05:22.504 - 00:05:49.494, Speaker B: Yeah, absolutely. I just want to show you a quick thing and that is what we will eventually come up with. So I created my own coin and we're going to sort of redesign it and put your face into it. So you actually have stepcoin. So we have jeffcoin. And let me open it. So this is actually Jeffcoin.
00:05:49.542 - 00:05:50.300, Speaker A: It's beautiful.
00:05:50.670 - 00:06:19.670, Speaker B: I know, it's pretty. So this is actually an external application. So what you can do is you can create your own contract, put the contract code into the network and use HTML and Javascript technology to connect to the Ethereum network and send transactions, get certain pieces of data, just full introspection.
00:06:20.330 - 00:06:25.510, Speaker A: Is that HTML and where does that live? On a web server?
00:06:26.010 - 00:06:28.098, Speaker B: No, it just lives as a local file.
00:06:28.194 - 00:06:32.140, Speaker A: It lives as a local file. How is it distributed amongst the people using.
00:06:32.510 - 00:06:55.562, Speaker B: Oh no, it isn't yet. For example, you create your own staff coin and if you want to have someone else use the same interface, you just send them the file. That's how it currently works. We haven't defined anything on how to distribute yet. Applications.
00:06:55.626 - 00:07:02.802, Speaker A: Got you. So this is just a local file that talks to the underlying blockchain and gives us a test interface to play with it.
00:07:02.856 - 00:07:03.842, Speaker B: Yeah, that's it.
00:07:03.976 - 00:07:04.900, Speaker A: Okay, cool.
00:07:05.270 - 00:07:52.334, Speaker B: So, right, let's start by creating the actual contract, right. For that we need to have two things because we want to bootstrap the staff coin with an x amount of staff coins so that you can manage it and distribute it and send it to other people. So what we can do is we can create a piece of initializing code. That piece of initializing code will run when you send the contract onto the network. So a minor will pick it up. It will first try and run the initializing code. The initializing code, it will store just a number.
00:07:52.334 - 00:08:41.970, Speaker B: And that number specifies the, the amount of value that your coin has as a limit. And what we do is we're saying that we want to store ten to the 20th and we want to give the value that. So in order for you, as in stefan, you, so you can access it and how you access it, we're going to see how that works later. Just assume for now that we're going to store ten to the 20th into the local database of this contract. Okay, why do I say local database? Because it's not really local. But the store is local to this contract. The only thing that can access it right now is the actual contract.
00:08:41.970 - 00:08:52.166, Speaker B: So this store says, I want to access my store, I want to access my database, the database that is connected to this contract, so to speak.
00:08:52.268 - 00:08:53.014, Speaker A: Okay?
00:08:53.212 - 00:09:04.118, Speaker B: And it is a simple key value storage. So the key would be the origin. The origin would be you, the person that is creating the contract.
00:09:04.214 - 00:09:04.810, Speaker A: Right.
00:09:04.960 - 00:09:42.520, Speaker B: And the value obviously is this way. And that's the only thing we really need. So if I were to send this contract onto the network, a miner will pick it up, it would see this piece of code and say, okay, well, I'm going to execute it. And what it will do is it will store this amount into the store of this contract. And the value belonging to it is the originator is the original one, the people, the person that send it onto the network. But by this alone we don't have a contract. It's not going to do anything besides just sitting there being pretty.
00:09:42.520 - 00:10:39.660, Speaker B: We need actual code for it to actually run. So if we send it a transaction, it's going to do something. It's going to do something meaningful, because right now it's not going to do anything at all because it doesn't have something called a main. So what the main will do is it will represent the actual contract, the piece of data that will be stored onto the blockchain, and that is going to live there, and it will execute if someone sended a transaction. Okay, so what we need, so what we want to do is for your coin, in order to send someone a piece of staff coin, if you want to send some stuff coin to someone, what we're going to do is we want to specify someone's address, for example, mine. And we want to have a value because that's the only two things we really need. We need to know the recipient, and we need to know how much you want to send to that person.
00:10:40.110 - 00:10:40.860, Speaker A: Okay?
00:10:41.470 - 00:11:38.540, Speaker B: So what we do is, as I explained earlier, when you run a contract, you can send it like arguments. You can send it arbitrary data. That arbitrary data we can actually read out. And how we can read it out is with something called this data. And the data is also, again, a key value, or like an array. So if you want to access the first element of that piece of data that you send to it, you would just like regular programming, like how you would access an array, just give it an index, and it will return that piece of information that was stored at that index. So what we do is we stored it into a temporary variable into the memory of the VM that will eventually run it.
00:11:38.540 - 00:12:10.754, Speaker B: So we just store it here, temporary so we can access it later. The second thing that we want to have is who's going to actually send this transaction. So if I want to send you some stepcoin or you want to send me some stepcoin, we need to subtract that amount from someone's wallet to the other person that you want to send some coin to.
00:12:10.792 - 00:12:11.970, Speaker A: A bit like a bank?
00:12:12.130 - 00:12:48.650, Speaker B: No, not like a bank, but more like just a money transfer. So you have ten stepcoin and you want to send five stepcoin to me. So what we do is we reduce them from yours and we add some to mine very simply. So what we do is we check who the actual transactor is, which is the origin. It's me or it's you. We want to see what the value is. So what we do is we access the first, or actually the second index, second element into this array.
00:12:48.650 - 00:13:41.330, Speaker B: We store it in a temporary value so we can access it later. So what we're going to do now is we want to make absolute sure that the person that instructed this contract that want to transfer some money, some f coin, we're going to make sure that that person actually has the amount that it wants to send. Because if it cannot send the amount, then the transaction is obviously invalid. Correct. So by specifying an if statement, we say if the person has more value in his account or equal to the value that it wants to send, we can continue on and execute as the contract specify. So I want to do with this piece. We just simply want to reduce from the person that sent the transaction.
00:13:41.330 - 00:14:16.960, Speaker B: We want to reduce the value. So we just subtract the value from the person's address. Now we want to store it to the person that we want to send it to. So we do is we add the value to the person that sent it to. So the two over here that we specified here, this is a piece of information. It's a piece of data that we want to send to someone. So for example, I just have to copy and paste my address real quick.
00:14:16.960 - 00:14:21.034, Speaker B: That is yours.
00:14:21.162 - 00:14:21.838, Speaker A: Beautiful.
00:14:22.004 - 00:14:55.738, Speaker B: Yeah, that was you. So for example, we want to send you some stepcorn. We can put in your address and then we can put in the value. This one over here is the first value in the array. So that would become zero. This one would become the first one, as you can see here, this dot data, and access the first element in that array. That would be your address.
00:14:55.738 - 00:15:02.300, Speaker B: Then the second one, the second index into that element would be the value.
00:15:02.930 - 00:15:34.600, Speaker A: Okay. I think for the benefit of the viewers, there's a couple of questions I already have, I'm afraid. Sure, yeah, go ahead. So I guess that would sort of suggest that the order in which data is organized. When you send data to a contract, transaction to a contract does really matter because obviously can't flip the field. How does one know in what order to send the data, say the contract, accept ten different variables. How do we advertise that fact?
00:15:36.010 - 00:16:08.546, Speaker B: Well, obviously, to be honest, I don't think anyone is just going to send raw data to a transaction. You would usually do that through what I showed earlier, through an interface. Like an interface, because, for example, the receiver's address, I would just put it in and then the amount. But underneath it's just going to combine that data and send the actual transaction to the contract. You're not going to bother with specifying which one was the first one. Oh, yeah. What's the address? And then we have to figure it out.
00:16:08.546 - 00:16:19.400, Speaker B: You don't want to do that, right? You want to create a pretty ue for your contract. And as simple as a coin, you can create a real quick.
00:16:22.490 - 00:16:30.250, Speaker A: Then the second question then probably a little bit more syntax oriented. This is go code, right? It's mutan.
00:16:32.270 - 00:16:33.050, Speaker B: More or less.
00:16:33.120 - 00:16:57.394, Speaker A: More or less? Yes. And what about race conditions? Because here you're running two actions. I don't see any concept of transaction and rollbacks and so on. How does that work on something like ethereum? We don't have to worry about it because it's a single thread and every transaction is processed in the order that arrives or something like that.
00:16:57.592 - 00:17:04.446, Speaker B: Well, actually, no. The miner decides in which order the transaction is going to be executed.
00:17:04.478 - 00:17:13.602, Speaker A: So there can't be a race condition, but there could be a situation by which the miner could decide in which order things have arrived.
00:17:13.746 - 00:17:14.680, Speaker B: Yeah, absolutely.
00:17:15.130 - 00:17:24.390, Speaker A: Got you. Okay, cool. So let's recap on the code itself. The init block is executed once. Is that correct? When the contract is created?
00:17:24.470 - 00:17:24.906, Speaker B: Yeah.
00:17:25.008 - 00:17:40.350, Speaker A: And that first line, this did store. And then the array. And this value, ten to the power of 20. That defines. Yeah. What does that define? Actually defines. This number represent how much storage is reserved?
00:17:40.690 - 00:17:48.738, Speaker B: No. Okay, so you're going to create a contract. The contract creator would be the origin.
00:17:48.824 - 00:17:52.434, Speaker A: So that's my address, right? That's my ether address.
00:17:52.552 - 00:18:15.980, Speaker B: Yeah. Let's assume this is, I was going to say to make it look more readable, but it's not readable at all. Let's leave it at that. So this dot origin would be q. This is u. So what you do here is you would store the key of the store. It's going to hold ten to the power of 20.
00:18:15.980 - 00:18:21.930, Speaker B: So what we could say is you hold ten to the power of 20 staff coin.
00:18:24.110 - 00:18:25.558, Speaker A: Right. Okay, got you.
00:18:25.664 - 00:18:29.550, Speaker B: So you just bootstrap your coin, you're going to hold ten to the power of 20.
00:18:29.620 - 00:18:31.246, Speaker A: Hooray. That's a lot.
00:18:31.428 - 00:18:32.826, Speaker B: So you have a lot of staff coin.
00:18:32.858 - 00:18:33.706, Speaker A: That's brilliant.
00:18:33.818 - 00:18:43.634, Speaker B: Because for a simple coin as this, we need some bootstrap coin. We're not going to create a sophisticated thing. We're just going to create something very simple.
00:18:43.752 - 00:18:46.498, Speaker A: Got you actually on the back of.
00:18:46.504 - 00:18:49.110, Speaker B: The t shirts that we have. This is the contract.
00:18:50.570 - 00:19:06.700, Speaker A: That's right. Okay, so that's brilliant. And then in the main, that gets executed on every transaction. And for every transaction, it's defining a set of variables, I suppose. And those variables are for convenience only. I imagine you could, don't need them. You can just use them.
00:19:07.470 - 00:19:08.710, Speaker B: You could use it directly.
00:19:08.790 - 00:19:12.038, Speaker A: Okay. And big is a big integer, right?
00:19:12.144 - 00:19:13.280, Speaker B: Yes. Okay.
00:19:14.770 - 00:19:25.140, Speaker A: And so in my two field, it's who I want to send the money to. In my from field, it's the address of the sender and the value is the amount I want to send.
00:19:26.070 - 00:19:29.294, Speaker B: So the from is the person that sends the transaction.
00:19:29.342 - 00:19:34.322, Speaker A: Yeah, that's right. And then two is the person I want to send to.
00:19:34.376 - 00:19:35.138, Speaker B: Of course.
00:19:35.304 - 00:19:47.590, Speaker A: And then we do a quick check to see if the person actually has the necessary funds to send this value. And if they do, we subtract from one and add it to the other. So it's a key value per store, so to speak.
00:19:47.660 - 00:19:49.514, Speaker B: Exactly. That's it. Very simple.
00:19:49.632 - 00:19:51.162, Speaker A: Brilliant. Very easy.
00:19:51.296 - 00:19:52.570, Speaker B: Yeah. So if I can.
00:19:52.640 - 00:19:55.820, Speaker A: There's a little typo there. It's from not form.
00:19:59.230 - 00:20:00.380, Speaker B: There you go.
00:20:01.470 - 00:20:07.534, Speaker A: Eagle eye Stefan. Yeah, brilliant. That's pretty easy.
00:20:07.652 - 00:20:38.120, Speaker B: We have actually, because I use bigs here and just assume that everyone knows what a big is. But we actually have a couple of times, we have, the smallest one is actually eight bit integer, which is one byte. You could also write that as a byte. We have 16, we have 32 and we have 64. And then it goes up to 256, which would be a big.
00:20:38.490 - 00:20:51.190, Speaker A: So it sounds like. Because people pay for that storage, right? The contract pays for that storage, yeah. So you'll bear off using the smallest possible container, so to speak, to store the data. Right. To save money. Is that correct?
00:20:51.280 - 00:21:17.380, Speaker B: Yeah. So if I were to specify, for example, something as a int eight, and I only have to put something that is lower than five, then we can do something like ten. If I wanted to, I could do something like that. But it doesn't make any sense to do that.
00:21:17.830 - 00:21:29.642, Speaker A: Right. So the compiler, is the compiler clever enough to try to minimize the footprint of a contract by checking the maximum size of the. Well, they can't really, because they don't know what data is going to try to come in. Right?
00:21:29.696 - 00:21:37.818, Speaker B: No. For example, if we were to have a for loop, we can optimize. We could, but that takes an enormous amount of time.
00:21:37.904 - 00:21:38.730, Speaker A: Got you.
00:21:38.880 - 00:21:42.314, Speaker B: And it's still a work in progress, of course.
00:21:42.352 - 00:21:54.080, Speaker A: So people will have to exercise judgment and use the right data sizes for each variable in order to. That makes sense. Okay, great. Well, I understand. So we can move on.
00:21:55.270 - 00:22:25.260, Speaker B: Okay, good. So now we have the actual contract, and if we put this onto the network, it should actually work. I'm just going to make sure that I have it. So if we broadcast this onto the network, we're going to have a contract living there. It's going to store ten to the power of 20 into the original account, which would be, if I send, it would be me. But if you were to be, it would be you.
00:22:25.630 - 00:22:27.580, Speaker A: So I'm going to press send, right?
00:22:28.190 - 00:22:36.650, Speaker B: You're going to press send. You're going to send it over to the network, and you have your contract. That's it. Well, obviously, you need to put this in gasoline, put in the max.
00:22:36.730 - 00:22:39.642, Speaker A: All right, so explain to us what is gas?
00:22:39.706 - 00:22:58.854, Speaker B: Right, so we have gas. See it as a car needs gas to operate, to run. If you want to drive the car, you need to put some gas in. The car will take you until it runs out of gas, basically.
00:22:58.972 - 00:22:59.446, Speaker A: Right?
00:22:59.548 - 00:23:56.918, Speaker B: So the contract works in the same way. You kind of say like, I want to spend 100 gas on this contract, and I offer a price of 250. So the gas price will be 250. So it would be 250 times 100, and that is the maximum amount of gas that you want to spend on this thing. Okay, so for each instruction, for example, if we're going to go down to the assemble language real quick, give you a very simple example, which would be push. What push does is just pushes a value somewhere into the virtual machine, and so the virtual machine can do something with that value. It doesn't matter what it needs to do, but just let's assume it does something with a number 30.
00:23:57.084 - 00:23:57.750, Speaker A: Okay?
00:23:57.900 - 00:24:17.310, Speaker B: In order to push the number 30 onto the stack into the virtual machine, it uses an x amount of gas. For example, in the case of push, it uses one gas. So what you have to pay for that is 250. Because one times 250.
00:24:17.460 - 00:24:18.320, Speaker A: That's right.
00:24:18.690 - 00:24:48.562, Speaker B: If push one would cost two gas, you would pay 500 for it, and so on and so on until you run out of gas. And that's it. Then it stops. So either way, you have to run out of gas. The contract stops working. For example, if we say stop, then a contract stops as well. Or if we just simply end execution of the contract, it stop as well.
00:24:48.636 - 00:24:56.330, Speaker A: Okay, so when I'm typing those numbers, when I type 100 ether and 250 gas per ether.
00:24:58.270 - 00:25:04.542, Speaker B: No, sorry. 200 and 5250 is the gas price. So you would pay 100 times 200.
00:25:04.596 - 00:25:09.774, Speaker A: Okay, got you. And where does that money go to? I mean, is that subtracted from my ether account?
00:25:09.892 - 00:25:12.510, Speaker B: Yes. So if you create this contract.
00:25:14.870 - 00:25:15.282, Speaker A: It.
00:25:15.336 - 00:25:47.900, Speaker B: Kind of gets converted. Your ether gets converted to gas, and that's it. So the miner is going to run your contract. It's going to convert your gas or your ether to something that it can work with, which is gas in this case then, for example, it only needs 20 gas. So we are left with 80 gas. Where is it going to go? The 80 gas that's left that is not being used is simply being returned to the person that sent the transaction, which would be you.
00:25:48.830 - 00:25:59.838, Speaker A: Okay. So by putting the maximum, because I wrote my own code, I'm not taking any chances because I know my own code is. Okay. And by putting the maximum, I don't risk paying tons of ether. Right?
00:25:59.924 - 00:26:23.154, Speaker B: No, you're not. The only thing that it needs to do is it only needs to create this bit. And it's going to use some value for creating the contract, executing or sending a transaction. It's going to need some gas for the actual storage of the contract.
00:26:23.202 - 00:26:25.366, Speaker A: And those values are defined where? In the white paper?
00:26:25.468 - 00:26:26.566, Speaker B: Yeah, it's defined in the white paper.
00:26:26.588 - 00:26:27.160, Speaker A: Right.
00:26:27.850 - 00:26:31.402, Speaker B: Both in the white paper and yellow paper. I'm not sure about the yellow paper. Okay.
00:26:31.456 - 00:26:33.738, Speaker A: And let's move on then. I'm going to press send.
00:26:33.904 - 00:26:34.522, Speaker B: Yes.
00:26:34.656 - 00:26:38.060, Speaker A: Okay. I'm pressing send. It's exciting. I've never done this before.
00:26:38.830 - 00:26:40.220, Speaker B: So we Press send.
00:26:40.990 - 00:26:50.430, Speaker A: Okay. So it says, I'm looking at my console now for the people who are you press send or did I press. We both press send.
00:26:50.500 - 00:26:51.742, Speaker B: Yeah, I pressed send as well.
00:26:51.796 - 00:26:54.480, Speaker A: Okay, so we both have a coin. Okay.
00:26:55.490 - 00:27:14.930, Speaker B: Now the contract, actually you create a contract and the contract is going to have an address that you can send transactions to in order for it to run the address that you see here. Your transactions have been submitted. And then you see a number here. That is the address of your contract.
00:27:15.010 - 00:27:15.800, Speaker A: All right.
00:27:16.410 - 00:27:19.450, Speaker B: So if you lose it, you lose it. You're shit out of luck.
00:27:20.670 - 00:27:21.900, Speaker A: Don't lose it.
00:27:22.350 - 00:27:38.238, Speaker B: Don't lose it. Absolutely don't lose it. I'm just going to see and wait until the contract has been created. Good. The miner picked it up and the blocker submitted everywhere. Yeah. Good.
00:27:38.238 - 00:28:08.870, Speaker B: So now we actually have a coin, which is kind of cool. We have a coin. So what we can do, we can actually, now we can send something to the, you know what? I know something better. I'm just going to add a Jeff point. Just going to add a Jeff point real quick.
00:28:08.940 - 00:28:09.414, Speaker A: Right.
00:28:09.532 - 00:28:12.470, Speaker B: Put in a new address that we just put from the contract.
00:28:12.970 - 00:28:14.934, Speaker A: That's the web page that we saw earlier.
00:28:14.982 - 00:28:18.090, Speaker B: Yes. So this is the HTML view of Jeff point actually.
00:28:18.160 - 00:28:19.786, Speaker A: And that's on your local machine, right?
00:28:19.808 - 00:28:29.790, Speaker B: This is on my local machine actually. It's in the repository. So if you need an example, you can use this.
00:28:29.860 - 00:28:30.480, Speaker A: Cool.
00:28:32.370 - 00:28:51.298, Speaker B: Let me see real quick. Does it work? Yeah, it should work. Okay, so I put in the new address that I use. Don't worry about the code that specifies there, just assume it works. If you want to look into the code you can just go to the repository.
00:28:51.394 - 00:28:52.280, Speaker A: We will.
00:28:52.730 - 00:28:56.870, Speaker B: And you can just work it.
00:28:56.940 - 00:28:57.560, Speaker A: Awesome.
00:28:58.090 - 00:29:00.730, Speaker B: So we have our new Jeff point.
00:29:00.800 - 00:29:01.590, Speaker A: Brilliant.
00:29:01.750 - 00:29:38.306, Speaker B: It read out the amount that is in my account and then my account only. No one else has it. So yeah, if you would just add it, change the address to what I pasted you this one in the HTML file. We can read from the same contract because the one that is currently in is of an old Jeff coin in another blockchain, an old blockchain that we killed already. So if you edit it then you can read from the same database as I do currently.
00:29:38.408 - 00:29:40.598, Speaker A: Okay, I've just ready to go.
00:29:40.684 - 00:29:53.900, Speaker B: Okay cool. I'm going to send you some coins now, so I'm going to do that now. Just going to send you 1000.
00:29:54.830 - 00:29:55.580, Speaker A: Thanks.
00:29:56.590 - 00:30:20.430, Speaker B: It's going to work a lot anyway, so I'm going to send it to you. And your GUI should update as well. We just have to wait until it finds a new block because the contract has to be so you can see here it's being processed by the miner that's going to look for a correct non.
00:30:20.510 - 00:30:29.262, Speaker A: And while we wait, this stuff we're seeing on screen is the assembly code. That conversion of what we typed in mute on earlier.
00:30:29.326 - 00:30:41.770, Speaker B: Exactly what I said earlier. We had like a push and I didn't put well here it is, push one that cost money. We have some debugging here and now it's working out the hash. It's brute fortunate.
00:30:43.790 - 00:31:11.986, Speaker A: It's just good time to remind people that this is a testnet. There's no point mining except for helping out with the building of the network and that the proof of work algorithm we're using is temporary. Yes, it's not the final one. I just saw something. I just saw something. Yeah. So on my console I can see that it's running closure XYZ and I can see the same assembly code that you have on your screen.
00:31:12.088 - 00:31:12.962, Speaker B: Yes, that's it.
00:31:13.016 - 00:31:14.750, Speaker A: And my GUI has updated.
00:31:14.830 - 00:31:17.742, Speaker B: Yes exactly. You have 1000 Jeff coins.
00:31:17.806 - 00:31:23.266, Speaker A: Wow. And you have 1000 less. Apparently your GUI is also updated.
00:31:23.378 - 00:31:31.526, Speaker B: Yes. So you can see here we had ten to the power of 20 earlier, now it's subtracted thousand from mine and added thousand to you.
00:31:31.628 - 00:31:40.778, Speaker A: So it might be worth if you showed us the HTML code so people understand. How did that work? I mean you get received some type of Javascript binding or something.
00:31:40.944 - 00:32:01.406, Speaker B: Yes, we can go over it really quickly. Let's forget the transaction part for now. Let's just focus on the initialization of the contract first. What we first have to do is we have to request the current key, your private key that you use to assign transactions.
00:32:01.518 - 00:32:02.180, Speaker A: Okay?
00:32:02.950 - 00:32:37.118, Speaker B: So what we can do then is turn it into an address, because that's what we used for the country. And we're going to show you some of that, what we did earlier. Let me copy and paste it real quick. We had this bit. Yeah, this one, the origin. It's the same as saying this one. So we can convert our secret key, our private key to an address, which would be the origin.
00:32:37.118 - 00:33:14.120, Speaker B: If we send a transaction to it, we can retrieve the storage from the jeff coin, the coin, the contract that we created earlier. This is the coin, we can get the storage from that. We can read it, we can read our own address, this bit. So we can read this part directly from the contract and we can see what value is stored in that currently. And we just update our current amount, the storage to that. So what we get is this bit, this bit corresponds to this part of the code.
00:33:14.810 - 00:33:17.706, Speaker A: Did you have to refresh the HTML page, by the way?
00:33:17.808 - 00:33:48.950, Speaker B: No, it does it automatically. So what we do, I'm going to check it out. We have a function which is called watch. So what you can do is you can watch for a specific address and specific storage space in a contract. So what we can do is we want to watch in the jeffcoin storage, which is this part. And the part that we want to watch, that we want to observe, that we want to have changes on, is the address that I currently own. Is that clear?
00:33:49.020 - 00:33:49.830, Speaker A: Yeah, very clear.
00:33:49.900 - 00:34:04.386, Speaker B: Okay. So once that, for example, if something gets subtracted or added to my account, the Javascript is going to be notified of the change, right. And it's going to show you what the value of that change is.
00:34:04.428 - 00:34:12.714, Speaker A: So watch is a bit of a loop, right. Technically, do you constantly query or.
00:34:12.832 - 00:34:44.982, Speaker B: No, it works like a callback. It's a callback, yeah. I notify my client that I want to receive notifications of whatever address that I specify, in this case Jeff coin address. And I want to observe the address space that I own, basically. And if something happens to it, it doesn't have to query, it's just going to be there. And if something changes, ethereum, the network, the go client is going to notify your application so you can act upon that.
00:34:45.036 - 00:34:46.214, Speaker A: Oh, very cool.
00:34:46.412 - 00:34:48.790, Speaker B: So there's no looping involved.
00:34:49.130 - 00:34:51.990, Speaker A: It's most like reactive programming almost.
00:34:52.060 - 00:34:52.998, Speaker B: Yes, absolutely.
00:34:53.164 - 00:34:54.054, Speaker A: Very cool.
00:34:54.172 - 00:35:17.298, Speaker B: So the go client actually has we build a reactor pattern kind of thing. And you can also use tigame functionality inside the go client. So if you want to do go development and you want to leverage the Ethereum network, you can just link or use the package and use the same principle. It's kind of nice.
00:35:17.384 - 00:35:17.998, Speaker A: Brilliant.
00:35:18.094 - 00:35:34.630, Speaker B: Yeah. Okay. So once something changes, as you saw here, I subtracted some from my value and added some. And that's why you saw your change. And that's why I saw my change. That's this bit. Three lines of code actually, too.
00:35:34.630 - 00:35:38.162, Speaker B: That's it. That's the only thing you need. Quite convenient.
00:35:38.226 - 00:35:39.510, Speaker A: It's very easy stuff.
00:35:39.660 - 00:35:45.818, Speaker B: Yeah. So what we then have, if you want to send a transaction that we did earlier. So if I want to send you another thousand.
00:35:45.904 - 00:35:46.778, Speaker A: Oh, wow.
00:35:46.944 - 00:35:48.250, Speaker B: It's going to run this bit.
00:35:48.320 - 00:35:49.258, Speaker A: My lucky day.
00:35:49.344 - 00:36:21.334, Speaker B: Yeah. Send you money, man. So we have the create transaction method, and what it does, it's going to subtract the address, this bit, and it's going to read the amount, which is this bit. And what it does, it's going to pad it with zeros. So the Ethereum network, it's going to understand that it's just going to put it in the right format, let's leave it at that. And it's going to use that data. So we're going to use the address and the amount which was specified here.
00:36:21.334 - 00:36:45.680, Speaker B: So this data is the first element, which is this one, the actual address and the value. That's the second one, that's that bit. So we can use those two fields and we're going to use them directly in our contract and we know to whom we want to send and how much we want to send to.
00:36:47.330 - 00:36:48.954, Speaker A: That's super straightforward.
00:36:49.082 - 00:37:00.354, Speaker B: And then we're going to create a transaction, we create a transaction out of that and we just going to send the Jeff coin and that's it. With the data that we specified into.
00:37:00.392 - 00:37:03.998, Speaker A: The fields and those bindings, are they documented anywhere?
00:37:04.094 - 00:37:31.100, Speaker B: Yep. So we have, on our wiki, we actually have the Javascript API and everything is documented. We have the Ethereum API, so we have get block, transact, create, get key, et cetera, et cetera. So all the things that you're likely needing, you have it right there. Brilliant. You can use it now. You can use it already.
00:37:31.550 - 00:37:45.818, Speaker A: That's wonderful. Well, I think we covered, we're running onto almost an hour now. I think we covered enough ground. And so if there's nothing else, is there anything you want to show Jeffrey before we go?
00:37:45.924 - 00:37:51.140, Speaker B: No. If you have any questions, maybe I can answer them now.
00:37:51.510 - 00:38:19.990, Speaker A: No, I'm all good. I think we'll link back to the forum. So forum ethereum.org for every questions regarding writing in mutant and as well as in LNL and Serpent or two other smart contract languages. We created two new categories today for that purpose. And if you're interested in learning more, and if you're based in London, we're also running hackathons starting on the 24th. The first one is already fully booked, but there'll be plenty of others, so have a look@meetup.com.
00:38:19.990 - 00:38:27.018, Speaker A: Ethereum. And you can find more, more hackathons ready for you there. Thank you very much, Jeffrey.
00:38:27.194 - 00:38:29.946, Speaker B: Thank you very much. Bye.
