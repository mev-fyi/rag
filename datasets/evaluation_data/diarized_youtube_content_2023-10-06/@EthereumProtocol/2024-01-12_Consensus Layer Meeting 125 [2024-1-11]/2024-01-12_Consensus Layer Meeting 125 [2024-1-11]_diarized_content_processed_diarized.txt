00:04:26.440 - 00:07:22.512, Speaker A: Your Facebook. We should be live. Welcome to awkward Devs consensus layer. Call 125. This is issue nine three six in the pm repo general Denav discussion, a bit of a discussion around a fork choice filtering change that's been brought up as to whether should go in or not, and then a couple of other spec items so we can go ahead and get started. Oh, is my audio coming through loud and clear? Okay, it's you, Trent. Okay, cool.
00:07:22.512 - 00:07:49.960, Speaker A: So generally we have a testnet fork, Goreley Fork in six days. There is the blog post out which I believe has releases for all the expected clients, which is exciting as we approach that. Do we have any discussion items in relation to that testnet, in relation to existing devnets, in relation to testing.
00:07:52.700 - 00:07:53.640, Speaker B: Gaia?
00:08:01.200 - 00:08:31.060, Speaker C: Yeah, maybe I can go first. We have a girly shadow fork that was launched like an hour ago or so. It's based off the versions from the EF blog post. So it's kind of like a sanity check that everything would go as planned. And it did. The only node that seems offline is teku Bezu node, but I'm 99% sure that's my fault. I think I used the wrong flag while starting it up and we'll look into getting it on the right chain.
00:08:31.060 - 00:08:45.156, Speaker C: Otherwise, I think there is nothing to note there. We've already started spamming blobs and blobs seem to be propagated fine. And yeah, if you guys have something specific you want to test on there, let us know and then we'll carry.
00:08:45.188 - 00:09:41.060, Speaker A: It out for you. Great. Yeah. Any questions for Perry? Dora the Explorer? Looking really good over here. Nicole. Anything else in relation to testing or the upcoming quartlely fork? Okay, keep moving forward. Let's see.
00:09:41.060 - 00:10:01.800, Speaker A: Okay, Phil added the fork choice filtering change PR to discuss on whether this is being shipped in the upcoming fork. Does anybody, Phil, do you have any context here to add?
00:10:03.770 - 00:10:05.720, Speaker D: Yeah, I can speak on that.
00:10:06.430 - 00:10:07.500, Speaker A: Okay, great.
00:10:08.830 - 00:11:06.022, Speaker D: Yeah, so what was previously decided is that we are rolling out this change within the denote and doing it in a loosely coordinated fashion. Basically this change should be enabled in the main net releases, clients releases, including the nap for keeper for the main. And from my perspective, there are two ways to do that. Is one is that just merging the change before making the release so it appears in this release only. The other one is like enabling this logic conditionally based on whether they did not fork a set or not. The former is preferable by the age. That's the context.
00:11:06.022 - 00:11:39.640, Speaker D: That was what was cited like a while ago when we were speaking about how we want to roll out this change. And also, one thing worth noting here is that probably some of confusion about this change is coming from that the PR that proposes this change hasn't been yet merged, but we decided to set the foreclosure for the main net and merge the PR after that only.
00:11:43.210 - 00:11:45.880, Speaker A: Sorry, your last comment was in relation to which PR?
00:11:46.970 - 00:12:12.720, Speaker D: The PR that proposes this fork choice change that is required with the confirmation rule. It's not yet merged into this stack and some client devs were saying that they haven't started to implement it because of the PR was not merged, but we decided not to merge the PR until the main net epoch is set for the net.
00:12:13.990 - 00:13:07.250, Speaker A: Right. Thank you for the background here. I'm kind of leaning towards now that we're in the launch sequence, that it's probably time to merge it as a signal. Is there actually value in waiting for the NEB epoch to be included? Because that ends up probably on a three week time horizon. And I know that we decided to not do the conditional forking or the conditional logic here, one for simplicity and two, well, simplicity of spec as well as simplicity of testing. And so we won't be doing kind of this conditional test. So I think that most clients are not going to do a conditional logic update.
00:13:07.250 - 00:13:22.760, Speaker A: And so given that we're not conditioning this upon anything other than just getting it out and releases soon. So what do you think? Do you think we should wait until we have the Nevi buck or just go for it?
00:13:27.710 - 00:13:55.250, Speaker D: I personally don't see any problems with merging right now, and it's actually referable to me, but maybe other people have opinions on that. So I merged it and in the next release we'll get test vectors incorporate in this change. We already have them, but they are attached in the comment to the PR, which probably not that handy.
00:13:58.440 - 00:15:00.350, Speaker A: I would support merging it as well. Anybody against merging this this week and having it available as a release very soon and to be the target, it'll be the assumed target of any further devnets and maintenance. Great. And if I remember correctly, I kind of tagged it. I said this is the substantive change. There are a number of, I think, minor helper changes just in terms of being able to reuse logic, but it's really this one line. The or voting source epoch plus two is greater than equal to current epoch.
00:15:00.350 - 00:15:54.520, Speaker A: Okay, anything else on this one? We'll aim to do a release by Monday. Great. Yeah, thanks Phil for catching this. Glad I didn't slip through the cracks. Okay, next up is from Daplian deriving an open API type schema from the Pyspec. Now that we do have the canonical JSon mapping dapline.
00:15:56.400 - 00:16:54.590, Speaker E: Yeah. Hey everyone. So now that we have a canonical mapping from SSC to JSON, we can drop a lot of boilerplates on the peacon APIs. So I wrote a short python script that converts the pyspec into the types that are needed for the API. Plus we can also define the extra types that are SSZ as SSD instead of the classic open API. So in my opinion it looks much cleaner. It's way less code for now, it's not critically important, but for future forks it should alleviate a lot of maintenance, and we can easily ssd everything if we want to later, which is an idea that has been floating around for a while, and this would make it very easy.
00:16:54.590 - 00:18:07.796, Speaker E: I'm bringing this up because it's a change on how the repo would work. So I would like to make sure that there is no one opposed in working with SSD instead of open API, or if we would lose some sort of explicitity that someone finds important with this approach. So with the information that is available right now, is anyone strongly opposed into dropping all that open API boilerplate and just dealing with SSD exclusively? Okay, awesome. Then if you can please take a look at the issue. It's a decent change. It's a chunky pr, so I would work with involved maintainers to try to make the transition as smooth as possible, making sure that nothing is broken. So that's all.
00:18:07.818 - 00:18:08.390, Speaker F: Thanks.
00:18:12.450 - 00:18:17.120, Speaker A: And this assumes a merge of three, five, six.
00:18:20.220 - 00:18:20.970, Speaker E: Yes.
00:18:22.620 - 00:18:27.310, Speaker A: Which I think we've discussed quite a bit and just didn't click the button.
00:18:28.880 - 00:18:31.790, Speaker E: Yeah. So now is a good time.
00:18:32.480 - 00:18:33.230, Speaker A: Great.
00:18:41.830 - 00:18:50.310, Speaker F: I think I might be the winner of the longest time open pr that actually gets merged competition.
00:18:53.930 - 00:19:03.616, Speaker A: There are some prs open up from even older than this. We can go look at them, see if we can beat your record and.
00:19:03.638 - 00:19:06.320, Speaker F: Just make up some shit so they don't get merged.
00:19:14.780 - 00:19:52.610, Speaker A: Great. Thanks divine. Thanks, Jessica. Okay, and finally, pop wanted to bring up pr 3545, which was a proposal from age to modify the long lived standing attestation subnet to utilize, I believe, prefix bits instead of the entire node id pop or age, or anyone that wants to give some more context on this.
00:19:59.460 - 00:20:22.824, Speaker B: Yeah, I think this pr is about using the prefix instead of the suffic to determine the subnet that the nodes are supposed to subscribe to. I think it's a good idea because clearly the entire node id is used to determine the subnet but that is.
00:20:22.862 - 00:20:23.690, Speaker A: A problem.
00:20:28.060 - 00:20:59.444, Speaker B: Because when you want to find a node that are subscribed to the subnet, you have to go to the db five and then do a random walk to find the node that are subscribed to the subnet. But if you use only the prefix, you can just use that prefix instead of the entire node id, and it will be faster in the karamlia dht. I think that is the objective, yeah.
00:20:59.482 - 00:21:04.084, Speaker A: Does the current logic use the suffix or does it just use the entire node id?
00:21:04.282 - 00:21:11.480, Speaker B: It uses suffix, like some bit of suffix, but I think it makes more sense to use only the prefix.
00:21:14.060 - 00:21:37.448, Speaker A: I see. So this doesn't change the grind ability, right? Because it would utilize the same amount of the prefix as the suffix currently. Like if an attacker were trying to grind node ids to take over like a subnet. This doesn't change that calculation, does it?
00:21:37.614 - 00:21:52.108, Speaker B: I think it doesn't change, actually. I think it doesn't change because you cannot prevent the attacker to generate a lot of node id. Right. It doesn't matter. You use the prefix or suffic. That is what I think, yeah.
00:21:52.194 - 00:21:52.830, Speaker A: Okay.
00:21:54.640 - 00:22:19.190, Speaker F: I think there is one downside, actually, which is that if you search the cademlia by prefix, you will not find the subscribe all subnets nodes that subscribe to these subnets regardless. So you're kind of limiting your search to one whatever it is, 64 32nd of all nodes out there.
00:22:21.720 - 00:22:24.890, Speaker A: But couldn't you do that search as well?
00:22:25.580 - 00:22:39.660, Speaker F: You can, but if the reason we're doing the prefix is so that you don't search the whole academia and everybody goes on to change so that we don't do it, then you could. But you don't.
00:22:42.080 - 00:23:10.500, Speaker A: Sure, I guess. I see you can have fast lookups on the kind of honesty assumption here, but if you're heuristic, can also walk on whatever speed it wants to find the other type. But yeah, I don't know. There's two things there. It's like one purposely populating. But those piers still do exist. They still will exist even if nobody's looking for them and provide additional utility.
00:23:10.500 - 00:23:17.130, Speaker A: I get the argument. I don't know how strong I claim the argument is.
00:23:21.520 - 00:23:25.196, Speaker F: I guess neither do I. It's an observable change, though.
00:23:25.378 - 00:24:12.750, Speaker A: Yeah. It also is an observable change in that it's a breaking change. And you would very likely have to condition this upon a fork or have some sort of transition period or something. You can't just put this out and slowly upgrade. Which is a downside, I guess. I don't have much fundamental opposition here, and I would presume most people don't. But I think the conversation needs to happen in this PR is actually how the upgrade would look like.
00:24:12.750 - 00:24:43.300, Speaker A: And given that we're coming up against the NEB, if this needs to be upgraded at a fork boundary, I would presume that it wouldn't go into the NEB at this point. But nonetheless, I think we do need to have the conversation about how this upgrade could occur in that PR. Are we comfortable bringing that question to the PR and hashing it out there, or is there further discussion for this call?
00:24:46.010 - 00:25:07.082, Speaker F: I'll make a comment on the PR, but what I just said isn't a blocker for the pr it comes after. Right? Like having nodes already do this. That doesn't change anything. It's the change in behavior in cademina lookups in clients that is potentially weird.
00:25:07.226 - 00:25:13.440, Speaker A: Yeah. But I do think that independently, like how you actually upgrade this in a live network, has to be discussed in this PR.
00:25:15.890 - 00:25:17.860, Speaker B: Yes, I agree.
00:25:21.230 - 00:25:28.800, Speaker A: Okay. Pop, can you either pose that question or pose an upgrade path in there? We can further discussion there.
00:25:29.650 - 00:25:30.400, Speaker B: Sure.
00:25:31.730 - 00:27:04.080, Speaker A: Okay, thank you. Okay, that is everything that is on the current agenda. I know there's beginning to be discussions as to what we do next. Personally would probably get us a little bit further into the fork before we hash out all individual proposals. But if people would like to open up for discussion broadly about the framing of the fork, kind of, if there's a big thing, what the priorities kind of feel like, by all means, we can begin this conversation. I'm also okay with having a bit more of a structured conversation next time. I didn't give you much to bite into there, but I can come in two weeks if no one's opposed, and give a bit more to bite into to begin the conversation.
00:27:04.080 - 00:27:10.610, Speaker A: Anyone opposed to beginning this conversation on the next call?
00:27:13.720 - 00:27:22.550, Speaker D: Not opposed, but I do have a question. Where is there a place we could in the meantime discuss async? Thanks for the Cl.
00:27:23.480 - 00:28:07.780, Speaker A: There is an open issue on the consensus specs repo, where we have been gathering a list of eips, which right after this call, I can kind of go through and make sure that it is reasonably up to date. I think there's one more comment since I last looked. Right. So. EIP 749-7549 okay, so it is this issue. So either cataloging the information here, there also is a magician thread that is open that does have some dialogue. Anska.
00:28:09.560 - 00:29:07.236, Speaker G: Yeah, I didn't want to kind of get too much into the discussion already. I just wanted to flag that this year we might be in a somewhat unusual situation, especially on the Cl side in terms of kind of forward features going forward where there is this work on the data availability sampling side that it very much has the nature of a feature that usually would be an EIP or something, but just because of the way we structured four, it does not actually require a hard fork or an attached EIP. And, and I think with that comes the risk of it maybe not having quite the same visibility, where maybe we start collecting a piece for the next quark and then we basically say oh, now we have so many things to do, so we can't focus too much on data availability sampling anymore, where that's kind of backwards because that would kind of, because to me data availability sampling really is kind of the highest priority thing to do. So just wanted to flag already going conversations that yeah, just because it's not.
00:29:07.258 - 00:31:05.490, Speaker A: An EIP, we don't, I'm not certain why it wouldn't be an EIP. We had this conversation a bit the other day on some of us that have been working on the peer Das spec, and I think it should manifest as an EIP. It is newly an open pr on the consensus specs repo as of some amount of hours ago, and I think the intent is to couple it with any ip, even it's kind of work in progress status xiaoe did you want to go over some of that? Or at least signal that it exists? Okay, well there's the draft and the intention is to, while we're getting the draft open, to also get an EIP open in relation to it. As noted in the okay, shall we have a mic issue? As noted in the chat, if you did modify the data gas limit, it is a hard fork consensus change. If you don't, you could imagine a pure networking change, but it does beg the question as to why you're doing it. I guess you could make an argument for upgrading to the modified networking before updating the gas limit, but I imagine we would be having those conversations in sequence. But yeah, the intention would be to make this an EIP regardless of how the upgrade path is, and we should have an EIP number for it for discussion by the two week count from here.
00:31:05.490 - 00:32:11.150, Speaker A: Yes, to that issue on the spec repo where we have cataloged things that people do want to bring up for discussion. If you do have additional eips, please get them there soon. Conversation can obviously occur dynamically in the discord or more async in that magician's thread. If there are technical items to touch on, maybe put it in the consensus specs, but we don't have, like, 100% perfect division on where to have these conversations. All right. Yeah. Check out that pdas spec draft, especially if you're on the networking side of things on your client.
00:32:11.150 - 00:33:17.890, Speaker A: Relatively simple, relatively straightforward. Any other discussion points for today? Let's go with Devnet zero after the nav hard fork. Okay, cool. I appreciate it. Thank you. Please get your thoughts organized around how you and your team are thinking about proceeding from here in terms of priorities and upgrades, and we will pick up the conversation in two weeks. Thanks, everyone.
00:33:18.340 - 00:33:23.440, Speaker D: Thanks, everyone. Bye. Thanks. Bye.
