00:00:04.840 - 00:01:04.305, Speaker A: So I propose the following. Since we're hopefully client devs that are here instead of like having, instead of having a discussion, a high level discussion, so how the market is going to be and these kind of things. I want to move to some implementation details and some of the things that change on the timing of block processing. I've had some slides that I presented at Flashbots which I think are actually good for showing the structure of the block and how it changes. So can I just share those and then go over the timeline of a slot again and then we move into what sort of things worry me on the implementation or do you guys think of this in a different way?
00:01:05.245 - 00:01:07.405, Speaker B: Sounds good. Yeah, works for me.
00:01:07.565 - 00:01:45.635, Speaker A: Good. So then let me see, how do I do this though? Most probably I need to do this like this move this guy out and then do this guy as a slide show, which is good. Okay, so let me share a window, this one. So hopefully you can see something. Yeah. And you can even probably see my. Yeah.
00:01:45.635 - 00:01:48.055, Speaker A: Can you guys see the slides?
00:01:48.395 - 00:01:48.811, Speaker C: Yep.
00:01:48.843 - 00:02:38.565, Speaker A: Yep. Okay, good. So this is the atone slot today and I want to remark on just the difference in slot validation, which is, I think there's this important change which is typically blocks are being broadcast at two seconds to get the block to be broadcast. There's already a couple of hops between the builder and the relay, the proposer and the relay, and then there's the validation at the level of the, or at least there's an optimistic validation at the level of the relay. The block is produced and it's typically arriving to nodes at about 2 seconds. And validators have 2 seconds to execute that block, check data availability, execute the transitional consensus and attest to it. And after that we're essentially done for the slot.
00:02:38.565 - 00:03:34.209, Speaker A: We don't do anything. So our CPU is consumed in those two seconds essentially because the other hard competition that we do, which is a slot transition, we all of us cache it at that moment anyways. So on epbs, this is going to change and this is going to change in the following way at about two seconds, or let's say whatever it is, we know that proposers are enticed to try to send their block to broadcast the consensus block as late as possible. So let's suppose that that number is still two seconds. It doesn't matter when that number is, it's going to be the maximum possible that it takes so that it's still possible to process that block and attest to it. We suspect that that time is going to be much closer to the attestation deadline. Because now the block only needs to check the consensus transition.
00:03:34.209 - 00:03:44.485, Speaker A: So this is pre merge information, pre merge computation, which is only check, which is only performing the consensus transition state stake transition function.
00:03:44.785 - 00:03:46.121, Speaker B: Wait. Hey potus.
00:03:46.313 - 00:03:47.041, Speaker A: Yeah?
00:03:47.193 - 00:03:48.441, Speaker B: Can I ask a question?
00:03:48.633 - 00:03:49.365, Speaker A: Sure.
00:03:50.825 - 00:03:54.325, Speaker B: Why is there any incentive to delay the consensus block here?
00:03:54.985 - 00:04:01.089, Speaker A: Because you can still request bids as late as possible. Then that means the builder has more time to give you a better bid.
00:04:01.137 - 00:04:01.321, Speaker B: Yeah.
00:04:01.353 - 00:04:01.725, Speaker A: Yeah.
00:04:01.825 - 00:04:02.445, Speaker B: Okay, makes sense.
00:04:02.485 - 00:04:59.305, Speaker A: So this doesn't change, this sort of timing game doesn't change, but it's actually kind of irrelevant for the network. Now it may cost more reorgs just exactly as they do today. But actually we're going to go over Fort Chase perhaps, but validators are actually forced to reorg late blocks anyways and the builder is going to force them to reorg the block. So if the proposal is actually late requesting the bid, the builders are going to actually enforce that that block is reopened. So validators will attest at around three seconds. In the happy case, which is today, what's happening, A builder will get all of the attestations before the 4 seconds mark. Before 4 seconds, the builder already knows that the block is there, that the block is attested and he broadcasts the block.
00:04:59.305 - 00:05:23.889, Speaker A: This is in a no attack scenario. This is the happy situation. In the unhappy situation, the builder needs to make a decision by six seconds. But the usual case, we are going to be receiving our payloads at around four seconds into the slot. So the builder. So now the crucial time is CL validation. That is still critical, but it's much lower time.
00:05:23.889 - 00:06:00.215, Speaker A: Like on Prism, we are executing the state transition in 70 milliseconds. The builder needs to count attestations. I think this is something that we need to implement. So I think this is something that we might want to have. An endpoint that says give me the attestation count for this current block or give me away from the Beacon API so that the builder queries it and says this block is strong or not. I think this is a new endpoint that we need to implement. I think it's unfair to request the builder to check this.
00:06:00.215 - 00:06:37.865, Speaker A: But anyways, at six seconds the builder makes a choice. It can either send a message that says I am withholding the payload or it sends a payload. And here's the crucial change. We don't need to execute that payload. We only need to have it executed by the next slot by three seconds when we attest. We do not even need to check that the blobs are there. We only need to have the blobs by the next slot at three seconds when we attest the only person that actually has to do this before is the next proposer.
00:06:37.865 - 00:07:19.595, Speaker A: The next proposer only has instead of up to 9 seconds it has only 6 seconds which is up to the cut in the next slot. So the next proposer needs to have already validated this payload and needs to have already checked data availability. But this is still 9 seconds for a testers for execution and 9 seconds for data availability instead of 2 for both. So I think this is a critical change and this is all I wanted to go over. I can go on forever. I have like slides for a lot of things but this is one of the things that I wanted to discuss the timing change. Are there any questions so far?
00:07:20.135 - 00:07:39.493, Speaker D: So I look at my node for data. I currently I think the block arrival time ranges between 1.5 second to 3.5 second I think. And then it's pretty like evenly like between the two spectrum. I suspect it just one spectrum, there's no timing yet. And then, and then the other spectrum, this maximum timing game.
00:07:39.589 - 00:07:39.797, Speaker A: So.
00:07:39.821 - 00:08:07.545, Speaker D: But I suppose they will eventually adopt to this new 3 second deadline and just basically broadcast at a 2.5 second or something like that to push it to the boundary. Right. I guess another thing to note is that instead of gossiping both consensus and execution today, you are only gossiping the consensus part of the block, which is smaller, which the network propagation time will also be shorter as well. That's another note I have.
00:08:08.605 - 00:08:09.425, Speaker A: Yeah.
00:08:11.525 - 00:08:14.105, Speaker B: Aren't you also gossiping the payload though?
00:08:14.485 - 00:08:17.705, Speaker A: No, the payload is only gossiped afterwards.
00:08:18.845 - 00:08:21.997, Speaker B: Okay, you mean after the first round of attestations, right?
00:08:22.101 - 00:08:28.305, Speaker A: So. So the payload is only going to appear after. After the builder has seen all of the attestations.
00:08:28.725 - 00:08:36.655, Speaker B: Right. And just to clarify, the PTC committee is attesting to availability, the payload, not validity as well.
00:08:36.955 - 00:09:15.757, Speaker A: Exactly. So that's why we need to validate it up to the next three seconds. So the PTC only says I've seen the payload or not and the PTC doesn't even give you. Doesn't even wait for head except when you have, I mean when you have a discerning view, a different view from the majority of the network. So what the PTC does is the following. If the payload was there and the BTC voted that the payload was there, you're a validator. You got this PTC attestations and you saw the payload and you saw the payload as valid.
00:09:15.757 - 00:09:36.795, Speaker A: So you need to validate it. Then you assign to that block to the full block, you assign 40% more of the weight. So that's, that's the guarantee. But the thing is that an honest validator anyways, in the typical situation would have the builder's payload as valid and will be its head.
00:09:41.535 - 00:09:49.675, Speaker E: Yeah, I'm sorry, is there any advantage to like delaying the validation of the payload?
00:09:50.255 - 00:10:25.555, Speaker A: Yes, yes, it's a huge advantage. You get nine seconds instead of two to validate it. That means that for example, we are not, we're going to have much less, much stronger assurances on poor choice because there's many times that you can't easily attest for a block and you attest to the parent because you haven't finished executing the block. This means that if we solve like for example the state load bottleneck or if we're in a stateless Ethereum, we can just send huge blocks, we can increase the gas limit a lot because we're going to have time to execute them.
00:10:28.655 - 00:10:34.315, Speaker F: So those doing BTC vote, they would be validating the payload as well, right?
00:10:34.695 - 00:10:57.793, Speaker A: No, they, they own. When you vote, you don't need to validate it. You see the payload with a commitment which has the right hash. So you see the payload where you, what you validate is the signature of the, of the builder. You check that the builder is actually sending that payload, that the hash that is sending is the right hash that was committed in the consensus block and that's it. So it's a signature verification that you.
00:10:57.809 - 00:11:01.765, Speaker F: Do and that's it about the availability of the payload.
00:11:02.145 - 00:11:38.377, Speaker A: That's correct. It's literally payload timeliness committee. So I think this is the big win. This is the best outcome of epbs and it has nothing to do with actual trust assumptions on the relay. There are ways of doing this purely on the EL by changing the L consensus, which have actually better assurances. But this way we are only dealing with the CL fork. It doesn't change at all anything on the EL side.
00:11:38.561 - 00:11:42.497, Speaker B: You mean like moving to a pre state route rather than a post state route?
00:11:42.681 - 00:12:00.137, Speaker A: Right. So you just only assert on the pre state instead of the post state. But this I think is a deeper change on the el. Whether here this change is actually easy. Right. Okay, so that's one of the things. There are two other things that I wanted to talk perhaps.
00:12:00.137 - 00:12:39.965, Speaker A: One is implementation and the other one is design. Let me go quickly over withdrawals because I already mentioned this before. So this is builder safety and I don't care about this, this one. This is a generic situation that this is a better crowd to discuss. We have and we have from time to time we're going to be adding on forks more requests from the EL to the CL that are triggered by the el. And these things now need to be carefully thought about. So this is one complication that happens on epbs.
00:12:39.965 - 00:13:25.505, Speaker A: So this is a good case is withdrawals. Withdrawals are completely determined today without this execution. Withdrawal from 7002 withdrawals are completely determined by the beacon state. We include them in the block and what we currently do is we check that the withdrawals that are expected in the beacon state, they are the same withdrawals that are coming in the block. So that's the check that we do and then we process the withdrawals on EPBs. This is going to change now. We are going to continue deducting the validator when we sync the consensus block.
00:13:25.505 - 00:14:03.325, Speaker A: So we perform the state transition at the consensus side. But now those withdrawals are not fulfilled in the execution layer when we process them both together, when we have the assurance that the execution block and the consensus block are locked in. Now we're going to process the withdrawals, we deduct the validator and then we require that the payload to be valid needs to satisfy the same withdrawals that we've already paid out that we've already deducted. So when the payload appears, the payload is invalid if it doesn't include the same withdrawals that we already paid out.
00:14:04.065 - 00:14:14.565, Speaker F: So peruse. What it means is that if there is an invalid payload, but it's corresponding decon block will still be valid and will be part of the chain.
00:14:15.225 - 00:14:48.635, Speaker A: That's correct. And that means that we're locked on this situation until a payload appears that is valid. So that means that the next beacon block that is processed is not going to process withdrawals. So there's a hatch at the beginning of processing withdrawals that says was the last block full? In the sense that was there a payload in the last block? And if there wasn't, then that means that the last withdrawals weren't fulfilled. That means that we do not process. That means that we do not process the withdrawals for this block.
00:14:50.495 - 00:15:01.075, Speaker F: Okay, this is actually pretty nice in the sense that beacon layer is now a bit decoupled from the execution layer, right? So beacon layer can still chug along.
00:15:01.375 - 00:15:32.353, Speaker A: While that's correct, the beacon chain is going to continue moving on. Something similar happens with these inclusion lists. But I don't want to go there now because that's slightly subtle. But the point is that whenever we have something that is that is tied between EL and cl, the both sides need to fulfill something, then we need to check on them. And there's another extra change which I said, which I don't know. I think this is an API change. It's still not an EL change.
00:15:32.353 - 00:16:18.385, Speaker A: But the point is that now the, the payload, when you process the payload and use fulfill the withdrawals and whatever it is now you need to put in the state that you actually process the payload. That means that processing an execution payload also carries a state transitions on the consensus side. So that means that the execution payload has a commitment to the post state of the B control. Okay, so the way this works is the P node requests the payload, it computes the, it computes the new the state transition on the consensus side, and it adds the state routes of that change.
00:16:20.685 - 00:16:31.305, Speaker E: So like, technically we kind of have like 2 post states, 1 like after applying the consensus block and one after applying the payload.
00:16:31.725 - 00:16:44.825, Speaker A: That's exactly correct. And in fourth choice, if you read for choice, that's exactly how it works. We still have the block states, which is the post states of including the block. And then we have the execution state, which is the post date after including the payload.
00:16:45.445 - 00:16:57.335, Speaker E: So if a slot is full, as in, like, we have the payload as well. Like, is there any reason why we would want to store like the intermediate state as well?
00:16:57.955 - 00:17:17.735, Speaker A: Yes, because you might want to reorder the payload if the builder is malicious and is trying to split the view on whether the payload was available or not. You may have not seen the payload and some other people might have seen the payload. So there are situations where you want to base your block on your head, which is your consensus block, and not the payload.
00:17:19.115 - 00:17:28.827, Speaker E: Okay, so you might need, so you might need to store like two states for each slot in some way. Like if you're caching a bunch of that state.
00:17:28.891 - 00:17:56.125, Speaker A: That's absolutely correct. And the state is minimal. The only change is essentially. So I haven't gotten there on Prism and implementation. That's one of the few things, one of the next things that we're about to do. But I suspect that the easiest is to just make the processing, because on the consensus side, the only process that you're doing is you're adding the fact that the state was full, that the payload was there.
00:17:56.865 - 00:18:02.925, Speaker F: So I can reorg the payload without reorganizing its corresponding beacon block.
00:18:03.265 - 00:18:04.285, Speaker A: That's correct.
00:18:05.905 - 00:18:25.195, Speaker C: But you don't actually really need the post state of the payload, because you just need to know at which payload you're committing to. So you could have the second state Transition even later. Am I right? You could do it lazily.
00:18:26.535 - 00:18:42.195, Speaker A: You definitely can do it lazily. Yeah. So that's. But the state transition is there and yes, the way that we're going to implement it is going to be we're just going to cache the fact that the payload was there and if we need to build on top of the. Of the post state, we immediately produce it because it's a trivial change.
00:18:42.535 - 00:18:51.293, Speaker C: But it changes of the reorg that you actually really have to do that. Well, at some point you have to do that in any way.
00:18:51.429 - 00:18:56.133, Speaker A: Yeah, you need to rehash which is the issue. So you need the parents. The parent state.
00:18:56.269 - 00:18:56.945, Speaker D: Yes.
00:18:58.525 - 00:19:02.665, Speaker A: So the issue is rehashing, but the change is just one or two leaves.
00:19:04.165 - 00:19:10.905, Speaker C: Yeah, for us it's pretty fast just doing that because everything is cached in our SSE representation.
00:19:12.935 - 00:19:46.845, Speaker A: So I don't know what you guys want to go over. So this withdrawals is the canonical example of something that worries me. The other thing, if you want to move the discussion to design. One thing that I was thinking, the people at rig have been pushing for execution tickets and this sort of like other alternative designs as the end game of this. I do not know how to deal with execution tickets at all, but slot auctions seem to be quite possible and an easy change from this.
00:19:49.225 - 00:20:42.017, Speaker E: I had another question before that with respect to local block building. So in case I want to build locally, so the flow would be something like I just request my execution node for the payload and like it will go through the same builder flow, right? Like I will be basically submitting the signed. The signed execution payload header with like the builder index as my validator index. And I also have to ensure that I have sufficient balance on the consensus layer to be able to pay out whatever, whatever fees I have gotten from like whatever payload, whatever the payload is supposed to be paying, paying me out. Is that right?
00:20:42.201 - 00:21:24.985, Speaker A: You can make it to be zero. So, so, so you would request. You will request your own bid, right. So. So I think that the easiest to do here is to overload the get payload, the get payload call, which when you get the payload then you're going to get the actual payload and either the CL can build it or this EL can give you the bid already prepared. I suspect that we want to have the EL giving the bid because I think builders are going to be using that API, but it doesn't matter. But the thing is that for local payloads what you can do for the bid is just put zero, include yourself.
00:21:25.325 - 00:21:26.905, Speaker E: Yeah, that makes a lot of sense.
00:21:28.045 - 00:21:39.945, Speaker D: So another advantage of doing that is that you can actually gossip the payload much earlier as well. You don't have to wait until six seconds to review your payload. You can just gossip it almost at the same timing because it doesn't matter.
00:21:42.125 - 00:22:24.215, Speaker E: And also another question that I had was that like since the. You need to maintain a balance on the consensus layer. So in times of non finality, like with the recent changes on the deposit 6551, whatever, we basically agreed that we don't want to process top ups during times of non finality. So like during periods of non finality, would it be an issue if a builder is not able to top up its consensus layer balance because of some. Is that a concern at all?
00:22:24.955 - 00:22:51.235, Speaker A: Well, I think we're very far away from this being an issue. Right. Validators have 32E. If there are very large blocks that make the builder to run out of funds, I think we're going to be in much deeper problems already by having non finality long enough. So I suspect this is not an issue.
00:22:57.735 - 00:22:59.275, Speaker E: Yeah, okay, that makes sense.
00:23:00.655 - 00:23:24.785, Speaker A: I mean sure, if we are a few months without non finality and every block is just like today or just a couple of epochs without finality and every block is a 30 eth block of MEV extraction, there's something wrong with the chain already. If we're extracting 30 ETH on every block on a chain that is not finalizing, there's already something wrong in the chain.
00:23:26.285 - 00:23:30.705, Speaker F: Or with MaxV you can prop up your validator balance.
00:23:32.245 - 00:23:51.735, Speaker A: Well yeah, but you can't in the situation that you can't in the situation that is described which is were not finalizing. Enrique, you should interrupt instead of like raising hands. We're only a few here. I think in total we're like 15.
00:23:52.515 - 00:24:15.131, Speaker C: Yeah, because I just want to switch the conversation to something else. Actually what Terence said in the first comment was a little bit worrying me, which is in case of latency we could have non progressing, progressing chain. Like can you. Can you elaborate a little more?
00:24:15.283 - 00:24:20.939, Speaker D: Yeah, yeah, yeah. So that was my agenda topic that I wanted to bring up. Right.
00:24:21.027 - 00:24:21.747, Speaker C: Okay.
00:24:21.931 - 00:24:55.993, Speaker D: So yeah, but then we can move towards there if there's. Yeah, if that's okay. Yeah, I guess we can just move towards there. So the motivation was that I started doing this because of peer does was also working on their for choice spac and in their first iteration, not the latest one, in their first iteration they also have block slot voting. So I started comparing these two version of block slot voting between peer does and EPBS to basically see the difference. And then I also like, I mean potency most of this work. Right.
00:24:55.993 - 00:25:21.485, Speaker D: I also look at the current EPBS full choice analysis and then we have some sort of city analysis. For example two slots, you guarantee some builder safety. You assume that current proposal and the next proposer trying to team up against the builder and then try to reor the payload or try or try to make the builder pay. So we have that type of analysis. We also have proposal safety analysis as well.
00:25:21.525 - 00:25:21.701, Speaker A: Right.
00:25:21.733 - 00:25:54.437, Speaker D: We kind of assume that the current builder and the next proposal are trying to screw the current proposal by using proposal. So we have the analysis. But something that I realized that's slightly different is that in the block slot dp, the block spot for choice at the peer side, they have more of likeness analysis. They basically look at what is. So assume the performance is under some really bad network condition. Right. And then your chain grower can stop if it's the block takes four seconds to reach to the other clients.
00:25:54.437 - 00:26:35.883, Speaker D: And I think in our case it's worse because it's three seconds. Right. So then without some sort of like back off like scheme because how peer does does this that say today you have some backup scheme, you have a few skip slots, the backup scheme gets activated and then your empty slot vote doesn't come for the current slot, it comes for the previous slot. So they have kind of this way to like gradually recover the chain if today everything's under best synchrony. So I wonder if for our EPBS case we probably need to do some sort of liveness analysis. I think that's one thing that may be missing. So yeah, I.
00:26:35.883 - 00:26:38.935, Speaker D: So yeah, I am curious for input.
00:26:43.635 - 00:27:48.595, Speaker A: Yeah, so this is an easy change on for choice and I haven't added it yet, but after talking to Francesco in Kenya it was clear that we need the same. So the situation here is that if you vote for empty then so if validators wasn't really clear now, but so validators vote at 3 seconds and if they voted that they haven't seen the block so they vote for the parent, those votes actively vote for reorgan the current block. That means if the committee votes for the parent block, then the honest validators will take the parent as head, will not take the current block as head even though they saw it on time. So that means that if you have a situation where every block takes more than three seconds to process, then every block that arrives votes for empty and empty continues winning. Okay, so that's, that was always the blocker for block slot fortraits. And.
00:27:50.655 - 00:27:58.585, Speaker C: This applies also to the payload. Right? Because there is an active vote of. On. On the withhold. So the missing execution payload.
00:28:01.445 - 00:28:03.173, Speaker A: Yeah, go ahead. I don't.
00:28:03.309 - 00:28:09.789, Speaker C: No, I think like, is there an explicit vote on missing payload?
00:28:09.957 - 00:28:22.895, Speaker A: Well, so there is only a ptc. Right? And that's a cheap. That's a cheap statement. This is the payload appeared and said, I'm missing. And the PTC says, I've seen a missing payload. Right.
00:28:22.935 - 00:28:39.875, Speaker C: Well, if, if that's. If that. That thing actually wins. So that if the majority says I. I haven't seen it, you're saying that it's not an explicit vote on existence, it's only on timing. So if you.
00:28:41.055 - 00:28:48.027, Speaker A: It is. It is indeed. Timing is an existence. Are the same. Right? It's. It's a. It's an explicit vote on the existence of a message.
00:28:48.027 - 00:29:08.695, Speaker A: Either the message is the payload was there or the message is the payload was explicitly withheld. And sure, if the majority of the PTC votes for the payload was withheld, then honest validators are inclined to reorg that block, even if they saw it on time. And that block had a majority of votes.
00:29:09.395 - 00:29:28.775, Speaker C: So this applies also there. I mean, if you see CL coming late, even a bigger payload with even the blobs definitely will come later as well. In terms of network latency, I'm not following.
00:29:29.355 - 00:30:03.407, Speaker A: So the proposer sends the CL block and it arrives late. Right. In that situation, then the builder will not even send his payload. The builder will send a message saying, I am withholding my payload. Because for the builder, the builder would evaluate his own head at that point. So at six seconds, the builder says, give me the head of the chain. And the head of the chain will not be the incoming block with his commitment, because the committee hasn't seen that block.
00:30:03.407 - 00:30:08.675, Speaker A: Therefore it attested for the parent. Therefore the honest majority head is the parent.
00:30:10.105 - 00:30:11.737, Speaker C: Yes. Yes, there is a.
00:30:11.801 - 00:30:16.897, Speaker A: So the builder just says, well, the head is not the head that I committed to, so I'm withholding my payload.
00:30:17.001 - 00:30:22.489, Speaker C: So it's not something that can happen only on the payload. It has to apply.
00:30:22.577 - 00:31:02.821, Speaker A: I think the payload timing issue is irrelevant. Yeah. So in that sense, it's also better CL epds for this issue in block slot. So for peer das, this is a little bit more complicated because in peer das, the latency is more than four seconds to everything, like availability, executing the payload and the checking of the CL block. Here this deadlock happens if every CL block takes more than three seconds to process. But still we need to Add a safeguard against that. Otherwise for choice is just formally not safe.
00:31:02.821 - 00:31:11.105, Speaker A: So you just added safeguard, which is very simple. After 4 or n or whatever constant blocks you've seen empty, you stop voting for empty.
00:31:14.645 - 00:31:27.865, Speaker D: Yeah, Francesco already has a PR for that, so I was pasted to their chat if anyone's interested. But in his fortress he doesn't have the notion of empty, which we have empty.
00:31:31.735 - 00:32:05.281, Speaker A: Yeah, for choice is complicated and I would appreciate a review of that. Fortress is really complicated. It's easy to implement because it just changes to a small piece of code. The complication is reviewing the edge cases. I don't know if anyone has started seeing on implementation. I can say that so far for us it seems that the hardest part is just the networking part. Like the.
00:32:05.281 - 00:32:28.775, Speaker A: You need to add objects for PTC attestations, you need to count them, you need to aggregate them, you need to include them in blocks. So you need to add all of this processing of new objects. But I think so far this has been the only thing that changes. I'm worried about the fork itself. I do not know how. I haven't even thought about it. Like we're going to switch from a destina 4 seconds to a destiny of 3 seconds.
00:32:28.775 - 00:32:46.919, Speaker A: I don't know how hard that's going to be. Those minor things that are part of minor in the design itself might be an issue. Also. This is not an issue. Not a lighthouse, not an implementing. Yeah. So I have no clue how hard those changes are going to be.
00:32:46.919 - 00:32:49.115, Speaker A: The fork itself might be hard.
00:32:51.335 - 00:33:39.507, Speaker E: I had another question implementation wise. So like assuming that like epbs is sort of like the first stage and like later on, like if we have some other execution tickets or design something like that, would that like, do you know if those designs also have this sort of separation between a consensus layer block and an execution layer block? Because implementing that itself would be quite a lot on the implementation side. So if we like switch to this and then again we go back to a place where the consensus and execution layer blocks are combined, then the implementation would get really messy at that point. So I was just wondering.
00:33:39.681 - 00:34:14.805, Speaker A: So I can answer that. So there's three, three answers to that. So three different points. One is no one has an implementation, no one has ever thought about an actual implementation of execution tickets and slot auctions and anything that is not this design of epps. No one wrote any, any Python spec of any of this. All of the discussions so far have been more about a higher level discussion of what. What the right option or the right block spaces.
00:34:14.805 - 00:34:53.547, Speaker A: However, when you come to think of, or at least what seems to be obvious is that when you come to think about how to implement these, these things, you always keep that separation. There's always the notion of an execution payload and the notion of a consensus block and they are separated, none of them. In all of these designs, this separation is always there. The second answer is adding this separation actually is not complicated. Like if it's only on the CL side, this is not really implementation complicated. I am much more worried about other changes like what happens with. What happened with attestations.
00:34:53.547 - 00:35:21.037, Speaker A: We changed the attestation type and this was a fucking mess. And I'm worried about this like we're changing the attitude time now instead of type and I suspect that this is going to be a mess too. But adding the extra, the new state transition, all of these are contained changes. This is a new core function which just takes a payload and it processes it. It's very simple. Those changes are really simple. At least in prison's code.
00:35:21.037 - 00:35:48.271, Speaker A: Those are very, very simple. So that's the second answer. And I had a third one which I. Oh, so the third one is this. So far I'm only aware of slot auctions as an improvement and execution tickets as an improvement. And when. Yeah, that's right, Alex is we would just change in a timer.
00:35:48.271 - 00:35:57.825, Speaker A: But the problem is that this timer happens at runtime at the fork. It's not really clear how easy is it to change that. But anyways.
00:35:58.325 - 00:36:03.025, Speaker B: Yeah, I didn't want to derail what you're saying, but it doesn't seem terrible.
00:36:03.325 - 00:36:06.757, Speaker A: Yeah, we've done the same attestations, that's why.
00:36:06.901 - 00:36:22.311, Speaker B: Yeah, well, the type, I mean, yeah, the type. Because you just have to touch so much more code. But you know, this is just like if epoch blah for if epoch other blah three. You know, it feels okay, but yeah, it might be.
00:36:22.503 - 00:36:38.023, Speaker A: It might work. Okay. So I was going to continue answering to Pawan, but. But Tony's asking also. There is a reward, but the reward is in the current implementation. It's very simple. If we feel that the incentives really warrant a change, we can change it.
00:36:38.023 - 00:37:09.141, Speaker A: Currently the PTC member is just an attest is one of the committee members for that slot. So what they get is either the attestation correct or not. So they either miss an attestation or they get an attestation. They get a full reward of an attestation. It's a very simple way of implementing that. I try to keep it as simple as possible. The spec changes I haven't made Any economic assurances of whether the BTC also the BTC changes on every slot because of this design.
00:37:09.141 - 00:37:15.345, Speaker A: So it's not something that we're going to have a problem if it gets, if it gets owned for one block.
00:37:16.645 - 00:37:19.413, Speaker B: Is there a PTC look ahead like.
00:37:19.429 - 00:37:52.745, Speaker A: Two famous of attestations. It's exactly. You just get the last few members of each committee in the attestation committee. But also the PTC doesn't, doesn't change your head. So if you have seen a payload, it doesn't matter what the PTC told you, that payload is your head. So it only affects against defending for defending against attacks. It's not that the PTC is going to force you to not see a payload.
00:37:52.745 - 00:39:01.711, Speaker A: So the, the thing with all of these extra designs, which I think it's actually quite nice, I haven't done, I mean smarter people than I are looking at this, the economics designs of slot options or whatever it is. What worries me of all of those is the fact that if you haven't committed to a particular payload, then the execution proposer can produce different valid payloads. And if you have different valid payloads. So if you have equations on the payload, the attesters need to vote on which one is the head. And if you run an attestation scheme to count and give them LMD weight, then now you need to worry about slashing conditions for the equivocations. That's the reason we have safety, because we have those slashing conditions when you attest to contending branches. So this was a blocker for a long time.
00:39:01.711 - 00:39:48.635, Speaker A: But then it just hit me that this is not really a blocker because this slashing conditions are for FFG and the payload is not committing to a particular payload, but it is committing to a particular target vote because the payload corresponds to a particular consensus block which already specified what the target is. That means that you cannot have a convocation on targets. So it means that for slot auctions at least it seems that we can just use the exact same EIP and just change. You should not commit the. Do not commit to a particular payload and we can do slot options easily. I haven't included this because. Well, it seems like an easy change if it's dim safe.
00:39:48.635 - 00:40:12.943, Speaker A: And for execution tickets it's different because execution tickets don't even commit to a target. Execution tickets are by the. By the protocol. They are sold. You sold. You sell the right to produce a payload in a future slot and that future slot well might be in a different epoch. Therefore you're not committing to a particular target.
00:40:12.943 - 00:40:23.315, Speaker A: So an equivocation actually can equivocate on ffg. So and this I do not know how to solve. So I think execution tickets. My impression is that it's impossible without increasing the slot time.
00:40:28.695 - 00:40:41.205, Speaker E: So in the case of EPBs it would. You can't have like equivocation, but you can basically have this payload exists or doesn't exist sort of in terms of focus.
00:40:42.785 - 00:40:51.485, Speaker A: Oh right. But the thing is that attestations don't are not. So there's not a round of attestations for the payload. Attestations are only for the CL block.
00:40:53.105 - 00:40:54.285, Speaker E: Okay, makes sense.
00:40:54.825 - 00:41:05.565, Speaker A: So. So you an assessor cannot even equip it. The how big is the PTC Commitment currently is 512 validators.
00:41:06.175 - 00:41:14.115, Speaker B: Yeah, I was just thinking because this is starting to sound like the same committees and then we have honest majority assumptions and. Yeah, it's just worth thinking about.
00:41:15.135 - 00:41:50.085, Speaker A: Yes, so we did. We did do that computation. We checked that it's like the average time for a 33 staker, 33% staker to take over a committee is something like a 30,000 years or something like that. It was fine. Yeah, 512 was fine. The thing is that this is a global topic so it can't be too large because everyone needs to listen to this topic. And I was hoping for 256 but that was perhaps too, too small.
00:41:50.085 - 00:42:18.933, Speaker A: No BTC commitment rotates every slot. Tony. No, Gajinder is asking them every single slot we change the PTC commitment. Everyone is listening to that topic and everyone is computing the committee, the Beacon committee for attestation. So it's easy. I'm not following. Guys, can you speak up instead of like writing the chat is.
00:42:18.933 - 00:42:21.625, Speaker A: We're not that many. It's easy to have a conversation.
00:42:25.375 - 00:42:50.687, Speaker G: Okay. Yeah, I was just asking whether the members that are selecting to be part of the PTC committee just don't have incentives to give good attestations as long as they are part of the PTC committee. Now since they get rewarded based on their BTC contribution and not on their attestation.
00:42:50.751 - 00:43:18.345, Speaker A: Oh, they are not. Their, their attestations are ignored. The attestations of the. So they are removed from the Beacon committee and they are added to the PTC committee of that slot. So their attestations, they only get a reward if they. They attest for the right thing. And it's a little bit tricky in the sense that.
00:43:18.345 - 00:44:04.435, Speaker A: So there are a few things that are not specified. Well, because I figured that this is not worth to add complexity but the proposer needs to pack these attestations in the block so that we achieve consensus on whether reward them or not. Specified that the proposer can only pack PTC attestations for the last slot and no other slot. So that means if a slot is lost, is missed, then every PTC committee member will lose one attestation. This didn't seem to me like a bad thing to do. Also, there's no checks that on equivocations of PTC attestations. So in principle the PTC member would be inclined to sign both it's present and it's not or even three it's present is not present.
00:44:04.435 - 00:44:33.575, Speaker A: And I've seen a withheld message because the proposal will include the right one and that's it. And it wins. If the proposal includes equivocations, there's something that is added there to penalize the proposal for including the wrong thing. But there's no penalty for proposers colluding in that way that if they see every adaptation, they choose the right one and they include it. Okay, I figured this is just too little money to be worrying about.
00:44:34.715 - 00:44:42.215, Speaker E: And also there's no like any slashing conditions for a PTC member equivocating that.
00:44:42.665 - 00:44:57.125, Speaker A: That's right. So that's, that's why. So the slashing is that if the proposal includes them both, then the proposal is penalized. But yeah, so I haven't, I. I don't think there's a danger. Perhaps there is. I don't know.
00:44:57.125 - 00:45:22.399, Speaker A: Yeah, I don't know. Perhaps if the majority of the network is malicious and they. Everyone sends like all possible BTC messages and then the proposer of the next block chooses which one to include. It might, it might have an. It might have an issue, something to think about that's good to add to.
00:45:22.407 - 00:45:34.631, Speaker E: The notes then effectively like it's the next slot proposal who's choosing whether like the payload was seen or not in some sense.
00:45:34.663 - 00:45:34.951, Speaker F: Right.
00:45:35.023 - 00:45:37.555, Speaker E: The PTZ is completely useless in that case.
00:45:38.515 - 00:46:06.199, Speaker A: Well, that's only if the cl. So here the PTC is chosen randomly. So you're assuming that the PTC is malicious. That means that the majority of the network is malicious. And if the majority of the network is malicious, then yeah, anything can happen anyways. But if for some reason the PTC clients, they are hacked on or whatever, they're modded so that they send all attestation but the network is still honest, then it's not good enough. The next proposal.
00:46:06.199 - 00:46:25.875, Speaker A: So this is an answer to Roman, the next proposal cannot reorg the payload or not reorg the block just by looking at the PTC commitment. Because the fourth choice is given to the CL vote.
00:46:27.455 - 00:46:39.535, Speaker F: So why can't we have PTC slashing on PTC vertical location? In the sense that they are waiting for the same block but in different outcomes we can.
00:46:39.915 - 00:46:50.139, Speaker A: Slashings are just difficult. Slashers are expensive. You need to add these conditions. You need to add processing it's complexity that it's not. It's not. It wasn't sure if it's worth it.
00:46:50.307 - 00:47:14.865, Speaker C: But in the GOSP rule we could still apply the rule that we. We send over the network only the first for the same. So it's already there. So it means that the second option and the third option are less likely to be distributed over the network. So. Yeah, but definitely less effective.
00:47:16.325 - 00:47:27.905, Speaker E: Also. Also in the case of. If we. If we wanted to add a slashing condition it would essentially be a double vote slashing. Right. That's the only thing that a PTC member can do.
00:47:28.205 - 00:47:44.865, Speaker A: That's correct. But also if so this is. This requires also the proposal of the next law to be. To be choosing correctly. Right. Because you need to achieve quorum. So you need to have at least half of the network that sent that sign for the same thing.
00:47:44.865 - 00:48:11.445, Speaker A: Yeah. Around the PTC side. I'm not. Not particularly worried. The only thing that worries me is that the PTC vote gets on time. In the happy case it seems that this is going to be easy because well, the payload is going to be available at 4 seconds. The PTC committee can vote for it at 4.5.
00:48:11.445 - 00:48:36.073, Speaker A: So the current deadline is 9. But I expect that on the typical slot going to see the PTC vote at 4.5. Ah. Modulo something that I haven't told Rick to analyze. There's the following problem. This is a problem. The builder of the current slot sees at 3 seconds or 2 seconds or whenever the payload appears he sees a commitment to his block and he has that information.
00:48:36.073 - 00:48:48.535, Speaker A: He knows that block, no one else does. So question does the builder delays the broadcast as much as possible or not? I do not know.
00:48:50.635 - 00:48:53.175, Speaker E: Wait, why would they want to do that do that?
00:48:53.595 - 00:49:03.775, Speaker G: Because it's obvious. Is it adversarial? Because then like other people don't have information on time to start building the next block.
00:49:04.075 - 00:49:32.457, Speaker A: Exactly. And I've been told by Flashbots when I gave that speech to Flashbots they told me it doesn't really matter because the six seconds that any waste by default the the searchers will have is more than enough to search to build oh shit. We're already 50 minutes. I feel like I took over this meeting anyways. So I've been told that this is not really an issue, but it's. It's something to keep in mind that it might be. I haven't.
00:49:32.457 - 00:49:37.857, Speaker A: I hadn't realized this until a couple of weeks ago, but I also.
00:49:37.961 - 00:49:38.765, Speaker G: Interesting.
00:49:40.145 - 00:50:10.485, Speaker D: Yeah, sorry. But it's also like, I don't think we have visibility on the builder game. There's something we probably will need help on talking to the builders. They will be able to give us input. Because if you really play the builder timing game right, you can get like nine seconds to build versus the next builder can only get three seconds. Because I will just delay my reveal at the very last second of the PTC deadline, such as that I only get three seconds and I suspect there may be a compounding advantage there. If today I win the slot, I.
00:50:10.485 - 00:50:15.915, Speaker D: I win the next slot and I can just keep playing this game and just be the winner forever.
00:50:18.415 - 00:50:35.315, Speaker G: In that sense, it really does sound like proposal timing games. Like if you play the game all the way, like you can. Like if everyone delays to the max, then everyone gets the exact same reward. But it's still interesting to look at.
00:50:37.185 - 00:50:52.005, Speaker A: Yeah. So this is one of the reasons why Barnabas suggested that we shorten the deadline for the PTC vote so that the builder is forced to broadcast immediately. And so we shorten the time between PTC vote and builder's reveal.
00:50:54.745 - 00:51:02.925, Speaker G: Yeah, that sounds also kind of right. Because the builder is supposed to be sophisticated and well connected anyway. So it's not like.
00:51:03.475 - 00:51:15.775, Speaker A: Yeah. And in any case, anyone that is a home staker would be revealing like six seconds before. So it's not a problem for home staker. Right. I'm not against this. It seems the right thing to do. To do that.
00:51:15.775 - 00:51:35.105, Speaker A: Guys, we have like eight minutes. I know you have said that you haven't started implementing it, but I wonder if you have questions about like or opinions on what do you think it's going to be hard? What do you think is going to be easy? What do you think we should probably change?
00:51:35.845 - 00:51:51.245, Speaker D: I think one thing is that if you look at our current spec, it's gonna change. Our current spec has inclusion this in there and I don't think inclusion this will be. No, no eip. So you probably wouldn't. Yeah, so don't look at the current stack. That's POTUS PR number too.
00:51:51.325 - 00:52:15.205, Speaker A: Yeah, yeah. I promise I'm traveling tonight. I promise that in the next few weeks, like say two to three weeks. I will, I will try to have the EIP ready. It's not really clear that's going to happen, but it should be soonish that the full EIP will be opened and it's going to be without inclusion list.
00:52:15.585 - 00:52:24.155, Speaker F: On the Lotus side. I would like to start working on it as soon as basically the spec is clear and the documents are available.
00:52:24.575 - 00:52:52.137, Speaker A: So if you take the current spec, so turn size not to look at it, but if you take the current spec, it's trivial to remove inclusion lists. So just grab the current spec and remove everything that says inclusion list. The documents are completely. So if you look at my hack MDs, I put an entire annotated spec already. Like every single function is annotated in those hack and D's there are two large hacking disk. One is purely for. For choice.
00:52:52.137 - 00:53:12.925, Speaker A: For choice is not changed except the availability of the inclusion list and so you can just either assume that we could for example implement an EIP with empty inclusion lists by default that doesn't touch the. So we could ship with empty inclusion list.
00:53:13.385 - 00:53:19.885, Speaker F: Maybe if you know, I convert to story. I mean is there any place where those links are handy?
00:53:21.625 - 00:53:42.015, Speaker A: Yeah, so my, my pool has everything. It's just that I'm opening up. Let me just. Yeah, there's every. Every large the. Yeah, look at the two links in that pull request. That pull request has all of the specs itself.
00:53:42.755 - 00:53:45.467, Speaker E: Is it one or two? Which, which one is the right one?
00:53:45.611 - 00:53:46.779, Speaker D: It's the second one.
00:53:46.867 - 00:54:03.855, Speaker A: Yeah, I. The second one doesn't have Max, CB and 7002 so it's easier to read. The EIP needs to include them because it's going to be on top of Electra. It's going to be harder to read on top of the net.
00:54:05.275 - 00:54:09.555, Speaker E: So the implementation you guys are doing, it's on top of Electra.
00:54:09.975 - 00:54:26.675, Speaker A: Well, it was on top of the NAB and now we're moving to the top of Electra. Because I'm hoping that it's actually going to happen on. On the fork after Electra. I mean of course if everyone coincides and everyone has everything ready, then I'm going to push for Vectra but. But I'm hoping that this is going to be in the F fork.
00:54:27.855 - 00:54:30.228, Speaker F: So this is Electro 3.
00:54:30.438 - 00:54:34.415, Speaker A: Sorry, I mean I.
00:54:34.624 - 00:54:41.741, Speaker F: Just joking but this is Electro 3.
00:54:41.950 - 00:54:48.125, Speaker A: Electro 3. What? Oh, Electra 3.
00:54:51.425 - 00:54:53.485, Speaker D: I think it's a joke. Yeah.
00:54:58.425 - 00:55:01.775, Speaker A: Yeah. So, okay, so we have like four minutes. I'm not sure.
00:55:02.475 - 00:55:14.995, Speaker D: One thing that you brought up I missed earlier is that like for the sync committee, the current deadline is 4 second. Right? Does it make sense to change the sync committee deadline between 4 second to 3 second to align with the station deadline? Right.
00:55:15.115 - 00:55:35.961, Speaker A: Shit. I haven't even thought about this. Yeah, yeah, yeah. It has to be the same. I haven't touched the syncomidi specific. Okay? Someone take note of that. I have.
00:55:35.961 - 00:56:05.603, Speaker A: I do have. Oh well, Tony put a lot of questions. I can reply to one of the specs today. Who does that job? Beacon Committee members, because we want the. And I have a good understanding as to why this has to be the case. We want that community to be changing every slot so that it's not taken and you cannot own several blocks in a row. And the Beacon Committee already does this, so you can just take the same sapling.
00:56:05.603 - 00:56:28.839, Speaker A: Is it rewarded? Yes, and it has to be rewarded. Do we want it to be very much deeply rewarded? I don't see why the committee is chosen at random and threshold is 50%. So you're already broken anyways. You don't take 50%. So I think just an attestation is fine. Vanilla clients are going to be enticed to attest correctly. Interference with attestations.
00:56:28.839 - 00:56:51.577, Speaker A: I don't know what that is. PTC can easily get split viewed. It's fine, but it doesn't help anyone. So the builder that wants to create a split view is useless because the next proposer already syncs the view. So the builder can only damage itself. It's not going to create a fork at all. The payload is either there or is not there.
00:56:51.577 - 00:57:08.725, Speaker A: The PTC only gives a boost, so the next proposer enforces the boost and that's it. So PTC is not really important. The PTC is only there to give a guarantee to the builder. So the builder is inclined not to overload the ptc. The builder is trying to use the ptc.
00:57:14.915 - 00:57:18.895, Speaker F: So the reveal payload is bundled with the next block or not?
00:57:19.515 - 00:57:33.655, Speaker A: No, the payload is sent by the. By the. By the builder and it's processed in the CL as just a new block. A new block type.
00:57:36.605 - 00:57:48.905, Speaker F: So if the next proposal. I mean it's basically colluding with the previous proposal and the payload is not revealed, will it cause any issues?
00:57:49.565 - 00:57:50.545, Speaker A: I'm sorry.
00:57:52.285 - 00:58:10.195, Speaker F: So if the next proposal is colluding with the current proposal and the payload is not revealed to most of the people and let's say the PTC vote was not enough as well, so would it have. Will it cause any problems?
00:58:11.375 - 00:58:23.555, Speaker A: Can you repeat? So you have proposal of N, proposal of N +1 colluding and yes, and the builder doesn't reveal.
00:58:24.735 - 00:58:43.125, Speaker F: And yes, so basically N proposer gave the payload to builder N1 to propose an N1, but the payload is not revealed to the rest of the rest of the validators. So would that be an issue?
00:58:44.185 - 00:58:47.885, Speaker A: No, no, not at all.
00:58:50.425 - 00:58:52.481, Speaker F: Because all of these case.
00:58:52.553 - 00:59:25.135, Speaker A: All of these cases are analyzed in this four choice situation. Like if the proposal of N plus 1 produces a block on top of payload that you haven't seen, then you cannot even validate that block until you get the payload. It's just the same as today. If you're a proposer and you hold two blocks in a row and you withhold your first block and then you send the second block, no one is going to sync that block until they get your previous block. Is exactly the same as with two consecutive consensus Consensus blocks.
00:59:27.795 - 00:59:54.225, Speaker C: Another thing I was wondering it just because the idea came out in my head now. Is there. Is there a possibility to. To make sync committee being the PTC as well? It means that you have the same sync committee that starts voting for for PTC as well instead of. You don't have so new messages. Just change the messages. And this vote for two things.
00:59:57.125 - 01:00:04.425, Speaker A: Oh, oh. You want to overload the sync committee so that you remove sync committee attestations and you.
01:00:06.525 - 01:00:27.565, Speaker C: Want them to vote on two things so they play the role of the sync committee. Plus being the PTC depends by when the sync committee happens. If the competency happens in a consistent way compared to the ptc, they could be moved.
01:00:27.725 - 01:00:50.591, Speaker A: Yeah, this is probably doable. But the problem with that is that sync committee attestations are aggregated and so PTC attestations cannot be. This is the reason we wanted to have a very small committee that that kind of test every slot and the attestation needs to quickly get to every node. Right.
01:00:50.623 - 01:00:53.967, Speaker C: There is a round of aggregations in committee as well.
01:00:54.071 - 01:00:54.399, Speaker A: Yeah.
01:00:54.447 - 01:00:58.675, Speaker F: And the rotation times are also not same here. We want rotation FD slot.
01:00:59.295 - 01:00:59.647, Speaker E: Yeah.
01:00:59.671 - 01:01:05.515, Speaker C: I mean you could give up on this rotation if that makes sense.
01:01:06.855 - 01:01:21.935, Speaker A: I agree that we could overload. But then we need to remove aggregation on sync committee and that I think. But also having a long running committee like this, that's takeable. That's. That becomes a danger.
01:01:23.155 - 01:01:24.015, Speaker C: I see.
01:01:26.595 - 01:01:40.305, Speaker A: Right. Someone asked about incentives. I think this is probably not a discussion. To have two minutes before the end of the meeting. Probably add this to the agenda in the next breakout. In two weeks.
01:01:40.685 - 01:01:44.785, Speaker B: Yeah, next breakout. We could take an hour just on my question.
01:01:45.365 - 01:02:19.865, Speaker A: Yeah, there's already like a lot of literature on that. If you look at my own slides there, there's there's a good argument against the document by Mike and Thomas & Co. On relays after EPBs. And I think I'm, well, I'm always, I'm always thinking that, that we have the right design. All right. So if there's nothing, we can probably close here and meet in two weeks, hopefully with people doing something.
01:02:21.045 - 01:02:29.615, Speaker D: Also, feel free to drop the questions in the EPBS discord. I think there's a few questions that we missed to answer. But, yeah, just drop it there. We're helping. Thank you, guys.
01:02:29.915 - 01:02:33.691, Speaker A: Thank you very much for everything. You took notes, Terrence. Right? There were some.
01:02:33.763 - 01:02:36.255, Speaker D: Yeah. I will share notes.
01:02:36.995 - 01:02:38.095, Speaker A: Thank you very much.
01:02:38.675 - 01:02:39.579, Speaker B: Thank you.
01:02:39.747 - 01:02:39.955, Speaker D: Bye.
