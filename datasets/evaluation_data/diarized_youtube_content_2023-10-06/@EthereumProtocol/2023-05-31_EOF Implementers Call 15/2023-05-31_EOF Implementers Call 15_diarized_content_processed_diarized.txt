00:00:00.410 - 00:00:16.160, Speaker A: Hey everyone, welcome to the EOF implementers call number 15. Let's go ahead and get started with some client updates. Does anybody want to have, anybody want to share some of the updates they have had in the last few weeks?
00:00:22.530 - 00:00:23.390, Speaker B: Hyman.
00:00:25.730 - 00:00:31.074, Speaker C: From Nethermine, from Nethermind side, you are very quiet.
00:00:31.122 - 00:00:32.040, Speaker D: I'm on.
00:00:32.410 - 00:00:53.420, Speaker C: Okay. From Nethermind side, we prototyped the three call opcodes, the call, delegate call and static call. Two, two, two. And we fixed some bugs and that is mostly it to be honest. We did some here and there.
00:00:58.130 - 00:00:58.494, Speaker B: Great.
00:00:58.532 - 00:01:00.430, Speaker A: Thanks for the update Dana.
00:01:02.690 - 00:01:31.880, Speaker E: Mostly I've been focusing on the new random calls and come up on that came up for Cancun. I haven't done the pay but the m copy and I've been doing some optimizations for call to get ready for call too. That turned into a deep, deep rabbit hole that I probably went too far in some areas on with undo lists. Yeah, I guess my main question with memory copy is this might be the wrong call for that, but what the concern from the testing team is about why it's not easy to put in. But that's not for this call.
00:01:35.750 - 00:01:44.040, Speaker A: Yeah, maybe we have a minute to talk about it later we can. Did we say that McOpy was going into Cancun or is it still up in the air?
00:01:44.410 - 00:01:53.660, Speaker E: It's still up in the air. We didn't have enough time to talk about it. We spent too much time on I think Ssz or we spent too much time on self destruct is ruining my business.
00:01:55.950 - 00:02:14.260, Speaker A: Right. Okay. Yeah. If we have a man, let's try and mention that this is the EOF EVM and friends. And so anybody who's trying to change VM has to band together. Epsilon, do you guys have anything to mention for EV one?
00:02:21.130 - 00:02:37.420, Speaker F: We have merged data opcodes implementations, that's one update. And some other work is in progress like call new calls implementations and delegate call restriction and create three.
00:02:39.310 - 00:02:40.060, Speaker D: Yeah.
00:02:44.450 - 00:02:58.990, Speaker A: Great. Any other client updates, any compiler updates in the last few weeks.
00:03:12.620 - 00:03:13.610, Speaker B: Makes sense.
00:03:15.340 - 00:03:18.840, Speaker A: Spec updates, questions? Comments?
00:03:30.480 - 00:03:39.360, Speaker F: Yeah, I think there's some updates from, we really tried to merge some of the saying EIP PRs.
00:03:42.260 - 00:03:42.944, Speaker B: I think around.
00:03:42.982 - 00:03:46.240, Speaker F: The delegate call restriction, the RJamp.
00:03:48.020 - 00:03:48.528, Speaker B: Numbers.
00:03:48.614 - 00:04:49.860, Speaker F: And I think we just run into some under specified pieces. If I recall correctly, Pavel was working on that. But I think besides that, most of the focus has been spent on the calls 2.0 discussion and we also had like an internal discussion regarding the opcode renaming because basically we have all the UF stuff implemented in EVM one as well as m copy and m copy. Based on the new table the m copy uses the r jump v upcode number. And we were wondering if now we need to change every single UF opcode and update the state test in order to unblock any further work on McOpy and anything else. But we agreed that the new opcode structure is nice so we want to do it.
00:04:49.860 - 00:04:59.450, Speaker F: You were just wondering if we could delay the work because changing all the tests is quite a bit of work. That's it.
00:04:59.980 - 00:05:18.880, Speaker E: I've got the table on lists ready to check into the execution spec. But I don't know which buttons to push to get it reviewed or merged. It's not terribly clear in that process who is the right person to pursue to get a.
00:05:21.330 - 00:05:21.742, Speaker B: Uh.
00:05:21.796 - 00:05:24.900, Speaker A: So I think Sam Wilson is.
00:05:26.310 - 00:05:26.770, Speaker B: Yeah.
00:05:26.840 - 00:05:52.410, Speaker A: One of the main maintainers of that repo. I'm also a maintainer of the specs repo and can review it and Tim also. And since we did discuss it on all core devs and people seemed okay with. Yeah, I don't see a pr in there right now but if you open the pr we'll see it and get to it. So then I guess just the question is when do we want that to sort of become active?
00:05:53.390 - 00:06:33.628, Speaker E: I think relatively soon. I think it'll be a great divider between big Eof and mega Eof. Not just the few opcodes but the full renaming of stuff. So it'll make a good line in the sand between the two generations. One open question. There is a request to move create three into the e block. And another sub question from that is do we put it at EE or do we move it around? So it's create three, create four return contracts.
00:06:33.628 - 00:06:41.220, Speaker E: So create three is EC, create four is Ed and return contract as EE. And then we reserve EF for compatibility.
00:06:46.940 - 00:06:54.696, Speaker A: What do you mean reserve for compatibility? Isn't it already banned in 3541 as.
00:06:54.738 - 00:06:56.960, Speaker E: The first byte but not as a byte in general?
00:06:57.110 - 00:06:58.450, Speaker A: Yeah, you're right. Sorry.
00:06:59.300 - 00:07:05.488, Speaker B: I see it.
00:07:05.574 - 00:07:09.430, Speaker A: Does that sound okay with people? I don't think I have an opinion on this.
00:07:23.270 - 00:07:24.786, Speaker B: It. Okay?
00:07:24.968 - 00:07:27.910, Speaker A: Yeah, that sounds fine to me.
00:07:28.060 - 00:07:30.630, Speaker E: I'll get that updated pushed up before I go camping.
00:07:32.010 - 00:07:58.300, Speaker A: Great. Let's see. One thing I was thinking on this is if it would be possible to have the table have all of the opcodes contiguously as well and maybe have a section for the proposed. What do you think about that?
00:07:58.670 - 00:08:10.910, Speaker E: There are four pages right now. There is a pending opcodes page. There is an all opcodes page. There is a blocks page and there is a page listing every proposed opcode ever in the history of eips.
00:08:11.250 - 00:08:11.854, Speaker B: Perfect.
00:08:11.972 - 00:08:12.686, Speaker A: Yeah.
00:08:12.868 - 00:08:16.560, Speaker E: That hasn't shipped. Once it ships it gets cut from that page.
00:08:17.250 - 00:08:18.414, Speaker B: Sweet. Yeah.
00:08:18.452 - 00:08:32.950, Speaker A: I think it would just be cool to have a list of every opcode and then maybe if there is still contention around two things going for the same opcode have it clear. Like what are all the things that have been proposed for this specific opcode?
00:08:34.730 - 00:08:58.914, Speaker E: That's a long list. And there's a long list of stuff that's been abandoned which is why I separated it into proposed and there's pending and proposed and pending is stuff that has been talked about recently on all core devs and proposed. The only requirement is that you've published an ep and asked for an. Yeah, a lot of those where the opcodes have already been overwritten for the proposed. But I have an updated west state proposed.
00:08:58.982 - 00:08:59.550, Speaker A: Right.
00:08:59.700 - 00:09:02.110, Speaker E: But the pending list has no conflicts.
00:09:02.530 - 00:09:15.410, Speaker A: Great. Yeah, so I think that in the list of all opcodes if we just have the pending ones there as well so we can kind of have that overlay to see the overall layout with the pending applied is useful.
00:09:16.390 - 00:09:23.890, Speaker E: Okay, so I'll make a fifth page or I'll do another section under pending opcodes.
00:09:25.450 - 00:09:32.200, Speaker A: Yeah, whatever you think. And then we can see what comes out of it on the pr. But I think it'll be fine.
00:09:35.950 - 00:09:38.090, Speaker E: Okay, I'll add that table.
00:09:40.670 - 00:09:59.630, Speaker A: Sorry Alex, you mentioned not wanting to make this change around m copy opcode for a little while. When would be good to come with these new opcode organization?
00:10:03.170 - 00:10:40.590, Speaker F: No, I mean it's fine. It's just quite a bit of work to do the UF test updates because I think we spent, I don't know, a really long time changing all of them from Shanghai to Cancun. And of course we need to change that to Prague and also have the opcodes. I think it's going to be like two weeks worth of work. It's just an insane amount of tests we have. All of them need to be refilled.
00:10:42.850 - 00:11:14.890, Speaker A: Okay. Yeah, I mean I think probably best then is to have a note in the mega EOF spec that these are the opcodes and we can continue moving forward with the opcode table that Danos come up with the assumption that this is like where things are moving but not have any kind of further EOF work blocked on moving those tests over and that can be done at some later point. Does that seem okay for everyone or is that too confusing?
00:11:21.760 - 00:11:23.070, Speaker E: That seems fine.
00:11:24.880 - 00:11:40.050, Speaker A: Okay, let's plan on doing that. Other spec questions updates hi, man.
00:11:42.580 - 00:12:07.720, Speaker C: Hi. I heard in the, I think, 4844 call that they are thinking of invalidating that the two field in the transaction, in the new transaction format will not have a null value or will be invalid if it has a null value. So will that affect the new transaction format that we have for EOF?
00:12:13.980 - 00:12:17.800, Speaker E: So what would the alternative be for create transaction all zeros?
00:12:19.340 - 00:12:20.090, Speaker C: What?
00:12:20.460 - 00:12:26.904, Speaker A: There will not be a create transaction for blob transactions, so we're banning creates there.
00:12:26.942 - 00:12:29.630, Speaker E: That's no creates for blobs. That's good.
00:12:31.840 - 00:12:59.670, Speaker A: I generally think it's positive because we, as you all know, have to come up with all of these tests for all the different scenarios. And so transaction creation is this other annoying scenario. We have to then test every other thing as part of. So I think with EOF, the transaction changes we need to do. We're going to have to do that separately anyways. So it seems okay.
00:13:02.200 - 00:13:24.430, Speaker F: I mean, with the create for design, we didn't have a create transaction. That was the point. It would be just these extra payloads. If somebody wants to create deploy from an EOA, then they just use the legacy via transaction before. Four, four, four.
00:13:26.400 - 00:13:27.150, Speaker B: Yes.
00:13:31.700 - 00:13:54.670, Speaker A: Perfect. Other spec comments? Questions? Do we have anything to talk about?
00:14:06.120 - 00:15:19.640, Speaker D: Yeah, well, from. I said not much. I've tried to include evm one into the execution spec test, python tests to be able to fill the tests, and this proved to be a little bit more complicated than I expected, so I couldn't manage to include evm one yet. It's not a matter that it's not possible, it's just that I didn't have enough time to spare for this, so I just need to work on it a little bit more and we should be able to fill tests using evm one. I think things would be a little bit easier if there was a get implementation, but if we want evm one at some point to be able to fill the python tests, I think it's worth fixing this interfacing between the Python test and evm one to be able to fill tests in the future. But yeah, apart from that, not much from my side. Cool.
00:15:19.710 - 00:15:45.120, Speaker A: Yeah, I think for EOF, it is really useful to have evm one as the test filler for the spec test, just because I know the epsilon team is familiar with it and snife that they're kind of the main maintainers of it. So if we can get that resolved some point in the future, I think it'll really help the testing effort.
00:15:46.580 - 00:16:09.960, Speaker D: Yeah, definitely. I don't have a specific into. I think it's just a matter of fixing the types that we are passing to evm one because it's complaining about types. Not much to share from that. I will just keep on trying eventually.
00:16:15.060 - 00:16:19.920, Speaker A: It would probably be nice if there was a better spec for the t eight n tool, frankly.
00:16:24.440 - 00:16:32.468, Speaker D: Yeah, definitely because we only have the get implementation to follow I guess. So that's an issue basis tried to.
00:16:32.474 - 00:16:49.470, Speaker E: Implement ta n off of making it compatible with the execution little spec, so there's somewhat of a working tan b eleven r tool there. But you got the startup time issues there so you need to compile it to grawl, which is something that I haven't documented very well.
00:16:52.830 - 00:17:04.846, Speaker D: So Bisu, does it have EOf implemented? I can give it a shot. Also, if you guys have some working implementation of TNA and also EOF, maybe.
00:17:05.028 - 00:17:29.960, Speaker E: We have the December EOF set up and you would need to pass in a specific fork. I'm going to be camping all week so I can't help you there this week. Maybe ping me Monday if you still think it's a good idea to work big eoF. But we don't have the new op codes for mega EOf yet, so we don't have create implemented. We don't have creator call yet for mega Eof either.
00:17:31.530 - 00:17:57.280, Speaker D: Yeah, I think it's still just a good option just to try to push through EBM one. I just need to find the time to address the issues because we've been crowded with the type test for 40 f four and the execution spectrum. But yeah, I will try to find some time and push through for even one.
00:18:03.240 - 00:18:03.990, Speaker B: Perfect.
00:18:05.160 - 00:18:21.710, Speaker A: Anybody have any other testing related content to discuss? Hey Zane.
00:18:23.170 - 00:18:50.290, Speaker G: Hey, it's been a little while. I actually just wanted to just double check if you're interested in testing out some of the eof functionality. Is EDM one the best way to go about that? Actually, can anyone hear me?
00:18:51.160 - 00:18:59.460, Speaker A: We hear you. I was waiting for somebody to jump in and say you should use our implementation, but they didn't.
00:19:01.980 - 00:19:35.440, Speaker E: We don't have all the opcodes in yet. We have jump, we have data load. Let me go down the list. Basu hasn't done create three, create four, call two return contract. We haven't done those yet, but we're up to date on the current container format, which I think is a bigger issue. I think our jump f is out of spec. So if you want to find tests that break and do some differential testing, that'd be a great one because you'll find great broken stuff in some of the jump f validation.
00:19:40.100 - 00:19:43.650, Speaker B: Cool. Yeah.
00:19:46.200 - 00:19:59.080, Speaker E: The fork you'll need to use in evm tool is future eips. Or you'll need to set that in the Genesis since it's not locked into any particular release right now. It's not even locked into Prague. So I think we put it in future eips.
00:20:02.340 - 00:20:04.290, Speaker G: Do you mind dropping a link?
00:20:05.220 - 00:20:15.540, Speaker E: I'm going camping this week, so I'm like literally going to start filling up the car. I got to take boys out. So this is like a bad week for me. I'll be more useful on Monday.
00:20:16.760 - 00:20:18.810, Speaker G: All right, sure. Thanks.
00:20:24.220 - 00:20:25.160, Speaker B: Simon.
00:20:27.580 - 00:20:53.490, Speaker C: There's also these to dos in the mega spec, like whether to forbid call f to non returning code sections or do we have call f in code sections in non returning code sections and the signature of the main one. Are we going to have them resolved or they will still be to do it for the foreseeable future?
00:21:13.220 - 00:21:22.250, Speaker F: Yeah, I think be probably for the next two, four weeks we definitely going to focus on the cost 2.0.
00:21:25.260 - 00:21:25.672, Speaker B: And.
00:21:25.726 - 00:22:01.024, Speaker F: Probably the M copy. And once those are in like a better shape then we will get back to bigger Uf changes. At least that's my expectation. But there may be some small deviations to it. I don't fully remember what big to do items we had there. I'm not fully sure if the non returning function flag was added. Maybe that's what the to do is referring to because we agreed on having the flag and we wanted to edit.
00:22:01.024 - 00:22:08.594, Speaker F: I'm just not sure if he actually managed to do that. Okay.
00:22:08.792 - 00:22:14.290, Speaker C: Since all the to dos are related to the non returning code sections.
00:22:14.950 - 00:22:31.880, Speaker B: So I guess you are righteous.
00:22:32.480 - 00:22:52.740, Speaker A: Other testing related things. Did we want to go and circle back to the question about M copy?
00:23:04.340 - 00:23:05.650, Speaker F: Yeah, please do.
00:23:06.420 - 00:23:06.832, Speaker B: Yeah.
00:23:06.886 - 00:23:43.710, Speaker E: So there was some chatter we had like two minutes to discuss Mcopy on all core devs but there was some chatter about concern about increasing the testing surface and how we should only add very few opcodes per release. And I'm just wondering what the scope of the concerns is. I mean, if we're going to do EOF, we're totally going to be changing a lot of stuff in EOF. I want to understand the impact of that statement. So we're not overloading testing or if we need to help shore up testing when proposes how that figures in.
00:23:52.200 - 00:24:35.140, Speaker F: Slight comment to that, I think that's one of the motivations of why we propose a call 2.0 now. Because it's useful for UF, but it should also be useful outside. Well, in fact it's required for EUF but should be useful for outside. And if we have it in a different fork then the surface area for the UF changes is reduced and the UF changes are quite significant anyway. But on the converse the question is, is like the cost 2.0 changes too big for Cancun? But yeah, besides comments?
00:24:44.790 - 00:25:25.150, Speaker A: Yeah, just a general comment. I think people are worried about changing too much and I don't really see how there's that much overlap between M copy and tstore. So I'm a bit against this opinion. I do understand that the reality is that people are going to have to write tests that interact t store and m copy just to be sure that there's no overlap and so there's more tests that have to be written. I feel that M copy is so simple though, that this is not a major concern.
00:25:25.490 - 00:25:29.040, Speaker E: I think it's simpler than chain id. It's crazily simple.
00:25:33.570 - 00:25:56.940, Speaker A: Yeah, I think will we mention it again on all core devs in the week next week? Yeah, when we mention all core devs next week, I'm happy to say the same thing. I think that we should try and do m copy, and there's very little overlap between that and the other changes.
00:25:59.550 - 00:26:06.282, Speaker D: Sorry, I must have missed this argument. So what was the reason against m copy or who's to get?
00:26:06.416 - 00:26:34.710, Speaker A: I think it was think maybe tell me if I'm wrong. I think Marius said that he didn't like that there might be some interplay between t store and m copy, or like the tests that need to be written. They're going to have to test both mstore and m copy and maybe test them interacting with each other. But I just don't see that there's being that much overlap between the two. Like they're pretty orthogonal mechanisms.
00:26:35.850 - 00:26:53.178, Speaker E: I guess one concern might be that he doesn't have enough time to get a good fuz burn in on it after everyone locks it in. But how much do we need to get? Fuz burn in is like a day or two or a week. I'm not sure what the metrics on how much fuzzing we do on this.
00:26:53.344 - 00:27:01.690, Speaker A: Yeah, we're looking at forking in October, probably September, October. Still have a lot of time to be fuzzing.
00:27:01.850 - 00:27:05.162, Speaker E: Testnet or mainnet for testnet.
00:27:05.306 - 00:27:11.490, Speaker A: Okay, I guess, sorry, main net. So Testnet would be end of August, maybe September.
00:27:24.410 - 00:27:32.840, Speaker E: Okay. I think it's relatively low risk, but if I'm wrong, please educate me. I'm open to being corrected of my incorrect views on this.
00:27:34.990 - 00:27:49.840, Speaker D: From my side I think it looks simple enough and copy. But yeah, I would like to talk to Marius. Maybe he has another opinion, maybe something that we're not seeing. Yeah, I don't know.
00:27:51.810 - 00:28:10.740, Speaker A: Yeah, sounds good. If you get a chance to ask him in the next week or so. And there's something post on the EVM channel. Because I do think we'll talk about Mcoppy again on all core devs. And it would be good to think about what the other perspective is.
00:28:22.450 - 00:28:23.200, Speaker B: Great.
00:28:23.570 - 00:28:25.550, Speaker A: Any final comments?
00:28:33.290 - 00:28:34.040, Speaker B: You?
00:28:34.490 - 00:28:41.142, Speaker A: Okay, then. Thanks a lot, everybody. Talk to you again in a couple of weeks and see many of you on all court decks next week.
00:28:41.276 - 00:28:42.440, Speaker B: Have a good one.
00:28:45.130 - 00:28:46.022, Speaker F: Thank you.
00:28:46.156 - 00:28:46.500, Speaker B: Thank you.
