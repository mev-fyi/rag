00:00:00.490 - 00:00:01.040, Speaker A: Everyone.
00:00:02.530 - 00:00:03.280, Speaker B: Hello.
00:00:56.810 - 00:02:14.810, Speaker A: Okay, let me grab the agenda. We were all here for a breakout session on EPBS. Thank you, everyone, for, I think at a high level, we generally want to just kind of think on the state of Epps for people who haven't been following but would like to start, and then from there kind of discuss the state of the research. There's like a couple of different implementation efforts, r D efforts that have been ongoing. So it'd be good just to kind of touch base on those and, yeah, just kind of see where things are. And then I think what would be really nice is by the end of the call to kind of have a shared understanding of are we ready to move into concrete implementations? If not, how can we get there? Okay, maybe I'll give people one more minute because people are still streaming in, but then we'll kick things off. Okay.
00:02:14.810 - 00:02:57.960, Speaker A: The people have stopped streaming into the room. So I was thinking to get started, I would just take even just like 5 minutes and kind of explain what PBS is and why we want to entrinit it and where all that leads. I think I'll just probably pretty briefly follow these notes I left in this comment here. This one I just dropped in the chat. So what is PBS? Well, proposer builder separation. And the idea is that validators, when they go to proposed blocks, they somehow are producing block space. And then you have these other actors called builders who want to buy it from them.
00:02:57.960 - 00:03:51.684, Speaker A: And so PBS, at least one way to think about it is that you have this auction to facilitate this exchange. That being said, well, I mean, yeah, there's a lot of context here, but ultimately there's a current design that we leverage that kind of shift around the merge with webboost. This is something probably all of you have heard of. And there's like an additional actor in the webboost picture, which is sort of an off chain PBS called the relay. And the relay basically is there to paper over some trust issues that we'll definitely get into in this call between the proposer and the builder. So one way to think about it is that the relay is kind of like maintaining this auction or like brokering it in some sense. The builder says, hey, I want to buy block space from the proposer sort of with this payload.
00:03:51.684 - 00:04:17.920, Speaker A: They really need to make sure the payload is valid. And then also when the proposer goes to sort of sell the box based, that the payment actually goes through. So there's a few things that they do. However, there are these single points of failure. And then, yeah, what I called out here in these notes, targets for implementation of censorship. So this is a big concern that we've had with how the relays are structured. Many of them are choosing to censor.
00:04:17.920 - 00:04:45.290, Speaker A: And again, that's kind of a whole different conversation. But what it means is that we sort of have this core ethereum value that's being harmed by this protocol actor. So this is something we'd hope to get rid of. There's also a question of funding the relays. And again, this is a whole nother different sort of side quest. But ultimately it's not clear that the relay system is that sustainable in the long term. And so if we could get rid of them, all the better.
00:04:45.290 - 00:05:40.940, Speaker A: So we have these relays, but really we're going to get rid of them. And this is the idea now to enshrine them somehow into the protocol at a high level you can think of, rather than have builders and proposers go through this relay actor, you can imagine they use peer to peer layer, some gossip infrastructure to coordinate the protocol itself could enforce payment. And this idea sounds nice. There's, at this point, been many work, sorry, there's been much work over many years to kind of make a concrete specification as to how this would actually work. You still have to do all these different types of things around. Is the payload valid? Is the payload available? If I go to pay the proposer, is the payment valid? And you have all these questions that come up. So to start answering them, there's like a series of designs.
00:05:40.940 - 00:06:40.664, Speaker A: Yeah, just to start with, the first one, you know, is this payload valid and on time? Right. So when the builder goes to release the payload, you want to know that the thing they release again is valid. Otherwise they could grieve proposers, you also know that it's timely, otherwise they kind of miss their opportunity to get into the chain, and that's not great either. So this takes us to what I would probably call the state of the art around this idea of PTC. PTC is a payload timeliness committee, and basically it's adding this extra protocol actor, or rather, I'll say it's adding additional duty to attesters, to attest to this payload release. And epbs, does someone have a link handy to PTC design spec? Any documentation? If you do, could you drop it in the chat? But I think we'll be talking more about this soon. That being said, I think there's some issues with PTC at least.
00:06:40.664 - 00:07:36.704, Speaker A: I see. I think a big one is essentially coming down to builder safety. So the way that this works is that now there's the proof of stake fork choice involved with these committees, and there's different things validators could do around sort of splitting the view of the fork choice for each node to group builders. And that's not great. The reason it's not great is if builders don't use this thing, then what's the point? There's all this complexity in the protocol, and that's just not good. But again, I think we'll get into some of the details there in a bit. Another one, essentially, if we do move from today's world with Medboost, where honestly there's these very optimized point to point networks, sort of over more conventional, like for example, HTP APIs, if we move to more of like a peer to peer gossip style, there's probably just going to be higher latency than we see today.
00:07:36.704 - 00:08:15.432, Speaker A: This is a problem because all these mev systems are incredibly latency sensitive. It comes down to even shaving off like milliseconds or more is profitable for someone. So people are investing to do so. And if we present them a system that is sort of less precise on a latency basis, then that's just not going to work. At least that's what I think. There's other questions around payment. So basically, when a builder goes to actually make one of these blocks in eps, essentially the builder needs to pay the proposer.
00:08:15.432 - 00:09:09.260, Speaker A: And the concern there is like, how do they actually do this? One option is basically when I go to pay the proposer, I kind of do it just in time. And when we think about this with what we have today, this kind of means they have to attach a transaction at the very top of the block, which is fine, but it does kind of mean the builder has to have that capital up front, which again, could be problematic for some types of MeV that we see otherwise. You can imagine they have this collateral locked somewhere, the beacon chain probably, and then from there they sort of pay out of that with each block. So either way, maybe I'm getting a bit into the weeds here, but ultimately, the point here is just to point out that there's a huge design space, and we are here today to discuss. Yeah, Danny.
00:09:10.400 - 00:09:32.516, Speaker C: Yeah. When I've been a part of smaller, large group versions of trying to align on epbs before, it's really some of these questions and other things that it's not even clear what the right optimization path is. And I think that's why we often get stuck. So either now or maybe after the call, or later in the call it's just like, what are the features? What are the features we need here?
00:09:32.538 - 00:09:32.676, Speaker A: Right?
00:09:32.698 - 00:10:36.392, Speaker C: And certain things come up and it's actually unclear what the feature is up to the extent we need it. For example, like quote builder safety one, what is builder safety? Meaning once they've done something, the chances their action makes it on chain and can they be griefed or can they price it in. There's all sorts of these things where it's not, I don't know. Often these conversations get into the point where there's a lot of fundamental disagreement around these core features. So at some point, maybe post call, we kind of see where we're all at. Maybe it's worth kind of trying to specify those a bit more clearly. For example, it's like, does everyone need to use this? Or does this need to be as good as relays? Or does this need to be like within some delta, as good as relays? And what is that? What is that delta? Anyway, it's not even just some of these questions.
00:10:36.392 - 00:10:39.660, Speaker C: It's like, what are we even attempting to do as becomes hard in these conversations?
00:10:40.400 - 00:10:59.730, Speaker A: Sure. Yeah, definitely. Maybe to kick us off there, then I would say that we want something that everyone's using. To me, it seems not great to add all this complexity to the protocol if ultimately it's just this rubber stamp and we don't actually solve any of these quote off chain issues.
00:11:02.120 - 00:11:39.730, Speaker C: I even question that. It's not even clear to me, actually, if it's the protocols, the relay of last resort, maybe that then provides a healthy market and sustainability and stuff on top of it. Because ultimately people are only going to use a relay at that point if it's additionally profitable and at that point, then relays potentially charge. And all of a sudden maybe you have a valuable market, whereas if you don't have the protocol is not a real resort, then maybe the market dynamic is totally different. I even question that, but I'll leave it there. I know there's a lot of things to get through.
00:11:40.260 - 00:12:35.402, Speaker A: Yeah. So maybe before we just jump into the weeds, does anyone have any questions? I'm not sure how much we want to kind of quote cover the basics versus we could just get into things. Okay, I'll assume that everything I said makes sense and we're all on the same page, at least with respect to the design space. Yeah, maybe I'll take suggestions from here. I was kind of thinking. So I know that POTUS is here and he's been doing a lot of work on sort of a flavor of PTC one option would be to POTUS. I don't know if you want to say something about what you've been working.
00:12:35.402 - 00:12:39.910, Speaker A: I think Terrence has been also working on that, although I don't see him.
00:12:40.000 - 00:12:40.574, Speaker C: There he is.
00:12:40.612 - 00:12:54.820, Speaker A: Yeah. So I don't know if you guys would like to say something about what you've been working on or maybe even just start with along with Danny's lines, like what design principles are you thinking about and how are you approaching the.
00:12:56.790 - 00:13:58.870, Speaker D: All right, so, yeah, I agree with Danny. I think we first need to agree on what is epbs versus what is PBS and what's the purpose of it and what are the constraints that we want in the problem. And I was guided by some design choices and some dichotomies that I posted on research a while ago, which led me to think that of this notion that builders, the attestors for the payload, should not have any four choice weight, this in itself left, gave rise to this attack, which you mentioned at the beginning, which is this balancing attack. You mentioned three points that you sort of like see as weak of this design. I can describe the design in detail in a bit. I'll add one extra point, which I think is very weak on the design, which is. So you mentioned the three of them, balancing attack.
00:13:58.870 - 00:14:34.578, Speaker D: Then the second one is about p two, p gossip style and the non adherence of builders instead of opening an HTTP point. And the third one is the way that payments are going to be handled if it's just on time on the execution layer, or if it's staked and they need to have the balance up front. I'll add one extra more, which I think is the most impactful actually for the protocol, which is protocol complexity, including changing the slot time, which I think is something that is just immediately a non starter if we change the slot duration. So I think that's another from an.
00:14:34.584 - 00:14:36.782, Speaker C: Engineering standpoint or like a social standpoint.
00:14:36.846 - 00:14:46.950, Speaker D: Yeah. So complexity at the level of engineering in general is a problem and within complexity, the highest would be changing the slot time.
00:14:47.100 - 00:14:47.414, Speaker A: Okay.
00:14:47.452 - 00:14:53.042, Speaker C: And when we say slot time, we mean like this whole round of whatever's happening, like the negotiation.
00:14:53.106 - 00:15:10.062, Speaker D: The whole round is currently at 12 seconds. I think we can keep it, but the design that I have open as a pr has it at 16 seconds, just with the desire of keeping it at station deadline at four. But we can actually make it three. But let's not get into this technical thing.
00:15:10.116 - 00:15:10.782, Speaker C: Okay, thank you.
00:15:10.836 - 00:15:53.418, Speaker D: Right now, what I would want is to argue against two and three. I think those are just non complaints. These are just not an issue. And I would want to mention what is this balancing attack, which is a problem that this four choice, we don't have a solution for this. And what I would like is that after a few of these meetings, we either agree that this is a problem that we need to think and solve, or we just agree that well, we should shelve this and try to think from scratch on a different design. My point of view here is that there is one attack to this, which is builder safety, and this is balancing attack. And we need to find a solution to this.
00:15:53.418 - 00:16:21.490, Speaker D: And I would hope that we can just sit down and think of way of solving that problem. So I don't know how you want me to go, Alex. I can just describe what is the way that PTC is, how is that we're implementing it, how is that we're specifying. I could describe what the four choice changes are and what is this balancing attack in detail. Or I can argue against two and three of your complaints.
00:16:22.150 - 00:16:46.460, Speaker A: Yeah, and to be clear, I'm not trying to block anything, it was more just to kick off the conversation. But yeah, so I think whatever you think makes sense. Probably what would be helpful is maybe you could touch on the high level features. Like again, for example, we've brought up this issues of this issue of builders being staked or not. How does that come in?
00:16:48.350 - 00:17:26.850, Speaker D: Okay, I can describe what is the feature. So what is the weakness that this would generate for builders? This is a property that builders have today. A builder. If it reveals a block, if it reveals a payload and on time, honest validators see this payload on time, then that block is canonical. It's automatically canonical. And this is a feature that it seems that epbs, in the flavor that we have it now, would be lost. This is the reason why all of these designs for epbs go in two rounds of voting.
00:17:26.850 - 00:18:02.542, Speaker D: A proposer gathers the header just as we do now with map boost for whatever means. It can be on the PTP network, it can be just directly requesting from the builder on an HTTP endpoint. You just get a header and you submit your consensus block with a commitment to include a payload from a builder. Attesters attest to this block or not. If they've seen it on time, they attest. If they haven't seen it on time, they attest for the parent block, just as we do now. Some point into the slot, the builder that has been counting attestations.
00:18:02.542 - 00:18:50.162, Speaker D: If the builder sees this block on time with a commitment to his payload, and it sees, they say like 100% of the committee has voted for this payload. Then he will reveal his payload, broadcast his payload, fulfilling the promise. If the builder sees zero attestations for the block or doesn't even see the block, then the builder will not reveal the payload because it doesn't need to fulfill. Now there's another committee that just attests for the presence of the payload. So right after the full round of voting happened, attesters for the next block or the four choice runners for the next block. Yeah, they do attest for the validity. There's another discussion on that.
00:18:50.162 - 00:19:31.482, Speaker D: Mihail says that they don't need to, but I think it's impossible to do that without breaking sync. The point is that right after the end of the slot, validators have gathered votes for both rounds and they know what their head is. And with respect to the current slot, there are three possible options. No block was included, so no consensus block and no payload was included. This is just like a missed slot today the full block was included, namely the block appeared and the payload was revealed, fulfilling the promise. That's just like a present block today. And there's a new entity that should be considered in for choice, which is an empty consensus block.
00:19:31.482 - 00:20:23.890, Speaker D: I will call those empty blocks instead of skipped. This is where the consensus block has appeared. It was voted. It is the canonical head, but the payload was not on time or was not there. So now the problem happens where there are two forms of grieving the builder, some new figures that appears, which is the following, which is the block is revealed by the proposer with a commitment to a payload. But the proposer either times it on purpose or happens by chance sends it slightly late and a percentage of the committee sees the block on time and a certain percentage of the committee does not see it on time. In this situation, the builder that has been gathering these attestations doesn't really know what to do and it's lost the assurances that he had before.
00:20:23.890 - 00:21:19.522, Speaker D: Epbs. The problems are as follows. If the builder sees a weak block, but not so weak and weak here for the current values of proposal boost means if he sees more than 30% and below 70% of the committee has voted for the block. Under these circumstances, the next proposer can choose to build the block based on the parents block or build the block based on the current block that is being proposed. And the next proposer, because of proposal boost, would actually make it both ways. He can reord the block if it's not highly voted and he can build on top of the block if he had enough votes. Those numbers are 30 and 70 if I didn't get them wrong.
00:21:19.522 - 00:22:26.390, Speaker D: So the problem here is that if the builder decided not to submit this block because he saw only 35% of the committee voting, and then he says, no, I'm not going to reveal the information that I have. I'm not going to reveal my payload. Then the next proposer can grieve him by building his block on top of the consensus block. And then the builder, because of what epbs is designed for, would be forced to pay the bid even though his payload was not included. The opposite also happens. If the builder decides to reveal his block and the block did not get enough votes, for example, less than 70%, then the next proposer would be able to reorgate. And if the next proposer is able to reorgate, then he can't really do this unbundling attack, which is reuse the transactions on the same slot, because typically searchers would protect themselves, the transactions will be executed in a different slot, but he can use the information that the builder revealed.
00:22:26.390 - 00:22:44.160, Speaker D: So this is what I consider is the problem of this design. I can argue against the other ones besides slot time that I think we can fix, but this problem needs to be fixed. And I would want to talk possible solutions eventually, probably not today.
00:22:48.340 - 00:23:19.980, Speaker A: Got you. Yeah, thanks. That was a really great walkthrough. Yeah. So like zooming out, this is ultimately this notion of builder safety we keep circling around. And I guess, yeah, that is, this is a conversation worth having, is like, to what extent do we think these issues are relevant? Do we care? I think I saw you trying to get some input from more networking specialists in our community. Did that go anywhere? Because this would be something here.
00:23:19.980 - 00:23:23.550, Speaker A: To what extent? How easy is it actually to split views like we're talking about?
00:23:33.270 - 00:23:45.170, Speaker C: So this is a view split that a proposer at slot in induces or is attacked by, because the proposer at slot n can probably pretty accurate.
00:23:46.550 - 00:23:49.320, Speaker E: It's one they induce like they're trying to split the.
00:23:51.130 - 00:24:23.746, Speaker C: You have to assume that it's feasible. Like you have to assume that the adversary is directly appeared to everyone and has de anonymized them and is hand delivering payloads. In the practicalities, it might be quote hard, but I think an adversary who's willing to do the legwork can split views, and the protocol has to be designed in such a way that you assume it, whether you assume it and they do it, and maybe the outcome isn't that bad. That's one thing. But you have to assume that they.
00:24:23.768 - 00:24:27.234, Speaker A: Can do it protest. Yeah.
00:24:27.272 - 00:25:14.958, Speaker D: So one feature here is that it's not only that they need to split the view, but they need to split the view along prescribed splittings. Namely, if you fix proposal boost, then you need to know exactly the percentage of what is the next committee that's going to see it. And I think this can be gained. So I just posted something on RNG so that it's just the first idea. The thing is that this is a problem that we might be able to solve. One idea would be to not have a deterministic proposer boost that is only known after the builder has revealed whose payload or not. And then in that way, the proposer of soft end cannot gain the view, the splitting, because he doesn't really know what is the percentage that needs to be split.
00:25:15.134 - 00:25:19.858, Speaker C: But is it a random distribution? Because it's a random distribution, then they can model it, right?
00:25:20.024 - 00:25:44.838, Speaker D: No. Well, even if you do it like a random, which the builder might influence it because he will know it before anyone else and he could just choose to reveal or not because of knowing this, even if you model it, as long as you have enough of an error bar, this attack does not become possible, does not become lucrative.
00:25:45.014 - 00:26:07.700, Speaker C: Well, it depends on the value of these and whether they're doing a repeated game. If they can model it and there's an error bar, then if they play it 100 times and there's a certain delta on it, then it can be profitable in the single game, then it's probably too risky. But I do worry about these random distributions and whether that they actually protect us in a repeated game.
00:26:08.890 - 00:26:09.302, Speaker A: Right.
00:26:09.356 - 00:26:41.840, Speaker D: But even then you may not make it random by say, the distribution is going to be modeled by a hash on the extra data of the builder, and then it's not random. The builder is just going to adjust. And it's one way of allowing the builder to actually set proposal boost without really giving it four choice weight. Because the builder cannot choose between two different forks. He can only help or not boost the next proposer, if he's being honest, building on top of his own head.
00:26:50.910 - 00:26:55.600, Speaker F: Can you explain that? How does the builder choose how much boost they give the next?
00:26:56.210 - 00:27:26.294, Speaker D: Let's say so, there's two issues here. One is that proposal boost on epbs probably needs to be gone or lowered a lot because we model proposer boost based on x anti reorgs and post anti reorgs without block slot voting. But on epbs, block slot voting is sort of like a must because you need to be able to penalize the proposer not posting a. So that's one comment. And another comment is this thing that.
00:27:26.332 - 00:27:40.010, Speaker F: Comes with other problems for the folk choice rule. The proposal boost is there for a reason. It's to prevent certain long term attacks on the fog choice rule. So we would then improve those attacks.
00:27:40.750 - 00:28:22.378, Speaker D: Yes, that's so. The thing is, I'm reading the chat also, Francesca saying box lot voting certainly has a problem. Unfortunately, it becomes actually much more complicated than we are discussing here. There are some issues, like if a vote for slot n, how do you propagate it along the chain that is supporting that block in slot n? And there are some subtleties there. We can look at what I'm proposing later. One of the issues, for example, is if you voted for a block, and the proposer of a child of this block can be basing his block on top of, like, full or empty. These are two different things.
00:28:22.378 - 00:29:12.200, Speaker D: Do we count any vote for slot n along the chain or not? So this subject has changed for choice quite a bit, and the whole thing of proposal booths needs to be studied for reorgs under this new voting system. But besides all of this, even if we manage to model all of proposal booths, what I'm saying is that the builder has one option besides just giving the attesters of this committee for choice weight, which is something we didn't want to do. That's why BTC, what we can do is the builder adjusts proposal boost by essentially just saying, this is how much proposal boost is going to be among these prescribed values. Why would I not hash of extra diet, or whatever it is?
00:29:14.170 - 00:29:19.740, Speaker F: As a builder, proposal boost is always a risk for me, right? So I want to always set it as low as possible.
00:29:21.390 - 00:29:25.660, Speaker D: And that might be the case. That might be fine.
00:29:28.370 - 00:29:38.034, Speaker F: As a builder, I would just grind that extra data to have as low proposal boost as possible, always. So I don't see how that adds anything.
00:29:38.152 - 00:29:38.434, Speaker D: Well.
00:29:38.472 - 00:29:45.530, Speaker F: But then you might just, like, we might as well forget about that thing and simply say, proposal boost is always the minimum.
00:29:45.710 - 00:30:06.038, Speaker D: Yeah. So with block slot, actually proposal boost at zero, you need 50% to build on top to do a post antibiot that's at zero, and x anti reorgs, which is the one that I don't remember, actually. The numbers with block slot for x antibiotics, probably here has them fresh.
00:30:06.214 - 00:30:48.518, Speaker F: But even at zero, even zero proposal boost doesn't completely solve our problem, because you can also use a testers to reorg, like I can balance, and we don't know. This would be one thing that would be interesting research to do on how difficult it is right now to balance committees to within 5%, 1% and so on. Because my intuition is that it's actually not difficult. My intuition that balancing to within 1% is not hard. If you try hard enough, like if you collect enough statistics, know exactly where you're going to release those blocks, I think you can potentially balance comedies to within 1%. And if you can do that, then.
00:30:48.604 - 00:30:49.474, Speaker D: This is on the network.
00:30:49.522 - 00:30:50.214, Speaker A: Right?
00:30:50.412 - 00:31:08.510, Speaker D: So you're saying that you can decide up to 1% of error when you release your blog. What's the voting is going to be? And I'll be happy if we actually get these measurements down. Whenever I talk to researchers, they tell me, yes, this is possible, this is easy. And whenever I talk to people that work on P to P, they tell me it's impossible.
00:31:09.170 - 00:31:21.234, Speaker F: It's not a trivial research. I mean, it's a big research project because you actually have to invest the time at trying this, because there are many different methods to try to balance this.
00:31:21.272 - 00:31:21.666, Speaker A: Right?
00:31:21.768 - 00:31:43.210, Speaker F: Is it enough to simply release your block in the traditional way, add the boundary and figure out the best boundary? Probably not. You probably need to have at least hundreds of nodes, get some statistics on which nodes have honored many validators and so on. But then is it possible? I'm just saying I would not be surprised.
00:31:43.950 - 00:32:03.520, Speaker C: I think that there's a pretty interesting research project, and I think that you start with the assumption that you know the validators on each node, because that is certainly doable with the way that PDP works today. And then you run simulations from there and strategies from there. I can see if I can find somebody that wants to do this.
00:32:04.530 - 00:32:10.100, Speaker F: Yeah, I mean, this is not going to be an easy research project. This is going to be at least months of work.
00:32:10.630 - 00:32:15.460, Speaker C: Yeah. This isn't a weekend project. Well, maybe for somebody, but.
00:32:17.350 - 00:32:36.650, Speaker F: If you're very lucky, it might be a weekend project because you find a very easy way of doing it. But most likely it's a longer term research project. We don't know. I mean, ideally, you want to assume the worst case, right? That it's fairly possible to get this within relatively tight bounds.
00:32:38.190 - 00:33:27.100, Speaker C: Yeah, I mean, it is. It is the default assumption that kind of in traditional academia that you take, that you can deliver these types of messages with these timing constraints. We're certainly deviating from the assumed adversary in traditional literature. If we say no, we don't think so. But that is definitely the traditional assumed adversary on the PDP, and you can easily imagine why it is, even if it's hard. And hard, I think, becomes a dollar amount, not a. I think hard becomes a dollar amount, like on the order of something, not to the level of Ethereum's crypto economic security, a validator set size.
00:33:27.100 - 00:33:31.900, Speaker C: I'll put out some feelers and see if anybody wants to take it on.
00:33:33.390 - 00:34:03.718, Speaker D: I have a proposal which is, I'm certainly not denying that this attack exists there, and I think this is the biggest problem of this design. My hope is that we can actually solve it, that we can think of ways of solving this problem. But perhaps let's agree that there's this problem there. We can or not discuss whether or not this problem is a theorem. We cannot solve this problem, and then we just trash everything. Or we can try to move forward and try to solve it eventually. We can argue about the other points, but it's clear that there's an issue here.
00:34:03.718 - 00:34:09.580, Speaker D: And my hope is that we can actually fix it instead of, like, trashing the whole project.
00:34:14.580 - 00:34:24.630, Speaker F: I think nobody is suggesting trashing the whole project. I think we all want to find better designs that have as few of these problems as possible.
00:34:26.760 - 00:34:27.332, Speaker E: We could.
00:34:27.386 - 00:34:30.788, Speaker C: Yeah, and I think the point here. Go on.
00:34:30.874 - 00:34:31.940, Speaker E: Go ahead, Danny.
00:34:34.280 - 00:34:44.490, Speaker C: Yeah, but I think aligning on what is the threshold of agreement on these different things, that it becomes like we can move forward. And I do think there's some disagreement across here.
00:34:46.300 - 00:35:20.070, Speaker E: If we say that we solved this builder safety problem, we could kind of start there and then say, do we want to do epbs? Given we have builder safety? Let's say we have the same builder safety as Mevboost today? Then I guess that could kind of be a way to transition into the next part of the discussion, which is more about protocol complexity, slot times. I think some of the, I guess the second round of issues that POTUS was talking about earlier, which is. Yeah, plot time mainly, I guess.
00:35:25.320 - 00:35:33.560, Speaker F: Is there a reason why we are not at all talking about Vitalik's design, where both the proposer and the builder get a boost?
00:35:37.790 - 00:35:41.950, Speaker C: Can you explain that? And then I think there's probably some rebuttal.
00:35:42.690 - 00:36:16.920, Speaker F: Well, to me, it's been a long time since I looked at these things, but it feels like it's very similar to the PTC, except it's like, basically in both cases, you have two blocks with two. But like, in Vitalik's design, it was much more symmetrical, and we basically just had a comedy for both of them. And both the builder and the proposer get a boost, and in particular, the builder boost stops the builder from getting reorked because the builder can basically.
00:36:19.550 - 00:36:20.010, Speaker D: Within.
00:36:20.080 - 00:37:12.806, Speaker F: A certain range, they can decide whether to release or not. Like if they see say between 30 and 100% of the votes, they can use their own boost to get over 50% and get guaranteed that all attesters, like all honest attesters, are voting for that block and therefore it's solidified and can't be reorganized by the next block anymore. And I think the main problem we had was that people said, well, now we have, because proposers can select themselves as builders. So effectively you get the proposal boost twice. My intuition is that this just means you should have the proposal boost. But I don't know if that's exactly correct. And clearly that does weaken the fork choice rule.
00:37:12.806 - 00:37:27.600, Speaker F: But also in this case, we also have to decrease the proposal boost to reduce the risk for the builder. So I'm not sure if it's that bad, or at least I feel like it's still better than the PTC design.
00:37:28.690 - 00:38:45.842, Speaker B: So one thing about this design is that in order to actually, for the builder proposal boost to be effective, you really need, I think, a school committee to be attested to the builder part so that it kind of solidifies whatever the builder proposal boost has kind of nudged people towards. And so it really becomes more of a two slot thing rather than still trying to keep you one slot by having the PTC committee be in small and non e aggregation. So I guess that's one thing that it does kind of increase the complexity and the cost just by increasing slot time, the effective slot time, essentially. But the other thing that why? You already kind of said it. But yeah, the issue of having this double boost is that basically in the current consensus protocol, the security arguments against long term balancing attack and essentially all these ways to try to prevent liveness basically rely on there being a certain percentage of honest proposers. And yeah, essentially if we give boost to builders, you can basically count half of the actors as being dishonest. Essentially.
00:38:45.842 - 00:39:17.902, Speaker B: Potentially. I think that's the right thing to do, to just treat every builder as being malicious and yeah, it just makes that kind of attack much worse. Now, I don't know if there is simple ways to mitigate this. It didn't seem clear to me that that can be done. But yeah, if you literally just do this two slot thing and do not change anything about how things work, just give proposer boost to builders for sure. It makes all these attacks much worse.
00:39:18.046 - 00:39:29.730, Speaker F: Right. Because you're saying even for honest proposers, the attacker would simply outbid the highest bidding builder to also get proposer for those slots.
00:39:29.810 - 00:39:50.330, Speaker B: Yeah, exactly. I guess the worst case is like, let's say that there is a dominant builder that doesn't even need to spend the money because they're winning blocks already and they happen to be malicious and want to just create chaos. Then it basically becomes equivalent to just half of the slots being given to malicious proposers.
00:39:51.790 - 00:39:58.490, Speaker A: Right. I see. Otos, you had your hand raised.
00:39:59.550 - 00:40:48.782, Speaker D: Yeah, but it was essentially to say the same thing as Francesco, I would add as a constraint. So we have builder safety as a design constraint for the system. Another one, I think it should be keeping slot time, because it's really hard, close to impossible to change this on the engineer level. But this is just a belief, I think, that keeping slot time is impossible if you have two rounds that need to be aggregated. So if you are going to add a second voting that needs to be aggregated, I think it's impossible with just keeping the slot time that way. So that forces us to have a small committee for the second time. Having said so, I'm not against boosting the second committee if it's even possible.
00:40:48.782 - 00:41:38.910, Speaker D: Being small, we can play like the theory. We can do some simulations to see if there are numbers that are reasonable. Originally, one of the reasons we didn't want to have boost the small committee or give any fort choice weight for builders is because we thought this would be a very constrained set of players, that we didn't want them to be choosing between ports. So this goes to one of the things that Dankrad said, which is proposers can't select themselves as builders. In the design that I was working on, builders would be staked and payment would be carried on on the CL side. And I can define that because of just code complexity. It's much simpler to deal with state builders on protocol and just pay immediately on the CL as you process the header, even of the block.
00:41:38.910 - 00:41:47.490, Speaker D: And in this design, well, the proposers can't select themselves as builders.
00:42:16.800 - 00:42:34.560, Speaker A: Okay, so we have about 20 minutes left. I don't know if we want to dig into any of the other points. It seems like we at least agree this is one of the biggest blockers to the current PTC design. So certainly something to dig into deeper.
00:42:34.720 - 00:42:57.784, Speaker C: Something Mike mentioned is worth surfacing. Just like self building, as that being a requisite feature of epbs, or not being another component of the trade off. I guess the nuance and often the rebuttal with it's not a prereq assumes, then another feature, inclusionless.
00:42:57.912 - 00:42:58.252, Speaker A: Right.
00:42:58.306 - 00:43:05.820, Speaker C: So still being able to maintain influence on the block without being able to build it often. Is that optimization?
00:43:08.480 - 00:43:34.630, Speaker D: Yeah. By the way, the reason this RPR became too large is that we wanted to have state builders. So that self building is not possible. Then that forced inclusion list on us. Then since the builders would be stayed, that forced Max EB on us. And Maxeb itself requires 7002 on us. So most of the pr, it's those three big changes.
00:43:38.410 - 00:43:41.030, Speaker C: Yeah, I see the dependency path.
00:43:43.950 - 00:43:57.118, Speaker A: So that kind of suggests maybe way forward is over the next fork or two. We ship these prereqs and then that gives us time to dig into this builder safety issue and then there's a path ultimately.
00:43:57.294 - 00:44:00.210, Speaker D: Let's save that discussion for the El meeting.
00:44:00.870 - 00:44:16.780, Speaker A: Sure, yeah. Just servicing it. Well, actually. Sorry, 1 second. Is this call only until are there 15 minutes or does it go past the hour?
00:44:18.670 - 00:44:20.380, Speaker C: I think it's scheduled for the hour.
00:44:20.750 - 00:44:28.880, Speaker A: Okay, great. It sounds like there will possibly be more of these. Okay, sorry. PotUS, you're saying?
00:44:30.210 - 00:45:02.710, Speaker D: Yeah, I want to comment on your second point, which is this issue of not using the system by not using PtP gossip. I think this is a no brainer. We will never be in a situation where the p two p network bits are going to be useful in any form. This can always be bypassed. And that I think is absolutely fine. This is not a requisite of epbs, and I don't even see that this is a problem. I think of epbs as a way of enshrining the relay, not enshrining the builder.
00:45:02.710 - 00:45:44.840, Speaker D: And I think it's absolutely fine if we are in a place where the p two p gossip layer is only there as something that we will fall back. If an alignment situation where the standard builders are not live, typically what would happen. What I envision that this would happen is that builders now will not even need to do the BNd. They can just become relayers immediately and they just open an endpoint. They just open an HTP endpoint, which they cannot do today because they are not trusted. But after epds, they can just open the endpoint and we can just continue getting the headers exactly as we do today with Mapboost directly from the builder. I don't see any problems.
00:45:44.840 - 00:46:17.710, Speaker D: If this is the situation. Builders become relayers. They are just trustless relays. They're part of the protocol. If builders are not state enough and they need to go to a separate to have some sort of business with relays that are going to be the one state and signing the blocks for them, that's fine as well. This is just something that is happening between the builder and the relay. But the relay now becomes trustless, which is the objective that I think is the main objective of epvs.
00:46:20.210 - 00:47:14.290, Speaker E: Yeah, I definitely like the mental model of staked builders is more like enshrining relays than enshrining builders. I think that makes total sense to me. I guess the issue I have with the trustless relay framing is that we don't know that the full bid value will capture the payment to a validator. So, for example, if a validator is listening both to the bid that's signed by the builder and is collateralized with whatever automatic payment mechanism is there, the builder could also tell them that we'll give you extra payments outside of the protocol in this way, and they'll just take that higher bid if it's bigger than the trustless one. So I think if the builders use the protocol as designed, then it would be trustless, but we have no way to enforce the builders to use the protocol as designed. So that's my main issue with the trustless framing.
00:47:18.860 - 00:47:23.720, Speaker D: I don't understand. How is it that builders are not going to use the protocol that's designed?
00:47:25.900 - 00:48:07.768, Speaker E: Like, for example, let's say I'm a builder and I sign a bid to the proposer through the protocol mechanism. That's like 0.1 e. And then I tell them that I'll pay them like zero point 99 eth out of the protocol and they just have to trust me, bro, on that portion of the payment. If I'm a validator and I hear that they're going to give me a one eth bid fully, I can just trust them in that regard and bypass the protocol there. And the reason that this might be, well, I guess it just means that the protocol isn't being used. I guess it doesn't feel like it.
00:48:07.768 - 00:48:14.570, Speaker E: Just like if we're trying to get rid of trust between the builder and the proposer, it doesn't actually get rid of that trust. That's the issue.
00:48:15.180 - 00:48:29.890, Speaker D: It does. You're deciding to trust more. That's going to happen on any protocol. It doesn't matter what protocol it is. I mean, I can pay you for you to not propose a block to one, just keep your block and I can do this off chain. What's the problem with this?
00:48:31.460 - 00:48:34.896, Speaker E: Well, yeah, I guess it just doesn't make it a trustless relay. Right?
00:48:34.918 - 00:48:53.990, Speaker C: Like it's still trusted as providing a baseline trustless mechanism and then the market can layer on top rather than having a zero mechanism that then we have an unsustainable market layering on top, which is absolutely fine. Yeah.
00:48:54.840 - 00:48:57.050, Speaker E: You could argue we have that today. Right?
00:48:59.580 - 00:49:06.636, Speaker D: Today you have to trust someone. You really have to trust someone. You cannot have. You can still build up for you.
00:49:06.818 - 00:49:30.950, Speaker C: It's a matter of what that Delta is right now, that Delta is huge between using the local mempool and the trusted market. And I see it as does epbs provide a significant baseline such that, that Delta is much smaller, such that then it becomes like kind of a market choice rather than right.
00:49:31.480 - 00:49:46.600, Speaker F: I guess it would be interesting to see, for example, right now, if we assume we can only trust ePbs up to one ETH blocks, like right now, what percentage of MEV comes from greater than one ETH blocks?
00:49:50.870 - 00:49:51.234, Speaker A: Right.
00:49:51.272 - 00:50:01.474, Speaker F: Do we know that? I feel like the distribution is extremely skewed and people have told me before that a lot of the MEV comes from very high MEV blocks. So then it does less.
00:50:01.672 - 00:50:02.142, Speaker C: Yeah.
00:50:02.216 - 00:50:16.700, Speaker F: And I don't know what exactly that is, how bad it is to put, say something like a one e separator in there. But that would be like an interesting thing that would tell us something about how valuable it really is.
00:50:35.940 - 00:50:54.680, Speaker A: So maybe just to respond to POTUS a second ago, this is, I think my point is, if we add all this complexity to the protocol, to have this sort of really a last resort, but it's used very infrequently. Was it worth it? And I think it's an open question, but that's kind of, I think really a key consideration here.
00:50:54.750 - 00:51:21.792, Speaker D: I don't understand, why would it be used, not frequently, if it's used constantly. Now from the point of view of the validator, the UX doesn't change. You just request the header directly from the person that would send you the block, the payload. From the point of view of the builder, it becomes much better. He doesn't need to trust the relay anymore. He just opens his own HTTP endpoint. From the point of view of the builder that doesn't have the money to stake, it becomes exactly the same as it is today.
00:51:21.792 - 00:51:31.270, Speaker D: He just trusts another entity that would send the blocks for them. So I don't see why is this not an immediately no brainer that it's going to be better in any situation.
00:51:32.840 - 00:51:50.056, Speaker B: For example, a builder might say, not a builder, but like the two or three builders that actually matter, they might just say like, no, this is too risky for me, I prefer the current situation. So if you want to get blocks from me, just keep doing it the way you're doing. Before the import call bid is going to be zero and you just have.
00:51:50.078 - 00:52:03.230, Speaker D: To, we can open our own builder. I mean, if there's zero builders that want to be part of this, the prismatic team would be very happy of running our own builder. Yeah, but those builders market.
00:52:04.320 - 00:52:22.044, Speaker B: But that's assuming that validators are going to care about these extra guarantees, which is not necessarily the case. There's not that much of a cost today in just trusting that a relay is actually going to give you their block.
00:52:22.092 - 00:52:32.176, Speaker D: Well, but the point is that you are not going to be able to do so because you're not going to be able to get a block of, you're not going to be able to even sign a block of Saya.
00:52:32.208 - 00:52:52.270, Speaker B: Well, a builder can just be staked and be part of the protocol, but just not. Their bid is going to be zero. But they are staked and they are allowed to be a builder or a relay or whatever you want to call it. It's just that they don't communicate their actual bids to the protocol. So you're still using map boost, trusting a relay, et cetera, et cetera. But the builder, yeah, sure.
00:52:53.440 - 00:53:16.070, Speaker D: They don't need to communicate the bids. They don't even need to propagate the bids. They only need to open their own HTP endpoint, as they do today. And the proposer can request it exactly as they do today. And I don't see any problem with this as long as a builder, some in protocol object, in protocol entity signs the payload instead of someone that didn't produce the payload signs it, I think it's fine.
00:53:16.600 - 00:53:18.692, Speaker E: But the builder can just signature zero.
00:53:18.746 - 00:53:37.710, Speaker B: E. Yeah, the builder can just sign a bid that doesn't bid anything and the actual bid is just an off chain object. And just because they don't want to trust this mechanism to protect them and they prefer the existing mechanism. I'm not saying this would be the case, but it's literally up to two or three builders whether or not this is actually used.
00:53:38.960 - 00:54:12.928, Speaker D: So this is fine. So you're saying if the proposers decide to take blocks from builders that don't offer them any security and they have to be trusted? That I think is absolutely fine. Proposers may decide to trust someone. What I don't like is that proposers now are forced to trust someone. If they want someone else to build their blocks, they don't have the option. They either build locally or they're forced to trust someone. What this mechanism is going to change is they either build locally or they may trust someone and actually would force them not to build locally.
00:54:12.928 - 00:54:14.464, Speaker D: But that's a different discussion.
00:54:14.592 - 00:54:48.720, Speaker C: I do agree that there's like a moderately profound difference in those two things. I'm not saying the design necessarily provides that, but the difference between those two things is important, and it's important because of that assumption. It's also important because it then makes the market more potentially competitive and malleable. It makes entering the market, you don't need trust, you can use the facility. Yes, there's a difference between. No, you need to trust the Relays.
00:54:50.020 - 00:55:00.324, Speaker E: Yeah, but I guess if you're a little builder and you don't have enough to put up the collateral to be a staked builder, then you'd have to trust the builder relay anyway. Right.
00:55:00.362 - 00:55:01.888, Speaker C: But I don't think the long tail.
00:55:01.904 - 00:55:03.350, Speaker E: Of little builders are good.
00:55:04.360 - 00:55:14.520, Speaker C: Relays are becoming vertically integrated and the difference between the two is probably going to erode. So you're trusting builders at that point in what seems like a convergence.
00:55:18.730 - 00:55:50.180, Speaker E: Yeah, I think I still agree with Francesco, which is that there's three builders that are kind of relevant here. And if those three builders decide to sign zero bid and have this. This kind of reverts to the exact same thing today, where I, as a local validator, have to either trust one of those three builders or build locally, there is this long tail of builders that could do better than my local block, but it's just not that different compared to the value that the three big builders are going to provide me. You know what mean? So, like, the cost of altruism might not.
00:55:52.630 - 00:56:12.010, Speaker D: And also, we should not neglect what clients do. The reason we have this adoption today of Mapboost is because we support it in our own clients. This is not something that we may be forced to do. And someone that wants to do some off chain work is going to have to fork clients.
00:56:15.830 - 00:56:22.098, Speaker E: Well, but they could already just use them at boost. That already exists. The off chain software already exists. That's the point.
00:56:22.184 - 00:56:24.690, Speaker D: Yeah. And someone is going to have to keep those forks.
00:56:31.230 - 00:56:58.610, Speaker C: I do think, over indexing on the fact that there are three, or who those three are today, and designing the protocol around them helps enshrine them. It helps reduce the competitive of the market, it helps reduce potential changes over time by just assuming, oh, well, we have these actors, we can't do anything about it. It might not change anything immediately and they might not use the facilities, but it does open the fact that the market can become more competitive or at least shift.
00:57:00.710 - 00:57:17.210, Speaker A: Right, but it will cost, which is kind of my point. It's like if we do, we double the slot time, we add these new committees, we do all this stuff. And then what I'm hearing is we do all this to maybe allow this median segment of the market to exist.
00:57:19.870 - 00:57:59.400, Speaker F: I think the real argument here is that you need to have a low cost of entry so that when collusion occurs, a competitor can enter. Like, let's say they suddenly started colluding now, but everyone has set only these three builders as their relays. Well, now you're fucked, because now you have a really high cost of entry for someone new, so they will control the prices, and someone new can't really get in. So you need to leave this door open so that when they start colluding, someone can. Well, I mean, maybe before I wasn't competitive, but now that they all agree to only pay 0.1 e per block maximum, now I can be competitive and I can enter the market.
00:57:59.850 - 00:58:06.890, Speaker D: But you can always do this because of the p two p. The PTP network would always give a baseline of what is the meaning.
00:58:07.870 - 00:58:09.340, Speaker F: I'm talking your.
00:58:12.590 - 00:58:15.820, Speaker D: I'm not arguing against you. I'm just saying that this already is there.
00:58:17.170 - 00:58:17.934, Speaker C: I agree.
00:58:18.052 - 00:58:41.430, Speaker F: This would be the argument. The danger with the relay design is that the open relays will go away, which ensure easy market entry because they aren't competitive, and then the builders control the market. So I think that's the danger with the relay design. And that's something that even very imperfect epbs design could ameliorate.
00:58:52.820 - 00:59:58.950, Speaker A: Okay, I'll just note we have a few minutes left for this call today. Yeah, next up. Well, I think it sounds like there are many next steps, so we'll probably want another breakout. A big thing was if we could figure out, or if we could gain a clear understanding of these fork choice details and how big of an issue this builder safety thing really is. And at least for me, I think the takeaway from this call is balancing all these different concerns, because we were just painting this picture where even sort of a suboptimal quote, epbs could actually do a lot of good if we're worried about relays disappearing and what that implies. So even if there's not, like a, let's say, perfect builder safety, it might still be worth the complexity. So, yeah, I think that will ultimately be the deciding factor in this whole thing, is finding the balance there.
01:00:01.880 - 01:00:28.004, Speaker C: I'd love if somebody wanted to take on trying to write down the design criteria. Okay. Because then I think we all have this thing in our head, and we all are beginning to kind of hone in on what the design criteria, but yeah, I think just somebody attempting it. Yes, you'll be very biased. You have your own design criteria, but it's going to begin to then someone can say oh no, but what about these two things? And we can have a more principle.
01:00:28.052 - 01:01:08.890, Speaker D: What I'd like is what are the things that we are set and we at least agree, it seems that we all agreed on what the definition of builder safety is and we want that as a design condition. And I think we also agreed, I'm not sure, but I suspect that we also agree that we want to keep the slot time. I wonder what are the other designs that we might already have agreed upon from today's meeting? I take that those two are requirements. I think that the second one requires you to have a small committee for the second vote. And for builder safety, I think we need to explore and solve that problem, but I think we can solve that problem.
01:01:13.750 - 01:01:17.682, Speaker A: Enrico? Yeah.
01:01:17.736 - 01:01:26.440, Speaker B: Just a question about the slot time. So you're mentioning that could be pretty complex to change the slot time.
01:01:26.970 - 01:01:30.994, Speaker D: And you said from a technical perspective, not only from a session perspective.
01:01:31.042 - 01:01:35.018, Speaker B: So what are your arguments there for the slot timing to be?
01:01:35.104 - 01:01:52.670, Speaker D: The problem with slot time goes down everywhere. Like it affects tooling, it breaks existing things, it might break even contracts. Contracts is very hardly that they're going to be broken. But the thing is that there's a lot of things that are downstream that depend on the slot.
01:01:55.170 - 01:01:59.022, Speaker B: You mean outside the consensus?
01:01:59.086 - 01:02:43.758, Speaker D: Yes, outside of consensus. We already have contracts that check on timestamp and that sort of like assume they have this thing which is timestamp to slot, which is currently a dictionary and we're going to be breaking that. It's a very tough change to change the slot time. But on the other hand, on the bright side, I think EPDs brings us something that is great, which is the fact that we can go down. So the node currently does the critical validation all at the same time. On epDs, you pipeline it much better. You can attest at 3 seconds because your block is much smaller and it's much faster to verify and you can verify the payload at the time where the node, the consensus layer node is doing nothing.
01:02:43.758 - 01:03:10.830, Speaker D: So from the point of view of engineer and pipelining, EPDs is much better for our CPU, it's much better usage of our CPU than it is today. So I think it's doable to do 12 seconds by shortening the attestation time, which by the way, also like shortening the attestation time gives less margin for that balance in attack.
01:03:25.800 - 01:03:40.010, Speaker A: Okay, we are time, and people, I think, are streaming out. Yeah. So it sounds like an immediate next step is just having a clear design doc we all agree to, and I think we can coordinate around that asynchronously. Does that sound good to everyone?
01:03:45.240 - 01:03:45.700, Speaker E: Okay.
01:03:45.770 - 01:03:54.656, Speaker A: Got some thumbs up. Great. Okay. Thanks, everyone, for coming, and I'll see you around the Internet.
01:03:54.848 - 01:03:55.830, Speaker D: Thank you.
01:03:57.000 - 01:03:57.524, Speaker B: Thank you.
01:03:57.562 - 01:03:58.208, Speaker E: Bye, Alex.
01:03:58.304 - 01:03:59.960, Speaker A: Bye bye. Thank you. Bye.
