00:00:14.970 - 00:01:41.758, Speaker A: So the presentation that I'm going to be making today will be on the topic of decentralized applications. So decentralized applications is something that I think a lot of us have been getting very interested in in the last few months, ever since maybe almost around September or October last year when I visited Israel and I saw the people working on projects. So I covered coins and Mastercoin. I saw there's a lot of interest in this general idea of looking at bitcoin, the blockchain, and seeing how the underlying technology can be used not just as a currency, but also potentially to build other underlying blocks of the Internet as well. So I'll also be talking slightly about Ethereum, which is the project that I've been working on for the last six months. So the basic idea behind Ethereum is that it's a platform for basically very easily building any kind of arbitrary decentralized applications using a blockchain with a built in programming language. So instead of a blockchain with a limited number of features where there's maybe features for making an asset, features for decentralized exchange, features for financial contracts, and there's 30 different things that you can do, and that's all that you can do.
00:01:41.758 - 00:03:19.980, Speaker A: There's a programming language which you can use to build literally anything you want, sort of like javascript for the blockchain. But the more interesting thing here is basically what is a decentralized application, or what we're calling adapt, which is the thing that we're targeting our platform towards and that many other groups are also, such as Mastercoin, made safe. Bitcloud and several others are also trying to target in various respects, what is it, what are the benefits of using adapt? What is adapt not? And what is the future of this sort of new paradigm of application development going to be? So one way to start off by defining adapt is first of all, to start off by looking at examples. First of all, around ten years ago, really more around 20 years ago, but it started to become mainstream around ten years ago we had the Internet, and with the Internet we have this shift from what I call one sided decentralization to two sided decentralization. Now, two sided decentralization is still not full decentralization. There's also concepts like three sided decentralization and infinity sided decentralization, which I'll be talking about later. But the general idea is that in a two sided decentralized market, both the buyers and the sellers of something can be anyone.
00:03:19.980 - 00:03:55.154, Speaker A: For example, if you look at something like book publishing, book publishers are centralized. There's only a few publishers, but anyone can read a book. With the Internet, on the other hand, you have Internet forums and YouTube. Anyone can post a video, anyone can post a comment, and anyone can view a video and anyone can read. So this is what some people have been starting to call the sharing economy. There's also concepts like p two p lending, p two p crowdfunding. So that's basically the first wave.
00:03:55.154 - 00:04:35.290, Speaker A: Then the second wave is services that have three sided decentralization. So three sided means that the producers of the service can be anyone, the consumers can be anyone, and the infrastructure itself can also be made up out of anyone. So the first ever decentralized application, I would argue, is BitTorrent. So Bittorrent online peer to peer file sharing network. It's a network made out of a lot of nodes. Anyone can upload a file, or rather anyone can see a file, anyone can download a file, and if you want to download a file, you download it through peers. So there's no concept of a centralized server.
00:04:35.290 - 00:05:24.354, Speaker A: So this is something that we've had for about ten years. Then after that we have other dapps, like for example Tor. Then you have bitcoin, decentralized currency created in 2009. And finally what I'm starting to call bitcoin's equally important companion, Namecoin in 2010. So both of these benefit from a technology that's called the blockchain or decentralized consensus, where they're trying to solve a problem called, in bitcoin's case the double spending problem, in Namecoin's case the double registration problem. So the problem here is if I have 100 bitcoins, I send 100 bitcoins to one person and then I send those same hundred bitcoins to someone else. Both of those transactions cannot validate at the same time.
00:05:24.354 - 00:05:57.966, Speaker A: So which one of those does validate? The logical answer is whichever transaction happened first. The problem is though, there's no way to look at a cryptographic block of bits and determine when it was created. So you needed some extra system to determine what the ordering of transactions is when different things happened. So that's what the blockchain does. The double registration problem is similar. So namecoin is basically a decentralized DNS. So you can basically register websites, except instead of you have Namecoin's own TLD, which is bit.
00:05:57.966 - 00:06:39.670, Speaker A: So problem is, if I register ethereum bid and then you want to spite me, so you register ethereum bid as well. My registration has to succeed, yours has to fail. But in order to determine the temporal ordering you need to have a blockchain. So basically, these are some examples of sort of simple, or simple early, even very low level decentralized applications. So going back to the question, what is a decentralized application? So first of all, a decentralized application is an application. It provides a service to people who use it. So one example of something that's not a decentralized application under this criterion is an AI, artificial intelligence.
00:06:39.670 - 00:07:30.166, Speaker A: So even something like a computer virus, for example, it's a pretty malignant version of AI, and it's a very weak version of AI, but it's not adapt because it doesn't really have users, it only has victims. And if you have something that's just completely autonomous, lives by itself, lives for its own purposes, I would also call that an AI and not adapt. So adapt is something that actually serves people. Then we have to get into this concept of decentralized. So for example, there's two different levels of decentralization. So one level is this concept of, first of all, just distributed companies. So blockchain info, for example, has been recently talking quite a bit about their organizational structure and how they have no offices.
00:07:30.166 - 00:07:52.846, Speaker A: They're distributed around the world. Ethereum.org right now works in a very similar way. We have a place in Canada, a place in Switzerland, then we have developers all around the world. If we go even further, you could have an organization without really that much formal command structure. You could have something like valve. So that's one level of decentralization.
00:07:52.846 - 00:08:45.362, Speaker A: But here what we're talking about is it's sort of another even higher level. So the idea here is it's really something where instead of the people being in control, it's sort of the application being in control. So if any of you have read Daniel Suarez's book Daemon, the Daemon, there's a pretty good example of a decentralized application. But more specifically, I would call it a dao. But the general point is, it's this thing where the Daemon act is the thing that hires you. It's sort of in charge of the relationship, using the same sort of human intuition as how one would describe sort of authority relationships in the normal world. So one way of formalizing the intuition is two little criteria that I came up with.
00:08:45.362 - 00:10:10.078, Speaker A: One is the no common language criterion. So if a DAP has end users, and all of those end users speak n different languages, none of them share a common language, can the whole thing still work? So something like an ordinary company, it clearly fails the no common language criterion because, well, the whole thing is based on human interaction. People need to communicate, whereas something like Bittorrent passes it because people do not need to really need to talk to each other or understand each other in order for the whole thing to work. They just need to come together and function according to an economic protocol. So another criterion is the theses criterion. So the story that I'm referencing here, whether it's a philosophical parable that was come up with about 2500 years ago, the question is if you have a ship, and then if you then take one of the planks of the ship, replace it with a different plank, and then take plank number two, replace it with a new plank, take plank number three, replace it with a new one, and so forth, up until you replace each and every plank in the ship one by one, is it still the same ship? So the question here is, if you have any users, kick off user one, replace it with a new user, kickoff user two, replace that with a new user, and so forth all the way up to n. So you have a completely new set of people running the thing.
00:10:10.078 - 00:11:27.110, Speaker A: Can it still function? So centralized services generally fail the theseus criterion because they rely on specific individuals and they have some sort of command structure that new people can't just get into. So the idea here is thesis, criterion tries to capture this intuition of is there some sort of centralized managing class or does the whole thing really run by itself? So let's not adapt. So p to p lending. So things like Prosper lending club, Kickstarter, Uber, Airbnb, those are all two sided decentralized, they're not three sided decentralized, and they generally fail the theses criterion, and in some cases even the no common language criterion. So what is the point of Dapps? So one answer is to look at what bitcoin and cryptocurrencies and decentralized protocols have done for us already. So for example, let's say you wanted to build some kind of financial application in 2006. This could be something like Kickstarter, it could be a prediction market, gambling sites, marketplaces, escrow services, whatever you want to build.
00:11:27.110 - 00:12:37.914, Speaker A: So what you needed to do, first of all, you have to set up a server or get a VPS, write the software, ensure that the database is secure. If people are paying for it, that people got credit cards, you need PCI compliance, make sure the credit card numbers are secure, set up your banking integration, hope that you don't get shut down. And as a user, well, if in the context of online gambling sites specifically, there is a big concern about loaded dice what if you're playing a game that you think is 50 50 in your favor, when in reality it's 49 51 in your favor? As it turns out, if you're sufficiently ungreedy enough, then in the long term there's an unbounded amounts to which you can undetectably cheat using this sort of thing. Or in the context of a prediction market, you can rig markets, you can have special sweetheart deals with high frequency traders front running everyone. So then there's also the concern of shutdown. If the service gets shut down and you have a lot of money in the service, then you generally need to wait a very long time before you get your money out and there's high fees. So now fast forward to 2012 going to bitcoin.
00:12:37.914 - 00:13:22.762, Speaker A: So still need to set up a server, still need to write the software, still need to ensure the security of your cold wallet, but there's still less security concerns. For example, you don't need to handle people's credit card numbers. In a lot of cases, you do not need to maintain a secure database because you could say that the blockchain is the database from a user in a lot of cases, because bitcoin is so much more efficient, you don't need to deposit a few thousand dollars into a service at a time. You can just deposit with you as quickly as you need to. And of course with bitcoin there's much lower fees. But even still, we have a few problems here. So this is a section where I move to talk a bit about Ethereum specifically.
00:13:22.762 - 00:14:02.278, Speaker A: So this is the new paradigm, or at least one example of how to implement the new paradigm running applications in 2015. So what we're trying to do here is we're trying to build a currency, basically build an application to create your own currency. So first of all, in Ethereum, it's a blockchain with a built in programming language. And the idea is, here's some code. So this code is written in a programming language called Serpent. I named it that because it's basically Python. The idea here is that in Ethereum there's a sort of basic unit called a contract.
00:14:02.278 - 00:14:49.740, Speaker A: And a contract is a thing that has code and it has storage, and it potentially has a balance of ether, ethereum, sort of internal token. And contracts have the ability to update their storage, read their storage, send ether, and even send transactions and activate other contracts. And when you send a transaction to a contract, transactions can contain optionally some amounts of ether and optionally data. Then you hit the code. So the idea here is, if I want to, let's say, send 500 units of this coin to address 7193. Then I would put 7193 in data field zero, 500 in data field one. Then the contract would run.
00:14:49.740 - 00:15:39.430, Speaker A: First of all, it would check in its own storage. Do I have enough value? Do I have at least 500 units? If I do, then it subtracts 500 units from my account, so it detects what the sender is, subtracts 500 units and then it looks at the second data field and it updates the data field 7193 and it adds 500 to it. So what we're seeing here is basically the really low level philosophical definition of what a currency is. It's just a database where the only allowed operation is subtracting x units from one account with a condition that that doesn't push the account below zero, and adding x units to another account. So the fact that you have to do this at a somewhat low level actually offers you a very large amount of freedom. Because let's say you wanted to have a currency with 1.3% sales tax, you can do it.
00:15:39.430 - 00:16:20.040, Speaker A: Let's say you wanted to have a currency with some crazy built in issuance model, you could do it. Let's say you wanted to have a currency with a built in decentralized exchange to something else. You could do it. So you could even layer on reputation systems, whatever else you wanted. So that's the first part. What you see here is basically nine lines of code that define a currency. So if you just take this code, push it through the serpent compiler, put it onto the blockchain, then what happens is you have this contract, anyone can send messages to the contract, and anyone can just interact with the currency, and anyone can read the blockchain state tree and they can see how much everyone has.
00:16:20.040 - 00:17:12.402, Speaker A: So now let's say you wanted to make this into a pretty Dap. So what we're defining as a DAP is it's got contracts and it's also got an interface. So this over here is basically the HTML and the javascript you need to create just the basic currency app. So I'm naming this coin mycoin. The code here is stolen from Gavcoin, which was made by our wonderful developer Gav Wood about a month ago. So d here is that adapt is basically a web page. We have a simple JavaScript API, and if you click the send button then there's a function that gets run east transacts with these different values, and you can see it puts the two and two at the start of the data and the value after that, and it just sends exactly what it needs to send to the contract.
00:17:12.402 - 00:18:09.980, Speaker A: And then it also, for update, it reads the contract to determine the balance of your address. So this over here is literally all it takes to create a decentralized application. You got your ten lines of serpent code and then you got a tiny amount of HTML and JavaScript for prettiness. Don't need to maintain a database, don't need to maintain banking relationships, don't need to worry that much about security. You just need to make sure that the serpent code itself is relatively unassailable and really this is all you need to do. So current scene ten lines of code after I published a tutorial for the serpent side at 02:00 in the morning, about one and a half months ago. So I went to bed at two, I woke up at six, and even when I woke up, I checked online and someone had already written a version of Kickstarter in serpents in 38 lines of code.
00:18:09.980 - 00:19:05.820, Speaker A: This is sort of the level of close to zero barriers to entry, extremely rapid app deployments that the future is going to have and benefits, well, low fees. So another benefit is that the whole thing is trust free. There is no sort of bank that can run away with the money because the bank itself is a blockchain or it is an object on the blockchain. So there is sort of no centralized operator. So the trusted third party is decentralized. Obviously if you would compare it to this, no need to set up a server, not much need to worry about security, no banking integration. Users don't need to worry about fraud, they do not need to worry about shutdown fees are low.
00:19:05.820 - 00:19:39.234, Speaker A: And finally, eventually, of course we intend to have a DAP store, but really you don't need to have a DAP store. So right now all you can do is you can just put the HTML page on a plain old normal website and then people can just access that page. So what are the building blocks of decentralized applications in general? So there's probably going to be more, but these are some of the basic four. So there's a peer to peer network, so used for communication and messaging. Blockchain. Blockchains provide consensus. There are a few applications of blockchains.
00:19:39.234 - 00:20:08.510, Speaker A: Some of the major ones are tokens. Name registration. So if you want to register accounts. So this is what namecoin does. Once again, namecoin allows you to register domains like Ethereum, bit, Vitalix, bit, whatever else you want, bit. And ultimately name regs can be used basically as accounts, account registries, you can register accounts. These are actually important, so we'll get back a bit to them later.
00:20:08.510 - 00:20:32.760, Speaker A: Proof of existence. So proof that a certain document was signed and existed at a particular time. Decentralized file storage is important. It's useful for static content. So for example, ideally these two things would be literally stored in a decentralized cloud. You shouldn't need to rely eye on the legacy web if we're trying to build a decentralized application here. And reputation systems are also important.
00:20:32.760 - 00:21:15.566, Speaker A: I know bitcloud and maybe made safe benefits from them. So the idea of reputation systems is that if you want to have players that are in the system for the long term, or if you want to have some concept of supernodes, then reputation systems are a good means of regulating. So these are the basic four, I'm sure there might even be others. So what categories of dapps are there? So this classification I know conflicts somewhat with David Johnston's that I'm sure he'll be talking about in a few hours. But basically these are the categories that we've seen so far. So one category is just a pure peer to peer network. It's decentralized, it's an application, therefore it's a DAP.
00:21:15.566 - 00:21:56.990, Speaker A: So bittorrent now made safe, or bit cloud if you add in a reputation system and a concept of nodes being persistent. Now I know there's also some peer to peer trackers where there is a concept of cedars having reputation, but even there that concept is generally somewhat centralized, independent blockchain. So bitcoin, namecoin, ethereum, dogecoin, ripple. Well, ripple isn't quite a blockchain, but it's a ledger, which I'm going to call blockchain because it's basically the same sort of construction. Then there's something blockchain based. So a blockchain based DAP is an app that sits on another blockchain. So mastercoin and counterparty and covered coin sit on top of bitcoin.
00:21:56.990 - 00:22:30.794, Speaker A: Then mycoin, which is the coin that was just written here in serpent, HTML and javascript, sits on top of ethereum. The Kickstarter example sits on top of Ethereum. And then of course there's a hybrid. So the hybrid is probably the most interesting one because just for example, one example I want to take you through is a decentralized messaging app. So decentralized messaging app, you want to be able to send messages from point a to point b. So peer to peer network is pretty good for that. But there is a peer to peer network by itself is actually not enough.
00:22:30.794 - 00:23:20.150, Speaker A: So there's actually one interesting problem that all of the little decentralized Internet protocols and messaging apps run into, which is the issue of addresses. So if you look at bit message, or if you look at tor or if you even look at Freenet, all of the addresses of the content, they're pretty much incomprehensible. There's something like one QC capital w 57 blah blah blah. Meanwhile, on the good old centralized nat, you can send a message or go to a website like google.com. Well, guess what? So we need the app to be decentralized and we needed to have a naming system. We needed to have a way of mapping something like Google's OD bit to one of these crazy addresses, which unfortunately have to exist so we can push all that into the backend. Well, guess what? We can have a name registry contract for that.
00:23:20.150 - 00:24:20.430, Speaker A: So basically the way that a messaging network would work is that if I say I want to send a message to George, I would type in George, I would type in the message I want to send the DAP. The Javascript would actually look into the blockchain. It would check what George is mapped to, and then it would send a message to the little crazy numeric hex address that was mapped to George in the backend, and it would send the message to that account. So you could create more complex constructions like decentralized social networks. And in a decentralized social network, it would also benefit from the third ingredient, which is decentralized file storage and probably even a reputation system. So once people start coming up with these kinds of ideas, I think we'll really start seeing all the different building blocks coming together. So what are the problems with dapps? First of all, there are some privacy issues.
00:24:20.430 - 00:25:02.750, Speaker A: So if it's messaging, then the privacy is somewhat superior because there's even no central party that can read messages. It's all encrypted. But if for things that you're using the blockchain for, privacy is somewhat reduced. So bitcoin does have, for example, does have somewhat reduced privacy compared to a theoretical ideal, centralized currency where there's a perfectly trustworthy bank and the bank doesn't tell anyone what happened, there are stability concerns. So blockchains have somewhat faltered in the past. The last big thing was the blockchain fork of March 2013. So at this point, no one's going to be able to say a blockchain offers five nine service level agreement.
00:25:02.750 - 00:25:49.610, Speaker A: So that's something that we'll have to either work around or continue improving and there's transaction costs. So a transaction in bitcoin costs a few cents. And realistically a transaction in any blockchain at this point is going to cost a few cents. So last problem is how do you monetize a DAP? How do you fund development? So generally when you want to monetize a centralized DAP, what you do is use fees, but unfortunately with fees. So this is a slogan that Vlad Zamfir, one of our developers came up with, which is an expensive DAP is a replaceable DAP. If you make a DAP that charges high fees, someone's just going to clone the whole thing, take the code, substitute the fee with something smaller or even zero, and then people are going to use that. And the other approach is the Facebook approach.
00:25:49.610 - 00:26:09.314, Speaker A: You're not the end user, you are the product. Facebook is selling your data. Well, too bad your data is either open or it's closed. In adapt everyone is equal. So you can't really do that. So what do you do? One strategy is you sell services. So it's basically the red hat model, traditional model, proven to work.
00:26:09.314 - 00:26:45.978, Speaker A: Problems are it's not particularly effective. So for, you know, despite Linux being even bigger than Windows and say the server industry and way bigger in supercomputers, red Hat is still a tiny company and gets about a billion. Market cap is in the low billions. Meanwhile Microsoft and Apple and Google are all way up there and there's a preferred incentive problem, which is there is an incentive for you to cripple the DAP so that you can sell centralized overlays. If you make your DAP too good, then there's nothing you can sell. If you're selling support, you have the incentive to make your application require support in the first place. Option two, sell tokens.
00:26:45.978 - 00:27:34.446, Speaker A: So benefits are no one explicitly pays fees to you, so fees are necessary, but the fees are there to do basically because there have to be transaction costs and the fees are paid to miners. You as the developer only benefit because the fees are paid in a currency where you sold the tokens. So the benefits are you get funding up front problems. What if you get forked by an application that does a similar thing but based on bitcoin? Another strategy that people don't talk about enough is sell the namespace. So idea here is okay, what if we have a DAP where the DAP doesn't really make sense to have its own currency or its own token system? What you do instead is basically, let's say decentralized Twitter. Here's what you do. You have a name reg.
00:27:34.446 - 00:28:13.654, Speaker A: In that name reg, you take all of the usernames that have less than five letters and you sell them. How much do you think would, say, Google pay for the rights to have a Twitter account with just the letter g? So that's the idea that we're targeting here. Basically sell the, the namespace itself is an asset and you can sell it. It's very similar to selling tokens, but it's somewhat less effective probably, but it's also more useful in some circumstances. So, forks, how do you deal with forks? One solution is make the whole thing proprietary. Don't bother with making it open source. That way you still have an advantage.
00:28:13.654 - 00:28:48.050, Speaker A: Of course, that's kind of counter to the whole spirit of Dapps in the first place. Another solution, rely on moral pressure. So if society has a moral norm of respecting the DAP that uses the original creator's token system, unless the original creator does something really egregious, then that's something that will help. Another solution is just rely on network effects. So we know that currencies have network effects. We know that ecosystems with lots of interlinking daos and lots of interlinking decentralized applications inside of them have network effects. And of course, media publicity.
00:28:48.050 - 00:29:47.158, Speaker A: Bitcoin is more popular than litecoin, even though litecoin is strictly superior with its four times faster block time, because everyone heard of bitcoin first. So the last thing that I wanted to talk about is basically this idea of going from three sided decentralization to infinity sided decentralization. So the idea here is, okay, we have this concept of decentralized applications, but there's something that's still centralized, there's the application development itself. So there's this concept of founders, there's this concept of salary, there's this current of devs, there's this concept of a bounty pool. But the idea is, is it possible to create some kind of decentralized app development protocol that any application could just use? From day one, somebody publishes a white paper immediately. From that day, the reward system starts. So, problem is, who do you distribute the currency units to? It's easy to do proof of work.
00:29:47.158 - 00:30:07.774, Speaker A: It's not so easy to do proof of useful contribution. It's not so easy to teleport a good client from a completely trashy client with lots of security vulnerabilities. You can't really tell cryptographically. So there's different approaches for doing that. Generally all the approaches involve some kind of social proof. One option is basically democratic voting. This is something I believe frycoin does.
00:30:07.774 - 00:30:44.918, Speaker A: Another option is basically futurky prediction markets. This is something invented by Robin Hansen about ten years ago. It's something that I think we really don't talk about enough, but we really could benefit from. But basically the idea is you have prediction markets for what happens to a coin if certain projects get funded. And then whatever projects the prediction market says will be most useful to the coin, that's the project that gets funded. So these are sort of the two different, two ideas that I've come up with, but potentially there might even be more. So, conclusions? Dapps are a new app development paradigm.
00:30:44.918 - 00:31:24.886, Speaker A: Zero infrastructure, zero trust. But there are a few problems with them. But Dapps are also this new monetization paradigm which allows you to basically monetize application development in a way that's much more decentralized. It doesn't involve proprietary software, copyright licenses, any of that old world stuff that a lot of us don't like, but still allows us to create applications that have a lot of money. So, for example, I think one of the reasons why things like Diaspora and so forth all fail is because there's no incentive in them. Facebook, there's a lot of money in them because you can get a lot of money in them with apps, decentralized social networks, not really. Maybe now you can.
00:31:24.886 - 00:32:37.704, Speaker A: Challenges are to what extent is monetization actually possible? Thank you. Questions about what the ether presale will be starting in? We're hoping at this point a month. Our main challenges at this point have been on the legal front, but there's also a few which is actually getting close to being resolved. We have a few issues in terms of setting up cold storage policies and getting the sale app done, but things are actually getting closer to the horizon at this point. If you're afraid that you'll miss the sale, just check up on r ethereum every week. If the sale starts, it's going to be pretty obvious that it started well.
00:32:37.742 - 00:32:50.780, Speaker B: If anyone else has a question, please ask. I'll use the time if I have it again. So quick check. Each DAP has its own blockchain or are they running on the bitcoin? Blockchain.
00:32:51.600 - 00:33:03.224, Speaker A: So there are several different categories of dapps. So some of them have no blockchain at all. So bittorrent has no blockchain. For example, bitcoin, Ethereum, Namecoin, they are their own independent blockchains.
00:33:03.272 - 00:33:05.360, Speaker B: It builds its own distributed hash tree.
00:33:05.780 - 00:33:10.240, Speaker A: Exactly. And then you have the other category, which is Dapps. That sit on other blockchains.
00:33:10.820 - 00:33:41.950, Speaker B: Okay, so if you build a DaP that uses the bitcoin blockchain for each instance of the DAP, because you're going to have multiple instances. My swarm. Why would the bitcoin blockchain support that, especially as mining approaches the flip towards transaction fees? Why would we be running on our cpus and with our power, other people's apps with no incentive model?
00:33:42.480 - 00:34:07.190, Speaker A: First of all, in practice, we actually can look at things like master coin and counterparty and covered coins. And miners are willing to include Mastercoin and counterparty and covered coins data because Mastercoin, counterparty and covered coins pay transaction fee is just like everyone else. Of course, there are some people who are concerned about blockchain bloat, but.
00:34:08.920 - 00:34:10.304, Speaker B: It'S 18gb.
00:34:10.432 - 00:34:43.500, Speaker A: The blockchain is only 20gb right now. I think at this point, things in general, the bitcoin miners seem to be tolerating Dapps on top of the platform. And even if the bitcoin devs decide to say we hate all dapps on top of bitcoin, we just want it as a currency, there are other platforms that are going to be explicitly supporting Dapps. It.
00:34:53.950 - 00:35:15.250, Speaker C: We've had some experience, meanwhile, of something like 15 to 20 years with prediction markets, and I've seen something like 60 companies float down the river of zombies which didn't make it. Why do you think that all of a sudden prediction markets could have financing element for such development?
00:35:15.590 - 00:35:40.380, Speaker A: I would say at this point, some of the main problems with them is that there hasn't been enough opportunity to experiment them with them in a lot of different ways. If you wanted to set up a prediction market, you would have to go through the whole process of banking integration, setting up a server, et cetera. And right now you could just make one in a few minutes on a few minutes in code.
00:35:43.550 - 00:35:46.250, Speaker C: Don't need a bank account for virtual prediction market.
00:35:46.400 - 00:35:53.600, Speaker A: Well, virtual prediction market, I think a lot of these economic experiments only work if there's things with actual value in them.
00:35:54.450 - 00:35:59.310, Speaker C: Well, and if it's not, then you're in betting law, which has also moral implications.
00:36:00.550 - 00:36:03.586, Speaker A: What also has moral implications once you.
00:36:03.608 - 00:36:13.006, Speaker C: Are off the play? Money prediction markets. But you're in real money prediction markets, you get into a lot of, let's say, moral implications, which are very difficult to handle.
00:36:13.118 - 00:36:29.750, Speaker A: Sure. The whole thing is something that we've only begun to start looking at. And I think we'll, we'll see it all develop and we'll see what happens. Okay, guys, thank you. Thank you, Dalek.
