00:00:18.830 - 00:00:30.874, Speaker A: Next up, we have a talk from Bill Moreno. He is a lawyer turned computer scientist and he is talking about agreement making in Ethereum from a legal bill.
00:00:30.992 - 00:01:15.174, Speaker B: Check, check. You guys can hear me? Okay? All right. Like Jesse said, I am a lawyer and I'm also a computer science student at Cornell Tech in New York City. So today I'm going to be talking about how some contract law issues and other legal issues mesh onto making smart contracts in Ethereum. And I'm actually going to start in all places in Venice. Actually, I was walking along the Grand Canal about 18 months ago with my beautiful girlfriend and we happened upon a man who had a Jason Voorhees tattoo on his leg. And of course I got very excited because I also have a Jason Voorhees tattoo on my leg.
00:01:15.174 - 00:01:50.670, Speaker B: I got it free on Craigslist, actually. And it's a really good story that I can tell you at the bar tonight. You're asking yourself, why is this relevant? It's relevant for two reasons. First of all, it's Friday the 13th, and second of all, because Jason Voorhees, as you may remember from the bevy of sequels in the franchise, was an unstoppable force. And sometimes when you create a smart contract in Ethereum, you're creating an unstoppable force. And that affects some of the contract law and legal issues surrounding agreement making on the platform. So let me switch gears.
00:01:50.670 - 00:02:31.898, Speaker B: We'll put a pin or maybe a machete in the unstoppable force thing for a little bit. And let me just define contract for you. This is the definition of a contract at law. This is the one put out by Cornell University's legal information institute, which is a great resource, by the way. Contract, an agreement creating obligations enforceable by law. Now, some of you guys who have been here all week will immediately notice that we refer to things here in the Ethereum community that are outside of this very circumscribed legal definition of contract. Right? We call things that are really more like processes or agent contracts.
00:02:31.898 - 00:03:15.680, Speaker B: You've probably heard it all week. If you go to the solidity tutorial, you'll see that the very first contract on there is a simple storage. It's really more like an agent. It's a place to set and get data. Conversely, sometimes I think when we are using the term smart contract with reference to Ethereum, we actually are talking about something that falls under that legal definitions umbrella. So this week you've also heard about things like rental agreements, mortgage agreements, founders agreements, over the counter, derivatives contracts, insurance contracts and then that Ubuntu guys like prostitute contract. I never thought Ubuntu would be the ones to go there, but it happens.
00:03:15.680 - 00:04:13.620, Speaker B: So all of these are, like I said, under that kind of legal definition. And maybe by now you're already saying, what is this guy talking about? Aren't we here to kind of tear down contract law and maybe tear down the courts and replace these things with, I think Gavin actually said it nicely, the court of the Internet. And the answer is, you know, I'm a litigator, so I have sort of courtside seats, that's a pun to how expensive enforcing agreements in court is. But at the same time, I think, and this is kind of my thesis for today, I don't think that we want to reject contract law. I think as we're building out this platform and we're thinking about how to best create agreements in Ethereum smart contracts, we actually want to look at contract law. We want to learn from it, we want to embrace it. There's a couple of benefits there.
00:04:13.620 - 00:04:56.922, Speaker B: One is that if we create contracts, legal contracts, we protect ourselves against auto enforcement failing. And maybe in the early years of the platform, that will happen. It can happen two different ways, right? You can have something that auto enforces, and even when it auto enforces, a party will say, well, it wasn't a real contract at law, so I'm not really bound to it. Conversely, you can have the opposite, which is you can have something that fails to auto enforce, right. And then you want to go to court to try to enforce it. There was a misfire. So we kind of create this backstop.
00:04:56.922 - 00:05:47.146, Speaker B: If we are looking at contract law and trying to track it closely, we also benefit from contract law principles. Contract law was at one time a lot like Ethereum. It was an invention. It was new and shiny, and its purpose was to create reliability and to hold people to their promises. And so I think we can learn from its principles. And then lastly, if we are careful about how we treat contract law and other laws in these early years, I think that we can show the world that this is a substitute for legal agreement making and onboard a lot of people onto the platform that way. Okay, so I'm going to tell you guys a couple pointers, how you can kind of look towards contract law and learn from it and so forth.
00:05:47.146 - 00:06:29.462, Speaker B: And I want this to be an ongoing discussion. As you heard, I'm a lawyer who is in school for computer science, and I've been digging into ethereum for maybe five or six months, maximum. So these are kind of some of my observations and some of the things I'm thinking about, and let's keep the conversation going. That's kind of the overarching theme here. So one thing you can do though, that I've noticed is I think there's a lot of benefit to learning contract law and then writing functions and choreographing initializations such that you closely track it. I don't think that you really need a lawyer to learn contract law. We're in the age of googling and autodidacticism.
00:06:29.462 - 00:07:04.520, Speaker B: I think that's a word where you can pretty much teach yourself anything. And although the legal community has built this kind of farcical moat around legal knowledge, I think maybe it's time for us to start tearing that down. If you can debug a test net by poring over stack exchange for hours, then I think you can master some of the principles of contract law. Those are things like offer acceptance, consideration. I'm not going to get into those right now because my time has been cut down a little bit. But go home, read about these things. I'm here to help you.
00:07:04.520 - 00:08:20.586, Speaker B: And after you kind of get a mastery of them, what I would try to do is write contract functions and also think about initializing contracts in ways that hew closely to these building blocks of contract law. Actually, the other day, Fabian and Christian and Alex, they built a contract here on stage in solidity, and maybe subconsciously they did a really good job of tracking offer and acceptance very closely. So I would go and check out their code after you have a chance to read about offer and acceptance and so forth. Okay. Just as a side note, if you do follow these principles really closely, courts have been pretty good about enforcing digital agreements when they contain those contract law elements. A while several years ago, there was this wave of legislation that legitimized digital signatures. And since then, courts have been eager to enforce all sorts of digital agreements, from people creating an agreement by emailing back and forth to click wrap agreements.
00:08:20.586 - 00:08:57.062, Speaker B: So, like I said before, hewing closely to these contract law building blocks, you probably create something that's enforceable in court if it's not automatically enforceable. Okay. Sometimes those things don't really map onto functions very well. These are things like choice of law provisions, warranties, indemnifications, and something that's a little bit more specific to the Ethereum universe. I think there's a lot of benefit to having these kind of ancillary agreements. One is maybe something that choreographs how the parties are going to call functions. Contracts are not self waking.
00:08:57.062 - 00:09:36.854, Speaker B: So unless you're using something like piper's amazing alarm clock application, you want to agree with the other party beforehand how you guys are going to call functions. And related to that is you might also want to have some policies for gas reimbursement. So all of these things are not easy. At least right now, I don't see ways that they easily map onto functions. So I would think about them and think if there are other ways you can build them into your smart contracts. There's a couple of hacks here that I've been looking at, and I'm definitely curious to hear you guys'ideas. These are everything from just putting them in your solidity comments, which is not very good because it doesn't keep it holistically with the rest of the contract.
00:09:36.854 - 00:10:18.534, Speaker B: I think things like swarm, IPFs, Natspec, those might be good places to stash these other things. So I'm looking all of that. I think bytecode would be the ideal place to stash that kind of stuff, but I don't know that that's feasible. If it is feasible, we should maybe start that conversation. Another thing is to engineer. Evidentiarily, one of the best things about law school is it kind of teaches you to start thinking with eyes towards courts. Everything you do, you're kind of thinking like, what if this winds up in courts? And when you're creating smart contracts, that can be a useful thing.
00:10:18.534 - 00:10:52.926, Speaker B: Even if we're not talking about brick and mortar courts, we could be talking about some kind of digital dispute resolution, distributed dispute resolution. Maybe be thinking about those things while you're creating your smart contracts. And I'm going to tee this up this way. Imagine that we had a Ven diagram, and it was people who know solidity, and then people in this room, you might think that there's probably a lot of overlap, right? And that might look like Garfield's eyes. Okay, see, there's a lot of overlap. Now let's create another ven diagram. People who know solidity.
00:10:52.926 - 00:11:21.498, Speaker B: And I don't mean to disparage the other languages, I work mostly in solidity. So let's create another Ven diagram. People who know solidity and then potential jury members, and that you can imagine there's less overlap. So it might look like SpongeBob's eyes, just a teeny little overlap. And then lastly, let's do a ven diagram of people who know solidity and then judges. And as you can probably guess, there's basically no overlap. And then for good measure, I would also just put a big separation between them.
00:11:21.498 - 00:12:05.650, Speaker B: So it's kind of like Stewie's eyes. That's the ven diagram. So this is a long winded way of saying that if you ever have to take your code into court, or maybe even to some sort of consensus based dispute resolution contract that is operated by humans, they might not be able to read your code. So you might want to think about a couple of hacks and ways to get around that issue. And some of the ones that I've come up with. What I mean to say is think about embellishing your solidity code with legible contract style language. And it's sort of like the hacks I was talking about earlier.
00:12:05.650 - 00:12:41.486, Speaker B: I'm not quite sure where to pop them at this point. You might pop them in your solidity code. You might pop them in some of these ancillary stores like Swarm and Natspec. You might even think of paper or offline agreements that can somehow communicate with your smart contracts, but are legible to judges and jury members and so forth. Okay, one last way to embrace contract law is to pay attention to the special risks of creating that unstoppable force that we talked about before. Gav actually said it nicely earlier. I think he was talking about the system, but he said there's no reset.
00:12:41.486 - 00:13:03.254, Speaker B: And that's also true of your contracts. They're immutable. They're automatically enforcing. So that comes to play in a couple of different areas. One is rescission, modification, reformation. So in normal contract law, sometimes circumstances change and the parties want to go in and undo their contract. That's called a mutual rescission.
00:13:03.254 - 00:13:21.274, Speaker B: Sometimes a court orders parties to go in and undo their contract. They might do that. For example, if one party was a minor, that is called rescission. The parties might also have a reason to modify their agreement. That's usually just called modification. It doesn't really have a name. And sometimes the court orders the parties to modify their contract.
00:13:21.274 - 00:13:58.134, Speaker B: This might be because they did a bad job of distilling their intentions into writing. So you need to think about this and ways to kind of reconstruct. Like, how do you go about these things? How do you rescind a contract? How do you reform it? I'm going to skip a little bit ahead because I'm getting the time signal, but I have a couple of hacks here. They involve the enums that Christian was talking about earlier in the week. Are amazing to turn your functions on and off and so forth. Sometimes I think suicide is a better idea. You don't just deal with these things with respect to rescission and reformation.
00:13:58.134 - 00:14:44.890, Speaker B: But also, what if something illegal winds up in your contract? Everything from HIPAA violating medical data to non pci compliant credit card data to jared the subway guy kind of stuff. Like, if those things wind up in your contract, what do you do? How do you peel them out? So that's something you have to think about. In my last couple of minutes, I want to just focus on a potpourri of issues, all in this realm. Okay, so I'm a New Yorker, and lately scoring ETH feels a lot like trying to score meth, which is that it's impossible. It seems like a lot of the ETH exchanges have evacuated the markets in the wake of bitlicense. Actually, I kind of have proof of that. This is my rejection of cripsy.
00:14:44.890 - 00:15:15.220, Speaker B: We are unable to approve your application at this time due to New York virtual currency bitlicense requirements. And this is my rejection from Kraken. Unfortunately, we no longer offer our services to residents in New York due to bitlicense. So I think we should be talking about this. Like, is this regulation having a chilling effect on development? Actually, I was at an event with know three weeks ago, and a couple people were coming out to him and asking, like, where can I get f? It seems so hard. So ether. Let's talk about that.
00:15:15.220 - 00:15:39.020, Speaker B: We need more engineers who know law and more lawyers who can code. That's kind of why I'm here, to help start bridging that gap. And we need a lot more. Like me, I do research for this awesome cryptocurrency and crypto contract initiative that's a partnership between professors at UMD, Cornell, and Berkeley. It's called IC three. That's the website. You should definitely check it out.
00:15:39.020 - 00:16:07.538, Speaker B: Here are my acknowledgments. A lot of people helped me prepare this talk, including some of the people in this room. Thank you so much. And then lastly, let's make this an annual thing at the end. Clap for me to come back, because I want to come here every year and talk about the development of these legal issues. I think everything is in this kind of nascent stage. And let's all have this conversation continue.
00:16:07.538 - 00:16:09.040, Speaker B: That's it. Thank you so much.
