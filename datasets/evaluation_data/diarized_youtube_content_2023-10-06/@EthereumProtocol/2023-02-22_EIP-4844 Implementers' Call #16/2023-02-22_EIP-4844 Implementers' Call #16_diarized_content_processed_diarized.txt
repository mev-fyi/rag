00:00:00.650 - 00:00:03.934, Speaker A: Mike. Okay.
00:00:04.132 - 00:00:28.914, Speaker B: Hey, everyone. Implementers, call number 16 for four, four, four. A couple of things. Today we had a new Cl spec. We should continue this discussion that happened on all cordevs around zero blob transactions. The Freedom blobs PR got merged, which was another big one. And then George has an update on the KZG library.
00:00:28.914 - 00:00:50.140, Speaker B: And then, as always, we can discuss general client testing updates. If there's anything else people want to bring up, I either put it in the chat here or on the agenda, and we can cover those as. Yeah, I guess to start, maybe quickly. I don't think Xiao Wei is on, but Danny, do you want to give a quick update on the new Cl spec?
00:00:50.830 - 00:01:16.990, Speaker A: Yeah. So the primary here is the free. The blobs, led by Yossik, took quite a bit of iteration to get that in a good spot, but we're very happy with it now. It's one of those things that we don't have networking tests as we write the spec. So if something seems off when you're reading it, it might be like a typo or just some miscommunication. So please read it with activewise. There's some cryptography modifications which George can get into.
00:01:16.990 - 00:01:37.900, Speaker A: And then I think the other breaking change is the excess data gas field now is at the end of the execution payload, which is just an encoding format change to map, nicer to how we like to expand our trees. Other than that, nothing crazy. Enjoy. Thank you.
00:01:38.750 - 00:01:41.100, Speaker B: Anyone have questions, comments on the spec?
00:01:43.630 - 00:01:47.280, Speaker A: And the spare test is out, so anyone can test it?
00:01:47.970 - 00:01:48.478, Speaker B: Nice.
00:01:48.564 - 00:02:04.290, Speaker A: Yeah, and the beacon APIs need an update for signing blob sidecars independent of the block. So that is a very active PR up right now, and I think we'll probably talk about it on Thursday.
00:02:06.010 - 00:02:10.354, Speaker B: Do you have a link to the PR? If you can post it in the chat?
00:02:10.402 - 00:02:11.240, Speaker A: Yeah, thanks.
00:02:13.450 - 00:02:31.478, Speaker B: Anything else? The specs. Okay, next up, actually, I had a question, Danny, I'm just curious, how are you feeling about the spec in terms of hardenedness and readiness from a production readiness perspective?
00:02:31.574 - 00:03:01.318, Speaker A: Yeah. On the consensus layer side, I'm feeling pretty good. I think the biggest question right now is if the engine API needs to change for any of the mem pool stuff, and I'm a strong no on that, but that's another debate. The consensus layer spec is good. I think we'll spend some time the next few weeks, like deepening our tests and do some iterative releases with some additional test vectors. But things look pretty good. I think maybe George should chime in as well.
00:03:01.318 - 00:03:10.250, Speaker A: Maybe George can give us the updates on what happened with the KZG stuff and how the KZG specs are in association with what we just released.
00:03:13.070 - 00:04:06.566, Speaker C: Okay, if this is the time to do this right. So along with the pr that freeze the blob on the consensus networking stuff, we also merged the PR that does the related cryptography changes, which is basically moving away from the aggregated proofs and doing isolated proofs for each blob. So that PR completely kills everything that has to do with aggregated proofs. And basically now we can verify blobs with individual proofs, and we can also batch verify blobs and their proofs for a bit faster verification. So that got merged on the spec. And do you have a link to the PR? Okay, thanks Justin.
00:04:06.678 - 00:04:09.100, Speaker B: Didn't want to interrupt you talking, but I guess.
00:04:09.710 - 00:04:56.506, Speaker C: Okay. And after we merged the spec stuff, we started working on this on the library side, I can speak about the CKZG side. So we got that implemented and merged. So right now the base code of CKZG implements this new spec. And now basically we're working on the bindings. I think Python, Golang and Java bindings have been updated, but there is still work to be done on the C sharp node JS and rust bindings. I think in we.
00:04:56.506 - 00:06:07.700, Speaker C: I don't know if Dan is here, Dan Kaufman, but there is a bunch of stuff that need to be done on the node JS side for the bindings and CKCG. I think Dan is the person doing that. And also I think Alexei will be revising the CSAR bindings in the next days according to what he said on GitHub. But all in all, I think the idea is that we're kind of like closing down on the base KZG code. I think there is like two more issues that need to be resolved that are kind of minor. And then the idea is to start finalizing the base KCG code and start working on the bindings more. Where to be honest, I think the binding situation, because it has been happening a bit more ad hoc and decentralized, like the individual client teams have been doing it on their own, I think the bindings situation will need to be improved over the coming weeks.
00:06:07.700 - 00:07:14.658, Speaker C: In particular, some bindings are doing some checks and some other bindings are not doing these checks. And there is a bit of inconsistency because we haven't quite established rules and conventions of what needs to happen. So over the next weeks we will be kind of like figuring out exactly what the bindings need to do on a high level. And then we will need help from the client teams to implement this more specific logic to each of the bindings. So, yeah, I don't have the guidelines yet or exactly what will need to happen, but this week and the next week, we will be working on this and we will be informing the client teams on what needs to be done. But, yeah, if you are working on the bindings, please expect to have some work to do on them over the next weeks. This is the summary.
00:07:14.658 - 00:07:19.500, Speaker C: I think it was a bit too much, but if you have any questions, let me know.
00:07:22.400 - 00:07:28.270, Speaker B: It wasn't too much. Thanks for sharing. Any question from the client teams or anyone else.
00:07:29.680 - 00:07:42.880, Speaker A: In summary, if client teams are going to have these code paths ready in a week, week and a half, will the cryptography library and bindings are ready as well? The bindings specifically.
00:07:46.150 - 00:07:48.200, Speaker C: What? Say it again, please.
00:07:49.930 - 00:07:54.822, Speaker A: If people are ready to run this stuff in a week and a half, the cryptography will be ready as well.
00:07:54.956 - 00:08:15.550, Speaker C: Right. Okay. Yeah. So three out of six bindings have been merged and they are ready to be used. The other three have not been merged yet, but I imagine that they can be merged in some form in the next. Yes, six days or whatever. And after that they will need to be improved and revised.
00:08:16.530 - 00:08:17.054, Speaker A: Thank you.
00:08:17.092 - 00:08:24.900, Speaker C: But we can merge an initial version in the beginning so that people can have things to play with, but we expect people to help us with strengthening them.
00:08:26.310 - 00:08:27.300, Speaker A: Thank you.
00:08:32.070 - 00:08:32.482, Speaker B: Sorry.
00:08:32.536 - 00:08:37.960, Speaker C: Yes. No, if you have any question, this is a good time and maybe I will have something else to say as well.
00:08:38.730 - 00:08:47.990, Speaker A: I have a question. Are there general spad tests for these type of bindings, so therefore they can be cross tests across different languages?
00:08:50.030 - 00:08:56.060, Speaker C: That's a very timely question. Terrence. Justin, you want to talk about this or you want me to do.
00:08:58.190 - 00:08:58.506, Speaker B: Mean.
00:08:58.528 - 00:09:23.940, Speaker A: Could we talk about it together? I would like to implement spec tests, tests that more closely lines like the spec test. So currently these are just like JSon files. Yeah. I mean, I would like to implement tests for each function, success, failure, a whole bunch of different failure tests. Yes. Test.
00:09:24.470 - 00:10:09.582, Speaker C: Right. So to say a bit more on this topic, which I think is part of the whole thing, I said before of that, over the next weeks, we will need to be strengthening the bindings. Is that apart from all these guidelines that we need to set up, we need to also set up some sort of pipeline for this testing thing. We had the similar pipeline for the BLS libraries. Like, there was like a repository by Antonio that was producing tests and then these were consumed by the various libraries or whatever. Or bindings. Sorry, but we don't have this yet for the KCG library.
00:10:09.582 - 00:10:38.970, Speaker C: We have some form of it. Kev started working on it, Justin has done some work on it, but we kind of need to formalize and make it a bit more robust and figure out the exact format of this spec test. So yeah, there will need to be more work on this thing, but we definitely need to be able to do edge case testing on the various public methods.
00:10:40.030 - 00:11:30.774, Speaker A: Could these tests go in the consensus specs? Question for maybe Danny yeah, I think they can live there. So we used to have the standard BLS test built in the consensus specs. Recently they were moved out to an independent think, but that's because the IATF BLS standard doesn't live in our spec, so it doesn't really make sense for us to be like building those in there, whereas these crypto specs currently live in the spec. And so I would probably advocate for writing a touch generator within the specs themselves and have them build as part of our releases. That'd be awesome. Shaoi is very good at the test generator work. I can give a hand to Alex Stokes as well in terms of people that can help you there.
00:11:30.972 - 00:12:03.234, Speaker C: So I agree that having it done on the spec level would be very nice and I think it's suitable to do so. I think Dankrad kind of looked into this and he found out that PICC is very slow and for the sizes we're talking about, generating the test vectors takes too much time, I guess. And he was looking into using another BLS library instead of PICC. So we would have to fix that.
00:12:03.272 - 00:12:09.380, Speaker A: Problem before we've done test generation with Milagro as well within there.
00:12:09.830 - 00:12:17.282, Speaker B: We can't use Milagro because it doesn't have the group functions, it only has a signature API.
00:12:17.426 - 00:12:26.202, Speaker A: Sure, I guess I say, meaning there's a precedent of building with other libraries within that repo, but we would have to integrate them.
00:12:26.336 - 00:12:37.920, Speaker B: So I believe Kev is or will soon be working on getting an API for arcworks and then we'll have it. That should be quite fast.
00:12:40.130 - 00:13:03.160, Speaker C: Okay, that's nice. I didn't know that. So the idea then is that we can be writing the test vectors on the spec repo and those will be exported in some format that is yet to be decided and they will be loaded on the various libraries and hence we will be testing the libraries this way. I think that's great.
00:13:07.050 - 00:13:21.980, Speaker D: Quick question regarding Golang. Do we use the Golang bindings for CKZG or should we continue using the Golang protodank sharding gnarc package, I guess, which is what Geth is currently using.
00:13:24.670 - 00:13:27.798, Speaker A: I believe you should continue using GOKCG.
00:13:27.974 - 00:13:29.180, Speaker D: Okay, great.
00:13:38.600 - 00:13:58.156, Speaker B: Well, any other questions or discussion items around the KZG libraries? Yeah, the only other discussion I pinged Dan Kaufman on the Javascript bindings, the node bindings. One sad note is that Dan's going to be transitioning out of Coinbase over.
00:13:58.178 - 00:13:59.330, Speaker C: The next few weeks.
00:14:00.180 - 00:14:24.550, Speaker B: He's been there for six years and is just ready to take break. And so I think we likely I pinged him. It may be that he wants to stay in that maintenance path, but I think likely we will probably want to shift that maintenance path to someone else. And so I'm thinking maybe the lodestar team might be willing to take on these bindings because they're the primary consumer or the Ethereum JS team. I don't know if anyone from Lodestar or Ethereum JS is.
00:14:26.920 - 00:14:27.200, Speaker C: Mean.
00:14:27.210 - 00:14:42.060, Speaker E: This is Andrew from Ethereum Js. We're here. I have no capability to maintain. I don't know anything. I haven't written c sharp in 20 years, or c plus plus, so I don't think I'd be able to maintain the bomb. I can look into it. I'll talk with my rest of my team there.
00:14:42.060 - 00:15:12.010, Speaker E: I'll ask agenda if he's not on. He kind of sits on both Lodestar and Ethereum does. We can look at it potentially, but here again, we're also looking to move to the rust KZG library so we can do a wasm implementation once that's stabilized. I know Kev has sort of been working on that part along the way, but we just haven't had a chance to integrate it. Mean, we potentially could try and take it on, but I don't feel competent to do it based on looking at the bindings a little bit myself. But if need be we will.
00:15:13.740 - 00:15:26.270, Speaker F: Yeah, I think lion is already sort of looking into it from the Lordshot team, and so I think most more or less will be able to take care of it.
00:15:28.000 - 00:15:29.630, Speaker B: Awesome. Nice.
00:15:33.600 - 00:15:34.350, Speaker C: Awesome.
00:15:39.380 - 00:16:13.916, Speaker B: Anything else on the bindings or libraries in general? Okay. And then I guess as we're on the consensus specs, it probably makes sense to finish them up. There was one more change that recently got merged, the free the blobs pr. I know there was a lot of discussion on it over the past week. I don't know if anyone wants to give a quick update there in terms of the spec, so that was the.
00:16:13.938 - 00:16:46.768, Speaker A: Primary thing that made it into the spec release. Blobs are in independent blob sidecars. They're signed. We need that beacon APIs thing merged so that the validator clients can have a standard way to do so. The simulation results look good. And once there's an implementation in Lighthouse, I believe pop is going to compare lighthouse implementation of coupled and decoupled just to kind of additionally validate our networking assessment. Shouldn't be too many surprises.
00:16:46.768 - 00:17:02.280, Speaker A: I know a number of consensus layer devs were following that spec and commenting and have their eyes on it. But again, if anything looks fishy, please open an issue, open a pr, and we'll get it patched.
00:17:05.440 - 00:18:13.970, Speaker B: Cool. Okay, anything else? Other comments on Ford blobs? If not so yeah, last week on the awkwardevs execution call, we agreed to ban zero blob transactions basically from the spec. So not only in the mempool but also in protocol. And the reason for this was basically trying to come up with better transaction pool design and not having to deal with blah blah type five transactions would make that easier. So that was kind of the extent of the conversation on awkwardevs where we didn't necessarily discuss the transaction pool itself, but we sort of agreed to this design change. And I believe in the comments. You said Ansgar is going to put up a pr to this in the next few days, but given this, I guess the people wanted to discuss the transaction pool in more detail.
00:18:13.970 - 00:18:21.830, Speaker B: Any questions or comments on that spec change? Now's the time.
00:18:24.120 - 00:19:32.650, Speaker D: Yeah, I just shared a link with some other ideas that have been thrown around that I had posted to the Ethereum magicians. I'm perfectly fine with disallowing zero blob transactions, but I think there was still concern over ability to spam the transaction pool with multiple transactions containing blobs. So one of the ideas in there is to simply is around replacement. Do we allow replacement of multiple blob transactions with one that doesn't have blobs or one that has less blobs? Probably should not allow that. And then there's another DoS avenue which is submitting a bunch of blob holding transactions from the same account with incrementing nunces, but make it so that only the first one would actually succeed. And so that can be fixed by basically only allowing one blob transaction per account in the mempool. So these seem like relatively easy things to implement, and I don't think they'd be too burdensome on clients, and I think they do address primary dos avenues, but maybe there are others.
00:19:34.620 - 00:19:39.450, Speaker B: And both of these also are transaction pool rules, correct?
00:19:39.900 - 00:19:40.600, Speaker D: Correct.
00:19:40.750 - 00:19:55.280, Speaker B: Yeah. So they don't require a consensus change. Yeah. Yeah. I'm curious, does anyone have strong opinions about this? I agree. They seem sensible. Yeah.
00:19:55.430 - 00:20:16.730, Speaker D: Alexey asked more details around why replacement is not cool. It's simply because you can send a blob transaction, everyone needs to validate it, and then you can send a replacement without that blob transaction, and then you don't actually have to pay the costs for that. And you can repeatedly do that. Right. So you can continually spam the transaction pool with those blob transactions and not actually have to end up paying anything for it.
00:20:28.000 - 00:20:32.380, Speaker B: Any other questions or comments?
00:20:36.160 - 00:21:02.630, Speaker D: I mean, there were more strict proposals that had been brought up in the past, such as only allowing one blob in the mempool at a time. Obviously that'll provide a lot more protection against denial of service. However, I think that might be a little too burdensome on clients. You'd have to start relying on specialized builders for blob transactions and so on. So I'm personally not a fan of that. Unless we're really continuing to be concerned that these other rules are not going to get us where we need to get.
00:21:03.320 - 00:21:41.990, Speaker B: Yeah, I think there was definitely some concerns shared by other teams about proactively handing things off to builders if we don't have to. So I don't know. My feeling is like, it probably makes sense to implement at least those two checks that you just mentioned, do some testing on it, or at least continue the conversation with those in and see if we need any more sort of restrictive checks. But those two seem like good starting points and obviously not all clients have to implement them. It's probably better if we soft agree to do this.
00:21:45.720 - 00:21:48.772, Speaker D: Yeah. These are more recommendations, I guess, than anything else.
00:21:48.906 - 00:21:49.590, Speaker B: Right?
00:21:50.120 - 00:21:57.544, Speaker D: I don't know how we usually handle those in these kinds of specs, but it still feels like we need to kind of make it somewhat formal, I guess.
00:21:57.742 - 00:22:19.170, Speaker B: Yeah. This is the first time that it, I think, has such a broad impact, where 1559 had some extra degree of freedom, but it was more about sorting than the amount of transactions you store. Lucas, you had your hand up.
00:22:19.860 - 00:23:09.920, Speaker G: Yes. So about transaction replacement. I think we need to support transaction replacement of blob transactions, but what we probably want to do is to be able to replace blob transactions only with other blob transactions with some gas premium. Right. Right now there is, I think, 10% for normal transactions, and Peter was proposing 100% for blob transactions because there might be a time of network ramping up rapidly, and you might want to prioritize your transaction. So the idea to replace it is good, but it just has to be in a way that wouldn't allow for those factors.
00:23:11.860 - 00:23:14.530, Speaker B: Correct? Yeah, that's the idea, yeah.
00:23:15.540 - 00:23:20.372, Speaker D: Though I proposed just a 10% in data gas, I didn't suggest doubling it.
00:23:20.426 - 00:23:21.030, Speaker A: But.
00:23:23.080 - 00:23:37.130, Speaker D: I suppose either is reasonable. But, yeah. The idea is not to allow replacing with a smaller number of blobs than you previously had.
00:23:38.060 - 00:23:38.520, Speaker C: Yeah.
00:23:38.590 - 00:24:09.430, Speaker B: 10% is, I believe, is what we use for regular transactions. Assuming that's still the case, I feel like we would probably want something higher for blob transactions. Like that seemed to be the conversation in Austria. So whether that's like 100% or 25 or 50, it feels like we should probably agree to just some higher value than 10%. I don't know if anyone has strong opinions on the actual value.
00:24:14.520 - 00:24:24.490, Speaker G: I would go with 100%. Start easy. Right. And it discourages people from doing that.
00:24:25.420 - 00:24:31.370, Speaker D: And just to be clear, we're talking about bumping up the data gas by 100%.
00:24:33.520 - 00:24:35.420, Speaker B: The max data gap.
00:24:36.240 - 00:24:38.460, Speaker D: No data gap. Fee.
00:24:38.960 - 00:24:41.150, Speaker B: Right? Okay. Yeah. Yes, correct.
00:24:43.600 - 00:25:04.470, Speaker A: I think ideally you'd want to have the same kind of minimum increment for both the normal gas and the data gas, just to keep things simple. Otherwise, there are these edge cases. What if one type of gas is only increased a little bit, the other one is increased a lot, or one is even decreased? So ideally, just to keep things simple, I would have one.
00:25:06.280 - 00:25:16.810, Speaker D: That was my thinking as well when I left it the same. But I didn't really have a good feel for whether 10% keeps that too much of a dos avenue open. I don't know.
00:25:18.140 - 00:25:33.550, Speaker B: So a question about this. What does this actually do for DOS protection? Because with EIP one five nine, you can potentially bump your gas without paying anything. Actually paying anything more.
00:25:35.540 - 00:25:38.370, Speaker D: Not data gas. Right, data gas. You pay where you.
00:25:39.460 - 00:25:43.200, Speaker B: No, it's a 1559 type mechanism.
00:25:45.700 - 00:25:53.080, Speaker A: Yeah, the dangler is right. But the thing, of course, that you get is that then basically you guarantee inclusion in the next block. So then the transaction.
00:25:53.100 - 00:26:10.810, Speaker B: Yeah, that's right. I just don't understand what DOS protection it gets because I can potentially ramp up, like, I can send ten new transaction each time, double it, without ever having any risk of actually paying that much because the fees are never going to get that high.
00:26:13.340 - 00:26:29.440, Speaker A: Right. I mean, my personal preference in general would be to not rely too much on these replacement rules and to rely more on per peer throttling of requesting new transactions. I think that's much more robust as a mechanism.
00:26:38.920 - 00:26:49.590, Speaker B: Okay, so I guess does it make sense to continue discussing this specific gas bump offline or.
00:26:53.720 - 00:27:05.980, Speaker D: Yeah, I think it feels like we need to discuss more because I hadn't thought about that avenue that since it's 1559 like pricing, the bump doesn't necessarily discourage the dosing.
00:27:07.520 - 00:28:03.416, Speaker B: Yeah. So yeah, let's continue that in the chartered data or the four four four testing channel and try to have agreement across clients and research folk for next week. Does that make sense? Okay, sorry, I had another link open, I guess anything else on the mempool design, if not any other agenda item that people wanted to cover before we go to just client updates and testing updates. Okay, let's do those then. Any clients want to share updates?
00:28:03.608 - 00:28:26.630, Speaker A: Yeah, I can go first. On the prism side, we have been just 100% implementing the free the blobs pr because it's a pretty big radical change. So I assume that we're probably two to three weeks away from finishing it. Then after that we probably will spin a single client Devnet and depends on other clients readiness. We can probably do a multi client devnet after.
00:28:28.040 - 00:29:05.852, Speaker B: Nice. Yeah, I can go for Lighthouse. Same as prism. We are working on the free the blobs pr basically, and it's a considerable change for us as well. And it'll take, I think quite a lot of time to get it done to a Devnet stage. Two weeks sounds okay, but I don't think we can promise that. And apart from that, Sean has a pr for the blob signing endpoint that Danny linked earlier.
00:29:05.852 - 00:29:19.190, Speaker B: So if anyone from the CL side wants to give a look, that will be helpful. That's it for us. Okay.
00:29:20.460 - 00:29:43.900, Speaker A: Update from Teku. We started working on the decoupling, we started from the networking and we don't have a timeline now. Yeah, it's a considerable amount of work. So yeah, we'll probably have more clear ideas in the next call. It will be progressive.
00:29:44.480 - 00:30:01.110, Speaker F: LotsA has also started working on the same. And will the update to CKZG library be available for the changes in the methods and when it will be available?
00:30:03.400 - 00:30:04.710, Speaker C: What do you mean?
00:30:06.600 - 00:30:10.950, Speaker F: So basically the blob validation methods have changed, right?
00:30:11.660 - 00:30:12.410, Speaker C: Yes.
00:30:15.100 - 00:30:18.600, Speaker F: So we'll need the library update.
00:30:20.060 - 00:30:25.290, Speaker C: When will that. Which bindings do you care for?
00:30:26.380 - 00:30:27.480, Speaker F: Node JS.
00:30:29.120 - 00:30:41.570, Speaker C: Okay. Yeah, this is the most problematic one so far because it seems like Dan Kaufman was maintaining them, but it might be not maintaining them.
00:30:45.700 - 00:30:50.132, Speaker F: Bindings. So is the underlying library sort of ready?
00:30:50.186 - 00:31:21.950, Speaker C: Yes, of course the underlying library is ready. Yes. I think what we will generally end up doing is merging something quickly, like merging what we currently have on the bindings also for Node js so that people can have something to experiment with and work on clients with. And then we can over the next weeks improve that code and we will need help from the client dev to do so.
00:31:22.960 - 00:31:25.820, Speaker F: This sounds good. We can regenerate.
00:31:26.800 - 00:31:42.900, Speaker C: Yes, I think you can expect the node JS bindings to be merged this week. Yes, but if you can review the pr that Justin just dumped on the chat, that would definitely be very helpful.
00:31:44.520 - 00:31:47.670, Speaker F: Okay, sounds good. We'll reach out to you on the same.
00:31:48.120 - 00:31:49.430, Speaker C: Yeah, thank you.
00:31:59.480 - 00:32:01.540, Speaker B: Any other client updates?
00:32:02.460 - 00:32:15.580, Speaker A: Yes, on Besu side we have joined Devnet four last week and yes, we are continuing following the spec updates.
00:32:18.750 - 00:32:19.500, Speaker B: Nice.
00:32:24.110 - 00:32:48.500, Speaker A: No updates from Nethermine site, it's still Devnet four complete and we plan to update CKDG bindings with some CI CD updates and checks mentioned before. That's it. Waiting for new scope, I mean the net five and we will continue.
00:32:59.150 - 00:33:01.130, Speaker B: Any other teams.
00:33:12.100 - 00:33:13.152, Speaker C: Who spoke before?
00:33:13.206 - 00:33:14.930, Speaker B: Never mind, I missed that, sorry.
00:33:19.320 - 00:33:32.744, Speaker A: Do you need to repeat? We have no updates, but we plan to update KZG library binding with c sharp and waiting for a new scope. That's it.
00:33:32.862 - 00:33:35.752, Speaker B: Sorry, yeah.
00:33:35.806 - 00:33:37.450, Speaker C: Who spoke right before you?
00:33:41.940 - 00:33:43.952, Speaker B: I think it was ethereum js, right?
00:33:44.086 - 00:33:44.770, Speaker C: Yeah.
00:33:48.180 - 00:34:04.436, Speaker E: We don't have any other, we haven't done any additional, I mean we merged our branch that the 44 four stuff in it, but we were able to sync Devnet for a couple of weeks ago. I haven't looked at it recently, but we have not made any other changes yet. Hoping to start working more on Rust, KZG and that integration over this weekend.
00:34:04.468 - 00:34:05.050, Speaker A: Next.
00:34:13.500 - 00:34:38.680, Speaker B: Any other client? Okay, anything else people want to discuss before we wrap up?
00:34:46.320 - 00:34:57.180, Speaker D: I might have already missed this, but since we're. Do we need to update the EIP to enshrine the zero blob into the protocol?
00:34:58.160 - 00:35:01.616, Speaker B: Yes, Ansgar is going to put up a pr in the next couple of days.
00:35:01.798 - 00:35:02.640, Speaker D: Sweet.
00:35:10.820 - 00:35:31.820, Speaker B: Anything else? Okay, well thanks everyone. Talk to you all on the CL call in a couple of days. And yeah, let's continue the conversation around the transaction pool design on the discord until next week.
00:35:33.630 - 00:35:37.746, Speaker A: Yeah, bye everyone.
00:35:37.928 - 00:35:38.706, Speaker C: Thank you.
00:35:38.808 - 00:35:40.400, Speaker F: Bye guys, thank you.
