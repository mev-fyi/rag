00:00:00.640 - 00:00:40.281, Speaker A: Well, let's get started and thanks again everybody for joining, for jumping into the chat. I know it's been sort of a little bit of a last minute organizational effort, but I really appreciate everybody jumping. It's awesome to see so many people here, I think excited about helping to solve cross chain ux at least I hope there's some excitement here. Yeah, I think, of course it's one of the biggest problems affecting users. This isn't new information to everybody here, but the good news is there's a lot we can do here in this group. There's a lot of collective knowledge and brain power here. So yeah, thanks again for everybody being here.
00:00:40.281 - 00:01:35.015, Speaker A: I think as Vitalik and others have mentioned, I think we can really make a big dent in this in the next couple of months if we are, you know, sort of thoughtful and can get enough buy in. Of course, assuming people are willing and able to work on this stuff, assuming some amount of bandwidth. I'd be curious what others think and whether this is sort of overly optimistic, but I like having that as our sort of, I don't know, like North Star. Not to put sort of any hard timelines on things of course, but just to help frame what we are hoping to achieve something like, you know, like what's realistic to have live by October perhaps and you know, we can talk more about that. I shared the agenda in the Telegram group. If anyone has anything they'd like to add or questions they want to make sure that we go over. Yeah, please just add it to the bottom of the agenda there.
00:01:35.015 - 00:01:55.795, Speaker A: We don't have to make this an overly formal call. It's maybe better that it's not and you know, people can just jump in whenever they'd like. But yeah, so I think that was all that I really had. I don't have much else to add sort of. Yeah. By way of any intro. So yeah, I guess Vitalik, I'll hand it over to you then.
00:01:56.695 - 00:03:19.827, Speaker B: Yeah, sure. No, thank you very much for the introduction, Josh. I think, I mean as. I think you've already summarized a lot of my motivation for starting this is basically that like we. There's been a lot of discussions especially yeah like online and in various forums about layer 2 interoperability and like there's this recognition that Ethereum has this big problem where one, one simple way to summarize it is basically that using the Ethereum L2 verse feels more like 34 different blockchains then it feels like using one coherent ecosystem. And there's a lot of like specific ux screw ups and both errors and like unneeded centralization that ends up resulting from that. And this is there's a big opportunity to really start working together more to try to figure out and agree on some key standards to try to solve some of the biggest issues that we're facing in that regard.
00:03:19.827 - 00:05:19.165, Speaker B: And address formats seems like as good a place to start as any just because it's something that's fundamentally so simple. And so this is something where like I've been talking about this for a while and then recently Justin made me aware that there's some also a couple of different alternative ideas for some of the details. So alternatives to things like ERC3770, if we adopted them, would actually make them significantly better. And so I think, I mean for me the ideal outcome from this would be to get to a point where like let's say maybe just keep the scope simple for now gets to an agreement for the address format of the future. And at the same time there's definitely other standards that it makes sense to start moving forward on as well. But like the addresses as a first step and hopefully just start getting all of those conversations rolling. So I guess the way that I'd set up the agenda, at least just in terms of what I dumped in the Google Doc, right, is basically trying to like gulp out this address format question and kind of break it down into different pieces and basically see can we get agreements on specific pieces, are there particular pieces where it feels like there's multiple options and actual decision points to make and then go from there.
00:05:19.165 - 00:05:31.065, Speaker B: So I guess maybe before we get into details, are there any opening thoughts that anyone else has or wants to share?
00:05:33.925 - 00:06:23.449, Speaker C: Yeah. Hi guys, I'm Geoffrey Munis. I think I'm really excited to join this call just because I think we've been thinking about this at ENS for a long time, at least the last 12 months or so. I think the hard part for us is that we always thinking about what we were talking about in the chat, probably near the end talking about multi chain addresses and you know, how do we go from a landscape with 32 L2s with all these different addresses to like, you know, one name or one way of finding all these addresses. And we've got somewhere down the line that with the, with ENS multi chain addresses. But I think the problem has always been like how do we get all the kind of wallets and all the different parties to kind of agree on a standard. And I think, yeah, with I guess Vitalik's poll on the community.
00:06:23.449 - 00:06:35.765, Speaker C: I think that's definitely something we can actually, you know, strive towards now and that's something that we couldn't do by ourselves with just, with just ens. So yeah, I'm really excited to get this going.
00:06:40.185 - 00:06:42.625, Speaker B: Amazing. Thank you. Yes.
00:06:42.665 - 00:07:35.145, Speaker D: Sorry, maybe I should just share a bit of context and learnings from 3770. Just as like for us, the motivation where we put it out originally was because like with SAFE followed like people had an address and they sent it around and then they got assets sent on a chain where there was no safe smart account deployed. And like we needed primarily like a solution for that. Like obviously we were thinking about counterfactual addresses just have the same addresses everywhere. But then you have two major problems. One, there are L2s that where this is not possible, namely CKSync. And the other one, yeah, the other one being that the state of the counterfactual deployed account is the one from your original state.
00:07:35.145 - 00:08:56.001, Speaker D: So if you have a multisig you do key rotations over the years and then there's like lens network popping up two years later. You can only deploy a SAFE there with the state of the original SafeSmart account, which might be that the keys that you had back then you don't have access anymore. Which was for us a clear sign that addresses or we cannot count that there's always the same user account at the same address with the same state and therefore chain specific addresses are a must. And there's this chain agnostic IP 10 or 11 I think which was solving that already but it had like this prefix of like EAP 155 and then some chain ID. And this was not in our view not like human readable enough because people would then just remove that and they still don't know what was the intention. So we implemented that in Safe Wallet and the learnings was that no other wallet adopted this, the standard software. Granted we didn't push too much because in the end the problem that we had was solved as yeah, people were sending around these ERC3770 addresses and maybe they were the counterparty was annoyed that there was this prefix and they had to take it away because their wallet wouldn't support it.
00:08:56.001 - 00:09:29.375, Speaker D: But because it was human readable it was already this positive friction there that would then make them think okay, if there's a MATIC before the address, probably the counterparty wants to receive the assets on a different chain. And so for us this was solving that, but especially because it's not Widely adopted and because it relies on this off chain registry, definitely. We also think that there's some need for a revision of that. And see, going forward, what's the best approach to chain specific address?
00:09:34.355 - 00:11:04.905, Speaker B: Yeah. Thank you. Anyone else? Okay, maybe just to proceed with the kind of, with the structure a little bit so we start moving things forward on some specific issues, I guess. I mean, I feel like it's good, it would be good to just see how much agreement do we have on the very basic thing. And the, the very basic thing I, I have in mind is basically the, the first part of the agenda as I described, which is the underlying idea that it would be good if we upgrade the Ethereum ecosystem to using some kind of standard address format which contains both the address within the chain and some kind of identifier that refers to the chain. So I guess first open question is that is there full consensus that we want to move to a world where addresses look like this and is their willingness to switch over to a standard like this if there is broad agreement on it.
00:11:14.765 - 00:11:19.365, Speaker A: Like lots of thumbs up. Anybody disagree? Dissenting opinions?
00:11:22.505 - 00:12:00.485, Speaker C: I wouldn't call it a dissenting opinion, but obviously we, we solve a slight difference at ens, obviously. So we have a name and it has the ability to, to go to each individual chain so you can look up any specific address on any chain. So it's, it's a slightly different way of doing things where it's up to who's looking at this address or name to decide which specific area to go to as opposed to this one is explicitly who's writing the address. So I think, I think it depends on the format.
00:12:00.525 - 00:12:00.965, Speaker B: Right.
00:12:01.085 - 00:12:24.945, Speaker C: So if I'm putting something out there like OP colon address. I'm saying that this should be an address specifically on op, but as an ENS name on its own. I can say like no matter what address you want to send to me, you can just look at jlad, you don't have to go to, I don't have to support OP Colon Jeff Lauderdale Eth or something like that. So I just.
00:12:27.365 - 00:12:28.645, Speaker B: Sorry, it's gone.
00:12:28.765 - 00:12:34.785, Speaker C: Oh yeah, just wrapping up. Just like it might depend on the context itself of the address.
00:12:36.005 - 00:13:33.245, Speaker E: And I was just going to say sorry to jump in front of you yo, but I was just going to say that in the context of Cape 10, those were not really meant to be end user facing human readable addresses. Those were sort of canonical back end system log protocol level addresses. So the translation to like 3770 when something goes user facing was a Pattern we saw discussed in a couple places and makes total sense. It was more like in. In for lieu of any other registries, The Ethereum List 1 was used as canonical and the sort of numeric thing was canonical in case things get renamed over time or something. I. I think there was always this assumption that there was like an.
00:13:33.245 - 00:13:57.605, Speaker E: An analogy like IP addresses to DNS like the. The more protocol level name was intended to be Cape 10 and it was always sort of hoped that there would be a better human readable one when people are telling each other where to send assets which is maybe the same thing Jeff just said.
00:14:02.165 - 00:14:04.597, Speaker A: Humble such Did you have your hand up?
00:14:04.741 - 00:14:05.861, Speaker E: Oh no, that was me.
00:14:05.973 - 00:14:06.589, Speaker A: Ah, sorry.
00:14:06.637 - 00:14:08.093, Speaker F: Yep, perfect.
00:14:08.229 - 00:14:10.077, Speaker A: My zoom was not showing you speaking.
00:14:10.141 - 00:14:10.745, Speaker B: Thanks.
00:14:13.005 - 00:15:05.545, Speaker G: I wanted to add that. So since ens since ENS already has. Already has a solution that is a bit different from what from what we're proposing now. I wrote a message in the group and suggested that we need to decide on canonical resolution order in case there's a conflict. So see my message there. But basically the idea is that since an ENS user, I mean if it's a user if at chain if then it's possible that the user already has an address for this chain as an address record, in which case this should get a preference. So we should decide on the order preference, which I would assume is that if the user has set something in the EMS record which should take precedence and if not we should fall back to the.
00:15:05.545 - 00:15:18.905, Speaker G: If not then we should fall back to the default, which is the ETH address. So user. So user eth at chain ETH would be the Ethereum address if it's not explicitly set otherwise.
00:15:20.125 - 00:16:32.261, Speaker B: Right. I mean, I guess this all depends on like the details of how things are set up, right? Because like conceivably you could imagine an ENS thing that basically where like the entire interface is basically it's a function where the input to the function is some kind of chain identifier and the output is an address. And then any kind of fallback stuff would just be purely internal logic. But okay, I guess maybe just to move things a bit forward. Right. I think. I guess are we in agreements that like generally the like you can think of human readable addresses as being like one interface form factor and ENS is another interface form factor.
00:16:32.261 - 00:16:53.455, Speaker B: And generally these two are like separate problems where we want to move forward on solving both and like it feels like generally they don't interfere with each other. Except I guess would probably wants to agree on a common way of identifying Chains. Does that like, does that sound correct to people?
00:16:54.915 - 00:17:29.214, Speaker C: Yeah, that sounds correct to me. I think they're like, they can work pretty well together and they don't necessarily conflict with each other. So if you did something like OP colon Jeff Lau eth, then if I had an, you know, obviously if I know I want to send to something to G on op, then I can just look up the OP address. But if you write OP giftloud or eth, you're kind of specifying I want to only receive assets or this specific address I'm talking about is only for OP or something like that. So if the standard kind of works well with that, I think they can operate quite well together.
00:17:31.874 - 00:19:10.205, Speaker B: Ignited. Okay, so sounds like that makes all makes sense so far. Maybe I guess we can move straight into the other probably somewhat meteor topic. So this is actually the place where my own position you got changed thanks to Justin Drake and the ZK saying folks a couple of weeks ago. But basically so status quo erc 3770 the way that chains are identified, right? So the place that stores the mapping of like what even is ETH colon, what even is OP colon, and so on and so forth, that is an off chain centralized registry, right? And there's an argument that that got made that feels pretty persuasive, which is basically that off chain centralized registries are harder to scale, right? Because they work fine when you have I'm gonna like 10 like 5 or maybe 15 different L2s and people are generally friendly with each other. But once you have L2, potentially thousands of L2s and ideally you want to be able to like you want creating new L2s to be as permissionless as possible. So there isn't like a central gatekeeper of like which L2s are even allowed in the list even in the first place.
00:19:10.205 - 00:20:15.135, Speaker B: Okay, yes. And this secret L2 is good addition. Then like basically there's these arguments for using ENS as a registry instead of this off chain list, right? And so like basically instead of having the centralized list that says like this is what OP colon means, this is what polygon colon means or whatever, Layer two is what actually be identified by a particular ENS name. And there would be like a type of ENS record that you could set if you are an earlier two contract that basically says like essentially this is, this is my config. So yeah, I guess like one broad question is, I mean like how do people feel about this idea? And like this is like this gets into deeper stuff, right? Because I Think there is like starting to like there's actual trade offs between the different design. So we started talking about in the chat over the past week.
00:20:34.795 - 00:21:16.065, Speaker H: Yulia Wazik Singh so the way that I think about it is similar to how DNS routing work works in the rest of the world. Right. If we were to register L2s like Ziggy Sync Era ETH or base ETH on layer 2, Ethereum ENS, we can also deploy local contracts for ENS on each L2 and then that L2 can create name services for their specific roll up. How do people feel about that?
00:21:22.205 - 00:21:44.725, Speaker B: So this is like basically the kind of original ENS scaling proposal, right. Where you would scale ENS without like moving into one single L2 by basically encouraging people to use subdomains where top level domains would be. Yeah, like controlled by contracts that would then do like CCAP read to verify, right?
00:21:46.425 - 00:21:52.161, Speaker H: Yes, I suppose. I think like a hierarchical way of structuring name service.
00:21:52.273 - 00:22:22.729, Speaker B: Yeah, yeah, right. I mean that makes sense. I mean, I guess, I mean the thing that I like, I guess technically like you can, you can do that while at the same. While at the same time using ERC 3770. But I guess. Well, okay, maybe one reason why. Right, right.
00:22:22.729 - 00:23:12.177, Speaker B: It definitely is a little bit orthogonal. Right. Okay. So one of the ways to think about how it's orthogonal is that like, at least with the ENS approach, it's theoretically possible that someone could make multiple subdomains and put them both on ZK Sync and you could have or multiple domains and put them both into these contracts where subdomains are in zksync. And then you could have like multiple top level domains, subdomains of which could be registered inside of ZK Sync. Right. So like that design by itself doesn't imply that there is like one millik canonical ENS sub registry for a Layer two, though.
00:23:12.177 - 00:23:17.125, Speaker B: I mean, obviously if we want, we could try to encourage L2s to do that.
00:23:26.395 - 00:24:09.355, Speaker I: Sorry, I couldn't see the right hand button, but maybe just kind of building on at least some of the conversations we've had on the Z kissing side. So I work closely with you. I think at least for us, the ENS solution was seen for a few different reasons, but it did come largely down to, I think, something that you mentioned in the introduction, which is, you know, in a world where we want to see, you know, a lot of L2s exist, permissionless creation, you know, even things like ephemeral use cases, having this off chain registry feels like it will be a bottleneck for people to be able to move quickly and will become a maintenance burden. And having, you know, moving more towards as much as we can, a single source of truth on that one via something like ENS looks like a good solution to this problem at least.
00:24:10.935 - 00:24:53.255, Speaker B: Okay, maybe let's get to. Let's. Let's like jump into you know like some of the authority or issues. So let's say we do adopt a version of 3770 that depends on ENS. So that's, that's rooted in L1. Let's. How would we handle testnets? Like would having an address on like the Optim would resolving an address on the optimism testnet, would it require looking at the Ethereum mainnet or would we have like basically, you know, like separate routes for.
00:24:53.255 - 00:25:02.355, Speaker B: Or like basically like separate. I mean like test ENS that have different prefixes for each of the different Ethereum testnets.
00:25:05.375 - 00:25:37.065, Speaker C: So we do have supporting registries on some of the test nets. I guess if we were going to depend on these specific deployments then, you know, obviously we want to make sure that these are kept up to date. We do keep it mainly up to date I believe on Sepolia and I think we deprecate Gurley so Superlia and Haleski right now. So it would be definitely possible to use those as like the main net of all the other test nets. But yeah, there are other options as well I'm sure.
00:25:38.405 - 00:26:02.703, Speaker B: Right. I guess like do people. Richard? Yeah, I hope you can hear me first of all but I would prefer if it's the same as L1 like use the same as a normal mainnet because we also don't want that. Let's assume we want to extensors and also push additional information like chain ID and so on. Also with this entry to ans which.
00:26:02.719 - 00:26:04.175, Speaker D: Would allow to have a more holistic.
00:26:04.215 - 00:26:13.297, Speaker B: Picture of this chain then we want even for testnet they should not collide with the same information as any main net. Right.
00:26:13.361 - 00:26:13.921, Speaker F: So it should.
00:26:13.993 - 00:26:42.911, Speaker B: Testnet should also not have the same chain ID as the main net and then utilizing one registry would make more sense for me than saying oh, testnets are on a testnet registry. And then. Right. I mean I guess the concern that I have with that design. Right. Is that like philosophically it feels weird to say that resolving addresses on a test net would requires running a mainnet node. Right.
00:26:42.911 - 00:26:53.435, Speaker B: Because general. Yes, yeah, go ahead, answer name.
00:26:55.775 - 00:28:04.805, Speaker I: But yeah, thank you for telling that. Oh, so background. I think I agree with your position. My intuition is the most simple thing for us to do in that case would actually be for the test net registry to be maintained, but it to be independent of mainnet so that you would essentially have a testnet where your NIST names mapped to whatever the addresses are required for the testnets to run correctly. Fully isolated from mainnet, mostly just from like, you know, simple philosophy of like having a beer, like clean design and having to make sure that the testnets mirror mainnet in a way where, okay, the specific address could be different, but to first approximation, everything is internally consistent rather than say, relying on mainnet. Also this seems like it could introduce sort of like weird version mismatches, particularly where protocols may be deploying different upgrades at different times, making different assumptions and having it kind of move in a consistent fashion where the test nets are internally consistent, at least to me, seems sensible. And the protocols are kind of, I think, required, slash incentivized to keep their system up to date and make sure that the test sets are maintained correctly for their own testing as well as obviously the ecosystem correctness.
00:28:07.225 - 00:28:39.743, Speaker B: Right. Okay, so if you do the approach of test sets being separate, that does mean that there is a more limited use case for some kind of sort of off chain root registry. Right. Where in this case the role of the off chain registry would be not register L2s, but to like, in some sense register ecosystems. Right. So the example there. Yeah.
00:28:39.743 - 00:29:15.025, Speaker B: So like you can have like east for me and Sepolio for the Sepolia testnet and like you might have a similar thing for other test nets. So is. Is that a thing that people are leaning toward? Are there even conceivably other options?
00:29:39.555 - 00:29:40.733, Speaker A: Seems like we are.
00:29:40.829 - 00:30:35.255, Speaker B: Right? Yeah. Yeah. I'm seeing some discussion that's in the, that's in the chat that's been going both ways, I guess. Anyone else have any particularly deep points or deep thoughts on this topic? Okay, well, maybe.
00:30:36.035 - 00:31:02.065, Speaker E: Sorry, I. My, My only question, if so, coming back to the secret L2s is what's the fallback for secret L2s or L2s that are for whatever reason, ephemeral, non public. Do. Do they just use like chain ideas? Fallback unregistered.
00:31:03.165 - 00:31:32.235, Speaker B: I mean, the simple thing that might be always available, right, is that like basically, yeah. Instead of using like whatever eth, you would just like directly put the like L1 address of the L2 contract. And so you would just do address ataddress.eth. right. Like it's, it's clunky, but it does work. Or you could just ephemerally register some like totally random ENS name.
00:31:34.615 - 00:31:40.235, Speaker F: Sorry, can you explain better what you mean with the secret L2s? Sorry, maybe I'm missing a bit of context.
00:31:41.375 - 00:31:50.155, Speaker B: I guess the idea is to just like make an L2 that's like used by some group of people that like almost everyone in the world never ends up hearing about.
00:31:54.205 - 00:31:58.785, Speaker F: So you mean like a NL3, something that is hosted inside another ecosystem or.
00:32:03.125 - 00:32:03.581, Speaker B: No.
00:32:03.653 - 00:32:05.245, Speaker G: So yeah, I think it's a.
00:32:05.365 - 00:32:09.105, Speaker F: Then it will have a contract on the L1, so the world will know about them.
00:32:13.325 - 00:32:35.607, Speaker G: Yeah, I think it's. It's a problem. It's almost identical to the case of L3. L3 can also be ephemeral and. But all of these things are rooted to some canonical bridge. That's something that every L2, whether it's secret or whether it's layer three, it's rooted there. So I would assume that it could be a.
00:32:35.607 - 00:32:49.965, Speaker G: It could be a hierarchy where you can use the bridge that defines any number of L2 of a secret L2s or L3 is on top of a that. And then you can have a internal naming convention or something.
00:32:51.465 - 00:33:15.805, Speaker F: Yes, I was asking because we are. So I'm also at zksync and we're thinking. So in the elastic chain we have this problem. We have the fact that we have nested. Well, not a problem, it's a feature. We have these nested L3s, let's say. And so that's why we wanted the recursive part, because we don't want people to resolve a layer 3 name on the L1 because it's expensive and it's clunky.
00:33:15.805 - 00:33:42.515, Speaker F: So we want them to jump to the ENS record that says ah, by the way, the place to resolve stuff in the zksync ecosystem is this. And then you do it off chain through whatever sequencer or service is going to resolve the contracts recursively, the ENS contracts that lives on the L2. So on the L1 nobody would ever see the L3 name. You will just look at it on the L2.
00:33:50.695 - 00:33:51.435, Speaker B: Right.
00:33:53.655 - 00:34:16.485, Speaker G: It becomes something a bit similar to the very old fidanet protocol, where sometimes you have to define that the way to reach a certain node is via a certain other node. So the address had to reflect that. The way to reach a certain layer three is through a certain L2. And then the rest of the resolution can happen there.
00:34:58.485 - 00:35:00.885, Speaker A: Should we, I guess, move to a different.
00:35:00.965 - 00:35:37.081, Speaker B: Yeah, yeah, let's move on maybe. Yeah. So the next question is. This is I guess a somewhat, you know, like political and like not just technical question, which is like, what is our stance toward EVM layer ones that are not Ethereum rooted. Right. So this is things in the Binance, smart chain, Monad, Tron, mock type of category. So I mean, I think, you know, like it's, it's perfectly fine for our stance to basically be.
00:35:37.081 - 00:36:00.145, Speaker B: Yeah, you know, like you go, you go figure something out for yourself. Or it's fine for our stance to be like basically, you know, treat, treat them the same way that we treat test debts or even doing our best to encourage them to get ENS addresses. But is this a topic that people have thoughts on?
00:36:04.845 - 00:36:48.939, Speaker F: A sort of a tangential point to this. We're thinking about using the standard for URLs or URIs for, for addresses. So having a prefix that says basically the protocol that you're using, which could be evm, column, slash, slash and then the address. So this would be. So from a UX point of view, this could be useful to make sure that these things are treated as other URLs. So it's not a new concept that you need to parse and maybe make mistakes. But this could also be an occasion to sort of be sure that the addresses are disjoint between the L1, between the different L1s.
00:36:48.939 - 00:37:01.815, Speaker F: So if you are EVM compatible, you should have a different. But you're using a different protocol, a different L1, then you should use a different, a different protocol prefix at the beginning or something like that. Does it make sense to people?
00:37:03.715 - 00:37:22.865, Speaker B: Right. I mean, this is also one of those things where the, you know, the like address at L2E kind of does implicitly. Right. Because the ETH tag like basically implies what the ecosystem is.
00:37:25.045 - 00:38:10.547, Speaker F: Yeah, I never sure if that's, if I should interpret that as the one specific ENS contract or like, or like go on Ethereum. So I'm not sure, I'm not sure exactly how we want to add meaning to like the protocol part of the, like the suffixes. Because we could have different top level register at the end. So you could have like, at the end you could have a ens, a dot, something else if you want to use another register. I don't know, or maybe we don't want that and we want to impose that it will be one single point of route to start. And so yeah, you wouldn't want that to. If that's, that's unique, then you just need to know that you're going through Ethereum and then, then that's clear.
00:38:10.547 - 00:38:12.135, Speaker F: It doesn't have to be in the address.
00:38:14.675 - 00:39:00.105, Speaker C: I think for me there's two, there's two different parts here. Like one is you know, non Ethereum affiliated EVM chains like say Binance Chain or something or. And Tron. And I think it's okay for these kind of services to maybe pick their own.com name that they import to ENS via DNSSEC or decide to get their own Ethname if they want to. I think the more important question maybe is like how do we support I guess slightly non EVM compatible things? I guess there are some L2s that don't have address forms are exactly the same as Ethereum and that might be slightly different as well.
00:39:03.165 - 00:39:22.979, Speaker B: Right. And I think one answer that we can have for there is. That's just out of scope. Right. And I think the reason why that's fine is if you take for example Bitcoin addresses. Right. Then if you want to have a wallet that also supports Bitcoin, there's already zero risk of confusion even if we do absolutely nothing.
00:39:22.979 - 00:39:28.295, Speaker B: Right. Because the address formats are just like so completely incompatible.
00:39:32.435 - 00:39:33.895, Speaker C: Yeah, that makes sense too.
00:39:44.235 - 00:40:38.275, Speaker H: To be clear. This is. Sorry, I posted, I posted a picture in the chat. Does this kind of make sense to people? I know we don't have to boil the ocean with solving the L1s, but each of the L1s can have their own name service but then also register their name that I don't know Solana that Sol that via, you know, binance on the L1ENs if they wanted to interrupt between the their chain and Ethereum. And for Ethereum we will have those subdomains like the roll ups registered on L1 and then local deployments of ENS for their own resolution within each chain. And then test nets, we talked about having the test net name.
00:40:39.695 - 00:40:50.465, Speaker B: So that basically sounds like in a sense we are treating test nets and like non Ethereum rooted L1s in the same way.
00:40:56.205 - 00:41:06.573, Speaker H: Yes, except for it those would be deployed or registered on the Ethereum Testnet ENS service.
00:41:06.669 - 00:41:32.031, Speaker B: Right, Right. But. Yes, but. Right. So you just have like others. So you'd have eth which basically refers to the Ethereum ecosystem, like a registry of the Ethereum ecosystem that where the root is the ENS registry. And then if Tron Wallets wants to they would just make.trx
00:41:32.031 - 00:42:40.189, Speaker B: points to the equivalent for Tron and then we would do like Sepolia for and so on. Yes, yeah, yeah, okay. I mean I think this is like a fully coherent proposal that makes. Makes a lot of sense and no, no and no. Thank you for making the diagram by the way. Okay, that makes sense I guess one maybe just so that we can get through things in, in this call. Do people have like opinions or strong feelings on the aesthetics question? So this is the third section in the, in the roadmap, right.
00:42:40.189 - 00:43:11.885, Speaker B: So like this is basically holding you know like format constant, holding like what information goes into the address constant and holding all the other issues constant. Like do people have like. Basically I mean like one option is like chain colon address. Another option is like address at chain. And I mean like we are like if we're going to make a distinction between like ethan site trx, where does that live and so on.
00:43:15.625 - 00:43:54.381, Speaker C: So I'll just reiterate my opinion from the chat. I think like having the identity of the person be first I think makes a lot more sense than having the change first. So I think just for UX reasons that makes a lot of sense. That's kind of how things are with like emails and other IDs. It makes sense when you see it like op colon because that's kind of like how we do prefixes for like protocols. But I don't think protocols is a very like user friendly thing and I don't think we really, really see it when someone like you know, looks@.com, you don't say you know, HTTPs://anymore.
00:43:54.381 - 00:44:04.725, Speaker C: So I think that's, that's more of like if this was a low level protocol but if it's a bit more high level where you going to see something? I think identity first makes a lot more sense to me.
00:44:08.705 - 00:44:21.885, Speaker B: Okay, is there anyone who like significantly disagrees with what's option 2 in the list? So 0x D8 blah blah blah at optimism.
00:44:31.985 - 00:45:16.455, Speaker J: Hi, this is Andy from the okxfolly. I actually prefer the first option that we put the network name before the address since like when we first looking at the address we are going to send the wallet the that receiving address. I mean like when we first look at the address we read from the beginning to the end so it will be more specific that to finalize which time we are going to send the money into. So I actually from the user side I prefer the we put the optimism first before the address because the valid address is kind of hard for user to read.
00:45:19.155 - 00:46:01.905, Speaker C: I would just back up my point and just say that like from an ENS point of view we view addresses as something that will eventually go away and that we're not looking for a world where I think crypto doesn't go get to like, you know, Ethereum doesn't come to a mainstream world where we have tons and tons of addresses. The fact that we have the protocol as a ENS name I think is already a lot more readable and so eventually I would like us to see transition to a no hex world where you know, the first part is actually the identifier and the identifier could be an address as we fall back to that, but it could be an ENS name that is more readable, something like Vitalik. And that's why I think it looks better at the front.
00:46:05.885 - 00:46:24.555, Speaker F: I feel a bit strongly about making this respect the URL format. So just use what has been standardized for like a long time so you have your identifier on your. On the system at. However I find that system which is for email or Mastodon or whatever, I don't know.
00:46:31.695 - 00:46:33.755, Speaker B: I see bumble fudge raised hand.
00:46:37.475 - 00:46:40.095, Speaker E: Oh wait, oh wait, I'm. I'm not formed.
00:46:46.715 - 00:47:09.295, Speaker H: I think maybe one point to add if the address is standardized, let's say it is the address name at the L2E wallets can then create a very good user experience by parsing this address and displaying it in the way that makes sense to the user the most. If that was the concern.
00:47:10.275 - 00:47:22.575, Speaker B: Right. So like a wallet that has like limited space in a text box would just like literally list it as 0x D8D A04 Timism bodies.
00:47:23.155 - 00:47:30.945, Speaker H: That's right. Even create a separate field for it so it's very clear to see.
00:47:34.925 - 00:47:41.225, Speaker C: Yeah, I like that a lot. I think like at the end of the day this is for users and not for you know, machines.
00:47:46.445 - 00:48:35.175, Speaker B: Okay, that's. It's good to get the different perspectives. By the way actually since I just saw. Who was it Andy from OKX here. Did you happen to have any thoughts on the things in the previous parts of the doc? So like basically the general concept of addresses that include and the some kind of chain ID and the in chain address and then using ENS as the registry for L2s within the Ethereum ecosystem.
00:48:37.435 - 00:50:16.365, Speaker J: Actually really agree with that since you know we also have the A wallet as well and it always happens that user send the money to the network that they haven't deployed the smart country on chain. That means if they want to use this part money they have to pay some extra network fee to register and to deploy the smart contract on chain. And we also get some complaint from the users that oh I accidentally transfer money to a different chain. Could you help me do something or like give me free guests something like that but we cannot so it's really useful that if we can use the this we put network name before that the user could really clearly to specify which chain they are going to send money to. So we are really totally agree with this and the thing is I think we can start from overlaid and to give user a promote to tell them like this is chain you are going to send by using this way but the future we should also push those dapps to also adapt to this kind of format of other drives. But yes sure we really support this kind of format. It can really help us to reduce a lot of compliance from our users.
00:50:17.185 - 00:50:38.635, Speaker B: Okay, thank you. By the way, I forget does OKX Wallet support or do any of the OKX ecosystem things support EVM chains that are not rooted in Ethereum L1 so like things in the Binance or Tron or like Mon Monad or Avalanche category.
00:50:40.695 - 00:50:42.799, Speaker J: I think hardly Nope.
00:50:42.887 - 00:53:11.439, Speaker B: Let me double no okay okay and okay maybe yeah in the meantime I just to move forward with the items this is one small one but how do people feel about putting it explicitly into ERC3770 that checking for checksumming should just be mandatory in new style addresses. Like basically just use this as an opportunity to make finally make non checksummed addresses just invalid yes EIP 55 checksum in this case. Okay. I mean I I am seeing lots of lots of silent smiles and raised hands so that feels like a yes. Okay then another small one is if we want to get into some minutia how do we support addresses that are simultaneously valid on multiple chains and the two methods that I have here are basically one is the listing method. This is something that I noticed that is wallet just independently decided to go and support which is basically that if you want to have if you have an address that's accessible on some list of L2s then you can basically provide the list of L2s and just merge that into a single address. Then the other method is the category method where we could basically define a larger set of categories.
00:53:11.439 - 00:54:17.405, Speaker B: So like for example this could be at EVM for any chain that supports some particular standard of the EVM or like something potentially at ERC 4337 for any chain that supports subset of EIP is that includes some the EVM features that you need for let's say enshrined 4337 for example. So is and I mean I know I was talking to Wilson from about this and there was a desire to be able to like for those wallets that are not or that are not able, that are able to offer users the same address on every chain that they support. Like basically yeah. Like why, like, why not add a type of universal or at least like category wide address is. How do people feel about ideas in any of these categories?
00:54:22.025 - 00:54:24.841, Speaker A: What is the use case? Do you know that, Wilson?
00:54:24.953 - 00:55:13.929, Speaker B: Yeah, yeah. I mean I think the use case is basically that if you are a, like if you are a wallet. I mean like one simple example is like if you just are in EOA wallet then like the functionality that you offer your users today is that you just give them one address and that one address gets usable everywhere. And like users don't have to think about the or idea of like are they currently getting their optimism address or are they currently getting their main NET address or whatever. Right, right. Yeah.
00:55:14.057 - 00:55:18.005, Speaker A: In the chat can be solved with a user owned ENS name.
00:55:18.545 - 00:55:56.785, Speaker B: Right, okay, let's. That, that sounds like the, the general vibe is like not too much enthusiasm from most people. And I mean, I guess one argument is like for at least some period of time wallets that want to be chain independent could just continue to use old style addresses. I suppose. Bumble fudge.
00:55:58.125 - 00:56:59.833, Speaker E: I was just going to say this actually makes me think back to Yoav's point about fallbacks or sort of an hierarchical resolution. Because if, if the only two options are something that ends in dot eth or a bear address, the fallback's kind of clear. But then if there's this third category, like future EIPs could define a category or some other way of resolving, then it gets into like how, how to. What's. What's the fallback if that fails or something. I don't know. I think I like everyone wanting to punt this, but I'm also tempted to say that if it were specified in a loose enough way, future EIPs could add more options rather than having to hard code them.
00:56:59.833 - 00:57:40.125, Speaker E: Now. Okay, I don't think 4337 was written to be one of these categories. So it's a little weird to use that as the example, but I'd imagine could be a 4367 update or extension that would make, you know, add abi to a 4337 wallet that makes it work this way. But like, I think maybe it's in how the, how the spec defines that second segment as a syntax or as or as you have meant like, you know, like almost like a decision tree or something.
00:57:42.075 - 00:57:53.595, Speaker B: Yeah, I mean like my goal in suggesting that is that I think there's like. If you think of it from a Venn diagram kind of perspective, like, I mean in this case it's not really a Venn diagram because it's pretty concentric.
00:57:53.635 - 00:57:53.787, Speaker E: Right.
00:57:53.811 - 00:58:27.525, Speaker B: But there's like a big set of chains that support addresses that are the catch 160 of an ECDSA key. And then there is a somewhat smaller set of chains that like that support the. Yeah. EVM up to a particular version with a particular set of exact standards that lets you have the exact same smart contract wallet address across all of those chains. And then that would get even more restrictive if people wanted that address to be eof, for example. So that was the motivation.
00:58:30.385 - 00:58:50.505, Speaker G: Specifically. Specifically for 457. I wasn't sure what there. Because the 457 addresses are determined by the factory. So they're actually. They're just normal. Normal addresses that exist wherever you have this fac with the factory in the same address.
00:58:50.505 - 00:58:54.365, Speaker G: So what does it mean to have something at 4337?
00:59:12.475 - 00:59:15.923, Speaker A: Sure, if someone was trying to speak. But we are also at time.
00:59:15.979 - 00:59:18.695, Speaker B: Yeah, I.
00:59:20.115 - 00:59:21.899, Speaker I: Regarding what you have said, I actually.
00:59:21.947 - 00:59:24.067, Speaker B: Say that we're defining a standard for.
00:59:24.131 - 00:59:26.203, Speaker J: Addresses, not standard for accounts.
00:59:26.259 - 00:59:29.497, Speaker B: So 4367 is not relevant in this.
00:59:29.521 - 00:59:32.585, Speaker J: Case because account addresses are just addresses.
00:59:32.625 - 00:59:38.529, Speaker B: Like any contract, like NUA, whatever. Right. It is part of the network regardless.
00:59:38.577 - 00:59:39.885, Speaker J: Of the account type.
00:59:40.825 - 01:00:03.223, Speaker B: Yeah. Okay. But I think this is in any case a pretty small point though, I think. Although one thing that I do want to just like flag to everyone. Right. Is that the concept of an address being not necessarily the same thing as an account. One other place where that becomes very relevant is things like stealth addresses.
01:00:03.223 - 01:01:10.225, Speaker B: Like basically other forms of addresses that don't that map to accounts in more indirect to go from here. Like you know, would there be value in there being a group that creates a. An updated version of ERC 3770 that takes or I guess like it could even be a new. A new ERC at this point that takes into account the things that we talked about today and like fleshes out some of the details and talks about usage. Like does that sound like a useful thing to do? Or like otherwise, what's the next step for people?
01:01:19.115 - 01:01:33.095, Speaker A: I think that makes sense. We can continue the discussion in telegram. I don't know if there's any volunteers from 3770 that would like to take that on. But yeah, maybe we can Continue this conversation in the group.
01:01:36.125 - 01:01:42.985, Speaker C: Do you mind summarizing what you just said? Because I definitely lost you for like 30 seconds. I think someone asked it as well.
01:01:52.285 - 01:02:12.555, Speaker A: I think we may have lost you. Vitalik, are you still there? Yeah. Okay, just said in the chat, make a group to work on an updated ERC that implements the ideas. Are there strong feelings on a new ERC versus updating the existing erc?
01:02:17.375 - 01:02:35.775, Speaker E: I mean, we have many authors of the original here. It seems pretty different to me. I would. I can't speak for them obviously, but I would assume a superseding EIP or an extension EIP would make sense to people who only need the current functionality.
01:02:37.875 - 01:03:09.625, Speaker D: I mean, I think the motivation is the same and I think with anyways like ERC47.0 would be deprecated or like we would like from SAFE's perspective like if we would use the new format. So anyway, you will become redundant. I personally don't have any strong feelings or I don't know what it would if it was help having a new erc because it's something new people would likely to adopt or I don't care too much.
01:03:13.645 - 01:03:31.675, Speaker H: So maybe the next steps and we can take it here Ziggy saying we can write up what we just talked about with the questions in the doc, share it within the group and then, you know, start iterating on the doc itself and then I guess convert it into an ERC at some point when we happy with it.
01:03:32.935 - 01:04:04.975, Speaker B: Yeah, yeah, yeah, yeah. I mean, I probably just. It probably makes sense to start for the first step to even just be kind of get into erc. Right. Because it feels like, you know, we are at that stage where if the best way to try to like surface, you know, like any very like small and specific disagreements is to try to just like put the thing into the sort of like formal format that actually flushes out the details. Exactly.
01:04:11.155 - 01:04:16.375, Speaker A: Awesome. I'll summarize the notes and then we'll. Yeah, we'll get this going into a new erc.
01:04:18.075 - 01:04:18.523, Speaker B: Cool.
01:04:18.579 - 01:04:20.771, Speaker A: Thanks all. Talk to you.
01:04:20.803 - 01:04:21.935, Speaker B: Yeah. Thank you guys.
01:04:22.475 - 01:04:23.515, Speaker C: Thank you all.
01:04:23.675 - 01:04:24.043, Speaker H: Thanks.
01:04:24.099 - 01:04:26.295, Speaker E: Telegram for updates, I assume?
01:04:26.635 - 01:04:27.539, Speaker A: I think so. Yep.
01:04:27.587 - 01:04:28.443, Speaker B: Yep. Okay.
01:04:28.539 - 01:04:29.535, Speaker E: Awesome. Thanks.
01:04:29.955 - 01:04:31.643, Speaker B: Perfect. Thank you.
01:04:31.739 - 01:04:33.283, Speaker C: Thanks. See ya.
01:04:33.339 - 01:04:33.975, Speaker B: Bye.
