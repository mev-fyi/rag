00:00:16.330 - 00:00:24.154, Speaker A: So, can an Ethereum contract own bitcoins? Could it own your bitcoins?
00:00:24.282 - 00:00:24.960, Speaker B: No.
00:00:25.290 - 00:01:44.830, Speaker A: The direct answer is no. But it is possible that an Ethereum contract could have a lot of incentives, so that effectively it does own and control your bitcoins. Imagine a contract that has a massive amount of ether or assets that you wanted. This contract could be programmed to give you a large amount of these assets when it receives a proof that bitcoins from your address were sent to an address that the contract specified. The first secret to interacting with bitcoin in Ethereum is the use of payment proofs. BTC relay is a bridge that empowers dapps to accept bitcoin payments, process arbitrary bitcoin transactions, and empowers innovation across bitcoin and Ethereum, such as decentralized exchange and side chains. It has four primary advantages.
00:01:44.830 - 00:02:22.940, Speaker A: The first advantage is it is trustless with its inputs. It doesn't care who sends them, whether they are reputable or malicious. And the outputs produced by the relay follow the cryptographic rules behind bitcoin and Ethereum. And it's also fully open source. And this leads to the second advantage, that it is fully decentralized. There are no owners, no administrators, no backdoors. I can't change it once it's deployed there.
00:02:22.940 - 00:03:30.270, Speaker A: Effectively, it's owned by everyone, the community. The third advantage is the relay is autonomous. Unlike other contracts, autonomy is actually a requirement for the relay, because it must be alive with the bitcoin blockchain, where new blocks are generated every ten minutes on average. The fourth advantage is that the relay is modular. It is a building block that is easy to integrate with, and an extensible foundation for innovations such as decentralized exchange and side chains. So the first secret was using payment proofs. But what would these payment proofs be verified against? So the second secret is the BTC relay builds a mini version of the blockchain, a smaller version of the bitcoin blockchain in an Ethereum contract.
00:03:30.270 - 00:04:24.690, Speaker A: And I'll call this an SPV chain. And this SPV chain is what the payment proofs are verified against. So again, not much time for this talk, so I'm going to give a whirlwind technical introduction to BTC relay. It starts with bitcoin and spv simplified payment verification. So in bitcoin, a block has both a header, which is 80 bytes, and then all the transactions in that block. This header has quite a few remarkable properties that lead to the bitcoin blockchain. For example, one of the fields in the header has the hash of the previous block.
00:04:24.690 - 00:05:12.190, Speaker A: Another property is that the header has a root of the merkel tree formed by all the transactions in that block. So there, now here's an example of, we've heard a lot about Merkel and Merkel trees, so I'm going to give a quick example of how that works. So we have all the transactions here at the bottom where these are all the transactions in this block. So there's only four for this example. So we take, for all of these transactions, we hash them. Bitcoin uses a hash that will produce a 32 byte value. So that's how we get the level above.
00:05:12.190 - 00:05:54.014, Speaker A: Now for each pair of transaction hashes, we concatenate them. So we temporarily get a 64 byte value, and then we hash that again to end up again with another 32 byte value. So at this level we always take pairs of them pairwise, concatenate them, and then hash them. And we keep repeating that process until there's only one hash left. And that is basically the root of your Merkel tree. Now with this route you can verify whether a transaction exists in that block or not. That is all that you need.
00:05:54.014 - 00:06:40.990, Speaker A: And BTC relay uses just headers to build an spv chain. For example, suppose you paid Alice one bitcoin in TX three. Now you could provide the relay with all the transactions in the block. All of these. The relay would run the algorithm that I just explained. It would compute a Merkel route, and then with that route that it computed, it would just check the actual header. And does that computed route match what's in the header? If it does match, then the relay will have verified that yes, TX three is in this block.
00:06:40.990 - 00:07:46.210, Speaker A: Now it's possible to have shorter proof instead of having to send all the transactions because this could be really long down here. And for an example for TX three, that Merkel proof would include hash two and just hash zero one. So you would just need these two instead of all the transactions in the block. Now I'll have to let you ruminate on that, but you can see that it's logarithmically shorter than the naive approach. So here are the APIs that the VTC relay contract, the two main verification APIs it exposes verify TX and relay TX. So all this data here is the transaction and Merkel proof. And basically this asks the relay.
00:07:46.210 - 00:08:31.726, Speaker A: There's this transaction in this block, it's the NtH transaction in this block. Is that valid? Is that true? BTC relay will return true based on three conditions. The first is, is this transaction in that block is that block on the bitcoin main chain. And the third is, does this block have enough? Six confirmations, at least six confirmations. The relay TX API has the same parameters with two additional ones. The first additional one is the actual transaction because recall that this is only the hash of the transaction. So you've lost a lot of data here.
00:08:31.726 - 00:09:27.410, Speaker A: But this is all the inputs, outputs of the bitcoin transaction. It's arbitrary. And then the additional parameter is your contract address where you want to be able to process these transactions. There are two main parties in BTC relay. The relayers who submit the block headers which are used to build SPV chain, and verifiers who verify bitcoin payments and transactions. So every ten minutes there's a new bitcoin block and BTC relay needs that header. So this leads to the third secret which is having incentives for the community to be relayers, so that the contract itself, the BTC relay contract, is autonomous.
00:09:27.410 - 00:10:12.694, Speaker A: Now, there are different incentive plans and ideas that were considered, but given limited time, I will discuss the current one. In this current one, when a relayer submits a header, they get to see a fee for that header. Now the verifier who has a payment or transaction in that block needs to pay that fee to the fee recipient. The initial fee recipient is the relayer. So for example, let's call him Romeo. Now, to prevent excessive fees, there could be another person or party. It's called tango.
00:10:12.694 - 00:11:16.914, Speaker A: Tango decides to pay an amount c to relayer Romeo. Now what happens is now Tango gets to become the fee recipient. So any future verifications there, Tango will receive the fees. But to also, in addition to paying c, Tango would have had to also set a fee lower than what Romeo had set. And c is roughly double the amount that it initially cost Romeo to submit the header to be a relayer and earn some ether. There's this repository here where right now it's currently a command line tool that fetches block headers using a bitcoin block explorer like blockchain info, compares it with what the relay has and submits, the ones the relay doesn't have. And it's on a public testnet.
00:11:16.914 - 00:12:05.330, Speaker A: So you don't need to spend real ether and you don't have to worry about what's this unlocked account that you have to provide. Here, there's more information and I'm going to give an example of extensibility. So a basic side chain flow is, let's consider that your bitcoin blockchain is here and your side chain is here. Now time is going vertically downwards. So at the start in bitcoin and the bitcoin blockchain, you lock some BTC. Let's call that a lock BTC transaction. Now, when a proof of that is sent to a side chain, then the sidechain can create some sidechain tokens.
00:12:05.330 - 00:13:11.350, Speaker A: Then time goes by and let's say we want to get the bitcoins back. Now those sidechain tokens are destroyed. And then when those sidechain tokens are destroyed, a proof of it is sent back and verified in bitcoin blockchain over here. And that's how the bitcoin blockchain can then unlock the original BTC that was locked. So in this short example, you can see that if you're a sidechain contract, the first part where there's a lock BTC transaction, you can just pass that to BTC relay to get the answer of if that locked BTC transaction has been confirmed. Now, an example for integrating it into a DAP. This example is basically adding just another contract to whatever DAP you have, and two important points, the ones in blue.
00:13:11.350 - 00:14:08.342, Speaker A: The first point is you need to have a process transaction function with this exact signature. If the signature doesn't match, then your contract won't get the data that BTC relay is sending it. The second important point is you have to check that message sender is BTC relay. Otherwise anyone can send your contract fake transactions. And as this sample does, it's recommended to set the address of BTC relay in a constructor. There's a minor thing about deliberately omitting braces there, just so it fits on the slides. There are other things that you also will want to do afterwards, right? So for example, you probably want to keep track of the transaction hashes that you've seen.
00:14:08.342 - 00:14:50.474, Speaker A: Otherwise people could just replay them and keep getting your sidechain tokens. So I have a couple more demos, but I'm going to do it after the references because requires me going off the slides. But for the conclusion. The conclusion is. Okay, so there's three secrets. The first one is BTC relay builds an spv chain. It verifies transactions using Merkel proofs, and it has incentives for the community to relay the blockheaders so that BTC relay can build the SPv chain.
00:14:50.474 - 00:15:37.358, Speaker A: It is trustless, decentralized, autonomous and modular. I want to thank these people, supporters of BTC relay, for their priceless time, thought and work. And here are references. And the site is btcrelay.org which I'll show right now. Okay, so this is where BTC relay is. That's the address.
00:15:37.358 - 00:16:09.382, Speaker A: It's on a public ethereum testnet that anyone can connect to. You get the information that link. There's the ABI there. There was some issue in the testnet right now where someone mined on it. So it's a little slower but you can compare it with what has usually it's up to date with the blockchain explorers quickly. This is the site that has more. So btcreleay.org
00:16:09.382 - 00:16:51.714, Speaker A: that has more information there. And the other quick example that I wanted to show was. So here we do. I've already run this because I'm not connected to the wifi, but this is the first transaction in block 38, 1100 when we do a lookup it gets all the transactions in that block and then it's going to pass them to a module that I put an NPM to generate that Merkel proof. So the module is pretty easy to use. You pass in all your transactions the index of which one you want to proof from. And if we go back to the example, that's an example of it.
00:16:51.714 - 00:17:47.846, Speaker A: But of know you don't need to show your users any of this stuff because once you have the data then you can just pass it along to the contract BTc relay and when you click call it's just going to return one or zero. This is just a sample to show it and I guess just more some source since we have a bit couple of minutes here. So. Okay, let's see. So this is where the call is done, the verify TX call. Anyway you can look at this as well online. But the module is here, the bitcoin proof module.
00:17:47.846 - 00:18:06.542, Speaker A: And we call it somewhere the NPM code that I showed. I guess maybe time for one question or two if anyone has any questions. Yeah.
00:18:06.676 - 00:18:11.120, Speaker B: Can this be used to connect with meta protocols as well?
00:18:11.570 - 00:18:27.110, Speaker A: Metacoins like Mastercoin counterparty. So it could, but you would have to write something similar so you can't leverage it directly unless those use bitcoin directly.
00:18:28.410 - 00:18:31.560, Speaker B: Unfortunately the answer is no. Basically because.
00:18:32.010 - 00:18:40.940, Speaker A: Yeah, for script is expensive because you actually have miners that are like back to oracle tree. Is there another question?
00:18:44.670 - 00:18:59.280, Speaker B: Bitcoin SDV works because the miners are actually putting their hash power behind transactions. But run absolutely every transaction.
00:19:00.500 - 00:19:07.090, Speaker A: Okay, one more. Yeah. Okay, two. Okay. Do you know.
00:19:08.980 - 00:19:09.868, Speaker B: The headers?
00:19:09.964 - 00:19:10.608, Speaker A: Yes.
00:19:10.774 - 00:19:13.100, Speaker B: Are you storing that on the Ethereum blockchain?
00:19:13.180 - 00:19:13.810, Speaker A: Yes.
00:19:14.500 - 00:19:16.116, Speaker B: Like 20 something megabytes.
00:19:16.188 - 00:19:26.196, Speaker A: No. Yeah. Well if you start from Satoshi's Genesis yeah, then it would be that big. But yeah, that's something that we can configure.
00:19:26.388 - 00:19:29.032, Speaker B: You'll just pay the fees to put that in before you start.
00:19:29.086 - 00:19:45.280, Speaker A: Well, no, that's the thing. That's why we have the incentives. So we're probably just going to start at a future block that's not Satoshi's genesis and then let it the community in. Yes. Alex.
00:19:48.420 - 00:19:54.950, Speaker B: Do you have any plans token which has one to one?
00:19:58.450 - 00:20:39.334, Speaker A: Yeah, there can be plans. Are there plans to build a BTC token on Ethereum that maps one to one with actual bitcoins? So yeah, that could be definitely a future thing that's possible to build. The next main thing that I'm building is just a decentralized swap of ether and bitcoins. And then after that with the side chains, then these ideas can be done. Any others? Okay, thanks. Thank you, Joseph. Thank you, Joseph.
00:20:39.334 - 00:20:39.510, Speaker A: Chow.
