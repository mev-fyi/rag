00:00:00.410 - 00:00:28.678, Speaker A: You okay? Welcome everyone. 11th forward. Four. Four call. I guess two main things today. Actually three main things I think we should chat about. So first is the spec, and specifically with the interop workshop coming up, trying to think about what are all the things we want to resolve before we freeze the spec.
00:00:28.678 - 00:01:14.146, Speaker A: It would be good if in the next week or so by next call we could have the spec in a spot where it's pretty frozen and teams have something clear to work off. So we get to interrupt and everyone's sort of on the same page. Then second thing we can talk about Devnet three and if there's any updates in terms of client implementation and bug fixes there. And then lastly, testing. So we had a bunch of work in progress prs last week and just get some updates on that front. If there's anything else people want to chat about, please either post it in the chat here, add it to the agenda. Yeah, I guess to get started just on the spec side, like I just said.
00:01:14.146 - 00:01:46.080, Speaker A: So we have interrupt in about two weeks. If we had a proper week before where the spec is frozen, that would be ideal. I think we're in a spot where most things are done, but there's still a couple open issues. So I'll go over first the things we still don't have quite closed. Roberto, your issue actually got closed, but because the IP editor wanted to move the discussion to eth magicians. So I just wanted to check in with you about the status there.
00:01:46.850 - 00:01:57.700, Speaker B: No, it's closed. I got the PR submitted yesterday, so it's all updated. We're going to use serialized SSE for both hashes and it's in the spec.
00:01:58.150 - 00:02:47.410, Speaker A: Awesome. Okay. Anything else on that from anyone? Okay, another one I think somebody might have literally just an hour ago. Okay, so this other one we had open 31 70 also just got closed an hour ago. And yeah, it seems like everything is fixed. There anything else on that one you're talking about? Is data available that's in the release as well, so. Okay, sorry, I just messed up something doing a copy and paste.
00:02:47.410 - 00:03:04.520, Speaker A: Okay. And then we had Shaoi, you just opened something about. Oh yeah. Okay, the thing you just posted about in the chat, did you want to quickly cover that?
00:03:05.610 - 00:04:04.520, Speaker C: Yes. So today we have pR to fix the EIp void for folk Nd file, and this is something that we miss to copy past the previous historical summaries from Capella when we are transitioned to YAp 44. So there's issues in the folk transition test currently in the release we put last Friday. So we will have either half fixed or regular release this week to fix it. So just if client things didn't pass it, it's probably because of this issue.
00:04:05.930 - 00:04:13.640, Speaker D: Could you point which exactly. Tests should not pass because we also found that some doesn't pass.
00:04:14.750 - 00:04:15.866, Speaker C: Yeah, sure.
00:04:16.048 - 00:04:17.180, Speaker D: Okay, thanks.
00:04:24.030 - 00:05:22.650, Speaker A: Cool. Anything else on that? Okay, then. I think the last actual open issue was the sidecar without blobs for range requests, which isn't really like a consensus critical change. But I saw there was some conversation on this last week. Not sure we quite got to a solution. Any updates there? I was the main one pushing back on a slightly different behavior. It seems like Mophie agreed generally, although commented that asymmetry is bound regardless if we make this symmetric.
00:05:22.650 - 00:05:42.738, Speaker A: But I think that he and I are generally agreeing. And Terrence, he's the other one with a strong opinion here. I'm not sure. I don't have a strong opinion. I tend to agree with Danny on this, and unfortunately, this is just a behavior. Definitely three right now since it wasn't clarified. So I think it will be good to clarify it.
00:05:42.738 - 00:06:14.510, Speaker A: And I do think clients needs more work on just rate limiting in general, just because I don't think rate limiting is part of the spec. So everyone kind of does it differently. And right now we're treating zero blob. They are actually like a full blob. So client gets penalized by requesting a lot of those. So yeah, we need more clarification on that as well. Got you.
00:06:14.510 - 00:06:22.032, Speaker A: Do you want to revise this pr.
00:06:22.166 - 00:06:22.850, Speaker D: To.
00:06:27.210 - 00:06:57.114, Speaker A: The alternative behavior? And also put a note about clients should not consider empty sidecars as part of their rate limit strategy or something like that. Yeah, I can do that. Sorry, I forgot this is my pr, so, yeah, I would do that. All good. Okay, cool. And then we can review this. And honestly, we can probably merge this tomorrow and get it out with the fixed release that we need to get out on the fort md stuff.
00:06:57.114 - 00:07:47.820, Speaker A: Awesome. Sounds good to me. Nice. So I think those were the only open four. Four issues at least I was aware of. Is there anything else that people are sort of tracking or have opened that basically would stop us from freezing the spec then? Yeah, I think if we can get this merged in, like this last one merged in to fix on the test, then we'll have a solid spec to work off for interop and the next Devnet. Yeah, that's pretty good.
00:07:47.820 - 00:08:39.334, Speaker A: Yeah, lots of these calls and async stuff to get here, but yeah, no, we're in a good spot for the spec. Sweet. Devnet three. Do any client teams want to share updates on where they're at and if they've made any kind of significant progress in the last week. I think for prism side we kind of move forward with Daphne four already, so we have been passing the latest bad test. Well, there's also a bug which will fix the bug as well, just like Shawi mentioned. So I think last call we clarified the scope for Devnet four, which is we'll rebase everything on top of capella.
00:08:39.334 - 00:09:13.826, Speaker A: And that has been reflected on the spat test. So yeah, I think we are very excited and ready to get definite four started. I don't think there's much value in maintaining definite three just because that's not going to further the interrupt week. That's not what we're targeting for. So I think my recommendation is move to death net four as soon as possible. And I do like to see more clients bootstrap net four just for definite three. It's unfortunately because of timing during holidays and it was only prison submitting blogs.
00:09:13.826 - 00:10:01.410, Speaker A: And then I think one of the feedback from Devnet three is that to have multiple clients submitting blogs and the blog. So yeah, that's the event of our end. Okay, we can definitely do that. So basically Danny and I are working on the milestones for interop and I think we can make Devnet four a part of that, which would just be basically using this upcoming spec release that we'll have in a couple of days and trying to get all the clients on that, acting as both block producers and just regular nodes. Does that make sense to everyone? Yes. Cool.
00:10:01.720 - 00:10:08.660, Speaker E: Just to clarify for Devnet four, we'll be having SSD routes for the transactions.
00:10:08.740 - 00:10:32.590, Speaker A: Right. That's a good one. I not sure. So do you know when on the EO side that will be patched? I think for rebuttal it's pretty easy. Just cherry pick it. Right. But I guess how do we align the timeline? Doesn't it take a week, like a few weeks for that?
00:10:36.610 - 00:10:45.840, Speaker E: On Ethereum Js side we are ready with SSD roots of the mean. It should be easy patch, right?
00:10:47.110 - 00:10:49.780, Speaker A: Yeah. In that case it sounds good to me too. Yeah.
00:10:51.350 - 00:11:03.830, Speaker F: Proto with the SSC root for transactions, do you also mean to change the route of the receipts and the withdrawns?
00:11:05.050 - 00:11:15.766, Speaker E: No, this is only for EIP 44 transactions. So basically signing the transaction. So basically getting the transaction hash.
00:11:15.798 - 00:11:21.130, Speaker F: Oh, you mean the transaction hashing. Yeah, that's different. Sorry for the confusion.
00:11:23.390 - 00:11:28.830, Speaker E: Right. So it has nothing to do with the other routes conversation?
00:11:34.920 - 00:11:49.530, Speaker A: The root standardization might have an impact on is going to have an impact on 4844 because of that functionality, but we'll cross that road when we get there. And what do the EL prototypes do right now?
00:11:51.100 - 00:11:57.500, Speaker B: Geth has been updated to use serialize instead of hash tree per the spec updates that I checked in yesterday.
00:11:58.560 - 00:12:02.652, Speaker A: Okay, never mind. Can do the same.
00:12:02.706 - 00:12:03.310, Speaker F: But.
00:12:05.140 - 00:12:18.790, Speaker A: We would wait for at least some scope definition for the network if hash update will be included. It is not a problem for us.
00:12:20.600 - 00:12:36.250, Speaker B: Hopefully. It's like a two line change for most implementations. It's pretty simple. Yeah, Ethereum JS has already updated to use the SSE serialized too. We did that a couple of days ago. It was a one line change for us.
00:12:37.500 - 00:13:00.270, Speaker A: Does any client have an issue if we go that route? Like can we just make the decision to use that for Devnet four? Just to confirm? I understand what we're saying. Is this the Roberto PR number 6245 that we're talking about, or is it something else?
00:13:04.880 - 00:13:08.748, Speaker B: Not sure I remember the PR number, but what's the title of it?
00:13:08.914 - 00:13:23.600, Speaker A: Fixed blob transaction hash to use SSD serialized? Yeah. Wait, yeah, the one that says clarify and rationalize broad transaction hash computations. It was the one we just talked about earlier.
00:13:25.540 - 00:13:29.780, Speaker B: That was the issue name that got closed. And there's a couple of prs in there that are now submitted.
00:13:30.200 - 00:14:22.736, Speaker A: Great. Okay, so let's go forward with that for Devnet four, especially because it's already, I believe, merged in the EIP. So then for Devnet four, we'll basically use the eip of master. So the latest commit and then the upcoming spec release on the CL side, which will have the two pending prs that we just discussed earlier. Sweet. Anyone want to give updates though on the implementation? So we sort of skipped ahead to Devnet four. Agreed.
00:14:22.736 - 00:15:06.444, Speaker A: We're going to move to that and have that be the two day effects. But just generally in terms of implementation, any client teams have updates they want to share. I can share for Lighthouse. So we were able to sync Devnet three and now we're working on doing the Capella rebase and trying to pass the spec test. Yeah, in Devnet four, we're hoping that we'll be able to produce blobs and also we'd like to be online during the transition. So similar to things Terrence was. Other than that, we're working on improving how we handle blobs in our database and how we handle the trusted setup.
00:15:06.444 - 00:15:18.470, Speaker A: So it's more internal improvements as well as getting up to speed with Devnet V four. But yeah, I think we're in good shape. Awesome.
00:15:20.600 - 00:15:38.990, Speaker E: For Loadstar. We already rebased on Capilla and we are ready for Devnet four and we pass all the spec tests except the one that I escalated. But apart from that we are good.
00:15:40.960 - 00:16:15.560, Speaker G: Great update from taco here. You're already on Capella and what we are working currently is mostly block production and sync process that is just started. So yeah, it needs still some time to actually join a Devnet test, but yeah, it's progressing.
00:16:21.220 - 00:16:40.680, Speaker B: I've been continuing to work on Aragon. I think it's mostly there. I haven't run any interop tests yet, but the bulk of the implementation is complete. I just finished up a couple of prs. Still need to get reviewed and submitted for the external transaction pool, but I'm hoping by the time the workshop comes around I'll have it interrupt.
00:16:45.020 - 00:17:15.972, Speaker A: Nimbus. Maybe a quick update on Nimbus. So Nimbus has made a lot of progress through the holidays. Actually, let me paste as a tracking issue for anyone who cares. Basically we're at the point where we have blob storage peer to peer the rpcs implemented. I'm working right now on finishing off sync. Most of that is done, and then there's the engine API that's implemented but not wired in.
00:17:15.972 - 00:17:33.450, Speaker A: So I'm hoping that that's all going to be complete this week and then that would leave us, or leave me next week to figure out how to get onto Devnet three and make sure that this is in a working shape before interrupt. Awesome.
00:17:36.140 - 00:18:29.900, Speaker B: For ethereum js we were able to sync devnet three over the holidays paired with Lodestar. I haven't gone back to trying to pair ethereum js with either prism or White House. I may try and pick that up kind of prepping for the workshop in a couple of weeks. But we are able, like I said, able to sync Devnet three with Lodestar, and I haven't integrated us into the interop repo just because I'm not super skilled with Docker and all that jazz. But I've written comparable tests to all of the interop tests within our own test suite, and we can pass all those spec tests locally. I basically just adapted them into our typescript testing framework just to run them on a local pair. So I would say that we're equivalent kind of devnet three complete as it were in terms of interop.
00:18:31.120 - 00:19:17.040, Speaker A: Nice. Never mind what seems to be complete Devnet three implementation. We tested with get and lost our and reason and testing with lighthouse going quite okay we need a little fort to align with before just waiting this group to be described and we will check this week. Great. Thanks for the update. I think Besu and Geth might be the two only ones.
00:19:24.870 - 00:19:38.010, Speaker B: I mean, I've been continuing to maintain mean. Terence reported an issue yesterday that I need to look into. I'm not sure there's anything else that needs to be done there. I've been focusing mostly on Aragon lately.
00:19:39.070 - 00:19:40.060, Speaker A: Got it.
00:19:42.190 - 00:19:49.550, Speaker B: Is there anything else that needs to be added to guest that anyone is aware of? I think it's in good shape.
00:19:51.490 - 00:20:01.120, Speaker A: Awesome question on guests. Do we have an individual on the guest team that's going to take this over the line that we can change?
00:20:02.230 - 00:20:05.060, Speaker B: My understanding is it's Peter, but I haven't heard from him.
00:20:07.910 - 00:20:45.550, Speaker A: I think. I think a lot of the get folks are quite in the weeds with the withdrawal testing right now. I know Marius and Peter had both spent some time on this in the. Yeah, I suspect that we want to try and bring them in before Interop or should we just basically wait till Interop and then kind of have that be a handoff? Think. I think interop probably makes sense. I doubt in the next like if they end up being more available then sure. But my feeling is, yeah, they'll probably be focused on that for next week or so.
00:20:45.700 - 00:20:58.820, Speaker B: Yeah. I think I have the same struggle with the Aragon team. Giulio has been asking him some questions but otherwise I could use more involvement from someone from the Aragon team if anyone's on the call.
00:20:59.750 - 00:21:03.410, Speaker A: Awesome. Yeah. Proto.
00:21:05.050 - 00:21:21.354, Speaker F: I was under impression that Peter was working on four transaction pool. I'm not sure if the prototype is still using like the old transaction pool or if that's work from Peter is integrated. That might be worth looking into.
00:21:21.552 - 00:21:25.850, Speaker B: No, it wasn't a word that. I'll have to take a look at it. We're still using the old transaction pool.
00:21:27.470 - 00:21:31.626, Speaker F: Should be fine for now, but that's something we want to sort out during interope.
00:21:31.738 - 00:21:35.600, Speaker B: And does he have a pr in progress for this? Is that something I could look at?
00:21:37.010 - 00:21:40.718, Speaker F: I'm not aware of any pr, but we should ask him.
00:21:40.884 - 00:21:42.000, Speaker B: Okay, thanks.
00:21:46.510 - 00:22:01.860, Speaker A: Justin Besu is in a similar state as guest. We're hoping to accelerate that this week though and potentially participate in Devnet four. I think at the moment I will be point of contact for that.
00:22:03.110 - 00:22:43.180, Speaker B: Oh, I did have one question for Devnet four that I know is not implemented in Geth right now. And that's the don't announce blob transactions. I do have a pr which I've been holding off on because it wasn't supposed to be part of Devnet three. I assume that we'll do that for Devnet four. Should I get that submitted? This is a text pool issue that's proto reminded me of this, where for blob transactions we're not supposed to broadcast them, only announced. I'm not sure if any other client devs have implemented that yet. It's an el thing.
00:22:43.180 - 00:23:08.434, Speaker B: We have an Ethereum js and I've run tests locally. I haven't tested it with Geth per se, but I have tested it between multiple Ethereum Js clients and validate that we don't broadcast the transactions, just the hashes. So that is implemented for Ethereum Js. Cool. So I would propose we try to do that for Devnet four. I'll get it in get. It's not in get yet.
00:23:08.434 - 00:23:11.140, Speaker B: It's just unsubmitted pr. But I can get it in.
00:23:20.650 - 00:23:29.580, Speaker A: Yeah, I would. Plus one trying or doing that for Devnet four. It feels like a new behavior that's worth us like running through the line on sooner rather than later.
00:23:31.250 - 00:23:35.920, Speaker B: Yeah, it should be pretty straightforward for most implementations as well.
00:23:37.010 - 00:24:43.470, Speaker A: And I think it makes sense to think of Devnet four as potentially the last, or like a Devnet on which we have finalish implementations that we could then either if we want to launch a new public testnet like we did with Kinsugi, or eventually move to Testnet, there might be an extra one there. But I think we should bring in all the functionality we expect to have on Mainnet so that if it turns out to be like a long standing thing before public test notes, then it's working as expected. Any other updates or discussion items? Just on client implementations. Okay, next up I want to chat about testing. Oh, sorry. Please Jesse. I just want to make sure my understanding here, it looks like other than maybe Besu, all teams are currently on track to participate in Devnet for fully, basically with a full implementation.
00:24:43.470 - 00:25:01.340, Speaker A: Does that sound right to folks? I'm just looking at my notes. I want to make sure I understand. That's what I got as well. And modular, obviously Aragon and Geth like Roberto is kind of working on those. But yeah.
00:25:03.070 - 00:25:07.622, Speaker G: Do you mean El clients or all clients?
00:25:07.686 - 00:25:08.490, Speaker A: All clients.
00:25:10.910 - 00:25:22.300, Speaker G: Yeah. Not 100% sure on our side. Depends by how it plays out, how we progress on sync implementation this week.
00:25:22.830 - 00:25:23.266, Speaker A: So.
00:25:23.328 - 00:25:30.446, Speaker G: So yeah, maybe by the end of this week we could have a better ideas.
00:25:30.638 - 00:26:03.630, Speaker A: And I think our goal with Interop is by the end of that week. So basically January what is it, 27th, give or take. Having all the client teams on a Devnet would be kind of the minimum. I would be happy if we get everyone running there. That's great. And then I think the next step beyond that is, like, we can actually run some stress tests on that deathnet, spam it, and everybody makes it through the rough environment on the Devnet. That'd be ideal.
00:26:03.630 - 00:26:09.438, Speaker A: I think we're tracking pretty well for that.
00:26:09.604 - 00:26:29.160, Speaker G: Yeah, it's okay for that. It seems like that we should have the ability to join at the moment. It's just a matter of we have a clear path for arriving there. Just confirmation that arrives this week and next week.
00:26:29.610 - 00:27:03.360, Speaker A: Got it. Bezu, is that, like, a similar situation for you? Not. I'm not feeling super confident about right now at the moment. And I'll have a much more detailed and confidence inspiring update in a week. But tagging us as the one person not ready to participate in Devnet four is fair. Sounds good. And, yeah, next week, we'll have kind of our last call before interrupt, so we'll get an updated status there.
00:27:03.360 - 00:27:32.826, Speaker A: Also, I'm sorry for being the hype man repeatedly, but that's fucking awesome. Let's go. It's so cool that we're on track. I mean, best technical. You guys are doing your best, and I'm confident that we'll get you there, but that almost all the clients are fully ready to go for interop. Has this ever happened before for a release? That's one out. I don't know.
00:27:32.826 - 00:27:54.080, Speaker A: I'm super fired up about it. Yeah, we're in a pretty good spot. It's never happened for sure on the next fork. Right. It's still worth remembering. There is still withdrawal that has to happen before all of this, so being sort of ready for the next thing, I think this is probably a first. Yeah.
00:27:54.080 - 00:28:41.520, Speaker A: Um. Yeah, before we jump into testing, so we mentioned the interop repo a couple of times, and, Roberto, you said in the chat it's a bit behind and people should kind of hold off for now. So I guess I'm curious to understand there because I know we have some good testing there. What should be the plan with that? Should we still kind of try to get every client team to open a pr against that? Does it provide a good testing suite for that? Does it make more sense to potentially move to something else, whether that's Hive or spec test?
00:28:43.010 - 00:29:07.650, Speaker B: Yeah, I'm not a testing expert. All I know, and I hadn't been playing with the interop repo lately because I've been having my heads down in the Aragon system, but I tried to use it yesterday and couldn't get anywhere. And I have another person looking into it as well, and he's kind of stuck as well. So it seems to have suffered a little bit of rot, I guess. So. I don't have a plan yet. I don't know if someone else does, but all I know is it doesn't seem to be in very good shape.
00:29:07.650 - 00:29:23.840, Speaker B: But I think it's a good idea that we do have that repo and that I think the tests in it are good. They're solved, they're pretty basic. But if we can't pass those tests, then we have bigger problems. There might be more than we can do, but we should at least get that back into shape, I think. And I intend to spend a little bit of time on that this week.
00:29:24.930 - 00:29:35.454, Speaker A: Got it. And I wonder, is it maybe worth looking at the test suites there and exporting them to some other tool like Hive, or does it make sense?
00:29:35.572 - 00:29:39.166, Speaker B: I will defer to a testing expert on that. I've never used Hive.
00:29:39.358 - 00:29:45.410, Speaker A: Yeah, I don't know if there's anyone on the call who's used both the interoperability bow and Hive.
00:29:47.770 - 00:30:32.610, Speaker F: I think I can comment, but Mophie is out this week, I think. So he would be like the best person to ask. Regarding Hive. Hive currently is in a spot where just about has support for Capella. I'm working on the changes in the libraries to also support the latest fork for forest pack combined. You could run a testnet in Hive just like you do for capella and previous forks. And then it's a matter of translating these ids from the interope repo to hive to, say, spam some transactions, or to do these type of things.
00:30:32.610 - 00:31:15.140, Speaker F: And given that a lot of it is already written in go, that may be easy to port over. Now, where it's more difficult is that for this type of early stage testing, I would recommend testing approaches that are less containerized. You want things that are easily connected to a debugger or something like that, whereas hive is not really built around that. So it still recommends polishing like a simple minimal repository where you can run something, just a few clients locally to test the changes. And then around interope, I hope you have like a live testnet to test against.
00:31:19.510 - 00:31:43.580, Speaker A: Got it. Okay, so let's okay, so let's chat offline with Mophie once he's back around and see what he thinks about that as. Okay, it makes sense to try and maintain the interrupt repo, perhaps a bit longer and maybe figure out how we bring it into a good spot for interop so that we have that and then the devnet that people can then join. Does that make sense?
00:31:45.870 - 00:31:46.620, Speaker F: Exactly.
00:31:49.070 - 00:32:00.874, Speaker A: Okay, you sort of started covering hive. I know we discussed this last time as well, but beyond what you just said, anything else you wanted to share in terms of updates?
00:32:00.922 - 00:32:43.870, Speaker F: There, there's that one pr about metrics which needs review. It's more often nice to have for not really blocking Ford for four work the main blocker for four for four are the changes to bootstrap into like a four for four testnet. Now technically if we change the configuration, we could just start at a previous fork and then have a longer running test that transitions into the Ford for four mode. I'm not sure if others tried starting test that starting with a Ford for four beaconstein or have they done something like this where you skip through the transition?
00:32:47.840 - 00:33:15.920, Speaker A: We have not tried that, but I think my recommendation is whatever withdrawal capella is doing, we should follow suit because that's working already. And I do think they have tried from Terry. They have tried bootstrapping genesis from ballad tricks. So I think we can at least do that. Or we can also try bootstrapping from four. A four four. I don't think that's that big of a difference, but it will be nice to test the upgrade path.
00:33:15.920 - 00:33:19.270, Speaker A: And that is capella to four. A four four.
00:33:23.980 - 00:33:42.800, Speaker F: Agreed. I'm mostly thinking about the beacon state part with four to four to have like a faster feedback cycle. Sometimes you just want to restart testnets really frequently and then doing the transition all over again might take some time. But otherwise, yes, we should cover the transition foremost.
00:33:45.380 - 00:34:41.320, Speaker A: Yeah, we can definitely support bootstrapping from 44 four. I'm speaking for prism and I do think that's nice for end to end or high test, we can reduce the test cycles. Okay, so Mario has some open pr also against hive. I don't think he's on the call. Anything else people want to bring up with regards to testing? Okay. And then I know we discussed the pre compiled benchmarking last time. It seemed like we were sort of converging on 55 or 60k gas price for that.
00:34:41.320 - 00:35:47.622, Speaker A: Does anyone have any updates from that end? Okay. And I guess we can keep things as is. I would not change the gas price for Devnet four, but what we can do is once we do have Devnet four, we'll have implementations across all the clients. We can do kind of one more round of benchmarking and make sure. We're still in roughly the right spot and potentially change the gas price there, so I don't think we should block anything for Devnet for on that. And then with regards to the big block testing, Giorgio said in the chat this morning that he'll get back on it this week. I don't know that there's anyone else on the call who'd want to give a quick update on okay, okay.
00:35:47.622 - 00:36:23.790, Speaker A: And then I guess maybe a last thing before we wrap up. Carl, I know the KCG ceremony is supposed to go live Friday. Any updates you want to share here about that? Yeah, sure. KCG ceremony should be going live on Friday. That's all very exciting. I encourage everyone here to please participate. It's also very easy to write your own implementation, so if you'd like to do that, you also please go ahead and if you feel like testing it out, you can have a look at ceremony ethereum.org.
00:36:23.790 - 00:37:00.510, Speaker A: It's a test version that's there now. Awesome. Yeah. Anything else anybody want to chat about before we wrap up? One other thing I should add to that is we also have grants open for people who would like to write their own implementation or do fun crazy entropy generation things. There haven't been enough. I want to throw things in a volcano or I want to use some crazy source of entropy applications yet. So I'll drop a link in the chat if anyone's got any fun ideas.
00:37:00.510 - 00:37:46.026, Speaker A: Sounds good. Okay. Anything else before we. Oh please. Yeah, one other totally unrelated thing is, I guess, related someone to KCG stuff. Do we need to be doing anything on the KCG implementation in terms of kicking off audits or further hardening those libraries? I feel like that's something that could be a long pole, so just curious how we're thinking about that. So we do have an audit scheduled for CKGZ and GokZG with the Sigma prime team who reviewed some of the ceremony stuff and have some BLS expertise.
00:37:46.026 - 00:38:12.644, Speaker A: And that is scheduled for March, I believe, so people are working on kind of doing a lot of cleanups on those repos, additional testing, and some internal auditing. So some of our security folks at the erac are spending some time looking at those. So that's the path for those libraries at least. Awesome. Exactly what I wanted to hear. You guys were already on it. Love to hear it.
00:38:12.644 - 00:38:13.510, Speaker A: Thank you.
00:38:13.880 - 00:38:24.570, Speaker B: There was some concern around GokZG performance and sort of like the allocations. Is that something someone is going to work on, or are we good with the way it is?
00:38:27.180 - 00:38:55.970, Speaker A: I'm not caught up on that's. So I think my understanding is that it's just switching the back end. Like if we use the gnark backend instead of whatever it's using now, then it's going to be quite competitive or even slightly better than BLST on performance. So I think that was the.
00:38:58.280 - 00:38:59.430, Speaker B: All right, thanks.
00:39:03.240 - 00:39:05.190, Speaker A: Solius. You have your hand up.
00:39:05.720 - 00:39:30.940, Speaker D: Yeah. So for our rust KCG project, we are proceeding with parallelizations, and we have a way to export the CPI in exactly the same way as CKZG. So it's possible to compile a standalone binary that has all the parallelization.
00:39:33.300 - 00:39:33.616, Speaker A: All.
00:39:33.638 - 00:40:40.500, Speaker D: The things that needs to parallelize like array and other libraries together. So essentially it's possible to just replace the CKZG binary with this rust KCG binary and have a parallelized version that also use BST ECC backend. So I was wondering, would it be suitable for benchmarks? Because I see that there are people that benchmarking pre compiles to determinate gas prices and so on. And the paralyzed version works, at least in some places, works much faster. So would it be usable? Because the good thing, as I said, it's very easy to replace this binary with exactly implementation if you are already using the bindings that are in CKCG wrapper.
00:40:45.560 - 00:40:57.480, Speaker A: So for gas pricing, only one thing only the proof verification is relevant. And so I don't think parallelization helps much there. Parallelization.
00:40:59.580 - 00:41:02.730, Speaker D: For proof verification, actually, yeah.
00:41:03.280 - 00:41:04.780, Speaker A: It's just a pairing.
00:41:07.440 - 00:41:19.970, Speaker D: Yeah, but I checked a bit, the algorithm. I was a bit surprised that based on the number of blobs, I expected that.
00:41:20.580 - 00:41:27.236, Speaker A: No, this is not what I'm. No, it's not the blob verification, it's the point verification. I see.
00:41:27.258 - 00:41:31.844, Speaker D: So for blob verification, there's not involved in any way.
00:41:32.042 - 00:41:39.620, Speaker A: Okay, not in the gas, because yes, that's not an opcode.
00:41:40.360 - 00:41:56.460, Speaker D: Okay, then it's clear, at least for this pre compile benchmarking, I think it will not help in any way because most of the speed actually happens by paralyzing this multiple bulb related finger.
00:41:58.640 - 00:42:02.380, Speaker A: So which client is planning to use rust KZG?
00:42:03.460 - 00:42:36.968, Speaker D: So for grandina we are planning to use it, but otherwise I don't. For grandina clients this is a less known yeah, but just keep in mind that there is an easy way to have a replacement if you're already using CKGVR bindings, right?
00:42:37.054 - 00:43:03.890, Speaker A: So I mean, just like one thing, we don't have an audit scheduled for Rust kg, right? So if it's used for a client that's supposed to be ready for production and doesn't have an alternative like can't easily also just compile with CKDG, then we need to think what we are going to do there.
00:43:06.440 - 00:43:22.500, Speaker D: Yeah, I think this is a bit tricky question because of a different status of I mean, my message was more for people that may be interested in paralyzed version.
00:43:23.080 - 00:43:42.270, Speaker A: Okay, good. Yeah, CKCT has some primitive parallelization as well, for some things. Yeah. Is any other clients planning to use Rust KC two?
00:43:44.240 - 00:44:23.690, Speaker B: I know ethereum js certainly is. We're looking at, well, I'm assuming the Rust KZ. I'm not sure if that's the same one that Kev's working on or not compile it to WASM since we want to be able to run in browser just because of our implementation here. Again, we're not a production grade client. Our code is, but at the same time our transaction library, which is used in a lot of places, and if people want to use that in browser, we want that to be considered production grade, maybe. So we may want to consider trying to get the rust version implemented, unless someone is better than me at compiling CKZG to WASM, because I don't know anything about that.
00:44:25.440 - 00:44:28.088, Speaker A: So you can't compile C into WASM.
00:44:28.264 - 00:44:30.476, Speaker B: You can. I just don't know how to do it.
00:44:30.658 - 00:45:56.416, Speaker A: I see someone here is good at that. For Lighthouse, we are currently using the rush bindings for CKZG. We haven't yet tried rushed KZG, but in Lighthouse, the KZG code in Lighthouse is sort of not very implementation dependent, so we can replace the rush binding for CKCG with Rush KCG and try it out. But I think we'll get a little more confidence if the library itself is audited, because CKZG is going to be audited, and we might be a little more confident in using Reshkdg if it's audited as well, I guess. Okay, so is it worth having a conversation about auditing? Yes. Me and Juan don't have any insight into the auditing portion of SIGP, so we'd have to ask around about. Let's.
00:45:56.416 - 00:46:29.380, Speaker A: Yeah, let's. Let's discuss this offline. But yeah, we can definitely look into it and come back with an update next week. Any final things people want to discuss before we wrap this up? Okay, well, thanks everyone. Talk to you all next week, and we'll see most of you at interrupt two weeks from there.
00:46:30.870 - 00:46:36.030, Speaker C: Bye, guys. Bye.
