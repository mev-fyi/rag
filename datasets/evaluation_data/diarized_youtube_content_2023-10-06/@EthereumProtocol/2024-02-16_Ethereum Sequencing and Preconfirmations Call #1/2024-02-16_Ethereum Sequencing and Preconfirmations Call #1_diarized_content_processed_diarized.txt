00:00:00.540 - 00:00:42.268, Speaker A: You okay. Welcome everyone to the first sequencing and pre confirmations call. I mean it's number one, but it's technically the second call. The agenda for today is to go through a quick presentation where I hope to dive as deep as possible with you today on the details of base sequencing and base pre confirmations. I hope to keep the presentation fairly short so that we have as much time as possible for the discussion. I'm going to try and keep the discussion to 1 hour. So we're going to end exactly at the hour.
00:00:42.268 - 00:01:45.360, Speaker A: But if you want to stay longer for the after discussion that's available as well. I'm going to record the zoom conversation all the way to the end. But the very last part, the after discussion, will not be shared publicly on YouTube only this first hour. Okay, so let's get started with the presentation that I have prepared. And welcome to everyone who ah, just joined in. Okay, so ethereum sequencing with pre confirmations, I'm going to give the talk in two parts. Part one is going to be trying to give context and motivation, and then part two actually give technical details of the construction.
00:01:45.360 - 00:02:44.100, Speaker A: So the way that I think of the opportunity at play here is the united chains of Ethereum. This is a term that was coined by bankless. And the idea here is that we could have the various roll ups, the various chains all live together on a shared land with low friction. So I can think about it as freedom of movement or freedom of commerce. If you go from one state to another, you don't have to show your passport or have a visa, you don't need to pay import duties or taxes or whatever it is, there's very low friction. And with shared sequencing across the chains, this is something that we can achieve, especially once we have real time proving with Snox. So at a high level, Ethereum provides two services for roll up today.
00:02:44.100 - 00:03:37.360, Speaker A: It provides settlement and data availability. But there's this new resource, Ethereum sequencing, which is going to be available very soon. I mean, new is maybe a bit of a misnomer because it's been there since the very beginning, but people haven't realized that it's there to be tapped into and somewhat similar to data availability, right? People have abused call data in some sense and used it for a function that it was not initially intended for. Now, in terms of sequencing problems, which is a very big design space, there's some that are specific to decentralized sequencing. And in my opinion, this is where the bulk of the research is. I think everyone agrees that we want to move to decentralized sequencing. But then within decentralized sequencing there's even more specialized sequences.
00:03:37.360 - 00:04:33.168, Speaker A: So there's the concept of a shared sequencer, which I guess is a special type of decentralized sequencer, and then a base sequencer, which is even more specialized. And so when you study decentralized sequences, you have to worry about many different things. You have to worry about mempools, MeV builders intents, how you do data compression, how you do proving, et cetera. And again, that's where I think most of the research is. When you move to shared sequencing, now suddenly you have problems like credible neutrality like mev sharing, deposit sharing and execution sharing. So just to highlight these three real quick, mev sharing is when you have rollups that generate MeV and you want to try and identify the MEV that's been generated per roll up and rebate back. So by default, if you don't do anything, Mev goes to a shared sequencer.
00:04:33.168 - 00:05:30.468, Speaker A: But espresso is working on a mechanism to identify and rebate. MEV deposit sharing is an idea by Zksync, which is very interesting, whereby instead of having each roll up have its own deposit contract where you can deposit assets like ETH, you have a shared contract. And the advantage here is that if you want to withdraw assets from roll up a and deposit them to roll up b, you don't have to go through the layer one, so you save on gas fees. There you have less friction. And finally, there's this idea from a polygon, which is the aggregation layer. Very clever idea whereby roll ups can express constraints on block validity relative to the state of some other roll up. So for example, roll up a can say this block is only valid if some state on roll up b happens to be xyZ.
00:05:30.468 - 00:06:18.536, Speaker A: And this allows you to do cross roll up bundles that cannot be unbundled. So you kind of have safe atomicity in the context of multiple executions. But all of this are not things I want to talk about today, because today I specifically want to focus on based sequencing, which is using the base layer Ethereum for the shed and decentralized sequencing. So now onto the details of the construction. So because it's base sequencing, we have to start with the layer one proposers. Those are the ones that are doing the sequencing of Ethereum today. And on the beacon chain we have this notion of a look ahead where we can see ahead of time.
00:06:18.536 - 00:07:27.930, Speaker A: Who are the next 31 32 proposers. Actually it's between 32 and 64. So there's this look ahead and what we're going to do is we're going to invite some subset of the sequences to step up as sequences, some set of the proposers to step up as sequences. And in order to do that, you have to post collateral and we'll talk about why this collateral is important later on. I use the emoji 1234 because it kind of shows the sequencing of transactions in a specific order. And then there's this other set of proposers, which I call includers, which don't have collateral, they don't have sequencing rights, but they do have the right to include transactions on chain, and those can be either sequenced or unsequenced transactions that can go on chain. Okay, now the big technical difficulty for which there's been an unlock recently is how do you do pre confirmations using Ethereum proposers? And it turns out in hindsight, the design is extremely simple.
00:07:27.930 - 00:08:33.168, Speaker A: And here is how it works. So let's say that we're in slot n and we have this user who's also at slot n, and that user wants their transaction pre confirmed. So what they do is that they're going to identify who the first sequencer is in the look ahead. So in this case, the first sequencer is in slot n plus one. They send that sequencer request, some sort of RPC request, to this well defined entity, and then the sequencer responds with a promise, a promise to have that transaction be executed in a certain way. So for example, if the transaction is a uniswap transaction, the promise will be on the price that was paid and the exact amount of fees that was paid by the user. And once the user has this promise, then that transaction can actually be settled and included in the next slot in slot n.
00:08:33.168 - 00:09:31.680, Speaker A: So even though slot n is not a sequencer, it is an includer, and it can include and settle immediately transactions that have been pre confirmed, so long as you have the full list of transactions that have been pre confirmed prior to this one promise. Now the reason why we had collateral is because these promises can be violated. And so if there was a promise and the user was violated, then we have slashing. And there's two types of slashing. There's slashing for safety faults and slashing for liveness faults. Safety faults just says that a proposer, a pre confirmer pre confirmed to some state a and to some state b. And these two transactions or states are inconsistent, and so one of them must not have occurred.
00:09:31.680 - 00:10:05.760, Speaker A: And therefore we can slash. And if you're an honest, pre confirmable sequencer, that should never happen. And so it's okay to slash with the full amount because that should really never happen. But then there's this other annoying edge case, which is liveness. What if the pre confirmer just happens to go offline, which does happen from time to time, and there's nothing malicious, it's just an accidental liveness fault. Well, there still needs to be some punishment there, even though it could be a different amount than the safety fault.
00:10:06.660 - 00:10:08.720, Speaker B: Justin, can I stop with a question?
00:10:08.870 - 00:10:09.890, Speaker A: Yeah, absolutely.
00:10:10.740 - 00:10:37.450, Speaker B: Let's say take your example of somebody promising a uniswap trade with some parameters and execution. One failure, and the promise came from slot n plus one. Now, slot n includes it, but the end result is different. Okay, so somebody changed the number. Something else. This is a different type of failure that the promise is fail, but it's neither that you mentioned. How do you think of that?
00:10:37.760 - 00:11:20.420, Speaker A: Great question. So one thing that I should have made maybe more explicit is that the sequencer here I saw n plus one has monopoly power to sequence transactions between the head and the end of their slot. So let's say I saw n minus one. The state has been fixed. So all the roll ups at a given state? Well, for the next 24 seconds, because there's two slots for twelve plus twelve for the next 24 seconds, the sequencer has full control over the ordering of transactions. And so there's no one else who can advance the state of the roll ups. It has to be signed by the preconfirmer.
00:11:20.420 - 00:11:24.680, Speaker A: And if it's not signed, then the state of the roll ups doesn't advance.
00:11:25.340 - 00:11:51.488, Speaker B: Okay, so these aren't slots just off, let's say, the proposers off the l one. Rather, these are slots off the base roll up, which could be one and the same, but only the sequencers in green have the right to sequence them. And the gray includers can include them, but only based on the sequencer. Based on the sequence of the next sequencer. Did I get it right?
00:11:51.654 - 00:12:19.172, Speaker A: Yeah, that's exactly right. So the roll ups opt into giving sequencing rights to the subset of l one proposers. And everyone else can only include and settle transactions. They can't sequence them. Great question. Thank you. So we have the slashing, we have the pre confirmation request and promises.
00:12:19.172 - 00:13:04.868, Speaker A: All good. Now let's have a look at Mevboost and how that changes the game with respect to block building. So right now we're in a position where the block builders have monopoly power to build blocks. Well, they have not monopoly power, but they're unconstrained in terms of what blocks they can build in any given slot. They pass those blocks to relays, and then the relays forward those blocks to proposers. But now we have this new actor, the user, who got a promise from the proposer, who happens to be the sequencer and the preconfirmer. And what needs to happen is that these promises need to be communicated ultimately to the builder, but we can do that through the relays.
00:13:04.868 - 00:13:57.604, Speaker A: So we have this back pressure, this back channel, where every promise that's made to users gets communicated upstream. And then the builders, once they have all those pre confirmations, they are tasked to build the most valuable block that respects those constraints. So, more likely than not, these pre confirmations are going to constrain the top of block, or the top of blobs, in the case of roll ups. And the builders have to build the best block possible. And then the same flow happens through the relays and through the proposer. And this is a very nice and simple design, especially in the context of execution tickets. Now, what execution tickets give us is they basically make sure that the proposer is not a validator.
00:13:57.604 - 00:14:33.460, Speaker A: So the execution proposer is actually some other separate entity. That's very sophisticated. And the reason why execution tickets is very important here is because right now we are assuming that proposers are validators that are running on raspberry pis. And in order to be a preconfirmer and a sequencer, you have to be extremely sophisticated. You have to run a full node for every roll up. You have to have very high bandwidth, to be able to have tens of thousands or hundreds of thousands of transactions per second. You need to have very high uptime, you need to have denial of service protection, et cetera, et cetera.
00:14:33.460 - 00:15:47.950, Speaker A: And so, with execution tickets, we have a nice design. But what about without execution tickets? Well, without execution tickets, my proposal is to introduce a new role called the pre confer, which would be the sophisticated entity, and it would be mutually trusted by the proposer and the users. And basically what the proposer would do is that they would, ahead of time, they would register, saying, this is my favorite pre confer, that one preconfer now has the right to pre confirm on my behalf. So it's a form of delegation. And one of the nice things is that all the safety faults can be fully collateralized, and the responsibility of the pre confer, because that should never happen. And really, the one edge case that we have to worry about is liveness faults. And what I'm suggesting is that basically the proposer is on the hook for liveness faults because ultimately they have to be online and propose a block because they have monetary power to extend the r one.
00:15:47.950 - 00:16:38.350, Speaker A: But they're trusting the preconfer to be online if they've provided any pre confirmations. So if the pre confer has provided pre confirmations, they want to make sure that the proposer can propose a block that respects those pre confirmations. And so what I think is a reasonable placeholder for this temporary pre confer is a relay, because the relays are already trusted to be online by the proposer. Specifically, the relay is trusted for the get payload request. And so here we're just extending this liveness assumption to something a little bit stronger. And that's pretty much it. That's the end of the presentation, and I guess we can open it up to discussion and questions.
00:16:38.350 - 00:16:45.170, Speaker A: Hi. Yeah, go ahead.
00:16:46.740 - 00:17:33.810, Speaker C: By the way, I love this. This is pretty much in line with how we've designed the precoms and Mev commit. But one consideration that comes into play is the state of the mem pool, which the builder has visibility into. So in this area where we enforce the builder to create a block with the preset transactions, then I believe this model is great. However, that might end up in situations where the block value is suboptimal for the validator. And then when you have the builder kind of incorporate the preconf knowledge with the visibility into the mempool that they have, then you can kind of optimize the value for the validator. However, I'm not sure if this is a role that the protocol needs to own, so I just wanted to bring that up.
00:17:35.780 - 00:18:17.852, Speaker A: Right. So one of the nice things is that a lot of the details of pre confirmations in some sense have nothing to do with base sequencing. Like any sequencing mechanism with pre confirmations will have to deal with these nittygritty details. Now, I guess one of the things I'll say is that you're right that any constraint on the block that's imposed to the builder will mean that ultimately the block is less valuable because you're constrained. So your search space is smaller. And the way to make it incentive compatible is basically to have a pre confirmation tip. So you have a tip that's paid for the privilege of constraining the search space.
00:18:17.852 - 00:19:05.320, Speaker A: And this tip needs to be commensurate to the MEv impact that that transaction has. So if it's a transaction like a transfer that has no MEV impact, then a $0.01 tip will be fine. That's rational. To just collect the free $0.01. But if it's a trade, for example, on a DeX, and it's one that goes against the market, that increases the arbitrage opportunity at the end of the slot, then actually, it's actually rational for the pre confirmed to pay the user a negative tip so that they can collect more arbitrage at the end of the slot, and vice versa. If someone's arbitraging and kind of closing the expected arbitrage at the end of the slot, they have to pay for the privilege of having their arbitrage transaction pre confirmed.
00:19:05.400 - 00:19:14.610, Speaker C: But the relay doesn't have that information. Right. The builder does, of what that MEV value should be, or what the bid needs to be to negate the MEV value.
00:19:15.620 - 00:20:11.600, Speaker A: Right. So one of the things that the pre confer needs to do is to price tips appropriately, and they shouldn't price them too high, otherwise the users won't be happy, and they shouldn't price them too low, otherwise the proposers won't be happy. So it's a very delicate balance where they need to price tips properly. And so the way that I envision it is that basically the preconfer has some sort of mechanism to price these tips. This could be by working with searchers, for example, that act as advisors, I guess, or another mechanism, and this is something that I believe kartik from Sorella is investigating. There could be some sort of real time auction where the searchers are bidding against each other for this tip and buying the risk in some sense, which would provide more transparency, more fairness, and be a market driven design. Dan?
00:20:13.320 - 00:20:14.116, Speaker D: Yes.
00:20:14.298 - 00:20:39.112, Speaker E: Question. So in the setting where for one proposer, we have multiple pre confers. Yeah, I believe that would be desired, because if the user picks it, then we would need multiple. And so I think the complication there is how they coordinate so that they can be sure of what state they're executing on.
00:20:39.166 - 00:20:39.432, Speaker A: Right.
00:20:39.486 - 00:20:41.950, Speaker E: So I'm curious if you thought about that.
00:20:42.800 - 00:21:11.456, Speaker A: So, in what I suggested, there's only one preconfer, and you can tell it by the lack of s. So builders is plural relays, plural users, plural. But proposer has monopoly power over the next slot, and the preconfer has also monopoly. So there's only one of them. And in some sense, you can only really have pre confirmations if there's one of them. And the reason is that we're doing pre confirmations on state, not just on transaction inclusion. So if you're doing it on transaction inclusion, then sure, you can just merge the two sets.
00:21:11.456 - 00:21:41.760, Speaker A: But if you're doing pre confirmations on state, you could have two inconsistent transactions that can't both simultaneously execute as promised. And so, in my opinion, the best design is to have to extend the monopoly power of the proposer to the pre confer, and that's what we're going to have with execution tickets anyway. There's just going to be this one proposer who has sequencing rights, and it makes everything simpler, and it's more powerful because you can do pre confirmations on execution, not just on inclusion.
00:21:42.420 - 00:21:48.770, Speaker E: Okay, that makes it much more clear. I guess my confusion was, I thought you had said, like, users were picking the.
00:21:50.820 - 00:22:07.684, Speaker A: No, no, there's only one well defined, and they have to connect to it. So metamask as a wallet. What they'll do is that they'll identify who the next pre confirmer is, and then they'll just send the transactions to them directly, instead of sending it to a centralized sequencer, as they do today. For optimism or arbitrary.
00:22:07.812 - 00:22:15.160, Speaker D: Can you clarify the mechanism that you're proposing here for how the preconfer is determined?
00:22:16.220 - 00:22:48.260, Speaker A: For sure? So we have this look ahead, right? And there's some sort of on chain, maybe a small contract, right, where people can deposit collateral. And because it's public, smart contract, everyone can see, like, okay, who deposited collateral, and therefore everyone can calculate, okay, who the next pre confer is. So it will be a subset of the look ahead based on some collateral in a smart contract. Jonah?
00:22:49.000 - 00:23:14.940, Speaker F: Yeah, I just wanted to go back to the pricing question. One of the beauties of execution ticket proposal is that you actually get a closed form price or value on the block space. So you can use a ticket to get an implied value of each transaction or each unit of gas in the block, and you can use that to back out how much you'd want to charge for pre confirmation.
00:23:17.360 - 00:23:28.304, Speaker A: I think that works for inclusion tips. But for me, each unit of gas is different, right? Because depending on which piece of state you're reading or writing to, it gives.
00:23:28.342 - 00:23:33.250, Speaker F: A floor, it gives a reserve, gives a floor. Then you would just run a simple auction over it.
00:23:34.020 - 00:23:50.600, Speaker A: Yeah. To be fair, I don't have a fully baked auction in my mind, and there's a bit of an open problem how to do that. But if you assume the preconfer is sophisticated and can price it themselves as a black box, then it just works. Noah.
00:23:52.860 - 00:24:31.430, Speaker G: I had two questions. First of all, what if the slot is full for that given slot, do you just move ahead, kind of like if an airplane flight is booked up, you just book the next flight down. Also, are relays, preconfers, incentivized not to gossip any of their transactions? Because, for example, if you're doing arbitrage opportunities, private order flow, it would be one of the main ways you can make more money, because you know the information before anybody else knows it. So wouldn't that be the same thing for a preconfer relay? If they could give that to a builder, that builder would be able to price blocks at a better rate, well, a more profitable rate, if they knew more information than everybody else. So would that cause an issue of that?
00:24:32.120 - 00:25:13.048, Speaker A: Right. Okay, so first question, what about four blocks? So one of the things you have to be careful of as a pre confirmer is not to pre confirm too much, right. Because you only have, at the maximum, 60 million gas, right. You have 30 million gas for this lot and 30 million gas for this lot. So what you have to do, actually is during cell n, only pre confirm up to 30 million gas, and then wait and see if all your pre confirmed transactions go in slot n. And then if they do, then you have another 30 million gas specifically for your slot. If you pre confirm to 100 million gas, then you're just not going to make it and you're going to get slashed.
00:25:13.048 - 00:25:32.810, Speaker A: But that's something that should never happen. It's kind of a form of safety fault. To your next question around whether or not the pre confirmation request should be shared with who again, publicly, did you say?
00:25:33.580 - 00:25:37.240, Speaker G: Yes, kind of like the public information.
00:25:37.390 - 00:26:17.720, Speaker A: So the way I think about it is that pre confirmations should be shared, at least I think it's good practice to be shared immediately. So as soon as transactions pre confirmed poop, you gossip it immediately. And there's various reasons why this is beneficial. One of them is that it kind of solves the fair exchange problem. So the fair exchange problem is that as a user, I'm willing to pay for a pre confirmation, and I need to send a message, assigned message by me. But I want to receive the pre confirmation because I want to get a little green check mark on my wallet. But there's nothing, in some sense, forcing the pre confirmator to share that receipt.
00:26:17.720 - 00:27:14.920, Speaker A: And so if we have this understanding that all the pre confirmations are immediately gossiped, then I can just check as a user whether or not all the previous requests were fulfilled and properly shared. It also helps, I guess, with just basic transparency of the mempool, as you said, in terms of giving an advantage to specific players. The thing is that all these pre confirmations will eventually be given to the builders, right? So in order for the builder to build a valid block that respects all the pre confirmations, they have to have a view of all the pre confirmations. So at the very least, if it takes, let's say, 100 milliseconds to build a block, they need to have all the information 100 milliseconds before the PBS deadline. Okay, Yuri.
00:27:19.340 - 00:27:55.968, Speaker B: A few points, and good that you're on this slide. On the last thing that you said, there's actually an incentive to propagate as fast as you can the preconf, and it has to do with the gas limit. So if you keep to yourself all the information, then it might not be included by the includer before you or something like that. So you're kind of like incentivized to push all the free comps as you receive them. So it gets included by the includer, and then you have your own slot. So you'll fill the first 30 million, it gets included, and then you'll have more. So I think, forget about best intentions or whatnot.
00:27:55.968 - 00:28:04.644, Speaker B: This is not incentive, but the incentive is to use as much as possible. So I don't think there is an advantage to keeping it to yourself. And there is an advantage to propagating.
00:28:04.692 - 00:28:19.260, Speaker A: It to the builder. Yes. So at the very least, every slot, you want to gossip towards the end of the slot, all the pre confirmations so far, so that they can be included and settled, so that you can do pre confirmations for the next slot.
00:28:19.600 - 00:28:35.040, Speaker B: Now in this slide, do you think, when I saw this slide, my immediate thought was, this is very similar to the latest, like, inclusion list design. Basically have the proposer tell that and kind of like, okay, this needs to be included. Are you thinking something along these lines?
00:28:35.620 - 00:29:00.136, Speaker A: Yeah, you can think of an inclusion list as being a constraint on the builder, some sort of proposer intent. The proposer is intending for their block to have such and such constraints. Normally inclusion lists originate from the proposer. So the proposer kind of observes the mempool and then builds the inclusion list from that. Here it's slightly different. The quote inclusion list is built from.
00:29:00.158 - 00:29:11.004, Speaker B: The users, ultimately, okay. But it should, at least by this diagram, kind of like follow the same line, like, okay, proposer somehow tell it to the builder because it wanted to get included.
00:29:11.132 - 00:29:11.810, Speaker A: Yeah.
00:29:13.300 - 00:30:06.108, Speaker B: And the last piece is on the economics, and I'm probably going to argue against most of the people in this call. You can't really price what's going to be the precon pricing, what it would be and how it would affect MeV at the end of the block, 7 seconds, 12 seconds, five second into the future because price fluctuates ten times more during the slot than at the end of the slot. So you can't really maximize it. And any auction mechanism, from my perspective, actually destroys value. And so you could do something if you want. How do we price it? I think it's an entire sub problem to talk about it. But if you charge some percentage on volume capture, some take a flat fee for it, it isn't a local maximum, but you actually create more value in the surface, so you'll get more users for it, et cetera.
00:30:06.108 - 00:30:25.030, Speaker B: So my point is only to argue it isn't clear how this would play out later in the block because nobody knows what the prices are going to be. And so this would be best executed with charging a fee for that based on volume, based on effect, based on something.
00:30:26.120 - 00:30:36.520, Speaker A: Right. I mean, the way I think about it is that it's a future, right? An execution future, and you can price it. But yeah, I agree, it's a whole subtopic.
00:30:37.180 - 00:30:42.430, Speaker B: A future will have an optionality. You don't have to execute on it.
00:30:43.360 - 00:31:10.740, Speaker A: Okay. But like the special type of future where you have to execute whatever it's called, deliverable, whatever. But yeah, I agree with you. We need so much more analysis from economists. But again, all this analysis around pre confirmations in some senses, is separate from the base pre confirmation discussion, which is only opinionated about the very end, which is that the proposers are the shared sequences. Kaido.
00:31:12.440 - 00:31:14.390, Speaker E: I think Ben came before me.
00:31:19.820 - 00:31:21.944, Speaker A: Okay, Ben, it looks like you're up.
00:31:22.062 - 00:31:31.272, Speaker D: Okay, I'm up. Can you go back one slide to where you show the pre confers elected? Yes.
00:31:31.326 - 00:31:32.568, Speaker A: Oh, yes. This.
00:31:32.734 - 00:32:12.164, Speaker D: Right, right. So just to the this, you know, I have a variation on proposal, but I want to make sure I understand all the details of this proposal. The pre confers, how do you become elected to be a preconfer? It's not synchronized with the proposer. Right. It's just l one. Validators are restaking and they can become elected. What is the election mechanism for the pre conference? Originally it was that if you're in the look ahead as a proposary, then you are a preconfer.
00:32:12.164 - 00:32:16.292, Speaker D: But now you were suggesting to have both a proposer and a preconfer, so I wanted to confirm.
00:32:16.356 - 00:32:36.592, Speaker A: No, sorry. These are the same entity. So the proposer, the preconfer and the shared sequencer, these are all different labels, different roles for the same entity behind it. And the entity happens to be an l one proposer, but it can't be any l one proposer. It has to be specifically an l one proposer that has opted in.
00:32:36.726 - 00:32:38.192, Speaker D: And that's in the look ahead.
00:32:38.326 - 00:32:40.800, Speaker A: Yes, in the look ahead and has collateral.
00:32:42.340 - 00:32:46.150, Speaker D: Right. And so what's the point of.
00:32:48.120 - 00:32:48.676, Speaker A: The.
00:32:48.778 - 00:33:10.444, Speaker D: Relationship that you're describing between the proposer and the current preconfer in the look ahead? Maybe just clarify what would be different if the roll up just designated the next preconfer ahead to be its own sequencer, just like it has a centralized sequencer today? Maybe just clarify that.
00:33:10.562 - 00:33:38.688, Speaker A: Yeah, that's a great question. And actually, that's how the base roll up the original design a year ago went ahead. Unfortunately, that came with no pre confirmations. So if you give the proposer at slot n the right to sequence, and they give promises, then anyone, they can just violate these promises and nothing will happen. And so we need somehow the proposers to opt in to additional flashing conditions.
00:33:38.864 - 00:34:04.984, Speaker D: No, that wasn't the question. So the question is, now you have this mechanism where you have this look ahead of proposers that have opted in to be part of this pre confirmation layer. And, you know, the next proposer, maybe it's not the proposer of the current l one slot, but it's the proposer of the next l one slot, and it's the next pre confirm because the current l one proposer has not opted into this layer.
00:34:05.112 - 00:34:05.692, Speaker A: Right.
00:34:05.826 - 00:34:31.190, Speaker D: So why do you have to have any special interaction between the current l one proposer and the current preconfer? What if the roll up just designated the current preconfer as its sequencer? Just like roll ups have sequencers today that aren't the l one proposer. Why do you need to designate any special interaction between the proposer and the pre confirmed? That's the question.
00:34:32.920 - 00:34:41.720, Speaker A: Right. So, in order to provide pre confirmations, you have to have sequencing rights. Otherwise, your pre confirmations are worthless.
00:34:42.140 - 00:34:50.988, Speaker D: Roll up would be designating the sequencing rights not to l one proposers, but only to l one proposers that are in this look ahead.
00:34:51.074 - 00:34:51.420, Speaker A: Right.
00:34:51.490 - 00:34:55.500, Speaker D: Only that the l one proposers that are also preconfers.
00:34:57.520 - 00:35:12.860, Speaker A: Yeah. So this is the suggestion. So those l one proposers that are simultaneously in the look ahead and have collateral, in this case, the green proposers, those are the ones that have sequencing rights for the roll ups.
00:35:13.020 - 00:35:28.312, Speaker D: Okay, so that is the proposal. But then when you're on a few slides later, when you show the relationship between a proposer, are you doing anything special? Maybe one more slide. When you show that there's a proposer and a preconfer, oh, I see.
00:35:28.366 - 00:35:34.292, Speaker A: So you're right. Like this label here, it should say preconfer or sequencer.
00:35:34.436 - 00:35:40.890, Speaker D: I see. And so there's one more slide, maybe go one more. Yes.
00:35:41.740 - 00:35:42.490, Speaker A: Okay.
00:35:43.100 - 00:35:45.272, Speaker D: What this arrow means, this is confusing.
00:35:45.336 - 00:36:06.260, Speaker A: Okay, I see. Okay. So here the proposer is the sequencer. Like they have the sequencing rights, but they're not going to do the actual sequencing and pre confirmations themselves. This is a delegation relationship. So this entity here has the rights, and this entity is the one doing the heavy lifting.
00:36:07.240 - 00:36:13.924, Speaker D: And the proposer is the current Ellen proposer, who may not be a preconfer, and the preconfer may be the next.
00:36:13.962 - 00:36:27.924, Speaker A: No, this proposer is a, I should, maybe we need a different label here. Like this is some sort of Delegate preconfer. It's some sort of preconf helper.
00:36:28.052 - 00:36:32.220, Speaker B: And why is that delegated? What's the value of creating this entity?
00:36:32.560 - 00:36:39.820, Speaker A: The value here is that the proposer can remain on a raspberry PI and be a validator, and that can be a very sophisticated entity.
00:36:41.040 - 00:36:52.210, Speaker F: Why do you need proposer builder separation? But in this context, it's like a new version of it. It's just to offload complexity so that the actual proposer itself doesn't need to handle this new futures market.
00:36:54.340 - 00:37:00.390, Speaker B: Why do we assume this has complexity if you're just promising? This is one, this is two, this is three, this is four.
00:37:00.920 - 00:37:32.400, Speaker A: At a minimum, you need to price it. You need to be running full nodes for these roll ups so that you know what is a fee paying transaction. But even more fundamentally, you need the bandwidth to be able to process all the transactions on all the roll ups simultaneously. You also need to be able to shield your IP address. You need to have collateral. Right, because you're collateralized and you need to price it. Yeah, it would definitely be not something you can do on a raspberry PI.
00:37:34.660 - 00:38:05.050, Speaker B: Nathan, I want to ask what the guarantees are for the user economically and through social consensus. It seems like in the naive implementation, the economic guarantees for the user end when the MEV from their transaction exceeds the slashing risk. So maybe you want to move past that. You probably want to have social consensus and trust, and have some trusted entities doing as the pre confer. Is there a way around that? I guess you could have a higher collateral requirement. Have you given any thinking to this?
00:38:05.740 - 00:38:58.090, Speaker A: Right, so there needs to be collateral, either reputational or financial, as you said. Now, if we're going to go with financial collateral, one way to think about it is that the collateral needs, if it's let's say 1000 e, then that's actually okay. And why did I pick 1000 e? It's because it's the largest amount of MeV in any single block. And so if you reneg all your pre confirmations, you have full freedom to build a block and therefore extract the most amount of mev. But if the amount of mev in any given block is bounded above by 1000 e, then you're good. Now, it turns out that some use cases of pre confirmations that don't really fit into this model of arbitrage. So, for example, let's say that I'm a merchant and I'm delivering some sort of physical good or digital good, which is worth 2000 e.
00:38:58.090 - 00:39:26.310, Speaker A: Now, pre confirmations, at least as described, don't really work like you need some sort of form of insurance where it could be a separate kind of pre confirmation. Now, one of the interesting things here is that espresso is working to potentially boost the amount of economic security from a thousand ETH to millions of ETH by using restaking and having the attestors dual purpose, as pre confirmation attested as well.
00:39:27.400 - 00:39:30.980, Speaker B: Makes sense. Thanks, Quintus.
00:39:36.920 - 00:39:56.860, Speaker H: So just coming back to this delegation question, so I might have misheard, but was the idea that the party that makes the most sense to delegate to is a relay? Was that what you were saying? Was there supposed to be some other third party that's delegated to?
00:39:57.010 - 00:40:27.060, Speaker A: Yeah. So we have this new, abstractly, we have this new role. We could call it pre confer or something better. And one reason why the relay is well suited is because the proposer is already trusting the relay for being online for the get payload. They need to be online. Otherwise it's a mess block and they lose mev. The relays also have a relationship with the builders, so it's kind of convenient to pass the pre confirmations directly to the builders.
00:40:27.060 - 00:40:54.530, Speaker A: So you're kind of skipping this step here. And also the relays, they tend to be like these public goodsy, high reputation entities. And so it's easy for the users to trust them as well, maybe, right, because we already have builders trusting them, proposers trusting them. So might as well also have the users trust of relays. But it's an open market, and anyone can come in and provide this pre confirmation service.
00:40:55.540 - 00:41:42.636, Speaker H: Yeah, I guess I have two questions there. One is, what are your thoughts on how this influences the sort of rest of the relay roles and the sort of PBS landscape and all those kinds of things? Because my understanding would be that if a proposer delegated to a relay, then that relay would be the only relay that can produce blocks. And as we've seen, the relay's role has been evolving a lot and taking a lot more responsibility. So you forward this along. It seems like it could be like a relatively powerful position for the relay to be in, especially if people end up delegating. Most people end up delegating to one or two relays. Ultrasound being the sort of obvious choice here.
00:41:42.636 - 00:41:43.804, Speaker H: And I think blockchrop as well.
00:41:43.842 - 00:42:29.660, Speaker A: Right. Okay, so let's say that in a given slot, the proposer has chosen some relay, let's say ultrasound. This relay actually should send all the pre confirmations to all the other relays. So even though, yes, the relay is like an extension of the monopoly power of the proposer, you still have a plurality of relays immediately after this. So the monopoly power kind of is for a minuscule amount of time. So that's one thing. Another thing I'll mention is that the relays actually now need to make sure that the blocks respect the pre confirmations.
00:42:29.660 - 00:43:16.750, Speaker A: And in the context of optimistic relaying, that means that the builders need to be collateralized for the maximum penalty that can be caused from not respecting the pre confirmations by the pre confirm. Right. Because let's say the builders build a block that doesn't respect the pre confirmations, the pre confer is on the hook. And so they need to be compensated by the bad builder that built a bad block. And so right now on the ultrasound relay, for example, we have a limit of 64 e of collateral for the builders in terms of optimistic relaying. And this would have to be potentially increased to 1000 EIF or whatever the amount is.
00:43:18.560 - 00:43:35.670, Speaker H: Yeah. Okay. I think that is a whole rabbit hole in and of itself. But it seems, I am skeptical of this sort of passing of pre confirmations from the pre conference to relays, given that there's a lot of timing issues and a lot of trust that goes into that. And the other relays, obviously.
00:43:38.280 - 00:43:38.804, Speaker B: It seems.
00:43:38.842 - 00:43:45.012, Speaker H: Like there's a lot of sort of trusted relationships going on here.
00:43:45.066 - 00:44:09.992, Speaker A: Here's the way to think about it. The proposers, okay, first of all, this is only a temporary thing until we have execution tickets. So hopefully it won't last more than two, three years. But let's say that it is something that we are worried about. The proposer ultimately chooses the preconfer. Now, let's say that the proposer today is connected to three relays. Let's say flashbot blocks route and ultrasound.
00:44:09.992 - 00:44:35.670, Speaker A: Well, what they're going to want is the preconfer to just share with these three relays, because that's the three relays that the proposer trusted. So in some sense, the proposer can impose their preferences on the preconfer. The preconfer has been elected by the proposer. And if they don't provide a good service and they don't connect to all the relays that the proposer wants, well guess what? The proposer will just change pre confer and set something else.
00:44:36.920 - 00:44:37.284, Speaker H: Yeah.
00:44:37.322 - 00:44:37.572, Speaker A: Okay.
00:44:37.626 - 00:44:57.580, Speaker H: I don't want to take up all the time. I would just say my understanding of this is you're asking proposers to delegate blockbuilding rights to some off chain party, and in this case you're asking them to do it in a first come, first serve way. But this ends up with all blocks being produced by one or two parties which know, maybe fine, but I think at least should be investigated.
00:44:59.040 - 00:45:08.960, Speaker A: I don't think there's any degradation relative to the status quo, but let's have this conversation offline for sure. Nathan, sorry Kaido, by the way, you've been waiting.
00:45:09.620 - 00:45:12.290, Speaker B: Oh, sorry, I just have from the last question.
00:45:12.600 - 00:45:14.790, Speaker A: Okay, no worries. Kaido, you're up.
00:45:17.080 - 00:45:52.450, Speaker E: Yeah, thank you for the presentation and all the conversation around it. I just have a quick clarifying question. So I want to make sure my assumption on how these things work, the prerequisite for these two work, I think one of the key things is just mechanism for posting collateral from the proposer side. Is that like a consistent theme? Okay, the second thing is, without execution ticket, we basically need a way for the proposer to express delegation preferences to external parties. And when we have execution ticket, sorry.
00:45:53.380 - 00:46:31.848, Speaker A: Right. Okay, I think of these two things as being implementation details. Now let's take the first one, collateral. The way I think about it is you need, let's say on the order of 1000 e of collateral. Now, restaking actually doesn't work too well in this context because each validator only has 32 e. If we have Max Eb and we lift the limit, then restaking would actually work really well. Another thing I'll mention is that the collateral efficiency can be extremely high, especially for the large operators.
00:46:31.848 - 00:47:32.640, Speaker A: So let's say I'm Coinbase and I have millions of eth. I actually only need this 1000 e or some small number of thousands of eth for all my validators. And the reason is that if I haven't been slashed in slot n when I was the proposer, then I can start recycling this collateral over and over again. So at the end of the day, I don't expect that there's going to be that much collateral, maybe 100,000 e, which is much, much smaller than the 30 million e, which is currently mistaking in terms of how do you do the delegation? That really is an implementation detail. But the way, I think the naive way would be the proposer signs a message saying, I'm giving my proposal rights to this preconfer and it goes on chain on a smart contract. And if they ever want to change the preconfer, then they just sign a different transaction.
00:47:33.700 - 00:47:49.830, Speaker E: Yeah. And lastly with ET, the additional thing we need is a way for the users to communicate with the preconf proposer. Is that like a fair assessment, trying to understand how difficult it would be to implement these things.
00:47:51.800 - 00:48:20.280, Speaker A: So you're talking about the communication here between the user and the proposer. The proposer here would be the ticket holder who won the ticket lottery. The way it would work is that they would advertise themselves. So they would say, please connect to this website. And this is the RPC endpoint, very similar to a centralized sequencer. So right now, optimism. For example, arbitrarim, they advertise a specific IP address for their centralized sequencer.
00:48:20.280 - 00:48:25.680, Speaker A: And instead of having a fixed IP address, it's a rotating one that potentially changes every slot.
00:48:26.660 - 00:48:39.190, Speaker E: Yeah. My second question should be straightforward, just how slashing would work. Not slashing. Sorry, how liveness slashing work? I think it says you're guaranteeing both liveness and safety. And I wasn't sure how that works.
00:48:39.960 - 00:49:09.180, Speaker A: Yeah, I mean, it's very easy. It's just a small contract, and you provide a proof that your pre confirmation was not honored and that there was a missed slot. And so that counts as a lifeless fault. If your pre confirmation was not honored and there was a slot, then there was no missed lot, then that's the same default. Ludwig.
00:49:10.820 - 00:49:45.800, Speaker B: Yeah. Just quick question to clarify. Is this model, assuming that the only person that we can consider for inclusion of the precomps, basically the proposal has to be the next one. And why is that a requirement if the l two s are sequencing based on when the precomps are signed? Because otherwise you can arbitrarily choose the precomfer within the look at, well, the proposer, sorry, separation between preconf kind of generator and preconf enabler, which is the proposer.
00:49:47.260 - 00:50:32.596, Speaker A: Right. So in theory, you could have some totally separate entity that does the pre confirmations. But the thing is that they can't guarantee that the transactions will actually go on chain within a certain amount of time, because the only entities that can guarantee that are literally the l one proposers, because they're the ones that have these rights. And so if you don't directly control these slots, then you can make promises, but it's very hard to honor them in a guaranteed way. Whereas if you invoke Dr. One proposers, they literally have proposing rights, which means that they can guarantee, if they're online and honest, that those pre confirmations will go on chain.
00:50:32.788 - 00:50:56.400, Speaker B: I guess my main question is, let's say that there's 32 proposers, right, and ten of them are offering pre comps. We could have the next one be the de facto delegate. But if the l two is sequencing based on when the precomp gets signed and released by the precomfer that is offering that service, they can pick whichever proposer is most competitive.
00:50:57.860 - 00:51:09.910, Speaker A: Yeah, that's an interesting point. Yeah, in theory, you could use any of the green ones. You don't necessarily have to use this next one. Interesting point. I hadn't thought about that. Yeah, worth thinking about.
00:51:10.360 - 00:51:14.272, Speaker B: Then the entire pricing model kind of becomes far more complex.
00:51:14.336 - 00:51:22.040, Speaker A: But yes, it becomes messy, but interesting nonetheless. Ben.
00:51:23.740 - 00:53:07.988, Speaker D: Yeah, so I wrote it in the chat, but I guess I wanted to raise this because I think it addresses some of the concerns that are being discussed, including from Quintus and what we've been discussing in the last few minutes. But if instead of electing the pre converters, just based on the look ahead, you ran a separate lottery or execution tickets, as you're calling it, auction, to decide who the preconfers are, and then the L one proposer always has the option to either buy this Preconfer slot, or delegate in some way to the preconfer slot in a way that's just coordinated. The whole point of involving the L one proposer is so that you endow the preconfer with rights over the L one as well, and this needs to be somehow recorded, so either you have some kind of delegation, or you actually have a purchase by the L one proposer, then I think it addresses these concerns. The main reason why we were proposing to do it this way was there are other advantages that you can have when you have more control over the mechanism through which you elect preconfers one, you can elect multiple preconfers over different roll ups. So it's possible to have one preconfer buy the rights for proposing all the roll ups, maybe a subset of the roll ups. Every roll up could post some reservation price at which it must be bought. This is what is driving this mev share design, as you described it, Justin.
00:53:07.988 - 00:53:51.912, Speaker D: But the second thing, which is what you and I were talking about yesterday, is that many teams are concerned that if you have one monopoly preconfer over all the roll ups, that some roll ups may get excluded. If the preconfer is citadel and it's censoring transactions that are, I don't know, on aztec or something. Well, if you have a multi preconfer election design where you only get the rights to propose for a roll up, if you bid on it, and there will be some roll ups where Citadel won't bid and other people will bid on it, then you also mitigate those concerns. So I just wanted to sort of highlight that, and if there's any.
00:53:51.966 - 00:54:21.040, Speaker A: Right, yeah, thanks for highlighting that. And I agree there's a whole design space in terms of extensions or modifications and variations of the base sequencing, and maybe we should have a whole call dedicated to that. But I guess let's try and go through the questions on the most basic design, which I think is this one or something very similar. Qb.
00:54:24.520 - 00:54:45.000, Speaker B: Just had a quick question around the execution guarantees around pre confirmed transactions. And so if I did a swap through, let's say, univ two pool and set a slippage parameter, that transaction gets pre confirmed. Does it need to successfully execute or can it revert?
00:54:45.660 - 00:55:03.680, Speaker A: Yes. So in the most extreme, kind of intent is like, the user can specify the post date route, so it knows exactly what it is, but it could be a slightly weaker intent, like, I want this price. Or if one of the weakest intents could be, I just want inclusion, and I don't even want guaranteed execution.
00:55:04.500 - 00:55:10.400, Speaker B: Okay. Because that has a significant impact on the sophistication of the pre confirmed.
00:55:10.900 - 00:55:28.120, Speaker A: Yes, for sure. But, yeah, all these different flavors of pre confirmations and intents, in some sense, is orthogonal to base sequencing. Specifically is more just a rabbit hole within pre confirmations. Quintus.
00:55:31.260 - 00:55:32.840, Speaker H: Sorry, that's an old hand.
00:55:32.990 - 00:55:35.320, Speaker A: Okay, gotcha. Yuri.
00:55:38.400 - 00:56:06.150, Speaker B: Did you consider having sequencers, their previous pre confers? So basically, the sequencer, you have the sequencer and the next sequencer promised also that. And so you kind of get around this 30 million gas limit. Basically, though, continuous cross sequencer pre confirmation, and then you end up with my fairy tale of first come, first serve, real time pre confirmation, which I like.
00:56:08.120 - 00:56:47.100, Speaker A: Yeah. So I think there is some value in the user actually talking to multiple sequences or preconfers, and one of the reasons could be if there's a liveness failure. So let's say this first green one. Let's say there's only two preconfers in the look ahead. There's a possibility, let's say there's one in the 10,000 chance that this one's going to be missed because the sophisticated pre confer just happened to have an outage on AWS or whatever, then if you get a pre confirmation from the next one in parallel, then you're hedging your bet. And this second pre confirmation.
00:56:47.260 - 00:57:08.280, Speaker B: So, I mean something else, don't get it from both of them. If we have these two sequencers, can slot n plus 31 promise I will sequence everything that slot n plus one promised. So basically a collaboration of the sequencer to create like a continuous pre confirmation.
00:57:10.460 - 00:57:24.236, Speaker A: Yes, you can do that. Yeah. So even before n plus one has been settled and included, you can have conditional pre confirmations from this next pre confirm on what's already been pre confirmed here.
00:57:24.338 - 00:57:33.456, Speaker B: So you can go beyond the 30 million gas and just basically have the sequencers promise whatever. Again, it goes to economics and where the money goes.
00:57:33.638 - 00:57:41.970, Speaker A: Yes, that's a good point. Technically, if this guy has consumed his whole full 30 million gas, he can say, okay, I'm full, go talk to the next guy.
00:57:43.400 - 00:57:55.060, Speaker B: No, again, not what I'm saying. I'm suggesting that all the sequencer promise in advance that they will accept all the promises from previous sequences.
00:57:56.840 - 00:58:25.330, Speaker A: But then it becomes a bit complicated, because if there's a fault, like who do you attribute the fault to? It could be one of the two. So if these two preconfirmers want to opt in into a business deal and they trust each other, then. Yes, totally, 100%. But if they are mutually distrustful, then it becomes unclear how you do the slashing. But yeah, great idea. And I guess part of the design space. We're at the hour.
00:58:25.330 - 00:58:40.592, Speaker A: Sorry, that wig. But there is the post call discussion if you want to hang out. Thanks again to everyone and see you on the next call. Thanks, guys. Thank you.
00:58:40.726 - 00:58:41.436, Speaker D: Thank you, Justin.
00:58:41.468 - 00:58:47.110, Speaker B: Thanks, Justin. Thank you. Thanks, everybody.
