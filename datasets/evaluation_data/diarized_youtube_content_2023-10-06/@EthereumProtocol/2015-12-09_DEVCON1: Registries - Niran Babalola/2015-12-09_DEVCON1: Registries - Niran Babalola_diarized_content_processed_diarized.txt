00:00:19.340 - 00:01:03.280, Speaker A: All right. Hi, everyone. I'm Neeran Babalola. I've contributed some to the Auger project, and at, at consensus, I work on Gnosis, our prediction market platform. Like lots of other people in the room, I spent a lot of time thinking about how we can use this executable historical record that we now have to coordinate behavior in new and interesting ways. I'm speaking on behalf of Daniel Novi, my co worker at Consensus, who wasn't able to make it to Devcon. He's been building regis, which is a platform that allows developers to build registries into their applications, and it also allows non developers to create and interact with a variety of registries that they can configure and deploy through a graphical UI.
00:01:03.280 - 00:01:57.780, Speaker A: So registries are everywhere. Most people here have registered a domain name, but even more people have registered a car or piece of land with their governments. Corporations, for instance, purchase rights to public resources like radio spectrum and oil deposits from the government where it's registered there. These centralized registries are fine when they're run efficiently, but in so many places, they aren't. In Brazil, where Daniel's from, there are ten to 20 real estate registrars per city. So if you're trying to sell an apartment or buy an apartment, you have to track down the registrar that's associated with that particular apartment, go there, show up in person, prove to them who you are, so they can transfer the apartment from the old owner to you. It's not the best functioning property.
00:01:57.780 - 00:02:56.840, Speaker A: Registries are the foundation of tons of wealth building in our society. Without a land registry, it'd be risky to own land. Without a car registry, it'd be a lot easier for somebody to show up and steal your car without you being able to prove that they stole it. In societies where these registries don't exist or don't function well, these risks either have to be taken on by people who can't afford the risk, or they have to be offloaded to investors who get compensated for the risk, either by increasing the price of housing that people pay them or increasing the price of transportation that people pay them. Bad registries are yet another barrier that keep poor people poor, and these barriers are things we should destroy. We can use decentralized registries to bootstrap societies into the functioning social infrastructure for wealth building. And in areas that don't have this infrastructure ready, like the digital arena, we can also bootstrap it there so you can build digital wealth where you couldn't before.
00:02:56.840 - 00:03:59.640, Speaker A: So DAP developers have even broader registry needs than we experience in the real world, we have all these identifiers that often need names or owners. Etherex, for instance, needs to know what name and ticker symbol to use for arbitrary token addresses. The DAP store needs to let authors associate their DAP name with the client URL and other information about the DAP, but it also needs to have rules embedded in it to make sure that the names are unique and the rules for determining who can actually register a name are set out in stone. A general purpose wallet needs to know what tokens exist. You have to know which tokens to check the balances for to be able to display them in a wallet. And if you can look them up in a registry, you have that information available to you. In general, registries map a key to one or more values with rules that establish who can control a particular key.
00:03:59.640 - 00:05:08.110, Speaker A: If you think about the token transfer APIs as the rails for fungible property registries are the rails for non fungible property like physical objects or names, and for those physical objects, the ones that you would put locks on are especially useful for registries. For instance, slockit so Regis is a tool that Daniel Novi has built to create, watch, and interact with registry systems. Once a registry has been created, you can explore it to see which values have been set in the registry, and you can create new entries in the registry yourself. Regis lets you choose the parameters and behaviors for the registry you're creating. For instance, how are keys allocated? Do the keys expire? Different use cases have different requirements, and Regis lets users and developers set those requirements on their own. Using those requirements, Regis generates a solidity contract that you can then deploy to the network, and it adds itself to a master registry of registries. So people who are trying to discover registries have a place to look to find them.
00:05:08.110 - 00:06:19.740, Speaker A: Some commonly needed registry behaviors that Regis lets you specify are key expiry key auctions to avoid squatting on unique key names and feed distribution behavior that allows either the creator or existing key owners to profit from the new auctions that are established on the system. So in addition to the standard english auction where all the bids are public, there are two other auction types that are implemented to make bids private in different ways. There are sealed bid auctions that make the bid price private, and there are hidden key auctions that make the key that's being bidded on private. Both of these avoid bidding wars in different ways. Sealed bid auctions encourage bidders to bid the price that they're willing to pay up front, and they also hide the information about what price is being bidded so you can't react to other people's bids and cause that price war to happen. Sealed bid auctions sorry, hidden key auctions avoid bidding wars on new desirable keys. So if I'm trying to register the username neuron in a registry, I don't want all the other neons out there to notice and bid up the price.
00:06:19.740 - 00:07:12.210, Speaker A: I don't think I'm actually going to run into this problem in practice, but this would solve it. So Daniel has put together a two minute video walkthrough of the Regis UI. It has some text narration on the video that I'm going to read out loud and hopefully this all works out. So Regis is a platform for building and deploying registries into the Ethereum network. Creating a registry is very easy. You just enter some basic parameters, include some optional and advanced ones, and click on deploy. As you change the parameters, a solidity contract is built automatically for you.
00:07:12.210 - 00:07:52.960, Speaker A: After clicking on deploy, you just have to wait. And there you go. Your registry is alive. You can also save the contract to your local disk or estimate the gas consumption to deploy it. All parameters have a very descriptive help message. On advanced parameters you can enable three different types of options for keys. You can choose which address you want to deploy your registry from, an address from your local node, or an address from a light wallet.
00:07:52.960 - 00:08:53.020, Speaker A: You can also search registries by name, deploy your address, or by type tag. Type tags are specified on registry creation. Search results show some basic information about each registry. You can click on a registry name to see more details, and you can see all the auctions that are taking place in the registry and also send bids for active auctions. This table lists the current records of the registry, and if you're the owner of the registry, you can kill it. You can transfer ownership of the records you own or delete them. You can estimate the gas consumption for all operations and that's regis.
00:08:53.020 - 00:09:28.030, Speaker A: So thanks for listening Daniel, and I hope that you guys find Regis useful as you build your dapps that can gain value from adding registry to them. Sure, you guys can definitely ask questions. I didn't write the software, but I know a lot lot about it so I might be able to answer them. Any questions? Cool? Well thank you Naran.
