00:00:00.520 - 00:00:49.556, Speaker A: Then let's begin. And I'll be able to DM Lukasz with the presentation details if you would like to add anything specific. All right, so currently the idea is to give a brief overview of what simulate does and then to focus on particular implementation details core developers can potentially struggle with so that they would know what to expect and where to look at. And this is a draft presentation. I would very much like your input and your comments, however like rough they would be. It's good. It's good to update it as we'll present it on Friday, so we have quite a lot of time to change it in any way that you would see fit.
00:00:49.556 - 00:02:01.082, Speaker A: All right, so if simulate is a new RPC method that we want to introduce to allow users to have have ability to mock multiple blocks and multiple sets of transactions on fork, basically forks of a chain that is happening now or happened sometime in the past or would happen sometime in the future, we allow users to take any block header they want to start from, set what kind of blocks they want to create with what amount of transitions, transactions, what those transactions should actually do. Users also allowed to set state overrides. They can override states for contracts, they can override states for accounts. And states are not the only thing they can override. Also they can override pre compiles so they can redirect them and change them for some other code they want to use. Basic idea and use case for it is that you want to see how a contract would react in some amount of time or some amount of blocks from now. And to be able to actually do that.
00:02:01.082 - 00:03:13.660, Speaker A: Currently you have no utilities besides spinning your own chain and doing some magic that would basically do same thing that we are doing here. But here we are trying to do this in more professional and integrated way so that everybody on any client would be able to simulate and mock what would happen on chain if. And then there is this large if where user can define what transactions, what balance changes, what state overrides would happen during these blocks. Every block can have state overrides and every state override can change basically anything that happens on the chain and is stored on the chain. So it enables much more than we currently have with this call. It allows users to get the mock that they always wanted from the system. And the only application that is running and available now that we found was this beautiful intercept demo.
00:03:13.660 - 00:03:53.290, Speaker A: It allows you to swap to see what would life be if you would become, for example, Vitalik Buterin or somebody else with like a lot of money on their wallet to be able to. Hey Lukasz. So we are doing a presentation draft discussion today. The idea is for you all to see the presentation that is currently created. It was based on killarizone and it is expansion of it. It is focusing for ethereum core developers, probably. So all the input would be greatly appreciated and we will have four days to update it.
00:03:53.290 - 00:04:51.460, Speaker A: So yeah, basically the interceptor is a nice application that allows you to feel your feet in the feet of some other users, to feel how it is to have a lot of money on chain and to play around with contracts so that they would think that all the transactions that you are performing with them are real. So basically it allows you to mock, not test chains, but mock what happens on the real main net of Ethereum. And that is great. So implementation details in simplified form, we take users input in form of a parent block. He wants to utilize his desired state updates. We create a header. After that state updates and with the parent block in mind, we utilize desired user transactions, fill them in, test them.
00:04:51.460 - 00:06:08.090, Speaker A: If it goes all right, we fill the block with them and we process a block and commit a new state and we go through a loop. This is basically would be nice if it would happen only for one chain of thought. That usually happens on the Ethereum mainnet, but in our case this shall happen for every user that is calling our RPC every time. For every user we basically fork the chain, create a new spin up from the chain that lives only in memory. It takes that block as base and all that happens after that is this like sub chain, a branch of a tree, you can imagine it, something like that, that happens and possesses whatever a user wants to do on the chain. And it's basically turning Ethereum client into something like a multi tenant application, which can allow many universe versions like a multiverse. So it's quite fun from the system design standpoint in at least our client, and I'm representing Nethermind, I'm one of the core developers that were developing this feature and is currently supporting it.
00:06:08.090 - 00:07:14.618, Speaker A: Simulate and our design philosophy was relying on two basic pillows. First one was on disk databases, and the second one was in memory temp storage, which contained freshly blocks not yet synchronized onto hard drive. It contained a lot of stuff that was basically not synchronized until some event happened or some amount of blocks were like chained up. To be ready to fill into the hard drive. Overlaying on top of those kind of databases is sometimes hard. So one shall note the fact that you would need to, for every like catching mechanism that is not persisted, you would need to have an overlay that allows read only access to the base overlay and write access to the temporary storage that is created on top. So overlays all over.
00:07:14.618 - 00:07:38.690, Speaker A: All over the place. And secondly, the important thing is to be able to have the storage cleaned up after the RPC have finished because everything is single use, basically. So you create for a particular user this branch that he can play around with. Yes, yes, please, Lukasz.
00:07:39.270 - 00:07:56.504, Speaker B: So this goes potentially a bit deep into nethermide internals, which will be probably a bit different for other clients. All right, graphs. It will be somewhat similar.
00:07:56.672 - 00:08:00.376, Speaker A: Yeah. Graphs are simplified, like in comparison to real life.
00:08:00.568 - 00:08:05.736, Speaker B: Yeah, but I don't think they are simplified enough. I'm not sure if they can simplify it enough.
00:08:05.808 - 00:08:06.420, Speaker A: Right.
00:08:07.300 - 00:08:09.320, Speaker C: Who is the target audience for this?
00:08:09.860 - 00:08:59.996, Speaker A: I don't understand 100%, but in my understanding it were Ethereum client developers. So the question there was that was asked to us, why are client developers working on it? So in my understanding, this is for other clients to start working in more prioritized fashion on this feature. So let me recite the message that was sent to us. We'd like to invite someone to talk about if multicall to provide overview client implementation and why client. If developers are working on this, sharing more about this ongoing meeting may get some contributors on board. So it is for developers, potentially.
00:09:00.028 - 00:09:10.196, Speaker C: And what I understood that they asked him why we are developing this, but didn't say like who is interested knowing that information. So it's. I don't think it's necessary for developers only.
00:09:10.268 - 00:09:11.276, Speaker B: What is the meeting you will be.
00:09:11.308 - 00:09:23.880, Speaker A: Presenting all Cordev as I'm not already invited. I don't know exactly, but when's the not all core devs? It will be on Friday, 1830.
00:09:24.220 - 00:09:32.496, Speaker C: Okay, Friday, I think it's recorded and it's hot in November. Automating. It's more of interview. That's how I understood it.
00:09:32.648 - 00:09:35.940, Speaker B: Yeah, it might. Is it like a pipe and eap or something similar?
00:09:36.560 - 00:09:39.740, Speaker A: Meh, who knows? No details.
00:09:40.960 - 00:09:48.616, Speaker B: No. I'm not sure if this is more for core developers that will be implementing this or is it more for developers that will be using this?
00:09:48.768 - 00:10:03.128, Speaker A: Oh, well. But looking at the message that was initially sent to us, sharing more about this ongoing meeting may get some contributors on board. So it is to get on multicore.
00:10:03.304 - 00:10:04.700, Speaker B: Who send that message?
00:10:05.560 - 00:10:07.904, Speaker A: Pooja? Rajan, Ranjan.
00:10:07.952 - 00:10:12.976, Speaker B: Okay. Okay. Okay. Yeah, I would ask her a bit more about then.
00:10:13.168 - 00:10:17.656, Speaker A: Perfect. Directly and we'll simplify the graph.
00:10:17.808 - 00:10:20.440, Speaker B: So basically you have DBS, right?
00:10:20.600 - 00:10:23.394, Speaker A: So this format is more readable yeah.
00:10:23.512 - 00:10:40.410, Speaker B: Yes, I think this was correct. Yeah, this is very good. And that you need to keep the state of blocks. And keep the state of the state. So the accounts and storage between those blocks. That's important. Right.
00:10:40.410 - 00:11:09.662, Speaker B: But this internal, how do you do? It's not important because this is very different between, well, not very, but somewhat different between the clients. So the important part is that there's some state that is in memory that's fine. And that is being kept between blocks so that it's a loop. Right. And we keep some state between blocks, which is something new in RPC that haven't been done until now.
00:11:09.846 - 00:11:57.952, Speaker A: All right, we'll focus the attention on that in the RPC part. And there are EVM updates. We update how users can override precompiles and redirect precompiles. And this means that there is a chance that your client, EVM would need to be updated. Not every time, but there is such a chance. A user may override precompiles with their own code and to move them to their user defined locations. This allows complicated scenarios when a user, for example, has a mock that sets a set of conditions just right for a specific call to walk and open a wallet, and that would open only one particular wallet automatically.
00:11:57.952 - 00:12:39.578, Speaker A: And for other cases, it would use the default schemas and default precompiles. There are RPC updates and it is one of the few methods that is focusing on object as a data structure that is required for a user to operate it. There are more than 100 new hive tests created by Kalari. Thank you Kalari and flashbots. And users can run transactions in two modes. They can run transaction in validate on mode and invalidate off mode. Validate off mode is more similar to what you get with Iscol and validate off mode.
00:12:39.578 - 00:14:20.270, Speaker A: Sorry, invalidate on mode is more similar to what you get when a transaction comes to a client and is getting ready to be validated and passes through all the rigorous checks and requirements that a real transaction that shall be posted on a block shall pass through. There are set of parameters that we initiate and that are sanely defined so user haven't have no like if user doesn't know what parameters shall be, we will try to set them up correctly so that his transaction would pass the validation by default, but it is not forced. And to summarize, we present a new RPC method that allows forking or mocking and other kinds of experiments on Mainnet chain so that mainnet chain is not affected, but users can simulate whatever they want on it. It is quite far in terms of functionality from Iscol because it brings a lot of new things to the playground and it is potentially usable for immediate research, contract testing and complex unchained simulations without consequences. With this I give you a link to if simulate and thank you all for listening. So this is the draft of the presentation to present on Friday and I will share it with like with everyone who would share an email and we'll all be able to edit it.
00:14:20.930 - 00:14:27.370, Speaker B: Two things for me, some examples of usage of if simulate like with multiple blocks, right?
00:14:27.490 - 00:14:36.774, Speaker A: Yeah, yeah, we definitely need that because the only one we had was in the beginning and it was outdated because it was using is multiple.
00:14:36.942 - 00:15:21.320, Speaker B: But I'm not even paying the JSON RPC showing JSON RPC but showing an intent. How can it be used? What we can achieve with this and a bit more detail with the example of precompile overloading. Why do we want for example your code wants to unlock something or calculate something. This is mainly useful at the moment for this precompile because it's only the. I forgot which one, the curve precompile, whatever that's called. We don't really see it being useful for others, but we developed a general mechanism for this, right?
00:15:22.140 - 00:16:01.410, Speaker A: Yeah, and in my understanding, basically this application highlights how it's used, but we definitely need to provide the mechanism of how it is actually taking part on chain and where the actual precompiler is called. We'll add a slide and an image to it. Kalari if you have specific examples in mind or special highlights that you can share in forms of either hive test or just JSON input for simulated would be great. And same for sina. If you would have anything interesting like specific, it would be lovely.
00:16:02.150 - 00:16:08.330, Speaker B: Some more questions for me. Would you guys co present or is it only Oleg presenting or what's the deal there?
00:16:09.910 - 00:16:17.010, Speaker C: I got a channel on Friday so it would be Oleg only. Unless we want to move it then I could also.
00:16:18.750 - 00:16:36.080, Speaker B: Like I was saying, Oleg has a good technical knowledge and technical background which is also good to share. But Ukulele or Mica have a better like user oriented view of this feature, right? So it might be good to understand.
00:16:36.160 - 00:16:45.544, Speaker C: What is the kind of target audience for it. It would be more developers or more clear stuff. Then it would be more better in a way that Oleg but if it's more in a way user facing then.
00:16:45.672 - 00:16:46.896, Speaker B: I think it's me and my guide.
00:16:46.928 - 00:16:48.248, Speaker C: Away are more user facing.
00:16:48.384 - 00:17:02.620, Speaker B: I expect it will be more general community and by developer I wouldn't expect only core developers, but also application developers and users of this. So that's my guess. But that's my guess.
00:17:03.240 - 00:17:07.100, Speaker A: Yeah. If it is for users, we'll definitely need somebody from your side.
00:17:09.280 - 00:17:16.900, Speaker C: If it's that, then you should ask that. And then I'm busy on Friday, so like for example, Monday would work.
00:17:18.690 - 00:17:24.750, Speaker A: Yeah, let's ask her and see what she would tell us about it. Yes sir. Please.
00:17:27.890 - 00:18:13.110, Speaker D: Regarding the current presentation, I don't know if this might change depending on the audience, but I had two small points. One is that I think you can add a new page potentially for validation mode. It felt a bit out of place in the talking about the hive test and all, everything at the same time. And I think there is like some things that you can talk about here. So it definitely, I feel like it deserves its own page. The other thing that I wanted to mention, right, something that Kilari mentioned in the chat, which is definitely useful, especially for users, is the logs. I don't remember if we mentioned that during the presentation.
00:18:13.230 - 00:18:17.040, Speaker A: Yeah, we haven't. And this is like specific feature. Yeah.
00:18:19.620 - 00:18:29.092, Speaker C: I would also. You introduced yourself in the middle of the presentation. I said more that in the beginning that you introduce yourself yourself there and then.
00:18:29.276 - 00:18:38.880, Speaker A: Yeah, we can like post like the beginning slide from somewhere listed.
00:18:39.340 - 00:19:13.200, Speaker C: I would introduce the 8th symbol. It's like 8th call in a way that other people might be understanding that you are sending batch transaction, which is kind of not the case, but we are just doing the simulation. So we try to introduce it kind of very similar to ETH call, except it can do more stuff. And in a way it kind of replaces the eth call. It can do more stuff than eat call and all the same stuff that ethnhub can do. And then I would introduce those new features which are listed in the chat, like those five things which are kind of like the big things that are new in the hip.
00:19:13.240 - 00:19:13.820, Speaker A: Right.
00:19:18.160 - 00:19:32.180, Speaker C: But yeah, then I will start morph this into presentation that I had in the already. So I don't want to make it exactly the same presentation that we had.
00:19:32.480 - 00:19:59.400, Speaker A: Yeah. So yeah, we'll add that and we'll know if this presentation is focused more on like developers or on the, on just on the core developers or on every developers, like general own, the users. And yeah, that would allow us to move forward. All right, so thank you guys. Yeah.
00:20:01.180 - 00:20:02.760, Speaker D: There'S a type one here.
00:20:03.500 - 00:20:10.760, Speaker A: Yeah, I'll check it and edit it and we'll give access to everybody. Okay.
00:20:11.140 - 00:20:19.520, Speaker D: And I still, I still have one small comment. It was regarding the chart on page seven.
00:20:20.380 - 00:20:22.164, Speaker A: All right. Yep.
00:20:22.332 - 00:20:25.800, Speaker D: And here I think you have a loop.
00:20:26.460 - 00:20:27.280, Speaker A: Yep.
00:20:27.820 - 00:20:48.210, Speaker D: I think the loop should go, um, to fill header, basically. I don't know how to mention it, but, um. The parent block part or the just after. Or maybe I'm just misunderstanding what means parent block. Is it the base block or what is it?
00:20:48.870 - 00:21:02.638, Speaker A: Yeah, that's the tricky question about this chart. Because after the first, like first round, the parent block becomes whatever we processed and generated. And so it is the parent block.
00:21:02.814 - 00:21:08.366, Speaker B: Yeah, but that makes sense to have a separate start block that it doesn't look to just the beginning.
00:21:08.398 - 00:21:25.520, Speaker A: But we can maybe somehow highlight that it is like a start block, not just a general parent block. Because every parent block happens like in the circle, each thingy. And this is just once start block. Yep, we'll do that. Thank you.
00:21:29.700 - 00:21:51.770, Speaker D: No, I was, I mean, I guess this would depend on the audience, but I was wondering if we should mention something about blocks, block numbers that are skipped. Like the former phantom blocks. But honestly, I'm on the fence about it.
00:21:53.190 - 00:22:13.152, Speaker C: For example, I would be interested in knowing kind of internally how nether might and get are doing the Ed simulate. But then I don't know if that's the audience that are interested in the internal stuff or not. But yeah, for example, I would be interested in having a presentation about the internals on how those things work. But.
00:22:13.176 - 00:22:15.340, Speaker B: Yeah, yeah, but it's you.
00:22:17.320 - 00:22:19.024, Speaker C: That's why it depends on the audience.
00:22:19.192 - 00:22:23.660, Speaker B: In my opinion, it's not useful for any audience to have two deep internals.
00:22:24.280 - 00:22:25.780, Speaker C: I'm audience of one.
00:22:26.400 - 00:22:35.896, Speaker B: Yeah, but okay. I mean, public audience. I mean, it's not for you. But even for developers, I doubt they would take too much.
00:22:35.928 - 00:22:53.304, Speaker A: Yeah, because whenever they would implement the on their own, they would have different troubles, different architectures and different languages. So it won't map directly, but the concepts should be presented somehow. And in general, we should draw a tree somewhere.
00:22:53.352 - 00:23:03.500, Speaker D: I think, Larry, whenever you want to understand the internals, you will get a presentation for. Just like a private presentation.
00:23:03.840 - 00:23:04.660, Speaker A: Yeah.
00:23:06.470 - 00:23:08.530, Speaker D: Just ask and ye shall receive.
00:23:09.110 - 00:23:10.570, Speaker B: Just read the code.
00:23:12.390 - 00:23:15.330, Speaker C: I've been trying it sometimes, but quite complex.
00:23:16.350 - 00:23:17.130, Speaker B: Yeah.
00:23:19.230 - 00:23:39.646, Speaker A: Some. This was so simplified. So simplified. But we need to simplify it even more. Yeah, we'll do that. All right. And on other notes, I'm finishing the block overload gas pricing and I broke my git.
00:23:39.646 - 00:23:50.670, Speaker A: So sadly, it will take at least one more day because we were trying to do some security update like all of the Netherland. And it sucks. Sorry, guys.
00:23:50.830 - 00:23:52.610, Speaker B: Actually, I made it work. So.
00:23:53.070 - 00:23:58.766, Speaker A: Yeah, you can make it work. But after I started my computer, my git stopped working.
00:23:58.918 - 00:23:59.702, Speaker B: Okay.
00:23:59.846 - 00:24:06.320, Speaker A: So now I can't, like, clone anything that is on, like, private repos. And that's sad.
00:24:07.020 - 00:24:07.900, Speaker B: Okay.
00:24:08.060 - 00:24:13.360, Speaker A: Yeah. All right. So any other news?
00:24:17.420 - 00:24:31.930, Speaker D: Not much from my side. I did not do any work on a simulate this week or the last week, just that my team will probably start looking into it soon. So.
00:24:37.150 - 00:24:39.250, Speaker C: Yeah, I don't have any updates either.
00:24:40.470 - 00:24:46.210, Speaker A: Lukas, would you ask Pooja yourself or shall I do that?
00:24:47.990 - 00:24:52.930, Speaker B: It would be great if you can ask. You can add me to the conversation. Maybe you are.
00:24:53.390 - 00:24:56.170, Speaker A: I think we'll just ask in this simulate channel.
00:24:56.520 - 00:24:58.752, Speaker C: Oh, asking there. Yeah.
00:24:58.936 - 00:25:00.808, Speaker B: Okay. Yeah. So please ask.
00:25:00.984 - 00:25:02.540, Speaker A: Yeah, we'll do that. All right.
00:25:02.960 - 00:25:10.980, Speaker C: I don't know if that's beeping even or is there some other YouTube channels that they are doing, but that's also one option. What it could be.
00:25:13.080 - 00:25:25.000, Speaker B: Sorry, I wasn't aware that this is on the. Okay. Someone to talk about. Multicore provident claim to.
00:25:36.940 - 00:25:43.600, Speaker C: I don't think poacher is running the people either, but I don't know if he. If they are recruiting people.
00:25:51.630 - 00:25:52.038, Speaker B: Okay.
00:25:52.054 - 00:26:00.570, Speaker C: I'm asking also, is it just that interview or that presentation or are there. Is there somebody asking questions or kind of. What's the format as well?
00:26:07.150 - 00:26:07.598, Speaker B: Yeah.
00:26:07.654 - 00:26:11.130, Speaker C: And how long it needs to be that other one of questions from.
00:26:37.120 - 00:26:40.780, Speaker A: Yep. All right, so do we have anything else for today?
00:26:44.850 - 00:26:45.990, Speaker C: I don't think so.
00:26:47.490 - 00:26:48.530, Speaker A: All right.
00:26:48.690 - 00:26:51.030, Speaker C: Do you think you can get the new version out soonish?
00:26:52.170 - 00:27:15.480, Speaker A: I'll do my best, but I think tomorrow is more or less realistic. Yeah. All right. Okay. And when you'll post your emails onto chat, I'll be able to share the presentation with you guys. Thank you.
00:27:17.020 - 00:27:17.420, Speaker B: Bye.
00:27:17.460 - 00:27:18.880, Speaker C: Thank you. Bye.
00:27:19.300 - 00:27:20.020, Speaker B: Thanks. Bye.
