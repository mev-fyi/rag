00:04:22.250 - 00:04:43.326, Speaker A: We should be live. Good morning, everyone. I. This is all core devs execution layer now, number 153. A couple of things to cover today. So first, obviously, updates for Shanghai. So testing devnets.
00:04:43.326 - 00:05:16.602, Speaker A: Then there were some updates on the withdrawal route and how the withdrawals would be represented in terms of units on the El. I'm pretty sure we got all of those details agreed upon, but just want to make sure we go over them. Then there was this interesting EIP around announcing a deprecation for self destruct. That's worth covering. And then a couple more things. So, last call or two calls? No last call. Sorry.
00:05:16.602 - 00:05:53.160, Speaker A: We made the decision to remove EOF from Shanghai itself. It wasn't clear if we wanted to make it CFI for Cancun. Already some client teams had signaled that yes, but we couldn't get everyone to agree. Then I had a proposal for how we should actually go about organizing the next upgrade and then a couple announcements and that will be it. But I guess to kick us off, I see Perry, Barnabas, you're both on the call. Do either of you want to give an update on Shanghai Devnets and where we're at there?
00:05:54.570 - 00:06:25.550, Speaker B: Yes, sure. I'm not sure if you can hear me well. Yeah, so last week we have deprecated Devnet two and launched Devnet three. Devnet three is currently running, and we have a starting page for it. I posted in the chat. Everything seems rather stable. I've now included all CL and EL teams, and everyone is able to use the gray instead of the way conversion.
00:06:25.550 - 00:06:27.890, Speaker B: So that's very good.
00:06:28.040 - 00:06:28.642, Speaker A: Nice.
00:06:28.776 - 00:07:15.158, Speaker B: Another quick update. I would like to begin Devnet four next week sometime midweek. And we would need all client teams, all SiLA client teams to have the BLS pools implemented and working so that each client team could actually post a BLS update before Capella to their local pool and hopefully gossip it once Capella hits. That would be test, and it would also be a larger test with about 500 or 600,000 validators. So we can actually test diversity scenario with 310 or 330,000 liters. Key change before Capella.
00:07:15.354 - 00:07:16.100, Speaker A: Nice.
00:07:18.310 - 00:07:24.370, Speaker C: And on Devnet three, are we also sending exits as well to get those withdrawals coming through?
00:07:24.520 - 00:07:24.930, Speaker B: Yes.
00:07:25.000 - 00:07:25.438, Speaker A: Cool.
00:07:25.544 - 00:07:38.078, Speaker B: It just takes a long time. I just triggered two exits this morning, but I'm using the main net stats or the main net settings on it. And the main net settings are quite slow.
00:07:38.194 - 00:07:50.826, Speaker C: Okay, gotcha. And in terms of doing any of that manual testing, sometimes it's good to send exits and let them get fully exited and withdrawable before doing a BLS change because that does a slightly different code path.
00:07:51.018 - 00:07:54.640, Speaker B: Oh yeah, that we done in previous devnets already.
00:07:55.570 - 00:07:56.560, Speaker C: Thank you.
00:07:58.370 - 00:08:35.062, Speaker A: Nice, thank you. So just to follow up with ban business updates, also had a shadow fork earlier today. We used the same config, the same client versions and the same spec versions as we had on Devnet three. All client pairs were perfectly fine. The only one that I wasn't able to get working yet was Eric on, but purely because it didn't sync in time and we wanted to make sure we have an update for the call. But I will try out Eric on later on and give an update on that. We also tried the BLS changes there and I did trigger a withdrawal.
00:08:35.062 - 00:09:10.230, Speaker A: Both look good. We've also set up nodes to do a mainnet shadow fork and the plan is to have the main net shadow fork on Monday. And yeah, we're going to reuse the same config that we have this week. So yeah, that's, I think the updates on the shadow fork side. And I posted a message yesterday on the interrupt channel about delaying the public testnet until after the shadow fork is done so that we can focus on bugs during the interop time and not focus on user support as mentioned by Paul.
00:09:11.210 - 00:09:11.622, Speaker D: Great.
00:09:11.676 - 00:10:12.132, Speaker A: And just to clarify, the shadow fork today was on Gordy, right? It was on support, yeah. Okay, interesting, nice. Any other testing or development updates from the client teams? Okay then I guess we already sort of touched on this. We briefly covered it on the CL call, I believe. But we made a change in both the execution APIs and on the withdrawal EIP to use Guay as the unit of account for withdrawals to match the Cl. Alex had two prs to this, so PR three, five, four on the engine API, 6325 on the EIP. It seems like our client teams have implemented this already.
00:10:12.132 - 00:10:15.830, Speaker A: I don't know, Alex, is there anything to add beyond this?
00:10:18.120 - 00:10:45.580, Speaker E: I don't know if there is. It was a pretty simple change just to use units of Guay. And yeah, I think all the clients, I know all of the clients have implemented the code and yeah, it sounds like it's even on Testnet already. So I think we're pretty good here. There is one other ER for the deeper change to have withdrawals be sort of full FSC, but yeah, that's something people can look at, but I think should be a future conversation.
00:10:50.180 - 00:11:05.360, Speaker A: Okay, and just to clarify, where did we land with the actual route? So we're using Guay on the El right now, but we're still encoding it with RLP or are we encoding just the withdrawal route with SSD to match the Cl route?
00:11:07.780 - 00:11:11.956, Speaker E: Yeah, still using RLP. So we just changed the units of the amount.
00:11:12.138 - 00:11:23.050, Speaker A: Okay, got it. And my read was we don't want to do more than that because of Shanghai being pretty much done.
00:11:24.060 - 00:11:36.030, Speaker F: That doesn't align at all with what. I remember this call last week. I thought we were going to get some specs out so we had something more concrete to talk about today. And then we're going to make a change today because there's a lot of disagreement last week.
00:11:36.640 - 00:11:39.600, Speaker A: Right. Some specs for the way to way.
00:11:39.670 - 00:11:44.384, Speaker F: Change, which they did do specs for that and specs for.
00:11:44.502 - 00:12:07.696, Speaker C: Yeah, it was to do specs for both. The conversation was heavily leaning towards way only my interpretation, but to at least voice based on the complexity of the SSC specs and people thinking about it a week. My read is to not do it, but given the conversation of last week. But I am very open to hearing.
00:12:07.728 - 00:12:09.144, Speaker F: Other people's input at this point.
00:12:09.262 - 00:12:44.180, Speaker A: Yeah, and Alex actually had a draft PR for this as well. I'm not sure how final it is. I just posted it in the chat. So I guess. Does anyone on the El side feel strongly we should go that route and make the change to SSD? I have a question. Are we talking only about changing the route or anything else too? Only the route, I believe, yes. Okay.
00:12:44.180 - 00:13:36.890, Speaker A: So never mind. We're experimenting with generating the root and I think Marek had success today with actually being able to generate the root from our SSD library correctly. Yeah. So we get the same results like Ethereum js and some consensus reference tests. So we are a bit more confident about our library now than we were a week before. But still, if we want to change something, I would change only withdrawals route and do not douche transaction route or receipts route. Yeah, I think everyone was pretty much on the same page to not change anything beyond the withdrawals route if we were to change anything.
00:13:36.890 - 00:14:05.970, Speaker A: And even that, I think there was some concerns to make the change kind of disslate in the process. But on the other hand, if we don't. Okay, most people. Sorry, Micah. Yeah. On the other hand, if we don't use SSD right now, then we're going to have to change it in the future. But realistically, everything else is also going to change.
00:14:05.970 - 00:14:50.460, Speaker A: Sorry. Speaking for Ethereum Js, we are ready to move to SSZ root for withdrawal. So I guess. Yeah, there's comments in the chat about not changing anything. Unless this is like a safety issue, I would also lean towards making as few changes as possible now, unless someone really wants to make this change and otherwise we can move to ssding more things in future upgrades.
00:14:51.520 - 00:15:09.620, Speaker F: I don't think Marius is here, but I do feel last week I believe and may have changed his mind since then or might have misinterpreted his position was if we change to gway, we should also do the SSE route. We should not do just the gway change. And he seemed to feel pretty strongly that we do both or neither.
00:15:10.200 - 00:15:28.860, Speaker A: I asked him about this and he said that because the majority of other clients felt that they did not want to do SSD, but they still wanted to play that he was okay with it. Also, I'm not putting words in his mouth, but this is what he sent to me when I asked him. That's why I merged the pr to execution APIs.
00:15:32.950 - 00:16:28.050, Speaker F: So I will once again stage my pointless objection that I really think that it feels like this change we are not thinking about the long term health of Ethereum, we're thinking about how do we do what the public wants today. And I feel like as core devs, our job is to think about the long term health of Ethereum and not capitulate to people's logging and demands for I need withdrawals this week. I think that doing the right thing means not adding technical debt that we know is going to be technical debt in like six months. And if Cancun we switch to SSZ routes, that means we've got literally one fork where we have to deal with forever. The fact that we had withdrawal routes as RLP and that's going to live with us till the end of time. And the cost of fixing that is maybe delay withdrawals by a week or two. And that feels like a very obvious win to me.
00:16:28.050 - 00:16:38.600, Speaker F: If the thing we care about is the long term health of Ethereum, if we care about just giving investors what they want, then sure, give them withdrawals right now. But I really don't think that's what we should be optimizing for.
00:16:39.770 - 00:17:27.974, Speaker C: And I agree with the sentiment, but I'm not confident that we know what we want the design to be in Cancun. I think that we generally think we should be moving the transactions route to SSD, but we have not done the diligence even know. I could not confidently say that that's actually what we're going to do because there is an alternative. The alternative is that we hoist the rop routes into the consensus layer to handle the light client use case that we want here. And without doing the transactions diligence, I can't say for sure that's what we're going to end up landing on. Because there's a lot of things, there's potentially applications that will break on chain. There's lots of tooling that we might break because we can't do that.
00:17:27.974 - 00:17:45.850, Speaker C: I feel like landing one way or the other on withdrawals, assuming that we want these things to be unified and operate in a similar manner. I'm not confident that we're going to land on one or the other in Cancun.
00:17:47.970 - 00:17:48.830, Speaker A: Andrew.
00:17:50.610 - 00:18:28.060, Speaker G: Yeah, I think kind of slightly implied to fixing or like switching to SS zero. In Cancun, I think currently withdrawals route is not terribly exposed. The amount unit is much more exposed to tools and withdrawals route. So even if for some historical blocks it uses a different algorithm, I don't think it's too bad a thing. It's some kind of minor technical issue to my.
00:18:36.590 - 00:19:03.380, Speaker F: So to comment on Danny's comment, I thought, and maybe I'misremembering, or maybe I'm projecting. I thought there was agreement a while back that we were going to like everybody on the Yale team kind of agreed that SSD the Yale blocks eventually. And it was just a question of when did I misinterpret that or did that change?
00:19:03.910 - 00:19:55.220, Speaker C: That could certainly have been stated, but two weeks ago when thinking about the pressure to change the transactions now, it definitely alighted the fact that there are changes there that will have impact on users that we have not done the diligence to understand yet. And so even if that is the agreement, we've still not done the process of like, hey, what does this break? And really made sure that it's done, if it's certainly to be done, to be done in a proper way. An appropriate. Yeah, I can't speak to exactly. I think there's a general sentiment that that's the direction we want to move in because it's a better commitment. But changing things has costs, as you know.
00:19:57.270 - 00:19:58.210, Speaker A: Thomas.
00:20:00.570 - 00:21:14.730, Speaker H: So I feel that there was a sentiment towards SSZ, but the go towards SSZ is much larger change than simply the one that we're discussing now. So while if you're talking, Mike, about the introduction of technical debt, I think that our review of RLP versus SSZ will be so significant when we look at it to clean it. And the process of thinking was so significant that this technical debt that you're referring here to will be simply a small thing comparing to the amount of changes. So the uncertainty now, in the delay, like delay itself for the sake of better long term network would be very convincing. But this particular change, the SSDRP, I think will be a larger process of thinking, of designing. And I wouldn't like the designers to rush now thinking of how to solve the SSDRP in this particular place. Like the researchers or all of us, I would prefer us to look at it holistically and give ourselves a proper time, starting with this conversation in the process of preparation for Cancun.
00:21:21.990 - 00:21:39.420, Speaker F: And this is for both Thomas and Danny. That position you guys both hold is assuming we only do ssdification of the withdrawal route in Shanghai, not transactions or receipts. Is that correct?
00:21:42.590 - 00:22:11.000, Speaker C: Correct. But my point being is the doing of the withdrawals route is premised upon kind of that being the common solution to handling these couple of routes. And we don't know precisely how we will handle the other route, even though we have an intention on how we will handle the other route. So doing them together seems appropriate to me.
00:22:13.050 - 00:22:27.100, Speaker F: I guess I assumed that the consensus teams had already kind of thought about this a lot and solved it and the Els would follow. But maybe that's, from the sound of it, maybe that's not the case and we want to rethink just how we're doing.
00:22:28.590 - 00:22:56.850, Speaker C: Yeah, it's less about selling to me, it's more about, one, how do you handle the transition? Two, the technical things that rely upon this transactions group. And when we disable something like self destruct, we spend some time figuring out what's going to break and try to make some sort of cost analysis on moving forward with it. And we have not done that on the transactions route.
00:22:57.270 - 00:23:27.878, Speaker F: Yes, I agree with all that. I agree that the transaction route requires significant thought. Same with the receipts route, because they already exist. They have the past. I think the thing that I'm confused on with your argument, I think I'm just missing something, is withdrawals route isn't out there. So there's no backwards credibility in the El yet. And so if we just do what the Cl does, like, are you worried that if we did what the Cl does today in El and we got that out in Shanghai, are you worried that we later want to change how withdrawal routes are encoded in the El and the Cl?
00:23:28.064 - 00:24:11.420, Speaker C: I'm worried that we then have two different ways that doesn't fix kind of one of the core problems that we're talking about here, which is how light clients insert execution payload headers into the execution layer. And so then, although we do kind of patch the withdrawals route. If we never change the transaction route, then we'd also have to hoist the transactions RLP route into the consensus layer. And so now we have kind of like a very mismatched solution on doing that. It doesn't necessarily get us the first step on the common solution. And so I'm hesitant to say it's like the appropriate path at this point.
00:24:12.030 - 00:24:20.220, Speaker F: Your hypothesis is that there is a potential future where we do RLP in the CL instead of SSD in the.
00:24:21.950 - 00:24:52.840, Speaker C: Yes, and there's, you can either compute it in the CL or the engine API could return that value. But either way then you have kind of like the mismatch handling of roots, which is not the end of the world. But then you have also SSV in the execution layer and RLP in the execution layer, depending on which route you're looking at. I kind of think fix this in one swoop in a unified design and handle the damage at that point.
00:24:53.370 - 00:25:06.490, Speaker F: I think your argument, I think is compelling. If we start with the assumption that there's not consensus that we're moving the EL to SSC, and it sounds like that's where you're coming from, is that you're not super sure the EL is going to move to SSE.
00:25:07.250 - 00:25:17.150, Speaker C: Yes. I do not understand what will break when we migration. So I couldn't throw my hat in the ring one way or the other until I understand that.
00:25:17.300 - 00:25:17.758, Speaker B: Right.
00:25:17.844 - 00:25:27.090, Speaker F: I think I was coming from the assumption that we had already agreed to do SSC and the EL, but if that is not the case, then I do find your argument compelling.
00:25:27.430 - 00:26:37.406, Speaker A: Okay. And there's a bunch of support in the chat for moving things all at the same time to, you know, earlier we were saying we'd rather not make these changes to Shanghai unless they're quite critical. So I think it makes sense to just move forward with RLP for now, keeping the GUI as a unit, and we can discuss ssding all the things for Shanghai or sorry for Cancun or later, because I know like years ago when we discussed this, there were talks about putting SSZ on the peer to peer layer first, because this way you still have the previous versions running in parallel. There's less of a risk than switching all the consensus stuff. So I think it's worth having that conversation. But for a later fork and going forward with RLP for Shanghai. Does anyone strongly disagree with that? And light client has a comment.
00:26:37.406 - 00:26:51.410, Speaker A: We should make sure application developers understand this, though. I'll shill our community call tomorrow, 15 UTC, where we can start talking about this stuff with the broader community, Andrew.
00:26:52.150 - 00:27:01.458, Speaker G: But is withdrawals router exposed, like, especially the rop withdrawals router exposed at all to dev developers?
00:27:01.554 - 00:27:03.110, Speaker A: It's in the block hash.
00:27:04.410 - 00:27:09.802, Speaker G: Yeah, but still they can't access the withdrawals route itself.
00:27:09.936 - 00:27:19.680, Speaker A: They could create a proof to the withdrawals route, which I'm guessing that they'll want to do so that they can verify certain withdrawal systems are working.
00:27:21.410 - 00:27:44.022, Speaker C: Yeah, I would suspect that is the case. For example, some of the liquid staking derbitas might use that route to figure out distribution of payouts or something like that. But they also be warned heavily that things might change. I think most people will generally understand that header commitments are going to likely change.
00:27:44.076 - 00:27:56.166, Speaker F: But correct me if I'm wrong, but the withdrawal route has to be exposed because if it's not, then no one can validate a block. It's part of that block header and it needs to be known in order.
00:27:56.188 - 00:28:00.778, Speaker C: To, I think also is exposed within the EVM is the question too, which.
00:28:00.864 - 00:28:01.660, Speaker F: Oh, is.
00:28:07.570 - 00:28:10.400, Speaker C: It has to be by virtue of the block hash being in there.
00:28:15.730 - 00:28:50.054, Speaker A: Okay. And Ethan said in the chat he's going to volunteer to draft a full sszing eip for Cancun. Yeah. Cool. Okay, next up on the. Yeah, just to close this out property. So last call we had discussed, Ethan actually is pr about adding the XRe tri routes for the list and execution payload headers.
00:28:50.054 - 00:29:32.854, Speaker A: This is obviously not going to happen because we're using GUi as a unit. So I just posted that on the agenda. But yeah, just so people are on the same page there. Okay, next up, self destruct. So we've discussed on this call many times for many years, deactivating self destruct through many different ways. We still haven't landed on an actual technical solution that everyone is happy with, but somebody wrote an EIP to basically announce that we would deprecate self destruct. So the Eip, it's 60 49.
00:29:32.854 - 00:30:11.266, Speaker A: I put it in the chat here. It doesn't make any code changes, so it doesn't require clients to write any change in behavior. But it's more like a deprecation announcement. And so I was curious whether people thought we should include this in Shanghai. So basically saying that as of Shanghai, self destruct is deprecated. Again, the on chain code would not change, but you could imagine this being a way to alert the ecosystem of it. And programming languages can start to give deprecation warnings when this happens.
00:30:11.266 - 00:30:53.006, Speaker A: Things like etherscan or inferr alchemy can start also warning users that know the self destruct is now deprecated and will be going away, or at the very least changing in behavior sometime soon. So yeah, curious what people think of this. I saw Guillaume and Dancrad both raise their hands. So, Guillaume, you want to go first? Oh, Guillaume, you're still. Can you hear me? Yeah, we can now. Okay, cool. Yeah, there's already an EIP 4758 that is actually doing the modification.
00:30:53.006 - 00:31:44.658, Speaker A: What I don't understand about this EIP is, why would that be part of Shanghai if there's no code change announcement? Yes, that's correct. But people pay attention. A lot of people only pay attention to the hard fork blog post and then stop paying attention until there's another one of them. So for example, say we include like 47, 58. A lot of people will be like, wow, this is the first time I ever hear that self destruct is going away and they'll be very mad about it. So this is kind of a way to let people know that the EIP itself doesn't say it'll go away necessarily, but that it might also have a significant behavior change. Okay.
00:31:44.658 - 00:32:10.314, Speaker A: Yeah, if it's just about a blog post announcement. Okay, fine. Yeah. You're saying people will only watch if there's a hard. And I do think that it makes it easier for, say gets to log a warning when it happens, for solidity, for viper to log a warning when you compile a contract with self destruct. Right. It's like something that all these tools and developers can point to.
00:32:10.314 - 00:32:21.150, Speaker A: To know we're referring to this, and this is why we're giving you this deprecation warning then, crabs.
00:32:23.090 - 00:33:14.346, Speaker I: Yeah, so I strongly agree with finalizing that vip and marking it as final or whatever that is the process. I same thing as Guillaume. I don't think it needs to be included in any particular hard fork. So ultimately, I think what you're saying is just that we want to include it in the hard fork blog post, which I think is probably a good idea as well. But I don't think it really is associated with any hard fork. And yeah, what I want to say, some people criticized with Efe because they were like, oh, but there are alternatives that don't deactivate it at all. But yeah, I think in any case, the change of behavior is significant enough that one, it doesn't make sense for anyone to use self destruct now, and probably it also won't make sense to start using it after EdIs.
00:33:14.346 - 00:33:26.530, Speaker I: It's basically just a way to somehow do something for legacy applications. So I still think with any option that's on the table, it makes sense to first market as deprecated.
00:33:27.750 - 00:33:29.650, Speaker A: Thank you, Thomas.
00:33:30.950 - 00:34:10.370, Speaker H: Hey. In strong support of this EIP, a creative way of making sure that we have a clear indication for our tool builders to deprecate, to warn. I think it's been discussed and generally agreed on that either change or removal of self destruct would happen. And showing it in an official way might improve the way we communicate such drastic changes for the future. In the past, I think that communication was one thing that the users are complaining about, that the aips were promoted, but when the change was happening, creating this two stage process seems to be a good improvement.
00:34:12.230 - 00:34:52.140, Speaker A: Okay, does anyone disagree with was? Yeah, there was one argument against it. Denkrad, you sort of hit on it. I don't know if it was in the Alcordev's channel directly, but people saying basically there was another proposal like EIP 61 90, that's a vertical compatible self destruct that might not require any significant changes to it. I don't know if anyone has a strong opinion about.
00:34:52.290 - 00:35:09.968, Speaker I: Well, that's actually not true. I mean, it's still a huge change to self destruct that it would not clear the contract storage database. We just hope somehow that all the contracts that currently use self destruct in some ways aren't affected by that, but it has actually made a change in behavior anyway.
00:35:10.134 - 00:35:26.230, Speaker A: Okay. Yeah. Then I think I'm convinced because EIP, yeah, 60 49 doesn't say it's necessarily going to go away, but that there'll be potentially future behavior changes. So I think that's still included. Okay.
00:35:28.620 - 00:35:31.112, Speaker F: Worst case scenario, we can just re enable it later.
00:35:31.166 - 00:35:57.648, Speaker A: Yeah. Right. It's better to deprecate it and undeprecate than to tell people too late. Okay, I can add it. So I guess the two places that I would add it is like the Shanghai spec with the other eips that are listed. So as people kind of click through those, they'll see this and then obviously any announcements we make of the upgrade. Yeah.
00:35:57.648 - 00:37:05.828, Speaker A: Any other thoughts, comments on this? Okay, so that was it for Shanghai. Okay. There was another thing we sort of discussed last call and didn't quite get the resolution on. So we agreed to move Eof out of Shanghai and then I put up a PR to remove it from the spec and Andrew from Aragon was asking if we should move it to CFI for Cancun Ethereum. JS felt the same and I believe Besu as well on the chat, but I couldn't quite get like a plus one from everyone so does anyone object if we make the EOF eeps that were previously included in Shanghai CFI for Cancun? Doesn't mean we have to do them, but it just kind of adds them to the. Yeah. Okay, so I'll take this as no objections.
00:37:05.828 - 00:38:33.930, Speaker A: I'll do this pr. I'll do this pr right after this call then. Okay, talking about Cancun, I put up a thread on Eth magicians about this a few days ago. But basically, I think when we were doing Shanghai, when we were doing the planning process for Shanghai, there was a lot of people who shared a bunch of feedback about how we should consider different stakeholder groups in the community. What's like the right role for all core devs? What type of conversations and decisions should happen here? And basically, how do we make this all work? I think one thing that sort of comes up a lot is the decision around relative prioritization of eips and higher level planning. So we do a pretty good job on the call of discussing individual eips and their pros and cons and their technical details. But I think when it comes time to figuring out what's the overall scope of the fork and what should that look like between two eips that the community wants, which one should be prioritized? Those are all conversations that end up being a bit more awkward on this call and where different groups want to express their preferences and are not too sure how to engage with the process.
00:38:33.930 - 00:39:41.310, Speaker A: I think one thing I would like to try out to kind of address this is that as we plan these upgrades, we also open a thread on ETH magicians to kind of discuss what the upgrades, priorities and scope should look like. And then obviously, because it's stressed on EtH magician, anyone is welcome to contribute to it. And we can kind of discuss what comes out of that thread on this call as we're planning the upgrade. And this is kind of a way to avoid every single project having to send a representative here and having the short time on this call kind of taken up by a bunch of people who come and share their one preference for a fork. We discussed. I think, Micah, you actually had proposed this a long time ago as a discord channel, like a temporary discord channel that would appear when we're planning your fork about that. And I think east magicians is a bit better of a platform for this in that it's a bit of a slower pace and people can put more thoughtful updates there.
00:39:41.310 - 00:40:34.404, Speaker A: It's also like a nicer record of how the decision or what inputs kind of came into the decision. Yeah. So I guess how do people know where to go? I guess we would mention it on this call, can link it on the agenda. Yeah, basically the same way that people know where to go to propose an EIP for a hard fork. So I think we can link it at a bunch of places. Is my short answer there? Yeah, I guess. Any thoughts, comments about this? Okay, if there's no position, I think what I would do is I would try it for Cancun again.
00:40:34.404 - 00:41:24.290, Speaker A: I can open this like today as we're starting to kind of discuss it so people can start chiming in there and yeah, we can see how it goes and whether we want to keep doing it for future forks. That's pretty much all we had on the agenda except a couple announcements. Was there anything else anyone wanted to chat about that we didn't cover? Mike, I don't know if you came off mute or not. Okay. Doesn't seem like it. Okay then two quick announcements. First, we have the first Shanghai Capella community call tomorrow at 15 utc.
00:41:24.290 - 00:42:06.286, Speaker A: So people listening to this. And then if folks from some client teams want to show up, we'll basically give a quick overview of the fork, tell people what's in it, how it works, and then answer their questions. People always enjoy when there's client teams who can answer their very specific client questions. Yeah, so we'll have that. Second. Pooja and the cat herders have put together a survey around execution layer client diversity. So obviously in the past year we've spent a lot of efforts on the cl side trying to improve client diversity there post merge.
00:42:06.286 - 00:42:29.740, Speaker A: It's also quite important that we improve the el side of things. So we're going to reach out to node runners and operators to better understand kind of which kind to use, why to use them, and what are things we can do to improve diversity there. And lastly, the KZG ceremony is happening. Trent, do you want to give a quick update on that?
00:42:30.910 - 00:42:56.334, Speaker D: Sure, yeah. It's been mentioned a few times on previous calls. It's a prerequisite for protodank sharding. I won't go too deep into what it actually is, but just if you're interested in learning more, go to ceremony ethereum.org prerequisite for dank sharding and protodank sharding. And everyone is encouraged to participate. It's open for the next two months.
00:42:56.334 - 00:43:11.320, Speaker D: We have a grant round available if you want to dig in a little bit deeper, write your own implementation. So encourage everybody to go check that out and contribute, because it's an important building block for future Ethereum infrastructure. Thanks.
00:43:12.010 - 00:43:13.000, Speaker A: Thank you.
00:43:16.570 - 00:43:21.100, Speaker F: If the queue stays full for the entire two months, is there a plan to extend it?
00:43:23.470 - 00:44:43.410, Speaker D: So it's definitely been saturated these first few days. It's dropped a little bit, which is a good sign. Eventually we will have to end the ceremony and choose a final output. Basically, this first two month period is open contribution, so anybody can just roll up, sit in the lobby as long as they'd like, but we will at some point switch to special contribution, which is bespoke implementations, special entropy generation, things like that. And then we plan to revert to another open contribution period for basically as long as we can, until relatively close to cancun or whatever network upgrade is scheduled for. But at a certain point, yes, even if the queue is full, even if it gets saturated even more than it is now, we will have to end the ceremony at a certain point, and that may happen when there are still people into queue. So if you're worried about this, I'd recommend tracking it, trying to get in as early as possible, and getting that out of the way if you want to make sure you have the most trustless contribution and that you actually are included.
00:44:48.860 - 00:45:13.920, Speaker A: Sweet. And I guess one more small thing. We mentioned this on Discord, but just as a heads up, there's no Cl call next week and we'll have an El call two weeks from. Yeah, anything else before we close. Okay, well, thank you very much everyone, and talk to you all in two weeks.
00:45:14.450 - 00:45:17.450, Speaker C: Thank you, thank you, bye bye.
00:45:17.530 - 00:45:19.120, Speaker A: Thank you, bye. Thank you.
