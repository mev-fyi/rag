00:00:15.770 - 00:01:14.654, Speaker A: So thank you everyone for coming. And as this is a developers conference, I had planned to do the developers rant, but I've been informed I'm not sweaty enough. So my name is Ming Chan. I am the new executive director of Ethereum foundation as of August 1, and I'm very pleased to be able to give an introduction to our chief scientist and creator, Vitalik Buterin, our lead go developer and co founder Jeff Wilka Vilka and Dr. Gavin Wood, our chief web3 architect and lead c plus plus developer. So if you could all give them a hand, I'm very proud of that. So without further ado, we have a very full schedule.
00:01:14.654 - 00:01:53.840, Speaker A: I'll go ahead and let Vitalik start, and in the spirit of our kind of autonomous, decentralized technologies, I have not been able to pin down exactly what they're going to say, but I'm sure what they will say will be of great interest and value. And it'll be an open format, so you will be able to ask some questions. Thank you. I did want to say at the end of the presentation, Alex Vandersand, our lead designer, will be talking about mist and wallet on the blockchain. Thank you.
00:02:17.740 - 00:03:56.956, Speaker B: So this is a live example of why decentralized Internet technology is useful. Okay, fine. So I guess what I'm going to start off with is basically start off the conference by talking about Ethereum's future. So, project has been around now for about two years, minus six or seven days, since I first wrote the Ethereum white paper. And since then it has gone through very many iterations, going from the very first version, which very, very quickly and effectively coded up way back in those days in Miami through ten proof of concept iterations, a crowd sale, a Defcon zero, which consisted of a rather small event consisting of all of the Ethereum developers huddled together in an office in Berlin. Finally, after 16 months, the launch of Frontier back at the end of July, and here we are now, three months after the frontier launch, fairly close to homestead. So what comes after this? So the first thing that I think a lot of people have been waiting for is when exactly is Homestead going to come? So the sort of simple answer to this is hopefully fairly soon.
00:03:56.956 - 00:04:55.310, Speaker B: The more sort of elaborate answer is that originally when we came up with that whole schedule, with the four stages, we had that idea back around March 1, when we actually thought that frontier was going to launch in a much more kind of raw form and probably with a network that doesn't work quite as well and much earlier and much more minimal. Instead, for a bunch of reasons that ended up not happening. We ended up launching frontier quite a bit later, and so we're at the stage where most of the pieces, almost all of the pieces that we had expected to be around at the time of Homestead basically are around. So the go client was launched, made available at the end of July. Since then, the C Plus plus client and the Python client have both gone through security audits. The version 1.0 of C Plus plus has, I believe, been released very recently, I think it was last week.
00:04:55.310 - 00:05:52.016, Speaker B: And AFSA has done a lot of, and others have done a lot of wonderful work on getting the wallet, which is kind of like the very first sort of minimal, what's going to end up being the very first kind of minimal viable product for mist out and that's available for people to use already. So the sort of milestone that we're waiting for before we can launch Homestead is basically the milestone where the entire ethereum network, miners, all of the sort of critical stuff works without serious hiccups, without interruptions, for four weeks. So it's basically just a counter, keeps on incrementing. And at some point there have been issues with the network. The most recent one has been that fork, because of a block hash issue that we had around two to three weeks ago at the end of October. So if all goes well, homestead theoretically should come fairly soon. But of course anything can happen.
00:05:52.016 - 00:06:34.172, Speaker B: Technical issues are what technical issues are, and we'd rather launch Homestead when we're actually confident that the network is safe, instead of sticking to any particular deadline. So after that, Metropolis, that's going to focus on mist. Beyond that, there's four primary research directions that we're taking for 2.0. So the first one is Casper, the proof of stake algorithm. And that is something that VlAD is going to be talking about, actually immediately after this. So from a sort of philosophical standpoint, there's no reason why we can't consider Vlad part of this keynote, because everyone else is presenting here anyway. The second part is scalability.
00:06:34.172 - 00:07:29.164, Speaker B: So scalability, this idea of coming up with a blockchain that can scale much larger than existing chains, essentially by processing transactions in parallel, and by moving away from this paradigm where absolutely every single node in the network has to process every transaction. So there are a number of different ways to do that. We'll be hearing about quite a lot of the different strategies from many people throughout this week, but it is, I think, probably the single technical thing that's right now holding blockchain technology back from mainstream adoption even more so than anything else. ZK stark integration. So this covers the other big problem with blockchains that makes it unsatisfactory for at least some use cases which has privacy. So companies, they're interested in blockchains, they love blockchains.
00:07:29.212 - 00:07:29.484, Speaker C: Yay.
00:07:29.532 - 00:08:47.096, Speaker B: It's the new buzword. It's the future. Wait, you're saying we have to publish each and every one of our transactions to a public database that could be read by our competitors? So the question is, how can you have the benefits of the transparency of the public nature of the blockchain without compromising your privacy? And there's this wonderful area of cryptography called zero knowledge proofs that basically is able to somehow magically, using a bunch of algorithms involving mathematical transforms on binary circuits, do exactly that. So we've been talking to some of the groups that are developing ZK stark technology. There is a project called Zero Cash that's going to be coming out fairly soon. That's basically going to be putting ZK starks into a bitcoin like cryptocurrency in order to provide much higher degrees of privacy. But then there's also many other applications of privacy, ranging from things like proving that you are a reliable and trustworthy person by some kind of reputation metric or some kind of identity registry system without actually revealing what your specific name is.
00:08:47.096 - 00:09:51.832, Speaker B: And sort of figuring out applications of that and figuring out how to integrate that into Ethereum is one of our primary focuses. Finally, number four, upgrading the Ethereum virtual machine. So a lot of the design decisions that we had at the time, such as 32 byte registers, memory stack, all the sort of really low level details, came up with that back at the beginning of 2014, when the design requirements looked much simpler than they are now. So initially, I thought that Ethereum was a thing that would be used for people to write simple financial scripts. As it turns out, people are writing stuff like Auger on top of it. And so figuring out how to really make the virtual machine more efficient is also something that we're going to be discussing this week. So with that, I think we're going to move on to Jeff and Alex.
00:09:51.832 - 00:09:56.060, Speaker B: We're going to be giving their updates and talking about the wallet and mist.
00:10:20.300 - 00:10:59.730, Speaker D: Hey, guys. So for those of you who don't know, I'm Jeff. I am the original author of the go implementation. And what I would like to talk to you about today is the roadmap for Go Ethereum itself. Because most of you are running go Ethereum, or you know it as geth. It has most part of the current network, which is something that the whole team needs to address because we need to get some more diversity. Hopefully Gavin can speak about that, perhaps in his update on c.
00:10:59.730 - 00:12:03.304, Speaker D: So one of the first thing that we need to address is, sorry, that's the wrong slide, is splitting up Geth. So currently it has two components. One of them is the node and one part is the client. And as it stands currently, today it's more or less one and the same. And what we want to do is we want to split out the two components into a node and a client, because a node is nothing more than just a system in which you can interface, in which you can subscribe certain subprotocals, like Ethereum. Just going to drop the microphone on the floor, sorry, I was giving some feedback. So, for example, one of the subsystems could be Ethereum itself, whisper swarm, or the light client, something about that later.
00:12:03.304 - 00:13:37.910, Speaker D: And the other part of the application is the client itself, something that Dapps would interface with, something you can, like the current RPC that we have today, something that we really want to split up because we see it as two different domains. And with that in mind, we want to address some of the issues that we have with the interfacing. I know that there's more people wanting to directly interface with the core itself, and as it is today, I wouldn't say it's impossible, but it's difficult. And we want to address some of the documentation, we want to improve on that. We want to make it more clear for developers on how to directly interface with the client itself, with the core API. But on top of that, we want to supply people with an abstract layer, such as a new IPC channel, something that we're hardly working on, working hard on, sorry, not hardly working on, working hard on. We want to change some of the components because what we have now is more of like you pull data out of the client and it's difficult for the client to give feedback to a DaP itself or an application.
00:13:37.910 - 00:14:28.856, Speaker D: And it kind of burdens the node with so many requests because, for example, if you would like to subscribe to a certain event, you tell them, I want to subscribe to an event. And then you need to keep polling for data. You have to keep asking, hey, do you have new data for me? So instead of that approach, we want to change that around. And you want to say, well, you subscribe to an event and instead of asking for data all the time, you're just going to wait. You're going to. Just going to wait and sit there until the nodes are going to tell you, well, here you go, here you have the data and do something with it, and off you go. So that's one of the things that we would really like to address in the upcoming months, so that we can make it a bit more easier for developers to directly interface with the node and have native application, because that's really what it is.
00:14:28.856 - 00:15:06.688, Speaker D: This is not for people doing HTML dapps. This would be more for developers developing for IoT devices or phones, smartwatches, like low, low end devices. But as it is today, it's going to be quite difficult putting a full node on a watch. And that's where a light client comes in. There's going to be a presentation in the upcoming days about the light client itself. So I won't go into too many details, but I just want to briefly touch on the stuff that we will be. How are we going to handle the development of the light client? One of them is.
00:15:06.688 - 00:15:49.456, Speaker D: So we're going to do it in two stages. Stage one would be a developer preview. It's kind of like just for us, so that we can check whether it's viable, whether it actually decent, whether it works, whether it's something that the community would like to have. And this will be developed as a separate subprotocol. So it's going to be separate from Ethereum. It's going to function obviously on the same chain, but it's going to have its own subprotocol registered to the node, as I described earlier. And one of the things that it can do for now is simply state querying, which means that you can get balance, you can get the code, you can get certain state information about a contract, but that's about it.
00:15:49.456 - 00:17:02.710, Speaker D: So there isn't much else than just querying for data and validating that the data that you got from the remote node is actually valid. Now in stage two, it's actually going to be a lot more interesting because that would be more of the full blown light client you would expect in which you can do transaction sending, so it actually becomes useful. And one of the other things would be log filtering and bloom lookups, because without those going to be pretty impossible to do a dap on a light client. Now George is going to give you a whole lot more in depth information about that, and it's going to be somewhere this week. I don't think it's today, is it Wednesday? So he's going to give you a more in depth explanation about the light client and the setup of it. One of the other things that we're going to be addressing is the core refactoring. Now, this is something has already started, and there's an ongoing process that will happen for at least, well, probably six months time, but it's going to go slowly and it's an iterative process that we will have.
00:17:02.710 - 00:17:39.396, Speaker D: Now, one of the first things that we want to do is we want to address the validation process. So what we have now is the validation and the processing of blocks are intertwined. They're one of the same. And if we want to tweak something or we want to change something, you need to address a whole bunch of other code. And we want to clearly separate the two from each other. So this is going to be especially developed for Casper, because Casper is going to require several other different components. We want to simply switch out the validation or the processing and put something else back in place.
00:17:39.396 - 00:18:24.476, Speaker D: And as a side effect, it actually becomes quite easy to develop your own private chain with your own custom rules. So perhaps, for example, if you want to lay down and network in your own company or an organization, you can take the code, you can switch out the validation and the processing. I mean, obviously you need to be a developer to do that. You need to develop your own rules. But if you want to take that apart and implement some other rules, then you can do that quite easily. But that's a nice side effect. And the other thing that we've been working on, and this functions more as a foundation for the future of the EVM, which is the JIT EVM.
00:18:24.476 - 00:18:59.832, Speaker D: So this is not to be confused with the JIT VM that was done in C by Powell. This is something that was developed in go itself. Kind of what it does. It analyzes the code in the contract. It takes it out and kind of like looks at it, analyzes it and tries to put it in a different language so that it can be more easily understood by a machine. And because of that process, it can analyze certain segments of the code and look at it and say, well, here we go, we've seen it before. We can optimize it, we can run it quicker.
00:18:59.832 - 00:19:36.344, Speaker D: And this is going to help with the scalability for the processing, for the processing part. Now, all of the optimizations haven't been done, so it's only the foundation on which we can build and optimize further. So we don't want to do this now, because that would be premature optimization. It's something we don't like to do. Sorry. The other thing that we want to touch on is the improvement on a code coverage. I have to give a bit of an explanation on how we started this whole process from POC one.
00:19:36.344 - 00:20:27.816, Speaker D: It has been an iterative process on improving the code and changing the code and then trying out new things. And because of that, we kind of been sloppy on testing. That means that some parts of the code are simply left untested. And thankfully, Christoph came along, and he has been developing a generic JSON testing suite, which it works like an end to end test. So you shot some data and you get a result out, and all of the clients need to pass those tests. If they don't, then it means there is a consensus issue, but it doesn't test the specific parts of the entire chain. So some parts are, while being tested by the end to end test, we can't really test those specific little parts in the chain, and that's something that we do want to test.
00:20:27.816 - 00:21:18.650, Speaker D: So we want to write some implementation specific tests for the Go Ethereum implementation. So what we have currently using the state tense is a 51% coverage. So this is only using the JSON tests. And we have been writing the go test itself, which covers about 65%, but we need to get that up to at least 80%. Now, the test that we wrote for the VM itself, so this is just the execution part, that's about 60%, 80% because the JIT VM. So when you run the test, you only test one of the two implementations. So you either test the bytecode VM or you test the JIT VM, and therefore it's 60% because some part of the code is not being touched when you use the bytecode or your way around.
00:21:18.650 - 00:22:02.250, Speaker D: And the last thing that I want to, want to touch on this is something that is already implemented, something that was done by Peter, is the fast synchronization process. I have to say, quite impressive, and I do have some. I won't go into too many details on how the fast synchronization works, but I do want to show off some statistics about it. So, on the frontier net, on the time of when we conducted the testing, it had about 360,000 blocks in the chain. I think it's about half a million now. So using normal state processing, where you start at zero and you go all the way to 360, took about twelve minutes, which is 1.6gb of data.
00:22:02.250 - 00:22:45.808, Speaker D: Using the fast sync, it's two minutes and 235 megabytes. But it's still the frontier net. There are not many transactions, so it's quite difficult to really fully understand how fast it really is. So we took the Olympic network and unfortunately we didn't have the full chain so we only had a file that somebody exported and uploaded in. A Bittorrent file was about 840,000 blocks when we processed. It took about 4 hours. Now maybe some of you remember how incredibly tedious it was to catch up on the Olympic network, especially with an arm device like a raspberry PI.
00:22:45.808 - 00:23:10.590, Speaker D: It was shit. It was awful. But on an I seven it took 4 hours and seven minutes, 28gb of data. And using the fast synchronization process it went down to 31 minutes and only 3.8gb of data. So that's quite a significant improvement. So that's like 4 hours versus 31 and that's pretty awesome.
00:23:10.590 - 00:23:22.530, Speaker D: So that was it for the update. I think we're going to go into a presentation by Alex. Thank you very much.
00:23:34.980 - 00:23:39.690, Speaker C: You can put back on the screen. Thank you. So thank you everyone.
00:23:43.740 - 00:23:45.050, Speaker D: It is not working.
00:23:46.220 - 00:24:33.320, Speaker C: Okay, so I'm going to talk about this epic battle between the blockchain and the user. So we've been talking about blockchain so far. We will talk it the whole afternoon and we will talk the whole week and we will keep talking about it after that because it's a very powerful idea. Build unstoppable applications, software that cannot be censored, contracts that can't be meddle with. It's a very powerful idea. But like our ideas, if you want them to be successful, they need mass adoption. And to get mass adoption you need to aim and for a very elusive and mythical creature that we call them the average user.
00:24:33.320 - 00:25:00.812, Speaker C: Probably the most boring superhero ever invented. The problem with the average user is that everyone has heard about it, everyone talks about him, but no one ever knows who he is. I mean, who is the average user? Is it my mother? Is it your grandfather? It's certainly not my mother. My mother, she worked with Adsense code all day. She's a smart cookie, so she's not it. Maybe it's your father. That's the problem really with the average user.
00:25:00.812 - 00:25:32.140, Speaker C: He is never really a single person. He is only not a lot of people. For example, I know for a fact that the average user is not a developer. And that's what Ethereum has been so far. Tools for developers, command line tools, libraries, very complex tools for building apps. And we want to change that. So we want to get to the next average user.
00:25:32.140 - 00:26:25.084, Speaker C: But again, who is he really? So in the 80s when the computing revolution was let's build computer for the masses, what the masses turned out to be were very geeky people who were working on word documents, spreadsheets and desktop publishing. That's hardly an average user today, but that's a user that still exists. Probably. It's the one that is. Everyone here in this room is one someone that can open up an application and run spreadsheet or run excel, or maybe we can call it the modern office worker or just a power user, I don't know. But I think that's one goal to have. That's the person that is next after the developer as a powerful thing.
00:26:25.084 - 00:26:51.332, Speaker C: So we are not going to make Etherion usable by your grandmother who plays candy crush on her iPad. At least we're not going to do that today. Today we're going to that office worker. And that is the current wallet that we've built. I fabian there and the whole go team. And so far, I mean, it's a nice wallet. You can see that you can keep your ether inside it.
00:26:51.332 - 00:27:15.596, Speaker C: You shouldn't be keeping ether in other people's sites. We added even a little converter so you can check the current conversion rate. So if you want to send exactly one dollars to someone, you don't need to calculate it. And I think that's cool. But we are a smart contract platform after all. So we need smart contracts, of course. So we are going to have one.
00:27:15.596 - 00:27:47.772, Speaker C: So the smart contract that it come with is multisig wallet. It's a multi shared wallet where multiple people can own a single money. So you have three people and you need two signatures in order to move money around. So let's call it our shared wallet. We are going to add three other people, but I think that's fine. But every bitcoin, every advanced bitcoin app has that. So we wanted to add a twist and we added this one, which is under a lower daily limit, let's say 20 ether.
00:27:47.772 - 00:28:20.588, Speaker C: You don't need actual all the signatures, so you just click create type or password and boom, we just created your first smart contract. That didn't hurt at all. And you can keep your ether there. There are the owners and let's deposit eater inside it, but I think that's cool. But we can do more than that. So we can also hold any kind of cryptocurrency based on ethereum that you view today. You can hold it both on your wallet and any of the smart contracts.
00:28:20.588 - 00:29:02.312, Speaker C: So loyalty points, so gold certificate, anything that you can create you could theoretically also keep with all the security of the blockchain. I think that's very cool. But what's the point of having other people coins or other people tokens? That's so far what we've known. So I figure out that maybe you should create, be able to create your own token. So you can go to the contracts tab and we keep an eye on all the contracts and you can click create and you'll be able to create your own contract. You just need to paste some code there. Oh wait, I thought that you told me that this was not an app for developers.
00:29:02.312 - 00:29:48.092, Speaker C: So why are we showing code there? That's a good question. My point is, I am not in the business of creating artificial walls between developers and the power users. And I have no interest in building artificial ceilings because there is no ceiling. I'm in the business of building ev escalators that help you go up if you want it. So the purpose of the wallet is actually to bridge the gap between the developer and the power user. So that if you want to learn more you can, if you want to develop you can, but actually you don't need it. And I hope that you grow outgrow our wallet and at that point you will be able to download, mix or something else.
00:29:48.092 - 00:30:45.176, Speaker C: But the point is you actually don't need, you can just fill the parameters on the right, ignore the code there and you'll be creating your little token. So let's just tell me what the supply is, what the name is, what the symbol is, and how many decimal places you want and you click ok and you'll be creating your token. You don't need actually to read the code, just copy it from our website or anywhere else, type your password and boom, we just create the token and Bob owns 100% of it. And I think that's very cool. But again, I think we can do more with that because what's the point of having yet another new token? What's the value, what's the utility or usefulness of having another token? So we're going to do something useful with it. And what we are going to do first, I'm going to distribute it around. I created Bob, Alice and Eve.
00:30:45.176 - 00:31:18.244, Speaker C: Now Bob is going to send 30% to Eve and 30% to Alice. So it's a 40 30% split. And what you are going to do is we are going to create a virtual organization that is a democratic organization that lives only on the blockchain, that can hold funds and use those tokens as a voting shares. So let's do that now. Okay, so you can see that Alice already has 30% of the coins. Now we go back to the contract. So you just click deploy contract, get the code that you got somewhere.
00:31:18.244 - 00:31:58.310, Speaker C: We are going to put 500 ethers inside that contract, which is already some real money. So you just paste it there and you fill in the blanks. You don't need to understand the code, just go there. We are going to deploy the democracy contract now. And now we add there on the share addresses, the address of the token that we just created a minute ago. And those are some other things like how many shares you need in order to vote, how many minutes you have to debate until you can execute something. We type your password and we just created, or let me see if it's ready.
00:31:58.310 - 00:32:25.932, Speaker C: There we go. We just created a new democratic organization that only exists on the blockchain. Let's rename it blockchain Unlimited. And you can click there. It will show all the public information about that company, which is the address of the token. And the other thing that we, how many proposals there are, how many minutes we have to debate it, how many shares you need. It's very simple actually.
00:32:25.932 - 00:32:48.310, Speaker C: You just need to read it. And on the left there you have all the functions that you can execute it if now. So let's create a new proposal. We have 500 eaters, how we're going to spend it. So first I'm going to propose that we send money for Eve, 200 eaters for the planning of a conference. Just click execute, type your password, and it's done. It's going to be loaded there.
00:32:48.310 - 00:33:26.508, Speaker C: So while we wait for the transaction to be confirmed, let's just create another few proposals for, let's say 50 ethers for Bob now for Alice or for Eve, for something else. Let's say ticket reimbursement. You click execute and you load it on the blockchain. So it's quite fast. Of course I'm not doing it live, but it's about how you would see it in real life. So the transaction hasn't been executed. You can see that one of them has already loaded there on the side here.
00:33:26.508 - 00:34:03.172, Speaker C: Let's create one last proposal, which will be for Bob sending money to himself for badge design, probably the most expensive badge we ever designed. Just type a password there. And if you wait a few minutes, you see that. Now we just wait a little bit until all proposals are loaded and you can click on the proposals number zero there. And if you switch it, anyone who's following this contract on the blockchain will be able to see all the proposals. So it's very transparent. Anyone watching can see that? And now that they are there, we can vote.
00:34:03.172 - 00:34:29.692, Speaker C: Voting is very simple. Again, you just type the proposal number you want, and if you support it, you click yes. And that's all you need to do. So you click execute, you type your password, and you click send. And now we are going to do a secondary vote. Let's say that Alice is also going to vote yes. And that means that those votes are being loaded on the blockchain.
00:34:29.692 - 00:34:51.256, Speaker C: That company only exists there, which is kind of fascinating. And you can see the number of votes has just been increased by two. They have been loaded. And now we are going to execute the proposal, meaning that the blockchain is going to count up our votes. And if the proposal passes, it's going to send the money. If it doesn't passes, it's going to keep the money. It's as simple as that, really.
00:34:51.256 - 00:35:12.108, Speaker C: So we're going just to execute it. And I now watch there just for a second. And the proposal has passed. The money has moved away from there to here. You can see that the proposal has passed. It's not open to vote anymore. And if you remember, Eve had only like, two eaters in the beginning of the presentation, Alice.
00:35:12.108 - 00:35:43.336, Speaker C: And now she has 200 eaters. And I think that's kind of fascinating. We just created a company that only exists on the Internet, yet it can hold real money and do real world things with that money, and it can hold shares, it can hold gold, it can hold anything you want. And I think it's fascinating. Maybe the average user doesn't think so. Maybe he doesn't care about all that. Again, like I say to you before, you never know who he is.
00:35:43.336 - 00:36:11.204, Speaker C: But he can only tell you who he's not. And apparently he's not someone who cares about smart contracts or peer to peer networking or anything like that. What he wants is he wants to save money, he wants to work better, he wants to be insured against disasters. He wants that the money for his children will be kept safe. And we can do that. And I'm going to tell you a little secret about this wallet app. It's not a single app.
00:36:11.204 - 00:36:48.572, Speaker C: Those are actually two apps. On the left here, we have mist. It keeps all the complexity of connecting to the network and signing everything. On the right there, you have just a website that connects to mest. That means that if your team can develop a website, then you can make a web application that you can distribute it. And since it's all open source, you can just put your app here and distribute it to various places. And actually, okay, maybe he doesn't even want that.
00:36:48.572 - 00:37:33.784, Speaker C: Maybe he doesn't want to download a bunch of apps. So what if instead you've just put a browser inside here and you can distribute those apps via the Internet? And that's what myth is. This is a real working product, a screenshot of the working product. If you want to see a demo, you can just ask us in private. We can do, but it's just everything that I've shown you, but with a browser bar that you can download and I think that's awesome. But is that enough? Is that having all those applications accessible via the Internet enough? I don't think so. I think we can do more than that because actually the Internet system kind of sucks today because it's centralized.
00:37:33.784 - 00:38:08.472, Speaker C: DNS can be censored and there are countries that don't have access to the Internet because of that. IP system can make things go down when they heard too many requests. All of those are centralized and the Internet is kind of broken. Luckily, if you care about those things, you came to the right place. If you stay here until the talk later you can see the apfs and swarm talk where you talk about how to make a web into a permanent web. Stay on the rest of the week. You see how we can replace the DNS system for register contracts and DAP stores and now of that.
00:38:08.472 - 00:38:26.890, Speaker C: And I think the point is that we can do more with Ethereum, but in order to do that, we need everyone here together, the kick people, the finance people, the power users, and we can build a better Internet together and we can fix the Internet and we can do it this week. So thank you for coming.
00:38:40.020 - 00:39:28.316, Speaker A: Thank you. Alex, also known as Absa. It's very special to have him here today because he's come all the way from Brazil to speak. But I would like to, since we only have five more minutes before our next talk, I would like Gavin will answer some questions for the next five minutes because actually he will be speaking quite a lot the rest of the week. Later today he will be on the scalability panel at 1115. On Wednesday he will be speaking about whisper at 01:25 p.m., Thursday Gavin will be on the Ethereum clients panel at 150, and then Friday Ethereum for dummies and also pathway to Ethereum adoption.
00:39:28.316 - 00:39:32.310, Speaker A: So Gavin, if you would come up. Thank you.
00:39:37.400 - 00:40:28.084, Speaker E: Yeah, thanks. Yeah, this is amazing. This is somewhat more marble and Woodham crystal chandeliers than the Berlin office where we had Devconzero. No, this is quality. It's brilliant to hear about the browser. It's really thinking back to January 2014 when we got together in Miami and kind of sketched out what we all thought Ethereum was going to be. And then later three months figuring out with people like this notion of web3 and how we can rethink how massively multi user applications are done and seeing it come together in such an amazingly professional way.
00:40:28.084 - 00:40:38.024, Speaker E: I mean, Absa and Fabian and the team, they've done amazing work from my.
00:40:38.062 - 00:40:38.650, Speaker D: Side.
00:40:40.460 - 00:41:39.788, Speaker E: Solidity seeing that come develop from what was essentially a sort of dream programming language all the way to where it is now. Thanks to Christian and the team for bringing that together. And yeah, in general, the CPP client is coming on, thanks to Pavel and Arkady doing amazing work on that. In terms of where we're going next, I think I probably refer to some of what Jeff is saying, certainly the turbo syncing stuff. But the thing I'm most excited about at this point is some of the refactoring I've been doing. I've recently given the client what might be sort of considered a heart transplant in terms of what needed to be done, but it's now complete. The client is largely a plugin based system.
00:41:39.788 - 00:42:34.092, Speaker E: Now, what this means is that much of the core logic is stored in dynamic libraries that can be placed together through a very simple JSON configuration file. What this means is that the consensus protocol is largely able to be constituted and swapped in and out. I foresee this as being a very useful thing for when we move to Casper. Ideally, it's designed such that the move to Casper is as simple as deleting ethash and typing Casper. That's certainly what we're aiming to. The Aleth family of applications have also been revamped. There's a new abstraction layer for each of them.
00:42:34.092 - 00:43:45.030, Speaker E: Some of you might have already seen Aleth one, the mining front end. There's also Aleth five coming, which is a very simplified holster for applications much the same. Ultimately, the idea being that it will be able to host mist and Alethira has been rearchitected into a plugin based blockchain exploration environment, which should go hand in hand with the core refactoring to make something that's incredibly flexible for doing all sorts of blockchain based development, trying out new ideas, and getting something from a simple sort of base set of assumptions right all the way through to something that's workable in industry. Yeah. For my talk, I'd kind of like to open up to questions. So if there are, I probably only got a minute or two left. But if there are one or two questions, then I'm happy to answer them.
00:43:45.030 - 00:43:48.742, Speaker E: Yeah.
00:43:48.876 - 00:43:51.698, Speaker B: What's your favorite Dapp leader you've developed.
00:43:51.714 - 00:43:53.240, Speaker C: Or that you've seen out there?
00:43:54.270 - 00:43:56.620, Speaker E: Well, Gavcoyne was pretty good, but.
00:43:59.870 - 00:44:00.138, Speaker C: To.
00:44:00.144 - 00:44:20.590, Speaker E: Be honest, I think having heard Christophe Yent talk about slocket, it's one of the things that really got me geared up to know. This is something that really could change the world. For those that don't know, slocket.
00:44:22.390 - 00:44:22.706, Speaker C: Is.
00:44:22.728 - 00:44:57.130, Speaker E: A system for, in principle, opening blocks via the blockchain. But the vision is somewhat more comprehensive than that. In reality, I think we can understand it as being a project that seeks to connect the blockchain to the physical world in a very general sense. And this is something that's kind of sorely missing at the moment from the frontier chain. We have the technology here, we've developed it. It's out there, it's in the wild, it's running. But so far, there isn't really that physical connection.
00:44:57.130 - 00:45:51.682, Speaker E: As we see people bring real world assets onto the blockchain, gold storage and so on. This will change things a little. But when we see actual real physical areas become unlocked by signed transactions, this is something, I think, that will really get minds racing. I mean, one can never really say where this stuff's going to go, because inevitably, when new technology comes along, we just try and liken it as much as possible to previous technology. We tend to develop things that we already kind of knew could be developed, and it takes us a good long while before we understand the true repercussions and what real sort of vistas are opened. So that's something I'm looking forward to, but I think it's something that's going to evolve over the next two to three years. Any others? No.
00:45:51.682 - 00:45:54.080, Speaker E: Okay, well, my time is pretty much up anyway, so thank you.
