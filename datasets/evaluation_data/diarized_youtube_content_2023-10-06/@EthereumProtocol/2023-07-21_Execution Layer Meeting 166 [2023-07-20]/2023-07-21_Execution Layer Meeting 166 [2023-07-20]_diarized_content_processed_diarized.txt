00:04:20.250 - 00:04:56.230, Speaker A: Welcome everyone, to acde number 166. So we have a lot of basically pr updates, reviews, and then there was some process stuff around the whole EIPRC conversation and then just a shout about naming the next upgrade, I guess maybe to start. Does anyone want to give an update on the state of Denkun devnets and implementations?
00:05:00.210 - 00:05:48.270, Speaker B: Yeah, I can go with that. We still have devnets have been up and running. We're updating the tooling a little bit, but Blobscan is supposed to work now. The issue is that it took so long to get it working on our infra that we've already started expiring the old blobs. Like the first couple of days of blobs have expired, so we can't index the beginning few days. And Blobscan doesn't support starting indexing at a later stage. So we wanted to ask which clients already support archive mode, and I think Teku already messaged with the flag that they use, so we're going to be doing that, but we can't do anything about Devnet seven, so we're going to have that for Devnet eight onwards.
00:05:48.270 - 00:06:27.050, Speaker B: Besides that, we did a tiny shadow fork of Sepolia this week. It doesn't really mean much because there's a very small subset of clients there, but it already brought out maybe one or two bugs in Genesis that we'll deal with. And we're still getting the tooling up, so we'll do like a bigger analysis of how things are going, how blobs perform there and stuff like that over the next couple of days. And I think in terms of the next Devnet, the first step is getting hive and getting all the client images in Hive. So only then would we start planning that next gate.
00:06:33.380 - 00:07:28.860, Speaker A: Awesome. Thanks. Do any of the client teams want to go into detail about some of the issues or they might have seen on their ends or like progress that they've made? Okay. If not, I believe we have the void four four call next Monday as well. So we can also spend time there and dig into the details and next steps around Devnet eight. I'd be curious to hear also from client teams, has anyone started implementation on the rest of Dencoon EIps? So obviously four four four is still the main one, but what's the general status for other ones? Marek?
00:07:29.360 - 00:07:33.516, Speaker C: Yeah, so from nendermind side, we implemented.
00:07:33.708 - 00:07:46.500, Speaker A: All of Eips and only we haven't merged yet for seven eight eight. But it should be merged soon to the master. Nice. Andrew.
00:07:48.440 - 00:08:35.956, Speaker C: Yeah, sorry, I'm on holiday. This week, but I'd like to say that we still are catching up on four eight four. Hopefully next week or maybe the week after, we'll be able to finish with 4844 and pass the five tests. We've implemented a couple of other eps, I think 1153 and one other with M copy. Was that M copy? Yeah, I think we have the Beacon state route in progress. I don't think we've done this self destruct yet.
00:08:36.138 - 00:08:37.110, Speaker D: Not yet.
00:08:37.880 - 00:08:50.970, Speaker C: But my question would be which eps do we want in Devnet eight? Like all of cancun eeps or maybe a subset? Besides for eight four four.
00:08:55.180 - 00:09:08.352, Speaker A: I was just on vacation as well so my memory might be a bit old here, but I believe we said we wanted all of them. But Perry maybe. Correct me if I'm wrong, yeah, we.
00:09:08.406 - 00:09:17.692, Speaker B: Wanted all of them and I posted a tiny link with what all of them means, like which commit to target, et cetera.
00:09:17.756 - 00:10:01.860, Speaker A: Awesome, thank you. Okay, Justin is making power progress on the stuff for eight. We have the beacon route in progress. We already have the updates to receipts to include data gas use and data gas price. However, I just noticed that PR has not been merged in yet, so if we could get that finalized that'd be great. Yeah, so pretty much same status. The beacon root stuff is in flight as well.
00:10:02.230 - 00:10:08.882, Speaker E: Also M copy is in t store is in self destruct is pending specification clarification, but otherwise ready to go in.
00:10:09.016 - 00:10:09.700, Speaker A: Awesome.
00:10:13.600 - 00:10:41.460, Speaker D: On Ethereum Js side we are sort of ready with the definite spec, just a small PR that is pending regarding to folk choice update tree. And also with respect to that I opened a simplification PR which I would like to talk about regarding again the engine API method for new payloads.
00:10:42.600 - 00:11:25.340, Speaker A: Cool. Yeah, let's cover that right after we finish the client updates. I think guest on the El side is the other one missing. Anyone from Geth want to give an yeah, on the side? Yeah, don't necessarily want to put you on the spot, but if anyone has updates they want to share we can definitely cover those as all.
00:11:28.530 - 00:11:29.674, Speaker F: For Lighthouse.
00:11:29.722 - 00:11:32.298, Speaker E: We've got the Devnet eight spec implemented.
00:11:32.394 - 00:11:36.000, Speaker A: We'Re just in the process of reviewing it right now. Nice.
00:11:39.370 - 00:11:43.340, Speaker D: So load star is also almost ready with spec.
00:11:44.350 - 00:11:45.100, Speaker A: Nice.
00:11:47.630 - 00:12:10.100, Speaker C: Side. We are ready. The only thing that we are implementing now is the new publishing API for supporting the broadcast validation option. But I guess it's not super important for running dev metate in any case because this is the only thing that we are working on.
00:12:11.990 - 00:12:46.240, Speaker A: Got it. Anyone from Nimbus or prism on the call? Okay, anything else on the devnet or implementation status. Otherwise we can move to Gejenders PR. Just clarification. Should override builder flag, I guess should be added to devnet eight spec.
00:12:48.770 - 00:12:59.510, Speaker G: Yes, that's what we talked about on the consensus layer call last week. I can't remember if we talked about it on the execution layer call before, so it can easily be a no op, but it should be in the interface.
00:13:02.950 - 00:13:30.060, Speaker A: Cool. Mario, I thought you had your hand up for a second. Yeah, just a small update. We have tests ready for obviously 48 four for eight and 67 80, which is a self esteem somewhere. Ready. McOpy is ready also, but we're still working on 47 eight eight and transit storage tests, but should be ready in the following couple of weeks. Nice.
00:13:30.060 - 00:13:49.290, Speaker A: Okay, Gizinder, do you want to talk about the parent block root engine API pr?
00:13:50.620 - 00:15:00.080, Speaker D: Yep. So basically in new payload, what's happening is that the payload that is coming from beacon node, it now doesn't have parent beacon block route, but then there is a separate param that comes with the parent beacon block root. So El basically then can marry to create the full payload. But what I'm trying to propose is a simplification so that the beacon blocks execution payload itself should have parent beacon block root. So that there is one to one correspondence between the data that is on the beacon block as well as the execution block that gets constructed out of it. It is basically helpful in the scenarios, mostly in the scenarios of debugging where basically we are debugging something. We want to run a block execution block and we just want to extract data out from the beacon block.
00:15:00.080 - 00:15:19.830, Speaker D: So basically, of course we can still marry parent beacon block route from there. But I think it is quite handy and also quite clean that parent vegan block route exists as part of the new payload, payload that we get.
00:15:22.300 - 00:16:22.868, Speaker G: So there's a couple of things here. You could either change the consensus data structure or just change the engine API, which would require some more translation in constructing the data structure. When calling that method, we did, as I linked to in the consensus PR that you opened up. We did debate this before doing the release. It ultimately came to kind of an aesthetic sensibility. Do you duplicate this field and thus have kind of this internal data structure self contained, or do you gather it from the outer commitment we landed on? Don't do the duplication. And some people thought, okay, well that's okay, but it's aesthetically nicer for it to be self contained if it's actually a pain debugging and the aesthetic principles have been elevated to more practical principles.
00:16:22.868 - 00:16:45.680, Speaker G: I think it's totally fine to cut another release with it. We're going to have to add a few tests. There's an additional line of code in the validation to make sure these two things are the same thing. But ultimately I think it's fine if consensus devs or others want it in there. We didn't have too much of a reason in either direction before the latest release.
00:16:53.650 - 00:16:58.480, Speaker A: And does anyone on the El side have any thoughts on it?
00:17:04.580 - 00:17:27.130, Speaker G: Okay, I guess soon, because the longer we don't do it, like if we have net with this in there, then people are going to create tooling for the workaround and then all of a sudden it's going to be worked. The longer we have it, the more people are just going to figure out how to deal with it. So I'd like to figure it out soon.
00:17:28.140 - 00:17:44.168, Speaker A: And I don't know, there's a couple CL teams on the call now, but not everyone. Is it too long to wait until next week to have it fully agreed upon?
00:17:44.264 - 00:17:52.770, Speaker G: Yeah, I'd wonder when Devnet eight is because doing it before Devnet eight would be preferable to doing it after, right?
00:18:01.650 - 00:18:18.214, Speaker A: I guess, yeah, I'll get two questions, Perry, maybe. Okay. Like client answered his own question. So only do we expect to have Devnet eight up before the CL call next week? I would be surprised if so. I think.
00:18:18.252 - 00:18:24.120, Speaker B: I highly doubt that. I think realistically it'll be the week after.
00:18:25.770 - 00:18:26.482, Speaker A: Okay.
00:18:26.636 - 00:18:45.790, Speaker G: So if we got pre signal on this call and the pr from everyone else before that call, and essentially on the same day cut the updated release in one week time, would that be okay? Or do we want to try to expedite the decision asynchronously?
00:18:50.770 - 00:18:53.970, Speaker A: Yeah, I think. Let's go ahead, Perry.
00:18:54.710 - 00:18:56.130, Speaker F: Sorry, I was just going to say.
00:18:56.200 - 00:19:00.046, Speaker A: I think it'd be okay to expedite.
00:19:00.078 - 00:19:03.506, Speaker E: The decision async because it is sort.
00:19:03.528 - 00:19:11.122, Speaker A: Of just an aesthetic change and it just requires a little bit of legwork.
00:19:11.186 - 00:19:18.282, Speaker E: I guess my two cent is it is nicer to conclude Kajinder's pr and.
00:19:18.336 - 00:19:22.070, Speaker A: Add the field and makes it a little bit easier.
00:19:22.150 - 00:19:24.954, Speaker E: But I haven't been implementing this. It's been mark.
00:19:24.992 - 00:19:27.180, Speaker A: So he'd have a little bit more insight than.
00:19:32.130 - 00:19:56.520, Speaker G: We just get. Does any other consensus layer team have feelings, either strong or weak in either direction? And then I can knock on doors after the call to see if we get positive all around. We'll try to cut a release more like Tuesday to unblock this and keep moving. But yeah, if anybody has a vocal opinion, please say so now.
00:20:07.280 - 00:20:18.610, Speaker A: Okay, I guess there aren't. So, yeah, let's try to get some feedback on it async and at the latest, finalize it on the clcon next week.
00:20:22.300 - 00:20:23.050, Speaker G: Thanks.
00:20:25.920 - 00:20:35.950, Speaker A: Sweet. Next up, Dano, you had clarification PR about the self destruct EIP. Do you want to give some context on that?
00:20:36.800 - 00:21:12.036, Speaker E: Sure. So as I was working through implementing it for Beisu and integrating it with the execution spec tests, three corner cases that weren't really clear in the EIP were discovered, and this EIP makes them explicit. These are currently reflected in the execution spec tests and in at least Besu and I think, other clients that are following it. The first of the three items is to separate the notion of contract creation from account creation. Now, this is a situation where you would send money to an address, and I call those hollow addresses. You don't know whether it's externally owned or a contract. So that exists prior to the transaction.
00:21:12.036 - 00:21:52.272, Speaker E: So you start the transaction, you do create to into what that address turns out. That address is a create to address, and then you self destruct. In that case, I think the spec should self destruct that address because the contract code that's going in in the storage didn't exist prior to the transaction. So that would basically separate the notion of account creation from contract creation. And what 6780 tracks would be contract creation when you actually call the create operation, or if you actually started in a create transaction. So that's the first clarification that's reflected in tests right now. The second one is there's a corner case where you can actually burn ether with self destruct.
00:21:52.272 - 00:22:35.540, Speaker E: If you self destruct and you set yourself as a beneficiary, currently, that ether just completely disappears, because by spec, the last step is to set the balance of the self destruct contract to zero. So this would change so that you only destroy ether if you're destroying a contract in the same transaction. So if a contract existed prior to the transaction, you did the self destruct, and you point it to yourself, all of your balance would stay in your account, so it wouldn't self destruct it. Now, we can't get rid of it because it turns out optimism depends on this feature, and they do depend on the in transaction, create and destroy loop of a smart contract to burn the ether. And this is in their l two. So there are people out there using this feature. We can't just get rid of the burn feature.
00:22:35.540 - 00:23:00.248, Speaker E: So that's not something that I don't think is good to do. Right now, the final step is to say that self destruct always halts the current frame. I think that was an oversight in the first one. That was always the intent, that if you do a self destruct into what's going to be like the new sweeps mode, that the execution then halts at the end of that self destruct. So that just puts in a line, clarifies that. The tests have always reflected that. So that's just worthy of clarification.
00:23:00.248 - 00:23:14.160, Speaker E: So those are just three things that are, you could argue that those were the correct behaviors, but it's much easier just to put those into the spec and say, no, these are the correct behaviors. And to make it clear, can optimism not just activate dip?
00:23:14.580 - 00:23:40.312, Speaker A: So I guess before we go into the optimism discussion, I just want to clarify, are the first and third bullets just you're clarifying the current semantics? And then the second bullet is one where we may want to change what the current EIP actually does, the way.
00:23:40.446 - 00:24:20.180, Speaker E: All three of them, I think, are clarifying current semantics, because the second one is really an emergent property because the burn comes from the set to zero only in the internal transaction. So I think that doesn't really represent a change if we were to change it, I would say that it would fail for self destructive self in a transaction if I were to change it and get rid of the burning. So I would say that all three of them are clarifications of semantics, and those are the most likely interpretations. But based on readings, you could get different readings of it. The halt, I think, is absolutely needed as a clarification, because I think the best reading is that it does not halt.
00:24:24.700 - 00:25:48.530, Speaker A: Got it. Okay, so there's some comments on the burning aside from that, and we can cover that after. But does anyone have any comments or contentions on the two other points? So the contract versus account creation and halting the call, does everyone agree that those two clarifications make sense? I guess if you disagree, now's your chance to raise that. Okay, so I guess on the destroying one, just for context, because this was posted in the previous, it wasn't posted on this EIP thread, but on the previous self destruct eip thread. So I believe that sending like self destructing and setting yourself as the beneficiary is how at least optimism and maybe other L2s basically manage withdrawals back to l one. So how they destroy kind of supply on l two as they send it back to l one. And there's a bunch of comments in the chat about this, and it's not clear whether this is, like a major deal breaker for l two s or not.
00:25:48.530 - 00:26:14.090, Speaker A: I guess. Yeah. Mario has a comment saying if we rename the opcode to send all, it's kind of weird if you send all to your own address, that they would then destroy the ether. That seems unintuitive. Yeah. Any thoughts on how we should approach this.
00:26:16.060 - 00:26:29.890, Speaker E: So the opcode wouldn't be send all? When you write in a transaction, it's still a self destruct if the transaction exists. So we can't go there yet. So if we get rid of the self destruct for a contract created in the transaction, then it truly becomes self all. Send all.
00:26:45.300 - 00:27:00.804, Speaker A: Okay. Does anyone not think we should make this change, or do people feel like they need to look into it more to better understand?
00:27:00.922 - 00:27:04.992, Speaker E: So the change would be never to burn? Are you proposing we change it so it never burns?
00:27:05.136 - 00:27:08.504, Speaker A: Okay, so the current implementation now would still burn it, right?
00:27:08.702 - 00:27:11.972, Speaker E: Yes, the current implementation and tests burn for burning.
00:27:12.036 - 00:27:12.650, Speaker A: Okay.
00:27:16.220 - 00:27:34.280, Speaker E: So table the burn for two weeks and let people think about it, with the alternative being rewrite it so that it never burns. And if you self destruct a self in the same transaction, will it leave a hollow account or will it leave the data or will the self destruct fail?
00:27:34.440 - 00:28:32.258, Speaker A: Yeah, Mario? Yeah, I just wanted to clarify my comment. So on the test right now, I think it follows exactly what Daniel proposes. So if it's in the same transaction, it still destroys the ETH, but if it's in different transactions, the creation and descend all, it doesn't destroy the ETh. And in my opinion, that's the semantics that sound more in line with what the opcode name describes, but yeah, I don't know what other people think. Okay, so clearly not ton of reactions. I think. Yeah, it's worth looking into it a bit more.
00:28:32.258 - 00:28:56.280, Speaker A: I've reached out. I sent your pr to some folks. On the optimism side, Dano. I think we should reach out to other L2s as well. And maybe hopefully by the Cl call next week we can at least have a good view on is this like a deal breaker for any of them and go from there.
00:28:58.810 - 00:29:16.190, Speaker E: Okay, if we do a change, I'm going to write this in chat. My recommendation is we would leave a hollow account with state and notes deleted if we delete in the same transaction. Yeah, but other than that, it's currently tested for how it's described.
00:29:18.850 - 00:29:43.990, Speaker A: Sounds good. Any other comments, thoughts on this? Okay, next up. Had an execution API PR, I think. Light client. You brought this up for three, eight get blocked receipts.
00:29:46.830 - 00:30:30.080, Speaker F: Hey, so there's three prs I wanted to talk really quickly about into the execution APIs. This first one here, adding this new method, eth get block receipts. I understand some clients already have something kind of like this. It seems that there's been generally positive feedback on discord and on this GitHub issue for adding the method to the spec and supporting it. Basically, I'm just trying to ask if there's anybody who feels strongly against not going forward with this or weakly against not going forward with this.
00:30:31.810 - 00:30:42.338, Speaker A: Last chance. And there's some baseu support on the pr as well. Yeah, never mind favor as well. Okay, let's do it.
00:30:42.424 - 00:31:15.882, Speaker F: Cool. So let's go ahead with that one. I'll merge it after this call. The next issue is four 30 and that is a request to move the mining related etherpcs. So right now you can check there are five still in the specification and these are etH mining, eth hash rate, eth gitwork, etH submit work and eth submit hash rate. They're not really used anymore for post merge related things. I'm curious if client teams feel okay with us removing this from the spec.
00:31:15.882 - 00:31:27.760, Speaker F: This doesn't say that you have to remove it from your client immediately if you have networks that you still want to support. But generally it seems like something that we don't need to have in the canonical Ethereum spec.
00:31:34.310 - 00:31:39.734, Speaker A: Okay. Yeah, remove. Okay, do it.
00:31:39.772 - 00:32:26.974, Speaker F: Excellent. Okay. All right, the last one is 297 in the execution APIs repo. This one has been around for a while and we've been toying with some different ideas. Ultimately the goal is to improve the UX for running execution layer clients and consensus layer clients on the same machine. So today you have to kind of negotiate outside of the two clients as the user of the clients where you're going to save your JWT token, generate that JWT token and then kind of point them both into that direction. These prs are sort of trying to figure out a way to improve that where the user doesn't need to try and coordinate across both of the pieces of software, like where this token is going to live.
00:32:26.974 - 00:33:33.754, Speaker F: And this was the original proposal that I had come up with, was just coming with some sort of default location and some order of precedent for reading and potentially writing the JWT token there. I'll let you take a look and review what the exact locations are. But we went down this path and ultimately I think Yossik made a proposal to have a fixed JWT token and only allow the fixed JWT token to be used if you are binding the engine API to your local host. We went down that path for a while and decided that ultimately we're kind of relying on some browser security properties of not being able to do cross domain request to localhost as the kind of securing property of that system. And it seemed a little bit brittle. So I've kind of come back now to this default file path method and trying to just reinvigorate the interest in making this happen. So I'm curious if client teams are interested in supporting this.
00:33:33.754 - 00:33:39.870, Speaker F: If so, any comments? Maybe if you're not interested, also important.
00:33:40.020 - 00:34:15.350, Speaker E: Lucas, I have a question. Would there be any potential issues with accessing this path on different oss? So for example on Windows I'm not sure if you have by default access to roaming updata of not for your actual application right that you're running. And this would be like cross between El and Cl. So like question mark about the access paths and access rights to the paths.
00:34:16.090 - 00:34:31.390, Speaker F: Yeah, that's a good question. I'm not 100% sure on that for Windows. I don't know if anyone knows off the top of their head if that's the case. Wouldn't need to look into that. Enrico.
00:34:33.410 - 00:35:20.780, Speaker C: Yeah, we have been discussing this morning about this generally for us it was kind of weird that we have spec that start describing things so in detail. It's also related to operating system stuff and you end up having these issues like doing Windows by default you get access to this directory or what if user gonna use Docker and you start having other level of complexity and then specging out these details there becomes a little bit off.
00:35:24.050 - 00:36:12.042, Speaker F: Yeah, that's fair. Originally when I proposed this I used the must terminology as in this was like a hard requirement for clients. But we stepped that back to more of a may like clients may provide this functionality and I think it is useful if we decide to move forward with something like this to have a relatively simple spec about where can clients negotiate on this location. If it's too much effort to implement then this is a choice for clients. But I think ultimately this is a problem outside of the exact implementation of how to deal with this problem. Negotiating the JWT token is just a silly thing for users to have to do on a single machine and we should come up with a better way. I don't know if this is the end all way, this default path.
00:36:12.042 - 00:36:14.590, Speaker F: I'm happy to find another route.
00:36:16.370 - 00:37:02.400, Speaker C: Another consideration that we were doing is that maybe this kind of complexity will be gradually simplified by the tooling that overall come up for homestaker toolships, help things set up and these kind of details will be kind of hidden by using these tools. And might be that this kind of complexity were initially there practically when we were close to the merge, but then time passed by. Users get used to this and a lot of tooling around this complexity will abstract away that this stuff.
00:37:05.330 - 00:37:37.090, Speaker F: I mean, even just for myself, I would love to not have to deal with this. And I think users aren't really getting better at running clients, they just stop running clients. So I don't know, I think that we can do a lot better about making it easier for people to be running our software. Okay. Generally seems pretty mixed. The takeaway.
00:37:39.190 - 00:37:51.990, Speaker H: I think just having a default value for the location of the file is fine as long as we are not enforcing the user to always.
00:37:52.060 - 00:37:53.980, Speaker F: Locate the file at that place.
00:37:55.310 - 00:38:30.340, Speaker H: And if the user does not specify another path for where it is, I think having a default value is a good option. I don't see why anyone would object to having a default value or how it would affect the user experience in a negative way to having a default value, even with the tooling that already exists with the existing complexity. Since they already specify that location of the GWT file, they do not have to deal with any regressions caused by this change.
00:38:33.710 - 00:38:47.786, Speaker F: Right. I think the point Enrico was making, and correct me if I'm wrong, was just there's more effort on the client side to deal with these different default locations and it adds some complexity.
00:38:47.898 - 00:39:17.080, Speaker C: It does, yeah. At the end you may start having more and more interaction with end users that assume that it's going to work, but then for their system that don't work. So there is much more support around this thing. And then you fall back to say, okay, please explicitly pass this information.
00:39:19.050 - 00:39:19.414, Speaker A: The.
00:39:19.452 - 00:39:38.320, Speaker C: JWT path explicitly there to fix it. But I agree at the end that a default value seems like cannot make things worse, actually.
00:39:47.070 - 00:40:02.240, Speaker F: Okay, it sounds like we don't really have enough quorum to approve this this time. I would really like if more client teams could weigh in on the issue and we could try and iterate a little bit on it and get it to something that people are generally happy with.
00:40:02.850 - 00:40:14.260, Speaker A: Barnabas had a nice comment as well, saying that with whole sky it's going to force each client team to run multiple set of nodes so people will experience the pain personally a bit more.
00:40:16.550 - 00:40:19.170, Speaker F: I think the client teams already run nodes.
00:40:20.470 - 00:40:25.094, Speaker A: Knock Enough. Yeah, you heard it.
00:40:25.132 - 00:40:28.814, Speaker F: A nuck in every household. Ten nucks in every household.
00:40:28.962 - 00:40:45.840, Speaker A: Yes. Okay. And people can continue discussing the specifics on the issue, but I agree. It seems like we might want to get a bit more input before moving forward with this.
00:40:48.210 - 00:40:54.110, Speaker F: Yeah, sounds good. I'll merge the first two prs. Thanks a lot for the feedback on this one as well. Cheers.
00:40:57.910 - 00:41:46.740, Speaker A: Okay, next up, so there's two related, I guess, proposals. So EIP 7329, which is the EIP Erc repo split. We've discussed this on the call, I believe, two calls ago, and then it kept discussing it on EIP IP. Dano and Lightkind put this together, and I think Greg Covid, I'm not sure if he's on the call, but had a proposal to EIP, one that addresses some of the issues around the process, but maybe light client. Daniel, do you want to give some context on this?
00:41:50.390 - 00:42:15.420, Speaker E: The context is to affect what we decided a month ago, and this EIP just formalizes it in a way that is acceptable to EIP editors. It outlines the alternatives considered and the objections, but I don't consider my opinion changing on it, that we want this full separation, we want full governance split. And that's what we had agreed on, that what the all core devs wanted a month ago. So that's formalizing this process.
00:42:20.030 - 00:42:23.840, Speaker A: Does anyone else have comments, thoughts on this?
00:42:28.770 - 00:42:34.750, Speaker E: Do any core devs disagree? Do any core devs want us to stick with one unified EIP repo?
00:42:43.770 - 00:42:54.378, Speaker A: Okay, so this seems pretty clear. I don't believe. Oh, you are. Okay, Greg. Perfect. So, yeah. Do you want to talk about your pr and your project?
00:42:54.464 - 00:43:55.102, Speaker I: Well, not all of us are on board with it as it is. I can't really review the big pr because it touches 924 files. So some of us feel this is major surgery that we want to consider my EIP. It'll probably get split. Some of it are, I hope, uncontroversial changes about things that people have complained about that don't require the split, which is things like our link policy is way too tight and people don't like fighting with that and other issues of that sort. The bigger thing it tries to do is to clarify what parts of the responsibility and workflow belong to the developers and what parts are editorial. I think they've gotten mixed up.
00:43:55.102 - 00:45:12.040, Speaker I: And so we start wanting to split the editorial repos instead of saying some of what we want to split shouldn't be there in the first place. So I think a lot of the trouble is just that we're trying to track EIP status in the editorial processes. The editors don't care about whether it's CLI or not, or CFI if it's considered for inclusion. If it's going on the test nets, that's entirely development workflow. So my EIP just tries to separate that to create essentially two side repos where all of the ERP editing gets moved into one repo. All of the EIP editing gets moved into the other, but the current repo stays the same because that is the working repo where the editors do their main work and actually publish. It's horribly cluttered because people check in a draft and then all of the editing on the draft is going on in that repo.
00:45:12.040 - 00:45:16.040, Speaker I: And for ERCs, that's a huge amount of churn.
00:45:17.500 - 00:45:49.030, Speaker A: Does this imply that there would be a single repo where all the drafts get merged into? So there's like an ERC pre draft repo and EIP pre draft repo, and then they both get merged into this common repo? Or is it more that this common repo hosts things like EIP one or whatever, like high level process stuff, but then there's an eips repo and an ERC's repo, and that's where all the activity for each side happens.
00:45:50.600 - 00:46:58.508, Speaker I: It could work like this. A draft gets checked in to the existing repo. The bot says, we have a new draft here. I'm going to put a pr, maybe automatic merge, but at least a pr over on, say, the core repo, the core directory in the EIP repo that's off to one side. So now there's a draft there, and further editing happens over there as the working group iterates on that draft. At some point, that draft could go to CFI, and when its status changes to CFI, the bot can then put a pr back on the main repo and say, hey, this one's gotten to CFI, so we'll make a note of it. So the main repo only contains the major changes in status, and those major changes are defined by the working group.
00:46:58.508 - 00:47:49.230, Speaker I: In this case, the core developers say what their status is. They don't have to tell the editors, we don't care. This, I think, splits off the work in the ways that the work is actually done and lets the editors manage their repo in the way that's best for us to do our own work and publish final documents, which is our real job, is to get to a final document that actually describes the protocol and to support working in between, but not to get in the way. And we're just in the way right now, and I don't think the split gets us out of the way. It just doubles the problems.
00:47:52.240 - 00:48:32.600, Speaker E: I think the split does get the editors out of the way because it gives all core devs final jurisdiction over the items it wants to do. And this process set up with this working group and the second editor group, I don't think gives us final jurisdiction. It still provides the ways for editors to be in the way. And if one person to stand up and say, I veto this, or to keep a spec from going to final, because we have some little knit wrong with particular formatting or process of one particular thing. The big advantage I see of this split is it gives the all core dev side of the house final and total jurisdiction over how they do their processes and what they publish. And that is what I want more than anything else, is final jurisdiction in this meeting.
00:48:33.260 - 00:49:04.370, Speaker I: That's what I'm trying to do. A working group should, and already does have at least one editor in the working group. And I would say that that editor should have right permissions. And if the working group wants to push it to final, the other editors back off and just say, you say it's final, you want to merge it, it's your pr, do it.
00:49:04.900 - 00:49:34.024, Speaker E: But that's not the experience we've had in the past. There was a networking pr. We said, this is final. And an editor that was not in the working group from outside the working group came and said, no, you have to go through the process of a two week because the other editor still could go in. We've seen these happen in the past. I don't want it possible for someone outside of all core devs to come in and say, you have to do that. So unless those editors are given complete and total jurisdiction, I don't see how this solves this without it actually being a full, formal total split.
00:49:34.024 - 00:49:38.110, Speaker E: A working group is just moving the deck chairs around.
00:49:40.020 - 00:50:03.712, Speaker I: Very clearly. I want to get rid of those stages. There shouldn't be a last call for Tor vips. There shouldn't. But I want to rehatch this discussion. We have the ips on the table. We have discussion threads both on the magicians and discord.
00:50:03.712 - 00:50:36.608, Speaker I: So that's where to take this up. I'm just saying this is controversial. You can force the merge if you want, but you'll be forcing it through controversy on the editor's side. And if you force it through against controversy on the editor's side, you will do damage. And I don't think the split is necessary to achieve the goals that you want to achieve. But I don't want to spend this morning rehashing arguments here.
00:50:36.774 - 00:51:13.550, Speaker A: I mean, there's a way where we could eventually get to that, even with a repo split. So I think clearly the strong support for the repo split, we just had no objections again, and it probably makes sense to go forward with that first. And then if we find that there's some core set of overhead, the obvious thing is just like numbering. But if there's more than that, that makes sense to live in a common repo. Maybe after we sort of create a sort of EIP mela or EIP editors repo or something like that. But.
00:51:15.920 - 00:51:25.376, Speaker I: Please let the editors try to come to a consensus. We aren't there yet. We don't have a consensus on this.
00:51:25.558 - 00:51:31.490, Speaker A: Sure, but that know, you personally could block this decision for like another year if you wanted to.
00:51:32.840 - 00:52:30.996, Speaker I: Look, Victor strongly opposed, but has said he will not block. I'm strongly opposed. I'm blocking. I've said that I will remove the block if we finish this whole discussion and have a reasonably coherent plan that doesn't risk splitting the editorial organization into two organizations, and that if I cannot remove my block, I'll simply remove myself as an editor and allow the other editors to do what they want to do. This is the nature of the consensus here. We probably can't get unanimity, but I'd sure like to be closer than one editor strongly for two editors strongly against and others in the middle. Let's take a little time.
00:52:30.996 - 00:52:38.856, Speaker I: We've got solid proposals on the table to discuss. We're not going in circles, but I.
00:52:38.878 - 00:53:42.110, Speaker A: Just think your block is kind of, there's like some fundamental thing here where if the reason to split out the ERCs and EIP process is like, each side has more control over how they do things, then of course the editorial is going to be split out because the editorial in the long run is probably going to be quite different, and maybe a single person can choose to sit on both. And I believe at least some of the current EIP editors want to do that. But it's going to be two different processes. Just like fundamentally, it seems hard if we actually want the benefits of splitting the repo, which is we can tailor both sides of the process to the users of the process and the main stakeholders, then from an editorial perspective, you're going to have to change things as well, because otherwise we'd all be happy with the current process. Like the fact that we feel there's some constraints as part of the ERC process that make it harder to do eip work is kind of the root of it.
00:53:42.560 - 00:53:51.520, Speaker I: Yes. I want to fix that. I don't believe that the current split proposal is the right way to split things.
00:53:51.670 - 00:53:52.370, Speaker A: Right.
00:53:54.500 - 00:54:16.520, Speaker I: Look, I'm sorry. Editing. We're editing technical English. It's all the same. It's technical English. It has the same spelling, the same grammar. The only form we're imposing is we really want to see an abstract, we really want to see a securities considerations and we really want to see references.
00:54:16.520 - 00:55:05.636, Speaker I: And we're handing over to the core devs what references are allowed, what sections in between the abstract and the security are allowed. And I would propose that, yes, if the core devs say it's final, publish it. The editors will back off and say it's your eip. You're telling us to publish it. Despite our misgivings, we will publish it to give the core devs plenty of control. But not say we need two editorial organizations to manage stuff that is not editorial. I keep bringing up the ITF, the Internet Engineering task force.
00:55:05.636 - 00:55:56.410, Speaker I: They've been managing all of the IP and more protocols for what, 50 years now? Maybe 60. They have one editorial organization with one head editor. They've never felt a need for multiple editorial organizations to manage all the different processes. They simply give a lot of power to each working group to manage their processes and keep the editorial work minimal. I think that's a good model for us. I don't think making up another model that's this complicated, I just don't think it's the way to go. But I think we can meet the actual problems and fix those, and I'd like a chance to do so.
00:55:57.580 - 00:56:14.190, Speaker A: Right. But again, I think the set of core devs and everyone on this call sort of has already moved past this. So I don't think blocking the split is the right approach. When, what else can I do?
00:56:15.040 - 00:56:33.300, Speaker I: I totally disagree. And if this split goes through, I will need to leave because the organization's values will have diverged from my values and I believe the values of those who set up the organization circuit 2017.
00:56:37.240 - 00:57:23.190, Speaker A: I think if you care about the consistency of the editorial process, waiting to see how the split goes, even if you disagree with it, and then potentially trying to find ways to make things more coherent at the editorial level, if there's room for that, I think that could be an approach. But given we've discussed this for first many years, but also many months recently, and there seems to be extremely strong support from the core development and research side across both the execution and consensus layer, I think we should continue to work on the split. I feel like we asked like ten minutes ago if anyone had objections, and there doesn't seem to be.
00:57:24.920 - 00:57:26.804, Speaker I: I thought my objections, I mean, sorry.
00:57:26.842 - 00:57:27.830, Speaker A: From the client team.
00:57:28.440 - 00:57:29.190, Speaker I: Yeah.
00:57:31.480 - 00:57:41.160, Speaker A: And if you disagree with this at like a fundamental level and don't feel like you can engage with the process afterwards.
00:57:43.260 - 00:57:49.144, Speaker I: The split is major surgery. There's no going back to what we had from the split.
00:57:49.192 - 00:58:39.450, Speaker A: Well, you could always add, I think. I disagree. I think if there is actually a set of common things that need to happen across both repos and. Yeah, numbering is one example. But if there's more of those types of things, then you just add an EIP meta repo or EIPRC's repo or whatever EIP coordination. But my view is from the client teams, from the research teams and everyone I've spoken to who's deeply involved in proposing changes on the protocol side, the split is what they'd like to go forward to. And I think respecting that and potentially trying to find ways to make things better afterwards is like an approach where you can probably get some of your changes as well.
00:58:39.450 - 00:59:03.924, Speaker A: I haven't fully reviewed your pr, but just skimming through it, I suspect a lot of the things you propose, there are things we would want on the EIP side of things, but the difference is, like, which repo does this end up being written in? And I think the strong preference from all the client teams is they want a separate repo that's focused on Corey ips and this can be part of that.
00:59:04.122 - 00:59:22.056, Speaker I: Yeah, I'm proposing a separate repo, but I'm not proposing creating that. Either the ERC or an EIP repo don't create that by essentially cloning the existing EIP repo and trying to clone the existing process.
00:59:22.158 - 00:59:34.670, Speaker A: Right, sure. So then you're saying you've got like a blocking objection on basically an implementation detail where most of the client teams effectively disagree with you.
00:59:35.360 - 00:59:40.220, Speaker I: Right. But it's the editorial team that has to live in these repos.
00:59:41.440 - 00:59:54.064, Speaker A: But again, part of the argument is why we want the split is client teams do not live in these repos right now because they feel like they're not set up for them. And the thing we want to get out of it is that, yes, I'm.
00:59:54.112 - 01:01:04.010, Speaker I: Proposing that there be an EIP repo separate from the editorial repo, that there be a developer's repo for the purpose of managing eips. But I would like it to start new and empty, and then going forward, we start working in it. It's much easier, requires no surgery to speak of, and if we really like that, more stuff can be migrated into it as we want to. So I think it amounts to a good piece of the split to work with, but not trying. My hugest objection is no, I don't want to split the editorial processes. I don't think that things like link rules and spelling and grammar need to evolve in different directions. I just think the editors need to back off to editing and let the core groups take care of developing and specifying what they develop.
01:01:06.940 - 01:01:09.230, Speaker A: Daniel, I saw you had your hand up.
01:01:10.720 - 01:01:46.528, Speaker E: Yeah. So a lot of these things in the EIP one pain relief, they're not mutually exclusive. We can still do every single one of them. Yes, and the one commentary I want to say is that a lot of these ideas have been discussed, but never seriously considered until the moment the split was mentioned. And so there's a bit of the Overton window shift, and it's that having to threaten to leave and to split things to get work done is not healthy. So if we had final jurisdiction on this, we wouldn't need to work. We would know and control our final destiny.
01:01:46.528 - 01:01:56.944, Speaker E: And even that little bit of asking the editors to back off, they're still the final step. We don't have full autonomy in the process, and that is what is essential in this split.
01:01:57.092 - 01:01:58.620, Speaker I: That's what I'm offering.
01:02:00.800 - 01:02:05.790, Speaker A: I guess. Does anyone else have thoughts on this?
01:02:08.240 - 01:02:17.730, Speaker I: I'm offering that the core devs have the power to merge final eips no matter what the other editors think.
01:02:19.220 - 01:02:24.260, Speaker E: There shouldn't be an editor group to think about it. We should be our final owner of it.
01:02:24.410 - 01:02:37.984, Speaker I: Okay, that's okay with me too. But I don't see the objection to letting the editors check the spelling and grammar and check that all the links are actually live links.
01:02:38.032 - 01:03:17.072, Speaker A: But the thing is, the split does not stop this. Right? The split makes this happen in two different repos. And I think, again, this is like the preference that's been stated many times. So I don't know. I feel like there's a pretty strong preference from the client developer group of how this should be done, technically to accommodate their workflows, which in practice doesn't really change what modifications we can make to the process. So, yeah, I don't know. Based on this and the other conversations, I think we should probably move forward with the split.
01:03:17.072 - 01:03:59.410, Speaker A: Consider your suggestions as part of the new or, I don't know, separated. Corey IP focused repo if that's a way to get more clients to engage with the process, then that's great. And if there are things we can do after that to help the editorial side, we should obviously do those. But I think holding up the entire kind of transition, that people are pretty strongly in favor because of some objections. Because of some objections to the form on your end, that seems wrong.
01:04:00.420 - 01:04:05.520, Speaker I: This repo modifies 924 files. I can't review it.
01:04:05.590 - 01:04:10.996, Speaker A: Sure. Well, I mean, I don't know. I think, like, client did the pr, but I assume most of those are just like, links and naming changes, right?
01:04:11.098 - 01:04:37.948, Speaker I: I don't know. I can't review it. GitHub can't show me a table of contents. Anyway, there's an editor's meeting next week. We can take this up as editors next week. Okay, I'm sorry. Blocking is part of the consensus process, and deciding that my block is solid, but I'm not going to change my mind.
01:04:38.114 - 01:04:43.884, Speaker A: Sure, but that doesn't mean everyone else has to stop moving forward because of your block. No, they don't.
01:04:44.012 - 01:04:59.270, Speaker I: And I think the editors are free to move on without me. But that's true. But this is how important it is to me, and it's a hill I'm willing to die on. I'm sorry.
01:05:00.200 - 01:05:05.610, Speaker A: Yeah, I appreciate that. I don't know.
01:05:09.100 - 01:05:28.220, Speaker I: I'm trying so hard to give everybody what they really need here, and this is on the basis of God, at least 30 years of experience in standards groups and how they go right and wrong. So this isn't coming out of nowhere.
01:05:34.650 - 01:05:44.760, Speaker A: Yeah. I don't know. If anyone feels like this makes them reconsider whether we should split, this is probably the time to speak up. Otherwise, I think.
01:05:48.410 - 01:05:52.570, Speaker I: Okay. The editors can take it up next week.
01:05:52.640 - 01:06:46.250, Speaker A: No. But yeah, I'm mostly curious to hear about client teams because last call, I guess the voice objections, I guess in terms of next step, then, yes, you can obviously discuss it in the editor meeting and discuss the specifics, even just also around reviewing the pr and the script and whatnot. But I think from the client team's perspective, it seems pretty clear that we want to move forward with this. And I think it's helpful to also have EIP, what is it, 7329. That lays out the specifics. So I'd encourage prime teams to review that as well as your PR, Greg, so that there's probably a lot of these suggestions that we would want to pull in to the postplate. Repo.
01:06:48.770 - 01:06:54.350, Speaker E: 7329 is in last call until the end of the month, so please comment.
01:06:57.570 - 01:07:52.440, Speaker A: Cool. Okay, last thing I believe we had on the agenda, just a quick shout. There's an ETh magicians thread about finding a name for the next upgrade. So Prague and Electra. The two options proposed first are Petra and Electra, and then Ben in the comments says he wants to die on the Prague electra hill. I don't know if we want to discuss this now or just leave it on ETh. Magicians yeah, any thoughts on this? Okay, let's use each magician's.
01:07:52.440 - 01:09:24.080, Speaker A: Anything else that anyone wanted to bring up? Bring up version three endpoint for beacon API. Yes please. Is this something we want to include in Devnet eight? Any comments from time teams? Have people had time to review it? Okay, if there's no comments here, I think we should do and then everyone has prs. I was going to say so for the blogs version three. I think we should try and do like for the other pr we mentioned. Get some consensus async in the next week and make a go no go decision on the Cl call. Alexa, I believe your pr is like similar, just small pr about error codes and general cleanup for loops.
01:09:24.080 - 01:09:30.956, Speaker A: If we can consider it for inclusion.
01:09:30.988 - 01:09:33.990, Speaker I: Too, or merging would be cool.
01:09:36.120 - 01:10:28.750, Speaker A: Does anyone have thoughts on this pr? Okay, I think what we should do as well. So let's discuss the Mayc. I'll make sure to add them to the agenda for the call next week as well so people have a couple of days to look at them before then. Yeah, and we can make a call at the latest on the ACDC call next week about whether we include them in Devnet eight. Anything else? Okay, well, thanks everyone. Talk to you all soon.
01:10:31.920 - 01:10:32.990, Speaker F: Thank you.
01:10:35.280 - 01:10:37.100, Speaker A: See you. Enjoy Paris.
