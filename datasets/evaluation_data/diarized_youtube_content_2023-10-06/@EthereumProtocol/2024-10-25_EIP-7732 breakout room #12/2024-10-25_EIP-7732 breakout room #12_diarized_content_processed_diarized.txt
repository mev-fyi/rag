00:00:01.400 - 00:00:27.785, Speaker A: Okay, so welcome to. This is the breakout call number what, 11 or 12? 12. There's nothing going on the EIP so far, but it's very likely that some changes are going to be coming and Francesco is going to tell us about precisely that. He has a different vision to how to implement 7732 in a simpler way.
00:00:30.725 - 00:01:01.463, Speaker B: Hi. Yeah, can I screen share? Yes. Okay, one second. Okay. Do you see the Hakim D thing? Yep. Okay. So yeah, I kind of just go do like a high level overview, like not go too in depth about things.
00:01:01.463 - 00:02:14.385, Speaker B: But yeah, basically I guess the motivation for this document which okay, I'll just link it in the chat later or maybe it's already been linked. Yeah, basically is that. Well, it's a variety of things. I guess on the more EPBs side of things is that I don't really like super much adding four choice complexity and I feel like this kind of design with the other boosts, the like withholding and reveal boost seemed somewhat hard to wrap my mind around and I guess for other people as well and just feels like the kind of thing that later on makes it harder to to think about new fortress changes because you always have to think about how does it interact with the security of these things. And Proposer boost is already tricky as it is. So I kind of wanted to try to think about something that is as simple as possible and not in implementation sense but in the sense of really like making sure that it works and you know, being able to then later put things on top of it if we, if we need to and things like that. So that's one motivation.
00:02:14.385 - 00:03:22.085, Speaker B: And then another motivation was kind of coming more from the fossil inclusion list research side that basically was looking at recently at the fourth choice part of fossil and there is basically if we think about fossil without EPBs there would be this testing part that's where essentially the enforcement would happen of the inclusion list. The whole thing is called away because it's like for choice enforced. And so it would be enforced by attestations. And this basically boils down to this kind of for choice construction that we've talked about a bunch of times in the past, which is maybe some people know it by the name of block slot attestations. But it's basically the concept of being able to vote against something like an attestation that does not vote for the current proposal, actually actively voting against the current proposal and possibly making it easier for it to be forked out, which is kind of already we have that today in the sense that if you don't get enough votes then you can be proposal boost reorged. But it's a bit different. It's not like really the default behavior of the fourth choice.
00:03:22.085 - 00:04:44.481, Speaker B: It's more like overall I mean it is in some sense, but it's more of like a local decision of proposers to do this or not and it's easier to go away from it if it causes problems. But yeah, basically really putting this into the, the normal or like in this like key part of the fourth choice that determines whether or not even we have become blocks in the first place seems just a bit more daunting and like maybe we will still do it. But basically I was looking for okay can in the EPBS thing where we have this in some ways nice separation of beacon blocks and payload. Maybe we can do the enforcement on the payload side since that's anyway the part that actually deals with transactions so that if something goes wrong you only maybe start missing payloads and not really also beacon blocks. So that's another part of it. And then a final part of it is also that yeah there's also kind of considerations around DAs as well like peer DOS or other forms of this that also have to do with this concept of like basically wanting to vote against a block. Like if a block is unavailable it might not be like attestations might kind of show that like people will not attest to it if they've actually.
00:04:44.481 - 00:05:17.865, Speaker B: People have actually done sampling. And so based on the votes you might want to not extend that block. For example, if you're a proposer that does not have a full view of availability, like you don't download all of the data so you yourself might not know that it's unavailable. So it's actually good for you to have this kind of signal coming from the fourth choice that says like don't, you know, don't build on top of this block because it's dangerous. Like it's, it might actually be unavailable. This might be the reason why you didn't get enough votes. So there's also this like enforcement aspect that's very similar to the.
00:05:17.865 - 00:05:52.205, Speaker B: And so yeah kind of similar consideration as fossil. Like it would be nice to just do this on the payload basically. So the proposal roughly is for the slot structure to look like this. If you just look at. So propose a test release and some kind of committee vote. It's pretty similar to the EPBS slot structure like with the PTC basically of the current eip. I guess some differences is like here because we then later need Some other small phase, some things are a bit more compressed.
00:05:52.205 - 00:06:36.035, Speaker B: But yeah, I don't anyway, just going through the flow of the slot like someone proposes a beacon block. There's attestations just like today. But at this point the payload still is unknown here. It's still meant to be like there is a commitment to a specific payload then basically in this time between 3 seconds and it doesn't have to be like an exact deadline, this would be like the builder can kind of choose when this is. But basically at some point between three and seven if a builder observes a certain amount of attestations, it's going to release its payload. If it does not, then it doesn't. And so basically the builder gets a clue from attestations about what to do like whether to release or not.
00:06:36.035 - 00:07:26.815, Speaker B: And in this case yeah, you would have to basically actually listen to attestation subnets like these would be like non aggregated attestations at this point. And yeah, I mean I guess one thing that's not here in this slot structure is there is still aggregation and like propagation of attestations like here for throughout the distress of the slot from 3 to 12 or 3 to 9 or whatever it is. But yeah, that's kind of overlaid on this. But the builder would have to like actively listen to the subnets and not just to the global topic. And yeah, basically the idea would be that it releases if it gets 40% of attestations. 40% comes from proposer boost. Basically if you see at least enough to beat proposer boost then you cannot be a proposer boost reord like it kind of the block becomes safe from that.
00:07:26.815 - 00:08:03.775, Speaker B: And this is all assuming like the chain was stable up until that point, which I think is a fair assumption because a builder can take this into account into the way it bids. It could just bid less if he thinks that the chain is is not safe to kind of bid on basically because there could be like reorgs. I mean it's already forked or things like that. So anyway, yeah, the builder listens your transitions. If he sees 40% it determines that it's safe enough to to release. It releases then by this point, just like in the PTC kind of proposal, there is a committee vote that's called ptc. Here it's called Availability Committee or ac.
00:08:03.775 - 00:08:33.565, Speaker B: And the reason to change the name is just that it's not just voting on the payload timeliness, it's kind of has a few roles. I mean effectively it's voting on the payload, but with a couple more Things that then he needs to think about and things that we care about coming from this. And then yeah, basically the next thing that's. And I guess at some point here you wouldn't. Yeah, so I are sent. At some point. It doesn't actually have to be after the payload.
00:08:33.565 - 00:09:24.413, Speaker B: We could also do this in such a way that you don't need to wait for the previous payload. This is more of a decision to be made within the kind of fossil research that's not super important here. But yeah, and then at the end there's this basically freeze deadline where basically what happens is that people stop listening for new IELTs or like they do listen for new IELTs, but they basically the ones that come later than this deadline, they don't really take them into account. They don't enforce them essentially they don't put constraints coming from these ielts on the next block. And then this freeze deadline also applies to these ac like Availability Committee votes. So, you know, I don't know here there's going to be 500 people voting three seconds later. You've seen most votes if some vote comes late.
00:09:24.413 - 00:10:09.011, Speaker B: You also will not kind of take this into account in the way that you then use the votes, which I will talk about. And so yeah, basically now maybe let me just go through the various kind of actors that are in this pipeline and what they do in these various phases. So the builder I kind of already talked about here, like B is always going to be the beacon block and P is always going to be the payload. Assuming there's like just a beacon block and a payload. But yeah, basically the builder, like the first thing it does is as soon as it sees the beacon block. So this could be like any time here. Essentially it already propagates blobs.
00:10:09.011 - 00:10:39.911, Speaker B: So this is without waiting for any attestations, it just does it. This is kind of assuming, I guess this is where already apparently relays do without, you know, even waiting to like validate the block or something. You can kind of already propagate blobs because you don't really care about blobs. They're not, they don't have like sensitive information, I guess at least normally. So yeah, you propagate the blobs immediately so there's. There's more time for that and then basically you won't. Well, I guess, okay, I guess this part now on the.
00:10:39.911 - 00:11:26.075, Speaker B: In the light of this discussions around git blobs and the effects of that maybe we would have to rethink, but I don't know. This was Here basically to say like in principle, if needed you can propagate the blobs earlier so that it's basically the timelines are not. It's not just this amount of time to propagate blobs like in the. If you really need it, you could take more time and then yeah, once you do see for 40% attestations, you release the payload because you think that it's not going to get reorganized at this point and you don't release it otherwise. Now the one thing, one thing that's quite important that. So there's this 40% number which is again proposal boost. Like if you see more than that, all good, like it's not going to get reorganized, reorgan.
00:11:26.075 - 00:12:01.511, Speaker B: It's like there's no way for the proposal boosted the next proposal to be to, to. To do something to it. But the other, the flip side of that is like what if you don't see 40% so in the case where you don't release, like if you go down this path because you've seen, I don't know, 35% or something, then basically what you want as a builder is that the payment is not going to go through. Like if you don't release, then you don't want to pay. And so the idea there is basically to have this payment rule. Yeah, there's no diagram here, so you can. Well I'm just going to say it I guess.
00:12:01.511 - 00:13:03.283, Speaker B: Yeah, the payment rule is basically that you need 60% of the attestations from the committee for the payment to be processed. And this basically is just going to happen on. So I guess there's two cases. Like one case is everything works fine, the payload actually becomes canonical, then the payment just goes through, everyone is happy, there's no problem, there's no need to wait for attestations. Then the other case where this does not happen, where for example the, this beacon block B becomes canonical but the builder is not released. So we're kind of down this path because it did not see enough attestations, then still the payment will be kind of held up. Code is that some like more specific design of having like a queue of these bids in state and or like keeping like a cache basically in state of these bids and basically accumulating attestation weight over time as attestations come in in the successive beacon blocks.
00:13:03.283 - 00:13:39.215, Speaker B: And then once it gets to 60% it gets processed. One caveat is like we would actually not want to process it if we would actually want to wait to be sure that there isn't an equivocation for reasons that I'm not going to discuss like here. I mean you can see there's just no equivocation kind of caveat. But anyway, like, basically the point is like we're going to wait to process things for some time. Basically, like an epoch could be like a good rule, just wait until the. The end of the next epoch or something like that. In the bad case, so when the payment does not happen immediately because everything is fine, we wait until the end of the next epoch.
00:13:39.215 - 00:14:37.423, Speaker B: And we only process is if we don't have equivocations and we have at least 60% of attestations. And like, basically the reason is like if you did not see 40% of attestations, the block should not get to 60% unless there's like 20% that's late or malicious or something like that, which is basically like a decent safety margin that we've been kind of, we've sort of been okay in these designs to give the builder, like even the other DC design, like the way the fortress worked did not really protect the builder up to a stronger adversary than 20%. So that's where 60% come from. It's just 40 plus 20. So that's the builder. And then you can prove that given these assumptions and these numbers, then kind of everything works fine up until certain adversary and. Yeah, but I guess I should flag like this payment thing is something to kind of think about carefully, like how the, how this would be implemented and.
00:14:37.423 - 00:14:40.035, Speaker B: Yeah, I see a hand up. Go ahead.
00:14:40.615 - 00:14:57.355, Speaker C: Yeah, so a lot of the complexity of this or like, I don't know a piece of complexity in this design, even if it's simpler, was that in state queue to keep track of attestations to know whether or not there was enough attestations? I guess.
00:14:59.375 - 00:14:59.879, Speaker B: It.
00:14:59.967 - 00:15:35.485, Speaker C: One thing that actually now strikes me as strange is that like we, we already have this concept of inclusion distance, I guess. And like if there aren't, I. I guess it's weird. Even if we wait to the end of the epoch in order to. Even if attestations can be counted up for the next two epochs, it's weird that we would choose whether like make payment conditional up to two epochs because the builder made a decision during that slot when those attestations may very well not have been available.
00:15:36.905 - 00:16:07.063, Speaker B: Right. But so the, the issue is like we cannot know whether those. So let, let's say that we decided okay, let's just make the decision immediately. Let's not wait. The issue is, for example, the next Proposer might just be. Or let's say the proposal of slot N and slot N plus 1 might be the same proposer and it might just decide not to include or actually no, this is more of a case. Well okay, let's say that, let's say that the proposer of slot n +1 wants to screw the proposer of slot N.
00:16:07.063 - 00:16:36.275, Speaker B: Then it might just not include attestations for the payment not to be processed. Like collude with the builder or just I don't know, out of like malice, just decide not to include attestations in order for the payment not to be processed. And like from the chain's perspective you can't really know whether or not this happened versus attestations were late. So that's kind of the issue. It's like if we don't wait some time, it could always be that the attestations did not get unchained just because people decide didn't decide to include them.
00:16:37.255 - 00:16:48.293, Speaker C: So the extra distance is really just about increasing or like making it less probable that someone would have so many blocks in a row. More or less.
00:16:48.349 - 00:17:27.265, Speaker B: Yeah, basically something like that. I mean any, you wouldn't necessarily have to be the next epoch. But it also feels to me like there's very little like you know, this extra delay doesn't really do anything too bad like neither to the proposal. I mean the person that might end up being delayed is the proposer. But like I don't see what's the difference between getting payment in Apple can versus Apple can plus one and like from the protocols perspective, keeping track of you know, 30 like 30 payments that still need to be processed versus like three payments doesn't feel like it's that different. But that put us. Yeah.
00:17:27.305 - 00:18:26.605, Speaker A: So I want to make a comment regarding this. My first impression when I, when I read this proposal was that we were shifting complications, complexities. But actually in fact we need to delay anyways and I think we might need to delay even in the happy case because there's this attack scenario in which the builder, since the builder is a validator that someone is getting slashed, she has a lot of money and they want to transfer to someone that is not slashed. And if we allow this large transfer of effective balance quickly, then I can just hold two validators get slashed for a lot of stake on one of them and transfer all of my money to somewhere else so that it's no longer slashable. So I think anyways on 7732 we need to implement such cash. So I feel that Even in the happy case we're going to have to delay the payment and have this cache on state.
00:18:28.185 - 00:18:46.955, Speaker B: I mean I guess one question is does the builder need to be a validator? Like couldn't this balance just be. I mean maybe that's simplest in some way but then then we actually have to deal with this kind of edge, cases of slashing and so on. Then maybe it's easier to just have builders be some other entity.
00:18:47.335 - 00:19:22.865, Speaker A: Well that's an extra level of complexity. We thought about this having new validators that are not really validators. They don't have any duties and they just are builders without any duties. And then this leads to a lot of gaslighting over whether. Because now these people have to be heavily staked and they don't get any money out of their stake because they're not earning anything. And then you need just like have two kinds of builders. Ones that are validators and others that are not validators so that you allow them to earn any interest rates on their state capital.
00:19:22.865 - 00:19:57.745, Speaker A: It just goes on forever. So the simplest option is always to have them as validators. And I spoke to builders and the main builders don't mind and if we are going to implement this cache anyways, then it's no change to do this in the happy case as well. So it's just the same two epochs later you just process all payments and all bids that you have in this cache. It's just a quick processing.
00:20:00.135 - 00:20:32.875, Speaker B: Right? I mean I guess one question that comes to mind is like is to epoch if we're thinking about this like slashing, escaping, things like that. Is two epochs enough? Because I mean today I guess we have like a 24 hour period or something like that for withdrawing where like slashing evidence can go on chain. But like I guess we really wouldn't want to have a 24 hour queue.
00:20:34.735 - 00:20:35.475, Speaker A: Right?
00:20:47.655 - 00:20:49.439, Speaker B: Well anyway, I mean, yeah, but I.
00:20:49.447 - 00:21:10.615, Speaker A: Think it's fine, right? So if you. If tweepoc should be fine because we can always add this condition that after 12th if the builder was slashed, I mean if the slashing happened would happen immediately. So if when you're processing this the builder was slashed then you just don't process it and you keep it.
00:21:13.635 - 00:22:16.005, Speaker B: Yeah, I guess it's more in case builder gets a slash. But you only find out much later like I don't know if, I mean, I guess this is more the really bad case of I don't know, there's a separate private fork or something like that that only gets revealed later with like double finality or like this kind. I mean I guess they're really worst case thinking why we have in the first place this 24 hour withdrawal delay. But anyway I don't think it makes sense right now to hung up on this too much. Um, but yeah, anyway I guess there's something to think about. Okay, so that, yeah, so I think this payment processing is definitely generally something that you know, it should be written down like a proper respect for it and like edge cases should be thought about and implementation complexity and so on. But at least like I tried to like motivate why I think it would be good to do it this way and yeah, so yeah, so that's basically it for the builder, for the proposer.
00:22:16.005 - 00:23:00.045, Speaker B: Basically everything up to here is the same as today. Like you want to extend the head of the chain. So here B is like the thing from the slot before. So if it's not the head of the chain, you don't care, you just extend the head of the chain. If it is the head of the chain then you basically might still propose your boost reorgit if it's less than 20% attestations. So again up to here like nothing different than today then what's different is that you now basically require the payload to have at least 50% of this availability Committee votes. So it's basically like this 50% will kind of enforce the various things that the Availability Committee is voting on.
00:23:00.045 - 00:24:01.969, Speaker B: And like it's partially for you like if you're a builder or sorry if you're a proposer, that's that does not download all like columns, like all blobs. Then this like listening to these votes and this majority vote is kind of a signal for you. It's basically an availability signal that tells you okay, like this actually should be available so it's sort of safe to extend it. So partially it's just for your own protection essentially as a proposer that's not subscribed to all column subnets. And another part of it is like because you basically don't want to like if this block was late or if it was not respecting the inclusion list conditions which would be determined by this like Availability votes, then you would basically not want to extend it because people will not want to vote for it. Like our testers will also take a look at these availability votes. So that that's basically the thing that's added.
00:24:01.969 - 00:24:42.725, Speaker B: Like you require a majority of availability votes in order to actually extend something, but it's only the block from before. Like if you're at slot N plus one you care about the availability votes from slot N only once you go past that slot, like for example, if slot N there was nothing and the head of the chain is from slot N minus 1, then you don't care at all about these like payload votes. You only care about the regular fourth choice. So you basically would just run things just like you do today. So basically it's like I guess one thing, one way to think about is that these availability votes, they're kind of transitory, like they only last for one slot and then things get solidified by the for choice. Yeah, Boris.
00:24:43.345 - 00:25:49.995, Speaker A: Yeah, I wanted to ask about this. So let me see if I understand why the need to freeze the. You set up for attesters that will need to freeze their view on AC votes at 10 seconds or whatever time before the slots end. There's a freezing time and it's kind of clear for me for the EL perspective, but it wasn't IELTS perspective, but it wasn't so clear from the DA perspective. But I assume that it's something similar. If the proposer wants to hasn't seen the data available and will not build on top of the payload because he believes he hasn't received enough votes from the AC committee, then he'll reveal, he'll reveal his payload, he'll reveal his blog based on empty and this reason before is to protect that situation that the votes from the AC committee that they see might have not come in time.
00:25:51.465 - 00:26:21.361, Speaker B: Yeah, so it's, it's. Yeah, it's basically all exactly this. Or I mean I guess the more general making sure that whatever the proposer sees about the AC votes, like the proposer is just making a majority determination like was there majority in the AC votes or not? The testers are making the same exact determination. This other is again just a majority determination. I haven't talked about it, but that's what it's going to be. And so we want them to fall on the same side. Like both of them have to see greater than 50% or less than 50%.
00:26:21.361 - 00:27:11.183, Speaker B: So let's make like a simple example. Let's say that the I'm the proposer here and I see 49% votes or like I see basically maybe I some votes are missing but I see like 49% for the votes that I have and so I decide not to build on this payload. But then let's say there was no freezing more votes come in or the votes were there but I just haven't seen them because I'm a bit of the edge of the network or something. And so they keep coming at it. A tester see them, and now they see 51% or like 55 or whatever, they see more than majority. And so that's bad because then attesters are going to say like, why didn't you extend the payload you were supposed to? And flip case like can can be like the opposite, that you extend something. But then more votes come in.
00:27:11.183 - 00:28:04.917, Speaker B: And now it looks like it's not a majority because this would be like a relative threshold. So if more votes come in, the, you know, decision can also. It can also down like it can start being 55, but then becoming less than that. So yeah, basically either one of these two cases where in some way the proposed Internet testers end up being on the wrong side on different sides of the majority decision. Whereas by doing this freezing, we can basically ensure that whatever the proposer decides, the testers are also going to decide. And like, basically the way that it's going to work is just that the proposer includes the 500 or whatever votes in its block, just like it also includes attestations, but it's specifically going to also include these AC votes. And attesters will basically take into account all of the votes that they'd seen by this deadline.
00:28:04.917 - 00:28:45.055, Speaker B: Like, I mean, they'll just keep listening to votes, but then put a timestamp or something like that, and they only care about the votes that they've seen before 10. And then they will also consider all of the votes that they've seen in the beacon block. And so that, that basically makes things work, like in a way where basically all of the votes that a tester see, the proposer will also see. And once you put in the votes from the beacon block, everyone has kind of the same view. So it's like this like vaguely like view merge thing that I've kind of like talked about some other times, but in like a slightly simpler fashion because it's literally just about these few under boats here. Yeah, Terrence and. Or potus.
00:28:45.555 - 00:28:47.575, Speaker A: No, no, it's fine. I'll ask you then.
00:28:48.395 - 00:29:24.615, Speaker D: So I think there's one. Another reason that Pablo didn't mention is that there's also this equivocation case, right? So as a validator at the ac, say if I send like because there's no special condition, right? So if I send an AC1 AC2 to a tester and to the proposer, Then proposer include AC2, but then the attacher sees AC1, then this also allows proposal to have the Final say. Right. So in that case the attestor of the net slot will basically have to respect proposes ac, that is email block.
00:29:25.315 - 00:29:58.177, Speaker B: Yeah, exactly. So yeah, this is basically what's here. We have very simple rules that you only ever propagate the first AC vote that you see for someone. Basically the same rule that we have for every gossip thing. But then when you receive the beacon block there's going to be more votes that the proposer has put there and you might see some equivocations and then if you see an equivocation you just go with whatever the proposer said. So like you know, you see vote one and vote two both from the same person. Vote one, you got it from gossip.
00:29:58.177 - 00:30:50.263, Speaker B: Vote two, you see it in the beacon block that you receive, you just throw away vote one and just go with vote two. Like basically just, you know, if there is an equivocation you just give the benefit of the doubt and just take whatever the proposer saw. So yeah, that's also part of this kind of merging views mechanism. Yeah. And I mean yeah, basically this kind of section is just all about arguing that this leads to both the proposer and the testers seeing the same thing and then making the same decision about a majority or not. Okay, so that's that and I guess maybe let's go to a testers quickly. So yeah, basically a tester is like this is going to be this like merge part.
00:30:50.263 - 00:31:51.111, Speaker B: So what you do is like you run the fourth choice kind of normally but then if you need to make a decision about the payload, so you might be that you don't have to, in which case this, everything else here kind of just after the first one just goes out of the window. Like if for example the head of the chain is from slot N minus 1, like it's in the past, there's no payload decision to be made. You don't care about the AC votes, whatever. If you do happen to need to make a decision about the payload because there was a beacon block from the slot before and it is the head of the chain by running the fourth choice in a normal way, then you now care about the AC votes. So now you're kind of at the final, you know, you need to make this one last decision about empty or not in your fourth choice. And now this is what the only thing that AC votes do basically. And so now you do merge your view of AC votes, which is this thing that I was saying like take all the AC votes in the beacon block and kind of always agree with the proposer like whenever there is a conflict, like two equivocations, just always go with whatever the proposer says.
00:31:51.111 - 00:32:26.935, Speaker B: And if the proposer says something that you didn't see, like a new vote that you didn't have, just go with also add that vote. So you do this process, you end up with some set of AC votes that you consider. Now you do like a majority, you know, you just see like is a majority of the votes saying yes or no. If they don't say yes, like a majority, then you enforce that P is not extended. Which means like if the proposer extended it, you vote against them. Like you will vote for B instead of P. And so this can lead to like for example, A.
00:32:26.935 - 00:33:15.863, Speaker B: Well anyway like yeah, basically like this, this is trying to make it so that the, the proposer's choice ends up, ends up not working out. And yeah, and then basically you as as usual in I guess, peer DOS or whatever, when it's going to be you do a DA check. So you by yourself, even though there is some kind of DA check that's already hidden here because the, the voters are also voting on da. As I said before, this vote on DA is more for the proposer itself. It is more like of a hint for the proposer. You don't just trust the DA determination of the AC votes, you just do your own DA check. So you just download the columns and if some columns are missing, you don't care about what the AEC says, you just still vote no.
00:33:15.863 - 00:34:07.345, Speaker B: So your personal DA check needs to be satisfied and not just this DA check. And then the final thing is that there is some kind of an inclusion list check that's made also here by the AC voters. But then it kind of gets solidified here and I'm gonna, if we do have time, I'm gonna talk about that as well. So anyway, yeah, so you do this DA check, this IL check and now you again make this determination of like, okay, do I enforce that P is not extended? Meaning do I vote against P if the proposer is extended P, or do I just, I do I enforce that it is extended, meaning like if the proposer has extended P, then I'm okay with that and I vote for it. And if the proposal does not extend P, I vote for some like I'll just vote for B basically. And so against what the proposer said. Yes.
00:34:07.845 - 00:34:16.185, Speaker D: So when you say that enforce P not extended, that means the attestation is voting on the block but without the payload.
00:34:16.524 - 00:34:16.924, Speaker B: Yes.
00:34:16.964 - 00:34:24.556, Speaker D: I don't know how to do this without Changing the attestation format. So are you including the blog hash in the attestation now or something else?
00:34:24.700 - 00:34:39.692, Speaker A: No, it's voting for the current block. It's not voting on the. On the block that is coming. The attestations are only on blocks. So the new proposer just proposed n +1 and attesters will vote on N.
00:34:39.748 - 00:34:41.664, Speaker D: Oh, I see, I see.
00:34:43.295 - 00:34:57.195, Speaker B: But I guess doesn't the. I mean, even just in the current E P, isn't there a way to still vote on like be with the payload or without the payload or like how do you. As an attester.
00:34:57.855 - 00:35:39.345, Speaker A: So that's the thing. So I believe that this proposal doesn't really make the implementation of For Choice easier, it just makes the theoretical part of it. But most of the complication of fortress implementation remains there because you still need to deal with empty versus full blocks. That's the largest part of the problem. And you still need to force reorgs of situations like this. Like the block is coming, the testers don't want to have this block and they want to reorgate. And in this particular case it's easy because you're going to go with your parent and the parent is going to be empty for anyone.
00:35:39.345 - 00:35:56.065, Speaker A: So yeah, I think the implementation details of this statement, like how to reorder the incoming payload that is bad, is exactly the same in both EIDs.
00:35:57.525 - 00:36:05.265, Speaker D: So here the For Choice store will also track all the AC votes. Right. Just similar to how we track the PTC votes today.
00:36:06.965 - 00:36:44.715, Speaker A: Yeah, so the difference is that in the current. Right. So it's only one slot. It's the same as for us, we sort of like are stupid in keeping it on every node, but we only need it on one. Because anyways, we also are doing the same thing that Francesco is suggesting, which is that the proposer can only include PTC votes from the previous block. But. But the biggest difference here is that we only use PTC votes to determine a boost and Francesco is using PTC votes in merging the view.
00:36:44.715 - 00:37:27.161, Speaker A: I think the biggest philosophical difference here is that it's the way that we enforce the safety of the builder. In 7732, the safety of the builder is given by the situation where the builder, for example, sends a message that says I am withholding because I think this block is weak. And we use this message. We are using the message to not to avoid payment, but to force the beacon chain to reorg the block. And this mechanism here is a different mechanism in saying I don't need to send a message that I'm withholding. I'm just literally withholding and I'm not going to be charged for it. And I don't care if the beacon blocks becomes canonical or not.
00:37:27.161 - 00:37:30.729, Speaker A: So that's what makes a fortress much simpler and that's what.
00:37:30.777 - 00:37:55.645, Speaker B: Right and beauty of this challenge. I mean it's. It's also like you don't need to give fortress weight to this actions that the builder takes. Which is the part that I'm really like somewhat uncomfortable with because it's. I mean both just feels wrong kind of conceptually that like builder gets fort choice weight but also just to me at least it's quite hard to like think about. So yeah, it really for me, I think what you said is right. It's not.
00:37:55.645 - 00:38:41.335, Speaker B: It's not so much about making the implementation simpler. It's. It's about making it kind of theoretically simpler or like, you know, not just simpler because again as I said, I do feel like giving for stores way to builders is just really feels like the wrong thing to do. But yeah, so for me it's really more about that not a simplification in that sense of like thinking about for choice security and things like that is like kind of. I mean I guess partially is that goal and then also just like trying to like as part of that also like harmonize everything with these other things like focal and DAs. But I think yeah that you could probably do as well with the. With the current PTC approach.
00:38:47.005 - 00:38:47.293, Speaker A: Yeah.
00:38:47.309 - 00:38:49.925, Speaker B: I mean I would agree that the.
00:38:49.965 - 00:39:05.745, Speaker C: Current spec is difficult to reason about in terms of fortress and that even if it was difficult for implementation that I don't know, it's still valuable to have a conception you can reason about easier.
00:39:07.565 - 00:39:51.045, Speaker B: Yeah. I think, I mean the nice thing here in that sense that I mean now, you know, it might. I don't know if like anyone's gonna leave this call thinking, oh this is so simple but probably because I went through like a bunch of stuff relatively quickly. But really in some sense it's just here like this is everything that I mean this and the payment mechanism, like there's not that much else going on. So it's just this like majority vote and then this mechanism of, you know, if you see 40%, you reveal and 60% is the payment threshold. So that basically tells you everything about the kind of. Yeah, basically what's going on with the behavior of builders and like why we.
00:39:51.045 - 00:40:03.545, Speaker B: They get safety and other than that they don't really influence the 4 choice much. So yeah, it's. It's in A lot of ways, like, more similar even to the current for choice. Yes.
00:40:04.995 - 00:40:53.975, Speaker A: So the other trade off that, that is a real trade off, over 7732 is the timelines. I mean, the fact that we're, we're freezing and we, we have stricter timelines gets me a little bit unease because we were already sort of like at the edge of what we could handle. So it'd be nice to know if we can actually do this freezing at 10 seconds, for example, perhaps it's fine if we do it at 11, but then that squeezes the IL satisfaction for the builder. So, I mean, there's always this threshold. The problem that I see is where you put this 10 seconds number between nine and 12, it could be essentially anything. And there's these two different forces that are contending there.
00:40:55.155 - 00:41:40.795, Speaker B: Right. So I guess I should also say one other way to do this that does not have this is that you would say they have two different thresholds. One threshold here for the proposer would be 25, and then for testers would still be 50 here. And so that kind of. Then you don't really need this merge thing. I mean, you would do what, I guess for the ielts, but not for this Availability Committee thing. Because basically you would just say if the proposer sees a kind of a similar argument as the 40 and 60, like if the proposer sees less than 25, then it shouldn't get 50, and if the proposer sees at least 25, then it's fine.
00:41:40.795 - 00:42:34.951, Speaker B: So it would be more like, yeah, 25 would be for being allowed to do something and 50 would be for enforcing it as opposed to being like the same 50 for both. I mean, in principle, I feel like it would be nicer to have 50 because it's like, that's like, for example, it would mean that, you know, having this 25 and 50 thing would mean that if you have 20 plus something testers, you could make something look available to the next proposer, which, I mean, is not the end of the world. But yeah, if we can avoid having these, like, weaker assumptions, it's nice. But I guess it's not. If we really need to not compress the timelines, then we could just do that. Yeah, I guess. What else? Oh, yeah, I guess.
00:42:34.951 - 00:43:01.955, Speaker B: Let me just quickly say what the AC is doing. Yeah, it's not doing anything super complicated. It's just saying, do I see a payload? So just like the PTC here, I mean, it says matching headlock. Like you specifically would have locked on the first beacon block that you saw if there is an equivocation. Like this is just to deal with the equivocation case. Yeah. And then you vote on like you kind of do the DA check.
00:43:01.955 - 00:43:32.703, Speaker B: Like you'll be doing sampling at this point already like downloading columns and stuff. So here you already vote on the columns. And again this is just for the benefit of the next proposer in case it's like a. Basically it's like if the next proposer is not someone that downloads all columns. And here it's not just if they're a local block builder. Like this could be a proposal that uses Map Boost as well. But this is about the fourth choice and deciding which beacon block to build on or sorry, if to extend the payload or not.
00:43:32.703 - 00:44:17.085, Speaker B: So even if you're using mapboost, you're still the one that's in charge of deciding what to build on. So you still kind of need this hint if you're not someone that's downloading all columns. So this is the only reason why this check exists. And then yeah, this is this IL kind of thing here. I don't want to go too in depth about what's going on here, but I guess the only thing to say is like this does not require execution of the payload. At this point there's like a small little thing that's that you're voting on that's basically just like a, like an inclusion check, like a small inclusion check that does not even require you to look at the transactions. It just require you to look at some small additional information that's going to come with the payload.
00:44:17.085 - 00:44:49.099, Speaker B: And yeah, that's basically that. So you at this point. So just to recap like we are at this point here in the slot, you just got the payload and you have to vote. It still preserves this property from the PTC that you don't need to quickly execute the payload. So in principle payload execution could take like up to here or whatever in the worst case. And this would not influence the Availability Committee votes. And yeah, and that's that you just vote on the IL satisfaction and that's it.
00:44:49.099 - 00:45:30.943, Speaker B: And then in the next slot testers will vote on another kind of IL satisfaction where now they actually need to look at the transactions and execute things, but they'll kind of use this. Yeah, basically it's like kind of like a two step thing where like the AC is enforcing, is doing some kind of check and the next check builds on top of that and actually looks at the transactions. But I think it doesn't make sense. Sense to now go into that, but I think it's fairly simple. Yeah, I don't think there's anything else. I mean here it's some whatever for choice thing, but I don't think it's different from the current eap. Yeah.
00:45:30.943 - 00:45:35.795, Speaker B: So I guess, I don't know. I think that's that for me. I don't know if there's more questions.
00:45:42.825 - 00:45:47.921, Speaker A: Thanks a lot, Francesco. This was great. Terrence has questions.
00:45:48.033 - 00:45:49.729, Speaker D: Yeah, thanks Francisco.
00:45:49.777 - 00:45:50.433, Speaker C: This is great.
00:45:50.489 - 00:46:15.335, Speaker D: So I guess I question maybe to you and everyone else. We have been working on devnet for the last few months and sometimes this is a better approach. Sometimes this is something that we might want to move forward. So I guess what's the plan? Right now it's like. Like basically, I presume there will be spat changes if we go this rod and. Yeah. Just curious for your thoughts.
00:46:15.415 - 00:46:53.329, Speaker A: Can I. Can I take that one? But later, I wonder, I mean sort of like instead of like trying to make decisions now, are there more questions for Francesco and this presentation? Let's. Let's have clear. What are the trade offs before? If there are no questions for Francesco, then. Then we can discuss this how to move forward. But I have a concrete proposal which is the following. I wouldn't want like a group of 10, 14 people here making decisions of the direction of the IP.
00:46:53.329 - 00:47:29.773, Speaker A: I personally prefer this approach much more than what we have today. I feel much more at ease with without boosts. I think it's a good idea. And what personally convinced me is that this biggest trade off was the implementation detail of enforcing the pavements. And I am convinced that we need to enforce them anyways because having builders not as validators is worse. And I think we need to have this cache anyways. So I think it's a good idea to move forward to this.
00:47:29.773 - 00:48:20.375, Speaker A: But let's decide this later. In terms of practical changes, there aren't that many actually the spec. If we forget about IELTS and Peer Das, because that's actually a big change. But from 7732 to this kind of for choice, what changes is the structure of the PTC attestation because it no longer has this withholding message that the payload envelope also doesn't changes a little bit because it doesn't have this withholding message anymore. It can just not be there. The PTC attestation will eventually have more data like the IL availability and the DA availability. But for 7732 without peer DAs and without IELTS, nothing changes there.
00:48:20.375 - 00:49:08.845, Speaker A: The timelines, the validator guides, the Honest builder guides, all of those behavioral guides do change quite a bit, but those are always optional and fourth choice does change, but I think it changes for the better and it's not that much of a change because anyways, you need to do this filtering for empty and full. My proposal would be that with. I personally would continue writing the current defnet for Prism as it is with sort of like an empty fortress. Because what we want to prove with the defnet or with Interrupt is that we can handle the separation of the payload and we can handle the slot time. We want to prove that we can handle 12 second slots with EPBX. That's the biggest unknown and that's fine with any kind of portrait. So it doesn't matter.
00:49:08.845 - 00:49:30.816, Speaker A: And once we have that, I propose that we open PR to change the spec repo to this proposal by Francesco only 7732 and then have the people that are working on IELTS and PRDAs to rebase on top of that.
00:49:30.908 - 00:49:39.683, Speaker D: If it's just 7732, do we still want the Free State line in 10 seconds? Because that's another change you didn't mention.
00:49:39.739 - 00:49:40.363, Speaker B: Right.
00:49:40.539 - 00:49:52.603, Speaker A: The freeze deadline is only important after ielts and peer das. Without peer das, any validator is just the proposer knows about DA already at the proposal time.
00:49:52.779 - 00:49:53.535, Speaker B: Yeah.
00:49:59.955 - 00:50:12.415, Speaker A: So if there's no objection, and this goes specifically to Francesco, I would like to write the CL spec print changing from 7732 to this because I think I have it fresh.
00:50:15.795 - 00:50:21.495, Speaker D: You are also at the beacon state changes as well, right? That is to track the 60% attestations.
00:50:22.995 - 00:50:27.615, Speaker A: Yeah, yeah. So that cache. I more or less have an idea on how to implement.
00:50:31.115 - 00:50:56.785, Speaker B: Yeah, I mean, I guess as far as I'm concerned. I just want to say that I've not been super active in the whole PBS development effort in the last few months. I kind of got back into it with this almost by accident, like while doing something else. And so I don't want to really, like, I don't know, I'm kind of okay with whatever people that have actually been working on it feel like is the right way to move forward.
00:51:00.605 - 00:51:37.365, Speaker A: So I think it's a small. It's as a smallish pr because as I said, I think it doesn't really change as much. It doesn't really change much from the current implementation. So I don't think it's even going to derail the definite efforts that we have. But I think it's probably better if we just sleep on this next Call or during the next days we signal this on Discord. And as I said, I. Since I already knew about this project for one, I've been like thinking about this.
00:51:37.365 - 00:51:45.965, Speaker A: I do feel like I've made a decision, a position at least that this is better than what we currently have for 7732.
00:51:48.225 - 00:52:01.741, Speaker E: To be clear. Do you have in mind also to target this and to have something working for devcon already in this change? With this change?
00:52:01.893 - 00:52:35.951, Speaker A: No, no, no. So actually I won't even write a CL PR until I finish the implementation of the recent interrupt the current. Okay, yeah, so I'll do the current one, but sort of like with an empty for choice because it's kind of irrelevant for choice for what we want to prove. You see, the main difference in Francesco's proposal is on the payment mechanism. That becomes harder. And on fort choice and the payment mechanism, we already have it implemented in prison. The current one for choice.
00:52:35.951 - 00:52:57.315, Speaker A: We don't really need to implement much detail because we only care about in the happy case. We can handle blocks being pressed, payloads being present, we can handle the separation, we can attest to them in 12 seconds. I think this is the purpose of having an interop and I really think that I want to have this before devcon. So that's still my priority.
00:52:59.015 - 00:53:34.131, Speaker E: Yeah, I agree. So now that we're talking about implementations, I could share what's the current state in tech? So we have started working on. We Stefan, as staff started working on For Choice and we think so it's. We are kind of confident that we could have something for defcon essentially.
00:53:34.243 - 00:53:35.091, Speaker A: Oh, nice.
00:53:35.243 - 00:54:02.265, Speaker E: Maybe next week, maybe the other week, maybe more. So Stefan is confident for next week, but he may requires some help. This means that probably having something more confidently working would be for the next week as well. So seems like we could even try Prism Tech, but it won't work.
00:54:10.645 - 00:54:46.505, Speaker A: Yes. So for choice is kind of irrelevant because it's not really measurable on a devnet anyways. So what I would want is the separation of the payload and the become block. No propagation of bits. Even though we have that implemented, if anyone has it implemented, it's fine. But no need to subscribe to bit propagation on the P2P network. Even self building, not even contacting a builder, so no builder spec.
00:54:46.505 - 00:55:01.625, Speaker A: So what we want is EPPS with self building and of course being able to handle empty blocks, because that's the new thing.
00:55:05.175 - 00:55:10.315, Speaker C: I don't understand how you say no fork choice though. I don't.
00:55:11.695 - 00:55:50.695, Speaker A: Well, you can use the current fork Choice, you can do something minimal that doesn't have block slot, that doesn't enforce builder safety, for example, Builder safety is where we differ in Francesco's approach and our current approach. So we could have a dev networking that proves that we can handle 12 second slots without assuring the builder that he's not going to. That the payload that the block is going to be reordered if he withholds. And that I think is fine for me.
00:56:00.285 - 00:56:01.105, Speaker B: Okay.
00:56:08.285 - 00:56:32.055, Speaker A: If we have a devnet that splits on for Choice, but that everything is working, it's just that we are split because we consider some blocks heavier than others. That's absolutely fine. That's much better than. I mean, honestly, what I would expect is that we have any devnet by defcon. We're going to be broken in like a genesis. So if we are broken only on for choice, I'm very happy.
00:56:32.875 - 00:56:35.947, Speaker C: So there's still a PTC committee? I don't know.
00:56:36.051 - 00:56:52.815, Speaker A: I guess I. Yeah, the PTC has to be there. The PTC votes is there. Like handling all of the network. The networking part of that requires that EPBS requires. Besides, the bids should be there. The PTC attestations have to be there.
00:57:02.095 - 00:57:37.255, Speaker C: I kind of sorry, Justin. Over recent times, like I. I got busy with some Electra Devnet 4 stuff, so I haven't had much time to continue to dive into For Choice. So I don't know, it's just. I don't know if I'll be able to parse out exactly what needs to be implemented. That's all in time for devcon about the ptc.
00:57:37.295 - 00:57:56.597, Speaker B: I guess one thing is the votes for the PCC can just be completely ignored. Like people vote, but then you don't actually use them in the fourth choice. So in that sense, correctly, it doesn't have to do anything. So you just. I guess if you see a payload you just take it and if you don't, you don't without caring about the votes.
00:57:56.781 - 00:58:34.335, Speaker A: Yeah. So in the current 7732, the PTC vote is only used to construct the boost. So you can just not implement the boost. And that's fine, you can just keep for choice as it is. The only problem is that you still need to implement for choice with empty and full block. You need to keep track of these nodes that are going to come like based on if a payload is missing. You need to be able to handle that situation in your chain that you may have some blocks that came without a payload and that are still canonical.
00:58:34.335 - 00:58:58.617, Speaker A: So this will have to have a fortress implementation in whatever client you're writing. And that's the part that you cannot avoid. All right, guys, we're over time. It's true. It was a great meeting. Thanks a lot, Francesco. I think we can really move forward with this.
00:58:58.617 - 00:59:17.587, Speaker A: And I'm very bullish on this. I'm very happy that it also seems to be making ielts easier. So dusting is separation of payload and become block. No for choice, because irrelevant. Self building. No builder. Correct.
00:59:17.587 - 00:59:35.875, Speaker A: No need to subscribe to propagation of the bid, I assume. And yes. EPVs bootstrap. Yes. Correct. That was always the idea for indebted, except that we wanted to have full for choice, but I guess now it's kind of irrelevant.
00:59:37.565 - 00:59:47.909, Speaker B: Okay, good. Good to understand. I just wanted to kind of, kind of get it fairly focused in the limited time remaining, so.
00:59:47.957 - 00:59:53.985, Speaker A: Yeah, even what Teko said, I'm gonna have to spend some long nights in the next few days, but. Yeah.
00:59:55.885 - 00:59:56.625, Speaker B: Right.
00:59:57.885 - 00:59:58.621, Speaker D: Thank you, guys.
00:59:58.693 - 01:00:01.327, Speaker A: Right. Thank you. Thank you very much, everyone.
01:00:01.461 - 01:00:02.155, Speaker B: Bye.
