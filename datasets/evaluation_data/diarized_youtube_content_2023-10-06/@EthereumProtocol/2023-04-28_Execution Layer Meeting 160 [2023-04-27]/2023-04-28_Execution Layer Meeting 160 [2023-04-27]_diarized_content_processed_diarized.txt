00:02:40.820 - 00:03:36.168, Speaker A: Hello everyone, welcome to Acde 160. I just posted the agenda in the chat. I guess the biggest thing we should do today is discuss potential eips for Cancun and in the context of 4844 being kind of the main thing we're working on. And then on the four four front, I think there's two conversations that we wanted to continue. One is just the reorg handling for blob transactions. And second, I know that we have been working on the last four four devnet this week, so we can kind of share an update on that and how that's going. Yeah, and I guess maybe to kick it off.
00:03:36.168 - 00:04:35.220, Speaker A: So on the Cancun side, so far we only had four which was included. We had a bunch of other stuff which was previously CFI'd, a bunch of other, even more other stuff that was proposed and still not quite CFI. I compiled a list in east magicians, but maybe to kick it off, I'd be curious to hear from just the different client teams, like what do you all feel is the most important things to do in Cancun? Yeah, and we can take it from there. I know. I think Nethermind was maybe the only one that answered async before, so maybe it makes sense to start with Nethermind and then others can jump in. So I think it's more or less what we answered on DTMr. Juicy not call sorry thread.
00:04:35.220 - 00:05:38.936, Speaker A: So definitely 4844. Definitely we see need for 6780. What else? 1153 we would like to proceed with that because that was already postponed from Shanghai and this is kind of ready so I don't see much effort to push it out. I don't see a point for it to be delayed then in the more maybe state 2537-4788 and 5920, while bigger things like EOF, more things around SSD that if they are not necessary, and things like EvM Max I would consider for some of the next hard forks. Got it. Thank you, Tim. This is Matt.
00:05:38.936 - 00:06:55.270, Speaker A: I think from the basic side that actually mirrors us pretty much entirely. We have very similar thoughts on the list, maybe with the exception of 4788, but other than that it's pretty much the same list as provided by it. And what do you think about 4788? Do you think it's more or less important than what the mine said? It's similar in terms of we think it's very useful, but the scope wise maybe kind of in the same bucket as maybe rather like weekly support. Anyone from Geth, Oregon? Yes, for Aragon it's important to get 6780, the self destruct removal. And I think it's unrealistic to deliver Uif alongside 4844. So I would postpone AOF to Prague and. Yes, no.
00:06:55.270 - 00:07:26.560, Speaker A: Otherwise, I think we can do maybe a couple more smaller eeps. Okay. Do you have any preferences or just not really beyond self destruct in point 44? No preferences. I can ask the team members more, but I don't think we have strong preferences yet. Got it. Thank you. And guests.
00:07:26.560 - 00:08:10.460, Speaker A: Yeah. So as for us, we haven't really thought about specifically what eips to ship or not ship personally, for me, priority is getting 4844 out, so anything large is, in my opinion, unrealistic. Beside it, think about EOf smaller ones. I mean, self destruct for sure, and any other smaller stuff. I don't necessarily see an issue with that, but I kind of feel that 4844 should be the thing that everybody focuses on, and the rest is kind of like, good to have, nice to have. Got it. Thank you.
00:08:10.460 - 00:08:54.330, Speaker A: So it seems just from those four, clearly the self destruct one is the second most important or the second most mentioned. Eip beyond 4844. And also with 6780, we've hired an auditing firm to analyze the impact of it on the chain. So in the next few weeks, we should also have some data on which contracts might be affected and whatnot. But I think that's probably one where it makes sense to formally include it. I see. Danny and client, you both have your hands up.
00:08:54.330 - 00:10:09.600, Speaker A: Yeah. If this is about self destruct, please go ahead, but otherwise, I think this is maybe one we can wrap up before we kind of dive into the rest. Okay, so I guess, does anyone oppose including 67 80? So this self destruct in this version is the one where you allow self destruct only if it's in the same transaction as like a create call, and otherwise you effectively use the send all semantics where you just return the funds but don't destroy the contract. Is this conditional upon the analysis not finding anything that we don't yet know about? And if it did, we would at least open up the conversation. Yeah, I guess it's worth highlighting. There was another proposal for self destruct that was slightly different. So I think Axic put that one together, which was, you do like a sort of fake self destruct where you actually hide the storage and data, but you don't delete it from the state.
00:10:09.600 - 00:10:53.278, Speaker A: Yeah, that would be another path forward. It seems like people don't prefer it as much right now, but, yeah, I guess I'm curious, from client teams, does anyone have an opinion on Danny's question. What would be the thing that we would find that would potentially make this a showstopper? I don't know, William. It's hard for me to say. I just kind of make a commitment to revisit the report on this call. That seems like the point of doing the report. One is to give information to the community, and one is the other to give information to us.
00:10:53.278 - 00:11:34.220, Speaker A: So I just want to, like, if we move forward with it right now to make a commitment to looking at the report together. Yeah, I think we definitely would at least. And I guess the question is, do people want to make this commitment prior to the report being out, or. I think it's going to take probably. I think it was like three or four weeks. So say like a month from now is when we would probably know. Do people prefer to wait a month from now before making that decision? I think it makes sense to make the decision now if everybody is okay with it and then revisit it after the report happens.
00:11:34.220 - 00:12:21.730, Speaker A: Does anyone disagree with that? I know. Dengrad, William, you both have your heads up. So this is related to. Please. I mean, I just want to say it's very hard to believe that the report will find nothing. I think we're very likely going to find some contract somewhere that somehow will be broken. The question is, do we make a judgment call on killing that contract because we believe either it's so low in value that it doesn't matter, or that the owner can do something else and rescue their funds and all that.
00:12:21.730 - 00:13:08.332, Speaker A: Basically, it's very likely that we'll find something. I would say, yeah, if we do start building something now and we see a chance that even the discussions might not even go towards, like, we can't do it, but it might just be delayed because we need to talk to a lot of people, then we should probably design it in such a way that we can shift. Without that implementation, I think it should be largely orthogonal to. But that would be my comment. Got it. Thanks. Like kind.
00:13:08.332 - 00:13:42.760, Speaker A: William, did you want to add anything to that? Yes. So we're neutering self destruct because of the unbounded scope of removing all account storage. The problem gets worse in our vertical trees, because vertical trees are flat. But vertical trees don't actually prevent code changes. So if self destruct is modified, I wish to retain the ability of accounts to change their code and also improve the way it's done. I've interacted with three different upgrade patterns in my career. I wrote some of the earliest contracts to upgrade with delegate call, and I've written an account ownership system to facilitate self destruct upgrades.
00:13:42.760 - 00:14:38.972, Speaker A: My proposal is set code to preserve that ability if we have to remove it from self destruct. So that is if we're not doing axics proposal, that would just change the nuns to the account and use that as a marker. So set code improves on the self destruct upgrade pattern by allowing a way to create clear storage, or not clear storage when we change the accounts. So we don't want to be able to clear storage because that's unbounded. So it just simply makes a way to change code in a safe way. It's as safe as all the other current upgrade patterns, and it should be a simple change to add on to any self destruct removal. So this set code, just to make sure I understand, you can change the code at the account but not the storage? Correct.
00:14:38.972 - 00:15:22.344, Speaker A: And this means you can have a contract who changes its semantics but keeps the previous storage, right? Yes, that's correct. And this is superior to the current self destruct upgrade pattern because the self destruct upgrade pattern requires two separate transactions, because the self destruct doesn't happen until the very end of the transaction, whereas set code can happen immediately. This is more secure than self destruct upgrade because there's no downtime where the contract is empty. So you could use it, for example, for a token upgrade. Thank you. Got it. Thanks Denkrad, Andrew, I saw you both got your hands up.
00:15:22.344 - 00:16:04.920, Speaker A: Was it related to this? Yeah. I don't understand why we need this. Can all this be implemented using proxies? Why do we need another method? I don't understand that. I can answer that. The main improvements upon being able to replace code in place is that there's no execution overhead. Delegate call is still useful because you can use it to bypass the account code size limit. So if you need a contract or an account with 100,000 bytecode of implementation, you can just spread it across multiple contracts of delegate call.
00:16:04.920 - 00:17:15.962, Speaker A: But if you need to replace an account's code itself, then this keeps that functionality. The benefit of having no execution overhead is critical, and without it, many users might prefer, in order to save on the gas, to migrate all of their tokens, for example, to make a new account and transfer all of their token ownership and identity to new accounts. That's not great. For example, if you're a Dex and you want to change your code, and you don't want the gas overhead of needing to call into another contract. Yeah, I understand the overhead argument, but functionally I don't know. We should think more about the overheads if that can be mitigated. But there are many possible future advantages from having the invariant that currently doesn't exist, but could exist in the future with this self destruct deactivation that at the same address you'll always have the same code or no code.
00:17:15.962 - 00:18:49.050, Speaker A: So we should weigh that against the benefit of, and I feel like having, I think axics not current self destruct proposal, but the one prior to this effectively had the same semantics, if I remember incorrectly. So basically what it would do is it would allow you to recreate the contract at that address, but it wouldn't change the storage in the meantime, and the challenge with that. So people were concerned about their kind of attack risk where you deploy a smart contract and then people use it in a way and you sort of change it, and you can keep the existing storage and potentially change the entire functionality of the contract. So I don't know. I'm curious how others feel about that, because it sort of feels like a discussion we had a few months ago. Unless I'm misremembering the issue, I think from Aragon's perspective, we'd like to avoid the version of self destruct removal where we have multiple versions, because we already have those. In Aragon we call them incarnations, and they complicate the code quite a lot.
00:18:49.050 - 00:19:48.524, Speaker A: So unless we absolutely have to, I would prefer a simpler solution. Like, in my mind, 6780 is a good compromise between simplicity and limited backwards compatibility. So maybe we can wait until the report arrives and then we can reconsider. But we can tentatively agree that we are including some variant of self destruct removal like 6780. And if in the meantime other people come with a different tip, then we can revisit this. It's mostly independent from orthogonal to 4844, so we can revisit it pretty much independently. Okay.
00:19:48.524 - 00:21:00.480, Speaker A: And I guess this matches sort of what my client was saying, but basically we would sort of include 6780. As we get the report, we can analyze the impact, see if there's a significant change that's worth making to the spec or not, but basically make that commitment today and potentially change the actual semantics of the EIP if we see something. But high level from like a quote unquote design point of view, it seems like all the client teams are on board with making this change. Does that make sense? Yes to me. Okay, any, I guess, last chance. Yes. So code mutability doesn't impact the immutability, doesn't impact the user space much, because code can still basically be modified via proxy.
00:21:00.480 - 00:22:03.380, Speaker A: But what are the advantages of it as on the Aragon side? So you said that it complicated your implementation. How is that when the state root and all should still function? Well, we have this extra parameter incarnation. So besides account address we always carry this incarnation. And we have to, for instance, kind of have to make sure that in case of reorg that we should arrive at different nodes, should arrive at the same incarnation or like account code version. Because otherwise if it becomes part of the state, then you might have divergent state and so on. So it's all doable and feasible. It's just an extra complication.
00:22:03.380 - 00:23:04.108, Speaker A: And the question is whether this extra complexity worth it. But I think if there is another, I might have missed the point. Are you saying that there is already an alternative ep that solves that is a better alternative? Are you talking about a new ep that you have in mind? So account code can already change on reorg because of create and create two. So when those are reorg, the account code also changes. Yeah, but with self destruct removed, we won't have that. I'm referencing specifically set code as a way to maintain code mutability. And is it an EP already or is it a new.
00:23:04.108 - 00:24:41.410, Speaker A: A new feature? Any idea? 6913. So I guess clearly I don't think most people on the client teams are super familiar with this. Maybe what I would suggest for this is that we move forward with 67 80 in like a month when we have the report. Obviously we're going to have to reassess that. I think that also gives time to people to read 60 913 and we could make that decision sort of at the same time, like whether we want to change 67 80 based on the report, whether we want to add 60 913 alongside it. But it feels like all the teams are pretty strongly in favor of moving forward with self destruct removal, and we probably don't have enough information to go beyond that today. So I guess, yeah, if anyone opposed to that, including 67 alie, we revisit the report or revisit it, sorry.
00:24:41.410 - 00:25:20.314, Speaker A: In a month with the report. In the meantime, we can also look at 60 913 and kind of go from there. Okay. And Marius has basically comments that says to do the same thing. So cool, let's do that. I'll update the spec after this call, but 67 80 is included. And just for the people implemented, be mindful that potentially there'll be changes to the spec based on, based on the findings of the analysis and people's readings of stuff like 60 913.
00:25:20.314 - 00:26:04.570, Speaker A: In the next few weeks. Yeah, thanks, William, for sharing your perspective as well. Light client. And Charles, you both have your hand up and you had them for a. Oh, and now Danny as well. Any of you? Yeah, I just wanted to say something before we got into the discussion about self destruct on the general CFI EIps for Cancun. And I would like to look very seriously at these SSD eips, because I don't want to get into a situation where we do whatever the absolute fastest thing is for four four four with the intention of changing it in just like a fork later or two forks later.
00:26:04.570 - 00:27:15.394, Speaker A: So I do think it's important to try and figure out what is the minimal amount of work that can be done so that it's kind of like future compatible with this SSC world, since that's what we've been talking about doing for a couple of years now, versus just shipping something in rop or hack a. And yeah, I think it probably makes sense to chat about that now, actually, because if we have basically four four four, it's already pretty big. Self destruct is sort of some medium sized EIP, and if we do need to make some SSD changes, it's probably good to be on the same page about what those are before we decide about doing anything else. Yeah, I don't know. You and Ethan both have your hands up. Do either of you want to share your thoughts on that? And what's either minimal or optimal set of changes we should do as part of Cancun, especially given port four four is the main thing you have to upgrade. So the two eips that should definitely be looped into are 6493 and 6475.
00:27:15.394 - 00:28:31.654, Speaker A: The first of them, 6493. That one defines how signatures should be computed so that they cannot conflict with other chains that may use RLP for the same transaction type. And the other one, 6475, it's quite a small one. It just defines how we want to represent optional values, because 4844 has an optional for the destination of the transaction. Right now they don't exist anywhere. And we should just decide, should they be like the unions are today, or should they be more compact or something else? The rest, how those trees inside the block are structured withdrawals, receipts and transactions, that we can also do later doesn't really matter for eight four four compatible like the 6493 is compatible with both the normalized transaction approach and the SSC union approach. So that one, like those three, they are not necessary for Konkun.
00:28:31.654 - 00:29:10.198, Speaker A: We can do them later without downside. Got it. Thank you, Andrew. I see you have your hand up. Yes. So a question about 6475 SSD optional. So if I understand if we implement it in Cancun, that affects 4844, right? Because 4844 has some optional two addresses optional, right? In SSD transactions? Yes, exactly.
00:29:10.198 - 00:30:15.838, Speaker A: I mean, right now they are defined as to use the union type there. But semantically what they should be are optionals. It could be that they are serialized the same that we want that, but it could also be that there is like a minor change. So at the very least we need to align and switch over to the new representation at the same time for a Devnet so that we stay compatible. And does anyone have a view on whether we will need union and SSD going forward? Because if we don't, then I guess it makes sense to just have this more limited solution for optional. Right now we don't use them. There are some designs that may use them in the future, but regardless of that, the optional is a more restricted type because it can only be none or some, right, while the union is a more complex type.
00:30:15.838 - 00:31:16.002, Speaker A: So for example, in the Nimbos implementation, those two are very different code paths. But sure, it could also be that we just encode the optional as a special case of the union. So it's just a syntactic. Sure, to make it clear to the reader what is meant. Right now, 6475 is not compatible with the union because it doesn't emit the selector, it uses the length instead. If it's empty, it's a none, otherwise it's a sum, but union also for the serialization, I think it's a bit underspecified because it doesn't define how to serialize the non value. So yeah, unions are not used today, but if we need them, we need to also decide how we want them to look.
00:31:16.002 - 00:32:32.470, Speaker A: Of course, sorry, I think it is specified. I think it's just selector equals zero is the n value. Okay. And then nothing else, I guess after. Yeah, so just one idea would be, if we just keep our options open here, we can simply implement, if nobody is using union at the moment, then we can implement the optional as you specified it, with the intention that if we do introduce unions later, that we make them a superset of the optional. Okay, so the difference then would be, I guess the 6475 would need an update then, just to allow for a future extension for multiple cases. But the non value, for example, that one could be reduced to just the empty, like the zero there doesn't provide any value, but the sum would have a leading one, right? That would be the minimum? Potentially, yes.
00:32:32.470 - 00:33:05.758, Speaker A: I mean, theoretically you could even. Well, it's not necessarily right. You could also say if there are only the two options, like none or something, then you also don't need to add the one, right? That's true, yeah. If it's a none and another option, I guess you have to guarantee that. I guess you need to do a special case that the second part is non zero length. I don't know if that's always guaranteed. Maybe that's always guaranteed.
00:33:05.758 - 00:34:11.320, Speaker A: Something to think through. But it might be possible to make the union a strict superset of what you specified already. Yeah. Another issue is when you update the spec, when there is a fork that adds another case to the union, and you go from two to three that you can no longer parse the old values with. Yeah, that is a good point. Actually, that might be an advantage of adding the one, because then it means that you can more easily upgrade existing ssv fields with additional options, right? Yes, exactly. So I will update 6475 then to have the one in the sum case and the non case I keep empty, and then also change the existing uses to use this type.
00:34:11.320 - 00:35:21.580, Speaker A: And so if we make those updates to 6475, are we fully happy with the state of it? Should we included pending those modifications? I think so. Okay, so does anyone disagree with that? And also I think we will need to update four. Eight four to use 6475, right? For the optional to address it? Yes, I'm sure there's at least half, if not all of the four. Four. Four authors on this call. So if one of them can make that pr. Once we have the 6475, once we have the 6475 changes done, that would be great.
00:35:21.580 - 00:36:53.244, Speaker A: Okay, so that's for 6475 and then there's 6493. So the signature scheme. I guess this is something we also have to include. Sorry, I'm trying to read the comments. Okay, anyone opposed to 6493? So the signature scheme for the SSD transactions, does this create the two concepts of transaction id versus transaction hash, or does this only have to do with signatures? It also includes the concept for transaction id. Yeah, it's been a while since I've looked into this, but I remember being pretty against referring to transactions by this transaction id concept and it being different than the transaction hash. I mean, it's the same, like it's just not a ketchup, but instead a hash tree root.
00:36:53.244 - 00:37:36.644, Speaker A: Right. One of the disadvantages involves now bringing in the democrazation aspects of SSC into the execution layer, whereas right now we don't have that minor thing. Right. But I think we need that eventually. Well, I guess maybe this is a dumb question, but if the 4844 transaction type is an SSD transaction, I guess its signature scheme is defined as part of void 44. It is. Right now.
00:37:36.644 - 00:37:55.896, Speaker A: Right now it's just the catch of the serialization with the prefix type. Got it. Sorry, I can't. You were saying something. I sort of cut you off. No, I'm just thinking. Okay, so I think I sort of misunderstood here.
00:37:55.896 - 00:38:52.350, Speaker A: I thought this was also sort of a requirement to get sorted now due to four four four, but it sort of seems like it isn't. So we can move forward. We have implementations of 444 right now, but I think doing things the right way is best. And we don't really have the concept of hashing an SSD serialized value. I think that's kind of weird. And so that's why we're talking about having the hash tree roots. But once we start having the hash tree route, we start having to have these other questions about, okay, how do we have the signature scheme safe? And also for the 6404, if we go with the SSE based transaction try later, then that one would have the advantage that those hashes and ids match if we do it the right way from the get go.
00:38:52.350 - 00:40:15.410, Speaker A: If it's the normalized approach, it doesn't matter, to be honest, because the hash is a separate leaf anyway in the tree. So yeah, there's that slight advantage as well. So I guess maybe a good next step here is we have the 4844 call on Monday. Is it possible to by Monday, like by that call, have the changes done in 64, 75 and 4844 so that people can look at that prior to Monday and kind of discuss 64 93 in the context of four four four and basically aligning those two on that call Monday. Okay, I see. Monday is a holiday. Whoever Ethan is, is there anyone else who you think can join and make the case for the EIP? I mean, it's mostly for review, right? 6493, right? Yeah.
00:40:15.410 - 00:41:14.640, Speaker A: Do we have to do the review during the call, or could we just. No, and we definitely shouldn't make a decision about including it or not in the four four four call. But I think if people want to review it, and we can have a first conversation about it in the Monday call, at least if people have questions or thoughts during the review, we can address some of them there. But it doesn't feel like people have enough context to make a decision about this today. Okay, so let's do that. So we include 64, 75. Ethan, if you can do the changes before Monday, that would be amazing.
00:41:14.640 - 00:42:04.900, Speaker A: We also need to do the changes on EIP four four to kind of reflect that. And we can bring it up on the call on Monday if people want to discuss it more. And two weeks from now, we can hopefully make a final decision on this call. Okay. Any other thoughts, concerns about SSZ? Okay. Daniel, you've had your hand up for a really long time. Is it just accidentally up? Sorry, me? Yeah.
00:42:04.900 - 00:42:59.380, Speaker A: In the opening when we were kind of getting signal from client teams, I just wanted to say that 478, which is cross layer, has the support from the consensus layer. Teams see it as a moderately high priority to open up trustless pool designs and the barrier to entry to make pools in the execution layer and that people are willing to get it in. Obviously, it's cross layer, so it takes two to tango. But I just wanted to make sure that information was surfaced here. Got it. Thanks. Yeah, I think it might make sense to actually cover this one and the BLS precompile next because we've talked about them quite a lot over the past years in the case of BLS and at least months in the case of 4788.
00:42:59.380 - 00:43:59.326, Speaker A: Yeah, I guess I'd be curious to hear from the El client teams. It seemed like most teams had appetite for maybe if one or two smaller eips beyond 4844 self destruct and now some of these SSD changes. But would I guess 4788 bls or. I know 1153 is another one that came up a lot. How do people think about prioritizing between those potentially smaller eips? And is there something I guess that people feel is like a must have or quite important to have? I'd stop short of saying, I'm sorry, I should raise my hand. No, go for it. I'd stop short of saying that we think 1153 is a must have, but we're basically remains pretty strong in favor of it.
00:43:59.326 - 00:44:28.670, Speaker A: Okay. And does that mean you would prioritize it over like, 47, 80? It's already done, so it's mostly testing over that. Got it. For us at least. The same is not true. Got it. And then Marek has a comment also saying, I guess 1153 would land slightly higher for them.
00:44:28.670 - 00:45:49.374, Speaker A: And light client has a comment, I guess, from the get side saying 4788 would land slightly above them. I don't know if anyone from Aragon has, like, strong opinions. Ender? Yeah, I think we would do 5920. It's a simple usability improvement. Yeah. Okay, so I guess this is a spot where we have 4788-2537 and 1153 are sort of the three, I'd say, that are like medium that some client teams feel at least somewhat strongly about. I don't know that we have to make a decision about those today, but I'm curious if are people potentially comfortable with saying that's all the scope will consider for Cancun? And maybe what we could do is literally remove everything else from CFI that's not those three.
00:45:49.374 - 00:46:32.460, Speaker A: So eleven 532-53-7478 as we start kind of working on the Devnet and implementing the rest of the eips, we can kind of revisit those three. I guess. Let's just start there. Would people be fine for now, restricting this CFI to those three? And that means basically removing all the eof stuff, which I think was the only other stuff that was CFI. Okay. And then. Yeah, so there's a couple of comments in the chat about some other tiny upcodes.
00:46:32.460 - 00:46:55.770, Speaker A: Maybe we can add those in the future as well. But at least I think we can remove the EOs stuff. Keep those three. So 1153 25 37. We're already CFI. We can CFI 47 80. Um, and then potentially if there's small things or other additions that come up, we can decide those.
00:46:55.770 - 00:47:46.216, Speaker A: And I know, I guess, Charles, you've had your hand up for a while to talk about one of those small things, so if you want to go ahead, we can do that and give context to people. Sure. This is actually my first ACD call, so I don't know what the protocol is, so I don't want to derail everything. Well, first off, I think that 1153 and 15 920 are quite useful people already talking about that. So I wanted to bring up M copy EIP 56 56, which is quite useful from a compiler perspective. It would enable us to reduce bytecode quite a lot. And it also just makes sense to have it.
00:47:46.216 - 00:48:34.072, Speaker A: There's call data copy, there's code copy, there's even Xcode copy, but there's no mem copy. And I don't think there's any contention about the spec or its usefulness. I even opened a pull request on Geth to implement it and it seemed quite straightforward. So I just don't see that there would be any problem with it. It would be super useful. Okay, thank you. So I guess we can have that in the list and have people look at it and potentially cfi it in another call when folks have had time to review it.
00:48:34.072 - 00:49:35.276, Speaker A: And generally we try to not cfi something on the first time it's been presented just so people can have some time to kind of digest it before. And I saw you posted in the east magicians thread so people can review it there. Andrew. Dano, I see you both have your hand up. Andrew. All right, so I just think that because we've been Stefan 1153 for quite a while and we moved it from Shanghai to Cancun and so on, and it seems to be a small yep that people are mostly in favor of. I think it would be fair to include it because otherwise it's been a lot of opportunity for people to look at it and we generally agree that it makes sense.
00:49:35.276 - 00:50:23.820, Speaker A: So why not? And small enough, I guess. Yeah. Does anyone have objections to that? It's true. It's been discussed for a long time. I know there were some people were sort of opposed from like a design perspective, but it seems like most client teams are in favor now. Yeah. Does anyone have an objection? Okay, so that means we include 1153 in Shanghai alongside four four four and EOF.
00:50:23.820 - 00:51:22.220, Speaker A: Sorry, no, four four four and the self destruct and the small SSD changes and the potential trade off there is like the two other ones that people mentioned earlier. So the 47 eightyight, those would be sort of CFI but not included for now. Does that make sense to people? Okay, so we can move 1153 as well to included. Dano, I see you have your hand up. Yeah. So I am in support of moving Eof out of Cancun. One of the things that's going to give us time is more time to get some core deep questions right.
00:51:22.220 - 00:51:54.612, Speaker A: We're still working on questions around whether or not gas observability should be in and about how create should be handling and a couple of other issues. And pulling it out of cancun solves a lot of the time pressure so we can focus on getting it right instead of getting it ready for Q three shipment. So as much as it hurts, I think it's the right decision. Okay. Antigar. Yeah. I would generally mirror that sentiment.
00:51:54.612 - 00:53:08.476, Speaker A: I would just want to say because I think it's always helpful to set at least some very rough expectations for the longer term roadmap. I personally would prefer if we could at least then afterwards aim to have Prague be like an UF focused fork and hopefully come relatively soon after Cancun instead of then basically shooting for combining it, I don't know, with Verco and have it be like nine months after or something that seems like because if we keep trying to combine it with another big ticket item, I think it just will keep slipping because it's too big to basically be the second place in a fork. So I think at some point we just have to then say, okay, it'll get its own fork, and because most of the implementations will be ready at that point, it will just be a quick fork. Yeah, I think it does make sense that think about this way. I don't want us to commit strongly to something today when we don't even have implementations for Cancun. But yeah, it does seem that EOf and vertical trees are like the two potential next big things. EOf is potentially smaller and farther along.
00:53:08.476 - 00:53:40.148, Speaker A: And it would almost be sort of like we did with the merge and withdrawals where you have the big fork with 4844 and then the small fork with EOF. So, yeah, we can definitely discuss that. I think as we have a clear picture for Cancun, that's probably the highest level decision to make so that we can get teams to work on it in parallel. And Lucas. Yeah. To be clear, I'm not saying Eof is small. I'm saying though that if, you know, the merge and withdrawals, the merge was much bigger than withdrawals, even though withdrawals were not trivial.
00:53:40.148 - 00:54:11.930, Speaker A: And it feels like we're in a similar spot with like 4844 and EOF, where four. Four four is much bigger and obviously sort of can't quite be combined practically with EOF. But yeah, EOF is also big and can maybe be a smaller. It's a smaller big thing for an. Basically, yeah. Greg. Oh, Greg, you're on mute.
00:54:11.930 - 00:55:01.580, Speaker A: I am unmuted. I'd like to reiterate just that we commit to getting eof in at some point. The basic functionality is the same as Eip six one five, which I proposed in 2016. So we've been discussing this for seven years. It's just time. Well, I've got work I've been wanting to do on the VM for seven years that I can't do until this is in. Yeah, I mean, I think, look, all the client teams are pretty on board with EOF being too big to be included alongside Cancun.
00:55:01.580 - 00:55:39.124, Speaker A: I think the strongest commitment we can make is to have it be the main thing for the next fork. But even that is probably not something we can 100% agree to today. And there's some comments in the chat to that as effect. Yeah. Okay. So I think we covered pretty much all the proposed eips. Maybe to just recap sort of where we landed.
00:55:39.124 - 00:55:59.120, Speaker A: So four. Four. Four is obviously part of included for Cancun. 67 80. This is a self destruct removal EIP. We also agreed to include this, review it in a month or so when we have the impact analysis out. And in the meantime, we can also look at the set code EIP, which was 60 913.
00:55:59.120 - 00:56:27.252, Speaker A: And then we agreed to include 64 75, which is the SSD optional type. There's still some changes that need to be made to that. Ethan will do them in the next couple of days. And we'll update four at four to reflect those changes as well. Lastly, we agreed to include 1153 alongside that. So this would be kind of the current scope for Cancun. Two things we've.
00:56:27.252 - 00:56:46.284, Speaker A: Well, 27 35. The BLS recapal was already CFI. It stays as it is. 47 eightyat we also CFI. And then we remove all the Eof eips from CFI. And that's basically we should CFI the signature scheme as Well. 64 93.
00:56:46.284 - 00:57:18.090, Speaker A: But we didn't agree to it quite yet. Does that make sense to people? It. Okay, cool. And. Yeah, so on Monday's call, we can chat about the 64 93 EIP as well. A bit more. And then two weeks from now, we can bring it back up here.
00:57:18.090 - 00:57:55.776, Speaker A: Yeah, so. Okay, so there were two more things on the agenda. First was also related to 4844. The conversation around, like, the blob reorgs and the new payload spec. I know Peter and Danny, we sort of discussed this on the Cl call last week. I don't know if there's any updates from either of you or don't. I don't have an update.
00:57:55.776 - 00:58:12.456, Speaker A: I know Peter wanted to spend a bit more time thinking about it. And I know maybe everyone else who hadn't thought about it that much. Wanted to spend some time thinking about it. So it's something we can obviously talk about now. We can talk about four for four call. It's a break. And change to the engine API if we go down that route.
00:58:12.456 - 00:58:54.480, Speaker A: So we need to figure it out sooner rather than later. Peter, any thoughts from your end? You're off mute, but we can't hear you. Or at least I can't now. We can. So, essentially, what I was saying is that I was working on 4844, but not this specific part. So I don't really have any update. Okay.
00:58:54.480 - 00:59:25.000, Speaker A: Anyways. Okay. So we can keep chatting about this on the discord as well as it comes up. But it's just something we should be aware of. Basically, we need to agree on a design for this and then last thing we had on the agenda. So Devnet five, there's been a lot of work on this this week. I don't know if anyone wants to give a quick update to kind of share where things are at.
00:59:25.000 - 01:00:14.680, Speaker A: Sure, I can do that. Basically Devnet five, we had a dry run starting last Friday and then we had the actual launch yesterday. UTC we are running this with 1000 validators. We have three working Cl clients, Lighthouse, lostr and Prism, and we have four ish ER clients. Nevermind Ethereum, JS, and the fork of everyone and a fork of gas. Currently we have working block scout, Forkmon, and Iftat. All the tooling is coming online now and we don't have a blob scanner working just yet, but hopefully it should come online by the end of the week.
01:00:14.680 - 01:01:03.154, Speaker A: We currently don't do any fuzzing, but I'm open for it. Probably the timeline for this is a week or two, maybe more. I would like to see more clients getting onboarded. Nice. We also have the Devnet four still running for this and we would like to shut that off, hopefully end of the week if there is no opposition for that. Doesn't seem to be so we can go ahead and shut it down. Yeah, thanks for sharing the update.
01:01:03.154 - 01:01:59.120, Speaker A: Anyone else have thoughts, questions? I also linked in the chat the specs that you would need to do if you want to participate. Nice. Thank you. Okay, so yeah, I guess that's it. Anything else people wanted to chat about today? Okay, well if not, then I guess for the next call figuring out this SSD stuff, and if there's any other, I guess, small eips that people want to discuss, this is probably like the beginning of the end for them to be considered. Yeah. So please add them on the eight magicians thread so we can keep track of them.
01:01:59.120 - 01:02:10.630, Speaker A: But yeah, thanks everyone. We'll talk to you all soon. Thank you. Thank you. Thanks everyone. Bye.
