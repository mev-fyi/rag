00:00:21.290 - 00:00:59.998, Speaker A: Today I'm going to be talking about Metamask. Metamask is project few ideas, some experiments on how we can do Ethereum using the same tools, the same web browser you use every day. So I'm sure we've all seen this before. This is Metamask's challenge, adoption. How do we improve adoption of Ethereum? We're at the very tip of the innovators. You're lucky to have found yourself here. But how do we push further down into the curve? So, welcome to the future.
00:00:59.998 - 00:01:31.340, Speaker A: Devcon one, you've made it. You're launching your rocket ship building company. You've decided to do crowdfunding, and you're going to release your crypto tokens on the blockchain, and you're going to run your company on futurgy, taking the wisdom of the markets, the prediction markets. That's fantastic. So you all want in, right? You want to buy some of this stock, this crypto token? Yeah. Okay, cool. So what's the URL you say? Yeah, let me just send you a link.
00:01:31.340 - 00:02:13.670, Speaker A: Well, first you have to download this browser. A few of you say, yes, I'll check that out later. Unfortunately, we lose a lot of our audience here. So what can we do about that? Well, we can't provide the exact same tools of, say, miss, can't provide the exact same experience, but we can sort of tweak our position on this spectrum of control versus convenience. So if we give up a few guarantees, we trust in a couple things. Let's see what we can get. So this is a very early prototype of metamask.
00:02:13.670 - 00:02:39.294, Speaker A: What you see here is a normal chrome browser. This is no additional installation. I'm not running a local node. I'm not using a plugin or anything like this. At the very top, you'll see next to the name Metamask, you see a second URL bar. And this is a sort of browser within the browser. And so through some black magic and browser hacks, I've gotten it.
00:02:39.294 - 00:03:27.226, Speaker A: So for most cases, you can run a dap right there in your normal web browser. At the top, the normal URL bar, you can see the same URL that's in the inner URL bar, is repeated, and as such, you can just send a link to someone of this DaP running on the Internet. Again, no installation. Let me show you a few other parts of it. This can have a few other mistlike features, like some recommended dapps. And of course, critical is the identity management. So what is it? It's a sort of browser in the browser status is pretty close to completion, though it's rather tricky.
00:03:27.226 - 00:03:53.666, Speaker A: As I mentioned, some black magic has some bad side effects, so it just requires some iteration on that. Benefits are zero install for the user. It separates keys from the Dap. I'll explain that a little bit more, but basically you get to keep your secrets to yourself. The keys can just be stored on your local machine. You don't need to send them to me or anything like this. Though there is some reliance on some external servers.
00:03:53.666 - 00:04:38.120, Speaker A: Part of this is like a cores server that's just to get around some security concerns that the browser has built in. And it has a mist like feature set where you can have recommended depth and things like this. And a few notes on Mist versus Metamask. I don't really think of them as competitors. Mist is built is very purpose built. It has the context of interacting with ethereum depth built into it. Metamask is a bit constrained in what we can do with the existing browser and just sort of adding a bit of plugin, but we try to get as much mileage out of it as possible.
00:04:38.120 - 00:05:45.306, Speaker A: So that's one piece another, and I'm not the only one with this idea. What if we could just use it without the user having to do all this setup? So a lot of people that are building dapps have made their dapps just sort of work on the open Internet, like a normal web app, and so you can navigate to them directly. And they have some mechanism for reading from the blockchain, perhaps through a centralized server, perhaps through a light client. One significant caveat is that in order to do the transaction signing, in order to do the key management, you have to give that private key to the DAP, and maybe it keeps it in local storage, maybe it doesn't send it home, and maybe a couple of dapps have done this correctly. Then along comes one that decides to send your key home and run off with your funds. This would have a significant negative impact on the Ethereum community's reputation as a whole. So it's sort of a dangerous practice to suggest to tackle this one.
00:05:45.306 - 00:06:57.870, Speaker A: I have a project in early research stage right, so the problem here is that you have to give the passphrase to generate the keys to the DAP. So one possible tool we have here is a cross domain key storage library. This would be a tool that a DAP developer could decide to use to do key management when not in an environment like mist or the browser browser. What it does is while the keys are still on the same machine, they would run in a sandboxed iframe and the external DAP would not have access to the keys, but could make a request for a transaction signing. Again, this doesn't require sending it to the server, it can stay on the same machine, and the browser ensures the security. Another advantage to this is multiple dapps that use the same domain, be it keystores, namask, IO, or something like this. All the dapps that use that same library would be able to use those same keys.
00:06:57.870 - 00:07:39.790, Speaker A: You wouldn't have to import them every time. So this is a library for DAP devs. It's still in a research phase, but you still get the zero install for the user. The blockchain data source is still up to the DAP developer, but you get to separate the keys from the DAP and you get the keys across daps I'm mostly out of time, but I'd like to talk about one more thing. Let's say browser in the browser. That's quite a strange experience. I'd rather just navigate to the DApps directly, but I want to also have the control of the keys without the Dapp developer opting into this cross domain storage.
00:07:39.790 - 00:08:36.142, Speaker A: Well, one thing I'm working on is a plugin for Chrome. It's essentially a lite client in your browser, and you can see in the upper right there's a little metamask logo and it has a one there suggesting that there's one pending transaction or unsigned transaction that's awaiting your attention. So as I just said, this one is actually quite along and I could probably launch it within the next couple of months after a little polish. So as a DAP developer, what do you need to do? This was all designed in mind of the normal DAP spec as it would run in web3. You don't need to do anything special for it to work in Metamask. Many people, though, are not currently writing their Dapps so that they will work in mist, perhaps by accident. All you need to do is check if web3 is in the current JavaScript context, and if it is, use that.
00:08:36.142 - 00:08:52.930, Speaker A: If it's not, use whatever you're using already. Thanks you it's.
