00:00:00.560 - 00:00:34.315, Speaker A: Good morning. Today is the 2nd of October and this is EOF implementer call number 59. We don't have a large amount to discuss. Part of that's because of the second item. Hector formally got split and EOF is going to be in Osaka first. Let's start with testing update. I think I want to move this to the top of the agenda because there's way too many times where we go through stuff and we got like you know, 10 minutes for testing and I think at the stage we're at, this is probably the most important item to be discussing.
00:00:34.315 - 00:00:42.795, Speaker A: So Mario, do you have any testing things we should be aware of and I guess ask the other teams how it's going. So let's go ahead Mark with Mario.
00:00:43.135 - 00:01:40.165, Speaker B: So yeah, I think the most important part is that the release that contains the Prague, the fixtures on top of Prague are broken. So because there's. I think there was bug in Besu that was caught in DEVNET 3 so I think that was what we are seeing on the fixtures but I didn't have the time to really look into it. So I haven't fixed it, I haven't refilled. But apart from that I think please, the bottom line is just refrain from using EF on top of Prague and just stick to using UF on top of Cancun until further notice. We will make a release where this is fixed and probably the release is going to be better to hold off until DevNet 4 is finalized. So yeah, please just keep running Cancun for now.
00:01:40.165 - 00:01:58.025, Speaker B: What else? I've been reviewing some PRs. There's not much there. I mean it's just chugging along PRs that need to be released in Merged. Apart from that, I don't think there's anything else from my side.
00:01:58.645 - 00:02:05.861, Speaker A: So I've kind of been in fuzzing mind space. What was the basic bug that was breaking the Prague release? It's.
00:02:05.933 - 00:02:17.305, Speaker B: It seems that there was a gas accounting issue warming the the one of the accounts that was. That should have been warm was not.
00:02:17.605 - 00:02:19.215, Speaker A: Oh, is it 7702 related?
00:02:19.325 - 00:02:20.861, Speaker B: 7702 related. Exactly.
00:02:20.971 - 00:02:21.410, Speaker A: Yeah.
00:02:21.520 - 00:02:39.745, Speaker B: I guess if you don't 7702. If you don't run 7702 tests from that release you should be fine. But still I wouldn't bother just focus on Cancun and EOF on top of Cancun you should be fine.
00:02:40.085 - 00:02:57.569, Speaker A: But the point of that release was to test EOF and 7.7.2. So that's kind of a critical one. Yeah. Geth is starting to push their stuff out, so maybe we should look into doing a cross test with Geth and seeing if we get the same results. So. But they're not. Get isn't completely off on me yet.
00:02:57.569 - 00:03:16.485, Speaker A: They just got the validation. Okay, PRs. All right. Anything else on testing?
00:03:19.395 - 00:03:39.095, Speaker B: Just to clarify, I'm not completely caught up on review, so there are some that I have to review this week. But yeah, if you need a review. I haven't. Pen, please just give me a pink. I will try to get to it.
00:03:39.835 - 00:03:43.741, Speaker A: Okay, Testing focus is going to be on Devnet 4 for the short term, right?
00:03:43.883 - 00:03:48.089, Speaker B: Yeah, exactly. So this week is. I'm fully on depth for.
00:03:48.137 - 00:04:17.435, Speaker A: Yep, yep. Okay, cool. So testing, get that done first. Let's then do client updates. Any clients have any major changes? Rather than go one by one, I'll just do a blanket call. Nothing from Dragon. I don't see non mind, I don't see gu face has got nothing big changed.
00:04:17.595 - 00:04:22.451, Speaker C: Dragon just wanted to say thumbs up, wrong button.
00:04:22.483 - 00:04:38.685, Speaker A: Okay, cool. Yeah. All right. Compilers who don't have any compiler representatives, so. Oh, speak of the devil. Hey, Charles, we're on the compiler's part of the agenda. Anything from hello?
00:04:42.385 - 00:04:58.725, Speaker D: No, but we realized that Vyper has this create from blueprint built in and it needs to be reworked, which is a little bit annoying.
00:05:01.195 - 00:05:04.935, Speaker A: Okay, is there any structural changes that we might need for that?
00:05:08.595 - 00:05:16.375, Speaker D: Well, it would be super convenient if there were like UF create from EXT contract.
00:05:17.755 - 00:05:21.975, Speaker A: Okay. Probably not in Osaka, but we could put that on the horizon.
00:05:22.995 - 00:05:28.305, Speaker D: Well, I mean, by the time we rework it, we won't need it anymore.
00:05:30.045 - 00:05:31.225, Speaker A: Would have helped.
00:05:32.725 - 00:05:38.265, Speaker D: Okay, yeah, because of the EXT code copy ban.
00:05:41.965 - 00:05:51.545, Speaker A: Yeah, you have to opt your blueprints into working it and you'd explicitly be blueprints. You can't blueprint off of any random contract now.
00:05:51.975 - 00:06:21.605, Speaker D: Right, right, right. You know what might be helpful is I don't know if anybody has the time but to draft the bytecode for a factory deployer. As Peter. Sorry, Peter pointed out, you know, you can delegate call into a contract that does eof create.
00:06:30.185 - 00:06:30.473, Speaker A: Right.
00:06:30.489 - 00:06:49.655, Speaker D: Now, blueprint prints are super convenient because you just prepend, you know, prefix to them and then they. You kind of just like the init code just works. So it'd be cool if we had something similar that converts like INIT code contract into a factory contract.
00:07:01.195 - 00:07:05.975, Speaker A: Okay, those are good points to dwell on.
00:07:08.555 - 00:07:12.085, Speaker C: Would TX create be of help here?
00:07:14.265 - 00:07:23.285, Speaker D: I don't think so, because usually you pull the code from on chain somewhere.
00:07:24.945 - 00:07:38.015, Speaker C: Yes. This is my question. What reason for the code being unchained? Because in TX Create the code is hashed, so probably the hash could be on chain.
00:07:39.515 - 00:07:43.935, Speaker D: I mean the user doesn't need to provide the contract code.
00:07:47.515 - 00:08:16.005, Speaker C: But it feels like the cost of the call data or what is the reason for that being useful. Because the user needs to provide in the old way, in the legacy way. The user needs to provide the address of the blueprint, as I understand. Right.
00:08:17.225 - 00:08:21.969, Speaker D: I mean not the end user. I mean like the contract.
00:08:22.017 - 00:08:24.725, Speaker C: No, I mean the consumer of the API.
00:08:25.065 - 00:08:30.299, Speaker D: Yeah, yeah, yeah. They provide the address and then deploy it and then copy the code and deploy it.
00:08:30.427 - 00:08:33.255, Speaker C: So they provide the code in TX Create then.
00:08:35.275 - 00:08:40.895, Speaker D: Yeah. With TX Create, the end user would need to provide the INIT code. Right.
00:08:44.435 - 00:08:45.175, Speaker C: Why?
00:08:46.755 - 00:08:48.495, Speaker D: Unless I'm misunderstanding.
00:08:48.955 - 00:08:57.415, Speaker A: Currently TX Create requires it to come from the transaction. We could revise it so you could point to an address and use that as the blueprint.
00:09:00.105 - 00:09:04.805, Speaker C: That as well. Yeah. I was just thinking about the vanilla tick grade as we have left it.
00:09:07.625 - 00:09:23.179, Speaker D: Yeah. I mean the issue is that the user would need to. The end user would need to include the INIT code in the transaction data, which is. I mean you might not even know until runtime which address is selected. Code is.
00:09:23.227 - 00:09:43.335, Speaker A: Right. So you would read it. TX Create reads the hash from the. From the stack. It doesn't do it as an immediate. So you could take in the address as a call arc, pull it in from call data and then call TX Create. And if when it recognizes it's an address, it'll use the code at that address, if that code exists.
00:09:43.335 - 00:10:13.241, Speaker A: But I think we get an issues relating to would it be a nip code or would it be runtime code? Would be runtime code copy and then rewrite the data section. Would that be sufficient? So I think that's what we would need to investigate because that does light into some of the requests that Vitalik mentioned once he did want to have more cases where you could just copy contracts is the preferred deployment mechanism is.
00:10:13.273 - 00:10:15.449, Speaker D: Kind of what Create from Blueprint is.
00:10:15.617 - 00:10:31.275, Speaker A: Yeah, it's a more formalized copy. Yeah. Okay. That'll give us stuff to think about. Maybe talk about dev content and fodder for some of my talks. Maybe.
00:10:31.575 - 00:10:47.985, Speaker D: Yeah. So I don't know if anybody has. Because we're a little bandwidth constraint. So if anybody. And that might be useful in general. So if anybody wants to look into that, you can like DM me and we can talk about how it works. But I think it's Fairly straightforward.
00:10:49.405 - 00:10:50.093, Speaker A: Yeah.
00:10:50.229 - 00:10:58.305, Speaker D: The other thing would be I think this create from contract is actually pretty clean. I like it.
00:11:01.805 - 00:11:23.075, Speaker A: Okay. Vyper is the only compiler online, so we'll go on to spec updates. So I guess that'll be has contract. So maybe actually go ahead.
00:11:23.775 - 00:11:41.845, Speaker D: Yeah, just about the compiler again, how sure are we about including it? Because we have a prototype but we don't really want to like clean it up until. Because that's like more work which is going to be wasted if it doesn't go in.
00:11:43.545 - 00:12:41.827, Speaker A: So it got pumped out of Pector because Pector is just too huge. And the current talk in ACD is that Osaka, the Osaka Devnets are going to add peer DAs and they're going to add EOF and that's before they consider any other additions. So that's kind of going into some of my next discussions about what the current shift that we need to do with eof. So I'll probably just start with that and let's set the table. Write this backup migration. So for people who haven't been calling into all core devs or reading the news, like I just mentioned, EOF is out of Pectora and that is so they can attempt to ship Pector possibly by the end of the year at the latest. Q1 with all the other features that were in Pector was looking to ship even later than that.
00:12:41.827 - 00:13:33.331, Speaker A: So they decided that what they had in Devnet 3 alone is enough to justify a fork. So they're building DevNet 4, they're doing changes to what's in DevNet 3, they're contemplating super emergency stuff, you know, stuff that is critical and must go in with the next six, three to six months or it's going to be a problem. They're discussing things like maybe a blog limit blob limit increase and other smaller changes. But that's the only thing that's on the table for Petra is stuff where six months is too late for the help of the network. So in that regard the door for Petra is closed. And as part of that discussion, the remaining stuff from Petra, which is right now just pure descent EOF in about four stray EIPs that haven't been formally scheduled yet, but there's strong preference to schedule them. Those are targeting Osaka.
00:13:33.331 - 00:14:42.955, Speaker A: So the decision given on ACD and the process of going forward for is that DevNet 4 will come out here in about a week or two and then they were going to push to get a Osaka Devnet zero started that will include just peer to S and just eof. So where that puts us with implementations for the clients. We need to target Osaka for EOF activation. That also means tests need to target Osaka, including moving tests. Considering that we've never really hard coded in Prague in too many tests, I think we've always understood that Prague was too big and that if there was going to be any split of Prague that EOF was going to be in the second half. So this really I don't think is surprising. It's something we were prepared for, it's something we're embraced for but now it's, it's, it's going to be in Osaka or it's never going to ship is kind of the vibe I get.
00:14:42.955 - 00:15:47.241, Speaker A: And there's a lot of strong pressure to have a chip they're targeting. I think Q3 is I think the current target. So given that that we have six more months to refine the spec that opens the door for some changes that we're pushing off saying that we could not do it in time. And I think though the top two items on that list, the first one I would actually I probably put up in reverse order in my notes is has contract and how we're going to handle 721 and 1155 contract size. I think we have time to really figure that out and really get it locked in for what's really going to be the long term solution. Whether that's a new opcode, whether that's exposing ext size, ext hash, whether that's not putting them in and sticking to it and saying this is the plan going forward. We have time to work that out and figure out what the correct solution is.
00:15:47.241 - 00:16:15.469, Speaker A: I think that also gives us time to prototype what it would look like to show how these things would work with some examples. So that's I think probably the big game from this. The second one I'll bring you this with some of the comments I read in gets merging the EOF code. So they started merging validation. They just pushed that this morning. They're going to be moving bit by bit and this is into Geth main. Not a fork but it's actual Geth main.
00:16:15.469 - 00:16:55.585, Speaker A: So this is, I view this as good news that it's going into main so we're going to have it in main and three clients mostly functional. In the fourth client, well nevermind has emerged it yet. There's still a few more bugs but this, it's, you know we're, we're in the last lap, absolutely in the last lap of getting the shift. But some of the comments that they had in there. There was concerns about the opcodes, the return from the ext op codes, ones and twos. Part of it was was a test coding issue. I couldn't search the test code as well to see where the ones and two returns were different.
00:16:55.585 - 00:17:38.304, Speaker A: So I updated the tests and I normalized all ext return codes and EOF create return codes to use the same standard set. So we can do a search for these. But their concern their code is it looks like they have to hatch out different errors and look for specific text and errors. One of one of the arguments is gets to change their code to make it easier. But it also opens up the design question of do we have the correct return codes for these and should we step in and see what's going on with that. So those are I think the two doors that are open right now and there might be room for more stuff if it's brought up. But I personally I'm not looking for new items and so that would be people needing to bring new items up and say that those would need to be revised.
00:17:38.304 - 00:17:41.384, Speaker A: Comments.
00:17:46.215 - 00:18:55.055, Speaker C: There were some minor items that we are sort of clean up more of a cleanup and convenience changes that we have been talking about like the E of create order of arguments and this max stack height that could be revised and made more convenient to use. Yeah but these are more like cleanup stuff. We are removing the hashing of the INIT container in E of Create and one name change for the opcode students only. The hashing of the INIT container is one that might be more involved. What up code are we looking Return contract to return code. Just not to say contract because for the EVM it's kind of no big ish.
00:18:57.955 - 00:19:04.255, Speaker A: Okay. So if we have cleanup items like this, you know this week and next week are the right time to bring these up.
00:19:05.965 - 00:19:06.293, Speaker D: Yeah.
00:19:06.309 - 00:19:13.867, Speaker C: So we considering doing those after Devnet 4 but I guess this means Osaka's Defnet 0.
00:19:13.954 - 00:19:20.869, Speaker A: I'm thinking we target 1. I think that as Osaka Devnet 0 we ship what we had that was ready to go.
00:19:20.917 - 00:19:23.557, Speaker C: Yeah, I mean after like after zero.
00:19:23.741 - 00:19:27.557, Speaker A: So yeah, I think that Osaka one is when we start shipping some of these wishlist items.
00:19:27.581 - 00:19:29.065, Speaker C: Yeah, yeah, yeah, yeah, totally.
00:19:30.495 - 00:19:38.879, Speaker A: And part of wanting to ship it as is in Xero is I kind of want to show that we were ready to go forward if we needed to with what we have.
00:19:39.047 - 00:19:40.355, Speaker C: Yeah, totally agree.
00:19:43.855 - 00:20:05.765, Speaker D: Does this mean. Sorry, I've been out for a few weeks. I was taking some time off but does this mean that the spec is open for adding Some of these cleanup or kind of nice to haves that were tabled before, like the encoding of immediates, for example.
00:20:07.385 - 00:20:44.751, Speaker A: For small items, I think the VAR args might be a bit too much of a change. The variable length integers, but like order smaller things like, you know, stack order names and things that are. That downstream users have requested. So this. The variable length integers would put a limit of 64k on contracts, but right now we're still at 24. So that's something I think we can address in Amsterdam or Bogota. But that would be the sort of things we might be able to discuss.
00:20:44.751 - 00:20:56.885, Speaker A: Anything that goes in, we realistically need to be able to do in like a month or two and then be ready starting in Q2 to be in ship on. Ship on sort of notice mode.
00:21:01.465 - 00:21:02.525, Speaker D: Yeah. Okay.
00:21:05.465 - 00:21:26.455, Speaker A: And I know we got lots of pushback in all core devs over ERC721 calls. Ext call is a smaller one. Stack order is a smaller one. Hashing in the tender has been something we've been worried about for a while. And renaming is. I mean we could probably do that for devnet zero if we need to. So.
00:21:26.455 - 00:21:42.717, Speaker A: But if there's something of that level, we can look into it. And I think, I think var. My personal opinion. Var enter best served with a separate set of codes because there will be times you don't need them and there'll be times they're essential.
00:21:42.891 - 00:22:03.657, Speaker D: But yeah, I think that, I mean, my opinion is that they're like generally useful. I think it could also really simplify stack opcodes because with. I mean, yeah, if you have a variable length immediate, it really opens up some possibilities.
00:22:03.801 - 00:22:21.055, Speaker A: But yeah, yeah, variable length push would be cool. That would solve a lot of issues there, free up a lot of opcode space. But I think people would freak out if we got rid of most of the push instructions.
00:22:23.275 - 00:22:30.535, Speaker D: Yeah, variable length push, variable length swap would really. Yeah, it would solve a lot of problems.
00:22:43.325 - 00:23:07.715, Speaker A: Okay, so what are people's thoughts? Is it stuff we can resolve today or should we get plans for next week to address these six items on the list and for two weeks? I think we can address them now. Okay.
00:23:09.455 - 00:23:10.111, Speaker C: If you have.
00:23:10.183 - 00:23:35.285, Speaker A: If we need additional person to say yes, let's make it three. Okay. So that. That's basically the end of my agenda of what I want to discuss today. Do we want to go back over some of this? Do we want other issues to be discussed?
00:23:39.265 - 00:23:58.195, Speaker D: I've got a question, but it's. Maybe it could be taken offline. Let me know. Basically, I want to understand the extent of the gas introspection limit, I've been working on EIP to convert gas to eth and I'm wondering whether that would be in bounds with EOF.
00:24:00.735 - 00:24:58.915, Speaker A: So we can talk to some of the L2 people on this. One of the reasons I want to be as far away from gas as possible is some L2s are seriously going to be approaching multivariable gas in the future. Not just changing the gas schedule, but having different gas buckets and different values for things like storage. Things like really expensive math operations like a check would go from a different bucket because that's really expensive in zk stuff that's expensive to do a fraud proof for might have a different bucket. So there's, there's a push to go into multivariable. So as far as, you know, giving access to some of those, the gas introspection, anything that presumes a single variable gas, I think is, is going to make those multi variable gas transitions more difficult. So that's whatever we have with that would, would need to take that into account somehow.
00:24:58.915 - 00:25:21.837, Speaker A: Because I could also see, I could see some. If this is valuable on mainnet, I could say valuable on L2 to say let's convert my storage to ETH and you know, do arbitrage with that. Whether or not they want. It's a separate discussion. But if it's possible on L1 then it should be possible on L2 I guess is the short, the short answer. And L2s can decide how they want to ban it if they wanted to, or address it or not worry about it.
00:25:22.021 - 00:25:35.017, Speaker D: So multi variable gas is like multiple gas prices or multiple gas limits because the gas variable is still just like how much gas is available. Right. So like a single number.
00:25:35.081 - 00:26:14.335, Speaker A: No, it would probably be both. So there would be a separate and. Yeah, so there'd be like gas for execution, gas for storage, gas for cryptography, and there'd be separate limits and there would be separate transaction rates between one storage gas to ether and one execution gas to ether or whatever their native token is, LP token or arbitrum token, as far as what they would burn. So those are. Yes, it's like full, very multi variable. Your contract could fail by maxing out on any of the three. Your, your, your gas, your cost per transaction could go through the roof because of any of the three.
00:26:14.335 - 00:26:37.841, Speaker A: If someone's running a storage spam attack, storage could become too expensive for everyone. So that's, you know, that's some of the issues that are open for multi variable gas. But Based on some of the. Some of the experiments being conducted on alternative layer one chains, I think we're getting the answers to some of our questions for some of those concerns. So there's. Yeah, the. That it'd be full.
00:26:37.841 - 00:26:46.805, Speaker A: Full and fully independent and fully separately controlled of each of the gases and an opcode might consume multiple from multiple buckets at multiple rates.
00:26:50.785 - 00:26:54.427, Speaker D: Yeah, I think I have some more questions about that, but I'll take it offline with you.
00:26:54.611 - 00:27:59.405, Speaker A: Okay. Okay. So my quick take is we need to get a plan to get the Osaka activations done, but that can wait until we're done with Devnet Forge. So probably next week if Mario has it. I'll get a PR to move everything to Osaka once Devnet 4 is a little less obscuring the battlefield. And that means we would need clients to adopt to this and execute and open up Osaka. And I think that's.
00:27:59.405 - 00:28:25.875, Speaker A: Yeah, that's probably the biggest changes. There's no other comments. I guess we can get a half hour back. Everyone seems pretty burnt out from the. From the pushes and get some good valuable time on.
00:28:37.545 - 00:28:38.017, Speaker D: My dot.
00:28:38.041 - 00:28:44.285, Speaker C: Nitpick. It's has code, not has contracts or has code. Yeah, what was reading.
00:28:48.665 - 00:29:48.285, Speaker A: Has code. It. This one's easy. Let's do this one first. That way we're sure to accomplish something next week. All right, thanks everyone. See everyone in two weeks.
