00:00:05.130 - 00:00:05.680, Speaker A: You.
00:00:07.570 - 00:00:21.070, Speaker B: Well, we're going to get started then. We're not completely full. I'm a little bit disappointed, counting all the seats. And he's going to tell me that we didn't get the full 220. Is my mic still on, by the way?
00:00:21.140 - 00:00:24.846, Speaker A: No, I think we're around 193 now. Unless I miss some people.
00:00:24.948 - 00:00:29.906, Speaker B: Not acceptable. Non acceptable. London, come on. Um.
00:00:30.058 - 00:00:30.454, Speaker A: All right.
00:00:30.492 - 00:00:30.854, Speaker B: Come on.
00:00:30.892 - 00:00:33.186, Speaker A: You had learned from the airlines, you got to overbook.
00:00:33.378 - 00:00:37.590, Speaker B: Well, we wanted to do that. We wanted to overbook by like 200.
00:00:37.660 - 00:00:38.514, Speaker C: Just strict.
00:00:38.562 - 00:00:44.934, Speaker B: But then you have to turn people away and it's just not nice. Anyway, we're going to get going, offer.
00:00:44.972 - 00:00:46.610, Speaker A: Them vouchers for the next meet up.
00:00:46.700 - 00:00:50.540, Speaker B: That's a good idea. Presale vouchers, especially since it's free.
00:00:52.910 - 00:00:53.322, Speaker A: Right.
00:00:53.376 - 00:01:08.814, Speaker B: So important things for tonight, hashtag is Ethldn. So if you're tweeting, there's Wifi also login on the screen. Please do tweet as much as possible. We find that really helps getting the numbers up for the next one. Which is when?
00:01:09.012 - 00:01:10.514, Speaker A: 4Th may the 4. May.
00:01:10.552 - 00:01:11.554, Speaker C: May the fourth be with you.
00:01:11.592 - 00:01:12.638, Speaker B: May the fourth.
00:01:12.814 - 00:01:13.780, Speaker A: Very good.
00:01:14.470 - 00:01:17.506, Speaker B: That's awesome. It's going to be like that all night long, right?
00:01:17.528 - 00:01:17.726, Speaker A: Joke.
00:01:17.758 - 00:01:58.900, Speaker B: That's a joke. Sponsors socket. Very cool company, if I may say so myself. Oh, you've heard of it? So the idea of the stuff we're doing is we're building this Ethereum computer which allows you to share rent your stuff at home or your smart objects. But what I really like about it is even if we ship a small number of units for a mainstream piece of consumer electronics, say 100k, there's currently seven k nodes out there on the Ethereum network. So we would decouple the number of nodes and paint the map red with ethereum nodes and pretty much eclipse bitcoin, which is very exciting to me. So there you go.
00:01:58.900 - 00:02:28.106, Speaker B: Cryptocompar. Really cool site to check the price of ether and other cryptocurrencies, they also have a very nice forum, which apparently is not a troll box. So go and check that out, which is really nice because that's the problem with the. You like trollboxes? I hate trollbox. They say bad things about all sorts of people, especially me. What else? But that's about it, really. Usually we host our stuff at HMG consulting, have us.
00:02:28.106 - 00:02:50.400, Speaker B: We won't do it today, of course, but next one is going to be back at that venue, so please come and check it out. I was told to say something about Vitelik, so I'm going to say something about Vitelik. I met Vitelik. Actually, you might not remember it. I met you at the bitcoin meetup up on that tower in level 39. Level members, of course, 13. Yeah.
00:02:50.400 - 00:03:00.994, Speaker B: And there was this guy who had this big pile of bitcoin magazines and he was putting them everywhere, right? And then as soon as he saw people coming near the table, he would run away.
00:03:01.032 - 00:03:01.620, Speaker A: Right.
00:03:02.630 - 00:03:28.378, Speaker B: I don't want to interfere. And a year later he was my boss and he's by far the. And he's the most respected, I think, people in the field of cryptography. And I say cryptography because I don't mean cryptocurrencies where anyone can create another scam coin or whatever. I'm talking about important stuff like proof of stake, scaling this technology, sharding the stuff that, quite frankly, I think a lot of people, it goes a little bit know, but seems to make a lot of sense to you. So that's really exciting.
00:03:28.554 - 00:03:32.654, Speaker A: Please don't put me in the same level as Ralph Merkel, because morgle trees are way too.
00:03:32.852 - 00:03:36.426, Speaker B: Okay. So were you just below Ralph?
00:03:36.538 - 00:03:37.326, Speaker A: Okay, no.
00:03:37.428 - 00:03:47.730, Speaker B: All right, below Ralph. Is the level still pretty high? Anyway, without further ado, Vitelik, who came specially here for the meetup tonight. Thank you, Vitalik.
00:03:59.610 - 00:04:42.466, Speaker A: Thank you to everyone for coming. Thank you to SAWOC and HMG consulting, which I'm going to assume stands for Her Majesty, something in this country and all those other companies. Great job. So today I'm going to talk about blockchain and ethereum security. On the higher level, the finer challenges in bringing user sovereignty from cyberpunk dream to reality. So without further ado, so why is blockchain tech so cool? Aside from the stuff that I'm not going to talk about? So people who are familiar with blockchains, familiar with Ethereum, have probably seen a lot of this before. The general concept of trust minimized applications.
00:04:42.466 - 00:05:27.102, Speaker A: You can do things, build things, run things, interact in ways that do not require you to put a huge amount of trust in one particular person. Company computer code on the Ethereum blockchain is guaranteed to run, that should say guaranteed to run as written, guaranteed to run as. Executed as a bit of a tautology, but. Oh, well, so the code is guaranteed to run as intended. There we go. Opens the door to a bunch of really cool stuff. One of the applications outside of the currency and generally finance fear that I've started to become increasingly excited about because I've realized just how viable it is, is the whole concept of sort of user sovereign identity.
00:05:27.102 - 00:06:17.326, Speaker A: So the simplest version of this is kind of Facebook without the sign in with Facebook without the Facebook. So you can actually manage your online identity, interact with different services, have accounts at different places, and do all of that without one company having the backdoor to your digital life. Uport from consensus doing some great work in that kind of direction. So in general, lets you be in control of, hopefully an increasing subset of your digital life. Sign in with Facebook without Facebook rating systems and reputations, without being tied to a platform. So if you're an Uber driver and you decide that Uber isn't paying you enough, you should be able to move over to another platform without your reputation just suddenly being reset to zero, because all that information is stuck on those servers and you can't use it anymore. Your digital assets are yours.
00:06:17.326 - 00:06:32.954, Speaker A: You can't be arbitrarily denied access. You're in charge. Rely on fully trustworthy computer programs, not intermediaries. Old world Trust model look at me. I have a license. I wear a fancy suit. New World Trust model.
00:06:32.954 - 00:07:05.362, Speaker A: Look at the code. So what are the problems? So in short, security. So I'll start off with a bit of a tour through bitcoin land. And a lot of this is from an article that I wrote for Bitcoin magazine way back in either 2012 or 2013. So, bitcoin self defense, part one wallet protection. So, as you might probably imagine, this is going to be about wallets. So here's one fun thing to read.
00:07:05.362 - 00:07:36.522, Speaker A: In June 2011, the bitcoin talk member, all in vain, lost 25,000 BTC, worth $500,000 at the time. Now it's worth about $11.5 million. After an unknown intruder somehow gained access to his computer. The attacker was able to access Owen Vane's wallet dat file and quickly empty out the wallet, either by sending a transaction from Olivin Vane's computer itself, or by simply uploading the wallet dat file and emptying it on his own machine. So there you go. Exhibit two.
00:07:36.522 - 00:08:18.138, Speaker A: Bitcoin developer Stefan Thomas had three backups of his wallet, an encrypted USB stick, a Dropbox account, and a virtualbox virtual machine. However, he managed to erase two of them and forget the password to the third, forever losing access to 7000 BTC, worth $125,000 at the time and worth about $3 million now. Thomas's reaction? I'm pretty dedicated to creating better clients since then. Exhibit three. Keyloggers. There's a guy who downloaded a Java application that ended up keylogging his password lost. I think it was around 80 bitcoins, which is worth $34,000.
00:08:18.138 - 00:08:59.078, Speaker A: Now, here's one of the more complex ones. So if any of you have used a bitcoin wallet before on your phone, then one of the security features that you might have is you might have like a first pin. But the idea is that the first pin, or the sort of main password might have like 1420 characters in it. So you would have it on your computer, but on your phone, it would kind of take too much effort to actually force people to type it in. So what some of these wallets might do is they might just not require you to type a password in. They might just remember it. And then there would be a kind of weaker internal pin, like a second password that you'd have to enter on your phone.
00:08:59.078 - 00:09:30.926, Speaker A: But in general, that might only be four to six digits. So here's what you might be able to do. If that one person rooted his Android phone, then if you can hack into that, then you can find where this first password is stored, then decrypt it. Unwrap the outer decryption just by using that password. Then you brute force the weaker internal pin. Unwrap that, and you got the private key, and you could take the guy's money. I think this cost either somewhere also in the low hundreds of bitcoins, deleting a nondeterministic multi address wallet.
00:09:30.926 - 00:10:19.154, Speaker A: So a lot of bitcoin wallets keep on generating addresses. In the brutal and harsh dark ages, before BIP 32 became standard, these new addresses would actually be randomly generated. And so if you were to generate a wallet and then accept bitcoins as one of your new addresses, and then forget to back up the newer wallet, then you might be screwed. So this is what technically skilled individuals have managed to do with a trust free cryptocurrency. Now let us imagine what a not technically skilled person might do. Now, of course, it's important to note centralization also has flaws. So you might have noticed that even if you add together $3 million and $11.5
00:10:19.154 - 00:10:59.514, Speaker A: million and all the other scary numbers in the previous section, none of that matches up to $460,000,000. So centralization is still problematic. And things like this are ultimately what I feel what Stefan calls cryptography is all about mitigating and ideally removing. So, but even still, this is about money. Now imagine what happens when your entire digital identity is on the line. So imagine if you've got that one private key. That private key also represents the key to decrypt your email inbox.
00:10:59.514 - 00:11:25.254, Speaker A: It also represents where you hold your shares of various different companies. It also is where you hold your personal website. It's how you interact with banks. It's how you interact with your government. Now imagine if that gets stolen, or imagine if you lose all three backups of that. Now that's one category of issues. Here's another category of issues.
00:11:25.254 - 00:12:04.322, Speaker A: So one of the nice things about Ethereum is Ethereum is not just a cryptocurrency. And so there is a very large number of very interesting things that you can do with it, like entering into financial contracts, having, managing a digital identity, creating various kinds of sort of complex. If this then that agreements, escrows, insurance, crowdfunding, whatever. Now, because there's ten times as much that you can do. There's also ten times as much that you can screw up. So this is decentralized application programming gone wrong. Example one.
00:12:04.322 - 00:12:43.258, Speaker A: So exhibit a, September 2015, you might have already seen this had you been following the Ethereum subreddit as essentially as you should have been. But if you haven't, you should burn in hell. So the idea here is there's one person who decided, hey look, it's a decentralized application platform. I am going to build a decentralized casino on top of it. And guess what? A decentralized casino requires a decentralized random number generator. So let me just write a random number generator and look, it's a function. And see how it says function generate rand private.
00:12:43.258 - 00:13:29.706, Speaker A: That's obviously going to be private. So you store the seed as a seed is only accessed in a private function. The seed is private, no one should be able to see it. And there you go, you got your random number generator, you got whatever, just simple arithmetic in there. Throw block number, throw difficulty and timestamp in modded by 37 and you're good. So, problem is of course that public blockchains are public. So just because your funky little function there says private on it, doesn't mean that every single node in the entire ethereum network, which mind you, contains about 5000 nodes right now, is not going to be able to process your transaction.
00:13:29.706 - 00:14:16.160, Speaker A: And in the course of processing your transaction line by line, see exactly what the private seed is, so that they can figure out what number to send into your casino so that they can take all your money and steal it. So eventually, of course, someone did that. And fortunately there were a bunch of quite good write ups that were done over the next couple of days and we know exactly what happened and we were all able to learn from it. So random number generation on the blockchain is a bit harder than you think. But in general, you have to remember the world computer is a transparent computer. And if you want to do things that aren't transparent, you have to figure out some clever ways of doing that, such as zero knowledge proofs, which are wonderful, and you should also learn about them. Example two.
00:14:16.160 - 00:15:04.726, Speaker A: So this is an interesting one, because if you just read the code, you might think, okay, well, all it does is it basically sends money to people in an array at some particular payout cursor id, and it subtracts the remaining balance and increments the payout cursor id, and it just keeps on going through the loop. So it's basically just a loop that pays a bunch of people while there's money left. So here is the problem. Notice the instance of payout cursor id that I've redwind, and notice all the other instances of payout cursor id. Notice how the one that I've redwind doesn't have the underscore at the end and all the other ones do. Now, those are two different variables. So notice what happens actually is that both of those variables are initialized at zero.
00:15:04.726 - 00:15:38.402, Speaker A: And as it goes through the loop, payout cursor underscore id. Underscore keeps on getting incremented. But the person at index payoutcursor underscore id, no, underscore is the one that gets paid. Now, guess what? That variable there, the one that's underlined, is going to stay at zero forever. And guess who managed to put himself at index zero? The person who created the original application. So the person who created this application is just going to get paid over and over again because they're at position zero in the array. And of course, payout cursor underscore id is never going to get incremented.
00:15:38.402 - 00:16:20.498, Speaker A: And so the more people put money into the system, the more this particular person is just going to keep on getting paid until people realize that this thing's stupid and they should go use another one and more. So here's some other interesting examples. So, dao crowd sales. This is one of those topics that people are starting to get interested in. So crowd sales were popular back in 2014. People would kind of pour a bunch of money into some address and whether it's bitcoin or whatever else, and they would get some new token from some new platform that was being built. So in 2014, we had altcoins.
00:16:20.498 - 00:17:00.690, Speaker A: In 2016, we have Das. On top of Ethereum, we have slog maker Auger Digix, hopefully. Seems like Etherex is pushing out something, and probably more that we don't even know about coming soon. Some of them are actually trying to make the crowd sale itself decentralized. So in part it might be for legal reasons, because you don't actually want to have a central party that's benefiting from the crowdfund. That might simplify the security situation. In part, it's because you might actually want to create something that's decentralized and people don't actually have to trust you with all the money they put in.
00:17:00.690 - 00:17:57.710, Speaker A: But that's a concept. The reality is, if you're participating in one of these Dao crowd sales, you want to make sure that the address that the ether is going into isn't actually controlled by a central party, or potentially, even if the address itself looks like it's a crowdfunding contract, make sure the address that that contract is sending to isn't controlled by a central party. Here's another 151 percent attack. So one scheme that you might come up with is, well, basically, let's just do it like a company. People invest in the company, people get shares of the company, and if you have shares, then obviously you can vote on where the money goes. So we just have a simple voting scheme where people can vote in proportion to how many coins they put into the system, and then they can kind of all collectively vote and see where the, and send the money to whatever addresses they want to. So it's actually kind of like a decentralized company running on the blockchain.
00:17:57.710 - 00:18:38.560, Speaker A: Really cool idea. But let's suppose that you're an attacker and you want to start one of these schemes not because you like decentralization, not because you have some cool business idea, but for the very natural and very human reason that you want to steal a huge pile of a bunch of people's money. So here's what you do. You start a crowd sale. Let people start sending money in. For every token that someone else puts in, you put 1.1 tokens in at the end, potentially, you might want to get some rich person to help finance this for you, but you should be able to find someone.
00:18:38.560 - 00:19:06.374, Speaker A: At the end of the day, let's say other people put in $2 million. Well, you plus your rich partner have now put in $2.2 million. You now control 51% of the entire pool. Now, what you do is you start a vote that says, send this entire pool of $4.2 million to me and my rich friend, have you 51%. Click, accept.
00:19:06.374 - 00:19:45.798, Speaker A: They accept all the money goes to you and your friend. And congrats, you've just stolen $2 million using a completely decentralized mechanism. So 51%. Attacks like that are basically why shareholder regulations in the real world exist, or more subtle versions of the same thing. So if you're going to create a decentralized company on the blockchain, make sure that whatever mechanism you have is resistant to that kind of attack. If you're participating in a crowd sale, then make sure the mechanism that you're participating in is resistant to this kind of attack. Also, services that accept ether but aren't trust free at all.
00:19:45.798 - 00:20:34.678, Speaker A: So there's a bunch of services, especially ones that were just taking bitcoin before, and they said, oh look, ether is cool, the market cap is high, people are starting to use it. Let's just use ether in the exact same way that we use bitcoin. Well, guess what? If you use ether in the exact same way that you use bitcoin, you're not actually going to get any of the really nice advantages of Ethereum. You are going to get 14 second block time. You are going to get the ability for users to kind of store their coins in different ways, but you're not going to get trust free smart contracts. If you're looking to get trust based smart contracts, make sure that you actually build your service in a way that is a trust free smart contract. So trust free utopia is a bit harder than it seems, is essentially the conclusion of that.
00:20:34.678 - 00:21:07.402, Speaker A: So theoretically, you have these kind of computer programs that we can all interact with. These computer programs are guaranteed to run exactly as intended. We can read the computer programs. We can make sure that the code is exactly or does exactly what we think it does. But in reality, lots of people have no idea how to read code. Some people think they have an idea of how to read code, but they're not going to be able to catch this attack vector or this one. Some people are going to do this, some people are going to do this.
00:21:07.402 - 00:21:49.598, Speaker A: So at the end of the day, it's a bit harder. So the question is, how do we avoid that without bringing back that? So you might notice I have a couple of examples up there. So I have good old Mount Gox, their favorite $460,000,000 disaster bitcoinica. So people who were in the blockchain space earlier on might have heard of it. It's back in 2011, this 17 or 18 year old named Joe Tong decided he'd make a financial derivatives market. In March, he got hacked. He lost I think about $80,000 in May, he got hacked again, lost about $200,000.
00:21:49.598 - 00:22:26.650, Speaker A: Bitcoinica was forced to shut down, but it still had some portion of the money that was kind of in some, in an account. I think in that account happened to have been at Mount Gox. But unfortunately, that account's contents did not live long enough to see the day where they could have, where they could meet a more honorable demise. And instead, July 2014, the accounts that was holding those funds got hacked, and they lost $320,000. So, Ashley Madison. So the reason why I put that example up there is twofold. First of all, it's not a financial example.
00:22:26.650 - 00:23:24.966, Speaker A: And second of all, it's an example that's completely outside of crypto land. It's something lots of normal people have heard of, something normal people can very easily relate to. But the general story is basically, there was a site where that was tried to be a sort of dating site for people who are already in relationships. Now, obviously, if you're in a relationship and you're looking to cheat on someone, you probably have high privacy requirements. So this particular site, it had a bunch of problems, like the fact that most of its users weren't even real. But as I understand, there were a lot more real users on the male side than on the female side, which doesn't say very good things about my own gender. But eventually it got hacked and huge number of leaks, and it turns out that a lot of people's private information just got put out, and a very large number of people have access to it.
00:23:24.966 - 00:24:35.614, Speaker A: So all these things are things that could have been avoided had all of these services actually adopted a more sort of user sovereign trust model. So had they adopted a model where data actually is held by the user or held in such a way that the company is actually protecting its users against itself? The question is, of course, how can we get the benefits of that kind of model without getting it, without getting its costs? Or at least how do we get as many of the benefits of the more decentralized and more sort of user sovereign model without getting as few of its costs as possible? So, first of all, you can't have a discussion about security without talking about multisig. So in general, multisig wallets in bitcoin land have been around for years. In ethereum land, they're starting to pop up. And I have to offer my congratulations to bitco for being the first company to step up and actually do it. So in general, the idea is simple. So before this, there were two types of wallets.
00:24:35.614 - 00:25:03.238, Speaker A: The first type of wallet is one where you control the key. Now what happens if you control the key? Well, stuff like this. The second type of wallet is the kind where some centralized company controls the key. What happens if some centralized company controls the key? Well, stuff like this. So here's a clever idea. Let's have three keys and let's set up a system where you need two of the keys in order to spend any of the money. You have one of the keys, a company has one of the keys.
00:25:03.238 - 00:25:57.594, Speaker A: And the third key is also controlled by you in some offline backup somewhere. So normal case, you have a transaction, you sign it, then you have your Samsung Galaxy S five TM smartphone, and you would take the smartphone and you would click a button that says, please send a two fa key. The server would send some six digit code to your phone. You would see what the code is, you would enter it and the server would know that this particular transaction request is coming from someone who actually is you because they were authenticated, because they have the phone. And if they get the correct code, then the server would also sign off on the transaction. So if you want to break that particular or hack that particular link, then you basically needs to hack the person's computer and get his phone. So much more security.
00:25:57.594 - 00:26:38.170, Speaker A: And actually it's a pretty serious gain in security because if the average computer is hacked 1% of the time and the average phone is hacked 1% of the time, the two are hacked together 0.1% of the time. So going up from one to two is actually a huge gain. It could even be the difference between too much to handle and negligible. Now let's say you lose your key. Then what happens? Then you go get your backup, take out your backup key and basically put your backup key on your computer, go through the exact same, then you sign a transaction, server signs a transaction, and hopefully you move the funds to a new wallet or in Ethereum. The nice thing you can do is you can actually keep the same address and just change one of the keys.
00:26:38.170 - 00:27:27.210, Speaker A: So now let's suppose the server disappears. The company decides it's going to go bankrupt. Then what happens? Well, you have your key, you have the backup, you download the server software, put the backup on the server, and then you go through the same process, talk to yourself, or potentially you could do it in some simpler way. So regardless of which one party fails, there's always some way to get around it because you need two keys. If one party gets hacked, nothing bad is going to happen to your money, or in this case, your identity and your relationships with different companies or your marriage contracts on the blockchain or whatever else. So, no, Mr. A 15 year old in some basement in Russia cannot force you to divorce your wife on the blockchain if you use Multisig.
00:27:27.210 - 00:28:06.454, Speaker A: That's all very nice and good, and Multisig is great, and I hope that more and more people start to adopt it. I'm proud to say that the Ethereum foundation uses Multisig for both its bitcoin and its ether funds. At the time when we started the crowd sale, there was actually a brief period where we had about 40% of all multisig bitcoins in existence. And since then, obviously the situation has improved greatly. So this is all very good. Multisig actually done well. So the thing with Multisig, once again, great idea in theory, but there's a couple of ways we can screw up on it.
00:28:06.454 - 00:28:40.590, Speaker A: So here's one. First of all, don't receive the second factor on the same device as the main key. So one very simple example of this. So a lot of people, when they do two factor authentication, they have their device on their computer. Then they have some Google authenticator application on their Samsung Galaxy S five smart TM smartphone. And now the thing is, of course, for this, Google authenticator itself includes there's a titanium backup app. You can download it.
00:28:40.590 - 00:29:16.570, Speaker A: And if you want to backup your Google authenticator, you can download your backup. Now, here's what you as a user might do. You might download your backup and you might put that backup on the exact same computer that you have your original key on. Well, guess what? If you do that and if your computer gets hacked, the attacker could potentially now have access to two keys. So second one, don't put the backup key on the same device as the main key. So here's what I mean by that. A lot of these wallets, when you set them up, you have the ability to create your key, and then at the same time, you create a backup key.
00:29:16.570 - 00:30:05.180, Speaker A: And a lot of these applications, they create your main key and your backup key at the same time. So guess what if an attacker at that time has, or potentially at some future time, if you just did download your backup key and forget about it. If the attacker at some time has access to your computer, he's got the two keys, he can take your money, don't have the wallet provider, also run the second factor back end. So a lot of these wallets, well, there's one company that writes the software that you use to use your private key. That same company also writes the server software. So guess what? One company actually writes the code that you use to access two keys. So practically speaking, if that one company wanted to screw you over, they could.
00:30:05.180 - 00:30:39.638, Speaker A: Another interesting one, different security levels for different transaction values. So less critical, but as important level of security that you might want for sending, let's say, $0.05, might be a bit different from the level of security you might want for sending $3 million. So it might be a good idea to, for example, use no authentication at all for $0.05. But make sure to do it right. So the guy can't send five cents, five hundred thousand times without authentication. And for something like $3 million, well, he shouldn't even send a second factor thing to your phone.
00:30:39.638 - 00:31:23.794, Speaker A: He should just wait until you can have a Skype video call and you have to show him your passport. So there are better ways of doing this stuff. So here's an interesting case study. So there's this company in autonomous that for some reason nobody hears about, even though I think they're awesome. So the idea is it's a company based in Singapore, and at the core they're basically just a corporate registrar. You can go through them to create a new company based in Singapore, Hong Kong, as I understand, they're opening up the UK. And the difference between them and all the other boring lawyer companies that do this is that with them, when the company gets created, you can actually trade shares of the company on the blockchain.
00:31:23.794 - 00:32:09.454, Speaker A: You can sign resolutions on the blockchain, basically do all of sort of corporate management on Ethereum. And the blockchain actually is the underlying database that holds the authoritative records of which resolutions are signed, who owns which shares and so forth. So this is really cool. But the cooler thing is that one of the cooler things is this particular process. So with something like autonomous, of course you'd be scared of, well, what happens if the guy who has 23% of the company loses his private key to 23% of the company? Here's a solution that they use. You have your private key. That private key gets split into three pieces using an algorithm called Shamir.
00:32:09.454 - 00:32:43.854, Speaker A: Secret sharing. By the way, Adi Shamir is one of those other cryptographers that you really should not be so blasphemous as to put me in the same level with, because he basically came up with secret, among many other things like RSA and either linear differential crypt analysis, he came up with secret sharing, which is basically multisig for data. So take a piece of information, split it up into three pieces in such a way that you need any two of those pieces to recover the information. If you want to go into the math, here's one simple way of doing it. Take your data, split it into two numbers. Call them x and y. Give one person x.
00:32:43.854 - 00:33:12.006, Speaker A: Give one person y. Give one person x plus y. If you take the first two people, one has x, one has y, they can put it together. If you take the first and the third person, they can have x and x plus y subtract, and you get y, and they get the information. Again, second and third person, they have y and x plus y subtract them. You have y and x put them together, but there's no way for one person to extract the information. Even the guy with x plus y, he knows what the sum is, but he has no idea what either of the numbers is.
00:33:12.006 - 00:33:58.598, Speaker A: And it could be anything. So the idea here is you use that kind of algorithm, split up the private key, and one portion goes to autonomous. One portion goes to basically a lawyer, one portion goes to basically another lawyer. So you actually needs to have two companies to collude in order to recover the private key for a particular person. So two companies are once again much less likely to collude than one company is to decide that they either decide to be dishonest or have a rogue employee decide to be dishonest or get hacked or whatever else. So, very substantial improvement. And what I like about this is that it does introduce this very important protection feature of providing some kind of backup mechanism if a guy loses his key.
00:33:58.598 - 00:35:01.334, Speaker A: But it does this without introducing a centralization point. So, great job to Han and co over in Singapore. Next slide, let's talk about ERC 67. So one of the issues with Ethereum is that right now, it's very easy in many Ethereum wallets to just send ether to a particular account. But what if you want to do something more interesting than sending ether? What if he wants to send unicorns or auger coins or maker coins? What if he wants to call some function of some contracts to enter into some financial agreement? What if he wants to call a contract with some larger amount of gas? So the idea here is basically a URI scheme, kind of similar to the bitcoin URI scheme, where instead of just specifying an address, you have this kind of one piece of data that specifies address data, gas, whole bunch of parameters, and that gets turned into a QR code. People can scan a QR code and from their phone pretty much immediately send and create whatever kind of complex type of transaction they want. So this is a good usability feature.
00:35:01.334 - 00:35:35.698, Speaker A: It's really cool, extremely useful. Currently there's a lot of developers that are not really willing to use contract functions. The way they design their applications is they just say, just send your ether here. And they just have kind of one universal function that gets called no matter what happens. If you wanted to have applications that are more complex than Ether transactions, domain names, sub currencies, whatever, you need to do this. But there's a security challenge, so takes, let's say some, here's an Ethereum Uri string. It looks pretty innocent.
00:35:35.698 - 00:36:45.838, Speaker A: You got an address, you're sending 100 way, which is like an insignificant amount of ether, and you got a bit of bytecode, which probably just gives the contract some amount of extra information, which is all well and good. Maybe a transaction might be like an order id or whatever, but not so fast. How do you know that this particular section is not actually sending all of your gaff coins to the attacker? So in Ethereum, the platform is turing complete, and the platform doesn't specifies nothing about the meaning of data. So when you're sending ether around, you can kind of understand, okay, you're sending ether around, but once you have data, there could be applications on the blockchain, there could be applications that the system doesn't even know about, and it can be hard to inform the user when they're potentially agreeing to do something dangerous. Now of course there are heuristics. So for example, the wallet might know that the user has some kind of existing relationship with this particular address. And so the application, if it's smart, might flash a warning that says, hey, it looks like you already have some kind of relationship with this address and this particular application is trying to interact with it in some unknown way.
00:36:45.838 - 00:37:34.182, Speaker A: Are you really sure you want to do something that could change your relationship with this contract, potentially in an arbitrary way? So if you have some sub currency on Ethereum, if you don't do something like that, then this could be a very easy way to steal it. But if you do do something like that, then it could very easily stop it. Any kind of domain name registration on Ethereum marriage contract on Ethereum hey, scan this QR code to divorce your wife. This hopefully should. Basically, you want to make sure that you don't make it easy for people to do that. So can't forget about formal verification. So formal verification is one of these really nice ideas for math.
00:37:34.182 - 00:38:23.766, Speaker A: Formal verification is the science of using computer programs to automatically approve claims about other computer programs. So the idea here is, well, what if we could take something like that piece of code and actually automatically run code over it and actually prove that that code satisfies certain fairness properties. So, for example, if you have something like, let's say some kind of decentralized lottery, then one fairness claim you might want to approve is if you put, let's say, five coins in, on average, you're guaranteed to get 4.98 coins out. And that's a mathematical claim. You can mathematically define it. You can try to run a formal proofer over our contracts to prove it if you have some kind of financial agreement.
00:38:23.766 - 00:39:07.014, Speaker A: One other claim you might want to be able to prove, it's a fairly weak one. It's if all of the people that put the money into the system cooperate, then they can work together to get all the money out. Doesn't guarantee that it's fair, but it does guarantee that your ether is not going to get completely stuck. So there are specific mathematical claims that you can prove, and you can try to kind of come up with ways to show that some particular contract is honest in some particular way. So there is a challenge, of course. What do we prove? So we want to be sure that we'ren't dealing with applications that are fair. We want to be sure that we're dealing with applications that are correct.
00:39:07.014 - 00:39:44.050, Speaker A: We want to be sure that we're dealing with applications that are secure. But fairness, correctness and security are themselves complex human concepts. So if any of you have been to lessrong.com a lot, and if you haven't, you probably should, then one of the topics that good old Eliser talks about a lot is this concept of complexity of values, which basically means that to some degree we don't even know what we want. And what we want is very complex. We can't fully state what we want. And if you take what someone states they want and you try to kind of apply it too thoroughly, you might actually end up with a result that that person doesn't really like.
00:39:44.050 - 00:40:19.098, Speaker A: So here's just one example. So the reason why this concept is originally invented is because good old Lizzo Yudkowski cares a lot about the concept of AI safety. So if we make super intelligent ais that are smarter than all us combined, we need to make sure that they have goals that are at least roughly aligned with our own. Because if they don't, they might very wildly align against their own. And the next thing we know, the earth is inside the sun because the AI thinks the greater concentration of mass is good. So one simple example, let's say you tell an AI to cure cancer because curing cancer is good. Well, guess what the AI discovers.
00:40:19.098 - 00:41:20.500, Speaker A: I have a very, very simple way to reduce the mortality rate from cancer by 100%. I am going to put the earth in the middle of the sun so that people die of evaporation first. So fortunately, blockchain land isn't as extreme. But even still, the point is, if you create an application and you can formally prove that it's fair in ten ways, how do you know that there isn't some 11th fairness criterion that you actually think is really important, but you haven't actually consciously thought of? And how do you know that the application satisfies that criterion as well? So if you take something like a decentralized order book, well okay, you can formally prove that the mechanism isn't going to steal your money. But what if it doesn't let you steal your money, but it does make it very easy for the creator of the contract to front run everyone. Well, what if the creator of the contract can't front run everyone, but the creator of the contract has some other way of financially exploiting it and so on and so forth. And the more complex the application gets, the more you have to think.
00:41:20.500 - 00:42:03.134, Speaker A: So even if all of these issues remain unsolved, that doesn't mean that we haven't made very substantial progress. So even if the security that we get out of decentralization is only partial, we get a whole bunch of benefits. So here's one. The application provider might need to be dishonest initially for an attack to work rather than at any time. So one simple example is if you have some application that holds people's money, well, you can decide to run away with the money at any time if you have a smart contract. But we're still concerned the smart contract has a bug in it. You have to actually be dishonest initially.
00:42:03.134 - 00:43:13.702, Speaker A: You have to actually put the bug in the contract at the start in order for there to be a problem, protects against a rogue employee or inside jobs, protects against and mitigates hacks as a side effect. So even if there's some weird ways to write a contract, weirdly so that it actually has some kind of way for some particular party to take the money, if the company is honest, then it's not going to do that. But in a centralized model, even if the company is honest, it might get hacked. In this model, regardless of whether the company is honest or dishonest, it can't get hacked application still works even if the provider shuts down. So autonomous actually takes quite a bit of care to make sure this happens. So even if autonomous shuts down, you personally can recover your private key, you personally can download the JSON API for the contract, and you can keep interacting with the system, keep on trading company shares over the command line, or just wait for someone else to come up with an application to replace it. A lot of people in the sort of privacy and data freedom space care about kind of data exportability and in general, the ability to kind of easily migrate from one service to another.
00:43:13.702 - 00:43:56.614, Speaker A: Well, relying on blockchain technology as a base layer is like the ultimate data exportability. If you want export your private key, do things on the command line yourself, or let someone else create an application and put your key into that instead. So that's really nice. Increase resistance against third party coercion. So decentralization makes it harder for third parties to force you to do stuff, to reveal your information, to change the way that your service behaves in ways that your users might not like, or whatever else. And decentralization can increase resistance against that. So there's still a huge number of benefits, but it would be even better if we actually solve all these problems.
00:43:56.614 - 00:44:29.440, Speaker A: And I think that 2015, 2016 are the years that people have started experimenting with all these applications. I think the next few years even will continue to be the years in which people will make lots of very exciting applications that will hopefully be increasingly useful, but they will also be the years where we learn what the challenges are and we start coming up with the solutions. And as some of the multisig wallets have shown, we've already started. So thank you.
00:44:41.210 - 00:44:42.120, Speaker D: Thank you.
00:44:47.210 - 00:44:47.906, Speaker B: That was brilliant.
00:44:47.938 - 00:44:50.726, Speaker A: Thank you. Do you have any recommendations or best.
00:44:50.748 - 00:44:53.330, Speaker C: Practices for automated testing of stuff that.
00:44:53.420 - 00:44:54.826, Speaker A: Code you're putting on the blockchain to.
00:44:54.848 - 00:44:59.580, Speaker C: Try and get around those erroneous examples you showed us?
00:45:01.790 - 00:45:47.580, Speaker A: I think in general there's kind of best practices for software developers. Make sure every line of code is covered. Make sure you kind of have tests for, automated tests for every function just before you actually deploy anything. So one answer would be, do that stuff that software developers have been doing, but kind of do it even more. So don't be sloppy on the testing, ideally even come up with, put the system on the Testnet first, let people play with it on the testnet. Let people attack it on the testnet before putting it on the livenet. Some of the more complex applications, they actually go full out and ask for a security audit before if they're going to be handling large amounts of money if you want to kind of be on the lower end.
00:45:47.580 - 00:46:20.382, Speaker A: Another option is to kind of try to minimize the number of lines of code that you write. So like in general, ethereum is all about being extensible. So you can do things like contracts, can call other contracts. So if there's some library that's already in a contract somewhere, consider using that and reducing the lines of code that you write yourself. I would say those are probably the major ones. Then once formal verification kind of starts coming out, kind of seeing if you can kind of formally verify at least some basic claims about your contract. Simplify.
00:46:20.382 - 00:46:51.120, Speaker A: Module verise, I would also say, is the big one. So if your application has lots of different pieces, make each one into a different contract. Ideally, make each one kind of as standalone an application as possible. And if some of those pieces can be standardized, then just use the standard pieces of standard code for it. Those are probably the biggest areas at this point. And hopefully, as both sort of former verification and technology on the user interface side evolves, we can start taking advantage of that.
00:46:56.280 - 00:46:57.030, Speaker C: Question.
00:47:01.590 - 00:47:02.340, Speaker D: Sir.
00:47:07.910 - 00:47:12.820, Speaker C: My question is like how ether is protected from 51%.
00:47:13.590 - 00:47:53.620, Speaker A: So ethereum is a blockchain, just like bit coin. Right now it runs on proof of work just like bitcoin. And so right now you can 51% attack it, just like you did 51% attack bitcoin. I mean, in the long term, we're going to be looking at stuff like proof of stake, and that'll hopefully increase security in some ways. But ultimately with a public blockchain, there's always like some point where if the attacker throws enough economic resources at the problem, they can screw things up. It's interesting how people are asking these questions kind of very nicely in series.
00:47:55.000 - 00:47:59.670, Speaker D: How far along are you with Casper and what issues are you seeing?
00:48:00.440 - 00:48:58.180, Speaker A: We're getting pretty far along. So we have an active kind of Skype and getter channel where we talk about a lot of these issues. And if you're really interested, you can follow it. But we're at the point where we spent a bunch of time looking at traditional byzantine fault tolerate consensus. We've identified what the efficiency limitations of that are, spent a bunch of time looking at kind of different bedding cycle mechanisms, spent a bunch of time seeing what kind of the really sort of good parts of traditional byzantine fault tolerance consensus theory are coming up with, or getting closer and closer to having, being able to prove convergence under kind of weaker and weaker assumptions and continually sort of iterating the protocol to probably making it more efficient is the best thing. So I would say that right now I'm actually fairly close to having a solidified, kind of updated version of the protocol. Hopefully I'll write it out, sort of put it into the proof of concept release.
00:48:58.180 - 00:49:23.570, Speaker A: We've hired a couple of developers to actually make a sort of proof of concept in Python for Casper. So hopefully we'll release that as an actual test network at some point in the next couple of months. And if it runs and if it proves itself safe, then we'll actually start coding it up. At the same time we're actually looking at sort of formally verifying some as many claims as we can about Casper and parallel to that entire process.
00:49:25.940 - 00:49:29.872, Speaker D: Yes, I would like to ask you about the chinese connection.
00:49:30.016 - 00:49:30.710, Speaker A: Yes.
00:49:33.160 - 00:49:34.532, Speaker D: Can you guys hear me?
00:49:34.666 - 00:49:36.310, Speaker A: Yes, I can hear you.
00:49:38.120 - 00:49:49.976, Speaker D: I can shout it. I'm just asking you about the chinese connection. What kind of companies support?
00:49:50.078 - 00:50:16.880, Speaker A: So Ethereum in China has been very rapidly growing in the past twelve months. So the biggest companies in the space is obviously Onexiang. They've started up blockchain labs. They've also started up an investment fund. They had a conference last year. They're starting to do a bunch of things with both blockchain and ethereum in general. We had a couple of our developers go over to Shanghai.
00:50:16.880 - 00:51:06.744, Speaker A: They gave a lecture with blockchain labs trying to kind of teach developers in China about Ethereum. Aside from that, there's an increasing just number of groups that are coming to me that are interested. So people are starting to get. There's some exchanges that are starting to list ether in China, though that's probably not the most interesting thing for myself. There's groups that are both starting to mine it and actually starting to build applications. There's also that one group that's running ethfans.org. It's probably one of the longest running kind of Ethereum fan sites based in China, just completely independently started by a group of four developers who have started to become increasingly active in the Ethereum ecosystem.
00:51:06.744 - 00:51:37.790, Speaker A: One of them actually just came up with a ruby implementation of Ethereum a couple of weeks ago. So those are probably the main groups that are doing stuff. I'll probably also have a lot more to say because I'm going to be in China for a couple of months. Well, and Asia generally for a couple of months in the summer as well. That's kind of where the chinese community is at this point. Yes.
00:51:45.300 - 00:51:50.530, Speaker D: Sorry, I'll just speak loudly, I'll repeat the question.
00:51:51.700 - 00:51:54.080, Speaker A: So far she said, I'll just speak loudly.
00:51:57.300 - 00:52:07.284, Speaker D: I'm not a coder, but I think what you're doing is going to change society at a very deep level and was wondering if you can share your vision for the next five or ten.
00:52:07.322 - 00:52:12.132, Speaker A: Years if this take off and people.
00:52:12.186 - 00:52:13.670, Speaker D: Become aware of their.
00:52:16.680 - 00:52:18.788, Speaker C: Vision for the next five or ten years.
00:52:18.954 - 00:53:22.108, Speaker A: Yeah. I personally focus on lot on kind of the bottom level technology side for the vision. For Ethereum, we want to create a scalable, fast world computer that's powerful enough that a large portion of the world's financial supply chain, identity, whatever infrastructure can actually run on top of it, and ideally sort of create a network that can power a large part of sort of the Internet of value as much as we like or dislike that particular slogan on basically nothing but a few billion consumer laptops. On the application side, I'm hoping to see stuff happening in a lot of these areas. And I actually think that in the longer term there is that one really good post from rune, one of the founders of makers. The primary value of Ethereum is synergy. So the idea is that when you have one company in Singapore that's issuing gold on Ethereum, then that's all cool.
00:53:22.108 - 00:54:25.490, Speaker A: If you have another company that's doing prediction markets in the US, then that's also cool. But then if you have the ability to use the gold as the base currency in the prediction markets, then that's even cooler. So twice the applications gives you more than twice the value. So I think in the longer term, I think the really most interesting Ethereum applications are actually going to be ones that combine aspects of financial systems with aspects of areas in completely different industries. Like we might see completely kind of new categories of games that combine strategy elements with winning and losing cryptocurrencies in various formats. We might see people kind of creating financial agreements that just automatically, let's say insurance, natural disaster insurance based off of data feeds that go into the Ethereum blockchain and so forth. And over time, I think a lot of the vision is just going to kind of realize itself once there's sort of a critical mass of people building interesting stuff on top of it.
00:54:25.490 - 00:55:40.984, Speaker A: I would say as far as sort of what the final point is, I mean, I kind of touched upon some of that at the beginning of the presentation. Although on top of that, some other reasons why blockchains are cool. One of the things I really like is just generally the sort of level of accessibility that it offers to both individuals, to users and to developers. So on the user side, people talk a lot about blockchains being a platform to make it easy to do, like microfinance in Africa. Of course, in reality, not that many people have actually managed to use blockchains to make microfinance in Africa, but hopefully we'll figure something out over the next half decade or decade or so. But even on the development side, I think the idea that a twelve year old can just create some kind of the world's next financial system and have that be immediately usable by people all around the world, regardless of which country the developers in or which country the users are in, is something that's pretty powerful. I remember some of my earlier experiences with bitcoin from downloading the wallet for the first time, and then a year or two later I would download it.
00:55:40.984 - 00:56:07.280, Speaker A: Eventually started writing my own kind of command line, bitcoin sort of wallet, plus other tools in Python. And that felt really nice. Like the quote that I used in an interview earlier today is it felt like sort of a Jedi building his own lightsaber. So the idea that it's a system that actually is accessible to developers at that lower level is powerful, and I think that kind of accessibility is good because it really opens up innovation.
00:56:10.820 - 00:56:31.130, Speaker D: Hi, you focus quite a lot on kind of protecting income tax, but I was kind of wondering about how you incentivize users not to do that in the first place, specifically with data rather than cryptocurrency application. How do you incentivize people to submit good quality data and not hijack the verification process?
00:56:32.460 - 00:57:08.276, Speaker A: Right. So there's two separate problems, right? One of the problems is how do you protect people against doing stuff that's really, really bad? And the second problem is how do you incentivize people to do stuff that's good instead of doing stuff that's useless. So one of them is kind of a security problem. The other one is more of a performance problem. I mean, for the security problem, a lot of it is just going to be all of these different fixes, solutions that I talked about. Right now. On the performance side, it also gets challenging, because one of the things, for example, that people want to do is they want to create decentralized Reddits where people get paid for producing high quality content.
00:57:08.276 - 00:57:49.590, Speaker A: Well, what is the mechanism that you're using to pay people? And how can you really be sure that it's not going to be gamed by someone creating 10,000 accounts and uploading their own stuff? I think there's a lot of challenges in that area as well, but those challenges are probably going to be more kind of application specific. So whereas with security, it's all about, mostly about things like account security, and you have solutions that you apply at the user level, and then they apply sort of across just about every application, whereas with performance, it's, I think, more about coming up with specific approaches for each particular area. Yes, sorry, but.
00:57:54.280 - 00:58:12.330, Speaker C: To the customer, some people think that proof of stake doesn't work at all because of fungible between different branches. And when proof poke, their resources are fungible. Actually, could you explain proof, the compromises which we have to make?
00:58:14.860 - 00:59:07.230, Speaker A: Okay, so the main feature that makes proof of that solves some of the problems of earlier proof of stake algorithms that Casper has is this idea that basically this concept of punishment. So this idea that if you make a block, or if you make some kind of message, that sort of helps the blockchain converge or come to consensus, and you get rewarded. But if you create some kind of message that interferes with the consensus, you actually get penalized. So you lose coins. So that actually provides kind of fairly equivalent behavior to proof of work fungibility. Because the idea is in a proof of work system, you can think of it, you'll have a similar effect where if you create a block that gets into the chain, then you might spend, let's say, $2 on your electricity, you might get $3 from coins. But if you create a block that's in some attack chain and you don't win, then you burn the $2 of your electricity, but you get nothing.
00:59:07.230 - 00:59:52.250, Speaker A: So there's punishment for not participating, or for participating badly, and reward for participating. With proof of stake, we can basically kind of simulate the exact same effect. So the idea is, if you create a block on chain b, that block can be imported into chain a, and on chain a, that block actually costs you one coin. So that's the general approach. And the nice thing with proof of stake is that you can actually sort of ramp the penalties up, way up to the point where if a validator behaves incorrectly, basically they lose their entire deposit. So the proof of work analogy would be, imagine how much more secure bitcoin would be if your mining farm burns down if you try to participate in a 51% attack. So that's kind of what we're going after.
00:59:52.250 - 01:00:46.510, Speaker A: So I think there are going to be some sort of compromises involved. So one very simple example is, because of our kind of extreme sort of everything at stake approach, security actually becomes important for a mining farm or sorry, for a validator. So if a validator gets hacked, then the hacker can force them to lose all their money very quickly, and proof of work doesn't have that property. But I would argue that that's actually a good thing for the network because it incentivizes validators to care about security to the correct extent, whereas with proof of work, you might be able to hack into mining farms right now fairly cheaply, and there's not much incentivizing people to secure themselves more. So that's something that's good for the network, but it's a challenge to the individual validator. So there are trade offs there. So security challenges once again.
01:00:46.510 - 01:00:54.430, Speaker A: Yeah, I think there's one question up there first. Yes.
01:00:55.140 - 01:01:34.222, Speaker C: With the proof of work algorithm used in gridcoin, something that is as an application outside of just burning the mistake.
01:01:34.286 - 01:02:17.902, Speaker A: Okay, so this concept of kind of useful proof of work is one I've been very interested in. The problem is that in order to have a good proof of work algorithm, there's a bunch of desirable properties for it. And those aren't the same properties as the property of being useful and trying to kind of get all those properties at the same time. It seems like it's kind of too hard. It's very hard to come up with an algorithm that actually satisfies all those criteria at the same time. So even just to give a more, one example, the algorithm has to be kind of massively parallelizable, and a successful instance has to be easily verifiable. So that immediately knocks out anything that's kind of very sort of long running serial computation on top of that.
01:02:17.902 - 01:02:54.250, Speaker A: Even if you have something parallelizable, then a lot of useful computation, protein folding, anything to do with astronomy, whatever requires external data. And then the question is, well, where is this external data going to come from? Is it going to come from a trusted data feed? Now, one solution you might come up with is you might say, well, the protocol allows anyone to mine by using any source data, and then we're going to set up a separate charity to bribe people five cents to use good data instead of using bad data. And that might actually work, but it's one of those things that's kind of fairly challenging to do, right? I suppose, and I would even argue might even be more challenging than the proof of stake.
01:02:57.230 - 01:03:03.494, Speaker C: Because I read on the Ethereum Reddit a while ago about the relationship that's been fostered between dogecoin and Ethereum.
01:03:03.542 - 01:03:42.730, Speaker A: I was wondering if you had any. So we're trying to figure out basically the simplest way to kind of do a dogecoin side chain inside of Ethereum. So the idea would be, is that you would have sort of some kind of like edoche subcurrency inside of Ethereum, and you'd be able to take a doge, destroy the doge and get an edoge, and then you can destroy the edoche and get a doge back. So there is a bounty out for it. The bounty was denominated in Ether, and the ether went up in price. So the bounty is now worth somewhere between 50 and $100,000. Yes, there is a bounty worth over $50,000 to create a side chain with dogecoin.
01:03:42.730 - 01:03:51.500, Speaker A: Yeah, but it seems like people are starting to get interested. But it's not too late to jump in.
01:03:52.030 - 01:03:52.780, Speaker D: Hi.
01:03:53.170 - 01:04:00.110, Speaker A: Yes. If people tend to use ether just like bitcoin, does mean that ethereum starting.
01:04:00.180 - 01:04:02.030, Speaker C: To compete with cryptocurrencies.
01:04:02.770 - 01:04:17.620, Speaker A: If people decide to use ether as a cryptocurrency, then ether will compete with other cryptocurrencies. Yes. What's the question over there, by the way? I feel like I had asked, you had raised your hands, you'd offer to answer, but then. Yeah.
01:04:26.570 - 01:04:36.730, Speaker C: Could you just comment on how using proven stake would solve the might help to mitigate the environmental impact of a global computer?
01:04:36.880 - 01:05:06.994, Speaker A: Yes. Okay. So in general, blockchains have two categories of inefficiency. One category of inefficiency is that you have a huge number of computers that are running every single transaction. Another, and this is important to note, like a lot of people don't understand this, an entirely separate category of inefficiency is the fact that there is this mining process, which is just a bunch of hash calculations that are actually related to transaction processing. So the way that I've started to describe proof of stake is, I call it virtual mining. So the idea is proof of work.
01:05:06.994 - 01:05:40.618, Speaker A: Take a dollar, convert it into, then use the dollar to buy a minor, plug the miner in, and the miner produces blocks from time to time. Proof of stake. Take a dollar, use a dollar to buy ether inside of the system. Use a protocol mechanism to convert the ether into a virtual miner. And then the protocol simulates the virtual miner having the right to randomly create blocks from time to time. So it simulates the effect of proof of work without actually having actual energy consumption. So that's the way that it kind of tries to be more environmentally friendly from that standpoint.
01:05:40.618 - 01:05:50.450, Speaker A: Now, the second category of inefficiency, which is that every computer processes every transaction that is not addressed in proof of stake. So our plan is to actually address that in our scalability proposals.
01:05:56.090 - 01:06:00.402, Speaker C: What is your vision for the privacy issue on ethereum?
01:06:00.466 - 01:06:47.230, Speaker A: Yes. Okay. So in general, making the underlying platform kind of fully private, my opinion is that it's currently kind of like, there are extremely advanced forms of cryptography that might be able to do it, but at this point, it's not really worth it trying to go in that direction, because first of all, a lot of applications don't need that. The extra expense of going with that introduces other issues and so forth. So our approach with privacy has been to keep the world computer sort of fully transparent, but let people use various different cryptographic techniques on top. So stuff like ring signatures, zero knowledge proofs, which, as I said an hour ago, you should learn about. There's state channels, Hawk.
01:06:47.230 - 01:07:33.300, Speaker A: There's like a lot of different techniques where you can preserve the privacy of specific applications, whether it's currency transactions, whether it's like the code behind a smart contract, whether it's some kind of claim about your identity or whatever else. So we're planning on kind of trying to work with other groups on making it as easy as possible for developers to use these various techniques. But on our side, the main thing that needs to happen to the Ethereum protocol is basically virtual machine efficiency improvements in order to make it practical. So right now, the Ethereum virtual machine is good enough for kind of most smart contract stuff, but it's not really good enough to actually implement entire new cryptographic algorithms in it. And in the longer term, we kind of want to try to get it to that point.
01:07:35.910 - 01:07:38.078, Speaker D: Do you see a role for pestrology.
01:07:38.094 - 01:07:44.562, Speaker B: Using reputation systems that exist on Ethereum itself about, say, the security or correctness of a particular smart contract?
01:07:44.626 - 01:08:08.990, Speaker A: Yes, that's definitely a good way to do it. Aside from the correctness of a smart contract, the other thing you want to vouch for is maybe even the correctness for an interface to a smart contract, because that's an area where you also get a whole bunch of security issues, like, does this button really, this button might say, enter into financial contract, but does it actually enter into a financial contract, or does it divorce your wife?
01:08:11.570 - 01:08:18.100, Speaker C: I'm just wondering if you've thought about much about artificial intelligence incorporating that into the Ethereum platform.
01:08:18.870 - 01:08:55.070, Speaker A: Yeah, so a lot of people talk about this to some degree. The fields are fairly separate. Daos are autonomous in a different way from the way in which ais are autonomous, and there's a furious sort of large difference between the two. But at the same time, there's opportunities for crossover. So ais can participate in daos, ais can participate in markets on the blockchain. There's some mathematical parallels between kind of the way that you would design the different systems. So there's parallels between evolutionary algorithms and economics and so forth.
01:08:55.070 - 01:09:05.620, Speaker A: And obviously, there's a huge crossover between people who are interested in both fields, because they're both sort of part of nerd culture now, which is great.
01:09:07.350 - 01:09:11.780, Speaker C: Will Ethereum have the same scaling issues as bitcoin itself?
01:09:13.270 - 01:09:48.090, Speaker A: Yes. So right now, Ethereum is roughly as unscalable as bitcoin is. Now, that said, bitcoin does have kind of extra political problems, which make it which limits scaling even more. On top of that, and up until now, we don't really have those issues. So we can kind of push, basically miners at this point, they can kind of vote the gas limit up themselves if we're being too obstructive about it. But in the long term, the reason why these kind of size limits exist is because of this problem that every node processes every transaction. And so you can't load the system up more than the amount that a single computer can handle.
01:09:48.090 - 01:10:17.270, Speaker A: And in fact, you can't even load the system up more than about 5% to 10% of what a single computer can handle. So in the longer term, looking at sharding was the one sort of buzword that was mentioned. This is the idea that instead of every node processing everything, you split transactions up to groups, you have different randomly select subsets of computers to verify different groups. And in that way you have hundreds of different transaction verification processes running in parallel. And that way you can increase scaling by a huge amount. So that's where we're going. Long term.
01:10:18.970 - 01:10:29.382, Speaker C: There'S a lot of applications that can potentially use ethereum, have a lot of business value behind them, and there'd be a lot of disruption if somebody takes system offline.
01:10:29.526 - 01:10:31.366, Speaker B: How do you get around these spam.
01:10:31.398 - 01:10:35.470, Speaker C: Attack issues that have happened in the bitcoin world where people, small transactions.
01:10:38.130 - 01:11:20.060, Speaker A: Ultimately, I think the only way to get around the spam is basically economics. So you rely on the gas limit, you rely on transaction fees. Ideally in the longer term, I think in the shorter term you can do that, but in the longer term, increasing the scalability of the platform itself, so that the amount that you would actually have to spend, the amount that you would actually have to spam in order to sort of start pricing illegitimate users out of the market, is going to be very high. I would say that's the only approach, because if you try to take other approaches that actually try to kind of distinguish between spam and not spam at the protocol level. I think that's basically just an opportunity for politically motivated censorship and we shouldn't even go there.
01:11:22.350 - 01:11:25.498, Speaker C: Yes, I'm a big believer in Dao.
01:11:25.594 - 01:11:25.950, Speaker A: Yes.
01:11:26.020 - 01:11:41.170, Speaker C: And I'm looking forward to see the first real crowd sale. So last couple of weeks was a lot of talk about the Digix crowd sale, which we don't think that is a dow.
01:11:41.750 - 01:12:51.580, Speaker A: Yeah. Personally, the thing that really excites me isn't just people making dows for the sake of making dows, it's people making dows and actually using dows in order to create kind of innovative governance or mechanisms or even kind of platforms that would not even be possible without that kind of mechanism. So for some of these simpler applications, I almost feel like dows are a bit superfluous because if it's just a company that sells stuff in the physical world, then you're already relying on this sort of legal model of security, and what's the point of adding another model of security on top of it? Whereas with something like Maker, for example, maker is the ideal user for a DAO, because maker is a thing that actually does only exist in cyberspace or in kind of cipher space, I suppose. And having some kind of decentralized governance so that the protocol can upgrade itself over time actually is really useful for it. So I would say, yeah, Maker is probably one of the examples of dows that I could see sort of actually becoming fairly interesting over the next year.
01:12:54.030 - 01:12:57.690, Speaker C: Can you share with us your thoughts on the legal implications?
01:12:58.750 - 01:13:43.580, Speaker A: What legal implications, specifically? You mean the ones where you have like a DAO with five members in five different jurisdictions that sell stuff to another DAO in seven other jurisdictions, you have to figure out your base taxes. Yeah, I mean, there's a lot of stuff that's just going to have to be worked out by the lawyers to some extent. I mean, to some extent, I think the law is going to end up heavily target kind of people, the actual users that are interacting with dows rather than the dows themselves. So basically, ultimately, if you kill someone, you've killed someone, you should go to jail regardless of whether you use the hammer or whether you use the dal to pay for a hammer to do it. Thank you.
01:13:45.550 - 01:13:57.382, Speaker D: I'm glad we mentioned dows and the political turmoil in bitcoin. So, related questions. Do we have a vision for the dowification of the foundation, especially the government?
01:13:57.536 - 01:14:40.326, Speaker A: We're looking definitely very actively exploring that. The thing is that first of all, we don't want to do is create a dow that has some risk of kind of screwing up very quickly. So we'd want to kind of go through that process in some way that's kind of fairly safe and step by step. And I think we're going to kind of accelerate that as time goes on because we didn't really have enough kind of up until now we haven't had too much effort to devote to it. I think in the longer term we'll have more effort to devote to it. In the longer term. We'll also see slock, dao, digixdao, makerdao and so forth, either succeed or crash and burn.
01:14:40.326 - 01:14:49.120, Speaker A: And hopefully we'll be able to kind of learn enough lessons from that. Hopefully we'll see lots of successes, but we'll also see enough crashes and birds that we can actually learn from them.
01:14:51.490 - 01:14:57.106, Speaker D: We don't have the bitcoin like turmoil. You're a sweetheart and smart, right?
01:14:57.288 - 01:15:47.282, Speaker A: Well, I think dellification, even if you accept me being perfectly nice as a security assumption, even still I am subject to hammers falling on my head and buses crashing into me and whatever else. And so ideally you want the system to be able to survive and govern itself well, regardless of what happens to myself or potentially it might stop being nice and your security assumptions wrong. I do think coming up with some kind of sort of dowfied foundation is important in the long term. Yes.
01:15:47.416 - 01:15:48.500, Speaker C: Robert from.
01:15:51.670 - 01:16:59.800, Speaker A: DB, which one? Big chain DB. Yeah, it's an interesting project, although it seems like it's one of those things where I'm not really sure if they're kind of being a database or whether they're being a blockchain, because they talk about using a traditional distributed database and that's how they achieve their extreme storage. But when I read through the white paper, it seemed as though they still have either every node processing every transaction or something close to that. And obviously you can use traditional techniques to decentralize the database part, but you have to decentralize the actual transaction processing part as well. One of the hardest things with scalability for blockchain specifically is how to sort of scalably solve the double spending problem. And that's where things actually start to get quite a bit harder. I'm sure the projects will sort of continue to evolve and it'll find some kind of a niche that's very useful to some people and I hope they do well.
01:17:03.230 - 01:17:05.482, Speaker D: So you mentioned that at some point.
01:17:05.616 - 01:17:12.182, Speaker C: The success of Ethereum will rely on using software verification system to validate contracts.
01:17:12.326 - 01:17:14.614, Speaker A: Would you be able to use software.
01:17:14.662 - 01:17:18.430, Speaker C: Verification system also to exploit Ethereum.
01:17:19.490 - 01:17:47.080, Speaker A: How would you use a formal verification system to exploit Ethereum? Well, if you can validate certain claims about existing contracts. So the idea is that if you run the validator and you can kind of pick out which contracts actually have bugs in them and exploit them. Yeah, I mean, once the tools get powerful enough, you'll be able to do that, and the good guys will just have to use the same tools to ensure they're protected. Unfortunately, I don't really see a much easier way out of that.
01:17:49.210 - 01:18:05.500, Speaker C: Yes, you talked tonight about a number of security problems which still exist in the blockchain and Ethereum world. You've got some ideas on how we might solve them. If you were to come back in two or three years time, are you going to say that the whole system is now fully secure, or will we still be?
01:18:09.650 - 01:18:58.790, Speaker A: I hope that the core will be secure, but ultimately any kind of complex and growing ecosystem, there's always going to be new stuff, there's always going to be a frontier, and at the very least a frontier will continue to have security challenges going forward pretty much forever. So one of my favorite sayings about software development is software that's finished is software that's dead. And I think to some degree that's going to be true with the kind of, I guess the security ecosystem, jungle, whatever as well. Though hopefully the area, as particular areas get more and more established, they're going to become more and more secure. And the number of vulnerability of issues that we find is going to sort of continue going lower and lower. Just to clarify, that's the number one, as in this number of fingers.
01:19:16.190 - 01:19:35.890, Speaker C: I have a quick question for you, Vitalik. I'm just curious if you have any ideas the kind of ecosystem you see for developers. Do you think Ethereum, we're going to see a large number of Ethereum developers, or do you think it's going to be real, to be small group of people who are coding?
01:19:36.790 - 01:20:04.906, Speaker A: I would say there already are a large number of Ethereum developers. If you go on dapps, ethercast.com, you can see about 195 applications being developed. And I think one of the positive things is it's a combination of different backgrounds. You have people that are just completely getting new to Ethereum from the outside, that are just starting their own kind of just open source projects or startups. You have people coming in either from the bitcoin space or other cryptocurrency spaces. You have people coming in from large companies.
01:20:04.906 - 01:20:56.970, Speaker A: I actually think it's a fairly healthy balance right now, though of course in anything that's close to cryptocurrency. The concept of healthiness is a bit relative. No, you guys are actually quite good, I think, in the. It's definitely one of our focuses to try to make things like documentation easier and continue to find ways to kind of bring people in from different groups. We like to see diversity and not just sort of fake. Let's put a hispanic person and an african person here and take a phototype of diversity, but diversity across different backgrounds. There's diversity across different continents, diversity across different industries to try to kind of make sure that all the best ideas kind of happen and nothing gets missed.
01:20:58.030 - 01:21:00.520, Speaker C: All right, thank you very much.
