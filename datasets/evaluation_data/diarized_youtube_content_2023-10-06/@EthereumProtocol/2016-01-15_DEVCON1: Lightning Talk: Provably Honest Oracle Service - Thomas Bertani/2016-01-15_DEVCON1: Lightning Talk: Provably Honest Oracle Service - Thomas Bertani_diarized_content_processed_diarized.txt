00:00:16.730 - 00:01:42.750, Speaker A: Hi to everybody, I'm Thomas Bertani and I try to briefly explain what the point of Oracle is. So we keep talking about the potentials of smart contracts, but one of the main limitations of smart contracts is that we have to rely on on chain data only. So in the previous presentations you already seen something like BTC relay or other price fits, which are essentially some contracts from where you can get some data which should be updated by an external data provider. So essentially this means that there is a party, an external centralized party that is pushing some data with some cryptographic proof to this contract so that you can fetch this information from another contract. So the approach of Oracle is slightly different. What we have built here is a contract interface so that you can use from your own contract our service, to fetch APIs and data feeds from the Internet. So since we are a centralized party, because the fetching cannot be done on chain and directly with some opcodes or things like that, how can you trust us? We are sending TLS notary proof, which is proving that a certain content was given as result by a certain server at a specified time.
00:01:42.750 - 00:02:52.930, Speaker A: So in this way you don't have to trust us not to alter your data and you are 100% sure that the data coming from us is not altered. So to explain with some code, with what I just said, there is no code here. Oops, I just showed directly on the website. So if you go to this subdomain dev Oracle, it, there are some sample codes that hopefully now will be loading. And calling Oracle is very easy because essentially we are providing a solidity file to import directly in your code and after that you'll have a base contract which is called using oracleize. So essentially you can write your code and in the definition you can extend, you can inherit our contract by just typing is using oracleize. So this is providing some functions such as oracleize underscore query.
00:02:52.930 - 00:03:55.270, Speaker A: The code is not loading, so this is a little bit difficult to explain. Let's see if at least the documentation is working. Yes, so essentially you are sending us an asynchronous request and this is the syntax. So you just type oracleize underscore query, and as first argument you specify the data source. The data source in this case is Wolfram alpha, but obviously you can use directly any HTTP API you want just by typing as data source URL. So this is asynchronous and then we are sending back a transaction which is calling a callback method in your contract. So the only thing you have to do is to implement a callback method which is described in the commutation here callback function, and then here you decide what to do with this data.
00:03:55.270 - 00:04:47.060, Speaker A: So essentially you can write in just ten lines something like a data feed which is always keeping updated the price of eater, taking the price from Kraken or things like that. There are even some utilities you can use because obviously we are sending back this as string. So we have some JSON and XMl helpers so you can just fetch some fields if you don't need the old response back from the API. And there are some helpers so that you can do string comparison, string concatenation and all these kind of stuff. Thank you for your attention. You close.
