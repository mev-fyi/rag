00:00:27.690 - 00:01:05.638, Speaker A: Welcome back to episode two of writing smart contracts with the Go implementation of Ethereum and Mutan, the smart contract language. My name is Stefan Chill. I'm the CCO for Ethereum, and today we're going to look exclusively at installing how to install the go implementation of Ethereum on top of OSX mavericks. It's pretty straightforward, just a few things to pay attention to, so let's get started. First of all, let's try to understand what's available. The Ethereum Go implementation is divided in two repositories on GitHub. The first one is ethgo.
00:01:05.638 - 00:01:52.034, Speaker A: Ethgo is a series of libraries and utilities with which you can build your own implementation of the go client. And the second part is Go Ethereum. Go Ethereum contains ether real, which is the actual GUI, and Ethereum itself, which is the CLI, the node interface. And of course, both Ethereal and Ethereum make use of the ethgo repo. Now, the below should work with just about any OSX mavericks installation. Now, what I'm using in this particular tutorial recording, I'm using this thing called parallel. There's a 14 day trial, allows you to run a virtual machine on top of your Mac, and I find it quite convenient to use snapshots.
00:01:52.034 - 00:02:34.710, Speaker A: When I make a mistake, I can revert back very quickly without having to worry about damaging my install. So the other thing before we get started that you should have a look at is potentially this code, ethereum.org website, which currently doesn't display very well on the virtual machine, but it contains binaries. When we make binaries available for OSX, you'll find them there. Of course, anytime you don't know the binary, don't expect to have the latest and greatest code. You'll get that particular release, and that's it. So, building from source what we're going to do today is the best way to get the latest and greatest code for Ethereum go client.
00:02:34.710 - 00:03:09.294, Speaker A: I'll close this little window here. Finally, you have a Go Ethereum wiki. The Go Ethereum wiki contains everything we're going to look at today, plus a lot more, including JavaScript API, JSON RPC API, and so on and so forth. So how do we install this thing? Well, first of all, we need to get brew, brew or homebrew. It's the same thing, by the way, is a package manager for SX. Now, there's a very simple line that you can copy. It's a ruby line.
00:03:09.294 - 00:03:44.780, Speaker A: SX Mavericks comes with Ruby installed right outside the gate. So I'll open terminal. I've copied that comment and I'll paste it. Now it wants my password. This is a good time to remind you that at no point during this tutorial do you need to use the sudo command or pseudo, depending on how you pronounce it. You don't use pseudo to install normal apps on OSX, so why would you need it here? It's probably best not to use it. Press enter.
00:03:44.780 - 00:04:12.738, Speaker A: It wants the Xcode and conveniently allows you to download it. So I'm going to pause this recording because this takes a couple of minutes, and then I'll come back when it's all said and done. Okay, we're back, so I'm getting this little message that the software was installed. Brilliant. Press done. I'll close safari so you can see a little bit better what we're trying to achieve here. Make this window a little bit bigger.
00:04:12.738 - 00:05:02.920, Speaker A: The installation is completed, so I press the key and now it's going to download and install homebrew. This is while it's doing this, just a quick reminder that all the commands, everything I'm typing here has been documented in a simple tutorial. It's located on a forums, as you can find the link in the description of this video. While it's doing that, I'll take the time to explain a very frequently asked question, which is, what's the difference between the go ethereum client called ethereal, the GUI of it, and Alice Zero, the C Plus plus implementation? The answer is nothing. There is no difference. They both implement the same white paper and yellow paper as written by Vitalik and Gavin respectively. They have the same feature set.
00:05:02.920 - 00:05:38.538, Speaker A: It's also a good time to remind everyone that this is pre alpha software, and therefore comes with no guarantees or warranties of any kind. You install all this at your own risk. Okay, so it's finished installing. I skipped part of the video because it took a little bit longer than expected due to my slow Internet connection, and we're ready to brew. So the first thing you want to do is run Brewdoctor. Brewdoctor is a command that just ensures that everything's hunky dory on your system. There you go, ready to brew.
00:05:38.538 - 00:06:21.840, Speaker A: If you got some warnings there while you were running this command, it's probably because you're trying to install all this on an existing installation of OSX. Maybe you've used these tools in the past and you can safely ignore those warnings. The next thing we need to install is go. Go is of course the programming language, so we run the command brew install go the beauty of Go is that it's cross platform. So this Go implementation can run on Windows, Linux OSX and a couple of other platform. Okay, it's giving me the little brew icon there. Everything looks fine.
00:06:21.840 - 00:06:54.710, Speaker A: So the next thing I need to do is create a directory to store my Go application. So I'm going to put a Go directory. You can call it whatever you want, it doesn't matter as long as you make sure that the path that we'll enter later on reflect the changes you make to the name of this folder. In my case, I call it go. That's what most people use. Then we need to set the go path. Go path is where Go is going to look for the go applications and that's going to be the folder we just created.
00:06:54.710 - 00:07:17.594, Speaker A: And that's only going to run for the duration of this session, of this terminal session. So we're going to make it a little bit more persistent. We're going to add it to our bash profile. Bash profile is a file that's read every time you log in onto your computer. And I'll add the gopath for you. All set. Now we need to install dependencies.
00:07:17.594 - 00:07:48.650, Speaker A: Now there's only a few of them. I'll paste them here. There you go. So we got mercurial, obviously the source control software, GMP, which contains some of the functions that the underlying Go client implementation require. Level DB is of course the database, and Qt five is the GUI libraries that the go client uses. So we'll take a break. I'll come back when this is finished.
00:07:48.650 - 00:08:15.060, Speaker A: Okay, all done. I'm going to wait for it to completely finish. There you go. All set. So we got all the dependencies and now we need to install Qt. I'll paste those comments, they're a little bit complex. I recommend you do the same using the page I've linked in the description of this video.
00:08:15.060 - 00:08:51.054, Speaker A: There you go. Those are the flags. Four, Qt, five, all set. Right, we're almost done. All we need to do is retrieve the source code, build, then install Ethereum. Ethereum is in this case the name for the Cli of the Go implementation. Now the good thing about the Go get command is that it allows you to download the source, build and install all in one go.
00:08:51.054 - 00:09:17.494, Speaker A: And this is what we've done here. And don't forget the v flag. If you have a problem with the install, it'll output it rather than stay silent. It's always convenient to have that information. Now, sometimes you'll get warnings like this and that's completely normal. You can safely ignore them and you're all set. So now what we're going to do is we're going to get the Gui ether real.
00:09:17.494 - 00:10:06.598, Speaker A: Same command, same principle. Keep in mind that all this stuff is pulling from the git Repo. Even the stable git repo is slightly unstable as it stands. Sometimes you might get some errors, in which case flag it on the forums, let us know what errors you're getting, and we'll make sure to fix it. Okay, we're all done here as well. For your convenience, I recommend that you set your path to include the Gopath bin bin is the folder where the Go programming language will place your binaries. Funny enough, and by again making it sticky, you ensure you can invoke Ethereum from anywhere on your system.
00:10:06.598 - 00:10:40.478, Speaker A: Now at that point you have a choice. You can either run this release version and the Go team is pretty good at releasing them on a very regular basis. I think this one I've just pulled was the PoC five release candidate four. You can also choose to build from edge. Now this is only for developers who want to have access to the bleeding edge and therefore might bleed a lot. So if you were to choose to bleed from edge, have a look at the link in the description. It's only six comments to run.
00:10:40.478 - 00:11:18.750, Speaker A: It'll basically check out the development branch from the git repo that you've pulled earlier and it will run and install. In this case, I'm not going to do it because I want to make sure I can finish this tutorial without any issues. So now that we've installed both Ethereum the Cli and Ethereum the GuI, we can run Ethereum M, and the M is for mine. There you go. So at the very beginning here, you probably noticed it had given me a series of twelve words. That's how I can rebuild my wallet. And yeah, it all works.
00:11:18.750 - 00:11:59.690, Speaker A: We're already mining. We even get a cute little mining icon there now to exit this stuff. Now you know it's working, you can safely do comment c control C case. There you go, we're all set. So you would think that in order to start the GUI, you just need to type ethereal, which is the name of the binary file that you'll find in your go forward slash bin folder. Actually, in this case, because it bundles some QT assets, we're not going to be able to just run that command. We'll have to navigate to the correct folder, which is Ethereum godeum ethereal.
00:11:59.690 - 00:12:29.700, Speaker A: And now we can call Ethereal. If you try to run Ethereal from anywhere else, you'll get an error message and it won't start, so let's have a look. Now, it started the GUI. You can see it over there, and sure enough, it's requesting transactions. And there you go. So at that point, the GUI, as you'll discover in the next tutorial, is completely temporary. You could restore your Ethereum account.
00:12:29.700 - 00:13:15.070, Speaker A: If this is the first time that you run Ethereum, or ethereal, I should say, you press the create account button, you'll get a screen asking you if you want to recover from a previous account. You don't have to, since you don't have one, you'll have to exit and restart Ethereal in order to get past that first screen. There you go. And now you can restart it again. Because it's a testnet, I tend to not really worry about keeping track of my accounts and my addresses, unless I'm holding a large quantity of test ether. And there it is. So keep in mind that the GUI again is a work in progress.
00:13:15.070 - 00:13:54.558, Speaker A: For example, it doesn't track all the blocks necessarily up to the latest one, but you can find them in the console. Also, ignore all the QNs view, handle tablet events. Those are bugs in the QT implementation of the GUI, but it looks like it's working. So the last thing before we finish this video, keep in mind that you can press command p to connect to a peer. Okay, well, we're all set. Have fun with it. Don't forget to watch our next video on how to write smart contracts using mutant and this wonderful GUI, and I'll see you in the next one.
00:13:54.558 - 00:13:54.810, Speaker A: Bye.
