00:07:44.000 - 00:07:54.456, Speaker A: I think I actually had obs left open from last time on this computer. And I suspect that I've screwed something up because of that. You're streaming. You're trying to stream.
00:07:54.568 - 00:08:02.790, Speaker B: Yeah. And it said the stream was interrupted when I started streaming into it, so. Oh, I think there's sound.
00:08:10.760 - 00:08:22.570, Speaker A: Okay. Sound is back. Cool. Thank you, Tim, for covering my ass. I had something wrong in my configuration. Clearly. Just a quick recap for those that are on the web.
00:08:22.570 - 00:08:53.140, Speaker A: Yeah. The hardest part of the job, Devnet nine. We did have a spec release for Deneb on the consensus layer. There was a couple of tests that were broken. Those have been released as a hot fix to the consensus spec test repo, but have not changed anything in the consensus specs repo with respect to release. Hopefully people have taken a look. I will now pass it off to those coordinating Devnet nine.
00:08:53.140 - 00:09:02.630, Speaker A: What's our intended timeline? I guess with comments from client teams on whether they're looking ready or not.
00:09:05.640 - 00:09:21.740, Speaker C: Yeah, I think we'd ideally like to have Devnet nine some point next week. But two things we want to wait for are first signal from the client teams as to how ready they are and then where the hype tests are. Because we'd like to get hype tests in before we do devnation.
00:09:24.880 - 00:09:33.890, Speaker D: I can start with the hype tests. They are ready and running right now for Devon nine. So, yeah, they were updated last night.
00:09:36.720 - 00:09:50.176, Speaker A: Thanks, Mario. Any client teams that would not be ready for Devnet nine, which Perry would that mean? A Devnet release tomorrow or Monday? What would the requisite timeline be for that?
00:09:50.358 - 00:09:53.040, Speaker C: We can just do it mid next week. So Wednesday.
00:09:54.660 - 00:09:57.460, Speaker A: But in terms of when you need client releases.
00:09:59.320 - 00:10:06.980, Speaker C: We normally just do forks off of branches. Sorry. We just use the branches from clients so we don't need releases for devnets.
00:10:07.880 - 00:10:45.620, Speaker A: Got you. Very cool. Is any consensus layer team not ready for such a timeline? Okay. And any execution layer teams that are here, is anyone opposed to that timeline? Okay. Mario says Geth needs blob fee merge. Is that something likely the next couple of days? Yes. So I think we can be ready by next.
00:10:45.620 - 00:11:15.310, Speaker A: All right, cool. Perry and co, y'all can circle with the rest of the teams and make sure that we're in a good spot. Justin. So for els, I'm actually literally just running those hive tests right now. And we've running into some issues. So it depends on what the definition of next week is. I think so put us down as ambivalent the week after this one.
00:11:15.310 - 00:11:44.310, Speaker A: What was that, Marius? I said the week after this one, that's the next. Yeah. Thank you, Mark. Yeah, so it is that intended Wednesday, but Perry and co. Can circle back with y'all and see how things are going at the start of the week.
00:11:44.840 - 00:11:52.410, Speaker C: Yeah, and if not, we can still start the devnet as long as we have at least a couple of clients ready and then we can add the rest post effect.
00:11:56.910 - 00:12:24.820, Speaker E: Just want to add something from Teku. So we are still working on blocks V three APIs. So we are ready if we don't consider potential interrupt between clients using these new endpoints for block production. If it's not intended, we are ready because we have the new churn pr just ready to be merged. So next week will be fine.
00:12:26.090 - 00:13:23.570, Speaker A: Let's go ahead and touch that Paul brought up. This is PR three five eight in the beacon APIs repo. Looks like there's a change to the block V three, which is used for block production between the validator client and the beacon node. This does seem like a pretty transparent or the network isn't going to really be aware of this unless we tried to do mix and match things. So I would lean in favor of what Enrico just suggested, which is to not be concerned about the granularity of whether clients made this change or not. But I'm open to alternative opinions. Okay, does anybody see this API change as a blocker for moving forward on Devnet nine?
00:13:26.940 - 00:13:43.070, Speaker E: Yeah, but to be clear, we are still working on the previous PR, which is not the consensus value, but block V three, this has been already merged, so he's not talking about this additional change, but the V three endpoint completely.
00:13:43.920 - 00:14:10.190, Speaker A: Right, but we're good to move forward. Okay, I see some thumbs up. Thank you. Anything else on devnet nine?
00:14:16.200 - 00:14:43.100, Speaker C: I had one tiny request to the beacon API stuff. This pr got merged adding blob, sitecar event. Simon, Andrew are looking to track that event in satu. And it would be nice if clients have support for this pr sooner rather than later. So we can also start testing tooling such that by the time we do the first testnet, we're not testing something that's alpha.
00:14:53.920 - 00:15:14.140, Speaker A: Got any comments regarding the readiness of this? Okay, anything else on devnet nine?
00:15:31.200 - 00:15:50.390, Speaker B: Yeah, I guess there's a question in the chat. Do we want to do the contract deployment the same way we do on main net, even if it's not with the perfect address? I think we have mined one suboptimal one and we're trying to look for a nicer one.
00:15:53.520 - 00:16:24.650, Speaker A: I would prefer to see that. Yes. Light client. Are we ready to do that deployment method. Okay, who's going to be in charge of that deployment method? And it also implies that we need enough lead time between Genesis and the fork to be able to fund the account, run the script. I mean, obviously that can happen extremely quickly, but we just need to be on it.
00:16:30.050 - 00:16:47.620, Speaker C: Yeah, we can definitely add some lead time, like 20 epochs or something. So roughly 2 hours. If someone shows me what the deployment method is, we're happy to do it, but otherwise we're also happy to just pass on the ETH and someone else does it. Whatever works best.
00:16:49.990 - 00:17:52.290, Speaker A: Yeah, I mean, I think it'd be great if like Kleiner Martin could work with the DevOps team to show them how to do it so that we can get it scripted and kind of integrated into the processes. Okay. And then there's a conversation going on in the chat around the updated KZG values. Carl says looking like we're aiming for Tuesday on those updated values. Is that something that we're attempting to get into this devnet, or will we push it to a side test for now? Subsequent devnet or side test? Yes, as mentioned, I'm hoping to have that done by Tuesday, but no guarantees. The issue here being that after that it needs to be compiled into the libraries. So that makes timing very tight for a Wednesday Devnet.
00:17:55.110 - 00:18:17.820, Speaker C: We've been putting out the alert that clients should allow it to specify as a runtime flag on almost every single Devnet spec release. I think all the clients do have such a flag though. We've even been using it. Or is the worry that the flag is not respected, in which case we can just get rid of it?
00:18:20.110 - 00:18:35.230, Speaker A: I think the worry is that there's some final work to do, and it's unclear if that would happen before Wednesday with respect to getting this into the cryptographic libraries. Or are you saying, Perry, that the cryptographic libraries have flags?
00:18:36.050 - 00:18:54.550, Speaker C: I'm talking about the final client. Cool, got it. Then if it's ready in time, then we'll use it. But otherwise, I guess we stick to the old trusted setup for now.
00:18:56.140 - 00:19:01.560, Speaker A: The untrusted setup. Mario?
00:19:02.620 - 00:19:30.080, Speaker D: Yeah, so one small consideration that might be taken into account is that we do need to update the tests for that. So if you guys want to use the trusted setup for devnet nine, I think that will be fine. We just need to consider that the hype tests and the actual Devon nine trusted setup might differ. So yeah, there's going to be a difference, but I don't think it should be impactful.
00:19:34.110 - 00:19:39.458, Speaker A: Martin. Right.
00:19:39.544 - 00:19:48.930, Speaker F: Hi, sorry. So I missed a little bit of the context of what we talked about previously, but we're talking about deploying 47 80.
00:19:49.510 - 00:19:52.790, Speaker A: You sound very muffled, Martin. Is there maybe angle?
00:19:53.210 - 00:19:55.494, Speaker F: Is it possibly better now?
00:19:55.692 - 00:19:56.950, Speaker A: Yes. Thank you.
00:19:57.100 - 00:20:28.690, Speaker F: Okay, so I missed a bit of the context to the deployment of 47 80 in Devnet nine. But the one thing that is important, I mean, exactly what code gets deployed by DevOps in the Genesis doesn't really matter. They can decide what they want to deploy and all the clients will just use it. What is important is where they deploy it. And all the clients needs to agree on what address they're going to use for this system contract.
00:20:30.070 - 00:20:36.740, Speaker A: There was an intention to not deploy at Genesis and to instead deploy between the interim between Genesis and the.
00:20:41.670 - 00:20:46.578, Speaker F: Sorry, I'm missing a bit, but we were talking about a testnet. Or are we talking about a mainet fork?
00:20:46.674 - 00:21:03.370, Speaker A: We're talking about Testnet. I think there's just. At least I have the desire to see just us run through that manual process and kind of get scripts and things together rather than just shoving it into the Genesis state. Unless you believe otherwise.
00:21:06.690 - 00:21:37.946, Speaker F: No, that's fine. But the big problem then is not making the transaction and putting funds there and deploying it. That's not the big one. The big one is that we need to make sure that all the clients have the correct address anyway. Regardless of how we put it there. It takes longer for everyone to put the right address and make a release. So, Matt?
00:21:37.998 - 00:21:38.950, Speaker A: Yeah, agreed.
00:21:39.370 - 00:21:49.420, Speaker F: If you have figured out the address, then put it somewhere publicly so all the client devs can just merge it. The correct address.
00:21:53.150 - 00:22:05.440, Speaker E: I think it's in the right address is in the exec spec test version four. Like there was a release of that test suite recently with an updated address.
00:22:07.170 - 00:22:13.620, Speaker F: Very good. Then. All the clientels should now know that they need to update this as soon as possible.
00:22:18.350 - 00:22:35.152, Speaker A: Cool. Should be good to cut out. Mario. Yeah. Okay, you're back. Can you start?
00:22:35.286 - 00:22:50.150, Speaker D: Yeah, yeah, of course. So the address in the latest release of the execs test is the one that is on the latest commit in the EIP, but it's not the one that is being mined right now, so there might be a change.
00:22:54.530 - 00:23:47.060, Speaker A: Got it. All right, I think we're on the same page on this. Any other Devnet nine related items? Okay. Any other Daneb or Cancun related items? Tim.
00:23:50.070 - 00:24:57.340, Speaker B: Okay, not that we need to make a decision about this now, but I think it's worth it, assuming Devnet nine goes well, to think about how we want to approach testnet deployment and I guess there's a few considerations there. The first is obviously Holski. The launch didn't go quite smoothly, so we probably don't want to use that as a first testnet. And then second, whether we want to have a first testnet before Devconnect or not. Because given Devconnect is in it mid November, this means that we probably want to have that Testnet early November at the laylist. And if we want to have the releases out, that's around like mid October or maybe late October, which is probably a month or less from now. So yeah, I'm curious if anyone has thoughts about that, like how realistic that is.
00:24:57.340 - 00:25:30.020, Speaker B: And I guess also it's worth noting, I think the implication if we don't do a testnet before devconnect, it's probably unlikely we can do mainnet before the Christmas holidays. Because after devconnect there's us Thanksgiving, and then there's basically three, maybe four weeks before Christmas holidays and people being gone. So that's probably not the best time to fork main net. Yeah, so just wanted to put that out there.
00:25:30.710 - 00:25:42.440, Speaker A: Curious, on your first point in relation to Holski, is it unlikely that we would be able to use Holski in a few weeks?
00:25:45.660 - 00:25:49.770, Speaker B: I'm not sure. Maybe someone who's more involved there.
00:25:51.500 - 00:26:25.050, Speaker C: So the Holski genesis is scheduled now for next week. So the 20 eigth. So it will be usable in time for dev connect. But I'd still make the case for Holsky not being the first fork, but rather potentially the second or third. Mainly because we have Gurley as a perfectly functioning testnet that is deprecated, which means we can try out the 36 blob option on Gurley. And if it goes badly, it's a deprecated testnet anyway. If it goes badly on Holski, then we have to figure out how to save it.
00:26:35.740 - 00:27:11.940, Speaker B: Yeah, I would also like if there's something that goes wrong with the whole ski deployment the second time, I think it's good to have a bit of buffer where we know if we go for Gordy, we don't have any other variable to control. We could also choose to do Sepolia first. Sepolia has a smaller validator set, so it might be a bit more easy to coordinate the upgrade. But yeah, either sepolia or Gorgia at least are stable and we can just think about deploying the fork rather than the stability of the network.
00:27:13.960 - 00:27:20.890, Speaker A: Yeah, the gorely first argument, given the deprecation, seems like a sound argument to me.
00:27:22.860 - 00:27:37.630, Speaker E: Yeah, I think we can get more insight from 363 fix blobs if we do that one first. Otherwise poly is so small that you might not get enough information.
00:27:41.120 - 00:28:01.350, Speaker B: Yeah, and we agreed as well a couple of calls ago to not like if three six is bad, just leave it as is on one test net and shift the value for other test nets. So in that case I'd also lean towards gorely being the one that's not up to main net spec if there's a change to be made.
00:28:05.320 - 00:28:06.100, Speaker A: Yep.
00:28:08.040 - 00:28:15.050, Speaker E: Considering that is doomed to be deprecated, we'll go away with three six.
00:28:17.020 - 00:28:43.090, Speaker A: Yeah, so Tim's second point was with respect to timelines and whether a first testnet is in the cards to be forked prior to devconnect. Call it first week of November or so. Is there a reaction to that type of timeline intended one way or the other?
00:28:47.750 - 00:29:37.070, Speaker G: On the lighthouse side, I think we can make that timeline. I'm keen to start testing on bigger testnets because it is like the networking component would be the most at this point, an unknown that could require more work. So I think it'd be good to get more information about that more quickly. And then just on our development side, we're in the process of getting the DNEB work merged into our unstable branch and I think that's probably the locker for us in terms of getting it into one of the bigger devnets. But we should definitely have it in by devconnect.
00:29:41.410 - 00:29:47.570, Speaker A: Mario's in chat says LFG any other reactions to the timeline?
00:29:50.960 - 00:29:54.800, Speaker C: I think another mind is okay with this timeline.
00:30:03.410 - 00:30:16.980, Speaker A: Perry, are we intending to do some main net shadow forks as we move into the testnet progression? Because that also, depending on how we scale up nodes and stuff, could give us some interesting data.
00:30:19.030 - 00:30:53.150, Speaker C: Yeah, we can plan for that. I think the main issue is that the nodes we rent for main net shadow fox tend to be quite well provisioned, which means the blobs won't really stress them. I'm loosely in favor of having smaller nodes, but a larger network, like more physical nodes in the network, so that we can test more peer to peer related timing issues, et cetera. That might teach us more, but if there's more appetite for mainnet shadow forks, I can do that first, which I was preferred.
00:30:57.740 - 00:31:10.510, Speaker A: Yeah, I mean mainnet shadow forks but in the direction of slightly lower resource and more nodes, or other types of tests that have more nodes I think is going to push us in the direction of a match. That's interesting.
00:31:12.080 - 00:31:22.130, Speaker C: Yes, once we have tab net nine up and running. We can look to start doing that kind of test. I would guess that's what we would spend most of October on.
00:31:28.400 - 00:32:32.040, Speaker A: Awesome. Any other comments or reactions to timelines or anything Tim brought up? Okay, other Dankoon related items. Okay, let's see. Enrico put up a link to an issue or PR about some discussion in relation to adjusting the attestation timing window. Enrico, can you give us some context here?
00:32:32.910 - 00:33:16.786, Speaker E: Yeah, I was more focused on not the specific new attributes that has been discussing. Actively discussing the PR is more on the configuration changes that we recently had. Let's say starting from the networking configuration that at some point they become configuration. This triggers some interoperability issues, especially sometimes with a light client with a lighthouse. Sorry. And this was because at some point the validator client that's used beacon node. So remote validator client loads the configuration from the beacon node.
00:33:16.786 - 00:34:36.720, Speaker E: And if you don't have a predigrated your beacon node with the new value, the VC will not start because the new version expect these parameters to be there. And so what we did recently, very recently, at least on the tegu side, on the VC side, we try to start from a known configuration and known preset and then apply the attributes, the parameters coming from the beacon node endpoint, which means that if the beacon node is still on old configuration, the vc side still get all the parameters that expect. So it should fix everything that happened in the past. But I know if other clients, what are the logic on the other clients when they start VC getting configuration from the beacon node. So I think on the teco side we should in a better position to try to avoid those configuration changes and breaking changes.
00:34:40.670 - 00:35:04.900, Speaker A: Okay, so we're saying if the VC is out of sync with configuration changes of the beacon node, we can sometimes have failures. Yeah. So there might be a better practice to pull down configuration values from the beacon node instead of strictly only respecting what's local to the VC. Or am I missing something? Yeah.
00:35:05.350 - 00:36:06.882, Speaker E: So previously we were applying only the preset and then all the configuration from the beacon node. So this opens the door of having a beacon node not providing everything that the VC expect and force the operators to upgrade the bigger node first and then the validator client first after. And then if you also have a mix of vc from one client and the VN from another client, you have to make sure that the other client has updated the configuration first. So it happened recently. So taco now applies also the configuration from the VC perspective. So ignoring. Well yeah, getting the updated information that the values or client has locally.
00:36:06.882 - 00:36:13.510, Speaker E: So even if the beaconode is slightly older, it can still get all the configuration.
00:36:16.490 - 00:36:26.540, Speaker A: I see. Do clients have reactions to this strategy that techu is using?
00:36:30.700 - 00:36:49.760, Speaker G: I'd have to look into what Lighthouse does in this scenario, but I thought we just loaded configuration in both the validator and the beacon and we would just log if they don't match based on the HTTP request. But I don't remember what we do if there's a mismatch.
00:36:51.620 - 00:37:29.640, Speaker E: Yeah, now we do some warning when we can ignore something that is not mandatory, but now we actually default to a known value and then override if beacon provides the information. Seems like a nice strategy. If all the clients applies this and there is no drawbacks, it could be reduced the interoperability issues when new config arise.
00:37:30.400 - 00:37:58.036, Speaker A: Right, so you're taking the strategy of beacon node config trumps the VC config in the event that that doesn't break anything. Okay, Enrico, is there. Maybe we should elevate this to maybe an issue in the beacon APIs for further discussion rather than embedded in this specs issue.
00:37:58.218 - 00:38:04.100, Speaker E: Yeah, it could be a nice place where we could start discussion there.
00:38:04.250 - 00:39:06.522, Speaker A: Yeah. Would you mind just writing up a quick version of this there? Okay. Any other perspective or comments on this? Otherwise we're going to take it into the beacon APIs repo. Okay. Are there any other items that weren't on the agenda that people like to discuss today? Okay then. Quick and easy. That usually means that the hard work is not on the call.
00:39:06.522 - 00:39:09.530, Speaker A: It's happening in the plants.
00:39:10.190 - 00:39:10.650, Speaker C: Cool.
00:39:10.720 - 00:39:21.710, Speaker A: So let's keep things moving forward for Devnet nine next week and otherwise, talk to you all soon. Take care, everyone. Thank you.
00:39:21.780 - 00:39:22.670, Speaker E: Bye, everyone.
00:39:22.740 - 00:39:23.434, Speaker A: Thank you, brother.
00:39:23.482 - 00:39:24.240, Speaker C: Thank you.
00:39:25.410 - 00:39:26.090, Speaker A: Thanks, mate.
