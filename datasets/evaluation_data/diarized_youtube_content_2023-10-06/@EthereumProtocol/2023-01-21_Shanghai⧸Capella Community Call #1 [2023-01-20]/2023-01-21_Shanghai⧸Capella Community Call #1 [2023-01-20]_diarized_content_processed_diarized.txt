00:02:43.800 - 00:03:18.412, Speaker A: Good morning. Afternoon everyone. Depending on where you are first. Chappella community call. So I guess these are helpful to just answer people's questions about the upgrade. We started doing them with the merge and given the introduction of withdrawals, yeah, it makes sense to do them as well so that validators and just node operators and infrastructure providers can come and ask questions. Didn't have too much on the agenda today.
00:03:18.412 - 00:03:55.624, Speaker A: I think if we have Danny and myself here, we can maybe both give a quick overview of the entire upgrade. So you get withdrawals, but there's a couple more things as well. Then maybe go quickly over the withdrawals FAQ and just show that it's there and what type of questions it answers. And if folks here have questions, we can spend most of the call on that. But yeah, I guess maybe to kick it off. So Shanghai, obviously, as I just said, the biggest thing that's coming are withdrawals. And we can dive into those in quite some detail after.
00:03:55.624 - 00:04:40.456, Speaker A: There's also three other changes that will be included. So Coinbase address will be repriced when you access it. So this is just a small gas cost change. Push zero is a new opcode that's coming in which as the title says, pushes zero onto the stack. So you can get some gas cost savings by using that if you develop smart contracts. And then maybe the change that affects smart contract developers the most is this limiting and gas metering of init code. So previously, or I guess currently still on Mainnet, init code is not limited beyond I think the entire contract size.
00:04:40.456 - 00:05:08.370, Speaker A: So this adds a specific cap for limit code and also adds gas costs for every, basically two gas for every 32 bytes of init code in a contract. So that will change kind of gas pricing with regards to contracts. But yeah, outside of withdrawals, that's what there is on the El. I don't know. Danny, do you want to quickly share on the Cl?
00:05:10.020 - 00:05:57.388, Speaker B: Yeah, so we'll do the non withdrawals. In the consensus layer there is what's called a double batch merkel accumulator. Essentially you take blocks, block routes and state roots and you put them into lists. And then every once in a while, once those lists get full, you do a Merkel route of each of those lists and then merklize those. And so you have a single route and you put that into a list itself. These initial lists can be cleared so they don't grow unbounded, whereas this double batched list does grow unbounded, but like on the order of 10 year. But this allows for succinct historic access forever.
00:05:57.388 - 00:06:40.796, Speaker B: This exists. It's been in the beacon state since phase zero. But because of the way the state routes and the Merkel routes are kind of like hashed in this single list, if you want to prove something about blocks, you have to have like a little state route. You have to have this additional route to prove things about blocks. And if you want to prove things about states, you have to have this additional route to prove things about blocks, about state. So because of that, some of the historic serving that we want to do against states is not quite as clean as it needs to be. Thus, that's being refactored and revamped a little bit such that we kind of keep those two pieces of information.
00:06:40.796 - 00:07:19.740, Speaker B: The historic summary, that batch of block routes, and that batch of state routes as independent, instead of smashing them together into a single route. This was led by Yossik and should help with succinct serving of historic stuff. Cleaner serving of historic stuff, very technical. It helps with state sync and other things like that, that probably as an end user, you won't end up really having much of an impact on you. I think that's the only change other than the withdrawals, which are obviously one of the main reasons we're.
00:07:24.000 - 00:07:32.800, Speaker A: You want. I guess Alex is not here, but yeah. Do you want to give maybe an overview of. Not sure what's like the right point.
00:07:32.870 - 00:07:42.576, Speaker B: I can talk about the validator process and how that's being extended and then get into the technicals from there if people have questions.
00:07:42.678 - 00:07:43.876, Speaker A: Yeah, let's do that.
00:07:44.058 - 00:08:02.772, Speaker B: So, as you know, validators can posit and become activated. There's an activation queue. Normally it's pretty empty. Sometimes it can be long. Similarly today already you can exit. And then if you initiate an exit, you go through the exit queue. You're not done validating.
00:08:02.772 - 00:08:50.520, Speaker B: You still get roles and duties until you're on the other side of that exit queue. Normally it might take on the order of like four epochs. It could back up on the order of months if like half the validator set was trying to leave at once. So you can exit today and then your validator is no longer active, but your funds kind of sit in limbo. So what this upgrade primarily does is completes the circle and allows for both kind of the principal there to eat balance and the validator's rewards to go back into the execution layer, back into the kind of normal user layer, normal ethereum accounts out of the beacon chain. And there's two primary methods. I talked about how you can exit so obviously, once you exit, you probably want your ETH back.
00:08:50.520 - 00:09:40.120, Speaker B: So all of your balance, 32 eth plus any rewards or 32 e minus any penalties once you get out of the exit queue and once you go through the min validator withdrawability delay, which is 256 epochs, which is 27 hours. So exit queue plus 27 hours. Now you are withdrawable. And on some sweep, there's a certain number of validators, 16 per block, that can go back into the execution layer. It's a round robin sweep. Your funds will eventually be picked up and put into the execution layer. There is another method of withdrawal called partial withdrawal, and this is if you are active and have balances in excess of 32 eth, so you have some rewards on that account.
00:09:40.120 - 00:10:25.284, Speaker B: The rewards in excess of 32 eth in that same round robin process will be sweeped and swept and put into the execution layer. That's the mechanism at its core. There's one big caveat, and that is there are two types of withdrawal credentials. If you set up a validator, you know you have an active key and a withdrawal credential. At Genesis, the only available withdrawal credential was called the Zero Act BLS withdrawal credential. So you have a BLS key, essentially, that controls the ownership of the funds, not the active key. If you have such a key, essentially you have not elected a destination in the execution layer for your withdrawals to go to.
00:10:25.284 - 00:11:05.844, Speaker B: So if you have a key initially, you will not be a part of partial withdrawals. And if you exited and you were withdrawable fully out of that queue and past that 27 hours window, your funds would just kind of sit there. So there's a new message type called BLS credential change. BLS change operation, something like that. Bls key change operation. I apologize for not having that on the tip of my tongue, but there's a new operation that tools like the staking CLI and ETH do allow you to essentially convert your BLS withdrawal credential into an execution layer withdrawal credential. So it goes from zero X version to zero x one.
00:11:05.844 - 00:12:03.524, Speaker B: And essentially it's a one time operation in which you sign a message with that BLS key to say what? I want the ownership of these funds to be on the execution layer. So it's essentially taking a BLS key and electing permanently your execution layer address, your normal ethereum address that funds will go into. So once you do that, if you're active, you will now be a part of that partial withdrawal sweep. So any balances in excess of 32 ETH will go in there. So if you have a couple of eth that you've earned over the past couple of years, you don't have to exit to get those funds, you just have to do the change operation if you don't already have that type of key. And again, at that point, if you exit and become withdrawable, all of your funds will go into that execution layer address. Similarly, if you're already exited or if you do the operation in the other order, you exit and you wait for a while and then you do your BLS change.
00:12:03.524 - 00:13:07.610, Speaker B: At that point you'll be part of the sweep. So that's probably one of the very important things to understand here, is that your validator will essentially continue to operate as it is today if you have a BLS credential until you elect to sign that message. And so a very important thing is kind of the UX and safety around signing. You can use that staking CLI tool, although you have to use an upgraded version that you maybe use to deposit. There's also a great tool called ethdo that a number of security auditors are taking a look at right now as well that we've been using and testing, and it has a nice Ux to do so. And then the step from there is to go to your client of choice that you run your node software and there will be some sort of interface, some sort of tutorial, some sort of guide on how to take that message, load it into that machine so that it gets broadcast to the network and picked up into a beacon block. Question.
00:13:11.440 - 00:13:20.430, Speaker A: There'S a question from Trent in the chat. Are there any good tutorials that people can follow to do this?
00:13:22.480 - 00:14:08.060, Speaker B: Great question. I was looking at the new staking FAQ, which we can take a look at in a minute, which does link to, I believe it links to how to do it in Ethio. And then it is cataloging the docs from the various clients on how to then take that message and put it into a client. I believe we might be at like three or five or four or five clients that do have this documented, and that's a very high priority for them to get over the next week. The staking CLi, last I checked yesterday, there is a work in progress PR to add this functionality, and I would suspect that's also done probably next week. So the staking CLI tutorial guides will also be updated as that's completed.
00:14:09.280 - 00:14:29.910, Speaker A: Okay, two more questions. So one from YouTube, and these, by the way, don't all have to be for Danny. If you're on the call and you have the answer, please feel free to jump in. But, yeah, from YouTube, I recently came across EIP 4736, consensus layer, withdrawal protection. Can somebody please explain this a little bit more?
00:14:34.200 - 00:15:27.990, Speaker B: I only have a cursory understanding of this. If somebody else does, please jump in, because I cannot do it justice. I'll at least give the background. There's certainly some fear that some people might have their keys compromised, whether they exposed them in the clear somewhere or some sort of mishandling in key operation in the past couple of years. And so there's the worry, because you have to do this change operation. There's a worry that there's a race between you and an adversary, somebody who hacked your keys. And if the adversary gets their message on first, then they essentially get to finalize the stealing of your funds that maybe they've been trying to for a while.
00:15:27.990 - 00:16:09.024, Speaker B: I believe that this EIP is a standard to do some sort of identity verification with large operators to essentially put your key into their pool early rather than hoping and racing against time. That said, this is an attempted kind of social solution to try to give the correct owners of funds rather than a hacker the ability to change their key. But I do not know how the details of how they intend for this to work.
00:16:09.142 - 00:16:53.090, Speaker A: Yeah, and Pooja shared in the chat, there's a peep and eep about the cip that's happening in two weeks, and it should be live a week after that with the recording. And so for people who don't know, ppds are like hour plus long deep dives into specific eips with the authors. So, yeah, keep an eye out on the Ethereum cat herders channel for that when it comes out. Christine, you had a question about public dashboards tracking the withdrawal credential updates for the withdrawal credential sweeps. There was answer in the chat. Barnabas, do you want to maybe give some details there?
00:16:54.580 - 00:17:40.370, Speaker C: Sure. So the current stage is that we are working together with bitcoin chain and block scout, and they both are going to be able to provide a nice visual interface where we can see which validator has withdrawn or which has not. And also in beacon chain, there will be a way to see how long it's going to take till the next sweep is coming to your validator. So it is upcoming, and we do have a working beacon chain right now for the running devnet. So it's the latest. It's running on it. That's where all the development is happening right now.
00:17:41.300 - 00:17:54.660, Speaker A: Awesome. A couple more questions from YouTube so I'll get through them in order. Is it accurate to say that the withdrawal message expires after two hard forks?
00:17:56.680 - 00:18:38.240, Speaker B: This is that change the spec the other day that Marius didn't understand. It's very complex. I'm just poking fun at you, Marius. The answer is no. This was a change to the spec recently to essentially sign the message in a very generic way with the Genesis fork version so that it's valid for all forks, as opposed to how, say, attestations. And even exits are signed where they're very fork specific and they kind of degrade across fork boundaries. So the good thing here is once you have a tool, it will work.
00:18:38.240 - 00:18:39.660, Speaker B: Period. Ben.
00:18:39.740 - 00:18:51.904, Speaker D: So, Danny, that covers the credential change message. I think we agreed to use the Genesis fault version, but the withdrawal message remains signed with the fault version. Right, so that expires the exit.
00:18:51.952 - 00:19:07.310, Speaker B: Yeah, and I know the terminology is kind of. Yes, you're correct. No, but you're right. The message I was talking about wasn't a withdrawal message as well. So there are exits and there are key changes. If you're exited and you. Have you done your key change, you will be.
00:19:07.310 - 00:19:28.050, Speaker B: Yes, Ben. The exit, which is actually maybe a more akin to a withdrawal message, does degrade over those two epochs. And I don't suspect that's something that is changed. Although it's been discussed, it won't be for this work. It's something that's kind of been discussed latently here and there.
00:19:30.120 - 00:20:00.284, Speaker A: Okay, another question about the two queues, and this is something that comes up. I get a dm about this probably every day. So can you please cover what order the withdrawal queue and sweeps are processed? So basically, I think the interaction of the exit queue and the withdrawal sweep. We probably need some sort of animation for this. But Danny, do you want to expand on that?
00:20:00.322 - 00:20:36.452, Speaker B: There's an activation queue. You are active, then you submit a voluntary exit, and then you enter into the exit queue. The exit queue is you're still active while you're in the exit queue. You still have duties. You can still gain and lose rewards based off of your attestations and proposer performance. On the other side of the exit queue, you are no longer active, but you are not yet withdrawable. There is the min validator withdrawability delay.
00:20:36.452 - 00:21:05.756, Speaker B: It's 256 epochs. That's about 27 hours. So you're out of the exit queue. You are exited. You then have a 27 hours delay, and now you are withdrawable. At that point, you can be part of the withdrawal sweep, which is round robin. So if you're validator 32 and on the last block it left off at 31, then you're the next one in the sweep.
00:21:05.756 - 00:21:26.610, Speaker B: If you're validator 32 and the last block it left off was at 64, you're almost at the end of the sweep. It's going to go all the way to the end and then back to the beginning. So exit queue withdraw ability delay, then round robin sweep. Clear as day, right?
00:21:26.680 - 00:21:33.670, Speaker A: Yeah. Someone says we should call it limbo when you're exited and waiting to be withdrawn.
00:21:35.310 - 00:22:00.318, Speaker D: It's not very long limbo, right. I mean, even if every validate has one credentials, which they don't at the moment, only about 40% do, it will still take, I think, four days to complete a whole sweep through the entire validator set. So once you are exited, you've got a maximum of four days and probably much less to wait until your funds appear. Right.
00:22:00.484 - 00:22:06.770, Speaker B: A maximum of five days because of the min validator withdrawability delay, which is 27 hours.
00:22:06.920 - 00:22:26.854, Speaker D: That only applies if you've only just deposited right once, you've been running for more than 27 hours, that no longer applies. If I remember correctly, you might be correct. I need to double check. Yeah, it's just people becoming active and then becoming inactive straight away. But once you've been running 27 hours, you're good.
00:22:26.892 - 00:22:28.550, Speaker B: I think you're right. I'm understanding.
00:22:31.230 - 00:22:34.140, Speaker D: I wrote about it somewhere. You can take a look.
00:22:39.420 - 00:22:42.650, Speaker A: Okay. One for the el side.
00:22:43.280 - 00:22:44.092, Speaker B: I think you're wrong.
00:22:44.146 - 00:22:45.070, Speaker A: That was quick.
00:22:48.000 - 00:22:58.770, Speaker B: The withdrawable epoch is set as the validator exit epoch plus min validator withdrawability delay. So I believe that there is the delay. There.
00:22:59.620 - 00:23:01.200, Speaker D: I sit corrected.
00:23:05.700 - 00:23:37.420, Speaker A: Okay, next one to like clients, because you did to answer in the chat, so we're going to get a full answer out of you. The question is, can you provide information that explains the new block format and how to detect withdrawals on the El? So yeah, Lightkind, do you maybe want to just give a quick overview of how the El blocks change with withdrawals? And maybe also this idea that withdrawals are processed as an operation and not a transaction.
00:23:40.320 - 00:24:52.384, Speaker E: Yeah, so the Yale block header changes to include a commitment to all of the withdrawals that go into the block. And that commitment is very similar to some of the other things we're committing to, like the transactions in the block and the receipts in the block. So that just adds the block header and then the actual block body that is sent over the peer to peer network is extended to include the withdrawal objects. This just lets us get them from our peers when we're syncing so that we can store them and send them over the JSON RPC. If someone requests information about them, but they generally originate from the CLS over the engine API, they are just added to the calls that seed the EL with a new block information. So it just extends to also support that withdrawal format. The withdrawals are slightly different than transactions because they are operations and they are not really validated much at the El layer.
00:24:52.384 - 00:25:19.900, Speaker E: They're mainly just given to us by the CL. We verify that the withdrawals route matches the same thing in the execution payload, but we don't check any of the conditions about if the validator is properly withdrawn or if the index of the withdrawal is correct. And so we just process those withdrawals exactly as the TL gives them to us after we process all the transactions in the block.
00:25:22.640 - 00:26:13.900, Speaker A: Okay, thanks. We'll see if there's follow up questions about that. Next question was there was like a couple of questions on testnets and the order and timelines. I think the higher level answer is like, we haven't made a decision yet, so I'll take all of this with a grain of salt. But generally what client teams we're thinking about is we've launched a bunch of devnets and are still launching some to test things. I think when things are a bit more stable, probably in the next week or so, we plan to launch a longer lived new testnet to allow people to test withdrawals and other Shanghai Kapala stuff on it, kind of like we did for the merge. We had Kinsugi and kiln.
00:26:13.900 - 00:26:51.610, Speaker A: And then I think a couple of weeks after that, assuming we don't find any issues, that things work as we expect them to, we would move to forking the different existing testnets. So Gordy and Sepolia, we don't quite have a decision around which one we would fork first. Sepolia is generally easier to fork because the validator set is closed. So anyone can sort of. Sorry, not anyone can be a validator on Sepolia. And it's easier to coordinate that fork. That said, gordy is like a better test for Mainnet because homestakers can also stick on Gordy and see how things go there.
00:26:51.610 - 00:27:59.540, Speaker A: So which of those two comes first? I think we'll need to decide, but we'll have them happen usually within a couple of weeks of each other. And then assuming those go smoothly, there's no issues, then we'll schedule mainnet for a couple of weeks after that. So I don't know how that lines up in terms of dates, but I think in terms of just like the steps we need to take. Yeah, that's basically it. Launching a new kind of long quote unquote live Devnet that people can try forking Sepolia and Gordy TBD on the order, and then once all of that is stable, then we'd move to forking mainnet. Another YouTube question was, is there a way to access or retrieve the complete withdrawal queue state, including your position in the queue for a full withdrawal on the Ethereum blockchain? Yes. Anyone?
00:28:00.230 - 00:28:05.666, Speaker C: The beacon chain explorer will keep track of it. So you will see when it's going.
00:28:05.688 - 00:28:12.230, Speaker A: To be your okay beyond the explorer. Yeah. The node doesn't track it by default.
00:28:12.970 - 00:28:33.450, Speaker C: Yeah, but the BLS pool is public. So the BLS pool for every node is gossip. So as soon as you publish your own BLS changes and it's going to be the same kind of way swept in the same fashion as the partial withdrawal.
00:28:34.110 - 00:29:23.930, Speaker A: Okay, sweet. Next one was someone said there's a translation subtitle function in zoom that we haven't activated. I did not know that this was a thing, but yes, I can look into it for the next call for sure. If you want to send me a link about that, I can try to see if we can activate it. Okay, no other questions in this chat. There was one more on YouTube. Can you please elaborate a bit more on the change from zero xo to zero x one? Since 40% already have zero xo one set, would it take four days to change everybody else to the credentials to cycle through the credential updates?
00:29:24.590 - 00:29:59.000, Speaker B: Yeah, I believe there are 16 of these operations that can be included on each beacon block. So each non induced slot, which generally that's 99% of slots. So yes, it'd be 60% of 4.3 days would be how long it's going to take. So a few days and we don't know how many people are going to be doing this immediately at the fork or doing it over the course of a few weeks, a few months. We shall see.
00:30:00.970 - 00:30:32.020, Speaker A: Okay, different withdrawal question. So basically, is there still interest in allowing exits using only withdrawals credentials? There was discussions about this on forums and GitHub over the past year, and this is something that would be helpful or critical for liquid staking providers where you can initiate exits from the execution layer. Anyone have an update on that?
00:30:36.330 - 00:31:08.320, Speaker B: I know there are a couple of proposals in progress to do zero x one withdrawal credential triggered exits. And so we could have smart contract triggered exits which would help make a number of these different pooled operations more trustless. My gut is that there's an appetite for these, but there's not a full proposal nor a governance kind of discussion around that yet. Got it.
00:31:10.230 - 00:31:50.714, Speaker A: Okay. And I think that's pretty much all the questions at least I see right now. So maybe before we have sort of client chilling, it's sort of going over this specifically. We have this new withdrawal FAQ that the DevOps teams and some other folks at the EF put together. I won't read over everything, but it does cover pretty much everything we've discussed so far, as well as much more technical details. So the URL is nodeside.org at launchpad withdrawals FAQ.
00:31:50.714 - 00:32:34.090, Speaker A: It's linked in the agenda for this. I think this is probably the main thing for people who want to understand the process in more detail without reading the actual spec line for line. I think this gives a good overview. We'll keep updating this in the coming weeks. I think if there are questions that people would like to see here but that aren't there, you can either post them in our D discord. I mean, if you tweet them at me, I'll make sure that they get added here. But the goal is that over the next couple of weeks and months, we have this as like the comprehensive faq for withdrawals.
00:32:34.090 - 00:33:06.760, Speaker A: Yeah, let me check the YouTube. Actually, I can't check the YouTube chat anymore, sharing this, but any questions about the faq itself? Okay, there's one more question on YouTube. Is it accurate to state that slash validators leave the queue before those who request voluntary exit?
00:33:11.570 - 00:33:29.910, Speaker B: The exit queue? No, if you're slash, you're put into the exit queue, but you can no longer receive rewards even if you continue to try to do your job and will lose money while being in the exit queue. So, no, the exit cannot be subverted by slashing.
00:33:30.810 - 00:33:31.800, Speaker A: Got it.
00:33:32.170 - 00:34:01.730, Speaker B: And then once you become withdrawable, which if you're slashed, I believe there's a much larger delay put on you because there's kind of like this, trying to see all the amount of people that were slashed in the same time period. But once you are withdrawable, any remaining funds are put into the normal round robin sweep. So it will take guaranteed longer to get your money out if you slash yourself than if you do a normal exit.
00:34:06.980 - 00:34:10.624, Speaker A: Yes, Barnabas, do you want to repeat the question?
00:34:10.662 - 00:34:14.384, Speaker B: Yeah. If the exit queue is six months long, are you going?
00:34:14.582 - 00:34:25.940, Speaker C: Yeah, if the exit queue is six months long, then you get. Then you will leak it till the exit queue clears. That is not a good time to get slashed.
00:34:27.160 - 00:34:43.260, Speaker B: Correct. And that's one of the primary reasons it is that way, because if the exit queue was really long and maybe people hadn't been slashed recently, you could try to subvert the system and kind of get around the queue through that mechanism. So it's certainly supposed to be not incentive compatible to take that path.
00:34:58.590 - 00:35:28.190, Speaker A: Okay, sorry, reading the chat here. Okay, anyone have an update on MeV Boost? Basically, and, yeah, I guess none of them are on. Please.
00:35:28.720 - 00:36:05.956, Speaker F: I think from what I've heard, Mev Boost will be able to support the folk, and they are working on supporting withdrawals and will hopefully be ready by the fork date. So, yeah, they are working on it, but unfortunately, they are not part of this call. And also, yes, there's a disconnect between the core devs and the Flashbots team, which is one of the maintainers of MeV Boost.
00:36:06.148 - 00:36:11.930, Speaker A: We can try to get some mev boost maintainers at the next one of these and go over it in more detail, for sure.
00:36:13.900 - 00:36:39.490, Speaker G: Do you guys think that, is there any ecore devs focusing on mev, or is it really just kind of like the focus of flashbots? I'm wondering if there's kind of like, people dedicated to Mev on the ethcor dev side, aside from research stuff like PBS, but more like actual implementation stuff, is that a priority in your mind?
00:36:40.180 - 00:37:04.616, Speaker A: There definitely are people. First, I think one of the biggest example, like Thomas, like the CEO and founder of Nethermind, is also part of Flashbots and has been for several years. Think. And there's other developers, I think led client, I believe might still be a maintainer of MeV Boost. If not, he was definitely one in the past.
00:37:04.718 - 00:37:48.744, Speaker B: Alex is Justin Trag. There's a number of maintainers that are not flashbots on, you know, rig. The robust incentives group spends quite a bit of time not just thinking about PBS, but thinking about issues that emerge from meV. I think in terms of the development right now, primarily mev is handled through that mev boost mechanism. And so I think there are touch points from the core developers on that. But because any sort of like native l one mitigations are not what's happening in the next couple of forks, as far as I can see, there's not a ton of dev focus on it right now.
00:37:48.942 - 00:38:02.030, Speaker H: In Nethermind, for example, we not only have client developers, but also Mev boost maintainers, like Saral Liu, for example. So we are working close with flashbots team.
00:38:06.420 - 00:38:17.070, Speaker A: Yeah. And yeah, definitely we can cover this in more details on the next call. Any other questions?
00:38:20.930 - 00:39:13.658, Speaker G: This also isn't a withdrawals question, but I'd be curious to know kind of updates around light client development. It sounded to me like the eof stuff was sort of maybe not the eof stuff, but the harmonization I think between ELCL block headers was partially to support light clients and wondering if there's other blockers for light client development. What's the status on that? Can any of the ethcore devs update on a summary of light client development and some of the protocol level changes that need to happen to, I don't know, help that initiative?
00:39:13.834 - 00:39:14.750, Speaker A: Maris.
00:39:16.850 - 00:40:17.860, Speaker F: Sure. So gas used to have a working light client for a really long time, which was not enabled by default but which was kind of supported. The problem was that it wasn't compatible with a merge and so there has been a big initiative to make the gas light client compatible with the merge. One issue with the gas light client is kind of that you have to trust the light server. So there are people that run light servers and the light clients connect to those. And it's not a trustless relationship between light server and light client. And this is something that we can only really get with Verkel because otherwise it's kind of too much computation to actually verify everything.
00:40:17.860 - 00:40:56.560, Speaker F: But yeah, we have beacon chain lite clients and we have now also a gas light client and the idea is that you can run the beacon chain light client with the get light client and everything should work fine. We have a working demo, but it will take I think some more weeks, maybe months to get it in a state where it's actually usable by the community.
00:40:58.450 - 00:42:29.770, Speaker B: Right? So nimbus and Lodestar think are very active in specifying and developing on beacon chain like clients. Portal network is in a very kind of like alpha state as at the end of last year for serving historic execution layer blocks, but doing integrations that help with trustlessly getting the data needed for beacon chain light clients is a high priority for them this year. Additionally, good smart contract beacon chain light clients are very high value item. You could kind of use the sync committee construction pretty easily, although there are a couple of teams that want to do a much higher security construction and are attempting to zk either the entire beacon chain or at least the entire FFG core kind of consensus part of the signatures. So I'm actually expecting some pretty good light client smart contracts this year as well. In terms of the harmonization effort, that's an important effort to kind of reduce the case in which I've lightly synced the beacon chain, I needed to insert a block header into my execution layer. It would be much cheaper and kind of easier to do that with the harmonization, although it's not impossible to do so, and it's still in a trustless manner today.
00:42:29.770 - 00:42:37.600, Speaker B: You just kind of have to download more data. So that's an important, I think, iteration, but it does not block light clients from coming online.
00:42:45.450 - 00:43:08.590, Speaker A: It okay, any other questions? If not, we have a couple of client teams here. Do you all want to take a couple of minutes to talk about what you've been working on for Shanghai Catala? Why people should use your client? Anything special they should be aware if they're already using their client?
00:43:10.770 - 00:43:50.810, Speaker H: Yeah, Merrick, I can start. So you can try. Nevermind if you want to have very quick synchronization with Mainet, only a few hours if you want to support execution client diversity, because we are still minority client, you can use health check plugin, which is making staking even easier and help you with monitoring the node. You can write your custom plugin. We have good performance with JSON RPC and generally I will send you a couple of links.
00:43:51.250 - 00:43:56.640, Speaker A: Cool. Any other team?
00:43:59.250 - 00:44:40.214, Speaker D: Always happy to shield Teku. Please do good. We're in good shape Shanghai already. I believe that we are doing most of the heavy lifting on the latest devnet. Correct me if I'm wrong, but I think Teku is running 75% of the validators and looking strong. A couple of recent things we've finally got doppelganger detection implemented, so that will be coming out in a release very soon. Bring us in line with the other consensus clients, and coincidentally with Nimbus, who works on exactly the same feature completely independently, we are forgetting historical consensus blocks.
00:44:40.214 - 00:45:13.378, Speaker D: So we have a new minimal mode, which means that once blocks get outside the minimum mandatory retention period, then you no longer store them in the database. So that keeps your consensus client database down to, I don't know, be something like 30 or 40gb. So very low footprint on that is optional. You can store the history back to Genesis if you wish to do so. Yeah, so that's Teku.
00:45:13.554 - 00:45:26.200, Speaker A: Awesome. Any other team here? Okay, Marius, do you want a few moments for guests?
00:45:29.360 - 00:45:59.350, Speaker F: I don't know. I think it's very important to have client diversity, but it's also Gath is a pretty good client and we are in a really good spot with regard to so run our client if you want a really good client, but also consider running maybe some of the lesser known clients. Thank you.
00:46:01.020 - 00:46:16.700, Speaker A: Thank you. Okay, I think that's pretty much everyone. Actually. One final thing before we close out. Pooja, do you want to talk about the node operator survey?
00:46:19.770 - 00:47:01.746, Speaker I: Yes, thank you Tim, for that. So, as we know that client diversity is one of the important focus of Ethereum blockchain, we would like to have a diverse network share on the blockchain. Even Marius just mentioned. Get is doing great, but we would like to have other clients considered for running Ethereum node. So if you are running Ethereum node, whether it is on execution level or on the consensus level, please consider responding to this client diversity survey. This is a way of collecting your thoughts and we will share this with the Ethereum client teams. So if you have anything to say positive about the client, do mention it.
00:47:01.746 - 00:47:16.710, Speaker I: If you think that there is a blocker in the present client that you would like to be fixed so you can adopt that and run your Ethereum node, please do mention. So, yeah, it would be great to hear from you. Thank you for taking out time to consider a survey.
00:47:17.310 - 00:47:38.120, Speaker A: Thank you. Anything else before we wrap up? Okay, well, yeah, thanks everybody for coming on. And yeah, we'll probably have another one of these as we get closer to upgrading testnets and whatnot. Yeah. See you all soon.
00:47:39.850 - 00:47:41.618, Speaker C: Bye bye bye.
00:47:41.714 - 00:47:42.150, Speaker B: Thank you.
00:47:42.220 - 00:47:42.580, Speaker A: Thank you.
