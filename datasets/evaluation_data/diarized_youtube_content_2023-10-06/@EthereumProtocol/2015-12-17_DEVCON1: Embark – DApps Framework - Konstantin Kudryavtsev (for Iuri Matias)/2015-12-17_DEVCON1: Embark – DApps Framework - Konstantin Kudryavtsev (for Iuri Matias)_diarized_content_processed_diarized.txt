00:00:16.490 - 00:01:03.490, Speaker A: Hello, let's start. So my name is Constantine and I'm presenting Embark, which is a framework, Javascript framework for Dapps. I should get this straight out the way, I'm not the author of Embark. The guy who built this is called Eure Matthias and he lives in Canada and unfortunately he couldn't be here, so I'm proxying for him today. So I'm afraid you stuck with me. Anyway, let's get to it. What is a framework for Dapps? It's a framework, just like angular or meteor, that supports automated contract deployments.
00:01:03.490 - 00:02:18.246, Speaker A: Embark specifically supports integration with ipfs, with meteor and a couple of other useful tools. It's got TDG support because testing is awesome. It's quite modular in that sense. You're building pipeline, build and deploy pipeline agnostic and it's got pretty neat tools for multichain management. Why? What is it for? Right? Basically, if you try and build your DAP from scratch and by DAp them in some applications have got a bunch of contracts, some HTML, some JavaScript, some CSS, and trying to build some user interface, you kind of find yourself doing the same things over and over again. So let's say you have a system of five contracts and you want to change one of them. As soon as you do that, you need to redeploy the contract, you need to update your JavaScript references, and then if you've got dependencies between different contracts, you got to update the references as well and redeploy those contracts and do your Javascript bindings for those contracts again.
00:02:18.246 - 00:03:24.858, Speaker A: So the point here is that there's certain routines which you inevitably end up doing over and over and over again, and that's a clear case for automation, and embark does just that. So the quickest and easiest way to get started is to open up your terminal, type in embark demo CD into the app directory, and you'll find something like that. So that's your directory structure. And embark uses so called COC convention over configuration. So your contract files would naturally go into the contracts directory, your HTML and the HTML and so on. For testing, symbark uses Ethereum JSVM, which is one of the components of the node Ethereum client. As for the Javascript side of things, as I said, it's kind of framework agnostic, but by default it's mocker.
00:03:24.858 - 00:04:16.990, Speaker A: If you're a jasmine user, well, feel free to use jasmine. So for chain management you can run your blockchain, which is basically an integration with guests, the go Ethereum client, you can specify which environment you want to use, you can do development, can do staging or production as a set of commands for deploying things, for running the blockchain, for simulating the blockchain. So I'm going to show that in a second. Now. I'm going to show that now. So I've already created the demo, right? Can you see that already? Yeah. Okay, so let's fire up our simulator.
00:04:16.990 - 00:04:59.334, Speaker A: Simulator behaves just like the blockchain. It's just a little bit faster. So that large? That large enough? Better. Okay, so let's take a look inside our directory. So we've got, let's take a look at the contract. So by default the demo comes with a very simple contract called simple storage. It's got a setter and a getter, and basically on set it sets some stored data, which is an integer.
00:04:59.334 - 00:05:43.610, Speaker A: And on get, well, it gets it. It's probably the most simple contract you could think of. So inside the config directory we've got a couple of configs. There's a blockchain configuration file which specifies three different environments, development, staging, production, a couple of nice things like RPC hosts and gas limits and so on. We've also got contract configuration file which doesn't contain much, but I can tell you this thing is actually quite powerful. And we're going to take a look at some of the features of the contract configuration file in a minute. And we've got our tests here.
00:05:43.610 - 00:06:22.600, Speaker A: It's a very simple test. So we are testing that simple storage is able to set constructor value and it can set the storage value as well. We can run the test by doing embark. And I can see it's deploying the contract, it's running the test. And Ray, it's still working, it's nice. And we can also run the app. So testing is all great, but what's the point of adapt if you can't run it to embark run.
00:06:22.600 - 00:07:05.774, Speaker A: This is our app, we can check that the value. So it's been initialized with value of 100. We can set that ten get again. And we get ten. Right, carry on, let's carry on. So the configuration file that I've mentioned, right, that supports. One thing it supports is initialization arguments.
00:07:05.774 - 00:07:32.938, Speaker A: So in this system we've got three different contracts, user manager, my storage and my main contract. My main contract needs to be initialized with references to the first two contracts. And we can set that in contracts. Yaml support static binding. So let's say we don't actually want to deploy the mystorage contract. We just want to initialize it with. We just want to bind it to a specific address on the blockchain.
00:07:32.938 - 00:08:09.482, Speaker A: That is, my storage has been already deployed and yeah, we can do that by simply providing an address in your contracts YaML file. It supports events. So let's say on deploy of my main contract we want to make a call to the user manager contract. Well we can do that. We can even pass an address to it. The address of my main contract. You can do contract inheritance, so that's not a problem.
00:08:09.482 - 00:09:07.300, Speaker A: If your USD and euro contract depend on the stablecoin contract, then all you need to do is to specify that USD and Euro are instance of stablecoin. Another nice feature of embark is that you can use ipfs. So by simply installing the ipfs daemon and running embark blockchain and embark ipfs, it will nicely package your app and deploy it to ipfs and that will be accessible on your local host. 80 80 I probably already mentioned that supports meteor integration. So just as you would embark demo, instead of typing embark demo into your command line, just type in embark meteor demo and it creates very similar app. But in meteor that's it for the demo.
