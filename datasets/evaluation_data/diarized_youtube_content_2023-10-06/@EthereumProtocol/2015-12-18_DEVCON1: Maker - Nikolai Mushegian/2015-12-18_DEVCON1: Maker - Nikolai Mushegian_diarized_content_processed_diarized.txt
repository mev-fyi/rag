00:00:18.650 - 00:00:50.246, Speaker A: Hello everyone. I'm here to talk about Maker. I'm going to give a short talk before I start. It's very likely that not everyone here has heard of maker, so I'll just explain. Maker is a contract system whose function is going to be to create the DAI, stablecoin and the associated credit system and the properties of the DAI that make it awesome. Is that. Well, it's initially pegged to the SDR, but it's deflationary, it's collateralized in excess.
00:00:50.246 - 00:01:59.074, Speaker A: So there is more value locked up backing the DAI at all times than there are the total value of the die. And it's eventually trust free, which means that it uses the most current trust free mechanisms available to get data feeds and to do the pegging mechanics that is available at the time. So this talk is not going to be about the actual stablecoin mechanics because that is not appropriate for 15 minutes talk. And we have a great white paper dedicated to exactly that. So instead, today we're going to talk about what the white paper doesn't go into, which is how the actual contract system is designed. So what are the different components? And then I'm also going to mention how we can go about deploying this contract system over time and start getting some utility out of it even before the whole thing is complete. So first I'm going to introduce basically what the version zero of the maker contract system is going to look like.
00:01:59.074 - 00:02:44.074, Speaker A: So this is an authority contract, and this is basically a command and control pattern that we use throughout the maker system. Basically every single contract, I didn't draw arrows because there'd be too many. They all point to this one, they have a reference. And then every single protected function, you use a modifier that basically asks, okay, is this caller allowed to call me at this entry point? And the authority says yes or no. And the authority is bootstrapped with some other contract that already has permission to call the set cancall function on the authority. So basically it has an implicit owner at the start. So the components here, that's the authority.
00:02:44.074 - 00:03:48.918, Speaker A: This is the maker asset platform is what this stands for. It's a conceptual grouping of the registry of assets, which all share the same interface and semantics that we need to be able to use them in the collateral debt mechanism. So here you can see how we also separate the data in the controller. And this is extremely useful because, for example, right now these controllers are the simplest possible asset controller that there is. This basically has a single transfer function and a single event that it fires on that transfer but we're quickly converging on some sort of more reasonable asset standards and ones that are more powerful and actually let you programmatically do things with your assets. So we might want to swap out the behavior of the controller, but then keep all the balances in place. And so what this means is that the correct way to actually interact with the maker system is to use what's called a maker user mix in contract, which it's just a bunch of internal functions and modifiers which help you traverse the maker system.
00:03:48.918 - 00:04:21.870, Speaker A: So for example, you would inherit from the maker user contract. It doesn't add any overhead unless you actually use, for example, get assets. And then it's a library we publish and it has all the details about how to actually look up in the registry the controller. Okay, so this is what the initial version might look like. So now let's look at what the final version might look like. So the first thing you might notice is the mistake that I made that I only noticed like 1 minute ago. Obviously this contract system is not an off chain service.
00:04:21.870 - 00:04:56.582, Speaker A: This is all still just smart contracts, but each of these is now a cluster. So we've zoomed out. This map is what you just saw, and I exposed the assets still as little contracts. So you can see how MKR and Dai in particular are wired up directly to the CDP engine, which is the collateralized debt position engine, which you should read the white paper to understand what that is. But it's basically the fundamental building block that creates and destroys the DAI. So this is an example. Basically you'll notice the second thing is that there's no more nexus in this picture.
00:04:56.582 - 00:06:15.560, Speaker A: So in the previous slide I said that Nexus was like the implicit owner of the maker authority. But somewhere along the line this is going to be transferred first to MKR, the stakeholder vote directly. But then at some point they're going to also realize that it's wise to put this intermediate governance contract between themselves and admin rights, which is basically the ability to modify the authority's permissions. And so basically the idea here is that this is an example of how adapt can start out highly centralized and very trustful, and then over time you can basically update it to lock down some of its behavior. And then why I think we can call maker trustless even though there's still a governing body that sort of has to set high level monetary policy, is because there's this governance contract where MKR holders can provably restrict their own powers. And the most popular example for that is the time delayed admin action. So if the MKR holders are going to do some administrative action on the system, everyone has maybe a week near the start, and then maybe it could be up to a year if the system is running and is very stable for a long time.
00:06:15.560 - 00:07:24.582, Speaker A: So I think I have enough time to basically describe how these parts interact. So here, these are all simply registry entries, the MKR. This talks to the governance to try to cause changes to the system that might affect who the feed providers are. It might affect more basic stuff like in the contract permission wiring, and it also might affect just the monetary policy inside the CDP engine. And then the CDP engine has unique permissions to spend money out of the vault, which is basically where the insurance pool is of collected dye. And then it's also where assets that might have been emergency bailed out, they go there before they're auctioned off. Okay, so I also want to go ahead and show this part, which is that another really important component of the maker system is that there are several incentivized actions that have to happen quickly and reliably.
00:07:24.582 - 00:08:25.182, Speaker A: And so we say like, okay, the theory is if it's profitable, then we should expect it to happen automatically, but we want to actually make sure this happens. So Nexus is creating I guess a software stack for basically a single node which will try to make as much money as possible off of Ethereum because it will be aware of all the different incentivized actions that it can take, for example the margin calls or the more accurate words, the collateral redemption. And the cdps, that's an example of something that needs to happen automatically, but it's actually profitable for the person to use. So this is an example. Another great example is like how the alarm clock app also has incentivized actions. So we would bundle that into the keeper stack as well. All this is great, but this is a really long way off.
00:08:25.182 - 00:09:41.046, Speaker A: And I always hate to tell people these really conservative estimates for when the dye as described in the white paper is going to be launched. But I'm really happy to announce that we have identified a strategy for making a series of DAI releases which are increasingly trustless as time goes on. So the first mechanism, you might have to trust this completely, and we might even do whitelisting just to avoid any problems with that. But then as we can make it more and more trust less, then even if the exact mechanism changes, as long as you say the right guarantees, and as long as you basically have enough money to buffer the buyback from one type into the other, you can basically do this transition behind the scenes and anyone who uses a dai in a smart contract, they don't even have to be aware that this transition is happening. So this is exciting because basically there are a lot of people who, they want a stable coin, but they just want a small amount and they just want to do a simple proof of concept. And it's not going to be an app that is going to be holding a ton of money and it doesn't require trust. And so I'm happy to announce that this is possible.
00:09:41.046 - 00:10:29.154, Speaker A: And astute viewers would have noticed that in the version zero there is a DAi balance database and a DAI controller. And so that version zero is going to be happening tonight. So we're having our second ever maker Meetup and a deploy party. It's going to be at King's Arm pub, but we're going to meet outside here at 415 and then go over there at 430. So you're all welcome to join us. We're going to deploy the MKR controller and balance database and the die controller and balance database and all the associated and all the other stuff you saw in the first version. There's not actually going to be die created, unfortunately, but you can start writing your contracts as if it is created and the MKR is going to be issued and made liquid.
00:10:29.154 - 00:10:41.650, Speaker A: So anyone here that might have participated in our private sales, you actually have your assets liquid on chain tonight. So that's the end of my talk. I hope to see you guys at the meetup and thank you so much for listening.
