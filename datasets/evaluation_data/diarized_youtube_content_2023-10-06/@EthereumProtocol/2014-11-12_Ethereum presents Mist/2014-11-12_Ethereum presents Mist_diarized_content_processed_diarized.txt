00:00:09.690 - 00:01:04.294, Speaker A: Presentation is about 30 minutes long and we're going to explaining what is it that we're building, and I hope you like it. Before we start, I'd like to emphasize that everything I'm about to show you is just a vision, not a roadmap. Jeff wants everyone to be completely clear that this isn't what we are promising to deliver on the Genesis launch, as many of those concepts might be some years ahead, but it's definitely the direction we are heading. The Miss Browser to be launched at Genesis will be a step in this direction, albeit a small one, but we are not committing or promising any particular feature. We are just showing your vision for the project. A lot will change as we go to path together and as we gathered your feedback on what is your vision to offer tv, because after all, you need to know where you're going in order to go. But we also believe that software should fit deadlines, not opposite.
00:01:04.294 - 00:01:56.622, Speaker A: So we will be building the best we can until winter and we'll continuously evolve from there. And the community feedback on which of those things you want will certainly influence our so please, please feedback is welcome. Reddit is there, Twitter is there, and the forum on ethereum.org. I'm on all of them as Avsa. So first of all, what is mist? Mist is the new name for the go Ethereum, also known as the Ethereum dap browser, the Ethereum interface. But why are we building it? What's that purpose? Mist is the end user interface for Ethereum. If you're not a cryptographer, if you're not a developer, if you just read about this ethereum thing in the Sunday paper, I hope you download Mist.
00:01:56.622 - 00:02:35.998, Speaker A: It's the first experience that users will have the whole concept, so it's incredibly important that we get it right. So how should it look? Like? Something I'm told quite a lot is why are you even building a browser? Let's simply fork, chromium, do a browser plugin. It should look exactly like a browser. Okay, so let's start by doing that. This is mist being a clone of chrome top tabs, big navigation link, outer age. You can already see the problem here with the top tabs. Text strings are horizontal rectangles, yet we are stacking them side by side.
00:02:35.998 - 00:03:02.338, Speaker A: As space quickly runs out. We have to make space smaller and use a combination of site scrolling and cutting off text. There is barely any space for the title, even less for any extra information. It might work for browsing the whole wide web because you expect that those open dozens of new tabs but for Ethereum, this is not the case. Tabs are navigation helpers. They are disposable. You open dozens per sessions.
00:03:02.338 - 00:03:18.346, Speaker A: They have no space for further information. Ethereum apps are apps. They are software. You might be keeping important assets there. You might use it to keep track of critical information. So let's just rotate everything. Let's just put the tabs on the side.
00:03:18.346 - 00:03:42.878, Speaker A: It allows you for more space for the title. And if there are more apps than that, we can just use it in a vertical, more natural scrolling. And with this extra space, you have room for extra information. So you can add a second line of data and maybe even a badge. I mean, users know this. This is a sidebar. It's how you pick your disk in Mac, it's how you pick your inbox in gmail.
00:03:42.878 - 00:04:35.922, Speaker A: On the top right corner we have add new app search and settings. This is one example of the things we can gain when we break some older modes without too much of a cost in user familiarity. But I think there's a bigger point in here, which is one of perception. We did not gather this great team just to build a browser plugin. Ethereum is a new platform, and I don't believe that we can reach its potential by trying to retrofit some old concepts inside it since the beginning. If we sell ourselves as an alternative browser, then the standard that we will be judged upon is, is this better than Chrome to go on Facebook? If you give them an URL bar, the first thing they'll type on will be google.com. And by then we have already lost.
00:04:35.922 - 00:05:22.626, Speaker A: Because for those tasks, mist is not any better than the alternatives. We don't want the user to think of mist as a browser for Ethereum, because it's not. Instead, it's better for him to think it as a workbench, a swiss army knife, a collection of tools, blockchain tools, encryptions tool, decentralized tool, all packaged away in a way that allows non technical users to take advantage of them. We are not building a better way to go to facebook.com. We are giving them tools to go beyond the web. We want the user to open it and not compare it with the stuff he already knows. We want him to visualize the stuff he can do.
00:05:22.626 - 00:05:55.930, Speaker A: Which is why I believe that one of the first screens should be about what you can do. We are seeing a page inside the app catalog. I imagine this as the first screen a new user gets to see. So instead of explaining what Ethereum is using visual or text, I'm just showing you a bunch of stuff and my encouraging exploration. Those categories come from a community. Surveys, makesafe or business are contracts that involve only a few parties, peer to peer contracts. New societies are for all kinds of experiments on dows and similars.
00:05:55.930 - 00:06:48.090, Speaker A: Money together are apps that are more useful as more user pull their money inside, like exchanges or insurances or trustless crowdfunder. And there's a general category of information on its power where I've put multiple apps whose purpose is to trade purely on data, betting markets, cpu markets, insurance for the final users. Those are not apps, those are not websites, those are not software, those are actual. Those are examples of things of what they can do in Ethereum. In a glance they understand what they can do with Ethereum that they cannot with a common browser for developers or more advanced users. Those can be seen as tempo code. Very basic apps, all open source to encourage innovation and Kickstart new app development.
00:06:48.090 - 00:07:25.770, Speaker A: Those are built both by the dev team and the community at large. They will serve as templates, having assets. And so if you want to build a new app, you can just find the one that's more similar to the one that you're building and you can fork it. This button on the top left is what I call the app button. It contains specific action app action specific. I haven't defined them yet, but here is where you display information about the trustability of the app, actions you can do with that app, et cetera. If the app has published its source code, it's where we will link to the git.
00:07:25.770 - 00:07:48.286, Speaker A: Finally, there's an integrated URL bar upon tab or hover. It becomes editable so you can change it. Game testing it I'm not 100% sure it's a practical idea. Below the header you can see the main navigation tabs. Since the page won't change much in these areas, this user could find new and upcoming tabs. It's app specific. It's integrated in the header.
00:07:48.286 - 00:08:27.066, Speaker A: This header integration things allow more space for the screen to be dedicated to the app because you are taking very common tasks and integrating everything on the browser. Chrome it has some issues with browser backwards compatibility, so I'm still considering it. Maybe you just allow this for Ki T based apps. On the sidebar you can see our favorite apps. Those are bookmark, but there is some enhancement. One of the proposed use for Ethereum is to allow you to keep track of all kind of data about the world that you can't see. Otherwise this might mean the price of some currency, the price of some commodity.
00:08:27.066 - 00:09:09.318, Speaker A: Might be the possibility of something happening that you might not otherwise know, because debts, they allow you to provide a financial incentive and some anonymity. Or maybe you just want to know your wealth in real time. So the second line of information, the apps are there for that reason, but it also allow a more full, more immersed experience. This is the dashboard. It allows all the apps you have taken and the apps that you have saved. It standardize a few basic kinds of data type, time based, map based, table based, et cetera, and then it displays it in standard views. These interfaces aren't created by the app developer.
00:09:09.318 - 00:09:46.120, Speaker A: He just picks some kind of more appropriate data type. And of course those can span in the future. One big advantage of having that is that of having o app support a common simple output that it makes integration with the Internet of things very easier, a lot easier in the browser. For example, a number might be displayed as a real time updating ticker graph, put in a smart lamp. That could be. It could pick the same data and output it as a color, or a smart sound system could make it into music. So this allows Ethereum use cases to be expandable to wherever the developer wants to take.
00:09:46.120 - 00:10:22.526, Speaker A: So let's see more example of how developers can build apps. I want to show you not the app themselves, but the building blocks that we are envisioning. So let's pick the crowdfunder app. Notice that the icon here has changed from the app icon to an alert icon. It's because that particular app has not published its source code anywhere, so we can't really audit it and tell you what it does. But notice that this is the default mode of production on the web. You have to just trust blindly, the app provider, the third party client.
00:10:22.526 - 00:10:51.354, Speaker A: But in Ethereum, you want to alert the user of any possible breach of trust. So let's build a lighthouse together again. I come back to the menu button. Here's a good advantage of having the front end know about the back end. If the app is open source, we can link to the source code and allow you to quickly clone anything you see. It's great for many reasons. Of course it's for developer, for advanced users.
00:10:51.354 - 00:11:40.460, Speaker A: But first of all, it encourages active development of apps. Also, it increases reliability. If many people are running slightly modified copies of a code, then the chances that if one goes down, the others will be there to take part. Of course, it's more for the more advanced users. Advanced? Suppose the user is a developer, but there's a mud subtitle hint there, which is that this button saying fork me is in some sense saying, here's an opportunity to make money. Here it is a very simple crowdfunding app that has 0% profit for any developer, yet many people are using it. If you have a good idea of how to improve it, you can simply fork it, add a small fee going to you, and you put it live.
00:11:40.460 - 00:12:19.766, Speaker A: An advertisement for you to be an entrepreneur and maybe learn more, or hire someone who can do it and do it. I do want to present the app itself. I want to talk about elements that we use to make apps. Most of those elements are commonplace. You have an image, a title, a text box, an explanation. You have a text area and you have a submit button. But wait, what is this? This is the part in a normal web where you'd be asked to sign up, create a username, a login, or maybe sign up with your Facebook credentials.
00:12:19.766 - 00:12:58.954, Speaker A: And this is also where the app starts collecting information about you and they start it on their server. So it's where your information gets out of your control on the normal web. And here is how we are trying to take a different approach. This is a private key picker that lists all the profiles that have saved locally for which you can use a private key to sign in. It's a rather advanced and important step. You're choosing which key to use in order to sign a message that you'll be sending privately. But for the final user, you're just picking among three profiles.
00:12:58.954 - 00:13:36.920, Speaker A: It's easy. In this case, I want to send a message not as Jane, but as a small bike shop she works for. Now we are ready to submit a message. This is an additional confirmation given by Dep. It's not optional for the developer of Dep, but the user can skip the confirmation next time. It's here to ensure that the interface is not lying, that the message that you are about to send is the same that you just typed before. Any irreversible action myth should always confirm with the users about his intentions.
00:13:36.920 - 00:14:04.360, Speaker A: Okay, it's end. Okay, again, I don't want to give $100. Let's just change it to donation. Click donate. And again, this is the confirmation dialog. You did not need to pick an identity again because the app is assuming that you'll be using the same, but it's up to the developer. But also the user can change the origin of the fund.
00:14:04.360 - 00:14:50.124, Speaker A: This is a wallet picker. It's another interface element that's made for Ethereum. It lists all your public profiles and the wallets from which they can send money from. They are not necessarily equivalent to bitcoin addresses. They're just a way for the user but better manage their funds, as maybe many of those wallets have specific limitations by their given contract. So, for example, you cannot donate from the employee salary, you cannot take out from the pension fund unless you are one of the authorized providers. Okay, now I just pick it from the stipend sent.
00:14:50.124 - 00:15:27.860, Speaker A: Done. Now, we've done some very advanced tasks here, but we've sent an encrypted message to an app we've chosen from many public keys. We've sent money from multiple wallets managed by series of contracts that are associated with those keys. But everything was very transparent to the user. But I think I would like to take some bolder steps now because the crowdfunding example is very like a traditional web type. It's a service created by someone else, maintained by a third party that you choose to use and trust. But Ethereum is really about allowing direct agreement between peers.
00:15:27.860 - 00:16:30.024, Speaker A: And so it would be a myth if people couldn't create a small app intended for a very limited set of users. And I think no example is more appropriate that than a marriage, than a wedding, then a marriage is a contract between two parties that involves other parties, their children, their family, and that it should only matter to the people who are involved in that contract. So let's do that. Let's create a family trust. What is a family trust? It's a joint account that allows two or more people to share assets and take decisions together about what to do about that assets and money. And it allows automatic inheritance for the family, for the rest of the family, to the children or other extended family in case something bad happens if one of them. I think it's a great example of why someone who has never interested in cryptocurrencies might use our software.
00:16:30.024 - 00:17:00.656, Speaker A: Because they care about privacy and they care about having control of their own private property. Let's select the first partner. So you've seen most of these inputs. This is the familiar identity picker, but with a difference. This is for picking public keys that you have available. This means your own keys, but also friends and contacts. So Jane selected herself here for a second partner.
00:17:00.656 - 00:17:36.768, Speaker A: Let's pick Zach. And just like that, it just became the first place ever in the world to legalize truly equal marriage between human and robots. Now, let's choose an heir. What is an heir? An heir is a profile that works both as a backup, but also as an automatic inheritance system so you can leave your assets to your small children. Here's your problem. What if your children are too small. You could directly download it here in a new computer that has never been on the Internet, create a new identity in the name of your newborn kid and keep it in a USB stick for 20 years.
00:17:36.768 - 00:18:30.032, Speaker A: But really, what's the point of the whole system if you're just sending transactions within yourselves? Also, it's a bigger problem than that. Most people in the world have never heard about Ethereum, and most of them certainly won't have an account. Can you imagine having to telephone your family and have to explain them over the phone? How to create a private key and send a public key over by email? There was an app not long ago, I don't remember the name, that promised to be a social network only for your most intimate friends. The biggest problem of that is that my most intimate friends are not the ones trying out new social networks and new apps. So the people who I knew that had that were using the app were my colleagues, people I had nothing intimate to say. So that's the problem. The people you want to do business with and want to share intimate things with are not necessarily early adopters.
00:18:30.032 - 00:19:01.224, Speaker A: How do we solve this conundrum? To solve this, I'm proposing what I called an invitation token. So how does that work? An invitation token is a temporary transaction that can only be redeemed once it's protected by a secret key encrypted by a secret question answer passphrase. So you just go here. Instead of choosing a profile, choose invite new. You put a name of your partner so you remember it. You type a question or a hint, or how to get the answer and type the answer. You type it twice.
00:19:01.224 - 00:19:49.100, Speaker A: For security, this creates an image or some other simple file with encrypted keys. Now you can send these files through an insecure connection like email or social network. And then, if they don't know already, the answer to the private passphrase, you can give them separately via email or via postcore and whatever. Now, something very important here is that it never expires. So you could keep it printed on a paper in a safe, or you simply can give it to a loved one via postcard and ask them to hold it until the time is appropriate. And the only instructions that you need are just download ethereum, drag this file on that and type the secret phrase, and bingo, your assets are saved. There's an extra advantage that I think it's so important, I think it's worth mentioning, it creates a viral look.
00:19:49.100 - 00:20:41.548, Speaker A: As a user, you have an incentive to send files to people who haven't downloaded Jiron yet. Maybe because you want to do business with them and you want to send them scroll transaction. Maybe because you want to have your five closest friends as password recovery, as backup options or anything like that. What is important is that it stimulates every user to invite other users to be part of this network. And it creates this loop, not because it's creating artificially, like in a social network, asking for donations, but because it's useful, because it's important, because people can see what it's for. We are almost finished with the app. Now we can add an optional maturity date so your heirs can only lock their account after they are 15 years old or 16 or whatever.
00:20:41.548 - 00:21:05.712, Speaker A: Now let's write title. Let's change the icon. I think we are all set up to create a marriage contract. But before we go to next part, I want to talk about terms of Use. I hate terms of use. Almost all software requires you to scroll past a wolf text of questionable legality before you can use it. And come on, everyone knows that that thing is out there to protect a software baker, not user.
00:21:05.712 - 00:21:36.472, Speaker A: But I think that we can use that to our advantage. People expect that pattern. We can twist their expectation. In this screen you see the code of the contract that we are about to create. It's very similar to a terms of use. A terms of use is a text written in a special language that it's almost quite like English, but it's not English, which defines a future interaction between the users and the software maker. Even when the user ignores it, he knows it's there for a reason.
00:21:36.472 - 00:22:14.664, Speaker A: There are people out there who can read it and can check its legality. So the code, reviewing the code is almost the same thing. It's almost, but not quite english. And it defines future interactions between the users and themselves and their peers. And even if he doesn't want to read it, the user know that there's someone somewhere that can read it and that maybe he can hire to read it. Plus, unlike terms of use, this one is editable and it has links leading to suggestions on how to tweak the code and how to learn more about it, if you're so inclined. Now we define a fee.
00:22:14.664 - 00:22:44.932, Speaker A: Again, I always try to explain clearly what's happening. What are the consequences of changing the fee? The confirmation dialogue. Before any irreversible transaction, we always have to confirm. Now some splines need to be reticulated first. And here we are. This is a very specific page that allows two or more people to hold money and assets, take giant decisions. What not to buy what to sign up for or not.
00:22:44.932 - 00:23:31.380, Speaker A: There's probably some option up there to add more children, to add some extended family member, and even to end the marriage at any point if both of them agree. So let's think. Let's review what we accomplished here. We were able to make a complete novice user create and publish his own app without ever needing to ask permission of anyone, even without having to learn about programming. We allowed him many opportunities to learn more about contracts, how to edit them, how to use them more in their daily lives. We got a user to generate a private key encrypted to a passphrase and encourage him to keep a code storage of that key. We got a user to pick and manage a collection of public and private keys.
00:23:31.380 - 00:24:23.760, Speaker A: We encourage users to shack the hash of a built app against its source code and incentivize them to fork our apps and learn more about being a developer. We even got a user to sign securely and send his own encrypted message without ever needing to sign up into any new app, without exposing their private data or trusting blindly as servers, and out of that, without pushing too many technicalities, without exposing, making the user unaware of the cryptographic complications behind all that. Because Mist isn't an app for people who want to play with cryptography, it's an app that gives people, ordinary people, the tools of cryptography and the blockchain to make their own life a little easier, more powerful, and more decentralized. Thank you. I hope you like it. Bye.
