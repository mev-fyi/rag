00:00:13.050 - 00:01:07.790, Speaker A: Hi everybody, I'm Sven. As I said, I joined the team three weeks ago and this is a talk I'm giving about some methods. It's not about Ethereum at all, just some way to organize ways how we can interact together. It's a thing that you can use, and I've used it in my previous company very successfully. And I just want to introduce you to a little bit to it. I think a lot of you have already heard about scrum and all these buzzwords that come around with this kanban extreme programming, test driven development, all this stuff. There's this whole way you talk about one principle which is called agile software development.
00:01:07.790 - 00:02:00.446, Speaker A: It all boils down to the term agile. And that's why I want to talk first a little bit about what agile is. If you know, in old days, in the very old days, how projects were made in software development, I think you heard about the waterfall model, how to develop software. It's like, so you specify something, you implement it, you integrate it, you test it, later, you maintain it, water falling down. And this is the way projects are being built. But this has some lot of problems. So in an area already 13 years ago, some very cool guys came together and said, came together in Utah, 17 programmers and said the waterfall model has some problems to develop software.
00:02:00.446 - 00:02:41.822, Speaker A: And we want to think about ways how to improve the process of doing software. And this is known as the Agile manifesto, which is already 13 years old. And the knowledge that they gave us is about four basic principles. And in software development, some values that you have to do is that we value most people. And because we're all developers and we should work together, we value working software. Working software is much more important, for example, than documentation or having the latest features. Working software is the value for that.
00:02:41.822 - 00:03:13.980, Speaker A: We value customer collaboration. That is, our software lives in a place for somebody and that is our customer. And we want to work with the customer to use the software. And I think one of my favorite is responding to change in software development. There's a lot of times when it doesn't work after plan. So that is where the agile manifesto actually gets his name from. We welcome changes no matter when there's always changes.
00:03:13.980 - 00:04:02.086, Speaker A: So the agile world is just an umbrella, which there's a lot of technologies that you can use. Scrum is one extreme, programming is one feature driven development. There's all different processes which you can use to do agile software development. And it all boils down that you do something iterative and incremental. So like when you do something, you always do it always in the same round and you just add a little value all the time. Another way to put this is this sentence, what is agile? It's early delivery of business value. And I really like this sentence.
00:04:02.086 - 00:04:33.122, Speaker A: The sentence, while it is about software development, it has nothing to do with software. In the sentence it has early. So we want to be fast, it has delivery, get it out. And this is increase something and that is the value. But there's nothing written about software. And there's another way put that behind that. It's less bureaucracy, mainly because it comes from the waterfall model.
00:04:33.122 - 00:05:25.990, Speaker A: But I think here in this project it's a little bit different. I think our roots are not from the waterfall model, but more like in an open source project. And I think, you know, a lot of open source projects which have amazing features, they do something really great, but in the end nothing works. I have created this great, great library which shows 200 different images. It can display 200 different images, but can it zoom? Yeah, it can zoom into my image only when you have installed something different. And this is the thing, the software, it has some good features, but it does not give the impression that it really works. And that even though we have intelligent people doing it and passionate developers.
00:05:25.990 - 00:06:30.660, Speaker A: And the thing what I like there is we are all nerds and I feel a little bit heretic by telling that nerds we like as nerds, we like to develop software, we like to add features, we like to do something great there. But when you think about it, nobody actually wants software. We want software, we like software, but the people out there, they don't care about the software, they just care about something that they get done. Think about, do you really care about the details of your tax income stuff? Nobody cares about that. So what we care about our software, nobody out there cares about the software. So the goal as a good developer is just to develop enough software to solve something. And I've rewritten this sentence a little bit.
00:06:30.660 - 00:07:15.120, Speaker A: What agile is, what fits better to an open source project is like we deliver early delivery of business value, but we need some bureaucracy because mostly open source project, there's not really so much bureaucracy, just some bureaucracy to make it work. So that's about agile. Now about scrum. I'm just talking about scrum because I've used scrum emold company, it worked very well. Before I was in the company, we didn't use any of those. We used the classical model and it was a failure. So that's why I thinking it's quite a good thing to use.
00:07:15.120 - 00:07:42.230, Speaker A: This is an overview how scrum works. Normally, what you see is okay, we have a great goal. We want to build a huge thing. We have a huge group and we have some time to build it. That is the basic premises. We want to build something great with Ethereum, we have a huge group here and we have time to build it. That's one way to do it.
00:07:42.230 - 00:08:06.346, Speaker A: The other way is, no, don't do it this way. Split everything up. Don't try to build everything at once. And splitting everything up means first I split up my product. What is ethereum? What is the project? I split it up into very small parts. This is called user stories. And all these stories, they make up my backlog.
00:08:06.346 - 00:08:38.650, Speaker A: My backlog is actually my task list, what I want to achieve. If I have done my full task log, my project is done. I order my backlog and say, what is the most important stuff I have on my task list there? And these, they create the most value. They go up to the top and there's other stuff which are nice to have, but they go down. Second, I split up my organization. We actually do that. We have teams which are in different places, which is good.
00:08:38.650 - 00:08:55.658, Speaker A: That makes sense. And the third part, we split the time instead of saying, okay, we have one delivery in whatever month. We have many deliveries every two weeks, every three weeks. That's called a scrum sprint.
00:08:55.834 - 00:08:58.880, Speaker B: And in each of these sprints we deliver something.
00:09:02.300 - 00:09:39.850, Speaker A: If every team just delivers something that is only one part of the equation. In the end you have to build it all together and reintegrate it all together into something. And that's the last part. We take all the small parts, put it in a ball together and see how they work. So we have, in every fixed moment we have something new, always a little increment. And all this during this time, we optimize the process after one round. After the first sprint, we look what is good, and after the second we look what is good and we optimize it.
00:09:39.850 - 00:10:07.280, Speaker A: There are some other features about scrum. It's about the standard meetings. It's about the scrum board. I'll come to that later. What is the structure? In a scrum project, the important person there is this product owner. Normally the product owner is the boss. Here it has a different namer and he's the one who is in charge.
00:10:07.280 - 00:10:37.368, Speaker A: He's the one who is in control of the product. But his role is to talk not only to the development team, but also to the stakeholders. And that is the really important part of scrum. It's like you talk to your stakeholders. And who's the stakeholders here? That is what Stefan already told a little bit out. Who is the one for whom we are building that? The stakeholders is, of course us. We are building that.
00:10:37.368 - 00:11:13.796, Speaker A: But there's the people who invested in the ether sale. They're also stakeholders. There is the developers who want to build something greater, and there is the users in the end, and with them you have to build a communication. That's the role of the product owner. He decides, okay, in communication and looking in my backlog, the stuff that I want to do, what should we build next? The team. The team gets empowered. The team says, okay, you want to have this built? We decide what we want to build.
00:11:13.796 - 00:11:45.344, Speaker A: So instead of the boss saying, okay, you build everything like this, I declare that the team says, okay, we think we can build some of those. We can build a little bit of these. We can build a little bit of these. And we commit to that. So that is, we take from the scrum backlog, which are all the tasks. We have some small tasks to the sprint backlog. The sprint is something we do in one or two, three weeks.
00:11:45.344 - 00:12:22.990, Speaker A: And the last role we have here is a scrum master. He's part of the team, or it can be an external guy who just is like doing, he's helping the process going on. How does a typical sprint look like? Normally you decide, okay, a sprint is something which will last two weeks or three weeks. And at the beginning of the sprint, the project owner, he says, okay, I have my big backlog. This is all the tasks I need to do. Multi user stories. I think about what should be done in these two weeks.
00:12:22.990 - 00:12:37.856, Speaker A: That is the sprint planning. I decide, okay, this is really something where I want to do. The team decides, yes, boss, we can do that. We can take this part of it. We can take that part of it. Let's do that. And the team starts building.
00:12:37.856 - 00:13:29.820, Speaker A: And the team starts building only this part. Normally there's not much change in it. You just commit to this thing and the team starts building it. What you do every morning at fixed part in time, you have a stand up meeting. With the stand up meeting, everybody gets updated on the progress. Are we all on the same track? Are we still doing the right thing? Are there problems when you do that? You can continue with the work during the sprint, during the three weeks, the product owner, he thinks he looks about, okay, are we doing good progress? Have features changed? Is there feedback coming in that says, okay, maybe we need to change something. That is, he refines the backlog.
00:13:29.820 - 00:14:06.984, Speaker A: He adds something or says, okay, these priorities have changed or something gets lower. And in the end, after the sprint is done, we make sure that we have done everything and then we show it. At the end of each sprint you deliver something. You don't deliver anything big, you just deliver something. And this something at the end of each sprint, it works. That's the goal of it, because you get it out, you have some working improvement and you can show it, you can show it to developers, you can show it to users and you can show it to the other PSP.
00:14:07.032 - 00:14:13.100, Speaker B: That is what we have achieved right now. And this is doing, it's going round and round.
00:14:16.390 - 00:14:21.634, Speaker A: Scrum is a little bit complex at first and there are some ways to.
00:14:21.672 - 00:14:39.346, Speaker B: Learning it, but it's just like learning ski and there's an asian way of doing it. It's called Shuhari and it basically means, oh, this is all very complicated. In the beginning you just do something. What you have to say, okay, I know I have to do my sprint.
00:14:39.378 - 00:14:40.774, Speaker A: Planning, I know I have to do.
00:14:40.812 - 00:14:46.566, Speaker B: My stand up meeting, I'll do that. When you get more comfortable, you adapt.
00:14:46.598 - 00:14:48.026, Speaker A: The rules, say, okay, this does not.
00:14:48.048 - 00:15:16.814, Speaker B: Really work for us and this we need to change because agile is about the people, it's not about the process. You adapt it to your own needs. And when you are master of it, you say, forget about the work. We have found our way to doing this. We don't want anybody in the team saying, okay, this has to be like this. This is the way that's been done, no other way. So this is one way of delivering software projects.
00:15:16.814 - 00:15:50.242, Speaker B: Why does this work normally in big projects it's all about risk management. And I think Ethereum is a really big project. When you say, I want to build the Ethereum car or something really, really big, you have of course a big risk. The risk is that it will fail. And that is a big bank project. Get it out, do a big bang. See that everybody likes it, or maybe not everybody likes it.
00:15:50.242 - 00:16:03.510, Speaker B: That's the thing. Some smart people have looked into it for a long time and say, why are there so many huge projects failing?
00:16:04.250 - 00:16:49.078, Speaker A: And there's extensive research showing that the most important facts while huge projects fail is complexity and size. That is something that is really the reason why the huge projects fail. So the goal must be to get both down complexity and size. You can ask, what is the successful project? Then there's three ways of looking into it. The scope. Do we have all the features that we want? Do we have all this cool stuff that we wanted to build in. Is it there? Yeah, that's something.
00:16:49.078 - 00:18:08.878, Speaker A: Are we on time? Can we manage our deadline and are we a budget? Do we do everything with the money? Do you have a successful project? If you meet all this kind of. It is important, but the real important stuff is that you get happy stakeholders. If you get the scope, if you get the schedule and the budget, and you have happy stakeholders, then you have a successful project. You can have the scope, the budget and the time, the schedule, and you have unhappy stakeholders, then everything is for naught. And even if you miss on all the other deadlines, if you don't have all the features, if you just have something, and if you're late and if it costs differently than you thought, but the people are happy that are using it, then you still have a successful project. And the goal there is to do different ways. In a big bang project you say, I have a plan, I know where I want to go, I shoot in that direction and that's where I want to go, and everything follows there.
00:18:08.878 - 00:18:44.454, Speaker A: The problem is something might change. If you shoot in this direction and you change, you might miss your target line. Agile on the other hand is different. It's like an homing missile. It's saying, I'm smart, I know that something will go wrong. I know that I don't know everything right now, but I will adapt, I always will adapt and do something in the right direction. Therefore I minimize the risk.
00:18:44.454 - 00:19:57.202, Speaker A: Because if I just push everything out saying, this is my big bank, I have a long time where really nothing is shown. You just develop, you do something, you present it, you present it to your users, you present it to a developers, and in the end maybe they don't like it, too bad. In an agile environment, you say, okay, I deliver value all the time, a little bit. In the beginning, users will not be happy, but they will be happy each time. When you do something like that's how you do that is to achieve that by changing also the way you organize your structure. We have a lot of different features that we want to achieve, like the cool technologies that need to be built. For example, there's whisper, there's swarm, there's clients, each of them, and you can of course say, okay, I'm building swarm and I do it in the end.
00:19:57.202 - 00:20:57.560, Speaker A: Here's swarm, let's have it. That means you create a lot of value at once, but it needs a lot of time. You can also change that and say, okay, we do a little bit of swarm, we do a little bit of this, we do a little bit of client stuff, for example, and we create a little bit of warp value all the time. In other words, if you want to build a car, don't have someone build the tires, don't have someone build a chassis, create first a skateboard, and then move the skateboard into something else. So you get satisfaction in a different way. When you build all the parts out separately, you can only have satisfaction at the end. When you do it by changing stuff, you get always a little better smile on the customer's face.
00:20:57.560 - 00:21:02.390, Speaker A: Okay, we already have cross functional teams.
00:21:03.290 - 00:21:04.600, Speaker B: Things are good.
00:21:05.850 - 00:22:02.890, Speaker A: The message here is, really do not build a lot of stuff, build valuable stuff. That's actually why I used this presentation from Henry Kneeberg. He's a very cool, agile coach. I could have created my own presentation and do all this stuff, but I thought, well, he does already. This good presentation I adapted for my niece, and I think I create value by just telling you that, and instead I build the other stuff that I have to do. So scrum is a lot about planning, and one key feature about scrum or agile is anything is you empower people. Empowerment means let people ask, why, when someone tells you, okay, we need a bridge, you don't say, yes, let's build that bridge.
00:22:02.890 - 00:22:55.590, Speaker A: You always think at first, why do we need this bridge? Okay, we want to go to the other side, and then what are the options? This way, you empower your team, and you get better options by asking your team, I would even say, you can go another step forward and say, do we need this bridge right now or can we have it later? Because it's a double sided sword of one side. You say, okay, give me your options. Tell me what you think. You always get a lot of stuff, oh, yeah, let's do this bridge and have some very cool stuff on it. And also we need this interface to add more to it. There. You need a strong voice of reason that says yakny.
00:22:55.590 - 00:23:51.340, Speaker A: Yakny is a famous term in scrum world. It means you ain't gonna need it. And that's something someone always has to put, do we really need that? Now? Scrum is also a lot about change. When you have a good plan and say, okay, I want these features and it has to be ready in four weeks, and I want ABC features inside there you have a cool plan, but most of the time you know it's going to fail, or if you don't know it's going to fail, well, normally, then you're late. Scrum, on the other hand, says, okay, we will always deliver something in four weeks or in two weeks, we will deliver something of value. We deliver something. What is important, what brings us forward.
00:23:51.340 - 00:24:23.014, Speaker A: While we deliver that, we might see that we are not as fast as we think we are, but we still deliver something. What we get out, where people look at it and we get feedback. So in the end of these four weeks, we might not get the original features that we wanted, but we get something of value, maybe different features. And that's what you get with strum when you plan, when you say, okay, these are my features, this is something.
00:24:23.052 - 00:24:28.242, Speaker B: That I've done, this is in progress. And in the end of the sprint.
00:24:28.386 - 00:24:34.950, Speaker A: You see everything that we have done. You can in the end count. You can count for every sprint.
00:24:35.030 - 00:24:45.582, Speaker B: Well, I got four features done this week. Next week I got seven features done. The week afterwards I get zero features done.
00:24:45.636 - 00:25:37.934, Speaker A: Something went wrong. And when you have that, you can predict into the future and say, okay, if I want to have this cool project, if I want to do all this stuff, I can give good measurements, how long it will take. The last part, which I think is the most important about scrum, is shorten the feedback loop, because think about it again. The agile manifesto says, talk to the customer, don't do something above the customer. You want to have feedback when you want to succeed. Normally I would say the fastest learner wins. Not the most intelligent, but the one who gets things right from the world because you do something for yourself.
00:25:37.934 - 00:25:43.374, Speaker A: But the world might shape me different. You should do strive to get feedback.
00:25:43.422 - 00:25:44.660, Speaker B: As fast as possible.
00:25:45.030 - 00:26:17.718, Speaker A: Feedback you get from the stakeholders. And how do you get it? You release often. You do it like in the shorter terms, the better for that. It's very important that you close the feedback loop. That is what Stefan was talking about. We get the feedback, what the people really need. As I got from your talk right now, it seems like right now our target is developers to build dapps.
00:26:17.718 - 00:26:59.690, Speaker A: So we should listen to them. What do you need? What do you really need to build successful dapps? And we should minimize the feedback loop. How does the feedback from the developers come back to us and learn from that? In a technical point of view, you want to have releases really, really easy. Normally when you have huge features and the longer time has passed, a release is a catastrophe. You say, okay, in one week release something and you know it will not work. Something is not integrated. The testing was not really done and normally it's a catastrophe.
00:26:59.690 - 00:27:20.830, Speaker A: So the goal is to say, okay, I automate the process so much that I can release often in small increments but I get something right so that I can really say, okay, I need next week, I need some working prototype, I can get it. This is what I'm actually working on. So I'm talking about that tomorrow.
00:27:23.030 - 00:27:23.490, Speaker B: And.
00:27:23.560 - 00:28:03.280, Speaker A: Some last parts of it just about best practices. If you are in a team and you want to get feedback, the best way is face to face communication. It's just the easiest way. So that's why the stand up meetings are so popular. You get the things out very fast. And what also belongs to scrum is at the end of each sprint, say we did something, we delivered something, and we learn. You do a post mortem, introspective or however you want to call it, you show what you have done and you say okay, we have done that, we have learned that.
00:28:03.280 - 00:28:47.050, Speaker A: And you spread the word so that the other people learn from that. It's not about blame saying okay, yeah, this didn't work, this didn't work. It's just about, okay, we want to learn something and get the next round better. On the side note, this is very common. It's something that is also very popular in the lean startup world, which is actually the same principle. If I want to build something successful, I start with an idea and I start with doing some prototypes and then I build a minimal, viable prototype. That's something that is just the basic feature to get people hooked.
00:28:47.050 - 00:29:21.080, Speaker A: If I got that, I let it out to some users, see what they think. I do measurement, I do variations of the measurements. So this part of users get this feature, this part of users gets that feature, which comes better. And so I have a feedback circle and you increment, you always increment and you always get feedback. And if you get feedback, you learn. So that's about for scrum. Scrum is not for everyone, that's for sure.
00:29:21.080 - 00:29:59.134, Speaker A: If you're a product owner, both sides, the development team and the product owner, they have to have to like it, otherwise it will not work. The product owner will give a little control about this vision because the team gets empowered. If the product owner says, okay, I want this feature and the team says oh, can I deliver it? Whoa. Or if user feedback says, oh, this new cool feature is really nice, but actually people have problems installing the stuff, for example, then we should focus on.
00:29:59.172 - 00:30:46.786, Speaker B: That to get it back. So the product owner gets a lot of nasty questions and you have to talk a lot to the stakeholders, developers, they also give up something which is quite common with developer, hey, this is my project, this is my code. I'm the hero of this part of the code, I'm the one there. No, it's not about this anymore. The team is responsible for everything, so you must be willing to share, to talk to others and be partnered with them. Also, you get a lot of more responsibility as a developer if the sprint is not going ready. It's not also what the boss saying, okay, it's not ready, just do something.
00:30:46.786 - 00:31:39.202, Speaker B: The team takes responsibility to make this bullet happen. Basically for a lot of people, it means you get out of your comfort zone, you do something, what is maybe not what you really like. And that can be a draw, can be bad or it can be good, but on the other side you get a lot as a product owner, you get a team where you can depend on because the team is empowered and you also get reliable measurement, you know, okay, if you want to go this way, I know in this same time frame I can do it. As a developer, you get decisions that count because you're part of the decision process. You get less debt. March, I don't think we have that before, but I think it might come when we need some features done and you get story points. Yeah, everybody likes story points.
00:31:39.202 - 00:32:51.910, Speaker B: Story points is when you do something, when you finish something, you get story points for that everybody loves and you learn a lot of new stuff. So wrapping this up from this presentation, I think this is the three most important stuff in managing projects. The thing is the first sentence, which I really like, early delivery of business value. So everybody should know what business value is so that we are going in the right direction early and delivery means get it out fast. Nobody wants software. Sorry, I'm heretic by talking like this, but just do the minimal way of doing the software, what is really necessary to solve something, and the fastest learner wins. If you want to get started with scrum, it's best to get some really a pro into it, a scrum master who knows about it, who can make the scrum experience fun and just do two sprints with him.
00:32:51.910 - 00:33:09.710, Speaker B: That's the easiest way to get people on board because people need to be willing to do that. I'm not telling you scrum is a good way of doing it. I just think it is a good way for success. It makes life easier.
00:33:12.130 - 00:33:12.540, Speaker A: Thank you.
