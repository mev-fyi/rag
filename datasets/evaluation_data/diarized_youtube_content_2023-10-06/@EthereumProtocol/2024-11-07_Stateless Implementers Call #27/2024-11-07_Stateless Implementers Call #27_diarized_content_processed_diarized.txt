00:00:02.880 - 00:00:19.860, Speaker A: Hello, welcome to stateless implementers. Call 27 issue 1196 in the PM repo. Thanks everybody for joining and let's kick things off with any updates. Anyone like to go first?
00:00:23.600 - 00:01:13.890, Speaker B: Yeah, I can start. So we have been doing some internal workings in Geth in the way we generate all these partial witness situations. So this is like mostly internal Geth work. Then we also enable witness checking whenever Geth consumes tests. This is like. Doesn't sound entirely useful now because Geth is the only client that can fill tests. But whenever other clients might be able to fill fixtures, checking for the witness makes a lot of sense because we didn't have the same client feeling and consuming the tests.
00:01:13.890 - 00:02:37.550, Speaker B: And also just an hour ago or something like that, I released a new version of the fixtures 007 and in this version I included the parent state root as a field in the witness, which is something that we have in Devnet 7. So whenever you do witness check ins in blocks, you should also check for this new field because that's part of the consensus. And I remove the witness generation for backported tests that were running in overlay tree mode, which is a mouthful, but basically whenever you are in the transition, if you're executing tests in a fork configuration where you are doing kind of a transition of a state, it makes no sense to generate a witness because this witness will be partial because you have state in the Merkle Patricia tree and in the Verkle tree. So we shouldn't actually have these witnesses there. So I remove them just to avoid confusion. I also rebase the witness Explorer so we also have that for Devnet 7. So that should be already running.
00:02:37.550 - 00:02:48.250, Speaker B: Yeah, the usual. Thank you for all the testing crew, Spencer Danish and other people that helped me verify all this stuff.
00:02:52.430 - 00:03:27.910, Speaker C: Yeah, adding to this actually not much more. Collecting some data, merging some stuff into mainland Geth and having some conversations about the rebase. Yeah, to slow process. So no announcement yet, just work in the background. And there was something else. Oh yeah, there was this issue that we're going to discuss at the end of the sick and yeah, we relaunched the testnet. Yeah, kudos to DevOps for that.
00:03:32.860 - 00:04:00.720, Speaker D: In this slide. So we are trying to work on several stuff. So the first step is we implemented the majority of the gas cost modification. We still have something to do in the block hash, but we are passing a big part of the reference test. We are also trying to join the DevNet. So we had an issue in the first block. It was related to the historical block control.
00:04:00.720 - 00:04:52.882, Speaker D: When I checked at the beginning I was saying that GATT is not pushing the basic data leaf and the code hash. But I found that today it was an issue in Bezu and when I fix this issue I can have the same state route as guess even if I'm pushing the basic data leave and the code hash. But something that is strong is these two leaves are not present in the witness. It's why I was thinking that Git is not pushing that. So it seems some data may be missing in the witness because clearly it seems that get is putting everything in the state. When I was able to pass the first block, I had an issue in the block four. So I'm still trying to understand where is the defense.
00:04:52.882 - 00:05:46.990, Speaker D: When I was also checking in the witness, I so a lot of strong stuff, but I prefer to investigate more. And also I will compare with the explorer instead of comparing directly with the witness from Lod Star to see if I can detect a difference or not. We are also trying to refactor the proof validation so we have a first implementation but we want to refactor this part we are starting by using. But at the same time we are doing the same stuff with Konstantin. So we are trying to work in the two libraries at the same time. It will be also needed to work for the stateless part. And yeah, I think it's all.
00:05:46.990 - 00:05:50.510, Speaker D: It's all on the bezel side.
00:05:56.820 - 00:06:00.188, Speaker E: I think I can go next. So never mind. We're just trying to join the test.
00:06:00.244 - 00:06:00.652, Speaker C: Net.
00:06:00.756 - 00:06:12.680, Speaker E: We had some problems with the Genesis state root, but that's resolved now. And now we are having a state root mismatch on block like 5314. Just trying to debug the issue and yeah, that's it.
00:06:24.430 - 00:06:24.950, Speaker B: Cool.
00:06:25.030 - 00:06:28.566, Speaker A: Anyone else I see that somehow just joined. I don't know if you have any.
00:06:28.638 - 00:06:30.730, Speaker C: Updates you'd like to share. No pressure.
00:06:41.550 - 00:06:42.150, Speaker B: Cool.
00:06:42.230 - 00:06:43.210, Speaker A: No updates.
00:06:43.630 - 00:06:44.438, Speaker C: All right.
00:06:44.574 - 00:07:03.100, Speaker A: Excuse me. I think we can move on. Next up on the agenda, do we want to. Excuse me. Touch on testnet relaunch and anything around that or are we all good to go?
00:07:06.200 - 00:07:20.892, Speaker C: Yeah, I mean we have some issues. Just wanted to. To list them. So initially the testnet. Sorry, the. The Witness Explorer explorers were not working. But we.
00:07:20.892 - 00:07:30.520, Speaker C: Sorry. Not just the Witness, all the explorers were not working. Those we used to debug. That was fixed by Philip over the. Over the weekend. So that's. That's great.
00:07:30.520 - 00:07:33.212, Speaker C: And then.
00:07:33.316 - 00:07:33.644, Speaker D: Yeah.
00:07:33.692 - 00:08:14.700, Speaker C: To just to. If anybody runs into the same problem as Karim. There's an issue with the testnet that we don't want to restart the testnet for simply the history expiry contract on the 29th. Sorry, not history expiry. Historical root storage. Root contract is not deployed at Genesis, so it is effectively recreated at every single block. But because the code and the nonce and the balance are zero, we recreate it all the time.
00:08:14.700 - 00:08:54.178, Speaker C: So there's a couple of things we could do. I don't really want to do any of them, but one thing would be to send some funds to that contract so that it would be created. I think it's a bad idea in the sense that now it would behave like the normal way, but historical blocks would not have this issue. So that I think it would be even more confusing to people. And. Yeah, so that's the. So effectively what happens is that those locations, like the contract gets created, but EIP158 deletes it.
00:08:54.178 - 00:09:09.964, Speaker C: It does not delete the. The storage hash. So the. The buffer fields, as it should. But the. The. How do you call that? The account header itself is never created.
00:09:09.964 - 00:09:27.920, Speaker C: I mean, it's full of zeros, so it's. It's never created. So be aware of that, I think. Yeah. Okay. Karim, you had an issue, like, do you want to just go over it quickly or not? Or. Yeah, you still, like you said, just want to do some investigation.
00:09:29.490 - 00:09:35.162, Speaker D: I prefer to investigate more. I don't have enough information to share.
00:09:35.346 - 00:10:03.596, Speaker C: Okay. Yeah, so that's just something to be aware of. We're hoping to keep it running for some time because the next testnet is going to be another step. So I think it's valuable to keep it running even with this. This flaw I describe. But yeah, if. If you have bugs, I mean, just.
00:10:03.596 - 00:10:12.200, Speaker C: Just try to join it, just try to. To use it. And if you. If we find bugs, we'll. We'll tackle them one by one, like we usually do.
00:10:18.260 - 00:10:19.200, Speaker A: Tanish?
00:10:20.100 - 00:10:23.800, Speaker E: Yeah. Just wanted to mention that the. The explorer is still not working.
00:10:24.900 - 00:10:25.452, Speaker D: The.
00:10:25.556 - 00:10:29.680, Speaker C: Yeah, which one? Sorry?
00:10:30.500 - 00:10:38.040, Speaker E: Yeah, the. I'm not sure which explorer we use. So Dora is working for the El blocks is not working.
00:10:38.500 - 00:10:46.188, Speaker C: Oh, yeah, this one will. Yeah, I. I don't know. I mean, it should not be deployed. There's no support for. For calling that stuff.
00:10:46.364 - 00:10:47.200, Speaker E: Okay.
00:10:47.940 - 00:11:20.490, Speaker C: Yeah, it should not. It should not be deployed at all. Simply, I guess every time we're hopeful and we deploy it anyway. I mean, there's no real reason for it not to work. But yeah, we haven't really tried. So, yeah, Block Scout is not really working, never has been. So I guess it would require us to spend some time on that, if there's no urgent need, I think it's better to just remove the link to it.
00:11:20.490 - 00:11:33.922, Speaker C: Cool.
00:11:33.986 - 00:11:55.380, Speaker A: Anything else on this topic or should we keep going? Next up on the agenda, do we have anything that we want to touch on around the execution spec test? There was a new release, version 0.0.7. Is it just mostly announcing that or do we have anything else we want to touch on on that topic?
00:11:56.440 - 00:12:05.140, Speaker B: Oh yeah, go for it. Yeah, I think I kind of COVID it in my update by. Yeah, maybe Spencer, I want to add something else.
00:12:06.040 - 00:12:07.940, Speaker C: Oh, it was all Ignacio.
00:12:14.530 - 00:12:53.870, Speaker B: Yeah, maybe the only thing I would add is that probably this is the Last version for DevNet 7. If we are start talking about spec changes later in the call or in future sick calls, probably they will be for definite date. So I mean there's a big chance that this release version will be the final one for Devnet7 as not to confuse other people for maybe new releases that will come in the next weeks. So yeah, things like that.
00:12:58.810 - 00:13:12.570, Speaker A: Sweet. Then next up on the agenda, there was a topic on EIP158 and deletions, I think. Guillaume?
00:13:13.710 - 00:13:31.090, Speaker C: Yeah, I just realized I'm on mobile, so I'm not sure I can share my screen. Let me see if I can do this. Okay. Granting a ton of permissions. I don't know if you guys can see it.
00:13:34.330 - 00:13:35.550, Speaker A: Yes, we can.
00:13:35.850 - 00:14:42.570, Speaker C: Okay, cool. Yeah, so this is a simple description of what the problem is. We, while merging some code into guests, we found this corner case that's not really covered by the spec and it has an issue. Yeah, basically the consequence is that we might either have to disable EIP158 or allow for deletions. And the way it works is you have this pattern that is pretty common where you can send funds to an address and then deploy. With Create 2 you can deploy a contract at this pre funded address. And the question is, what happens if while you deploy a contract during the same transaction, a self destruct happens? You find yourself having to drain the contract's funds.
00:14:42.570 - 00:14:58.192, Speaker C: The nonce will be zero, presumably. Oh wait, no, right. Because when you deploy a contract. Right. No, because it's during the same transition, of course. No, no. So yeah, so exactly.
00:14:58.192 - 00:15:43.254, Speaker C: So the nonce will be zero, the balance will be zero because the self destruct drains it. So this account by EIP, as per EIP158, this account must be deleted. But that means we effectively have a deletion in a vertical tree. So either we do what we used to plan, which was to disable EIP158. We discussed it back because there was already a topic because of 7702 that was no longer. Turned out to no longer be necessary. But now this comes back on the table.
00:15:43.254 - 00:16:32.820, Speaker C: Do we want to disable EIP158 or do we want to allow for deletions in the Verco tree? Knowing that deletions in the virtual tree is something that the guest team is pushing for a lot, this is something that should be, that should be discussed at the workshop in Bangkok. So both options are possible. Clearly. I think the guest team wants the second option, deletion. So not disabling EIP158. But yeah, that's, that's the summary of the, of the issue. I, yeah, I just wanted to notify people that this issue exists.
00:16:32.820 - 00:16:57.146, Speaker C: It's a spec issue. I don't know how that would react on the testnet. Actually we should, we should try that. But in any case. Yeah. Are there comments, Are there opinions about this? Yeah, that's the reason I wanted to discuss that. Yeah.
00:16:57.178 - 00:17:04.870, Speaker B: Ignacio, can you refresh a bit? Why the guest team wanted to enable the additions as. To refresh a bit.
00:17:05.570 - 00:17:46.440, Speaker C: Yeah, absolutely. Okay, so there's a document that's in the works. I don't think it will be ready by def con. But the idea is that deletions. So when we looked at deletions, we replay 200,000 blocks and deletions are kind of acceptable. They're not taking that much space, but they are accumulating at a steady pace. And if you look at how much space they're going to, how much space they're going to take over, you know, over six months, over 10 years, this is going to balloon.
00:17:46.440 - 00:18:24.450, Speaker C: So the idea, the reason why deletions were. Okay, there are several reasons why deletions were disabled in Verkal. One of them was that Verkal would be enabled, would be coming around the time of state expiry, which we're still working on. But yeah, things have changed. Like this was four years ago. State expiry is a topic, but there's no, no knowing when this will happen. And so what the guest team's position is is that, yeah, okay, one state expiry is a thing.
00:18:24.450 - 00:18:51.446, Speaker C: This is no longer a problem. But if it takes 10 years for state expiry to happen, we have zeros accumulating over and over for a very long time. Like I said, over 200,000 blocks, you don't really notice it. It's not that big. But if you because every location that is deleted in the historical state is never recreated and deleted. I mean there's very few of that. That means those zeros accumulate.
00:18:51.446 - 00:19:23.420, Speaker C: And for example, Gary has replayed so not in vertical mode, but has replayed historical blocks. And even if you look since Shanghai, you find that it's going to balloon to tens, if not hundreds of gigabytes over a fairly short time. So yeah, that is the position. Basically, unless we have a state expiry, this is not viable approach. That's their argument.
00:19:27.440 - 00:19:37.820, Speaker B: Right. So even if you serialize this leaf node with 256 zeros as a single byte, you still think this is a significant amount of storage?
00:19:39.770 - 00:20:32.110, Speaker C: Yes, exactly. Yeah, absolutely. Even if you could store a single zero because yeah, you still have the group and all that stuff, it would still take some, it will accumulate over time. So there's a document that's work in progress and the one side of the argument, the other side is how much is this going to increase? Like storing the information that something that got deleted, how much of an impact is it going to have on the witness? This is why we haven't published it yet, because we don't have any answer. But yeah, there's a document like be aware, some document will be shared in a not too distant future requesting that we get rid of like we keep deletions in Verkal.
00:20:40.780 - 00:20:49.520, Speaker F: Is it keep deletions or enable it? Because right now I believe there's no. Deletions don't happen. Like values don't get removed, right?
00:20:51.340 - 00:20:54.080, Speaker C: Values do get removed. Yes, they are.
00:20:56.460 - 00:20:58.640, Speaker F: So they're not set to zeros right now.
00:21:00.390 - 00:21:14.814, Speaker C: Okay, maybe we're not talking about the same thing. I'm talking about in the mpt, when you write to zero. Oh, I see, okay, disappears. But in the vertical tree when you write to zero, it writes to zero. Right, right. And it. Exactly.
00:21:14.814 - 00:21:40.516, Speaker C: So it doesn't delete anything. I mean, okay, it's. You can compress it and in fact I'm working on something like this to save some space. But there's still a significant amount of data that remains in the database. And it doesn't look like much, even over 200,000 blocks. It doesn't look that like much. But over a year it starts to show and you know, it keeps, it keep growing.
00:21:40.516 - 00:21:45.000, Speaker C: There's no, it's not the same location that gets written like deleted twice.
00:21:49.420 - 00:22:41.590, Speaker B: So like, I mean, ideally for complexity reasons it will be better to not enable deletions because enabling deletions it means that we should cover a new case in the witness generation. Because if you delete a value then you might have to compress a branch or something like that. So we will have to do something there. I guess it might have some impact in the spec regarding gas costs or something like that. Right. Because if you can delete state, maybe you should get a refund or get some kind of similar logic as today. I'm just trying to quickly think what is the impact of enabling this.
00:22:42.460 - 00:23:39.808, Speaker C: Right, so that's indeed the argument I made. But they made the counter argument which is completely valid, that this is a Verkal complex. Like it increases the complexity in Verkal, which is something that hasn't been delivered. But the entire layer, the entire database layer is built around this assumption. So having to modify the whole Guess infrastructure or database layer to be able to distinguish between a zero that was written and something that was never written is going to have a huge impact on, on. Yeah, on the design of clients. And this is the kind of impact that's going to set Verkal like back, like at least, I mean Verkal or whatever back a couple years at least.
00:23:39.808 - 00:24:08.652, Speaker C: It's, it's a huge undertaking. So yeah, like indeed. We have to move to modify the proofs, the proof format to, to handle deletions. We need to know. I mean some commitments need to go back to zero. It, it's not impossible, it's less streamlined, it's less efficient in Verkal. But this is specific, it's not propagating to the entire code base.
00:24:08.652 - 00:24:12.480, Speaker C: Basically that's. That's the argument which I think is completely valid.
00:24:20.180 - 00:24:54.760, Speaker F: Yeah, I think it'll be good to talk about it in Bangkok. My opinion, I don't really know what the. Like, I don't have a full view, but my opinion is that it's better to not have complexity narrow to the cryptography just because ideally if that breaks, it's like the most opaque, usually the most opaque opaque part of the system. So if it's possible to like compress the zeros, which seems like it's not enough, then that would be like something preferred.
00:24:59.130 - 00:25:23.250, Speaker C: Yeah. What would that. Okay. I mean, yes, okay, we're definitely going to talk about this in Bangkok and we, we don't need to talk about this right now for, for hours. Although if people do have opinions, we, we want to hear them as soon as possible. But yeah, what would be the difficulty in terms of cryptography that doing this would incur? I mean, I don't see it. Maybe you do.
00:25:23.250 - 00:25:26.930, Speaker C: So that's why I'm Curious.
00:25:29.270 - 00:25:37.930, Speaker F: No, I was saying that in terms of where complexity should live, it's like further away from the cryptography is much better.
00:25:38.470 - 00:25:53.880, Speaker C: Yeah, yeah, but yeah, absolutely. It's just that I don't really think that is the case in this request. But if you think otherwise. Yeah, please let us know. I mean, you know, think about it.
00:25:53.920 - 00:25:54.120, Speaker F: We.
00:25:54.160 - 00:26:44.714, Speaker C: We discuss. We discuss it in Bangkok. But yeah, so this being said, I don't know, there's not that many client devs today, but do you guys have an opinion on what you would prefer? Yeah, so just to clarify what we prefer between deletions and EIP 158, knowing that disabling EIP 158, which is. I keep getting it wrong, it's EIP 161 is not probably not going to have any major impact. Like contracts that will be. Sorry, accounts that will be deleted will also pollute the. The state.
00:26:44.714 - 00:27:06.310, Speaker C: But it's not the same rate as locations that get deleted. Like storage slots that get deleted. Apparently most of the creation comes from ERC 20s that get transferred and that happens way more often than contract creation. So. Okay, I'll stop talking. Karim, you are going to say something?
00:27:07.490 - 00:27:40.030, Speaker D: No, I just wanted to say if I'm only looking at the Bezu database layer, I will say it will simplify the Bezu code. We also need to do some deletion when we are doing rollback. So it's more related to how Bezu is working with the bonsai logic, etc. So majority of the stuff is already implemented. If we want to move to that and only looking at the business layer, I will prefer that to delete.
00:27:41.880 - 00:28:24.726, Speaker C: That's a very good point. So yeah, Guest also implements deletions because of what you just said, the database rollbacks. But yeah, like the issue comes more in terms of, you know, the original state of a storage. There's. There's a few operations in the database layer that are extremely complex and this is what, this is what makes it extremely difficult. So yeah, for us it would be easier to do deletions as well. And yes, the code is already implemented and just to add when I say the code is to delete from the tree, it's not.
00:28:24.726 - 00:28:27.490, Speaker C: It's not a witness generation and things like this.
00:28:37.800 - 00:28:48.700, Speaker F: Was one of the issues as well with not having deletions. Not just the zeros but the path to sort of the deleted value.
00:28:51.480 - 00:29:29.314, Speaker C: Yeah, so we can always, we can always adapt to this, but we could keep the inner. Yeah, okay, so that's a good point. We could either delete everything, like the whole path, or we could just say, well, we're going to have empty branch nodes because they're. Yeah. Or, you know, branch nodes with a single leaf. That's probably going to make stuff a bit more nasty, but yeah. Okay.
00:29:29.314 - 00:29:45.826, Speaker C: I guess we just need to sit down and think about it. I mean, I wasn't planning to talk about this topic today, but yeah, if. If there are issues in the past. Deletion, I don't think anybody remembers because I. I asked. Okay. At least I asked Dankrad.
00:29:45.826 - 00:30:08.890, Speaker C: I didn't ask Vitalik. That's true. But if. Yeah. If that causes issues in the, in the proof, we should definitely think twice. I'm just saying that, yeah, this is going to be a big pushback from the guest team if we don't. If we can't make it work.
00:30:10.310 - 00:30:39.810, Speaker F: Right. I think that makes sense. I guess I'd also ask if it's possible to separate the vertical logic from the underlying database. So I push a zero to delete in the vertical logic and I delete it in the underlying database. The paths would stay the same, but I just delete the zeros instead of storing. Does that make sense? That's why I asked if the path. If the issue is also with the paths as well.
00:30:41.470 - 00:31:14.578, Speaker C: Right. So I remember because we mentioned that with Dankrad in the discussion, he was saying the issue with doing this, not deleting the whole path was that you would not be able to reconstruct the tree without knowing the history. Basically, you can't reconstruct the tree without a full sink because there are locations in the tree that would not be known unless you know what happened in the. In the past. I'm not sure I actually answered your question, but this is something what you said reminded me of now. Oh yeah. Separating the path.
00:31:14.578 - 00:31:42.406, Speaker C: The. The concept from like of writing a zero from the database. How would we. Yeah, I'm not sure how we would. We could do this because if the 0 is not in the database, how do you know it's there without having. Yeah. Prior knowledge of it? How do you.
00:31:42.406 - 00:32:05.610, Speaker C: You know, like, what I mean is, if you're thinking like, if you're a. A node and you want to join a network, you need to sync the data from another node. How do you. How does that other node tells you? Well, they used to be. There used to be something here, but it's been deleted. And. And yes.
00:32:05.610 - 00:32:31.780, Speaker C: Like, either you have to trust me or replay the chain yourself. It's not great. Okay, maybe I'm Just rambling right now. There's definitely something to discuss and we need to sit down and discuss it. But yeah, I don't think. In short, Kev, I think the answer is no, but I'm happy to be wrong.
00:32:45.410 - 00:33:30.220, Speaker A: Cool. Then we can move on to the last topic, which is just collecting any other topics we would like to discuss all together in Bangkok. One of the ideas is to have a session that's a little bit maybe sort of higher level, focused around the path to statelessness and making sure that we're looking at. And just aware of the design space and asking all of the questions that need to be asked as we navigate and make sure that we stay on the right path. Which also touches on this discussion around exploration of binary trees with something like Poseidon or Blake. And so that will almost certainly be one of the topics discussed. But also wondering.
00:33:30.220 - 00:34:17.320, Speaker A: And Guillaume, flag this just. And apologies, we should have done this probably a week or two ago, but if there's more specific, perhaps vertical related topics or anything, just more specific sort of more. Yeah, just more technical topics that we want to make sure that we cover when we're all together. So just wanted to flag that. I also shared a document. We can just drop topics in there if anyone has anything they want to talk about right now or we can just keep. Keep this async.
00:34:23.290 - 00:34:33.070, Speaker C: Yeah. If you could please share the document also in the. In the main virtual channel and then people can add their. Their ideas to. To it.
00:34:33.930 - 00:34:39.650, Speaker A: Sure. And the Matrix element, I mean.
00:34:39.690 - 00:34:50.149, Speaker C: Yeah, both the Matrix and the more public one. I mean, it's not that the matrix is not public, but it's more focused the. The Discord one.
00:34:50.529 - 00:34:58.149, Speaker A: Sorry. Will do. All right, well then we can just end things there.
00:35:00.529 - 00:35:01.625, Speaker C: Yep. Cool.
00:35:01.737 - 00:35:02.585, Speaker A: Thanks all for joining.
00:35:02.617 - 00:35:06.189, Speaker C: Thank you. See you. See some of you in Bangkok.
00:35:07.169 - 00:35:08.269, Speaker A: Adios.
00:35:09.009 - 00:35:09.940, Speaker C: Bye, John.
