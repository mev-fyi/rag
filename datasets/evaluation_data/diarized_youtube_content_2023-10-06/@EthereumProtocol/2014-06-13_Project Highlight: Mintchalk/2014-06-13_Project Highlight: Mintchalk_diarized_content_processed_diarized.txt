00:00:22.090 - 00:00:28.600, Speaker A: Welcome back to project highlights. Today I'm with James from Minshock. Welcome, James. Do you want to introduce yourself a little bit?
00:00:28.970 - 00:00:42.470, Speaker B: Sure, Stephen. I'm James. I'm a software developer. I live in Palo Alto, California. And I'm very interested in Ethereum distributed applications and more generally in cryptocurrency and blockchain technologies.
00:00:42.630 - 00:00:51.834, Speaker A: Brilliant, brilliant. And your project obviously is mint chalk. Can you describe that a little bit, what it does? And then we'll probably afterwards have a quick look at it.
00:00:52.032 - 00:01:17.334, Speaker B: Yeah. So I'm working on a tool called Mintchalk. It's online@mintchalk.com and it's an online Ethereum contract editor that really emphasizes test driven contract development. And so you can use Minchok to write out your contract code and to test it with sample transactions. So I'll give you a very quick overview of how it works. Okay, let me go ahead and share my screen first.
00:01:17.452 - 00:01:18.440, Speaker A: Sure thing.
00:01:21.930 - 00:01:25.318, Speaker B: So can you see the minshock.com on my screen?
00:01:25.404 - 00:01:28.066, Speaker A: I can now see it, yes. And it's full glory.
00:01:28.258 - 00:02:11.686, Speaker B: Okay, great. So now I have an example name registry contract, and right here in the lower left hand corner we have some test transactions. So we have like the ether, you're sending the address that you're sending it from the data payload, you can set sample contract storage and you can also set assert a return value, that is, you're expecting the contract to return. On the right hand side we have some simulation information. And so you can step through line by line execution or have it automatically play back. And as you step through, you see that the logs are accumulating some debugging information about things like editing contract storage. There's also a storage view.
00:02:11.686 - 00:02:52.190, Speaker B: So for instance, right here there's no storage, but on the next line, which is six, you see that for key key name, we're setting the storage value here. And then right over here we have some fee information. And so this shows as we step through the contract, you see that your available gas is slowly depleting. And then you see it break down in terms of how your ether is being spent on things like storage steps, sending messages. And then we have another tab for compiled contract code. And so this is the compiled bytecode here. And you can go ahead and put it into your Ethereum client and deploy it on the blockchain.
00:02:52.190 - 00:03:32.430, Speaker B: And then for debugging there's assembly code. And sometimes where available, it will also show compiled ll list like code. And then finally there's some settings. So you can set a contract to be read, only read and write so that others can also edit it. And also you can set it to be private so it won't show up in search results. And then you can also toggle the behavior for whether contract storage is maintained in between your test transactions. And so sometimes you want to make it so that the storage gets wiped with each transaction, and sometimes you want to test it so that the contract storage has some statefulness between transactions.
00:03:32.850 - 00:03:36.770, Speaker A: Right. So this is basically GitHub for Ethereum contracts.
00:03:37.590 - 00:03:59.420, Speaker B: Yeah, it's not quite there yet. In fact, it's really just a proof of concept at this stage. But that's generally the idea. The idea is to make it very easy for technical and even non technical users to build a contract, test a contract, and at some point I'd like to make it possible through Mintrock to also deploy and monitor a.
00:04:00.270 - 00:04:22.110, Speaker A: So this is obviously reading from the serpent language. So for the audience who may not be familiar, there's three different contract language at the moment, serpent, mutant and l, respectively, python, go and Lisp. Implementation of the smart contract language. Which one is compatible with your software?
00:04:25.510 - 00:05:12.730, Speaker B: Right now, Minshock supports Serpent code, which is a python like high level language. In the future, I would like to expand that support for other languages. So right now it's really tailored towards Serpent and it also supports the init and code construct. So you can write your contract so that certain code runs when it first initiates and other code runs when other transactions are sent. And then you can go ahead. The assertion values are a recent addition, and that makes it so that it will actually raise an error. If you expect the contract to return, let's say zero as a value and it returns one as a value, then it will raise an error.
00:05:12.730 - 00:05:16.642, Speaker B: So this is really part of the test driven development type of idea.
00:05:16.776 - 00:05:23.540, Speaker A: That's really cool. Do you have any plans to monetize this, or is this an open source free community project?
00:05:24.550 - 00:05:41.818, Speaker B: Yeah, so there's definitely no plans to charge to use Minshock. One thing I will do in the near future is make it so that you can donate, most likely in bitcoin, to the project and also specify which areas of development or which types of features you would like your donation to go towards.
00:05:41.904 - 00:05:43.114, Speaker A: Oh, very cool.
00:05:43.312 - 00:06:09.986, Speaker B: And then in the future we would definitely consider a more formal crowdfunding type of arrangement. But I think that the idea is to provide a free community driven developer tool. So if there is a business model, it's hard to imagine that charging directly for the tool would be the best or the most creative type of business model for us.
00:06:10.088 - 00:06:14.738, Speaker A: That's really cool. So this is you working on it? Do you have a team or is it just your own project?
00:06:14.904 - 00:06:17.458, Speaker B: Yeah, that's a great question. Right now it's actually just me.
00:06:17.544 - 00:06:17.986, Speaker A: Right.
00:06:18.088 - 00:06:55.934, Speaker B: So I've been plugging away on it for the last couple of months, just in my spare time, evenings and weekends, that sort of thing. So right now the primary thing I'm looking for is some collaborators on the project. So I really see Minshock as being a community driven project where people get involved and contribute. There will be some components that get open sourced. The rest of the components, pretty much everything will be exposed as a public API. So if you wanted to, let's say you wanted to create a desktop version of mint chalk or a mobile version of Mint Chalk, it should be able to create a custom client that interacts with the API directly.
00:06:56.062 - 00:07:03.620, Speaker A: That's really cool. Do you have any big features planned for the coming weeks, months, or what can people look forward to?
00:07:04.070 - 00:07:39.742, Speaker B: Yeah. So first, let me just give you a very quick overview of a couple new features that I'm very excited about. Let's see. So find a contract. We have some top contracts here, and in the near future, this search and discovery component of Mintrock is going to be improved, both with more contracts that you can use and clone, and also just better abilities to search through the contract. So, for instance, being able to type in some code and search the contents of contracts to see if any contracts have that code similar to what you would do.
00:07:39.796 - 00:07:40.800, Speaker A: Very cool.
00:07:41.490 - 00:08:14.998, Speaker B: And then one new feature I just added very recently is sometimes there will be a contract on the blockchain with compiled bytecode, and it's hard to debug that contract or look at its source. So you can actually take compiled bytecode and put it in here. So let's see if I can quickly come up with an example here of how this works. So we have some bytecode here. So if we copy this and then go over to this page and search by bytecode, it should find it and then redirect us back to this contract.
00:08:15.174 - 00:08:20.970, Speaker A: Beautiful. That's really useful. That's really cool. Awesome. Where can people learn more about this?
00:08:21.120 - 00:08:56.838, Speaker B: Yeah, so you can go directly to mintchalk.com and sign up. If you want to get in touch, you can send me an email. I'm james@mintchalk.com and yeah, if you are interested in collaborating, if you're a developer, or if you're more interested in product or social media or analytics, whatever it is you're interested in. We can probably find a way for you to contribute and you can expect a lot more functionality and features to arrive in the next month or two. And I'll look forward to interacting with Ethereum developers and helping move contract development forward.
00:08:57.004 - 00:09:02.966, Speaker A: That's awesome. Thank you so much for your time today, James. I'll post the links in the description of the video. Thank you again.
00:09:03.148 - 00:09:04.818, Speaker B: All right, thank you. Cheers. Bye.
