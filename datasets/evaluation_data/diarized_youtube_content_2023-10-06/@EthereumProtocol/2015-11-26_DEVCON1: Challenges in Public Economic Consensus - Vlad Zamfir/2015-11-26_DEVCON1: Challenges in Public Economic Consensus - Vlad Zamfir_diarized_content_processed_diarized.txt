00:00:17.130 - 00:00:52.230, Speaker A: Hi everyone. It's a real honor to be here and a real honor to have that introduction from Vitalik. Thanks, v. So this first talk actually is going to be on there we go on the problem space rather than the solution space. So I'm not going to talk about Casper directly, I'm just going to talk about what is this problem that I'm trying to solve with blockchains and with these consensus protocols. And then after lunch I'm going to give a talk on Casper. So firstly, let's start off with a little bit of background.
00:00:52.230 - 00:02:04.782, Speaker A: So what's a consensus protocol? I'm not going to be too formal, just like pragmatically, consensus protocol is something that computers use to agree on the state of some application. Basically, the important thing is that consensus protocols are useful for making really reliable systems out of unreliable or even untrusted components. So if some nodes go offline, if some nodes behave badly, clients can still access the application. Here's the only drawing in my talk, and this kind of shows you this idea that there's some nodes who keep some state that is a result of applying some changes which are kept in some log, and then there are clients who kind of are able to interface with this state. And if one of these nodes were to go offline or behave badly, the clients wouldn't be disrupted. So usually in traditional consensus protocols we have like a network administrator, and we try to guarantee that the application is available in consistent, so long as not so many nodes go offline or as long as the network isn't partitioned. So let's go through these little concepts.
00:02:04.782 - 00:02:59.510, Speaker A: Consistency means that traditionally means that every node has an identical copy of the state, and availability means that clients are actually able to interface with it and cause changes to it. And then there's famous results. One of the most important results in consensus literature is called the cap theorem, which is that if there's a partition, then a consensus protocol has to choose between being available or being consistent. And you kind of imagine why that is, because if there's a partition and a client is able to affect changes, then different clients could affect changes on either side of the partition, and we would lose consistency because the application state would be different on either side of the partition, or we could not allow them to make changes and remain and have the same application state on either side of the partition. And then the other concept that we brought up was like this idea of faults. We usually break down faults into kind of crash faults and byzantine faults. Crash faults are when nodes go offline and they may come back or they may not ever.
00:02:59.510 - 00:03:47.922, Speaker A: So crash fail basically means that they don't come back online. Crash recover faults, eventually they'll resync. And byzantine faults are kind of just a node that isn't offline, but it behaves badly. Generally, byzantine faults are kind of defined to behave in an arbitrary way, which can mean basically, which you can think of as like the running the wrong code, I. E. The one that the network administrator didn't tell them to run, or that they somehow can be observed to behave wrong, behaving correctly due to perhaps not because of the code they're running, but because of other things. So basically, usually what we talk about, like the security of consensus protocols, in traditional consensus literature, we think about how can we keep this protocol guarantee given some number of faulty nodes.
00:03:47.922 - 00:04:59.500, Speaker A: And we basically say that it's secure up to some given number of faults. And like consistency availability are some examples of properties that we want as protocol to have. And I'm also going to mention sensor persistence, because that's especially relevant in our context. And one more thing before we go on to public consensus, is this idea of eventual consistency, which is kind of a weakening of the idea of consistency, where instead of requiring that every node has exactly the same copy of the state, you require that eventually, with very high probability, they do have exactly the same state. So bitcoin is eventually consistent in that you don't really have a strong guarantee that everyone has the same copy of the state now, but you have a really strong guarantee that they have the same state four, five, six blocks ago. So public consensus is basically consensus protocol without network administrators, where basically anyone can go and become one of those nodes who is part of the consensus process and who can handle client requests and cause changes to the consensus state. Basically because there's no network administrator membership has to be governed by something actually inside the consensus itself.
00:04:59.500 - 00:06:08.434, Speaker A: Basically, we call it a mechanism, kind of parking to game theory. It's like basically like a game whose rules define whether a node is able to participate in affecting the state of the consensus. So there's like a really big problem to this kind of mechanism, which is basically that an adversary could try to game this mechanism to overwhelm the network and to have all or very large majority of the nodes in the network. And that's like the first challenge to public consensus. Basically, how do you prevent, without there being a network administrator, an adversary, from breaking off the water nodes online? And this is kind of the real important innovation of bitcoin, is that it figured out that you can have an economic mechanism in the consensus, which made it expensive for civil to bring on a lot of nodes and to behave badly. So basically, economic consensus protocols try to make it prohibitively expensive for civil to conduct their attack. And currently, economic consensus is the only known solution to public consensus problems.
00:06:08.434 - 00:06:59.890, Speaker A: It's the only way that we know to defend against civil attacks without having a concept of trusted network administrators. So it's in bold because it's important. So just to take bitcoin as an example, what bitcoin does is it makes it computationally expensive to produce changes to the network. And so for Sybil to propose a change, they have to incur this expense. And for civil to take up a majority of the network, they have to incur a majority of the expense. And so this is like the simple way that bitcoin uses economics in order to make civil attacks difficult and inconvenient. And incidentally, this is why blockchains are trusted, because it's expensive and inconvenient to abuse the trust that the blockchain is provided.
00:06:59.890 - 00:07:37.230, Speaker A: So economic consensus basically has to have certain properties. So I'm going to start to give you an idea of how we reason about these things. So, nodes have expenses and revenues. Nodes can't operate at a loss forever. Nodes can change their software for profit. An adversary has to be defined not just as, like, a number of nodes, but someone who has a certain attack budget. And nodes can have their profitability affected by an attacker.
00:07:37.230 - 00:08:46.750, Speaker A: So we kind of need to use economic analysis rather than fault tolerance analysis to analyze public consensus protocols. It's bold because it's important. I'll say this again and again. So because nodes have expenses and they can't operate a loss forever, it's not sufficient to just say whether a node is correct or not, because even a correct node can't stay around forever if it's operating at a loss. So the idea of using fault tolerance analysis, where an adversary controls some of the nodes and all the rest of the nodes are correct, doesn't work because you need to pay attention to whether or not those other nodes are operating at a loss or not, because if they're operating a loss, then that pool of nodes will shrink. So we need to use economic analysis rather than fault tolerance analysis to analyze these networks. So to do economic analysis, the kind of nice, tractable way to do it is to use kind of game theory and economics as the school of thought that involves rational action, which is to say that nodes will change the behavior just to increase their profitability.
00:08:46.750 - 00:09:53.990, Speaker A: Now, the true state of the reality is that nodes that behave in a way that is more rational will end up having higher returns, and nodes behave in a way that's less rational, end up having bigger losses. And so over time, the rational nodes will dominate. But we can reason about it by thinking about nodes changing their strategies to increase their profitability. And basically so they'll respond to all the incentives they have, including the ones that's defined in the protocol and the ones due to the expenditure of an adversary's budget. And it's also not sufficient to regard rational noses byzantine, because we can say a lot more than just that they're behaving badly. We can say in a very particular they're behaving badly in a very particular way. So in the worst case economic analysis, all, or maybe almost all nodes are rational, and coordination costs are zero, which is to say that an adversary doesn't have to deal with a complicated process to contact nodes and to bribe them.
00:09:53.990 - 00:10:43.750, Speaker A: And nodes don't need to incur costs in order to act together to increase their profitability. They could all just upgrade to the software and access the coalition. So in the worst case, economic analysis, attackers can easily bribe nodes, and nodes will form profit maximizing coalitions. So it's bold because it's important. This is the context that we have to reason in when we're reasoning about consensus protocols in a public setting, at least if we want to do a worst case analysis, which I'm going to argue is what we should do, because if we make something that's better in the worst case, it's going to be better in the better case. And here are some additional kind of worst case assumptions that we also make. Sometimes they're maybe a little less important.
00:10:43.750 - 00:11:50.010, Speaker A: Marginal return is equal to marginal cost on a global basis. And nodes have access to basically like derivative markets, so that you can't assume that, oh, they won't attack the network because it'll make the price of the node go down. That's kind of like a rosy assumption, right? They could just hedge their exposure to those price fluctuations. So basically those two things together mean that those two things being that nodes form coalitions and attackers can bribe nodes mean that in order to have security, we needed to make it unprofitable for majority coalitions to undermine protocol guarantees, because they're unprofitable when they undermine the guarantee. An attacker would have to spend a large budget in order to cause them to do that without incurring a loss for an extended period of time. So we need to make it unprofitable for majority coalitions to revert transactions to prevent consensus from occurring or to censor transactions. It's bold because it's important.
00:11:50.010 - 00:12:44.940, Speaker A: So the fundamental challenge then, in public consensus is, again, to protect protocol guarantees against supermajority coalitions, even in the context of bribe attacks. Which means we need to make sure that if a majority coalition gets together and tries to undermine the protocol, then they will do so at their own expense, and they will need to. Therefore, an adversary would need to allocate and spend a large budget. So in bitcoin, like most public consensus protocols out there today, it's rational for any majority coalition to censor transactions. They get an immediate raise. So an adversary actually doesn't need to spend any money to convince them to do this in a rational model, because they just get a raise. In protocol, after the difficulty readjusts, if two thirds of the bitcoin miners censor one third, they get a 50% increase in their block rewards.
00:12:44.940 - 00:13:38.424, Speaker A: A 50% increase in returns for a minor is a huge deal. There's like, selfish mining strategy. So give another example of how a bitcoin node can be byzantine at their profit. Right? Rational miners will engage in selfish mining, at least if they have sufficient mining power for it to be effective. And another thing, because marginal costs is equal to marginal return, in kind of this worst case analysis, you could bribe some miners in order to increase the marginal cost of all other miners. And only the miners that you're bribing will be able to stay online because the other ones will be operating at a loss, unless they're also being bribed by someone else. So these are like examples of this kind of analysis.
00:13:38.424 - 00:14:37.016, Speaker A: This worst case analysis applied to bitcoin. Traditional improve stake has very similar problems. But in addition, they have this nothing at stake problem where an irrational node will move their keys, will move their coins to a new address, and then sell their keys that held their coins at their old address to an adversary who's willing to pay a small amount of money, because that old address doesn't hold any coins anymore, and so it means nothing to them. And so if all or most no is irrational, and they could all coordinate with at low cost, they could all, at the same time, move their coins to new addresses and then sell all of their old keys to an attacker for no money. And then the attacker would control basically the blockchain. And so this is kind of combination of the long range attack and the nothing at stake attack, which I'm going to talk about more in my casper talk. And then also we have this property that majority coalition has an incentive to censor a minority because they just get a raise right away in terms of block rewards and transaction fees.
00:14:37.016 - 00:15:29.120, Speaker A: And we have the same property for double spends where majority can get together and conduct double spends. And actually they just gain from that. So rather than making defending against majority coalitions, these consensus protocols have the property that it is rational for a majority coalition to undermine their properties. So basically, these protocols are not secure under pure economic analysis with these kind of worst case assumptions. And my whole philosophy with Casper, as you'll see later, is to try to have as best of an outlook under this kind of rational model or under economic analysis. So there are kind of two main criticisms that people levy on me when I tell them this. It's not realistic.
00:15:29.120 - 00:16:21.410, Speaker A: This is basically people who have some consensus protocol they like in the cryptocurrency space. And they think that under their assumptions, under the realistic assumptions, their thing is secure, because it's not going to be the case that all the stakers in proof stake pure coin or something, will move their coins to a new address in order to sell all their old coins to an attacker. And there's like coordination costs. There's all sorts of reasons why this might not be realistic. The other criticisms that are often here is it's just impossible to be secure in this context. And that's something that I hear, especially from people who have a lot of familiarity with traditional consensus research, because they have like fault tolerance results that say more than this number of nodes behave badly, then we lose our guarantees. Whereas here we're assuming that actually most nodes will behave badly if they just have an incentive to.
00:16:21.410 - 00:17:17.216, Speaker A: If you've given me these criticisms before, you know who you are. So in response to the it's not realistic criticism, basically there's a couple of things. One of them is this teaches us about kind of edge cases of the economic assumptions that we could be making, and that is really informative. So even if it's not realistic, it teaches us about the protocols that we're analyzing. And I think it kind of is realistic in the long run for basically a couple of reasons. One of them is there might be a well funded adversary who tries to attack one of these systems. I mean, it's kind of a fundamental problem to an extent that because we're relying on economics, someone with enough money can come in and have a large effect on the system.
00:17:17.216 - 00:18:26.244, Speaker A: And so if we can be secure against highly resourced attackers, then if there will be highly resourced attackers, then this model becomes more realistic. And the other thing is that coordination costs are kind of falling over time, both because people kind of get established in industry and figure out who each other are and have conversations, and because we're actually working on technology that reduces coordination costs. So I think even though it might not be realistic today, where bitcoin miners wouldn't dream of polluting to attack bitcoin because they think bitcoin is a good thing, it's something that they want in the long run. I would say that this kind of situation where everyone is just governed by their ability to make profit, becomes kind of more reasonable. And basically, I also think that if we make our analysis, our protocols, better under worst case analysis, they'll be better in general. And so that's another reason why, even though it might not be realistic, this is how we should do analysis. And then basically it's impossible to be secure in this context.
00:18:26.244 - 00:19:03.932, Speaker A: They say, partly they say this because they have results in byzantine fault tolerance literature. But a byzantine fault is very different from an economic fault, right? A byzantine node is just like a node that will do anything. An economic node will only do anything at a price. And it's important to say what that price is. Rational nodes kind of only behave incorrectly if it's in their incentive to. They'll behave badly? Well, if it's in their incentive to. And basically, it's impossible to be secure in this context.
00:19:03.932 - 00:19:50.548, Speaker A: I agree. If the adversary has an unbounded budget, but for any particular budget, you can say whether or not we are secure in that context. So this analysis lets you think about an adversary that has like $100,000 or $10 million or billion dollars. And we can't just say that, oh, because all of the nodes will just behave badly if they're incentivized to, that we won't be secure because they're byzantine. It kind of really depends on what their incentives are. And another reason is another response I have to this criticism is that you don't know this, right? You just think this. This is like an intuition you have, but this is all very new, and we haven't had much time to explore this space.
00:19:50.548 - 00:20:55.956, Speaker A: It might be that you're just wrong and that we can be secure in this context. So public consensus protocols face very different challenges than traditional consensus protocols or than non public protocols. They're kind of hard to reason about because we can't just assume that a certain portion of nodes behave badly. We have to use economics and game theory and this kind of reasoning about the environment in which nodes operate as an economic agent or as an economic entity with expenses and revenues. And there's no way at all to weasel economic analysis into byzantine analysis or into around it by saying, oh, if we do byzantine fault tolerance analysis, then we say, and then we prove that it's incentive compatible. There are separate things and there's no way to put the economic analysis thing into the byzantine analysis box. And when you start to doubt that, just remember nodes of expenses, nodes of revenues.
00:20:55.956 - 00:21:35.790, Speaker A: A correct node doesn't have an infinite budget. If it's operating at a loss, it'll go offline, and therefore you can't just rely on this byzantine analysis. So my basically takeaways for you, if you are designing or reasoning about these consensus protocols, is think about it. In the worst case, assume that there's some supermajority of validators who will maximize their profit working in concert, and assume that an adversary can affect their incentives rather than assuming that the adversary just controls some fixed proportion of their nodes. So that's the end of my talk. Hope you enjoyed it.
