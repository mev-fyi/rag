00:00:52.720 - 00:01:30.044, Speaker A: Okay, cool. Welcome to consensus layer call 116. This is issue eight five two on the PM repo. Just drop the link into the chat. I am remiss and put the agenda up last night before I went to bed. And so it's a pretty light agenda, but if you have items that you were not able to add to the agenda because the agenda did not exist, please, please jump in, drop in chat, or just chime in when we have time. Okay, so we'll take a look at DNaB and then one of our open items that's not currently dynam related is.
00:01:30.044 - 00:01:51.844, Speaker A: I've never said this word out loud. Polisky. The testnet launch. So we have a couple of things on that and somebody can correct me if that was totally wrong. Okay, cool. So there is some space for Devnet updates. I believe there is a Devnet out and there are things running.
00:01:51.844 - 00:01:55.060, Speaker A: Would anybody like to give a current status update?
00:01:55.980 - 00:02:35.510, Speaker B: Sure. So Devnet eight is running. We onboarded all the different clients and currently Aragon and Bezu don't have any validators. Every other client has a validator. We are doing very good. I just made some deposits for Bezu this afternoon and those should arrive soon. Bezu has been confirmed to be able to do block production on kurtosis, and I'm working on Aragon right now trying to figure out what is going on there.
00:02:35.510 - 00:02:46.452, Speaker B: And the other SIA client that is not working right now is prism. So hopefully we hear something from the Prism team on that one.
00:02:46.586 - 00:02:47.984, Speaker A: I can give a quick update.
00:02:48.032 - 00:03:00.510, Speaker C: So we have a fix out there right now. We're planning to merge it today. So yeah, it should be. Hopefully it's working by. By the end of the day.
00:03:04.080 - 00:03:08.908, Speaker A: I'm always just kind of curious what sort of failures we're seeing in this state.
00:03:09.074 - 00:03:37.060, Speaker C: Yeah, definitely. I can give an update. So the prism issue is that we request block by root example that we are missing blocks, like basically short range block. Say today you get an citation. You don't have a block, you basically request a block by root. But we forgot to request blob by root after that. So essentially the processing of the block gets stuck.
00:03:38.620 - 00:04:07.700, Speaker A: I see. So we could potentially catch this upstream in kertosis, and if we do get some Cl networking tests in Hive, could catch it there as well. Yeah. Thanks. Any other questions or comments related to Devnet eight? Are we regularly sending blobs and doing anything other than just steady state.
00:04:09.510 - 00:04:12.740, Speaker D: At the moment? There's some blobs, but it's basically steady state.
00:04:14.470 - 00:04:15.490, Speaker A: Gotcha.
00:04:18.940 - 00:04:25.080, Speaker B: Maybe Marius can begin fuzzing hardcore fuzzing on it now because we are pretty stable.
00:04:33.530 - 00:04:34.280, Speaker D: Cool.
00:04:35.850 - 00:04:58.938, Speaker A: Next, I wanted to go over this dank testing overview that Perry and some others put together. Some of this is pretty standard, but some of this hopefully covers some of the components that we are new. For example, exceptional blob networking cases. Perry, or are you the appropriate person to go over this document?
00:04:59.114 - 00:05:03.750, Speaker D: Yeah, I can go over it. So we've created this testing.
00:05:03.850 - 00:05:05.300, Speaker A: Do you want to share your screen?
00:05:06.390 - 00:05:14.760, Speaker D: Sure I can. Yeah. Thanks. Does it look okay?
00:05:15.290 - 00:05:16.860, Speaker A: Yeah. Thank you.
00:05:17.310 - 00:05:59.586, Speaker D: So we have this testing overview doc, and the main aim of this is to create a list of different ways we're approaching testing, and we want to know if we're missing something early on so that we can allocate resources to get that done ASAP. We do have a couple of needs at the current stage. None of them are urgent, so we will be getting to them over the next couple of weeks. But if someone's free and wants to take it up, please feel free. The testnet verifier, for example, would be used in kertosis and a lot of other places. Essentially something that we can use to verify that the Testnet is healthy. Sig test coordinator is the same one we used for the merge tests.
00:05:59.586 - 00:06:55.750, Speaker D: It just needs an update and some loving care after about a year of not really using it. And the other ones, we do have some sort of testing in the pipeline, so please reach out if you're planning on working on that. But besides that, it's just an overview of different categories of testing. So we start with spec tests, shall we? I think nothing's really new there for EVM related testing. We're banking on hive EVM fuzzing execution specs, and I think Mario and Mario, et cetera, would be kind of points of contact there with sync testing. Since we will be having a couple of new dependencies with the blobs, we wanted to make sure that we can sync test the basic scenario. So regular syncing after blob expiry Windows checkpoint sync syncing when blobs are inside the window, but missing and optimistic sync tests.
00:06:55.750 - 00:07:39.158, Speaker D: We still need to figure out how we do it with the sync target. We might need to wait until we have it on a public testnet before we can get this up and running. And of course, hive also already has a lot of sync related tests built in. Chaos tests are something we have been doing in the past with antithesis. I think Tyler's kind of been the main point of contact. A lot of you might have interacted with on the topic, but Barnabas and I have also been looking at chaos mesh along with kerdosis. So the idea is that you can cause a lot of network level instability, resource level, time related faults, and you should be seeing something on this topic over the next month.
00:07:39.158 - 00:08:39.498, Speaker D: I think we still have really alpha ideas on this, but it seems to have some legs and should be able to help us with testing and public test nests. So we have Devnet Shadowfox and Beaconmetrics geser that would help us with some optimization related topics. We have mev related tests. So Kydosis now supports two modes. First mode is mock meV, and that would use Mario's mock builder that has an implementation of the builder API. So if you are a client team who wants to have a target where you know the API has been implemented, you can use it with mev type mock and knock out a lot of local bugs that might be happening or versioning issues. And ideally once the relay side of things are up and running, you can switch this mev type to full and that would spin up relays, builders, the relay API, endpoint and everything.
00:08:39.498 - 00:09:47.082, Speaker D: So this is literally the MEV workflow that you would see in Mainnet Ethereum, and there you should be able to test the entire integration end to end. I would see that more as making sure that all the different entities work together and we don't see any surprises once we hit the fork on Mainnet. The other thing that the mock mev target supports is invalid payloads, so you can configure when an invalid payload happens. And this is really useful for checking circuit breaker conditions so that if something does go wrong, we need to make sure that nothing happens to Ethereum clients. And yeah, a couple of more tests we have were regression tests. I think historically we've tended to hive for regression tests, but if they're more complicated ones, kertosis also supports a Golang SDK now, so you can orchestrate a more complicated test scenario with kertosis still really alpha. And we're working out some prs here, but potentially something to know about and then anything related to bad blocks, bad blobs.
00:09:47.082 - 00:10:40.478, Speaker D: We have TX fuzz that Marius is working on and should be relatively up to date, as well as some internal fuzzing tools by the security team. And we've listed down a couple of blob specific tests. This is largely based on this really nice pr from I think Peter, where he talks a lot about the blob strategies of the co Ethereum client. And we kind of took everything that he claimed as an issue from there and made it as a topic we need to test in the future. It would be great if client teams can also sort of coordinate and tell us more things that we should be adding here. We're still not necessarily sure which tool these tests would end up on, but it is something we would need to look at. If there's something on this document that you would still like to see, please reach out.
00:10:40.478 - 00:10:54.520, Speaker D: If there's information you want to add there, please reach out. And, yeah, we just wanted to kind of use this as a way to. So that everyone has an idea on what sort of testing is being thought of and if we're missing something that we can catch it early.
00:10:56.730 - 00:11:28.830, Speaker A: Awesome. So, on these blob specific tests, definitely talking with a number of consensus client teams, like the exceptional networking scenarios I think are at top of mind. And so things like staggered Sending. I got blobs, I didn't get blocks until later. I got blocks, I didn't get blobs till later. I got this message, not that message. And I guess network partitions are other types of reorgs where I'm going to have to backfill.
00:11:28.830 - 00:11:52.790, Speaker A: I think that's like top of mind for concern. Seeing Devnet eight run relatively stably is great, but I think it's these exceptional paths that people are pretty worried about. So if you are a consensus layer team and you have been thinking about some of the p to p exceptional cases that you're worried about, I think this list is top of mind to review.
00:11:52.860 - 00:11:53.480, Speaker D: Please.
00:12:02.570 - 00:12:26.720, Speaker A: And yeah, Marius, the bab blob generator, from the transaction gossip standpoint, I think is important. And also insertion into blocks so that we have some failed blocks. But I think there's also some tooling and things we want to think about on just the Cl gossip component of these. Sending one without the other, sending things in very asynchronous, staggered ways.
00:12:30.470 - 00:12:30.834, Speaker E: Yeah.
00:12:30.872 - 00:12:42.840, Speaker D: In case someone already has malicious client ideas that we could use, please let us know. I know there's a couple that we've thought of. I'm just not sure if it's the perfect tool for the job.
00:12:51.630 - 00:13:00.366, Speaker A: Any other questions or comments here? Should people leave comments in the doc, or should they reach out to you directly if they have things that they.
00:13:00.388 - 00:13:01.630, Speaker E: Have questions about or want?
00:13:01.780 - 00:13:23.720, Speaker D: I think to minimize chaos, we've set the permissions that anyone. I can actually just change the permissions such that anyone can comment. Maybe that's easiest, but yeah, if it's something sensitive, then please feel free to reach out to me or potentially anyone from the testing team or security team. And I'm sure we'll be coordinating on pretty much everything.
00:13:37.370 - 00:13:38.098, Speaker E: Poto'S.
00:13:38.114 - 00:13:41.770, Speaker A: Is that an addition or a concern?
00:13:43.470 - 00:13:44.074, Speaker E: I don't know.
00:13:44.112 - 00:13:48.330, Speaker F: So they were asking for malicious clients. Those two would be the first ones I would implement.
00:13:49.390 - 00:13:49.802, Speaker E: Yeah.
00:13:49.856 - 00:13:50.460, Speaker A: Cool.
00:13:59.320 - 00:14:00.164, Speaker E: Okay.
00:14:00.362 - 00:15:36.390, Speaker A: Anything else related to testing Dankoon? Great. Anything else related? Yeah, go on. A quick question on Devnet nine in relation to 4788, would it actually change anything now that the kind of spec on deploy is set? I guess because on Devnets we might still deploy in this kind of like genesis configuration. Although I suppose we could create the genesis, have a significant delay before Dankun and actually do the manual deploy method. So maybe that's worthwhile doing in Devnet nine. Is that the only difference in the specification at that point?
00:15:41.550 - 00:15:42.234, Speaker E: I think so.
00:15:42.272 - 00:15:45.530, Speaker D: I don't think there's anything else that's changed since the last devnet.
00:15:46.130 - 00:15:59.310, Speaker A: Okay, so I guess it would give us peace of mind that this synthetic transaction or address method works, but we would also see that certainly on the next couple of testnets.
00:16:17.150 - 00:16:43.320, Speaker D: Yeah, so we wanted to kind of decouple that a tiny bit and kind of push everyone who thinks they're ready with the builder flow to start using kerdosis today or maybe tomorrow. Because I know there's no open pr to the mock builder, but the idea is that by the time Devnet nine or Devnet eight with the builder workflow is ready, it should be a nothing burger. Like, we should have tested everything locally already.
00:16:45.610 - 00:17:06.160, Speaker A: Yeah, it's almost like Devnet nine, if it even exists, pretty much, is probably short lived. It's probably like testing the fork, testing all the load, testing it, looking like main net, whereas like Devnet eight, we really should be. We're pretty much at spec other than the deploy method and can test everything here.
00:17:08.290 - 00:17:29.880, Speaker D: This is one other kind of open question for the past folks. We always had one long living testnet that we kind of publicized for people who are working on integrations. Example Kintsuki or kiln. Do we need one this time around? Or since we would have Holskey soon or Gurley, should we just walk it?
00:18:26.500 - 00:18:45.110, Speaker A: I do think we need a place that we are telling validators to test their setup, and it could be any of one of those. I think we just need to make that clear at some point. We're at production. What we think is production setups and say, if you do want to test your setup, this is the place.
00:18:47.640 - 00:19:11.650, Speaker D: There's just one other point I want to add we still don't have a final decision on two four or three six. And at least my thought on the topic is that we should experiment with three six on Gurley. If it goes badly then no big deal. But if we try three six on Holski and it goes badly, then we kind of have a lot of coordination for nothing.
00:19:21.890 - 00:19:24.560, Speaker A: Barnabas, all the cleips are in.
00:19:28.130 - 00:19:33.300, Speaker B: Yeah, but we haven't written it down. I guess I will add it to the spec.
00:19:34.550 - 00:19:42.466, Speaker A: Yeah. Okay. If you're pointing to the Cl spec release, that encompasses that, but being explicit is probably better.
00:19:42.648 - 00:19:43.640, Speaker B: Yeah, sure.
00:20:33.020 - 00:20:33.770, Speaker E: Yeah.
00:20:34.460 - 00:21:25.220, Speaker A: What's the reboot cycle on ephemera weekly? Yeah, I mean that honestly is probably the appropriate place to point people to, but we just need to integrate. Once we have specs finalized, integrate builds over there. Yeah, I agree Tim. Why don't we work on like a straw man proposal and that we can debate on the next call and kind of have an agreement by then. Cool. Anything else related to Devnets testing testnets that we want to chat about today?
00:21:28.310 - 00:21:33.014, Speaker B: I think there's another topic about Holosky that we could go through.
00:21:33.212 - 00:21:36.870, Speaker A: Yeah, let me just real quick, anything else on Denab Dankoon?
00:21:42.570 - 00:22:29.480, Speaker G: I have a small proposed change for the builder specs. This is just to change the constant used in defining the blinded blobs bundle struct instead of using the max blobs per block constant, which is like the three. Sorry, I think it's six right now. And it's sort of the networking limit for blobs consensus layer limit. Use the constant that's actually used in the body of a beacon block. And the reason is this struct is actually signed over. So in creating the signing route, the value of this constant actually will change the signature if it changes.
00:22:29.480 - 00:22:49.040, Speaker G: So using the max blob commitments per block constant makes it so across a hard fork like signatures are the same. We don't have to worry about this, that would be the reason to do it. But if you take a look at the link, which I post in the chat, very small change.
00:22:56.300 - 00:23:30.800, Speaker A: Yeah, that seems to make sense. Does anybody have any opposition or want to review and throw a comment up in there? Essentially we have a value to keep the tree the same shape for the consensus, so we might as well use it here. Okay, cool. Yeah, take a look. Stokes. And seems like we can probably merge this pretty quickly.
00:23:39.130 - 00:23:40.150, Speaker E: Thanks, Sean.
00:23:40.810 - 00:23:54.890, Speaker A: Other Danab related items before we talk about Holski. Ok, baremis.
00:23:56.670 - 00:23:57.142, Speaker E: Yep.
00:23:57.206 - 00:24:25.720, Speaker B: So there's a couple of topics regarding Holski. We initially thought that we should be having Chappelle and apocalyn just so it's convenient for us to monitor if anything goes bad. But there was an argument to change it to 256. There's no open pr about this. I'm just curious what the different Cl teams think about it.
00:24:28.250 - 00:24:31.160, Speaker A: What was the opposition of ten?
00:24:33.290 - 00:24:38.890, Speaker B: That it's not power of 8196 slots.
00:24:40.510 - 00:25:13.980, Speaker A: I see. So if we were testing error files and things, it would not have the same kind of conformance that we've sought on main net, right? I'm not sure if Yasuk is here, but I'm sure he would very much appreciate that and anyone else that might be testing error file distribution. And given it's like kind of a one time, one day cost, it seems to make sense to me.
00:25:20.370 - 00:25:27.650, Speaker B: Is there any opposition of doing 256? Then I will get it merged ASAP.
00:25:35.190 - 00:25:39.474, Speaker A: Okay, yeah, sounds good. Next.
00:25:39.592 - 00:26:10.600, Speaker B: The next topic would be ejection balance. So we did some calculation and we derived that we should have 28 ejection balance of 28 instead of 16. So this would lead to a nine day ejection period in case of non finality. Any oppositions against using 28 instead of the 16?
00:26:24.800 - 00:26:26.430, Speaker A: Okay, none for me.
00:26:27.920 - 00:27:34.440, Speaker B: And the last one is regarding genesis state. Currently the uncompressed genesis state is 198 megabytes, and we are aware that this is probably not something that client teams want to include in their binaries. And there's some different ways to get this genesis state. One would be just an s three bucket and have a URL pointing to that s three bucket, and each client would just fetch that genesis state on startup or from checkpoint sync. But we would need to have an agreement regarding whether we would want to offer this genesis state in a compressed or an uncompressed format. So the benefit of having it in a compressed format is I think it reduces the Genesis size to about half of the current size, maybe a bit more than half, but it would require more compute from every client to decompress it.
00:27:38.470 - 00:27:52.280, Speaker H: I personally tested some formats such as Snappy and ZSTD, and indeed it takes how. And my own suggestion would be to use snappy because every client already needs to have a snappy implementation anyway.
00:28:04.240 - 00:28:08.000, Speaker A: Sorry, was Barnabas, were you suggesting using a different compression algorithm?
00:28:10.180 - 00:28:17.810, Speaker B: I'm just curious whether we want to support a compressed or an uncompressed genesis state for checkpoint C.
00:28:24.630 - 00:28:46.570, Speaker A: Yeah, Preston notes that this is just a one time thing as you get your client up and running, and so the compute probably isn't a worry and it's probably easier. Mean, I feel like, the implication is the compute's not a worry, and it's probably easier to reduce the download, especially because SSD snappy is already embedded. But maybe you were implying otherwise.
00:28:47.230 - 00:28:59.710, Speaker B: Okay, no, that's fine. Just then you should make sure that every client is expecting an uncompressed or, sorry, a compressed genesis SSD file.
00:29:01.350 - 00:29:35.660, Speaker I: I don't think Tegu is currently supporting that. But if there is consensus, and everyone and all the clients is already supporting them, we could start thinking about that. Other option would be what about exposing the Genesis state in HTTP Gzip stream so the compression will be on the HTTP side instead of on the file. Makes sense.
00:29:42.220 - 00:29:51.230, Speaker D: Yeah, I think the idea is just that we wanted to use as much as we can purely because Genesis is in like three weeks.
00:30:03.970 - 00:30:13.060, Speaker A: Potez notes that the spec tests are snappy compressed states, so there's some path that Teku is using there.
00:30:16.180 - 00:30:25.350, Speaker I: Okay, so on the SZ file format, it's not just a zip version of this. Okay, we can double check that.
00:30:30.180 - 00:30:34.800, Speaker B: Okay, so the general consensus was that it can be compressed.
00:30:37.060 - 00:31:01.480, Speaker A: Using Zahari. Okay. Are you implying that there might be some tooling and configuration mismatches that the server needs to be aware?
00:31:01.920 - 00:31:16.770, Speaker H: No, what I'm saying is that they're not so kind of readily available tools that you can use on the command line and say in the DevOps scripts. But there are some. I'm mentioning this because it may be not obvious.
00:31:17.460 - 00:31:27.110, Speaker F: Yeah, I second that. I tried to look for command line tools to use snappy directly, and I couldn't find anything. I had to write my own.
00:31:28.440 - 00:31:33.430, Speaker H: I did find some and used them successfully, but still something to be aware of.
00:31:34.920 - 00:31:46.280, Speaker D: Thanks for that. Could you maybe post some links of how you guys came through the problem? Because then we can upstream it to ZcLi, which is typically what we're using to inspect the ssv files.
00:32:01.560 - 00:32:03.610, Speaker A: Okay. Anything else on this one?
00:32:08.430 - 00:32:09.500, Speaker B: That's it.
00:32:11.470 - 00:32:46.150, Speaker A: Thank you, Barnabas. Okay, that is the end of the agenda. As I noted, I put the agenda up pretty late. So are there any other discussion points for today? Okay, excellent. Thank you all for joining. We will talk on Acde next week. Good luck, all the test nets.
00:32:47.050 - 00:32:49.298, Speaker E: Thank you. Bye. Thanks. Bye bye.
00:32:49.314 - 00:32:49.782, Speaker A: Bye, guys.
00:32:49.836 - 00:32:50.114, Speaker B: Bye.
00:32:50.162 - 00:32:50.470, Speaker G: Thanks.
00:32:50.540 - 00:32:51.320, Speaker E: Thank you.
00:32:52.250 - 00:37:22.440, Speaker D: Bye bye. Close.
