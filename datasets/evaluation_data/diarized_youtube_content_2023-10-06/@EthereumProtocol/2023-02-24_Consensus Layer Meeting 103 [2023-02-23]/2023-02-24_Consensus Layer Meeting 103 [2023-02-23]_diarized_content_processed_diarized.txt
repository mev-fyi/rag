00:08:26.730 - 00:12:31.890, Speaker A: It. Welcome to consensus layer call 103. This is issue seven three one. In the pm repo we'll go over Capella four for four, which maybe should be renamed Dankoon. On the agenda then general open discussion if anybody has any points from there on Capella, DevOps folks or otherwise. Do we have any testnet updates to share?
00:12:33.860 - 00:13:17.070, Speaker B: Sure, I can start with saying that we have shut down Devnet seven this morning. We did this as the last bignet updates. Everything seemed quite all right. We managed to get 359,000 changes through, so everything was good. My only concern was that we were not running the final client versions yet. So I would like to run one more large Devnet just after sequoia fork in the beginning of March, just to make sure that everything is still right. But everything seemed okay on Devnet seven.
00:13:17.540 - 00:13:24.880, Speaker A: Cool. So before the fork those were kind of preloaded into the pools and then were any messages dropped.
00:13:25.700 - 00:13:57.740, Speaker B: So the problem was that some clients needed some restart to update their clients after the fork. So it's very hard to know that what was actually dropped before what was not. Because when I restarted I also republished those messages. I see, yeah, that's why a new Devnet might be needed here, and we define versions without requiring any more client updates.
00:14:00.160 - 00:14:01.836, Speaker C: Okay, thank you.
00:14:02.018 - 00:14:21.270, Speaker B: Overall was a very good test, I think because we did catch some issues with the deposit queues and such. So everything looked good. And then the testnet, everything looks quite stable still.
00:14:24.840 - 00:15:05.292, Speaker D: And just following up on that on the Shashang testnet, we started testing relays and testing mev boost. In general. We are good on the happy case. So now all clients support map boost and we're getting blocks built and proposed by all client combinations. The next step is to have it running with the edge cases on withdrawal main net Shadow Fork two and Mainet. Shadow Fork two was launched yesterday, but we haven't set the Capella fork yet. We're mainly waiting for more relays to come online so that we can test circuit breaker conditions as well as some failovers, et cetera.
00:15:05.292 - 00:15:10.530, Speaker D: But we'd most likely be doing this over the next week. We're still waiting for some relays to come online.
00:15:12.820 - 00:16:08.344, Speaker A: Fantastic, thank you, and we'll get into map boost update shortly. Anything else on testnets before we move into some of the hive? Testing progress okay, and Tim, the Sepolia testnet fork announcement went out, right? Correct. And two updates to the blog post that should be merged in the next few minutes are GEF has put out a new recommended release, so V 1.11.2 the one in the blog post now is still fine, but they recommend switching to the new one if you can. And Lighthouse had not put out a release when we published a blog post, but it's been put out yesterday. So V 3.5.0 for Lighthouse is the right version there.
00:16:08.344 - 00:16:38.850, Speaker A: And yeah, the blog post should reflect that in the next hour or so. Great. And if you're listening to this, if you are a validator, this is a closed validator set, so gorely will likely be the place to test your validator stuff. Though infrastructure providers Sepolia is a great place to be testing. Okay, let's move on to Mario. You've been working on some hive mevboost builder API stuff. Can you give us an update on that?
00:16:39.380 - 00:17:57.444, Speaker C: Yes, of course. So I prepared this page with the results. Basically we built a hive builder API simulator. What this contains is a builder mock which basically simulates a working builder API module that uses the execution client to relay build payloads to the consensus client. So yeah, every time the consensus client requests a builder payload, it simply relates the information back to the execution API. With this we have a simulated environment where we can crash or return invalid payloads to the CL on demand. And in this page, this is the result of one simulator where basically we have a working builder up until Capella, and then after Capella we start returning invalid payloads in a way that the blinded payload looks legitimate.
00:17:57.444 - 00:19:01.760, Speaker C: But when the payload isn't blind, you can see that the state route of the execution payload is incorrect. So what happens here is that after the unblinding payload, you have returned a designed beacon block, but this is invalid so it will not be added to the beacon chain. And with this we can start simulating the scenario where slots start getting missed. After this we are basically just trying to test the circuit breaker in this scenario, and you can see all the results of this test here. Basically the case for lighthouse tech compression is that they start correctly circuit breaking the builder after nine missed slots in the current epoch. And this is working correctly. As you can see, there's a maximum of 71% of the slots miss in these scenarios.
00:19:01.760 - 00:20:12.960, Speaker C: But we have for load star and nimbles we have this scenario that they don't stop requesting. So basically under the bitcoin chain circumstances that the builder API starts simply causing missing slots depending on the client combination. We tested two client types per simulation. We have all combinations here for all the client types, and the ones that filled most slots, even with the malfunction builder, are the lighthouse taken prison. But if our nimbles are included in 50% on the evaluator key set, basically the filled slot percentage drops quite a bit. To summarize, the circuit breaking tests are working correctly for lighthouse, Texas Prism, but the other two clients are exhibiting some kind of issues. And yeah, the test is currently irreplaceable using hype.
00:20:12.960 - 00:20:26.440, Speaker C: I include all the steps here to reproduce it if you like. And yeah, we can run it again. If you made any modifications to the circuit breaking logic, we can run any test again that you require.
00:20:27.040 - 00:20:50.800, Speaker A: So, importantly to note, we decided before Bellatrix that the circuit breaking logic would be left client to client on the parameters and how they perform that. And so it's not specified that it is a must and it's not specified exactly how many slots. So my question to Nimbus and Losar, do you implement circuit breaking logic or is this the expected behavior?
00:20:53.240 - 00:21:20.590, Speaker E: We actually implement the circuit breaking logic and we are on the conservative side. In fact, we start with disabled filter and we only enable it when we see some percentage of slots properly being proposed in the network. So we are basically on the conservative side and I can look into the test and see what's going on over there.
00:21:21.360 - 00:21:24.110, Speaker A: Okay, great, thank you. Any information?
00:21:25.680 - 00:21:30.640, Speaker E: This is actually a gap in our implementation. We haven't implemented the latest proposal.
00:21:32.260 - 00:21:57.592, Speaker A: Great. So, Mario? Yeah. Given that this is not specified, you kind of will need to parameterize these tests on the expected slots per. I suppose so nimbus, I wouldn't say is failing. Nimbus is doing as expected, whereas it looks like is. Is not performing as expected. But this is awesome.
00:21:57.592 - 00:22:04.170, Speaker A: Thank you, Mario. Any other questions for Mario or Mario? Did you have something?
00:22:05.180 - 00:22:22.480, Speaker C: No, basically just what the test expects is just finalization, which happens every time. I assume it's because even though we have missed slots, both clients are actually attesting to the available slots. So we are always getting finalization.
00:22:31.470 - 00:22:48.480, Speaker A: Okay. We might consider that being like a recovery of a percentage of slots rather than finalization. Just. I think that'd be more valuable. Red or green, but we can talk outside the call, of course. Thanks.
00:22:50.550 - 00:22:50.962, Speaker E: Okay.
00:22:51.016 - 00:23:31.238, Speaker A: Anything else on testnets or testing for capella, there was a new release. Primarily this deals with for Dancun, but there was an additional test for an edge case found by Paul. I believe most of you all have integrated those tests and are passing, but just that's relevant here. Okay, great. Chris, I believe has joined us from flashbots to talk about boost updates in relation to Capella. Chris, hello.
00:23:31.324 - 00:24:07.726, Speaker F: Great to be back. I wanted to share a quick update where we are with Mapboost implementation on the various parts and the testing. So we are successfully having the whole end to end system running on the Shexiang network. The changes are implemented in Mafboost and in Mafboost itself. They are finalized. There's also a release out there by the way. Let me share a document in the site chat where I put together the current status across all the projects and links the builder specs.
00:24:07.726 - 00:24:58.846, Speaker F: They are merged and updated. Special shout out to Jimmy Chen on the Mavost relay we have a bunch of open prs that are leading one into the other and that we are running on chess young and that is working. I think we are wrapping these up today, tomorrow, and then by early next week we have a final Mapboost relay release. But any other Mapboost relay that builds on our code base can take a look at these prs that are also linked in the documentation and get a pretty good understanding what has changed or even any other really that wants to upgrade and need some pointers. Please take a look. I think this is four prs. They are nicely separated and the last one is to automatically switch between Bellatrix and Capella.
00:24:58.846 - 00:25:32.640, Speaker F: That's the new functionality that we added yesterday. The builder is also updated the validation node. Also prism. We implemented the get withdrawals API in our prism fork because it really needs to know about the withdrawals to validate the builder submissions. It would really be nice to remove our custom fork. We would need this SSE event that notifies about new payloads and payload attributes. There has been a bunch of discussion about that and like a reignited interest.
00:25:32.640 - 00:26:37.170, Speaker F: Let me link the issue here. So if we could standardize this SSE subscription, and I think this is on the agenda later to talk about that, then there would be no need for any custom prism fork and basically any CL client could be used to trigger block building and to drive the relays. And last of all the types we had a special types repository that had all the Bellatrix types and there was a big push to move everything into the attestant types repositories. Also thanksgiving for your support. These types are very well supported and then there is less repositories and duplications to maintain. Yeah next up we are wrapping up all the prs and merging the changes into the main branches. There is no big changes expected anymore and we are going to participate in the Sepolia and Gurley upgrades running the new versions of all the software before and after and during the merge and the upgrade.
00:26:37.170 - 00:26:54.958, Speaker F: Yeah, and special thanks to pari cl people, Jim, Sarah, Alex for supporting this. It turned out to be quite involved actually more than we initially estimated, but I think we are getting everything now wrapped up nicely.
00:26:55.154 - 00:26:55.658, Speaker A: Yeah.
00:26:55.744 - 00:27:00.410, Speaker F: Thanks all. I think that's the overall summary.
00:27:02.190 - 00:27:29.450, Speaker A: Thank you, Chris. It's very exciting to see this on the testnets. Any questions for Chris? Ok, thank you again. So we had Beacon APIs. Up next, Paul from Teku had a number of points. Paul, are you here?
00:27:30.620 - 00:27:35.400, Speaker G: Yeah, Paul is not here, unfortunately, being midnight in his location.
00:27:35.740 - 00:28:07.030, Speaker A: I understand. Does anybody that's keeping an eye on Beacon APIs want to discuss some of these points? So there's the SSC subscriptions, there's another pr open up about an endpoint for expected withdrawals slot, and there's generally the discussion about how to get the Capella spec release out. I believe that Daneb has kind of leaked a lot into this and Daneb's not as stable. So some questions around that.
00:28:11.270 - 00:28:59.334, Speaker G: Yeah, so the substantive issue on the spec is I think he feels blocked in. So Paul has sort of assumed responsibility for curating the Beacon API repo. So with plenty of input from others, but he wants to get a release out of a checkpointed API for capella. But there is not yet a stable capella release of the spec or final release of the spec. So he feels blocked on that. And he's also concerned that stuff from Deneb seems to be being pulled forward into the release and that is also making it complicated to checkpoint a sort of capella Beacon API release. I don't know the rights and wrongs of this, but if anybody's got insight that would be helpful.
00:28:59.334 - 00:29:01.682, Speaker G: Paul is feeling blocked on it.
00:29:01.736 - 00:29:37.680, Speaker A: Right. I can definitely reach out to talk. I think generally when we have like a semi major version on the consensus specs, that certainly means the next fork and we simultaneously keep r and D forks in there. That doesn't mean. That means that anything that's trying to be at parity with 1.3 should respect Capella and doesn't have to respect R and D. As for the server side events and other points here, I am not deep in them, but if we don't have much discussion point here, we'll have to take it to the issues.
00:29:39.170 - 00:30:01.350, Speaker H: Regarding the servers SSE events. Michael has started working on a PR for Lighthouse. He also said that he'll be making pr to the Beacon API steps tomorrow for the SSE event implementation that he has described in the issue linked issue.
00:30:01.420 - 00:30:23.100, Speaker A: Basically. Got it. Would you call getting this SSE done a blocker on releasing a 1.3 of the beacon APIs or can it be layered in after? I just want to understand the dependency here.
00:30:27.710 - 00:30:29.260, Speaker H: Not sure about that.
00:30:33.040 - 00:30:55.530, Speaker A: Okay, I'll circle back with Paul and try to get a lot of this moving and answer some of the unknown questions. Any other discussion points on the Beacon APIs for the call today? Okay, thank you. Any other capella discussion points for today?
00:31:01.360 - 00:31:29.190, Speaker C: Yeah, so I guess one thing to add is that for prism we're currently comparing block value in a way that if today you use Mapboost and we will compare the block value from your local block and the builder block and then choose the one that's the highest value. And I'm wondering if any other clients are doing that and whether we can actually integrate this type of test case into hive, because I think this is a great test.
00:31:32.920 - 00:32:00.172, Speaker A: Taco is doing that now and we also would like to add kind of percentage where user could say not only just favor local if it's better, or you can actually have multiplier say I want to use the builder only if.
00:32:00.226 - 00:32:03.964, Speaker E: Twice the value of the local execute.
00:32:04.012 - 00:32:10.930, Speaker A: But this is not yet implemented. But we do implement the comparison now.
00:32:11.700 - 00:32:26.196, Speaker C: Yeah, that makes sense. I can imagine every client does differently and that's okay. But yeah, sorry, I should have brought this up earlier. So I think this will be a very good hype test case, but then we can follow up offline just to chip in.
00:32:26.218 - 00:32:50.030, Speaker E: Loadstar is also doing it. So you just have to enable a flag minus minus builder selection and say it as max profit. So that way basically it will choose, if the local execution client has more block value then it will choose that, otherwise it will choose the builder. So we can be put on hype test for this.
00:32:50.720 - 00:32:52.332, Speaker A: Nice. Right.
00:32:52.386 - 00:32:59.184, Speaker E: In Nipus we have an interesting implementation. If the engine API supports this, we get the information from there, but if.
00:32:59.222 - 00:33:03.116, Speaker F: It doesn't, we actually leverage our ethereum.
00:33:03.148 - 00:33:07.380, Speaker E: One code base to calculate the broke rewards ourselves.
00:33:11.120 - 00:33:11.870, Speaker A: Nice.
00:33:13.040 - 00:33:16.990, Speaker H: I think Lighthouse also supports this with the latest release now.
00:33:20.390 - 00:33:32.120, Speaker A: Okay, great. So it sounds like there's a bit of in some parameterizations are turning on and off. But I agree this would be a nice case, especially now that we have the mock builder stuff in there.
00:33:33.450 - 00:34:03.620, Speaker C: Yes, of course. So yeah, I actually found those circumstances when I was writing this test. So basically what it does right now is just basically bumps up fakes the block award just to get the ClS to always include the build block. And so what I found is that basically every single client is doing this. So yeah, I think we can definitely add a test to the builder API type suite for this.
00:34:07.110 - 00:35:09.500, Speaker A: Cool, thank you. Okay, anything else on capella? Okay, great. Moving on to the NEB, there was a new release. As I said, this had a test case for capella, but otherwise was stable. This release did include the freeing of the blobs. Thank you very much for Yossik for moving that forward, as well as the networking folks who analyzed and simulated that it has some cryptography updates which on the call on Tuesday, it sounds like they have been integrated into CKZG and I believe since then all of the bindings have been released. I believe there's some review on bindings, so they might be in flux a bit over the next few weeks as they stabilize and get things ready for audit, but they should be usable now.
00:35:09.500 - 00:36:05.060, Speaker A: A couple of other minor updates like the excess data gas field at the end of the execution payload. Thank you proto, for saving our trees and otherwise should be pretty good. Any questions on that release or further comments on that release? Cool. Thank you again, Yasik and everyone else for that review. It was a bit of a monster. It does look like there are a couple of copy pastas and typos that will be integrated and fixed, but I don't think anything breaking at this point. There has been one more networking pr 30 to 42 that did not make it in at adelvice.
00:36:05.060 - 00:37:28.720, Speaker A: I think it was generally agreed by engineering teams that they'd prefer to have no message sent if there's no blob sidecar rather than an empty blob sidecar in these various yas. Docker does mention that the crypto is totally fine in sending these messages and you can evaluate these without any issue. There were some notes that we're not going to be putting these in the database, so why send them on the network? We've gone back and forth on this a little bit. My gut is that engineering teams generally want this in there, and I guess that's my default based off of some conversations. And I'm probably going to keep this moving forward unless there's some strong against in this call. Okay, any comment on this? I think on Tuesday, on the four eight four call, although it might be canceled, I'll kind of knock on doors of people that have potential opinions here and keep it moving. Any other comment here, Tim? Is the 4844 call canceled next week? Yes, I was just typing a message.
00:37:28.720 - 00:37:47.460, Speaker A: We'll cancel next week. We'll have one two weeks from now. And obviously there's the execution layer call next week as well, which is there so we can bring up anything urgent. Great, thank you. Okay, anything else on DNeb?
00:37:51.080 - 00:38:02.580, Speaker C: One more thing in there is a decent API for blob signing. I noticed all the conversations are happening in the issue itself or sorry, it's a pull request.
00:38:02.660 - 00:38:03.016, Speaker A: So yeah.
00:38:03.038 - 00:38:15.980, Speaker C: If anyone has left many feedback comments, please add to those. Ideally we would like to get this merged hopefully by early next week so that we can unbroad client implementation.
00:38:20.980 - 00:39:15.620, Speaker A: Thank you Terrence. Yeah, I took a look at that yesterday. It does seem it's still active, although I can knock on Sean's door if Sean's not here to ask what needs to be done to get this over the edge. Cool. Thank you Terrence. Any other Dineb comments? Discussion points? Great. Any other items to discuss today? Research spec or just open discussions or comments in general? Okay, easy.
00:39:15.620 - 00:39:27.130, Speaker A: Everyone gets an hour back. Thank you everyone for keeping Capella's net moving. Very exciting. Talk to you soon. Bye. Thank you. Thanks.
00:39:27.130 - 00:39:30.520, Speaker A: Bye.
