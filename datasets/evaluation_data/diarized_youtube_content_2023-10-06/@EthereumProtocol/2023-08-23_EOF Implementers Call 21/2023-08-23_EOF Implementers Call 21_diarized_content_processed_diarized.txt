00:00:00.570 - 00:00:09.374, Speaker A: Okay, recording started. Radizia, could you repeat the things you said about ipsyon's progress? Yes.
00:00:09.492 - 00:00:49.180, Speaker B: So we merged the pr regarding the callf stack validation as the first thing and the second thing. We are working on the support of the EOF tests in EVM one and think we have still continuing discussion about disallowing Cola to non returning function. As far as I understood from the recent discussion inside our team, we are leaning towards disallowing this kind of instruction to non returning function.
00:00:50.370 - 00:00:51.120, Speaker A: Okay.
00:00:54.690 - 00:00:55.054, Speaker B: Cool.
00:00:55.092 - 00:00:56.586, Speaker A: That's just the epsilon update.
00:00:56.778 - 00:01:01.360, Speaker C: Is non returning the RETF or return.
00:01:11.840 - 00:01:17.390, Speaker B: As far as I understood, basically.
00:01:18.400 - 00:01:19.150, Speaker A: Okay.
00:01:19.840 - 00:01:34.560, Speaker B: I'm not going to say because I don't know. So I don't want to make some misunderstandings. So basically we should discuss it with andre or pavel, maybe offline.
00:01:35.060 - 00:02:10.700, Speaker A: So yeah, if I had a guess it would be ReDf. I might be wrong, but Redf keeps call pops a message frame. All the other options return, revert, invalid instructions, create those, dispense with a call frame. Red f doesn't pop a call frame, redf pops a function frame, and all those other ones revert, return, stop, pop a message frame. And since EOF is operating within a single message frame, the only one that would make sense to me would be Redf.
00:02:11.760 - 00:02:37.400, Speaker C: Yeah, I mean, it would be a little weird to require subroutines call. But I mean, it's actually kind of an interesting restriction, right? Because you may, I don't know, want to have some kind of thing where you return, sorry, contract return from a subroutine.
00:02:39.660 - 00:03:21.620, Speaker A: That I would consider non returning just reverts a subroutine that does nothing but revert would be a non returning. So you wouldn't call one of those, you would jump f into them. So you wouldn't call f an outline that reverts. You would jump f into an outline that reverts. If it could ret f, then you would call f it. Basically it's a way to introduce dead code, I think, if you can call f into a non reverting instruction, into an on returning instruction.
00:03:22.540 - 00:03:30.010, Speaker C: Yeah, I get it. It kind of seems like the duties of call f and jump off.
00:03:33.260 - 00:03:33.768, Speaker D: Are.
00:03:33.854 - 00:03:35.980, Speaker C: Getting pretty clearly delineated.
00:03:36.880 - 00:03:46.190, Speaker A: Yeah. Jump F requires call f requires a return. Jump F prohibits a return call if requires possible return.
00:03:47.040 - 00:03:55.996, Speaker C: But jump f is very restricted. Right. It can either tail recurse or return or terminate.
00:03:56.188 - 00:04:04.308, Speaker A: Right. Tail recurse or terminate. That's a very concise way to phrase it. Yeah. Okay.
00:04:04.474 - 00:04:04.996, Speaker C: Yeah.
00:04:05.098 - 00:04:29.190, Speaker A: Okay. I didn't have the agenda, so I did it out of order. Are there any clients that have any clients updates? We got the update from Epsilon. Kind of. It's also a spec update. Do we have nethermind or geth or ethereum js on the call? Doesn't look like it. Besu.
00:04:29.190 - 00:05:11.548, Speaker A: I keep working on create three. I keep getting distracted with other things, statuses that just need to write invalidate test cases. Haven't committed it yet to our mega EOF branch, but there's a lot of distractions trying to get Cancun out the door. So that's the update from Beisu. So the next traditional agenda item is compiler updates. Do we have solidity here? We got Viper. Is there a solidity representative? Okay, Charles, you want to go for Viper?
00:05:11.724 - 00:05:29.940, Speaker C: Yeah, no viper updates. I was still talking with Pavel about the stack validation and it sounds like Andre is doing some work on that. But I think at least me and Pavel are pretty low in bandwidth right now, so no material updates.
00:05:30.520 - 00:05:39.000, Speaker A: Okay, testing updates. I guess that's Hugo and Mario.
00:05:41.830 - 00:05:42.610, Speaker E: Yep.
00:05:43.190 - 00:07:11.920, Speaker F: I can go first. So yeah, basically not that many updates, but we are working on a rebase which I will share on the chat. This branch is basically the work that I did like a month ago, but it's being rebased on top of main because there were so many new changes to the execution spec test, which is the Python test repo and Spencer's currently working on fixing all tests and basically just revasing to main so we can have like a solid base where we can start adding additional tests for the latest spec. Andre mentioned that he wanted to start contributing, at least that's what I understood, but he mentioned a couple of comments on our implementation of the create three functions and methods that we have to dynamically generate code. So we're going to first revase and then work on fix those comments. But yeah, mainly I just wanted to share this branch. This is where the EOF work will land on on the next couple of weeks or months to come, and also invite everyone if he wants to take a peek into the code, into the python code and wants to contribute, just please let me know.
00:07:11.920 - 00:07:14.560, Speaker F: I can help out in any way I can.
00:07:19.340 - 00:07:21.850, Speaker A: There's no way to pin just a branch, is there?
00:07:23.180 - 00:07:25.164, Speaker F: There's no way. Sorry, what?
00:07:25.362 - 00:07:32.240, Speaker A: Just looking at GitHub, there's no way to say follow the changes to this branch. You have to follow the changes to the entire repo.
00:07:33.860 - 00:07:39.810, Speaker F: Oh, I see. Okay, I don't think so. I'm not sure.
00:07:40.180 - 00:07:58.210, Speaker A: I'll just follow the whole repo. That's probably one I should pay attention to anyway. Okay, sounds good. Does that update cover anything Hugo might have to add or does Hugo have anything to add?
00:08:01.880 - 00:08:05.110, Speaker G: Sorry, can you hear me?
00:08:05.480 - 00:08:06.820, Speaker A: Yes, we can hear you.
00:08:06.970 - 00:09:34.590, Speaker G: Yeah, my audio was not working before so I didn't hear anything. But from my side there is this pull request that it is changing the existing UF tests in order to change, for example the current fork name to Prague and also the data id from zero three to zero four. This is already ready for review. And also there is another new PR which this PR is changing all the existing tests in order to change the first section output in order to mark it as non returning function. Yeah, this is almost ready. There is only one last change that was added to the spec which disallow using call f for calling a non returning function. So this still needs to be added to these test changes, but yeah, they are almost ready.
00:09:36.960 - 00:09:59.880, Speaker A: Cool, that's good. We're going tests that's really positive. I guess we move on to the community updates. I don't know who maintainer Eth is, but I know who perpat and Zayn are. Per pat and Zayn. Are you both with the sdor two project or are you on separate projects?
00:10:01.180 - 00:10:02.932, Speaker D: No, we're in separate groups.
00:10:02.996 - 00:10:04.010, Speaker A: I work at.
00:10:06.080 - 00:10:19.170, Speaker D: When we kind of maintain a library that's similar to sstore two but a separate version of it. Yeah, no updates on our end. Just like to follow along on this call.
00:10:19.780 - 00:10:29.700, Speaker E: Yeah, just following along. I work for 101. Org, just like in the same on chain groups.
00:10:31.880 - 00:10:42.100, Speaker A: Okay, that's good to hear that you're following. That's a good signal. So this will probably be a quick meeting if maybe one thing.
00:10:42.250 - 00:11:09.596, Speaker D: Go ahead, double click on, I think the last call that I was on in terms of the conversation about exposing an opcode for cross contract UF storage reading, I think where we left that was like splitting that off into its own EIP. And is that still the latest kind of state of the world in terms of the consideration there or is there.
00:11:09.618 - 00:11:32.384, Speaker A: A. I was going to write EIP for that. Well, we've seen the draft for the data copy ops, but I need to write a draft for that. So that is kind of a meta discussion. Let me write that up to myself. Ext data copy. So that is kind of a strategy discussion.
00:11:32.384 - 00:12:12.544, Speaker A: More to say coming up to what we get into Prague. Is it too big to get the stuff into Prague? And putting some of these in separate eips will make it easier to sever out pieces. If the other core divers think it's too much for their clients or to bring them back in or if it's adding load or the risk or whatever it takes to get the elephant through the door into Prague. So I think that's why we're going there. And I think another couple of calls that would be on that 1.1 list, I guess is what it might functionally be called, although it doesn't exist, would be the call fi and jump fi functions. If those put on there, they're severable.
00:12:12.544 - 00:13:08.550, Speaker A: They want to add value. They can be discussed on their own, but it's not essential for the first pass, although it would add value and make things better for the community and those, because those are not. I think we want to have one thing that just does the bare minimum, that does all the breaking that needs to be broken and still has a complete functional system that may not be the most efficient on first pass, but is self contained. I think that is what we need to have is the smallest possible bundle and everything that comes off off of that can be added. Because I think that's always been the strategy with EOF, back when they were discussing it in Bogota and every other place that they've talked about in Amsterdam. The more you split out of it and make it, the hole is more valuable than some of the parts, but at some point you can't have it too big to shift through the door. So it's kind of a tricky process.
00:13:10.120 - 00:13:11.510, Speaker D: Yeah, that makes sense.
00:13:11.900 - 00:13:12.408, Speaker A: Okay.
00:13:12.494 - 00:13:49.010, Speaker D: Yeah, I think we'll continue to follow along there. I think pragmatically what it means for folks like us is if that's not included in the first hard fork supporting UF, I think going the approach that's been talked about on this call of using a pattern of storage contracts, exposing a method that allows you to read their contents is probably the other path there, which I think is definitely workable. It's just a little bit less efficient, more messy, but not a hard breaker or anything like that.
00:13:54.440 - 00:14:29.050, Speaker A: Cool. Any other community questions? Comments, feedback? A couple of things I think that are worth mentioning. Ipsilan is putting together the EVM summit that's going to be, I think, on Tuesday, the week of devconnect out in Turkey. If you go to the evmsummit.org website, I think it's org. Follow my twitter at evm. Evmsummit.org.
00:14:29.050 - 00:14:57.620, Speaker A: Yeah, share the link. They're asking for attendee lists, they're asking for speakers if you're interested. That's something to do that week. It's tagged as advanced, so if you're the type of person that finds this call interesting. It's probably the right place for you. Also, I'm going to be giving a talk at ETh Chicago here in about a month on the Ethereum object format. I should get my slides together in a couple of weeks, and film has comments to add to that.
00:14:57.620 - 00:15:43.120, Speaker A: Try to do my best to represent the project well and what we're trying to accomplish there. Ipslon's done some amazing work on it, and I want to make sure that they get people in North America aware of the stuff that they've been doing. Any other conferences that people are aware of Uf stuff happening in their EVM that they're participating in, they want to promote. All right, any other discussions before we give everyone 35 minutes back? All right. If not, I guess we can all check our emails and our discord threads.
00:15:46.730 - 00:15:47.382, Speaker E: Awesome.
00:15:47.516 - 00:15:48.520, Speaker D: Thanks all.
00:15:49.970 - 00:15:52.780, Speaker E: Thank you. Thank you.
