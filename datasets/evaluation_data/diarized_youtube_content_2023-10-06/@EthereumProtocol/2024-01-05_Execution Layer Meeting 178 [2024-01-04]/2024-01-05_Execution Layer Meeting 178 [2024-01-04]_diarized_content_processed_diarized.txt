00:01:30.080 - 00:05:39.718, Speaker A: It cool. Thanks a lot. Hey everyone, welcome to all court devs 178 1st all court devs of 2024. Happy New Year's everybody. Hope you guys had a good holidays. First thing on the agenda is Denkun updates. I know that this wasn't listed on the agenda, but I just want to check if anything happened over the holidays.
00:05:39.718 - 00:05:47.950, Speaker A: I know Devnet twelve has been up. Is there anything around that if you want to talk about before we talk about timelines.
00:05:52.910 - 00:06:03.120, Speaker B: Don'T think we tried any specific tests over holidays. We were just keeping notes up and if a client team has something updated, we just updated them.
00:06:07.010 - 00:06:19.300, Speaker A: Right on. Okay with that? Marius wants an update from Prism. Marius, what exactly are you looking for here?
00:06:21.030 - 00:07:07.774, Speaker C: I don't know. Last time I don't think anyone from Prism was there and since Prism was the one client, I was kind of delaying stuff. It would be really nice to know how they are progressing and if they think everything is fine now or if they need more time. Yeah, I can give a brief update next week we'll do a Gordon release, but this will be a pre release, meaning that we wouldn't recommend you using this Gordon release for Mainnet. And separately we'll also have a main net release. So right now we're decoupled because right now we wouldn't recommend our latest blog.
00:07:07.822 - 00:07:08.450, Speaker D: Feature.
00:07:10.230 - 00:07:42.720, Speaker C: To be part of the main. So basically I think we're okay with the Gordy timeline, but I think we're too early to setting the Sapodia and the host key one. Having them one week apart is kind of crazy because it's definitely harder to change later if something gordy goes wrong because then you have to do a very immediate client release to change the data again. So we would not recommend setting the husky and the supported for data right now.
00:07:45.490 - 00:08:08.600, Speaker A: Okay, yeah, that kind of leads us into the next topic point, but I just want to confirm with everyone that we are good with the girly date that we agreed on in the last all core devs, which is Jan 17, 632 utc, meaning clients would want to release sometime next week. Is that still what we're expecting to do?
00:08:14.570 - 00:08:17.080, Speaker C: I think guest is Fine with it.
00:08:18.430 - 00:08:20.140, Speaker E: Lordstra is good with it.
00:08:21.550 - 00:08:39.630, Speaker A: So for Lighthouse we've got all the nav changes done and merged. I'm not positive we'll be able to release next week because we've also got a lot of networking changes that we're still testing, but if not I think we could do a pre release similar to Prism.
00:08:43.670 - 00:08:44.462, Speaker E: For Teco.
00:08:44.526 - 00:09:00.800, Speaker C: We are planning to release Monday or Tuesday next week Besu is here. We're going to be releasing end of this week. We just had to put out the fork ashes.
00:09:06.500 - 00:09:50.000, Speaker A: Okay, great. Yeah, it sounds like we're all in agreement on that fork time. I don't have the epoch right in front of me, but it's out there. So on to the next two testnets. Napoleon Heleshki we last meeting discussed some days and there was some agreement, but now it sounds like there's a little bit less confidence in those specific days. Tim went ahead and came up with epochs on those days to try and agree on, but it sounds like we're not 100% confident on what days we want to do those forks are. So maybe we start with sepolia.
00:09:50.000 - 00:10:17.880, Speaker A: Sepolia is scheduled for January 30. That's almost two weeks after the girly hard fork. Is that the day that we still feel okay with? I mean, obviously we can't foresee the future. If something actually falls apart on Gurley, then we'll have to rethink that. But in the optimistic case, is that a date that we can just go ahead and lock in POTUS?
00:10:19.420 - 00:11:08.090, Speaker F: Yeah, so I feel that it'll be much safer since there seems to be sort of like an interest in shipping the actual main net as soon as possible. It seems to me that it'll be healthier if we don't schedule the next testnets and we schedule them very soon after Gurley if everything goes fine, but sort of like having the back of our head if everything goes fine, it's going to be around these dates. But try not to commit to dates now because things might not really go fine with girly and going back from that is a problem. Like adding a new release with the right epoch with no changes is easy, but removing a release and fixing bugs is a problem and it takes much longer than a couple of.
00:11:11.340 - 00:11:25.870, Speaker A: I mean, my understanding is that you probably wouldn't release until the week before, but how do other client teams feel about that timeline or what POTUS is saying?
00:11:26.420 - 00:12:34.530, Speaker C: So I generally feel pretty good about the timeline. I don't really get what this would bring us to not say right now that this is going to be the date. Clients can put out the release shortly before that anyway. So the only thing that this will and if something goes wrong, then we have to break anyway. We have to push the break, pull the brake anyway. So if this late in the process something goes very wrong, then we will have to delay anyway. So I don't see a point in not setting the dates now and just have every client release on their schedule however they like.
00:12:41.530 - 00:12:44.780, Speaker A: Good gender. You're unmuted. Did you have something you want to say?
00:12:47.650 - 00:12:52.800, Speaker G: No, I basically am muted through my hardware mic.
00:12:53.490 - 00:13:31.050, Speaker A: Okay, I see. All good. Yeah. POTUS is saying if we set the dates now and something goes wrong, we will definitely need to re release on the rush. Yeah, I think that Perry is right here. Marius is saying that we don't necessarily have to release. Like, we're not going to release next week with all of the forks, the Testnet fork schedules, I think the idea is that we would release them as we gain confidence in the rollout.
00:13:31.050 - 00:14:29.770, Speaker A: Is that not something that clients feel like they're able to do? So if we do move forward with Jan. 17 Gurley and the Jan. 30 sepolia, that means we'd have about one week ish to see if the rollout in Gurley is working as expected. And if it is, we can go ahead and do that release seven to five days before the sepolia fork and allow the people at that time to upgrade their clients. Do clients agree or disagree with that timeline? I think the timeline makes sense. And we can say, like, January 30 is like a tentative date and then see how girly goes. Then we're setting the date BOtus.
00:14:30.750 - 00:15:08.060, Speaker F: So these numbers are, we release girly, we test for a week or so, then we make a release, I guess, without soaking, just adding the fork for Sepolia. And that gives teams to update their Sepolia validators for just one week. So it seems to me that this schedule will just remove the soaking of clients, which presumably is fine if everything goes perfect, because there presumably won't be changes. But if there's any changes, then teams are not going to be able to soak them.
00:15:12.250 - 00:15:17.138, Speaker B: Well, I guess if there's changes, we wouldn't fork on that date, right, because nothing has been released.
00:15:17.314 - 00:15:41.790, Speaker F: Oh, there's regular changes that don't need to be urgent or anything. But the thing is that whatever we release for Gurley, we are going to have to take the same release candidate for sympolia and not make a new release, cut their new release from the developed branch or main branch or whatever branch you're using that continue to advance because those changes are not going to be tested.
00:15:45.270 - 00:15:54.946, Speaker B: I'd make the case that we have to test those changes in the subsequent testnet. Otherwise we make a release for Mainnet and the main net changes haven't been tested anywhere.
00:15:55.138 - 00:16:00.490, Speaker F: And that's my point, that we're going to be shipping something without soaking.
00:16:01.390 - 00:16:09.258, Speaker B: But isn't that always the issue. I mean, every fork we have shipped with changes that were tested at the.
00:16:09.264 - 00:16:18.320, Speaker F: Last, that has never been an issue. We always have had at least one week to soak before cutting a release for the next testnet or the next main net.
00:16:19.730 - 00:16:21.278, Speaker A: Is the proposal not to have a.
00:16:21.284 - 00:16:22.430, Speaker G: Week to soak though?
00:16:22.580 - 00:16:33.570, Speaker A: Like I'm saying, you don't need to create your release until around the 24 January. That would be what? Week after the 17th hard fork.
00:16:33.910 - 00:16:59.500, Speaker F: Right? But if you cut after one week from Gurley, you cut your release candidate then. So that means on the 24th to actually release it, you need to have it soak in a few days. And that means that there's no time to actually test to deploy it. For people that are actually running validators, I think the two weeks is just too close. That's what I'm pointing out.
00:17:00.290 - 00:17:06.480, Speaker C: So you mean we would need three weeks between each test net basically, in order to have your process?
00:17:06.930 - 00:17:18.900, Speaker F: Well, I don't really mind the last two Holeski and sorry, Holesky and Sepolia, but I think we do need three weeks after Gurley because Gurley might go.
00:17:26.360 - 00:17:45.230, Speaker C: Don'T like we always only had two weeks between testnets and then three weeks, three or four weeks to Mainet. So I don't know. I see your point. I'm not sure if I agree though.
00:17:49.280 - 00:18:08.708, Speaker A: It feels a little bit like most client teams seem okay with two weeks. I know prism feels kind of strongly about going with something slightly longer. I don't know how strongly people have on their feelings for this.
00:18:08.794 - 00:18:29.450, Speaker F: We don't really feel very strongly about this. If Gurley goes fine, we're fine with releasing the same, deploying the same release. This is not something that I'm willing to die on a hill. And also, I'm not really sure if prism feels like this. I myself am not comfortable with the death with its dates that were set.
00:18:32.160 - 00:18:34.460, Speaker A: Understood, Oscar.
00:18:36.080 - 00:19:38.528, Speaker B: Yeah, I just wanted to briefly say that this seems like basically a more general question that we should figure out for future folks as well. Maybe for the future we could try and kind of have a more specified rollout plan for folks that we kind of discuss and agree upon, not right before we have a folk coming up, because I think now the unfortunate situation is that we basically have to make that decision today. But I think I would agree with Marius in principle that we should be hesitant with kind of keep extending the times between kind of first testnet fork and Mainet launch, just because usually that's in a way like a dead time anyway, in terms of feature work because we already have everything ready to go, and we can't really work on the next work either yet. I think if there's a desire to have a more kind of drawn out process, that's something we should probably then discuss when we have time and not right before.
00:19:38.614 - 00:20:40.710, Speaker A: Hard fork. Yeah, it would be nice to come up with a consistent fork pattern. I think also part of it is we wanted to ship this in the fall of last year, so now we're really trying to make it happen. And I think we're picking a little bit more aggressive timelines than had we had this conversation been happening in October, I think we would have been a little bit more okay with stretching things out, but we want to get this fork shipped. Perry in the chat has proposed or kind of repopposed what we accept what we had already talked about, which is the 17 January fork early 30 January optimistically fork or. Sorry, is that still, you're saying release in the week of the 29th with the expectation of optimistic target 30th?
00:20:41.210 - 00:21:14.250, Speaker B: Yeah, but I think that's way too close. So if we're going with that timeline, we would go with the assumption that sepolia is being delayed by at least a week or two. Because if we are shipping Gully on the 17th and we need at least a week to analyze stuff, then 25th is the earliest where we can say, okay, gully has gone well or has not gone well. Let's assume it did go well. Then we can commit to making a release on the week of the 29th, which means we've already passed the 30th deadline for Sephora.
00:21:14.350 - 00:22:11.814, Speaker C: So what I would really like to prevent is for us to have to go to another all cordef to confirm the dates. It's usually on a Thursday, Thursday now. And so afterwards, we cannot cut a release because it's like the weekend already. So the next possible day to cut the release, like the next Monday. So what I would prefer is if we would say, okay, these are the dates. If everything goes right, everyone will cut a release in the week on the all quadf call on the 25th and not have this. And then we can discuss on our codef if actually something really bad came up, and then we can still stop it.
00:22:11.814 - 00:22:28.140, Speaker C: But I would hate to go onto another all cordef call just to say, okay, Sepolia is go now. And now we have another two weeks to wait until we can actually do support.
00:22:30.670 - 00:22:48.690, Speaker B: Yeah, but coming to POTUS's point, that would basically mean from the 17th till, let's say, even if we do stuff over the weekend, the 21st. That gives us about a four to five day timeline with the weekend where we have to find everything that's realistically wrong with Gurley.
00:22:50.550 - 00:23:00.306, Speaker C: No, we have all the time to discuss and to find stuff. Like we can always just on the.
00:23:00.328 - 00:23:05.678, Speaker B: Monday, people will start making releases, right? Yeah, but yeah. Okay, I guess we have to switch to async.
00:23:05.694 - 00:23:40.260, Speaker C: Then we can always say, okay, this is just like, we will deprecate this release, or we will just say, we will remove the fork date or push the fork date or whatever. If this is before mainet release, I would also be more hesitant to say, okay, we can just move the main net release in the last two days before it ships. But for testnets, I don't think it's too bad.
00:23:42.230 - 00:23:43.250, Speaker A: Guillaume?
00:23:44.870 - 00:24:18.560, Speaker D: Yeah. Would it be possible to just agree on two sets of dates, those that happen if everything goes well and if something goes wrong, you immediately make the release. Like, you don't have to go through ACD, you just say something happened on Gurley. So the protocol is we move to the other set of dates. You just make the new release and that's it. No need to discuss dates again on ACD and do the delay that Marius was talking about.
00:24:19.650 - 00:24:53.580, Speaker A: I just think that if something goes wrong, it's hard to be able to just unilaterally say, this is the next date that we should. Like, we're probably just going to have to discuss. And depending on what we're wrong, as I was saying, we need to figure out how much time it's going to take to fix how much time we need to continue reviewing. So I think coming up with an optimistic date for assuming things continue to go correctly, we ship the forks on these dates is like what we're trying to do. And if something goes wrong, then I kind of think we have to revisit the conversation a bit.
00:24:54.750 - 00:25:17.826, Speaker D: Yeah, I meant more like if something goes wrong. Yeah, there's a couple bug fixes that are quite light. But yeah, of course, if there's a major bug that gets uncovered and all bets are off of. Yeah, I mean, okay. Just trying to avoid the bike shedding a bit. It's fine by me. Honestly, I don't care if it's an extra week.
00:25:17.826 - 00:25:29.400, Speaker D: If we just push, we just add an extra week between Gurley and the next testnet. But yeah, if it can save some discussion, and I would rather do this.
00:25:34.650 - 00:26:22.514, Speaker A: Yeah, it's sounding a little bit like client teams are wavering a bit on the Jan. 30 date. Am I understanding this correctly or are people kind of also open now to maybe having that one week later or five ish days later. So that would either be late in that week of the 29th, February 1 maybe, or early in the week of February 5. So February 6 seven. That would be for the sepolia. Or do we just want to move with the January 30? Marius was January 30.
00:26:22.514 - 00:26:23.160, Speaker A: Okay.
00:26:30.110 - 00:26:41.520, Speaker C: Is fine with 30th too. We're good to go. I'm a little more compelled by the side of our conversation that's happening in the chat, but we can maybe put an agenda item on for that.
00:26:45.730 - 00:27:02.820, Speaker A: Yeah, Dan brought it up. It's related to the blob expiration. So do we want to wait long enough to observe blobs expiring and the implications of that on a testnet before working the next test net?
00:27:04.970 - 00:27:12.360, Speaker C: Can I add a little something to the question, Matt? I think apps and l two s might want to go through that as well.
00:27:15.050 - 00:28:11.820, Speaker A: Yeah. Does any client team feel strongly that we need to see this happen before moving to the next test. Net? My two cent is that we're going to see it happen on the test nets before main net, and that's really the big thing that we want to see. But I'm curious your other perspectives. Yeah, I kind of also think it's not really worth waiting between each test net that long, but it might be justification for waiting longer between the last testnet and Mainnet. Okay, so you're saying you might want to see on Hilleschi the blobs expire before moving to Mainnet or any testnet? Definitely any testnet. Yeah, I'm not sure it would really make a difference with Holshki, but between testnets, I mean.
00:28:13.790 - 00:28:31.790, Speaker F: Most probably Sepolia, right? I think most teams have deployed either gurley or sepolia. Not that much on Holesky. And since sepolia is supposed to be the stable one, I'd expect that we ship mainet after we tested availability and expiry on Sepolia.
00:28:35.260 - 00:29:16.600, Speaker A: Yeah, that makes sense to me. Let's keep that in mind when we're thinking about the main net fork date. But we're not out of the woods yet. Tim posed an epoch for the sepolia fork. We kind of agreed January 30, but grudgingly. Can we just get a thumbs up on the epoch that was in the PR 132608? That's okay for everyone. That's 22 51 UTC on the 30 thumbs from Besu.
00:29:16.600 - 00:30:17.414, Speaker A: And guess I'll assume the silence is agreement from the other clients. Okay, sepolia, we have some agreement on January 30 on that epoch Heleshki, the proposed date is the 7 February. I'm guessing people want to push that back one week. Is anyone in favor of doing that or would rather keep with the more aggressive timeline of giving one week between Sepoli and Heleski Rath is okay with a week. One week is good. Fantastic. All right, well let's stick with the 7 February then.
00:30:17.414 - 00:31:48.734, Speaker A: The epoch that Tim proposed is 29,006 nine six. That's 1134 utc on Feb 7th. Any last comments on the fork scheduling or should we just put that into a box and put a bow on it and ship the releases? Great. That's awesome. Any last Dinkun questions or comments before we open up the next fork for discussion? Cool. So the next agenda item is the Prague Electra hard fork Petra. And in the agenda we have a link to the Magicians forum, which is a bunch of proposals that people would like to see in the next execution layer.
00:31:48.734 - 00:32:39.540, Speaker A: Hard fork. I don't know how you guys would like to go through this, but I think it might be useful to answer the question of what is our vision for the next hard fork in the first place before we just rattle off ten or 20 e proposals. So I know that there's been a lot of discussion about should we do vertical in this next fork or should we have a smaller fork with some of these eips that people are really requesting right now. Do any client teams have a perspective on a smaller EVM fork this year, or do teams feel that we should really lean into Verkel and make that the main priority and not ship another fork until vertical is ready?
00:32:44.470 - 00:32:45.220, Speaker C: So.
00:32:48.170 - 00:32:49.720, Speaker A: Maria, sorry, go ahead.
00:32:50.490 - 00:34:44.410, Speaker C: My personal opinion is that we should focus on vertical and not ship anything between in between, because just the scheduling and the discussions will take up so much time because everyone like if we start opening this kind of worms then everyone will start lobbying and pushing for the uaps to go through? Two small caveats with this one is that I would like to get a more concrete overview of the progress of Verkel and the second thing that I think we should also take into consideration is what's happening on the consensus layer. I went through all the eips that were proposed and there are some that I would like to see on the execution layer eventually, but there are none that I would say this is high priority, super urgent, but I think there might be some on the consensus layer. So I think it's important for the consensus layer folks to discuss whether it would make sense for them to have a hard fork with those changes and if that can be done without involvement of the EL, or whether it needs involvement of the EL, and we would need to do a joint hard fork anyway, and then I would be okay with having a smaller hard fork. So highest priority is worker. Definitely, and we should push for it, but with these two caveats.
00:34:47.230 - 00:34:50.350, Speaker A: Understood. Thanks, Martis. Lucas.
00:34:51.170 - 00:35:30.090, Speaker H: So my experience tells me that state redesigns are extremely hard and they take extremely long time. So, for example, GeF delivering flat layout took a few years. We are working on our flat layout for over a year, and it will take at least another half a year to deliver it, or at least few months to deliver it properly. So while I think Veracle is great and it's doing great progress, I think if we just focus on Veracle.
00:35:32.270 - 00:35:32.586, Speaker A: It.
00:35:32.608 - 00:36:13.400, Speaker H: Would take at least a year for an ex hard fork, or even more. So my proposition would be to potentially focus on some smaller hard work while each team would commit to vertical and assign appropriate resources, appropriate workforce, brain power, however you want to call it to this topic. So we can have similar situations as with withdrawals and 4844, that we are working in the background on it and working really in a concrete, deliberate way.
00:36:14.730 - 00:36:15.094, Speaker A: Yeah.
00:36:15.132 - 00:36:31.120, Speaker H: So that, in my opinion, minimizes risk of just stalling for over a year while having the greatest potential to move vertical as quick as possible.
00:36:33.970 - 00:37:11.500, Speaker A: Thanks, Lucas. Yeah. One of my concerns, and I'm curious here, how teams view this, is that it's going to be difficult to have a small fork and keep a lot of team bandwidth towards vertical. That's my guess, as people are commenting. I would like to hear your perspectives on that, but I also just wanted to mention that this isn't necessarily something we're going to decide today. We're really just starting the discussion, so don't feel like we're going to make the decision now. Guillaume, you had your hand up.
00:37:13.630 - 00:37:39.646, Speaker D: Yeah. So trying to unpack stuff that has been said. So, yes, updates. There are updates being provided. There's vocal info if you want to know a bit about the current state. And also, Josh Rudolph is making regular updates on Twitter. So if you want something to help you decide, there are some resources.
00:37:39.646 - 00:38:06.054, Speaker D: And also we agreed with Tim that we will make another, like the third, I think, by now presentation about the current state of Verco. But that will be either end of January or start of February. I don't remember. So there's that. But when it comes to the question proper. Yeah. I also think there's no such thing as a small fork.
00:38:06.054 - 00:38:54.060, Speaker D: I mean, if we could, for example, commit to only do the BLS precompile, for example. I think that'd be fine because this has already been considered for a fork in the past, so it should be ready enough. But otherwise, don't fool yourself. That will not be a small fork. And we still have the problem that all that data needs to be translated, so the more we wait, the worse it gets. So I would caution against scheduling a nullif work in between. There needs to be a lot of attention, and that also addresses what Wukesh has said.
00:38:54.060 - 00:39:28.914, Speaker D: Yes, there's a lot of clients have to redesign their database. I mean, guest is still working on some backend things that will affect the way Verco is implemented. So it is a pretty heavy fork. It needs a lot of attention from client teams. This being said, I think every client team except maybe rest, and even them, I think are looking into it. So everybody's looking into it, everybody's working on it. So I wouldn't expect any surprises in this respect.
00:39:28.914 - 00:39:50.960, Speaker D: I think everybody knows what's coming. Everybody realizes that this is the thing they need to work on. So I don't really have any worries about the timeline proper. Assuming everybody takes the fork seriously and starts investing more resources in, it.
00:39:53.810 - 00:39:56.430, Speaker A: Makes sense. Thanks, Thomas.
00:39:59.650 - 00:41:19.530, Speaker E: That being ambitious at this stage is better, and being cautious later might be fine, which means take a big lead vertical for the next fork, but also be ambitious more and include things that are very important for staking. This will be important for the network. There are things like 7251 just will be very much welcome and support all our efforts for handling restaking, liquid staking, and any regulatory issues around operators for validators. Also, I would say pick one model for the account abstraction support. So go for all of this and take advantage of the team's capacity in the year, where we have to show that we handle our biggest challenges. If vehicles end up showing to the teams that there's more and more difficulties piling up by March, then maybe we'll just ask this question once again and say, okay, percolate drops, but then we stay with a pretty good set of other eips that we'll include.
00:41:22.670 - 00:42:08.390, Speaker A: Yeah, I guess one concern of having the ability to constantly open this debate, you can never permanently close it. But if this is really an 18 to 24 month project that we're committing ourselves because this is something that we believe is important to do for the network, if we just have that in the back of our mind, we could just take a break and spend 612 months shipping another fork. I think it'll be difficult to motivate client teams to motivate people to stay focused on this for the longer haul. So I would be worried about opening these debates back up, but I think coming to a conclusive decision is going to be challenging. Anskar.
00:42:10.590 - 00:43:17.930, Speaker B: Yeah, I just wanted to say in my mind, basically, given that Verkel is an e outside only change, it makes a lot of sense to at least kind of basically, when we think about the next set of CL changes, that we don't commit to combining both of them and basically having that be the next fork. And I think in the chat also, a lot of people have the same sentiment. So that we basically at least have, we plan them as independent folks and if Verco goes really quick, then we just combine them and ship them at the same time. But if Verco like six months from now, Virco is still nowhere near ready, then we could just start to roll out the next Cl site fork. And then as part of that, I personally, but I'm not sure if that is majority kind of consensus. I personally would very strongly also want us to not pre commit to Verkel being definitely the next thing on the Yale side. If we basically think of it like a separate CL and a separate El Fork, then I think we should at least be open that say, in six months, if Verco still looks very far out, that we say, okay, hey, this set of CL features, we actually add a few small El site features and make it a proper hard fork.
00:43:17.930 - 00:43:24.850, Speaker B: But I think basically thinking of them as like a separate El and CL workflow for the next fork. I think that's very productive.
00:43:26.550 - 00:44:02.590, Speaker A: Yeah, I think that's pretty fair. I do think that we need to have confidence, at least today, not necessarily today, but we need to make a decision and move towards that. And if in six months we have to revisit it, we have to revisit it. But I don't think that we should sit in some halfway, halfway out points and say this is kind of what we're working on, but maybe we'll do something different, like to ship a vertical, we're going to have to have a lot of focus and attention from client teams, which isn't going to come unless we say this is what we're doing. Andrew?
00:44:04.290 - 00:45:10.370, Speaker G: Yeah. I'd like to say that I totally support Oracle and I think for Aragon it's the easiest because we've already transitioned to the flat data model. But I kind of think because some other clients might like what Lucas said, that some other clients might need time to redesign their data models. And I'm thinking that smaller, more isolated fork before Verco makes sense tactically, because if you consider things like EOF or the BLS precompile, it might be kind of a complicated change, let's say uf, but it is an isolated change. So you need maybe one or two people looking deeply into it, but it doesn't touch the entire code base, right. So you can only have a couple of people implementing, say, uf, provided that the spec is ready. So, yeah, to my mind, UF or BLS pre compile makes sense as a tactical fork.
00:45:12.630 - 00:45:27.400, Speaker A: So just to confirm your perspective is it's better to ship the smaller fork and kind of in parallel, also have the isolated, the people working on vertical continue and ramp up on.
00:45:28.730 - 00:46:04.020, Speaker G: Absolutely. We should like, vertical should be our main focus. And if we decide that Verco will be in the next fork, I'm fine with like for Aragon, it's relatively easy. But I'm just saying, if we decide that Virko will happen slightly later, then maybe the client teams can allocate one or two people to work on more isolated things. But virtual should be the main focus.
00:46:08.090 - 00:46:10.760, Speaker A: Got it. Guillaume, you're back up.
00:46:12.490 - 00:46:52.162, Speaker D: Yeah, I mostly agree with what Andrew and others before him said. I'm perfectly fine with giving priority to vertical, and if it turns out it takes longer than expected, we come up with a temporary. Not temporary, but a smaller fork in between. That's totally fine. One thing I wanted to add, because I think there might be a misunderstanding. Vertical is on the scale of the merge, if not worse in terms of complexity. So, yeah, you cannot really ship anything at the same time on the El side.
00:46:52.162 - 00:47:41.986, Speaker D: But I had the discussion with Tim in Istanbul, and we were talking about pushing das at the same time. So when I said the same time, it's actually the same release, but not necessarily activated at the same time. So it's not like we're holding everything back for vertical, we're only holding El back for other El changes back for vertical. So that's the first point. When it comes to mean I supported EOF, I mean, I still support it. I think it does change a lot more than Andrew seems to think all over the code base. And it does increase the complexity of vertical itself.
00:47:41.986 - 00:48:02.090, Speaker D: Unless we could somehow convert every single contract out there to eoF, then it actually makes things simpler. But I would not consider know small enough to make it into a fork that goes before Herco.
00:48:06.990 - 00:48:10.622, Speaker A: Got it. POTUS. Yeah.
00:48:10.676 - 00:49:10.430, Speaker F: I just wanted to reply to Marius and Nansgard that made some points about decoupling Cl forks from Yelp forks. While this sounds like interesting in theory, in practice it's kind of useless, at least in this case. From the list of changes that you see for the coming fork, there's only one minor change that is in the original list. In the first list that is purely Cl, which is removing an attestation index, a committee index from the attestation, and all the other changes, even those that look like they will be only Cl, like increasing the Max EB they depend on other changes that are from the L. So I think pure cl forks are not going to happen. At least I don't envision them happening, not this year, not the next year. We don't have enough proposals that are purely cl, so we will always need changes from the El in whatever Cl fork we propose.
00:49:10.430 - 00:49:51.770, Speaker F: Having said so, I do agree with Andrew that since this Ananskar mentioned, this is purely El. So if we are committing to virtual, in 18 months we're going to have Cl teams that can work in parallel in whatever changes are majorly cl. And there are some changes that require small components from the El. It wouldn't be nice to, since vertical would just delay those El changes, it wouldn't be nice to delay those forks that would be mainly Cl. So I think we can ship smallish forks on the El side that are mainly Cl in the timeline that you're working on.
00:49:51.840 - 00:49:52.650, Speaker B: Berkeley.
00:49:56.520 - 00:50:26.184, Speaker A: Yeah, that seems reasonable. Just very quickly, did any elt disagree with that sentiment from POTUS, or does that seem fair? What's the one liner? Yeah, I mean, the das is a good example. The El is checking the blob gas limit, but adding that to a fork, a bit more than one line. Straightforward.
00:50:26.312 - 00:50:28.940, Speaker F: It's one trigger will exit.
00:50:30.340 - 00:50:34.610, Speaker A: That's not really a simple change for the execution layer, though.
00:50:45.240 - 00:51:23.250, Speaker B: Yeah, I mean, I just wanted to plus one list and say that I think basically, clearly it doesn't make sense to have the distinction of literally CL site only and yield site only changes. Like, we probably still have a client release on the other side as well, but that basically we use it as a shelling fence, right? So the problem is always with forks. Once we open them up at all, then everyone wants to get in. So if we have the shelling fence of saying, hey, this is a cl fork, so you can only get in if your EIP is like 90% on the Cl side and you need like one constant change or one small thing here, then at least we can talk about it. But basically, I think just having the shelling fence of a clear theme of a book is super, super important.
00:51:38.100 - 00:51:40.080, Speaker A: Oops. Tomas.
00:51:42.600 - 00:52:58.590, Speaker E: I agree with the insights that those changes related to staking the ones that have CL will be driven very much by the project management structure on the consensus calls. While the execution layer clients may have the Veracle as the main driver, because on the testing side, Veracle trees will be the ones that will cause the most of the headache to testers on the execution layer. For the consensus layer, testing everything that is like execution layer, triggerable exits might be feeling slightly complex to implement on the execution layer, but I don't think it will create the same level of interdependencies between the changes that are in the execution layer. You'll test them very much independently and then there'll be a bit more burden on testing of consensus layer. That's a different thing if you want to do both Verco trees and say account abstraction support. But I think that you should still opt for both, because if Verco trees indeed ends up being an 18 months project, I think the account abstraction will be something that will be happily shaped within the next six to twelve months.
00:53:04.190 - 00:53:06.494, Speaker A: Rodick hi guys.
00:53:06.612 - 00:54:09.170, Speaker C: So basically I can confirm what Andrew said, that from the Epsilon team, the EOF specification is ready, and we've been discussing a lot with the clients and language teams. So basically I would support the EOF to be introduced or start being introducing already as soon as possible. Of course, workers are very important, but not sure if we can say that the specification of the workers are as ready as EOF already is. And I wouldn't say that EOF is such a big change, especially for the execution client. And I think it's a matter of just understanding what really is happening there. And it's very separated, as also Andrew mentioned. So I would support EIF and of course in the meantime, just finishing specification of the verticals.
00:54:11.270 - 00:54:14.020, Speaker D: What specifications are not ready in vertical? Exactly.
00:54:19.430 - 00:54:26.678, Speaker C: I'm just asking if we can say that specification of the vertical trees are ready.
00:54:26.844 - 00:54:28.710, Speaker A: So this is just a question.
00:54:28.780 - 00:54:34.582, Speaker C: Not sure if it can be say about this. It can be say for verticals, but.
00:54:34.636 - 00:54:37.734, Speaker B: For sure for Uf it is mean.
00:54:37.772 - 00:55:05.860, Speaker D: I would say they are as ready as they are for like when it will land into the backlog of every team out there, it will be up for discussions again. So can you say any of them already? No, but I don't see the vertical specification being less ready than okay, if you say so.
00:55:06.870 - 00:55:10.660, Speaker C: As I said, that's a question for you.
00:55:11.110 - 00:55:41.760, Speaker A: Let's not get too sidetracked down the readiness road. I do want to kind of bring it back to that original question. I've sort of been keeping track of what client teams have been saying, but I wanted to hear, I don't know if I've specifically heard base or eth js, do you guys have a preference on what to move forward with again, like, we're not making this decision now. It's just trying to collect this information so we can mull over it for the next couple of weeks.
00:55:43.570 - 00:56:21.994, Speaker C: Yeah, let me weigh in on base here right now. So we're making progress on both fronts. We're looking at what comes next with the whole driver and passengers plan. And I think we agree that EOF is definitely not a passenger. However, we've got a lot of progress on EOF for quite some time, actually. So, I mean, I would be very comfortable personally with EOF being the driver for the next one as we work on Verkel because we are making a ton of progress on vertical as well. And I don't see any of our team's remaining capacity being diminished by having to support EOF during the 18 months that we're forecasting out.
00:56:21.994 - 00:56:36.974, Speaker C: Required for virtual. Not a strong opinion and a bit of a sunk cost fallacy at work, I'll admit. But that really seems for us kind of the ideal way to go. Yeah.
00:56:37.092 - 00:56:38.458, Speaker A: From my side, I understood.
00:56:38.554 - 00:56:40.270, Speaker C: Focus on focal.
00:56:42.230 - 00:57:17.994, Speaker A: Okay, got it. Great. So most teams seem to be leaning towards Verkel right now. Rest seems to be the most feature leaning team. Nethermind and Besu also leaning a little bit with features, but pretty much everyone is okay with making Verkel the next big priority. Again, I don't think it's the call to make this decision. I think we're going to spend another couple calls debating it.
00:57:17.994 - 00:57:46.280, Speaker A: But I did want to give some time to people who wanted to talk about their proposals for Prague if it's not vertical, because I know some people have joined the call to discuss that. And just to add color to the whole discussion of, like, what are we missing out if we choose to go vertical for the next 18 months? But before we move over for that, is there any last comments or questions with respect to vertical as the main priority in the next work?
00:57:51.450 - 00:58:00.150, Speaker H: Like I said, in my opinion, it's a very risky move to just focus on Verkel. But that's my understanding.
00:58:06.820 - 00:58:30.030, Speaker A: Giorgio. Sorry, 1 second. I. Georgius, did I say that Reth was signaling support? I thought I said that you guys were leaning towards a feature fork. Maybe I misunderstood but wanted to clarify for avoidance of confusion. Yeah. Okay, thanks.
00:58:30.030 - 00:58:33.390, Speaker A: Yeah, I'm sorry.
00:58:34.800 - 00:58:47.200, Speaker D: Yeah, sorry for jumping out of order. No, I just wanted to understand why Wukesh was saying it's risky. Like long I can understand, but what do you mean by risky?
00:58:47.780 - 00:59:34.930, Speaker H: Okay, so in order to just touching the state takes tremendous amount of work and testing every time. I've seen that happening. And while Verker is already progressing, I still think that maybe for example, go implementation is closer to being production ready. But for example, never mind implementation, while quite feature rich at the moment, it's very unoptimized. And also, for example, depends on the transition for us, depends on delivering flat layout properly, which we haven't delivered yet. So there are multiple risks there for. Never mind.
00:59:36.980 - 00:59:38.050, Speaker D: Okay, thanks.
00:59:38.580 - 00:59:56.040, Speaker H: And optimization, for example, for the maths, we have some problem there. For example, if we use the existing libraries which are fast and optimized.
00:59:57.980 - 00:59:58.440, Speaker A: We.
00:59:58.510 - 01:00:26.690, Speaker H: Have a problem of interoperability. The cost because actually accumulates quite a lot. And if we tried to implement it in native c sharp, we were having issues with getting good performance. So there's a question what to do. Unanswered question and what to do with that. I'm not sure if Bezu for example, doesn't have similar problem. Would be great to hear about.
01:00:36.240 - 01:00:48.690, Speaker I: Kareem is leading and only dust are working pretty heavily on the Verkel implementation, but we're outside of the JVM for vertical. We're using JNI and the rust libraries for that.
01:00:50.900 - 01:00:54.880, Speaker H: Okay, so hall tree will be outside of JVM.
01:00:57.060 - 01:01:06.396, Speaker I: No, just like the IPA multipoint and any of the cryptographic implementations are NJ.
01:01:06.428 - 01:01:11.750, Speaker H: And okay, and you don't have any problems for performance with that.
01:01:12.860 - 01:01:29.708, Speaker I: We've yet to fully join the testnet right now, so we'll have better numbers on it as we get join the testnet. But I don't think we've noticed like show stopping performance issues yet.
01:01:29.874 - 01:01:48.480, Speaker H: Testnet is already quite small, so at least I think it is. I'm not sure if it will scale to mainnet levels without proper mainnet testing, like importing the whole mainnet into Veracle. It's really hard to say if the performance is there, in my opinion.
01:01:50.260 - 01:02:02.630, Speaker I: Yeah, that's fair. Have we have other clients? Has Geff tried to import main net into the vertical implementation and go?
01:02:06.280 - 01:02:29.170, Speaker D: Yes, sorry if the question was geth. Yes, we tried, and I'm currently working on the shadow fork to make it more reproducible more frequently. So yeah, the performance of Go is fine, but yeah, other clients will discover that when they try to do the same thing.
01:02:34.200 - 01:03:00.300, Speaker H: So my point is there are still a lot of unknowns. So if we commit to something, we might just not deliver it for a long time here. And I would still commit to it. But probably, like with 4844, we committed to smaller fork first and doing this in the background for some time. So that's still my recommendation.
01:03:01.760 - 01:03:09.980, Speaker A: Okay. You're still recommending feature fork with high prioritization of vertical in parallel?
01:03:10.340 - 01:03:25.030, Speaker H: Yes, that's my recommendation because Veracle will take a long time either way. So if we don't prioritize vertical, we won't deliver it in the next Ford, for example. But if we do and it takes a long time, we don't deliver anything for that time, which is also bad.
01:03:27.000 - 01:03:27.940, Speaker A: Guillaume.
01:03:29.240 - 01:03:56.812, Speaker D: Yeah. Just to give a tiny bit of pushback, I totally understand the position of ucash. It's reasonable. This being said, a lot of the development that has been done in Geth is being readapted to other clients. So for example, Besu has been catching up really fast. Ethereum Js has been catching up really fast. Nimbus, I'm not so sure, but it seems to me that they are catching up fast.
01:03:56.812 - 01:04:29.480, Speaker D: So it's not going to be as slow as it has been for guests because a lot of the questions have been solved by us. It will take time for sure. I'm still not convinced it will take 18 months, but otherwise, yeah, Wukash is right. If it does take a lot of time, there should be members of each team working on the feature fork.
01:04:37.290 - 01:05:07.550, Speaker A: I think we can probably close the discussion on vertical for this call. We have so many more calls and time to discuss it and I think it will come up again in the next call in the next couple of weeks, if you guys could spend a little bit of time discussing internally. Okay, Jamie, did you have something you want to say? Great.
01:05:07.700 - 01:05:07.930, Speaker B: Yeah.
01:05:07.940 - 01:05:17.490, Speaker A: If you guys could spend some time discussing internally what your team's stance on Verkel is, I think that's going to be useful for the next couple of calls.
01:05:18.470 - 01:06:15.800, Speaker F: POTus, yeah, not related to Verkel, but something that came up last fork was that when the Ethereum magicians post went up, BLS Brinkle file was something that everyone said, I want this in this fork. I want this in this fork. And then it never happened. And when we asked on ACD channel why this didn't happen, the reply was essentially, well, just inertia. And I feel if you go and read that because it's not always the same set of crowd that write on the magician forum than what come here and voice their opinion on these meetings. If you go and read this chat now on the Ethereum magician forums, you're going to see that 7002 is the most voted one and where people in the community are asking for it. So I wouldn't want to have the same situation as with the BLS pre compile in the nest fork because of the same reason.
01:06:17.290 - 01:07:18.170, Speaker A: Understood. I mean, that's a good segue. We've got some time left. I think we should give people the platform to discuss the proposals for Prague if those people happen to be here, and hopefully try to convey how much demand there is for these things from the community. So I think maybe the best way to do it is just to go down the list of proposals in these magicians thread, and if there's a person on the call who feels that they can spend 30 seconds to two minutes summarizing and trying to create some momentum behind it, that could be useful. So the first one is 25 37. Is anyone on the call here who wants to try to motivate a 25 37 eep in the next feature fork?
01:07:20.590 - 01:07:59.050, Speaker D: Yeah, I can. I think this is pretty well accepted, I think if everyone here, so it's adding BLS arithmetic. This is a curve we use on the continuous layer, so it unlocks a lot of staking use cases inside the evm, making staking pools more trustless. It also helps a lot with zero knowledge cryptography. So if any of these snark applications want to use this curve in the evm, it unlocks them. And then also that directly extends to ZK rollups as well. So yeah, this one should definitely go in, in my opinion, and would unlock many use cases.
01:08:01.230 - 01:08:24.180, Speaker A: In the interest of time. I think we can just go to the next ones. Unless someone has a very critical or strong feeling against the proposal. It might be useful for authors or people interested in the EIP going in to spend some time addressing that feedback. So any strong feelings against one quick thing?
01:08:25.510 - 01:09:12.030, Speaker C: I think this proposes eight new pre compiles, or six new pre compiles, and most of them are not really useful for staking related stuff. I think only the verification. Basically the verification is useful for that, but most of the others are useful for l two stuff, as far as I understood it. But it would be really nice if we could get a document outlying the need for every one of those. Why should we not just add one? But why should we add like all of this five or eight or whatever precofers?
01:09:15.910 - 01:09:27.550, Speaker A: Sure. Next on the list is EOF. Anyone on the call want to make the case for EOF?
01:09:37.160 - 01:09:52.030, Speaker C: I'd like to just reiterate from basic perspective that we're looking at this, that it's very close to done and we're here to ship it and a lot of work spent on it, but I don't have any additional community perspective on the interest or need for it that I can bring.
01:09:53.840 - 01:09:55.340, Speaker A: Thanks. Anskar.
01:09:56.320 - 01:10:52.130, Speaker B: Yeah, I just wanted to briefly say I don't myself have a super strong opinion, but I did talk in Istanbul, for example, with some members of the solidity team, and they were expressing pretty strong opinions in favor of UF. I'm not sure if that was representative of the entire team, but I think there's a little bit of risk that UF might be another one of these features. Say, if we think back to 30 74 from two years ago, where I think a lot of the community was really excited about it, but because that excitement didn't quite get to ACD, it never moved forward. And I think UF might be in a somewhat similar spot where there's a lot of more application side teams and people that actually, or like, say, in this case on the language, on the programming language side that would actually really like it. And those are just the kind of people that don't usually come to ACD. So maybe there could be some value in outreach to try and get them on the call.
01:10:54.500 - 01:11:33.740, Speaker A: Yeah, that's fair. I also talked with the solidity team in Istanbul and can echo that sentiment. Does anyone have any very strong negative reaction to EOF or feel like EOF is not something that we should be putting into a fork? Okay, so next up is 7002. The alleged number one voted EIP for the next hard fork. Does anybody want to motivate a case for shipping 7002? Tomas?
01:11:35.460 - 01:12:40.390, Speaker E: Yeah, without 7002, we cannot really claim fully noncustodial staking in Ethereum, which means that any professional node operators have to use a bit of a trick to support withdrawals. Which means that you always have the risk of griefing at the capital provider who is staking, not being able to withdraw without call elaboration with the node operator. So the solution nowadays, maybe it's not really bad in the sense that the pre signed transactions are offered, but 7002 is the way to go. And not only this, it also opens a lot of potential very important features related to safer restaking, like more aligned, better represented, actual security on the network versus security borrowed, and a few other things. Super important.
01:12:43.400 - 01:13:21.168, Speaker A: Yeah, that's a nice summary of it. Any strong pieces of feedback or negative thoughts on 7002? Okay, next on the list is vertical, but I think we've already discussed vertical quite a bit, so let's just go to the next one. This is a CL only 175 49 move. Committee index outside attestation. Yeah. POTUS, do you want to motivate it?
01:13:21.334 - 01:13:42.650, Speaker F: That should definitely be in. It's a very simple change. We can do it on the CL side. It's trivial to implement and it'll save a lot of aggregation time. It can help on trustless bridges or ZK bridges. It's something that it should definitely be in whatever fork we do next.
01:13:43.660 - 01:13:48.988, Speaker A: And is this a CL only change or is there an El don't we a Cl thing?
01:13:49.074 - 01:14:09.040, Speaker F: It's just a bug in the design. We include a number in an attestation that since it's signed, it prevents to aggregate different attestations with different of these numbers, which is the committee index of the attestor. This removes this committee index outside of the attestation so that you can actually aggregate different committees signatures.
01:14:10.660 - 01:14:28.360, Speaker A: Got it? Yeah. We'll leave that one to be more deeply discussed on the CL call. So next is EIP 30 74. Is anyone on the call who wants to motivate a case for 30 74 and a fork?
01:14:33.180 - 01:15:46.480, Speaker C: Um, I can talk about it. So basically 30 74 introduces two opcodes. One will authorize the smart contract to act on the behalf of the externally owned account. The second will call other contracts from this invoker contract and it will be like a delegate call, but for the EOA that authorized the invoker smart contract to do his bidding. The idea behind this EIP is to improve the user experience. So for example, patching transaction would become way easier to do even for eoas. It will also pave the way for EIP 5003, which will basically allow us to convert EOA accounts into smart contract, enabling more account abstraction adoption.
01:15:46.480 - 01:16:12.730, Speaker C: And also it will remove some of the bad design decisions, like an ERC 20 for example. Approve and then the action. So yeah, that's basically my summary of it.
01:16:14.140 - 01:16:19.356, Speaker A: Thanks, Ahmed Tomas, you have your hand up. Yeah.
01:16:19.378 - 01:17:26.370, Speaker E: I feel that some enshrined support for the account abstraction or more smart accounts, whether it's 30 74 or something much simpler like 75, five, three, or anything else really that's proposed, one of those would be good to have as a target to deliver. And at the same time maybe one thing that we didn't discuss, but solutions like these plus vertical trees are still very much bound to ethereum l one being seen mostly as a high transaction, throughput, user oriented layer and not the scaling versus celtics. So the question is, what if all those changes we want to show that we jump in on l one, what should be the change direction? But still I think that having all the implementations of the clients for those changes in the direction and research will be extremely important, even at some point only be bubbled up to l two s.
01:17:30.420 - 01:17:31.388, Speaker A: Thanks Thomas.
01:17:31.484 - 01:18:12.450, Speaker G: Andrew yeah, I think there was an objection from our team against 30 74 because it opens a security kind of realms. There is a change in security assumptions and user signs, something that is lasting forever and can do arbitrary things that the user is not aware he's signing for. So permissions are not revocable, things like that. I can look deeper into it, and I haven't looked into the EIP for a while, but I think there are big security questions for it, against it.
01:18:14.580 - 01:18:16.400, Speaker A: Thanks Andrew. Oscar.
01:18:18.420 - 01:19:03.136, Speaker B: Yeah, so of course it was one of the mean, I do, I'm happy that it has a second kind of wing behind it now, but I have some consensus that we want to voice specifically kind of in the context of layer one. I think with kind of now L2 is being much more mature. It seems if there is demand for something like this, there would be a much better candidate to try out in the L2 context first via the IP process. Specifically, 30 74 was always more designed as a stop gap in between kind of eos that we have today and the glorious actual kind of structure future with smart contact wallets that we'll hopefully get to in the future. And I think we are much closer to that future now. So there's less reason for that. And I would caution that.
01:19:03.136 - 01:19:56.144, Speaker B: I think a lot of people that are now supporting the EIP are somewhat unaware of the complexities that it brings with it. So specifically, the EIP requires this kind of concept of invokers, and all the functionality would have to be standardized by invoker. So there have to be like one standard invoker for bundling, one standard invoker for, I don't know, time invalidated transactions, all these kind of things. And that will take a long time to get these standards right. And while in principle they could be forward compatible with things like smart contract wallets and everything, that would require a very strong big change to the way smart contract wallets work. So basically, instead of having their own bundle functionality, they would have to go through the invoker for bundling and everything. So I think basically before we were to even consider this for Mainnet, we should basically get all the takes.
01:19:56.144 - 01:20:22.200, Speaker B: We should basically have commitments from smart contract wallet implementers that they would actually also want to use this invoker design. We would have to actually see invoker implementations already proposed as ercs. We would have to see tooling support for, say, ethersjs and these people specifically for some of these invokers. I think. Otherwise, it's just basically really naive because we would ship this feature and then not have anything that could actually use it for the next two years afterwards.
01:20:25.020 - 01:20:51.050, Speaker A: Thanks, Hanskar. Let's go ahead and move on to the next, because we're only halfway through. So the next proposed one is 30 68 pre compile for BN. Two, five, six hash to curve algorithms. Is anyone here who wants to support that's going once.
01:20:53.020 - 01:20:53.880, Speaker D: Twice.
01:20:56.320 - 01:21:07.500, Speaker A: All right, onto the next one. EIP 6110 supply validator deposits on chain. Anyone want to motivate the case for that EIP?
01:21:15.640 - 01:21:22.040, Speaker C: This is Justin here for Besu. I like the EIP. Cleans up a little bit of tech debt. And again, we have an implementation.
01:21:26.880 - 01:21:33.790, Speaker A: Thanks, Justin. Yeah, it is mostly a cleip. Marth, did you want to say something?
01:21:34.820 - 01:22:49.190, Speaker C: I can kind of motivate it right now. Basically, cls need to listen to El receipts for finding our true depositors. And this means we need to keep all of the receipts for these events for the deposit contract. What this would enable us to do would be to also lessen or lower the requirements for keeping historical receipts. So stuff like 4444 is kind of dependent on this, because otherwise we cannot really, with good conscience, remove the receipts from post merge ethereum. We can only remove the receipt from Genesis up to the start of the beacon chain, otherwise we would lose those deposit events. So, yeah, I'm in favor of this.
01:22:50.920 - 01:22:53.320, Speaker A: Thanks, Marius. POTUS.
01:22:55.340 - 01:22:59.530, Speaker F: I think Dapline has his hand up, and he's most probably going to say the same as me.
01:23:00.140 - 01:23:04.236, Speaker A: Okay, Dapline. Yeah, one of the biggest points is.
01:23:04.258 - 01:23:07.212, Speaker B: That we will get rid of very.
01:23:07.266 - 01:23:09.404, Speaker C: Bad security assumptions that we had, because.
01:23:09.522 - 01:23:25.120, Speaker B: This is basically a breach now. An honest online node would not be convinced to process fake deposits, even if there is an adversarial majority. And that's kind of one of the last remaining bad things that we have pre merge.
01:23:26.840 - 01:23:30.580, Speaker A: Yep, agreed. POTUS.
01:23:31.400 - 01:23:50.120, Speaker F: Yeah, just a quick comment. Is that the fork itself? So the change is not so bad, but the fork itself is a problem with this EIP. So it would depend a lot on what kind of fork we're looking at. If we're doing this on the verge, I wouldn't add this EIP at the same fork.
01:23:54.850 - 01:24:06.670, Speaker A: Got it. Next EAp on the list is 60 913 set code instruction. Is anyone here who wants to make a case for that EIP?
01:24:13.610 - 01:24:37.040, Speaker C: I can make a case against it. I don't think it's feasible. Having like changing the code of a smart contract is not great. We have one way to do it with create two and self destruct. This is not.
01:24:39.650 - 01:24:40.590, Speaker B: Anymore.
01:24:43.490 - 01:25:10.274, Speaker C: But yeah, so this has a lot of applications that would need to be tested. For example, setting code within a contract that just got set code. So doing set code in a loop or doing code recursively, it doesn't play well with basically anything. It doesn't play well with worker, it doesn't play well with a lot of other proposals.
01:25:10.322 - 01:25:20.970, Speaker A: So I don't think it's a good. Thanks Marius. We are running a little low on time, so if we can keep the comments pretty short.
01:25:21.040 - 01:25:26.320, Speaker E: Tomas, as I can do is against set code.
01:25:29.330 - 01:25:43.540, Speaker A: Thanks. Next up is increase code size limit to two, to the 16. Anyone want to make a quick argument for or against.
01:25:47.110 - 01:25:53.320, Speaker E: Tomas properly? It shouldn't be done without vertical trees done first.
01:25:56.410 - 01:26:15.790, Speaker A: That's currently my understanding. All right, next up, this is the only one. We're going to skip it. Next up after that is 7377 migration transaction. Is there anyone here who wants to make a case for that EIP?
01:26:21.350 - 01:26:55.610, Speaker I: Sure, Gary. Since I put that on a thread, I think that 7377 is a pretty elegant way to migrate eoas on the roadmap for account abstraction. It seems easy to reason about. It doesn't have a lot of baggage. It doesn't seem to have the same kind of security risks that Auth and auth code have. It seems to me like it's a light touch fix for getting towards account abstraction.
01:26:59.890 - 01:27:45.530, Speaker A: Thanks for that, Gary. Sorry, I'm just starting to go a little bit faster so we could get to it. It's just about three or four more, and we wanted to give some time for onscar to mention something about the rips. So next after that is EIP 44 is bound historical data. This is something that's been brought up again and again. I just want to see if anybody wants to make a quick motivating case for making that a priority soon. All right, there's some people in the chat saying it's useful, but we can discuss it more offline.
01:27:45.530 - 01:28:02.190, Speaker A: We've got a handful of things happening from the CL GitHub issue that are pretty related to execution layer. Is anyone wanting to make a case for ssdification of the transactions, withdrawals and receipts?
01:28:07.990 - 01:28:32.780, Speaker C: I think ssdification will add a lot of computational overhead because you need to do a lot of hashes for transactions right now. You only need to do one to get the transaction hash with SSC, you need, I don't know, like a lot. And so every transaction processing will get a lot worse. So I don't think it's very realistic right now.
01:28:36.770 - 01:28:58.980, Speaker A: Got it. Okay, that's from the list. We've completed it. Dragon. All right, that's the list. There's a couple other ones, two more that I wanted to bring up. Does anyone.
01:28:58.980 - 01:29:02.866, Speaker A: Sorry, can you hear me now? Yeah, go ahead. Yeah, I can hear you.
01:29:02.888 - 01:29:20.490, Speaker G: Yeah, I just wanted to give a little bit more support for UF in general. It's not just one, it's a group of aips. From static jobs to limited fabs to a lot of small things that improve EVF in good way. So yeah, I just wanted to say.
01:29:20.560 - 01:29:32.670, Speaker A: Few words on that, nothing more. Thanks for that. Does anyone want to make a motivating case for 7212, the r one pre compile on Mainet?
01:29:42.750 - 01:30:07.220, Speaker I: I haven't looked super closely into this, but it seems like that's going to enable a lot of account abstraction, use cases secure on claves, mobile devices, things like that. It seems like for a user experience that's something that we want to get out there. As a pre compiler goes. I don't want to keep harping on Obase who has an implementation for this, but we have an r one implementation already, so it would be not terribly difficult to get that out there.
01:30:08.710 - 01:30:13.430, Speaker A: Yes. And then last, sorry, go ahead, Ben.
01:30:14.330 - 01:30:53.620, Speaker D: Could I just mention something on the code size limit? One of the issues with that is, I mean, it's quite low at. Don't know if I'd go all the way up to 64k, but maybe 32. But it does lead to developers making very strange contracts in order to get around it. You got the diamond proxy and all sorts of various hoops, and people end up deploying multiple contracts when they've just gone over that limit and it becomes a lot more complex with delegate calls, et cetera. So it's quite a UX problem.
01:30:57.190 - 01:31:13.180, Speaker A: Thanks, Ben. Last one that I wanted to give someone a chance to mention was the EIP 7553 draft separated payer transaction. Tomas, I think you wanted to discuss that one.
01:31:15.070 - 01:31:15.434, Speaker B: Yeah.
01:31:15.472 - 01:32:30.418, Speaker E: So this is the EIP that goes like the simplest possible route to allow to separate the signature that is responsible for covering the gas payment and the signature that is authorizing execution on behalf of the account. This is alternative to any of the other proposals related to the account abstraction like or smart wallets like accounts, which means that if we go with something like 30, 70, Ford and 7553 doesn't really make that much more sense. But 7553 was proposed by me in ANSCAR because there's really much, much simpler change. It does still require wallet modifications, but if you see this back, it doesn't try to be very generic. It doesn't try to solve many problems. It solves something that is very often mentioned as 80 or 90% of the reason for introducing any account abstraction is just to allow for payment for gas from another account by some kind of paymaster. So seven, five five reaches past this, nothing more.
01:32:30.418 - 01:33:20.020, Speaker E: And when you think about later, it just opens. Also a very nice route for replacing the actual signature that is being used for the authorization. So we can leave the standard signatures, commands that we used to for gas payments, making sure that our transaction pool is still safe, that we don't have to risk invalidating the transaction pool. But we can change later the signatures responsible for the authorization for execution, which means that we can start creating some kind of account abstraction by a smart contract if that signature is dependent on the contract execution, because you already have promised to pay for that and you validated for that introduction. So that's 7553.
01:33:21.590 - 01:33:26.770, Speaker A: Thanks, Tomas. We're out of time. Charles, do you have a quick comment on that EIP?
01:33:28.790 - 01:34:02.910, Speaker D: I actually wanted to advocate for the payoff code. EIP, what is this 15 920, which was briefly considered for Cancun and wasn't rejected. It was postponed for. I guess it's an EVM change. And I guess EVM changes that touch state can be a little complicated to implement. So I wanted to re bring it up for inclusion in Prague.
01:34:07.130 - 01:34:26.640, Speaker A: All right, guys, we're at time. OnscaR did want to mention this EIP 7587, reserving the addresses zero x 10 zero through zero x one ff address range for Rip pre compiles. Onscard, did you want to take a second to discuss that?
01:34:27.490 - 01:34:31.040, Speaker B: Yeah, I think Kyle's also on the call. He would be better to talk about it.
01:34:31.650 - 01:34:32.990, Speaker A: Sorry, go ahead, Carl.
01:34:33.410 - 01:35:37.478, Speaker B: Yeah, sure. 7587. As discussed on the last ACD call, the idea is to reserve a set of pre compile addresses for the Rip process so we can start deploying pre compiles like the r one curve, as we were discussing earlier here, but in a way that we can assure no conflicts between l ones and l two s. The EIP is exactly as we discussed last time, which is basically just reserving the second 256 addresses for the RiP process. The question I have is about assuming everyone is okay with this. How do we go ahead about formalizing this? It's an informational EIP, but can something like this be included in forks? Or basically, how do we turn it from this is something we're discussing and is nice into something that is we agree to abide by it or not moving forward? I don't know if everyone has any.
01:35:37.564 - 01:35:38.920, Speaker C: Strong ideas on that.
01:35:43.710 - 01:37:02.256, Speaker A: It doesn't necessarily seem like something that needs to be quote unquote scheduled. It seems like we can just reserve it. We can talk offline, like where to have that list, but maybe something like the execution specs after the EAP is accepted. But is anyone against reserving that address range for rips or have a comment on it? Okay, let's say this is the introduction of that EEP, and then we'll circle back to it in two weeks and try to confirm that and go ahead and move forward with it. If you guys have any questions or comments about that in the meantime, just go ahead and post on that eth magicians form for the pre compile reservation eep, and I think we can go ahead and close it out. Thanks so much for everybody being on their best behavior for the substitute teacher. Tim will be back again in two weeks for all Cordos 179 and we'll again talk about Verkel and all of our eps that we would like to see in the next fork.
01:37:02.256 - 01:37:04.790, Speaker A: Happy new year. Talk to you all later.
01:37:06.120 - 01:37:07.350, Speaker F: Happy new year.
01:37:10.280 - 01:37:11.450, Speaker D: All right, thanks.
01:37:11.820 - 01:37:12.740, Speaker E: Thank you. Bye.
