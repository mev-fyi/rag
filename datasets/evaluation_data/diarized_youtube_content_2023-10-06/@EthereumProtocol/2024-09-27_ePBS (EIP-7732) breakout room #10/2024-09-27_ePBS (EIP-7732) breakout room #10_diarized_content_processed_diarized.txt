00:00:00.520 - 00:01:02.645, Speaker A: So welcome to the breakout room number 10. If I'm not wrong, we essentially have nothing on the agenda. So let's kill this meeting quickly. There were discussions, so let's get to the only main point which is that there were discussions of moving the withdrawals to the payload so that we can process withdrawals on the payload and we don't change anything. But there's a problem if so the withdrawals are of course they're deterministic on the beacon state. However, if we do block options then withdraw and withdrawals being part of the block hash of the payload, then the withdrawals should be that will be included in the payload would be deterministic on the pre state of the beacon block. The beacon block would commit the hash of the payload.
00:01:02.645 - 00:02:07.225, Speaker A: Now what happens if between the payload being committed with this number with these withdrawals for the pre state of the block and by the time that we're actually processing the withdrawals, the expected withdrawals on the beacon states are different. This can happen for example, if the beacon block penalized or slashed one of the validators was withdrawing in that very same block. So this seems that for block options this is a problem that is very awkward to solve because either we make withdrawals being deterministic on the pre stage of the payload, in which case you cannot commit the hash to the payload itself, or we do slot options and I don't see any clean way out of this. So my suggestion would be just to keep the spec as it is because it works. I hope that the explanation was clear on what the situation is. I don't know if there's any comments.
00:02:10.645 - 00:02:28.359, Speaker B: Yeah, I mean not against what you said. I just trying to understand the scenario but I suppose I can like so the. I'm just trying to find follow dependencies. Sorry but.
00:02:28.407 - 00:02:44.889, Speaker A: Oh, the scenario is actually very simple. You don't need to slash or anything like this. So, so the scenario is this. We, we are about to propose a block. We call for bids. We get a bit from a proposal. The proposal has already built the block, right.
00:02:44.889 - 00:02:49.073, Speaker A: So this proposal includes some withdrawals. Let's say 16 withdrawals.
00:02:49.209 - 00:02:55.681, Speaker B: Now these are. And these are what kind of withdrawal like these aren't. We're not talking about withdrawal requests. We're just talking about.
00:02:55.713 - 00:03:01.345, Speaker A: Yeah, this is nothing to do with requests. So let's say that these are partial withdrawals of the next 16 validators.
00:03:01.465 - 00:03:03.769, Speaker B: You were saying? I want to be clear on what you were saying.
00:03:03.897 - 00:03:07.405, Speaker A: Yeah, so let's suppose that these are partial withdrawals.
00:03:08.905 - 00:03:19.325, Speaker B: Okay. That's what I mean, so when you say includes withdrawals, you mean including partial withdrawals, like withdrawals that were made as transactions?
00:03:20.025 - 00:03:37.135, Speaker A: No, these are withdrawals that were paid in the payload to the corresponding withdrawal address. The ones that are happening right now before electoral. The accident on top of the 32 ETH that they deposited.
00:03:38.195 - 00:03:44.215, Speaker B: Right. Okay, but basically what I'm saying is it has nothing to do with the transactions that were included in the block.
00:03:44.635 - 00:03:45.347, Speaker A: Yeah.
00:03:45.491 - 00:03:46.955, Speaker B: Okay. Okay. So they're just.
00:03:46.995 - 00:03:49.255, Speaker A: These are the special operations in the block.
00:03:49.675 - 00:03:54.255, Speaker B: Oh, the. The special opera like the ones introduced in Electra.
00:03:54.835 - 00:03:58.649, Speaker A: The ones introduced in Capella.
00:03:58.787 - 00:04:11.021, Speaker B: Capella. Okay. Okay. That's what you mean by special operated. Yeah, I'm just trying to get clear on what the. Okay, so nothing to do with the transactions, just with regular withdrawals. Okay, and then what's the scenario?
00:04:11.213 - 00:04:40.515, Speaker A: So the scenario is that. Well, this withdrawals are. There they are in this payload with honor would actually credit if on the execution layer to the withdrawal address of say validator one. Now the beacon block that includes this payload. Exactly. That validator one was a validator and it gets penalized. The balance during that block of that validator changes.
00:04:40.515 - 00:04:45.155, Speaker A: For example, the validator itself is the proposal.
00:04:46.775 - 00:04:47.515, Speaker B: Sure.
00:04:48.055 - 00:05:11.297, Speaker A: The balance of that validator can change. So now when you call process withdrawals, if we want to keep the process withdrawal just as vanilla as it is, process withdrawals would get the expected withdrawals from the beacon state at the current moment. And this expected withdrawals is now no longer the pre state of the beacon block is the post state of the beacon block.
00:05:11.401 - 00:05:12.205, Speaker B: I see.
00:05:12.505 - 00:05:15.885, Speaker A: And it might be different than the withdrawals that actually were included in the paper.
00:05:16.385 - 00:05:18.401, Speaker B: Right. Making the payload invalid.
00:05:18.553 - 00:05:19.305, Speaker A: Exactly.
00:05:19.425 - 00:05:41.113, Speaker B: Yeah. And then, I mean then that just causes a missed block. But then, but the, the point is that basically the proposed like either the. The builder would have to have some extra logic to make sure that this is not going to happen.
00:05:41.169 - 00:05:59.675, Speaker A: Or I think it's impossible. Right. Because the. Or we change the logic on processing withdrawals. But I think it's just impossible to solve with committing the withdrawals to the block hash. A solution would be to not include the withdrawals in the block hash. But I think this breaks sync.
00:06:00.495 - 00:06:05.715, Speaker B: Yeah. Okay.
00:06:07.265 - 00:06:20.729, Speaker A: So yeah, so I think it's. I mean we can revisit this conversation if we move to slot options, because this is not a problem in slot options. We can make the withdrawals being just the pre state of the payload in slot auctions without any problem.
00:06:20.897 - 00:06:26.985, Speaker B: Right, but we wanted. I mean we were leaning towards block because of that other presentation two weeks ago.
00:06:27.065 - 00:06:50.717, Speaker A: Or at least that Julian sort of like killed the topic. So it's not really clear. There are. I don't know if Francesca's here. He doesn't seem to be here. So Francesca is working on an alternative approach to epbx, which is promising. And we might not have these problems in Francesco's approach, but I don't know, it's just too early to think about this.
00:06:50.717 - 00:06:57.589, Speaker A: So my suggestion would be, let's try to keep implementations as they are now.
00:06:57.717 - 00:07:08.329, Speaker B: Oh, I see why the builder. Okay, yeah, sorry, that was still churning in my head. But the builder can't prevent this because they don't have control over what the proposer does.
00:07:08.497 - 00:07:09.405, Speaker A: Exactly.
00:07:09.905 - 00:07:10.725, Speaker B: Okay.
00:07:16.705 - 00:07:55.585, Speaker A: All right. That's essentially all that it is. Regarding the spec, I were in the same spot. I haven't rebased yet the testing PR on top of Lucas spr. I just rebased Prism's implementation on top of Lucas spr, the one that removes the requests out of the payload and puts it in the become block body. So on EPBs, they're going to be on the payload envelope. And this was a nightmare for Prism, but I think we are the most advanced in the implementation.
00:07:55.585 - 00:08:06.815, Speaker A: So probably this is not that much of a problem for you guys. But if you are implementing, then this might be a problem for you as well. For us, that rebase was an ip.
00:08:09.355 - 00:08:11.135, Speaker B: Which. Rebase. Sorry.
00:08:11.475 - 00:08:27.371, Speaker A: Well, we had already implemented a bunch of the logic of using the requests being in the payload, then you need to remove them from the payload and put them in the payload envelope. And. And that was.
00:08:27.563 - 00:08:28.335, Speaker B: Yeah.
00:08:32.835 - 00:08:34.091, Speaker A: All right. I missed.
00:08:34.123 - 00:08:36.643, Speaker B: I missed which PR you were talking about.
00:08:36.779 - 00:09:00.585, Speaker A: Oh, so this is Lucas's PR. Let me just find it. I think it's three eight something. 385. What is it? 3875 perhaps? Yeah, so it's 3875 in the. In the back repo here. I posted a link there.
00:09:11.285 - 00:09:22.955, Speaker B: Okay, cool, thanks. And this. Oh, the thing we were talking about on ACD yesterday.
00:09:24.295 - 00:09:44.235, Speaker A: Oh, no. So that's. That's another thing which is to remove when we call get payload the engine API would bring. This request would be separated so that we. The CL needs to interpret this and put them in the. In the pico block body. Yeah.
00:09:44.235 - 00:10:06.455, Speaker A: That we haven't even changed. We need to see how it works. And we need to come. We need to make the engine API changes. Perhaps depending on what comes out of that eip, we will need to or not need to add engine API changes. I suspect that we do not require any engine API changes.
00:10:08.445 - 00:10:09.425, Speaker B: That's nice.
00:10:10.325 - 00:10:13.869, Speaker A: Besides what. The ones that you already noticed there are by range.
00:10:13.997 - 00:10:33.865, Speaker B: Yeah, yeah. Where are people on their implementations of the cip? Like, basically I'm pretty much. I mean barring these changes, but I'm pretty much done with like the beacon chain changes. But I'm. I gotta do all the fork choice still.
00:10:36.575 - 00:11:06.885, Speaker A: We have most of the beacon changes. Not all, because anything that requires for choice we haven't implemented and we haven't implemented essentially anything on for choice. We have the P2P validations, so we have all the validations coming from the wire. We have the state transition functions but. And we have the committing to db, but we don't have anything that has to do with like changing head.
00:11:08.345 - 00:11:31.535, Speaker B: Okay, yeah, yeah. I mean I still have to do like. I mean I just. What I meant by beacon chain changes is like, you know, all the changes to the existing data structures plus like the new data structures and like the block processing and state processing and that kind of stuff. But I don't have like. It's not all stitched together in a coherent way. Definitely.
00:11:32.515 - 00:11:45.215, Speaker A: It seems that we are more or less in the same situation then. Perhaps. There are a lot of validated changes as well. For example, you have a new PTC duty which I think we finished that end to end. But we haven't done the proposed search changes.
00:11:46.475 - 00:11:55.545, Speaker B: Okay. And I would. Other clients or are they around the same place or is anyone ahead?
00:11:57.205 - 00:12:32.319, Speaker C: So for techo. Yeah, I haven't been working on EPBs for the last week, but we had a decent progress with everything but fork choice. It was in a good stage and now I'm rebasing the looks on top of the looks spr, which POTUS mentioned and. Yeah, that's a bit of a nightmare as he said. So. Yeah, we'll probably spend some time on that. And then yeah, we still have to do the fog choice which is the major change.
00:12:32.319 - 00:12:35.863, Speaker C: So. Yeah, sure.
00:12:35.999 - 00:12:43.355, Speaker B: Yeah, maybe a little further. Okay. Yeah, I was just curious. All right, cool. See.
00:12:46.055 - 00:12:50.635, Speaker A: Justin, do you know how tech was doing or is the person that is the epf.
00:12:54.455 - 00:13:11.859, Speaker D: Well, so I've been. I don't know if they're here actually. I can't. Well, I can scan the participants for a moment and I don't. It doesn't look like it. Unless they. They're using a very different name and.
00:13:11.859 - 00:15:13.315, Speaker D: And they're not aliased to any somebody. I do know who they are otherwise anyway, so I don't think they're here. So I Guess I'll I'll address this then or I'll comment yeah we're most of the way through I would say the non fork toys part of the beacon chain. I actually got a question from from them and I basically pointed to the comments in the Discord channel from Teku and you guys a couple weeks ago about which it sounds like still broadly true that fourth choice seems to be not mostly broached yet because that's what they working at next I have pointed to them and please tell me if this was a reasonable or not thing like the state or the block processing or the peer to peer interface. The idea is things which are maybe have some independence from from fork choice now as far as the Lucas's PR we're sort of not as far enough along to be enormously hindered in a way we actually have a slightly different issue whether that that PR and I don't know I'm actually yeah I think Omega is a question I'm curious what other people are doing with this because I this is something Nimbus doesn't so Nimbus doesn't do feature branches very much. That's the brief background here. We kind of keep merging smallish usually bits into our development branch all the time so here however we have definitely a feature branch but it's sort of falling well the person doing it is in fact not rebasing or merging which is who knows I'm leaving up to them for the moment but is this something that people are doing in general? Is this something that people's EPBS branches Are they.
00:15:13.315 - 00:15:32.671, Speaker D: Are they trying to include them in some development branch? Are they just leaving them kind of relatively stagnant from development figuring that only update when truly necessary Are they kind of rebasing habitually like what.
00:15:32.703 - 00:16:05.083, Speaker B: What are. What are the firm for me I mean the branch is small enough that I've been rebasing and like was but like once you have enough PRs that becomes like too painful and I probably merge into but then with this recent change from Lucas seeing is how it affects a lot of Electra just my understanding I think what I'll probably have to go do is implement this for Electra first and then rebase my that's.
00:16:05.139 - 00:16:13.575, Speaker A: That's what we did. That's why I hadn't worked in Electra at all except Lucas SPR that I implemented it just because I wanted to know how to rebase later.
00:16:19.755 - 00:16:25.633, Speaker D: Okay yeah, that's all right.
00:16:25.689 - 00:16:58.535, Speaker A: Having said so our development is probably very different than Nimbus like The reason we are, it's presumably very reasonable, especially for us, that we're kind of convinced that it should be included, that you could have this thing developed as a future fork and then it shouldn't affect at all your production code. The problem is that I'm never going to get this past Preston to merge it in prison. So that's why we cannot go that way. But that way certainly would be the easiest one to maintain.
00:17:01.155 - 00:17:02.295, Speaker D: Yeah, for sure.
00:17:03.515 - 00:17:04.535, Speaker B: I'm sorry.
00:17:06.235 - 00:17:07.455, Speaker A: Go ahead, go ahead.
00:17:08.395 - 00:17:15.854, Speaker B: This thing that was just merged from Lucas, Is this for Devnet 4 then?
00:17:17.194 - 00:17:17.930, Speaker A: Yes.
00:17:18.082 - 00:17:45.153, Speaker B: Okay, good. Okay. Because I was worried like that would be even worse because I don't think we've done DevNet for yet. And if that would be hard to merge that into unstable and then we'd have to have like a free this pr. I don't know, I'm just. Okay. It would be worse if we had to have like some intermediate step before this pr and then I would have to like figure that out.
00:17:45.153 - 00:17:59.737, Speaker B: But. All right.
00:17:59.761 - 00:18:18.425, Speaker A: But I'm excited that people are actually advancing. If For Choice seems to be the problem for everyone, please ping me when you guys start implementing it, because that's certainly where the bad bugs are going to start appearing. If there's any attack on this, it's going to be unfortunate, I think.
00:18:22.645 - 00:18:48.895, Speaker B: Yeah, I don't know that. The only reason I've not started it is because, I mean, for one modularization, just one thing at a time. But the other is I. My general. I generally haven't spent a lot of time modifying For Choice in Lighthouse. So like, I have to wrap my head. I'll need to wrap my head around a lot of our specific implementation For Choice and then modify it.
00:18:48.895 - 00:18:50.275, Speaker B: So it's just better.
00:18:53.615 - 00:19:38.815, Speaker D: So For Choice is. I guess one of the notable things with For Choice here is just one of the shared bits of infrastructure that so. So this is one option is to treat this as a complete fork, as it were, and we're not worried about mergeability even eventually. And another and in that case that's easier in a way. Another is to care. But regardless of that, this For Choice, one of the notable things about it is exactly that it's one of the first times it interacts in a fairly intricate way with the rest of the implementation. Networking doesn't.
00:19:38.815 - 00:20:11.913, Speaker D: Most of the beacon chain stuff is new, et cetera, and it combines that with being, let's say, very nuanced or subtle security properties. I've probably done a little bit more work with our Nimbus's fork choice than it sounds like Mark has with over there but. But not that much. And even then I've seen. I mean this is mostly Eaton's thing really and like. But getting it. It's very easy to get it wrong with in.
00:20:11.913 - 00:20:25.355, Speaker D: In subtle hard to detect ways that unless they're tested for specifically like all of the unit tests will pass and everything else will pass. I. It always makes me a little. A little wary of changes, I guess.
00:20:27.215 - 00:21:07.685, Speaker A: Yeah, you're absolutely right. Writing the four choice tests for this, if we ever decide to ship something like this would be a nightmare. Like getting all branches tested on for choice and creating those test vectors is going to be a nightmare and we need them. It's definitely the most subtle point if I mean there's some light in that. Francesco is trying to work out a version of epbs. It's very different, it's without btc. It has many disadvantages that I can see, but a huge one is that it doesn't touch for choice, it just keeps for choice as it is today.
00:21:07.685 - 00:21:46.325, Speaker A: So if that one works we might want to shift but it's just an early idea so far. All right guys, it seems that we're more or less all of us in the same page. The withdrawals issue is not really an issue. I only see Gajinder with the mic open. I don't know if you wanted to say something. Gajinder.
00:21:47.465 - 00:22:24.455, Speaker E: Yep. Hey Purus. So basically in. While we were putting up the post about split division of spectra, we basically had a small discussion about EPVs because I was sort of pushing it to be included in Pectora B. So whatever is the name of the. Whatever will be the name of the fork, but I think so there were few questions that were asked and I sort of want to bring. Bring them out in this form and sort of want to get your opinion.
00:22:24.455 - 00:23:18.601, Speaker E: And the question was that right now in. In P EP in pbs, we have two builders that are mostly making the block. But how will epbs basically change that? In the sense that any builder can basically right now even go to relay and start providing it payloads. So how does epbs democratize it? In the sense that even if the builder for example has to still be a validator or put up a huge bond which is basically held up in the beacon chain, then the problem is that it increases. Quite. Increases the barrier quite a bit to be a builder and I don't see.
00:23:18.633 - 00:23:25.525, Speaker A: How what's the increase? So the fact that you have to have at least 16 ETH to stake.
00:23:26.825 - 00:23:27.645, Speaker E: Yep.
00:23:28.855 - 00:23:42.795, Speaker A: I, I don't see this as a big barrier like the, if anything the current builders all have much more and they will be staked anyways. So I don't see how can it be worse.
00:23:43.175 - 00:23:46.223, Speaker E: No, no, it's not going to be worse but the question is how.
00:23:46.239 - 00:24:48.979, Speaker A: It's, how do we make it better? So yes, yes. So for it's, it's, it's unclear at all. I don't see EPBs in any way making a team that doesn't have the private order flow suddenly beat these builders that have the transactions that no one else sees. So I think it's going to be very hard that any player in any system that you can come up with will bid someone that has transactions that you don't have. So I think it's quite naive to think that, that we're going to ever be in a situation in which the transactions are all private and then suddenly out of like thin air we can beat them. However, what this does is that it raises the floor to be a safer, a more balanced auction. Prismatic Labs will just have a vanilla client posting bids.
00:24:48.979 - 00:25:18.253, Speaker A: Any validator, any home staker can just set a flag on their own, on their own home staking how build, rig and just submit bids every slot. So that means that at the very least builders will have to bid more than honest validators bidding all of them, not just my own house, but all of them. Right. So I think this makes it more easier.
00:25:18.429 - 00:26:16.747, Speaker E: I basically gave arguments on the similar line that anyone would be able to be a builder. But again the question arises that how would one person, how would that person become effective against or become you know, very competitive against the builders that are out there. And as you mentioned, the private order flow is one of the issues. But maybe I think what we can also do is not require builder to have 60 meat staked. And when the builder is, for example, when anyone could be a builder as long as their builder bid contains a transaction which can basically be applied on the EL state. And yeah, this is one way can be directed from the execution, but this.
00:26:16.771 - 00:26:52.011, Speaker A: Doesn'T give, this doesn't give any better status to a builder. So. And it makes it much more complicated to us. So what you're proposing is to make the payment upfront on the El, which, which is viable, we can do this. However, to make that payment you still need to have that money locked up. You cannot come up with that money out of the block itself, which would be the dream situation for a searcher soon to be builder. You find a block that is worth 45 ETH.
00:26:52.011 - 00:27:32.785, Speaker A: You submit the bid for 45 ETH and for say 44.9 the ETH and you include a transaction in the blog that pays. However, that transaction needs to come with the money at the top of the state. So that means that you already needed to have this 40 40. You cannot produce 44 ETH in your block and pay because we're nowhere near to having ZK proofs that you will pay in a block. Yeah, I think it doesn't solve the issue of like having the money up front. And it makes it incredibly more complicated for us to build because it requires now the EL to be in to be.
00:27:32.785 - 00:27:34.845, Speaker A: To be with us shipping this.
00:27:35.185 - 00:28:45.771, Speaker E: So bid is not going to be 44 write bid is going to be, I mean most of the times in the 0.1 or 0.2 E kind of A, kind of a range. But my thinking was that if for example, I am a person who wants to not get my transaction sandwiched, so I'm thinking what kind of use cases can be solved with this. So for example, if I am a person who don't want his transaction to get sandwiched, so I can use my own beacon out to sort of transmit this bid and if it's included, then obviously I can also transmit my payload. And when I'm transmitting, when I'm doing the bid, I can use my local EL memp pool to create a bundle with my transaction included. Or it could just be that person's transaction, as long as obviously it's paying more to the proposer, it sort of gets accepted and then I can get my, my transaction included.
00:28:45.771 - 00:29:07.815, Speaker E: And the point is that I don't have to be a builder in the sense of staking some ETH on beacon chain. And if it's open to everyone who can do it at any time, then I see for example, many people or many whales at least using this particular feature to safeguard their transactions.
00:29:12.645 - 00:29:43.825, Speaker A: Sure, what you're describing is inherently better than forcing the builders to be staked and it's inherently much more complicated. So enforcing the payment is something that is trivial in our design and is highly non trivial in your design. It involves bringing five extra teams, having the logic checking, synchronizing the CL with the EL in the fact that the payment was made and so forth.
00:29:44.445 - 00:30:48.097, Speaker E: Yeah, so when we, I mean it could be easy for example, when the bid is applied, when the bid is received, so you send it to EL to sort of validate it. And if it gets applied then you get a straight route back on which you can further build or. So yeah, but it is a bit more complicated. But even if, for example, we leave this proposition because that was something that came to my mind when I was trying to come up with the reasons why EPVs will make things better. So what are the other areas of impact that you think that EPVs will have? And I was, I was also reading about execution tickets and I think you might have mentioned it earlier and at some point we might need to do multiple proposals or execution tickets and how all that will sort of fix into this puzzle. So if you can sort of jump.
00:30:48.121 - 00:31:36.665, Speaker A: In all over the place. So the big, the one reason to push for EPBs perhaps in Fusaka would be because it solves all of the discussion that we're seeing today about blobs being included or not. It solves the latency problem on CPU and it solves the bandwidth problem on stakers. Because. And this has nothing to do with EPBS itself nor the auction mechanism, it's just the fact that you don't need to validate da, nor validate execution on the payload when you attest. So if you're a proposer, you're a home sticker today you need to get your blocks out and they need to be distributed to everyone in less than 2 seconds. On EPBs they need to be distributed in less than 9 seconds.
00:31:36.665 - 00:32:05.685, Speaker A: So that's the biggest impact and we wouldn't be having this discussion of whether we need to increase the block target the target for blocks or not, because bandwidth will not be an issue or at least only average bandwidth would be an issue instead of peak bandwidth combination and the same for cpu. So those are impacts that EPDS has in depend regardless of market dynamics, nor med, nor anything like this.
00:32:07.945 - 00:32:33.415, Speaker E: And I don't want to get into the other. So can we sort of quantify in some sense what the effect is going to be so that, I mean, for example, lotsa team wants to know what is the net positive. Can we quantify what is the net positive effect of EPBs and maybe some write some article about it Unless it's already covered and I don't have it.
00:32:35.595 - 00:32:37.615, Speaker A: I'm sorry, could you repeat? I don't understand.
00:32:38.875 - 00:33:28.855, Speaker E: I mean can we sort of articulate how EPBs, how impactful EPBs is or how it's going to impact and create a positive staking system apart from the fact that, okay, you know, we have. Because blobs, again, when 98% of the blocks are through PBS, basically publishing blobs is not really an issue. But as you have Said that. Okay. It will also increase the window to import the blobs and to validate them. So that might be a positive benefit. So can we have an article that basically says that or a document that says that?
00:33:29.475 - 00:33:52.477, Speaker A: We've produced like several documents like this. Terence has been doing like outreach essentially. All of my documents point to this pipelining. We have very precise numerology on how all of these changes. I've been tweeting about this for two years now. I think this is like if it's. Yeah, I don't know.
00:33:52.477 - 00:34:05.555, Speaker A: I feel like this is highly documented already. Like in the EIB and in the PR there are links to like very extensive documentation. That documentation includes this.
00:34:07.415 - 00:34:17.155, Speaker B: I do believe that you have a ton of documentation. I feel that in some sense there's so much that it's a bit overwhelming.
00:34:18.575 - 00:34:27.395, Speaker A: Okay, in the next 10 minutes I'll post a hack MD with the pipelining of what you get 10 minutes after this meeting is done.
00:34:28.135 - 00:34:41.425, Speaker B: I do think that a bullet pointed list that someone like a very quick overview of the benefits of PBS would be really good at getting buy in and not a deep dive technical but.
00:34:44.285 - 00:34:45.213, Speaker A: Several of those.
00:34:45.309 - 00:35:23.705, Speaker E: It doesn't have to be technical. Something like vertical dot info like we have for Verkal basically a site or maybe wherever we choose to put it. It just basically documents all that stuff and okay, I'll also sort of go through what is out there and see because I was trying to explain the benefits of EPVs over what currently scenario and realistically I couldn't figure out how we can democratize the builders set.
00:35:34.005 - 00:36:04.027, Speaker A: I think so there again probably going in circles. But what Epps allows is a builder is to anyone that has the money to become a builder instead of like asking for permission from a relay. That's the only thing and it might be zero today because relays are allowing anyone to build. So this is not. Relays are not gatekeeping builders. So it's not. It's not a real change.
00:36:04.027 - 00:36:20.405, Speaker A: And I very much doubt that we will ever have any system that makes people win on the public mempool versus people that have the private order flows. And I am not aiming to change that at all.
00:36:22.905 - 00:36:34.085, Speaker E: So it is some sort of protection against monopoly of the relayers is the best argument that is out there.
00:36:35.945 - 00:37:00.005, Speaker A: It is allowing someone to not have to trust an external player. This is not something that we have the capacity today. If you want to construct with an external builder you need to trust someone. And that's all that we're changing on the auction and then There's a lot of benefits that come from the pipeline.
00:37:04.025 - 00:37:18.765, Speaker E: Okay. So I mean maybe we can also lower the threshold for a builder and if the builder has some particular E threshold then I mean you can't because.
00:37:19.065 - 00:37:57.867, Speaker A: If let's say that you have validators that have one eth then you open the beacon chain for a dos. That's the reason why validators can only have can only start with 32 ETH. We cannot handle if we get like a million deposits of one Ethical. But also I believe that, I also believe that it's not an issue like having the builders being staked is not really an issue if you like very small builders can still go through a relay. Like if you see someone not a competitive builder.
00:37:57.971 - 00:38:45.165, Speaker E: Right. I basically don't see current builder set or somebody who is serious about building not putting up 16E. I mean at least not at these prices. That is not an issue. But it could be issue if prices explode or there are people who don't want to trust any builder to give their private transaction to so that it gets sandwiched. So in that sense that was my earlier thinking in which the bid itself could be checked and deducted from execution layer before it's confirmed to be part of the beacon block and the right is given to that particular builder to produce the block. But yeah, I understand what you're saying.
00:38:48.585 - 00:40:17.143, Speaker B: I actually feel like perhaps what's the meta discussion here is we might benefit from a, a different meeting with View POTUS to like pick your brain about a lot of PBS stuff. It doesn't need to be like, like I don't know, an office hour on PPS because you, you've done so much work you know, understanding this and yeah, just like I feel like a lot of catch up could be done and I, I do agree that the wider community is less informed about this for sure. And the only reason I like, I mean I specifically dug into PBS myself and brought that to Sigma Prime a while ago, which is why I know even as much as I do. But that was several hours of research that other clients haven't done and even I'm behind on a lot of the things so I don't know, we could use time even digesting some of the research and picking your brain on stuff is my thought.
00:40:17.319 - 00:40:35.195, Speaker A: I'm happy to talk in how much time you guys want any day. You can just ping me on Ebbs on the EPBS channel. I'm the most invested Terrence as well on shipping something like this, so I'm happy to talk as much as you want.
00:40:39.545 - 00:40:59.925, Speaker E: I mean as I sort of mentioned on chat that low latency is a good thing and I mean trust is definitely good but if we, I mean if we think in terms of lower latency and that effect could be multiplied if we sort of have slot options, then blog auctions.
00:41:08.115 - 00:41:08.563, Speaker B: Yeah.
00:41:08.619 - 00:41:17.975, Speaker A: Unless you guys know how to solve the problem that Julian wrote. I, yeah, I don't know how to, I don't know how to solve that.
00:41:18.355 - 00:41:40.797, Speaker B: I mean because yeah, the problem that Julian has had last time was correct me if I'm wrong but slot auctions just seem much more likely to create a secondary market and people to go around enshrined PBS system and do off chain relays and things like that. Yeah, that was a pretty clear, yeah.
00:41:40.821 - 00:41:44.665, Speaker A: The relay is going to be the builder and it's going to be one person winning every slot.
00:41:45.845 - 00:41:53.105, Speaker B: Yeah and then, but the, but we have a DA problem with block auctions still.
00:41:53.845 - 00:42:00.061, Speaker A: Yes, that we need to think about and we need to gauge whether or not it's dangerous.
00:42:00.213 - 00:42:18.517, Speaker B: And I think one of the directions that we thought of to maybe head that off was like adjusting the penalties so that they're not linked. I forgot exactly what it was. It was something along the lines of.
00:42:18.541 - 00:42:43.445, Speaker A: Like yeah, so we could, we could slash for an invalid payload that has the right hash. We could charge right there on inclusion. We can charge the builder but it adds complication. It's easy to implement but it adds complication. That's why I would rather not certainly not do it at this stage where we're talking about an early implementation.
00:42:46.665 - 00:43:15.913, Speaker B: I guess to Dustin's point about how much is getting merged in. Since we're talking about early implementation, I have been treating the in the lighthouse implementation was more or less prototype code. Like it's not, it's not terrible code but it's not like, like I, I expect to have whatever final implementation to be a complete rewrite but having gained the experience of how to implement it through this.
00:43:16.049 - 00:44:03.185, Speaker E: But yeah, so I, I, I basically could not understand why slot auctions have that problem of secondary market. But yeah, I'll go through it and maybe come back because I think if we can substantially change the latency game or the time that builder has to build the blocks then it would be pretty nice direct benefit that can be easily explained that okay, you know, it is making the entire blockchain economically efficient. So I think we should try to see and I'll try to understand what the issue is with the slot options.
00:44:06.565 - 00:45:04.445, Speaker A: The issue is very simple, is that in these Delayed options. It's been measured that you, you get higher bids for just in time than, than a bid of what the value of the block will be six seconds from now because whomever is bidding is going to discount from that bid the risk of the market going against in the next six seconds. So that means that for the validator the rational decision would be to never auction now but rather deferred the auction to six seconds from now. The way to do this is to sign the block with the relays address and then the relay runs the auction six seconds from now. In the future the relay pays you off market. Off chain or not off chain. I'm sorry off product.
00:45:04.445 - 00:45:09.215, Speaker A: And it's hard to argue against that.
00:45:17.915 - 00:45:39.829, Speaker B: Yeah. One of the other things that came up though that guy doing the product was having the. I believe what you were talking about earlier was having the payment basically not be. Or like the stake being being in the execution layer rather than the beacon.
00:45:39.877 - 00:46:07.567, Speaker A: Yeah. This is certainly implementable and we can iterate over this. We could, we could easily iterate over this but. But this adds a lot of complexity. It adds complexity on reorgs, it add complexity on poor choice. It's. I have thought about it and it's much more complex and it gives very little benefits I claim because it's unlikely that small builders would ever win.
00:46:07.567 - 00:46:21.835, Speaker A: Like small builders, like occasional builders that are not able to stake 16E in any reasonable manner and at any chance there's at any. In any case there's a market for that, you can still go through a relay.
00:46:23.465 - 00:46:34.065, Speaker B: Oh yeah. I guess I wasn't, I don't. Yeah. I thought there were benefits besides small stakers that design would have accrued.
00:46:34.145 - 00:46:56.929, Speaker A: But it's also, it opens also the, it opens complexity on every level. Like currently it's already a gos for us. The fact that any validator can send a bid if we open it to anyone with a neat account being able to send a bid, it's a different order of magnitude.
00:46:57.057 - 00:47:18.015, Speaker B: Oh yeah, yeah. So yeah, actually that was something. Is, is it the. Is that how we handle like bid dosing on the P2P layer right now is via. Via you having to be staked.
00:47:18.475 - 00:47:37.295, Speaker A: Well that's part of it but still remember that when we went to capella we were worried that we were going to be dossed by BLS to accept changes. Right. So we still need to heavily stop bidding. Like you can only. For example, you can forward only bids that are higher or like the top two bids that you receive.
00:47:38.555 - 00:48:24.615, Speaker B: Yeah. I mean because that is Another layer of complexity is how you deal with spamming the bid topic on gossip. Because I had once there was a proposal for. What is it called? There's different kinds of relays. It was like the V3 version of the optimistic relay where it was basically PBS but you had a relay just to enforce the payment. But everything else took place like it was something for us to field test epbs. I guess that was the topic that I looked at is how to prevent like spamming.
00:48:24.615 - 00:49:35.563, Speaker B: And the, the way that I had done it at the time was like basically you, you already had to have won a couple of bids via the off chain mechanism via like you know, relays and stuff in order for the beacon chain to recognize the pub key of the builder and then to brought to gossip bids and that basically you have this kind of rolling window of like people that have 1x amount of blocks can, can push bids but with EPDs you can't really do that. You can do people that are staked but it seems like it would be relatively cheap to continuously. I mean if all you got to do is put up 16 ETH and then you can just spam the P2P later layer with bids that aren't going to win or something along those. Like we. Yeah, I don't know.
00:49:35.579 - 00:49:44.975, Speaker A: Yeah but I mean the, the complexity of allowing bids on for. From anyone. But it's not state because gender is.
00:49:46.475 - 00:49:48.219, Speaker B: Even with state. Even with.
00:49:48.267 - 00:50:35.371, Speaker A: Oh, even with state. We can, we can heavily stop it by just saying we're only going to gossip one bid from each validator max and only the top bid that we receive. So you need to bid more than the current bid if you want to gossip it. So it's easy for us to stop it on the state side on the CL B2B but if it's open to everyone then the point of transactions DOS handling is that once you have a valid signature that I've checked then I have you. If this transaction gets included and it can include it, you will pay gas for it. And that's, that's the assurance that you have that verifying the transaction is cheaper than the gas that you would pay for it. Otherwise we will be broken.
00:50:35.371 - 00:50:39.055, Speaker A: And this doesn't hold in approach.
00:50:39.395 - 00:51:02.835, Speaker B: Like the only thing is like right now with the current relay approach there's tons and tons and tons of bids which like you would have to change the, you have to change the. The setup. So you basically only. You wait until just before. If you're a builder you wait until just before the you know, slot and Then you gossip your only your best bid for that slot, which.
00:51:03.615 - 00:51:45.275, Speaker A: Oh no, but actually that, that actually is solved by the current design of EPBs. So the reason currently there's a lot, a lot of bids is because the relay has a push mechanism instead of a pull one that's a side of one. But the reason is because builders continually push bids to the relay because they don't know when the proposer will request them and they need to cancel bids because the market was against them or whatever it is. This is no longer necessary for builders because the proposal would only ask once or whenever they want to ask and then the builder decides if they want to serve or not.
00:51:46.335 - 00:51:53.208, Speaker B: The proposer. Well, the proposer. If they're doing the P2P layer, the proposer doesn't ask.
00:51:53.274 - 00:52:05.755, Speaker A: Yeah, but the P2P layer is kind of irrelevant for EPPS. The P2P layer is only there as a safeguard to keep the lowest bid possible. The P2P layer will never win an auction in real life.
00:52:06.865 - 00:52:30.177, Speaker B: Okay. I mean if that's the logic that makes sense, but. So you're saying that basically a rational builder, what they can do is like wait until some X amount of time before the slot gossip their bid just to ensure it gets there, but then they still maintain a public endpoint?
00:52:30.361 - 00:52:44.025, Speaker A: No, not even that. They don't gossip anything. They don't want to gossip anything because they, if they gossip anything that can be included. A serious builder would never gossip Anything on the P2P side stack and will only wait for the proposal to request.
00:52:48.365 - 00:53:03.755, Speaker B: That. Okay, I mean what I was thinking that they would do is that they would gossip, but then you would, you would maintain the ability to like hit the, hit their end point and potentially get something better because you have a lower latency. But I don't understand if they don't gossip at all. I don't understand why we even have have a P2P layer.
00:53:04.575 - 00:53:41.305, Speaker A: Well, because I will gossip. I will not open an endpoint. Like I am just a homestaker and we want to keep the lowest, we want to keep liveness on the network. So a few people that are altruistic will be just gossiping bids every now and then. Just run your lighthouse node has a flag that says on top of validating, submit a payload every ebook, submit a bit every book. It's cheap for you, it's free. You're just going only going to stress your el for like 12 seconds at epoch and you keep liveness and you keep the floor of the auction.
00:53:42.605 - 00:53:43.505, Speaker B: I see.
00:53:46.205 - 00:53:49.065, Speaker A: Definitely prismatic Labs will run a builder.
00:53:49.485 - 00:53:59.431, Speaker B: And your thought is that a serious builder isn't going to gossip because they'd be telling the other builders what their bid is and stuff like that or.
00:53:59.583 - 00:54:37.485, Speaker A: Also because it's a matter of timing. Right. So the gossip on the P2P layer needs to go three seconds essentially before the actual bid that wins the auction will happen. Right. The bid that wins the auction is going to happen at around two seconds into the slot and the bid to be on the P2P stack needs to be at least one second before the slot. In those three seconds, the whole market can go against them. No serious builder would like commit to a payload that can be included three seconds before the payload actually needs the auction actually happens.
00:54:37.645 - 00:54:44.877, Speaker B: So the. They would, or at least they would definitely not include any sex arbitrage transactions, which are a huge.
00:54:45.061 - 00:54:52.865, Speaker A: Yeah, so they cannot cancel a P2P. They can cancel their own bids.
00:54:55.285 - 00:55:21.445, Speaker B: Yeah, they can't cancel. Yeah. So. Right. So basically like if the builder was even to participate, they would basically not include any of those arbitrage transactions which would make it much less competitive in addition to also having a second or so less time then. Yeah. Okay, that makes sense.
00:55:21.445 - 00:55:54.073, Speaker B: I mean they could still do it just. But it would be extra work for them and there's not much. I mean. Yeah, especially with block auctions. Maybe that's one. I mean that might be one other argument for slot auctions that. Slot auctions, like presumably all of these arbitrage issues would be rolled into the cake with their pricing and the P2P layer could be more heavily used.
00:55:54.073 - 00:55:54.725, Speaker B: But.
00:55:58.065 - 00:56:42.615, Speaker F: I was thinking one thing. So why do you think that the builder won't try to send the bid over the P2P and just wait the proposal. I'm thinking that maybe the proposer is not connected to the. To the particular builder and that builder that is not being contacted says, hey, I have something better. And I think, I think I will beat the one that the proposer actually contacted. So I want to signal to that proposal, hey, I have something better. Why this is not flying.
00:56:46.115 - 00:57:04.255, Speaker A: This was discussed actually in Kenya. We should include a contract or some way on chain for builders to register that you just submit a transaction saying this is my endpoint and then clients can just grab the list of builders from that contract.
00:57:04.855 - 00:57:08.395, Speaker F: Yeah, I see. But maybe the.
00:57:09.855 - 00:57:16.607, Speaker A: I understand your point and I agree. Like a builder that is not popular will use the P2P stack.
00:57:16.671 - 00:57:28.727, Speaker F: Yeah. Let's say it's something that is someone that is censoring like hell and half of the proposal don't want to do that. But then he wants to say, hey, this is my candy.
00:57:28.831 - 00:57:29.719, Speaker B: Do you.
00:57:29.887 - 00:57:31.835, Speaker F: Are you sure you want to pick this?
00:57:33.135 - 00:57:48.679, Speaker A: No, I agree the P2P stack might be useful for certain cases, but realistically, like all of our blocks are being built by two builders. Those two builders are going to continue whatever system we design.
00:57:48.727 - 00:57:49.391, Speaker E: Yeah.
00:57:49.583 - 00:57:52.783, Speaker A: And those two builders will have open endpoints.
00:57:52.959 - 00:58:29.549, Speaker B: So the concern was that unscrupulous builder would put high like high bids on the P2P layer and then win auctions. Is that I didn't quite understand. I guess I didn't see a difference. If I understood that correctly, I didn't see a difference between the P2P versus the RPC layer because I mean, presumably we could implement like something where you have a blacklist for pub keys for the builder and then.
00:58:29.677 - 00:58:52.025, Speaker A: Oh, that. That would definitely. We will definitely automatically blacklist builders that satisfy some criteria. That's one of the big advantages of epbx that validators can blacklist builders instead of relays. But I think Enrico has a point which is there are some builders that are not known. They're not being contacted by validators. Those builders are kind of forced in the P2P stack.
00:58:52.365 - 00:59:00.989, Speaker B: Oh, that was the point. The point is if their endpoint isn't well known, then the only way they can get attention is using the P2P layer.
00:59:01.077 - 00:59:17.635, Speaker F: Yeah. Well known or well known but normally not used because of some social stuff. But they still want to say, hey, I have something and the way to contact proposer is via P2P layer.
00:59:19.095 - 00:59:25.155, Speaker B: Yeah. And I don't see that as a concern though. I don't see that as.
00:59:27.735 - 00:59:44.115, Speaker F: It was not as a concern. It was a comment on Poto saying that a builder will never send a bid over P2P normally. And I see that there are some cases where maybe he wants to.
00:59:44.485 - 01:00:17.319, Speaker B: Yeah, yeah, I. And certainly like a register of end points. I don't know. That feels like something that would be handled off chain the way it is now. But one thing that isn't done now that is like the nice thing with the P2P layer is that it's just automatic. Like you'll just automatically get like. Even if there's a builder you've never heard of, if they have a good bid, you would.
01:00:17.319 - 01:00:32.159, Speaker B: You would just be able to get access to that bid. Whereas like right now you have to like manually keep checking the eth stakers GitHub list of URLs and adding them to your. Yeah.
01:00:32.247 - 01:00:35.235, Speaker F: Or what if a bid contains Also the endpoint.
01:00:37.285 - 01:01:29.685, Speaker B: Yeah, I. Well, to have it on chain that would be. But in theory I would think you'd have a separate gossip topic for that just because you wouldn't otherwise you have to have an extra data field in the bid and then using up these bytes that are almost always not known. But if there was a different gossip topic for builders to broadcast their endpoints that wasn't included on chain and you could verify their collateral balance easily and then limit them to like once per epoch or something for spam prevention, then that would be good.
01:01:31.265 - 01:02:08.755, Speaker A: All right guys, we're already over time. I asked in the chat. I don't know if there's anyone that has any concern or implementation questions or something that is not related to the auction itself. So we can probably allow Pooja to finish the recording and go home and call it for the next weeks. I will. Hopefully. I'm still aiming to have this working by defcon.
01:02:08.755 - 01:02:41.239, Speaker A: Then next meeting that we'll have, it's going to be fairly close in two or three meetings. I'm hoping that we have already fork choice working and at least one client interrupt running. All right, I'll. I promised I'll post this one bulleted list of things and I'll post it in the next 10 to 15 minutes. All right guys, thanks.
01:02:41.367 - 01:02:42.175, Speaker B: See you. Bye.
01:02:42.255 - 01:02:43.275, Speaker A: See you next time.
01:02:43.855 - 01:02:45.775, Speaker B: Bye. Thanks. Bye.
