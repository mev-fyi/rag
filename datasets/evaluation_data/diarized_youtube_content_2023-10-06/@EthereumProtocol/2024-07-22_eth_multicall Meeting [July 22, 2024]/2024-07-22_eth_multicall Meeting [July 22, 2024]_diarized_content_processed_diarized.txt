00:00:00.280 - 00:00:09.125, Speaker A: All right, so hello. So shall we do a quick run through the presentation? Kilari, what do you think?
00:00:09.945 - 00:00:11.325, Speaker B: Sure, we can do it.
00:00:12.545 - 00:00:36.235, Speaker A: All right, so just for everybody's information, the link will be in the meeting group chat so that you can open it up and look at it. And Kari, as you start, would you share the screen?
00:00:43.775 - 00:01:07.425, Speaker B: How I can share? Can you see it?
00:01:07.925 - 00:01:09.025, Speaker A: Yes, we do.
00:01:11.965 - 00:01:46.787, Speaker B: So my start is the mostly what I did in the preform. So I have presented. So I first explain what the each simulate one is and how it's different from the IT call. Then I'm showing also what is the output of that kind of simple call. Then I'm talking about the four core features that we have that we had the calls us with the blocks. Then we have state overrides, easy recover opcode override. This used to be the bigger override, but nowadays we just allow the easy recover upcodes.
00:01:46.787 - 00:02:26.795, Speaker B: So that's something that they modified here. Then we have the event logs and E transfer logs. And then I go through all these four one by one. So first about the calls that I insert the blocks, then about replacing the accounts and then about the easy recovery override. Then I go with how you can do the precompile override, which is easy recover override nowadays. And then I showcase kind of interceptor, but I don't actually use the interceptor. I just show these pictures of the use case how you can swap USDC to EAT using ETH simulate.
00:02:26.795 - 00:03:31.835, Speaker B: You are first approving it, then you are signing the permit message and then you are swapping USDC to eat and then you can actually get the swap succeeding. And here's an actual what the EAT simulate query looks like inside the interceptor and that you have the approved transaction as the first transaction to call. And then you have the swap transaction and then we have the pre compile or the easy recover override for the permit message. And then I saw that the interceptor shows that nicely simulates results that you are gaining some ETHER and losing some USDC and then making permit to allowance. And then I saw that you can get event logs and E transfer logs also out from the EAT simulate and that the eat logs are ERC20 logs with that special 0. Xe address. And that's how the Wonderloft log looks like ES20 transfer log but that address is a special.
00:03:31.835 - 00:04:26.745, Speaker B: Then I showcase the Governor Bravo execution example where we are replacing one existing contract on the mainnet with our own contract. And then we are calling that contract to simulate how the governance contract can be, how we can see what the governance contract would do if the governance decides the execution transaction. And here's an example of that. That we are then replacing that time block contract replacement with our own and then you're just executing the time block and yeah, seeing that there's eight been transferred in that case and then there's two existing. Actually I haven't checked if these links are still valid that we have get the Nethermite versions and then we have hive test and then we are still logging more people to implement.
00:04:27.685 - 00:04:30.397, Speaker A: Yeah, I'll update our link soon. All right.
00:04:30.541 - 00:04:31.625, Speaker B: These are wrong.
00:04:32.845 - 00:04:37.509, Speaker A: Yeah, now it's already wrong. Okay, so we'll update it.
00:04:37.677 - 00:04:40.253, Speaker B: Yeah. All right.
00:04:40.429 - 00:05:30.639, Speaker A: Go to implementation details. On the first slide we present the simplified architecture of what is actually happening. The parent blocks, the loop, the filling and processing and committing states. Then we go into the next slide with system changes and on the system changes we highlight the most like painful aspects that we encountered. What was actually changed, how we actually do it through overlays to not interact any data that is real and only do it simulation wise and other minor changes that we had to make. Then we go to the next slide with state updates. We show what would a developer actually need to do to allow this all to happen that he needs.
00:05:30.639 - 00:06:51.195, Speaker A: She needs to be able to allow contract state updates, user state updates and in real life. Currently for example, what I was playing around with this weekend and probably we will be playing around a little bit this week. The if call in guess the second parameter is currently the state overrides and it is like one to one mapping from there to here. So if the client already has that eth call state override it would be a little bit more easy for them to implement. On the next slide we show the overlays we had to create to actually make it all work. The overlays for trees, for state for coding and ability to overlay codes through pre compiles and how it stacks up and comes together in a simplified form of course, but it shall be more or less general for every user to see. On the next slide we show the EVM updates that we've had to actually do for precompiles so that it could be selected either to for example precompile code to be called or the overloaded precompile code to be called or redirected precompile code to be called.
00:06:51.195 - 00:07:44.361, Speaker A: And we especially indicate that there is a extra extra log situations. We go to the next slide and highlight the fact that actually we added a special change to the way we are doing logging. We had added one more event that we track and it is actually used for providing users with ability to if they set a special flag every time see the ETH transfers from anyone to anyone. And this hopefully it will be explained why we actually need this in Claris part. And then we go to the next slide with RPC updates. Yay. So hopefully everyone will be using Tracer for that going to the obvious updates.
00:07:44.361 - 00:09:04.781, Speaker A: In our case there were some difficulties with actually passing various dictionaries that were recent with complex data. So we needed to update it. Also we provide new configuration on RPC of max blocks that will be simulated in issimulate and there are all the traditional limitations that are also included and are also applied to each E simulator quest. Then we go to the next slide and highlight the validation mode, the fact that users can actually turn on the validation and meanwhile we are having as much of the transaction data filled up as possible. We actually allow the user to specify anything he or she wants and we will try to validate her transactions and blocks as real blocks would be validated on chain and so he or she would get real information on how good or bad the transaction are in terms of getting onto chain. So then we go to the next slide and highlight the skipping the magic feature that you want to set. Simulate for me block number one and then block number 100.
00:09:04.781 - 00:09:32.459, Speaker A: And we explicitly state that we actually do skipping. We do not skip. We run every block and by default the same limit is to 56 blocks. And so if the user would input only one, please simulate for me block number one block number 100. We would simulate all the blocks in between, but they will be empty. But the state will be updated. So we kindly ask our users to focus on using timestamps for cheaper simulations.
00:09:32.459 - 00:10:11.195, Speaker A: We go to the next slide and highlight the great effort that Kilari and Mika done on actual testing the new updates to hive tests. 100 hive tests is quite a lot and they allow us to check basically every part of functionality there is. We go to the next slide and we highlight the links that can be used and we highlight the use case that can be. We reiterate on the use cases that we see one of the most interesting and then we go to the end and have a discussion. Yay.
00:10:13.775 - 00:10:24.975, Speaker B: I guess here is that I've already kind of motivating what is the IT simplets. Oh, that's why. Yeah, yeah, sure, yeah.
00:10:25.435 - 00:10:43.277, Speaker A: To remind everyone that it is actually useful to be able to simulate forks of a tree wherever they want to have some ideas wherever they want to test something out to see what would go well or go badly on a block tree. All right.
00:10:43.461 - 00:10:57.077, Speaker B: So yeah, I guess with this links as well I should update this to the test ARP where the tests are residing. That's the hide fork. And the tests are not actually residing that repository. But I can.
00:10:57.181 - 00:11:12.855, Speaker A: Yeah. By the way, I had a question. So the actual for example code for some of the tests is residing in the main repo with execution APIs. So the question would be if the. If it is up to date.
00:11:13.915 - 00:11:27.015, Speaker B: Those are not up to date because we have been still finding bugs and I plan to update all those tests there when we're gonna more far in the future when all the tests are actually correct.
00:11:28.035 - 00:11:50.751, Speaker A: Yeah. All right. So yeah, that's pretty much it. 38 slides. I think we will take around like 45 minutes to present the basis of it and probably there will be like five to 10 minutes for questions and that will be it. And we are given one hour to do everything and yeah, I think it will be pretty. Pretty great.
00:11:50.943 - 00:12:00.795, Speaker B: Yeah, I was just yet sure how long for me it takes to go through those first slides but I maybe try to talk them through once before them see and then I know better.
00:12:02.375 - 00:12:42.705, Speaker A: Yeah. Yep, perfect. All right. So and also from our side I think we haven't done yet the progress on new bug fixes because I was focusing on actually bringing the functionality of state updates to Escall so that we would also have like have E simulate like implemented and propagated through every piece of the client. So I think I will finish it by soon and we'll get back to our unit tests that we shall still fix. Yep, that's it from our side. Any updates from your side?
00:12:43.965 - 00:13:45.375, Speaker C: Hey yeah, not a lot from my side but last week we had a call with a team reviewing one of the prerequisite PRs for multicolor in Geth and actually yes it turned out that. So yeah and then we discovered that thing with stateroot and state overrides. So because we want to update the stateroot based on the override as well, then we will not go with that approach of that pr. So now my colleague made another one and that has to be reviewed. But anyway these are just lay work that has to be done before like multicol is actually merged in. So yeah, we're making progress on like the review side of things and that's it.
00:13:51.275 - 00:13:53.255, Speaker B: There's no update from my side.
00:13:57.715 - 00:14:33.745, Speaker A: Yeah, so the question in the chart was if we have time the presentation. So the thing that you've seen today was definitely not the complete presentation. It was heavily reduced by all sides. So probably there won't be spoilers on the video on demand of for our call today, I think. And yeah, so we'll meet again in a few hours and we'll be able to actually like time how much it will take. I hope we'll get it through in 45 minutes. All right, so if.
00:14:33.745 - 00:14:39.525, Speaker A: When is the call? It's a good question. Let me share a link with you.
00:14:39.605 - 00:14:40.945, Speaker B: It's a couple of hours.
00:14:41.985 - 00:15:05.703, Speaker A: Yeah, so this is the link and it is 4pm London time. So in two hours. Yeah, in two hours.
00:15:05.874 - 00:15:08.375, Speaker B: 2012, 13 minutes.
00:15:09.315 - 00:15:18.615, Speaker A: Yeah, I think we'll share link on Telegram as well when we will get to it. All right, thank you all guys for coming. That was nice.
00:15:18.915 - 00:15:23.975, Speaker B: Yeah, I don't think it's supposed to be live in a way that it's not going to be presented that large audience.
00:15:24.515 - 00:15:37.457, Speaker A: Well, in my understanding they will record it, but they actually, at least from my understanding of Telegram chat, invited code developers so there can be somebody who would come.
00:15:37.561 - 00:15:45.245, Speaker C: But yeah, I saw it on Discord actually, so maybe I will also just join the call as audience.
00:15:45.745 - 00:15:47.965, Speaker B: Yeah, ask questions.
00:15:49.385 - 00:15:57.885, Speaker A: Yay. All right, so we'll see you all soon. Thank you guys for coming. Thanks a lot.
00:15:58.465 - 00:15:59.889, Speaker B: Bye. Bye.
00:16:00.017 - 00:16:01.805, Speaker C: Yeah, good luck, guys. Bye.
00:16:02.305 - 00:16:02.985, Speaker A: Thank you. Bye.
