00:00:02.560 - 00:00:43.610, Speaker A: All right, I think we can get started. I'm sure people will continue to trickle in. Yeah. Thanks all for joining very much. Appreciate all of the collaboration that's already been happening across a bunch of different perspectives and viewpoints. A lot of great progress already on just refining the vision for how we can make sure we are taking positive steps to the end game that we all want to get to around improving l two ux, while also not degrading the experience for any users or flows. And thank you to Marco and Jeff for doing a lot of the heavy lifting to get the draft of this ERC together.
00:00:43.610 - 00:01:04.380, Speaker A: Yeah, we don't have a huge agenda, although there is a nice list of open questions for us to get through today before we jump into a review of the ERC draft. Does anyone have anything they wanted to start off with or just mention here at the. At the jump?
00:01:11.160 - 00:01:56.110, Speaker B: I was going to propose taking as little time on the call today, but maybe on the next call or something, having a sort of parallel document of considered alternatives or forks in the road, because I'm a little confused with, you know, the comments about censorship proof, like completely abandoning the off chain registry or those kinds of things. Like, there's all these forks in the road that I just want to, like, capture and make sure that if those are going to be a separate eap, some days they're somehow written down. So I might be on the call trying to write things down, capture things that get tabled.
00:01:56.690 - 00:02:13.770, Speaker A: Yeah, that'd be great. Yeah. There's certainly a few different directions that we can take, I guess. Is this in reference to maybe was Wilson's recent message in the chat around, sort of just focusing on the off chain registry element or something?
00:02:13.850 - 00:02:37.390, Speaker B: Yeah, yeah. I mean, that's why I got pulled in here, I think. So I'm sort of curious because I noticed in the draft the fallback was status quo, and I thought the goal of either this or some future ERC was totally moving away from it. So I'm sort of trying to keep that separate and not slow down the other stuff with it.
00:02:37.730 - 00:02:39.786, Speaker A: Yep, got it. Okay, great.
00:02:39.818 - 00:02:39.938, Speaker C: Yeah.
00:02:39.954 - 00:02:44.790, Speaker A: If you don't mind, I'm happy to collaborate with you on that document. That sounds like a great idea. We should have that.
00:02:45.180 - 00:02:45.588, Speaker D: Cool.
00:02:45.644 - 00:02:52.440, Speaker A: Okay, well, then we can just jump into things. If no one else has anything, I'll hand it over to Marco and Jeff here.
00:02:57.940 - 00:03:31.560, Speaker E: Okay. I can maybe recap super quickly what I think is in the document, and then people can tell me if they agree or not. And, I don't know, maybe we can go on each of these points and see the major comments in there. So I would say that the first thing the document does is try to settle on this on a format, just syntax for what is an extension of an address with a chain id interrupt.
00:03:31.600 - 00:03:34.712, Speaker F: Do you mind sharing your screen so it's more visual for us?
00:03:34.816 - 00:04:04.240, Speaker E: Yeah, sure. A second. There is a bit of a limit to what I can make this large. Is this visible for people?
00:04:04.820 - 00:04:05.600, Speaker A: Yep.
00:04:05.940 - 00:04:40.564, Speaker E: Okay. Yeah, so basically, sorry, these three points mainly I wanted to touch on. So the first is the format. So here in the document, after the motivation, there is this syntactic format. So this is sort of the grammar of what this could look like. So this is the add syntax that is sort of email inspired where we have here the chain that is sort of the main problem that we need to look at. That could be an l one.
00:04:40.564 - 00:05:40.258, Speaker E: And this would be, this is similar to the case that we have today. I have an address and I just live on a testnet or a mainnet, for example. And then there is the case, more interesting where there is a name in there and then this name, we would like this to be a name of a roll up. And in this case we would like, and this is sort of the tricky thing that maybe is the most complicated part of this document. How do we do the resolution of this name so that we find the right chain id of this l two? And then if also the user is a name at this point, then how do we solve this username on an l two? So these are sort of the tricks that we try to go through in this document. So basically just the format. How do we build a registry of chain names for l one testnets, and especially for l two s.
00:05:40.258 - 00:06:47.664, Speaker E: That is kind of the driving case to replace basically what is now the centralized GitHub list? And then how we do, once we identify the right l two, how do we move DNS resolution? How do we continue it on that l two? Okay, these are kind of the main points. So basically after the format, the documents tries to go step by step on how do we do the resolution. So the simplest case. So the first step is to do the l one part. So for example, if you take this example, first we need to figure out how to resolve the ethnic, and in this case if we assume that there are a few of them, that this is just like its poly and maybe let's say less than ten of these well known l one's that they don't move too much, then this can still be a centralized list like it is today it's just a small file that lives in a wallet and that's it. So that's not a big deal. We expect to find in this local file, let's say a map in between eternity and all the information that I need to resolve the rest.
00:06:47.664 - 00:07:31.402, Speaker E: So I go from eth to, I need at least the chain id really in bytes, in exodus more. How do I identify? Because this is the piece of information that has to go inside the transaction that has to be signed. So this name on itself is useless unless we can get to this. And then in case we want to continue with more resolution, then we can also say point to the right Ens contract that lives on that chain id. So in this, I mean, if at every step we stop using names, then this is not useful. But I mean, this is kind of the point that we do want. So we need to keep following these addresses, which brings us to DL two resolutions.
00:07:31.402 - 00:07:55.240, Speaker E: Once we have this, we can go check the rest of the address. So in this case it was rollup. Eat. So we need to resolve rollup. To resolve roll up we can use the address that we found in the previous step and then this is going to guide us. So this is a bit of a, the most complicated part because we try to build this registry so that there is a unique mapping. We can get into this separately.
00:07:55.240 - 00:08:28.690, Speaker E: But then, so this is the resolution. How do I find the chain id of the roll up? And then once I did that, the last part of the resolution is okay, now that I know in which roll up I should go, how do I go there, find another ens address and then resolve my alice name. So these are the three steps. And here there is a recap that does the same steps. The first part is we just do it local. So imagine that eld list is the file that lives in the user phone or like the wallet. So this is still local.
00:08:28.690 - 00:09:04.860, Speaker E: Then there is the part where we try to find the roll up chain id. These are two calls and this is done on the l one. And then once we have this, we can continue resolving the name on DL two. And at this point we have all the information that we need and we can just send the transaction correctly signed to DL two. So this is a bit of a quick overview of the document. So I don't think it's worth getting into more details of each one of the steps. Does this make sense to everybody?
00:09:08.320 - 00:09:19.992, Speaker G: I'm kind of confused. Thanks for that overview. I'm kind of confused on the l one part. You know, if I have like zero xf. Okay.
00:09:20.016 - 00:09:20.176, Speaker E: Yeah.
00:09:20.208 - 00:09:32.970, Speaker G: Sam said the Eth maps to the root chain id. I see. So there's an off chain registry of L1 TLD's, is that right?
00:09:33.090 - 00:10:17.850, Speaker E: Yeah, yeah. So, I mean, we also discussed in a little bit in the channel, in the telegram group if this also should be on chain. It's just that it. Sorry, it's not a particularly big concern because like I said, there's supposed to be a few of them, and it does the side effect that basically, if I. If the only way to know the chain id of sepolia is to go to Mainnet, then it's sort of, testnets are supposed to be completely separate world where you can do your testing, while here you would have a testnet that depends on Mainnet. Like you need to first go to Mainnet, you can find the chain of your supporter, and then you can go do your testing. And it's a bit weird, and there is no that much reason to do this.
00:10:19.920 - 00:10:47.260, Speaker H: So I have a bit of a concern overloading the ETH. So in Ens names, the ETh actually means like use a particular resolver contract, if I understand correctly. But here ETH means look up in an off chain contract for off chain registry for a chain ID. So they look the same, but they have completely different meanings. And I think that's a concern of mine.
00:10:49.840 - 00:10:56.900, Speaker E: I see. I think you have a perfectly fair point. I don't know if. Jeff, do you have any comment on that?
00:10:59.080 - 00:11:43.762, Speaker C: So I feel like right now, I mean, I'm going to be asking the specific question, but me and Marco have slightly different opinions about this. And I thought it was still worthwhile to just talk to the group about how deep we go into this kind of abstraction of the ENS names. So as an EnS guy and doing ens for all this time, we don't really have this case where we very rarely like to have things like we have Alice Rollup ether, and Alice is not ens name. So in this situation, we'd have to change the resolution process. So it actually points to something like Alice Rollup eth. And it goes to that roll up to the l two. We don't have this l two resolution process right now.
00:11:43.762 - 00:12:20.930, Speaker C: Right now, everything starts from l one, and we use CCIP read to opaquely go get that data and then verify on l one. And that data can be on an l two, or it can be off chain. And in this situation, it may not necessarily be on, let's say, optimism eth. The initial Alice eth might actually be on zksync or l one. I have a concern as well about whether or not we should be creating these nicer looking address, you know, ens names, if you will, or I guess they're not really ens names. So yeah, I have.
00:12:23.150 - 00:13:06.562, Speaker E: Maybe. I think there, there's light to. So I would like to talk about what you, what you're mentioning, but I think here the concern is slightly different, is basically saying, so I think. I think the point is that I would like from the address to be able to start doing my journey of resolution. And I think, so you're right that we are a bit overloading this, but not really, because, I mean, today, if I tell you whatever eth, why are you assuming that this is on Mainnet and then you need to go to DNS? So sorry to ens. So this is sort of a, you have some sort of pre existing social idea about this. You say, ah, dot.
00:13:06.562 - 00:13:22.026, Speaker E: If this sounds like an ethereum thing, I know that EnS is the place where they register this. And so, so we're just trying to basically formalize this. We're basically saying, if you see dot e, you know that this is something that lives on Ethereum Mainnet. Right.
00:13:22.058 - 00:13:27.310, Speaker H: But it's kind of the other direction that I'm worried about because not all ens names ended. Ethan.
00:13:28.440 - 00:13:52.940, Speaker E: I see. So the point is that, again, you need to pick. So this is completely arbitrary. In the telegram group, people seem to like it. So this could be a new thing. But the point is that there should be one thing that allows you to start your resolution. Because if you have 15, then do you see what I mean?
00:13:53.990 - 00:14:25.210, Speaker C: Yeah. So I think I can probably answer his question a little bit in terms of like, if it was this way. So like, roll up eth. And we wanted to make sure that we're overloading eth to mean also start on Ethereum mainnet. Then of course we'd have to mandate in this eip that any l two roll up that wants to be compliant with the standard would have to use a ethname and not like a ploy z name. So if we did overload it, obviously we'd have to mandate that.
00:14:28.190 - 00:14:29.490, Speaker H: Yeah, that makes sense.
00:14:33.350 - 00:14:51.900, Speaker G: It seems to me that we should either, if we're going to solve for other l one s, we should either like properly solve for it, or we just shouldn't solve for it at all. And it feels like we're in this awkward middle ground where we're like, use tupolia in this chain registry. It's highly under specified.
00:14:55.560 - 00:15:39.230, Speaker D: Right. I mean, I think, I mean, one way to go through that question is to like start with the question what feels right for ethereum test nets? And then depending on the answer to that, like it might just be that whatever we do for testnets, it just, just feels like it. Obviously, yes, sensible thing to do for other layer ones to just do something isomorphic to that. Or potentially it might not. And if it's their first case, then that's fine and that's their outcome. And then if it's the second case, then that's our outcome too. And then it's up to them to decide do they want to do something parallel or do they want to do something different?
00:15:54.060 - 00:16:11.342, Speaker C: For my opinion, I guess, you know, it does seem more natural to have like a dot superlio. Otherwise you'd have to kind of overload. Not overload is the wrong word. Like add another identifier to be like at ethnet or something like that. Which it would be like, right?
00:16:11.366 - 00:16:28.690, Speaker D: I mean, the other option is like some just basically treating sepolia as being like an o two or I guess like gnosis Shane. Or, and just expecting it to have some kind of record that's like at the main net sepolia dot e ns.
00:16:31.150 - 00:16:33.290, Speaker C: Actually it's not the worst idea either, is it?
00:16:34.790 - 00:17:06.280, Speaker G: I think that like dot sepolia, if like, what does that, what does that mean? What does it polia mean? Like anybody can make a chain called sepolia. So presumably you're referring to some specific registry where it's called dot sepolia. And then the question is, what is that? What is that registry? And I think that we should take that question seriously if we're actually trying to solve this problem. And given l one main net, ethereum probably has the best, you know, decentralization security guarantees. If we want to make an l one registry, it probably makes sense to put it there.
00:17:07.500 - 00:17:48.970, Speaker D: Yeah, I mean, I think that's fine. I think I have this small philosophical hang up that in principle a testnet is supposed to be this kind of parallel universe that you go into where you do things for testing and those things don't touch mainnet. And saying that if you want to resolve an address that represents something on sepolia, then like, you can't avoid touching Mainnet. Like that feels a little weird. But if other people here decide that actually that's fine, then I'm totally happy to go along with that.
00:17:49.990 - 00:18:06.900, Speaker G: Well, but just so we agree on the cost, the cost of doing that is that you still need some registry. So you still have to pick a canonical place for people to fetch those records. And so what is that place? And what is sort of the uptime guarantees, the decentralization guarantees of that registry?
00:18:07.680 - 00:18:35.190, Speaker D: Yeah, yeah, that is fair. I mean, and I guess in practice, like in most of the test, that activity is like they're not even going to use like this type of addresses. They'll just like, they're a much more highly technical thing that just like directly uses zero x addresses without anything else added to them. So yeah, like, I guess it does feel survivable.
00:18:37.290 - 00:19:13.314, Speaker E: In terms of size, maybe. I'm just trying to avoid solving the problem here. The point is that what we do is already this having just a file somewhere that somebody put together and we trust it because it doesn't move basically at all. There are a few things. So I'm just basically here, I'm just saying I'm not going to fix that problem, we're just going to continue with that. It's just that when we put l two s in the same system, it starts to feel uneasy because there are many l two s and they move a lot. So we're just trying to fix the new problem and not try to fix the old problem.
00:19:13.402 - 00:19:40.000, Speaker G: The new problem, I'm not sure those are isomorphic. Like ETH today means you have, sorry, somebody's echoing my voice. ETh today is an ens thing, and if you want to resolve it, you go to l one. There's no off chain thing. You're talking about introducing a sepolia which doesn't exist today and would rely on a new off chain thing, that's also not required today. So I think you've changed the parameters.
00:19:41.030 - 00:20:14.690, Speaker E: I see. But at the same time, I mean today. So you're right that this is not the existing thing. At the same time, this is maybe a sort of formalization of what already informally happens. Like if somebody sends me an address without any chain id and they say, oh, by the way, this is my sepolia thing, you start to feel on your own the chain ids and all the other information that. So this is just a way of saying structuring a little bit what already happens informally.
00:20:17.430 - 00:20:25.770, Speaker G: That makes sense, I guess. I kind of thought the point of this EIP, though, was to get very formal about these things that were causing people to lose money and make mistakes.
00:20:26.590 - 00:20:40.740, Speaker E: Yeah. So I think this is what I'm trying to do. I'm trying to say let's make things more. Let's make it clear that today, just by looking at the name. Suppose that you're inferring that this is the. The chain id. So let's just write this down in a file.
00:20:40.740 - 00:21:07.220, Speaker E: So that is a bit more. More formal than just what happens in your mind. And I'm just saying, let's avoid the problem of putting this on chain, because it's just a few names and it's easy and we can keep the test separate. Like, if I'm a wallet developer, for example, it's not great that I need to connect to two networks. And, like, I know there are different delays. Different. So I know it's a bit.
00:21:07.220 - 00:21:17.660, Speaker E: But like Vitalik said, I don't have particularly strong feelings about this. I'm happy either way if people think it's important to put this on DL1. Absolutely. Like.
00:21:26.160 - 00:21:28.540, Speaker A: Maybe we can come back to this specific question.
00:21:29.750 - 00:21:43.050, Speaker E: Yeah, okay. So I don't know. Let's go to the second part. Or I don't want to direct this too much. Like, if I'd like to go for, like, highest concern first.
00:21:46.390 - 00:22:15.920, Speaker A: Yeah, I guess that's a good question. Does anyone have strong feelings here on, like, what is the. If we could only solve for what? Excuse me? If we could only solve for one thing on this call, or make progress on one thing on this call. What does that. One or two most important things here, because there's a handful. And, I mean, I'm happy just to go through the list of open questions, but if there's something that is obviously highest priority, it's a little bit unclear to me. Otherwise, I can just start going through the list of open questions here.
00:22:15.920 - 00:22:21.080, Speaker A: Yeah, thanks. Right here.
00:22:23.230 - 00:22:25.518, Speaker E: Yeah. We covered this, right?
00:22:25.694 - 00:22:31.770, Speaker A: We did cover that. Yep. Exactly. And number two, I think we also covered in the chat.
00:22:36.390 - 00:22:38.490, Speaker G: What was said about. What was said about number two.
00:22:39.470 - 00:22:40.918, Speaker A: I think that this is incorrect.
00:22:40.974 - 00:22:41.334, Speaker G: Right.
00:22:41.422 - 00:22:48.310, Speaker A: Aren't all. Didn't, I guess, unless I'm misunderstanding, maybe Marco can clarify.
00:22:48.350 - 00:23:34.878, Speaker E: So I think it's so basically saying. Yeah, so it's basically trying to say, okay, up to now, all the NS resolutions that were in l one, now we're talking about jumping from l one to l two. This seems like a big change. So I think so. Definitely. This is kind of like the important thing for rollups, or at least, I mean, I work at matterlabs, so the important things for us was to make sure that the resolution could jump to l two as soon as possible, because we didn't want people to register potentially many, many chain ids of l two s and l three s on l one. Or maybe the users they shouldn't have to create names on DL1.
00:23:34.878 - 00:24:18.510, Speaker E: We wanted to move to DL two as soon as possible. So this is definitely part of the motivation. So regarding our, how novel and sort of breaking with the existing. This is not at all, because we can talk about this. But so this is what Jeff just mentioned earlier, that there is already a way today, sorry, this is my note, there is already a way today using ens and ccip read to do the exact same thing. So to say, I'm going to do a little bit of resolution on l one, I stop and I get the instructions on how to continue on DL two. And this is what is already implemented by, I think, linear.
00:24:18.510 - 00:24:38.028, Speaker E: They have a blog post about this. So let's say that we are sort of doing the same thing, maybe in a slightly simpler way, because we don't need gateways, etcetera. But I would say it's not something new as a concept.
00:24:38.204 - 00:25:44.158, Speaker D: Make sense, I guess, like one big philosophical snake in all of this is that the path for resolving the ens of the username and the L2 that you're actually looking for an address on those two things are separate. Like, basically, like hypothetically, it would be completely valid to say, yeah, you know, like you have something like I have Vitalik eth. And hypothetically, yeah, or even like you would say, yeah, you know, like I might. I might decide to register, like Vitalik Linia eth. And the procedure for registering that would be on linea. And all of the logic that actually maps that Ens name to specific addresses would be on linear. But then at the same time, the specific thing that I want might actually be say, yeah, Vitalik Polygon eth, for example.
00:25:44.158 - 00:26:34.500, Speaker D: And if that happens, then technically, yeah, fully resolving, well, resolving what not even actually require going into polygon, right? It would only require going into linea because that's where the, that's where the record is, but the address would still be a polygon address, right? So I guess one question is like, is that also how other people are seeing this? And if. Or, I guess either if so, or if not, like, is there any way in which we're accidentally making that too confusing?
00:26:37.280 - 00:26:41.820, Speaker E: I don't understand why you say that you need to go linear to do the resolution.
00:26:43.160 - 00:27:10.830, Speaker D: Because like, the way that an ENS name works, right, is that there is a procedure for resolving an ENSN, and by default that procedure only involves being on. Being on l one, because Ens lives on l one, right? But with CCiP read, that procedure might involve going on to specific l two s through the CCiP read system.
00:27:16.060 - 00:27:37.440, Speaker E: So the thing that I'm missing a bit is the use case that I had in mind was very different, is the thing that everything is a subset. So, like, if I go on linear, is because all my information is there on linear, right? So it's a bit. But we understand that there are other use cases. So I would like to understand what is. So why would you put on linear your information about Polygon?
00:27:38.340 - 00:28:04.350, Speaker D: I think because like a user, I mean, a user wants to have, I think, like, all of their Ens information in one place. Right. I like you want your ens record to live in one place so that it's easy to edit. And like, that's the way that Ens works today. Right? Like, if we're saying it's going to work differently, then, like, that's suggesting a change to ens.
00:28:06.090 - 00:28:13.166, Speaker G: Maybe I'm confused. I sort of thought, you know, Ens today has a way for a name to specify an address per chain, correct.
00:28:13.198 - 00:28:13.574, Speaker D: It does.
00:28:13.622 - 00:28:19.022, Speaker G: You'd put that record on any chain, and that would continue to work as it does today.
00:28:19.086 - 00:28:19.686, Speaker D: Correct.
00:28:19.838 - 00:28:34.278, Speaker G: And what we're specifying is a new URI that's more specific. It can be resolved sort of without the normal Ens look up of your specific choice on that particular chain. It sort of has all the information not exactly.
00:28:34.334 - 00:28:34.550, Speaker A: Right.
00:28:34.590 - 00:28:52.240, Speaker H: We want to be able to say like this Ens name on a certain chain so that when you look it up on, like, in the ENS records, you know which address to get, like where the receiver still gets to specify their address on each chain, but the sender picks the chain that they want to interact on.
00:28:53.460 - 00:29:21.070, Speaker D: Right? But like, so, if so in the, like, status quo, right? Like it is. If my EnS record is a subdomain of linea eth, then even if you want to determine which address to send to me, in order to send to me on polygon, you would have to go on to Linea, I mean, indirectly through the CCIP read mechanism. But you're still going on to linear, right?
00:29:23.090 - 00:29:56.720, Speaker G: Yeah, that makes sense. And I think, let me reframe what I said that you currently, if I say, hey, send it to Wilson Cusack, Ethan, and I send you my, I have to tell you, additionally, send it to me on polygon. And I think the problem we're trying to solve is give people a single Uri that expresses their name and where they want to receive it, but they would continue to use the same CCIP and Ens lookup and find wherever I've sort my address on polygon for Wilsoncusack eth. That would all continue to work as expected or as it does today.
00:29:57.340 - 00:29:59.166, Speaker D: Right? Agree. Yeah.
00:29:59.348 - 00:30:02.350, Speaker G: So is there a new problem? I'm not sure if I misunderstood.
00:30:03.530 - 00:30:05.510, Speaker D: I don't think there is. Okay.
00:30:23.370 - 00:30:24.790, Speaker G: Should we go to question three?
00:30:25.400 - 00:30:26.700, Speaker A: That sounds good.
00:30:27.160 - 00:30:35.192, Speaker E: Yeah. I'm not super familiar with the polymarket use case. Can somebody explain this? Wait, wait.
00:30:35.216 - 00:30:56.808, Speaker C: Before we get to question three, I just want to clarify. So like, I think question two is talking about what you wrote Marko, with the kind of like vitalikine. And obviously this is kind of completely new resolution process that doesn't go through CCIP reads. So are we agreed as a group whether to go towards us or against this? Because I wasn't quite sure if that was the conclusion.
00:30:56.904 - 00:31:00.340, Speaker E: I was hoping to go back to that point in question four.
00:31:01.320 - 00:31:05.620, Speaker C: We can. Okay, that's fine. Yeah, my bad.
00:31:07.040 - 00:31:48.290, Speaker G: Yeah, I think question three is maybe we don't. I think maybe Niran wrote this or I'm not sure if the person who wrote this is on the call, but yeah, maybe we should hop to four if it's proximate. I'm confused on what you're saying, because my understanding from what we just said is that we can solve how we express it, the format of how we express it separately. But let's say it's Wilsoncusack etholygon or polygon at base eth, you would still use CCIP reading. All you've given me is a format to express where exactly I want to receive this. Am I misunderstanding something, Jeff?
00:31:48.870 - 00:32:25.380, Speaker C: Yeah. So you're not misunderstanding at all. It's just Marco obviously wanted to add something extra to the ENS resolution. I mean, I'm not sure if I even call it the ENS resolution process. I would expect it's this own special resolution process for this EIP that would only be implemented maybe by wallets and l two s and clients. Um, that would be something on the lines of having a canonical subdomain registrar like linear EtH or zksync EtH. And then instead of having Vitalik eth at base EtH, it would be something like Vitalik.
00:32:25.380 - 00:33:10.546, Speaker C: And instead of. And because Vitalik isn't, you know, a fully qualified ens name, it would just assume that, like, it lives on base EtH and check base eth's l two ens registry address and then do the resolution process on the l two. And I think Marco wants to do that in a correct. You can add anything, Marco. If I'm getting this wrong, but he wants to do that because it would allow you to do these local reads without having to do the whole back and forth with CCIP read, which would decrease latency. Now, I'm not sure if this, I mean, I think the idea of it makes sense. I'm not sure if it makes sense for the CIP, and I told Marko that, but I thought it makes sense to at least talk to the group about this because obviously a lot of you guys are working for l two s as well.
00:33:10.546 - 00:33:18.270, Speaker C: And at Ens, I feel like it's a little bit confusing, but you know, maybe it makes sense. I mean, we have talked about doing, trying to cut that round trip a little bit more.
00:33:19.930 - 00:34:04.966, Speaker E: So I think. So at the beginning of the document, we were working with this syntax and I was trying to make this work. And then while going through the document, Jeff explained to me several times, I was a bit, it was a bit hard to get to, but he explained to me really well this ens and CCIP read. So now I understand a bit better that the two things are very, very close, and I'm a bit undecided actually on which one is the right way to go. So from a point of view of syntax, there is basically very little difference. It would be sort of user rollup, I don't know, eth. And in the other case we were talking about user at rollup e.
00:34:04.966 - 00:34:53.049, Speaker E: Okay, so in simple cases, this is basically, I mean, it's a very small difference. I'm not sure if there is. So there are definitely a couple of problems that we identified while working on the draft that needs to be fixed, which is for example on linear. For this, for example, the solution that linear used, the roll up here, still has the problem that somebody else could register with the same chain id. So this could be lead to spoofing, et cetera. So these are things that we can fix in the current EnS CCCIP read, and also what Jeff was mentioning about. So right now, in CCIP, read uses an external gateway.
00:34:53.049 - 00:35:46.150, Speaker E: While one advantage of the draft is that you don't need to use an external gateway, you just need to connect. Like if you have two nodes running, like if you're a huge wallet, for example, and you have your own nodes that you trust that are synchronized to several roll ups and mainnet, you don't need to go through any gateway. Like you can do all your resolution on your own, and it's probably more trustworthy, less verification needs, etcetera. But again, this is something that can be just retrofitted into a specific version of CCIP read where you have a specific format in the gateway, and you have a specific way to verify the information that you get from there. So I don't think we are like, this seems like special cases of a more generic thing rather than a different solution. I'm wondering if there are. So I was trying to sort of show the.
00:35:46.150 - 00:36:14.774, Speaker E: The parts where these things are the same, or they could make the same. I'm not sure if there are other things that are drastically different. Like, for example, somebody was saying in this syntax, you really have a very sharp distinction from what is the chain part and what is the user part, which goes into. So here in the format, you have really, like, everything that is on the left is the address, and everything on the right is the. Is a chain id. So here is a. It's.
00:36:14.774 - 00:36:28.970, Speaker E: It's less clear. Is this a huge deal? I don't know. So, I don't know. I think one. One point of discussion where there's not super clear to me is, are these two things doing the same? Can they be made to be the same, or do we want them to actually be very different for.
00:36:30.790 - 00:37:21.890, Speaker C: I mean, just as you were talking, I just started to feel that actually, this doesn't really, for me, make sense in this spec, just because I feel like this could be a very generic CCIP read extension spec, where you have a generic way of being like, okay, this is data on a specific l two. Like, when that error comes. So the CCIP rethrows an error instead of going to the. It obviously can give you a gateway, or it can give you a specific chain id that you can go look it up yourself. And this could work generically, not just for Ens, but for any information and any other protocol that also uses EIP 368, I think it probably makes more sense in a separate spec. And I know obviously zksync wants to do it like this because it saves round trips, but I think it might make sense as a more generic spec that would help other protocols also using ERP 368.
00:37:27.950 - 00:37:49.088, Speaker G: Jeff, sorry. There's a lot of things that Marco went over, and then I feel like I lost the plot a little bit. So the point you were just coming down in favor of is a spec that's user etholup eth, or, I'm confused, what you were just endorsing at the end. I don't know if you can type.
00:37:49.104 - 00:37:51.856, Speaker E: It in the chat. Yeah, I don't know about Jeff.
00:37:52.048 - 00:37:54.300, Speaker C: Oh, you're talking about me, or something about Marco.
00:37:54.800 - 00:38:13.380, Speaker G: I was talking about you. I thought we were talking about this. We started talking about, yeah, we started talking about Linnea. Sorry, can you just specify the performance that you're, or the syntax that you're endorsing is helpful.
00:38:13.920 - 00:39:00.990, Speaker C: Sure. I mean, I was taking it from a more high level position because basically this whole syntactic kind of like debate is related to basically Marco's talking about reducing latency by not going through the CCIP reprocess. So the CCIP reprocess, just a recap, is basically this process where a contract will error out with an off chain error, and then it will give you a gateway. And so you have to go to this gateway, run an HTTP request. The gateway will give you back some information, that information you'll take, and then go and do the proof yourself on l one. And so this is kind of back and forth that you've kind of wait from the gateway to do all these things. And so Marco wants a way to essentially do CCIP read, but without having to talk to a gateway.
00:39:00.990 - 00:39:16.790, Speaker C: And so right now I feel like we're talking about how to implement this within this spec, but it's actually, it could be a very generic spec that allows not just ens to do this, but anyone using CCIP read, because CCIP read is not a ens specific spec.
00:39:17.890 - 00:39:18.410, Speaker G: Thanks.
00:39:18.490 - 00:40:08.522, Speaker D: I guess. I mean, one thing there, right, is that if we want to think about the longer term future of stuff like CCIP read, right. Like it's like what the thing fundamentally is, right, is it's basically like the fallback light client if you don't have any other kind of client. Right. And that, and so if you have some other like, way of reading that l two, that's even faster than in the long run, in principle, you should be able to. Right. And I think there's definitely in aspects to taking the current scheme where it's like there's something inherently transitionary about it.
00:40:08.522 - 00:41:05.600, Speaker D: And like, I think, like, basically there is this longer term roadmap that goes into having a much fuller way to talk about in this particular case, I want to read a particular thing from l two that will, and that'll probably migrate over time, like, you know, if we figure out sub protocols and the concept of listing IP addresses and what might end up going away and so on and so forth. So it's like, I think it's also prudent to basically make sure that stuff that we're doing here and stuff that happens within CCIP and light clients are sort of as independent of each other as possible, and that we're not making assumptions that constrain them.
00:41:08.620 - 00:41:47.668, Speaker E: Maybe one thing that is related, and I just saw it in the document. So I was a bit concerned about the degradation of the verifiability that you have. So today, if I send somebody, I can look at my ledger, I can look at the x of the address, I can check the chain id and I sign. And I'm happy if I need to go through a very complex resolution process. So, I mean, right now, what I'm hoping is that the resolution process is real. Like, I could do it by hand, like I do a couple of rpcs. I resolve roll up to a chain id, I resolve the user to one address, and that's it.
00:41:47.668 - 00:42:12.450, Speaker E: I sign. And I'm sort of like, if I'm sending a million dollar, I can do this by hand and make sure. While if I have a very complex chain of. I went to linear, where there is my DNS stuff. And then that sent me to Polygon. That sent me somewhere else, and there is a cip and a gate. So at that point, like, you're really trusting what, like, you really need to trust all the.
00:42:12.450 - 00:42:39.380, Speaker E: Like what the wallet is doing, basically. So, I don't know. Like, in this case, it's very sharp, the distance, the difference between the two things. But again, if this could be any name posted anywhere, then again, we get into this game of this could. So, I don't know, it's just. Again, I'm not just trying to add more complexity to the question, but I think it's relevant.
00:42:43.280 - 00:43:17.360, Speaker F: Hey, folks. I just want to make sure I'm keeping up with this discussion. So what we're talking about trying to simplify a name resolution. So let's just make an assumption that we go with username at rollup eth. So the resolution will look like I'm going to go to l one ens, I'm going to look up the rollup ethan address, right? And then I'm going to go to that roll up. And I have my local resolution directly on chain because the NS contracts are deployed there and I don't need gateways, middlemen, nothing. Right.
00:43:17.360 - 00:43:32.660, Speaker F: In order to do that resolution. The way that I see it, it's a parallel to how DNS works in the non web3 world. So is there a major drawback to this? Or am I misunderstanding the problem?
00:43:34.180 - 00:43:51.720, Speaker D: Right. So I feel like the part is pretty well understood. Right. The part that's a little bit more tricky. If you just do userolloff eth, then what is the procedure for resolving user.
00:43:54.100 - 00:44:00.010, Speaker F: The user should be resolved on the roll up if the enf.
00:44:00.430 - 00:44:13.970, Speaker D: Okay, okay. See, so this is different. Sorry. Because the difference is that userollup etH and user ethollup eth could potentially mean two different things.
00:44:17.310 - 00:44:30.498, Speaker F: Okay. That's not how I'm thinking about it. You user that roll up, that Eth would have a user that EtH registration on that roll up. Like it would be local to the change.
00:44:30.554 - 00:44:55.160, Speaker D: Right. See, but. Okay, right. So this is something that's just like, it's different from the way that ENs works today. Right. Because the way that ENS works today is the user ETH specific, like points to a resolving process where that resolving process starts on layer one and potentially through CCIP read or something. It could even go to go into a bunch of other L2s and layer threes.
00:44:55.160 - 00:45:31.270, Speaker D: And based on that, it outputs a mapping from chain to address. And then you would look in that mapping and then you would see which address which addresses it pointing to at the roll ups that rollup eth points to. That's a different procedure from saying, okay, first we do rollup, ethan, and then in order to resolve the user part, we just immediately start the resolution process inside the roll up.
00:45:33.170 - 00:45:39.314, Speaker F: Understood. So you're talking about backwards compatibility of existing names. Like what do we do with them? Right. So if somebody.
00:45:39.362 - 00:45:50.860, Speaker D: Right, or. Yeah, or I guess I'm just like, I just want to highlight the fact that like, these are two different, like, these are two different paths. Yeah.
00:45:50.900 - 00:46:51.008, Speaker C: I would just like to highlight as well that if you start to enshrine something like, let's say it's base ETH and it's like, vitalik, what you're kind of doing right now by saying that I'm going to go to the l two to resolve Vitalik at base EtH is that you're kind of enshrining base EtH as the only ens name on base. But actually right now it's possible to have other names on base. Like for instance, on optimism right now there's a subdomain registrar called Opternames Eth. And optimames ETh gives out subdomains on optimism. But optimism might have their own optimism ETH and then give out subdomains. And so there is some clash with like, okay, are there any other ens names on this l two? Now, it's currently possible with Ens, we don't have any restrictions to this. So I think there are some other trade offs as well to kind of enshrining this, in this process where this EIP might bias a single subdomain of.
00:46:51.024 - 00:47:47.240, Speaker G: The ETH, I really think we should avoid creating a new, like, I'm trying to, trying to say what we should avoid without saying we should avoid this whole EIP. We should avoid like trying to resolve some specific problems that enfolds, like in my opinion, everything to the left of the app, let's just say, is a string. It's like a black box, it's an address, it's an EnS name, it's a different string format. I don't think this proposal should try to solve that. I think the proposal is trying to describe, give users a way to describe intent around where they want to receive funds. And this sort of gets to my question and the thing number five, like, it feels like we started on this path and we discovered nested problems of like oh wait, in order to resolve l two s, we need like a trusted registry of l two s. And we have sort of solved that.
00:47:47.240 - 00:48:07.560, Speaker G: That could possibly be its own EIP. I think we now have also said, oh, do we also need a trusted registry of l one s or is that strictly out of the question? I think we should decide whether that's in scope or out of scope. But yeah, I do wonder if like getting alignment on some of these building blocks and then coming back to the original question would help.
00:48:10.740 - 00:48:27.560, Speaker F: Just to address your question, Jeff, first, I mean, are we not allowing multiple roll up names to the same chain id? So if optimism has multiple that they want, they can just register those as a separate.
00:48:28.830 - 00:49:19.230, Speaker C: So I mean, this probably should be discussed in this call as well, or maybe in a later call. But the EIP talks a little about spoofing, and one of the ways we deal with spoofing is having something like another, like a second mapping of chain id to name. And I guess you could have multiple names. That's just not how we've done it in the spec. But yeah, currently it would be chain id to optimism etH, and optimism eth would map to chain id. And that's kind of in part, the resolution process would be to verify this and make sure that they're pointing each other to make sure it's not like a spoof. So maybe optimism with OTP mism isn't verified and the wallets and clients that are resolving this will know that it's actually, it's not mapped from chain id to OTP instead of OPT.
00:49:19.230 - 00:49:46.960, Speaker C: So that's what we have in the spec right now. And yeah, I think having multiple names that go to a single chain id might get confusing, and at the very least, they'll still be, like, a centralized arbiter of these multiple. I don't see a general benefit to having multiple names to a chain id, if you know what I mean.
00:49:47.860 - 00:50:00.046, Speaker F: Understood. Okay. And Wilson, my question is, if we limit the scope of the CIP just to chain, um, registry, does that actually solve any problem for us? I just want to.
00:50:00.118 - 00:50:32.780, Speaker G: I'm not. I'm merely pointing out that it could possibly be split into two eips, and further saying that the process you described does not match how Ens works today. And I think it would be great to not change how Ens works today. It's a good username resolution system, and so I think we should focus on expressing. I want this thing on this chain, at this user identifier. That user identifier could be an address, it could be an Ens name, in which case, we leverage the existing Ens resolution process, which uses l one, as Jeff was describing.
00:50:39.480 - 00:50:46.220, Speaker F: Okay. But on its own, I just want to clarify that actually helps us and solve the problem. Don't know which problem.
00:50:48.000 - 00:51:00.620, Speaker G: It solves. The problem that we currently don't have. A way to give a string. For me to give a string to you that tells you where I want funds in a comprehensive way. I think that's what we're trying to solve.
00:51:06.240 - 00:51:12.426, Speaker F: Okay, but you only. You were saying, just do it in two separate eips, one for name and one for chain.
00:51:12.568 - 00:51:36.570, Speaker G: I'm not saying it has to be two eips. I'm sort of just pointing out it feels like there's, like, four different debates happening at the same time. And it might be helpful to first align on some of the building blocks required here. And it seems like one of the building blocks is we need a trusted registry for l two ids, and mapping those back and finalizing that could be helpful on its own. Before moving on to some of these other questions.
00:51:39.910 - 00:52:17.210, Speaker C: I mean, I think I can just maybe re explain what Wilson's saying. I think he's basically saying that Jefflau eth at optimism eth. Jefflau ethtimism eth is an okay way to express it. It doesn't have to be jefftimism ETH and change existing standards. So it might be longer, and it might not have this advantage that Marco wants of getting around CCIP read for lower latency, but it still solved the problem. I think that's what he's talking about.
00:52:20.070 - 00:52:22.370, Speaker F: I hear you. I do think it's complex.
00:52:27.550 - 00:52:58.654, Speaker A: So we have six minutes left. How do folks want to best use these final six minutes? I think, yeah. What we've been discussing, what Wilson has flagged, is probably a good next step to make sure that we are separating out the various questions or building blocks to make sure that, yeah, we can answer each of them and in which order. So maybe we can do that async after this call. If anyone wants to help out with that. Maybe Marco. Jeff, I don't know if you have strong feelings here.
00:52:58.654 - 00:53:07.440, Speaker A: We have a smaller group dedicated to ERC drafting. We can take it there in the main group, but.
00:53:08.100 - 00:53:40.860, Speaker D: Yeah. And then I guess in terms of just a timeline, like, what's a next step is, are we getting to the point where we would want to actually publish those ercs and get them talked about in a larger circle? Do we want, like, another round of this to, like. Actually. Yeah. Like, realign ourselves on the whole package? Like, well, what's our feeling?
00:53:41.240 - 00:53:50.940, Speaker A: I would lean towards aligning ourselves a bit more, at least on the building blocks, before we. And then. Yeah, maybe they published by end of next week, if that makes sense.
00:53:53.680 - 00:54:41.744, Speaker D: That makes sense, yeah. I think having an internal live timeline for publishing, I think, is good. I mean, I think, like, this stuff can be staggered, right? I think so. Like, we could decide, for example, that our deliverables for step one are just, let's say, the chain database inside of Ens and the address format that uses the ADHD. And there's, like, things that this obviously does not. Does not quite cover. Like, it doesn't quite cover, like, the really ideal way to handle and quote the polymarket use case, for one example.
00:54:41.744 - 00:54:45.020, Speaker D: But that's just something we can keep figuring out over time.
00:54:46.640 - 00:54:47.380, Speaker A: Right.
00:54:51.210 - 00:55:06.190, Speaker F: Can somebody maybe write out what that polymarket use case is so we understand it? Maybe. Wilson, strong feelings about how it should go. You can join the working group with us. We value your opinion.
00:55:06.890 - 00:55:13.082, Speaker G: Yeah. Happy to be present. If I can be helpful. I think Vitalik wrote out the polymarket one in a tweet or something, so maybe somebody can.
00:55:13.146 - 00:55:20.780, Speaker D: Yeah, yeah, I just posted the tweet in the chat. Thank you. Yeah.
00:55:23.360 - 00:55:44.820, Speaker A: I guess in the final three minutes, if there's no other questions, one thing that we probably won't answer in the final three minutes, but it's good for us to frame as one of these main questions is going back to this. Yeah. This question that Wilson added, number eight, is making these human readable a mistake? I would be. It might be helpful if anyone wants to lay out the bear case quickly for why it could be a mistake.
00:55:47.700 - 00:56:08.804, Speaker G: I think I can lay it. I don't know if Yoav is on the call. I think he maybe had some thoughts on this as well. But I think it's interesting. Again, given we're reusing ETLd in a different way, maybe we need to solve that. But it could be helpful to distinguish these from usernames. For example, I think the left of the app could be a username, but the rest of it should be machine readable.
00:56:08.804 - 00:56:14.090, Speaker G: And maybe it should be more complex to suggest to people they might make a mistake. Yeah, yoav, go ahead.
00:56:15.390 - 00:56:49.024, Speaker I: Yeah. When I was saying it was a mistake, it's not about being human readable, but human writeable, so it could be addressed in a different way. My concern was that people think that it's okay to edit it. That. Okay, so we appended the chain, and I want to send someone to someone on another chain. So I'll just edit the address manually and change the chain name. So there's a risk that we miss the mark here and people will still make the same kind of mistakes that they do now.
00:56:49.024 - 00:57:33.030, Speaker I: So one way we could solve this, at least for addresses, not for the En, not for the case where the user is also an ENS name. If it's an address, we could change, for example, the way we calculate the checksum. We could say that the checksum should also include the chain part. So it's human readable, but if you try to modify it, if you try to change the chain name, the wallet will say it's an invalid address because the checksum will no longer be true. So it's. So the concern wasn't about it being readable, but about people trying to modify it manually, which they should never do for an address.
00:57:34.090 - 00:57:35.250, Speaker A: Yeah, that's a good point.
00:57:35.370 - 00:58:04.220, Speaker E: Maybe a quick answer. So I think the fact that using names maybe is helpful in the sense that right now if I just write address in exodecimal and chain id in exadecimal, I can sign and send and maybe lose my money or something, while right now my wallet has to solve these names. So if the name does not exist because I changed, I don't know, Coinbase for something else manually, then maybe it's gonna fail. And so there is less of a chance of that problem. Is that so? Or is it the same?
00:58:07.920 - 00:58:09.820, Speaker I: I'm sorry, I didn't quite understand.
00:58:10.920 - 00:58:15.940, Speaker G: I think we're at time. I think it's a good question. I wonder if we should just take it as an action item to discuss further.
00:58:17.400 - 00:58:18.180, Speaker D: Yeah.
00:58:21.760 - 00:58:26.130, Speaker A: Okay, great. Any quick final thoughts in the final 10 seconds here.
00:58:30.030 - 00:58:38.010, Speaker C: Nothing for me, but just maybe I didn't understand the question either. So maybe whoever asked it can reiterate in the chat and I'll think about the two.
00:58:39.830 - 00:58:47.566, Speaker A: Sounds great. Thanks, everyone, for joining. If you want to be in the working group, just drop a message in the main group. All right, thanks all.
00:58:47.678 - 00:58:48.230, Speaker C: Cheers. Bye.
