00:00:00.680 - 00:00:01.570, Speaker A: Hello, everyone.
00:00:02.390 - 00:00:04.690, Speaker B: I heard this new nethermined version.
00:00:05.150 - 00:00:30.230, Speaker A: Yep. There's new nethermined version. And the current version that is, that you've tested before that will be testable for basically everybody as it will be a part of our release candidate for 1.28.0 rc. So. Yep.
00:00:31.050 - 00:00:34.962, Speaker B: Do you know, Micah, if we can run those release candidates in those node.
00:00:34.986 - 00:00:45.830, Speaker C: Providers, anything that makes it to Docker Hub, we can, we can use. And I believe Lucas may be able to correct me wrong here, but I believe all the release candidates make it to Docker.
00:00:47.890 - 00:01:09.760, Speaker A: Yeah, of course. And so basically there will be a release candidate that will be with like the version with issues related to blob related stuff. And there is an update that I created for you in the new tag esimulate. So I think we would want the.
00:01:10.660 - 00:01:12.716, Speaker C: Yeah, I think we want the e simulate one.
00:01:12.868 - 00:01:20.930, Speaker A: If this guide fixes. Yes, you do. And it will have everything that is in 1.28. So.
00:01:22.670 - 00:01:28.170, Speaker C: Do you remember how to do that? Kalari, can you create a pull request and I can review it for the operations repo?
00:01:28.950 - 00:01:30.250, Speaker B: Yeah, I can do that too.
00:01:30.590 - 00:01:31.450, Speaker C: Okay.
00:01:32.870 - 00:01:37.370, Speaker A: All right, we've got a new person today. Hello, Chirag.
00:01:38.790 - 00:01:44.970, Speaker D: I'm just. I'm just here to see what you guys are like. Just an observer.
00:01:46.510 - 00:02:01.950, Speaker A: All right, so basically we are closing. Closing up to the like, public release, at least release candidate. So we'll see how it will perform on real people soon.
00:02:04.290 - 00:02:12.910, Speaker C: Did Cena mention he was not going to make it today or is he just running late? I don't remember seeing something from him. Maybe I missed it, though.
00:02:14.940 - 00:02:24.732, Speaker B: I guess there's no info from him. Do we have other stuff? I don't have any updates, but yeah, I would get the new version that I could run the test against it.
00:02:24.876 - 00:03:13.830, Speaker A: Yeah. I had a question for you in regards with the trailer. In one of the issues. Give me a second. So, in one of the issues, you referenced how transaction behaves on Sepolia, can we somehow isolate its behavior onto, like, to make it work from our block overrides, purely without like, need for a particular, particular chain or setup? Because basically, as you use the latest base block, the state would always like, run through and update. And so you would basically never get the. The same patches that you want to expect.
00:03:13.830 - 00:03:18.190, Speaker A: And that is a potential issue with the test.
00:03:18.770 - 00:03:52.310, Speaker B: Oh, yeah, I think that was specifically on sepolia because chain id changes. That changes the hashes. And then we cannot make a test that has kind of different chain ids. So it's chain id specific on what the hashes would become. I don't think it's about the latest. I think otherwise the test could be probably made so that the latest doesn't matter. But it's just only about the chain idea should be the same to kind of get the same hashes.
00:03:55.410 - 00:04:38.510, Speaker A: Well basically please do add a some output to that issue so that I could like at least try to maybe better understand. What do you mean by that. And also there was an issue called nethermind defaults. Two is zero, zero and not null. I tried to update it on my side, but if you would provide an expected output pair, that would be great. So basically there is hope that in current version it will be fixed. But if you would try it out and like post the expected reply versus the reply that you got, that would really help.
00:04:38.510 - 00:04:39.750, Speaker A: That's it.
00:04:40.730 - 00:04:41.510, Speaker B: Yeah.
00:04:43.010 - 00:04:43.830, Speaker A: All right.
00:04:44.210 - 00:04:57.140, Speaker B: The simple case is I'm just making a call and then getting the transaction hash. And I think in that case it should be the same hash in all the networks other than the chain id.
00:04:57.960 - 00:05:02.408, Speaker A: Why? But there is the like state route.
00:05:02.584 - 00:05:32.650, Speaker B: And it's doesn't get modified for that. The transaction has only depends on the same transaction. It doesn't depend on the state at all. Yeah, I think the only state is kind of the chain id, which it depends on. But that's basically, yeah, but you don't have to need to send. The transaction has to already know the transaction has. But the chain id default is getting get from the multicore or the each simulator.
00:05:32.650 - 00:05:48.586, Speaker B: And in that case, I'm not setting the chain id, so it's setting some default chain id value. And I feel it should default to that current chain and not to. But you have to test that. You need to set your chain id to send to zeppelin and then try to get the transaction hash.
00:05:48.698 - 00:05:50.510, Speaker A: Yeah, all right, we'll try it out.
00:05:51.890 - 00:06:11.970, Speaker B: I'm expecting that the nettermind is currently saying that the chain id is one or zero or something like that. But I didn't test how I would get the matching hash, like in get. We had the issue that the chain idea was zero. If it's not set, see how fixed that.
00:06:13.510 - 00:06:23.210, Speaker A: Yeah, I think hashes may be something that will, because all, basically most of the issues currently are hash related.
00:06:27.110 - 00:06:35.610, Speaker B: In this case maybe about the default value of the chain id. And the chain id kind of doesn't matter, except only for the, it only matters for the hash.
00:06:37.920 - 00:06:39.620, Speaker A: Yeah, I'll take a look then.
00:06:40.040 - 00:06:40.820, Speaker B: Yeah.
00:06:41.760 - 00:06:52.940, Speaker A: All right, so we dragged time as much as possible in the waiting for Sina, but probably he won't come today. Has anybody anything else to add?
00:06:54.920 - 00:06:56.180, Speaker C: Nothing from me.
00:06:59.280 - 00:07:05.160, Speaker A: All right, then. So we'll see you all next week. Thank you all for coming.
00:07:05.660 - 00:07:21.668, Speaker C: Just one quick question. Sorry. The version that we're at, the AstMLa version we're going to be testing, is there any chance that that will make it into the upcoming 120 whatever release if everything goes good? Or is that probably going to be delayed until then released after that?
00:07:21.804 - 00:07:38.810, Speaker A: If you would say that everything in this version is good, it will be like with these fixes in the release. If you will say that not everything is good in these fixes, the default, like previous version of e simulate will be there.
00:07:39.310 - 00:07:41.846, Speaker C: Okay. So we'll try to get a review.
00:07:41.958 - 00:07:54.462, Speaker A: Simulate will definitely be there, but it's like complication. Be it with blobs or be it without would depend on the fixes that I've uploaded today.
00:07:54.526 - 00:07:55.182, Speaker C: Okay.
00:07:55.326 - 00:08:03.610, Speaker E: Yeah, yeah. We can try to pick any pr the release at any before it. Right? Not a big deal.
00:08:05.670 - 00:08:08.970, Speaker C: Your release process hasn't gone into like, a hard freeze or anything yet.
00:08:09.790 - 00:08:17.250, Speaker E: So we have a cutoff from the master brand. But we often try to pick some further fix if needed.
00:08:17.870 - 00:08:18.690, Speaker C: Okay.
00:08:19.640 - 00:08:29.688, Speaker A: And this one is smallish in volume. But as usual with this simulate, it touches every part that you could potentially touch.
00:08:29.864 - 00:08:30.780, Speaker C: As always.
00:08:32.760 - 00:08:38.100, Speaker A: General EVM and all the stuff, all the favorites.
00:08:39.720 - 00:08:41.420, Speaker C: Okay, that was it. Thanks.
00:08:42.840 - 00:08:52.800, Speaker A: All right, we have a new newcomer, it seems. Dhruv, would you like to tell us a little bit about you?
00:08:54.100 - 00:09:16.220, Speaker D: Hello. Hi, Oleg. Thanks for invite. So I'm currently implementing on rets, the ETH simulate implementation. And yeah, I just wanted to get in touch with you after a long time. I just have attended a meeting after a month. So, yeah, I just wanted to let more details right now.
00:09:16.220 - 00:09:54.430, Speaker D: The types have been written in alloy, which is associated library for maintaining the types of EPM and now have to import them, create, let's say, manage all the header default information and then implement the simulate function. Nothing new. Queries. The presentation last time with each channel was pretty good. Thanks, Oleg and Lukash, I think you did the presentation. It's pretty clear. So yeah, that's it from my side.
00:09:55.650 - 00:10:05.050, Speaker A: All right, perfect. And with this, probably we'll wrap up for today. Thank you all for coming and see you all next week. Bye.
