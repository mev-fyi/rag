00:00:00.600 - 00:01:00.165, Speaker A: So from our side I am investigating the RHL problem that we have created while we were fixing an issue. Also I've cleaned up the stuff that Kilari told me that should not be there in the block and in the transaction related serialization. Part of what we return so soon will be the pair. With that also I found another way I could check the timings because debugging on Hive is sadly hard. So I found another way I could check the timings of a block that is getting created. So yeah, I think we'll post update you guys to update the docker image soon and yeah, let's continue. S.
00:01:00.165 - 00:01:03.005, Speaker A: How is your progress?
00:01:03.705 - 00:01:44.887, Speaker B: Yeah, not a lot from my side been busy with other stuff but yeah, so I I was hash. I was digging up some old discussion we had about the idea from Dano pre computed calls and trying to find the rationale we had for choosing the current approach versus the other one so that we can add something to the. To the documents we have in the spec. So that's. That's pretty much it.
00:01:45.071 - 00:01:48.355, Speaker A: Could you remind what precomputed call here means?
00:01:49.475 - 00:02:08.775, Speaker B: It was basically that the caller sends a list of inputs and outputs for an address. So you could say that for this precompile, if the user sends this input then you return the given output directly without processing any code.
00:02:09.475 - 00:02:14.735, Speaker A: Oh yeah, I remember we discussed it some time ago because it was here really far.
00:02:16.365 - 00:02:28.385, Speaker B: Yeah. So basically the it was that we decided because it's what it is touching EVM code and among other reasons we decided against it.
00:02:29.445 - 00:02:31.345, Speaker A: So it's a potential for V2.
00:02:32.685 - 00:02:33.825, Speaker B: Yeah, sure.
00:02:36.405 - 00:02:40.255, Speaker A: And hilarious. I understand. Now we have a V2 dock.
00:02:40.385 - 00:02:42.203, Speaker C: Yeah. What doc?
00:02:42.333 - 00:02:48.735, Speaker A: A doc that is collecting V2 features. Potential V2 feature.
00:02:49.315 - 00:03:30.225, Speaker C: Yeah, I create that. I haven't checked if anyone has added anything and then I created that documentation for get for the each simulate call and I made a pull request for it. But no one has reviewed that yet. And I wonder if neteromind also has some kind of similar documentation and if so maybe I can add stuff there as well. But I wonder that they could just create one documentation and then I think it's probably copied in many places or I don't know how the node providers for example, how they are doing documentation. So. But I thought that we could make some one documentation somewhere and then that could be maybe copied in other places and maybe modified a bit depending on the different clients uses.
00:03:34.615 - 00:03:38.315, Speaker B: Yep, appreciate that. I'm gonna take a look at the APR.
00:03:40.695 - 00:03:54.231, Speaker C: Like I was browsing Internet and trying to find documentation for each Simulator and I found that nethermite has that kind of generated docs. And then there were some problems there and then I mentioned those to Oleg, but I guess that's auto generated and there's no.
00:03:54.303 - 00:04:05.675, Speaker A: Yeah, it's so generated and we really like generate those fields when we submit responses to you. So I'll think about how we can eliminate them.
00:04:09.375 - 00:04:25.463, Speaker C: But does Nettermind have some kind of documentation for the APIs as well? Or is it included in the. Or you should be writing it in the code and then it auto generates or. I don't know how it works, but I didn't find that kind of like it's not generated documentation for nethermind at.
00:04:25.479 - 00:04:42.105, Speaker A: Least it was a mix when I last time edited them. So there you can write an article and like just a markdown article and we can publish that or we can like have parts, document or documents generated from code.
00:04:44.725 - 00:04:54.565, Speaker C: Yeah, I like how Lucas just let that claim in the chat and they left.
00:04:56.065 - 00:05:21.845, Speaker A: Yep, it happens sometimes. That's all right. So if you prepare any markdown, I'll be happy to help to push it out into the docs. And I think we have a repo with like manually created articles on our current state, but it is in gitbook. So yeah, just ping me up and I'll try to connect you with the repo.
00:05:23.065 - 00:05:37.161, Speaker C: Can you share me with the location for that? Like for Get? It's also quite bizarre that it's in the GET repository but it's in the different branch and it's in the different branch. There's completely different kind of project, kind.
00:05:37.193 - 00:05:38.785, Speaker A: Of similar situation here.
00:05:38.945 - 00:05:59.615, Speaker C: Oh really? Okay. But yeah, I don't know why to implement. Well, Sino said why it's implement like that, but for me it's still weird. Do we have anything else? I don't know if Micah has been able to contact any of the providers.
00:06:01.075 - 00:06:17.905, Speaker D: Surprisingly I haven't been able to get a hold of Quick Node. Usually they're pretty responsive to us because our team does their support, but they've just been kind of radio silent. I might try again like tomorrow since it's the weekend right now still for a lot of people.
00:06:19.325 - 00:06:27.585, Speaker A: I know you've posted about rest. So how is rest? Do we have anybody from REST today? Maybe at home?
00:06:32.965 - 00:06:45.983, Speaker D: I don't think so. Yeah. So apparently REF released. I'm guessing they just copy it from. From gu. Is that how that works? Like. Well, they're rust, right?
00:06:46.039 - 00:06:49.955, Speaker A: In rust. Yes. So they must have implemented a little bit different.
00:06:51.015 - 00:06:54.875, Speaker D: Yeah, I'm surprised. They just kind of Implemented it silently, but I'm happy.
00:06:55.895 - 00:06:58.583, Speaker C: Well, I haven't tested it, so I don't know how.
00:06:58.639 - 00:06:59.315, Speaker A: Could you.
00:07:01.695 - 00:07:02.567, Speaker C: Sorry.
00:07:02.751 - 00:07:05.355, Speaker A: Could you include it into the test suite?
00:07:06.545 - 00:07:19.405, Speaker C: Yeah, I could maybe see how it works. I don't know if Sina would be better doing that because I'm quite terrible in the kind of figuring how that test suite works. So I know if Sina can easily add it there.
00:07:22.705 - 00:07:24.765, Speaker B: Yeah, I can avoid that.
00:07:30.825 - 00:07:34.721, Speaker A: And there'll be three of us. Yeah.
00:07:34.873 - 00:07:40.885, Speaker C: But interesting to see how well it matches to the GETS and Nethermines outputs.
00:07:41.305 - 00:07:43.165, Speaker A: Yeah, definitely.
00:07:43.905 - 00:08:07.795, Speaker D: Yeah, Agreed. Okay. So this week, hopefully we can get ref integrated into the Hive test suite. And hopefully this week I can get a hold of Quick Nodes and after them, Alchemy and Amphira about getting clients updated and so it's available in the wild. And then we. We're still working on getting the test to actually sync up and pass, right?
00:08:08.255 - 00:08:13.595, Speaker A: Yeah. And we don't know what would be when we'll add ref, how far it would be or how near.
00:08:14.055 - 00:08:21.195, Speaker D: Worst case scenario, we have three different results. Best case scenario, we have two results and we can use ref as a tiebreaker.
00:08:21.735 - 00:08:24.591, Speaker C: I'm quite confident that we will get three different results.
00:08:24.783 - 00:08:26.275, Speaker A: Yeah, I agree.
00:08:27.075 - 00:08:28.655, Speaker D: That does seem most likely.
00:08:31.275 - 00:08:36.055, Speaker A: How far are the if call on those three?
00:08:38.995 - 00:08:39.627, Speaker D: What do you mean?
00:08:39.691 - 00:08:41.815, Speaker B: We don't have a proper tested for it?
00:08:43.155 - 00:08:53.655, Speaker A: Oh, that's. That's why. All right, and now we add hashes and stuff like that. That definitely makes it harder.
00:08:55.955 - 00:08:57.763, Speaker C: There, so it's easier.
00:08:57.939 - 00:09:02.575, Speaker D: We're doing this all in hard mode. We're actually writing tests, we're doing hashes.
00:09:03.555 - 00:09:09.975, Speaker A: Yep. All right, guys, do we have anything else for today?
00:09:12.235 - 00:09:13.335, Speaker C: Not from me.
00:09:17.595 - 00:09:25.495, Speaker A: All right, then. Thank you all for coming. It was productive and short and we'll do what Lucas did.
00:09:25.915 - 00:09:27.695, Speaker B: Yeah, the best kind of meeting.
00:09:29.155 - 00:09:35.515, Speaker A: Yeah, perfect. All right, see you guys next week and I'll bring you up on Telegram soon. Bye.
