00:00:19.390 - 00:01:36.350, Speaker A: Actually, Ethereum for Dummies wasn't my original title. The original title is there. So while I've been working on the project, my appreciation for precisely what it is has changed somewhat, evolved, let's say. At the beginning, Ethereum was always kind of sold as this notion as bitcoin thing, but bitcoin with maybe some features removed or some sort of added extra thing of having a virtual machine or an extended scripting language, let's say. And that didn't really, it was a cool idea, but it wasn't really get to the heart of what it was that we were making. And the idea of what Ethereum was going to do was quite limited in scope. It was essentially going to be an abstraction platform for Mastercoin style financial contracts on a blockchain as time went on, especially I remember in January 2014 when we all gathered in Miami, and I'd had very little sleep that week, and I was thinking, is there some better way of thinking about this other than bitcoin? But with some sort of additional richness in the scripting language.
00:01:36.350 - 00:02:22.590, Speaker A: And my mind got to crypto finance, and I was thinking, well, if bitcoin's crypto finance, what's ethereum? And this is where the notion of crypto law came from. It's actually, well, actually, it's like finance, but it's fully general. And so finance is kind of a subset of law in a way. And so maybe Ethereum could be thought of as a cryptographic version of that. This evolved further, and basically this talk is about a later sort of realization, as it were, of, of what Ethereum is. So we can answer the how. That was the first thing we answered that was quite reasonably presented in Vitalik's white paper back in November.
00:02:22.590 - 00:03:05.180, Speaker A: And we got a pretty good idea of why that kind of stems from the bitcoin space decentralization, why it's a good thing. But what actually is it? That's the harder question. And we get history repeating itself. People sort of, they know they want it, but they don't really know what it is. So for this talk, I'm going to try and avoid using much of the language that we see in this conference so far. So I'm going to try and avoid using these technical terms, because these technical terms help us describe how it works, but they don't really help us describe what it is. So what is it? Well, for a long period, we just didn't know.
00:03:05.180 - 00:03:27.220, Speaker A: This is probably lost on most of you, but it's from a very good comedy called look around you. And if you get the opportunity to see it, please do. Well actually Ethereum is a computer. It's a computer a bit like this one. This is a computer. This is, I think it was around the early fifty s. And this is what they thought a home computer would look like by 2004.
00:03:27.220 - 00:04:02.590, Speaker A: This one runs Fortran, so it's easy to use. Ethereum is a computer. It's not a very good computer. It's really slow. It's also really, really expensive, as most of you probably know by now, at least the ones have been developing on it. And it's got this OD property of not always being exactly decisive about what has happened in terms of its I o. Although after a minute it generally gets a bit more, a bit more certain about things.
00:04:02.590 - 00:04:51.414, Speaker A: But it does take that extra time. So, so far it's not seeming like such a good invention. Seems like we're going backwards a little bit, but actually it's got some really interesting properties and what I'm going to try and show you is what these properties are when we think about Ethereum as just a computer. So the first thing to notice is that it's a global singleton and it's one of possibly the first global singleton computer that's fundamentally not localized. Right. All of the computers are generally either physical machines like my laptop here, or virtual machines that actually reside within a single physical machine. Whereas the Ethereum computer doesn't reside in any single machine.
00:04:51.414 - 00:05:15.240, Speaker A: It's not located physically in any particular part of the world yet. There's only one of them. And that's a bit of an OD notion. It's a computer that in general there's no reset button, there's no power button, you can't turn it off. And that again is a bit of an OD sort of thing to think about. Is my mic still working? Yeah. Okay.
00:05:15.240 - 00:06:08.146, Speaker A: And secondly, thirdly, it's ubiquitous, which is wherever there's the Internet, everyone who can use the Internet actually has free access, fair access to this resource, to this single computer. And there's more. There aren't that many computers which in terms of the sort of hardware are actually multi user. They're fundamentally multi user. So every time someone uses the Ethereum computer they're logged in and there are as many user accounts as we need. Very kind of OD notion as a computer, it's natively object oriented. Object orientation is built into the computer itself, encapsulation is built in code, has data, and the two are inextricably linked.
00:06:08.146 - 00:06:54.524, Speaker A: And yet there's encapsulation away from all the other code and data pairings. It's very accessible. There aren't many computers so accessible. This one, we can interact with it just using fairly simple web primitives, Javascript, and it's inherently auditable, verifiable and auditable. And there are not that many computers which we can replay everything of the past and always be absolutely certain of getting the same result. So there's my rather dodgy artist's impression of the Ethereum computer. There's the world, because actually it's a global singleton.
00:06:54.524 - 00:07:30.140, Speaker A: So there's the globe, and all these boxes are accounts. They're objects right on the side there. They're the external accounts, they're the ones that the objects from which messages get injected in from the outside and in the middle there. These are all the objects that are executing in this object oriented execution environment or the Ethereum world computer. Once you're in there, you can't get out. So the only way of getting stuff in is by these external accounts. And it's from this, of course, that we get our cryptographic safety.
00:07:30.140 - 00:08:25.544, Speaker A: So we get guarantees on code executing within this computer. I mean, we get some really nice guarantees. We get atomicity, right? So atomicity for those who do database programming or for those who don't do database programming, I guess, are that basically we don't have to think about whether a transaction fails halfway through. Either the whole thing executes as expected, or it doesn't, right? We don't have to bother sort of setting particular sort of safeguards in order to roll back things. We get synchronous operations, so objects are guaranteed not to interfere with each other. We don't need to think about threading or processes or shared memory, any of that nonsense. But most importantly, we get provenance, and this is a very od notion, right? All of the messages in our computer have some origin.
00:08:25.544 - 00:09:13.644, Speaker A: We can check to see who sent the message to us, and we can't normally do that, right? There are not many object oriented execution environments where we can do that. Hands up, if you know of another object oriented execution environment where you can check always which object sent you the message. Anyone? No, it's the first, I guess. And that allows us to build certain security constraints into the operation of our code. Furthermore, there's permanence. An object's data is permanent. It doesn't change when the computer sort of goes off, right? There is no off for this.
00:09:13.644 - 00:09:47.972, Speaker A: And the objects, odly enough, are immortal, so there's no notion if the object doesn't delete itself. There's no notion that the object is ever going to die. There's no system admin who can come along and actually sort of delete the object. They can't log in as root and just RM doesn't work. And if the object doesn't have code that actually commits suicide, then no other object can force it ever to die. It's very strange notion. And finally, the code that executes is immutable.
00:09:47.972 - 00:10:56.770, Speaker A: It cannot be changed. This wasn't the case in some of the earlier versions of Ethereum, but in the version that we have now, the code is immutable. So you can be absolutely certain that if this object's code is x, it isn't going to be y down the line. So what's the point of having these particular attributes? What does it give us? I'm going to list a few things, a few thoughts on this. And the first is, well, Ethereum is a commons for innovation, right? It's a place where we can all upload code, upload ideas in terms of human interaction, and have it just work with other things transparently. We don't need to think know the worst, signing partnership contracts with other businesses in the same way that Uber would have to do if it wanted to integrate its services with, let's say, Airbnb. We don't need to consider that, because if we have a decentralized Uber operating on Ethereum, and the same for a sort of version of Airbnb, then they can operate with each other if they want to, and they don't have to ask for permission of the other.
00:10:56.770 - 00:11:29.924, Speaker A: Compared to servers, this unleashes massive amounts of potential innovation for business. Servers provide barriers. Servers are cumbersome, and yeah, they make interoperability difficult. And these barriers basically make monopolies. And monopolies are generally bad for innovation. And of course, we have interesting repercussions for privacy. Now, of course, the open chain doesn't really get you much in terms of privacy.
00:11:29.924 - 00:12:08.504, Speaker A: Quite the opposite. But what it does is it makes you think. It makes you think about what data you actually want to place in the wild and what data you want to keep safely locked away on the user's machine. Yeah, what it doesn't do is it doesn't give you this false security of placing it on a third party server where only the elite hackers and those who want to pay them can get access to it. And that's kind of nice. We also get this nice authenticity. So with server interactions, basically it's the server that authenticates you or some third party service that you essentially have to trust.
00:12:08.504 - 00:13:03.156, Speaker A: With Ethereum, you authenticate in and of being yourself in and of having access to your private key, or if you've got two factor stuff, then your private keys. Ethereum is the world's first decentralized computer. That's kind of an interesting thing in and of itself because it's decentralized. There's no single point of control of failure or any single bottleneck in principle, in terms of where things have been going. If you look into history, you find that at the beginning there tends to be very little floating around. It's all very dispersed and not much is actually happening. Eventually you find there's a strong player.
00:13:03.156 - 00:13:41.140, Speaker A: The strong player sort of picks up all the dispersed. They add rules and they rule. They place their own laws of interaction. With this structure in place, you generally find that there's enough development such that these initial structures are not necessary anymore. If we look in software development, we find that originally there were sort of individual coders. Eventually there was this notion of coders getting together into a strict hierarchy, right? This is the sort of thing that originally the Ganu project was like. But also obviously corporate software firms.
00:13:41.140 - 00:14:28.960, Speaker A: When there was a sufficient amount of development, we ended up with having this. In this case, the Internet was mostly, but obviously version control systems really helped. We ended up with things like this bizarre model, as Eric Maidman mentioned in his paper. Finally, we're sort of evolving further, even more decentralized from the bizarre model into this kind of, you know, everyone clones, everyone forks, and there is sort of horizontal gene transfer of all of the various ideas going on. In coding we see the same thing happening with other aspects of the world. So in computing we began with the mainframe and then there was kind of this server client architecture. And we are indeed getting into the peer to peer thing now with sort of napster, bittorrent and bitcoin and obviously ethereum.
00:14:28.960 - 00:15:08.796, Speaker A: Same with kind of governments as well. It kind of began with anarchy, right? And then eventually there was some sort of king or emperor that sort of gathered enough strength to enforce the rule of law over a particularly sufficiently large amount of area. And of course eventually they had to cede power because other structures were able to be built. Once that rule of law was in place, we ended up with like an aristocracy or a merchant class. And eventually we end up with something that approximates the democracy. Same with distance. The, the examples continue and we end up with, originally there's sort of back of the magazine, and then we had the Internet with Amazon right, but still only one matchmaker, one merchant.
00:15:08.796 - 00:15:43.630, Speaker A: And then we got this marketplace idea where there's still a single matchmaker, but there are lots of merchants, all sort of operating within the framework. And probably eventually we're going to see a plurality of matchmakers, where matchmaking itself is a service that can be provided by a market. Same with communication. And there is a theme here. We begin with nothing. We centralize in order to enforce these initial rules, and then we can decentralize once that structure is in place. We decentralize because it's more efficient, it's more scalable, and it's more resilient to attack.
00:15:43.630 - 00:16:33.724, Speaker A: Ethereum commoditizes trust. This is something that I think the economist discovered last week. It's a bridge to cross these sort of boundaries of these swathes of land where there's internal trust, but they don't really trust each other. And that's where we're going to find the initial use cases spawning from, because that's where it can really deliver value. Initially, we could call it indeed a platform for zero trust computing. And in a way, Ethereum could be the court of the Internet. Sort of interesting notion where the Internet can have its own sort of place to determine what is right or wrong.
00:16:33.724 - 00:17:28.460, Speaker A: Or when two people over the Internet have an issue with each other, there is a lack of consensus. Then Ethereum can step in. In principle, ethereum is a crypto law platform in this sense, right? It's a decentralized legal system native to the Internet. We can implement these arbitrary social contracts and have people operate within them with nothing more than access to the Internet. It's also a pivotal part of the notion of this serverless Internet, right? The notion of like, whatever you want to call it, the post Snowden web, right? Web three. It provides the zero trust computing part. It provides the part that actually underpins all the stuff that we'd normally go to, an authority to a database sitting on a server somewhere.
00:17:28.460 - 00:17:53.750, Speaker A: And with a bunch of other technologies, it can actually provide that infrastructure for doing massively multi user applications in a truly different manner. So, yeah, that's my thoughts on what Ethereum is over and above being a scriptable blockchain environment. Any questions?
00:17:59.580 - 00:18:54.330, Speaker B: So I wanted to ask if you are thinking about. Because basically ethereum is a tool, so that's one part of the story, but it's also important that the people that using the tool are also important. So did you think about these things, or is there anything that could go in parallel with the development of the tools that could help with the consciousness part of the problem, to educate the people how to live within a system that is facilitated by a tool like this, because the people could either make it or break it.
00:18:55.580 - 00:19:49.290, Speaker A: Yeah, I think it's not especially clear what that system is going to be yet. I think we'll sort of discover that in the coming years when we see the infrastructure that gets built. I mean, this is very much the core technology layer. And just as when the first computers came out in the. It's like, what's this going to do? It might make a few people who are sitting in a hall doing abacus calculations out of a job, but basically, is it going to change the world? Well, we can't really see what the final applications are, so maybe not. And of course, yeah, well, it turned out rather differently. So it's difficult to comment on precisely how we might try to shape what the eventual outcome is from this technology.
00:19:49.290 - 00:20:06.270, Speaker A: But, yeah, I guess attempting to be useful and inclusive is probably a reasonably good way to set about it. One more question.
00:20:07.680 - 00:20:19.350, Speaker C: Do you have any thoughts on what some of the things that are going to take the longest or be the hardest to transition from the old model onto this new model who.
00:20:23.160 - 00:21:41.756, Speaker A: I guess inevitably, with any new way of doing things? There are people who stand to benefit a lot, and there are people who stand to benefit much, much less. And, yeah, persuading them that actually there's no option and they should really, I don't know, what do they say? You should shoot yourself in the foot or be shot in the head tomorrow? It's like, well, persuading them to shoot themselves in the foot now is going to be difficult. So I would say that the hardest things to me seem to be the people who at the moment have a relatively easy existence, or people, I say people and organizations, because that's what it is, isn't it? And persuading these guys that actually they need to start thinking about things in a different manner, a radically different manner, is going to be the hardest task, and the only way we're going to be able to do that is basically it's how you convince an investor to invest. Right? It's an mvp. So you show them, look, you can see it working. Once people realize this, you're not going to be competing with this. You can't possibly compete with this technology.
00:21:41.756 - 00:21:50.850, Speaker A: So just get real and start thinking in different ways. But, yeah, I don't know. I guess that's probably what I'd say. And we just have one more quick question.
00:21:51.620 - 00:22:12.170, Speaker C: A lot of us heard in this conference relative to previously, a lot about private chains. Right. And my question to you is, as we progress forward into the future, how do we ensure that, sort of, like, the public chain doesn't get starved while the sort of, like, the concept of a private chain sort of flourishes naturally because of the investment in it?
00:22:13.180 - 00:23:10.036, Speaker A: Yeah, good question. I would say that the first thing to do is to make sure that all of the technology that goes into private chains is free and open. The second thing to do is, as much as possible, make sure that resources are shared. So any of the sort of resources that go into private chains necessarily go into public chains. So one way of doing this is by making avoiding, like, forking code bases and trying to integrate as much as possible into the same code base so that IP cannot be sort of torn out and kept hidden in the dark. And the final thing that I think is more strategic, and that's to try and make sure that we're always looking forward to the point where whatever it is that private chains deliver, the public chain can also deliver. So we should be looking forward to a point where there aren't private chains.
00:23:10.036 - 00:23:42.220, Speaker A: And the open chain, we should be looking to a point where that's a false choice. And where there's actually the real choice is a single sort of hybrid chain where what needs to be private for particular applications is private, what doesn't need to be private isn't private, and actually all operates in essentially the same environment. So that's something that I'd like to see, and that's something that I hope, as a community, we can eventually develop and implement. Great. Thank you. Thank you for Gavin.
