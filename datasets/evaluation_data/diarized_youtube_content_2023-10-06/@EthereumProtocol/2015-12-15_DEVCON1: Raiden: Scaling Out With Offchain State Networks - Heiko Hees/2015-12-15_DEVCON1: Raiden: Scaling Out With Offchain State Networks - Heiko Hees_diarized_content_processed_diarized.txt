00:00:18.650 - 00:00:58.590, Speaker A: You're tired. Okay. I try to keep it short, rather give for high level overview about what we're doing. So you heard a lot about open problems we have, especially scalability. We've been talking about this today already. You might know that, for example, visa does about 50,000 transactions peak per second and we don't come close yet. Transaction finality is a nice property and many are worried about transaction privacy.
00:00:58.590 - 00:01:54.382, Speaker A: So we thought about could we solve these problems if we change the model, if we rather have transactions in private between the participants who are involved in transactions, but do not put them on the blockchain, not to the public ledger, but rather use the blockchain just to resolve disputes and to take things in its growth. So that's what Rayden network tries to aim for. It's an off chain asset transfer network. It's quite similar to the bitcoin lightning network proposal, and this is work in progress. So the features should be token agnostic. It should work with any token which supports the standardized token API which Vitalik defined while ago. It should support instant asset transfers.
00:01:54.382 - 00:02:48.078, Speaker A: So you should not wait for confirmations for say five blocks, but they should really be instant support, should support micro payments. This only works if the transaction fees are way lower than the values you want to transfer. And it should really scale out to basically an unlimited number of transfers per second. And we're looking for transaction privacy. So how does this work? In order to understand this, you need to really understand how a payment channel works. So I'll try to explain this in a payment channel. You would use that if one party, say Alice wants to pay Bob multiple times, and she does not want to see all those transactions on the blockchain, but rather opens a payment channel on the blockchain.
00:02:48.078 - 00:03:44.930, Speaker A: And payment channel would know the address of the receiver, that would be Bob, and address of the initiator, that would be Alice. And also it would take an escrow, a deposit from Alice. What Alice then can do is whenever Bob sells something to her, she can sign an updated balance. So the first balance might be, I sign one, say gaff coin for Bob, and later in the day she would sign a second gaff coin to Bob. Now Bob can at any time go to the blockchain and claim two gaff coins, because Alice signed them. And well, he would make sure that he would not accept signed balances which are higher than the deposit which is on chain. But otherwise, he can always be sure if he gets off chain a signed transaction, that he will be able to claim this on chain.
00:03:44.930 - 00:04:29.940, Speaker A: Did you understand this because that's important. Okay, so this is also simple payment channel. We also can have bi directional payment channels. The nice feature about bi directional payment channels is that say if you have ten, if both parties deposit ten coins on chain, they could have updated balances which are higher than ten. For example, if Alice sent nine coins to Bob, but Bob sent five coins to Alice, then she could still send another six coins to Bob. So the balance that she would sign would be 16. Right.
00:04:29.940 - 00:05:16.426, Speaker A: So if you have transfers which go in both directions, you can have a long lasting channel, you can send things back and forth, and still again, you can settle this on chain. Any of the partisans of Alice robot can both go on chain and settle this anytime. So the requirement to settle, being able to settle this at any time is because one of the parties could vanish. They could not respond anymore. So if we have bi directional channels, we can chain channels. So say Alice wants to pay Dave, but does not yet have a payment channel to Dave. Then she could ask Bob and Charlie to help to transfer payments to Dave.
00:05:16.426 - 00:06:01.470, Speaker A: So question is, why wouldn't she have a payment channel with Dave in the first place? That is, you remember, we have to deposit something on chain. So if you walk through the workery and have to do multiple payments or many payments every day, then you don't want to have a payment channel with every receiver of the payments. So therefore she can ask Bob and Charlie to cooperate. They might do so if you offer them a small fee. And how do we solve that? Bob and Charlie do not run away with the transfer, which were signed by Alice, but should actually go to Dave. We do that by using a technique called hashlog. A hashlog is when Alice comes up with a random secret which she does not yet share with the other participants.
00:06:01.470 - 00:06:41.158, Speaker A: And the smart contract on chain will only settle the transfer if one also provides the secret for the hashlog. The hashlog is the hash of the secret. So you can publish the hashlog, but you will not be able to compute the secret. So now Alice would sign a transfer to Bob, which is hashlocked, and Bob to Charlie, which is hashlocked. Both would deduce a small fee. And finally, Dave might get a signed signature by Charlie, which is still hashlocked. So none of them can claim anything on chain from these transfers.
00:06:41.158 - 00:07:37.600, Speaker A: But then Dave could tell Alice, hey, I received a signed balance update from Dave, which is hashlocked. Would you tell me the secret so I can show you the webpage or whatever Alice wants to buy from Dave? And Alice will eventually reveal the secret. And now Dave can claim those funds on chain by providing the signed balance update from Charlie, which is hashlocked. But he would know the secret. So the smart contract would hash the secret and would check if that's the same as the hashlock. And then Dave can claim the updated balance transfer because then it's on chain. So Charlie and Bob at this time would learn also the secret and also could claim the updated balances, so there's no trust involved so far.
00:07:37.600 - 00:08:35.650, Speaker A: And all those transactions have been off chain, and they probably will stay off chain except if one of these parties becomes unresponsive. So if we have chain channels, we can think about a network of channels. If we have a contract which lists all the payment channels, then we can derive a network graph from all the payment channels. So we can basically find for any two participants a route through the network that would allow us to transfer our values through the network. And as we learned, those transfers cancel out on average. Okay, yeah. And on chain settlement is infrequent because there's no need to settle except if someone is uncooperative and for example, does not provide the secret.
00:08:35.650 - 00:09:39.698, Speaker A: Those transactions which are off chain, they're cheaper, they're instant, because you don't have to wait for any block confirmations, and we still have no counterparty risk. So this really works. And there's maybe something important to note is there might be highly connected hubs if that's implemented, because highly connected hubs, they offer the advantage that you have shorter routes between two participants. And there's a motivation to run these hubs because you can earn transaction fees. So in this decent centralized network, there might be some points of centralization, but which are not necessary, and they will have a lot of competition. Now, if we have this in place, then something we get basically for free is decentralized exchange. How that works is precondition, is that you have two different assets and payment channels for two different assets.
00:09:39.698 - 00:10:34.946, Speaker A: And then you could, for example, broadcast an exchange intent. Say I offer ten of asset A and want to exchange it for three of asset B, and then somehow this would be broadcasted to those interested in this kind of exchange. And the initiator might get some offers to exchanges and would acknowledge the other party that, or one of those parties that agrees. And then what you would do is you would have two transfers, one of asset A, say from Alice to Dave, and one from Dave to Alice for asset B. And they would use the same hashlog. And if they use the same hashlog, then either none or both of those transfers execute. So there's still no risk, there's no central party.
00:10:34.946 - 00:11:13.060, Speaker A: And you can be sure that these off chain asset exchange just works. Okay. And then we are talking about Ethereum. So there's a bonus. We can lock these transfers to on chain conditions. This is similar like an asset exchange, but we would lock one of those transfers, the second one, also to condition on the chain. And we would not write the complete condition, but just provide a hash of it.
00:11:13.060 - 00:12:15.810, Speaker A: And then you can see, let's say, let's look at examples, say off chain betting. Alice could say, I transfer of the same asset. Now let's say that's us dollar coins. Alice would give ten coins to Dave, if Dave transfers 100 coins to Alice, in the case that a certain condition on chain is true, for example, that an oracle confirmed that Lawrence Lessing won the next elections or something similar is off chain options or kind of options. Alice would give ten to Dave, if Dave gives 100 to Alice, if a certain condition on chain is true. In this case, if the price of, for example, US dollar to Ethereum, to ether would be ten at a certain block. And this can be generalized.
00:12:15.810 - 00:12:57.618, Speaker A: But you basically lock something with code and data. So you can create pretty complex off chain agreements which could be settled on chain. They don't have to. Usually they will not be settled on chain because every participant can evaluate for themselves what would happen if you settle them on chain. Okay, so if you compare this to the lightning network, I think the implementation is easier because in Ethereum, we have accounts and we have the EVM. There's an issue. If someone does not provide the secret for a hash lock, then a channel becomes stale.
00:12:57.618 - 00:13:30.410, Speaker A: This is something which I might explain later, something we can mitigate also. Very good. And then if you think about the deposit on the payment channel, it's like a prepaid account. We can add more funds to that channel if you want to. And then of course it works with any token. And we have this smart contract interoperability. So all we get from this is instant asset transfers, really low cost transaction costs.
00:13:30.410 - 00:14:10.540, Speaker A: We can scale out transaction capacity, or at least asset transfer capacity. We have transaction privacy, because you remember, dosage transactions are only known to those involved. That might be two or more parties. The hops along the transfer. We get truly decentralized asset exchange for free. We have no central order book, we have no matching engine, and we can have pretty complex off chain agreements. So, status of the project? The current version of Ethereum brings everything we need to implement this.
00:14:10.540 - 00:14:39.240, Speaker A: So there are no protocol updates needed. This is currently work in progress in our company. We have shown that we can have 500 transfers on a standard notebook per second. And so you can imagine you can scale this out to more transfers if you add more nodes. Well, help is welcome in the project and the code is available on GitHub was fastest. Right.
00:14:50.590 - 00:14:56.540, Speaker B: If you like, you have five minutes for questions. It's okay, you don't have to.
00:14:58.430 - 00:14:59.180, Speaker A: Questions.
00:15:01.630 - 00:15:02.620, Speaker B: Right here.
00:15:04.530 - 00:15:16.690, Speaker C: Yeah. Regarding the anonymity part. So transactions in a payment channel would not be public. But wouldn't the actual payment channel be on chain?
00:15:17.190 - 00:15:23.470, Speaker A: They will be public, but they not necessarily correspond to whom you're actually transacting with off chain.
00:15:23.630 - 00:15:26.430, Speaker C: So they would go via some payment hub.
00:15:26.590 - 00:15:27.300, Speaker A: Sorry.
00:15:29.270 - 00:15:37.682, Speaker C: If you do a direct person to person payment channel, that would be visible, but if you go through some payment hub, you would gain anonymity.
00:15:37.746 - 00:15:45.190, Speaker A: Okay. Right. Yeah.
00:15:47.660 - 00:16:16.370, Speaker D: So have you thought about general transaction updating contract state as a version? Like you can have a payment channel that is the, you know, you're playing a game or something and it's all off chain until one person leaves and then the other person can basically submit the state of the game to the chain. Have you thought anything about those things?
00:16:17.300 - 00:16:51.404, Speaker A: Yeah. What you might need to do here is that you need to replay all the transition steps you have on chain, which is a lot of data, which will be very expensive on chain. What we have here is more, we only have updated balances, so you would not settle the whole transaction history, but only the last updated balance, which is probably cheaper. So if the game is designed in a way that you only need the last stage and validate that, then that would be possible too.
00:16:51.522 - 00:16:55.884, Speaker B: We have one more question over here you just mentioned.
00:16:56.002 - 00:17:34.110, Speaker A: Can you elaborate on how it's possible that payment channel does not get stale if secret is not published? Yeah. Short answer, Merkel trees. Instead of having the hash lock in the updated balance, we have a Merkel route, which is like a fingerprint of all pending transfers. So you can have interwoven asset transfers. All right, thank you. You.
