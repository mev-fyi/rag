00:00:00.330 - 00:00:34.866, Speaker A: In my last video on Ethereum 20, I told you about the incoming opportunity to generate some passive income. By becoming a validator for Ethereum 20, you can earn between five to 20%. The big problem with becoming a validator on Ethereum 20 is that you need to lock 32 ether for a few years. At today price, that's about $16,000. Not exactly cheap. That's what we have some services like rocket pool or staker that allow you to pool your ether with other people to run a validator together. That's what we call pool staking.
00:00:34.866 - 00:01:22.610, Speaker A: In this video, I'm going to show you how to build your own pool staking service like rocket pool. Not only you will be able to use this service for yourself as an investor, but you will also be able to charge a fee to other investors to compensate you for the service provided several stream of income. Very nice. I'm going to explain the code of the deposited smart contract of Ethereum 20 and we'll also build our own smart contract for the staking pool. And finally, we will expose all of these to users with a front end. And if you don't know me, I'm Julian and on my channel itoblogs, I teach blockchain development. And before we continue, if you are a beginner and you want to get started in blockchain, I'm going to do a free live training on November 27.
00:01:22.610 - 00:01:57.714, Speaker A: This will be about how to get started in blockchain. It's going to cover how to get your first blockchain job, how to launch your own blockchain project, and how to make money programmatically in blockchain. So it's a live event where you can ask me any questions and there will not be any recording available after. So if you want to participate, the only way is to register for the event with the link down below. This is totally free. You only need your email to register. So first we're going to see the.
00:01:57.752 - 00:02:29.286, Speaker B: Architecture of our staking pool. So we are going to create a staking pool smart contract. That's where the investors will send their ether. So they don't need to send 32 ether, but it can be less. So there will be a fixed investment period, for example, one week. And once this investment period is over, the ether of the staking pool contract will be sent to the deposit contract. That's the official smart contract of Ethereum that allow you to stake your ether.
00:02:29.286 - 00:03:25.082, Speaker B: And after you send your ether to this deposit smart contract, it's automatically moved to Ethereum 20 as a stake that is associated to a validator. And after that we need to run our validator node on Ethereum 20. So I'm not going to cover this part on this video because I already talk about it on my other video on ethereum 2.0. In this video, we are going to focus on the staking pool smart contract. So for that we are going to remix, we are going to create a new file, stakingpool sol okay, so we're going to use the latest version of three t three t 0.7.5 and we define a contract staking pool. At first we're going to define a couple of variables.
00:03:25.082 - 00:04:12.018, Speaker B: So first an address for the admin of the contract. This address will have special right and also an integer to represent the end date of the investment period. And we're going to instantiate these two variable in the constructor. So the admin is the address that deploy outstaking pool contract. And for the end, for example, we can set it to one week after the deployment of the contract. Oops, forgot the parentheses here. Then after we are going to create a function to allow investor to invest Ether in the staking pool.
00:04:12.018 - 00:05:05.098, Speaker B: So we call this invest and we make it payable so that people are able to send ether to it. So we need to define a couple of variables. So first we need to define a mapping of addresses to integer so that we can identify what's the investment balance for each investor. And we're also going to define an event new investor. This is going to be useful to allow investor to withdraw their investment on ethereum 2.0. Address investor. Okay, so then in the invest function, we're going to first make sure that we haven't reached the end of the investment period.
00:05:05.098 - 00:06:04.814, Speaker B: The error message is too late. And after, if this is a new investor that has never invested before, we are going to emit an event new investor. After, we're going to increment the balance of the investor like this. So when the investment period is over, we will only be able to invest a multiple of 32 ether. Because the way ether two staking works is you need to run one validator per 32 ether invested. But it's possible that we probably won't have an exact multiple of 32 ether since investors are allowed to invest any amount here. So once the investment period is over, we are going to execute another function that is going to tell us what is the amount of extra ether that we have in the contract.
00:06:04.814 - 00:06:58.260, Speaker B: And after, we will share this extra amount among all the investors. So we'll call this the change so we're going to call this function finalize, make it external, anybody can call it. And we need to define a couple of variables. So first we need to define a boolean variable that tell us if the contract was finalized or not. So basically, after we call this function one time, then it will be considered as finalized, then a variable to tell us what's the total invested at the end of the investment period. Then what is the total change that we need to distribute. Then here in our function, we're going to first make sure that we are after the investment period, the error message is too early.
00:06:58.260 - 00:07:43.550, Speaker B: Then we make sure that finalize is false because we cannot finalize twice. Then we set it to finalize. Then for total invested. So it's just going to be the balance at the time that we call this function. And then for the total change, we are going to compute the remainder of an integer division of the balance of ether with 32 ether. So that's the modular operator. So for example, if we have 33 ether in a contract, the remainder of the integer division equals one.
00:07:43.550 - 00:08:29.040, Speaker B: And now we know how much we need to distribute to investors. Okay, so after we are going to create a function to allow each investor to claim his change. So we're not going to distribute ourselves the change to all the investor because it can cost a lot of gas, but it's going to be up to each investor to claim his change. So we create a function called Getchange, and we need to create a new variable to store who has withdrawn is changed or who has claimed is changed already. So for each investor, we're going to associate this to a boolean value change claimed. Okay. And then inside getchange we're going to require a couple of things.
00:08:29.040 - 00:09:05.638, Speaker B: First, we want to make sure that we are finalized. Then we're going to require that the investor is actually an investor. The balance of MSG standard needs to be superior to zero. And the our message is not an investor. Then we are going to require that the change claim of this investor is false. Oops. Otherwise the error message is change already claimed.
00:09:05.638 - 00:09:44.354, Speaker B: Then we update the change claim mapping for our investor to true. Then we need to calculate the amount of change that we need to distribute to our investor. So for that we're going to calculate proportionally to the share of the investment in the total pool. So total change times balances of our sender divided by total invested. And now we can just send this ether, MHD sender send. And this amount. Oops.
00:09:44.354 - 00:10:27.446, Speaker B: Actually here I mean to use transfer, it's safer. Okay, and next, we need to integrate our contract with the deposit contract for Ethereum 2.0. So for that we're going to check out the code of this contract. So this is in the GitHub repo that's maintained by the Ethereum foundation. So originally this was a contract written in Viper, but it was rewritten in solidity. So let's scroll down, scroll down. And here the function we're interested in is the deposit function.
00:10:27.446 - 00:11:14.414, Speaker B: So each validator on Ethereum 2.0 needs to call this function once and send it 32 ether and specify a couple of arguments. So the public key is the identifier for the validator. The withdrawal credentials allow the validator to withdraw its stake on Ethereum 2.0. So of course we are not sharing any private keys here. We are just talking of public information and also a signature that's to make sure that the validator actually wanted to do this deposit. And for the deposit data root, I actually don't know, but all of these things are generated by the CLI tool that you have to use in order to create the credentials for your validator.
00:11:14.414 - 00:11:51.098, Speaker B: So if you don't know what I'm talking about, check out my other video on ethereum 2.0. Staking so you call the deposit function with this argument. You send it 32 ether and then it does a couple of checks. Here it emits a deposit event and that's all you have to do. After that you have staked your 32 ether and you also need of course to run your validator node. So actually the deposit contract is pretty complex, but we don't need to spend too much time, try to understand how it works exactly. All that matters is that you need to call this function with nseni 32 ether.
00:11:51.098 - 00:12:25.482, Speaker B: So we are going to scroll up and take the interface of the contract. Actually we just need this function. And here I'm going to pass the interface. Okay, I don't need this, just the deposit function. And we also need to know the address of the deposit contract. So it's this one in ether scan. So I'm going to copy here the address here.
00:12:25.482 - 00:13:20.800, Speaker B: You can see that it has a lot of ether inside and back to our code. Going to paste this. Okay, so I'm going to create two variable, first, a mapping for all the public keys of validator. So why we're going to do this, you're going to understand just after pub keys used. And also I need to create a pointer to the deposit smart contract ideposit contract and we pass it the address of the deposit contract. And so with this we can interact with smart contract. Okay, so after we are going to create the deposit function, actually I'm going to copy paste the signature here.
00:13:20.800 - 00:14:11.418, Speaker B: Function, deposit. It's not going to be payable. We only need it to be external. Okay, so I told you before that each validator is associated to a 32 e deposit. So what we're going to do, after our staking pool has been finalized, that's mean the investment period is over and investor took the change after that. As the admin of this contract, we are going to call this deposit function as many times as we need in order to stake all of our ether. So for example, if we have 64 ether in our contract, so we need to call the deposit function two time.
00:14:11.418 - 00:14:59.094, Speaker B: If we have 320 ether, we're going to call the deposit function ten times, et cetera, et cetera. It's not possible to just call the deposit function of the deposit contract once with more than 32 ether, because the extra ether associated to a single validator is not going to produce any extra income. So in other words, we're just going to waste our money. So we do need a different pub key here for each 32 e. So there is probably a way to make this more efficient with a deposit function that accept an array of pub key, of rescual, credential, et cetera, by using a specified encoding for bytes. And after you pass all of this in your function, and you call the deposit contract of ethereum 2.0. But it adds some complexity.
00:14:59.094 - 00:15:53.178, Speaker B: So we're just going to keep it simple. So we are going to require a couple of stuff, finalize, equal true, too early. Then we're going to require that the message sender is the admin. So why we're doing this is because it's the admin that's going to run the validator node after. So it's important that here we put the pub key that will be run by the admin. Then we're going to require that the remaining balance of ether on the contract is still started to ether, because we need to send this ether to the deposit contract. And then we also going to make sure that we haven't used this pub key before by mistake.
00:15:53.178 - 00:16:40.682, Speaker B: Because otherwise, if we stake more than 32 ether associated to the same pub key, we're just wasting money, won't create any additional income. This pub key was already used. Okay, and after we're going to call the deposit contract function, the function deposit, we're going to send it 32 ether. So that's the new notation to send some ether to a smart contract with solidity 0.7. And after we specify all the different argument. So pub key withdrawal credentials signature deposit data route. Oh, and I realized I forgot one very important thing.
00:16:40.682 - 00:17:30.154, Speaker B: We also need to charge a fee to investors. So here we go in the invest function and we're going to calculate a fee. So for example, I don't know 1% of the amount invested. So we can send this to the admin. So admin transfer fee. And here it's not going to be MSD value, but it's going to be amount invested. And for the admin we need to make it payable, otherwise it won't be able to receive the money.
00:17:30.154 - 00:18:13.450, Speaker B: Okay, and we are good for our staking pool smart contract. So next we're going to create the front end, okay, so for the front end we are going to save some time. So I'm not going to do live coding, but I'm going to walk you through the code. So here on the GitHub repo of it, the block. So this is the folder for this project, and I've created a truffle project. So I have my smart contract here, staking pool. I've also created a migration file here in a deploy contract in the migration folder.
00:18:13.450 - 00:18:49.794, Speaker B: And we going to see the front end code here in front end folder. So I've installed a couple of dependencies, so ether to interact with the blockchain as well as bootstrap the CSS framework to make it look nicer. And the other thing, it's not me who install it. I actually used a tool called create react app. So that's a tool to easily bootstrap a react application. And so we're going inside the SRC directory. And so the action happened in app js and Ethereum js.
00:18:49.794 - 00:19:17.290, Speaker B: So first ethereum js. So here we integrate with metamask. So the Ethereum wallet, which is a chrome extension. So here we wait for all the web page to be loaded. And if we detect this object, that means that there is metamask. So we ask the user to allow our DaP to access its address. Then we instantiate an ethers provider.
00:19:17.290 - 00:20:09.662, Speaker B: So that's an object that represents a connection to the blockchain. So then I get the address of the user. Then I create this object that represents a connection to a specific spot contract, the spot contract of the staking pool. And I return this to the color of this function. And so after in app js, so here I define my app component, I define a couple of states. So here the staking pool object that we created in the other file, the address of the user and also the amount that was already invested by the user. So in this function, what happened is when the component first load, this code here is executed just one time, we execute the get blockchain function.
00:20:09.662 - 00:20:37.990, Speaker B: I explained you just before. So we get these two things. Then with the staking pool object we're able to get the balance invested of the current user. And after we save everything in the state of the component, the pointer to the staking pool contract, the address of the user and the amount invested here. If we haven't loaded all the data yet, we just display loading. So here this function, I'm going to skip it for now. And here return.
00:20:37.990 - 00:20:59.546, Speaker B: So that's where all the action happened. That's where we render all of our HTML. So here you see this class name. This come from bootstrap. It's to make it look nice. And what's interesting is here. So that's where we are going to show a form in order to invest in our staking pool.
00:20:59.546 - 00:21:41.654, Speaker B: So here we have an input to specify how much ether we want to invest. And here a button to submit the form. And when we submit the form we call the invest function here. And here we call the invest function of the staking pool with the ether amount that was specified in the form. And just after we also update the amount invested variable because it has changed. And after in the HTML here, that's where we show to the user the amount that was invested. So here I am in my project folder and I'm going to start a truffle console.
00:21:41.654 - 00:22:20.758, Speaker B: So it's going to start ganache, the local development blockchain of Ethereum. And on this blockchain I'm going to deploy my smart contract. Also start the front end in another terminal I go in the front end folder, NPM start. Okay, so this is in my web browser. So on metamask I make sure that I am on the right network. I've already configured a connection to locals. 95, 45 also yes, I've synchronized the account in metamask with the account of Ganache.
00:22:20.758 - 00:22:48.514, Speaker B: And here in the settings I'm going to reset everything. So every time you restart ganache, you have to do this. Okay. And after I'm going to invest, I don't know, for example, 1000 away here, confirmation pop up of Metamask. Confirm. And here you can see your investment variable that was updated. So it works.
00:22:48.632 - 00:23:23.926, Speaker A: So what's next step after the investment period is over, you need to call the deposit function of the staking pool several times. You need one call per 32. If invested, you will need to provide validator credential to this function like public key, et cetera. And after you will need to run all of these validators. I show all of this in my other video on Ethereum 20 staking and after when phase two of ethereum 20 will be released, you will need to allow investor to redraw their ether. So phase two is still in rid and probably won't be released before at least two years.
00:23:23.968 - 00:23:25.726, Speaker B: So you still have time for this.
00:23:25.828 - 00:23:59.060, Speaker A: But very briefly, you will need to create a withdrawal smart contract and deploy it to Ethereum 20. In this contract you will have a function to allow investor to withdraw their money. You will also need to import the amount invested by each investor in the staking post smart contract on ETH one and import this into the Reddrawal contract on e two so that you can calculate how much each investor is allowed to withdraw. And after this project, if you want to build all the blockchain project, check out this playlist. I'll see you there.
