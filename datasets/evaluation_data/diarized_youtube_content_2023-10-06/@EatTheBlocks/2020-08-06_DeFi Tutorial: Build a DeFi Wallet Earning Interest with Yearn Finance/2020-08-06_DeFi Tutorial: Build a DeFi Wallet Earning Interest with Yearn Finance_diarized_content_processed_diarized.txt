00:00:00.330 - 00:00:41.382, Speaker A: If you follow this channel, you're probably really into DeFi and you love to study new DeFi protocols. But that's not the case of the average end user of DeFi. The average end user just want to make money in DeFi. That's it. What if we could invest tokens into the best DeFi protocols with the highest interest rate automatically without having to do anything? Well that, that's the whole point of the yearn finance protocol. So with Yern finance, you send your tokens to their smart contract and they automatically forward your tokens to the DeFi protocol with the highest interest rate. This is all automatic.
00:00:41.382 - 00:01:26.790, Speaker A: You don't have to do anything. So in this video we are going to build a wallet that invests into the best DeFi protocols by using yarn finance. And for that we are going to create a smart contract using solidity and truffle. So if you're a total newbie and you don't know solidity, this tutorial is probably a bit too advanced for you. And first I recommend to follow another tutorial of mine on solidity. I put the link in the description and before we continue, I have a quick announcement to make. I'm currently working on a new course on advanced solidity, so if you want to receive some exclusive previews and be notified exactly at the time it comes out, make sure to register with the link down below.
00:01:26.790 - 00:01:34.460, Speaker A: If you don't know me, I'm Julian and on my channel etherblocks, I teach blockchain development and how to find your first blockchain job.
00:01:38.750 - 00:02:20.170, Speaker B: This is the website of yearn Finance, so in order to invest you click on earn and you have to connect your metamask wallet. And after you will see a list of all the stable coins that you can invest in the protocol with the interest rate that you're going to earn for each coin. So keep in mind that this interest rate is variable. So for example, if you keep die invested for one year, you're not going to get 4% something. You might get a bit more, a bit less. It depends how it evolves. And if you want to invest a specific coin, you expand the interface, you specify how much dai you want to invest.
00:02:20.170 - 00:02:56.158, Speaker B: For example, you click on earn and it send everything to the spot contract of yearn. And when you want to withdraw your investment, you use the input box on the right and you click on claim and that's the end. You have your die back plus interest. So it's pretty simple to use. So now let's see how it works. So here on the left we can see all the different stablecoin we can invest. So we invest them in the urine protocol and after yearn will reinvest these stablecoins into different yield protocol.
00:02:56.158 - 00:03:38.530, Speaker B: So currently there are three protocol activated compound, Dydx and Ave. So let's take a specific example. For example, if you want to invest some DAi, so actually urine has different smart contract for each stable coin. So for Dai, for example, we have the Y Dai contract for USDC, we have YUSDC, etc. So here we have our owner, so here we have our owner who has some Dai, so he send his DAi to the y dye smart contract. In exchange he gets some y DAi token. So that's basically a token that represents your investment in the Yern finance protocol.
00:03:38.530 - 00:04:37.090, Speaker B: And at the same time YDAi doesn't keep the DaI on its own smart contract, but instead it sends the DAi to the DeFi protocol that give the highest interest rates. For example, if this is compan, all the Dai I sent to Kompan in exchange we get a liquidity provider token. So liquidity provider token, this is the general term, but in the specific case of compan we're going to get some C token. So we're going to get some CDAI back from Kampan and the CDI will be owned by the YDAI contract. In the future when you have another investor that repeat the procedure and send some DAi, so you still get some y Dai. But this time if the defi protocol that yield the best rate is different from compound, so everything will be withdrawn from compound and reinvested in the DeFi protocol with the highest interest rate. So in this example, this is Aave.
00:04:37.090 - 00:05:22.626, Speaker B: And again the wide eye contract will have some liquidity provider token that represent the investment in DAi. So the rebalancing in the best DeFi protocol happen every time someone invests in the yearn finance protocol. Okay, so now you understand how yearn finance work. And next I'm going to explain how our wallet will work. So this is how our defi wallet will work. So instead of sending out dye to the wide eye smart contract, we will send the dye to the smart contract of the wallet and the wallet will forward the DAi to the wide eye contract and trigger the whole operation. So the rest is exactly what I showed you before.
00:05:22.626 - 00:06:15.262, Speaker B: So every DAi that is sent to the wallet automatically end up in the Yern finance protocol and we start to earn interest on it. And when we want to withdraw the wallet will send back the YDI token to the wide eye spot contract. Then the wide eye spot contract will send back the DAI, and finally the wallet will send back the DAI to the owner address or any other address. So the advantage compared to directly investing in yuan finance is that when we spend some die, we don't need to first withdraw the DAi from the yen finance protocol. And after transfer the die, everything is done in a single transaction. So you just say to the wallet, hey, I want to spend, for example, 100 die. Then the wallet automatically withdraw all the die that we have invested in yon finance.
00:06:15.262 - 00:06:51.470, Speaker B: Then it send the die to wherever you want to send them. And if we have any die left in the wallet contract, it reinvests all the remainder back to the yarn finance protocol so that you keep earning interest on the remaining of the money. And the other advantage is that it abstracts away the yon finance protocol. For the end user, there is just a wallet. They just send a token to this wallet and it automatically earns some interest. They don't need to take care of the detail of such and such defi protocol. Okay, so now that we understand how our DeFi wallet works, next we're going to start the coding.
00:06:51.470 - 00:07:52.340, Speaker B: So we're going to build our wallet with truffle and solidity. So you need to have node JS installed and also truffle, so you can install truffle really easily with NPM. Install global truffle. So after that, we are going to create a truffle project in the current directory. So truffleinit, after we're going to use three d zero point six. So we need to configure truffle config because by default use 0.6.0. All right, and we're also going to initialize a NPM project.
00:07:52.340 - 00:08:26.014, Speaker B: And after we're going to install open zeppelin. So the library for three DT smart contracts NPm install at openzeplingcontracts. So we need it for the interface of yes, 20 tokens. So die is an yes, 20 tokens. So that's why we need this. All right, and after that we're going to create a new file for our wallet spot contract. So inside the contract directory, we call this wallet saw.
00:08:26.014 - 00:08:56.790, Speaker B: Okay, and after, let's open this. So we start with a pragma statement, like for any smart contract. So we use three DT 0.6. I tried to originally make this wallet with solidity 0.7, which just came out. And by the way, I did a video about solidity 0.7 if you need to learn the main features, but unfortunately this is not compatible yet with open zeppelin, which still use three t 0.6.
00:08:56.790 - 00:09:57.870, Speaker B: So we are stuck at this version. So we define our wallet smart contract and we're going to define an address for the admin. So only the admin can spend the tokens inside. So this admin is going to be defined as the address that deployed the smart contract. Okay, and after we are going to create a pointers to die and y die. So first let's create a pointer to die. So for that we need to import the interface of yas 20 from open ziplin and we also need to define the interface of the ydai smart contract.
00:09:57.870 - 00:10:30.060, Speaker B: So for this we need to do some research on GitHub. So this is the GitHub of urine finance. So we going to find the repo itoken. It's where we have the solidity smart contract. Inside we go to contract. And smart contract we want is wide eye v three. So let's scroll down and there are a couple of function that we will need.
00:10:30.060 - 00:11:24.780, Speaker B: Scroll down, scroll down. Okay, here, contract, wide eye, that's what we want. So first we're going to need the deposit function in order to deposit invest in un finance. So back to our smart contract and we define this function signature. And after that we will also need the withdrawal function. So that's to do the other operation, take money from yarn finance and have it back in our smart contract. All right.
00:11:24.780 - 00:12:06.986, Speaker B: And we also need balance off to know how much we have invested here. Balance off. And finally at the bottom of the file we'll need this function, get price per full share. You will understand after why. Okay, so now we can define our pointer to die and why die. So first to die. So ERc 20.
00:12:06.986 - 00:12:39.620, Speaker B: And here we're going to put the address of die. So I go to ether scan, I type die and here I see die. All right. By the way, getting address of smart contract with ether scan like this, this is not the safest thing in the world. It's better to check out the documentation of the project. It's possible for anyone to call the coin die and just to fool you. But here I know this is the correct one, but I'm just telling you in general.
00:12:39.620 - 00:13:26.758, Speaker B: Okay, so this is the correct one. So I want to copy the address. Okay, so now we can interact with the DAi contract. And so now for Ydai we are going to do something very similar. So we go to the documentation of yarn finance and in registry you will see the address of the different token. So here we copy y die v three. All right, and now we can interact with die and Ydai.
00:13:26.758 - 00:14:24.946, Speaker B: So we're going to create our first function to invest in YDI. So we're going to call this save and it receive an argument which is the amount of die that we want to invest. So first of all we'll transfer the Dai from the sender to our wallet like this. And after that we will send our die to YDi. So first we need to approve YDI as a so because now the die are inside the wallet and YDI will try to use the transfer from function. But for that we need to approve it before. So address of Ydai for this amount and after we use the YDI pointer and we're going to call the deposit function for this amount.
00:14:24.946 - 00:15:12.334, Speaker B: And so now our Dai token are inside y dai and it is earning interest. And in exchange we have some y dai token inside the wallet and we're going to use this ydi token when we want to redeem our die. Okay, so next we're going to create a function to spend our die when we want to do the other operation so it accept also an amount. And first we need to make sure that the sender is the admin. Otherwise everybody can steal our coin. This is not great. We don't need require admin for the save function because anybody can send us some coin.
00:15:12.334 - 00:16:05.394, Speaker B: This is fine. The critical operation is for the spending. So next, in order to redraw our die, we cannot just forward the amount argument because here this amount, this is an amount in die. But the withdrawal function of ydai expect an amount in terms of the ydi token. And so in order to know our balance in y dye token we going to use another function of y dye, y dye balanceoff. And the address is the address of the wallet. So here you can see that from the point of view of ydai, there is no concept of the admin.
00:16:05.394 - 00:17:03.220, Speaker B: The address outside of the wallet that initiated everything. Wide eye only know the address of our wallet. And after we can call the redraw function by providing a share of the balance of y die that we have. So we withdraw everything. Now all the die are inside the wallet so we can spend them with dai transfer and here recipient amount. And if we have any dai remaining we need to reinvest them into uran finance to keep earning some interest. So let's get the balance of dieo to zero.
00:17:03.220 - 00:17:47.426, Speaker B: Then we're going to reinvest them in die. So here actually instead of doing some copy pasting we can do something slightly better and extract this into a function. It's more clean like this. So we make it into null. We can only call it from inside the smart contract. And the amount here will be the amount that we pass as an argument. And here we call save with balance die.
00:17:47.426 - 00:18:55.500, Speaker B: And here we're going to replace this by save amount. Okay, and the last function we're going to do is the function balance to know how much dai we have available. So we'll have the initial amount of Dai that we invested plus the interest earned by yarn finance. So this is a view function, so you don't need any gas to call it, it just reads some data from the blockchain. So there is no function on yarn finance that gives you directly your balance of die, but you can do it in two steps. So first you need to have the price for each share, so get price per full share. Second, you need your balance of shares so y die balance off for this address.
00:18:55.500 - 00:19:44.780, Speaker B: Finally you return this balance time the price and now you know how much die you currently have. Okay, so if you try to compile this, probably you'll get some computation error because here we don't have checksum address. So let's see the message of solidity probably will complain a little bit. Okay, so first of all, I forget a variable in the spend function. So here we also want to know the recipient. So we don't have to send token to ourself. We can send token to someone else if we want.
00:19:44.780 - 00:20:15.720, Speaker B: Okay, so let's compile again. Yeah, so here we have solidity complaining about this address, not checksum. Okay, so we're going to take the hint of solidity and replace this. So it was line 14. All right, this is the correct address. Solidity can be a little bit sensitive sometime. So now we compile again.
00:20:15.720 - 00:20:39.360, Speaker B: Okay, functioning interfaces must be declared external. Okay, so here we can make this external doesn't matter for us, right. Try again to compile and this time yes, it works great.
00:20:43.650 - 00:20:46.538, Speaker A: Okay, so we finished the coding of the spot contract.
00:20:46.634 - 00:20:48.202, Speaker B: So what are the next steps?
00:20:48.266 - 00:21:10.402, Speaker A: Well, first you could add a front end for your wallet, so it can be a web front end or a mobile front end that you build with react native. Then on the smart contract side you can still add some stuff. For example, you can add more tokens. So currently we only accept dive, but the yarn finance protocol can also handle.
00:21:10.466 - 00:21:12.562, Speaker B: USDC, tether, et cetera.
00:21:12.626 - 00:21:37.742, Speaker A: So you can add all these tokens in the smart contract. Then you could also solve a problem that we have. So if we send a Dai token directly to the address of the wild smart contract, the wide smart contract will not detect that it has received some DAi. And so this DAi will just stay in the address of the contract and they will not be sent to the Yun finance protocol and we will not.
00:21:37.796 - 00:21:39.022, Speaker B: Earn interest on them.
00:21:39.076 - 00:21:52.014, Speaker A: So it's a bit of a wasted opportunity. So in order to solve this, you could have a system where every day you have for example a node JS script that check out if we have any DAi in the address of the wallet.
00:21:52.062 - 00:21:53.518, Speaker B: And if that's the case, then it's.
00:21:53.534 - 00:22:33.130, Speaker A: Going to call the save function so that we invest the Dai token in the yarn finance protocol. Of course you will have to pay for transaction fees, so you will need to take this into consideration in your design. If you do this too often, it's going to cost you too much money. You could also add other function to support some other functionalities. For example, investing in Uniswap or other Defi protocols, you could also decide to support ether. So currently we just support ESC 20 tokens. But you could have a fallback function, so you can send ether directly to the smart contract of the wallet.
00:22:33.130 - 00:23:33.642, Speaker A: And in this fallback function, what you're going to do with this ether is you change it to Dai or any other stable coin supported by the UN Finance protocol. For example, on Uniswap you change ether into DAi, and then with this DAi, then you invest it in the yarn finance protocol. And when you want to spend your ether, then you do the contrary. You withdraw your investment from Yun Finance, use Uniswap or Kyber for example, change it to ether and then send it to another address. Another improvement you could add is make your wallet contract more updatable. So instead of investing your diet token directly from the wallet contract to the yarn finance protocol, you could have an intermediary smart contract that will call the investment manager and at any time the end user will be able to change which investment manager they want to use for their wallet. So your first investment manager will be for Yarn finance.
00:23:33.642 - 00:24:16.866, Speaker A: But in the future you can deploy new investment manager with other DeFi protocol as the backend. And so that's how you would make your wallet smart contract much more dynamic, much more updatable. In order to implement all the improvement I suggested, you will need to have some advanced skills in solidity. And the good news is that I am currently working on a new course on advanced solidity. So if you want to be notified when it comes out and receive some exclusive previews, make sure to sign up with the link just down below. And in the meantime, if you want to keep learning other cool stuff on defi programming. Check out this series on my channel.
00:24:16.866 - 00:24:17.840, Speaker A: I'll see you there.
