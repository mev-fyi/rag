00:00:00.330 - 00:00:48.380, Speaker A: In this video, we will code a catastrophe bond in a solidity smart contract. A catastrophe bond is an insurance product that allow you to get some compensation if some natural disaster happens. Hey, I'm Julian and on my channel eat the blogs, I teach blockchain development and how to find your first blockchain job. So let's see how catastrophe bone work. So let's say that you have an insurance company that insure a lot of people against the risk of a natural disaster happening, like a hurricane. So if this disaster actually happened, the insurance company will have to pay a lot of money to the people who are insured. So the insurance company wants to offload this risk to other people.
00:00:48.380 - 00:01:39.830, Speaker A: So in a catastrophe bond you have two party. One party is what we call the sponsor. So in our example that would be the insurance company and the other party is the investor. So the sponsor will pay some coupon or also called interest to the investor. The investor is going to send the principal into the bond, so it's going to be a larger sum. And if a catastrophe ever happened, then this principal is going to be transferred to the sponsor, so the insurance company. Otherwise, if no disaster happened, then this principal is returned to the investor and the investor can pocket in a nice interest.
00:01:39.830 - 00:02:22.650, Speaker A: So why it's interesting for investor, it's because this investment is really not correlated with other investment. So it's really good when they are building their portfolio. Because when you're building a portfolio you want investment that have no correlation and that's actually very difficult to achieve. Before we continue this tutorial, if you are a total beginner in solidity, you should first check out my tutorial series on solidity. And after, once you have some basic level, then you can come back to this tutorial. So let's start our coding. So we'll go into remix and we create a spot contract.
00:02:22.650 - 00:03:12.666, Speaker A: So first we'll code the variable that we'll need in our bone. So we'll start with the principal, then the coupon. That's what the sponsor needs to pay to the investor, then the oracle. So the oracle is a smart contract or an external ethereum address that will report the outcome. So it will answer the question, a disaster did happen or not. Then we're going to have the address of the sponsor, then the address of the investor. Both of them need to be payable because we need to send money to them.
00:03:12.666 - 00:04:01.222, Speaker A: Then a disaster bond has an end because we're going to be insurer until a certain date. It's never forever. And then we're going to store the outcome. So first we need to create an enium for this. So an enium will have three cases, three options, non disaster happen, not happen. Okay, after we store this into a variable, so outcome. All right, so next we're going to create a constructor that will be called by the sponsor.
00:04:01.222 - 00:04:52.410, Speaker A: So it's going to take a couple of arguments. First, the address of the oracle, then what's the principal, and finally, what's the duration of the loan in second, and this needs to be payable because we're going to send some money to this. So then we're going to assign the different variable to address of the oracle. How much is the principal for the coupon. This is basically what the sponsor will send to this constructor. Then for the sponsor, that's basically the center of this transaction. So the address that create this contract.
00:04:52.410 - 00:05:49.500, Speaker A: And for the end variable, well that's now plus duration. This will be a timestamp in second. So next we're going to create a function for the investor so that he can invest external and that's payable because we want to send some money to this. So the investor needs to be the first one. Once an investor, I've already called this function, this is too late. An investor already registered. Okay, then another condition is the value sent must be exactly the principal, otherwise not enough money sent.
00:05:49.500 - 00:07:06.710, Speaker A: And finally this must be before the end of the loan of the bond, otherwise this is too late. So if all the conditions are satisfied, then the investor is the sender of this transaction and we're going to transfer the coupon to the investor. This is a reward for providing the insurance service. And after we need another function to report the outcome if a disaster ever happens. So this is going to be called by the oracle and as an argument it will provide the value of this outcome. First we want to require that this is the oracle, otherwise this is not safe, only Oracle. Then we want to make sure that an investor was registered, otherwise there is no point in reporting this outcome.
00:07:06.710 - 00:08:35.166, Speaker A: So it needs to be different from the zero address, no investor registered and it also needs to be before the end of the loan of the bond. So if all these condition satisfy, then we're going to test that. What's the outcome, by the way? We also need to save the value of the outcome so that we can read it for reference from the smart contract. So let's compare this. If this is outcome, disaster happened, then we send the principal to the sponsor, transfer principal, so the investor will lose the principal in this case. But that was a risk he was taking, and otherwise the investor is going to get back his money. Okay, so once you have this smart contract, what do you do? Well, the next step will be to build the front end.
00:08:35.166 - 00:09:08.580, Speaker A: So you build a full decentralized application with a UI for end users, and for this you're going to need JavaScript and Webster. So this example of smart contract is an example of what you can do with DeFi or decentralized finance. And there are many other really cool stuff we can do with DeFi in solidity. And actually I have a series full of tutorial for DeFi, so check it out if you want to learn how to code solidity DeFi project, I'll see you there.
