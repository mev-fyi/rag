00:00:00.570 - 00:01:01.102, Speaker A: Hi and welcome to this new episode of the series on how to build a decentralized to do list on Ethereum. The angle of this series is to be able to have a DAP that will basically look like this. So you will be able to create tasks with some content and an author, and you'll be able to visualize the list of tasks and you'll also be able to toggle the done status. The front end is a web page and the back end is an Ethereum smart contract written with solidity and the truffle framework. In this specific video, we're going to refactor our code using webpack, Babel and Truffle solidity loader. It's great to have modern JavaScript features in your DAP, but when you mix the complexity of Es six plus the complexity of DAP, it can make things a little bit difficult and especially when it comes to combining different versions. So I've done the work for you.
00:01:01.102 - 00:01:55.678, Speaker A: So if you follow this video until the end, you can just take the combination of package that work together and you can use it to build your own dapps. So let's start by setting up the project. So as usual, you just need to copy paste the folder of the last episode, which is step five, in order to get started. If you don't already have git, clone the repo of it the blocks, you can do it now. And once it's done, you just need to step in special episode one folder and then need to copy the content of the step five folder and copy it into step six. So now we're going to install webpack, Babel and truffle solidity loader. So this will be installed as dev Npm package and we will use this command.
00:01:55.678 - 00:02:39.440, Speaker A: So for this actually to have the command, I'm going to check out the post for this tutorial on the edoblocks website and I'm just going to copy paste. So here, install the required dev Npm package. Let me copy paste all of this and I go back to my terminal, I go into the step six folder and I paste what I've just copied. It's going to install everything. Okay, everything has been installed. So now we need to move on to configure Babel by creating a Babel Aussie file. So let's do this.
00:02:39.440 - 00:04:18.930, Speaker A: And inside this Babel Aussie file we're going to use this config. Then we're going to configure webpack by creating another file called Webpack config JS so and inside we're going to copy paste this. It basically tell Webpack to take our index Js file as an input. Then it's going to use pebble to transform all the ES six syntax to Es five so all the browsers can understand it. And then it's going to save the output file into apps diskbundle jS. So now we need to update the script tag that loads our JavaScript code in our HTML file. So let's open our HTML file in app index HTML and let's go at the bottom and here you'll find a script tag that loads jsindex Js and we want to change this into distundle JS.
00:04:18.930 - 00:05:06.282, Speaker A: Okay, so now that we set up webpack and Bebel, we can use any ES six features in our front end code without being afraid of compatibility issues with browsers. So that's awesome. Babel will just transform everything into old school ESC five JavaScript that all the browsers will understand. However, at the moment things are still very inconvenient. Every time we change any JavaScript file, we need to manually ask webpack to recompile our code. What would be great is a command that watch any file changes and run webpack automatically when needed. Fortunately, Webpack already have this feature when you launch it with the watch command.
00:05:06.282 - 00:06:15.690, Speaker A: So for our convenience we're going to create a NPM command in package JSON. So let's open our package JSon and let's find the script entry and we're going to add a new command that we will call Devfront. And basically what Devfront will do is you will check in the node modules folder and there is a binary subfolder where you have all the executable of all the package you've installed. And one of this executable is webpack and we're going to launch it with the watch command. So we are also going to add another task to watch the back end code. So first you need to install node demand with this command. Notice that you need to install it globally.
00:06:15.690 - 00:07:04.346, Speaker A: And then we go back in our package JSOn and we add another command that we will call Dev back. And very simply it's going to launch node demon with server Js. Okay, so now we need to check that our setup actually work. So in a new terminal window you go into the step six folder and we're going to execute the command that we've just created, defront. The Defront command doesn't work. What's the problem? Let's check out. Okay, there is a space between the dash and the watch.
00:07:04.346 - 00:07:46.470, Speaker A: Okay, let's remove the space should be like this. And now let's try again. NPM run Defront. And it is working. Amazing. Okay, so now in a new terminal window, let's go back into step six again, and this time let's make a dummy change into our JavaScript file to see if webpack reloaded. And at the very bottom I'm just going to add a dummy comment, dummy comment and going to save this.
00:07:46.470 - 00:08:17.990, Speaker A: And did webpack change everything? Yes, it just did, because here we had like the first build of webpack and here we can see the second one. So it has worked. That's amazing. Congratulations. You've just automated an important part of your workflow. Plus bonus, now you are free to use the latest JavaScript features without fear. That's amazing.
00:08:17.990 - 00:09:23.304, Speaker A: So what I want to explain you now is how we're going to load our smart contract artifact dynamically using truffle solidity loader. So what we've been doing so far, so, so far, every time we make a change to our smart contract. So which is to do Sol. So let's say I make any change to the smart contract, the next thing I need to do is to migrate this smart contract with the truffle migrate command, and then it's going to produce a new smart contract artifact at build contract. To do so, this huge file, and we have to copy this json file and copy it into our JavaScript file. And that's a huge pain to have to do this every time. But fortunately for us, the good people of the truffle framework came up with this really cool package called Truffle solidity loader that basically automate the whole workflow I've just mentioned.
00:09:23.304 - 00:10:09.116, Speaker A: Before we go further, a quick note. If you do a Google search for this package truffle solidity loader, the first result you're going to find is actually a link to an old repo under the consensus organization. And this repo is not up to date anymore, so the documentation is outdated, so don't follow it. The repo where you want to go is the repo of truffle, and inside the repo of Truffle it's actually a little bit hidden. So it's a little bit difficult to find this info. Nobody's telling you. So there is a packages folder where you'll find all the subpackage of the Truffle framework, and one of them will be truffle solidity loader.
00:10:09.116 - 00:11:11.420, Speaker A: If you scroll at the bottom and so you go into this folder and there will be a readme and this documentation is up to date as well as a documentation on the NPM package website. Trowelfall Solidity Loader integrates perfectly with the webpack watch system. Every time you change the smart contract, Wellpack will first detect the change, and after it will call Truffle solidity loader and give it the content of the solidity file that changed. Then truffle solidity loader will do three things. First, it will recompile the solidity smart contract. Second, it will rerun truffle migration to deploy the new smart contract to your Ethereum blockchain. And lastly, it will reload the compile artifact into our JavaScript file.
00:11:11.420 - 00:12:35.120, Speaker A: All you need to do for this to work is to add an entry to our webpack configuration after the first rule that we already put just before. And for this I'm going to copy paste a snippet from the article of this tutorial on the website of it block. So going to scroll down until I find the section load smart contract artifact dynamically. And then here I have my snippet, I'm going to copy this snippet and let's go back in my terminal and then let's open the webpack file. And then we find our first rule, that is for processing JavaScript files. So you want to put a comma after this object and let's paste what we okay, yeah. Now let's go to our JavaScript file where we're going to replace the copy paste of the json artifact by just a single line.
00:12:35.120 - 00:13:28.904, Speaker A: It's going to be beautiful. And I'm going to use some vimfu to delete everything from this point to the beginning of the file. Awesome. And now we need the import statement to actually get our artifact inside JavaScript file. And we're going to use the ES six import statement import artifact from. We're going to the root of the project and we're going to reference our solidity file. And notice how this time we do not actually import the json artifact, but we import directly the smart contract, and a truffle solidity loader is going to take care of everything.
00:13:28.904 - 00:14:35.656, Speaker A: It's amazing. And now that we have access to ES six features, we don't need to go through the pain of actually copying the minified version of our dependency. So I'm talking of Webstery and truffle contract. So if you remember in previous episodes, what we did is we imported the minified version of two dependencies so they are into app vendor and it's a little bit clunky to do like this. So we're going to delete this vendor directory and we're going to leverage the fact that we actually install those two dependency with NPM. So in our package Json, you can see that we have web three here and we have truffle contract. So we can go back to our JavaScript file and we're going to import these two dependency.
00:14:35.656 - 00:15:46.688, Speaker A: So import web three from web three and import truffle contract from truffle contract. And Webpack will take care of actually loading the source code in our final bundle that will be loaded in the front end. Next we want to add some const keyword. So it's basically, it will make webpack happy. Otherwise Webpack will not be happy to see variables that are not declared with any specifier. Abstraction also is going to be const, network is going to be const and address. All right, and we also need to remove the script tags that were actually loading the minify version of Webstery and truffle contract in our HTML file.
00:15:46.688 - 00:16:32.960, Speaker A: So let's go there, let's go to the bottom, and here you will see these two lines. Webster min Js Troughcontract Min Js not needed anymore. Bye bye es six has replaced you. Currently our front end is configured to use the Ganache CLI version that is included in truffle and that runs by default at port 95 45. But in this tutorial I want to make you use a different Ganache CLI. So I could ask you very simply to just modify this number here. But that's not very flexible.
00:16:32.960 - 00:17:22.610, Speaker A: Potentially when you develop a DAP, you will probably have to change very often the configuration of your ethereum development blockchain. So we need something more flexible than just updating variables every time. So for this we're going to use environment variable and we're going to configure the URL of our Ethereum development node according to the environment variable. So it will make things much easier in the future when you develop your own DAP. By the way, this is not something I find in another tutorial. This is 100% a custom solution and it has worked really well for me, so I hope you will like it too. Let's see how it works.
00:17:22.610 - 00:18:11.810, Speaker A: So open your package json file and we're going to add an environment variable to the dev front command and we're going to call it development. Now we need to modify our webpack configuration in order to pass this environment variable to our front end when Wempack packages into a bundle. So I'm going to go back to the post of this tutorial on eitherblocks.com and I'm going to scroll down to find this snippet. And the section you want to find is called connect to different ethereum clients depending on environments. And then you will find a snippet here. Here, copy this.
00:18:11.810 - 00:19:29.210, Speaker A: I going to open the webpack config and just below the first require at the very top I'm going to paste the snippet, and then at the very bottom of the module export object I'm going to add a new entry that's going to be called plugins. And plugins is an array and I'm going to put the variable that I've just defined before just called m variables. Let's close this array. In the rule of truffle solidity loader, we also need to make a change. So there is a network key that has a static value of development. So we need to change this by the value of the environment variable amp. So for this we're going to type process amph with uppercase and we're going to remove that.
00:19:29.210 - 00:20:23.950, Speaker A: And now our configuration is complete. So now the content of our m variable is actually available to our front end. So now in our front end code we need to read the value of this environment variable and build the URL of the ethereum node that we want to connect to. So we could put this in index Js file, but it started become a little bit too chunky. So we're going to create another file that will call config JS. So create a new file in app Js and call this config. And then we're going to copy paste a snippet from the article on the website.
00:20:23.950 - 00:21:12.140, Speaker A: So scroll down a little bit and here you will find a snippet that say import truffle from truffle. And then you have a function, it's called get ethereum URL. So you copy all of this, you go back to the config file and you paste everything. So what's happening here? So first we import the configuration of truffle. So remember truffle, the framework has a configuration file that is called truffle Js and that is at the root of our project. So if you want to have a look at it, that's what we have inside. So here you define the network that you want to connect to with different parameters such as the host, the port, the gas limit.
00:21:12.140 - 00:22:32.832, Speaker A: Then we define a function that basically is going to build the connection URL based on the environment variable. So it's going to look into this truffle configuration and under the networks key, basically it's going to pass the environment variable and it's going to get the network configuration like this. And after we just have to extract the host and the port. So the trick here is that you have to match your environment variable with the entry of your configuration in the network's object here. So for example here my current network is called development and my environment variable is called development. So if you create another environment variable, for example production, then you need also to create a configuration called production into truffle JS. And then finally here we create a config object with an ethereum URL entry that's going to have the correct URL that Webster is going to use in our main JavaScript file.
00:22:32.832 - 00:23:39.930, Speaker A: Okay, we still have one thing to do is we need to make a slight change to our main JavaScript file to use this config Js file that we just created. So we're going to import this file. So import config from config JS and then we're going to replace here this static string by this dynamic configuration. And here what we want is the Ethereum URL entry. If you want to see more content like this, make sure you subscribe to the channel. You can also subscribe to my newsletter on the website of iDthoblocks, where I send a weekly newsletter of the test best link for Ethereum DaB developer, and also make a video out of it every week. And you can also like this video and share it with your friend.
00:23:39.930 - 00:23:45.110, Speaker A: And I hope to see you in the next videos. Bye guys, and happy learning.
