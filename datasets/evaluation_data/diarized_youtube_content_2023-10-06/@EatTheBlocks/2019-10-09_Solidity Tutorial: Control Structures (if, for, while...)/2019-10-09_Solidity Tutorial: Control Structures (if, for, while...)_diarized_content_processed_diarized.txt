00:00:00.330 - 00:00:42.300, Speaker A: Hello, this is Julian, and in this video I'm gonna teach you what are the control structures in solidity. By the way, I created a free email course to teach you how I got my first remote blockchain job, paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL. So if you're familiar with languages such as JavaScript or Python, you might already know a lot of control structures such as e if for an while loop. And in solidity we have exactly the same because this is a language very inspired by JavaScript. So we're going to create a function and we're going to start by if. So function foo, and this is an external function.
00:00:42.300 - 00:01:20.630, Speaker A: Okay, so in this foo function let's say that we want to test that a certain amount of ether was sent to the smart contract. So if you watch my previous video, then you know what is msg sender. So that's the amount of ether that was sent in a transaction. So exactly like in JavaScript, we can write an if and then between parentheses then we write the condition. So MSG sender. And to do a comparison we're going to use the double equal sign. So for example, if you want to test that, I don't know, 100 way where it's sent to the contract, that's how we're going to do it.
00:01:20.630 - 00:02:06.574, Speaker A: By the way, you notice that we do not use three equal sign like we would do in JavaScript for a strict comparison. In solidity there is no such thing as a strict comparison, so we're just going to use two equal sign. We can also test if MSG standard is superior to 100 way, if it's inferior, inferior or equal, same for superior or equal. And we can also add some other condition to our IFs. For example, for end. So we use the double ampersand, for example, we want that block timestamp be superior to a certain value, blah blah, blah, blah, blah blah. And we can continue to add more condition.
00:02:06.574 - 00:02:46.658, Speaker A: And if we don't want to end, but we want all, then we can use the double pipe operator. So solidity is going to evaluate that, this whole thing evaluates to true, but we can also test for the country with the exclamation point. So for example, if not boolean value, for example. So here we would declare a boolean value, bool value. Yeah, that's how we would test it. So once we've declared our test in the if, then we open curly braces and inside we write code that will be run only if this test pass. And we could also add another branch to our if statement with else.
00:02:46.658 - 00:03:21.834, Speaker A: So if this condition here doesn't pass, then this will not be executed, and instead what is inside here will be executed. Okay, so that's it for the if control structure. So now we're going to see another one, which is the for loop. So the for loop allow you to iterate over a collection of values such as an array. By the way, in the next video I'm going to tell you about array. So the way a for loop works. So you declare a for loop with the for keyword.
00:03:21.834 - 00:03:55.094, Speaker A: Then you open two parentheses, and then you open curly braces, and it's going to run the code inside the curly braces a certain amount of time. First you need to set up your for loop. So the first thing you need to do is to initialize a counter. So you're going to declare an integer. For example, you're going to call it I. You don't have to call it I, but that's very usual to call out counter I. So you initialize it at zero.
00:03:55.094 - 00:04:40.150, Speaker A: Then you add a semicolon, and then you specify the stopping condition. The loop is going to run until this condition is not true. So if you want to run from zero to nine so that's ten times, then the stopping condition is I strictly inferior to ten. And for every pass of the loop then we want to increment I by one. So we do this by specifying I plus plus inside your for loop you do whatever you want. So in general, inside your for loop, you will want to access the value of I. So the first time I is going to equal to zero.
00:04:40.150 - 00:05:29.234, Speaker A: The second time I is going to equal to one, et cetera, et cetera, up to nine. All right, so that's it for the for loop. And the last control structure I want to show you is the while loop. So the while loop is similar to for, in that it allow you to go through a collection of data or you can run a computation a certain amount of time. The difference between well and a for loop is that with the while you might not know in advance how many time you need to run the computation, because in a while loop. So first you declare a while loop like this. Then you open parentheses and curly braces, and between parentheses you specify a condition that must be tested every time you run the code inside the while loop.
00:05:29.234 - 00:06:24.678, Speaker A: So for example, if you specify while true, this is an infinite loop. So that means the code inside is going to run forever by the way, this is not possible to do this in solidity. So instead of the true, you are going to test for some condition, and this testing condition must be true for the well to continue. So we can create a boolean value called I don't know is okay, for example, and is okay is initialized to true. So while is okay, then run a certain computation and probably that at some point you're going to test for something and you're going to change the value of your Isok variable to false. So is okay equal false. So what's going to happen is your while loop is going to run as long as Isok is true.
00:06:24.678 - 00:07:19.410, Speaker A: But when this if condition is going to be executed, then Isok is set to false, and the next time while executes, then it's going to see that isok is false, so it's going to exit the loop. By the way, when you have your testing condition inside the while, it doesn't have to be a variable, but it can be something more sophisticated, like a test. For example, for example, is okay equal true or is okay equal false? And you can also have some other condition exactly like in Eve. So you can use the double ampersand for n or the double pipe for a or condition. Also exclamation point if you want to negate a boolean value. And finally, a last thing that is interesting in a while statement is to break out of it. So the way I show you before, like where we change the value of a variable and you break out of the while statement is one way, but you can also use the break statement.
00:07:19.410 - 00:07:57.942, Speaker A: Or another thing you can do. If you know that you don't need to run the computation after because something happened, then instead of the break you can use the continue statement. And in this case when this happened, then all the code that is after in a while loop is skipped and we go for the next iteration of the while loop. By the way, the break and continue keyword I just mentioned can also be used in a for loop. So as I said before, if you used to JavaScript, then all of this statement must seem very, very familiar to you. It's almost exactly the same thing in solidity. That's it for this video.
00:07:57.942 - 00:08:04.020, Speaker A: In the next video I'm going to show you how we can declare and manipulate arrays in solidity. Thanks for watching.
