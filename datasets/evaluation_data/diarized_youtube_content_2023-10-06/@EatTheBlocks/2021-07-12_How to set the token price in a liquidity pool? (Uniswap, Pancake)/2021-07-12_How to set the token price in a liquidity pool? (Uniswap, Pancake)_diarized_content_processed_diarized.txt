00:00:00.330 - 00:00:46.694, Speaker A: After you launch your token, how can you control its price? You might want to control the price at the beginning when you list the token as well as later. I'm going to show you how to do this in this video. What I will explain applies to Uniswap and any of its forks like sushiswap, pancakeswap, etc. If you don't know me, I'm Julian and on eidoblocks I teach blockchain development. Before I show you how to control the price of your token, you need to understand how the price of tokens is determined on decentralized exchanges. In a decentralized exchange like uniswap or pancakeswap, markets are organized in liquidity pools. In each liquidity pool, you have two assets, for example, cake and BNB, BNB and BUSD, etc.
00:00:46.694 - 00:01:26.038, Speaker A: In each liquidity pool, traders can buy in both directions. For example, for the pool cake bnb, you can buy some cake by providing some bnb, or you can buy some bnb by providing some cake. What makes this liquidity pool so special is the concept of automated market maker. In an automated market maker, the price of the token is determined by a formula. This formula is called the constant product formula. It's extremely important that you understand this formula if you want to control the price of your token. The constant product formula says that at any point, the product of the two token reserves must always equal the same amount.
00:01:26.038 - 00:02:10.978, Speaker A: For example, if the two tokens are USDC and cake token, and you have 1000 tokens of each in the pool, the product is equal to 1 million. If you want to buy some cake tokens after the trade, we're going to have less cake tokens and more USDC in the pool. We are going to move on the left on this chart. For example, if we want to buy 200 cake tokens, this is the equation that we have to solve, which can be rearranged to find the final number of USDC that we have in the pool. We also know that before the trade, we had 1000 USDC in the pool. So we compute the difference and we find the amount of USDC that was necessary to pay in order to buy cake tokens. So that's 250 USDC.
00:02:10.978 - 00:02:49.026, Speaker A: And if you want to calculate the average price that you paid for each cake token bot, you just divide the number of USDC token that you paid by the number of cake tokens that you got in exchange. The average price is $125 per cake token. Now, what if instead of 200 cake tokens, you wanted to buy 500? In this case, you would pay 1000 USDC, which means $2 per token. So here we learn two important things. First, the token price depends on the number of tokens you buy. Which means when someone asks, what's the price of a token? We cannot give an absolute answer. It depends on how much they want to buy.
00:02:49.026 - 00:03:41.726, Speaker A: Second, the more token you buy, the more expensive the average price will be. That's what we call sleepage, and at some point, the price becomes infinite. This guarantees that there will always be a price at which you can buy tokens, even though there might not be the quantity of tokens that you want. Last thing about token prices, when someone adds liquidity to the liquidity pool, the pricing curves moves upward, which means there will be slippage, or in other words, the price will increase more slowly as you buy more tokens. That's it for the basics of token price. Next, we will see how you can set the initial price when you just list your token. To set the initial price for your token, you will need to deploy a liquidity pool on a dex like pancakeswap or Uniswap, and be the first one to provide liquidity.
00:03:41.726 - 00:04:22.698, Speaker A: Once you have deployed your token, anybody can deploy a liquidity pool, and it doesn't matter who deploys the liquidity pool first. However, it does matter that you are the first one to provide liquidity. An easy way to make sure that you are the first one would be to create a token where you initially own 100% of the total supply. To provide liquidity to a liquidity pool, you need to have the two assets of the liquidity pool. If you are the only owner of the token, you are the only one who can provide liquidity at this time. The next question is how much liquidity to provide initially. To answer this question first, we need to understand what happens when you provide liquidity.
00:04:22.698 - 00:05:07.406, Speaker A: When you provide liquidity, you provide the same value of the two assets. For example, if the assets of our liquidity pool are our token and USDC, when you provide liquidity, you will provide the same value of tokens via USDC. But how can you tell? If you provide the same value at the beginning, there is no price. Whatever amounts you send will be considered to have the same value. If you send 1000 USDC and 1000 token, that means the initial price of your token is $1. If you send 10,000 USDC and 1000 token, that means the initial price of your token is $10, et cetera. But how can you decide between all these different combinations? This is an optimization problem.
00:05:07.406 - 00:05:42.694, Speaker A: There is no perfect answer. What you can do is start with the market cap of the token. Which value do you think your project should have initially? 1 million? 2 million? 3 million? Let's say 1 million. Then you have to decide which price you want initially per token. If you want $1 per token, that means the total supply of the token should be 1 million. Because 1 million times $1 per token equals a $1 million market cap. Then you have to decide what is the portion of the total supply that you will provide as liquidity.
00:05:42.694 - 00:06:33.654, Speaker A: If you decide to provide 10% in our example, it means you would provide 100,000 USDC as well as 100,000 tokens. In general, investors prefer that you provide a large share of the total supply as liquidity because it reduces the risk that you could destroy the token price in the future. For example, don't try something crazy like having a 100 billion dollar market cap and provide just a tiny fraction of the liquidity in a dex. In this case, your market cap is just theoretical and investor know this. Of course. Now you know how to set up the initial price, but on a practical basis, how do you do it? You can do it programmatically if you want, by calling the add liquidity function of the router smart contract. But the most simple is simply to use the interface of your dex.
00:06:33.654 - 00:07:06.126, Speaker A: This is pancakeswap and it works exactly like Uniswap. There is a menu. To provide liquidity, you have to select two assets of the pool. The order doesn't matter. For your token, you have to copy paste the address you type, the amount you want for each asset you validate, and Metamask will ask you to confirm some transactions. There should be three transactions. One to approve your token to be spent by the DEX, one to approve the other asset to be spent by the DEX, and the call to the add liquidity function of the router.
00:07:06.126 - 00:07:52.866, Speaker A: After that, you will receive what is called some LP tokens to your address. At any time, you can redeem these tokens against the assets that you initially provided. You will not get back exactly the amount that you provided, but it will depend on the current price at the moment of withdrawing your liquidity. You will also collect your share of the trading fees at the moment of restraining your liquidity. So that's it for setting up the initial price of your token. And next, I'm going to show you how you can manage the price during the lifetime of the token. After you created the liquidity pool and provided the initial liquidity, anybody is free to buy or sell your tokens, which will make the price fluctuate in other words, you lose control of the price.
00:07:52.866 - 00:08:35.974, Speaker A: But there are still a couple of techniques you can use to influence the price in a positive way, and I'm going to show you this. The first technique is to set a price floor. With a price floor, you can guarantee that the price of the token will not go below a certain value. To do this, the first step is to provide 100% of the total supply of the token as liquidity. In our previous example, we had a token with the total supply of 1 million and an initial price of $1. If you want to set a price of $1, you will need to provide to the liquidity pool 1 million tokens and 1 million USDC. At the beginning, nobody can sell the token since the entire supply was provided as liquidity, traders can only buy the token.
00:08:35.974 - 00:09:17.646, Speaker A: As they buy tokens, there will be less tokens and more USDC in the pool, which will make the price of the token go up above $1 in the future. In the worst case scenario, if all buyers sell their tokens, we will go back to the initial situation with 1 million USDC and 1 million tokens in the pool with a token price of $1. However, there is a flow in the system. What if you, the provider of the initial liquidity, decide to redraw your liquidity? You would destroy the price floor. It's not enough to just promise your community that you will not withdraw the liquidity. We're crypto people and we don't want to rely on any individual. We only trust code.
00:09:17.646 - 00:09:59.270, Speaker A: If you want to do a real price floor, you need to lock the LP token in a smart contract, if you lock the LP token forever, it means you will never be able to sell your tokens. It's as if you made a donation of the entire supply along with the USDC you provided. It's probably not what you want. Instead, you could lock the LP tokens for a certain time with a timelock contract. I provided the code for this in the GitHub repo of it the blocks. All you have to do is to send your LP tokens to this timelock contract and specify a duration. A LP token respect the interface of ES 20 tokens, so it's very easy to manipulate, and once you reach expiration, you can withdraw your LP tokens.
00:09:59.270 - 00:10:45.478, Speaker A: But that also means that the price floor of your token is only valid up to the expiration of the time lock. After you can do whatever you want with the LP tokens, there is no guarantee for your traders anymore. You could do something a bit more sophisticated, where you release only a part of the LP tokens at a different expiration date. But I'll leave this to you as an exercise. What else can you do to support the price of your token? You could burn some of the tokens, which simply mean you send some tokens to an address that nobody controls, like the zero address. That would decrease the total supply of tokens in circulation, which would increase the price of the token. But there were a couple of studies that showed that token burns weren't very effective to support the price of tokens.
00:10:45.478 - 00:11:24.214, Speaker A: And the last possibility is to do token buybacks. With token buybacks, you simply buy some of your own token in the liquidity pool. You can do this with your own money, of course, but you can also use the profits of your project for this. For example, if your project earns some trading fees, you could use this money for buying your token. In DeFi, there are a couple of projects which did this, and outside of Defi, we also have a couple of examples of this, like Apple, which is famous for using their treasury to do stock buybacks. Now you understand how the price of a token is determined. You also know how to set the initial price of a token, and how to influence its price after.
00:11:24.214 - 00:11:58.860, Speaker A: Keep in mind that the bigger the market cap of your token, the more difficult it will be to control its price. At some point, once the market cap becomes too big, it becomes impossible to control the price of your token. Ultimately, the market decides what's the price of your token, and as the trader of the token, the best thing you can do is just build useful features, communicate well, and convince the market that your token has some value. Next, if you need a refresher on how you can create your own token, you can watch this video. This is a tutorial for beginner where we create a BP 20 token for the finance marching. I will see you there.
