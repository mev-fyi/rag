00:00:00.490 - 00:00:40.460, Speaker A: Hello, this is Julian, and in this video I'm going to explain you whether you should learn Viper or solidity for Ethereum smart contract. So solidity is really the standard on Ethereum. Most developers know this programming language. Most companies need a developer with solidity skills, and most developer tools are designed for solidity. First, for example, four was first designed for solidity, open Zeppelin. The framework for smart contract is also written in solidity. So by choosing solidity, really, I would say that you make your life easier and it's just going to be much more compatible with everything.
00:00:40.460 - 00:01:17.570, Speaker A: However, there are some problem with solidity. For example, the syntax sometimes is not really clear. Also, it's not very easy to audit the smart contract to make sure that it's safe. So that's why there are some programmers who decided to create an alternative smart contract language called Viper. So the design objective of Viper is first, simplicity. So its syntax is like Python, and it's actually easier to read some viper code compared to solidity. And second, is also easier to audit a viper smart contract.
00:01:17.570 - 00:01:54.106, Speaker A: So that's very important for security. So this is for the positive aspect, but there are also some negative aspects. So for example, in Viper the language is still a bit primitive compared to solidity. For example, you don't have dynamic arrays, so it's a little bit difficult to work around this. Also, you don't have an inline assembly, so you cannot really do very low level stuff. And also you don't have modifiers for your smart contract. And there are like a few features that are missing in Viper.
00:01:54.106 - 00:03:07.682, Speaker A: And the reason they're not present is because the creator of Viper thought that these features were a way for programmers to take some risks, so they wanted to eliminate this. But there are also for me, the two most important disadvantage of Viper are one, most of the development tools in the Ethereum community, they are not compatible with Viper. So for example, you don't have an equivalent of open Zeppelin written in Viper. So that means that many times you will have to re implement some smart contract of openzepling, but in Viper. But by doing so, your smart contract will probably be less secure than the audited solidity code of open Ziplink, and that kind of defeats the purpose of having a better security for Viper to begin with. And second, another problem I see is that you have many companies that actually don't need Viper skills. So as a developer, if you want to find a blockchain job, it's going to be a little bit more difficult to monetize your skills in Viper, as opposed to solidity.
00:03:07.682 - 00:04:10.142, Speaker A: Also, for Windows user, Viper is not so easy to install on Windows. Windows is finally a second class citizen for Viper, and a large part of blockchain developers still are using Windows, so not really good for these guys. So I would say my advice is first, you need to learn solidity if you are new to Ethereum and smart contract, and only after you can start to learn Viper for fun if you want. But I don't really recommend you to write production smart contract in Viper. It's still a sort of alternative to solidity, but that's not really the most easy to use, the most compatible. By the way, if you are interested in solidity, I've prepared a short email course of five emails where I give you my best tips for solidity. So if you want to put your hand on that, all you have to do is to follow the link in the description and I'll send you this.
00:04:10.142 - 00:04:24.298, Speaker A: I hope that this video was useful for choosing whether you should learn solidity or Viper. If you have any question then post them down below in the comments. And thanks for watching and see you for the next video. Bye.
