00:00:00.570 - 00:00:32.470, Speaker A: Hello, this is julian and you are on idoblocks. And in this video I'm going to tell you about what are the variable types in solidity? In solidity, contrary to JavaScript, you have to declare the type of your variables before you are able to use them. So it's really important to understand variable type in solidity. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 euro. So if you want to learn all my secrets, you just have to sign up at this URL. All right, so let's get started.
00:00:32.470 - 00:01:16.994, Speaker A: So this is remix and this is a smart contract and I'm going to show you the different variable type in solidity. So we can group this variable type into three categories. So the first category is fixed size types. So this type occupy a fixed size in memory. Then the second time is variable size types. So these type are a little bit more complex and they can hold a data of a variable length. So if you don't know in advance what's going to be the size of your data, then that's one of these type that you need to use, and the last one is user defined data.
00:01:16.994 - 00:01:51.390, Speaker A: So if you need a custom representation of data, that's what you need to use. So I know that it sounds a little bit abstract, so let's give some specific example. So in a fixas type, one of the most useful type is the boolean type. So that is exactly like it in JavaScript. For example, you can say is ready maybe that your smart contract can have different states. So you can store this in a boolean variable. So this can be true or false.
00:01:51.390 - 00:02:42.382, Speaker A: Then another type is uint that stands for unsigned integer. So this type is very very useful because every time you want to do a financial transfer like sending ether or sending an ES 20 token, then you are going to use this type. So this is a little bit similar to the number type in JavaScript, except that in solidity uint can only hold positive numbers and these numbers have to be integer, so they cannot be floating point numbers, that's to be one, two, three, et cetera, et cetera. So you're going to be using this type a lot in your smart contract. Then you have the address type to represent ethereum addresses. So this is very important. When you want to send some ether or an ES 20 token you need to know what is the recipient address.
00:02:42.382 - 00:03:28.714, Speaker A: Or when you want to interact with another smart contract you need to know also its address. So to declare an address, use the address keyword and then you name your variable. So for example, it can be the recipient for some financial transfer. And the last fixed size type that I like to show you is called bytes, bytes 32. And you can call this data for example, and this can hold any arbitrary binary data. So any series of bytes that represent some data, then you can use this type. So I know that this type sounds a little bit intimidating, but it's actually very used to represent strings, because in solidity it's not very convenient to manipulate string.
00:03:28.714 - 00:04:04.870, Speaker A: So oftentimes people prefer to use bytes 32 if they know in advance that the size of their string will not exceed 32 bytes. All right, so that's it for the fixed size types. So next let's see what are the variable size type. So the first one is the string. So you should be familiar with this one. So for example can be name, so it can be a string of any length. However, contrary to JavaScript, in solidity we don't have a lot of convenience function to manipulate string.
00:04:04.870 - 00:04:42.758, Speaker A: So as I suggest before, in many cases people prefer to represent their string as a byte 32. Another possibility is also to represent your string using another type that is called bytes. So the bytes type is a generalization of the bytes 32 type that we had before. So we can also call this for example underscore data. So this is also used to represent any kind of binary data. But contrary to byte study two, this does not have any predefined length. Then we have arrays to represent a collection of data.
00:04:42.758 - 00:05:18.590, Speaker A: For example, if you want to declare an array of integer, then you use this notation and then you give the name of your array. Contrary to JavaScript, in solidity arrays have to be array of the same type. So you can only have array of uint for example, or arrays of byte 32. But it's not possible to have arrays that are mixed. So like the first element is integer, then the second element is boolean value, et cetera, et cetera. So it's slightly less flexible than in JavaScript. Next we have mappings.
00:05:18.590 - 00:05:52.462, Speaker A: So mapping are associative array. They have keys and keys map to value. So we declare them with the mapping keyword and we define the type of the key. So for example this can be an integer, and then we define the type of the value that is mapped by each key. So here it can be a string for example, and then we define the name of the mapping. For example it can be users. So in this case that means that you will access user by a number.
00:05:52.462 - 00:06:19.602, Speaker A: So for example user of I don't know of ten and this going to give you some string. So this is very similar to how JavaScript object work. So this is very similar to the way JavaScript object work. So that's it for the variable size type. And now let's continue to the user defined data. So the first type that we're going to use for that is struct. So you first use the struct keyword, then you name your struct.
00:06:19.602 - 00:07:01.330, Speaker A: So in general you're going to use an uppercase. For example this can be user and then you open the calibrates and inside your struct you're going to define different field. So for example let's say that we want an ID, so uint ID. Then another field will be a string and that's going to be a name of the user. And you can also have some variable size type as a field. So we can also have an array of integer here and this can be, I don't know, friend Ids and you terminate this by a semicolon. So this is also similar to a JavaScript object.
00:07:01.330 - 00:07:56.094, Speaker A: But the difference with the mapping before is that with the user struct you don't have a container, you have to instantiate a single user. But after you need to put this user somewhere, for example in a container like a mapping or like an array. So in your smart contract you're probably going to make use a lot of this struct. And the last user defined type is the enum type. So this is good to represent some option, for example, so you define it by using the enum keyword and after you name your struct so it can be, for example, I don't know, a color. Then you open the curly braces and then you're going to define a different option. So for example red, green, blue.
00:07:56.094 - 00:08:47.246, Speaker A: So this enumerate can be used as a sort of labels. For example, if somewhere in your smart contract you want to represent the color red, then you're going to use this notation color red if you want to use green, color green, et cetera, et cetera. So for those of you who are familiar with the C language, then you actually might be familiar with enum and struct. So that's it for this high level overview of the variable type in solidity. I'm sure that you still have a lot of questions. We didn't get into the details of these different variable types. Don't worry, because in the course of this series we're going to go deep into each type, and I'm going to show you how you can manipulate each type, and in particular for the most complex type like array or mapping or struct.
00:08:47.246 - 00:09:14.410, Speaker A: I know that there are a lot of questions that I haven't covered, but I will cover everything in future. This video was just to give you a very high level overview on the different data type and how you can represent your data. So now that we know how we can declare our variable, then the next step is to manipulate this variable and for that we need function. So in the next video, I'm going to teach you the basics of a function in solidity.
