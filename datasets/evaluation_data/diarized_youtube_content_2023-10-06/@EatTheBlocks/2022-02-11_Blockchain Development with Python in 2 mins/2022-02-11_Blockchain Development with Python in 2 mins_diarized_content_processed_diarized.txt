00:00:00.250 - 00:00:30.242, Speaker A: Most people use the JavaScript stack to build blockchain applications. Even solidity has a syntax close to JavaScript, but there is an alternative for developers who prefer Python. In this video I will go over the Python development stack for Ethereum. If you are new here. I'm julian and at the blogs I help web two developers transition into Webster. First, make sure you hive Python version three minimum and pip install on your machine. The first tool you need to know is Viper.
00:00:30.242 - 00:01:04.606, Speaker A: Viper is a Python like language for writing smart contracts on Ethereum. The easiest way to get started is with Remix, an online IDE for smart contracts. By default, remix supports solidity, but you can also enable Viper support with the plugin manager after, you can create a Viper smart contract in the file editor. The file extension for Viper is Vy. This is a simple smart contract written in Viper. It has a state variable called Greeting, which is initialized to the string hello world in a constructor. There are two functions, print greeting, show the current value, and set greeting, which updates its value.
00:01:04.606 - 00:01:42.090, Speaker A: In the compile tab for Viper, we can compile our smart contract and after, you can deploy and interact with your smart contract in this menu exactly like with a solid smart contract. For larger projects, it's better to use a smart contract framework like brawny. This is a Python equivalent to truffle or hat. You can install brawny using this command. Then, to start a new project, you can run this command. The contracts folder is for smart contract code in solidity or Viper. The interface folder is for smart contract interfaces, the scripts folder is for deployment scripts, the report folder is for test coverage reports, and the test folder is for smart contract test.
00:01:42.090 - 00:02:29.090, Speaker A: Brawny uses Ganache CLI, a lightweight development blockchain that you can run locally on your computer. You can use the brawny console command to compile a contract and launch a contract instance in the console for testing to run test, you can run this command. Brawny includes a GUI for viewing test coverage data and analyzing the compile bytecode of your contract. To open the GUI, run this command and if you want to interact with a spot contract from a Python code, you can use Webster Py, the Python equivalent of Webster Js. So that's it for this quick intro of Webstery development using Python. Hey, I'm curious, do you prefer the classical tech stack for Webstery with solidity and JavaScript, or do you prefer the Python stack with Viper and Brownie? Let me know in the comments down below. Bye.
