00:00:00.250 - 00:00:36.566, Speaker A: Hey, this is Julian and you are on idoblogs. In this video I'm going to show you how you can use react hooks and context in your decentralized application. So react hooks and contexts were introduced in a recent version of React and with them you can really simplify the code in your react application. However, most of the tutorial to build Ethereum dapps are with old version version of React. So it's really important that you start using the new version of React. And I'm going to show you this in this tutorial. All right, so without any much further ado, let's get started.
00:00:36.566 - 00:01:21.634, Speaker A: So I'm going to go to my terminal and I'm going to start a Dap project with React. And to do this quickly I'm going to use the truffle unbox command and I'm going to choose the react box. So if you don't know what is truffle, check out my other tutorial on truffle link in the description. And if you don't know what is a truffle box, then check out the second video of this series. All right, so let's use the truffle box of react. So truffle unbox react and it's going to set up the project for my smart contract and also the front end with react and the two will already be integrated. All right, so everything has been installed.
00:01:21.634 - 00:01:51.834, Speaker A: So I can see my folder layout here. And inside the contracts folder there is already a smart contract that we can use simple storage. So that's a very simple smart contract with an integer variable. So we can change the value of this variable and we can get the value of these variables. Super simple. And all the front end is inside the client directory. So actually I'm going to create several terminals.
00:01:51.834 - 00:02:17.538, Speaker A: I'm going to use Tmax, but you don't have to, you can use whatever you want. Right. And in one of my terminal I'm going to go to the front end. Okay. And here we're going to have a look at package Json. So here I can see that for the version of React, it's above 16.8 so that's fine because react hooks were introduced in react 16.8.
00:02:17.538 - 00:02:58.462, Speaker A: So let's install everything with NPM install. So NPM install. Oops, the n is clip on my screen. All right, so I'm going to open app js inside the SRC directory. So the app component is our main component. So that's where we connect to the blockchain with web3 and it's where we build a webster contract instance so that we can interact with our simple storage spot contract. So I've already explained how this works in the previous video of this series, so go watch it if you're not sure how this all fits together.
00:02:58.462 - 00:03:42.180, Speaker A: But the point of this video is to use hooks instead of the old API of react. So we're going to do this. So here we have a class based component and I want to use hooks instead. So the first step is to define a function because there is no class with a new react API and we need to define our state. So here in our app component we have a state with different things. So storage value, that's the value of a variable inside our smart contract, a web3 instance, the list of all the accounts we have, and a web3 contract instance. So we're going to use the use state function of react to create our state.
00:03:42.180 - 00:04:24.466, Speaker A: So here let's remove components. We don't need it, but we're going to import use state from react. So for each element of our state we're going to define two variable. So the first one is the value of our state and the second one is a function to change the value of our state storage value. And this is given by use state. And the initial value, we pass it like this, undefined. All right, actually let's make this full screen.
00:04:24.466 - 00:05:05.560, Speaker A: Okay, it's more clear. So I'm going to do the same with webster accounts and contract. All right, all our state is defined. So now we need to implement the component didman function that we have in our old component. So with react hooks you don't have component man anymore, but you have a special hook that is called use effect that can give you a similar functionality. So first we're going to import it use effect from react and then we're going to use it. So you call use effect, you give it a callback.
00:05:05.560 - 00:05:50.660, Speaker A: So in the callback we're going to copy paste what we have in component. In mount, use effect takes a second argument. So that's an array of a variable to watch. So for example, if I want to execute what is inside use effect every time that account changes, then I put accounts here and you can add other variable as well if you want to watch other variable. But if we want to accomplish the same functionality as component did mount, which is we want to execute the code just once when the component first mount. Then in this case you pass an empty array to use effect here and you can have several use effect in your component. So with different things in your array here.
00:05:50.660 - 00:06:27.696, Speaker A: So this 1 may be that you actually want to watch accounts, et cetera, et cetera. All right, so we're going to copy paste the code of component demand. But we have a problem because in our code here we use async await. So that would force us to have an async callback like this. But if you do this react, hooks is going to complain. You can do this with hook, you can have an async callback. However, what you can do is define an async function inside and you can execute this function.
00:06:27.696 - 00:07:13.170, Speaker A: So let's do this. So we're going to define a function and then we're going to call this init function right away. Okay, so let's copy paste the code of component mount. All right, so we're going to get webstery, get all the accounts, then build our contract instance. However, here instead of set state, we're not going to do like this because there is no set state with react hook. So instead we're going to use the function that we defined before to update the state. So for example, we have set web3, web3.
00:07:13.170 - 00:07:52.024, Speaker A: Then we do the same for the other one. So set accounts, set contract. All right, if you don't remember where we define this function, just right here when we define our state, every time we define the value and a function to modify this value and this is provided by this function user state. Okay, and there is a last thing that we need to do. This is the initialization code. So in this run example. So how can we do this with hook? We want to wait that all our state is populated.
00:07:52.024 - 00:08:52.130, Speaker A: So how to do this? Well, actually we can use another use effect hook and we can tell it to watch for all the variables that we need inside. So we're going to watch web3, accounts and contract. And if we have these three variables, type of web3 is not undefined. Same thing for all the other variable. Basically then we're going to execute a function. Then we define our function above it. Okay, let's scroll down to see what we have in this run example function.
00:08:52.130 - 00:09:22.824, Speaker A: So let's copy paste this. All right, so we're going to change a few things. So accounts and contract. We don't have to take this from this state that just exists as normal variable. So yeah, we can directly call contract methods and call the set function and access the accounts variable here. This is fine too. And for the set state, however, we're going to do it like this.
00:09:22.824 - 00:09:57.632, Speaker A: So set storage value and we pass the response. So again, set storage value was defined when we define our state above. Let's just have a quick look to remind ourselves how we did it here. Storage value. Set storage value that was given by use state. All right, so let's scroll down. So this part is done so we can get rid of the state here in the app component component.
00:09:57.632 - 00:10:24.590, Speaker A: Also this is done. Run example. And the last part is to render the HTML. But first we check if web3 is loaded. If that is not the case, then we show a loading message. We're going to do the same thing. So if type of web3 is undefined, then we're going to return this.
00:10:24.590 - 00:10:49.430, Speaker A: Otherwise we're going to return what we have here. All right, so let's see if everything is fine. So all this static HTML, this is fine. But here the store value is this storage value. So this is not going to work. So we remove this state. Storage value.
00:10:49.430 - 00:11:14.156, Speaker A: All right. Yeah. And now we should be good. So let me save this and we're going to deploy our spot contract and run the front end and check out what we see. So truffle develop, it's going to start local development blockchain. All right, so now let's deploy our smart contract. Cool.
00:11:14.156 - 00:11:44.260, Speaker A: Now let's deploy the front end. So I go inside the client directory and I run NPM start. All right, so we have an error in the Javascript file. So let's fix this. Okay. Yeah, and actually I realized there is an other error. So here we need to call this variable contract because that's what we save here for our contract instance.
00:11:44.260 - 00:12:20.540, Speaker A: And we also need to modify something in SRC get web3 because what truffle react box give us is a connection to ganache which is running at 85 45. But when you run truffle develop, it's actually 95 45. So let me fix this. And when you load the front end, you should see this. Yeah, it's working. Okay, so now you know the basic of using react hooks in your decentralized application. But there is still something else that I like to show you and that is react context.
00:12:20.540 - 00:13:09.840, Speaker A: So let's understand the problem that it solved. So let's say that you have a hierarchy of deeply nested components and you want to pass some data to one of the child component. That means that you need to pass this data as a prop to all the intermediary components and that can be a little bit cumbersome. So with react context you have a sort of a global object in which you can put whatever things you need to share across different component and you can access this context from any component in your application. You don't need to pass any props. So how this work? So for that, let's come back to our code. I'm going to make it bigger and inside the SRC directory I'm going to create a new file called blockchain context js.
00:13:09.840 - 00:13:48.540, Speaker A: Then I'm going to define my context inside. So I import react and I'm going to export a context like this. So export default react, create context and I can give it an initial value. So I want undefined when we start. Okay. And then in my parent component, so the one at the top of your hierarchy I want to import this context. So import blockchain context from blockchain context.
00:13:48.540 - 00:14:17.908, Speaker A: And I'm going to wrap all my HTML element by a provider of these contexts. So I can do it like this. So blockchain context provider. So this provider thing is provided by react. I don't need to do anything. The only thing I need to do is to pass it a value. And so that's the moment when you're going to put stuff inside your context.
00:14:17.908 - 00:14:54.304, Speaker A: So probably that you want to put web3 and then the accounts and then the contract. All right, so let me indent everything here and let me close this component. Blockchaincontext provider. All right. And now let's say that I have a child component here. So child component. And inside this child component I want to use this blockchain context.
00:14:54.304 - 00:15:52.020, Speaker A: So how do I do it? Well, let me define this child component. So child component js and I'm going to import react as usual, export default child component. So that's going to be a function. So first you want to import your context in the child component that use it. Then you're going to import a hook from react that is called use context. And then inside your component here you're going to import the context like this. So you use use context hook of react and you pass it your context, blockchain context.
00:15:52.020 - 00:16:36.668, Speaker A: And now inside this blockchain context then you can access everything that you put inside the context. So you can extract webstery contract and accounts from this. So that's super convenient and super easy. And you can define as many contexts as you want. By the way, if you want to become a blockchain developer and learn how you can get your first blockchain job, I've prepared a free training with all the secrets of how I did it myself. So go to this address to register for this free training. All right, we cover pretty much everything on the topic of how to build an Ethereum decentralized application with react, hooks and context.
00:16:36.668 - 00:16:51.750, Speaker A: If you have any question, you can ask them in the comments down below. In the next video, I'm going to show you how you can use react, hooks and context with drizzle, which is a frontend framework to easily build decentralized application. Thanks for watching and see you for the next video.
