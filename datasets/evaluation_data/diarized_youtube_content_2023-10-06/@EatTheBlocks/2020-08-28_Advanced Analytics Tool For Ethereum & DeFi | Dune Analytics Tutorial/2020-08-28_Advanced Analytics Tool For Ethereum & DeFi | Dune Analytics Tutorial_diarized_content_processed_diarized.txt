00:00:00.250 - 00:00:48.038, Speaker A: If you pilot a plane and you don't open your eyes, what's gonna happen? You're gonna crash? Well, if you build a blockchain project, that's the same thing. You need to understand what's going on on the blockchain. Junior analytics is a tool to do some advanced analysis on ethereum. You can run some query on Ethereum smart contracts and display the result in a nice graph and dashboard. You can answer questions like how many daily active users this DAP has, or what's the trading volume of such and such exchange, etc. So in this video, I will teach you how to use Dune analytics. I will explain how the data is organized, how you can run queries using SQL statements, and how you can display everything in nicechart and dashboard.
00:00:48.038 - 00:01:34.854, Speaker A: Even if you're not a programmer, you can still follow because everything we're going to do is very visual. The only programming part is SQL statements, but these are usually very short and you can use the SQL queries of other people as a starting point. If you don't know me, I'm Julian and on my channel, etherblocks, I teach blockchain development and how to find your first blockchain job. And before we continue, quick mention to my new upcoming course on advanced solidity. If you want to be notified when it comes out, make sure to register with the link down below. So before we can start to do some queries on dune analytics, first we need to understand how it works. So on the right you have the Ethereum blockchain with the different smart contract.
00:01:34.854 - 00:02:18.610, Speaker A: And on the left we have the infrastructure of doing analytics. So the first step is to save the state of Ethereum in an internal database of doing analytics. So this process of saving data in a database cannot be done just once because the blockchain continually add new data. So every couple of minutes, Dune analytics re index its internal database with the latest data of the blockchain. So once we have data in our database, we can run queries against it. So since Dunenetics uses PostgreSQL, we can use the SQL language in order to queries this database. So here you notice that we don't run the query against the Ethereum blockchain directly, but against our internal database.
00:02:18.610 - 00:02:55.438, Speaker A: So that means the data we work with has always a couple of minutes of delay. But since we are just doing some analysis, that's okay. So once you run these queries, you're going to get the query results. So that's going to be a result that is very raw, that's going to be a table of data. And in order to make this a little bit more appealing, we can use some visualization. So for example, we can turn our table into a chart or other form of visualization. And after we can take it one step further by combining different charts and make a full dashboard.
00:02:55.438 - 00:03:37.014, Speaker A: So in the rest of this video I'm going to show you how we can do all the step. And in next section we're going to start by the SQL queries. So in this section I'll show you how you can create a SQL query in doing analytics. So the first step is to create a free account on the website of doing analytics. So after you'll have access to your dashboard and you're going to go to create query. And the first step before you write a query is to decide what is the question that you want to ask. So for our first example, we want to know what are the ten biggest transfer of die tokens.
00:03:37.014 - 00:03:41.218, Speaker A: The next step is to figure out in which table you're going to find the info that you need.
00:03:41.304 - 00:04:23.386, Speaker B: So in postgresql database, that's the kind of database that is used by gene analytics. In that kind of database, the data is organized in what we call tables. And before we write our SQL query, we can actually analyze a different table. So first we have to type the name of the project. So for the Dai token, the name of the project is maker. But this is actually tricky because there are two namespace in doing analytics. And the namespace we want is Makermcd, not just maker because that's the second version of the DaI token and then die.
00:04:23.386 - 00:04:57.594, Speaker B: So that's the name of the smart contract. And after you'll find two kind of info. So first you'll find call. So here the name you see this Allowance approved balance of this is the name of function of the Dai token spot contract. Also keep in mind that in solidity, the programming language of spot contract on Ethereum, when you declare a public variable, it automatically creates a public function of the same name. So for all the public variable you also see them here. And we also have event.
00:04:57.594 - 00:05:25.310, Speaker B: So for event the syntax is slightly different. Name of the spot contract, underscore and EVT. Then underscore and name of the event exactly as in the spot contract. The event we're interested in is transfer. So we can click on transfer. It's going to expand this and we can see all the fields, everything you see here, it belongs to a single table. So we're going to start to write our query.
00:05:25.310 - 00:05:59.050, Speaker B: So first we start by select. Then we want to select all the field in this table. So everything here. So we put a star, then we use the keyword from and we specify which table we want to take the data from. So here, if you click here, it's going to automatically complete this. So makermcd transfer. And this is wrapped in double quotes because postgresql otherwise doesn't deal well with names where you have uppercase and lowercase.
00:05:59.050 - 00:06:15.666, Speaker B: And after we want to have only the ten largest. So we're going to use a SQL close called order by. So the amount in this table, this is called WAd. So here it's not really obvious that WAd means the amount of token transfer.
00:06:15.768 - 00:06:17.138, Speaker A: So I had to do some research.
00:06:17.224 - 00:06:47.358, Speaker B: Before writing this query. So this is quite usual. Usually you have to do some research, go on GitHub and read the code of smart contract that you want to query in order to understand what's going on. So here we're going to order by Wad and the order is descending. So I want the largest before and I want to limit the result by ten. After that I click on execute. All right, so let me pull this up a little bit.
00:06:47.358 - 00:07:18.554, Speaker B: And here we can see the table of the row result with the different fields. The source address, destination address here, the amount to the contract address. So that's the address of die. If it keeps scrolling here, we can also see the time of the transfer and also the number of the block. So that's a good first step. And next I will show you how you can select only the column that you want. So instead of using the star here, you can specify the name of the column you want.
00:07:18.554 - 00:07:27.306, Speaker B: So Src wanted destination address. Yes. What? Yes, contract address.
00:07:27.408 - 00:07:28.794, Speaker A: No, we don't care about this.
00:07:28.832 - 00:07:59.400, Speaker B: There's one we don't care. And event block time. Yes, EVT block time. All right, so let's execute this. Okay, so now we start to have something a little bit more tidy. So next I want to format this a little bit because here we have like ten power 25, but the unit of this is way. So we need to divide this by ten power 18 to have the actual number of die token transfer.
00:07:59.400 - 00:08:54.002, Speaker B: So for that we are going to divide this by ten power 18 and we're going to rename this as amount. Okay, so nice, a little bit more human readable. So next, I don't want transfer where the destination address or source address is zero because it means that this is a minting or a burn operation. But I want to exclude this from my request. So here I'm going to add a where close so where source is different from this address. And I have to prefix the address by backslash x plus the address. So that's the format of doing analytics.
00:08:54.002 - 00:09:34.020, Speaker B: And we wrap this with a single quote. Okay, and I'm going to add another close for the destination address. TST. All right, so execute. Okay, so now we see that we filter out the minting and the burning event. So next we are going to restrict our query to the latest seven days. So for that we're going to add a condition in the where close and we're going to use event block time.
00:09:34.020 - 00:09:56.860, Speaker B: And this needs to be superior to now minus seven day interval. Seven days. Execute this. Oops, there is an error here. There is no parentheses. Let's remove this. All right, let's try again.
00:09:56.860 - 00:10:21.774, Speaker B: Okay, cool. It works here. We can see that everything here is in August. So this is during the last week. Next I want to format the date field to just give the day. So for that I'm going to use a SQL function called date underscore trunk first field. We indicate what we want to extract.
00:10:21.774 - 00:10:40.318, Speaker B: So we want the day. And actually let's put this at the beginning because I think this is more readable this way. Okay, let's execute this. So here you can see that for each day the time is the same. So it was normalized.
00:10:40.434 - 00:11:01.658, Speaker A: So oftentimes we want to show prices in us dollars. So in this case we showed the transfer for the die token. So one die almost equal one dollars. So it doesn't matter too much. But with other token it does matter. So there is another table that is very convenient. That's not a smart contract.
00:11:01.658 - 00:11:34.314, Speaker A: That's a table with the prices of many crypto assets. So these prices come from the coincap API. So this is outside the Ethereum blockchain. So we can access this table in prices USD. So here the field we're interested in is price. And we can select the price we want by filtering the symbol or the contract address and also by joining on the minute field. So I'm going to show you how it works.
00:11:34.314 - 00:11:49.834, Speaker A: So below the select statement we going to use another statement called left join. So that basically means that we want to join our table with another table.
00:11:49.882 - 00:11:51.434, Speaker B: So with the price table.
00:11:51.562 - 00:12:36.320, Speaker A: So after we name the table we want to join. So prices USD, we give it a name. So P and after we're going to specify the field where we make the joint. So here that's going to be on the minute field, we're going to take the same minute as the die transfer. So for that we use date trunk again and this time we select the minute event block time. And just above we're going to multiply the price by the price in USD. So P price.
00:12:36.320 - 00:13:14.774, Speaker A: And we also need to filter for the correct token. So in the work close we add NP symbol equal die. So so far I show you two sources of data. So one are table that are index smart contract on the blockchain, and the other one is the prices table that is created by dune analytics. So next I want to show you another source of data. So we call this abstraction or view tables. These tables are pre built queries that you can use to simplify your own queries.
00:13:14.774 - 00:13:54.226, Speaker A: You'll find all this abstraction available in the GitHub repo of Dune analytics, in dune analytics abstraction. And you go in the schema folder and you can inspect all of them. So for example, let's go to Uniswap. We can go to view if purchase. And here you can see the different field and the actual source of data. By the way, since this repository is open source, anybody can contribute and add their own abstraction. You just have to do a pull request for this repo.
00:13:54.226 - 00:14:43.350, Speaker A: So we're going to use this view in order to build a query that shows the daily volume of uniswap in us dollar. So back to our dashboard, I'm going to remove everything and let's restart our query. So first we going to build a sub query. So I'm going to show you what it is. So we're going to select block time USD value of ETh. That's basically the USD value that is traded. And after it's going to be from Uniswap view ETh purchase.
00:14:43.350 - 00:15:10.218, Speaker A: How comes this is this name? Because here this is the name of the view. In the GitHub repo Uniswap view is purchase. So here, this is for the ether purchase. But we also have to take into consideration the token purchase. So that's in another view. So let's copy this. And this is another view called View Token purchase.
00:15:10.218 - 00:16:17.334, Speaker A: So again you go to the GitHub repo of Dunanitex and here you can see this other view. And in order to combine these two requests, we can use a SQL statement called Union all. So basically with this first request here, we're going to get a couple of line of result. With the second request we're going to get another bunch of line and we're going to combine these two result. And actually this is going to be what we call a sub request. So we name it and we are going to extract some field from this request, this sub request. So first we for the date we're going to extract the day and since we want the volume for the whole day, we're going to use an aggregation function.
00:16:17.334 - 00:17:05.846, Speaker A: So we're going to sum all the USD value that was traded. So here, this is the same name as we have selected here. And so we're going to select the last seven days. So for that block time here in a where statement, this is going to be superior to now minus interval seven days. And when you use a naggregator like a sum, you also need to use group by so that postgresql know how to do this sum. And so we're going to group by day. And so here, since this is the first field we select, then we can do group by one.
00:17:05.846 - 00:17:32.080, Speaker A: And we also want to order the day order by one. Oops, I forgot a comma here. Okay, so we have our result. So let's see this. So now you know how to do some advanced requests with doing analytics. So there's still a couple of stuff I want to show you with queries. So let's quickly go back to the GitHub repo with all the view.
00:17:32.080 - 00:18:00.642, Speaker A: So there is one view that is very useful that yes, 20 tokens. So for a contract address you can know what is the symbol and how many decimals. So for most, yes, 20 token, this is 18. But for some of them this is different. For example USDC, this is just six. So this can be useful to query this table if you want to do some formatting. Another thing I wanted to tell you is that genetics doesn't index all the smart contract of Ethereum.
00:18:00.642 - 00:18:36.142, Speaker A: So if you want to query smart contract that is not yet in a database, you can use this tool to submit a new smart contract. And another thing that is useful to know is that there is a table that is called Ethereum. Well, there are actually several. So you have a table for blocks, for contracts, logs, transactions. So basically everything that happened on the Ethereum blockchain, you can find them in these tables. So these tables are much more low level, it's more difficult to use them, but they are comprehensive. So that's it for the queries on doing analytics.
00:18:36.142 - 00:19:09.658, Speaker A: In the next section I'll show you how you can turn your query result into nice graph and dashboard. Okay, so we going to turn our table here into a nice graph. So for this we click on new visualization. So here you can choose your visualization type. So we're gonna pick a basic chart. We're gonna call this uniswap trading volume. So here there are different chart type.
00:19:09.658 - 00:19:35.010, Speaker A: We're going to choose a bar chart. So for the X column that's going to be the date, and for the Y column that's going to be the sum. And boom. Beautiful. So just to be clear, this is uniswap V one. So that's why here you don't have any trading. And here for the same query you can actually add other visualization if you want.
00:19:35.010 - 00:20:28.082, Speaker A: Another cool thing you can do is embed this visualization on your own websites. For this you click on embed, generate embed URL and all you have to do is to copy paste the iframe code into your HTML. And that's it. Next I'm going to show you how you can create a dashboard with different visualizations. So first we need to save our query. So we're going to call this uniswap V one and we save it and then we're going to create a dashboard and then we're going to add a widget and we choose Uniswap V one. And for the visualization we choose the chart, Uniswap V one, add to dashboard and boom.
00:20:28.082 - 00:21:32.170, Speaker A: How easy is this? So now if you want to add some other element to your dashboard, what you can do is add visualization to your queries or create new queries. You can also add text box. You can say this is the volume of Uniswap V one, add to dashboard and you can also drag and drop these boxes. And this is super easy to create your custom dashboard for blockchain or defi. I really love dynaiteics, so let's recap the whole process. Step one, find an interesting question like what's the trading volume of such an asset exchange where this token is the most traded, et cetera? Step two, answer this question by creating a SQL query. If you have some question about the SQL language, you can check the documentation of PostgreSQL and also make sure to use the view tables created by the community because this can save you a lot of time.
00:21:32.170 - 00:22:08.162, Speaker A: And step three, create visualizations and dashboard and share them with a lot of people. And after that you can even create a blog post to share some insight that you find thanks to your analysis. Another super cool feature of Dune analytics that I haven't mentioned is the community aspect. So with Dune analytics you can explore the queries and the dashboard created by other people. And this can be a great source of inspiration. There is one thing to master. If you want to query the blockchain effectively, you need to understand the architecture of the smart control for the project that you're going to analyze.
00:22:08.162 - 00:22:19.940, Speaker A: And for that you can check out my series on DeFi programming where I cover the smart contract of the main DeFi project, like maker, compound, uniswap, etc. I'll see you there.
