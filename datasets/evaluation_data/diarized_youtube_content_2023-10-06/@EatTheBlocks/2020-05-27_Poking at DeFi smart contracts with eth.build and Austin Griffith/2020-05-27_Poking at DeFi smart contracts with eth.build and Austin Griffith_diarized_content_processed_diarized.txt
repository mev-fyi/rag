00:00:00.410 - 00:00:26.870, Speaker A: Today I receive a special guest. Some of you might already know who he is. He is famous in the Ethereum community for having created a lot of developer tools like the burner wallet. I'm always curious to know what is his next invention, and I'm super happy because I can finally ask him all the questions I want. So without further ado, let me introduce hosting Griffith. Welcome, Austin.
00:00:27.370 - 00:00:35.302, Speaker B: What's up? Thanks for having me. This is awesome. I've seen a few of your videos, so it's cool. We kind of probably cross inspire each other with our different videos.
00:00:35.436 - 00:00:41.834, Speaker A: Yeah, absolutely. I reached out to you on Twitter and I figured out you actually already knew my channel.
00:00:41.872 - 00:00:43.580, Speaker B: I was like, well, of course.
00:00:44.830 - 00:00:49.862, Speaker A: So Austin, how long have you been in blockchain and how you got into Ethereum?
00:00:50.006 - 00:01:16.174, Speaker B: So let's see, probably two years now. About. I started by building games and silly things, trying to just figure out where kind of I could do something that no one else could do. And I created this ship game called Galleyas. It's galleyass IO, and you kind of sail around and catch fish and you commit reveal and it's like this hand painted world. But the onboarding was really bad. No one could use it because they had to have eat and they had to have metamask.
00:01:16.174 - 00:01:39.370, Speaker B: And so that taught me that we needed better onboarding and user experience. And I kind of focused on that for a while and learned about meta transactions and learned how we could have burner wallets. And we can kind of just create an address for someone on page load. They can sign a message and then we can pay for the gas for them. Okay.
00:01:39.440 - 00:01:49.200, Speaker A: Wow. So that was like your first experiment with Ethereum? I guess early when Ethereum was still a bit rough on the.
00:01:50.690 - 00:02:38.730, Speaker B: Yeah, I mean, I'm kind of a late comer to it in terms of I didn't get there as early as most people. I was like doing DevOps and working with Docker and I was kind of down the Docker rabbit hole when Ethereum came out, so I missed it. But yeah, it was kind of like building games, then building tools to focus on ux, and now it's more like building tools for developers to build more things. Like basically focused on prototyping eth. Build and scaffold eth. Are both these sort of prototyping either educational or prototyping like learning how to build a DaP. What I want is for you or anyone to be able to just clone a repo for a weekend hackathon and be able to just quickly build a product build something on Ethereum.
00:02:38.890 - 00:02:44.130, Speaker A: Yeah, and I think you've been pretty prolific because you build many different developer tools.
00:02:45.030 - 00:03:19.606, Speaker B: Yeah, it's kind of like that. My mentality is just to smash out a bunch of prototypes and see what sticks. A couple of prototypes have been gotten, a little usage, and a burner wallet is a good example. Then kind of someone from the community, David Myhal, rebuilds it, cleans up the code. A lot of my code is pretty messy because I'm just quickly trying to stick things together. And then once something is proven like the burner wallet was, then someone rebuilds it and makes it more extensible and easier for everyone else to take that code and extend.
00:03:19.718 - 00:03:24.206, Speaker A: So for those who don't know, what is the burner wallet? In a nutshell, what it is.
00:03:24.388 - 00:04:13.834, Speaker B: Okay, so the burner wallet is, think of it like a web wallet, where your private key that normally would be stored in metamask or hardware wallet is actually right in the local storage of your browser, and it's used to sign transactions and sometimes metatransactions. But then we take that experience and we run it on a side chain. So the sidechain is XDI, so you have quick, cheap block times. It bridges to Ethereum, so you can withdraw and deposit into it. And then it's just like very fast transactions. So I can send money around very cheaply, very quickly on the side chain and then bridge it back to Mainnet, Ethereum. But the point is, anybody can just like, I don't have a paper wallet laying around, but you can scan a paper wallet, you can receive a link.
00:04:13.834 - 00:04:48.934, Speaker B: The onboarding is basically instantaneous. You just go to a website and you have money, and then you can click send and scan someone else's Qr code and send them money. So it's about that experience, it's about that ease of use. It's about being able to just instantly onboard someone into something and let them use it first. Then once they get it and they understand that, okay, there are some security trade offs here. This is a network of validators. If I move over to Ethereum, move over to Dai, then I can get a stable coin that's also protected by proof of work or some more extravagant consensus mechanism.
00:04:49.062 - 00:05:15.700, Speaker A: Yeah, I remember when this came out. I think it was really popular at meetups when people were trying different blockchain stuff. Then people were using this to send to each other some crypto. And yeah, it was pretty cool. That was a project that got a lot of traction. And today you are here to talk about another project, which is called e build.
00:05:17.030 - 00:05:23.058, Speaker B: Yeah, word. Yeah. So eth build is. I could probably just share my screen for a little bit. Do you want me to do that?
00:05:23.144 - 00:05:24.350, Speaker A: Yeah, you're allowed.
00:05:24.430 - 00:05:47.722, Speaker B: Okay, cool. Yeah, so eth build, here it is. It's sort of like this. It's kind of like a visual playground. I can grab this, I can pull this in here. I can type some code. And then we could compile that contract by putting it in here and giving it a name.
00:05:47.722 - 00:05:50.140, Speaker B: Let's see. Can I click this? Yeah. There we go.
00:05:50.990 - 00:05:56.246, Speaker A: So it looks like, sort of like visual builder for developing smart contracts.
00:05:56.438 - 00:06:29.306, Speaker B: Yeah. It's not just for developing smart contracts, but kind of just like prototyping all of web three stuff there. We got it to compile. And what happens is when we compile it, we get an ABI out of it. So I could maybe make a un count, right? Equals 42. If I compile that, then, yeah, I get the ABI and the bytecode. And technically, we could bring in a transaction and push that bytecode into the data field.
00:06:29.306 - 00:07:02.802, Speaker B: And that would deploy this as a contract to whatever chain we are hooked up to. So it's a very visual programming language where you can kind of learn web three concepts, basically, hash functions, key pairs, encryption, blockchain transactions, distributed ledger, and how the consensus mechanism works there or doesn't work. And then kind of proof of work. And the byzantine generals onto smart contracts and gas and meta transactions and all sorts of stuff.
00:07:02.936 - 00:07:17.800, Speaker A: So it seems like it works in real time. Like, you change one part and then if there is an action, then you will see the result right away. So it's a little bit like if you define a set of functions with input and output, and it just work.
00:07:18.250 - 00:07:33.078, Speaker B: Yes, absolutely. If we bring in a hash function, it has like an input and an output. And what's happening is this code right here is on every render. So it's using light graph. Let me see. I can point to it. Light graph.
00:07:33.078 - 00:07:58.918, Speaker B: A library that does over the top of it and then plug in a bunch of web three components to it. But basically what it's doing is that every time it's rendering, it's taking whatever is over here. You can see it changing over here. Right, and rendering it on the other side. It's easier if we even looked at this as a blocky or something. So we can see, like, each time I type, we see that change on that side. Right.
00:07:58.918 - 00:08:43.214, Speaker B: But what's cool is you could say this is, let's say the hash of Alice is a 64 character. We could just plug it in here. And now we can use that as a private key, right? And once we have that as a private key, then we can see the address is derived from that, right? So it could be, instead of Alice, we could say that's Bob, right? And we can show that it's deterministic by. I can type Alice back in and we get the same picture. I can type Bob back in and we get the same picture. What's cool now is now we have these two accounts that could sort of send value back and forth, right? We have Alice here and we have Bob here. And we could bring in like a distributed ledger, right? And then we could have objects for transactions.
00:08:43.214 - 00:09:07.450, Speaker B: We could say two from Alice, right? And then we could plug that into our ledger and send that along. And what's neat there is then now we can go look at the value zero. What did I do there? I think there's a bug here with decimals. Yeah, let's just set that to zero. There we go. So now we have ten. So now we could say we could go get a balance function, right? And we can plug.
00:09:07.450 - 00:09:41.830, Speaker B: Watch this. We'll plug Alice into the. Oh, no, we got to plug Alice's address in to the balance function. And now we can call that and it's going to hopefully go find that her balance is not working. I wonder what I did wrong there. But the thing I learned here is you have this function that comes off of this box and you're calling this function every time this is run. And that's what, like if we bring in a blockchain, if you wanted to get the block number from a specific chain.
00:09:41.830 - 00:10:17.474, Speaker B: We don't want to go from Guay, there's mainnet, right? And so every few seconds, we'll see this timer trigger, this button that goes out to mainnet and gets the block number, right? So we kind of have this block, and then we have this node, and then we have another node that comes off of it. That's actually a function. It was an interesting paradigm to get to when I started building the tool, because I had no idea how this was going to work. But then it totally makes sense. It's like, oh, a function comes off of this and you plug arguments into the function and then can call it. Or if it's a contract. Let's see.
00:10:17.474 - 00:10:26.440, Speaker B: Can we do this? Let's take our Abi. Do we still have our Abi? No, we don't. Okay. If we had an Abi, we could drop it in.
00:10:26.810 - 00:11:11.154, Speaker A: Awesome. So thank you for this demo. Now, our task is to invest in the CDI contract of compound. For those of you who don't know what is compound? Compound is a very famous D five protocol where you can lend and borrow 20 tokens. And so what we're going to do is provide some liquidity to compound by investing some Dai. So we're going to get some interest thanks to that. So we're not going to do this on main net because we don't want to spend our money, but we're going to do this on the covan test net.
00:11:11.154 - 00:11:48.000, Speaker A: So on Covan, you have the contract of Dai, which is deployed and also CDI. So we all set. So for that we will need to first get some covenant ether, and then with the covan ether we're going to get some die by using the oasis interface of maker Dao. And once we have the dAi, then we can finally invest the dai in the CDI contract. And we're going to do all of this with each build.
00:11:50.610 - 00:12:18.258, Speaker B: It'll be a lot to put together. Let's just kind of poke at it and see how far we get. I don't know if we'll get that far. Each build is more like poking at things rather than building a full. But let's just see. Let's see how far we get. Basically, you said we want to get on Covan, and if we back up just a little bit, we probably want to generate some kind of account, is that right? So if I just pull up some button, I can kind of just generate private keys.
00:12:18.258 - 00:12:41.246, Speaker B: So let's just hide the private key so no one can see it for a little bit. I bet we'll expose it at some point, but let's pick out a cool blocky. Okay, that blue guy. All right, blue guy is going to be our guy. So what we need now is to send this address, some coven eth. I'll send it to you there. But also we probably.
00:12:41.246 - 00:13:02.178, Speaker B: Let's plug in coven as our blockchain. And then let's get the block number so we know that we're talking to Coven. Okay, there we go. So coven is on block, what? 18 million. 18,743,000. Okay. And we also want to know the balance of this account that we just created.
00:13:02.178 - 00:13:15.914, Speaker B: So we'll plug its address in here and we'll just have that. Always asking. And it's zero. So we need to get some coven eth to this dude. How does the coven test net work or the faucet work?
00:13:16.032 - 00:13:29.674, Speaker A: So we just need to go to the faucet so you can Google Covan faucet and it's probably the first link. And we input our address and it's going to send us some ether.
00:13:29.802 - 00:13:45.266, Speaker B: Okay. It's asking me to log in with my GitHub address. And now it's asking me for the coven address. And I'm pasting in and I'm sending it and it says it's on the way. Okay. And here is the ether scan transaction. Okay, look at that.
00:13:45.266 - 00:13:47.106, Speaker B: We already have it. Look at. We have a balance.
00:13:47.218 - 00:13:47.734, Speaker A: Amazing.
00:13:47.852 - 00:13:57.678, Speaker B: There we go. There we go. Okay, so we have what? One coven eth. Okay, so now you said you want to swap the Eth into Dai.
00:13:57.794 - 00:14:06.186, Speaker A: Yeah. So we're going to open a vault on the maker Dio. So we send our eth to make.
00:14:06.288 - 00:14:14.694, Speaker B: Open a vault, not even swap it on uniswap. You want to basically collateralize the ETH and get die back, is that right?
00:14:14.832 - 00:14:15.326, Speaker A: Yeah.
00:14:15.428 - 00:14:21.120, Speaker B: Oh, wow. Okay, so what's that contract look like on Covid? How do we get to.
00:14:21.810 - 00:14:51.478, Speaker A: So actually, maybe that for this part, it's easier to use the interface of maker Dao because I think the process for doing this is actually quite complex. You don't have just one function, but you have several. It's possible to use what they call. They have a proxy contract that group different operation in just one function. But I'm not super familiar with this. So maybe if we just use the interface, it's easier.
00:14:51.574 - 00:14:53.420, Speaker B: Okay, what's that?
00:14:56.270 - 00:15:10.510, Speaker A: Can you Google Oasis macro dao? Yeah, that one. And then the trick. So this is for.
00:15:10.660 - 00:15:40.358, Speaker B: Oh, yeah, but we have a private key here. What will I do? Put this private key into metamask. They're not going to let us. I mean, we could do that, but maybe we should just dive into the CDI just to show. So let's just say we could swap tokens. I don't know if you want to send this guy some coven die, that might be an easier shortcut. But let's dive in and look at the compound contract.
00:15:40.358 - 00:16:02.858, Speaker B: Right. So if I go. Let's see. I think you sent me a. Yeah, here we go. Okay, so CDI address is this right here on coven, though, right? It's not. I think maybe this is the CDI address on Mainnet.
00:16:03.034 - 00:16:04.954, Speaker A: Yeah, no, no, that's on Mainnet.
00:16:05.002 - 00:16:05.374, Speaker B: My bad.
00:16:05.412 - 00:16:07.026, Speaker A: Yeah, let's poke at it.
00:16:07.048 - 00:16:25.974, Speaker B: Let's poke at it. That's fine. Let's poke at it. Okay, so what you did is you sent me this JSON file and you can't see it yet, but let me do a file drop. Okay. And I'll drag in the JSon. Did you see how that changed there? If we look at it, it's basically everything that was in that file that you sent me.
00:16:25.974 - 00:17:01.860, Speaker B: So we see addresses and stuff, but what we want to do is parse that. So if we parse that, that'll be an object that we can look at and we can reason with it a little bit better. So let's see, you have this Dai address, which is what we were just looking at, what we just googled. But then there's also this Abi, right? So this is kind of like when you're going to interface with an Ethereum smart contract. There's these artifacts, right? And you'll have this Abi and this address. And what can we do with that? So if we bring up a contract and we plug this Abi into it. Watch this.
00:17:01.860 - 00:17:29.274, Speaker B: So then we have all of these functions that we can call on this contract and we have the address of it. And if we just bring up a blockchain and we say we just don't set anything here. And we look at that block number just like we did on Covan. But this time, I don't know why it thinks it's gwe, because it has a specific. We see that we are on block 10 million in some. Right, so that's the main net. And we'll plug that in here.
00:17:29.274 - 00:17:37.150, Speaker B: Okay, so now we have our contracts. Do you remember what the function is that you would call to lock up die to get CDI?
00:17:37.490 - 00:17:40.160, Speaker A: Yeah, so that's the mint function.
00:17:40.530 - 00:17:49.460, Speaker B: Mint, okay. Yeah. There we go. Wow. So that's basically it. You pass in the. Oh, I bet you have to approve first.
00:17:49.460 - 00:18:08.540, Speaker B: I bet you do an approve and you approve this contract to take a certain amount. And then I bet you call mint and it takes it from that. Okay. So we probably won't be able to do that unless we can send some CDI into this, into some.
00:18:10.270 - 00:18:11.420, Speaker A: Not on main.
00:18:12.190 - 00:18:30.702, Speaker B: I mean, why not on main net? It's not that much money. Let's see. Take a mnemonic, take a password. Let's see. Can I do this? This is going to be wild. Okay, so I'm going to put in a password here. You can't see it, right? Okay.
00:18:30.702 - 00:19:02.298, Speaker B: And I'm going to plug that into a mnemonic, and I'm going to plug that into a private key. And that's going to give me an address. Now, if I go look at the balance of this address, there actually is some eth in it. But we're looking at die, right? We want to know the die contract. So then if I do a balance of on the die contract plugging in this guy's address. Oh, that's not right. Something's not right there.
00:19:02.298 - 00:19:09.290, Speaker B: Let's try ERC 20. It's very much a prototype.
00:19:11.310 - 00:19:14.380, Speaker A: You have some predefined Abi in East build.
00:19:14.930 - 00:19:41.110, Speaker B: Yes, exactly. Whenever you want to extend something, you sort of grab that Abi that we were just looking at and you put it into each build, but you customize it and it gives you this nice little box that just has the functions you need. Let's try that one more time, see if we can get this guy's balance. I'm thinking he has die. Okay, so he has 14 die. Okay, now he needs to, what? Approve.
00:19:41.530 - 00:19:43.190, Speaker A: Need to approve CDI.
00:19:44.330 - 00:19:55.500, Speaker B: Approve the contract itself. Right. So I call approve. Yeah. Okay, so the spender is actually the CDI address. Right? Is this guy. Yeah.
00:19:55.500 - 00:20:19.774, Speaker B: And then the amount would be a number and we'll say $5. And you'll need to remember to probably take that two way, right? Yeah. All right. Now this is really interesting. What's going to come out of this? Right? It's a box. This was like an aha moment for me when building ETH build. What this is is actually the bytecode of the transaction.
00:20:19.774 - 00:20:41.510, Speaker B: Right. So what we need to do is bring in a wallet and we'll plug. Let's see, let's plug our blockchain in. Yes. Let's plug our private key in. Don't look, don't look, don't look. To address will be the CDI contract.
00:20:41.510 - 00:21:03.578, Speaker B: Right. We're going to approve that CDI and it won't have any value. And the data will be this stuff. Right? That hex stuff. And let's give it a gas limit of, say, what, 200,000 maybe. Oh, we're going to have to set the gas price. Let's get into this wallet.
00:21:03.578 - 00:21:16.434, Speaker B: Get out of here. Okay. We're going to have to set the gas. Oh, it already is 40.4. Look at that. It's doing gas for us by checking the network. Wow, isn't that cool? Yeah, we want fast.
00:21:16.434 - 00:21:34.300, Speaker B: Okay, so let's get back out to here. We're assuming that the wallet is going to handle the gas for us. We'll do 200,000 for our gas limit. All right, let's put in a button. We're watching for a transaction hash to happen. Are we doing this on main net? We're doing this on main net. Okay, here we go.
00:21:34.300 - 00:21:56.562, Speaker B: It did go. Okay, so we have a main net transaction out there. It is in the transaction pool. Cool. We could talk to our local node here and see what's going on. But basically, I think what we're waiting for is a receipt to come back from Mainnet. Let's grab this guy's address and go to.
00:21:56.562 - 00:22:28.170, Speaker B: I think we got it. Did it go through? Did we get. Oh, yeah, there we go. So we just made a main net transaction from an account with an eight character mnemonic on main. This is how you prototype. Okay, so now what we're assuming is the CDI contract is approved to take five of our die, right? So now we want to call the mint function and we're going to mint that same amount. Right, that five die.
00:22:28.170 - 00:22:52.914, Speaker B: And this is going to give us some bytecode. Now what we do is we take that bytecode and replace it up here. Now, do we need to send in e? Let me think here. No, we're only sending in die. So we still don't want to send any value here. We still send it to them. Basically what we're going to do is call a function on the CDI contract that tells them to come take our $5 that we approved them for.
00:22:52.914 - 00:22:56.786, Speaker B: They're going to lock up that five die and give us back some CDI.
00:22:56.898 - 00:22:57.606, Speaker A: Exactly.
00:22:57.788 - 00:23:28.080, Speaker B: Okay, so before we do that, then let's go grab our balance of CDI and prove that it's still zero. Right. Because we'll want to see it change to, let's see, balance of this guy in c die should be zero. Okay, here we go. Okay, so let's see, we have the mint function. That's the bytecode, right? So that's the function call. Oh, by the way, while we're here, let's do this.
00:23:28.080 - 00:23:51.622, Speaker B: If we take the hash of mint, right? And it's going to be mint amount, which is going to be like a un 250. This isn't going to work. No, it's just mint amount. Let's try this. It did not work. Darn it. So let's see, what is the.
00:23:51.622 - 00:24:04.682, Speaker B: Oh, it'd be. That's the format. That's the format. We got it. Check it out. So if I do that string and I do a hash of it, look how this lines up. That's the function call, right.
00:24:04.682 - 00:24:25.250, Speaker B: The first eight characters there is the same thing there. A little fun, little side quest there. Okay, so we're calling mint and we're sending it this amount, which if we take that and go from way, we're going to get one or five die. Okay, I think we're ready. I think we have the bytecode. We have the data in there. It's time to make another transaction.
00:24:25.250 - 00:24:41.080, Speaker B: Do I just hit that button? Yes. There we go. Okay, another transaction is going out. We can go to a disinterested third party ether scan and ask them what we're up to. Let's see what happens.
00:24:42.090 - 00:24:43.400, Speaker A: Exciting times.
00:24:44.170 - 00:24:53.690, Speaker B: It is. It really is. Here we go. So it looks like it went all the way through. Do we have a balance? No, we still don't have a balance. Let's see what's the status?
00:24:54.830 - 00:24:59.770, Speaker A: But now I think we need to change something to see the balance of CDI.
00:25:00.770 - 00:25:08.880, Speaker B: Oh, I thought that's what this was. Status is true. I thought that's what this guy's doing. Balance of, right?
00:25:09.570 - 00:25:13.310, Speaker A: Yeah, but now it's balance off on the contract of CDI.
00:25:13.810 - 00:25:20.846, Speaker B: Oh, that's something else. Oh, it's a different contract. I thought that's this guy right here. Isn't this guy the CDI contract?
00:25:20.958 - 00:25:28.786, Speaker A: Yeah, but I mean, because before we're checking balance off on the die contract. But now if you want to see our CDI balance, it's balance of the CDI contract.
00:25:28.978 - 00:25:43.306, Speaker B: Yeah, I did. That's what this guy is here. This is balance of die. So here's dai and balance as. And our Dai actually did not go down. So we did something wrong somewhere along the way. Let's see.
00:25:43.408 - 00:25:45.450, Speaker A: I think we just had compound.
00:25:49.550 - 00:26:15.794, Speaker B: Let's check our allowance to make sure our approve worked. Right. Isn't there an allowance function there? There we go. Maybe you need to allow someone else, I feel like. So this is exactly what we're doing is we're like poking at contracts, seeing how they work. This is what efilv is for, right? You can teach someone what a hash function is and do a lot of educational stuff. And I could switch over and draw some things here.
00:26:15.794 - 00:26:32.540, Speaker B: But eventually, for me it comes down to this moment of viscerally poking at this contract and saying, what is happening here? Why is this not working? And so if I get the allowance and I get the owner, which would be me, right, this guy.
00:26:32.990 - 00:26:39.100, Speaker A: The allowance is for delegated transfer of your CDI. So that's something else. That's after you.
00:26:39.550 - 00:26:47.870, Speaker B: We need to set an allowance in die, of course. So it's here. Right. We need this approve function. We were using the wrong approve function.
00:26:48.020 - 00:26:48.670, Speaker A: Yes.
00:26:48.820 - 00:27:08.360, Speaker B: Okay, there we go. That's totally right. Okay, so now the spender will be the die contract and the value will be this. So a different approve to a different contract. So it's funny, like right now that it actually is like the CDI contract is approved to move $5 of our CDI, right?
00:27:08.890 - 00:27:11.590, Speaker A: Yeah. That's not useful.
00:27:12.330 - 00:27:29.126, Speaker B: CDI is there value? Is there approve? Is there. All right, let's try again. Let's try again. Plug this into the data field and send a transaction. Yeah. Main net transactions with private keys and eight character mnemonics.
00:27:29.238 - 00:27:30.874, Speaker A: Is it the first time you do main net?
00:27:30.912 - 00:27:48.542, Speaker B: There we go. Okay, so now this should work, right? We should have an allowance. We could check the allowance right now, but I'm not even going to do it. I'm just going to move this into here. Now we're saying. So we called approve on the die contract to allow. Now we're going to call mint on the CDI contract.
00:27:48.542 - 00:28:02.230, Speaker B: And it's going to go to the die contract and transfer some of our five and prove that that all works. Let's see if it goes. There we go. Okay. In motion. Now here's our balance of CDI. Oh, there was a failure.
00:28:02.230 - 00:28:10.058, Speaker B: Status is false. I wonder what we did. Let's see five of that.
00:28:10.224 - 00:28:14.650, Speaker A: Can we see what's the allowance of die for the CDI contract?
00:28:14.990 - 00:28:25.866, Speaker B: That would be this right here. Right. So we want allowance. So the owner is us. Right. Our address and the spender is the die contract. Address.
00:28:25.866 - 00:28:34.850, Speaker B: CDI. CDI contract. Yes, of course. Sorry. And there we go. Yeah. So it's five e, right.
00:28:34.850 - 00:28:52.466, Speaker B: Not eth, but five times ten divided 18. So it is approved. So we know that much. Are you sure that you call mint to. Let's see. We could go look at the contract, couldn't we? Yeah. Let's see if I copy this and I go to ether scan.
00:28:52.466 - 00:29:00.140, Speaker B: I bet their contract is going to be here. So we could go look at the code and say what does mint do? Right.
00:29:01.630 - 00:29:15.898, Speaker A: I wonder if it's a prime of unit because I think at some point you do conversion five two way. But I think when we get the balance of die, this is the balance in an elementary unit of die. So it's not like, okay, I don't think it's.
00:29:15.994 - 00:29:19.182, Speaker B: Try plugging five in. Here is a five.
00:29:19.316 - 00:29:22.110, Speaker A: Let's try it without two way. Yeah.
00:29:22.260 - 00:29:32.370, Speaker B: There we go. Okay. So we're just going to call a mint with five. Interesting. I feel like you want the decimals there because then you could never do. I don't know. Let's see what happens.
00:29:32.370 - 00:29:51.990, Speaker B: Can we see us making a call on this contract? We can probably see the transactions right? Yeah. Who are we? I don't see us in that list. I bet we are, though. Oh, man. I need those errors to be clearer. We definitely are getting. It is failing.
00:29:51.990 - 00:30:16.900, Speaker B: It's still failing. Could it be running out of gas? Try 400,000. I really think it's two way here. Let's put that back in just for a second to try a little bit more gas, and then maybe I'll try to copy the message that we're getting there. All right, let's try another one. We could even just plug this hash in here, and it should tell us. Yeah.
00:30:16.900 - 00:30:42.106, Speaker B: Does that transaction look right? Let's see. There it was again. I wasn't able to copy it. Darn it. Okay, well, I think we may have hit a wall here in terms of. Oh, man, am I paying $3 per transaction right now? Lord, let's see. It reverted, but it doesn't tell us exactly why.
00:30:42.106 - 00:30:58.874, Speaker B: It only costs $0.17. That's okay. Damn. I don't know what it is. It's something with the mint, something. Yeah, we're close here, but we're very close to getting it. But this is kind of like where I go for prototyping.
00:30:58.874 - 00:31:56.900, Speaker B: And then if you want, I can move over to scaffold Eth real quick, just to show that once you've poked around at ETH build, I say to move over to Scaffold Eth. It's basically like this repo. Can you see that there? Yeah, it's like a repo in GitHub that allows you to, you just clone down this code, and there's a speed run here, but it has a blockchain powered by biddler. It has create react app powered by ethers and uniswap from Palberg created create ETH app. But basically, you do this like you clone it, you CD into it, you do an install, you start up your chain, and you deploy your can, and it starts out with smart contracts. See that there? So it starts out with smart contract, and you change a spelling error, and you deploy your contracts again, and your app will hot reload in the front end. So it's a really quick way to sort of iterate on building a product.
00:31:56.900 - 00:32:10.374, Speaker B: I could dive into it, but I think we've covered a bunch of stuff already. I don't know how long this is supposed to go for, but we got a bunch. But I think we kind of hit a roadblock here with CDI. I'm not exactly sure what's going on.
00:32:10.492 - 00:32:20.460, Speaker A: Yeah, this was absolutely fascinating when you were pulling this box and all this direction. I was pretending to understand everything. I was like, yeah.
00:32:24.030 - 00:32:25.482, Speaker B: It'S a lot of fun to play with.
00:32:25.536 - 00:32:51.140, Speaker A: Yeah, absolutely. I think what I want to do after this video is I want to go back to it and try out simple stuff, like first without the blockchain, maybe try to compute some hash and then try to play with a connector. It looks really fun. I'm so sorry, because I know I really challenged you a lot. When I reach out to you to do this video, you thought we would do something simple. And then I came out with this crazy idea.
00:32:52.070 - 00:33:15.654, Speaker B: Yeah, we hit a roadblock. I'm not sure what was going on there. I don't know why it didn't let us mint that we had the five. We had gas. Like, could I have run out of gas? What's my balance? No, because then it would say run out of gas. I'm not sure what the roadblock block was, but this is web three programming. This is how it works, right? There's a contract out there in the sky and we know kind of the Avi and we kind of poke at it and figure out how to get it to work.
00:33:15.654 - 00:33:19.998, Speaker B: And then one day, five die comes back and we know we did it. Right? Yeah.
00:33:20.044 - 00:33:31.950, Speaker A: Yeah. I think it's also the pleasure of Ethereum. Let's say, I don't know, you write a function in node js. If you execute this function successful, you're not going to jump and say, oh, I executed my function.
00:33:32.020 - 00:33:32.640, Speaker B: Right.
00:33:34.690 - 00:33:41.140, Speaker A: When you execute your transaction on main net, you call up all your body, you go drinking. I don't know, you do something special.
00:33:41.750 - 00:33:51.906, Speaker B: I still get goosebumps when I send money from a command line. It's funny how it works, but yeah, it's a powerful technology and we're just at the beginning of it and it's really exciting.
00:33:52.018 - 00:34:06.118, Speaker A: So people, if you want to have fun with you, go to the website and try to poke around and try to interact with contract on Ethereum, how people can reach out to you and basically keep up with all your different projects.
00:34:06.214 - 00:34:21.758, Speaker B: Yeah, I think at Austin Griffith is the best way to find me on Twitter austingriffithe build scaffold e at Austin Griffith, hit me in the dms. I can help you out with anything.
00:34:21.924 - 00:34:23.120, Speaker A: I'll put the link.
00:34:23.970 - 00:34:41.606, Speaker B: Yeah. If you actually just click on ETH build, it'll take you to a site that has like, learning material. It starts with hash functions and key pairs and goes through it. So just right there on the ETH build website, right. You should be able to kind of like a new person should be able to get some context for how ethereum works.
00:34:41.788 - 00:34:52.166, Speaker A: Awesome. Thank you, Austin, for showing us all this stuff. I wish you to keep producing some awesome tools for us and. Yeah, I'll talk to you soon.
00:34:52.348 - 00:34:56.180, Speaker B: Awesome. Thank you so much for having me. Thanks for having me. See you.
