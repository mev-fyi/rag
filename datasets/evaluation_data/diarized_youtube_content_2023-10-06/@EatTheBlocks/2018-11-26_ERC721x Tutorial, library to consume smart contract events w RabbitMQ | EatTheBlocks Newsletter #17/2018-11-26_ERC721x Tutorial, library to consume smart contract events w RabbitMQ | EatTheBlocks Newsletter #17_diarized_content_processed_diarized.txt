00:00:02.010 - 00:00:29.800, Speaker A: Hey, hey, and welcome to this newsletter of idoblocks. This is a weekly newsletter for Ethereum Dap developer. And if you haven't subscribed to the newsletter yet, make sure to go over to the website of idoblocks and subscribe. You put your email here and I will send you an email every week. Also, I'd like to give you the result of the vote of last week. So the winner is the walkthrough Ethio Delta smart contract. So that's the video that I'm going to make this week.
00:00:29.800 - 00:01:12.082, Speaker A: And then since you guys seems quite happy with this new voting system that we're going to do it again. So this week I'm going to update the list of choices. But this time I will put the choices in the description of the video. And to vote, like for last week, you leave a comment and you tell me what is your vote. And if you pick the winner, then I will make this video for you the next week. Okay, so this week there are quite a lot of interesting things and we'll start right away by the new tutorial that I release on the Ethereum to do list series. So this is the step nine here.
00:01:12.082 - 00:02:06.434, Speaker A: And so I've released the post like a couple of weeks ago, but this week I've just released the video on YouTube. And so in this step, we're going to finish the to do list series by toggling each task with the done and undone status. And also we're going to learn how to keep the front end in sync with the smart contract. So this is a problem that is quite common in many dapp in that you change something on a smart contract and then the UI doesn't refresh automatically and the two become out of sync and it makes the user confused. So in this tutorial I will teach you how to avoid that. And if you want to continue the series, then don't forget that the series actually doesn't end here. So the free series end here, but there are still some episode if you buy the ebook.
00:02:06.434 - 00:02:50.530, Speaker A: And in the next step we will refactor everything with react and after that we'll refactor everything with drizzle. And I should release these updated chapters next week on the ebook. Okay, then we have a tutorial on how to use Mithriel. So Mithriel is a security analysis on ethereum that is quite popular. And what you can do with Mithril is make sure that your contract is secure. So this is a command line tool. So it's quite easy to use it's quite complete.
00:02:50.530 - 00:03:47.290, Speaker A: There are a lot of features, so it can be a little bit overwhelming for beginners. So in this tutorial they show you how to make use of mistreal on a very basic level. So it's good for people who never use mistreal. For example, you can detect things like reentrancy attack or a very common kind of bug. Also bug where people can withdraw ether from the smart contract without having put anything in a smart contract, which usually signal that there is a problem. So basically you should never release any smart contract without running one of these tools like Mitzrell or others. Next, there is a tutorial of crypto zombies on the ERC 721 x tutorial.
00:03:47.290 - 00:04:38.278, Speaker A: So ERC 721, you probably know what it is. This is a non fungible token standard that is used in cryptokitties and all these collectible games and loom network. So who does a scaling solution on layer two? So they do side chain for dapps. They are big on games and recently they had a problem where on one of their side chain they had to transfer a lot of NFT of like ERC 721 NFT. And in terms of gas, they realized that if they had done it just with ERC 721, it would have cost them a lot of gas. It would have cost them way too much. So they started to work on a new standard to solve this problem.
00:04:38.278 - 00:05:25.194, Speaker A: And ERC 721 X is the result of their research. And in this crypto zone, this tutorial, they teach you how to use it. So that's really cool, especially if you are into games. They finally check this out. Then there is an article about what is the transparent proxy pattern on the Zeppelin OS blog. So you might have heard of what is the proxy pattern. So proxy pattern is a way of deploying your smart contract with a sort of intermediary smart contract that allow end user to update the actual implementation of a contract.
00:05:25.194 - 00:06:35.420, Speaker A: So that's basically the way we implement upgradability on Ethereum with the proxy pattern. And by the way, I'll probably do a tutorial soon about this because I've been asked to do it. What I want to say about the transparent proxy pattern is that the problem with the proxy pattern in general is that sometimes there can be some confusion on which function a user want to call. So example in general proxy contract they have a function which is called upgrade two. But if the contract that actually contain the logic also have the same function with the same name, then when the proxy contract receive a transaction with the user wanted to call the function update to. We don't know for sure if the user wants to execute the function on the proxy or want to execute the function on the logic contract. So this is a problem, and this article will explain you how you can avoid that.
00:06:35.420 - 00:07:12.802, Speaker A: Then there is a new framework for developing and testing smart contract called Mido, and this is a framework on. Net, so you can use a C sharp for this framework, and so you can see it as basically a sort of equivalent of truffle on. Net. So if you're a windows. Net kind of guy, they finally check this out. It's interesting to notice like the past few weeks we've seen more and more tools for. Net, which is not the primary target of Ethereum originally.
00:07:12.802 - 00:08:11.770, Speaker A: But I think one reason that can explain that is the fact that game developers start to develop more and more games on Ethereum, and especially with the development of the loom network, there is a big influx of game developer and generally game developers. They are on Windows, because most game users are also on Windows. So that explain a demand in tools in. Net, c sharp, et cetera. Then there is a new release of Truffle. So truffle 50 zero beta two. And this is interesting because in this release they've updated solidity to the latest version, so zero 50, which allows to use all sort of new cool feature of solidity.
00:08:11.770 - 00:09:00.406, Speaker A: And they've also released a new command that's called Truffle Run. And I think a lot of people have kind of ignored this, but it's actually quite a big deal because what you can do with this comment is you can develop plugins. So actually they have a tutorial on how you can do this. And I might also do a tutorial on this if people are interested. I think once we start to have plugin being developed on truffle, it will really make the whole ecosystem of truffle way more, way more valuable. So maybe that's a very important release. And then in this release there is an integration with the Viper compiler.
00:09:00.406 - 00:10:03.630, Speaker A: So Viper is this alternative programming language for smart contract. So it's quite cool because it makes truffle more universal, because so far truffle has been tied to only solidity, but now truffle will be more general. And finally they've upgraded Webstery to the latest version. And in this latest version Webster enables struct parameters. And this is also a big deal because so far, although we can represent data on smart contract with struct, we can't return a struct to outside entity like the front end of your Dap with Webster cannot just query struct, so we had to resort to all sort of tricks like splitting the struct into a tuple of different elementary solidity type, for example. And then on the front end you will rebuild this and repackage it into an object. But that's quite clunky.
00:10:03.630 - 00:10:49.710, Speaker A: So if we don't have to do this anymore, that's great. So I really look forward to this release. Okay, now next I picked an article on a new framework called Webstery React, and that's basically a front end framework for Dapps where you can use a new feature of react called hooks. So that's not a stable feature that's still in beta. So it's not even sure that it will stay in react. But if you feel adventurous then you might want to check out this framework. For example, using that component you can access an instantiated instance of web3.
00:10:49.710 - 00:11:44.910, Speaker A: You can get information about your contract and all sort of nice thing. So yeah, it's kind of a thin layer that you can use in your Dap front end. If you use react, then there is the release of Light JS. So if you remember the last newsletter I mentioned that parity was releasing a lite client for Ethereum. So lite clients are important because they will allow some devices with not a lot of processing power, such as mobile devices. They will allow these devices to actually verify their own transaction without relying on public nodes like infura. So that's very important for decentralization and DAP usability.
00:11:44.910 - 00:12:42.830, Speaker A: This week they've released a client library for those new Ethereum light clients. And so basically how it would work. So in this tutorial they explain you everything, but the gist of it is what you will have in your DAP front end you will have two things. One, you will have a lite client, so the light client of priority, and then your DAP will use lite JS. And with light JS you will communicate with your light ethereum client. And so basically light JS will sort of replace web3 and it's not very different for webstery, so it's quite easy to learn it. And in this tutorial they give you an example and say okay, before with web3 this is the code, and now with light JS, this is the equivalent.
00:12:42.830 - 00:13:10.902, Speaker A: They seem to use reactive programming a lot. So if you're familiar with a framework called RX, it's Javascript framework, you will feel at ease. But basically it's a modern way of programming. So I like it. And then there is a very cool project that is called one click DAp. So when you go to their website, it can take a while to load. So don't be surprised.
00:13:10.902 - 00:14:11.242, Speaker A: But basically the idea of one click DAp is that if you want to make a DAP, all you have to do is to create a smart contract. You don't have to create the front end, then you compile it and you take the ABI and you upload the ABI to their website. And based on your ABI they're going to dynamically create all the UI. So for example, if they see that in your ABI you have a function that is expecting an input, I don't know, like a string, then they're going to create like an input box of type text. If a function returns like a tuple of three parameters, then the UI will know how to display this parameter, et cetera, et cetera. So if you use the remix, this already exists in remix. Remix knows how to dynamically create all this UI for you, but remix is for developers.
00:14:11.242 - 00:15:06.362, Speaker A: But one click tab will allow you to have an auto generated UI directly for your user. So that might not be usable for people who actually want to monetize their DAP and do something really quite advanced with it. But it might be interesting for people who just want to test something as a playground. So I'm expecting this project to be very popular. You might hear about it a lot in the next few weeks. And then finally, actually I think this is one of the most interesting thing I find this week is a project called Eventum. So if you've been in the DAP ecosystem for a while, you are probably aware that there is one thing which is difficult with Ethereum nodes, it's listening to events.
00:15:06.362 - 00:15:40.810, Speaker A: So basically you can't just use a public node like infura and listen to the event of your own contract. Because first you need to configure your Ethereum node to listen to the events of your specific contract. And you can't do this with public nodes like infra. So if you want to listen to your own events, then that force you to operate your own ethereum node. And as you know now, the blockchain got really huge. I think now we need at least 1 storage. So that's quite expensive.
00:15:40.810 - 00:16:37.530, Speaker A: If you buy an EC two, like for example an edible Us EC two instance, strong enough for this, it will cost you a lot. So that's a problem. And so there are a couple of services that popped up that allow developer to listen to any events on the Ethereum blockchain, but those are pet services. But with this project, what they did was a library to do the same thing. So they have a docker image and also a docker compose configuration because there are different parts in the project. And so one part of it is a parity node, another part of it is either Kafka or RabbitMQ, which has two very famous queue solution. Very rubbish.
00:16:37.530 - 00:17:23.820, Speaker A: And so what you will do with this is it will allow you to register to event with their ClI and then your front end will listen to these events and you can do all sorts of things like notification when something happened on a smart contract. But all of this will be done very easily. It's like a turnkey solution, it will just work out of the box. So there is just one word of caution. This is a new project, so it's probably not stable yet. But you might want to try that just in your development environment. And if you're happy with it and you don't notice any bug, then you can use it in production also.
00:17:23.820 - 00:18:28.830, Speaker A: Yeah, I think we're almost done with this newsletter. Yeah, I think that was the last thing that I wanted to tell you, but since I already picked my ten links then I didn't put it in a newsletter. But I'm just going to briefly mention it. So there is a controversy now with Ethereum development. So during Defcon four that took place a couple of weeks ago, there were a couple of private discussion between Ethereum core developers, a private discussion about the future of Ethereum, and some people got angry about it because in general, in Ethereum all the discussion need to be public. But the point of this private discussion was to speed things up and take decision to increase the speed of the new features in Ethereum. Because you've probably noticed that the pace of development is quite slow.
00:18:28.830 - 00:19:13.882, Speaker A: So yeah, there is like a sort of drama brewing in the Ethereum community because of this. And I really hope it will resolve soon because this is not super interesting. Like if you listen to the latest notes of the core developer meeting, then I think half of it is about this drama. And I think it really sucks. I mean, yeah, this is a shame that it was private meetings, but maybe they had their reasons in any way. Let's just be more positive. And also I think this highlight a problem in the decentralization model of Ethereum.
00:19:13.882 - 00:19:57.510, Speaker A: So decentralization is great, but really we have to admit that it also makes decision taking much more difficult and it makes progress much slower because nobody is the boss. So nobody feels really they have some sort of actual responsibility. And yeah, I think that's interesting because that really highlight one of the limits of decentralization. So I don't have an answer to this, but I just want to mention this because in Ethereum we talk a lot about decentralization as being the solution for everything. It's not so simple. Thank you for following this video. If you enjoyed it, give it a like.
00:19:57.510 - 00:20:06.458, Speaker A: If you want to see more video like this, make sure you subscribe and you can also share it to your friend. And I hope to see you for my next video. Have a good day, guys. Bye.
