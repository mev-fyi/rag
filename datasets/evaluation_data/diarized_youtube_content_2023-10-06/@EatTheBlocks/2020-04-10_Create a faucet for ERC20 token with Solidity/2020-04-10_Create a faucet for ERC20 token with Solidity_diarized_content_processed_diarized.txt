00:00:00.170 - 00:00:57.534, Speaker A: In this video I'm going to show you how you can create a faucet for ES 20 token with solidity. And before we continue, make sure that you join the Facebook group of either blocks where you will find me and all the students. And you can ask all your questions about blockchain development and how to find your first blockchain job. So if you develop smart contract before, you probably use faucet like the rob and foster. Basically, faucet allow you to get some fake token for free so that you can use them on public testnet. And the thing is, when you do local development on your computer and there is an ES 20 token involved, you might also need to get some free fake ES 20 token so that you can play around run your test. So is there a way to build a faucet locally for any ESC 20 token? Yes, and I'm going to show you this.
00:00:57.534 - 00:01:38.700, Speaker A: So here I am in remix and I'm going to create a new smart contract for my ES 20 token, mytoken Sol. So this is going to be with the current version of solidity 0.6.0 and I'm going to import the ES 20 token of open Zeppelin, open ziplin, which is a very famous solidity library. If you need the refresher on that. I actually have full series on my YouTube channel. So here I'm on the home page of Open Zeppelin. Then I go in the folder contract repo inside token ERC 20.
00:01:38.700 - 00:02:01.662, Speaker A: I click on ERC 20 here. That's what I want. Then I'm going to copy paste the URL back to remix. I'm going to import all of that. Okay. By the way, I'm showing you this example in remix. So here I can import a URL.
00:02:01.662 - 00:02:39.738, Speaker A: But if you are doing this with truffle, you will need to replace this URL by a reference to the NPM package of Open ziplim. And after that I'm going to define my token. So, my token I inherit from ERC 20 and I'm going to create a constructor to instantiate my contract. So, constructor, and it's going to take two arguments. First, the name of the token. String memory name. And second, I forgot the second argument.
00:02:39.738 - 00:03:13.094, Speaker A: Let me see in the spot, contract of open Zeppelin. Let's scroll down. So here in the constructor it needs the name and the symbol. Both are strings. Okay, so string memory symbol. And after that we're going to forward this argument to the constructor of ES 20. That way we make that public and we don't need any body definition.
00:03:13.094 - 00:04:04.454, Speaker A: Okay, so here we have an as 20, and now we want to add the full set functionality so that anybody is able to get some free token and play with it. So we're going to create this function and we're going to call this, I don't know, mint for example, you could call it faucet also if you want. It's going to take two arguments. The first one is the recipient address. So address recipient. And second one would be the amount of token that you want to send, make it external. And after we going to use a function defined by the YaS 20 token of open zeplim.
00:04:04.454 - 00:04:46.358, Speaker A: So let's go here in the source code. Let's scroll down until we see underscore mint here it takes two arguments, the address and the amount. Okay, let me copy this back to our contract. Let me paste this. So first we'll have our recipient and then the amount and that's it. So here this min function is going to create our token and send them to the recipient. And you might wonder, well, where do this token come from?
00:04:46.444 - 00:04:52.006, Speaker B: It's just created out of nowhere. Yes, exactly. Created out of nowhere.
00:04:52.118 - 00:04:55.942, Speaker A: Exactly. Like the feds who just injected trillions.
00:04:56.006 - 00:04:58.102, Speaker B: Of dollars created out of nowhere.
00:04:58.166 - 00:05:32.214, Speaker A: This is exactly the same. You can also be the Federal reserve on the blockchain. So after, how would you use this mint function? Well, most likely in your truffle project, in your migration file, when you deploy my token, probably you will call mint for different addresses. So you distribute enough token to different addresses. And after you can run test, or you can deploy this centralized application. And on the front end you can play with all this token that you distributed. You can do whatever you want.
00:05:32.214 - 00:05:42.258, Speaker A: And if you are happy with this trick, and you want to know even more tricks with solidity, you can check out this series with many other really cool trick.
00:05:42.354 - 00:05:43.586, Speaker B: I'll see you there. Bye.
