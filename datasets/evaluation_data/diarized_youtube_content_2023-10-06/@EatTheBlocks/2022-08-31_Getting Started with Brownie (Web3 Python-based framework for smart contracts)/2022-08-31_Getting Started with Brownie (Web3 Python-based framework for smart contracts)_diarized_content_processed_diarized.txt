00:00:00.330 - 00:00:38.566, Speaker A: Brownie is a solidity and Viper development framework for Python. Given that Viper is heavily inspired by Python, it absolutely makes sense to choose this over hard hat. On top of that, it also gives you access to a variety of boilerplate code in the form of brownie mixes. In this video, I'm going to show you how to get started with Brownie framework. If you're new here, my name is Ty and on Ethel blocks we help web two developers get into web three you. Before we get started, let's assume that you already have the latest versions of node, NPM, Python, and Pip installed. Since Brownie does not include a local blockchain simulator on its own, we will need to install one.
00:00:38.566 - 00:01:24.690, Speaker A: While Ganache CLi version 6.2 is listed as a dependency in the documentation, we are going to ignore this and install the latest version of Ganache instead, because they have both been consolidated into the latter as of version seven. After this is installed, we can use Pip to install ETH Brownie. To ensure that Brownie was properly installed, let's import some boilerplate code with Brownie bake token or Viper token CD into our new project folder and try it out with Brownie test. If you see warnings, don't worry, these boilerplates are just old. When you initialize a project, Brownie creates the folder's build contracts, interfaces, reports, scripts, and tests. As you may have already guessed, the contracts folder houses your solidity or viper source files.
00:01:24.690 - 00:02:09.326, Speaker A: Below that, the interfaces folder holds any interfaces you may have created for these files, and they can be solidity files, viper files, or JSOn encoded ABIs. While the test folder is pretty self explanatory, the scripts folder is meant to hold Python files used for blockchain interaction. For example, running token Py will deploy the token contract from one of Brownie's default accounts. If you needed to set some variables after deployment, you could also place that script here, and it will execute when you call Brownie. Run that script. If you set up a GUI, the appropriate json files will be found in reports. The build folder generally holds compilation artifacts and testing data after running a script or test.
00:02:09.326 - 00:02:47.406, Speaker A: It's also a source of pain. If your project no longer works and you can't figure out why, then it's time to empty out this folder before you go crazy. Now that we understand the layout of a Brownie project, let's create a project configuration. If your configuration file is empty, Brownie will assume these values. The default settings for project structure, console reports, and hypothesis are generally going to be fine for a beginner so we can just delete them from the config. We can also ignore the compiler's EVM version and optimizer settings. Brownie touts out of the box compatibility with hard Hat's network, so if we want to use it, we will need to install it locally into the project's root directory.
00:02:47.406 - 00:03:37.662, Speaker A: As a quick sanity check, let's do a test to make sure that it's installed properly, and then we can configure our project to use it by default. This framework also contains a built in package manager for importing solidity libraries hosted by organizations on GitHub. Let's start by using Brownie PM to install Openzeppelin's contract repository and then list it as a dependency as well as a remapping. If done correctly, Brownie will know where to look for your solidity import statements. Conveniently, you can also use Brownie PM list if you've forgotten what you've installed. If you plan on working on this project as a team, you will also want to set auto fetch sources to true so that Brownie will automatically attempt to grab these dependencies to save you both the time and headache. Setting dev deployment artifacts to true is also a good move because it will save the addresses of contracts that you've deployed to your build folder for DAP development.
00:03:37.662 - 00:04:20.558, Speaker A: The last parts of configuration are to set up your wallet and connect your project to a node. For this step, we will need to add a new field env and set it to env. This will let Brownie know to import the variables we are about to specify and make it yell at us if we forget. Let's grab a testnet key from infura and our wallet's private key from metamask and enter them as web three infura project ID and private key, respectively. Right now, Brownie knows that we have an Env file, but it doesn't know that we have a private key in there, so we will have to specify that our wallet is coming from a private key in the config. Our project is now fully configured and ready for action as long as we have gas. If you need testnet gas, be sure to check out rinkabeefosst.com.
00:04:20.558 - 00:05:01.670, Speaker A: All that's left to do is edit our deployment script and run it in token Py. All we have to do is instantiate a message sender by using the add method from Brownie accounts. Since the account source will be the private key that we specified in our config earlier, we will need to import that at the top as well. Then we change the from field to our sender. Let's do a local deployment to make sure everything still works, and then have Brownie run the script. If all goes well, you should see a deployment map in the deployments folder under the Build directory. This record object's keys are chain ID numbers, and within each chain object we can see the name of deployed contracts and an array of addresses from previous deployments.
00:05:01.670 - 00:05:29.620, Speaker A: When we import this address on Metamask and connect to Rinkabee, it shows us a balance of 1000 PST tokens. If you've made it to the end, congratulations. You've successfully set up Brownie and deployed your very own token to a testnet. While there is loads more to Brownie than we've discussed today, you should be armed with the necessary information to set up your own project from scratch. If you'd like more in depth brownie tutorials, feel free to let us know. And turn on notifications for this channel so you don't miss the next one.
