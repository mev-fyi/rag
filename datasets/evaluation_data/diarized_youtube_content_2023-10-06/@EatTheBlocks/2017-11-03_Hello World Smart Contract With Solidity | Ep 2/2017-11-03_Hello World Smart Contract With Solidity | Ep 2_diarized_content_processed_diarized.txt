00:00:02.170 - 00:00:35.014, Speaker A: Hi guys, and welcome to the second episode of iterblocks. Today we're going to create a simple hello World smart contract with solidity. So let's jump to the terminal to first create the file of our smart contract. Touch hello World cell. So as you can see, the file extension of solidity contract is called Sol. Okay, cool, so we have our file. So now let's jump to our editor and open the file hello world.
00:00:35.014 - 00:01:15.730, Speaker A: Okay, so first we're going to introduce the pragma statement. So the pragma statement is used to tell the compiler which version of three DT to use. So type pragma, and then you're going to specify which version of three DT you want. So let's first try with a mistake. So actually the version of three DT that I've installed is 0.4.18, but in this example I'm trying to use 0.4.19, which is not available.
00:01:15.730 - 00:02:02.590, Speaker A: So let's see what happened if we try to compile this. So to compile a solidity contract, there are a different way. But as I showed you in the previous episode, I use an NPM package that already embed the solidity compiler in an easy to use command line tool. So let's just use this. So it's called solc Js, and then we need to specify the name of the file and then we need to give it command line argument, so bin, which means compile the bytecode of this contract. So let's first try, see what it's going to say. Parser error.
00:02:02.590 - 00:02:30.394, Speaker A: Okay, so I forgot a semicolon. Okay, so let's add this. Let's try again. Okay, so now we have another error. So source file requires different compiler version. Current compiler is 418, but we ask for 419. Okay, so let's fix this.
00:02:30.394 - 00:03:21.178, Speaker A: So we're going to replace 19 by 18 and let's recompile. And this time it's going to work. Okay, so now what happened if we try another version lower than our compiler, does it compile? Yes, it compiles. Okay, but we're just going to switch back to the version exactly of our compiler. Okay, so now we're going to decrease the size of our terminal and we're going to create our first contract statement. So in a single solidity file you can actually have several contracts. But for this episode we're just going to have one contract.
00:03:21.178 - 00:04:03.046, Speaker A: So let me write it contract hello world. And then I'm going to open the calibrate. Okay, so now I have my contract and all my code is going to be inside this contract statement. Then in solidity we have variables, each variables. For each variable we need to specify the type because solidity is a statically typed language. So it's not like JavaScript where you can just use directly a variable. In solidity you have to first think about the type that will be used for your variable.
00:04:03.046 - 00:05:00.578, Speaker A: So one of the most common type of variable is stringed, but we don't generally use the string type in solidity, but we use another type which is called bytes and we can specify exactly the type of this bytes type. So we're going to say bytes 32 and then we're going to specify the name of our variable. So by 32 message, okay, so now we have one variable. Next we're going to create our contract constructor. So the contract constructor is a method that has exactly the same name as the contract. So I'm going to use the keyword function and then I'm going to use the same name of our contract hello world. And then my constructor method can accept some parameter.
00:05:00.578 - 00:06:02.240, Speaker A: So I'm going to accept the parameters of type byte 32, which will be my message. And then in the body of my constructor what I'm going to do is I'm going to assign the value of my message to my message variable, which is defined above so equal my message. Okay, so when this contract will be created for the first time, it will be passed a my message argument. And this my message argument will be assigned to our internal variable message. And this variable message will be stored in a smart contract and we will be able to access it. But in order to access it, actually we need to create another function for this. So let's do this function and it will be called get message.
00:06:02.240 - 00:06:44.682, Speaker A: Okay, so this function doesn't take any arguments. However, this function is going to return an argument. So we need to specify the type of the return argument with the keyword returns. We need to open the bracket and we're going to return a type byte 32, okay, and then we open the curly brace and we very simply just going to return message. Okay, and that's it. We just finished our smart contract. So now back to the console and we will try to compile it to see if there is no error.
00:06:44.682 - 00:07:29.498, Speaker A: So we're going to repeat the last command. Let's see if everything works fine. Okay, so let's see what does the compiler tell us. So we have a warning here, no visibility specified. Okay, so we're going to study this topic in next episode, but basically you can specify the visibility of method and variable. And then we have another warning function, state mutability. Okay, there is another keyword that specify another property, but we can just ignore this.
00:07:29.498 - 00:07:53.700, Speaker A: Those are just warnings. So now if I inspect the content of my folder, I will find that I have another file which I didn't have before. So this file here, hello world Sol. Hello world bin. So this contains the bytecode of my smart contract. So let's try to inspect this. Let's use less.
00:07:53.700 - 00:08:37.550, Speaker A: Okay, so this is the bytecode of my contract. So we're going to use this artifact in next episode to send our smart contract to the network and have it in the blockchain. That's it for today. We did quite a bit. We learned about the pragma statement, the contract statement, how to define a variable, how to define its type, how to define a constructor, how to define function argument, how to specify the return type of a function. Tomorrow we're going to deploy our contract to the testnet. Thanks for watching.
00:08:37.550 - 00:08:39.626, Speaker A: If you like this channel, please subscribe. Bye.
