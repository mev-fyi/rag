00:00:00.330 - 00:00:55.866, Speaker A: This is going to be a very high level introduction to the solidity programming language to get you started with building applications on Ethereum. This is something that I personally enjoy a lot. I'm not an expert by any means, but I've been working in crypto as a developer in various capacities for several years now, and as I've kind of embarked on this journey of learning solidity, it's become very clear to me that the educational resources for this are incredibly limited. So my goal in this video is to kind of point you in the direction of what is out there and what's helped me, because there's just not as much material as there could be. So I'm hoping to maybe attempt to help fix that and also to kind of use this video to gauge interest in solidity programming for potential content going forward. If you're here, you're probably already aware of what Ethereum is and why it's useful. But really quick, let's talk about what it actually means to build an application on the Ethereum blockchain.
00:00:55.866 - 00:01:34.954, Speaker A: So dapps are decentralized applications that run on a peer to peer network, like a blockchain. In the case of Ethereum, dapps are controlled by logic, written in a smart contract. So smart contracts are what we're going to be focusing on in this video. And you can think of a smart contract as like Adapt's backend. Basically in a regular app you would have your backend running on a centralized server somewhere that someone or some company owns. But with Dapps, your backend is running on a decentralized peer to peer network, in this case the Ethereum blockchain. So you would build the front end for your app, let's say you use react or something, and then it would communicate with the back end like any full stack application.
00:01:34.954 - 00:02:08.578, Speaker A: But that backend would be the smart contract living on Ethereum. So the smart contract itself is just a program that's just chilling out there that's going to run when some conditions are met. That's really all it is. And we can build these smart contracts using solidity. According to the docs, the solidity programming language was influenced by C plus Plus, Python and JavaScript. So if you're familiar with any of those languages, you'll notice a bit of similarity, which by the way, I would not recommend solidity to be anybody's first ever programming language. So if you don't know any others, I would highly suggest that you start with something else first.
00:02:08.578 - 00:02:43.358, Speaker A: I know there are people out there who have learned to code with solidity, and that's great. But just as a rule, I wouldn't suggest that. Some things to note, solidity is set up to run inside the Ethereum virtual machine, which is just the runtime environment on the Ethereum blockchain. So like the JRe for Java or the CLR for. Net, the EVM is sandboxed and completely isolated, so code running in the EVM has no access to network, file system or anything like that. Second, solidity is very new and it is being updated very frequently. They push updates like every few weeks I think, and at least twice a year they have breaking changes.
00:02:43.358 - 00:03:04.678, Speaker A: So that's one of the big challenges for me personally when developing is just locking in the versions of different tooling that's compatible with one another. It can be really kind of a headache at this point because of how new all this stuff is. So that's another reason why I probably wouldn't suggest this for someone's first programming language. Also, this is very important. Blockchains are immutable as we know. They can't be changed. That's kind of the whole point.
00:03:04.678 - 00:03:40.190, Speaker A: So once a smart contract is deployed, it can't be altered. If you want to make a change to the back end of your DAP, once it's out there, you'll have to deploy an entirely new contract. So developing the smart contracts is kind of a unique experience. And this is why it's really, really important to have adequate testing for these Dapps. So with all that being said, let's look at a quick introduction to some actual solidity code in your browser. Go to remix ethereum.org and this is going to take you to the remix editor, which is an IDE for developing solidity contracts.
00:03:40.190 - 00:04:07.786, Speaker A: I mentioned earlier that versioning and tooling is one of the big challenges of developing for blockchain. And the remix editor is great because it's already set up and ready to go. You can run it right here in the browser, or you can run it locally and in a desktop version as well, I think, but it's all ready to go. It compiles your code when you make a change to a file. It has modules for testing and deployment. You can even deploy to mainnet with this. So if you want to learn Solidity, the remix editor is a really good place to start.
00:04:07.786 - 00:05:04.682, Speaker A: So we can see they have some example contracts over here on the sidebar, there's an example of a test file as well. So up here at the top you always start pragma solidity and the version of solidity that you're using. You can kind of tell here that solidity is statically typed and is an object oriented programming language. So if we come over here to the sidebar and we go ahead and compile this contract, and then we come here and we go ahead and click deploy, actually going to deploy this contract to a test network. Now you can connect a metamask wallet and you can actually deploy a contract to mainnet to the actual ethereum network from remix, which is pretty cool. But for testing purposes the test networks are really, really helpful. So you can actually kind of use this over here as a mini front end here in the sidebar.
00:05:04.682 - 00:05:45.990, Speaker A: So we can see this getowner function inside of our contract. And if we click this button here, it's going to execute that function. And here we can see this is the address of the owner of this contract. So we can see that this is a pretty nice tool. You can immediately get in there and start writing code. But where can you learn how to write this code? This is the tricky bit because a lot of information becomes outdated so quickly with smart contracts. One time I did a solidity udemy course that was only a few months old when I started it, but by the time I was actually testing out the code, parts of it were already broken because it was using packages and things that were only compatible with newer versions of solidity that had come out in that time frame.
00:05:45.990 - 00:06:13.570, Speaker A: So the one place where you know things are going to be up to date always is the solidity documentation. And honestly, I think that's really the best place to learn is just opening up your remix editor and following along with the documentation. It's pretty detailed. They go through contracts line by line and explain what's going on. Quite a few people I know who work with smart contracts for their job. This is the way that they learned. And if you already have prior experience with the programming language, it's not going to be too difficult for you to figure this out.
00:06:13.570 - 00:06:53.162, Speaker A: There's also a YouTube channel called Dapuniversity. You've likely run across it if you're at this video, but there's several solidity smart contract tutorials on there. He makes videos about other things like crypto market commentary and stuff, but honestly, those tutorials are about the most robust option I've seen available for free on YouTube. I think he does have a paid course as well. There's also tutorials point which has some pretty extensive solidity documentation. I've heard there's some skillshare courses on solidity that are pretty decent as well. And of course there's medium, there's Hackernoon, there's stack overflow where you can ask questions or read articles about this stuff, but there is stuff out there that's just out of date or incomplete that's kind of floating.
00:06:53.162 - 00:07:22.762, Speaker A: So you do have to be prepared for some trial and error with those so you're not totally without options. And it is getting better. But I do think that clearly we could use some more resources on this. Generally I don't do tutorial type content on this channel. That wasn't really my vision for this, but I have considered maybe doing a series where we walk through and build a smart contract together. I just feel like there's really a hole where we don't have any women teaching this stuff yet at all. And I don't consider myself the champion for women in tech or anything.
00:07:22.762 - 00:08:01.330, Speaker A: I'm just a developer. But I am excited about getting this stuff in front of more people. And I think sometimes that inclusivity just helps to make an industry feel more welcoming for people who have a lot of potential with something, but maybe they just wouldn't otherwise have been as likely to take notice. So if that sounds like it would be interesting, let me know and maybe I'll think about doing some smart contract tutorials. But for now that's it for the beginner intro. I hope you found that interesting and it made you want to continue your blockchain development learning and I will see you in the next video. You it's.
