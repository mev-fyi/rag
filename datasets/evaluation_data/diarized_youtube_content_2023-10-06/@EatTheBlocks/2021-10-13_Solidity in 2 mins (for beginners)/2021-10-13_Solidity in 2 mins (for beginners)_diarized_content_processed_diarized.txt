00:00:00.410 - 00:00:36.566, Speaker A: It Solidity is a language for creating blockchain applications. You can use it to create smart contracts on more than 200 blockchain networks, including Ethereum. The syntax looks like JavaScript, but it works in very different way. If you are new here, I'm julian and on the blog I teach blockchain development. To get started with Solidity, you go to remix an online IDE for smart contracts. You go to the file editor and you create a new file for your smart contract. The file extension for solidity is Sol.
00:00:36.566 - 00:01:05.346, Speaker A: You specify the version of Solidity in the Pragma statement. You define a new smart contract with the contract keyword and the name of your smart contract. You can define variables and their value will be stored on the blockchain. To define variables, you have to specify their type. Solidity is what we call a statically typed language, which is different from JavaScript. To interact with these variables, you can create functions. To read a variable, you can define a readonly function.
00:01:05.346 - 00:01:50.730, Speaker A: The function signature is slightly more complex compared to JavaScript. In the function body, you return the variable and that's it. You can also define functions to modify the variables of your smart contract. In this case, the function signature is a little bit more simple, and inside the function you can modify the variables of your contract and the new values will be saved on the blockchain. Solidity is what we call a compile language, which means you cannot run its code directly contrary to JavaScript. For the compilation step, you go to the compilation menu, you select the correct version of solidity, and you click on compile. Now your solidity code has been compiled into what we call the EVM bytecode, a series of instructions that can be understood by the blockchain.
00:01:50.730 - 00:02:30.300, Speaker A: The next step is to deploy your smart contract and interact with it. For this you go to the deployment tab. You select the contract, you click on deploy, and after you can see the contract instance in this box, you can interact with your contract by calling the different functions it's deployed on a local blockchain, a safe send box where you can make mistakes and experiment. That was a very quick introduction to solidity. If you want to dive deeper in solidity, I also have a full playlist on solidity. The current version of Solidity is zero eight, and this series uses solidity zero five, but it's fine because the language didn't change that much. I was you there.
