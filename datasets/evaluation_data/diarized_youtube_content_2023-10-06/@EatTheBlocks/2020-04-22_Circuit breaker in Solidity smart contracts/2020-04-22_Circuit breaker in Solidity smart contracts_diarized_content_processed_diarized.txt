00:00:00.170 - 00:01:00.638, Speaker A: In this video I'm going to show you how you can implement a secret breaker in solidity. If you don't know me, I'm julian and on my channel eatoblocks, I teach blockchain development and how to find your first blockchain job. So what is a secret breaker? A secret breaker is a feature of smart contract that allow to temporarily disable the smart contract in case there is a big problem like, like a hack or some market condition that caused the spot contract to malfunction. And actually if you follow the news of blockchain and defi, about one month ago this actually happened for the maker Dao Dai Token. So at that time the price of ether crashed and that caused Dai token to be under collateralized. And for a moment the macro Dao community consider activating their secret breaker so they have the ability to totally temporarily stop the Dai ecosystem. Fortunately, they didn't have to do this.
00:01:00.638 - 00:01:39.782, Speaker A: And if you create your own blockchain project in your smart contract, you also might need to implement this secret breaker feature. So how can we do this? Well, I'm going to give you an example here. So I have a smart contract, and this smart contract, let's say that he has some ether. So for your secret breaker, when you activate it, you want to block two function. You want to prevent any money from going in the contract and any money from going out of the contract. So no money in, no money out. So that means blocking the Israel function and the receive function.
00:01:39.782 - 00:02:39.182, Speaker A: So how would we do this? First you can define a boolean variable that you're going to call is active. And originally this is equal to true. And what we're going to do is we're going to have a function that we're going to call, I don't know, toggle, toggle circuit breaker. And basically we are going to change the value of this variable is active. And of course we need to restrict the access of this. So there's only the admin of the smart contract that can do this. Otherwise you have no security.
00:02:39.182 - 00:03:50.114, Speaker A: And probably you want to define this admin constructor. When you deploy your smart contract, you define your variable here, address admin, and so you'll define a modifier that makes sure that the smart contract is active. So we're going to call this is active. Actually we cannot use the same name as the variable. So let's use contract is active and you just require that is active is true after you execute the function to which the modifier is attached and after we attach the modifier here contract is active. Same thing here. And so in the future if there is any issue and you are the admin, so you just call toggle secret breaker and then it switches.
00:03:50.114 - 00:04:31.918, Speaker A: The value of this is active variable. And so next time someone try to call, withdraw or receive, then this modifier, the required statement is going to fail. It's going to throw an error and transactions is going to fail. So that's the desired behavior. And after the problem is resolved, then you as the admin, you call toggle secret breaker again and we switch back is active to true and then people are able to call, withdraw and receive again. So there are a couple of problems with secret breakers. The first one is that it's possible that you need to put this in place in many different smart contract.
00:04:31.918 - 00:05:26.302, Speaker A: For example, if your smart contract is a wallet and you have one wallet per user, so you will need to call toggle secret breaker in all wallets and that would be slow and expensive. So in this case you could change the design of your system. And for example, maybe that you have a factory that produce all your smart contract. And so you will make this factory responsible for activating this circuit breaker. Pragma solidity 0.6.0 factory. And so here, all this logic here will go to the factory.
00:05:26.302 - 00:05:52.480, Speaker A: Oops. By the way, here I made a mistake. There is no reason to put this modifier here. And here in the modifier contract is active. So in this case, here you don't have admin and is active in this smart contract anymore. So you're going to call the factory smart contract. So it's going to be like factory and here address of the factory, I don't know, zero, x, whatever.
00:05:52.480 - 00:06:37.334, Speaker A: And then you're going to call the is active function. And if you make it public, you'll be able to read it from the outside. Here you call this getter function and you verify that it's true. And this way you have a centralized management of the circuit breaker. Another problem that you have with circuit breaker is that it actually make your system centralized because a single address can toggle this secret breaker and have a big impact on everybody. To mitigate this problem, you could make this address a smart contract that is controlled by several people. So typically that will be a multisync wallet.
00:06:37.334 - 00:07:09.300, Speaker A: And so only the multisync wallet is able to toggle this secret breaker. So you need to have the agreement of several people at the same time. And this is actually the solution that is used by many projects and actually in the blockchain industry, one multi sync wallet that is very used is a multi sync wallet of gynosis, and you can find it on GitHub in the organization of gnosis. And I actually have many other cool tricks in solid t to show you. If you want to see this trick, check out this series. I'll see you there.
