00:00:00.330 - 00:00:36.066, Speaker A: Hello, this is julian and you are on idoblocks. And in this video I'm gonna show you what is the basic structure of a solidity smart contract. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL. So what you see on my screen is the remix online Ide for, so you can access it by going to this URL. And if you haven't followed my previous video, I actually give a brief introduction of what is remix.
00:00:36.066 - 00:01:07.390, Speaker A: And so the first thing we need to do is to click on the solidity button here. So it's going to configure remix for the solidity programming language. So let's do this and you should see this. And we're going to create a new spot contract. So I'm going to click on the menu for the file explorer here. So let me click on that and then I'm going to click on the plus icon to create a new file. And I'm going to call my file mycontract Sol.
00:01:07.390 - 00:01:53.602, Speaker A: So Sol is the extension for solidity smart contract. So I press ok and here on the right then you should see the source code of your smart contract. So since we have just started, this is empty of course, but we are going to fill it. So the first thing we need to do is to put the pragma statement of solidity. So the pragma statement basically tells the compiler that we want this smart contract to be compiled with a certain version of solidity. So this prevents you from making some mistake. For example, if you write a smart contract in a certain version of solidity, but then you try to compile it with an incompatible version, then solidity will know that there is a problem.
00:01:53.602 - 00:02:32.406, Speaker A: So you specify the pragma statement like this. So pragma sold and then Carrot plus the name of the version number. So we're going to be using solidity 0.5 point eleven and you terminate by a semicolon, because in solidity old statement need to be terminated that way. So there is one thing in its pragma statement that is a bit confusing. This is these little carrot things. What does this mean? So this means that only the compatible version of solidity will be used to compile this smart contract.
00:02:32.406 - 00:03:00.070, Speaker A: So that means for example, solidity 0.5 point eleven of course, but also three dt .5 point twelve point 13, et cetera, et cetera. But the middle version here, the middle number five, this cannot be different. So if you try to compile this with, for example, 0.6.0, this will not work. If you try to compile this with 0.4.0,
00:03:00.070 - 00:03:20.086, Speaker A: it will not work. 0.5 point ten will also not work, but 0.5 point eleven will work, 1213, et cetera. So you got the id. So in general, you should always start a smart contract with the latest version, a stable version of Sodt. So at the time of this recording, this is 0.5
00:03:20.086 - 00:03:54.962, Speaker A: point eleven. Then after that you can have some import. So in your smart contract, if you make some reference to other smart contract, then you can have some import statement. I'm going to show you this later in this tutorial series. But just to tell you briefly, this is possible that you have some import statement here. And after that you define your smart contract by using the contract keyword. So use the contract keyword and then you name your smart contract.
00:03:54.962 - 00:04:31.214, Speaker A: So in general it's a good practice to name your smart contract with the same name as the file. So in this case it's going to be my contract. And after that use curly braces to define the body of your smart contracts. That's where you will actually have all the code of your contract. So in a source file of solidity you can actually have several smart contract. So here I define the first smart contract. But if I wanted I could define another smart contract, my second contract here, et cetera, et cetera.
00:04:31.214 - 00:05:05.790, Speaker A: I like to keep things tidy. So in general I like to put just one smart contract per file. Okay, so we have defined our smart contract. So now what's going on in there? So in a smart contract, in the body you have two locations. The first location at the basic level, this is where you're going to define your variable. So for example, if you want to define an integer, so you define the type of the variable like this plus your integer. So for example, you can call it a.
00:05:05.790 - 00:05:53.840, Speaker A: So that means that you have a variable of type integer that's going to be stored on the blockchain. So this is what we call a state variable. And after that, so you can define other variable, for example, unb, et cetera, et cetera. Later in this series I will tell you about the different variable types, but this is just for the general layout of the contract. So we're not going to get into detail with solidity types. So after that you can define a function, a function to manipulate this state variable. So define a function exactly like in JavaScript so function, for example, you call it add and then it's going to add a plus b, for example.
00:05:53.840 - 00:06:50.046, Speaker A: So here I'm going to define this function. This means that it can be called from outside the smart contract and there will be another video on function. And then inside your function you can do some operation, for example you can return this or do other things and yeah, so this is basically the basics. So here outside of your function you define the variable that will be saved on the blockchain, and after that you can define some function that manipulate this variable, or also some variable that you give as argument to the function. So that's really the basics of solidity. By the way, if you look at the contract thing here. So it actually kind of look like a JavaScript object because it has some variable and also it has some function.
00:06:50.046 - 00:07:09.490, Speaker A: So you can sort of make this comparison. Yes, a smart contract is a little bit like a JavaScript object, except that it is connected to the blockchain. That's it for this video. And in the next video I'm going to give you an overview of the different variable types that you can use in your solidity smart contracts.
