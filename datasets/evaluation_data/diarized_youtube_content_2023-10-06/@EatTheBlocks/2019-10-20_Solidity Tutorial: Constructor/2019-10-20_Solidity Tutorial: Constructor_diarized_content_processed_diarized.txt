00:00:00.330 - 00:00:33.062, Speaker A: Hey, this is julian and you are on idoblox. In this video I'm going to explain you constructors in solidity. When you create a solidity smart contract, you can define a special function called a constructor. A constructor is only executed once when you first deploy your smart contract. That's a really good place to put all your initialization logic. However, there are a few caveat because a constructor doesn't work exactly like a regular function. So in this video I'm going to explain you how this works exactly.
00:00:33.062 - 00:01:14.398, Speaker A: So first we're going to see how we can declare constructor, then the main difference with regular function. Then I'm going to show you the admin pattern to keep your smart contract safe. Then I'm going to show you how you can call all the function from a constructor. And finally we will see an advanced pattern which is when you call a parent constructor from a constructor. All right, so let's get started by declaring a constructor. So to declare a constructor, it's very easy, you only use the constructor keyword like this. And after you make your constructor public and you open curly braces and inside you will put your initialization logic.
00:01:14.398 - 00:01:48.830, Speaker A: So a constructor can take some argument. So for example, if you want to accept an integer argument, you can do it like this. So you declare the type and then the name of the argument exactly like regular function. And let's say that we have a state variable here called a in our smart contract. So if we wanted to initialize this variable then we would do like this. And inside you can perform some other initialization logic if you need it. By the way, this is the syntax for solidity 0.5.
00:01:48.830 - 00:02:21.562, Speaker A: But if you write some old solidity code with solidity 0.4, then the syntax used to be different. So before you used to declare a function of the same name of the smart contract like this. But this syntax is deprecated so don't use it. So next we'll see the differences with regular function. The biggest difference is a constructor can only be called once when you deploy the smart contract after. Once your smart contract is deployed, there is no way to call this constructor code.
00:02:21.562 - 00:03:17.820, Speaker A: Like for example if you have another function foo like this and that you try to call this constructor, then this is not going to work. And the second difference is that you can only use two visibility, keyword public or internal. But if you try to use another keyword like external, for example three, DT is going to complain so public this is the keyword that you want to use in most cases, but in some cases you might want to use internal. So if you use this keyword, that means that you cannot deploy my contract directly. However, you can create another contract like my derive contract and you can inerit from my contract. And then from the constructor of this myderive contract, you will be able to call the constructor of my contract. And I will show you this in the last part of this video.
00:03:17.820 - 00:03:47.618, Speaker A: Okay? But as I said, in most cases you want your contract to be deployable. So you want to put the public keyword. So next I'll show you the admin pattern. So in your 3d smart contract, very often you want to protect some function from being called by anyone. And for that you can use the admin pattern where a specific address is allowed to call some function. But that's it. So for that you need to first define an address variable.
00:03:47.618 - 00:04:27.390, Speaker A: You call it admin. And inside your smart contract what you will do is that you're going to instantiate this admin to the sender of the transaction, and later you're going to use this address to protect the execution of some function. And I'm going to show you how to do this later in this tutorial series when we will see modifiers. Next I'll show you how you can call other function. So I told you that you cannot call a constructor from a function. So here if I have a function foo, I cannot call the constructor. However, from the constructor I can call the function foo.
00:04:27.390 - 00:05:08.026, Speaker A: So here if I want to call the function foo, then I can do like this. But in this case I cannot have the external keyword. Here I need to make it public. And in my function foo I can change the state of the smart contract, for example a equal two, et cetera, et cetera. So if you have some code in your constructor that you will reuse later in a lifecycle of your smart contract, then you can extract this code in a function and call this function from the constructor. And finally, I'll show you how you can call a parent constructor from your constructor. So let's say that your smart contract inerates from other contracts.
00:05:08.026 - 00:06:02.106, Speaker A: So for example here contract my parent contract, and in this parent contract you have a constructor, and this constructor is going to accept an argument and after it's going to do some stuff. So if your contract inerates from this my parent contract, so in your constructor you can call the parent constructor of my parent contract by doing like this, my parent contract and between parentheses you will pass it. Any arguments. For example, if you want to forward the a argument that we receive here, then you have to do it like this. And you don't have to define anything here. It can be empty if you want. So for example, this pattern is very used when you define Yas 20 tokens.
00:06:02.106 - 00:06:13.820, Speaker A: All right, that's pretty much it. About constructor in solidity. In the next video, I'll show you how you can create other smart contract from a smart contract. Thanks for watching. See you for the next video.
