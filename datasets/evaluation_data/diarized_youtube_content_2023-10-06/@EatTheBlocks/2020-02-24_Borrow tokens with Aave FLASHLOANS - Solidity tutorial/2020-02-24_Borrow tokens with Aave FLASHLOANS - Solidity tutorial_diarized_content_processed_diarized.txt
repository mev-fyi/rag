00:00:00.170 - 00:00:44.502, Speaker A: Flash loans allow you to borrow a very large sum of token on Ethereum without providing any collateral, as long as you repay the loan in the same transaction. This can be used for doing arbitrage between different decentralized exchanges, as well as many other really cool stuff with defi protocols. In this video I will explain how a flash loan work, what you can do with it, and I also show you how to borrow token in flash loan using a solidity smart contract and ave protocol hey, I'm Julian and on my channel eat the blocks. I teach blockchain development and how to get your first blockchain job. In a flash loan. There are three steps. First, a smart contract.
00:00:44.502 - 00:01:24.738, Speaker A: Borrow tokens from another smart contract on the blockchain. Then with the token you borrow, you can use these tokens in whichever way you want and we'll see after what cool stuff you can do. And finally, you need to repay the tokens to the lender. You might think, well, what is so revolutionary about this? Well, two things. First, it all happened in a single transaction. And second, there was absolutely no collateral involved, unlike lending protocols like compound. If you don't reimburse the loan in the same transaction, the smart contract of the lender is going to throw an error and that will cancel the whole transaction.
00:01:24.738 - 00:02:03.070, Speaker A: That's how lenders can protect themselves even if there is no collateral. So now let's see what you can do with flash loans. You can do arbitrage between decentralized exchanges. If you notice a discrepancy in price for a certain token, then you can borrow a lot of this token and you do your arbitrage, but with a huge leverage you can also refinance loans. So for example, if you have a loan on compound at maybe 10% and you notice that it's also possible to have the same loan at 5%. With another lending protocol, what you can do is you borrow a token. With a flash loan, you reimburse your loan on compound.
00:02:03.070 - 00:02:40.794, Speaker A: Then you open the loan at 5% and with this money you can reimburse the flash loan. So you've effectively moved from a loan at 10% to a loan at 5% and you can also swap the collateral of an existing loan. So for example, if you have a loan on compound and for the collateral you have a token a, but you want to swap this against token b. What you can do is you take flash loan for token b. Then you send these tokens to compound as a collateral for your loan. Then you take out token a from compound. You use a decentralized exchange like uniswap to change token a into token b and then you reimburse your flash loan.
00:02:40.794 - 00:03:23.790, Speaker A: So next we're going to talk a bit of AavE, which is the DeFi protocol we're going to use for flash loans. So Ave started its life as a project called Eastland. Eastland was a peer to peer decentralized lending protocol on the Ethereum blockchain. Then Eastland changed its name to AAvE and it also updated its lending mechanism. The new version is very similar to compound, however, it has two features that are very unique. First, you can switch between a variable rate to a fixed rate during the lifetime of the loan. And second, you can do flash loans and that's what we're going to focus on.
00:03:23.790 - 00:04:24.110, Speaker A: So I'm going to show you how you can create a flash loan on Ave in a solidity smart contract. So here I am in remix and I've created a smart contract called Borrower and we're going to call the smart contract of Ave to initiate our flash loan. So we're going to go to the GitHub repo of AAve. That's where there is the smart contract of Ave. And we're going to click in the contracts directory, inside configuration lending pool address provider and you're going to copy the URL, then back to Vmix and we're going to import the URL. So this way we can know the interface of lending pool addresses provider and we're going to need this in order to interact with the Avis smart contract. Then we're going to define a pointer to the smart contract.
00:04:24.110 - 00:05:15.614, Speaker A: So lending pool addresses provider, we're going to call this provider and also going to need the address of the smart contract of DAI because in our example we're going to borrow some dAi. So then in our constructor we're going to define these two parameters, the address of the provider smart contract of Ave and then the address of die. So instantiate the pointer to the provider smart contract. And for die we just need the address. And then we're going to create a function to initiate the borrowing process. So we're going to call this start loan. It's going to receive two parameters.
00:05:15.614 - 00:06:24.870, Speaker A: First the amount that we want to borrow and then another argument that I will explain later. So first we need to have the address of the lending postpat contract of Ave. That's the smart contract that we need to interact with. And for that we're going to use this lending pool addresses provider get lending pool and we also need the interface of this lending pool smart contract. So let's go back to the repo of Ave inside the contracts directory and let's go into lending pool lendingpool Sol let's copy the URL. Let's go back to our smart contract. We're going to import this, okay, and so now we can create a pointer to this smart contract lending pool.
00:06:24.870 - 00:07:06.212, Speaker A: Let's get rid of this and after to initiate the flash loan, equal lendingpool flash loan. So first the address of the receiver. So that's the smart contract that's going to receive the loan. So you can make it so that the smart contract that initiate the loan is different from the smart contract that received the loan. But to make it simple, we're going to make it in the same smart contract. So we're going to receive the loan in this smart contract. Then the address of the token that you want to borrow.
00:07:06.212 - 00:07:44.964, Speaker A: So in our case we want to borrow die, then the amount that you want to receive and finally the parameter. So what's going to happen here is that when you call lending poll, it's going to send all of these tokens specified by the die parameter and the amount parameter to this smart contract here. And it's going to call a function on this smart contract. And as a last argument provided to this function, it's going to forward these parameters. So you don't have to use this last argument. You can just provide an empty string. But if you need to forward some data to this function then you can use that.
00:07:44.964 - 00:08:31.948, Speaker A: So next, in order to be able to receive this flash loan, we need to inherit from a spot contract of Ave. So I'll go back to the repo of Ave and I'll go inside the flash loan directory. I'll go inside base, flash loan receiver base. So you're going to copy the URL for this file. Let's go back to our smart contract and we're going to import this and we're going to inherit from this smart contract flash loan receiver base. So here contract borrower is flash loan receiver base. And then in a constructor we need to call the constructor of flash loan receiver base.
00:08:31.948 - 00:09:12.860, Speaker A: So we're going to do this like this, flash loan receiver base. Actually, let me go to the next line. Let's make some space here. Okay, flash loan receiver base and we're going to forward it the address of the provider and then we're going to create a function to receive the loan. So that's going to be called execute operation. It's going to receive four arguments. First, the address of the token that is lent.
00:09:12.860 - 00:10:14.364, Speaker A: So we're going to call this reserve, then the amount that was sent, then the fee that we have to include when we pay back the smart contract of Ave. Because this loan is not free, we have to pay some fee. And finally the parameters that were forwarded. So the type of this is bytes and this is an external function. So after you can do whatever you want with the tokens. So for example, you can do some arbitrage, refinance alone, change collateral off loan as I explained before, and once you've done everything you need and you have the token, then you need to repay the loan. In order to do this, you're going to call a function called transfer funds back to pool internal.
00:10:14.364 - 00:10:55.230, Speaker A: So you specify the address of the token, the amount, so you pay back the amount plus fee. In case you are wondering, where does this function come from? This is actually inside this flashloan receiver base that we inherit from. So everything I show you in this tutorial is actually a simplified version of the documentation for developer of Aave, and if you want to dig into it, you can check out this URL. If you want to keep learning about deFi programming and learn how you can integrate other deFi projects like compound or Uniswap, you can check out this playlist where I have many other really cool soil. I'll see you there.
