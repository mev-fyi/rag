00:00:00.250 - 00:00:47.238, Speaker A: Hey, this is julian and you're on in the blogs. In this video, I'm going to give you ten tips to become a solidity expert. So let's assume that you've already started your learning of solidity. You've done quite a few exercises, you start to be more comfortable, and now you're wondering what are the next step if you want to become really good at solidity? In this video, I'm going to give you ten answers to this question. So my first tip is to learn the security vulnerabilities of a smart contract. A smart contract manipulates money and if a hacker manage to hack your smart contract, it can steal all the money and that can be really terrible. So there are some very typical attack vectors that you should know about when you write a smart contract.
00:00:47.238 - 00:01:31.590, Speaker A: And when you know about these different security and vulnerabilities, you will also learn what are the typical solution to prevent these hacks. Tip number two, use some security tool analysis like Mitril. So knowing the security vulnerability of a smart contract is a good beginning. Unfortunately, we are human and so we are prone to making errors. So every time you finish to write some smart contract code, you should run one of these security analysis tool that will test your smart contract against some very typical security vulnerability. And if they found any, they're going to give you a report right away and you can fix your smart contract and you're good. Tip number three, test thoroughly your smart contract.
00:01:31.590 - 00:02:10.818, Speaker A: So once you deploy your smart contract to a blockchain, it's not possible to update it. So you need to be sure 100% that there are absolutely no bugs. And besides being good in smart contract security, the other thing you can do is to write some test. So you need to test all the function of your smart contract and your test need to cover all the different branches of your functions. Tip number four, use solidity coverage when you test your smart contract. So as I just said before, writing tests is good, but your tests need to be very comprehensive. They need to test all the logic of your smart contract.
00:02:10.818 - 00:03:01.950, Speaker A: And the best way to guarantee this is to run a tool called solidity coverage that will tell you what's the percentage of the code that is covered by your test. So ideally you want a coverage of 100%. Tip number five, use a solidity linter like Sol hint, the point of a linter is to enforce a certain coding style. It's very important that you keep a consistent coding style in your smart contract because it improves code quality and it's also easier to collaborate between several developer. Tip number six use solidity libraries like open zeppelin. In general, if a library already does something that you want, it's better not to write the code yourself, but it's better to use a library that has already been published and at least widely used. And that's the case of Openzepling.
00:03:01.950 - 00:03:47.106, Speaker A: So Openzeplin doesn't cover all your use cases. But for example, for the most commonly used tokens like ERC 20 or ERC 721, it's better to use the audited implementation of open zeppelin. Tip number seven learn to code in solidity assembly. Solidity assembly allow you to talk directly to the EVM, the Ethereum virtual machine, which is the part of Ethereum that actually run your smart contract. With solidity assembly, you can go very, very low level and you can access a flexibility that you can have with just normal solidity, for example. That can be very useful if you want to implement a proxy smart contract. However, as the saying goes, with great powers come great responsibilities.
00:03:47.106 - 00:04:36.594, Speaker A: And so with assembly, it's actually very easy to make a mistake and introduce a security vulnerability. So you should only use assembly if you have no other choice. But as a solidity expert, you are expected to know how to code in solidity assembly and also understand how the EVM work. Tip number eight learn how to optimize your solidity code for gas. So when you send a transaction to the Ethereum network, you need to cover the transaction cost and you need to pay this in gas. If you run some computation that are too heavy in your smart contract, it can really increase the consumption of gas and it can make it really impractical for end user to use your smart contract because now they have to pay $510 just for doing one action. So it's very, very important to keep the gas consumption low.
00:04:36.594 - 00:05:25.758, Speaker A: Usually the most efficient way to optimize for gas is to take some computation of the blockchain and only keep the very essential in your smart contract. You can also use tools like ETH gas reporter that will give you a report on the gas consumption of all your function whenever you run your test suite. Tip number nine run continuous integration for your smart contract. A lot of the tips I gave you before, they rely on you, the developer to manually run some tools after you finish to write the code of your smart contract. But that's a bit dangerous because sometimes you can forget to do it. So ideally, here is what you want. Every time you push your smart contract code to a centralized git repo like on GitHub, you want to automatically run a series of tools.
00:05:25.758 - 00:06:01.214, Speaker A: For example, you want to run some security analysis tool. You want to run your test and make sure that all the test passes. You want to run your solidity linter to make sure that the code style is consistent. You want to run ethgas reporter to make sure that none of your function consume too much gas. And you can do this in an automated way with continuous integration. So back in the day, continuous integration used to be a bit difficult. You needed to integrate some third party services or set up Jenkins, but now it's super easy.
00:06:01.214 - 00:06:49.594, Speaker A: So now, no matter if you use GitHub, GitLab or BitBucket, if you want to set up Ci, all you have to do is to drop a yaml configuration file where you specify the tools that you want to run every time you push your code to your smart contract. So that's very easy. That's also totally free, so you have absolutely no excuse not to do it. Tip number ten, learn another programming language for smart contract, like Viper for example. Viper is a smart contract language inspired by Python and its focus is on security. However, compared to sweetity, it's still a bit more limited and there is less documentation, so it should not be your primary focus. And bonus tip number eleven, challenge yourself by coding some advanced smart contract.
00:06:49.594 - 00:07:24.274, Speaker A: Don't just stay in your comfort zone, but try to do some smart contract that are beyond your current ability. And actually in my course, Dab 30, where we code 30 decentralized application and 30 solidity smart contract, there are actually a lot of advanced smart contracts. So if you follow this curriculum, you will become an expert in solidity. And I also have a free course where I give you my most useful tips for solidity. And if you want to get access to this, this is totally free. Just follow the link in the description. That's it for this video about how you can become a solidity expert.
00:07:24.274 - 00:07:33.866, Speaker A: If you have any question, let me know in the comments down below. Thanks for watching and I'll see you for another video about solidity or ethereum programming. Bye.
