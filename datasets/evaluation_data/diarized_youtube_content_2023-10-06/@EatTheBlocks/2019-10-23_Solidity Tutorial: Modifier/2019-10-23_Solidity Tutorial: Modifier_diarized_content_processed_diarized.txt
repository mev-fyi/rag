00:00:00.250 - 00:00:28.438, Speaker A: Hey, this is Julian and you are on idoblox. And in this video I'm going to show you how you can use function modifiers in solidity. Function modifiers allow you to run some code before you execute some function. This is really great for implementing access control, for example, or validating some argument. So in this video I'm going to show you four things. First, I'm going to show you the basic syntax of a modifier. Then I'm going to show you how we can pass arguments to modifier, then how we can change them.
00:00:28.438 - 00:01:08.334, Speaker A: And finally, I'll show you an example when you want to implement access control for a function. Okay, so first the basic syntax, so we need to have a function. Then we're going to define our modifier using the modifier keyword. Then we give it a name. So my modifier and this modifier can take some argument. And after you open the curly braces and you're going to write some code inside. So contrary to a regular function, a modifier doesn't take any extra keyword like public internal, et cetera.
00:01:08.334 - 00:01:48.990, Speaker A: So by default it's already internal. So you can only call a modifier from inside your smart contract, you cannot call it from outside, and so inside your modifier. Typically the first thing you want to do is to check for some condition. So you will see for example, some required statement, a equal ten, for example, and here your error message, my error message. And after that you'll have a placeholder that represent the function that this modifier will be attached to. And then you need to attach this modifier to your function. So here in the function signature, you attach the modifier by specifying its name.
00:01:48.990 - 00:02:29.898, Speaker A: And you will see some syntax where people just do this, but it's actually better to put parentheses. And so the result of this is when people will call the foo function. Before the body of the foo function will be executed, the modify will be executed first. So here it will need to pass the require statement and any code that you put here. And only after, when it reaches this placeholder, the body of the foo function will be executed. Okay, so next, let's see how we can pass arguments to our modifier. So here in the function signature of foo, for example, we can pass some static argument like this.
00:02:29.898 - 00:03:12.010, Speaker A: So here it means our modifier accept an integer and we pass it ten. But something that is more interesting is to sort of forward argument that were received by the original function. So here in our original function, if we receive an integer a, then we can forward this argument to the modifier. And so this way in your modifier you can check that the argument you received are valid. Another thing you can do with modifier is chain them. So in the foo function we've attached one modifier, but if we had other modifier, we could also attach them to the foo function. Let's see how this works.
00:03:12.010 - 00:03:56.534, Speaker A: I'm going to copy paste the code of this modifier and we're going to call this my modifier two, and this one is my modifier one. So if I want, I can also attach my modifier two. And the code of these two modifier will run one after the other. So first it will execute the code of my modifier, and here the placeholder. It will not be replaced by the code of foo, but it will be replaced by the code of the second modifier. And in the second modifier, the placeholder here will be replaced by the code of foo. So the foo function will not be run twice with this.
00:03:56.534 - 00:04:52.410, Speaker A: It will be first the code here of the first modifier, then the code of the second modifier, and finally the code of the foo function. So this is really useful if you want to compose several modifier for a single function. All right, and finally, I'll show you how you can do an example of access control with a modifier. So let's say that in your full function you're doing something a bit sensitive like withdrawing all the ether of your smart contract. Then you want to make sure that not everybody can call this function. So for that you can implement a special modifier that we're going to call only admin and we're going to define a special address admin. Let me get rid of this and I'm going to call this only admin.
00:04:52.410 - 00:05:28.422, Speaker A: Doesn't take any argument and we're going to check that the calling address is the admin. So require that MsG sender equal admin and the error message will be only admin. And so by attaching this only admin modifier to any function, you can protect this function. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 a year. So if you want to learn all of my secrets, you just have to sign up at this URL. Cool.
00:05:28.422 - 00:05:40.900, Speaker A: So now you know everything about modifier in solidity. So we'll stop here, and in the next video I'll show you what a fallback function in solidity. Smart contract. Thanks for watching and see you for the next video.
