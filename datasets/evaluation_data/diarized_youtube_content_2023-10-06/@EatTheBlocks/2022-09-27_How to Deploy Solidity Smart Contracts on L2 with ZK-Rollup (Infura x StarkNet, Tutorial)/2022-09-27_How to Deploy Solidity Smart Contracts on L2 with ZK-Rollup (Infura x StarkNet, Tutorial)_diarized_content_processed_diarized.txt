00:00:00.330 - 00:01:02.302, Speaker A: Alright, in a previous video, Jack introduced Starknet, a permissionless, decentralized EZK rollup operating as a layer two network over Ethereum, where you can scale your DAP without compromising Ethereum's composability and security. Now it is time for a demonstration. We are going to mint an NFT with Starknet. If you're new here, I'm Stefan and on it the blocks we help web two developers get into web3. Now, Starknet contracts are written with the Kro language, a programming language for writing provable programs where one party can prove to another that a certain computation was executed correctly. Hence, Kyro is quite different from a programming language like solidity. So if I'm a solidity developer, how can I actually take advantage of Starknet? Turns out the open zipline team has been kind enough to create some ready to use presets for the most common ERC standards like the ERC 20 and ERC 721.
00:01:02.302 - 00:02:03.470, Speaker A: So we don't actually need to write any car code. Another thing that we'll need is a Starknet account, which is different from an externally owned account like on Ethereum, where your conventional public address derived directly from your private public key pair. On Starknet, an account is represented by a deployed contract that defines the account's logic, and you can still interact with it by signing transactions with your private key. And similar to regular contracts, an account requires to write a stocknet contract, which the open Zeppelin team has made available as well. Now what else do we need? We have the contracts, but we need a way to communicate with the layer two. Well, consensus and Starknet have now partnered and have made available the Starknet API on Infura, which maps a subset of Ethereum JSON RPC methods and allows you to interact with a starknet node or contract. Finally, to make our lives easier, we're also going to use Starknet GS, which is the SDK, to interact with Starknet.
00:02:03.470 - 00:02:33.482, Speaker A: So here's what we're going to do. We're going to create a new web3 access key with Starknet endpoints as well as a new ipfs access key and gateway. Then we'll install our dependencies and deploy our new account. Then we'll found the account to pay for gas and deploy the ERC 721 contract. Finally, we'll mint an NFT and upload the data to apfs. Be sure to have at least node version 16 installed and version eight for NPM. And to follow along with me, you can get the code from the repository.
00:02:33.482 - 00:03:13.630, Speaker A: In the description of this video. Once you have cloned the repository. If you want to contain everything in a virtual environment, you could use virtual of. Assuming you have Python three and virtual of installed, then for example you could do python three valve and the name of your virtual environment. You'll see a folder with the name of your virtual environment appear and then you activate it with source, the name of your environment bin and activate. Once that's done, you can install the packages with NPM installed. And this is going to install the Starknet library, IPfshttp client and ORv.
00:03:13.630 - 00:03:48.550, Speaker A: Let's not forget to add the type module to our package. That isn't so we can do our imports. Then we're going to use environment variables so you can rename the av example file into simply AV. And in this file we're going to need a stocknet endpoint, an IPFS gateway endpoint project id, secret key, and a media. And to get those variables, let's head to Infura. If you don't have an account on Infura, you'll need to create one. Then you'll be able to access the dashboard to create new keys.
00:03:48.550 - 00:04:27.540, Speaker A: The first thing we're going to need is a stocknet endpoint. So you can create a new key on the top right, you select the network, it's web3 API. You name your project and then you can create it. Once that's done, you're going to be able to manage your key right here. And if you go down, you're going to see Starknet. Right now it's on mainnet. I'm going to switch to Gurley and you want to copy this, okay, and back into your down file and you passed it right there.
00:04:27.540 - 00:04:52.794, Speaker A: Let's go back to Infura. Now we're going to need an IPFS gateway endpoint. So same thing, create new key for the network. We are going to choose apfs name, your project, create, same thing. You can manage your key. You scroll down a little bit and into dedicated gateways. You're going to enable it.
00:04:52.794 - 00:05:40.490, Speaker A: You're going to give your subdomain a name, for example Mystarnet storage. But very important, do not preface your subdomain name with ipfs, for example ipfs MyStarnet storage because it will cause some issues with the URL resolution. Okay, so just don't preface with ipfs. Now, I believe this has a five gig capacity. So if it's the first time that you do this, Infuria is going to ask you for your banking information, but you don't have to worry about that because we're never going to go over five gigs. So you're good. Finally, scrolling back up, we can see the project id, the API key secret, the API endpoint, and the dedicated gateway subdomain.
00:05:40.490 - 00:06:20.828, Speaker A: So you can copy the endpoint right here and then back into our code editor. You can pass that right here. Then we need the project id. Copy that back into your code editor, pass it right here, and finally the ipfs secret. Copy this and you pass it right here. You save that and we're good to go. Now, let's deploy our account in the repository.
00:06:20.828 - 00:07:08.820, Speaker A: In the contracts folder, you'll found that the contracts have already been compiled and stored in JSON files, so we can directly use their ABI. To use the APIs, we need to initialize a new provider that's going to allow us to interact with the Starknet network without signing transactions or messages. That's why we created the Starknet endpoint on Infura. So we import provider from the stocknet library and we create a new one with the stocknet endpoint. Next, let's get the account ABI. So we'll import JSON from Stocknet as well as file system to read the JSON file. Then to sign and execute transactions, we generate a private and public key pair with the Stark module.
00:07:08.820 - 00:07:58.846, Speaker A: We can then deploy our account by calling the deploy contract function with the account contract API and the stocknet public key, and we wait for the transaction to complete. Now, this phase can takes a few minutes, so be patient. You'll be able to see your account in the Voyager Explorer as well as the transaction hash. And finally, we can create a new account object. Now let's deploy the ERC 721 contract. So, since we already have the ABI, we read the JSON file. And so at this point, since we just created an account, we do not have the fund to pay for the deployment.
00:07:58.846 - 00:08:49.940, Speaker A: So we can post the prompt right here. The prompt will display your account address, and then you can pass your address in this faucet to send a small amount of l two girly eth to your account. When it's done, you can press enter and continue with the prompt. Then we will deploy the ERC 721. By passing the API, the name of our NFT, the symbol, our account address and public key, we'll be able to visualize the contract in the block explorer. We can then create a new ERC 721 contract object. Then what we'll do, we'll connect the ERC 721 contract to our account contract.
00:08:49.940 - 00:09:44.256, Speaker A: The goal of that connection is to define who will be interacting with the network and signing transactions with the private key. Now we can mint an NFT by calling the mint function with our account address public key and the NFT token id that needs to be converted into the one data type that KrO has what is called a field element or felt. And again, once done you'll be able to visualize the contract in the block explorer. Next, let's upload our metadata to ipfs. So using the personal information we get from infura we can create an instance of an IPFS gateway. Then we upload the media and finally we upload the metadata. Now I mentioned earlier the field element or felt which is the only data type in the kero language.
00:09:44.256 - 00:10:18.268, Speaker A: And this felt is an unsight integer with up to 76 decimals. But the IPFs URI won't probably match that. So we need to shorten metadata URL. So for example, we can create a function to call the tiny URL API with the metadata URL. Now we can update the NFT metadata URI and after a moment we'll see the transaction hash in Voyager. Now your code is ready. You just need to execute it with nodeindex ts.
00:10:18.268 - 00:10:31.264, Speaker A: And this is what you should get. You get your private and public key. Never share your private key. Of course, this is just for demonstration purposes. Then you deploy your account. You found it. You deploy your ERC 721 contract.
00:10:31.264 - 00:10:44.184, Speaker A: You mint your NFT. You upload your image to ipfs. You upload the metadata. You shorten the Uri and you update your metadata. Uri. Sweet. So there you have it.
00:10:44.184 - 00:11:03.660, Speaker A: You have successfully minted an NFT on the Starknet network. If you want to go over that tutorial again with more details you can read the blog on the infura website, link in the description. Hopefully you like this video. If you want to know more about Stocknet you can head to stocknet IO. And with that I'll talk to you in the next one. Bye.
