00:00:00.410 - 00:00:51.806, Speaker A: In this video I'm going to explain what is a test driven development method or just TDD. This video is part of a full course on smart contract testing on Edwox Pro. In this course, I'll teach you how to use the test driven development approach to develop your smart contract with the truffle framework. If you want to have access to the source code of the free episode, go to the website of Edwox Pro and create a free account by clicking on sign up TDD is a modern approach for developing software and is not specific to Ethereum and blockchain. It is used to develop all sort of software. It's important to understand TDD because it's the approach we will use throughout this course. It makes sure that your code is well tested and it's a very popular way of developing software and employers will probably expect you to be familiar with it.
00:00:51.806 - 00:01:32.538, Speaker A: Before TDD, software engineers used to either first write their code and write test after, or not write test at all. Of course, the second case is the worst, but even the first case is problematic. If you write your test after having written the code, you might have forgotten all the edge cases to test by the time you write your test, and it's quite likely that you will write less test and of lesser quality. What is TDD then? TDD is a four step process. First you write your test. Then you run your test and you make sure they fail. Then you write the code to make your test pass.
00:01:32.538 - 00:02:05.060, Speaker A: Finally, you run your test again, and this time they should pass. Every time you add a new feature to your code, you should go through the same process. Of course, it's not possible to always test everything, and sometime you might want to skip some test to trade quality for speed of development. But in general, if resources and time permit, you should strive to follow the process as much as you can. That's it for this video. In the next video, I will tell you the differences between unit and integration test. Ah.
