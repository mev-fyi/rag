00:00:00.170 - 00:00:50.758, Speaker A: Hey, this is Julian and you are on idoblox. And in this video I'm going to show you how you can use Drizzle with react hooks. If you've never heard of Drizzle before, that's a framework to build the front end of your decentralized application. And the way it works is by keeping a local copy of the state of your smart contract and by connecting to this local state, you can very easily build reactive UI that always stay up to date with your smart contract. If you need to get up to speed with Drizzle, you can check out my introduction to drizle in another video link in the description. So Drizzle is great, but its API changed a lot and it made a lot of people very confused. And recently it has added capabilities for supporting react hooks and in the future it's going to be the main API for drizzle.
00:00:50.758 - 00:01:31.290, Speaker A: By the way, the support for react hooks in Drizzle is still a little bit experimental, so it's possible that what you're going to see in this video is a little bit different from the final implementation, but most of it should be similar. So we're going to see how we can combine these react hooks with drizzle. All right, so let's get started with the code. So I'm going to start a decentralized application that's going to use Drizzle and react on the front end. And to go faster, I'm going to use the truffle unbox command. So if you don't know what is truffle unbox, I explain what it is. In one of the first video of this series you can check out the playlist in the description.
00:01:31.290 - 00:02:04.994, Speaker A: So this time I'm going to unbox drizzle box. So on the front end it's going to be react and drizzle. And this will be connected to my smart contract and it will use the truffle framework. All right, so the installation was successful. So now if we look in a folder, we should see all this file and folder. And inside the contracts directory we have already a couple of smart contract that we can use for our example. So the one we're going to use is simplestorage Sol.
00:02:04.994 - 00:02:48.354, Speaker A: That's a very simple smart contract that has a single variable stored data here that's an integer. So we have a function to change its value. So next we're going to go to the front end, which is inside the app directory. So this is where we have a react application that is also connected to drizzle so if you check what we have in the package JSOn file then you will see that we have the react dependency here and we also have the drizzle dependency. By the way, the way drizzle dependency work have been changed in drizzle 1.5. So now they use the scope dependency naming. So you have to add at drizzle the package that you want.
00:02:48.354 - 00:03:31.690, Speaker A: So we need this repackage in our example. So first there is the store package, that's the core of drizzle. Then react plugin that allow you to connect to your react application and that's where it defines custom hooks. And finally, react components are pre made react component that you can use directly to use the drizzle system. So by using this premade component it's actually very easy and quick to integrate drizzle. All right, so now we're going to install all this dependency with NPM install. Okay, and next we're going to go to the SRC directory where we have all our Javascript source file and we're going to go to the main file which is app JS.
00:03:31.690 - 00:04:11.434, Speaker A: So this is the main component of our application and it set up drizzle, but it does it the old way. So we are going to modify this code. Also we're not going to use class based component, but we're only going to use function components because that's the way you have to do it with react hooks. So let's start our cleanup. So we're not going to use the component object from react. We're also not going to use the drizzle provider from react plugin. We're not going to use the loading container of react components because this is not compatible yet with hooks.
00:04:11.434 - 00:04:45.590, Speaker A: We'll have to build one ourselves for this container. We're going to comment it for now. Okay, and let's remove this as well. And let's change the class into a function based component. And there is no render function inside a function component, but we just written the child components directly. So next we're going to instantiate a drizzle object. So let's import drizzle first from the core package.
00:04:45.590 - 00:05:28.070, Speaker A: So that's the store package. So let's instantiate it and we pass it the drizzle option. So drizzle option is where we configure drizzle to watch our smart contract. I explained this in my introduction video for drizzle link in the description. So next I'm going to pass drizzle to the drizzle provider like this. And we also haven't imported the drizzle provider because the one we are using here is different from the other example in the documentation of drizzle. This drizzle provider is specific to the hooks integration.
00:05:28.070 - 00:06:19.958, Speaker A: So first we need to import something that is called drizzle react hooks from the react plugin. And after we need to extract the drizzle provider from the drizzle react hooks like this. So what this drizzle provider will do is it will create a react context where it will put the drizzle object and the drizzle state. And then any child component can very easily access drizzle or the drizzle state by tapping into this context. But you don't have to directly access this context. You can use some hooks that themselves connect to this context so the implementation details of drizzle doesn't leak to your application code. This is all very neat and easy.
00:06:19.958 - 00:06:52.350, Speaker A: We'll see this just after. Next we want to create a loading container. So I'm not going to use the one that is provided by the react components package because it doesn't work yet with hooks. So we're going to build a custom one. But this is going to be super easy. So let's import this component here. So we're going to call it loading container and we're going to nest it below drizzle provider.
00:06:52.350 - 00:07:46.260, Speaker A: Okay, so let's create this file. So this is going to be a react component. So inside this component we're going to check the state of drizzle and if this is not loaded we're going to display a loading message. Otherwise we're going to render the children. So we need to import a hook from react plugging. So first we need to import Drizzle react hooks from the react plugin. So all the hook stuff are inside this object and we import this from drizzle react plugin.
00:07:46.260 - 00:08:32.204, Speaker A: And then we're going to extract a hook called use drizzle state from drizzle react hooks. And this allow you to extract a path of the drizzle state. And it works pretty similarly to redux selectors. I'm going to show you this. So inside our loading container function, let's extract a piece of the drizzle state which is called drizzle status. So first you call your custom hook like this, use drizzle state, and inside you give it a callback where you select the part of the state that you are interested in. So in our case we want drizzle status.
00:08:32.204 - 00:09:16.572, Speaker A: So then we're going to check if the drizzle status is initialized or not. So if drizzle status is initialized, sorry, if this is not initialized, then you're going to return a loading message. Loading. Otherwise we are going to return the children component. So first we need to wrap up drizzle component like this. Otherwise react is not going to be happy. And after we render the children component and we also need to destructure this from the props.
00:09:16.572 - 00:09:57.612, Speaker A: Otherwise react doesn't know what are the children. So automatically when you provide some children to a component, it's going to be provided as prop to your parent component like this. All right, so let's go back to our parent component. And here instead of a self closing component, we're going to give it a child. So let's call this just testing. And now we're going to run the front end because I want to make sure that everything works fine. So let me minimize my screen and I have other terminal window there.
00:09:57.612 - 00:10:32.244, Speaker A: First we're going to start a local development blockchain. So truffle develop. And once this is started we are going to deploy our smart contract to this blockchain with the migrate reset command. Okay. And now we're going to start the front end. So let's go to the app folder and we're going to run the NPM start command. We have a couple of compile errors.
00:10:32.244 - 00:11:02.656, Speaker A: So let's fix this app. Js lite in eight, we are missing a from here. Okay. In second, I think we're also missing the closing tag of loading container here. Yeah, let's save this. Yeah, the arrow are fixed. So now let's go to the front end at localhost columns 3000 and we can see our message.
00:11:02.656 - 00:11:27.764, Speaker A: Just testing. So if we reload quickly the page we probably see very very quickly the loading message. Yeah, so loading and then just after just testing. So yeah, everything is working cool. So this is just the setup. But I want to show you how we can actually interact with our smart contract. So let's go back to the code and we're going to build another component spatially to interact with our smart contract.
00:11:27.764 - 00:12:02.720, Speaker A: So this component will be able to read and write to the smart contract. So here, let's uncomment this line. My container, actually, let's call it my component. And we're going to replace our just testing thing here by my component. Okay. And we're going to open this file because actually with the truffle unbox drizzle command, it already created some code for this file. So with the old API of drizzle that's how you can interact with your smart contract.
00:12:02.720 - 00:12:56.580, Speaker A: So you import here some ready to use react component and after you use them. So here you can read all the accounts and after with contract data you can read data from the spot contract and with contract form you can write data. So we are also going to use these ready to use components, but we're going to use another version which is compatible with the hooks. So for now let's just get rid of this one and let's do some cleanup actually. So here there won't be any accounts that is passed as props. Let's remove everything. Okay, so we're going to import the hooks from react plugin.
00:12:56.580 - 00:13:46.790, Speaker A: So drizzle react hooks from drizzle react plugins. We already did this before, so you should be familiar with this. Now then we're going to extract custom hooks from drizzle react hooks. So we need use drizzle because we want to access the drizzle object and we need use drizzle state to access the drizzle state. Okay, and inside our component here. So first let's replace this parentheses by curly braces because we don't want to return directly but we have some Javascript code before. So here we have an explicit return this way.
00:13:46.790 - 00:14:37.916, Speaker A: Okay, and now we can have some Javascript. So first we're going to extract the drizzle object this way with use drizzle. So use drizzle hook doesn't just return drizzle but it also written all the stuff. But we are only interested in the drizzle object and for the drizzle state this time we are interested in the whole state. We don't want to pick anything in particular. So to return the whole state the way you do it is you still pass a callback function, but it just return the whole state like this. Okay, so next we're going to display our ready to use component coming from react component.
00:14:37.916 - 00:15:30.570, Speaker A: So because we want the one that are compatible with hooks, we're not going to take them directly like this. So account data, et cetera, et cetera, but we're going to get them from another place in the react components package. So we need to fetch new context components and after we need to extract the component that we want. So let's start by the most simple one that just read the account data. So it's just called account data and let's render it. So account data and we need to pass it a couple of stuff. So first we need to pass it drizzle, then we need to pass it the drizzle state.
00:15:30.570 - 00:16:04.684, Speaker A: Then we need to pass it the accounts. So that's something that you can read on the state. Yeah, that's a bit weird that we have to pass state and state accounts. But it's like this. Then we need to tell this component which of this account we want to read because they're going to be several. So account index and we specify, for example, want the index number one. Okay, so let's see if everything compiles.
00:16:04.684 - 00:16:25.464, Speaker A: So it tell me that you can't find react pluggings with the s. That's because there is no s, Julian. So let's remove the s here, save the file. And it seems to be working. So let's see in the front end and yes, this is working. I can see my account balance here. Cool.
00:16:25.464 - 00:16:57.428, Speaker A: So let's go back to the code and let's continue. So next let's read from the smart contract. And for this we're going to need the contract data component. So we're going to extract it from new context components. So contract data, we are going to display just below count data. So it also take drizzle and drizzle state. So we're going to copy paste this.
00:16:57.428 - 00:17:38.620, Speaker A: Then we need to specify which spot contract we want because drizzle can manage several spot contracts at the same time. So we give a string here. So the contract we want is simple storage and we also need to give it the name of the method that we want to read. So we want to read a method called store data so that they're just a getter for the variable of the same name. And if you have some argument for this method, you can specify them with the method Aug prop. So you would do this by opening JSX tag here. And you will put an array.
00:17:38.620 - 00:18:03.800, Speaker A: So here, my first Aug, my second Aug, my third aug. Then you close your array, close your JS tag and you're good. But we don't have anything for the store data method. Okay, so let me save this. No error. And in the front end we can see the value of store data appearing here. So it's working fine.
00:18:03.800 - 00:18:34.284, Speaker A: Cool. So let's go back to the code. And the last thing is to be able to write to the smart contract. So we can do this with the contract form component. So let's add it, we extract it, contract form, then we render it. So we need to pass drizzle, then the name of the contract. So simple storage, then the name of the method.
00:18:34.284 - 00:19:10.540, Speaker A: So the method we're going to call is called set. Okay, so let's save this no compilation error. Let's go to the front end and now we can see our form. So let's try to change the value of our variable in our smart contract. For example, ten let me click on submit and yeah, the UI automagically updates. Wow, that was so easy. And actually it could be even more simple because if you check inside the code so we have to pass drizzle and drizzle state to our component here.
00:19:10.540 - 00:20:06.672, Speaker A: But that's not strictly necessary because this component themselves, they could use the use drizzle and use drizzle state hook, and if they do so we don't need to provide drizzle and drizzle state. So as I said before, the support for hooked in drizzle is still experimental and incomplete. So probably that in the future these components I can data contract data and contract form that will be even more integrated with hooks and you won't have to pass drizzle and drizzle state. By the way, if you are interested in decentralized application, you probably want to become a blockchain developer. And I have prepared a free training to teach you how you can do it and how you can get your first blockchain job. So if you want to receive all my tips, just register for this free training. Okay, that was it on this tutorial on how to use drizzle with react hooks for your decentralized application.
00:20:06.672 - 00:20:16.428, Speaker A: If you have any question, ask them in the comments down below. Thanks for watching it, double ox, and I'll see you for another video about blockchain or ethereum. Bye.
