00:00:17.800 - 00:01:03.524, Speaker A: Alright, I think that we are live. Can you guys hear me? Yes. Can you guys hear me? Well, I think. Okay, so we gonna get started. So today I'm gonna show you how to create an es 20 token on the base blockchain. Base is super popular right now, so the demand for token on base is going to explode. So no matter if you want to create your own token or you want to create a token for someone else, you're going to have a lot of demand.
00:01:03.524 - 00:01:36.462, Speaker A: So for those who are new here, I'm Julian and I've been a blockchain developer since many years. I use this technology on a day to day basis and yeah, so we could get into it. I see some activity in the chat Tong Nepali ragu. Giovanni doctor remix. Josh, Seraia. Hope you're feeling better. Thanks, but I'm not, unfortunately.
00:01:36.462 - 00:02:16.136, Speaker A: But yeah, still a little bit sick. But that's okay. That's okay because we have something important to talk about today. So before we get started very quickly, let me remind you that we have our solidity bootcamp that is starting very soon. So the registration for the bootcamp is going to end tomorrow. So you have less than 24 hours to register. So if you are interested to become a solidity pro and be job ready, check out the bootcamp.
00:02:16.136 - 00:02:47.982, Speaker A: In one month we can turn you into a pro. Alright, so let's move on to our topic today. So deploying a token on base. The first of all, what is base? So base is a blockchain, blockchain that is connected to Ethereum. And currently there is a massive momentum on base. So here you can see the total value locked for different blockchain. And base here in purple is skyrocketing.
00:02:47.982 - 00:03:21.374, Speaker A: This is absolutely insane. Why is this? Well, already talked about this this week, but the TLDR is that it belongs to Coinbase and Coinbase has the full stack. Basically they have the exchange, they have, they have the wallet, they have the blockchain. So they're really well positioned to have a lot of people on the blockchain. So technically base is what we call l two. So l two is a secondary blockchain that is connected to Ethereum. And so all of this is like technical name.
00:03:21.374 - 00:04:05.610, Speaker A: But what's important to understand is that you benefit from the security of Ethereum, but at a much cheaper, cheaper cost because the transaction fee on base are much cheaper than Ethereum. So that is the big reason why a lot of people are flocking to base. So under the hood, base uses the same technology as Ethereum. Okay? So that means if you know how to create tokens on Ethereum, you can also do it on base. And that's awesome because you don't need to relearn a lot of different tech. This is super, super interesting. So now let's get into the technical details.
00:04:05.610 - 00:04:58.384, Speaker A: Okay, so a token is technically what we call a smart contract, and a smart contract is basically a small program on the blockchain. So, you know, just the name. Smart contract isn't really a great name because it's smart contract, it's not really smart, not really a contract, it's just a program and the different programming language, but the one that you need to focus on is called solidity. So here you can see some solidity code. This is the documentation of solidity. And so if you are used to JavaScript, it looks a little bit similar, but it's actually quite different. So we are going to use this program, programming language, solidity, to create our token on base.
00:04:58.384 - 00:05:39.844, Speaker A: But the next question is, what is a token? Good question. So here you can see on coinmarket you have the top crypto, and some of these crypto are actually token, like tether. This is a token, what else? USDC. Technically this is a token, and many of these assets here are actually tokens that token. This is implemented as a smart contract. And this smart contract has to follow a certain standard that is called ERC 20. So you can find the documentation publicly here.
00:05:39.844 - 00:06:41.748, Speaker A: And so it has to implement a couple of functions here for your smart contract to be correct, but these only define what we call the function signature. So basically the interface, it's like a high level specification, but it doesn't give you all the details. It's up to you to code your ArC 20 token like you want, as long as you respect some rules, if you want, that are, that are described by this document. And so everybody can code their own s 20. But it's actually quite dangerous to do this because it's very easy to make a mistake. And you know, on the blockchain, when you make a mistake, it can be a disaster because hackers can come and there's a security hole, they're gonna drain all your contract, they're gonna steal all the coin, they're gonna do a rug pull, all sort of nasty stuff. So you don't want this to happen.
00:06:41.748 - 00:07:15.344, Speaker A: And every time you code some solidity, you wanna make sure it's safe. So that's why some people created what we call a library. So it's basically like a toolkit if you want. And so you can also see this as some ready to use code. So this is a solidity library, open zippling that you can use to implement ERC 20 tokens. They have other functionality, but most people mainly use openzeppeling for creating. Yes, 20 token.
00:07:15.344 - 00:07:57.690, Speaker A: All right, so now you understand the high level of what is a spot contract, what is solidity? So now we can do the coding. All right, so for that we're going to use a website that is called remix, is called Remix, that's basically a tool to code solidity. Technically this is what we call an ide. If you're not a developer, you can forget about this. This is basically just a tool. Okay? And what's great is that you can load remix directly in your web browser. You can find the address here remix dot ethereum.org
00:07:57.690 - 00:08:33.524, Speaker A: dot. I'm going to put this in the chat and yeah, so with remix you have nothing to install. It's super easy. So to create your first smart contract, you go here in this menu, the file Explorer, we're going to click on create new file and we're going to call our smart contract token. And the extension for solidity is dot Sol. Alright? And so after here you go, code your smart contract. So I'm going to zoom in a little bit because I think it's a little bit smaller.
00:08:33.524 - 00:09:27.044, Speaker A: Small, let me see, should be enough like this. Okay, so are we going to code this by hand? We could do it, but I already explained we're going to use open zippling and even if we want to use open zip link we can actually go even faster. And we're going to use chat GPT to ask us to create the code for us. So code a code, an ERC 20 token with solidity and open zippling. All right, so let's see what is gonna do. Blah blah, blah, blah, blah blah. Okay, I don't care, I don't care, just give us the code.
00:09:27.044 - 00:10:01.646, Speaker A: So you have to be careful with chat GPT because sometimes it gives you some outdated stuff. For example, here you say, yeah, create a new truffle project. So truffle is an outdated framework for spot contract, you shouldn't use it anymore. And here, there is the interesting part, the code. So we're going to copy this, we're going to remix, okay, we're going to paste this and here we have our code. So we're going to decipher this line by line. Okay? So first this is what we call a comment with two slash at the beginning.
00:10:01.646 - 00:10:20.406, Speaker A: You can just ignore that. Now this is the pragma statement. So you identify the version of solidity. So here we want version zero 8.0. Usually you want the latest version. So right now I think we are at zero 8.25. Let's check this here.
00:10:20.406 - 00:10:46.838, Speaker A: Yeah, 8125. Correct. After we're going to import the library that we're going to use this go open zippling. And why we have this contracts token, etc. Is because this is the structure of open zippling. So you have different subfolder in open zippling and one of them is called yas 20. Inside there is this solidity file called yas 20.
00:10:46.838 - 00:11:19.884, Speaker A: And so we want to grab it. And actually if you want to read what is in this file here. Yes, 20, you have to see, you have to go to the website of open zip link. So what we can do is open ziplink, GitHub and open zipplin contract. So we go to this. So if you're not a coder, this is GitHub and this is where we put the code. Where, where we put the coder, upload the code.
00:11:19.884 - 00:11:42.884, Speaker A: Okay. And so now we're going to go into contracts directory. We're going to go in token, we're going to go in ERc 20. ERC 20 here. Okay, so here you can see some solidity code. So don't worry, we're not, we don't have to understand everything. But I just want to show you a couple of stuff.
00:11:42.884 - 00:12:10.756, Speaker A: So here for example, this is how we track the balances of different user. Let's keep going. Here you have the name and the symbol of the token. And here there are some function that we already found in the specification, like name symbol. So here if we go into specification, you can see those function name symbol. So there is just what we call the function signature here. There is no definition.
00:12:10.756 - 00:13:04.634, Speaker A: So that means this part has to be exactly the same. But what is inside the function, that is up to you. So here we can see that the function signature matches the specification of arc 20. All right, so we're gonna get back to, to remix. So here we import this library, okay? And after, in this part, this is where we define our smart contract. So we use this contract keyword, we name our contract and we're going to inner it in a, it means that I'm going to take this as a base. This is going to be my base, okay, just like if you make a pizza, okay, and then you're gonna have the base of the pizza and then you put all the other ingredients.
00:13:04.634 - 00:13:27.436, Speaker A: Cheese, what else can you put in a pizza? Macaroni? I don't know. Ananas. Pineapple. Sorry, I'm speaking French now. Pineapple. I know some Italians will be really angry if you tell them you put a pineapple on a pizza. But anyway, so this is the base of the pizza, okay.
00:13:27.436 - 00:14:05.114, Speaker A: And so with this we already have a lot of functionality and that means most of our code is already ready. So the only thing we need to do is to configure the contract. And so how we do this with this constructor. So this is a special function that is called only one time, it's when we first deploy the contract, this function is going to be called. And so we pass what is what we call the initial supply. So that's the number of coin that's going to be minted that our token will have. So we can decide whatever we want, 1000, 1 million, 1 billion.
00:14:05.114 - 00:14:51.312, Speaker A: And we also going to pass some other argument here. So the name of the token, my token, and then the symbol of the token. So this is what we will see on Coinmarketcap, for example, on a different exchange, we will see these tickets is like small abbreviation to easily identify the token. And after we are going to call one of the function of yes, 20 mint. So actually mint is defined in yes 20 of open zippling. Okay, so even though we didn't define this function, we can still call it and we for we pass it to argument the address of the sender. So the address that deploy this contract and initial supply.
00:14:51.312 - 00:15:33.732, Speaker A: So that means the person who deployed a contract, usually that's going to be the developer. This person is going to get all the initial supply and then it's up to the developer to distribute this token. So there are many mechanism to distribute tokens, ICO, etcetera. This is a simplified version, okay? Just for this example, we're going to keep it simple, but in reality it can be a little bit more complex than this. Okay, so here we have a really, really basic contract. And next we want to deploy it. So to deploy it we will need what we call a wallet.
00:15:33.732 - 00:16:19.382, Speaker A: Okay? So in the wallet we are going to use is called metamask. So a wallet is basically, you can see it as your password manager, okay? Inside your wallet you have a secret that we call private key. And with this, this is how you can interact with the blockchain and how you can send transaction. And when we deploy a smart contract, this is a special kind of transaction. So we're going to install metamask. This is technically, this is a chrome extension. So you go to the chrome web store and you search metamask and you install it, you just have to click on it.
00:16:19.382 - 00:16:59.034, Speaker A: And after you see a little fox here in your extensions here. So you see this fox with different account, account one, account two, etcetera. So by default is going to create the first account and you're not going to have any money in it. So it's up to you to send money to this account and you can create as much as many a new account that you want. And so you can see that each of this account is identified by a weird number here. So zero x something. Okay let's go back to remix here.
00:16:59.034 - 00:17:53.456, Speaker A: Yeah so here this number, zero, x six f etc. So that is the address that's basically like your bank account number. Okay. And so we are going to deploy the smart contract from this address, from this bank account number. So we, yeah so here we were in remix and we need to, so there are different network in, sorry, metamask, that different network in metamask you have Ethereum, Mainnet, a couple of other one. And we are going to deployed on base testnet. So before you deploy on the base, on the real base network that we call Mainnet you need to deploy it first on another kind of network that we call testnet.
00:17:53.456 - 00:18:44.270, Speaker A: So it's also a public network meaning that there are several computers that are connected but it's not the real one. And this is used by developer who want to try out new things before you deploy to production. In, even in web two you also do this, you also, you always do a sort of test deployment where you test, you make sure that everything is working fine and then you do the real deployment. So here I'll test deployment will be on basetest. Net. And if anything breaks it doesn't matter because it's not the real network and we won't lose any money on it. But because by default this network is not in metamask what you need to do is to click on add network, alright? And here so they have some predefined network already but Basetestnet is not in them.
00:18:44.270 - 00:19:15.554, Speaker A: So you click on add network manually. This is at the bottom and here you're gonna have to fill the different, different parameters. So here base testnet then new RPC URL. So let me see, I have it somewhere. Yeah. So in the documentation of base you can find all of this info. So for the URL we're gonna select this, it's called RPC endpoint.
00:19:15.554 - 00:19:57.604, Speaker A: Okay where is it? I think it's here. New RPC endpoint chain id. So that's this one then currency symbol, it's ETH and block explorer. It's gonna be. Let me see, where did I put it? Yeah, this one, base sepolia, block scout. So block explorer, that is basically, it's the equivalent of a web browser, but for the blockchain. Okay, so you can, this is a tool that you can use to inspect the blockchain and find transactions.
00:19:57.604 - 00:20:43.994, Speaker A: All right? And so after you click on save. So me already added it, so I can't, I can't click on save, but here I'm going to cancel. And after, once you do this and you click on your metamask, you will see the base testnet. Okay? So that means you've added it the network properly. All right, so once we did this, next step is to get what we call some testnet ether. So when you're going to deploy the contract, you're going to pay some money. You need to pay the miners and this miners, but it's not going to be real money because we are on testnet.
00:20:43.994 - 00:21:19.704, Speaker A: So this sort of fake money, this is what we call testnet ether and you cannot buy it. The only way to get it is to use what we call a faucet. So this is a special kind of website that is provided by some, some important actor in the community. Like here we have the faucet of quicknotes, quicknote, that is an API for blockchain developers. So it's basically the provided service to let you access the blockchain more easily. And they also provide some stuff for free. Like here are the faucet.
00:21:19.704 - 00:21:44.332, Speaker A: So you go, you go to the full set of sepolia. So I'm gonna put this in the chat. And after what you're gonna do, so you're gonna connect, you're gonna connect the wallet. Okay. Gonna click here and here, connect Metamask. And after, so you select base Sepolia. You're going to put your address here.
00:21:44.332 - 00:22:12.426, Speaker A: So let me see where I put my address. So here you select the correct account copy to clipboard. You go there, you click on continue. And there is a little caveat. Okay, so super annoying, but they do this to prevent spamming. So if you just do this, it's not going to work. First you need to have some money on Ethereum mainnet.
00:22:12.426 - 00:22:24.414, Speaker A: Okay. And exactly, you can see it here, 0.001 ETH. Okay. It's almost not visible. So let's go in. Remix.
00:22:24.414 - 00:22:57.098, Speaker A: Yeah. You need this amount on Mednet. So you buy some ether and you transfer this amount on this address. You won't need to spend this amount, but you will need to have it on Mainnet. And after that, click on continue. And you're going to see this screen and it's going to show you a transaction hash. A transaction hash is basically an identifier for your transaction.
00:22:57.098 - 00:23:20.876, Speaker A: This is a special number that, a special string of character that start with zero x. And you can identify a transaction. And so to identify a transaction, you will go on what we call blockchain Explorer. So I explained this before. That's a basically like a web browser, but for the blockchain. And you're going to put the transaction hash here. So.
00:23:20.876 - 00:23:45.104, Speaker A: Okay, let me just. Or if you can click here directly, it will take you actually to the, the correct place. And here is transaction detail. All right. With the transaction hash, success means it worked from their address to our address, your x six something. And they sent us 0.05 ETH.
00:23:45.104 - 00:24:03.624, Speaker A: So that is not real ETH. Okay? You didn't find a magical, you didn't find a loophole in the system. Okay? I can see some guys in the chat. Oh, it's crazy. We can get some free Ethan. No, no, no, that's, that's destnet. But it will still be useful to do our test deployment.
00:24:03.624 - 00:24:42.984, Speaker A: So what we're going to do once we have this is that we going to do our deployment. So we are going in remix. Then we're going to go in the tab deploy and run transaction. So first we're going to do a test deployment locally. With remix it's possible to deploy a contract on a so called local blockchain. So that's a blockchain that is just in your web browser. So it's only for testing even before testnet is one level before testnet.
00:24:42.984 - 00:25:11.468, Speaker A: So you don't even need any sorry, you don't even need any testnet ether here because this is a sort of imaginary blockchain. We can do whatever we want. So remix is going to create some magical money. So here, for example, remix has an account called zero x five B something. And we have almost 100 ether in it. Again, this is not real ether. So we're going to deploy our contract.
00:25:11.468 - 00:26:02.932, Speaker A: So we need some input because in a constructor we have this initial supply argument. So let's just put 1000 here, okay? And by the way, 1000 so that, you know, it's not, it's not what you think. Okay? Because the, we have a system of decimals in smart contracts, so in tokens. So basically when you want to transfer one token, you don't actually transfer one token, but you, you, you have to transfer, for example, one time ten power 18. So here for the supply, it will probably be a huge number, something like this with many zero. And you can calculate this yourself. But here, let's just keep it simple.
00:26:02.932 - 00:26:31.366, Speaker A: And we're just going to put 1000, right. So we click on deploy. You can see that something is happening here. So that's a transaction, there's a green checkmark, means it was successful. And here if you click here, you can expand that part and you can see a few buttons. And so those buttons allow you to interact with your deploy smart contract. So here you can see that our smart contract, which is our token, basically has an address.
00:26:31.366 - 00:26:54.804, Speaker A: So you can copy it here. So this is smart contract address. And we can interact with it. We can call decimals. So 18, that's normal because open zippling, give you 18 decimals name, it's called my token. This is where we define symbol MTK and total supply 1000. This is what we inputted.
00:26:54.804 - 00:27:25.764, Speaker A: So everything is normal. All right, so once you've done this, I'm going to clear this. The next step is to do the actual deployment to testnet. So now you're going to go in environment, you're going to click on injected provider and it's going to connect to metamask. So here we're going to select the account that we want to connect to. So account two where we have our testnet ether, we click on next. All right, it's connecting.
00:27:25.764 - 00:28:14.648, Speaker A: And after that we are going to do the deployment again. So 1000, we click on deploy and, okay, so, so yeah, let's try to send this a gas estimation fail. I don't know why that's the case, but let's try anyway. So confirm transaction, about to create a transaction on main network. So here, I think remix, give you a wrong info. It's not on main network, it's on testnet. But anyway, let's click on confirm and so we'll see the pop up from metamask.
00:28:14.648 - 00:28:55.744, Speaker A: Okay, so it's going to ask us. So let me see what's the problem here. Okay, so the problem is that even on the testnet of base, even the testnet is, oh, why is it trying to do it on ethereum mainnet? Okay, okay, I think, I think there is an issue guys. I don't know. So let's reject this. Let's go back and we didn't select the proper network, okay, typical noob mistake. Oh, I'm ashamed.
00:28:55.744 - 00:29:10.902, Speaker A: Typical of no mistake. Okay, so step one, you select the proper network, okay, basetest. Net. Then step two, make sure you select the correct address. Okay, that's the, that's the case here. Alright. So let's try again.
00:29:10.902 - 00:29:40.882, Speaker A: Now deploy. So now. Okay, now it seems it makes more sense. So we can see here that it's going to do this on base testnet estimation fee $5. But that's not true because that's, that's like just a theoretical price. But we're not really gonna pay that because that's testnet ether. And in terms of ether, so Max fee will be 0.001
00:29:40.882 - 00:30:03.380, Speaker A: and that's okay because we have 0.05 so we have enough. So we're gonna click on confirm. All right, let's go. And now you can see that below, it's going to say creation of my token pending. So it's going to take a bit more time compared to when you do it locally. And that's very normal.
00:30:03.380 - 00:30:32.344, Speaker A: But that's because when you do it locally there is no need to wait for another computer on the network. But in this case we are interacting with the network. So is going to take some time before our transaction is mine, at least a couple of seconds. And so here we see that the transaction was mined. So that's great. And so we can click here to see more detail. Okay, so let me expand this.
00:30:32.344 - 00:31:04.736, Speaker A: Let's expand this. Okay, so here we will see a transaction hash. Let's click here. And now we are going on the explorer of base testnet. Okay, so base sepoya dot blockscan.com, they're going to put our transaction hash and it find it. And that is the proof that the transaction actually happened.
00:31:04.736 - 00:31:35.264, Speaker A: Okay, so remix didn't just tell you some bullshit. Here you can see in the blockchain Explorer we can see this transaction and it was successful. And here it created my token contract, my token. Okay, so let's click on it. Token name my token. Yeah, it's very, very good. So if you click on contract, unfortunately what you see is unreadable.
00:31:35.264 - 00:32:20.626, Speaker A: Here what we call the deployed bytecode. So that's, this represent the code of your contract. That's because on the blockchain we don't actually, the blockchain doesn't, the base, the base blockchain and ethereum, that's the same. They do not know what is solidity because solidity is compiled to a low level, a low level code that we call byte code. And there's basically some, some figures here. It's not very human friendly, but the blockchain can understand that. But if we verify our contract that means if we provide the solidity code to the blockchain exporter here, you can see there's a button called verify and publish.
00:32:20.626 - 00:32:57.454, Speaker A: If you do this operation after, you will be able to read the actual code, the actual three DT code here. And that, that is very important because users, they want to see this user before they buy your token. They will go to see on a website like this if your token is real or if it has any sort of loophole. So nobody is going to buy your token if you didn't verify it. So we're not going to do this step, but in a real deployment you will have to do it again. I mean, you'll have to do that. All right, so yeah, everything worked fine.
00:32:57.454 - 00:33:34.774, Speaker A: And so there is a last step. We're not going to do it here, but I'm going to explain it to you. So what, what about if you want to deploy to base main, net, the real network? So the steps are almost exactly the same. The only difference is that you will need to have some real money in your, in your base, in your base address. So that means you will go on the bridge between Ethereum and base. And this is this website here, you're going to select how much ether you're going to transfer. For example, one ether connect the wallet, it's going to connect to Metamask.
00:33:34.774 - 00:34:04.094, Speaker A: And so it's going to send some money from your Ethereum account to your base account. And after, once you have enough money on your base account, then you can do the transaction. So you will go in remix. So first of all, here you will select, you will add the network. Let me see the base mainnet. Here you can see it, you click on add. Okay.
00:34:04.094 - 00:34:38.814, Speaker A: Then once it's added, you're gonna transition to base mainnet. You select the proper address, you go to remix, and here you make sure it's injected, provider click on deploy. And this time it's gonna do the deployment on Mainnet. So exactly the same thing except that you spend some real money. Okay, so now we are going to do the q and A. But first, brief reminder. So we have the solidity bootcamp.
00:34:38.814 - 00:35:22.314, Speaker A: That is, the enrollment is closing in less than 24 hours. So if you want to become a professional blockchain developer, register for the bootcamp. FYI, the price is going to increase at each new cohort. So I recommend if you can afford the bootcamp now, it's better to take it now because it's going to be more expensive later. So what we saw in this live stream, this is quite basic. If you want to be a professional three DT developer, there are still many things to learn, like for example, yield, gas optimization, security, etcetera. So we are going to cover everything that you need to know in this bootcamp.
00:35:22.314 - 00:35:52.766, Speaker A: All right, guys, so now let's see what we have in the q and A. All right, ThX. Hey, Julian. New stream schedule? I don't know yet. I'll try. What is sure is that I've been very absent from the channel the past few months because I was really busy preparing the bootcamp. But now that bootcamp is a little bit more structured, I have more time to be on a YouTube again.
00:35:52.766 - 00:36:18.302, Speaker A: So I definitely spend more time. And yeah, if I can, I'll maintain this schedule and even. Why not doing, doing it from Monday to Friday, possibly, yeah, there will be more. All I can say for now is that there will be more video from me from now on. That's for sure. All right, what we have here, Ragu, is gas fee. Same as.
00:36:18.302 - 00:36:53.514, Speaker A: Yes, 20 or less than base. So on base, the gas fee will be less. Yeah, that's the whole point. Adai, I have a question. How to burn the liquidity. Can you show it to me? So liquidity is once you have your token that is deployed, you basically you have distributed the token to the different people. What, what you can do is burn what we call the LP token.
00:36:53.514 - 00:37:23.730, Speaker A: So if what you can. Okay, okay, let me, let me rewind this. Before, before you distribute the token, what you can do is you provide all the liquidity to an exchange, then you get the LP token. So when I say you, I mean you as a developer, you get all the LP token and then you're going to burn all these LP tokens. So you're going to send them to some address that nobody controls. And after people can just buy the token from the decentralized exchange. And that's it.
00:37:23.730 - 00:37:42.236, Speaker A: So this is what we call burning liquidity. All right, what else we have? Zexcol. Hey, the blocks. Thank you for this information. You're always super helpful. Thanks, man. Devon, long time no see.
00:37:42.236 - 00:38:16.024, Speaker A: Cool guts. Replica. How do you incorporate native token to negate gas fee? I don't know what you mean. There is no way to, to make it free. People will always have to, to pay for gas fee unless you build your own blockchain. All right, Constantin, is it possible to set the automatic lock liquidity pool in the code? Let me see. Can you do that? You could.
00:38:16.024 - 00:38:48.376, Speaker A: Let me see. How would you do that? So you could create a function that when it's executed send the liquidity to uniswap, for example. And then when you receive the token back, it. It burned the token. Yeah, you could do it. But the thing is, you would still need a human to trigger this transaction. So I'm not sure there is a lot of benefit of doing this versus just doing it manually.
00:38:48.376 - 00:39:42.854, Speaker A: But yeah, in theory you can do it. Right? Zxcode, that would be something cool to add to my cv, that bootcamp. Yeah, that's the point is that to make you job ready with this boot camp. All right, the files. Can you make adjustable fee in a contract to prevent snipers on token launch? So let me see. What you can do is you can prevent wells. So for it, you cannot, for example, you can say, okay, the maximum transfer is something like, let me see, how would you prevent wells? You could refuse.
00:39:42.854 - 00:40:11.194, Speaker A: You could block a transfer if the recipient has already a certain amount. So let's say the recipient has like 10% of the supply. Then this recipient cannot receive money anymore. So it's not exactly what you're saying, but. But to prevent sniper. So what I. What I just said would help because a sniper wouldn't be able to snipe too much.
00:40:11.194 - 00:40:31.032, Speaker A: Too much of the token. But there are other things that you could do. But I don't have at least all I can think of for now. Constantin. That's. It's better to send liquidity to locked lp manually. This is how I would do it.
00:40:31.032 - 00:41:02.336, Speaker A: I wouldn't bother to create a function for that. Alright, guys, so there is no more question. We are going to stop here. So yeah, reminder, if you want to get your career, if you want to get started for your career of solidity device, check out the bootcamp. You have 24 hours to register. Alright guys, so thank you very much and I will see you next week. Have a good day.
00:41:02.336 - 00:41:03.064, Speaker A: Bye everybody.
