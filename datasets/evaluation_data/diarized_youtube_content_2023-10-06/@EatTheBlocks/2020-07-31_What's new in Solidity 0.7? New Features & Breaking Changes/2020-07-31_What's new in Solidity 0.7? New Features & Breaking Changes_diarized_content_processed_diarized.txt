00:00:00.410 - 00:00:39.626, Speaker A: A couple of days ago, Solidity Zero seven was released. It came with a couple of new feature and backward incompatible changes. As blockchain developer, it's super important that you stay up to date. So in this video I'm going to go over the main changes introduced by Solidity zero seven by giving a code snippet with the old and the new syntax. This is not a video for total beginners. If you don't already know solidity, I recommend to first follow my playlist on solidity. If you don't know me, I'm Julian and on my channel idoblox, I teach blockchain development and how to find your first blockchain job.
00:00:39.626 - 00:00:54.142, Speaker A: Before we continue, quick announcement. I'm working on a course on advanced solidity, so if you want to receive exclusive previews and be notified as soon as the course come out, make sure to register with the link down below.
00:00:54.276 - 00:01:25.960, Speaker B: So if you want to experiment with solidity 0.7 you can use remix, the online IDE for solidity. And first you need to change the solidity version to 0.7. And so after I've prepared a couple of spot contract to illustrate the difference. So first we're going to focus on external function call. So here we have two different spot contract. So from this spot contract we want to call this one.
00:01:25.960 - 00:01:57.474, Speaker B: So the first step is to create a pointer to the other spot contract. So that's how you do it. So this is exactly like before. However, when you want to call a function on this spot contract, and at the same time you want to specify how much gas you forward and how much ether you send. If you send any ether. So the syntax will be a little bit different. This is the old syntax here, so the syntax is not super easy to understand.
00:01:57.474 - 00:02:52.850, Speaker B: First you need to reference the function, then here you specify the gas and the value like this, and finally you specify the arguments that you want to pass to the function, but now it's to be different. So you specify the function you want to call like before, but now to specify gas and value, you use this notation, and after you pass the arguments like before. Next we're going to see the changes for building variables. So if you want to reference the current timestamp before you were able to use the now keyword, and that was exactly the same thing as blockdone timestamp. But h three t 0.7 you can only use blockdone timestamp now has been removed. And the reason why they made this change is that some people were a little bit confused with the meaning of now.
00:02:52.850 - 00:03:37.746, Speaker B: So in a block on Ethereum, you can have several transactions that execute the same smart contracts or transaction, ABCD, et cetera. But since all these transactions belong to the same block, the value for now will be exactly the same. But you might think that it might not be the case. So if now we use block timestamp, it makes things a little bit more clear. Next we have the introduction of a new built in variable called GUI. So if you want to specify a gas cost, you can say for example 20 guay. Before if you wanted to do this, you had to do some calculation and that also mean that you cannot use GUI to name anything.
00:03:37.746 - 00:04:14.238, Speaker B: So variable function, et cetera. Now this is a reserve keyword. So next, for strings it's possible to use Unicode, so you have to prefix your string with Unicode and after inside you can insert some emoji, for example. So that's pretty sweet. Next, for constructor in three t 0.6 you needed to use the public keyword, but now you don't need to use any keyword, just constructor, and that's fine. And that kind of makes sense because it seems a little bit redundant to use this public keyword before.
00:04:14.238 - 00:05:17.570, Speaker B: And if you want to create a spot contract that we cannot deploy. So if you want to create a base class, for example for another spot contract that inherit from it. Before you needed to make your constructor internal, but now you add the abstract keyword to your contract and that means that we can't deploy this contract and can be used as a base class. So next we're going to see what has changed for inheritance. So here we have a child and a parent contract, and the child inherit from the parent. And before if you use the using keyword in the parent, then the child also inherit from this using keyword. So if you don't know what using, that basically allow you to modify some built in type and add some methods so the Safemass library is used for integers so that we can do safe addition, subtraction, et cetera.
00:05:17.570 - 00:05:28.674, Speaker B: And now if you inherit from a parent contract that has a using keyword, and you also want to use this using keyword, then you need to repeat it.
00:05:28.792 - 00:06:02.700, Speaker A: So there are still some other changes introduced by solidity 0.7, but the one I show you are really the main one. If you want to have the full list, I put a link below where you can see all the breaking changes. This is from the official documentation of solidity. So where do you go from there? Well, the next step is to get into advanced solid solidity and as I mentioned at the beginning of the video, I'm working on a course on advanced solidity. So if you want to be notified when these course come out, make sure to register with the link down below. Thanks for watching.
