00:00:00.330 - 00:00:23.386, Speaker A: You. Hi, guys. Welcome to the 10th episode of it, the blocks. I am Julian, your host. And today we're going to study the remix ide, which is an Ide for solidity. So so far, in terms of development environment, we've mainly used the command line and truffle, which is a very good framework for developing solidity. Smart contract.
00:00:23.386 - 00:01:37.674, Speaker A: However, you might have noticed it seems a little bit heavy to kind of debug and interact with our contract, even though the truffle develop console is really good. But it'd be good to have a sort of tool that allow us to do this in a more fluid way where we can go back and forth really quickly. And actually there is really good tool that is the one that I'm going to talk about in this episode, which is the remix ide. So it's basically a web based tool, which means you can use your web browser to access it. And it allow us to do a lot of try and go back and forth and inspect the variable of our contract and just interact with our smart contract in a really easy way. So I didn't want to show you this at the beginning of all my videos because first I wanted to show you the hard way, but now that you know the hard way, then we'll be able to also see the easy way. And from now on, when I show you example on video, we will be able to make use of this tool.
00:01:37.674 - 00:02:03.922, Speaker A: So open your web browser and load the URL remix ethereum.org. So this is the online version of the remix ID. So it's very easy for us to use. So you will notice that there are several zone in this editor. So first on the left where I click, you have the file editor. So they already created a contract for you. So ballot saw.
00:02:03.922 - 00:02:36.730, Speaker A: So we're going to double click and we can see that it opens up in the central section. So the central section is here is where you're going to spend most of your time actually coding. So actually few people know, but we can zoom in a little bit because it's a little bit small. So we're going to zoom in. Okay. It's going to be a little bit more clear like this. So there are different action that you can perform in the file explorer part, and the most important one is the ability to create a new contract.
00:02:36.730 - 00:03:16.090, Speaker A: So here you can click on the plus button and you can create a new three DT contract. So for example, we will call it my contract. Okay. And here it appear in the file Explorer and you can see that it has opened up a new tab so I can switch back and forth between different open contract exactly like in a normal text editor. Okay, so we're going to write a very simple contract and learn how to deploy it on the local testnet. So contract, we're going to call it my contract. We open the curly braces.
00:03:16.090 - 00:04:02.890, Speaker A: And here you can notice that remix automatically creates the closing curly braces for us. It's very convenient. And then we're going to create our constructor. So my contract and we're going to just set a local variable, the owner of this contract for example. So owner, equal owner. We're going to pass this as an argument. So it's going to be an address owner with an underscore and we're going to define our variable before.
00:04:02.890 - 00:04:36.994, Speaker A: So it's going to be type address and this is an owner. Okay, so we have a very simple contract that just set a variable when it's created. So now we're going to have a look at the right part of the screen. So there are different tab compile, run settings, et cetera. So the first tab compile here you have a button which says start to compile. So every time you click on it it will recompile your contract. So here I've ticked the box autocompile.
00:04:36.994 - 00:05:24.238, Speaker A: So I don't need to click on start compile every time. And if you look a little bit below this you will find that the remix ide give you some recommendation. So some of them are just warning, like here warning, no visibility specified, defaulting to public. So it's basically some little tip to help you to improve your contract. So you can just get rid of them like this or just ignore them. And you can also see in a code section of the ide that on left of the line number you have a little icon that tells you that there is a warning if we have an error. Actually we'll have not a warning but an error.
00:05:24.238 - 00:06:00.714, Speaker A: And here I can see that I have this cross that tells me there is a problem. And on the right panel I can see the error message. So parser error expectant token, semicolon got function. Okay, so I can go back to the code section and put back my semicolon and I can see that my error message disappeared. But I still have my warning. Okay, so I'm just going to ignore this warning and I'm going to open up the run tab. So the run tabs allow you to deploy your contract to your local testnet.
00:06:00.714 - 00:06:43.600, Speaker A: So first you need to choose where you're going to deploy this contract because there are different possibilities. So the option that is selected here is the JavaScript VM is the easiest option. It's basically a testnet that is run by the remix id itself, so you don't need to manage it at all. However if you click on this drop down you can see that you have different options. So second option is injected web3. So for example if you were using missed the wallet of Ethereum actually from missed you can launch an instance of remix and in this case you would choose injected web3. Also if you are testing with metamask you can choose this option.
00:06:43.600 - 00:07:12.674, Speaker A: And finally we have a web3 provider option. So here it would be for example if you want to connect to your local testnet, with test RPC for example. So for this video we're just going to keep to JavaScript VM. It's very simple. Then this local testnet gives you a list of account that you can use. So here you can see on the drop down you have several options. You can just stick to the option that is already selected, then the gas limits.
00:07:12.674 - 00:07:53.262, Speaker A: It's basically when you're going to deploy this contract or launch some transaction, it's going to apply this gas limit. So if this limit is too small you may run across the error, run out of gas, but the default option is usually good. So just leave it like this. Then you have a value fill here. It's basically if you want to send some ether to this contract. Okay, so if we continue to go down we can see that we have another drop down, which is my contract here. So since I have only one contract in this file, I just show one choice.
00:07:53.262 - 00:08:46.840, Speaker A: But if I were to create another contract, for example contract, my other contract, then if I go back to the right panel now I see that I will have another choice which is my other contract. But what we want to deploy is my contract. So we're going to click this, then the next thing we're going to do is going to click here on the create button. So let's do it. Okay, and after you see that we have this thing here that just appears. So it's basically an instance of my contract that is deployed at this address that you can copy like this. So if I click here it has copied this address to the clipboard and I can use this address somewhere else and then I'm going to open this submenu here.
00:08:46.840 - 00:09:41.010, Speaker A: And actually I don't see anything because I just have my constructor function, but I don't have any other function that I can call so that's all I'm going to see if I continue to explore the remix ide at the bottom of the screen. So it is where we're going to see the result of our transaction. So here we can see that it says creation of my contract pending. And after we can see that it has actually done the transaction. So it's another area that you can keep a look at if you want to get some feedback on what's going on. Okay, so let's add a function to our contract. So we're going to, basically I want to access this variable owner.
00:09:41.010 - 00:10:27.620, Speaker A: So I will create a function that give me access to this. So it's going to be function getowner, and this function is going to return an address very simply and it's going to be very simple. Okay, so now my contract has changed, so I need to redeploy it. So I go back to the right panel and I click on create. Okay, so I can get rid of the first instance by clicking on the cross here. I don't need it. And for this new instance, I see that this time I have a new entry that I didn't have before, which is this get owner button.
00:10:27.620 - 00:10:57.040, Speaker A: So actually I forgot the constant keyword, so I need to add this. So let me recreate the contract. Okay. And this time you can see that the color of the button has changed. So now it's a green button, which means that we can call it without actually doing a transaction. So let's click on this getowner. And he tells me that the address is this.
00:10:57.040 - 00:11:44.266, Speaker A: Okay, well, it's not exactly what I wanted, so why is this? Okay, I got it. It's because I was supposed to pass in the constructor a variable. So I'm not going to do this. Basically I'm going to do something else. I'm going to use the global variable message that I give you some information about the transaction and I want to access the sender field of this global variable. It's basically I'm going to say that the person who created the transaction will be the owner. Okay, so are we going to redeploy this contract? So here on the right panel, I click on the create button and let me get rid of the old instance.
00:11:44.266 - 00:12:20.746, Speaker A: Okay. And now if I click again on the get owner button, I should see the correct address. So zero XCA 35 p. And let me see in my account if I can see this Doxca three. Yes. Okay, so we can see that it's giving me the address that I was expecting. Okay, so now we know how to deploy our contract and we also know how to interact with our contract thanks to a readonly function.
00:12:20.746 - 00:13:03.350, Speaker A: So now let's do the last thing, which is to actually execute a function that changed the state of my contract. So here I'm going to say something else. For example, set owner and it's going to accept address. So address new owner and it's not going to return anything. And owner equal set owner. Okay. And it's new owner.
00:13:03.350 - 00:13:41.874, Speaker A: Okay, so now we're going to recreate a new instance of our contract. So let's click on the create button and let's get rid of the old instance here. And now we have two button. So one button to execute the readonly getowner function and another button to execute the function set owner. That's going to modify our data in the contract storage. So let us change the owner. So let's see here in the account drop down if we have other account.
00:13:41.874 - 00:14:17.710, Speaker A: Okay, so let's select the second account. We're going to copy it. And then I'm going to switch back to the first account because I still want to send the transaction with the first account. And then in the field of the set owner function here I'm going to copy this account. And here it's important. So when you give a value to this function, you need to quote it, otherwise remix is going to complain. Okay, and now I'm going to click on set owner.
00:14:17.710 - 00:14:42.274, Speaker A: And now I'm going to click on get owner to verify that this transaction has worked. So I can see that the new owner is 1472. And here, if I checked, what did I send? 1472. So it's great. It's what we wanted. That's it for today. So now you know how to use the remix ide for basic functions.
00:14:42.274 - 00:15:14.766, Speaker A: So there is still a lot to be learned for the remix ide. So in the next few videos I'm going to continue to talk about it. So for the next video I'm going to focus on the file explorer of remix. And little by little you will learn how to become more and more knowledgeable about it. If you like this channel, you can give me a like, you can share the video or you can subscribe. You can also write a comment if you have any question. Thanks for watching and I hope to see you for the next video.
00:15:14.766 - 00:15:15.098, Speaker A: Bye.
