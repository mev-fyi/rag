00:00:00.330 - 00:00:47.654, Speaker A: In this video I will show you how you can create your own decentralized exchange by forking Sushiswap. I will show you where to take the smart contract, how they work and how to deploy them to the Ethereum blockchain if you haven't followed the whole Sushiswap saga. Basically, Sushiswap is a project that folk of Uniswap, which is the most popular decentralized exchange on Ethereum. And the highlight of the Sushiswap story is when its anonymous founder, Chef Nomi took out 14 million out of the developer funds. But there was a big outcry on Twitter and finally he returned all the money. But that really show you how powerful it can be to fork a decentralized exchange. Just to be clear, on my channel I made another video about forking Uniswap.
00:00:47.702 - 00:00:49.894, Speaker B: But this time we are forking sushiswap.
00:00:49.942 - 00:01:21.350, Speaker A: So in term we are going to do a fork of the fork. I know this is crazy, but this is just the way Dfi goes. And if you don't know me, I'm Julian and on my channel it the blocks I teach DFi, blockchain development and how to find your first blockchain job. And before we continue, quick mention to my two free training. First, if you want to know how you can become a professional blockchain developer and make $100,000 a year, I have a free training on that. And second, if you want to learn how you can make profitable arbitrage with flash loan, I have another free training in the description.
00:01:25.690 - 00:02:05.374, Speaker B: First we are going to see what are the smart contracts of Sushiswap and how they interact with each other. The first use case is for trading tokens. For this part we have the same smart contract as for Uniswap, but we have our own deployment separate from Uniswap. The factory contract allows to create pair contracts. Each pair contract represents a market like dai wrap ether, USDC wrap ether, etc. Users can provide liquidity and earn trading fees or buy and sell tokens exactly like on Uniswap. I won't give more details because I already covered Uniswap contracts in more details in my other video on Uniswap.
00:02:05.374 - 00:03:02.310, Speaker B: So if you need more info on that, go watch that video. Next we are going to cover what is more specific to Sushiswap with the yield farming feature. Sushiswap has a governance token called the sushi token. You can use it to vote on proposal to change the Sushiswap protocol and because of that it has a market value. This token is given as a reward to liquidity providers, similarly to what we have on other Defi protocols. First, a user needs to provide some liquidity to Sushiswap after he will get a liquidity provider token to make it clear that it's different from the liquidity provider token of Uniswap, we are going to call this SLP tokens. Once you have SLP tokens, you can send them to MasterChef and at each block, MasterChef is going to mint a fixed amount of sushi tokens and share them among the SLP tokens holders that stake their tokens in MasterChef proportionally to the amount of SLP tokens they own.
00:03:02.310 - 00:03:31.066, Speaker B: All you have to do is to keep your SLP tokens in MasterChef and you're going to keep receiving this sushi tokens reward. This is only the first part of the yield farming feature. There is another way to earn even more sushi tokens. When you have some sushi token, you can stake them in a sushibar contract and as a reward, you will receive some extra sushi token. When you trade on Sushiswap, you need to pay some trading fees. Sushi Maker is the recipient of these trading fees.
00:03:31.178 - 00:03:32.654, Speaker A: So we are going to use these.
00:03:32.692 - 00:04:17.514, Speaker B: Trading fees to fund the sushi rewards. To do that, sushi maker is going to sell the tokens of the trading fees to buy some sushi tokens using the pair contract of the sushi wrap ether pair and after it will send these sushi tokens to the sushi bar contract and share them among all the addresses that stake some sushi tokens. Next, we are going to see the migration process Sushiswap put in place some incentives to attract the liquidity providers of Uniswap. You can use the same process to get the liquidity from Sushiswap to your own fork. On the left you have the smart contract of Uniswap. On the right, you have the smart contract of sushiswap. Let's assume that a couple of users with the LP token of Uniswap decide to migrate their liquidity to Sushiswap.
00:04:17.514 - 00:05:03.482, Speaker B: The first step is to send the LP tokens to the MasterChef smart contract. When enough LP token have been accumulated, the MasterChef contract is going to send the tokens to the migrator contract. The migreto contract will redeem these LP tokens on Uniswap. In exchange, it will get back the tokens that are traded on that pair. In our example, it's going to get wrapped ether and Dai tokens. Then the migrator contract is going to send these tokens to our pair contract and in exchange we will get some liquidity provider tokens of Sushiswap that we call SLP and we send them to the contract of MasterChef. In the end, all the original LP tokens of Uniswap were replaced by SLP tokens of Sushiswap and the liquidity went from Uniswap to Sushiswap.
00:05:03.482 - 00:05:08.910, Speaker B: That's it for the smart contract architecture of Sushiswap. Next we're going to start the coding.
00:05:13.170 - 00:05:55.226, Speaker A: So we're going to set up the project. First we need to install node JS because that's required for the development tool. So node JS is basically JavaScript server side and it's totally cross platform. It doesn't matter if you have Windows, Linux or Mac, it works the same. So you download the LTS version here. And next we're going to install truffle, which is a popular framework for sodt smart contract and we're going to use truffle to deploy our Sushiswap smart contract to the blockchain. So in order to install truffle, you have to go to your terminal and you're going to use NPM, the package manager of Node JS that was installed just before when you install node JS.
00:05:55.226 - 00:06:31.234, Speaker A: And we're going to install truffle globally with this command. And after the next step is to download the code of Sushiswap. So this is the GitHub repository of Sushiswap where you will find a smart contract. So I'm going to give you a quick tour of the repo. So first I always like to check out package JSON because that's where you find the dependencies of a project. So here it's going to use open ziplink contracts. Open Ziplin is a solidity library that gives some standard implementation like yes, 20 tokens.
00:06:31.234 - 00:07:19.922, Speaker A: So this is used internally by Susie swap, then test helper. This is a library to easily write test for spot contract. And then here there is a local install of truffle, but I prefer to use the global one because that's more convenient. And after truffle flattener, this is a utility to concatenate several smart contract file into a single one. So that's to make deployment easier, but we're not going to use that. Okay, so next here in the test folder we have a couple of tests for the main smart contract of Sushiswap so reading the test can be very useful to understand how a smart contract works. So back to the root folder, and after in contracts, that's where you'll find a different smart contract of sushiswap.
00:07:19.922 - 00:07:40.474, Speaker A: So here you will find the smart contract that I mentioned in the previous section as well as some other contract. For example, you have Governor Alpha. So that's for the governance of the sushi token. Then mock has 20. That's just for testing. Sushi restaurant. This is not currently used in a sushi swap ecosystem.
00:07:40.474 - 00:08:09.994, Speaker A: And so you're going to find the different spot contract that I mentioned in a previous section. And then in uniswap V two, you have the spot contract of the uniswap ecosystem. So these were copy pasted here with very minor modifications. And finally we have the migration folder. So that's where you write deployment file that explain to truffle how we can deploy to the blockchain the first migration. This is used internally by truffle. We can ignore it.
00:08:09.994 - 00:08:46.218, Speaker A: And second one is where you specify your migration. And unfortunately Sushiswap didn't put any migration here, so we'll have to create our own. I will show you how to do this later in this video. Okay, so back to our terminal and we're going to actually download the code. So we're going to use the git command for that git clone plus the address of the repo. And then I want to download this in the current location. If you don't have git installed on your computer and you don't want to bother on GitHub, you can download this manually.
00:08:46.218 - 00:09:12.270, Speaker A: So you go in code and you can download the zip here. Okay, so now we can see that we have our different file. And next we need to install the dependency specify in package JSon. So we're going to run NPM install at the root of the project. Alright, very good. We are done with setting up the project. Next we're going to deploy the spot contract of Uniswap.
00:09:12.270 - 00:09:58.998, Speaker A: So in this section we're going to deploy the smart contract of Uniswap and more specifically the factory that allows to create pair token. And pair token is where the actual trading take place. Even though we reuse the code of Uniswap, our deployment will be totally independent from the deployment of Uniswap. And under the hood, Uniswap interfaces with a special Es 20 token that we call wrap ether. So that's basically ether but in an Es 20 token. So for that we're going to go to the repo of ether blocks for this video. And in contracts we're going to copy paste the code of wrap ether.
00:09:58.998 - 00:10:33.234, Speaker A: So this is not in the repo of Sushiswap. So I had to add this. Okay, so let's copy this. And in our project we're going to create a new file in contract that we're going to call wrap ether. So all right, we're going to paste everything. Okay, next we are going to write our migration. So inside the migration folder we open deploycontracts js and we are going to import a few contract from Uniswap.
00:10:33.234 - 00:11:29.820, Speaker A: So first the factory. So this is in Uniswap V two. And what's the name of that Uniswap V two factory. All right, I also going to import the router, Uniswap V two, router, two cell. Also going to import wrap ether. And after we're also going to deploy the mock yes 20 token of Sushi swap so that we can deploy some Uniswap pool with them in the deployment function. We're going to make it async that we can use the await keyword inside.
00:11:29.820 - 00:12:13.826, Speaker A: So we're going to ignore the second argument. But after we do need the array of addresses that we can use for sending transaction, we're going to extract the first one. That's going to be our admin address. And after that we're going to deploy the wrap ether contract and we grab a reference to it once the transaction has been mined. Okay, and after we're going to deploy two token by using mock ERC 20 new. So this time we don't use the same way of deploying. Here we use deploy and deploy.
00:12:13.826 - 00:12:58.790, Speaker A: And this will print the address in the traffic console. But for mock Es 20, actually we want to deploy two instance of this contract. But if we use the previous method, it's going to overwrite the previous deployment. So we're going to use another method called new allows to deploy several instances. So here we give a couple of argument to the constructors. First the name of the token, then the symbol, and finally the total supply. So for example we're going to put it at 1000 token and here we change token b, token b or if you're not familiar with Webster util two way.
00:12:58.790 - 00:13:27.274, Speaker A: So that's how we specify token in Ethereum. This is like a cent of a token. So 1000 way will actually be 1000 times ten power 18. That's just the way yes 20 token works. And after we're going to deploy the smart contract of Uniswap. So deployer, deploy the first factory. That's the smart contract that can create some pair tokens.
00:13:27.274 - 00:14:04.860, Speaker A: These are basically the market of uniswap. Then we grab a reference to that. And after with this reference, we're going to create some market by using the create pair function. And it takes two arguments, the address of the two tokens. So the wrap ether and then the address of token a. And then we're going to create another market with token b. And after that we're going to deploy the router, which is used to easily interact with the different market.
00:14:04.860 - 00:15:07.870, Speaker A: And it needs to know the address of the factory and the address of wrap ether. Let me grab a reference to the router. Okay, so with this we have finished to deploy the smart contract of Uniswap. And next we're going to deploy the smart contract of sushiswap. So first we need to deploy sushi, which is the governance token of Sushiswap. So for that, first we import the sushi token in our file and after that we are going to deploy it and we grab a reference to it. Next we are going to import MasterChef, which is a contract where you can stake your liquidity provider token and in exchange you get rewarded with sushi token.
00:15:07.870 - 00:15:59.710, Speaker A: And after we're going to deploy Master chef. So we need a couple of parameters for the constructor. So first we need the address of the sushi token. Then we need an address that has some extra right in the contract. So I'm going to explain after what are these extra rights? Then we need to specify how many sushi tokens will be created for each block. These tokens will be shared among all the addresses that stake the liquidity provider in Master Chef. For example, if you want to create 100 token for each block, that's going to be web, three utils, two, a, 100, then the start block when the reward of sushi will start.
00:15:59.710 - 00:16:41.238, Speaker A: That means before this block, no sushi will be created. So for example, block one, but obviously for mainnet it's going to be a different number. And then we need to specify the end block for the bonus. So at the beginning there will be a bonus period where some extra amount of sushi tokens are created. It's in order to incentivize early adopter, for example, block ten, and that's it. And after that we grab a reference to Master Chef. And we also need to transfer the ownership of the sushi token to Master chef because Master chef will need to call the mint function of sushi token in order to create the sushi reward.
00:16:41.238 - 00:18:00.594, Speaker A: So since sushi token inherit from the ownable contract of openzipling, it has a method that is called transfer ownership. So we're going to use it sushi token transfer ownership and we pass it the address of Master Chef. And after that we need to deploy sushibar. So Sushibar is another contract where you can stake your sushi token and by staking your sushi token, you're going to get even more sushi token. So first we import this contract, after we're going to deploy it and it needs to know what's the address for sushi token and we grab a reference to it. And then we need to deploy Sushimaker, which is another contract used by Sushibar to get its sushi treasury. What sushi maker does, it converts the trading fees of the different pair contract of sushiswap into sushi Token and send the sushi token to Sushiba, which after distributed to all the staker of sushi Token.
00:18:00.594 - 00:19:03.146, Speaker A: I know it's a little bit confusing. So here we import Sushi maker and after we're going to deploy this, then we pass in the address of the factory that we deployed before. So this is the factory of Sushiswap, not the factory of Uniswap. Then the address of the sushi bar contract, the address of the sushi token, and the address of wrap ether. And the last thing we need to do is to update the address that received the trading fee in the factory. So the trading fee needs to be owned by Sushi maker so that he can convert this trading fee into sushi token. So for that in the factory contract, we can call set fee two and sushi maker address.
00:19:03.146 - 00:19:30.580, Speaker A: And of course here this function is protected. But before when we deployed factory, we didn't specify any address. So by default it uses the first address that we have here in the addresses array. So that's going to be admin in our case. And so when we send a transaction without specifying the address, it's as if we do this. So here, this is already basically the admin address of factory. So that's why we are allowed to do this.
00:19:35.370 - 00:19:37.046, Speaker B: And the last contract we need to.
00:19:37.068 - 00:19:40.274, Speaker C: Deploy is the migrator contract that allows.
00:19:40.322 - 00:19:42.598, Speaker B: To do a liquidity attack.
00:19:42.764 - 00:19:48.890, Speaker C: So for that, first we're going to import this migrator.
00:19:53.950 - 00:19:55.754, Speaker A: After back at the.
00:19:55.792 - 00:20:22.254, Speaker C: Bottom, I'm going to deploy it like this deployer deploy migrator. And it's going to take a couple of argument for the constructor. So first we need to pass the address of Masterchef. So Masterchef address. Then the address of the factory of Uniswap.
00:20:22.302 - 00:20:23.506, Speaker B: So for this you can go to.
00:20:23.528 - 00:20:26.178, Speaker A: The website of Uniswap and you're going.
00:20:26.184 - 00:20:54.094, Speaker C: To check the documentation. I'm going to go in smart contract, Uniswap V two factory. So that's this address. So I'm going to put this, then the address of the factory of Sushiswap. So that's factory address. And finally the first block from when we can do the migration. So if you going to deploy on a local development blockchain, you don't care.
00:20:54.132 - 00:20:55.134, Speaker B: You can just put one.
00:20:55.172 - 00:21:03.426, Speaker C: But on Mainnet, of course this is going to be different. So now we're going to launch the truffle console. So it's going to start a local.
00:21:03.528 - 00:21:07.454, Speaker B: Development blockchain completely isolated from Mainnet.
00:21:07.502 - 00:21:37.046, Speaker C: So that's ideal for developing. And in order to deploy all our smart contract, we can do migrate reset. Okay. And here the deployment failed and that's because of a problem on uniswap V two router. So I know how to solve this problem. It's basically the contract is too big because there is a limit of 24. Fix this by commenting at part of this file.
00:21:37.046 - 00:22:21.294, Speaker C: So I'm going to uniswap v two router and there are a couple of function that are not used. So we're going to comment them out. So swap supporting fee on transfer token. So we're going to comment that until the library function. Okay. And we also need to comment at in the interface. Right.
00:22:21.294 - 00:22:51.734, Speaker C: Let's try again to deploy. Okay, so here sushi maker is not defined. So let me go back to our migration file. And here we deploy sushi maker. And after we need the reference to sushi maker. Okay, so here we need to grab a reference to sushi maker like this. Okay.
00:22:51.734 - 00:22:58.790, Speaker C: So back in the truffle console, let's try again. And this time it worked great.
00:22:58.940 - 00:23:08.058, Speaker B: So here I showed you on a local development blockchain. But if you want to deploy on a public testnet like Covan or on Mainnet, the procedure is very simple.
00:23:08.144 - 00:23:12.286, Speaker C: It's just that you have to use a tool called infira and add a.
00:23:12.308 - 00:23:18.926, Speaker B: Configuration in your truffle project. And in the description I put a link to a tutorial where I show.
00:23:18.948 - 00:23:19.822, Speaker C: How to do this.
00:23:19.956 - 00:23:31.358, Speaker A: So what's the next step? First, if you're going to do a fork of sushi swap, you probably should bring some innovation. Just don't do a copy and paste. Second, in this video I show you.
00:23:31.364 - 00:23:32.934, Speaker B: How to do the smart track part.
00:23:32.972 - 00:23:36.262, Speaker A: But you still need to do the front end. For that, you can use the open.
00:23:36.316 - 00:23:39.078, Speaker B: Source front end of Sushiswap, which itself.
00:23:39.244 - 00:23:53.634, Speaker A: Is a fork of the front end of Uniswap. And if you want to keep learning some cool stuff on blockchain and defi, you can check out this other tutorial where we fork Uniswap, and I also have a playlist where we build many different Defi projects.
00:23:53.682 - 00:23:54.260, Speaker B: I'll see you there.
