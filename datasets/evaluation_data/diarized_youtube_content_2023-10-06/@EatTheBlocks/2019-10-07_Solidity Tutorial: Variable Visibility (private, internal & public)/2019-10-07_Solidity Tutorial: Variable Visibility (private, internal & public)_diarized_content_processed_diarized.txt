00:00:00.410 - 00:00:39.978, Speaker A: Hello, this is julian and you are on idoblocks. And in this video I'm going to explain you a variable visibility in solidity. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL. In the last video I told you about function visibility, but we can also assign some visibility to variables and control how they can be accessed. So let's declare an integer variable and we're going to make it a private variable and then we declare its name.
00:00:39.978 - 00:01:24.114, Speaker A: So this whole thing means this is a variable of type integer, the visibility is private and the name is a. So a private variable can only be read from within the same smart contract. Let's be more specific. So let's say that we have a function that we call foo and we make it external, for example. And in this function, for example, we can create another variable that we call b, and b can be equal, equal to a plus one. So inside the full function we can read the value a. But if I try to read the value a from outside the smart contract, it's going to fail.
00:01:24.114 - 00:02:07.590, Speaker A: By the way, there is a big caveat with this private keyword. So when I say that a cannot be read from outside the smart contract, it's actually not entirely true. This is only valid in the context of the Ethereum virtual machine, which is the component of ethereum that runs smart contract. But what you need to understand is that this a variable is stored in the Ethereum blockchain, which is a public blockchain. So you cannot have anything private in this public blockchain. And if you use some blockchain analysis tool, it's possible to read the value of a private variable in the Ethereum blockchain. So don't put any secret in these private variables, anybody will be able to read them.
00:02:07.590 - 00:02:47.670, Speaker A: Next, there is the internal keyword. So instead of private here can specify internal. This is exactly the same as for internal keyword, for functioned. That means that this a variable can be read from inside a smart contract or other smart contract that inherit from it, but you cannot read it from outside the smart contract. Once again. And finally, there is the public keyword. So with the public keyword, as you probably guess, you can root it not only from within the smart contract, from smart contract that inherit from it, but also from outside the smart contract.
00:02:47.670 - 00:03:25.758, Speaker A: So that is the most permissive kind of access for solidity variable and it's also possible not to specify anything by default. Solidity is going to consider this variable as a private variable. So this is a very secure default. So you're probably wondering how to choose which variable visibility. Well, exactly. Like for function visibility, you need to use the least privilege principle. So if your smart contract can work with a private variable, then make it private, then you try internal, and if it still doesn't work, then you make it public.
00:03:25.758 - 00:04:15.694, Speaker A: By the way, I would like to tell you what solidity does exactly when you use this public keyword. So what solidity does is it actually create a public function that is called with the same name of the variable. So function a here view returns and here return the same type of the variable and it return a and make my function public. And here you see that solidity is not happy. It tells you identifier already declared. But that's kind of weird because we haven't declared any function call a. Well that's because behind the hood what solidity does with this public variable, you see that it is a public variable, so it create automatically this function a.
00:04:15.694 - 00:04:53.234, Speaker A: So if you try to create the same function, it's going to collide with this function created by solidity. So you cannot reuse this name for another function. So now we're going to try to deploy our smart contract and we will see in remix that we'll have a getter function for a. So let's click here on deploy, let's expand this. And we can see in blue that we have a function called a that returned the value of a. So if we click on it, we see the default value for integer, which is zero. So that's what happened behind the scene.
00:04:53.234 - 00:05:15.770, Speaker A: All right, I hope that now everything is clear for variable visibility in solidity. And in the next video I'm going to talk about all the built in variable in solidity, because solidity inject a lot of constant and other variable that give you some info about the environment of the transaction or the call to the smart contract.
