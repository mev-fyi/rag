00:00:00.410 - 00:00:37.778, Speaker A: In this video, I'm going to explain you what are the main categories of errors in solidity. The first category of error is a syntax error. A syntax error will happen if there is some problem with the syntax of your solidity code. For example, you can miss a semicolum, or maybe that you miss the type of a variable. All these errors will be caught by the solidity compilers. Usually they're quite easy to troubleshoot, because solidity will give you a hint on how to fix the error. One thing that is important to understand is when you have a syntax error at this stage, the smart contract is not running in the Ethereum blockchain.
00:00:37.778 - 00:01:31.506, Speaker A: You are still outside blockchain. The next kind of error is a runtime error. So a runtime error happens only once you have deployed your smart contract to the Ethereum blockchain, and your solidity code has been compiled to a bytecode that can be understood by the Ethereum virtual machine, which is the component of Ethereum that runs your smart contract. A runtime error happens when the Ethereum virtual machine thinks that you are doing something wrong with your smart contract. If you are in the context of a transaction, all the state changes that you've done with your transaction are canceled and the transaction is set to be reverted. Depending on the kind of error, all the gas of the transaction is consumed, or some of it is refunded. Runtime errors are a little bit more difficult to troubleshoot than syntax errors because you don't have the help of the solidity compiler to tell you when this happened.
00:01:31.506 - 00:02:53.518, Speaker A: And usually they're also a little bit more serious, because at this stage you have already deployed the smart contract to the blockchain, and you can't just change the code or update it to fix the problem. And the last time of error is logic error. So logic error happened once you have deployed your smart contract to the blockchain, and it happened because there is a problem in the logic of your smart contract. So it's important to note that it's not like a runtime error in that the Ethereum virtual machine does not consider it to be an error from its perspective. From its perspective, everything is working fine, but it's just that the logic that you have implemented basically makes your smart contract either dangerous or make it produce false result. For example, the reintrancy attack of the DaO smart contract in 2016 was the result of a logic error, but it wasn't a runtime error or a bug. In the Ethereum virtual machine, this kind of bug is the most serious but also the hardest to fix because there are no tools that can automatically run through your smart contract and tell you whether or not you have some logic errors contrary to syntax errors or runtimes error, where you can use, respectively, the solidity compiler and the Ethereum virtual machine.
00:02:53.518 - 00:03:39.294, Speaker A: There is an area of research that is called formal verification and that might be used at some point in the future in analysis of logic errors in smart contract, but it's not ready yet. Let's review the tool that you can use to troubleshoot and find the different classes of errors that we just mentioned. First, you have the solidity compiler, so you will rarely work directly with the solidity compiler, but usually you will use a higher level tools that already embed the solidity compiler for you. So I'm talking of remix, the online Ide for smart contract. Also it can be truffle, the framework for smart contract written in node JS. Then you have the solidity debugger. Same thing, you will rarely use it directly.
00:03:39.294 - 00:04:19.486, Speaker A: It will also be embedded in some other tools like remix or truffle. Then you have solidity linters. Usually you will use them in combination with other tools like truffle or your code editor like visual studio code for example. And finally you have test. So I'm not talking of manual test that you do by using remix and clicking on different button and making sure that your smart contract. I'm talking of test cases that you have to write in test files, and usually you will use framework like truffle to write this in combination with other testing frameworks like mocha for example. You can also write your test in remix, but few people do this compared to other tools that I mentioned.
00:04:19.486 - 00:05:07.982, Speaker A: Using test to troubleshoot your smart contract usually requires more work, but these tests are often necessary. All right, so now let's see all the different classes of errors and how you can use the different tools that I just mentioned. So for syntax errors, your main tool will be the solidity compiler. The solidity compiler is able to go through your smart contract and tell you if there are any syntax errors, and it will give you a hint for each of this. So it will be really easy to fix. Just follow the hint of the solidity compiler. Then if you have a solidity linter running every time your smart contract changes, then the solidity linter is also able to catch some syntax errors, and in particular you can see these in action as a code editor extension, and especially for visual studio code.
00:05:07.982 - 00:05:52.830, Speaker A: You will find some solidity linter that will visually tell you when there is a problem with the syntax of your code oftentimes. Solidity linter actually, under the hood, use a solidity compiler as a backend. Next, you have runtime error. Your main tool to troubleshoot runtime error is the solidity debugger. The solidity debugger will allow you to go through your smart contract code step by step and to understand what happened at each step, and you can also inspect the value of the different variables at every time. And you can also use tests to find your runtime errors. It's up to you to write your test, but they are able to catch the runtime errors of the Ethereum virtual machine and report it to you.
00:05:52.830 - 00:06:43.862, Speaker A: And finally, we have logic errors, which is the most difficult class of errors and also the most dangerous. So for the logic errors you have a lot of choice. You can use the sodt debugger to troubleshoot logic errors, and in particular, the fact that you can inspect the value of your variables will allow you to find out about your logic errors. For example, if you're expecting a variable to be a certain value, but the debugger tells you that it's another value, then it might give you a hint that you have a logic errors. So the solidity debugger does not allow you directly to find a logic error, but it can put you on the right track. Then we have solidity linter. So solidity Linter also will not directly tell you that you have logic errors, but they will report some dangerous solidity patterns that generally lead to logic errors.
00:06:43.862 - 00:07:14.740, Speaker A: But the primary tool to detect your logic error will be test. So you need to write in test what is the business logic of your smart contract? And every time you change your smart contract, you need to run your test. And if any test fails, then usually it means that you have a problem in the logic of your smart contract. So that's why writing tests are so important. In the rest of series, I will mostly talk about solidity debugger, but I will also mention some other tricks that you can use to debug your solidity smart contract, and that I haven't mentioned yet.
