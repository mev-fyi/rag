00:00:00.330 - 00:00:32.386, Speaker A: In this video I'll show you two ways to return a solidity array from a function. And one of this method uses a secret feature of solidity. If you don't know me, I'm julian and on my channel eat the blocks. I teach blockchain development. So here we have a user struct and we have an array of user struct here and we want to return this collection. So how are we going to do this? Well, we're going to create a function. Let's call this get users.
00:00:32.386 - 00:01:18.950, Speaker A: One doesn't take any argument, make it external only callable from outside the blockchain. Then we need to specify the return type so it's not possible to return directly the array of structs or DT is going to complain. So instead we're going to return an array for each field of the user. So an array of all the user addresses and an array for all the balances. So let's declare this thing, so address here memory and after you eat. All right, and so we're going to create these two array here. So these are memory array.
00:01:18.950 - 00:02:14.054, Speaker A: So here I'm going to call this user address and I declare a new memory array with this notation, new address and for the length of this array. So this is the length of the user array and we're going to do the same thing for the balance. So let's copy paste this replace address by uint here. This is user, this is balances new uint and font length. This is also the length of the users. So now we're going to iterate over this users array and we're going to populate these two array here, user addresses and balances. Okay, so let's do this.
00:02:14.054 - 00:02:51.326, Speaker A: So let's declare a variable to iterate throughout array. And we're going to stop when we reach the end of the array. We increment I for each pass. Okay. And so after we're going to assign the value for our user addresses and balances array. So here the index is I. We access users at this index and we extract user address and we do the same thing for the balance.
00:02:51.326 - 00:03:47.446, Speaker A: So here this is going to be balances user I of balance. And after that rewritten a tuple of user addresses and balances. And so after on the front end you'll have some work to do because you probably will want to convert these two array into a single array of all the users because this is not very convenient to manipulate the data this way. So is there a more simple way to proceed? Yes, there is. We can actually return directly the array of struct using a secret feature of solidity. And actually the compiler of solidity is going to give us the clue for that. So let me copy this function and let's call it get users two.
00:03:47.446 - 00:04:29.422, Speaker A: And this time we're going to return directly an array of struct. So solidity here is going to complain. Oh, you can't do this, this is not possible. But I'm going to give you the solution. This type is only supported in Abi encoder v two use pragma experimental Abi encoder v two woohoo. Hallelujah. We have the solution so we're going to add this pragma experimental Abi encoder v two and now solidity is happy and all we have to do is to return users like this and boom.
00:04:29.422 - 00:04:55.754, Speaker A: This is so simple. So which version should you use? This one or this one? Well, you should use this version because this is way more simple. And by the way, there is a lot of confusion about this Abi encoder V two pragma statement. So in solidity 0.5 that was considered experimental and not production ready. So that wasn't recommended to use that. But in solidity 0.6
00:04:55.754 - 00:05:24.700, Speaker A: this is not experimental anymore, you can use it in production. However, and this is the very confusing part, is that you still have to put the experimental keyword here. So you write experimental, but that's actually not experimental yet. So be careful about this trap. This is totally safe to use in production. And if you want to see a lot of other cool tricks in solidity, definitely check out my playlist with all my solidity recipe. I'll see you there.
