00:00:00.250 - 00:00:42.582, Speaker A: When you code an ICO smart contract, you have two options. You can either code it from scratch or use a smart contract library like Openzeppelin. I recommend the second solution because it's way faster and safer. Another benefit of using the ICO contracts of open Zeppelin is that they offer you a lot of options to customize your ICO. So in this video I'm going to show you how you can create your ICO smart contract using the Open Zeppelin library. We're going to start from a basic ICO and we're going to progressively add different options like whitelisting, cap sale, variable ICO price, etc. Etc.
00:00:42.582 - 00:01:34.534, Speaker A: Hey, I'm julian and on my channel eat the blogs, I teach how to become a blockchain developer and get your first blockchain job. Alright, let's see some coding. So this is a truffle project. If you don't know what is truffle, you can watch this tutorial video. So I have already installed Open Zeppelin in this project with NPM install open Zeppelin contract and now I'm going in my smart contracts ico sol, and in my smart contract I have the three DT pragma statement. Then I have an import to Crowdsell Sol, which is the basic ICO smart contract of open zeppelin. So you'll find it inside the crowd sale folder.
00:01:34.534 - 00:02:21.498, Speaker A: And once you have this, then you can create your ICO smart contract and you make it inerate from crowd sale. And after you're going to define a constructor that is going to take three argument. The first argument is the rate of the ICO. So that's basically the price of the token. So investors are going to send ether to this smart contract and in exchange they're going to receive an ERC 20 token and the price will be determined by this argument here. Then you have the address of the wallet. So every time an investor sends some ether to this contract, this ether is going to be forwarded to another address right away.
00:02:21.498 - 00:02:46.340, Speaker A: And that's the wallet. So we need to make it payable. And finally we'll have a pointer to the token of the ICO. So it needs to be an ERC 20 token. So here we're going to have the interface. And by the way, we need to import this interface. So that's going to be inside token ERC 20.
00:02:46.340 - 00:03:28.586, Speaker A: All right, by the way, when you're going to call this constructor function. So here actually you're going to provide the address of the token and 3D is going to cast this to this token pointer. And after you need to call the constructor of the Crowdsell smart contract. So you're going to do like this and you're going to forward all the argument. So rate wallet and token, you make the constructor public and that's it. So let's have a look at the source code of crowdsale salt so that we can understand the function that we can use. So this is the repo of open Zeppelin on GitHub.
00:03:28.586 - 00:03:53.318, Speaker A: Let me scroll down. We go to contracts, then we go to crowd sale. Then here we go to crowd sale. Sol so this is the spot contract that we're using for our ICO. Let's scroll down. So here we have our constructor with rate wallet token. And the interesting part here is the fallback function.
00:03:53.318 - 00:04:29.630, Speaker A: So that's the function that you want to call when an investor send ether to the smart contract in order to buy some token. So when you call this fallback function. So you send your ether and then it's going to call this other function buy tokens. Let's scroll down. And here it's where we will have all the logic of transferring the token to the investor and forwarding the ether to the wallet. And you also have access to a couple of readonly function like way raise. You can know how much was invested.
00:04:29.630 - 00:05:10.990, Speaker A: You can know some metadata about the ICO, the rate, the address of the wallet, the address of the token. So that's a basic ICO. And next we're going to see how we can add some more customization to this. So let's go back and here in all this folder, distribution, emission price and validation, we will find the extra option that we can choose for our ICO. So let's start by distribution. So we're not going to go over all of them, but the most interesting one here is post delivery crowd sale. If you use this option, the YaS 20 tokens are not transferred right away to the investors.
00:05:10.990 - 00:06:01.440, Speaker A: Instead, you need to wait for the ICO to be finished and only then investor can call this function redraw tokens. And the reason why you would want to do this is because you don't want to mix together the primary market and the secondary market. So primary market is when you are doing the ICO and secondary market is when you can do trading. So any investor can go to any exchange and buy or sell their token. But usually you want to separate these two phases because otherwise if they happen at the same time, then you can have some arbitrage opportunity that can arise between the primary and secondary market. And then this is a real mess. So in most cases, you probably will want to use this post delivery crowd sale option.
00:06:01.440 - 00:06:53.562, Speaker A: So how can you use it? Well, you check the path in the repos contracts crowd sale distribution. Then you check if there is a constructor. There is one. So let's go to our code and we're going to import this contract. So crowd sale distribution post delivery crowd sale. And after you're going to inerit from this contract post delivery crowd sale, and you're going to call the constructor. Like this doesn't take any argument.
00:06:53.562 - 00:07:22.774, Speaker A: And that's it. That's how you activate this option. Next we're going to see other options. So let's see what we have in the price folder. Increasing price crowd sale. So this option allow you to have a variable price for your ICO. So when your ICO start, the price of the token will be a certain value and then it's going to increase linearly until the end of the ICO.
00:07:22.774 - 00:07:46.722, Speaker A: So here we can see that we have a constructor with the initial rate and the final rate. So the initial rate needs to be higher than the final rate. And we have also a couple of functions. We can access the rate and initiate rate the final rate. You can also get the current rate. So if you're an investor, this function is interesting. You can know exactly what price you're going to pay at any time.
00:07:46.722 - 00:08:35.666, Speaker A: And so if we want to use this, so we check the past contract crowd sale price increasing price crowd sale and we also have to declare the constructor with initial rate and final rate. Okay, so let's see how this work. So here we want to take crowd sale time. And this time the smart contract is increasing price crowd sale. And we want to add this increasing price crowd sell and we're going to call the constructor. So for example, maybe that the initial rate is three and the final rate is one. So now, next option.
00:08:35.666 - 00:09:09.798, Speaker A: So let's check in the validation folder. So here we have time crowd sale. Actually, this option was used by other option I showed you before. So with time crowd sale, you can set a beginning and end time for your ICO. So in most cases you probably will want to use this option. So if you scroll down, we can see that in a constructor we need to specify the opening time and closing time. So these value are integer, they are unique timestamp in seconds.
00:09:09.798 - 00:09:45.110, Speaker A: And this will give you access to a couple of function like open in time closing time. When you use this option, investor will only be able to buy token between the opening and the closing time. So this is pretty straightforward. Then another interesting option is whitelist crowd sale. So with whitelist crowd sale you can whitelist a list of addresses and only the addresses that were whitelisted will be able to participate in the ICO. And there is another spot contract that is interesting. So that's inside access roles whitelisted role.
00:09:45.110 - 00:10:20.846, Speaker A: So basically these are function that you can use with this option. So if you want to add an address, you're going to use this add whitelisted. And if you want to remove, then remove whitelisted. And only the address that deploy the it will be able to call this function because here we have this modifier only whitelist admin. All right, so let's see our next option. Posable crowd sale. So you can pose your ICO with the pose function and unpose it with unpose.
00:10:20.846 - 00:10:52.430, Speaker A: So that can be very useful. For example, if there is a problem in the ICO, you want to be able to manage this. And then you have capped crowd sale. Here you're going to have a constructor with a cap. So you're going to set the maximum amount of way that the ICO can receive once this cap has been reached that no other investment can be made. And you have a couple of functions here. We can see what's the cap and also we can see if the cap was rich or not.
00:10:52.430 - 00:11:03.420, Speaker A: Next, if you want to keep learning how the open Zeppelin library can help you to create your solidity smart contract faster and safer, you can check out this playlist. I'll see you there.
