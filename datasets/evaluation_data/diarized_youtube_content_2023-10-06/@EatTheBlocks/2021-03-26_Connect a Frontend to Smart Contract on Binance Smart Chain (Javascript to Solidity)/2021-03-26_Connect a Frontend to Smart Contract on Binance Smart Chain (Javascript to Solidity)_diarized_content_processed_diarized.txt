00:00:00.250 - 00:00:34.962, Speaker A: After you deploy a smart contract on binance smart chain, if you want to interact with it, you need to use the command line. Not very user friendly. That's why you need to build a nice front end interface. But in the front end we use JavaScript and in a smart contract we use solidity. How can we connect them? There is a way, and that's what I'm going to show you in this video. Hey, if you don't know me, I'm julian and on etherblocks I teach blockchain development. In your blockchain application, also called decentralized application or DAB.
00:00:34.962 - 00:01:15.550, Speaker A: We have two main parts, the smart contract which runs on binance smart chain, and the frontend, which runs in the web browser of the user. The software that runs the binance smart chain is called a client. The client exposes the smart contract functionality with an API. In this API there are several endpoints for interacting with our smart contract. We will use two endpoints ETH send transaction to modify data and ETH call to read data from the smart contract. On the front end we will have a web page with HTML, CSS and JavaScript. This is the JavaScript code that will interact with the smart contract.
00:01:15.550 - 00:02:01.998, Speaker A: We could use JavaScript directly to interact with the API of binance smart chain, but it would be too much work. The two endpoints we are going to use, ETH send transaction and ETH call, requires a specific encoding for the parameters and it would be too much of a hassle to deal with this. Instead, we are going to use a JavaScript library to do the heavy lifting. There are two options, web3 and ethers. Web three is older, ethers is newer, has a more simple API, and is getting way more traction. So we will use ethers, but it doesn't matter if later you prefer to use Webstery. Ethers is going to send an HTTP request across the Internet until it reaches the API of binance smart chain.
00:02:01.998 - 00:02:43.434, Speaker A: The request will then be sent to the EVM or Ethereum virtual machine, which will execute our request, and finally we will have a response sent back to the front end. Another very important part is the wallet of the user on the front end. Technically it's not part of our blockchain app, but we still need to interact with it. It's usually a chrome extension like metamask, but it can also be a mobile wallet or a hardware wallet. This wallet is used when we want to send a transaction to the smart contract. The wallet has the private keys of the user and will sign transaction before they are sent to the binance smart chain. One very important detail is that the private key never leaves the wallet.
00:02:43.434 - 00:03:25.370, Speaker A: Our blockchain app will never have access to these keys. The JavaScript code would just ask the wallet, hey, I want to send this transaction. Can you confirm with the user that he or she agrees to sign this transaction? The wallet will then show a pop up to the user, and only if the user agrees, the transaction will be signed and sent to the blockchain. Okay, so that's it for the overview of how to connect a front end to a smart contract. Next we are going to start the coding. So for our project we're going to use a very simple smart contract. So this is a truffle project, and in the contracts folder I've created a very simple smart contract.
00:03:25.370 - 00:04:02.970, Speaker A: So it just has a single integer variable and it has two function, a function to update the variable and a function to read this variable. And in our front end we're going to connect to this smart contract and call these two functions. And we also have a deployment script. Super simple. We just deployed our smart contract and that's it. Then in the truffle config file I've defined a couple of things. So first we import HD wallet, provider of truffle.
00:04:02.970 - 00:04:47.538, Speaker A: Then here you have to copy paste your mnemonic phrase to generate an address. Then here. So I've added this to customize the directory where we create the build artifact of truffle. So this is for the front end and I've added a network here for binance smart chain. So I pass in the mnemonic and I put the URL to the binance smart chain testnet. So after with the first address generated by this mnemonic, you got to go to the faucet of the binance smart chain testnet. Get some testnet BNB tokens because we're going to do some transaction and you need this token to pay for them.
00:04:47.538 - 00:05:33.266, Speaker A: And after at the root of the project. So I've already run NPM install to install all the dependencies. And after we are going to deploy the smart contract to binance smart chain. So truffle migrate, reset, and then specify the network that we created in truffle config binance smart chain. All right, our smart contract is deployed and in the next section we're going to start the front end. The first step in your front end is to connect to the wallet of the user. So there are many wallets available for binance smart chain, but one of the most used one is metamask which is also very used for Ethereum.
00:05:33.266 - 00:06:16.366, Speaker A: So here in our project, we'll go to frontend and we'll go to srC. This is where we have the JavaScript file and we do the integration with metamask in Ethereum Js. So let's see how it works. So we are going to export a function from this file, get blockchain, and this function is going to return a JavaScript object that points to our smart contract on the blockchain. But before we can create this object, there are a couple of steps. So first we are going to call this function detect ethereum provider. It's going to return a provider object, and this is related to metamask.
00:06:16.366 - 00:06:57.586, Speaker A: And we get this function from a package of metamask, metamask detect provider. So this package is not too complicated so we can check out its code in GitHub to understand what's happening. So we go in src index typescript, and here we see this function detect ethereum provider. So here the interesting action happened here. So first, if metamask was already loaded in our page, it's going to inject this object, window ethereum. So we are going to return this object by calling this function. We're going to see this function just after.
00:06:57.586 - 00:07:36.270, Speaker A: Otherwise, if metamask has not been injected yet, then we are going to add this event lessener to window. So when metamask is injected, it's going to emit this event ethereum initialized. And when this event is fired, then we're going to call handle Ethereum. And finally we have a set timeout. So if metamask is not injected in a certain time, we're going to call handle Ethereum. That's going to throw an error, meaning that we don't have metamask installed. So after, when you see this function handle ethereum, which concludes the process.
00:07:36.270 - 00:08:08.030, Speaker A: So first of all, we remove the event listener. And here if we have found Ethereum in the window Ethereum, then we return this object. Otherwise that means we were not able to connect to metamask. So we console login error and we return nothing. So there are other details in the code, but what I explained here is the most important. So then back in our code. So here we get the provider, which is basically window Ethereum object exported by metamask.
00:08:08.030 - 00:08:47.330, Speaker A: And if we have this provider, we're going to connect to the blockchain. So first we need to ask the user to give us access to its metamask address. So before it used to be a function called enable, but it has been deprecated. Now we need to call the request method. And for the method we're going to specify ETH request accounts. So the user is going to see a pop up that say hey, do you want to allow this DAP to connect to your wallet? And if you refuse, the DAP won't even be able to know what is the address of the user. And this is a safety mechanism to protect the privacy of user.
00:08:47.330 - 00:09:20.778, Speaker A: So normally the user will accept. And after we going to ask the network ID to which Metamask is connected. So before we were able to directly get this on the window Ethereum object exported by Metamask, but the API also was deprecated. So now we need to call this method. And after we're going to initialize a connection to the blockchain with the Ethers library. So I told you before that there are two library to connect to Ethereum, smart contract ethers and web3. So here we import ethers from above.
00:09:20.778 - 00:09:54.902, Speaker A: And the way you instantiate a connection with ethers is you do ethers providers web3 provider, we pass it the provider. And here basically we overwrite the provider object. So now it becomes an ethers provider. Then we get a signer object from ethers because we're going to need it to connect to our smart contract. And after here it's very important we create an ethers contract object with which we will be able to interact with our smart contract. So here, contract uppercase also comes from ethers and it needs a couple of info. First it needs the address of the smart contract.
00:09:54.902 - 00:10:38.778, Speaker A: So we've also imported a json file here, simplestorage JSON and this is a json file that is produced by truffle when you compile and deploy your smart contract. And it has a section with the address of the smart contract under the key networks. Each network key is indexed with the network ID. So we know the network ID because Metamask told us. And after we can get the address with address, we also need to know the ABI, which is a json document that describe the solidity interface of our smart contract. So we also get it in the json document of truffle and we also pass the signer object that we created just before. This is very important.
00:10:38.778 - 00:11:20.386, Speaker A: This allow us to send transaction and after we return our simple storage object and we stop the execution of the function. And if we don't have a provider, so this if here is not executed and instead we're going to reject the promise with an error message. That means the user doesn't have metamask installed. So just to be clear, if you followed some of my tutorial before, you may have noticed that this code I used before to connect to the blockchain was a little bit different. So I've updated my code. What you see here is the most up to date way to do it. Okay, so this is a good first step for the front end integration.
00:11:20.386 - 00:12:02.114, Speaker A: Next we're going to do the integration with our react application. All right, so let's see this integration with react. So we are going to another file app, JS. So this is our main react component. So you don't have to use react in order to integrate with a smart contract on binance smart chain, but that's the most standard solution so I recommend to use react. So first we import some object required for react. Then we import the get blockchain function we defined just before.
00:12:02.114 - 00:12:41.002, Speaker A: And here we have our main component app. So first we define the state of our component. So this is some dynamic data related to our component. So first we have the JavaScript object simple storage that allows to interact with our smart contract, then data. That's the value of the data variable in the smart contract. So the first element of the array is the value itself and the second element is a function to update the data state. So this use state thing, this is related to react, this is not specific to the blockchain.
00:12:41.002 - 00:13:16.182, Speaker A: So let me scroll down. So when a component is first loaded, so this if statement here is confined, that simple storage and data are undefined. So we are going to return loading to the user. Then what's going to happen is that this code here is going to be executed. So when the component first load, the init function here is going to be executed. So we're going to get the simple storage object from get blockchain. Then we are going to call the read data function on smart contract and we're going to get the value for the data variable.
00:13:16.182 - 00:13:56.434, Speaker A: Then we are going to save our state. So first we're going to save the simple storage object thanks to sets, simple storage and same thing for data and react, after it sees that the state has been updated it's going to rerender the component. So this time the if statement here, this is not undefined. So we're not going to have this branch executed, but instead we're going to return this thing. So here we render some HTML. So the class here are related to bootstrap. A CSS framework that I like to use could allow you to get some nice styling, very easily.
00:13:56.434 - 00:14:31.342, Speaker A: But the main point here is to see how we can populate the data with JavaScript. So that's we see inside the curly braces. So here we're going to render the data variable, and since this is not going to be a JavaScript number, but this is going to be an instance of big number. This is JavaScript library to deal with really big number that are too big for JavaScript. And in order to transform a JavaScript big number into a representation we can call the two string function. This is to visualize the data, and after to modify the data we're going to have a form. So here we have an input.
00:14:31.342 - 00:15:11.502, Speaker A: So that's where we're going to specify the new value for data, then a button to submit the new value. And when we click on submit it's going to fire the on submit event and we attached the update data function. So we go up, we go up and here we define this update data function. So it's going to receive an even object from the web browser. So we want to prevent the form from being submitted, otherwise it's going to be a full page reload. It's not what we want. Then we extract the value of the input thanks to this line.
00:15:11.502 - 00:15:52.070, Speaker A: Then we're going to send the transaction to the smart contract. So we use the simple storage object that is stored in the state of the component and we call update data and we pass the new value of data and we await this because this is an async operation that is sent to the network. So then Metamask is going to take over and show the user a pop up to confirm the transaction. The user is going to confirm this. Then we have a transaction object, but at this stage the transaction is not mined yet, it's just sent to the network. We need to wait for a miner to mine our transaction. And after we call the wait function, and this is going to wait until the transaction is mined.
00:15:52.070 - 00:16:18.310, Speaker A: And after we need to update the state of our smart contract because the data variable was changed. So now we call read data, we have the new value of data and then we update our internal state. And when react, see that our internal state has been updated. It's going to rerender our component. So this is going to be rerender here with the new value of data. So that's how we keep our component up to date. Okay, so that's it for the front end code.
00:16:18.310 - 00:17:09.810, Speaker A: And next we're going to do a demo. Next for the demo you're going to need to install metamask in your browser. And after when it's installed, you will need to import the mnemonic phrase that you use in truffle config. Just as a reminder, before I mentioned in truffle config that you need to put a mnemonic phrase here, and personally I just use the one that is generated by the truffle develop command. So you put your mnemonic here, and after when you have metamask installed, you need to import this mnemonic phrase and you're going to select the first address that is generated with this mnemonic phrase. And of course you also need to have some BnB testnet token. You can get some with the faucet of the BnB testnet.
00:17:09.810 - 00:18:00.642, Speaker A: And after we're going to start the front end. So in another terminal window you go in front end, you run NPm install to install all the dependency, and after you run NPM start to start the front end server. And since we already deploy our smart contract to the binance smart chain testnet, it exported the address in a json document, and this json document is imported by the front end. So that's how we can link the smart contract to the front end. So NPM start estart the front end server. It's going to take you to your browser, it's going to load localhost column 3000 and then you go to Metamask. And here you need to add a network for the balance match and testnet.
00:18:00.642 - 00:18:41.662, Speaker A: So here, this is cut off on my screen, but you have to click on custom RPC. And for the different parameters of the binance matching testnet, you can Google it, you'll find the RPC URL, the chain ID, everything. And once you have added this network, you select it. So me is BSc testnet, okay, so here, actually you can see the, so I select BSC testnet. All right. And by the way, if you use the faucet properly, then you should see that you have some BNB token here. So even though it say ETH, this is actually BNB token.
00:18:41.662 - 00:19:08.694, Speaker A: And then after we're going to reload the front end and you should see this. So we're going to change the data. So for example, we're going to put ten click on submit. We see the confirmation pop up of Metamask. So we agree with the transaction, we click on confirm, we wait a little bit that the transaction is mine. Then you're going to see a notification of Metamask. And here automatically you can see the data that is updated.
00:19:08.694 - 00:19:34.126, Speaker A: And if we try to do it again. For example, five we confirm. We wait a bit. This is mine and the front end is automatically updated. It works. There are really a lot of moving parts when you want to connect a front end to a smart contract. Personally, after having done some smart contract work and front end integration, I realized I prefer to work on smart contract because I find it more simple and it pays better.
00:19:34.126 - 00:19:50.980, Speaker A: But sometimes you have to do the front end as well, especially if you are in a small team and you will soon realize that working with Metamask as a developer can be really annoying. Fortunately for you, I've prepared this video where I give you my best tips to debug Metamask. I will see you there.
