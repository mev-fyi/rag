00:00:00.330 - 00:00:36.066, Speaker A: Hello, this is julian and you are on idoblocks. And in this video I'm going to teach you how we can declare and manipulate mappings in solidity. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL. So if you are familiar with object literal in JavaScript. So when you declare an object with the curly braces like this, and you define some keys and some value b two, et cetera.
00:00:36.066 - 00:01:26.834, Speaker A: So, mappings in solidity, they're a little bit similar to this object literal. In JavaScript you have keys and values and you can store data in a structured ways to compare to arrays that we saw in the previous videos. With mapping, the big advantage is that it's much easier to retrieve a specific value. So for example, if you want to retrieve a specific entry, all you need to do is to know the value of the key and you'll be able to access the value. The disadvantage compared to arrays is that it's not possible to iterate through all the entries of a mapping. So in your smart contract you probably need to combine both arrays and mappings in order to represent collection of data. Okay, so that's it for this general introduction.
00:01:26.834 - 00:02:11.474, Speaker A: So now let's get into the detail. So in this video I'm going to show different things. How to declare mappings, how to do all the basic operation, create, read, update and delete element from a mapping, what are default value in mapping? Also we'll see some exotic mapping like how to do nested mapping. So mapping inside a mapping, and also how to have a mapping with an array inside of it. So let's get started with declare mapping. Okay, so you declare a mapping as a state variable and you use the mapping keyword for that. And so between parentheses you're going to first indicate the type of the keys.
00:02:11.474 - 00:03:01.218, Speaker A: So for example, I want my keys to be address and then you use the arrow notation to specify the type of the value. So for example, if I want my values to be integer, then I will use the un keyword and after that you write the name of the mapping. So for example, this mapping could be balances. So the address are the address of some user and the integer here are the balances. Okay, so now we have declared our mapping, we need to make use of it. So let's declare a function so foo and it's going to be external. Okay, first let's see how to add element to our mapping.
00:03:01.218 - 00:03:38.066, Speaker A: So first we reference our mapping by using its variable name, so balances. Then we use square brackets to specify the key. And for example I want to specify the address of the sender of the transaction. So that's Msg sender and I want to put inside for example 100. So it's very easy. So now next step is to read our mapping. So for that you reference the mapping and the key you want to read and that's it.
00:03:38.066 - 00:04:03.610, Speaker A: Super easy. And now how to update it. So you reference the key that you want to update and you just assign a new value. Exactly. When you add a new value here. Yeah, super easy. And now what about if you want to delete an entry? So delete.
00:04:03.610 - 00:04:39.554, Speaker A: So in this case you use the delete keyword and you specify the entry to be removed. Super easy. So there is one thing to understand about mapping and default value because that's really really not intuitive. So default values. So with mappings basically every keys are accessible, even the one that do not exist. Let me try to be more clear. So let's say here I try to reference some address that do not exist.
00:04:39.554 - 00:05:28.274, Speaker A: So some address that do not exist, well this will have a value and it will map to the zero value. Why? Because the default value for uint is zero. So if you try to accept entries that do not exist, you still get a value and that's the default value. If instead of u in here as a value, let's say I would have a boolean, then the value that I get for an entry that do not exist instead would be false, because false is a default value for boolean. So you get the id. Okay, let's put back my u in here. So this behavior is very very different from JavaScript.
00:05:28.274 - 00:06:11.058, Speaker A: In JavaScript, if you try to access an entry in an object literal that do not exist, what do you get? Tick tac, tick tac, tic tac. You are fired. You don't have the right answer. Sorry, I'm getting crazy. Okay, so in this case you get undefined, right? Yeah, so this is how it works in JavaScript, but in three Dt you get the default value of the time. All right, next, number four, exotic mapping, nested mapping. Okay, so exotic mapping, one, and this is a situation that you're going to encounter often.
00:06:11.058 - 00:06:57.458, Speaker A: So you want to declare a mapping inside a mapping. Actually I need to first declare this mapping above. So first let's start with the outer mapping mapping like this. Okay, so let's say that my outer key is address and inside it's going to be another mapping. So here I reuse the mapping keyword and for example I want a mapping of address to Boolean. So just to give you an example application of what this mapping might be useful for. So this can be used in the ERC 20 token for the approval system.
00:06:57.458 - 00:07:41.694, Speaker A: So in ERC 20 token, one owner of coin can allow another address to spend coin on its behalf. So the first address will be the actual owner of the coin and the second address will be another address that was approved to spend coin on his or her behalf. And the boolean value tells you if this address is approved or not. So here we could call this approved, for example. Now how can we do all the four operation, create, read, update and delete. So let's see this. So first if we want to add a new value, so msg sender, let's say.
00:07:41.694 - 00:08:16.220, Speaker A: Yeah, we reference the sender of the transaction, then we reference another address, like for example we call this spender. So here let me add a new argument to my function, spender. And finally you give the boolean value. So here you can set it to true. So that's how you add a value. Now how can you read a value? Well for that you need to reference the two keys. So msg sender and the second address as well.
00:08:16.220 - 00:09:04.166, Speaker A: If you wanted to update a value then it's the same syntax as for adding value. So instead of true it's going to be false. Yeah, and if you want to delete a value, so once again you use the delete keyword and you reference the two keys and that's how you do it. Yeah, so that was the first example of the exotic mapping. Then I wanted to show you another exotic mapping array inside mapping. So for that we need to declare our mapping first. So let's say that for the key we still have address, but for the values this time we're going to have an array of integers.
00:09:04.166 - 00:09:32.622, Speaker A: I've already shown you in previous video how we can declare arrays. If this is not clear for you, then go back to this video. So here I reuse the syntax for declaring array. And finally I specify the name of the mapping. So for example, this can be scores. Yeah, let's say this is a game and this store different score for a specific player. Okay, so let's see how we can manipulate this mapping.
00:09:32.622 - 00:10:08.800, Speaker A: So exotic mapping two. Okay, so this mapping, oh by the way guys, just before I made a mistake, I actually mean here to call this approved. My bad. Proofed, approved, approved and approved. I was absent minded. So let's reference our mapping scores and here we'll give it an address. As usual use MSG sender, but you can use whatever address you want.
00:10:08.800 - 00:11:04.926, Speaker A: So coming from the role of JavaScript, you might think that first we need to sort of instantiate an array. So something like new Uint and maybe give it length and only after we can start to actually use it. So once we have it then we can call the push method on it, et cetera. However in solidity you don't need to do the first step because with mapping basically everything is already instantiated inside and have a default value. So you already have an array here. Because the value is an array, it already exists so you don't need this step and you can directly call the push method on your array. So here I add my first element and if I want to keep adding new element then I keep calling the push method like a regular array.
00:11:04.926 - 00:11:52.718, Speaker A: If I want to read a value from my nested array here, how would I do this? Well, for this, first I reference the key of the outer key and then I reference the index that I want to access in my array. How about if I want to update an element of the nested array? Well in this case I'm going to use this notation here. I reference the outer key, the inner key, and then I reference the new value. And if I want to delete an entry of my array then I use the delete keyword and once again I reference my two keys like this. All right, so that's pretty much it. So in this video I show you what are mappings in solidity. I show you how to create, read, update and delete value inside them.
00:11:52.718 - 00:12:34.460, Speaker A: I show you the subtleties of the default value of mapping and how all values have default value in mapping, even for the entries you haven't created. And after I show you two common cases of exotic mapping, so people often struggle there. So here you have a clear example of how you can manipulate nested mapping and array inside mapping. So mapping and arrays are great, but sometime we want to represent custom data a little bit like a class in JavaScript with different field. And for this we have struct and that's the next thing I'm going to show you in the next video. Thanks for watching and see you for the next video.
