00:00:00.250 - 00:00:31.170, Speaker A: Hey, this is julian and you are on idoblogs. And in this video I'm going to show you how we can send ether from a smart contract to a regular address or another smart contract. Transferring ether in solidity. Smart contract is really important because what makes smart contract really powerful is that you can do a financial transaction with them. So pay attention to this video. So in this video, I'm going to show you five things. First, I'm going to show you the transfer function to transfer ether.
00:00:31.170 - 00:01:01.194, Speaker A: Then I'm going to show you the difference between address and address payable type. Then we're going to see how we can custom address payable type. Then I'm going to show you the special case of the MSG standard built in variable. And finally, we'll see the difference between the send and the transfer method to transfer ether. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL.
00:01:01.194 - 00:01:34.810, Speaker A: All right, so let's get started with the transfer function. So I want my smart contract to send ether to another address. This other address can be a regular address controlled by a human, or it can be the address of another smart contract. So the first thing is to create a function. So we going to call this function send ether and it's going to accept as an argument the address of the recipient address. And we call this recipient and we make this external. Okay.
00:01:34.810 - 00:02:24.518, Speaker A: So in order to send ether to this recipient, all we have to do is to reference the address of the recipient, then transfer. Then we specify the amount in way so we can do it directly like this 100 way, for example. Or we can use some built in unit like one ether. So this notation means transfer one ether from this smart contract to recipient. By the way, in order for the transfer function to work, you do need to have enough ether in your smart contract. Otherwise it's going to throw an error and the whole transaction is going to be canceled. So as you can see here, I have an error by solidity.
00:02:24.518 - 00:03:17.306, Speaker A: Solidity is not happy and say send and transfer are only available for object of type address payable, not address. What is this address payable thing? Well, I told you just before that there are two type for addresses. One type is address and the other is address payable. So if we want to use the transfer method, we need to declare our argument as an address payable type. So here we add the payable type to our recipient variable and the error disappear and this transfer will work. By the way, don't be confused with the payable keyword that I show you in the previous video. So the payable keyword for function is something that you add in the function signature, and it does not mean the same thing.
00:03:17.306 - 00:04:04.138, Speaker A: This means you can send some ether. When you call this function without this keyword, you cannot send ether to this function, but the address payable keyword means the smart contract can send ether to this address. So this is from the smart contract to the address, but this one is from the address to the smart contract. Okay, so let me get rid of this to avoid any confusion. And the last thing I'd like to show you about declaring address payable is that if you want to declare an array of address payable, the syntax is not really obvious. So for an array of address payable, you use address payable keyword like this. And then you add square bracket and then the name of your variable like recipient, for example.
00:04:04.138 - 00:04:39.510, Speaker A: So it's not obvious here that you can actually use this notation with a gap between address and payable, but that's the way you have to declare it. Next, let's see how we can do typecasting with address payable. So typecasting means that you change the type of a variable and it's not possible to do typecasting from any type to any other type. There are some rules. So for address payable, the typecasting that you can do is from an address payable type to an address type, but not the other way around. And it kind of makes sense. So let's see how this works.
00:04:39.510 - 00:05:37.894, Speaker A: Let's say that I have an address variable that we're going to type, we're going to call a, and I want to cast recipient into this address type. So here I just assign recipient to the a variable. And now what happened? If I try to transfer using the a variable, a dot transfer of 100, what's going to happen? Then we have an error. Even though initially was an address payable, because I cast this into this a variable, then I cannot use the transfer function anymore. So be really careful if you want to send ether to an address, and first you declare it as an address payable, make sure that if you copy this address to another variable, this other variable also has the address payable type. Otherwise it's not going to work. So next, let's see the special case of msg sender.
00:05:37.894 - 00:06:35.946, Speaker A: So Msg sender is the address that send the transactions. The type of msg sender is not address, but is address payable. So if we want to send money to msg sender, then all we have to do is Msgsender transfer. Then we specify how much we want to send and the last thing I'd like to tell you is the difference between the send and the transfer function. So so far I talked of the transfer function to transfer ether, but it's also possible to use the send functions. For example, recipient send one ether, it will send one ether to the recipient. So why do we have two function to do ether transfer? With a send function? If you send ether to an address, which is a smart contract, if this recipient smart contract throw an error, send is going to return a false boolean value.
00:06:35.946 - 00:07:20.278, Speaker A: Otherwise, if the execution in the recipient smart contract works well, it's going to return true. However, with a transfer function, it's going to propagate the error. So if you have an error in a recipient smart contract, then this error is going to propagate to your current smart contract and the whole transaction is going to be canceled. So most of the time you probably want to use transfer. But if for some reason you want to deal with the error in your smart contract, then you should use the send function. The last thing before we finish this video, the address payable type was introduced in solidity 0.5. So if you are reading some old smart contract, don't be surprised if you are able to send ether to addresses that don't have the address payable type.
00:07:20.278 - 00:07:33.500, Speaker A: All right, that's it for transferring ether from a smart contract to an address or another smart contract. In the next video I will show you how a smart contract can all a function of another smart contract. Thanks for watching.
