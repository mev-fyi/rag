00:00:00.490 - 00:00:54.698, Speaker A: ERC 721 is a free open source standard that describes how to build nonfungible tokens on the Ethereum blockchain. All ERC 721 tokens are unique from one another. During this tutorial, I'll go through how to develop, deploy, and verify an ERC 721 token while using hard hat. Let's get into it hey, my name is Anthony at eat the blocks we help teach web three development. The first thing that we want to do is open up a terminal and navigate to our desktop. Let's make a folder for our project now CD into that folder. We have to install all of these dependencies for our project in order to do what we want it to do, which is deploy and verify an ERC 721 token.
00:00:54.698 - 00:01:51.406, Speaker A: On ethereum. We're also setting up hard hat, which is a Javascript framework, and it's going to help us deploy and verify our smart contract. The install of these dependencies might take some time to finish, so just sit back, be patient, but once they are installed, you can open up your project into a code editor. Now that we have our project open in a code editor, let's first change the name of our smart contract. This contract came with hard hat, and it's just a template so we can do whatever we want to it. Let's name our contract oneofakind soul as we jump into the template contract that came with hard hat, we can delete everything inside of this contract that we don't actually need and modify it to do what we want it to do. So let's add our token name at the top.
00:01:51.406 - 00:02:56.950, Speaker A: We have to import one of the open Zeppelin contracts that we installed, called ERC 721, and we'll be inheriting from that contract into our own smart contract. To implement this NFT function that we want to do inside of a constructor function, we'll set some parameters for our token and give it a name and a symbol, and that's literally it. Here's a very simple ERC 721 NFT token. It has everything that we need for this demonstration. So now we can move on to the next part. We now have to modify the hard hat configuration script, which is going to be necessary for actually communicating with the node provider URL and our metamask account at the top of the hard hat config script. We have to import a few things, such as the nomic labs plugin for Etherscan and a Env dependency.
00:02:56.950 - 00:03:50.840, Speaker A: Let's also specify the network that we want to actually deploy to today. So in our case, we want to deploy to the Ethereum Garoli testnet. We also want to set up the Etherscan plugin API key so that we can verify this contract with hard hat after we deploy it. Now we have to modify our deploy script in order to successfully deploy our token. With hard hat, we can delete everything inside of this file that we don't need. EthersJs is a great library for ethereum development, so we'll use that to define our token during the deployment process. Basically, ethers is communicating with our smart contract and setting up the token credentials from inside of our constructor function.
00:03:50.840 - 00:04:59.100, Speaker A: Here we can specify our token name and symbol, and then we can console log our deployment so it'll let us know if our token was successfully deployed or not. After we complete our deployment script, we want to create a env file that holds our sensitive information, such as our metamask private key, our alchemy node URL, endpoint, and an ether scan API key. You never want to share this information with anybody because you'll be vulnerable to all kinds of hacks. So it's best practice to really keep this information private no matter what. But once you set your variables and they match with the same variables from your hard hat config file, then your project will be able to actually communicate with alchemy, metamask and Etherscan. Also add dot config to the end of this require statement. Finally, we can start the deployment process by opening up a terminal and compiling our contract to check for any errors that might pop up.
00:04:59.100 - 00:05:57.498, Speaker A: Since we don't have any errors, we can now deploy our contract with hard hat to the Ethereum Garoli testnet, and we'll use this command to do that. Keep in mind that the actual deployment process will take some time, because now we're interacting with Ethereum and our contract needs to be processed by a validator in order to be published to the blockchain. Okay, sweet. So it looks like our deployment was successful, and here is our smart contract address that we can now view on Etherscan. If you've made it this far, congratulate yourself because you now deployed an NFT to an Ethereum testnet. But let's take it one step further and actually verify this contract with hard hat so that we can interact with our NFT on a block explorer. We do this by specifying our token name and our token symbol that we set up inside of our deployment script.
00:05:57.498 - 00:06:51.546, Speaker A: This command tells Hardhat to do a few things. It's basically saying that we want to verify our contract that was just deployed which network to verify from our solidity contract name and the actual contract address that was created during the deployment process. Finally, our constructor arguments, which were the name and symbol, are going to be put at the end of this command inside of a pair of quotes. Run this command and wait a little bit for Hardhat to actually do its thing and verify. And there it is. Hardhat successfully verified our NFT token, so now we can open up efish scan again and refresh the page to actually interact with our NFT. Here is the verified source code and now we have the ability to read and write to our smart contract.
00:06:51.546 - 00:07:17.220, Speaker A: And that's it. I hope you learned something new today and if you would like to take your skills to that next level, I would recommend checking out our courses online and learning from the pros here at Etherblocks. We have great teachers and and a ton of lessons available that will help you grow as a blockchain developer. The knowledge that we teach are core concepts around blockchain development, which will give you the foundation you'll need to land a job in web three.
