00:00:00.330 - 00:00:49.878, Speaker A: In the last video I told you what are the different kind of errors when you develop a solidity smart contract? And in this video I'm going to tell you how you can simply find and solve all your syntax errors in solidity. This video is an extract of a full course on smart contract debugging for solidity. You can create a free account on Edoblox Pro to have access of the source code of the free episodes. Syntax error are the most simple kind of errors to troubleshoot, so you should be able to figure it out. After you watch this video, I'm going to show you how you can do it with remix the online ide for solidity, but also how you can do it with any code editor. So I have this very simple smart contract to give you an example. This is a storage smart contract where we have a private variable and we can change the value of this private variable.
00:00:49.878 - 00:01:30.486, Speaker A: So let's say that I forgot my semicolum on line seven. So let's remove this and what's going to happen? I see this error icon appearing on the side, and if I hover on it I see an explanation. So it says passer error, expected semicolum, but got something else. So with a remix ide you already have syntax highlighting already set up for you. You don't need to do anything, and every time you change your smart contract remix, it's going to rerun the solidity compiler and show you any errors. For each of this error, you always have a message explaining what is the error, and sometimes you'll have some hint on how to fix it. So that's very convenient.
00:01:30.486 - 00:02:12.694, Speaker A: Forgetting a semicolum is a very common kind of syntax error. Another very common type of error is forgetting or making a mistake on the memory location of non scalar types. So non scalar types are arrays and mapping basically everything that has several value. So for example here if I replace call data by memory, okay, let me fix the error before I'm going to have another error. So here it tells me that I cannot have a memory data location for an external function, but instead it needs to be called data. So let me change this. Another common kind of error is if you forget the visibility of a function.
00:02:12.694 - 00:02:43.678, Speaker A: So let me remove this, and then it's going to tell me that no visibility specified. Did you intend to add public? So it means that I need to specify a visibility here. So let me put back external here. Another very common syntax error is type mismatch. So if you have a variable of a certain type and you're trying to assign it to a variable of another type. So let's try this. Let's define an integer and I will call it my int semicolon.
00:02:43.678 - 00:03:11.260, Speaker A: I'm going to try to assign underscore data to my int. So let's see what happened. And here we have another error, and this time it says tab string code data is not convertible to expected type. Integer 256. It basically means these two types are not compatible. So either I have to change the type of this variable or I need to change the type of the argument in a set function. So let me get rid of this line.
00:03:11.260 - 00:03:44.958, Speaker A: Another very common kind of error is if you try to reference a variable or a function or a contract that does not exist. So let me try it. So let's say that here, let's say I've defined a variable that I call, I don't know, counter. And then in this function I try to reference it, but I misspell it with two off, for example, counter equal one. Then I will see an error. Undeclared identifier. Did you meet counter? So he's able to infer that we actually mean to reference this variable here.
00:03:44.958 - 00:04:17.450, Speaker A: Same thing with function. So if I say my funk and then I call it public, no need to define anything inside. I think I deleted something. Okay, so I get rid of my counter here and I try to execute my funk, but let's say that I misspell it. So again here is going to say unclear identity. Fire. Did you mean my funk? And the same thing with a smart contract that does not exist.
00:04:17.450 - 00:04:52.774, Speaker A: Right? So let's get rid of this. And let's also get rid of this. Okay, and there is still a last type of error that I like to show you that happen quite often is if you forget the payable keyword. So let's say that in this function you try to access msg value. So basically that is the ether amount that was sent with the transaction. We also actually need to define an integer variable for this. So I can say integer amount semicolon.
00:04:52.774 - 00:05:41.994, Speaker A: Okay, so inside this amount variable, I try to store the amount of ether that was sent with the transaction. And here I'll have an error that says this can only be used in payable public function. So it basically means, well, since you're trying to access this value, it means that potentially you consider that this function can receive some ether, but there is no payable keyword. So this function is going to reject your ether. So here, need to add the payable keyword and you will get rid of the error. So that's only one kind of payable error, but there is another can which is with the address type. So here let's change this and instead we'll define an address that we call two and we'll try to send some ether to this address.
00:05:41.994 - 00:06:21.506, Speaker A: So here we'll use the transfer method, and here let's try to send 1000 away. And here let's comment this out. And here we have an arrow member transfer not found. And here we have an arrow, it's a member transfer not found or not visible. Okay, so this error message is not very clear, but basically you're trying to transfer money to an address that you haven't defined as payable. So actually address and address payable in solidity 0.5.0 are two different type, and the transfer method is only available on the type address payable.
00:06:21.506 - 00:07:20.970, Speaker A: What I've just said is also valid. If you assign these two address to another variable, and that after with this other variable then you try to execute the transfer method. So let me show you what I mean exactly. So let's say that I define another variable that I will call address two, for example, and to two is going to receive the address of two, okay? And then I'm not going to transfer money using the two variable, but the two underscore two, and then I have the same error as before. So even though these two is address payable here, when I cast an address payable into just an address, then I lose the ability to use the transfer function. So this example might seem a little bit contrived, but you might have in your smart contract a place where you store an address and you pay this address in another function. And in this case you need to remember this and put address payable from the beginning to the end.
00:07:20.970 - 00:08:06.360, Speaker A: All right, so let me get rid of this and I'm going to uncomment this and put back the data argument string, call data, underscore data. Okay, so what I've showed you so far is compiler errors. If there is a compiler error, you cannot compile your smart contract and you cannot deploy it. But there is another kind of feedback that the syntax highlighter is going to show you. So here, let me comment out this line, and let's transform this function into a call function. So a function that does not modify the blockchain. So here we'll say that it returns a string in memory, and here it's going to return hello word.
00:08:06.360 - 00:08:36.378, Speaker A: Okay, this time I have another feedback. So you see this warning side here. So there are several warning first there is an unused function parameter and then there is a second warning that says function state mutability can be restricted to pure. So if I do nothing this will be considered a transaction by remix. But it's actually not good because we don't modify the blockchain. So it shouldn't be a transaction but it should be a call. And for this you need to add the pure keyword.
00:08:36.378 - 00:09:30.914, Speaker A: If you add the view keyword it will work too. So if you have a warning you are still able to compile your smart contract, contrary to when you have an error, but it's just the solidity compiler telling you hey, I think you might have done a mistake, you better check this. But it's not obligatory to act on a warning. If you want to disable warnings then you need to go to the compile tab and here you can tick this option hide warnings so let me untick this and also in this tab here you can see the warning and the errors. I would like to also quickly tell you about what is called static analysis. Static analysis is a different kind of analysis, a little bit similar to warning, but it's more like general advice. If you scroll down then you will see all the recommendation of the static analysis and as you can see you can customize the static analysis and if you don't want it at all then you can uncheck it here.
00:09:30.914 - 00:10:11.370, Speaker A: By default it's also set on auto run, which means that every time you change your smart contract then the static analysis is going to run again. Personally I don't use this and I prefer to use a customized linter. Outside of remix, if you are using visual studio code, you can very easily enable solidity syntax highlighting exactly like you have in remix. By installing this extension, it's just called solidity. The author is Joanne Blanco and it's basically the most popular extension for solidity for visual studio code. If you have another code editor like Atom or VIm, there are also some extension to do solidity syntax highlighting. Alright, so that's it for fixing the syntax error of solidity.
