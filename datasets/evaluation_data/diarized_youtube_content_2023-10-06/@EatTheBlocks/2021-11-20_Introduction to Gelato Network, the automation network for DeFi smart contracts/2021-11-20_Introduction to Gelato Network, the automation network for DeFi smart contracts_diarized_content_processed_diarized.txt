00:00:00.250 - 00:00:09.610, Speaker A: Gelato is an automation network for smart contracts. It allows to automatically execute transactions under certain conditions. It can be used by DeFi protocols.
00:00:09.690 - 00:00:12.554, Speaker B: But also by traders to do dollar cost averaging.
00:00:12.602 - 00:00:13.166, Speaker C: For example.
00:00:13.268 - 00:00:17.006, Speaker D: In this video I will introduce what is Gelato, and I will explain how.
00:00:17.028 - 00:00:18.958, Speaker E: You can set up an automation with it.
00:00:19.044 - 00:00:20.762, Speaker A: If you are new here, I'm Julian.
00:00:20.826 - 00:01:12.866, Speaker B: And on iddoblocks I teach blockchain development. Many DeFi protocols relies on a network of boats. For example, lending protocols like AAvE or compound requires boats to monitor and liquidate borrowing positions whose collateral goes below the liquidation threshold. But it takes a lot of time for developers to build, monitor, and maintain these boats. Also, if the boats of a protocol are only run by the developers of the protocol, it's too centralized and it becomes a central point of failure. To solve this centralization problem, DeFi protocols provide incentives so that many other actors run boats and perform the required task to maintain the system. But each DeFi project maintained their own boat ecosystem separately, which leads to inefficiencies and higher cost.
00:01:12.866 - 00:01:48.282, Speaker B: The gelato network was created to solve this problem. Gelato was created in February 2020. It recently received $11 million in funding and has a team of twelve people. It's available on Ethereum main net, Ethereum, Testnets, Polygon, Arbitrum, and Phantom. Gelato provides a plug and play automation network that anybody can use to run boats and automatically execute transactions under certain conditions. The main target users of gelato are developers who create DeFi protocols. For example, with a project called Sorbet Finance, you can create limit orders on uniswap.
00:01:48.282 - 00:02:28.086, Speaker B: End users only see a nice user interface, but behind the hood it's powered by the gelato network. It's also possible for end users to directly use the gelato network by using its user interface, and I will show you how to do this later in this video. So that's it for this overview of Gelato. Next, I will explain how gelato works. Gelato consists of a network of relay servers that are being incentivized to execute certain tasks for the users of your DAP. These relay servers are also called executors. Executors are paid by provider in ETH in exchange for running their automation infrastructure.
00:02:28.086 - 00:03:11.190, Speaker B: There are two kinds of providers, external providers which pay executors on behalf of their DAP user. This improve the user experience of the DAP user by removing the necessity of depositing ETH on gelato. And we also have self providers, which are end users or DAP themselves that pay executors directly and have to deposit ether on gelato before being able to use it. When you set up an automation, it's going to emit an event in a smart contract. The executors will pick up on that and start to monitor the trigger of the automation. Every time the trigger fires, the executives will send a transaction to the target smart contract. There can be three triggers, a time interval at every block or through a smart contract.
00:03:11.190 - 00:03:26.830, Speaker B: In this case, this smart contract is called a resolver and it will have a function to tell if the automation should be run or not. Okay, so that's it for the explanation on how gelato works. Next, we are going to set up an automation with Gelato.
00:03:30.530 - 00:03:38.046, Speaker E: So now I'm going to show you how to set up smart contract automation with Gelato. And for this automation we have a yield farming contract.
00:03:38.158 - 00:03:41.330, Speaker C: Once it has enough profits, we can withdraw our money.
00:03:41.400 - 00:03:44.914, Speaker E: We need to regularly check that we can withdraw our money and for this.
00:03:44.952 - 00:03:48.226, Speaker C: We will use a gelato automation. This is just an example.
00:03:48.328 - 00:03:55.410, Speaker E: And of course for your specific use case, your automation can be completely different. The first step is to go to the app of Gelato.
00:03:55.490 - 00:03:57.586, Speaker C: Then you connect your metamask wallet.
00:03:57.698 - 00:04:07.622, Speaker E: You will note that we are connected to Polygon. So we have a resolver smart contract that we already deployed. It's going to tell Gelato when we can trigger the automation.
00:04:07.766 - 00:04:12.666, Speaker C: And for this it has this check and harvest function. This function is going to call the.
00:04:12.688 - 00:04:42.534, Speaker E: Yield farming contract and check if we have enough profit. If that's the case, we are going to return true along with another piece of data that specifies the function to be called as well as the argument to be passed back to the UI of Gelato. So I will go ahead and create a task. First we have to input a name for our task. Then we have to put the address of the smart contract that we are going to call in our automation as well as which function we want to call. It's possible to predefined the argument that.
00:04:42.572 - 00:04:44.278, Speaker C: Will be passed to the function called.
00:04:44.364 - 00:04:54.780, Speaker E: And another option is to have a more dynamic setup where the resolver smart contract returns the argument to be passed to the function. And that's what we'll do. So we put the resolver address.
00:04:57.310 - 00:04:57.722, Speaker C: And.
00:04:57.776 - 00:04:59.578, Speaker E: We choose the function to be called.
00:04:59.664 - 00:05:02.314, Speaker C: To tell us if the automation should be triggered.
00:05:02.442 - 00:05:07.070, Speaker E: And after we have to deposit some funds to gelato to pay for the executions.
00:05:10.370 - 00:05:12.958, Speaker C: Okay, and then the balance should appear right here.
00:05:13.044 - 00:05:14.506, Speaker E: And then we create the task.
00:05:14.538 - 00:05:16.322, Speaker C: It's going to send a transaction and.
00:05:16.376 - 00:05:25.896, Speaker E: Once it's mined we should get redirected to this page. So this is the task page. So you can see your task as.
00:05:25.918 - 00:05:28.212, Speaker C: Well as the executions that were triggered.
00:05:28.276 - 00:05:29.256, Speaker E: And if you go back to the.
00:05:29.278 - 00:05:31.196, Speaker C: Home page under my task, you can.
00:05:31.218 - 00:05:32.510, Speaker E: See our task here.
00:05:33.040 - 00:05:35.084, Speaker C: And we also have the leaderboard which.
00:05:35.122 - 00:05:37.096, Speaker E: Contain every one task and it's solid.
00:05:37.128 - 00:05:42.616, Speaker C: By the amount of fee that they have paid. For example, this task has 2000 executions.
00:05:42.728 - 00:05:45.480, Speaker B: And that's it for this intro to the gelato network.
00:05:45.560 - 00:05:48.940, Speaker D: Next go to the website of Gelato and try it out for yourself.
00:05:49.090 - 00:05:57.984, Speaker A: You can choose one of the Ethereum testnets and you won't have to spend any money. And if you need help you can check out their documentation or go in their discord.
00:05:58.032 - 00:06:00.608, Speaker B: I've put all the relevant link in the description.
00:06:00.704 - 00:06:01.652, Speaker A: That's it for today.
00:06:01.706 - 00:06:02.290, Speaker B: See you next time.
