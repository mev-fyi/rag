00:00:00.650 - 00:00:40.950, Speaker A: In this video I'll show you two ways you can represent a collection of data in solidity using struct mapping and arrays. If you don't know me, I'm julian and on eidoblogs I teach blockchain development and how to find your first blockchain job. So this is my example spot contract and we want to represent a collection of struct. So let's define an array of struct. We're going to call this user. It's going to have two field, an ID field and a name. And so the first way with an array, so you can actually declare an array of struct.
00:00:40.950 - 00:01:39.062, Speaker A: So for that you declare an array of struct like this, you call this users and you'll probably also need to create another variable, next user ID. And you're going to increment this variable every time you create a new user. So let's see what are the different operation that you might want to do with this collection. So if you want to create a new user, so you use a next user ID, you create a new user struct and you push the result inside the user array and after you increment the next user ID. Now what if you want to get an individual element of this user's array? Well, you need to know what's the position in the user array. But you can probably use the same ID for the ID here and the index in the user's array so that it's easy to find back. Another thing you might want to do is return the whole collection of users.
00:01:39.062 - 00:02:22.902, Speaker A: So for that, well you can very easily access the users variable here and iterate over all the element. And last thing, if you want to delete an entry, well in this case it's a bit more difficult because you'll have a hole in the array and it's better to remove that hole. So you have to shift all the elements of the array so that there is no hole anymore. But it's going to cost you gas and it's going to make the code a bit more complex. So that's a bit annoying. So do we have another way to represent a collection of data? Yes, we can use a mapping. So in this case you represent a mapping of integers.
00:02:22.902 - 00:03:15.350, Speaker A: This will be the user IDs. And here it's going to point to a user struct and we're also going to call this users. So if you want to create a new user, well that's very similar to before. You just add a new element to the mapping and you increment next user ID if you want to read a specific user well, you need to know the user of this ID and after you can access this in the mapping. If you want to return a collection of all the users, it's not possible to directly iterate over the mapping. However, since you are using this ID field here for your user and you increment it, then all you have to do is to create a for loop from zero to next user ID. And dynamically you can create an array with all the entries of the mapping.
00:03:15.350 - 00:04:10.634, Speaker A: And if you want to delete an element from your user mapping. In this case it's more simple than with array because you won't have any hole in your mapping. You just have to use the delete keyword and it's going to reset the entry of the mapping. However, when you return a collection of user, this time you'll have to check that the entry is not empty. And if the entry is empty then you just skip this user and you go to the next one. So does this mean that representing a collection with mapping is better than with arrays? Well, in most cases, yes, except if the way that you identify each entry here is not with a system of integer that you increment every time. For example, if instead of an ID you use addresses, then it will not be possible to iterate through all the elements of the mapping.
00:04:10.634 - 00:04:19.500, Speaker A: And so in this case you will need to use an array. If you want to check out a lot of other cool tricks in solidity, check out this playlist on my channel, I'll see you there.
