00:00:00.250 - 00:00:08.618, Speaker A: Hello, this is julian and you're on it. The blocks. And in this video I'm gonna teach you how you can declare a function in a solidity smart contract.
00:00:08.714 - 00:00:17.406, Speaker B: By the way, I created a free email course to teach you how I got my first remote blockchain job, paid $100,000 a year. So if you want to learn all.
00:00:17.428 - 00:00:19.182, Speaker A: My secrets, you just have to sign.
00:00:19.236 - 00:00:20.538, Speaker B: Up at this URL.
00:00:20.634 - 00:01:19.026, Speaker A: So in the previous video we had an overview of all the variable types and declaring your variable is important. But once you have data then you want to manipulate this data and for this you need a function. So first we have our smart contract here in remix and we're going to declare a variable. So let's declare an integer for example, and we're going to call this value and then I want a function to be able to read this value. So I'm going to declare a function with the function keyword exactly like in JavaScript. And after I'm going to name this function, so for example get value, and after I give it a set of parentheses so this set of parentheses can accept argument. In this case we don't have any argument and after that we're going to use a visibility modifier.
00:01:19.026 - 00:01:55.762, Speaker A: So I'm going to skip the explanation of this at the moment. We're going to see this later, and after we specify that this is a view function, because this is going to be read only, we're not going to modify the blockchain data. And after that we specify the return type of the function with the returns keyword. So make sure to add the s. It's not return, it returns with the s, and between parentheses you specify the return type. So that's a uint. And after you open the curly braces and here inside the body function, that's where you will actually write the code of your function.
00:01:55.762 - 00:02:14.274, Speaker A: So in our case this is going to be very simple, just a return statement once again like in JavaScript. And here we reference the variable that we declare here outside the function, the value variable, and we just return it and we terminate our statement by a semicolon.
00:02:14.402 - 00:02:55.842, Speaker B: Next, let's create a function to change the value variable inside the blockchain. So let's create this function, set value, and it's going to take a single argument of type u int. So we could call this argument value, but if we do this it's going to shadow the value variable at the contract level and we will not be able to access it inside the body of our function. So we want to give our argument another name. So let's prefix it with an underscore and after that so we give it the external keyword and I'll explain this in another video. And this time we will not use.
00:02:55.896 - 00:02:57.846, Speaker A: The view keyword because if we do.
00:02:57.868 - 00:03:15.290, Speaker B: This, that means that this function is read only. But actually we want this function to actually modify the data on the blockchain. So if you omit the view keyword, that means that this function can modify data on the blockchain. Also, we're not going to specify any.
00:03:15.360 - 00:03:17.386, Speaker A: Return type because we're not going to.
00:03:17.408 - 00:04:11.820, Speaker B: Return anything from this function. And we open the curly braces and in order to assign underscore value to value inside the smart contract, then all we do is value equal underscore value. Here, the way we assign variable in solidity is exactly the same as in JavaScript. All right, so now we know how we can create the two type of function in solidity, the view function which are read only, and the function without the view keyword which can modify data inside the blockchain. So now the next step will be to actually call this function and see how we can interact with our smart contract. But first we need to deploy our smart contract to a local development blockchain. And that's what I'm going to teach you in the next video.
