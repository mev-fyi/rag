00:00:00.250 - 00:00:40.870, Speaker A: Okay, developers, welcome back. Now, if you want to keep a secret, don't tell anybody and definitely don't put it in your smart contracts. In our community, there was a little bit of confusion about how private variables work. So in this video I'm going to show you how we can actually get access to that data in a private variable using ether's Js. If you're new here, I'm Calvin Torah, and on eat the blocks we help web two developers transition into web3. Okay, so let's jump straight into it. I'm going to create a new directory called private VAR CD into that directory and then we're going to do NPM install hard hat.
00:00:40.870 - 00:01:01.662, Speaker A: I'll fast forward through this. Then once it's done we're going to use mpx hardhat and that will bring up the options we're going to choose create a basic sample project and then I just hit enter for everything else. So hard hat project root. Yep. Add a git ignore file. Yep. And then do you want to install these sample project dependencies? And I just hit yes for that as well.
00:01:01.662 - 00:01:35.430, Speaker A: And then once that's done, we'll open it in vs code. So now we can see our full basic project and here we can see the greeter Sol default contract. We're just going to go in here and delete everything we don't need. Then we're going to rename the contract as login contract both in the file and then the file name. Now because we're talking about private variables, I'm going to create a bytes 32 variable, make the visibility private and call it username. And then I'm going to do the same for password. Now when we deploy this contract, we're basically going to set up a constructor to take in a username and a password.
00:01:35.430 - 00:02:02.734, Speaker A: And then on deployment we're going to update our private variables with the strings that we pass into the constructor. Now we can close this file and if we go into the test folder we've got a sample test Js file again. We're going to just go in here and clean up everything we don't need. And then we're going to rename this describe block as login contract. And then we'll rename the test. It should show us private variable data. Now inside this test we need to deploy the contract we just saved and we called it login contract.
00:02:02.734 - 00:02:30.790, Speaker A: So using ethers, get contract factory and we'll pass in the name of the contract. We'll then create two variables, username and password. And then we'll use ether's utils to format these strings into bytes, 32 strings. I'm going to use my name as the username and for the password something super difficult to guess. So now we're going to grab our contract and deploy it using the two parameters that our smart contract is expecting. So that's username and password. Now we just await for our contract to be deployed.
00:02:30.790 - 00:02:58.690, Speaker A: Now that our contract is deployed we need to look at how we can get the information from our smart contract in those private variables. Now on our smart contract we have two variables and these are saved in sequential order. So slot zero on our smart contract is going to be the username and then slot one is going to be our password. And because they are bytes 32 they take up one slot. Each. Other types of variables can get packed in together but for these two they're in separate slots. So we're going to use getstorage app.
00:02:58.690 - 00:03:37.438, Speaker A: We're going to pass in the contract address and then we're going to access slot zero and that should give us our username and then we're going to do the same for password again the contract address and then pass in the slot we want to access. Then from here we're just going to console log out the information that we get back from our contract and see if we actually have access to these private variables. We're going to open a terminal and run MpX hardhat test. Hard hat is going to compile our contract and there we have it. We have the username and the password and we're done. Now I'm only joking. This isn't very useful to us right now but we can do a little bit of manipulation to actually convert these into readable strings.
00:03:37.438 - 00:04:13.578, Speaker A: So on ethers. Again, we're going to use the utils pass bytes 32 string and then we're going to pass in the private data that we've extracted from slot zero and slot one. And then at the bottom we're going to console log out these new converted strings and let's see if this works. We're going to use mpx hard hat test again, compile our contract and there we go. We can now see that we have the username as my name and the password as my super secret password. Now when it comes to variable visibility, private variables are only private for the smart contract scope. This means that they can't be accessed or modified from other smart contracts.
00:04:13.578 - 00:04:38.740, Speaker A: However, these values can be read freely outside the blockchain by anyone, so don't hide any real private data inside your variables. And again, if you want to keep a secret, don't tell anybody. That's all for this quick video. Thank you for watching and I'll speak to you soon. Our my channel.
