00:00:00.410 - 00:00:09.550, Speaker A: You. Hi, guys. Welcome to the 9th episode of it the Blocks. Today we're going to study two different ways to instantiate an inradet smart contract.
00:00:10.210 - 00:00:12.126, Speaker B: Okay, so jump to your terminal and.
00:00:12.148 - 00:00:13.774, Speaker A: In your project folder we're going to.
00:00:13.812 - 00:00:55.562, Speaker B: Initiate the truffle command, so truffle init, and it's going to create these folders and then we're going to create our smart contract act. So we're going to execute the truffle create contract and then the name of the contract. And this time we're going to call our contract Mybet. And then in a contract folder you should see a mybet contract. Okay, so now we're going to open our text editor and that's what you should see. So we're going to define a contract, my bet that inherit from another contract, which is a generic bet contract. So now let's define this bet contract.
00:00:55.562 - 00:01:39.930, Speaker B: So, contract bet, open the curly braces. And this contract bet is going to behave differently depending on a value of an internal bet type variable. So we're going to define this variable, which will be an integer. So u int bet type, and this variable is going to be assigned in a constructor. So constructor that I define with a function keyword. And here it's going to be the same name as the contract. And we're going to pass to this constructor an integer bet type prefix by an underscore.
00:01:39.930 - 00:02:35.182, Speaker B: And we're going to simply assign this beta variable to our internal beta variable like this. Okay, so you might want to ask me why would we want to do this? Well, it could be the case that this generic smart contract behave in a different way depending on the value of bed type. So, for example, if bed type is set in a certain way, maybe that some operation are allowed. But if bed type is set in another way, maybe some other operation are allowed. Okay, so now we have our bed contract. But the problem is that the way that we inherit from this contract, we don't pass this value bet type here line six. So what I will do is I will add parentheses around the bet contract here.
00:02:35.182 - 00:03:30.442, Speaker B: So line ten when I define my bet is bet, I'm going to add those parentheses and I'm going to pass an arbitrary value to the constructor of the bet contract. So for example, it could be two. So what will happen is when I will create the my bed contract, the bed contract will be instantiated and its constructor will receive this value too. And so the value of bed type here will be two. Okay, that is good. However, it could be the case that you might want to do this, but in a more dynamic way. So maybe that you do want to hard code these two value here, but what you want to do is to pass a value to the constructor of my bet and to forward this value to the constructor of the bet contract.
00:03:30.442 - 00:04:21.950, Speaker B: So how could we do this? So first, let's get rid of those parentheses here. And the other way that you can pass value to the constructor of an inherited contract is in the constructor function of your contract. After the parentheses you can add the name of an inherited contract like this, as if it was the modifier. But this is not the case. And here you're going to pass a value to this constructor. So for example, we could say that we're going to pass the value contained in the variable bed type. But first we need to define this bed type.
00:04:21.950 - 00:04:57.858, Speaker B: So here in mybet constructor is going to be a uint bed type argument. So when I will instantiate the mybet contract, it will call the mybet constructor. This mybet constructor will receive this bed type value. This bed type value will be forwarded to the constructor of the bed contract because of this declaration. And now I will have a dynamic assignment of the bed type of the bed contract.
00:04:57.954 - 00:05:09.194, Speaker A: That's it for today. I hope that now you know everything about contract inheritance in solidity. For the next episode we're going to study remix, which is an ide for developing solidity.
00:05:09.242 - 00:05:10.250, Speaker B: Smart contract. Bye.
