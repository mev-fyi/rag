00:00:06.480 - 00:00:54.976, Speaker A: And we are live. Welcome everybody for this live stream on how to create a trading bot on Solana. I'm Julian, your host. And on either blogs, I teach you blockchain development. So if you're new here, yeah, I'm the creator of the channel and I've been working with blockchain since 2017 on a daily basis. And one of the coolest stuff that we can do as blockchain developer is create trading bots so that we create a little program that will trade automatically for us and just run a strategy without the human, without our psychology getting in the way, without any problem of discipline, it will just do exactly what we tell it to do. So let me see who we have in the chat.
00:00:54.976 - 00:01:34.274, Speaker A: I have a couple of people already, mister ice freeze Madeline sin pena. Awesome. Seems like everybody super excited for these boats. So just before we start, a quick shout out to tell you about my free training. So eat the blocks.com roadmap. If you are completely new to blockchain, you have to register for this free training where I will tell you exactly what you need to learn to become a professional blockchain developer and how to find your first job in the space.
00:01:34.274 - 00:02:16.872, Speaker A: So either blocks.com roadmap, I'm going to put this in the chat. All right. Okay, so. So let's get started with our trading bot. So what kind of strategy we are going to do? So there are many, many strategy that you can do with trading bot, but today I want to show you one that is not too complex to implement and that can be pretty effective. So we are going to base our trading bot on a moving average.
00:02:16.872 - 00:03:25.620, Speaker A: So a moving average, that's the average of the price of an asset over a certain time in the past. So you have different moving average, moving average, 200 days, 90 days, or it can be any number of days that you want. And you can also do seven days. And this is quite, quite easy to compute as why this is a good indicator. Well, I mean, you can see basically in this chart that when, basically in general, when the price start to cross the moving average, this is a sign that basically we are going to change the trend. Okay, so here, for example, the prices were below the moving average. So basically when you are below the moving average, that's basically when you are below the moving average and you go above, then it can be bullish.
00:03:25.620 - 00:04:06.144, Speaker A: And when you cross it in the other direction, it can be bearish. So basically by using this indicator, then we can create an interesting trading bottom. So this is a very simple strategy and we can implement it with a, with some coding. So for that we are going to use node js. Okay, so you can run node js everywhere. It doesn't matter which computer, which operating system you run. There are a lot of people who do trading bot in python, but personally I feel more comfortable with node js.
00:04:06.144 - 00:04:42.244, Speaker A: And in any case for this trading bot what we're going to do is not too complex. So it just doesn't matter what you use, but we're going to use that. And another thing that we going to use is the coingecko API. So basically we're going to need some prices in order for our trading bot to work. So we, and to coingecko, that's like Coinmarketcap. And turns out that they have an API that gives you access to, to many prices. So the API, they have a free tier, they have a pet tier.
00:04:42.244 - 00:05:16.660, Speaker A: The free tier used to be amazing and now they pretty much lock everything. So there is still a free tier, but you have to search for it because it's not obvious that it exists, but it's still available and you have 10,000 free requests per month. So normally you, you should be fine with this. And their first pet tier start at $120 per month. So it's a bit steep if you're not really doing this professionally. But for this tutorial I feel just a hobbyist. The free tier is going to be okay.
00:05:16.660 - 00:06:06.254, Speaker A: So we're going to need this and we also going to need access to an exchange. So because our bot is going to do trade automatically. So it's going to connect to the API of an exchange for that. So if you wanted you could also do it with a decentralized exchange on Solana. But it's way easier to do it with a decentralized exchange because you don't need to learn how to interface with Solana smart contract, you just need to use the rest API of an exchange. The downside is that, is that basically you will have to, you have to create an account on an exchange, so goes through the KYC, etcetera. So yeah, a lot of exchange can work.
00:06:06.254 - 00:07:04.620, Speaker A: Coinbase for example, it's a big one of finance. Any exchange where Solana trades, then you can, you can use it. All right, someone asked me, is coingecko better than bird eye API? I don't know bird eye API, but since Congeko got worse, then maybe not. Alright, so another thing that we're going to use is CCXT. So CCXT is a JavaScript library that interfaces with exchanges. So what's really great with CCXT is that you don't need to, it doesn't matter which exchange you use, they have a unified API so it's just very easy to use. Some people prefer to use directly the exchange, the API of an exchange.
00:07:04.620 - 00:07:50.094, Speaker A: So if you want to optimize your code and make sure it runs as fast as possible, you should interface directly with the API of an exchange. But if you just testing things out, doing a prototype and CCXT is fine. So TCXT is in different languages, in JavaScript, in Python and it's really, really popular. So we are going to use this. All right, so let's start the coding. So I'm going to my terminal and we're going to create a new project. So line up trailing bot tutorial.
00:07:50.094 - 00:08:34.806, Speaker A: Right. Then let's open our code edge tools I use versus code, but you can use whatever you want. All right, let's increase the size of this, right, and we are going to, let me open terminal here. We're going to open, we're going to create an NPM project inside. So NPM init y. Okay. And we're going to open, we're going to install a library.
00:08:34.806 - 00:09:03.724, Speaker A: So actually let me increase the size a bit. All right, I think this is more visible, right. So we going to install a couple of things. So first we're going to install dot M. This is to read environment variables. So that's going to be useful for the different API we're going to use. And we're also going to install CCXt.
00:09:03.724 - 00:09:38.378, Speaker A: Okay, let's install all of that. Okay, so next we are going to create our first file. Okay, let me minimize this. So yeah, all right, so let's create a script. We're gonna call this just a script. Dot J s. And first we going to load our environment variable.
00:09:38.378 - 00:10:27.110, Speaker A: Okay, so we use the dot and package for that. So basically with this we'll be able to, to easily put our secret in. We're going to create a dot dot env file here where we're going to put a couple of secrets like the coin Gecko API key. So to create your coingecko API key, basically you create a free account on, you go on Coingecko, a credit free account and then you select a free tier. So it's actually not obvious. Let me see coin gecko API. When you select their, let me see product, they have product somewhere.
00:10:27.110 - 00:11:06.374, Speaker A: Where is it? Product crypto API. So here is actually not obvious. Okay, so I'm already logged in, but basically when this is the first time, get your API key. Now okay, so here you have a couple of tier and it's not obvious that there is a free tier, but what they call the free tier is called demo here. So this is this thing. Okay, so basically, yeah, don't, don't feel like you have to buy anything because you don't. Okay, so then you put your API key here.
00:11:06.374 - 00:12:01.212, Speaker A: Then we go back in the script and we are going to start the coding. So first of all we need to get the API, the URL that we need to hit for Coingecko. So let's define this API URL history. So basically here we need to find which, which API route we are going to use, which endpoint. So we, let's check out here on the documentation what they have. Okay, so let's click on coins. And so basically you have different, different things.
00:12:01.212 - 00:12:29.420, Speaker A: But the one we need is coin. Let me see, coin historical coin, historical data by ID D. Let me see which one is it? Coins history. No, that's the chart data. I think that's this one. Market chart. Yeah, yeah, that's this one.
00:12:29.420 - 00:13:12.412, Speaker A: So this endpoint allow you to get the historical chart data of a coin including time in Unix price market cap. Okay, so here let's see a little bit the detail. So id param so you specify the coin that you want against which currency. So usually it's USD. How many days up to numbers of days ago? Yes, basically how many days of historical data starting from today. So if you put ten here you have ten days in the past, 2020 days in the past, etc. Interval.
00:13:12.412 - 00:13:36.348, Speaker A: So this is calculated automatically. But you can also specify. So here it will be daily. Most of the time we deal with daily data except if you do some intraday trading. But that's not going to be our case because we're going to use the seven days moving average. Okay. And so in response we're going to get an object with two arrays.
00:13:36.348 - 00:14:28.504, Speaker A: So an array of prices and an array of market cap. So for the prices, basically the first element of the array is the timestamp, I believe. And then this is, we have the price like this enough, let me see, is that, is it the timestamp? Yeah, yeah, it should be time because here basically we have the same, so it has to be timestamp and then market cap. So here's something. Timestamp and market cap. So we won't use that, but it's gonna provide it. Okay, so here what we need is to copy, going to copy this URL.
00:14:28.504 - 00:14:56.574, Speaker A: So let me see something like this. Okay, so here you see it's pro API. But actually for the free API you remove the pro. So it's not explained very clearly that that's because they don't, they basically want to make you buy the pro API. Okay. They want to make it hard to use the free tier, but it's possible. So all right, let's go back to our editor.
00:14:56.574 - 00:15:25.614, Speaker A: Let's remove the pro here since we use the free API. So for the coin we're going to use Solana for the market shot. Yes, that's correct. Then there's a couple of things. Let me see. So now we need the query strings. There were a couple of query string.
00:15:25.614 - 00:16:16.772, Speaker A: So first there is versus currency. So that's going to be against the dollar lowercase. Then for the interval that's going to be daily for the number days we want seven days in the past. And then there is a, there is another last parameter that we need to pass for our API key. So this will be sent to you by email. Once you create your free API key you will receive an email. So you need to specify this key here we are going to read in from our amp file basically thanks to Dot.
00:16:16.772 - 00:17:16.994, Speaker A: And so we're going to thank to dot and this is going to be populated process dot env dot coin gecko API key. Okay, so this is going to be a dynamic string here and okay, so now we have URL. So next we going to create a function. This is going to be an async function because we're going to use the await keyword inside. So let's define a response object as well as a JSON version. So we're going to need this to make the API call. So here let's call the fetch function to make an API, to make an HTTP call.
00:17:16.994 - 00:18:29.114, Speaker A: And first thing we need the API URL, okay, and after we need to specify that we want JSON object. So let's specify the header. So content type will be application JSON. And so this content type means that when we respond to this URL we pro, we respond with JSON, but we also, on the other side what we're expecting is JSON. Okay, so with this we should be able to have a response. So now what we're going to do is once we get the response we transform it into a JSON because by default this is going to be received as a string, but we want to use it as a JavaScript object object. So this is how you do this transformation.
00:18:29.114 - 00:18:52.250, Speaker A: And after that you know what we're going to do a console log just to see that everything is fine. So. Right. And after, let's just run this function. So now let's run this in our terminal NPM run script. Right. What I'm doing.
00:18:52.250 - 00:19:15.854, Speaker A: No, it's not that node script. Sorry, made a mistake. Okay, so it's working. Okay, so let me increase this. So let's see what we have here. Total volume, market cap and then prices. And here we can see the different timestamp with the different price.
00:19:15.854 - 00:19:49.118, Speaker A: So normally. So basically this 170 should be, let me see how many we have here. 123-4567 so eight should be, I guess this is today, 170. And let's check this timestamp and 117.64. Let's see the current price. Yeah, yeah, that makes sense. And then let's transform timestamp to date.
00:19:49.118 - 00:20:14.042, Speaker A: So let me see that. Timestamp to date. So this is Thursday, May 23. Yeah. So that was 20 minutes, 23 minutes ago. So that's, everything is fine. Okay, so let's go back here, here to our code.
00:20:14.042 - 00:21:00.614, Speaker A: So now what we going to do is compute the moving average. Okay. So for that, let me minimize this and to compute the moving average, what we're going to do is we're going to use the this object dot prices and we're going to use the reduce function. So if you never use reduce before, basically allow you to transform an array in a single number. So here, basically we're going to do it in two steps. First, we're going to sum everything. So here this is going to receive the sum that we have computed so far.
00:21:00.614 - 00:21:46.718, Speaker A: And for each step we take the sum computed so far, plus we add the new price. And so the first element of this array is going to be the timestamp. The second one is going to be the price. So that's why we need to select the second column and we also need to initialize our reducer. Okay, so because the initial, this is going to be, this is going to populate the sum variable for the first pass of the reduce function. So for that, how we do this here, comma zero. Okay, so first iteration, sum equals zero.
00:21:46.718 - 00:22:17.802, Speaker A: We pass the first parameter. So zero plus the first price. Then second iteration, so the sum basically has one price in it. Then you have a second price here. So, etc. So iteratively you are able to build this sum. And once you are done with this, what we're going to do is that we are going to divide this by the, going to divide this by.
00:22:17.802 - 00:22:56.600, Speaker A: Oh yeah. But that is the problem is that this is not, let me think about it, because actually this is not seven, this is eight. Right. But we want 121-234-5678 okay, so let me think about it. We need to pop, we need to remove the last element of the array. Okay. Okay.
00:22:56.600 - 00:23:41.186, Speaker A: So rest JSON dot because we just want to have seven elements there, prices. And then to remove the last one we need to pop it basically. Okay. But actually I don't remember when you do this is the, does it return the element that was popped or does it, does the change in place? You know what, let's check online. So JavaScript pop. What does it do exactly? Pop method. Remove the last element from an array and return that element.
00:23:41.186 - 00:24:08.814, Speaker A: The method changes the length of the array. Okay. So for example here we have this 12345 element. Remove tomato and then basically it's making the change in place. Okay, so this is what I thought. So if we do this, this is going to do what we want. So, okay, that's, that's what we want.
00:24:08.814 - 00:24:40.344, Speaker A: So then we're going to define this by the length of the prices arrays. That's going to be seven. And we're going to need to store this in a variable. So let's call this average. Right. And now let's console log this to see if it works or not. Average.
00:24:40.344 - 00:25:05.416, Speaker A: So that's going to be moving seven days. Moving average. Okay, let's run our script. So one, seven, three something. You know what, we are going to verify this. So let's go to a spreadsheet here. So that's what we got.
00:25:05.416 - 00:25:31.344, Speaker A: Okay. 173 something. And let's check out all the data that we had before. All right, so let me see if I can select that. I think so. 123456. All right, let me select that.
00:25:31.344 - 00:26:05.064, Speaker A: So, all right. It's going to be a little bit tedious, but you know, that's necessary. Just want to make sure that we're not making mistake. So you know, when you run a trading bot, testing is just so important. Okay. So because you, you want to make sure that all the formula are correct, etcetera. So let me check everything.
00:26:05.064 - 00:26:27.664, Speaker A: Almost there. Okay, one more. All right, so let's compute the average one. 7321. Yeah. So that's working. Okay, amazing.
00:26:27.664 - 00:27:10.244, Speaker A: So let's get back to the code. So we have our average. And next, what we want to do is get the current price so that we can compare this current price to, to the moving average. Right. So, so, so, so what we're going to do, let's remove this console log and let's do another, another fetch. Okay, so here results. Wait.
00:27:10.244 - 00:27:39.112, Speaker A: Fetch. Okay. And this time this is not going to be the same API URL. Actually we need to go back to the documentation of coingecko. So let's go here and let's search for the endpoint that we need. So I think this is in simple coin price by id. Yeah, looks like what we need.
00:27:39.112 - 00:28:08.224, Speaker A: This endpoint allow you to query the prices of one or more coin by using the coin id. Mm hmm. Seems correct to me. So this is what you get, a bitcoin plus the USD price et cetera and query param, so needed. The coin id versus currency and other things are just optional. Okay, so seems not too complex. So let's copy this.
00:28:08.224 - 00:29:08.600, Speaker A: Let's go back to our code. Alright, so API URL, price, this is the free API. So remove the pro here, simple price. And we're going to need to give it a couple of query string here. Let me see what we have in the chat. Hello, would you update your bot, your bot for people? What do you mean? Do you mean that? If I can I create customized trading bot? Yeah, if you're interested in customized trading bot you can send an email to julianblocks.com. so, okay, so, so, so let me see what we need here.
00:29:08.600 - 00:29:37.344, Speaker A: So ids. Okay, we need to specify the ids. So we want Solana. Solana only the, oh no, first a query exclamation mark, sorry. Then the versus currency. Okay, so versus currency. So that's the dollar, then the interval.
00:29:37.344 - 00:30:03.724, Speaker A: So that's going to be daily. No, no, what am I doing here? There's no interval here. It's a single price. Okay, so versus currency USD. And then we also going to have a API key. So same thing as before. So let's copy this.
00:30:03.724 - 00:30:47.584, Speaker A: So this way we can be identified. Alright, so now we need to use this endpoint API URL price. Okay, let's go down. And after that let's, let's define the headers. Actually we can copy this from above. It's exactly the same thing. Okay, and so with this we're going to get our response and now we need to transform it into a JSON.
00:30:47.584 - 00:31:38.572, Speaker A: Okay, and now let's extract the current price. So current price equal Solana USD. So normally this is this. And you know what, we're going to console log this to make sure the current price makes sense. Okay, so yeah, let's run the script again. Okay, so we have, ah, that's because I'm missing a weight here. Okay.
00:31:38.572 - 00:32:13.064, Speaker A: To have a weight here. Yeah. Okay, let's try again. Okay, still a problem. What's the problem here? You know what, let's console log the response and see what we did wrong. Missing parameter versus currencies. Okay, so let's go back on top.
00:32:13.064 - 00:32:37.000, Speaker A: And here I say versus currency, but it should be versus currency is plural. Right. So now everything should be fine. Let's run it again. No, no, no. Unexpected token throttle. Okay.
00:32:37.000 - 00:33:04.454, Speaker A: Okay, so we are throttled by the API. I hope I didn't do anything wrong with it because basically they detect like your usage pattern is not like they want, they can throttle you. Basically it's like they block you temporarily. Okay, so let's try again. Oh, this time is fine. So 172, time 86. I think this is very close to what we have.
00:33:04.454 - 00:33:58.348, Speaker A: So 171.19. Yeah, so it makes sense. Okay, so we have the correct current price. Okay, so that's, that's fine. Fine. Then what else we are going to do? So let me check the chat, mister Ice free. So if you plan on trading on six, wouldn't be easier to get the open high low close value data directly from CCXT instead of Coingecko API? Yeah, it's also possible, but it's just that with Coingecko what I like about them is that they're going to take the average, they're going to take the, the average of different exchanges.
00:33:58.348 - 00:35:16.844, Speaker A: So I believe that their price represents better the market because sometimes what can happen with an exchange is that you have some event that is just specific to this exchange, like someone who has fat finger and who put like input an order in the wrong way or some, something that happened. And so you can have a distorted view of the market. Whereas with Coingecko this is an average of everything. But yeah, I mean if you want, you can also do it with CCXT and just get it from one exchange. Okay, so next, what we're going to do is we are going to compare the current price from the moving average. So before I say a mistake, let's go back to this graph and what basically what makes sense here, does it make sense to buy when the current price is above the moving average or does it make sense to buy when it's below? So in general, when it's above the moving average, in general it goes up. Okay.
00:35:16.844 - 00:36:31.638, Speaker A: And in general when it's below the moving average, it means it goes down. Right? So I think we should, we actually, I think the trigger should be is it above the moving average or not? So let's do that. And if current price is above the average, then we are going to trade. So we need to define a couple of parameters. So here we are going to place a limit order, which means that we're going to have a best execution up to a certain, we're going to define a maximum buying price and if this is possible, our buying price will be lower. But we have a guarantee that it's not going to be higher than this. So here, this is actually an area where you can put a lot of work in that.
00:36:31.638 - 00:37:09.754, Speaker A: But you know, for this tutorial, we need to keep things simple. So we just going to have a simple rule that said at the limit price, basically that's the current price plus something. So for example, let's add, let's add 2%. And what you can do to estimate this is because the current price, this is going to be what we call the mid price. Okay, so you have the, you have the bid and the ask. So that basically the selling price and the buying price, the buying price is always higher than the selling price. And in the middle you have what's called the mid rate.
00:37:09.754 - 00:37:59.814, Speaker A: But you never trade at the mid rate, always either you hit the bid or you hit the ask. And so you need to study on your exchange what's typically, what is the Bidas spread, meaning like what is the spread between the bid and the ask. And based on that, you will be able to make a good estimate for this limit price. So here, let's just say that bid us spread of 4%, which I think is pretty huge. So current price time 0.2 so we can buy up to 2% above the current price. Okay, then we need to define a few parameter.
00:37:59.814 - 00:38:28.860, Speaker A: So we are going to define a stop loss. So basically once we've placed this order, this buy order is going to run by itself. Okay. We're not going to do the selling ourselves. It's just going to be out there. And, and basically the selling is going to happen automatically. So there will be two cases for exiting our position.
00:38:28.860 - 00:38:52.674, Speaker A: Either the trade doesn't go in our direction, it goes down. So in this case it's going to be liquidated. And with this stop loss parameter we will be protected. So it's very, very important. Otherwise you can really lose all your position. And the other parameter we're going to specify is where we take profit. If the trade goes in our direction, so it goes up, then at some point we need to sell it.
00:38:52.674 - 00:39:33.654, Speaker A: And so this, in both scenario, this is going to happen automatically. So first the stop loss. And so here why I'm defining this object like this because this is in documentation of CCXt. This is how, how I learned it. Okay, so here we need the trigger price for the stop loss. So we take the current price and let's say we put our stop loss at 10%, 10% below. And then the other parameter we need to define is the take profit.
00:39:33.654 - 00:40:38.496, Speaker A: So take profit is when we exit the position. But if we win, basically the trade works fine. Trigger price, current price time 1.3. Okay, so here how you define your stop loss and take profit, this is really up to you. You know, you can try different parameter and make some adjustment, but basically you should always have a take profit that is bigger than your stop loss because you want to have gains that are asymmetrical. So basically when you win you want to win more than when you lose because on average you probably have as many win as many losses, probably a little bit more win than losses. But if, the thing is if, let's say you have 50 50 or close to it, but you, you have the same amount in stop loss, in the same amount in take profit, basically your net profit will be zero.
00:40:38.496 - 00:41:32.404, Speaker A: So in order to avoid that you want to make sure that you win more than you lose. So that's why here I chose something bigger on the other side. Okay then we have our parameter for our, for the buying for to create our order. So next what we're going to do is we're going to import CCXT. So we go on top and we import ccxt. CCXT, alright and let's go down. So now we'll be able to buy, to place our buy order.
00:41:32.404 - 00:42:21.476, Speaker A: So how are we going to do that? So okay first of all we forgot a few things on top so we need to instantiate our exchange object. So how we're going to do that? So new CCXT. And here you put the name of your exchange. So they have the biggest one, they have finance, Coinbase, etcetera. So for example binance. And here you're going to put your API key basically so API key. And here we're going to read it from, from the environment variable.
00:42:21.476 - 00:43:14.728, Speaker A: So binance, API key, right. Secret, same thing, finance, API secret. So you will need to define this in your env file and exactly how we did with Coingecko. And then how you actually get those two, this key and the secret. So you go to your exchange and they're going to be a section for the API. Usually you have to activate it, it's not activated by default. And then once it's activated so you can create it and you'll have different options to create your API key.
00:43:14.728 - 00:43:41.604, Speaker A: So I recommend to choose an API key with the least privileges possible. So basically here you just need to create order. So, and usually this is quite granular. So when you create your API key, you're going to associate it with different capabilities. So you just tick create order. That's it. There is one capability that is extremely dangerous which basically allow you to transfer money.
00:43:41.604 - 00:44:12.254, Speaker A: Yeah. Do some resolve, etcetera. This one I recommend to never, never select it because I don't see why you would want to do this with a trading pot, really. Okay, so now with this exchange object, you can create buy order. We're going to need a couple of variable for by order. So first the symbol. This is going to be Sol USD, the type of the order.
00:44:12.254 - 00:44:56.636, Speaker A: So Ccxt support a couple of them. But what we need is a limit order in the type that we want to buy order and for the amount. So this is your budget, basically. So how many, how many saw, basically how many sol you want to buy. So basically depends on the current price. And you can adjust this dynamically. Actually what you could do is like you get the current price of Solana and then you basically, you adjust the amount so that you buy a constant dollar value.
00:44:56.636 - 00:45:15.386, Speaker A: But here, let's just keep it simple. Let's just say that we just buy. So Solana is at 170, let's say, let's say we buy, I don't know, five. Five solana. So that's almost like $1,000 for each trade. Yeah. Okay.
00:45:15.386 - 00:45:48.704, Speaker A: And after, let's go back to our function. And now we're going to create our buy order. So we use the exchange object that we created just before. And then there is a create order function. So that's coming from CCXT. And after that we're going to put a couple of parameters. So I'm going to put the symbol of the asset.
00:45:48.704 - 00:46:18.904, Speaker A: We buy the type, then the side. So if we buy or if we sell, then the amount we want to buy, then the limit price. And, okay, the limit price, we actually haven't defined it yet. So we need to do this. And what else do we need? And then the params object. So with the stop loss and take profit parameter. Okay.
00:46:18.904 - 00:46:48.944, Speaker A: And then for the limit, no limit price, what I'm saying. No, we did define it. Yeah. It is defined here, limit price. Okay. And then what you're going to do is you get the order object you get from that. Wait, okay, and after we're going to console log something so that we have some feedback by order created.
00:46:48.944 - 00:47:35.162, Speaker A: So here, let's put the different detail. So we want the amount, the symbol, what else, the limit. So it was a limit order. And here we can put the limit price. What else? Take profit and limit price. Dot. We meanpress dot take.
00:47:35.162 - 00:48:16.434, Speaker A: Prof. No, is it is param here params take profit and then we also have the stop loss. Stop loss at in params stop loss. Okay. So with this we have a lot of info about what just happened. And you can also console log the order object because it's probably going to have some order id. So you might want to save this somewhere.
00:48:16.434 - 00:48:55.234, Speaker A: All right. And when you have this. So once again, you don't need to handle when you take profit because we already specify here that the take profit level also have a stop loss. So once you've created this order, that's basically, it's wait and see. The only thing that can go wrong here is that the market moves in the opposite direction and so your limit order is basically too low and you can never buy Solana. That's the only thing that can happen really. So after you've done that.
00:48:55.234 - 00:49:43.184, Speaker A: So the problem here is that if we run this script like this is only going to, is only going to run this script once, but we just want to fire it and forget it. So in order to do that, we need to add another function. Let's call this init and we can set, we can use the set interval function. So set interval is going to call a function at a regular interval. So first you need to put the name of the function run and after that you're going to put the interval. So 86, 400 time 1000. Alright.
00:49:43.184 - 00:50:35.014, Speaker A: And yeah, and here basically what you would do is init. And once you've done that and basically it's going to to run this every day. Okay. So every day is going to check the moving average of the last seven days, compare it to the current price, then take a position. And then in your exchange, basically you can see all your position that have been created. All right, so is there any questions so far? So before you run a trading bot like this, it might be a, so there are a couple of things that you can do for testing. First of all, you can use the testing mode of your crypto exchange.
00:50:35.014 - 00:51:20.802, Speaker A: So binance offers such a mode. So you basically trade with paper money. So it's a great way to see how this is going. And another thing you can do is backtesting. So backtesting, basically you will, what you will do with backtesting is you check, you try to apply this strategy with some past data. And so of course what happened in the past is not an indicator of what's going to happen in the future. But that can give you some idea and especially if you want to tweak the parameters because with backtesting basically you can try different parameters until when you do some backtesting then you finally have some profit.
00:51:20.802 - 00:51:38.054, Speaker A: So yes, so that's, that's something that, that you should do. Okay. Is there any question about this strategy bot? No. Are you guys still here or. I'm just alone here. No, there's still some of you. Right.
00:51:38.054 - 00:52:06.474, Speaker A: Okay. Alright guys, well if there's no more question we gonna stop soon. But before we stop very quickly. Yeah. It's a reminder to check out my free blockchain roadmap. If you are new here and you want to get in the space that's gonna be very useful. You know if you want to know exactly what you need to learn to become a blockchain dev and how to get your first job.
00:52:06.474 - 00:52:13.604, Speaker A: Alright guys, well thanks for following tonight and we'll see you next week for another stream. All right, bye.
