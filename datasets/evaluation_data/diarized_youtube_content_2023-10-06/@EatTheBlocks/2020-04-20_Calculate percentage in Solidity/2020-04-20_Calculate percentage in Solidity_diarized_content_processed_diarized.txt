00:00:00.170 - 00:00:36.034, Speaker A: In this video, I'm going to show you how you can calculate a percentage in solidity. And before we continue, make sure to join the Facebook group of blocks if you want to discuss blockchain with me and other members of either blocks. So, percentage of solidity are not easy. And that's because we don't have any support for fixed point number in solidity. And that's because in general, for financial application, we avoid to use fixed point number and float division. However, we still need to compute percentage. For example, maybe that we want to take a fee on every transaction in our smart contracts.
00:00:36.034 - 00:01:32.300, Speaker A: So in this case, we'll need to calculate this fee and this fee will be expressed as a percentage. So, for example, let's say we have a function to calculate a fee, and the fee is 185% and that's equal to one and 185 basis point. Basis point is a unit often used in finance, and that's basically 100 of a percent. So how are we going to compute this? So we cannot do something like this. Amount time 185. However, what we could do is amount divided by 10,000 men multiply by 185. Okay, so now let's deploy our smart contract and let's try to calculate the fee for 20,000, for example.
00:01:32.300 - 00:02:15.480, Speaker A: And yes, so the fee is correct. How about for 10,000? Yeah, this is correct. Now how about for 9000? Oh, we have a big problem here. What happened? So the problem is that when we divided the amount by 10,000, the result wasn't an integer and it was run then down to zero. So zero times 185 equals zero. So this is totally wrong. So the first fix we can do is we can multiply the amount by 185 first and after divided by 10,000, and it should improve the situation.
00:02:15.480 - 00:02:40.954, Speaker A: So now if we try to compute 20,000 still work. 10,000, it works. And now 9000. So the actual answer is 166.5. But we can see that we are very close. So we've already improved the situation. Another thing we could do is impose a minimum for the amount argument.
00:02:40.954 - 00:03:22.702, Speaker A: For example, we know that below 10,000 will start to have some problem. So in order to impose this constraint, we'll do like this. So require amount divided by 10,000 times 10,000 equal the amount. And the error message is too small. Okay, so let's see if this work. If we calculate the fee of 10,000, then we have 185. But if we try 999 and here you cannot see on my screen, it's cut off.
00:03:22.702 - 00:04:05.430, Speaker A: But basically in the console of remix, I can see this call to my contract calculate fee error. The transaction has been reverted. Reason too small, so the required statement was triggered. It's working. And actually, oftentimes it's not really a problem to impose such a constraint, because when we want to transfer token or ether, the basic unit is very small. So for ether, that's away, and for token, that's actually the same granularity than for ethereum. So for example, if you want to transfer one die, then what you have to provide for the amount is not one, but it's ten power 18.
00:04:05.430 - 00:04:22.140, Speaker A: So in general, for the numerator in your division here, you'll have a huge number. So in most cases you should be fine. So this is just one of my many trick on solidity smart contract. If you want to see the other, check out this video. I'll see you there.
