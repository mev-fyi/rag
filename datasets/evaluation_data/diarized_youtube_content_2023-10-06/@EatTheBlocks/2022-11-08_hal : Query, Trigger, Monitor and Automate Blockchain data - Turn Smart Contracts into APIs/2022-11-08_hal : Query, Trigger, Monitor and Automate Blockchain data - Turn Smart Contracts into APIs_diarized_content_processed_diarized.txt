00:00:00.250 - 00:00:50.198, Speaker A: This video is brought to you by Hal, a digital asset management tool for developers, protocols and companies to query, trigger, monitor, and automate blockchain data. And today I'll introduce one of their products called halstreams. For the developers working on new projects, halstreams turn real time blockchain data into filtered events that are relevant to your needs. Let's check it out if you're new here. I'm Stefan and on it the blocks we help two developers get into web3. Okay, so let's see how we can request filtered blockchain data. All you need to do is create a blueprint to describe how to filter down raw blockchain data into individual events, such as when a smart contract function was called or when an event was emitted, when a state changed or transaction happened, et cetera.
00:00:50.198 - 00:01:16.610, Speaker A: You deploy that blueprint and you get a stream and it runs against blocks in real time. You can consume its events via Hal APIs and start building your apps on top on the supported blockchains. So let's give it a crack. First of all, we need to create an account. So in my case I'm going to use my GitHub account. Once you're signed in, we're going to create a blueprint. So you're going to go in streams and it's streams you're going to click on.
00:01:16.610 - 00:01:44.298, Speaker A: Create a stream blueprint. So let's say I want to filter data from the Di USDC pool from uniswap v two in my source type, I'm going to choose a contract events. I copy the contract address and I'm going to pass it right here. Then continue. Now if the smart contract is behind a proxy, we need to add the ABI manually. So let's do that. All you need to do, you need to pass the contract address and just copy the ABI of the contract and pass it right here.
00:01:44.298 - 00:02:06.440, Speaker A: Then we're going to add an event. Now you have access to the list of all methods of the contract. So I'm going to select swap, I'm going to save that and continue. Next I'm going to name my blueprint and I'm going to save and deploy. Okay, so you can click deploy right away or in the streams tab. You have also access to the blueprint and you can deploy from there. You can double check the config if you need to.
00:02:06.440 - 00:02:36.990, Speaker A: And if everything is fine, deploy. Okay, so now our stream is running and it will produce events whenever the configure event happens on the blockchain. So now what we're going to do, we're going to generate an API key. Let's go to settings API keys and generate API key. Let's name it and we generate it. As it says, the generated API key is unique and non recoverable. So if you lose it, you will need to generate a new key.
00:02:36.990 - 00:02:57.294, Speaker A: Okay? So keep that key in a safe place next to consume the event. Let's go to streams. Click on your stream and as soon as an event occur you'll see it appearing right here. Now you can also consume the stream via different methods. You can see a list of all the available languages. For example shell. You can copy this request.
00:02:57.294 - 00:03:28.570, Speaker A: All you need to do is add your API key in the header, we make the request and we receive the corresponding events in the JSON format. Let's try with another language, let's say python. Okay, I'm going to copy this and same thing. All you need to do is add your API key just like so. Let's execute that. And again we get the last swap events in JSON format. You can also do the same thing by clicking on read API documentation which will lead you to this user interface.
00:03:28.570 - 00:03:49.810, Speaker A: You can add your stream id, add your API key and on the right you can directly try it. You get the response and you can choose between the different languages. Pretty cool. Now hold on. You can get a free upgrade to the Halstreams developer plan for three months by clicking the link in the description. All you have to do is deploy your first stream. There is no credit card required.
00:03:49.810 - 00:03:58.100, Speaker A: Just sign up and launch a stream like we showed you in this tutorial. Thank you for watching this video. Give hastream a go and with that I'll talk to you in the next one.
