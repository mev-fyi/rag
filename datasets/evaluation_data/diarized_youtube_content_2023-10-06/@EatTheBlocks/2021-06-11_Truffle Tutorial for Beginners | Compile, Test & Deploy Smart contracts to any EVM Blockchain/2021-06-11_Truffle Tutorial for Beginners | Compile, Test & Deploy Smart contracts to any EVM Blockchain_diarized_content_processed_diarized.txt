00:00:00.410 - 00:00:33.378, Speaker A: In 2017, when I first learned blockchain development, I saw this framework called Truffle. At first I thought it would be just another extra layer of complexity, and I completely ignored it. Big mistake. Later, I realized that it's way easier to build a blockchain app with truffle. Nowadays, Truffle is pretty much a standout for blockchain development, and you can use it on all EVM compatible blockchain like Ethereum, Binance, smart chain and poly. In this video, you will learn how to write, test, and deploy smart contracts with the truffle framework. If you don't know me, I'm Julian and Atoblocks.
00:00:33.378 - 00:01:16.394, Speaker A: I teach blockchain development Truffle is the most popular framework for writing smart contracts. It was originally created for Ethereum, but it also supports all EVM blockchain, such as Binance, smart chain, and Polygon. In terms of smart contract languages, it supports solidity and viper. Truffle has three main features. It allow you to compile, deploy, and test your smart contracts for compilation. It's very convenient because you can switch from one version of solidity to another very easily by just changing a configuration for deployment. It runs a local development blockchain called ganache.
00:01:16.394 - 00:01:59.060, Speaker A: On this blockchain you can make any mistake that you want. It doesn't matter. It's completely isolated from Mainnet, the production network of Ethereum for testing your smart contracts. It uses under the hood, a JavaScript framework called Mocha, so the syntax will feel familiar if you already know web development, if you didn't use truffle, you could still develop smart contracts, but you would have to create a lot of boilerplate code to integrate different tools together, and that's really not fun at all. Truffle is a huge time saver in terms of usage. Truffle is a command line framework, meaning that you will run it in your terminal. There are only a few commands that you will use regularly, and I found it quite simple to use.
00:01:59.060 - 00:02:47.614, Speaker A: Truffle is written in node JS, which is basically JavaScript server side. So if you already know a bit of web development, it's going to help you. If you don't have node JS installed, you can go to the website of node Js and install the LTS version. It will work no matter if you are on Windows, Linux or OS. When you install node JS, it also install NPm node package manager, which is a tool that is used to install third party libraries. And we're going to use NPM in order to install truffle so you open the terminal and it doesn't matter where you are in your terminal because we are going to install truffle globally. So for that we are going to use the command NPm install global.
00:02:47.614 - 00:03:11.530, Speaker A: This is the flag to tell NPM that we want to install truffle globally. And then truffle. Then you press enter. So I already done it before. And once the install procedure is finished, you can verify that truffle has been properly installed with truffle version. And you should see an output here. So maybe that your version will be slightly different.
00:03:11.530 - 00:03:46.586, Speaker A: For mine it doesn't matter. What's important is that you see something here. After that you are good to go and you can use truffle. After you install truffle, it's time to create your first truffle project. So for that you create a folder in your terminal and after in your folder you will use the truffle init command. And after that it's going to create a bunch of folders and files. So first in the contracts folders, that's where you will write your smart contracts.
00:03:46.586 - 00:04:23.514, Speaker A: Then in the migrations folder, that's where you will write your smart contracts in solidity. Then in the migrations folder you will write migration file to explain Truffle how to deploy your smart contracts to the blockchain. And you will write this migration file in node JS. After in the test folder, you will write your test files to make sure that your smart contracts work well. There are two type of tests. Some tests are in node JS and some other tests are in solidity. But for most use cases, you're going to write your test file in node JS and then you have the configuration file of truffle, Truffleconfig JS.
00:04:23.514 - 00:05:05.742, Speaker A: That's where you can define deployment network for deploying your smart contract. This allow you to configure a few options in truffle, like which version of solidity you are using or which network you want to deploy your smart contracts to. Once your truffle project is set up, the next step is to create your smart contract. So you will want to create your smart contract inside the contracts folder. So here I've created an example truffle project with a smart contract already in it. And when you create your smart contract, you have to put it inside the contracts folder. So there is already another smart contract created by the truffle framework itself.
00:05:05.742 - 00:05:48.362, Speaker A: That's migration Sol, that's automatically created when you run the truffle init command and that's used internally by truffle, so you can ignore it. And here I've created my own smart contract, simplestorage Sol so let's open it. So this is a very simple smart contract with just a single variable, and there is a function to update this variable and another function to read this variable. So the point is not to learn solidity here is to learn how to use truffle. And for that we want the most simple smart contract. But one important detail is the version of we are using. So by default truffle is going to use three DT 0.5.
00:05:48.362 - 00:06:40.250, Speaker A: But if you want to use more recent version, you have to add a configuration. And for this configuration you have to go to Truffleconfig js. So you go at the very bottom of the configuration. And there is a section on compilers here and here I added this version 0.8.4 and you can also customize the setting of the compiler of solidity, but it's a little bit more advanced. And once you have done that, you are able to compile your smart contract with the Truffle compile command at the root of your project, and it's going to compile all the smart contracts inside the contracts folder. Okay, so here it has already compiled everything.
00:06:40.250 - 00:07:26.806, Speaker A: So that's because I have a build folder. So let's get rid of this and let's run truffle compile again, and this time you will see an output. Okay, and here it tells you that it has compiled two smart contract migrations sol the smart contract of truffle that we can ignore, and our own smart contract, simplestorage Sol and here it gave us a warning. This is some minor detail about the SPDX license identifier, so you can ignore this. And after we have two important information. First, it tells you that it has created the artifacts inside the build contracts directory. So I will show you what is this artifact, and after you can see the exact version of three t that was used for the compilation.
00:07:26.806 - 00:08:11.334, Speaker A: So first let's see what is this contract artifact. So if we go in the build folders that was created by the truffle compile step, inside we have a contracts folder. So let's see what we have. Inside a contracts folder we have two JSON file, one for each smart contract. So we will open simplestorage JSON build contracts simple storage. So here we have a couple of info about our smart contract contract name the ABI. So this can be used by the front end of your blockchain application in order to interact with the smart contract, then there is a lot of info that is not directly for us developers, metadata, bytecode, et cetera.
00:08:11.334 - 00:08:58.034, Speaker A: This is more for other development tools. And let's scroll down at the very bottom. So here we can see the details of the compiler, and after we have a networks key, and we'll see after when I'll show you how to deploy your smart contract, how this networks key will change. This is a very important part of the artifact file. So every time that you run truffle compile and the code of your smart contract has changed, it's going to update this artifact file. And every time you deploy your smart contract, it's also going to update this file with the network's key. Last thing I wanted to show you about the compilation process is that it's possible that you have some incompatibilities between the different version of solidity in your smart contracts.
00:08:58.034 - 00:09:23.134, Speaker A: For example, here in migration Sol, the pragma statement of solidity is very flexible. It accepts any version of solidity between 0.4 and 0.9. When the compiler see here that we are using 0.8.4, this is compatible. But if we create another smart contract with another version of three t, like 0.7, when you run truffle compile, it's going to produce an error.
00:09:23.134 - 00:09:50.530, Speaker A: So you always have to make sure that the different pragma statements are compatible between each other. Testing your smart contract is very important. Once you deploy your smart contract, it's not possible to modify its code anymore. So you need to fix any bug before the deployment. And in order to find potential bugs in your smart contract, you need to test it. In your Trafford framework. Tests are written in the test folder.
00:09:50.530 - 00:10:29.634, Speaker A: You can write tests in node JS or in solidity, but in most cases you will write test in node JS. So I already wrote a test for our smart contract, so I'm going to open it and explain what we have. So on the first line, I import the contract artifact for our simple storage smart contract. So contract artifact is an object provided by truffle to interact with our smart contract. Then I define a contract block. So you put all your tests inside. The first argument is the name of the contract block.
00:10:29.634 - 00:10:51.610, Speaker A: So here, storage, that's the name of the smart contract. Then inside the contract block you will define different tests. So in our case, our smart contract is simple. So we just have one test, but you can define as many as you want. Each test is defined in an IT block. The first argument to the it function is the name of the test. Then you have a callback function.
00:10:51.610 - 00:11:16.630, Speaker A: In our case we make it async because inside our callback we're going to use the await keyword. So the first step is to deploy your smart contract. So when you run a test, truffle is also going to start a local development blockchain. This local development blockchain is called ganache, but when you run your test it's very easy. All of this is transparent. This blockchain is managed by truffle. You don't have anything to do.
00:11:16.630 - 00:12:07.574, Speaker A: So first we are going to deploy our smart contract on this blockchain with the new method that we execute on the contract artifact simple storage. Then we're going to get a JavaScript object storage that is a pointer to our smart contract instance. Then we are going to call the update data function of our smart contract and we give it as argument ten and we await for the transaction to be mined. Then we're going to read the value that we just modify by using the read data function. And in this case we are going to get some data in return. So we're going to store this in the data variable and after we are going to use an assert block. So our test is only going to pass if all the asset block inside pass.
00:12:07.574 - 00:12:52.462, Speaker A: And so here we are going to convert our data to a string. So because the numbers in smart contracts can be way bigger than the maximum number in JavaScript, when we get data from a smart contract, we don't get it as a JavaScript number, but instead we get it as a BNJS number. So BNJS is a JavaScript library to handle really large number. So we cannot directly compare data with ten because data is an object. But what we can do is to convert data to a string and then we do our comparison here. So here it would also work if you do two number and you remove the quotes here. But this is dangerous.
00:12:52.462 - 00:13:32.302, Speaker A: In this case it worked because we have a small number, but in many cases the numbers we manipulate in smart contract are very big. And so when you call two number on a number that is beyond the maximum number of JavaScript, it's going to result in an error. So the safest way to do it is to do it that way. Okay, so now our smart contract, our test is ready. So we exit our test file and to run the test we run truffle test. And so behind the hood truffle is going to start at local development blockchain and run our test against this blockchain. So truffle really does a lot for us and we just have to run the test.
00:13:32.302 - 00:13:52.354, Speaker A: And here you see the result of the test. So it shows you which contract block it has executed. Simple storage. And for each test you're going to see if it passed or not. So here should update data. The contrast is not very good and we see a checkmark with passing. So that means that our test passed.
00:13:52.354 - 00:14:22.878, Speaker A: Great. And before you deploy your smart contract, you should always make sure that not only you read enough tests, but all the tests must pass. So now we are going to deploy our smart contract to the blockchain. First we are going to deploy to a local development blockchain. And for this we are going to use a tool called Ganesh. Ganache can be installed separately from truffle. But when you install truffle, there's already a built in version of Ganache that is managed by truffle itself.
00:14:22.878 - 00:14:50.486, Speaker A: So it's the easiest way to use Ganesh. So the first step is to create a migration file. So in the migrations folder we have two migration files. One initial migration js that's created by the truffle framework itself. When you run the truffle init command, that's for migrations Sol so we are going to ignore it. And then we have our own migration file, deploycontracts js. And Truffle is going to run this migration in order.
00:14:50.486 - 00:15:31.986, Speaker A: First initial migration because you start with one and then deploy contract because you start with two. So we are going to open deploycontract js and first we import the contract artifact of simple storage. So we already saw what was a contract artifact in the previous section on testing. And after we are going to export a function. And this function, as first argument is going to receive a deployer. That's an object provided by truffle. And with this deployer, we'll be able to deploy the smart contract by calling the deploy function and we give it the contract artifact of simple storage.
00:15:31.986 - 00:16:05.650, Speaker A: And if we have any argument for the constructor, then here we can pass our arguments, et cetera, et cetera. In our case, we don't have arguments. So once you have your migration file, we are going to run truffle develop and it's going to start a local development blockchain. So that's the built in version of Ganache. And here we have some interesting info. So first we see that our local development blockchain is running at this URL. So localhost column 95 45.
00:16:05.650 - 00:16:33.894, Speaker A: And it also has generated ten accounts. And these ten accounts comes prefunded with ten ether each. So of course this is a fake ether. You cannot use this ether on main net. This is just for testing and developing. And we also have the associated private keys and we also have the mnemonic phrase used for generating all these accounts. So of course this private key and this mnemonic are not secure.
00:16:33.894 - 00:17:11.074, Speaker A: So never use them for mainet, this is only for testing. So now our local development blockchain is started and we have a prompt connected to this blockchain. And we can deploy our smart contract by running the migrate reset command. And here we see the output of the deployment process. So first it run initialmigration js and it has deploymigration solve the smart contract used internally by trial four. So we can skip this. And here what's interesting, our own migration file deploycontract js.
00:17:11.074 - 00:17:48.706, Speaker A: And it has deploy our smart contract simple storage so we can see the transaction hash, the block height, the contract address and the different detail for this transaction gas used. And we can also see the total cost. And that's it. So of course, because this is a local development blockchain, you cannot find this transaction hash if you go on Etherscan because this is only local to your computer. Okay, now let's see how we can deploy to a public testnet. Public testnet is an alternative network to Mainnet. So it runs on a public network of computer.
00:17:48.706 - 00:18:19.030, Speaker A: So it's not just on your machine. A public testnet is totally isolated from Mainnet, the production network of Ethereum. So you can break everything on a public testnet, it doesn't matter. And it's also a little bit less flexible than your local development blockchain because you don't control all the nodes of the network. Actually you don't control any of them. So you don't have ten accounts prefunded with ether. Instead, you need to get some testnet ether in order to deploy your smart contract.
00:18:19.030 - 00:18:51.010, Speaker A: Or if you want to deploy to the public testnet of binance smart chain, you need to get some testnet BNB. And that's what we're going to do. So first we scroll up and here we select our address. Then we go to what is called a faucet. So a faucet is a tool provided by each testnet in order to distribute for free some testnet ether or here for binance smart chain, some testnet bnB. You have to input your address. Give me some BNB.
00:18:51.010 - 00:19:33.886, Speaker A: For example, one BNB. And here we can see that our funding request was accepted. And now if we go to BSc, scan for the testnet of binance smart chain. So you see the blockchain explorer, we can put our address and we will see our transaction. So here 25 2nd ago and we can see that we have some BNB. Okay, so now back to our terminal and we are going to copy here the private key for our first address. Okay, so let's exit the terminal with control c and we go into truffle config.
00:19:33.886 - 00:20:20.206, Speaker A: And here we are going to replace zero x plus private key by our private key and we prefix this by zero x. Okay, so first we import a dependency called truffle wallet provider. I had to install this with NPM before and it allow us to sign transaction for public testnet and Mainnet. So we scroll down and in networks, I've already defined a couple of network. So here, this is for Ethereum and Ethereum testnet. So here we use HD wallet provider and we pass it the arrays of private key. Then we have to give it a URL to an Ethereum node.
00:20:20.206 - 00:20:53.826, Speaker A: So for this you need to create a project on Inferra, same thing for testnet. So here I configure a testnet which is called girly with network id five for main net. Ethereum is network id one. But we're not going to deploy on Ethereum, we are going to deploy on binance smart chain. So I've defined other network here and same thing, we use HD wallet provider. We pass the array of private keys, we pass a URL to the binance smart chain network. So contrary to Ethereum on binance smart chain, you don't need to use Inferra.
00:20:53.826 - 00:21:20.834, Speaker A: It already has a public URL that you can use. It's very convenient. So this is the URL for the main net of binance smart chain and for the testnet of binance marchain. This is this URL with this network id. So I already configured everything and we are going to target the BSC testnet network. Okay, so let's close this file and we are going to deploy our smart contract. This time we are not in truffle developed.
00:21:20.834 - 00:21:59.630, Speaker A: We are in the normal terminal and we're going to do truffle migrate, reset, and we're going to target the network VSC testnet. Okay, so we press enter and it's going to launch the deployment procedure. So you're going to see a similar output to what we saw before, except that in this case it's going to take slightly more time because it doesn't just deploy to our local machine, but it deploy on a public network. And here we have an error. Okay, so we don't have the correct address. Let's go back in. Truffle config.
00:21:59.630 - 00:22:21.742, Speaker A: Why? We have a problem here. Okay, let me see. I just copy pasted from the doc. Maybe there was a space somewhere. Maybe the forward slash was the problem. Okay, so let's try again. Truffle migrate network, BSE, Desnet.
00:22:21.742 - 00:22:32.254, Speaker A: Come on, binance marching. Don't let me down. Come on, buddy, let's do it. You can do it. You can do it. Yes. You can do it.
00:22:32.254 - 00:23:11.798, Speaker A: Yes. So now it's deploying the migrations contract of truffle. And after it's deploying our own smart contract, simple storage. So here, as you can see, it takes a bit more time saving migration to Gen. And yes, it worked. So here, one thing which is tricky is even though you see if here, actually when you deploy on binance smart chain, you have to mentally replace this by BNB. Because initially truffle was designed for Ethereum, but since Ethereum was copied by other blockchain like binance smart chain, actually on binance smart chain, we don't have ether, but we have BNB.
00:23:11.798 - 00:23:48.354, Speaker A: And here you can copy the transaction hash and go to BSC scan for Testnet, and you put the transaction hash. And normally you should see it. So yes, you can see the transaction hash and it has created our smart contract, Dox 58, et cetera. And when you go back in your terminal, you can see the same contract address, your x 58, et cetera. So now you know how to deploy smart contracts with truffle. Now that our smart contract is deployed, we will interact with it. And for this we will use the truffle console.
00:23:48.354 - 00:24:33.540, Speaker A: So in order to attach a truffle console to a public testnet, we can execute this command truffle console network PSC testnet. So this has to be the same name as what you have in truffle config. Now we are going to get a pointer to our deploy smart contract. So for that we can use the simple storage contract artifact. This is imported automatically in the console. And to get the contract that we deploy, we use the deploy method. Okay, so now if we do storage address, we should see something.
00:24:33.540 - 00:25:04.558, Speaker A: Yes, so that's the address that we saw before on BSE scan. So we are going to update the data on our smart contract. So for that we're going to do storage update data. We're going to put ten and it's going to send a transaction. And here we can see the transaction received. So if you copy this transaction hash and you go to BS scan, testnet. You should be able to see it.
00:25:04.558 - 00:25:27.058, Speaker A: Yes, you can see it. So it worked. Then back to our terminal. So we are going to read the value of data now. So storage read data. Okay, so we don't get a javascript number, but we get an instance of BN js. So to get this number we're going to do two string.
00:25:27.058 - 00:25:50.470, Speaker A: Oops, actually I forgot to use the await keyword. So here I can get back my previous command and I add await. Okay, and now data to string again. And now we can see ten. So it worked. So here I show you how you can interact with the smart contract deploy on a public testnet. And for that we attached the truffle console to the public testnet.
00:25:50.470 - 00:26:18.190, Speaker A: But there is also another thing that is very similar. So let me exit this. When you do truffle develop, this command is going to do two things. First, it start a local development blockchain, and second, it attach a truffle console to it. So here you can see that the output is slightly different from what we had before when we started the console. This part is about ganache, the local development blockchain. And after we have our console.
00:26:18.190 - 00:26:50.410, Speaker A: And so in this console we can do the same thing as we did in the previous console, except that we don't have our smart contract deployed yet. So to deploy them on our local development blockchain we'll do migrate reset. And here you can see that it goes a little bit faster because this is all local. And after we can do exactly the same thing as we did before. So simple storage deployed. Oh, sorry, it's not data, it's supposed to be a storage. But anyway, this represents our contract.
00:26:50.410 - 00:27:28.514, Speaker A: So here data address. We can see that the address is different from the previous address because this is not on the same network. So let me exit this. So remember that truffle develop is different from truffle console that you used to attach to a public testnet. Now you know how to write, test and deploy smart contracts with the truffle framework. You can use truffle for any EVM compatible blockchain like Ethereum, binance, smart chain, and polygon. If you want to keep learning about truffle, it has a large ecosystem of third party libraries like plugins and a lot of ready to use starting kits.
00:27:28.514 - 00:27:43.740, Speaker A: That's what we call the truffle axis. Once you have coded a simple smart contract with truffle, the next step is to code a full blockchain application with the front end. And for that you can check out this tutorial where we build a prediction market on Ethereum with the truffle framework. I will see you there.
