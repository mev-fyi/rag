00:00:00.250 - 00:00:36.630, Speaker A: If you're learning blockchain, DeFi or decentralized finance is the place to be. Decentralized finance is where blockchain developers reinvent the world of finance, but on the blockchain. So this is super exciting. You have a new project popping up every week, but it's also very difficult for a newcomer to get into DeFi programming because you have all these different projects. So the solution is to start from something simple like stablecoins. So stablecoins are special coins that always keep the same value. They are always equal to one dollars.
00:00:36.630 - 00:01:26.178, Speaker A: So you have a different kind of stable coin. For example, one of the most famous one is Dai, and that's actually the favorite of many hardcore DeFi users. But you also have a centralized stablecoin like USDC or tethers. So usually these ones are most popular for end users. So people who are not necessarily hardcore fan of DeFi, but they just discover the world of crypto. And the reason is because this centralized stable coin have a huge liquidity on big exchanges like coinbase or binance. So in your decentralized application, if you want to facilitate end user onboarding, that's a very good idea to accept a centralized stable coin like USDC or tethers.
00:01:26.178 - 00:02:06.702, Speaker A: So in this video we are going to create a command line tool in node js to transfer some USDC. So that's a great first project if you want to get into DeFi programming. That's not for total beginner. If you never studied blockchain programming before, I have another video which is better suited in that case. But if you already know the basics of blockchain and Ethereum, that's fine, you can keep watching this video. And before we continue, I'd like to quickly tell you about a free training on flash loan arbitrage. So flash loan, if you never heard of this before, that basically allow you to borrow huge amount of tokens on the Ethereum blockchain without any collateral.
00:02:06.702 - 00:02:15.814, Speaker A: And thanks to this huge amount of money you can do super cool things like arbitrage. So I have a free training where I explain how it works. So go register now.
00:02:15.852 - 00:02:16.374, Speaker B: It's free.
00:02:16.412 - 00:02:59.442, Speaker A: This stuff is totally nuts. So we're going to start by setting up our project and we need to first install some tools. So we will need node JS, which is JavaScript server side. So if you don't have it on your computer, you can go to the website of Node JS and install the LTS version. And after that we will need a bash terminal. So if you are on macOS or Linux, you should already have a bash terminal, but if you are on windows you have the native terminal of Windows. So that will work if you just use the terminal of Windows.
00:02:59.442 - 00:03:44.686, Speaker A: But if you want to follow exactly the instruction I'm going to give, you can install git for Windows, which is going to give you an emulation of a bash terminal for Windows. After that you can go to your terminal and you create a folder for our project. And with the NPM package manager we're going to initiate an NPM project. So NPm already come install with Node JS. So the way we're gonna initiate our project is with NPM init Y, and after that we're gonna install NPM package called ethers. So ether is a Javascript library to connect to the Ethereum blockchain.
00:03:44.798 - 00:04:18.430, Speaker B: So if you've been in blockchain for a while you probably use webstery. So ethers and Webstery, they have the same functionality. But ethers is a new up and coming package for connecting to the blockchain and it's more and more popular and I think at some point it's going to overtake web three as the most popular Javascript library to connect to the Ethereum blockchain. So that's a really good idea to start learning ethers in this project. So now we have our project set up and next we are going to create a wallet.
00:04:22.790 - 00:05:13.140, Speaker A: In order to interact with the blockchain we need an address. So we're going to first create this address. So first we create a folder called scripts, because we're going to have several scripts we're going to create in this project. And after that we create a file called Createwallet JS. After we require the ether package, after we create a wallet randomly using the Ethers library. So ether wallet create random. So it's going to create both the private key and the associated address.
00:05:13.140 - 00:05:26.322, Speaker A: And after we're going to console log what we call the mnemonic phrase. So mnemonic phrase. This is a sequence of twelve words that is used to generate the private key.
00:05:26.456 - 00:06:15.986, Speaker B: So nebo Nick use Javascript string literal for that and we can get access to the nemonik with wallet nemonik address. So that thing here, the wallet thing that was created here, this is actually an object with different things. So here we, this is not address, this is phrase. All right then after that we also console log the address. Right, let's save this and we're going to run this script. There is no s here. All right, let's try again, Julian.
00:06:15.986 - 00:06:30.570, Speaker B: Yes, it worked. So we're going to save the mnemonic and the address for later. So I save in my notes here. And now that we have this address we can connect to the ethereum blockchain.
00:06:34.750 - 00:07:15.880, Speaker A: In order to connect to the blockchain we need a couple of building blocks. First we need to create a wallet object with the ethers library. So we're going to do this. First we're going to create a folder where we're going to put some utility file and we're going to create a file called wallet js. That's where we're going to create this wallet object I've just mentioned. So let's open this file and first inside we require ethers. And after that we're going to copy paste the mnemonic phrase that we got just before.
00:07:15.880 - 00:07:35.550, Speaker A: So I'll look up my notes, take this, paste it here. And after we create the wallet object by using ethers wallet with an uppercase from minimonic.
00:07:37.010 - 00:08:33.418, Speaker B: After that we're going to console log the address and the minimonic. So for that I just copy paste the console log statement we had in Createwallet JS. After we export the wallet object, there is the s here, and after that another building block is a provider that's also with ethers. So we open this file, once again we require ethers. We define a provider like this get default provider. And we're going to connect to the robstain testnet. So if you're not aware of the different Ethereum blockchain.
00:08:33.418 - 00:09:19.358, Speaker B: So we have main net, so that's the real Ethereum blockchain where we manipulate real ether. And we also have what we call public testnet which are other Ethereum blockchain where we can test our application and we use some fake ether on this public testnet. So that's really good for experimenting and developing. So here we're going to give a URL to our ethereum node. So it's not so easy to run your own Ethereum node. So we're going to use a service called Inferra to run our Ethereum node and it's going to expose an Ethereum node with the URL. So we just use this URL to access the API and everything is really simple.
00:09:19.358 - 00:10:06.554, Speaker B: And after we export the provider, so we need this URL from Inferra. So you go to inferra IO, you create a free account if you don't have an account yet. And after in your dashboard you go to Ethereum. And I think I've reached the max amount of project for the free account. So I'm going to just delete this project. All right, and I create a new project, all right, and here you will see a couple of endpoints. So we're going to target robsten and we're going to take the endpoint in HTTPs.
00:10:06.554 - 00:10:23.490, Speaker B: We copy this back to our file and we copy the infra URL and that's all we need to connect to the blockchain. So next we are going to create a script to get our balance of USDC.
00:10:28.010 - 00:11:03.230, Speaker A: So in this step we're going to connect to the Ethereum blockchain and we're going to read the balance of a specific address in the smart contract of USDC. So for that in the script folder, first we create a new file called get USDC balance. So I open this file and first we import ethers. After we import the wallet and provider that we created previously.
00:11:07.670 - 00:11:53.714, Speaker B: And after we are going to create an async function. So the async keyword is required because inside the main function you use the await keyword for the network operation just after we execute this main function. So that's where we're going to have the logic to read the spot contract. So the first step is to connect to the Ethereum blockchain. And you do this with wallet connect and you pass it the provider. So the logic is a little bit different from webstery for those who know how to use Webstery. And what we get is an object, etherjs object called account.
00:11:53.714 - 00:12:48.660, Speaker B: And now with this account object we'll be able to create another object that represents our connection to the USDC spot contract. And for that we need two other things. First, we need the address of USDC and second, the ABI. So the ABI is a JSON document that describe the interface of all the solidity function. In order to do this we're going to create a new file in utils called config js going to open this file and we're going to do some copy pasting from the GitHub of ether blocks because it's a bit boring to find all this info. So this is the folder of this project. I'm going to inside scripts, utils, config js, copy paste everything here.
00:12:48.660 - 00:13:43.970, Speaker B: So we have the address of USDC on Robston. So there is no such thing as the official USDC token on Robston because this is a public testnet. So this is just a sort of mock fake version of USDC that exists on Robston. But if you wanted, you could deploy your own because really this is just an ES 20 token. And for the ABI, so this is an array of strings and all these strings are function signature. So we don't need to put all the function of an ES 20 token, we just need to put the one that we're going to use. So these two functions here are part of the ES 20 standard, but this one is not.
00:13:43.970 - 00:13:57.906, Speaker B: This is an extra function that exists for this fake version of USDC. And this is basically a faux set, so it allow you to get as many fake USDC as you want. And that's very useful for testing.
00:13:58.018 - 00:13:59.866, Speaker A: But when it comes to reading the.
00:13:59.888 - 00:14:51.274, Speaker B: Balance of token of a specific address, we're going to use the balance of function. And after we export everything, so we go back to the previous file and we're going to import this and what we need is the address and the ABI. And after that we'll be able to create a contract object for USDC. So new ether contract with an uppercase c. So it's bit similar to what we do with Webster. And after it's going to take the address AbI and the account object that we created just above. And now to read the USDC balance we use this USDC object directly on it.
00:14:51.274 - 00:15:35.682, Speaker B: We have the same function as what we pass for the API and for the address. That's going to be account address. And after we're going to console lock this so we could directly print the USDC balance. But we want to format this because otherwise it's going to be a huge number. So we're going to see some sort of cents of tokens. So that's not what we want. So in order to format this we can use ethers, utils, format units, so we pass it the number we want to format and then the number of decimals.
00:15:35.682 - 00:16:17.702, Speaker B: So for USDC that's six. But that's actually quite unusual because for most other tokens as well as for ether, this is 18. So here, just careful. When you manipulate USDC it's a bit different. All right, and we close all of this and I realize here I forget the await keyword and here I forget the function keyword. All right, let's save this and let's run the script. And here we can see that our USDC balance is zero and that's normal because we don't have any token yet.
00:16:17.702 - 00:16:23.240, Speaker B: So next we are going to mint some new USDC tokens so that we can play around with them.
00:16:27.210 - 00:17:10.840, Speaker A: So we can mint some testnet USDC by sending a transaction to the smart contract of USDC on Robston. But for this transaction we'll have to pay gas fee that we will pay with some robstone ether. So first we need to get some robstone ether in the sending address and for that we can use what we call a faux set. So a faucet is a tool to get some testnet ether. So you have faucet for the different public testnet for Robston, Covan, et cetera. So this is the set for Robston. So I'm going to check my notes where I have my address.
00:17:10.840 - 00:17:47.086, Speaker A: I'm going to copy paste this here and I just need to click on the button and it's going to send me one ether. Just need to wait a little bit. Okay, so here I can see the transaction hash on ether scan. So here let me see the transaction. So on ether scan you can see the transaction of mainnet but also of public testnet. You just have to prefix ether scan by the name of the testnet. So it's still loading the info.
00:17:47.086 - 00:18:06.322, Speaker A: It's still pending but yes, probably, maybe like 1015. Second, this is going to be mine. Oh yeah. Okay, so success. And now. Yeah, I can see that one ether was sent. So we're going to go back to the terminal.
00:18:06.466 - 00:18:43.650, Speaker B: So now I'm going to create a new file called mint USDC. So let's open this. I'm actually going to copy paste a lot of the code that we got from the previous script because that's really similar. Right. So all the beginning is the same. We also have a main function that we execute and we connect to the blockchain. We build an object that point to USDC.
00:18:43.650 - 00:19:30.462, Speaker B: And this time with the USDC object we're going to call give me some function here we can customize our transaction. So for the sending address it already knows that it is from this account here. So for the gas price we're going to specify 20 way. So that's how we can indicate 20 times ten power 18 here with a scientific notation. And with this we're going to get a transaction hash. And after that we're going to console log the transaction hash. So at this point the transaction is not mine yet, it has just been sent to the network.
00:19:30.462 - 00:20:16.786, Speaker B: So we need to wait before it's mined. So for that we reuse the transaction object and we call the wait method. And after we're going to console log information about the block transaction. Copper in block number. Block number. All right. And we're also going to console log the gas used and transform this into a string because otherwise that's a big number.
00:20:16.786 - 00:20:54.780, Speaker B: So that's a Javascript object that we can't display directly. All right, so now we're going to run this script. So it took some time to get the transaction confirmation, but finally we got it. You can see the block number and how much gas we used. And so now if we read the balance of USDC, we should see that we have ten USDcs. So our transaction worked. So we successfully minted some USDC.
00:20:54.780 - 00:21:01.730, Speaker B: Great. So now that we know how to do this, the next step is to transfer this USDC to another address.
00:21:05.940 - 00:21:48.240, Speaker A: So we're going to write a script to transfer some USDC from our address to any other address. And to make our script more flexible. Instead of hardcoding the recipient address and the amount of token, we're going to pass this as option of our script. So if our script is for example send, it's going to be transfer USDC js. Then here we'll pass the recipient address and the amount of token. So whatever you want here. So first we will create this new file, transfer USDC.
00:21:48.240 - 00:22:34.488, Speaker A: Then we gonna open it and we're gonna copy paste from the previous script to mint USDC. Because the beginning is similar, right, paste this, we execute main below and as argument we're going to pass it the first two option of the script. So that's going to be in process auGv. So that's given by node js. So here this is an array of all the option given to the script. And we're going to take the first two one like this, and after that.
00:22:34.594 - 00:22:37.468, Speaker B: We'Re going to call this augs.
00:22:37.644 - 00:22:44.124, Speaker A: So in this array, the first position will be the recipient address, and second one the amount of token.
00:22:44.252 - 00:23:48.808, Speaker B: So first we need to pass these two options and make sure that they are correct. So let's define two variables here. And we're going to pass this option in a try catch block. So if there is any error, this is going to be caught by the catch block. So for two we're going to use ethers, utils, get address, and if this is not a correct ethereum address, this is going to throw an error. And so in this case we're going to console log an error, invalid address, try again, and we exit the script with an error. So if you exit the script with zero, that's normal exit, but with one, that's a signal to the operating system that there was a problem.
00:23:48.808 - 00:24:38.310, Speaker B: And after we're going to need another try catch block for the other option. So the amount so ether utils and there is a function called pass units and it's going to pass a string and return a big number object. So a Javascript number that can handle some really big number way beyond the limit of JavaScript. So here this is going to be augs of one and this is with six decimals. So if this value is negative then we have a problem. Oops. Here this is a function.
00:24:38.310 - 00:25:14.864, Speaker B: So here we console log the error invalid amount. All right, actually let's console error here. So it's going to display a bit differently on the terminal. So just to make it more clear that this is an error. And we also exit the script with process exit. So at this stage we have verified that the recipient address and the amount of token are correct. So next we have to check that we have enough tokens in our balance in order to transfer the desired amount.
00:25:14.864 - 00:25:55.264, Speaker B: So first we're going to get the balance of token and after we're going to compare this against the value of token that needs to be transferred. So if balance is lower than the value. So just here this Lt method, this comes from the big number JavaScript library. So both balance and value are big number objects. They are not normal JavaScript object. So if that's the case, then we don't have enough fonts. So we're going to display an error message.
00:25:55.264 - 00:27:24.350, Speaker B: So first we need a formatted value to display. So value formatted first. So the value and it has six decimal and the same thing for the balance and console login error into b shin balance to send and you have balance formatted and we exit with an error code of one. All right, we can finally proceed to the transfer. We send the transaction with the transfer function. So the first argument is the recipient address, then the value, and then we specify the gas price. So 20 way should be enough for Robston console log the transaction hash, and after that we wait for the transaction to be mine console log the block number.
00:27:24.350 - 00:27:54.276, Speaker B: I realized there is an error here, so there should be a semicolon process exit and the same here. All right, so now we're going to run the script. So it's going to be node transfer USDC, and we need an ethereum address. So this address doesn't really matter, that's just for the example.
00:27:54.378 - 00:27:56.564, Speaker A: So we're going to generate randomly an.
00:27:56.602 - 00:28:38.630, Speaker B: Ethereum address by going to this website, vanity eth, scroll down, we click on generate. By the way, this can generate address for any network, testnet main net, it doesn't matter. And then I want to transfer one USDC so our balance is ten. So it should be enough. So since we have six decimal, I think that it should be 10,000 or 10,0000. Oops, I have a typo line 35. Okay, typo here and another typo here.
00:28:38.630 - 00:29:10.364, Speaker B: Right? Let's run the script again. Oh, it tell me that I have an insufficient balance. Okay, so this is not in way, but this is in normal USDC unit. So here if I put 10,000, it means I want to send 10,000 USDC. Okay, so here we're not going to put 10,000, we're just going to put one. And this time should work. Cool.
00:29:10.364 - 00:29:28.336, Speaker B: So now we have transfer USDC. And so just out of curiosity, if I run the script to get our balance, so this time we should see nine because one was transferred. Yes. So everything is correct.
00:29:28.518 - 00:29:55.670, Speaker A: Congrats. Now you know how you can transfer USDC on the Ethereum blockchain. So that was a great intro into the world of DeFi programming. So if you do learn something that is really next level, you should register for my free training on flashloan arbitrage. And here on my channel, I also have a full series on DeFi programming where I go over many DeFi protocol like maker, Dao, Uniswap, etc. I'll see you there.
