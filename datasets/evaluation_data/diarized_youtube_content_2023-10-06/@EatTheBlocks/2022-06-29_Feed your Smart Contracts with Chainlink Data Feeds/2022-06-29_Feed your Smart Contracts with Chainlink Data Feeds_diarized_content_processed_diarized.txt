00:00:00.170 - 00:00:58.106, Speaker A: You want to create a DAP, you get your smart contract ready, everything is fine. But wait, your contract actually need external data to work like price data or weather data. What can we possibly do about it? Well, let me show you how we're gonna do this with Chainlink. But first, if you're new here, I'm Stefan, I'm a chainlink advocate. And on it the blocks we help web two developers get into web three. So for this video we're going to use the Chainlink documentation and we're going to look at the page that allow us to get the price of ETH in USD with solidity and JavaScript and Python with also an example at the bottom to get the price in euro. Now looking at this solidity contract, we see a first import aggregator V three interface.
00:00:58.106 - 00:01:45.306, Speaker A: Now what's happening here is that we're going to call a proxy because the data we want are actually stored on that proxy. Now where that data comes from, it comes from three contracts working together. Those three contracts, they work together, they check the reputation of the nodes, they select which nodes to use to get data, validate the data, and if everything is fine, the data is stored on the proxy and we call this proxy to recover the price. So now if we open our contract in remix, first thing we need is to compile it. So on the left side you see the compile button, press it. Okay, everything worked great. Now we're going to deploy it and if we look at the code we see the example is using the Covan network.
00:01:45.306 - 00:02:28.590, Speaker A: So next thing to do we connect to metamask and then we need to inject web three. You can see my address appears right here. You need some ETH on the covenant network so you can use ETH drops dev copy, pass your address right here and it will send some ETH to your address. Now when that's done we can deploy after it's been deployed. We open the contract at the bottom left and we call the gate lettuce price function which returns the price of east in US dollar. So here we've got 1959 US dollar. Now if you want to have the price in euro, there is also another example that we can also open on remix.
00:02:28.590 - 00:03:20.040, Speaker A: Simply what it does, it gets the price in USD, it gets converted and we get the price in euro. Simple as that. So likewise we compile the contract. Then to deploy we need to inject web three, then select your contract, we deploy it and then we open the deployed contract. And there we'll need three elements. We need the base address to get the price in USD, the quote address for the euro dollar and we want eight decimals. We execute you can shield for a few seconds because covenant is not the fastest network and right there we get â‚¬2798.
00:03:20.040 - 00:03:56.410, Speaker A: Now let's take a look at JavaScript. Let's open the terminal and let's create a new folder, for example data feed. Let's move in and open our text editor. I use vs code, but of course you can use whatever you want. Let's create a JavaScript file datafeed JS we come back in the chainlink documentation. Let's copy and past that. Now to get access to the blockchain we're going to need a node provider.
00:03:56.410 - 00:04:30.834, Speaker A: So we could use alchemy infura or whatever. We're going to use infura because the examples come with infura, so why not? When you're infura you connect with your email and then click on create a new project. I already have a project here and when you enter the project you go to the project settings. There you'll have to create an API key. So select the covenantwork and select and copy the first link and then past it in your JavaScript file right here. Next we're going to need the ether GS for first we need the package manager.
00:04:30.882 - 00:04:35.190, Speaker B: So let's do NPm init. Then we install ether.
00:04:38.680 - 00:05:00.184, Speaker A: Next I'm just going to do a little change on line nine here because this will give us a result in exadecimal which I don't want. So I'm just going to replace it with a function that will allow me to transform those exadcimals into something that's just easier to read. Now if I just do node datafeed.
00:05:00.312 - 00:05:06.460, Speaker B: GS we see 1959 USD.
00:05:10.090 - 00:05:44.434, Speaker A: Now back on our text editor and in the terminal I'm installing hardhat and I execute it with NPX hardhat. We get a few choices, take whatever. I'm going to take the last one just to get the configuration file. Then very important, we need to install the chain link library with all the contracts. Then look at the config file and there we can see that the solidity version is 0.7. 1st thing I'm going to change that to 8.7. Then I'm going to create a contract folder and inside it I'm going to.
00:05:44.472 - 00:05:50.680, Speaker B: Create a new file price consumer v three sol.
00:05:52.170 - 00:06:07.784, Speaker A: Then we'll copy this code here that's in documentation. Now we're going to compile it with NPX hardhat compile next step will be to deploy this contract.
00:06:07.832 - 00:06:09.820, Speaker B: So we'll need a new scripts folder.
00:06:15.690 - 00:06:42.720, Speaker A: And in this folder we'll create a file. For example get dataprice js. Now for this file we can get some help from the hardhat documentation. There's an example and then right there we're just going to make some changes. For example, instead of token I'll have price and then the name of the contract.
00:06:47.510 - 00:06:49.700, Speaker B: Price consumer V three.
00:06:56.980 - 00:07:33.368, Speaker A: Then in a configuration file there is only the compiler, but we also need the network configuration. We can find that in the hardhat doc as well. I just copy those lines right here and I replace Ringby with Covan. Now we could add the URL of our provider and private key here, but I'll just show you another way more secure. We'll create a data file where we're going to put all our private information. So let's move to Infuria and copy past the URL address. And then for the private key open your metamask next to your address you'll see three dots.
00:07:33.368 - 00:08:15.522, Speaker A: Click on it. Then account details, then export private key, enter your password and copy your private key and pass it right there. Then we're just going to call the contract. Let's just add a console log. And now we're ready to deploy the contract and call the proxy. To get the price of east in US dollar all you need to do is NPX hardhat run, then where the script is located and then on which network to deploy we execute. And then of course it didn't work because I forgot to import ether in the config file.
00:08:15.522 - 00:08:31.580, Speaker A: Here we go. Now let's reexecute. And if everything is right, which it isn't, apparently. Okay, I just misplaced our contract. It's not in the right folder. There it goes. And now it has to work.
00:08:36.320 - 00:08:37.864, Speaker B: The contract has been deployed.
00:08:37.912 - 00:09:13.764, Speaker A: We see our account balance, it gets the last price in an object and we get $2,023. Very nice, very nice. Now what remains is we've done solidity JavaScript. We've done the same thing with Hardhat. There's just Python left, so you can install the web three Python library if you wish. You can also use Jupyter or Jupyterlab. But personally, just to go faster for this video I'm going to use Google Collab.
00:09:13.764 - 00:09:14.936, Speaker A: So if you go to Google and.
00:09:14.958 - 00:09:17.112, Speaker B: Type Google Collab, you'll get this.
00:09:17.166 - 00:09:43.040, Speaker A: Now, Google Collab is actually for data science. It gives you access to a notebook online and data science is done for the most part with, you guessed it, Python so when you enter Collab, you just connect with your Gmail account. If you have one, then you need to create a new notebook. Once you're here on the top right, you need to click on connect. Now I split the chain link example into four cells, but you can do everything in one. So the first step is to install the web three library. Very important.
00:09:43.040 - 00:09:47.420, Speaker A: The exclamation mark. Sometimes you can see a percentage symbol. In my case, it's already done, so.
00:09:47.430 - 00:09:48.612, Speaker B: It should go pretty fast.
00:09:48.746 - 00:10:04.116, Speaker A: Then we import the web three library like we did previously. We need our node provider URL. In my case, infura. Copy that. Right there. We execute the sale. And finally, last step, we display the price.
00:10:04.116 - 00:10:16.108, Speaker A: I change the code a little bit to get something more readable. And there we have it. $2,023 reduce. And that's it. I hope you liked it and I'll catch you in the next one.
00:10:16.194 - 00:10:20.490, Speaker B: Cheers. Close.
