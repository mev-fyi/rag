00:00:00.650 - 00:00:35.906, Speaker A: One of the most misunderstood concepts in Ethereum is transaction. For bitcoin, a transaction is simply a financial transfer. But for Ethereum it's so much more and it has to do with smart contracts. Hey, I'm Julian and on the blogs I explain blockchain technology. On Ethereum, the most simple type of transaction is a finance initial transfer. Bob can send to Alice a certain amount of ether, the native cryptocurrency of Ethereum. When this happens, Bob has to send to Ethereum a data package called a transaction.
00:00:35.906 - 00:01:06.430, Speaker A: This transaction contains the following fields from that's the address of Bob. An address is an identifier that identifies account on the Ethereum blockchain. Two, that's the recipient of the transaction. So in our case that's the address of Alice value that's the amount of ether that is transferred. To specify this field we use a unit called way that's a small fraction of an ether. One ether equals ten power 18 way. So if you want to send one ether, it's going to be one with 180.
00:01:06.430 - 00:01:29.990, Speaker A: After then we have the data field. So for simple ether transfer, this is going to be empty. Then we have the non. So this is an integer that is incremented for each transaction. This is used to order transaction on the blockchain. All the nons needs to follow each other on the blockchain. For example, if the last transaction that was sent to the Ethereum blockchain had a nonce of four, for the next transaction it needs to have a nonce of five.
00:01:29.990 - 00:02:14.866, Speaker A: If you try to send a new transaction with a nonce of three or six, it's going to be rejected by the network. Then we have gas and gas price to specify the transaction fees. When you send your transaction to the ethereum network, a miner will have to solve the proof of work algorithm in order to include your transaction in the blockchain and to reward the miner for his work, you need to pay him with a transaction fee. The gas field, also called the gas limit, represent the computational difficulty of a transaction. So for a simple ether transfer this is 21,000, but for more advanced transaction it's higher. So it might seem redundant for a simple ether transaction because this is deterministic. We know in advance how much gas it's going to take, but for more advanced transaction, your transaction can take several execution paths.
00:02:14.866 - 00:02:43.642, Speaker A: And so in this case, this gas limit field makes more sense. Then we have gas price to specify how much ether we are willing to pay for each unit of gas. So we don't pay miners with gas but we pay them with ether. For example, if your gas price is one ether, that means if your gas limit is 21,000, you are willing to pay the minor 21,000 ether. Of course, that's way too much. So we specify gas price with a unit called GUI. One guay equal ten power minus nine ether.
00:02:43.642 - 00:03:32.762, Speaker A: So if you specify a gas price of 100 guay and your gas limit is 21,000, that means you are willing to pay the minor 21,000 times 100 GUI. And finally, the sender of the transaction has to sign the transaction. So that's the address of the from field. And this signature is used by the Ethereum network to verify the authenticity of the transaction. If anybody tried to spend the ether of another address, the signature is going to be wrong and the transaction will be rejected by the ethereum network. Also, if you send your transaction to the ethereum network and someone tried to change one of the parameter, like the recipient, it will not match up with the signature and it will also be rejected by the network. In this signature, we also specify an identifier for each network which prevents what we call replay attacks.
00:03:32.762 - 00:04:11.734, Speaker A: For example, if in the future the ethereum network has a fork, you cannot take a transaction of one branch of the network and send it to another branch. When someone send you some money, you can use this website to make sure that the transaction was actually sent. So here we have a transaction detail. So we're going to go over the main field. So here, this is your transaction hash. That's basically an id for the transaction. Each transaction has a unique transaction hash then status, so it's possible for a transaction to succeed or fail.
00:04:11.734 - 00:04:43.746, Speaker A: So here it succeeded. Then we have the block number in which the transaction was mined. Here we have the number of block confirmation. So that's the number of new blocks that were mined after the block in which your transaction was included. The more the block confirmation, the more secure your transaction. Because if a hacker was trying to fork the network and basically rewrite the history of the blockchain, it will take much more work. If it has a lot of block confirmation, and very quickly it becomes impossible.
00:04:43.746 - 00:05:16.682, Speaker A: Then we have the timestamp. So that's the time of the block in which your transaction was mined. Then you have a couple of field from the transaction, like from, to address the value of ether that was sent, the transaction fee. That's a combination of the gas limit and gas price parameter. Here the gas price. In terms of way below, we have the ether price at the time of the transaction. So one important detail I forgot to mention is that here the account that pays the transaction fee is the sender of the transaction.
00:05:16.682 - 00:05:40.514, Speaker A: So that is the from address. So in this case that means that after this transaction, not only this amount was deducted from the from address, but also the transaction fee and after. You can see more detail here. Yes. Gas limit parameter. How much gas was used in your transaction? So we used all the gas limit and what was the known. So that was the 32nd transaction for this address.
00:05:40.514 - 00:06:18.158, Speaker A: Okay, so that was a simple transaction. But what makes Ethereum really powerful is that we can make much more advanced transaction with smart contract. Smart contracts are small programs that run on the Ethereum blockchain. With smart contracts you can build things like decentralized exchanges, tokens, etc. When you hear about projects like compound uniswap under the hood, they are implemented as smart contracts. To interact with smart contracts, we also use transactions. The transactions have the same fields, except that for the data field, it's not empty.
00:06:18.158 - 00:06:42.326, Speaker A: For the from field, this is the sending address, the two field. This is the address of the smart contract, the value field. This is the amount of ether you want to send to the smart contract. It can be zero if you don't want to send anything for the data field. That's where it gets interesting. The code of smart contract is organized in units called functions. Function can be used to read or modify value in the smart contract.
00:06:42.326 - 00:07:36.986, Speaker A: When you interact with a smart contract, you will execute one of these functions. The data field allow you to specify which function you want to call and which arguments you want to pass to the function. For example, if you call the transfer function of an ES 20 token, you need to specify the recipient address and the number of token that you want to send. To make it simple, I typed the data field in plain text, but it's actually sent in hexadecimal form and then you have the same fields as for simple transaction. So now things start to get exciting. With these advanced transactions, we can do more than just simple financial transfers. Can we push things even further by combining several advanced transactions together? What makes Ethereum really awesome is that one smart contract can interact with several other smart contract.
00:07:36.986 - 00:08:12.270, Speaker A: When you send a transaction to a smart contract, this smart contract can itself call other smart contract with internal transaction, also called messages. For example. That's how we can have exchanges like uniswap manipulate other smart contracts like ES 20 tokens. These internal transactions are similar to the ones I showed you before, except there is no signature. The behavior of a smart contract is entirely determined by their code. There is no need for signature. I show you how one outer transaction can result in several Internet transactions.
00:08:12.270 - 00:08:43.246, Speaker A: But how can we combine several outer transactions? For example, Bob sends some ether to Alice. Then Bob send a transaction to a smart contract. Then Alice sent a transaction to another smart contract, et cetera. On ethereum, transactions are grouped in units called block. After each transaction, the state of Ethereum is changed. For example, after transaction one, Bob has less ether and Alice has more. After transaction two, if Bob did a token transfer, he has less token and someone else has more, et cetera.
00:08:43.246 - 00:09:19.660, Speaker A: Each transaction picks up the state after the previous transaction, so transaction ordering matters. The state inside a block is called the intra block state. But when we read data from Ethereum, for example, when we want to know the ether balance of an address, we always look at the final state of the last block. Now that you know what is a transaction on Ethereum, the next step is to dive deeper into Webstery. Webstery is a Javascript library to easily send Ethereum transaction. You might also want to dive deeper into the concept of gas, which is used for paying transaction fees. I will see you there.
