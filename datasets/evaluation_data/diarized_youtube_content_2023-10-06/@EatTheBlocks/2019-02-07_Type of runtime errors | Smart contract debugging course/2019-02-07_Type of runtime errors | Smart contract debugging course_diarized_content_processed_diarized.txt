00:00:00.330 - 00:00:35.846, Speaker A: In this video, I'm going to explain you what are the different types of runtime errors in solidity. The first kind of error is out of gas. It happens when you don't give enough gas to your transaction, and it doesn't enough gas to finish the execution of the transaction. I will explain this more in details in another video of this course. Next we have the revert error. Revert is an opcode that is triggered. Revert is an upcode of the Ethereum virtual machine that is triggered by programming language like solidity to indicate to the Ethereum virtual machine that there is a problem and the transaction must stop.
00:00:35.846 - 00:01:16.978, Speaker A: I will also explain this in more details in another video of this course. Invade upcode means that we try to execute an upcode in the Ethereum virtual machine that does not exist, and as a result, the Ethereum virtual machine just stop the transaction and cancel any state change. I will also explain this in more detail in another video of this course. An invalid gem is when you try to execute a function that does not exist. It can happen, for example, when you try to call a function in another smart contract at an address that does not exist. So let's take a concrete example. So let's say we have a smart contract a, and this smart contract a calls a function in another smart contract b.
00:01:16.978 - 00:01:58.638, Speaker A: If you see this error, it means that contract b wasn't deployed. It can also happen if you use assembly in solidity and you point to a wrong location in the code. A stack overflow can happen if you do recursion in your solidity smart contract and your recursion is too deep. In another way, it means that you have a function that calls itself and you don't have any stopping condition that is triggered early enough. In solidity, the stack can be at most 1024 frame deep, which means that a function can call itself only 1024 time. If you exceed that, then you will have a stack overflow. This is an error that is not specific to solidity, and that also happened in many other programming language.
00:01:58.638 - 00:02:45.950, Speaker A: So whenever you do recursion, be careful of this error. Stack underflow happen if you try to read an item on the stack but the stack is empty. The stack is a memory location that is used by solidity to store local variables in functions. This will probably not happen during standard execution of solidity code, but only if you use assembly in solidity and you try to pop an item of the stack when your stack is empty. And finally, we have the static state change error, which is quite a rare error, and it basically happened if you call statically another smart contract and try to change its storage. Static calls are a special way to call other smart contract that guarantee you that the state of the other smart contract cannot change again. If you use standard solidity, it will not happen.
00:02:45.950 - 00:02:59.570, Speaker A: It can only happen if you use assembly. You'll probably never run across this error. That's it for the different type of runtime errors in solidity and in the next videos I will explain in more details. Out of gas revert and invalid opcode.
