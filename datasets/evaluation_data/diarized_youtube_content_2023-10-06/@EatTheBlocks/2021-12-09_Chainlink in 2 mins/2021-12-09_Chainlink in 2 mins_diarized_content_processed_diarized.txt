00:00:00.250 - 00:00:43.910, Speaker A: If you want to use offchain data in a smart contract, you need an oracle. Chain link is the most popular oracle with integrations with 89 blockchains including the biggest ones like Ethereum, finance, marching and Solana. In this video I will introduce what is chain link and how you can use it in your blockchain application. If you are new here, I'm julian and in the blocks I help web two developers transition to Webstream. You the main product of Chainlink is data feeds. With data feeds you can get the price of many on chain and off chain assets inside your smart contract. Data feeds are aggregated from many data sources by a decentralized network of independent node operators.
00:00:43.910 - 00:01:26.866, Speaker A: Chainlink nodes are incentivized to produce accurate data because they have to stake some link tokens and if their data is too far from the average, their stake gets slashed. Then the chainlink nodes talk to each other, reach consensus, and the data is sent to a smart contract of chainlink on the blockchain called a feed smart contract. There is one feed smart contract per pair of assets. The easiest way to consume these feeds for on chain assets is with the feed registry contract. To query the lettuce price in your spot contract, you call the lettuce run data function of the feed registry with the asset denominations as argument. This snippet explain how to get asset denominations. In return you will get the price and details about when the price was reported.
00:01:26.866 - 00:02:21.074, Speaker A: Every time the feed is updated, the run ID is updated and you also get the timestamp associated with this run and it's also possible to consume the channeling price feed from outside the blockchain by using Webstery or ether Js. You can also get historical prices by using the get run data function of the feed registry contract. You also have to provide the run ID to identify the time for which you want the data. You could get the run ID by observing the runs as they are submitted on chain and recording them off chain. Another product of Chainlink is Chainlink VRF which allow you to get random number on the blockchain. To get a random number you need to create a smart contract and make it inerate from the VRF consumer base contract. You also need to implement two functions, request randomness which makes the initial request for randomness to a chainlink Oracle and fulfill randomness which received the random number created by the chainlink Oracle.
00:02:21.074 - 00:02:43.740, Speaker A: Your contract also need to have enough link tokens to pay for the service and if you need even more flexibility, you can also use Channellink to initiate any API call from your smart contract. Like for VRF, you have to request the data from your consumer contract and pay channeling for the service. This is a little bit more advanced, so I'll let you check out the channeling documentation link in the description. That's it for today. Have a great day.
