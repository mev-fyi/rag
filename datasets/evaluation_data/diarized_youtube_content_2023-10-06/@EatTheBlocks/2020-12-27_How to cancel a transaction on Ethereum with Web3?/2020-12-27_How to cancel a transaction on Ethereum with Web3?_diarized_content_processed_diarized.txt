00:00:00.330 - 00:00:48.262, Speaker A: Have you ever sent a transaction to Ethereum just before realizing you have made a mistake? You want to cancel your transaction? Is it possible? It's not easy, but there is a trick. In this video I will show you how you can cancel a transaction on the ethereum network using Webstery. If you don't know me, I'm Julian, ex finance guy who switched to crypto and on my channel is the blocks. I teach blockchain development, and before we continue, if you're interested in deep, check out my new course on defi development. Decentralized finance is amazing, but it's really messy and can be really confusing for beginners. So in this course I teach the fundamental concepts of DeFi, the main DeFi protocols, and we build a couple of DeFi projects together. First, we need to understand what is a nons.
00:00:48.262 - 00:01:22.354, Speaker A: In each Ethereum transaction there are a couple of fields we are going to focus on. The from field. This is the address that signed a transaction, and the nons field. This is an integer that is incremented after each transaction of the from address. The nons of a new transaction must always be higher than the nons of the last transaction mined with the from address. So next I'm going to explain what is the memory pool. When a user sends a transaction to the ethereum network, the transaction is not mined instantly, but before it sits in what we call the memory pool.
00:01:22.402 - 00:01:24.374, Speaker B: The memory pool is a part of.
00:01:24.412 - 00:02:11.782, Speaker A: Ethereum clients like Geth or open Ethereum. Miners run these clients to add new blocks to Ethereum. The memory pool is a bucket that receive new transaction before they are mined. The Ethereum clients of miners constantly monitors the memory pool. Select transactions with the highest gas price, puts them in a template block, and try to mine this template block using the proof of work algorithm. It's not possible to take all the transactions of the memory pool in the block template because the cumulative gas used in the whole block by all transactions is capped at 12,500,000 gas. So miners have to maximize their gains by selecting the transactions with the highest gas fees, which means the one with the highest gas price.
00:02:11.782 - 00:02:42.878, Speaker A: With the proof of rock algorithm, miners try to solve a mathematical equation by generating a random number for each attempt and verifying if it solved the equation between each attempt. To solve the equation, the block template is constantly reevaluated based on the new state of the memory pool. If there are new transactions with higher gas price, these transactions are put in the new block template and the transaction with the lower gas price are removed from it. Okay, so that's it for how the memory pool work.
00:02:42.964 - 00:02:44.302, Speaker B: Next we're going to see the whole.
00:02:44.356 - 00:03:16.758, Speaker A: Process of canceling a transaction. So let's say a user sends a first transaction to the Ethereum blockchain. This transaction goes to the memory pool of miners. Then the user realize he made a mistake and wants to cancel his transaction. The user is going to send another transaction that does nothing, for example, sending zero ether to his own address. The trick is that for this new transaction we are going to use the same nodes as the previous transaction and higher gas price. The second transaction is sent to the network and also goes to the memory pool of miners.
00:03:16.758 - 00:03:47.350, Speaker A: The Ethereum client of miner realized that we have two transactions with the same nodes but a different gas price. We cannot have two transactions with the same nodes. This is against the rules of the Ethereum blockchain. So the Ethereum client is going to remove from the memory pool the transaction with the lowest gas price. And at the end we only have the second transaction left in the memory pool. It's as if the first transaction was never sent. One caveat though is that you have to send the second transaction very quickly after the first one.
00:03:47.350 - 00:04:00.950, Speaker A: Once the first transaction has been mined, it's too late. The second transaction will be considered invalid and you won't be able to cancel the first transaction. Okay, so next let's see how we can code this with Webstery.
00:04:04.590 - 00:04:36.594, Speaker B: So in the repo of etherblocks, I've coded a very simple truffle project to make a demo of how transaction cancellation work. So here in the contracts directory I've created a very simple smart contract with a state variable and a function to change its value. And after I've created a script to cancel the transaction. Okay, so first we get all the addresses available and we select the first.
00:04:36.632 - 00:04:37.370, Speaker A: One in the array.
00:04:37.390 - 00:05:16.882, Speaker B: This is going to be the sending address. Then we get the transaction count for this address. So this number basically will be the nons that we will be using our transactions. Then here we build a pointer to our smart contract by using web three. Then here we send a first transaction to our smart contract. And just after we realize we made a mistake and we want to cancel this, so we send a second transaction where we are basically going to send zero ether from our address to our own address. We're going to use the same nons as before.
00:05:16.882 - 00:05:32.646, Speaker B: And for the gas price we are going to use a higher gas price as before. And so this transaction is going to replace the first one on the blockchain. And finally we check that our cancellation work by console, logging the value of.
00:05:32.668 - 00:05:34.774, Speaker A: The data variable and making sure that.
00:05:34.812 - 00:05:37.822, Speaker B: It wasn't affected by the first transaction.
00:05:37.906 - 00:05:40.218, Speaker A: So I try my script by using.
00:05:40.304 - 00:06:12.286, Speaker B: Ganache, the local development blockchain. So for that in one terminal I run Ganache shell I with an option to change the block time to 15 2nd. Otherwise this is set on auto mine and we have no way of testing our script properly. In another terminal I've run the migration command to deploy my smart contract. I've also defined a network called development. You will find this in truffle config.
00:06:12.398 - 00:06:14.446, Speaker A: And after that I tried to execute.
00:06:14.478 - 00:06:36.998, Speaker B: The script with truffle exec cancel transaction network development, but when I tried this it failed. And I think it's because the mining logic of Ganache is a little bit different from the real production ethereum node like geth or open ethereum.
00:06:37.094 - 00:06:40.906, Speaker A: So I wasn't able to make it work on Ganache, but I'm pretty sure.
00:06:41.008 - 00:07:06.706, Speaker B: It can work on public testnet like Covan and also on Mainnet. But in any case, keep in mind that this technique is a bit of a hack and it's actually not easy to make it work because everything happens so quickly. So it's really easy for the second transaction to arrive too late on the blockchain. But for your own understanding, as a blockchain developer, it's important to understand how this mechanism work.
00:07:06.808 - 00:07:44.074, Speaker A: Once you understand how to cancel a transaction from the back end, the next question is how to do it from the front end. For example, you could add a cancel button to your front end so that users can cancel their transactions. I tried to do it from the front end of a dab using the ethers library and metamask, but unfortunately it failed. I found out this is because metamask ignores the value of the nodes you provide from Webstery. If you use other wallets it might be possible though. In the GitHub repo of etherblogs you can find the code of my atoms at canceling a transaction both in the backend with truffle and in the front end with metamask.
00:07:44.122 - 00:07:45.102, Speaker B: And if you want to keep learning.
00:07:45.156 - 00:08:01.220, Speaker A: Blockchain with me, check out this playlist where I explain a couple of technical concepts about blockchain and ethereum. And if you want to do some programming on the block, check out this other playlist where I teach solidity step by step with bite sized videos. I'll see you there.
