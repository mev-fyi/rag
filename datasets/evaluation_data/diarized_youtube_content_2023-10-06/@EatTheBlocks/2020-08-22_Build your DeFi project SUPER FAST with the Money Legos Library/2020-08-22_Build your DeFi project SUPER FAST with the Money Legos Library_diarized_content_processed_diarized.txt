00:00:00.170 - 00:00:45.830, Speaker A: When you build a DeFi project, you often have to do a lot of integration with other DeFi projects. For example, you need to know the addresses of their smart contract, their API, you need to read their documentation to understand how they work and it takes a lot of time. It's a bit tiring. So fortunately there are some nice developers who volunteered to create a Javascript library called money Lego in order to simplify this whole process of integration. So in this video I'm going to explain what is money Lego and how you can use it in your DeFi project in order to reduce a lot of development time. If you don't know me, I'm Julian and on my channel idoblocks, I teach blockchain development and how to find your first blockchain job. And before we continue, quick announcement.
00:00:45.830 - 00:01:18.114, Speaker A: I'm working on a new course on advanced solidity. If you want to be notified when it comes out and receive some exclusive preview, register with the link down below. So we're going to go over the different DeFi protocol that are offered by money Lego. So there are ten of them total. So we're going to start with Ave. So Ave is a lending protocol, you can borrow and lend, yes, 20 tokens. So that was the basic features.
00:01:18.114 - 00:02:11.602, Speaker A: And since then they added many other new cool features such as delegated lending where you don't need any collateral. But they are most famous for having introduced Flash loan and that's what money Lego focused on for AAve. Then we have an integration for compound, which is another lending protocol. It's actually the most popular lending protocol and it's famous for having introduced yield farming with its token a couple of months ago. So with the integration of moneylego you can very easily borrow and lend tokens on compound. Then we have an integration with Curve finance, which is the second most popular decentralized exchange. Curve Finance focuses on stablecoin and has optimized a lot its pricing algorithm which allow for very low sleep, age and really high liquidity.
00:02:11.602 - 00:02:44.510, Speaker A: So if you want to trade a stable coin against another one, curve finance is your best choice. And with Moneylego you can very easily do trade on curve finance. Then we have DYDX, which is another decentralized exchange. But this is for advanced traders, you have very advanced feature like margin trading. It also have a flash loan capabilities. And the integration of Moneylego focuses only on the flash loan of DyDX. And this is very useful because their flash loan is more complex than Ave.
00:02:44.510 - 00:03:16.406, Speaker A: But fortunately for us, Moneylego already did the hard work. Then we have an integration with the idle protocol. So idle is a protocol that allow you to optimize your token investment in the blockchain. So it automatically invests your token in the DeFi protocol with the highest yield. So it's very similar to yearn finance. Then we have an integration with Kyber network, which is one of the most popular decentralized exchange. So with money Lego, you can trade on Kyber very easily.
00:03:16.406 - 00:03:23.922, Speaker A: Then we have an integration with Maker, which is the company that created die, the most popular stable coin.
00:03:24.006 - 00:03:53.138, Speaker B: So if you just need to transfer die, you don't need to use money Lego. It's very simple. Die is just an ES 20 tokens. But if you want to create some die by locking your ether in a maker vault, then it becomes a bit more complex. And that's where the integration of money Lego really help us a lot. Then we have another integration with a project called one inch. So that's a decentralized exchange aggregator.
00:03:53.138 - 00:04:50.542, Speaker B: So it allow you to do very large orders that would otherwise cause a lot of slippage if you send them in just one exchange. But one inch is very smart and it's going to slice your big order into small order and send them into different decentralized exchange so that the total slippage is greatly reduced. Then we have an integration with Uniswap, which is the most popular decentralized exchange. So the problem of the integration with Uniswap is that they still use Uniswap V one, which is the old version. Currently we are at uniswap V two. And actually I have another video on my channel that explain how to integrate with uniswap V two. And finally there is an integration with synthetics, which is an advanced d five protocol where you can get exposure to assets that are not in Ethereum, such as gold, bitcoin, Us dollar, et cetera.
00:04:50.542 - 00:05:12.190, Speaker B: So I would put this in the same category as DydX. This is what we call a derivative exchange. So that was a high level overview of what you can do with Moneylego. And in the next section, I'm going to show you a practical example for how to use Moneylego in a truffle project. And we're going to see the integration with Kyber.
00:05:16.130 - 00:05:45.530, Speaker A: Okay, so I'm going to show you how you can use Moneylego in a truffle project. And I will give a specific example with Skyber. So here I'm in my terminal, and first I'm going to initialize a truffle project. So now I can see my truffle project. And next I'm going to initialize an NPM project and after that I'm going to install the money Lego package. Money Lego.
00:05:47.790 - 00:06:31.770, Speaker B: Okay, so now we can see moneylego in packet json here. And so I'm going to show you how we can integrate Kyber. So I'm going to go to the official documentation of Moneylego. And for each protocol here they have a section in a documentation. So for most protocol they offer an integration both with JavaScript and with solidity. So we're going to start with JavaScript. So here I'm going to copy over the code, I'm going to explain what it does exactly back to the terminal and we can create a file called script JS.
00:06:31.770 - 00:07:25.894, Speaker B: So first we import ether, which is a JavaScript library to interact easily with the Ethereum blockchain that's the same functionality as Webs river. That's an alternative that is becoming more and more popular and it already comes installed with the study defi package. And after, so we import es 20 token object and Kyber. And we're going to see later how we're going to use these two objects. And after we configure ether to connect to the Ethereum blockchain. So here we connect to a local instance of ganache, but you can also connect to the real Ethereum network. For example, if you use infira here you replace this by the URL of Infira.
00:07:25.894 - 00:07:58.840, Speaker B: And after here, so you import your wallet. So this is the private key that you're going to use. You combine this with your provider and with this thing, the wallet, you can finally send transaction to the Ethereum blockchain. So here this function swap on Kyber. So that's where all the action is happening. So let's see how it works. So we pass it the sending address, the recipient address and the amount of ether that we want to send.
00:07:58.840 - 00:08:39.054, Speaker B: So here we build an object that allows to communicate with the smart contract of Kyber network. And here that's interesting. So we use the Kyber object that we imported before from the Moneylego package and we can get the address and the ABI for a smart contract called network here. So that's the main smart contract of Kyber. And this is super convenient because for all the other protocol you can do the same thing. You can get the address and Abi directly by using Moneylego. You don't have to look up yourself in that documentation or on Etherscan.
00:08:39.054 - 00:09:39.666, Speaker B: So if you check out the documentation of Moneylego. This is actually not very well explained. So I found that the best way to know how to import these addresses and Abi was to go to the GitHub repo of Moneylego. You go in SRC and then you'll see the different protocols. So for example, let's check out compound. So for each protocol you'll see a file contracts ts, and here you'll see the name of all their smart contract with the address and Abi. So for example, if we wanted to get the controller smart contract for the address and Abi, what we would do is we'll go on top of this and here we'll import compound and after it's going to be compound comptroller address or Abi.
00:09:39.666 - 00:10:10.266, Speaker B: So you get the logic. And for the other protocol, that's the same thing. You go in the folder of the protocol, for example, curve five contract ts. And here again you can see all the contracts. Okay, so back to our script here. So we build this reference to the spot contract of Kaiper. Here, this is a reference to the ES 20 token that we want to trade.
00:10:10.266 - 00:10:57.546, Speaker B: Here we get Abi of ES 20 with the ES 20 object from money Lego. And so here if we are trading from ether to token, then we use the swap ether to token function of Kyber. We pass the recipient address, the minimum conversion rate. So here we set it to one. But if you check out the documentation of money Lego, there is actually a function on Kyber to get the current market price on Kyber. So that's what you should put for the min conversion rate, less maybe five or 10% depending on what's your tolerance on that. Then you customize the transaction with the gas limit and the value of ether that you want to send in order to buy the tokens.
00:10:57.546 - 00:11:30.470, Speaker B: Then if we are doing the other direction from token to ether. So first we need to approve our token to be spent by the spot contract of Kyber. Actually this could be inside the if and after. I think there is a typo here. I don't think it's from exchange contract. I think here it's Kyber network. So you call this other function swap token to ether and it's going to do the opposite operation from token to ether.
00:11:30.470 - 00:12:08.002, Speaker B: And here you also have to specify the mean conversion rate and you can also do token to token. So again here, this is Kyber network. There was an error in the documentation of money Lego. And after we scroll down and here, that's how we trigger the whole process. So we wrap the previous function another function that do some logging. So give us some info about the transfer we just did and after if you want to execute this, this is super easy. You just do node script JS and it's going to send the transaction.
00:12:08.002 - 00:12:57.350, Speaker B: So this is the Javascript integration, but we can also do integration with solidity in a smart contract. So let's do this. We create a contract called mycontract Sol and we can open this and back to the documentation of money Lego. We go to solidity here and we'll copy the example and I'll explain what's going on. Okay, so here we import the interface of the main contract of Kybers Kyber network proxy. We also import the interface of as 20 from open ziplink. So that's another NPM package that is already installed by money Legos.
00:12:57.350 - 00:13:28.302, Speaker B: And so here is our custom spot contract. So we'll need to deploy this to the blockchain. So here we hot code the address of Kyber network. So actually you can get this from the documentation of Moneylego in addresses Kyber. And here you can see this address. You also have a link to Abis if you need to do some manual copy pasting here. So let's scroll down and see the main function.
00:13:28.302 - 00:13:59.730, Speaker B: So eth two tokens. So with this function we'll be able to swap ether against tokens. So in this internal function eth to token, that's where everything happened. And once we receive the token to our smart contract, we finally forward this token to the sender of the transaction. So let's see, this function is to token. So here we instantiate a pointer to the spot contract of kyber. Then we use their function swap ether to token.
00:13:59.730 - 00:14:31.242, Speaker B: We send them the amount of ether that we want. And here we pass the reference to the token that we want to get with the minimum conversion rate. And after they also have some other function that are unused or token to eth. So the other operation as well as token to token. So as an exercise you can create some other public function that make use of this function, token to token and token to eth. Just make sure to forward the parameters.
00:14:31.386 - 00:14:53.202, Speaker A: So there are still many other stuff you can do with moneylego. Check out the documentation and you can also check out the code on GitHub because sometimes the documentation don't cover everything. So in this video I mentioned Ave flash loan. Actually I have another video that covered this. I also have a full playlist on flash loan as well as a playlist for other defi protocol.
00:14:53.266 - 00:14:53.860, Speaker B: I'll see you there.
