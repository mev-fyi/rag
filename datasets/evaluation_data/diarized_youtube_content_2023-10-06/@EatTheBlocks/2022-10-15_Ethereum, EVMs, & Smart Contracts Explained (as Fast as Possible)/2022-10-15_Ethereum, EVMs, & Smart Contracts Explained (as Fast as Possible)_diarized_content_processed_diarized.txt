00:00:00.250 - 00:00:57.434, Speaker A: Hi, I'm Kat, and today on etherblocks I'm going to explain evms, as well as some neat tricks you can do with them. EVM stands for Ethereum virtual machine. It is a phrase we use to describe a computation engine on a decentralized network that hosts and executes solidity smart contracts on behalf of users or other contracts. This engine can be copied on other blockchain networks and will result in EVM compatibility. Whenever you interact with the network, you are actually issuing a request in the form of a signature and transaction data to a node that will execute your prescribed command, given a valid signature. While you can create the raw data necessary for these transactions from scratch or by hand, wallets like metamask exist to handle this for your convenience. Most of the smart contract call data is already filled in by dapps you interact with, and all you really have to do is occasionally specify priority.
00:00:57.434 - 00:01:57.122, Speaker A: Something to remember is that transactions can't technically be canceled, but if you make a mistake, there's still hope. If Metamask didn't have this handy button, you'd have to find your transaction on a blockchain scanner, and if it's still in the processing queue referred to as the mempool, it can be dropped to be replaced with another. This can be anything from a corrected call to a valueless transaction with yourself, with the same nonce or identifier as the mistake, and an additional bribe to the miner, often in the form of an increased gas fee. If Ethereum's account creation system is also borrowed, usually when the source code itself is forked, you can actually reuse your old private key to generate the same address. Metamask even allows you to add these Ethereum clones to your list of networks. All you need to feed it is a URL that points to a node and the chain id returned by it. Typically, the relevant block explorer will also include a convenient button for quickly adding a network at the bottom of the page.
00:01:57.122 - 00:02:35.198, Speaker A: So you don't have to do this by hand. Let's say you don't have a front end for contract interaction. If you know the contract address, you can put that in the search bar of the relevant block explorer under the contract tab. You will be able to view public information under read contract and directly interact with it through write contract after connecting your wallet. If the code is unpublished, the ABI or contract interface won't be available, and we will have to use remix ethereum.org instead. Here we can connect this browser based IDE to metamask and take a stab at the contract with the custom solidity interface deployed at the target's address.
00:02:35.198 - 00:03:17.766, Speaker A: From here, all you have to do is remove functions that throw errors when called and replace them. You can also extract them from the call data of successful transactions made by other users on the block scanner. In this example, I'm guessing that the contract is a standard ERC 721 from Openzeppelin's library, since the scanner says it's compatible. So I'll go ahead and import that into remix. After taking a look at the transaction history, I can see that someone called this quick mint function that takes no arguments. If I pop that into my interface, it should work. As of right now, you know more than the average person about how Ethereum and its smart contracts work.
00:03:17.766 - 00:03:31.740, Speaker A: For premium web three content, check out our courses and mentoring program on eattheblocks.com. If you found this explanation helpful, be sure to subscribe and hit the bell icon so you don't miss the next one. Our.
