00:00:07.120 - 00:00:46.500, Speaker A: And well, I welcome everybody for this live stream. Today we are going to learn Solana development. There is a lot of action right now on the Solana blockchain. So I think there is a good opportunity for blockchain developer if you are new here. I'm Julian and on either blocks I teach you blockchain development. And before we get started, I want to, for those of you who are new here, check out my free roadmap. This is basically a career guide for newbies in blockchain development.
00:00:46.500 - 00:01:15.506, Speaker A: It's going to give you everything that you need to know in order to get started. So what you need to learn to become a blockchain developer, what are the different ways to specialize and how to get your first job as a total beginner? This is a free resource. So to get it, eat the blocks.com roadmap. The link is in the chat. All right, so welcome everybody. I hope you guys are excited.
00:01:15.506 - 00:02:11.030, Speaker A: So, you know, that's a bit unusual that I talk about Solana because usually on ethereum, on ether blocks, I only talk of Ethereum and solidity. And I still recommend most beginner to start by this because this is where you have the biggest ecosystem, the biggest job market by far. But if you're already a blockchain developer, then you can start to look at Solana. So I want to show you a couple of figures, Solana versus other blockchains, so that we can understand how big it is. So first of all, we can check out this chart on defi llama. So this is a total value locked of Ethereum versus Solana. So this is a common way of measuring how big is the blockchain.
00:02:11.030 - 00:02:43.272, Speaker A: So the more money is locked on, on the blockchain and basically the bigger it is. So you can see that Ethereum is still much bigger than Solana. Solana has a really positive trend. But this is Solana in terms of TVL. This is really way behind in terms of users. It's actually different because they, on Solana there are many, a lot of transaction are for smaller amounts. So maybe that for the number of user it's actually not that far.
00:02:43.272 - 00:03:31.840, Speaker A: And there might actually be more user on Solana than on Ethereum, but not for the TVL, which is the main metrics. And I also wanted to show you another graph. So now Solana compared to other l two s because I think it's a bit unfair to compare it to Ethereum. It's. It's more fair to compare it to l two, which are secondary blockchain connected to Ethereum because I think Solana is more seen as a sort of alternative l two, even though technically this is not an l two. This is its own blockchain, what we call l one layer one. So here we have Solana compared to Arbitrum, which is the most popular L2 blockchain for Ethereum.
00:03:31.840 - 00:04:09.082, Speaker A: And you can see that. So here Solana is the blue. And you can see that for a while arbitrum was above Solana, but recently Solana took over. And so what is this? Well, that's because currently there is this crazy train of meme coins on Solana. And I'm going to show you another website that is really popular right now on Solana. So that's pump fund. That's a token launchpad for meme coin on Solana.
00:04:09.082 - 00:04:41.490, Speaker A: So that's a website basically allow you to easily create a meme coin, but also give you distribution, because there are a lot of investor that go on this website and buy the token. So yes, I know the website looks really silly. Looks like a four years old did it. But they are extremely successful. They've printed dozens and dozens of millions in revenue in just a couple of months. This website is absolutely nuts. And I think that is a big reason for the recent frenzy on Solana.
00:04:41.490 - 00:05:14.720, Speaker A: Actually, if you are interested in how to clone this website, pump fun, you can check out another live stream that I did a few weeks ago. And I think that was really, really interesting. One of the best livestream I've done recently, I think. Okay, so as you can see, there is a very strong dynamic right now. I'm gonna, you know, let's remove this screen because it's going to give us epilepsy. Right. So there is a very big dynamic on Solana right now in terms of TVL, in terms of users.
00:05:14.720 - 00:05:45.300, Speaker A: What is the potential long term? So the technology of Solana is different from Ethereum. A lot of blockchain are just copy paste of Ethereum and just some minor modification. That's not the case of Solana. Everything is completely different. Unique design. Solana is more scalable than Ethereum. Well, at least the current version of Ethereum, it's not as decentralized in terms of user experience.
00:05:45.300 - 00:06:12.710, Speaker A: It's better than Ethereum. And yeah, in terms of technology, this is different. And so this is what we are going to see today. I want to be transparent. I'm still very new to Solana. Okay, so I barely have one lesson in advance compared to you. Okay, so bear with me if I make some inaccurate statement, but we'll see what we can do.
00:06:12.710 - 00:06:43.868, Speaker A: All right, so we have some people in the chat manas TSX matimu. Okay, amazing. All right, so let's see. Let's. Oh, no. Okay, I'm getting ahead of myself. So before we get started with my diagram, I want to show you what does a Solana smart contract look like.
00:06:43.868 - 00:07:28.560, Speaker A: Okay, so here, this is a repo with different smart contract on Solana. And here, this is a very simple smart contract. So later we are going to code this one. But you can see that this is very different from solidity smart contract that we have on Ethereum. This is a different programming language. And so you have, in general, smart contract on Solana tend to be more complex than the same thing on Ethereum. If you compare the same smart contract on Ethereum with solidity with the same smart contract on Solana, the one on Solana will be more complex, definitely.
00:07:28.560 - 00:08:09.786, Speaker A: So, okay, I wanted to show you also another way to get a lot of example of Solana smart contract. Because when you're learning, it's good to have some examples. So I show you a very simple one, and there are some other cool examples there, some more advanced examples. So you can find them on this website, which is basically the remix of Solana. And there are a section where they give you an example of different smart contracts. So those are some really big protocols on Solana. And you can see also which framework they use.
00:08:09.786 - 00:08:36.550, Speaker A: So a lot of them use a framework called encore. Some of them are without encode. We said that they are native. That's basically coding from scratch without any framework. But that is an interesting source of information. And if you want to read any of these smart contracts, those are production smart contracts. You click here on the link and it will take you to their GitHub repo.
00:08:36.550 - 00:09:12.728, Speaker A: All right, so next I want to show you a couple of tools on Solana. So let me show you this. So first of all, you have this tool that's solpj IO. So that's basically the equivalent of remix. That's an I online coding playground for Solana smart contract. It's quite polished. I really like it.
00:09:12.728 - 00:09:53.474, Speaker A: However, I find it harder to use compared to remix. Remix. If you are new here, that's basically an online ide for Ethereum smart contract. And I find it way easier to use than the Solana playground. Okay, what else, what other tools we have? So another interesting tool is this faux set. So this is a website to give you some free Devnet Sol. So you know when you are developing your smart contract, can be interesting to deploy them on a test network.
00:09:53.474 - 00:11:01.880, Speaker A: And so with this website you can get some free testnet devnet so that you can send transaction and run tests. Another interesting resource is the documentation of Solana, which is really well done. I have to say I was pretty impressed. What else? Another good resource that I saw on their website is they have a guide specifically for Ethereum developers where they map concept of ethereum to concept of Solana. For example, here you have a smart contract in solidity and below you have the same smart contract on Solana. So as you can see, this is longer and this is by using their framework called Encore, which means that there is a lot of boilerplate code that is taking care of you. So if you were writing in like what they call native rust, it would be much, much bigger than this.
00:11:01.880 - 00:11:50.606, Speaker A: Alright, so this is probably one of the best resource right here. What else? Solana. Another tool that you will likely use is Solana web3. So that's a JavaScript client for the Solana blockchain. This is a library that allows you to interact with the Solana blockchain so you can read data from Solana but also send transactions. This is the Solana equivalent of Websterite js for Ethereum and also ethers j s on Ethereum. Okay, another tool that I wanted to show you.
00:11:50.606 - 00:12:34.506, Speaker A: Another resource. Exactly. This is a list of RPC provider that are available on Solana. Okay, so you have some of the big names here, like quick node, alchemy who which cover many different blockchain, but you have also some other aren't so famous, and another public, by the way, RPC endpoint. This is an API to let you access the blockchain of Solana, okay. Without having to run a client yourself. And you also have some public endpoints that are run by the Solana foundation.
00:12:34.506 - 00:13:05.808, Speaker A: Okay, so this is for the devnet, but you also have one for Mainnet. Let me, yeah, this one here. So you don't need to even create any account on any blockchain API. You can use this endpoint directly. However, with those public endpoint tend to be a little bit more stingy in terms of usage. So if they are flooded with requests, it's possible that they will just stop working for a while. So there might be a little bit more unreliable.
00:13:05.808 - 00:13:52.720, Speaker A: But if you want to do some quick testing, this is very convenient. Okay, and last thing I want to show you in terms of tool is the blockchain explorer of Solana. So that's the official blockchain explorer. You can see that this is a subdomain of Solana.com. so similar to ether scan, but on for the Solana blockchain. Okay, so now I want to show you explain a couple of concepts. So we are, do we gonna do some coding at some point? But first, let's understand some concept here.
00:13:52.720 - 00:14:28.126, Speaker A: Right. So here, let me see if I can put it in presentation mode. View. Does you have a full screen? Let me see. All right, well, I guess that's all right. That will do for now. So here is basically the architecture of a Solana application.
00:14:28.126 - 00:15:12.874, Speaker A: So on here you have the Solana blockchain, where you have a Solana smart contract that we call program to access the blockchain. You have what we call the Solana JSON RPC API. So technically, this is a part of Solana client, which. Which is the software that run the Solana blockchain. And here you have a client application, which is, in most cases, will be a regular web application, can also be a mobile application, it can be a backend only application. And this application will interact with the blockchain through the API of Solana. And this client application will also interact with a wallet.
00:15:12.874 - 00:16:02.280, Speaker A: So that's on the client side, which is going to be. In most cases, this is going to be a browser extension similar to metamask, but that's another one. And so when you are a Solana developer, you have two choices. Either you focus on the client, so you basically, you are building an application that interface with Solana blockchain, or you focus on the blockchain side. So you will create some program on Solana, or you do full stack, meaning that you do both the blockchain site and also the client. But I recommend to start with your strengths. So, for example, if you are already a web developer, it might be easier to start with the client.
00:16:02.280 - 00:16:34.130, Speaker A: The same if you are a backend developer. And if you are already a smart contract developer, well, you might want to start directly with, with Solana program. And today, this is what we're gonna focus on. All right, so let me see. We have some interesting comment in the chat. So, crypto errands are saying barrier to entry is much higher with rust than solidity. Okay, so I'm gonna give you my impression of Solana at the end, but this is interesting.
00:16:34.130 - 00:17:17.710, Speaker A: So after here in this table, I made some comparison between Ethereum versus Solana, because I guess some of you already know Solana. So how can we compare both? Okay, so on the left we have Ethereum, on the right we have Solana. So on Ethereum, the part of Ethereum that runs smart contract is called the EVM. So Ethereum virtual machine. And on Solana this is called c level. On Ethereum, we talk of smart contracts, but on Solana we talk of program. On Ethereum, we use the solidity programming language for smart contract.
00:17:17.710 - 00:18:02.734, Speaker A: On Solana we mainly use rust, but it's also possible to use c and c. Actually, I've never heard of someone who created a program, a smart contract in circumental, but it would be really interesting. On Ethereum, the most popular smart contract is called foundry. And on Solana it's called encore. On Ethereum, the most popular wallet is called metamask. And on Solana this is phantom. On Ethereum, the currency unit is ether, but the most basic unit is what we call way one.
00:18:02.734 - 00:18:31.682, Speaker A: Ether is actually equal to ten power 18 wei. But on Solana, the equivalent of ether is a soul, and the equivalent of a way is a lamport. On Ethereum, we have the concept of accounts. So that's how the data is stored. For example, when you create a wallet, this is stored in an account. Smart contract is also stored in an account. So you have two kind of account, EoA that externally own address.
00:18:31.682 - 00:19:05.696, Speaker A: That's basically wallet and smart contract. But on Solana accounts they are different. It's classified differently. An account can be executable or not. On the Ethereum blockchain, a smart contract is immutable, meaning that once you deploy it, it's not possible to change its code. However, it's possible to change its data. But on the Solana blockchain, a smart contract is not immutable.
00:19:05.696 - 00:20:03.910, Speaker A: There is a built in mechanism to make updates. So yes, on Ethereum, there are some workaround to make a smart contract updatable, for example with proxy. But that is at the smart contract level, that's not at the protocol level, whereas in Solana, that is at the protocol level. On Ethereum, when you want to modify a. When you want to modify, interact with a smart contract and modify its data, you send a transaction. And specifically, if you want to interact with a smart contract, which is the case most of the time in your transaction, a part of this transaction is going to be what we call the data, and the data will specify which function we want to call with which argument. But on Solana we also have transaction, but inside the equivalent of the data field is what we call instruction, and we can actually have more than one.
00:20:03.910 - 00:20:38.594, Speaker A: This is a big difference compared to Ethereum. On Ethereum we have, yes, 20 and erc. 721 stack. But on Solana the equivalent is the Solana program library Spl. So it does both ERC 20 and ERC 721. On Ethereum we talk of smart contract address, but on Solana we talk of program id. On Ethereum we talk of gas.
00:20:38.594 - 00:21:20.034, Speaker A: So when we pay transaction fee, this is measured in gas, but on Solana this is compute units. On Ethereum, the maximum gas that you can spend, this is called the gas limit in a transaction. But on Solana this is the compute budget. And here the last, last one are quite tricky. So on Ethereum we have a special network that is called Devnet, the Devnet. This is for the blockchain core developer when they want to test a new version of the Ethereum software. So people like us who do smart contract, usually we don't use Devnet, it's just blockchain core dev.
00:21:20.034 - 00:22:01.980, Speaker A: But on Solana the equivalent is testnet. But this is very confusing, because on Ethereum, Testnet is for smart contract developer when they want to test their contract. But the equivalent on Solana is a. Okay, so when you try to deploy your program for testing on Solana, don't try to do it on the testnet, you have to do it on the devnet. So little confusion here in the chat. I see a question, where should you start if you are a Django backend dev, so you could start to do a backend application that interact with Solana program. That's probably the easiest.
00:22:01.980 - 00:22:32.106, Speaker A: And you have a couple of library for that. So you have Webster J's, but you also have one in rust, you also have one python. Okay, then let's go down. So now let's talk of the account model. So there is the key value store on Solana where the key are the addresses. So you can see below what address looks like. Okay, so it doesn't look like exactly the same as on Ethereum.
00:22:32.106 - 00:23:11.462, Speaker A: On Ethereum it doesn't start with a zero x, but that's a same function. Basically identify an account and each of these addresses mapped to an account information. So let's scroll down to see what we have in an account. So in an account we have some data, okay, it can be any arbitrary data, a couple of variables associated to some value. Then we can have an executable. So that's basically the code of program Lemport. So that's the equivalent of the value field in the Ethereum account.
00:23:11.462 - 00:23:54.234, Speaker A: That's how many, how many, how many Solana you have. And basically who is the owner of this account. So that's a program id, or basically the address of a program that owns an account, because all accounts are owned by a program id. But depending on the kind of account, some of those field will be empty. For example, if this account is just a wallet, then the executable field is going to be empty. All right, so let's go down and see the different kind of account that we have. So they all have the same data structure, but they have different function.
00:23:54.234 - 00:24:41.340, Speaker A: So kind of account is a program, basically a smart contract. But the big difference is that on Solana, those programs are stateless, meaning that they only have code, but it don't have any data. The data is on separate accounts that we call data accounts. Okay? So it's as if your smart contract is split in two. You have one account where you have the code and another account where you have the data. And actually, since those accounts have a limits in terms of their size, you could have several data accounts that are associated to the same program. You can also have some data account that are wallets.
00:24:41.340 - 00:25:32.204, Speaker A: So that's the equivalent of EOA on Ethereum. Basically, when you and I, we create a wallet, then it's gonna use an account. Then you have the native, let me see the native program. So those are a program that are provided by the Solana blockchain for some basic function. Like for example, we have the system program that owns all the, all the wallet accounts, and another one is an account that allow you to do smart contract program updates. And finally, we have Sysvar. So Syesvar, you have a couple of pro, this couple of program also provided by Solana, that gives you some information about the Solana blockchain.
00:25:32.204 - 00:26:27.826, Speaker A: For example, what is the current timestamp? So in solidity, the equivalent will be built in variable like block dump timestamp, for example. But here, to replicate the same function, you will use those CZ four program. Okay, so now let's talk of system program. So the system program is a special program provided by Solana. And every time you create a wallet, technically the owner is not the actual owner of the wallet, but is the system program. So when you, for example, when you send Solana from your wallet to another wallet internally, it will be the system program that will do this transfer. Of course, it will verify that you really wanted to make this change thanks to the transaction and your signature.
00:26:27.826 - 00:27:05.054, Speaker A: But technically, those wallets are not manipulated by you. But bye. This system program. Okay, so now let's talk of basically how a program is represented. So basically a smart contract. So first of all, you have the program account, that is some metadata about who control the who is basically the admin of this smart contract. So the admin of the smart contract will have the right to update it.
00:27:05.054 - 00:27:46.174, Speaker A: Okay? It's a huge difference compared to Ethereum, but the program account doesn't have any code. What has the code is another account called program executable data account. It, most of the time when we refer to the program account, we actually mean the second one where there is the code. But technically you have to know that the admin is stored in another account, the buffer account. So that's a temporary account that is created just during deployment. And then you can have zero, one or several data account that are associated to your program. Okay? So as you can see, this is clearly more complex than Ethereum.
00:27:46.174 - 00:28:49.076, Speaker A: Ethereum, you just have one smart contract and that's it. Okay? Now let's talk of how the program is related to system program. So there is a system program called BPFloader program. And this is the owner of this different program, okay? And those program themselves, they can own some, some data account. So moving on now let's talk of transactions, okay? Transaction that's assigned data package that you send when you want to interact with a program. So 1st, 1st, you have, you have a message where you basically, in the message you specify some metadata about the transaction. This is not the most important instruction.
00:28:49.076 - 00:29:17.954, Speaker A: So instruction is the most important. That's the equivalent of the data field. This is where you say what you want to do, but you can have several instruction. Okay? So huge difference compared to ethereum. It's as if you can group together several transaction. So on ethereum, let's say that you want to do several action at the same time. You want to, for example, let's say you want to do several transfer, but in an atomic manner.
00:29:17.954 - 00:29:51.216, Speaker A: See, basically all or nothing. Well, the only way you can do this is by creating an intermediary smart contract that will take a single transaction and that will do all those multiple transfer for you. But on Solana, you don't need to do this. You can put all those individual transaction as instructions. So that's an array basically, and you can wrap it in a single transaction. Okay? So you can arbitrarily group some action together and make them atomic. So big difference.
00:29:51.216 - 00:30:23.072, Speaker A: Then we have the recent block hash. So that's basically an equivalent of the timestamp. When you send this transaction, when this transaction is processed, maximum, it cannot be this. The block hash cannot be, cannot be 150 block behind, which is roughly 1 minute. Okay, so this is quite fast. Basically, if your transaction get lost on the blockchain, it will never be mined. And then we have signers.
00:30:23.072 - 00:31:03.568, Speaker A: So you notice here that this is not single but plural. So you can have several signers associated to a transaction, because a transaction can affect multiple accounts. But to take money from an account, the owner of this account needs to agree. So we can have several people who sign a single transaction. And then, so this instructions are mentioned. That is an array of individual, individual instruction here. And so let's see, let's see, what are those instruction exactly? So each of them mention a program id.
00:31:03.568 - 00:31:40.978, Speaker A: So basically like a smart contract address a list of accounts that are affected by, by this program, by this instruction. Okay, so if you manipulate several accounts, that all needs to be mentioned here. And finally instruction data. So that's basically the argument for this program id. All right. And so finally wanted to show you a whole execution flow when we transfer Sol from an account to another one. So here we have the sender account, the receiver account.
00:31:40.978 - 00:32:19.210, Speaker A: First of all, the sender account is going to sign and send a transaction. This transaction will have an instruction that is going to invoke the system program. All right. So we don't invoke directly the final program, but we have to go through this system program. This system program is going to update, it's going to update the account of the sender. Okay. So it's going to decrease the amount of Lamport and is going to increase the amount of Lamport on the other side of.
00:32:19.210 - 00:33:11.022, Speaker A: All right, so now we have done the theory. So next we are going to do some coding. Okay, so let's see. Now we're going to install the required development tool. Okay, so going to copy paste this URL in the chat. All right, so let me see what we have. So first of all we need to install, let me see, we need to install rust.
00:33:11.022 - 00:33:42.208, Speaker A: Okay, so here you have a command to install rust. So if you don't have it already, because the program on Solana are written in rust. So if you already have rust, that's fine. Otherwise you copy paste this in your terminal. And after you need to run this command so that you can execute the rust compiler directly from the command line. So I've already done it, so I'm not gonna do it again, but just showing you. Then you need to install the Solana Cli.
00:33:42.208 - 00:34:33.530, Speaker A: So what is this? So Solana Cli is a tool, a CLI command line tool to interact with the Solana blockchain. Okay. So you have to execute this script to install it, and then possibly you might have to update your pass that you are able to execute the Solana command directly from your command line. And then you should be able to run this command Solana version. So let me see this. Let's increase the size here. Right, so Solana version and this, you should see something like this.
00:34:33.530 - 00:35:17.486, Speaker A: All right. And then install anchor for Solana. So that is not required for today. So encore, this is a smart contract, a program framework for Solana. That, that's the current of foundry. So it allow you to deploy program, it allow you to test them, but contrary to fundraising, actually does more because this is a layer above the rust, what we call native rust smart contract, which is basically the most barebone kind of smart contract without any help. But very few projects code directly in native rust.
00:35:17.486 - 00:36:01.250, Speaker A: Most projects use encore that provide you a higher level abstraction and that takes care of a lot of boilerplate code. So I recommend to start with native rust program. This is what we're going to do today. Try to do a few, and after, when you board of all this boilerplate code, then check out anchor. Okay, so we can, we can skip anchor. And then what we can do is we can run this command Solana test validator. So it's going to, to run a blockchain locally so that we can deploy our smart contract there.
00:36:01.250 - 00:36:50.030, Speaker A: Okay, so we're going to run this command just after and well, actually let's run it now. So test validator. Okay, so it's doing something. Okay, so now this is working. So you can see the most important is the JSON RPC URL. So this is the URL that you need to reference in your configuration websocket. We're not gonna need it for certain use case, but I JSON, obviously URL is just enough and then you can see that it's working here.
00:36:50.030 - 00:37:25.380, Speaker A: It keeps confirming things even though nothing is happening. It needs to mine a new block, basically. Okay, so let's keep going. What else do we need? So we need to set the configuration for our Solana Cli to localhost, meaning that it is going to connect to this blockchain here. So in another tab we can do this. Okay. And it has, let me see.
00:37:25.380 - 00:38:12.296, Speaker A: And then it tells you where we have the configuration. The configuration is here. Sorry, here. Okay then, so you can get all the configuration with this command Solana config get. Okay, and now we need to generate a new account, basically a new, sorry, a new wallet so that we can send transactions, so we can use the Solana Keygen command for that. All right? So in my case, I've already done it. So I already have it.
00:38:12.296 - 00:38:55.262, Speaker A: But if this is the first time, then it's going to work for you. What else do we need to do? So, okay, so now we need to use when to tell the Solana Cli to use this wallet to run all the command from now on. So you need to run this command. Okay. And then you need to airdrop some soul, some solana to your address. Okay, so here, you run this command and you're going to receive some Solana here. We are connected to our local network.
00:38:55.262 - 00:39:25.162, Speaker A: Okay? That's why we can, we can use this faucet as much as we want. And finally we can get, we can get our balance for the address we've configured. So I've already run the airdrop before. So I have some sol already. And you can have access to many. I can also see my address here. Okay, so that's the equivalent of a public key.
00:39:25.162 - 00:39:50.980, Speaker A: So you can shoot around, no problem. And you can also see all the comment available with this Solana help. So let me walk you through this. So, yeah, show the content of an account. Get your pub, get your address, basically get your balance. But you can also get some information about the blockchain. Some information about the blockchain.
00:39:50.980 - 00:40:12.372, Speaker A: What else you can do? You can, let me see. You can get the largest accounts. There are many things you can do. You can run a stake. You can stake to do some staking. Yeah. Like you can get a lot of information.
00:40:12.372 - 00:40:51.390, Speaker A: And so now what I like to do is I like to do a soul transfer. Okay? So we are going to create a new account and we are going to send some salt to it. Okay? So let me see how to do that. So let's run this comment here. Solana Kijen, new no passphrase, no out file. So we don't want to save it anywhere. Okay.
00:40:51.390 - 00:41:28.768, Speaker A: It's just going to be output in the terminal. We don't care. Okay, so we have this address here. And now let's transfer some Solana token there, right? So what is the command for that Solana transfer? And we're gonna put this address here. Okay. And we specify how many Sol we want to transfer. Okay.
00:41:28.768 - 00:42:00.464, Speaker A: And after we need a flag, because otherwise it's going to refuse to send token to an empty, empty account. So allow unfunded recipient. Yeah, it's like the Solana cli doesn't like poor people. You know, we want to confirm it. You sure you want to send money to this poor guy. Yes, please. All right, so now you can see that this is mined very fast.
00:42:00.464 - 00:42:35.744, Speaker A: So now we can check our balance and it's a little bit less than before. And let me see, I think we could, what was it before? So it was this. Okay, let me see. Yeah, so you can see that it's less than before. And we can also get the balance of the new address, this one. So let's do it. Balance.
00:42:35.744 - 00:43:21.786, Speaker A: Okay, so this is 0.1. So it worked. Awesome. So next what we are going to do is we're going to do something a little bit more involved this time. We are going to create a hello world smart contract. Okay, so let me find my note. Okay.
00:43:21.786 - 00:43:44.770, Speaker A: Okay, got it, got it. So here what we're gonna do is cargo. So cargo, that's the package manager of rust. So if you install rust you should have access to it. Hello world tutorial. Okay. And we specify that we want a library project.
00:43:44.770 - 00:44:24.556, Speaker A: So that's something related to cargo. Okay. So now if we go to this, we should have a new project. So let's open versus code there. And this is a regular rust project. So, alright, so here we have the cargo file which shows you all the dependency and some metadata about the project. And we have the SRC file with some boilerplate code.
00:44:24.556 - 00:44:48.846, Speaker A: So we don't need this at all. We're gonna remove all of that. Okay. And so we're gonna add a new library. So cargo add Solana program. So this is the equivalent of NPM install but for rust. Okay, so it's gonna fetch this.
00:44:48.846 - 00:45:53.980, Speaker A: And now in cargo dot tomo then you can see dependency Solana program. So actually it's recommended that this number, this version number matches exactly the version number of our local blockchain, which is Alpha Solana Cli, which is, let me see, Solana version 1.18. But we have a different version here. So you can specify the version with, I think the something like this. Let me see, let me see my note how I did it. There is a way to, okay, at then double quote, then equal, then here the version number. So with this command you can target a specific version.
00:45:53.980 - 00:46:25.590, Speaker A: Okay, so let's leave it like this. But if it doesn't work later that we will try to change this. Okay, then we go in and lib dot rs. So this is where we're going to have our smart contract. And first we need to import a few things from Solana program. So that's the equivalent of an import statement with JavaScript. So use Solana program.
00:46:25.590 - 00:47:18.170, Speaker A: Okay then let's specify a few things inside. So account info, account info. So yeah, that is self explaining entry point. So that's the function that will be called inside the smart contract, the program entry point, that's program result. So that is how we return something from the program pub key. So that is this type represent an address basically. Okay, and MSG.
00:47:18.170 - 00:48:24.900, Speaker A: So that is, that is the equivalent of print ln in rust, that's or console log in JavaScript. That's a way to print message. So the rust that you are able to use in Sudan, a program is almost the same as the actual rust programming language, except that there are a few restriction, there are a few things that you, a few native library that you cannot use. For example, you cannot do HTTP request, you cannot use the random function, because we want program to be deterministic. If we run them twice with the same input and the same state, they should give you exactly the same output. So you have a few restrictions. But other than that you can use any packages in the rust ecosystem as long as they don't use the few libraries that are forbidden.
00:48:24.900 - 00:49:23.470, Speaker A: But it actually removed a lot of them because those, there are few libraries, maybe ten or 20 native libraries that are forbidden, but those are used by many packages. So at the end of the day, a large portion of the rest ecosystem cannot be used for Solana contract. And there are also a few change to the language like to do instead of print ln. We have MSG, a few, a few little things like this. Okay, so now we have made our import. So next we need to define the entry point macro to specify where we start. So that's with process instructed, okay, and then we need to define this process instruction function.
00:49:23.470 - 00:50:22.134, Speaker A: So that is how you declare a function in rust process instruction. Okay, now we need to declare the argument, so program. First we're gonna have the program id. So that's the, the program id of the, of the program. Then we're gonna have a list of accounts that will be manipulated by this program. So, and this is gonna be a list of account info, okay, and after we're gonna have instruction data. That's the argument of that we provide to the program, okay, and for every program they need to have this function with this name and this exact signature, including the result type.
00:50:22.134 - 00:50:57.180, Speaker A: So program result. And after we have the body of the function where we're going to, the magic is going to happen. So first we're going to log a message. For that we use this macro msg hello world key. And after, when we finish the program, we are going to return an okay enum. So that's a rust thing. That is not from Solana.
00:50:57.180 - 00:51:42.720, Speaker A: Okay, so yeah, at the end of every program you need to return this. And so now we're going to need to build this. So build this, meaning that we're going to transform this rust contract into elementary opcodes that can be understood by the Solana blockchain. So for that in rust, when you want to build your program, you use coggle build. But here we, we want to use a special kind of compilation that is compatible with Solana. So that's called build BPF. Okay, so let's compile this.
00:51:42.720 - 00:52:22.330, Speaker A: It's going to do a bunch of stuff. Alright, so what's the problem here? Unexpected token. That's why it's not happy entry point. What did I miss? Okay, so here. Think I miss this. Alright, so let's try again. Okay, now it's working.
00:52:22.330 - 00:53:16.370, Speaker A: So you can see we have a new directory target with the result of our compilation. So if you go in release, you will see. Let me see. Build and wherever. Where is it, where is it? I'm looking for the build file Solana program. It should be. Just give me 1 second.
00:53:16.370 - 00:54:03.140, Speaker A: I lost it. It's supposed to be somewhere in build that we see this, we should see hello world there, but we don't see it. Okay, that's, that is strange. Okay, anyway, moving on. Maybe it's somewhere I don't see it, but basically it's going to produce this directory, this target directory. Right. So then what else do we need to do? So now we are going to deploy our Solana program.
00:54:03.140 - 00:54:28.920, Speaker A: Okay, so Solana program deploy in target. Supposed to be in target. Target deploy. Let me see. I want to make sure we have it. Target. Why we don't have it here? Maybe my file tree is not up to date.
00:54:28.920 - 00:55:18.610, Speaker A: Target deploy. Then it should be hello world tutorial dot. So. Okay, so let's. Okay, that is strange. So let's build it again because I think we are missing something. Do we have an error here somewhere? Okay, you know what, let's remove the target directory because I feel like this is blocking us.
00:55:18.610 - 00:56:15.750, Speaker A: So remove the target. Okay, let's run again. Cargo build BPF. Right. So what do we have now? We still, we still don't have it. What is happening? That is very strange. Let me check my notes.
00:56:15.750 - 00:56:57.996, Speaker A: That is not normal. So basically here we have our program. Okay then cargo build BPF. Am I in the right directory? I think so. I think I'm in the right directory. Let me see. I'm in a directory with cargo.
00:56:57.996 - 00:57:43.620, Speaker A: So that is absolutely correct. Okay, like, let's, let's remove it one last, one last time. But I don't understand why this is not working. So cargo build SPF. Basically it's supposed to build a computation artifact in weakening BPF. Carlo build BPF. This is supposed to produce that.
00:57:43.620 - 00:58:32.192, Speaker A: It's only compiling the dependency, but it doesn't compile the actual contract. And I have no idea. Okay, guys, you know what? This might be because we use a different Solana program. So I mentioned before that this, if we choose a different version, this might cause problem. So let's remove that cargo remove Solana program. Okay, and now let's do, let's install it again. So cargo install Solana program.
00:58:32.192 - 00:59:35.292, Speaker A: But now we are going to specify the exact version that we have for the CLI, which is this one, and hopefully it's going to solve our problem. All right, so what's the problem here? I know it's not install, it's ad. Sorry. All right, so now this is the correct version, 118 18. Okay, so let's get rid of the target, move to trash. Let's try again to build. Right.
00:59:35.292 - 01:00:12.480, Speaker A: Hopefully this is going to work this time. So target doesn't seem like it. Doesn't seem like it at all. Okay, look, I don't know why that is the case, but maybe we can cheat because I've already done it before. Okay. And it has worked. Okay, so we are going to cheat.
01:00:12.480 - 01:00:46.710, Speaker A: So hello, world. What is this? Src target. Let me see target. Then it's deploy. Okay. And we're gonna copy it here. Okay.
01:00:46.710 - 01:01:06.000, Speaker A: And we're gonna copy this where deploy directory here. Okay. Okay, so now we have this. Cool. So it's supposed to be in target. So no problem. Let's put it here.
01:01:06.000 - 01:01:36.210, Speaker A: So normally when it works, you should have this thing. Okay, deploy. And then the compilation artifact. This is this file. Hello world dot. So let's rename it because this is supposed to be tutorial. Okay, so now finally, let's try again the Solana deployment.
01:01:36.210 - 01:01:50.230, Speaker A: Solana program. Deploy. Target. Deploy. Hello world tutorial. So, okay, and now it is working. Amazing.
01:01:50.230 - 01:02:21.920, Speaker A: Okay, finally we made it. So we, we cheated a little bit, but this is awesome. And so here you can see this is the address of our smart contract. Okay, amazing. So next step is to interact with the blockchain. Okay, so how are we going to do that? NPM. So we're going to do it with JavaScript.
01:02:21.920 - 01:02:57.246, Speaker A: Then we're going to install a dependency called Solana Web three, Solana Webstery let me see. Web three js, maybe. I think that's the, that's the actual name. Okay, so that is work. Yeah, that is working. Let me see. Package JSON.
01:02:57.246 - 01:03:45.546, Speaker A: So Solana Web three js. Okay, perfect. And now let's create a script. Okay, so, and in this script, we are going to connect to the blockchain. So first, let's get Solana Webstery. Solana Webstery J's right. What else do we need? We need the file system because we are going to read, read the key pair that we created before with Solana Cli.
01:03:45.546 - 01:04:17.490, Speaker A: So require fs file system. And after, let's get the connection to the blockchain. So connection, new Webstery dot connection. And let's have the endpoint to get this endpoint. It is somewhere we can get it here, let me see. JSON RPC URL's. This one.
01:04:17.490 - 01:04:48.660, Speaker A: Okay, let's get it here. All right, let me check the, what we have in the chat here. So, so, so, so, disclosure of crypto saying, want to check Gary network on Solana. I have no idea what is Gary network. Alexander. Hey, great channel. Thanks, man.
01:04:48.660 - 01:05:31.830, Speaker A: Okay, so we have the connection here. So next, let's read the key pair where we have the private key and our address. So file system read file sync. Okay, then let's read from the file. So dot config, dot solana dot id dot JSON. And we were given this pass when we created our key pair before. So now we have access to this file.
01:05:31.830 - 01:06:51.710, Speaker A: Next we need to, let me see. We need to define the private, extract the private key from that, because this file has several elements, we need to extract the private key. So let me see, first of all, everything as a string, JSON dot pass. And so we're going to pass the JSON and after that, let's extract what we're going to do after that. Webstery key pair and from secret key. So it can, it can generate a key pair object from a secret key. And here we need to use uint eight array from.
01:06:51.710 - 01:07:43.660, Speaker A: So this is a series of byte, but we need to arrange it in, in this type uint eight array private key. Okay, so now we have our wallet in. With this wallet, we'll be able to interact with the blockchain. So let's create a function. We need to wrap this by in a function because we use a weight inside. Okay, so we're gonna read the balance of our wallet. So connection dot get balance, wallet, dot public key.
01:07:43.660 - 01:08:14.230, Speaker A: Okay. In, after that, let's console log, a few things. So balance. Oops. Balance dot. Let's divide it by the number of lamport so that we have it in soul. Lamports per.
01:08:14.230 - 01:08:42.096, Speaker A: Ah. What happened here? Okay, yeah, sometimes versus code, try to be too smart and actually annoying. So lampods per soul. Okay. And second thing we want to log is the private key. Ah. Want to get rid of that? Okay.
01:08:42.096 - 01:09:04.280, Speaker A: Wallet dot. Public key to string. Okay. And finally, let's trigger this function. Okay, so now let's run it. Node script. Okay, so.
01:09:04.280 - 01:09:44.670, Speaker A: And this is working. So this is our wallet and this is our balance. Very nice. And there is a last thing that I wanted to do but didn't have time to finish this part. So I wanted to send a transaction to our hello world contract, but I I'm sorry, I didn't have time and I don't feel like trying to wing it live because I'm still a newbie to Solana, so I will probably mess it up. Okay, so this will be for another tutorial, but yeah. So today you basically learn the basic concept of the Solana blockchain.
01:09:44.670 - 01:10:18.500, Speaker A: We created our first smart contract with native rust. We interacted with the blockchain by using web3. Solana Web three. We also use the Solana Cli. So that's pretty good. So next would be you could expand this script to interact with our hello world contract. You could do smart contract, a little bit more complex, and then you have other things you can do to get better.
01:10:18.500 - 01:11:07.098, Speaker A: Learning the encore framework, manipulating token, and finally doing some decentralized application where you have front end that interact with a smart contract. All right, so before we finish, let me remind you that if you are new here, check out this roadmap in the blocks.com roadmap. This is basically a free career guide for aspiring blockchain developer. It's going to tell you everything that you need to know. The whole roadmap to follow to become a blockchain dev. So what to learn how to specialize and how to get your first job.
01:11:07.098 - 01:11:27.700, Speaker A: All right, so thanks, everybody, for following today, and I hope that you learn something new. Solana is pretty cool. So maybe if you guys like what I did today, I may do some more advanced tutorial in the future on Solana. All right, everybody, see you next time. Bye.
