00:00:00.330 - 00:00:36.098, Speaker A: With more than $11 billion in total value across all Dapps, Solana is one of the fastest growing blockchain. It can process 50,000 transactions per second, and the average transaction costs less than a penny. In this video, we are going to write our first Solana smart contract in Rust. If you are new here, I'm Julian, and at the blocks I help web two developers transition into web3. First, we need to install Rust. Installing Rust is pretty easy with Rustup, a simple script to install all of the Rust toolkit. Then we need to install the Solana Cli, which is a command line tool to help you interact with the Solana network.
00:00:36.098 - 00:01:08.238, Speaker A: Next, we are going to clone the hello World example project from the Solana GitHub repository. Then in your terminal we install the project with NPM install. Next, we are going to use the Solana ClI to configure a local development environment. Next, we are going to create a new Solana wallet. Solana smart contracts are processed on a network called clusters. For local development, you can use the built in cluster using Solana test validator. Your project contains two important folders inside SRC program Rust, which contains your smart contract code, and client, which contains the front end app that interact with the smart contract.
00:01:08.238 - 00:01:25.106, Speaker A: Let's start with the smart contract. It's a simple program. All it does is increment a number every time it's called. The program imports Solana packages on the top. Next, it defines the greeting account struct. Finally, it declares process instruction as an entry point. You can think of it like the main function for Cilac languages.
00:01:25.106 - 00:02:04.602, Speaker A: The process instruction function prints a message, get the account that is calling the smart contract, and increments the greeting variable by one, and print the number of times the account has called a contract. The OK function lets the client know that the contract runs successfully. Our client is a typescript app which interacts with Solana using the JavaScript SDK. In this file, we connect to a local cluster using the wallet we created it, check that a smart contract has been deployed, and then it calls the smart contract function to see it in action. We're going to compile the app with this command. Next, we are going to deploy the contract on a local cluster with this command. Now we're going to run the client with this command, and you should see the greeting message every time you call the client.
00:02:04.602 - 00:02:11.890, Speaker A: So, smart contract development if you want to know more about Solana, you can check out this other video on my channel. Bye.
