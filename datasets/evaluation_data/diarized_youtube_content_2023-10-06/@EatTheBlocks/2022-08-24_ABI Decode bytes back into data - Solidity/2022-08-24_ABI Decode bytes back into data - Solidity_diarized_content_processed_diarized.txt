00:00:00.330 - 00:00:33.478, Speaker A: When we use the function like call and delegate call, we encode the data into bytes. In this video, I'll show you how to decode bytes back into data. We'll write two functions, a function to encode and a function to decode. For the function to encode, we'll pass in some data types. It will abi encode the data and return some bytes. We'll take this bytes that spin, encode it, and feed it into the function decode inside here. We'll decode bytes back into data and then return these data.
00:00:33.478 - 00:01:11.134, Speaker A: First let's write the function to encode. We'll encode the data un, I'll name it x and an address, address addr and an array of un bracket call data. I'll call it r, and we'll also encode a struct. So I'll define a struct, name it my struct. For the struct, let's put in a string, I'll say string, and I'll name it name and the unit fixed sized array, I'll say un bracket. We'll fix the size to two, and I'll name it nums. We'll pass the struct that we just defined as input.
00:01:11.134 - 00:01:54.190, Speaker A: So I'll say my struct, call data, my struct, we'll abi encode all of these data and then return it as bytes. So I'll type return Abi, encode the first parameter x, address the array r, and my struct. Let's now write the function for decode. Once we encode the data to bytes, how do we decode the bytes back into data? After we decode the bytes back into data, we'll return it. So we'll match these inputs. The first output will be un x. The second output will be address adbr.
00:01:54.190 - 00:02:35.182, Speaker A: The third output will be a unit array. I'll name it r, and the last output will be my struct. And I'll name it my struct. Un array is a memory, so I'll declare as memory, and likewise for my struct, I'll declare as memory. Okay, let's now decode bytes back into these data. To decode bytes back into these data, we'll need to use the function called AbI decode and then pass in the data. And the next input to this function is a list of data types that we're going to be decoding to this data.
00:02:35.182 - 00:03:50.978, Speaker A: Over here, we encode it as un address an array of un and mystruct. So we'll type here un address an array of un and my struct, the function ABI decode will decode the data into these data, type and return it. So we assign the outputs from the function decode to these variables by typing. Parentheses is equal to the first output is a unit, and we assign it to the variable x, the second output, and as the address, we assign it to addr. The third output, we will assign it to the array r, and the last output, we will assign it to my struct since we declared our variables inside the return statement, so inside these parentheses, we don't have to explicitly return these variables. Okay, so let's deploy this contract and I'll show you how to encode the data and then decode it. I'll deploy the contract ABI decode and first we'll encode the data pass in one for the address, I'll paste this address for the array, I'll pass in three, four, five, and for the struct.
00:03:50.978 - 00:04:27.994, Speaker A: The struct takes two parameters, a string of name and a fixed un array of size two. So here we'll type brackets and inside the bracket, the first parameter is a string, so I'll say solidity. The second input will be a unit of size two. So I'll pass in seven and nine and then call encode. We get some data back, and this is the data that we'll have to pass into our function decode. So we'll pass it in and then call decode and we get the data types back. Un text is equal to one address is the address that we copied from above.
00:04:27.994 - 00:04:50.690, Speaker A: The array of un, three, four, five, and the struct. It returns my struct. It doesn't show that we passed the name solidity. It was able to parse the numbers seven and nine that we passed over here. And you can see it over here's.
