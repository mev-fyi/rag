00:00:00.250 - 00:01:02.026, Speaker A: Okay, developers, welcome back. Now, I was having a conversation with a developer friend of mine, and it came to my attention that they didn't know the potential pitfalls of block timestamp and using it in their smart contracts. So I thought I would make this really quick video to make sure we're all on the same page about when we can and can't use block timestamp. If you're new here, I'm Calvin Torah, and on eat the blocks we help web two developers transition into web3 developers have used block timestamps for a number of things in smart contracts, and one of those is to help them generate random numbers. For example, it can also be used for completing an ICO after a certain amount of time or to lock funds up in a contract for a certain amount of time. The problem is, it's pretty unreliable because miners have the ability to mess around with timestamps ever so slightly if there is some kind of monetary benefit for them to do so. This can cause massive problems for your smart contract and your funds if we're not careful.
00:01:02.026 - 00:01:28.706, Speaker A: Let's have a look at a simple example. So here we have a lottery contract that has a uink called past block time that we'll set later. This will only allow one entry or bet per block. We then have a fallback function that will receive all of the funds. We first make sure that the user is sending at least ten ether. This is a pretty expensive game. Then we check if block timestamp is not equal to the past block timestamp.
00:01:28.706 - 00:02:14.834, Speaker A: If both of those checks pass, we update the past block time variable and have our determining factor for the winner. Then, if they're lucky enough, we can transfer them all of the funds in the contract. Under these conditions, it assumes that a user has one in 15 chance of winning all the money. Now, considering how much ether could be locked up in this contract, there's some serious money on the line. If a miner decides it's enough money to act maliciously, they could just solve the block and choose a timestamp that matches the block timestamp section of our code. Not only does this miner win the money, but they also get the minor reward. Now, I think by now most of us already know that we shouldn't be using block timestamp to generate things like random numbers, especially if they're used for anything important, like winning a lottery.
00:02:14.834 - 00:03:01.650, Speaker A: You may see recommendations to use block number mixed with an average block time. For example, one week with a ten second block time. So we can specify at which block we want things to happen or states to change within the contract, but even with this, it's possible block times may change in the future. However, there is a 15 2nd rule which is said to make block timestamp safer. So here on the security recommendations, we can see that miners are able to post a timestamp within about 15 seconds of a block being validated. So if the scale of your time dependent event can vary by 15 seconds and maintain integrity, it is safe to use block timestamp. If your contract is not relying on a timestamp to execute anything of high value, this could be unnecessary.
00:03:01.650 - 00:03:20.302, Speaker A: But it's a good thing to keep in mind the different ways in which we can write vulnerable contracts and leave ourselves open to attack. So please try to avoid using block timestamp for anything super important or anything with really high stakes and monetary benefit. That's all for this quick video. Thank you for watching and I'll speak to you soon.
