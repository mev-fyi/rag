00:00:00.410 - 00:00:52.150, Speaker A: Hey, this is julian and you are on idoblocks. And in this video I'm going to show you how you can declare and manipulate struct in solidity. By the way, I created a free email course to teach you how I got my first remote blockchain job, paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL. Solidity struct are really great to represent struct thread data in your spot contract. The basic idea is that you define a template with different fields that represent your data, and after you will create several clones of this template with exactly the same field, but they will have different value. So this is a little bit similar to classes in JavaScript, except that with solidity struct you can only define fields, but you cannot define any method.
00:00:52.150 - 00:01:22.710, Speaker A: So I know that it sounds a little bit abstract, so let's get into it and let's give some specific examples. So we're going to see four things. First we're going to see how to declare a struct. Then we're going to see how we can do the four basic operation create, read, update, and delete a struct. Then we're going to see some more exotic combinations, such as an array of struct and a mapping of structs. So let's get started by declaring a struct. So let's declare a struct here.
00:01:22.710 - 00:01:58.990, Speaker A: Outside of any functions we use the struct keyword and after that we have to put the name of the struct. So by convention we name this struct with an uppercase. So I'm going to create a struct that is called user. Then I open the curly braces and I define the fields of my user struct. So for that I use the same syntax as we normally use for declaring normal variables. So if you don't know how to declare variable in solidity, check out my video on solidity variables. In this series you'll find a link in the description.
00:01:58.990 - 00:02:37.642, Speaker A: So let's create the first field for our user and we're going to make this an address field and then we need to give a name to this field. So we cannot reuse the address keyword because that's reserved for the type. So we can use an abbreviation like addr like this, and we terminate this by a semicolon. Okay, so we're going to create another field. For example, it can be an integer that store the score of a user. So we define an integer and then the score. Okay, and finally let's give it a last name like a string.
00:02:37.642 - 00:03:14.330, Speaker A: So string name semicolum. All right, so we have declared our user struct, but at this stage this is just a template, it is not stored anyway. So we need to create instances of this truck. So let's see how we can do this. So let's create a function first because we create instances inside function, we make it external. And first we're going to declare a variable type of type user, so user, and we're going to make it in memory. And then we give it a name, so user, but this time with u lowercase.
00:03:14.330 - 00:03:52.710, Speaker A: And after that we reuse the user keyword and we open parentheses. So this means create a new struct. And after that we need to pass the parameters to this struct so that it can populate the different field. So the first one is the address. So I'm going to use the address of the sender of the transaction. Then for the score let's put zero, and for the name, well, we could have an argument in our function string called data underscore name. And here in my struct.
00:03:52.710 - 00:04:27.138, Speaker A: Then I use this argument to create my struct. Okay, and so with this we have created our user struct. So here let's call this user one. So now if I create another struct, user two, then user one and user two are totally independent. If I modify user two, it will not have any consequence on user one. Okay, so this is the first syntax to create a struct. But there is another syntax that allow you to put the parameters out of order.
00:04:27.138 - 00:05:03.710, Speaker A: So let's see how this works. So let's create another user, user user three. So this time we still use the user keyword, but inside we're going to use curly braces. So for example, we can start with the name. So here name column and then the value, then a comma n score and we initialize it at zero. And finally the address. And here msg sender.
00:05:03.710 - 00:05:41.466, Speaker A: Okay, and so yes, the big advantage of this notation is that you don't have to remember the order of the variable, but the disadvantage is that it's a little bit more verbose. So yeah, choose the notation that is the easiest to use for you. Then how can we read a field of our user? So let's say that we want to read the address field of user three. So user three addr. So that's how we would access this field, et cetera, for the other field. So you just have to remember the dot notation. So this is very easy.
00:05:41.466 - 00:06:18.306, Speaker A: Then how can we update a field? So for that you reuse the same notations. So for example, user three score and you just assign the new value. So for example, you make it 20. And finally, how can you delete a struct? Well, you use the delete keyword plus the name of the struct and it will delete it from memory. Okay, so this is great. But in general what we want to do is to store collection of struct in containers. And we have two way to do this.
00:06:18.306 - 00:06:52.750, Speaker A: One way is to declare an array of struct and the other way is by declaring a mapping of struct. So let's first see how we can declare an array of struct. So here above I'm going to declare an array of struct. Let's put it after the definition of the user. So we reference the struct type and then we use the square bracket notation. And then we put a name for our array, so users. Okay, and by the way, here my u is lowercase.
00:06:52.750 - 00:07:32.682, Speaker A: So after in our function, let's add some user to our array. So users push, because this is an array. So we have access to the push method. And inside we can either reference a user that we created before, or we could directly instantiate a user. So push user. And here you will give all your argument to your user. Okay, so this is one way to have a collection of struct, but we have an other way with mappings.
00:07:32.682 - 00:08:14.330, Speaker A: So below the user array, let's define a mapping. And for the key of the mapping we want to pick something that is unique to each struct. So in this case the address will be unique. So I'm going to specify that the key is address and it's going to map to a user and I'm going to call this user list two, for example. And after in my function I can add some user to this mapping. So user list two. And here I reference a new user by its key.
00:08:14.330 - 00:08:42.378, Speaker A: So for example MHT sender. And here I can assign to user two. But I could also create a new user directly. So I could do like user and then put in all the variable. Well you get the id. So struct are really great to represent structured data. And every time you find yourself defining too many variable in your smart contract, that might be a sign that these would be better inside a struct.
00:08:42.378 - 00:08:52.020, Speaker A: Okay, so that's it for this video. And in the next video I'm going to show you how you can use another type that is defined by user and that is called enums. See you for the next video.
