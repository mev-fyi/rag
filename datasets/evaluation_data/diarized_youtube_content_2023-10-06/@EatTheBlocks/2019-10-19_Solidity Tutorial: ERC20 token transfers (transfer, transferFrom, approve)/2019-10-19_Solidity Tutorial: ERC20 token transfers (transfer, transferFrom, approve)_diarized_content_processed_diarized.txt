00:00:00.330 - 00:00:38.134, Speaker A: Hello, this is Julian and you are on edoblox. And in this video I'm going to show you how you can transfer ERC 20 token in solidity. ERC 20 is a standard that describe how we can implement token on the Ethereum blockchain. So with ERC 20 token, you can create your own coin on the Ethereum blockchain. Most tokens represent some form of value, and a lot of them are traded in decentralized exchanges. All right, that's it for the introduction, so let's get started. Transferring ES 20 token in smart contract is very common, so it's very important that you understand how to do it.
00:00:38.134 - 00:01:10.478, Speaker A: So make sure to watch this video until the end. So first in this video I'll show you how we can import an ES 20 token in our smart contract. Then I'll show you the transfer API of ES 20 token. And finally we'll see the transfer from API that allow you to send a token on behalf of someone else. By the way, I created a free email course to teach you how I got my first remote blockchain job. Paid $100,000 a year. So if you want to learn all my secrets, you just have to sign up at this URL.
00:01:10.478 - 00:01:45.402, Speaker A: So first we'll import an as 20 token in our smart contract. And for that I created another smart contract to represent my as 20 token. So this is this contract token here. And actually I didn't write any code myself. All I did was I inherited from this ERC 20 contract here. So this ease keyword means that this contract token inherited from this other one, ERC 20. And ERC 20, where did I get it from? Well, I got it from here, from this import statement.
00:01:45.402 - 00:02:32.834, Speaker A: So I already explained, you import statement in the remix editor. And it's also possible to give an URL that points to a location on the web. So here I gave directly the location of the smart contract that I want to import in my contract. And you've probably heard of open zeppelin before, so this is a library for solidity smart contract, and later I'll do a series just on that. But for now, just be aware that you can use this smart contract for creating yas 20 token. So if you're curious, you can go on GitHub to this address to check the code of the ers 20 token of open Zeppelin. But this video is not about building an ERas 20 token, it's just interacting with an ERas 20 token.
00:02:32.834 - 00:03:07.442, Speaker A: So I'm not going to go through over the code of the ERC 20 token. So back to our token here in remix. And let's go back to our initial contract. And so we're going to import our ERC 20 token. So let's import token Sol so now we'll be able to interact with this contract. Okay, so next let's see how we can use the transfer function of our Es 20 token. And for that I'll quickly have a look at the code of the ES 20 token on open Zeppelin on GitHub.
00:03:07.442 - 00:03:44.690, Speaker A: So let me scroll down and here we see the implementation of the transfer function. And all we care about is the two argument that we have to provide to this function. So we need to provide the recipient and the amount. So when we call this function, that means that we want to send this many token to this address and this will be taken off our own balance. So that means that the calling smart contract must have enough token, otherwise this operation will fail. By the way, you don't have to call the transfer function from a smart contract. It can also be a regular address.
00:03:44.690 - 00:04:37.790, Speaker A: But in both cases you need to make sure that the calling address has enough token. All right, so back to our remix editor and we're going to create a function to call this transfer function. So let's call our function transfer and inside we're going to declare a variable of type token. So that's the Yes 20 token that we created ourself. And we give it a name token. And here we instantiate it that way, and between parentheses we'll give the address of the token. So in the previous video, when I show you how we can interact with other smart contract, I show you how we can create a function to import an address inside our contract.
00:04:37.790 - 00:05:17.442, Speaker A: So if you don't know how to do this, check out this video. Otherwise, if you already know the address of the ERC 20 token, then you can just manually give this address like this. So zero x a blah blah blah. Actually, for our example, I'll take an address that already exists. Let me go in the deploy and run a tab. And let's say if I select, I don't know, the last address generated by remix, I'm going to copy this, I'm going to paste this, and this is just for the example. Of course, this will not be the address of the token smart contract here.
00:05:17.442 - 00:05:51.078, Speaker A: Okay, we terminate our statement and once we have our token pointer then we can execute method on it. So to execute the transfer method then we very simply use the dot notation plus the name of the function. And the first argument is the recipient. So for example, if we wanted to send some money to the caller of our function then would be Msg sender. And then you specify how many token you want to send. So for example 100 token and that's it. Now you know how to transfer as 20 token.
00:05:51.078 - 00:06:40.650, Speaker A: Simple, right? So this is the first API of ERC, but there is another one. So that's transfer front. Transfer front allows to transfer tokens on behalf of someone else, and this is particularly useful in the case of decentralized exchanges. So let's define the term here. So first we have an owner, so that's the address that actually owned the token. Then we have an operator, so that's another address that will be approved by the owner to spend a certain amount of token and to do this approval then we will use this approve function. So for the sake of the example, let's create another smart contract that will be the owner and transfer token will be the operator.
00:06:40.650 - 00:07:25.158, Speaker A: So let's create this contract owner and we're going to create a transfer function as well. And so from this function we're going to call a function of transfer token that will use the transfer from function of the ES 20 token. Before we can do this, we need to approve the transfer token contract. So let's copy this line here inside our transfer function so that we can have a pointer to the token smart contract. Then we're going to approve transfer token. And actually I don't remember the order of the argument. So let's have quick look on GitHub.
00:07:25.158 - 00:07:57.558, Speaker A: So here in the approve function, first argument is the spender, then the amount. Okay, so first we need the address of transfer token. So let's take another address as an example. Of course this is just an example and in reality this will not be this address. And after that we specify an amount. Well actually I want to create an argument for that so that it's a little bit more flexible. Okay, and finally we're going to call the transfer token function.
00:07:57.558 - 00:09:18.830, Speaker A: So for that let's create another pointer. So transfer token, equal transfer token. And here I take the address of this other smart contract. Okay, finally I can call a function on this contract. So transfer token, transfer from, so I haven't created yet this function, but I will do it and I will specify the amount. Okay, so now in the transfer token function, let's create this function, transfer from, so we recreate our pointer inside this function, okay, and this time we're going to transfer from, so token transfer from, and I don't remember the order of the argument, so let's check out the code so this is the code on GitHub and transfer from. So we have the sender and we have a recipient and an amount.
00:09:18.830 - 00:09:49.290, Speaker A: So three argument. So the sender here is owner. So this is the address that called transfer from in transfer token, then the recipient. Well actually we haven't specified any recipients. We need this argument. So here let's add an argument. We call this recipient the same thing in our transfer function below, address recipient.
00:09:49.290 - 00:10:31.090, Speaker A: And here when we called our transfer from, we also specify the recipient. Okay, so here we first we call this function, we specify recipient amount, then here transfer token, transfer from recipient amount, then this. Then we arrive here. And finally we just forward these two arguments. Recipient and amount. The ERC 20 token I want you to transfer this amount of token and you're going to take it from this balance and you're going to send it to this balance. But of course for this to work you need to first to have approved the spender.
00:10:31.090 - 00:11:01.260, Speaker A: So if you approve the spender, but you try to spend more than what was approved, then this is going to fail. And finally, if at some point in the future you want to revoke an approval, then you can call approve again with the same address here, but instead here of amount you put zero. So that's it for how you can send the 20 token in a solidity smart contract. So in the next video I'll explain you what are constructor in solidity smart contract. Thanks for watching and see you for the next video.
