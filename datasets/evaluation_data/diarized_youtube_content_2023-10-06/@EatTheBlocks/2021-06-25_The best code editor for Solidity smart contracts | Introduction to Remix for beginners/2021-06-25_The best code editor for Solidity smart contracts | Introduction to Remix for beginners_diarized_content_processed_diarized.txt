00:00:00.490 - 00:00:39.954, Speaker A: When you learn blockchain development, the most annoying thing is to set up your development environment. That's why you should use a code editor called Remix. With remix you can code solidity smart contracts without installing anything on your computer. You just load a URL in your browser and you're ready. As a blockchain beginner, you need to master Remix, and that's what I'm going to show you in this video. If you don't know me, I'm Julian, and on idoblocks I teach blockchain development. Before we jump into the interface of remix, let's spend a few minutes to understand what are the benefits of using remix.
00:00:39.954 - 00:01:26.694, Speaker A: When you write code, you need to have instant feedback to understand if you have made a mistake or not. One way we get this feedback is with syntax highlighting. For mainstream programming languages like JavaScript, we have syntax highlighting straight out of the box. With most code editors for solidity, it's possible to have syntax highlighting, but we need to set it up. For example, if your code editor is vs code, there is an extension for solidity syntax highlighting. With Remix, you don't have to manage any extension for solidity syntax highlighting. It's already included in remix by default, and when you change the version of solidity, the syntax highlighting automatically adapts to the correct version of solidity, whereas in VS code, I noticed that's not always the case.
00:01:26.694 - 00:02:02.958, Speaker A: So that's one very important feature of Remix. Another thing you need in order to write solidity code is a solid compiler. A solidity compiler will transform your solidity code into another code that we call EVM bytecode. The Ethereum blockchain does not understand solidity, it only understand this EVM bytecode. You can download a serut compiler yourself, but it's not a simple software, mainly because it has a lot of options, and that's just too many details to manage. Also, every time there is a new version of solidity, you need to install a new three ET compiler. That's super annoying.
00:02:02.958 - 00:02:30.954, Speaker A: With Remix, you don't have to manage three ET compilers at all. Remix does it for you, and you can switch easily from one version of solidity to another. Big win when you code three t smart contracts, you also need to have a way to deploy your smart contracts to the blockchain. You could write some code to do this, but that would be really boring. That's what we call boilerplate code. We don't want to spend too much time on this. Once again, with remix, you don't have to do this yourself.
00:02:30.954 - 00:03:08.658, Speaker A: You can just click on the button and it does the deployment for you. That's super simple. When you deploy your smart contracts, you don't want to directly deploy your contracts to Mainnet, the real network of Ethereum. Instead, you want to deploy to other networks where you don't spend real money to do transactions, and when there is no real life consequences if you make mistakes. For this, you have what we call public testnets and local development blockchains. With a local development blockchain you run a blockchain that is local to your computer only. It's completely independent from a main net, the real network of Ethereum.
00:03:08.658 - 00:04:07.802, Speaker A: With remix there is a built in development blockchain and you can deploy your smart contracts to this local blockchain just by clicking on a button. To sum up the benefits you get with Remix, not only it manages a lot of development tools for you, but it also integrates these development tools seamlessly and expose their functionalities with a nice visual interface that's super powerful. Last thing I mentioned about Remix before we move on to the next section is that although Remix was originally designed for Ethereum, it can be used for developing smart contracts on any EVM compatible blockchain like Binance, smart chain or Polygon. In order to use remix, all you have to do is to load the URL in your browser and that's it, you are ready. If you have used visual studio code before, you will notice that the UI is very similar. You have four parts. On the left you have the menu bar.
00:04:07.802 - 00:05:04.958, Speaker A: Just after you have a bigger column where you will find the file Explorer or the tool that is currently selected. After you have the main part, that's where you open your smart contract file and where you see your code. And at the bottom you have a console that gives you some feedback on what's happening, especially when you are deploying a smart contract. You can also zoom in and zoom out, can resize the panel and you also have a couple of other menu. So here you have the three t compiler menu, that's how you choose the three t version. Then you have the deployment menu, that's how you deploy smart contract and then you have the plugin manager, that's how you can activate or deactivate plugin. So by default we just have two plugin activated, but there are a lot of others.
00:05:04.958 - 00:05:51.846, Speaker A: We'll discuss this later. At the bottom left corner you have the setting menu and at any time if you need some help. When you see this icon, that's a link to the help of remix and also you have access to a GitHub chat. So here you go to GitHub and you can ask questions to the community. The first thing to do is to go to the 3d compiler menu and when you create a new spot contract you make sure to use the latest version of three DT. So currently it's 0.8.6 and you also make sure to select autocompile.
00:05:51.846 - 00:06:39.706, Speaker A: So this is very important because every time you make a change in your spot contract with autocompile, it's going to try to recompile it and if there is any error of compilation it's going to show you this in the code editor. Otherwise it's very tedious because you have to come back to this menu after each change and manually compile smart contract in order to find if there are any error. Then you go to the file Explorer menu so you can work with different workspace. Personally I just use the default workspace, but if you want you can create other here. Then here you have the possibility to create a new file. You can also create a new folder if you need. So we just create a new file and we call it mycontract sell.
00:06:39.706 - 00:07:13.958, Speaker A: Okay? And it's also possible to publish all your files to a GitHub guest. So for this you need to configure your GitHub API key in the settings below. Then we'll open mycontract Sol and we'll start to code our smart contract. So this is not a lesson on three DT. So I'm going to go very quick on the three t code. But basically here the first step is to have your three DT statement pragma statement. So since we have selected three t 0.8.6,
00:07:13.958 - 00:07:56.130, Speaker A: we use the same version here. Then you declare a smart contract, then the name of the smart contracts. By convention this is the same name as the file. Then you open the curly braces. Then we can do something very simple. For example, uint public data and just a simple function to change integer variable data equal what we have as an argument. Okay? And so here we don't see any error from the compiler, but if we make an error, if we make a mistake, we'll see right away.
00:07:56.130 - 00:08:38.878, Speaker A: So you see that tell us there is something wrong. So if you go here it tells you what's the problem. So we are expecting a semicolon. So red this means this is an error, you have to fix it, but sometime you have warning. So let's try to get a warning and here view we are going to return an integer and we are going to return, for example, one we forgot external. So here we're going to have a warning. So you tell us that the state mutability can be restricted to pure.
00:08:38.878 - 00:09:16.602, Speaker A: So warning, you can still compile your smart contract, but in general is better to follow the advice of the warning. So in this case we have to replace view by pure. All right, but that was just to show you the warning feature. Let's get rid of this. So once you have written your smart contract and you fix all the error and all the warnings, it's time to deploy your smart contract. So for that you go to the deploy tab here and you need to do some configuration. So first the environment.
00:09:16.602 - 00:09:53.958, Speaker A: So here the two Javascript VM. These are the local development blockchains that I mentioned before. And so here we are just before a hard fork of Ethereum's. We can choose the current version of Ethereum, which is Berlin, or the next version after the hard fork which is London, then injected providers. So this is if you want to deploy to mainnet or a public testnet, and this will connect to metamask. So that means you need to first in metamask select the correct network, it's going to reload, remix, and then you are ready to send a transaction. And then you have Webster provider.
00:09:53.958 - 00:10:34.374, Speaker A: So this is if you want to connect to a node that is running locally, for example an instance of geth, or if you are using ganache. So here you configure the endpoint, but we're not going to do this, we're going to come back to Javascript VM Berlin. Okay, then you select which account you want to select for the deployment. So here, since you are using a local development blockchain, by default we have ten accounts that are created with 100 ether for each. Of course this is a fake ether, this is not valid on main net. So we're just going to select the first one. If you need to copy the address, you can copy the address here.
00:10:34.374 - 00:11:02.730, Speaker A: Then you can adjust the gas limit. So gas, it's a whole discussion on its own. I actually have a series on gas on my channel. So if the default doesn't work, you can increase the gas limit for your transaction. But in general it works. If you want to send some ether, or in the case of binance smart chain, some BNB, then that's how you would do it. And here you specify in which unit, so in way which is the smallest unit, or in ether, which is the biggest unit.
00:11:02.730 - 00:11:33.814, Speaker A: And again, if you are using binance smart chain, even though you see ether here, actually it would mean BnB in this case. So here we're not going to send any ether. Then you select the contract that you want to deploy, then you click on deploy. And so here in the console you can see that something is happening and we see a green checkmark. So it means the transaction was successful. And if you scroll down you will see this thing that appears. So that's the instance of our smart contract.
00:11:33.814 - 00:11:58.322, Speaker A: And here you will see two buttons. So a blue button that's for read only function, and set data that's for function that allow you to modify the data on the blockchain. So here if we click on data, we should see zero because that's the default value. Yes. And if we try to modify this to ten, then we click on set data. We can see here that the transaction was successful and we click on data again. And here we see ten this time.
00:11:58.322 - 00:12:49.054, Speaker A: And as I said before, if you choose another environment, for example injected web3, you can deploy and connect to mainnet or public testnet. And so in this case, every time you set a transaction, if you click on deploy or you click on set data, you will see a pop up of metamask that asks you to confirm the transaction and you will need to wait a bit before the transaction is mined. But in this case, we are connected to a local development blockchain. So everything is just instant. And the last thing I wanted to show you in this video on remix is the plugin part. So for the plugins of remix you go to this menu and here you will see the active plugin and the inactive one. So there are a lot that are inactive.
00:12:49.054 - 00:13:26.190, Speaker A: So let's scroll down, we're going to go over some of them. So Zocrat, this is a framework for zero knowledge proof yo. This is a low level language that is related to solidity, but you probably won't have to use it directly. Wallet connect this is a plugin to connect to many wallets, but I don't really see the use case with remix at the moment. Viper, this is the compiler of Viper. So Viper, this is another programming language for smart contract. Its syntax looks like Python.
00:13:26.190 - 00:14:12.038, Speaker A: The vast majority of smart contract are in solidity. Viper didn't get a lot of traction, unfortunately. Then you have some tutorials here from the UMAP protocol. Then you have an integration with tenderly, that's a tool to inspect transactions on chain that's very useful when you want to debug a transaction that has failed, then integration with a service called sourceify. I've never used it for each of these plugin here you see this icon next to them so you can click on it and it will take you to the documentation. So then we have solidity unit testing. So I've tried this plugin and that's only for tests that are written in solidity.
00:14:12.038 - 00:14:55.130, Speaker A: But in general you will find that the most useful tests for smart contract are integration tests that are written in Javascript and you will do them with truffle. So I didn't find this plugin very useful. Three DT static analysis so that's to do some security analysis of your smart contract. Then three d to UMl. So Uml, that's a kind of diagram that is used to model database and this can be used to represent smart contract. Then Sol hint linter. So this can help you to improve your 3g code, then restore backup so it's possible to backup your whole file explorer of remix into your local fast system.
00:14:55.130 - 00:15:33.874, Speaker A: And then you can restore this with this plugin, then remix these to access your local file from remix and quorum this is an enterprise blockchain, approvable. So this is an oracle core service. A few years ago it was the leader and then we started to talk more about Chainlink, then optimism compilers. Optimism this is a new l two scaling solution and they have their own technology for smart contracts. That's why we need a plugin. Then one click dap so this is a service to create a user interface automatically for your smart contract. I'm not sure if this is still maintained.
00:15:33.874 - 00:16:00.314, Speaker A: Then an integration with the Mithx service so that's another tool to do security analysis. Then Moonbeam and Lexon. I don't know what it is. Then learn eth. This is a tutorial on Ethereum. Then hard hat provider is to integrate with the hard hat framework, then gas profiler so this can help you to optimize the gas consumption of smart contract. Then a flattener so this can help you for deployment.
00:16:00.314 - 00:16:41.022, Speaker A: Basically if you have a smart contract that imports some other smart contract, it will copy paste all the code in a single file. Then you have an integration with the verification tool of ether scan, then a plugin for ethdoc. So basically with this plugin you can generate a documentation for your smart contract and for that you need to use a notation that is called nat spec. Then you can manage workspace in a git repository. It's quite advanced. Then some tutorials for DeFi, then Defi Explorer. So this allow you to inspect all the smart contract of a specific DeFi protocol and at the moment.
00:16:41.022 - 00:17:22.186, Speaker A: Unfortunately they don't have many smart contract then the debuggers this can be very useful. Another debugger plugin here, control flow graph so this can be useful for debugging as well. Cello this is another blockchain I believe, but I haven't used it. And three box this is a project to manage identity on the blockchain and after we have our two active module. In any case, keep in mind that for a basic usage of remix, you probably won't need to install any plugin. You can just stick to the default one that I activated. Now you know how to use remix to code a solidity smart contract great.
00:17:22.186 - 00:17:56.610, Speaker A: The next step is to learn solidity, the programming language of smart contract. Solidity looks easy because its syntax is like JavaScript, but it's tricky because it works very differently from JavaScript. If you want to learn solidity in detail, you can watch my series on solidity, where I cover every aspect of the language in short videos. I originally made this series for Solidity Zero five. We are now at three t zero eight, but since the main feature of the language stay pretty much the same, most of what I teach in this series still applies to solidity .8 I will see you there. Bye.
