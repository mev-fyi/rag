00:00:00.330 - 00:00:45.098, Speaker A: In the last video we saw what is the arrange act assert pattern and how to use it in test. In this video, I will answer a very common question when you are starting to write your first test. What to test in a smart contract this video is part of a full course on smart contract testing on Edwox Pro. In this course, I'll teach you how to use the test driven development approach to develop your smart contract with the raffle framework. If you want to have access to the source code of the free episode, go to the website of idoblox Pro and create a free account by clicking on sign up. First of all, remember that there are two kinds of tests, integration versus unit test. I mentioned that integration tests bring more business value than unit test.
00:00:45.098 - 00:01:29.446, Speaker A: However, I also mentioned that unit tests are easier to do than integration tests. In the context of a web application. I would recommend to start with unit tests since they are easier to do. However, in the context of smart contracts, integration tests are not that much harder to do than unit test and I would recommend to start by them. I would even recommend to mostly do integration test and very few unit tests. Now that we have narrowed down which kind of tests we should do, the next question is what part of a smart contract should we test? Well, it's actually quite easy to answer. In a solidity smart contract, you need to specify whether a function can be called from outside the smart contract or not using the public and private keywords.
00:01:29.446 - 00:02:17.250, Speaker A: For example, every function that can be called from outside the smart contract must be tested. This includes functions with the public keyword, the external keyword, and also functions without any visibility specified because solidity defaults them to public. This is only for smart contracts written with solidity before zero 50, because from zero 50 onwards, solidity does not allow you to omit the visibility keyword of functions. So, as you can see, the rule to choose what needs to be tested in a smart contract is pretty simple. That's the end of the first section of this course. Now you should have learned some basic ideas about testing in general. In the next section I will introduce you the libraries we will use for testing smart contracts.
