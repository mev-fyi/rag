00:00:00.170 - 00:00:39.766, Speaker A: In this video we're to code a smart contract registry with solidity. And before we begin, make sure to join the Facebook group of idabloks where you will find me and other students, and you can ask all the questions you want about blockchain development. So here's the problem. We have a smart contract called token, and we have two other smart contract A and b that interact with this smart contract. So here we have a foo function. Inside this foo function we're going to call the transfer method of our token smart contract. The problem is that the address of this token smart contract might change in the future.
00:00:39.766 - 00:01:30.902, Speaker A: For example, not so long ago the smart contract of the dice table coin was updated. So if you have a spot contract that hard code the address of another spot contract it interact with, at some point you might have a problem. So you might say okay, that's no problem, I can just create a function to update the address of this token spot contract. So that's what I've done here. So here you accept the new address, you protect the excess of your function here after you update the pointer of the token smart contract and everything is fine. And then we have the same logic in any smart contract that interact with this token. But the problem is that when you want to update the address of the token smart contract, you need to call update token on both A and B, and possibly on many other smart contract that interact with it.
00:01:30.902 - 00:02:26.170, Speaker A: And so there will be a moment when some of this smart contract will have the up to date address, but some other will not. And so you will have a broken system in an inconsistent state. So that's really something you want to avoid. The solution to this problem is to create a registry smart contract who will have the responsibility of managing the addresses of all the smart contract that you want to interact with. So we're going to create this registry smart contract, define its name, and it's going to maintain internally a mapping of string to addresses. So the string will identify a specific smart contract. For example, could be the dice table coin, and this will map to the up to date address of this smart contract.
00:02:26.170 - 00:03:22.030, Speaker A: And we're going to call this tokens. But these don't have to be token. This can be any sort of smart contract that you interact with, really. And then we're going to define an administrator in this registry, and this administrator, for example, could be the one who deployed the registry. And after that we will have a function to update the spot contract of each of this token. So first we will make sure that the sender of the transaction is the admin. We want to control the access of this function and after that what we're going to do is, Oops, here I forgot an argument.
00:03:22.030 - 00:04:19.034, Speaker A: And we're going to update the tokens mapping with the new address. And once we have this then we're going to query the registry smart contract to know what is the current address for each token. So let's do this. So here we go back to the ASmart contract. We import the registry and here inside the foo function we define a token variable and we're going to instantiate it with the up to date address. For that we call the registry smart contract. And here we're going to pass the name of the smart contract we want to interact with, for example ABC.
00:04:19.034 - 00:05:16.740, Speaker A: After that we use this pointer and here we can call the correct spot contract. And now we need to define this registry. So here I'm going to replace token by registry. Here it's not going to be update token but update registry because the address of the registry itself might change. Also, this is probably not as common as an update of the token address. We also control the access to this function and here we instantiate our pointer to the registry and we're going to do exactly the same thing in any other smart contract that need to interact with our token. Also going to import the registry here.
00:05:16.740 - 00:05:59.340, Speaker A: And so that means that after you deploy A and b you need to call the update registry function with the correct address for the registry and after you can interact with your token smart contract. And whenever this token smart contract changes, then you call the registry smart contract called the update token function and then you have absolutely nothing to do for A and B. They will just query the data inside the registry and they will have the up to date address for the token. So that's pretty cool. And this is just a small part of all my tricks for solidity. If you want to learn all of this really cool stuff, make sure to watch this series. I'll see you there.
