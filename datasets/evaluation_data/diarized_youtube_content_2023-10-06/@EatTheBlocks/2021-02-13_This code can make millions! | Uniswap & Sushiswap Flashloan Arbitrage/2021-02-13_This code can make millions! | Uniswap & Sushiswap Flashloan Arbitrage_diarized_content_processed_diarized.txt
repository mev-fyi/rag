00:00:00.410 - 00:00:35.714, Speaker A: One of the best way to make money in crypto is arbitrage. But you need some capital to do it, unless you use what we call a flash loan. If you combine a flash loan with arbitrage, you can potentially make 10,000 of dollars in just one transaction. And the only money at risk is the transaction fee. You risk zero dollar of your own capital. If you don't know me, I'm Julian, and on my channel, itoblocks, I explain blockchain technology. To understand flash loan arbitrage, we need to separate the two concepts, flash loan and arbitrage.
00:00:35.714 - 00:01:04.766, Speaker A: So first, let's start with a flash loan. So a flash loan is a way to borrow a lot of money on the blockchain without any collateral and without asking for anybody permission. So here how it work. First, you need to deploy a smart contract if you want to take a flash loan. It doesn't make any sense to take a flash loan directly from your wallet. So as a trader, first you will execute a function of your smart contract. Then this smart contract is going to borrow money from the flash loan.
00:01:04.766 - 00:01:47.962, Speaker A: So this is going to be another smart contract. Usually flash loan are part of other Defi protocol that already have some liquidity, like Uniswap or Ave, and you can borrow as much money as there is in this deFi protocol. For example, if you borrow from a liquidity pool on Uniswap that has $10 million in the pool, that's the maximum that you can borrow. So you borrow the money. The money is in your smart contract, and now you can do whatever you want with this money. So you will use the money to invest in another DeFi protocol, and hopefully you will make some profit. And after you need to reimburse the flash loan, so you reimburse the money that you initially borrowed, plus also a small fee.
00:01:47.962 - 00:02:29.846, Speaker A: And hopefully after that you still have a profit. And so you can send the profit back to the address that triggered the whole process. What's really important to understand is that everything happened in a single transaction. So if your smart contract doesn't reimburse the money to the flash loan at the end of the transaction, or just reimburse a part of it, the code in the flash loan smart contract is going to throw an error and the whole transaction is going to fail. So there is no way to cheat the system. Borrow a lot of money with your flash loan and not reimburse it. Next, what about arbitrage? An arbitrage allow you to make money if you spot a price difference for the same asset across two different exchanges.
00:02:29.846 - 00:03:07.026, Speaker A: For example, if Ethereum is worth 2000 die, another exchange is 2200 die. Then you're going to buy on exchange a, and you're going to sell on exchange b, and you're going to make 200 die of profit. So in order to make a decent profit, you will need to have a lot of capital. And that's when flash loan are very useful. So let's see how we can combine a flash loan with an arbitrage. So we are going to create an arbitrage smart contract, and the trader is going to call a function on this smart contract to trigger the whole process. Then we are going to borrow some die from the flash loan.
00:03:07.026 - 00:03:39.698, Speaker A: So let's say we borrow 2 million die. Then with this money, we're going to buy 1000 ETH at 2000 die each at exchange A. So this ETH is going to go to the arbitrage smart contract. And after that we're going to sell this Eth in exchange b at a higher price for 2200 die. And so in the end, in our arbitrage smart contract, we have 2,200,000 dies. We use most of it to reimburse the die that we borrowed from the flash loan, and for the rest, we take it for ourselves. It's our profit for our project.
00:03:39.698 - 00:04:04.342, Speaker A: For the flash loan, we're going to use Uniswap, and we're going to do an arbitrage between Uniswap and Sushiswap. So the flash loan of Uniswap works slightly differently. So let's see how this works. We'll have our arbitrage smart contract. So our trader is going to initiate the whole process. Then we borrow 2 million die from Uniswap. Then we are going to buy 1000 eTH at 2000 die from sushi swap.
00:04:04.342 - 00:04:48.486, Speaker A: And after we need to reimburse the flash loan, we can either reimburse in die or we can reimburse in another currency using the current price of uniswap. So for example, if on Uniswap one e equal 2200 die, then we only need to reimburse our 2 million die. We need only 909 east, and we'll still have 91 east that we can keep as a profit. So now you understand how the whole process work. Next, our challenge will be to turn this into code. All right, so there is a lot of code. So we're not going to do live coding, but I'm going to walk you through the finished code so you can find this in the GitHub repo of either block in this folder.
00:04:48.486 - 00:05:23.742, Speaker A: So this is a truffle project, and the most important is in the contracts folder, arbitrage saw. So we use three DT 0.6, because this is what is used by uniswap. Here, we import a couple of interfaces that we need in order to interact with Uniswap and Sushiswap. And after we have our contract, so we define a couple of variable here. First, we have the factory of Uniswap. So that's a central hub in the Uniswap ecosystem.
00:05:23.742 - 00:05:55.758, Speaker A: It allows to have some information about the different liquidity pools. Then, deadline. This is going to be used when we're going to do our trade. Then we're going to have a pointer to the sushi router, which is a central smart contract in the Sushiswap ecosystem, and that is used to execute trade in Sushiswap liquidity pools. Internally, Sushiswap reuses a lot of the code of Uniswap. So that's why here for the interface of the sushi router, we actually use the interface of the Uniswap router. It's exactly the same.
00:05:55.758 - 00:06:32.630, Speaker A: Then in the constructor, we're going to initialize the value of the Uniswap factory and initialize the sushi router. Then we have the start arbitrage function. So that's the function that the trader is going to call to execute our arbitrage. So it's up to the trader to monitor price differences between Uniswap and Sushiswap. So probably with a custom script. And when we spot a price difference, then we call this start arbitrage function. Then for the argument, so you have the addresses of the two token that we want to use for our arbitrage.
00:06:32.630 - 00:07:05.650, Speaker A: For example, eth die. So one of these amounts is going to be zero, and the other one is going to be the amount that we want to borrow for our flash loan. If amount zero equals zero and amount one equal 1 million token, it means we are going to borrow for 1 million token one. And conversely, if amount zero is 1 million, then we're going to borrow 1 million token zero. And so in this case, amount one needs to be zero. Okay, so after here, we get the address of the pair smart contract of Uniswap for these two tokens. So here the order doesn't matter.
00:07:05.650 - 00:07:32.570, Speaker A: Uniswap know how to deal with it. So here we make sure that this pair smart contract actually exists. Oh, yeah. So if you don't know the ecosystem of uniswap basically, the pair smart contract is the liquidity pool of Uniswap. That's where the trading actually happened. Then here it's where we are going to initiate the flash loan. So here we create a pointer to the pair smart contract for the two token and we call the swap function.
00:07:32.570 - 00:08:00.178, Speaker A: So this is a low level function. And normally when you trade with Uniswap, you call another smart contract, which is the router and the router behind the hood. It calls this swap function on the pair contract. But when you want to do a flash loan, you need to directly call the swap function on the pair contract yourself. So we specified two amounts. So as a reminder here, one of this amount is going to be zero. And the amount that is not zero, that's the amount of token that you want to borrow.
00:08:00.178 - 00:08:32.862, Speaker A: Then address this. That's the address where we want to receive the token that we borrow. And here the last argument, we need to make sure that this is not empty. This is what's going to trigger the flash loan. Otherwise, if this is empty, this is just a normal swap operation when a trader just want to buy or sell some token and it will not trigger the flash loan. So then Uniswap is going to call back. Our smart contract is going to call back this function here, Uniswap v two call.
00:08:32.862 - 00:08:56.358, Speaker A: So this is a convention. Uniswap is expecting your smart contract to have this function. So it's going to pass a couple of arguments. So the sender, so that's the address that triggered the flash loan. So that's basically the address of our arbitrage smart contract. Then the amount of token that we borrowed. So depending on which one you borrowed, one of them is going to be equal to zero and the other will be the actual amount.
00:08:56.358 - 00:09:26.334, Speaker A: And then the data that we pass here. But we can just ignore this. Then we build an array of addresses. So this is going to be used in order to do the trade later. Then here we get the amount of token that we borrowed, can be amount zero or amount one. Then we get the addresses of the two token in the liquidity pool of Uniswap. Then we make sure that the call come from one of the pair.
00:09:26.334 - 00:09:55.754, Speaker A: Contract of Uniswap. We don't want other smart contract to mess with our arbitrage contract and potentially do weird things. Then we need to make sure that one of the amount is equal to zero. Then here we are going to populate our pass array. So this is very important. That's where we define the direction of the trade. So for example, if amount zero equals zero, it means that on sushi swap, we are going to sell token one for token zero.
00:09:55.754 - 00:10:30.802, Speaker A: And conversely, if amount zero is not equal to zero, then we're going to sell token zero for token one. Then we build a pointer to the token that we're going to sell on Sushiswap. Then we're going to allow the router of Sushiswap to spend our token. This is necessary for trading on Uniswap. Then here we calculate the amount of token that we will need to reimburse to the flash loan of Sushiswap. Then below we are going to sell the token we borrow from Uniswap. We're going to sell it on Sushiswap.
00:10:30.802 - 00:10:53.834, Speaker A: So here, this is the amount that we want to sell. And here, this is the minimum amount of the other token that we want to receive in exchange. That's the amount we're going to need to reimburse the flash loan. So give it the pass to tell Sushiswap what we want to sell and what we want to buy. Then the address that's going to receive the token in output. This is our smart contract. Then we have the deadline parameters.
00:10:53.834 - 00:11:44.366, Speaker A: This is the time limit after which an order will be rejected by Sushiswap. So it's mainly useful if you send an order directly from your wallet to sushiswap. What can happen is that if your transaction is stuck on the network for, let's say, a couple of days and finally it's mined, then you can actually do a trade at a really bad price. Because at the time when you initially sent the trade, the market was at a certain level and you specify a minimum price that was good at that time, but the market has changed and now it became really bad price. So the deadline is used as a protection here. But in our case, if our transaction become stuck, then the price difference that we spot between Uniswap and Sushiswap will not be valid anymore and our arbitrage will not work and we will not be able to reimburse the flash loan. So the whole transaction is going to fail anyway.
00:11:44.366 - 00:12:21.974, Speaker A: So we don't have any use for this deadline, but we still need to specify something. And finally, for the end, I actually got a line, so I did a correction. Let me reload the file. So first of all, we get a pointer to the other token that we got as output from Sushiswap. Then a portion of this token is going to be used to reimburse the flash loan of Uniswap here and we know the correct amount to reinforce because before we call the gets amount in function of uniswap. And finally for the rest, it's our profit. So transaction origin.
00:12:21.974 - 00:12:53.820, Speaker A: This is the address that initiated the whole transaction. So that would be yourself or the script that you use to monitor the price difference between Uniswap and Sushiswap. Next, what do you have to do to actually make money? You need to one, deploy the arbitrage smart contract to the Ethereum blockchain and two, create a script to monitor the price differences between Sushiswap and Uniswap and trigger the flash loan automatically. If you want to keep learning about flash loan, check out this playlist. It covers flash loan in much more detail. I will see you there.
