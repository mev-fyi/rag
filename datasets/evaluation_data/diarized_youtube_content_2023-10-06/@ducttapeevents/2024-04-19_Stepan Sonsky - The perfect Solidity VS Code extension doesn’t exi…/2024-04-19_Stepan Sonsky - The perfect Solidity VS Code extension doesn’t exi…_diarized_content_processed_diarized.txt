00:00:00.920 - 00:01:01.374, Speaker A: Hey everyone, happy to see you there. And today we will learn something about solidity versus code extensions. My name is Stepan and I'm a team lead and ethical hacker and developer in key blockchain security. We are based in Prague, Czech Republic and we are focused to security audits, development of open source tools, namely wake and tools for solidity. We will talk about it later and we are also teaching solidity and EVM on Czech Technical University. These are some of our well known clients and also we've received some grants for our open source development. Well, when it comes to solid versus code extensions, we have to ask what are our requirements? And we will focus on two areas.
00:01:01.374 - 00:02:06.026, Speaker A: The first one is development. Are there any developers out there? Hands up. Great. So if you are a developer, you basically need syntax highlighting, of course, some basic code navigation like go to definition, go to type definition implementation, find all references, some code completion. We don't write every letter in the code, some code actions for quick fixes, code formatting to make our code prettier, refactoring features like renames of symbols and of course compilation and debugging because developers don't like bugs, but auditors do. Yeah, and the second part is security and auditing. Are there any auditors out there? Hands up.
00:02:06.026 - 00:02:40.424, Speaker A: Cool. So if you are a security engineer, you need of course syntax highlighting, code navigation. And here comes the interesting part, static analysis. You can detect vulnerabilities in your code and show it directly in your code. So vulnerability highlighting. If you want to audit something, you usually want to visualize the code differently than just reading the code. So graphs.
00:02:40.424 - 00:03:12.308, Speaker A: I will show it later. Also, when you are auditing, you want to write some notes, some bookmarks in the code for issue tracking and of course unit test. Fast test and displaying the test coverage. Okay, now take a look to the extensions which exist in the market. The first one, the solidity by Juan Blanco. It's like golden standard for solidity development. It's really popular.
00:03:12.308 - 00:03:53.614, Speaker A: It has more than a million installations. It has basic code features like navigation completion, formatting and actions which we talked about before. Some linting using Sol hint and eat LinkedIn. And you can also download the source and ABI from the etherscan and of course compilation. The next one is solidity bionomic foundation. It's really focused to the hardhat integration. It also features code stuff we've talked about.
00:03:53.614 - 00:04:48.194, Speaker A: And yeah, some basic refactoring features like sub model renaming. And when you hover to some part of code, you can get help of functions or contracts and compilation, of course. The next one, visual developer from consensys. The name says it itself, it's really visual. It has pretty nice features. Regarding graphs, which are interactive, you can generate UML diagrams, you can generate reports where you can see like public external view functions, lines of code, lines of assembly code, etcetera. It's really complex.
00:04:48.194 - 00:05:44.594, Speaker A: There is a cockpit view which allows you to better navigate in larger projects. There's outline view, which allows you to see public external functions and its visibility, etcetera. You can also write your notes as bookmarks and yeah, code lens. We haven't been talking about this feature. It's like buttons above your functions and contracts where you can execute some actions. For example, go to references or generate graphs. Yeah, and also there are some features from the Etherscan, like downloading source ABI and for example to see balances of the address.
00:05:44.594 - 00:06:42.854, Speaker A: Well, the next one slitter it static analysis and this extension basically shows you the output from the slitter itself. But it's a little bit outdated. It has a lot of false positives and not so many features, only filtering issues by type. The next one is Metex by consensys. It is also static analyzer, but unfortunately during my preparation of presentation it was discontinued. It was really helpful for our early auditing days and it was a great inspiration for developing wake up. So thank you consensus for your good work.
00:06:42.854 - 00:07:38.804, Speaker A: And finally tools for solidity, which is our extension powered by Wake. I will shortly describe what the wake is, in case you haven't been on the previous talk. So wake is development and testing framework based on Python. It has static analyzer inside for detecting vulnerabilities. It has really powerful features regarding fuzzing, which is testing using randomized values. And you run it over the night and with hundreds of thousand cycles and the morning you can see that some variables, if you are put there, some specific values, it can crash. It's really hard to discover these issues by manual review, so fuzzy is really really useful.
00:07:38.804 - 00:08:41.294, Speaker A: We've got also very nice interactive debugger with detailed call traces. And finally LSP server, which is backend for our versus code extension. And now let's talk about the extension itself, which is on the opposite front end for the wake for versus code. Let's see some of the features. The main feature is static analysis and detections of potential vulnerabilities, displaying them directly in the code even during the development. So it's very important to care about security even during the development. There are a few types of graphs, I will show it later in detail test coverage which is visualizing coverage of your test directly in the code.
00:08:41.294 - 00:09:31.160, Speaker A: We'll show you later as well. And versus code printers, our brand new feature which we released yesterday for Ethereum Zurich, I will show you later as well. And yeah, basic code navigation and code lens actions and of course compilation using solsee. Okay, now let's take a look at the detail of features. So static analysis as you can see directly in the versus code you can have output of static analysis of detections. We are evaluating impact and confidence. You can filter these issues by impact and confidence.
00:09:31.160 - 00:10:17.580, Speaker A: You can group them by these criteria by file, by detector, etcetera. And here are some examples of our two dimensional icons. On the upper side, it's impact and the confidence above. So these are examples, high impact, high confidence, high impact, low confidence, etcetera. Hopefully it's understandable. The next one is vulnerability highlighting. So you can see these vulnerabilities underlined directly in the code with some details.
00:10:17.580 - 00:11:29.666, Speaker A: For example, here's re entrenchy so you can see from which contract which function it is potentially exploitable. Well, graphs, graphs are pretty useful during auditing process because you can see the code from the different view, like more visualized. So for example, this inheritance chain can be transformed to the more complex overview of the inheritance chain control flow graph. Here we have a simple transfer function where we are changing balances of sender and recipient and control. Photograph can transform this code to this graph in some more complex algorithms. It's very useful. You can see the ways, how the code executes and what actions are being executed.
00:11:29.666 - 00:12:35.504, Speaker A: Yeah, for auditing it's very useful. Just coverage as you can see when you write tests, you can see directly in the code highlighted lines which are covered by test. And we are supporting even real time test coverage during the fuzzing. And finally our new feature vs. Code printers which we released today, yesterday, so you can install it and try it. And versus core printers are like you can execute native versus code actions from the LSP server. So for example here we are showing public function button on the code lens above the contract and then you can see all public functions and you can navigate to them in the code.
00:12:35.504 - 00:13:49.248, Speaker A: Much more features regarding versus code printers are coming very soon. So looking forward what we can do with this powerful stuff. Stuff, yeah, and here is a summary of extensions we were talking about, so you can have a great bigger picture about all of them. And yeah, so here comes the answer for the question. This perfect solidity extension simply doesn't exist. And now you have a great overview which extension have advantages and disadvantages and you can combine them to make the great combo for your usage. Thank you for your attention and if you are interested in fuzzing, I would like to invite you to our workshop at 03:30 p.m.
00:13:49.248 - 00:13:54.004, Speaker A: On merge stage. Yeah, see you there. Thank you very much.
00:14:01.144 - 00:14:18.104, Speaker B: Perfect. Thank you so much. Stefan, is there any questions from the audience about the talk? No questions. Okay, there is one question up there. You're gonna get the mic quickly from a volunteer. Just please wait for the mic. Thank you.
00:14:22.564 - 00:14:35.184, Speaker C: Do you use any other open source projects like Foundry has been set before in the solidity tools?
00:14:38.284 - 00:14:54.264, Speaker A: In tools for solidity we are using wake internally. But yeah, you can compile foundry projects as well. Of course, hardhat projects, you can compile it with wake as well. Was it that question?
00:14:58.964 - 00:15:00.444, Speaker C: I'm a little bit confused.
00:15:01.224 - 00:15:03.264, Speaker B: You can repeat, we have time.
00:15:03.344 - 00:15:18.244, Speaker C: Ok, so from what I've understood, the wake are using foundry from get go. Do you use any other tools like that?
00:15:22.064 - 00:15:27.204, Speaker A: I don't get the question. Just catch me a little bit and we can talk about it.
00:15:29.304 - 00:15:36.284, Speaker B: Are there any other questions? Okay. Now then, please give another big round of applause to Stefan.
00:15:36.864 - 00:15:37.344, Speaker A: Thank you.
