00:00:09.200 - 00:00:28.674, Speaker A: Hi guys. After a bit of artistic unwind that we had during the previous call, we are getting back to the technology and let's greet and meet Elias Tazartes, who is going to answer a very important and interesting question. Can rollups lead the innovation in the Ethereum ecosystem? Welcome.
00:00:31.454 - 00:01:35.874, Speaker B: Hey guys, can you hear me? Well, all good. Nice. So we're going to talk about the governance in the ethereum ecosystem, and precisely also, how can roll ups lead this movement as opposed to the approach that today is on Ethernet, one where you have a more top down approach, or l one led approach. So Ethereum has this interesting property of being, or aiming to be the world computer. And when usually you can define layers in like two words, you probably can't with Ethereum, you have this funny tweet where the person was saying, ethereum is so complex, you probably cannot just summarize it or just do it in a few words. Ethereum aims to be the world computer, and as such, you probably want to upgrade it as you go, as you learn and finally ossify it. But this wall computer, it's going to undergo a lot of transformation until it can be stable and can be completely ossified.
00:01:35.874 - 00:02:16.318, Speaker B: So today we're going to see what is the governance flow of the therm ecosystem, the limits of this current flow, the multiplication of the clients, and we're going to see that this challenges the status quo in governance. The main risk which is EVM, fragmentation and the way forward. Let's just start by defining together Ethereum. It's just the community run technology that powers the cryptocurrency ether and thousands of decentralized applications. The world computer. And what is governance? It's just the systems in place to allow decisions to be made. So usually, I don't know, you can think about executive team, board of directors, shareholders, project manager.
00:02:16.318 - 00:03:20.332, Speaker B: And Ethereum is a bit more complex body. So if it's community run, who governs? If no one owns Ethereum, how are decision made? I thought this tweet was funny because Peter is the tech lead of Geth and Dankrad is one of the lead researchers of Ethereum, and they were talking about how a decision is made or is deemed relevant. And Dankrad, quite sassy, was saying the decision is his, but it's not so far from the truth. So what is actually, who knows here how a decision is made on Ethereum? Like a protocol change. Okay, who has heard about the EIP word? Who has heard about the IP word? Okay, interesting. So direct Chang came up with this very simple model, it doesn't have to be so concrete, but it's just the idea that Ethereum is characterized by a set of values. They in turn get transformed into a clear vision of what you would ideally want etherm to be.
00:03:20.332 - 00:04:08.678, Speaker B: Then this is in turn created into a roadmap. And then this roadmap is implemented by clients. So if you wanted to list the etherm values, I mean, they're in the air, they're not always named, but you would get, oops, ok, I'm standing in front of the, I'll go there. You would get decentralization, transparency, openness, censorship, resistance, sustainability and so on. And so the vision is you would ideally want a secure permissionless chain where transactions are fast, they're cheap, they're secure, maybe private, and then user accounts, so identity or even credentials is quite easy to manage. So social recovery, safeguard, all of this is also present in the spirit of Ethereum. So the values, we get the vision and then we get the roadmap, which is a bit more chunky.
00:04:08.678 - 00:05:15.612, Speaker B: So this is this idea that, okay, if we want ten k TPS subsent, how do we do it? And it's so it looks like Ethereum did the approach of going for rollups instead of full sharding for now and then some heavy emphasis on ZK. So this roadmap is basically, you would want roll ups, you would want decentralization, so low requirements for your hardware and then lots of ZK, ZK everywhere, aggregation, privacy, all of it. So we got values, you have a vision, now, you have a technical roadmap. So how do you actually enforce it in the real life if you are a country? How do you actually pass the laws and who is enforcing it? And this is down to the execution clients team. So you have to think a very concrete example of this is there is a hard fork every now and then. So every six months or one year in Ethereum, this is how they call their ability to upgrade the protocol and they have things that they want to put in it. So next hard fork is going to be Pektra, Prague and Electra.
00:05:15.612 - 00:05:53.680, Speaker B: And they think to themselves, okay guys, we need one way to improve Ux on Ethereum for eoas. So for user accounts. So they have this idea in mind, and then from there they're going to choose an EIP. So Ethereum improvement proposal and stick it in there. So you have to think of slots like every now and then there's a timing, there is a good timing, a tempo for a good improvement, and then the improvement is actually a specification that you write. So this year they wanted to improve Ux because they think that the current UX of eoas, so user account, so metamask is not so good. So there is this need to insert an EIP.
00:05:53.680 - 00:06:27.868, Speaker B: So how do you do an Eip? You have an idea, so you think, okay, transactions should be cheaper. You transform this idea into concrete code or ideas for the specification. This is called the EIP. Then you need to champion it, so you need to push it. And then the core devs of the Ethereum. So Geth, Nethermine, Bezu, Aragon, Ref, Ethermjs, they have a voice and they're gonna debate in a discord call. It's quite so formal as voting for president, but they would gather in a call or a zoom and they will say, okay guys, I think this EIP really nails the goal of changing this.
00:06:27.868 - 00:06:53.704, Speaker B: So current example is the EIP 7702. This achieves better ux. We don't have to go into precise deal, but this is how it works. So you have the vision, the values, the vision, the roadmap, and then some precise law, or like EAP will fit into this roadmap and enforce what the roadmap is about. So Ethereum wins. This is a flawless process. This is very well constructed.
00:06:53.704 - 00:07:31.698, Speaker B: And what is the problem? First problem is you're making changes that take time and need governance. Like you need everyone to buy in, but you don't know if this will last. So one example is that there was an EIP to add a compression function on Ethereum, and actually no one used it ever. So you would get, this has been used a thousand times since it was inserted like almost eight years ago, and there's like millions and millions of transactions. So this is really like a loss of resources, loss of time. And it's so weird. Like, I don't know, it's, it feels, it feels a bit.
00:07:31.698 - 00:08:18.260, Speaker B: It feels a bit like you would probably want to try something out before putting it, enshrining it in your protocol. So in my mind, I would like, even for countries, it's weird that we can pass laws without ever trying them. I read that some countries want to try to have laws be passed in specific cities. They try them for two years, and if it works, they put it for the whole country. I mean, this feels like we're dealing with common sense or first principles, but it's really not easy, because when it comes to governance and code and the Ethereum protocol, everything is a bit more complicated. The other way that this process is not perfect is EIP 3074. We don't have to go into very strong details, but you have to imagine that this EIP was imagined four years ago and it was scheduled for inclusion a month from now.
00:08:18.260 - 00:09:02.526, Speaker B: So it took some time to mature in people's mind. They submitted it and it got scheduled for inclusion four years after. So what is the chance of it not being relevant anymore? Well, quite high, because it got scheduled for inclusion by the Corey dev team, but the teams that are working not on the protocol, but are working on product. So you have to think smart wallet teams, they said, wait, guys, this EIP is really against our vision for the Ethereum account abstraction experience. So when you hear the word account abstraction on Ethereum, you have to think the difference between metamask, which is eoa, and account abstraction. You have to think more about a wallet on your phone, you sign with your face id. You never have to interact with twelve word ctrace.
00:09:02.526 - 00:09:42.992, Speaker B: This is more like web two experience, like social graphics privacy, like all those things baked in, or at least a place for it. And so after this EIP got voted in, so it was supposed to get coded and get included in the testnet, it was actually superseded by 7702. So at the same time as the core devs voted yes for this, the community pushed back and they had to go back on it. So it's, it's a bit weird. Ideally you would want the pushback to come before. First of all. Second of all, you would need to have good numbers on why the pushback is justified or why the law is justified.
00:09:42.992 - 00:10:41.356, Speaker B: Everyone is thinking out of suppositions, or just they're comparing very abstract eips and they're comparing the ups and down ex posts. So they're thinking six months in advance, one year in advance, what will this do? And because ethereum adopted the roll up centric roadmap, now you have a bunch of roll ups which are faster, to adapt, faster, also to be able to change stuff. And they represent a good field for people to try out new ideas. And this feels a bit like this idea of having cities that can try new laws before the whole country adopts them. So this is why some of the people in rollups came up with this idea. It's not etherm improvement proposal anymore, it's roll up improvement proposal. And it's more like a bottom up approach.
00:10:41.356 - 00:11:15.436, Speaker B: So the good example is the clave team. They're working on account abstraction, and they wanted to add to ethereum the ability to verify a face id signature, or like secure enclave so to make it cheaper and more available to anyone. So yeah, I proposed the EIP 7212. It's hard to say all the eIps, if you go to a zoom call from all core devs, you will hear them use all of the numbers all the time. They're like, oh yeah, this is 5678. No, no, it's 777 one. And it's really, you cannot understand anything.
00:11:15.436 - 00:12:21.984, Speaker B: It feels like everyone is reciting Wifi codes, but it's actually low proposals, so they made this into an rip. And while this has not been adopted on Mainnet, so you will not be able to verify easily face id signatures on Mainnet l one, you can actually verify Face id signatures on more than four roll ups. So I don't want to make mistakes, but I think Polygon has it, probably ZK sync, Kakarot Bay. It's on base Sepolia and I will need to check for linear, but the main idea is that a roll up is inherently more flexible than the mainnet. And this can be good. And then you can probably imagine that the merge or down sharding, which was a main change for the Ethereum protocol, they are not so adapted for rollups because they're hefty and they're way to rethink the infrastructure of Ethereum. But for smaller things like pre compiles, ercs, transactions, type aa infrastructure, it makes sense that you try them out on roll ups before trying to implement them on Mainnet.
00:12:21.984 - 00:13:18.090, Speaker B: So can devs do something? I mean, this feels like from the beginning of this talk we're dealing with common sense, or at least first principles. And people in theorem are very, very practical and smart, and they often go for like path of, if not least resistance, the path that makes sense. So they try to do things that make sense. And so if it's so simple, why is no one doing it? Why is no roll up pushing for like very brave or at least spearheading innovation? There's actually one unknown limitation, which is that. So who here knows a bit about the client's team? You have to think of the clients team. They are kind of the guardian or they safekeep the software. So when you think about Ethereum, you have to think that there is software behind and there are teams that implement it.
00:13:18.090 - 00:13:45.740, Speaker B: It so happens that Ethereum has many clients developed. So there's Geth Bezu. So Geth is a team that is supported by EF. Bezu is pretty much for those who are dev. It's just you write the Ethereum protocol in Golang then you write it in Java, then you write it in rust, and then you have many clients. And then those team, they are also part of the governance decision. It just so happens that the Geth team is dominant in terms of mind share or market share or tvl.
00:13:45.740 - 00:14:43.056, Speaker B: And so if you look at it, so if you know the roll ups name. So arbitrum, optimism, scroll, those roll ups are based on forks of geth. What does that mean in practice? It means that in practice, if they want to innovate on the protocol level, they have to write code on the Geth client that will just implement their idea. So, I don't know, they want to increase, they want to add a new type of signer, they have to write the code on get. And in practice, what this means is that they need to either make their own implementation farther away from the Geth implementation, so they're going in uncharted territories, or it means that they have to ask the geth dev to do it for them. The getdev, not only do they have limited bandwidth, they're also very conservative, which makes sense. And the devs that forked get.
00:14:43.056 - 00:15:06.520, Speaker B: So imagine the arbitram team, they want to implement something new. They're going to be extremely careful because they have hundreds of billions on their chain, or maybe dozens. Don't remember the tv. But it wouldn't shock me if it's 100 billion. And any change is extremely risky. It's not like they have client diversity or they don't have the leeway. So roll ups team don't want to fork away from geth.
00:15:06.520 - 00:15:46.498, Speaker B: Geth doesn't want to implement the innovation, no innovation. And this is changing, actually, now that you have more rollups, clients, so more roll ups stack, you can innovate once more. You don't have to rely on someone else to say whether or not you can innovate. So three examples of this is EF. So Ethereum foundation, sorry, there's a lot of acronyms. Ethereum foundation created their own specification, so they wrote Ethereum in a very simple python repo that is open source. So if you want to say, okay, from now on, I don't know, Ethereum, I'm going to change this protocol thing.
00:15:46.498 - 00:16:33.694, Speaker B: What? I'm going to make gas ten times cheaper. Why not? You're a roll up and you want users to have subsidy, so you make some operations cheaper, you go there, you fork the repo, you try it out, you can experiment very easily, and it's quite easy. It's in python, it's very fast. In one day you can implement an EAP play around with it, ask some people to have a look at it, so it's becoming very much accessible. Rest is an implementation of ethereum protocol in rust, and they released many things that make it very easy for people to experiment as well. So Alphanet is a rest based oru optimistic roll up framework, and they can extend the EVM very easily as well. So you have to think that if you like to tinker around, this reduces the friction and the hardship by one or two orders of magnitude.
00:16:33.694 - 00:17:10.374, Speaker B: And Kakaot is a good example. It's my shilling moment. It's a ZK EVM in Cairo, but because Cairo is so high level, Cairo is a ZK DSL. This allows the kakaot to be a ZKE EVM, as opposed to the two above clients, which are just evms. This also means that because there are new client implementation, you can play around, and you're not limited to just one implementation. So new actors are less dependent on get. So if you're on arbitrom and you want to create a new transaction type, you can play around with new implementations.
00:17:10.374 - 00:18:03.592, Speaker B: But the main risk, and I think this is what I still don't have an answer about, is EVM is strong because of the moat of the network effect. Everyone knows Ethereum, and if you develop on solidity, the strength is that everyone knows what you're doing, and you can choose a chain kind of like a commodity, or not even a commodity, you have a trade off. So if you're fine with a somewhat reduced, reduced security, but very fast transaction and maybe low price, high liquidity, strong community, you might go on base. If you want strong security, you stay on l one. There's so many trade offs, and this is what makes EVM like the leader of the mind share of the current market. Because the base layer is not opinionated and all of the tools are reusable. So let's take a real example after Rip 7212.
00:18:03.592 - 00:18:31.574, Speaker B: So you're a dev and you want in your dapp and you want to be able to use face id. This is quite normal. Maybe you want to have a checkout in your ticketing service. So you write your solidity contract, and you put in the solidity contract now called the Face ID verifier. You don't know which chain supports it or not, and you cannot know at the time of deployment. So maybe you choose a chain that supports it. But this is like the first step in EVM fragmentation.
00:18:31.574 - 00:19:09.374, Speaker B: This might continue. So my main worry and the thing I most certainly don't have an answer about is how to limit as much as possible EVM fragmentation and how EVM fragmentation really goes against the client diversity ethos of etherm and also the moat. My main concern is more about the moat. So EVM ecosystem moat, this idea that everyone knows the same language, everyone can deploy on any chain, there is no vendor locking, there is global governance. This goes down as fragmentation increases. And so I genuinely don't have a solution. Governance is really hard.
00:19:09.374 - 00:19:41.766, Speaker B: I've started to join roll calls and all car devs calls. So the governance bodies of Ethereum, and it's almost a full time job to follow what is happening. It's a second full time job to understand what is being discussed. So every single area is a rabbit hole that could take a whole life. So there is a rabbit hole about how to design good mempools, how to safeguard decentralization. This would take probably one year of the engineer to even get up to speed on how to understand these things. And this is one example out of 100.
00:19:41.766 - 00:20:07.014, Speaker B: Then there is new way to store data. So if you were at the fireside chat with Vitalik, he mentioned Hexari, Patricia Merkel trees. And then everyone's like, yeah, sure, okay. On the top of his mind made calculation on the maximum size of the proof size of proving that you are included in the slot of this tree. But this is not accessible to most people. The Vaerkel three discussion. This has already taken two years, it will take two more.
00:20:07.014 - 00:21:08.020, Speaker B: And you expect rollups team who have limited bandwidth to jump in and express their opinion is quite hard. So even though in first principle you would want the governance of etherm to start in rollups, because this, they are essentially the closest to the user and they are also the closest to the devs that are building dapps as opposed to building protocol, this is quite hard. So my view, and it's quite utopian, is that most improvements should start on roll ups. Actually, I hope that this works out for two reasons. One is Ethereum needs to ossify, and because it needs to ossify, I think it's fine to let rollups innovate and whatever innovation survives gets adopted on l one, this also feels good. Also rollups have, they have small community and they have good feedback loops. So I think this also approaches.
00:21:08.020 - 00:21:39.194, Speaker B: And one thing maybe doesn't apply so much, but there's a vertical tree upgrade. And maybe I'm wrong, but I heard Matt from the old core dev that said that this will take 18 months of l one core devs kind of, this is a major upgrade. So kind of the merge. And I think that if l one devs are busy, they will have stuff to do. So it will leave us the roll ups, kind of the reins to innovate. So it's not so bad. It's like we have a saying in French, I don't know if it translates.
00:21:39.194 - 00:22:27.914, Speaker B: While the cat is not here, the mice dance. So this is what I think. And then my second belief is that EVM fragmentation must be limited. So I actually talked to yoav today and I don't know. So there are some challenges. So if you have rips, it means that roll ups innovate. Then you have this question, what is a roll up? And can you actually form a cohesive body of roll ups that form like a union? Like, are you thinking European Union, Confederated States? Like, what is this? So if rip got adopted, how do you force base sepolia to base base to adopt it? Do you like, how can you do it in l one? It's more simple because there is the spec and you have to go through the core devs and they are kind of the last gatekeepers of what gets into Ethereum.
00:22:27.914 - 00:23:11.594, Speaker B: Interestingly, I don't know if you guys realize, but ethereum is different from other places or daos or. I don't know. But it's not because you hold the EtH that you can have one vote in what happens on ETh. It's quite not if you hold one Eth, you hold one ETH and you trust that the core devs who build the client have good philosophical views on the world, they have good talent of devs, they have good way to create an Eap, and they have good ways to communicate why the IAP should be merged. We have to think that because you are Ethereum holder, you believe in the values of Ethereum, because you believe in the values, you can see that the people who push the vision are good. You can look at the roadmap and participate. So it's not gatekeeped.
00:23:11.594 - 00:23:50.774, Speaker B: You can enter and participate to any call whenever, but at the end of the day is the devs that vote. So this is, it might look like a democracy, and I don't mind that it's not, but it's not. And so rips face the same problem. Is this a democracy? Probably not. Rip as it stands is Kakarot can go and say, okay, I have a new idea. I have a new transaction type where I can batch many transactions. I will create Rip and I will adopt it on my chain unilaterally.
00:23:50.774 - 00:24:26.794, Speaker B: Everyone agrees, everyone says no, I say I don't care. It still happens. No one can force you not to adopt an rip or adopt it. There are two safeguards for rips. One is that you would get buy in from l one that from the time you push lip, the l one should not do its own governance piece. So eip that clashes with it because this would be pretty bad. So you have to think rip has at least a guarantee that l one mainnet, so ethereum will not go against it.
00:24:26.794 - 00:25:31.758, Speaker B: Second guarantee is if the rip has buy in from other chains. You also know that if they won't adopt the same goal with different means. So you have to think of, I don't know, native account abstraction on Zksync and Stacknet does not respect any standard way of doing it. And 4337, which is the ethereum account of session, respects a certain standard. So the second buy in from rips, from rollups is that you should respect a standard, and if you agree with some certain governance decision at the roll up level, you should fall in line with that specific implementation, or not implementation, but at least the spirit of it, APIs and so on. I think in a few years, this is my conclusion is that roll ups will be ZK and you will because of the proverb system and also standardization of maybe processes, I don't know. But I see it as everything is narrow because every governance is on l one.
00:25:31.758 - 00:25:59.514, Speaker B: Now governance design space is huge because it's all on the roll ups, and it's going to narrow down later on in a few years when the ZK like infrastructure of roll ups and mainnet converges to what is called like, I don't know, this type of, type one ZKVm, or even just ZKVMs in general. So prove everything, Zksnark, everything. I think this is very present in the ISTM ecosystem. That's it. Thanks a lot.
00:26:03.334 - 00:26:09.394, Speaker A: Thank you, Alice. We still have a couple of minutes for quick question, if any.
00:26:15.134 - 00:26:24.754, Speaker C: So maybe I missed this because maybe I think I'd come in after you had started. But what's the current stage of Kakarot and the company and your protocol?
00:26:25.294 - 00:27:27.672, Speaker B: So Kakarot, for those who don't know, it's a ZKVM based on the startnet stack and it's on testnet. But for example, when the EIP 3074, the one I talked about in the beginning, was adopted on l one, so scheduled for adoption, we actually implemented it instantly on the testnet. And I think that was a good example of one, a very cool thing where rollups can actually kind of frontrun l one for things that are scheduled for inclusion, which is very nice because you can try some updates really fast. But it's also the first example of a fumble. We fumbled because we adopted the EIP the first week it was scheduled for inclusion and then it got cancelled. So this is one example of what you don't want to do when you're a roll up or you have to be careful about is this very defined line you're working on when it comes to governance. You want to be reasonably sure that what you're doing will either end up on l one or will not be clashed by l one.
00:27:27.672 - 00:27:57.416, Speaker B: And you also want all the roll ups to follow you. So this is this kind of tension you have to play. Maybe there is incentives, maybe there is not. Maybe there is this FOMO idea. If one roll up adopts the new killer feature, everyone will follow. So there is these tensions that you have to play around. And one thing I will say is we need the processes probably in etherml one governance to become more, if not transparent, more smooth or at least have more input.
00:27:57.416 - 00:28:06.844, Speaker B: And also for roll ups, we need this push for streamline and so on. Thank you.
00:28:10.144 - 00:28:27.984, Speaker D: Yeah, I just want to quickly ask, based on your experience and acute knowledge with different roll ups and governance, what do you currently find to be the best method of incentivizing and rewarding developers and activity for different chains?
00:28:29.084 - 00:29:08.204, Speaker B: So for a chain to incentivize devs, so devs that build smart contracts, it's a very hard question. I genuinely don't know. I found that for me my favorite thing is entrepreneurship programs. So like entrepreneurship studios buy roll ups. I think this is when you roll up, I will say this, you want to maximize the number of teams that build on you, so entrepreneurs that build businesses and from there you can have it because you have mindshare. So many devs participate in Agathon. Maybe your token is expensive, maybe that degen spending on your chain, but at the end of the day you want people to come and build.
00:29:08.204 - 00:29:20.554, Speaker B: So for this, probably a mixture of a smart grants program, but you don't need to write checks like so many of them. Retrofunding entrepreneurship program and good airdrops.
00:29:21.294 - 00:29:23.702, Speaker A: Thank you. Thank you, Alice. Thank you very much.
00:29:23.798 - 00:29:24.094, Speaker B: Thank you.
