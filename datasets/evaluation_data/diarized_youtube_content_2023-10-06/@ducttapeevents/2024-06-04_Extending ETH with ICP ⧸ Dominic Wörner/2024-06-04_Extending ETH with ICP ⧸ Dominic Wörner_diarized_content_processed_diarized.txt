00:00:09.280 - 00:00:30.312, Speaker A: Good afternoon, Prague, everyone. Welcome to the live stage. We're gonna have amazing session starting soon. We have a great liquidity out there. So the perfect place to be in the workshop and learn something more. Our next stage gonna be extending ethereum with ICP, given by Dominic from Dfinity foundation. So you're gonna have a lot of learnings.
00:00:30.312 - 00:00:33.464, Speaker A: So please gear up and welcome our speakers to the stage.
00:00:37.684 - 00:01:38.504, Speaker B: Thank you. Great to be here. So, let me ask first, so who of you does know about the Internet computer, about ICP? Who of you has already built something on ICP? At least a couple. And who of you wants to implement something this weekend and join our bounty? Like the ICP bounty? Anyone? I hope I can convince some more of you on that. So, okay, I want to give you a bit of an introduction to ICP today and give you a couple of examples on how you can leverage the Internet computer as an Ethereum or EVM developer. And we will give a couple of examples, each one a bit more interesting than the last. But before that.
00:01:38.504 - 00:02:20.886, Speaker B: Yeah, so if you want to participate interactively in anything with that, I think it's handy to. To get those slides that I will show. And this is the QR code where you have the slides, and there are links and other QR codes in there, so it makes sense to get that. So I'm part of dfinity. Dfinity is the foundation behind the Internet computer protocol. Dfinity has been around for quite some time. So initially founded in 2016, and the Internet computer is live since three years.
00:02:20.886 - 00:02:44.864, Speaker B: So it started in 2021. And we just had last week, the three year anniversary party of DMaynet. We're mostly based in Zurich, but we have also team members around the world. And it's mostly an R and D organization. So we have lots of smart people. They are from cryptography, distributed systems, and all of that. And we also have me.
00:02:44.864 - 00:03:55.432, Speaker B: So I'm a solutions architect at Dfinity, which basically means I am working a lot with all the ecosystem teams that are building on the Internet computer, and, yeah, help them be successful. So if you start building on the Internet computer, you will get in contact with me or one of my team members. So let's, yeah, set the context a bit. So, back in the days when bitcoin was created, so this was like the first app chain there was, and people from the beginning on thought that, okay, building a new currency or digital gold is cool, but actually we want to build a lot more things. We want to build a lot of more decentralized censorship, resistance systems. And initially people forked bitcoin and built stuff like Namecoin and others. So all different chains, and it was very cumbersome.
00:03:55.432 - 00:04:57.166, Speaker B: Then Vitalik came around and had the idea of building this decentralized computer where you don't need to build new chains, but you can just build new systems as applications, as smart contracts. And Ethereum has been pretty successful with that. And I would say that Ethereum, and we see it here as well, is the most important smart contract platform there is. However, it has a lot of limitations. So when you program Ethereum or the EVM, you notice you have limited memory and limited computational capacity. There are high fees when a lot of people want to interact with the system, and so on and so on and so forth. And the Internet computer started a project at the same time.
00:04:57.166 - 00:06:17.586, Speaker B: Then Ethereum version two was thought of. And here also the idea was to build this decentralized world computer with a set of different trade offs than Ethereum. But it shows how you can extend the reach of smart contracts and extend the reach of Ethereum. And ICP runs what we call canister smart contracts. These are essentially WASM code and state, and they are inspired by the actor model, which means they communicate with each other by message passing. And because we use WASM, you're not confined to a single programming language, but you can use multiple higher level programming languages like JavaScript, Rust, Python, and so on and so forth. We also have what's called the reverse gas model, which means that smart contracts have a gas balance, which can be fueled by the developers or later from the business model of the application.
00:06:17.586 - 00:07:17.800, Speaker B: But it means that users, when they interact with the smart contracts, don't need to pay gas, in many cases don't even need to have a wallet. They can also process HTTP requests, which means you can build APIs inside a canister, and you can also host frontends that regular browsers can interact with your application. On the other side. They can also call other web services by HTTP requests, and we will see that later on in the example. What's also often a problem is that typically on a smart contract platform, those contracts, they need to be poked from the outside, so you need to send a transaction to it. And often you have to have some centralized infrastructure or incentivize your users to do it. On ICP, you have timers.
00:07:17.800 - 00:08:41.447, Speaker B: So basically you can create cron jobs to execute things. And you have access to threshold cryptography, which allows smart contracts in ICP to sign transactions on other chains like bitcoin and ethereum. And we'll see that later on. So a bit of background about the architecture of the Internet computer. So as in all chains there are nodes, but what's different from most of the chains is that on the Internet computer nodes have to be like a certain hardware spec and they are distributed around the world by independent node providers and live in, in data centers. So it's not run your node at home type of system, but it's like really powerful machines that are in professional data centers with high uptime, high availability and high throughput. You can't run an ICP node inside a virtual machine, so there is no cloud computing there.
00:08:41.447 - 00:09:38.634, Speaker B: In that sense it always has to be this physical bear machines around the world and these nodes are assigned, we'll see that later into different subnets. Each subnet is essentially its own blockchain. So it's a sharded system by default and can scale by that. And because we have this message passing model, it doesn't really matter much if the smart contract you want to call or smart contract wants to call is on the same subnet or another subnet. It's like from the developer experience, it's completely transparent and seamless. Also latency increases. So with that, the Internet computer is this uniform scalable virtual computer.
00:09:38.634 - 00:10:25.930, Speaker B: And we can say that ICP is like a crypto cloud. So it has all those security and resilience features that the normal blockchain has, but it also has this feature of horizontal scalability. You can add more subnets, more computers as you need to scale. So it has this cloud like feature and a canister is. Yeah, is essentially like a decentralized server. And so we said that these nodes are assigned to a subnet. So it sounds like a permissioned system, but it's not really permissioned because this is controlled by a DAO.
00:10:25.930 - 00:11:34.470, Speaker B: So essentially everything on the Internet computer is controlled by this on chain governance system we call the network nervous system. And in this system ICP token holders can stake their ICP into what we call a neuron. And then depending on how long you stake and for how long you have staked and how much you stake, you have a certain voting power in the system. And yeah, if a proposal is accepted then this is executed autonomously. And this goes so far that even like upgrades of the node, of the ICP core software itself is done by these proposals and then rolled out autonomously to all the nodes over the world. And yet this enables very rapid evolution of the network. I brought a quick comparison between the Internet computer and Ethereum, but I don't think we need to go in detail about that.
00:11:34.470 - 00:12:37.098, Speaker B: So now I want to talk a bit about how you can utilize the Internet computer. As an Ethereum developer. The easiest thing to do is actually to host the front end of your Ethereum application on this decentralized server. And this is really simple and you can try it out on your own. I'll have it here, make it a bit bigger. So this is actually just the uniswap front end, which is open source. And the only thing that you need to do to deploy it on the Internet computer, you need this DFX SDK basically, so an SDK to download and then you need to create a configuration file.
00:12:37.098 - 00:13:36.304, Speaker B: We called it DfX JSON. So let's quickly create it here. And then we need to like essentially just tell it where to find the build files of your front end. So where are the static assets that are the output of the build process and we can copy it here. And then we need to build as normal. And I need to see how that actually works. And I think it probably takes too long to show it, but we can go back later, I think I didn't install actually.
00:13:36.304 - 00:14:41.118, Speaker B: Yeah, so this will run in the background, we might revisit later. But the idea is really you can deploy arbitrary frontends with just a few lines of code. The other part that is obviously much more interesting is what you typically do in a backend to decentralize that on the Internet computer. And as I said, canisters really expand what you can do on chain. So a single canister smart contract has more than 400 gigabyte of memory and you can do pretty heavy computations on it. So here is an example from our founder who runs some image recognition on chain. And what's also pretty nice is because of the reverse guest model, and we have a community member build this sign in with Ethereum library or system for the Internet computer.
00:14:41.118 - 00:15:47.898, Speaker B: You can really have from a user experience, the user doesn't even notice that he's interacting with the Internet computer. It's just like using if he wants to metamask or another Ethereum wallet. But you can store logic, you can store your database in a decentralized environment on the Internet computer. So when we take that together, you can build like besides your smart contracts on Ethereum, you can have your front end on chain, you can have some backend logic like this at the moment, disconnected backend logic on chain. And so this is what we mean. We can build open Internet services like really decentralized applications full stack that are running on a decentralized Internet environment and can be controlled by a DAO for upgrades. So like I told you about the Internet computer, how it's controlled by this DAO.
00:15:47.898 - 00:17:16.104, Speaker B: The same framework can be used for individual applications on ICP, so that each upgrade of the backend of the front end has to go through a voting through proposal and voting process of a DAO. So now the really interesting things are starting. So because the Internet computer has what we call chain fusion technology, so this ability to call other chains and to sign transactions and other chains, you can integrate quite deeply with the system. So canisters can read from Ethereum state. And the idea behind that is that you use this HTTP outcall feature, so you can call multiple RPC endpoints from Ethereum, and basically only if a certain quorum of them give you the same result, you you accept it. So you can be really really sure about the result of a call to another chain. The other part is signing transactions.
00:17:16.104 - 00:18:49.272, Speaker B: So we have this threshold cryptography on the Internet computer that currently supports, besides BLS, also ECDSA. ECDSA is widely used in the blockchain ecosystem, and you can think of it like that in a certain subnet or certain subnets of the Internet computer. You have the private key, like a master private key shared or sharded between the nodes. So this private key never exists physically anywhere, but it always is created and redistributed in form of these shards. So no node will ever know this private key, but they can come together in a multi party computations to do signatures. And with that system, each smart contract on the Internet computer has basically access to an unlimited amount of public keys, and can request signatures regarding to those public keys. So to make it easier for developers to integrate with Ethereum and other EVM chains from the Internet computer, we've recently built and launched the EVM RPC canister, which has a couple of nice capabilities.
00:18:49.272 - 00:20:00.136, Speaker B: So for example, you typically need to handle API keys when you talk to RPC providers. And if all the nodes of a subnet on the Internet computer do an RPC call, basically at the same time you quickly reach those numbers that you aren't in the free mode anymore. So we basically have this EVM RPC canister there where at the moment we take care of these API keys. But you can, obviously every project can run its own EVM RPC canister and add their own API keys. You can even add your own API keys to the one that is deployed to the Internet computer. And in the long term, we plan to have like a native integration with Ethereum, where in a given subnet of the Internet computer, there will be Ethereum nodes run side by side and you have this direct access. This is what we've already done for bitcoin.
00:20:00.136 - 00:21:33.844, Speaker B: So there exists a subnet on the Internet computer where each node has, yeah, not a complete bitcoin node running side by side, but talks to the peer to peer layer of the bitcoin network. So it's really part of the bitcoin network and feeds in those blocks. And we have a lite client running on chain, so that each smart contract on the Internet computer has access to the current UTxo set, so to the state of bitcoin and can accept bitcoin payments and can send out bitcoin. So with this two features like this getting state from Ethereum or other EVM chains and writing back, we can build a simple system that is very extensible, and therefore we thought would be ideal for such a hackathon. And this is the idea of building a co processor on the Internet computer for EVM smart contracts. So the idea of a coprocessor is in your main processor, you can't handle everything, right. And we know when you, when you write an Ethereum smart contract, you're very con, in a very constrained environment.
00:21:33.844 - 00:23:31.012, Speaker B: And the idea is now to use a canister or the Internet computer as a whole to offload some of these needs that an Ethereum smart contract has to the Internet computer. So we have this canister on the Internet computer that listens regularly for events, often Ethereum smart contract, and then in those events might encode it, what type of jobs you want to run, and then you can run those jobs. And this can mean like access to large memory, as I told you, it can be long running computations, like doing some AI stuff, I don't know, it can be like an oracle that you call out to web services or to another chain, or just simple stuff like getting unbiaseable randomness from ICP. And so this is the project I want to show you a bit more. So if you'd still like to participate in the bounties we have here at the hackathon, this is the starting project we would advise you to use. So what we in this startup project, let me make it a bit. So here we have a simple EVM contract, a simple solidity contract, which will be initialized with the address, Ethereum address, of this co processor canister on ICP.
00:23:31.012 - 00:24:53.530, Speaker B: So just that the solidity smart contract knows whom to trust basically. But the canister acts really as an EOA in the system. And then it just has a function, new job, which emits an event new job. And it sends the money it got to the address of the canister on Ethereum, so that the canister later, when it wants to send the result back to the EVM smart contract, it has enough ether to actually pay for the gas cost. And then it also has this callback function. So this will be the function the small smart contract on ICP, the canister will call to give back the result to the Ethereum smart contract. And when we look at the, like this DFX JSON that we looked at the front end example quickly, what we see here is we have two canisters here that we are deploying.
00:24:53.530 - 00:25:52.806, Speaker B: One is this chain fusion backend and the other one is this EVM RPC canister. So here we define this EVM RPC canister, how to deploy it locally. So we get the interface and we get the wasm code from the release page of the EVM RPC canister. And when we deploy it to Mainnet, there is already an EVM RPC canister that we can use so we don't need to deploy it. And that is why define this remote id. So under that address on the Internet computer, this EVM RPC canister lives. And when we look at the code of the RPC canister, of the chain fusion backend, then there is quite a lot of stuff in there.
00:25:52.806 - 00:27:09.370, Speaker B: But the idea is that you as a developer here, you don't need to care about all of that. The only thing you need to care about is this logic in the chops folder. And there we have an example, something very simple like calculating a Fibonacci sequence, or calculating a Fibonacci number. And this is something, when you do it on the EVM, I'm not sure exactly which number you can calculate, but I think even like for number 20 or so, it's not viable anymore on Ethereum. So if you want to get a higher Fibonacci number, you can calculate it on the Internet computer. And when this job is executed, then it basically a transaction is generated. This code is here, and this transaction will be signed with this threshold ECDSM, and then send via the EVM RPC canister to Ethereum.
00:27:09.370 - 00:28:46.336, Speaker B: And when I do deploy like run this deploy script, then what's happening in the background is we create a new local Ethereum net with envelope. We deploy this coprocessor solidity smart contract and we also run like a local instance of the Internet computer with DFX. We deploy the EVM RPC canister and our backend. And after that it briefly runs this script which basically calls this new job like sends a transaction three times to create new jobs on ICP. And this chain fusion backend on ICP, what it does is it has basically a timer that is running. So basically an interval every, what is it? Yeah, every like three minutes it fetches the locks of this smart contract. And if there is a new job it will calculate the Fibonacci number and send it back to Ethereum.
00:28:46.336 - 00:30:18.854, Speaker B: So we see it here hopefully. Yeah, we see that we got through so successfully, ran job two and let's quickly check. So the job was to calculate the 20th Fibonacci number. And when we look, where is the readme to quickly find out how we fetch the result from the, from the Ethereum chain maybe? Yeah, exactly. So here with this cars tool which is part of this foundry suite, I can get the result of the second job and it's 6765, so probably the 20th Fibonacci number. And to show you how easy you could extend this chain fusion starter. So I want to show you how you can use the Internet computer or this canister to fetch the current ICP price from different centralized or in this case from Coinbase and return it to the Ethereum smart contract.
00:30:18.854 - 00:31:45.350, Speaker B: So for this, let me quickly check. We go to the documentation page of the Internet computer and there in the smart contracts section we have advanced features and yeah, we see stuff I've already talked about these periodic tasks and timers. We have this threshold signatures and we have on chain randomness and we also have this HTTP out calls and there we have how to use get requests on the Internet computer. Let's scroll down and then I see some rust code which I will copy. So this essentially gets the ICP USD rate from, from the Coinbase API. And what's important is you need to define what's called a transform function. And it's quite easy to understand if you do this call from multiple nodes at the same time, you don't still don't necessarily, not all the nodes get the same result.
00:31:45.350 - 00:32:39.924, Speaker B: So there might be stuff in the header where you have timestamps or other unique information. And then if those nodes get different results, they can't get consensus on it and it won't be available to your smart contract. So that's why we have this transform function where you can basically define how you strip the headers or how you need to like, yeah, transform the request and result to get, every node gets the same result. And this is done here already. So we take that and create just a new job. We call it Oracle Rs. Add this here.
00:32:39.924 - 00:33:40.180, Speaker B: Exactly. Then we need to use that module here and import it. Oracle. It has, doesn't it? Let me check. Get ICP USD exchange this, whoops. Think I need to make this public that I can really call it. Okay, yeah, looks much better.
00:33:40.180 - 00:34:41.654, Speaker B: And then yeah, we can comment out this job and use this function, letresult. Yeah, okay. And we try again to deploy everything. So the cool thing of this deploy script is like it breaks down everything in the beginning and just starts fresh. So it will deploy the new contract or this contract again, but also the ICP canisters and most probably I forget, I forgot to change one thing. Yeah, this won't work anymore. Let me start again.
00:34:41.654 - 00:36:04.810, Speaker B: So this is just a useful thing to do. So the Internet computer has this interface description language. So something similar to the ABI in the Ethereum world we call that candid. And if you in a rust canister, if you do that, it will automatically create this interface description file and edit to the Waso module in a custom section. And then when you go to an explorer, like a block explorer of the Internet computer, you can directly interact with those canisters because they basically package the interface description language with the actual code. But it didn't work here because we defined this transform interface, this transform function as a public interface basically of this WaSM module. But in the main file we don't have the necessary types defined.
00:36:04.810 - 00:36:55.774, Speaker B: So yeah, it's because I just copy stuff around. Okay, so we also ran this chop and we can try to get the result. And now we got a different result, which is already quite good. Let's see if we see some explanation of it. So here's the explanation. So the first is the timestamp, and then we have from when did I do that? I don't think this is the current value actually. I think we called it at the very specific timestamp in the past.
00:36:55.774 - 00:38:04.344, Speaker B: So the timestamp is 1 May 2023, when the price was much lower than today. So yeah, we got these historical price information, not the current price, but we got from Coinbase, like in this slot, the low, high, open, close and the volume. So this worked quite well. All right, so on ICP in production we have a couple of systems that are built basically with the same primitives. So this chain fusion starter is just a startup project to build new use cases pretty fast. But there are also production level systems which function quite similar. So we have these twin tokens on ICP.
00:38:04.344 - 00:38:55.994, Speaker B: We call them for chain key tokens technology, CKE and CkerC 20 tokens. And they are basically wrapped representations on the Internet computer. But the interesting thing about this, that this bridging or wrapping process is entirely controlled by smart contracts. So there is no multisig or external custody provider involved. It's really based on the system I send ETH or an ERC 20 token to some smart contract on Ethereum. The minting canister on ICP regularly listens on these events. And if there is a deposit event, then it will mint the responding token on the Internet computer.
00:38:55.994 - 00:39:59.184, Speaker B: And at some point when you want to burn this CKE token on the Internet computer, then you, yeah, you send it to some address and then the CKE minting canister will move those funds on Ethereum to another address. And just last week we launched the first ERC 20 token in that way, which is USDC. So a stablecoin on the Internet computer. But I think that there are many, many more use cases that could be explored with this system. So you cannot only. So when you receive an event from one chain, you can then also have an action on another chain. So you can build either like cross chain liquidity pool type amm or even order books.
00:39:59.184 - 00:41:40.918, Speaker B: You can build on top of the hooks API of Uniswap V four. So do like some active rebalancing or even run an auction on the Internet computer. There is an example which a colleague of mine showed at just last week where you, where you basically mint an NFT on Ethereum from ICP and generate the assets like do asset generation on the Internet computer and also host the assets on the Internet computer. And then you could even have dynamic nfts where on some action on ethereum you can listen to those events and change the assets. What's also pretty interesting, I think is building something like a cross chain SAP here, or if this then that, where you can just plug and play those building blocks together. Or another use case case another colleague of mine explored is basically cross chain governance. So there is the idea, it's not about listening events there, but you can also check from the canister on ICP the balance of an ERC 20 token on one chain or on different chains at a specific block height.
00:41:40.918 - 00:42:41.184, Speaker B: So you know like the voting power of specific addresses. Then you can use the sign in with Ethereum. Example I showed on the Internet computer that you log in to the application proving that you own an address and thereby proving that you own these ERC 20 tokens, these governance tokens, then do the voting process on ICP and then execute the results based on these threshold ECDSA signatures. So you can build like a snapshot kind of system on chain on ICP with direct execution. And you can even execute on different chains because we use this threshold ECDSA where you have the same eua on all EVM compatible chains basically. Yeah. So with that, I already come to an end if you're interested.
00:42:41.184 - 00:42:59.624, Speaker B: Here are a lot of things on how to get started. And as I said, we have two bounties currently open. So if you're still looking for ideas what to build, I gave a few, but I'm also open to brainstorm more. Thank you.
00:43:03.284 - 00:43:22.024, Speaker A: Thank you for the amazing talk. So we gonna open to the floor of questions. We already have like one person raising hands. You're gonna have microphone there from staff member here, here, see? Yeah, 1 second, I think audio gonna be on.
00:43:24.024 - 00:43:44.924, Speaker C: Okay, perfect. Yeah. Thanks for the presentation. Really cool. I was just wondering in terms of like the costing of the economics of running the cycles, you run fivonacci recursively, which is quite expensive. So what sort, what sort of costing can you expect from ICP?
00:43:46.304 - 00:44:42.584, Speaker B: So I mean we like different functions have different costs of course. Like just computation is relatively cheap just because we have this model of deterministic decentralization. So there are not thousands of nodes running this computation, replicating this. But the NNSDAO basically creates distributed subnets of like twelve or 13 to like 40, 50 nodes. So typically you do that on an application subnet which has 13 nodes, so only 13 replication. And because we also use WASm, it's like near native performance. So like it's a bit hard to tell.
00:44:42.584 - 00:44:58.254, Speaker B: I haven't checked how much that cost. But you basically also pay for the instructions that you use. So you have a price for the instruction. But this will be like not a cent.
00:44:59.034 - 00:45:13.714, Speaker C: Just the fact that it's replicated 13 times that you just described, does that mean that it's 13 times the price of GCP or AWS? Or is the computing cycle cheaper, therefore comparable to the pricing?
00:45:15.454 - 00:46:07.998, Speaker B: So like we are like on a fact, it depends also on what product you get from GCP or AWS. The Internet computer is definitely more expensive. We think in the long run it can be become competitive because there are lots of other costs around that AWS and GCP and so on has, and they also have, they don't have like direct replication, like they don't run a consensus protocol, but they still have like backups and all those infrastructure. So at the moment it's like, I don't think it's like 13, like the cost 13 times what GCP. But it's like on this, on this order of magnitude. Yeah.
00:46:08.126 - 00:46:09.434, Speaker C: Okay, thank you.
00:46:10.494 - 00:46:16.754, Speaker A: Okay, I think we had one more question or. Yes, here in front.
00:46:22.654 - 00:47:14.844, Speaker B: Thank you. What is the current state of Bitfinity project at the moment? A very special question. So maybe a bit background on that. So Bitfinity is a project where they run an entire EVM inside such a canister. Smart contract with the idea of being fast and cheap, but also having access to bitcoin and bitcoin native assets through this bitcoin integration and chain key technology. They wanted to launch for quite some time. I think they've launched a new Testnet just recently and as far as I know they should launch this summer.
00:47:14.844 - 00:47:19.564, Speaker B: But I don't know the details there. It's an ecosystem project.
00:47:21.104 - 00:47:25.964, Speaker A: Any more questions? So yeah.
00:47:27.754 - 00:47:36.814, Speaker D: Just a short one. Cool presentation. Thank you. How many nodes or how many node operators are running the Internet computer?
00:47:38.354 - 00:48:49.590, Speaker B: So let's check on the dashboard. So where is that actually? Was it written somewhere? Ah, there. So yeah, there are 130 different node providers and there are currently like 459 nodes that are assigned to subnets and there are 37 subnets. So it means like we have those nodes and those nodes provide us, but they don't run the whole Internet computer. They are always assigned to a specific subnet. And at the moment, like, besides one subnet, they have is deterministic decentralization. So you want to have them as decentralized as possible.
00:48:49.590 - 00:49:33.484, Speaker B: So node providers, like no nodes by the same node provider in the same subnet. And you want to, from a jurisdiction and geolocation sense as distributed as possible. But there are also other subnets. So for example, we also have a swiss subnet where all the nodes are run by different entities within Switzerland because certain applications have this requirement. We also plan to have one for the EU and that there are also projects in India that need such a subnet where the data doesn't leave the jurisdiction basically.
00:49:34.024 - 00:49:40.774, Speaker D: And none of these nodes is running in a cloud, non aviation. It's all on prem, I guess then, or.
00:49:40.934 - 00:50:16.948, Speaker B: Yeah, it's all like in data centers. Okay. And you can check that here on the dashboard as well. So you can see exactly in which data center what nodes run. So this is also very special. So all those node providers, they are doxed. So they need to have basically something like KYc and they write like a node provider declaration that they act under certain expectations.
00:50:16.948 - 00:50:25.464, Speaker B: And this is like what will be given to the DAO to decide if this new node provider should be onboarded or not.
00:50:26.084 - 00:50:27.704, Speaker D: Okay, thank you very much.
00:50:28.924 - 00:50:35.374, Speaker A: Okay, I think we have time for one more questions. One more question if someone has. Yeah, here.
00:50:37.834 - 00:51:45.766, Speaker B: Okay, thank you for your presentation. I would like to ask if the vision of the ECP is like more to create some like integrational space or you are like trying to like build a new development layer where like everything can be integrated. I mean the big vision of the Internet computer project is to eventually run all software as smart contracts. But this does not mean that everything has to run on ICP. So we think for specific software, specific platforms are best suited. Currently we see that a lot of things are also Dapps are running on a lot of centralized stacks. So this is like the first target to try to get these even relatively simple applications that can't be well transported to a blockchain like Ethereum to run those things on the Internet computer.
00:51:45.766 - 00:52:23.794, Speaker B: So yeah, we try basically to extend what's possible to run in a display centralized way such that you don't need a credit card and you don't need like a legal entity to do it, that you can really build these open Internet services that are completely run by a DAO or owned by the user. So you can have basically your private computer in this decentralized cloud where you have true ownership. Okay, thank you for answering. I hope I answered it. Yeah, thank you.
00:52:24.934 - 00:52:38.714, Speaker A: It's very exciting to see that everyone is very interested in chain fusion. And father, one more question perhaps. Yeah, I saw your eye, you know, you were like having this caution eye. Okay, I will just quickly jump to give microphone.
00:52:39.894 - 00:52:54.774, Speaker E: Hey, I wanted to ask, what do you think is Internet computer missing the most? So what, what is ongoing features you are gonna add to this and what will make the biggest impact?
00:52:55.554 - 00:54:02.804, Speaker B: I mean like a couple of things. On a more like social layer I would say we definitely like need more developers that are experimenting with the applications, but also with the stack behind. But on this feature level, I'm pretty excited about two features like privacy features. So we have this threshold encryption where we have like a mock implementation of it and it will be implemented on ICP and the end of the year. So this means that, yeah, you can basically do key management for end to end encrypted data much easier. And you can also build things like time lock encryption so that you encrypt something such that a canister can only decrypt it in the future. This could be used, for example for something like mempool encryption for mev prevention.
00:54:02.804 - 00:54:38.124, Speaker B: And the other interesting feature which I hoped would have been there already for quite some time is like all those nodes in this node spec is AMD SDV SNP which is like a secure enclave where you can run an entire virtual machine in this secure enclave. And the goal is to run the whole Internet computer stack within this secure enclave. And then you have even better trust and privacy features that the Internet computer provides.
00:54:39.064 - 00:54:59.524, Speaker E: How about maybe some social impact? Do you have real cases, applications which are built on top of Internet computer which I don't know makes some boom which on hype and people know about? Or is it still mostly in developers experimenting with that, et cetera?
00:55:00.424 - 00:56:05.194, Speaker B: I mean real hype. I mean like in Lugano people can pay with CkBTC for example. So this is like the twin token of bitcoin on the Internet computer. There is also in this space we have a project called Bionic which allows you to basically mint ordinals first as reserved ordinals on the Internet computer and level them up and then at some point inscribe them as real ordinals on bitcoin with a threshold schnorr. And this is like in the bitcoin community. So they have quite a few users. And there is also another project in this similar space, Omnity, which has built a bridge for runes to the Internet computer based on chain key technology.
00:56:05.194 - 00:56:57.504, Speaker B: And of course there are quite a few different DeFi projects we have. Maybe the biggest project in ICP is Openchat, which is like messaging app. The nice thing about that is it's run as a DAO, but it also provides a lot of space for different communities and daos on the Internet computer itself, because it easily integrates all these features to discuss and vote on proposals in this chat interface. And you can send all those tokens around and do even swaps from within this chat interface. So it creates a cool space for many communities in the ecosystem.
00:56:59.044 - 00:57:19.384, Speaker A: Lovely. So during this hackathon we are looking forward to see more hackers building and utilizing powerful canister and all the on chain computing. Try it out. So please give big applause to our amazing speaker Dominic. So we will be back soon.
