00:00:00.240 - 00:00:22.678, Speaker A: Good morning, guys. Glad to see so many people in the crowd. We begin another day and it will be full of conversations about zero knowledge at the first half of the day. Small announcement. We have live stream right now happening. So if you have community friends who are not here with us in Prague, please encourage them to go to live. Dot it quote spraq.com
00:00:22.678 - 00:00:44.500, Speaker A: and they can watch. And if they. They get a token so they can connect their wallet and have a question asked and then participate in quadratic voting. It's a bit complicated thing to get the token. So if you need this token, please reach me and I will explain how to get it. So. And thank you for showing up so early.
00:00:44.500 - 00:01:03.560, Speaker A: We will now have a very cool conversation about the zero knowledge protocols for dummies, right, for people who really do not understand how it works. And give a round of applause to Daniel Lumi who is going to explain this topic to you.
00:01:03.632 - 00:01:48.606, Speaker B: Thank you. Hey, good morning, everyone. How are you doing? Awake it? I'm not. So, first of all, welcome to my speech on zero knowledge proofs 101. What is ZK? And why should you care a little bit about me? My name is Daniel Loomi. I'm a research and consultant specializing in ZK l two s, privacy and daos. Today we'll be talking about why should you care about ZK proofs? What is a ZK proof? How do they actually work in applications for ZK proofs? And so, why this talk? ZK is essentially a PhD level in mathematics.
00:01:48.606 - 00:02:41.304, Speaker B: It's like a PhD on a PhD, right? And for many years, it was a small, select group of us math nerds that really loved ZK, and no one really paid attention. And with the invent of ZK EvM, all of a sudden, everyone's talking about ZK, ZK this, Zk that, but no one really knows what it does. So this talk is actually aimed for not just dummies, but regular non mathematicians to understand ZK. So maybe you start. You go to one of my friends, one of the cryptographers, and you ask them, what is ZK? And they essentially start talking about polynomial commitments, or fry based recursion, right? Or maybe you get a little bit more into it, and you start doing some research online. You bump into Ariel's speech on Hassam's theorem. He tends to forget that most people don't have phds in mathematics or maybe just follow some shitty youtuber, and he says, you can make money on ZK.
00:02:41.304 - 00:03:01.588, Speaker B: Please don't sue me, bit boy. So why should you care about zks? It's a new field of math that's very exciting. Come on. But you might say, okay, I like math, but who studies it for fun? Or you might just say, fuck math. I don't want to learn that. Zks are very cool. Okay, stay.
00:03:01.588 - 00:03:21.548, Speaker B: Stay tuned. Hopefully I'll get you excited for them. And just to get you a little bit of context for this, Vitalik recently said on bank that he thinks ZK snarks are as big of a deal as blockchain. And I actually disagree with him. It's a new field of mathematics. I think it's much bigger than blockchain. Ooh.
00:03:21.548 - 00:04:11.746, Speaker B: I disagreed with Vitalik. What? Come at me, buff bro. So, algebra in the beginning, right? A couple thousand years ago, when we invented what's considered the modern form of algebra, there were some farmers that thought, great, I can farm carrots a bit more efficiently, or I can calculate the largest common denominator of a square to figure out what size the tile on a floor should be. But thousands of years later, algebra is literally everything we do, right? We couldn't have gone to space. We couldn't have manufacturing, we couldn't build buildings the way we do. We would not have definitely blockchain or Internet, right? And proofs actually have existed for a long time, right? You learned this in school. But previously, proofs to prove any single thing, you had to have this massive book of calculations.
00:04:11.746 - 00:05:03.426, Speaker B: Just proving that that conjecture is true. Around 2016 to 2018, we invented the first form of what's called non interactive generalized ZK proofs. Right? It's a new field of math. When were you last around when they invented a new field of math? Come on. That's very exciting, right? And so today, we're the farmer, and we think, great, we can make Ethereum a bit faster, or great, we can log into a website without showing a password. But thousands of years from now, they'll be talking about the moment that we first invented non interactive generalized ZK proofs. So what is actual ZK proof? And so, in today's world, for us to show that anyone did calculation or execution correctly, essentially, you need to prove.
00:05:03.426 - 00:05:53.936, Speaker B: You need to redo the execution to check that they did it correctly. So, in a grocery receipt, you need to list cucumber its price, ice lemon its price, and then eventually, you get to this total. Right? In the zero knowledge paradigm, you don't need to show any of your execution. You can just show the total, and people know for a fact that you calculated it correctly. So ZK is a new field of cryptographic proofs that essentially one party, the prover, can show to another party, the verifier that they did calculations or execution correctly without actually showing them how they did it. So how does EK proofs actually work? And here's some examples. The most common example is where's Waldo? This french game.
00:05:53.936 - 00:06:10.614, Speaker B: You tried to find Waldo in there. And let's say that you found Waldo. You have your friend there. He also wants to find Waldo. But you're not going to give him the answer. He has to suffer on his own. Right? So how do you actually show to him that you found Waldo? Try to find Waldo.
00:06:10.614 - 00:06:26.938, Speaker B: He's there. It took me a really long time to find Waldo. For this example, I sat there for like an hour. Oops, hold on. I think I went too far. Yeah. So how do you actually show to him that you found him? Right.
00:06:26.938 - 00:06:47.954, Speaker B: You can cut out the picture of Waldo and then you can send it to your friend the verifier and he can check you found Waldo. But I actually don't like this example. It's the classical one. It's kind of confusing. People don't seem to really get it right. So the more accurate example is Sudoku. And this is very accurate because that's actually what punkish systems do.
00:06:47.954 - 00:07:07.314, Speaker B: Underneath, essentially, Sudoku, it's not quite the same, but essentially it's the same construct. So again, you have your friend and you, you're both trying to complete this Sudoku puzzle. You solved it. You want to show to him that you solved it. But fuck that guy. He has to do it on his own. Right? So how do you show it to him? Essentially, you cut each row and column.
00:07:07.314 - 00:07:41.516, Speaker B: You put those in a list. Maybe you shuffle those numbers around a bit, you flip them upside down. And then that's what you actually send to the verifier is all of the rows upside down, right? And the verifier can start flipping random rows and see, okay, he has 123-45-6789 and he didn't cheat. Right? And the verifier doesn't actually have to flip every single row. It's probabilistic mathematics. If you randomly flip it, the chance of them cheating is extremely low. Right.
00:07:41.516 - 00:08:13.272, Speaker B: And you might ask, okay, great, that sounds good, but how do you actually create a proof? And that's something my girlfriend said. She was sitting there scratching her head like Sudoku. Honestly, it's a bit hard to explain without going deep into math. Right. The way that you can think about this is it's hard to understand how computers and circuit boards work with zeros and ones, but essentially you have zeros and ones. Those go through logic gates. Those logic gates on a circuit and magic picture appears on your computer, right? Zks are kind of like a virtual circuit board.
00:08:13.272 - 00:08:44.794, Speaker B: It's not actually zeros and ones that goes through there, but essentially you have logic gates. Those logic gates are in the circuit. And you can show that the way that you shuffled or cut the sudoku rows is correct, and you didn't cheat. So we can zoom a bit more into the ZK proof. So, this example is, let's say that you want to show that you have a valid passport. You're over a certain age, but you don't want to reveal some of the other data. For example, I don't know your date of birth or, sorry, your expiry of the document.
00:08:44.794 - 00:09:19.386, Speaker B: So what you can do is you can hide some of the inputs in your passport. Assuming it's a digital passport, then the public parts are your name or the date, right? And then we have something called witness data. So you essentially, you take all of that together, you do some calculations on it. That's the witness data. And here, essentially, you stick into the proverb, the private inputs, the public inputs. And then you do some. You have a relational circuit, and maybe you get a digital certificate from your government showing, this is a real passport.
00:09:19.386 - 00:10:38.064, Speaker B: Stick that into approver, it creates a proof, and then the verifier can just check true or false, like, is it a real passport, or do these conditions match? And if that didn't make a lot of sense, that's okay, because my hope is that ZK will become kind of like dos, right? And the explanation behind that is, before we had macOS or Windows, for every single different type of computer architecture that you had different type of cpu, different type of gpu, you needed a new custom operating system, right? And then Microsoft stole, invented DOS. And now it works as a general basis on any computer with any architecture, and with some things like ZK, EVM, or circum or noir, which are languages a programmer does not actually need to know how the math underneath works, they can still write zero knowledge programs. And this is a common question that I get. What is the difference between snark and Stark? And honestly, it doesn't really matter for you. The reality is, snarks are much cheaper to verify on Ethereum. They're harder to prove, but they're cheaper to verify. And that's a good thing, because transactions on Ethereum are very expensive, right? Starks are more expensive to verify.
00:10:38.064 - 00:11:11.564, Speaker B: But they're cheaper to prove. And the important thing that you really need to know is snarks use something called elliptic curves. Those are not quantum resistant or quantum computer resistant. Starks essentially use collision resistant hashes, which at least for now, we have not figured out a way to essentially break with quantum computers. Starks are scalable, transparent arguments of knowledge. Snarks are succinct, non interactive arguments of knowledge. So here are some applications for ZK and how it will actually change the world.
00:11:11.564 - 00:12:02.246, Speaker B: So the first and most important thing that you really need to know about ZK in general is its verifiable computation, right? Just kind of explanation on that. So here's how current blockchains work, like Ethereum or bitcoin, or some of the shittier ones. Every operator in that network needs to re execute every single transaction that comes in. If they don't, we can't form consensus around what the truth of the blockchain is. So let's say you have a network with 3000 nodes. Each node takes 5 seconds to process a block. That means around the world there's computers doing 4 hours re executing the same information over and over and over, which is honestly just wasteful, right? ZK is a new paradigm in computing where essentially you don't need to re execute it.
00:12:02.246 - 00:12:41.102, Speaker B: You can just verify that the one person did their job. They cannot lie. So if you check the proof, you know for a fact that they did the computation correctly without consensus, right? So you could actually have bitcoin, instead of having 16,000 nodes re executing over and over again and playing this really power hungry game, you could have one node that verifies and you get the same level of security, right? Maybe you want more than one. Maybe you could have ten or more in case, because if the one fails, essentially there's a liveness failure. There's not a security failure, but a liveness failure. And everyone else on the network just verifies. They did it.
00:12:41.102 - 00:13:34.850, Speaker B: They did it. Okay, fine. So the most common use that people on blockchain know for ZK is key scaling, right? And here's kind of how current blockchain works, right? The more transactions you get into a block, each of these white dots is another transaction that you linearly have more work to do to process that block, right? But the problem is we want like a MacBook to be able to run this network so it can be decentralized, right? So Ethereum and bitcoin propose or enforce something called a block limit. In Ethereum, it's around 30 million gas in this way, in every block, you can make sure that a specific type of computer, or cheap enough computer, can actually execute that block. In ZK, it's a bit different. The one prover, the more transactions you get is scales. Quasi linear.
00:13:34.850 - 00:14:20.464, Speaker B: It's close to linear, it's actually a bit more. But essentially you can have one supercomputer, or just a normal server doing blocks and executing all the transactions. And then every single other node just needs to verify those transactions. So you still stay under that limit. Maybe you can have a mobile phone actually verifying this network. And that difference between the verification and the proving is essentially the scalability limit. The benefit of ZK for scaling, and for ethereum to become the backend of the Internet of value, we at least need more than what visa processes, right? And visa processes 20 to 60,000 transactions per second.
00:14:20.464 - 00:15:00.944, Speaker B: So here's sort of how much ZK can scale. Ethereum, for example, and this is a bit exaggerated, it's actually taking into consideration a lot of optimizations in the future. But essentially today, Ethereum processes 15 to 30 transactions per second. With one zkl two, you essentially get a ten to 100 x scale on top of it. Maybe you get 3000 transactions. After we have something called proto dank sharding, which is Ethereum's plan for essentially providing more data. In each block, you get another ten to 100 x scalability, 3000 transactions per second.
00:15:00.944 - 00:16:19.784, Speaker B: And with full dank sharding, we'll get actually probably around ten to 100 x more. And the thing to note is, that's for one l two, we also have arbitrum and optimism, Zksync and scroll and all of these other things. Then there's this idea of fractal scaling, or for optimism, they call it hyperchain. And the idea is we can keep building layers on top of that, and with each layer you get another order of magnitude more scalability, right? And that's like at that point, with a couple of l two s and some l three s, we're already over 60,000 transactions per second. And the important thing to note about this is, unlike some blockchains, Solana, some blockchains, this is sustainable scaling, right? You only need that one prover to actually execute those transactions. And even if the prover goes down, it's not a security incident, it's a liveness failure, right? And with some optimizations like data and transaction compression, us making the provers more efficient, we'll actually scale the blockchain even more. And I do have a speech coming out probably in Paris for scaling ethics.
00:16:19.784 - 00:17:07.002, Speaker B: It's supposed to have quotes to infinitely, but it didn't fit on the slide. How do we essentially scale ETH infinitely without having issues with Ux across all these l three s and without having liquidity fragmentation? Another example for ZK is for the purpose of interoperability. So example, this is ZK, like Clientbridge. And essentially it provides you, like Zkibc, it provides you minimal trust assumptions outside of the consensus of the two blockchains, right. And essentially allows you slightly safer bridging between cross chain applications. An important thing to note on this though, is it's still not secure. Essentially, you need to verify what state the state of Ethereum on Solana, for example, for it to be a secure transaction.
00:17:07.002 - 00:17:47.004, Speaker B: And to do that, to make sure that someone didn't just fork Ethereum and say, this is the truth, you need to verify every single validator signature, which is like 400,000 signatures. Good luck submitting that onto Solana. Right. People take shortcuts or have multisigs or other things testifying, which is the correct version of Ethereum. In the fractal landscape, we also have something called hyperbridges. And the idea of every one of those l two s, l three s, l four s, use exactly the same circuit for bridging. So now you actually have, as long as the l two bridge is secure, all of those other bridges are completely secure without having any additional trust assumptions.
00:17:47.004 - 00:18:52.996, Speaker B: So it's much safer bridging. And the nice thing is, for example, on Zksync there's one common bridge. So if you want to get from somewhere up here to over here, you don't need to bridge it all the way down. You can essentially do some math, like accounting, and just change the location down here where the assets are. So it just appears from here to here. An important part of blockchains, one of the main reason why we have Ethereum is called atomic composable. The idea is one contract can trigger another contract in the same transaction, right? And with cross chain world of having Solana or Ethereum, we can't really have atomic composability, right? There is always going to be additional trust assumptions with Zk in the l two l three world, we can essentially have from arbitrum to Zk sync, a sort of pseudo atomic composability, where you bridge through l one and you can trigger a transaction asynchronously with something called shared sequencers, which I'm working on with projects right now.
00:18:52.996 - 00:19:45.950, Speaker B: Maybe in Zksync you could essentially have atomic composability between all the l three. So you could trigger one contract from one l three directly on another one in the same block. I do have a whole speech on the next generation of safer cross chain bridges and how all bridges still suck, which is actually surprisingly important for the community because they don't understand the security assumptions they're taking. ZK is also very useful for identity. So currently for signing up for any application, random website, random important site, like any app, you have to provide all of your information or at least your email address, a password. And this isn't great because if any one of those websites or applications gets hacked or sells your information, you're doxxed. Not even in the anonymous way.
00:19:45.950 - 00:20:25.966, Speaker B: It just like this affects everyone in the world. And currently the way that you prove, for example, you're over 18 is you send them the users 32, right? And this isn't great because again, any one of those gets hacked or they just choose to sell the information. People know this person and is 32. With ZK, essentially we can create a proof of a digital driver's license showing just the users over 18. And still now this website will still store the fact that they're over 18, but you could be 100, you could be 72. So it's a lot less useful information. Same thing for a country.
00:20:25.966 - 00:21:04.764, Speaker B: Maybe you have to show that you're a finnish citizen so you can use that exchange. With ZK we can essentially just show that this person is not from a sanctioned country. Again, less useful information. There's a lot of countries in the world or maybe you go to a bored ape party. Right now, the way that you do it is you actually show which bored ape NFT you have, which isn't great because maybe you bought that on the wrong wallet and now everyone sees all of your financial history. With ZK you can just show a proof of membership. You have an NFT which belongs to a set and now you can enter the party and you can choose whether you want to actually give that to your friends or not, which one you have.
00:21:04.764 - 00:21:56.054, Speaker B: And all of these identity things kind of lead to this example of one KYC, one identity to rule them all. And currently if you sign up for Coinbase, you sign up for a bank, you sign up as an Uber driver, you have to provide them all of your information, your tax documents, your passport, like literally like a 3d facial scan. And again, that's really bad. If any of them decide to sell it or get hacked with ZK, maybe your bank or your government could attest to the fact that this is a legal person, they pay their taxes and then you just send the proof to coinbase or binance or to buy a house. Or maybe you could have a tornado cash where you actually have privacy. And you could actually show the fact that you're not a hacker or money launderer. Right? And that brings us to privacy.
00:21:56.054 - 00:22:34.326, Speaker B: Right? Important note here is ZK does not necess. Yeah, ZK does not essentially mean privacy. It can be used for privacy. But most of these implementations, like starkware or Polygon, ZK EVM, are not actually private blockchains. Right? And in this case, think of CK zero knowledge as the fact that it's verifiable computation. You don't have to show all of your work, you can just see that the state is correct, but it can be used for privacy. Right? So an example of this again, if you sign up for any website, most of us don't change passwords for every website.
00:22:34.326 - 00:23:03.882, Speaker B: You should. You really should, but most of us don't. Right? So if any one of those websites gets hacked, they can take your email and password and literally like log into all of your other services. And the reality is, 81% of all hacking incidents is this. They hacked a random website you signed up for 15 years ago, and now they can get into your bank and everything else. So this is the way we currently do it, right? You send your password to the website server. If they're dumb, they store it in plain text.
00:23:03.882 - 00:23:35.214, Speaker B: Happens more than you think. If they're a little bit smarter, they store it as a hash. Right? If it's plain text, anyone can hack their database, they get your password. If it's a hash, they can essentially hack into the server and just wait as people log in and they collect everyone's passwords. With ZK, essentially they just store a user id and essentially an output of a ZK proof. And you can essentially sign on your own computer your email and password combination. Just send the proof to the server and the server never knows your password or email.
00:23:35.214 - 00:24:23.554, Speaker B: Or maybe if you want their, like, if they want your email, you can send that, but not the password. It can also be used as a privacy blockchain. Right? And essentially privacy blockchain, unlike ethereum or bitcoin, you can't really view the balances or the transactions of other people. It does this by obfuscating either the amounts that you're sending, who you're sending to, and it kind of depends on the implementation, right? An example of this is as tech ZK money, right? They actually closed their current version, they're coming out with a new version. And there are other ways to do private blockchains, such as like fully homomorphic encryption or intel SGX or even an MPC. But at the moment, ZK is much better. In the future, maybe fhe in combination with ZK will be the solution.
00:24:23.554 - 00:25:12.984, Speaker B: And this is again how public blockchains work. So in ethereum or bitcoin, you have to send your transaction, who you're sending it to, your amount, and every single node on that network process it. So it's public, right? In a private blockchain, you can essentially create a proof on your computer showing that you're not double spending, you have enough money to send, and then every single node on that network just verifies your proof instead of actually executing anything. And I do have actually, this is a speech I'll be doing today at like 245 in the crypto anarchy stage. But you can also watch it later. Privacy in web3. Why should you care? And how do we improve privacy protocols to prevent hackers and criminals from using them? And the last sort of example, or set of examples, is just understanding our world in general.
00:25:12.984 - 00:26:23.784, Speaker B: Every time we discover a new field of mathematics, we start understanding the world around us better. We start understanding, maybe the sun doesn't rotate around us, or how a shell is formed, how to make medicine, right? And they're essential to the development of the world. Everything we've come up with, any sort of modern technology we have, is completely based on mathematics. And a silly example of this is we could not make a pencil without knowing algebra and chemistry and a bit of physics, because that led took hundreds of years to develop through chemical compounds. The wood is a very specific formulation of wood. The rubber is incredibly complex chemical products, right? And the idea is like, it doesn't just apply to blockchain, it applies to everything in the world, right? Like maybe for cameras in this modern day, where there's deep fakes, right? And maybe trump grabs another pussy and you can't. No fake news, deepfake, right? You can have a camera with a trusted sensor attesting to where it was taken, the time it was taken, right? That's not the image we're going to put on, because that's going to probably be a raw image.
00:26:23.784 - 00:27:03.344, Speaker B: Maybe you need to scale that down or crop it or put a filter over it. You can create a ZK proof of any of these transitions, proving that this is still the original image and this actually happened. Or maybe you could have some sort of proof of storage in clouds. I won't go into that one, but it's actually quite an exciting field. Or maybe we could speed up computers by making like a cache layer so the cpu or GPU never have to re execute the same transaction or same calculation over and over. Or machine learning models. Like maybe Google doesn't have to trust their data center providers to actually run the machine learning model correctly.
00:27:03.344 - 00:27:41.524, Speaker B: They can actually just prove that they ran it correctly and they're not just being lazy and lying. Or we could prove that data for a machine learning model is not copyrighted material. Right? The last two examples are a bit more theoretical. There was a paper essentially, where cryptography might actually help us understand black holes rather than just normal mathematics like actual cryptography. Maybe it makes us understand black holes, right? Or maybe it makes us understand quantum entanglement. The point of this speech is math is very cool. Like, yay.
00:27:41.524 - 00:28:14.744, Speaker B: No, just kidding. Whether you like math or not, ZK will be around. It will change the world around you, so it's worth paying attention to. Thanks for caring about ZK. Hopefully you did not fall asleep like most people explaining ZK. And my again, you can follow me on Twitter. And I think we have time for questions as well.
00:28:14.744 - 00:28:19.144, Speaker B: I'm not actually sure how much time we have. Ten minutes. Cool.
00:28:22.644 - 00:28:25.464, Speaker C: Any questions for the session?
00:28:26.924 - 00:28:58.884, Speaker B: Yeah. Daniel, awesome talk. Thanks so much. You helped me a lot. Understand the space better. How far are we away from the doors? What's your gut feeling? So when do we see browser integrations? Os integrations? When this is more than blockchain. So cryptography is always about an incentive model, right? So in blockchain we have a lot of incentive to use zero knowledge proofs because it provides us privacy or scales, something that really can't be scaled currently.
00:28:58.884 - 00:29:20.544, Speaker B: So there are some other applications. Honestly, it's a community push, right? Like chat, GPT is already in trouble. Or some of these AI's are in trouble for making a fake version of Drake's song, right? And he's pissed. He's probably going to sue them. So maybe they can create a Zk proof of the source of each query to show. Okay, we didn't train it on Drake's songs. It's a derivative work.
00:29:20.544 - 00:29:45.574, Speaker B: It's a legal version. It'll be some time before it becomes mainstream adopted. That being said, it's progressed an incredible amount in the of last few years because of the billions of dollars that are in blockchain. It really provides really good incentive to develop the tooling and the math primitives behind ZK. So adaptation can happen a lot faster now than it could have a year ago. Two years ago.
00:29:47.794 - 00:30:03.914, Speaker C: Thank you. Anyone else who would like to ask a question? I would also like to say you can also do the questions on live. So if you're shy asking here, you can just post your question and I will speak it for you.
00:30:04.934 - 00:30:38.052, Speaker D: Hi there, thanks for the talk. Great turnout at 10:00 a.m. Saturday morning. I was wondering if you know a little bit, like, if you can tell a little bit more about the history, how ZK world and blockchain world actually partnered, because this is really interesting that the concept has been already for some time in the space. Cryptography is even older and it just like applied for Ethereum World. So how did that actually happen? If you can answer.
00:30:38.188 - 00:31:30.134, Speaker B: So ZK proofs have actually been. The concept has been studied since the eighties, right? Or late seventies. And the problem with the versions back then was the fact that it had to be interactive, so the prover had to be online when the verifier was checking that this computation was done correctly. So that's not great, because maybe they did the proof ten years ago, right? In around 2016 to 2018, Eli Ben Sassen essentially invented the first non interactive version that's generalized. And he was looking around, he was thinking, ok, where can I get funding to actually develop it? Where does it make sense to develop it? And he thought of blockchain, right? You can add a, you can make a private blockchain, you can have public state that's private, which is just mind blowing. That's when I started getting into ZK. He developed Zcash.
00:31:30.134 - 00:31:33.734, Speaker B: So Zcash was the first blockchain application of ZK.
00:31:35.714 - 00:32:03.902, Speaker E: Thank you for a great talk. This is fantastic. I tried some of these things, specifically Zcash, the private transactions back in 2018. It would like take five minutes to do the proof. Your computer would heat up, the fans would go on. Same thing. Now, even five years later, you know, when you use like the railgun guys, you know, railgun day, you can wrap your coins into a ZK space and do your uniswap changes in a folded space, but it's still very unreliable.
00:32:03.902 - 00:32:32.344, Speaker E: When you actually try to generate a proof on your desktop again, it heats up. Fans, come on. Takes three minutes, whatever. It takes extremely long. And by the time you produce the proof, sometimes there's an expiry for the relayers or whatever. To me it still feels very experimental. What do you think is the current state of maturity of the technology with respect to a practical day to day use case?
00:32:32.844 - 00:33:06.486, Speaker B: Yeah, so there's a couple of things on that. First of all, if you're using a ZKe EVM, you never have to worry about generating a proof. Verifying a proof can be done on a mobile phone. If you use a privacy protocol like Aztec or Zcash, you do have to generate a proof, right? Right. Now, Aztec for on my MacBook, and I do have a relatively high end MacBook, took a couple seconds to generate. That's not most people in the world, though, right? But we're making incredible advancements with the billions of dollars that are behind this. And it's getting faster and faster to prove.
00:33:06.486 - 00:33:34.504, Speaker B: Like some planky three is very exciting, or there's a lot of new hyper, there's too many planks, they're getting a lot faster to prove, and we're sticking stupid amounts of money into it, and it'll get a lot cheaper to prove. And then at the same time, hardware, like consumer hardware devices, keep getting more and more powerful. Right? So maybe today it requires a MacBook. Maybe in five years you can have a shitty Dell that does the same thing.
00:33:39.884 - 00:33:53.436, Speaker C: Okay, we have one question, which you have partially also answered here. Where would you see the ZK getting real adoption in businesses and industries? Any trend example that are your favorite that you would like to share?
00:33:53.580 - 00:34:42.570, Speaker B: So I like blockchain is the short answer. The longer answer is the CEO of Onnx, which is JPMorgan Chase's blockchain department, said that if we don't have privacy in a blockchain, no institution or bank will ever use blockchain. These companies have trade secrets, they have customer data, they have all these processes that they don't want to make public to people because this is how they are. They don't really believe in open source. And so honestly, like, that would be my first sort of mainstream adaptation of things for like, essentially tracking the supply chain. It gets much more efficient in blockchain than in like, current applications. And that's like a ten x improvement rather than a 1.1
00:34:42.570 - 00:35:05.913, Speaker B: x improvement like Vitalik said. And I think that's kind of institutional adaptation will be the first major use of z. And then the other thing is, again, Twitter showing that they actually use the algorithm that they posted rather than posting a random algorithm and then using something else behind. Yeah.
00:35:08.373 - 00:35:12.753, Speaker F: Thanks for a great talk. I think you have a bit less people than Vitalik yesterday.
00:35:13.853 - 00:35:18.245, Speaker B: So we are building this or the ecovillage one before. Yeah, true.
00:35:18.429 - 00:35:37.270, Speaker F: We are building a security layer. And so you mentioned the privacy, like the application of the privacy space but what do you think about the security application? So I thought you have the ZK proof of the machine learning. So which is the applicable, but so what other cases you see in the.
00:35:37.342 - 00:36:14.636, Speaker B: Security space, for example, the security space is actually, I worked with two guys, fed and Joel at ETH Denver. We made something called ZK proof of exploit. Right? And essentially you can prove that you can hack a contract without actually showing how you did it. And that's actually a major security implication because currently teams have so many bug bounty submissions, they have hundreds of them. What are they going to stick their main developers at checking every single bug bounty? And if they do, they check them very quickly and maybe they missed something. That's what happened with wormhole. That was actually a bug that had been submitted to them before.
00:36:14.636 - 00:36:29.814, Speaker B: And then they just looked at it very quickly. They're like, that's not critical. With ZK proof of exploit, you could essentially verify, oh shit, this guy can steal all of our money. I guess we should probably work on this, right? That's one example of security applications.
00:36:31.234 - 00:36:32.014, Speaker F: Thanks.
00:36:33.154 - 00:36:37.986, Speaker C: I think that's a very cool example as well. You can create exploit projects and not.
00:36:38.050 - 00:36:41.334, Speaker B: Tell how you are exploiting them on the Defi track.
00:36:43.354 - 00:36:56.064, Speaker F: Thanks a lot for your speech. I wanted to ask you if you could give your personal opinion about whether starks are a safer bet for the future than snarks because of quantum resilience rather than verification speed.
00:36:57.564 - 00:37:22.586, Speaker B: Yeah, I mean, preferably. We do use starks. They're quite expensive to essentially verify blockchain. I ask that question a lot from teams of how easy is it for you to switch circuits? And the reality is, first of all, quantum computers while they are coming, it's a bit of a meme when you get a quantum computer. We have quantum computers today. Right. But the process of actually getting them more and more powerful takes a very long time.
00:37:22.586 - 00:37:45.828, Speaker B: And for them to be powerful enough to even break a single snark in not years or decades is still far away. Right. But maybe China is working on something in the background. We don't know that they are. I mean, the US is too. Everyone is. I do think that purely from a point of view of building for the future, it is better to use starks.
00:37:45.828 - 00:38:32.714, Speaker B: That being said, bitcoin is not quantum resistant. Ethereum can be, but it's not yet. Literally every single bit of cryptography, Google Cloud, your password, all of them use quantum algorithms that are breakable by quantum computers. We have a lot bigger problems at that point too. I don't disagree that blockchain would maybe be make the most sense financially to attack first. But honestly, I think it's going to be a very long time before we actually get to the point that we really need to be scared of that. But I do encourage people like investing more in starks, doing some of the advancements in starks that we can do with elliptic curves and starks and just kind of progressing that feel to the point that it can use mainstream adaptation in blockchains.
00:38:32.714 - 00:38:34.374, Speaker B: Thank you.
00:38:36.914 - 00:38:41.494, Speaker C: Thank you. So just one last question, otherwise I will move on.
00:38:41.994 - 00:38:43.094, Speaker B: Let's go there.
00:38:49.714 - 00:39:05.714, Speaker G: Thank you for the talk. You have been very brief about CK bridges and sometimes it's sold as a panacea that we are not seeing any bridge attack anymore. In the future. If we're going to CK and connect.
00:39:05.754 - 00:39:07.654, Speaker B: Some, oh, we're definitely going to see more of them.
00:39:08.514 - 00:39:22.866, Speaker G: So basically, if we're having layer one blockchains connected through CK bridges, do we basically solve the bridging problem or do we really have to build everything on top of Ethereum for that one?
00:39:22.890 - 00:39:49.130, Speaker B: I do recommend to see the next generation bridge one and why all bridges suck. I go into much more detail on it, but the idea is, okay, ZK can prove the state of Ethereum in a very small verifiable computation. So now you can submit that onto Solana, right? And you can check. Okay, this guy really did lock up some funds in this bridge. Let's give it to them. The problem is you don't know whether that's the real Ethereum. Blockchains have fork choice rules.
00:39:49.130 - 00:40:19.716, Speaker B: They fork all the time. And someone could literally just come and fork Ethereum on their own computer. Like just have one node and say like, see, I have a million, see, and then Solana would release all of its funds or the bridge on Solana would release all of its funds. So the problem is you need to verify the canonical fork canonical state of which Ethereum is this. And for that you need essentially all the validator signatures to do it safely. And that's not going to be possible. Right.
00:40:19.716 - 00:40:35.204, Speaker B: So you still essentially like the ZK part is sound. That works great. The problem is for attesting to the right state, you need either older attestations or most of these ZK bridges use like a small committee so it becomes a multisig bridge again.
00:40:36.304 - 00:40:54.376, Speaker G: But you could basically put the risk on the liquidity providers on each side and basically have through the fee mechanism cover for possible wrong choices on the other side, right?
00:40:54.480 - 00:41:14.048, Speaker B: I mean that's true. And I much prefer liquidity provider bridges to wrap the asset bridges. The problem is, like, maybe you can send the native version of USDC from Ethereum to the native version of USDC on Solana. You'll never be able to send Ethereum to Solana. Right. That always has to be a wrapped asset because Ethereum doesn't exist on Solana. Right.
00:41:14.048 - 00:41:35.356, Speaker B: So then you have these assets. You think you're holding Ethereum there. Someone just quickly forks Ethereum because maybe now there's billions of Ethereum on Solana, and they just ran away with billions. So wrapped assets are still going to be an issue. And even liquidity providers, like, I, would not provide liquidity to these kind of bridges.
00:41:35.540 - 00:41:36.464, Speaker G: Thank you.
00:41:38.804 - 00:41:41.944, Speaker C: Thank you, Daniel. We'll move to the next session now.
00:41:42.644 - 00:41:43.404, Speaker B: Yes. Thank you all.
