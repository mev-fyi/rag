00:00:18.800 - 00:00:49.014, Speaker A: All right. Hi, I'm Andrei, I work at Carmine. We are a risk management platform. But what I work on currently is that I'm building Konoha, which is a toolkit for Daos and Starknet. Basically if you need some governance functionalities on Ethereum you just fork compound. If you need a staking curve, you just fork curve. But there's nothing such as Starknet because we are not the EVM and that needs to be built and we're building that as a public good.
00:00:49.014 - 00:01:54.924, Speaker A: We have funding from the starting foundation through onlydust and they are doing this to help onboard new developers to the ecosystem. How only does works is that the contributors get paid for every pr that I merge. We set the amount and they can either fix an existing issue that's open or they can also add their own pr. So yeah, it's live in multiple ecosystems. There are even some bigger projects you might know, like Viper or reef. What's very cool is that the contributor can actually just set what they work on, right? So let's say I want to, there's a library that I use and I need to fix the bug. And now there's this dilemma of kind of like do I fix it myself and do I upstream it or not? And it helps to push the last.
00:01:54.924 - 00:02:38.680, Speaker A: Yeah, because we pay you, we help you get over that last hump. It's really good for the contributors, especially as a first experience because you get hands on help on a real project, which is usually much better than school. Right, because it's a real project and there's an actual business context. Right. It's, as I mentioned, very good for the open source contributor and it's usually also a pleasant surprise. Like my first experience with Hollandust was when I fixed a bug in a library that I was using. And then I got a message from the maintainer and he was like, hey, I didn't find you only dust.
00:02:38.680 - 00:03:28.120, Speaker A: I was like, what's only dusty? And he told me I'm just going to get paid a few bucks for that. Which was super cool. Let's look at how does it look like from the project's perspective when you have these contributors who decide what to work on and have no commitment, obviously they are quite flaky and you can't use it as the main way to get work done because they usually don't have the context of the whole project. They try to work only on the issue that they are assigned. Right. It's basically impossible to assign hard, interdependent tasks where you need to get the whole context of the project in mind. But still, it helps a lot and it helps onboarding developers, so it's fun usually.
00:03:28.120 - 00:04:24.380, Speaker A: Also, the time spent managing the contributors is more more than this time I would spend doing it myself. But that's a cost, right? And that goes down with time. So what did I learn doing this? One thing is that students are actually the best contributors, partly because everyone has to be a student, right? Even those that are technically not in university. They are super eager to climb the learning curve and to actually get the work done. Contributors procrastinate a lot. What I found helps a lot is just to ask them, can you set yourself a deadline? And you need to do this even for tasks that are not critical. Like, I don't care whether this task is done in a year or six months or three months, but if they don't have a deadline, they will just keep postponing it forever.
00:04:24.380 - 00:05:27.864, Speaker A: Obviously what's maybe not quite obvious is that if you get plain bad code, it's very hard to give feedback on it, right. You can point out a few issues with it, but they fix these issues. But if it needs a big refactor, I would just refactor it myself. Which is why I have the contributors open on draft, print and check their first comments. And if it doesn't look like they will be up to the task, I just asked him, are you sure that you are handling this and it actually really works well because obviously they have a good idea of how well they're doing because they spent the time doing the initial work. Right. Excellent writing is super necessary for this to work at all because the contributors will usually just read me a bit of the docs and the issue that they got.
00:05:27.864 - 00:05:52.944, Speaker A: They will not read the code and you need to serve all the information they need to get the issue done on a silver platter and make sure that they don't build something else than you want to build. All right, that's it. Do you have any questions? Okay, yeah.
00:05:54.884 - 00:06:03.184, Speaker B: Are you using any tooling like wonderverse or dwork or any of those platforms that allow you to have distributed teams in Daos?
00:06:04.044 - 00:06:12.224, Speaker A: No, I'm not sure what these tools do, to be honest. I just use GitHub, if that makes sense.
00:06:12.684 - 00:06:13.744, Speaker B: Cool, thanks.
00:06:14.064 - 00:06:14.504, Speaker A: Thank you.
